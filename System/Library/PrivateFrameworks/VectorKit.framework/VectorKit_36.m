void sub_19FE30A04(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

int8x8_t *md::VKMRenderResourcesStore::disconnect<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>>(int8x8_t *result, unint64_t a2)
{
  int8x8_t v2;
  uint8x8_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = result[336];
  if (v2)
  {
    v3 = (uint8x8_t)vcnt_s8(v2);
    v3.i16[0] = vaddlv_u8(v3);
    if (v3.u32[0] > 1uLL)
    {
      v4 = a2;
      if (*(_QWORD *)&v2 <= a2)
        v4 = a2 % *(_QWORD *)&v2;
    }
    else
    {
      v4 = (*(_QWORD *)&v2 - 1) & a2;
    }
    v5 = *(_QWORD **)(*(_QWORD *)&result[335] + 8 * v4);
    if (v5)
    {
      v6 = (_QWORD *)*v5;
      if (v6)
      {
        if (v3.u32[0] < 2uLL)
        {
          v7 = *(_QWORD *)&v2 - 1;
          while (1)
          {
            v9 = v6[1];
            if (v9 == a2)
            {
              if (v6[2] == a2)
                goto LABEL_22;
            }
            else if ((v9 & v7) != v4)
            {
              return result;
            }
            v6 = (_QWORD *)*v6;
            if (!v6)
              return result;
          }
        }
        do
        {
          v8 = v6[1];
          if (v8 == a2)
          {
            if (v6[2] == a2)
            {
LABEL_22:
              v10 = v6[4];
              if (!v10 || (v11 = v10 - 1, (v6[4] = v11) == 0))
                v6[3] = 0;
              return result;
            }
          }
          else
          {
            if (v8 >= *(_QWORD *)&v2)
              v8 %= *(_QWORD *)&v2;
            if (v8 != v4)
              return result;
          }
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
    }
  }
  return result;
}

unint64_t md::VKMRenderResourcesStore::createRenderItem(uint64_t a1, unint64_t *a2)
{
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64x2_t *v13;
  int64x2_t **v14;
  int64x2_t **v15;
  uint64_t *v16;
  uint64_t **v17;
  uint64_t **v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  int64x2_t *v24;
  int64x2_t **v25;
  unint64_t v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  __int128 *v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;

  v4 = *(int8x8_t *)(a1 + 216);
  if (!*(_QWORD *)&v4)
    goto LABEL_21;
  v5 = *a2;
  v6 = (uint8x8_t)vcnt_s8(v4);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = *a2;
    if (v5 >= *(_QWORD *)&v4)
      v7 = v5 % *(_QWORD *)&v4;
  }
  else
  {
    v7 = (*(_QWORD *)&v4 - 1) & v5;
  }
  v8 = *(_QWORD **)(*(_QWORD *)(a1 + 208) + 8 * v7);
  if (v8)
  {
    v9 = (_QWORD *)*v8;
    if (*v8)
    {
      if (v6.u32[0] < 2uLL)
      {
        v10 = *(_QWORD *)&v4 - 1;
        while (1)
        {
          v12 = v9[1];
          if (v12 == v5)
          {
            if (v9[2] == v5)
              goto LABEL_22;
          }
          else if ((v12 & v10) != v7)
          {
            goto LABEL_21;
          }
          v9 = (_QWORD *)*v9;
          if (!v9)
            goto LABEL_22;
        }
      }
      do
      {
        v11 = v9[1];
        if (v11 == v5)
        {
          if (v9[2] == v5)
            break;
        }
        else
        {
          if (v11 >= *(_QWORD *)&v4)
            v11 %= *(_QWORD *)&v4;
          if (v11 != v7)
            goto LABEL_21;
        }
        v9 = (_QWORD *)*v9;
      }
      while (v9);
    }
  }
  else
  {
LABEL_21:
    v9 = 0;
  }
LABEL_22:
  v13 = *(int64x2_t **)(a1 + 288);
  if (!v13)
  {
    v14 = (int64x2_t **)malloc_type_malloc(*(_QWORD *)(a1 + 280), 0x160B39uLL);
    v15 = v14;
    v16 = *(uint64_t **)(a1 + 256);
    if (v16)
    {
      while (1)
      {
        while (1)
        {
          v18 = (uint64_t **)v16;
          v19 = v16[4];
          if ((unint64_t)v14 >= v19)
            break;
          v16 = *v18;
          v17 = v18;
          if (!*v18)
            goto LABEL_30;
        }
        if (v19 >= (unint64_t)v14)
          break;
        v16 = v18[1];
        if (!v16)
        {
          v17 = v18 + 1;
          goto LABEL_30;
        }
      }
    }
    else
    {
      v17 = (uint64_t **)(a1 + 256);
      v18 = (uint64_t **)(a1 + 256);
LABEL_30:
      v20 = (uint64_t *)operator new(0x28uLL);
      v20[4] = (uint64_t)v15;
      *v20 = 0;
      v20[1] = 0;
      v20[2] = (uint64_t)v18;
      *v17 = v20;
      v21 = **(_QWORD **)(a1 + 248);
      if (v21)
      {
        *(_QWORD *)(a1 + 248) = v21;
        v22 = *v17;
      }
      else
      {
        v22 = v20;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 256), v22);
      ++*(_QWORD *)(a1 + 264);
    }
    v13 = *(int64x2_t **)(a1 + 288);
    v23 = 120 * *(_QWORD *)(a1 + 272) - 120;
    if ((v23 & 0x8000000000000000) == 0)
    {
      v24 = (int64x2_t *)((char *)v15 + v23);
      v25 = (int64x2_t **)((char *)v15 + v23);
      do
      {
        *v25 = v13;
        v25 -= 15;
        v13 = v24;
        v24 = (int64x2_t *)v25;
      }
      while (v25 >= v15);
      v13 = (int64x2_t *)(v25 + 15);
    }
  }
  *(_QWORD *)(a1 + 288) = v13->i64[0];
  v13->i64[0] = (uint64_t)&off_1E42B59B0;
  v13[3].i64[0] = 0;
  v13[2].i32[2] = 0;
  v13[1].i64[1] = 0;
  v13[2].i64[0] = 0;
  v13[1].i64[0] = (uint64_t)"";
  v13[4] = 0u;
  v13[5] = 0u;
  v13[3].i32[2] = 1065353216;
  v13[6] = vdupq_n_s64(1uLL);
  v13[7].i64[0] = 0;
  v27 = (char *)v9[4];
  v26 = v9[5];
  if ((unint64_t)v27 >= v26)
  {
    v29 = (char *)v9[3];
    v30 = (v27 - v29) >> 3;
    v31 = v30 + 1;
    if ((unint64_t)(v30 + 1) >> 61)
      abort();
    v32 = v26 - (_QWORD)v29;
    if (v32 >> 2 > v31)
      v31 = v32 >> 2;
    if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
      v33 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v33 = v31;
    if (v33)
    {
      if (v33 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v34 = (char *)operator new(8 * v33);
    }
    else
    {
      v34 = 0;
    }
    v35 = &v34[8 * v30];
    v36 = &v34[8 * v33];
    *(_QWORD *)v35 = v13;
    v28 = v35 + 8;
    if (v27 != v29)
    {
      v37 = v27 - v29 - 8;
      if (v37 < 0x58)
        goto LABEL_65;
      if ((unint64_t)(v29 - v34) < 0x20)
        goto LABEL_65;
      v38 = (v37 >> 3) + 1;
      v39 = &v34[8 * v30 - 16];
      v40 = (__int128 *)(v27 - 16);
      v41 = v38 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v42 = *v40;
        *((_OWORD *)v39 - 1) = *(v40 - 1);
        *(_OWORD *)v39 = v42;
        v39 -= 32;
        v40 -= 2;
        v41 -= 4;
      }
      while (v41);
      v35 -= 8 * (v38 & 0x3FFFFFFFFFFFFFFCLL);
      v27 -= 8 * (v38 & 0x3FFFFFFFFFFFFFFCLL);
      if (v38 != (v38 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_65:
        do
        {
          v43 = *((_QWORD *)v27 - 1);
          v27 -= 8;
          *((_QWORD *)v35 - 1) = v43;
          v35 -= 8;
        }
        while (v27 != v29);
      }
      v27 = (char *)v9[3];
    }
    v9[3] = v35;
    v9[4] = v28;
    v9[5] = v36;
    if (v27)
      operator delete(v27);
  }
  else
  {
    *(_QWORD *)v27 = v13;
    v28 = v27 + 8;
  }
  v9[4] = v28;
  return *a2;
}

uint64_t md::VKMRenderResourcesStore::getRenderItem(int8x8_t *a1, unint64_t a2, unint64_t a3)
{
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = a1[27];
  if (!*(_QWORD *)&v3)
    return 0;
  v4 = (uint8x8_t)vcnt_s8(v3);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = a2;
    if (*(_QWORD *)&v3 <= a2)
      v5 = a2 % *(_QWORD *)&v3;
  }
  else
  {
    v5 = (*(_QWORD *)&v3 - 1) & a2;
  }
  v6 = *(_QWORD **)(*(_QWORD *)&a1[26] + 8 * v5);
  if (!v6)
    return 0;
  v7 = (_QWORD *)*v6;
  if (!v7)
    return 0;
  if (v4.u32[0] < 2uLL)
  {
    v8 = *(_QWORD *)&v3 - 1;
    while (1)
    {
      v10 = v7[1];
      if (v10 == a2)
      {
        if (v7[2] == a2)
          goto LABEL_22;
      }
      else if ((v10 & v8) != v5)
      {
        return 0;
      }
      v7 = (_QWORD *)*v7;
      if (!v7)
        return 0;
    }
  }
  while (1)
  {
    v9 = v7[1];
    if (v9 == a2)
      break;
    if (v9 >= *(_QWORD *)&v3)
      v9 %= *(_QWORD *)&v3;
    if (v9 != v5)
      return 0;
LABEL_11:
    v7 = (_QWORD *)*v7;
    if (!v7)
      return 0;
  }
  if (v7[2] != a2)
    goto LABEL_11;
LABEL_22:
  v12 = v7[3];
  if (a3 >= (v7[4] - v12) >> 3)
    abort();
  return *(_QWORD *)(v12 + 8 * a3);
}

void md::VKMRenderResourcesStore::clearRenderItemGroup(_QWORD *a1, unint64_t *a2, int a3)
{
  int8x8_t v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int8x8_t v15;
  unint64_t v16;
  uint8x8_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD **v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  void (***v27)(_QWORD);
  _QWORD *v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;

  v6 = (int8x8_t)a1[27];
  if (v6)
  {
    v7 = *a2;
    v8 = (uint8x8_t)vcnt_s8(v6);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v9 = *a2;
      if (v7 >= *(_QWORD *)&v6)
        v9 = v7 % *(_QWORD *)&v6;
    }
    else
    {
      v9 = (*(_QWORD *)&v6 - 1) & v7;
    }
    v10 = *(_QWORD **)(a1[26] + 8 * v9);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (*v10)
      {
        if (v8.u32[0] < 2uLL)
        {
          v12 = *(_QWORD *)&v6 - 1;
          while (1)
          {
            v14 = v11[1];
            if (v14 == v7)
            {
              if (v11[2] == v7)
                goto LABEL_43;
            }
            else if ((v14 & v12) != v9)
            {
              goto LABEL_21;
            }
            v11 = (_QWORD *)*v11;
            if (!v11)
              goto LABEL_21;
          }
        }
        do
        {
          v13 = v11[1];
          if (v13 == v7)
          {
            if (v11[2] == v7)
            {
LABEL_43:
              v25 = (_QWORD *)v11[3];
              v26 = (_QWORD *)v11[4];
              if (v25 != v26)
              {
                do
                {
                  v27 = (void (***)(_QWORD))*v25;
                  if (*v25 && a1[33])
                  {
                    (**v27)(*v25);
                    *v27 = (void (**)(_QWORD))a1[36];
                    a1[36] = v27;
                  }
                  ++v25;
                }
                while (v25 != v26);
                v25 = (_QWORD *)v11[3];
              }
              v11[4] = v25;
              if (!a3)
                return;
              goto LABEL_22;
            }
          }
          else
          {
            if (v13 >= *(_QWORD *)&v6)
              v13 %= *(_QWORD *)&v6;
            if (v13 != v9)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_21:
  if (!a3)
    return;
LABEL_22:
  v15 = (int8x8_t)a1[27];
  if (v15)
  {
    v16 = *a2;
    v17 = (uint8x8_t)vcnt_s8(v15);
    v17.i16[0] = vaddlv_u8(v17);
    if (v17.u32[0] > 1uLL)
    {
      v18 = *a2;
      if (v16 >= *(_QWORD *)&v15)
        v18 = v16 % *(_QWORD *)&v15;
    }
    else
    {
      v18 = (*(_QWORD *)&v15 - 1) & v16;
    }
    v19 = a1[26];
    v20 = *(_QWORD ***)(v19 + 8 * v18);
    if (v20)
    {
      v21 = *v20;
      if (*v20)
      {
        v22 = *(_QWORD *)&v15 - 1;
        if (v17.u32[0] < 2uLL)
        {
          while (1)
          {
            v23 = v21[1];
            if (v23 == v16)
            {
              if (v21[2] == v16)
                goto LABEL_52;
            }
            else if ((v23 & v22) != v18)
            {
              return;
            }
            v21 = (_QWORD *)*v21;
            if (!v21)
              return;
          }
        }
        do
        {
          v24 = v21[1];
          if (v24 == v16)
          {
            if (v21[2] == v16)
            {
LABEL_52:
              if (v17.u32[0] > 1uLL)
              {
                if (v16 >= *(_QWORD *)&v15)
                  v16 %= *(_QWORD *)&v15;
              }
              else
              {
                v16 &= v22;
              }
              v28 = *(_QWORD **)(v19 + 8 * v16);
              do
              {
                v29 = v28;
                v28 = (_QWORD *)*v28;
              }
              while (v28 != v21);
              if (v29 == a1 + 28)
                goto LABEL_69;
              v30 = v29[1];
              if (v17.u32[0] > 1uLL)
              {
                if (v30 >= *(_QWORD *)&v15)
                  v30 %= *(_QWORD *)&v15;
              }
              else
              {
                v30 &= v22;
              }
              if (v30 != v16)
              {
LABEL_69:
                if (!*v21)
                  goto LABEL_70;
                v31 = *(_QWORD *)(*v21 + 8);
                if (v17.u32[0] > 1uLL)
                {
                  if (v31 >= *(_QWORD *)&v15)
                    v31 %= *(_QWORD *)&v15;
                }
                else
                {
                  v31 &= v22;
                }
                if (v31 != v16)
LABEL_70:
                  *(_QWORD *)(v19 + 8 * v16) = 0;
              }
              v32 = *v21;
              if (*v21)
              {
                v33 = *(_QWORD *)(v32 + 8);
                if (v17.u32[0] > 1uLL)
                {
                  if (v33 >= *(_QWORD *)&v15)
                    v33 %= *(_QWORD *)&v15;
                }
                else
                {
                  v33 &= v22;
                }
                if (v33 != v16)
                {
                  *(_QWORD *)(a1[26] + 8 * v33) = v29;
                  v32 = *v21;
                }
              }
              *v29 = v32;
              *v21 = 0;
              --a1[29];
              v34 = (void *)v21[3];
              if (v34)
              {
                v21[4] = v34;
                operator delete(v34);
              }
              operator delete(v21);
              return;
            }
          }
          else
          {
            if (v24 >= *(_QWORD *)&v15)
              v24 %= *(_QWORD *)&v15;
            if (v24 != v18)
              return;
          }
          v21 = (_QWORD *)*v21;
        }
        while (v21);
      }
    }
  }
}

unint64_t md::VKMRenderResourcesStore::createRenderableRegistryHandle(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  uint64_t *v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  _QWORD *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _BYTE *v34;
  _QWORD *v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  _OWORD *v39;
  char *v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  char *v44;
  unint64_t v45;
  _QWORD *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  _BYTE *v52;
  _QWORD *v53;
  char *v54;
  unint64_t v55;
  uint64_t v56;
  _OWORD *v57;
  char *v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;

  v4 = a1[1230];
  if (a1[1229] == v4)
  {
    v7 = ((a1[1236] - a1[1235]) >> 3) | 0x100000000;
    v8 = (uint64_t *)a1[1233];
    v9 = a1[1234];
    if ((unint64_t)v8 >= v9)
    {
      v11 = (uint64_t *)a1[1232];
      v12 = v8 - v11;
      v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 61)
        goto LABEL_72;
      v14 = v9 - (_QWORD)v11;
      if (v14 >> 2 > v13)
        v13 = v14 >> 2;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
        v15 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v15 = v13;
      if (v15)
      {
        if (v15 >> 61)
          goto LABEL_73;
        v16 = operator new(8 * v15);
      }
      else
      {
        v16 = 0;
      }
      v17 = (uint64_t *)&v16[8 * v12];
      v18 = &v16[8 * v15];
      *v17 = v7;
      v10 = v17 + 1;
      if (v8 == v11)
      {
        v11 = v8;
      }
      else
      {
        v19 = (char *)v8 - (char *)v11 - 8;
        if (v19 < 0x58)
          goto LABEL_76;
        if ((unint64_t)((char *)v11 - v16) < 0x20)
          goto LABEL_76;
        v20 = (v19 >> 3) + 1;
        v21 = &v16[8 * v12 - 16];
        v22 = v8 - 2;
        v23 = v20 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v24 = *(_OWORD *)v22;
          *(v21 - 1) = *((_OWORD *)v22 - 1);
          *v21 = v24;
          v21 -= 2;
          v22 -= 4;
          v23 -= 4;
        }
        while (v23);
        v17 -= v20 & 0x3FFFFFFFFFFFFFFCLL;
        v8 -= v20 & 0x3FFFFFFFFFFFFFFCLL;
        if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_76:
          do
          {
            v25 = *--v8;
            *--v17 = v25;
          }
          while (v8 != v11);
          v11 = (uint64_t *)a1[1232];
        }
      }
      a1[1232] = v17;
      a1[1233] = v10;
      a1[1234] = v18;
      if (v11)
        operator delete(v11);
    }
    else
    {
      *v8 = v7;
      v10 = v8 + 1;
    }
    a1[1233] = v10;
    v6 = *(v10 - 1);
  }
  else
  {
    v5 = *(_QWORD *)(v4 - 8);
    a1[1230] = v4 - 8;
    *(_DWORD *)(a1[1232] + 8 * v5) = (a1[1236] - a1[1235]) >> 3;
    *(_DWORD *)(a1[1232] + 8 * v5 + 4) = (((unint64_t)*(unsigned int *)(a1[1232] + 8 * v5 + 4) << 32)
                                        + 0x100000000) >> 32;
    v6 = v5 | ((unint64_t)*(unsigned int *)(a1[1232] + 8 * v5 + 4) << 32);
  }
  v26 = (char *)a1[1236];
  v27 = a1[1237];
  if ((unint64_t)v26 >= v27)
  {
    v29 = (char *)a1[1235];
    v30 = (v26 - v29) >> 3;
    v31 = v30 + 1;
    if ((unint64_t)(v30 + 1) >> 61)
      goto LABEL_72;
    v32 = v27 - (_QWORD)v29;
    if (v32 >> 2 > v31)
      v31 = v32 >> 2;
    if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
      v33 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v33 = v31;
    if (v33)
    {
      if (v33 >> 61)
        goto LABEL_73;
      v34 = operator new(8 * v33);
    }
    else
    {
      v34 = 0;
    }
    v35 = &v34[8 * v30];
    v36 = &v34[8 * v33];
    *v35 = a2;
    v28 = v35 + 1;
    if (v26 == v29)
    {
      v29 = v26;
    }
    else
    {
      v37 = v26 - v29 - 8;
      if (v37 < 0x58)
        goto LABEL_77;
      if ((unint64_t)(v29 - v34) < 0x20)
        goto LABEL_77;
      v38 = (v37 >> 3) + 1;
      v39 = &v34[8 * v30 - 16];
      v40 = v26 - 16;
      v41 = v38 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v42 = *(_OWORD *)v40;
        *(v39 - 1) = *((_OWORD *)v40 - 1);
        *v39 = v42;
        v39 -= 2;
        v40 -= 32;
        v41 -= 4;
      }
      while (v41);
      v35 -= v38 & 0x3FFFFFFFFFFFFFFCLL;
      v26 -= 8 * (v38 & 0x3FFFFFFFFFFFFFFCLL);
      if (v38 != (v38 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_77:
        do
        {
          v43 = *((_QWORD *)v26 - 1);
          v26 -= 8;
          *--v35 = v43;
        }
        while (v26 != v29);
        v29 = (char *)a1[1235];
      }
    }
    a1[1235] = v35;
    a1[1236] = v28;
    a1[1237] = v36;
    if (v29)
      operator delete(v29);
  }
  else
  {
    *(_QWORD *)v26 = a2;
    v28 = v26 + 8;
  }
  a1[1236] = v28;
  v44 = (char *)a1[1239];
  v45 = a1[1240];
  if ((unint64_t)v44 < v45)
  {
    *(_QWORD *)v44 = v6;
    v46 = v44 + 8;
    goto LABEL_71;
  }
  v47 = (char *)a1[1238];
  v48 = (v44 - v47) >> 3;
  v49 = v48 + 1;
  if ((unint64_t)(v48 + 1) >> 61)
LABEL_72:
    abort();
  v50 = v45 - (_QWORD)v47;
  if (v50 >> 2 > v49)
    v49 = v50 >> 2;
  if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8)
    v51 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v51 = v49;
  if (v51)
  {
    if (!(v51 >> 61))
    {
      v52 = operator new(8 * v51);
      goto LABEL_62;
    }
LABEL_73:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v52 = 0;
LABEL_62:
  v53 = &v52[8 * v48];
  v54 = &v52[8 * v51];
  *v53 = v6;
  v46 = v53 + 1;
  if (v44 != v47)
  {
    v55 = v44 - v47 - 8;
    if (v55 < 0x58)
      goto LABEL_78;
    if ((unint64_t)(v47 - v52) < 0x20)
      goto LABEL_78;
    v56 = (v55 >> 3) + 1;
    v57 = &v52[8 * v48 - 16];
    v58 = v44 - 16;
    v59 = v56 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v60 = *(_OWORD *)v58;
      *(v57 - 1) = *((_OWORD *)v58 - 1);
      *v57 = v60;
      v57 -= 2;
      v58 -= 32;
      v59 -= 4;
    }
    while (v59);
    v53 -= v56 & 0x3FFFFFFFFFFFFFFCLL;
    v44 -= 8 * (v56 & 0x3FFFFFFFFFFFFFFCLL);
    if (v56 != (v56 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_78:
      do
      {
        v61 = *((_QWORD *)v44 - 1);
        v44 -= 8;
        *--v53 = v61;
      }
      while (v44 != v47);
    }
  }
  a1[1238] = v53;
  a1[1239] = v46;
  a1[1240] = v54;
  if (v47)
    operator delete(v47);
LABEL_71:
  a1[1239] = v46;
  return v6;
}

unint64_t md::VKMRenderResourcesStore::createBaseMapRenderableItemHandle(md::VKMRenderResourcesStore *this, md::BaseMapTileDataRenderable *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  uint64_t *v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  _QWORD *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _BYTE *v34;
  _QWORD *v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  _OWORD *v39;
  char *v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  char *v44;
  unint64_t v45;
  _QWORD *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  _BYTE *v52;
  _QWORD *v53;
  char *v54;
  unint64_t v55;
  uint64_t v56;
  _OWORD *v57;
  char *v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;

  v4 = *((_QWORD *)this + 1252);
  if (*((_QWORD *)this + 1251) == v4)
  {
    v7 = ((*((_QWORD *)this + 1258) - *((_QWORD *)this + 1257)) >> 3) | 0x100000000;
    v8 = (uint64_t *)*((_QWORD *)this + 1255);
    v9 = *((_QWORD *)this + 1256);
    if ((unint64_t)v8 >= v9)
    {
      v11 = (uint64_t *)*((_QWORD *)this + 1254);
      v12 = v8 - v11;
      v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 61)
        goto LABEL_72;
      v14 = v9 - (_QWORD)v11;
      if (v14 >> 2 > v13)
        v13 = v14 >> 2;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
        v15 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v15 = v13;
      if (v15)
      {
        if (v15 >> 61)
          goto LABEL_73;
        v16 = operator new(8 * v15);
      }
      else
      {
        v16 = 0;
      }
      v17 = (uint64_t *)&v16[8 * v12];
      v18 = &v16[8 * v15];
      *v17 = v7;
      v10 = v17 + 1;
      if (v8 == v11)
      {
        v11 = v8;
      }
      else
      {
        v19 = (char *)v8 - (char *)v11 - 8;
        if (v19 < 0x58)
          goto LABEL_76;
        if ((unint64_t)((char *)v11 - v16) < 0x20)
          goto LABEL_76;
        v20 = (v19 >> 3) + 1;
        v21 = &v16[8 * v12 - 16];
        v22 = v8 - 2;
        v23 = v20 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v24 = *(_OWORD *)v22;
          *(v21 - 1) = *((_OWORD *)v22 - 1);
          *v21 = v24;
          v21 -= 2;
          v22 -= 4;
          v23 -= 4;
        }
        while (v23);
        v17 -= v20 & 0x3FFFFFFFFFFFFFFCLL;
        v8 -= v20 & 0x3FFFFFFFFFFFFFFCLL;
        if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_76:
          do
          {
            v25 = *--v8;
            *--v17 = v25;
          }
          while (v8 != v11);
          v11 = (uint64_t *)*((_QWORD *)this + 1254);
        }
      }
      *((_QWORD *)this + 1254) = v17;
      *((_QWORD *)this + 1255) = v10;
      *((_QWORD *)this + 1256) = v18;
      if (v11)
        operator delete(v11);
    }
    else
    {
      *v8 = v7;
      v10 = v8 + 1;
    }
    *((_QWORD *)this + 1255) = v10;
    v6 = *(v10 - 1);
  }
  else
  {
    v5 = *(_QWORD *)(v4 - 8);
    *((_QWORD *)this + 1252) = v4 - 8;
    *(_DWORD *)(*((_QWORD *)this + 1254) + 8 * v5) = (*((_QWORD *)this + 1258) - *((_QWORD *)this + 1257)) >> 3;
    *(_DWORD *)(*((_QWORD *)this + 1254) + 8 * v5 + 4) = (((unint64_t)*(unsigned int *)(*((_QWORD *)this + 1254)
                                                                                             + 8 * v5
                                                                                             + 4) << 32)
                                                        + 0x100000000) >> 32;
    v6 = v5 | ((unint64_t)*(unsigned int *)(*((_QWORD *)this + 1254) + 8 * v5 + 4) << 32);
  }
  v26 = (char *)*((_QWORD *)this + 1258);
  v27 = *((_QWORD *)this + 1259);
  if ((unint64_t)v26 >= v27)
  {
    v29 = (char *)*((_QWORD *)this + 1257);
    v30 = (v26 - v29) >> 3;
    v31 = v30 + 1;
    if ((unint64_t)(v30 + 1) >> 61)
      goto LABEL_72;
    v32 = v27 - (_QWORD)v29;
    if (v32 >> 2 > v31)
      v31 = v32 >> 2;
    if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
      v33 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v33 = v31;
    if (v33)
    {
      if (v33 >> 61)
        goto LABEL_73;
      v34 = operator new(8 * v33);
    }
    else
    {
      v34 = 0;
    }
    v35 = &v34[8 * v30];
    v36 = &v34[8 * v33];
    *v35 = a2;
    v28 = v35 + 1;
    if (v26 == v29)
    {
      v29 = v26;
    }
    else
    {
      v37 = v26 - v29 - 8;
      if (v37 < 0x58)
        goto LABEL_77;
      if ((unint64_t)(v29 - v34) < 0x20)
        goto LABEL_77;
      v38 = (v37 >> 3) + 1;
      v39 = &v34[8 * v30 - 16];
      v40 = v26 - 16;
      v41 = v38 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v42 = *(_OWORD *)v40;
        *(v39 - 1) = *((_OWORD *)v40 - 1);
        *v39 = v42;
        v39 -= 2;
        v40 -= 32;
        v41 -= 4;
      }
      while (v41);
      v35 -= v38 & 0x3FFFFFFFFFFFFFFCLL;
      v26 -= 8 * (v38 & 0x3FFFFFFFFFFFFFFCLL);
      if (v38 != (v38 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_77:
        do
        {
          v43 = *((_QWORD *)v26 - 1);
          v26 -= 8;
          *--v35 = v43;
        }
        while (v26 != v29);
        v29 = (char *)*((_QWORD *)this + 1257);
      }
    }
    *((_QWORD *)this + 1257) = v35;
    *((_QWORD *)this + 1258) = v28;
    *((_QWORD *)this + 1259) = v36;
    if (v29)
      operator delete(v29);
  }
  else
  {
    *(_QWORD *)v26 = a2;
    v28 = v26 + 8;
  }
  *((_QWORD *)this + 1258) = v28;
  v44 = (char *)*((_QWORD *)this + 1261);
  v45 = *((_QWORD *)this + 1262);
  if ((unint64_t)v44 < v45)
  {
    *(_QWORD *)v44 = v6;
    v46 = v44 + 8;
    goto LABEL_71;
  }
  v47 = (char *)*((_QWORD *)this + 1260);
  v48 = (v44 - v47) >> 3;
  v49 = v48 + 1;
  if ((unint64_t)(v48 + 1) >> 61)
LABEL_72:
    abort();
  v50 = v45 - (_QWORD)v47;
  if (v50 >> 2 > v49)
    v49 = v50 >> 2;
  if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8)
    v51 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v51 = v49;
  if (v51)
  {
    if (!(v51 >> 61))
    {
      v52 = operator new(8 * v51);
      goto LABEL_62;
    }
LABEL_73:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v52 = 0;
LABEL_62:
  v53 = &v52[8 * v48];
  v54 = &v52[8 * v51];
  *v53 = v6;
  v46 = v53 + 1;
  if (v44 != v47)
  {
    v55 = v44 - v47 - 8;
    if (v55 < 0x58)
      goto LABEL_78;
    if ((unint64_t)(v47 - v52) < 0x20)
      goto LABEL_78;
    v56 = (v55 >> 3) + 1;
    v57 = &v52[8 * v48 - 16];
    v58 = v44 - 16;
    v59 = v56 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v60 = *(_OWORD *)v58;
      *(v57 - 1) = *((_OWORD *)v58 - 1);
      *v57 = v60;
      v57 -= 2;
      v58 -= 32;
      v59 -= 4;
    }
    while (v59);
    v53 -= v56 & 0x3FFFFFFFFFFFFFFCLL;
    v44 -= 8 * (v56 & 0x3FFFFFFFFFFFFFFCLL);
    if (v56 != (v56 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_78:
      do
      {
        v61 = *((_QWORD *)v44 - 1);
        v44 -= 8;
        *--v53 = v61;
      }
      while (v44 != v47);
    }
  }
  *((_QWORD *)this + 1260) = v53;
  *((_QWORD *)this + 1261) = v46;
  *((_QWORD *)this + 1262) = v54;
  if (v47)
    operator delete(v47);
LABEL_71:
  *((_QWORD *)this + 1261) = v46;
  return v6;
}

unint64_t md::VKMRenderResourcesStore::createAssociationtemHandle(md::VKMRenderResourcesStore *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  uint64_t *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  unint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  void *v40;
  void *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  _BYTE *v50;
  _QWORD *v51;
  char *v52;
  unint64_t v53;
  uint64_t v54;
  _OWORD *v55;
  __int128 *v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t *v60;
  unint64_t v61;
  uint8x8_t v62;
  _QWORD *v63;
  _QWORD *v64;
  unint64_t v65;
  uint64_t v66;
  float v67;
  float v68;
  _BOOL8 v69;
  unint64_t v70;
  unint64_t v71;
  size_t prime;
  unint64_t v73;
  uint8x8_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  uint8x8_t v80;
  _QWORD *v81;
  _QWORD *v82;
  unint64_t v83;
  uint64_t v84;
  char **v85;
  char *v86;
  float v87;
  float v88;
  _BOOL8 v89;
  unint64_t v90;
  unint64_t v91;
  size_t v92;
  void *v93;
  void *v94;
  uint64_t v95;
  char *v96;
  size_t v97;
  size_t v98;
  size_t v99;
  char *i;
  size_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint8x8_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  size_t v109;
  uint64_t v110;
  uint64_t v111;
  char **v112;
  unint64_t v113;
  void *v115;
  void *v116[2];
  __int128 v117;
  void *__p[2];
  uint64_t v119;
  char *v120;
  char *v121;
  char *v122;
  char *v123;
  char *v124;

  v119 = 0;
  v117 = 0u;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v116 = 0u;
  v2 = *((_QWORD *)this + 1274);
  if (*((_QWORD *)this + 1273) == v2)
  {
    v5 = (-1227133513 * ((*((_QWORD *)this + 1280) - *((_QWORD *)this + 1279)) >> 3)) | 0x100000000;
    v6 = (uint64_t *)*((_QWORD *)this + 1277);
    v7 = *((_QWORD *)this + 1278);
    if ((unint64_t)v6 >= v7)
    {
      v9 = (uint64_t *)*((_QWORD *)this + 1276);
      v10 = v6 - v9;
      v11 = v10 + 1;
      if ((unint64_t)(v10 + 1) >> 61)
        goto LABEL_227;
      v12 = v7 - (_QWORD)v9;
      if (v12 >> 2 > v11)
        v11 = v12 >> 2;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
        v13 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v13 = v11;
      if (v13)
      {
        if (v13 >> 61)
          goto LABEL_228;
        v14 = operator new(8 * v13);
      }
      else
      {
        v14 = 0;
      }
      v15 = (uint64_t *)&v14[8 * v10];
      v16 = &v14[8 * v13];
      *v15 = v5;
      v8 = v15 + 1;
      if (v6 == v9)
      {
        v9 = v6;
      }
      else
      {
        v17 = (char *)v6 - (char *)v9 - 8;
        if (v17 < 0x58)
          goto LABEL_231;
        if ((unint64_t)((char *)v9 - v14) < 0x20)
          goto LABEL_231;
        v18 = (v17 >> 3) + 1;
        v19 = &v14[8 * v10 - 16];
        v20 = v6 - 2;
        v21 = v18 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v22 = *(_OWORD *)v20;
          *(v19 - 1) = *((_OWORD *)v20 - 1);
          *v19 = v22;
          v19 -= 2;
          v20 -= 4;
          v21 -= 4;
        }
        while (v21);
        v15 -= v18 & 0x3FFFFFFFFFFFFFFCLL;
        v6 -= v18 & 0x3FFFFFFFFFFFFFFCLL;
        if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_231:
          do
          {
            v23 = *--v6;
            *--v15 = v23;
          }
          while (v6 != v9);
          v9 = (uint64_t *)*((_QWORD *)this + 1276);
        }
      }
      *((_QWORD *)this + 1276) = v15;
      *((_QWORD *)this + 1277) = v8;
      *((_QWORD *)this + 1278) = v16;
      if (v9)
        operator delete(v9);
    }
    else
    {
      *v6 = v5;
      v8 = v6 + 1;
    }
    *((_QWORD *)this + 1277) = v8;
    v4 = *(v8 - 1);
  }
  else
  {
    v3 = *(_QWORD *)(v2 - 8);
    *((_QWORD *)this + 1274) = v2 - 8;
    *(_DWORD *)(*((_QWORD *)this + 1276) + 8 * v3) = -1227133513
                                                   * ((*((_QWORD *)this + 1280) - *((_QWORD *)this + 1279)) >> 3);
    *(_DWORD *)(*((_QWORD *)this + 1276) + 8 * v3 + 4) = (((unint64_t)*(unsigned int *)(*((_QWORD *)this + 1276)
                                                                                             + 8 * v3
                                                                                             + 4) << 32)
                                                        + 0x100000000) >> 32;
    v4 = v3 | ((unint64_t)*(unsigned int *)(*((_QWORD *)this + 1276) + 8 * v3 + 4) << 32);
  }
  v24 = *((_QWORD *)this + 1280);
  v25 = *((_QWORD *)this + 1281);
  if (v24 >= v25)
  {
    v27 = *((_QWORD *)this + 1279);
    v28 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v24 - v27) >> 3);
    if ((unint64_t)(v28 + 1) > 0x492492492492492)
      goto LABEL_227;
    v29 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v25 - v27) >> 3);
    v30 = 2 * v29;
    if (2 * v29 <= v28 + 1)
      v30 = v28 + 1;
    if (v29 >= 0x249249249249249)
      v31 = 0x492492492492492;
    else
      v31 = v30;
    v124 = (char *)this + 10248;
    if (v31)
    {
      if (v31 > 0x492492492492492)
        goto LABEL_228;
      v32 = (char *)operator new(56 * v31);
    }
    else
    {
      v32 = 0;
    }
    v120 = v32;
    v121 = &v32[56 * v28];
    v122 = v121;
    v123 = &v32[56 * v31];
    std::construct_at[abi:nn180100]<md::AssociationItemStorage,md::AssociationItemStorage const&,md::AssociationItemStorage*>(v121, (uint64_t *)v116);
    v33 = v121;
    v26 = v122 + 56;
    v34 = (char *)*((_QWORD *)this + 1280);
    v35 = (char *)*((_QWORD *)this + 1279);
    if (v34 == v35)
    {
      *((_QWORD *)this + 1279) = v121;
      *((_QWORD *)this + 1280) = v26;
      *((_QWORD *)this + 1281) = v123;
    }
    else
    {
      v36 = 0;
      do
      {
        v37 = &v33[v36];
        v38 = &v34[v36];
        *((_QWORD *)v37 - 7) = *(_QWORD *)&v34[v36 - 56];
        *((_QWORD *)v37 - 6) = 0;
        *((_QWORD *)v37 - 5) = 0;
        *((_QWORD *)v37 - 4) = 0;
        *((_OWORD *)v37 - 3) = *(_OWORD *)&v34[v36 - 48];
        *((_QWORD *)v37 - 4) = *(_QWORD *)&v34[v36 - 32];
        *((_QWORD *)v38 - 6) = 0;
        *((_QWORD *)v38 - 5) = 0;
        *((_QWORD *)v38 - 4) = 0;
        *((_QWORD *)v37 - 3) = 0;
        *((_QWORD *)v37 - 2) = 0;
        *((_QWORD *)v37 - 1) = 0;
        *(_OWORD *)(v37 - 24) = *(_OWORD *)&v34[v36 - 24];
        *((_QWORD *)v37 - 1) = *(_QWORD *)&v34[v36 - 8];
        *((_QWORD *)v38 - 3) = 0;
        *((_QWORD *)v38 - 2) = 0;
        *((_QWORD *)v38 - 1) = 0;
        v36 -= 56;
      }
      while (&v34[v36] != v35);
      v34 = (char *)*((_QWORD *)this + 1279);
      v39 = (char *)*((_QWORD *)this + 1280);
      *((_QWORD *)this + 1279) = &v33[v36];
      *((_QWORD *)this + 1280) = v26;
      *((_QWORD *)this + 1281) = v123;
      while (v39 != v34)
      {
        v40 = (void *)*((_QWORD *)v39 - 3);
        if (v40)
        {
          *((_QWORD *)v39 - 2) = v40;
          operator delete(v40);
        }
        v41 = (void *)*((_QWORD *)v39 - 6);
        if (v41)
        {
          *((_QWORD *)v39 - 5) = v41;
          operator delete(v41);
        }
        v39 -= 56;
      }
    }
    if (v34)
      operator delete(v34);
  }
  else
  {
    std::construct_at[abi:nn180100]<md::AssociationItemStorage,md::AssociationItemStorage const&,md::AssociationItemStorage*>(*((_QWORD **)this + 1280), (uint64_t *)v116);
    v26 = (_QWORD *)(v24 + 56);
    *((_QWORD *)this + 1280) = v24 + 56;
  }
  *((_QWORD *)this + 1280) = v26;
  v42 = *((_QWORD *)this + 1283);
  v43 = *((_QWORD *)this + 1284);
  if (v42 < v43)
  {
    *(_QWORD *)v42 = v4;
    v42 += 8;
    v44 = v42;
    goto LABEL_73;
  }
  v45 = (_BYTE *)*((_QWORD *)this + 1282);
  v46 = (uint64_t)(v42 - (_QWORD)v45) >> 3;
  v47 = v46 + 1;
  if ((unint64_t)(v46 + 1) >> 61)
LABEL_227:
    abort();
  v48 = v43 - (_QWORD)v45;
  if (v48 >> 2 > v47)
    v47 = v48 >> 2;
  if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8)
    v49 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v49 = v47;
  if (v49)
  {
    if (v49 >> 61)
      goto LABEL_228;
    v50 = operator new(8 * v49);
  }
  else
  {
    v50 = 0;
  }
  v51 = &v50[8 * v46];
  v52 = &v50[8 * v49];
  *v51 = v4;
  v44 = (unint64_t)(v51 + 1);
  if ((_BYTE *)v42 != v45)
  {
    v53 = v42 - (_QWORD)v45 - 8;
    if (v53 < 0x58)
      goto LABEL_232;
    if ((unint64_t)(v45 - v50) < 0x20)
      goto LABEL_232;
    v54 = (v53 >> 3) + 1;
    v55 = &v50[8 * v46 - 16];
    v56 = (__int128 *)(v42 - 16);
    v57 = v54 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v58 = *v56;
      *(v55 - 1) = *(v56 - 1);
      *v55 = v58;
      v55 -= 2;
      v56 -= 2;
      v57 -= 4;
    }
    while (v57);
    v51 -= v54 & 0x3FFFFFFFFFFFFFFCLL;
    v42 -= 8 * (v54 & 0x3FFFFFFFFFFFFFFCLL);
    if (v54 != (v54 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_232:
      do
      {
        v59 = *(_QWORD *)(v42 - 8);
        v42 -= 8;
        *--v51 = v59;
      }
      while ((_BYTE *)v42 != v45);
    }
  }
  *((_QWORD *)this + 1282) = v51;
  *((_QWORD *)this + 1283) = v44;
  *((_QWORD *)this + 1284) = v52;
  if (v45)
    operator delete(v45);
LABEL_73:
  *((_QWORD *)this + 1283) = v44;
  v60 = (uint64_t *)((char *)this + 10144);
  v61 = *((_QWORD *)this + 1269);
  if (v61)
  {
    v62 = (uint8x8_t)vcnt_s8((int8x8_t)v61);
    v62.i16[0] = vaddlv_u8(v62);
    if (v62.u32[0] > 1uLL)
    {
      v44 = v4;
      if (v4 >= v61)
        v44 = v4 % v61;
    }
    else
    {
      v44 = (v61 - 1) & v4;
    }
    v63 = *(_QWORD **)(*v60 + 8 * v44);
    if (v63)
    {
      v64 = (_QWORD *)*v63;
      if (v64)
      {
        if (v62.u32[0] < 2uLL)
        {
          while (1)
          {
            v66 = v64[1];
            if (v66 == v4)
            {
              if (v64[2] == v4)
                goto LABEL_132;
            }
            else if ((v66 & (v61 - 1)) != v44)
            {
              goto LABEL_94;
            }
            v64 = (_QWORD *)*v64;
            if (!v64)
              goto LABEL_94;
          }
        }
        do
        {
          v65 = v64[1];
          if (v65 == v4)
          {
            if (v64[2] == v4)
              goto LABEL_132;
          }
          else
          {
            if (v65 >= v61)
              v65 %= v61;
            if (v65 != v44)
              break;
          }
          v64 = (_QWORD *)*v64;
        }
        while (v64);
      }
    }
  }
LABEL_94:
  v42 = (unint64_t)operator new(0x30uLL);
  *(_QWORD *)v42 = 0;
  *(_QWORD *)(v42 + 8) = v4;
  *(_QWORD *)(v42 + 16) = v4;
  *(int64x2_t *)(v42 + 24) = vdupq_n_s64(1uLL);
  *(_BYTE *)(v42 + 40) = 0;
  v67 = (float)(unint64_t)(*((_QWORD *)this + 1271) + 1);
  v68 = *((float *)this + 2544);
  if (!v61 || (float)(v68 * (float)v61) < v67)
  {
    v69 = 1;
    if (v61 >= 3)
      v69 = (v61 & (v61 - 1)) != 0;
    v70 = v69 | (2 * v61);
    v71 = vcvtps_u32_f32(v67 / v68);
    if (v70 <= v71)
      prime = v71;
    else
      prime = v70;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v61 = *((_QWORD *)this + 1269);
    }
    if (prime > v61)
      goto LABEL_106;
    if (prime < v61)
    {
      v73 = vcvtps_u32_f32((float)*((unint64_t *)this + 1271) / *((float *)this + 2544));
      if (v61 < 3 || (v74 = (uint8x8_t)vcnt_s8((int8x8_t)v61), v74.i16[0] = vaddlv_u8(v74), v74.u32[0] > 1uLL))
      {
        v73 = std::__next_prime(v73);
      }
      else
      {
        v75 = 1 << -(char)__clz(v73 - 1);
        if (v73 >= 2)
          v73 = v75;
      }
      if (prime <= v73)
        prime = v73;
      if (prime < v61)
LABEL_106:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)this + 10144, prime);
    }
    v61 = *((_QWORD *)this + 1269);
    if ((v61 & (v61 - 1)) != 0)
    {
      if (v4 >= v61)
        v44 = v4 % v61;
      else
        v44 = v4;
    }
    else
    {
      v44 = (v61 - 1) & v4;
    }
  }
  v76 = *v60;
  v77 = *(unint64_t **)(*v60 + 8 * v44);
  if (v77)
  {
    *(_QWORD *)v42 = *v77;
LABEL_130:
    *v77 = v42;
    goto LABEL_131;
  }
  *(_QWORD *)v42 = *((_QWORD *)this + 1270);
  *((_QWORD *)this + 1270) = v42;
  *(_QWORD *)(v76 + 8 * v44) = (char *)this + 10160;
  if (*(_QWORD *)v42)
  {
    v78 = *(_QWORD *)(*(_QWORD *)v42 + 8);
    if ((v61 & (v61 - 1)) != 0)
    {
      if (v78 >= v61)
        v78 %= v61;
    }
    else
    {
      v78 &= v61 - 1;
    }
    v77 = (unint64_t *)(*v60 + 8 * v78);
    goto LABEL_130;
  }
LABEL_131:
  ++*((_QWORD *)this + 1271);
LABEL_132:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v116[1])
    operator delete(v116[1]);
  v79 = *((_QWORD *)this + 27);
  if (v79)
  {
    v80 = (uint8x8_t)vcnt_s8((int8x8_t)v79);
    v80.i16[0] = vaddlv_u8(v80);
    if (v80.u32[0] > 1uLL)
    {
      v42 = v4;
      if (v4 >= v79)
        v42 = v4 % v79;
    }
    else
    {
      v42 = (v79 - 1) & v4;
    }
    v81 = *(_QWORD **)(*((_QWORD *)this + 26) + 8 * v42);
    if (v81)
    {
      v82 = (_QWORD *)*v81;
      if (v82)
      {
        if (v80.u32[0] < 2uLL)
        {
          while (1)
          {
            v84 = v82[1];
            if (v84 == v4)
            {
              if (v82[2] == v4)
                return v4;
            }
            else if ((v84 & (v79 - 1)) != v42)
            {
              goto LABEL_157;
            }
            v82 = (_QWORD *)*v82;
            if (!v82)
              goto LABEL_157;
          }
        }
        do
        {
          v83 = v82[1];
          if (v83 == v4)
          {
            if (v82[2] == v4)
              return v4;
          }
          else
          {
            if (v83 >= v79)
              v83 %= v79;
            if (v83 != v42)
              break;
          }
          v82 = (_QWORD *)*v82;
        }
        while (v82);
      }
    }
  }
LABEL_157:
  v85 = (char **)((char *)this + 224);
  v86 = (char *)operator new(0x30uLL);
  v120 = v86;
  v121 = (char *)this + 224;
  *(_QWORD *)v86 = 0;
  *((_QWORD *)v86 + 1) = v4;
  *((_QWORD *)v86 + 2) = v4;
  *((_QWORD *)v86 + 3) = 0;
  *((_QWORD *)v86 + 4) = 0;
  *((_QWORD *)v86 + 5) = 0;
  LOBYTE(v122) = 1;
  v87 = (float)(unint64_t)(*((_QWORD *)this + 29) + 1);
  v88 = *((float *)this + 60);
  if (!v79 || (float)(v88 * (float)v79) < v87)
  {
    v89 = 1;
    if (v79 >= 3)
      v89 = (v79 & (v79 - 1)) != 0;
    v90 = v89 | (2 * v79);
    v91 = vcvtps_u32_f32(v87 / v88);
    if (v90 <= v91)
      v92 = v91;
    else
      v92 = v90;
    if (v92 == 1)
    {
      v92 = 2;
    }
    else if ((v92 & (v92 - 1)) != 0)
    {
      v92 = std::__next_prime(v92);
      v79 = *((_QWORD *)this + 27);
    }
    if (v92 <= v79)
    {
      if (v92 >= v79)
        goto LABEL_194;
      v104 = vcvtps_u32_f32((float)*((unint64_t *)this + 29) / *((float *)this + 60));
      if (v79 < 3 || (v105 = (uint8x8_t)vcnt_s8((int8x8_t)v79), v105.i16[0] = vaddlv_u8(v105), v105.u32[0] > 1uLL))
      {
        v104 = std::__next_prime(v104);
      }
      else
      {
        v106 = 1 << -(char)__clz(v104 - 1);
        if (v104 >= 2)
          v104 = v106;
      }
      if (v92 <= v104)
        v92 = v104;
      if (v92 >= v79)
      {
        v79 = *((_QWORD *)this + 27);
LABEL_194:
        if ((v79 & (v79 - 1)) != 0)
        {
          if (v4 >= v79)
            v42 = v4 % v79;
          else
            v42 = v4;
        }
        else
        {
          v42 = (v79 - 1) & v4;
        }
        goto LABEL_207;
      }
      if (!v92)
      {
        v115 = (void *)*((_QWORD *)this + 26);
        *((_QWORD *)this + 26) = 0;
        if (v115)
          operator delete(v115);
        v79 = 0;
        *((_QWORD *)this + 27) = 0;
        goto LABEL_194;
      }
    }
    if (!(v92 >> 61))
    {
      v93 = operator new(8 * v92);
      v94 = (void *)*((_QWORD *)this + 26);
      *((_QWORD *)this + 26) = v93;
      if (v94)
        operator delete(v94);
      v95 = 0;
      *((_QWORD *)this + 27) = v92;
      do
        *(_QWORD *)(*((_QWORD *)this + 26) + 8 * v95++) = 0;
      while (v92 != v95);
      v96 = *v85;
      if (!*v85)
        goto LABEL_193;
      v97 = *((_QWORD *)v96 + 1);
      v98 = v92 - 1;
      if ((v92 & (v92 - 1)) == 0)
      {
        v99 = v97 & v98;
        *(_QWORD *)(*((_QWORD *)this + 26) + 8 * v99) = v85;
        for (i = *(char **)v96; *(_QWORD *)v96; i = *(char **)v96)
        {
          v101 = *((_QWORD *)i + 1) & v98;
          if (v101 == v99)
          {
            v96 = i;
          }
          else
          {
            v102 = *((_QWORD *)this + 26);
            if (*(_QWORD *)(v102 + 8 * v101))
            {
              *(_QWORD *)v96 = *(_QWORD *)i;
              v103 = 8 * v101;
              *(_QWORD *)i = **(_QWORD **)(*((_QWORD *)this + 26) + v103);
              **(_QWORD **)(*((_QWORD *)this + 26) + v103) = i;
            }
            else
            {
              *(_QWORD *)(v102 + 8 * v101) = v96;
              v96 = i;
              v99 = v101;
            }
          }
        }
LABEL_193:
        v79 = v92;
        goto LABEL_194;
      }
      if (v97 >= v92)
        v97 %= v92;
      *(_QWORD *)(*((_QWORD *)this + 26) + 8 * v97) = v85;
      v107 = *(char **)v96;
      if (!*(_QWORD *)v96)
        goto LABEL_193;
      while (1)
      {
        v109 = *((_QWORD *)v107 + 1);
        if (v109 >= v92)
          v109 %= v92;
        if (v109 != v97)
        {
          v110 = *((_QWORD *)this + 26);
          if (!*(_QWORD *)(v110 + 8 * v109))
          {
            *(_QWORD *)(v110 + 8 * v109) = v96;
            goto LABEL_198;
          }
          *(_QWORD *)v96 = *(_QWORD *)v107;
          v108 = 8 * v109;
          *(_QWORD *)v107 = **(_QWORD **)(*((_QWORD *)this + 26) + v108);
          **(_QWORD **)(*((_QWORD *)this + 26) + v108) = v107;
          v107 = v96;
        }
        v109 = v97;
LABEL_198:
        v96 = v107;
        v107 = *(char **)v107;
        v97 = v109;
        if (!v107)
          goto LABEL_193;
      }
    }
LABEL_228:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
LABEL_207:
  v111 = *((_QWORD *)this + 26);
  v112 = *(char ***)(v111 + 8 * v42);
  if (v112)
  {
    *(_QWORD *)v86 = *v112;
LABEL_215:
    *v112 = v86;
    goto LABEL_216;
  }
  *(_QWORD *)v86 = *v85;
  *v85 = v86;
  *(_QWORD *)(v111 + 8 * v42) = v85;
  if (*(_QWORD *)v86)
  {
    v113 = *(_QWORD *)(*(_QWORD *)v86 + 8);
    if ((v79 & (v79 - 1)) != 0)
    {
      if (v113 >= v79)
        v113 %= v79;
    }
    else
    {
      v113 &= v79 - 1;
    }
    v112 = (char **)(*((_QWORD *)this + 26) + 8 * v113);
    goto LABEL_215;
  }
LABEL_216:
  ++*((_QWORD *)this + 29);
  return v4;
}

void sub_19FE32734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19FE32748(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  void *v16;

  operator delete(v16);
  md::AssociationItemStorage::~AssociationItemStorage((md::AssociationItemStorage *)&a9);
  _Unwind_Resume(a1);
}

void md::AssociationItemStorage::~AssociationItemStorage(md::AssociationItemStorage *this)
{
  void *v2;
  void *v3;

  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
}

_QWORD *std::construct_at[abi:nn180100]<md::AssociationItemStorage,md::AssociationItemStorage const&,md::AssociationItemStorage*>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  int64_t v7;
  char *v8;
  char *v9;
  _BYTE *v10;
  _BYTE *v11;
  int64_t v12;
  char *v13;
  char *v14;

  v4 = *a2;
  a1[1] = 0;
  *a1 = v4;
  a1[2] = 0;
  a1[3] = 0;
  v6 = (_BYTE *)a2[1];
  v5 = (_BYTE *)a2[2];
  v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0)
      abort();
    v8 = (char *)operator new(v5 - v6);
    a1[1] = v8;
    a1[2] = v8;
    v9 = &v8[8 * (v7 >> 3)];
    a1[3] = v9;
    memcpy(v8, v6, v7);
    a1[2] = v9;
  }
  a1[4] = 0;
  a1[5] = 0;
  a1[6] = 0;
  v11 = (_BYTE *)a2[4];
  v10 = (_BYTE *)a2[5];
  v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0)
      abort();
    v13 = (char *)operator new(v10 - v11);
    a1[4] = v13;
    a1[5] = v13;
    v14 = &v13[8 * (v12 >> 3)];
    a1[6] = v14;
    memcpy(v13, v11, v12);
    a1[5] = v14;
  }
  return a1;
}

void sub_19FE32894(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<md::AssociationItemStorage>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;
  void *v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 56;
    v4 = *(void **)(i - 24);
    if (v4)
    {
      *(_QWORD *)(i - 16) = v4;
      operator delete(v4);
    }
    v5 = *(void **)(i - 48);
    if (v5)
    {
      *(_QWORD *)(i - 40) = v5;
      operator delete(v5);
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t md::VKMRenderResourcesStore::getAssociationItemStorage(uint64_t a1, unint64_t a2, int a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t *v13;
  unint64_t v14;
  uint8x8_t v15;
  _QWORD **v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t prime;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;

  v4 = a2;
  v6 = *(_QWORD *)(a1 + 10208);
  if (a2 < (unint64_t)((*(_QWORD *)(a1 + 10216) - v6) >> 3)
    && ((v7 = *(_QWORD *)(v6 + 8 * a2)) != 0 ? (v8 = HIDWORD(a2) == HIDWORD(v7)) : (v8 = 0), v8))
  {
    v10 = *(_QWORD *)(a1 + 10232) + 56 * v7;
    v9 = *(_QWORD *)(a1 + 10240);
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 10240);
    v10 = v9;
  }
  if (v10 == v9)
    v11 = 0;
  else
    v11 = v10;
  if (v11)
    v12 = a3 == 0;
  else
    v12 = 1;
  if (v12)
    return v11;
  v13 = (uint64_t *)(a1 + 10144);
  v14 = *(_QWORD *)(a1 + 10152);
  if (v14)
  {
    v15 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
    v15.i16[0] = vaddlv_u8(v15);
    if (v15.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v14 <= a2)
        v3 = a2 % v14;
    }
    else
    {
      v3 = (v14 - 1) & a2;
    }
    v16 = *(_QWORD ***)(*v13 + 8 * v3);
    if (v16)
    {
      v17 = *v16;
      if (*v16)
      {
        if (v15.u32[0] < 2uLL)
        {
          while (1)
          {
            v19 = v17[1];
            if (v19 == a2)
            {
              if (v17[2] == a2)
                goto LABEL_74;
            }
            else if ((v19 & (v14 - 1)) != v3)
            {
              goto LABEL_36;
            }
            v17 = (_QWORD *)*v17;
            if (!v17)
              goto LABEL_36;
          }
        }
        do
        {
          v18 = v17[1];
          if (v18 == a2)
          {
            if (v17[2] == a2)
              goto LABEL_74;
          }
          else
          {
            if (v18 >= v14)
              v18 %= v14;
            if (v18 != v3)
              break;
          }
          v17 = (_QWORD *)*v17;
        }
        while (v17);
      }
    }
  }
LABEL_36:
  v17 = operator new(0x30uLL);
  *v17 = 0;
  v17[1] = v4;
  v17[2] = v4;
  v17[3] = 0;
  v17[4] = 0;
  v17[5] = 0;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 10168) + 1);
  v21 = *(float *)(a1 + 10176);
  if (v14 && (float)(v21 * (float)v14) >= v20)
  {
    v4 = v3;
  }
  else
  {
    v22 = 1;
    if (v14 >= 3)
      v22 = (v14 & (v14 - 1)) != 0;
    v23 = v22 | (2 * v14);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      prime = v24;
    else
      prime = v23;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v14 = *(_QWORD *)(a1 + 10152);
    }
    if (prime > v14)
      goto LABEL_49;
    if (prime < v14)
    {
      v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 10168) / *(float *)(a1 + 10176));
      if (v14 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v14), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (prime <= v26)
        prime = v26;
      if (prime < v14)
LABEL_49:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1 + 10144, prime);
    }
    v14 = *(_QWORD *)(a1 + 10152);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v14 <= v4)
        v4 %= v14;
    }
    else
    {
      v4 &= v14 - 1;
    }
  }
  v29 = *v13;
  v30 = *(_QWORD **)(*v13 + 8 * v4);
  if (v30)
  {
    *v17 = *v30;
  }
  else
  {
    *v17 = *(_QWORD *)(a1 + 10160);
    *(_QWORD *)(a1 + 10160) = v17;
    *(_QWORD *)(v29 + 8 * v4) = a1 + 10160;
    if (!*v17)
      goto LABEL_73;
    v31 = *(_QWORD *)(*v17 + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v31 >= v14)
        v31 %= v14;
    }
    else
    {
      v31 &= v14 - 1;
    }
    v30 = (_QWORD *)(*v13 + 8 * v31);
  }
  *v30 = v17;
LABEL_73:
  ++*(_QWORD *)(a1 + 10168);
LABEL_74:
  ++v17[3];
  return v11;
}

void sub_19FE32C68(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void md::VKMRenderResourcesStore::disconnect<geo::handle<md::DeviceDataResource>>(_QWORD *a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  int8x8_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD **v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  _QWORD *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _BYTE *v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  _OWORD *v35;
  char *v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  int8x8_t v50;
  uint8x8_t v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD **v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;

  v2 = a2;
  v4 = a2;
  v5 = a1[1298];
  if (a2 < (unint64_t)((a1[1299] - v5) >> 3)
    && ((v6 = *(_QWORD *)(v5 + 8 * a2), v8 = v6 == 0, v7 = HIDWORD(v6), !v8)
      ? (v8 = HIDWORD(a2) == (_DWORD)v7)
      : (v8 = 0),
        v8))
  {
    v18 = (char *)a1[1296];
    v19 = a1[1297];
    if ((unint64_t)v18 >= v19)
    {
      v21 = (char *)a1[1295];
      v22 = (v18 - v21) >> 3;
      v23 = v22 + 1;
      if ((unint64_t)(v22 + 1) >> 61)
        abort();
      v24 = v19 - (_QWORD)v21;
      if (v24 >> 2 > v23)
        v23 = v24 >> 2;
      if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
        v25 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v25 = v23;
      if (v25)
      {
        if (v25 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v26 = operator new(8 * v25);
      }
      else
      {
        v26 = 0;
      }
      v31 = &v26[8 * v22];
      v32 = &v26[8 * v25];
      *v31 = v4;
      v20 = v31 + 1;
      if (v18 != v21)
      {
        v33 = v18 - v21 - 8;
        if (v33 < 0x58)
          goto LABEL_129;
        if ((unint64_t)(v21 - v26) < 0x20)
          goto LABEL_129;
        v34 = (v33 >> 3) + 1;
        v35 = &v26[8 * v22 - 16];
        v36 = v18 - 16;
        v37 = v34 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v38 = *(_OWORD *)v36;
          *(v35 - 1) = *((_OWORD *)v36 - 1);
          *v35 = v38;
          v35 -= 2;
          v36 -= 32;
          v37 -= 4;
        }
        while (v37);
        v31 -= v34 & 0x3FFFFFFFFFFFFFFCLL;
        v18 -= 8 * (v34 & 0x3FFFFFFFFFFFFFFCLL);
        if (v34 != (v34 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_129:
          do
          {
            v39 = *((_QWORD *)v18 - 1);
            v18 -= 8;
            *--v31 = v39;
          }
          while (v18 != v21);
        }
      }
      a1[1295] = v31;
      a1[1296] = v20;
      a1[1297] = v32;
      if (v21)
      {
        operator delete(v21);
        v5 = a1[1298];
      }
    }
    else
    {
      *(_QWORD *)v18 = a2;
      v20 = v18 + 8;
    }
    a1[1296] = v20;
    v40 = *(_QWORD *)(v5 + 8 * v4);
    v41 = a1[1302];
    v42 = a1[1301];
    v43 = *(_QWORD *)(v41 - v42 + a1[1304] - 8);
    v44 = 8 * v40;
    v45 = *(_QWORD *)(v42 + v44);
    *(_QWORD *)(v42 + v44) = *(_QWORD *)(v41 - 8);
    *(_QWORD *)(v41 - 8) = v45;
    *(_DWORD *)(a1[1298] + 8 * v43) = v40;
    v46 = a1[1304];
    v47 = (_QWORD *)a1[1305];
    v48 = *(_QWORD *)(v46 + v44);
    v49 = *--v47;
    *(_QWORD *)(v46 + v44) = v49;
    *v47 = v48;
    a1[1302] -= 8;
    a1[1305] = v47;
    *(_DWORD *)(a1[1298] + 8 * v4 + 4) = (((unint64_t)*(unsigned int *)(a1[1298] + 8 * v4 + 4) << 32)
                                        + 0x100000000) >> 32;
    *(_DWORD *)(a1[1298] + 8 * v4) = (a1[1299] - a1[1298]) >> 3;
    v9 = (int8x8_t)a1[1291];
    if (!*(_QWORD *)&v9)
      goto LABEL_58;
  }
  else
  {
    v9 = (int8x8_t)a1[1291];
    if (!*(_QWORD *)&v9)
      goto LABEL_58;
  }
  v10 = (uint8x8_t)vcnt_s8(v9);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    v11 = v2;
    if (*(_QWORD *)&v9 <= v2)
      v11 = v2 % *(_QWORD *)&v9;
  }
  else
  {
    v11 = (*(_QWORD *)&v9 - 1) & v2;
  }
  v12 = a1[1290];
  v13 = *(_QWORD ***)(v12 + 8 * v11);
  if (v13)
  {
    v14 = *v13;
    if (*v13)
    {
      v15 = *(_QWORD *)&v9 - 1;
      if (v10.u32[0] < 2uLL)
      {
        while (1)
        {
          v16 = v14[1];
          if (v16 == v2)
          {
            if (v14[2] == v2)
              goto LABEL_38;
          }
          else if ((v16 & v15) != v11)
          {
            goto LABEL_58;
          }
          v14 = (_QWORD *)*v14;
          if (!v14)
            goto LABEL_58;
        }
      }
      do
      {
        v17 = v14[1];
        if (v17 == v2)
        {
          if (v14[2] == v2)
          {
LABEL_38:
            if (v10.u32[0] > 1uLL)
            {
              v27 = v2;
              if (*(_QWORD *)&v9 <= v2)
                v27 = v2 % *(_QWORD *)&v9;
            }
            else
            {
              v27 = v15 & v2;
            }
            v28 = *(_QWORD **)(v12 + 8 * v27);
            do
            {
              v29 = v28;
              v28 = (_QWORD *)*v28;
            }
            while (v28 != v14);
            if (v29 == a1 + 1292)
              goto LABEL_102;
            v30 = v29[1];
            if (v10.u32[0] > 1uLL)
            {
              if (v30 >= *(_QWORD *)&v9)
                v30 %= *(_QWORD *)&v9;
            }
            else
            {
              v30 &= v15;
            }
            if (v30 != v27)
            {
LABEL_102:
              if (!*v14)
                goto LABEL_103;
              v62 = *(_QWORD *)(*v14 + 8);
              if (v10.u32[0] > 1uLL)
              {
                if (v62 >= *(_QWORD *)&v9)
                  v62 %= *(_QWORD *)&v9;
              }
              else
              {
                v62 &= v15;
              }
              if (v62 != v27)
LABEL_103:
                *(_QWORD *)(v12 + 8 * v27) = 0;
            }
            v64 = *v14;
            if (*v14)
            {
              v65 = *(_QWORD *)(v64 + 8);
              if (v10.u32[0] > 1uLL)
              {
                if (v65 >= *(_QWORD *)&v9)
                  v65 %= *(_QWORD *)&v9;
              }
              else
              {
                v65 &= v15;
              }
              if (v65 != v27)
              {
                *(_QWORD *)(a1[1290] + 8 * v65) = v29;
                v64 = *v14;
              }
            }
            *v29 = v64;
            *v14 = 0;
            --a1[1293];
            operator delete(v14);
            v50 = (int8x8_t)a1[1308];
            if (!*(_QWORD *)&v50)
              return;
            goto LABEL_59;
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v9)
            v17 %= *(_QWORD *)&v9;
          if (v17 != v11)
            break;
        }
        v14 = (_QWORD *)*v14;
      }
      while (v14);
    }
  }
LABEL_58:
  v50 = (int8x8_t)a1[1308];
  if (!*(_QWORD *)&v50)
    return;
LABEL_59:
  v51 = (uint8x8_t)vcnt_s8(v50);
  v51.i16[0] = vaddlv_u8(v51);
  if (v51.u32[0] > 1uLL)
  {
    v52 = v2;
    if (*(_QWORD *)&v50 <= v2)
      v52 = v2 % *(_QWORD *)&v50;
  }
  else
  {
    v52 = (*(_QWORD *)&v50 - 1) & v2;
  }
  v53 = a1[1307];
  v54 = *(_QWORD ***)(v53 + 8 * v52);
  if (v54)
  {
    v55 = *v54;
    if (*v54)
    {
      v56 = *(_QWORD *)&v50 - 1;
      if (v51.u32[0] < 2uLL)
      {
        while (1)
        {
          v57 = v55[1];
          if (v57 == v2)
          {
            if (v55[2] == v2)
              goto LABEL_79;
          }
          else if ((v57 & v56) != v52)
          {
            return;
          }
          v55 = (_QWORD *)*v55;
          if (!v55)
            return;
        }
      }
      do
      {
        v58 = v55[1];
        if (v58 == v2)
        {
          if (v55[2] == v2)
          {
LABEL_79:
            if (v51.u32[0] > 1uLL)
            {
              if (*(_QWORD *)&v50 <= v2)
                v2 %= *(_QWORD *)&v50;
            }
            else
            {
              v2 &= v56;
            }
            v59 = *(_QWORD **)(v53 + 8 * v2);
            do
            {
              v60 = v59;
              v59 = (_QWORD *)*v59;
            }
            while (v59 != v55);
            if (v60 == a1 + 1309)
              goto LABEL_115;
            v61 = v60[1];
            if (v51.u32[0] > 1uLL)
            {
              if (v61 >= *(_QWORD *)&v50)
                v61 %= *(_QWORD *)&v50;
            }
            else
            {
              v61 &= v56;
            }
            if (v61 != v2)
            {
LABEL_115:
              if (!*v55)
                goto LABEL_116;
              v63 = *(_QWORD *)(*v55 + 8);
              if (v51.u32[0] > 1uLL)
              {
                if (v63 >= *(_QWORD *)&v50)
                  v63 %= *(_QWORD *)&v50;
              }
              else
              {
                v63 &= v56;
              }
              if (v63 != v2)
LABEL_116:
                *(_QWORD *)(v53 + 8 * v2) = 0;
            }
            v66 = *v55;
            if (*v55)
            {
              v67 = *(_QWORD *)(v66 + 8);
              if (v51.u32[0] > 1uLL)
              {
                if (v67 >= *(_QWORD *)&v50)
                  v67 %= *(_QWORD *)&v50;
              }
              else
              {
                v67 &= v56;
              }
              if (v67 != v2)
              {
                *(_QWORD *)(a1[1307] + 8 * v67) = v60;
                v66 = *v55;
              }
            }
            *v60 = v66;
            *v55 = 0;
            --a1[1310];
            operator delete(v55);
            return;
          }
        }
        else
        {
          if (v58 >= *(_QWORD *)&v50)
            v58 %= *(_QWORD *)&v50;
          if (v58 != v52)
            return;
        }
        v55 = (_QWORD *)*v55;
      }
      while (v55);
    }
  }
}

unint64_t md::VKMRenderResourcesStore::createPipelineStateItem(uint64_t a1, unsigned __int8 *a2, char a3, char a4)
{
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  uint64_t *v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  char *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  std::__shared_weak_count **v42;
  unint64_t *v43;
  unint64_t v44;
  char *v45;
  __int128 v46;
  char *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  char *v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  _BYTE *v59;
  _QWORD *v60;
  char *v61;
  unint64_t v62;
  uint64_t v63;
  _OWORD *v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  uint64_t *v69;
  unint64_t v70;
  uint8x8_t v71;
  _QWORD *v72;
  _QWORD *v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  float v77;
  float v78;
  _BOOL8 v79;
  unint64_t v80;
  unint64_t v81;
  size_t prime;
  unint64_t v83;
  uint8x8_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  unint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  std::__shared_weak_count *v117;
  std::__shared_weak_count *v118;
  std::__shared_weak_count *v119;
  std::__shared_weak_count *v120;
  std::__shared_weak_count *v121;

  v120 = 0;
  v121 = 0;
  switch(a3)
  {
    case 0:
      v6 = *(_QWORD *)(a1 + 10496);
      if (a4)
        md::DaVinciPipelineStateManager<ggl::DaVinci::GroundPipelineState,std::shared_ptr<ggl::DaVinciGroundShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(&v118, v6, a2);
      else
        md::DaVinciPipelineStateManager<ggl::DaVinci::GroundPipelineState,std::shared_ptr<ggl::DaVinciGroundShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(&v118, v6 + 360, a2);
      goto LABEL_13;
    case 1:
      BYTE4(v113) = a2[10];
      LODWORD(v113) = *(_DWORD *)(a2 + 29);
      v106 = *(_DWORD *)(a2 + 25);
      v99 = *(_QWORD *)(a2 + 11);
      md::DaVinciPipelineStateManager<ggl::DaVinci::GroundNonCompressedPipelineState,std::shared_ptr<ggl::DaVinciGroundNotCompressedShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(&v118, *(_QWORD *)(a1 + 10496) + 120, *a2, a2[1], a2[2], a2[3], a2[4], a2[5], *(_DWORD *)(a2 + 6), HIWORD(*(_DWORD *)(a2 + 6)), v99, BYTE2(v99), BYTE3(v99), BYTE4(v99), BYTE5(v99), SBYTE6(v99), HIBYTE(v99), *(_DWORD *)(a2 + 19), BYTE1(*(_DWORD *)(a2 + 19)),
        BYTE2(*(_DWORD *)(a2 + 19)),
        HIBYTE(*(_DWORD *)(a2 + 19)),
        a2[24],
        v106,
        BYTE1(v106),
        BYTE2(v106),
        HIBYTE(v106),
        v113,
        v113 >> 8,
        *(unsigned __int16 *)((char *)&v113 + 3));
      goto LABEL_13;
    case 2:
      BYTE4(v110) = a2[10];
      LODWORD(v110) = *(_DWORD *)(a2 + 29);
      v103 = *(_DWORD *)(a2 + 25);
      v96 = *(_QWORD *)(a2 + 11);
      md::DaVinciPipelineStateManager<ggl::DaVinci::GroundDepthPipelineState,std::shared_ptr<ggl::DaVinciGroundDepthShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(&v118, *(_QWORD *)(a1 + 10496) + 240, *a2, a2[1], a2[2], a2[3], a2[4], a2[5], *(_DWORD *)(a2 + 6), HIWORD(*(_DWORD *)(a2 + 6)), v96, BYTE2(v96), BYTE3(v96), BYTE4(v96), BYTE5(v96), SBYTE6(v96), HIBYTE(v96), *(_DWORD *)(a2 + 19), BYTE1(*(_DWORD *)(a2 + 19)),
        BYTE2(*(_DWORD *)(a2 + 19)),
        HIBYTE(*(_DWORD *)(a2 + 19)),
        a2[24],
        v103,
        BYTE1(v103),
        BYTE2(v103),
        HIBYTE(v103),
        v110,
        v110 >> 8,
        *(unsigned __int16 *)((char *)&v110 + 3));
      goto LABEL_13;
    case 3:
      BYTE4(v111) = a2[10];
      LODWORD(v111) = *(_DWORD *)(a2 + 29);
      v104 = *(_DWORD *)(a2 + 25);
      v97 = *(_QWORD *)(a2 + 11);
      md::DaVinciPipelineStateManager<ggl::DaVinci::GroundShadowMapPipelineState,std::shared_ptr<ggl::DaVinciGroundShadowMapShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(&v118, *(_QWORD *)(a1 + 10496) + 480, *a2, a2[1], a2[2], a2[3], a2[4], a2[5], *(_DWORD *)(a2 + 6), HIWORD(*(_DWORD *)(a2 + 6)), v97, BYTE2(v97), BYTE3(v97), BYTE4(v97), BYTE5(v97), SBYTE6(v97), HIBYTE(v97), *(_DWORD *)(a2 + 19), BYTE1(*(_DWORD *)(a2 + 19)),
        BYTE2(*(_DWORD *)(a2 + 19)),
        HIBYTE(*(_DWORD *)(a2 + 19)),
        a2[24],
        v104,
        BYTE1(v104),
        BYTE2(v104),
        HIBYTE(v104),
        v111,
        v111 >> 8,
        *(unsigned __int16 *)((char *)&v111 + 3));
      goto LABEL_13;
    case 4:
      BYTE4(v109) = a2[10];
      LODWORD(v109) = *(_DWORD *)(a2 + 29);
      v102 = *(_DWORD *)(a2 + 25);
      v95 = *(_QWORD *)(a2 + 11);
      md::DaVinciPipelineStateManager<ggl::DaVinci::RibbonPipelineState,std::shared_ptr<ggl::DaVinciRibbonShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(&v118, *(_QWORD *)(a1 + 10496) + 600, *a2, a2[1], a2[2], a2[3], a2[4], a2[5], *(_DWORD *)(a2 + 6), HIWORD(*(_DWORD *)(a2 + 6)), v95, BYTE2(v95), BYTE3(v95), BYTE4(v95), BYTE5(v95), SBYTE6(v95), HIBYTE(v95), *(_DWORD *)(a2 + 19), BYTE1(*(_DWORD *)(a2 + 19)),
        BYTE2(*(_DWORD *)(a2 + 19)),
        HIBYTE(*(_DWORD *)(a2 + 19)),
        a2[24],
        v102,
        BYTE1(v102),
        BYTE2(v102),
        HIBYTE(v102),
        v109,
        v109 >> 8,
        *(unsigned __int16 *)((char *)&v109 + 3));
      goto LABEL_13;
    case 5:
      BYTE4(v114) = a2[10];
      LODWORD(v114) = *(_DWORD *)(a2 + 29);
      v107 = *(_DWORD *)(a2 + 25);
      v100 = *(_QWORD *)(a2 + 11);
      md::DaVinciPipelineStateManager<ggl::DaVinci::DecalPipelineState,std::shared_ptr<ggl::DaVinciDecalShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(&v118, *(_QWORD *)(a1 + 10496) + 720, *a2, a2[1], a2[2], a2[3], a2[4], a2[5], *(_DWORD *)(a2 + 6), HIWORD(*(_DWORD *)(a2 + 6)), v100, BYTE2(v100), BYTE3(v100), BYTE4(v100), BYTE5(v100), SBYTE6(v100), HIBYTE(v100), *(_DWORD *)(a2 + 19), BYTE1(*(_DWORD *)(a2 + 19)),
        BYTE2(*(_DWORD *)(a2 + 19)),
        HIBYTE(*(_DWORD *)(a2 + 19)),
        a2[24],
        v107,
        BYTE1(v107),
        BYTE2(v107),
        HIBYTE(v107),
        v114,
        v114 >> 8,
        *(unsigned __int16 *)((char *)&v114 + 3));
      goto LABEL_13;
    case 6:
      BYTE4(v115) = a2[10];
      LODWORD(v115) = *(_DWORD *)(a2 + 29);
      v108 = *(_DWORD *)(a2 + 25);
      v101 = *(_QWORD *)(a2 + 11);
      md::DaVinciPipelineStateManager<ggl::DaVinci::LinearDepthPipelineState,std::shared_ptr<ggl::LinearDepthShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(&v118, *(_QWORD *)(a1 + 10496) + 840, *a2, a2[1], a2[2], a2[3], a2[4], a2[5], *(_DWORD *)(a2 + 6), HIWORD(*(_DWORD *)(a2 + 6)), v101, BYTE2(v101), BYTE3(v101), BYTE4(v101), BYTE5(v101), SBYTE6(v101), HIBYTE(v101), *(_DWORD *)(a2 + 19), BYTE1(*(_DWORD *)(a2 + 19)),
        BYTE2(*(_DWORD *)(a2 + 19)),
        HIBYTE(*(_DWORD *)(a2 + 19)),
        a2[24],
        v108,
        BYTE1(v108),
        BYTE2(v108),
        HIBYTE(v108),
        v115,
        v115 >> 8,
        *(unsigned __int16 *)((char *)&v115 + 3));
      goto LABEL_13;
    case 7:
      BYTE4(v112) = a2[10];
      LODWORD(v112) = *(_DWORD *)(a2 + 29);
      v105 = *(_DWORD *)(a2 + 25);
      v98 = *(_QWORD *)(a2 + 11);
      md::DaVinciPipelineStateManager<ggl::DaVinci::PackedLinearDepthPipelineState,std::shared_ptr<ggl::PackedLinearDepthShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(&v118, *(_QWORD *)(a1 + 10496) + 960, *a2, a2[1], a2[2], a2[3], a2[4], a2[5], *(_DWORD *)(a2 + 6), HIWORD(*(_DWORD *)(a2 + 6)), v98, BYTE2(v98), BYTE3(v98), BYTE4(v98), BYTE5(v98), SBYTE6(v98), HIBYTE(v98), *(_DWORD *)(a2 + 19), BYTE1(*(_DWORD *)(a2 + 19)),
        BYTE2(*(_DWORD *)(a2 + 19)),
        HIBYTE(*(_DWORD *)(a2 + 19)),
        a2[24],
        v105,
        BYTE1(v105),
        BYTE2(v105),
        HIBYTE(v105),
        v112,
        v112 >> 8,
        *(unsigned __int16 *)((char *)&v112 + 3));
LABEL_13:
      v120 = v118;
      v121 = v119;
      v116 = v118;
      v117 = v119;
      if (v119)
      {
        p_shared_owners = (unint64_t *)&v119->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
      }
      break;
    default:
      v116 = 0;
      v117 = 0;
      break;
  }
  v9 = *(_QWORD *)(a1 + 560);
  if (*(_QWORD *)(a1 + 552) == v9)
  {
    v12 = ((*(_QWORD *)(a1 + 608) - *(_QWORD *)(a1 + 600)) >> 4) | 0x100000000;
    v13 = *(uint64_t **)(a1 + 584);
    v14 = *(_QWORD *)(a1 + 592);
    if ((unint64_t)v13 >= v14)
    {
      v16 = *(uint64_t **)(a1 + 576);
      v17 = v13 - v16;
      v18 = v17 + 1;
      if ((unint64_t)(v17 + 1) >> 61)
        goto LABEL_165;
      v19 = v14 - (_QWORD)v16;
      if (v19 >> 2 > v18)
        v18 = v19 >> 2;
      if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
        v20 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v20 = v18;
      if (v20)
      {
        if (v20 >> 61)
          goto LABEL_166;
        v21 = operator new(8 * v20);
      }
      else
      {
        v21 = 0;
      }
      v22 = (uint64_t *)&v21[8 * v17];
      v23 = &v21[8 * v20];
      *v22 = v12;
      v15 = v22 + 1;
      if (v13 == v16)
      {
        v16 = v13;
      }
      else
      {
        v24 = (char *)v13 - (char *)v16 - 8;
        if (v24 < 0x58)
          goto LABEL_169;
        if ((unint64_t)((char *)v16 - v21) < 0x20)
          goto LABEL_169;
        v25 = (v24 >> 3) + 1;
        v26 = &v21[8 * v17 - 16];
        v27 = v13 - 2;
        v28 = v25 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v29 = *(_OWORD *)v27;
          *(v26 - 1) = *((_OWORD *)v27 - 1);
          *v26 = v29;
          v26 -= 2;
          v27 -= 4;
          v28 -= 4;
        }
        while (v28);
        v22 -= v25 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= v25 & 0x3FFFFFFFFFFFFFFCLL;
        if (v25 != (v25 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_169:
          do
          {
            v30 = *--v13;
            *--v22 = v30;
          }
          while (v13 != v16);
          v16 = *(uint64_t **)(a1 + 576);
        }
      }
      *(_QWORD *)(a1 + 576) = v22;
      *(_QWORD *)(a1 + 584) = v15;
      *(_QWORD *)(a1 + 592) = v23;
      if (v16)
        operator delete(v16);
    }
    else
    {
      *v13 = v12;
      v15 = v13 + 1;
    }
    *(_QWORD *)(a1 + 584) = v15;
    v11 = *(v15 - 1);
  }
  else
  {
    v10 = *(_QWORD *)(v9 - 8);
    *(_QWORD *)(a1 + 560) = v9 - 8;
    *(_DWORD *)(*(_QWORD *)(a1 + 576) + 8 * v10) = (*(_QWORD *)(a1 + 608) - *(_QWORD *)(a1 + 600)) >> 4;
    *(_DWORD *)(*(_QWORD *)(a1 + 576) + 8 * v10 + 4) = (((unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 576)
                                                                                           + 8 * v10
                                                                                           + 4) << 32)
                                                      + 0x100000000) >> 32;
    v11 = v10 | ((unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 576) + 8 * v10 + 4) << 32);
  }
  v31 = *(char **)(a1 + 608);
  v32 = *(_QWORD *)(a1 + 616);
  if ((unint64_t)v31 >= v32)
  {
    v36 = *(char **)(a1 + 600);
    v37 = (v31 - v36) >> 4;
    v38 = v37 + 1;
    if ((unint64_t)(v37 + 1) >> 60)
      goto LABEL_165;
    v39 = v32 - (_QWORD)v36;
    if (v39 >> 3 > v38)
      v38 = v39 >> 3;
    if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF0)
      v40 = 0xFFFFFFFFFFFFFFFLL;
    else
      v40 = v38;
    if (v40)
    {
      if (v40 >> 60)
        goto LABEL_166;
      v41 = (char *)operator new(16 * v40);
    }
    else
    {
      v41 = 0;
    }
    v42 = (std::__shared_weak_count **)&v41[16 * v37];
    *v42 = v116;
    v42[1] = v117;
    if (v117)
    {
      v43 = (unint64_t *)&v117->__shared_owners_;
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
      v31 = *(char **)(a1 + 608);
      v36 = *(char **)(a1 + 600);
    }
    v45 = &v41[16 * v40];
    v35 = v42 + 2;
    if (v31 == v36)
    {
      *(_QWORD *)(a1 + 600) = v42;
      *(_QWORD *)(a1 + 608) = v35;
      *(_QWORD *)(a1 + 616) = v45;
    }
    else
    {
      do
      {
        v46 = *((_OWORD *)v31 - 1);
        v31 -= 16;
        *((_OWORD *)v42 - 1) = v46;
        v42 -= 2;
        *(_QWORD *)v31 = 0;
        *((_QWORD *)v31 + 1) = 0;
      }
      while (v31 != v36);
      v36 = *(char **)(a1 + 600);
      v47 = *(char **)(a1 + 608);
      *(_QWORD *)(a1 + 600) = v42;
      *(_QWORD *)(a1 + 608) = v35;
      *(_QWORD *)(a1 + 616) = v45;
      while (v47 != v36)
      {
        v48 = (std::__shared_weak_count *)*((_QWORD *)v47 - 1);
        if (v48)
        {
          v49 = (unint64_t *)&v48->__shared_owners_;
          do
            v50 = __ldaxr(v49);
          while (__stlxr(v50 - 1, v49));
          if (!v50)
          {
            ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
            std::__shared_weak_count::__release_weak(v48);
          }
        }
        v47 -= 16;
      }
    }
    if (v36)
      operator delete(v36);
  }
  else
  {
    *(_QWORD *)v31 = v116;
    *((_QWORD *)v31 + 1) = v117;
    if (v117)
    {
      v33 = (unint64_t *)&v117->__shared_owners_;
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
    }
    v35 = v31 + 16;
  }
  *(_QWORD *)(a1 + 608) = v35;
  v51 = *(char **)(a1 + 632);
  v52 = *(_QWORD *)(a1 + 640);
  if ((unint64_t)v51 < v52)
  {
    *(_QWORD *)v51 = v11;
    v53 = (unint64_t)(v51 + 8);
    goto LABEL_95;
  }
  v54 = *(char **)(a1 + 624);
  v55 = (v51 - v54) >> 3;
  v56 = v55 + 1;
  if ((unint64_t)(v55 + 1) >> 61)
LABEL_165:
    abort();
  v57 = v52 - (_QWORD)v54;
  if (v57 >> 2 > v56)
    v56 = v57 >> 2;
  if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8)
    v58 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v58 = v56;
  if (v58)
  {
    if (!(v58 >> 61))
    {
      v59 = operator new(8 * v58);
      goto LABEL_86;
    }
LABEL_166:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v59 = 0;
LABEL_86:
  v60 = &v59[8 * v55];
  v61 = &v59[8 * v58];
  *v60 = v11;
  v53 = (unint64_t)(v60 + 1);
  if (v51 != v54)
  {
    v62 = v51 - v54 - 8;
    if (v62 < 0x58)
      goto LABEL_170;
    if ((unint64_t)(v54 - v59) < 0x20)
      goto LABEL_170;
    v63 = (v62 >> 3) + 1;
    v64 = &v59[8 * v55 - 16];
    v65 = v51 - 16;
    v66 = v63 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v67 = *(_OWORD *)v65;
      *(v64 - 1) = *((_OWORD *)v65 - 1);
      *v64 = v67;
      v64 -= 2;
      v65 -= 32;
      v66 -= 4;
    }
    while (v66);
    v60 -= v63 & 0x3FFFFFFFFFFFFFFCLL;
    v51 -= 8 * (v63 & 0x3FFFFFFFFFFFFFFCLL);
    if (v63 != (v63 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_170:
      do
      {
        v68 = *((_QWORD *)v51 - 1);
        v51 -= 8;
        *--v60 = v68;
      }
      while (v51 != v54);
    }
  }
  *(_QWORD *)(a1 + 624) = v60;
  *(_QWORD *)(a1 + 632) = v53;
  *(_QWORD *)(a1 + 640) = v61;
  if (v54)
    operator delete(v54);
LABEL_95:
  *(_QWORD *)(a1 + 632) = v53;
  v69 = (uint64_t *)(a1 + 472);
  v70 = *(_QWORD *)(a1 + 480);
  if (v70)
  {
    v71 = (uint8x8_t)vcnt_s8((int8x8_t)v70);
    v71.i16[0] = vaddlv_u8(v71);
    if (v71.u32[0] > 1uLL)
    {
      v53 = v11;
      if (v11 >= v70)
        v53 = v11 % v70;
    }
    else
    {
      v53 = (v70 - 1) & v11;
    }
    v72 = *(_QWORD **)(*v69 + 8 * v53);
    if (v72)
    {
      v73 = (_QWORD *)*v72;
      if (v73)
      {
        if (v71.u32[0] < 2uLL)
        {
          while (1)
          {
            v75 = v73[1];
            if (v75 == v11)
            {
              if (v73[2] == v11)
                goto LABEL_154;
            }
            else if ((v75 & (v70 - 1)) != v53)
            {
              goto LABEL_116;
            }
            v73 = (_QWORD *)*v73;
            if (!v73)
              goto LABEL_116;
          }
        }
        do
        {
          v74 = v73[1];
          if (v74 == v11)
          {
            if (v73[2] == v11)
              goto LABEL_154;
          }
          else
          {
            if (v74 >= v70)
              v74 %= v70;
            if (v74 != v53)
              break;
          }
          v73 = (_QWORD *)*v73;
        }
        while (v73);
      }
    }
  }
LABEL_116:
  v76 = (char *)operator new(0x30uLL);
  *(_QWORD *)v76 = 0;
  *((_QWORD *)v76 + 1) = v11;
  *((_QWORD *)v76 + 2) = v11;
  *(_OWORD *)(v76 + 24) = xmmword_19FFB3350;
  v76[40] = 0;
  v77 = (float)(unint64_t)(*(_QWORD *)(a1 + 496) + 1);
  v78 = *(float *)(a1 + 504);
  if (!v70 || (float)(v78 * (float)v70) < v77)
  {
    v79 = 1;
    if (v70 >= 3)
      v79 = (v70 & (v70 - 1)) != 0;
    v80 = v79 | (2 * v70);
    v81 = vcvtps_u32_f32(v77 / v78);
    if (v80 <= v81)
      prime = v81;
    else
      prime = v80;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v70 = *(_QWORD *)(a1 + 480);
    }
    if (prime > v70)
      goto LABEL_128;
    if (prime < v70)
    {
      v83 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 496) / *(float *)(a1 + 504));
      if (v70 < 3 || (v84 = (uint8x8_t)vcnt_s8((int8x8_t)v70), v84.i16[0] = vaddlv_u8(v84), v84.u32[0] > 1uLL))
      {
        v83 = std::__next_prime(v83);
      }
      else
      {
        v85 = 1 << -(char)__clz(v83 - 1);
        if (v83 >= 2)
          v83 = v85;
      }
      if (prime <= v83)
        prime = v83;
      if (prime < v70)
LABEL_128:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1 + 472, prime);
    }
    v70 = *(_QWORD *)(a1 + 480);
    if ((v70 & (v70 - 1)) != 0)
    {
      if (v11 >= v70)
        v53 = v11 % v70;
      else
        v53 = v11;
    }
    else
    {
      v53 = (v70 - 1) & v11;
    }
  }
  v86 = *v69;
  v87 = *(_QWORD **)(*v69 + 8 * v53);
  if (v87)
  {
    *(_QWORD *)v76 = *v87;
LABEL_152:
    *v87 = v76;
    goto LABEL_153;
  }
  *(_QWORD *)v76 = *(_QWORD *)(a1 + 488);
  *(_QWORD *)(a1 + 488) = v76;
  *(_QWORD *)(v86 + 8 * v53) = a1 + 488;
  if (*(_QWORD *)v76)
  {
    v88 = *(_QWORD *)(*(_QWORD *)v76 + 8);
    if ((v70 & (v70 - 1)) != 0)
    {
      if (v88 >= v70)
        v88 %= v70;
    }
    else
    {
      v88 &= v70 - 1;
    }
    v87 = (_QWORD *)(*v69 + 8 * v88);
    goto LABEL_152;
  }
LABEL_153:
  ++*(_QWORD *)(a1 + 496);
LABEL_154:
  if (v117)
  {
    v89 = (unint64_t *)&v117->__shared_owners_;
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  v91 = v121;
  if (v121)
  {
    v92 = (unint64_t *)&v121->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  return v11;
}

void sub_19FE33D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t md::VKMRenderResourcesStore::getGlobeMatrix(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint8x8_t v13;
  _QWORD **v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t prime;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;

  v3 = a2;
  v5 = *(_QWORD *)(a1 + 9152);
  if (a2 < (unint64_t)((*(_QWORD *)(a1 + 9160) - v5) >> 3)
    && ((v6 = *(_QWORD *)(v5 + 8 * a2)) != 0 ? (v7 = HIDWORD(a2) == HIDWORD(v6)) : (v7 = 0), v7))
  {
    v9 = *(_QWORD *)(a1 + 9176) + ((unint64_t)*(_QWORD *)(v5 + 8 * a2) << 7);
    v8 = *(_QWORD *)(a1 + 9184);
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 9184);
    v9 = v8;
  }
  if (v9 == v8)
    v10 = 0;
  else
    v10 = v9;
  if (!v10)
    return v10;
  v11 = (uint64_t *)(a1 + 9048);
  v12 = *(_QWORD *)(a1 + 9056);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v2 = a2;
      if (v12 <= a2)
        v2 = a2 % v12;
    }
    else
    {
      v2 = (v12 - 1) & a2;
    }
    v14 = *(_QWORD ***)(*v11 + 8 * v2);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v17 = v15[1];
            if (v17 == a2)
            {
              if (v15[2] == a2)
                goto LABEL_71;
            }
            else if ((v17 & (v12 - 1)) != v2)
            {
              goto LABEL_32;
            }
            v15 = (_QWORD *)*v15;
            if (!v15)
              goto LABEL_32;
          }
        }
        do
        {
          v16 = v15[1];
          if (v16 == a2)
          {
            if (v15[2] == a2)
              goto LABEL_71;
          }
          else
          {
            if (v16 >= v12)
              v16 %= v12;
            if (v16 != v2)
              break;
          }
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_32:
  v15 = operator new(0x30uLL);
  *v15 = 0;
  v15[1] = v3;
  v15[2] = v3;
  v15[3] = 0;
  v15[4] = 0;
  v15[5] = 0;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 9072) + 1);
  v19 = *(float *)(a1 + 9080);
  if (v12 && (float)(v19 * (float)v12) >= v18)
  {
    v3 = v2;
  }
  else
  {
    v20 = 1;
    if (v12 >= 3)
      v20 = (v12 & (v12 - 1)) != 0;
    v21 = v20 | (2 * v12);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      prime = v22;
    else
      prime = v21;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v12 = *(_QWORD *)(a1 + 9056);
    }
    if (prime > v12)
      goto LABEL_46;
    if (prime < v12)
    {
      v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 9072) / *(float *)(a1 + 9080));
      if (v12 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (prime <= v24)
        prime = v24;
      if (prime < v12)
LABEL_46:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1 + 9048, prime);
    }
    v12 = *(_QWORD *)(a1 + 9056);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v12 <= v3)
        v3 %= v12;
    }
    else
    {
      v3 &= v12 - 1;
    }
  }
  v27 = *v11;
  v28 = *(_QWORD **)(*v11 + 8 * v3);
  if (v28)
  {
    *v15 = *v28;
  }
  else
  {
    *v15 = *(_QWORD *)(a1 + 9064);
    *(_QWORD *)(a1 + 9064) = v15;
    *(_QWORD *)(v27 + 8 * v3) = a1 + 9064;
    if (!*v15)
      goto LABEL_70;
    v29 = *(_QWORD *)(*v15 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v29 >= v12)
        v29 %= v12;
    }
    else
    {
      v29 &= v12 - 1;
    }
    v28 = (_QWORD *)(*v11 + 8 * v29);
  }
  *v28 = v15;
LABEL_70:
  ++*(_QWORD *)(a1 + 9072);
LABEL_71:
  ++v15[3];
  return v10;
}

void sub_19FE340EC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

unint64_t md::VKMRenderResourcesStore::createSharedTileMatrix(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  uint64_t *v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  _OWORD *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  char *v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  _BYTE *v59;
  _QWORD *v60;
  char *v61;
  unint64_t v62;
  uint64_t v63;
  _OWORD *v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  uint64_t *v69;
  unint64_t v70;
  uint8x8_t v71;
  _QWORD *v72;
  _QWORD *v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  float v77;
  float v78;
  _BOOL8 v79;
  unint64_t v80;
  unint64_t v81;
  size_t prime;
  unint64_t v83;
  uint8x8_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  unint64_t v88;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;

  v3 = a2[1];
  v114 = *a2;
  v115 = v3;
  v4 = a2[3];
  v116 = a2[2];
  v117 = v4;
  v5 = a2[5];
  v118 = a2[4];
  v119 = v5;
  v6 = a2[7];
  v120 = a2[6];
  v121 = v6;
  gm::inverse<double>((double *)&v106, (double *)&v114);
  v122 = v106;
  v123 = v107;
  v124 = v108;
  v125 = v109;
  v126 = v110;
  v127 = v111;
  v128 = v112;
  v129 = v113;
  v92 = v116;
  v93 = v117;
  v90 = v114;
  v91 = v115;
  v96 = v120;
  v97 = v121;
  v94 = v118;
  v95 = v119;
  v100 = v108;
  v101 = v109;
  v98 = v106;
  v99 = v107;
  v104 = v112;
  v105 = v113;
  v102 = v110;
  v103 = v111;
  v7 = *(_QWORD *)(a1 + 9312);
  if (*(_QWORD *)(a1 + 9304) == v7)
  {
    v10 = ((*(_QWORD *)(a1 + 9360) - *(_QWORD *)(a1 + 9352)) >> 8) | 0x100000000;
    v11 = *(uint64_t **)(a1 + 9336);
    v12 = *(_QWORD *)(a1 + 9344);
    if ((unint64_t)v11 >= v12)
    {
      v14 = *(uint64_t **)(a1 + 9328);
      v15 = v11 - v14;
      v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 61)
        goto LABEL_125;
      v17 = v12 - (_QWORD)v14;
      if (v17 >> 2 > v16)
        v16 = v17 >> 2;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
        v18 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v18 = v16;
      if (v18)
      {
        if (v18 >> 61)
          goto LABEL_126;
        v19 = operator new(8 * v18);
      }
      else
      {
        v19 = 0;
      }
      v20 = (uint64_t *)&v19[8 * v15];
      v21 = &v19[8 * v18];
      *v20 = v10;
      v13 = v20 + 1;
      if (v11 == v14)
      {
        v14 = v11;
      }
      else
      {
        v22 = (char *)v11 - (char *)v14 - 8;
        if (v22 < 0x58)
          goto LABEL_129;
        if ((unint64_t)((char *)v14 - v19) < 0x20)
          goto LABEL_129;
        v23 = (v22 >> 3) + 1;
        v24 = &v19[8 * v15 - 16];
        v25 = v11 - 2;
        v26 = v23 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v27 = *(_OWORD *)v25;
          *(v24 - 1) = *((_OWORD *)v25 - 1);
          *v24 = v27;
          v24 -= 2;
          v25 -= 4;
          v26 -= 4;
        }
        while (v26);
        v20 -= v23 & 0x3FFFFFFFFFFFFFFCLL;
        v11 -= v23 & 0x3FFFFFFFFFFFFFFCLL;
        if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_129:
          do
          {
            v28 = *--v11;
            *--v20 = v28;
          }
          while (v11 != v14);
          v14 = *(uint64_t **)(a1 + 9328);
        }
      }
      *(_QWORD *)(a1 + 9328) = v20;
      *(_QWORD *)(a1 + 9336) = v13;
      *(_QWORD *)(a1 + 9344) = v21;
      if (v14)
        operator delete(v14);
    }
    else
    {
      *v11 = v10;
      v13 = v11 + 1;
    }
    *(_QWORD *)(a1 + 9336) = v13;
    v9 = *(v13 - 1);
  }
  else
  {
    v8 = *(_QWORD *)(v7 - 8);
    *(_QWORD *)(a1 + 9312) = v7 - 8;
    *(_DWORD *)(*(_QWORD *)(a1 + 9328) + 8 * v8) = (*(_QWORD *)(a1 + 9360) - *(_QWORD *)(a1 + 9352)) >> 8;
    *(_DWORD *)(*(_QWORD *)(a1 + 9328) + 8 * v8 + 4) = (((unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 9328)
                                                                                           + 8 * v8
                                                                                           + 4) << 32)
                                                      + 0x100000000) >> 32;
    v9 = v8 | ((unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 9328) + 8 * v8 + 4) << 32);
  }
  v29 = *(char **)(a1 + 9360);
  v30 = *(_QWORD *)(a1 + 9368);
  if ((unint64_t)v29 >= v30)
  {
    v32 = *(char **)(a1 + 9352);
    v33 = (v29 - v32) >> 8;
    v34 = v33 + 1;
    if ((unint64_t)(v33 + 1) >> 56)
      goto LABEL_125;
    v35 = v30 - (_QWORD)v32;
    if (v35 >> 7 > v34)
      v34 = v35 >> 7;
    if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFF00)
      v36 = 0xFFFFFFFFFFFFFFLL;
    else
      v36 = v34;
    if (v36)
    {
      if (HIBYTE(v36))
        goto LABEL_126;
      v37 = (char *)operator new(v36 << 8);
    }
    else
    {
      v37 = 0;
    }
    v38 = &v37[256 * v33];
    *((_OWORD *)v38 + 12) = v102;
    *((_OWORD *)v38 + 13) = v103;
    *((_OWORD *)v38 + 14) = v104;
    *((_OWORD *)v38 + 15) = v105;
    *((_OWORD *)v38 + 8) = v98;
    *((_OWORD *)v38 + 9) = v99;
    *((_OWORD *)v38 + 10) = v100;
    *((_OWORD *)v38 + 11) = v101;
    *((_OWORD *)v38 + 4) = v94;
    *((_OWORD *)v38 + 5) = v95;
    *((_OWORD *)v38 + 6) = v96;
    *((_OWORD *)v38 + 7) = v97;
    *(_OWORD *)v38 = v90;
    *((_OWORD *)v38 + 1) = v91;
    v31 = v38 + 256;
    *((_OWORD *)v38 + 2) = v92;
    *((_OWORD *)v38 + 3) = v93;
    if (v29 != v32)
    {
      do
      {
        v39 = *((_OWORD *)v29 - 16);
        v40 = *((_OWORD *)v29 - 15);
        v41 = *((_OWORD *)v29 - 13);
        *((_OWORD *)v38 - 14) = *((_OWORD *)v29 - 14);
        *((_OWORD *)v38 - 13) = v41;
        *((_OWORD *)v38 - 16) = v39;
        *((_OWORD *)v38 - 15) = v40;
        v42 = *((_OWORD *)v29 - 12);
        v43 = *((_OWORD *)v29 - 11);
        v44 = *((_OWORD *)v29 - 9);
        *((_OWORD *)v38 - 10) = *((_OWORD *)v29 - 10);
        *((_OWORD *)v38 - 9) = v44;
        *((_OWORD *)v38 - 12) = v42;
        *((_OWORD *)v38 - 11) = v43;
        v45 = *((_OWORD *)v29 - 8);
        v46 = *((_OWORD *)v29 - 7);
        v47 = *((_OWORD *)v29 - 5);
        *((_OWORD *)v38 - 6) = *((_OWORD *)v29 - 6);
        *((_OWORD *)v38 - 5) = v47;
        *((_OWORD *)v38 - 8) = v45;
        *((_OWORD *)v38 - 7) = v46;
        v48 = *((_OWORD *)v29 - 4);
        v49 = *((_OWORD *)v29 - 3);
        v50 = *((_OWORD *)v29 - 1);
        *((_OWORD *)v38 - 2) = *((_OWORD *)v29 - 2);
        *((_OWORD *)v38 - 1) = v50;
        *((_OWORD *)v38 - 4) = v48;
        *((_OWORD *)v38 - 3) = v49;
        v38 -= 256;
        v29 -= 256;
      }
      while (v29 != v32);
      v29 = *(char **)(a1 + 9352);
    }
    *(_QWORD *)(a1 + 9352) = v38;
    *(_QWORD *)(a1 + 9360) = v31;
    *(_QWORD *)(a1 + 9368) = &v37[256 * v36];
    if (v29)
      operator delete(v29);
  }
  else
  {
    *((_OWORD *)v29 + 12) = v102;
    *((_OWORD *)v29 + 13) = v103;
    *((_OWORD *)v29 + 14) = v104;
    *((_OWORD *)v29 + 15) = v105;
    *((_OWORD *)v29 + 8) = v98;
    *((_OWORD *)v29 + 9) = v99;
    *((_OWORD *)v29 + 10) = v100;
    *((_OWORD *)v29 + 11) = v101;
    *((_OWORD *)v29 + 4) = v94;
    *((_OWORD *)v29 + 5) = v95;
    *((_OWORD *)v29 + 6) = v96;
    *((_OWORD *)v29 + 7) = v97;
    *(_OWORD *)v29 = v90;
    *((_OWORD *)v29 + 1) = v91;
    *((_OWORD *)v29 + 2) = v92;
    *((_OWORD *)v29 + 3) = v93;
    v31 = v29 + 256;
  }
  *(_QWORD *)(a1 + 9360) = v31;
  v51 = *(char **)(a1 + 9384);
  v52 = *(_QWORD *)(a1 + 9392);
  if ((unint64_t)v51 < v52)
  {
    *(_QWORD *)v51 = v9;
    v53 = (unint64_t)(v51 + 8);
    goto LABEL_65;
  }
  v54 = *(char **)(a1 + 9376);
  v55 = (v51 - v54) >> 3;
  v56 = v55 + 1;
  if ((unint64_t)(v55 + 1) >> 61)
LABEL_125:
    abort();
  v57 = v52 - (_QWORD)v54;
  if (v57 >> 2 > v56)
    v56 = v57 >> 2;
  if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8)
    v58 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v58 = v56;
  if (v58)
  {
    if (!(v58 >> 61))
    {
      v59 = operator new(8 * v58);
      goto LABEL_56;
    }
LABEL_126:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v59 = 0;
LABEL_56:
  v60 = &v59[8 * v55];
  v61 = &v59[8 * v58];
  *v60 = v9;
  v53 = (unint64_t)(v60 + 1);
  if (v51 != v54)
  {
    v62 = v51 - v54 - 8;
    if (v62 < 0x58)
      goto LABEL_130;
    if ((unint64_t)(v54 - v59) < 0x20)
      goto LABEL_130;
    v63 = (v62 >> 3) + 1;
    v64 = &v59[8 * v55 - 16];
    v65 = v51 - 16;
    v66 = v63 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v67 = *(_OWORD *)v65;
      *(v64 - 1) = *((_OWORD *)v65 - 1);
      *v64 = v67;
      v64 -= 2;
      v65 -= 32;
      v66 -= 4;
    }
    while (v66);
    v60 -= v63 & 0x3FFFFFFFFFFFFFFCLL;
    v51 -= 8 * (v63 & 0x3FFFFFFFFFFFFFFCLL);
    if (v63 != (v63 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_130:
      do
      {
        v68 = *((_QWORD *)v51 - 1);
        v51 -= 8;
        *--v60 = v68;
      }
      while (v51 != v54);
    }
  }
  *(_QWORD *)(a1 + 9376) = v60;
  *(_QWORD *)(a1 + 9384) = v53;
  *(_QWORD *)(a1 + 9392) = v61;
  if (v54)
    operator delete(v54);
LABEL_65:
  *(_QWORD *)(a1 + 9384) = v53;
  v69 = (uint64_t *)(a1 + 9264);
  v70 = *(_QWORD *)(a1 + 9272);
  if (v70)
  {
    v71 = (uint8x8_t)vcnt_s8((int8x8_t)v70);
    v71.i16[0] = vaddlv_u8(v71);
    if (v71.u32[0] > 1uLL)
    {
      v53 = v9;
      if (v9 >= v70)
        v53 = v9 % v70;
    }
    else
    {
      v53 = (v70 - 1) & v9;
    }
    v72 = *(_QWORD **)(*v69 + 8 * v53);
    if (v72)
    {
      v73 = (_QWORD *)*v72;
      if (v73)
      {
        if (v71.u32[0] < 2uLL)
        {
          while (1)
          {
            v75 = v73[1];
            if (v75 == v9)
            {
              if (v73[2] == v9)
                return v9;
            }
            else if ((v75 & (v70 - 1)) != v53)
            {
              goto LABEL_86;
            }
            v73 = (_QWORD *)*v73;
            if (!v73)
              goto LABEL_86;
          }
        }
        do
        {
          v74 = v73[1];
          if (v74 == v9)
          {
            if (v73[2] == v9)
              return v9;
          }
          else
          {
            if (v74 >= v70)
              v74 %= v70;
            if (v74 != v53)
              break;
          }
          v73 = (_QWORD *)*v73;
        }
        while (v73);
      }
    }
  }
LABEL_86:
  v76 = (char *)operator new(0x30uLL);
  *(_QWORD *)v76 = 0;
  *((_QWORD *)v76 + 1) = v9;
  *((_QWORD *)v76 + 2) = v9;
  *(int64x2_t *)(v76 + 24) = vdupq_n_s64(1uLL);
  v76[40] = 0;
  v77 = (float)(unint64_t)(*(_QWORD *)(a1 + 9288) + 1);
  v78 = *(float *)(a1 + 9296);
  if (!v70 || (float)(v78 * (float)v70) < v77)
  {
    v79 = 1;
    if (v70 >= 3)
      v79 = (v70 & (v70 - 1)) != 0;
    v80 = v79 | (2 * v70);
    v81 = vcvtps_u32_f32(v77 / v78);
    if (v80 <= v81)
      prime = v81;
    else
      prime = v80;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v70 = *(_QWORD *)(a1 + 9272);
    }
    if (prime > v70)
      goto LABEL_98;
    if (prime < v70)
    {
      v83 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 9288) / *(float *)(a1 + 9296));
      if (v70 < 3 || (v84 = (uint8x8_t)vcnt_s8((int8x8_t)v70), v84.i16[0] = vaddlv_u8(v84), v84.u32[0] > 1uLL))
      {
        v83 = std::__next_prime(v83);
      }
      else
      {
        v85 = 1 << -(char)__clz(v83 - 1);
        if (v83 >= 2)
          v83 = v85;
      }
      if (prime <= v83)
        prime = v83;
      if (prime < v70)
LABEL_98:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1 + 9264, prime);
    }
    v70 = *(_QWORD *)(a1 + 9272);
    if ((v70 & (v70 - 1)) != 0)
    {
      if (v9 >= v70)
        v53 = v9 % v70;
      else
        v53 = v9;
    }
    else
    {
      v53 = (v70 - 1) & v9;
    }
  }
  v86 = *v69;
  v87 = *(_QWORD **)(*v69 + 8 * v53);
  if (v87)
  {
    *(_QWORD *)v76 = *v87;
LABEL_122:
    *v87 = v76;
    goto LABEL_123;
  }
  *(_QWORD *)v76 = *(_QWORD *)(a1 + 9280);
  *(_QWORD *)(a1 + 9280) = v76;
  *(_QWORD *)(v86 + 8 * v53) = a1 + 9280;
  if (*(_QWORD *)v76)
  {
    v88 = *(_QWORD *)(*(_QWORD *)v76 + 8);
    if ((v70 & (v70 - 1)) != 0)
    {
      if (v88 >= v70)
        v88 %= v70;
    }
    else
    {
      v88 &= v70 - 1;
    }
    v87 = (_QWORD *)(*v69 + 8 * v88);
    goto LABEL_122;
  }
LABEL_123:
  ++*(_QWORD *)(a1 + 9288);
  return v9;
}

void sub_19FE348C0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t md::VKMRenderResourcesStore::getColorRampData(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint8x8_t v13;
  _QWORD **v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t prime;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;

  v3 = a2;
  v5 = *(_QWORD *)(a1 + 9680);
  if (a2 < (unint64_t)((*(_QWORD *)(a1 + 9688) - v5) >> 3)
    && ((v6 = *(_QWORD *)(v5 + 8 * a2)) != 0 ? (v7 = HIDWORD(a2) == HIDWORD(v6)) : (v7 = 0), v7))
  {
    v9 = *(_QWORD *)(a1 + 9704) + 40 * v6;
    v8 = *(_QWORD *)(a1 + 9712);
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 9712);
    v9 = v8;
  }
  if (v9 == v8)
    v10 = 0;
  else
    v10 = v9;
  if (!v10)
    return v10;
  v11 = (uint64_t *)(a1 + 9616);
  v12 = *(_QWORD *)(a1 + 9624);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v2 = a2;
      if (v12 <= a2)
        v2 = a2 % v12;
    }
    else
    {
      v2 = (v12 - 1) & a2;
    }
    v14 = *(_QWORD ***)(*v11 + 8 * v2);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v17 = v15[1];
            if (v17 == a2)
            {
              if (v15[2] == a2)
                goto LABEL_71;
            }
            else if ((v17 & (v12 - 1)) != v2)
            {
              goto LABEL_32;
            }
            v15 = (_QWORD *)*v15;
            if (!v15)
              goto LABEL_32;
          }
        }
        do
        {
          v16 = v15[1];
          if (v16 == a2)
          {
            if (v15[2] == a2)
              goto LABEL_71;
          }
          else
          {
            if (v16 >= v12)
              v16 %= v12;
            if (v16 != v2)
              break;
          }
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_32:
  v15 = operator new(0x30uLL);
  *v15 = 0;
  v15[1] = v3;
  v15[2] = v3;
  v15[3] = 0;
  v15[4] = 0;
  v15[5] = 0;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 9640) + 1);
  v19 = *(float *)(a1 + 9648);
  if (v12 && (float)(v19 * (float)v12) >= v18)
  {
    v3 = v2;
  }
  else
  {
    v20 = 1;
    if (v12 >= 3)
      v20 = (v12 & (v12 - 1)) != 0;
    v21 = v20 | (2 * v12);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      prime = v22;
    else
      prime = v21;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v12 = *(_QWORD *)(a1 + 9624);
    }
    if (prime > v12)
      goto LABEL_46;
    if (prime < v12)
    {
      v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 9640) / *(float *)(a1 + 9648));
      if (v12 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (prime <= v24)
        prime = v24;
      if (prime < v12)
LABEL_46:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1 + 9616, prime);
    }
    v12 = *(_QWORD *)(a1 + 9624);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v12 <= v3)
        v3 %= v12;
    }
    else
    {
      v3 &= v12 - 1;
    }
  }
  v27 = *v11;
  v28 = *(_QWORD **)(*v11 + 8 * v3);
  if (v28)
  {
    *v15 = *v28;
  }
  else
  {
    *v15 = *(_QWORD *)(a1 + 9632);
    *(_QWORD *)(a1 + 9632) = v15;
    *(_QWORD *)(v27 + 8 * v3) = a1 + 9632;
    if (!*v15)
      goto LABEL_70;
    v29 = *(_QWORD *)(*v15 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v29 >= v12)
        v29 %= v12;
    }
    else
    {
      v29 &= v12 - 1;
    }
    v28 = (_QWORD *)(*v11 + 8 * v29);
  }
  *v28 = v15;
LABEL_70:
  ++*(_QWORD *)(a1 + 9640);
LABEL_71:
  ++v15[3];
  return v10;
}

void sub_19FE34C10(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

unint64_t md::VKMRenderResourcesStore::createRenderableData(uint64_t a1, const void *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  uint64_t *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  char *v27;
  _BYTE *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _BYTE *v43;
  _QWORD *v44;
  char *v45;
  unint64_t v46;
  uint64_t v47;
  _OWORD *v48;
  char *v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t *v53;
  unint64_t v54;
  uint8x8_t v55;
  _QWORD *v56;
  _QWORD *v57;
  unint64_t v58;
  uint64_t v59;
  char *v60;
  float v61;
  float v62;
  _BOOL8 v63;
  unint64_t v64;
  unint64_t v65;
  size_t prime;
  unint64_t v67;
  uint8x8_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  unint64_t v72;
  _BYTE __dst[280];

  memcpy(__dst, a2, sizeof(__dst));
  v3 = *(_QWORD *)(a1 + 9488);
  if (*(_QWORD *)(a1 + 9480) == v3)
  {
    v6 = (-1963413621 * ((*(_QWORD *)(a1 + 9536) - *(_QWORD *)(a1 + 9528)) >> 3)) | 0x100000000;
    v7 = *(uint64_t **)(a1 + 9512);
    v8 = *(_QWORD *)(a1 + 9520);
    if ((unint64_t)v7 >= v8)
    {
      v10 = *(uint64_t **)(a1 + 9504);
      v11 = v7 - v10;
      v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 61)
        goto LABEL_125;
      v13 = v8 - (_QWORD)v10;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          goto LABEL_126;
        v15 = operator new(8 * v14);
      }
      else
      {
        v15 = 0;
      }
      v16 = (uint64_t *)&v15[8 * v11];
      v17 = &v15[8 * v14];
      *v16 = v6;
      v9 = v16 + 1;
      if (v7 == v10)
      {
        v10 = v7;
      }
      else
      {
        v18 = (char *)v7 - (char *)v10 - 8;
        if (v18 < 0x58)
          goto LABEL_129;
        if ((unint64_t)((char *)v10 - v15) < 0x20)
          goto LABEL_129;
        v19 = (v18 >> 3) + 1;
        v20 = &v15[8 * v11 - 16];
        v21 = v7 - 2;
        v22 = v19 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v23 = *(_OWORD *)v21;
          *(v20 - 1) = *((_OWORD *)v21 - 1);
          *v20 = v23;
          v20 -= 2;
          v21 -= 4;
          v22 -= 4;
        }
        while (v22);
        v16 -= v19 & 0x3FFFFFFFFFFFFFFCLL;
        v7 -= v19 & 0x3FFFFFFFFFFFFFFCLL;
        if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_129:
          do
          {
            v24 = *--v7;
            *--v16 = v24;
          }
          while (v7 != v10);
          v10 = *(uint64_t **)(a1 + 9504);
        }
      }
      *(_QWORD *)(a1 + 9504) = v16;
      *(_QWORD *)(a1 + 9512) = v9;
      *(_QWORD *)(a1 + 9520) = v17;
      if (v10)
        operator delete(v10);
    }
    else
    {
      *v7 = v6;
      v9 = v7 + 1;
    }
    *(_QWORD *)(a1 + 9512) = v9;
    v5 = *(v9 - 1);
  }
  else
  {
    v4 = *(_QWORD *)(v3 - 8);
    *(_QWORD *)(a1 + 9488) = v3 - 8;
    *(_DWORD *)(*(_QWORD *)(a1 + 9504) + 8 * v4) = -1963413621
                                                 * ((*(_QWORD *)(a1 + 9536) - *(_QWORD *)(a1 + 9528)) >> 3);
    *(_DWORD *)(*(_QWORD *)(a1 + 9504) + 8 * v4 + 4) = (((unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 9504)
                                                                                           + 8 * v4
                                                                                           + 4) << 32)
                                                      + 0x100000000) >> 32;
    v5 = v4 | ((unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 9504) + 8 * v4 + 4) << 32);
  }
  v25 = *(char **)(a1 + 9536);
  v26 = *(_QWORD *)(a1 + 9544);
  if ((unint64_t)v25 >= v26)
  {
    v28 = *(_BYTE **)(a1 + 9528);
    v29 = 0xAF8AF8AF8AF8AF8BLL * ((v25 - v28) >> 3) + 1;
    if (v29 > 0xEA0EA0EA0EA0EALL)
      goto LABEL_125;
    v30 = 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(v26 - (_QWORD)v28) >> 3);
    if (2 * v30 > v29)
      v29 = 2 * v30;
    if (v30 >= 0x75075075075075)
      v31 = 0xEA0EA0EA0EA0EALL;
    else
      v31 = v29;
    if (v31)
    {
      if (v31 > 0xEA0EA0EA0EA0EALL)
        goto LABEL_126;
      v32 = (char *)operator new(280 * v31);
    }
    else
    {
      v32 = 0;
    }
    v33 = &v32[8 * ((v25 - v28) >> 3)];
    v34 = &v32[280 * v31];
    memcpy(v33, __dst, 0x118uLL);
    v27 = v33 + 280;
    if (v25 != v28)
    {
      do
      {
        v33 -= 280;
        v25 -= 280;
        memcpy(v33, v25, 0x118uLL);
      }
      while (v25 != v28);
      v25 = *(char **)(a1 + 9528);
    }
    *(_QWORD *)(a1 + 9528) = v33;
    *(_QWORD *)(a1 + 9536) = v27;
    *(_QWORD *)(a1 + 9544) = v34;
    if (v25)
      operator delete(v25);
  }
  else
  {
    memcpy(*(void **)(a1 + 9536), __dst, 0x118uLL);
    v27 = v25 + 280;
  }
  *(_QWORD *)(a1 + 9536) = v27;
  v35 = *(char **)(a1 + 9560);
  v36 = *(_QWORD *)(a1 + 9568);
  if ((unint64_t)v35 < v36)
  {
    *(_QWORD *)v35 = v5;
    v37 = (unint64_t)(v35 + 8);
    goto LABEL_65;
  }
  v38 = *(char **)(a1 + 9552);
  v39 = (v35 - v38) >> 3;
  v40 = v39 + 1;
  if ((unint64_t)(v39 + 1) >> 61)
LABEL_125:
    abort();
  v41 = v36 - (_QWORD)v38;
  if (v41 >> 2 > v40)
    v40 = v41 >> 2;
  if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8)
    v42 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v42 = v40;
  if (v42)
  {
    if (!(v42 >> 61))
    {
      v43 = operator new(8 * v42);
      goto LABEL_56;
    }
LABEL_126:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v43 = 0;
LABEL_56:
  v44 = &v43[8 * v39];
  v45 = &v43[8 * v42];
  *v44 = v5;
  v37 = (unint64_t)(v44 + 1);
  if (v35 != v38)
  {
    v46 = v35 - v38 - 8;
    if (v46 < 0x58)
      goto LABEL_130;
    if ((unint64_t)(v38 - v43) < 0x20)
      goto LABEL_130;
    v47 = (v46 >> 3) + 1;
    v48 = &v43[8 * v39 - 16];
    v49 = v35 - 16;
    v50 = v47 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v51 = *(_OWORD *)v49;
      *(v48 - 1) = *((_OWORD *)v49 - 1);
      *v48 = v51;
      v48 -= 2;
      v49 -= 32;
      v50 -= 4;
    }
    while (v50);
    v44 -= v47 & 0x3FFFFFFFFFFFFFFCLL;
    v35 -= 8 * (v47 & 0x3FFFFFFFFFFFFFFCLL);
    if (v47 != (v47 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_130:
      do
      {
        v52 = *((_QWORD *)v35 - 1);
        v35 -= 8;
        *--v44 = v52;
      }
      while (v35 != v38);
    }
  }
  *(_QWORD *)(a1 + 9552) = v44;
  *(_QWORD *)(a1 + 9560) = v37;
  *(_QWORD *)(a1 + 9568) = v45;
  if (v38)
    operator delete(v38);
LABEL_65:
  *(_QWORD *)(a1 + 9560) = v37;
  v53 = (uint64_t *)(a1 + 9440);
  v54 = *(_QWORD *)(a1 + 9448);
  if (v54)
  {
    v55 = (uint8x8_t)vcnt_s8((int8x8_t)v54);
    v55.i16[0] = vaddlv_u8(v55);
    if (v55.u32[0] > 1uLL)
    {
      v37 = v5;
      if (v5 >= v54)
        v37 = v5 % v54;
    }
    else
    {
      v37 = (v54 - 1) & v5;
    }
    v56 = *(_QWORD **)(*v53 + 8 * v37);
    if (v56)
    {
      v57 = (_QWORD *)*v56;
      if (v57)
      {
        if (v55.u32[0] < 2uLL)
        {
          while (1)
          {
            v59 = v57[1];
            if (v59 == v5)
            {
              if (v57[2] == v5)
                return v5;
            }
            else if ((v59 & (v54 - 1)) != v37)
            {
              goto LABEL_86;
            }
            v57 = (_QWORD *)*v57;
            if (!v57)
              goto LABEL_86;
          }
        }
        do
        {
          v58 = v57[1];
          if (v58 == v5)
          {
            if (v57[2] == v5)
              return v5;
          }
          else
          {
            if (v58 >= v54)
              v58 %= v54;
            if (v58 != v37)
              break;
          }
          v57 = (_QWORD *)*v57;
        }
        while (v57);
      }
    }
  }
LABEL_86:
  v60 = (char *)operator new(0x30uLL);
  *(_QWORD *)v60 = 0;
  *((_QWORD *)v60 + 1) = v5;
  *((_QWORD *)v60 + 2) = v5;
  *(int64x2_t *)(v60 + 24) = vdupq_n_s64(1uLL);
  v60[40] = 0;
  v61 = (float)(unint64_t)(*(_QWORD *)(a1 + 9464) + 1);
  v62 = *(float *)(a1 + 9472);
  if (!v54 || (float)(v62 * (float)v54) < v61)
  {
    v63 = 1;
    if (v54 >= 3)
      v63 = (v54 & (v54 - 1)) != 0;
    v64 = v63 | (2 * v54);
    v65 = vcvtps_u32_f32(v61 / v62);
    if (v64 <= v65)
      prime = v65;
    else
      prime = v64;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v54 = *(_QWORD *)(a1 + 9448);
    }
    if (prime > v54)
      goto LABEL_98;
    if (prime < v54)
    {
      v67 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 9464) / *(float *)(a1 + 9472));
      if (v54 < 3 || (v68 = (uint8x8_t)vcnt_s8((int8x8_t)v54), v68.i16[0] = vaddlv_u8(v68), v68.u32[0] > 1uLL))
      {
        v67 = std::__next_prime(v67);
      }
      else
      {
        v69 = 1 << -(char)__clz(v67 - 1);
        if (v67 >= 2)
          v67 = v69;
      }
      if (prime <= v67)
        prime = v67;
      if (prime < v54)
LABEL_98:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1 + 9440, prime);
    }
    v54 = *(_QWORD *)(a1 + 9448);
    if ((v54 & (v54 - 1)) != 0)
    {
      if (v5 >= v54)
        v37 = v5 % v54;
      else
        v37 = v5;
    }
    else
    {
      v37 = (v54 - 1) & v5;
    }
  }
  v70 = *v53;
  v71 = *(_QWORD **)(*v53 + 8 * v37);
  if (v71)
  {
    *(_QWORD *)v60 = *v71;
LABEL_122:
    *v71 = v60;
    goto LABEL_123;
  }
  *(_QWORD *)v60 = *(_QWORD *)(a1 + 9456);
  *(_QWORD *)(a1 + 9456) = v60;
  *(_QWORD *)(v70 + 8 * v37) = a1 + 9456;
  if (*(_QWORD *)v60)
  {
    v72 = *(_QWORD *)(*(_QWORD *)v60 + 8);
    if ((v54 & (v54 - 1)) != 0)
    {
      if (v72 >= v54)
        v72 %= v54;
    }
    else
    {
      v72 &= v54 - 1;
    }
    v71 = (_QWORD *)(*v53 + 8 * v72);
    goto LABEL_122;
  }
LABEL_123:
  ++*(_QWORD *)(a1 + 9464);
  return v5;
}

void sub_19FE35324(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t md::VKMRenderResourcesStore::getRenderableData(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint8x8_t v13;
  _QWORD **v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t prime;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;

  v3 = a2;
  v5 = *(_QWORD *)(a1 + 9504);
  if (a2 < (unint64_t)((*(_QWORD *)(a1 + 9512) - v5) >> 3)
    && ((v6 = *(_QWORD *)(v5 + 8 * a2)) != 0 ? (v7 = HIDWORD(a2) == HIDWORD(v6)) : (v7 = 0), v7))
  {
    v9 = *(_QWORD *)(a1 + 9528) + 280 * v6;
    v8 = *(_QWORD *)(a1 + 9536);
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 9536);
    v9 = v8;
  }
  if (v9 == v8)
    v10 = 0;
  else
    v10 = v9;
  if (!v10)
    return v10;
  v11 = (uint64_t *)(a1 + 9440);
  v12 = *(_QWORD *)(a1 + 9448);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v2 = a2;
      if (v12 <= a2)
        v2 = a2 % v12;
    }
    else
    {
      v2 = (v12 - 1) & a2;
    }
    v14 = *(_QWORD ***)(*v11 + 8 * v2);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v17 = v15[1];
            if (v17 == a2)
            {
              if (v15[2] == a2)
                goto LABEL_71;
            }
            else if ((v17 & (v12 - 1)) != v2)
            {
              goto LABEL_32;
            }
            v15 = (_QWORD *)*v15;
            if (!v15)
              goto LABEL_32;
          }
        }
        do
        {
          v16 = v15[1];
          if (v16 == a2)
          {
            if (v15[2] == a2)
              goto LABEL_71;
          }
          else
          {
            if (v16 >= v12)
              v16 %= v12;
            if (v16 != v2)
              break;
          }
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_32:
  v15 = operator new(0x30uLL);
  *v15 = 0;
  v15[1] = v3;
  v15[2] = v3;
  v15[3] = 0;
  v15[4] = 0;
  v15[5] = 0;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 9464) + 1);
  v19 = *(float *)(a1 + 9472);
  if (v12 && (float)(v19 * (float)v12) >= v18)
  {
    v3 = v2;
  }
  else
  {
    v20 = 1;
    if (v12 >= 3)
      v20 = (v12 & (v12 - 1)) != 0;
    v21 = v20 | (2 * v12);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      prime = v22;
    else
      prime = v21;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v12 = *(_QWORD *)(a1 + 9448);
    }
    if (prime > v12)
      goto LABEL_46;
    if (prime < v12)
    {
      v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 9464) / *(float *)(a1 + 9472));
      if (v12 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (prime <= v24)
        prime = v24;
      if (prime < v12)
LABEL_46:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1 + 9440, prime);
    }
    v12 = *(_QWORD *)(a1 + 9448);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v12 <= v3)
        v3 %= v12;
    }
    else
    {
      v3 &= v12 - 1;
    }
  }
  v27 = *v11;
  v28 = *(_QWORD **)(*v11 + 8 * v3);
  if (v28)
  {
    *v15 = *v28;
  }
  else
  {
    *v15 = *(_QWORD *)(a1 + 9456);
    *(_QWORD *)(a1 + 9456) = v15;
    *(_QWORD *)(v27 + 8 * v3) = a1 + 9456;
    if (!*v15)
      goto LABEL_70;
    v29 = *(_QWORD *)(*v15 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v29 >= v12)
        v29 %= v12;
    }
    else
    {
      v29 &= v12 - 1;
    }
    v28 = (_QWORD *)(*v11 + 8 * v29);
  }
  *v28 = v15;
LABEL_70:
  ++*(_QWORD *)(a1 + 9464);
LABEL_71:
  ++v15[3];
  return v10;
}

void sub_19FE35674(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v5 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = v5;
  v10[2] = *a3;
  v10[3] = 0;
  v10[4] = 0;
  v10[5] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    v5 = v3;
  }
  else
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = v17;
    else
      prime = v16;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_35;
    if (prime < v7)
    {
      v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v20 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
      {
        v19 = std::__next_prime(v19);
      }
      else
      {
        v21 = 1 << -(char)__clz(v19 - 1);
        if (v19 >= 2)
          v19 = v21;
      }
      if (prime <= v19)
        prime = v19;
      if (prime < v7)
LABEL_35:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v5)
        v5 %= v7;
    }
    else
    {
      v5 &= v7 - 1;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v23)
  {
    *v10 = *v23;
LABEL_58:
    *v23 = v10;
    goto LABEL_59;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v22 + 8 * v5) = a1 + 16;
  if (*v10)
  {
    v24 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v24 >= v7)
        v24 %= v7;
    }
    else
    {
      v24 &= v7 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_19FE35950(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t md::VKMRenderResourcesStore::getFlyoverSharedConstantDataHandle(md::VKMRenderResourcesStore *this)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  uint64_t *v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  char *v31;
  unint64_t v32;
  char *v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  __int128 v41;
  char *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  char *v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  _BYTE *v54;
  _QWORD *v55;
  char *v56;
  unint64_t v57;
  uint64_t v58;
  _OWORD *v59;
  char *v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t *v64;
  unint64_t v65;
  uint8x8_t v66;
  _QWORD *v67;
  _QWORD *v68;
  unint64_t v69;
  uint64_t v70;
  char *v71;
  float v72;
  float v73;
  _BOOL8 v74;
  unint64_t v75;
  unint64_t v76;
  size_t prime;
  unint64_t v78;
  uint8x8_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  unint64_t v83;
  __int128 v84;

  if (*((_QWORD *)this + 1325))
    return *((_QWORD *)this + 1325);
  v3 = operator new();
  v4 = (_QWORD *)ggl::BufferData::BufferData(v3, qword_1EE550A58, 2, 1, 6, 1);
  v4[25] = ggl::FlyoverCommon::Shared::reflection(void)::reflection;
  *v4 = &off_1E42B8E50;
  v5 = (_QWORD *)operator new();
  *v5 = &off_1E428A680;
  v5[1] = 0;
  v5[2] = 0;
  v5[3] = v3;
  *((_QWORD *)this + 1323) = v3;
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 1324);
  *((_QWORD *)this + 1324) = v5;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v84 = *((unint64_t *)this + 1323);
  v9 = *((_QWORD *)this + 525);
  if (*((_QWORD *)this + 524) == v9)
  {
    v12 = (-1431655765 * ((*((_QWORD *)this + 531) - *((_QWORD *)this + 530)) >> 3)) | 0x100000000;
    v13 = (uint64_t *)*((_QWORD *)this + 528);
    v14 = *((_QWORD *)this + 529);
    if ((unint64_t)v13 >= v14)
    {
      v16 = (uint64_t *)*((_QWORD *)this + 527);
      v17 = v13 - v16;
      v18 = v17 + 1;
      if ((unint64_t)(v17 + 1) >> 61)
        goto LABEL_137;
      v19 = v14 - (_QWORD)v16;
      if (v19 >> 2 > v18)
        v18 = v19 >> 2;
      if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
        v20 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v20 = v18;
      if (v20)
      {
        if (v20 >> 61)
          goto LABEL_138;
        v21 = operator new(8 * v20);
      }
      else
      {
        v21 = 0;
      }
      v22 = (uint64_t *)&v21[8 * v17];
      v23 = &v21[8 * v20];
      *v22 = v12;
      v15 = v22 + 1;
      if (v13 == v16)
      {
        v16 = v13;
      }
      else
      {
        v24 = (char *)v13 - (char *)v16 - 8;
        if (v24 < 0x58)
          goto LABEL_141;
        if ((unint64_t)((char *)v16 - v21) < 0x20)
          goto LABEL_141;
        v25 = (v24 >> 3) + 1;
        v26 = &v21[8 * v17 - 16];
        v27 = v13 - 2;
        v28 = v25 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v29 = *(_OWORD *)v27;
          *(v26 - 1) = *((_OWORD *)v27 - 1);
          *v26 = v29;
          v26 -= 2;
          v27 -= 4;
          v28 -= 4;
        }
        while (v28);
        v22 -= v25 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= v25 & 0x3FFFFFFFFFFFFFFCLL;
        if (v25 != (v25 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_141:
          do
          {
            v30 = *--v13;
            *--v22 = v30;
          }
          while (v13 != v16);
          v16 = (uint64_t *)*((_QWORD *)this + 527);
        }
      }
      *((_QWORD *)this + 527) = v22;
      *((_QWORD *)this + 528) = v15;
      *((_QWORD *)this + 529) = v23;
      if (v16)
        operator delete(v16);
    }
    else
    {
      *v13 = v12;
      v15 = v13 + 1;
    }
    *((_QWORD *)this + 528) = v15;
    v11 = *(v15 - 1);
  }
  else
  {
    v10 = *(_QWORD *)(v9 - 8);
    *((_QWORD *)this + 525) = v9 - 8;
    *(_DWORD *)(*((_QWORD *)this + 527) + 8 * v10) = -1431655765
                                                   * ((*((_QWORD *)this + 531) - *((_QWORD *)this + 530)) >> 3);
    *(_DWORD *)(*((_QWORD *)this + 527) + 8 * v10 + 4) = (((unint64_t)*(unsigned int *)(*((_QWORD *)this + 527)
                                                                                             + 8 * v10
                                                                                             + 4) << 32)
                                                        + 0x100000000) >> 32;
    v11 = v10 | ((unint64_t)*(unsigned int *)(*((_QWORD *)this + 527) + 8 * v10 + 4) << 32);
  }
  v31 = (char *)*((_QWORD *)this + 531);
  v32 = *((_QWORD *)this + 532);
  if ((unint64_t)v31 >= v32)
  {
    v34 = (char *)*((_QWORD *)this + 530);
    v35 = 0xAAAAAAAAAAAAAAABLL * ((v31 - v34) >> 3) + 1;
    if (v35 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_137;
    v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v32 - (_QWORD)v34) >> 3);
    if (2 * v36 > v35)
      v35 = 2 * v36;
    if (v36 >= 0x555555555555555)
      v37 = 0xAAAAAAAAAAAAAAALL;
    else
      v37 = v35;
    if (v37 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_138;
    v38 = (char *)operator new(24 * v37);
    v39 = &v38[8 * ((v31 - v34) >> 3)];
    *(_OWORD *)v39 = v84;
    *((_QWORD *)v39 + 2) = 0;
    v40 = &v38[24 * v37];
    v33 = v39 + 24;
    if (v31 == v34)
    {
      *((_QWORD *)this + 530) = v39;
      *((_QWORD *)this + 531) = v33;
      *((_QWORD *)this + 532) = v40;
    }
    else
    {
      do
      {
        v41 = *(_OWORD *)(v31 - 24);
        v31 -= 24;
        *(_OWORD *)(v39 - 24) = v41;
        v39 -= 24;
        *((_QWORD *)v39 + 2) = *((_QWORD *)v31 + 2);
        *((_QWORD *)v31 + 1) = 0;
        *((_QWORD *)v31 + 2) = 0;
      }
      while (v31 != v34);
      v34 = (char *)*((_QWORD *)this + 530);
      v42 = (char *)*((_QWORD *)this + 531);
      *((_QWORD *)this + 530) = v39;
      *((_QWORD *)this + 531) = v33;
      *((_QWORD *)this + 532) = v40;
      while (v42 != v34)
      {
        v43 = (std::__shared_weak_count *)*((_QWORD *)v42 - 1);
        if (v43)
        {
          v44 = (unint64_t *)&v43->__shared_owners_;
          do
            v45 = __ldaxr(v44);
          while (__stlxr(v45 - 1, v44));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
            std::__shared_weak_count::__release_weak(v43);
          }
        }
        v42 -= 24;
      }
    }
    if (v34)
      operator delete(v34);
  }
  else
  {
    *(_OWORD *)v31 = v84;
    *((_QWORD *)v31 + 2) = 0;
    v33 = v31 + 24;
  }
  *((_QWORD *)this + 531) = v33;
  v46 = (char *)*((_QWORD *)this + 534);
  v47 = *((_QWORD *)this + 535);
  if ((unint64_t)v46 < v47)
  {
    *(_QWORD *)v46 = v11;
    v48 = (unint64_t)(v46 + 8);
    goto LABEL_77;
  }
  v49 = (char *)*((_QWORD *)this + 533);
  v50 = (v46 - v49) >> 3;
  v51 = v50 + 1;
  if ((unint64_t)(v50 + 1) >> 61)
LABEL_137:
    abort();
  v52 = v47 - (_QWORD)v49;
  if (v52 >> 2 > v51)
    v51 = v52 >> 2;
  if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF8)
    v53 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v53 = v51;
  if (v53)
  {
    if (!(v53 >> 61))
    {
      v54 = operator new(8 * v53);
      goto LABEL_68;
    }
LABEL_138:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v54 = 0;
LABEL_68:
  v55 = &v54[8 * v50];
  v56 = &v54[8 * v53];
  *v55 = v11;
  v48 = (unint64_t)(v55 + 1);
  if (v46 != v49)
  {
    v57 = v46 - v49 - 8;
    if (v57 < 0x58)
      goto LABEL_142;
    if ((unint64_t)(v49 - v54) < 0x20)
      goto LABEL_142;
    v58 = (v57 >> 3) + 1;
    v59 = &v54[8 * v50 - 16];
    v60 = v46 - 16;
    v61 = v58 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v62 = *(_OWORD *)v60;
      *(v59 - 1) = *((_OWORD *)v60 - 1);
      *v59 = v62;
      v59 -= 2;
      v60 -= 32;
      v61 -= 4;
    }
    while (v61);
    v55 -= v58 & 0x3FFFFFFFFFFFFFFCLL;
    v46 -= 8 * (v58 & 0x3FFFFFFFFFFFFFFCLL);
    if (v58 != (v58 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_142:
      do
      {
        v63 = *((_QWORD *)v46 - 1);
        v46 -= 8;
        *--v55 = v63;
      }
      while (v46 != v49);
    }
  }
  *((_QWORD *)this + 533) = v55;
  *((_QWORD *)this + 534) = v48;
  *((_QWORD *)this + 535) = v56;
  if (v49)
    operator delete(v49);
LABEL_77:
  *((_QWORD *)this + 534) = v48;
  v64 = (uint64_t *)((char *)this + 4152);
  v65 = *((_QWORD *)this + 520);
  if (v65)
  {
    v66 = (uint8x8_t)vcnt_s8((int8x8_t)v65);
    v66.i16[0] = vaddlv_u8(v66);
    if (v66.u32[0] > 1uLL)
    {
      v48 = v11;
      if (v11 >= v65)
        v48 = v11 % v65;
    }
    else
    {
      v48 = (v65 - 1) & v11;
    }
    v67 = *(_QWORD **)(*v64 + 8 * v48);
    if (v67)
    {
      v68 = (_QWORD *)*v67;
      if (v68)
      {
        if (v66.u32[0] < 2uLL)
        {
          while (1)
          {
            v70 = v68[1];
            if (v70 == v11)
            {
              if (v68[2] == v11)
                goto LABEL_136;
            }
            else if ((v70 & (v65 - 1)) != v48)
            {
              goto LABEL_98;
            }
            v68 = (_QWORD *)*v68;
            if (!v68)
              goto LABEL_98;
          }
        }
        do
        {
          v69 = v68[1];
          if (v69 == v11)
          {
            if (v68[2] == v11)
              goto LABEL_136;
          }
          else
          {
            if (v69 >= v65)
              v69 %= v65;
            if (v69 != v48)
              break;
          }
          v68 = (_QWORD *)*v68;
        }
        while (v68);
      }
    }
  }
LABEL_98:
  v71 = (char *)operator new(0x30uLL);
  *(_QWORD *)v71 = 0;
  *((_QWORD *)v71 + 1) = v11;
  *((_QWORD *)v71 + 2) = v11;
  *(int64x2_t *)(v71 + 24) = vdupq_n_s64(1uLL);
  v71[40] = 1;
  v72 = (float)(unint64_t)(*((_QWORD *)this + 522) + 1);
  v73 = *((float *)this + 1046);
  if (!v65 || (float)(v73 * (float)v65) < v72)
  {
    v74 = 1;
    if (v65 >= 3)
      v74 = (v65 & (v65 - 1)) != 0;
    v75 = v74 | (2 * v65);
    v76 = vcvtps_u32_f32(v72 / v73);
    if (v75 <= v76)
      prime = v76;
    else
      prime = v75;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v65 = *((_QWORD *)this + 520);
    }
    if (prime > v65)
      goto LABEL_110;
    if (prime < v65)
    {
      v78 = vcvtps_u32_f32((float)*((unint64_t *)this + 522) / *((float *)this + 1046));
      if (v65 < 3 || (v79 = (uint8x8_t)vcnt_s8((int8x8_t)v65), v79.i16[0] = vaddlv_u8(v79), v79.u32[0] > 1uLL))
      {
        v78 = std::__next_prime(v78);
      }
      else
      {
        v80 = 1 << -(char)__clz(v78 - 1);
        if (v78 >= 2)
          v78 = v80;
      }
      if (prime <= v78)
        prime = v78;
      if (prime < v65)
LABEL_110:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)this + 4152, prime);
    }
    v65 = *((_QWORD *)this + 520);
    if ((v65 & (v65 - 1)) != 0)
    {
      if (v11 >= v65)
        v48 = v11 % v65;
      else
        v48 = v11;
    }
    else
    {
      v48 = (v65 - 1) & v11;
    }
  }
  v81 = *v64;
  v82 = *(_QWORD **)(*v64 + 8 * v48);
  if (v82)
  {
    *(_QWORD *)v71 = *v82;
  }
  else
  {
    *(_QWORD *)v71 = *((_QWORD *)this + 521);
    *((_QWORD *)this + 521) = v71;
    *(_QWORD *)(v81 + 8 * v48) = (char *)this + 4168;
    if (!*(_QWORD *)v71)
      goto LABEL_135;
    v83 = *(_QWORD *)(*(_QWORD *)v71 + 8);
    if ((v65 & (v65 - 1)) != 0)
    {
      if (v83 >= v65)
        v83 %= v65;
    }
    else
    {
      v83 &= v65 - 1;
    }
    v82 = (_QWORD *)(*v64 + 8 * v83);
  }
  *v82 = v71;
LABEL_135:
  ++*((_QWORD *)this + 522);
LABEL_136:
  *((_QWORD *)this + 1325) = v11;
  return *((_QWORD *)this + 1325);
}

void sub_19FE361C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  operator delete(v9);
  md::components::Material::~Material((md::components::Material *)&a9);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared> *,std::shared_ptr<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>>::__shared_ptr_default_delete<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>,ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>>,std::allocator<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared> *,std::shared_ptr<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>>::__shared_ptr_default_delete<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>,ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>>,std::allocator<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void md::VKMRenderResourcesStore::resetV2(md::VKMRenderResourcesStore *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t j;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  void *v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  void *v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  void *v37;
  _QWORD *v38;
  _QWORD *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  void *v45;
  _QWORD *v46;
  _QWORD *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  void *v53;
  _QWORD *v54;
  _QWORD *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  void *v61;
  _QWORD *v62;
  _QWORD *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  void *v69;
  _QWORD *v70;
  _QWORD *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  uint64_t v76;
  void *v77;
  _QWORD *v78;
  _QWORD *v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  BOOL v83;
  uint64_t v84;
  void *v85;
  _QWORD *v86;
  _QWORD *v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  BOOL v91;
  uint64_t v92;
  uint64_t k;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  _BYTE *v108;
  _QWORD *v109;
  unint64_t v110;
  uint64_t v111;
  _OWORD *v112;
  char *v113;
  uint64_t v114;
  __int128 v115;
  uint64_t v116;
  _QWORD *v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t m;
  _QWORD *v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t n;
  uint64_t ii;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  char *v133;
  unint64_t v134;
  char *v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  _BYTE *v140;
  _QWORD *v141;
  unint64_t v142;
  uint64_t v143;
  _OWORD *v144;
  char *v145;
  uint64_t v146;
  __int128 v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *p_shared_owners;
  unint64_t v153;
  _QWORD *v154;
  _QWORD *v155;
  uint64_t v156;
  uint64_t jj;
  _QWORD *v158;
  _QWORD *v159;
  uint64_t v160;
  uint64_t kk;
  void *v162;
  _QWORD *v163;
  _QWORD *v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  BOOL v168;
  uint64_t v169;
  void *v170;
  _QWORD *v171;
  _QWORD *v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  BOOL v176;
  uint64_t v177;
  unint64_t *v178;
  unint64_t *v179;
  unint64_t *v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  BOOL v184;
  uint64_t v185;
  unint64_t *v186;
  unint64_t *v187;
  unint64_t *v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  BOOL v192;
  uint64_t v193;
  int8x8_t v194;
  unint64_t *v195;
  unint64_t v196;
  uint8x8_t v197;
  unint64_t v198;
  uint64_t **v199;
  uint64_t *v200;
  uint64_t v201;
  unint64_t v202;
  uint64_t v203;
  int8x8_t v204;
  unint64_t *v205;
  unint64_t v206;
  uint8x8_t v207;
  unint64_t v208;
  uint64_t **v209;
  uint64_t *v210;
  uint64_t v211;
  unint64_t v212;
  uint64_t v213;
  void *v214;
  _QWORD *v215;
  _QWORD *v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t v219;
  BOOL v220;
  uint64_t v221;
  void *v222;
  _QWORD *v223;
  _QWORD *v224;
  unint64_t v225;
  uint64_t v226;
  uint64_t v227;
  BOOL v228;
  uint64_t v229;
  void *v230;
  _QWORD *v231;
  _QWORD *v232;
  unint64_t v233;
  uint64_t v234;
  uint64_t v235;
  BOOL v236;
  uint64_t v237;
  void *v238;
  _QWORD *v239;
  _QWORD *v240;
  unint64_t v241;
  uint64_t v242;
  uint64_t v243;
  BOOL v244;
  uint64_t v245;
  void *v246;
  _QWORD *v247;
  _QWORD *v248;
  unint64_t v249;
  uint64_t v250;
  uint64_t v251;
  BOOL v252;
  uint64_t v253;
  void *v254;
  _QWORD *v255;
  _QWORD *v256;
  unint64_t v257;
  uint64_t v258;
  uint64_t v259;
  BOOL v260;
  uint64_t v261;
  void *v262;
  _QWORD *v263;
  _QWORD *v264;
  unint64_t v265;
  uint64_t v266;
  uint64_t v267;
  BOOL v268;
  uint64_t v269;
  void *v270;
  _QWORD *v271;
  _QWORD *v272;
  unint64_t v273;
  uint64_t v274;
  uint64_t v275;
  BOOL v276;
  uint64_t v277;
  void *v278;
  _QWORD *v279;
  _QWORD *v280;
  unint64_t v281;
  uint64_t v282;
  uint64_t v283;
  BOOL v284;
  uint64_t v285;
  void *v286;
  _QWORD *v287;
  _QWORD *v288;
  unint64_t v289;
  uint64_t v290;
  uint64_t v291;
  BOOL v292;
  uint64_t v293;
  void *v294;
  _QWORD *v295;
  _QWORD *v296;
  unint64_t v297;
  uint64_t v298;
  uint64_t v299;
  BOOL v300;
  uint64_t v301;
  void *v302;
  _QWORD *v303;
  _QWORD *v304;
  unint64_t v305;
  uint64_t v306;
  uint64_t v307;
  BOOL v308;
  uint64_t v309;
  void *v310;
  _QWORD *v311;
  _QWORD *v312;
  unint64_t v313;
  uint64_t v314;
  uint64_t v315;
  BOOL v316;
  uint64_t v317;
  void *v318;
  _QWORD *v319;
  _QWORD *v320;
  unint64_t v321;
  uint64_t v322;
  uint64_t v323;
  BOOL v324;
  uint64_t v325;
  void *v326;
  _QWORD *v327;
  _QWORD *v328;
  unint64_t v329;
  uint64_t v330;
  uint64_t v331;
  BOOL v332;
  uint64_t v333;
  void *v334;
  _QWORD *v335;
  _QWORD *v336;
  unint64_t v337;
  uint64_t v338;
  uint64_t v339;
  BOOL v340;
  uint64_t v341;
  unint64_t *v342;
  unint64_t *v343;
  unint64_t *v344;
  unint64_t v345;
  uint64_t v346;
  uint64_t v347;
  BOOL v348;
  uint64_t v349;
  unint64_t *v350;
  unint64_t *v351;
  unint64_t *v352;
  unint64_t v353;
  uint64_t v354;
  uint64_t v355;
  BOOL v356;
  uint64_t v357;
  int8x8_t v358;
  unint64_t *v359;
  unint64_t v360;
  uint8x8_t v361;
  unint64_t v362;
  float **v363;
  float *v364;
  uint64_t v365;
  unint64_t v366;
  uint64_t v367;
  uint64_t *v368;
  int8x8_t v369;
  unint64_t *v370;
  unint64_t v371;
  uint8x8_t v372;
  unint64_t v373;
  float **v374;
  float *v375;
  uint64_t v376;
  unint64_t v377;
  uint64_t v378;
  uint64_t *v379;
  unint64_t *v380;
  unint64_t *v381;
  unint64_t *v382;
  unint64_t v383;
  uint64_t v384;
  uint64_t v385;
  BOOL v386;
  uint64_t v387;
  unint64_t *v388;
  unint64_t *v389;
  unint64_t *v390;
  unint64_t v391;
  uint64_t v392;
  uint64_t v393;
  BOOL v394;
  uint64_t v395;
  int8x8_t v396;
  unint64_t *v397;
  unint64_t v398;
  uint8x8_t v399;
  unint64_t v400;
  _QWORD *v401;
  _QWORD *v402;
  uint64_t v403;
  unint64_t v404;
  uint64_t v405;
  int8x8_t v406;
  unint64_t *v407;
  unint64_t v408;
  uint8x8_t v409;
  unint64_t v410;
  _QWORD *v411;
  _QWORD *v412;
  uint64_t v413;
  unint64_t v414;
  uint64_t v415;
  void *v416;
  _QWORD *v417;
  _QWORD *v418;
  unint64_t v419;
  uint64_t v420;
  uint64_t v421;
  BOOL v422;
  uint64_t v423;
  void *v424;
  _QWORD *v425;
  _QWORD *v426;
  unint64_t v427;
  uint64_t v428;
  uint64_t v429;
  BOOL v430;
  uint64_t v431;
  unint64_t *v432;
  unint64_t *v433;
  unint64_t *v434;
  unint64_t v435;
  uint64_t v436;
  uint64_t v437;
  BOOL v438;
  uint64_t v439;
  unint64_t *v440;
  unint64_t *v441;
  unint64_t *v442;
  unint64_t v443;
  uint64_t v444;
  uint64_t v445;
  BOOL v446;
  uint64_t v447;
  int8x8_t v448;
  unint64_t *v449;
  unint64_t v450;
  uint8x8_t v451;
  unint64_t v452;
  float **v453;
  float *v454;
  uint64_t v455;
  unint64_t v456;
  uint64_t v457;
  float *v458;
  int8x8_t v459;
  unint64_t *v460;
  unint64_t v461;
  uint8x8_t v462;
  unint64_t v463;
  float **v464;
  float *v465;
  uint64_t v466;
  unint64_t v467;
  uint64_t v468;
  float *v469;
  unint64_t *v470;
  unint64_t *v471;
  unint64_t *v472;
  unint64_t v473;
  uint64_t v474;
  uint64_t v475;
  BOOL v476;
  uint64_t v477;
  unint64_t *v478;
  unint64_t *v479;
  unint64_t *v480;
  unint64_t v481;
  uint64_t v482;
  uint64_t v483;
  BOOL v484;
  uint64_t v485;
  int8x8_t v486;
  unint64_t *v487;
  unint64_t v488;
  uint8x8_t v489;
  unint64_t v490;
  _QWORD *v491;
  _QWORD *v492;
  uint64_t v493;
  unint64_t v494;
  uint64_t v495;
  int8x8_t v496;
  unint64_t *v497;
  unint64_t v498;
  uint8x8_t v499;
  unint64_t v500;
  _QWORD *v501;
  _QWORD *v502;
  uint64_t v503;
  unint64_t v504;
  uint64_t v505;
  unint64_t *v506;
  unint64_t *v507;
  unint64_t *v508;
  unint64_t v509;
  uint64_t v510;
  uint64_t v511;
  BOOL v512;
  uint64_t v513;
  unint64_t *v514;
  unint64_t *v515;
  unint64_t *v516;
  unint64_t v517;
  uint64_t v518;
  uint64_t v519;
  BOOL v520;
  uint64_t v521;
  int8x8_t v522;
  unint64_t *v523;
  unint64_t v524;
  uint8x8_t v525;
  unint64_t v526;
  _QWORD *v527;
  _QWORD *v528;
  uint64_t v529;
  unint64_t v530;
  uint64_t v531;
  _QWORD *v532;
  int8x8_t v533;
  unint64_t *v534;
  unint64_t v535;
  uint8x8_t v536;
  unint64_t v537;
  _QWORD *v538;
  _QWORD *v539;
  uint64_t v540;
  unint64_t v541;
  uint64_t v542;
  _QWORD *v543;
  void *v544;
  unint64_t *v545;
  unint64_t *v546;
  unint64_t v547;
  uint64_t v548;
  uint64_t v549;
  BOOL v550;
  uint64_t v551;
  void *v552;
  unint64_t *v553;
  unint64_t *v554;
  unint64_t v555;
  uint64_t v556;
  uint64_t v557;
  BOOL v558;
  uint64_t v559;
  unint64_t *v560;
  unint64_t *v561;
  unint64_t *v562;
  unint64_t v563;
  uint64_t v564;
  uint64_t v565;
  BOOL v566;
  uint64_t v567;
  unint64_t *v568;
  unint64_t *v569;
  unint64_t *v570;
  unint64_t v571;
  uint64_t v572;
  uint64_t v573;
  BOOL v574;
  uint64_t v575;
  int8x8_t v576;
  unint64_t *v577;
  unint64_t v578;
  uint8x8_t v579;
  unint64_t v580;
  float **v581;
  float *v582;
  uint64_t v583;
  unint64_t v584;
  uint64_t v585;
  _QWORD *v586;
  int8x8_t v587;
  unint64_t *v588;
  unint64_t v589;
  uint8x8_t v590;
  unint64_t v591;
  float **v592;
  float *v593;
  uint64_t v594;
  unint64_t v595;
  uint64_t v596;
  _QWORD *v597;
  unint64_t *v598;
  unint64_t *v599;
  unint64_t *v600;
  unint64_t v601;
  uint64_t v602;
  uint64_t v603;
  BOOL v604;
  uint64_t v605;
  unint64_t *v606;
  unint64_t *v607;
  unint64_t *v608;
  unint64_t v609;
  uint64_t v610;
  uint64_t v611;
  BOOL v612;
  uint64_t v613;
  int8x8_t v614;
  unint64_t *v615;
  unint64_t v616;
  uint8x8_t v617;
  unint64_t v618;
  float **v619;
  float *v620;
  uint64_t v621;
  unint64_t v622;
  uint64_t v623;
  uint64_t *v624;
  int8x8_t v625;
  unint64_t *v626;
  unint64_t v627;
  uint8x8_t v628;
  unint64_t v629;
  float **v630;
  float *v631;
  uint64_t v632;
  unint64_t v633;
  uint64_t v634;
  uint64_t *v635;
  void *v636;
  unint64_t *v637;
  unint64_t *v638;
  unint64_t v639;
  uint64_t v640;
  uint64_t v641;
  BOOL v642;
  uint64_t v643;
  void *v644;
  unint64_t *v645;
  unint64_t *v646;
  unint64_t v647;
  uint64_t v648;
  uint64_t v649;
  BOOL v650;
  uint64_t v651;
  void *v652;
  unint64_t *v653;
  unint64_t *v654;
  unint64_t v655;
  uint64_t v656;
  uint64_t v657;
  BOOL v658;
  uint64_t v659;
  void *v660;
  unint64_t *v661;
  unint64_t *v662;
  unint64_t v663;
  uint64_t v664;
  uint64_t v665;
  BOOL v666;
  uint64_t v667;
  void *v668;
  unint64_t *v669;
  unint64_t *v670;
  unint64_t v671;
  uint64_t v672;
  uint64_t v673;
  BOOL v674;
  uint64_t v675;
  void *v676;
  unint64_t *v677;
  unint64_t *v678;
  unint64_t v679;
  uint64_t v680;
  uint64_t v681;
  BOOL v682;
  uint64_t v683;
  void *v684;
  unint64_t *v685;
  unint64_t *v686;
  unint64_t v687;
  uint64_t v688;
  uint64_t v689;
  BOOL v690;
  uint64_t v691;
  void *v692;
  unint64_t *v693;
  unint64_t *v694;
  unint64_t v695;
  uint64_t v696;
  uint64_t v697;
  BOOL v698;
  uint64_t v699;
  void *v700;
  unint64_t *v701;
  unint64_t *v702;
  unint64_t v703;
  uint64_t v704;
  uint64_t v705;
  BOOL v706;
  uint64_t v707;
  void *v708;
  unint64_t *v709;
  unint64_t *v710;
  unint64_t v711;
  uint64_t v712;
  uint64_t v713;
  BOOL v714;
  uint64_t v715;
  void *v716;
  unint64_t *v717;
  unint64_t *v718;
  unint64_t v719;
  uint64_t v720;
  uint64_t v721;
  BOOL v722;
  uint64_t v723;
  void *v724;
  unint64_t *v725;
  unint64_t *v726;
  unint64_t v727;
  uint64_t v728;
  uint64_t v729;
  BOOL v730;
  uint64_t v731;
  void *v732;
  _QWORD *v733;
  _QWORD *v734;
  unint64_t v735;
  uint64_t v736;
  uint64_t v737;
  BOOL v738;
  uint64_t v739;
  void *v740;
  _QWORD *v741;
  _QWORD *v742;
  unint64_t v743;
  uint64_t v744;
  uint64_t v745;
  BOOL v746;
  uint64_t v747;
  unint64_t *v748;
  unint64_t *v749;
  unint64_t *v750;
  unint64_t v751;
  uint64_t v752;
  uint64_t v753;
  BOOL v754;
  uint64_t v755;
  unint64_t *v756;
  unint64_t *v757;
  unint64_t *v758;
  unint64_t v759;
  uint64_t v760;
  uint64_t v761;
  BOOL v762;
  uint64_t v763;
  int8x8_t v764;
  unint64_t *v765;
  unint64_t v766;
  uint8x8_t v767;
  unint64_t v768;
  _QWORD *v769;
  _QWORD *v770;
  uint64_t v771;
  unint64_t v772;
  uint64_t v773;
  _QWORD *v774;
  int8x8_t v775;
  unint64_t *v776;
  unint64_t v777;
  uint8x8_t v778;
  unint64_t v779;
  _QWORD *v780;
  _QWORD *v781;
  uint64_t v782;
  unint64_t v783;
  uint64_t v784;
  _QWORD *v785;
  double v786;
  __n128 v787;
  float v788;
  float v789;
  unint64_t *v790;
  unint64_t *v791;
  unint64_t *v792;
  unint64_t v793;
  uint64_t v794;
  uint64_t v795;
  BOOL v796;
  uint64_t v797;
  unint64_t *v798;
  unint64_t *v799;
  unint64_t *v800;
  unint64_t v801;
  uint64_t v802;
  uint64_t v803;
  BOOL v804;
  uint64_t v805;
  int8x8_t v806;
  unint64_t *v807;
  unint64_t v808;
  uint8x8_t v809;
  unint64_t v810;
  _QWORD *v811;
  _QWORD *v812;
  uint64_t v813;
  unint64_t v814;
  uint64_t v815;
  int8x8_t v816;
  unint64_t *v817;
  unint64_t v818;
  uint8x8_t v819;
  unint64_t v820;
  _QWORD *v821;
  _QWORD *v822;
  uint64_t v823;
  unint64_t v824;
  uint64_t v825;
  unint64_t *v826;
  unint64_t *v827;
  unint64_t *v828;
  unint64_t v829;
  uint64_t v830;
  uint64_t v831;
  BOOL v832;
  uint64_t v833;
  unint64_t *v834;
  unint64_t *v835;
  unint64_t *v836;
  unint64_t v837;
  uint64_t v838;
  uint64_t v839;
  BOOL v840;
  uint64_t v841;
  int8x8_t v842;
  unint64_t *v843;
  unint64_t v844;
  uint8x8_t v845;
  unint64_t v846;
  float **v847;
  float *v848;
  uint64_t v849;
  unint64_t v850;
  uint64_t v851;
  _QWORD *v852;
  int8x8_t v853;
  unint64_t *v854;
  unint64_t v855;
  uint8x8_t v856;
  unint64_t v857;
  float **v858;
  float *v859;
  uint64_t v860;
  unint64_t v861;
  uint64_t v862;
  _QWORD *v863;
  unint64_t *v864;
  unint64_t *v865;
  unint64_t *v866;
  unint64_t v867;
  uint64_t v868;
  uint64_t v869;
  BOOL v870;
  uint64_t v871;
  unint64_t *v872;
  unint64_t *v873;
  unint64_t *v874;
  unint64_t v875;
  uint64_t v876;
  uint64_t v877;
  BOOL v878;
  uint64_t v879;
  int8x8_t v880;
  unint64_t *v881;
  unint64_t v882;
  uint8x8_t v883;
  unint64_t v884;
  float **v885;
  float *v886;
  uint64_t v887;
  unint64_t v888;
  uint64_t v889;
  uint64_t *v890;
  int8x8_t v891;
  unint64_t *v892;
  unint64_t v893;
  uint8x8_t v894;
  unint64_t v895;
  float **v896;
  float *v897;
  uint64_t v898;
  unint64_t v899;
  uint64_t v900;
  uint64_t *v901;
  void *v902;
  _QWORD *v903;
  _QWORD *v904;
  unint64_t v905;
  uint64_t v906;
  uint64_t v907;
  BOOL v908;
  uint64_t v909;
  void *v910;
  _QWORD *v911;
  _QWORD *v912;
  unint64_t v913;
  uint64_t v914;
  uint64_t v915;
  BOOL v916;
  uint64_t v917;
  unint64_t *v918;
  unint64_t *v919;
  unint64_t *v920;
  unint64_t v921;
  uint64_t v922;
  uint64_t v923;
  BOOL v924;
  uint64_t v925;
  unint64_t *v926;
  unint64_t *v927;
  unint64_t *v928;
  unint64_t v929;
  uint64_t v930;
  uint64_t v931;
  BOOL v932;
  uint64_t v933;
  int8x8_t v934;
  unint64_t *v935;
  unint64_t v936;
  uint8x8_t v937;
  unint64_t v938;
  uint64_t **v939;
  uint64_t *v940;
  uint64_t v941;
  unint64_t v942;
  uint64_t v943;
  uint64_t *v944;
  int8x8_t v945;
  unint64_t *v946;
  unint64_t v947;
  uint8x8_t v948;
  unint64_t v949;
  uint64_t **v950;
  uint64_t *v951;
  uint64_t v952;
  unint64_t v953;
  uint64_t v954;
  uint64_t *v955;
  unint64_t *v956;
  unint64_t *v957;
  unint64_t *v958;
  unint64_t v959;
  uint64_t v960;
  uint64_t v961;
  BOOL v962;
  uint64_t v963;
  unint64_t *v964;
  unint64_t *v965;
  unint64_t *v966;
  unint64_t v967;
  uint64_t v968;
  uint64_t v969;
  BOOL v970;
  uint64_t v971;
  int8x8_t v972;
  unint64_t *v973;
  unint64_t v974;
  uint8x8_t v975;
  unint64_t v976;
  float **v977;
  float *v978;
  uint64_t v979;
  unint64_t v980;
  uint64_t v981;
  float *v982;
  int8x8_t v983;
  unint64_t *v984;
  unint64_t v985;
  uint8x8_t v986;
  unint64_t v987;
  float **v988;
  float *v989;
  uint64_t v990;
  unint64_t v991;
  uint64_t v992;
  float *v993;
  unint64_t *v994;
  unint64_t *v995;
  unint64_t *v996;
  unint64_t v997;
  uint64_t v998;
  uint64_t v999;
  BOOL v1000;
  uint64_t v1001;
  unint64_t *v1002;
  unint64_t *v1003;
  unint64_t *v1004;
  unint64_t v1005;
  uint64_t v1006;
  uint64_t v1007;
  BOOL v1008;
  uint64_t v1009;
  int8x8_t v1010;
  unint64_t *v1011;
  unint64_t v1012;
  uint8x8_t v1013;
  unint64_t v1014;
  float **v1015;
  float *v1016;
  uint64_t v1017;
  unint64_t v1018;
  uint64_t v1019;
  float *v1020;
  int8x8_t v1021;
  unint64_t *v1022;
  unint64_t v1023;
  uint8x8_t v1024;
  unint64_t v1025;
  float **v1026;
  float *v1027;
  uint64_t v1028;
  unint64_t v1029;
  uint64_t v1030;
  float *v1031;
  unint64_t v1032;
  unint64_t *v1033;
  uint64_t v1034;
  _QWORD *v1035;
  _QWORD *v1036;
  uint64_t v1037;
  void *__p;
  _QWORD *v1039;
  uint64_t v1040;

  if (*((_QWORD *)this + 106))
  {
    v2 = (_QWORD *)*((_QWORD *)this + 105);
    if (v2)
    {
      do
      {
        v17 = (_QWORD *)*v2;
        v18 = (_QWORD *)v2[5];
        if (v18)
        {
          do
          {
            v19 = (_QWORD *)*v18;
            operator delete(v18);
            v18 = v19;
          }
          while (v19);
        }
        v20 = (void *)v2[3];
        v2[3] = 0;
        if (v20)
          operator delete(v20);
        operator delete(v2);
        v2 = v17;
      }
      while (v17);
    }
    *((_QWORD *)this + 105) = 0;
    v3 = *((_QWORD *)this + 104);
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*((_QWORD *)this + 103) + 8 * i) = 0;
    }
    *((_QWORD *)this + 106) = 0;
  }
  if (*((_QWORD *)this + 1331))
  {
    v5 = (_QWORD *)*((_QWORD *)this + 1330);
    if (v5)
    {
      do
      {
        v6 = (_QWORD *)*v5;
        operator delete(v5);
        v5 = v6;
      }
      while (v6);
    }
    *((_QWORD *)this + 1330) = 0;
    v7 = *((_QWORD *)this + 1329);
    if (v7)
    {
      for (j = 0; j != v7; ++j)
        *(_QWORD *)(*((_QWORD *)this + 1328) + 8 * j) = 0;
    }
    *((_QWORD *)this + 1331) = 0;
  }
  __p = 0;
  v1039 = 0;
  v1040 = 0;
  v1035 = 0;
  v1036 = 0;
  v1037 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 1131, (uint64_t)&__p);
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 1136, (uint64_t)&v1035);
  v9 = __p;
  v10 = v1039;
  if (__p != v1039)
  {
    v11 = __p;
    do
    {
      v12 = *v11;
      v13 = *((_QWORD *)this + 1144);
      if (v12 < (*((_QWORD *)this + 1145) - v13) >> 3)
      {
        v14 = *(_QWORD *)(v13 + 8 * v12);
        v15 = v14 && HIDWORD(*v11) == HIDWORD(v14);
        if (v15 && *((_QWORD *)this + 1147) + ((unint64_t)v14 << 7) != *((_QWORD *)this + 1148))
        {
          v16 = *(_QWORD *)(*((_QWORD *)this + 1150) + 8 * v14);
          v1032 = v16 | ((unint64_t)*(unsigned int *)(v13 + 8 * v16 + 4) << 32);
          geo::packed_array<md::GlobeMatrixStorage,geo::handle<md::GlobeMatrix>>::erase((uint64_t)this + 9128, &v1032);
        }
      }
      ++v11;
    }
    while (v11 != v10);
  }
  v21 = v1035;
  v22 = v1036;
  if (v1035 != v1036)
  {
    v23 = v1035;
    do
    {
      v24 = *v23;
      v25 = *((_QWORD *)this + 1144);
      if (v24 < (*((_QWORD *)this + 1145) - v25) >> 3)
      {
        v26 = *(_QWORD *)(v25 + 8 * v24);
        v27 = v26 && HIDWORD(*v23) == HIDWORD(v26);
        if (v27 && *((_QWORD *)this + 1147) + ((unint64_t)v26 << 7) != *((_QWORD *)this + 1148))
        {
          v28 = *(_QWORD *)(*((_QWORD *)this + 1150) + 8 * v26);
          v1032 = v28 | ((unint64_t)*(unsigned int *)(v25 + 8 * v28 + 4) << 32);
          geo::packed_array<md::GlobeMatrixStorage,geo::handle<md::GlobeMatrix>>::erase((uint64_t)this + 9128, &v1032);
        }
      }
      ++v23;
    }
    while (v23 != v22);
  }
  if (v21)
    operator delete(v21);
  if (v9)
    operator delete(v9);
  __p = 0;
  v1039 = 0;
  v1040 = 0;
  v1035 = 0;
  v1036 = 0;
  v1037 = 0;
  md::accumulate<geo::handle<md::MaterialIDStorage>>((_QWORD *)this + 1263, (uint64_t)&__p);
  md::accumulate<geo::handle<md::MaterialIDStorage>>((_QWORD *)this + 1268, (uint64_t)&v1035);
  v29 = __p;
  v30 = v1039;
  if (__p != v1039)
  {
    v31 = __p;
    do
    {
      v32 = *v31;
      v33 = *((_QWORD *)this + 1276);
      if (v32 < (*((_QWORD *)this + 1277) - v33) >> 3)
      {
        v34 = *(_QWORD *)(v33 + 8 * v32);
        v35 = v34 && HIDWORD(*v31) == HIDWORD(v34);
        if (v35 && *((_QWORD *)this + 1279) + 56 * v34 != *((_QWORD *)this + 1280))
        {
          v36 = *(_QWORD *)(*((_QWORD *)this + 1282) + 8 * v34);
          v1032 = v36 | ((unint64_t)*(unsigned int *)(v33 + 8 * v36 + 4) << 32);
          geo::packed_array<md::AssociationItemStorage,geo::handle<md::AssociationItem>>::erase((uint64_t)this + 10184, &v1032);
        }
      }
      ++v31;
    }
    while (v31 != v30);
  }
  v37 = v1035;
  v38 = v1036;
  if (v1035 != v1036)
  {
    v39 = v1035;
    do
    {
      v40 = *v39;
      v41 = *((_QWORD *)this + 1276);
      if (v40 < (*((_QWORD *)this + 1277) - v41) >> 3)
      {
        v42 = *(_QWORD *)(v41 + 8 * v40);
        v43 = v42 && HIDWORD(*v39) == HIDWORD(v42);
        if (v43 && *((_QWORD *)this + 1279) + 56 * v42 != *((_QWORD *)this + 1280))
        {
          v44 = *(_QWORD *)(*((_QWORD *)this + 1282) + 8 * v42);
          v1032 = v44 | ((unint64_t)*(unsigned int *)(v41 + 8 * v44 + 4) << 32);
          geo::packed_array<md::AssociationItemStorage,geo::handle<md::AssociationItem>>::erase((uint64_t)this + 10184, &v1032);
        }
      }
      ++v39;
    }
    while (v39 != v38);
  }
  if (v37)
    operator delete(v37);
  if (v29)
    operator delete(v29);
  __p = 0;
  v1039 = 0;
  v1040 = 0;
  v1035 = 0;
  v1036 = 0;
  v1037 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 1153, (uint64_t)&__p);
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 1158, (uint64_t)&v1035);
  v45 = __p;
  v46 = v1039;
  if (__p != v1039)
  {
    v47 = __p;
    do
    {
      v48 = *v47;
      v49 = *((_QWORD *)this + 1166);
      if (v48 < (*((_QWORD *)this + 1167) - v49) >> 3)
      {
        v50 = *(_QWORD *)(v49 + 8 * v48);
        v51 = v50 && HIDWORD(*v47) == HIDWORD(v50);
        if (v51 && *((_QWORD *)this + 1169) + ((unint64_t)v50 << 8) != *((_QWORD *)this + 1170))
        {
          v52 = *(_QWORD *)(*((_QWORD *)this + 1172) + 8 * v50);
          v1032 = v52 | ((unint64_t)*(unsigned int *)(v49 + 8 * v52 + 4) << 32);
          geo::packed_array<md::TileMatrixStorage,geo::handle<md::TileMatrix>>::erase((uint64_t)this + 9304, &v1032);
        }
      }
      ++v47;
    }
    while (v47 != v46);
  }
  v53 = v1035;
  v54 = v1036;
  if (v1035 != v1036)
  {
    v55 = v1035;
    do
    {
      v56 = *v55;
      v57 = *((_QWORD *)this + 1166);
      if (v56 < (*((_QWORD *)this + 1167) - v57) >> 3)
      {
        v58 = *(_QWORD *)(v57 + 8 * v56);
        v59 = v58 && HIDWORD(*v55) == HIDWORD(v58);
        if (v59 && *((_QWORD *)this + 1169) + ((unint64_t)v58 << 8) != *((_QWORD *)this + 1170))
        {
          v60 = *(_QWORD *)(*((_QWORD *)this + 1172) + 8 * v58);
          v1032 = v60 | ((unint64_t)*(unsigned int *)(v57 + 8 * v60 + 4) << 32);
          geo::packed_array<md::TileMatrixStorage,geo::handle<md::TileMatrix>>::erase((uint64_t)this + 9304, &v1032);
        }
      }
      ++v55;
    }
    while (v55 != v54);
  }
  if (v53)
    operator delete(v53);
  if (v45)
    operator delete(v45);
  __p = 0;
  v1039 = 0;
  v1040 = 0;
  v1035 = 0;
  v1036 = 0;
  v1037 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 1175, (uint64_t)&__p);
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 1180, (uint64_t)&v1035);
  v61 = __p;
  v62 = v1039;
  if (__p != v1039)
  {
    v63 = __p;
    do
    {
      v64 = *v63;
      v65 = *((_QWORD *)this + 1188);
      if (v64 < (*((_QWORD *)this + 1189) - v65) >> 3)
      {
        v66 = *(_QWORD *)(v65 + 8 * v64);
        v67 = v66 && HIDWORD(*v63) == HIDWORD(v66);
        if (v67 && *((_QWORD *)this + 1191) + 280 * v66 != *((_QWORD *)this + 1192))
        {
          v68 = *(_QWORD *)(*((_QWORD *)this + 1194) + 8 * v66);
          v1032 = v68 | ((unint64_t)*(unsigned int *)(v65 + 8 * v68 + 4) << 32);
          geo::packed_array<md::RenderableDataStorage,geo::handle<md::RenderableDataItem>>::erase((uint64_t)this + 9480, &v1032);
        }
      }
      ++v63;
    }
    while (v63 != v62);
  }
  v69 = v1035;
  v70 = v1036;
  if (v1035 != v1036)
  {
    v71 = v1035;
    do
    {
      v72 = *v71;
      v73 = *((_QWORD *)this + 1188);
      if (v72 < (*((_QWORD *)this + 1189) - v73) >> 3)
      {
        v74 = *(_QWORD *)(v73 + 8 * v72);
        v75 = v74 && HIDWORD(*v71) == HIDWORD(v74);
        if (v75 && *((_QWORD *)this + 1191) + 280 * v74 != *((_QWORD *)this + 1192))
        {
          v76 = *(_QWORD *)(*((_QWORD *)this + 1194) + 8 * v74);
          v1032 = v76 | ((unint64_t)*(unsigned int *)(v73 + 8 * v76 + 4) << 32);
          geo::packed_array<md::RenderableDataStorage,geo::handle<md::RenderableDataItem>>::erase((uint64_t)this + 9480, &v1032);
        }
      }
      ++v71;
    }
    while (v71 != v70);
  }
  if (v69)
    operator delete(v69);
  if (v61)
    operator delete(v61);
  __p = 0;
  v1039 = 0;
  v1040 = 0;
  v1035 = 0;
  v1036 = 0;
  v1037 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 1197, (uint64_t)&__p);
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 1202, (uint64_t)&v1035);
  v77 = __p;
  v78 = v1039;
  if (__p != v1039)
  {
    v79 = __p;
    do
    {
      v80 = *v79;
      v81 = *((_QWORD *)this + 1210);
      if (v80 < (*((_QWORD *)this + 1211) - v81) >> 3)
      {
        v82 = *(_QWORD *)(v81 + 8 * v80);
        v83 = v82 && HIDWORD(*v79) == HIDWORD(v82);
        if (v83 && *((_QWORD *)this + 1213) + 40 * v82 != *((_QWORD *)this + 1214))
        {
          v84 = *(_QWORD *)(*((_QWORD *)this + 1216) + 8 * v82);
          v1032 = v84 | ((unint64_t)*(unsigned int *)(v81 + 8 * v84 + 4) << 32);
          geo::packed_array<md::ColorRampDataStorage,geo::handle<md::ColorRampData>>::erase((uint64_t)this + 9656, &v1032);
        }
      }
      ++v79;
    }
    while (v79 != v78);
  }
  v85 = v1035;
  v86 = v1036;
  if (v1035 != v1036)
  {
    v87 = v1035;
    do
    {
      v88 = *v87;
      v89 = *((_QWORD *)this + 1210);
      if (v88 < (*((_QWORD *)this + 1211) - v89) >> 3)
      {
        v90 = *(_QWORD *)(v89 + 8 * v88);
        v91 = v90 && HIDWORD(*v87) == HIDWORD(v90);
        if (v91 && *((_QWORD *)this + 1213) + 40 * v90 != *((_QWORD *)this + 1214))
        {
          v92 = *(_QWORD *)(*((_QWORD *)this + 1216) + 8 * v90);
          v1032 = v92 | ((unint64_t)*(unsigned int *)(v89 + 8 * v92 + 4) << 32);
          geo::packed_array<md::ColorRampDataStorage,geo::handle<md::ColorRampData>>::erase((uint64_t)this + 9656, &v1032);
        }
      }
      ++v87;
    }
    while (v87 != v86);
  }
  if (v85)
    operator delete(v85);
  if (v77)
    operator delete(v77);
  for (k = *((_QWORD *)this + 57); k != *((_QWORD *)this + 56); *((_QWORD *)this + 48) = v94)
  {
    v96 = *(_QWORD *)(k - 8);
    k -= 8;
    v95 = v96;
    v97 = *((_QWORD *)this + 50);
    v98 = *((_QWORD *)this + 51) - v97;
    v99 = v97 + 8 * v96;
    v100 = (unint64_t)*(unsigned int *)(v99 + 4) << 32;
    *(_DWORD *)(v99 + 4) = (v100 + 0x100000000) >> 32;
    *(_QWORD *)(*((_QWORD *)this + 50) + 8 * v96) = v100 & 0xFFFFFFFF00000000 | (v98 >> 3);
    v102 = (char *)*((_QWORD *)this + 48);
    v101 = *((_QWORD *)this + 49);
    if ((unint64_t)v102 < v101)
    {
      *(_QWORD *)v102 = v95;
      v94 = v102 + 8;
    }
    else
    {
      v103 = (char *)*((_QWORD *)this + 47);
      v104 = (v102 - v103) >> 3;
      v105 = v104 + 1;
      if ((unint64_t)(v104 + 1) >> 61)
LABEL_2012:
        abort();
      v106 = v101 - (_QWORD)v103;
      if (v106 >> 2 > v105)
        v105 = v106 >> 2;
      if ((unint64_t)v106 >= 0x7FFFFFFFFFFFFFF8)
        v107 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v107 = v105;
      if (v107)
      {
        if (v107 >> 61)
LABEL_2013:
          std::__throw_bad_array_new_length[abi:nn180100]();
        v108 = operator new(8 * v107);
      }
      else
      {
        v108 = 0;
      }
      v109 = &v108[8 * v104];
      *v109 = v95;
      v94 = v109 + 1;
      if (v102 != v103)
      {
        v110 = v102 - 8 - v103;
        if (v110 < 0x58)
          goto LABEL_2016;
        if ((unint64_t)(v103 - v108) < 0x20)
          goto LABEL_2016;
        v111 = (v110 >> 3) + 1;
        v112 = &v108[8 * v104 - 16];
        v113 = v102 - 16;
        v114 = v111 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v115 = *(_OWORD *)v113;
          *(v112 - 1) = *((_OWORD *)v113 - 1);
          *v112 = v115;
          v112 -= 2;
          v113 -= 32;
          v114 -= 4;
        }
        while (v114);
        v109 -= v111 & 0x3FFFFFFFFFFFFFFCLL;
        v102 -= 8 * (v111 & 0x3FFFFFFFFFFFFFFCLL);
        if (v111 != (v111 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_2016:
          do
          {
            v116 = *((_QWORD *)v102 - 1);
            v102 -= 8;
            *--v109 = v116;
          }
          while (v102 != v103);
        }
      }
      *((_QWORD *)this + 47) = v109;
      *((_QWORD *)this + 48) = v94;
      *((_QWORD *)this + 49) = &v108[8 * v107];
      if (v103)
        operator delete(v103);
    }
  }
  *((_QWORD *)this + 57) = k;
  *((_QWORD *)this + 54) = *((_QWORD *)this + 53);
  if (*((_QWORD *)this + 40))
  {
    v117 = (_QWORD *)*((_QWORD *)this + 39);
    if (v117)
    {
      do
      {
        v118 = (_QWORD *)*v117;
        operator delete(v117);
        v117 = v118;
      }
      while (v118);
    }
    *((_QWORD *)this + 39) = 0;
    v119 = *((_QWORD *)this + 38);
    if (v119)
    {
      for (m = 0; m != v119; ++m)
        *(_QWORD *)(*((_QWORD *)this + 37) + 8 * m) = 0;
    }
    *((_QWORD *)this + 40) = 0;
  }
  if (*((_QWORD *)this + 45))
  {
    v121 = (_QWORD *)*((_QWORD *)this + 44);
    if (v121)
    {
      do
      {
        v122 = (_QWORD *)*v121;
        operator delete(v121);
        v121 = v122;
      }
      while (v122);
    }
    *((_QWORD *)this + 44) = 0;
    v123 = *((_QWORD *)this + 43);
    if (v123)
    {
      for (n = 0; n != v123; ++n)
        *(_QWORD *)(*((_QWORD *)this + 42) + 8 * n) = 0;
    }
    *((_QWORD *)this + 45) = 0;
  }
  for (ii = *((_QWORD *)this + 79); ii != *((_QWORD *)this + 78); *((_QWORD *)this + 70) = v126)
  {
    v128 = *(_QWORD *)(ii - 8);
    ii -= 8;
    v127 = v128;
    v129 = *((_QWORD *)this + 72);
    v130 = *((_QWORD *)this + 73) - v129;
    v131 = v129 + 8 * v128;
    v132 = (unint64_t)*(unsigned int *)(v131 + 4) << 32;
    *(_DWORD *)(v131 + 4) = (v132 + 0x100000000) >> 32;
    *(_QWORD *)(*((_QWORD *)this + 72) + 8 * v128) = v132 & 0xFFFFFFFF00000000 | (v130 >> 3);
    v133 = (char *)*((_QWORD *)this + 70);
    v134 = *((_QWORD *)this + 71);
    if ((unint64_t)v133 < v134)
    {
      *(_QWORD *)v133 = v127;
      v126 = v133 + 8;
    }
    else
    {
      v135 = (char *)*((_QWORD *)this + 69);
      v136 = (v133 - v135) >> 3;
      v137 = v136 + 1;
      if ((unint64_t)(v136 + 1) >> 61)
        goto LABEL_2012;
      v138 = v134 - (_QWORD)v135;
      if (v138 >> 2 > v137)
        v137 = v138 >> 2;
      if ((unint64_t)v138 >= 0x7FFFFFFFFFFFFFF8)
        v139 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v139 = v137;
      if (v139)
      {
        if (v139 >> 61)
          goto LABEL_2013;
        v140 = operator new(8 * v139);
      }
      else
      {
        v140 = 0;
      }
      v141 = &v140[8 * v136];
      *v141 = v127;
      v126 = v141 + 1;
      if (v133 != v135)
      {
        v142 = v133 - 8 - v135;
        if (v142 < 0x58)
          goto LABEL_2017;
        if ((unint64_t)(v135 - v140) < 0x20)
          goto LABEL_2017;
        v143 = (v142 >> 3) + 1;
        v144 = &v140[8 * v136 - 16];
        v145 = v133 - 16;
        v146 = v143 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v147 = *(_OWORD *)v145;
          *(v144 - 1) = *((_OWORD *)v145 - 1);
          *v144 = v147;
          v144 -= 2;
          v145 -= 32;
          v146 -= 4;
        }
        while (v146);
        v141 -= v143 & 0x3FFFFFFFFFFFFFFCLL;
        v133 -= 8 * (v143 & 0x3FFFFFFFFFFFFFFCLL);
        if (v143 != (v143 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_2017:
          do
          {
            v148 = *((_QWORD *)v133 - 1);
            v133 -= 8;
            *--v141 = v148;
          }
          while (v133 != v135);
        }
      }
      *((_QWORD *)this + 69) = v141;
      *((_QWORD *)this + 70) = v126;
      *((_QWORD *)this + 71) = &v140[8 * v139];
      if (v135)
        operator delete(v135);
    }
  }
  *((_QWORD *)this + 79) = ii;
  v149 = *((_QWORD *)this + 76);
  v150 = *((_QWORD *)this + 75);
  while (v149 != v150)
  {
    v151 = *(std::__shared_weak_count **)(v149 - 8);
    if (v151)
    {
      p_shared_owners = (unint64_t *)&v151->__shared_owners_;
      do
        v153 = __ldaxr(p_shared_owners);
      while (__stlxr(v153 - 1, p_shared_owners));
      if (!v153)
      {
        ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
        std::__shared_weak_count::__release_weak(v151);
      }
    }
    v149 -= 16;
  }
  *((_QWORD *)this + 76) = v150;
  if (*((_QWORD *)this + 62))
  {
    v154 = (_QWORD *)*((_QWORD *)this + 61);
    if (v154)
    {
      do
      {
        v155 = (_QWORD *)*v154;
        operator delete(v154);
        v154 = v155;
      }
      while (v155);
    }
    *((_QWORD *)this + 61) = 0;
    v156 = *((_QWORD *)this + 60);
    if (v156)
    {
      for (jj = 0; jj != v156; ++jj)
        *(_QWORD *)(*((_QWORD *)this + 59) + 8 * jj) = 0;
    }
    *((_QWORD *)this + 62) = 0;
  }
  if (*((_QWORD *)this + 67))
  {
    v158 = (_QWORD *)*((_QWORD *)this + 66);
    if (v158)
    {
      do
      {
        v159 = (_QWORD *)*v158;
        operator delete(v158);
        v158 = v159;
      }
      while (v159);
    }
    *((_QWORD *)this + 66) = 0;
    v160 = *((_QWORD *)this + 65);
    if (v160)
    {
      for (kk = 0; kk != v160; ++kk)
        *(_QWORD *)(*((_QWORD *)this + 64) + 8 * kk) = 0;
    }
    *((_QWORD *)this + 67) = 0;
  }
  __p = 0;
  v1039 = 0;
  v1040 = 0;
  v1035 = 0;
  v1036 = 0;
  v1037 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 81, (uint64_t)&__p);
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 86, (uint64_t)&v1035);
  v162 = __p;
  v163 = v1039;
  if (__p != v1039)
  {
    v164 = __p;
    do
    {
      v165 = *v164;
      v166 = *((_QWORD *)this + 94);
      if (v165 < (*((_QWORD *)this + 95) - v166) >> 3)
      {
        v167 = *(_QWORD *)(v166 + 8 * v165);
        v168 = v167 && HIDWORD(*v164) == HIDWORD(v167);
        if (v168 && *((_QWORD *)this + 97) + 8 * v167 != *((_QWORD *)this + 98))
        {
          v169 = *(_QWORD *)(*((_QWORD *)this + 100) + 8 * v167);
          v1032 = v169 | ((unint64_t)*(unsigned int *)(v166 + 8 * v169 + 4) << 32);
          geo::packed_array<md::ls::ZIndex,geo::handle<md::ls::ZIndex>>::erase((uint64_t)this + 728, &v1032);
        }
      }
      ++v164;
    }
    while (v164 != v163);
  }
  v170 = v1035;
  v171 = v1036;
  if (v1035 != v1036)
  {
    v172 = v1035;
    do
    {
      v173 = *v172;
      v174 = *((_QWORD *)this + 94);
      if (v173 < (*((_QWORD *)this + 95) - v174) >> 3)
      {
        v175 = *(_QWORD *)(v174 + 8 * v173);
        v176 = v175 && HIDWORD(*v172) == HIDWORD(v175);
        if (v176 && *((_QWORD *)this + 97) + 8 * v175 != *((_QWORD *)this + 98))
        {
          v177 = *(_QWORD *)(*((_QWORD *)this + 100) + 8 * v175);
          v1032 = v177 | ((unint64_t)*(unsigned int *)(v174 + 8 * v177 + 4) << 32);
          geo::packed_array<md::ls::ZIndex,geo::handle<md::ls::ZIndex>>::erase((uint64_t)this + 728, &v1032);
        }
      }
      ++v172;
    }
    while (v172 != v171);
  }
  if (v170)
    operator delete(v170);
  if (v162)
    operator delete(v162);
  __p = 0;
  v1039 = 0;
  v1040 = 0;
  v1035 = 0;
  v1036 = 0;
  v1037 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 367, (uint64_t)&__p);
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 372, (uint64_t)&v1035);
  v178 = (unint64_t *)__p;
  v179 = v1039;
  if (__p != v1039)
  {
    v180 = (unint64_t *)__p;
    do
    {
      v181 = *v180;
      v182 = *((_QWORD *)this + 380);
      if (v181 < (*((_QWORD *)this + 381) - v182) >> 3)
      {
        v183 = *(_QWORD *)(v182 + 8 * v181);
        v184 = v183 && HIDWORD(*v180) == HIDWORD(v183);
        if (v184 && *((_QWORD *)this + 383) + 24 * v183 != *((_QWORD *)this + 384))
        {
          v185 = *(_QWORD *)(*((_QWORD *)this + 386) + 8 * v183);
          v1032 = v185 | ((unint64_t)*(unsigned int *)(v182 + 8 * v185 + 4) << 32);
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 3016, &v1032);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>>>::__erase_unique<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>((uint64_t *)this + 389, *v180);
        }
      }
      ++v180;
    }
    while (v180 != v179);
  }
  v186 = v1035;
  v187 = v1036;
  if (v1035 != v1036)
  {
    v188 = v1035;
    do
    {
      v189 = *v188;
      v190 = *((_QWORD *)this + 380);
      if (v189 < (*((_QWORD *)this + 381) - v190) >> 3)
      {
        v191 = *(_QWORD *)(v190 + 8 * v189);
        v192 = v191 && HIDWORD(*v188) == HIDWORD(v191);
        if (v192 && *((_QWORD *)this + 383) + 24 * v191 != *((_QWORD *)this + 384))
        {
          v193 = *(_QWORD *)(*((_QWORD *)this + 386) + 8 * v191);
          v1032 = v193 | ((unint64_t)*(unsigned int *)(v190 + 8 * v193 + 4) << 32);
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 3016, &v1032);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>>>::__erase_unique<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>((uint64_t *)this + 389, *v188);
        }
      }
      ++v188;
    }
    while (v188 != v187);
  }
  if (v178 != v179)
  {
    v194 = *(int8x8_t *)((char *)this + 3200);
    if (v194)
    {
      v195 = v178;
LABEL_284:
      v196 = *v195;
      v197 = (uint8x8_t)vcnt_s8(v194);
      v197.i16[0] = vaddlv_u8(v197);
      if (v197.u32[0] > 1uLL)
      {
        v198 = *v195;
        if (v196 >= *(_QWORD *)&v194)
          v198 = v196 % *(_QWORD *)&v194;
      }
      else
      {
        v198 = (*(_QWORD *)&v194 - 1) & v196;
      }
      v199 = *(uint64_t ***)(*((_QWORD *)this + 399) + 8 * v198);
      if (v199)
      {
        v200 = *v199;
        if (*v199)
        {
          if (v197.u32[0] < 2uLL)
          {
            v201 = *(_QWORD *)&v194 - 1;
            while (1)
            {
              v203 = v200[1];
              if (v203 == v196)
              {
                if (v200[2] == v196)
                  goto LABEL_304;
              }
              else if ((v203 & v201) != v198)
              {
                goto LABEL_305;
              }
              v200 = (uint64_t *)*v200;
              if (!v200)
                goto LABEL_305;
            }
          }
          do
          {
            v202 = v200[1];
            if (v202 == v196)
            {
              if (v200[2] == v196)
              {
LABEL_304:
                std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__erase_unique<unsigned char>((uint64_t *)this + 394, *((_BYTE *)v200 + 24));
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 399, v200[2]);
                break;
              }
            }
            else
            {
              if (v202 >= *(_QWORD *)&v194)
                v202 %= *(_QWORD *)&v194;
              if (v202 != v198)
                break;
            }
            v200 = (uint64_t *)*v200;
          }
          while (v200);
        }
      }
LABEL_305:
      while (++v195 != v179)
      {
        v194 = *(int8x8_t *)((char *)this + 3200);
        if (v194)
          goto LABEL_284;
      }
    }
  }
  if (v186 != v187)
  {
    v204 = *(int8x8_t *)((char *)this + 3200);
    if (v204)
    {
      v205 = v186;
LABEL_311:
      v206 = *v205;
      v207 = (uint8x8_t)vcnt_s8(v204);
      v207.i16[0] = vaddlv_u8(v207);
      if (v207.u32[0] > 1uLL)
      {
        v208 = *v205;
        if (v206 >= *(_QWORD *)&v204)
          v208 = v206 % *(_QWORD *)&v204;
      }
      else
      {
        v208 = (*(_QWORD *)&v204 - 1) & v206;
      }
      v209 = *(uint64_t ***)(*((_QWORD *)this + 399) + 8 * v208);
      if (v209)
      {
        v210 = *v209;
        if (*v209)
        {
          if (v207.u32[0] < 2uLL)
          {
            v211 = *(_QWORD *)&v204 - 1;
            while (1)
            {
              v213 = v210[1];
              if (v213 == v206)
              {
                if (v210[2] == v206)
                  goto LABEL_331;
              }
              else if ((v213 & v211) != v208)
              {
                goto LABEL_332;
              }
              v210 = (uint64_t *)*v210;
              if (!v210)
                goto LABEL_332;
            }
          }
          do
          {
            v212 = v210[1];
            if (v212 == v206)
            {
              if (v210[2] == v206)
              {
LABEL_331:
                std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__erase_unique<unsigned char>((uint64_t *)this + 394, *((_BYTE *)v210 + 24));
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 399, v210[2]);
                break;
              }
            }
            else
            {
              if (v212 >= *(_QWORD *)&v204)
                v212 %= *(_QWORD *)&v204;
              if (v212 != v208)
                break;
            }
            v210 = (uint64_t *)*v210;
          }
          while (v210);
        }
      }
LABEL_332:
      while (++v205 != v187)
      {
        v204 = *(int8x8_t *)((char *)this + 3200);
        if (v204)
          goto LABEL_311;
      }
    }
  }
  if (v186)
    operator delete(v186);
  if (v178)
    operator delete(v178);
  __p = 0;
  v1039 = 0;
  v1040 = 0;
  v1035 = 0;
  v1036 = 0;
  v1037 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 1065, (uint64_t)&__p);
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 1070, (uint64_t)&v1035);
  v214 = __p;
  v215 = v1039;
  if (__p != v1039)
  {
    v216 = __p;
    do
    {
      v217 = *v216;
      v218 = *((_QWORD *)this + 1078);
      if (v217 < (*((_QWORD *)this + 1079) - v218) >> 3)
      {
        v219 = *(_QWORD *)(v218 + 8 * v217);
        v220 = v219 && HIDWORD(*v216) == HIDWORD(v219);
        if (v220 && *((_QWORD *)this + 1081) + v219 != *((_QWORD *)this + 1082))
        {
          v221 = *(_QWORD *)(*((_QWORD *)this + 1084) + 8 * v219);
          v1032 = v221 | ((unint64_t)*(unsigned int *)(v218 + 8 * v221 + 4) << 32);
          geo::packed_array<md::LayerTypeStorage,geo::handle<md::LayerType>>::erase((uint64_t)this + 8600, &v1032);
        }
      }
      ++v216;
    }
    while (v216 != v215);
  }
  v222 = v1035;
  v223 = v1036;
  if (v1035 != v1036)
  {
    v224 = v1035;
    do
    {
      v225 = *v224;
      v226 = *((_QWORD *)this + 1078);
      if (v225 < (*((_QWORD *)this + 1079) - v226) >> 3)
      {
        v227 = *(_QWORD *)(v226 + 8 * v225);
        v228 = v227 && HIDWORD(*v224) == HIDWORD(v227);
        if (v228 && *((_QWORD *)this + 1081) + v227 != *((_QWORD *)this + 1082))
        {
          v229 = *(_QWORD *)(*((_QWORD *)this + 1084) + 8 * v227);
          v1032 = v229 | ((unint64_t)*(unsigned int *)(v226 + 8 * v229 + 4) << 32);
          geo::packed_array<md::LayerTypeStorage,geo::handle<md::LayerType>>::erase((uint64_t)this + 8600, &v1032);
        }
      }
      ++v224;
    }
    while (v224 != v223);
  }
  if (v222)
    operator delete(v222);
  if (v214)
    operator delete(v214);
  __p = 0;
  v1039 = 0;
  v1040 = 0;
  v1035 = 0;
  v1036 = 0;
  v1037 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 1087, (uint64_t)&__p);
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 1092, (uint64_t)&v1035);
  v230 = __p;
  v231 = v1039;
  if (__p != v1039)
  {
    v232 = __p;
    do
    {
      v233 = *v232;
      v234 = *((_QWORD *)this + 1100);
      if (v233 < (*((_QWORD *)this + 1101) - v234) >> 3)
      {
        v235 = *(_QWORD *)(v234 + 8 * v233);
        v236 = v235 && HIDWORD(*v232) == HIDWORD(v235);
        if (v236 && *((_QWORD *)this + 1103) + v235 != *((_QWORD *)this + 1104))
        {
          v237 = *(_QWORD *)(*((_QWORD *)this + 1106) + 8 * v235);
          v1032 = v237 | ((unint64_t)*(unsigned int *)(v234 + 8 * v237 + 4) << 32);
          geo::packed_array<md::LayerTypeStorage,geo::handle<md::LayerType>>::erase((uint64_t)this + 8776, &v1032);
        }
      }
      ++v232;
    }
    while (v232 != v231);
  }
  v238 = v1035;
  v239 = v1036;
  if (v1035 != v1036)
  {
    v240 = v1035;
    do
    {
      v241 = *v240;
      v242 = *((_QWORD *)this + 1100);
      if (v241 < (*((_QWORD *)this + 1101) - v242) >> 3)
      {
        v243 = *(_QWORD *)(v242 + 8 * v241);
        v244 = v243 && HIDWORD(*v240) == HIDWORD(v243);
        if (v244 && *((_QWORD *)this + 1103) + v243 != *((_QWORD *)this + 1104))
        {
          v245 = *(_QWORD *)(*((_QWORD *)this + 1106) + 8 * v243);
          v1032 = v245 | ((unint64_t)*(unsigned int *)(v242 + 8 * v245 + 4) << 32);
          geo::packed_array<md::LayerTypeStorage,geo::handle<md::LayerType>>::erase((uint64_t)this + 8776, &v1032);
        }
      }
      ++v240;
    }
    while (v240 != v239);
  }
  if (v238)
    operator delete(v238);
  if (v230)
    operator delete(v230);
  __p = 0;
  v1039 = 0;
  v1040 = 0;
  v1035 = 0;
  v1036 = 0;
  v1037 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 1109, (uint64_t)&__p);
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 1114, (uint64_t)&v1035);
  v246 = __p;
  v247 = v1039;
  if (__p != v1039)
  {
    v248 = __p;
    do
    {
      v249 = *v248;
      v250 = *((_QWORD *)this + 1122);
      if (v249 < (*((_QWORD *)this + 1123) - v250) >> 3)
      {
        v251 = *(_QWORD *)(v250 + 8 * v249);
        v252 = v251 && HIDWORD(*v248) == HIDWORD(v251);
        if (v252 && *((_QWORD *)this + 1125) + 2 * v251 != *((_QWORD *)this + 1126))
        {
          v253 = *(_QWORD *)(*((_QWORD *)this + 1128) + 8 * v251);
          v1032 = v253 | ((unint64_t)*(unsigned int *)(v250 + 8 * v253 + 4) << 32);
          geo::packed_array<md::MapDataTypeStorage,geo::handle<md::MapDataType>>::erase((uint64_t)this + 8952, &v1032);
        }
      }
      ++v248;
    }
    while (v248 != v247);
  }
  v254 = v1035;
  v255 = v1036;
  if (v1035 != v1036)
  {
    v256 = v1035;
    do
    {
      v257 = *v256;
      v258 = *((_QWORD *)this + 1122);
      if (v257 < (*((_QWORD *)this + 1123) - v258) >> 3)
      {
        v259 = *(_QWORD *)(v258 + 8 * v257);
        v260 = v259 && HIDWORD(*v256) == HIDWORD(v259);
        if (v260 && *((_QWORD *)this + 1125) + 2 * v259 != *((_QWORD *)this + 1126))
        {
          v261 = *(_QWORD *)(*((_QWORD *)this + 1128) + 8 * v259);
          v1032 = v261 | ((unint64_t)*(unsigned int *)(v258 + 8 * v261 + 4) << 32);
          geo::packed_array<md::MapDataTypeStorage,geo::handle<md::MapDataType>>::erase((uint64_t)this + 8952, &v1032);
        }
      }
      ++v256;
    }
    while (v256 != v255);
  }
  if (v254)
    operator delete(v254);
  if (v246)
    operator delete(v246);
  __p = 0;
  v1039 = 0;
  v1040 = 0;
  v1035 = 0;
  v1036 = 0;
  v1037 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 404, (uint64_t)&__p);
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 409, (uint64_t)&v1035);
  v262 = __p;
  v263 = v1039;
  if (__p != v1039)
  {
    v264 = __p;
    do
    {
      v265 = *v264;
      v266 = *((_QWORD *)this + 417);
      if (v265 < (*((_QWORD *)this + 418) - v266) >> 3)
      {
        v267 = *(_QWORD *)(v266 + 8 * v265);
        v268 = v267 && HIDWORD(*v264) == HIDWORD(v267);
        if (v268 && *((_QWORD *)this + 420) + 24 * v267 != *((_QWORD *)this + 421))
        {
          v269 = *(_QWORD *)(*((_QWORD *)this + 423) + 8 * v267);
          v1032 = v269 | ((unint64_t)*(unsigned int *)(v266 + 8 * v269 + 4) << 32);
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 3312, &v1032);
        }
      }
      ++v264;
    }
    while (v264 != v263);
  }
  v270 = v1035;
  v271 = v1036;
  if (v1035 != v1036)
  {
    v272 = v1035;
    do
    {
      v273 = *v272;
      v274 = *((_QWORD *)this + 417);
      if (v273 < (*((_QWORD *)this + 418) - v274) >> 3)
      {
        v275 = *(_QWORD *)(v274 + 8 * v273);
        v276 = v275 && HIDWORD(*v272) == HIDWORD(v275);
        if (v276 && *((_QWORD *)this + 420) + 24 * v275 != *((_QWORD *)this + 421))
        {
          v277 = *(_QWORD *)(*((_QWORD *)this + 423) + 8 * v275);
          v1032 = v277 | ((unint64_t)*(unsigned int *)(v274 + 8 * v277 + 4) << 32);
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 3312, &v1032);
        }
      }
      ++v272;
    }
    while (v272 != v271);
  }
  if (v270)
    operator delete(v270);
  if (v262)
    operator delete(v262);
  __p = 0;
  v1039 = 0;
  v1040 = 0;
  v1035 = 0;
  v1036 = 0;
  v1037 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 426, (uint64_t)&__p);
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 431, (uint64_t)&v1035);
  v278 = __p;
  v279 = v1039;
  if (__p != v1039)
  {
    v280 = __p;
    do
    {
      v281 = *v280;
      v282 = *((_QWORD *)this + 439);
      if (v281 < (*((_QWORD *)this + 440) - v282) >> 3)
      {
        v283 = *(_QWORD *)(v282 + 8 * v281);
        v284 = v283 && HIDWORD(*v280) == HIDWORD(v283);
        if (v284 && *((_QWORD *)this + 442) + 24 * v283 != *((_QWORD *)this + 443))
        {
          v285 = *(_QWORD *)(*((_QWORD *)this + 445) + 8 * v283);
          v1032 = v285 | ((unint64_t)*(unsigned int *)(v282 + 8 * v285 + 4) << 32);
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 3488, &v1032);
        }
      }
      ++v280;
    }
    while (v280 != v279);
  }
  v286 = v1035;
  v287 = v1036;
  if (v1035 != v1036)
  {
    v288 = v1035;
    do
    {
      v289 = *v288;
      v290 = *((_QWORD *)this + 439);
      if (v289 < (*((_QWORD *)this + 440) - v290) >> 3)
      {
        v291 = *(_QWORD *)(v290 + 8 * v289);
        v292 = v291 && HIDWORD(*v288) == HIDWORD(v291);
        if (v292 && *((_QWORD *)this + 442) + 24 * v291 != *((_QWORD *)this + 443))
        {
          v293 = *(_QWORD *)(*((_QWORD *)this + 445) + 8 * v291);
          v1032 = v293 | ((unint64_t)*(unsigned int *)(v290 + 8 * v293 + 4) << 32);
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 3488, &v1032);
        }
      }
      ++v288;
    }
    while (v288 != v287);
  }
  if (v286)
    operator delete(v286);
  if (v278)
    operator delete(v278);
  __p = 0;
  v1039 = 0;
  v1040 = 0;
  v1035 = 0;
  v1036 = 0;
  v1037 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 448, (uint64_t)&__p);
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 453, (uint64_t)&v1035);
  v294 = __p;
  v295 = v1039;
  if (__p != v1039)
  {
    v296 = __p;
    do
    {
      v297 = *v296;
      v298 = *((_QWORD *)this + 461);
      if (v297 < (*((_QWORD *)this + 462) - v298) >> 3)
      {
        v299 = *(_QWORD *)(v298 + 8 * v297);
        v300 = v299 && HIDWORD(*v296) == HIDWORD(v299);
        if (v300 && *((_QWORD *)this + 464) + 24 * v299 != *((_QWORD *)this + 465))
        {
          v301 = *(_QWORD *)(*((_QWORD *)this + 467) + 8 * v299);
          v1032 = v301 | ((unint64_t)*(unsigned int *)(v298 + 8 * v301 + 4) << 32);
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 3664, &v1032);
        }
      }
      ++v296;
    }
    while (v296 != v295);
  }
  v302 = v1035;
  v303 = v1036;
  if (v1035 != v1036)
  {
    v304 = v1035;
    do
    {
      v305 = *v304;
      v306 = *((_QWORD *)this + 461);
      if (v305 < (*((_QWORD *)this + 462) - v306) >> 3)
      {
        v307 = *(_QWORD *)(v306 + 8 * v305);
        v308 = v307 && HIDWORD(*v304) == HIDWORD(v307);
        if (v308 && *((_QWORD *)this + 464) + 24 * v307 != *((_QWORD *)this + 465))
        {
          v309 = *(_QWORD *)(*((_QWORD *)this + 467) + 8 * v307);
          v1032 = v309 | ((unint64_t)*(unsigned int *)(v306 + 8 * v309 + 4) << 32);
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 3664, &v1032);
        }
      }
      ++v304;
    }
    while (v304 != v303);
  }
  if (v302)
    operator delete(v302);
  if (v294)
    operator delete(v294);
  __p = 0;
  v1039 = 0;
  v1040 = 0;
  v1035 = 0;
  v1036 = 0;
  v1037 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 470, (uint64_t)&__p);
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 475, (uint64_t)&v1035);
  v310 = __p;
  v311 = v1039;
  if (__p != v1039)
  {
    v312 = __p;
    do
    {
      v313 = *v312;
      v314 = *((_QWORD *)this + 483);
      if (v313 < (*((_QWORD *)this + 484) - v314) >> 3)
      {
        v315 = *(_QWORD *)(v314 + 8 * v313);
        v316 = v315 && HIDWORD(*v312) == HIDWORD(v315);
        if (v316 && *((_QWORD *)this + 486) + 24 * v315 != *((_QWORD *)this + 487))
        {
          v317 = *(_QWORD *)(*((_QWORD *)this + 489) + 8 * v315);
          v1032 = v317 | ((unint64_t)*(unsigned int *)(v314 + 8 * v317 + 4) << 32);
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 3840, &v1032);
        }
      }
      ++v312;
    }
    while (v312 != v311);
  }
  v318 = v1035;
  v319 = v1036;
  if (v1035 != v1036)
  {
    v320 = v1035;
    do
    {
      v321 = *v320;
      v322 = *((_QWORD *)this + 483);
      if (v321 < (*((_QWORD *)this + 484) - v322) >> 3)
      {
        v323 = *(_QWORD *)(v322 + 8 * v321);
        v324 = v323 && HIDWORD(*v320) == HIDWORD(v323);
        if (v324 && *((_QWORD *)this + 486) + 24 * v323 != *((_QWORD *)this + 487))
        {
          v325 = *(_QWORD *)(*((_QWORD *)this + 489) + 8 * v323);
          v1032 = v325 | ((unint64_t)*(unsigned int *)(v322 + 8 * v325 + 4) << 32);
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 3840, &v1032);
        }
      }
      ++v320;
    }
    while (v320 != v319);
  }
  if (v318)
    operator delete(v318);
  if (v310)
    operator delete(v310);
  __p = 0;
  v1039 = 0;
  v1040 = 0;
  v1035 = 0;
  v1036 = 0;
  v1037 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 492, (uint64_t)&__p);
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 497, (uint64_t)&v1035);
  v326 = __p;
  v327 = v1039;
  if (__p != v1039)
  {
    v328 = __p;
    do
    {
      v329 = *v328;
      v330 = *((_QWORD *)this + 505);
      if (v329 < (*((_QWORD *)this + 506) - v330) >> 3)
      {
        v331 = *(_QWORD *)(v330 + 8 * v329);
        v332 = v331 && HIDWORD(*v328) == HIDWORD(v331);
        if (v332 && *((_QWORD *)this + 508) + 24 * v331 != *((_QWORD *)this + 509))
        {
          v333 = *(_QWORD *)(*((_QWORD *)this + 511) + 8 * v331);
          v1032 = v333 | ((unint64_t)*(unsigned int *)(v330 + 8 * v333 + 4) << 32);
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 4016, &v1032);
        }
      }
      ++v328;
    }
    while (v328 != v327);
  }
  v334 = v1035;
  v335 = v1036;
  if (v1035 != v1036)
  {
    v336 = v1035;
    do
    {
      v337 = *v336;
      v338 = *((_QWORD *)this + 505);
      if (v337 < (*((_QWORD *)this + 506) - v338) >> 3)
      {
        v339 = *(_QWORD *)(v338 + 8 * v337);
        v340 = v339 && HIDWORD(*v336) == HIDWORD(v339);
        if (v340 && *((_QWORD *)this + 508) + 24 * v339 != *((_QWORD *)this + 509))
        {
          v341 = *(_QWORD *)(*((_QWORD *)this + 511) + 8 * v339);
          v1032 = v341 | ((unint64_t)*(unsigned int *)(v338 + 8 * v341 + 4) << 32);
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 4016, &v1032);
        }
      }
      ++v336;
    }
    while (v336 != v335);
  }
  if (v334)
    operator delete(v334);
  if (v326)
    operator delete(v326);
  v1035 = 0;
  v1036 = 0;
  v1037 = 0;
  v1032 = 0;
  v1033 = 0;
  v1034 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 293, (uint64_t)&v1035);
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 298, (uint64_t)&v1032);
  v342 = v1035;
  v343 = v1036;
  if (v1035 != v1036)
  {
    v344 = v1035;
    do
    {
      v345 = *v344;
      v346 = *((_QWORD *)this + 306);
      if (v345 < (*((_QWORD *)this + 307) - v346) >> 3)
      {
        v347 = *(_QWORD *)(v346 + 8 * v345);
        v348 = v347 && HIDWORD(*v344) == HIDWORD(v347);
        if (v348 && *((_QWORD *)this + 309) + 24 * v347 != *((_QWORD *)this + 310))
        {
          v349 = *(_QWORD *)(*((_QWORD *)this + 312) + 8 * v347);
          __p = (void *)(v349 | ((unint64_t)*(unsigned int *)(v346 + 8 * v349 + 4) << 32));
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 2424, &__p);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>>>::__erase_unique<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>((uint64_t *)this + 315, *v344);
        }
      }
      ++v344;
    }
    while (v344 != v343);
  }
  v350 = (unint64_t *)v1032;
  v351 = v1033;
  if ((unint64_t *)v1032 != v1033)
  {
    v352 = (unint64_t *)v1032;
    do
    {
      v353 = *v352;
      v354 = *((_QWORD *)this + 306);
      if (v353 < (*((_QWORD *)this + 307) - v354) >> 3)
      {
        v355 = *(_QWORD *)(v354 + 8 * v353);
        v356 = v355 && HIDWORD(*v352) == HIDWORD(v355);
        if (v356 && *((_QWORD *)this + 309) + 24 * v355 != *((_QWORD *)this + 310))
        {
          v357 = *(_QWORD *)(*((_QWORD *)this + 312) + 8 * v355);
          __p = (void *)(v357 | ((unint64_t)*(unsigned int *)(v354 + 8 * v357 + 4) << 32));
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 2424, &__p);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>>>::__erase_unique<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>((uint64_t *)this + 315, *v352);
        }
      }
      ++v352;
    }
    while (v352 != v351);
  }
  if (v342 != v343)
  {
    v358 = *(int8x8_t *)((char *)this + 2608);
    if (v358)
    {
      v359 = v342;
LABEL_572:
      v360 = *v359;
      v361 = (uint8x8_t)vcnt_s8(v358);
      v361.i16[0] = vaddlv_u8(v361);
      if (v361.u32[0] > 1uLL)
      {
        v362 = *v359;
        if (v360 >= *(_QWORD *)&v358)
          v362 = v360 % *(_QWORD *)&v358;
      }
      else
      {
        v362 = (*(_QWORD *)&v358 - 1) & v360;
      }
      v363 = *(float ***)(*((_QWORD *)this + 325) + 8 * v362);
      if (v363)
      {
        v364 = *v363;
        if (*v363)
        {
          if (v361.u32[0] < 2uLL)
          {
            v365 = *(_QWORD *)&v358 - 1;
            while (1)
            {
              v367 = *((_QWORD *)v364 + 1);
              if (v367 == v360)
              {
                if (*((_QWORD *)v364 + 2) == v360)
                  goto LABEL_592;
              }
              else if ((v367 & v365) != v362)
              {
                goto LABEL_597;
              }
              v364 = *(float **)v364;
              if (!v364)
                goto LABEL_597;
            }
          }
          do
          {
            v366 = *((_QWORD *)v364 + 1);
            if (v366 == v360)
            {
              if (*((_QWORD *)v364 + 2) == v360)
              {
LABEL_592:
                v368 = std::__hash_table<std::__hash_value_type<md::StyleEmissiveColorCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>>,std::__unordered_map_hasher<md::StyleEmissiveColorCacheKey,std::__hash_value_type<md::StyleEmissiveColorCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>>,md::StyleEmissiveColorCacheKeyHasher,std::equal_to<md::StyleEmissiveColorCacheKey>,true>,std::__unordered_map_equal<md::StyleEmissiveColorCacheKey,std::__hash_value_type<md::StyleEmissiveColorCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>>,std::equal_to<md::StyleEmissiveColorCacheKey>,md::StyleEmissiveColorCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::StyleEmissiveColorCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>>>>::find<md::StyleEmissiveColorCacheKey>((_QWORD *)this + 320, v364 + 6);
                if (v368)
                {
                  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, (_QWORD *)this + 320, v368);
                  if (__p)
                    operator delete(__p);
                  v360 = *((_QWORD *)v364 + 2);
                }
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 325, v360);
                break;
              }
            }
            else
            {
              if (v366 >= *(_QWORD *)&v358)
                v366 %= *(_QWORD *)&v358;
              if (v366 != v362)
                break;
            }
            v364 = *(float **)v364;
          }
          while (v364);
        }
      }
LABEL_597:
      while (++v359 != v343)
      {
        v358 = *(int8x8_t *)((char *)this + 2608);
        if (v358)
          goto LABEL_572;
      }
    }
  }
  if (v350 != v351)
  {
    v369 = *(int8x8_t *)((char *)this + 2608);
    if (v369)
    {
      v370 = v350;
LABEL_603:
      v371 = *v370;
      v372 = (uint8x8_t)vcnt_s8(v369);
      v372.i16[0] = vaddlv_u8(v372);
      if (v372.u32[0] > 1uLL)
      {
        v373 = *v370;
        if (v371 >= *(_QWORD *)&v369)
          v373 = v371 % *(_QWORD *)&v369;
      }
      else
      {
        v373 = (*(_QWORD *)&v369 - 1) & v371;
      }
      v374 = *(float ***)(*((_QWORD *)this + 325) + 8 * v373);
      if (v374)
      {
        v375 = *v374;
        if (*v374)
        {
          if (v372.u32[0] < 2uLL)
          {
            v376 = *(_QWORD *)&v369 - 1;
            while (1)
            {
              v378 = *((_QWORD *)v375 + 1);
              if (v378 == v371)
              {
                if (*((_QWORD *)v375 + 2) == v371)
                  goto LABEL_623;
              }
              else if ((v378 & v376) != v373)
              {
                goto LABEL_628;
              }
              v375 = *(float **)v375;
              if (!v375)
                goto LABEL_628;
            }
          }
          do
          {
            v377 = *((_QWORD *)v375 + 1);
            if (v377 == v371)
            {
              if (*((_QWORD *)v375 + 2) == v371)
              {
LABEL_623:
                v379 = std::__hash_table<std::__hash_value_type<md::StyleEmissiveColorCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>>,std::__unordered_map_hasher<md::StyleEmissiveColorCacheKey,std::__hash_value_type<md::StyleEmissiveColorCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>>,md::StyleEmissiveColorCacheKeyHasher,std::equal_to<md::StyleEmissiveColorCacheKey>,true>,std::__unordered_map_equal<md::StyleEmissiveColorCacheKey,std::__hash_value_type<md::StyleEmissiveColorCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>>,std::equal_to<md::StyleEmissiveColorCacheKey>,md::StyleEmissiveColorCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::StyleEmissiveColorCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>>>>::find<md::StyleEmissiveColorCacheKey>((_QWORD *)this + 320, v375 + 6);
                if (v379)
                {
                  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, (_QWORD *)this + 320, v379);
                  if (__p)
                    operator delete(__p);
                  v371 = *((_QWORD *)v375 + 2);
                }
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 325, v371);
                break;
              }
            }
            else
            {
              if (v377 >= *(_QWORD *)&v369)
                v377 %= *(_QWORD *)&v369;
              if (v377 != v373)
                break;
            }
            v375 = *(float **)v375;
          }
          while (v375);
        }
      }
LABEL_628:
      while (++v370 != v351)
      {
        v369 = *(int8x8_t *)((char *)this + 2608);
        if (v369)
          goto LABEL_603;
      }
    }
  }
  if (v350)
    operator delete(v350);
  if (v342)
    operator delete(v342);
  __p = 0;
  v1039 = 0;
  v1040 = 0;
  v1035 = 0;
  v1036 = 0;
  v1037 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 330, (uint64_t)&__p);
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 335, (uint64_t)&v1035);
  v380 = (unint64_t *)__p;
  v381 = v1039;
  if (__p != v1039)
  {
    v382 = (unint64_t *)__p;
    do
    {
      v383 = *v382;
      v384 = *((_QWORD *)this + 343);
      if (v383 < (*((_QWORD *)this + 344) - v384) >> 3)
      {
        v385 = *(_QWORD *)(v384 + 8 * v383);
        v386 = v385 && HIDWORD(*v382) == HIDWORD(v385);
        if (v386 && *((_QWORD *)this + 346) + 24 * v385 != *((_QWORD *)this + 347))
        {
          v387 = *(_QWORD *)(*((_QWORD *)this + 349) + 8 * v385);
          v1032 = v387 | ((unint64_t)*(unsigned int *)(v384 + 8 * v387 + 4) << 32);
          geo::packed_array<md::CachedKey<md::StyleEmissiveColorCacheKey>,geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>>::erase((uint64_t)this + 2720, &v1032);
          std::__hash_table<std::__hash_value_type<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,std::unique_ptr<md::CachedKey<md::StyleEmissiveColorCacheKey>>>,std::__unordered_map_hasher<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,std::__hash_value_type<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,std::unique_ptr<md::CachedKey<md::StyleEmissiveColorCacheKey>>>,std::hash<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>>,std::equal_to<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>>,true>,std::__unordered_map_equal<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,std::__hash_value_type<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,std::unique_ptr<md::CachedKey<md::StyleEmissiveColorCacheKey>>>,std::equal_to<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>>,std::hash<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,std::unique_ptr<md::CachedKey<md::StyleEmissiveColorCacheKey>>>>>::__erase_unique<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>>((uint64_t *)this + 352, *v382);
        }
      }
      ++v382;
    }
    while (v382 != v381);
  }
  v388 = v1035;
  v389 = v1036;
  if (v1035 != v1036)
  {
    v390 = v1035;
    do
    {
      v391 = *v390;
      v392 = *((_QWORD *)this + 343);
      if (v391 < (*((_QWORD *)this + 344) - v392) >> 3)
      {
        v393 = *(_QWORD *)(v392 + 8 * v391);
        v394 = v393 && HIDWORD(*v390) == HIDWORD(v393);
        if (v394 && *((_QWORD *)this + 346) + 24 * v393 != *((_QWORD *)this + 347))
        {
          v395 = *(_QWORD *)(*((_QWORD *)this + 349) + 8 * v393);
          v1032 = v395 | ((unint64_t)*(unsigned int *)(v392 + 8 * v395 + 4) << 32);
          geo::packed_array<md::CachedKey<md::StyleEmissiveColorCacheKey>,geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>>::erase((uint64_t)this + 2720, &v1032);
          std::__hash_table<std::__hash_value_type<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,std::unique_ptr<md::CachedKey<md::StyleEmissiveColorCacheKey>>>,std::__unordered_map_hasher<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,std::__hash_value_type<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,std::unique_ptr<md::CachedKey<md::StyleEmissiveColorCacheKey>>>,std::hash<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>>,std::equal_to<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>>,true>,std::__unordered_map_equal<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,std::__hash_value_type<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,std::unique_ptr<md::CachedKey<md::StyleEmissiveColorCacheKey>>>,std::equal_to<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>>,std::hash<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,std::unique_ptr<md::CachedKey<md::StyleEmissiveColorCacheKey>>>>>::__erase_unique<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>>((uint64_t *)this + 352, *v390);
        }
      }
      ++v390;
    }
    while (v390 != v389);
  }
  if (v380 != v381)
  {
    v396 = *(int8x8_t *)((char *)this + 2904);
    if (v396)
    {
      v397 = v380;
LABEL_660:
      v398 = *v397;
      v399 = (uint8x8_t)vcnt_s8(v396);
      v399.i16[0] = vaddlv_u8(v399);
      if (v399.u32[0] > 1uLL)
      {
        v400 = *v397;
        if (v398 >= *(_QWORD *)&v396)
          v400 = v398 % *(_QWORD *)&v396;
      }
      else
      {
        v400 = (*(_QWORD *)&v396 - 1) & v398;
      }
      v401 = *(_QWORD **)(*((_QWORD *)this + 362) + 8 * v400);
      if (v401)
      {
        v402 = (_QWORD *)*v401;
        if (*v401)
        {
          if (v399.u32[0] < 2uLL)
          {
            v403 = *(_QWORD *)&v396 - 1;
            while (1)
            {
              v405 = v402[1];
              if (v405 == v398)
              {
                if (v402[2] == v398)
                  goto LABEL_680;
              }
              else if ((v405 & v403) != v400)
              {
                goto LABEL_681;
              }
              v402 = (_QWORD *)*v402;
              if (!v402)
                goto LABEL_681;
            }
          }
          do
          {
            v404 = v402[1];
            if (v404 == v398)
            {
              if (v402[2] == v398)
              {
LABEL_680:
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 357, v402[3]);
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 362, v402[2]);
                break;
              }
            }
            else
            {
              if (v404 >= *(_QWORD *)&v396)
                v404 %= *(_QWORD *)&v396;
              if (v404 != v400)
                break;
            }
            v402 = (_QWORD *)*v402;
          }
          while (v402);
        }
      }
LABEL_681:
      while (++v397 != v381)
      {
        v396 = *(int8x8_t *)((char *)this + 2904);
        if (v396)
          goto LABEL_660;
      }
    }
  }
  if (v388 != v389)
  {
    v406 = *(int8x8_t *)((char *)this + 2904);
    if (v406)
    {
      v407 = v388;
LABEL_687:
      v408 = *v407;
      v409 = (uint8x8_t)vcnt_s8(v406);
      v409.i16[0] = vaddlv_u8(v409);
      if (v409.u32[0] > 1uLL)
      {
        v410 = *v407;
        if (v408 >= *(_QWORD *)&v406)
          v410 = v408 % *(_QWORD *)&v406;
      }
      else
      {
        v410 = (*(_QWORD *)&v406 - 1) & v408;
      }
      v411 = *(_QWORD **)(*((_QWORD *)this + 362) + 8 * v410);
      if (v411)
      {
        v412 = (_QWORD *)*v411;
        if (*v411)
        {
          if (v409.u32[0] < 2uLL)
          {
            v413 = *(_QWORD *)&v406 - 1;
            while (1)
            {
              v415 = v412[1];
              if (v415 == v408)
              {
                if (v412[2] == v408)
                  goto LABEL_707;
              }
              else if ((v415 & v413) != v410)
              {
                goto LABEL_708;
              }
              v412 = (_QWORD *)*v412;
              if (!v412)
                goto LABEL_708;
            }
          }
          do
          {
            v414 = v412[1];
            if (v414 == v408)
            {
              if (v412[2] == v408)
              {
LABEL_707:
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 357, v412[3]);
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 362, v412[2]);
                break;
              }
            }
            else
            {
              if (v414 >= *(_QWORD *)&v406)
                v414 %= *(_QWORD *)&v406;
              if (v414 != v410)
                break;
            }
            v412 = (_QWORD *)*v412;
          }
          while (v412);
        }
      }
LABEL_708:
      while (++v407 != v389)
      {
        v406 = *(int8x8_t *)((char *)this + 2904);
        if (v406)
          goto LABEL_687;
      }
    }
  }
  if (v388)
    operator delete(v388);
  if (v380)
    operator delete(v380);
  __p = 0;
  v1039 = 0;
  v1040 = 0;
  v1035 = 0;
  v1036 = 0;
  v1037 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 676, (uint64_t)&__p);
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 681, (uint64_t)&v1035);
  v416 = __p;
  v417 = v1039;
  if (__p != v1039)
  {
    v418 = __p;
    do
    {
      v419 = *v418;
      v420 = *((_QWORD *)this + 689);
      if (v419 < (*((_QWORD *)this + 690) - v420) >> 3)
      {
        v421 = *(_QWORD *)(v420 + 8 * v419);
        v422 = v421 && HIDWORD(*v418) == HIDWORD(v421);
        if (v422 && *((_QWORD *)this + 692) + 24 * v421 != *((_QWORD *)this + 693))
        {
          v423 = *(_QWORD *)(*((_QWORD *)this + 695) + 8 * v421);
          v1032 = v423 | ((unint64_t)*(unsigned int *)(v420 + 8 * v423 + 4) << 32);
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 5488, &v1032);
        }
      }
      ++v418;
    }
    while (v418 != v417);
  }
  v424 = v1035;
  v425 = v1036;
  if (v1035 != v1036)
  {
    v426 = v1035;
    do
    {
      v427 = *v426;
      v428 = *((_QWORD *)this + 689);
      if (v427 < (*((_QWORD *)this + 690) - v428) >> 3)
      {
        v429 = *(_QWORD *)(v428 + 8 * v427);
        v430 = v429 && HIDWORD(*v426) == HIDWORD(v429);
        if (v430 && *((_QWORD *)this + 692) + 24 * v429 != *((_QWORD *)this + 693))
        {
          v431 = *(_QWORD *)(*((_QWORD *)this + 695) + 8 * v429);
          v1032 = v431 | ((unint64_t)*(unsigned int *)(v428 + 8 * v431 + 4) << 32);
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 5488, &v1032);
        }
      }
      ++v426;
    }
    while (v426 != v425);
  }
  if (v424)
    operator delete(v424);
  if (v416)
    operator delete(v416);
  v1035 = 0;
  v1036 = 0;
  v1037 = 0;
  v1032 = 0;
  v1033 = 0;
  v1034 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 145, (uint64_t)&v1035);
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 150, (uint64_t)&v1032);
  v432 = v1035;
  v433 = v1036;
  if (v1035 != v1036)
  {
    v434 = v1035;
    do
    {
      v435 = *v434;
      v436 = *((_QWORD *)this + 158);
      if (v435 < (*((_QWORD *)this + 159) - v436) >> 3)
      {
        v437 = *(_QWORD *)(v436 + 8 * v435);
        v438 = v437 && HIDWORD(*v434) == HIDWORD(v437);
        if (v438 && *((_QWORD *)this + 161) + 24 * v437 != *((_QWORD *)this + 162))
        {
          v439 = *(_QWORD *)(*((_QWORD *)this + 164) + 8 * v437);
          __p = (void *)(v439 | ((unint64_t)*(unsigned int *)(v436 + 8 * v439 + 4) << 32));
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 1240, &__p);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>>>::__erase_unique<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>((uint64_t *)this + 167, *v434);
        }
      }
      ++v434;
    }
    while (v434 != v433);
  }
  v440 = (unint64_t *)v1032;
  v441 = v1033;
  if ((unint64_t *)v1032 != v1033)
  {
    v442 = (unint64_t *)v1032;
    do
    {
      v443 = *v442;
      v444 = *((_QWORD *)this + 158);
      if (v443 < (*((_QWORD *)this + 159) - v444) >> 3)
      {
        v445 = *(_QWORD *)(v444 + 8 * v443);
        v446 = v445 && HIDWORD(*v442) == HIDWORD(v445);
        if (v446 && *((_QWORD *)this + 161) + 24 * v445 != *((_QWORD *)this + 162))
        {
          v447 = *(_QWORD *)(*((_QWORD *)this + 164) + 8 * v445);
          __p = (void *)(v447 | ((unint64_t)*(unsigned int *)(v444 + 8 * v447 + 4) << 32));
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 1240, &__p);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>>>::__erase_unique<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>((uint64_t *)this + 167, *v442);
        }
      }
      ++v442;
    }
    while (v442 != v441);
  }
  if (v432 != v433)
  {
    v448 = *(int8x8_t *)((char *)this + 1424);
    if (v448)
    {
      v449 = v432;
LABEL_766:
      v450 = *v449;
      v451 = (uint8x8_t)vcnt_s8(v448);
      v451.i16[0] = vaddlv_u8(v451);
      if (v451.u32[0] > 1uLL)
      {
        v452 = *v449;
        if (v450 >= *(_QWORD *)&v448)
          v452 = v450 % *(_QWORD *)&v448;
      }
      else
      {
        v452 = (*(_QWORD *)&v448 - 1) & v450;
      }
      v453 = *(float ***)(*((_QWORD *)this + 177) + 8 * v452);
      if (v453)
      {
        v454 = *v453;
        if (*v453)
        {
          if (v451.u32[0] < 2uLL)
          {
            v455 = *(_QWORD *)&v448 - 1;
            while (1)
            {
              v457 = *((_QWORD *)v454 + 1);
              if (v457 == v450)
              {
                if (*((_QWORD *)v454 + 2) == v450)
                  goto LABEL_786;
              }
              else if ((v457 & v455) != v452)
              {
                goto LABEL_791;
              }
              v454 = *(float **)v454;
              if (!v454)
                goto LABEL_791;
            }
          }
          do
          {
            v456 = *((_QWORD *)v454 + 1);
            if (v456 == v450)
            {
              if (*((_QWORD *)v454 + 2) == v450)
              {
LABEL_786:
                v458 = std::__hash_table<std::__hash_value_type<md::StyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>>,std::__unordered_map_hasher<md::StyleCacheKey,std::__hash_value_type<md::StyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>>,md::StyleCacheKeyHasher,std::equal_to<md::StyleCacheKey>,true>,std::__unordered_map_equal<md::StyleCacheKey,std::__hash_value_type<md::StyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>>,std::equal_to<md::StyleCacheKey>,md::StyleCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::StyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>>>>::find<md::StyleCacheKey>((_QWORD *)this + 172, v454 + 6);
                if (v458)
                {
                  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, (_QWORD *)this + 172, v458);
                  if (__p)
                    operator delete(__p);
                  v450 = *((_QWORD *)v454 + 2);
                }
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 177, v450);
                break;
              }
            }
            else
            {
              if (v456 >= *(_QWORD *)&v448)
                v456 %= *(_QWORD *)&v448;
              if (v456 != v452)
                break;
            }
            v454 = *(float **)v454;
          }
          while (v454);
        }
      }
LABEL_791:
      while (++v449 != v433)
      {
        v448 = *(int8x8_t *)((char *)this + 1424);
        if (v448)
          goto LABEL_766;
      }
    }
  }
  if (v440 != v441)
  {
    v459 = *(int8x8_t *)((char *)this + 1424);
    if (v459)
    {
      v460 = v440;
LABEL_797:
      v461 = *v460;
      v462 = (uint8x8_t)vcnt_s8(v459);
      v462.i16[0] = vaddlv_u8(v462);
      if (v462.u32[0] > 1uLL)
      {
        v463 = *v460;
        if (v461 >= *(_QWORD *)&v459)
          v463 = v461 % *(_QWORD *)&v459;
      }
      else
      {
        v463 = (*(_QWORD *)&v459 - 1) & v461;
      }
      v464 = *(float ***)(*((_QWORD *)this + 177) + 8 * v463);
      if (v464)
      {
        v465 = *v464;
        if (*v464)
        {
          if (v462.u32[0] < 2uLL)
          {
            v466 = *(_QWORD *)&v459 - 1;
            while (1)
            {
              v468 = *((_QWORD *)v465 + 1);
              if (v468 == v461)
              {
                if (*((_QWORD *)v465 + 2) == v461)
                  goto LABEL_817;
              }
              else if ((v468 & v466) != v463)
              {
                goto LABEL_822;
              }
              v465 = *(float **)v465;
              if (!v465)
                goto LABEL_822;
            }
          }
          do
          {
            v467 = *((_QWORD *)v465 + 1);
            if (v467 == v461)
            {
              if (*((_QWORD *)v465 + 2) == v461)
              {
LABEL_817:
                v469 = std::__hash_table<std::__hash_value_type<md::StyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>>,std::__unordered_map_hasher<md::StyleCacheKey,std::__hash_value_type<md::StyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>>,md::StyleCacheKeyHasher,std::equal_to<md::StyleCacheKey>,true>,std::__unordered_map_equal<md::StyleCacheKey,std::__hash_value_type<md::StyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>>,std::equal_to<md::StyleCacheKey>,md::StyleCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::StyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::Style>>>>>::find<md::StyleCacheKey>((_QWORD *)this + 172, v465 + 6);
                if (v469)
                {
                  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, (_QWORD *)this + 172, v469);
                  if (__p)
                    operator delete(__p);
                  v461 = *((_QWORD *)v465 + 2);
                }
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 177, v461);
                break;
              }
            }
            else
            {
              if (v467 >= *(_QWORD *)&v459)
                v467 %= *(_QWORD *)&v459;
              if (v467 != v463)
                break;
            }
            v465 = *(float **)v465;
          }
          while (v465);
        }
      }
LABEL_822:
      while (++v460 != v441)
      {
        v459 = *(int8x8_t *)((char *)this + 1424);
        if (v459)
          goto LABEL_797;
      }
    }
  }
  if (v440)
    operator delete(v440);
  if (v432)
    operator delete(v432);
  __p = 0;
  v1039 = 0;
  v1040 = 0;
  v1035 = 0;
  v1036 = 0;
  v1037 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 182, (uint64_t)&__p);
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 187, (uint64_t)&v1035);
  v470 = (unint64_t *)__p;
  v471 = v1039;
  if (__p != v1039)
  {
    v472 = (unint64_t *)__p;
    do
    {
      v473 = *v472;
      v474 = *((_QWORD *)this + 195);
      if (v473 < (*((_QWORD *)this + 196) - v474) >> 3)
      {
        v475 = *(_QWORD *)(v474 + 8 * v473);
        v476 = v475 && HIDWORD(*v472) == HIDWORD(v475);
        if (v476 && *((_QWORD *)this + 198) + 20 * v475 != *((_QWORD *)this + 199))
        {
          v477 = *(_QWORD *)(*((_QWORD *)this + 201) + 8 * v475);
          v1032 = v477 | ((unint64_t)*(unsigned int *)(v474 + 8 * v477 + 4) << 32);
          geo::packed_array<md::CachedKey<md::StyleCacheKey>,geo::handle<md::CachedKey<md::StyleCacheKey>>>::erase((uint64_t)this + 1536, &v1032);
          std::__hash_table<std::__hash_value_type<geo::handle<md::CachedKey<md::StyleCacheKey>>,std::unique_ptr<md::CachedKey<md::StyleCacheKey>>>,std::__unordered_map_hasher<geo::handle<md::CachedKey<md::StyleCacheKey>>,std::__hash_value_type<geo::handle<md::CachedKey<md::StyleCacheKey>>,std::unique_ptr<md::CachedKey<md::StyleCacheKey>>>,std::hash<geo::handle<md::CachedKey<md::StyleCacheKey>>>,std::equal_to<geo::handle<md::CachedKey<md::StyleCacheKey>>>,true>,std::__unordered_map_equal<geo::handle<md::CachedKey<md::StyleCacheKey>>,std::__hash_value_type<geo::handle<md::CachedKey<md::StyleCacheKey>>,std::unique_ptr<md::CachedKey<md::StyleCacheKey>>>,std::equal_to<geo::handle<md::CachedKey<md::StyleCacheKey>>>,std::hash<geo::handle<md::CachedKey<md::StyleCacheKey>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::CachedKey<md::StyleCacheKey>>,std::unique_ptr<md::CachedKey<md::StyleCacheKey>>>>>::__erase_unique<geo::handle<md::CachedKey<md::StyleCacheKey>>>((uint64_t *)this + 204, *v472);
        }
      }
      ++v472;
    }
    while (v472 != v471);
  }
  v478 = v1035;
  v479 = v1036;
  if (v1035 != v1036)
  {
    v480 = v1035;
    do
    {
      v481 = *v480;
      v482 = *((_QWORD *)this + 195);
      if (v481 < (*((_QWORD *)this + 196) - v482) >> 3)
      {
        v483 = *(_QWORD *)(v482 + 8 * v481);
        v484 = v483 && HIDWORD(*v480) == HIDWORD(v483);
        if (v484 && *((_QWORD *)this + 198) + 20 * v483 != *((_QWORD *)this + 199))
        {
          v485 = *(_QWORD *)(*((_QWORD *)this + 201) + 8 * v483);
          v1032 = v485 | ((unint64_t)*(unsigned int *)(v482 + 8 * v485 + 4) << 32);
          geo::packed_array<md::CachedKey<md::StyleCacheKey>,geo::handle<md::CachedKey<md::StyleCacheKey>>>::erase((uint64_t)this + 1536, &v1032);
          std::__hash_table<std::__hash_value_type<geo::handle<md::CachedKey<md::StyleCacheKey>>,std::unique_ptr<md::CachedKey<md::StyleCacheKey>>>,std::__unordered_map_hasher<geo::handle<md::CachedKey<md::StyleCacheKey>>,std::__hash_value_type<geo::handle<md::CachedKey<md::StyleCacheKey>>,std::unique_ptr<md::CachedKey<md::StyleCacheKey>>>,std::hash<geo::handle<md::CachedKey<md::StyleCacheKey>>>,std::equal_to<geo::handle<md::CachedKey<md::StyleCacheKey>>>,true>,std::__unordered_map_equal<geo::handle<md::CachedKey<md::StyleCacheKey>>,std::__hash_value_type<geo::handle<md::CachedKey<md::StyleCacheKey>>,std::unique_ptr<md::CachedKey<md::StyleCacheKey>>>,std::equal_to<geo::handle<md::CachedKey<md::StyleCacheKey>>>,std::hash<geo::handle<md::CachedKey<md::StyleCacheKey>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::CachedKey<md::StyleCacheKey>>,std::unique_ptr<md::CachedKey<md::StyleCacheKey>>>>>::__erase_unique<geo::handle<md::CachedKey<md::StyleCacheKey>>>((uint64_t *)this + 204, *v480);
        }
      }
      ++v480;
    }
    while (v480 != v479);
  }
  if (v470 != v471)
  {
    v486 = *(int8x8_t *)((char *)this + 1720);
    if (v486)
    {
      v487 = v470;
LABEL_854:
      v488 = *v487;
      v489 = (uint8x8_t)vcnt_s8(v486);
      v489.i16[0] = vaddlv_u8(v489);
      if (v489.u32[0] > 1uLL)
      {
        v490 = *v487;
        if (v488 >= *(_QWORD *)&v486)
          v490 = v488 % *(_QWORD *)&v486;
      }
      else
      {
        v490 = (*(_QWORD *)&v486 - 1) & v488;
      }
      v491 = *(_QWORD **)(*((_QWORD *)this + 214) + 8 * v490);
      if (v491)
      {
        v492 = (_QWORD *)*v491;
        if (*v491)
        {
          if (v489.u32[0] < 2uLL)
          {
            v493 = *(_QWORD *)&v486 - 1;
            while (1)
            {
              v495 = v492[1];
              if (v495 == v488)
              {
                if (v492[2] == v488)
                  goto LABEL_874;
              }
              else if ((v495 & v493) != v490)
              {
                goto LABEL_875;
              }
              v492 = (_QWORD *)*v492;
              if (!v492)
                goto LABEL_875;
            }
          }
          do
          {
            v494 = v492[1];
            if (v494 == v488)
            {
              if (v492[2] == v488)
              {
LABEL_874:
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 209, v492[3]);
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 214, v492[2]);
                break;
              }
            }
            else
            {
              if (v494 >= *(_QWORD *)&v486)
                v494 %= *(_QWORD *)&v486;
              if (v494 != v490)
                break;
            }
            v492 = (_QWORD *)*v492;
          }
          while (v492);
        }
      }
LABEL_875:
      while (++v487 != v471)
      {
        v486 = *(int8x8_t *)((char *)this + 1720);
        if (v486)
          goto LABEL_854;
      }
    }
  }
  if (v478 != v479)
  {
    v496 = *(int8x8_t *)((char *)this + 1720);
    if (v496)
    {
      v497 = v478;
LABEL_881:
      v498 = *v497;
      v499 = (uint8x8_t)vcnt_s8(v496);
      v499.i16[0] = vaddlv_u8(v499);
      if (v499.u32[0] > 1uLL)
      {
        v500 = *v497;
        if (v498 >= *(_QWORD *)&v496)
          v500 = v498 % *(_QWORD *)&v496;
      }
      else
      {
        v500 = (*(_QWORD *)&v496 - 1) & v498;
      }
      v501 = *(_QWORD **)(*((_QWORD *)this + 214) + 8 * v500);
      if (v501)
      {
        v502 = (_QWORD *)*v501;
        if (*v501)
        {
          if (v499.u32[0] < 2uLL)
          {
            v503 = *(_QWORD *)&v496 - 1;
            while (1)
            {
              v505 = v502[1];
              if (v505 == v498)
              {
                if (v502[2] == v498)
                  goto LABEL_901;
              }
              else if ((v505 & v503) != v500)
              {
                goto LABEL_902;
              }
              v502 = (_QWORD *)*v502;
              if (!v502)
                goto LABEL_902;
            }
          }
          do
          {
            v504 = v502[1];
            if (v504 == v498)
            {
              if (v502[2] == v498)
              {
LABEL_901:
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 209, v502[3]);
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 214, v502[2]);
                break;
              }
            }
            else
            {
              if (v504 >= *(_QWORD *)&v496)
                v504 %= *(_QWORD *)&v496;
              if (v504 != v500)
                break;
            }
            v502 = (_QWORD *)*v502;
          }
          while (v502);
        }
      }
LABEL_902:
      while (++v497 != v479)
      {
        v496 = *(int8x8_t *)((char *)this + 1720);
        if (v496)
          goto LABEL_881;
      }
    }
  }
  if (v478)
    operator delete(v478);
  if (v470)
    operator delete(v470);
  v1035 = 0;
  v1036 = 0;
  v1037 = 0;
  v1032 = 0;
  v1033 = 0;
  v1034 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 784, (uint64_t)&v1035);
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 789, (uint64_t)&v1032);
  v506 = v1035;
  v507 = v1036;
  if (v1035 != v1036)
  {
    v508 = v1035;
    do
    {
      v509 = *v508;
      v510 = *((_QWORD *)this + 797);
      if (v509 < (*((_QWORD *)this + 798) - v510) >> 3)
      {
        v511 = *(_QWORD *)(v510 + 8 * v509);
        v512 = v511 && HIDWORD(*v508) == HIDWORD(v511);
        if (v512 && *((_QWORD *)this + 800) + 24 * v511 != *((_QWORD *)this + 801))
        {
          v513 = *(_QWORD *)(*((_QWORD *)this + 803) + 8 * v511);
          __p = (void *)(v513 | ((unint64_t)*(unsigned int *)(v510 + 8 * v513 + 4) << 32));
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 6352, &__p);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>>>::__erase_unique<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>((uint64_t *)this + 806, *v508);
        }
      }
      ++v508;
    }
    while (v508 != v507);
  }
  v514 = (unint64_t *)v1032;
  v515 = v1033;
  if ((unint64_t *)v1032 != v1033)
  {
    v516 = (unint64_t *)v1032;
    do
    {
      v517 = *v516;
      v518 = *((_QWORD *)this + 797);
      if (v517 < (*((_QWORD *)this + 798) - v518) >> 3)
      {
        v519 = *(_QWORD *)(v518 + 8 * v517);
        v520 = v519 && HIDWORD(*v516) == HIDWORD(v519);
        if (v520 && *((_QWORD *)this + 800) + 24 * v519 != *((_QWORD *)this + 801))
        {
          v521 = *(_QWORD *)(*((_QWORD *)this + 803) + 8 * v519);
          __p = (void *)(v521 | ((unint64_t)*(unsigned int *)(v518 + 8 * v521 + 4) << 32));
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 6352, &__p);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>>>::__erase_unique<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>((uint64_t *)this + 806, *v516);
        }
      }
      ++v516;
    }
    while (v516 != v515);
  }
  if (v506 != v507)
  {
    v522 = *(int8x8_t *)((char *)this + 6536);
    if (v522)
    {
      v523 = v506;
LABEL_934:
      v524 = *v523;
      v525 = (uint8x8_t)vcnt_s8(v522);
      v525.i16[0] = vaddlv_u8(v525);
      if (v525.u32[0] > 1uLL)
      {
        v526 = *v523;
        if (v524 >= *(_QWORD *)&v522)
          v526 = v524 % *(_QWORD *)&v522;
      }
      else
      {
        v526 = (*(_QWORD *)&v522 - 1) & v524;
      }
      v527 = *(_QWORD **)(*((_QWORD *)this + 816) + 8 * v526);
      if (v527)
      {
        v528 = (_QWORD *)*v527;
        if (*v527)
        {
          if (v525.u32[0] < 2uLL)
          {
            v529 = *(_QWORD *)&v522 - 1;
            while (1)
            {
              v531 = v528[1];
              if (v531 == v524)
              {
                if (v528[2] == v524)
                  goto LABEL_954;
              }
              else if ((v531 & v529) != v526)
              {
                goto LABEL_958;
              }
              v528 = (_QWORD *)*v528;
              if (!v528)
                goto LABEL_958;
            }
          }
          do
          {
            v530 = v528[1];
            if (v530 == v524)
            {
              if (v528[2] == v524)
              {
LABEL_954:
                v532 = (_QWORD *)std::__hash_table<std::__hash_value_type<md::ColorStyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>>,std::__unordered_map_hasher<md::ColorStyleCacheKey,std::__hash_value_type<md::ColorStyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>>,md::ColorStyleCacheKeyHasher,std::equal_to<md::ColorStyleCacheKey>,true>,std::__unordered_map_equal<md::ColorStyleCacheKey,std::__hash_value_type<md::ColorStyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>>,std::equal_to<md::ColorStyleCacheKey>,md::ColorStyleCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::ColorStyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>>>>::find<md::ColorStyleCacheKey>((_QWORD *)this + 811, (uint64_t)(v528 + 3));
                if (v532)
                {
                  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, (_QWORD *)this + 811, v532);
                  if (__p)
                    operator delete(__p);
                }
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 816, v528[2]);
                break;
              }
            }
            else
            {
              if (v530 >= *(_QWORD *)&v522)
                v530 %= *(_QWORD *)&v522;
              if (v530 != v526)
                break;
            }
            v528 = (_QWORD *)*v528;
          }
          while (v528);
        }
      }
LABEL_958:
      while (++v523 != v507)
      {
        v522 = *(int8x8_t *)((char *)this + 6536);
        if (v522)
          goto LABEL_934;
      }
    }
  }
  if (v514 != v515)
  {
    v533 = *(int8x8_t *)((char *)this + 6536);
    if (v533)
    {
      v534 = v514;
LABEL_964:
      v535 = *v534;
      v536 = (uint8x8_t)vcnt_s8(v533);
      v536.i16[0] = vaddlv_u8(v536);
      if (v536.u32[0] > 1uLL)
      {
        v537 = *v534;
        if (v535 >= *(_QWORD *)&v533)
          v537 = v535 % *(_QWORD *)&v533;
      }
      else
      {
        v537 = (*(_QWORD *)&v533 - 1) & v535;
      }
      v538 = *(_QWORD **)(*((_QWORD *)this + 816) + 8 * v537);
      if (v538)
      {
        v539 = (_QWORD *)*v538;
        if (*v538)
        {
          if (v536.u32[0] < 2uLL)
          {
            v540 = *(_QWORD *)&v533 - 1;
            while (1)
            {
              v542 = v539[1];
              if (v542 == v535)
              {
                if (v539[2] == v535)
                  goto LABEL_984;
              }
              else if ((v542 & v540) != v537)
              {
                goto LABEL_988;
              }
              v539 = (_QWORD *)*v539;
              if (!v539)
                goto LABEL_988;
            }
          }
          do
          {
            v541 = v539[1];
            if (v541 == v535)
            {
              if (v539[2] == v535)
              {
LABEL_984:
                v543 = (_QWORD *)std::__hash_table<std::__hash_value_type<md::ColorStyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>>,std::__unordered_map_hasher<md::ColorStyleCacheKey,std::__hash_value_type<md::ColorStyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>>,md::ColorStyleCacheKeyHasher,std::equal_to<md::ColorStyleCacheKey>,true>,std::__unordered_map_equal<md::ColorStyleCacheKey,std::__hash_value_type<md::ColorStyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>>,std::equal_to<md::ColorStyleCacheKey>,md::ColorStyleCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::ColorStyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>>>>::find<md::ColorStyleCacheKey>((_QWORD *)this + 811, (uint64_t)(v539 + 3));
                if (v543)
                {
                  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, (_QWORD *)this + 811, v543);
                  if (__p)
                    operator delete(__p);
                }
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 816, v539[2]);
                break;
              }
            }
            else
            {
              if (v541 >= *(_QWORD *)&v533)
                v541 %= *(_QWORD *)&v533;
              if (v541 != v537)
                break;
            }
            v539 = (_QWORD *)*v539;
          }
          while (v539);
        }
      }
LABEL_988:
      while (++v534 != v515)
      {
        v533 = *(int8x8_t *)((char *)this + 6536);
        if (v533)
          goto LABEL_964;
      }
    }
  }
  if (v514)
    operator delete(v514);
  if (v506)
    operator delete(v506);
  __p = 0;
  v1039 = 0;
  v1040 = 0;
  v1035 = 0;
  v1036 = 0;
  v1037 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 698, (uint64_t)&__p);
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 703, (uint64_t)&v1035);
  v544 = __p;
  v545 = v1039;
  if (__p != v1039)
  {
    v546 = (unint64_t *)__p;
    do
    {
      v547 = *v546;
      v548 = *((_QWORD *)this + 711);
      if (v547 < (*((_QWORD *)this + 712) - v548) >> 3)
      {
        v549 = *(_QWORD *)(v548 + 8 * v547);
        v550 = v549 && HIDWORD(*v546) == HIDWORD(v549);
        if (v550 && *((_QWORD *)this + 714) + 24 * v549 != *((_QWORD *)this + 715))
        {
          v551 = *(_QWORD *)(*((_QWORD *)this + 717) + 8 * v549);
          v1032 = v551 | ((unint64_t)*(unsigned int *)(v548 + 8 * v551 + 4) << 32);
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 5664, &v1032);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>>>::__erase_unique<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>((uint64_t *)this + 720, *v546);
        }
      }
      ++v546;
    }
    while (v546 != v545);
  }
  v552 = v1035;
  v553 = v1036;
  if (v1035 != v1036)
  {
    v554 = v1035;
    do
    {
      v555 = *v554;
      v556 = *((_QWORD *)this + 711);
      if (v555 < (*((_QWORD *)this + 712) - v556) >> 3)
      {
        v557 = *(_QWORD *)(v556 + 8 * v555);
        v558 = v557 && HIDWORD(*v554) == HIDWORD(v557);
        if (v558 && *((_QWORD *)this + 714) + 24 * v557 != *((_QWORD *)this + 715))
        {
          v559 = *(_QWORD *)(*((_QWORD *)this + 717) + 8 * v557);
          v1032 = v559 | ((unint64_t)*(unsigned int *)(v556 + 8 * v559 + 4) << 32);
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 5664, &v1032);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>>>::__erase_unique<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>((uint64_t *)this + 720, *v554);
        }
      }
      ++v554;
    }
    while (v554 != v553);
  }
  if (v552)
    operator delete(v552);
  if (v544)
    operator delete(v544);
  v1035 = 0;
  v1036 = 0;
  v1037 = 0;
  v1032 = 0;
  v1033 = 0;
  v1034 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 991, (uint64_t)&v1035);
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 996, (uint64_t)&v1032);
  v560 = v1035;
  v561 = v1036;
  if (v1035 != v1036)
  {
    v562 = v1035;
    do
    {
      v563 = *v562;
      v564 = *((_QWORD *)this + 1004);
      if (v563 < (*((_QWORD *)this + 1005) - v564) >> 3)
      {
        v565 = *(_QWORD *)(v564 + 8 * v563);
        v566 = v565 && HIDWORD(*v562) == HIDWORD(v565);
        if (v566 && *((_QWORD *)this + 1007) + 24 * v565 != *((_QWORD *)this + 1008))
        {
          v567 = *(_QWORD *)(*((_QWORD *)this + 1010) + 8 * v565);
          __p = (void *)(v567 | ((unint64_t)*(unsigned int *)(v564 + 8 * v567 + 4) << 32));
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 8008, &__p);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>>>::__erase_unique<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>((uint64_t *)this + 1013, *v562);
        }
      }
      ++v562;
    }
    while (v562 != v561);
  }
  v568 = (unint64_t *)v1032;
  v569 = v1033;
  if ((unint64_t *)v1032 != v1033)
  {
    v570 = (unint64_t *)v1032;
    do
    {
      v571 = *v570;
      v572 = *((_QWORD *)this + 1004);
      if (v571 < (*((_QWORD *)this + 1005) - v572) >> 3)
      {
        v573 = *(_QWORD *)(v572 + 8 * v571);
        v574 = v573 && HIDWORD(*v570) == HIDWORD(v573);
        if (v574 && *((_QWORD *)this + 1007) + 24 * v573 != *((_QWORD *)this + 1008))
        {
          v575 = *(_QWORD *)(*((_QWORD *)this + 1010) + 8 * v573);
          __p = (void *)(v575 | ((unint64_t)*(unsigned int *)(v572 + 8 * v575 + 4) << 32));
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 8008, &__p);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>>>::__erase_unique<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>((uint64_t *)this + 1013, *v570);
        }
      }
      ++v570;
    }
    while (v570 != v569);
  }
  if (v560 != v561)
  {
    v576 = *(int8x8_t *)((char *)this + 0x2000);
    if (v576)
    {
      v577 = v560;
LABEL_1046:
      v578 = *v577;
      v579 = (uint8x8_t)vcnt_s8(v576);
      v579.i16[0] = vaddlv_u8(v579);
      if (v579.u32[0] > 1uLL)
      {
        v580 = *v577;
        if (v578 >= *(_QWORD *)&v576)
          v580 = v578 % *(_QWORD *)&v576;
      }
      else
      {
        v580 = (*(_QWORD *)&v576 - 1) & v578;
      }
      v581 = *(float ***)(*((_QWORD *)this + 1023) + 8 * v580);
      if (v581)
      {
        v582 = *v581;
        if (*v581)
        {
          if (v579.u32[0] < 2uLL)
          {
            v583 = *(_QWORD *)&v576 - 1;
            while (1)
            {
              v585 = *((_QWORD *)v582 + 1);
              if (v585 == v578)
              {
                if (*((_QWORD *)v582 + 2) == v578)
                  goto LABEL_1066;
              }
              else if ((v585 & v583) != v580)
              {
                goto LABEL_1071;
              }
              v582 = *(float **)v582;
              if (!v582)
                goto LABEL_1071;
            }
          }
          do
          {
            v584 = *((_QWORD *)v582 + 1);
            if (v584 == v578)
            {
              if (*((_QWORD *)v582 + 2) == v578)
              {
LABEL_1066:
                v586 = std::__hash_table<std::__hash_value_type<md::ColorCorrectionKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::ColorCorrectionFactor>>>,std::__unordered_map_hasher<md::ColorCorrectionKey,std::__hash_value_type<md::ColorCorrectionKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::ColorCorrectionFactor>>>,md::ColorCorrectionKeyHasher,std::equal_to<md::ColorCorrectionKey>,true>,std::__unordered_map_equal<md::ColorCorrectionKey,std::__hash_value_type<md::ColorCorrectionKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::ColorCorrectionFactor>>>,std::equal_to<md::ColorCorrectionKey>,md::ColorCorrectionKeyHasher,true>,std::allocator<std::__hash_value_type<md::ColorCorrectionKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::ColorCorrectionFactor>>>>>::find<md::ColorCorrectionKey>((_QWORD *)this + 1018, v582 + 6);
                if (v586)
                {
                  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, (_QWORD *)this + 1018, v586);
                  if (__p)
                    operator delete(__p);
                  v578 = *((_QWORD *)v582 + 2);
                }
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 1023, v578);
                break;
              }
            }
            else
            {
              if (v584 >= *(_QWORD *)&v576)
                v584 %= *(_QWORD *)&v576;
              if (v584 != v580)
                break;
            }
            v582 = *(float **)v582;
          }
          while (v582);
        }
      }
LABEL_1071:
      while (++v577 != v561)
      {
        v576 = *(int8x8_t *)((char *)this + 0x2000);
        if (v576)
          goto LABEL_1046;
      }
    }
  }
  if (v568 != v569)
  {
    v587 = *(int8x8_t *)((char *)this + 0x2000);
    if (v587)
    {
      v588 = v568;
LABEL_1077:
      v589 = *v588;
      v590 = (uint8x8_t)vcnt_s8(v587);
      v590.i16[0] = vaddlv_u8(v590);
      if (v590.u32[0] > 1uLL)
      {
        v591 = *v588;
        if (v589 >= *(_QWORD *)&v587)
          v591 = v589 % *(_QWORD *)&v587;
      }
      else
      {
        v591 = (*(_QWORD *)&v587 - 1) & v589;
      }
      v592 = *(float ***)(*((_QWORD *)this + 1023) + 8 * v591);
      if (v592)
      {
        v593 = *v592;
        if (*v592)
        {
          if (v590.u32[0] < 2uLL)
          {
            v594 = *(_QWORD *)&v587 - 1;
            while (1)
            {
              v596 = *((_QWORD *)v593 + 1);
              if (v596 == v589)
              {
                if (*((_QWORD *)v593 + 2) == v589)
                  goto LABEL_1097;
              }
              else if ((v596 & v594) != v591)
              {
                goto LABEL_1102;
              }
              v593 = *(float **)v593;
              if (!v593)
                goto LABEL_1102;
            }
          }
          do
          {
            v595 = *((_QWORD *)v593 + 1);
            if (v595 == v589)
            {
              if (*((_QWORD *)v593 + 2) == v589)
              {
LABEL_1097:
                v597 = std::__hash_table<std::__hash_value_type<md::ColorCorrectionKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::ColorCorrectionFactor>>>,std::__unordered_map_hasher<md::ColorCorrectionKey,std::__hash_value_type<md::ColorCorrectionKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::ColorCorrectionFactor>>>,md::ColorCorrectionKeyHasher,std::equal_to<md::ColorCorrectionKey>,true>,std::__unordered_map_equal<md::ColorCorrectionKey,std::__hash_value_type<md::ColorCorrectionKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::ColorCorrectionFactor>>>,std::equal_to<md::ColorCorrectionKey>,md::ColorCorrectionKeyHasher,true>,std::allocator<std::__hash_value_type<md::ColorCorrectionKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::ColorCorrectionFactor>>>>>::find<md::ColorCorrectionKey>((_QWORD *)this + 1018, v593 + 6);
                if (v597)
                {
                  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, (_QWORD *)this + 1018, v597);
                  if (__p)
                    operator delete(__p);
                  v589 = *((_QWORD *)v593 + 2);
                }
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 1023, v589);
                break;
              }
            }
            else
            {
              if (v595 >= *(_QWORD *)&v587)
                v595 %= *(_QWORD *)&v587;
              if (v595 != v591)
                break;
            }
            v593 = *(float **)v593;
          }
          while (v593);
        }
      }
LABEL_1102:
      while (++v588 != v569)
      {
        v587 = *(int8x8_t *)((char *)this + 0x2000);
        if (v587)
          goto LABEL_1077;
      }
    }
  }
  if (v568)
    operator delete(v568);
  if (v560)
    operator delete(v560);
  v1035 = 0;
  v1036 = 0;
  v1037 = 0;
  v1032 = 0;
  v1033 = 0;
  v1034 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 1028, (uint64_t)&v1035);
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 1033, (uint64_t)&v1032);
  v598 = v1035;
  v599 = v1036;
  if (v1035 != v1036)
  {
    v600 = v1035;
    do
    {
      v601 = *v600;
      v602 = *((_QWORD *)this + 1041);
      if (v601 < (*((_QWORD *)this + 1042) - v602) >> 3)
      {
        v603 = *(_QWORD *)(v602 + 8 * v601);
        v604 = v603 && HIDWORD(*v600) == HIDWORD(v603);
        if (v604 && *((_QWORD *)this + 1044) + 24 * v603 != *((_QWORD *)this + 1045))
        {
          v605 = *(_QWORD *)(*((_QWORD *)this + 1047) + 8 * v603);
          __p = (void *)(v605 | ((unint64_t)*(unsigned int *)(v602 + 8 * v605 + 4) << 32));
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 8304, &__p);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>>>::__erase_unique<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>((uint64_t *)this + 1050, *v600);
        }
      }
      ++v600;
    }
    while (v600 != v599);
  }
  v606 = (unint64_t *)v1032;
  v607 = v1033;
  if ((unint64_t *)v1032 != v1033)
  {
    v608 = (unint64_t *)v1032;
    do
    {
      v609 = *v608;
      v610 = *((_QWORD *)this + 1041);
      if (v609 < (*((_QWORD *)this + 1042) - v610) >> 3)
      {
        v611 = *(_QWORD *)(v610 + 8 * v609);
        v612 = v611 && HIDWORD(*v608) == HIDWORD(v611);
        if (v612 && *((_QWORD *)this + 1044) + 24 * v611 != *((_QWORD *)this + 1045))
        {
          v613 = *(_QWORD *)(*((_QWORD *)this + 1047) + 8 * v611);
          __p = (void *)(v613 | ((unint64_t)*(unsigned int *)(v610 + 8 * v613 + 4) << 32));
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 8304, &__p);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>>>::__erase_unique<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>((uint64_t *)this + 1050, *v608);
        }
      }
      ++v608;
    }
    while (v608 != v607);
  }
  if (v598 != v599)
  {
    v614 = *(int8x8_t *)((char *)this + 8488);
    if (v614)
    {
      v615 = v598;
LABEL_1134:
      v616 = *v615;
      v617 = (uint8x8_t)vcnt_s8(v614);
      v617.i16[0] = vaddlv_u8(v617);
      if (v617.u32[0] > 1uLL)
      {
        v618 = *v615;
        if (v616 >= *(_QWORD *)&v614)
          v618 = v616 % *(_QWORD *)&v614;
      }
      else
      {
        v618 = (*(_QWORD *)&v614 - 1) & v616;
      }
      v619 = *(float ***)(*((_QWORD *)this + 1060) + 8 * v618);
      if (v619)
      {
        v620 = *v619;
        if (*v619)
        {
          if (v617.u32[0] < 2uLL)
          {
            v621 = *(_QWORD *)&v614 - 1;
            while (1)
            {
              v623 = *((_QWORD *)v620 + 1);
              if (v623 == v616)
              {
                if (*((_QWORD *)v620 + 2) == v616)
                  goto LABEL_1154;
              }
              else if ((v623 & v621) != v618)
              {
                goto LABEL_1159;
              }
              v620 = *(float **)v620;
              if (!v620)
                goto LABEL_1159;
            }
          }
          do
          {
            v622 = *((_QWORD *)v620 + 1);
            if (v622 == v616)
            {
              if (*((_QWORD *)v620 + 2) == v616)
              {
LABEL_1154:
                v624 = std::__hash_table<std::__hash_value_type<md::StyleSSAOKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleSSAO>>>,std::__unordered_map_hasher<md::StyleSSAOKey,std::__hash_value_type<md::StyleSSAOKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleSSAO>>>,md::StyleSSAOKeyHasher,std::equal_to<md::StyleSSAOKey>,true>,std::__unordered_map_equal<md::StyleSSAOKey,std::__hash_value_type<md::StyleSSAOKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleSSAO>>>,std::equal_to<md::StyleSSAOKey>,md::StyleSSAOKeyHasher,true>,std::allocator<std::__hash_value_type<md::StyleSSAOKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleSSAO>>>>>::find<md::StyleSSAOKey>((_QWORD *)this + 1055, v620 + 6);
                if (v624)
                {
                  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, (_QWORD *)this + 1055, v624);
                  if (__p)
                    operator delete(__p);
                  v616 = *((_QWORD *)v620 + 2);
                }
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 1060, v616);
                break;
              }
            }
            else
            {
              if (v622 >= *(_QWORD *)&v614)
                v622 %= *(_QWORD *)&v614;
              if (v622 != v618)
                break;
            }
            v620 = *(float **)v620;
          }
          while (v620);
        }
      }
LABEL_1159:
      while (++v615 != v599)
      {
        v614 = *(int8x8_t *)((char *)this + 8488);
        if (v614)
          goto LABEL_1134;
      }
    }
  }
  if (v606 != v607)
  {
    v625 = *(int8x8_t *)((char *)this + 8488);
    if (v625)
    {
      v626 = v606;
LABEL_1165:
      v627 = *v626;
      v628 = (uint8x8_t)vcnt_s8(v625);
      v628.i16[0] = vaddlv_u8(v628);
      if (v628.u32[0] > 1uLL)
      {
        v629 = *v626;
        if (v627 >= *(_QWORD *)&v625)
          v629 = v627 % *(_QWORD *)&v625;
      }
      else
      {
        v629 = (*(_QWORD *)&v625 - 1) & v627;
      }
      v630 = *(float ***)(*((_QWORD *)this + 1060) + 8 * v629);
      if (v630)
      {
        v631 = *v630;
        if (*v630)
        {
          if (v628.u32[0] < 2uLL)
          {
            v632 = *(_QWORD *)&v625 - 1;
            while (1)
            {
              v634 = *((_QWORD *)v631 + 1);
              if (v634 == v627)
              {
                if (*((_QWORD *)v631 + 2) == v627)
                  goto LABEL_1185;
              }
              else if ((v634 & v632) != v629)
              {
                goto LABEL_1190;
              }
              v631 = *(float **)v631;
              if (!v631)
                goto LABEL_1190;
            }
          }
          do
          {
            v633 = *((_QWORD *)v631 + 1);
            if (v633 == v627)
            {
              if (*((_QWORD *)v631 + 2) == v627)
              {
LABEL_1185:
                v635 = std::__hash_table<std::__hash_value_type<md::StyleSSAOKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleSSAO>>>,std::__unordered_map_hasher<md::StyleSSAOKey,std::__hash_value_type<md::StyleSSAOKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleSSAO>>>,md::StyleSSAOKeyHasher,std::equal_to<md::StyleSSAOKey>,true>,std::__unordered_map_equal<md::StyleSSAOKey,std::__hash_value_type<md::StyleSSAOKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleSSAO>>>,std::equal_to<md::StyleSSAOKey>,md::StyleSSAOKeyHasher,true>,std::allocator<std::__hash_value_type<md::StyleSSAOKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleSSAO>>>>>::find<md::StyleSSAOKey>((_QWORD *)this + 1055, v631 + 6);
                if (v635)
                {
                  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, (_QWORD *)this + 1055, v635);
                  if (__p)
                    operator delete(__p);
                  v627 = *((_QWORD *)v631 + 2);
                }
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 1060, v627);
                break;
              }
            }
            else
            {
              if (v633 >= *(_QWORD *)&v625)
                v633 %= *(_QWORD *)&v625;
              if (v633 != v629)
                break;
            }
            v631 = *(float **)v631;
          }
          while (v631);
        }
      }
LABEL_1190:
      while (++v626 != v607)
      {
        v625 = *(int8x8_t *)((char *)this + 8488);
        if (v625)
          goto LABEL_1165;
      }
    }
  }
  if (v606)
    operator delete(v606);
  if (v598)
    operator delete(v598);
  __p = 0;
  v1039 = 0;
  v1040 = 0;
  v1035 = 0;
  v1036 = 0;
  v1037 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 514, (uint64_t)&__p);
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 519, (uint64_t)&v1035);
  v636 = __p;
  v637 = v1039;
  if (__p != v1039)
  {
    v638 = (unint64_t *)__p;
    do
    {
      v639 = *v638;
      v640 = *((_QWORD *)this + 527);
      if (v639 < (*((_QWORD *)this + 528) - v640) >> 3)
      {
        v641 = *(_QWORD *)(v640 + 8 * v639);
        v642 = v641 && HIDWORD(*v638) == HIDWORD(v641);
        if (v642 && *((_QWORD *)this + 530) + 24 * v641 != *((_QWORD *)this + 531))
        {
          v643 = *(_QWORD *)(*((_QWORD *)this + 533) + 8 * v641);
          v1032 = v643 | ((unint64_t)*(unsigned int *)(v640 + 8 * v643 + 4) << 32);
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 4192, &v1032);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>>>::__erase_unique<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>((uint64_t *)this + 536, *v638);
        }
      }
      ++v638;
    }
    while (v638 != v637);
  }
  v644 = v1035;
  v645 = v1036;
  if (v1035 != v1036)
  {
    v646 = v1035;
    do
    {
      v647 = *v646;
      v648 = *((_QWORD *)this + 527);
      if (v647 < (*((_QWORD *)this + 528) - v648) >> 3)
      {
        v649 = *(_QWORD *)(v648 + 8 * v647);
        v650 = v649 && HIDWORD(*v646) == HIDWORD(v649);
        if (v650 && *((_QWORD *)this + 530) + 24 * v649 != *((_QWORD *)this + 531))
        {
          v651 = *(_QWORD *)(*((_QWORD *)this + 533) + 8 * v649);
          v1032 = v651 | ((unint64_t)*(unsigned int *)(v648 + 8 * v651 + 4) << 32);
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 4192, &v1032);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>>>::__erase_unique<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>((uint64_t *)this + 536, *v646);
        }
      }
      ++v646;
    }
    while (v646 != v645);
  }
  if (v644)
    operator delete(v644);
  if (v636)
    operator delete(v636);
  __p = 0;
  v1039 = 0;
  v1040 = 0;
  v1035 = 0;
  v1036 = 0;
  v1037 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 541, (uint64_t)&__p);
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 546, (uint64_t)&v1035);
  v652 = __p;
  v653 = v1039;
  if (__p != v1039)
  {
    v654 = (unint64_t *)__p;
    do
    {
      v655 = *v654;
      v656 = *((_QWORD *)this + 554);
      if (v655 < (*((_QWORD *)this + 555) - v656) >> 3)
      {
        v657 = *(_QWORD *)(v656 + 8 * v655);
        v658 = v657 && HIDWORD(*v654) == HIDWORD(v657);
        if (v658 && *((_QWORD *)this + 557) + 24 * v657 != *((_QWORD *)this + 558))
        {
          v659 = *(_QWORD *)(*((_QWORD *)this + 560) + 8 * v657);
          v1032 = v659 | ((unint64_t)*(unsigned int *)(v656 + 8 * v659 + 4) << 32);
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 4408, &v1032);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>>>::__erase_unique<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>((uint64_t *)this + 563, *v654);
        }
      }
      ++v654;
    }
    while (v654 != v653);
  }
  v660 = v1035;
  v661 = v1036;
  if (v1035 != v1036)
  {
    v662 = v1035;
    do
    {
      v663 = *v662;
      v664 = *((_QWORD *)this + 554);
      if (v663 < (*((_QWORD *)this + 555) - v664) >> 3)
      {
        v665 = *(_QWORD *)(v664 + 8 * v663);
        v666 = v665 && HIDWORD(*v662) == HIDWORD(v665);
        if (v666 && *((_QWORD *)this + 557) + 24 * v665 != *((_QWORD *)this + 558))
        {
          v667 = *(_QWORD *)(*((_QWORD *)this + 560) + 8 * v665);
          v1032 = v667 | ((unint64_t)*(unsigned int *)(v664 + 8 * v667 + 4) << 32);
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 4408, &v1032);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>>>::__erase_unique<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>((uint64_t *)this + 563, *v662);
        }
      }
      ++v662;
    }
    while (v662 != v661);
  }
  if (v660)
    operator delete(v660);
  if (v652)
    operator delete(v652);
  __p = 0;
  v1039 = 0;
  v1040 = 0;
  v1035 = 0;
  v1036 = 0;
  v1037 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 568, (uint64_t)&__p);
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 573, (uint64_t)&v1035);
  v668 = __p;
  v669 = v1039;
  if (__p != v1039)
  {
    v670 = (unint64_t *)__p;
    do
    {
      v671 = *v670;
      v672 = *((_QWORD *)this + 581);
      if (v671 < (*((_QWORD *)this + 582) - v672) >> 3)
      {
        v673 = *(_QWORD *)(v672 + 8 * v671);
        v674 = v673 && HIDWORD(*v670) == HIDWORD(v673);
        if (v674 && *((_QWORD *)this + 584) + 24 * v673 != *((_QWORD *)this + 585))
        {
          v675 = *(_QWORD *)(*((_QWORD *)this + 587) + 8 * v673);
          v1032 = v675 | ((unint64_t)*(unsigned int *)(v672 + 8 * v675 + 4) << 32);
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 4624, &v1032);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>>>::__erase_unique<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>((uint64_t *)this + 590, *v670);
        }
      }
      ++v670;
    }
    while (v670 != v669);
  }
  v676 = v1035;
  v677 = v1036;
  if (v1035 != v1036)
  {
    v678 = v1035;
    do
    {
      v679 = *v678;
      v680 = *((_QWORD *)this + 581);
      if (v679 < (*((_QWORD *)this + 582) - v680) >> 3)
      {
        v681 = *(_QWORD *)(v680 + 8 * v679);
        v682 = v681 && HIDWORD(*v678) == HIDWORD(v681);
        if (v682 && *((_QWORD *)this + 584) + 24 * v681 != *((_QWORD *)this + 585))
        {
          v683 = *(_QWORD *)(*((_QWORD *)this + 587) + 8 * v681);
          v1032 = v683 | ((unint64_t)*(unsigned int *)(v680 + 8 * v683 + 4) << 32);
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 4624, &v1032);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>>>::__erase_unique<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>((uint64_t *)this + 590, *v678);
        }
      }
      ++v678;
    }
    while (v678 != v677);
  }
  if (v676)
    operator delete(v676);
  if (v668)
    operator delete(v668);
  __p = 0;
  v1039 = 0;
  v1040 = 0;
  v1035 = 0;
  v1036 = 0;
  v1037 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 595, (uint64_t)&__p);
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 600, (uint64_t)&v1035);
  v684 = __p;
  v685 = v1039;
  if (__p != v1039)
  {
    v686 = (unint64_t *)__p;
    do
    {
      v687 = *v686;
      v688 = *((_QWORD *)this + 608);
      if (v687 < (*((_QWORD *)this + 609) - v688) >> 3)
      {
        v689 = *(_QWORD *)(v688 + 8 * v687);
        v690 = v689 && HIDWORD(*v686) == HIDWORD(v689);
        if (v690 && *((_QWORD *)this + 611) + 24 * v689 != *((_QWORD *)this + 612))
        {
          v691 = *(_QWORD *)(*((_QWORD *)this + 614) + 8 * v689);
          v1032 = v691 | ((unint64_t)*(unsigned int *)(v688 + 8 * v691 + 4) << 32);
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 4840, &v1032);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>>>::__erase_unique<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>((uint64_t *)this + 617, *v686);
        }
      }
      ++v686;
    }
    while (v686 != v685);
  }
  v692 = v1035;
  v693 = v1036;
  if (v1035 != v1036)
  {
    v694 = v1035;
    do
    {
      v695 = *v694;
      v696 = *((_QWORD *)this + 608);
      if (v695 < (*((_QWORD *)this + 609) - v696) >> 3)
      {
        v697 = *(_QWORD *)(v696 + 8 * v695);
        v698 = v697 && HIDWORD(*v694) == HIDWORD(v697);
        if (v698 && *((_QWORD *)this + 611) + 24 * v697 != *((_QWORD *)this + 612))
        {
          v699 = *(_QWORD *)(*((_QWORD *)this + 614) + 8 * v697);
          v1032 = v699 | ((unint64_t)*(unsigned int *)(v696 + 8 * v699 + 4) << 32);
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 4840, &v1032);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>>>::__erase_unique<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>((uint64_t *)this + 617, *v694);
        }
      }
      ++v694;
    }
    while (v694 != v693);
  }
  if (v692)
    operator delete(v692);
  if (v684)
    operator delete(v684);
  __p = 0;
  v1039 = 0;
  v1040 = 0;
  v1035 = 0;
  v1036 = 0;
  v1037 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 622, (uint64_t)&__p);
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 627, (uint64_t)&v1035);
  v700 = __p;
  v701 = v1039;
  if (__p != v1039)
  {
    v702 = (unint64_t *)__p;
    do
    {
      v703 = *v702;
      v704 = *((_QWORD *)this + 635);
      if (v703 < (*((_QWORD *)this + 636) - v704) >> 3)
      {
        v705 = *(_QWORD *)(v704 + 8 * v703);
        v706 = v705 && HIDWORD(*v702) == HIDWORD(v705);
        if (v706 && *((_QWORD *)this + 638) + 24 * v705 != *((_QWORD *)this + 639))
        {
          v707 = *(_QWORD *)(*((_QWORD *)this + 641) + 8 * v705);
          v1032 = v707 | ((unint64_t)*(unsigned int *)(v704 + 8 * v707 + 4) << 32);
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 5056, &v1032);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>>>::__erase_unique<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>((uint64_t *)this + 644, *v702);
        }
      }
      ++v702;
    }
    while (v702 != v701);
  }
  v708 = v1035;
  v709 = v1036;
  if (v1035 != v1036)
  {
    v710 = v1035;
    do
    {
      v711 = *v710;
      v712 = *((_QWORD *)this + 635);
      if (v711 < (*((_QWORD *)this + 636) - v712) >> 3)
      {
        v713 = *(_QWORD *)(v712 + 8 * v711);
        v714 = v713 && HIDWORD(*v710) == HIDWORD(v713);
        if (v714 && *((_QWORD *)this + 638) + 24 * v713 != *((_QWORD *)this + 639))
        {
          v715 = *(_QWORD *)(*((_QWORD *)this + 641) + 8 * v713);
          v1032 = v715 | ((unint64_t)*(unsigned int *)(v712 + 8 * v715 + 4) << 32);
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 5056, &v1032);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>>>::__erase_unique<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>((uint64_t *)this + 644, *v710);
        }
      }
      ++v710;
    }
    while (v710 != v709);
  }
  if (v708)
    operator delete(v708);
  if (v700)
    operator delete(v700);
  __p = 0;
  v1039 = 0;
  v1040 = 0;
  v1035 = 0;
  v1036 = 0;
  v1037 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 649, (uint64_t)&__p);
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 654, (uint64_t)&v1035);
  v716 = __p;
  v717 = v1039;
  if (__p != v1039)
  {
    v718 = (unint64_t *)__p;
    do
    {
      v719 = *v718;
      v720 = *((_QWORD *)this + 662);
      if (v719 < (*((_QWORD *)this + 663) - v720) >> 3)
      {
        v721 = *(_QWORD *)(v720 + 8 * v719);
        v722 = v721 && HIDWORD(*v718) == HIDWORD(v721);
        if (v722 && *((_QWORD *)this + 665) + 24 * v721 != *((_QWORD *)this + 666))
        {
          v723 = *(_QWORD *)(*((_QWORD *)this + 668) + 8 * v721);
          v1032 = v723 | ((unint64_t)*(unsigned int *)(v720 + 8 * v723 + 4) << 32);
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 5272, &v1032);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>>>::__erase_unique<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>((uint64_t *)this + 671, *v718);
        }
      }
      ++v718;
    }
    while (v718 != v717);
  }
  v724 = v1035;
  v725 = v1036;
  if (v1035 != v1036)
  {
    v726 = v1035;
    do
    {
      v727 = *v726;
      v728 = *((_QWORD *)this + 662);
      if (v727 < (*((_QWORD *)this + 663) - v728) >> 3)
      {
        v729 = *(_QWORD *)(v728 + 8 * v727);
        v730 = v729 && HIDWORD(*v726) == HIDWORD(v729);
        if (v730 && *((_QWORD *)this + 665) + 24 * v729 != *((_QWORD *)this + 666))
        {
          v731 = *(_QWORD *)(*((_QWORD *)this + 668) + 8 * v729);
          v1032 = v731 | ((unint64_t)*(unsigned int *)(v728 + 8 * v731 + 4) << 32);
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 5272, &v1032);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>>>::__erase_unique<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>((uint64_t *)this + 671, *v726);
        }
      }
      ++v726;
    }
    while (v726 != v725);
  }
  if (v724)
    operator delete(v724);
  if (v716)
    operator delete(v716);
  __p = 0;
  v1039 = 0;
  v1040 = 0;
  v1035 = 0;
  v1036 = 0;
  v1037 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 725, (uint64_t)&__p);
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 730, (uint64_t)&v1035);
  v732 = __p;
  v733 = v1039;
  if (__p != v1039)
  {
    v734 = __p;
    do
    {
      v735 = *v734;
      v736 = *((_QWORD *)this + 738);
      if (v735 < (*((_QWORD *)this + 739) - v736) >> 3)
      {
        v737 = *(_QWORD *)(v736 + 8 * v735);
        v738 = v737 && HIDWORD(*v734) == HIDWORD(v737);
        if (v738 && *((_QWORD *)this + 741) + 24 * v737 != *((_QWORD *)this + 742))
        {
          v739 = *(_QWORD *)(*((_QWORD *)this + 744) + 8 * v737);
          v1032 = v739 | ((unint64_t)*(unsigned int *)(v736 + 8 * v739 + 4) << 32);
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 5880, &v1032);
        }
      }
      ++v734;
    }
    while (v734 != v733);
  }
  v740 = v1035;
  v741 = v1036;
  if (v1035 != v1036)
  {
    v742 = v1035;
    do
    {
      v743 = *v742;
      v744 = *((_QWORD *)this + 738);
      if (v743 < (*((_QWORD *)this + 739) - v744) >> 3)
      {
        v745 = *(_QWORD *)(v744 + 8 * v743);
        v746 = v745 && HIDWORD(*v742) == HIDWORD(v745);
        if (v746 && *((_QWORD *)this + 741) + 24 * v745 != *((_QWORD *)this + 742))
        {
          v747 = *(_QWORD *)(*((_QWORD *)this + 744) + 8 * v745);
          v1032 = v747 | ((unint64_t)*(unsigned int *)(v744 + 8 * v747 + 4) << 32);
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 5880, &v1032);
        }
      }
      ++v742;
    }
    while (v742 != v741);
  }
  if (v740)
    operator delete(v740);
  if (v732)
    operator delete(v732);
  v1035 = 0;
  v1036 = 0;
  v1037 = 0;
  v1032 = 0;
  v1033 = 0;
  v1034 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 219, (uint64_t)&v1035);
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 224, (uint64_t)&v1032);
  v748 = v1035;
  v749 = v1036;
  if (v1035 != v1036)
  {
    v750 = v1035;
    do
    {
      v751 = *v750;
      v752 = *((_QWORD *)this + 232);
      if (v751 < (*((_QWORD *)this + 233) - v752) >> 3)
      {
        v753 = *(_QWORD *)(v752 + 8 * v751);
        v754 = v753 && HIDWORD(*v750) == HIDWORD(v753);
        if (v754 && *((_QWORD *)this + 235) + 24 * v753 != *((_QWORD *)this + 236))
        {
          v755 = *(_QWORD *)(*((_QWORD *)this + 238) + 8 * v753);
          __p = (void *)(v755 | ((unint64_t)*(unsigned int *)(v752 + 8 * v755 + 4) << 32));
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 1832, &__p);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>>>::__erase_unique<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>((uint64_t *)this + 241, *v750);
        }
      }
      ++v750;
    }
    while (v750 != v749);
  }
  v756 = (unint64_t *)v1032;
  v757 = v1033;
  if ((unint64_t *)v1032 != v1033)
  {
    v758 = (unint64_t *)v1032;
    do
    {
      v759 = *v758;
      v760 = *((_QWORD *)this + 232);
      if (v759 < (*((_QWORD *)this + 233) - v760) >> 3)
      {
        v761 = *(_QWORD *)(v760 + 8 * v759);
        v762 = v761 && HIDWORD(*v758) == HIDWORD(v761);
        if (v762 && *((_QWORD *)this + 235) + 24 * v761 != *((_QWORD *)this + 236))
        {
          v763 = *(_QWORD *)(*((_QWORD *)this + 238) + 8 * v761);
          __p = (void *)(v763 | ((unint64_t)*(unsigned int *)(v760 + 8 * v763 + 4) << 32));
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 1832, &__p);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>>>::__erase_unique<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>((uint64_t *)this + 241, *v758);
        }
      }
      ++v758;
    }
    while (v758 != v757);
  }
  if (v748 != v749)
  {
    v764 = *(int8x8_t *)((char *)this + 2016);
    if (v764)
    {
      v765 = v748;
LABEL_1404:
      v766 = *v765;
      v767 = (uint8x8_t)vcnt_s8(v764);
      v767.i16[0] = vaddlv_u8(v767);
      if (v767.u32[0] > 1uLL)
      {
        v768 = *v765;
        if (v766 >= *(_QWORD *)&v764)
          v768 = v766 % *(_QWORD *)&v764;
      }
      else
      {
        v768 = (*(_QWORD *)&v764 - 1) & v766;
      }
      v769 = *(_QWORD **)(*((_QWORD *)this + 251) + 8 * v768);
      if (v769)
      {
        v770 = (_QWORD *)*v769;
        if (*v769)
        {
          if (v767.u32[0] < 2uLL)
          {
            v771 = *(_QWORD *)&v764 - 1;
            while (1)
            {
              v773 = v770[1];
              if (v773 == v766)
              {
                if (v770[2] == v766)
                  goto LABEL_1424;
              }
              else if ((v773 & v771) != v768)
              {
                goto LABEL_1428;
              }
              v770 = (_QWORD *)*v770;
              if (!v770)
                goto LABEL_1428;
            }
          }
          do
          {
            v772 = v770[1];
            if (v772 == v766)
            {
              if (v770[2] == v766)
              {
LABEL_1424:
                v774 = (_QWORD *)std::__hash_table<std::__hash_value_type<md::ColorStyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>>,std::__unordered_map_hasher<md::ColorStyleCacheKey,std::__hash_value_type<md::ColorStyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>>,md::ColorStyleCacheKeyHasher,std::equal_to<md::ColorStyleCacheKey>,true>,std::__unordered_map_equal<md::ColorStyleCacheKey,std::__hash_value_type<md::ColorStyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>>,std::equal_to<md::ColorStyleCacheKey>,md::ColorStyleCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::ColorStyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>>>>::find<md::ColorStyleCacheKey>((_QWORD *)this + 246, (uint64_t)(v770 + 3));
                if (v774)
                {
                  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, (_QWORD *)this + 246, v774);
                  if (__p)
                    operator delete(__p);
                }
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 251, v770[2]);
                break;
              }
            }
            else
            {
              if (v772 >= *(_QWORD *)&v764)
                v772 %= *(_QWORD *)&v764;
              if (v772 != v768)
                break;
            }
            v770 = (_QWORD *)*v770;
          }
          while (v770);
        }
      }
LABEL_1428:
      while (++v765 != v749)
      {
        v764 = *(int8x8_t *)((char *)this + 2016);
        if (v764)
          goto LABEL_1404;
      }
    }
  }
  if (v756 != v757)
  {
    v775 = *(int8x8_t *)((char *)this + 2016);
    if (v775)
    {
      v776 = v756;
LABEL_1434:
      v777 = *v776;
      v778 = (uint8x8_t)vcnt_s8(v775);
      v778.i16[0] = vaddlv_u8(v778);
      if (v778.u32[0] > 1uLL)
      {
        v779 = *v776;
        if (v777 >= *(_QWORD *)&v775)
          v779 = v777 % *(_QWORD *)&v775;
      }
      else
      {
        v779 = (*(_QWORD *)&v775 - 1) & v777;
      }
      v780 = *(_QWORD **)(*((_QWORD *)this + 251) + 8 * v779);
      if (v780)
      {
        v781 = (_QWORD *)*v780;
        if (*v780)
        {
          if (v778.u32[0] < 2uLL)
          {
            v782 = *(_QWORD *)&v775 - 1;
            while (1)
            {
              v784 = v781[1];
              if (v784 == v777)
              {
                if (v781[2] == v777)
                  goto LABEL_1454;
              }
              else if ((v784 & v782) != v779)
              {
                goto LABEL_1458;
              }
              v781 = (_QWORD *)*v781;
              if (!v781)
                goto LABEL_1458;
            }
          }
          do
          {
            v783 = v781[1];
            if (v783 == v777)
            {
              if (v781[2] == v777)
              {
LABEL_1454:
                v785 = (_QWORD *)std::__hash_table<std::__hash_value_type<md::ColorStyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>>,std::__unordered_map_hasher<md::ColorStyleCacheKey,std::__hash_value_type<md::ColorStyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>>,md::ColorStyleCacheKeyHasher,std::equal_to<md::ColorStyleCacheKey>,true>,std::__unordered_map_equal<md::ColorStyleCacheKey,std::__hash_value_type<md::ColorStyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>>,std::equal_to<md::ColorStyleCacheKey>,md::ColorStyleCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::ColorStyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>>>>::find<md::ColorStyleCacheKey>((_QWORD *)this + 246, (uint64_t)(v781 + 3));
                if (v785)
                {
                  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, (_QWORD *)this + 246, v785);
                  if (__p)
                    operator delete(__p);
                }
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 251, v781[2]);
                break;
              }
            }
            else
            {
              if (v783 >= *(_QWORD *)&v775)
                v783 %= *(_QWORD *)&v775;
              if (v783 != v779)
                break;
            }
            v781 = (_QWORD *)*v781;
          }
          while (v781);
        }
      }
LABEL_1458:
      while (++v776 != v757)
      {
        v775 = *(int8x8_t *)((char *)this + 2016);
        if (v775)
          goto LABEL_1434;
      }
    }
  }
  if (v756)
    operator delete(v756);
  if (v748)
    operator delete(v748);
  __p = 0;
  v1039 = 0;
  v1040 = 0;
  v1035 = 0;
  v1036 = 0;
  v1037 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 256, (uint64_t)&__p);
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 261, (uint64_t)&v1035);
  v790 = (unint64_t *)__p;
  v791 = v1039;
  if (__p != v1039)
  {
    v792 = (unint64_t *)__p;
    do
    {
      v793 = *v792;
      v794 = *((_QWORD *)this + 269);
      if (v793 < (*((_QWORD *)this + 270) - v794) >> 3)
      {
        v795 = *(_QWORD *)(v794 + 8 * v793);
        v796 = v795 && HIDWORD(*v792) == HIDWORD(v795);
        if (v796 && *((_QWORD *)this + 272) + 24 * v795 != *((_QWORD *)this + 273))
        {
          v797 = *(_QWORD *)(*((_QWORD *)this + 275) + 8 * v795);
          v1032 = v797 | ((unint64_t)*(unsigned int *)(v794 + 8 * v797 + 4) << 32);
          geo::packed_array<md::CachedKey<md::ColorStyleCacheKey>,geo::handle<md::CachedKey<md::ColorStyleCacheKey>>>::erase((uint64_t)this + 2128, &v1032, v786, v787, v788, v789);
          std::__hash_table<std::__hash_value_type<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>,std::unique_ptr<md::CachedKey<md::ColorStyleCacheKey>>>,std::__unordered_map_hasher<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>,std::__hash_value_type<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>,std::unique_ptr<md::CachedKey<md::ColorStyleCacheKey>>>,std::hash<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>>,std::equal_to<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>>,true>,std::__unordered_map_equal<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>,std::__hash_value_type<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>,std::unique_ptr<md::CachedKey<md::ColorStyleCacheKey>>>,std::equal_to<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>>,std::hash<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>,std::unique_ptr<md::CachedKey<md::ColorStyleCacheKey>>>>>::__erase_unique<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>>((uint64_t *)this + 278, *v792);
        }
      }
      ++v792;
    }
    while (v792 != v791);
  }
  v798 = v1035;
  v799 = v1036;
  if (v1035 != v1036)
  {
    v800 = v1035;
    do
    {
      v801 = *v800;
      v802 = *((_QWORD *)this + 269);
      if (v801 < (*((_QWORD *)this + 270) - v802) >> 3)
      {
        v803 = *(_QWORD *)(v802 + 8 * v801);
        v804 = v803 && HIDWORD(*v800) == HIDWORD(v803);
        if (v804 && *((_QWORD *)this + 272) + 24 * v803 != *((_QWORD *)this + 273))
        {
          v805 = *(_QWORD *)(*((_QWORD *)this + 275) + 8 * v803);
          v1032 = v805 | ((unint64_t)*(unsigned int *)(v802 + 8 * v805 + 4) << 32);
          geo::packed_array<md::CachedKey<md::ColorStyleCacheKey>,geo::handle<md::CachedKey<md::ColorStyleCacheKey>>>::erase((uint64_t)this + 2128, &v1032, v786, v787, v788, v789);
          std::__hash_table<std::__hash_value_type<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>,std::unique_ptr<md::CachedKey<md::ColorStyleCacheKey>>>,std::__unordered_map_hasher<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>,std::__hash_value_type<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>,std::unique_ptr<md::CachedKey<md::ColorStyleCacheKey>>>,std::hash<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>>,std::equal_to<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>>,true>,std::__unordered_map_equal<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>,std::__hash_value_type<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>,std::unique_ptr<md::CachedKey<md::ColorStyleCacheKey>>>,std::equal_to<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>>,std::hash<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>,std::unique_ptr<md::CachedKey<md::ColorStyleCacheKey>>>>>::__erase_unique<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>>((uint64_t *)this + 278, *v800);
        }
      }
      ++v800;
    }
    while (v800 != v799);
  }
  if (v790 != v791)
  {
    v806 = *(int8x8_t *)((char *)this + 2312);
    if (v806)
    {
      v807 = v790;
LABEL_1490:
      v808 = *v807;
      v809 = (uint8x8_t)vcnt_s8(v806);
      v809.i16[0] = vaddlv_u8(v809);
      if (v809.u32[0] > 1uLL)
      {
        v810 = *v807;
        if (v808 >= *(_QWORD *)&v806)
          v810 = v808 % *(_QWORD *)&v806;
      }
      else
      {
        v810 = (*(_QWORD *)&v806 - 1) & v808;
      }
      v811 = *(_QWORD **)(*((_QWORD *)this + 288) + 8 * v810);
      if (v811)
      {
        v812 = (_QWORD *)*v811;
        if (*v811)
        {
          if (v809.u32[0] < 2uLL)
          {
            v813 = *(_QWORD *)&v806 - 1;
            while (1)
            {
              v815 = v812[1];
              if (v815 == v808)
              {
                if (v812[2] == v808)
                  goto LABEL_1510;
              }
              else if ((v815 & v813) != v810)
              {
                goto LABEL_1511;
              }
              v812 = (_QWORD *)*v812;
              if (!v812)
                goto LABEL_1511;
            }
          }
          do
          {
            v814 = v812[1];
            if (v814 == v808)
            {
              if (v812[2] == v808)
              {
LABEL_1510:
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 283, v812[3]);
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 288, v812[2]);
                break;
              }
            }
            else
            {
              if (v814 >= *(_QWORD *)&v806)
                v814 %= *(_QWORD *)&v806;
              if (v814 != v810)
                break;
            }
            v812 = (_QWORD *)*v812;
          }
          while (v812);
        }
      }
LABEL_1511:
      while (++v807 != v791)
      {
        v806 = *(int8x8_t *)((char *)this + 2312);
        if (v806)
          goto LABEL_1490;
      }
    }
  }
  if (v798 != v799)
  {
    v816 = *(int8x8_t *)((char *)this + 2312);
    if (v816)
    {
      v817 = v798;
LABEL_1517:
      v818 = *v817;
      v819 = (uint8x8_t)vcnt_s8(v816);
      v819.i16[0] = vaddlv_u8(v819);
      if (v819.u32[0] > 1uLL)
      {
        v820 = *v817;
        if (v818 >= *(_QWORD *)&v816)
          v820 = v818 % *(_QWORD *)&v816;
      }
      else
      {
        v820 = (*(_QWORD *)&v816 - 1) & v818;
      }
      v821 = *(_QWORD **)(*((_QWORD *)this + 288) + 8 * v820);
      if (v821)
      {
        v822 = (_QWORD *)*v821;
        if (*v821)
        {
          if (v819.u32[0] < 2uLL)
          {
            v823 = *(_QWORD *)&v816 - 1;
            while (1)
            {
              v825 = v822[1];
              if (v825 == v818)
              {
                if (v822[2] == v818)
                  goto LABEL_1537;
              }
              else if ((v825 & v823) != v820)
              {
                goto LABEL_1538;
              }
              v822 = (_QWORD *)*v822;
              if (!v822)
                goto LABEL_1538;
            }
          }
          do
          {
            v824 = v822[1];
            if (v824 == v818)
            {
              if (v822[2] == v818)
              {
LABEL_1537:
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 283, v822[3]);
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 288, v822[2]);
                break;
              }
            }
            else
            {
              if (v824 >= *(_QWORD *)&v816)
                v824 %= *(_QWORD *)&v816;
              if (v824 != v820)
                break;
            }
            v822 = (_QWORD *)*v822;
          }
          while (v822);
        }
      }
LABEL_1538:
      while (++v817 != v799)
      {
        v816 = *(int8x8_t *)((char *)this + 2312);
        if (v816)
          goto LABEL_1517;
      }
    }
  }
  if (v798)
    operator delete(v798);
  if (v790)
    operator delete(v790);
  v1035 = 0;
  v1036 = 0;
  v1037 = 0;
  v1032 = 0;
  v1033 = 0;
  v1034 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 747, (uint64_t)&v1035);
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 752, (uint64_t)&v1032);
  v826 = v1035;
  v827 = v1036;
  if (v1035 != v1036)
  {
    v828 = v1035;
    do
    {
      v829 = *v828;
      v830 = *((_QWORD *)this + 760);
      if (v829 < (*((_QWORD *)this + 761) - v830) >> 3)
      {
        v831 = *(_QWORD *)(v830 + 8 * v829);
        v832 = v831 && HIDWORD(*v828) == HIDWORD(v831);
        if (v832 && *((_QWORD *)this + 763) + 24 * v831 != *((_QWORD *)this + 764))
        {
          v833 = *(_QWORD *)(*((_QWORD *)this + 766) + 8 * v831);
          __p = (void *)(v833 | ((unint64_t)*(unsigned int *)(v830 + 8 * v833 + 4) << 32));
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 6056, &__p);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>>>::__erase_unique<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>((uint64_t *)this + 769, *v828);
        }
      }
      ++v828;
    }
    while (v828 != v827);
  }
  v834 = (unint64_t *)v1032;
  v835 = v1033;
  if ((unint64_t *)v1032 != v1033)
  {
    v836 = (unint64_t *)v1032;
    do
    {
      v837 = *v836;
      v838 = *((_QWORD *)this + 760);
      if (v837 < (*((_QWORD *)this + 761) - v838) >> 3)
      {
        v839 = *(_QWORD *)(v838 + 8 * v837);
        v840 = v839 && HIDWORD(*v836) == HIDWORD(v839);
        if (v840 && *((_QWORD *)this + 763) + 24 * v839 != *((_QWORD *)this + 764))
        {
          v841 = *(_QWORD *)(*((_QWORD *)this + 766) + 8 * v839);
          __p = (void *)(v841 | ((unint64_t)*(unsigned int *)(v838 + 8 * v841 + 4) << 32));
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 6056, &__p);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>>>::__erase_unique<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>((uint64_t *)this + 769, *v836);
        }
      }
      ++v836;
    }
    while (v836 != v835);
  }
  if (v826 != v827)
  {
    v842 = *(int8x8_t *)((char *)this + 6240);
    if (v842)
    {
      v843 = v826;
LABEL_1570:
      v844 = *v843;
      v845 = (uint8x8_t)vcnt_s8(v842);
      v845.i16[0] = vaddlv_u8(v845);
      if (v845.u32[0] > 1uLL)
      {
        v846 = *v843;
        if (v844 >= *(_QWORD *)&v842)
          v846 = v844 % *(_QWORD *)&v842;
      }
      else
      {
        v846 = (*(_QWORD *)&v842 - 1) & v844;
      }
      v847 = *(float ***)(*((_QWORD *)this + 779) + 8 * v846);
      if (v847)
      {
        v848 = *v847;
        if (*v847)
        {
          if (v845.u32[0] < 2uLL)
          {
            v849 = *(_QWORD *)&v842 - 1;
            while (1)
            {
              v851 = *((_QWORD *)v848 + 1);
              if (v851 == v844)
              {
                if (*((_QWORD *)v848 + 2) == v844)
                  goto LABEL_1590;
              }
              else if ((v851 & v849) != v846)
              {
                goto LABEL_1595;
              }
              v848 = *(float **)v848;
              if (!v848)
                goto LABEL_1595;
            }
          }
          do
          {
            v850 = *((_QWORD *)v848 + 1);
            if (v850 == v844)
            {
              if (*((_QWORD *)v848 + 2) == v844)
              {
LABEL_1590:
                v852 = std::__hash_table<std::__hash_value_type<md::PlanarParametersCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::PlanarParameters>>>,std::__unordered_map_hasher<md::PlanarParametersCacheKey,std::__hash_value_type<md::PlanarParametersCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::PlanarParameters>>>,md::PlanarParametersCacheKeyHasher,std::equal_to<md::PlanarParametersCacheKey>,true>,std::__unordered_map_equal<md::PlanarParametersCacheKey,std::__hash_value_type<md::PlanarParametersCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::PlanarParameters>>>,std::equal_to<md::PlanarParametersCacheKey>,md::PlanarParametersCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::PlanarParametersCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::PlanarParameters>>>>>::find<md::PlanarParametersCacheKey>((_QWORD *)this + 774, v848 + 6);
                if (v852)
                {
                  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, (_QWORD *)this + 774, v852);
                  if (__p)
                    operator delete(__p);
                  v844 = *((_QWORD *)v848 + 2);
                }
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 779, v844);
                break;
              }
            }
            else
            {
              if (v850 >= *(_QWORD *)&v842)
                v850 %= *(_QWORD *)&v842;
              if (v850 != v846)
                break;
            }
            v848 = *(float **)v848;
          }
          while (v848);
        }
      }
LABEL_1595:
      while (++v843 != v827)
      {
        v842 = *(int8x8_t *)((char *)this + 6240);
        if (v842)
          goto LABEL_1570;
      }
    }
  }
  if (v834 != v835)
  {
    v853 = *(int8x8_t *)((char *)this + 6240);
    if (v853)
    {
      v854 = v834;
LABEL_1601:
      v855 = *v854;
      v856 = (uint8x8_t)vcnt_s8(v853);
      v856.i16[0] = vaddlv_u8(v856);
      if (v856.u32[0] > 1uLL)
      {
        v857 = *v854;
        if (v855 >= *(_QWORD *)&v853)
          v857 = v855 % *(_QWORD *)&v853;
      }
      else
      {
        v857 = (*(_QWORD *)&v853 - 1) & v855;
      }
      v858 = *(float ***)(*((_QWORD *)this + 779) + 8 * v857);
      if (v858)
      {
        v859 = *v858;
        if (*v858)
        {
          if (v856.u32[0] < 2uLL)
          {
            v860 = *(_QWORD *)&v853 - 1;
            while (1)
            {
              v862 = *((_QWORD *)v859 + 1);
              if (v862 == v855)
              {
                if (*((_QWORD *)v859 + 2) == v855)
                  goto LABEL_1621;
              }
              else if ((v862 & v860) != v857)
              {
                goto LABEL_1626;
              }
              v859 = *(float **)v859;
              if (!v859)
                goto LABEL_1626;
            }
          }
          do
          {
            v861 = *((_QWORD *)v859 + 1);
            if (v861 == v855)
            {
              if (*((_QWORD *)v859 + 2) == v855)
              {
LABEL_1621:
                v863 = std::__hash_table<std::__hash_value_type<md::PlanarParametersCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::PlanarParameters>>>,std::__unordered_map_hasher<md::PlanarParametersCacheKey,std::__hash_value_type<md::PlanarParametersCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::PlanarParameters>>>,md::PlanarParametersCacheKeyHasher,std::equal_to<md::PlanarParametersCacheKey>,true>,std::__unordered_map_equal<md::PlanarParametersCacheKey,std::__hash_value_type<md::PlanarParametersCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::PlanarParameters>>>,std::equal_to<md::PlanarParametersCacheKey>,md::PlanarParametersCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::PlanarParametersCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::PlanarParameters>>>>>::find<md::PlanarParametersCacheKey>((_QWORD *)this + 774, v859 + 6);
                if (v863)
                {
                  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, (_QWORD *)this + 774, v863);
                  if (__p)
                    operator delete(__p);
                  v855 = *((_QWORD *)v859 + 2);
                }
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 779, v855);
                break;
              }
            }
            else
            {
              if (v861 >= *(_QWORD *)&v853)
                v861 %= *(_QWORD *)&v853;
              if (v861 != v857)
                break;
            }
            v859 = *(float **)v859;
          }
          while (v859);
        }
      }
LABEL_1626:
      while (++v854 != v835)
      {
        v853 = *(int8x8_t *)((char *)this + 6240);
        if (v853)
          goto LABEL_1601;
      }
    }
  }
  if (v834)
    operator delete(v834);
  if (v826)
    operator delete(v826);
  v1035 = 0;
  v1036 = 0;
  v1037 = 0;
  v1032 = 0;
  v1033 = 0;
  v1034 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 821, (uint64_t)&v1035);
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 826, (uint64_t)&v1032);
  v864 = v1035;
  v865 = v1036;
  if (v1035 != v1036)
  {
    v866 = v1035;
    do
    {
      v867 = *v866;
      v868 = *((_QWORD *)this + 834);
      if (v867 < (*((_QWORD *)this + 835) - v868) >> 3)
      {
        v869 = *(_QWORD *)(v868 + 8 * v867);
        v870 = v869 && HIDWORD(*v866) == HIDWORD(v869);
        if (v870 && *((_QWORD *)this + 837) + 24 * v869 != *((_QWORD *)this + 838))
        {
          v871 = *(_QWORD *)(*((_QWORD *)this + 840) + 8 * v869);
          __p = (void *)(v871 | ((unint64_t)*(unsigned int *)(v868 + 8 * v871 + 4) << 32));
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 6648, &__p);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>>>::__erase_unique<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>((uint64_t *)this + 843, *v866);
        }
      }
      ++v866;
    }
    while (v866 != v865);
  }
  v872 = (unint64_t *)v1032;
  v873 = v1033;
  if ((unint64_t *)v1032 != v1033)
  {
    v874 = (unint64_t *)v1032;
    do
    {
      v875 = *v874;
      v876 = *((_QWORD *)this + 834);
      if (v875 < (*((_QWORD *)this + 835) - v876) >> 3)
      {
        v877 = *(_QWORD *)(v876 + 8 * v875);
        v878 = v877 && HIDWORD(*v874) == HIDWORD(v877);
        if (v878 && *((_QWORD *)this + 837) + 24 * v877 != *((_QWORD *)this + 838))
        {
          v879 = *(_QWORD *)(*((_QWORD *)this + 840) + 8 * v877);
          __p = (void *)(v879 | ((unint64_t)*(unsigned int *)(v876 + 8 * v879 + 4) << 32));
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 6648, &__p);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>>>::__erase_unique<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>((uint64_t *)this + 843, *v874);
        }
      }
      ++v874;
    }
    while (v874 != v873);
  }
  if (v864 != v865)
  {
    v880 = *(int8x8_t *)((char *)this + 6832);
    if (v880)
    {
      v881 = v864;
LABEL_1658:
      v882 = *v881;
      v883 = (uint8x8_t)vcnt_s8(v880);
      v883.i16[0] = vaddlv_u8(v883);
      if (v883.u32[0] > 1uLL)
      {
        v884 = *v881;
        if (v882 >= *(_QWORD *)&v880)
          v884 = v882 % *(_QWORD *)&v880;
      }
      else
      {
        v884 = (*(_QWORD *)&v880 - 1) & v882;
      }
      v885 = *(float ***)(*((_QWORD *)this + 853) + 8 * v884);
      if (v885)
      {
        v886 = *v885;
        if (*v885)
        {
          if (v883.u32[0] < 2uLL)
          {
            v887 = *(_QWORD *)&v880 - 1;
            while (1)
            {
              v889 = *((_QWORD *)v886 + 1);
              if (v889 == v882)
              {
                if (*((_QWORD *)v886 + 2) == v882)
                  goto LABEL_1678;
              }
              else if ((v889 & v887) != v884)
              {
                goto LABEL_1683;
              }
              v886 = *(float **)v886;
              if (!v886)
                goto LABEL_1683;
            }
          }
          do
          {
            v888 = *((_QWORD *)v886 + 1);
            if (v888 == v882)
            {
              if (*((_QWORD *)v886 + 2) == v882)
              {
LABEL_1678:
                v890 = std::__hash_table<std::__hash_value_type<md::ElevatedStrokeCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>>>,std::__unordered_map_hasher<md::ElevatedStrokeCacheKey,std::__hash_value_type<md::ElevatedStrokeCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>>>,md::ElevatedStrokeCacheKeyHasher,std::equal_to<md::ElevatedStrokeCacheKey>,true>,std::__unordered_map_equal<md::ElevatedStrokeCacheKey,std::__hash_value_type<md::ElevatedStrokeCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>>>,std::equal_to<md::ElevatedStrokeCacheKey>,md::ElevatedStrokeCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::ElevatedStrokeCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>>>>>::find<md::ElevatedStrokeCacheKey>((_QWORD *)this + 848, v886 + 6);
                if (v890)
                {
                  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, (_QWORD *)this + 848, v890);
                  if (__p)
                    operator delete(__p);
                  v882 = *((_QWORD *)v886 + 2);
                }
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 853, v882);
                break;
              }
            }
            else
            {
              if (v888 >= *(_QWORD *)&v880)
                v888 %= *(_QWORD *)&v880;
              if (v888 != v884)
                break;
            }
            v886 = *(float **)v886;
          }
          while (v886);
        }
      }
LABEL_1683:
      while (++v881 != v865)
      {
        v880 = *(int8x8_t *)((char *)this + 6832);
        if (v880)
          goto LABEL_1658;
      }
    }
  }
  if (v872 != v873)
  {
    v891 = *(int8x8_t *)((char *)this + 6832);
    if (v891)
    {
      v892 = v872;
LABEL_1689:
      v893 = *v892;
      v894 = (uint8x8_t)vcnt_s8(v891);
      v894.i16[0] = vaddlv_u8(v894);
      if (v894.u32[0] > 1uLL)
      {
        v895 = *v892;
        if (v893 >= *(_QWORD *)&v891)
          v895 = v893 % *(_QWORD *)&v891;
      }
      else
      {
        v895 = (*(_QWORD *)&v891 - 1) & v893;
      }
      v896 = *(float ***)(*((_QWORD *)this + 853) + 8 * v895);
      if (v896)
      {
        v897 = *v896;
        if (*v896)
        {
          if (v894.u32[0] < 2uLL)
          {
            v898 = *(_QWORD *)&v891 - 1;
            while (1)
            {
              v900 = *((_QWORD *)v897 + 1);
              if (v900 == v893)
              {
                if (*((_QWORD *)v897 + 2) == v893)
                  goto LABEL_1709;
              }
              else if ((v900 & v898) != v895)
              {
                goto LABEL_1714;
              }
              v897 = *(float **)v897;
              if (!v897)
                goto LABEL_1714;
            }
          }
          do
          {
            v899 = *((_QWORD *)v897 + 1);
            if (v899 == v893)
            {
              if (*((_QWORD *)v897 + 2) == v893)
              {
LABEL_1709:
                v901 = std::__hash_table<std::__hash_value_type<md::ElevatedStrokeCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>>>,std::__unordered_map_hasher<md::ElevatedStrokeCacheKey,std::__hash_value_type<md::ElevatedStrokeCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>>>,md::ElevatedStrokeCacheKeyHasher,std::equal_to<md::ElevatedStrokeCacheKey>,true>,std::__unordered_map_equal<md::ElevatedStrokeCacheKey,std::__hash_value_type<md::ElevatedStrokeCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>>>,std::equal_to<md::ElevatedStrokeCacheKey>,md::ElevatedStrokeCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::ElevatedStrokeCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::ElevatedStroke>>>>>::find<md::ElevatedStrokeCacheKey>((_QWORD *)this + 848, v897 + 6);
                if (v901)
                {
                  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, (_QWORD *)this + 848, v901);
                  if (__p)
                    operator delete(__p);
                  v893 = *((_QWORD *)v897 + 2);
                }
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 853, v893);
                break;
              }
            }
            else
            {
              if (v899 >= *(_QWORD *)&v891)
                v899 %= *(_QWORD *)&v891;
              if (v899 != v895)
                break;
            }
            v897 = *(float **)v897;
          }
          while (v897);
        }
      }
LABEL_1714:
      while (++v892 != v873)
      {
        v891 = *(int8x8_t *)((char *)this + 6832);
        if (v891)
          goto LABEL_1689;
      }
    }
  }
  if (v872)
    operator delete(v872);
  if (v864)
    operator delete(v864);
  __p = 0;
  v1039 = 0;
  v1040 = 0;
  v1035 = 0;
  v1036 = 0;
  v1037 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 858, (uint64_t)&__p);
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 863, (uint64_t)&v1035);
  v902 = __p;
  v903 = v1039;
  if (__p != v1039)
  {
    v904 = __p;
    do
    {
      v905 = *v904;
      v906 = *((_QWORD *)this + 871);
      if (v905 < (*((_QWORD *)this + 872) - v906) >> 3)
      {
        v907 = *(_QWORD *)(v906 + 8 * v905);
        v908 = v907 && HIDWORD(*v904) == HIDWORD(v907);
        if (v908 && *((_QWORD *)this + 874) + 24 * v907 != *((_QWORD *)this + 875))
        {
          v909 = *(_QWORD *)(*((_QWORD *)this + 877) + 8 * v907);
          v1032 = v909 | ((unint64_t)*(unsigned int *)(v906 + 8 * v909 + 4) << 32);
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 6944, &v1032);
        }
      }
      ++v904;
    }
    while (v904 != v903);
  }
  v910 = v1035;
  v911 = v1036;
  if (v1035 != v1036)
  {
    v912 = v1035;
    do
    {
      v913 = *v912;
      v914 = *((_QWORD *)this + 871);
      if (v913 < (*((_QWORD *)this + 872) - v914) >> 3)
      {
        v915 = *(_QWORD *)(v914 + 8 * v913);
        v916 = v915 && HIDWORD(*v912) == HIDWORD(v915);
        if (v916 && *((_QWORD *)this + 874) + 24 * v915 != *((_QWORD *)this + 875))
        {
          v917 = *(_QWORD *)(*((_QWORD *)this + 877) + 8 * v915);
          v1032 = v917 | ((unint64_t)*(unsigned int *)(v914 + 8 * v917 + 4) << 32);
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 6944, &v1032);
        }
      }
      ++v912;
    }
    while (v912 != v911);
  }
  if (v910)
    operator delete(v910);
  if (v902)
    operator delete(v902);
  v1035 = 0;
  v1036 = 0;
  v1037 = 0;
  v1032 = 0;
  v1033 = 0;
  v1034 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 880, (uint64_t)&v1035);
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 885, (uint64_t)&v1032);
  v918 = v1035;
  v919 = v1036;
  if (v1035 != v1036)
  {
    v920 = v1035;
    do
    {
      v921 = *v920;
      v922 = *((_QWORD *)this + 893);
      if (v921 < (*((_QWORD *)this + 894) - v922) >> 3)
      {
        v923 = *(_QWORD *)(v922 + 8 * v921);
        v924 = v923 && HIDWORD(*v920) == HIDWORD(v923);
        if (v924 && *((_QWORD *)this + 896) + 24 * v923 != *((_QWORD *)this + 897))
        {
          v925 = *(_QWORD *)(*((_QWORD *)this + 899) + 8 * v923);
          __p = (void *)(v925 | ((unint64_t)*(unsigned int *)(v922 + 8 * v925 + 4) << 32));
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 7120, &__p);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>>>::__erase_unique<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>((uint64_t *)this + 902, *v920);
        }
      }
      ++v920;
    }
    while (v920 != v919);
  }
  v926 = (unint64_t *)v1032;
  v927 = v1033;
  if ((unint64_t *)v1032 != v1033)
  {
    v928 = (unint64_t *)v1032;
    do
    {
      v929 = *v928;
      v930 = *((_QWORD *)this + 893);
      if (v929 < (*((_QWORD *)this + 894) - v930) >> 3)
      {
        v931 = *(_QWORD *)(v930 + 8 * v929);
        v932 = v931 && HIDWORD(*v928) == HIDWORD(v931);
        if (v932 && *((_QWORD *)this + 896) + 24 * v931 != *((_QWORD *)this + 897))
        {
          v933 = *(_QWORD *)(*((_QWORD *)this + 899) + 8 * v931);
          __p = (void *)(v933 | ((unint64_t)*(unsigned int *)(v930 + 8 * v933 + 4) << 32));
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 7120, &__p);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>>>::__erase_unique<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>((uint64_t *)this + 902, *v928);
        }
      }
      ++v928;
    }
    while (v928 != v927);
  }
  if (v918 != v919)
  {
    v934 = *(int8x8_t *)((char *)this + 7304);
    if (v934)
    {
      v935 = v918;
LABEL_1772:
      v936 = *v935;
      v937 = (uint8x8_t)vcnt_s8(v934);
      v937.i16[0] = vaddlv_u8(v937);
      if (v937.u32[0] > 1uLL)
      {
        v938 = *v935;
        if (v936 >= *(_QWORD *)&v934)
          v938 = v936 % *(_QWORD *)&v934;
      }
      else
      {
        v938 = (*(_QWORD *)&v934 - 1) & v936;
      }
      v939 = *(uint64_t ***)(*((_QWORD *)this + 912) + 8 * v938);
      if (v939)
      {
        v940 = *v939;
        if (*v939)
        {
          if (v937.u32[0] < 2uLL)
          {
            v941 = *(_QWORD *)&v934 - 1;
            while (1)
            {
              v943 = v940[1];
              if (v943 == v936)
              {
                if (v940[2] == v936)
                  goto LABEL_1792;
              }
              else if ((v943 & v941) != v938)
              {
                goto LABEL_1797;
              }
              v940 = (uint64_t *)*v940;
              if (!v940)
                goto LABEL_1797;
            }
          }
          do
          {
            v942 = v940[1];
            if (v942 == v936)
            {
              if (v940[2] == v936)
              {
LABEL_1792:
                v944 = std::__hash_table<std::__hash_value_type<md::StyleGroundOcclusionCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleGroundOcclusion>>>,std::__unordered_map_hasher<md::StyleGroundOcclusionCacheKey,std::__hash_value_type<md::StyleGroundOcclusionCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleGroundOcclusion>>>,md::StyleGroundOcclusionCacheKeyHasher,std::equal_to<md::StyleGroundOcclusionCacheKey>,true>,std::__unordered_map_equal<md::StyleGroundOcclusionCacheKey,std::__hash_value_type<md::StyleGroundOcclusionCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleGroundOcclusion>>>,std::equal_to<md::StyleGroundOcclusionCacheKey>,md::StyleGroundOcclusionCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::StyleGroundOcclusionCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleGroundOcclusion>>>>>::find<md::StyleGroundOcclusionCacheKey>((_QWORD *)this + 907, *((_DWORD *)v940 + 6), *((_DWORD *)v940 + 7));
                if (v944)
                {
                  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, (_QWORD *)this + 907, v944);
                  if (__p)
                    operator delete(__p);
                  v936 = v940[2];
                }
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 912, v936);
                break;
              }
            }
            else
            {
              if (v942 >= *(_QWORD *)&v934)
                v942 %= *(_QWORD *)&v934;
              if (v942 != v938)
                break;
            }
            v940 = (uint64_t *)*v940;
          }
          while (v940);
        }
      }
LABEL_1797:
      while (++v935 != v919)
      {
        v934 = *(int8x8_t *)((char *)this + 7304);
        if (v934)
          goto LABEL_1772;
      }
    }
  }
  if (v926 != v927)
  {
    v945 = *(int8x8_t *)((char *)this + 7304);
    if (v945)
    {
      v946 = v926;
LABEL_1803:
      v947 = *v946;
      v948 = (uint8x8_t)vcnt_s8(v945);
      v948.i16[0] = vaddlv_u8(v948);
      if (v948.u32[0] > 1uLL)
      {
        v949 = *v946;
        if (v947 >= *(_QWORD *)&v945)
          v949 = v947 % *(_QWORD *)&v945;
      }
      else
      {
        v949 = (*(_QWORD *)&v945 - 1) & v947;
      }
      v950 = *(uint64_t ***)(*((_QWORD *)this + 912) + 8 * v949);
      if (v950)
      {
        v951 = *v950;
        if (*v950)
        {
          if (v948.u32[0] < 2uLL)
          {
            v952 = *(_QWORD *)&v945 - 1;
            while (1)
            {
              v954 = v951[1];
              if (v954 == v947)
              {
                if (v951[2] == v947)
                  goto LABEL_1823;
              }
              else if ((v954 & v952) != v949)
              {
                goto LABEL_1828;
              }
              v951 = (uint64_t *)*v951;
              if (!v951)
                goto LABEL_1828;
            }
          }
          do
          {
            v953 = v951[1];
            if (v953 == v947)
            {
              if (v951[2] == v947)
              {
LABEL_1823:
                v955 = std::__hash_table<std::__hash_value_type<md::StyleGroundOcclusionCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleGroundOcclusion>>>,std::__unordered_map_hasher<md::StyleGroundOcclusionCacheKey,std::__hash_value_type<md::StyleGroundOcclusionCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleGroundOcclusion>>>,md::StyleGroundOcclusionCacheKeyHasher,std::equal_to<md::StyleGroundOcclusionCacheKey>,true>,std::__unordered_map_equal<md::StyleGroundOcclusionCacheKey,std::__hash_value_type<md::StyleGroundOcclusionCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleGroundOcclusion>>>,std::equal_to<md::StyleGroundOcclusionCacheKey>,md::StyleGroundOcclusionCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::StyleGroundOcclusionCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleGroundOcclusion>>>>>::find<md::StyleGroundOcclusionCacheKey>((_QWORD *)this + 907, *((_DWORD *)v951 + 6), *((_DWORD *)v951 + 7));
                if (v955)
                {
                  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, (_QWORD *)this + 907, v955);
                  if (__p)
                    operator delete(__p);
                  v947 = v951[2];
                }
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 912, v947);
                break;
              }
            }
            else
            {
              if (v953 >= *(_QWORD *)&v945)
                v953 %= *(_QWORD *)&v945;
              if (v953 != v949)
                break;
            }
            v951 = (uint64_t *)*v951;
          }
          while (v951);
        }
      }
LABEL_1828:
      while (++v946 != v927)
      {
        v945 = *(int8x8_t *)((char *)this + 7304);
        if (v945)
          goto LABEL_1803;
      }
    }
  }
  if (v926)
    operator delete(v926);
  if (v918)
    operator delete(v918);
  v1035 = 0;
  v1036 = 0;
  v1037 = 0;
  v1032 = 0;
  v1033 = 0;
  v1034 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 917, (uint64_t)&v1035);
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 922, (uint64_t)&v1032);
  v956 = v1035;
  v957 = v1036;
  if (v1035 != v1036)
  {
    v958 = v1035;
    do
    {
      v959 = *v958;
      v960 = *((_QWORD *)this + 930);
      if (v959 < (*((_QWORD *)this + 931) - v960) >> 3)
      {
        v961 = *(_QWORD *)(v960 + 8 * v959);
        v962 = v961 && HIDWORD(*v958) == HIDWORD(v961);
        if (v962 && *((_QWORD *)this + 933) + 24 * v961 != *((_QWORD *)this + 934))
        {
          v963 = *(_QWORD *)(*((_QWORD *)this + 936) + 8 * v961);
          __p = (void *)(v963 | ((unint64_t)*(unsigned int *)(v960 + 8 * v963 + 4) << 32));
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 7416, &__p);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>>>::__erase_unique<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>((uint64_t *)this + 939, *v958);
        }
      }
      ++v958;
    }
    while (v958 != v957);
  }
  v964 = (unint64_t *)v1032;
  v965 = v1033;
  if ((unint64_t *)v1032 != v1033)
  {
    v966 = (unint64_t *)v1032;
    do
    {
      v967 = *v966;
      v968 = *((_QWORD *)this + 930);
      if (v967 < (*((_QWORD *)this + 931) - v968) >> 3)
      {
        v969 = *(_QWORD *)(v968 + 8 * v967);
        v970 = v969 && HIDWORD(*v966) == HIDWORD(v969);
        if (v970 && *((_QWORD *)this + 933) + 24 * v969 != *((_QWORD *)this + 934))
        {
          v971 = *(_QWORD *)(*((_QWORD *)this + 936) + 8 * v969);
          __p = (void *)(v971 | ((unint64_t)*(unsigned int *)(v968 + 8 * v971 + 4) << 32));
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 7416, &__p);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>>>::__erase_unique<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>((uint64_t *)this + 939, *v966);
        }
      }
      ++v966;
    }
    while (v966 != v965);
  }
  if (v956 != v957)
  {
    v972 = *(int8x8_t *)((char *)this + 7600);
    if (v972)
    {
      v973 = v956;
LABEL_1860:
      v974 = *v973;
      v975 = (uint8x8_t)vcnt_s8(v972);
      v975.i16[0] = vaddlv_u8(v975);
      if (v975.u32[0] > 1uLL)
      {
        v976 = *v973;
        if (v974 >= *(_QWORD *)&v972)
          v976 = v974 % *(_QWORD *)&v972;
      }
      else
      {
        v976 = (*(_QWORD *)&v972 - 1) & v974;
      }
      v977 = *(float ***)(*((_QWORD *)this + 949) + 8 * v976);
      if (v977)
      {
        v978 = *v977;
        if (*v977)
        {
          if (v975.u32[0] < 2uLL)
          {
            v979 = *(_QWORD *)&v972 - 1;
            while (1)
            {
              v981 = *((_QWORD *)v978 + 1);
              if (v981 == v974)
              {
                if (*((_QWORD *)v978 + 2) == v974)
                  goto LABEL_1880;
              }
              else if ((v981 & v979) != v976)
              {
                goto LABEL_1885;
              }
              v978 = *(float **)v978;
              if (!v978)
                goto LABEL_1885;
            }
          }
          do
          {
            v980 = *((_QWORD *)v978 + 1);
            if (v980 == v974)
            {
              if (*((_QWORD *)v978 + 2) == v974)
              {
LABEL_1880:
                v982 = std::__hash_table<std::__hash_value_type<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> *>,std::__unordered_map_hasher<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> *>,md::DaVinciGroundRenderLayer::ShinyStyleCacheKeyHasher,std::equal_to<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey>,true>,std::__unordered_map_equal<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> *>,std::equal_to<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey>,md::DaVinciGroundRenderLayer::ShinyStyleCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> *>>>::find<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey>((_QWORD *)this + 944, v978[6], v978[7]);
                if (v982)
                {
                  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, (_QWORD *)this + 944, v982);
                  if (__p)
                    operator delete(__p);
                  v974 = *((_QWORD *)v978 + 2);
                }
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 949, v974);
                break;
              }
            }
            else
            {
              if (v980 >= *(_QWORD *)&v972)
                v980 %= *(_QWORD *)&v972;
              if (v980 != v976)
                break;
            }
            v978 = *(float **)v978;
          }
          while (v978);
        }
      }
LABEL_1885:
      while (++v973 != v957)
      {
        v972 = *(int8x8_t *)((char *)this + 7600);
        if (v972)
          goto LABEL_1860;
      }
    }
  }
  if (v964 != v965)
  {
    v983 = *(int8x8_t *)((char *)this + 7600);
    if (v983)
    {
      v984 = v964;
LABEL_1891:
      v985 = *v984;
      v986 = (uint8x8_t)vcnt_s8(v983);
      v986.i16[0] = vaddlv_u8(v986);
      if (v986.u32[0] > 1uLL)
      {
        v987 = *v984;
        if (v985 >= *(_QWORD *)&v983)
          v987 = v985 % *(_QWORD *)&v983;
      }
      else
      {
        v987 = (*(_QWORD *)&v983 - 1) & v985;
      }
      v988 = *(float ***)(*((_QWORD *)this + 949) + 8 * v987);
      if (v988)
      {
        v989 = *v988;
        if (*v988)
        {
          if (v986.u32[0] < 2uLL)
          {
            v990 = *(_QWORD *)&v983 - 1;
            while (1)
            {
              v992 = *((_QWORD *)v989 + 1);
              if (v992 == v985)
              {
                if (*((_QWORD *)v989 + 2) == v985)
                  goto LABEL_1911;
              }
              else if ((v992 & v990) != v987)
              {
                goto LABEL_1916;
              }
              v989 = *(float **)v989;
              if (!v989)
                goto LABEL_1916;
            }
          }
          do
          {
            v991 = *((_QWORD *)v989 + 1);
            if (v991 == v985)
            {
              if (*((_QWORD *)v989 + 2) == v985)
              {
LABEL_1911:
                v993 = std::__hash_table<std::__hash_value_type<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> *>,std::__unordered_map_hasher<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> *>,md::DaVinciGroundRenderLayer::ShinyStyleCacheKeyHasher,std::equal_to<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey>,true>,std::__unordered_map_equal<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> *>,std::equal_to<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey>,md::DaVinciGroundRenderLayer::ShinyStyleCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> *>>>::find<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey>((_QWORD *)this + 944, v989[6], v989[7]);
                if (v993)
                {
                  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, (_QWORD *)this + 944, v993);
                  if (__p)
                    operator delete(__p);
                  v985 = *((_QWORD *)v989 + 2);
                }
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 949, v985);
                break;
              }
            }
            else
            {
              if (v991 >= *(_QWORD *)&v983)
                v991 %= *(_QWORD *)&v983;
              if (v991 != v987)
                break;
            }
            v989 = *(float **)v989;
          }
          while (v989);
        }
      }
LABEL_1916:
      while (++v984 != v965)
      {
        v983 = *(int8x8_t *)((char *)this + 7600);
        if (v983)
          goto LABEL_1891;
      }
    }
  }
  if (v964)
    operator delete(v964);
  if (v956)
    operator delete(v956);
  v1035 = 0;
  v1036 = 0;
  v1037 = 0;
  v1032 = 0;
  v1033 = 0;
  v1034 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 954, (uint64_t)&v1035);
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 959, (uint64_t)&v1032);
  v994 = v1035;
  v995 = v1036;
  if (v1035 != v1036)
  {
    v996 = v1035;
    do
    {
      v997 = *v996;
      v998 = *((_QWORD *)this + 967);
      if (v997 < (*((_QWORD *)this + 968) - v998) >> 3)
      {
        v999 = *(_QWORD *)(v998 + 8 * v997);
        v1000 = v999 && HIDWORD(*v996) == HIDWORD(v999);
        if (v1000 && *((_QWORD *)this + 970) + 24 * v999 != *((_QWORD *)this + 971))
        {
          v1001 = *(_QWORD *)(*((_QWORD *)this + 973) + 8 * v999);
          __p = (void *)(v1001 | ((unint64_t)*(unsigned int *)(v998 + 8 * v1001 + 4) << 32));
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 7712, &__p);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>>>::__erase_unique<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>((uint64_t *)this + 976, *v996);
        }
      }
      ++v996;
    }
    while (v996 != v995);
  }
  v1002 = (unint64_t *)v1032;
  v1003 = v1033;
  if ((unint64_t *)v1032 != v1033)
  {
    v1004 = (unint64_t *)v1032;
    do
    {
      v1005 = *v1004;
      v1006 = *((_QWORD *)this + 967);
      if (v1005 < (*((_QWORD *)this + 968) - v1006) >> 3)
      {
        v1007 = *(_QWORD *)(v1006 + 8 * v1005);
        v1008 = v1007 && HIDWORD(*v1004) == HIDWORD(v1007);
        if (v1008 && *((_QWORD *)this + 970) + 24 * v1007 != *((_QWORD *)this + 971))
        {
          v1009 = *(_QWORD *)(*((_QWORD *)this + 973) + 8 * v1007);
          __p = (void *)(v1009 | ((unint64_t)*(unsigned int *)(v1006 + 8 * v1009 + 4) << 32));
          geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase((uint64_t)this + 7712, &__p);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>>>::__erase_unique<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>((uint64_t *)this + 976, *v1004);
        }
      }
      ++v1004;
    }
    while (v1004 != v1003);
  }
  if (v994 != v995)
  {
    v1010 = *(int8x8_t *)((char *)this + 7896);
    if (v1010)
    {
      v1011 = v994;
LABEL_1948:
      v1012 = *v1011;
      v1013 = (uint8x8_t)vcnt_s8(v1010);
      v1013.i16[0] = vaddlv_u8(v1013);
      if (v1013.u32[0] > 1uLL)
      {
        v1014 = *v1011;
        if (v1012 >= *(_QWORD *)&v1010)
          v1014 = v1012 % *(_QWORD *)&v1010;
      }
      else
      {
        v1014 = (*(_QWORD *)&v1010 - 1) & v1012;
      }
      v1015 = *(float ***)(*((_QWORD *)this + 986) + 8 * v1014);
      if (v1015)
      {
        v1016 = *v1015;
        if (*v1015)
        {
          if (v1013.u32[0] < 2uLL)
          {
            v1017 = *(_QWORD *)&v1010 - 1;
            while (1)
            {
              v1019 = *((_QWORD *)v1016 + 1);
              if (v1019 == v1012)
              {
                if (*((_QWORD *)v1016 + 2) == v1012)
                  goto LABEL_1968;
              }
              else if ((v1019 & v1017) != v1014)
              {
                goto LABEL_1973;
              }
              v1016 = *(float **)v1016;
              if (!v1016)
                goto LABEL_1973;
            }
          }
          do
          {
            v1018 = *((_QWORD *)v1016 + 1);
            if (v1018 == v1012)
            {
              if (*((_QWORD *)v1016 + 2) == v1012)
              {
LABEL_1968:
                v1020 = std::__hash_table<std::__hash_value_type<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> *>,std::__unordered_map_hasher<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> *>,md::DaVinciGroundRenderLayer::ShinyStyleCacheKeyHasher,std::equal_to<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey>,true>,std::__unordered_map_equal<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> *>,std::equal_to<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey>,md::DaVinciGroundRenderLayer::ShinyStyleCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> *>>>::find<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey>((_QWORD *)this + 981, v1016[6], v1016[7]);
                if (v1020)
                {
                  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, (_QWORD *)this + 981, v1020);
                  if (__p)
                    operator delete(__p);
                  v1012 = *((_QWORD *)v1016 + 2);
                }
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 986, v1012);
                break;
              }
            }
            else
            {
              if (v1018 >= *(_QWORD *)&v1010)
                v1018 %= *(_QWORD *)&v1010;
              if (v1018 != v1014)
                break;
            }
            v1016 = *(float **)v1016;
          }
          while (v1016);
        }
      }
LABEL_1973:
      while (++v1011 != v995)
      {
        v1010 = *(int8x8_t *)((char *)this + 7896);
        if (v1010)
          goto LABEL_1948;
      }
    }
  }
  if (v1002 != v1003)
  {
    v1021 = *(int8x8_t *)((char *)this + 7896);
    if (v1021)
    {
      v1022 = v1002;
LABEL_1979:
      v1023 = *v1022;
      v1024 = (uint8x8_t)vcnt_s8(v1021);
      v1024.i16[0] = vaddlv_u8(v1024);
      if (v1024.u32[0] > 1uLL)
      {
        v1025 = *v1022;
        if (v1023 >= *(_QWORD *)&v1021)
          v1025 = v1023 % *(_QWORD *)&v1021;
      }
      else
      {
        v1025 = (*(_QWORD *)&v1021 - 1) & v1023;
      }
      v1026 = *(float ***)(*((_QWORD *)this + 986) + 8 * v1025);
      if (v1026)
      {
        v1027 = *v1026;
        if (*v1026)
        {
          if (v1024.u32[0] < 2uLL)
          {
            v1028 = *(_QWORD *)&v1021 - 1;
            while (1)
            {
              v1030 = *((_QWORD *)v1027 + 1);
              if (v1030 == v1023)
              {
                if (*((_QWORD *)v1027 + 2) == v1023)
                  goto LABEL_1999;
              }
              else if ((v1030 & v1028) != v1025)
              {
                goto LABEL_2004;
              }
              v1027 = *(float **)v1027;
              if (!v1027)
                goto LABEL_2004;
            }
          }
          do
          {
            v1029 = *((_QWORD *)v1027 + 1);
            if (v1029 == v1023)
            {
              if (*((_QWORD *)v1027 + 2) == v1023)
              {
LABEL_1999:
                v1031 = std::__hash_table<std::__hash_value_type<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> *>,std::__unordered_map_hasher<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> *>,md::DaVinciGroundRenderLayer::ShinyStyleCacheKeyHasher,std::equal_to<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey>,true>,std::__unordered_map_equal<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> *>,std::equal_to<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey>,md::DaVinciGroundRenderLayer::ShinyStyleCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> *>>>::find<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey>((_QWORD *)this + 981, v1027[6], v1027[7]);
                if (v1031)
                {
                  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, (_QWORD *)this + 981, v1031);
                  if (__p)
                    operator delete(__p);
                  v1023 = *((_QWORD *)v1027 + 2);
                }
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 986, v1023);
                break;
              }
            }
            else
            {
              if (v1029 >= *(_QWORD *)&v1021)
                v1029 %= *(_QWORD *)&v1021;
              if (v1029 != v1025)
                break;
            }
            v1027 = *(float **)v1027;
          }
          while (v1027);
        }
      }
LABEL_2004:
      while (++v1022 != v1003)
      {
        v1021 = *(int8x8_t *)((char *)this + 7896);
        if (v1021)
          goto LABEL_1979;
      }
    }
  }
  if (v1002)
    operator delete(v1002);
  if (v994)
    operator delete(v994);
}

void sub_19FE3CAB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  _Unwind_Resume(exception_object);
}

void geo::packed_array<md::ConstantDataStorage<ggl::DaVinci::MaterialStyle>,geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>::erase(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v9;
  unint64_t *v10;
  _QWORD *v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  unint64_t *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  unint64_t *v24;
  uint64_t v25;
  __int128 v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 *v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  __int128 v50;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 24);
  if (v2 < (*(_QWORD *)(a1 + 32) - v3) >> 3)
  {
    v4 = *(_QWORD *)(v3 + 8 * v2);
    v6 = v4 == 0;
    v5 = HIDWORD(v4);
    v6 = !v6 && HIDWORD(*a2) == (_DWORD)v5;
    if (v6)
    {
      v10 = *(unint64_t **)(a1 + 8);
      v9 = *(_QWORD *)(a1 + 16);
      if ((unint64_t)v10 >= v9)
      {
        v12 = *(unint64_t **)a1;
        v13 = (uint64_t)v10 - *(_QWORD *)a1;
        v14 = v13 >> 3;
        v15 = (v13 >> 3) + 1;
        if (v15 >> 61)
          abort();
        v16 = v9 - (_QWORD)v12;
        if (v16 >> 2 > v15)
          v15 = v16 >> 2;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
        {
          if (v17 >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v18 = operator new(8 * v17);
        }
        else
        {
          v18 = 0;
        }
        v19 = (unint64_t *)&v18[8 * v14];
        v20 = &v18[8 * v17];
        *v19 = v2;
        v11 = v19 + 1;
        if (v10 != v12)
        {
          v21 = (char *)v10 - (char *)v12 - 8;
          if (v21 < 0x58)
            goto LABEL_49;
          if ((unint64_t)((char *)v10 - v18 - v13) < 0x20)
            goto LABEL_49;
          v22 = (v21 >> 3) + 1;
          v23 = &v18[8 * v14 - 16];
          v24 = v10 - 2;
          v25 = v22 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v26 = *(_OWORD *)v24;
            *(v23 - 1) = *((_OWORD *)v24 - 1);
            *v23 = v26;
            v23 -= 2;
            v24 -= 4;
            v25 -= 4;
          }
          while (v25);
          v19 -= v22 & 0x3FFFFFFFFFFFFFFCLL;
          v10 -= v22 & 0x3FFFFFFFFFFFFFFCLL;
          if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_49:
            do
            {
              v27 = *--v10;
              *--v19 = v27;
            }
            while (v10 != v12);
          }
        }
        *(_QWORD *)a1 = v19;
        *(_QWORD *)(a1 + 8) = v11;
        *(_QWORD *)(a1 + 16) = v20;
        if (v12)
        {
          operator delete(v12);
          v3 = *(_QWORD *)(a1 + 24);
        }
      }
      else
      {
        *v10 = v2;
        v11 = v10 + 1;
      }
      *(_QWORD *)(a1 + 8) = v11;
      v28 = *(unsigned int *)(v3 + 8 * *(unsigned int *)a2);
      v29 = *(_QWORD *)(a1 + 48);
      v30 = *(_QWORD *)(a1 + 56);
      v31 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 0x5555555555555558 * ((unint64_t)(v30 - v29) >> 3) - 8);
      v32 = (__int128 *)(v29 + 24 * v28);
      v33 = *v32;
      v34 = *((_QWORD *)v32 + 2);
      *((_QWORD *)v32 + 1) = 0;
      *((_QWORD *)v32 + 2) = 0;
      *(_QWORD *)v32 = *(_QWORD *)(v30 - 24);
      v35 = *(_OWORD *)(v30 - 16);
      *(_QWORD *)(v30 - 16) = 0;
      *(_QWORD *)(v30 - 8) = 0;
      v36 = (std::__shared_weak_count *)*((_QWORD *)v32 + 2);
      *(__int128 *)((char *)v32 + 8) = v35;
      if (v36)
      {
        p_shared_owners = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldaxr(p_shared_owners);
        while (__stlxr(v38 - 1, p_shared_owners));
        if (!v38)
        {
          v50 = v33;
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
          v33 = v50;
        }
      }
      *(_OWORD *)(v30 - 24) = v33;
      v39 = *(std::__shared_weak_count **)(v30 - 8);
      *(_QWORD *)(v30 - 8) = v34;
      if (v39)
      {
        v40 = (unint64_t *)&v39->__shared_owners_;
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 24) + 8 * v31) = v28;
      v42 = *(_QWORD *)(a1 + 72);
      v43 = *(_QWORD *)(a1 + 80);
      v44 = *(_QWORD *)(v42 + 8 * v28);
      *(_QWORD *)(v42 + 8 * v28) = *(_QWORD *)(v43 - 8);
      *(_QWORD *)(v43 - 8) = v44;
      v45 = *(_QWORD *)(a1 + 56);
      v46 = *(std::__shared_weak_count **)(v45 - 8);
      if (v46)
      {
        v47 = (unint64_t *)&v46->__shared_owners_;
        do
          v48 = __ldaxr(v47);
        while (__stlxr(v48 - 1, v47));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
      }
      *(_QWORD *)(a1 + 56) = v45 - 24;
      *(_QWORD *)(a1 + 80) -= 8;
      v49 = 8 * *(unsigned int *)a2;
      *(_DWORD *)(*(_QWORD *)(a1 + 24) + v49 + 4) = (((unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 24) + v49 + 4) << 32)
                                                   + 0x100000000) >> 32;
      *(_DWORD *)(*(_QWORD *)(a1 + 24) + v49) = (*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3;
    }
  }
}

void std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::unique_ptr<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>>>::__erase_unique<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>(uint64_t *a1, unint64_t a2)
{
  int8x8_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v2 = (int8x8_t)a1[1];
  if (v2)
  {
    v3 = (uint8x8_t)vcnt_s8(v2);
    v3.i16[0] = vaddlv_u8(v3);
    if (v3.u32[0] > 1uLL)
    {
      v4 = a2;
      if (*(_QWORD *)&v2 <= a2)
        v4 = a2 % *(_QWORD *)&v2;
    }
    else
    {
      v4 = (*(_QWORD *)&v2 - 1) & a2;
    }
    v5 = *a1;
    v6 = *(uint64_t ***)(*a1 + 8 * v4);
    if (v6)
    {
      v7 = *v6;
      if (*v6)
      {
        v8 = *(_QWORD *)&v2 - 1;
        if (v3.u32[0] < 2uLL)
        {
          while (1)
          {
            v9 = v7[1];
            if (v9 == a2)
            {
              if (v7[2] == a2)
                goto LABEL_22;
            }
            else if ((v9 & v8) != v4)
            {
              return;
            }
            v7 = (uint64_t *)*v7;
            if (!v7)
              return;
          }
        }
        do
        {
          v10 = v7[1];
          if (v10 == a2)
          {
            if (v7[2] == a2)
            {
LABEL_22:
              if (v3.u32[0] > 1uLL)
              {
                if (*(_QWORD *)&v2 <= a2)
                  a2 %= *(_QWORD *)&v2;
              }
              else
              {
                a2 &= v8;
              }
              v11 = *(uint64_t **)(v5 + 8 * a2);
              do
              {
                v12 = v11;
                v11 = (uint64_t *)*v11;
              }
              while (v11 != v7);
              if (v12 == a1 + 2)
                goto LABEL_39;
              v13 = v12[1];
              if (v3.u32[0] > 1uLL)
              {
                if (v13 >= *(_QWORD *)&v2)
                  v13 %= *(_QWORD *)&v2;
              }
              else
              {
                v13 &= v8;
              }
              if (v13 != a2)
              {
LABEL_39:
                if (!*v7)
                  goto LABEL_40;
                v14 = *(_QWORD *)(*v7 + 8);
                if (v3.u32[0] > 1uLL)
                {
                  if (v14 >= *(_QWORD *)&v2)
                    v14 %= *(_QWORD *)&v2;
                }
                else
                {
                  v14 &= v8;
                }
                if (v14 != a2)
LABEL_40:
                  *(_QWORD *)(v5 + 8 * a2) = 0;
              }
              v15 = *v7;
              if (*v7)
              {
                v16 = *(_QWORD *)(v15 + 8);
                if (v3.u32[0] > 1uLL)
                {
                  if (v16 >= *(_QWORD *)&v2)
                    v16 %= *(_QWORD *)&v2;
                }
                else
                {
                  v16 &= v8;
                }
                if (v16 != a2)
                {
                  *(_QWORD *)(*a1 + 8 * v16) = v12;
                  v15 = *v7;
                }
              }
              *v12 = v15;
              *v7 = 0;
              --a1[3];
              v17 = v7[3];
              v7[3] = 0;
              if (v17)
                (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
              operator delete(v7);
              return;
            }
          }
          else
          {
            if (v10 >= *(_QWORD *)&v2)
              v10 %= *(_QWORD *)&v2;
            if (v10 != v4)
              return;
          }
          v7 = (uint64_t *)*v7;
        }
        while (v7);
      }
    }
  }
}

void geo::packed_array<md::CachedKey<md::ColorStyleCacheKey>,geo::handle<md::CachedKey<md::ColorStyleCacheKey>>>::erase(uint64_t a1, _QWORD *a2, double a3, __n128 a4, float a5, float a6)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  unint64_t v13;
  unint64_t *v14;
  _QWORD *v15;
  unint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  unint64_t *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  __n128 *v27;
  __n128 *v28;
  uint64_t v29;
  __n128 v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char v37;
  int v38;
  _BYTE *v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 24);
  if (v6 < (*(_QWORD *)(a1 + 32) - v7) >> 3)
  {
    v8 = *(_QWORD *)(v7 + 8 * v6);
    v10 = v8 == 0;
    v9 = HIDWORD(v8);
    v10 = !v10 && HIDWORD(*a2) == (_DWORD)v9;
    if (v10)
    {
      v14 = *(unint64_t **)(a1 + 8);
      v13 = *(_QWORD *)(a1 + 16);
      if ((unint64_t)v14 >= v13)
      {
        v16 = *(unint64_t **)a1;
        v17 = (uint64_t)v14 - *(_QWORD *)a1;
        v18 = v17 >> 3;
        v19 = (v17 >> 3) + 1;
        if (v19 >> 61)
          abort();
        v20 = v13 - (_QWORD)v16;
        if (v20 >> 2 > v19)
          v19 = v20 >> 2;
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
          v21 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v21 = v19;
        if (v21)
        {
          if (v21 >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v22 = operator new(8 * v21);
        }
        else
        {
          v22 = 0;
        }
        v23 = (unint64_t *)&v22[8 * v18];
        v24 = &v22[8 * v21];
        *v23 = v6;
        v15 = v23 + 1;
        if (v14 != v16)
        {
          v25 = (char *)v14 - (char *)v16 - 8;
          if (v25 < 0x58)
            goto LABEL_48;
          if ((unint64_t)((char *)v14 - v22 - v17) < 0x20)
            goto LABEL_48;
          v26 = (v25 >> 3) + 1;
          v27 = (__n128 *)&v22[8 * v18 - 16];
          v28 = (__n128 *)(v14 - 2);
          v29 = v26 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            a4 = v28[-1];
            v30 = *v28;
            v27[-1] = a4;
            *v27 = v30;
            v27 -= 2;
            v28 -= 2;
            v29 -= 4;
          }
          while (v29);
          v23 -= v26 & 0x3FFFFFFFFFFFFFFCLL;
          v14 -= v26 & 0x3FFFFFFFFFFFFFFCLL;
          if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_48:
            do
            {
              v31 = *--v14;
              *--v23 = v31;
            }
            while (v14 != v16);
          }
        }
        *(_QWORD *)a1 = v23;
        *(_QWORD *)(a1 + 8) = v15;
        *(_QWORD *)(a1 + 16) = v24;
        if (v16)
        {
          operator delete(v16);
          v7 = *(_QWORD *)(a1 + 24);
        }
      }
      else
      {
        *v14 = v6;
        v15 = v14 + 1;
      }
      *(_QWORD *)(a1 + 8) = v15;
      v32 = *(unsigned int *)(v7 + 8 * *(unsigned int *)a2);
      v34 = *(_QWORD *)(a1 + 48);
      v33 = *(_QWORD *)(a1 + 56);
      v35 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 0x5555555555555558 * ((unint64_t)(v33 - v34) >> 3) - 8);
      v36 = (char *)(v34 + 24 * v32);
      v37 = *v36;
      if (v36[20])
      {
        v38 = *((_DWORD *)v36 + 1);
        a4.n128_u32[0] = *((_DWORD *)v36 + 2);
        a5 = *((float *)v36 + 3);
        a6 = *((float *)v36 + 4);
        v39 = (_BYTE *)(v33 - 4);
        v40 = *(unsigned __int8 *)(v33 - 4);
        *v36 = *(_BYTE *)(v33 - 24);
        if (v40)
        {
          *((_DWORD *)v36 + 1) = *(_DWORD *)(v33 - 20);
          *((_DWORD *)v36 + 2) = *(_DWORD *)(v33 - 16);
          *((_DWORD *)v36 + 3) = *(_DWORD *)(v33 - 12);
          *((_DWORD *)v36 + 4) = *(_DWORD *)(v33 - 8);
        }
        else
        {
          v36[20] = 0;
        }
        v41 = 1;
      }
      else
      {
        v39 = (_BYTE *)(v33 - 4);
        v41 = *(unsigned __int8 *)(v33 - 4);
        *v36 = *(_BYTE *)(v33 - 24);
        v38 = 0;
        if (v41)
        {
          v41 = 0;
          a4 = *(__n128 *)(v33 - 20);
          *(__n128 *)(v36 + 4) = a4;
          v36[20] = 1;
        }
      }
      *(_BYTE *)(v33 - 24) = v37;
      if (*(unsigned __int8 *)(v33 - 4) == v41)
      {
        if (*(_BYTE *)(v33 - 4))
        {
          *(_DWORD *)(v33 - 20) = v38;
          *(_DWORD *)(v33 - 16) = a4.n128_u32[0];
          *(float *)(v33 - 12) = a5;
          *(float *)(v33 - 8) = a6;
        }
      }
      else if (*(_BYTE *)(v33 - 4))
      {
        *v39 = 0;
      }
      else
      {
        *(_DWORD *)(v33 - 20) = v38;
        *(_DWORD *)(v33 - 16) = a4.n128_u32[0];
        *(float *)(v33 - 12) = a5;
        *(float *)(v33 - 8) = a6;
        *(_BYTE *)(v33 - 4) = 1;
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 24) + 8 * v35) = v32;
      v42 = 8 * v32;
      v43 = *(_QWORD *)(a1 + 72);
      v44 = *(_QWORD **)(a1 + 80);
      v45 = *(_QWORD *)(v43 + v42);
      v46 = *--v44;
      *(_QWORD *)(v43 + v42) = v46;
      *v44 = v45;
      *(_QWORD *)(a1 + 56) -= 24;
      *(_QWORD *)(a1 + 80) = v44;
      v47 = 8 * *(unsigned int *)a2;
      *(_DWORD *)(*(_QWORD *)(a1 + 24) + v47 + 4) = (((unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 24) + v47 + 4) << 32)
                                                   + 0x100000000) >> 32;
      *(_DWORD *)(*(_QWORD *)(a1 + 24) + v47) = (*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3;
    }
  }
}

void std::__hash_table<std::__hash_value_type<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>,std::unique_ptr<md::CachedKey<md::ColorStyleCacheKey>>>,std::__unordered_map_hasher<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>,std::__hash_value_type<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>,std::unique_ptr<md::CachedKey<md::ColorStyleCacheKey>>>,std::hash<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>>,std::equal_to<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>>,true>,std::__unordered_map_equal<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>,std::__hash_value_type<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>,std::unique_ptr<md::CachedKey<md::ColorStyleCacheKey>>>,std::equal_to<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>>,std::hash<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>,std::unique_ptr<md::CachedKey<md::ColorStyleCacheKey>>>>>::__erase_unique<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>>(uint64_t *a1, unint64_t a2)
{
  int8x8_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v2 = (int8x8_t)a1[1];
  if (v2)
  {
    v3 = (uint8x8_t)vcnt_s8(v2);
    v3.i16[0] = vaddlv_u8(v3);
    if (v3.u32[0] > 1uLL)
    {
      v4 = a2;
      if (*(_QWORD *)&v2 <= a2)
        v4 = a2 % *(_QWORD *)&v2;
    }
    else
    {
      v4 = (*(_QWORD *)&v2 - 1) & a2;
    }
    v5 = *a1;
    v6 = *(uint64_t ***)(*a1 + 8 * v4);
    if (v6)
    {
      v7 = *v6;
      if (*v6)
      {
        v8 = *(_QWORD *)&v2 - 1;
        if (v3.u32[0] < 2uLL)
        {
          while (1)
          {
            v9 = v7[1];
            if (v9 == a2)
            {
              if (v7[2] == a2)
                goto LABEL_22;
            }
            else if ((v9 & v8) != v4)
            {
              return;
            }
            v7 = (uint64_t *)*v7;
            if (!v7)
              return;
          }
        }
        do
        {
          v10 = v7[1];
          if (v10 == a2)
          {
            if (v7[2] == a2)
            {
LABEL_22:
              if (v3.u32[0] > 1uLL)
              {
                if (*(_QWORD *)&v2 <= a2)
                  a2 %= *(_QWORD *)&v2;
              }
              else
              {
                a2 &= v8;
              }
              v11 = *(uint64_t **)(v5 + 8 * a2);
              do
              {
                v12 = v11;
                v11 = (uint64_t *)*v11;
              }
              while (v11 != v7);
              if (v12 == a1 + 2)
                goto LABEL_39;
              v13 = v12[1];
              if (v3.u32[0] > 1uLL)
              {
                if (v13 >= *(_QWORD *)&v2)
                  v13 %= *(_QWORD *)&v2;
              }
              else
              {
                v13 &= v8;
              }
              if (v13 != a2)
              {
LABEL_39:
                if (!*v7)
                  goto LABEL_40;
                v14 = *(_QWORD *)(*v7 + 8);
                if (v3.u32[0] > 1uLL)
                {
                  if (v14 >= *(_QWORD *)&v2)
                    v14 %= *(_QWORD *)&v2;
                }
                else
                {
                  v14 &= v8;
                }
                if (v14 != a2)
LABEL_40:
                  *(_QWORD *)(v5 + 8 * a2) = 0;
              }
              v15 = *v7;
              if (*v7)
              {
                v16 = *(_QWORD *)(v15 + 8);
                if (v3.u32[0] > 1uLL)
                {
                  if (v16 >= *(_QWORD *)&v2)
                    v16 %= *(_QWORD *)&v2;
                }
                else
                {
                  v16 &= v8;
                }
                if (v16 != a2)
                {
                  *(_QWORD *)(*a1 + 8 * v16) = v12;
                  v15 = *v7;
                }
              }
              *v12 = v15;
              *v7 = 0;
              --a1[3];
              v17 = v7[3];
              v7[3] = 0;
              if (v17)
                MEMORY[0x1A1AF4E00](v17, 0x1000C40B9F3BD1DLL);
              operator delete(v7);
              return;
            }
          }
          else
          {
            if (v10 >= *(_QWORD *)&v2)
              v10 %= *(_QWORD *)&v2;
            if (v10 != v4)
              return;
          }
          v7 = (uint64_t *)*v7;
        }
        while (v7);
      }
    }
  }
}

float geo::packed_array<md::CachedKey<md::StyleCacheKey>,geo::handle<md::CachedKey<md::StyleCacheKey>>>::erase(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v9;
  unint64_t *v10;
  _QWORD *v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  unint64_t *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  unint64_t *v24;
  uint64_t v25;
  __int128 v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char v33;
  __int128 v34;
  float result;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 24);
  if (v2 < (*(_QWORD *)(a1 + 32) - v3) >> 3)
  {
    v4 = *(_QWORD *)(v3 + 8 * v2);
    v6 = v4 == 0;
    v5 = HIDWORD(v4);
    v6 = !v6 && HIDWORD(*a2) == (_DWORD)v5;
    if (v6)
    {
      v10 = *(unint64_t **)(a1 + 8);
      v9 = *(_QWORD *)(a1 + 16);
      if ((unint64_t)v10 >= v9)
      {
        v12 = *(unint64_t **)a1;
        v13 = (uint64_t)v10 - *(_QWORD *)a1;
        v14 = v13 >> 3;
        v15 = (v13 >> 3) + 1;
        if (v15 >> 61)
          abort();
        v16 = v9 - (_QWORD)v12;
        if (v16 >> 2 > v15)
          v15 = v16 >> 2;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
        {
          if (v17 >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v18 = operator new(8 * v17);
        }
        else
        {
          v18 = 0;
        }
        v19 = (unint64_t *)&v18[8 * v14];
        v20 = &v18[8 * v17];
        *v19 = v2;
        v11 = v19 + 1;
        if (v10 != v12)
        {
          v21 = (char *)v10 - (char *)v12 - 8;
          if (v21 < 0x58)
            goto LABEL_34;
          if ((unint64_t)((char *)v10 - v18 - v13) < 0x20)
            goto LABEL_34;
          v22 = (v21 >> 3) + 1;
          v23 = &v18[8 * v14 - 16];
          v24 = v10 - 2;
          v25 = v22 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v26 = *(_OWORD *)v24;
            *(v23 - 1) = *((_OWORD *)v24 - 1);
            *v23 = v26;
            v23 -= 2;
            v24 -= 4;
            v25 -= 4;
          }
          while (v25);
          v19 -= v22 & 0x3FFFFFFFFFFFFFFCLL;
          v10 -= v22 & 0x3FFFFFFFFFFFFFFCLL;
          if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_34:
            do
            {
              v27 = *--v10;
              *--v19 = v27;
            }
            while (v10 != v12);
          }
        }
        *(_QWORD *)a1 = v19;
        *(_QWORD *)(a1 + 8) = v11;
        *(_QWORD *)(a1 + 16) = v20;
        if (v12)
        {
          operator delete(v12);
          v3 = *(_QWORD *)(a1 + 24);
        }
      }
      else
      {
        *v10 = v2;
        v11 = v10 + 1;
      }
      *(_QWORD *)(a1 + 8) = v11;
      v28 = *(_QWORD *)(v3 + 8 * *(unsigned int *)a2);
      v30 = *(_QWORD *)(a1 + 48);
      v29 = *(_QWORD *)(a1 + 56);
      v31 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 0x6666666666666668 * ((unint64_t)(v29 - v30) >> 2) - 8);
      v32 = (char *)(v30 + 20 * v28);
      v33 = *v32;
      *v32 = *(_BYTE *)(v29 - 20);
      v34 = *(_OWORD *)(v32 + 4);
      *((_DWORD *)v32 + 1) = *(_DWORD *)(v29 - 16);
      *((_DWORD *)v32 + 2) = *(_DWORD *)(v29 - 12);
      *((_DWORD *)v32 + 3) = *(_DWORD *)(v29 - 8);
      result = *(float *)(v29 - 4);
      *((float *)v32 + 4) = result;
      *(_BYTE *)(v29 - 20) = v33;
      *(_OWORD *)(v29 - 16) = v34;
      *(_DWORD *)(v3 + 8 * v31) = v28;
      v36 = 8 * v28;
      v37 = *(_QWORD *)(a1 + 72);
      v38 = *(_QWORD **)(a1 + 80);
      v39 = *(_QWORD *)(v37 + v36);
      v40 = *--v38;
      *(_QWORD *)(v37 + v36) = v40;
      *v38 = v39;
      *(_QWORD *)(a1 + 56) -= 20;
      *(_QWORD *)(a1 + 80) = v38;
      v41 = 8 * *(unsigned int *)a2;
      *(_DWORD *)(*(_QWORD *)(a1 + 24) + v41 + 4) = (((unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 24) + v41 + 4) << 32)
                                                   + 0x100000000) >> 32;
      *(_DWORD *)(*(_QWORD *)(a1 + 24) + v41) = (*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3;
    }
  }
  return result;
}

void std::__hash_table<std::__hash_value_type<geo::handle<md::CachedKey<md::StyleCacheKey>>,std::unique_ptr<md::CachedKey<md::StyleCacheKey>>>,std::__unordered_map_hasher<geo::handle<md::CachedKey<md::StyleCacheKey>>,std::__hash_value_type<geo::handle<md::CachedKey<md::StyleCacheKey>>,std::unique_ptr<md::CachedKey<md::StyleCacheKey>>>,std::hash<geo::handle<md::CachedKey<md::StyleCacheKey>>>,std::equal_to<geo::handle<md::CachedKey<md::StyleCacheKey>>>,true>,std::__unordered_map_equal<geo::handle<md::CachedKey<md::StyleCacheKey>>,std::__hash_value_type<geo::handle<md::CachedKey<md::StyleCacheKey>>,std::unique_ptr<md::CachedKey<md::StyleCacheKey>>>,std::equal_to<geo::handle<md::CachedKey<md::StyleCacheKey>>>,std::hash<geo::handle<md::CachedKey<md::StyleCacheKey>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::CachedKey<md::StyleCacheKey>>,std::unique_ptr<md::CachedKey<md::StyleCacheKey>>>>>::__erase_unique<geo::handle<md::CachedKey<md::StyleCacheKey>>>(uint64_t *a1, unint64_t a2)
{
  int8x8_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v2 = (int8x8_t)a1[1];
  if (v2)
  {
    v3 = (uint8x8_t)vcnt_s8(v2);
    v3.i16[0] = vaddlv_u8(v3);
    if (v3.u32[0] > 1uLL)
    {
      v4 = a2;
      if (*(_QWORD *)&v2 <= a2)
        v4 = a2 % *(_QWORD *)&v2;
    }
    else
    {
      v4 = (*(_QWORD *)&v2 - 1) & a2;
    }
    v5 = *a1;
    v6 = *(uint64_t ***)(*a1 + 8 * v4);
    if (v6)
    {
      v7 = *v6;
      if (*v6)
      {
        v8 = *(_QWORD *)&v2 - 1;
        if (v3.u32[0] < 2uLL)
        {
          while (1)
          {
            v9 = v7[1];
            if (v9 == a2)
            {
              if (v7[2] == a2)
                goto LABEL_22;
            }
            else if ((v9 & v8) != v4)
            {
              return;
            }
            v7 = (uint64_t *)*v7;
            if (!v7)
              return;
          }
        }
        do
        {
          v10 = v7[1];
          if (v10 == a2)
          {
            if (v7[2] == a2)
            {
LABEL_22:
              if (v3.u32[0] > 1uLL)
              {
                if (*(_QWORD *)&v2 <= a2)
                  a2 %= *(_QWORD *)&v2;
              }
              else
              {
                a2 &= v8;
              }
              v11 = *(uint64_t **)(v5 + 8 * a2);
              do
              {
                v12 = v11;
                v11 = (uint64_t *)*v11;
              }
              while (v11 != v7);
              if (v12 == a1 + 2)
                goto LABEL_39;
              v13 = v12[1];
              if (v3.u32[0] > 1uLL)
              {
                if (v13 >= *(_QWORD *)&v2)
                  v13 %= *(_QWORD *)&v2;
              }
              else
              {
                v13 &= v8;
              }
              if (v13 != a2)
              {
LABEL_39:
                if (!*v7)
                  goto LABEL_40;
                v14 = *(_QWORD *)(*v7 + 8);
                if (v3.u32[0] > 1uLL)
                {
                  if (v14 >= *(_QWORD *)&v2)
                    v14 %= *(_QWORD *)&v2;
                }
                else
                {
                  v14 &= v8;
                }
                if (v14 != a2)
LABEL_40:
                  *(_QWORD *)(v5 + 8 * a2) = 0;
              }
              v15 = *v7;
              if (*v7)
              {
                v16 = *(_QWORD *)(v15 + 8);
                if (v3.u32[0] > 1uLL)
                {
                  if (v16 >= *(_QWORD *)&v2)
                    v16 %= *(_QWORD *)&v2;
                }
                else
                {
                  v16 &= v8;
                }
                if (v16 != a2)
                {
                  *(_QWORD *)(*a1 + 8 * v16) = v12;
                  v15 = *v7;
                }
              }
              *v12 = v15;
              *v7 = 0;
              --a1[3];
              v17 = v7[3];
              v7[3] = 0;
              if (v17)
                MEMORY[0x1A1AF4E00](v17, 0x1000C40B4868423);
              operator delete(v7);
              return;
            }
          }
          else
          {
            if (v10 >= *(_QWORD *)&v2)
              v10 %= *(_QWORD *)&v2;
            if (v10 != v4)
              return;
          }
          v7 = (uint64_t *)*v7;
        }
        while (v7);
      }
    }
  }
}

float geo::packed_array<md::CachedKey<md::StyleEmissiveColorCacheKey>,geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>>::erase(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v9;
  unint64_t *v10;
  _QWORD *v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  unint64_t *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  unint64_t *v24;
  uint64_t v25;
  __int128 v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  float result;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 24);
  if (v2 < (*(_QWORD *)(a1 + 32) - v3) >> 3)
  {
    v4 = *(_QWORD *)(v3 + 8 * v2);
    v6 = v4 == 0;
    v5 = HIDWORD(v4);
    v6 = !v6 && HIDWORD(*a2) == (_DWORD)v5;
    if (v6)
    {
      v10 = *(unint64_t **)(a1 + 8);
      v9 = *(_QWORD *)(a1 + 16);
      if ((unint64_t)v10 >= v9)
      {
        v12 = *(unint64_t **)a1;
        v13 = (uint64_t)v10 - *(_QWORD *)a1;
        v14 = v13 >> 3;
        v15 = (v13 >> 3) + 1;
        if (v15 >> 61)
          abort();
        v16 = v9 - (_QWORD)v12;
        if (v16 >> 2 > v15)
          v15 = v16 >> 2;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
        {
          if (v17 >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v18 = operator new(8 * v17);
        }
        else
        {
          v18 = 0;
        }
        v19 = (unint64_t *)&v18[8 * v14];
        v20 = &v18[8 * v17];
        *v19 = v2;
        v11 = v19 + 1;
        if (v10 != v12)
        {
          v21 = (char *)v10 - (char *)v12 - 8;
          if (v21 < 0x58)
            goto LABEL_34;
          if ((unint64_t)((char *)v10 - v18 - v13) < 0x20)
            goto LABEL_34;
          v22 = (v21 >> 3) + 1;
          v23 = &v18[8 * v14 - 16];
          v24 = v10 - 2;
          v25 = v22 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v26 = *(_OWORD *)v24;
            *(v23 - 1) = *((_OWORD *)v24 - 1);
            *v23 = v26;
            v23 -= 2;
            v24 -= 4;
            v25 -= 4;
          }
          while (v25);
          v19 -= v22 & 0x3FFFFFFFFFFFFFFCLL;
          v10 -= v22 & 0x3FFFFFFFFFFFFFFCLL;
          if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_34:
            do
            {
              v27 = *--v10;
              *--v19 = v27;
            }
            while (v10 != v12);
          }
        }
        *(_QWORD *)a1 = v19;
        *(_QWORD *)(a1 + 8) = v11;
        *(_QWORD *)(a1 + 16) = v20;
        if (v12)
        {
          operator delete(v12);
          v3 = *(_QWORD *)(a1 + 24);
        }
      }
      else
      {
        *v10 = v2;
        v11 = v10 + 1;
      }
      *(_QWORD *)(a1 + 8) = v11;
      v28 = *(_QWORD *)(v3 + 8 * *(unsigned int *)a2);
      v30 = *(_QWORD *)(a1 + 48);
      v29 = *(_QWORD *)(a1 + 56);
      v31 = *(_QWORD *)(a1 + 72) + 0x5555555555555558 * ((unint64_t)(v29 - v30) >> 3);
      v32 = (uint64_t *)(v30 + 24 * v28);
      v33 = *v32;
      v34 = v32[1];
      *v32 = *(_QWORD *)(v29 - 24);
      v35 = *(_QWORD *)(v31 - 8);
      v36 = *((_DWORD *)v32 + 4);
      *((_DWORD *)v32 + 2) = *(_DWORD *)(v29 - 16);
      *((_DWORD *)v32 + 3) = *(_DWORD *)(v29 - 12);
      result = *(float *)(v29 - 8);
      *((float *)v32 + 4) = result;
      *(_DWORD *)(v29 - 8) = v36;
      *(_QWORD *)(v29 - 24) = v33;
      *(_QWORD *)(v29 - 16) = v34;
      *(_DWORD *)(v3 + 8 * v35) = v28;
      v38 = 8 * v28;
      v39 = *(_QWORD *)(a1 + 72);
      v40 = *(_QWORD **)(a1 + 80);
      v41 = *(_QWORD *)(v39 + v38);
      v42 = *--v40;
      *(_QWORD *)(v39 + v38) = v42;
      *v40 = v41;
      *(_QWORD *)(a1 + 56) -= 24;
      *(_QWORD *)(a1 + 80) = v40;
      v43 = 8 * *(unsigned int *)a2;
      *(_DWORD *)(*(_QWORD *)(a1 + 24) + v43 + 4) = (((unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 24) + v43 + 4) << 32)
                                                   + 0x100000000) >> 32;
      *(_DWORD *)(*(_QWORD *)(a1 + 24) + v43) = (*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3;
    }
  }
  return result;
}

void std::__hash_table<std::__hash_value_type<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,std::unique_ptr<md::CachedKey<md::StyleEmissiveColorCacheKey>>>,std::__unordered_map_hasher<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,std::__hash_value_type<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,std::unique_ptr<md::CachedKey<md::StyleEmissiveColorCacheKey>>>,std::hash<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>>,std::equal_to<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>>,true>,std::__unordered_map_equal<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,std::__hash_value_type<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,std::unique_ptr<md::CachedKey<md::StyleEmissiveColorCacheKey>>>,std::equal_to<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>>,std::hash<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,std::unique_ptr<md::CachedKey<md::StyleEmissiveColorCacheKey>>>>>::__erase_unique<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>>(uint64_t *a1, unint64_t a2)
{
  int8x8_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v2 = (int8x8_t)a1[1];
  if (v2)
  {
    v3 = (uint8x8_t)vcnt_s8(v2);
    v3.i16[0] = vaddlv_u8(v3);
    if (v3.u32[0] > 1uLL)
    {
      v4 = a2;
      if (*(_QWORD *)&v2 <= a2)
        v4 = a2 % *(_QWORD *)&v2;
    }
    else
    {
      v4 = (*(_QWORD *)&v2 - 1) & a2;
    }
    v5 = *a1;
    v6 = *(uint64_t ***)(*a1 + 8 * v4);
    if (v6)
    {
      v7 = *v6;
      if (*v6)
      {
        v8 = *(_QWORD *)&v2 - 1;
        if (v3.u32[0] < 2uLL)
        {
          while (1)
          {
            v9 = v7[1];
            if (v9 == a2)
            {
              if (v7[2] == a2)
                goto LABEL_22;
            }
            else if ((v9 & v8) != v4)
            {
              return;
            }
            v7 = (uint64_t *)*v7;
            if (!v7)
              return;
          }
        }
        do
        {
          v10 = v7[1];
          if (v10 == a2)
          {
            if (v7[2] == a2)
            {
LABEL_22:
              if (v3.u32[0] > 1uLL)
              {
                if (*(_QWORD *)&v2 <= a2)
                  a2 %= *(_QWORD *)&v2;
              }
              else
              {
                a2 &= v8;
              }
              v11 = *(uint64_t **)(v5 + 8 * a2);
              do
              {
                v12 = v11;
                v11 = (uint64_t *)*v11;
              }
              while (v11 != v7);
              if (v12 == a1 + 2)
                goto LABEL_39;
              v13 = v12[1];
              if (v3.u32[0] > 1uLL)
              {
                if (v13 >= *(_QWORD *)&v2)
                  v13 %= *(_QWORD *)&v2;
              }
              else
              {
                v13 &= v8;
              }
              if (v13 != a2)
              {
LABEL_39:
                if (!*v7)
                  goto LABEL_40;
                v14 = *(_QWORD *)(*v7 + 8);
                if (v3.u32[0] > 1uLL)
                {
                  if (v14 >= *(_QWORD *)&v2)
                    v14 %= *(_QWORD *)&v2;
                }
                else
                {
                  v14 &= v8;
                }
                if (v14 != a2)
LABEL_40:
                  *(_QWORD *)(v5 + 8 * a2) = 0;
              }
              v15 = *v7;
              if (*v7)
              {
                v16 = *(_QWORD *)(v15 + 8);
                if (v3.u32[0] > 1uLL)
                {
                  if (v16 >= *(_QWORD *)&v2)
                    v16 %= *(_QWORD *)&v2;
                }
                else
                {
                  v16 &= v8;
                }
                if (v16 != a2)
                {
                  *(_QWORD *)(*a1 + 8 * v16) = v12;
                  v15 = *v7;
                }
              }
              *v12 = v15;
              *v7 = 0;
              --a1[3];
              v17 = v7[3];
              v7[3] = 0;
              if (v17)
                MEMORY[0x1A1AF4E00](v17, 0x1000C400CE834B2);
              operator delete(v7);
              return;
            }
          }
          else
          {
            if (v10 >= *(_QWORD *)&v2)
              v10 %= *(_QWORD *)&v2;
            if (v10 != v4)
              return;
          }
          v7 = (uint64_t *)*v7;
        }
        while (v7);
      }
    }
  }
}

void geo::packed_array<md::MapDataTypeStorage,geo::handle<md::MapDataType>>::erase(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v9;
  unint64_t *v10;
  _QWORD *v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  unint64_t *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  unint64_t *v24;
  uint64_t v25;
  __int128 v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 24);
  if (v2 < (*(_QWORD *)(a1 + 32) - v3) >> 3)
  {
    v4 = *(_QWORD *)(v3 + 8 * v2);
    v6 = v4 == 0;
    v5 = HIDWORD(v4);
    v6 = !v6 && HIDWORD(*a2) == (_DWORD)v5;
    if (v6)
    {
      v10 = *(unint64_t **)(a1 + 8);
      v9 = *(_QWORD *)(a1 + 16);
      if ((unint64_t)v10 >= v9)
      {
        v12 = *(unint64_t **)a1;
        v13 = (uint64_t)v10 - *(_QWORD *)a1;
        v14 = v13 >> 3;
        v15 = (v13 >> 3) + 1;
        if (v15 >> 61)
          abort();
        v16 = v9 - (_QWORD)v12;
        if (v16 >> 2 > v15)
          v15 = v16 >> 2;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
        {
          if (v17 >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v18 = operator new(8 * v17);
        }
        else
        {
          v18 = 0;
        }
        v19 = (unint64_t *)&v18[8 * v14];
        v20 = &v18[8 * v17];
        *v19 = v2;
        v11 = v19 + 1;
        if (v10 != v12)
        {
          v21 = (char *)v10 - (char *)v12 - 8;
          if (v21 < 0x58)
            goto LABEL_34;
          if ((unint64_t)((char *)v10 - v18 - v13) < 0x20)
            goto LABEL_34;
          v22 = (v21 >> 3) + 1;
          v23 = &v18[8 * v14 - 16];
          v24 = v10 - 2;
          v25 = v22 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v26 = *(_OWORD *)v24;
            *(v23 - 1) = *((_OWORD *)v24 - 1);
            *v23 = v26;
            v23 -= 2;
            v24 -= 4;
            v25 -= 4;
          }
          while (v25);
          v19 -= v22 & 0x3FFFFFFFFFFFFFFCLL;
          v10 -= v22 & 0x3FFFFFFFFFFFFFFCLL;
          if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_34:
            do
            {
              v27 = *--v10;
              *--v19 = v27;
            }
            while (v10 != v12);
          }
        }
        *(_QWORD *)a1 = v19;
        *(_QWORD *)(a1 + 8) = v11;
        *(_QWORD *)(a1 + 16) = v20;
        if (v12)
        {
          operator delete(v12);
          v3 = *(_QWORD *)(a1 + 24);
        }
      }
      else
      {
        *v10 = v2;
        v11 = v10 + 1;
      }
      *(_QWORD *)(a1 + 8) = v11;
      v28 = *(_QWORD *)(v3 + 8 * *(unsigned int *)a2);
      v30 = *(_QWORD *)(a1 + 48);
      v29 = *(_QWORD *)(a1 + 56);
      v31 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 4 * (v29 - v30) - 8);
      v32 = *(_WORD *)(v30 + 2 * v28);
      *(_WORD *)(v30 + 2 * v28) = *(_WORD *)(v29 - 2);
      *(_WORD *)(v29 - 2) = v32;
      *(_DWORD *)(v3 + 8 * v31) = v28;
      v33 = 8 * v28;
      v34 = *(_QWORD *)(a1 + 72);
      v35 = *(_QWORD **)(a1 + 80);
      v36 = *(_QWORD *)(v34 + v33);
      v37 = *--v35;
      *(_QWORD *)(v34 + v33) = v37;
      *v35 = v36;
      *(_QWORD *)(a1 + 56) -= 2;
      *(_QWORD *)(a1 + 80) = v35;
      v38 = 8 * *(unsigned int *)a2;
      *(_DWORD *)(*(_QWORD *)(a1 + 24) + v38 + 4) = (((unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 24) + v38 + 4) << 32)
                                                   + 0x100000000) >> 32;
      *(_DWORD *)(*(_QWORD *)(a1 + 24) + v38) = (*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3;
    }
  }
}

void geo::packed_array<md::LayerTypeStorage,geo::handle<md::LayerType>>::erase(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v9;
  unint64_t *v10;
  _QWORD *v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  unint64_t *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  unint64_t *v24;
  uint64_t v25;
  __int128 v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 24);
  if (v2 < (*(_QWORD *)(a1 + 32) - v3) >> 3)
  {
    v4 = *(_QWORD *)(v3 + 8 * v2);
    v6 = v4 == 0;
    v5 = HIDWORD(v4);
    v6 = !v6 && HIDWORD(*a2) == (_DWORD)v5;
    if (v6)
    {
      v10 = *(unint64_t **)(a1 + 8);
      v9 = *(_QWORD *)(a1 + 16);
      if ((unint64_t)v10 >= v9)
      {
        v12 = *(unint64_t **)a1;
        v13 = (uint64_t)v10 - *(_QWORD *)a1;
        v14 = v13 >> 3;
        v15 = (v13 >> 3) + 1;
        if (v15 >> 61)
          abort();
        v16 = v9 - (_QWORD)v12;
        if (v16 >> 2 > v15)
          v15 = v16 >> 2;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
        {
          if (v17 >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v18 = operator new(8 * v17);
        }
        else
        {
          v18 = 0;
        }
        v19 = (unint64_t *)&v18[8 * v14];
        v20 = &v18[8 * v17];
        *v19 = v2;
        v11 = v19 + 1;
        if (v10 != v12)
        {
          v21 = (char *)v10 - (char *)v12 - 8;
          if (v21 < 0x58)
            goto LABEL_34;
          if ((unint64_t)((char *)v10 - v18 - v13) < 0x20)
            goto LABEL_34;
          v22 = (v21 >> 3) + 1;
          v23 = &v18[8 * v14 - 16];
          v24 = v10 - 2;
          v25 = v22 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v26 = *(_OWORD *)v24;
            *(v23 - 1) = *((_OWORD *)v24 - 1);
            *v23 = v26;
            v23 -= 2;
            v24 -= 4;
            v25 -= 4;
          }
          while (v25);
          v19 -= v22 & 0x3FFFFFFFFFFFFFFCLL;
          v10 -= v22 & 0x3FFFFFFFFFFFFFFCLL;
          if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_34:
            do
            {
              v27 = *--v10;
              *--v19 = v27;
            }
            while (v10 != v12);
          }
        }
        *(_QWORD *)a1 = v19;
        *(_QWORD *)(a1 + 8) = v11;
        *(_QWORD *)(a1 + 16) = v20;
        if (v12)
        {
          operator delete(v12);
          v3 = *(_QWORD *)(a1 + 24);
        }
      }
      else
      {
        *v10 = v2;
        v11 = v10 + 1;
      }
      *(_QWORD *)(a1 + 8) = v11;
      v28 = *(_QWORD *)(v3 + 8 * *(unsigned int *)a2);
      v30 = *(_QWORD *)(a1 + 48);
      v29 = *(_QWORD *)(a1 + 56);
      v31 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * (~v30 + v29));
      v32 = *(_BYTE *)(v30 + v28);
      *(_BYTE *)(v30 + v28) = *(_BYTE *)(v29 - 1);
      *(_BYTE *)(v29 - 1) = v32;
      *(_DWORD *)(v3 + 8 * v31) = v28;
      v33 = 8 * v28;
      v34 = *(_QWORD *)(a1 + 72);
      v35 = *(_QWORD **)(a1 + 80);
      v36 = *(_QWORD *)(v34 + v33);
      v37 = *--v35;
      *(_QWORD *)(v34 + v33) = v37;
      *v35 = v36;
      --*(_QWORD *)(a1 + 56);
      *(_QWORD *)(a1 + 80) = v35;
      v38 = 8 * *(unsigned int *)a2;
      *(_DWORD *)(*(_QWORD *)(a1 + 24) + v38 + 4) = (((unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 24) + v38 + 4) << 32)
                                                   + 0x100000000) >> 32;
      *(_DWORD *)(*(_QWORD *)(a1 + 24) + v38) = (*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3;
    }
  }
}

__n128 geo::packed_array<md::ColorRampDataStorage,geo::handle<md::ColorRampData>>::erase(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v9;
  unint64_t *v10;
  _QWORD *v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  unint64_t *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  unint64_t *v24;
  uint64_t v25;
  __int128 v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __n128 result;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 24);
  if (v2 < (*(_QWORD *)(a1 + 32) - v3) >> 3)
  {
    v4 = *(_QWORD *)(v3 + 8 * v2);
    v6 = v4 == 0;
    v5 = HIDWORD(v4);
    v6 = !v6 && HIDWORD(*a2) == (_DWORD)v5;
    if (v6)
    {
      v10 = *(unint64_t **)(a1 + 8);
      v9 = *(_QWORD *)(a1 + 16);
      if ((unint64_t)v10 >= v9)
      {
        v12 = *(unint64_t **)a1;
        v13 = (uint64_t)v10 - *(_QWORD *)a1;
        v14 = v13 >> 3;
        v15 = (v13 >> 3) + 1;
        if (v15 >> 61)
          abort();
        v16 = v9 - (_QWORD)v12;
        if (v16 >> 2 > v15)
          v15 = v16 >> 2;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
        {
          if (v17 >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v18 = operator new(8 * v17);
        }
        else
        {
          v18 = 0;
        }
        v19 = (unint64_t *)&v18[8 * v14];
        v20 = &v18[8 * v17];
        *v19 = v2;
        v11 = v19 + 1;
        if (v10 != v12)
        {
          v21 = (char *)v10 - (char *)v12 - 8;
          if (v21 < 0x58)
            goto LABEL_34;
          if ((unint64_t)((char *)v10 - v18 - v13) < 0x20)
            goto LABEL_34;
          v22 = (v21 >> 3) + 1;
          v23 = &v18[8 * v14 - 16];
          v24 = v10 - 2;
          v25 = v22 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v26 = *(_OWORD *)v24;
            *(v23 - 1) = *((_OWORD *)v24 - 1);
            *v23 = v26;
            v23 -= 2;
            v24 -= 4;
            v25 -= 4;
          }
          while (v25);
          v19 -= v22 & 0x3FFFFFFFFFFFFFFCLL;
          v10 -= v22 & 0x3FFFFFFFFFFFFFFCLL;
          if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_34:
            do
            {
              v27 = *--v10;
              *--v19 = v27;
            }
            while (v10 != v12);
          }
        }
        *(_QWORD *)a1 = v19;
        *(_QWORD *)(a1 + 8) = v11;
        *(_QWORD *)(a1 + 16) = v20;
        if (v12)
        {
          operator delete(v12);
          v3 = *(_QWORD *)(a1 + 24);
        }
      }
      else
      {
        *v10 = v2;
        v11 = v10 + 1;
      }
      *(_QWORD *)(a1 + 8) = v11;
      v28 = *(_QWORD *)(v3 + 8 * *(unsigned int *)a2);
      v30 = *(_QWORD *)(a1 + 48);
      v29 = *(_QWORD *)(a1 + 56);
      v31 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 0x6666666666666668 * ((unint64_t)(v29 - v30) >> 3) - 8);
      v32 = v30 + 40 * v28;
      result = *(__n128 *)v32;
      v34 = *(_OWORD *)(v32 + 16);
      v35 = *(_QWORD *)(v32 + 32);
      v36 = *(_QWORD *)(v29 - 8);
      v37 = *(_OWORD *)(v29 - 24);
      *(_OWORD *)v32 = *(_OWORD *)(v29 - 40);
      *(_OWORD *)(v32 + 16) = v37;
      *(_QWORD *)(v32 + 32) = v36;
      *(_QWORD *)(v29 - 8) = v35;
      *(_OWORD *)(v29 - 24) = v34;
      *(__n128 *)(v29 - 40) = result;
      *(_DWORD *)(*(_QWORD *)(a1 + 24) + 8 * v31) = v28;
      v38 = 8 * v28;
      v39 = *(_QWORD *)(a1 + 72);
      v40 = *(_QWORD **)(a1 + 80);
      v41 = *(_QWORD *)(v39 + v38);
      v42 = *--v40;
      *(_QWORD *)(v39 + v38) = v42;
      *v40 = v41;
      *(_QWORD *)(a1 + 56) -= 40;
      *(_QWORD *)(a1 + 80) = v40;
      v43 = 8 * *(unsigned int *)a2;
      *(_DWORD *)(*(_QWORD *)(a1 + 24) + v43 + 4) = (((unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 24) + v43 + 4) << 32)
                                                   + 0x100000000) >> 32;
      *(_DWORD *)(*(_QWORD *)(a1 + 24) + v43) = (*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3;
    }
  }
  return result;
}

__n128 geo::packed_array<md::RenderableDataStorage,geo::handle<md::RenderableDataItem>>::erase(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v9;
  unint64_t *v10;
  _QWORD *v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  unint64_t *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  unint64_t *v24;
  uint64_t v25;
  __int128 v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __n128 result;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 24);
  if (v2 < (*(_QWORD *)(a1 + 32) - v3) >> 3)
  {
    v4 = *(_QWORD *)(v3 + 8 * v2);
    v6 = v4 == 0;
    v5 = HIDWORD(v4);
    v6 = !v6 && HIDWORD(*a2) == (_DWORD)v5;
    if (v6)
    {
      v10 = *(unint64_t **)(a1 + 8);
      v9 = *(_QWORD *)(a1 + 16);
      if ((unint64_t)v10 >= v9)
      {
        v12 = *(unint64_t **)a1;
        v13 = (uint64_t)v10 - *(_QWORD *)a1;
        v14 = v13 >> 3;
        v15 = (v13 >> 3) + 1;
        if (v15 >> 61)
          abort();
        v16 = v9 - (_QWORD)v12;
        if (v16 >> 2 > v15)
          v15 = v16 >> 2;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
        {
          if (v17 >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v18 = operator new(8 * v17);
        }
        else
        {
          v18 = 0;
        }
        v19 = (unint64_t *)&v18[8 * v14];
        v20 = &v18[8 * v17];
        *v19 = v2;
        v11 = v19 + 1;
        if (v10 != v12)
        {
          v21 = (char *)v10 - (char *)v12 - 8;
          if (v21 < 0x58)
            goto LABEL_34;
          if ((unint64_t)((char *)v10 - v18 - v13) < 0x20)
            goto LABEL_34;
          v22 = (v21 >> 3) + 1;
          v23 = &v18[8 * v14 - 16];
          v24 = v10 - 2;
          v25 = v22 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v26 = *(_OWORD *)v24;
            *(v23 - 1) = *((_OWORD *)v24 - 1);
            *v23 = v26;
            v23 -= 2;
            v24 -= 4;
            v25 -= 4;
          }
          while (v25);
          v19 -= v22 & 0x3FFFFFFFFFFFFFFCLL;
          v10 -= v22 & 0x3FFFFFFFFFFFFFFCLL;
          if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_34:
            do
            {
              v27 = *--v10;
              *--v19 = v27;
            }
            while (v10 != v12);
          }
        }
        *(_QWORD *)a1 = v19;
        *(_QWORD *)(a1 + 8) = v11;
        *(_QWORD *)(a1 + 16) = v20;
        if (v12)
        {
          operator delete(v12);
          v3 = *(_QWORD *)(a1 + 24);
        }
      }
      else
      {
        *v10 = v2;
        v11 = v10 + 1;
      }
      *(_QWORD *)(a1 + 8) = v11;
      v28 = *(_QWORD *)(v3 + 8 * *(unsigned int *)a2);
      v30 = *(_QWORD *)(a1 + 48);
      v29 = *(_QWORD *)(a1 + 56);
      v31 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 0x7C57C57C57C57C58 * ((unint64_t)(v29 - v30) >> 3) - 8);
      v32 = v30 + 280 * v28;
      v33 = v29 - 280;
      result = *(__n128 *)v32;
      v35 = *(_OWORD *)(v32 + 16);
      v36 = *(_OWORD *)(v32 + 32);
      v37 = *(_OWORD *)(v32 + 48);
      v38 = *(_OWORD *)(v32 + 64);
      v39 = *(_OWORD *)(v32 + 80);
      v40 = *(_OWORD *)(v32 + 96);
      v41 = *(_OWORD *)(v32 + 112);
      v42 = *(_OWORD *)(v32 + 128);
      v43 = *(_OWORD *)(v32 + 144);
      v44 = *(_OWORD *)(v32 + 160);
      v45 = *(_OWORD *)(v32 + 176);
      v46 = *(_OWORD *)(v32 + 192);
      v47 = *(_OWORD *)(v32 + 208);
      v48 = *(_OWORD *)(v32 + 224);
      v49 = *(_OWORD *)(v32 + 240);
      v50 = *(_OWORD *)(v32 + 256);
      v51 = *(_QWORD *)(v32 + 272);
      *(_DWORD *)v32 = *(_DWORD *)(v29 - 280);
      *(_DWORD *)(v32 + 4) = *(_DWORD *)(v29 - 276);
      *(_DWORD *)(v32 + 8) = *(_DWORD *)(v29 - 272);
      *(_DWORD *)(v32 + 12) = *(_DWORD *)(v29 - 268);
      *(_DWORD *)(v32 + 16) = *(_DWORD *)(v29 - 264);
      *(_DWORD *)(v32 + 20) = *(_DWORD *)(v29 - 260);
      *(_DWORD *)(v32 + 24) = *(_DWORD *)(v29 - 256);
      *(_DWORD *)(v32 + 28) = *(_DWORD *)(v29 - 252);
      *(_DWORD *)(v32 + 32) = *(_DWORD *)(v29 - 248);
      *(_DWORD *)(v32 + 36) = *(_DWORD *)(v29 - 244);
      *(_DWORD *)(v32 + 40) = *(_DWORD *)(v29 - 240);
      *(_DWORD *)(v32 + 44) = *(_DWORD *)(v29 - 236);
      *(_DWORD *)(v32 + 48) = *(_DWORD *)(v29 - 232);
      *(_DWORD *)(v32 + 52) = *(_DWORD *)(v29 - 228);
      *(_DWORD *)(v32 + 56) = *(_DWORD *)(v29 - 224);
      *(_DWORD *)(v32 + 60) = *(_DWORD *)(v29 - 220);
      *(_DWORD *)(v32 + 64) = *(_DWORD *)(v29 - 216);
      *(_DWORD *)(v32 + 68) = *(_DWORD *)(v29 - 212);
      *(_DWORD *)(v32 + 72) = *(_DWORD *)(v29 - 208);
      *(_DWORD *)(v32 + 76) = *(_DWORD *)(v29 - 204);
      *(_DWORD *)(v32 + 80) = *(_DWORD *)(v29 - 200);
      *(_DWORD *)(v32 + 84) = *(_DWORD *)(v29 - 196);
      *(_DWORD *)(v32 + 88) = *(_DWORD *)(v29 - 192);
      *(_DWORD *)(v32 + 92) = *(_DWORD *)(v29 - 188);
      *(_DWORD *)(v32 + 96) = *(_DWORD *)(v29 - 184);
      *(_DWORD *)(v32 + 100) = *(_DWORD *)(v29 - 180);
      *(_DWORD *)(v32 + 104) = *(_DWORD *)(v29 - 176);
      *(_DWORD *)(v32 + 108) = *(_DWORD *)(v29 - 172);
      *(_DWORD *)(v32 + 112) = *(_DWORD *)(v29 - 168);
      *(_DWORD *)(v32 + 116) = *(_DWORD *)(v29 - 164);
      *(_DWORD *)(v32 + 120) = *(_DWORD *)(v29 - 160);
      *(_DWORD *)(v32 + 124) = *(_DWORD *)(v29 - 156);
      *(_DWORD *)(v32 + 128) = *(_DWORD *)(v29 - 152);
      *(_DWORD *)(v32 + 132) = *(_DWORD *)(v29 - 148);
      *(_DWORD *)(v32 + 136) = *(_DWORD *)(v29 - 144);
      *(_DWORD *)(v32 + 140) = *(_DWORD *)(v29 - 140);
      *(_DWORD *)(v32 + 144) = *(_DWORD *)(v29 - 136);
      *(_DWORD *)(v32 + 148) = *(_DWORD *)(v29 - 132);
      *(_DWORD *)(v32 + 152) = *(_DWORD *)(v29 - 128);
      *(_DWORD *)(v32 + 156) = *(_DWORD *)(v29 - 124);
      *(_DWORD *)(v32 + 160) = *(_DWORD *)(v29 - 120);
      *(_DWORD *)(v32 + 164) = *(_DWORD *)(v29 - 116);
      *(_DWORD *)(v32 + 168) = *(_DWORD *)(v29 - 112);
      *(_DWORD *)(v32 + 172) = *(_DWORD *)(v29 - 108);
      *(_DWORD *)(v32 + 176) = *(_DWORD *)(v29 - 104);
      *(_DWORD *)(v32 + 180) = *(_DWORD *)(v29 - 100);
      *(_DWORD *)(v32 + 184) = *(_DWORD *)(v29 - 96);
      *(_DWORD *)(v32 + 188) = *(_DWORD *)(v29 - 92);
      *(_DWORD *)(v32 + 192) = *(_DWORD *)(v29 - 88);
      *(_DWORD *)(v32 + 196) = *(_DWORD *)(v29 - 84);
      *(_DWORD *)(v32 + 200) = *(_DWORD *)(v29 - 80);
      *(_DWORD *)(v32 + 204) = *(_DWORD *)(v29 - 76);
      *(_DWORD *)(v32 + 208) = *(_DWORD *)(v29 - 72);
      *(_DWORD *)(v32 + 212) = *(_DWORD *)(v29 - 68);
      *(_DWORD *)(v32 + 216) = *(_DWORD *)(v29 - 64);
      *(_DWORD *)(v32 + 220) = *(_DWORD *)(v29 - 60);
      *(_DWORD *)(v32 + 224) = *(_DWORD *)(v29 - 56);
      *(_DWORD *)(v32 + 228) = *(_DWORD *)(v29 - 52);
      *(_DWORD *)(v32 + 232) = *(_DWORD *)(v29 - 48);
      *(_DWORD *)(v32 + 236) = *(_DWORD *)(v29 - 44);
      *(_DWORD *)(v32 + 240) = *(_DWORD *)(v29 - 40);
      *(_DWORD *)(v32 + 244) = *(_DWORD *)(v29 - 36);
      *(_DWORD *)(v32 + 248) = *(_DWORD *)(v29 - 32);
      *(_DWORD *)(v32 + 252) = *(_DWORD *)(v29 - 28);
      *(_DWORD *)(v32 + 256) = *(_DWORD *)(v29 - 24);
      *(_DWORD *)(v32 + 260) = *(_DWORD *)(v29 - 20);
      *(_DWORD *)(v32 + 264) = *(_DWORD *)(v29 - 16);
      *(_DWORD *)(v32 + 268) = *(_DWORD *)(v29 - 12);
      *(_DWORD *)(v32 + 272) = *(_DWORD *)(v29 - 8);
      *(_DWORD *)(v32 + 276) = *(_DWORD *)(v29 - 4);
      *(__n128 *)v33 = result;
      *(_OWORD *)(v33 + 16) = v35;
      *(_OWORD *)(v29 - 248) = v36;
      *(_OWORD *)(v29 - 232) = v37;
      *(_OWORD *)(v29 - 216) = v38;
      *(_OWORD *)(v29 - 200) = v39;
      *(_OWORD *)(v29 - 184) = v40;
      *(_OWORD *)(v29 - 168) = v41;
      *(_OWORD *)(v29 - 152) = v42;
      *(_OWORD *)(v29 - 136) = v43;
      *(_OWORD *)(v29 - 120) = v44;
      *(_OWORD *)(v29 - 104) = v45;
      *(_OWORD *)(v29 - 88) = v46;
      *(_OWORD *)(v29 - 72) = v47;
      *(_OWORD *)(v29 - 56) = v48;
      *(_OWORD *)(v29 - 40) = v49;
      *(_OWORD *)(v29 - 24) = v50;
      *(_QWORD *)(v29 - 8) = v51;
      *(_DWORD *)(*(_QWORD *)(a1 + 24) + 8 * v31) = v28;
      v52 = 8 * v28;
      v53 = *(_QWORD *)(a1 + 72);
      v54 = *(_QWORD **)(a1 + 80);
      v55 = *(_QWORD *)(v53 + v52);
      v56 = *--v54;
      *(_QWORD *)(v53 + v52) = v56;
      *v54 = v55;
      *(_QWORD *)(a1 + 56) -= 280;
      *(_QWORD *)(a1 + 80) = v54;
      v57 = 8 * *(unsigned int *)a2;
      *(_DWORD *)(*(_QWORD *)(a1 + 24) + v57 + 4) = (((unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 24) + v57 + 4) << 32)
                                                   + 0x100000000) >> 32;
      *(_DWORD *)(*(_QWORD *)(a1 + 24) + v57) = (*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3;
    }
  }
  return result;
}

__n128 geo::packed_array<md::TileMatrixStorage,geo::handle<md::TileMatrix>>::erase(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v9;
  unint64_t *v10;
  _QWORD *v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  unint64_t *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  unint64_t *v24;
  uint64_t v25;
  __int128 v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __n128 result;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 24);
  if (v2 < (*(_QWORD *)(a1 + 32) - v3) >> 3)
  {
    v4 = *(_QWORD *)(v3 + 8 * v2);
    v6 = v4 == 0;
    v5 = HIDWORD(v4);
    v6 = !v6 && HIDWORD(*a2) == (_DWORD)v5;
    if (v6)
    {
      v10 = *(unint64_t **)(a1 + 8);
      v9 = *(_QWORD *)(a1 + 16);
      if ((unint64_t)v10 >= v9)
      {
        v12 = *(unint64_t **)a1;
        v13 = (uint64_t)v10 - *(_QWORD *)a1;
        v14 = v13 >> 3;
        v15 = (v13 >> 3) + 1;
        if (v15 >> 61)
          abort();
        v16 = v9 - (_QWORD)v12;
        if (v16 >> 2 > v15)
          v15 = v16 >> 2;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
        {
          if (v17 >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v18 = operator new(8 * v17);
        }
        else
        {
          v18 = 0;
        }
        v19 = (unint64_t *)&v18[8 * v14];
        v20 = &v18[8 * v17];
        *v19 = v2;
        v11 = v19 + 1;
        if (v10 != v12)
        {
          v21 = (char *)v10 - (char *)v12 - 8;
          if (v21 < 0x58)
            goto LABEL_34;
          if ((unint64_t)((char *)v10 - v18 - v13) < 0x20)
            goto LABEL_34;
          v22 = (v21 >> 3) + 1;
          v23 = &v18[8 * v14 - 16];
          v24 = v10 - 2;
          v25 = v22 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v26 = *(_OWORD *)v24;
            *(v23 - 1) = *((_OWORD *)v24 - 1);
            *v23 = v26;
            v23 -= 2;
            v24 -= 4;
            v25 -= 4;
          }
          while (v25);
          v19 -= v22 & 0x3FFFFFFFFFFFFFFCLL;
          v10 -= v22 & 0x3FFFFFFFFFFFFFFCLL;
          if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_34:
            do
            {
              v27 = *--v10;
              *--v19 = v27;
            }
            while (v10 != v12);
          }
        }
        *(_QWORD *)a1 = v19;
        *(_QWORD *)(a1 + 8) = v11;
        *(_QWORD *)(a1 + 16) = v20;
        if (v12)
        {
          operator delete(v12);
          v3 = *(_QWORD *)(a1 + 24);
        }
      }
      else
      {
        *v10 = v2;
        v11 = v10 + 1;
      }
      *(_QWORD *)(a1 + 8) = v11;
      v28 = *(_QWORD *)(v3 + 8 * *(unsigned int *)a2);
      v30 = *(_QWORD *)(a1 + 48);
      v29 = *(_QWORD *)(a1 + 56);
      v31 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + ((v29 - v30) >> 5) - 8);
      v32 = v30 + ((unint64_t)v28 << 8);
      result = *(__n128 *)v32;
      v34 = *(_OWORD *)(v32 + 16);
      *(_QWORD *)v32 = *(_QWORD *)(v29 - 256);
      *(_QWORD *)(v32 + 8) = *(_QWORD *)(v29 - 248);
      *(_QWORD *)(v32 + 16) = *(_QWORD *)(v29 - 240);
      *(_QWORD *)(v32 + 24) = *(_QWORD *)(v29 - 232);
      v35 = *(_OWORD *)(v32 + 32);
      v36 = *(_OWORD *)(v32 + 48);
      *(_QWORD *)(v32 + 32) = *(_QWORD *)(v29 - 224);
      *(_QWORD *)(v32 + 40) = *(_QWORD *)(v29 - 216);
      *(_QWORD *)(v32 + 48) = *(_QWORD *)(v29 - 208);
      *(_QWORD *)(v32 + 56) = *(_QWORD *)(v29 - 200);
      v37 = *(_OWORD *)(v32 + 64);
      v38 = *(_OWORD *)(v32 + 80);
      *(_QWORD *)(v32 + 64) = *(_QWORD *)(v29 - 192);
      *(_QWORD *)(v32 + 72) = *(_QWORD *)(v29 - 184);
      *(_QWORD *)(v32 + 80) = *(_QWORD *)(v29 - 176);
      *(_QWORD *)(v32 + 88) = *(_QWORD *)(v29 - 168);
      v39 = *(_OWORD *)(v32 + 96);
      v40 = *(_OWORD *)(v32 + 112);
      *(_QWORD *)(v32 + 96) = *(_QWORD *)(v29 - 160);
      *(_QWORD *)(v32 + 104) = *(_QWORD *)(v29 - 152);
      *(_QWORD *)(v32 + 112) = *(_QWORD *)(v29 - 144);
      *(_QWORD *)(v32 + 120) = *(_QWORD *)(v29 - 136);
      v41 = *(_OWORD *)(v32 + 128);
      v42 = *(_OWORD *)(v32 + 144);
      *(_QWORD *)(v32 + 128) = *(_QWORD *)(v29 - 128);
      *(_QWORD *)(v32 + 136) = *(_QWORD *)(v29 - 120);
      *(_QWORD *)(v32 + 144) = *(_QWORD *)(v29 - 112);
      *(_QWORD *)(v32 + 152) = *(_QWORD *)(v29 - 104);
      v43 = *(_OWORD *)(v32 + 160);
      v44 = *(_OWORD *)(v32 + 176);
      *(_QWORD *)(v32 + 160) = *(_QWORD *)(v29 - 96);
      *(_QWORD *)(v32 + 168) = *(_QWORD *)(v29 - 88);
      *(_QWORD *)(v32 + 176) = *(_QWORD *)(v29 - 80);
      *(_QWORD *)(v32 + 184) = *(_QWORD *)(v29 - 72);
      v45 = *(_OWORD *)(v32 + 192);
      v46 = *(_OWORD *)(v32 + 208);
      *(_QWORD *)(v32 + 192) = *(_QWORD *)(v29 - 64);
      *(_QWORD *)(v32 + 200) = *(_QWORD *)(v29 - 56);
      *(_QWORD *)(v32 + 208) = *(_QWORD *)(v29 - 48);
      *(_QWORD *)(v32 + 216) = *(_QWORD *)(v29 - 40);
      v47 = *(_OWORD *)(v32 + 224);
      v48 = *(_OWORD *)(v32 + 240);
      *(_QWORD *)(v32 + 224) = *(_QWORD *)(v29 - 32);
      *(_QWORD *)(v32 + 232) = *(_QWORD *)(v29 - 24);
      *(_QWORD *)(v32 + 240) = *(_QWORD *)(v29 - 16);
      *(_QWORD *)(v32 + 248) = *(_QWORD *)(v29 - 8);
      *(__n128 *)(v29 - 256) = result;
      *(_OWORD *)(v29 - 240) = v34;
      *(_OWORD *)(v29 - 224) = v35;
      *(_OWORD *)(v29 - 208) = v36;
      *(_OWORD *)(v29 - 192) = v37;
      *(_OWORD *)(v29 - 176) = v38;
      *(_OWORD *)(v29 - 160) = v39;
      *(_OWORD *)(v29 - 144) = v40;
      *(_OWORD *)(v29 - 128) = v41;
      *(_OWORD *)(v29 - 112) = v42;
      *(_OWORD *)(v29 - 96) = v43;
      *(_OWORD *)(v29 - 80) = v44;
      *(_OWORD *)(v29 - 64) = v45;
      *(_OWORD *)(v29 - 48) = v46;
      *(_OWORD *)(v29 - 32) = v47;
      *(_OWORD *)(v29 - 16) = v48;
      *(_DWORD *)(*(_QWORD *)(a1 + 24) + 8 * v31) = v28;
      v49 = 8 * v28;
      v50 = *(_QWORD *)(a1 + 72);
      v51 = *(_QWORD **)(a1 + 80);
      v52 = *(_QWORD *)(v50 + v49);
      v53 = *--v51;
      *(_QWORD *)(v50 + v49) = v53;
      *v51 = v52;
      *(_QWORD *)(a1 + 56) -= 256;
      *(_QWORD *)(a1 + 80) = v51;
      v54 = 8 * *(unsigned int *)a2;
      *(_DWORD *)(*(_QWORD *)(a1 + 24) + v54 + 4) = (((unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 24) + v54 + 4) << 32)
                                                   + 0x100000000) >> 32;
      *(_DWORD *)(*(_QWORD *)(a1 + 24) + v54) = (*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3;
    }
  }
  return result;
}

double geo::packed_array<md::GlobeMatrixStorage,geo::handle<md::GlobeMatrix>>::erase(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v9;
  unint64_t *v10;
  _QWORD *v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  unint64_t *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  unint64_t *v24;
  uint64_t v25;
  __int128 v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  double result;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 24);
  if (v2 < (*(_QWORD *)(a1 + 32) - v3) >> 3)
  {
    v4 = *(_QWORD *)(v3 + 8 * v2);
    v6 = v4 == 0;
    v5 = HIDWORD(v4);
    v6 = !v6 && HIDWORD(*a2) == (_DWORD)v5;
    if (v6)
    {
      v10 = *(unint64_t **)(a1 + 8);
      v9 = *(_QWORD *)(a1 + 16);
      if ((unint64_t)v10 >= v9)
      {
        v12 = *(unint64_t **)a1;
        v13 = (uint64_t)v10 - *(_QWORD *)a1;
        v14 = v13 >> 3;
        v15 = (v13 >> 3) + 1;
        if (v15 >> 61)
          abort();
        v16 = v9 - (_QWORD)v12;
        if (v16 >> 2 > v15)
          v15 = v16 >> 2;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
        {
          if (v17 >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v18 = operator new(8 * v17);
        }
        else
        {
          v18 = 0;
        }
        v19 = (unint64_t *)&v18[8 * v14];
        v20 = &v18[8 * v17];
        *v19 = v2;
        v11 = v19 + 1;
        if (v10 != v12)
        {
          v21 = (char *)v10 - (char *)v12 - 8;
          if (v21 < 0x58)
            goto LABEL_34;
          if ((unint64_t)((char *)v10 - v18 - v13) < 0x20)
            goto LABEL_34;
          v22 = (v21 >> 3) + 1;
          v23 = &v18[8 * v14 - 16];
          v24 = v10 - 2;
          v25 = v22 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v26 = *(_OWORD *)v24;
            *(v23 - 1) = *((_OWORD *)v24 - 1);
            *v23 = v26;
            v23 -= 2;
            v24 -= 4;
            v25 -= 4;
          }
          while (v25);
          v19 -= v22 & 0x3FFFFFFFFFFFFFFCLL;
          v10 -= v22 & 0x3FFFFFFFFFFFFFFCLL;
          if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_34:
            do
            {
              v27 = *--v10;
              *--v19 = v27;
            }
            while (v10 != v12);
          }
        }
        *(_QWORD *)a1 = v19;
        *(_QWORD *)(a1 + 8) = v11;
        *(_QWORD *)(a1 + 16) = v20;
        if (v12)
        {
          operator delete(v12);
          v3 = *(_QWORD *)(a1 + 24);
        }
      }
      else
      {
        *v10 = v2;
        v11 = v10 + 1;
      }
      *(_QWORD *)(a1 + 8) = v11;
      v28 = *(_QWORD *)(v3 + 8 * *(unsigned int *)a2);
      v30 = *(_QWORD *)(a1 + 48);
      v29 = *(_QWORD *)(a1 + 56);
      v31 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + ((v29 - v30) >> 4) - 8);
      v32 = (__int128 *)(v30 + ((unint64_t)v28 << 7));
      v33 = *v32;
      v34 = v32[1];
      *(_QWORD *)v32 = *(_QWORD *)(v29 - 128);
      *((_QWORD *)v32 + 1) = *(_QWORD *)(v29 - 120);
      *((_QWORD *)v32 + 2) = *(_QWORD *)(v29 - 112);
      *((_QWORD *)v32 + 3) = *(_QWORD *)(v29 - 104);
      v35 = v32[2];
      v36 = v32[3];
      *((_QWORD *)v32 + 4) = *(_QWORD *)(v29 - 96);
      *((_QWORD *)v32 + 5) = *(_QWORD *)(v29 - 88);
      *((_QWORD *)v32 + 6) = *(_QWORD *)(v29 - 80);
      *((_QWORD *)v32 + 7) = *(_QWORD *)(v29 - 72);
      v37 = v32[4];
      v38 = v32[5];
      *((_QWORD *)v32 + 8) = *(_QWORD *)(v29 - 64);
      *((_QWORD *)v32 + 9) = *(_QWORD *)(v29 - 56);
      *((_QWORD *)v32 + 10) = *(_QWORD *)(v29 - 48);
      *((_QWORD *)v32 + 11) = *(_QWORD *)(v29 - 40);
      v39 = v32[6];
      v40 = v32[7];
      *((_QWORD *)v32 + 12) = *(_QWORD *)(v29 - 32);
      *((_QWORD *)v32 + 13) = *(_QWORD *)(v29 - 24);
      *((_QWORD *)v32 + 14) = *(_QWORD *)(v29 - 16);
      result = *(double *)(v29 - 8);
      *((double *)v32 + 15) = result;
      *(_OWORD *)(v29 - 128) = v33;
      *(_OWORD *)(v29 - 112) = v34;
      *(_OWORD *)(v29 - 96) = v35;
      *(_OWORD *)(v29 - 80) = v36;
      *(_OWORD *)(v29 - 64) = v37;
      *(_OWORD *)(v29 - 48) = v38;
      *(_OWORD *)(v29 - 32) = v39;
      *(_OWORD *)(v29 - 16) = v40;
      *(_DWORD *)(v3 + 8 * v31) = v28;
      v42 = 8 * v28;
      v43 = *(_QWORD *)(a1 + 72);
      v44 = *(_QWORD **)(a1 + 80);
      v45 = *(_QWORD *)(v43 + v42);
      v46 = *--v44;
      *(_QWORD *)(v43 + v42) = v46;
      *v44 = v45;
      *(_QWORD *)(a1 + 56) -= 128;
      *(_QWORD *)(a1 + 80) = v44;
      v47 = 8 * *(unsigned int *)a2;
      *(_DWORD *)(*(_QWORD *)(a1 + 24) + v47 + 4) = (((unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 24) + v47 + 4) << 32)
                                                   + 0x100000000) >> 32;
      *(_DWORD *)(*(_QWORD *)(a1 + 24) + v47) = (*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3;
    }
  }
  return result;
}

unint64_t md::VKMRenderResourcesStore::createDeviceDataHandle(md::VKMRenderResourcesStore *this, ggl::DeviceData *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  uint64_t *v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  _QWORD *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _BYTE *v34;
  _QWORD *v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  _OWORD *v39;
  char *v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  _BYTE *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  _BYTE *v52;
  _QWORD *v53;
  char *v54;
  unint64_t v55;
  uint64_t v56;
  _OWORD *v57;
  __int128 *v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  uint64_t *v62;
  unint64_t v63;
  uint8x8_t v64;
  _QWORD *v65;
  _QWORD *v66;
  unint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  float v70;
  float v71;
  _BOOL8 v72;
  unint64_t v73;
  unint64_t v74;
  size_t prime;
  unint64_t v76;
  uint8x8_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  unint64_t v81;
  _QWORD *v82;
  unint64_t v84;

  v4 = *((_QWORD *)this + 1296);
  if (*((_QWORD *)this + 1295) == v4)
  {
    v7 = ((*((_QWORD *)this + 1302) - *((_QWORD *)this + 1301)) >> 3) | 0x100000000;
    v8 = (uint64_t *)*((_QWORD *)this + 1299);
    v9 = *((_QWORD *)this + 1300);
    if ((unint64_t)v8 >= v9)
    {
      v11 = (uint64_t *)*((_QWORD *)this + 1298);
      v12 = v8 - v11;
      v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 61)
        goto LABEL_131;
      v14 = v9 - (_QWORD)v11;
      if (v14 >> 2 > v13)
        v13 = v14 >> 2;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
        v15 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v15 = v13;
      if (v15)
      {
        if (v15 >> 61)
          goto LABEL_132;
        v16 = operator new(8 * v15);
      }
      else
      {
        v16 = 0;
      }
      v17 = (uint64_t *)&v16[8 * v12];
      v18 = &v16[8 * v15];
      *v17 = v7;
      v10 = v17 + 1;
      if (v8 == v11)
      {
        v11 = v8;
      }
      else
      {
        v19 = (char *)v8 - (char *)v11 - 8;
        if (v19 < 0x58)
          goto LABEL_135;
        if ((unint64_t)((char *)v11 - v16) < 0x20)
          goto LABEL_135;
        v20 = (v19 >> 3) + 1;
        v21 = &v16[8 * v12 - 16];
        v22 = v8 - 2;
        v23 = v20 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v24 = *(_OWORD *)v22;
          *(v21 - 1) = *((_OWORD *)v22 - 1);
          *v21 = v24;
          v21 -= 2;
          v22 -= 4;
          v23 -= 4;
        }
        while (v23);
        v17 -= v20 & 0x3FFFFFFFFFFFFFFCLL;
        v8 -= v20 & 0x3FFFFFFFFFFFFFFCLL;
        if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_135:
          do
          {
            v25 = *--v8;
            *--v17 = v25;
          }
          while (v8 != v11);
          v11 = (uint64_t *)*((_QWORD *)this + 1298);
        }
      }
      *((_QWORD *)this + 1298) = v17;
      *((_QWORD *)this + 1299) = v10;
      *((_QWORD *)this + 1300) = v18;
      if (v11)
        operator delete(v11);
    }
    else
    {
      *v8 = v7;
      v10 = v8 + 1;
    }
    *((_QWORD *)this + 1299) = v10;
    v6 = *(v10 - 1);
  }
  else
  {
    v5 = *(_QWORD *)(v4 - 8);
    *((_QWORD *)this + 1296) = v4 - 8;
    *(_DWORD *)(*((_QWORD *)this + 1298) + 8 * v5) = (*((_QWORD *)this + 1302) - *((_QWORD *)this + 1301)) >> 3;
    *(_DWORD *)(*((_QWORD *)this + 1298) + 8 * v5 + 4) = (((unint64_t)*(unsigned int *)(*((_QWORD *)this + 1298)
                                                                                             + 8 * v5
                                                                                             + 4) << 32)
                                                        + 0x100000000) >> 32;
    v6 = v5 | ((unint64_t)*(unsigned int *)(*((_QWORD *)this + 1298) + 8 * v5 + 4) << 32);
  }
  v26 = (char *)*((_QWORD *)this + 1302);
  v27 = *((_QWORD *)this + 1303);
  if ((unint64_t)v26 >= v27)
  {
    v29 = (char *)*((_QWORD *)this + 1301);
    v30 = (v26 - v29) >> 3;
    v31 = v30 + 1;
    if ((unint64_t)(v30 + 1) >> 61)
      goto LABEL_131;
    v32 = v27 - (_QWORD)v29;
    if (v32 >> 2 > v31)
      v31 = v32 >> 2;
    if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
      v33 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v33 = v31;
    if (v33)
    {
      if (v33 >> 61)
        goto LABEL_132;
      v34 = operator new(8 * v33);
    }
    else
    {
      v34 = 0;
    }
    v35 = &v34[8 * v30];
    v36 = &v34[8 * v33];
    *v35 = a2;
    v28 = v35 + 1;
    if (v26 == v29)
    {
      v29 = v26;
    }
    else
    {
      v37 = v26 - v29 - 8;
      if (v37 < 0x58)
        goto LABEL_136;
      if ((unint64_t)(v29 - v34) < 0x20)
        goto LABEL_136;
      v38 = (v37 >> 3) + 1;
      v39 = &v34[8 * v30 - 16];
      v40 = v26 - 16;
      v41 = v38 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v42 = *(_OWORD *)v40;
        *(v39 - 1) = *((_OWORD *)v40 - 1);
        *v39 = v42;
        v39 -= 2;
        v40 -= 32;
        v41 -= 4;
      }
      while (v41);
      v35 -= v38 & 0x3FFFFFFFFFFFFFFCLL;
      v26 -= 8 * (v38 & 0x3FFFFFFFFFFFFFFCLL);
      if (v38 != (v38 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_136:
        do
        {
          v43 = *((_QWORD *)v26 - 1);
          v26 -= 8;
          *--v35 = v43;
        }
        while (v26 != v29);
        v29 = (char *)*((_QWORD *)this + 1301);
      }
    }
    *((_QWORD *)this + 1301) = v35;
    *((_QWORD *)this + 1302) = v28;
    *((_QWORD *)this + 1303) = v36;
    if (v29)
      operator delete(v29);
  }
  else
  {
    *(_QWORD *)v26 = a2;
    v28 = v26 + 8;
  }
  *((_QWORD *)this + 1302) = v28;
  v44 = *((_QWORD *)this + 1305);
  v45 = *((_QWORD *)this + 1306);
  if (v44 < v45)
  {
    *(_QWORD *)v44 = v6;
    v44 += 8;
    v46 = (_QWORD *)v44;
    goto LABEL_71;
  }
  v47 = (_BYTE *)*((_QWORD *)this + 1304);
  v48 = (uint64_t)(v44 - (_QWORD)v47) >> 3;
  v49 = v48 + 1;
  if ((unint64_t)(v48 + 1) >> 61)
LABEL_131:
    abort();
  v50 = v45 - (_QWORD)v47;
  if (v50 >> 2 > v49)
    v49 = v50 >> 2;
  if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8)
    v51 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v51 = v49;
  if (v51)
  {
    if (!(v51 >> 61))
    {
      v52 = operator new(8 * v51);
      goto LABEL_62;
    }
LABEL_132:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v52 = 0;
LABEL_62:
  v53 = &v52[8 * v48];
  v54 = &v52[8 * v51];
  *v53 = v6;
  v46 = v53 + 1;
  if ((_BYTE *)v44 != v47)
  {
    v55 = v44 - (_QWORD)v47 - 8;
    if (v55 < 0x58)
      goto LABEL_137;
    if ((unint64_t)(v47 - v52) < 0x20)
      goto LABEL_137;
    v56 = (v55 >> 3) + 1;
    v57 = &v52[8 * v48 - 16];
    v58 = (__int128 *)(v44 - 16);
    v59 = v56 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v60 = *v58;
      *(v57 - 1) = *(v58 - 1);
      *v57 = v60;
      v57 -= 2;
      v58 -= 2;
      v59 -= 4;
    }
    while (v59);
    v53 -= v56 & 0x3FFFFFFFFFFFFFFCLL;
    v44 -= 8 * (v56 & 0x3FFFFFFFFFFFFFFCLL);
    if (v56 != (v56 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_137:
      do
      {
        v61 = *(_QWORD *)(v44 - 8);
        v44 -= 8;
        *--v53 = v61;
      }
      while ((_BYTE *)v44 != v47);
    }
  }
  *((_QWORD *)this + 1304) = v53;
  *((_QWORD *)this + 1305) = v46;
  *((_QWORD *)this + 1306) = v54;
  if (v47)
    operator delete(v47);
LABEL_71:
  v62 = (uint64_t *)((char *)this + 10320);
  *((_QWORD *)this + 1305) = v46;
  v84 = v6;
  v63 = *((_QWORD *)this + 1291);
  if (v63)
  {
    v64 = (uint8x8_t)vcnt_s8((int8x8_t)v63);
    v64.i16[0] = vaddlv_u8(v64);
    if (v64.u32[0] > 1uLL)
    {
      v44 = v6;
      if (v6 >= v63)
        v44 = v6 % v63;
    }
    else
    {
      v44 = (v63 - 1) & v6;
    }
    v65 = *(_QWORD **)(*v62 + 8 * v44);
    if (v65)
    {
      v66 = (_QWORD *)*v65;
      if (v66)
      {
        if (v64.u32[0] < 2uLL)
        {
          while (1)
          {
            v68 = v66[1];
            if (v68 == v6)
            {
              if (v66[2] == v6)
                goto LABEL_130;
            }
            else if ((v68 & (v63 - 1)) != v44)
            {
              goto LABEL_92;
            }
            v66 = (_QWORD *)*v66;
            if (!v66)
              goto LABEL_92;
          }
        }
        do
        {
          v67 = v66[1];
          if (v67 == v6)
          {
            if (v66[2] == v6)
              goto LABEL_130;
          }
          else
          {
            if (v67 >= v63)
              v67 %= v63;
            if (v67 != v44)
              break;
          }
          v66 = (_QWORD *)*v66;
        }
        while (v66);
      }
    }
  }
LABEL_92:
  v69 = operator new(0x30uLL);
  *v69 = 0;
  v69[1] = v6;
  v69[3] = 0;
  v69[4] = 0;
  v69[2] = v6;
  *((_BYTE *)v69 + 40) = 0;
  v70 = (float)(unint64_t)(*((_QWORD *)this + 1293) + 1);
  v71 = *((float *)this + 2588);
  if (!v63 || (float)(v71 * (float)v63) < v70)
  {
    v72 = 1;
    if (v63 >= 3)
      v72 = (v63 & (v63 - 1)) != 0;
    v73 = v72 | (2 * v63);
    v74 = vcvtps_u32_f32(v70 / v71);
    if (v73 <= v74)
      prime = v74;
    else
      prime = v73;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v63 = *((_QWORD *)this + 1291);
    }
    if (prime > v63)
      goto LABEL_104;
    if (prime < v63)
    {
      v76 = vcvtps_u32_f32((float)*((unint64_t *)this + 1293) / *((float *)this + 2588));
      if (v63 < 3 || (v77 = (uint8x8_t)vcnt_s8((int8x8_t)v63), v77.i16[0] = vaddlv_u8(v77), v77.u32[0] > 1uLL))
      {
        v76 = std::__next_prime(v76);
      }
      else
      {
        v78 = 1 << -(char)__clz(v76 - 1);
        if (v76 >= 2)
          v76 = v78;
      }
      if (prime <= v76)
        prime = v76;
      if (prime < v63)
LABEL_104:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)this + 10320, prime);
    }
    v63 = *((_QWORD *)this + 1291);
    if ((v63 & (v63 - 1)) != 0)
    {
      if (v6 >= v63)
        v44 = v6 % v63;
      else
        v44 = v6;
    }
    else
    {
      v44 = (v63 - 1) & v6;
    }
  }
  v79 = *v62;
  v80 = *(_QWORD **)(*v62 + 8 * v44);
  if (v80)
  {
    *v69 = *v80;
LABEL_128:
    *v80 = v69;
    goto LABEL_129;
  }
  *v69 = *((_QWORD *)this + 1292);
  *((_QWORD *)this + 1292) = v69;
  *(_QWORD *)(v79 + 8 * v44) = (char *)this + 10336;
  if (*v69)
  {
    v81 = *(_QWORD *)(*v69 + 8);
    if ((v63 & (v63 - 1)) != 0)
    {
      if (v81 >= v63)
        v81 %= v63;
    }
    else
    {
      v81 &= v63 - 1;
    }
    v80 = (_QWORD *)(*v62 + 8 * v81);
    goto LABEL_128;
  }
LABEL_129:
  ++*((_QWORD *)this + 1293);
LABEL_130:
  v82 = std::__hash_table<std::__hash_value_type<geo::handle<md::DeviceDataResource>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::DeviceDataResource>,std::__hash_value_type<geo::handle<md::DeviceDataResource>,md::Counter>,std::hash<geo::handle<md::DeviceDataResource>>,std::equal_to<geo::handle<md::DeviceDataResource>>,true>,std::__unordered_map_equal<geo::handle<md::DeviceDataResource>,std::__hash_value_type<geo::handle<md::DeviceDataResource>,md::Counter>,std::equal_to<geo::handle<md::DeviceDataResource>>,std::hash<geo::handle<md::DeviceDataResource>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::DeviceDataResource>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::DeviceDataResource>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::DeviceDataResource> const&>,std::tuple<>>((uint64_t)this + 10320, v6, &v84);
  ++v82[3];
  std::__hash_table<std::__hash_value_type<geo::handle<md::DeviceDataResource>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::DeviceDataResource>,std::__hash_value_type<geo::handle<md::DeviceDataResource>,md::Counter>,std::hash<geo::handle<md::DeviceDataResource>>,std::equal_to<geo::handle<md::DeviceDataResource>>,true>,std::__unordered_map_equal<geo::handle<md::DeviceDataResource>,std::__hash_value_type<geo::handle<md::DeviceDataResource>,md::Counter>,std::equal_to<geo::handle<md::DeviceDataResource>>,std::hash<geo::handle<md::DeviceDataResource>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::DeviceDataResource>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::DeviceDataResource>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::DeviceDataResource> const&>,std::tuple<>>((uint64_t)this + 10320, v6, &v84)[4] = 1;
  return v6;
}

void sub_19FE3F880(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<geo::handle<md::DeviceDataResource>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::DeviceDataResource>,std::__hash_value_type<geo::handle<md::DeviceDataResource>,md::Counter>,std::hash<geo::handle<md::DeviceDataResource>>,std::equal_to<geo::handle<md::DeviceDataResource>>,true>,std::__unordered_map_equal<geo::handle<md::DeviceDataResource>,std::__hash_value_type<geo::handle<md::DeviceDataResource>,md::Counter>,std::equal_to<geo::handle<md::DeviceDataResource>>,std::hash<geo::handle<md::DeviceDataResource>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::DeviceDataResource>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::DeviceDataResource>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::DeviceDataResource> const&>,std::tuple<>>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v5 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = v5;
  v10[2] = *a3;
  v10[3] = 0;
  v10[4] = 0;
  v10[5] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    v5 = v3;
  }
  else
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = v17;
    else
      prime = v16;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_35;
    if (prime < v7)
    {
      v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v20 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
      {
        v19 = std::__next_prime(v19);
      }
      else
      {
        v21 = 1 << -(char)__clz(v19 - 1);
        if (v19 >= 2)
          v19 = v21;
      }
      if (prime <= v19)
        prime = v19;
      if (prime < v7)
LABEL_35:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v5)
        v5 %= v7;
    }
    else
    {
      v5 &= v7 - 1;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v23)
  {
    *v10 = *v23;
LABEL_58:
    *v23 = v10;
    goto LABEL_59;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v22 + 8 * v5) = a1 + 16;
  if (*v10)
  {
    v24 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v24 >= v7)
        v24 %= v7;
    }
    else
    {
      v24 &= v7 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_19FE3FB5C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

unint64_t md::VKMRenderResourcesStore::getConstantDataHandle<ggl::Tile::Transform,md::VKMRenderResourcesStore::VKMSplineKey>(_QWORD *a1, int *a2)
{
  int8x8_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v26;
  unint64_t *v27;
  _QWORD *v28;
  unint64_t v29;

  v2 = (int8x8_t)a1[1329];
  if (!*(_QWORD *)&v2)
    goto LABEL_30;
  v3 = *((unsigned __int8 *)a2 + 8);
  v4 = *a2;
  v5 = a2[1];
  v6 = (v4
      + ((v3 - 0x61C8864680B583EBLL) << 6)
      + ((unint64_t)(v3 - 0x61C8864680B583EBLL) >> 2)
      - 0x61C8864680B583EBLL) ^ (v3 - 0x61C8864680B583EBLL);
  v7 = (v5 + (v6 << 6) + (v6 >> 2) - 0x61C8864680B583EBLL) ^ v6;
  v8 = a2[3];
  v9 = a2[4];
  v10 = (v8 + (v7 << 6) + (v7 >> 2) - 0x61C8864680B583EBLL) ^ v7;
  v11 = (v9 + (v10 << 6) + (v10 >> 2) - 0x61C8864680B583EBLL) ^ v10;
  v12 = (uint8x8_t)vcnt_s8(v2);
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.u32[0] > 1uLL)
  {
    v13 = (v9 + (v10 << 6) + (v10 >> 2) - 0x61C8864680B583EBLL) ^ v10;
    if (v11 >= *(_QWORD *)&v2)
      v13 = v11 % *(_QWORD *)&v2;
  }
  else
  {
    v13 = v11 & (*(_QWORD *)&v2 - 1);
  }
  v14 = *(uint64_t ***)(a1[1328] + 8 * v13);
  if (!v14)
    goto LABEL_30;
  v15 = *v14;
  if (!*v14)
    goto LABEL_30;
  if (v12.u32[0] < 2uLL)
  {
    v16 = *(_QWORD *)&v2 - 1;
    while (1)
    {
      v18 = v15[1];
      if (v18 == v11)
      {
        if (*((_DWORD *)v15 + 4) == (_DWORD)v4
          && __PAIR64__(*((unsigned __int8 *)v15 + 24), *((_DWORD *)v15 + 5)) == __PAIR64__(v3, v5)
          && *(uint64_t *)((char *)v15 + 28) == __PAIR64__(v9, v8))
        {
          goto LABEL_25;
        }
      }
      else if ((v18 & v16) != v13)
      {
        goto LABEL_30;
      }
      v15 = (uint64_t *)*v15;
      if (!v15)
        goto LABEL_30;
    }
  }
  while (1)
  {
    v17 = v15[1];
    if (v17 == v11)
      break;
    if (v17 >= *(_QWORD *)&v2)
      v17 %= *(_QWORD *)&v2;
    if (v17 != v13)
      goto LABEL_30;
LABEL_11:
    v15 = (uint64_t *)*v15;
    if (!v15)
      goto LABEL_30;
  }
  if (*((_DWORD *)v15 + 4) != (_DWORD)v4
    || __PAIR64__(*((unsigned __int8 *)v15 + 24), *((_DWORD *)v15 + 5)) != __PAIR64__(v3, v5)
    || *(uint64_t *)((char *)v15 + 28) != __PAIR64__(v9, v8))
  {
    goto LABEL_11;
  }
LABEL_25:
  v19 = v15[5];
  v29 = v19;
  v20 = a1[417];
  if (v19 >= (unint64_t)((a1[418] - v20) >> 3)
    || ((v21 = *(_QWORD *)(v20 + 8 * v19)) != 0 ? (v22 = HIDWORD(v19) == HIDWORD(v21)) : (v22 = 0),
        !v22
     || (v26 = a1[420]) == 0
     || (v27 = (unint64_t *)(v26 + 24 * v21), v27 == (unint64_t *)a1[421])))
  {
LABEL_30:
    v23 = 0;
    goto LABEL_31;
  }
  v28 = std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>> const&>,std::tuple<>>((uint64_t)(a1 + 409), v19, &v29);
  ++v28[3];
  v23 = *v27;
  if (*v27)
  {
    v23 = v15[5] & 0xFFFFFFFFFFFFFF00;
    v24 = v15[5];
    return v24 | v23;
  }
LABEL_31:
  v24 = 0;
  return v24 | v23;
}

uint64_t md::VKMRenderResourcesStore::getConstantData<ggl::Tile::View>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v11;
  unint64_t v12;
  uint8x8_t v13;
  _QWORD **v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t prime;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;

  v3 = *(_QWORD *)(a1 + 3512);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 3520) - v3) >> 3))
    return 0;
  v4 = *(_QWORD *)(v3 + 8 * a2);
  if (!v4)
    return 0;
  v5 = a2;
  if (HIDWORD(a2) != HIDWORD(v4))
    return 0;
  v7 = *(_QWORD *)(a1 + 3536);
  v8 = v7 + 24 * v4;
  if (v8 == *(_QWORD *)(a1 + 3544) || v7 == 0)
    return 0;
  v11 = (uint64_t *)(a1 + 3448);
  v12 = *(_QWORD *)(a1 + 3456);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v2 = a2;
      if (v12 <= a2)
        v2 = a2 % v12;
    }
    else
    {
      v2 = (v12 - 1) & a2;
    }
    v14 = *(_QWORD ***)(*v11 + 8 * v2);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v17 = v15[1];
            if (v17 == a2)
            {
              if (v15[2] == a2)
                goto LABEL_69;
            }
            else if ((v17 & (v12 - 1)) != v2)
            {
              goto LABEL_31;
            }
            v15 = (_QWORD *)*v15;
            if (!v15)
              goto LABEL_31;
          }
        }
        do
        {
          v16 = v15[1];
          if (v16 == a2)
          {
            if (v15[2] == a2)
              goto LABEL_69;
          }
          else
          {
            if (v16 >= v12)
              v16 %= v12;
            if (v16 != v2)
              break;
          }
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_31:
  v15 = operator new(0x30uLL);
  *v15 = 0;
  v15[1] = v5;
  v15[2] = v5;
  v15[3] = 0;
  v15[4] = 0;
  v15[5] = 0;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 3472) + 1);
  v19 = *(float *)(a1 + 3480);
  if (v12 && (float)(v19 * (float)v12) >= v18)
  {
    v5 = v2;
  }
  else
  {
    v20 = 1;
    if (v12 >= 3)
      v20 = (v12 & (v12 - 1)) != 0;
    v21 = v20 | (2 * v12);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      prime = v22;
    else
      prime = v21;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v12 = *(_QWORD *)(a1 + 3456);
    }
    if (prime > v12)
      goto LABEL_44;
    if (prime < v12)
    {
      v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 3472) / *(float *)(a1 + 3480));
      if (v12 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (prime <= v24)
        prime = v24;
      if (prime < v12)
LABEL_44:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1 + 3448, prime);
    }
    v12 = *(_QWORD *)(a1 + 3456);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v12 <= v5)
        v5 %= v12;
    }
    else
    {
      v5 &= v12 - 1;
    }
  }
  v27 = *v11;
  v28 = *(_QWORD **)(*v11 + 8 * v5);
  if (v28)
  {
    *v15 = *v28;
  }
  else
  {
    *v15 = *(_QWORD *)(a1 + 3464);
    *(_QWORD *)(a1 + 3464) = v15;
    *(_QWORD *)(v27 + 8 * v5) = a1 + 3464;
    if (!*v15)
      goto LABEL_68;
    v29 = *(_QWORD *)(*v15 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v29 >= v12)
        v29 %= v12;
    }
    else
    {
      v29 &= v12 - 1;
    }
    v28 = (_QWORD *)(*v11 + 8 * v29);
  }
  *v28 = v15;
LABEL_68:
  ++*(_QWORD *)(a1 + 3472);
LABEL_69:
  ++v15[3];
  return *(_QWORD *)v8;
}

void sub_19FE400EC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t md::VKMRenderResourcesStore::getConstantData<ggl::Tile::LinearDepth>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v11;
  unint64_t v12;
  uint8x8_t v13;
  _QWORD **v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t prime;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;

  v3 = *(_QWORD *)(a1 + 3688);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 3696) - v3) >> 3))
    return 0;
  v4 = *(_QWORD *)(v3 + 8 * a2);
  if (!v4)
    return 0;
  v5 = a2;
  if (HIDWORD(a2) != HIDWORD(v4))
    return 0;
  v7 = *(_QWORD *)(a1 + 3712);
  v8 = v7 + 24 * v4;
  if (v8 == *(_QWORD *)(a1 + 3720) || v7 == 0)
    return 0;
  v11 = (uint64_t *)(a1 + 3624);
  v12 = *(_QWORD *)(a1 + 3632);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v2 = a2;
      if (v12 <= a2)
        v2 = a2 % v12;
    }
    else
    {
      v2 = (v12 - 1) & a2;
    }
    v14 = *(_QWORD ***)(*v11 + 8 * v2);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v17 = v15[1];
            if (v17 == a2)
            {
              if (v15[2] == a2)
                goto LABEL_69;
            }
            else if ((v17 & (v12 - 1)) != v2)
            {
              goto LABEL_31;
            }
            v15 = (_QWORD *)*v15;
            if (!v15)
              goto LABEL_31;
          }
        }
        do
        {
          v16 = v15[1];
          if (v16 == a2)
          {
            if (v15[2] == a2)
              goto LABEL_69;
          }
          else
          {
            if (v16 >= v12)
              v16 %= v12;
            if (v16 != v2)
              break;
          }
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_31:
  v15 = operator new(0x30uLL);
  *v15 = 0;
  v15[1] = v5;
  v15[2] = v5;
  v15[3] = 0;
  v15[4] = 0;
  v15[5] = 0;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 3648) + 1);
  v19 = *(float *)(a1 + 3656);
  if (v12 && (float)(v19 * (float)v12) >= v18)
  {
    v5 = v2;
  }
  else
  {
    v20 = 1;
    if (v12 >= 3)
      v20 = (v12 & (v12 - 1)) != 0;
    v21 = v20 | (2 * v12);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      prime = v22;
    else
      prime = v21;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v12 = *(_QWORD *)(a1 + 3632);
    }
    if (prime > v12)
      goto LABEL_44;
    if (prime < v12)
    {
      v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 3648) / *(float *)(a1 + 3656));
      if (v12 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (prime <= v24)
        prime = v24;
      if (prime < v12)
LABEL_44:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1 + 3624, prime);
    }
    v12 = *(_QWORD *)(a1 + 3632);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v12 <= v5)
        v5 %= v12;
    }
    else
    {
      v5 &= v12 - 1;
    }
  }
  v27 = *v11;
  v28 = *(_QWORD **)(*v11 + 8 * v5);
  if (v28)
  {
    *v15 = *v28;
  }
  else
  {
    *v15 = *(_QWORD *)(a1 + 3640);
    *(_QWORD *)(a1 + 3640) = v15;
    *(_QWORD *)(v27 + 8 * v5) = a1 + 3640;
    if (!*v15)
      goto LABEL_68;
    v29 = *(_QWORD *)(*v15 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v29 >= v12)
        v29 %= v12;
    }
    else
    {
      v29 &= v12 - 1;
    }
    v28 = (_QWORD *)(*v11 + 8 * v29);
  }
  *v28 = v15;
LABEL_68:
  ++*(_QWORD *)(a1 + 3648);
LABEL_69:
  ++v15[3];
  return *(_QWORD *)v8;
}

void sub_19FE40430(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t md::VKMRenderResourcesStore::getConstantData<ggl::DaVinci::Shadow>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v11;
  unint64_t v12;
  uint8x8_t v13;
  _QWORD **v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t prime;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;

  v3 = *(_QWORD *)(a1 + 4040);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 4048) - v3) >> 3))
    return 0;
  v4 = *(_QWORD *)(v3 + 8 * a2);
  if (!v4)
    return 0;
  v5 = a2;
  if (HIDWORD(a2) != HIDWORD(v4))
    return 0;
  v7 = *(_QWORD *)(a1 + 4064);
  v8 = v7 + 24 * v4;
  if (v8 == *(_QWORD *)(a1 + 4072) || v7 == 0)
    return 0;
  v11 = (uint64_t *)(a1 + 3976);
  v12 = *(_QWORD *)(a1 + 3984);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v2 = a2;
      if (v12 <= a2)
        v2 = a2 % v12;
    }
    else
    {
      v2 = (v12 - 1) & a2;
    }
    v14 = *(_QWORD ***)(*v11 + 8 * v2);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v17 = v15[1];
            if (v17 == a2)
            {
              if (v15[2] == a2)
                goto LABEL_69;
            }
            else if ((v17 & (v12 - 1)) != v2)
            {
              goto LABEL_31;
            }
            v15 = (_QWORD *)*v15;
            if (!v15)
              goto LABEL_31;
          }
        }
        do
        {
          v16 = v15[1];
          if (v16 == a2)
          {
            if (v15[2] == a2)
              goto LABEL_69;
          }
          else
          {
            if (v16 >= v12)
              v16 %= v12;
            if (v16 != v2)
              break;
          }
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_31:
  v15 = operator new(0x30uLL);
  *v15 = 0;
  v15[1] = v5;
  v15[2] = v5;
  v15[3] = 0;
  v15[4] = 0;
  v15[5] = 0;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 4000) + 1);
  v19 = *(float *)(a1 + 4008);
  if (v12 && (float)(v19 * (float)v12) >= v18)
  {
    v5 = v2;
  }
  else
  {
    v20 = 1;
    if (v12 >= 3)
      v20 = (v12 & (v12 - 1)) != 0;
    v21 = v20 | (2 * v12);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      prime = v22;
    else
      prime = v21;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v12 = *(_QWORD *)(a1 + 3984);
    }
    if (prime > v12)
      goto LABEL_44;
    if (prime < v12)
    {
      v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 4000) / *(float *)(a1 + 4008));
      if (v12 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (prime <= v24)
        prime = v24;
      if (prime < v12)
LABEL_44:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1 + 3976, prime);
    }
    v12 = *(_QWORD *)(a1 + 3984);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v12 <= v5)
        v5 %= v12;
    }
    else
    {
      v5 &= v12 - 1;
    }
  }
  v27 = *v11;
  v28 = *(_QWORD **)(*v11 + 8 * v5);
  if (v28)
  {
    *v15 = *v28;
  }
  else
  {
    *v15 = *(_QWORD *)(a1 + 3992);
    *(_QWORD *)(a1 + 3992) = v15;
    *(_QWORD *)(v27 + 8 * v5) = a1 + 3992;
    if (!*v15)
      goto LABEL_68;
    v29 = *(_QWORD *)(*v15 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v29 >= v12)
        v29 %= v12;
    }
    else
    {
      v29 &= v12 - 1;
    }
    v28 = (_QWORD *)(*v11 + 8 * v29);
  }
  *v28 = v15;
LABEL_68:
  ++*(_QWORD *)(a1 + 4000);
LABEL_69:
  ++v15[3];
  return *(_QWORD *)v8;
}

void sub_19FE40774(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t md::VKMRenderResourcesStore::getConstantData<ggl::DaVinci::StyleCameraLighting>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v11;
  unint64_t v12;
  uint8x8_t v13;
  _QWORD **v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t prime;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;

  v3 = *(_QWORD *)(a1 + 5512);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 5520) - v3) >> 3))
    return 0;
  v4 = *(_QWORD *)(v3 + 8 * a2);
  if (!v4)
    return 0;
  v5 = a2;
  if (HIDWORD(a2) != HIDWORD(v4))
    return 0;
  v7 = *(_QWORD *)(a1 + 5536);
  v8 = v7 + 24 * v4;
  if (v8 == *(_QWORD *)(a1 + 5544) || v7 == 0)
    return 0;
  v11 = (uint64_t *)(a1 + 5448);
  v12 = *(_QWORD *)(a1 + 5456);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v2 = a2;
      if (v12 <= a2)
        v2 = a2 % v12;
    }
    else
    {
      v2 = (v12 - 1) & a2;
    }
    v14 = *(_QWORD ***)(*v11 + 8 * v2);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v17 = v15[1];
            if (v17 == a2)
            {
              if (v15[2] == a2)
                goto LABEL_69;
            }
            else if ((v17 & (v12 - 1)) != v2)
            {
              goto LABEL_31;
            }
            v15 = (_QWORD *)*v15;
            if (!v15)
              goto LABEL_31;
          }
        }
        do
        {
          v16 = v15[1];
          if (v16 == a2)
          {
            if (v15[2] == a2)
              goto LABEL_69;
          }
          else
          {
            if (v16 >= v12)
              v16 %= v12;
            if (v16 != v2)
              break;
          }
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_31:
  v15 = operator new(0x30uLL);
  *v15 = 0;
  v15[1] = v5;
  v15[2] = v5;
  v15[3] = 0;
  v15[4] = 0;
  v15[5] = 0;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 5472) + 1);
  v19 = *(float *)(a1 + 5480);
  if (v12 && (float)(v19 * (float)v12) >= v18)
  {
    v5 = v2;
  }
  else
  {
    v20 = 1;
    if (v12 >= 3)
      v20 = (v12 & (v12 - 1)) != 0;
    v21 = v20 | (2 * v12);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      prime = v22;
    else
      prime = v21;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v12 = *(_QWORD *)(a1 + 5456);
    }
    if (prime > v12)
      goto LABEL_44;
    if (prime < v12)
    {
      v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 5472) / *(float *)(a1 + 5480));
      if (v12 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (prime <= v24)
        prime = v24;
      if (prime < v12)
LABEL_44:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1 + 5448, prime);
    }
    v12 = *(_QWORD *)(a1 + 5456);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v12 <= v5)
        v5 %= v12;
    }
    else
    {
      v5 &= v12 - 1;
    }
  }
  v27 = *v11;
  v28 = *(_QWORD **)(*v11 + 8 * v5);
  if (v28)
  {
    *v15 = *v28;
  }
  else
  {
    *v15 = *(_QWORD *)(a1 + 5464);
    *(_QWORD *)(a1 + 5464) = v15;
    *(_QWORD *)(v27 + 8 * v5) = a1 + 5464;
    if (!*v15)
      goto LABEL_68;
    v29 = *(_QWORD *)(*v15 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v29 >= v12)
        v29 %= v12;
    }
    else
    {
      v29 &= v12 - 1;
    }
    v28 = (_QWORD *)(*v11 + 8 * v29);
  }
  *v28 = v15;
LABEL_68:
  ++*(_QWORD *)(a1 + 5472);
LABEL_69:
  ++v15[3];
  return *(_QWORD *)v8;
}

void sub_19FE40AC0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t md::VKMRenderResourcesStore::getConstantData<ggl::FlyoverCommon::Shared>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v11;
  unint64_t v12;
  uint8x8_t v13;
  _QWORD **v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t prime;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;

  v3 = *(_QWORD *)(a1 + 4216);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 4224) - v3) >> 3))
    return 0;
  v4 = *(_QWORD *)(v3 + 8 * a2);
  if (!v4)
    return 0;
  v5 = a2;
  if (HIDWORD(a2) != HIDWORD(v4))
    return 0;
  v7 = *(_QWORD *)(a1 + 4240);
  v8 = v7 + 24 * v4;
  if (v8 == *(_QWORD *)(a1 + 4248) || v7 == 0)
    return 0;
  v11 = (uint64_t *)(a1 + 4152);
  v12 = *(_QWORD *)(a1 + 4160);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v2 = a2;
      if (v12 <= a2)
        v2 = a2 % v12;
    }
    else
    {
      v2 = (v12 - 1) & a2;
    }
    v14 = *(_QWORD ***)(*v11 + 8 * v2);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v17 = v15[1];
            if (v17 == a2)
            {
              if (v15[2] == a2)
                goto LABEL_69;
            }
            else if ((v17 & (v12 - 1)) != v2)
            {
              goto LABEL_31;
            }
            v15 = (_QWORD *)*v15;
            if (!v15)
              goto LABEL_31;
          }
        }
        do
        {
          v16 = v15[1];
          if (v16 == a2)
          {
            if (v15[2] == a2)
              goto LABEL_69;
          }
          else
          {
            if (v16 >= v12)
              v16 %= v12;
            if (v16 != v2)
              break;
          }
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_31:
  v15 = operator new(0x30uLL);
  *v15 = 0;
  v15[1] = v5;
  v15[2] = v5;
  v15[3] = 0;
  v15[4] = 0;
  v15[5] = 0;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 4176) + 1);
  v19 = *(float *)(a1 + 4184);
  if (v12 && (float)(v19 * (float)v12) >= v18)
  {
    v5 = v2;
  }
  else
  {
    v20 = 1;
    if (v12 >= 3)
      v20 = (v12 & (v12 - 1)) != 0;
    v21 = v20 | (2 * v12);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      prime = v22;
    else
      prime = v21;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v12 = *(_QWORD *)(a1 + 4160);
    }
    if (prime > v12)
      goto LABEL_44;
    if (prime < v12)
    {
      v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 4176) / *(float *)(a1 + 4184));
      if (v12 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (prime <= v24)
        prime = v24;
      if (prime < v12)
LABEL_44:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1 + 4152, prime);
    }
    v12 = *(_QWORD *)(a1 + 4160);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v12 <= v5)
        v5 %= v12;
    }
    else
    {
      v5 &= v12 - 1;
    }
  }
  v27 = *v11;
  v28 = *(_QWORD **)(*v11 + 8 * v5);
  if (v28)
  {
    *v15 = *v28;
  }
  else
  {
    *v15 = *(_QWORD *)(a1 + 4168);
    *(_QWORD *)(a1 + 4168) = v15;
    *(_QWORD *)(v27 + 8 * v5) = a1 + 4168;
    if (!*v15)
      goto LABEL_68;
    v29 = *(_QWORD *)(*v15 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v29 >= v12)
        v29 %= v12;
    }
    else
    {
      v29 &= v12 - 1;
    }
    v28 = (_QWORD *)(*v11 + 8 * v29);
  }
  *v28 = v15;
LABEL_68:
  ++*(_QWORD *)(a1 + 4176);
LABEL_69:
  ++v15[3];
  return *(_QWORD *)v8;
}

void sub_19FE40E0C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t karo::media::ImageIOLoader::loadFromChunk(void *data, size_t size, uint64_t a3)
{
  CGDataProvider *v4;
  CGImageSource *v5;
  CGImage *ImageAtIndex;
  int Width;
  int Height;
  int BytesPerRow;
  int BitsPerComponent;
  uint64_t v11;
  unsigned int v12;
  int v13;
  CGImageAlphaInfo AlphaInfo;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  CGContext *v18;
  CGContext *v19;
  int v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  CGBitmapInfo bitmapInfo;
  CGColorSpace *space;
  CGRect v31;

  v4 = CGDataProviderCreateWithData(0, data, size, 0);
  v5 = CGImageSourceCreateWithDataProvider(v4, 0);
  ImageAtIndex = CGImageSourceCreateImageAtIndex(v5, 0, 0);
  CFRelease(v5);
  CGDataProviderRelease(v4);
  Width = CGImageGetWidth(ImageAtIndex);
  Height = CGImageGetHeight(ImageAtIndex);
  BytesPerRow = CGImageGetBytesPerRow(ImageAtIndex);
  BitsPerComponent = CGImageGetBitsPerComponent(ImageAtIndex);
  v11 = 0;
  if (Width < 1)
    goto LABEL_29;
  if (Height < 1)
    goto LABEL_29;
  v12 = BitsPerComponent;
  if (BitsPerComponent < 1)
    goto LABEL_29;
  v13 = BytesPerRow / Width / (int)(BitsPerComponent >> 3);
  space = CGImageGetColorSpace(ImageAtIndex);
  bitmapInfo = CGImageGetBitmapInfo(ImageAtIndex);
  AlphaInfo = CGImageGetAlphaInfo(ImageAtIndex);
  v15 = (std::__shared_weak_count *)operator new(0x30uLL);
  v15->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v15->__shared_owners_;
  v15->__shared_weak_owners_ = 0;
  v15->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E42D8;
  ggl::Data::Data((ggl::Data *)&v15[1], Height * BytesPerRow);
  if (v13 == 4 && AlphaInfo == kCGImageAlphaPremultipliedLast)
    bzero((void *)v15[1].__shared_owners_, v15[1].__shared_weak_owners_);
  v18 = CGBitmapContextCreate((void *)v15[1].__shared_owners_, Width, Height, v12, BytesPerRow, space, bitmapInfo);
  if (v18)
  {
    v19 = v18;
    v31.size.width = (double)Width;
    v31.size.height = (double)Height;
    v31.origin.x = 0.0;
    v31.origin.y = 0.0;
    CGContextDrawImage(v18, v31, ImageAtIndex);
    CGContextRelease(v19);
    if (v13 == 4)
    {
      v20 = 1;
LABEL_16:
      karo::media::Image::setFormat(a3, v20);
      v21 = *(_QWORD *)(a3 + 8);
      if (v21)
      {
        *(_DWORD *)v21 = Width;
        *(_DWORD *)(v21 + 4) = Height;
        v22 = *(_QWORD **)(v21 + 16);
        do
          v23 = __ldxr(p_shared_owners);
        while (__stxr(v23 + 1, p_shared_owners));
        v24 = (std::__shared_weak_count *)v22[1];
        *v22 = v15 + 1;
        v22[1] = v15;
        if (v24)
        {
          v25 = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
      }
      v11 = 1;
      goto LABEL_26;
    }
    if (v13 == 1)
    {
      v20 = 6;
      goto LABEL_16;
    }
    v11 = 0;
  }
  else
  {
    v11 = 0;
  }
  do
LABEL_26:
    v27 = __ldaxr(p_shared_owners);
  while (__stlxr(v27 - 1, p_shared_owners));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
LABEL_29:
  CGImageRelease(ImageAtIndex);
  return v11;
}

BOOL karo::media::ImageIOLoader::supportsFile(karo::media::ImageIOLoader *this, size_t size)
{
  CGDataProvider *v2;
  CGImageSource *v3;
  CGImageSourceStatus Status;

  v2 = CGDataProviderCreateWithData(0, this, size, 0);
  v3 = CGImageSourceCreateWithDataProvider(v2, 0);
  Status = CGImageSourceGetStatus(v3);
  CFRelease(v3);
  CFRelease(v2);
  return Status == kCGImageStatusComplete;
}

void altitude::TextureMap::~TextureMap(altitude::TextureMap *this)
{
  altitude::TextureMap::~TextureMap(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  BOOL v5;
  BOOL v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;

  *(_QWORD *)this = &off_1E42C39D0;
  v4 = (char *)this + 16;
  v2 = *((_QWORD *)this + 2);
  v3 = *((_QWORD *)v4 + 1);
  if (v3)
    v5 = v3 == v2;
  else
    v5 = 1;
  if (!v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v2 = *((_QWORD *)this + 2);
  }
  if (v2)
    v6 = v2 == *((_QWORD *)this + 4);
  else
    v6 = 1;
  if (!v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v7)
    goto LABEL_15;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    v10 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
    if (!v10)
      goto LABEL_21;
  }
  else
  {
LABEL_15:
    v10 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
    if (!v10)
      goto LABEL_21;
  }
  v11 = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
LABEL_21:
  v13 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void altitude::TextureMap::loadImage(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  int v4;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  uint64_t *v13;
  uint64_t v14;
  std::__shared_weak_count_vtbl *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int shared_owners_high;
  int shared_owners;
  unint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  __n128 v44;
  _BYTE *v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  _QWORD v51[2];
  char v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE v56[24];
  _BYTE *v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v4 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 8) = v4;
  if (v4 != 29)
  {
    v7 = *(_QWORD *)(a2 + 8);
    v8 = *(_QWORD *)(v7 + 24) - *(_QWORD *)(v7 + 16);
    v9 = *(_DWORD *)(v7 + 8);
    v10 = *(_QWORD *)v7;
    v11 = (std::__shared_weak_count *)operator new(0x48uLL);
    v11->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    v11->__shared_weak_owners_ = 0;
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E6060;
    v11[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42C4220;
    LODWORD(v11[1].__shared_owners_) = v8 >> 4;
    HIDWORD(v11[1].__shared_owners_) = v9;
    v11[1].__shared_weak_owners_ = v10;
    v11[2].__vftable = 0;
    v13 = (uint64_t *)&v11[2];
    v11[2].__shared_owners_ = 0;
    v11[2].__shared_weak_owners_ = 0;
    if ((v8 >> 4))
    {
      v14 = (v8 >> 4);
      v15 = (std::__shared_weak_count_vtbl *)operator new(16 * v14);
      v11[2].__vftable = v15;
      v16 = (char *)v15 + 16 * v14;
      v11[2].__shared_weak_owners_ = (uint64_t)v16;
      bzero(v15, 16 * v14);
      v17 = 0;
      v11[2].__shared_owners_ = (uint64_t)v16;
      do
      {
        v18 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 16);
        v19 = *(_OWORD *)(v18 + 16 * v17);
        v20 = *(std::__shared_weak_count **)(v18 + 16 * v17 + 8);
        if (v20)
        {
          v21 = (unint64_t *)&v20->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
          v23 = *v13;
          do
            v24 = __ldxr(v21);
          while (__stxr(v24 + 1, v21));
        }
        else
        {
          v23 = *v13;
        }
        v25 = v23 + 16 * v17;
        v26 = *(std::__shared_weak_count **)(v25 + 8);
        *(_OWORD *)v25 = v19;
        if (!v26)
          goto LABEL_16;
        v27 = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
          if (v20)
          {
LABEL_17:
            v29 = (unint64_t *)&v20->__shared_owners_;
            do
              v30 = __ldaxr(v29);
            while (__stlxr(v30 - 1, v29));
            if (!v30)
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
          }
        }
        else
        {
LABEL_16:
          if (v20)
            goto LABEL_17;
        }
        ++v17;
      }
      while (v17 != v14);
    }
    v31 = operator new();
    v32 = v31;
    do
      v33 = __ldxr(p_shared_owners);
    while (__stxr(v33 + 1, p_shared_owners));
    *(_QWORD *)(v31 + 16) = 0;
    *(_QWORD *)(v31 + 24) = 0;
    *(_DWORD *)(v31 + 32) = 0;
    *(_QWORD *)(v31 + 56) = 0x100000001;
    shared_owners = v11[1].__shared_owners_;
    shared_owners_high = HIDWORD(v11[1].__shared_owners_);
    *(_DWORD *)(v31 + 64) = 0;
    *(_DWORD *)(v31 + 68) = shared_owners_high;
    *(_QWORD *)(v31 + 72) = 0x100000001;
    *(_QWORD *)(v31 + 88) = 0;
    *(_QWORD *)(v31 + 96) = 0;
    *(_QWORD *)v31 = &off_1E42BE438;
    *(_QWORD *)(v31 + 8) = 0;
    *(_QWORD *)(v31 + 40) = &unk_1E42BE458;
    *(_QWORD *)(v31 + 48) = "";
    *(_DWORD *)(v31 + 104) = shared_owners;
    *(_QWORD *)(v31 + 112) = v11 + 1;
    *(_QWORD *)(v31 + 120) = v11;
    do
      v36 = __ldxr(p_shared_owners);
    while (__stxr(v36 + 1, p_shared_owners));
    *(_WORD *)(v31 + 128) = 0;
    *(_BYTE *)(v31 + 130) = 1;
    v37 = a3[1];
    *(_QWORD *)(v31 + 136) = *a3;
    *(_QWORD *)(v31 + 144) = v37;
    if (v37)
    {
      v38 = (unint64_t *)(v37 + 8);
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
    }
    *(_QWORD *)(v31 + 80) = v11[1].__shared_weak_owners_;
    do
      v40 = __ldaxr(p_shared_owners);
    while (__stlxr(v40 - 1, p_shared_owners));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    if (!a4)
      goto LABEL_40;
    v41 = *(_QWORD *)(v32 + 112);
    v42 = *(_QWORD *)(v32 + 80);
    v43 = operator new(0x20uLL);
    *v43 = &off_1E42C6DE0;
    v43[1] = ggl::Texture2D::onImplicitLoadComplete;
    v43[2] = 0;
    v43[3] = v32;
    v51[0] = v41;
    v51[1] = v32;
    v52 = 0;
    v53 = 0;
    v54 = 0;
    v55 = v42;
    v44 = std::__function::__func<std::__bind<void (ggl::Texture2D::*)(ggl::Texture2DLoadItem const&),ggl::Texture2D*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (ggl::Texture2D::*)(ggl::Texture2DLoadItem const&),ggl::Texture2D*,std::placeholders::__ph<1> const&>>,void ()(ggl::Texture2DLoadItem const&)>::__clone((uint64_t)v43);
    v57 = v45;
    (*(void (**)(_QWORD *, __n128))(*v43 + 40))(v43, v44);
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a4 + 24))(a4, v51);
    v46 = v56;
    if (v57 == v56)
    {
      v47 = 4;
    }
    else
    {
      if (!v57)
        goto LABEL_40;
      v47 = 5;
      v46 = v57;
    }
    (*(void (**)(void))(*v46 + 8 * v47))();
LABEL_40:
    *(_QWORD *)(a1 + 16) = v32;
    *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 20);
    do
      v48 = __ldaxr(p_shared_owners);
    while (__stlxr(v48 - 1, p_shared_owners));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void altitude::TextureData2D::~TextureData2D(altitude::TextureData2D *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  *(_QWORD *)this = &off_1E42C4220;
  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    v3 = *((_QWORD *)this + 4);
    v4 = (void *)*((_QWORD *)this + 3);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v2;
    operator delete(v4);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  *(_QWORD *)this = &off_1E42C4220;
  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    v3 = *((_QWORD *)this + 4);
    v4 = (void *)*((_QWORD *)this + 3);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v2;
    operator delete(v4);
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t altitude::TextureData2D::mipData(altitude::TextureData2D *this, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 16 * a2) + 8);
}

void std::__shared_ptr_emplace<altitude::TextureData2D>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E6060;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<altitude::TextureData2D>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E6060;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<altitude::TextureData2D>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<altitude::TextureMapSourceData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E6338;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<altitude::TextureMapSourceData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E6338;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<altitude::TextureMapSourceData>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
  {
    v3 = *(_QWORD *)(a1 + 40);
    v4 = *(void **)(a1 + 32);
    if (v3 != v1)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v1);
      v4 = *(void **)(a1 + 32);
    }
    *(_QWORD *)(a1 + 40) = v1;
    operator delete(v4);
  }
}

void md::RegionalResourceSetDecoder::~RegionalResourceSetDecoder(md::RegionalResourceSetDecoder *this)
{
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_pointer<md::RegionalResourceSet *,std::shared_ptr<md::RegionalResourceSet>::__shared_ptr_default_delete<md::RegionalResourceSet,md::RegionalResourceSet>,std::allocator<md::RegionalResourceSet>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void md::RegionalAttributionsDecoder::~RegionalAttributionsDecoder(md::RegionalAttributionsDecoder *this)
{
  JUMPOUT(0x1A1AF4E00);
}

void md::RegionalAttributionsDecoder::decode(const gdc::ResourceKey *a1@<X1>, const gdc::RawResourceSourceData *a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v7;
  id v8;
  char isKindOfClass;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  char *v20;
  void *v21;
  _QWORD *v22;
  _QWORD *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _OWORD v28[8];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)a2 + 16))
    goto LABEL_20;
  v7 = *(_QWORD *)a2;
  v8 = *(id *)(*(_QWORD *)a2 + 16);
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();

  if ((isKindOfClass & 1) != 0)
  {
    v10 = *(id *)(v7 + 16);
  }
  else
  {
    v11 = objc_alloc_init(MEMORY[0x1E0D27400]);
    v28[0] = *(_OWORD *)*((_QWORD *)a2 + 4);
    v12 = *(id *)(v7 + 16);
    objc_msgSend(v11, "decodeTile:forKey:", v12, v28);
    v10 = (id)objc_claimAutoreleasedReturnValue();

    if ((objc_msgSend(v10, "isMemberOfClass:", objc_opt_class()) & 1) == 0)
    {
      *a3 = 0;
      a3[1] = 0;

      return;
    }

  }
  if (!v10)
  {
LABEL_20:
    *a3 = 0;
    a3[1] = 0;
    return;
  }
  v13 = operator new();
  v14 = v10;
  gdc::Resource::Resource(v13, (uint64_t)a1);
  *(_QWORD *)(v13 + 144) = 0;
  *(_QWORD *)(v13 + 152) = 0;
  *(_QWORD *)(v13 + 160) = 0;
  if (objc_msgSend(v14, "attributionsCount"))
  {
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    objc_msgSend(v14, "attributions", 0);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
    if (v16)
    {
      v17 = *(_QWORD *)v25;
      do
      {
        v18 = 0;
        do
        {
          if (*(_QWORD *)v25 != v17)
            objc_enumerationMutation(v15);
          v21 = *(void **)(*((_QWORD *)&v24 + 1) + 8 * v18);
          v22 = *(_QWORD **)(v13 + 152);
          if ((unint64_t)v22 < *(_QWORD *)(v13 + 160))
          {
            v19 = v21;
            *v22 = &off_1E42B4B30;
            v22[1] = v19;
            v20 = (char *)(v22 + 3);
          }
          else
          {
            v20 = std::vector<geo::_retain_ptr<GEOAttribution * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::__emplace_back_slow_path<GEOAttribution * const {__strong}&,geo::memory_management_mode const&>((void **)(v13 + 144), v21);
          }
          *(_QWORD *)(v13 + 152) = v20;
          ++v18;
        }
        while (v16 != v18);
        v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
      }
      while (v16);
    }

  }
  v23 = (_QWORD *)operator new();
  *v23 = &off_1E42E6FE8;
  v23[1] = 0;
  v23[2] = 0;
  v23[3] = v13;
  *a3 = v13;
  a3[1] = (uint64_t)v23;

}

void sub_19FE41B70(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  void **v3;
  void *v4;
  void *v6;

  std::vector<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::~vector[abi:nn180100](v3);
  v6 = *(void **)(v2 + 8);
  if (v6 != *(void **)(v2 + 24))
    free(v6);

  MEMORY[0x1A1AF4E00](v2, 0x1030C407A41FE88);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<md::RegionalAttributions *,std::shared_ptr<md::RegionalAttributions>::__shared_ptr_default_delete<md::RegionalAttributions,md::RegionalAttributions>,std::allocator<md::RegionalAttributions>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<md::RegionalAttributions *,std::shared_ptr<md::RegionalAttributions>::__shared_ptr_default_delete<md::RegionalAttributions,md::RegionalAttributions>,std::allocator<md::RegionalAttributions>>::__on_zero_shared(uint64_t result)
{
  _QWORD *v1;
  void (***v2)(_QWORD);
  void (***v3)(_QWORD);
  void *v4;
  void (***v5)(_QWORD);
  void (***v6)(_QWORD);
  void (**v7)(_QWORD);
  BOOL v8;
  void *v9;

  v1 = *(_QWORD **)(result + 24);
  if (v1)
  {
    v2 = (void (***)(_QWORD))v1[18];
    if (v2)
    {
      v3 = (void (***)(_QWORD))v1[19];
      v4 = (void *)v1[18];
      if (v3 != v2)
      {
        v5 = v3 - 3;
        v6 = v3 - 3;
        do
        {
          v7 = *v6;
          v6 -= 3;
          (*v7)(v5);
          v8 = v5 == v2;
          v5 = v6;
        }
        while (!v8);
        v4 = (void *)v1[18];
      }
      v1[19] = v2;
      operator delete(v4);
    }
    v9 = (void *)v1[1];
    if (v9 != (void *)v1[3])
      free(v9);
    JUMPOUT(0x1A1AF4E00);
  }
  return result;
}

void sub_19FE41DC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;

  a9.super_class = (Class)VKStylesheetVendorResourceManifestTileGroupObserverProxy;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_19FE41E8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void md::StylesheetVendor::resetStylesheetCache(os_unfair_lock_s *this)
{
  os_unfair_lock_s *v2;
  void **v3;
  void **v4;
  void **v5;
  void **v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  void **v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void **v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;

  v2 = this + 6;
  os_unfair_lock_lock(this + 6);
  v3 = *(void ***)&this[10]._os_unfair_lock_opaque;
  v4 = *(void ***)&this[12]._os_unfair_lock_opaque;
  if (v4 != v3)
  {
    do
    {
      v14 = (std::__shared_weak_count *)*(v4 - 1);
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      v13 = v4 - 6;
      if (*((char *)v4 - 25) < 0)
        operator delete(*v13);
      v4 -= 6;
    }
    while (v13 != v3);
  }
  *(_QWORD *)&this[12]._os_unfair_lock_opaque = v3;
  v5 = *(void ***)&this[16]._os_unfair_lock_opaque;
  v6 = *(void ***)&this[18]._os_unfair_lock_opaque;
  if (v6 != v5)
  {
    do
    {
      v18 = (std::__shared_weak_count *)*(v6 - 1);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v17 = v6 - 6;
      if (*((char *)v6 - 25) < 0)
        operator delete(*v17);
      v6 -= 6;
    }
    while (v17 != v5);
  }
  *(_QWORD *)&this[18]._os_unfair_lock_opaque = v5;
  os_unfair_lock_unlock(v2);
  os_unfair_lock_lock(this + 7);
  LOBYTE(this[22]._os_unfair_lock_opaque) = 0;
  v7 = *(std::__shared_weak_count **)&this[26]._os_unfair_lock_opaque;
  *(_QWORD *)&this[24]._os_unfair_lock_opaque = 0;
  *(_QWORD *)&this[26]._os_unfair_lock_opaque = 0;
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  os_unfair_lock_unlock(this + 7);
  os_unfair_lock_lock(this + 8);
  LOBYTE(this[28]._os_unfair_lock_opaque) = 0;
  v10 = *(std::__shared_weak_count **)&this[32]._os_unfair_lock_opaque;
  *(_QWORD *)&this[30]._os_unfair_lock_opaque = 0;
  *(_QWORD *)&this[32]._os_unfair_lock_opaque = 0;
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  os_unfair_lock_unlock(this + 8);
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,int>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::__hash_value_type<std::string,int>,void *>,gss::Allocator>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16) && *(char *)(v2 + 39) < 0)
      operator delete(*(void **)(v2 + 16));
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)a1[1] + 40))(*(_QWORD *)a1[1], v2, 48);
  }
  return a1;
}

void std::__shared_ptr_emplace<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E65D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E65D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;

  v1 = result;
  v2 = *(uint64_t **)(result + 48);
  if (v2)
  {
    do
    {
      v4 = (uint64_t *)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete((void *)v2[2]);
      result = (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t))(**(_QWORD **)(v1 + 56) + 40))(*(_QWORD *)(v1 + 56), v2, 48);
      v2 = v4;
    }
    while (v4);
  }
  v3 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 24) = 0;
  if (v3)
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1 + 40) + 40))(*(_QWORD *)(v1 + 40), v3, 8 * *(_QWORD *)(v1 + 32));
  return result;
}

void md::TransitTileDataRenderable::~TransitTileDataRenderable(md::TransitTileDataRenderable *this)
{
  md::TransitTileDataRenderable::~TransitTileDataRenderable(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  void *v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)this = &off_1E426F878;
  v2 = (void *)*((_QWORD *)this + 51);
  if (v2)
  {
    objc_msgSend(v2, "stop");
    v3 = (void *)*((_QWORD *)this + 51);
    if (v3)
    {
      *((_QWORD *)this + 51) = 0;

      v3 = (void *)*((_QWORD *)this + 51);
    }
  }
  else
  {
    v3 = 0;
  }
  *((_QWORD *)this + 50) = &off_1E42B49F0;

  *(_QWORD *)this = &off_1E426F360;
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 49);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(this);
}

void sub_19FE422F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 400) = &off_1E42B49F0;

  md::MapTileDataRenderable<md::TransitTileData>::~MapTileDataRenderable((md::BaseMapTileDataRenderable *)v1);
  _Unwind_Resume(a1);
}

void md::MapTileDataRenderable<md::TransitTileData>::~MapTileDataRenderable(md::BaseMapTileDataRenderable *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E426F360;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 49);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E426F360;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 49);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E426F360;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 49);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::DiffuseBuilding::BuildingPipelineState::BuildingPipelineState(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD *a4)
{
  unsigned __int8 v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v10;
  char v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int16x8_t v18;
  int32x4_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int16x8_t v22;
  int32x4_t v23;
  int8x16_t v24;
  int32x4_t v25;
  int8x16_t v26;
  int32x4_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int16x8_t v37;
  int32x4_t v38;
  int8x16_t v39;
  int16x8_t v40;
  int32x4_t v41;
  int8x16_t v42;
  int32x4_t v43;
  int8x16_t v44;
  int32x4_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int16x8_t v60;
  int32x4_t v61;
  int8x16_t v62;
  int16x8_t v63;
  int32x4_t v64;
  int8x16_t v65;
  int32x4_t v66;
  int8x16_t v67;
  int32x4_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int16x8_t v75;
  int32x4_t v76;
  int8x16_t v77;
  int16x8_t v78;
  int32x4_t v79;
  int8x16_t v80;
  int32x4_t v81;
  int8x16_t v82;
  int32x4_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  _OWORD *v89;
  ggl::DiffuseBuildingShader *v90;
  unsigned __int8 v91;
  unsigned __int8 v92;
  unsigned __int8 v93;
  unsigned __int8 v94;
  unsigned __int8 v95;
  unsigned __int8 v96;
  _QWORD *v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  _BYTE v101[28];

  if ((v5 & 1) == 0)
  {
    v89 = a4;
    v97 = a2;
    v98 = a3;
    a2 = v97;
    a3 = v98;
    a4 = v89;
    if ((_DWORD)v90)
    {
      if ((v91 & 1) == 0)
      {
        if ((_DWORD)v90)
        {
          if ((v94 & 1) == 0
          {
            if ((v96 & 1) == 0
            {
              ggl::MeshTyped<ggl::BuildingFacade::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::BuildingFacade::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::BuildingFacade::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::BuildingFacade::DefaultVbo>::attributesReflection(void)::r;
            unk_1ECE43BF8 = 1;
          }
          ggl::DiffuseBuilding::BuildingPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::BuildingFacade::DefaultVbo>::typedReflection(void)::r;
          *(_QWORD *)algn_1EE57C2A8 = &ggl::DiffuseBuilding::pipelineDataBuildingPipelineDeviceStructs(void)::ref;
          qword_1EE57C2B0 = 0;
          if ((v95 & 1) == 0
          {
            ggl::DiffuseBuilding::pipelineDataBuildingPipelineConstantStructs(void)::ref = (uint64_t)ggl::Fog::Skyfog::reflection(void)::reflection;
            unk_1EE57C2E0 = ggl::Tile::View::reflection(void)::reflection;
            qword_1EE57C2E8 = (uint64_t)ggl::Building::Scale::reflection(void)::reflection;
            unk_1EE57C2F0 = ggl::Building::Style::reflection(void)::reflection;
            qword_1EE57C2F8 = (uint64_t)ggl::Building::Gradient::reflection(void)::reflection;
            unk_1EE57C300 = ggl::Lighting::LightConfiguration::reflection(void)::reflection;
            qword_1EE57C308 = (uint64_t)ggl::Building::Fade::reflection(void)::reflection;
          }
          qword_1EE57C2B8 = (uint64_t)&ggl::DiffuseBuilding::pipelineDataBuildingPipelineConstantStructs(void)::ref;
          unk_1EE57C2C0 = xmmword_19FFB3710;
        }
      }
      ggl::DiffuseBuilding::BuildingPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::DiffuseBuilding::BuildingPipelineSetup::typedReflection(void)::ref;
      ggl::DiffuseBuildingShader::typedReflection(v90);
      qword_1ECE31290 = (uint64_t)&ggl::DiffuseBuildingShader::typedReflection(void)::ref;
      if ((v92 & 1) == 0
      {
        ggl::DiffuseBuilding::pipelineStateBuildingPipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE57C470 = 0;
        qword_1EE57C478 = (uint64_t)"";
        dword_1EE57C480 = 0;
        qword_1EE57C488 = (uint64_t)&ggl::DiffuseBuilding::pipelineStateBuildingPipelineAttributeBinding_0(void)::attr;
        unk_1EE57C490 = 2;
      }
      qword_1ECE31298 = (uint64_t)&ggl::DiffuseBuilding::pipelineStateBuildingPipelineAttributeStructBinding(void)::attr;
      unk_1ECE312A0 = 1;
      qword_1ECE312A8 = 0;
      unk_1ECE312B0 = 1;
      qword_1ECE312B8 = (uint64_t)&ggl::DiffuseBuilding::pipelineStateBuildingPipelineDeviceStructBinding(void)::ref;
      unk_1ECE312C0 = 0;
      if ((v93 & 1) == 0
      {
        ggl::DiffuseBuilding::pipelineStateBuildingPipelineConstantStructBinding(void)::ref = 0;
        unk_1EE57C320 = 0;
        qword_1EE57C328 = (uint64_t)"skyfog";
        dword_1EE57C330 = 3;
        qword_1EE57C338 = (uint64_t)&ggl::DiffuseBuilding::pipelineStateBuildingPipelineConstantSkyfogBinding(void)::reflection;
        unk_1EE57C340 = xmmword_19FFB3720;
        qword_1EE57C350 = 1;
        unk_1EE57C358 = "view";
        dword_1EE57C360 = 3;
        qword_1EE57C368 = (uint64_t)&ggl::DiffuseBuilding::pipelineStateBuildingPipelineConstantViewBinding(void)::reflection;
        *(int64x2_t *)algn_1EE57C370 = vdupq_n_s64(2uLL);
        qword_1EE57C380 = 2;
        unk_1EE57C388 = "scale";
        dword_1EE57C390 = 3;
        qword_1EE57C398 = (uint64_t)&ggl::DiffuseBuilding::pipelineStateBuildingPipelineConstantScaleBinding(void)::reflection;
        unk_1EE57C3A0 = xmmword_19FFB3730;
        qword_1EE57C3B0 = 3;
        unk_1EE57C3B8 = "style";
        dword_1EE57C3C0 = 3;
        qword_1EE57C3C8 = (uint64_t)&ggl::DiffuseBuilding::pipelineStateBuildingPipelineConstantStyleBinding(void)::reflection;
        *(_OWORD *)algn_1EE57C3D0 = xmmword_19FFB3740;
        qword_1EE57C3E0 = 4;
        unk_1EE57C3E8 = "gradient";
        dword_1EE57C3F0 = 3;
        qword_1EE57C3F8 = (uint64_t)&ggl::DiffuseBuilding::pipelineStateBuildingPipelineConstantGradientBinding(void)::reflection;
        unk_1EE57C400 = xmmword_19FFB3670;
        qword_1EE57C410 = 5;
        unk_1EE57C418 = "lightConfig";
        dword_1EE57C420 = 3;
        qword_1EE57C428 = (uint64_t)&ggl::DiffuseBuilding::pipelineStateBuildingPipelineConstantLightConfigBinding(void)::reflection;
        xmmword_1EE57C430 = xmmword_19FFB3750;
        qword_1EE57C440 = 6;
        unk_1EE57C448 = "fade";
        dword_1EE57C450 = 3;
        qword_1EE57C458 = (uint64_t)&ggl::DiffuseBuilding::pipelineStateBuildingPipelineConstantFadeBinding(void)::reflection;
        unk_1EE57C460 = 2;
      }
      qword_1ECE312C8 = (uint64_t)&ggl::DiffuseBuilding::pipelineStateBuildingPipelineConstantStructBinding(void)::ref;
      unk_1ECE312D0 = 7;
      a4 = v89;
      a2 = v97;
      a3 = v98;
    }
  }
  v6 = *a2;
  v7 = (std::__shared_weak_count *)a2[1];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  *(_OWORD *)v101 = *(_OWORD *)a3;
  *(_OWORD *)&v101[12] = *(_OWORD *)(a3 + 12);
  v10 = *(_OWORD *)(a3 + 28);
  v11 = *(_BYTE *)(a3 + 44);
  v99 = *a4;
  v100 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &off_1E42B6760;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = &ggl::DiffuseBuilding::BuildingPipelineState::typedReflection(void)::ref;
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = v7;
  if (v7)
  {
    v12 = (unint64_t *)&v7->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_BYTE *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 148) = 0;
  *(_QWORD *)(a1 + 140) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 180) = 0;
  *(_QWORD *)(a1 + 196) = 0;
  *(_QWORD *)(a1 + 188) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 228) = 0;
  *(_QWORD *)(a1 + 244) = 0;
  *(_QWORD *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v99;
  *(_OWORD *)(a1 + 272) = v100;
  *(_BYTE *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0x100000001;
  *(_BYTE *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v101;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v101[12];
  *(_OWORD *)(a1 + 92) = v10;
  *(_BYTE *)(a1 + 108) = v11;
  if (v7)
  {
    v14 = (unint64_t *)&v7->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_BYTE *)(a1 + 305) = 0;
  v16 = *(int8x16_t *)(a1 + 320);
  v17 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  v18 = vmovl_high_s8(v17);
  v19 = vmovl_s16(*(int16x4_t *)v18.i8);
  v20.i64[0] = v19.u32[0];
  v20.i64[1] = v19.u32[1];
  v21 = v20;
  v22 = vmovl_s8(*(int8x8_t *)v17.i8);
  v23 = vmovl_s16(*(int16x4_t *)v22.i8);
  *(_QWORD *)a1 = &off_1E42B6F98;
  v20.i64[0] = v23.u32[0];
  v20.i64[1] = v23.u32[1];
  v24 = v20;
  v25 = vmovl_high_s16(v18);
  v20.i64[0] = v25.u32[0];
  v20.i64[1] = v25.u32[1];
  v26 = v20;
  v27 = vmovl_high_s16(v22);
  v20.i64[0] = v27.u32[0];
  v20.i64[1] = v27.u32[1];
  v28 = v20;
  v20.i64[0] = v19.u32[2];
  v20.i64[1] = v19.u32[3];
  v29 = v20;
  v20.i64[0] = v23.u32[2];
  v20.i64[1] = v23.u32[3];
  v30 = v20;
  v20.i64[0] = v25.u32[2];
  v20.i64[1] = v25.u32[3];
  v31 = v20;
  v20.i64[0] = v27.u32[2];
  v20.i64[1] = v27.u32[3];
  v32 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v20);
  v33 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v31);
  v34 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v30);
  v35 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v26);
  v36 = vceqzq_s8(v16);
  v37 = vmovl_high_s8(v36);
  v38 = vmovl_s16(*(int16x4_t *)v37.i8);
  v20.i64[0] = v38.u32[0];
  v20.i64[1] = v38.u32[1];
  v39 = v20;
  v40 = vmovl_s8(*(int8x8_t *)v36.i8);
  v41 = vmovl_s16(*(int16x4_t *)v40.i8);
  v20.i64[0] = v41.u32[0];
  v20.i64[1] = v41.u32[1];
  v42 = v20;
  v43 = vmovl_high_s16(v37);
  v20.i64[0] = v43.u32[0];
  v20.i64[1] = v43.u32[1];
  v44 = v20;
  v45 = vmovl_high_s16(v40);
  v20.i64[0] = v45.u32[0];
  v20.i64[1] = v45.u32[1];
  v46 = v20;
  v20.i64[0] = v38.u32[2];
  v20.i64[1] = v38.u32[3];
  v47 = v20;
  v20.i64[0] = v41.u32[2];
  v20.i64[1] = v41.u32[3];
  v48 = v20;
  v20.i64[0] = v43.u32[2];
  v20.i64[1] = v43.u32[3];
  v49 = v20;
  v20.i64[0] = v45.u32[2];
  v20.i64[1] = v45.u32[3];
  v50 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v49);
  v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v39), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v21));
  v52 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v42), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v24));
  v53 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v44), v35);
  v54 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v46), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v28));
  v55 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v47), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v29));
  v56 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v48), v34);
  v57 = vorrq_s8(v50, v33);
  v58 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v20), v32);
  v59 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  v60 = vmovl_s8(*(int8x8_t *)v59.i8);
  v61 = vmovl_high_s16(v60);
  v20.i64[0] = v61.i32[2];
  v20.i64[1] = v61.i32[3];
  v62 = v20;
  v63 = vmovl_high_s8(v59);
  v64 = vmovl_high_s16(v63);
  v20.i64[0] = v64.i32[2];
  v20.i64[1] = v64.i32[3];
  v65 = v20;
  v66 = vmovl_s16(*(int16x4_t *)v60.i8);
  v20.i64[0] = v66.i32[2];
  v20.i64[1] = v66.i32[3];
  v67 = v20;
  v68 = vmovl_s16(*(int16x4_t *)v63.i8);
  v20.i64[0] = v68.i32[2];
  v20.i64[1] = v68.i32[3];
  v69 = v20;
  v20.i64[0] = v61.i32[0];
  v20.i64[1] = v61.i32[1];
  v70 = v20;
  v20.i64[0] = v64.i32[0];
  v20.i64[1] = v64.i32[1];
  v71 = v20;
  v20.i64[0] = v66.i32[0];
  v20.i64[1] = v66.i32[1];
  v72 = v20;
  v20.i64[0] = v68.i32[0];
  v20.i64[1] = v68.i32[1];
  v73 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v20);
  v74 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  v75 = vmovl_high_s8(v74);
  v76 = vmovl_s16(*(int16x4_t *)v75.i8);
  v20.i64[0] = v76.i32[0];
  v20.i64[1] = v76.i32[1];
  v77 = v20;
  v78 = vmovl_s8(*(int8x8_t *)v74.i8);
  v79 = vmovl_s16(*(int16x4_t *)v78.i8);
  v20.i64[0] = v79.i32[0];
  v20.i64[1] = v79.i32[1];
  v80 = v20;
  v81 = vmovl_high_s16(v75);
  v20.i64[0] = v81.i32[0];
  v20.i64[1] = v81.i32[1];
  v82 = v20;
  v83 = vmovl_high_s16(v78);
  v20.i64[0] = v83.i32[0];
  v20.i64[1] = v83.i32[1];
  v84 = v20;
  v20.i64[0] = v76.i32[2];
  v20.i64[1] = v76.i32[3];
  v85 = v20;
  v20.i64[0] = v79.i32[2];
  v20.i64[1] = v79.i32[3];
  v86 = v20;
  v20.i64[0] = v81.i32[2];
  v20.i64[1] = v81.i32[3];
  v87 = v20;
  v20.i64[0] = v83.i32[2];
  v20.i64[1] = v83.i32[3];
  *(_QWORD *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v80), vbicq_s8((int8x16_t)xmmword_19FFB3170, v72)), v52), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v77), v73), v51)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v84), vbicq_s8((int8x16_t)xmmword_19FFB3190, v70)), v54), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v82), vbicq_s8((int8x16_t)xmmword_19FFB3180, v71)),
                                               v53))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v86), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v67)), v56), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v85), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v69)), v55)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v20), vbicq_s8((int8x16_t)xmmword_19FFB31D0, v62)), v58), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31F0, v87),
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31C0, v65)),
                                               v57)))));
  *(_BYTE *)(a1 + 288) = 1;
  return a1;
}

void ggl::DiffuseBuilding::BuildingPipelineSetup::~BuildingPipelineSetup(ggl::DiffuseBuilding::BuildingPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::DiffuseBuilding::BuildingPipelineSetup::constantDataIsEnabled(ggl::DiffuseBuilding::BuildingPipelineSetup *this, unint64_t a2)
{
  return a2 < 7;
}

BOOL ggl::DiffuseBuilding::BuildingPipelineSetup::textureIsEnabled(ggl::DiffuseBuilding::BuildingPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

void md::RouteLineOverlayGroup::addPolyline(uint64_t **this, VKPolylineOverlay *a2)
{
  void **v3;
  _QWORD *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  double v9;
  uint64_t *v10;
  uint64_t **v11;
  uint64_t **v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint8x8_t v22;
  _QWORD **v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  float v28;
  float v29;
  _BOOL8 v30;
  unint64_t v31;
  unint64_t v32;
  size_t prime;
  void *v34;
  void *v35;
  uint64_t v36;
  _QWORD *v37;
  size_t v38;
  size_t v39;
  size_t v40;
  _QWORD *i;
  size_t v42;
  uint64_t v43;
  unint64_t v44;
  uint8x8_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  size_t v49;
  _QWORD *v50;
  _QWORD *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t *v59;
  VKPolylineOverlay *v60;
  uint64_t *v61;
  uint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  VKPolylineOverlay *v70;
  id *v71;
  id *v72;
  void *v73;
  id *v74;
  id *v75;
  id *v76;
  void (**v77)(id *);
  BOOL v78;
  unint64_t *v79;
  unint64_t v80;
  void *v81;
  VKPolylineOverlay *v82;
  _QWORD *v83;
  std::__shared_weak_count *v84;

  v82 = a2;
  v3 = (void **)(this + 6);
  v4 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(this + 6, (unint64_t)v82);
  v5 = v82;
  if (v4)
    goto LABEL_130;
  v6 = (std::__shared_weak_count *)operator new(0x378uLL);
  v6->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB7F0;
  v8 = (unint64_t)&v6[1];
  md::RouteLineOverlay::RouteLineOverlay((md::RouteLineOverlay *)&v6[1], v82, *((_BYTE *)this + 136), v9);
  v83 = &v6[1].__vftable;
  v84 = v6;
  v11 = this + 1;
  v10 = this[1];
  if (v10)
  {
    while (1)
    {
      while (1)
      {
        v12 = (uint64_t **)v10;
        v13 = v10[4];
        if (v8 >= v13)
          break;
        v10 = *v12;
        v11 = v12;
        if (!*v12)
          goto LABEL_9;
      }
      if (v13 >= v8)
        break;
      v10 = v12[1];
      if (!v10)
      {
        v11 = v12 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v12 = this + 1;
LABEL_9:
    v14 = (uint64_t *)operator new(0x30uLL);
    v15 = v14;
    v14[4] = v8;
    v14[5] = (uint64_t)v6;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    *v14 = 0;
    v14[1] = 0;
    v14[2] = (uint64_t)v12;
    *v11 = v14;
    v17 = (uint64_t *)**this;
    if (v17)
    {
      *this = v17;
      v15 = *v11;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(this[1], v15);
    this[2] = (uint64_t *)((char *)this[2] + 1);
  }
  v18 = 0x9DDFEA08EB382D69 * (((8 * (_DWORD)v82) + 8) ^ ((unint64_t)v82 >> 32));
  v19 = 0x9DDFEA08EB382D69 * (((unint64_t)v82 >> 32) ^ (v18 >> 47) ^ v18);
  v20 = 0x9DDFEA08EB382D69 * (v19 ^ (v19 >> 47));
  v21 = (unint64_t)this[7];
  if (v21)
  {
    v22 = (uint8x8_t)vcnt_s8((int8x8_t)v21);
    v22.i16[0] = vaddlv_u8(v22);
    if (v22.u32[0] > 1uLL)
    {
      v8 = 0x9DDFEA08EB382D69 * (v19 ^ (v19 >> 47));
      if (v20 >= v21)
        v8 = v20 % v21;
    }
    else
    {
      v8 = v20 & (v21 - 1);
    }
    v23 = (_QWORD **)*((_QWORD *)*v3 + v8);
    if (v23)
    {
      v24 = *v23;
      if (*v23)
      {
        if (v22.u32[0] < 2uLL)
        {
          while (1)
          {
            v25 = v24[1];
            if (v25 == v20)
            {
              if ((VKPolylineOverlay *)v24[2] == v82)
                goto LABEL_96;
            }
            else if ((v25 & (v21 - 1)) != v8)
            {
              goto LABEL_36;
            }
            v24 = (_QWORD *)*v24;
            if (!v24)
              goto LABEL_36;
          }
        }
        do
        {
          v26 = v24[1];
          if (v26 == v20)
          {
            if ((VKPolylineOverlay *)v24[2] == v82)
              goto LABEL_96;
          }
          else
          {
            if (v26 >= v21)
              v26 %= v21;
            if (v26 != v8)
              break;
          }
          v24 = (_QWORD *)*v24;
        }
        while (v24);
      }
    }
  }
LABEL_36:
  v24 = operator new(0x28uLL);
  v27 = this + 8;
  *v24 = 0;
  v24[1] = v20;
  v24[4] = 0;
  v24[2] = v82;
  v24[3] = 0;
  v28 = (float)((unint64_t)this[9] + 1);
  v29 = *((float *)this + 20);
  if (!v21 || (float)(v29 * (float)v21) < v28)
  {
    v30 = 1;
    if (v21 >= 3)
      v30 = (v21 & (v21 - 1)) != 0;
    v31 = v30 | (2 * v21);
    v32 = vcvtps_u32_f32(v28 / v29);
    if (v31 <= v32)
      prime = v32;
    else
      prime = v31;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v21 = (unint64_t)this[7];
    }
    if (prime <= v21)
    {
      if (prime >= v21)
        goto LABEL_73;
      v44 = vcvtps_u32_f32((float)(unint64_t)this[9] / *((float *)this + 20));
      if (v21 < 3 || (v45 = (uint8x8_t)vcnt_s8((int8x8_t)v21), v45.i16[0] = vaddlv_u8(v45), v45.u32[0] > 1uLL))
      {
        v44 = std::__next_prime(v44);
      }
      else
      {
        v46 = 1 << -(char)__clz(v44 - 1);
        if (v44 >= 2)
          v44 = v46;
      }
      if (prime <= v44)
        prime = v44;
      if (prime >= v21)
      {
        v21 = (unint64_t)this[7];
LABEL_73:
        if ((v21 & (v21 - 1)) != 0)
        {
          if (v20 >= v21)
            v8 = v20 % v21;
          else
            v8 = v20;
        }
        else
        {
          v8 = (v21 - 1) & v20;
        }
        goto LABEL_86;
      }
      if (!prime)
      {
        v81 = *v3;
        *v3 = 0;
        if (v81)
          operator delete(v81);
        v21 = 0;
        this[7] = 0;
        goto LABEL_73;
      }
    }
    if (prime >> 61)
      goto LABEL_142;
    v34 = operator new(8 * prime);
    v35 = *v3;
    *v3 = v34;
    if (v35)
      operator delete(v35);
    v36 = 0;
    this[7] = (uint64_t *)prime;
    do
      *((_QWORD *)*v3 + v36++) = 0;
    while (prime != v36);
    v37 = (_QWORD *)*v27;
    if (!*v27)
    {
LABEL_72:
      v21 = prime;
      goto LABEL_73;
    }
    v38 = v37[1];
    v39 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v40 = v38 & v39;
      *((_QWORD *)*v3 + v40) = v27;
      for (i = (_QWORD *)*v37; *v37; i = (_QWORD *)*v37)
      {
        v42 = i[1] & v39;
        if (v42 == v40)
        {
          v37 = i;
        }
        else if (*((_QWORD *)*v3 + v42))
        {
          *v37 = *i;
          v43 = 8 * v42;
          *i = **(_QWORD **)((char *)*v3 + v43);
          **(_QWORD **)((char *)*v3 + v43) = i;
        }
        else
        {
          *((_QWORD *)*v3 + v42) = v37;
          v37 = i;
          v40 = v42;
        }
      }
      goto LABEL_72;
    }
    if (v38 >= prime)
      v38 %= prime;
    *((_QWORD *)*v3 + v38) = v27;
    v47 = (_QWORD *)*v37;
    if (!*v37)
      goto LABEL_72;
    while (1)
    {
      v49 = v47[1];
      if (v49 >= prime)
        v49 %= prime;
      if (v49 != v38)
      {
        if (!*((_QWORD *)*v3 + v49))
        {
          *((_QWORD *)*v3 + v49) = v37;
          goto LABEL_77;
        }
        *v37 = *v47;
        v48 = 8 * v49;
        *v47 = **(_QWORD **)((char *)*v3 + v48);
        **(_QWORD **)((char *)*v3 + v48) = v47;
        v47 = v37;
      }
      v49 = v38;
LABEL_77:
      v37 = v47;
      v47 = (_QWORD *)*v47;
      v38 = v49;
      if (!v47)
        goto LABEL_72;
    }
  }
LABEL_86:
  v50 = *v3;
  v51 = (_QWORD *)*((_QWORD *)*v3 + v8);
  if (v51)
  {
    *v24 = *v51;
LABEL_94:
    *v51 = v24;
    goto LABEL_95;
  }
  *v24 = *v27;
  *v27 = v24;
  v50[v8] = v27;
  if (*v24)
  {
    v52 = *(_QWORD *)(*v24 + 8);
    if ((v21 & (v21 - 1)) != 0)
    {
      if (v52 >= v21)
        v52 %= v21;
    }
    else
    {
      v52 &= v21 - 1;
    }
    v51 = (char *)*v3 + 8 * v52;
    goto LABEL_94;
  }
LABEL_95:
  this[9] = (uint64_t *)((char *)this[9] + 1);
LABEL_96:
  if (v84)
  {
    v53 = (unint64_t *)&v84->__shared_owners_;
    do
      v54 = __ldxr(v53);
    while (__stxr(v54 + 1, v53));
  }
  v55 = (std::__shared_weak_count *)v24[4];
  v24[3] = v83;
  v24[4] = v84;
  if (v55)
  {
    v56 = (unint64_t *)&v55->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  v59 = this[4];
  v58 = (unint64_t)this[5];
  if ((unint64_t)v59 < v58)
  {
    v60 = v82;
    *v59 = (uint64_t)&off_1E42B4CF0;
    v59[1] = (uint64_t)v60;
    v61 = v59 + 3;
    goto LABEL_124;
  }
  v62 = this[3];
  v63 = 0xAAAAAAAAAAAAAAABLL * (v59 - v62);
  if (v63 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  v64 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v58 - (_QWORD)v62) >> 3);
  v65 = 2 * v64;
  if (2 * v64 <= v63 + 1)
    v65 = v63 + 1;
  if (v64 >= 0x555555555555555)
    v66 = 0xAAAAAAAAAAAAAAALL;
  else
    v66 = v65;
  if (v66)
  {
    if (v66 <= 0xAAAAAAAAAAAAAAALL)
    {
      v67 = (char *)operator new(24 * v66);
      goto LABEL_116;
    }
LABEL_142:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v67 = 0;
LABEL_116:
  v68 = &v67[24 * v63];
  v69 = &v67[24 * v66];
  v70 = v82;
  *(_QWORD *)v68 = &off_1E42B4CF0;
  *((_QWORD *)v68 + 1) = v70;
  v61 = (uint64_t *)(v68 + 24);
  v72 = (id *)this[3];
  v71 = (id *)this[4];
  if (v71 != v72)
  {
    do
    {
      *((_QWORD *)v68 - 3) = &off_1E42B4CF0;
      v68 -= 24;
      *((_QWORD *)v68 + 1) = 0;
      objc_storeStrong((id *)v68 + 1, *(v71 - 2));
      v73 = *(v71 - 2);
      *(v71 - 2) = 0;

      v71 -= 3;
    }
    while (v71 != v72);
    v71 = (id *)this[3];
    v74 = (id *)this[4];
    this[3] = (uint64_t *)v68;
    this[4] = v61;
    this[5] = (uint64_t *)v69;
    if (v74 != v71)
    {
      v75 = v74 - 3;
      v76 = v74 - 3;
      do
      {
        v77 = (void (**)(id *))*v76;
        v76 -= 3;
        (*v77)(v75);
        v78 = v75 == v71;
        v75 = v76;
      }
      while (!v78);
    }
    if (!v71)
      goto LABEL_124;
    goto LABEL_123;
  }
  this[3] = (uint64_t *)v68;
  this[4] = v61;
  this[5] = (uint64_t *)v69;
  if (v71)
LABEL_123:
    operator delete(v71);
LABEL_124:
  this[4] = v61;
  if (v84)
  {
    v79 = (unint64_t *)&v84->__shared_owners_;
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  v5 = v82;
LABEL_130:

}

void sub_19FE43544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, char a10, uint64_t a11, char a12)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)&a12);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a10);

  _Unwind_Resume(a1);
}

BOOL md::IconLabelPart::isVisuallySimilar(md::IconLabelPart *this, const md::LabelPart *a2)
{
  _BOOL8 result;
  uint64_t v3;
  uint64_t v4;

  result = 0;
  if (*((float *)this + 143) == *((float *)a2 + 143)
    && *((float *)this + 144) == *((float *)a2 + 144)
    && *((float *)this + 145) == *((float *)a2 + 145))
  {
    v3 = *((_QWORD *)this + 80);
    if (!v3)
      return 1;
    v4 = *((_QWORD *)a2 + 80);
    if (!v4
      || (md::LabelIcon::operator==(*((_QWORD *)this + 80), *((_QWORD *)a2 + 80)) & 1) == 0
      && !objc_msgSend(*(id *)(v3 + 16), "compareTo:", *(_QWORD *)(v4 + 16)))
    {
      return 1;
    }
  }
  return result;
}

void md::IconLabelPart::populateHoverBounds(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  int v6;
  BOOL v7;
  char *v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  _DWORD *v17;
  _DWORD *v18;
  char *v19;
  __int128 v20;
  float *v21;
  float v22;
  float v23;
  float *v24;
  _DWORD *v25;
  unint64_t v26;
  unint64_t v27;
  _DWORD *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  _DWORD *v33;
  _DWORD *v34;
  char *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;

  if (!*(_BYTE *)(a1 + 568))
  {
    v2 = *(_QWORD *)(a1 + 640);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 96);
      if (v3)
      {
        v5 = *(unsigned __int8 *)(v3 + 47);
        v6 = *(unsigned __int8 *)(v3 + 48);
        if (v5)
          v7 = v6 == 0;
        else
          v7 = 0;
        if (v7)
        {
          v21 = *(float **)(a1 + 24);
          v22 = v21[100] - v21[98];
          v23 = sqrtf((float)(v22 * v22) + (float)((float)(v21[101] - v21[99]) * (float)(v21[101] - v21[99]))) * 0.5;
          v38 = *(_OWORD *)(v21 + 98);
          v25 = *(_DWORD **)a2;
          v24 = *(float **)(a2 + 8);
          v26 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v24 - *(_QWORD *)a2) >> 2);
          v27 = *(_QWORD *)(a2 + 24);
          if (v27 < v26 + 1)
          {
            v28 = *(_DWORD **)(a2 + 16);
            v29 = (1 << -(char)__clz(v27 + 1));
            if (v27 >= 0xFFFFFFFFFFFFFFFELL)
              v29 = 1;
            if (v29 <= v26 + 1)
              v30 = v26 + 1;
            else
              v30 = v29;
            v31 = (char *)malloc_type_malloc(20 * v30, 0x1000040A86A77D5uLL);
            v32 = v31;
            v33 = *(_DWORD **)a2;
            v34 = *(_DWORD **)(a2 + 8);
            if (*(_DWORD **)a2 != v34)
            {
              v35 = v31;
              do
              {
                v36 = *(_OWORD *)v33;
                *((_DWORD *)v35 + 4) = v33[4];
                *(_OWORD *)v35 = v36;
                v35 += 20;
                v33 += 5;
              }
              while (v33 != v34);
            }
            if (v25 != v28)
              free(*(void **)a2);
            v24 = (float *)&v32[20 * v26];
            *(_QWORD *)a2 = v32;
            *(_QWORD *)(a2 + 8) = v24;
            *(_QWORD *)(a2 + 24) = v30;
          }
          *(_OWORD *)v24 = v38;
          v24[4] = v23;
        }
        else
        {
          v37 = *(_OWORD *)(*(_QWORD *)(a1 + 24) + 392);
          v9 = *(void **)a2;
          v8 = *(char **)(a2 + 8);
          v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v8[-*(_QWORD *)a2] >> 2);
          v11 = *(_QWORD *)(a2 + 24);
          if (v11 < v10 + 1)
          {
            v12 = *(void **)(a2 + 16);
            v13 = (1 << -(char)__clz(v11 + 1));
            if (v11 >= 0xFFFFFFFFFFFFFFFELL)
              v13 = 1;
            if (v13 <= v10 + 1)
              v14 = v10 + 1;
            else
              v14 = v13;
            v15 = (char *)malloc_type_malloc(20 * v14, 0x1000040A86A77D5uLL);
            v16 = v15;
            v17 = *(_DWORD **)a2;
            v18 = *(_DWORD **)(a2 + 8);
            if (*(_DWORD **)a2 != v18)
            {
              v19 = v15;
              do
              {
                v20 = *(_OWORD *)v17;
                *((_DWORD *)v19 + 4) = v17[4];
                *(_OWORD *)v19 = v20;
                v19 += 20;
                v17 += 5;
              }
              while (v17 != v18);
            }
            if (v9 != v12)
              free(*(void **)a2);
            v8 = &v16[20 * v10];
            *(_QWORD *)a2 = v16;
            *(_QWORD *)(a2 + 8) = v8;
            *(_QWORD *)(a2 + 24) = v14;
          }
          *(_OWORD *)v8 = v37;
          *((_DWORD *)v8 + 4) = 0;
        }
        *(_QWORD *)(a2 + 8) += 20;
      }
    }
  }
}

uint64_t md::IconLabelPart::populateCollisionObjects(uint64_t a1, uint64_t a2, float a3, float a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  const float *v13;
  float32x2_t v14;
  float v15;
  float32x2_t v16;
  float32x2_t v17;
  double v18;

  v11 = *(_QWORD *)(a2 + 8);
  v12 = *(_QWORD *)(a2 + 16);
  if (v12 - v11 == -208)
  {
    for (; v12 != v11; v12 -= 208)
    {
      free(*(void **)(v12 - 48));
      free(*(void **)(v12 - 40));
      free(*(void **)(v12 - 24));
    }
    *(_QWORD *)(a2 + 16) = v11;
  }
  else
  {
    std::vector<md::CollisionObject,geo::StdAllocator<md::CollisionObject,mdm::Allocator>>::__append((uint64_t *)(a2 + 8), 1uLL);
    v11 = *(_QWORD *)(a2 + 16);
  }
  v13 = (const float *)(a1 + 8);
  v14 = vld1_dup_f32(v13);
  *(float32x2_t *)(v11 - 112) = vadd_f32(*(float32x2_t *)(a1 + 168), v14);
  *(_WORD *)(v11 - 9) = *(_WORD *)(a1 + 271);
  v15 = *(float *)a8;
  *(_DWORD *)(v11 - 192) = *(_DWORD *)a8;
  *(_DWORD *)(v11 - 188) = *(_DWORD *)(a8 + 4);
  *(_BYTE *)(v11 - 12) = fabsf(v15 + -1.0) > 0.000001;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a1 + 912))(a1, 0, a1 + 640, v11 - 208);
  v16 = *(float32x2_t *)(v11 - 208);
  v17 = vsub_f32(*(float32x2_t *)(v11 - 200), v16);
  v18 = COERCE_DOUBLE(vmla_f32(vsub_f32((float32x2_t)__PAIR64__(LODWORD(a4), LODWORD(a3)), v16), (float32x2_t)0xBF000000BF000000, v17));
  *(double *)(v11 - 176) = v18;
  return md::CollisionObject::setupShapeData(v11 - 208, *(double *)&v17, v18, -0.0000305175998);
}

float md::IconLabelPart::calloutAnchorRect(md::IconLabelPart *this, int a2)
{
  uint64_t v2;
  float v3;
  unsigned __int8 v4;
  float result;
  float v6;
  float v7;
  float v8;
  float v9;

  v2 = *((_QWORD *)this + 80);
  if (!v2)
    return 3.4028e38;
  v3 = *((float *)this + 153) * *(float *)(*((_QWORD *)this + 4) + 68);
  v4 = atomic_load((unsigned __int8 *)(v2 + 144));
  if ((v4 & 1) != 0)
  {
    v6 = *(float *)(v2 + 60) - *(float *)(v2 + 52);
    v7 = *(float *)(v2 + 56) - *(float *)(v2 + 48);
    if (a2)
    {
      v8 = v7 * 0.5;
      v9 = fminf(*(float *)(v2 + 92), v6 - *(float *)(v2 + 92));
    }
    else
    {
      v9 = v6 * 0.5;
      v8 = fminf(*(float *)(v2 + 88), v7 - *(float *)(v2 + 88));
    }
    if (v8 < 0.0)
    {
      result = 3.4028e38;
    }
    else
    {
      result = 3.4028e38;
      if (v9 >= 0.0)
        result = (float)(*(float *)(v2 + 88) - *(float *)(v2 + 80)) - v8;
    }
  }
  else
  {
    result = 3.4028e38;
  }
  if (v3 != 1.0)
    return result * v3;
  return result;
}

void md::IconLabelPart::populateImageInfos(float32x2_t *a1, uint64_t a2)
{
  float32x2_t v2;
  uint64_t v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  float32x2_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  float32x2_t v15;

  v2 = a1[80];
  if (!*(_QWORD *)&v2)
    return;
  v3 = *(_QWORD *)(*(_QWORD *)&v2 + 32);
  if (!v3)
    return;
  v5 = *(std::__shared_weak_count **)(*(_QWORD *)&v2 + 40);
  v13 = *(_QWORD *)(*(_QWORD *)&v2 + 32);
  v14 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = vmla_f32(a1[45], (float32x2_t)0x3F0000003F000000, vsub_f32(a1[46], a1[45]));
  v15 = v8;
  v9 = *(_QWORD **)(a2 + 8);
  if ((unint64_t)v9 >= *(_QWORD *)(a2 + 16))
  {
    v10 = std::vector<md::LabelImageInfo,geo::StdAllocator<md::LabelImageInfo,mdm::Allocator>>::__emplace_back_slow_path<md::LabelImageInfo>(a2, (uint64_t)&v13);
    v5 = v14;
    *(_QWORD *)(a2 + 8) = v10;
    if (!v5)
      return;
    goto LABEL_12;
  }
  if (v9)
  {
    *v9 = v3;
    v9[1] = v5;
    v13 = 0;
    v14 = 0;
    v9[2] = v8;
    v5 = 0;
  }
  *(_QWORD *)(a2 + 8) = v9 + 3;
  if (v5)
  {
LABEL_12:
    v11 = (unint64_t *)&v5->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_19FE43CD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t md::IconLabelPart::debugString@<X0>(md::IconLabelPart *this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  std::ios_base *v9;
  uint64_t v10;
  void *p_p;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::ios_base *v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t i;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  size_t v32;
  void **p_dst;
  unint64_t v34;
  const void **v35;
  const void *v36;
  uint64_t v37;
  uint64_t v38;
  void **v39;
  uint64_t v40;
  char v41;
  size_t v42;
  const void **v43;
  unint64_t v44;
  const void *v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  void **__dst;
  size_t v51;
  int64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD v55[3];
  uint64_t v56;
  unint64_t v57;
  void *v58[2];
  __int128 v59;
  int v60;
  uint64_t v61[19];
  void *__p;
  uint64_t v63;
  unsigned __int8 v64;
  _QWORD v65[3];
  uint64_t v66;
  unint64_t v67;
  __int128 v68;
  __int128 v69;
  int v70;
  uint64_t v71[20];

  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = MEMORY[0x1E0DE4F60];
  v7 = *(_QWORD **)(MEMORY[0x1E0DE4F60] + 8);
  v8 = *(_QWORD **)(MEMORY[0x1E0DE4F60] + 16);
  v61[0] = MEMORY[0x1E0DE4FE0] + 64;
  v53 = v7;
  *(_QWORD **)((char *)&v53 + *(v7 - 3)) = v8;
  v9 = (std::ios_base *)((char *)&v53 + *(v53 - 3));
  std::ios_base::init(v9, &v54);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v53 = (_QWORD *)(v4 + 24);
  v61[0] = v5;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8];
  v54 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v58 = 0u;
  v59 = 0u;
  v60 = 16;
  md::ImageLabelPart::debugString(this, &__p);
  if ((v64 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = __p;
  if ((v64 & 0x80u) == 0)
    v12 = v64;
  else
    v12 = v63;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v53, (uint64_t)p_p, v12);
  if ((char)v64 < 0)
    operator delete(__p);
  v13 = *((_QWORD *)this + 80);
  if (!v13 || !*(_QWORD *)(v13 + 32))
    goto LABEL_63;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v53, (uint64_t)" ", 1);
  v14 = *(_QWORD *)(*((_QWORD *)this + 80) + 32);
  v71[0] = v4 + 64;
  __p = v7;
  *(void **)((char *)&__p + *(v7 - 3)) = v8;
  v15 = (std::ios_base *)((char *)&__p + *((_QWORD *)__p - 3));
  std::ios_base::init(v15, &v63);
  v15[1].__vftable = 0;
  v15[1].__fmtflags_ = -1;
  __p = (void *)(v4 + 24);
  v71[0] = v4 + 64;
  std::streambuf::basic_streambuf();
  v63 = v10 + 16;
  v68 = 0u;
  v69 = 0u;
  v70 = 16;
  v16 = *(unsigned __int8 *)(v14 + 113);
  switch(v16)
  {
    case 8:
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__p, (uint64_t)"attr[", 5);
      v20 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v20, (uint64_t)"=", 1);
      v21 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v21, (uint64_t)"]", 1);
      if (*(_QWORD *)(v14 + 72) != *(_QWORD *)(v14 + 80))
      {
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__p, (uint64_t)" extattr[", 9);
        v23 = *(_QWORD *)(v14 + 72);
        for (i = *(_QWORD *)(v14 + 80); v23 != i; v23 += 2)
          std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__p, (uint64_t)"]", 1);
      }
      break;
    case 10:
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__p, (uint64_t)"DEBUG_FALLBACK_ICON", 19);
      break;
    case 9:
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__p, (uint64_t)"name=", 5);
      v17 = *(char *)(v14 + 39);
      if (v17 >= 0)
        v18 = v14 + 16;
      else
        v18 = *(_QWORD *)(v14 + 16);
      if (v17 >= 0)
        v19 = *(unsigned __int8 *)(v14 + 39);
      else
        v19 = *(_QWORD *)(v14 + 24);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__p, v18, v19);
      break;
    default:
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__p, (uint64_t)"resolvedKeyType=", 16);
      std::ostream::operator<<();
      break;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__p, (uint64_t)" ID=", 4);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__p, (uint64_t)" size=", 6);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__p, (uint64_t)" variant=", 9);
  v24 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v24, (uint64_t)",", 1);
  v25 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v25, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__p, (uint64_t)" dataPack=", 10);
  v26 = *(char *)(v14 + 239);
  if (v26 >= 0)
    v27 = v14 + 216;
  else
    v27 = *(_QWORD *)(v14 + 216);
  if (v26 >= 0)
    v28 = *(unsigned __int8 *)(v14 + 239);
  else
    v28 = *(_QWORD *)(v14 + 224);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__p, v27, v28);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__p, (uint64_t)" configPack=", 12);
  v29 = *(char *)(v14 + 263);
  if (v29 >= 0)
    v30 = v14 + 240;
  else
    v30 = *(_QWORD *)(v14 + 240);
  if (v29 >= 0)
    v31 = *(unsigned __int8 *)(v14 + 263);
  else
    v31 = *(_QWORD *)(v14 + 248);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__p, v30, v31);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__p, (uint64_t)" hasCustomImageProvider=", 24);
  std::ostream::operator<<();
  if ((v70 & 0x10) != 0)
  {
    v34 = *((_QWORD *)&v69 + 1);
    if (*((_QWORD *)&v69 + 1) < v67)
    {
      *((_QWORD *)&v69 + 1) = v67;
      v34 = v67;
    }
    v35 = (const void **)&v66;
  }
  else
  {
    if ((v70 & 8) == 0)
    {
      v32 = 0;
      HIBYTE(v52) = 0;
      p_dst = (void **)&__dst;
      goto LABEL_54;
    }
    v35 = (const void **)v65;
    v34 = v65[2];
  }
  v36 = *v35;
  v32 = v34 - (_QWORD)*v35;
  if (v32 > 0x7FFFFFFFFFFFFFF7)
    abort();
  if (v32 >= 0x17)
  {
    v37 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v32 | 7) != 0x17)
      v37 = v32 | 7;
    v38 = v37 + 1;
    p_dst = (void **)operator new(v37 + 1);
    v51 = v32;
    v52 = v38 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_53;
  }
  HIBYTE(v52) = v34 - *(_BYTE *)v35;
  p_dst = (void **)&__dst;
  if (v32)
LABEL_53:
    memmove(p_dst, v36, v32);
LABEL_54:
  *((_BYTE *)p_dst + v32) = 0;
  __p = *(void **)v6;
  *(void **)((char *)&__p + *((_QWORD *)__p - 3)) = *(void **)(v6 + 24);
  v63 = v10 + 16;
  if (SBYTE7(v69) < 0)
    operator delete((void *)v68);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1A1AF4D64](v71);
  if (v52 >= 0)
    v39 = (void **)&__dst;
  else
    v39 = __dst;
  if (v52 >= 0)
    v40 = HIBYTE(v52);
  else
    v40 = v51;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v53, (uint64_t)v39, v40);
  if (SHIBYTE(v52) < 0)
  {
    operator delete(__dst);
    v41 = v60;
    if ((v60 & 0x10) == 0)
      goto LABEL_64;
LABEL_68:
    v44 = *((_QWORD *)&v59 + 1);
    if (*((_QWORD *)&v59 + 1) < v57)
    {
      *((_QWORD *)&v59 + 1) = v57;
      v44 = v57;
    }
    v43 = (const void **)&v56;
    goto LABEL_71;
  }
LABEL_63:
  v41 = v60;
  if ((v60 & 0x10) != 0)
    goto LABEL_68;
LABEL_64:
  if ((v41 & 8) == 0)
  {
    v42 = 0;
    a2[23] = 0;
    goto LABEL_79;
  }
  v43 = (const void **)v55;
  v44 = v55[2];
LABEL_71:
  v45 = *v43;
  v42 = v44 - (_QWORD)*v43;
  if (v42 > 0x7FFFFFFFFFFFFFF7)
    abort();
  if (v42 >= 0x17)
  {
    v46 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v42 | 7) != 0x17)
      v46 = v42 | 7;
    v47 = v46 + 1;
    v48 = operator new(v46 + 1);
    *((_QWORD *)a2 + 1) = v42;
    *((_QWORD *)a2 + 2) = v47 | 0x8000000000000000;
    *(_QWORD *)a2 = v48;
    a2 = v48;
    goto LABEL_78;
  }
  a2[23] = v42;
  if (v42)
LABEL_78:
    memmove(a2, v45, v42);
LABEL_79:
  a2[v42] = 0;
  v53 = *(_QWORD **)v6;
  *(_QWORD **)((char *)&v53 + *(v53 - 3)) = *(_QWORD **)(v6 + 24);
  v54 = v10 + 16;
  if (SBYTE7(v59) < 0)
    operator delete(v58[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AF4D64](v61);
}

void sub_19FE4436C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  std::ostringstream::~ostringstream((uint64_t)&a50);
  std::ostringstream::~ostringstream((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void md::IconLabelPart::populateDebugNode(md::IconLabelPart *this, gdc::DebugTreeNode *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unsigned __int8 v10;
  double v11;
  unsigned __int8 v12;
  double v13;
  char v14[32];
  __int128 v15;
  double v16;
  int v17;
  void *__p[2];
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  void *v24[2];
  char v25;
  __int128 v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;

  md::ImageLabelPart::populateDebugNode(this, a2);
  HIBYTE(v27) = 13;
  strcpy((char *)&v26, "IconLabelPart");
  v4 = gdc::DebugTreeNode::createChildNode((uint64_t)a2, &v26);
  v5 = *((_QWORD *)this + 80);
  if (!v5)
    return;
  v6 = (uint64_t)v4;
  HIBYTE(v27) = 15;
  strcpy((char *)&v26, "Icon Image Size");
  grl::SizeGroupToString(*(unsigned __int8 *)(*(_QWORD *)(v5 + 32) + 168), __p);
  v15 = 0uLL;
  v16 = 0.0;
  v17 = 4;
  if (SHIBYTE(v19) < 0)
  {
    std::string::__assign_no_alias<true>(&v15, __p[0], (size_t)__p[1]);
  }
  else
  {
    v15 = *(_OWORD *)__p;
    v16 = v19;
  }
  gdc::DebugTreeNode::addProperty(v6, (uint64_t)&v26, (uint64_t)v14);
  if (SHIBYTE(v16) < 0)
  {
    operator delete((void *)v15);
    if ((SHIBYTE(v19) & 0x80000000) == 0)
      goto LABEL_7;
LABEL_19:
    operator delete(__p[0]);
    goto LABEL_7;
  }
  if (SHIBYTE(v19) < 0)
    goto LABEL_19;
LABEL_7:
  v7 = *((_QWORD *)this + 80);
  HIBYTE(v27) = 9;
  strcpy((char *)&v26, "LabelIcon");
  v8 = gdc::DebugTreeNode::createChildNode((uint64_t)a2, &v26);
  v9 = (uint64_t)v8;
  HIBYTE(v19) = 5;
  strcpy((char *)__p, "Width");
  v10 = atomic_load((unsigned __int8 *)(v7 + 144));
  if ((v10 & 1) != 0)
    v11 = (float)(*(float *)(v7 + 56) - *(float *)(v7 + 48));
  else
    v11 = -INFINITY;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31 = 2;
  v27 = v11;
  gdc::DebugTreeNode::addProperty((uint64_t)v8, (uint64_t)__p, (uint64_t)&v26);
  if (SHIBYTE(v19) < 0)
    operator delete(__p[0]);
  v25 = 6;
  strcpy((char *)v24, "Height");
  v12 = atomic_load((unsigned __int8 *)(v7 + 144));
  if ((v12 & 1) != 0)
    v13 = (float)(*(float *)(v7 + 60) - *(float *)(v7 + 52));
  else
    v13 = -INFINITY;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 2;
  v19 = v13;
  gdc::DebugTreeNode::addProperty(v9, (uint64_t)v24, (uint64_t)__p);
  if (v25 < 0)
    operator delete(v24[0]);
}

uint64_t md::IconLabelPart::setRenderPass(uint64_t result, char a2)
{
  *(_BYTE *)(result + 557) = a2;
  *(_BYTE *)(result + 656) = a2;
  return result;
}

_QWORD *md::IconLabelPart::populateMeshDescriptor(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v3;
  _QWORD v4[3];
  _QWORD *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v4[0] = &off_1E42CAB98;
  v4[1] = a1;
  v5 = v4;
  std::__function::__value_func<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::swap[abi:nn180100](v4, (_QWORD *)(a2 + 8));
  result = v5;
  if (v5 == v4)
  {
    v3 = 4;
    result = v4;
  }
  else
  {
    if (!v5)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<md::IconLabelPart::populateMeshDescriptor(md::IconMeshDescriptor &)::$_0,std::allocator<md::IconLabelPart::populateMeshDescriptor(md::IconMeshDescriptor &)::$_0>,void ()(md::LabelRenderDescriptor const&,md::IconMeshData &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::IconLabelPart::populateMeshDescriptor(md::IconMeshDescriptor &)::$_0,std::allocator<md::IconLabelPart::populateMeshDescriptor(md::IconMeshDescriptor &)::$_0>,void ()(md::LabelRenderDescriptor const&,md::IconMeshData &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CAB98;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::IconLabelPart::populateMeshDescriptor(md::IconMeshDescriptor &)::$_0,std::allocator<md::IconLabelPart::populateMeshDescriptor(md::IconMeshDescriptor &)::$_0>,void ()(md::LabelRenderDescriptor const&,md::IconMeshData &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CAB98;
  a2[1] = v2;
  return result;
}

float std::__function::__func<md::IconLabelPart::populateMeshDescriptor(md::IconMeshDescriptor &)::$_0,std::allocator<md::IconLabelPart::populateMeshDescriptor(md::IconMeshDescriptor &)::$_0>,void ()(md::LabelRenderDescriptor const&,md::IconMeshData &)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  float v5;
  uint64_t v6;
  float result;

  v4 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v4 + 565))
    *(_QWORD *)(a3 + 64) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v4 + 144))(*(_QWORD *)(a1 + 8));
  v5 = *(float *)(v4 + 608) * *(float *)(v4 + 596);
  *(_DWORD *)(a3 + 48) = *(_DWORD *)(v4 + 552);
  *(float *)(a3 + 52) = v5;
  *(_DWORD *)(a3 + 56) = *(_DWORD *)(v4 + 604);
  *(_DWORD *)a3 = *(_DWORD *)(v4 + 696);
  *(_DWORD *)(a3 + 4) = *(_DWORD *)(v4 + 700);
  *(_DWORD *)(a3 + 8) = *(_DWORD *)(v4 + 704);
  *(_DWORD *)(a3 + 12) = *(_DWORD *)(v4 + 708);
  *(_DWORD *)(a3 + 16) = *(_DWORD *)(v4 + 712);
  *(_DWORD *)(a3 + 20) = *(_DWORD *)(v4 + 716);
  *(_DWORD *)(a3 + 24) = *(_DWORD *)(v4 + 720);
  *(_DWORD *)(a3 + 28) = *(_DWORD *)(v4 + 724);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 928))(v4);
  *(_DWORD *)(a3 + 32) = *(_DWORD *)v6;
  *(_DWORD *)(a3 + 36) = *(_DWORD *)(v6 + 4);
  *(_DWORD *)(a3 + 40) = *(_DWORD *)(v6 + 8);
  result = *(float *)(v6 + 12);
  *(float *)(a3 + 44) = result;
  return result;
}

void md::AttributesLayerDataSource::~AttributesLayerDataSource(md::AttributesLayerDataSource *this)
{
  md::SingleGEOResourceLayerDataSource::~SingleGEOResourceLayerDataSource(this);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::AttributesTileData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DBB70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::AttributesTileData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DBB70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::AttributesTileData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void md::LabelFeatureMarker::~LabelFeatureMarker(md::LabelFeatureMarker *this)
{
  md::LabelFeatureMarker::~LabelFeatureMarker(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;

  *(_QWORD *)this = &off_1E42949C8;
  if (*((char *)this + 95) < 0)
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 12) + 40))(*((_QWORD *)this + 12), *((_QWORD *)this + 9), *((_QWORD *)this + 11) & 0x7FFFFFFFFFFFFFFFLL);
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 56);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    MEMORY[0x1A1AF4E00](v2, 0x1060C4018558911);
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (!v7)
    goto LABEL_16;
  v8 = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    v10 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
    if (!v10)
      return;
  }
  else
  {
LABEL_16:
    v10 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
    if (!v10)
      return;
  }
  std::__shared_weak_count::__release_weak(v10);
}

void md::LabelFeatureMarker::name(md::LabelFeatureMarker *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  unint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;

  if (a2)
  {
    *(_QWORD *)(a3 + 24) = *((_QWORD *)this + 12);
    if ((*((char *)this + 95) & 0x80000000) == 0)
    {
      *(_OWORD *)a3 = *(_OWORD *)((char *)this + 72);
      v5 = *((_QWORD *)this + 11);
LABEL_7:
      *(_QWORD *)(a3 + 16) = v5;
      return;
    }
    v7 = (void *)*((_QWORD *)this + 9);
    v8 = *((_QWORD *)this + 10);
LABEL_12:
    std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((_QWORD **)a3, v7, v8);
    return;
  }
  if ((*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 4) + 472))(*((_QWORD *)this + 4), 0))
  {
    v6 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 4) + 472))(*((_QWORD *)this + 4), 0);
    *(_QWORD *)(a3 + 24) = *(_QWORD *)(v6 + 24);
    if ((*(char *)(v6 + 23) & 0x80000000) == 0)
    {
      *(_OWORD *)a3 = *(_OWORD *)v6;
      v5 = *(_QWORD *)(v6 + 16);
      goto LABEL_7;
    }
    v7 = *(void **)v6;
    v8 = *(_QWORD *)(v6 + 8);
    goto LABEL_12;
  }
  if ((v9 & 1) == 0)
  {
    {
      v10 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v10, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
  }
  *(_QWORD *)(a3 + 24) = mdm::Allocator::instance(void)::alloc;
  *(_BYTE *)(a3 + 23) = 0;
  *(_BYTE *)a3 = 0;
}

uint64_t md::LabelFeatureMarker::featureId(md::LabelFeatureMarker *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 160))(*((_QWORD *)this + 4));
}

uint64_t md::FeatureMarker::venueId(md::FeatureMarker *this)
{
  return 0;
}

uint64_t md::LabelFeatureMarker::styleAttributes(md::LabelFeatureMarker *this)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 4) + 584))(*((_QWORD *)this + 4), 0);
}

uint64_t md::LabelFeatureMarker::minZoomRank(md::LabelFeatureMarker *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 240))(*((_QWORD *)this + 4));
}

uint64_t md::LabelFeatureMarker::maxZoomRank(md::LabelFeatureMarker *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 248))(*((_QWORD *)this + 4));
}

void md::LabelFeatureMarker::debugString(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  int v3;
  uint64_t v4;
  geo::read_write_lock *v5;
  const char *v6;
  malloc_zone_t *zone;
  uint64_t v8;

  if ((v2 & 1) == 0)
  {
    v8 = a1;
    a1 = v8;
    if (v3)
    {
      v4 = operator new();
      *(_QWORD *)(v4 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v4 + 24) = "VectorKitLabels";
      *(_OWORD *)(v4 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v4 = &off_1E42B5668;
      *(_QWORD *)(v4 + 8) = "VectorKitLabels";
      *(_OWORD *)(v4 + 72) = 0u;
      *(_OWORD *)(v4 + 88) = 0u;
      *(_OWORD *)(v4 + 104) = 0u;
      *(_OWORD *)(v4 + 120) = 0u;
      *(_OWORD *)(v4 + 136) = 0u;
      *(_OWORD *)(v4 + 152) = 0u;
      *(_OWORD *)(v4 + 168) = 0u;
      *(_OWORD *)(v4 + 184) = 0u;
      *(_OWORD *)(v4 + 200) = 0u;
      *(_OWORD *)(v4 + 216) = 0u;
      *(_OWORD *)(v4 + 232) = 0u;
      *(_QWORD *)(v4 + 248) = 0;
      *(_OWORD *)(v4 + 56) = 0u;
      v5 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v4 + 56), 0);
      if ((_DWORD)v5)
        geo::read_write_lock::logFailure(v5, (uint64_t)"initialization", v6);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v4 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v4 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v4;
      a1 = v8;
    }
  }
  *(_QWORD *)(a1 + 24) = mdm::Allocator::instance(void)::alloc;
  *(_BYTE *)(a1 + 23) = 18;
  strcpy((char *)a1, "LabelFeatureMarker");
}

void ggl::FlyoverRoadFillProcedural::DefaultPipelineState::~DefaultPipelineState(ggl::FlyoverRoadFillProcedural::DefaultPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::FlyoverRoadFillProcedural::DefaultPipelineSetup::~DefaultPipelineSetup(ggl::FlyoverRoadFillProcedural::DefaultPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::FlyoverRoadFillProcedural::DefaultPipelineSetup::constantDataIsEnabled(ggl::FlyoverRoadFillProcedural::DefaultPipelineSetup *this, unint64_t a2)
{
  return a2 < 4;
}

uint64_t ggl::FlyoverRoadFillProcedural::DefaultPipelineSetup::textureIsEnabled(ggl::FlyoverRoadFillProcedural::DefaultPipelineSetup *this)
{
  return 0;
}

_QWORD *ggl::FlyoverRoadFillProcedural::DefaultPipelineSetup::DefaultPipelineSetup(_QWORD *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;

  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(a1, a2, (uint64_t)a3);
    v15 = (unint64_t *)&a3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(a1, a2, 0);
  }
  *a1 = &off_1E42BB330;
  v17 = (uint64_t *)a1[8];
  v18 = *a4;
  v19 = a4[1];
  *v17 = *a4;
  v17[1] = 0;
  v20 = (_QWORD *)a1[20];
  if (v19)
  {
    v21 = (unint64_t *)(v19 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = (std::__shared_weak_count *)v20[1];
  *v20 = v18;
  v20[1] = v19;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = a1[8];
  v27 = *a5;
  v28 = a5[1];
  *(_QWORD *)(v26 + 16) = *a5;
  *(_QWORD *)(v26 + 24) = 0;
  v29 = a1[20];
  if (v28)
  {
    v30 = (unint64_t *)(v28 + 8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v32 = *(std::__shared_weak_count **)(v29 + 24);
  *(_QWORD *)(v29 + 16) = v27;
  *(_QWORD *)(v29 + 24) = v28;
  if (v32)
  {
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = a1[8];
  v36 = *a6;
  v37 = a6[1];
  *(_QWORD *)(v35 + 32) = *a6;
  *(_QWORD *)(v35 + 40) = 0;
  v38 = a1[20];
  if (v37)
  {
    v39 = (unint64_t *)(v37 + 8);
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
  }
  v41 = *(std::__shared_weak_count **)(v38 + 40);
  *(_QWORD *)(v38 + 32) = v36;
  *(_QWORD *)(v38 + 40) = v37;
  if (v41)
  {
    v42 = (unint64_t *)&v41->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = a1[8];
  v45 = *a7;
  v46 = a7[1];
  *(_QWORD *)(v44 + 48) = *a7;
  *(_QWORD *)(v44 + 56) = 0;
  v47 = a1[20];
  if (v46)
  {
    v48 = (unint64_t *)(v46 + 8);
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 1, v48));
  }
  v50 = *(std::__shared_weak_count **)(v47 + 56);
  *(_QWORD *)(v47 + 48) = v45;
  *(_QWORD *)(v47 + 56) = v46;
  if (v50)
  {
    v51 = (unint64_t *)&v50->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  return a1;
}

uint64_t md::ClearRenderLayer::layoutWithoutStyles(md::ClearRenderLayer *this, const md::LayoutContext *a2)
{
  return (*(uint64_t (**)(md::ClearRenderLayer *, const md::LayoutContext *))(*(_QWORD *)this + 16))(this, a2);
}

void std::__function::__func<md::ClearRenderLayer::constSelector(md::CommandBufferLocation const&)::{lambda(md::LayoutContext const&)#1},std::allocator<md::ClearRenderLayer::constSelector(md::CommandBufferLocation const&)::{lambda(md::LayoutContext const&)#1}>,std::vector<md::CommandBufferLocation> ()(md::LayoutContext const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_WORD *std::__function::__func<md::ClearRenderLayer::constSelector(md::CommandBufferLocation const&)::{lambda(md::LayoutContext const&)#1},std::allocator<md::ClearRenderLayer::constSelector(md::CommandBufferLocation const&)::{lambda(md::LayoutContext const&)#1}>,std::vector<md::CommandBufferLocation> ()(md::LayoutContext const&)>::__clone(uint64_t a1)
{
  _WORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E42CD2B0;
  result[4] = *(_WORD *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<md::ClearRenderLayer::constSelector(md::CommandBufferLocation const&)::{lambda(md::LayoutContext const&)#1},std::allocator<md::ClearRenderLayer::constSelector(md::CommandBufferLocation const&)::{lambda(md::LayoutContext const&)#1}>,std::vector<md::CommandBufferLocation> ()(md::LayoutContext const&)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E42CD2B0;
  *(_WORD *)(a2 + 8) = *(_WORD *)(result + 8);
  return result;
}

uint64_t md::ClearRenderLayer::ClearRenderLayer(uint64_t a1, uint64_t a2, char a3, int a4, _WORD *a5)
{
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 34) = a3;
  *(_QWORD *)(a1 + 40) = a2;
  *(_QWORD *)a1 = &off_1E4291810;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = operator new();
  *(_BYTE *)v8 = 0;
  *(_QWORD *)(v8 + 12) = 0;
  *(_QWORD *)(v8 + 4) = 0;
  *(_BYTE *)(v8 + 20) = 0;
  *(_DWORD *)(v8 + 24) = 1065353216;
  *(_BYTE *)(v8 + 28) = 0;
  *(_DWORD *)(v8 + 32) = 0;
  *(_QWORD *)(a1 + 80) = &off_1E42CD2B0;
  *(_QWORD *)(a1 + 48) = v8;
  *(_BYTE *)(a1 + 56) = 0;
  *(_WORD *)(a1 + 88) = *a5;
  *(_QWORD *)(a1 + 104) = a1 + 80;
  *(_BYTE *)(a1 + 112) = a4;
  if (a4)
  {
    *(_BYTE *)v8 = 0;
    *(_BYTE *)(v8 + 20) = 1;
  }
  else
  {
    *(_BYTE *)v8 = -1;
    if ((v9 & 1) == 0
    {
      md::GridLogic::_defaultDrivingBackgroundColor(void)::_defaultDrivingBackgroundLinearColor = xmmword_19FFB5E70;
    }
    v10 = *(_QWORD *)(a1 + 48);
    *(_OWORD *)(v10 + 4) = md::GridLogic::_defaultDrivingBackgroundColor(void)::_defaultDrivingBackgroundLinearColor;
    *(_BYTE *)(v10 + 28) = -1;
    *(_DWORD *)(v10 + 32) = 128;
    *(_BYTE *)(v10 + 20) = 1;
    *(_DWORD *)(v10 + 24) = 1065353216;
  }
  return a1;
}

void sub_19FE4533C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void *v3;

  *v1 = off_1E428C468;
  v3 = (void *)v1[1];
  if (v3)
  {
    v1[2] = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void md::ARWalkingRouteLockedMapEngineMode::~ARWalkingRouteLockedMapEngineMode(md::ARWalkingRouteLockedMapEngineMode *this)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;

  *(_QWORD *)this = &off_1E42A93B8;
  v2 = *((_QWORD *)this + 77);
  *((_QWORD *)this + 77) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(_QWORD *)this = off_1E429C660;
  *((_QWORD *)this + 73) = &off_1E42B54D0;

  v3 = *((_QWORD *)this + 72);
  *((_QWORD *)this + 72) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 70);
  if (!v4)
    goto LABEL_9;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    v7 = (std::__shared_weak_count *)*((_QWORD *)this + 68);
    if (!v7)
      goto LABEL_15;
  }
  else
  {
LABEL_9:
    v7 = (std::__shared_weak_count *)*((_QWORD *)this + 68);
    if (!v7)
      goto LABEL_15;
  }
  v8 = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_15:
  md::MapEngineMode::~MapEngineMode(this);
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;

  *(_QWORD *)this = &off_1E42A93B8;
  v2 = *((_QWORD *)this + 77);
  *((_QWORD *)this + 77) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(_QWORD *)this = off_1E429C660;
  *((_QWORD *)this + 73) = &off_1E42B54D0;

  v3 = *((_QWORD *)this + 72);
  *((_QWORD *)this + 72) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 70);
  if (!v4)
    goto LABEL_9;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    v7 = (std::__shared_weak_count *)*((_QWORD *)this + 68);
    if (!v7)
      goto LABEL_15;
  }
  else
  {
LABEL_9:
    v7 = (std::__shared_weak_count *)*((_QWORD *)this + 68);
    if (!v7)
      goto LABEL_15;
  }
  v8 = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_15:
  md::MapEngineMode::~MapEngineMode(this);
  JUMPOUT(0x1A1AF4E00);
}

void md::ARWalkingRouteLockedMapEngineMode::didBecomeActive(uint64_t a1, md::MapEngine *a2)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;

  md::ARWalkingMapEngineMode::didBecomeActive(a1, a2);
  v4 = *((_QWORD *)a2 + 140);
  v5 = *(_QWORD *)(v4 + 16);
  if ((v5 & (v5 - 1)) != 0)
  {
    v7 = 0xEACB5D682A22B993;
    if (v5 <= 0xEACB5D682A22B993)
      v7 = 0xEACB5D682A22B993 % v5;
    v6 = *(_QWORD **)(*(_QWORD *)(v4 + 8) + 8 * v7);
    do
    {
      do
        v6 = (_QWORD *)*v6;
      while (v6[1] != 0xEACB5D682A22B993);
    }
    while (v6[2] != 0xEACB5D682A22B993);
  }
  else
  {
    v6 = *(_QWORD **)(*(_QWORD *)(v4 + 8) + 8 * ((v5 - 1) & 0xEACB5D682A22B993));
    do
    {
      do
        v6 = (_QWORD *)*v6;
      while (v6[1] != 0xEACB5D682A22B993);
    }
    while (v6[2] != 0xEACB5D682A22B993);
  }
  *(_QWORD *)(v6[5] + 128) = *(_QWORD *)(a1 + 576);
}

void md::ARWalkingRouteLockedMapEngineMode::willBecomeInactive(int a1, md::MapEngine *a2)
{
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;

  md::ARWalkingMapEngineMode::willBecomeInactive(a1, a2);
  v3 = *((_QWORD *)a2 + 140);
  v4 = *(_QWORD *)(v3 + 16);
  if ((v4 & (v4 - 1)) != 0)
  {
    v6 = 0xEACB5D682A22B993;
    if (v4 <= 0xEACB5D682A22B993)
      v6 = 0xEACB5D682A22B993 % v4;
    v5 = *(_QWORD **)(*(_QWORD *)(v3 + 8) + 8 * v6);
    do
    {
      do
        v5 = (_QWORD *)*v5;
      while (v5[1] != 0xEACB5D682A22B993);
    }
    while (v5[2] != 0xEACB5D682A22B993);
  }
  else
  {
    v5 = *(_QWORD **)(*(_QWORD *)(v3 + 8) + 8 * ((v4 - 1) & 0xEACB5D682A22B993));
    do
    {
      do
        v5 = (_QWORD *)*v5;
      while (v5[1] != 0xEACB5D682A22B993);
    }
    while (v5[2] != 0xEACB5D682A22B993);
  }
  *(_QWORD *)(v5[5] + 128) = 0;
}

uint64_t md::ARWalkingRouteLockedMapEngineMode::buildLocationProvider@<X0>(md::MapEngine *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[5];

  v7[4] = *MEMORY[0x1E0C80C00];
  v5 = operator new();
  v7[0] = &off_1E42D3BE0;
  v7[1] = a1;
  v7[3] = v7;
  *(_BYTE *)(v5 + 8) = 0;
  *(_BYTE *)(v5 + 16) = 0;
  *(_QWORD *)v5 = &off_1E42A6328;
  *(_QWORD *)(v5 + 24) = 0;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 48) = &off_1E42B4C30;
  *(_QWORD *)(v5 + 56) = 0;
  *(_QWORD *)(v5 + 72) = 0;
  *(_QWORD *)(v5 + 80) = 0;
  *(_QWORD *)(v5 + 112) = v5 + 88;
  result = std::__function::__func<md::ARWalkingRouteLockedMapEngineMode::buildLocationProvider(md::MapEngine &)::$_0,std::allocator<md::ARWalkingRouteLockedMapEngineMode::buildLocationProvider(md::MapEngine &)::$_0>,void ()(geo::PolylineCoordinate)>::__clone((uint64_t)v7, (_QWORD *)(v5 + 88));
  *a2 = v5;
  return result;
}

uint64_t md::ARWalkingRouteLockedMapEngineMode::buildScene(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;

  if (a2 == 1)
  {
    v3 = operator new();
    *(_OWORD *)(v3 + 16) = 0u;
    *(_OWORD *)(v3 + 32) = 0u;
    *(_OWORD *)(v3 + 48) = 0u;
    *(_QWORD *)v3 = &off_1E4292378;
    *(_QWORD *)(v3 + 8) = &off_1E42B5370;
    *(_QWORD *)(v3 + 32) = &off_1E42B4C30;
    v4 = *(_QWORD *)(a1 + 616);
    *(_QWORD *)(a1 + 616) = v3;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  return *(_QWORD *)(a1 + 616);
}

id md::ARWalkingRouteLockedMapEngineMode::getSession(md::ARWalkingRouteLockedMapEngineMode *this)
{
  return +[MDARSession newPositionalTrackingSession](MDARSession, "newPositionalTrackingSession");
}

void std::__function::__func<md::ARWalkingRouteLockedMapEngineMode::buildLocationProvider(md::MapEngine &)::$_0,std::allocator<md::ARWalkingRouteLockedMapEngineMode::buildLocationProvider(md::MapEngine &)::$_0>,void ()(geo::PolylineCoordinate)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::ARWalkingRouteLockedMapEngineMode::buildLocationProvider(md::MapEngine &)::$_0,std::allocator<md::ARWalkingRouteLockedMapEngineMode::buildLocationProvider(md::MapEngine &)::$_0>,void ()(geo::PolylineCoordinate)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D3BE0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::ARWalkingRouteLockedMapEngineMode::buildLocationProvider(md::MapEngine &)::$_0,std::allocator<md::ARWalkingRouteLockedMapEngineMode::buildLocationProvider(md::MapEngine &)::$_0>,void ()(geo::PolylineCoordinate)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D3BE0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::ARWalkingRouteLockedMapEngineMode::buildLocationProvider(md::MapEngine &)::$_0,std::allocator<md::ARWalkingRouteLockedMapEngineMode::buildLocationProvider(md::MapEngine &)::$_0>,void ()(geo::PolylineCoordinate)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  id WeakRetained;

  v2 = *a2;
  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 8) + 848));
  objc_msgSend(WeakRetained, "injectDebugARUserRouteCoordinate:", v2);

}

void sub_19FE45908(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ggl::FlyoverBorderRibbon::DefaultPipelineState::~DefaultPipelineState(ggl::FlyoverBorderRibbon::DefaultPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::FlyoverBorderRibbon::DefaultPipelineSetup::~DefaultPipelineSetup(ggl::FlyoverBorderRibbon::DefaultPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::FlyoverBorderRibbon::DefaultPipelineSetup::constantDataIsEnabled(ggl::FlyoverBorderRibbon::DefaultPipelineSetup *this, unint64_t a2)
{
  return a2 < 5;
}

BOOL ggl::FlyoverBorderRibbon::DefaultPipelineSetup::textureIsEnabled(ggl::FlyoverBorderRibbon::DefaultPipelineSetup *this, unint64_t a2)
{
  return a2 < 2;
}

uint64_t ggl::FlyoverBorderRibbon::DefaultPipelineSetup::DefaultPipelineSetup(uint64_t a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t a9, uint64_t a10)
{
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;

  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup((_QWORD *)a1, a2, (uint64_t)a3);
    v19 = (unint64_t *)&a3->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup((_QWORD *)a1, a2, 0);
  }
  *(_QWORD *)a1 = &off_1E42BA888;
  v21 = *(uint64_t **)(a1 + 64);
  v22 = *a4;
  v23 = a4[1];
  *v21 = *a4;
  v21[1] = 0;
  v24 = *(_QWORD **)(a1 + 160);
  if (v23)
  {
    v25 = (unint64_t *)(v23 + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  v27 = (std::__shared_weak_count *)v24[1];
  *v24 = v22;
  v24[1] = v23;
  if (v27)
  {
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = *(_QWORD *)(a1 + 64);
  v31 = *a5;
  v32 = a5[1];
  *(_QWORD *)(v30 + 16) = *a5;
  *(_QWORD *)(v30 + 24) = 0;
  v33 = *(_QWORD *)(a1 + 160);
  if (v32)
  {
    v34 = (unint64_t *)(v32 + 8);
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
  }
  v36 = *(std::__shared_weak_count **)(v33 + 24);
  *(_QWORD *)(v33 + 16) = v31;
  *(_QWORD *)(v33 + 24) = v32;
  if (v36)
  {
    v37 = (unint64_t *)&v36->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v39 = *(_QWORD *)(a1 + 64);
  v40 = *a6;
  v41 = a6[1];
  *(_QWORD *)(v39 + 32) = *a6;
  *(_QWORD *)(v39 + 40) = 0;
  v42 = *(_QWORD *)(a1 + 160);
  if (v41)
  {
    v43 = (unint64_t *)(v41 + 8);
    do
      v44 = __ldxr(v43);
    while (__stxr(v44 + 1, v43));
  }
  v45 = *(std::__shared_weak_count **)(v42 + 40);
  *(_QWORD *)(v42 + 32) = v40;
  *(_QWORD *)(v42 + 40) = v41;
  if (v45)
  {
    v46 = (unint64_t *)&v45->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  v48 = *(_QWORD *)(a1 + 64);
  v49 = *a7;
  v50 = a7[1];
  *(_QWORD *)(v48 + 48) = *a7;
  *(_QWORD *)(v48 + 56) = 0;
  v51 = *(_QWORD *)(a1 + 160);
  if (v50)
  {
    v52 = (unint64_t *)(v50 + 8);
    do
      v53 = __ldxr(v52);
    while (__stxr(v53 + 1, v52));
  }
  v54 = *(std::__shared_weak_count **)(v51 + 56);
  *(_QWORD *)(v51 + 48) = v49;
  *(_QWORD *)(v51 + 56) = v50;
  if (v54)
  {
    v55 = (unint64_t *)&v54->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  v57 = *(_QWORD *)(a1 + 64);
  v58 = *a8;
  v59 = a8[1];
  *(_QWORD *)(v57 + 64) = *a8;
  *(_QWORD *)(v57 + 72) = 0;
  v60 = *(_QWORD *)(a1 + 160);
  if (v59)
  {
    v61 = (unint64_t *)(v59 + 8);
    do
      v62 = __ldxr(v61);
    while (__stxr(v62 + 1, v61));
  }
  v63 = *(std::__shared_weak_count **)(v60 + 72);
  *(_QWORD *)(v60 + 64) = v58;
  *(_QWORD *)(v60 + 72) = v59;
  if (v63)
  {
    v64 = (unint64_t *)&v63->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  **(_QWORD **)(a1 + 96) = a9;
  *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) = a10;
  return a1;
}

uint64_t md::LabelPart::collidesWithDisplayObject(md::LabelPart *this, const md::CollisionObject *a2)
{
  const md::CollisionObject *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  BOOL v7;
  float32x2_t *v8;
  float v9;
  uint64_t v10;
  float32x2_t *v11;
  float v12;
  float32x2_t v13;
  md::CollisionObject *v14;

  if (!*((_QWORD *)this + 59) && !*((_QWORD *)this + 60) || (*((_BYTE *)a2 + 200) & *((_BYTE *)this + 512)) != 0)
    return 0;
  v3 = (md::LabelPart *)((char *)this + 312);
  v4 = *((_QWORD *)a2 + 21);
  if (!*((_QWORD *)this + 60))
  {
    if (!v4)
    {
      if (*((_BYTE *)this + 508) || *((_BYTE *)a2 + 196))
        return md::CollisionObject::rectsCollideWithRectsOBB((md::LabelPart *)((char *)this + 312), a2);
      else
        return md::CollisionObject::rectsCollideWithRects((md::LabelPart *)((char *)this + 312), a2);
    }
    v14 = a2;
    a2 = v3;
    return md::CollisionObject::circlesCollideWithRects(v14, a2);
  }
  if (!v4)
  {
    v14 = (md::LabelPart *)((char *)this + 312);
    return md::CollisionObject::circlesCollideWithRects(v14, a2);
  }
  v5 = *((unsigned int *)a2 + 44);
  if (!(_DWORD)v5)
    return 0;
  v6 = 0;
  v7 = 1;
  while (1)
  {
    v8 = (float32x2_t *)(*((_QWORD *)a2 + 23) + 24 * v6);
    v9 = v8[*((unsigned __int8 *)this + 511) + 1].f32[0];
    if (v9 > 0.0)
    {
      v10 = *((unsigned int *)this + 122);
      if ((_DWORD)v10)
        break;
    }
LABEL_9:
    v7 = ++v6 < v5;
    if (v6 == v5)
      return 0;
  }
  v11 = (float32x2_t *)*((_QWORD *)this + 62);
  while (1)
  {
    v12 = v11[*((unsigned __int8 *)a2 + 199) + 1].f32[0];
    if (v12 > 0.0)
    {
      v13 = vsub_f32(*v11, *v8);
      if (vaddv_f32(vmul_f32(v13, v13)) < (float)((float)(v12 + v9) * (float)(v12 + v9)))
        return v7;
    }
    v11 += 3;
    if (!--v10)
      goto LABEL_9;
  }
}

uint64_t md::LabelPart::intersectsStagingFrustum(float32x2_t *a1, uint64_t a2)
{
  if (a1[70].i8[5] && a1[70].i8[6])
    return md::CollisionObject::intersectsWorldFrustum(a1 + 39, a2);
  else
    return 0;
}

uint64_t md::LabelPart::intersectsDisplayFrustum(float32x2_t *a1, uint64_t a2)
{
  if (a1[70].i8[5])
    return md::CollisionObject::intersectsWorldFrustum(a1 + 39, a2);
  else
    return 0;
}

uint64_t md::LabelPart::hitPartAtPixel(uint64_t a1, float *a2, int a3, double a4, float a5, float a6)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  float v9;
  float *v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v32;
  float v33;
  float v34;
  uint64_t v35;
  char v36;
  float *v37;
  float32x2_t v38;
  float32x2_t v39;
  float32x2_t v40;

  if (*(float *)(a1 + 552) <= 0.0039062)
    return 0;
  v6 = a1;
  if (*(_QWORD *)(a1 + 472))
  {
    v7 = *(unsigned int *)(a1 + 488);
    if (!(_DWORD)v7)
      return 0;
    v8 = 0;
    v9 = -a6;
    v10 = (float *)(*(_QWORD *)(a1 + 496) + 8);
    v11 = 3.4028e38;
    do
    {
      v12 = *v10;
      v13 = v10[1];
      v14 = *v10 + a6;
      v15 = v9 - v13;
      if (v13 >= 0.0)
      {
        v16 = v9 - *v10;
      }
      else
      {
        v15 = -v13;
        v16 = -*v10;
      }
      if (v13 >= 0.0)
      {
        v17 = v13 + a6;
      }
      else
      {
        v14 = *v10;
        v17 = v10[1];
      }
      if (v12 >= 0.0)
        v18 = v15;
      else
        v18 = -v13;
      if (v12 >= 0.0)
        v19 = v16;
      else
        v19 = -*v10;
      if (v12 >= 0.0)
        v20 = v14;
      else
        v20 = *v10;
      if (v12 >= 0.0)
        v21 = v17;
      else
        v21 = v10[1];
      v22 = *(float *)&a4 - *(v10 - 2);
      v23 = a5 - *(v10 - 1);
      if (*(_BYTE *)(a1 + 508))
      {
        v24 = *(float *)(a1 + 328);
        v25 = *(float *)(a1 + 332);
        v26 = v24 * v22;
        v27 = v25 * v22;
        v28 = v26 + (float)(v25 * v23);
        v23 = -(float)(v27 - (float)(v24 * v23));
        v22 = v28;
      }
      if (v22 >= v19 && v22 < v20 && v23 >= v18 && v23 < v21)
      {
        v32 = fabsf(v23);
        if (v22 > v12)
          v32 = (float)((float)(v22 - v12) * (float)(v22 - v12)) + (float)(v23 * v23);
        v33 = (float)((float)(v22 + v12) * (float)(v22 + v12)) + (float)(v23 * v23);
        if (v22 < (float)-*v10)
          v34 = v33;
        else
          v34 = v32;
        v11 = fminf(v11, v34);
        v8 = 1;
      }
      v10 += 6;
      --v7;
    }
    while (v7);
    if ((v8 & 1) == 0)
      return 0;
  }
  else
  {
    if (!*(_QWORD *)(a1 + 480))
      return 0;
    v35 = *(unsigned int *)(a1 + 488);
    if (!(_DWORD)v35)
      return 0;
    v36 = 0;
    *((float *)&a4 + 1) = a5;
    v37 = (float *)(*(_QWORD *)(a1 + 496) + 8);
    v11 = 3.4028e38;
    do
    {
      v38 = *(float32x2_t *)(v37 - 2);
      v39 = vsub_f32(v38, *(float32x2_t *)&a4);
      if (vaddv_f32(vmul_f32(v39, v39)) < (float)((float)(*v37 + a6) * (float)(*v37 + a6)))
      {
        v40 = vsub_f32(*(float32x2_t *)&a4, v38);
        v11 = fminf(v11, vaddv_f32(vmul_f32(v40, v40)));
        v36 = 1;
      }
      v37 += 6;
      --v35;
    }
    while (v35);
    if ((v36 & 1) == 0)
      return 0;
  }
  *a2 = sqrtf(v11);
  if (a3)
  {
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 648))(a1) & 1) == 0)
      return 0;
  }
  return v6;
}

void md::LabelPart::debugDraw(md::LabelPart *this, md::DebugConsole *a2)
{
  uint64_t v4;
  unint64_t v5;
  float *v6;
  uint64_t v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  float v21;
  float v22;
  uint64_t v23;
  float v24;
  float v25;
  uint64_t v26;

  if (*((_QWORD *)this + 29))
  {
    *((_DWORD *)a2 + 26) = 1056964608;
    if (*((_DWORD *)this + 62))
    {
      v4 = 0;
      v5 = 0;
      do
      {
        v6 = (float *)(*((_QWORD *)this + 32) + v4);
        v7 = *((_QWORD *)v6 + 1);
        v23 = v7;
        v8 = *(float *)&v7;
        v9 = v6[2];
        v10 = v6[3];
        v11 = -v9;
        v12 = -v10;
        v13 = *((float *)&v7 + 1);
        if (*(float *)&v7 >= (float)-v9 && *((float *)&v7 + 1) >= v12)
        {
          v15 = v6[1];
          v11 = *v6 - v9;
          v12 = v15 - v10;
          v8 = *v6 + *(float *)&v7;
          v13 = v15 + *((float *)&v7 + 1);
          *(float *)&v23 = v8;
          *((float *)&v23 + 1) = v15 + *((float *)&v7 + 1);
        }
        if ((float)(v8 - v11) > 0.0 && (float)(v13 - v12) > 0.0)
        {
          *((_DWORD *)a2 + 24) = -16776961;
          *((float *)a2 + 2) = v11;
          *((float *)a2 + 3) = v12;
          v26 = *((_QWORD *)a2 + 1);
          v16 = v26;
          *((float *)a2 + 2) = v8;
          *((float *)a2 + 3) = v13;
          v24 = *(float *)&v16;
          v25 = v13;
          ggl::DebugConsole::drawLine((uint64_t)a2, &v24);
          ggl::DebugConsole::drawLine((uint64_t)a2, (float *)&v26);
          v24 = v8;
          v25 = *((float *)&v16 + 1);
          ggl::DebugConsole::drawLine((uint64_t)a2, &v24);
          ggl::DebugConsole::drawLine((uint64_t)a2, (float *)&v23);
          *((_DWORD *)a2 + 24) = -12549889;
          *((float *)a2 + 2) = v11;
          *((float *)a2 + 3) = v12;
          v26 = *((_QWORD *)a2 + 1);
          v17 = v26;
          *((float *)a2 + 2) = v8;
          *((float *)a2 + 3) = v13;
          v24 = *(float *)&v17;
          v25 = v13;
          ggl::DebugConsole::drawLine((uint64_t)a2, &v24);
          ggl::DebugConsole::drawLine((uint64_t)a2, (float *)&v26);
          v24 = v8;
          v25 = *((float *)&v17 + 1);
          ggl::DebugConsole::drawLine((uint64_t)a2, &v24);
          ggl::DebugConsole::drawLine((uint64_t)a2, (float *)&v23);
        }
        ++v5;
        v4 += 24;
      }
      while (v5 < *((unsigned int *)this + 62));
    }
  }
  else if (*((_QWORD *)this + 30))
  {
    *((_DWORD *)a2 + 26) = 1065353216;
    if (*((_DWORD *)this + 62))
    {
      v18 = 0;
      v19 = 0;
      do
      {
        v20 = *((_QWORD *)this + 32);
        v21 = *(float *)(v20 + v18 + 8);
        if (v21 > 0.0)
        {
          *((_DWORD *)a2 + 24) = -16776961;
          *((_QWORD *)a2 + 1) = *(_QWORD *)(v20 + v18);
          ggl::DebugConsole::drawCircle(a2, v21);
        }
        v22 = v21 - *((float *)this + 42);
        if (v22 > 0.0)
        {
          *((_DWORD *)a2 + 24) = -12549889;
          *((_QWORD *)a2 + 1) = *(_QWORD *)(v20 + v18);
          ggl::DebugConsole::drawCircle(a2, v22);
        }
        ++v19;
        v18 += 24;
      }
      while (v19 < *((unsigned int *)this + 62));
    }
  }
}

void md::LabelPart::debugDrawWorldForStaging(md::LabelPart *this, float64x2_t **a2, float32x2_t *a3)
{
  md::CollisionObject::worldDrawDebugHighlightWithContext((md::LabelPart *)((char *)this + 72), a2[54], a3);
}

void md::LabelPart::debugDrawWorldForWorld(md::LabelPart *this, md::LabelManager *a2, float32x2_t *a3)
{
  md::CollisionObject::worldDrawDebugHighlightWithContext((md::LabelPart *)((char *)this + 312), (float64x2_t *)((char *)a2 + 440), a3);
}

uint64_t md::LabelPart::populatePointOcclusionQuery(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  _QWORD *v10;
  _QWORD *v11;
  __int128 *v12;
  __int128 *v13;
  _QWORD *v14;
  __int128 v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t *v19;
  char *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 *v25;
  _OWORD *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v2 = *a2;
  v3 = *(_QWORD **)(a1 + 16);
  *(_BYTE *)v2 = 2;
  v4 = *(_QWORD **)(v2 + 80);
  v5 = *(_QWORD **)(v2 + 88);
  if (0xAAAAAAAAAAAAAAABLL * (v5 - v4) > 1)
  {
LABEL_2:
    *(_QWORD *)(v2 + 88) = v4 + 3;
    goto LABEL_4;
  }
  if (v5 == v4)
  {
    v4 = *(_QWORD **)(v2 + 88);
    if (!*(_QWORD *)(v2 + 104))
    {
      v10 = *(_QWORD **)(v2 + 96);
      v11 = malloc_type_malloc(0x30uLL, 0x1000040504FFAC1uLL);
      v4 = v11;
      v12 = *(__int128 **)(v2 + 80);
      v13 = *(__int128 **)(v2 + 88);
      if (v12 != v13)
      {
        v14 = v11;
        do
        {
          v15 = *v12;
          v14[2] = *((_QWORD *)v12 + 2);
          *(_OWORD *)v14 = v15;
          v14 += 3;
          v12 = (__int128 *)((char *)v12 + 24);
        }
        while (v12 != v13);
      }
      if (v5 != v10)
        free(*(void **)(v2 + 80));
      *(_QWORD *)(v2 + 80) = v4;
      *(_QWORD *)(v2 + 104) = 2;
    }
    goto LABEL_2;
  }
LABEL_4:
  *v4 = v3[74];
  v4[1] = v3[75];
  v4[2] = v3[76];
  v6 = *(char **)(v2 + 8);
  v7 = *(char **)(v2 + 16);
  v8 = v7 - v6;
  if ((unint64_t)(v7 - v6) < 9)
  {
    if (v7 != v6)
      return 1;
    v16 = *(char **)(v2 + 16);
    if (*(_QWORD *)(v2 + 32))
      goto LABEL_29;
    v17 = *(char **)(v2 + 24);
    v18 = (char *)malloc_type_malloc(0x10uLL, 0x100004090D0E795uLL);
    v16 = v18;
    v19 = *(uint64_t **)(v2 + 8);
    v20 = *(char **)(v2 + 16);
    if (v19 != (uint64_t *)v20)
    {
      v21 = v20 - (char *)v19 - 8;
      if (v21 < 0x18)
      {
        v22 = v18;
      }
      else
      {
        v22 = v18;
        if ((unint64_t)(v18 - (char *)v19) >= 0x20)
        {
          v23 = (v21 >> 3) + 1;
          v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
          v22 = &v18[v24];
          v25 = (__int128 *)(v19 + 2);
          v26 = v18 + 16;
          v27 = v23 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v28 = *v25;
            v25 += 2;
            *v26 = v28;
            v26 += 2;
            v27 -= 4;
          }
          while (v27);
          if (v23 == (v23 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_26;
          v19 = (uint64_t *)((char *)v19 + v24);
        }
      }
      do
      {
        v29 = *v19++;
        *(_QWORD *)v22 = v29;
        v22 += 8;
      }
      while (v19 != (uint64_t *)v20);
    }
LABEL_26:
    v30 = v8 >> 3;
    if (v7 != v17)
      free(*(void **)(v2 + 8));
    *(_QWORD *)(v2 + 8) = v16;
    v7 = &v16[8 * v30];
    *(_QWORD *)(v2 + 32) = 2;
LABEL_29:
    if (v7 != v16 + 8)
    {
      memset_pattern16(v7, &unk_19FFB6350, ((v16 - v7) & 0xFFFFFFFFFFFFFFF8) + 8);
      v7 = v16 + 8;
    }
    goto LABEL_6;
  }
  v7 = v6 + 8;
LABEL_6:
  *(_QWORD *)(v2 + 16) = v7;
  return 1;
}

md::LabelPart *md::LabelPart::LabelPart(md::LabelPart *this, const md::LabelPart *a2)
{
  _QWORD *v4;
  size_t v5;
  void *v6;
  size_t v7;
  void *v8;
  const void *v9;
  __int128 v10;

  *(_QWORD *)this = off_1E42AF8C0;
  *((_DWORD *)this + 2) = 1065353216;
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = xmmword_19FFB2E30;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 11) = 1065353216;
  *((_DWORD *)this + 24) = 1065353216;
  *((_DWORD *)this + 29) = 0;
  *(_QWORD *)((char *)this + 100) = 0;
  *(_QWORD *)((char *)this + 108) = 0;
  *(_OWORD *)((char *)this + 120) = xmmword_19FFB2E30;
  *(_OWORD *)((char *)this + 136) = xmmword_19FFB2E30;
  *(_OWORD *)((char *)this + 152) = xmmword_19FFB2E30;
  *(_OWORD *)((char *)this + 168) = xmmword_19FFB3480;
  *((_BYTE *)this + 224) = 0;
  *(_OWORD *)((char *)this + 232) = 0u;
  v4 = (_QWORD *)((char *)this + 232);
  *((_BYTE *)this + 200) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 24) = 0;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 257) = 0u;
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((_DWORD *)this + 39) = *((_DWORD *)a2 + 39);
  *((_DWORD *)this + 40) = *((_DWORD *)a2 + 40);
  *((_DWORD *)this + 41) = *((_DWORD *)a2 + 41);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_QWORD *)this + 21) = *((_QWORD *)a2 + 21);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)this + 44) = *((_DWORD *)a2 + 44);
  *((_BYTE *)this + 270) = *((_BYTE *)a2 + 270);
  *((_BYTE *)this + 271) = *((_BYTE *)a2 + 271);
  *((_DWORD *)this + 66) = 0;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 29) = 0;
  *((_DWORD *)this + 62) = 0;
  if (*((_QWORD *)a2 + 32))
  {
    v5 = 24 * *((unsigned int *)a2 + 66);
    v6 = malloc_type_malloc(v5, 0x214412D8uLL);
    *((_QWORD *)this + 32) = v6;
    if (v6)
    {
      *((_DWORD *)this + 66) = *((_DWORD *)a2 + 66);
      memcpy(v6, *((const void **)a2 + 32), v5);
    }
  }
  if (*((_QWORD *)a2 + 29))
  {
    v7 = 16 * *((unsigned int *)a2 + 62);
    v8 = malloc_type_malloc(v7, 0x83B843BFuLL);
    *v4 = v8;
    if (v8)
    {
      *((_DWORD *)this + 62) = *((_DWORD *)a2 + 62);
      v9 = (const void *)*((_QWORD *)a2 + 29);
LABEL_10:
      memcpy(v8, v9, v7);
    }
  }
  else if (*((_QWORD *)a2 + 30))
  {
    v7 = 12 * *((unsigned int *)a2 + 62);
    v8 = malloc_type_malloc(v7, 0xF9034C61uLL);
    *((_QWORD *)this + 30) = v8;
    if (v8)
    {
      *((_DWORD *)this + 62) = *((_DWORD *)a2 + 62);
      v9 = (const void *)*((_QWORD *)a2 + 30);
      goto LABEL_10;
    }
  }
  v10 = *(_OWORD *)((char *)a2 + 296);
  *(_OWORD *)((char *)this + 280) = *(_OWORD *)((char *)a2 + 280);
  *(_OWORD *)((char *)this + 296) = v10;
  *(_OWORD *)((char *)this + 312) = xmmword_19FFB2E30;
  *((_QWORD *)this + 41) = 1065353216;
  *((_DWORD *)this + 84) = 1065353216;
  *(_QWORD *)((char *)this + 348) = 0;
  *(_QWORD *)((char *)this + 340) = 0;
  *((_DWORD *)this + 89) = 0;
  *(_OWORD *)((char *)this + 360) = xmmword_19FFB2E30;
  *(_OWORD *)((char *)this + 376) = xmmword_19FFB2E30;
  *(_OWORD *)((char *)this + 392) = xmmword_19FFB2E30;
  *(_OWORD *)((char *)this + 408) = xmmword_19FFB3480;
  *((_BYTE *)this + 464) = 0;
  *((_QWORD *)this + 53) = 0;
  *((_QWORD *)this + 54) = 0;
  *((_BYTE *)this + 440) = 0;
  *(_OWORD *)((char *)this + 472) = 0u;
  *(_OWORD *)((char *)this + 488) = 0u;
  *(_OWORD *)((char *)this + 497) = 0u;
  *(_OWORD *)((char *)this + 520) = xmmword_19FFB3580;
  *((_DWORD *)this + 134) = 1065353216;
  *(_QWORD *)((char *)this + 548) = 0;
  *(_QWORD *)((char *)this + 540) = 0;
  *((_WORD *)this + 278) = *((_WORD *)a2 + 278);
  *((_WORD *)this + 279) = 0;
  *((_BYTE *)this + 560) = 0;
  *((_BYTE *)this + 561) = *((_BYTE *)a2 + 561);
  *((_BYTE *)this + 562) = *((_BYTE *)a2 + 562);
  *(_WORD *)((char *)this + 563) = -1;
  *((_BYTE *)this + 565) = *((_BYTE *)a2 + 565);
  *((_WORD *)this + 283) = 0;
  *((_BYTE *)this + 568) = 0;
  *((_QWORD *)this + 3) = this;
  return this;
}

uint64_t altitude::AnchorTilePrivate::key(altitude::AnchorTilePrivate *this)
{
  return *((_QWORD *)this + 1);
}

uint64_t altitude::AnchorTilePrivate::failureCount(altitude::AnchorTilePrivate *this)
{
  return *((unsigned int *)this + 23);
}

uint64_t altitude::AnchorTilePrivate::convertPoint(uint64_t a1, uint64_t a2, int a3)
{
  double v4;
  uint64_t result;
  double v6;
  int32x2_t v7;
  int64x2_t v8;
  _BYTE v9[8];
  int8x16_t v10;
  int8x16_t v11;
  double v12;
  double v13;

  v9[0] = 0;
  v10 = *(int8x16_t *)a2;
  v4 = *(double *)(a2 + 16);
  if (!a3)
    v4 = -3.40282347e38;
  v13 = v4;
  result = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 24))(a1, v9);
  v6 = v12;
  if (!(_DWORD)result)
    v6 = 0.0;
  v7 = vdup_n_s32(result);
  v8.i64[0] = v7.u32[0];
  v8.i64[1] = v7.u32[1];
  *(int8x16_t *)a2 = vandq_s8(v11, (int8x16_t)vcltzq_s64(vshlq_n_s64(v8, 0x3FuLL)));
  *(double *)(a2 + 16) = v6;
  return result;
}

uint64_t altitude::AnchorTilePrivate::convertFeature(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t v22;
  int32x2_t *v23;
  int32x2_t v24;
  uint64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  int v28;
  double v29;
  double v30;
  double v31;
  long double v32;
  long double v33;
  double v34;
  long double v35;
  double v36;
  __double2 v37;
  double v38;
  __double2 v39;
  double v40;
  double v41;
  long double v42;
  long double v43;
  __double2 v44;
  double v45;
  double v46;
  long double v47;
  long double v48;
  __double2 v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  float v67;
  uint64_t v68;
  float64x2_t v69;
  char v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  int v81;
  double v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t result;
  NSObject *v88;
  double v89;
  double v90;
  double v91[2];
  uint8_t buf[16];

  if (*(_BYTE *)(a1 + 97))
  {
    *(_BYTE *)(a1 + 97) = 0;
    v12 = *(_QWORD **)(a1 + 40);
    if (v12)
    {
      v13 = v12[17];
      v14 = v12[18];
      *(_QWORD *)(a1 + 24) = v13;
      *(_QWORD *)(a1 + 32) = v14;
      v15 = 1.0 / (double)(1 << v13);
      *(double *)(a1 + 56) = v15 * (double)v14;
      *(double *)(a1 + 64) = v15 * (double)HIDWORD(v13);
      *(double *)(a1 + 72) = v15;
      *(double *)(a1 + 80) = v15;
      v16 = v12[2];
      if (v16)
      {
        v17 = *(uint64_t **)(v16 + 16);
        v19 = *v17;
        v18 = (std::__shared_weak_count *)v17[1];
        if (v18)
        {
          p_shared_owners = (unint64_t *)&v18->__shared_owners_;
          do
            v21 = __ldxr(p_shared_owners);
          while (__stxr(v21 + 1, p_shared_owners));
          do
            v22 = __ldaxr(p_shared_owners);
          while (__stlxr(v22 - 1, p_shared_owners));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        if (v19)
        {
          v23 = *(int32x2_t **)(*(_QWORD *)(a1 + 40) + 16);
          if (v23)
          {
            v24 = vadd_s32(*v23, (int32x2_t)-1);
            v25.i64[0] = v24.u32[0];
            v25.i64[1] = v24.u32[1];
            v26 = vcvtq_f64_u64(v25);
          }
          else
          {
            v26 = (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL);
          }
          *(float64x2_t *)(a1 + 136) = v26;
          v27 = *(float64x2_t *)(a1 + 72);
          *(float64x2_t *)(a1 + 152) = vdivq_f64(vsubq_f64(*(float64x2_t *)(a1 + 104), *(float64x2_t *)(a1 + 56)), v27);
          *(float64x2_t *)(a1 + 168) = vdivq_f64(*(float64x2_t *)(a1 + 120), v27);
        }
      }
    }
    v28 = *(_DWORD *)(a1 + 16);
    *(_BYTE *)(a1 + 96) = v28 > 13;
    if (v28 >= 14)
    {
      v29 = *(double *)(a1 + 104);
      v30 = *(double *)(a1 + 112);
      v31 = *(double *)(a1 + 120) + v29;
      v90 = *(double *)(a1 + 128) + v30;
      v32 = v29 * 6.28318531;
      v33 = exp(v30 * 6.28318531 + -3.14159265);
      v34 = atan(v33) * 2.0 + -1.57079633;
      v35 = fmod(v32, 6.28318531);
      v36 = fmod(v35 + 6.28318531, 6.28318531) + -3.14159265;
      v37 = __sincos_stret(v34);
      v38 = 6378137.0 / sqrt(1.0 - v37.__sinval * v37.__sinval * 0.00669437999);
      v39 = __sincos_stret(v36);
      v40 = v38 * v37.__cosval * v39.__cosval;
      v89 = v38 * v37.__cosval * v39.__sinval;
      v41 = v37.__sinval * 0.99330562 * v38;
      *(double *)(a1 + 184) = v40;
      *(double *)(a1 + 192) = v89;
      *(double *)(a1 + 200) = v41;
      v42 = fmod(v31 * 6.28318531, 6.28318531);
      v43 = fmod(v42 + 6.28318531, 6.28318531);
      v44 = __sincos_stret(v43 + -3.14159265);
      v45 = v38 * v37.__cosval * v44.__cosval;
      v46 = v38 * v37.__cosval * v44.__sinval;
      *(double *)(a1 + 208) = v45;
      *(double *)(a1 + 216) = v46;
      *(double *)(a1 + 224) = v41;
      v47 = exp(v90 * 6.28318531 + -3.14159265);
      v48 = atan(v47);
      v49 = __sincos_stret(v48 * 2.0 + -1.57079633);
      v50 = 6378137.0 / sqrt(1.0 - v49.__sinval * v49.__sinval * 0.00669437999);
      v51 = v50 * v49.__cosval;
      v52 = v50 * v49.__cosval * v44.__cosval;
      v53 = v50 * v49.__cosval * v44.__sinval;
      v54 = v49.__sinval * 0.99330562 * v50;
      *(double *)(a1 + 232) = v52;
      *(double *)(a1 + 240) = v53;
      v55 = v50 * v49.__cosval * v39.__cosval;
      v56 = v51 * v39.__sinval;
      *(double *)(a1 + 248) = v54;
      *(double *)(a1 + 256) = v55;
      *(double *)(a1 + 264) = v56;
      *(double *)(a1 + 272) = v54;
      a8 = v52 - v45;
      a9 = v46 - v53;
      v57 = v54 - v41;
      a10 = v40 - v45;
      v58 = v55 - v40;
      v59 = v89 - v56;
      v60 = v55 - v52;
      v61 = v56 - v53;
      v62 = v58 * v61;
      a7 = v60 + v40 - v45;
      v63 = v57 * -0.5 * (v61 + v89 - v46);
      v64 = v57 * 0.5 * a7;
      v65 = (v62 + a8 * (v89 - v46) + v60 * v59 + a9 * (v40 - v45)) * 0.5;
      v66 = 1.0 / sqrt(v63 * v63 + v64 * v64 + v65 * v65);
      *(double *)(a1 + 280) = v66 * v63;
      *(double *)(a1 + 288) = v66 * v64;
      *(double *)(a1 + 296) = v66 * v65;
    }
  }
  v91[0] = 0.0;
  v91[1] = 0.0;
  v67 = *(double *)(a2 + 88);
  if (v67 <= -3.40282337e38)
  {
    v68 = *(_QWORD *)(a1 + 40);
    if (v68)
    {
      v69 = vmaxnmq_f64(vmlaq_f64(*(float64x2_t *)(a1 + 152), *(float64x2_t *)(a2 + 8), *(float64x2_t *)(a1 + 168)), (float64x2_t)0);
      __asm { FMOV            V1.2D, #1.0 }
      *(int32x2_t *)&_Q1.f64[0] = vmovn_s64(vcgtq_f64(v69, _Q1));
      v75 = BYTE4(_Q1.f64[0]);
      _ZF = (LOBYTE(_Q1.f64[0]) & 1) == 0;
      v76 = 1.0;
      if (_ZF)
        v77 = v69.f64[0];
      else
        v77 = 1.0;
      if ((v75 & 1) == 0)
        v76 = v69.f64[1];
      v78 = *(double *)(a1 + 144);
      v79 = v77 * *(double *)(a1 + 136);
      v80 = v76 * v78;
      v81 = *(_DWORD *)(v68 + 132);
      if (v81 == 16)
      {
        if ((karo::media::DigitalTerrainModel::sampleT<double,unsigned short>(v68, v91, v79, v80, v77, v78, a7, a8, a9, a10) & 1) != 0)goto LABEL_30;
      }
      else if (v81 == 8)
      {
        if ((karo::media::DigitalTerrainModel::sampleT<double,unsigned char>(v68, v91, v79, v80, v77, v78, a7, a8, a9, a10) & 1) != 0)goto LABEL_30;
      }
      else
      {
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
        v88 = GEOGetVectorKitVKDefaultLog_log;
        if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_19F029000, v88, OS_LOG_TYPE_ERROR, "Unknown DTM format", buf, 2u);
        }
      }
      result = 0;
      ++*(_DWORD *)(a1 + 92);
      return result;
    }
  }
  else
  {
    v91[0] = *(double *)(a2 + 88);
  }
LABEL_30:
  v82 = v91[0];
  *(double *)(a2 + 40) = altitude::AnchorTilePrivate::getGeocentricPoint(a1, *(double *)(a2 + 8), *(double *)(a2 + 16), v91[0]);
  *(_QWORD *)(a2 + 48) = v83;
  *(_QWORD *)(a2 + 56) = v84;
  if (*(_BYTE *)a2)
  {
    *(double *)(a2 + 64) = altitude::AnchorTilePrivate::getGeocentricPoint(a1, *(double *)(a2 + 24), *(double *)(a2 + 32), v82);
    *(_QWORD *)(a2 + 72) = v85;
    *(_QWORD *)(a2 + 80) = v86;
  }
  return 1;
}

void altitude::AnchorTilePrivate::~AnchorTilePrivate(altitude::AnchorTilePrivate *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *(_QWORD *)this = off_1E42C4D10;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *(_QWORD *)this = off_1E42C4D10;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t altitude::AnchorTilePrivate::setHeightOffset(uint64_t this, float a2)
{
  *(float *)(this + 88) = a2;
  return this;
}

double altitude::AnchorTilePrivate::getGeocentricPoint(uint64_t a1, double a2, double a3, double a4)
{
  float64x2_t v4;
  double v5;
  double v6;
  long double v7;
  long double v8;
  double v9;
  long double v10;
  double v11;
  __double2 v12;
  float64x2_t v13;
  __double2 v14;

  if (*(_BYTE *)(a1 + 96))
  {
    v4 = vmlaq_n_f64(*(float64x2_t *)(a1 + 184), vsubq_f64(*(float64x2_t *)(a1 + 208), *(float64x2_t *)(a1 + 184)), a2);
    *(_QWORD *)&v5 = *(_OWORD *)&vmlaq_n_f64(vmlaq_n_f64(v4, vsubq_f64(vmlaq_n_f64(*(float64x2_t *)(a1 + 256), vsubq_f64(*(float64x2_t *)(a1 + 232), *(float64x2_t *)(a1 + 256)), a2), v4), a3), *(float64x2_t *)(a1 + 280), *(float *)(a1 + 88) + a4);
  }
  else
  {
    v6 = *(float *)(a1 + 88) + a4;
    v7 = (*(double *)(a1 + 104) + *(double *)(a1 + 120) * a2) * 6.28318531;
    v8 = exp((*(double *)(a1 + 112) + *(double *)(a1 + 128) * a3) * 6.28318531 + -3.14159265);
    v9 = atan(v8) * 2.0 + -1.57079633;
    v10 = fmod(v7, 6.28318531);
    v11 = fmod(v10 + 6.28318531, 6.28318531) + -3.14159265;
    v12 = __sincos_stret(v9);
    v14 = __sincos_stret(v11);
    v13.f64[0] = v14.__cosval;
    v13.f64[1] = v14.__sinval;
    *(_QWORD *)&v5 = *(_OWORD *)&vmulq_n_f64(v13, (6378137.0 / sqrt(v12.__sinval * v12.__sinval * -0.00669437999 + 1.0) + v6)* v12.__cosval);
  }
  return v5;
}

void altitude::RoadRequestManager::~RoadRequestManager(altitude::RoadRequestManager *this)
{
  altitude::RoadRequestManager::~RoadRequestManager(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E42C5610;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = off_1E42C31C8;
  while (*((_QWORD *)this + 10))
    (*(void (**)(altitude::RoadRequestManager *, uint64_t))(*(_QWORD *)this + 48))(this, *((_QWORD *)this + 8) + 32);
  std::__tree<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TileKey,std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TileKey>,true>,std::allocator<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*((_QWORD **)this + 9));
  karo::AsyncRequestManager::~AsyncRequestManager(this);
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::TileKey,altitude::RoadRequestArgs>::pruneRequests(uint64_t a1, int a2)
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  BOOL v9;
  uint64_t v10;
  int v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  v4 = *(uint64_t **)(a1 + 64);
  if (v4 != (uint64_t *)(a1 + 72))
  {
    do
    {
      v6 = (uint64_t *)v4[1];
      v7 = v4;
      if (v6)
      {
        do
        {
          v8 = v6;
          v6 = (uint64_t *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v8 = (uint64_t *)v7[2];
          v9 = *v8 == (_QWORD)v7;
          v7 = v8;
        }
        while (!v9);
      }
      v10 = v4[8];
      if (atomic_load((unsigned int *)(v10 + 128)))
        *(_DWORD *)(v10 + 180) = a2;
      pthread_mutex_lock(*(pthread_mutex_t **)(v10 + 152));
      v12 = *(_DWORD *)(v10 + 160);
      pthread_mutex_unlock(*(pthread_mutex_t **)(v10 + 152));
      if ((v12 & 1) != 0 && *(_BYTE *)(v10 + 176) && *(_DWORD *)(v10 + 180) != a2
        || (a2 - *(_DWORD *)(v10 + 180)) > *(_DWORD *)(v10 + 184))
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
        v13 = (uint64_t *)v4[1];
        v14 = v4;
        if (v13)
        {
          do
          {
            v15 = v13;
            v13 = (uint64_t *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            v15 = (uint64_t *)v14[2];
            v9 = *v15 == (_QWORD)v14;
            v14 = v15;
          }
          while (!v9);
        }
        if (*(uint64_t **)(a1 + 64) == v4)
          *(_QWORD *)(a1 + 64) = v15;
        v16 = *(uint64_t **)(a1 + 72);
        --*(_QWORD *)(a1 + 80);
        std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v16, v4);
        v17 = (std::__shared_weak_count *)v4[9];
        if (v17)
        {
          p_shared_owners = (unint64_t *)&v17->__shared_owners_;
          do
            v19 = __ldaxr(p_shared_owners);
          while (__stlxr(v19 - 1, p_shared_owners));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        operator delete(v4);
      }
      v4 = v8;
    }
    while (v8 != (uint64_t *)(a1 + 72));
  }
  *(_DWORD *)(a1 + 88) = a2;
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

void sub_19FE47290(_Unwind_Exception *a1)
{
  uint64_t v1;

  pthread_mutex_unlock(*(pthread_mutex_t **)(v1 + 40));
  _Unwind_Resume(a1);
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::TileKey,altitude::RoadRequestArgs>::removeFromRequests(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  v4 = *(uint64_t **)(a1 + 64);
  if (v4 != (uint64_t *)(a1 + 72))
  {
    v5 = *(uint64_t **)(a1 + 64);
    while (1)
    {
      v6 = (uint64_t *)v5[1];
      if (v5[8] == a2)
        break;
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (uint64_t *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (uint64_t *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      v5 = v7;
      if (v7 == (uint64_t *)(a1 + 72))
        return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
    }
    if (v6)
    {
      do
      {
        v9 = v6;
        v6 = (uint64_t *)*v6;
      }
      while (v6);
    }
    else
    {
      v10 = v5;
      do
      {
        v9 = (uint64_t *)v10[2];
        v8 = *v9 == (_QWORD)v10;
        v10 = v9;
      }
      while (!v8);
    }
    if (v4 == v5)
      *(_QWORD *)(a1 + 64) = v9;
    v11 = *(uint64_t **)(a1 + 72);
    --*(_QWORD *)(a1 + 80);
    std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v11, v5);
    v12 = (std::__shared_weak_count *)v5[9];
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    operator delete(v5);
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::TileKey,altitude::RoadRequestArgs>::clearRequest(uint64_t a1, unsigned int *a2)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  BOOL v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  v4 = (uint64_t **)(a1 + 64);
  v5 = (uint64_t *)std::__tree<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TileKey,std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TileKey>,true>,std::allocator<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::find<altitude::TileKey>(a1 + 64, a2);
  if ((uint64_t *)(a1 + 72) != v5)
  {
    v6 = v5;
    (*(void (**)(uint64_t))(*(_QWORD *)v5[8] + 16))(v5[8]);
    v7 = (uint64_t *)v6[1];
    if (v7)
    {
      do
      {
        v8 = v7;
        v7 = (uint64_t *)*v7;
      }
      while (v7);
    }
    else
    {
      v9 = v6;
      do
      {
        v8 = (uint64_t *)v9[2];
        v10 = *v8 == (_QWORD)v9;
        v9 = v8;
      }
      while (!v10);
    }
    if (*v4 == v6)
      *v4 = v8;
    v11 = *(uint64_t **)(a1 + 72);
    --*(_QWORD *)(a1 + 80);
    std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v11, v6);
    v12 = (std::__shared_weak_count *)v6[9];
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    operator delete(v6);
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

void sub_19FE474BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  pthread_mutex_unlock(*(pthread_mutex_t **)(v1 + 40));
  _Unwind_Resume(a1);
}

void karo::AsyncRequestManagerTemplate<altitude::TileKey,altitude::RoadRequestArgs>::createAndQueueRequest(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  _QWORD v10[2];

  (*(void (**)(uint64_t *__return_ptr))(*a1 + 64))(a2);
  v4 = a1[6];
  if (v4)
  {
    v5 = *a2;
    v6 = (std::__shared_weak_count *)a2[1];
    v10[0] = v5;
    v10[1] = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      karo::JobManager::queueJob(v4, v10);
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    else
    {
      karo::JobManager::queueJob(v4, v10);
    }
  }
}

void altitude::RoadRequestManager::createRequest(_QWORD *a1@<X0>, _OWORD *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint32x4_t v24;
  unsigned int v25;
  _QWORD *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;

  v32 = 0;
  if (a3)
  {
    v8 = *a3;
    v7 = (std::__shared_weak_count *)a3[1];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    v32 = v7;
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v11 = operator new();
  v12 = v11;
  v13 = a1[4];
  v14 = a1[13];
  v15 = a1[16];
  if (v7)
  {
    v16 = (unint64_t *)&v7->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  karo::Job::Job(v11, v13);
  *(_QWORD *)(v12 + 180) = 0xFFFFFFFF00000000;
  v18 = a2[1];
  *(_OWORD *)(v12 + 200) = *a2;
  *(_BYTE *)(v12 + 176) = 0;
  *(_QWORD *)v12 = &off_1E42C3BD0;
  *(_BYTE *)(v12 + 188) = 0;
  *(_QWORD *)(v12 + 192) = v14;
  *(_OWORD *)(v12 + 216) = v18;
  *(_QWORD *)(v12 + 232) = 0;
  *(_QWORD *)(v12 + 240) = 0;
  v19 = a1[15];
  *(_QWORD *)(v12 + 248) = a1[14];
  *(_QWORD *)(v12 + 256) = v19;
  if (v19)
  {
    v20 = (unint64_t *)(v19 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  *(_QWORD *)(v12 + 264) = v15;
  *(_QWORD *)(v12 + 272) = v8;
  *(_QWORD *)(v12 + 280) = v7;
  if (v7)
  {
    v22 = (unint64_t *)&v7->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  *(_QWORD *)(v12 + 328) = 0;
  *(_QWORD *)(v12 + 336) = 0;
  v24.i32[3] = 0;
  *(_OWORD *)(v12 + 288) = 0u;
  *(_OWORD *)(v12 + 304) = 0u;
  *(_QWORD *)(v12 + 320) = v12 + 328;
  v25 = *(_DWORD *)(v12 + 216);
  if (v25 >= 0x15)
  {
    v24.i64[0] = *(_QWORD *)(v12 + 220);
    v24.i32[2] = *(_DWORD *)(v12 + 228);
    do
    {
      --v25;
      v24 = vshrq_n_u32(v24, 1uLL);
    }
    while (v25 > 0x14);
    *(_DWORD *)(v12 + 216) = 20;
    *(_DWORD *)(v12 + 228) = v24.i32[2];
    *(_QWORD *)(v12 + 220) = v24.i64[0];
  }
  v26 = (_QWORD *)operator new();
  *v26 = &off_1E42E85C8;
  v26[1] = 0;
  v26[2] = 0;
  v26[3] = v12;
  *a4 = v12;
  a4[1] = (uint64_t)v26;
  if (!v7)
    goto LABEL_24;
  v27 = (unint64_t *)&v7->__shared_owners_;
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 - 1, v27));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    v29 = v32;
    if (!v32)
      return;
  }
  else
  {
LABEL_24:
    v29 = v32;
    if (!v32)
      return;
  }
  v30 = (unint64_t *)&v29->__shared_owners_;
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 - 1, v30));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
}

void sub_19FE477B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::TileKey,altitude::RoadRequestArgs>::requestT(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  int v11;
  unsigned int v12;
  char v13;
  unsigned int v14;
  _QWORD *v15;
  unsigned int *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  unsigned int *v27;
  std::__shared_weak_count *v28;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  if (!a4)
    a4 = *(_DWORD *)(a1 + 88) + 1;
  v8 = *a2;
  v9 = a2[1];
  if (*a2 != v9)
  {
    do
    {
      (*(void (**)(unsigned int **__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 96))(&v27, a1, v8, v8 + 32);
      v10 = v27;
      v11 = *(_DWORD *)(v8 + 48);
      v12 = *(_DWORD *)(v8 + 52);
      v13 = *(_BYTE *)(v8 + 56);
      v14 = atomic_load(v27 + 4);
      if (v14 != v11)
        (*(void (**)(unsigned int *))(*(_QWORD *)v27 + 24))(v27);
      v10[45] = a4;
      v10[46] = v12;
      *((_BYTE *)v10 + 176) = v13;
      v15 = *(_QWORD **)(a3 + 8);
      if ((unint64_t)v15 >= *(_QWORD *)(a3 + 16))
      {
        v22 = std::vector<karo::AsyncRequestManager::RequestHandle>::__emplace_back_slow_path<std::shared_ptr<karo::AsyncRequestManager::Request> &>((void **)a3, (uint64_t)v27, (uint64_t)v28);
      }
      else
      {
        *v15 = &off_1E42C2D08;
        v16 = v27;
        v15[1] = v27;
        v17 = (uint64_t)v28;
        v15[2] = v28;
        if (v17)
        {
          v18 = (unint64_t *)(v17 + 8);
          do
            v19 = __ldxr(v18);
          while (__stxr(v19 + 1, v18));
          v16 = (unsigned int *)v15[1];
        }
        if (v16)
        {
          v20 = v16 + 32;
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 + 1, v20));
        }
        v22 = v15 + 3;
        *(_QWORD *)(a3 + 8) = v15 + 3;
      }
      *(_QWORD *)(a3 + 8) = v22;
      v23 = v28;
      if (v28)
      {
        p_shared_owners = (unint64_t *)&v28->__shared_owners_;
        do
          v25 = __ldaxr(p_shared_owners);
        while (__stlxr(v25 - 1, p_shared_owners));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v8 += 64;
    }
    while (v8 != v9);
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

void sub_19FE47974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  pthread_mutex_unlock(*(pthread_mutex_t **)(v9 + 40));
  _Unwind_Resume(a1);
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::TileKey,altitude::RoadRequestArgs>::requestT@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, unsigned int a5@<W4>, char a6@<W5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unsigned int *v28;
  std::__shared_weak_count *v29;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  if (!a3)
    a3 = *(_DWORD *)(a1 + 88) + 1;
  (*(void (**)(unsigned int **__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 96))(&v28, a1, a2, a7);
  v16 = v28;
  v17 = atomic_load(v28 + 4);
  if (v17 != (_DWORD)a4)
    (*(void (**)(unsigned int *, uint64_t))(*(_QWORD *)v28 + 24))(v28, a4);
  v16[45] = a3;
  v16[46] = a5;
  *((_BYTE *)v16 + 176) = a6;
  v18 = v28;
  v19 = v29;
  *a8 = &off_1E42C2D08;
  a8[1] = v18;
  a8[2] = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
  }
  if (v18)
  {
    v22 = v18 + 32;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 + 1, v22));
  }
  v24 = v29;
  if (v29)
  {
    v25 = (unint64_t *)&v29->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

void sub_19FE47AD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  pthread_mutex_unlock(*(pthread_mutex_t **)(v9 + 40));
  _Unwind_Resume(a1);
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::TileKey,altitude::RoadRequestArgs>::waitOnRequest(uint64_t a1, unsigned int *a2, unsigned int a3)
{
  _DWORD *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  v6 = std::__tree<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TileKey,std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TileKey>,true>,std::allocator<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::find<altitude::TileKey>(a1 + 64, a2);
  if ((_DWORD *)(a1 + 72) == v6)
  {
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
    return 0;
  }
  else
  {
    v8 = *((_QWORD *)v6 + 8);
    v7 = (std::__shared_weak_count *)*((_QWORD *)v6 + 9);
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
    if (v8)
    {
      karo::Job::waitToFinish((karo::Job *)v8, a3);
      pthread_mutex_lock(*(pthread_mutex_t **)(v8 + 152));
      v11 = *(_DWORD *)(v8 + 160) & 1;
      pthread_mutex_unlock(*(pthread_mutex_t **)(v8 + 152));
      if (!v7)
        return v11;
    }
    else
    {
      v11 = 0;
      if (!v7)
        return v11;
    }
    v12 = (unint64_t *)&v7->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v11;
}

void sub_19FE47BF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void karo::AsyncRequestManagerTemplate<altitude::TileKey,altitude::RoadRequestArgs>::getRequest(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t **a4@<X8>)
{
  _QWORD **v8;
  uint64_t **v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  __int128 v20;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  std::__shared_weak_count *v36;

  *a4 = 0;
  a4[1] = 0;
  v8 = (_QWORD **)(a1 + 8);
  v9 = (uint64_t **)std::__tree<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TileKey,std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TileKey>,true>,std::allocator<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::find<altitude::TileKey>((uint64_t)(a1 + 8), (unsigned int *)a2);
  v10 = v9;
  if (a1 + 9 == v9)
  {
    (*(void (**)(uint64_t **__return_ptr, _QWORD *, uint64_t, uint64_t))(*a1 + 64))(&v35, a1, a2, a3);
    v16 = v35;
    v15 = v36;
    *a4 = v35;
    a4[1] = (uint64_t *)v15;
    v17 = std::__tree<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TileKey,std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TileKey>,true>,std::allocator<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::__find_equal<altitude::TileKey>((uint64_t)v8, &v35, (unsigned int *)a2);
    v18 = *v17;
    if (!*v17)
    {
      v19 = v17;
      v18 = (uint64_t)operator new(0x50uLL);
      v20 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(v18 + 32) = *(_OWORD *)a2;
      *(_OWORD *)(v18 + 48) = v20;
      *(_QWORD *)(v18 + 64) = 0;
      *(_QWORD *)(v18 + 72) = 0;
      v21 = v35;
      *(_QWORD *)v18 = 0;
      *(_QWORD *)(v18 + 8) = 0;
      *(_QWORD *)(v18 + 16) = v21;
      *v19 = v18;
      v22 = (_QWORD *)**v8;
      v23 = (uint64_t *)v18;
      if (v22)
      {
        *v8 = v22;
        v23 = (uint64_t *)*v19;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*v10, v23);
      ++a1[10];
    }
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v25 = __ldxr(p_shared_owners);
      while (__stxr(v25 + 1, p_shared_owners));
    }
    v26 = *(std::__shared_weak_count **)(v18 + 72);
    *(_QWORD *)(v18 + 64) = v16;
    *(_QWORD *)(v18 + 72) = v15;
    if (v26)
    {
      v27 = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    v29 = a1[6];
    if (v29)
    {
      v30 = *a4;
      v31 = (std::__shared_weak_count *)a4[1];
      v35 = v30;
      v36 = v31;
      if (v31)
      {
        v32 = (unint64_t *)&v31->__shared_owners_;
        do
          v33 = __ldxr(v32);
        while (__stxr(v33 + 1, v32));
        karo::JobManager::queueJob(v29, &v35);
        do
          v34 = __ldaxr(v32);
        while (__stlxr(v34 - 1, v32));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      else
      {
        karo::JobManager::queueJob(v29, &v35);
      }
    }
  }
  else
  {
    v12 = v9[8];
    v11 = v9[9];
    if (v11)
    {
      v13 = (unint64_t *)(v11 + 1);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    *a4 = v12;
    a4[1] = v11;
  }
}

void sub_19FE47DE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<altitude::RoadLoadJob *,std::shared_ptr<altitude::RoadLoadJob>::__shared_ptr_default_delete<altitude::RoadLoadJob,altitude::RoadLoadJob>,std::allocator<altitude::RoadLoadJob>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<altitude::RoadLoadJob *,std::shared_ptr<altitude::RoadLoadJob>::__shared_ptr_default_delete<altitude::RoadLoadJob,altitude::RoadLoadJob>,std::allocator<altitude::RoadLoadJob>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void altitude::RoadLoadJob::~RoadLoadJob(altitude::RoadLoadJob *this)
{
  altitude::RoadLoadJob::~RoadLoadJob(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;

  *(_QWORD *)this = &off_1E42C3BD0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 41));
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 39);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 37);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 37);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 35);
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
    if (!v11)
      goto LABEL_21;
  }
  else
  {
LABEL_15:
    v11 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
    if (!v11)
      goto LABEL_21;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_21:
  v14 = (std::__shared_weak_count *)*((_QWORD *)this + 30);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  karo::Job::~Job(this);
}

void altitude::RoadLoadJob::jobStep(altitude::RoadLoadJob *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  unsigned int *v59;
  unsigned int v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  _QWORD *v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  _QWORD *v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  uint8_t *v103;
  uint64_t v104;
  NSObject *v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD **v111;
  uint64_t *v112;
  uint64_t v113;
  int32x2_t v114;
  unsigned int v115;
  unsigned int v116;
  int VersionForGEOType;
  _QWORD **v118;
  uint64_t *v119;
  uint64_t *v120;
  char *v121;
  unint64_t v122;
  _QWORD *v123;
  uint64_t *v124;
  char *v125;
  __int128 v126;
  unint64_t v127;
  _QWORD *v128;
  BOOL v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD v134[2];
  uint64_t v135;
  unsigned int v136;
  unsigned int v137;
  __int128 v138;
  _QWORD v139[2];
  unint64_t v140;
  unint64_t v141;
  __int128 v142;
  uint8_t buf[16];
  __int128 v144;
  std::__shared_weak_count *v145;
  uint64_t v146;

  v146 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 34);
  if (v2)
  {
    v4 = *(_QWORD *)(v2 + 88);
    v3 = *(_QWORD *)(v2 + 96);
    if (v3)
    {
      v5 = (unint64_t *)(v3 + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    v7 = (std::__shared_weak_count *)*((_QWORD *)this + 37);
    *((_QWORD *)this + 36) = v4;
    *((_QWORD *)this + 37) = v3;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v10 = *((_QWORD *)this + 34);
    v12 = *(_QWORD *)(v10 + 40);
    v11 = *(_QWORD *)(v10 + 48);
    if (v11)
    {
      v13 = (unint64_t *)(v11 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    v15 = (std::__shared_weak_count *)*((_QWORD *)this + 39);
    *((_QWORD *)this + 38) = v12;
    *((_QWORD *)this + 39) = v11;
    if (v15)
    {
      v16 = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    goto LABEL_92;
  }
  v18 = *((_DWORD *)this + 50);
  v19 = *((_DWORD *)this + 51);
  v140 = __PAIR64__(v19, v18);
  v20 = *((_DWORD *)this + 52);
  v21 = *((_DWORD *)this + 53);
  v141 = __PAIR64__(v21, v20);
  v142 = *(_OWORD *)((char *)this + 216);
  if (*((_QWORD *)this + 36))
  {
    v22 = 0;
    goto LABEL_55;
  }
  v23 = *((_QWORD *)this + 24);
  v24 = *(unsigned int *)(*((_QWORD *)this + 1) + 88);
  v25 = atomic_load((unsigned int *)this + 4);
  (*(void (**)(uint8_t *__return_ptr, uint64_t, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)v23 + 104))(buf, v23, &v140, v24, v25);
  v26 = *(_QWORD *)buf;
  if (*(_QWORD *)buf)
  {
    v27 = *(_QWORD *)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v28 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    v30 = (std::__shared_weak_count *)*((_QWORD *)this + 37);
    *((_QWORD *)this + 36) = v26;
    *((_QWORD *)this + 37) = v27;
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
  }
  else
  {
    if (karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)&v144))
    {
      v33 = v145;
      v139[0] = *((_QWORD *)&v144 + 1);
      v139[1] = v145;
      if (v145)
      {
        v34 = (unint64_t *)&v145->__shared_owners_;
        do
          v35 = __ldxr(v34);
        while (__stxr(v35 + 1, v34));
        karo::Job::addBlockingSubJob((uint64_t *)this, v139, 0, 0);
        do
          v36 = __ldaxr(v34);
        while (__stlxr(v36 - 1, v34));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      else
      {
        karo::Job::addBlockingSubJob((uint64_t *)this, v139, 0, 0);
      }
      v22 = 1;
      goto LABEL_41;
    }
    (*(void (**)(altitude::RoadLoadJob *))(*(_QWORD *)this + 16))(this);
  }
  karo::Job::removeSubJob((pthread_mutex_t **)this, 0);
  v22 = 0;
LABEL_41:
  *(_QWORD *)&v144 = &off_1E42C2D08;
  if (*((_QWORD *)&v144 + 1))
  {
    v37 = (unsigned int *)(*((_QWORD *)&v144 + 1) + 128);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
  }
  v39 = v145;
  if (v145)
  {
    v40 = (unint64_t *)&v145->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v43 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v18 = *((_DWORD *)this + 50);
  v19 = *((_DWORD *)this + 51);
  v20 = *((_DWORD *)this + 52);
  v21 = *((_DWORD *)this + 53);
LABEL_55:
  v135 = __PAIR64__(v19, v18);
  v136 = v20;
  v137 = v21;
  v138 = *(_OWORD *)((char *)this + 216);
  if (*((_QWORD *)this + 38)
    || !(*(unsigned int (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 33) + 112))(*((_QWORD *)this + 33), &v135))
  {
    goto LABEL_90;
  }
  v45 = *((_QWORD *)this + 33);
  v46 = *(unsigned int *)(*((_QWORD *)this + 1) + 88);
  v47 = atomic_load((unsigned int *)this + 4);
  (*(void (**)(uint8_t *__return_ptr, uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v45 + 104))(buf, v45, &v135, v46, v47);
  v48 = *(_QWORD *)buf;
  if (*(_QWORD *)buf)
  {
    v49 = *(_QWORD *)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v50 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v51 = __ldxr(v50);
      while (__stxr(v51 + 1, v50));
    }
    v52 = (std::__shared_weak_count *)*((_QWORD *)this + 39);
    *((_QWORD *)this + 38) = v48;
    *((_QWORD *)this + 39) = v49;
    if (v52)
    {
      v53 = (unint64_t *)&v52->__shared_owners_;
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
  }
  else
  {
    if (karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)&v144))
    {
      v55 = v145;
      v134[0] = *((_QWORD *)&v144 + 1);
      v134[1] = v145;
      if (v145)
      {
        v56 = (unint64_t *)&v145->__shared_owners_;
        do
          v57 = __ldxr(v56);
        while (__stxr(v57 + 1, v56));
        karo::Job::addBlockingSubJob((uint64_t *)this, v134, 1, 0);
        do
          v58 = __ldaxr(v56);
        while (__stlxr(v58 - 1, v56));
        if (!v58)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
        v22 = 1;
      }
      else
      {
        v22 = 1;
        karo::Job::addBlockingSubJob((uint64_t *)this, v134, 1, 0);
      }
      goto LABEL_77;
    }
    (*(void (**)(altitude::RoadLoadJob *))(*(_QWORD *)this + 16))(this);
  }
  karo::Job::removeSubJob((pthread_mutex_t **)this, 1);
LABEL_77:
  *(_QWORD *)&v144 = &off_1E42C2D08;
  if (*((_QWORD *)&v144 + 1))
  {
    v59 = (unsigned int *)(*((_QWORD *)&v144 + 1) + 128);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
  }
  v61 = v145;
  if (v145)
  {
    v62 = (unint64_t *)&v145->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  v64 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v65 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
LABEL_90:
  if ((v22 & 1) != 0)
    return;
  pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
  v67 = *((_DWORD *)this + 40);
  pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
  if ((v67 & 2) != 0)
    return;
LABEL_92:
  v68 = operator new();
  v69 = v68;
  v70 = *((_DWORD *)this + 54);
  v71 = *((unsigned int *)this + 56) | ((unint64_t)*((unsigned int *)this + 55) << 32);
  *(_QWORD *)v68 = &off_1E42C45A8;
  *(_QWORD *)(v68 + 8) = v71;
  *(_DWORD *)(v68 + 16) = v70;
  *(_QWORD *)(v68 + 20) = v71;
  *(_DWORD *)(v68 + 28) = v70;
  v73 = *((_QWORD *)this + 38);
  v72 = *((_QWORD *)this + 39);
  *(_QWORD *)(v68 + 32) = 0;
  *(_QWORD *)(v68 + 40) = v73;
  *(_QWORD *)(v68 + 48) = v72;
  if (v72)
  {
    v74 = (unint64_t *)(v72 + 8);
    do
      v75 = __ldxr(v74);
    while (__stxr(v75 + 1, v74));
  }
  *(_QWORD *)(v68 + 152) = 0;
  *(_OWORD *)(v68 + 136) = 0u;
  *(_OWORD *)(v68 + 120) = 0u;
  *(_OWORD *)(v68 + 104) = 0u;
  *(_OWORD *)(v68 + 88) = 0u;
  *(_OWORD *)(v68 + 72) = 0u;
  *(_OWORD *)(v68 + 56) = 0u;
  *(_BYTE *)(v68 + 160) = 1;
  *(_DWORD *)(v68 + 164) = 0;
  v76 = (_QWORD *)operator new();
  *v76 = &off_1E42E87F8;
  v76[1] = 0;
  v76[2] = 0;
  v76[3] = v69;
  v77 = (std::__shared_weak_count *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 29) = v69;
  *((_QWORD *)this + 30) = v76;
  if (v77)
  {
    v78 = (unint64_t *)&v77->__shared_owners_;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  v80 = *((_QWORD *)this + 29);
  v82 = *((_QWORD *)this + 36);
  v81 = *((_QWORD *)this + 37);
  if (v81)
  {
    v83 = (unint64_t *)(v81 + 8);
    do
      v84 = __ldxr(v83);
    while (__stxr(v84 + 1, v83));
  }
  v85 = *(std::__shared_weak_count **)(v80 + 96);
  *(_QWORD *)(v80 + 88) = v82;
  *(_QWORD *)(v80 + 96) = v81;
  if (v85)
  {
    v86 = (unint64_t *)&v85->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v88 = *((_QWORD *)this + 29);
  v90 = *((_QWORD *)this + 31);
  v89 = *((_QWORD *)this + 32);
  if (v89)
  {
    v91 = (unint64_t *)(v89 + 8);
    do
      v92 = __ldxr(v91);
    while (__stxr(v92 + 1, v91));
  }
  v93 = *(std::__shared_weak_count **)(v88 + 64);
  *(_QWORD *)(v88 + 56) = v90;
  *(_QWORD *)(v88 + 64) = v89;
  if (v93)
  {
    v94 = (unint64_t *)&v93->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
      v96 = *((_QWORD *)this + 34);
      if (!v96)
        goto LABEL_117;
      goto LABEL_116;
    }
  }
  v96 = *((_QWORD *)this + 34);
  if (v96)
  {
LABEL_116:
    v97 = *((_QWORD *)this + 29);
    *(_QWORD *)(v97 + 20) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v96 + 16))(v96);
    *(_DWORD *)(v97 + 28) = v98;
  }
LABEL_117:
  v135 = *((_QWORD *)this + 1);
  LOBYTE(v134[0]) = 1;
  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v135 + 8) + 112) + 8) + 24))(v139);
  v99 = operator new(0x20uLL);
  *v99 = &off_1E42D8510;
  v99[1] = v134;
  v99[2] = this;
  v99[3] = &v135;
  *((_QWORD *)&v144 + 1) = v99;
  v140 = 0;
  v141 = 0;
  (*(void (**)(_QWORD, uint8_t *, unint64_t *))(*(_QWORD *)v139[0] + 16))(v139[0], buf, &v140);
  v100 = (std::__shared_weak_count *)v141;
  if (v141)
  {
    v101 = (unint64_t *)(v141 + 8);
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  v103 = (uint8_t *)*((_QWORD *)&v144 + 1);
  if (*((uint8_t **)&v144 + 1) == buf)
  {
    v104 = 4;
    v103 = buf;
  }
  else
  {
    if (!*((_QWORD *)&v144 + 1))
      goto LABEL_127;
    v104 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v103 + 8 * v104))();
LABEL_127:
  if (!LOBYTE(v134[0]))
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v105 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v105, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19F029000, v105, OS_LOG_TYPE_ERROR, "RoadTile isn't setup correct", buf, 2u);
    }

    v106 = (std::__shared_weak_count *)*((_QWORD *)this + 30);
    *((_QWORD *)this + 29) = 0;
    *((_QWORD *)this + 30) = 0;
    if (v106)
    {
      v107 = (unint64_t *)&v106->__shared_owners_;
      do
        v108 = __ldaxr(v107);
      while (__stlxr(v108 - 1, v107));
      if (!v108)
      {
        ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
        std::__shared_weak_count::__release_weak(v106);
      }
    }
    (*(void (**)(altitude::RoadLoadJob *))(*(_QWORD *)this + 16))(this);
  }
  v109 = *((_QWORD *)this + 38);
  if (v109)
  {
    v110 = *((_QWORD *)this + 33);
    v140 = 0;
    v141 = 0;
    v142 = *(_OWORD *)(v109 + 136);
    (*(void (**)(uint8_t *__return_ptr, uint64_t, unint64_t *))(*(_QWORD *)v110 + 144))(buf, v110, &v140);
    *(_DWORD *)&buf[4] = *(_DWORD *)(*((_QWORD *)this + 38) + 152);
    *(_DWORD *)&buf[12] = altitude::GeoResourceManager::getVersionForGEOType(v135, *(unsigned int *)buf, *(unsigned int *)&buf[4]);
    v111 = (_QWORD **)((char *)this + 320);
    v112 = std::__tree<altitude::TileKey>::__find_equal<altitude::TileKey>((uint64_t)this + 320, &v140, (unsigned int *)buf);
    if (!*v112)
    {
      v124 = v112;
      v125 = (char *)operator new(0x40uLL);
      v126 = v144;
      *(_OWORD *)(v125 + 28) = *(_OWORD *)buf;
      *(_OWORD *)(v125 + 44) = v126;
      v127 = v140;
      *(_QWORD *)v125 = 0;
      *((_QWORD *)v125 + 1) = 0;
      *((_QWORD *)v125 + 2) = v127;
      *v124 = (uint64_t)v125;
      v128 = (_QWORD *)**v111;
      if (v128)
      {
        *v111 = v128;
        v125 = (char *)*v124;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 41), (uint64_t *)v125);
      ++*((_QWORD *)this + 42);
      v113 = *((_QWORD *)this + 36);
      if (!v113)
        goto LABEL_150;
      goto LABEL_141;
    }
  }
  v113 = *((_QWORD *)this + 36);
  if (v113)
  {
LABEL_141:
    v114 = *(int32x2_t *)(v113 + 36);
    v115 = *(_DWORD *)(v113 + 32);
    v116 = *((_DWORD *)this + 50);
    VersionForGEOType = altitude::GeoResourceManager::getVersionForGEOType(v135, v116, *((unsigned int *)this + 51));
    v118 = (_QWORD **)((char *)this + 320);
    *(_DWORD *)buf = v116;
    *(_DWORD *)&buf[4] = 0;
    *(_DWORD *)&buf[8] = 0;
    *(_DWORD *)&buf[12] = VersionForGEOType;
    *(int32x2_t *)&v144 = vrev64_s32(v114);
    *((_QWORD *)&v144 + 1) = v115;
    v119 = std::__tree<altitude::TileKey>::__find_equal<altitude::TileKey>((uint64_t)this + 320, &v140, (unsigned int *)buf);
    if (!*v119)
    {
      v120 = v119;
      v121 = (char *)operator new(0x40uLL);
      *(_OWORD *)(v121 + 28) = *(_OWORD *)buf;
      *(_OWORD *)(v121 + 44) = v144;
      v122 = v140;
      *(_QWORD *)v121 = 0;
      *((_QWORD *)v121 + 1) = 0;
      *((_QWORD *)v121 + 2) = v122;
      *v120 = (uint64_t)v121;
      v123 = (_QWORD *)**v118;
      if (v123)
      {
        *v118 = v123;
        v121 = (char *)*v120;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 41), (uint64_t *)v121);
      ++*((_QWORD *)this + 42);
    }
  }
LABEL_150:
  pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
  v129 = (*((_DWORD *)this + 40) & 2) == 0;
  pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
  *((_BYTE *)this + 188) = v129;
  pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
  *((_DWORD *)this + 40) |= 1u;
  pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
  if (v139[0])
  {
    v130 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v139[0] + 24))(v139[0]);
    v131 = v139[0];
    v139[0] = 0;
    *(_QWORD *)buf = v131;
    (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v130 + 48))(v130, buf);
    v132 = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    if (v132)
      (*(void (**)(uint64_t))(*(_QWORD *)v132 + 8))(v132);
    v133 = v139[0];
    v139[0] = 0;
    if (v133)
      (*(void (**)(uint64_t))(*(_QWORD *)v133 + 8))(v133);
  }
}

void sub_19FE4893C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  std::pair<std::shared_ptr<altitude::GEOTileDataPrivate>,karo::AsyncRequestManager::RequestHandle>::~pair((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19FE48950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  std::pair<std::shared_ptr<altitude::GEOTileDataPrivate>,karo::AsyncRequestManager::RequestHandle>::~pair((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19FE48964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  ggl::Loader::~Loader((ggl::Loader *)va);
  _Unwind_Resume(a1);
}

void sub_19FE48988(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t altitude::RoadLoadJob::succeeded(altitude::RoadLoadJob *this)
{
  return *((unsigned __int8 *)this + 188);
}

void std::__function::__func<altitude::RoadLoadJob::jobStep(void)::{lambda(ggl::ResourceAccessor *)#1},std::allocator<altitude::RoadLoadJob::jobStep(void)::{lambda(ggl::ResourceAccessor *)#1}>,void ()(ggl::ResourceAccessor *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<altitude::RoadLoadJob::jobStep(void)::{lambda(ggl::ResourceAccessor *)#1},std::allocator<altitude::RoadLoadJob::jobStep(void)::{lambda(ggl::ResourceAccessor *)#1}>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E42D8510;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<altitude::RoadLoadJob::jobStep(void)::{lambda(ggl::ResourceAccessor *)#1},std::allocator<altitude::RoadLoadJob::jobStep(void)::{lambda(ggl::ResourceAccessor *)#1}>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42D8510;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<altitude::RoadLoadJob::jobStep(void)::{lambda(ggl::ResourceAccessor *)#1},std::allocator<altitude::RoadLoadJob::jobStep(void)::{lambda(ggl::ResourceAccessor *)#1}>,void ()(ggl::ResourceAccessor *)>::operator()(uint64_t a1, uint64_t *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  uint64_t v11;
  uint64_t v12;
  md::realistic::RoadRenderLayer *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  _QWORD *v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  float v40;
  float v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  __int128 v49;
  __int128 v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  int *v54;
  _DWORD *v55;
  int *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  int v63;
  int *v64;
  std::__shared_weak_count *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  int v76;
  int v77;
  uint64_t v78;
  int v79;
  int v80;
  unsigned int v81;
  unsigned int v82;
  int v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  _BYTE *v87;
  int v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  double v101;
  uint64_t v102;
  int64x2_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned __int8 v107;
  float v108;
  double v109;
  NSObject *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  double v115;
  double v116;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  double *v125;
  unint64_t v126;
  double v127;
  double v128;
  unint64_t v129;
  double *v130;
  double v131;
  double v132;
  double v133;
  double v134;
  double v135;
  double v136;
  double v137;
  double v138;
  BOOL v139;
  double *v140;
  double v141;
  double v142;
  double v143;
  uint64_t v144;
  double *v145;
  double v146;
  double v147;
  double v148;
  double v149;
  double v150;
  double v151;
  double v152;
  BOOL v153;
  uint64_t v154;
  double *v155;
  double v156;
  double v157;
  double v158;
  double v159;
  double v160;
  double v161;
  BOOL v162;
  uint64_t v163;
  uint64_t v164;
  _QWORD *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  float64_t v183;
  double v184;
  double v185;
  float v191;
  double v192;
  double v193;
  double v194;
  int v195;
  int v196;
  _WORD *v197;
  float v198;
  double v199;
  float v200;
  uint64_t v201;
  float32x2_t v202;
  float v203;
  float32x2_t v204;
  float v205;
  float v206;
  float v207;
  int v209;
  _WORD *v210;
  float v211;
  double v212;
  float v213;
  float v214;
  uint64_t v215;
  float32x2_t v216;
  float v217;
  float32x2_t v218;
  float v219;
  float v220;
  float v221;
  int v222;
  _WORD *v223;
  float v224;
  double v225;
  float v226;
  float v227;
  float v228;
  uint64_t v229;
  float32x2_t v230;
  float v231;
  float32x2_t v232;
  float v233;
  float v234;
  float v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  std::mutex *v240;
  _QWORD *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t *v253;
  uint64_t *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  float64_t v263;
  uint64_t v264;
  float64_t v265;
  float64_t v266;
  float64_t v267;
  float64_t v268;
  float64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  float64_t v276;
  float64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  uint8_t buf[8];
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  float64x2_t v300;
  double v301;
  uint64_t v302;
  uint64_t v303;
  double v304;
  float64x2_t v305;
  double v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  float64x2_t v316;
  double v317;
  double v318;
  double v319;
  double v320;
  double v321;
  float64x2_t v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  int v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;

  v11 = *a2;
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 232);
  v13 = *(md::realistic::RoadRenderLayer **)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a1 + 24) + 8) + 40) + 16);
  v14 = *(_QWORD *)(v12 + 88);
  v15 = *(_DWORD *)(v12 + 16);
  pthread_mutex_lock(*(pthread_mutex_t **)v14);
  v17 = *(_QWORD *)(v14 + 8);
  v16 = *(_QWORD *)(v14 + 16);
  v243 = v11;
  if (v17 != v16)
  {
    while (*(_DWORD *)v17 != v15)
    {
      v17 += 24;
      if (v17 == v16)
        goto LABEL_25;
    }
    v18 = *(std::__shared_weak_count **)(v17 + 16);
    if (v18)
    {
      v19 = std::__shared_weak_count::lock(v18);
      v20 = v19;
      if (v19 && *(_QWORD *)(v17 + 8))
      {
        *(_QWORD *)&v21 = *(_QWORD *)(v17 + 8);
        *((_QWORD *)&v21 + 1) = v19;
        v287 = v21;
        goto LABEL_56;
      }
    }
    else
    {
      v20 = 0;
    }
    v22 = v17 + 24;
    v23 = *(_QWORD *)(v14 + 16);
    if (v17 + 24 != v23)
    {
      do
      {
        *(_DWORD *)v17 = *(_DWORD *)(v17 + 24);
        v26 = *(_OWORD *)(v17 + 32);
        *(_QWORD *)(v17 + 32) = 0;
        *(_QWORD *)(v17 + 40) = 0;
        v27 = *(std::__shared_weak_count **)(v17 + 16);
        *(_OWORD *)(v17 + 8) = v26;
        if (v27)
          std::__shared_weak_count::__release_weak(v27);
        v24 = v17 + 24;
        v25 = v17 + 48;
        v17 += 24;
      }
      while (v25 != v23);
      v22 = *(_QWORD *)(v14 + 16);
      v17 = v24;
    }
    while (v22 != v17)
    {
      v28 = *(std::__shared_weak_count **)(v22 - 8);
      if (v28)
        std::__shared_weak_count::__release_weak(v28);
      v22 -= 24;
    }
    *(_QWORD *)(v14 + 16) = v17;
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v30 = __ldaxr(p_shared_owners);
      while (__stlxr(v30 - 1, p_shared_owners));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
LABEL_25:
  v31 = operator new();
  v32 = *(_QWORD *)(v14 + 32);
  v33 = *(_DWORD *)(v14 + 40);
  *(_QWORD *)v31 = 850045863;
  *(_OWORD *)(v31 + 8) = 0u;
  *(_OWORD *)(v31 + 24) = 0u;
  *(_OWORD *)(v31 + 40) = 0u;
  *(_QWORD *)(v31 + 80) = 0;
  *(_QWORD *)(v31 + 88) = 0;
  *(_OWORD *)(v31 + 120) = 0u;
  *(_OWORD *)(v31 + 136) = 0u;
  *(_OWORD *)(v31 + 152) = 0u;
  *(_QWORD *)(v31 + 168) = 0;
  *(_QWORD *)(v31 + 56) = 0;
  *(_QWORD *)(v31 + 64) = v32;
  *(_DWORD *)(v31 + 72) = v33;
  v34 = (_QWORD *)operator new();
  v34[1] = 0;
  *v34 = &off_1E42E86A8;
  v34[2] = 0;
  v34[3] = v31;
  *(_QWORD *)(v31 + 136) = v14;
  v43 = *(_QWORD *)(v14 + 104);
  v42 = *(_QWORD *)(v14 + 112);
  if (v42)
  {
    v44 = (unint64_t *)(v42 + 8);
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
  }
  v46 = *(std::__shared_weak_count **)(v31 + 128);
  *(_QWORD *)(v31 + 120) = v43;
  *(_QWORD *)(v31 + 128) = v42;
  if (v46)
  {
    v47 = (unint64_t *)&v46->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  altitude::RoadSuperTile::initialize((altitude::RoadSuperTile *)v31, v15, v13, v35, v36, v37, v38, v39, v40, v41);
  *(_QWORD *)&v49 = v31;
  *((_QWORD *)&v49 + 1) = v34;
  v287 = v49;
  *(_QWORD *)&v50 = v31;
  *((_QWORD *)&v50 + 1) = v34;
  v51 = v34 + 2;
  do
    v52 = __ldxr(v51);
  while (__stxr(v52 + 1, v51));
  v54 = *(int **)(v14 + 16);
  v53 = *(_QWORD *)(v14 + 24);
  if ((unint64_t)v54 >= v53)
  {
    v56 = *(int **)(v14 + 8);
    v57 = 0xAAAAAAAAAAAAAAABLL * (((char *)v54 - (char *)v56) >> 3) + 1;
    if (v57 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v286 = v50;
    v58 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v53 - (_QWORD)v56) >> 3);
    if (2 * v58 > v57)
      v57 = 2 * v58;
    if (v58 >= 0x555555555555555)
      v59 = 0xAAAAAAAAAAAAAAALL;
    else
      v59 = v57;
    if (v59 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v60 = (char *)operator new(24 * v59);
    v61 = &v60[8 * (((char *)v54 - (char *)v56) >> 3)];
    v62 = &v60[24 * v59];
    *(_DWORD *)v61 = v15;
    *(_OWORD *)(v61 + 8) = v286;
    v55 = v61 + 24;
    if (v54 == v56)
    {
      *(_QWORD *)(v14 + 8) = v61;
      *(_QWORD *)(v14 + 16) = v55;
      *(_QWORD *)(v14 + 24) = v62;
      v11 = v243;
    }
    else
    {
      v11 = v243;
      do
      {
        v63 = *(v54 - 6);
        v54 -= 6;
        *((_DWORD *)v61 - 6) = v63;
        v61 -= 24;
        *(_OWORD *)(v61 + 8) = *(_OWORD *)(v54 + 2);
        *((_QWORD *)v54 + 1) = 0;
        *((_QWORD *)v54 + 2) = 0;
      }
      while (v54 != v56);
      v54 = *(int **)(v14 + 8);
      v64 = *(int **)(v14 + 16);
      *(_QWORD *)(v14 + 8) = v61;
      *(_QWORD *)(v14 + 16) = v55;
      *(_QWORD *)(v14 + 24) = v62;
      while (v64 != v54)
      {
        v65 = (std::__shared_weak_count *)*((_QWORD *)v64 - 1);
        if (v65)
          std::__shared_weak_count::__release_weak(v65);
        v64 -= 6;
      }
    }
    if (v54)
      operator delete(v54);
  }
  else
  {
    *v54 = v15;
    v55 = v54 + 6;
    *((_QWORD *)v54 + 1) = v31;
    *((_QWORD *)v54 + 2) = v34;
  }
  *(_QWORD *)(v14 + 16) = v55;
LABEL_56:
  pthread_mutex_unlock(*(pthread_mutex_t **)v14);
  v66 = *(std::__shared_weak_count **)(v12 + 80);
  *(_OWORD *)(v12 + 72) = v287;
  if (v66)
  {
    v67 = (unint64_t *)&v66->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  v69 = *(_QWORD *)(v12 + 72);
  v70 = *(_DWORD *)(v12 + 16);
  v71 = *(_DWORD *)(v69 + 72);
  v72 = v70 - v71;
  if (v70 == v71)
  {
    v73 = 0;
    v85 = 0;
    v78 = *(_QWORD *)(v69 + 152);
  }
  else
  {
    v73 = 0;
    v74 = *(_DWORD *)(v12 + 12) - (*(_DWORD *)(v69 + 68) << v72);
    v75 = *(_DWORD *)(v12 + 8) - (*(_DWORD *)(v69 + 64) << v72);
    v76 = ~v71 + v70;
    v77 = 2 * v76;
    do
    {
      v73 += (v75 >> v76 << v77) + (2 << v77) * (v74 >> v76);
      v75 -= v75 >> v76 << v76;
      v74 -= v74 >> v76 << v76;
      --v76;
      v77 -= 2;
    }
    while (v76 != -1);
    v78 = *(_QWORD *)(v69 + 152);
    if (v72)
    {
      v79 = 0;
      v80 = *(_DWORD *)(v69 + 64);
      v81 = *(_DWORD *)(v12 + 12) - (*(_DWORD *)(v69 + 68) << v72);
      v82 = *(_DWORD *)(v12 + 8) - (v80 << v72);
      v83 = ~v71 + v70;
      v84 = 2 * v83;
      do
      {
        v79 += (v82 >> v83 << v84) + (2 << v84) * (v81 >> v83);
        v82 -= v82 >> v83 << v83;
        v81 -= v81 >> v83 << v83;
        --v83;
        v84 -= 2;
      }
      while (v83 != -1);
      v85 = v79;
    }
    else
    {
      v85 = 0;
    }
  }
  v86 = v78 + 72 * v73;
  v88 = *(unsigned __int8 *)(v86 + 24);
  v87 = (_BYTE *)(v86 + 24);
  v89 = 1;
  if (!v88)
  {
    *v87 = 1;
    v90 = operator new();
    v91 = v90;
    v92 = *(_QWORD *)(v12 + 88);
    v93 = *(_QWORD *)(v92 + 32);
    LODWORD(v92) = *(_DWORD *)(v92 + 40);
    *(_QWORD *)v90 = off_1E42C4D10;
    *(_QWORD *)(v90 + 8) = v93;
    *(_DWORD *)(v90 + 16) = v92;
    *(_OWORD *)(v90 + 24) = 0u;
    *(_OWORD *)(v90 + 40) = 0u;
    *(_QWORD *)(v90 + 88) = 0;
    *(_WORD *)(v90 + 96) = 257;
    v94 = *(_QWORD *)(v12 + 40);
    v95 = *(_QWORD *)(v12 + 48);
    if (v95)
    {
      v96 = (unint64_t *)(v95 + 8);
      do
        v97 = __ldxr(v96);
      while (__stxr(v97 + 1, v96));
      v98 = *(std::__shared_weak_count **)(v90 + 48);
      *(_QWORD *)(v90 + 40) = v94;
      *(_QWORD *)(v90 + 48) = v95;
      if (v98)
      {
        v99 = (unint64_t *)&v98->__shared_owners_;
        do
          v100 = __ldaxr(v99);
        while (__stlxr(v100 - 1, v99));
        if (!v100)
        {
          ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
          std::__shared_weak_count::__release_weak(v98);
        }
      }
    }
    else
    {
      *(_QWORD *)(v90 + 40) = v94;
      *(_QWORD *)(v90 + 48) = 0;
    }
    v101 = 1.0 / (double)(1 << *(_DWORD *)(v91 + 16));
    v102 = *(_QWORD *)(v91 + 8);
    v103.i64[0] = (int)v102;
    v103.i64[1] = SHIDWORD(v102);
    *(float64x2_t *)(v91 + 104) = vmulq_n_f64(vcvtq_f64_s64(v103), v101);
    *(double *)(v91 + 120) = v101;
    *(double *)(v91 + 128) = v101;
    *(_QWORD *)(v12 + 32) = v91;
    (*(void (**)(uint64_t, float))(*(_QWORD *)v91 + 48))(v91, 1.0);
    v104 = v78 + 72 * v73;
    v105 = *(_QWORD *)(v104 + 32);
    v106 = *(_QWORD *)(v104 + 40);
    if (v105 == v106)
    {
      v107 = 0;
    }
    else
    {
      v107 = 0;
      v2 = -3.40282337e38;
      do
      {
        v108 = *(double *)(v105 + 16);
        v109 = v108;
        v107 |= v109 <= -3.40282337e38;
        (*(void (**)(_QWORD, uint64_t, BOOL))(**(_QWORD **)(v12 + 32) + 16))(*(_QWORD *)(v12 + 32), v105, v109 > -3.40282337e38);
        v105 += 24;
      }
      while (v105 != v106);
    }
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v12 + 32) + 8))(*(_QWORD *)(v12 + 32)))
    {
      if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
      v110 = GEOGetVectorKitVKDefaultLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19F029000, v110, OS_LOG_TYPE_ERROR, "Failed to get height for road points", buf, 2u);
      }
      v89 = 0;
      goto LABEL_191;
    }
    v111 = *(_QWORD *)(v12 + 72);
    if (((*(_DWORD *)(v12 + 16) > 13) & v107) == 1)
    {
      v112 = *(_QWORD *)(v111 + 144);
      v113 = *(_QWORD *)(v112 + 8);
      v114 = *(_QWORD *)(v112 + 16);
      if (v113 != v114)
      {
        v115 = *(double *)(v111 + 96);
        v116 = *(double *)(v111 + 104);
        v117 = *(double *)(v111 + 112);
        v118 = 1.0 / sqrt(v115 * v115 + v116 * v116 + v117 * v117);
        v119 = v118 * v115;
        v120 = v118 * v116;
        v121 = v118 * v117;
        do
        {
          v122 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v113 + 504) + 8 * v85);
          v123 = *(_QWORD *)(v122 + 416);
          v124 = *(_QWORD *)(v122 + 424);
          while (v123 != v124)
          {
            v126 = *(_QWORD *)(*(_QWORD *)v123 + 48);
            v125 = *(double **)(*(_QWORD *)v123 + 56);
            if (v126 >= 2)
            {
              v128 = v125[1];
              v127 = v125[2];
              v129 = v126 - 1;
              v130 = v125 + 5;
              v131 = *v125;
              do
              {
                v132 = v131;
                v133 = v128;
                v134 = v127;
                v131 = *(v130 - 2);
                v128 = *(v130 - 1);
                v127 = *v130;
                v135 = *v130 - v134;
                v136 = v119 * (v131 - v132) + v120 * (v128 - v133) + v121 * v135;
                v137 = sqrt((v131 - v132 - v136 * v119) * (v131 - v132 - v136 * v119)+ (v128 - v133 - v136 * v120) * (v128 - v133 - v136 * v120)+ (v135 - v136 * v121) * (v135 - v136 * v121));
                if (v137 >= 0.01)
                {
                  v138 = v136 / v137;
                  v139 = v138 <= 0.7 || v136 <= 4.0;
                  if (!v139 && v138 > 0.0)
                  {
                    v131 = v131 - v136 * v119;
                    v128 = v128 - v136 * v120;
                    v127 = v127 - v136 * v121;
                    *(v130 - 2) = v131;
                    *(v130 - 1) = v128;
                    *v130 = v127;
                  }
                }
                v130 += 3;
                --v129;
              }
              while (v129);
            }
            if ((int)v126 >= 2)
            {
              v140 = &v125[3 * v126];
              v142 = *(v140 - 2);
              v141 = *(v140 - 1);
              v143 = *(v140 - 3);
              v144 = (v126 - 2);
              v145 = &v125[3 * v144];
              v147 = *v145;
              v146 = v145[1];
              v148 = v145[2];
              v149 = *v145 - v143;
              v150 = v119 * v149 + v120 * (v146 - v142) + v121 * (v148 - v141);
              v151 = sqrt((v149 - v150 * v119) * (v149 - v150 * v119)+ (v146 - v142 - v150 * v120) * (v146 - v142 - v150 * v120)+ (v148 - v141 - v150 * v121) * (v148 - v141 - v150 * v121));
              if (v151 >= 0.01)
              {
                v152 = v150 / v151;
                v153 = v152 <= 0.7 || v150 <= 4.0;
                if (!v153 && v152 > 0.0)
                {
                  v147 = v147 - v150 * v119;
                  v146 = v146 - v150 * v120;
                  v148 = v148 - v150 * v121;
                  *v145 = v147;
                  v145[1] = v146;
                  v145[2] = v148;
                }
              }
              v154 = 3 * v144;
              while (v154 * 8)
              {
                v155 = &v125[v154];
                v156 = v125[v154 - 3];
                v157 = v125[v154 - 2];
                v158 = v125[v154 - 1];
                v159 = v119 * (v156 - v147) + v120 * (v157 - v146) + v121 * (v158 - v148);
                v160 = sqrt((v156 - v147 - v159 * v119) * (v156 - v147 - v159 * v119)+ (v157 - v146 - v159 * v120) * (v157 - v146 - v159 * v120)+ (v158 - v148 - v159 * v121) * (v158 - v148 - v159 * v121));
                if (v160 >= 0.01)
                {
                  v161 = v159 / v160;
                  v162 = v161 <= 0.7 || v159 <= 4.0;
                  if (!v162 && v161 > 0.0)
                  {
                    v156 = v156 - v159 * v119;
                    v157 = v157 - v159 * v120;
                    v158 = v158 - v159 * v121;
                    *(v155 - 3) = v156;
                    *(v155 - 2) = v157;
                    *(v155 - 1) = v158;
                  }
                }
                v154 -= 3;
                v148 = v158;
                v146 = v157;
                v147 = v156;
              }
            }
            v123 += 8;
          }
          v113 += 8;
        }
        while (v113 != v114);
      }
    }
    v240 = (std::mutex *)v111;
    std::mutex::lock((std::mutex *)v111);
    v163 = *(_QWORD *)(*(_QWORD *)(v12 + 72) + 144);
    v164 = *(_QWORD *)(v163 + 8);
    v242 = *(_QWORD *)(v163 + 16);
    if (v164 == v242)
    {
LABEL_190:
      std::mutex::unlock(v240);
      v89 = 1;
      goto LABEL_191;
    }
    v241 = (_QWORD *)(v78 + 72 * v73 + 16);
    while (1)
    {
      v165 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)v164 + 504) + 8 * *v241);
      v166 = **(_QWORD **)(v165[56] + 64);
      v167 = *(_QWORD *)(v166 + 8);
      v168 = v167 * *v165;
      v250 = v164;
      v247 = v167 * v165[1];
      if (v247 == v168)
        v252 = 0;
      else
        v252 = v11 && *(_BYTE *)(v166 + 17) != 2
             ? (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 56))(v11, v166, v168)
             : *(_QWORD *)(v166 + 72) + v168;
      v169 = v165[2];
      v171 = v165[4];
      v170 = v165[5];
      if (v170 == v171)
      {
        v170 = v165[3];
      }
      else
      {
        if (v171 < v169)
          v169 = v165[4];
        if (v165[3] > v170)
          v170 = v165[3];
      }
      v172 = *(_QWORD *)(v165[56] + 96);
      v173 = *(_QWORD *)(v172 + 8);
      v248 = v168;
      v249 = v166;
      v245 = v173 * v169;
      v246 = v172;
      v244 = v173 * v170;
      if (v173 * v170 == v173 * v169)
        v251 = 0;
      else
        v251 = v11 && *(_BYTE *)(v172 + 17) != 2
             ? (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 56))(v11)
             : *(_QWORD *)(v172 + 72) + v173 * v169;
      v174 = (uint64_t *)v165[52];
      v253 = (uint64_t *)v165[53];
      if (v174 != v253)
        break;
LABEL_180:
      v11 = v243;
      if (v251 && v244 != v245 && v243 && *(_BYTE *)(v246 + 17) != 2)
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v243 + 64))(v243, v251, v246, v245, v244, 1, 1);
      if (v252 && v247 != v248 && v243 && *(_BYTE *)(v249 + 17) != 2)
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v243 + 64))(v243, v252, v249, v248, v247, 1, 1);
      v164 = v250 + 8;
      if (v250 + 8 == v242)
        goto LABEL_190;
    }
    v175 = v252;
    v176 = v251 + 2 * v165[2] - 2 * v169;
    while (1)
    {
      v254 = v174;
      v177 = *v174;
      v309 = 0uLL;
      v325 = 0uLL;
      v293 = 0uLL;
      v290 = 0uLL;
      v178 = *(_QWORD *)(v177 + 48);
      v285 = v178 - 1;
      if (v178 != 1)
        break;
LABEL_149:
      v174 = v254 + 1;
      v175 += (*(_QWORD *)(*v254 + 8) - *(_QWORD *)*v254) << 6;
      v176 += 2 * (*(_QWORD *)(*v254 + 24) - *(_QWORD *)(*v254 + 16));
      if (v254 + 1 == v253)
        goto LABEL_180;
    }
    v179 = 0;
    v180 = 0;
    v181 = 0;
    v284 = v178 - 2;
    while (1)
    {
      v182 = v181 == 0;
      if (v284 == v181)
        v182 |= 2u;
      v326 = v182;
      md::Ribbons::PolylineSegment::calculate((uint64_t)buf, v177, v181);
      if (v181)
      {
        if (vabdd_f64(v300.f64[0], v316.f64[0]) >= 1.0e-10)
        {
          v184 = v301;
          v183 = v316.f64[1];
          v185 = v317;
        }
        else
        {
          v183 = v316.f64[1];
          v184 = v301;
          v185 = v317;
          if (vabdd_f64(v300.f64[1], v316.f64[1]) < 1.0e-10 && vabdd_f64(v301, v317) < 1.0e-10)
          {
            v308 = v292;
            v309 = v293;
            v307 = v291;
            v324 = v289;
            v325 = v290;
            v323 = v288;
            *(_QWORD *)buf = v283;
            v295 = v282;
            v296 = v281;
            v297 = v280;
            v298 = v279;
            v299 = v278;
            v300.f64[0] = v268;
            v300.f64[1] = v266;
            v301 = v2;
            v302 = v287;
            v303 = v286;
            v304 = v5;
            v305.f64[0] = v277;
            v305.f64[1] = v276;
            v306 = v8;
            v310 = v275;
            v311 = v274;
            v312 = v273;
            v313 = v272;
            v314 = v271;
            v315 = v270;
            v316.f64[0] = v265;
            v316.f64[1] = v263;
            v317 = v3;
            v318 = v6;
            v319 = v7;
            v320 = v9;
            v321 = v4;
            v322.f64[0] = v269;
            v322.f64[1] = v267;
            v326 = v166;
            v327 = v264;
            v328 = v262;
            v329 = v261;
            v330 = v260;
            v331 = v259;
            v332 = v257;
            v333 = v256;
            v334 = v255;
            v335 = v258;
            __asm { FMOV            V0.2S, #1.0 }
            if ((v166 & 1) == 0)
              goto LABEL_166;
            goto LABEL_160;
          }
        }
        v282 = v295;
        v283 = *(_QWORD *)buf;
        v280 = v297;
        v281 = v296;
        v278 = v299;
        v279 = v298;
        *(_QWORD *)&v287 = v302;
        *(_QWORD *)&v286 = v303;
        v5 = v304;
        v276 = v305.f64[1];
        v277 = v305.f64[0];
        v8 = v306;
        v291 = v307;
        v292 = v308;
        v293 = v309;
        v275 = v310;
        v274 = v311;
        v273 = v312;
        v272 = v313;
        v271 = v314;
        v270 = v315;
        v6 = v318;
        v7 = v319;
        v9 = v320;
        v4 = v321;
        v268 = v300.f64[0];
        v269 = v322.f64[0];
        v266 = v300.f64[1];
        v267 = v322.f64[1];
        v290 = v325;
        v288 = v323;
        v289 = v324;
        LODWORD(v166) = v326;
        v263 = v183;
        v264 = v327;
        v262 = v328;
        v3 = v185;
        v265 = v316.f64[0];
        v2 = v184;
      }
      else
      {
        v282 = v295;
        v283 = *(_QWORD *)buf;
        v280 = v297;
        v281 = v296;
        v278 = v299;
        v279 = v298;
        v266 = v300.f64[1];
        v268 = v300.f64[0];
        v2 = v301;
        *(_QWORD *)&v287 = v302;
        *(_QWORD *)&v286 = v303;
        v5 = v304;
        v276 = v305.f64[1];
        v277 = v305.f64[0];
        v292 = v308;
        v293 = v309;
        v291 = v307;
        v8 = v306;
        v274 = v311;
        v275 = v310;
        v272 = v313;
        v273 = v312;
        v270 = v315;
        v271 = v314;
        v3 = v317;
        v6 = v318;
        v7 = v319;
        v9 = v320;
        v4 = v321;
        v267 = v322.f64[1];
        v269 = v322.f64[0];
        v289 = v324;
        v290 = v325;
        v288 = v323;
        LODWORD(v166) = v326;
        v264 = v327;
        v265 = v316.f64[0];
        v262 = v328;
        v263 = v316.f64[1];
      }
      v260 = v330;
      v261 = v329;
      v256 = v333;
      v257 = v332;
      v255 = v334;
      v258 = v335;
      v259 = v331;
      __asm { FMOV            V0.2S, #1.0 }
      if ((v166 & 1) == 0)
      {
LABEL_166:
        v195 = *(unsigned __int8 *)(v177 + 72);
        if ((v166 & 2) == 0)
          goto LABEL_173;
        goto LABEL_172;
      }
LABEL_160:
      if (*(_BYTE *)(v177 + 72))
      {
        v191 = 2.0;
        v192 = 0.5;
        v193 = *(double *)&v287;
        v194 = *(double *)&v286;
      }
      else
      {
        v196 = v180 + *(_DWORD *)v177;
        v197 = (_WORD *)(v176 + 2 * v179);
        *v197 = v196;
        v197[1] = v196 + 1;
        v197[2] = v196 + 2;
        v197[3] = v196 + 1;
        v197[4] = v196 + 3;
        v179 += 6;
        v197[5] = v196 + 2;
        v198 = *(double *)&v307;
        v191 = 2.0;
        v192 = 0.5;
        v199 = fminf(v198, 2.0) * 0.5;
        v200 = v2 - *(double *)(v163 + 248);
        v201 = v175 + (v180 << 6);
        v202 = vcvt_f32_f64(vsubq_f64(v300, *(float64x2_t *)(v163 + 232)));
        *(float32x2_t *)v201 = v202;
        *(float *)(v201 + 8) = v200;
        v203 = v199 * v8;
        v204 = vcvt_f32_f64(vmulq_n_f64(v305, v199));
        *(float32x2_t *)(v201 + 32) = v204;
        *(float *)(v201 + 40) = v203;
        v193 = *(double *)&v287;
        v205 = *(double *)&v287;
        v194 = *(double *)&v286;
        v206 = *(double *)&v286;
        v207 = v5;
        *(float *)(v201 + 16) = v205;
        *(float *)(v201 + 20) = v206;
        *(float *)(v201 + 24) = v207;
        *(float32x2_t *)(v201 + 64) = v202;
        *(float *)(v201 + 72) = v200;
        *(float32x2_t *)(v201 + 96) = v204;
        *(float *)(v201 + 104) = v203;
        *(float *)(v201 + 80) = v205;
        *(float *)(v201 + 84) = v206;
        *(float *)(v201 + 88) = v207;
        v180 += 2;
        *(_QWORD *)(v201 + 44) = 3212836864;
        *(_DWORD *)(v201 + 52) = 0;
        __asm { FMOV            V1.4S, #1.0 }
        *(_QWORD *)(v201 + 108) = _Q1;
        *(_DWORD *)(v201 + 116) = 0;
      }
      v209 = v180 + *(_DWORD *)v177;
      v210 = (_WORD *)(v176 + 2 * v179);
      *v210 = v209;
      v210[1] = v209 + 1;
      v210[2] = v209 + 2;
      v210[3] = v209 + 1;
      v210[4] = v209 + 3;
      v179 += 6;
      v210[5] = v209 + 2;
      v211 = *(double *)&v307;
      v212 = fminf(v211, v191) * v192;
      v195 = *(unsigned __int8 *)(v177 + 72);
      v213 = *(double *)&v309;
      if (!*(_BYTE *)(v177 + 72))
        v213 = 0.5;
      v214 = v2 - *(double *)(v163 + 248);
      v215 = v175 + (v180 << 6);
      v216 = vcvt_f32_f64(vsubq_f64(v300, *(float64x2_t *)(v163 + 232)));
      *(float32x2_t *)v215 = v216;
      *(float *)(v215 + 8) = v214;
      v217 = v212 * v8;
      v218 = vcvt_f32_f64(vmulq_n_f64(v305, v212));
      *(float32x2_t *)(v215 + 32) = v218;
      *(float *)(v215 + 40) = v217;
      v219 = v193;
      v220 = v194;
      v221 = v5;
      *(float *)(v215 + 16) = v219;
      *(float *)(v215 + 20) = v220;
      *(float *)(v215 + 24) = v221;
      *(_QWORD *)(v215 + 44) = 3212836864;
      *(float *)(v215 + 52) = v213;
      *(float32x2_t *)(v215 + 64) = v216;
      *(float *)(v215 + 72) = v214;
      *(float32x2_t *)(v215 + 96) = v218;
      *(float *)(v215 + 104) = v217;
      *(float *)(v215 + 80) = v219;
      *(float *)(v215 + 84) = v220;
      *(float *)(v215 + 88) = v221;
      *(_QWORD *)(v215 + 108) = _D0;
      *(float *)(v215 + 116) = v213;
      v180 += 2;
      if ((v166 & 2) == 0)
      {
LABEL_173:
        v222 = v180 + *(_DWORD *)v177;
        v223 = (_WORD *)(v176 + 2 * v179);
        *v223 = v222;
        v223[1] = v222 + 1;
        v223[2] = v222 + 2;
        v223[3] = v222 + 1;
        v223[4] = v222 + 3;
        v179 += 6;
        v223[5] = v222 + 2;
        goto LABEL_174;
      }
LABEL_172:
      if (!v195)
        goto LABEL_173;
LABEL_174:
      v224 = *(double *)&v323;
      v225 = fminf(v224, 2.0) * 0.5;
      if (v195)
      {
        v226 = *(double *)&v325;
        v227 = v226;
      }
      else
      {
        v227 = 0.5;
      }
      v228 = v3 - *(double *)(v163 + 248);
      v229 = v175 + (v180 << 6);
      v230 = vcvt_f32_f64(vsubq_f64(v316, *(float64x2_t *)(v163 + 232)));
      *(float32x2_t *)v229 = v230;
      *(float *)(v229 + 8) = v228;
      v231 = v225 * v4;
      *(float *)(v229 + 32) = v231;
      v232 = vcvt_f32_f64(vmulq_n_f64(v322, v225));
      *(float32x2_t *)(v229 + 36) = v232;
      v233 = v6;
      v234 = v7;
      v235 = v9;
      *(float *)(v229 + 16) = v233;
      *(float *)(v229 + 20) = v234;
      *(float *)(v229 + 24) = v235;
      *(_QWORD *)(v229 + 44) = 3212836864;
      *(float *)(v229 + 52) = v227;
      *(float32x2_t *)(v229 + 64) = v230;
      *(float *)(v229 + 72) = v228;
      *(float *)(v229 + 96) = v231;
      *(float32x2_t *)(v229 + 100) = v232;
      *(float *)(v229 + 80) = v233;
      *(float *)(v229 + 84) = v234;
      *(float *)(v229 + 88) = v235;
      *(_QWORD *)(v229 + 108) = _D0;
      *(float *)(v229 + 116) = v227;
      v236 = v180 + 2;
      if ((v166 & 2) != 0 && !*(_BYTE *)(v177 + 72))
      {
        v237 = v175 + (v236 << 6);
        *(float32x2_t *)v237 = v230;
        *(float *)(v237 + 8) = v228;
        *(float *)(v237 + 32) = v231;
        *(float32x2_t *)(v237 + 36) = v232;
        *(float *)(v237 + 16) = v233;
        *(float *)(v237 + 20) = v234;
        *(float *)(v237 + 24) = v235;
        v238 = v175 + (v180 << 6);
        *(float32x2_t *)(v238 + 192) = v230;
        *(float *)(v238 + 200) = v228;
        *(float *)(v238 + 224) = v231;
        *(float32x2_t *)(v238 + 228) = v232;
        *(float *)(v238 + 208) = v233;
        *(float *)(v238 + 212) = v234;
        *(float *)(v238 + 216) = v235;
        v236 = v180 + 4;
        *(_DWORD *)(v237 + 52) = 1065353216;
        *(_QWORD *)(v237 + 44) = 3212836864;
        *(_DWORD *)(v238 + 244) = 1065353216;
        __asm { FMOV            V0.4S, #1.0 }
        *(_QWORD *)(v238 + 236) = _Q0;
      }
      ++v181;
      v180 = v236;
      if (v285 == v181)
        goto LABEL_149;
    }
  }
LABEL_191:
  **(_BYTE **)(a1 + 8) = v89;
}

void std::__shared_ptr_pointer<altitude::RoadTilePrivate *,std::shared_ptr<altitude::RoadTilePrivate>::__shared_ptr_default_delete<altitude::RoadTilePrivate,altitude::RoadTilePrivate>,std::allocator<altitude::RoadTilePrivate>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<altitude::RoadTilePrivate *,std::shared_ptr<altitude::RoadTilePrivate>::__shared_ptr_default_delete<altitude::RoadTilePrivate,altitude::RoadTilePrivate>,std::allocator<altitude::RoadTilePrivate>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_19FE4A0BC(_Unwind_Exception *a1)
{
  karo::AsyncRequestManager *v1;

  std::__tree<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TileKey,std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TileKey>,true>,std::allocator<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*((_QWORD **)v1 + 9));
  karo::AsyncRequestManager::~AsyncRequestManager(v1);
  _Unwind_Resume(a1);
}

uint64_t altitude::RoadRequestManager::getRoadTile(pthread_mutex_t **a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  std::__shared_weak_count *v8;
  _QWORD *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  std::__shared_weak_count *v33;
  _QWORD *v34;
  std::__shared_weak_count *v35;

  pthread_mutex_lock(a1[5]);
  (*(void (**)(_QWORD **__return_ptr, pthread_mutex_t **, uint64_t, _QWORD))&(*a1)[1].__opaque[24])(&v34, a1, a2, 0);
  v9 = v34;
  v8 = v35;
  v32 = v34;
  v33 = v35;
  if (v35)
  {
    p_shared_owners = (unint64_t *)&v35->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v12 = (*(uint64_t (**)(_QWORD *))(*v9 + 40))(v9);
  if ((v12 & 1) != 0)
  {
    v14 = v9[29];
    v13 = v9[30];
    if (v13)
    {
      v15 = (unint64_t *)(v13 + 8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    v17 = (std::__shared_weak_count *)a3[1];
    *a3 = v14;
    a3[1] = v13;
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v30 = 0;
    v31 = 0;
    v29 = &v30;
    std::set<altitude::TileKey>::insert[abi:nn180100]<std::__tree_const_iterator<altitude::TileKey,std::__tree_node<altitude::TileKey,void *> *,long>>((uint64_t *)&v29, (_QWORD *)v32[40], v32 + 41);
    v20 = a4 + 8;
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a4 + 8));
    v21 = v30;
    *(_QWORD *)a4 = v29;
    *(_QWORD *)(a4 + 8) = v21;
    v22 = v31;
    *(_QWORD *)(a4 + 16) = v31;
    if (v22)
    {
      v21[2] = v20;
      v29 = &v30;
      v30 = 0;
      v31 = 0;
      v21 = 0;
    }
    else
    {
      *(_QWORD *)a4 = v20;
    }
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v21);
    v8 = v33;
  }
  if (v8)
  {
    v23 = (unint64_t *)&v8->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v25 = v35;
  if (v35)
  {
    v26 = (unint64_t *)&v35->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  pthread_mutex_unlock(a1[5]);
  return v12;
}

void sub_19FE4A2B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  pthread_mutex_unlock(*(pthread_mutex_t **)(v5 + 40));
  _Unwind_Resume(a1);
}

void altitude::RoadRequestManager::disable(pthread_mutex_t **this)
{
  altitude::RoadRequestManager *v2;
  uint64_t **v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  char *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  altitude::RoadRequestManager *v14;
  altitude::RoadRequestManager *v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t **v18;
  uint64_t **v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;

  v20 = 0;
  v21 = 0;
  v19 = &v20;
  pthread_mutex_lock(this[5]);
  v2 = (altitude::RoadRequestManager *)this[8];
  if (v2 != (altitude::RoadRequestManager *)(this + 9))
  {
    do
    {
      v5 = *((_QWORD *)v2 + 8);
      v4 = (std::__shared_weak_count *)*((_QWORD *)v2 + 9);
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
      v8 = std::__tree<altitude::TileKey>::__find_equal<altitude::TileKey>((uint64_t)&v19, &v22, (unsigned int *)(v5 + 200));
      if (*v8)
      {
        if (!v4)
          goto LABEL_17;
      }
      else
      {
        v9 = v8;
        v10 = (char *)operator new(0x40uLL);
        *(_OWORD *)(v10 + 28) = *(_OWORD *)(v5 + 200);
        *(_OWORD *)(v10 + 44) = *(_OWORD *)(v5 + 216);
        v11 = v22;
        *(_QWORD *)v10 = 0;
        *((_QWORD *)v10 + 1) = 0;
        *((_QWORD *)v10 + 2) = v11;
        *v9 = (uint64_t)v10;
        if (*v19)
        {
          v19 = (uint64_t **)*v19;
          v10 = (char *)*v9;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v20, (uint64_t *)v10);
        ++v21;
        if (!v4)
        {
LABEL_17:
          v14 = (altitude::RoadRequestManager *)*((_QWORD *)v2 + 1);
          if (!v14)
            goto LABEL_21;
          goto LABEL_18;
        }
      }
      v12 = (unint64_t *)&v4->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (v13)
        goto LABEL_17;
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      v14 = (altitude::RoadRequestManager *)*((_QWORD *)v2 + 1);
      if (!v14)
      {
        do
        {
LABEL_21:
          v15 = (altitude::RoadRequestManager *)*((_QWORD *)v2 + 2);
          v16 = *(_QWORD *)v15 == (_QWORD)v2;
          v2 = v15;
        }
        while (!v16);
        goto LABEL_4;
      }
      do
      {
LABEL_18:
        v15 = v14;
        v14 = *(altitude::RoadRequestManager **)v14;
      }
      while (v14);
LABEL_4:
      v2 = v15;
    }
    while (v15 != (altitude::RoadRequestManager *)(this + 9));
  }
  pthread_mutex_unlock(this[5]);
  v3 = v19;
  if (v19 != &v20)
  {
    do
    {
      (*(void (**)(pthread_mutex_t **, uint64_t))&(*this)->__opaque[40])(this, (uint64_t)v3 + 28);
      v17 = v3[1];
      if (v17)
      {
        do
        {
          v18 = (uint64_t **)v17;
          v17 = (uint64_t *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (uint64_t **)v3[2];
          v16 = *v18 == (uint64_t *)v3;
          v3 = v18;
        }
        while (!v16);
      }
      v3 = v18;
    }
    while (v18 != &v20);
  }
  *((_BYTE *)this + 136) = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v20);
}

void sub_19FE4A4D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _QWORD *a12)
{
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(a12);
  _Unwind_Resume(a1);
}

std::basic_regex<char>::value_type *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(std::basic_regex<char> *this, std::basic_regex<char>::value_type *a2, std::basic_regex<char>::value_type *a3)
{
  uint64_t v3;
  std::basic_regex<char>::value_type *v4;
  uint64_t v6;
  BOOL v7;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  std::basic_regex<char>::value_type *v10;
  std::__owns_one_state<char> *v11;
  unsigned int marked_count;
  unsigned __int8 *v13;
  uint64_t v14;
  BOOL v15;
  std::__owns_one_state<char> *v16;
  std::__node<char> *v17;
  uint64_t v19;

  v3 = (uint64_t)a2;
  if (a2 == a3)
    return a2;
  v4 = a3;
  if (*a2 == 94)
  {
    v6 = operator new();
    v7 = (this->__flags_ & 0x5F0) == 1024;
    end = this->__end_;
    first = end->__first_;
    *(_QWORD *)v6 = &off_1E42DAAB0;
    *(_QWORD *)(v6 + 8) = first;
    *(_BYTE *)(v6 + 16) = v7;
    end->__first_ = (std::__node<char> *)v6;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
    ++v3;
  }
  if ((std::basic_regex<char>::value_type *)v3 != v4)
  {
    while ((std::basic_regex<char>::value_type *)v3 != v4)
    {
      v10 = (std::basic_regex<char>::value_type *)v3;
      v11 = this->__end_;
      marked_count = this->__marked_count_;
      v13 = std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(this, v10, v4);
      if (v13 != (unsigned __int8 *)v10)
      {
        v3 = std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>((uint64_t)this, v13, (unsigned __int8 *)v4, (uint64_t)v11, marked_count + 1, this->__marked_count_ + 1);
        if ((std::basic_regex<char>::value_type *)v3 != v10)
          continue;
      }
      if (v10 + 1 == v4 && *v10 == 36)
      {
        v14 = operator new();
        v15 = (this->__flags_ & 0x5F0) == 1024;
        v16 = this->__end_;
        v17 = v16->__first_;
        *(_QWORD *)v14 = &off_1E42DAB10;
        *(_QWORD *)(v14 + 8) = v17;
        *(_BYTE *)(v14 + 16) = v15;
        v16->__first_ = (std::__node<char> *)v14;
        this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
        return v4;
      }
      v19 = std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
      return (std::basic_regex<char>::value_type *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(v19);
    }
  }
  return v4;
}

void std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(std::basic_regex<char> *a1, std::basic_regex<char>::value_type *a2, std::basic_regex<char>::value_type *a3)
{
  std::__owns_one_state<char> *end;
  std::basic_regex<char>::value_type *v7;
  std::basic_regex<char>::value_type *v8;
  std::__owns_one_state<char> *v9;
  std::basic_regex<char>::value_type *v10;
  std::basic_regex<char>::value_type *v11;
  std::__node<char> *v12;
  std::__node<char> *first;
  std::__node<char> *v14;
  std::__node<char> *v15;
  std::__node<char> *v16;
  std::__node<char> *v17;
  std::basic_regex<char> *v18;
  std::basic_regex<char>::value_type *v19;
  std::basic_regex<char>::value_type *v20;

  end = a1->__end_;
  std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, a2, a3);
  if (v7 == a2)
    goto LABEL_12;
  do
  {
    v8 = v7;
    std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, v7, a3);
  }
  while (v7 != v8);
  if (v8 == a2)
  {
LABEL_12:
    v18 = (std::basic_regex<char> *)std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
    std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(v18, v19, v20);
  }
  else if (v8 != a3)
  {
    while (*v8 == 124)
    {
      v9 = a1->__end_;
      v10 = v8 + 1;
      std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, v8 + 1, a3);
      if (v11 == v8 + 1)
        goto LABEL_12;
      do
      {
        v8 = v11;
        std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, v11, a3);
      }
      while (v11 != v8);
      if (v8 == v10)
        goto LABEL_12;
      v12 = (std::__node<char> *)operator new();
      first = v9->__first_;
      v12[1].__vftable = (std::__node<char>_vtbl *)end->__first_;
      v12[2].__vftable = (std::__node<char>_vtbl *)first;
      v12->__vftable = (std::__node<char>_vtbl *)&off_1E42DA640;
      end->__first_ = v12;
      v9->__first_ = 0;
      v14 = (std::__node<char> *)operator new();
      v15 = a1->__end_->__first_;
      v14[1].__vftable = (std::__node<char>_vtbl *)v15;
      v9->__first_ = v14;
      a1->__end_->__first_ = 0;
      v16 = (std::__node<char> *)operator new();
      v17 = v9->__first_;
      v16->__vftable = (std::__node<char>_vtbl *)&unk_1E42E8EF8;
      v16[1].__vftable = (std::__node<char>_vtbl *)v17;
      a1->__end_->__first_ = v16;
      a1->__end_ = (std::__owns_one_state<char> *)v9->__first_;
      if (v8 == a3)
        return;
    }
  }
}

void std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(std::basic_regex<char> *this, std::basic_regex<char>::value_type *a2, std::basic_regex<char>::value_type *a3)
{
  std::__owns_one_state<char> *end;
  unsigned int marked_count;
  std::basic_regex<char>::value_type *v8;
  int v9;
  std::basic_regex<char>::value_type v10;
  BOOL v11;
  char *v12;
  _BOOL4 v13;
  uint64_t v14;
  std::__node<char> *v15;
  std::__owns_one_state<char> *v16;
  std::__node<char> *first;
  char *v18;
  int v19;
  uint64_t v20;
  BOOL v21;
  std::__owns_one_state<char> *v22;
  std::__node<char> *v23;
  uint64_t (**v24)();
  uint64_t v25;
  unsigned int v26;
  std::__owns_one_state<char> *v27;
  std::__node<char> *v28;
  std::basic_regex<char>::value_type *v29;
  std::basic_regex<char>::value_type *v30;
  uint64_t v31;
  std::__owns_one_state<char> *v32;
  std::__node<char> *v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  _BYTE *v37;

  end = this->__end_;
  marked_count = this->__marked_count_;
  if (a2 != a3)
  {
    switch(*a2)
    {
      case '$':
      case '(':
      case '*':
      case '+':
      case '.':
      case '?':
      case '[':
      case '\\':
      case '^':
      case '{':
      case '|':
        goto LABEL_3;
      case ')':
        if (!this->__open_count_)
          goto LABEL_8;
LABEL_3:
        v8 = a2 + 1;
        if (a2 + 1 == a3)
        {
LABEL_15:
          v9 = *a2;
        }
        else
        {
          v9 = *a2;
          if (v9 == 92)
          {
            v10 = *v8;
            switch(*v8)
            {
              case '$':
              case '(':
              case ')':
              case '*':
              case '+':
              case '.':
              case '?':
              case '[':
              case '\\':
              case '^':
              case '{':
              case '|':
              case '}':
                std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v10);
                v12 = a2 + 2;
                goto LABEL_37;
              default:
                if ((this->__flags_ & 0x1F0) == 0x40)
                {
                  v12 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>(this, v8, a3, 0);
                }
                else
                {
                  v13 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(this, v10);
                  v14 = 2;
                  if (!v13)
                    v14 = 0;
                  v12 = &a2[v14];
                }
                if (v12 == a2)
                  goto LABEL_15;
                goto LABEL_19;
            }
          }
        }
        if (v9 != 46)
          goto LABEL_18;
        v15 = (std::__node<char> *)operator new();
        v16 = this->__end_;
        first = v16->__first_;
        v15->__vftable = (std::__node<char>_vtbl *)&off_1E42DA6D0;
        v15[1].__vftable = (std::__node<char>_vtbl *)first;
        v16->__first_ = v15;
        break;
      default:
LABEL_8:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(this, *a2);
        v12 = a2 + 1;
        goto LABEL_37;
    }
    goto LABEL_27;
  }
LABEL_18:
  std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
  v12 = v18;
LABEL_19:
  if (v12 != a2 || v12 == a3)
  {
LABEL_36:
    if (v12 != a2)
      goto LABEL_37;
    return;
  }
  v19 = *a2;
  switch(v19)
  {
    case '$':
      v20 = operator new();
      v21 = (this->__flags_ & 0x5F0) == 1024;
      v22 = this->__end_;
      v23 = v22->__first_;
      v24 = &off_1E42DAB10;
      goto LABEL_26;
    case '(':
      if ((this->__flags_ & 2) != 0)
      {
        v26 = this->__marked_count_;
      }
      else
      {
        v25 = operator new();
        v26 = this->__marked_count_ + 1;
        this->__marked_count_ = v26;
        v27 = this->__end_;
        v28 = v27->__first_;
        *(_QWORD *)v25 = &off_1E42E8F88;
        *(_QWORD *)(v25 + 8) = v28;
        *(_DWORD *)(v25 + 16) = v26;
        v27->__first_ = (std::__node<char> *)v25;
        this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
      }
      ++this->__open_count_;
      v29 = (std::basic_regex<char>::value_type *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(this);
      if (v29 == a3 || (v30 = v29, *v29 != 41))
      {
        v34 = std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
        std::regex_traits<char>::__lookup_collatename<char const*>(v34, v35, v36, v37);
        return;
      }
      if ((this->__flags_ & 2) == 0)
      {
        v31 = operator new();
        v32 = this->__end_;
        v33 = v32->__first_;
        *(_QWORD *)v31 = &off_1E42E8F58;
        *(_QWORD *)(v31 + 8) = v33;
        *(_DWORD *)(v31 + 16) = v26;
        v32->__first_ = (std::__node<char> *)v31;
        this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
      }
      --this->__open_count_;
      v12 = v30 + 1;
      goto LABEL_36;
    case '^':
      v20 = operator new();
      v21 = (this->__flags_ & 0x5F0) == 1024;
      v22 = this->__end_;
      v23 = v22->__first_;
      v24 = &off_1E42DAAB0;
LABEL_26:
      *(_QWORD *)v20 = v24;
      *(_QWORD *)(v20 + 8) = v23;
      *(_BYTE *)(v20 + 16) = v21;
      v22->__first_ = (std::__node<char> *)v20;
LABEL_27:
      this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
      v12 = a2 + 1;
LABEL_37:
      std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(this, v12, a3, end, marked_count + 1, this->__marked_count_ + 1, v11);
      break;
  }
}

void std::regex_traits<char>::__lookup_collatename<char const*>(uint64_t a1, uint64_t a2, _BYTE *__src, _BYTE *a4)
{
  size_t v4;
  __int128 *p_dst;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  int v17;
  uint64_t v18;
  __int128 *v19;
  size_t v20;
  std::string v21;
  __int128 __dst;
  int64_t v23;

  v4 = a4 - __src;
  if ((unint64_t)(a4 - __src) >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v4 <= 0x16)
  {
    HIBYTE(v23) = (_BYTE)a4 - (_BYTE)__src;
    p_dst = &__dst;
    if (__src == a4)
      goto LABEL_9;
LABEL_8:
    memcpy(p_dst, __src, v4);
    p_dst = (__int128 *)((char *)p_dst + v4);
    goto LABEL_9;
  }
  v10 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v4 | 7) != 0x17)
    v10 = v4 | 7;
  v11 = v10 + 1;
  p_dst = (__int128 *)operator new(v10 + 1);
  *((_QWORD *)&__dst + 1) = v4;
  v23 = v11 | 0x8000000000000000;
  *(_QWORD *)&__dst = p_dst;
  if (__src != a4)
    goto LABEL_8;
LABEL_9:
  *(_BYTE *)p_dst = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (SHIBYTE(v23) < 0)
  {
    if (!*((_QWORD *)&__dst + 1))
      goto LABEL_17;
    v12 = (const char *)__dst;
  }
  else
  {
    if (!HIBYTE(v23))
      return;
    v12 = (const char *)&__dst;
  }
  std::__get_collation_name(&v21, v12);
  *(_OWORD *)a1 = *(_OWORD *)&v21.__r_.__value_.__l.__data_;
  v13 = v21.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a1 + 16) = *((_QWORD *)&v21.__r_.__value_.__l + 2);
  v14 = HIBYTE(v13);
  if ((v14 & 0x80u) != 0)
    v14 = *(_QWORD *)(a1 + 8);
  if (v14)
    goto LABEL_17;
  if ((SHIBYTE(v23) & 0x80000000) == 0)
  {
    v15 = HIBYTE(v23);
    if (HIBYTE(v23) >= 3u)
      return;
    v16 = (char *)&__dst;
    goto LABEL_25;
  }
  v15 = *((_QWORD *)&__dst + 1);
  if (*((_QWORD *)&__dst + 1) < 3uLL)
  {
    v16 = (char *)__dst;
LABEL_25:
    (*(void (**)(std::string *__return_ptr, _QWORD, char *, char *))(**(_QWORD **)(a2 + 16) + 32))(&v21, *(_QWORD *)(a2 + 16), v16, &v16[v15]);
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    *(std::string *)a1 = v21;
    if (*(char *)(a1 + 23) < 0)
    {
      v18 = *(_QWORD *)(a1 + 8);
      if (v18 == 1 || v18 == 12)
      {
        if (&__dst != (__int128 *)a1)
        {
          if (v23 >= 0)
            v19 = &__dst;
          else
            v19 = (__int128 *)__dst;
          if (v23 >= 0)
            v20 = HIBYTE(v23);
          else
            v20 = *((_QWORD *)&__dst + 1);
          std::string::__assign_no_alias<false>((void **)a1, v19, v20);
        }
      }
      else
      {
        **(_BYTE **)a1 = 0;
        *(_QWORD *)(a1 + 8) = 0;
      }
    }
    else
    {
      v17 = *(unsigned __int8 *)(a1 + 23);
      if (v17 == 1 || v17 == 12)
      {
        if (&__dst != (__int128 *)a1)
        {
          if (SHIBYTE(v23) < 0)
          {
            std::string::__assign_no_alias<true>((_QWORD *)a1, (void *)__dst, *((size_t *)&__dst + 1));
          }
          else
          {
            *(_OWORD *)a1 = __dst;
            *(_QWORD *)(a1 + 16) = v23;
          }
        }
      }
      else
      {
        *(_BYTE *)a1 = 0;
        *(_BYTE *)(a1 + 23) = 0;
      }
    }
  }
LABEL_17:
  if (SHIBYTE(v23) < 0)
    operator delete((void *)__dst);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>(std::basic_regex<char> *a1, std::basic_regex<char>::value_type *a2, std::basic_regex<char>::value_type *a3, uint64_t *a4)
{
  std::basic_regex<char>::value_type v5;
  std::basic_regex<char>::value_type v6;
  std::basic_regex<char>::value_type v7;
  std::basic_regex<char>::value_type *v8;
  std::basic_regex<char>::value_type v9;
  int v10;
  std::basic_regex<char>::value_type v11;
  __int16 v12;
  std::basic_regex<char> *v14;

  if (a2 == a3)
  {
LABEL_73:
    v14 = (std::basic_regex<char> *)std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
    return std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(v14);
  }
  v5 = *a2;
  switch(*a2)
  {
    case '"':
    case '/':
    case '\\':
      if (!a4)
      {
        v6 = *a2;
        goto LABEL_52;
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      *(_BYTE *)a4 = v5;
      *((_BYTE *)a4 + 1) = 0;
      return (uint64_t)(a2 + 1);
    case 'a':
      if (!a4)
      {
        v6 = 7;
        goto LABEL_52;
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      v12 = 7;
      goto LABEL_67;
    case 'b':
      if (!a4)
      {
        v6 = 8;
        goto LABEL_52;
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      v12 = 8;
      goto LABEL_67;
    case 'f':
      if (!a4)
      {
        v6 = 12;
        goto LABEL_52;
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      v12 = 12;
      goto LABEL_67;
    case 'n':
      if (!a4)
      {
        v6 = 10;
        goto LABEL_52;
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      v12 = 10;
      goto LABEL_67;
    case 'r':
      if (!a4)
      {
        v6 = 13;
        goto LABEL_52;
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      v12 = 13;
      goto LABEL_67;
    case 't':
      if (!a4)
      {
        v6 = 9;
        goto LABEL_52;
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      v12 = 9;
      goto LABEL_67;
    case 'v':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        v12 = 11;
LABEL_67:
        *(_WORD *)a4 = v12;
        return (uint64_t)(a2 + 1);
      }
      else
      {
        v6 = 11;
LABEL_52:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v6);
        return (uint64_t)(a2 + 1);
      }
    default:
      if ((v5 & 0xF8) != 0x30)
        goto LABEL_73;
      v7 = *a2 - 48;
      v8 = a2 + 1;
      if (a2 + 1 == a3)
      {
        v8 = a3;
LABEL_42:
        if (!a4)
          goto LABEL_17;
        goto LABEL_43;
      }
      if ((*v8 & 0xF8) != 0x30)
        goto LABEL_42;
      v7 = *v8 + 8 * v7 - 48;
      if (a2 + 2 != a3)
      {
        v9 = a2[2];
        v10 = v9 & 0xF8;
        v11 = v9 + 8 * v7 - 48;
        if (v10 == 48)
          v8 = a2 + 3;
        else
          v8 = a2 + 2;
        if (v10 == 48)
          v7 = v11;
        if (!a4)
          goto LABEL_17;
        goto LABEL_43;
      }
      v8 = a3;
      if (!a4)
      {
LABEL_17:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
        return (uint64_t)v8;
      }
LABEL_43:
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      *(_BYTE *)a4 = v7;
      *((_BYTE *)a4 + 1) = 0;
      return (uint64_t)v8;
  }
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(std::basic_regex<char> *this, std::basic_regex<char>::value_type *a2, std::basic_regex<char>::value_type *a3)
{
  int v6;
  std::basic_regex<char>::value_type *v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int marked_count;
  std::__owns_one_state<char> *v13;
  std::__node<char> *v14;
  int v16;
  uint64_t v17;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  unsigned __int8 *v20;
  std::__owns_one_state<char> *v21;
  unsigned int v22;
  unsigned __int8 *v23;
  std::__node<char> *v24;
  uint64_t v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  uint64_t v29;
  int v30;
  int v31;

  if (a2 != a3)
  {
    v7 = a2 + 1;
    v6 = *a2;
    if (a2 + 1 != a3 || v6 != 36)
    {
      if ((v6 - 46) > 0x2E || ((1 << (v6 - 46)) & 0x600000000001) == 0)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v6);
        return (unsigned __int8 *)v7;
      }
      if (v7 == a3 || v6 != 92)
      {
        if (v6 == 46)
        {
          v17 = operator new();
          end = this->__end_;
          first = end->__first_;
          *(_QWORD *)v17 = &off_1E42DA6D0;
          *(_QWORD *)(v17 + 8) = first;
LABEL_39:
          end->__first_ = (std::__node<char> *)v17;
          this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
          return (unsigned __int8 *)v7;
        }
      }
      else
      {
        v16 = *v7;
        if ((v16 - 36) <= 0x3A && ((1 << (v16 - 36)) & 0x580000000000441) != 0)
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v16);
          return (unsigned __int8 *)(a2 + 2);
        }
      }
    }
  }
  std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
  v7 = (std::basic_regex<char>::value_type *)v8;
  if (v8 != (unsigned __int8 *)a2 || v8 == (unsigned __int8 *)a3)
    return (unsigned __int8 *)v7;
  if (a2 + 1 == a3 || *a2 != 92)
    return (unsigned __int8 *)a2;
  v9 = a2[1];
  if (v9 == 40)
  {
    v10 = (uint64_t)(a2 + 2);
    if ((this->__flags_ & 2) != 0)
    {
      marked_count = this->__marked_count_;
    }
    else
    {
      v11 = operator new();
      marked_count = this->__marked_count_ + 1;
      this->__marked_count_ = marked_count;
      v13 = this->__end_;
      v14 = v13->__first_;
      *(_QWORD *)v11 = &off_1E42E8F88;
      *(_QWORD *)(v11 + 8) = v14;
      *(_DWORD *)(v11 + 16) = marked_count;
      v13->__first_ = (std::__node<char> *)v11;
      this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
    }
    do
    {
      if ((std::basic_regex<char>::value_type *)v10 == a3)
        goto LABEL_41;
      v20 = (unsigned __int8 *)v10;
      v21 = this->__end_;
      v22 = this->__marked_count_;
      v23 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(this);
      if (v23 == v20)
        break;
      v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>((uint64_t)this, v23, (unsigned __int8 *)a3, (uint64_t)v21, v22 + 1, this->__marked_count_ + 1);
    }
    while ((unsigned __int8 *)v10 != v20);
    if (v20 + 1 == (unsigned __int8 *)a3 || *v20 != 92 || v20[1] != 41)
    {
LABEL_41:
      std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
      goto LABEL_42;
    }
    v7 = (std::basic_regex<char>::value_type *)&v20[2 * (v20[1] == 41)];
    if ((this->__flags_ & 2) != 0)
      return (unsigned __int8 *)v7;
    v17 = operator new();
    end = this->__end_;
    v24 = end->__first_;
    *(_QWORD *)v17 = &off_1E42E8F58;
    *(_QWORD *)(v17 + 8) = v24;
    *(_DWORD *)(v17 + 16) = marked_count;
    goto LABEL_39;
  }
  if ((v9 & 0xF8) != 0x30 && (v9 & 0xFE) != 0x38 || (v9 - 49) > 8)
    return (unsigned __int8 *)a2;
  if (v9 - 48 <= this->__marked_count_)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, v9 - 48);
    return (unsigned __int8 *)(a2 + 2);
  }
LABEL_42:
  v26 = std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
  return (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>(v26, v27, v28, v29, v30, v31);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, int a5, int a6)
{
  unsigned __int8 *v6;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  unsigned __int8 *v19;
  int v20;
  int v21;
  unsigned __int8 *v22;
  int v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;

  v6 = a2;
  if (a2 == a3)
    return (uint64_t)v6;
  v11 = *a2;
  if (v11 == 42)
  {
    v12 = (_QWORD *)operator new();
    v13 = *(_QWORD *)(a1 + 56);
    v14 = *(_QWORD *)(v13 + 8);
    v12[1] = v14;
    *(_QWORD *)(v13 + 8) = 0;
    v15 = operator new();
    v16 = *(_DWORD *)(a1 + 32);
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(a4 + 8);
    *(_QWORD *)(v15 + 16) = v12;
    *(_QWORD *)v15 = &off_1E42E8FB8;
    *(_OWORD *)(v15 + 24) = xmmword_19FFB5ED0;
    *(_DWORD *)(v15 + 40) = v16;
    *(_DWORD *)(v15 + 44) = a5;
    *(_DWORD *)(v15 + 48) = a6;
    *(_BYTE *)(v15 + 52) = 1;
    *(_QWORD *)(a4 + 8) = 0;
    v17 = (_QWORD *)operator new();
    *v17 = &off_1E42DA8A0;
    v17[1] = v15;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v17;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(v15 + 16);
    *(_QWORD *)(a4 + 8) = v15;
    ++*(_DWORD *)(a1 + 32);
    return (uint64_t)++v6;
  }
  if (a2 + 1 == a3 || v11 != 92 || a2[1] != 123)
    return (uint64_t)v6;
  v19 = &a2[2 * (a2[1] == 123)];
  if (v19 == a3)
    goto LABEL_44;
  v20 = *v19;
  if ((v20 & 0xF8) != 0x30 && (v20 & 0xFE) != 0x38)
    goto LABEL_44;
  v21 = v20 - 48;
  v22 = v19 + 1;
  if (v19 + 1 == a3)
  {
LABEL_16:
    v22 = a3;
  }
  else
  {
    while (1)
    {
      v23 = *v22;
      if ((v23 & 0xF8) != 0x30 && (v23 & 0xFE) != 0x38)
        break;
      if (v21 >= 214748364)
        goto LABEL_44;
      v21 = v23 + 10 * v21 - 48;
      if (++v22 == a3)
        goto LABEL_16;
    }
  }
  if (v22 == v19)
    goto LABEL_44;
  if (v22 == a3)
    goto LABEL_41;
  v24 = v22 + 1;
  v25 = *v22;
  if (v25 != 44)
  {
    if (v24 != a3 && v25 == 92 && *v24 == 125)
    {
      v6 = v22 + 2;
      v37 = v21;
      v38 = (_QWORD *)operator new();
      v39 = *(_QWORD *)(a1 + 56);
      v40 = *(_QWORD *)(v39 + 8);
      v38[1] = v40;
      *(_QWORD *)(v39 + 8) = 0;
      v33 = operator new();
      v34 = v33;
      v35 = *(_DWORD *)(a1 + 32);
      v41 = *(_QWORD *)(a4 + 8);
      *(_QWORD *)v33 = &off_1E42E8FB8;
      *(_QWORD *)(v33 + 8) = v41;
      *(_QWORD *)(v33 + 16) = v38;
      *(_QWORD *)(v33 + 24) = v37;
      *(_QWORD *)(v33 + 32) = v37;
      goto LABEL_43;
    }
    goto LABEL_41;
  }
  if (v24 == a3)
    goto LABEL_41;
  v26 = *v24;
  if ((v26 & 0xF8) != 0x30 && (v26 & 0xFE) != 0x38)
  {
    v27 = -1;
    goto LABEL_24;
  }
  v24 = v22 + 2;
  if (v22 + 2 == a3)
  {
LABEL_41:
    std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
    goto LABEL_42;
  }
  v27 = v26 - 48;
  while (1)
  {
    v26 = *v24;
    if ((v26 & 0xF8) != 0x30 && (v26 & 0xFE) != 0x38)
      break;
    if (v27 >= 214748364)
      goto LABEL_44;
    v27 = v26 + 10 * v27 - 48;
    if (++v24 == a3)
      goto LABEL_41;
  }
LABEL_24:
  if (v24 == a3 || v24 + 1 == a3 || v26 != 92 || v24[1] != 125)
    goto LABEL_41;
  v6 = &v24[2 * (v24[1] == 125)];
  if (v27 == -1)
  {
LABEL_42:
    v42 = v21;
    v43 = (_QWORD *)operator new();
    v44 = *(_QWORD *)(a1 + 56);
    v45 = *(_QWORD *)(v44 + 8);
    v43[1] = v45;
    *(_QWORD *)(v44 + 8) = 0;
    v33 = operator new();
    v34 = v33;
    v35 = *(_DWORD *)(a1 + 32);
    v46 = *(_QWORD *)(a4 + 8);
    *(_QWORD *)v33 = &off_1E42E8FB8;
    *(_QWORD *)(v33 + 8) = v46;
    *(_QWORD *)(v33 + 16) = v43;
    *(_QWORD *)(v33 + 24) = v42;
    *(_QWORD *)(v33 + 32) = -1;
    goto LABEL_43;
  }
  if (v27 >= v21)
  {
    v28 = v21;
    v29 = v27;
    v30 = (_QWORD *)operator new();
    v31 = *(_QWORD *)(a1 + 56);
    v32 = *(_QWORD *)(v31 + 8);
    v30[1] = v32;
    *(_QWORD *)(v31 + 8) = 0;
    v33 = operator new();
    v34 = v33;
    v35 = *(_DWORD *)(a1 + 32);
    v36 = *(_QWORD *)(a4 + 8);
    *(_QWORD *)v33 = &off_1E42E8FB8;
    *(_QWORD *)(v33 + 8) = v36;
    *(_QWORD *)(v33 + 16) = v30;
    *(_QWORD *)(v33 + 24) = v28;
    *(_QWORD *)(v33 + 32) = v29;
LABEL_43:
    *(_DWORD *)(v33 + 40) = v35;
    *(_DWORD *)(v33 + 44) = a5;
    *(_DWORD *)(v33 + 48) = a6;
    *(_BYTE *)(v33 + 52) = 1;
    *(_QWORD *)(a4 + 8) = 0;
    v47 = (_QWORD *)operator new();
    *v47 = &off_1E42DA8A0;
    v47[1] = v34;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v47;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(v34 + 16);
    *(_QWORD *)(a4 + 8) = v34;
    ++*(_DWORD *)(a1 + 32);
    return (uint64_t)v6;
  }
LABEL_44:
  v48 = std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
  return std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(v48);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(uint64_t a1, char *a2, char *a3)
{
  char *v3;
  int v6;
  char *v7;
  BOOL v8;
  char *v9;
  int v11;
  char *v12;
  unsigned int marked_count;
  unsigned int v14;
  std::basic_regex<char> *v15;
  BOOL v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (**v21)();
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::basic_regex<char> *v27;
  std::basic_regex<char> v28;

  v3 = a2;
  if (a2 == a3)
    return (uint64_t)v3;
  v6 = *a2;
  if (v6 > 91)
  {
    if (v6 == 92)
    {
      if (a2 + 1 != a3)
      {
        v23 = a2[1];
        if (v23 == 66)
        {
          v24 = operator new();
          v26 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          *(_QWORD *)v24 = &off_1E42DA760;
          *(_QWORD *)(v24 + 8) = v26;
          std::locale::locale((std::locale *)(v24 + 16), (const std::locale *)a1);
          *(_OWORD *)(v24 + 24) = *(_OWORD *)(a1 + 8);
          *(_BYTE *)(v24 + 40) = 1;
        }
        else
        {
          if (v23 != 98)
            return (uint64_t)v3;
          v24 = operator new();
          v25 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          *(_QWORD *)v24 = &off_1E42DA760;
          *(_QWORD *)(v24 + 8) = v25;
          std::locale::locale((std::locale *)(v24 + 16), (const std::locale *)a1);
          *(_OWORD *)(v24 + 24) = *(_OWORD *)(a1 + 8);
          *(_BYTE *)(v24 + 40) = 0;
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v24;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        v3 += 2;
      }
      return (uint64_t)v3;
    }
    if (v6 != 94)
      return (uint64_t)v3;
    v17 = operator new();
    v18 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v19 = *(_QWORD *)(a1 + 56);
    v20 = *(_QWORD *)(v19 + 8);
    v21 = &off_1E42DAAB0;
LABEL_19:
    *(_QWORD *)v17 = v21;
    *(_QWORD *)(v17 + 8) = v20;
    *(_BYTE *)(v17 + 16) = v18;
    *(_QWORD *)(v19 + 8) = v17;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    return (uint64_t)++v3;
  }
  if (v6 == 36)
  {
    v17 = operator new();
    v18 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v19 = *(_QWORD *)(a1 + 56);
    v20 = *(_QWORD *)(v19 + 8);
    v21 = &off_1E42DAB10;
    goto LABEL_19;
  }
  v8 = v6 == 40;
  v7 = a2 + 1;
  v8 = !v8 || v7 == a3;
  if (v8)
    return (uint64_t)v3;
  v8 = *v7 == 63;
  v9 = a2 + 2;
  if (!v8 || v9 == a3)
    return (uint64_t)v3;
  v11 = *v9;
  if (v11 == 33)
  {
    std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:nn180100]((uint64_t)&v28);
    v28.__flags_ = *(_DWORD *)(a1 + 24);
    v12 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v28, v3 + 3, a3);
    marked_count = v28.__marked_count_;
    v14 = *(_DWORD *)(a1 + 28);
    v15 = (std::basic_regex<char> *)a1;
    v16 = 1;
    goto LABEL_28;
  }
  if (v11 != 61)
    return (uint64_t)v3;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:nn180100]((uint64_t)&v28);
  v28.__flags_ = *(_DWORD *)(a1 + 24);
  v12 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v28, v3 + 3, a3);
  marked_count = v28.__marked_count_;
  v14 = *(_DWORD *)(a1 + 28);
  v15 = (std::basic_regex<char> *)a1;
  v16 = 0;
LABEL_28:
  std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(v15, &v28, v16, v14);
  *(_DWORD *)(a1 + 28) += marked_count;
  if (v12 != a3 && *v12 == 41)
  {
    v3 = v12 + 1;
    std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&v28.__traits_.__loc_);
    return (uint64_t)v3;
  }
  v27 = (std::basic_regex<char> *)std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
  return std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(v27);
}

void std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(std::basic_regex<char> *this, std::basic_regex<char>::value_type *a2, char *a3)
{
  int v5;
  int *p_open_count;
  char *v8;
  std::__node<char> *v9;
  std::__owns_one_state<char> *v10;
  std::__node<char> *v11;
  char *v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int marked_count;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  char *v19;
  uint64_t v20;
  std::__owns_one_state<char> *v21;
  std::__node<char> *v22;
  char *v23;
  int v24;
  uint64_t v25;
  std::__node<char> *v26;
  std::basic_regex<_CharT, _Traits>::flag_type flags;
  char v28;
  int v29;
  std::basic_regex<char> *v30;
  char v31;
  uint64_t v32;
  std::__node<char> *v33;
  std::basic_regex<_CharT, _Traits>::flag_type v34;
  char v35;
  int v36;
  std::basic_regex<char> *v37;
  char v38;
  uint64_t v39;
  std::__node<char> *v40;
  std::basic_regex<_CharT, _Traits>::flag_type v41;
  char v42;
  int v43;
  std::basic_regex<char> *v44;
  char v45;
  std::basic_regex<_CharT, _Traits>::flag_type v46;
  uint64_t v47;
  int v48;
  std::basic_regex<_CharT, _Traits>::flag_type v49;
  std::basic_regex<_CharT, _Traits>::flag_type v50;
  uint64_t v51;
  uint64_t v52;

  if (a2 != a3)
  {
    v5 = *a2;
    switch(*a2)
    {
      case '$':
      case ')':
      case ']':
      case '^':
      case '|':
      case '}':
        return;
      case '(':
        if (a2 + 1 == a3)
          goto LABEL_51;
        if (a2 + 2 != a3 && a2[1] == 63 && a2[2] == 58)
        {
          p_open_count = &this->__open_count_;
          ++this->__open_count_;
          v8 = std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, a2 + 3, a3);
          if (v8 == a3 || *v8 != 41)
            goto LABEL_51;
        }
        else
        {
          if ((this->__flags_ & 2) != 0)
          {
            marked_count = this->__marked_count_;
          }
          else
          {
            v15 = operator new();
            marked_count = this->__marked_count_ + 1;
            this->__marked_count_ = marked_count;
            end = this->__end_;
            first = end->__first_;
            *(_QWORD *)v15 = &off_1E42E8F88;
            *(_QWORD *)(v15 + 8) = first;
            *(_DWORD *)(v15 + 16) = marked_count;
            end->__first_ = (std::__node<char> *)v15;
            this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
          }
          p_open_count = &this->__open_count_;
          ++this->__open_count_;
          v19 = std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, a2 + 1, a3);
          if (v19 == a3 || *v19 != 41)
            goto LABEL_51;
          if ((this->__flags_ & 2) == 0)
          {
            v20 = operator new();
            v21 = this->__end_;
            v22 = v21->__first_;
            *(_QWORD *)v20 = &off_1E42E8F58;
            *(_QWORD *)(v20 + 8) = v22;
            *(_DWORD *)(v20 + 16) = marked_count;
            v21->__first_ = (std::__node<char> *)v20;
            this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
          }
        }
        --*p_open_count;
        return;
      case '*':
      case '+':
      case '?':
      case '{':
        std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
LABEL_51:
        std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
        goto LABEL_52;
      case '.':
        v9 = (std::__node<char> *)operator new();
        v10 = this->__end_;
        v11 = v10->__first_;
        v9->__vftable = (std::__node<char>_vtbl *)&off_1E42E8F28;
        v9[1].__vftable = (std::__node<char>_vtbl *)v11;
        v10->__first_ = v9;
        this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
        return;
      case '[':
        std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
        return;
      case '\\':
        if (v5 != 92)
          return;
        v12 = a2 + 1;
        if (a2 + 1 == a3)
          goto LABEL_53;
        v13 = *v12;
        v14 = v13 - 48;
        if (v13 == 48)
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v14);
          return;
        }
        if ((v13 - 49) > 8)
          goto LABEL_38;
        v23 = a2 + 2;
        if (a2 + 2 == a3)
        {
          v23 = a3;
        }
        else
        {
          while (1)
          {
            v24 = *v23;
            if ((v24 - 48) > 9)
              break;
            if (v14 >= 0x19999999)
              goto LABEL_52;
            ++v23;
            v14 = v24 + 10 * v14 - 48;
            if (v23 == a3)
            {
              v23 = a3;
              break;
            }
          }
          if (!v14)
          {
LABEL_52:
            std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
LABEL_53:
            v52 = std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
            md::StyleSettingsParser::StyleSettingsParser(v52);
            return;
          }
        }
        if (v14 > this->__marked_count_)
          goto LABEL_52;
        std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, v14);
        if (v23 == v12)
        {
LABEL_38:
          switch(*v12)
          {
            case 'D':
              v25 = operator new();
              v26 = this->__end_->__first_;
              flags = this->__flags_;
              v28 = flags & 1;
              v29 = (flags >> 3) & 1;
              v30 = this;
              v31 = 1;
              goto LABEL_44;
            case 'S':
              v32 = operator new();
              v33 = this->__end_->__first_;
              v34 = this->__flags_;
              v35 = v34 & 1;
              v36 = (v34 >> 3) & 1;
              v37 = this;
              v38 = 1;
              goto LABEL_46;
            case 'W':
              v39 = operator new();
              v40 = this->__end_->__first_;
              v41 = this->__flags_;
              v42 = v41 & 1;
              v43 = (v41 >> 3) & 1;
              v44 = this;
              v45 = 1;
              goto LABEL_49;
            case 'd':
              v25 = operator new();
              v26 = this->__end_->__first_;
              v46 = this->__flags_;
              v28 = v46 & 1;
              v29 = (v46 >> 3) & 1;
              v30 = this;
              v31 = 0;
LABEL_44:
              v47 = std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:nn180100](v25, (uint64_t)v30, (uint64_t)v26, v31, v28, v29);
              this->__end_->__first_ = (std::__node<char> *)v47;
              this->__end_ = (std::__owns_one_state<char> *)v47;
              v48 = *(_DWORD *)(v47 + 160) | 0x400;
              goto LABEL_47;
            case 's':
              v32 = operator new();
              v33 = this->__end_->__first_;
              v49 = this->__flags_;
              v35 = v49 & 1;
              v36 = (v49 >> 3) & 1;
              v37 = this;
              v38 = 0;
LABEL_46:
              v47 = std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:nn180100](v32, (uint64_t)v37, (uint64_t)v33, v38, v35, v36);
              this->__end_->__first_ = (std::__node<char> *)v47;
              this->__end_ = (std::__owns_one_state<char> *)v47;
              v48 = *(_DWORD *)(v47 + 160) | 0x4000;
LABEL_47:
              *(_DWORD *)(v47 + 160) = v48;
              break;
            case 'w':
              v39 = operator new();
              v40 = this->__end_->__first_;
              v50 = this->__flags_;
              v42 = v50 & 1;
              v43 = (v50 >> 3) & 1;
              v44 = this;
              v45 = 0;
LABEL_49:
              v51 = std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:nn180100](v39, (uint64_t)v44, (uint64_t)v40, v45, v42, v43);
              this->__end_->__first_ = (std::__node<char> *)v51;
              this->__end_ = (std::__owns_one_state<char> *)v51;
              *(_DWORD *)(v51 + 160) |= 0x500u;
              std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:nn180100](v51, 95);
              break;
            default:
              std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(this, (unsigned __int8 *)a2 + 1, (unsigned __int8 *)a3, 0);
              break;
          }
        }
        break;
      default:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v5);
        return;
    }
  }
}

void md::StyleSettingsParser::StyleSettingsParser(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  std::sub_match<const char *> *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unsigned __int8 **v12;
  std::string v13;
  std::locale v14;
  const std::locale::facet *v15;
  const std::locale::facet *v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 32) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = &off_1E429F8B0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 40) = a1 + 48;
  *(_BYTE *)(a1 + 64) = 0;
  MEMORY[0x1A1AF4C5C](&v14);
  v15 = std::locale::use_facet(&v14, MEMORY[0x1E0DE4A90]);
  v16 = std::locale::use_facet(&v14, MEMORY[0x1E0DE4C08]);
  v17 = 0u;
  v18 = 0u;
  v19 = 0;
  std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>((uint64_t)&v14, "(?:\\/\\/(?:\\\\\\n|[^\\n])*\\n)|(?:\\/\\*(?:\\n|\\r|.)*?\\*\\/)", "");
  if (v4 == "")
  {
    memset(&v13, 0, sizeof(v13));
    v5 = *(unsigned __int8 *)(a2 + 23);
    if ((v5 & 0x80u) == 0)
      v6 = (std::sub_match<const char *> *)a2;
    else
      v6 = *(std::sub_match<const char *> **)a2;
    if ((v5 & 0x80u) != 0)
      v5 = *(_QWORD *)(a2 + 8);
    std::regex_replace[abi:nn180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>(&v13, v6, (std::sub_match<const char *> *)((char *)v6 + v5), (uint64_t)&v14, "");
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    *(std::string *)a1 = v13;
    v7 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
    if (*((_QWORD *)&v18 + 1))
    {
      v8 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    std::locale::~locale(&v14);
  }
  else
  {
    v10 = std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
    md::StyleSettingsParser::parseNode(v10, v11, v12);
  }
}

void md::StyleSettingsParser::parseNode(uint64_t a1, _QWORD *a2, unsigned __int8 **a3)
{
  unsigned __int8 *v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unint64_t v10;
  unint64_t v12;
  unint64_t v13;
  unsigned __int8 *v15;
  unint64_t v16;
  BOOL v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  unint64_t v36;
  _QWORD *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t *v44;
  char *v45;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  void *__p;
  char v81;
  __int128 v82;
  char v83;
  char v84;
  _QWORD v85[2];

  v5 = *a3;
  v6 = (unint64_t)a3[1];
  v7 = v6;
  if (!v6)
  {
LABEL_8:
    v12 = -1;
    goto LABEL_10;
  }
  v8 = a3[1];
  v9 = *a3;
  while (1)
  {
    v10 = *v9;
    if (v10 > 0x3F || ((1 << v10) & 0x100002600) == 0)
      break;
    ++v9;
    if (!--v8)
      goto LABEL_8;
  }
  v12 = v9 - v5;
  do
  {
LABEL_10:
    if (!v7)
    {
      v15 = 0;
      v16 = 0;
      goto LABEL_27;
    }
    v13 = v5[--v7];
  }
  while (v13 <= 0x3F && ((1 << v13) & 0x100002600) != 0);
  v15 = 0;
  if (v12 == -1)
  {
    v16 = 0;
  }
  else
  {
    v16 = 0;
    if (v7 != -1)
    {
      if (v5[v12] == 91 && v5[v7] == 93)
      {
        ++v12;
        --v7;
      }
      v17 = v6 >= v12;
      v18 = v6 - v12;
      if (!v17)
LABEL_109:
        abort();
      v19 = v7 - v12;
      v15 = &v5[v12];
      if (v18 >= v19 + 1)
        v16 = v19 + 1;
      else
        v16 = v18;
    }
  }
LABEL_27:
  v85[0] = v15;
  v85[1] = v16;
  do
  {
    md::StyleSettingsParser::parseNextElement((uint64_t)&__p, a1, 0, (uint64_t)v85);
    if (!v84)
      break;
    if (v83 == 2)
    {
      v20 = operator new();
      *(_BYTE *)(v20 + 8) = 2;
      *(_QWORD *)v20 = &off_1E429DE38;
      *(_QWORD *)(v20 + 24) = 0;
      *(_QWORD *)(v20 + 32) = 0;
      *(_QWORD *)(v20 + 16) = 0;
      md::StyleSettingsParser::parseNode(a1, v20, &v82);
      v22 = (char *)a2[3];
      v29 = a2[4];
      if ((unint64_t)v22 >= v29)
      {
        v30 = (char *)a2[2];
        v31 = (v22 - v30) >> 3;
        v32 = v31 + 1;
        if ((unint64_t)(v31 + 1) >> 61)
          goto LABEL_109;
        v33 = v29 - (_QWORD)v30;
        if (v33 >> 2 > v32)
          v32 = v33 >> 2;
        if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
          v34 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v34 = v32;
        if (v34)
        {
          if (v34 >> 61)
            goto LABEL_110;
          v35 = (char *)operator new(8 * v34);
        }
        else
        {
          v35 = 0;
        }
        v44 = (uint64_t *)&v35[8 * v31];
        v45 = &v35[8 * v34];
        *v44 = v20;
        v37 = v44 + 1;
        if (v22 != v30)
        {
          v57 = v22 - v30 - 8;
          if (v57 <= 0x77
            || &v22[-(v57 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v44
            && &v35[v22 - v30 - (v57 & 0xFFFFFFFFFFFFFFF8) - 8] < v22)
          {
            goto LABEL_113;
          }
          v58 = (v57 >> 3) + 1;
          v59 = &v35[8 * v31 - 16];
          v60 = v22 - 32;
          v61 = v58 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v63 = *(_OWORD *)v60;
            v62 = *((_OWORD *)v60 + 1);
            *(_OWORD *)v60 = 0uLL;
            *((_OWORD *)v60 + 1) = 0uLL;
            v60 -= 32;
            *((_OWORD *)v59 - 1) = v63;
            *(_OWORD *)v59 = v62;
            v59 -= 32;
            v61 -= 4;
          }
          while (v61);
          v44 -= v58 & 0x3FFFFFFFFFFFFFFCLL;
          v22 -= 8 * (v58 & 0x3FFFFFFFFFFFFFFCLL);
          if (v58 != (v58 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_113:
            do
            {
              v64 = *((_QWORD *)v22 - 1);
              v22 -= 8;
              *(_QWORD *)v22 = 0;
              *--v44 = v64;
            }
            while (v22 != v30);
          }
          v22 = (char *)a2[2];
          v65 = (char *)a2[3];
          a2[2] = v44;
          a2[3] = v37;
          a2[4] = v45;
          while (v65 != v22)
          {
            v67 = *((_QWORD *)v65 - 1);
            v65 -= 8;
            v66 = v67;
            *(_QWORD *)v65 = 0;
            if (v67)
              (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
          }
          goto LABEL_103;
        }
        goto LABEL_102;
      }
    }
    else if (v83)
    {
      v20 = operator new();
      *(_BYTE *)(v20 + 8) = 1;
      *(_QWORD *)v20 = &off_1E429F8B0;
      *(_QWORD *)(v20 + 32) = 0;
      *(_QWORD *)(v20 + 24) = 0;
      *(_QWORD *)(v20 + 16) = v20 + 24;
      md::StyleSettingsParser::parseNode(a1, v20, &v82);
      v22 = (char *)a2[3];
      v36 = a2[4];
      if ((unint64_t)v22 >= v36)
      {
        v38 = (char *)a2[2];
        v39 = (v22 - v38) >> 3;
        v40 = v39 + 1;
        if ((unint64_t)(v39 + 1) >> 61)
          goto LABEL_109;
        v41 = v36 - (_QWORD)v38;
        if (v41 >> 2 > v40)
          v40 = v41 >> 2;
        if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8)
          v42 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v42 = v40;
        if (v42)
        {
          if (v42 >> 61)
LABEL_110:
            std::__throw_bad_array_new_length[abi:nn180100]();
          v43 = (char *)operator new(8 * v42);
        }
        else
        {
          v43 = 0;
        }
        v44 = (uint64_t *)&v43[8 * v39];
        v45 = &v43[8 * v42];
        *v44 = v20;
        v37 = v44 + 1;
        if (v22 != v38)
        {
          v68 = v22 - v38 - 8;
          if (v68 <= 0x77
            || &v22[-(v68 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v44
            && &v43[v22 - v38 - (v68 & 0xFFFFFFFFFFFFFFF8) - 8] < v22)
          {
            goto LABEL_114;
          }
          v69 = (v68 >> 3) + 1;
          v70 = &v43[8 * v39 - 16];
          v71 = v22 - 32;
          v72 = v69 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v74 = *(_OWORD *)v71;
            v73 = *((_OWORD *)v71 + 1);
            *(_OWORD *)v71 = 0uLL;
            *((_OWORD *)v71 + 1) = 0uLL;
            v71 -= 32;
            *((_OWORD *)v70 - 1) = v74;
            *(_OWORD *)v70 = v73;
            v70 -= 32;
            v72 -= 4;
          }
          while (v72);
          v44 -= v69 & 0x3FFFFFFFFFFFFFFCLL;
          v22 -= 8 * (v69 & 0x3FFFFFFFFFFFFFFCLL);
          if (v69 != (v69 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_114:
            do
            {
              v75 = *((_QWORD *)v22 - 1);
              v22 -= 8;
              *(_QWORD *)v22 = 0;
              *--v44 = v75;
            }
            while (v22 != v38);
          }
          v22 = (char *)a2[2];
          v76 = (char *)a2[3];
          a2[2] = v44;
          a2[3] = v37;
          a2[4] = v45;
          while (v76 != v22)
          {
            v78 = *((_QWORD *)v76 - 1);
            v76 -= 8;
            v77 = v78;
            *(_QWORD *)v76 = 0;
            if (v78)
              (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
          }
          goto LABEL_103;
        }
LABEL_102:
        a2[2] = v44;
        a2[3] = v37;
        a2[4] = v45;
LABEL_103:
        if (v22)
          operator delete(v22);
        goto LABEL_105;
      }
    }
    else
    {
      v20 = operator new();
      *(_BYTE *)(v20 + 8) = 0;
      *(_QWORD *)v20 = &off_1E429DE58;
      *(_OWORD *)(v20 + 16) = v82;
      v22 = (char *)a2[3];
      v21 = a2[4];
      if ((unint64_t)v22 >= v21)
      {
        v23 = (char *)a2[2];
        v24 = (v22 - v23) >> 3;
        v25 = v24 + 1;
        if ((unint64_t)(v24 + 1) >> 61)
          goto LABEL_109;
        v26 = v21 - (_QWORD)v23;
        if (v26 >> 2 > v25)
          v25 = v26 >> 2;
        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
          v27 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v27 = v25;
        if (v27)
        {
          if (v27 >> 61)
            goto LABEL_110;
          v28 = (char *)operator new(8 * v27);
        }
        else
        {
          v28 = 0;
        }
        v44 = (uint64_t *)&v28[8 * v24];
        v45 = &v28[8 * v27];
        *v44 = v20;
        v37 = v44 + 1;
        if (v22 == v23)
          goto LABEL_102;
        v46 = v22 - v23 - 8;
        if (v46 <= 0x77
          || &v22[-(v46 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v44
          && &v28[v22 - v23 - (v46 & 0xFFFFFFFFFFFFFFF8) - 8] < v22)
        {
          goto LABEL_115;
        }
        v47 = (v46 >> 3) + 1;
        v48 = &v28[8 * v24 - 16];
        v49 = v22 - 32;
        v50 = v47 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v52 = *(_OWORD *)v49;
          v51 = *((_OWORD *)v49 + 1);
          *(_OWORD *)v49 = 0uLL;
          *((_OWORD *)v49 + 1) = 0uLL;
          v49 -= 32;
          *((_OWORD *)v48 - 1) = v52;
          *(_OWORD *)v48 = v51;
          v48 -= 32;
          v50 -= 4;
        }
        while (v50);
        v44 -= v47 & 0x3FFFFFFFFFFFFFFCLL;
        v22 -= 8 * (v47 & 0x3FFFFFFFFFFFFFFCLL);
        if (v47 != (v47 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_115:
          do
          {
            v53 = *((_QWORD *)v22 - 1);
            v22 -= 8;
            *(_QWORD *)v22 = 0;
            *--v44 = v53;
          }
          while (v22 != v23);
        }
        v22 = (char *)a2[2];
        v54 = (char *)a2[3];
        a2[2] = v44;
        a2[3] = v37;
        a2[4] = v45;
        while (v54 != v22)
        {
          v56 = *((_QWORD *)v54 - 1);
          v54 -= 8;
          v55 = v56;
          *(_QWORD *)v54 = 0;
          if (v56)
            (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
        }
        goto LABEL_103;
      }
    }
    *(_QWORD *)v22 = v20;
    v37 = v22 + 8;
LABEL_105:
    a2[3] = v37;
    v79 = *(unsigned __int8 *)(a1 + 64);
    if (v81 < 0)
      operator delete(__p);
  }
  while (!v79);
}

void md::StyleSettingsArrayNode::~StyleSettingsArrayNode(md::StyleSettingsArrayNode *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E429DE38;
  v2 = (_QWORD *)*((_QWORD *)this + 2);
  if (v2)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 3);
    v4 = (void *)*((_QWORD *)this + 2);
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 2);
    }
    *((_QWORD *)this + 3) = v2;
    operator delete(v4);
  }
}

{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E429DE38;
  v2 = (_QWORD *)*((_QWORD *)this + 2);
  if (v2)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 3);
    v4 = (void *)*((_QWORD *)this + 2);
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 2);
    }
    *((_QWORD *)this + 3) = v2;
    operator delete(v4);
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::VenueWallShadow::MeshPipelineState::MeshPipelineState(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD *a4)
{
  unsigned __int8 v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v10;
  char v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int16x8_t v18;
  int32x4_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int16x8_t v22;
  int32x4_t v23;
  int8x16_t v24;
  int32x4_t v25;
  int8x16_t v26;
  int32x4_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int16x8_t v37;
  int32x4_t v38;
  int8x16_t v39;
  int16x8_t v40;
  int32x4_t v41;
  int8x16_t v42;
  int32x4_t v43;
  int8x16_t v44;
  int32x4_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int16x8_t v60;
  int32x4_t v61;
  int8x16_t v62;
  int16x8_t v63;
  int32x4_t v64;
  int8x16_t v65;
  int32x4_t v66;
  int8x16_t v67;
  int32x4_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int16x8_t v75;
  int32x4_t v76;
  int8x16_t v77;
  int16x8_t v78;
  int32x4_t v79;
  int8x16_t v80;
  int32x4_t v81;
  int8x16_t v82;
  int32x4_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  _OWORD *v89;
  ggl::VenueWallShadowShader *v90;
  unsigned __int8 v91;
  unsigned __int8 v92;
  unsigned __int8 v93;
  unsigned __int8 v94;
  unsigned __int8 v95;
  unsigned __int8 v96;
  _QWORD *v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  _BYTE v101[28];

  if ((v5 & 1) == 0)
  {
    v89 = a4;
    v97 = a2;
    v98 = a3;
    a2 = v97;
    a3 = v98;
    a4 = v89;
    if ((_DWORD)v90)
    {
      if ((v91 & 1) == 0)
      {
        if ((_DWORD)v90)
        {
          if ((v94 & 1) == 0
          {
            if ((v96 & 1) == 0
            {
              ggl::MeshTyped<ggl::VenueWall::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::VenueWall::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::VenueWall::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::VenueWall::DefaultVbo>::attributesReflection(void)::r;
            unk_1ECE43E40 = 1;
          }
          ggl::VenueWallShadow::MeshPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::VenueWall::DefaultVbo>::typedReflection(void)::r;
          unk_1EE57C8A0 = &ggl::VenueWallShadow::pipelineDataMeshPipelineDeviceStructs(void)::ref;
          qword_1EE57C8A8 = 0;
          if ((v95 & 1) == 0
          {
            ggl::VenueWallShadow::pipelineDataMeshPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            *(_QWORD *)algn_1EE57C8D8 = ggl::VenueWallShadow::WallShadow::reflection(void)::reflection;
          }
          qword_1EE57C8B0 = (uint64_t)&ggl::VenueWallShadow::pipelineDataMeshPipelineConstantStructs(void)::ref;
          unk_1EE57C8B8 = xmmword_19FFB35C0;
        }
      }
      ggl::VenueWallShadow::MeshPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::VenueWallShadow::MeshPipelineSetup::typedReflection(void)::ref;
      ggl::VenueWallShadowShader::typedReflection(v90);
      qword_1ECE31338 = (uint64_t)&ggl::VenueWallShadowShader::typedReflection(void)::ref;
      if ((v92 & 1) == 0
      {
        ggl::VenueWallShadow::pipelineStateMeshPipelineAttributeStructBinding(void)::attr = 0;
        *(_QWORD *)algn_1EE57C948 = 0;
        qword_1EE57C950 = (uint64_t)"";
        dword_1EE57C958 = 0;
        qword_1EE57C960 = (uint64_t)&ggl::VenueWallShadow::pipelineStateMeshPipelineAttributeBinding_0(void)::attr;
        unk_1EE57C968 = 4;
      }
      qword_1ECE31340 = (uint64_t)&ggl::VenueWallShadow::pipelineStateMeshPipelineAttributeStructBinding(void)::attr;
      *(_QWORD *)algn_1ECE31348 = 1;
      qword_1ECE31350 = 0;
      unk_1ECE31358 = 0;
      qword_1ECE31360 = (uint64_t)&ggl::VenueWallShadow::pipelineStateMeshPipelineDeviceStructBinding(void)::ref;
      unk_1ECE31368 = 0;
      if ((v93 & 1) == 0
      {
        ggl::VenueWallShadow::pipelineStateMeshPipelineConstantStructBinding(void)::ref = 0;
        *(_QWORD *)algn_1EE57C8E8 = 0;
        qword_1EE57C8F0 = (uint64_t)"view";
        dword_1EE57C8F8 = 3;
        qword_1EE57C900 = (uint64_t)&ggl::VenueWallShadow::pipelineStateMeshPipelineConstantViewBinding(void)::reflection;
        unk_1EE57C908 = xmmword_19FFB35A0;
        qword_1EE57C918 = 1;
        unk_1EE57C920 = "wall";
        dword_1EE57C928 = 3;
        qword_1EE57C930 = (uint64_t)&ggl::VenueWallShadow::pipelineStateMeshPipelineConstantWallBinding(void)::reflection;
        unk_1EE57C938 = 2;
      }
      qword_1ECE31370 = (uint64_t)&ggl::VenueWallShadow::pipelineStateMeshPipelineConstantStructBinding(void)::ref;
      *(_QWORD *)algn_1ECE31378 = 2;
      a4 = v89;
      a2 = v97;
      a3 = v98;
    }
  }
  v6 = *a2;
  v7 = (std::__shared_weak_count *)a2[1];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  *(_OWORD *)v101 = *(_OWORD *)a3;
  *(_OWORD *)&v101[12] = *(_OWORD *)(a3 + 12);
  v10 = *(_OWORD *)(a3 + 28);
  v11 = *(_BYTE *)(a3 + 44);
  v99 = *a4;
  v100 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &off_1E42B6760;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = &ggl::VenueWallShadow::MeshPipelineState::typedReflection(void)::ref;
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = v7;
  if (v7)
  {
    v12 = (unint64_t *)&v7->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_BYTE *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 148) = 0;
  *(_QWORD *)(a1 + 140) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 180) = 0;
  *(_QWORD *)(a1 + 196) = 0;
  *(_QWORD *)(a1 + 188) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 228) = 0;
  *(_QWORD *)(a1 + 244) = 0;
  *(_QWORD *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v99;
  *(_OWORD *)(a1 + 272) = v100;
  *(_BYTE *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0x100000001;
  *(_BYTE *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v101;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v101[12];
  *(_OWORD *)(a1 + 92) = v10;
  *(_BYTE *)(a1 + 108) = v11;
  if (v7)
  {
    v14 = (unint64_t *)&v7->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_BYTE *)(a1 + 305) = 0;
  v16 = *(int8x16_t *)(a1 + 320);
  v17 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  v18 = vmovl_high_s8(v17);
  v19 = vmovl_s16(*(int16x4_t *)v18.i8);
  v20.i64[0] = v19.u32[0];
  v20.i64[1] = v19.u32[1];
  v21 = v20;
  v22 = vmovl_s8(*(int8x8_t *)v17.i8);
  v23 = vmovl_s16(*(int16x4_t *)v22.i8);
  *(_QWORD *)a1 = &off_1E42B74C0;
  v20.i64[0] = v23.u32[0];
  v20.i64[1] = v23.u32[1];
  v24 = v20;
  v25 = vmovl_high_s16(v18);
  v20.i64[0] = v25.u32[0];
  v20.i64[1] = v25.u32[1];
  v26 = v20;
  v27 = vmovl_high_s16(v22);
  v20.i64[0] = v27.u32[0];
  v20.i64[1] = v27.u32[1];
  v28 = v20;
  v20.i64[0] = v19.u32[2];
  v20.i64[1] = v19.u32[3];
  v29 = v20;
  v20.i64[0] = v23.u32[2];
  v20.i64[1] = v23.u32[3];
  v30 = v20;
  v20.i64[0] = v25.u32[2];
  v20.i64[1] = v25.u32[3];
  v31 = v20;
  v20.i64[0] = v27.u32[2];
  v20.i64[1] = v27.u32[3];
  v32 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v20);
  v33 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v31);
  v34 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v30);
  v35 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v26);
  v36 = vceqzq_s8(v16);
  v37 = vmovl_high_s8(v36);
  v38 = vmovl_s16(*(int16x4_t *)v37.i8);
  v20.i64[0] = v38.u32[0];
  v20.i64[1] = v38.u32[1];
  v39 = v20;
  v40 = vmovl_s8(*(int8x8_t *)v36.i8);
  v41 = vmovl_s16(*(int16x4_t *)v40.i8);
  v20.i64[0] = v41.u32[0];
  v20.i64[1] = v41.u32[1];
  v42 = v20;
  v43 = vmovl_high_s16(v37);
  v20.i64[0] = v43.u32[0];
  v20.i64[1] = v43.u32[1];
  v44 = v20;
  v45 = vmovl_high_s16(v40);
  v20.i64[0] = v45.u32[0];
  v20.i64[1] = v45.u32[1];
  v46 = v20;
  v20.i64[0] = v38.u32[2];
  v20.i64[1] = v38.u32[3];
  v47 = v20;
  v20.i64[0] = v41.u32[2];
  v20.i64[1] = v41.u32[3];
  v48 = v20;
  v20.i64[0] = v43.u32[2];
  v20.i64[1] = v43.u32[3];
  v49 = v20;
  v20.i64[0] = v45.u32[2];
  v20.i64[1] = v45.u32[3];
  v50 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v49);
  v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v39), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v21));
  v52 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v42), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v24));
  v53 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v44), v35);
  v54 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v46), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v28));
  v55 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v47), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v29));
  v56 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v48), v34);
  v57 = vorrq_s8(v50, v33);
  v58 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v20), v32);
  v59 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  v60 = vmovl_s8(*(int8x8_t *)v59.i8);
  v61 = vmovl_high_s16(v60);
  v20.i64[0] = v61.i32[2];
  v20.i64[1] = v61.i32[3];
  v62 = v20;
  v63 = vmovl_high_s8(v59);
  v64 = vmovl_high_s16(v63);
  v20.i64[0] = v64.i32[2];
  v20.i64[1] = v64.i32[3];
  v65 = v20;
  v66 = vmovl_s16(*(int16x4_t *)v60.i8);
  v20.i64[0] = v66.i32[2];
  v20.i64[1] = v66.i32[3];
  v67 = v20;
  v68 = vmovl_s16(*(int16x4_t *)v63.i8);
  v20.i64[0] = v68.i32[2];
  v20.i64[1] = v68.i32[3];
  v69 = v20;
  v20.i64[0] = v61.i32[0];
  v20.i64[1] = v61.i32[1];
  v70 = v20;
  v20.i64[0] = v64.i32[0];
  v20.i64[1] = v64.i32[1];
  v71 = v20;
  v20.i64[0] = v66.i32[0];
  v20.i64[1] = v66.i32[1];
  v72 = v20;
  v20.i64[0] = v68.i32[0];
  v20.i64[1] = v68.i32[1];
  v73 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v20);
  v74 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  v75 = vmovl_high_s8(v74);
  v76 = vmovl_s16(*(int16x4_t *)v75.i8);
  v20.i64[0] = v76.i32[0];
  v20.i64[1] = v76.i32[1];
  v77 = v20;
  v78 = vmovl_s8(*(int8x8_t *)v74.i8);
  v79 = vmovl_s16(*(int16x4_t *)v78.i8);
  v20.i64[0] = v79.i32[0];
  v20.i64[1] = v79.i32[1];
  v80 = v20;
  v81 = vmovl_high_s16(v75);
  v20.i64[0] = v81.i32[0];
  v20.i64[1] = v81.i32[1];
  v82 = v20;
  v83 = vmovl_high_s16(v78);
  v20.i64[0] = v83.i32[0];
  v20.i64[1] = v83.i32[1];
  v84 = v20;
  v20.i64[0] = v76.i32[2];
  v20.i64[1] = v76.i32[3];
  v85 = v20;
  v20.i64[0] = v79.i32[2];
  v20.i64[1] = v79.i32[3];
  v86 = v20;
  v20.i64[0] = v81.i32[2];
  v20.i64[1] = v81.i32[3];
  v87 = v20;
  v20.i64[0] = v83.i32[2];
  v20.i64[1] = v83.i32[3];
  *(_QWORD *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v80), vbicq_s8((int8x16_t)xmmword_19FFB3170, v72)), v52), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v77), v73), v51)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v84), vbicq_s8((int8x16_t)xmmword_19FFB3190, v70)), v54), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v82), vbicq_s8((int8x16_t)xmmword_19FFB3180, v71)),
                                               v53))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v86), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v67)), v56), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v85), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v69)), v55)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v20), vbicq_s8((int8x16_t)xmmword_19FFB31D0, v62)), v58), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31F0, v87),
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31C0, v65)),
                                               v57)))));
  *(_BYTE *)(a1 + 288) = 1;
  return a1;
}

void ggl::VenueWallShadow::MeshPipelineSetup::~MeshPipelineSetup(ggl::VenueWallShadow::MeshPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::VenueWallShadow::MeshPipelineSetup::constantDataIsEnabled(ggl::VenueWallShadow::MeshPipelineSetup *this, unint64_t a2)
{
  return a2 < 2;
}

uint64_t ggl::VenueWallShadow::MeshPipelineSetup::textureIsEnabled(ggl::VenueWallShadow::MeshPipelineSetup *this)
{
  return 0;
}

void sub_19FE4D204(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FE4D328(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FE4D3F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FE4D550(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void md::ContourLinesTileResourceFetcher::~ContourLinesTileResourceFetcher(id *this)
{
  md::TiledGEOResourceFetcher::~TiledGEOResourceFetcher(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::ContourLinesTileResourceFetcher::tileKey(uint64_t a1, void *a2)
{
  id v2;
  uint64_t v3;

  v2 = a2;
  objc_msgSend(v2, "size");
  v3 = GEOContourLinesTileKeyMake();

  return v3;
}

void sub_19FE4D8CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ggl::ConstantDataTyped<ggl::AnimatableTexture::Variant>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::AnimatableTexture::Variant>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1B08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::AnimatableTexture::Variant>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1B08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17HillshadeFillMask27CompressedMeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17HillshadeFillMask27CompressedMeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D6BC0;
  return result;
}

void std::__function::__func<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_9,std::allocator<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_9>,ggl::HillshadeFillMask::CompressedMeshPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_9,std::allocator<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_9>,ggl::HillshadeFillMask::CompressedMeshPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D1288;
  result[1] = v3;
  return result;
}

_QWORD *std::__function::__func<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_9,std::allocator<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_9>,ggl::HillshadeFillMask::CompressedMeshPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (_QWORD *)operator new();
  v3 = v2;
  v4 = *(_QWORD *)(v1 + 160);
  v5 = *(std::__shared_weak_count **)(v1 + 168);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v2, v4, (uint64_t)v5);
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v2, v4, 0);
  }
  *v3 = &off_1E42BA0E0;
  v10 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v10->__shared_owners_ = 0;
  v11 = (unint64_t *)&v10->__shared_owners_;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1BB0;
  v12 = ggl::BufferData::BufferData((uint64_t)&v10[1], qword_1EE55DE80, 2, 1, 6, 1);
  v10[9].__shared_owners_ = (uint64_t)ggl::HillshadeFillMask::Fill::reflection(void)::reflection;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B93B0;
  v13 = v3[8];
  *(_QWORD *)(v13 + 32) = v12;
  *(_QWORD *)(v13 + 40) = 0;
  v14 = v3[20];
  do
    v15 = __ldxr(v11);
  while (__stxr(v15 + 1, v11));
  v16 = *(std::__shared_weak_count **)(v14 + 40);
  *(_QWORD *)(v14 + 32) = v12;
  *(_QWORD *)(v14 + 40) = v10;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  do
    v19 = __ldaxr(v11);
  while (__stlxr(v19 - 1, v11));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  return v3;
}

uint64_t ggl::ConstantDataTyped<ggl::HillshadeFillMask::Fill>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::HillshadeFillMask::Fill>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::HillshadeFillMask::Fill>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1BB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::HillshadeFillMask::Fill>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1BB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::HillshadeFillMask::Fill>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_11PolygonFill17MeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_11PolygonFill17MeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D6110;
  return result;
}

void std::__function::__func<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_8,std::allocator<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_8>,ggl::PolygonFill::MeshPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_8,std::allocator<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_8>,ggl::PolygonFill::MeshPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D1240;
  result[1] = v3;
  return result;
}

_QWORD *std::__function::__func<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_8,std::allocator<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_8>,ggl::PolygonFill::MeshPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;

  v1 = *(_QWORD **)(a1 + 8);
  v2 = (_QWORD *)operator new();
  v3 = v2;
  v4 = v1[18];
  v5 = (std::__shared_weak_count *)v1[19];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v2, v4, (uint64_t)v5);
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v2, v4, 0);
  }
  *v3 = &off_1E42B5D48;
  v10 = v3[8];
  v11 = v1[121];
  *(_QWORD *)(v10 + 32) = v11;
  *(_QWORD *)(v10 + 40) = 0;
  v12 = v3[20];
  v13 = v1[122];
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = *(std::__shared_weak_count **)(v12 + 40);
  *(_QWORD *)(v12 + 32) = v11;
  *(_QWORD *)(v12 + 40) = v13;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  return v3;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_21PolygonAnimatableFill27CompressedMeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_21PolygonAnimatableFill27CompressedMeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D6E48;
  return result;
}

void std::__function::__func<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_7,std::allocator<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_7>,ggl::PolygonAnimatableFill::CompressedMeshPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_7,std::allocator<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_7>,ggl::PolygonAnimatableFill::CompressedMeshPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D11F8;
  result[1] = v3;
  return result;
}

_QWORD *std::__function::__func<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_7,std::allocator<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_7>,ggl::PolygonAnimatableFill::CompressedMeshPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (_QWORD *)operator new();
  v3 = v2;
  v4 = *(_QWORD *)(v1 + 112);
  v5 = *(std::__shared_weak_count **)(v1 + 120);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v2, v4, (uint64_t)v5);
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v2, v4, 0);
  }
  *v3 = &off_1E42BAD00;
  v10 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v10->__shared_owners_ = 0;
  v11 = (unint64_t *)&v10->__shared_owners_;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1EF8;
  v12 = ggl::BufferData::BufferData((uint64_t)&v10[1], qword_1EE574C30, 2, 1, 6, 1);
  v10[9].__shared_owners_ = (uint64_t)ggl::PolygonAnimatableFill::Fill::reflection(void)::reflection;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9590;
  v13 = v3[8];
  *(_QWORD *)(v13 + 32) = v12;
  *(_QWORD *)(v13 + 40) = 0;
  v14 = v3[20];
  do
    v15 = __ldxr(v11);
  while (__stxr(v15 + 1, v11));
  v16 = *(std::__shared_weak_count **)(v14 + 40);
  *(_QWORD *)(v14 + 32) = v12;
  *(_QWORD *)(v14 + 40) = v10;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  do
    v19 = __ldaxr(v11);
  while (__stlxr(v19 - 1, v11));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  return v3;
}

uint64_t ggl::ConstantDataTyped<ggl::PolygonAnimatableFill::Fill>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::PolygonAnimatableFill::Fill>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::PolygonAnimatableFill::Fill>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1EF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::PolygonAnimatableFill::Fill>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1EF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::PolygonAnimatableFill::Fill>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_6,std::allocator<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_6>,ggl::PolygonFill::CompressedMeshPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_6,std::allocator<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_6>,ggl::PolygonFill::CompressedMeshPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D11B0;
  result[1] = v3;
  return result;
}

_QWORD *std::__function::__func<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_6,std::allocator<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_6>,ggl::PolygonFill::CompressedMeshPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (_QWORD *)operator new();
  v3 = v2;
  v4 = *(_QWORD *)(v1 + 96);
  v5 = *(std::__shared_weak_count **)(v1 + 104);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v2, v4, (uint64_t)v5);
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v2, v4, 0);
  }
  *v3 = &off_1E42B5D98;
  v10 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v10->__shared_owners_ = 0;
  v11 = (unint64_t *)&v10->__shared_owners_;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0FE0;
  v12 = ggl::BufferData::BufferData((uint64_t)&v10[1], qword_1EE571CC8, 2, 1, 6, 1);
  v10[9].__shared_owners_ = (uint64_t)ggl::PolygonFill::Fill::reflection(void)::reflection;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8C90;
  v13 = v3[8];
  *(_QWORD *)(v13 + 32) = v12;
  *(_QWORD *)(v13 + 40) = 0;
  v14 = v3[20];
  do
    v15 = __ldxr(v11);
  while (__stxr(v15 + 1, v11));
  v16 = *(std::__shared_weak_count **)(v14 + 40);
  *(_QWORD *)(v14 + 32) = v12;
  *(_QWORD *)(v14 + 40) = v10;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  do
    v19 = __ldaxr(v11);
  while (__stlxr(v19 - 1, v11));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  return v3;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_11PolygonFill27CompressedMeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_11PolygonFill27CompressedMeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D6158;
  return result;
}

void std::__function::__func<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_5,std::allocator<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_5>,ggl::PolygonFill::CompressedMeshPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_5,std::allocator<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_5>,ggl::PolygonFill::CompressedMeshPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D1168;
  result[1] = v3;
  return result;
}

_QWORD *std::__function::__func<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_5,std::allocator<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_5>,ggl::PolygonFill::CompressedMeshPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (_QWORD *)operator new();
  v3 = v2;
  v4 = *(_QWORD *)(v1 + 80);
  v5 = *(std::__shared_weak_count **)(v1 + 88);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v2, v4, (uint64_t)v5);
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v2, v4, 0);
  }
  *v3 = &off_1E42B5D98;
  v10 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v10->__shared_owners_ = 0;
  v11 = (unint64_t *)&v10->__shared_owners_;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0FE0;
  v12 = ggl::BufferData::BufferData((uint64_t)&v10[1], qword_1EE571CC8, 2, 1, 6, 1);
  v10[9].__shared_owners_ = (uint64_t)ggl::PolygonFill::Fill::reflection(void)::reflection;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8C90;
  v13 = v3[8];
  *(_QWORD *)(v13 + 32) = v12;
  *(_QWORD *)(v13 + 40) = 0;
  v14 = v3[20];
  do
    v15 = __ldxr(v11);
  while (__stxr(v15 + 1, v11));
  v16 = *(std::__shared_weak_count **)(v14 + 40);
  *(_QWORD *)(v14 + 32) = v12;
  *(_QWORD *)(v14 + 40) = v10;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  do
    v19 = __ldaxr(v11);
  while (__stlxr(v19 - 1, v11));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  return v3;
}

void std::__function::__func<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_4,std::allocator<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_4>,void ()(ggl::PolygonAnimatableStroke::MeshPipelineSetup *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_4,std::allocator<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_4>,void ()(ggl::PolygonAnimatableStroke::MeshPipelineSetup *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D1120;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_4,std::allocator<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_4>,void ()(ggl::PolygonAnimatableStroke::MeshPipelineSetup *)>::operator()(uint64_t a1, _QWORD **a2)
{
  uint64_t v2;
  _QWORD *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t *v16;
  unint64_t v17;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *a2;
  v5 = *(_QWORD *)(v2 + 48);
  v4 = *(std::__shared_weak_count **)(v2 + 56);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  if (v5 && **(_QWORD **)(v5 + 40) == v3[1])
  {
    v11 = v3[2];
    if (v11)
      v12 = v11 == v5;
    else
      v12 = 1;
    if (!v12)
      ggl::PipelineSetup::resetData((uint64_t)v3);
    if (v4)
    {
      v13 = (unint64_t *)&v4->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    v8 = (std::__shared_weak_count *)v3[3];
    v3[2] = v5;
    v3[3] = v4;
    if (!v8)
      goto LABEL_22;
    v15 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v15);
    while (__stlxr(v10 - 1, v15));
  }
  else
  {
    v8 = (std::__shared_weak_count *)v3[3];
    v3[2] = 0;
    v3[3] = 0;
    if (!v8)
      goto LABEL_22;
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
  }
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v4)
      return;
    goto LABEL_23;
  }
LABEL_22:
  if (!v4)
    return;
LABEL_23:
  v16 = (unint64_t *)&v4->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void std::__function::__func<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_3,std::allocator<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_3>,ggl::PolygonAnimatableStroke::MeshPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_3,std::allocator<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_3>,ggl::PolygonAnimatableStroke::MeshPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D10D8;
  result[1] = v3;
  return result;
}

_QWORD *std::__function::__func<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_3,std::allocator<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_3>,ggl::PolygonAnimatableStroke::MeshPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (_QWORD *)operator new();
  v3 = v2;
  v4 = *(_QWORD *)(v1 + 48);
  v5 = *(std::__shared_weak_count **)(v1 + 56);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v2, v4, (uint64_t)v5);
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v2, v4, 0);
  }
  *v3 = &off_1E42BB1A0;
  v10 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v10->__shared_owners_ = 0;
  v11 = (unint64_t *)&v10->__shared_owners_;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1DE0;
  v12 = ggl::BufferData::BufferData((uint64_t)&v10[1], qword_1EE5679A8, 2, 1, 6, 1);
  v10[9].__shared_owners_ = (uint64_t)ggl::PolygonCommonStroke::Polygon::reflection(void)::reflection;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B94F0;
  v13 = v3[8];
  *(_QWORD *)(v13 + 32) = v12;
  *(_QWORD *)(v13 + 40) = 0;
  v14 = v3[20];
  do
    v15 = __ldxr(v11);
  while (__stxr(v15 + 1, v11));
  v16 = *(std::__shared_weak_count **)(v14 + 40);
  *(_QWORD *)(v14 + 32) = v12;
  *(_QWORD *)(v14 + 40) = v10;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v19->__shared_owners_ = 0;
  v20 = (unint64_t *)&v19->__shared_owners_;
  v19->__shared_weak_owners_ = 0;
  v19->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2010;
  v21 = ggl::BufferData::BufferData((uint64_t)&v19[1], qword_1EE5518C8, 2, 1, 6, 1);
  v19[9].__shared_owners_ = (uint64_t)ggl::PolygonAnimatableStroke::AnimatablePolygon::reflection(void)::reflection;
  v19[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9630;
  v22 = v3[8];
  *(_QWORD *)(v22 + 64) = v21;
  *(_QWORD *)(v22 + 72) = 0;
  v23 = v3[20];
  do
    v24 = __ldxr(v20);
  while (__stxr(v24 + 1, v20));
  v25 = *(std::__shared_weak_count **)(v23 + 72);
  *(_QWORD *)(v23 + 64) = v21;
  *(_QWORD *)(v23 + 72) = v19;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  do
    v28 = __ldaxr(v20);
  while (__stlxr(v28 - 1, v20));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  do
    v29 = __ldaxr(v11);
  while (__stlxr(v29 - 1, v11));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  return v3;
}

void sub_19FE4EACC(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *v2;
  unint64_t v4;

  do
    v4 = __ldaxr(v2);
  while (__stlxr(v4 - 1, v2));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ggl::ConstantDataTyped<ggl::PolygonAnimatableStroke::AnimatablePolygon>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::PolygonAnimatableStroke::AnimatablePolygon>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::PolygonAnimatableStroke::AnimatablePolygon>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2010;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::PolygonAnimatableStroke::AnimatablePolygon>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2010;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::PolygonAnimatableStroke::AnimatablePolygon>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ggl::ConstantDataTyped<ggl::PolygonCommonStroke::Polygon>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::PolygonCommonStroke::Polygon>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::PolygonCommonStroke::Polygon>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1DE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::PolygonCommonStroke::Polygon>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1DE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::PolygonCommonStroke::Polygon>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17PolygonStrokeMask17MeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17PolygonStrokeMask17MeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D6C08;
  return result;
}

void std::__function::__func<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2,std::allocator<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2>,ggl::PolygonStrokeMask::MeshPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2,std::allocator<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2>,ggl::PolygonStrokeMask::MeshPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D1090;
  result[1] = v3;
  return result;
}

_QWORD *std::__function::__func<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2,std::allocator<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2>,ggl::PolygonStrokeMask::MeshPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (_QWORD *)operator new();
  v3 = v2;
  v4 = *(_QWORD *)(v1 + 32);
  v5 = *(std::__shared_weak_count **)(v1 + 40);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v2, v4, (uint64_t)v5);
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v2, v4, 0);
  }
  *v3 = &off_1E42BA180;
  v10 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v10->__shared_owners_ = 0;
  v11 = (unint64_t *)&v10->__shared_owners_;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1DE0;
  v12 = ggl::BufferData::BufferData((uint64_t)&v10[1], qword_1EE5679A8, 2, 1, 6, 1);
  v10[9].__shared_owners_ = (uint64_t)ggl::PolygonCommonStroke::Polygon::reflection(void)::reflection;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B94F0;
  v13 = v3[8];
  *(_QWORD *)(v13 + 32) = v12;
  *(_QWORD *)(v13 + 40) = 0;
  v14 = v3[20];
  do
    v15 = __ldxr(v11);
  while (__stxr(v15 + 1, v11));
  v16 = *(std::__shared_weak_count **)(v14 + 40);
  *(_QWORD *)(v14 + 32) = v12;
  *(_QWORD *)(v14 + 40) = v10;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  do
    v19 = __ldaxr(v11);
  while (__stlxr(v19 - 1, v11));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  return v3;
}

void std::__function::__func<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1>,void ()(ggl::PolygonStroke::MeshPipelineSetup *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1>,void ()(ggl::PolygonStroke::MeshPipelineSetup *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D1048;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1>,void ()(ggl::PolygonStroke::MeshPipelineSetup *)>::operator()(uint64_t a1, _QWORD **a2)
{
  uint64_t *v2;
  _QWORD *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t *v16;
  unint64_t v17;

  v2 = *(uint64_t **)(a1 + 8);
  v3 = *a2;
  v5 = *v2;
  v4 = (std::__shared_weak_count *)v2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  if (v5 && **(_QWORD **)(v5 + 40) == v3[1])
  {
    v11 = v3[2];
    if (v11)
      v12 = v11 == v5;
    else
      v12 = 1;
    if (!v12)
      ggl::PipelineSetup::resetData((uint64_t)v3);
    if (v4)
    {
      v13 = (unint64_t *)&v4->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    v8 = (std::__shared_weak_count *)v3[3];
    v3[2] = v5;
    v3[3] = v4;
    if (!v8)
      goto LABEL_22;
    v15 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v15);
    while (__stlxr(v10 - 1, v15));
  }
  else
  {
    v8 = (std::__shared_weak_count *)v3[3];
    v3[2] = 0;
    v3[3] = 0;
    if (!v8)
      goto LABEL_22;
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
  }
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v4)
      return;
    goto LABEL_23;
  }
LABEL_22:
  if (!v4)
    return;
LABEL_23:
  v16 = (unint64_t *)&v4->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void std::__function::__func<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0>,ggl::PolygonStroke::MeshPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0>,ggl::PolygonStroke::MeshPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D1000;
  result[1] = v3;
  return result;
}

_QWORD *std::__function::__func<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0>,ggl::PolygonStroke::MeshPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;

  v1 = *(uint64_t **)(a1 + 8);
  v2 = (_QWORD *)operator new();
  v3 = v2;
  v4 = *v1;
  v5 = (std::__shared_weak_count *)v1[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v2, v4, (uint64_t)v5);
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v2, v4, 0);
  }
  *v3 = &off_1E42B6780;
  v10 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v10->__shared_owners_ = 0;
  v11 = (unint64_t *)&v10->__shared_owners_;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1DE0;
  v12 = ggl::BufferData::BufferData((uint64_t)&v10[1], qword_1EE5679A8, 2, 1, 6, 1);
  v10[9].__shared_owners_ = (uint64_t)ggl::PolygonCommonStroke::Polygon::reflection(void)::reflection;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B94F0;
  v13 = v3[8];
  *(_QWORD *)(v13 + 32) = v12;
  *(_QWORD *)(v13 + 40) = 0;
  v14 = v3[20];
  do
    v15 = __ldxr(v11);
  while (__stxr(v15 + 1, v11));
  v16 = *(std::__shared_weak_count **)(v14 + 40);
  *(_QWORD *)(v14 + 32) = v12;
  *(_QWORD *)(v14 + 40) = v10;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  do
    v19 = __ldaxr(v11);
  while (__stlxr(v19 - 1, v11));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  return v3;
}

void std::__shared_ptr_emplace<ggl::HillshadeFillMask::CompressedMeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2FD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::HillshadeFillMask::CompressedMeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2FD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::PolygonAnimatableFill::CompressedMeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E39E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::PolygonAnimatableFill::CompressedMeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E39E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::PolygonFill::CompressedMeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE960;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::PolygonFill::CompressedMeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE960;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::PolygonAnimatableStroke::MeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3CF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::PolygonAnimatableStroke::MeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3CF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::PolygonStrokeMask::MeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3040;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::PolygonStrokeMask::MeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3040;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::PolygonStroke::MeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEF48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::PolygonStroke::MeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEF48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::PolygonRenderResources::renderStateForBlendingEqual(md::PolygonRenderResources *this, unsigned int a2, int a3)
{
  uint64_t v4;
  char *v5;
  char **v6;
  char *v7;
  unsigned int v8;
  BOOL v9;
  char **v10;
  uint64_t v11;
  _QWORD *v12;
  unsigned __int8 *v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;

  v4 = a3 ^ a2;
  v5 = (char *)this + 856;
  v6 = (char **)*((_QWORD *)this + 107);
  if (!v6)
    goto LABEL_12;
  v7 = (char *)this + 856;
  do
  {
    v8 = *((unsigned __int8 *)v6 + 32);
    v9 = v8 >= v4;
    if (v8 >= v4)
      v10 = v6;
    else
      v10 = v6 + 1;
    if (v9)
      v7 = (char *)v6;
    v6 = (char **)*v10;
  }
  while (*v10);
  if (v7 != v5 && v4 >= v7[32])
    return *((_QWORD *)v7 + 5);
LABEL_12:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = 0;
  *(_QWORD *)(v11 + 24) = 0;
  *(_DWORD *)(v11 + 32) = 0;
  *(_QWORD *)v11 = &off_1E42B5DE8;
  *(_QWORD *)(v11 + 8) = 0;
  *(_QWORD *)(v11 + 36) = 65537;
  *(_DWORD *)(v11 + 44) = 0;
  *(_QWORD *)(v11 + 48) = (v4 << 48) | 0xFF0300000400;
  *(_WORD *)(v11 + 56) = 0;
  *(_QWORD *)(v11 + 67) = 0;
  *(_QWORD *)(v11 + 59) = 0;
  *(_BYTE *)(v11 + 75) = 0;
  *(_QWORD *)(v11 + 132) = 0;
  *(_QWORD *)(v11 + 124) = 0;
  *(_WORD *)(v11 + 188) = 257;
  *(_QWORD *)(v11 + 192) = 0;
  *(_QWORD *)(v11 + 200) = 0;
  *(_BYTE *)(v11 + 208) = 1;
  *(_BYTE *)(v11 + 58) = 3;
  v12 = v5;
  v13 = *(unsigned __int8 **)v5;
  if (*(_QWORD *)v5)
  {
    while (1)
    {
      while (1)
      {
        v12 = v13;
        v14 = v13[32];
        if (v4 >= v14)
          break;
        v13 = (unsigned __int8 *)*v12;
        v5 = (char *)v12;
        if (!*v12)
          goto LABEL_19;
      }
      if (v14 >= v4)
        break;
      v13 = (unsigned __int8 *)v12[1];
      if (!v13)
      {
        v5 = (char *)(v12 + 1);
        goto LABEL_19;
      }
    }
  }
  else
  {
LABEL_19:
    v15 = v12;
    v12 = operator new(0x30uLL);
    *((_BYTE *)v12 + 32) = v4;
    v12[5] = 0;
    *v12 = 0;
    v12[1] = 0;
    v12[2] = v15;
    *(_QWORD *)v5 = v12;
    v16 = **((_QWORD **)this + 106);
    v17 = v12;
    if (v16)
    {
      *((_QWORD *)this + 106) = v16;
      v17 = *(uint64_t **)v5;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 107), v17);
    ++*((_QWORD *)this + 108);
  }
  v18 = v12[5];
  v12[5] = v11;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  return v11;
}

void md::PolygonRenderResources::~PolygonRenderResources(md::PolygonRenderResources *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  void (***v8)(void);
  void (**v9)(void);
  _QWORD **v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;

  *((_QWORD *)this + 136) = &off_1E42B8A10;
  v2 = *((_QWORD *)this + 137);
  if (v2)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 16))(v2, *((_QWORD *)this + 139));
    *((_QWORD *)this + 139) = 3735927469;
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 138);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = (_QWORD *)*((_QWORD *)this + 133);
  do
  {
    if (v6[1])
    {
      v7 = 0;
      v8 = (void (***)(void))(v6 + 2);
      do
      {
        v9 = *v8;
        v8 += 15;
        (*v9)();
        ++v7;
      }
      while (v7 < v6[1]);
    }
    v6[1] = 0;
    v6 = (_QWORD *)*v6;
  }
  while (v6);
  v10 = (_QWORD **)*((_QWORD *)this + 133);
  *((_QWORD *)this + 134) = v10;
  v11 = *v10;
  *v10 = 0;
  if (v11)
  {
    do
    {
      v12 = (_QWORD *)*v11;
      free(v11);
      v11 = v12;
    }
    while (v12);
    v10 = (_QWORD **)*((_QWORD *)this + 133);
  }
  free(v10);
  v13 = (void *)*((_QWORD *)this + 130);
  if (v13)
  {
    *((_QWORD *)this + 131) = v13;
    operator delete(v13);
  }
  v14 = *((_QWORD *)this + 126);
  if (v14)
  {
    v15 = *((_QWORD *)this + 127);
    v16 = *((_QWORD *)this + 126);
    if (v15 != v14)
    {
      v17 = *((_QWORD *)this + 127);
      do
      {
        v19 = *(void **)(v17 - 24);
        v17 -= 24;
        v18 = v19;
        if (v19)
        {
          *(_QWORD *)(v15 - 16) = v18;
          operator delete(v18);
        }
        v15 = v17;
      }
      while (v17 != v14);
      v16 = *((_QWORD *)this + 126);
    }
    *((_QWORD *)this + 127) = v14;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 129) + 40))(*((_QWORD *)this + 129), v16, *((_QWORD *)this + 128) - v16);
  }
  v20 = (void *)*((_QWORD *)this + 123);
  if (v20)
  {
    *((_QWORD *)this + 124) = v20;
    operator delete(v20);
  }
  v21 = (std::__shared_weak_count *)*((_QWORD *)this + 122);
  if (!v21)
    goto LABEL_33;
  v22 = (unint64_t *)&v21->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
    v24 = (std::__shared_weak_count *)*((_QWORD *)this + 120);
    if (!v24)
      goto LABEL_39;
  }
  else
  {
LABEL_33:
    v24 = (std::__shared_weak_count *)*((_QWORD *)this + 120);
    if (!v24)
      goto LABEL_39;
  }
  v25 = (unint64_t *)&v24->__shared_owners_;
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
LABEL_39:
  v27 = *((_QWORD *)this + 118);
  *((_QWORD *)this + 118) = 0;
  if (v27)
    MEMORY[0x1A1AF4E00](v27, 0x1000C4049ECCB0CLL);
  v28 = *((_QWORD *)this + 115);
  *((_QWORD *)this + 115) = 0;
  if (v28)
    MEMORY[0x1A1AF4E00](v28, 0x1000C4049ECCB0CLL);
  std::__tree<std::__value_type<altitude::DebugRenderFeatureId,std::unique_ptr<altitude::DebugRenderFeature>>,std::__map_value_compare<altitude::DebugRenderFeatureId,std::__value_type<altitude::DebugRenderFeatureId,std::unique_ptr<altitude::DebugRenderFeature>>,std::less<altitude::DebugRenderFeatureId>,true>,std::allocator<std::__value_type<altitude::DebugRenderFeatureId,std::unique_ptr<altitude::DebugRenderFeature>>>>::destroy(*((_QWORD **)this + 107));
  for (i = 840; i != 264; i -= 8)
  {
    v30 = *(_QWORD *)((char *)this + i);
    *(_QWORD *)((char *)this + i) = 0;
    if (v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  }
  v31 = *((_QWORD *)this + 30);
  if (v31)
  {
    v32 = *((_QWORD *)this + 31);
    v33 = (void *)*((_QWORD *)this + 30);
    if (v32 != v31)
    {
      do
      {
        v34 = *(std::__shared_weak_count **)(v32 - 8);
        if (v34)
        {
          v35 = (unint64_t *)&v34->__shared_owners_;
          do
            v36 = __ldaxr(v35);
          while (__stlxr(v36 - 1, v35));
          if (!v36)
          {
            ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
            std::__shared_weak_count::__release_weak(v34);
          }
        }
        v32 -= 16;
      }
      while (v32 != v31);
      v33 = (void *)*((_QWORD *)this + 30);
    }
    *((_QWORD *)this + 31) = v31;
    operator delete(v33);
  }
  v37 = *((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v37)
  {
    v38 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v37);
    MEMORY[0x1A1AF4E00](v38, 0x10A0C40D234DDC7);
  }
  v39 = *((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v39)
  {
    v40 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v39);
    MEMORY[0x1A1AF4E00](v40, 0x10A0C40D234DDC7);
  }
  v41 = *((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v41)
  {
    v42 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v41);
    MEMORY[0x1A1AF4E00](v42, 0x10A0C40D234DDC7);
  }
  v43 = *((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v43)
  {
    v44 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v43);
    MEMORY[0x1A1AF4E00](v44, 0x10A0C40D234DDC7);
  }
  v45 = *((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v45)
  {
    v46 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v45);
    MEMORY[0x1A1AF4E00](v46, 0x10A0C40D234DDC7);
  }
  v47 = *((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v47)
  {
    v48 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v47);
    MEMORY[0x1A1AF4E00](v48, 0x10A0C40D234DDC7);
  }
  v49 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v49)
  {
    v50 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v49);
    MEMORY[0x1A1AF4E00](v50, 0x10A0C40D234DDC7);
  }
  v51 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v51)
  {
    v52 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v51);
    MEMORY[0x1A1AF4E00](v52, 0x10A0C40D234DDC7);
  }
  v53 = (std::__shared_weak_count *)*((_QWORD *)this + 21);
  if (!v53)
    goto LABEL_78;
  v54 = (unint64_t *)&v53->__shared_owners_;
  do
    v55 = __ldaxr(v54);
  while (__stlxr(v55 - 1, v54));
  if (!v55)
  {
    ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
    std::__shared_weak_count::__release_weak(v53);
    v56 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
    if (!v56)
      goto LABEL_84;
  }
  else
  {
LABEL_78:
    v56 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
    if (!v56)
      goto LABEL_84;
  }
  v57 = (unint64_t *)&v56->__shared_owners_;
  do
    v58 = __ldaxr(v57);
  while (__stlxr(v58 - 1, v57));
  if (!v58)
  {
    ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
    std::__shared_weak_count::__release_weak(v56);
  }
LABEL_84:
  v59 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
  if (!v59)
    goto LABEL_88;
  v60 = (unint64_t *)&v59->__shared_owners_;
  do
    v61 = __ldaxr(v60);
  while (__stlxr(v61 - 1, v60));
  if (!v61)
  {
    ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
    std::__shared_weak_count::__release_weak(v59);
    v62 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
    if (!v62)
      goto LABEL_94;
  }
  else
  {
LABEL_88:
    v62 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
    if (!v62)
      goto LABEL_94;
  }
  v63 = (unint64_t *)&v62->__shared_owners_;
  do
    v64 = __ldaxr(v63);
  while (__stlxr(v64 - 1, v63));
  if (!v64)
  {
    ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
    std::__shared_weak_count::__release_weak(v62);
  }
LABEL_94:
  v65 = (std::__shared_weak_count *)*((_QWORD *)this + 13);
  if (!v65)
    goto LABEL_98;
  v66 = (unint64_t *)&v65->__shared_owners_;
  do
    v67 = __ldaxr(v66);
  while (__stlxr(v67 - 1, v66));
  if (!v67)
  {
    ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
    std::__shared_weak_count::__release_weak(v65);
    v68 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
    if (!v68)
      goto LABEL_104;
  }
  else
  {
LABEL_98:
    v68 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
    if (!v68)
      goto LABEL_104;
  }
  v69 = (unint64_t *)&v68->__shared_owners_;
  do
    v70 = __ldaxr(v69);
  while (__stlxr(v70 - 1, v69));
  if (!v70)
  {
    ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
    std::__shared_weak_count::__release_weak(v68);
  }
LABEL_104:
  v71 = (std::__shared_weak_count *)*((_QWORD *)this + 9);
  if (!v71)
    goto LABEL_108;
  v72 = (unint64_t *)&v71->__shared_owners_;
  do
    v73 = __ldaxr(v72);
  while (__stlxr(v73 - 1, v72));
  if (!v73)
  {
    ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
    std::__shared_weak_count::__release_weak(v71);
    v74 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
    if (!v74)
      goto LABEL_114;
  }
  else
  {
LABEL_108:
    v74 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
    if (!v74)
      goto LABEL_114;
  }
  v75 = (unint64_t *)&v74->__shared_owners_;
  do
    v76 = __ldaxr(v75);
  while (__stlxr(v76 - 1, v75));
  if (!v76)
  {
    ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
    std::__shared_weak_count::__release_weak(v74);
  }
LABEL_114:
  v77 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (!v77)
    goto LABEL_118;
  v78 = (unint64_t *)&v77->__shared_owners_;
  do
    v79 = __ldaxr(v78);
  while (__stlxr(v79 - 1, v78));
  if (!v79)
  {
    ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
    std::__shared_weak_count::__release_weak(v77);
    v80 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
    if (!v80)
      goto LABEL_124;
  }
  else
  {
LABEL_118:
    v80 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
    if (!v80)
      goto LABEL_124;
  }
  v81 = (unint64_t *)&v80->__shared_owners_;
  do
    v82 = __ldaxr(v81);
  while (__stlxr(v82 - 1, v81));
  if (!v82)
  {
    ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
    std::__shared_weak_count::__release_weak(v80);
  }
LABEL_124:
  v83 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v83)
  {
    v84 = (unint64_t *)&v83->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
}

_QWORD *md::PolygonRenderResources::prunePools(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD **v3;
  _QWORD **v4;
  uint64_t v5;
  _QWORD **v6;
  _QWORD **v7;
  uint64_t v8;
  _QWORD **v9;
  _QWORD **v10;
  uint64_t v11;
  _QWORD **v12;
  _QWORD **v13;
  uint64_t v14;
  _QWORD **v15;
  _QWORD **v16;
  uint64_t v17;
  _QWORD **v18;
  _QWORD **v19;
  uint64_t v20;
  _QWORD **v21;
  _QWORD **v22;
  uint64_t v23;
  _QWORD **v24;
  _QWORD **v25;

  v1 = this;
  v2 = this[22];
  v4 = *(_QWORD ***)v2;
  v3 = *(_QWORD ***)(v2 + 8);
  if (*(_QWORD ***)v2 != v3)
  {
    do
    {
      this = *v4;
      if (*v4)
      {
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
        v3 = *(_QWORD ***)(v2 + 8);
      }
      ++v4;
    }
    while (v4 != v3);
    v4 = *(_QWORD ***)v2;
  }
  *(_QWORD *)(v2 + 8) = v4;
  v5 = v1[23];
  v7 = *(_QWORD ***)v5;
  v6 = *(_QWORD ***)(v5 + 8);
  if (*(_QWORD ***)v5 != v6)
  {
    do
    {
      this = *v7;
      if (*v7)
      {
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
        v6 = *(_QWORD ***)(v5 + 8);
      }
      ++v7;
    }
    while (v7 != v6);
    v7 = *(_QWORD ***)v5;
  }
  *(_QWORD *)(v5 + 8) = v7;
  v8 = v1[24];
  v10 = *(_QWORD ***)v8;
  v9 = *(_QWORD ***)(v8 + 8);
  if (*(_QWORD ***)v8 != v9)
  {
    do
    {
      this = *v10;
      if (*v10)
      {
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
        v9 = *(_QWORD ***)(v8 + 8);
      }
      ++v10;
    }
    while (v10 != v9);
    v10 = *(_QWORD ***)v8;
  }
  *(_QWORD *)(v8 + 8) = v10;
  v11 = v1[25];
  v13 = *(_QWORD ***)v11;
  v12 = *(_QWORD ***)(v11 + 8);
  if (*(_QWORD ***)v11 != v12)
  {
    do
    {
      this = *v13;
      if (*v13)
      {
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
        v12 = *(_QWORD ***)(v11 + 8);
      }
      ++v13;
    }
    while (v13 != v12);
    v13 = *(_QWORD ***)v11;
  }
  *(_QWORD *)(v11 + 8) = v13;
  v14 = v1[26];
  v16 = *(_QWORD ***)v14;
  v15 = *(_QWORD ***)(v14 + 8);
  if (*(_QWORD ***)v14 != v15)
  {
    do
    {
      this = *v16;
      if (*v16)
      {
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
        v15 = *(_QWORD ***)(v14 + 8);
      }
      ++v16;
    }
    while (v16 != v15);
    v16 = *(_QWORD ***)v14;
  }
  *(_QWORD *)(v14 + 8) = v16;
  v17 = v1[27];
  v19 = *(_QWORD ***)v17;
  v18 = *(_QWORD ***)(v17 + 8);
  if (*(_QWORD ***)v17 != v18)
  {
    do
    {
      this = *v19;
      if (*v19)
      {
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
        v18 = *(_QWORD ***)(v17 + 8);
      }
      ++v19;
    }
    while (v19 != v18);
    v19 = *(_QWORD ***)v17;
  }
  *(_QWORD *)(v17 + 8) = v19;
  v20 = v1[28];
  v22 = *(_QWORD ***)v20;
  v21 = *(_QWORD ***)(v20 + 8);
  if (*(_QWORD ***)v20 != v21)
  {
    do
    {
      this = *v22;
      if (*v22)
      {
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
        v21 = *(_QWORD ***)(v20 + 8);
      }
      ++v22;
    }
    while (v22 != v21);
    v22 = *(_QWORD ***)v20;
  }
  *(_QWORD *)(v20 + 8) = v22;
  v23 = v1[29];
  v25 = *(_QWORD ***)v23;
  v24 = *(_QWORD ***)(v23 + 8);
  if (*(_QWORD ***)v23 != v24)
  {
    do
    {
      this = *v25;
      if (*v25)
      {
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
        v24 = *(_QWORD ***)(v23 + 8);
      }
      ++v25;
    }
    while (v25 != v24);
    v25 = *(_QWORD ***)v23;
  }
  *(_QWORD *)(v23 + 8) = v25;
  return this;
}

void md::PolygonRenderResources::worldTransformForPolygonGroup(md::PolygonRenderResources *this, VKPolygonGroup *a2, float a3)
{
  uint64_t v5;
  __int32 v6;
  int32x4_t v7;
  float v8;
  float v9;
  unint64_t v10;
  float32x4_t v11;
  int8x16_t v12;
  float32x4_t v13;
  float32x4_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  float32x4_t v18;
  int8x16_t v19;
  __int32 v20;
  float32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  VKPolygonGroup *v24;
  uint64_t v25;
  float32x4_t v26;

  v24 = a2;
  if (-[VKPolygonalItemGroup isFixedSize](v24, "isFixedSize"))
  {
    -[VKPolygonalItemGroup centroid](v24, "centroid");
    v22.i64[0] = v5;
    v20 = v6;
    -[VKPolygonalItemGroup tileZoom](v24, "tileZoom");
    v7 = v22;
    v7.i32[1] = v20;
    v23 = v7;
    v7.i64[1] = 0x3F80000000000000;
    v21 = (float32x4_t)v7;
    v9 = exp2f(v8 - a3);
    LODWORD(v10) = 0;
    v11 = (float32x4_t)vzip1q_s32((int32x4_t)LODWORD(v9), (int32x4_t)LODWORD(v9));
    v12 = (int8x16_t)vmulq_f32(v11, (float32x4_t)xmmword_19FFB34C0);
    *((float *)&v10 + 1) = v9;
    v13 = vmlaq_f32((float32x4_t)vextq_s8(v12, v12, 8uLL), (float32x4_t)xmmword_19FFB3590, v11);
    v14 = (float32x4_t)vzip1q_s32((int32x4_t)v10, (int32x4_t)v10);
    v15 = (int8x16_t)vmulq_f32(v14, (float32x4_t)xmmword_19FFB34C0);
    v25 = v13.i64[1];
    v26 = vmlaq_f32((float32x4_t)vextq_s8(v15, v15, 8uLL), (float32x4_t)xmmword_19FFB3590, v14);
    v16 = (int8x16_t)vmulq_f32(*(float32x4_t *)&v25, (float32x4_t)xmmword_19FFB3850);
    v13.i64[1] = v26.i64[1];
    v17 = (int8x16_t)vmulq_f32(*(float32x4_t *)&v25, (float32x4_t)xmmword_19FFB3480);
    *(float32x4_t *)this = vmlaq_f32((float32x4_t)vextq_s8(v16, v16, 8uLL), (float32x4_t)xmmword_19FFB3850, v13);
    *((float32x4_t *)this + 1) = vmlaq_f32((float32x4_t)vextq_s8(v17, v17, 8uLL), (float32x4_t)xmmword_19FFB3480, v13);
    v18 = (float32x4_t)vzip1q_s32(v23, v23);
    v19 = (int8x16_t)vmulq_f32(*(float32x4_t *)&v25, vnegq_f32(v18));
    *((float32x4_t *)this + 2) = vmulq_n_f32((float32x4_t)xmmword_19FFB3580, v9);
    *((float32x4_t *)this + 3) = vaddq_f32(v21, vmlsq_f32((float32x4_t)vextq_s8(v19, v19, 8uLL), v13, v18));
  }
  else
  {
    *(_OWORD *)((char *)this + 20) = 0u;
    *(_OWORD *)((char *)this + 36) = 0u;
    *(_QWORD *)((char *)this + 52) = 0;
    *(_OWORD *)((char *)this + 4) = 0u;
    *(_DWORD *)this = 1065353216;
    *((_DWORD *)this + 5) = 1065353216;
    *((_DWORD *)this + 10) = 1065353216;
    *((_DWORD *)this + 15) = 1065353216;
  }

}

void sub_19FE50108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{

  _Unwind_Resume(a1);
}

void sub_19FE50368(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19FE503FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19FE5045C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FE504CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZL35GEOGetVectorKitARSessionObserverLogv_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.VectorKit", "ARSessionObserver");
  v1 = (void *)GEOGetVectorKitARSessionObserverLog(void)::log;
  GEOGetVectorKitARSessionObserverLog(void)::log = (uint64_t)v0;

}

void md::ResolvedSceneLogic::~ResolvedSceneLogic(md::ResolvedSceneLogic *this)
{
  md::ResolvedSceneLogic::~ResolvedSceneLogic(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;

  *(_QWORD *)this = &off_1E4295E30;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (_QWORD *)*((_QWORD *)this + 19);
    if (!v5)
      goto LABEL_7;
  }
  else
  {
LABEL_5:
    v5 = (_QWORD *)*((_QWORD *)this + 19);
    if (!v5)
      goto LABEL_7;
  }
  do
  {
    v6 = (_QWORD *)*v5;
    std::__destroy_at[abi:nn180100]<std::pair<gdc::LayerDataRequestKey const,gdc::DebugTreeNode>,0>((uint64_t)(v5 + 2));
    operator delete(v5);
    v5 = v6;
  }
  while (v6);
LABEL_7:
  v7 = (void *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v7)
    operator delete(v7);
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
}

uint64_t md::ResolvedSceneLogic::didBecomeInactive(uint64_t this)
{
  *(_QWORD *)(this + 120) = 0;
  return this;
}

double md::Logic<md::ResolvedSceneLogic,md::SceneContext,md::LogicDependencies<gdc::TypeList<md::PendingSceneContext>,gdc::TypeList<md::DrapingContext,md::FlyoverCompleteTileDataContext>>>::_allocateContext@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _OWORD *v5;
  double result;
  __int128 v7;

  v4 = (_QWORD *)operator new();
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a1 + 112))(&v7, a1);
  v5 = (_OWORD *)operator new();
  result = *(double *)&v7;
  *v5 = v7;
  v4[2] = "md::SceneContext]";
  v4[3] = 16;
  v4[4] = v5;
  *v4 = &off_1E42B0B18;
  v4[1] = 0x99BED48DEFBBD82BLL;
  *a2 = v4;
  return result;
}

void sub_19FE5064C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  MEMORY[0x1A1AF4E00](v9, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::ResolvedSceneLogic,md::SceneContext,md::LogicDependencies<gdc::TypeList<md::PendingSceneContext>,gdc::TypeList<md::DrapingContext,md::FlyoverCompleteTileDataContext>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[3];

  if (*(_QWORD *)(a3 + 8) == 0x99BED48DEFBBD82BLL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::PendingSceneContext>,gdc::TypeList<md::DrapingContext,md::FlyoverCompleteTileDataContext>>::resolveDependencies(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 128))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::ResolvedSceneLogic,md::SceneContext,md::LogicDependencies<gdc::TypeList<md::PendingSceneContext>,gdc::TypeList<md::DrapingContext,md::FlyoverCompleteTileDataContext>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[3];

  if (*(_QWORD *)(a3 + 8) == 0x99BED48DEFBBD82BLL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::PendingSceneContext>,gdc::TypeList<md::DrapingContext,md::FlyoverCompleteTileDataContext>>::resolveDependencies(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 136))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::ResolvedSceneLogic,md::SceneContext,md::LogicDependencies<gdc::TypeList<md::PendingSceneContext>,gdc::TypeList<md::DrapingContext,md::FlyoverCompleteTileDataContext>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[3];

  if (*(_QWORD *)(a3 + 8) == 0x99BED48DEFBBD82BLL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::PendingSceneContext>,gdc::TypeList<md::DrapingContext,md::FlyoverCompleteTileDataContext>>::resolveDependencies(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 144))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::ResolvedSceneLogic,md::SceneContext,md::LogicDependencies<gdc::TypeList<md::PendingSceneContext>,gdc::TypeList<md::DrapingContext,md::FlyoverCompleteTileDataContext>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[3];

  if (*(_QWORD *)(a3 + 8) == 0x99BED48DEFBBD82BLL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::PendingSceneContext>,gdc::TypeList<md::DrapingContext,md::FlyoverCompleteTileDataContext>>::resolveDependencies(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 152))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::ResolvedSceneLogic,md::SceneContext,md::LogicDependencies<gdc::TypeList<md::PendingSceneContext>,gdc::TypeList<md::DrapingContext,md::FlyoverCompleteTileDataContext>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[3];

  if (*(_QWORD *)(a3 + 8) == 0x99BED48DEFBBD82BLL && (v4 = *(_QWORD *)(a3 + 32)) != 0)
  {
    v6 = result;
    md::LogicDependencies<gdc::TypeList<md::PendingSceneContext>,gdc::TypeList<md::DrapingContext,md::FlyoverCompleteTileDataContext>>::resolveDependencies(v7, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v6 + 160))(v6, a2, v7, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

uint64_t md::Logic<md::ResolvedSceneLogic,md::SceneContext,md::LogicDependencies<gdc::TypeList<md::PendingSceneContext>,gdc::TypeList<md::DrapingContext,md::FlyoverCompleteTileDataContext>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

void md::ResolvedSceneLogic::runBeforeLayoutAtVariableRate(uint64_t a1, uint64_t a2, md::SceneStateManager ***a3, md::SceneStateManager **a4)
{
  std::__shared_weak_count *v6;
  md::SceneStateManager *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  md::SceneStateManager *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int16 *v18;
  _QWORD *v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  int8x8_t v28;
  unint64_t v29;
  uint8x8_t v30;
  unint64_t v31;
  uint64_t ***v32;
  uint64_t **v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  size_t v37;
  const void *v38;
  uint64_t *v39;
  uint64_t *v40;
  size_t v41;
  const void *v42;
  unsigned __int16 *v43;
  unsigned __int16 *v44;
  unint64_t v45;
  uint64_t v46;
  unsigned __int16 *v47;
  uint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  void **v55;
  unint64_t v56;
  uint8x8_t v57;
  uint64_t ***v58;
  uint64_t **v59;
  void **v60;
  int v61;
  int v62;
  uint64_t *v63;
  void *v64;
  size_t v65;
  unint64_t v66;
  uint64_t *v67;
  size_t v68;
  int v69;
  uint64_t *v70;
  uint64_t *v71;
  int v72;
  char *v73;
  uint64_t v74;
  float v75;
  float v76;
  _BOOL8 v77;
  unint64_t v78;
  unint64_t v79;
  size_t prime;
  void *v81;
  void *v82;
  uint64_t v83;
  _QWORD *v84;
  size_t v85;
  size_t v86;
  size_t v87;
  _QWORD *i;
  size_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint8x8_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  size_t v97;
  uint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  unint64_t v101;
  uint64_t v102;
  void **v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  void **v110;
  void **v111;
  char *v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  void **v120;
  unint64_t *v121;
  unint64_t v122;
  void *v123;
  unsigned __int8 *v124;
  int v125;
  NSObject *v126;
  md::SceneStateManager **v127;
  __int16 *v128;
  unsigned __int8 *v129;
  size_t v130;
  uint64_t *v131;
  uint64_t *v132;
  void *v133;
  void *v134;
  unsigned __int8 *v135;
  unsigned __int8 **v136;
  std::__shared_weak_count *v137;
  void *v138[2];
  uint64_t v139;
  __int128 v140;
  uint64_t v141;
  __int128 v142;
  uint64_t v143;
  void *v144[2];
  uint64_t v145;
  uint8_t buf[8];
  unsigned __int16 v147;
  void *v148;
  uint64_t v149;
  void *v150;
  uint64_t *v151;
  char v152;
  int v153;
  unint64_t v154;
  __int128 v155;
  uint64_t v156;
  __int128 v157;
  uint64_t v158;
  __int128 v159;
  uint64_t v160;
  __int128 __p;
  uint64_t v162;
  uint64_t v163;
  std::__shared_weak_count *v164;
  uint64_t v165;
  _QWORD *v166;
  _QWORD *v167;
  char v168;

  v7 = **a3;
  v6 = (std::__shared_weak_count *)(*a3)[1];
  v127 = *a3;
  if (!v6)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (v10)
  {
LABEL_6:
    if (v7)
      goto LABEL_7;
LABEL_259:
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v126 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v126, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19F029000, v126, OS_LOG_TYPE_ERROR, "PendingSceneContext sceneStateManager is null in ResolvedSceneLogic", buf, 2u);
    }

    return;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  if (!v7)
    goto LABEL_259;
LABEL_7:
  md::SceneStateManager::updateTileSets(*v127);
  v12 = *v127;
  v11 = (unint64_t *)v127[1];
  if (v11)
  {
    v13 = v11 + 1;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = (std::__shared_weak_count *)a4[1];
  *a4 = v12;
  a4[1] = (md::SceneStateManager *)v11;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  *(_QWORD *)(a1 + 120) = a4;
  if (*(_BYTE *)(a1 + 128))
  {
    v165 = 0;
    v18 = &md::TileSelectionTileSetTypeList;
    v19 = (_QWORD *)(a1 + 152);
    do
    {
      v20 = (unsigned __int16 *)*((_QWORD *)*v127 + 14);
      v21 = (unsigned __int16 *)*((_QWORD *)*v127 + 15);
      v128 = v18;
      if (v20 != v21)
      {
        while (*v20 != (unsigned __int16)*v18)
        {
          v20 += 56;
          if (v20 == v21)
          {
            v20 = (unsigned __int16 *)*((_QWORD *)*v127 + 15);
            break;
          }
        }
      }
      v136 = (unsigned __int8 **)*((_QWORD *)v20 + 13);
      v22 = *v136;
      v23 = *v136;
      v129 = v136[1];
      if (*v136 != v129)
      {
        v24 = v22 + 144;
        v25 = *v136;
        while (1)
        {
          v23 = v24;
          if (v24 == v129)
            break;
          v25 += 144;
          if (v24[112] != v22[112] || v24[113] != v22[113] || *((_DWORD *)v24 + 29) != *((_DWORD *)v22 + 29))
          {
            v23 = v25;
            goto LABEL_32;
          }
          v24 += 144;
          if (*((_DWORD *)v23 + 30) != *((_DWORD *)v22 + 30))
            goto LABEL_32;
        }
        v23 = v136[1];
      }
LABEL_32:
      v26 = v136[1];
      while (1)
      {
        v135 = v23;
        if (v22 == v26)
          break;
        while (v22 != v23)
        {
          v28 = *(int8x8_t *)(a1 + 144);
          if (v28)
          {
            v29 = *((_QWORD *)v22 + 13);
            v30 = (uint8x8_t)vcnt_s8(v28);
            v30.i16[0] = vaddlv_u8(v30);
            if (v30.u32[0] > 1uLL)
            {
              v31 = *((_QWORD *)v22 + 13);
              if (v29 >= *(_QWORD *)&v28)
                v31 = v29 % *(_QWORD *)&v28;
            }
            else
            {
              v31 = (*(_QWORD *)&v28 - 1) & v29;
            }
            v32 = *(uint64_t ****)(*(_QWORD *)(a1 + 136) + 8 * v31);
            if (v32)
            {
              v33 = *v32;
              if (*v32)
              {
                if (v30.u32[0] < 2uLL)
                {
                  v34 = *(_QWORD *)&v28 - 1;
                  while (1)
                  {
                    v39 = v33[1];
                    if ((uint64_t *)v29 == v39)
                    {
                      if (*((unsigned __int8 *)v33 + 16) == *v22
                        && *((unsigned __int16 *)v33 + 12) == *((unsigned __int16 *)v22 + 4)
                        && v33[12] == *((uint64_t **)v22 + 10))
                      {
                        v40 = v33[4];
                        v41 = (char *)v33[5] - (char *)v40;
                        v42 = (const void *)*((_QWORD *)v22 + 2);
                        if (v41 == *((_QWORD *)v22 + 3) - (_QWORD)v42 && !memcmp(v40, v42, v41))
                          goto LABEL_37;
                      }
                    }
                    else if (((unint64_t)v39 & v34) != v31)
                    {
                      goto LABEL_68;
                    }
                    v33 = (uint64_t **)*v33;
                    if (!v33)
                      goto LABEL_68;
                  }
                }
                do
                {
                  v35 = (unint64_t)v33[1];
                  if (v29 == v35)
                  {
                    if (*((unsigned __int8 *)v33 + 16) == *v22
                      && *((unsigned __int16 *)v33 + 12) == *((unsigned __int16 *)v22 + 4)
                      && v33[12] == *((uint64_t **)v22 + 10))
                    {
                      v36 = v33[4];
                      v37 = (char *)v33[5] - (char *)v36;
                      v38 = (const void *)*((_QWORD *)v22 + 2);
                      if (v37 == *((_QWORD *)v22 + 3) - (_QWORD)v38 && !memcmp(v36, v38, v37))
                        goto LABEL_37;
                    }
                  }
                  else
                  {
                    if (v35 >= *(_QWORD *)&v28)
                      v35 %= *(_QWORD *)&v28;
                    if (v35 != v31)
                      break;
                  }
                  v33 = (uint64_t **)*v33;
                }
                while (v33);
              }
            }
          }
LABEL_68:
          v43 = (unsigned __int16 *)v136[3];
          v44 = (unsigned __int16 *)v136[4];
          if (v43 != v44)
          {
            while (*v43 != *((unsigned __int16 *)v22 + 4))
            {
              v43 += 16;
              if (v43 == v44)
              {
                v43 = (unsigned __int16 *)v136[4];
                break;
              }
            }
          }
          v45 = *((_QWORD *)v22 + 17);
          v47 = v43 + 4;
          v46 = *((_QWORD *)v43 + 1);
          if (0x8E38E38E38E38E39 * ((*((_QWORD *)v47 + 1) - v46) >> 4) <= v45)
            abort();
          v48 = v46 + 144 * v45;
          v49 = *(_QWORD *)(v48 + 112);
          v163 = v49;
          v50 = *(std::__shared_weak_count **)(v48 + 120);
          v164 = v50;
          if (v50)
          {
            v51 = (unint64_t *)&v50->__shared_owners_;
            do
              v52 = __ldxr(v51);
            while (__stxr(v52 + 1, v51));
          }
          if (!v49)
            goto LABEL_231;
          (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v49 + 24))(v138, v49, &v165);
          v137 = v50;
          buf[0] = *v22;
          gdc::LayerDataKey::LayerDataKey((uint64_t)&v147, (uint64_t)(v22 + 8));
          v152 = 0;
          if (v22[96])
          {
            v153 = *((_DWORD *)v22 + 25);
            v152 = 1;
          }
          v53 = *((_QWORD *)v22 + 13);
          v154 = v53;
          v155 = *(_OWORD *)v138;
          v156 = v139;
          v138[0] = 0;
          v138[1] = 0;
          v139 = 0;
          v157 = v140;
          v158 = v141;
          v140 = 0uLL;
          v141 = 0;
          v159 = v142;
          v54 = v143;
          v142 = 0uLL;
          v143 = 0;
          v55 = (void **)v144[0];
          __p = *(_OWORD *)v144;
          v160 = v54;
          v162 = v145;
          v144[0] = 0;
          v144[1] = 0;
          v145 = 0;
          v56 = *(_QWORD *)(a1 + 144);
          if (v56)
          {
            v57 = (uint8x8_t)vcnt_s8((int8x8_t)v56);
            v57.i16[0] = vaddlv_u8(v57);
            if (v57.u32[0] > 1uLL)
            {
              v50 = (std::__shared_weak_count *)v53;
              if (v53 >= v56)
                v50 = (std::__shared_weak_count *)(v53 % v56);
            }
            else
            {
              v50 = (std::__shared_weak_count *)((v56 - 1) & v53);
            }
            v58 = *(uint64_t ****)(*(_QWORD *)(a1 + 136) + 8 * (_QWORD)v50);
            if (v58)
            {
              v59 = *v58;
              if (*v58)
              {
                v60 = v55;
                v61 = buf[0];
                v62 = v147;
                v63 = v151;
                v64 = v148;
                v65 = v149 - (_QWORD)v148;
                if (v57.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v70 = v59[1];
                    if (v70 == (uint64_t *)v53)
                    {
                      if (*((unsigned __int8 *)v59 + 16) == v61
                        && *((unsigned __int16 *)v59 + 12) == v62
                        && v59[12] == v63)
                      {
                        v71 = v59[4];
                        if ((char *)v59[5] - (char *)v71 == v65)
                        {
                          v134 = v64;
                          v130 = v65;
                          v132 = v63;
                          v72 = memcmp(v71, v64, v65);
                          v65 = v130;
                          v64 = v134;
                          v63 = v132;
                          if (!v72)
                            goto LABEL_107;
                        }
                      }
                    }
                    else if ((std::__shared_weak_count *)((unint64_t)v70 & (v56 - 1)) != v50)
                    {
                      goto LABEL_109;
                    }
                    v59 = (uint64_t **)*v59;
                    if (!v59)
                      goto LABEL_109;
                  }
                }
                while (1)
                {
                  v66 = (unint64_t)v59[1];
                  if (v66 == v53)
                  {
                    if (*((unsigned __int8 *)v59 + 16) == v61
                      && *((unsigned __int16 *)v59 + 12) == v62
                      && v59[12] == v63)
                    {
                      v67 = v59[4];
                      if ((char *)v59[5] - (char *)v67 == v65)
                      {
                        v133 = v64;
                        v68 = v65;
                        v131 = v63;
                        v69 = memcmp(v67, v64, v65);
                        v65 = v68;
                        v64 = v133;
                        v63 = v131;
                        if (!v69)
                        {
LABEL_107:
                          v19 = (_QWORD *)(a1 + 152);
                          v23 = v135;
                          if (!v60)
                            goto LABEL_197;
                          goto LABEL_174;
                        }
                      }
                    }
                  }
                  else
                  {
                    if (v66 >= v56)
                      v66 %= v56;
                    if ((std::__shared_weak_count *)v66 != v50)
                    {
LABEL_109:
                      v19 = (_QWORD *)(a1 + 152);
                      goto LABEL_111;
                    }
                  }
                  v59 = (uint64_t **)*v59;
                  if (!v59)
                    goto LABEL_109;
                }
              }
              v19 = (_QWORD *)(a1 + 152);
            }
          }
LABEL_111:
          v73 = (char *)operator new(0xE0uLL);
          v166 = v73;
          v167 = v19;
          *(_QWORD *)v73 = 0;
          *((_QWORD *)v73 + 1) = v53;
          v73[16] = buf[0];
          gdc::LayerDataKey::LayerDataKey((uint64_t)(v73 + 24), (uint64_t)&v147);
          v73[112] = 0;
          if (v152)
          {
            *((_DWORD *)v73 + 29) = v153;
            v73[112] = 1;
          }
          *((_QWORD *)v73 + 15) = v154;
          *((_QWORD *)v73 + 18) = v156;
          *((_QWORD *)v73 + 21) = v158;
          v74 = v162;
          *((_QWORD *)v73 + 24) = v160;
          *((_OWORD *)v73 + 8) = v155;
          v155 = 0uLL;
          v156 = 0;
          *(_OWORD *)(v73 + 152) = v157;
          v157 = 0uLL;
          v158 = 0;
          *((_OWORD *)v73 + 11) = v159;
          v159 = 0uLL;
          v160 = 0;
          *(_OWORD *)(v73 + 200) = __p;
          *((_QWORD *)v73 + 27) = v74;
          __p = 0uLL;
          v162 = 0;
          v168 = 1;
          v75 = (float)(unint64_t)(*(_QWORD *)(a1 + 160) + 1);
          v76 = *(float *)(a1 + 168);
          if (!v56 || (float)(v76 * (float)v56) < v75)
          {
            v77 = v56 < 3 || (v56 & (v56 - 1)) != 0;
            v78 = v77 | (2 * v56);
            v79 = vcvtps_u32_f32(v75 / v76);
            if (v78 <= v79)
              prime = v79;
            else
              prime = v78;
            if (prime == 1)
            {
              prime = 2;
            }
            else if ((prime & (prime - 1)) != 0)
            {
              prime = std::__next_prime(prime);
            }
            v56 = *(_QWORD *)(a1 + 144);
            if (prime <= v56)
            {
              if (prime < v56)
              {
                v92 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 160) / *(float *)(a1 + 168));
                if (v56 < 3
                  || (v93 = (uint8x8_t)vcnt_s8((int8x8_t)v56), v93.i16[0] = vaddlv_u8(v93), v93.u32[0] > 1uLL))
                {
                  v92 = std::__next_prime(v92);
                }
                else
                {
                  v94 = 1 << -(char)__clz(v92 - 1);
                  if (v92 >= 2)
                    v92 = v94;
                }
                if (prime <= v92)
                  prime = v92;
                if (prime >= v56)
                {
                  v56 = *(_QWORD *)(a1 + 144);
                }
                else
                {
                  if (prime)
                    goto LABEL_126;
                  v123 = *(void **)(a1 + 136);
                  *(_QWORD *)(a1 + 136) = 0;
                  if (v123)
                    operator delete(v123);
                  v56 = 0;
                  *(_QWORD *)(a1 + 144) = 0;
                }
              }
LABEL_151:
              if ((v56 & (v56 - 1)) != 0)
              {
                if (v53 >= v56)
                  v50 = (std::__shared_weak_count *)(v53 % v56);
                else
                  v50 = (std::__shared_weak_count *)v53;
              }
              else
              {
                v50 = (std::__shared_weak_count *)((v56 - 1) & v53);
              }
              goto LABEL_164;
            }
LABEL_126:
            if (prime >> 61)
              std::__throw_bad_array_new_length[abi:nn180100]();
            v81 = operator new(8 * prime);
            v82 = *(void **)(a1 + 136);
            *(_QWORD *)(a1 + 136) = v81;
            if (v82)
              operator delete(v82);
            v83 = 0;
            *(_QWORD *)(a1 + 144) = prime;
            do
              *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * v83++) = 0;
            while (prime != v83);
            v84 = (_QWORD *)*v19;
            if (!*v19)
              goto LABEL_150;
            v85 = v84[1];
            v86 = prime - 1;
            if ((prime & (prime - 1)) == 0)
            {
              v87 = v85 & v86;
              *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * v87) = v19;
              for (i = (_QWORD *)*v84; *v84; i = (_QWORD *)*v84)
              {
                v89 = i[1] & v86;
                if (v89 == v87)
                {
                  v84 = i;
                }
                else
                {
                  v90 = *(_QWORD *)(a1 + 136);
                  if (*(_QWORD *)(v90 + 8 * v89))
                  {
                    *v84 = *i;
                    v91 = 8 * v89;
                    *i = **(_QWORD **)(*(_QWORD *)(a1 + 136) + v91);
                    **(_QWORD **)(*(_QWORD *)(a1 + 136) + v91) = i;
                  }
                  else
                  {
                    *(_QWORD *)(v90 + 8 * v89) = v84;
                    v84 = i;
                    v87 = v89;
                  }
                }
              }
              goto LABEL_150;
            }
            if (v85 >= prime)
              v85 %= prime;
            *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * v85) = v19;
            v95 = (_QWORD *)*v84;
            if (!*v84)
            {
LABEL_150:
              v56 = prime;
              goto LABEL_151;
            }
            while (2)
            {
              v97 = v95[1];
              if (v97 >= prime)
                v97 %= prime;
              if (v97 != v85)
              {
                v98 = *(_QWORD *)(a1 + 136);
                if (!*(_QWORD *)(v98 + 8 * v97))
                {
                  *(_QWORD *)(v98 + 8 * v97) = v84;
LABEL_155:
                  v84 = v95;
                  v95 = (_QWORD *)*v95;
                  v85 = v97;
                  if (!v95)
                    goto LABEL_150;
                  continue;
                }
                *v84 = *v95;
                v96 = 8 * v97;
                *v95 = **(_QWORD **)(*(_QWORD *)(a1 + 136) + v96);
                **(_QWORD **)(*(_QWORD *)(a1 + 136) + v96) = v95;
                v95 = v84;
              }
              break;
            }
            v97 = v85;
            goto LABEL_155;
          }
LABEL_164:
          v99 = *(_QWORD **)(*(_QWORD *)(a1 + 136) + 8 * (_QWORD)v50);
          v100 = v166;
          if (v99)
          {
            *v166 = *v99;
            v23 = v135;
          }
          else
          {
            *v166 = *(_QWORD *)(a1 + 152);
            *(_QWORD *)(a1 + 152) = v100;
            *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * (_QWORD)v50) = v19;
            v23 = v135;
            if (!*v100)
              goto LABEL_173;
            v101 = *(_QWORD *)(*v100 + 8);
            if ((v56 & (v56 - 1)) != 0)
            {
              if (v101 >= v56)
                v101 %= v56;
            }
            else
            {
              v101 &= v56 - 1;
            }
            v99 = (_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * v101);
          }
          *v99 = v100;
LABEL_173:
          ++*(_QWORD *)(a1 + 160);
          v60 = (void **)__p;
          if (!(_QWORD)__p)
            goto LABEL_197;
LABEL_174:
          v102 = *((_QWORD *)&__p + 1);
          v103 = v60;
          if (*((void ***)&__p + 1) != v60)
          {
            do
            {
              v104 = *(_QWORD *)(v102 - 24);
              if (v104)
              {
                v105 = *(_QWORD *)(v102 - 16);
                v106 = *(void **)(v102 - 24);
                if (v105 != v104)
                {
                  do
                  {
                    if (*(char *)(v105 - 1) < 0)
                      operator delete(*(void **)(v105 - 24));
                    v105 -= 24;
                  }
                  while (v105 != v104);
                  v106 = *(void **)(v102 - 24);
                }
                *(_QWORD *)(v102 - 16) = v104;
                operator delete(v106);
              }
              v107 = *(_QWORD *)(v102 - 48);
              if (v107)
              {
                v108 = *(_QWORD *)(v102 - 40);
                v109 = *(void **)(v102 - 48);
                if (v108 != v107)
                {
                  do
                  {
                    if (*(char *)(v108 - 9) < 0)
                      operator delete(*(void **)(v108 - 32));
                    v108 -= 64;
                  }
                  while (v108 != v107);
                  v109 = *(void **)(v102 - 48);
                }
                *(_QWORD *)(v102 - 40) = v107;
                operator delete(v109);
              }
              v110 = (void **)(v102 - 80);
              if (*(char *)(v102 - 57) < 0)
                operator delete(*v110);
              v102 -= 80;
            }
            while (v110 != v60);
            v103 = (void **)__p;
          }
          *((_QWORD *)&__p + 1) = v60;
          operator delete(v103);
LABEL_197:
          std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)&v159);
          if (SHIBYTE(v158) < 0)
            operator delete((void *)v157);
          if ((SHIBYTE(v156) & 0x80000000) == 0)
          {
            if (!v152)
              goto LABEL_202;
LABEL_201:
            v152 = 0;
            goto LABEL_202;
          }
          operator delete((void *)v155);
          if (v152)
            goto LABEL_201;
LABEL_202:
          if (v148 != v150)
            free(v148);
          v111 = (void **)v144[0];
          if (v144[0])
          {
            v112 = (char *)v144[1];
            v113 = v144[0];
            if (v144[1] != v144[0])
            {
              do
              {
                v114 = *((_QWORD *)v112 - 3);
                if (v114)
                {
                  v115 = *((_QWORD *)v112 - 2);
                  v116 = (void *)*((_QWORD *)v112 - 3);
                  if (v115 != v114)
                  {
                    do
                    {
                      if (*(char *)(v115 - 1) < 0)
                        operator delete(*(void **)(v115 - 24));
                      v115 -= 24;
                    }
                    while (v115 != v114);
                    v116 = (void *)*((_QWORD *)v112 - 3);
                  }
                  *((_QWORD *)v112 - 2) = v114;
                  operator delete(v116);
                }
                v117 = *((_QWORD *)v112 - 6);
                if (v117)
                {
                  v118 = *((_QWORD *)v112 - 5);
                  v119 = (void *)*((_QWORD *)v112 - 6);
                  if (v118 != v117)
                  {
                    do
                    {
                      if (*(char *)(v118 - 9) < 0)
                        operator delete(*(void **)(v118 - 32));
                      v118 -= 64;
                    }
                    while (v118 != v117);
                    v119 = (void *)*((_QWORD *)v112 - 6);
                  }
                  *((_QWORD *)v112 - 5) = v117;
                  operator delete(v119);
                }
                v120 = (void **)(v112 - 80);
                if (*(v112 - 57) < 0)
                  operator delete(*v120);
                v112 -= 80;
              }
              while (v120 != v111);
              v113 = v144[0];
            }
            v144[1] = v111;
            operator delete(v113);
          }
          std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)&v142);
          if (SHIBYTE(v141) < 0)
            operator delete((void *)v140);
          v50 = v137;
          if (SHIBYTE(v139) < 0)
          {
            operator delete(v138[0]);
            if (!v137)
              goto LABEL_37;
            goto LABEL_232;
          }
LABEL_231:
          if (!v50)
            goto LABEL_37;
LABEL_232:
          v121 = (unint64_t *)&v50->__shared_owners_;
          do
            v122 = __ldaxr(v121);
          while (__stlxr(v122 - 1, v121));
          if (!v122)
          {
            ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
            std::__shared_weak_count::__release_weak(v50);
          }
LABEL_37:
          v22 += 144;
        }
        v27 = v129;
        if (v129 != v23)
        {
          v124 = v23 + 144;
          v27 = v23;
          while (1)
          {
            if (v124 == v129)
            {
              v27 = v129;
              goto LABEL_34;
            }
            if (v124[112] != v23[112])
              break;
            v27 += 144;
            if (v124[113] == v23[113] && *((_DWORD *)v124 + 29) == *((_DWORD *)v23 + 29))
            {
              v125 = *((_DWORD *)v124 + 30);
              v124 += 144;
              if (v125 == *((_DWORD *)v23 + 30))
                continue;
            }
            goto LABEL_34;
          }
          v27 = v124;
        }
LABEL_34:
        v26 = v136[1];
        v22 = v23;
        v23 = v27;
      }
      v18 = v128 + 1;
    }
    while (v128 + 1 != (__int16 *)&ggl::specularBuildingShaderVertShaderFunctionConstantMapping(void)::ref);
  }
}

void sub_19FE51748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::LayerDataRequestKey,gdc::DebugTreeNode>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::LayerDataRequestKey,gdc::DebugTreeNode>,void *>>>>::~unique_ptr[abi:nn180100](v39 - 120);
  std::pair<gdc::LayerDataRequestKey,gdc::DebugTreeNode>::~pair((uint64_t)&a39);
  gdc::DebugTreeNode::~DebugTreeNode((gdc::DebugTreeNode *)&a27);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v39 - 144);
  _Unwind_Resume(a1);
}

void md::ResolvedSceneLogic::runBeforeLayout(uint64_t a1, uint64_t a2, uint64_t **a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;

  v7 = **a3;
  v6 = (*a3)[1];
  if (v6)
  {
    v8 = (unint64_t *)(v6 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = (std::__shared_weak_count *)a4[1];
  *a4 = v7;
  a4[1] = v6;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  *(_QWORD *)(a1 + 120) = a4;
}

void md::Logic<md::ResolvedSceneLogic,md::SceneContext,md::LogicDependencies<gdc::TypeList<md::PendingSceneContext>,gdc::TypeList<md::DrapingContext,md::FlyoverCompleteTileDataContext>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

uint64_t std::pair<gdc::LayerDataRequestKey,gdc::DebugTreeNode>::~pair(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v2 = *(_QWORD *)(a1 + 184);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 192);
    v4 = *(void **)(a1 + 184);
    if (v3 != v2)
    {
      do
      {
        v3 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v3);
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 184);
    }
    *(_QWORD *)(a1 + 192) = v2;
    operator delete(v4);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)(a1 + 160));
  if (*(char *)(a1 + 159) < 0)
  {
    operator delete(*(void **)(a1 + 136));
    if ((*(char *)(a1 + 135) & 0x80000000) == 0)
    {
LABEL_8:
      if (!*(_BYTE *)(a1 + 96))
        goto LABEL_10;
      goto LABEL_9;
    }
  }
  else if ((*(char *)(a1 + 135) & 0x80000000) == 0)
  {
    goto LABEL_8;
  }
  operator delete(*(void **)(a1 + 112));
  if (*(_BYTE *)(a1 + 96))
LABEL_9:
    *(_BYTE *)(a1 + 96) = 0;
LABEL_10:
  v5 = *(void **)(a1 + 16);
  if (v5 != *(void **)(a1 + 32))
    free(v5);
  return a1;
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::LayerDataRequestKey,gdc::DebugTreeNode>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::LayerDataRequestKey,gdc::DebugTreeNode>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:nn180100]<std::pair<gdc::LayerDataRequestKey const,gdc::DebugTreeNode>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
  return a1;
}

void std::__destroy_at[abi:nn180100]<std::pair<gdc::LayerDataRequestKey const,gdc::DebugTreeNode>,0>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v2 = *(_QWORD *)(a1 + 184);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 192);
    v4 = *(void **)(a1 + 184);
    if (v3 != v2)
    {
      do
      {
        v3 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v3);
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 184);
    }
    *(_QWORD *)(a1 + 192) = v2;
    operator delete(v4);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)(a1 + 160));
  if (*(char *)(a1 + 159) < 0)
  {
    operator delete(*(void **)(a1 + 136));
    if ((*(char *)(a1 + 135) & 0x80000000) == 0)
    {
LABEL_8:
      if (!*(_BYTE *)(a1 + 96))
        goto LABEL_10;
      goto LABEL_9;
    }
  }
  else if ((*(char *)(a1 + 135) & 0x80000000) == 0)
  {
    goto LABEL_8;
  }
  operator delete(*(void **)(a1 + 112));
  if (*(_BYTE *)(a1 + 96))
LABEL_9:
    *(_BYTE *)(a1 + 96) = 0;
LABEL_10:
  v5 = *(void **)(a1 + 16);
  if (v5 != *(void **)(a1 + 32))
    free(v5);
}

_QWORD *md::LogicDependencies<gdc::TypeList<md::PendingSceneContext>,gdc::TypeList<md::DrapingContext,md::FlyoverCompleteTileDataContext>>::resolveDependencies(_QWORD *result, uint64_t a2, unint64_t a3)
{
  uint8x8_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (!a3)
  {
    v5 = 0;
    v6 = 0;
    goto LABEL_71;
  }
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)a3);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = 0x9F2276D081C2CB20;
    if (a3 <= 0x9F2276D081C2CB20)
      v4 = 0x9F2276D081C2CB20 % a3;
  }
  else
  {
    v4 = (a3 - 1) & 0x9F2276D081C2CB20;
  }
  v7 = *(_QWORD **)(a2 + 8 * v4);
  if (!v7)
    goto LABEL_25;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_25;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v10 = v8[1];
      if (v10 == 0x9F2276D081C2CB20)
      {
        if (v8[2] == 0x9F2276D081C2CB20)
          goto LABEL_23;
      }
      else if ((v10 & (a3 - 1)) != v4)
      {
        goto LABEL_25;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_25;
    }
  }
  while (1)
  {
    v9 = v8[1];
    if (v9 == 0x9F2276D081C2CB20)
      break;
    if (v9 >= a3)
      v9 %= a3;
    if (v9 != v4)
      goto LABEL_25;
LABEL_12:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_25;
  }
  if (v8[2] != 0x9F2276D081C2CB20)
    goto LABEL_12;
LABEL_23:
  v11 = v8[5];
  if (*(_QWORD *)(v11 + 8) == 0x9F2276D081C2CB20)
  {
    v5 = *(_QWORD *)(v11 + 32);
    goto LABEL_26;
  }
LABEL_25:
  v5 = 0;
LABEL_26:
  if (v3.u32[0] > 1uLL)
  {
    v12 = 0x1B9039CBDAB12E5CLL;
    if (a3 <= 0x1B9039CBDAB12E5CLL)
      v12 = 0x1B9039CBDAB12E5CLL % a3;
  }
  else
  {
    v12 = (a3 - 1) & 0x1B9039CBDAB12E5CLL;
  }
  v13 = *(_QWORD **)(a2 + 8 * v12);
  if (!v13)
    goto LABEL_48;
  v14 = (_QWORD *)*v13;
  if (!v14)
    goto LABEL_48;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v16 = v14[1];
      if (v16 == 0x1B9039CBDAB12E5CLL)
      {
        if (v14[2] == 0x1B9039CBDAB12E5CLL)
          goto LABEL_46;
      }
      else if ((v16 & (a3 - 1)) != v12)
      {
        goto LABEL_48;
      }
      v14 = (_QWORD *)*v14;
      if (!v14)
        goto LABEL_48;
    }
  }
  while (2)
  {
    v15 = v14[1];
    if (v15 != 0x1B9039CBDAB12E5CLL)
    {
      if (v15 >= a3)
        v15 %= a3;
      if (v15 != v12)
        goto LABEL_48;
      goto LABEL_35;
    }
    if (v14[2] != 0x1B9039CBDAB12E5CLL)
    {
LABEL_35:
      v14 = (_QWORD *)*v14;
      if (!v14)
        goto LABEL_48;
      continue;
    }
    break;
  }
LABEL_46:
  v17 = v14[5];
  if (*(_QWORD *)(v17 + 8) == 0x1B9039CBDAB12E5CLL)
  {
    v6 = *(_QWORD *)(v17 + 32);
    goto LABEL_49;
  }
LABEL_48:
  v6 = 0;
LABEL_49:
  if (v3.u32[0] > 1uLL)
  {
    v18 = 0xD3D7935EF848FCE7;
    if (a3 <= 0xD3D7935EF848FCE7)
      v18 = 0xD3D7935EF848FCE7 % a3;
  }
  else
  {
    v18 = (a3 - 1) & 0xD3D7935EF848FCE7;
  }
  v19 = *(_QWORD **)(a2 + 8 * v18);
  if (!v19)
    goto LABEL_71;
  v20 = (_QWORD *)*v19;
  if (!v20)
    goto LABEL_71;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v22 = v20[1];
      if (v22 == 0xD3D7935EF848FCE7)
      {
        if (v20[2] == 0xD3D7935EF848FCE7)
          goto LABEL_69;
      }
      else if ((v22 & (a3 - 1)) != v18)
      {
        goto LABEL_71;
      }
      v20 = (_QWORD *)*v20;
      if (!v20)
        goto LABEL_71;
    }
  }
  while (1)
  {
    v21 = v20[1];
    if (v21 == 0xD3D7935EF848FCE7)
      break;
    if (v21 >= a3)
      v21 %= a3;
    if (v21 != v18)
      goto LABEL_71;
LABEL_58:
    v20 = (_QWORD *)*v20;
    if (!v20)
      goto LABEL_71;
  }
  if (v20[2] != 0xD3D7935EF848FCE7)
    goto LABEL_58;
LABEL_69:
  v23 = v20[5];
  if (*(_QWORD *)(v23 + 8) != 0xD3D7935EF848FCE7)
  {
LABEL_71:
    v24 = 0;
    goto LABEL_72;
  }
  v24 = *(_QWORD *)(v23 + 32);
LABEL_72:
  *result = v5;
  result[1] = v6;
  result[2] = v24;
  return result;
}

_QWORD *gdc::ManagedObjectHolder<md::SceneContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *a1 = &off_1E42B0B18;
  v2 = a1[4];
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    MEMORY[0x1A1AF4E00](v2, 0x20C40A4A59CD2);
  }
  return a1;
}

void gdc::ManagedObjectHolder<md::SceneContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_1E42B0B18;
  v1 = a1[4];
  if (v1)
  {
    v2 = *(std::__shared_weak_count **)(v1 + 8);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    MEMORY[0x1A1AF4E00](v1, 0x20C40A4A59CD2);
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::SceneContext>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void md::Logic<md::ResolvedSceneLogic,md::SceneContext,md::LogicDependencies<gdc::TypeList<md::PendingSceneContext>,gdc::TypeList<md::DrapingContext,md::FlyoverCompleteTileDataContext>>>::allocateContext(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void sub_19FE52624(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;

  if (!v4)
  _Unwind_Resume(a1);
}

void sub_19FE526AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19FE52778(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

BOOL md::TextLabelPart::isVisuallySimilar(md::TextLabelPart *this, const md::LabelPart *a2)
{
  _BOOL8 result;
  float v3;
  unsigned __int8 *v4;
  unsigned __int8 **v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  unsigned __int8 *v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  BOOL v17;

  if (*(_DWORD *)((char *)this + 698) != *(_DWORD *)((char *)a2 + 698))
    return 0;
  v3 = *((float *)this + 157);
  if (v3 > 0.0 && (float)(vabds_f32(v3, *((float *)a2 + 157)) / v3) > 0.1)
    return 0;
  v4 = **(unsigned __int8 ***)(*((_QWORD *)this + 72) + 16);
  v5 = **(unsigned __int8 ****)(*((_QWORD *)a2 + 72) + 16);
  v6 = v4[23];
  if ((v6 & 0x80u) == 0)
    v7 = (unsigned __int8 *)v4[23];
  else
    v7 = (unsigned __int8 *)*((_QWORD *)v4 + 1);
  v8 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
  v9 = (char)v8;
  if ((char)v8 < 0)
    v8 = v5[1];
  if (v7 != v8)
    return 0;
  if (v9 >= 0)
    v10 = **(unsigned __int8 ***)(*((_QWORD *)a2 + 72) + 16);
  else
    v10 = *v5;
  if ((v6 & 0x80) != 0)
    return memcmp(*(const void **)v4, v10, *((_QWORD *)v4 + 1)) == 0;
  if (!v4[23])
    return 1;
  v11 = v6 - 1;
  do
  {
    v13 = *v4++;
    v12 = v13;
    v15 = *v10++;
    v14 = v15;
    v17 = v11-- != 0;
    result = v12 == v14;
  }
  while (v12 == v14 && v17);
  return result;
}

uint64_t md::TextLabelPart::debugString@<X0>(md::TextLabelPart *this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  std::ios_base *v8;
  uint64_t **v9;
  std::ios_base *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  char v26;
  _QWORD *v27;
  const std::ios_base *v28;
  const std::locale::facet *v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  CGGlyph v35;
  __CFString *v36;
  __CFString *v37;
  __CFString *v38;
  const char *v39;
  size_t v40;
  size_t v41;
  std::locale::__imp *p_dst;
  uint64_t v43;
  uint64_t v44;
  void *locale;
  uint64_t v46;
  __CFString *v47;
  const char *v48;
  size_t v49;
  size_t v50;
  void *p_p;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  size_t v56;
  void *v57;
  unint64_t v58;
  const void **v59;
  const void *v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  void *v64;
  void *v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  void *v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  size_t v89;
  unint64_t v90;
  const void **v91;
  const void *v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  void *v99;
  size_t v100;
  int64_t v101;
  _QWORD *v102;
  _QWORD v103[2];
  _QWORD v104[3];
  uint64_t v105;
  unint64_t v106;
  void *v107[2];
  __int128 v108;
  int v109;
  uint64_t v110[19];
  void *__p;
  size_t v112;
  int64_t v113;
  std::locale __dst;
  size_t v115;
  int64_t v116;
  void *v117[3];
  _BYTE v118[16];
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  __int128 v122;
  __int128 v123;
  int v124;
  uint64_t v125[22];

  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = *(_QWORD **)(MEMORY[0x1E0DE4F60] + 8);
  v7 = *(void **)(MEMORY[0x1E0DE4F60] + 16);
  v110[0] = MEMORY[0x1E0DE4FE0] + 64;
  v102 = v6;
  *(_QWORD *)((char *)&v103[-1] + *(v6 - 3)) = v7;
  v8 = (std::ios_base *)((char *)&v103[-1] + *(v102 - 3));
  std::ios_base::init(v8, v103);
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v102 = (_QWORD *)(v4 + 24);
  v110[0] = v5;
  std::streambuf::basic_streambuf();
  v103[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v107 = 0u;
  v108 = 0u;
  v109 = 16;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v102, (uint64_t)"Text ", 5);
  v9 = (uint64_t **)*((_QWORD *)this + 72);
  v125[0] = v4 + 64;
  v117[0] = v6;
  *(void **)((char *)v117 + *(v6 - 3)) = v7;
  v10 = (std::ios_base *)((char *)v117 + *((_QWORD *)v117[0] - 3));
  std::ios_base::init(v10, &v117[1]);
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  v117[0] = (void *)(v4 + 24);
  v125[0] = v4 + 64;
  std::streambuf::basic_streambuf();
  v117[1] = (void *)(MEMORY[0x1E0DE4FB8] + 16);
  v122 = 0u;
  v123 = 0u;
  v124 = 16;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v117, (uint64_t)"\"", 1);
  v11 = *v9[2];
  v12 = *(char *)(v11 + 23);
  if (v12 >= 0)
    v13 = *v9[2];
  else
    v13 = *(_QWORD *)v11;
  if (v12 >= 0)
    v14 = *(unsigned __int8 *)(v11 + 23);
  else
    v14 = *(_QWORD *)(v11 + 8);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v117, v13, v14);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v117, (uint64_t)"\"", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v117, (uint64_t)" (", 2);
  v15 = v9[2][2];
  v16 = *(char *)(v15 + 23);
  if (v16 >= 0)
    v17 = v9[2][2];
  else
    v17 = *(_QWORD *)v15;
  if (v16 >= 0)
    v18 = *(unsigned __int8 *)(v15 + 23);
  else
    v18 = *(_QWORD *)(v15 + 8);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v117, v17, v18);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v117, (uint64_t)"/", 1);
  v19 = v117[0];
  *(_DWORD *)((char *)&v117[1] + *((_QWORD *)v117[0] - 3)) = *(_DWORD *)((_BYTE *)&v117[1] + *((_QWORD *)v117[0] - 3)) & 0xFFFFFEFB | 4;
  *(void **)((char *)&v117[2] + *(v19 - 3)) = (void *)2;
  std::ostream::operator<<();
  v20 = v9[2][2];
  if (*(float *)(v20 + 24) != 0.0)
  {
    *(void **)((char *)&v117[2] + *((_QWORD *)v117[0] - 3)) = 0;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v117, (uint64_t)"/", 1);
    std::ostream::operator<<();
    v20 = v9[2][2];
  }
  if (*(_BYTE *)(v20 + 37))
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v117, (uint64_t)"/up", 3);
    v20 = v9[2][2];
  }
  if (*(_BYTE *)(v20 + 38))
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v117, (uint64_t)"/down", 5);
    v20 = v9[2][2];
  }
  if (*(_BYTE *)(v20 + 39))
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v117, (uint64_t)"/title", 6);
    v20 = v9[2][2];
  }
  if (*(_BYTE *)(v20 + 36))
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v117, (uint64_t)"/ri", 3);
    v20 = v9[2][2];
  }
  if (*(_BYTE *)(v20 + 40))
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v117, (uint64_t)"/sc", 3);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v117, (uint64_t)")", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v117, (uint64_t)"validZooms=", 11);
  *(_DWORD *)((char *)&v117[1] + *((_QWORD *)v117[0] - 3)) = *(_DWORD *)((_BYTE *)&v117[1] + *((_QWORD *)v117[0] - 3)) & 0xFFFFFFB5 | 8;
  v21 = (_QWORD *)std::ostream::operator<<();
  *(_DWORD *)((char *)v21 + *(_QWORD *)(*v21 - 24) + 8) = *(_DWORD *)((_BYTE *)v21 + *(_QWORD *)(*v21 - 24) + 8) & 0xFFFFFFB5 | 2;
  if (a2)
  {
    v22 = *v9[2];
    if (*(char *)(v22 + 23) < 0)
    {
      v23 = *(_QWORD *)(v22 + 8);
      if (!v23)
      {
LABEL_36:
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v117, (uint64_t)"\n", 1);
        v32 = v9[4];
        v33 = v9[5];
        while (1)
        {
          if (v32 == v33)
          {
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v117, (uint64_t)"\n", 1);
            goto LABEL_79;
          }
          v34 = *v32;
          if (*v32)
          {
            if (*(_BYTE *)(v34 + 61))
              break;
          }
LABEL_37:
          v32 += 11;
        }
        v35 = *(_WORD *)(v34 + 56);
        v36 = (__CFString *)CGFontCopyFullName(*(CGFontRef *)(v34 + 16));
        v37 = (__CFString *)CGFontCopyGlyphNameForGlyph(*(CGFontRef *)(*v32 + 16), v35);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v117, (uint64_t)"\n  ", 3);
        v38 = objc_retainAutorelease(v36);
        v39 = (const char *)-[__CFString UTF8String](v38, "UTF8String");
        v40 = strlen(v39);
        if (v40 > 0x7FFFFFFFFFFFFFF7)
          abort();
        v41 = v40;
        if (v40 >= 0x17)
        {
          v43 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v40 | 7) != 0x17)
            v43 = v40 | 7;
          v44 = v43 + 1;
          p_dst = (std::locale::__imp *)operator new(v43 + 1);
          v115 = v41;
          v116 = v44 | 0x8000000000000000;
          __dst.__locale_ = p_dst;
        }
        else
        {
          HIBYTE(v116) = v40;
          p_dst = (std::locale::__imp *)&__dst;
          if (!v40)
          {
LABEL_49:
            *((_BYTE *)p_dst + v41) = 0;
            if (v116 >= 0)
              locale = &__dst;
            else
              locale = __dst.__locale_;
            if (v116 >= 0)
              v46 = HIBYTE(v116);
            else
              v46 = v115;
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v117, (uint64_t)locale, v46);
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v117, (uint64_t)" - ", 3);
            v47 = objc_retainAutorelease(v37);
            v48 = (const char *)-[__CFString UTF8String](v47, "UTF8String");
            v49 = strlen(v48);
            if (v49 > 0x7FFFFFFFFFFFFFF7)
              abort();
            v50 = v49;
            if (v49 >= 0x17)
            {
              v52 = (v49 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v49 | 7) != 0x17)
                v52 = v49 | 7;
              v53 = v52 + 1;
              p_p = operator new(v52 + 1);
              v112 = v50;
              v113 = v53 | 0x8000000000000000;
              __p = p_p;
            }
            else
            {
              HIBYTE(v113) = v49;
              p_p = &__p;
              if (!v49)
              {
LABEL_63:
                *((_BYTE *)p_p + v50) = 0;
                if (v113 >= 0)
                  v54 = &__p;
                else
                  v54 = __p;
                if (v113 >= 0)
                  v55 = HIBYTE(v113);
                else
                  v55 = v112;
                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v117, (uint64_t)v54, v55);
                if (SHIBYTE(v113) < 0)
                {
                  operator delete(__p);
                  if ((SHIBYTE(v116) & 0x80000000) == 0)
                  {
LABEL_71:
                    if (!v38)
                    {
LABEL_76:
                      if (v47)
                        CFRelease(v47);
                      goto LABEL_37;
                    }
LABEL_75:
                    CFRelease(v38);
                    goto LABEL_76;
                  }
                }
                else if ((SHIBYTE(v116) & 0x80000000) == 0)
                {
                  goto LABEL_71;
                }
                operator delete(__dst.__locale_);
                if (!v38)
                  goto LABEL_76;
                goto LABEL_75;
              }
            }
            memmove(p_p, v48, v50);
            goto LABEL_63;
          }
        }
        memmove(p_dst, v39, v41);
        goto LABEL_49;
      }
    }
    else
    {
      v23 = *(unsigned __int8 *)(v22 + 23);
      if (!*(_BYTE *)(v22 + 23))
        goto LABEL_36;
    }
    v24 = 0;
    do
    {
      v25 = (uint64_t *)*v9[2];
      if (*((char *)v25 + 23) < 0)
        v25 = (uint64_t *)*v25;
      v26 = *((_BYTE *)v25 + v24);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v117, (uint64_t)"\n  U+0x", 7);
      v27 = v117[0];
      *(_DWORD *)((char *)&v117[1] + *((_QWORD *)v117[0] - 3)) |= 0x4000u;
      v28 = (const std::ios_base *)((char *)v117 + *(v27 - 3));
      if (v28[1].__fmtflags_ == -1)
      {
        std::ios_base::getloc(v28);
        v29 = std::locale::use_facet(&__dst, MEMORY[0x1E0DE4A90]);
        ((void (*)(const std::locale::facet *, uint64_t))v29->__vftable[2].~facet_0)(v29, 32);
        std::locale::~locale(&__dst);
        v27 = v117[0];
      }
      v28[1].__fmtflags_ = 48;
      *(_QWORD *)&v118[*(v27 - 3)] = 4;
      *(_DWORD *)((char *)&v117[1] + *(v27 - 3)) = *(_DWORD *)((_BYTE *)&v117[1] + *(v27 - 3)) & 0xFFFFFFB5 | 8;
      v30 = (_QWORD *)std::ostream::operator<<();
      v31 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v30, (uint64_t)" : ", 3);
      *(_DWORD *)((char *)v31 + *(_QWORD *)(*v31 - 24) + 8) &= ~8u;
      LOBYTE(__dst.__locale_) = v26;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v31, (uint64_t)&__dst, 1);
      ++v24;
    }
    while (v23 != v24);
    goto LABEL_36;
  }
LABEL_79:
  if ((v124 & 0x10) != 0)
  {
    v58 = *((_QWORD *)&v123 + 1);
    if (*((_QWORD *)&v123 + 1) < v121)
    {
      *((_QWORD *)&v123 + 1) = v121;
      v58 = v121;
    }
    v59 = (const void **)&v120;
  }
  else
  {
    if ((v124 & 8) == 0)
    {
      v56 = 0;
      HIBYTE(v101) = 0;
      v57 = &v99;
      goto LABEL_94;
    }
    v59 = (const void **)v118;
    v58 = v119;
  }
  v60 = *v59;
  v56 = v58 - (_QWORD)*v59;
  if (v56 > 0x7FFFFFFFFFFFFFF7)
    abort();
  if (v56 >= 0x17)
  {
    v61 = (v56 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v56 | 7) != 0x17)
      v61 = v56 | 7;
    v62 = v61 + 1;
    v57 = operator new(v61 + 1);
    v100 = v56;
    v101 = v62 | 0x8000000000000000;
    v99 = v57;
    goto LABEL_93;
  }
  HIBYTE(v101) = v58 - *(_BYTE *)v59;
  v57 = &v99;
  if (v56)
LABEL_93:
    memmove(v57, v60, v56);
LABEL_94:
  *((_BYTE *)v57 + v56) = 0;
  v63 = (void *)*MEMORY[0x1E0DE4F60];
  v117[0] = v63;
  v64 = *(void **)(MEMORY[0x1E0DE4F60] + 24);
  *(void **)((char *)v117 + *((_QWORD *)v63 - 3)) = v64;
  v117[1] = (void *)(MEMORY[0x1E0DE4FB8] + 16);
  if (SBYTE7(v123) < 0)
    operator delete((void *)v122);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1A1AF4D64](v125);
  if (v101 >= 0)
    v65 = &v99;
  else
    v65 = v99;
  if (v101 >= 0)
    v66 = HIBYTE(v101);
  else
    v66 = v100;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v102, (uint64_t)v65, v66);
  if (SHIBYTE(v101) < 0)
    operator delete(v99);
  v67 = v102;
  *(_DWORD *)((char *)v103 + *(v102 - 3)) = *(_DWORD *)((_BYTE *)v103 + *(v102 - 3)) & 0xFFFFFEFB | 4;
  *(_QWORD *)((char *)&v103[1] + *(v67 - 3)) = 1;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v102, (uint64_t)"\n   font: sz=", 13);
  v68 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v68, (uint64_t)"(resolved=", 10);
  v69 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v69, (uint64_t)")", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v102, (uint64_t)" tracking=", 10);
  std::ostream::operator<<();
  *(_QWORD *)((char *)&v103[1] + *(v102 - 3)) = 2;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v102, (uint64_t)" opacity=", 9);
  v70 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v70, (uint64_t)"(resolved=", 10);
  v71 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v71, (uint64_t)")\n", 2);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v102, (uint64_t)"   text: clr=", 13);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v102, (uint64_t)"(", 1);
  v72 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v72, (uint64_t)",", 1);
  v73 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v73, (uint64_t)",", 1);
  v74 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v74, (uint64_t)",", 1);
  v75 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v75, (uint64_t)")", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v102, (uint64_t)" src=", 5);
  v76 = a3;
  switch(*((_BYTE *)this + 928))
  {
    case 0:
      v77 = 7;
      HIBYTE(v117[2]) = 7;
      strcpy((char *)v117, "Default");
      break;
    case 1:
      v77 = 4;
      HIBYTE(v117[2]) = 4;
      strcpy((char *)v117, "None");
      break;
    case 2:
      v77 = 5;
      HIBYTE(v117[2]) = 5;
      strcpy((char *)v117, "Style");
      break;
    case 3:
      v77 = 11;
      HIBYTE(v117[2]) = 11;
      strcpy((char *)v117, "TransitLine");
      break;
    case 4:
      v77 = 19;
      HIBYTE(v117[2]) = 19;
      strcpy((char *)v117, "LabelSecondaryColor");
      break;
    case 5:
      v77 = 12;
      HIBYTE(v117[2]) = 12;
      strcpy((char *)v117, "IconPackText");
      break;
    case 6:
      strcpy((char *)v117, "IconPackAnnotationIcon");
      HIBYTE(v117[2]) = 22;
      v77 = 22;
      break;
    default:
      v77 = 0;
      HIBYTE(v117[2]) = 0;
      LOBYTE(v117[0]) = 0;
      break;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v102, (uint64_t)v117, v77);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v102, (uint64_t)"\n", 1);
  if (SHIBYTE(v117[2]) < 0)
    operator delete(v117[0]);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v102, (uint64_t)"   halo: sz=", 12);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v102, (uint64_t)" clr=", 5);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v102, (uint64_t)"(", 1);
  v78 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v78, (uint64_t)",", 1);
  v79 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v79, (uint64_t)",", 1);
  v80 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v80, (uint64_t)",", 1);
  v81 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v81, (uint64_t)")", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v102, (uint64_t)"\n", 1);
  if (*((float *)this + 197) >= 0.0)
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v102, (uint64_t)"   shadow: sz=", 14);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v102, (uint64_t)" offset=", 8);
    v82 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v82, (uint64_t)",", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v102, (uint64_t)" clr=", 5);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v102, (uint64_t)"(", 1);
    v83 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v83, (uint64_t)",", 1);
    v84 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v84, (uint64_t)",", 1);
    v85 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v85, (uint64_t)",", 1);
    v86 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v86, (uint64_t)")", 1);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v102, (uint64_t)"\n", 1);
  }
  v87 = v102;
  *(_DWORD *)((char *)v103 + *(v102 - 3)) = *(_DWORD *)((_BYTE *)v103 + *(v102 - 3)) & 0xFFFFFEFB | 4;
  *(_QWORD *)((char *)&v103[1] + *(v87 - 3)) = 0;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v102, (uint64_t)"   pad=", 7);
  v88 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v88, (uint64_t)" ovlpPad=", 9);
  std::ostream::operator<<();
  if ((v109 & 0x10) != 0)
  {
    v90 = *((_QWORD *)&v108 + 1);
    if (*((_QWORD *)&v108 + 1) < v106)
    {
      *((_QWORD *)&v108 + 1) = v106;
      v90 = v106;
    }
    v91 = (const void **)&v105;
  }
  else
  {
    if ((v109 & 8) == 0)
    {
      v89 = 0;
      *((_BYTE *)a3 + 23) = 0;
      goto LABEL_132;
    }
    v91 = (const void **)v104;
    v90 = v104[2];
  }
  v92 = *v91;
  v89 = v90 - (_QWORD)*v91;
  if (v89 > 0x7FFFFFFFFFFFFFF7)
    abort();
  if (v89 >= 0x17)
  {
    v93 = (v89 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v89 | 7) != 0x17)
      v93 = v89 | 7;
    v94 = v93 + 1;
    v95 = operator new(v93 + 1);
    a3[1] = v89;
    a3[2] = v94 | 0x8000000000000000;
    *a3 = v95;
    v76 = v95;
    goto LABEL_131;
  }
  *((_BYTE *)a3 + 23) = v89;
  if (v89)
LABEL_131:
    memmove(v76, v92, v89);
LABEL_132:
  *((_BYTE *)v76 + v89) = 0;
  v102 = v63;
  *(_QWORD *)((char *)&v103[-1] + *((_QWORD *)v63 - 3)) = v64;
  v103[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (SBYTE7(v108) < 0)
    operator delete(v107[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AF4D64](v110);
}

void sub_19FE53954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,std::locale a54,uint64_t a55,uint64_t a56,void *a57)
{
  std::ostringstream::~ostringstream((uint64_t)&a57);
  std::ostringstream::~ostringstream((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void md::TextLabelPart::populateDebugNode(md::TextLabelPart *this, gdc::DebugTreeNode *a2)
{
  uint64_t v4;
  char *ChildNode;
  _QWORD *v6;
  size_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  __int128 *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  float *v16;
  double v17;
  char *v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  char *v24;
  double v25;
  _QWORD v26[7];
  int v27;
  _BYTE v28[16];
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  _BYTE v34[16];
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  _BYTE v40[16];
  double v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  _BYTE v46[16];
  double v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  _BYTE v52[16];
  double v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  _BYTE __dst[24];
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  std::string v63;
  void *v64[2];
  char v65;
  std::string v66;
  int v67;
  __int128 v68[2];
  __int128 v69;
  uint64_t v70;
  int v71;

  v4 = *((_QWORD *)this + 74);
  if (!v4)
    goto LABEL_35;
  BYTE7(v68[1]) = 9;
  strcpy((char *)v68, "LabelText");
  ChildNode = gdc::DebugTreeNode::createChildNode((uint64_t)a2, v68);
  v65 = 4;
  strcpy((char *)v64, "Text");
  v6 = **(_QWORD ***)(v4 + 16);
  if ((*((char *)v6 + 23) & 0x80000000) == 0)
  {
    v7 = *((unsigned __int8 *)v6 + 23);
    if (v7 < 0x17)
      goto LABEL_4;
LABEL_8:
    v9 = (v7 & 0x7FFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v9 = v7 | 7;
    v10 = v9 + 1;
    v8 = operator new(v9 + 1);
    *(_QWORD *)&__dst[8] = v7;
    *(_QWORD *)&__dst[16] = v10 | 0x8000000000000000;
    *(_QWORD *)__dst = v8;
    goto LABEL_11;
  }
  v7 = v6[1];
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v6 = (_QWORD *)*v6;
  if (v7 >= 0x17)
    goto LABEL_8;
LABEL_4:
  __dst[23] = v7;
  v8 = __dst;
  if (v7)
LABEL_11:
    memmove(v8, v6, v7);
  v8[v7] = 0;
  v69 = 0uLL;
  v70 = 0;
  v71 = 4;
  v11 = __dst[23];
  if ((__dst[23] & 0x80000000) != 0)
  {
    std::string::__assign_no_alias<true>(&v69, *(void **)__dst, *(size_t *)&__dst[8]);
  }
  else
  {
    v69 = *(_OWORD *)__dst;
    v70 = *(_QWORD *)&__dst[16];
  }
  gdc::DebugTreeNode::addProperty((uint64_t)ChildNode, (uint64_t)v64, (uint64_t)v68);
  if ((SHIBYTE(v70) & 0x80000000) == 0)
  {
    if ((v11 & 0x80000000) == 0)
      goto LABEL_17;
LABEL_21:
    operator delete(*(void **)__dst);
    if ((v65 & 0x80000000) == 0)
      goto LABEL_18;
    goto LABEL_22;
  }
  operator delete((void *)v69);
  if (v11 < 0)
    goto LABEL_21;
LABEL_17:
  if ((v65 & 0x80000000) == 0)
    goto LABEL_18;
LABEL_22:
  operator delete(v64[0]);
LABEL_18:
  __dst[23] = 16;
  strcpy(__dst, "Font Family Name");
  v12 = *(__int128 **)(*(_QWORD *)(v4 + 16) + 16);
  if (*((char *)v12 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v63, *(const std::string::value_type **)v12, *((_QWORD *)v12 + 1));
  }
  else
  {
    v13 = *v12;
    v63.__r_.__value_.__r.__words[2] = *((_QWORD *)v12 + 2);
    *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v13;
  }
  memset(&v66, 0, sizeof(v66));
  v67 = 4;
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    std::string::__assign_no_alias<true>(&v66, v63.__r_.__value_.__l.__data_, v63.__r_.__value_.__l.__size_);
  else
    v66 = v63;
  gdc::DebugTreeNode::addProperty((uint64_t)ChildNode, (uint64_t)__dst, (uint64_t)v64);
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v66.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v63.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_29;
LABEL_32:
    operator delete(v63.__r_.__value_.__l.__data_);
    goto LABEL_29;
  }
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_32;
LABEL_29:
  v14 = *(_QWORD *)(v4 + 32);
  v15 = *(_QWORD *)(v4 + 40);
  *((_BYTE *)&v63.__r_.__value_.__s + 23) = 9;
  strcpy((char *)&v63, "Font Size");
  if (v15 == v14)
    v16 = (float *)(*(_QWORD *)(*(_QWORD *)(v4 + 16) + 16) + 28);
  else
    v16 = (float *)(v14 + 80);
  v17 = *v16;
  v60 = 0;
  v61 = 0;
  v59 = 0;
  v62 = 2;
  *(double *)&__dst[16] = v17;
  gdc::DebugTreeNode::addProperty((uint64_t)ChildNode, (uint64_t)&v63, (uint64_t)__dst);
LABEL_35:
  BYTE7(v68[1]) = 13;
  strcpy((char *)v68, "TextLabelPart");
  v18 = gdc::DebugTreeNode::createChildNode((uint64_t)a2, v68);
  v19 = *((float *)this + 185);
  BYTE7(v68[1]) = 9;
  strcpy((char *)v68, "Font Size");
  v55 = 0;
  v56 = 0;
  v54 = 0;
  v57 = 2;
  v53 = v19;
  gdc::DebugTreeNode::addProperty((uint64_t)v18, (uint64_t)v68, (uint64_t)v52);
  v20 = *((float *)this + 187);
  BYTE7(v68[1]) = 20;
  strcpy((char *)v68, "Label Text Font Size");
  v49 = 0;
  v50 = 0;
  v48 = 0;
  v51 = 2;
  v47 = v20;
  gdc::DebugTreeNode::addProperty((uint64_t)v18, (uint64_t)v68, (uint64_t)v46);
  v21 = *((float *)this + 189);
  BYTE7(v68[1]) = 9;
  strcpy((char *)v68, "Halo Size");
  v43 = 0;
  v44 = 0;
  v42 = 0;
  v45 = 2;
  v41 = v21;
  gdc::DebugTreeNode::addProperty((uint64_t)v18, (uint64_t)v68, (uint64_t)v40);
  v22 = *((float *)this + 193);
  BYTE7(v68[1]) = 12;
  strcpy((char *)v68, "Stroke Width");
  v37 = 0;
  v38 = 0;
  v36 = 0;
  v39 = 2;
  v35 = v22;
  gdc::DebugTreeNode::addProperty((uint64_t)v18, (uint64_t)v68, (uint64_t)v34);
  v23 = *((float *)this + 192);
  BYTE7(v68[1]) = 15;
  strcpy((char *)v68, "Extrusion Depth");
  v31 = 0;
  v32 = 0;
  v30 = 0;
  v33 = 2;
  v29 = v23;
  gdc::DebugTreeNode::addProperty((uint64_t)v18, (uint64_t)v68, (uint64_t)v28);
  v24 = (char *)operator new(0x20uLL);
  *(_QWORD *)&v68[0] = v24;
  *(__int128 *)((char *)v68 + 8) = xmmword_19FFB3800;
  strcpy(v24, "Resolved Extrusion Depth");
  v25 = *((float *)this + 227);
  memset(&v26[4], 0, 24);
  v27 = 2;
  *(double *)&v26[2] = v25;
  gdc::DebugTreeNode::addProperty((uint64_t)v18, (uint64_t)v68, (uint64_t)v26);
  operator delete(v24);
}

uint64_t md::TextLabelPart::shadowColorForSource@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, _DWORD *a3@<X8>)
{
  uint64_t result;
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  float *v9;

  result = *a2;
  v6 = *(unsigned __int8 *)(a1 + 864) == 1;
  v7 = *a2 + 280;
  if (*(_BYTE *)(a1 + 864) == 1)
    v8 = 6;
  else
    v8 = 0;
  v9 = *(float **)(v7 + 8 * (*(_BYTE *)(a1 + 864) == 1));
  if (v9)
  {
    if (vabds_f32(v9[2], *(float *)(result + 104)) >= 0.01)
    {
      result = md::LabelStyle::updateStyleGroup<md::LabelTextStyleGroup>(result, (uint64_t)v9, v8);
      v9 = *(float **)(v7 + 8 * v6);
    }
  }
  else
  {
    result = md::LabelStyle::prepareStyleGroup<md::LabelTextStyleGroup>(result, v8);
    v9 = (float *)result;
    *(_QWORD *)(v7 + 8 * v6) = result;
  }
  *a3 = *(_DWORD *)(*(_QWORD *)v9 + 24);
  return result;
}

void std::__function::__func<md::TextLabelPart::pushToRenderModel(md::LabelRenderModel &,float)::$_0,std::allocator<md::TextLabelPart::pushToRenderModel(md::LabelRenderModel &,float)::$_0>,void ()(md::LabelRenderDescriptor const&,md::GlyphMeshData &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::TextLabelPart::pushToRenderModel(md::LabelRenderModel &,float)::$_0,std::allocator<md::TextLabelPart::pushToRenderModel(md::LabelRenderModel &,float)::$_0>,void ()(md::LabelRenderDescriptor const&,md::GlyphMeshData &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CBB58;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::TextLabelPart::pushToRenderModel(md::LabelRenderModel &,float)::$_0,std::allocator<md::TextLabelPart::pushToRenderModel(md::LabelRenderModel &,float)::$_0>,void ()(md::LabelRenderDescriptor const&,md::GlyphMeshData &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CBB58;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::TextLabelPart::pushToRenderModel(md::LabelRenderModel &,float)::$_0,std::allocator<md::TextLabelPart::pushToRenderModel(md::LabelRenderModel &,float)::$_0>,void ()(md::LabelRenderDescriptor const&,md::GlyphMeshData &)>::operator()(uint64_t a1, unsigned __int16 *a2, char **a3, double a4, double a5, uint8x8_t a6, uint8x8_t a7)
{
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  int32x4_t v14;
  int32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  void **v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  float v40;
  float v48;
  float v49;
  float v50;
  float v51;
  float *v52;
  uint64_t v53;
  float *v54;
  float *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  float v59;
  _DWORD *v60;
  float v61;
  int8x16_t v62;
  double v63;
  int32x4_t v64;
  double v65;
  int32x4_t v66;
  double v67;
  int32x4_t v68;
  int8x16_t v69;
  float *v70;
  float *v71;
  float v72;
  float v73;
  float *v74;
  float v75;
  float v76;
  float v77;
  float v78;
  char *v79;
  void **v80;

  v9 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v9 + 565))
  {
    a3[8] = (char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v9 + 144))(*(_QWORD *)(a1 + 8));
    if (*(_BYTE *)(v9 + 866))
    {
      a3[9] = *(char **)(v9 + 776);
      v10 = *(_DWORD *)(v9 + 908);
      *((_DWORD *)a3 + 20) = *(_DWORD *)(v9 + 772);
      *((_DWORD *)a3 + 21) = v10;
      *((_BYTE *)a3 + 88) = *(_BYTE *)(v9 + 822);
      *((_BYTE *)a3 + 89) = *(_BYTE *)(v9 + 823);
      *((_BYTE *)a3 + 90) = *(_BYTE *)(v9 + 824);
      *((_BYTE *)a3 + 91) = *(_BYTE *)(v9 + 825);
      *((_BYTE *)a3 + 92) = *(_BYTE *)(v9 + 818);
      *((_BYTE *)a3 + 93) = *(_BYTE *)(v9 + 819);
      *((_BYTE *)a3 + 94) = *(_BYTE *)(v9 + 820);
      *((_BYTE *)a3 + 95) = *(_BYTE *)(v9 + 821);
    }
  }
  v11 = *(unsigned __int8 *)(v9 + 808);
  if (*(_BYTE *)(v9 + 808))
    v12 = a2[17] - 1;
  else
    v12 = a2[18] + 1;
  if (*(_BYTE *)(v9 + 808))
    v13 = a2[18];
  else
    v13 = a2[17];
  *((_DWORD *)a3 + 6) = *(_DWORD *)(v9 + 552);
  v14 = vdupq_n_s32(0x3B808081u);
  a7.i32[0] = *(_DWORD *)(v9 + 810);
  v15 = v14;
  *(float *)v15.i32 = *(float *)(v9 + 764) * 0.0039216;
  v16 = (float32x4_t)vzip1q_s32(v15, v15);
  v16.f32[2] = *(float *)(v9 + 764) * 0.0039216;
  *(float32x4_t *)((char *)a3 + 28) = vmulq_f32(v16, vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(a7))));
  a6.i32[0] = *(_DWORD *)(v9 + 814);
  *(float *)v14.i32 = *(float *)(v9 + 764) * 0.0039216;
  v17 = (float32x4_t)vzip1q_s32(v14, v14);
  v17.f32[2] = *(float *)(v9 + 764) * 0.0039216;
  *(float32x4_t *)((char *)a3 + 44) = vmulq_f32(v17, vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(a6))));
  v18 = a2[16];
  v19 = *a3;
  v20 = a3[1];
  v21 = 0xD37A6F4DE9BD37A7 * ((v20 - *a3) >> 2);
  v22 = v18 - v21;
  v80 = (void **)a3;
  if (v18 <= v21)
  {
    if (v18 >= v21)
      goto LABEL_28;
    v35 = &v19[92 * v18];
    goto LABEL_24;
  }
  v23 = a3[2];
  if (0xD37A6F4DE9BD37A7 * ((v23 - v20) >> 2) >= v22)
  {
    bzero(v20, 92 * ((92 * v22 - 92) / 0x5C) + 92);
    v35 = &v20[92 * ((92 * v22 - 92) / 0x5C) + 92];
LABEL_24:
    a3[1] = v35;
    goto LABEL_28;
  }
  v24 = 0xD37A6F4DE9BD37A7 * ((v23 - v19) >> 2);
  v25 = 0xA6F4DE9BD37A6F4ELL * ((v23 - v19) >> 2);
  if (v25 > v18)
    v18 = v25;
  if (v24 >= 0x1642C8590B21642)
    v18 = 0x2C8590B21642C85;
  if (v18 > 0x2C8590B21642C85)
    std::__throw_bad_array_new_length[abi:nn180100]();
  v26 = 92 * v18;
  v27 = (char *)operator new(92 * v18);
  v28 = &v27[92 * v21];
  v79 = &v27[v26];
  bzero(v28, 92 * ((92 * v22 - 92) / 0x5C) + 92);
  v29 = &v28[92 * ((92 * v22 - 92) / 0x5C) + 92];
  if (v20 == v19)
  {
    v30 = v80;
  }
  else
  {
    v30 = v80;
    do
    {
      v31 = *(_OWORD *)(v20 - 92);
      *(_OWORD *)(v28 - 76) = *(_OWORD *)(v20 - 76);
      *(_OWORD *)(v28 - 92) = v31;
      v32 = *(_OWORD *)(v20 - 60);
      v33 = *(_OWORD *)(v20 - 44);
      v34 = *(_OWORD *)(v20 - 28);
      *((_OWORD *)v28 - 1) = *((_OWORD *)v20 - 1);
      *(_OWORD *)(v28 - 28) = v34;
      *(_OWORD *)(v28 - 44) = v33;
      *(_OWORD *)(v28 - 60) = v32;
      v28 -= 92;
      v20 -= 92;
    }
    while (v20 != v19);
    v20 = (char *)*v80;
  }
  *v30 = v28;
  v30[1] = v29;
  v30[2] = v79;
  if (v20)
    operator delete(v20);
LABEL_28:
  if (v12 != v13)
  {
    v36 = 0;
    if (v11)
      v37 = -1;
    else
      v37 = 1;
    v38 = v13 - v12;
    v39 = 16 * v13;
    do
    {
      v53 = *(_QWORD *)(v9 + 880);
      if (*(_BYTE *)(v53 + v39))
      {
        v54 = *(float **)(v53 + v39 + 8);
        v55 = (float *)*v80;
        v56 = (uint64_t)*v80 + 92 * v36;
        v57 = *(_QWORD *)v54;
        v58 = *(_QWORD *)(*(_QWORD *)v54 + 96);
        v59 = (float)(*(float *)(*(_QWORD *)v54 + 104) * v54[20]) / *(float *)(*(_QWORD *)v54 + 48);
        *(float *)(v56 + 88) = *(float *)(v9 + 756) / v59;
        v60 = (_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v58 + 32) + 32))(*(_QWORD *)(v58 + 32));
        *(_DWORD *)(v56 + 48) = *v60;
        *(_DWORD *)(v56 + 52) = v60[1];
        *(_DWORD *)(v56 + 56) = v60[2];
        *(_DWORD *)(v56 + 60) = v60[3];
        v61 = *(float *)(v57 + 64);
        v62.i32[0] = *(_DWORD *)(v57 + 68);
        *(float *)&v63 = v61 + (float)*(unsigned int *)(v57 + 72);
        *(float *)v64.i32 = *(float *)v62.i32 + (float)*(unsigned int *)(v57 + 76);
        *(float *)v56 = v61;
        *(_DWORD *)(v56 + 4) = v62.i32[0];
        *(_DWORD *)(v56 + 8) = 0;
        *(_DWORD *)(v56 + 12) = LODWORD(v63);
        *(_DWORD *)(v56 + 16) = v62.i32[0];
        *(_DWORD *)(v56 + 20) = 0;
        *(_DWORD *)(v56 + 24) = LODWORD(v63);
        *(_DWORD *)(v56 + 28) = v64.i32[0];
        *(_DWORD *)(v56 + 32) = 0;
        *(float *)(v56 + 36) = v61;
        *(_DWORD *)(v56 + 40) = v64.i32[0];
        *(_DWORD *)(v56 + 44) = 0;
        *(float *)&v65 = v59;
        md::TextLabelPart::prepareGlyphVertices(v9, (uint64_t)v54, v56, v65, v62, v63, v64, v66, v67, v68, v69);
        if (*(_BYTE *)(v9 + 565))
        {
          v70 = &v55[23 * v36];
          v71 = v70 + 16;
          if (*(_BYTE *)(v9 + 869))
          {
            v72 = v54[13];
            *v71 = v72;
            v73 = v54[14];
            v74 = &v55[23 * v36];
            v74[17] = v73;
            v75 = v54[15];
            v74[18] = v75;
            v77 = v54[17];
            v76 = v54[18];
            v78 = v54[16];
            v49 = -(float)((float)(v76 * v73) - (float)(v77 * v75));
            v50 = -(float)((float)(v78 * v75) - (float)(v76 * v72));
            v51 = -(float)((float)(v77 * v72) - (float)(v78 * v73));
          }
          else
          {
            v40 = -v54[16];
            _D2 = vmul_n_f32(*(float32x2_t *)(v54 + 13), v54[17]);
            *(float32x2_t *)v71 = _D2;
            v55[23 * v36 + 18] = v40;
            _S0 = _D2.i32[1];
            __asm { FMLA            S1, S0, V2.S[1] }
            v48 = 1.0 / sqrtf(_S1);
            v49 = -(float)(_D2.f32[1] * v48);
            v50 = v48 * _D2.f32[0];
            v51 = 0.0;
          }
          v70[19] = v49;
          v52 = &v55[23 * v36];
          v52[20] = v50;
          v52[21] = v51;
        }
        ++v36;
      }
      v39 += 16 * v37;
      v38 += v37;
    }
    while (v38);
  }
}

float md::TextLabelPart::prepareGlyphVertices(uint64_t a1, uint64_t a2, uint64_t a3, double a4, int8x16_t a5, double a6, int32x4_t a7, int32x4_t a8, double a9, int32x4_t a10, int8x16_t a11)
{
  int32x4_t v11;
  int v12;
  float32x4_t v13;
  float32x4_t v14;
  float v15;
  float32x2_t v16;
  float32x2_t v17;
  int32x4_t v18;
  float32x2_t v19;
  float32x2_t v20;
  int32x4_t v21;
  float32x4_t v22;
  int8x16_t v23;
  float32x2_t v24;
  float v25;
  int8x16_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float result;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;

  v12 = *(unsigned __int8 *)(a1 + 565);
  if (*(_BYTE *)(a1 + 565))
  {
    if (*(_BYTE *)(a1 + 869))
    {
      a5.i32[0] = *(_DWORD *)(a2 + 60);
      a11.i32[0] = *(_DWORD *)(a2 + 72);
      v13.i64[0] = *(_QWORD *)a3;
      a10.i32[0] = *(_DWORD *)(a3 + 8);
      a7.i64[0] = *(_QWORD *)(a3 + 12);
      a8.i32[0] = *(_DWORD *)(a3 + 20);
      *(int32x2_t *)v14.f32 = vrev64_s32(*(int32x2_t *)a3);
      v14.i64[1] = __PAIR64__(a7.u32[0], a7.u32[1]);
      v15 = *(float *)(a3 + 44);
      v11.i64[0] = *(_QWORD *)(a2 + 64);
      v16 = *(float32x2_t *)(a2 + 52);
      v17 = (float32x2_t)vrev64_s32((int32x2_t)v16);
      v18 = (int32x4_t)a5;
      v18.i32[1] = a11.i32[0];
      v19 = vmul_f32(*(float32x2_t *)v11.i8, v17);
      v20 = vsub_f32(v19, (float32x2_t)vdup_lane_s32((int32x2_t)v19, 1));
      v21 = vuzp2q_s32(v11, vzip1q_s32(v11, v11));
      v22 = (float32x4_t)v21;
      v22.i32[1] = a11.i32[0];
      v23 = vextq_s8(a11, a11, 4uLL);
      v24 = *(float32x2_t *)(a3 + 36);
      v25 = vmlas_n_f32(vmul_lane_f32(v20, v24, 1).f32[0], *(float *)a5.i32, v24.f32[0])
          + (float)(v15 * *(float *)a11.i32);
      a11.i32[1] = a5.i32[0];
      *(float32x2_t *)a11.i8 = vmla_f32(vneg_f32(vmul_f32((float32x2_t)vzip1_s32((int32x2_t)v17, *(int32x2_t *)v11.i8), *(float32x2_t *)a11.i8)), (float32x2_t)__PAIR64__(v17.u32[1], v11.u32[1]), *(float32x2_t *)v18.i8);
      v13.i64[1] = a7.i64[0];
      a10.i32[1] = a8.i32[0];
      v18.i64[0] = *(_QWORD *)(a3 + 24);
      v18.i32[2] = v18.i32[1];
      v26 = (int8x16_t)vzip1q_s32(v18, a7);
      *(int32x2_t *)a7.i8 = vdup_lane_s32(*(int32x2_t *)a7.i8, 1);
      a8.i32[1] = *(_DWORD *)(a3 + 32);
      v27 = (float32x4_t)vtrn1q_s32(a7, v18);
      *(float *)a3 = vmlas_n_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a3, v16), *(float32x2_t *)a11.i8, *(float32x2_t *)a3, 1).f32[0], *(float *)a10.i32, *(float *)v11.i32)* *(float *)&a4;
      v28 = (float32x4_t)vuzp2q_s32((int32x4_t)a11, vzip1q_s32((int32x4_t)a11, (int32x4_t)a11));
      v28.i32[1] = a5.i32[0];
      v28.i32[3] = v16.i32[1];
      v29 = vmulq_f32(v14, v28);
      v22.i32[3] = v21.i32[0];
      v30 = (float32x4_t)vextq_s8((int8x16_t)v28, vextq_s8((int8x16_t)v28, (int8x16_t)v28, 8uLL), 0xCuLL);
      v31 = (float32x4_t)vextq_s8(v26, v26, 4uLL);
      v31.i32[2] = v31.i32[1];
      v27.i32[2] = v27.i32[1];
      v30.i32[1] = v20.i32[0];
      v30.i32[2] = v16.i32[0];
      v32 = vmulq_n_f32(vmlaq_f32(vmlaq_f32(v29, v30, v13), v22, (float32x4_t)vzip1q_s32(a10, a10)), *(float *)&a4);
      v33 = (float32x4_t)vextq_s8(vextq_s8(a5, a5, 4uLL), a11, 0xCuLL);
      v33.i32[3] = v33.i32[0];
      *(int32x2_t *)v13.f32 = vzip1_s32((int32x2_t)v20, (int32x2_t)v16);
      v30.i64[0] = v13.i64[0];
      v30.i64[1] = __PAIR64__(v13.u32[0], vdup_lane_s32((int32x2_t)v16, 1).u32[0]);
      *(float32x4_t *)(a3 + 4) = v32;
      v34 = (float32x4_t)vextq_s8(v23, (int8x16_t)v11, 0xCuLL);
      v34.i32[3] = v34.i32[0];
      v16.i32[1] = a11.i32[1];
      *(float32x4_t *)(a3 + 20) = vmulq_n_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v31, v33), v30, v27), v34, (float32x4_t)vzip1q_s32(a8, vdupq_lane_s32(*(int32x2_t *)a8.i8, 1))), *(float *)&a4);
      a11.i32[1] = v17.i32[0];
      *(float32x2_t *)(a3 + 36) = vmul_f32(vmla_n_f32(vmla_f32(vmul_f32((float32x2_t)vrev64_s32((int32x2_t)v24), *(float32x2_t *)a11.i8), v16, v24), *(float32x2_t *)v11.i8, v15), (float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)&a4, 0));
      *(float *)(a3 + 44) = v25 * *(float *)&a4;
    }
    else
    {
      v35 = *(float *)(a2 + 64);
      if (v35 == 0.0)
      {
        v38 = *(float *)(a3 + 8);
        v40 = *(float *)(a3 + 20);
        v42 = *(float *)(a3 + 32);
        v44 = *(float *)(a3 + 44);
      }
      else
      {
        v36 = *(float *)(a2 + 68);
        v37 = *(float *)a3 * v36;
        *(float *)a3 = v37;
        v38 = -(float)(v35 * v37);
        v39 = *(float *)(a3 + 12) * v36;
        *(float *)(a3 + 8) = v38;
        *(float *)(a3 + 12) = v39;
        v40 = -(float)(v35 * v39);
        v41 = *(float *)(a3 + 24) * v36;
        *(float *)(a3 + 20) = v40;
        *(float *)(a3 + 24) = v41;
        v42 = -(float)(v35 * v41);
        v43 = *(float *)(a3 + 36) * v36;
        *(float *)(a3 + 32) = v42;
        *(float *)(a3 + 36) = v43;
        v44 = -(float)(v35 * v43);
        *(float *)(a3 + 44) = v44;
      }
      v45 = *(float *)(a2 + 76);
      *(float *)(a3 + 8) = v38 + v45;
      *(float *)(a3 + 20) = v40 + v45;
      *(float *)(a3 + 32) = v42 + v45;
      *(float *)(a3 + 44) = v44 + v45;
    }
  }
  v46 = *(float *)a3;
  if (*(_BYTE *)(a1 + 869))
  {
    v47 = *(float *)(a3 + 4);
    v49 = *(float *)(a3 + 12);
    v48 = *(float *)(a3 + 16);
    v51 = *(float *)(a3 + 24);
    v50 = *(float *)(a3 + 28);
    v53 = *(float *)(a3 + 36);
    v52 = *(float *)(a3 + 40);
  }
  else
  {
    v54 = *(float *)(a2 + 52) * *(float *)&a4;
    v55 = *(float *)(a2 + 56) * *(float *)&a4;
    v56 = v46 * v55;
    v57 = *(float *)(a3 + 4);
    v46 = -(float)((float)(v57 * v55) - (float)(v46 * v54));
    v47 = v56 + (float)(v57 * v54);
    *(float *)a3 = v46;
    *(float *)(a3 + 4) = v47;
    v58 = *(float *)(a3 + 12);
    v59 = *(float *)(a3 + 16);
    v49 = -(float)((float)(v59 * v55) - (float)(v58 * v54));
    v48 = (float)(v58 * v55) + (float)(v59 * v54);
    *(float *)(a3 + 12) = v49;
    *(float *)(a3 + 16) = v48;
    v60 = *(float *)(a3 + 24);
    v61 = *(float *)(a3 + 28);
    v51 = -(float)((float)(v61 * v55) - (float)(v60 * v54));
    v50 = (float)(v60 * v55) + (float)(v61 * v54);
    *(float *)(a3 + 24) = v51;
    *(float *)(a3 + 28) = v50;
    v62 = *(float *)(a3 + 36);
    v63 = *(float *)(a3 + 40);
    v64 = v62 * v55;
    v53 = -(float)((float)(v63 * v55) - (float)(v62 * v54));
    v52 = v64 + (float)(v63 * v54);
    *(float *)(a3 + 36) = v53;
    *(float *)(a3 + 40) = v52;
  }
  v65 = *(float *)(a2 + 40);
  v66 = *(float *)(a2 + 44);
  v67 = *(float *)(a2 + 48);
  v68 = v46 + v65;
  result = v47 + v66;
  *(float *)a3 = v68;
  *(float *)(a3 + 4) = result;
  v70 = v49 + v65;
  *(float *)(a3 + 8) = *(float *)(a3 + 8) + v67;
  *(float *)(a3 + 12) = v70;
  v71 = v48 + v66;
  v72 = *(float *)(a3 + 20) + v67;
  *(float *)(a3 + 16) = v71;
  *(float *)(a3 + 20) = v72;
  v73 = v51 + v65;
  v74 = v50 + v66;
  *(float *)(a3 + 24) = v73;
  *(float *)(a3 + 28) = v74;
  v75 = v53 + v65;
  *(float *)(a3 + 32) = *(float *)(a3 + 32) + v67;
  *(float *)(a3 + 36) = v75;
  v76 = v52 + v66;
  v77 = *(float *)(a3 + 44) + v67;
  *(float *)(a3 + 40) = v76;
  *(float *)(a3 + 44) = v77;
  if (!v12)
  {
    v78 = *(float *)(*(_QWORD *)(a1 + 32) + 68);
    v79 = 1.1;
    if (!*(_BYTE *)(a1 + 830))
      v79 = 1.0;
    v80 = (float)(*(float *)(a1 + 912) * v79) * v78;
    if (fabsf(v80 + -1.0) > 0.000001)
    {
      v68 = v68 * v80;
      result = result * v80;
      *(float *)a3 = v68;
      *(float *)(a3 + 4) = result;
      v70 = v70 * v80;
      v71 = v71 * v80;
      *(float *)(a3 + 12) = v70;
      *(float *)(a3 + 16) = v71;
      v73 = v73 * v80;
      v74 = v74 * v80;
      *(float *)(a3 + 24) = v73;
      *(float *)(a3 + 28) = v74;
      v75 = v75 * v80;
      v76 = v76 * v80;
      *(float *)(a3 + 36) = v75;
      *(float *)(a3 + 40) = v76;
    }
    if (*(_BYTE *)(a1 + 508))
    {
      v81 = *(float *)(a1 + 328);
      v82 = *(float *)(a1 + 332);
      v83 = v82 * v68;
      v68 = -(float)((float)(result * v82) - (float)(v81 * v68));
      result = v83 + (float)(result * v81);
      *(float *)a3 = v68;
      *(float *)(a3 + 4) = result;
      v84 = *(float *)(a1 + 328);
      v85 = *(float *)(a1 + 332);
      v86 = v85 * v70;
      v70 = -(float)((float)(v71 * v85) - (float)(v84 * v70));
      v71 = v86 + (float)(v71 * v84);
      *(float *)(a3 + 12) = v70;
      *(float *)(a3 + 16) = v71;
      v87 = *(float *)(a1 + 328);
      v88 = *(float *)(a1 + 332);
      v89 = v88 * v73;
      v73 = -(float)((float)(v74 * v88) - (float)(v87 * v73));
      v74 = v89 + (float)(v74 * v87);
      *(float *)(a3 + 24) = v73;
      *(float *)(a3 + 28) = v74;
      v90 = *(float *)(a1 + 328);
      v91 = *(float *)(a1 + 332);
      v92 = v91 * v75;
      v75 = -(float)((float)(v76 * v91) - (float)(v90 * v75));
      v76 = v92 + (float)(v76 * v90);
      *(float *)(a3 + 36) = v75;
      *(float *)(a3 + 40) = v76;
    }
    v93 = *(float *)(a1 + 832) + (float)(*(float *)(a1 + 544) * v78);
    v94 = *(float *)(a1 + 836) + (float)(*(float *)(a1 + 548) * v78);
    *(float *)a3 = v93 + v68;
    *(float *)(a3 + 4) = v94 + result;
    *(float *)(a3 + 12) = v93 + v70;
    *(float *)(a3 + 16) = v94 + v71;
    *(float *)(a3 + 24) = v93 + v73;
    *(float *)(a3 + 28) = v94 + v74;
    result = v93 + v75;
    *(float *)(a3 + 36) = v93 + v75;
    *(float *)(a3 + 40) = v94 + v76;
  }
  return result;
}

uint64_t md::TextLabelPart::TextLabelPart(uint64_t a1, _QWORD *a2, char a3)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  BOOL v18;

  *(_DWORD *)(a1 + 8) = 1065353216;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = a1;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 72) = xmmword_19FFB2E30;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 88) = 1065353216;
  *(_DWORD *)(a1 + 96) = 1065353216;
  *(_OWORD *)(a1 + 100) = 0u;
  *(_DWORD *)(a1 + 116) = 0;
  *(_OWORD *)(a1 + 120) = xmmword_19FFB2E30;
  *(_OWORD *)(a1 + 136) = xmmword_19FFB2E30;
  *(_OWORD *)(a1 + 152) = xmmword_19FFB2E30;
  *(_OWORD *)(a1 + 168) = xmmword_19FFB3480;
  *(_BYTE *)(a1 + 224) = 0;
  *(_BYTE *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 257) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 280) = xmmword_19FFB3580;
  *(_OWORD *)(a1 + 296) = xmmword_19FFB3590;
  *(_OWORD *)(a1 + 312) = xmmword_19FFB2E30;
  *(_QWORD *)(a1 + 328) = 1065353216;
  *(_DWORD *)(a1 + 336) = 1065353216;
  *(_DWORD *)(a1 + 356) = 0;
  *(_OWORD *)(a1 + 340) = 0u;
  *(_OWORD *)(a1 + 360) = xmmword_19FFB2E30;
  *(_OWORD *)(a1 + 376) = xmmword_19FFB2E30;
  *(_OWORD *)(a1 + 392) = xmmword_19FFB2E30;
  *(_OWORD *)(a1 + 408) = xmmword_19FFB3480;
  *(_BYTE *)(a1 + 464) = 0;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_BYTE *)(a1 + 440) = 0;
  *(_OWORD *)(a1 + 497) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 520) = xmmword_19FFB3580;
  *(_DWORD *)(a1 + 536) = 1065353216;
  *(_OWORD *)(a1 + 540) = 0u;
  *(_WORD *)(a1 + 556) = 512;
  *(_BYTE *)(a1 + 562) = 0;
  *(_DWORD *)(a1 + 558) = 0;
  *(_WORD *)(a1 + 563) = -1;
  *(_DWORD *)(a1 + 565) = 0;
  *(_QWORD *)a1 = off_1E428E890;
  *(_DWORD *)(a1 + 624) = 0;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 628) = xmmword_19FFB5F50;
  *(_DWORD *)(a1 + 644) = 0;
  __asm { FMOV            V3.2S, #1.0 }
  *(_QWORD *)(a1 + 648) = _D3;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 682) = 0u;
  *(_OWORD *)(a1 + 698) = xmmword_19FFB5F60;
  *(_BYTE *)(a1 + 718) = 0;
  *(_DWORD *)(a1 + 714) = 0;
  *(_DWORD *)(a1 + 736) = 0;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 740) = xmmword_19FFB5F50;
  *(_DWORD *)(a1 + 756) = 0;
  *(_QWORD *)(a1 + 760) = _D3;
  *(_OWORD *)(a1 + 794) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 810) = xmmword_19FFB5F60;
  *(_BYTE *)(a1 + 830) = 0;
  *(_DWORD *)(a1 + 826) = 0;
  *(_BYTE *)(a1 + 856) = 0;
  *(_QWORD *)(a1 + 848) = 0;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_BYTE *)(a1 + 864) = a3;
  *(_DWORD *)(a1 + 868) = 0;
  *(_DWORD *)(a1 + 865) = 0;
  *(_WORD *)(a1 + 872) = 1;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_QWORD *)(a1 + 912) = 1065353216;
  *(_BYTE *)(a1 + 920) = 0;
  *(_BYTE *)(a1 + 928) = 1;
  *(_QWORD *)(a1 + 952) = 0;
  *(_OWORD *)(a1 + 936) = 0u;
  v11 = *a2;
  v10 = a2[1];
  if (v10)
  {
    v12 = (unint64_t *)(v10 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    v14 = *(std::__shared_weak_count **)(a1 + 584);
    *(_QWORD *)(a1 + 576) = v11;
    *(_QWORD *)(a1 + 584) = v10;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  else
  {
    *(_QWORD *)(a1 + 576) = v11;
    *(_QWORD *)(a1 + 584) = 0;
  }
  v17 = **(_QWORD **)(*a2 + 16);
  if (*(_BYTE *)(v17 + 131))
    v18 = 1;
  else
    v18 = *(_BYTE *)(v17 + 132) != 0;
  *(_BYTE *)(a1 + 872) = v18;
  return a1;
}

void md::FlyoverLayerDataSource::~FlyoverLayerDataSource(md::FlyoverLayerDataSource *this)
{
  md::FlyoverLayerDataSource::~FlyoverLayerDataSource(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;

  *(_QWORD *)this = &off_1E429CC68;
  if (*((_QWORD *)this + 87))
  {
    v2 = (char *)this + 680;
    v3 = (char *)*((_QWORD *)this + 86);
    v4 = *((_QWORD *)this + 85);
    v5 = *(_QWORD *)v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *((_QWORD *)this + 87) = 0;
    if (v3 != (char *)this + 680)
    {
      do
      {
        v6 = (char *)*((_QWORD *)v3 + 1);
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  v7 = (_QWORD *)*((_QWORD *)this + 82);
  if (v7)
  {
    do
    {
      v8 = (_QWORD *)*v7;
      operator delete(v7);
      v7 = v8;
    }
    while (v8);
  }
  v9 = (void *)*((_QWORD *)this + 80);
  *((_QWORD *)this + 80) = 0;
  if (v9)
    operator delete(v9);
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 77);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  *((_QWORD *)this + 73) = &off_1E42B4D50;

  gdc::LayerDataSource::~LayerDataSource(this);
}

_QWORD *md::FlyoverLayerDataSource::didActivate(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v1 = this;
  if (this[83])
  {
    this = (_QWORD *)this[82];
    if (this)
    {
      do
      {
        v2 = (_QWORD *)*this;
        operator delete(this);
        this = v2;
      }
      while (v2);
    }
    v1[82] = 0;
    v3 = v1[81];
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(v1[80] + 8 * i) = 0;
    }
    v1[83] = 0;
  }
  if (v1[87])
  {
    v5 = v1 + 85;
    this = (_QWORD *)v1[86];
    v6 = v1[85];
    v7 = *this;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    v1[87] = 0;
    if (this != v1 + 85)
    {
      do
      {
        v8 = (_QWORD *)this[1];
        operator delete(this);
        this = v8;
      }
      while (v8 != v5);
    }
  }
  return this;
}

_QWORD *md::FlyoverLayerDataSource::didDeactivate(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v1 = this;
  if (this[83])
  {
    this = (_QWORD *)this[82];
    if (this)
    {
      do
      {
        v2 = (_QWORD *)*this;
        operator delete(this);
        this = v2;
      }
      while (v2);
    }
    v1[82] = 0;
    v3 = v1[81];
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(v1[80] + 8 * i) = 0;
    }
    v1[83] = 0;
  }
  if (v1[87])
  {
    v5 = v1 + 85;
    this = (_QWORD *)v1[86];
    v6 = v1[85];
    v7 = *this;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    v1[87] = 0;
    if (this != v1 + 85)
    {
      do
      {
        v8 = (_QWORD *)this[1];
        operator delete(this);
        this = v8;
      }
      while (v8 != v5);
    }
  }
  return this;
}

uint64_t md::FlyoverLayerDataSource::isReadyToDecode(md::FlyoverLayerDataSource *this)
{
  return 1;
}

void md::FlyoverLayerDataSource::constructRequests(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int32x2_t *v7;
  __int32 v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  unsigned __int8 *v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unsigned int v22;
  int v23;
  int v24;
  uint64_t v25;
  unsigned __int8 *v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  unsigned __int8 v39;
  unsigned __int8 v40;
  int v41;
  int v42;
  uint64_t v43;
  unsigned __int8 v44;
  _QWORD v45[2];
  std::__shared_weak_count *v46;
  __int16 v47;
  int32x2_t v48;
  int v49;
  _BYTE v50[2];
  __int16 v51;
  int v52;
  void *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char v57[32];
  unint64_t v58;
  uint64_t v59;
  unsigned __int8 v60;
  unsigned __int8 v61;
  int v62;
  int v63;
  unsigned __int8 v64;
  uint64_t v65;
  int v66;
  _WORD v67[2];
  int32x2_t v68;
  int v69;
  char v70[8];

  if (a2 != a3)
  {
    v3 = a3;
    v4 = a2;
    v5 = a1;
    do
    {
      v6 = *v4;
      v7 = *(int32x2_t **)(*v4 + 16);
      v8 = v7[1].i32[0];
      LOBYTE(v67[0]) = v7[1].i32[1];
      HIBYTE(v67[0]) = v8;
      v68 = vrev64_s32(*v7);
      if (*(_BYTE *)(v6 + 96))
        v9 = *(_DWORD *)(v6 + 100);
      else
        v9 = 2147483646;
      md::FlyoverCommon::decodeFlyoverKey((md::FlyoverCommon *)&v60, (const gdc::LayerDataRequestKey *)v6);
      v10 = v64;
      if (v64 == 2)
        goto LABEL_21;
      (*(void (**)(_QWORD *__return_ptr, _QWORD, uint64_t, _WORD *))(**(_QWORD **)(v5 + 24) + 16))(v45, *(_QWORD *)(v5 + 24), 48, v67);
      if (LOBYTE(v45[0]))
      {
        v35 = v62;
        v11 = v61;
        v12 = v60;
        v13 = v66;
        v36 = *(_QWORD *)(*v4 + 112);
        v50[0] = *(_BYTE *)*v4;
        v51 = 48;
        v52 = v9;
        v53 = v57;
        v54 = v57;
        v55 = v57;
        v56 = 32;
        v58 = 0;
        if ((v65 & 0xFF00000000) != 0)
          v14 = v65;
        else
          v14 = 0;
        LODWORD(v38) = v63;
        geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v53, v57, (char *)&v38, (char *)&v38 + 4);
        LODWORD(v38) = v35;
        geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v53, v54, (char *)&v38, (char *)&v38 + 4);
        LODWORD(v38) = v11;
        geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v53, v54, (char *)&v38, (char *)&v38 + 4);
        LODWORD(v38) = v12;
        geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v53, v54, (char *)&v38, (char *)&v38 + 4);
        LODWORD(v38) = v13;
        geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v53, v54, (char *)&v38, (char *)&v38 + 4);
        LODWORD(v38) = v14;
        geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v53, v54, (char *)&v38, (char *)&v38 + 4);
        v15 = (unsigned __int8 *)v53;
        v16 = v54 - (_BYTE *)v53;
        if (v54 == v53)
        {
          v17 = 0;
        }
        else
        {
          v17 = 0;
          if (v16 <= 1)
            v16 = 1;
          do
          {
            v18 = *v15++;
            v17 ^= (v17 << 6) - 0x61C8864680B583EBLL + (v17 >> 2) + v18;
            --v16;
          }
          while (v16);
        }
        v58 = v17;
        v59 = v36;
        gdc::LayerDataRequest::request(*v4, (uint64_t)v50, 0);
        v5 = a1;
        v3 = a3;
        if (v53 != v55)
          free(v53);
      }
      if (v10 != 1)
      {
LABEL_21:
        v45[0] = v5;
        v45[1] = *v4;
        v19 = v4[1];
        v46 = (std::__shared_weak_count *)v19;
        if (v19)
        {
          v20 = (unint64_t *)(v19 + 8);
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        v47 = v67[0];
        v48 = v68;
        v49 = v9;
        if (md::FlyoverLayerDataSource::constructRequests(std::__wrap_iter<std::shared_ptr<gdc::LayerDataRequest> *>,std::__wrap_iter<std::shared_ptr<gdc::LayerDataRequest> *>)const::$_0::operator()((uint64_t)v45, 4))
        {
          (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(v5 + 24) + 24))(&v43, *(_QWORD *)(v5 + 24), 51);
          if (v10 == 2)
          {
            v22 = (_BYTE)v43 ? v44 : 7;
            if (v22 >= v61)
              md::FlyoverLayerDataSource::constructRequests(std::__wrap_iter<std::shared_ptr<gdc::LayerDataRequest> *>,std::__wrap_iter<std::shared_ptr<gdc::LayerDataRequest> *>)const::$_0::operator()((uint64_t)v45, 51);
          }
          (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t, _WORD *))(**(_QWORD **)(v5 + 24) + 16))(&v38, *(_QWORD *)(v5 + 24), 50, v67);
          if ((_BYTE)v38)
          {
            v37 = v41;
            v23 = v40;
            v24 = v39;
            v25 = *(_QWORD *)(*v4 + 112);
            v50[0] = *(_BYTE *)*v4;
            v51 = 50;
            v52 = v9;
            v53 = v57;
            v54 = v57;
            v55 = v57;
            v56 = 32;
            v58 = 0;
            v69 = v42;
            geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v53, v57, (char *)&v69, v70);
            v69 = v37;
            geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v53, v54, (char *)&v69, v70);
            v69 = v23;
            geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v53, v54, (char *)&v69, v70);
            v69 = v24;
            geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v53, v54, (char *)&v69, v70);
            v69 = 0;
            geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v53, v54, (char *)&v69, v70);
            v69 = 0;
            geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v53, v54, (char *)&v69, v70);
            v26 = (unsigned __int8 *)v53;
            v27 = v54 - (_BYTE *)v53;
            if (v54 == v53)
            {
              v28 = 0;
            }
            else
            {
              v28 = 0;
              if (v27 <= 1)
                v27 = 1;
              do
              {
                v29 = *v26++;
                v28 ^= (v28 << 6) - 0x61C8864680B583EBLL + (v28 >> 2) + v29;
                --v27;
              }
              while (v27);
            }
            v58 = v28;
            v59 = v25;
            gdc::LayerDataRequest::request(*v4, (uint64_t)v50, 0);
            if (v53 != v55)
              free(v53);
          }
        }
        v30 = v46;
        if (v46)
        {
          p_shared_owners = (unint64_t *)&v46->__shared_owners_;
          do
            v32 = __ldaxr(p_shared_owners);
          while (__stlxr(v32 - 1, p_shared_owners));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
      }
      v4 += 2;
    }
    while (v4 != v3);
  }
}

void sub_19FE55230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  md::components::Material::~Material((md::components::Material *)&a26);
  _Unwind_Resume(a1);
}

void md::FlyoverLayerDataSource::createLayerData(uint64_t k@<X0>, const gdc::LayerDataRequestKey *a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _WORD *v8;
  uint64_t v9;
  _WORD *v10;
  unint64_t v11;
  int32x2_t *v12;
  __int32 v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  __int128 v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  _QWORD *v36;
  os_unfair_lock_s *v37;
  _QWORD *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  char *v41;
  unint64_t *v42;
  unint64_t v43;
  int v44;
  BOOL v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int32x2_t *v53;
  __int32 v54;
  int32x2_t v55;
  unint64_t *v56;
  unint64_t v57;
  _BYTE *v58;
  os_unfair_lock_s *v59;
  _BYTE *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  _BYTE *v67;
  uint64_t v68;
  char *v69;
  _BYTE *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  char v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  _QWORD *v81;
  int32x2_t *v82;
  uint64_t v83;
  int32x2_t v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t v89;
  __int32 v90;
  unint64_t v91;
  unint64_t v92;
  uint8x8_t v93;
  uint64_t **v94;
  uint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  char *v100;
  float v101;
  _BOOL8 v102;
  unint64_t v103;
  unint64_t v104;
  size_t prime;
  void *v106;
  void *v107;
  uint64_t v108;
  _QWORD **v109;
  size_t v110;
  size_t v111;
  size_t v112;
  _QWORD *i;
  size_t v114;
  uint64_t v115;
  unint64_t v116;
  uint8x8_t v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  size_t v121;
  uint64_t v122;
  _QWORD *v123;
  unint64_t v124;
  uint64_t *v125;
  unint64_t v126;
  void *v127;
  _QWORD *j;
  uint64_t v129;
  uint64_t v130;
  unint64_t *v131;
  unint64_t v132;
  _QWORD *v133;
  _QWORD *v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  char *v138;
  char *v139;
  _QWORD *v140;
  __int128 v141;
  _QWORD *v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  std::__sp_mut *sp_mut;
  uint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  id v154;
  gdc::Registry *v155;
  char *v156;
  char *v157;
  unint64_t *v158;
  unint64_t v159;
  char *v160;
  uint64_t v161;
  char *v162;
  char *v163;
  unint64_t v164;
  uint64_t v165;
  unint64_t v166;
  _QWORD *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  _QWORD *v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  __int128 *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  __int128 v183;
  unint64_t v184;
  _QWORD *v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  __int128 *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  char *v196;
  char *v197;
  _OWORD *v198;
  __int128 v199;
  uint64_t v200;
  unint64_t *v201;
  unint64_t v202;
  char *v203;
  unint64_t v204;
  char *v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  unint64_t v209;
  char *v210;
  char *v211;
  char *v212;
  __int128 v213;
  char *v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  uint64_t v218;
  gdc::Registry *v219;
  std::__shared_weak_count *v220;
  uint64_t *v221;
  unint64_t v222;
  _QWORD *v223;
  void *v224;
  _BYTE *v225;
  _BYTE *v226;
  void *v227;
  _QWORD *v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  std::__shared_weak_count *v232;
  unint64_t *v233;
  unint64_t v234;
  _QWORD *v235;
  _QWORD *v236;
  void *v237;
  std::__shared_weak_count *v238;
  unint64_t *v239;
  unint64_t v240;
  char *v241;
  char *v242;
  void *v243;
  std::__shared_weak_count *v244;
  unint64_t *v245;
  unint64_t v246;
  _WORD *v247;
  uint64_t *v248;
  uint64_t v249;
  id v250;
  uint64_t v253;
  void **v254;
  float *v255;
  uint64_t v256;
  __int128 v257;
  char *v258;
  std::__shared_weak_count *v259;
  void *v260;
  void *v261;
  char *v262;
  char *v263;
  gdc::Registry *v264;
  uint64_t v265;
  std::__shared_weak_count *v266;
  __int128 __p;
  __int128 v268;
  float v269;
  void *v270;
  _BYTE *v271;
  char *v272;
  void *v273;
  _QWORD *v274;
  char *v275;
  void *v276;
  char *v277;
  char *v278;
  void *v279[3];
  unsigned __int8 v280;
  unsigned __int8 v281;
  int32x2_t v282;
  char v283[24];
  char v284;
  uint64_t v285;
  __int128 v286;
  __int128 v287;
  int v288;
  uint64_t v289;

  v289 = *MEMORY[0x1E0C80C00];
  md::FlyoverCommon::decodeFlyoverKey((md::FlyoverCommon *)v283, a2);
  v6 = *a3;
  v7 = a3[1];
  v248 = a3;
  v8 = (_WORD *)v6;
  v9 = *a3;
  v10 = (_WORD *)*a3;
  v11 = *a3;
  if (v6 != v7)
  {
    v9 = v6;
    while (*(_WORD *)v9 != 48)
    {
      v9 += 48;
      if (v9 == v7)
      {
        v9 = v7;
        break;
      }
    }
    v10 = (_WORD *)v6;
    while (*v10 != 50)
    {
      v10 += 24;
      if (v10 == (_WORD *)v7)
      {
        v10 = (_WORD *)v7;
        break;
      }
    }
    v8 = (_WORD *)v6;
    while (*v8 != 4)
    {
      v8 += 24;
      if (v8 == (_WORD *)v7)
      {
        v8 = (_WORD *)v7;
        break;
      }
    }
    v11 = v6;
    while (*(_WORD *)v11 != 51)
    {
      v11 += 48;
      if (v11 == v7)
      {
        v11 = v7;
        break;
      }
    }
  }
  if (v284 == 3)
  {
    if (v8 == (_WORD *)v7 || v10 == (_WORD *)v7)
      goto LABEL_132;
  }
  else if (v284 == 2)
  {
    if (v8 == (_WORD *)v7)
    {
LABEL_132:
      *a4 = 0;
      a4[1] = 0;
      return;
    }
  }
  else if (v284 == 1 && v9 == v7)
  {
    goto LABEL_132;
  }
  v12 = (int32x2_t *)*((_QWORD *)a2 + 2);
  v13 = v12[1].i32[0];
  v280 = v12[1].i32[1];
  v281 = v13;
  v282 = vrev64_s32(*v12);
  memset(v279, 0, sizeof(v279));
  gdc::LayerDataSource::populateLoadMetadataListFromMap(v6, v7, v279);
  v276 = 0;
  v277 = 0;
  v278 = 0;
  v273 = 0;
  v274 = 0;
  v275 = 0;
  v270 = 0;
  v271 = 0;
  v272 = 0;
  __p = 0u;
  v268 = 0u;
  v269 = 1.0;
  if (v9 == v248[1])
    goto LABEL_27;
  v14 = *(_QWORD **)(v9 + 24);
  if (v14)
  {
    while (1)
    {
      v16 = v14[14];
      v15 = v14[15];
      if (v16)
        v17 = v16 - 8;
      else
        v17 = 0;
      *(_QWORD *)&v286 = v17;
      *((_QWORD *)&v286 + 1) = v15;
      if (v15)
      {
        v18 = (unint64_t *)(v15 + 8);
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      v20 = v277;
      if (v277 >= v278)
        break;
      *(_QWORD *)v277 = v17;
      *((_QWORD *)v20 + 1) = v15;
      v277 = v20 + 16;
LABEL_30:
      v14 = (_QWORD *)*v14;
      if (!v14)
      {
        if (v8 == (_WORD *)v248[1])
          goto LABEL_279;
        goto LABEL_65;
      }
    }
    v21 = (char *)v276;
    v22 = (v277 - (_BYTE *)v276) >> 4;
    v23 = v22 + 1;
    if ((unint64_t)(v22 + 1) >> 60)
      abort();
    if ((v278 - (_BYTE *)v276) >> 3 > v23)
      v23 = (v278 - (_BYTE *)v276) >> 3;
    if ((unint64_t)(v278 - (_BYTE *)v276) >= 0x7FFFFFFFFFFFFFF0)
      v24 = 0xFFFFFFFFFFFFFFFLL;
    else
      v24 = v23;
    if (v24 >> 60)
      goto LABEL_417;
    v25 = (char *)operator new(16 * v24);
    v26 = &v25[16 * v22];
    *(_OWORD *)v26 = v286;
    v27 = v26 + 16;
    v286 = 0uLL;
    if (v20 == v21)
    {
      v276 = &v25[16 * v22];
      v278 = &v25[16 * v24];
      if (!v20)
        goto LABEL_57;
    }
    else
    {
      v28 = v20;
      do
      {
        v29 = *((_OWORD *)v28 - 1);
        v28 -= 16;
        *((_OWORD *)v26 - 1) = v29;
        v26 -= 16;
        *(_QWORD *)v28 = 0;
        *((_QWORD *)v28 + 1) = 0;
      }
      while (v28 != v21);
      v276 = v26;
      v277 = v27;
      v278 = &v25[16 * v24];
      do
      {
        v30 = (std::__shared_weak_count *)*((_QWORD *)v20 - 1);
        if (v30)
        {
          p_shared_owners = (unint64_t *)&v30->__shared_owners_;
          do
            v32 = __ldaxr(p_shared_owners);
          while (__stlxr(v32 - 1, p_shared_owners));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
        v20 -= 16;
      }
      while (v20 != v21);
      v20 = v21;
      if (!v21)
        goto LABEL_57;
    }
    operator delete(v20);
LABEL_57:
    v33 = (std::__shared_weak_count *)*((_QWORD *)&v286 + 1);
    v277 = v27;
    if (*((_QWORD *)&v286 + 1))
    {
      v34 = (unint64_t *)(*((_QWORD *)&v286 + 1) + 8);
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    goto LABEL_30;
  }
  v9 = v248[1];
LABEL_27:
  if (v8 == (_WORD *)v9)
    goto LABEL_279;
LABEL_65:
  v247 = v10;
  v36 = v8 + 12;
  v37 = (os_unfair_lock_s *)(k + 624);
  v38 = (_QWORD *)(k + 632);
  v39 = k + 680;
  v253 = k;
  v255 = (float *)(k + 640);
  v249 = k + 680;
  while (1)
  {
    v36 = (_QWORD *)*v36;
    if (!v36)
      break;
    v41 = (char *)v36[14];
    v40 = (std::__shared_weak_count *)v36[15];
    v258 = v41;
    v259 = v40;
    if (v40)
    {
      v42 = (unint64_t *)&v40->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    v44 = v281;
    if (v41[160])
      v45 = v281 == 0;
    else
      v45 = 1;
    if (!v45)
    {
      os_unfair_lock_lock(v37);
      v46 = std::__hash_table<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>>>::find<geo::QuadTile>(v255, &v280);
      if (!v46)
        goto LABEL_107;
      v47 = *(uint64_t **)(k + 688);
      v48 = (uint64_t *)v46[5];
      if (v47 != v48)
      {
        v49 = (uint64_t *)v48[1];
        if (v49 != v47)
        {
          v50 = *v48;
          *(_QWORD *)(v50 + 8) = v49;
          *(_QWORD *)v48[1] = v50;
          v51 = *v47;
          *(_QWORD *)(v51 + 8) = v48;
          *v48 = v51;
          *v47 = (uint64_t)v48;
          v48[1] = (uint64_t)v47;
          v47 = *(uint64_t **)(k + 688);
        }
      }
      if (v47 == (uint64_t *)v39)
      {
LABEL_107:
        v74 = v44 - 1;
        if (!v44)
          v74 = 0;
        LOBYTE(v286) = v280;
        BYTE1(v286) = v74;
        *(int32x2_t *)((char *)&v286 + 4) = vshr_n_s32(v282, 1uLL);
        geo::LRUPolicy<geo::QuadTile,geo::QuadTile,geo::QuadTileHash>::insert(v39, v255, &v280, (uint64_t)&v286);
        while (*(_QWORD *)(k + 696) > *(_QWORD *)(k + 632))
          geo::Cache<geo::QuadTile,geo::QuadTile,geo::QuadTileHash,geo::LRUPolicy>::_pop(v38);
      }
      os_unfair_lock_unlock(v37);
    }
    v52 = *((_QWORD *)v41 + 18);
    if (!v52)
    {
      *a4 = 0;
      a4[1] = 0;
      if (v40)
        goto LABEL_119;
      goto LABEL_66;
    }
    v53 = (int32x2_t *)v36[3];
    v54 = v53[1].i32[0];
    v55 = vrev64_s32(*v53);
    LOBYTE(v286) = -1;
    BYTE1(v286) = v54;
    *(int32x2_t *)((char *)&v286 + 4) = v55;
    *(_QWORD *)&v287 = v41;
    *((_QWORD *)&v287 + 1) = v40;
    if (v40)
    {
      v56 = (unint64_t *)&v40->__shared_owners_;
      do
        v57 = __ldxr(v56);
      while (__stxr(v57 + 1, v56));
    }
    v58 = v271;
    if (v271 < v272)
    {
      *v271 = -1;
      v58[1] = v54;
      *(int32x2_t *)(v58 + 4) = v55;
      *(_OWORD *)(v58 + 24) = v287;
      v271 = v58 + 40;
      v40 = v259;
      if (v259)
        goto LABEL_119;
      goto LABEL_66;
    }
    v59 = v37;
    v60 = v270;
    v61 = 0xCCCCCCCCCCCCCCCDLL * ((v271 - (_BYTE *)v270) >> 3);
    v62 = v61 + 1;
    if (v61 + 1 > 0x666666666666666)
      abort();
    if (0x999999999999999ALL * ((v272 - (_BYTE *)v270) >> 3) > v62)
      v62 = 0x999999999999999ALL * ((v272 - (_BYTE *)v270) >> 3);
    if (0xCCCCCCCCCCCCCCCDLL * ((v272 - (_BYTE *)v270) >> 3) >= 0x333333333333333)
      v63 = 0x666666666666666;
    else
      v63 = v62;
    if (v63 > 0x666666666666666)
      goto LABEL_417;
    v64 = (char *)operator new(40 * v63);
    v65 = &v64[8 * ((v271 - (_BYTE *)v270) >> 3)];
    *v65 = -1;
    v65[1] = v54;
    *(int32x2_t *)(v65 + 4) = v55;
    v66 = &v64[40 * v63];
    *(_OWORD *)(v65 + 24) = v287;
    v287 = 0uLL;
    v67 = v65 + 40;
    if (v58 == v60)
    {
      v270 = &v64[40 * v61];
      v272 = &v64[40 * v63];
      k = v253;
      v37 = v59;
      if (!v58)
        goto LABEL_114;
LABEL_113:
      operator delete(v58);
      goto LABEL_114;
    }
    v68 = 0;
    k = v253;
    do
    {
      v69 = &v65[v68];
      v70 = &v58[v68];
      *((_WORD *)v69 - 20) = *(_WORD *)&v58[v68 - 40];
      *(_QWORD *)(v69 - 36) = *(_QWORD *)&v58[v68 - 36];
      *((_OWORD *)v69 - 1) = *(_OWORD *)&v58[v68 - 16];
      *((_QWORD *)v70 - 2) = 0;
      *((_QWORD *)v70 - 1) = 0;
      v68 -= 40;
    }
    while (&v58[v68] != v60);
    v270 = &v65[v68];
    v271 = v65 + 40;
    v272 = v66;
    do
    {
      v71 = (std::__shared_weak_count *)*((_QWORD *)v58 - 1);
      if (v71)
      {
        v72 = (unint64_t *)&v71->__shared_owners_;
        do
          v73 = __ldaxr(v72);
        while (__stlxr(v73 - 1, v72));
        if (!v73)
        {
          ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
          std::__shared_weak_count::__release_weak(v71);
        }
      }
      v58 -= 40;
    }
    while (v58 != v60);
    v58 = v60;
    v37 = v59;
    if (v58)
      goto LABEL_113;
LABEL_114:
    v75 = (std::__shared_weak_count *)*((_QWORD *)&v287 + 1);
    v271 = v67;
    v39 = v249;
    if (!*((_QWORD *)&v287 + 1))
      goto LABEL_118;
    v76 = (unint64_t *)(*((_QWORD *)&v287 + 1) + 8);
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
      v40 = v259;
      if (v259)
      {
LABEL_119:
        v78 = (unint64_t *)&v40->__shared_owners_;
        do
          v79 = __ldaxr(v78);
        while (__stlxr(v79 - 1, v78));
        if (!v79)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
    }
    else
    {
LABEL_118:
      v40 = v259;
      if (v259)
        goto LABEL_119;
    }
LABEL_66:
    if (!v52)
      goto LABEL_372;
  }
  if (v11 == v248[1])
    goto LABEL_245;
  v81 = *(_QWORD **)(v11 + 24);
  if (!v81)
  {
    v11 = v248[1];
    goto LABEL_245;
  }
  while (2)
  {
    v82 = (int32x2_t *)v81[3];
    v83 = v82[1].u8[0];
    v84 = *v82;
    v85 = v81[14];
    v86 = (std::__shared_weak_count *)v81[15];
    if (v86)
    {
      v87 = (unint64_t *)&v86->__shared_owners_;
      do
        v88 = __ldxr(v87);
      while (__stxr(v88 + 1, v87));
    }
    LOBYTE(v286) = -1;
    BYTE1(v286) = v83;
    *(int32x2_t *)((char *)&v286 + 4) = vrev64_s32(v84);
    *(_QWORD *)&v287 = v85;
    *((_QWORD *)&v287 + 1) = v86;
    v265 = 0;
    v266 = 0;
    v256 = *(_QWORD *)((char *)&v286 + 4);
    v89 = (SDWORD1(v286)
         - 0x61C8864680B583EBLL
         + (((v83 + 0x53A3C687B1BC605ALL) ^ 0x9E3779B97F4A7D14) << 6)
         + (((v83 + 0x53A3C687B1BC605ALL) ^ 0x9E3779B97F4A7D14) >> 2)) ^ (v83 + 0x53A3C687B1BC605ALL) ^ 0x9E3779B97F4A7D14;
    v90 = v84.i32[0];
    v91 = (v84.i32[0] - 0x61C8864680B583EBLL + (v89 << 6) + (v89 >> 2)) ^ v89;
    v92 = *((_QWORD *)&__p + 1);
    if (!*((_QWORD *)&__p + 1))
      goto LABEL_169;
    v93 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&__p + 8));
    v93.i16[0] = vaddlv_u8(v93);
    if (v93.u32[0] > 1uLL)
    {
      v11 = v91;
      if (v91 >= *((_QWORD *)&__p + 1))
        v11 = v91 % *((_QWORD *)&__p + 1);
    }
    else
    {
      v11 = v91 & (*((_QWORD *)&__p + 1) - 1);
    }
    v94 = *(uint64_t ***)(__p + 8 * v11);
    if (!v94 || (v95 = *v94) == 0)
    {
LABEL_169:
      v100 = (char *)operator new(0x38uLL);
      v258 = v100;
      v259 = (std::__shared_weak_count *)&v268;
      *(_QWORD *)v100 = 0;
      *((_QWORD *)v100 + 1) = v91;
      v100[16] = -1;
      v100[17] = v83;
      *(_QWORD *)(v100 + 20) = v256;
      *(_OWORD *)(v100 + 40) = v287;
      v287 = 0uLL;
      LOBYTE(v260) = 1;
      v101 = (float)(unint64_t)(*((_QWORD *)&v268 + 1) + 1);
      if (v92 && (float)(v269 * (float)v92) >= v101)
      {
LABEL_219:
        v122 = __p;
        v123 = *(_QWORD **)(__p + 8 * v11);
        if (v123)
        {
          *(_QWORD *)v100 = *v123;
        }
        else
        {
          *(_QWORD *)v100 = v268;
          *(_QWORD *)&v268 = v100;
          *(_QWORD *)(v122 + 8 * v11) = &v268;
          if (!*(_QWORD *)v100)
          {
LABEL_228:
            ++*((_QWORD *)&v268 + 1);
            goto LABEL_229;
          }
          v124 = *(_QWORD *)(*(_QWORD *)v100 + 8);
          if ((v92 & (v92 - 1)) != 0)
          {
            if (v124 >= v92)
              v124 %= v92;
          }
          else
          {
            v124 &= v92 - 1;
          }
          v123 = (_QWORD *)(__p + 8 * v124);
        }
        *v123 = v100;
        goto LABEL_228;
      }
      v102 = (v92 & (v92 - 1)) != 0;
      if (v92 < 3)
        v102 = 1;
      v103 = v102 | (2 * v92);
      v104 = vcvtps_u32_f32(v101 / v269);
      if (v103 <= v104)
        prime = v104;
      else
        prime = v103;
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
        v92 = *((_QWORD *)&__p + 1);
      }
      if (prime <= v92)
      {
        if (prime >= v92)
          goto LABEL_206;
        v116 = vcvtps_u32_f32((float)*((unint64_t *)&v268 + 1) / v269);
        if (v92 < 3 || (v117 = (uint8x8_t)vcnt_s8((int8x8_t)v92), v117.i16[0] = vaddlv_u8(v117), v117.u32[0] > 1uLL))
        {
          v116 = std::__next_prime(v116);
        }
        else
        {
          v118 = 1 << -(char)__clz(v116 - 1);
          if (v116 >= 2)
            v116 = v118;
        }
        if (prime <= v116)
          prime = v116;
        if (prime >= v92)
        {
          v92 = *((_QWORD *)&__p + 1);
LABEL_206:
          if ((v92 & (v92 - 1)) != 0)
          {
            if (v91 >= v92)
              v11 = v91 % v92;
            else
              v11 = v91;
          }
          else
          {
            v11 = (v92 - 1) & v91;
          }
          goto LABEL_219;
        }
        if (!prime)
        {
          v127 = (void *)__p;
          *(_QWORD *)&__p = 0;
          if (v127)
            operator delete(v127);
          v92 = 0;
          *((_QWORD *)&__p + 1) = 0;
          goto LABEL_206;
        }
      }
      if (prime >> 61)
LABEL_417:
        std::__throw_bad_array_new_length[abi:nn180100]();
      v106 = operator new(8 * prime);
      v107 = (void *)__p;
      *(_QWORD *)&__p = v106;
      if (v107)
        operator delete(v107);
      v108 = 0;
      *((_QWORD *)&__p + 1) = prime;
      do
        *(_QWORD *)(__p + 8 * v108++) = 0;
      while (prime != v108);
      v109 = (_QWORD **)v268;
      if (!(_QWORD)v268)
      {
LABEL_205:
        v92 = prime;
        goto LABEL_206;
      }
      v110 = *(_QWORD *)(v268 + 8);
      v111 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v112 = v110 & v111;
        *(_QWORD *)(__p + 8 * v112) = &v268;
        for (i = *v109; *v109; i = *v109)
        {
          v114 = i[1] & v111;
          if (v114 == v112)
          {
            v109 = (_QWORD **)i;
          }
          else if (*(_QWORD *)(__p + 8 * v114))
          {
            *v109 = (_QWORD *)*i;
            v115 = 8 * v114;
            *i = **(_QWORD **)(__p + v115);
            **(_QWORD **)(__p + v115) = i;
          }
          else
          {
            *(_QWORD *)(__p + 8 * v114) = v109;
            v109 = (_QWORD **)i;
            v112 = v114;
          }
        }
        goto LABEL_205;
      }
      if (v110 >= prime)
        v110 %= prime;
      *(_QWORD *)(__p + 8 * v110) = &v268;
      v119 = *v109;
      if (!*v109)
        goto LABEL_205;
      while (1)
      {
        v121 = v119[1];
        if (v121 >= prime)
          v121 %= prime;
        if (v121 != v110)
        {
          if (!*(_QWORD *)(__p + 8 * v121))
          {
            *(_QWORD *)(__p + 8 * v121) = v109;
            goto LABEL_210;
          }
          *v109 = (_QWORD *)*v119;
          v120 = 8 * v121;
          *v119 = **(_QWORD **)(__p + v120);
          **(_QWORD **)(__p + v120) = v119;
          v119 = v109;
        }
        v121 = v110;
LABEL_210:
        v109 = (_QWORD **)v119;
        v119 = (_QWORD *)*v119;
        v110 = v121;
        if (!v119)
          goto LABEL_205;
      }
    }
    if (v93.u32[0] < 2uLL)
    {
      while (1)
      {
        v97 = v95[1];
        if (v97 == v91)
        {
          if (*((unsigned __int8 *)v95 + 16) == 255
            && *((unsigned __int8 *)v95 + 17) == (_DWORD)v83
            && *(uint64_t *)((char *)v95 + 20) == __PAIR64__(v90, DWORD1(v286)))
          {
            goto LABEL_164;
          }
        }
        else if ((v97 & (*((_QWORD *)&__p + 1) - 1)) != v11)
        {
          goto LABEL_169;
        }
        v95 = (uint64_t *)*v95;
        if (!v95)
          goto LABEL_169;
      }
    }
    while (1)
    {
      v96 = v95[1];
      if (v96 == v91)
        break;
      if (v96 >= *((_QWORD *)&__p + 1))
        v96 %= *((_QWORD *)&__p + 1);
      if (v96 != v11)
        goto LABEL_169;
LABEL_150:
      v95 = (uint64_t *)*v95;
      if (!v95)
        goto LABEL_169;
    }
    if (*((unsigned __int8 *)v95 + 16) != 255
      || *((unsigned __int8 *)v95 + 17) != (_DWORD)v83
      || *(uint64_t *)((char *)v95 + 20) != __PAIR64__(v90, DWORD1(v286)))
    {
      goto LABEL_150;
    }
LABEL_164:
    if (v86)
    {
      v98 = (unint64_t *)&v86->__shared_owners_;
      do
        v99 = __ldaxr(v98);
      while (__stlxr(v99 - 1, v98));
      if (!v99)
      {
        ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
        std::__shared_weak_count::__release_weak(v86);
      }
    }
LABEL_229:
    if (v266)
    {
      v125 = &v266->__shared_owners_;
      do
        v126 = __ldaxr((unint64_t *)v125);
      while (__stlxr(v126 - 1, (unint64_t *)v125));
      if (!v126)
      {
        ((void (*)(std::__shared_weak_count *))v266->__on_zero_shared)(v266);
        std::__shared_weak_count::__release_weak(v266);
      }
    }
    v81 = (_QWORD *)*v81;
    if (v81)
      continue;
    break;
  }
  v11 = v248[1];
LABEL_245:
  if (v247 != (_WORD *)v11)
  {
    for (j = (_QWORD *)*((_QWORD *)v247 + 3); j; j = (_QWORD *)*j)
    {
      v129 = j[14];
      v130 = j[15];
      *(_QWORD *)&v286 = v129;
      *((_QWORD *)&v286 + 1) = v130;
      if (v130)
      {
        v131 = (unint64_t *)(v130 + 8);
        do
          v132 = __ldxr(v131);
        while (__stxr(v132 + 1, v131));
      }
      v133 = v274;
      if (v274 < (_QWORD *)v275)
      {
        *v274 = v129;
        v133[1] = v130;
        v274 = v133 + 2;
      }
      else
      {
        v134 = v273;
        v135 = ((char *)v274 - (_BYTE *)v273) >> 4;
        v136 = v135 + 1;
        if ((unint64_t)(v135 + 1) >> 60)
          abort();
        if ((v275 - (_BYTE *)v273) >> 3 > v136)
          v136 = (v275 - (_BYTE *)v273) >> 3;
        if ((unint64_t)(v275 - (_BYTE *)v273) >= 0x7FFFFFFFFFFFFFF0)
          v137 = 0xFFFFFFFFFFFFFFFLL;
        else
          v137 = v136;
        if (v137 >> 60)
          goto LABEL_417;
        v138 = (char *)operator new(16 * v137);
        v139 = &v138[16 * v135];
        *(_OWORD *)v139 = v286;
        v140 = v139 + 16;
        v286 = 0uLL;
        if (v133 == v134)
        {
          v273 = v139;
          v274 = v139 + 16;
          v275 = &v138[16 * v137];
          k = v253;
        }
        else
        {
          do
          {
            v141 = *((_OWORD *)v133 - 1);
            v133 -= 2;
            *((_OWORD *)v139 - 1) = v141;
            v139 -= 16;
            *v133 = 0;
            v133[1] = 0;
          }
          while (v133 != v134);
          v133 = v273;
          v142 = v274;
          v273 = v139;
          v274 = v140;
          v275 = &v138[16 * v137];
          for (k = v253; v142 != v133; v142 -= 2)
          {
            v143 = (std::__shared_weak_count *)*(v142 - 1);
            if (v143)
            {
              v144 = (unint64_t *)&v143->__shared_owners_;
              do
                v145 = __ldaxr(v144);
              while (__stlxr(v145 - 1, v144));
              if (!v145)
              {
                ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
                std::__shared_weak_count::__release_weak(v143);
              }
            }
          }
        }
        if (v133)
          operator delete(v133);
        v146 = (std::__shared_weak_count *)*((_QWORD *)&v286 + 1);
        v274 = v140;
        if (*((_QWORD *)&v286 + 1))
        {
          v147 = (unint64_t *)(*((_QWORD *)&v286 + 1) + 8);
          do
            v148 = __ldaxr(v147);
          while (__stlxr(v148 - 1, v147));
          if (!v148)
          {
            ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
            std::__shared_weak_count::__release_weak(v146);
          }
        }
      }
    }
  }
LABEL_279:
  sp_mut = std::__get_sp_mut((const void *)(k + 608));
  std::__sp_mut::lock(sp_mut);
  v150 = *(_QWORD *)(k + 608);
  v151 = *(std::__shared_weak_count **)(k + 616);
  v265 = v150;
  v266 = v151;
  if (v151)
  {
    v152 = (unint64_t *)&v151->__shared_owners_;
    do
      v153 = __ldxr(v152);
    while (__stxr(v153 + 1, v152));
  }
  std::__sp_mut::unlock(sp_mut);
  md::RegistryManager::vendRegistry((md::RegistryManager *)&v264, v150);
  v154 = *(id *)(k + 592);
  v155 = v264;
  v156 = (char *)operator new(0x370uLL);
  *((_QWORD *)v156 + 1) = 0;
  *((_QWORD *)v156 + 2) = 0;
  *(_QWORD *)v156 = &off_1E42DB390;
  v157 = v156 + 24;
  v250 = v154;
  v286 = 0uLL;
  md::MapTileData::MapTileData((uint64_t)(v156 + 24), (uint64_t)a2, (uint64_t)v279, (uint64_t)&v286, 1);
  *((_QWORD *)v156 + 3) = &off_1E4290540;
  *((_QWORD *)v156 + 82) = &unk_1E4290588;
  *(_OWORD *)(v156 + 744) = 0u;
  *(_OWORD *)(v156 + 760) = 0u;
  *(_OWORD *)(v156 + 776) = 0u;
  *((_QWORD *)v156 + 99) = v155;
  *((_QWORD *)v156 + 100) = v150;
  *((_QWORD *)v156 + 101) = v151;
  if (v151)
  {
    v158 = (unint64_t *)&v151->__shared_owners_;
    do
      v159 = __ldxr(v158);
    while (__stxr(v159 + 1, v158));
  }
  *((_QWORD *)v156 + 104) = 0;
  *((_OWORD *)v156 + 51) = 0uLL;
  md::FlyoverCommon::decodeFlyoverKey((md::FlyoverCommon *)(v156 + 840), a2);
  v160 = (char *)v276;
  if (v276 != v277)
  {
    v161 = 0;
    while (1)
    {
      v162 = *(char **)(*(_QWORD *)v160 + 256);
      v163 = *(char **)(*(_QWORD *)v160 + 264);
      if (v162 != v163)
      {
        v164 = v163 - v162 - 184;
        if (v164 > 0xB7)
        {
          v165 = 0;
          v166 = v164 / 0xB8 + 1;
          v167 = v162 + 192;
          v168 = v166 & 0x3FFFFFFFFFFFFFELL;
          do
          {
            v161 -= 0x5555555555555555 * ((uint64_t)(*(v167 - 23) - *(v167 - 24)) >> 3);
            v165 -= 0x5555555555555555 * ((uint64_t)(*v167 - *(v167 - 1)) >> 3);
            v167 += 46;
            v168 -= 2;
          }
          while (v168);
          v161 += v165;
          if (v166 == (v166 & 0x3FFFFFFFFFFFFFELL))
            goto LABEL_287;
          v162 += 184 * (v166 & 0x3FFFFFFFFFFFFFELL);
        }
        do
        {
          v170 = *(_QWORD *)v162;
          v169 = *((_QWORD *)v162 + 1);
          v162 += 184;
          v161 -= 0x5555555555555555 * ((v169 - v170) >> 3);
        }
        while (v162 != v163);
      }
LABEL_287:
      v160 += 16;
      if (v160 == v277)
        goto LABEL_297;
    }
  }
  v161 = 0;
LABEL_297:
  v254 = (void **)(v156 + 816);
  std::vector<md::Mesh>::reserve((uint64_t)(v156 + 768), v161 - 0x3333333333333333 * ((v271 - (_BYTE *)v270) >> 3));
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)objc_msgSend(v250, "gglDevice", v154, v156 + 24, v156 + 768)+ 24))(&v285);
  v171 = operator new(0x30uLL);
  *v171 = &off_1E42CC260;
  v171[1] = v157;
  v171[2] = &v276;
  v171[3] = &v270;
  v171[4] = &v273;
  v171[5] = v155;
  *(_QWORD *)&v287 = v171;
  v258 = 0;
  v259 = 0;
  (*(void (**)(uint64_t, __int128 *, char **))(*(_QWORD *)v285 + 16))(v285, &v286, &v258);
  v172 = v259;
  if (v259)
  {
    v173 = (unint64_t *)&v259->__shared_owners_;
    do
      v174 = __ldaxr(v173);
    while (__stlxr(v174 - 1, v173));
    if (!v174)
    {
      ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
      std::__shared_weak_count::__release_weak(v172);
    }
  }
  v175 = (__int128 *)v287;
  if ((__int128 *)v287 == &v286)
  {
    v176 = 4;
    v175 = &v286;
LABEL_306:
    (*(void (**)(void))(*(_QWORD *)v175 + 8 * v176))();
  }
  else if ((_QWORD)v287)
  {
    v176 = 5;
    goto LABEL_306;
  }
  if (v285)
  {
    v177 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v285 + 24))(v285);
    v178 = v285;
    v285 = 0;
    *(_QWORD *)&v286 = v178;
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v177 + 48))(v177, &v286);
    v179 = v286;
    *(_QWORD *)&v286 = 0;
    if (v179)
      (*(void (**)(uint64_t))(*(_QWORD *)v179 + 8))(v179);
    v180 = v285;
    v285 = 0;
    if (v180)
      (*(void (**)(uint64_t))(*(_QWORD *)v180 + 8))(v180);
  }
  if (v276 == v277)
  {
    v181 = (std::__shared_weak_count *)operator new(0x58uLL);
    v181->__shared_owners_ = 0;
    v182 = (unint64_t *)&v181->__shared_owners_;
    v181->__shared_weak_owners_ = 0;
    v181->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DED18;
    v181[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B63B0;
    v181[1].__shared_weak_owners_ = 0;
    v181[2].__vftable = 0;
    v181[1].__shared_owners_ = 0;
    LODWORD(v181[2].__shared_owners_) = 0;
    *(_QWORD *)&v183 = 0x100000001;
    *((_QWORD *)&v183 + 1) = 0x100000001;
    *(_OWORD *)((char *)&v181[2].__shared_owners_ + 4) = v183;
    *(std::__shared_weak_count_vtbl **)((char *)&v181[3].__vftable + 4) = (std::__shared_weak_count_vtbl *)0x100000001;
    HIDWORD(v181[3].__shared_owners_) = 0;
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)objc_msgSend(v250, "gglDevice") + 24))(&v285);
    do
      v184 = __ldxr(v182);
    while (__stxr(v184 + 1, v182));
    *(_QWORD *)&v287 = 0;
    v185 = operator new(0x40uLL);
    *v185 = &off_1E42CC2A8;
    v185[1] = v157;
    v185[2] = &v270;
    v185[3] = &__p;
    v185[4] = &v273;
    v185[5] = v181 + 1;
    v185[6] = v181;
    v185[7] = v155;
    *(_QWORD *)&v287 = v185;
    v258 = 0;
    v259 = 0;
    (*(void (**)(uint64_t, __int128 *, char **))(*(_QWORD *)v285 + 16))(v285, &v286, &v258);
    v186 = v259;
    if (v259)
    {
      v187 = (unint64_t *)&v259->__shared_owners_;
      do
        v188 = __ldaxr(v187);
      while (__stlxr(v188 - 1, v187));
      if (!v188)
      {
        ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
        std::__shared_weak_count::__release_weak(v186);
      }
    }
    v189 = (__int128 *)v287;
    if ((__int128 *)v287 == &v286)
    {
      v190 = 4;
      v189 = &v286;
LABEL_324:
      (*(void (**)(void))(*(_QWORD *)v189 + 8 * v190))();
    }
    else if ((_QWORD)v287)
    {
      v190 = 5;
      goto LABEL_324;
    }
    if (v285)
    {
      v191 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v285 + 24))(v285);
      v192 = v285;
      v285 = 0;
      *(_QWORD *)&v286 = v192;
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v191 + 48))(v191, &v286);
      v193 = v286;
      *(_QWORD *)&v286 = 0;
      if (v193)
        (*(void (**)(uint64_t))(*(_QWORD *)v193 + 8))(v193);
      v194 = v285;
      v285 = 0;
      if (v194)
        (*(void (**)(uint64_t))(*(_QWORD *)v194 + 8))(v194);
    }
    do
      v195 = __ldaxr(v182);
    while (__stlxr(v195 - 1, v182));
    if (!v195)
    {
      ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
      std::__shared_weak_count::__release_weak(v181);
    }
  }
  v196 = (char *)v273;
  v197 = (char *)v274;
  if (v273 != v274)
  {
    do
    {
      v199 = *(_OWORD *)(*(_QWORD *)v196 + 144);
      v200 = *(_QWORD *)(*(_QWORD *)v196 + 152);
      if (v200)
      {
        v201 = (unint64_t *)(v200 + 8);
        do
          v202 = __ldxr(v201);
        while (__stxr(v202 + 1, v201));
      }
      v203 = (char *)*((_QWORD *)v156 + 103);
      v204 = *((_QWORD *)v156 + 104);
      if ((unint64_t)v203 < v204)
      {
        *(_OWORD *)v203 = v199;
        v198 = v203 + 16;
      }
      else
      {
        v205 = (char *)*v254;
        v206 = (v203 - (_BYTE *)*v254) >> 4;
        v207 = v206 + 1;
        if ((unint64_t)(v206 + 1) >> 60)
          abort();
        v257 = v199;
        v208 = v204 - (_QWORD)v205;
        if (v208 >> 3 > v207)
          v207 = v208 >> 3;
        if ((unint64_t)v208 >= 0x7FFFFFFFFFFFFFF0)
          v209 = 0xFFFFFFFFFFFFFFFLL;
        else
          v209 = v207;
        if (v209 >> 60)
          goto LABEL_417;
        v210 = (char *)operator new(16 * v209);
        v211 = &v210[16 * v206];
        v212 = &v210[16 * v209];
        *(_OWORD *)v211 = v257;
        v198 = v211 + 16;
        if (v203 == v205)
        {
          *((_QWORD *)v156 + 102) = v211;
          *((_QWORD *)v156 + 103) = v198;
          *((_QWORD *)v156 + 104) = v212;
        }
        else
        {
          do
          {
            v213 = *((_OWORD *)v203 - 1);
            v203 -= 16;
            *((_OWORD *)v211 - 1) = v213;
            v211 -= 16;
            *(_QWORD *)v203 = 0;
            *((_QWORD *)v203 + 1) = 0;
          }
          while (v203 != v205);
          v203 = (char *)*((_QWORD *)v156 + 102);
          v214 = (char *)*((_QWORD *)v156 + 103);
          *((_QWORD *)v156 + 102) = v211;
          *((_QWORD *)v156 + 103) = v198;
          *((_QWORD *)v156 + 104) = v212;
          while (v214 != v203)
          {
            v215 = (std::__shared_weak_count *)*((_QWORD *)v214 - 1);
            if (v215)
            {
              v216 = (unint64_t *)&v215->__shared_owners_;
              do
                v217 = __ldaxr(v216);
              while (__stlxr(v217 - 1, v216));
              if (!v217)
              {
                ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
                std::__shared_weak_count::__release_weak(v215);
              }
            }
            v214 -= 16;
          }
        }
        if (v203)
          operator delete(v203);
      }
      *((_QWORD *)v156 + 103) = v198;
      v196 += 16;
    }
    while (v196 != v197);
  }

  v262 = v156 + 24;
  v263 = v156;

  v218 = v265;
  LODWORD(v258) = *((_DWORD *)v156 + 8);
  gdc::LayerDataKey::LayerDataKey((uint64_t)&v259, (uint64_t)a2 + 8);
  LODWORD(v286) = (_DWORD)v258;
  gdc::LayerDataKey::LayerDataKey((uint64_t)&v286 + 8, (uint64_t)&v259);
  v288 = 0;
  md::RegistryManager::addRegistry(v218, (uint64_t)&v286, (uint64_t *)&v264);
  if (v288 != -1)
    ((void (*)(uint64_t *, __int128 *))off_1E42FA3C0[v288])(&v285, &v286);
  v288 = -1;
  if (v260 != v261)
    free(v260);
  *a4 = v156 + 24;
  a4[1] = v156;
  v219 = v264;
  v264 = 0;
  if (v219)
  {
    gdc::Registry::~Registry(v219);
    MEMORY[0x1A1AF4E00]();
  }
  v220 = v266;
  if (v266)
  {
    v221 = &v266->__shared_owners_;
    do
      v222 = __ldaxr((unint64_t *)v221);
    while (__stlxr(v222 - 1, (unint64_t *)v221));
    if (!v222)
    {
      ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
      std::__shared_weak_count::__release_weak(v220);
    }
  }
LABEL_372:
  v223 = (_QWORD *)v268;
  while (v223)
  {
    v228 = v223;
    v223 = (_QWORD *)*v223;
    v229 = (std::__shared_weak_count *)v228[6];
    if (v229)
    {
      v230 = (unint64_t *)&v229->__shared_owners_;
      do
        v231 = __ldaxr(v230);
      while (__stlxr(v231 - 1, v230));
      if (!v231)
      {
        ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
        std::__shared_weak_count::__release_weak(v229);
      }
    }
    operator delete(v228);
  }
  v224 = (void *)__p;
  *(_QWORD *)&__p = 0;
  if (v224)
    operator delete(v224);
  v225 = v270;
  if (v270)
  {
    v226 = v271;
    v227 = v270;
    if (v271 != v270)
    {
      do
      {
        v232 = (std::__shared_weak_count *)*((_QWORD *)v226 - 1);
        if (v232)
        {
          v233 = (unint64_t *)&v232->__shared_owners_;
          do
            v234 = __ldaxr(v233);
          while (__stlxr(v234 - 1, v233));
          if (!v234)
          {
            ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
            std::__shared_weak_count::__release_weak(v232);
          }
        }
        v226 -= 40;
      }
      while (v226 != v225);
      v227 = v270;
    }
    v271 = v225;
    operator delete(v227);
  }
  v235 = v273;
  if (v273)
  {
    v236 = v274;
    v237 = v273;
    if (v274 != v273)
    {
      do
      {
        v238 = (std::__shared_weak_count *)*(v236 - 1);
        if (v238)
        {
          v239 = (unint64_t *)&v238->__shared_owners_;
          do
            v240 = __ldaxr(v239);
          while (__stlxr(v240 - 1, v239));
          if (!v240)
          {
            ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
            std::__shared_weak_count::__release_weak(v238);
          }
        }
        v236 -= 2;
      }
      while (v236 != v235);
      v237 = v273;
    }
    v274 = v235;
    operator delete(v237);
  }
  v241 = (char *)v276;
  if (v276)
  {
    v242 = v277;
    v243 = v276;
    if (v277 != v276)
    {
      do
      {
        v244 = (std::__shared_weak_count *)*((_QWORD *)v242 - 1);
        if (v244)
        {
          v245 = (unint64_t *)&v244->__shared_owners_;
          do
            v246 = __ldaxr(v245);
          while (__stlxr(v246 - 1, v245));
          if (!v246)
          {
            ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
            std::__shared_weak_count::__release_weak(v244);
          }
        }
        v242 -= 16;
      }
      while (v242 != v241);
      v243 = v276;
    }
    v277 = v241;
    operator delete(v243);
  }
  if (v279[0])
    operator delete(v279[0]);
}

void sub_19FE56A40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, void **a11, md::MapTileData *a12, void *a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,gdc::Registry *a34,__int16 a35,char a36,char a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,void *__p)
{
  unint64_t *v53;
  std::__shared_weak_count *v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  void *v65;
  uint64_t shared_owners;
  void *v67;
  std::__shared_weak_count *v68;
  unint64_t *p_shared_owners;
  unint64_t v70;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *v72;
  unint64_t v73;
  void **v74;
  void *v75;
  uint64_t v76;
  void *v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  void *v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  void *v90;

  do
    v58 = __ldaxr(v53);
  while (__stlxr(v58 - 1, v53));
  if (!v58)
  {
    ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
    std::__shared_weak_count::__release_weak(v55);
  }
  v59 = *(_QWORD *)(v56 - 232);
  if (v59)
  {
    v60 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v59 + 24))(v59);
    v61 = *(_QWORD *)(v56 - 232);
    *(_QWORD *)(v56 - 232) = 0;
    *(_QWORD *)(v56 - 224) = v61;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v60 + 48))(v60, v56 - 224);
    v62 = *(_QWORD *)(v56 - 224);
    *(_QWORD *)(v56 - 224) = 0;
    if (v62)
      (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
    v63 = *(_QWORD *)(v56 - 232);
    *(_QWORD *)(v56 - 232) = 0;
    if (v63)
      (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  }
  do
    v64 = __ldaxr(v53);
  while (__stlxr(v64 - 1, v53));
  if (!v64)
  {
    ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
    std::__shared_weak_count::__release_weak(v55);
  }
  v65 = *a16;
  if (*a16)
  {
    shared_owners = v54[34].__shared_owners_;
    v67 = *a16;
    if ((void *)shared_owners != v65)
    {
      do
      {
        v68 = *(std::__shared_weak_count **)(shared_owners - 8);
        if (v68)
        {
          p_shared_owners = (unint64_t *)&v68->__shared_owners_;
          do
            v70 = __ldaxr(p_shared_owners);
          while (__stlxr(v70 - 1, p_shared_owners));
          if (!v70)
          {
            ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
            std::__shared_weak_count::__release_weak(v68);
          }
        }
        shared_owners -= 16;
      }
      while ((void *)shared_owners != v65);
      v67 = *a16;
    }
    v54[34].__shared_owners_ = (uint64_t)v65;
    operator delete(v67);
  }
  shared_weak_owners = (std::__shared_weak_count *)v54[33].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    v72 = (unint64_t *)&shared_weak_owners->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
      std::__shared_weak_count::__release_weak(shared_weak_owners);
    }
  }
  v74 = (void **)(a10 + 720);
  v75 = *a11;
  if (!*a11)
  {
LABEL_45:
    v84 = *v74;
    if (*v74)
    {
      v85 = v54[31].__shared_owners_;
      v86 = *v74;
      if ((void *)v85 != v84)
      {
        do
        {
          v87 = *(std::__shared_weak_count **)(v85 - 8);
          if (v87)
          {
            v88 = (unint64_t *)&v87->__shared_owners_;
            do
              v89 = __ldaxr(v88);
            while (__stlxr(v89 - 1, v88));
            if (!v89)
            {
              ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
              std::__shared_weak_count::__release_weak(v87);
            }
          }
          v85 -= 16;
        }
        while ((void *)v85 != v84);
        v86 = *v74;
      }
      v54[31].__shared_owners_ = (uint64_t)v84;
      operator delete(v86);
    }
    md::MapTileData::~MapTileData(a12);

    std::__shared_weak_count::~__shared_weak_count(v54);
    operator delete(v90);

    std::unique_ptr<gdc::Registry>::~unique_ptr[abi:nn180100](&a34);
    std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
    std::__hash_table<std::__hash_value_type<geo::QuadTile,std::shared_ptr<md::FlyoverDsmTileData>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::shared_ptr<md::FlyoverDsmTileData>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::shared_ptr<md::FlyoverDsmTileData>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::shared_ptr<md::FlyoverDsmTileData>>>>::~__hash_table((uint64_t)&a39);
    std::vector<std::pair<geo::QuadTile,std::shared_ptr<md::RasterTileResource>>>::~vector[abi:nn180100](&a44);
    md::DynamicTrafficTileList::~DynamicTrafficTileList((md::DynamicTrafficTileList *)&a47);
    md::DynamicTrafficTileList::~DynamicTrafficTileList((md::DynamicTrafficTileList *)&a50);
    if (__p)
    {
      operator delete(__p);
      _Unwind_Resume(a1);
    }
    _Unwind_Resume(a1);
  }
  v76 = v54[32].__shared_owners_;
  v77 = *a11;
  if ((void *)v76 == v75)
  {
LABEL_44:
    v54[32].__shared_owners_ = (uint64_t)v75;
    operator delete(v77);
    goto LABEL_45;
  }
  while (1)
  {
    v78 = *(std::__shared_weak_count **)(v76 - 8);
    if (!v78)
      goto LABEL_36;
    v79 = (unint64_t *)&v78->__shared_owners_;
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
      v81 = *(std::__shared_weak_count **)(v76 - 72);
      if (v81)
      {
LABEL_37:
        v82 = (unint64_t *)&v81->__shared_owners_;
        do
          v83 = __ldaxr(v82);
        while (__stlxr(v83 - 1, v82));
        if (!v83)
        {
          ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
          std::__shared_weak_count::__release_weak(v81);
        }
      }
    }
    else
    {
LABEL_36:
      v81 = *(std::__shared_weak_count **)(v76 - 72);
      if (v81)
        goto LABEL_37;
    }
    v76 -= 80;
    if ((void *)v76 == v75)
    {
      v77 = *a11;
      goto LABEL_44;
    }
  }
}

uint64_t md::FlyoverLayerDataSource::updateRequest()
{
  return 1;
}

uint64_t md::FlyoverLayerDataSource::getTileRequestLimit(md::FlyoverLayerDataSource *this)
{
  return 32;
}

void **std::vector<std::pair<geo::QuadTile,std::shared_ptr<md::RasterTileResource>>>::~vector[abi:nn180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 1);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 40;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void std::__shared_ptr_emplace<md::FlyoverTileData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB390;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::FlyoverTileData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB390;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::FlyoverTileData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

BOOL md::FlyoverLayerDataSource::constructRequests(std::__wrap_iter<std::shared_ptr<gdc::LayerDataRequest> *>,std::__wrap_iter<std::shared_ptr<gdc::LayerDataRequest> *>)const::$_0::operator()(uint64_t a1, __int16 a2)
{
  int v4;
  char *v5;
  char v6;
  int v7;
  int v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  int v15;
  _BYTE v16[2];
  __int16 v17;
  int v18;
  void *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char v23[32];
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 v27;
  unsigned __int8 v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;

  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(*(_QWORD *)a1 + 24) + 16))(&v26);
  v4 = v26;
  if ((_BYTE)v26)
  {
    v5 = *(char **)(a1 + 8);
    v6 = *v5;
    v15 = v29;
    v7 = v28;
    v8 = v27;
    v9 = *((_QWORD *)v5 + 14);
    LODWORD(v5) = *(_DWORD *)(a1 + 48);
    v16[0] = v6;
    v17 = a2;
    v18 = (int)v5;
    v19 = v23;
    v20 = v23;
    v21 = v23;
    v22 = 32;
    v24 = 0;
    v31 = v30;
    geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v19, v23, (char *)&v31, (char *)&v32);
    v31 = v15;
    geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v19, v20, (char *)&v31, (char *)&v32);
    v31 = v7;
    geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v19, v20, (char *)&v31, (char *)&v32);
    v31 = v8;
    geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v19, v20, (char *)&v31, (char *)&v32);
    v10 = (unsigned __int8 *)v19;
    v11 = v20 - (_BYTE *)v19;
    if (v20 == v19)
    {
      v12 = 0;
    }
    else
    {
      v12 = 0;
      if (v11 <= 1)
        v11 = 1;
      do
      {
        v13 = *v10++;
        v12 ^= (v12 << 6) + (v12 >> 2) - 0x61C8864680B583EBLL + v13;
        --v11;
      }
      while (v11);
    }
    v24 = v12;
    v25 = v9;
    gdc::LayerDataRequest::request(*(_QWORD *)(a1 + 8), (uint64_t)v16, 0);
    if (v19 != v21)
      free(v19);
  }
  return v4 != 0;
}

void std::__function::__func<md::ConfigSettingProvider::ConfigSettingProvider(NSObject  {objcproto17OS_dispatch_queue}*)::$_0,std::allocator<md::ConfigSettingProvider::ConfigSettingProvider(NSObject  {objcproto17OS_dispatch_queue}*)::$_0>,void ()(double)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::ConfigSettingProvider::ConfigSettingProvider(NSObject  {objcproto17OS_dispatch_queue}*)::$_0,std::allocator<md::ConfigSettingProvider::ConfigSettingProvider(NSObject  {objcproto17OS_dispatch_queue}*)::$_0>,void ()(double)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427A2F0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::ConfigSettingProvider::ConfigSettingProvider(NSObject  {objcproto17OS_dispatch_queue}*)::$_0,std::allocator<md::ConfigSettingProvider::ConfigSettingProvider(NSObject  {objcproto17OS_dispatch_queue}*)::$_0>,void ()(double)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E427A2F0;
  a2[1] = v2;
  return result;
}

float std::__function::__func<md::ConfigSettingProvider::ConfigSettingProvider(NSObject  {objcproto17OS_dispatch_queue}*)::$_0,std::allocator<md::ConfigSettingProvider::ConfigSettingProvider(NSObject  {objcproto17OS_dispatch_queue}*)::$_0>,void ()(double)>::operator()(uint64_t a1)
{
  uint64_t v1;
  float result;

  v1 = *(_QWORD *)(a1 + 8);
  result = sin(*(double *)(v1 + 16) * 0.0174532924);
  *(float *)(v1 + 80) = result;
  return result;
}

uint64_t ggl::SpecularBuilding::BuildingPipelineState::BuildingPipelineState(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD *a4)
{
  unsigned __int8 v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v10;
  char v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int16x8_t v18;
  int32x4_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int16x8_t v22;
  int32x4_t v23;
  int8x16_t v24;
  int32x4_t v25;
  int8x16_t v26;
  int32x4_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int16x8_t v37;
  int32x4_t v38;
  int8x16_t v39;
  int16x8_t v40;
  int32x4_t v41;
  int8x16_t v42;
  int32x4_t v43;
  int8x16_t v44;
  int32x4_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int16x8_t v60;
  int32x4_t v61;
  int8x16_t v62;
  int16x8_t v63;
  int32x4_t v64;
  int8x16_t v65;
  int32x4_t v66;
  int8x16_t v67;
  int32x4_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int16x8_t v75;
  int32x4_t v76;
  int8x16_t v77;
  int16x8_t v78;
  int32x4_t v79;
  int8x16_t v80;
  int32x4_t v81;
  int8x16_t v82;
  int32x4_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  _OWORD *v89;
  ggl::SpecularBuildingShader *v90;
  unsigned __int8 v91;
  unsigned __int8 v92;
  unsigned __int8 v93;
  unsigned __int8 v94;
  unsigned __int8 v95;
  unsigned __int8 v96;
  _QWORD *v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  _BYTE v101[28];

  if ((v5 & 1) == 0)
  {
    v89 = a4;
    v97 = a2;
    v98 = a3;
    a2 = v97;
    a3 = v98;
    a4 = v89;
    if ((_DWORD)v90)
    {
      if ((v91 & 1) == 0)
      {
        if ((_DWORD)v90)
        {
          if ((v94 & 1) == 0
          {
            if ((v96 & 1) == 0
            {
              ggl::MeshTyped<ggl::BuildingFacade::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::BuildingFacade::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::BuildingFacade::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::BuildingFacade::DefaultVbo>::attributesReflection(void)::r;
            unk_1ECE43BF8 = 1;
          }
          ggl::SpecularBuilding::BuildingPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::BuildingFacade::DefaultVbo>::typedReflection(void)::r;
          unk_1EE57CF70 = &ggl::SpecularBuilding::pipelineDataBuildingPipelineDeviceStructs(void)::ref;
          qword_1EE57CF78 = 0;
          if ((v95 & 1) == 0
          {
            ggl::SpecularBuilding::pipelineDataBuildingPipelineConstantStructs(void)::ref = (uint64_t)ggl::Fog::Skyfog::reflection(void)::reflection;
            *(_QWORD *)algn_1EE57CFA8 = ggl::Tile::View::reflection(void)::reflection;
            qword_1EE57CFB0 = (uint64_t)ggl::Building::Scale::reflection(void)::reflection;
            unk_1EE57CFB8 = ggl::Building::Style::reflection(void)::reflection;
            qword_1EE57CFC0 = (uint64_t)ggl::Building::Gradient::reflection(void)::reflection;
            unk_1EE57CFC8 = ggl::Lighting::LightConfiguration::reflection(void)::reflection;
            qword_1EE57CFD0 = (uint64_t)ggl::Building::Fade::reflection(void)::reflection;
          }
          qword_1EE57CF80 = (uint64_t)&ggl::SpecularBuilding::pipelineDataBuildingPipelineConstantStructs(void)::ref;
          *(_OWORD *)algn_1EE57CF88 = xmmword_19FFB3710;
        }
      }
      ggl::SpecularBuilding::BuildingPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::SpecularBuilding::BuildingPipelineSetup::typedReflection(void)::ref;
      ggl::SpecularBuildingShader::typedReflection(v90);
      qword_1ECE314D8 = (uint64_t)&ggl::SpecularBuildingShader::typedReflection(void)::ref;
      if ((v92 & 1) == 0
      {
        ggl::SpecularBuilding::pipelineStateBuildingPipelineAttributeStructBinding(void)::attr = 0;
        *(_QWORD *)algn_1EE57D138 = 0;
        qword_1EE57D140 = (uint64_t)"";
        dword_1EE57D148 = 0;
        qword_1EE57D150 = (uint64_t)&ggl::SpecularBuilding::pipelineStateBuildingPipelineAttributeBinding_0(void)::attr;
        unk_1EE57D158 = 2;
      }
      qword_1ECE314E0 = (uint64_t)&ggl::SpecularBuilding::pipelineStateBuildingPipelineAttributeStructBinding(void)::attr;
      *(_QWORD *)algn_1ECE314E8 = 1;
      qword_1ECE314F0 = 0;
      unk_1ECE314F8 = 1;
      qword_1ECE31500 = (uint64_t)&ggl::SpecularBuilding::pipelineStateBuildingPipelineDeviceStructBinding(void)::ref;
      unk_1ECE31508 = 0;
      if ((v93 & 1) == 0
      {
        ggl::SpecularBuilding::pipelineStateBuildingPipelineConstantStructBinding(void)::ref = 0;
        *(_QWORD *)algn_1EE57CFE8 = 0;
        qword_1EE57CFF0 = (uint64_t)"skyfog";
        dword_1EE57CFF8 = 3;
        qword_1EE57D000 = (uint64_t)&ggl::SpecularBuilding::pipelineStateBuildingPipelineConstantSkyfogBinding(void)::reflection;
        unk_1EE57D008 = xmmword_19FFB3720;
        qword_1EE57D018 = 1;
        unk_1EE57D020 = "view";
        dword_1EE57D028 = 3;
        qword_1EE57D030 = (uint64_t)&ggl::SpecularBuilding::pipelineStateBuildingPipelineConstantViewBinding(void)::reflection;
        unk_1EE57D038 = vdupq_n_s64(2uLL);
        qword_1EE57D048 = 2;
        unk_1EE57D050 = "scale";
        dword_1EE57D058 = 3;
        qword_1EE57D060 = (uint64_t)&ggl::SpecularBuilding::pipelineStateBuildingPipelineConstantScaleBinding(void)::reflection;
        unk_1EE57D068 = xmmword_19FFB3730;
        qword_1EE57D078 = 3;
        unk_1EE57D080 = "style";
        dword_1EE57D088 = 3;
        qword_1EE57D090 = (uint64_t)&ggl::SpecularBuilding::pipelineStateBuildingPipelineConstantStyleBinding(void)::reflection;
        unk_1EE57D098 = xmmword_19FFB3740;
        qword_1EE57D0A8 = 4;
        unk_1EE57D0B0 = "gradient";
        dword_1EE57D0B8 = 3;
        qword_1EE57D0C0 = (uint64_t)&ggl::SpecularBuilding::pipelineStateBuildingPipelineConstantGradientBinding(void)::reflection;
        unk_1EE57D0C8 = xmmword_19FFB3670;
        qword_1EE57D0D8 = 5;
        unk_1EE57D0E0 = "lightConfig";
        dword_1EE57D0E8 = 3;
        qword_1EE57D0F0 = (uint64_t)&ggl::SpecularBuilding::pipelineStateBuildingPipelineConstantLightConfigBinding(void)::reflection;
        xmmword_1EE57D0F8 = xmmword_19FFB3750;
        qword_1EE57D108 = 6;
        unk_1EE57D110 = "fade";
        dword_1EE57D118 = 3;
        qword_1EE57D120 = (uint64_t)&ggl::SpecularBuilding::pipelineStateBuildingPipelineConstantFadeBinding(void)::reflection;
        unk_1EE57D128 = 2;
      }
      qword_1ECE31510 = (uint64_t)&ggl::SpecularBuilding::pipelineStateBuildingPipelineConstantStructBinding(void)::ref;
      unk_1ECE31518 = 7;
      a4 = v89;
      a2 = v97;
      a3 = v98;
    }
  }
  v6 = *a2;
  v7 = (std::__shared_weak_count *)a2[1];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  *(_OWORD *)v101 = *(_OWORD *)a3;
  *(_OWORD *)&v101[12] = *(_OWORD *)(a3 + 12);
  v10 = *(_OWORD *)(a3 + 28);
  v11 = *(_BYTE *)(a3 + 44);
  v99 = *a4;
  v100 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &off_1E42B6760;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = &ggl::SpecularBuilding::BuildingPipelineState::typedReflection(void)::ref;
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = v7;
  if (v7)
  {
    v12 = (unint64_t *)&v7->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_BYTE *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 148) = 0;
  *(_QWORD *)(a1 + 140) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 180) = 0;
  *(_QWORD *)(a1 + 196) = 0;
  *(_QWORD *)(a1 + 188) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 228) = 0;
  *(_QWORD *)(a1 + 244) = 0;
  *(_QWORD *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v99;
  *(_OWORD *)(a1 + 272) = v100;
  *(_BYTE *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0x100000001;
  *(_BYTE *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v101;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v101[12];
  *(_OWORD *)(a1 + 92) = v10;
  *(_BYTE *)(a1 + 108) = v11;
  if (v7)
  {
    v14 = (unint64_t *)&v7->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_BYTE *)(a1 + 305) = 0;
  v16 = *(int8x16_t *)(a1 + 320);
  v17 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  v18 = vmovl_high_s8(v17);
  v19 = vmovl_s16(*(int16x4_t *)v18.i8);
  v20.i64[0] = v19.u32[0];
  v20.i64[1] = v19.u32[1];
  v21 = v20;
  v22 = vmovl_s8(*(int8x8_t *)v17.i8);
  v23 = vmovl_s16(*(int16x4_t *)v22.i8);
  *(_QWORD *)a1 = &off_1E42B8A80;
  v20.i64[0] = v23.u32[0];
  v20.i64[1] = v23.u32[1];
  v24 = v20;
  v25 = vmovl_high_s16(v18);
  v20.i64[0] = v25.u32[0];
  v20.i64[1] = v25.u32[1];
  v26 = v20;
  v27 = vmovl_high_s16(v22);
  v20.i64[0] = v27.u32[0];
  v20.i64[1] = v27.u32[1];
  v28 = v20;
  v20.i64[0] = v19.u32[2];
  v20.i64[1] = v19.u32[3];
  v29 = v20;
  v20.i64[0] = v23.u32[2];
  v20.i64[1] = v23.u32[3];
  v30 = v20;
  v20.i64[0] = v25.u32[2];
  v20.i64[1] = v25.u32[3];
  v31 = v20;
  v20.i64[0] = v27.u32[2];
  v20.i64[1] = v27.u32[3];
  v32 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v20);
  v33 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v31);
  v34 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v30);
  v35 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v26);
  v36 = vceqzq_s8(v16);
  v37 = vmovl_high_s8(v36);
  v38 = vmovl_s16(*(int16x4_t *)v37.i8);
  v20.i64[0] = v38.u32[0];
  v20.i64[1] = v38.u32[1];
  v39 = v20;
  v40 = vmovl_s8(*(int8x8_t *)v36.i8);
  v41 = vmovl_s16(*(int16x4_t *)v40.i8);
  v20.i64[0] = v41.u32[0];
  v20.i64[1] = v41.u32[1];
  v42 = v20;
  v43 = vmovl_high_s16(v37);
  v20.i64[0] = v43.u32[0];
  v20.i64[1] = v43.u32[1];
  v44 = v20;
  v45 = vmovl_high_s16(v40);
  v20.i64[0] = v45.u32[0];
  v20.i64[1] = v45.u32[1];
  v46 = v20;
  v20.i64[0] = v38.u32[2];
  v20.i64[1] = v38.u32[3];
  v47 = v20;
  v20.i64[0] = v41.u32[2];
  v20.i64[1] = v41.u32[3];
  v48 = v20;
  v20.i64[0] = v43.u32[2];
  v20.i64[1] = v43.u32[3];
  v49 = v20;
  v20.i64[0] = v45.u32[2];
  v20.i64[1] = v45.u32[3];
  v50 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v49);
  v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v39), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v21));
  v52 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v42), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v24));
  v53 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v44), v35);
  v54 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v46), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v28));
  v55 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v47), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v29));
  v56 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v48), v34);
  v57 = vorrq_s8(v50, v33);
  v58 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v20), v32);
  v59 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  v60 = vmovl_s8(*(int8x8_t *)v59.i8);
  v61 = vmovl_high_s16(v60);
  v20.i64[0] = v61.i32[2];
  v20.i64[1] = v61.i32[3];
  v62 = v20;
  v63 = vmovl_high_s8(v59);
  v64 = vmovl_high_s16(v63);
  v20.i64[0] = v64.i32[2];
  v20.i64[1] = v64.i32[3];
  v65 = v20;
  v66 = vmovl_s16(*(int16x4_t *)v60.i8);
  v20.i64[0] = v66.i32[2];
  v20.i64[1] = v66.i32[3];
  v67 = v20;
  v68 = vmovl_s16(*(int16x4_t *)v63.i8);
  v20.i64[0] = v68.i32[2];
  v20.i64[1] = v68.i32[3];
  v69 = v20;
  v20.i64[0] = v61.i32[0];
  v20.i64[1] = v61.i32[1];
  v70 = v20;
  v20.i64[0] = v64.i32[0];
  v20.i64[1] = v64.i32[1];
  v71 = v20;
  v20.i64[0] = v66.i32[0];
  v20.i64[1] = v66.i32[1];
  v72 = v20;
  v20.i64[0] = v68.i32[0];
  v20.i64[1] = v68.i32[1];
  v73 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v20);
  v74 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  v75 = vmovl_high_s8(v74);
  v76 = vmovl_s16(*(int16x4_t *)v75.i8);
  v20.i64[0] = v76.i32[0];
  v20.i64[1] = v76.i32[1];
  v77 = v20;
  v78 = vmovl_s8(*(int8x8_t *)v74.i8);
  v79 = vmovl_s16(*(int16x4_t *)v78.i8);
  v20.i64[0] = v79.i32[0];
  v20.i64[1] = v79.i32[1];
  v80 = v20;
  v81 = vmovl_high_s16(v75);
  v20.i64[0] = v81.i32[0];
  v20.i64[1] = v81.i32[1];
  v82 = v20;
  v83 = vmovl_high_s16(v78);
  v20.i64[0] = v83.i32[0];
  v20.i64[1] = v83.i32[1];
  v84 = v20;
  v20.i64[0] = v76.i32[2];
  v20.i64[1] = v76.i32[3];
  v85 = v20;
  v20.i64[0] = v79.i32[2];
  v20.i64[1] = v79.i32[3];
  v86 = v20;
  v20.i64[0] = v81.i32[2];
  v20.i64[1] = v81.i32[3];
  v87 = v20;
  v20.i64[0] = v83.i32[2];
  v20.i64[1] = v83.i32[3];
  *(_QWORD *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v80), vbicq_s8((int8x16_t)xmmword_19FFB3170, v72)), v52), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v77), v73), v51)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v84), vbicq_s8((int8x16_t)xmmword_19FFB3190, v70)), v54), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v82), vbicq_s8((int8x16_t)xmmword_19FFB3180, v71)),
                                               v53))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v86), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v67)), v56), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v85), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v69)), v55)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v20), vbicq_s8((int8x16_t)xmmword_19FFB31D0, v62)), v58), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31F0, v87),
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31C0, v65)),
                                               v57)))));
  *(_BYTE *)(a1 + 288) = 1;
  return a1;
}

uint64_t md::TransitNodeTextureAtlas::infoForIcon(uint64_t a1, int a2, unsigned int a3, int a4, int a5)
{
  unsigned int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t v12;
  int v13;
  uint64_t *v15;
  unsigned int v16;
  unsigned int v18;
  unsigned int v19;
  BOOL v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t *i;
  _QWORD *v27;
  float v28;
  id v29;
  grl::Allocator *v30;
  uint64_t v34;
  char *v35;
  char *v36;
  _QWORD *v37;
  uint64_t *v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  char *v45;
  uint64_t v46;
  uint64_t *v47;
  _DWORD *v48;
  _DWORD *v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  BOOL v53;
  _DWORD *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *p_shared_owners;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  char *v78;
  __int128 v79;
  char *v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  float v85;
  std::__shared_weak_count *v86;
  uint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  float v95;
  uint64_t v96;
  int v97;
  int v98;
  float v99;
  float v100;
  float v101;
  float *v102;
  uint64_t *v103;
  uint64_t *v104;
  unsigned int v105;
  int v106;
  unsigned int v107;
  unsigned int v108;
  int v109;
  uint64_t v110;
  int v111;
  unsigned int v112;
  BOOL v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  char v128;
  char v129;
  uint64_t v130;
  std::__shared_weak_count *v131;
  int v132;
  char v133;
  int v134;
  __int16 v135;
  char v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  __int128 v141;
  __int16 v142;
  char v143;
  _QWORD v144[2];
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  _OWORD v151[5];
  uint64_t v152;
  uint64_t v153;

  v153 = *MEMORY[0x1E0C80C00];
  if (a4 == 2)
    v7 = 65610;
  else
    v7 = 65558;
  if (a5 == 1)
    v8 = 3;
  else
    v8 = 2;
  if (a2 == 2)
    v9 = v8;
  else
    v9 = a2 == 1;
  v141 = 0uLL;
  v11 = (uint64_t **)(a1 + 72);
  v10 = *(_QWORD *)(a1 + 72);
  if (v10)
  {
    v12 = a1 + 72;
    do
    {
      v16 = *(_DWORD *)(v10 + 32);
      _CF = v16 >= v7;
      if (v16 == v7)
      {
        v18 = *(_DWORD *)(v10 + 36);
        _CF = v18 >= v9;
        if (v18 == v9)
          _CF = *(unsigned __int8 *)(v10 + 40) >= a3;
      }
      v13 = !_CF;
      _ZF = v13 == 0;
      if (v13)
        v15 = (uint64_t *)(v10 + 8);
      else
        v15 = (uint64_t *)v10;
      if (_ZF)
        v12 = v10;
      v10 = *v15;
    }
    while (*v15);
    if ((uint64_t **)v12 != v11)
    {
      v19 = *(_DWORD *)(v12 + 32);
      v20 = v7 >= v19;
      if (v7 == v19 && (v21 = *(_DWORD *)(v12 + 36), v20 = v9 >= v21, v9 == v21))
      {
        if (*(unsigned __int8 *)(v12 + 40) <= a3)
          goto LABEL_29;
      }
      else if (v20)
      {
LABEL_29:
        v23 = *(_QWORD *)(v12 + 48);
        v22 = *(_QWORD *)(v12 + 56);
        if (v22)
        {
          v24 = (unint64_t *)(v22 + 8);
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
          *(_QWORD *)&v141 = v23;
          *((_QWORD *)&v141 + 1) = v22;
        }
        else
        {
          v141 = v23;
        }
        goto LABEL_178;
      }
    }
  }
  v27 = (_QWORD *)(a1 + 96);
  for (i = *(uint64_t **)(a1 + 96); i; i = (uint64_t *)*i)
  {
    v39 = *((_DWORD *)i + 7);
    if (v7 == v39)
    {
      v40 = *((_DWORD *)i + 8);
      if (v9 == v40)
      {
        v41 = *((unsigned __int8 *)i + 36);
        if (v41 > a3)
          continue;
        if (v41 >= a3)
          goto LABEL_180;
      }
      else
      {
        if (v9 < v40)
          continue;
        if (v40 >= v9)
          goto LABEL_180;
      }
    }
    else
    {
      if (v7 < v39)
        continue;
      if (v39 >= v7)
        goto LABEL_180;
    }
    ++i;
  }
  v128 = a2;
  v129 = a5;
  v132 = 1065353216;
  v133 = 4;
  v135 = -1;
  v134 = 0;
  v136 = 0;
  v138 = 0;
  v139 = 0;
  v137 = 0;
  v140 = grl::Allocator::instance((grl::Allocator *)a1);
  v28 = *(double *)(a1 + 24);
  grl::IconRequestOptions::setContentScale((float *)&v132, v28);
  grl::IconRequestOptions::setSizeGroup((uint64_t)&v132, a3);
  v29 = *(id *)(a1 + 8);
  v30 = (grl::Allocator *)objc_msgSend(v29, "grlIconManager");
  v144[0] = 0;
  v145 = 0u;
  v152 = 0;
  memset(v151, 0, sizeof(v151));
  v148 = 0u;
  v149 = 0u;
  v146 = 0u;
  v147 = 0u;
  __asm { FMOV            V0.2S, #1.0 }
  v144[1] = _D0;
  BYTE14(v145) = 0;
  v150 = 0uLL;
  *((_QWORD *)&v150 + 1) = grl::Allocator::instance(v30);
  memset(v151, 0, 56);
  *((_QWORD *)&v149 + 1) = &v150;
  v152 = 0;
  grl::IconManager::imageForKeyValue((uint64_t)v30, v7, v9, (const grl::IconModifiers *)v144, (float *)&v132, 0, &v130);
  grl::IconModifiers::~IconModifiers((grl::IconModifiers *)v144);

  v34 = v130;
  if (v130)
  {
    v35 = (char *)operator new(0x60uLL);
    *((_QWORD *)v35 + 1) = 0;
    *((_QWORD *)v35 + 2) = 0;
    *(_QWORD *)v35 = &off_1E42DCE78;
    *(_OWORD *)(v35 + 24) = 0u;
    v36 = v35 + 24;
    *(_OWORD *)(v35 + 40) = 0u;
    *(_OWORD *)(v35 + 56) = 0u;
    *(_OWORD *)(v35 + 72) = 0u;
    *((_QWORD *)v35 + 11) = 0;
    *(_QWORD *)&v141 = v35 + 24;
    *((_QWORD *)&v141 + 1) = v35;
    v37 = v11;
    v38 = *v11;
    if (!*v11)
    {
LABEL_64:
      v45 = (char *)operator new(0x40uLL);
      *((_DWORD *)v45 + 8) = v7;
      *((_DWORD *)v45 + 9) = v9;
      v45[40] = a3;
      *(_WORD *)(v45 + 41) = v142;
      v45[43] = v143;
      *((_QWORD *)v45 + 6) = 0;
      *((_QWORD *)v45 + 7) = 0;
      *(_QWORD *)v45 = 0;
      *((_QWORD *)v45 + 1) = 0;
      *((_QWORD *)v45 + 2) = v37;
      *v11 = (uint64_t *)v45;
      v46 = **(_QWORD **)(a1 + 64);
      v47 = (uint64_t *)v45;
      if (v46)
      {
        *(_QWORD *)(a1 + 64) = v46;
        v47 = *v11;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 72), v47);
      ++*(_QWORD *)(a1 + 80);
      v35 = (char *)*((_QWORD *)&v141 + 1);
      v36 = (char *)v141;
      if (*((_QWORD *)&v141 + 1))
      {
LABEL_88:
        v57 = (unint64_t *)(v35 + 8);
        do
          v58 = __ldxr(v57);
        while (__stxr(v58 + 1, v57));
      }
      v59 = (std::__shared_weak_count *)*((_QWORD *)v45 + 7);
      *((_QWORD *)v45 + 6) = v36;
      *((_QWORD *)v45 + 7) = v35;
      if (v59)
      {
        p_shared_owners = (unint64_t *)&v59->__shared_owners_;
        do
          v61 = __ldaxr(p_shared_owners);
        while (__stlxr(v61 - 1, p_shared_owners));
        if (!v61)
        {
          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
          std::__shared_weak_count::__release_weak(v59);
        }
      }
      v63 = *(char **)(a1 + 120);
      v62 = *(_QWORD *)(a1 + 128);
      if ((unint64_t)v63 >= v62)
      {
        v68 = *(char **)(a1 + 112);
        v69 = (v63 - v68) >> 4;
        v70 = v69 + 1;
        if ((unint64_t)(v69 + 1) >> 60)
          abort();
        v71 = v62 - (_QWORD)v68;
        if (v71 >> 3 > v70)
          v70 = v71 >> 3;
        if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFF0)
          v72 = 0xFFFFFFFFFFFFFFFLL;
        else
          v72 = v70;
        if (v72 >> 60)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v73 = (char *)operator new(16 * v72);
        v74 = &v73[16 * v69];
        v75 = *((_QWORD *)&v141 + 1);
        *(_OWORD *)v74 = v141;
        if (v75)
        {
          v76 = (unint64_t *)(v75 + 8);
          do
            v77 = __ldxr(v76);
          while (__stxr(v77 + 1, v76));
          v68 = *(char **)(a1 + 112);
          v63 = *(char **)(a1 + 120);
        }
        v78 = &v73[16 * v72];
        v67 = v74 + 16;
        if (v63 == v68)
        {
          *(_QWORD *)(a1 + 112) = v74;
          *(_QWORD *)(a1 + 120) = v67;
          *(_QWORD *)(a1 + 128) = v78;
        }
        else
        {
          do
          {
            v79 = *((_OWORD *)v63 - 1);
            v63 -= 16;
            *((_OWORD *)v74 - 1) = v79;
            v74 -= 16;
            *(_QWORD *)v63 = 0;
            *((_QWORD *)v63 + 1) = 0;
          }
          while (v63 != v68);
          v68 = *(char **)(a1 + 112);
          v80 = *(char **)(a1 + 120);
          *(_QWORD *)(a1 + 112) = v74;
          *(_QWORD *)(a1 + 120) = v67;
          *(_QWORD *)(a1 + 128) = v78;
          while (v80 != v68)
          {
            v81 = (std::__shared_weak_count *)*((_QWORD *)v80 - 1);
            if (v81)
            {
              v82 = (unint64_t *)&v81->__shared_owners_;
              do
                v83 = __ldaxr(v82);
              while (__stlxr(v83 - 1, v82));
              if (!v83)
              {
                ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                std::__shared_weak_count::__release_weak(v81);
              }
            }
            v80 -= 16;
          }
        }
        if (v68)
          operator delete(v68);
      }
      else
      {
        *(_QWORD *)v63 = v141;
        v64 = *((_QWORD *)&v141 + 1);
        *((_QWORD *)v63 + 1) = *((_QWORD *)&v141 + 1);
        if (v64)
        {
          v65 = (unint64_t *)(v64 + 8);
          do
            v66 = __ldxr(v65);
          while (__stxr(v66 + 1, v65));
        }
        v67 = v63 + 16;
      }
      *(_QWORD *)(a1 + 120) = v67;
      v84 = v141;
      *(_BYTE *)(v141 + 56) = v128;
      *(_BYTE *)(v84 + 64) = v129;
      v85 = *(double *)(a1 + 24);
      *(_DWORD *)(v84 + 16) = 0;
      *(float *)(v84 + 20) = -v85;
      v87 = v130;
      v86 = v131;
      if (v131)
      {
        v88 = (unint64_t *)&v131->__shared_owners_;
        do
          v89 = __ldxr(v88);
        while (__stxr(v89 + 1, v88));
      }
      v90 = *(std::__shared_weak_count **)(v84 + 48);
      *(_QWORD *)(v84 + 40) = v87;
      *(_QWORD *)(v84 + 48) = v86;
      if (v90)
      {
        v91 = (unint64_t *)&v90->__shared_owners_;
        do
          v92 = __ldaxr(v91);
        while (__stlxr(v92 - 1, v91));
        if (!v92)
        {
          ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
          std::__shared_weak_count::__release_weak(v90);
        }
      }
      v93 = v141;
      v94 = *(_QWORD *)(v141 + 40);
      if (v94)
      {
        v95 = *(float *)grl::IconMetrics::size((grl::IconMetrics *)(v94 + 24));
        v96 = grl::IconMetrics::size((grl::IconMetrics *)(*(_QWORD *)(v93 + 40) + 24));
        v97 = (int)*(float *)(v96 + 4);
        if (v97 >= 0)
          v98 = (int)*(float *)(v96 + 4);
        else
          v98 = v97 + 1;
        v99 = (float)(v98 >> 1);
        *(float *)(v93 + 28) = v99;
        *(_DWORD *)(v93 + 8) = (int)v95;
        *(_DWORD *)(v93 + 12) = v97;
        v100 = (float)((int)v95 / 2);
        *(_DWORD *)(v93 + 32) = (int)*(double *)(a1 + 24);
        *(float *)(v93 + 24) = v100;
        if (*(unsigned __int8 *)(v93 + 56) <= 1u)
        {
          v101 = (float)v97;
          if (v99 >= v100)
            v102 = (float *)(v93 + 24);
          else
            v102 = (float *)(v93 + 28);
          *(float *)(v93 + 28) = v101 - *v102;
        }
        v103 = *(uint64_t **)(a1 + 112);
        v104 = *(uint64_t **)(a1 + 120);
        if (v103 == v104)
        {
          v116 = 2;
          v108 = 1;
        }
        else
        {
          v105 = 0;
          v106 = 1;
          v107 = 1;
          v108 = 1;
          do
          {
            v110 = *v103;
            v111 = *(_DWORD *)(*v103 + 8);
            v112 = v107 + v111 - 255;
            v113 = __CFADD__(v112, 256);
            if (v112 >= 0xFFFFFF00)
              v114 = v105;
            else
              v114 = 0;
            if (v113)
            {
              v115 = 0;
            }
            else
            {
              v107 = 1;
              v115 = v105 + 1;
            }
            v106 += v115;
            if (v110 == v93)
            {
              *(_DWORD *)v93 = v107;
              *(_DWORD *)(v93 + 4) = v106;
              v111 = *(_DWORD *)(v110 + 8);
            }
            v109 = v107 + v111;
            v107 += v111 + 1;
            if (v108 <= v107)
              v108 = v109 + 1;
            v105 = *(_DWORD *)(v110 + 12);
            if (v114 > v105)
              v105 = v114;
            v103 += 2;
          }
          while (v103 != v104);
          v116 = v105 + v106 + 1;
          if (v108 > 0xFF)
          {
LABEL_166:
            v119 = *(_QWORD *)(a1 + 56);
            *(_QWORD *)(a1 + 56) = 0;
            if (v119)
              (*(void (**)(uint64_t))(*(_QWORD *)v119 + 8))(v119);
            *(_QWORD *)(a1 + 40) = 0;
            v56 = v131;
            if (!v131)
              goto LABEL_169;
LABEL_162:
            v117 = (unint64_t *)&v56->__shared_owners_;
            do
              v118 = __ldaxr(v117);
            while (__stlxr(v118 - 1, v117));
            if (!v118)
            {
              ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
              std::__shared_weak_count::__release_weak(v56);
            }
            goto LABEL_169;
          }
        }
        if (v116 > 0xFF)
          goto LABEL_166;
        *(_DWORD *)(a1 + 40) = v108;
        *(_DWORD *)(a1 + 44) = v116;
        *(_BYTE *)(a1 + 48) = 1;
      }
LABEL_161:
      v56 = v131;
      if (!v131)
        goto LABEL_169;
      goto LABEL_162;
    }
    while (1)
    {
      while (1)
      {
        v37 = v38;
        v42 = *((_DWORD *)v38 + 8);
        if (v7 == v42)
          break;
        if (v7 < v42)
          goto LABEL_51;
        if (v42 >= v7)
          goto LABEL_87;
LABEL_62:
        v38 = (uint64_t *)v37[1];
        if (!v38)
        {
          v11 = (uint64_t **)(v37 + 1);
          goto LABEL_64;
        }
      }
      v43 = *((_DWORD *)v37 + 9);
      if (v9 != v43)
      {
        if (v9 < v43)
          goto LABEL_51;
        if (v43 >= v9)
        {
LABEL_87:
          v45 = (char *)v37;
          goto LABEL_88;
        }
        goto LABEL_62;
      }
      v44 = *((unsigned __int8 *)v37 + 40);
      if (v44 <= a3)
      {
        if (v44 >= a3)
          goto LABEL_87;
        goto LABEL_62;
      }
LABEL_51:
      v38 = (uint64_t *)*v37;
      v11 = (uint64_t **)v37;
      if (!*v37)
        goto LABEL_64;
    }
  }
  v48 = (_DWORD *)*v27;
  v49 = (_DWORD *)(a1 + 96);
  if (*v27)
  {
    while (1)
    {
      v49 = v48;
      v50 = v48[7];
      if (v7 == v50)
      {
        v51 = v49[8];
        if (v9 == v51)
        {
          v52 = *((unsigned __int8 *)v49 + 36);
          v53 = v52 >= a3;
          if (v52 <= a3)
            goto LABEL_80;
        }
        else if (v9 >= v51)
        {
          v53 = v51 >= v9;
LABEL_80:
          if (v53)
            goto LABEL_161;
          goto LABEL_81;
        }
LABEL_70:
        v48 = *(_DWORD **)v49;
        v27 = v49;
        if (!*(_QWORD *)v49)
          break;
      }
      else
      {
        if (v7 < v50)
          goto LABEL_70;
        if (v50 >= v7)
          goto LABEL_161;
LABEL_81:
        v48 = (_DWORD *)*((_QWORD *)v49 + 1);
        if (!v48)
        {
          v27 = v49 + 2;
          break;
        }
      }
    }
  }
  v54 = operator new(0x28uLL);
  v54[7] = v7;
  v54[8] = v9;
  *((_BYTE *)v54 + 36) = a3;
  *(_QWORD *)v54 = 0;
  *((_QWORD *)v54 + 1) = 0;
  *((_QWORD *)v54 + 2) = v49;
  *v27 = v54;
  v55 = **(_QWORD **)(a1 + 88);
  if (v55)
  {
    *(_QWORD *)(a1 + 88) = v55;
    v54 = (_DWORD *)*v27;
  }
  std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 96), (uint64_t *)v54);
  ++*(_QWORD *)(a1 + 104);
  v56 = v131;
  if (v131)
    goto LABEL_162;
LABEL_169:
  v120 = v137;
  if (v137)
  {
    v121 = v138;
    v122 = v137;
    if (v138 != v137)
    {
      do
      {
        if (*(char *)(v121 - 1) < 0)
          operator delete(*(void **)(v121 - 24));
        v121 -= 24;
      }
      while (v121 != v120);
      v122 = v137;
    }
    v138 = v120;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v140 + 40))(v140, v122, v139 - v122);
  }
  if (!v34)
  {
LABEL_180:
    v123 = 0;
    v124 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
    if (!*((_QWORD *)&v141 + 1))
      return v123;
    goto LABEL_181;
  }
LABEL_178:
  v124 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
  v123 = v141;
  if (!*((_QWORD *)&v141 + 1))
    return v123;
LABEL_181:
  v125 = (unint64_t *)&v124->__shared_owners_;
  do
    v126 = __ldaxr(v125);
  while (__stlxr(v126 - 1, v125));
  if (!v126)
  {
    ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
    std::__shared_weak_count::__release_weak(v124);
  }
  return v123;
}

void sub_19FE58550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  grl::IconRequestOptions::~IconRequestOptions((grl::IconRequestOptions *)va1);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<md::TransitNodeTextureAtlas::IconInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DCE78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::TransitNodeTextureAtlas::IconInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DCE78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::TransitNodeTextureAtlas::IconInfo>::__on_zero_shared(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 72);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void md::TransitNodeTextureAtlas::updateTextureIfNecessary(md::TransitNodeTextureAtlas *this)
{
  std::__shared_weak_count *v2;
  char *v3;
  size_t v4;
  uint64_t *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  float v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  CGContext *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char v26;
  char *v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  int v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char v38;
  _BYTE *v39;
  int v40;
  char *v41;
  unint64_t *v42;
  __int128 v43;
  uint64_t v44;
  _QWORD *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  int v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  md::TransitNodeTextureAtlas *v62;
  char *v63;
  char *v64;
  CGColorSpace *space;
  uint64_t *v66;
  uint64_t (**v67)();
  CGImageRef image;
  uint64_t v69;
  std::__shared_weak_count *v70;
  _QWORD *v71;
  std::__shared_weak_count *v72;
  CGRect v73;

  if (*((_BYTE *)this + 48))
  {
    *((_BYTE *)this + 48) = 0;
    v2 = (std::__shared_weak_count *)operator new(0x60uLL);
    v2->__shared_owners_ = 0;
    v2->__shared_weak_owners_ = 0;
    v2->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEFB8;
    v71 = ggl::TextureData2D::TextureData2D((uint64_t)&v2[1], *((_DWORD *)this + 10), *((_DWORD *)this + 11), 1u, 12, 0);
    v72 = v2;
    v3 = (char *)((uint64_t (*)(_QWORD *, _QWORD))v2[1].__on_zero_shared)(v71, 0);
    v4 = (4 * *((_DWORD *)this + 10));
    v64 = v3;
    bzero(v3, (v4 * *((_DWORD *)this + 11)));
    space = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9DA00]);
    v5 = (uint64_t *)*((_QWORD *)this + 14);
    v62 = this;
    v66 = (uint64_t *)*((_QWORD *)this + 15);
    if (v5 != v66)
    {
      v63 = v64 + 3;
      do
      {
        v7 = *(_QWORD *)(*v5 + 40);
        v6 = *(std::__shared_weak_count **)(*v5 + 48);
        v69 = v7;
        v70 = v6;
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v9 = __ldxr(p_shared_owners);
          while (__stxr(v9 + 1, p_shared_owners));
        }
        if (!v7)
          goto LABEL_12;
        v10 = *(float *)grl::IconMetrics::size((grl::IconMetrics *)(v7 + 24));
        v11 = *(float *)(grl::IconMetrics::size((grl::IconMetrics *)(v7 + 24)) + 4);
        v12 = (*(_DWORD *)(*v5 + 4) * v4);
        v13 = (4 * *(_DWORD *)*v5);
        v14 = CGBitmapContextCreate(&v64[v13 + v12], v10, v11, 8uLL, v4, space, 1u);
        CGContextTranslateCTM(v14, 0.0, (double)v11);
        CGContextScaleCTM(v14, 1.0, -1.0);
        grl::IconImage::image((grl::IconImage *)v7, &v67);
        v73.size.width = (double)v10;
        v73.origin.x = 0.0;
        v73.origin.y = 0.0;
        v73.size.height = (double)v11;
        CGContextDrawImage(v14, v73, image);
        v67 = &off_1E42B4870;
        if (image)
          CFRelease(image);
        CGContextRelease(v14);
        v15 = *v5;
        if (*(_BYTE *)(*v5 + 56))
          goto LABEL_12;
        v18 = *(unsigned int *)(v15 + 12);
        if (!(_DWORD)v18)
          goto LABEL_12;
        v19 = *(unsigned int *)(v15 + 8);
        if (!(_DWORD)v19)
          goto LABEL_12;
        if (v19 > 1)
        {
          v21 = v19 & 0xFFFFFFFE;
          if (v21 == v19)
          {
            v22 = 0;
            v23 = &v63[v12 + v13];
            do
            {
              v24 = v23;
              v25 = v19;
              do
              {
                v26 = v24[3];
                *v24 = *(v24 - 1);
                v24[4] = v26;
                v24 += 8;
                v25 -= 2;
              }
              while (v25);
              ++v22;
              v23 += v4;
            }
            while (v22 != v18);
          }
          else
          {
            v32 = 0;
            v33 = &v63[v12 + v13];
            v34 = v19 - v21;
            v35 = (uint64_t)&v63[4 * v21 + v12 + v13];
            do
            {
              v36 = v33;
              v37 = v21;
              do
              {
                v38 = v36[3];
                *v36 = *(v36 - 1);
                v36[4] = v38;
                v36 += 8;
                v37 -= 2;
              }
              while (v37);
              v39 = (_BYTE *)v35;
              v40 = v34;
              do
              {
                *v39 = *(v39 - 1);
                v39 += 4;
                --v40;
              }
              while (v40);
              ++v32;
              v33 += v4;
              v35 += v4;
            }
            while (v32 != v18);
          }
          goto LABEL_12;
        }
        if (v18 >= 2)
        {
          v20 = v18 & 0xFFFFFFFE;
          v27 = &v64[v12 + 2 + v13];
          v28 = v20;
          do
          {
            v29 = v27[v4];
            v27[1] = *v27;
            v27[v4 + 1] = v29;
            v27 += 2 * v4;
            v28 -= 2;
          }
          while (v28);
          if (v20 == v18)
            goto LABEL_12;
        }
        else
        {
          v20 = 0;
        }
        v30 = v18 - v20;
        v31 = &v63[v13 + v12 + v4 * (unint64_t)v20];
        do
        {
          *v31 = *(v31 - 1);
          v31 += v4;
          --v30;
        }
        while (v30);
LABEL_12:
        if (v6)
        {
          v16 = (unint64_t *)&v6->__shared_owners_;
          do
            v17 = __ldaxr(v16);
          while (__stlxr(v17 - 1, v16));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v5 += 2;
      }
      while (v5 != v66);
    }
    CGColorSpaceRelease(space);
    v41 = (char *)operator new(0x58uLL);
    *((_QWORD *)v41 + 1) = 0;
    v42 = (unint64_t *)(v41 + 8);
    *((_QWORD *)v41 + 2) = 0;
    *((_QWORD *)v41 + 3) = &off_1E42B63B0;
    *(_QWORD *)v41 = &off_1E42DED18;
    *((_QWORD *)v41 + 5) = 0;
    *((_QWORD *)v41 + 6) = 0;
    *((_QWORD *)v41 + 4) = 0;
    *((_DWORD *)v41 + 14) = 0;
    *(_QWORD *)&v43 = 0x100000001;
    *((_QWORD *)&v43 + 1) = 0x100000001;
    *(_OWORD *)(v41 + 60) = v43;
    *(_QWORD *)(v41 + 76) = 0x100000001;
    *((_DWORD *)v41 + 21) = 0;
    v67 = (uint64_t (**)())(v41 + 24);
    image = (CGImageRef)v41;
    v44 = operator new();
    v45 = v71;
    v46 = v72;
    if (v72)
    {
      v47 = (unint64_t *)&v72->__shared_owners_;
      do
        v48 = __ldxr(v47);
      while (__stxr(v48 + 1, v47));
    }
    v49 = *((_DWORD *)v45 + 3);
    *(_DWORD *)(v44 + 32) = 0;
    *(_QWORD *)(v44 + 16) = 0;
    *(_QWORD *)(v44 + 24) = 0;
    *(_QWORD *)(v44 + 56) = 0x100000001;
    *(_DWORD *)(v44 + 64) = 0;
    *(_DWORD *)(v44 + 68) = v49;
    *(_QWORD *)(v44 + 72) = 0x100000001;
    *(_QWORD *)(v44 + 88) = 0;
    *(_QWORD *)(v44 + 96) = 0;
    *(_QWORD *)(v44 + 80) = 0;
    *(_QWORD *)v44 = &off_1E42BE438;
    *(_QWORD *)(v44 + 8) = 0;
    *(_QWORD *)(v44 + 40) = &unk_1E42BE458;
    *(_QWORD *)(v44 + 48) = "";
    *(_DWORD *)(v44 + 104) = *((_DWORD *)v45 + 2);
    *(_QWORD *)(v44 + 112) = v45;
    *(_QWORD *)(v44 + 120) = v46;
    if (v46)
    {
      v50 = (unint64_t *)&v46->__shared_owners_;
      do
        v51 = __ldxr(v50);
      while (__stxr(v51 + 1, v50));
    }
    *(_WORD *)(v44 + 128) = 0;
    *(_BYTE *)(v44 + 130) = 1;
    *(_QWORD *)(v44 + 136) = v41 + 24;
    *(_QWORD *)(v44 + 144) = v41;
    do
      v52 = __ldxr(v42);
    while (__stxr(v52 + 1, v42));
    *(_QWORD *)(v44 + 80) = v45[2];
    v53 = *((_QWORD *)v62 + 7);
    *((_QWORD *)v62 + 7) = v44;
    if (v53)
      (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
    if (v46)
    {
      v54 = (unint64_t *)&v46->__shared_owners_;
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    v56 = (std::__shared_weak_count *)image;
    if (image)
    {
      v57 = (unint64_t *)((char *)image + 8);
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
    v59 = v72;
    if (v72)
    {
      v60 = (unint64_t *)&v72->__shared_owners_;
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
  }
}

void sub_19FE58BAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, CFTypeRef cf, uint64_t a18, char a19, uint64_t a20,char a21)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void md::VenueLayerDataSource::~VenueLayerDataSource(md::VenueLayerDataSource *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E429A638;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 98);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *((_QWORD *)this + 94) = &off_1E42B4D50;

  md::SingleGEOResourceLayerDataSource::~SingleGEOResourceLayerDataSource(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E429A638;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 98);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *((_QWORD *)this + 94) = &off_1E42B4D50;

  md::SingleGEOResourceLayerDataSource::~SingleGEOResourceLayerDataSource(this);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_pointer<md::VenueTileData *,std::shared_ptr<md::VenueTileData>::__shared_ptr_default_delete<md::VenueTileData,md::VenueTileData>,std::allocator<md::VenueTileData>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<md::VenueTileData *,std::shared_ptr<md::VenueTileData>::__shared_ptr_default_delete<md::VenueTileData,md::VenueTileData>,std::allocator<md::VenueTileData>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void std::__shared_ptr_emplace<md::Venue>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDEA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::Venue>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDEA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::Venue>::__on_zero_shared(uint64_t a1)
{
  md::Venue::~Venue((void **)(a1 + 24));
}

void std::__split_buffer<md::VenueFloorGroup>::__destruct_at_end[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;
  void **v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  char *v12;
  char *v13;
  void *v14;
  char *v15;
  char *v16;
  void (**v17)(char *);
  BOOL v18;

  for (i = *(_QWORD *)(a1 + 16); i != a2; i = *(_QWORD *)(a1 + 16))
  {
    v5 = (void **)(i - 72);
    *(_QWORD *)(a1 + 16) = i - 72;
    v6 = *(std::__shared_weak_count **)(i - 24);
    if (!v6)
      goto LABEL_9;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      v9 = *(std::__shared_weak_count **)(i - 40);
      if (v9)
      {
LABEL_10:
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    else
    {
LABEL_9:
      v9 = *(std::__shared_weak_count **)(i - 40);
      if (v9)
        goto LABEL_10;
    }
    v12 = (char *)*v5;
    if (*v5)
    {
      v13 = *(char **)(i - 64);
      v14 = *v5;
      if (v13 != v12)
      {
        v15 = v13 - 144;
        v16 = v13 - 144;
        do
        {
          v17 = *(void (***)(char *))v16;
          v16 -= 144;
          (*v17)(v15);
          v18 = v15 == v12;
          v15 = v16;
        }
        while (!v18);
        v14 = *v5;
      }
      *(_QWORD *)(i - 64) = v12;
      operator delete(v14);
    }
  }
}

uint64_t std::__split_buffer<md::VenueFloorGroup>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<md::VenueFloorGroup>::__destruct_at_end[abi:nn180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void ___Z16buildVenueMeshesRKN3geo8QuadTileERKNSt3__110shared_ptrINS_5codec10VectorTileEEEPN3ggl6DeviceERN2md12TriangulatorIfEERKNS4_IN3gss17StylesheetManagerINSH_10PropertyIDEEEEEfP17VKSharedResourcesRKNS4_INSD_14MeshSetStorageEEE_block_invoke(uint64_t a1, ResourceAccessor *a2)
{
  uint64_t v4;
  uint64_t i;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  int64_t v18;
  unint64_t v19;
  unsigned int *v20;
  unint64_t v21;
  int8x8_t v22;
  unint64_t v23;
  unint64_t v24;
  uint8x8_t v25;
  unint64_t v26;
  uint64_t **v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  id v40;
  uint64_t v41;
  uint64_t j;
  id v43;
  unsigned int *v44;
  unsigned int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;

  md::MeshSetStorage::prepareStorage(**(uint64_t ***)(a1 + 32), a2);
  v4 = *(_QWORD *)(a1 + 40);
  for (i = *(_QWORD *)(a1 + 48); v4 != i; v4 += 24)
  {
    v6 = *(id *)(v4 + 8);
    objc_msgSend(v6, "willAddDataWithAccessor:", a2);

  }
  if (*(_QWORD *)(a1 + 64))
  {
    v7 = 0;
    while (1)
    {
      v8 = geo::codec::VectorTile::polygons(**(geo::codec::VectorTile ***)(a1 + 72));
      v9 = v8 + (v7 << 7);
      if (!*(_DWORD *)(v9 + 100))
        goto LABEL_7;
      v10 = v8;
      v11 = *(unsigned __int8 *)(v9 + 127);
      if (v11 == 3)
        break;
      if (v11 == 2)
      {
        v12 = geo::codec::VectorTile::venueComponents(**(geo::codec::VectorTile ***)(a1 + 72));
        v13 = *(_DWORD *)(v10 + (v7 << 7) + 120);
        v14 = geo::codec::VectorTile::venueLevels(**(geo::codec::VectorTile ***)(a1 + 72))
            + (*(_QWORD *)(v12 + 56 * v13 + 48) << 6);
        if (v14)
          goto LABEL_14;
      }
LABEL_7:
      if ((unint64_t)++v7 >= *(_QWORD *)(a1 + 64))
        goto LABEL_59;
    }
    v14 = geo::codec::VectorTile::venueLevels(**(geo::codec::VectorTile ***)(a1 + 72))
        + ((unint64_t)*(unsigned int *)(v8 + (v7 << 7) + 120) << 6);
    if (!v14)
      goto LABEL_7;
LABEL_14:
    v15 = *(_QWORD *)(geo::codec::VectorTile::venueBuildings(**(geo::codec::VectorTile ***)(a1 + 72))
                    + 152 * *(_QWORD *)(v14 + 56)
                    + 104);
    v16 = *(int *)(v14 + 8);
    md::createFeatureAttributeSet((gss::Allocator *)&v44, (uint64_t *)(v9 + 24));
    v48 = v15;
    v49 = v16;
    v17 = v44;
    v18 = (char *)v45 - (char *)v44;
    v19 = ((char *)v45 - (char *)v44) >> 3;
    if (v45 != v44)
    {
      v20 = v44;
      do
      {
        v21 = ((v19 << 6) - 0x61C8864680B583EBLL + (v19 >> 2) + *v20) ^ v19;
        v19 = (*((unsigned __int16 *)v20 + 2) - 0x61C8864680B583EBLL + (v21 << 6) + (v21 >> 2)) ^ v21;
        v20 += 2;
      }
      while (v20 != v45);
    }
    v22 = *(int8x8_t *)(a1 + 88);
    if (v22)
    {
      v23 = ((v19 << 6) - 0x61C8864680B583EBLL + (v19 >> 2) + v16) ^ v19;
      v24 = (v15 - 0x61C8864680B583EBLL + (v23 << 6) + (v23 >> 2)) ^ v23;
      v25 = (uint8x8_t)vcnt_s8(v22);
      v25.i16[0] = vaddlv_u8(v25);
      if (v25.u32[0] > 1uLL)
      {
        v26 = v24;
        if (v24 >= *(_QWORD *)&v22)
          v26 = v24 % *(_QWORD *)&v22;
      }
      else
      {
        v26 = v24 & (*(_QWORD *)&v22 - 1);
      }
      v27 = *(uint64_t ***)(*(_QWORD *)(a1 + 80) + 8 * v26);
      if (v27)
      {
        v28 = *v27;
        if (v28)
        {
          if (v25.u32[0] < 2uLL)
          {
            v29 = *(_QWORD *)&v22 - 1;
            while (1)
            {
              v35 = v28[1];
              if (v24 == v35)
              {
                v37 = v28[2];
                v36 = v28[3];
                if (v36 - v37 == v18)
                {
                  if (v37 == v36)
                  {
LABEL_55:
                    if (v28[6] == v15 && *((_DWORD *)v28 + 14) == (_DWORD)v16)
                      goto LABEL_57;
                  }
                  else
                  {
                    v38 = v44;
                    while (*(_DWORD *)v37 == *v38 && *(unsigned __int16 *)(v37 + 4) == *((unsigned __int16 *)v38 + 2))
                    {
                      v37 += 8;
                      v38 += 2;
                      if (v37 == v36)
                        goto LABEL_55;
                    }
                  }
                }
              }
              else if ((v35 & v29) != v26)
              {
                goto LABEL_5;
              }
              v28 = (uint64_t *)*v28;
              if (!v28)
                goto LABEL_5;
            }
          }
          do
          {
            v30 = v28[1];
            if (v24 == v30)
            {
              v32 = v28[2];
              v31 = v28[3];
              if (v31 - v32 == v18)
              {
                if (v32 == v31)
                {
LABEL_38:
                  if (v28[6] == v15 && *((_DWORD *)v28 + 14) == (_DWORD)v16)
                  {
LABEL_57:
                    v40 = (id)v28[9];
                    objc_msgSend(v40, "addPolygon:accessor:triangulator:withRounder:", v9, a2, *(_QWORD *)(a1 + 120), 0);

                    v17 = v44;
                    if (!v44)
                      goto LABEL_7;
LABEL_6:
                    v45 = v17;
                    (*(void (**)(uint64_t, unsigned int *, uint64_t))(*(_QWORD *)v47 + 40))(v47, v17, v46 - (_QWORD)v17);
                    goto LABEL_7;
                  }
                }
                else
                {
                  v33 = v44;
                  while (*(_DWORD *)v32 == *v33 && *(unsigned __int16 *)(v32 + 4) == *((unsigned __int16 *)v33 + 2))
                  {
                    v32 += 8;
                    v33 += 2;
                    if (v32 == v31)
                      goto LABEL_38;
                  }
                }
              }
            }
            else
            {
              if (v30 >= *(_QWORD *)&v22)
                v30 %= *(_QWORD *)&v22;
              if (v30 != v26)
                break;
            }
            v28 = (uint64_t *)*v28;
          }
          while (v28);
        }
      }
    }
LABEL_5:
    if (!v44)
      goto LABEL_7;
    goto LABEL_6;
  }
LABEL_59:
  v41 = *(_QWORD *)(a1 + 40);
  for (j = *(_QWORD *)(a1 + 48); v41 != j; v41 += 24)
  {
    v43 = *(id *)(v41 + 8);
    objc_msgSend(v43, "didFinishAddingData");

  }
  md::MeshSetStorage::finalize(**(md::MeshSetStorage ***)(a1 + 32));
}

void sub_19FE592D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  if (a9)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a12 + 40))(a12, a9, a11 - a9);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_19FE59314(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<md::VenueGroupKey,geo::_retain_ptr<VKVenueGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::unordered_map(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  size_t prime;
  int8x8_t v6;
  BOOL v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t v10;
  uint64_t *i;
  unsigned int *v12;
  unsigned int *v13;
  char *v14;
  unint64_t v15;
  unsigned int *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint8x8_t v23;
  uint64_t **v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v36;
  uint64_t v37;
  id v38;
  void *v39;
  float v40;
  float v41;
  _BOOL8 v42;
  unint64_t v43;
  unint64_t v44;
  size_t v45;
  int8x8_t v46;
  unint64_t v47;
  uint8x8_t v48;
  uint64_t v49;
  uint64_t *v50;
  unint64_t v51;
  uint64_t *v53;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v6 = *(int8x8_t *)(a1 + 8);
    v7 = prime >= *(_QWORD *)&v6;
    if (prime > *(_QWORD *)&v6)
      goto LABEL_17;
  }
  else
  {
    v6 = 0;
    v7 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v7)
  {
    v8 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v6 < 3uLL || (v9 = (uint8x8_t)vcnt_s8(v6), v9.i16[0] = vaddlv_u8(v9), v9.u32[0] > 1uLL))
    {
      v8 = std::__next_prime(v8);
    }
    else
    {
      v10 = 1 << -(char)__clz(v8 - 1);
      if (v8 >= 2)
        v8 = v10;
    }
    if (prime <= v8)
      prime = v8;
    if (prime < *(_QWORD *)&v6)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(uint64_t **)(a2 + 16); i; i = (uint64_t *)*i)
  {
    while (1)
    {
      v12 = (unsigned int *)i[2];
      v13 = (unsigned int *)i[3];
      v14 = (char *)((char *)v13 - (char *)v12);
      v15 = ((char *)v13 - (char *)v12) >> 3;
      if (v13 != v12)
      {
        v16 = (unsigned int *)i[2];
        do
        {
          v17 = ((v15 << 6) - 0x61C8864680B583EBLL + (v15 >> 2) + *v16) ^ v15;
          v15 = (*((unsigned __int16 *)v16 + 2) - 0x61C8864680B583EBLL + (v17 << 6) + (v17 >> 2)) ^ v17;
          v16 += 2;
        }
        while (v16 != v13);
      }
      v18 = i[6];
      v19 = *((int *)i + 14);
      v20 = ((v15 << 6) - 0x61C8864680B583EBLL + (v15 >> 2) + v19) ^ v15;
      v21 = (v18 - 0x61C8864680B583EBLL + (v20 << 6) + (v20 >> 2)) ^ v20;
      v22 = *(_QWORD *)(a1 + 8);
      if (v22)
      {
        v23 = (uint8x8_t)vcnt_s8((int8x8_t)v22);
        v23.i16[0] = vaddlv_u8(v23);
        if (v23.u32[0] > 1uLL)
        {
          v2 = (v18 - 0x61C8864680B583EBLL + (v20 << 6) + (v20 >> 2)) ^ v20;
          if (v21 >= v22)
            v2 = v21 % v22;
        }
        else
        {
          v2 = v21 & (v22 - 1);
        }
        v24 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v2);
        if (v24)
        {
          v25 = *v24;
          if (v25)
            break;
        }
      }
LABEL_64:
      v36 = (uint64_t *)operator new(0x58uLL);
      v53 = v36;
      *v36 = 0;
      v36[1] = v21;
      v36[2] = 0;
      v36[3] = 0;
      v36[4] = 0;
      v36[5] = gss::Allocator::instance((gss::Allocator *)v36);
      if (v36 != i)
        std::vector<std::pair<gss::StyleAttribute,unsigned short>,geo::StdAllocator<std::pair<gss::StyleAttribute,unsigned short>,gss::Allocator>>::__assign_with_size[abi:nn180100]<std::pair<gss::StyleAttribute,unsigned short>*,std::pair<gss::StyleAttribute,unsigned short>*>(v36 + 2, i[2], (_QWORD *)i[3], (i[3] - i[2]) >> 3);
      v37 = i[6];
      *((_DWORD *)v36 + 14) = *((_DWORD *)i + 14);
      v36[6] = v37;
      v36[8] = (uint64_t)&off_1E42B4AF0;
      v36[9] = 0;
      v38 = (id)i[9];
      v39 = (void *)v36[9];
      v36[9] = (uint64_t)v38;

      v40 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
      v41 = *(float *)(a1 + 32);
      if (!v22 || (float)(v41 * (float)v22) < v40)
      {
        v42 = v22 < 3 || (v22 & (v22 - 1)) != 0;
        v43 = v42 | (2 * v22);
        v44 = vcvtps_u32_f32(v40 / v41);
        if (v43 <= v44)
          v45 = v44;
        else
          v45 = v43;
        if (v45 == 1)
        {
          v45 = 2;
        }
        else if ((v45 & (v45 - 1)) != 0)
        {
          v45 = std::__next_prime(v45);
        }
        v46 = *(int8x8_t *)(a1 + 8);
        if (v45 > *(_QWORD *)&v46)
          goto LABEL_79;
        if (v45 < *(_QWORD *)&v46)
        {
          v47 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
          if (*(_QWORD *)&v46 < 3uLL || (v48 = (uint8x8_t)vcnt_s8(v46), v48.i16[0] = vaddlv_u8(v48), v48.u32[0] > 1uLL))
          {
            v47 = std::__next_prime(v47);
          }
          else
          {
            v49 = 1 << -(char)__clz(v47 - 1);
            if (v47 >= 2)
              v47 = v49;
          }
          if (v45 <= v47)
            v45 = v47;
          if (v45 < *(_QWORD *)&v46)
LABEL_79:
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, v45);
        }
        v22 = *(_QWORD *)(a1 + 8);
        if ((v22 & (v22 - 1)) != 0)
        {
          if (v21 >= v22)
            v2 = v21 % v22;
          else
            v2 = v21;
        }
        else
        {
          v2 = (v22 - 1) & v21;
        }
      }
      v50 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v2);
      if (v50)
      {
        *v53 = *v50;
        *v50 = (uint64_t)v53;
      }
      else
      {
        *v53 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v53;
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v2) = a1 + 16;
        if (*v53)
        {
          v51 = *(_QWORD *)(*v53 + 8);
          if ((v22 & (v22 - 1)) != 0)
          {
            if (v51 >= v22)
              v51 %= v22;
          }
          else
          {
            v51 &= v22 - 1;
          }
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v51) = v53;
        }
      }
      ++*(_QWORD *)(a1 + 24);
      i = (uint64_t *)*i;
      if (!i)
        return a1;
    }
    if (v23.u32[0] < 2uLL)
    {
      while (1)
      {
        v31 = v25[1];
        if (v31 == v21)
        {
          v33 = v25[2];
          v32 = v25[3];
          if ((char *)(v32 - v33) == v14)
          {
            if (v33 == v32)
            {
LABEL_60:
              if (v25[6] == v18 && *((_DWORD *)v25 + 14) == (_DWORD)v19)
                goto LABEL_62;
            }
            else
            {
              v34 = i[2];
              while (*(_DWORD *)v33 == *(_DWORD *)v34
                   && *(unsigned __int16 *)(v33 + 4) == *(unsigned __int16 *)(v34 + 4))
              {
                v33 += 8;
                v34 += 8;
                if (v33 == v32)
                  goto LABEL_60;
              }
            }
          }
        }
        else if ((v31 & (v22 - 1)) != v2)
        {
          goto LABEL_64;
        }
        v25 = (uint64_t *)*v25;
        if (!v25)
          goto LABEL_64;
      }
    }
    while (1)
    {
      v26 = v25[1];
      if (v26 != v21)
      {
        if (v26 >= v22)
          v26 %= v22;
        if (v26 != v2)
          goto LABEL_64;
        goto LABEL_32;
      }
      v28 = v25[2];
      v27 = v25[3];
      if ((char *)(v27 - v28) == v14)
      {
        if (v28 != v27)
        {
          v29 = i[2];
          while (*(_DWORD *)v28 == *(_DWORD *)v29 && *(unsigned __int16 *)(v28 + 4) == *(unsigned __int16 *)(v29 + 4))
          {
            v28 += 8;
            v29 += 8;
            if (v28 == v27)
              goto LABEL_43;
          }
          goto LABEL_32;
        }
LABEL_43:
        if (v25[6] == v18 && *((_DWORD *)v25 + 14) == (_DWORD)v19)
          break;
      }
LABEL_32:
      v25 = (uint64_t *)*v25;
      if (!v25)
        goto LABEL_64;
    }
LABEL_62:
    ;
  }
  return a1;
}

void sub_19FE59890(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<md::VenueGroupKey,geo::_retain_ptr<VKVenueGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::~unordered_map[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<md::VenueGroupKey,geo::_retain_ptr<VKVenueGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::~unordered_map[abi:nn180100](uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;

  v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = *(void **)v2;
      *((_QWORD *)v2 + 8) = &off_1E42B4AF0;

      v4 = *((_QWORD *)v2 + 2);
      if (v4)
      {
        *((_QWORD *)v2 + 3) = v4;
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v2 + 5) + 40))(*((_QWORD *)v2 + 5), v4, *((_QWORD *)v2 + 4) - v4);
      }
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v5 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v5)
    operator delete(v5);
  return a1;
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<md::VenueGroupKey,geo::_retain_ptr<VKVenueGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::VenueGroupKey,geo::_retain_ptr<VKVenueGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      *(_QWORD *)(v2 + 64) = &off_1E42B4AF0;

      v3 = *(_QWORD *)(v2 + 16);
      if (v3)
      {
        *(_QWORD *)(v2 + 24) = v3;
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v2 + 40) + 40))(*(_QWORD *)(v2 + 40), v3, *(_QWORD *)(v2 + 32) - v3);
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t __copy_helper_block_ea8_40c168_ZTSNSt3__16vectorIN3geo11_retain_ptrIU8__strongP12VKVenueGroupNS1_16_retain_objc_arcENS1_17_release_objc_arcENS1_10_hash_objcENS1_11_equal_objcEEENS_9allocatorISA_EEEE80c243_ZTSNSt3__113unordered_mapIN2md13VenueGroupKeyEN3geo11_retain_ptrIU8__strongP12VKVenueGroupNS3_16_retain_objc_arcENS3_17_release_objc_arcENS3_10_hash_objcENS3_11_equal_objcEEENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorINS_4pairIKS2_SC_EEEEEE(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;

  a1[5] = 0;
  a1[6] = 0;
  v3 = a1 + 5;
  a1[7] = 0;
  std::vector<geo::_retain_ptr<VKVenueGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::__init_with_size[abi:nn180100]<geo::_retain_ptr<VKVenueGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>*,geo::_retain_ptr<VKVenueGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>*>(a1 + 5, *(_QWORD *)(a2 + 40), *(_QWORD *)(a2 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 3));
  return std::unordered_map<md::VenueGroupKey,geo::_retain_ptr<VKVenueGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::unordered_map((uint64_t)(v3 + 5), a2 + 80);
}

void sub_19FE59A38(_Unwind_Exception *a1)
{
  void **v1;

  std::vector<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::~vector[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_40c168_ZTSNSt3__16vectorIN3geo11_retain_ptrIU8__strongP12VKVenueGroupNS1_16_retain_objc_arcENS1_17_release_objc_arcENS1_10_hash_objcENS1_11_equal_objcEEENS_9allocatorISA_EEEE80c243_ZTSNSt3__113unordered_mapIN2md13VenueGroupKeyEN3geo11_retain_ptrIU8__strongP12VKVenueGroupNS3_16_retain_objc_arcENS3_17_release_objc_arcENS3_10_hash_objcENS3_11_equal_objcEEENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorINS_4pairIKS2_SC_EEEEEE(_QWORD *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void (***v6)(_QWORD);
  void (***v7)(_QWORD);
  void *v8;
  void (***v9)(_QWORD);
  void (***v10)(_QWORD);
  void (**v11)(_QWORD);
  BOOL v12;

  v2 = (void *)a1[12];
  if (v2)
  {
    do
    {
      v3 = *(void **)v2;
      *((_QWORD *)v2 + 8) = &off_1E42B4AF0;

      v4 = *((_QWORD *)v2 + 2);
      if (v4)
      {
        *((_QWORD *)v2 + 3) = v4;
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v2 + 5) + 40))(*((_QWORD *)v2 + 5), v4, *((_QWORD *)v2 + 4) - v4);
      }
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v5 = (void *)a1[10];
  a1[10] = 0;
  if (v5)
    operator delete(v5);
  v6 = (void (***)(_QWORD))a1[5];
  if (v6)
  {
    v7 = (void (***)(_QWORD))a1[6];
    v8 = (void *)a1[5];
    if (v7 != v6)
    {
      v9 = v7 - 3;
      v10 = v7 - 3;
      do
      {
        v11 = *v10;
        v10 -= 3;
        (*v11)(v9);
        v12 = v9 == v6;
        v9 = v10;
      }
      while (!v12);
      v8 = (void *)a1[5];
    }
    a1[6] = v6;
    operator delete(v8);
  }
}

BOOL md::CurvedTextLabelPart::isVisuallySimilar(md::CurvedTextLabelPart *this, const md::LabelPart *a2)
{
  _BOOL8 result;
  int v5;

  result = md::TextLabelPart::isVisuallySimilar(this, a2);
  if (result)
  {
    v5 = *((unsigned __int8 *)this + 1461);
    return v5 == *((unsigned __int8 *)a2 + 1461)
        && (v5 != 10 || *((unsigned __int8 *)this + 1462) == *((unsigned __int8 *)a2 + 1462))
        && *((unsigned __int8 *)this + 1136) == *((unsigned __int8 *)a2 + 1136)
        && *((unsigned __int8 *)this + 1141) == *((unsigned __int8 *)a2 + 1141);
  }
  return result;
}

_BYTE *md::CurvedTextLabelPart::getCreationOptions(_BYTE *result, _BYTE *a2)
{
  a2[2] = result[1456];
  a2[1] = result[1136];
  a2[3] = result[1141];
  return result;
}

uint64_t md::CurvedTextLabelPart::evaluateSnapToDefaultPlacement(uint64_t this)
{
  if (*(unsigned __int8 *)(this + 1458) - 101 <= 1)
    *(_BYTE *)(this + 1467) = 1;
  return this;
}

uint64_t md::CurvedTextLabelPart::snapToDefaultPlacement(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5)
{
  __int16 v6;
  uint64_t v7;

  *(_BYTE *)(a1 + 1467) = 0;
  v6 = 256;
  v7 = 0;
  return md::CurvedTextLabelPart::tryAlternatePlacements(a1, 1, a2, a3, a4, (uint64_t)&v6, a5);
}

uint64_t md::CurvedTextLabelPart::findAlternatePlacement(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5, uint64_t a6)
{
  unsigned __int8 v6;

  v6 = atomic_load((unsigned __int8 *)(a2 + 3391));
  if ((v6 & 1) != 0)
    return md::CurvedTextLabelPart::tryAlternatePlacements(a1, 0, a2, a3, a4, a5, a6);
  else
    return 0;
}

uint64_t md::CurvedTextLabelPart::debugString@<X0>(md::CurvedTextLabelPart *this@<X0>, int a2@<W1>, _BYTE *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  const char *v18;
  const char *v19;
  uint64_t v20;
  char *v21;
  _BYTE *v22;
  char *v23;
  char *v24;
  _BYTE *v25;
  const char *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  __int16 v30;
  unsigned __int8 *v31;
  int v32;
  int v33;
  char v34;
  uint64_t v35;
  float v36;
  float v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  _BYTE *v41;
  uint64_t v42;
  char v43;
  size_t v44;
  unint64_t v45;
  const void **v46;
  const void *v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  _BYTE __p[24];
  uint64_t v53;
  _QWORD v54[2];
  _QWORD v55[3];
  uint64_t v56;
  unint64_t v57;
  void *v58[2];
  __int128 v59;
  int v60;
  uint64_t v61[19];

  v6 = MEMORY[0x1E0DE4FE0];
  v7 = MEMORY[0x1E0DE4FE0] + 64;
  v8 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v10 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v61[0] = MEMORY[0x1E0DE4FE0] + 64;
  v53 = v9;
  *(_QWORD *)((char *)&v54[-1] + *(_QWORD *)(v9 - 24)) = v10;
  v11 = (std::ios_base *)((char *)&v54[-1] + *(_QWORD *)(v53 - 24));
  std::ios_base::init(v11, v54);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v53 = v6 + 24;
  v61[0] = v7;
  std::streambuf::basic_streambuf();
  v12 = MEMORY[0x1E0DE4FB8];
  v54[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v58 = 0u;
  v59 = 0u;
  v60 = 16;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v53, (uint64_t)"CurvedText", 10);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v53, (uint64_t)"\n  Ornt=", 8);
  switch(*((_BYTE *)this + 1397))
  {
    case 0:
      v13 = 4;
      __p[23] = 4;
      strcpy(__p, "None");
      break;
    case 1:
      v13 = 10;
      __p[23] = 10;
      *(_WORD *)&__p[8] = 27745;
      v14 = "Horizontal";
      goto LABEL_13;
    case 2:
      v13 = 8;
      __p[23] = 8;
      v15 = 0x6C61636974726556;
      goto LABEL_11;
    case 3:
    case 5:
    case 6:
    case 7:
    case 9:
    case 0xA:
    case 0xB:
    case 0xE:
    case 0xF:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x1F:
      goto LABEL_5;
    case 4:
      v13 = 8;
      __p[23] = 8;
      v15 = 0x705564656C676E41;
LABEL_11:
      *(_QWORD *)__p = v15;
      __p[8] = 0;
      break;
    case 8:
      v13 = 10;
      __p[23] = 10;
      *(_WORD *)&__p[8] = 28279;
      v14 = "AngledDown";
LABEL_13:
      *(_QWORD *)__p = *(_QWORD *)v14;
      __p[10] = 0;
      break;
    case 0xC:
      v13 = 6;
      __p[23] = 6;
      strcpy(__p, "Angled");
      break;
    case 0xD:
      v13 = 18;
      __p[23] = 18;
      strcpy(__p, "HorizontalOrAngled");
      break;
    case 0x10:
      v13 = 13;
      __p[23] = 13;
      strcpy(__p, "Perpendicular");
      break;
    case 0x20:
      v13 = 12;
      __p[23] = 12;
      strcpy(__p, "AutoVertical");
      break;
    default:
      if (*((unsigned __int8 *)this + 1397) == 128)
      {
        v13 = 7;
        __p[23] = 7;
        strcpy(__p, "Default");
      }
      else
      {
LABEL_5:
        v13 = 0;
        __p[23] = 0;
        __p[0] = 0;
      }
      break;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v53, (uint64_t)__p, v13);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v53, (uint64_t)"\n  PosMode=", 11);
  switch(*((_BYTE *)this + 1458))
  {
    case 0:
      v16 = 7;
      __p[23] = 7;
      *(_DWORD *)__p = 1634100548;
      v17 = 1953264993;
LABEL_29:
      *(_DWORD *)&__p[3] = v17;
      __p[7] = 0;
      break;
    case 1:
      v16 = 6;
      __p[23] = 6;
      strcpy(__p, "Screen");
      break;
    case 2:
      v16 = 8;
      __p[23] = 8;
      strcpy(__p, "Cardinal");
      break;
    case 3:
      v16 = 13;
      v19 = "CardinalExact";
      goto LABEL_33;
    case 4:
      v16 = 14;
      __p[23] = 14;
      strcpy(__p, "AutoLineOffset");
      break;
    case 5:
      v16 = 13;
      v19 = "FeatureNormal";
LABEL_33:
      __p[23] = 13;
      *(_QWORD *)__p = *(_QWORD *)v19;
      *(_QWORD *)&__p[5] = *(_QWORD *)(v19 + 5);
      __p[13] = 0;
      break;
    default:
      switch(*((_BYTE *)this + 1458))
      {
        case 'd':
          v16 = 11;
          __p[23] = 11;
          *(_DWORD *)&__p[7] = 1952670072;
          v18 = "ScreenExact";
          goto LABEL_26;
        case 'e':
          v16 = 17;
          __p[23] = 17;
          strcpy(__p, "TransitLineOffset");
          goto LABEL_34;
        case 'f':
          v16 = 11;
          __p[23] = 11;
          *(_DWORD *)&__p[7] = 1952805734;
          v18 = "RouteOffset";
LABEL_26:
          *(_QWORD *)__p = *(_QWORD *)v18;
          __p[11] = 0;
          break;
        case 'g':
          v16 = 7;
          __p[23] = 7;
          *(_DWORD *)__p = 2037149520;
          v17 = 1852794745;
          goto LABEL_29;
        default:
          v16 = 0;
          __p[23] = 0;
          __p[0] = 0;
          break;
      }
      break;
  }
LABEL_34:
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v53, (uint64_t)__p, v16);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v53, (uint64_t)" MeshPosMode=", 13);
  switch(*((_BYTE *)this + 1399))
  {
    case 0:
      v20 = 6;
      __p[23] = 6;
      strcpy(__p, "Screen");
      goto LABEL_49;
    case 1:
      v20 = 11;
      __p[23] = 11;
      strcpy(__p, "ViewAligned");
      goto LABEL_49;
    case 2:
      v20 = 10;
      __p[23] = 10;
      strcpy(__p, "Horizontal");
      goto LABEL_49;
    case 3:
      v20 = 8;
      __p[23] = 8;
      strcpy(__p, "Vertical");
      goto LABEL_49;
    case 4:
      v20 = 20;
      __p[23] = 20;
      *(_DWORD *)&__p[16] = 1684370542;
      v26 = "VerticalViewOriented";
      goto LABEL_47;
    case 5:
      v21 = (char *)operator new(0x20uLL);
      *(_QWORD *)__p = v21;
      *(_OWORD *)&__p[8] = xmmword_19FFB34A0;
      qmemcpy(v21, "VerticalViewOrientedFaceAlign", 29);
      v22 = v21 + 29;
      goto LABEL_43;
    case 6:
      v23 = (char *)operator new(0x20uLL);
      *(_QWORD *)__p = v23;
      *(_OWORD *)&__p[8] = xmmword_19FFB3620;
      qmemcpy(v23, "FaceAlignWithSkewThreshold", 26);
      v22 = v23 + 26;
      goto LABEL_43;
    case 7:
      v24 = (char *)operator new(0x20uLL);
      *(_QWORD *)__p = v24;
      *(_OWORD *)&__p[8] = xmmword_19FFB34B0;
      qmemcpy(v24, "VerticalWithSkewThreshold", 25);
      v22 = v24 + 25;
LABEL_43:
      *v22 = 0;
      v25 = *(_BYTE **)__p;
      v20 = *(_QWORD *)&__p[8];
      goto LABEL_50;
    case 0x32:
      v20 = 20;
      __p[23] = 20;
      *(_DWORD *)&__p[16] = 1953391975;
      v26 = "FaceAlignWithTangent";
LABEL_47:
      *(_OWORD *)__p = *(_OWORD *)v26;
      __p[20] = 0;
      goto LABEL_49;
    default:
      v20 = 0;
      __p[23] = 0;
      __p[0] = 0;
LABEL_49:
      v25 = __p;
LABEL_50:
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v53, (uint64_t)v25, v20);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v53, (uint64_t)" VPos=", 6);
      switch(*((_BYTE *)this + 1461))
      {
        case 0:
          v27 = 5;
          __p[23] = 5;
          strcpy(__p, "Right");
          break;
        case 1:
          v27 = 8;
          __p[23] = 8;
          v29 = 0x7468676952706F54;
          goto LABEL_64;
        case 2:
          v27 = 3;
          __p[23] = 3;
          strcpy(__p, "Top");
          break;
        case 3:
          v27 = 7;
          __p[23] = 7;
          strcpy(__p, "TopLeft");
          break;
        case 4:
          v27 = 4;
          __p[23] = 4;
          v28 = 1952867660;
          goto LABEL_56;
        case 5:
          v27 = 10;
          __p[23] = 10;
          strcpy(__p, "BottomLeft");
          break;
        case 6:
          v27 = 6;
          __p[23] = 6;
          *(_DWORD *)__p = 1953787714;
          v30 = 28015;
          goto LABEL_66;
        case 7:
          v27 = 11;
          __p[23] = 11;
          strcpy(__p, "BottomRight");
          break;
        case 8:
          v27 = 6;
          __p[23] = 6;
          *(_DWORD *)__p = 1953391939;
          v30 = 29285;
LABEL_66:
          *(_WORD *)&__p[4] = v30;
          __p[6] = 0;
          break;
        case 9:
          v27 = 4;
          __p[23] = 4;
          v28 = 1701736270;
LABEL_56:
          *(_DWORD *)__p = v28;
          __p[4] = 0;
          break;
        case 0xA:
          v27 = 8;
          __p[23] = 8;
          v29 = 0x656C676E41747845;
LABEL_64:
          *(_QWORD *)__p = v29;
          __p[8] = 0;
          break;
        default:
          v27 = 0;
          __p[23] = 0;
          __p[0] = 0;
          break;
      }
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v53, (uint64_t)__p, v27);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v53, (uint64_t)" HAlign=", 8);
      v31 = (unsigned __int8 *)*((_QWORD *)this + 134);
      v32 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v31 + 80))(v31);
      v33 = v31[45];
      if (v31[45])
        v34 = 1;
      else
        v34 = 2;
      if (v33 == 2)
        v34 = 0;
      if (v32)
        LOBYTE(v33) = v34;
      if (v33 == 2)
      {
        v35 = 3;
        __p[23] = 3;
        strcpy(__p, "End");
      }
      else if (v33 == 1)
      {
        v35 = 6;
        __p[23] = 6;
        strcpy(__p, "Center");
      }
      else if ((_BYTE)v33)
      {
        v35 = 0;
        __p[23] = 0;
        __p[0] = 0;
      }
      else
      {
        v35 = 5;
        __p[23] = 5;
        strcpy(__p, "Start");
      }
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v53, (uint64_t)__p, v35);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      v36 = *((float *)this + 347);
      v37 = *((float *)this + 346);
      v38 = v53;
      *(_DWORD *)((char *)v54 + *(_QWORD *)(v53 - 24)) = *(_DWORD *)((_BYTE *)v54 + *(_QWORD *)(v53 - 24)) & 0xFFFFFEFB | 4;
      *(_QWORD *)((char *)&v54[1] + *(_QWORD *)(v38 - 24)) = 1;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v53, (uint64_t)" LineDir=", 9);
      atan2f(v36, v37);
      v39 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v39, (uint64_t)"\n", 1);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v53, (uint64_t)"  padding:", 10);
      v40 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v40, (uint64_t)" lineOffset:", 12);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v53, (uint64_t)"\n  ", 3);
      md::TextLabelPart::debugString(this, a2, __p);
      if (__p[23] >= 0)
        v41 = __p;
      else
        v41 = *(_BYTE **)__p;
      if (__p[23] >= 0)
        v42 = __p[23];
      else
        v42 = *(_QWORD *)&__p[8];
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v53, (uint64_t)v41, v42);
      if ((__p[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)__p);
        v43 = v60;
        if ((v60 & 0x10) == 0)
          goto LABEL_94;
LABEL_97:
        v45 = *((_QWORD *)&v59 + 1);
        if (*((_QWORD *)&v59 + 1) < v57)
        {
          *((_QWORD *)&v59 + 1) = v57;
          v45 = v57;
        }
        v46 = (const void **)&v56;
        goto LABEL_101;
      }
      v43 = v60;
      if ((v60 & 0x10) != 0)
        goto LABEL_97;
LABEL_94:
      if ((v43 & 8) == 0)
      {
        v44 = 0;
        a3[23] = 0;
        goto LABEL_109;
      }
      v46 = (const void **)v55;
      v45 = v55[2];
LABEL_101:
      v47 = *v46;
      v44 = v45 - (_QWORD)*v46;
      if (v44 >= 0x7FFFFFFFFFFFFFF8)
        abort();
      if (v44 >= 0x17)
      {
        v48 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v44 | 7) != 0x17)
          v48 = v44 | 7;
        v49 = v48 + 1;
        v50 = operator new(v48 + 1);
        *((_QWORD *)a3 + 1) = v44;
        *((_QWORD *)a3 + 2) = v49 | 0x8000000000000000;
        *(_QWORD *)a3 = v50;
        a3 = v50;
        goto LABEL_108;
      }
      a3[23] = v44;
      if (v44)
LABEL_108:
        memmove(a3, v47, v44);
LABEL_109:
      a3[v44] = 0;
      v53 = *v8;
      *(_QWORD *)((char *)&v54[-1] + *(_QWORD *)(v53 - 24)) = v8[3];
      v54[0] = v12 + 16;
      if (SBYTE7(v59) < 0)
        operator delete(v58[0]);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return MEMORY[0x1A1AF4D64](v61);
  }
}

void sub_19FE5A904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void md::CurvedTextLabelPart::populateDebugNode(md::CurvedTextLabelPart *this, gdc::DebugTreeNode *a2)
{
  char *ChildNode;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  float v22;
  double v23;
  int v24;
  unsigned __int8 v25;
  size_t v26;
  unsigned __int8 v27;
  unsigned __int8 v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[24];
  uint64_t v34;
  __int128 __dst;
  uint64_t v36;
  _BYTE v37[32];
  __int128 __p;
  uint64_t v39;
  int v40;
  void *v41[4];
  _BYTE v42[16];
  double v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  _BYTE v48[16];
  double v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  _BYTE v54[16];
  double v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  _BYTE v60[16];
  double v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  _BYTE v66[32];
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  _BYTE v71[32];
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;

  md::TextLabelPart::populateDebugNode(this, a2);
  v33[23] = 19;
  strcpy(v33, "CurvedTextLabelPart");
  ChildNode = gdc::DebugTreeNode::createChildNode((uint64_t)a2, (__int128 *)v33);
  v5 = (uint64_t)ChildNode;
  v6 = *((unsigned __int8 *)this + 1458);
  v33[23] = 16;
  strcpy(v33, "Positioning Mode");
  v7 = 0x746C7561666544;
  v8 = 7;
  v9 = 0x6500000000000000;
  v10 = v6;
  v11 = v6;
  v12 = v6;
  v13 = v6;
  switch((int)v6)
  {
    case 0:
      break;
    case 1:
      v6 = 0;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      v7 = 0x6E6565726353;
      v8 = 6;
      break;
    case 2:
      v6 = 0;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      v8 = 8;
      v7 = 0x6C616E6964726143;
      break;
    case 3:
      v10 = 0;
      v8 = 13;
      v6 = 0x7400000000;
      v7 = 0x6C616E6964726143;
      v13 = 6387712;
      v12 = 69;
      v11 = 1660944384;
      break;
    case 4:
      v7 = 0x656E694C6F747541;
      v8 = 14;
      v10 = 0x740000000000;
      v6 = 0x6500000000;
      v13 = 6710784;
      v12 = 79;
      v11 = 1929379840;
      break;
    case 5:
      v10 = 0;
      v7 = 0x4E65727574616546;
      v8 = 13;
      v6 = 0x6C00000000;
      v13 = 7172608;
      v12 = 111;
      v11 = 1627389952;
      break;
    default:
      switch((int)v6)
      {
        case 'd':
          v6 = 0;
          v10 = 0;
          v11 = 0;
          v7 = 0x78456E6565726353;
          v8 = 11;
          v9 = 0x6500000000000000;
          v12 = 97;
          v13 = 7627520;
          break;
        case 'e':
          v7 = 0x4C7469736E617254;
          v8 = 17;
          v10 = 0x660000000000;
          v9 = 0x6573000000000000;
          v6 = 0x6600000000;
          v13 = 6647296;
          v12 = 105;
          v11 = 1325400064;
          break;
        case 'f':
          v6 = 0;
          v10 = 0;
          v11 = 0;
          v13 = 7628032;
          v7 = 0x66664F6574756F52;
          v8 = 11;
          v9 = 0x6500000000000000;
          v12 = 115;
          break;
        case 'g':
          v6 = 0;
          v10 = 0;
          v11 = 0;
          v12 = 0;
          v13 = 0;
          v7 = 0x6E6F67796C6F50;
          v8 = 7;
          goto LABEL_13;
        default:
          v6 = 0;
          v10 = 0;
          v11 = 0;
          v12 = 0;
          v8 = 0;
          v13 = 0;
          v7 = 0;
LABEL_13:
          v9 = 0x6500000000000000;
          break;
      }
      break;
  }
  v75 = 4;
  v72 = v7;
  v73 = v9 | v11 | v10 | v6 | v13 | v12;
  v74 = 116;
  HIBYTE(v74) = v8;
  gdc::DebugTreeNode::addProperty((uint64_t)ChildNode, (uint64_t)v33, (uint64_t)v71);
  v14 = *((unsigned __int8 *)this + 1461);
  v33[23] = 8;
  strcpy(v33, "Position");
  v15 = 5;
  v16 = 0x7468676952;
  v17 = v14;
  v18 = v14;
  v19 = v14;
  switch((int)v14)
  {
    case 0:
      break;
    case 1:
      v17 = 0;
      v18 = 0;
      v19 = 0;
      v15 = 8;
      v16 = 0x7468676952706F54;
      break;
    case 2:
      v17 = 0;
      v18 = 0;
      v19 = 0;
      v15 = 3;
      v16 = 7368532;
      break;
    case 3:
      v17 = 0;
      v18 = 0;
      v19 = 0;
      v15 = 7;
      v16 = 0x7466654C706F54;
      break;
    case 4:
      v17 = 0;
      v18 = 0;
      v19 = 0;
      v16 = 1952867660;
      v15 = v14;
      break;
    case 5:
      v18 = 0;
      v15 = 10;
      v16 = 0x654C6D6F74746F42;
      v19 = 102;
      v17 = 29696;
      break;
    case 6:
      v17 = 0;
      v18 = 0;
      v19 = 0;
      v16 = 0x6D6F74746F42;
      v15 = v14;
      break;
    case 7:
      v15 = 11;
      v16 = 0x69526D6F74746F42;
      v19 = 103;
      v18 = 7602176;
      v17 = 26624;
      break;
    case 8:
      v17 = 0;
      v18 = 0;
      v19 = 0;
      v15 = 6;
      v16 = 0x7265746E6543;
      break;
    case 9:
      v17 = 0;
      v18 = 0;
      v19 = 0;
      v15 = 4;
      v16 = 1701736270;
      break;
    case 10:
      v17 = 0;
      v18 = 0;
      v19 = 0;
      v15 = 8;
      v16 = 0x656C676E41747845;
      break;
    default:
      v16 = 0;
      v17 = 0;
      v18 = 0;
      v19 = 0;
      v15 = 0;
      break;
  }
  v70 = 4;
  v67 = v16;
  v68 = v18 | v17 | v19;
  v69 = 0;
  HIBYTE(v69) = v15;
  gdc::DebugTreeNode::addProperty(v5, (uint64_t)v33, (uint64_t)v66);
  v20 = *((float *)this + 294);
  v33[23] = 7;
  strcpy(v33, "Padding");
  v63 = 0;
  v64 = 0;
  v62 = 0;
  v65 = 2;
  v61 = v20;
  gdc::DebugTreeNode::addProperty(v5, (uint64_t)v33, (uint64_t)v60);
  v21 = *((float *)this + 291);
  v33[23] = 11;
  strcpy(v33, "Road Offset");
  v57 = 0;
  v58 = 0;
  v56 = 0;
  v59 = 2;
  v55 = v21;
  gdc::DebugTreeNode::addProperty(v5, (uint64_t)v33, (uint64_t)v54);
  v22 = *((float *)this + 292);
  v33[23] = 10;
  strcpy(v33, "Road Width");
  v51 = 0;
  v52 = 0;
  v50 = 0;
  v53 = 2;
  v49 = v22;
  gdc::DebugTreeNode::addProperty(v5, (uint64_t)v33, (uint64_t)v48);
  v23 = *((float *)this + 293);
  v33[23] = 9;
  strcpy(v33, "Font Size");
  v45 = 0;
  v46 = 0;
  v44 = 0;
  v47 = 2;
  v43 = v23;
  gdc::DebugTreeNode::addProperty(v5, (uint64_t)v33, (uint64_t)v42);
  v24 = *((unsigned __int8 *)this + 1328);
  HIBYTE(v41[2]) = 20;
  strcpy((char *)v41, "Label Text Direction");
  if (v24 == 2)
  {
    {
      v31 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v31, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v34 = mdm::Allocator::instance(void)::alloc;
    v26 = 8;
    v33[23] = 8;
    strcpy(v33, "Reversed");
  }
  else if (v24 == 1)
  {
    {
      v30 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v30, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v34 = mdm::Allocator::instance(void)::alloc;
    v26 = 6;
    v33[23] = 6;
    strcpy(v33, "Normal");
  }
  else
  {
    {
      v32 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v32, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v34 = mdm::Allocator::instance(void)::alloc;
    v26 = 4;
    v33[23] = 4;
    strcpy(v33, "None");
  }
  HIBYTE(v36) = v26;
  memcpy(&__dst, v33, v26);
  *((_BYTE *)&__dst + v26) = 0;
  v39 = 0;
  __p = 0uLL;
  v40 = 4;
  v29 = SHIBYTE(v36);
  if (SHIBYTE(v36) < 0)
  {
    std::string::__assign_no_alias<true>(&__p, (void *)__dst, *((size_t *)&__dst + 1));
  }
  else
  {
    __p = __dst;
    v39 = v36;
  }
  gdc::DebugTreeNode::addProperty(v5, (uint64_t)v41, (uint64_t)v37);
  if (SHIBYTE(v39) < 0)
  {
    operator delete((void *)__p);
    if ((v29 & 0x80000000) == 0)
    {
LABEL_39:
      if ((SHIBYTE(v41[2]) & 0x80000000) == 0)
        return;
LABEL_43:
      operator delete(v41[0]);
      return;
    }
  }
  else if ((v29 & 0x80000000) == 0)
  {
    goto LABEL_39;
  }
  operator delete((void *)__dst);
  if (SHIBYTE(v41[2]) < 0)
    goto LABEL_43;
}

uint64_t md::CurvedTextLabelPart::populatePointOcclusionQuery(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v8;
  uint64_t v9;
  md::LabelPoint *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double *v17;
  double *v18;
  uint64_t v19;
  md::LabelPoint *v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v30;
  md::LabelPoint *v31;
  double v32;
  double v33;
  double v34;
  double *v35;
  double *v37;
  double v38;
  double v39;
  double v40;
  unint64_t v41;
  char *v42;
  double *v43;
  double *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  unint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  __int128 *v55;
  __int128 *v56;
  _QWORD *v57;
  __int128 v58;
  double *v59;
  __int128 v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  uint64_t *v71;
  char *v72;
  unint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  __int128 *v77;
  _OWORD *v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;

  v3 = *(_QWORD *)(a1 + 576);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 40) - *(_QWORD *)(v3 + 32);
  if (!v4)
    return 0;
  v8 = 0x2E8BA2E8BA2E8BA3 * (v4 >> 3);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = (md::LabelPoint *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1088) + 56))(*(_QWORD *)(a1 + 1088));
  v82 = *(_OWORD *)md::LabelPoint::mercatorPoint(v10);
  v83 = 0;
  md::Label::mercatorPointToWorldPoint(v9, (double *)&v82, *(_BYTE *)(a3 + 8));
  v12 = v11;
  v14 = v13;
  v16 = v15;
  v17 = (double *)operator new(0x78uLL);
  v18 = v17;
  *v17 = v12;
  v17[1] = v14;
  v17[2] = v16;
  if (v8 < 2)
  {
    v35 = v17 + 3;
  }
  else
  {
    v19 = *(_QWORD *)(a1 + 16);
    v20 = (md::LabelPoint *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1104) + 56))(*(_QWORD *)(a1 + 1104));
    v82 = *(_OWORD *)md::LabelPoint::mercatorPoint(v20);
    v83 = 0;
    md::Label::mercatorPointToWorldPoint(v19, (double *)&v82, *(_BYTE *)(a3 + 8));
    v22 = v21;
    v24 = v23;
    v26 = v25;
    v18[3] = v21;
    v18[4] = v23;
    v18[5] = v25;
    v27 = *(_QWORD *)(a1 + 1120);
    if (v8 < 7 || v27 == 0)
    {
      v35 = v18 + 6;
      v32 = 0.0;
      v33 = 0.0;
      v34 = 0.0;
    }
    else
    {
      v30 = *(_QWORD *)(a1 + 16);
      v31 = (md::LabelPoint *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 56))(v27);
      v82 = *(_OWORD *)md::LabelPoint::mercatorPoint(v31);
      v83 = 0;
      md::Label::mercatorPointToWorldPoint(v30, (double *)&v82, *(_BYTE *)(a3 + 8));
      v18[6] = v32;
      v18[7] = v33;
      v18[8] = v34;
      v35 = v18 + 9;
    }
    if (v8 >= 0xD && v27 != 0)
    {
      *v35 = (v32 + v12) * 0.5;
      v35[1] = (v33 + v14) * 0.5;
      v35[2] = (v34 + v16) * 0.5;
      v37 = v35 + 3;
      v38 = (v32 + v22) * 0.5;
      v39 = (v33 + v24) * 0.5;
      v40 = (v34 + v26) * 0.5;
      if (v35 + 3 >= v18 + 15)
      {
        v41 = 0xAAAAAAAAAAAAAAABLL * (v37 - v18) + 1;
        if (v41 > 0xAAAAAAAAAAAAAAALL)
          abort();
        if (v41 <= 0xA)
          v41 = 10;
        v42 = (char *)operator new(24 * v41);
        v43 = (double *)&v42[8 * (v37 - v18)];
        *v43 = v38;
        v43[1] = v39;
        v43[2] = v40;
        v35 = v43 + 3;
        if (v37 == v18)
        {
          v44 = (double *)&v42[8 * (v37 - v18)];
        }
        else
        {
          do
          {
            v44 = v43 - 3;
            v45 = *((_QWORD *)v37 - 1);
            *(_OWORD *)(v43 - 3) = *(_OWORD *)(v37 - 3);
            *((_QWORD *)v43 - 1) = v45;
            v37 -= 3;
            v43 -= 3;
          }
          while (v37 != v18);
        }
        operator delete(v18);
        v18 = v44;
      }
      else
      {
        *v37 = v38;
        v35[4] = v39;
        v35 += 6;
        v37[2] = v40;
      }
    }
  }
  v46 = *a2;
  *(_BYTE *)v46 = 2;
  *(_BYTE *)(v46 + 237) = 1;
  v47 = *(_QWORD **)(v46 + 80);
  *(_QWORD *)(v46 + 88) = v47;
  v48 = 0xAAAAAAAAAAAAAAABLL * (v35 - v18);
  v49 = *(_QWORD *)(v46 + 104);
  v50 = v47;
  if (v48 > v49)
  {
    v51 = *(_QWORD **)(v46 + 96);
    v52 = (1 << -(char)__clz(v49 + 1));
    if (v49 >= 0xFFFFFFFFFFFFFFFELL)
      v52 = 1;
    if (v52 <= v48)
      v53 = 0xAAAAAAAAAAAAAAABLL * (v35 - v18);
    else
      v53 = v52;
    v54 = malloc_type_malloc(24 * v53, 0x1000040504FFAC1uLL);
    v50 = v54;
    v55 = *(__int128 **)(v46 + 80);
    v56 = *(__int128 **)(v46 + 88);
    if (v55 != v56)
    {
      v57 = v54;
      do
      {
        v58 = *v55;
        v57[2] = *((_QWORD *)v55 + 2);
        *(_OWORD *)v57 = v58;
        v57 += 3;
        v55 = (__int128 *)((char *)v55 + 24);
      }
      while (v55 != v56);
    }
    if (v47 != v51)
      free(*(void **)(v46 + 80));
    *(_QWORD *)(v46 + 80) = v50;
    *(_QWORD *)(v46 + 88) = v50;
    *(_QWORD *)(v46 + 104) = v53;
  }
  if (v18 != v35)
  {
    v59 = v18;
    do
    {
      v60 = *(_OWORD *)v59;
      v50[2] = *((_QWORD *)v59 + 2);
      *(_OWORD *)v50 = v60;
      v50 += 3;
      v59 += 3;
    }
    while (v59 != v35);
    v50 = *(_QWORD **)(v46 + 88);
  }
  *(_QWORD *)(v46 + 88) = &v50[v35 - v18];
  v62 = *(_QWORD *)(v46 + 8);
  v61 = *(char **)(v46 + 16);
  v63 = (uint64_t)&v61[-v62] >> 3;
  if (v63 > v48)
  {
    v61 = (char *)(v62 + 8 * v48);
LABEL_67:
    *(_QWORD *)(v46 + 16) = v61;
    goto LABEL_68;
  }
  if (v63 < v48)
  {
    v64 = *(_QWORD *)(v46 + 32);
    if (v64 >= v48)
    {
      v70 = *(char **)(v46 + 8);
LABEL_65:
      if (v61 != &v70[8 * v48])
      {
        memset_pattern16(v61, &unk_19FFB6350, ((&v70[8 * v48] - v61 - 8) & 0xFFFFFFFFFFFFFFF8) + 8);
        v61 = &v70[8 * v48];
      }
      goto LABEL_67;
    }
    v65 = *(_QWORD *)(v46 + 24);
    v66 = (1 << -(char)__clz(v64 + 1));
    if (v64 >= 0xFFFFFFFFFFFFFFFELL)
      v67 = 1;
    else
      v67 = v66;
    if (v67 <= v48)
      v68 = v48;
    else
      v68 = v67;
    v69 = (char *)malloc_type_malloc(8 * v68, 0x100004090D0E795uLL);
    v70 = v69;
    v71 = *(uint64_t **)(v46 + 8);
    v72 = *(char **)(v46 + 16);
    if (v71 != (uint64_t *)v72)
    {
      v73 = v72 - (char *)v71 - 8;
      if (v73 < 0x18)
      {
        v74 = v69;
      }
      else
      {
        v74 = v69;
        if ((unint64_t)(v69 - (char *)v71) >= 0x20)
        {
          v75 = (v73 >> 3) + 1;
          v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
          v74 = &v69[v76];
          v77 = (__int128 *)(v71 + 2);
          v78 = v69 + 16;
          v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v80 = *v77;
            *(v78 - 1) = *(v77 - 1);
            *v78 = v80;
            v77 += 2;
            v78 += 2;
            v79 -= 4;
          }
          while (v79);
          if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_62;
          v71 = (uint64_t *)((char *)v71 + v76);
        }
      }
      do
      {
        v81 = *v71++;
        *(_QWORD *)v74 = v81;
        v74 += 8;
      }
      while (v71 != (uint64_t *)v72);
    }
LABEL_62:
    if (v62 != v65)
      free(*(void **)(v46 + 8));
    *(_QWORD *)(v46 + 8) = v70;
    v61 = &v70[8 * v63];
    *(_QWORD *)(v46 + 32) = v68;
    goto LABEL_65;
  }
LABEL_68:
  operator delete(v18);
  return 1;
}

void sub_19FE5B748(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t md::CurvedTextLabelPart::tryAlternatePlacements(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5, uint64_t a6, uint64_t a7)
{
  unsigned __int8 v11;
  float *v12;
  uint64_t v13;
  __int16 v14;
  char v15;
  uint64_t v16;
  _WORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v27;
  unsigned __int8 v28;
  uint64_t v29;
  float *v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  const md::LabelText *v37;
  _QWORD *v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  int v62;
  char v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v79;
  _QWORD v80[2];
  _QWORD v81[3];

  v12 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
  {
    v72 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v72, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v13 = mdm::Allocator::instance(void)::alloc;
  v73 = a7;
  v74 = mdm::Allocator::instance(void)::alloc;
  if (a2)
  {
    if (*(_BYTE *)(a1 + 1458) == 4)
    {
      if ((float)(*(float *)(a1 + 976) + *(float *)(a1 + 976)) <= (float)(*(float *)(a1 + 628) / *(float *)(a3 + 176)))
        v14 = 2;
      else
        v14 = 8;
    }
    else if (*(_BYTE *)(a1 + 1396) == 9)
    {
      v14 = 8;
    }
    else
    {
      v14 = *(unsigned __int8 *)(a1 + 1396);
    }
    v21 = *(_BYTE *)(a1 + 1453);
    v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc, 5, 1);
    v79 = v20 + 5;
    if (v20)
    {
      *(_BYTE *)v20 = v21;
      *(_WORD *)(v20 + 1) = 0;
      *(_WORD *)(v20 + 3) = v14;
    }
  }
  else
  {
    if (*(_BYTE *)(*(_QWORD *)(a6 + 8) + 52) == 1)
      v15 = 102;
    else
      v15 = 101;
    v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc, 5, 1);
    v17 = (_WORD *)v16;
    if (v16)
    {
      *(_BYTE *)v16 = v15;
      *(_DWORD *)(v16 + 1) = 0x20000;
    }
    v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, 10, 1);
    v79 = v18 + 10;
    if (v18)
    {
      *(_BYTE *)(v18 + 5) = v15;
      *(_DWORD *)(v18 + 6) = 393216;
    }
    *(_WORD *)v18 = *v17;
    *(_BYTE *)(v18 + 2) = 0;
    *(_WORD *)(v18 + 3) = *(_WORD *)((char *)v17 + 3);
    v19 = v18;
    (*(void (**)(uint64_t, _WORD *, uint64_t))(*(_QWORD *)v13 + 40))(v13, v17, 5);
    v20 = v19;
  }
  __asm { FMOV            V8.2S, #1.0 }
  v75 = v20;
  v27 = v20;
  while (1)
  {
    {
      v65 = operator new();
      *((_QWORD *)v12 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v65, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v29 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v12 + 299) + 16))(*((_QWORD *)v12 + 299), 1488, 8);
    md::LabelPart::LabelPart((md::LabelPart *)v29, (const md::LabelPart *)a1);
    v30 = v12;
    *(_QWORD *)v29 = off_1E428E890;
    *(_OWORD *)(v29 + 576) = 0u;
    *(_OWORD *)(v29 + 592) = 0u;
    *(_QWORD *)(v29 + 608) = *(_QWORD *)(a1 + 608);
    v31 = *(_QWORD *)(a1 + 616);
    *(_QWORD *)(v29 + 616) = v31;
    if (v31)
    {
      v32 = (unint64_t *)(v31 + 8);
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
    *(_OWORD *)(v29 + 624) = *(_OWORD *)(a1 + 624);
    v34 = *(_OWORD *)(a1 + 640);
    v35 = *(_OWORD *)(a1 + 656);
    v36 = *(_OWORD *)(a1 + 672);
    *(_OWORD *)(v29 + 682) = *(_OWORD *)(a1 + 682);
    *(_OWORD *)(v29 + 656) = v35;
    *(_OWORD *)(v29 + 672) = v36;
    *(_OWORD *)(v29 + 640) = v34;
    *(_DWORD *)(v29 + 698) = *(_DWORD *)(a1 + 698);
    *(_DWORD *)(v29 + 702) = *(_DWORD *)(a1 + 702);
    *(_DWORD *)(v29 + 706) = *(_DWORD *)(a1 + 706);
    *(_DWORD *)(v29 + 710) = *(_DWORD *)(a1 + 710);
    *(_DWORD *)(v29 + 714) = *(_DWORD *)(a1 + 714);
    *(_BYTE *)(v29 + 718) = *(_BYTE *)(a1 + 718);
    *(_OWORD *)(v29 + 720) = 0u;
    *(_DWORD *)(v29 + 736) = 0;
    *(_OWORD *)(v29 + 740) = xmmword_19FFB5F50;
    *(_DWORD *)(v29 + 756) = 0;
    *(_QWORD *)(v29 + 760) = _D8;
    *(_OWORD *)(v29 + 768) = 0u;
    *(_OWORD *)(v29 + 784) = 0u;
    *(_OWORD *)(v29 + 794) = 0u;
    *(_OWORD *)(v29 + 810) = xmmword_19FFB5F60;
    *(_DWORD *)(v29 + 826) = 0;
    *(_BYTE *)(v29 + 830) = 0;
    *(_QWORD *)(v29 + 832) = 0;
    *(_QWORD *)(v29 + 848) = 0;
    *(_QWORD *)(v29 + 840) = 0;
    *(_BYTE *)(v29 + 856) = 0;
    *(_BYTE *)(v29 + 864) = *(_BYTE *)(a1 + 864);
    *(_DWORD *)(v29 + 865) = 0;
    *(_DWORD *)(v29 + 868) = 0;
    *(_WORD *)(v29 + 872) = 1;
    *(_OWORD *)(v29 + 880) = 0u;
    *(_OWORD *)(v29 + 896) = 0u;
    *(_QWORD *)(v29 + 912) = 1065353216;
    *(_BYTE *)(v29 + 920) = 0;
    *(_BYTE *)(v29 + 928) = 1;
    *(_QWORD *)(v29 + 944) = 0;
    *(_QWORD *)(v29 + 952) = 0;
    *(_QWORD *)(v29 + 936) = 0;
    v37 = *(const md::LabelText **)(a1 + 576);
    v38 = operator new(0xB0uLL);
    v38[2] = 0;
    *v38 = &off_1E42DDF50;
    v38[1] = 0;
    *(_QWORD *)(v29 + 576) = md::LabelText::LabelText((uint64_t)(v38 + 3), v37);
    v39 = *(std::__shared_weak_count **)(v29 + 584);
    *(_QWORD *)(v29 + 584) = v38;
    if (v39)
    {
      p_shared_owners = (unint64_t *)&v39->__shared_owners_;
      do
        v41 = __ldaxr(p_shared_owners);
      while (__stlxr(v41 - 1, p_shared_owners));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    *(_QWORD *)v29 = off_1E4296C68;
    v42 = *(_OWORD *)(a1 + 960);
    v43 = *(_OWORD *)(a1 + 992);
    *(_OWORD *)(v29 + 976) = *(_OWORD *)(a1 + 976);
    *(_OWORD *)(v29 + 992) = v43;
    *(_OWORD *)(v29 + 960) = v42;
    v44 = *(_OWORD *)(a1 + 1008);
    v45 = *(_OWORD *)(a1 + 1024);
    v46 = *(_OWORD *)(a1 + 1040);
    *(_OWORD *)(v29 + 1052) = *(_OWORD *)(a1 + 1052);
    *(_OWORD *)(v29 + 1040) = v46;
    *(_OWORD *)(v29 + 1008) = v44;
    *(_OWORD *)(v29 + 1024) = v45;
    *(_QWORD *)(v29 + 1072) = *(_QWORD *)(a1 + 1072);
    v47 = *(_QWORD *)(a1 + 1080);
    *(_QWORD *)(v29 + 1080) = v47;
    if (v47)
    {
      v48 = (unint64_t *)(v47 + 8);
      do
        v49 = __ldxr(v48);
      while (__stxr(v49 + 1, v48));
    }
    *(_QWORD *)(v29 + 1088) = *(_QWORD *)(a1 + 1088);
    v50 = *(_QWORD *)(a1 + 1096);
    *(_QWORD *)(v29 + 1096) = v50;
    v12 = v30;
    if (v50)
    {
      v51 = (unint64_t *)(v50 + 8);
      do
        v52 = __ldxr(v51);
      while (__stxr(v52 + 1, v51));
    }
    *(_QWORD *)(v29 + 1104) = *(_QWORD *)(a1 + 1104);
    v53 = *(_QWORD *)(a1 + 1112);
    *(_QWORD *)(v29 + 1112) = v53;
    if (v53)
    {
      v54 = (unint64_t *)(v53 + 8);
      do
        v55 = __ldxr(v54);
      while (__stxr(v55 + 1, v54));
    }
    *(_QWORD *)(v29 + 1120) = *(_QWORD *)(a1 + 1120);
    v56 = *(_QWORD *)(a1 + 1128);
    *(_QWORD *)(v29 + 1128) = v56;
    if (v56)
    {
      v57 = (unint64_t *)(v56 + 8);
      do
        v58 = __ldxr(v57);
      while (__stxr(v58 + 1, v57));
    }
    *(_OWORD *)(v29 + 1136) = *(_OWORD *)(a1 + 1136);
    *(_OWORD *)(v29 + 1152) = 0u;
    *(_OWORD *)(v29 + 1168) = 0u;
    *(_QWORD *)(v29 + 1184) = 1065353216;
    *(_DWORD *)(v29 + 1192) = 0;
    *(_QWORD *)(v29 + 1200) = 0;
    *(_QWORD *)(v29 + 1248) = 0;
    *(_OWORD *)(v29 + 1264) = 0u;
    *(_OWORD *)(v29 + 1280) = 0u;
    *(_OWORD *)(v29 + 1296) = 0u;
    *(_OWORD *)(v29 + 1312) = 0u;
    *(_DWORD *)(v29 + 1327) = 0;
    *(_WORD *)(v29 + 1331) = 2305;
    *(_DWORD *)(v29 + 1340) = 0;
    *(_DWORD *)(v29 + 1333) = 0;
    *(_DWORD *)(v29 + 1344) = 1;
    *(_BYTE *)(v29 + 1348) = 10;
    *(_DWORD *)(v29 + 1350) = 16842752;
    *(_BYTE *)(v29 + 1354) = 0;
    *(_QWORD *)(v29 + 1360) = 0;
    *(_DWORD *)(v29 + 1368) = 0;
    *(_WORD *)(v29 + 1372) = 258;
    *(_QWORD *)(v29 + 1388) = 0;
    *(_OWORD *)(v29 + 1374) = 0u;
    *(_BYTE *)(v29 + 1396) = *(_BYTE *)(a1 + 1396);
    *(_BYTE *)(v29 + 1397) = 0;
    *(_WORD *)(v29 + 1398) = *(_WORD *)(a1 + 1398);
    *(_DWORD *)(v29 + 1400) = *(_DWORD *)(a1 + 1400);
    *(_QWORD *)(v29 + 1404) = 0;
    *(_BYTE *)(v29 + 1416) = 0;
    *(_OWORD *)(v29 + 1432) = 0u;
    *(_QWORD *)(v29 + 1445) = 0;
    *(_BYTE *)(v29 + 1453) = *(_BYTE *)(a1 + 1453);
    *(_WORD *)(v29 + 1454) = 0;
    *(_BYTE *)(v29 + 1456) = *(_BYTE *)(a1 + 1456);
    *(_BYTE *)(v29 + 1457) = 0;
    *(_BYTE *)(v29 + 1458) = *(_BYTE *)(a1 + 1458);
    *(_BYTE *)(v29 + 1459) = *(_BYTE *)(a1 + 1459);
    *(_BYTE *)(v29 + 1460) = 0;
    *(_DWORD *)(v29 + 1461) = *(unsigned __int16 *)(a1 + 1461);
    *(_BYTE *)(v29 + 1465) = *(_BYTE *)(a1 + 1465);
    *(_WORD *)(v29 + 1466) = 1;
    *(_BYTE *)(v29 + 1468) = *(_BYTE *)(a1 + 1468);
    *(_QWORD *)(v29 + 1472) = *(_QWORD *)(a1 + 1472);
    v59 = *(_QWORD *)(a1 + 1480);
    *(_QWORD *)(v29 + 1480) = v59;
    if (v59)
    {
      v60 = (unint64_t *)(v59 + 8);
      do
        v61 = __ldxr(v60);
      while (__stxr(v61 + 1, v60));
    }
    *(_BYTE *)(v29 + 1457) = 1;
    v62 = *(_DWORD *)v27;
    *(_BYTE *)(v29 + 1462) = *(_BYTE *)(v27 + 4);
    *(_DWORD *)(v29 + 1458) = v62;
    v81[0] = 0;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v29 + 80))(v29, a3, a1 + 280, v81) == 37)
    {
      LOWORD(v81[0]) = 256;
      v81[1] = 0;
      v80[0] = &off_1E42AAE38;
      v80[1] = v29 + 72;
      v63 = md::LabelCollider::collideCandidate(a4, a5, (uint64_t)v80, (uint64_t)v81);
      v64 = BYTE1(v81[0]) ? 0 : v63;
      if ((v64 & 1) != 0)
        break;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    v27 += 5;
    if (v27 == v79)
    {
      if ((a2 & 1) != 0)
      {
        v66 = 0;
        v67 = v74;
        v68 = v75;
        if (!v75)
          return v66;
      }
      else
      {
        v67 = v74;
        v68 = v75;
        v70 = *(_DWORD *)v75;
        *(_BYTE *)(v73 + 4) = *(_BYTE *)(v75 + 4);
        *(_DWORD *)v73 = v70;
        v66 = 1;
      }
      goto LABEL_60;
    }
  }
  v69 = *(_DWORD *)v27;
  *(_BYTE *)(v73 + 4) = *(_BYTE *)(v27 + 4);
  *(_DWORD *)v73 = v69;
  (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  v66 = 1;
  v67 = v74;
  v68 = v75;
  if (v75)
LABEL_60:
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v67 + 40))(v67, v68, v79 - v68);
  return v66;
}

void sub_19FE5BF20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t v25;

  if (v25)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a12 + 40))(a12, v25, a25 - v25);
  _Unwind_Resume(exception_object);
}

void md::CollisionObjectRefPlacementCandidate::~CollisionObjectRefPlacementCandidate(md::CollisionObjectRefPlacementCandidate *this)
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::CollisionObjectRefPlacementCandidate::collisionBounds(md::CollisionObjectRefPlacementCandidate *this)
{
  return *((_QWORD *)this + 1) + 80;
}

uint64_t md::CollisionObjectRefPlacementCandidate::collidesWithItem(md::CollisionObjectRefPlacementCandidate *this, const md::LabelCollidableItem *a2)
{
  return (*(uint64_t (**)(const md::LabelCollidableItem *, _QWORD))(*(_QWORD *)a2 + 16))(a2, *((_QWORD *)this + 1));
}

uint64_t md::CollisionObjectRefPlacementCandidate::collidesWithObject(md::CollisionObjectRefPlacementCandidate *this, const md::CollisionObject *a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  BOOL v7;
  float32x2_t *v8;
  float v9;
  uint64_t v10;
  float32x2_t *v11;
  float v12;
  float32x2_t v13;
  md::CollisionObject *v14;

  v2 = *((_QWORD *)this + 1);
  if (*(_OWORD *)(v2 + 160) == 0 || (*((_BYTE *)a2 + 200) & *(_BYTE *)(v2 + 200)) != 0)
    return 0;
  v4 = *((_QWORD *)a2 + 21);
  if (!*(_QWORD *)(v2 + 168))
  {
    if (!v4)
    {
      if (*(_BYTE *)(v2 + 196) || *((_BYTE *)a2 + 196))
        return md::CollisionObject::rectsCollideWithRectsOBB(*((md::CollisionObject **)this + 1), a2);
      else
        return md::CollisionObject::rectsCollideWithRects(*((md::CollisionObject **)this + 1), a2);
    }
    v14 = a2;
    a2 = (const md::CollisionObject *)v2;
    return md::CollisionObject::circlesCollideWithRects(v14, a2);
  }
  if (!v4)
  {
    v14 = (md::CollisionObject *)*((_QWORD *)this + 1);
    return md::CollisionObject::circlesCollideWithRects(v14, a2);
  }
  v5 = *((unsigned int *)a2 + 44);
  if (!(_DWORD)v5)
    return 0;
  v6 = 0;
  v7 = 1;
  while (1)
  {
    v8 = (float32x2_t *)(*((_QWORD *)a2 + 23) + 24 * v6);
    v9 = v8[*(unsigned __int8 *)(v2 + 199) + 1].f32[0];
    if (v9 > 0.0)
    {
      v10 = *(unsigned int *)(v2 + 176);
      if ((_DWORD)v10)
        break;
    }
LABEL_8:
    v7 = ++v6 < v5;
    if (v6 == v5)
      return 0;
  }
  v11 = *(float32x2_t **)(v2 + 184);
  while (1)
  {
    v12 = v11[*((unsigned __int8 *)a2 + 199) + 1].f32[0];
    if (v12 > 0.0)
    {
      v13 = vsub_f32(*v11, *v8);
      if (vaddv_f32(vmul_f32(v13, v13)) < (float)((float)(v12 + v9) * (float)(v12 + v9)))
        return v7;
    }
    v11 += 3;
    if (!--v10)
      goto LABEL_8;
  }
}

void gdc::ComponentStorageWrapper<md::ShadowMeshDescriptor>::emplace(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t *v26;
  _BYTE *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t *v34;
  char *v35;
  char *v36;
  uint64_t *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  __int128 v48;
  uint64_t *v49;

  v44 = a2;
  v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(a1 + 4, (uint64_t)&v44);
  if ((v6 & 1) != 0)
  {
    v12 = a1[12];
    v13 = a1[11];
    if (v13 < v12)
    {
      *(_BYTE *)v13 = *(_BYTE *)a3;
      v14 = v13 + 8;
      v15 = *(_QWORD *)(a3 + 32);
      if (v15)
      {
        if (v15 == a3 + 8)
        {
          *(_QWORD *)(v13 + 32) = v14;
          (*(void (**)(_QWORD))(**(_QWORD **)(a3 + 32) + 24))(*(_QWORD *)(a3 + 32));
          goto LABEL_38;
        }
        v15 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v15 + 16))(v15, v14);
      }
      *(_QWORD *)(v13 + 32) = v15;
LABEL_38:
      v30 = v13 + 40;
      a1[11] = v30;
LABEL_59:
      a1[11] = v30;
      v23 = a1[31];
      goto LABEL_60;
    }
    v16 = a1[10];
    v17 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v13 - v16) >> 3);
    if (v17 + 1 > 0x666666666666666)
      goto LABEL_65;
    v18 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v12 - v16) >> 3);
    v19 = 2 * v18;
    if (2 * v18 <= v17 + 1)
      v19 = v17 + 1;
    if (v18 >= 0x333333333333333)
      v20 = 0x666666666666666;
    else
      v20 = v19;
    v49 = a1 + 12;
    if (v20)
    {
      if (v20 > 0x666666666666666)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v21 = (uint64_t *)operator new(40 * v20);
    }
    else
    {
      v21 = 0;
    }
    v26 = &v21[5 * v17];
    v46 = v21;
    v47 = (uint64_t)v26;
    *(_QWORD *)&v48 = v26;
    *((_QWORD *)&v48 + 1) = &v21[5 * v20];
    *(_BYTE *)v26 = *(_BYTE *)a3;
    v27 = v26 + 1;
    v28 = *(_QWORD *)(a3 + 32);
    if (v28)
    {
      if (v28 == a3 + 8)
      {
        v21[5 * v17 + 4] = (uint64_t)v27;
        (*(void (**)(uint64_t))(*(_QWORD *)v28 + 24))(v28);
        v26 = (uint64_t *)v47;
        v29 = (char *)v48;
        goto LABEL_40;
      }
      v21[5 * v17 + 4] = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v28 + 16))(v28, v27);
    }
    else
    {
      v21[5 * v17 + 4] = 0;
    }
    v29 = (char *)&v21[5 * v17];
LABEL_40:
    v30 = (uint64_t)(v29 + 40);
    *(_QWORD *)&v48 = v29 + 40;
    v32 = (char *)a1[10];
    v31 = (char *)a1[11];
    if (v31 == v32)
    {
      a1[10] = (uint64_t)v26;
      a1[11] = v30;
      a1[12] = *((_QWORD *)&v48 + 1);
LABEL_57:
      if (v31)
        operator delete(v31);
      goto LABEL_59;
    }
    v33 = 0;
    do
    {
      v34 = &v26[v33];
      v35 = &v31[v33 * 8];
      LOBYTE(v26[v33 - 5]) = v31[v33 * 8 - 40];
      v36 = *(char **)&v31[v33 * 8 - 8];
      if (v36)
      {
        if (v35 - 32 == v36)
        {
          *(v34 - 1) = (uint64_t)(v34 - 4);
          (*(void (**)(_QWORD))(**((_QWORD **)v35 - 1) + 24))(*((_QWORD *)v35 - 1));
        }
        else
        {
          *(v34 - 1) = (uint64_t)v36;
          *((_QWORD *)v35 - 1) = 0;
        }
      }
      else
      {
        *(v34 - 1) = 0;
      }
      v33 -= 5;
    }
    while (&v31[v33 * 8] != v32);
    v37 = &v26[v33];
    v31 = (char *)a1[10];
    v38 = (char *)a1[11];
    a1[10] = (uint64_t)v37;
    v39 = v48;
    *(_OWORD *)(a1 + 11) = v48;
    v30 = v39;
    while (1)
    {
      if (v38 == v31)
        goto LABEL_57;
      v40 = (char *)*((_QWORD *)v38 - 1);
      if (v38 - 32 == v40)
        break;
      if (v40)
      {
        v41 = 5;
        goto LABEL_50;
      }
LABEL_51:
      v38 -= 40;
    }
    v40 = v38 - 32;
    v41 = 4;
LABEL_50:
    (*(void (**)(void))(*(_QWORD *)v40 + 8 * v41))();
    goto LABEL_51;
  }
  v7 = a1[10] + 40 * (((uint64_t)v5 - a1[7]) >> 3);
  *(_BYTE *)v7 = *(_BYTE *)a3;
  v8 = v7 + 8;
  v10 = (uint64_t *)(v7 + 32);
  v9 = *(_QWORD **)(v7 + 32);
  *(_QWORD *)(v7 + 32) = 0;
  if (v9 == (_QWORD *)(v7 + 8))
  {
    v11 = 4;
    v9 = (_QWORD *)(v7 + 8);
  }
  else
  {
    if (!v9)
      goto LABEL_21;
    v11 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v11))();
LABEL_21:
  v22 = *(_QWORD *)(a3 + 32);
  if (v22)
  {
    if (v22 == a3 + 8)
    {
      *v10 = v8;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a3 + 32) + 24))(*(_QWORD *)(a3 + 32), v8);
    }
    else
    {
      *v10 = v22;
      *(_QWORD *)(a3 + 32) = 0;
    }
  }
  else
  {
    *v10 = 0;
  }
  v23 = a1[31];
  if (v7 != a1[11])
  {
    v24 = (_QWORD *)a1[16];
    if (v24)
    {
      while (1)
      {
        v46 = &v44;
        v47 = 1;
        v45 = v23;
        v25 = v24[6];
        if (!v25)
          break;
        (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v25 + 48))(v25, &v45, &v46);
        v24 = (_QWORD *)*v24;
        if (!v24)
          return;
      }
LABEL_64:
      std::__throw_bad_function_call[abi:nn180100]();
LABEL_65:
      abort();
    }
    return;
  }
LABEL_60:
  v42 = (_QWORD *)a1[22];
  if (v42)
  {
    while (1)
    {
      v46 = &v44;
      v47 = 1;
      v45 = v23;
      v43 = v42[6];
      if (!v43)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v43 + 48))(v43, &v45, &v46);
      v42 = (_QWORD *)*v42;
      if (!v42)
        return;
    }
    goto LABEL_64;
  }
}

void sub_19FE5C668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::__split_buffer<md::IconMeshDescriptor>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19FE5C67C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 88) = v2;
  _Unwind_Resume(a1);
}

void std::__function::__func<md::CurvedTextLabelPart::pushToRenderModel(md::LabelRenderModel &,float)::$_0,std::allocator<md::CurvedTextLabelPart::pushToRenderModel(md::LabelRenderModel &,float)::$_0>,void ()(md::LabelRenderDescriptor const&,md::ShadowMeshData &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::CurvedTextLabelPart::pushToRenderModel(md::LabelRenderModel &,float)::$_0,std::allocator<md::CurvedTextLabelPart::pushToRenderModel(md::LabelRenderModel &,float)::$_0>,void ()(md::LabelRenderDescriptor const&,md::ShadowMeshData &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4279FD8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::CurvedTextLabelPart::pushToRenderModel(md::LabelRenderModel &,float)::$_0,std::allocator<md::CurvedTextLabelPart::pushToRenderModel(md::LabelRenderModel &,float)::$_0>,void ()(md::LabelRenderDescriptor const&,md::ShadowMeshData &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E4279FD8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::CurvedTextLabelPart::pushToRenderModel(md::LabelRenderModel &,float)::$_0,std::allocator<md::CurvedTextLabelPart::pushToRenderModel(md::LabelRenderModel &,float)::$_0>,void ()(md::LabelRenderDescriptor const&,md::ShadowMeshData &)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, double a4, int8x16_t a5, double a6, int32x4_t a7, int32x4_t a8, double a9, int32x4_t a10, int8x16_t a11)
{
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  float *v23;
  char *v24;
  _DWORD *v25;
  float v26;
  float v27;
  float v29;
  float v30;

  v13 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v13 + 565))
    *(_QWORD *)(a3 + 40) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v13 + 144))(*(_QWORD *)(a1 + 8));
  *(_DWORD *)(a3 + 24) = *(_DWORD *)(v13 + 552);
  *(_BYTE *)(a3 + 32) = *(_BYTE *)(v13 + 826);
  *(_BYTE *)(a3 + 33) = *(_BYTE *)(v13 + 827);
  *(_BYTE *)(a3 + 34) = *(_BYTE *)(v13 + 828);
  *(_BYTE *)(a3 + 35) = *(_BYTE *)(v13 + 829);
  v14 = *(unsigned __int16 *)(a2 + 32);
  v15 = *(char **)a3;
  v16 = *(char **)(a3 + 8);
  v17 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)&v16[-*(_QWORD *)a3] >> 3);
  if (v14 <= v17)
  {
    if (v14 < v17)
    {
      v16 = &v15[56 * *(unsigned __int16 *)(a2 + 32)];
      *(_QWORD *)(a3 + 8) = v16;
    }
  }
  else
  {
    std::vector<md::ShadowMeshQuad>::__append((char **)a3, v14 - v17);
    v14 = *(unsigned __int16 *)(a2 + 32);
    v15 = *(char **)a3;
    v16 = *(char **)(a3 + 8);
  }
  *(_DWORD *)(a3 + 28) = *(_DWORD *)(v13 + 788);
  v18 = 0x6DB6DB6DB6DB6DB7 * ((v16 - v15) >> 3);
  if (v14 <= v18)
  {
    if (v14 < v18)
      *(_QWORD *)(a3 + 8) = &v15[56 * v14];
  }
  else
  {
    std::vector<md::ShadowMeshQuad>::__append((char **)a3, v14 - v18);
  }
  v19 = *(_QWORD *)(v13 + 880);
  v20 = *(_QWORD *)(v13 + 888);
  if (v19 != v20)
  {
    v21 = 0;
    do
    {
      if (*(_BYTE *)(v19 + 1))
      {
        v25 = *(_DWORD **)(v19 + 8);
        LODWORD(a4) = *(_DWORD *)(*(_QWORD *)v25 + 40);
        a5.i32[0] = *(_DWORD *)(*(_QWORD *)v25 + 44);
        LODWORD(a6) = *(_DWORD *)(*(_QWORD *)v25 + 32);
        a7.i32[0] = *(_DWORD *)(*(_QWORD *)v25 + 36);
        v26 = *(float *)a5.i32 - *(float *)a7.i32;
        v27 = (float)(*(float *)&a4 - *(float *)&a6) * 0.5;
        if (*(float *)&a4 >= *(float *)&a6 && *(float *)a5.i32 >= *(float *)a7.i32)
        {
          v29 = *(float *)(v13 + 788);
          *(float *)a10.i32 = (float)(v26 * 0.1) - v29;
          v30 = fminf(v27, v26 * 0.1) - v29;
          *(float *)&a6 = v30 + *(float *)&a6;
          *(float *)&a4 = *(float *)&a4 - v30;
          *(float *)a7.i32 = *(float *)a10.i32 + *(float *)a7.i32;
          *(float *)a5.i32 = *(float *)a5.i32 - *(float *)a10.i32;
          v26 = *(float *)a5.i32 - *(float *)a7.i32;
          v27 = (float)(*(float *)&a4 - *(float *)&a6) * 0.5;
        }
        v22 = *(char **)a3;
        v23 = (float *)(*(_QWORD *)a3 + 56 * v21);
        a8.i32[0] = v25[20];
        LODWORD(a9) = *(_DWORD *)(*(_QWORD *)v25 + 48);
        *v23 = *(float *)&a6;
        v23[1] = *(float *)a7.i32;
        v23[2] = 0.0;
        v23[3] = *(float *)&a4;
        v23[4] = *(float *)a7.i32;
        v23[5] = 0.0;
        v23[6] = *(float *)&a4;
        v23[7] = *(float *)a5.i32;
        v23[8] = 0.0;
        *(float *)&a4 = *(float *)a8.i32 / *(float *)&a9;
        v23[9] = *(float *)&a6;
        v23[10] = *(float *)a5.i32;
        v23[11] = 0.0;
        md::TextLabelPart::prepareGlyphVertices(v13, (uint64_t)v25, (uint64_t)v23, a4, a5, a6, a7, a8, a9, a10, a11);
        *(float *)&a6 = v23[1];
        *v23 = *v23 + *(float *)(v13 + 1440);
        v23[1] = *(float *)&a6 + *(float *)(v13 + 1444);
        *(float *)&a6 = v23[3];
        v23[2] = v23[2] + *(float *)(v13 + 1448);
        v23[3] = *(float *)&a6 + *(float *)(v13 + 1440);
        *(float *)&a6 = v23[5];
        v23[4] = v23[4] + *(float *)(v13 + 1444);
        v23[5] = *(float *)&a6 + *(float *)(v13 + 1448);
        *(float *)&a6 = v23[7];
        v23[6] = v23[6] + *(float *)(v13 + 1440);
        v23[7] = *(float *)&a6 + *(float *)(v13 + 1444);
        *(float *)&a6 = v23[9];
        v23[8] = v23[8] + *(float *)(v13 + 1448);
        v23[9] = *(float *)&a6 + *(float *)(v13 + 1440);
        *(float *)&a6 = v23[11];
        v23[10] = v23[10] + *(float *)(v13 + 1444);
        v23[11] = *(float *)&a6 + *(float *)(v13 + 1448);
        v24 = &v22[56 * v21];
        *((float *)v24 + 12) = v27;
        *((float *)v24 + 13) = v26 * 0.5;
        ++v21;
      }
      v19 += 16;
    }
    while (v19 != v20);
  }
}

void std::vector<md::ShadowMeshQuad>::__append(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v5 = a1[1];
  v4 = a1[2];
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - v5) >> 3) >= a2)
  {
    if (a2)
    {
      v12 = 56 * ((56 * a2 - 56) / 0x38) + 56;
      bzero(a1[1], v12);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = 0x6DB6DB6DB6DB6DB7 * ((v5 - *a1) >> 3);
    v8 = v7 + a2;
    if (v7 + a2 > 0x492492492492492)
      abort();
    v9 = 0x6DB6DB6DB6DB6DB7 * ((v4 - v6) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x249249249249249)
      v10 = 0x492492492492492;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0x492492492492492)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v11 = (char *)operator new(56 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[56 * v7];
    v14 = &v11[56 * v10];
    v15 = 56 * ((56 * a2 - 56) / 0x38) + 56;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 != v6)
    {
      do
      {
        v17 = *(_OWORD *)(v5 - 56);
        v18 = *(_OWORD *)(v5 - 40);
        v19 = *(_OWORD *)(v5 - 24);
        *((_QWORD *)v13 - 1) = *((_QWORD *)v5 - 1);
        *(_OWORD *)(v13 - 24) = v19;
        *(_OWORD *)(v13 - 40) = v18;
        *(_OWORD *)(v13 - 56) = v17;
        v13 -= 56;
        v5 -= 56;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v14;
    if (v5)
      operator delete(v5);
  }
}

uint64_t md::CurvedTextLabelPart::CurvedTextLabelPart(uint64_t a1, int a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t a8, float a9, _BYTE *a10, char a11)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  _BYTE *v25;
  uint64_t *v26;
  char v27;
  char v28;
  int v29;
  char v30;
  __int128 v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  uint64_t *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  __int128 v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  _BOOL8 v53;
  uint64_t v54;
  uint64_t v55;
  float *v56;
  int v57;
  _WORD *v60;
  __int128 v62;

  v18 = a1 + 1141;
  v19 = md::TextLabelPart::TextLabelPart(a1, a3, a11);
  *(_QWORD *)v19 = off_1E4296C68;
  *(_OWORD *)(v19 + 960) = 0u;
  *(_OWORD *)(v19 + 976) = 0u;
  *(_QWORD *)(v19 + 992) = 1065353216;
  *(_DWORD *)(v19 + 1000) = 0;
  *(_QWORD *)(v19 + 1008) = 0;
  *(_QWORD *)(v19 + 1056) = 0;
  *(_OWORD *)(v19 + 1072) = 0u;
  *(_OWORD *)(v19 + 1088) = 0u;
  *(_OWORD *)(v19 + 1104) = 0u;
  *(_OWORD *)(v19 + 1120) = 0u;
  *(_DWORD *)(v19 + 1135) = 0;
  *(_WORD *)(v19 + 1139) = 2305;
  *(_DWORD *)v18 = 0;
  *(_OWORD *)(v19 + 1148) = 0u;
  *(_OWORD *)(v19 + 1164) = 0u;
  *(_DWORD *)(v19 + 1180) = 0;
  *(_QWORD *)(v19 + 1184) = 1065353216;
  *(_DWORD *)(v19 + 1192) = 0;
  *(_QWORD *)(v19 + 1200) = 0;
  *(_QWORD *)(v19 + 1248) = 0;
  *(_DWORD *)(v19 + 1327) = 0;
  *(_OWORD *)(v19 + 1312) = 0u;
  *(_OWORD *)(v19 + 1296) = 0u;
  *(_OWORD *)(v19 + 1280) = 0u;
  *(_OWORD *)(v19 + 1264) = 0u;
  *(_WORD *)(v19 + 1331) = 2305;
  *(_DWORD *)(v19 + 1340) = 0;
  *(_DWORD *)(v18 + 192) = 0;
  *(_DWORD *)(v19 + 1344) = 1;
  *(_BYTE *)(v19 + 1348) = 10;
  *(_DWORD *)(v19 + 1350) = 16842752;
  *(_BYTE *)(v19 + 1354) = 0;
  *(_QWORD *)(v19 + 1360) = 0;
  *(_DWORD *)(v19 + 1368) = 0;
  *(_WORD *)(v19 + 1372) = 258;
  *(_QWORD *)(v19 + 1388) = 0;
  *(_QWORD *)(v19 + 1374) = 0;
  *(_QWORD *)(v19 + 1382) = 0;
  *(_BYTE *)(v19 + 1396) = 9;
  *(_BYTE *)(v19 + 1397) = *(_BYTE *)(a6 + 248);
  *(_BYTE *)(v19 + 1398) = *(_BYTE *)(a6 + 253);
  *(_BYTE *)(v19 + 1399) = 0;
  *(float *)(v19 + 1400) = a9;
  *(_DWORD *)(v19 + 1404) = *(_DWORD *)(a5 + 392);
  *(_DWORD *)(v19 + 1408) = 0;
  *(_BYTE *)(v19 + 1416) = 0;
  *(_QWORD *)(v19 + 1440) = 0;
  *(_QWORD *)(v19 + 1448) = 0;
  *(_QWORD *)(v19 + 1432) = 0;
  *(_BYTE *)(v19 + 1456) = a10[2];
  *(_QWORD *)(v19 + 1457) = 0x900000000;
  *(_BYTE *)(v19 + 1467) = 0;
  v60 = (_WORD *)(v19 + 1461);
  *(_WORD *)(v19 + 1465) = 257;
  *(_BYTE *)(v19 + 1468) = a2;
  *(_QWORD *)(v19 + 1472) = *a7;
  v20 = a7[1];
  *(_QWORD *)(v19 + 1480) = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  *(_BYTE *)(a1 + 557) = 1;
  v23 = *(_QWORD *)(a6 + 264);
  if (a11 == 1)
  {
    if (!v23)
    {
      v24 = md::LabelStyle::prepareStyleGroup<md::LabelLineStyleGroup>(a6);
      v23 = *v24;
      *(_QWORD *)(a6 + 264) = *v24;
    }
    v25 = (_BYTE *)(v23 + 62);
  }
  else
  {
    if (!v23)
    {
      v26 = md::LabelStyle::prepareStyleGroup<md::LabelLineStyleGroup>(a6);
      v23 = *v26;
      *(_QWORD *)(a6 + 264) = *v26;
    }
    v25 = (_BYTE *)(v23 + 61);
  }
  v27 = *v25 - 2;
  if ((v27 & 0xF8) != 0)
    v28 = 9;
  else
    v28 = 0x908090609090902uLL >> (8 * v27);
  *(_BYTE *)(a1 + 1396) = v28;
  if (a2 == 2 && *(_BYTE *)(*(_QWORD *)(a4 + 232) + 31))
  {
    *(_BYTE *)(a1 + 1399) = 0;
  }
  else
  {
    v29 = *(unsigned __int8 *)(a1 + 1398);
    *(_BYTE *)(a1 + 1399) = v29;
    if (v29)
      *(_WORD *)(a1 + 565) = 1;
  }
  v30 = *(_BYTE *)(a1 + 565);
  if (v30)
  {
    if (*(_BYTE *)(*(_QWORD *)(a4 + 232) + 17))
      v30 = *(_BYTE *)(*(_QWORD *)(a4 + 432) + 24) != 0;
    else
      v30 = 1;
  }
  *(_BYTE *)(a1 + 869) = v30;
  *(_BYTE *)(a1 + 865) = 1;
  if (*(_BYTE *)(a1 + 1456) && !*(_BYTE *)(v18 + 316))
  {
    *(_BYTE *)(a1 + 1466) = 0;
    *(_DWORD *)(a1 + 1408) = *(_DWORD *)(a5 + 96);
    *(_DWORD *)(a1 + 1000) = *(_DWORD *)(*(_QWORD *)(a4 + 432) + 1176);
  }
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a7 + 16))(&v62);
  v31 = v62;
  v62 = 0uLL;
  v32 = *(std::__shared_weak_count **)(a1 + 1080);
  *(_OWORD *)(a1 + 1072) = v31;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = (uint64_t *)(a1 + 1072);
  v36 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
  if (*((_QWORD *)&v62 + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v39 = *v35;
  if (a10[7])
  {
    (*(void (**)(uint64_t, _QWORD, double))(*(_QWORD *)v39 + 176))(v39, a10[6], 1.0);
    v39 = *v35;
  }
  *(_BYTE *)(a1 + 1142) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 80))(v39);
  (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)(a1 + 1072) + 16))(&v62);
  v40 = v62;
  v62 = 0uLL;
  v41 = *(std::__shared_weak_count **)(a1 + 1272);
  *(_OWORD *)(a1 + 1264) = v40;
  if (v41)
  {
    v42 = (unint64_t *)&v41->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
  if (*((_QWORD *)&v62 + 1))
  {
    v45 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  *(_BYTE *)(a1 + 1334) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1264) + 80))(*(_QWORD *)(a1 + 1264));
  *(_BYTE *)(a1 + 1136) = a10[1];
  v47 = a10[3];
  *(_BYTE *)(a1 + 1141) = v47;
  v48 = *(unsigned __int8 *)(a6 + 248);
  if (v48 == 32 && (v49 = **(_QWORD **)(*a3 + 16), *(_BYTE *)(v49 + 128) == 2))
  {
    v50 = *(unsigned __int8 *)(v49 + 130);
    *(_BYTE *)(a1 + 1455) = v50;
    v51 = a8;
    if (v50)
      goto LABEL_57;
  }
  else
  {
    *(_BYTE *)(a1 + 1455) = 0;
    v51 = a8;
  }
  if (!v47)
    v47 = v48;
  if (v47 == 32)
    LOBYTE(v47) = 0;
LABEL_57:
  *(_BYTE *)(a1 + 1452) = v47;
  v52 = *(unsigned __int8 *)(a6 + 251);
  if (v52 != 1 && v52 != 4)
  {
    if (a10[5])
    {
      v52 = a10[4];
    }
    else if (*(_BYTE *)(a4 + 3645))
    {
      v52 = 4;
    }
    else
    {
      v52 = 1;
    }
  }
  *(_BYTE *)(a1 + 1453) = v52;
  if (*(_BYTE *)(v51 + 3) == 9)
  {
    *(_BYTE *)(a1 + 1458) = v52;
    if (v52 == 4)
    {
      v53 = *(unsigned __int8 *)(a1 + 864) == 1;
      v54 = a6 + 280;
      if (*(_BYTE *)(a1 + 864) == 1)
        v55 = 6;
      else
        v55 = 0;
      v56 = *(float **)(v54 + 8 * (*(_BYTE *)(a1 + 864) == 1));
      if (v56)
      {
        if (vabds_f32(v56[2], *(float *)(a6 + 104)) >= 0.01)
        {
          md::LabelStyle::updateStyleGroup<md::LabelTextStyleGroup>(a6, (uint64_t)v56, v55);
          v56 = *(float **)(v54 + 8 * v53);
        }
      }
      else
      {
        v56 = (float *)md::LabelStyle::prepareStyleGroup<md::LabelTextStyleGroup>(a6, v55);
        *(_QWORD *)(v54 + 8 * v53) = v56;
      }
      if ((float)(*(float *)(a6 + 152) + *(float *)(a6 + 152)) <= (float)(*(float *)(*(_QWORD *)v56 + 100)
                                                                         / *(float *)(a4 + 176)))
        LOWORD(v57) = 2;
      else
        LOWORD(v57) = 8;
    }
    else
    {
      v57 = *(unsigned __int8 *)(a1 + 1396);
      if (v57 == 9)
        LOWORD(v57) = 8;
    }
    *v60 = v57;
  }
  else
  {
    *v60 = *(_WORD *)(v51 + 3);
    *(_BYTE *)(a1 + 1458) = *(_BYTE *)v51;
  }
  *(_BYTE *)(a1 + 1465) = (*(_BYTE *)(a1 + 1396) & 0xFE) == 8;
  *(_BYTE *)(a1 + 1348) = 0;
  *(_BYTE *)(a1 + 1344) = *(_BYTE *)(a1 + 557);
  return a1;
}

void sub_19FE5D188(_Unwind_Exception *a1)
{
  _BYTE *v1;
  md::CurvedTextLabelPart::LayoutState *v2;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 1472));
  if (v1[1416])
    v1[1416] = 0;
  md::CurvedTextLabelPart::LayoutState::~LayoutState((md::CurvedTextLabelPart::LayoutState *)(v1 + 1152));
  md::CurvedTextLabelPart::LayoutState::~LayoutState(v2);
  md::TextLabelPart::~TextLabelPart((md::TextLabelPart *)v1);
  _Unwind_Resume(a1);
}

void md::CurvedTextLabelPart::LayoutState::~LayoutState(md::CurvedTextLabelPart::LayoutState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 21);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
    if (!v11)
      return;
  }
  else
  {
LABEL_15:
    v11 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
    if (!v11)
      return;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
}

void md::HorizontalTextLabelPart::pushToRenderModel(md::HorizontalTextLabelPart *this, gdc::Registry **a2, float a3)
{
  int v5;
  uint64_t v6;
  int v7;
  gdc::Registry *v8;
  unint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  char *v14;
  _QWORD v15[3];
  _QWORD *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  md::TextLabelPart::pushToRenderModel(this, a2, a3);
  if (*((_BYTE *)this + 873))
  {
    if (*((_QWORD *)this + 59))
    {
      v5 = *((_DWORD *)this + 122);
      if (v5)
      {
        if (*((float *)this + 197) > 0.0)
        {
          *((_WORD *)this + 555) = *((_WORD *)this + 279);
          *((_WORD *)this + 568) = v5;
          *((_BYTE *)this + 1113) = *((_BYTE *)this + 565) ^ 1;
          *((_BYTE *)this + 1106) = *((_BYTE *)this + 556);
          v6 = *((_QWORD *)this + 4);
          if (*(_BYTE *)(v6 + 78))
            v7 = *(_DWORD *)(v6 + 72);
          else
            v7 = 0;
          *((_DWORD *)this + 282) = v7;
          *((_BYTE *)this + 1105) = *((_BYTE *)this + 809);
          v8 = *a2;
          v9 = gdc::Registry::create(*a2);
          v14 = (char *)this + 1104;
          v10 = (uint64_t *)gdc::Registry::storage<md::LabelRenderDescriptorComponent>((uint64_t)v8);
          gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v10, v9, &v14);
          LOBYTE(v14) = *((_BYTE *)this + 565);
          v11 = v15;
          v15[0] = &off_1E427AA40;
          v15[1] = this;
          v16 = v15;
          v12 = (uint64_t *)gdc::Registry::storage<md::ShadowMeshDescriptor>((uint64_t)v8);
          gdc::ComponentStorageWrapper<md::ShadowMeshDescriptor>::emplace(v12, v9, (uint64_t)&v14);
          if (v16 == v15)
          {
            v13 = 4;
          }
          else
          {
            if (!v16)
              return;
            v13 = 5;
            v11 = v16;
          }
          (*(void (**)(_QWORD *))(*v11 + 8 * v13))(v11);
        }
      }
    }
  }
}

void sub_19FE5D44C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19FE5D458(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _QWORD *a13)
{
  _QWORD *v13;
  uint64_t v15;

  if (a13 == v13)
  {
    v15 = 4;
  }
  else
  {
    if (!a13)
      _Unwind_Resume(exception_object);
    v15 = 5;
    v13 = a13;
  }
  (*(void (**)(_QWORD *))(*v13 + 8 * v15))(v13);
  _Unwind_Resume(exception_object);
}

BOOL md::HorizontalTextLabelPart::isVisuallySimilar(md::HorizontalTextLabelPart *this, const md::LabelPart *a2)
{
  _BOOL8 result;

  result = md::TextLabelPart::isVisuallySimilar(this, a2);
  if (result)
    return *((_DWORD *)this + 287) == *((_DWORD *)a2 + 287) && *((_DWORD *)this + 288) == *((_DWORD *)a2 + 288);
  return result;
}

void md::HorizontalTextLabelPart::populateHoverBounds(_BYTE *a1, uint64_t a2)
{
  float v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  float *v10;
  _DWORD *v11;
  unint64_t v12;
  unint64_t v13;
  _DWORD *v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  _DWORD *v19;
  _DWORD *v20;
  char *v21;
  __int128 v22;

  if (!a1[565])
  {
    v3 = (*(float (**)(_BYTE *))(*(_QWORD *)a1 + 256))(a1);
    v5 = v4;
    v7 = v6;
    v9 = v8;
    v11 = *(_DWORD **)a2;
    v10 = *(float **)(a2 + 8);
    v12 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v10 - *(_QWORD *)a2) >> 2);
    v13 = *(_QWORD *)(a2 + 24);
    if (v13 < v12 + 1)
    {
      v14 = *(_DWORD **)(a2 + 16);
      v15 = (1 << -(char)__clz(v13 + 1));
      if (v13 >= 0xFFFFFFFFFFFFFFFELL)
        v15 = 1;
      if (v15 <= v12 + 1)
        v16 = v12 + 1;
      else
        v16 = v15;
      v17 = (char *)malloc_type_malloc(20 * v16, 0x1000040A86A77D5uLL);
      v18 = v17;
      v19 = *(_DWORD **)a2;
      v20 = *(_DWORD **)(a2 + 8);
      if (*(_DWORD **)a2 != v20)
      {
        v21 = v17;
        do
        {
          v22 = *(_OWORD *)v19;
          *((_DWORD *)v21 + 4) = v19[4];
          *(_OWORD *)v21 = v22;
          v21 += 20;
          v19 += 5;
        }
        while (v19 != v20);
      }
      if (v11 != v14)
        free(*(void **)a2);
      v10 = (float *)&v18[20 * v12];
      *(_QWORD *)a2 = v18;
      *(_QWORD *)(a2 + 8) = v10;
      *(_QWORD *)(a2 + 24) = v16;
    }
    *v10 = v3;
    *((_DWORD *)v10 + 1) = v5;
    *((_DWORD *)v10 + 2) = v7;
    *((_DWORD *)v10 + 3) = v9;
    v10[4] = 0.0;
    *(_QWORD *)(a2 + 8) += 20;
  }
}

uint64_t md::HorizontalTextLabelPart::populateCollisionObjects(float32x2_t *a1, uint64_t a2, float a3, float a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  int8x16_t *v16;
  float v17;
  float32x2_t v18;
  uint64_t v19;
  const float *v20;
  float32x2_t v21;
  double v22;
  int8x16_t v23;
  float32x4_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  float v28;
  unsigned int v29;
  float v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int *v34;
  float32x4_t v35;
  int8x16_t v36;
  unsigned int v37;
  float v38;
  float v39;
  unsigned int v40;
  float v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int *v44;
  float32x4_t v45;
  float32x4_t v46;
  int8x16_t v47;
  float v48;
  unsigned int v49;
  float v50;
  unsigned int v51;
  float v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int *v55;
  float32x4_t v56;
  float32x4_t v57;
  int8x16_t v58;

  v14 = *(_QWORD *)(a2 + 8);
  v15 = *(_QWORD *)(a2 + 16);
  if (v15 - v14 == -208)
  {
    for (; v15 != v14; v15 -= 208)
    {
      free(*(void **)(v15 - 48));
      free(*(void **)(v15 - 40));
      free(*(void **)(v15 - 24));
    }
    *(_QWORD *)(a2 + 16) = v14;
  }
  else
  {
    std::vector<md::CollisionObject,geo::StdAllocator<md::CollisionObject,mdm::Allocator>>::__append((uint64_t *)(a2 + 8), 1uLL);
    v14 = *(_QWORD *)(a2 + 16);
  }
  v16 = (int8x16_t *)(v14 - 208);
  v17 = *(float *)a8;
  *(_DWORD *)(v14 - 192) = *(_DWORD *)a8;
  *(_DWORD *)(v14 - 188) = *(_DWORD *)(a8 + 4);
  *(_BYTE *)(v14 - 12) = fabsf(v17 + -1.0) > 0.000001;
  v18 = a1[29];
  if (v18)
    v19 = a1[31].u32[0];
  else
    v19 = 0;
  v20 = (const float *)&a1[1];
  v21 = vld1_dup_f32(v20);
  *(float32x2_t *)(v14 - 112) = vadd_f32(a1[21], v21);
  v22 = md::CollisionObject::resetWithRects((void **)(v14 - 208), v19);
  if (v19)
  {
    v25 = *(_QWORD *)(v14 - 48);
    v26 = *(_DWORD *)(v14 - 32);
    v27 = *(_QWORD *)&v18 + 8;
    if (a7 == 1)
    {
      LODWORD(v22) = -0.5;
      do
      {
        v38 = *(float *)(v27 - 8);
        v24.i32[0] = *(_DWORD *)(v27 - 4);
        v39 = *(float *)v27;
        v40 = *(_DWORD *)(v27 + 4);
        v27 += 16;
        v41 = v39 - v38;
        *(float *)&v42 = a1[124].f32[1] * -0.5;
        *(float *)&v43 = *(float *)&v42 + v41;
        v44 = (unsigned int *)(v25 + 16 * v26);
        *v44 = v42;
        v44[1] = v24.i32[0];
        v44[2] = v43;
        v44[3] = v40;
        v45.i64[1] = *(_QWORD *)(v14 - 200);
        v45.i64[0] = __PAIR64__(v24.u32[0], v42);
        v46.i64[0] = v16->i64[0];
        v46.i64[1] = __PAIR64__(v40, v43);
        v47 = (int8x16_t)vcgtq_f32(v46, v45);
        v45.i64[1] = v46.i64[1];
        v37 = v26 + 1;
        v23 = vbslq_s8(v47, (int8x16_t)v45, *v16);
        *v16 = v23;
        ++v26;
        --v19;
      }
      while (v19);
    }
    else if (a7 == 2)
    {
      LODWORD(v22) = 0.5;
      do
      {
        v28 = *(float *)(v27 - 8);
        v29 = *(_DWORD *)(v27 - 4);
        v30 = *(float *)v27;
        v31 = *(_DWORD *)(v27 + 4);
        v27 += 16;
        *(float *)&v32 = a1[124].f32[1] * 0.5;
        *(float *)&v33 = *(float *)&v32 + (float)(v28 - v30);
        v34 = (unsigned int *)(v25 + 16 * v26);
        *v34 = v33;
        v34[1] = v29;
        v34[2] = v32;
        v34[3] = v31;
        v35.i64[1] = *(_QWORD *)(v14 - 200);
        v35.i64[0] = __PAIR64__(v29, v33);
        v24.i64[0] = v16->i64[0];
        v24.i64[1] = __PAIR64__(v31, v32);
        v36 = (int8x16_t)vcgtq_f32(v24, v35);
        v35.i64[1] = v24.i64[1];
        v37 = v26 + 1;
        v23 = vbslq_s8(v36, (int8x16_t)v35, *v16);
        *v16 = v23;
        ++v26;
        --v19;
      }
      while (v19);
    }
    else
    {
      LODWORD(v22) = -0.5;
      v23.i32[0] = 0.5;
      do
      {
        v48 = *(float *)(v27 - 8);
        v49 = *(_DWORD *)(v27 - 4);
        v50 = *(float *)v27;
        v51 = *(_DWORD *)(v27 + 4);
        v27 += 16;
        v52 = v50 - v48;
        *(float *)&v53 = v52 * -0.5;
        *(float *)&v54 = v52 * 0.5;
        v55 = (unsigned int *)(v25 + 16 * v26);
        *v55 = v53;
        v55[1] = v49;
        v55[2] = v54;
        v55[3] = v51;
        v56.i64[1] = *(_QWORD *)(v14 - 200);
        v56.i64[0] = __PAIR64__(v49, v53);
        v57.i64[0] = v16->i64[0];
        v57.i64[1] = __PAIR64__(v51, v54);
        v58 = (int8x16_t)vcgtq_f32(v57, v56);
        v56.i64[1] = v57.i64[1];
        v37 = v26 + 1;
        v24 = (float32x4_t)vbslq_s8(v58, (int8x16_t)v56, *v16);
        *v16 = (int8x16_t)v24;
        ++v26;
        --v19;
      }
      while (v19);
    }
    *(_DWORD *)(v14 - 32) = v37;
  }
  *(float *)(v14 - 176) = a3;
  *(float *)(v14 - 172) = a4;
  return md::CollisionObject::setupShapeData(v14 - 208, v22, *(double *)v23.i64, *(double *)v24.i64);
}

uint64_t md::HorizontalTextLabelPart::debugString@<X0>(md::HorizontalTextLabelPart *this@<X0>, int a2@<W1>, _BYTE *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  const char *v16;
  uint64_t v17;
  void **v18;
  uint64_t v19;
  char v20;
  size_t v21;
  unint64_t v22;
  const void **v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  void *__p[2];
  unsigned __int8 v30;
  uint64_t v31;
  _QWORD v32[2];
  _QWORD v33[3];
  uint64_t v34;
  unint64_t v35;
  void *v36[2];
  __int128 v37;
  int v38;
  uint64_t v39[19];

  v6 = MEMORY[0x1E0DE4FE0];
  v7 = MEMORY[0x1E0DE4FE0] + 64;
  v8 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v10 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v39[0] = MEMORY[0x1E0DE4FE0] + 64;
  v31 = v9;
  *(_QWORD *)((char *)&v32[-1] + *(_QWORD *)(v9 - 24)) = v10;
  v11 = (std::ios_base *)((char *)&v32[-1] + *(_QWORD *)(v31 - 24));
  std::ios_base::init(v11, v32);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v31 = v6 + 24;
  v39[0] = v7;
  std::streambuf::basic_streambuf();
  v12 = MEMORY[0x1E0DE4FB8];
  v32[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v36 = 0u;
  v37 = 0u;
  v38 = 16;
  v13 = v31;
  *(_DWORD *)((char *)v32 + *(_QWORD *)(v31 - 24)) = *(_DWORD *)((_BYTE *)v32 + *(_QWORD *)(v31 - 24)) & 0xFFFFFEFB | 4;
  *(_QWORD *)((char *)&v32[1] + *(_QWORD *)(v13 - 24)) = 1;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v31, (uint64_t)"HorizontalText\n", 15);
  if (*((float *)this + 253) != 0.0 || *((float *)this + 254) != 0.0)
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v31, (uint64_t)" LayoutMargin: top=", 19);
    v14 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)" bottom=", 8);
    v15 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v15, (uint64_t)"\n", 1);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v31, (uint64_t)" line wrap=", 11);
  std::ostream::operator<<();
  if (*((_DWORD *)this + 287) == 1)
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v31, (uint64_t)"[Default]", 9);
  if (*((_BYTE *)this + 1144))
    v16 = "(logograms)";
  else
    v16 = "(chars)";
  if (*((_BYTE *)this + 1144))
    v17 = 11;
  else
    v17 = 7;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v31, (uint64_t)v16, v17);
  if (*((_DWORD *)this + 288))
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v31, (uint64_t)" truncateLength=", 16);
    std::ostream::operator<<();
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v31, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v31, (uint64_t)"  ", 2);
  md::TextLabelPart::debugString(this, a2, __p);
  if ((v30 & 0x80u) == 0)
    v18 = __p;
  else
    v18 = (void **)__p[0];
  if ((v30 & 0x80u) == 0)
    v19 = v30;
  else
    v19 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v31, (uint64_t)v18, v19);
  if ((char)v30 < 0)
  {
    operator delete(__p[0]);
    v20 = v38;
    if ((v38 & 0x10) == 0)
      goto LABEL_22;
LABEL_25:
    v22 = *((_QWORD *)&v37 + 1);
    if (*((_QWORD *)&v37 + 1) < v35)
    {
      *((_QWORD *)&v37 + 1) = v35;
      v22 = v35;
    }
    v23 = (const void **)&v34;
    goto LABEL_29;
  }
  v20 = v38;
  if ((v38 & 0x10) != 0)
    goto LABEL_25;
LABEL_22:
  if ((v20 & 8) == 0)
  {
    v21 = 0;
    a3[23] = 0;
    goto LABEL_37;
  }
  v23 = (const void **)v33;
  v22 = v33[2];
LABEL_29:
  v24 = *v23;
  v21 = v22 - (_QWORD)*v23;
  if (v21 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v21 >= 0x17)
  {
    v25 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17)
      v25 = v21 | 7;
    v26 = v25 + 1;
    v27 = operator new(v25 + 1);
    *((_QWORD *)a3 + 1) = v21;
    *((_QWORD *)a3 + 2) = v26 | 0x8000000000000000;
    *(_QWORD *)a3 = v27;
    a3 = v27;
    goto LABEL_36;
  }
  a3[23] = v21;
  if (v21)
LABEL_36:
    memmove(a3, v24, v21);
LABEL_37:
  a3[v21] = 0;
  v31 = *v8;
  *(_QWORD *)((char *)&v32[-1] + *(_QWORD *)(v31 - 24)) = v8[3];
  v32[0] = v12 + 16;
  if (SBYTE7(v37) < 0)
    operator delete(v36[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AF4D64](v39);
}

void sub_19FE5DC40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void md::HorizontalTextLabelPart::populateDebugNode(md::HorizontalTextLabelPart *this, gdc::DebugTreeNode *a2)
{
  char *v4;
  char *ChildNode;
  double v6;
  uint64_t v7;
  int v8;
  int v9;
  _QWORD v10[7];
  int v11;
  _QWORD v12[7];
  int v13;
  _BYTE v14[16];
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  __int128 v20[2];

  md::TextLabelPart::populateDebugNode(this, a2);
  v4 = (char *)operator new(0x19uLL);
  *(_QWORD *)&v20[0] = v4;
  *(__int128 *)((char *)v20 + 8) = xmmword_19FFB3490;
  strcpy(v4, "HorizontalTextLabelPart");
  ChildNode = gdc::DebugTreeNode::createChildNode((uint64_t)a2, v20);
  operator delete(v4);
  BYTE7(v20[1]) = 10;
  strcpy((char *)v20, "Text Alpha");
  v6 = *((float *)this + 138);
  v17 = 0;
  v18 = 0;
  v16 = 0;
  v19 = 2;
  v15 = v6;
  gdc::DebugTreeNode::addProperty((uint64_t)ChildNode, (uint64_t)v20, (uint64_t)v14);
  v7 = *((unsigned __int8 *)this + 1144);
  BYTE7(v20[1]) = 21;
  strcpy((char *)v20, "Use Logogram Wrapping");
  v13 = 0;
  memset(&v12[4], 0, 24);
  v12[0] = v7;
  gdc::DebugTreeNode::addProperty((uint64_t)ChildNode, (uint64_t)v20, (uint64_t)v12);
  if (*((_BYTE *)this + 1144))
    v8 = 8;
  else
    v8 = 18;
  BYTE7(v20[1]) = 16;
  v9 = *((_DWORD *)this + 287);
  strcpy((char *)v20, "Line Wrap Length");
  if (v9 != 1)
    v8 = v9;
  v11 = 0;
  memset(&v10[4], 0, 24);
  v10[0] = v8;
  gdc::DebugTreeNode::addProperty((uint64_t)ChildNode, (uint64_t)v20, (uint64_t)v10);
}

uint64_t md::HorizontalTextLabelPart::shadowColorForSource@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  _BOOL8 v7;
  uint64_t v8;
  uint64_t v9;
  float *v10;
  _BOOL8 v11;
  uint64_t v12;
  uint64_t v13;
  float *v14;

  if ((a2 - 5) <= 1 && *(_BYTE *)(a1 + 1166) && *(_BYTE *)(a1 + 1165))
  {
    *(_DWORD *)a4 = *(_DWORD *)(a1 + 1161);
    result = *a3;
    v7 = *(unsigned __int8 *)(a1 + 864) == 1;
    v8 = *a3 + 280;
    if (*(_BYTE *)(a1 + 864) == 1)
      v9 = 6;
    else
      v9 = 0;
    v10 = *(float **)(v8 + 8 * (*(_BYTE *)(a1 + 864) == 1));
    if (v10)
    {
      if (vabds_f32(v10[2], *(float *)(result + 104)) >= 0.01)
      {
        result = md::LabelStyle::updateStyleGroup<md::LabelTextStyleGroup>(result, (uint64_t)v10, v9);
        v10 = *(float **)(v8 + 8 * v7);
      }
    }
    else
    {
      result = md::LabelStyle::prepareStyleGroup<md::LabelTextStyleGroup>(result, v9);
      v10 = (float *)result;
      *(_QWORD *)(v8 + 8 * v7) = result;
    }
    *(_BYTE *)(a4 + 3) = *(_BYTE *)(*(_QWORD *)v10 + 27);
  }
  else
  {
    result = *a3;
    v11 = *(unsigned __int8 *)(a1 + 864) == 1;
    v12 = *a3 + 280;
    if (*(_BYTE *)(a1 + 864) == 1)
      v13 = 6;
    else
      v13 = 0;
    v14 = *(float **)(v12 + 8 * (*(_BYTE *)(a1 + 864) == 1));
    if (v14)
    {
      if (vabds_f32(v14[2], *(float *)(result + 104)) >= 0.01)
      {
        result = md::LabelStyle::updateStyleGroup<md::LabelTextStyleGroup>(result, (uint64_t)v14, v13);
        v14 = *(float **)(v12 + 8 * v11);
      }
    }
    else
    {
      result = md::LabelStyle::prepareStyleGroup<md::LabelTextStyleGroup>(result, v13);
      v14 = (float *)result;
      *(_QWORD *)(v12 + 8 * v11) = result;
    }
    *(_DWORD *)a4 = *(_DWORD *)(*(_QWORD *)v14 + 24);
  }
  return result;
}

void std::__function::__func<md::HorizontalTextLabelPart::pushToRenderModel(md::LabelRenderModel &,float)::$_0,std::allocator<md::HorizontalTextLabelPart::pushToRenderModel(md::LabelRenderModel &,float)::$_0>,void ()(md::LabelRenderDescriptor const&,md::ShadowMeshData &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::HorizontalTextLabelPart::pushToRenderModel(md::LabelRenderModel &,float)::$_0,std::allocator<md::HorizontalTextLabelPart::pushToRenderModel(md::LabelRenderModel &,float)::$_0>,void ()(md::LabelRenderDescriptor const&,md::ShadowMeshData &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427AA40;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::HorizontalTextLabelPart::pushToRenderModel(md::LabelRenderModel &,float)::$_0,std::allocator<md::HorizontalTextLabelPart::pushToRenderModel(md::LabelRenderModel &,float)::$_0>,void ()(md::LabelRenderDescriptor const&,md::ShadowMeshData &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E427AA40;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::HorizontalTextLabelPart::pushToRenderModel(md::LabelRenderModel &,float)::$_0,std::allocator<md::HorizontalTextLabelPart::pushToRenderModel(md::LabelRenderModel &,float)::$_0>,void ()(md::LabelRenderDescriptor const&,md::ShadowMeshData &)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  float *v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;

  v5 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v5 + 565))
    *(_QWORD *)(a3 + 40) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v5 + 144))(*(_QWORD *)(a1 + 8));
  *(_DWORD *)(a3 + 24) = *(_DWORD *)(v5 + 552);
  *(_BYTE *)(a3 + 32) = *(_BYTE *)(v5 + 826);
  *(_BYTE *)(a3 + 33) = *(_BYTE *)(v5 + 827);
  *(_BYTE *)(a3 + 34) = *(_BYTE *)(v5 + 828);
  *(_BYTE *)(a3 + 35) = *(_BYTE *)(v5 + 829);
  v6 = *(unsigned __int16 *)(a2 + 32);
  v7 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3);
  if (v6 <= v7)
  {
    if (v6 < v7)
      *(_QWORD *)(a3 + 8) = *(_QWORD *)a3 + 56 * *(unsigned __int16 *)(a2 + 32);
  }
  else
  {
    std::vector<md::ShadowMeshQuad>::__append((char **)a3, v6 - v7);
  }
  *(_DWORD *)(a3 + 28) = *(_DWORD *)(v5 + 788);
  v8 = *(_QWORD *)(v5 + 472);
  if (v8)
  {
    v9 = *(unsigned int *)(v5 + 488);
    if ((_DWORD)v9)
    {
      v10 = *(unsigned __int8 *)(v5 + 565);
      v11 = *(_QWORD *)a3 + 28;
      v12 = (float *)(v8 + 8);
      do
      {
        v22 = *v12;
        v21 = v12[1];
        v24 = *(v12 - 2);
        v23 = *(v12 - 1);
        if (*v12 >= v24 && v21 >= v23)
        {
          v26 = (float)(v21 - v23) * 0.1;
          v27 = *(float *)(v5 + 788);
          v28 = v26 - v27;
          v29 = fminf((float)(v22 - v24) * 0.5, v26) - v27;
          v24 = v29 + v24;
          v22 = v22 - v29;
          v23 = v28 + v23;
          v21 = v21 - v28;
        }
        v30 = *(float *)(v5 + 792);
        v31 = *(float *)(v5 + 796);
        if (v10)
        {
          v13 = v24 + v30;
          v14 = v23 - v31;
          v15 = v22 + v30;
          v16 = v21 - v31;
          v17 = v16;
          v18 = v15;
          v19 = v14;
          v20 = v13;
        }
        else
        {
          v32 = *(float *)(*(_QWORD *)(v5 + 32) + 68);
          v33 = 1.1;
          if (!*(_BYTE *)(v5 + 830))
            v33 = 1.0;
          v34 = (float)(*(float *)(v5 + 912) * v33) * v32;
          v35 = v21;
          v36 = v24;
          v37 = v22;
          v38 = v23;
          if (fabsf(v34 + -1.0) > 0.000001)
          {
            v36 = v24 * v34;
            v38 = v23 * v34;
            v37 = v22 * v34;
            v35 = v21 * v34;
          }
          if (*(_BYTE *)(v5 + 508))
          {
            v39 = *(float *)(v5 + 328);
            v40 = *(float *)(v5 + 332);
            v41 = v39 * v36;
            v42 = v40 * v36;
            v43 = v38 * v39;
            v44 = v38 * v40;
            v45 = v41 - v44;
            v46 = v43 + v42;
            v47 = v40 * v37;
            v48 = (float)(v39 * v37) - v44;
            v38 = v43 + (float)(v40 * v37);
            v49 = v35 * v39;
            v50 = v35 * v40;
            v37 = (float)(v39 * v37) - v50;
            v51 = v49 + v47;
            v36 = v41 - v50;
            v35 = v49 + v42;
          }
          else
          {
            v51 = v35;
            v48 = v37;
            v46 = v38;
            v45 = v36;
          }
          v52 = *(float *)(v5 + 832) + (float)((float)(*(float *)(v5 + 544) + v30) * v32);
          v53 = *(float *)(v5 + 836) + (float)((float)(*(float *)(v5 + 548) - v31) * v32);
          v20 = v52 + v45;
          v19 = v53 + v46;
          v18 = v52 + v48;
          v14 = v53 + v38;
          v15 = v52 + v37;
          v17 = v53 + v51;
          v13 = v52 + v36;
          v16 = v53 + v35;
        }
        *(float *)(v11 - 28) = v20;
        *(float *)(v11 - 24) = v19;
        *(_DWORD *)(v11 - 20) = 0;
        *(float *)(v11 - 16) = v18;
        *(float *)(v11 - 12) = v14;
        *(_DWORD *)(v11 - 8) = 0;
        *(float *)(v11 - 4) = v15;
        *(float *)v11 = v17;
        *(_DWORD *)(v11 + 4) = 0;
        *(float *)(v11 + 8) = v13;
        *(float *)(v11 + 12) = v16;
        *(_DWORD *)(v11 + 16) = 0;
        *(float *)(v11 + 20) = (float)(v22 - v24) * 0.5;
        *(float *)(v11 + 24) = (float)(v21 - v23) * 0.5;
        v11 += 56;
        v12 += 4;
        --v9;
      }
      while (v9);
    }
  }
}

void md::HorizontalTextLabelPart::breakLine(int a1, unint64_t a2, _QWORD *a3, unint64_t *a4, uint64_t *a5)
{
  unsigned __int8 v9;
  float *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  BOOL v44;
  __int128 *v45;
  unint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  char *v62;
  char v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  unsigned __int8 v69;
  uint64_t v70;
  unsigned __int8 v71;
  char *v72;
  char *v73;
  uint64_t v74;
  unsigned __int8 v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  _OWORD *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  char *v97;
  __int128 v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  int v111;
  _BOOL4 v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  __int128 v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  __int128 v130;
  _OWORD *v131;
  uint64_t v132;
  _OWORD *v133;
  _OWORD *v134;
  char *v135;
  __int128 v136;
  _OWORD *v137;
  _OWORD *v138;
  uint64_t v139;
  __int128 v140;
  _OWORD *i;
  __int128 v142;
  __int128 v143;
  _OWORD *v144;
  uint64_t v145;
  char *v146;
  char *v147;
  char *v148;
  __int128 v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t *v159;
  unint64_t v160;
  int v161;
  uint64_t v162;
  unint64_t *v163;
  unint64_t *v164;
  unint64_t v165;
  _QWORD *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  uint64_t v176;
  _BYTE v177[32];

  v173 = 0;
  v174 = 0;
  v175 = 0;
  v10 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
  v166 = a3;
  if ((v9 & 1) == 0)
  {
    a3 = v166;
    if (v150)
    {
      v151 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v151, "VectorKitLabels", 0x5ED09DD50000000FLL);
      a3 = v166;
    }
  }
  v11 = mdm::Allocator::instance(void)::alloc;
  v176 = mdm::Allocator::instance(void)::alloc;
  v12 = *a4;
  v13 = a4[1] + *a4;
  v172 = 0;
  v171 = 0;
  v159 = a5;
  v160 = a2;
  v161 = a1;
  if (v12 >= v13)
  {
    v173 = 0;
    if ((a1 & 1) == 0)
    {
      v156 = 0;
      v30 = 0;
      v15 = 0;
      v33 = 1;
      goto LABEL_94;
    }
    v30 = 0;
    goto LABEL_99;
  }
  v14 = 0;
  v15 = 0;
  v162 = 0;
LABEL_4:
  v16 = 0;
  v17 = (char *)(*a3 + 24 * v12 + 20);
  do
  {
    v18 = *v17;
    v17 += 24;
    if ((v18 & 0x28) == 8)
    {
      if (v15 < v14)
      {
        if (v15)
        {
          *(_QWORD *)v15 = v12;
          *(_QWORD *)(v15 + 8) = v16;
          *(_QWORD *)(v15 + 16) = v171;
          *(_BYTE *)(v15 + 24) = v172;
        }
        v15 += 32;
LABEL_29:
        v12 += v16 + 1;
        if (v12 == v13)
        {
          v174 = v15;
          v175 = v14;
          v30 = v162;
          v173 = v162;
          v44 = v162 == v15;
          if ((a1 & 1) != 0)
            goto LABEL_61;
          goto LABEL_71;
        }
        goto LABEL_4;
      }
      v19 = (uint64_t)(v15 - v162) >> 5;
      v20 = v19 + 1;
      if ((unint64_t)(v19 + 1) >> 59)
      {
        v175 = v14;
        abort();
      }
      if ((uint64_t)(v14 - v162) >> 4 > v20)
        v20 = (uint64_t)(v14 - v162) >> 4;
      if (v14 - v162 >= 0x7FFFFFFFFFFFFFE0)
        v21 = 0x7FFFFFFFFFFFFFFLL;
      else
        v21 = v20;
      if (v21)
      {
        v22 = v15;
        v23 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, 32 * v21, 8);
        v24 = v23 + 32 * v19;
        v21 = v23 + 32 * v21;
        v15 = v22;
        if (v23)
        {
          *(_QWORD *)v24 = v12;
          *(_QWORD *)(v24 + 8) = v16;
          *(_QWORD *)(v24 + 16) = v171;
          *(_BYTE *)(v24 + 24) = v172;
        }
        a3 = v166;
      }
      else
      {
        v24 = 32 * v19;
      }
      if (v15 == v162)
      {
        v26 = v15;
        v162 = v24;
        v15 = v24 + 32;
        if (!v26)
          goto LABEL_28;
      }
      else
      {
        v25 = v24;
        v26 = v162;
        do
        {
          v27 = *(_OWORD *)(v15 - 16);
          *(_OWORD *)(v25 - 32) = *(_OWORD *)(v15 - 32);
          *(_OWORD *)(v25 - 16) = v27;
          v25 -= 32;
          v15 -= 32;
        }
        while (v15 != v162);
        v162 = v25;
        v15 = v24 + 32;
        if (!v26)
          goto LABEL_28;
      }
      v28 = v14 - v26;
      v29 = v15;
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v11 + 40))(v11, v26, v28);
      v15 = v29;
      a3 = v166;
LABEL_28:
      v14 = v21;
      goto LABEL_29;
    }
    ++v16;
  }
  while (v12 - v13 + v16);
  v174 = v15;
  v175 = v14;
  v30 = v162;
  v173 = v162;
  v31 = v13 - v12;
  if (v13 != v12)
  {
    if (v15 >= v14)
    {
      v34 = (uint64_t)(v15 - v162) >> 5;
      v35 = v34 + 1;
      if ((unint64_t)(v34 + 1) >> 59)
        abort();
      v36 = v14 - v162;
      if ((uint64_t)(v14 - v162) >> 4 > v35)
        v35 = (uint64_t)(v14 - v162) >> 4;
      if (v36 >= 0x7FFFFFFFFFFFFFE0)
        v37 = 0x7FFFFFFFFFFFFFFLL;
      else
        v37 = v35;
      if (v37)
      {
        v38 = v15;
        v39 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, 32 * v37, 8);
        v40 = v39 + 32 * v34;
        v41 = v39 + 32 * v37;
        v15 = v38;
        if (v39)
        {
          *(_QWORD *)v40 = v12;
          *(_QWORD *)(v40 + 8) = v31;
          *(_QWORD *)(v40 + 16) = v171;
          *(_BYTE *)(v40 + 24) = v172;
        }
        a3 = v166;
      }
      else
      {
        v41 = 0;
        v40 = 32 * v34;
      }
      v32 = v40 + 32;
      if (v15 == v162)
      {
        v42 = v40;
      }
      else
      {
        do
        {
          v42 = v40 - 32;
          v43 = *(_OWORD *)(v15 - 16);
          *(_OWORD *)(v40 - 32) = *(_OWORD *)(v15 - 32);
          *(_OWORD *)(v40 - 16) = v43;
          v15 -= 32;
          v40 -= 32;
        }
        while (v15 != v162);
      }
      v173 = v42;
      v175 = v41;
      if (v162)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v11 + 40))(v11, v162, v36);
        a3 = v166;
      }
      v30 = v42;
    }
    else
    {
      if (v15)
      {
        *(_QWORD *)v15 = v12;
        *(_QWORD *)(v15 + 8) = v31;
        *(_QWORD *)(v15 + 16) = v171;
        *(_BYTE *)(v15 + 24) = v172;
      }
      v32 = v15 + 32;
    }
    v174 = v32;
    v15 = v32;
  }
  v44 = v30 == v15;
  if ((a1 & 1) == 0)
  {
LABEL_71:
    a2 = v160;
    v10 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
    if (!v44)
    {
      v51 = v30;
      a5 = v159;
      goto LABEL_73;
    }
    v33 = 1;
    v156 = v30;
    v15 = v30;
LABEL_94:
    v163 = (unint64_t *)v30;
    v165 = v15;
    if ((v69 & 1) == 0)
    {
      v15 = v165;
      a3 = v166;
      if (v153)
      {
        v154 = operator new();
        *((_QWORD *)v10 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v154, "VectorKitLabels", 0x5ED09DD50000000FLL);
        v15 = v165;
        a3 = v166;
      }
    }
    v70 = 0;
    v157 = v175;
    v158 = *((_QWORD *)v10 + 299);
    v174 = 0;
    v175 = 0;
    if ((v33 & 1) != 0)
    {
LABEL_96:
      v173 = v70;
      if (v163)
        (*(void (**)(uint64_t, unint64_t *, unint64_t))(*(_QWORD *)v158 + 40))(v158, v163, v157 - v156);
      v30 = v70;
      a5 = v159;
      a2 = v160;
      a1 = v161;
      v10 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
      goto LABEL_99;
    }
    v99 = 0;
    v100 = 0;
    v70 = 0;
    v101 = v163;
    while (1)
    {
      v102 = v101[1];
      if (v102)
      {
        v103 = *v101;
        v104 = *v101 + v102;
        v105 = *v101 + 1;
        if (v105 < v104)
        {
          v164 = v101;
          v106 = *v101;
          while (2)
          {
            v108 = *a3 + 24 * v103;
            v103 = v105;
            v109 = *a3 + 24 * v105;
            v110 = *(unsigned __int8 *)(v108 + 20);
            v111 = *(unsigned __int8 *)(v109 + 20);
            if ((v110 & 0x20) != 0 && (v111 & 0x20) != 0)
              goto LABEL_135;
            v112 = (~v111 & 6) == 0;
            if ((v110 & 2) != 0 && (v110 & v112) == 0)
              goto LABEL_135;
            v113 = v103 - v106;
            v177[8] = 0;
            *(_QWORD *)v177 = 0;
            if (v100 < v99)
            {
              if (v100)
              {
                *(_QWORD *)v100 = v106;
                *(_QWORD *)(v100 + 8) = v113;
                *(_QWORD *)(v100 + 16) = *(_QWORD *)v177;
                *(_BYTE *)(v100 + 24) = v177[8];
              }
              v107 = v100 + 32;
LABEL_134:
              v100 = v107;
              v106 = v103;
LABEL_135:
              v105 = v103 + 1;
              if (v103 + 1 == v104)
              {
                v103 = v106;
                v105 = v104;
                v101 = v164;
                goto LABEL_163;
              }
              continue;
            }
            break;
          }
          v114 = (uint64_t)(v100 - v70) >> 5;
          v115 = v114 + 1;
          if ((unint64_t)(v114 + 1) >> 59)
          {
            v174 = v100;
            v175 = v99;
            abort();
          }
          if ((uint64_t)(v99 - v70) >> 4 > v115)
            v115 = (uint64_t)(v99 - v70) >> 4;
          if (v99 - v70 >= 0x7FFFFFFFFFFFFFE0)
            v116 = 0x7FFFFFFFFFFFFFFLL;
          else
            v116 = v115;
          if (v116)
          {
            v117 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v176 + 16))(v176, 32 * v116, 8);
            v118 = v117 + 32 * v114;
            v116 = v117 + 32 * v116;
            if (v117)
            {
              *(_QWORD *)v118 = v106;
              *(_QWORD *)(v118 + 8) = v113;
              *(_QWORD *)(v118 + 16) = 0;
              *(_BYTE *)(v118 + 24) = 0;
            }
            v15 = v165;
            a3 = v166;
          }
          else
          {
            v118 = 32 * v114;
          }
          if (v100 == v70)
          {
            v70 = v118;
            v107 = v118 + 32;
            if (v100)
              goto LABEL_158;
          }
          else
          {
            v119 = v118;
            do
            {
              v120 = *(_OWORD *)(v100 - 16);
              *(_OWORD *)(v119 - 32) = *(_OWORD *)(v100 - 32);
              *(_OWORD *)(v119 - 16) = v120;
              v119 -= 32;
              v100 -= 32;
            }
            while (v100 != v70);
            v100 = v70;
            v70 = v119;
            v107 = v118 + 32;
            if (v100)
            {
LABEL_158:
              (*(void (**)(uint64_t, unint64_t, unint64_t, unint64_t))(*(_QWORD *)v176 + 40))(v176, v100, v99 - v100, v15);
              v15 = v165;
              a3 = v166;
            }
          }
          v99 = v116;
          goto LABEL_134;
        }
LABEL_163:
        v174 = v100;
        v175 = v99;
        v121 = v105 - v103;
        if (v105 > v103)
        {
          v177[8] = 0;
          *(_QWORD *)v177 = 0;
          if (v100 >= v99)
          {
            v122 = (uint64_t)(v100 - v70) >> 5;
            v123 = v122 + 1;
            if ((unint64_t)(v122 + 1) >> 59)
              abort();
            v124 = v99 - v70;
            if ((uint64_t)(v99 - v70) >> 4 > v123)
              v123 = (uint64_t)(v99 - v70) >> 4;
            if (v124 >= 0x7FFFFFFFFFFFFFE0)
              v125 = 0x7FFFFFFFFFFFFFFLL;
            else
              v125 = v123;
            if (v125)
            {
              v126 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v176 + 16))(v176, 32 * v125, 8);
              v127 = v126 + 32 * v122;
              v99 = v126 + 32 * v125;
              if (v126)
              {
                *(_QWORD *)v127 = v103;
                *(_QWORD *)(v127 + 8) = v121;
                *(_QWORD *)(v127 + 16) = 0;
                *(_BYTE *)(v127 + 24) = 0;
              }
              v15 = v165;
              a3 = v166;
            }
            else
            {
              v99 = 0;
              v127 = 32 * v122;
            }
            v128 = v127;
            if (v100 != v70)
            {
              v129 = v127;
              do
              {
                v128 = v129 - 32;
                v130 = *(_OWORD *)(v100 - 16);
                *(_OWORD *)(v129 - 32) = *(_OWORD *)(v100 - 32);
                *(_OWORD *)(v129 - 16) = v130;
                v100 -= 32;
                v129 -= 32;
              }
              while (v100 != v70);
            }
            v100 = v127 + 32;
            v174 = v127 + 32;
            v175 = v99;
            if (v70)
            {
              (*(void (**)(uint64_t, uint64_t, unint64_t, unint64_t))(*(_QWORD *)v176 + 40))(v176, v70, v124, v15);
              v15 = v165;
              a3 = v166;
            }
            v70 = v128;
          }
          else
          {
            if (v100)
            {
              *(_QWORD *)v100 = v103;
              *(_QWORD *)(v100 + 8) = v121;
              *(_QWORD *)(v100 + 16) = *(_QWORD *)v177;
              *(_BYTE *)(v100 + 24) = v177[8];
            }
            v100 += 32;
          }
          v174 = v100;
        }
      }
      v101 += 4;
      if (v101 == (unint64_t *)v15)
        goto LABEL_96;
    }
  }
LABEL_61:
  a2 = v160;
  v10 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
  if (v44 || (v45 = (__int128 *)(v15 - 32), v15 - 32 <= v30))
  {
    v51 = v30;
    a5 = v159;
    if (v30 != v15)
      goto LABEL_73;
  }
  else
  {
    v46 = v30 + 32;
    a5 = v159;
    do
    {
      v47 = *(_OWORD *)(v46 - 16);
      *(_OWORD *)v177 = *(_OWORD *)(v46 - 32);
      *(_OWORD *)&v177[16] = v47;
      v48 = *v45;
      *(_OWORD *)(v46 - 23) = *(__int128 *)((char *)v45 + 9);
      *(_OWORD *)(v46 - 32) = v48;
      v49 = *(_OWORD *)v177;
      *(__int128 *)((char *)v45 + 9) = *(_OWORD *)&v177[9];
      *v45 = v49;
      v45 -= 2;
      v50 = v46 >= (unint64_t)v45;
      v46 += 32;
    }
    while (!v50);
    v30 = v173;
    v15 = v174;
    if (v173 != v174)
    {
      v51 = v173;
LABEL_73:
      v52 = *a3 + 20;
      v53 = *a3 - 4;
      v54 = (uint64_t *)v30;
      do
      {
        v55 = v54[1];
        if (v55)
        {
          v56 = *v54;
          v57 = (char *)(v52 + 24 * *v54);
          v58 = v55 - 1;
          v59 = *v54;
          v60 = v54[1];
          while (1)
          {
            v61 = *v57;
            v57 += 24;
            if ((v61 & 8) == 0)
              break;
            ++v59;
            --v58;
            --v60;
            *v54 = v59;
            v54[1] = v60;
            if (!v60)
              goto LABEL_74;
          }
          v62 = (char *)(v53 + 24 * (v56 + v55));
          do
          {
            v63 = *v62;
            v62 -= 24;
            if ((v63 & 8) == 0)
              break;
            v54[1] = v58--;
          }
          while (v58 != -1);
        }
LABEL_74:
        v54 += 4;
      }
      while (v54 != (uint64_t *)v15);
      if ((a1 & 1) == 0)
      {
        v64 = 0;
        v65 = (uint64_t)(v15 - v51) >> 5;
        v66 = *a3;
        if (v65 <= 1)
          v65 = 1;
        v67 = (_QWORD *)(v30 + 8);
        do
        {
          if (v64)
          {
            v68 = *(v67 - 1);
            if ((*(_BYTE *)(v66 + 24 * v68 + 20) & 2) == 0)
            {
              *(v67 - 4) = *v67 + v68 - *(v67 - 5);
              *v67 = 0;
            }
          }
          ++v64;
          v67 += 4;
        }
        while (v65 != v64);
        v156 = v51;
        v33 = 0;
        goto LABEL_94;
      }
    }
  }
LABEL_99:
  memset(v177, 0, 24);
  {
    v152 = operator new();
    *((_QWORD *)v10 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v152, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  *(_QWORD *)&v177[24] = *((_QWORD *)v10 + 299);
  md::HorizontalTextLabelPart::mergeWordsToLines(&v173, (uint64_t *)v177, a1, a2);
  v72 = *(char **)&v177[8];
  v73 = *(char **)v177;
  v74 = *(_QWORD *)&v177[8] - *(_QWORD *)v177;
  if (*(_QWORD *)&v177[8] - *(_QWORD *)v177 >= 0x21uLL)
  {
    v167 = 0;
    v168 = 0;
    v169 = 0;
    {
      v155 = operator new();
      *((_QWORD *)v10 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v155, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v170 = *((_QWORD *)v10 + 299);
    v76 = a2 - 1;
    if (v76 >= 3)
    {
      v77 = 0;
      v78 = *(_QWORD *)&v177[16];
      v79 = 3;
      do
      {
        while (1)
        {
          v81 = (v76 + v79) >> 1;
          v168 = v77;
          md::HorizontalTextLabelPart::mergeWordsToLines(&v173, &v167, a1, v81);
          v82 = v167;
          v83 = (char *)v168;
          if (v168 - v167 > (unint64_t)(v72 - v73))
            break;
          v167 = (uint64_t)v73;
          v168 = (uint64_t)v72;
          v76 = v81 - 1;
          v80 = v169;
          v169 = v78;
          v77 = (uint64_t)v73;
          v78 = v80;
          v73 = (char *)v82;
          v72 = v83;
          if (v79 > v81 - 1)
            goto LABEL_107;
        }
        v79 = v81 + 1;
        v77 = v167;
      }
      while (v81 + 1 <= v76);
LABEL_107:
      *(_QWORD *)&v177[16] = v78;
      if (v77)
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v170 + 40))(v170, v77, v169 - v77);
    }
    v74 = v72 - v73;
  }
  if (v74 >= 1)
  {
    v84 = v74 >> 5;
    v85 = a5[1];
    v86 = v85 - *a5;
    v87 = (_OWORD *)(*a5 + (v86 & 0xFFFFFFFFFFFFFFE0));
    v88 = a5[2];
    if (v84 > (uint64_t)(v88 - v85) >> 5)
    {
      v89 = v86 >> 5;
      v90 = (v86 >> 5) + v84;
      if (v90 >> 59)
        abort();
      v91 = v88 - *a5;
      if (v91 >> 4 > v90)
        v90 = v91 >> 4;
      if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFE0)
        v92 = 0x7FFFFFFFFFFFFFFLL;
      else
        v92 = v90;
      if (v92)
        v93 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a5[3] + 16))(a5[3], 32 * v92, 8);
      else
        v93 = 0;
      v131 = (_OWORD *)(v93 + 32 * v89);
      v132 = 32 * v84;
      v133 = &v131[2 * v84];
      v134 = v131;
      v135 = v73;
      do
      {
        if (v134)
        {
          v136 = *((_OWORD *)v135 + 1);
          *v134 = *(_OWORD *)v135;
          v134[1] = v136;
        }
        v134 += 2;
        v135 += 32;
        v132 -= 32;
      }
      while (v132);
      v137 = (_OWORD *)*a5;
      if ((_OWORD *)*a5 == v87)
      {
        v139 = v93 + 32 * v89;
      }
      else
      {
        v138 = v87;
        do
        {
          v139 = (uint64_t)(v131 - 2);
          v140 = *(v138 - 1);
          *(v131 - 2) = *(v138 - 2);
          *(v131 - 1) = v140;
          v138 -= 2;
          v131 -= 2;
        }
        while (v138 != v137);
      }
      for (i = (_OWORD *)a5[1]; v87 != i; v133 += 2)
      {
        v142 = *v87;
        v143 = v87[1];
        v87 += 2;
        *v133 = v142;
        v133[1] = v143;
      }
      v144 = (_OWORD *)*a5;
      *a5 = v139;
      a5[1] = (uint64_t)v133;
      v145 = a5[2];
      a5[2] = v93 + 32 * v92;
      if (v144)
        (*(void (**)(uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a5[3] + 40))(a5[3], v144, v145 - (_QWORD)v144);
      goto LABEL_210;
    }
    v94 = (uint64_t)(v85 - (_QWORD)v87) >> 5;
    if (v94 >= v84)
    {
      v95 = &v73[32 * v84];
      v97 = (char *)a5[1];
      goto LABEL_201;
    }
    v95 = &v73[32 * v94];
    if (v95 == v72)
    {
      v97 = (char *)a5[1];
    }
    else
    {
      v96 = &v73[32 * v94];
      v97 = (char *)a5[1];
      do
      {
        if (v97)
        {
          v98 = *((_OWORD *)v96 + 1);
          *(_OWORD *)v97 = *(_OWORD *)v96;
          *((_OWORD *)v97 + 1) = v98;
        }
        v96 += 32;
        v97 += 32;
      }
      while (v96 != v72);
    }
    a5[1] = (uint64_t)v97;
    if ((uint64_t)(v85 - (_QWORD)v87) >= 1)
    {
LABEL_201:
      v146 = (char *)&v87[2 * v84];
      v147 = &v97[-32 * v84];
      v148 = v97;
      if ((unint64_t)v147 < v85)
      {
        v148 = v97;
        do
        {
          if (v148)
          {
            v149 = *((_OWORD *)v147 + 1);
            *(_OWORD *)v148 = *(_OWORD *)v147;
            *((_OWORD *)v148 + 1) = v149;
          }
          v147 += 32;
          v148 += 32;
        }
        while ((unint64_t)v147 < v85);
      }
      a5[1] = (uint64_t)v148;
      if (v97 != v146)
        memmove(&v97[-32 * ((v97 - v146) >> 5)], v87, v97 - v146 - 7);
      if (v95 != v73)
        memmove(v87, v73, v95 - v73 - 7);
    }
  }
LABEL_210:
  if (v73)
    (*(void (**)(_QWORD, char *, _QWORD))(**(_QWORD **)&v177[24] + 40))(*(_QWORD *)&v177[24], v73, *(_QWORD *)&v177[16] - (_QWORD)v73);
  if (v30)
  {
    v174 = v30;
    (*(void (**)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)v176 + 40))(v176, v30, v175 - v30);
  }
}

void sub_19FE5EFF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  uint64_t v28;

  if (!a15)
    _Unwind_Resume(exception_object);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a28 + 40))(a28, a15, v28 - a15);
  _Unwind_Resume(exception_object);
}

uint64_t md::HorizontalTextLabelPart::HorizontalTextLabelPart(uint64_t a1, _QWORD *a2, uint64_t a3, char a4)
{
  uint64_t result;

  result = md::TextLabelPart::TextLabelPart(a1, a2, a4);
  *(_QWORD *)result = off_1E429E820;
  *(_QWORD *)(result + 960) = 0x3F80000000000000;
  *(_OWORD *)(result + 968) = 0u;
  *(_OWORD *)(result + 984) = 0u;
  *(_OWORD *)(result + 1000) = 0u;
  *(_OWORD *)(result + 1011) = 0u;
  *(_WORD *)(result + 1027) = 1;
  *(_BYTE *)(result + 1029) = 0;
  *(_QWORD *)(result + 1032) = 0x3F80000000000000;
  *(_OWORD *)(result + 1040) = 0u;
  *(_OWORD *)(result + 1056) = 0u;
  *(_OWORD *)(result + 1072) = 0u;
  *(_OWORD *)(result + 1083) = 0u;
  *(_WORD *)(result + 1099) = 1;
  *(_BYTE *)(result + 1101) = 0;
  *(_DWORD *)(result + 1104) = 1;
  *(_BYTE *)(result + 1108) = 10;
  *(_DWORD *)(result + 1110) = 16842752;
  *(_BYTE *)(result + 1114) = 0;
  *(_QWORD *)(result + 1120) = 0;
  *(_DWORD *)(result + 1128) = 0;
  *(_WORD *)(result + 1132) = 258;
  *(_BYTE *)(result + 1166) = 0;
  *(_DWORD *)(result + 1141) = 0;
  *(_QWORD *)(result + 1134) = 0;
  *(_QWORD *)(result + 1148) = 0;
  *(_BYTE *)(result + 1156) = 0;
  if (*(_BYTE *)(a3 + 10))
  {
    *(_BYTE *)(result + 1160) = 0;
    if (*(_BYTE *)(a3 + 4))
    {
      *(_DWORD *)(result + 1156) = *(_DWORD *)a3;
      *(_BYTE *)(result + 1160) = 1;
    }
    *(_BYTE *)(result + 1161) = 0;
    *(_BYTE *)(result + 1165) = 0;
    if (*(_BYTE *)(a3 + 9))
    {
      *(_DWORD *)(result + 1161) = *(_DWORD *)(a3 + 5);
      *(_BYTE *)(result + 1165) = 1;
    }
    *(_BYTE *)(result + 1166) = 1;
  }
  *(_BYTE *)(result + 557) = 2;
  *(_BYTE *)(result + 1144) = *(_BYTE *)(**(_QWORD **)(*(_QWORD *)(result + 576) + 16) + 130);
  *(_BYTE *)(result + 1108) = 0;
  *(_BYTE *)(result + 1104) = 2;
  return result;
}

void std::default_delete<md::TextDataStringInfo>::operator()[abi:nn180100](uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 96);
  if (v2)
  {
    *(_QWORD *)(a1 + 104) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 120) + 40))(*(_QWORD *)(a1 + 120), v2, *(_QWORD *)(a1 + 112) - v2);
  }
  if (*(char *)(a1 + 87) < 0)
  {
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 88) + 40))(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 64), 2 * *(_QWORD *)(a1 + 80));
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
    {
LABEL_5:
      if ((*(char *)(a1 + 23) & 0x80000000) == 0)
        goto LABEL_10;
      goto LABEL_9;
    }
  }
  else if ((*(char *)(a1 + 55) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 56) + 40))(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48) & 0x7FFFFFFFFFFFFFFFLL);
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
LABEL_10:
    JUMPOUT(0x1A1AF4E00);
LABEL_9:
  (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *(_QWORD *)a1, *(_QWORD *)(a1 + 16) & 0x7FFFFFFFFFFFFFFFLL);
  goto LABEL_10;
}

uint64_t *std::vector<md::FontGlyphInfo,geo::StdAllocator<md::FontGlyphInfo,mdm::Allocator>>::~vector[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = v3 - 24;
        CGFontRelease(*(CGFontRef *)(v3 - 16));
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v4, a1[2] - v4);
  }
  return a1;
}

void md::BuildingTileData::~BuildingTileData(md::BuildingTileData *this)
{
  md::BuildingTileData::~BuildingTileData(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  void **v19;
  void **v20;
  void *v21;
  void **v22;
  char *v23;
  char *v24;
  char *v25;
  void *v26;
  char *v27;
  char *v28;
  void (**v29)(char *);
  BOOL v30;

  *(_QWORD *)this = &off_1E42917B8;
  *((_QWORD *)this + 79) = &unk_1E42917F8;
  v2 = (void *)*((_QWORD *)this + 120);
  if (v2)
  {
    *((_QWORD *)this + 121) = v2;
    operator delete(v2);
  }
  v3 = *((_QWORD *)this + 117);
  if (v3)
  {
    v4 = *((_QWORD *)this + 118);
    v5 = (void *)*((_QWORD *)this + 117);
    if (v4 != v3)
    {
      do
      {
        v6 = *(std::__shared_weak_count **)(v4 - 8);
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v4 -= 16;
      }
      while (v4 != v3);
      v5 = (void *)*((_QWORD *)this + 117);
    }
    *((_QWORD *)this + 118) = v3;
    operator delete(v5);
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 114);
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = *((_QWORD *)this + 112);
  *((_QWORD *)this + 112) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = *((_QWORD *)this + 109);
  if (v13)
  {
    v14 = *((_QWORD *)this + 110);
    v15 = (void *)*((_QWORD *)this + 109);
    if (v14 != v13)
    {
      do
      {
        v16 = *(std::__shared_weak_count **)(v14 - 8);
        if (v16)
        {
          v17 = (unint64_t *)&v16->__shared_owners_;
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
        v14 -= 16;
      }
      while (v14 != v13);
      v15 = (void *)*((_QWORD *)this + 109);
    }
    *((_QWORD *)this + 110) = v13;
    operator delete(v15);
  }
  v19 = (void **)*((_QWORD *)this + 90);
  if (v19)
  {
    v20 = (void **)*((_QWORD *)this + 91);
    v21 = (void *)*((_QWORD *)this + 90);
    if (v20 != v19)
    {
      v22 = (void **)*((_QWORD *)this + 91);
      do
      {
        v24 = (char *)*(v22 - 3);
        v22 -= 3;
        v23 = v24;
        if (v24)
        {
          v25 = (char *)*(v20 - 2);
          v26 = v23;
          if (v25 != v23)
          {
            v27 = v25 - 24;
            v28 = v25 - 24;
            do
            {
              v29 = *(void (***)(char *))v28;
              v28 -= 24;
              (*v29)(v27);
              v30 = v27 == v23;
              v27 = v28;
            }
            while (!v30);
            v26 = *v22;
          }
          *(v20 - 2) = v23;
          operator delete(v26);
        }
        v20 = v22;
      }
      while (v22 != v19);
      v21 = (void *)*((_QWORD *)this + 90);
    }
    *((_QWORD *)this + 91) = v19;
    operator delete(v21);
  }
  md::MapTileData::~MapTileData(this);
}

void md::SDFGlyphRenderer::~SDFGlyphRenderer(md::SDFGlyphRenderer *this)
{
  md::SDFGlyphRenderer::~SDFGlyphRenderer(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  *(_QWORD *)this = &off_1E4292220;
  v2 = *((_QWORD *)this + 47);
  if (v2)
  {
    *((_QWORD *)this + 48) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 50) + 40))(*((_QWORD *)this + 50), v2, *((_QWORD *)this + 49) - v2);
  }
  v3 = *((_QWORD *)this + 43);
  if (v3)
  {
    *((_QWORD *)this + 44) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 46) + 40))(*((_QWORD *)this + 46), v3, *((_QWORD *)this + 45) - v3);
  }
  v4 = *((_QWORD *)this + 39);
  if (v4)
  {
    *((_QWORD *)this + 40) = v4;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 42) + 40))(*((_QWORD *)this + 42), v4, *((_QWORD *)this + 41) - v4);
  }
  v5 = *((_QWORD *)this + 35);
  if (v5)
  {
    *((_QWORD *)this + 36) = v5;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 38) + 40))(*((_QWORD *)this + 38), v5, *((_QWORD *)this + 37) - v5);
  }
  v6 = *((_QWORD *)this + 31);
  if (v6)
  {
    *((_QWORD *)this + 32) = v6;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 34) + 40))(*((_QWORD *)this + 34), v6, *((_QWORD *)this + 33) - v6);
  }
  v7 = *((_QWORD *)this + 27);
  if (v7)
  {
    *((_QWORD *)this + 28) = v7;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 30) + 40))(*((_QWORD *)this + 30), v7, *((_QWORD *)this + 29) - v7);
  }
  v8 = *((_QWORD *)this + 23);
  if (v8)
  {
    *((_QWORD *)this + 24) = v8;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 26) + 40))(*((_QWORD *)this + 26), v8, *((_QWORD *)this + 25) - v8);
  }
  geo::Cache<md::SDFGlyphRenderer::CTFontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>,md::SDFGlyphRenderer::CTFontKeyHash,geo::LRUPolicy>::~Cache((_QWORD *)this + 14);
  std::mutex::~mutex((std::mutex *)((char *)this + 40));
  v9 = (void *)*((_QWORD *)this + 1);
  if (v9)
  {
    *((_QWORD *)this + 2) = v9;
    operator delete(v9);
  }
}

unint64_t md::SDFGlyphRenderer::debugTotalGlyphImageCount(md::SDFGlyphRenderer *this)
{
  return atomic_load((unint64_t *)this + 53);
}

unint64_t md::SDFGlyphRenderer::debugGlyphImageUsingLargeScaleFactorCount(md::SDFGlyphRenderer *this)
{
  return atomic_load((unint64_t *)this + 54);
}

uint64_t md::SDFGlyphRenderer::ctFontCacheStatistics(md::SDFGlyphRenderer *this)
{
  std::mutex *v2;
  uint64_t v3;

  v2 = (std::mutex *)((char *)this + 40);
  std::mutex::lock((std::mutex *)((char *)this + 40));
  *((_DWORD *)this + 105) = *((_QWORD *)this + 18);
  v3 = *((_QWORD *)this + 51);
  std::mutex::unlock(v2);
  return v3;
}

_QWORD *geo::Cache<md::SDFGlyphRenderer::CTFontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>,md::SDFGlyphRenderer::CTFontKeyHash,geo::LRUPolicy>::~Cache(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  const void *v7;
  const void *v8;
  _QWORD *v9;
  void *v10;
  _QWORD *v12;
  const void *v13;

  if (a1[8])
  {
    v2 = a1 + 6;
    v3 = a1[6];
    v4 = (uint64_t *)a1[7];
    v5 = *v4;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v5;
    a1[8] = 0;
    if (v4 != a1 + 6)
    {
      do
      {
        v6 = (uint64_t *)v4[1];
        v4[6] = (uint64_t)&off_1E42B4950;
        v7 = (const void *)v4[7];
        if (v7)
          CFRelease(v7);
        v4[2] = (uint64_t)&off_1E42B4830;
        v8 = (const void *)v4[3];
        if (v8)
          CFRelease(v8);
        operator delete(v4);
        v4 = v6;
      }
      while (v6 != v2);
    }
  }
  v9 = (_QWORD *)a1[3];
  if (v9)
  {
    do
    {
      v12 = (_QWORD *)*v9;
      v9[2] = &off_1E42B4830;
      v13 = (const void *)v9[3];
      if (v13)
        CFRelease(v13);
      operator delete(v9);
      v9 = v12;
    }
    while (v12);
  }
  v10 = (void *)a1[1];
  a1[1] = 0;
  if (v10)
    operator delete(v10);
  return a1;
}

_QWORD *std::pair<md::SDFGlyphRenderer::CTFontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>::~pair(_QWORD *a1)
{
  const void *v2;
  const void *v3;

  a1[4] = &off_1E42B4950;
  v2 = (const void *)a1[5];
  if (v2)
    CFRelease(v2);
  *a1 = &off_1E42B4830;
  v3 = (const void *)a1[1];
  if (v3)
    CFRelease(v3);
  return a1;
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<md::SDFGlyphRenderer::CTFontKey,std::__list_iterator<std::pair<md::SDFGlyphRenderer::CTFontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::SDFGlyphRenderer::CTFontKey,std::__list_iterator<std::pair<md::SDFGlyphRenderer::CTFontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  _QWORD *v2;
  const void *v3;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v2[2] = &off_1E42B4830;
      v3 = (const void *)v2[3];
      if (v3)
        CFRelease(v3);
    }
    operator delete(v2);
  }
  return a1;
}

void std::__call_once_proxy[abi:nn180100]<std::tuple<md::SDFGlyphRenderer::SDFGlyphRenderer(unsigned int,unsigned int,unsigned int)::$_0 &&>>()
{
  uint64_t v0;
  uint64x2_t v1;
  uint64x2_t v2;
  uint64x2_t v3;
  uint64x2_t v4;
  uint64x2_t v5;
  uint64x2_t v6;
  uint64x2_t v7;
  uint64x2_t v8;
  float32x4_t v9;
  float v10;
  float32x4_t v11;
  float v12;
  float32x4_t v13;
  float32x4_t v14;
  float v15;
  float32x4_t v16;
  float v17;
  float32x4_t v18;
  float32x4_t v19;
  float v20;
  float32x4_t v21;
  float v22;
  float32x4_t v23;
  float32x4_t v24;
  float v25;
  float32x4_t v26;
  float v27;
  float32x4_t v28;
  int64x2_t v29;
  float32x4_t v30;
  float32x4_t v31;
  int64x2_t v32;
  int64x2_t v33;
  int64x2_t v34;
  int64x2_t v35;
  int64x2_t v36;
  int64x2_t v37;
  int64x2_t v38;
  int64x2_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  int8x16x4_t v56;

  v0 = 0;
  v1 = (uint64x2_t)xmmword_19FFB4F00;
  v2 = (uint64x2_t)xmmword_19FFB4F10;
  v3 = (uint64x2_t)xmmword_19FFB4F20;
  v4 = (uint64x2_t)xmmword_19FFB2FD0;
  v5 = (uint64x2_t)xmmword_19FFB2FE0;
  v6 = (uint64x2_t)xmmword_19FFB2FF0;
  v7 = (uint64x2_t)xmmword_19FFB3000;
  v31 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  v8 = (uint64x2_t)xmmword_19FFB2E40;
  v30 = (float32x4_t)vdupq_n_s32(0x437F0000u);
  v29 = vdupq_n_s64(0x10uLL);
  do
  {
    v37 = (int64x2_t)v8;
    v38 = (int64x2_t)v3;
    v32 = (int64x2_t)v7;
    v33 = (int64x2_t)v6;
    v34 = (int64x2_t)v5;
    v35 = (int64x2_t)v4;
    v36 = (int64x2_t)v2;
    v39 = (int64x2_t)v1;
    v40 = vmulq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_u64(v4)), vcvtq_f64_u64(v3)), v31);
    v43 = vmulq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_u64(v2)), vcvtq_f64_u64(v1)), v31);
    v44 = vmulq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_u64(v6)), vcvtq_f64_u64(v5)), v31);
    v48 = vmulq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_u64(v8)), vcvtq_f64_u64(v7)), v31);
    v52 = powf(v48.f32[1], 0.55556);
    v9.f32[0] = powf(v48.f32[0], 0.55556);
    v9.f32[1] = v52;
    v53 = v9;
    v10 = powf(v48.f32[2], 0.55556);
    v11 = v53;
    v11.f32[2] = v10;
    v54 = v11;
    v12 = powf(v48.f32[3], 0.55556);
    v13 = v54;
    v13.f32[3] = v12;
    v55 = v13;
    v48.i32[0] = powf(v44.f32[1], 0.55556);
    v14.f32[0] = powf(v44.f32[0], 0.55556);
    v14.i32[1] = v48.i32[0];
    v49 = v14;
    v15 = powf(v44.f32[2], 0.55556);
    v16 = v49;
    v16.f32[2] = v15;
    v50 = v16;
    v17 = powf(v44.f32[3], 0.55556);
    v18 = v50;
    v18.f32[3] = v17;
    v51 = v18;
    v44.i32[0] = powf(v40.f32[1], 0.55556);
    v19.f32[0] = powf(v40.f32[0], 0.55556);
    v19.i32[1] = v44.i32[0];
    v45 = v19;
    v20 = powf(v40.f32[2], 0.55556);
    v21 = v45;
    v21.f32[2] = v20;
    v46 = v21;
    v22 = powf(v40.f32[3], 0.55556);
    v23 = v46;
    v23.f32[3] = v22;
    v47 = v23;
    v40.i32[0] = powf(v43.f32[1], 0.55556);
    v24.f32[0] = powf(v43.f32[0], 0.55556);
    v24.i32[1] = v40.i32[0];
    v41 = v24;
    v25 = powf(v43.f32[2], 0.55556);
    v26 = v41;
    v26.f32[2] = v25;
    v42 = v26;
    v27 = powf(v43.f32[3], 0.55556);
    v28 = v42;
    v28.f32[3] = v27;
    v56.val[0] = (int8x16_t)vcvtq_u32_f32(vmulq_f32(v55, v30));
    v56.val[1] = (int8x16_t)vcvtq_u32_f32(vmulq_f32(v51, v30));
    v56.val[2] = (int8x16_t)vcvtq_u32_f32(vmulq_f32(v47, v30));
    v56.val[3] = (int8x16_t)vcvtq_u32_f32(vmulq_f32(v28, v30));
    md::SDFGlyphRenderer::_coverageMaskDeGammaTable[v0++] = (__int128)vqtbl4q_s8(v56, (int8x16_t)xmmword_19FFB4E00);
    v6 = (uint64x2_t)vaddq_s64(v33, v29);
    v7 = (uint64x2_t)vaddq_s64(v32, v29);
    v8 = (uint64x2_t)vaddq_s64(v37, v29);
    v5 = (uint64x2_t)vaddq_s64(v34, v29);
    v4 = (uint64x2_t)vaddq_s64(v35, v29);
    v3 = (uint64x2_t)vaddq_s64(v38, v29);
    v2 = (uint64x2_t)vaddq_s64(v36, v29);
    v1 = (uint64x2_t)vaddq_s64(v39, v29);
  }
  while (v0 != 16);
}

void md::TrafficIncidentLabelFeature::~TrafficIncidentLabelFeature(md::TrafficIncidentLabelFeature *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  *(_QWORD *)this = &off_1E42A4608;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 48);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 43);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 43);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 33);
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  md::LabelFeature::~LabelFeature(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  *(_QWORD *)this = &off_1E42A4608;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 48);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 43);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 43);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 33);
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  md::LabelFeature::~LabelFeature(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::TrafficIncidentLabelFeature::labelTypeAtPosition()
{
  return 10;
}

md::BalloonLabelPart *md::TrafficIncidentLabelFeature::newRootPart(uint64_t a1, const md::PartCreationContext *a2, unsigned __int8 *a3, md::LabelStyle *a4)
{
  uint64_t v8;
  uint64_t *v9;
  unsigned __int8 v10;
  md::BalloonLabelPart *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int8 v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t v22;
  void *__p[2];
  uint64_t v24;
  _BYTE v25[24];
  _BYTE *v26;
  const md::PartCreationContext *v27;
  unsigned __int8 *v28;
  md::LabelStyle *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  __int16 v37;
  char v38;
  __int16 v39;
  __int16 v40;
  char v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE v45[24];
  _BYTE *v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  if (a3[1270])
  {
    v8 = *((_QWORD *)a4 + 37);
    if (!v8)
    {
      v9 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>((uint64_t)a4, 0);
      v8 = *v9;
      *((_QWORD *)a4 + 37) = *v9;
    }
    if (*(_BYTE *)(v8 + 88) != 10)
    {
LABEL_11:
      __p[0] = 0;
      __p[1] = 0;
      v24 = 0;
      v26 = 0;
      md::LabelStyle::pointIcon((uint64_t *)&v27, a4, (uint64_t)a2, (uint64_t)a3, (uint64_t *)(a1 + 336), 0, 0, 0, 0, 255, 0, (uint64_t)__p);
      v14 = v26;
      if (v26 == v25)
      {
        v15 = 4;
        v14 = v25;
      }
      else
      {
        if (!v26)
          goto LABEL_16;
        v15 = 5;
      }
      (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_16:
      if (SHIBYTE(v24) < 0)
      {
        operator delete(__p[0]);
        if (v27)
          goto LABEL_18;
      }
      else if (v27)
      {
LABEL_18:
        {
          v22 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v22, "VectorKitLabels", 0x5ED09DD50000000FLL);
        }
        v11 = (md::BalloonLabelPart *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                           + 16))(mdm::Allocator::instance(void)::alloc, 824, 8);
        md::IconLabelPart::IconLabelPart((uint64_t)v11, &v27);
        *v17 = off_1E42A5EA8;
        md::LabelIconStyleMonitor::LabelIconStyleMonitor((uint64_t)(v17 + 96), (uint64_t)a4);
        *((_BYTE *)v11 + 557) = 1;
        *((_BYTE *)v11 + 656) = 1;
        v18 = (std::__shared_weak_count *)v28;
        if (!v28)
          goto LABEL_34;
LABEL_23:
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
        goto LABEL_34;
      }
      v11 = 0;
      v18 = (std::__shared_weak_count *)v28;
      if (!v28)
        goto LABEL_34;
      goto LABEL_23;
    }
  }
  else
  {
    v10 = atomic_load(a3 + 1240);
    if ((v10 & 1) == 0 || !a3[1245])
      goto LABEL_11;
  }
  v33 = 0;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  v44 = 0;
  v46 = 0;
  LOBYTE(v31) = 0;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v27 = a2;
  v28 = a3;
  v29 = a4;
  v30 = a1 + 336;
  v11 = md::PointLabelFeatureBase::newBalloonWithDotPart((md::PointLabelFeatureBase *)&v27, a2);
  v12 = v46;
  if (v46 == v45)
  {
    v13 = 4;
    v12 = v45;
    goto LABEL_28;
  }
  if (v46)
  {
    v13 = 5;
LABEL_28:
    (*(void (**)(void))(*v12 + 8 * v13))();
  }
  if (SHIBYTE(v44) < 0)
    operator delete(v42);
  if (v33 && v31)
  {
    v32 = v31;
    operator delete(v31);
  }
LABEL_34:
  if (v11)
    (*(void (**)(md::BalloonLabelPart *, uint64_t))(*(_QWORD *)v11 + 176))(v11, 1);
  return v11;
}

void sub_19FE60124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  md::IconLabelPart *v18;
  mdm::Allocator *v20;
  uint64_t v21;

  md::IconLabelPart::~IconLabelPart(v18);
  v21 = mdm::Allocator::instance(v20);
  (*(void (**)(uint64_t, md::IconLabelPart *, uint64_t))(*(_QWORD *)v21 + 40))(v21, v18, 824);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_19FE60160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  md::PartCreationContext::~PartCreationContext((md::PartCreationContext *)va);
  _Unwind_Resume(a1);
}

void sub_19FE60174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  md::CustomImageData::~CustomImageData((md::CustomImageData *)va);
  _Unwind_Resume(a1);
}

uint64_t md::TrafficIncidentLabelFeature::externalFeature(md::TrafficIncidentLabelFeature *this)
{
  return *((_QWORD *)this + 32);
}

uint64_t md::TrafficIncidentLabelFeature::externalPointFeature(md::TrafficIncidentLabelFeature *this)
{
  return *((_QWORD *)this + 32);
}

uint64_t md::TrafficIncidentLabelFeature::labelPointWithElevationUpdate(uint64_t a1, uint64_t a2, unsigned int a3, _BYTE *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];

  if (*(float *)(a1 + 328) <= (float)a3)
    return a1 + 272;
  if (a4
    && !*(_BYTE *)(a1 + 242)
    && (*(unsigned int (**)(_BYTE *))(*(_QWORD *)a4 + 64))(a4)
    && a4[169] > *(unsigned __int8 *)(a1 + 243))
  {
    v6 = *(_QWORD *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(a1 + 192));
    v7 = *(_QWORD *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(a1 + 192)) + 8);
    v10[0] = v6;
    v10[1] = v7;
    v10[2] = 0;
    v8 = (*(uint64_t (**)(_BYTE *, _QWORD *, uint64_t))(*(_QWORD *)a4 + 56))(a4, v10, 2);
    if ((v8 & 0xFF00000000) != 0)
    {
      *(_BYTE *)(a1 + 243) = a4[169];
      *(_DWORD *)(a1 + 232) = v8;
    }
  }
  return a1 + 192;
}

id md::TrafficIncidentLabelFeature::incident(id *this)
{
  return this[31];
}

float md::TrafficIncidentLabelFeature::minZoomRank(md::TrafficIncidentLabelFeature *this)
{
  return *((float *)this + 80);
}

float md::TrafficIncidentLabelFeature::maxZoomRank(md::TrafficIncidentLabelFeature *this)
{
  return *((float *)this + 81);
}

uint64_t md::TrafficIncidentLabelFeature::labelFeatureType(md::TrafficIncidentLabelFeature *this)
{
  return 7;
}

uint64_t md::TrafficIncidentLabelFeature::dedupingGroup@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 384);
  *a2 = *(_QWORD *)(this + 376);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

BOOL md::TrafficIncidentLabelFeature::isRouteFeature(id *this)
{
  return objc_msgSend(this[31], "routeRelevance") == 3 || objc_msgSend(this[31], "routeRelevance") == 2;
}

uint64_t md::TrafficIncidentLabelFeature::debugString@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X2>, char a4@<W3>, _QWORD *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::ios_base *v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  const char *v25;
  const char *v26;
  std::string::size_type v27;
  std::string *v28;
  __int128 v29;
  void **v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int v35;
  int v36;
  __int16 v37;
  std::string::size_type v38;
  std::string *v39;
  __int128 v40;
  void **v41;
  uint64_t v42;
  size_t v43;
  unint64_t v44;
  const void **v45;
  const void *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  std::string v52;
  void *__p[2];
  int64_t v54;
  uint64_t v55;
  _QWORD v56[2];
  _QWORD v57[3];
  uint64_t v58;
  unint64_t v59;
  __int128 v60;
  __int128 v61;
  int v62;
  uint64_t v63[21];

  v9 = MEMORY[0x1E0DE4FE0];
  v10 = MEMORY[0x1E0DE4FE0] + 64;
  v11 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v12 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v63[0] = MEMORY[0x1E0DE4FE0] + 64;
  v55 = v11;
  *(_QWORD *)((char *)&v56[-1] + *(_QWORD *)(v11 - 24)) = v12;
  v13 = (std::ios_base *)((char *)&v56[-1] + *(_QWORD *)(v55 - 24));
  std::ios_base::init(v13, v56);
  v13[1].__vftable = 0;
  v13[1].__fmtflags_ = -1;
  v55 = v9 + 24;
  v63[0] = v10;
  std::streambuf::basic_streambuf();
  v14 = MEMORY[0x1E0DE4FB8];
  v56[0] = MEMORY[0x1E0DE4FB8] + 16;
  v60 = 0u;
  v61 = 0u;
  v62 = 16;
  LODWORD(v52.__r_.__value_.__l.__data_) = *a3;
  HIDWORD(v52.__r_.__value_.__r.__words[1]) = -1;
  *(std::string::size_type *)((char *)v52.__r_.__value_.__r.__words + 4) = -1;
  v52.__r_.__value_.__r.__words[2] = 0;
  md::LabelFeature::debugString((_BYTE *)a1, a2, (unsigned int *)&v52, a4, __p);
  if (v54 >= 0)
    v15 = __p;
  else
    v15 = (void **)__p[0];
  if (v54 >= 0)
    v16 = HIBYTE(v54);
  else
    v16 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v55, (uint64_t)v15, v16);
  v17 = a5;
  if (SHIBYTE(v54) < 0)
    operator delete(__p[0]);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v55, (uint64_t)"  TrafficIncident:\n", 19);
  v18 = v55;
  *(_DWORD *)((char *)v56 + *(_QWORD *)(v55 - 24)) = *(_DWORD *)((_BYTE *)v56 + *(_QWORD *)(v55 - 24)) & 0xFFFFFEFB | 4;
  *(_QWORD *)((char *)&v56[1] + *(_QWORD *)(v18 - 24)) = 1;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v55, (uint64_t)" DataElevation=", 15);
  v19 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)" minZoom=", 9);
  v20 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v20, (uint64_t)"\n", 1);
  v21 = *(_QWORD *)(a1 + 80);
  if (v21 && *(_BYTE *)(v21 + 125) && *(unsigned __int8 *)(v21 + 136) != 255)
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v55, (uint64_t)" [style(icon)]", 14);
    v22 = *(_QWORD *)(a1 + 80);
    v23 = *(_QWORD *)(v22 + 296);
    if (!v23)
    {
      v24 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(*(_QWORD *)(a1 + 80), 0);
      v23 = *v24;
      *(_QWORD *)(v22 + 296) = *v24;
    }
    switch(*(_BYTE *)(v23 + 88))
    {
      case 0:
        *((_BYTE *)&v52.__r_.__value_.__s + 23) = 5;
        strcpy((char *)&v52, "Basic");
        break;
      case 1:
        *((_BYTE *)&v52.__r_.__value_.__s + 23) = 9;
        LOWORD(v52.__r_.__value_.__r.__words[1]) = 101;
        v25 = "POICircle";
        goto LABEL_24;
      case 2:
        *((_BYTE *)&v52.__r_.__value_.__s + 23) = 8;
        v27 = 0x6B72616D646E614CLL;
        goto LABEL_22;
      case 3:
        *((_BYTE *)&v52.__r_.__value_.__s + 23) = 19;
        strcpy((char *)&v52, "POISmall_DEPRECATED");
        break;
      case 4:
        *((_BYTE *)&v52.__r_.__value_.__s + 23) = 9;
        LOWORD(v52.__r_.__value_.__r.__words[1]) = 101;
        v25 = "POISquare";
LABEL_24:
        v52.__r_.__value_.__r.__words[0] = *(_QWORD *)v25;
        break;
      case 5:
        v52.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
        *(_OWORD *)&v52.__r_.__value_.__r.__words[1] = xmmword_19FFB3490;
        strcpy(v52.__r_.__value_.__l.__data_, "POIRectangle_DEPRECATED");
        break;
      case 6:
        *((_BYTE *)&v52.__r_.__value_.__s + 23) = 11;
        *(_DWORD *)((char *)v52.__r_.__value_.__r.__words + 7) = 1819044176;
        v26 = "TransitPill";
        goto LABEL_27;
      case 7:
        *((_BYTE *)&v52.__r_.__value_.__s + 23) = 8;
        v27 = 0x494F5069746C754DLL;
LABEL_22:
        v52.__r_.__value_.__r.__words[0] = v27;
        v52.__r_.__value_.__s.__data_[8] = 0;
        break;
      case 8:
        *((_BYTE *)&v52.__r_.__value_.__s + 23) = 10;
        strcpy((char *)&v52, "POIBalloon");
        break;
      case 9:
        *((_BYTE *)&v52.__r_.__value_.__s + 23) = 11;
        *(_DWORD *)((char *)v52.__r_.__value_.__r.__words + 7) = 1852798068;
        v26 = "VenueButton";
LABEL_27:
        v52.__r_.__value_.__r.__words[0] = *(_QWORD *)v26;
        v52.__r_.__value_.__s.__data_[11] = 0;
        break;
      case 0xA:
        *((_BYTE *)&v52.__r_.__value_.__s + 23) = 16;
        strcpy((char *)&v52, "SelectionBalloon");
        break;
      case 0xB:
        *((_BYTE *)&v52.__r_.__value_.__s + 23) = 4;
        strcpy((char *)&v52, "Ring");
        break;
      default:
        *((_BYTE *)&v52.__r_.__value_.__s + 23) = 0;
        v52.__r_.__value_.__s.__data_[0] = 0;
        break;
    }
    v28 = std::string::insert(&v52, 0, " style:", 7uLL);
    v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v54 = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    if (v54 >= 0)
      v30 = __p;
    else
      v30 = (void **)__p[0];
    if (v54 >= 0)
      v31 = HIBYTE(v54);
    else
      v31 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v55, (uint64_t)v30, v31);
    if (SHIBYTE(v54) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_39;
    }
    else if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_39;
    }
    operator delete(v52.__r_.__value_.__l.__data_);
LABEL_39:
    v32 = *(_QWORD *)(a1 + 80);
    v33 = *(_QWORD *)(v32 + 296);
    if (!v33)
    {
      v34 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(v32, 0);
      v33 = *v34;
      *(_QWORD *)(v32 + 296) = *v34;
    }
    v35 = *(unsigned __int8 *)(v33 + 92);
    switch(v35)
    {
      case 0:
        *((_BYTE *)&v52.__r_.__value_.__s + 23) = 7;
        LODWORD(v52.__r_.__value_.__l.__data_) = 1634100548;
        v36 = 1953264993;
        goto LABEL_56;
      case 1:
        *((_BYTE *)&v52.__r_.__value_.__s + 23) = 5;
        strcpy((char *)&v52, "Small");
        break;
      case 2:
        *((_BYTE *)&v52.__r_.__value_.__s + 23) = 5;
        strcpy((char *)&v52, "Large");
        break;
      case 3:
        *((_BYTE *)&v52.__r_.__value_.__s + 23) = 6;
        LODWORD(v52.__r_.__value_.__l.__data_) = 1634554712;
        v37 = 27756;
        goto LABEL_58;
      case 4:
        *((_BYTE *)&v52.__r_.__value_.__s + 23) = 6;
        LODWORD(v52.__r_.__value_.__l.__data_) = 1918979160;
        v37 = 25959;
        goto LABEL_58;
      case 5:
        *((_BYTE *)&v52.__r_.__value_.__s + 23) = 7;
        LODWORD(v52.__r_.__value_.__l.__data_) = 1834178648;
        v36 = 1819042157;
        goto LABEL_56;
      case 6:
        *((_BYTE *)&v52.__r_.__value_.__s + 23) = 7;
        LODWORD(v52.__r_.__value_.__l.__data_) = 1632393304;
        v36 = 1701278305;
LABEL_56:
        *(_DWORD *)((char *)v52.__r_.__value_.__r.__words + 3) = v36;
        v52.__r_.__value_.__s.__data_[7] = 0;
        break;
      case 7:
        *((_BYTE *)&v52.__r_.__value_.__s + 23) = 8;
        v38 = 0x656772614C585858;
        goto LABEL_52;
      case 8:
        *((_BYTE *)&v52.__r_.__value_.__s + 23) = 6;
        LODWORD(v52.__r_.__value_.__l.__data_) = 1768187213;
        v37 = 28021;
LABEL_58:
        WORD2(v52.__r_.__value_.__r.__words[0]) = v37;
        v52.__r_.__value_.__s.__data_[6] = 0;
        break;
      case 9:
        *((_BYTE *)&v52.__r_.__value_.__s + 23) = 8;
        v38 = 0x6C6C616D53585858;
LABEL_52:
        v52.__r_.__value_.__r.__words[0] = v38;
        v52.__r_.__value_.__s.__data_[8] = 0;
        break;
      default:
        if (v35 == 255)
        {
          *((_BYTE *)&v52.__r_.__value_.__s + 23) = 4;
          strcpy((char *)&v52, "None");
        }
        else
        {
          *((_BYTE *)&v52.__r_.__value_.__s + 23) = 0;
          v52.__r_.__value_.__s.__data_[0] = 0;
        }
        break;
    }
    v39 = std::string::insert(&v52, 0, " size:", 6uLL);
    v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
    v54 = v39->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v40;
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    if (v54 >= 0)
      v41 = __p;
    else
      v41 = (void **)__p[0];
    if (v54 >= 0)
      v42 = HIBYTE(v54);
    else
      v42 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v55, (uint64_t)v41, v42);
    if (SHIBYTE(v54) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_68;
    }
    else if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_68:
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v55, (uint64_t)"\n", 1);
      goto LABEL_69;
    }
    operator delete(v52.__r_.__value_.__l.__data_);
    goto LABEL_68;
  }
LABEL_69:
  if ((v62 & 0x10) != 0)
  {
    v44 = *((_QWORD *)&v61 + 1);
    if (*((_QWORD *)&v61 + 1) < v59)
    {
      *((_QWORD *)&v61 + 1) = v59;
      v44 = v59;
    }
    v45 = (const void **)&v58;
  }
  else
  {
    if ((v62 & 8) == 0)
    {
      v43 = 0;
      *((_BYTE *)a5 + 23) = 0;
      goto LABEL_84;
    }
    v45 = (const void **)v57;
    v44 = v57[2];
  }
  v46 = *v45;
  v43 = v44 - (_QWORD)*v45;
  if (v43 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v43 >= 0x17)
  {
    v47 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v43 | 7) != 0x17)
      v47 = v43 | 7;
    v48 = v47 + 1;
    v49 = operator new(v47 + 1);
    a5[1] = v43;
    a5[2] = v48 | 0x8000000000000000;
    *a5 = v49;
    v17 = v49;
    goto LABEL_83;
  }
  *((_BYTE *)a5 + 23) = v43;
  if (v43)
LABEL_83:
    memmove(v17, v46, v43);
LABEL_84:
  *((_BYTE *)v17 + v43) = 0;
  v55 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)&v56[-1] + *(_QWORD *)(v55 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v56[0] = v14 + 16;
  if (SBYTE7(v61) < 0)
    operator delete((void *)v60);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AF4D64](v63);
}

void sub_19FE60AF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  std::ostringstream::~ostringstream((uint64_t)&a24);
  _Unwind_Resume(a1);
}

uint64_t md::TrafficIncidentLabelFeature::restyleFeature(md::TrafficIncidentLabelFeature *this, md::LabelManager *a2)
{
  md::TrafficIncidentLabelFeature::updateStyleAttributes(this, *(md::LabelManager **)(*((_QWORD *)a2 + 21) + 48), 1);
  return md::LabelFeatureStyler::restyleFeature(*((md::LabelFeatureStyler **)a2 + 37), this);
}

void md::TrafficIncidentLabelFeature::populateStyleQueries(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _OWORD *v5;
  _OWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  __int128 v15;
  uint64_t v16[3];
  uint64_t v17;

  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 584))(&v13, a1, 0);
  md::createFeatureAttributeSet((gss::Allocator *)v16, &v13);
  md::LabelStyleCache::styleQueryForFeatureAttributes((unint64_t *)&v15, a3, v16, 0);
  if (v16[0])
  {
    v16[1] = v16[0];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v17 + 40))(v17, v16[0], v16[2] - v16[0]);
  }
  v5 = *(_OWORD **)(a2 + 8);
  if ((unint64_t)v5 >= *(_QWORD *)(a2 + 16))
  {
    v6 = std::vector<std::shared_ptr<md::RouteAnnotationLabelFeature>,geo::StdAllocator<std::shared_ptr<md::RouteAnnotationLabelFeature>,mdm::Allocator>>::__emplace_back_slow_path<std::shared_ptr<md::RouteAnnotationLabelFeature>>(a2, (uint64_t)&v15);
  }
  else
  {
    if (v5)
    {
      *v5 = v15;
      v15 = 0uLL;
    }
    v6 = v5 + 1;
  }
  *(_QWORD *)(a2 + 8) = v6;
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_19FE60CF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void md::TrafficIncidentLabelFeature::styleAttributes(_QWORD *a1@<X0>, void ***a2@<X8>)
{
  unsigned __int8 v4;
  uint64_t v5;
  const FeatureStyleAttributes *v6;
  char *v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  unsigned __int8 v13;
  size_t v14;
  _QWORD *v15;
  uint64_t v16;
  int *v17;
  int v18;
  uint64_t v19;
  int *v20;
  int v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v26 = 0;
  v27 = 0;
  v28 = 0;
  {
    v25 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v25, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v29 = mdm::Allocator::instance(void)::alloc;
  (*(void (**)(_QWORD *, uint64_t *))(*a1 + 544))(a1, &v26);
  v5 = v26;
  if (v26 == v27)
  {
    v22 = a1[43];
    *a2 = (void **)a1[42];
    a2[1] = (void **)v22;
    if (v22)
    {
      v23 = (unint64_t *)(v22 + 8);
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
  }
  else
  {
    v6 = (const FeatureStyleAttributes *)a1[42];
    v7 = (char *)operator new(0x40uLL);
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = 0;
    *(_QWORD *)v7 = &off_1E42DAB40;
    v8 = (void **)(v7 + 24);
    FeatureStyleAttributes::FeatureStyleAttributes((FeatureStyleAttributes *)(v7 + 24), v6);
    v9 = v26;
    if (((v27 - v26) & 0x7FFFFFFF8) != 0)
    {
      v10 = 0;
      v11 = 0;
      v12 = ((unint64_t)(v27 - v26) >> 3);
      v13 = v7[57];
      while (1)
      {
        v14 = v13;
        v15 = *v8;
        if (v13)
          break;
LABEL_5:
        v15[v14] = *(_QWORD *)(v9 + 8 * v10);
        v13 = v7[57] + 1;
        v7[57] = v13;
        ++v10;
        v11 = 1;
        if (v10 == v12)
        {
          v15 = *v8;
          v14 = v13;
LABEL_26:
          qsort(v15, v14, 8uLL, (int (__cdecl *)(const void *, const void *))FeatureStyleAttributes::compareStylePairs);
          goto LABEL_27;
        }
      }
      if (v13 > 0x1Fu)
      {
        do
        {
          v19 = 0;
          v20 = (int *)v15;
          while (1)
          {
            v21 = *v20;
            v20 += 2;
            if (v21 == *(_DWORD *)(v9 + 8 * v10))
              break;
            if (v14 == ++v19)
              goto LABEL_16;
          }
          HIDWORD(v15[v19]) = *(_DWORD *)(v9 + 8 * v10 + 4);
LABEL_16:
          ++v10;
        }
        while (v10 != v12);
      }
      else
      {
        do
        {
          v16 = 0;
          v17 = (int *)v15;
          while (1)
          {
            v18 = *v17;
            v17 += 2;
            if (v18 == *(_DWORD *)(v9 + 8 * v10))
              break;
            if (v14 == ++v16)
              goto LABEL_5;
          }
          HIDWORD(v15[v16]) = *(_DWORD *)(v9 + 8 * v10++ + 4);
        }
        while (v10 != v12);
      }
      if ((v11 & 1) != 0)
        goto LABEL_26;
    }
LABEL_27:
    *a2 = v8;
    a2[1] = (void **)v7;
    v5 = v26;
  }
  if (v5)
  {
    v27 = v5;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v29 + 40))(v29, v5, v28 - v5);
  }
}

void sub_19FE60F94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a11)
  {
    a12 = a11;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a14 + 40))(a14, a11, a13 - a11);
  }
  _Unwind_Resume(a1);
}

double md::TrafficIncidentLabelFeature::routeOffsetInMeters(md::TrafficIncidentLabelFeature *this)
{
  return *((double *)this + 45);
}

uint64_t md::TrafficIncidentLabelFeature::collisionPriority(md::TrafficIncidentLabelFeature *this)
{
  return *((unsigned __int8 *)this + 368);
}

void md::TrafficIncidentLabelFeature::updateStyleAttributes(md::TrafficIncidentLabelFeature *this, md::LabelManager *a2, int a3)
{
  int v5;
  int v6;
  unsigned __int8 v8;
  char *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  char *v35;
  uint64_t *v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  char *v57;
  uint64_t *v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  uint64_t *v83;
  void *v84;
  uint64_t *v85;
  uint64_t *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  char *v99;
  uint64_t *v100;
  uint64_t v101;
  __int128 v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  int v106;
  uint64_t *v107;
  uint64_t v108;
  int v109;
  uint64_t *v110;
  uint64_t *v111;
  uint64_t *v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t *v132;
  uint64_t *v133;
  uint64_t v134;
  __int128 v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t *v146;
  uint64_t *v147;
  uint64_t v148;
  __int128 v149;
  uint64_t v150;
  uint64_t *v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t *v164;
  uint64_t *v165;
  uint64_t *v166;
  uint64_t v167;
  __int128 v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t *v172;
  uint64_t *v173;
  uint64_t *v174;
  uint64_t v175;
  __int128 v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t *v190;
  uint64_t *v191;
  uint64_t *v192;
  uint64_t v193;
  __int128 v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t *v197;
  void *v198;
  void *v199;
  void *v200;
  void *v201;
  uint64_t v202;
  char *v203;
  uint64_t v204;
  unsigned int v205;
  std::__shared_weak_count *v206;
  unint64_t *p_shared_owners;
  void **v208;
  std::__shared_weak_count_vtbl *v209;
  __int128 v210;
  uint64_t v211;
  uint64_t v212;
  char v213;
  uint64_t v214;
  unsigned __int8 v215;
  size_t v216;
  _QWORD *v217;
  uint64_t v218;
  int *v219;
  int v220;
  uint64_t v221;
  int *v222;
  int v223;
  unint64_t v224;
  std::__shared_weak_count *v225;
  unint64_t *v226;
  unint64_t v227;
  unint64_t *v228;
  unint64_t v229;
  uint64_t v230;
  char v231;
  unsigned __int8 v232;
  uint64_t *v233;
  uint64_t *v234;
  uint64_t *v235;
  uint64_t v236;

  v5 = (*(uint64_t (**)(md::LabelManager *))(*(_QWORD *)a2 + 16))(a2);
  v6 = v5;
  if (*((_QWORD *)this + 42))
  {
    if (*((unsigned __int8 *)this + 352) == v5 && a3 == 0)
      return;
  }
  *((_BYTE *)this + 352) = v5;
  v233 = 0;
  v234 = 0;
  v235 = 0;
  {
    v230 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v230, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v236 = mdm::Allocator::instance(void)::alloc;
  v9 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                    + 16))(mdm::Allocator::instance(void)::alloc, 8, 4);
  v10 = (uint64_t)v9;
  v11 = (uint64_t *)(v9 + 8);
  if (v9)
    *(_QWORD *)v9 = 0x300000005;
  v13 = (uint64_t)v233;
  v12 = (uint64_t)v234;
  if (v234 != v233)
  {
    v14 = (char *)v234 - (char *)v233 - 8;
    if (v14 < 0x38)
      goto LABEL_322;
    if ((unint64_t)((char *)v234 - v9) < 0x20)
      goto LABEL_322;
    v15 = (v14 >> 3) + 1;
    v16 = v9 - 16;
    v17 = v234 - 2;
    v18 = v15 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v19 = *(_OWORD *)v17;
      *((_OWORD *)v16 - 1) = *((_OWORD *)v17 - 1);
      *(_OWORD *)v16 = v19;
      v16 -= 32;
      v17 -= 4;
      v18 -= 4;
    }
    while (v18);
    v10 = (uint64_t)&v9[-8 * (v15 & 0x3FFFFFFFFFFFFFFCLL)];
    v12 -= 8 * (v15 & 0x3FFFFFFFFFFFFFFCLL);
    if (v15 != (v15 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_322:
      do
      {
        v20 = *(_QWORD *)(v12 - 8);
        v12 -= 8;
        *(_QWORD *)(v10 - 8) = v20;
        v10 -= 8;
      }
      while (v12 != v13);
    }
    v12 = (uint64_t)v233;
  }
  v21 = v235;
  v233 = (uint64_t *)v10;
  v235 = (uint64_t *)(v9 + 8);
  if (v12)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v236 + 40))(v236, v12, (uint64_t)v21 - v12);
  v234 = v11;
  v22 = (uint64_t)v11 - v10;
  v23 = ((uint64_t)v11 - v10) >> 3;
  v24 = v23 + 1;
  if ((unint64_t)(v23 + 1) >> 61)
    abort();
  if (v22 >> 2 > v24)
    v24 = v22 >> 2;
  if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
    v25 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v25 = v24;
  if (v25)
  {
    v26 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v236 + 16))(v236, 8 * v25, 4);
    v27 = (char *)(v26 + 8 * v23);
    v28 = v26 + 8 * v25;
    if (v26)
      *(_QWORD *)v27 = 0xDE00000006;
  }
  else
  {
    v28 = 0;
    v27 = (char *)(8 * v23);
  }
  v29 = (uint64_t *)(v27 + 8);
  v31 = (uint64_t)v233;
  v30 = (uint64_t)v234;
  if (v234 != v233)
  {
    v32 = (char *)v234 - (char *)v233 - 8;
    if (v32 < 0x38)
    {
      v34 = v234;
    }
    else if ((unint64_t)((char *)v234 - v27) < 0x20)
    {
      v34 = v234;
    }
    else
    {
      v33 = (v32 >> 3) + 1;
      v34 = &v234[-(v33 & 0x3FFFFFFFFFFFFFFCLL)];
      v35 = v27 - 16;
      v36 = v234 - 2;
      v37 = v33 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v38 = *(_OWORD *)v36;
        *((_OWORD *)v35 - 1) = *((_OWORD *)v36 - 1);
        *(_OWORD *)v35 = v38;
        v35 -= 32;
        v36 -= 4;
        v37 -= 4;
      }
      while (v37);
      v27 -= 8 * (v33 & 0x3FFFFFFFFFFFFFFCLL);
      if (v33 == (v33 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_39;
    }
    do
    {
      v39 = *--v34;
      *((_QWORD *)v27 - 1) = v39;
      v27 -= 8;
    }
    while (v34 != (uint64_t *)v31);
LABEL_39:
    v30 = (uint64_t)v233;
  }
  v40 = v235;
  v233 = (uint64_t *)v27;
  v235 = (uint64_t *)v28;
  if (v30)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v236 + 40))(v236, v30, (uint64_t)v40 - v30);
  v234 = v29;
  v41 = objc_msgSend(*((id *)this + 31), "type");
  v42 = v41;
  if (v41 < 0xF)
    v42 = dword_1A007ECE0[v41];
  v43 = v234;
  if (v234 >= v235)
  {
    v45 = v234 - v233;
    v46 = v45 + 1;
    if ((unint64_t)(v45 + 1) >> 61)
      abort();
    v47 = (char *)v235 - (char *)v233;
    if (((char *)v235 - (char *)v233) >> 2 > v46)
      v46 = v47 >> 2;
    if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8)
      v48 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v48 = v46;
    if (v48)
    {
      v49 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v236 + 16))(v236, 8 * v48, 4);
      v50 = (char *)(v49 + 8 * v45);
      v51 = v49 + 8 * v48;
      if (v49)
        *(_QWORD *)v50 = ((v42 << 32) | 0x10002) + 6;
    }
    else
    {
      v51 = 0;
      v50 = (char *)(8 * v45);
    }
    v44 = (uint64_t *)(v50 + 8);
    v53 = (uint64_t)v233;
    v52 = (uint64_t)v234;
    if (v234 == v233)
      goto LABEL_69;
    v54 = (char *)v234 - (char *)v233 - 8;
    if (v54 < 0x38)
    {
      v56 = v234;
    }
    else if ((unint64_t)((char *)v234 - v50) < 0x20)
    {
      v56 = v234;
    }
    else
    {
      v55 = (v54 >> 3) + 1;
      v56 = &v234[-(v55 & 0x3FFFFFFFFFFFFFFCLL)];
      v57 = v50 - 16;
      v58 = v234 - 2;
      v59 = v55 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v60 = *(_OWORD *)v58;
        *((_OWORD *)v57 - 1) = *((_OWORD *)v58 - 1);
        *(_OWORD *)v57 = v60;
        v57 -= 32;
        v58 -= 4;
        v59 -= 4;
      }
      while (v59);
      v50 -= 8 * (v55 & 0x3FFFFFFFFFFFFFFCLL);
      if (v55 == (v55 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_68;
    }
    do
    {
      v61 = *--v56;
      *((_QWORD *)v50 - 1) = v61;
      v50 -= 8;
    }
    while (v56 != (uint64_t *)v53);
LABEL_68:
    v52 = (uint64_t)v233;
LABEL_69:
    v62 = v235;
    v233 = (uint64_t *)v50;
    v235 = (uint64_t *)v51;
    if (v52)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v236 + 40))(v236, v52, (uint64_t)v62 - v52);
    goto LABEL_71;
  }
  if (v234)
    *v234 = ((v42 << 32) | 0x10002) + 6;
  v44 = v43 + 1;
LABEL_71:
  v234 = v44;
  v63 = 0xD0000000ALL;
  switch(objc_msgSend(*((id *)this + 31), "significance"))
  {
    case 0:
      goto LABEL_104;
    case 2:
      v63 = 10;
      goto LABEL_76;
    case 3:
      v63 = 0x10000000ALL;
      goto LABEL_76;
    case 4:
    case 5:
      v63 = 0x20000000ALL;
      goto LABEL_76;
    case 6:
      v63 = 0xE0000000ALL;
      goto LABEL_76;
    default:
LABEL_76:
      v64 = v234;
      if (v234 < v235)
      {
        if (v234)
          *v234 = v63;
        v65 = v64 + 1;
        goto LABEL_103;
      }
      v66 = v234 - v233;
      v67 = v66 + 1;
      if ((unint64_t)(v66 + 1) >> 61)
        abort();
      v68 = (char *)v235 - (char *)v233;
      if (((char *)v235 - (char *)v233) >> 2 > v67)
        v67 = v68 >> 2;
      if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFF8)
        v69 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v69 = v67;
      if (v69)
      {
        v70 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v236 + 16))(v236, 8 * v69, 4);
        v71 = (uint64_t *)(v70 + 8 * v66);
        v72 = v70 + 8 * v69;
        if (v70)
          *v71 = v63;
      }
      else
      {
        v72 = 0;
        v71 = (uint64_t *)(8 * v66);
      }
      v65 = v71 + 1;
      v74 = (uint64_t)v233;
      v73 = (uint64_t)v234;
      if (v234 == v233)
        goto LABEL_101;
      v75 = (char *)v234 - (char *)v233 - 8;
      if (v75 < 0x38)
      {
        v77 = v234;
        do
        {
LABEL_99:
          v82 = *--v77;
          *--v71 = v82;
        }
        while (v77 != (uint64_t *)v74);
        goto LABEL_100;
      }
      if ((unint64_t)((char *)v234 - (char *)v71) < 0x20)
      {
        v77 = v234;
        goto LABEL_99;
      }
      v76 = (v75 >> 3) + 1;
      v77 = &v234[-(v76 & 0x3FFFFFFFFFFFFFFCLL)];
      v78 = v71 - 2;
      v79 = v234 - 2;
      v80 = v76 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v81 = *(_OWORD *)v79;
        *((_OWORD *)v78 - 1) = *((_OWORD *)v79 - 1);
        *(_OWORD *)v78 = v81;
        v78 -= 4;
        v79 -= 4;
        v80 -= 4;
      }
      while (v80);
      v71 -= v76 & 0x3FFFFFFFFFFFFFFCLL;
      if (v76 != (v76 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_99;
LABEL_100:
      v73 = (uint64_t)v233;
LABEL_101:
      v83 = v235;
      v233 = v71;
      v235 = (uint64_t *)v72;
      if (v73)
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v236 + 40))(v236, v73, (uint64_t)v83 - v73);
LABEL_103:
      v234 = v65;
LABEL_104:
      v84 = (void *)*((_QWORD *)this + 31);
      if (v84)
      {
        objc_msgSend(v84, "dataSource");
        if (v231)
        {
          v85 = v234;
          if (v234 < v235)
          {
            if (v234)
              *v234 = (((unint64_t)v232 << 32) | 0x10002) + 89;
            v86 = v85 + 1;
LABEL_134:
            v234 = v86;
            goto LABEL_135;
          }
          v87 = v234 - v233;
          v88 = v87 + 1;
          if ((unint64_t)(v87 + 1) >> 61)
            abort();
          v89 = (char *)v235 - (char *)v233;
          if (((char *)v235 - (char *)v233) >> 2 > v88)
            v88 = v89 >> 2;
          if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFF8)
            v90 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v90 = v88;
          if (v90)
          {
            v91 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v236 + 16))(v236, 8 * v90, 4);
            v92 = (char *)(v91 + 8 * v87);
            v93 = v91 + 8 * v90;
            if (v91)
              *(_QWORD *)v92 = (((unint64_t)v232 << 32) | 0x10002) + 89;
          }
          else
          {
            v93 = 0;
            v92 = (char *)(8 * v87);
          }
          v86 = (uint64_t *)(v92 + 8);
          v95 = (uint64_t)v233;
          v94 = (uint64_t)v234;
          if (v234 == v233)
          {
LABEL_132:
            v233 = (uint64_t *)v92;
            v234 = v86;
            v104 = v235;
            v235 = (uint64_t *)v93;
            if (v94)
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v236 + 40))(v236, v94, (uint64_t)v104 - v94);
            goto LABEL_134;
          }
          v96 = (char *)v234 - (char *)v233 - 8;
          if (v96 < 0x38)
          {
            v98 = v234;
          }
          else if ((unint64_t)((char *)v234 - v92) < 0x20)
          {
            v98 = v234;
          }
          else
          {
            v97 = (v96 >> 3) + 1;
            v98 = &v234[-(v97 & 0x3FFFFFFFFFFFFFFCLL)];
            v99 = v92 - 16;
            v100 = v234 - 2;
            v101 = v97 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v102 = *(_OWORD *)v100;
              *((_OWORD *)v99 - 1) = *((_OWORD *)v100 - 1);
              *(_OWORD *)v99 = v102;
              v99 -= 32;
              v100 -= 4;
              v101 -= 4;
            }
            while (v101);
            v92 -= 8 * (v97 & 0x3FFFFFFFFFFFFFFCLL);
            if (v97 == (v97 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_131;
          }
          do
          {
            v103 = *--v98;
            *((_QWORD *)v92 - 1) = v103;
            v92 -= 8;
          }
          while (v98 != (uint64_t *)v95);
LABEL_131:
          v94 = (uint64_t)v233;
          goto LABEL_132;
        }
      }
LABEL_135:
      v105 = objc_msgSend(*((id *)this + 31), "routeRelevance");
      v106 = objc_msgSend(*((id *)this + 31), "isOnSelectedRoute");
      if ((unint64_t)(v105 - 2) < 2)
      {
        v109 = v106;
        v110 = v234;
        if (v234 < v235)
        {
          if (v234)
            *v234 = 0x100010007;
          v111 = v110 + 1;
          goto LABEL_200;
        }
        v113 = v234 - v233;
        v114 = v113 + 1;
        if ((unint64_t)(v113 + 1) >> 61)
          goto LABEL_316;
        v115 = (char *)v235 - (char *)v233;
        if (((char *)v235 - (char *)v233) >> 2 > v114)
          v114 = v115 >> 2;
        if ((unint64_t)v115 >= 0x7FFFFFFFFFFFFFF8)
          v116 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v116 = v114;
        if (v116)
        {
          v117 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v236 + 16))(v236, 8 * v116, 4);
          v118 = (uint64_t *)(v117 + 8 * v113);
          v119 = v117 + 8 * v116;
          if (v117)
            *v118 = 0x100010007;
        }
        else
        {
          v119 = 0;
          v118 = (uint64_t *)(8 * v113);
        }
        v111 = v118 + 1;
        v128 = (uint64_t)v233;
        v127 = (uint64_t)v234;
        if (v234 == v233)
        {
LABEL_198:
          v233 = v118;
          v234 = v111;
          v151 = v235;
          v235 = (uint64_t *)v119;
          if (v127)
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v236 + 40))(v236, v127, (uint64_t)v151 - v127);
LABEL_200:
          v234 = v111;
          v152 = (unint64_t)v235;
          if (!v109)
            goto LABEL_239;
          v153 = 2 * (v105 != 3);
          if (v111 < v235)
          {
            *v111++ = ((v153 << 32) | 0x10002) + 7;
LABEL_238:
            v234 = v111;
            v152 = (unint64_t)v235;
LABEL_239:
            if ((unint64_t)v111 < v152)
            {
              if (v109)
                v180 = 0x100010002;
              else
                v180 = 65538;
              *v111 = v180;
              v112 = v111 + 1;
              goto LABEL_274;
            }
            v181 = v111 - v233;
            if (!((unint64_t)(v181 + 1) >> 61))
            {
              v182 = v152 - (_QWORD)v233;
              v183 = v182 >> 2;
              if (v182 >> 2 <= (unint64_t)(v181 + 1))
                v183 = v181 + 1;
              if ((unint64_t)v182 >= 0x7FFFFFFFFFFFFFF8)
                v184 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v184 = v183;
              if (v184)
              {
                v185 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v236 + 16))(v236, 8 * v184, 4);
                v125 = (uint64_t *)(v185 + 8 * v181);
                v126 = v185 + 8 * v184;
                if (v185)
                {
                  if (v109)
                    v186 = 0x100010002;
                  else
                    v186 = 65538;
                  *v125 = v186;
                }
              }
              else
              {
                v126 = 0;
                v125 = (uint64_t *)(8 * v181);
              }
              v112 = v125 + 1;
              v187 = (uint64_t)v233;
              v141 = (uint64_t)v234;
              if (v234 == v233)
                goto LABEL_272;
              v188 = (char *)v234 - (char *)v233 - 8;
              if (v188 < 0x38)
              {
                v190 = v234;
              }
              else if ((unint64_t)((char *)v234 - (char *)v125) < 0x20)
              {
                v190 = v234;
              }
              else
              {
                v189 = (v188 >> 3) + 1;
                v190 = &v234[-(v189 & 0x3FFFFFFFFFFFFFFCLL)];
                v191 = v125 - 2;
                v192 = v234 - 2;
                v193 = v189 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v194 = *(_OWORD *)v192;
                  *((_OWORD *)v191 - 1) = *((_OWORD *)v192 - 1);
                  *(_OWORD *)v191 = v194;
                  v191 -= 4;
                  v192 -= 4;
                  v193 -= 4;
                }
                while (v193);
                v125 -= v189 & 0x3FFFFFFFFFFFFFFCLL;
                if (v189 == (v189 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_271;
              }
              do
              {
                v195 = *--v190;
                *--v125 = v195;
              }
              while (v190 != (uint64_t *)v187);
              goto LABEL_271;
            }
            goto LABEL_316;
          }
          v154 = v111 - v233;
          if ((unint64_t)(v154 + 1) >> 61)
            goto LABEL_316;
          v155 = ((char *)v235 - (char *)v233) >> 2;
          if (v155 <= v154 + 1)
            v155 = v154 + 1;
          if ((unint64_t)((char *)v235 - (char *)v233) >= 0x7FFFFFFFFFFFFFF8)
            v156 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v156 = v155;
          if (v156)
          {
            v157 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v236 + 16))(v236, 8 * v156, 4);
            v158 = (uint64_t *)(v157 + 8 * v154);
            v159 = v157 + 8 * v156;
            if (v157)
              *v158 = ((v153 << 32) | 0x10002) + 7;
          }
          else
          {
            v159 = 0;
            v158 = (uint64_t *)(8 * v154);
          }
          v111 = v158 + 1;
          v161 = (uint64_t)v233;
          v160 = (uint64_t)v234;
          if (v234 == v233)
          {
LABEL_236:
            v233 = v158;
            v234 = v111;
            v179 = v235;
            v235 = (uint64_t *)v159;
            if (v160)
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v236 + 40))(v236, v160, (uint64_t)v179 - v160);
            goto LABEL_238;
          }
          v162 = (char *)v234 - (char *)v233 - 8;
          if (v162 < 0x38)
          {
            v164 = v234;
          }
          else if ((unint64_t)((char *)v234 - (char *)v158) < 0x20)
          {
            v164 = v234;
          }
          else
          {
            v163 = (v162 >> 3) + 1;
            v164 = &v234[-(v163 & 0x3FFFFFFFFFFFFFFCLL)];
            v165 = v158 - 2;
            v166 = v234 - 2;
            v167 = v163 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v168 = *(_OWORD *)v166;
              *((_OWORD *)v165 - 1) = *((_OWORD *)v166 - 1);
              *(_OWORD *)v165 = v168;
              v165 -= 4;
              v166 -= 4;
              v167 -= 4;
            }
            while (v167);
            v158 -= v163 & 0x3FFFFFFFFFFFFFFCLL;
            if (v163 == (v163 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_235;
          }
          do
          {
            v178 = *--v164;
            *--v158 = v178;
          }
          while (v164 != (uint64_t *)v161);
LABEL_235:
          v160 = (uint64_t)v233;
          goto LABEL_236;
        }
        v129 = (char *)v234 - (char *)v233 - 8;
        if (v129 < 0x38)
        {
          v131 = v234;
        }
        else if ((unint64_t)((char *)v234 - (char *)v118) < 0x20)
        {
          v131 = v234;
        }
        else
        {
          v130 = (v129 >> 3) + 1;
          v131 = &v234[-(v130 & 0x3FFFFFFFFFFFFFFCLL)];
          v132 = v118 - 2;
          v133 = v234 - 2;
          v134 = v130 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v135 = *(_OWORD *)v133;
            *((_OWORD *)v132 - 1) = *((_OWORD *)v133 - 1);
            *(_OWORD *)v132 = v135;
            v132 -= 4;
            v133 -= 4;
            v134 -= 4;
          }
          while (v134);
          v118 -= v130 & 0x3FFFFFFFFFFFFFFCLL;
          if (v130 == (v130 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_197;
        }
        do
        {
          v150 = *--v131;
          *--v118 = v150;
        }
        while (v131 != (uint64_t *)v128);
LABEL_197:
        v127 = (uint64_t)v233;
        goto LABEL_198;
      }
      if (v105 != 1)
      {
        if (v105 || !v6)
          goto LABEL_275;
        v107 = v234;
        if (v234 < v235)
        {
          if (v234)
          {
            v108 = 65543;
LABEL_149:
            *v107 = v108;
            goto LABEL_150;
          }
          goto LABEL_150;
        }
        v136 = v234 - v233;
        v137 = v136 + 1;
        if (!((unint64_t)(v136 + 1) >> 61))
        {
          v138 = (char *)v235 - (char *)v233;
          if (((char *)v235 - (char *)v233) >> 2 > v137)
            v137 = v138 >> 2;
          if ((unint64_t)v138 >= 0x7FFFFFFFFFFFFFF8)
            v139 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v139 = v137;
          if (v139)
          {
            v140 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v236 + 16))(v236, 8 * v139, 4);
            v125 = (uint64_t *)(v140 + 8 * v136);
            v126 = v140 + 8 * v139;
            if (v140)
              *v125 = 65543;
          }
          else
          {
            v126 = 0;
            v125 = (uint64_t *)(8 * v136);
          }
          v112 = v125 + 1;
          v169 = (uint64_t)v233;
          v141 = (uint64_t)v234;
          if (v234 == v233)
            goto LABEL_272;
          v170 = (char *)v234 - (char *)v233 - 8;
          if (v170 < 0x38)
          {
            v172 = v234;
          }
          else if ((unint64_t)((char *)v234 - (char *)v125) < 0x20)
          {
            v172 = v234;
          }
          else
          {
            v171 = (v170 >> 3) + 1;
            v172 = &v234[-(v171 & 0x3FFFFFFFFFFFFFFCLL)];
            v173 = v125 - 2;
            v174 = v234 - 2;
            v175 = v171 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v176 = *(_OWORD *)v174;
              *((_OWORD *)v173 - 1) = *((_OWORD *)v174 - 1);
              *(_OWORD *)v173 = v176;
              v173 -= 4;
              v174 -= 4;
              v175 -= 4;
            }
            while (v175);
            v125 -= v171 & 0x3FFFFFFFFFFFFFFCLL;
            if (v171 == (v171 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_271;
          }
          do
          {
            v196 = *--v172;
            *--v125 = v196;
          }
          while (v172 != (uint64_t *)v169);
LABEL_271:
          v141 = (uint64_t)v233;
LABEL_272:
          v233 = v125;
          v234 = v112;
          v197 = v235;
          v235 = (uint64_t *)v126;
          if (v141)
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v236 + 40))(v236, v141, (uint64_t)v197 - v141);
          goto LABEL_274;
        }
        goto LABEL_316;
      }
      v107 = v234;
      if (v234 >= v235)
      {
        v120 = v234 - v233;
        v121 = v120 + 1;
        if (!((unint64_t)(v120 + 1) >> 61))
        {
          v122 = (char *)v235 - (char *)v233;
          if (((char *)v235 - (char *)v233) >> 2 > v121)
            v121 = v122 >> 2;
          if ((unint64_t)v122 >= 0x7FFFFFFFFFFFFFF8)
            v123 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v123 = v121;
          if (v123)
          {
            v124 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v236 + 16))(v236, 8 * v123, 4);
            v125 = (uint64_t *)(v124 + 8 * v120);
            v126 = v124 + 8 * v123;
            if (v124)
              *v125 = 0x200010007;
          }
          else
          {
            v126 = 0;
            v125 = (uint64_t *)(8 * v120);
          }
          v112 = v125 + 1;
          v142 = (uint64_t)v233;
          v141 = (uint64_t)v234;
          if (v234 == v233)
            goto LABEL_272;
          v143 = (char *)v234 - (char *)v233 - 8;
          if (v143 < 0x38)
          {
            v145 = v234;
          }
          else if ((unint64_t)((char *)v234 - (char *)v125) < 0x20)
          {
            v145 = v234;
          }
          else
          {
            v144 = (v143 >> 3) + 1;
            v145 = &v234[-(v144 & 0x3FFFFFFFFFFFFFFCLL)];
            v146 = v125 - 2;
            v147 = v234 - 2;
            v148 = v144 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v149 = *(_OWORD *)v147;
              *((_OWORD *)v146 - 1) = *((_OWORD *)v147 - 1);
              *(_OWORD *)v146 = v149;
              v146 -= 4;
              v147 -= 4;
              v148 -= 4;
            }
            while (v148);
            v125 -= v144 & 0x3FFFFFFFFFFFFFFCLL;
            if (v144 == (v144 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_271;
          }
          do
          {
            v177 = *--v145;
            *--v125 = v177;
          }
          while (v145 != (uint64_t *)v142);
          goto LABEL_271;
        }
LABEL_316:
        abort();
      }
      if (v234)
      {
        v108 = 0x200010007;
        goto LABEL_149;
      }
LABEL_150:
      v112 = v107 + 1;
LABEL_274:
      v234 = v112;
LABEL_275:
      objc_msgSend(*((id *)this + 31), "artwork");
      v198 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v198, "icon");
      v199 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v199, "styleAttributes");
      v200 = (void *)objc_claimAutoreleasedReturnValue();

      if (v200)
      {
        v201 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D270A8]), "initWithGEOStyleAttributes:", v200);
        v202 = (uint64_t)v234;
        v203 = (char *)objc_msgSend(v201, "v");
        v204 = objc_msgSend(v201, "v");
        v205 = objc_msgSend(v201, "countAttrs");
        std::vector<GeoCodecsFeatureStylePair,geo::StdAllocator<GeoCodecsFeatureStylePair,mdm::Allocator>>::__insert_with_size[abi:nn180100]<GeoCodecsFeatureStylePair*,GeoCodecsFeatureStylePair*>((uint64_t *)&v233, v202, v203, (char *)(v204 + 8 * v205), (v204 + 8 * v205 - (uint64_t)v203) >> 3);

      }
      v206 = (std::__shared_weak_count *)operator new(0x40uLL);
      v206->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v206->__shared_owners_;
      v206->__shared_weak_owners_ = 0;
      v206->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DAB40;
      v206[1].std::__shared_count = 0u;
      v208 = (void **)&v206[1].__vftable;
      *(_OWORD *)&v206[1].__shared_weak_owners_ = 0u;
      *(_DWORD *)((char *)&v206[2].__vftable + 7) = 0;
      v209 = (std::__shared_weak_count_vtbl *)malloc_type_malloc(0x100uLL, 0x100004000313F17uLL);
      v206[1].__vftable = v209;
      if (v209)
      {
        *(_QWORD *)&v210 = -1;
        *((_QWORD *)&v210 + 1) = -1;
        *(_OWORD *)&v209[5].__get_deleter = v210;
        *(_OWORD *)&v209[6].~__shared_weak_count = v210;
        *(_OWORD *)&v209[4].__on_zero_shared_weak = v210;
        *(_OWORD *)&v209[5].~__shared_weak_count_0 = v210;
        *(_OWORD *)&v209[4].~__shared_weak_count = v210;
        *(_OWORD *)&v209[4].__on_zero_shared = v210;
        *(_OWORD *)&v209[3].~__shared_weak_count_0 = v210;
        *(_OWORD *)&v209[3].__get_deleter = v210;
        *(_OWORD *)&v209[2].__on_zero_shared = v210;
        *(_OWORD *)&v209[2].__on_zero_shared_weak = v210;
        *(_OWORD *)&v209[1].__get_deleter = v210;
        *(_OWORD *)&v209[2].~__shared_weak_count = v210;
        *(_OWORD *)&v209->__on_zero_shared_weak = v210;
        *(_OWORD *)&v209[1].~__shared_weak_count_0 = v210;
        *(_OWORD *)&v209->~__shared_weak_count = v210;
        *(_OWORD *)&v209->__on_zero_shared = v210;
      }
      v211 = (uint64_t)v233;
      if ((((char *)v234 - (char *)v233) & 0x7FFFFFFF8) != 0)
      {
        v212 = 0;
        v213 = 0;
        v214 = ((unint64_t)((char *)v234 - (char *)v233) >> 3);
        v215 = BYTE1(v206[2].__shared_owners_);
        while (1)
        {
          v216 = v215;
          v217 = *v208;
          if (v215)
            break;
LABEL_281:
          v217[v216] = *(_QWORD *)(v211 + 8 * v212);
          v215 = BYTE1(v206[2].__shared_owners_) + 1;
          BYTE1(v206[2].__shared_owners_) = v215;
          ++v212;
          v213 = 1;
          if (v212 == v214)
          {
            v217 = *v208;
            v216 = v215;
LABEL_298:
            qsort(v217, v216, 8uLL, (int (__cdecl *)(const void *, const void *))FeatureStyleAttributes::compareStylePairs);
            goto LABEL_299;
          }
        }
        if (v215 > 0x1Fu)
        {
          do
          {
            v221 = 0;
            v222 = (int *)v217;
            while (1)
            {
              v223 = *v222;
              v222 += 2;
              if (v223 == *(_DWORD *)(v211 + 8 * v212))
                break;
              if (v216 == ++v221)
                goto LABEL_292;
            }
            HIDWORD(v217[v221]) = *(_DWORD *)(v211 + 8 * v212 + 4);
LABEL_292:
            ++v212;
          }
          while (v212 != v214);
        }
        else
        {
          do
          {
            v218 = 0;
            v219 = (int *)v217;
            while (1)
            {
              v220 = *v219;
              v219 += 2;
              if (v220 == *(_DWORD *)(v211 + 8 * v212))
                break;
              if (v216 == ++v218)
                goto LABEL_281;
            }
            HIDWORD(v217[v218]) = *(_DWORD *)(v211 + 8 * v212++ + 4);
          }
          while (v212 != v214);
        }
        if ((v213 & 1) != 0)
          goto LABEL_298;
      }
      do
LABEL_299:
        v224 = __ldxr(p_shared_owners);
      while (__stxr(v224 + 1, p_shared_owners));
      v225 = (std::__shared_weak_count *)*((_QWORD *)this + 43);
      *((_QWORD *)this + 42) = v208;
      *((_QWORD *)this + 43) = v206;
      if (v225)
      {
        v226 = (unint64_t *)&v225->__shared_owners_;
        do
          v227 = __ldaxr(v226);
        while (__stlxr(v227 - 1, v226));
        if (!v227)
        {
          ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
          std::__shared_weak_count::__release_weak(v225);
        }
      }
      if (v206)
      {
        v228 = (unint64_t *)&v206->__shared_owners_;
        do
          v229 = __ldaxr(v228);
        while (__stlxr(v229 - 1, v228));
        if (!v229)
        {
          ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
          std::__shared_weak_count::__release_weak(v206);
        }
      }

      if (v233)
      {
        v234 = v233;
        (*(void (**)(uint64_t, uint64_t *, int64_t))(*(_QWORD *)v236 + 40))(v236, v233, (char *)v235 - (char *)v233);
      }
      return;
  }
}

void sub_19FE62104(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a13)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a16 + 40))(a16, a13, a15 - a13);
  _Unwind_Resume(exception_object);
}

void md::PartCreationContext::~PartCreationContext(md::PartCreationContext *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  void *v5;

  v2 = (char *)this + 128;
  v3 = (char *)*((_QWORD *)this + 19);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  if (*((char *)this + 127) < 0)
  {
    operator delete(*((void **)this + 13));
    if (!*((_BYTE *)this + 56))
      return;
  }
  else if (!*((_BYTE *)this + 56))
  {
    return;
  }
  v5 = (void *)*((_QWORD *)this + 4);
  if (v5)
  {
    *((_QWORD *)this + 5) = v5;
    operator delete(v5);
  }
}

uint64_t md::TrafficIncidentLabelFeature::TrafficIncidentLabelFeature(uint64_t a1, void *a2, _QWORD *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  float v16;
  __int128 v17;
  _QWORD v19[3];

  v5 = a2;
  objc_msgSend(v5, "mercatorPoint");
  v19[0] = v6;
  v19[1] = v7;
  v19[2] = v8;
  md::PointLabelFeatureBase::PointLabelFeatureBase(a1, (uint64_t)v19);
  *(_QWORD *)a1 = &off_1E42A4608;
  v9 = v5;
  *(_QWORD *)(a1 + 248) = v9;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_QWORD *)(a1 + 304) = 0;
  *(_DWORD *)(a1 + 312) = 2139095039;
  *(_WORD *)(a1 + 316) = 0;
  *(_BYTE *)(a1 + 318) = 0;
  objc_msgSend(v9, "minZoom");
  *(_DWORD *)(a1 + 320) = v10;
  objc_msgSend(v9, "maxZoom");
  *(_DWORD *)(a1 + 324) = v11;
  *(_DWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_BYTE *)(a1 + 352) = 0;
  *(_BYTE *)(a1 + 353) = ((objc_msgSend(v9, "type") - 3) & 0xFFFFFFFFFFFFFFFBLL) == 0;
  objc_msgSend(v9, "routeOffsetInMeters");
  *(_QWORD *)(a1 + 360) = v12;
  *(_BYTE *)(a1 + 368) = objc_msgSend(v9, "collisionPriority");
  *(_QWORD *)(a1 + 376) = *a3;
  v13 = a3[1];
  *(_QWORD *)(a1 + 384) = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  if (*(float *)(a1 + 232) == 3.4028e38)
    v16 = 252.0;
  else
    objc_msgSend(v9, "elevationMinZoom");
  *(float *)(a1 + 328) = v16;
  v17 = *(_OWORD *)(a1 + 208);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a1 + 192);
  *(_OWORD *)(a1 + 288) = v17;
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a1 + 224);
  *(_DWORD *)(a1 + 312) = *(_DWORD *)(a1 + 232);
  *(_DWORD *)(a1 + 315) = *(_DWORD *)(a1 + 235);
  if (v16 > 0.0)
  {
    *(_DWORD *)(a1 + 232) = 2139095039;
    *(_BYTE *)(a1 + 242) = 0;
  }

  return a1;
}

void sub_19FE623E8(_Unwind_Exception *a1)
{
  id *v1;
  void *v2;
  uint64_t v3;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v3);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 42));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 32));

  md::LabelFeature::~LabelFeature((md::LabelFeature *)v1);
  _Unwind_Resume(a1);
}

void md::TrafficIncidentLabelFeature::updateStyle(id *this, md::LabelManager *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  std::__shared_weak_count *v11;
  float *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  float v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t *v21;
  unint64_t v22;
  float *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;

  md::TrafficIncidentLabelFeature::updateStyleAttributes((md::TrafficIncidentLabelFeature *)this, *(md::LabelManager **)(*((_QWORD *)a2 + 21) + 48), 0);
  md::LabelFeatureStyler::restyleFeature(*((md::LabelFeatureStyler **)a2 + 37), (md::LabelFeature *)this);
  if (*((float *)this + 80) != 0.0)
    return;
  v4 = *((_QWORD *)a2 + 42);
  v6 = *(_QWORD *)(v4 + 184);
  v5 = *(std::__shared_weak_count **)(v4 + 192);
  v25 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  if (v6 && (v9 = *(_QWORD *)(v6 + 16)) != 0)
  {
    v10 = atomic_load((unsigned __int8 *)(v9 + 2784));
    if ((v10 & 1) == 0)
      std::__assoc_sub_state::wait(*(std::__assoc_sub_state **)(v9 + 2808));
    v12 = *(float **)(v9 + 120);
    v11 = *(std::__shared_weak_count **)(v9 + 128);
    v23 = v12;
    v24 = v11;
    if (v11)
    {
      v13 = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
  }
  else
  {
    v11 = 0;
    v12 = 0;
    v23 = 0;
    v24 = 0;
  }
  v15 = objc_msgSend(this[31], "type", v23, v24, v6);
  if (v12)
  {
    switch(v15)
    {
      case 0:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
        v17 = v12[12];
        goto LABEL_17;
      case 1:
        v17 = v12[13];
        goto LABEL_17;
      case 2:
        v17 = v12[14];
        goto LABEL_17;
      case 3:
        v17 = v12[15];
        goto LABEL_17;
      case 4:
        v17 = v12[16];
        goto LABEL_17;
      case 5:
        v17 = v12[17];
        goto LABEL_17;
      case 6:
        v17 = v12[18];
        goto LABEL_17;
      case 7:
        v17 = v12[19];
        goto LABEL_17;
      case 8:
        v17 = v12[20];
LABEL_17:
        v16 = v17;
        break;
      default:
        break;
    }
  }
  else
  {
    v16 = 0;
  }
  *((float *)this + 80) = (float)v16;
  if (v6)
  {
    if (v11)
    {
      v18 = (unint64_t *)&v11->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      goto LABEL_27;
    }
  }
  else if (v11)
  {
    v20 = (unint64_t *)&v11->__shared_owners_;
    do
      v19 = __ldaxr(v20);
    while (__stlxr(v19 - 1, v20));
LABEL_27:
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v25)
  {
    v21 = (unint64_t *)&v25->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
}

void sub_19FE62618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ggl::BuildingFlat::CompressedMeshPipelineState::CompressedMeshPipelineState(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD *a4)
{
  unsigned __int8 v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v10;
  char v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int16x8_t v18;
  int32x4_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int16x8_t v22;
  int32x4_t v23;
  int8x16_t v24;
  int32x4_t v25;
  int8x16_t v26;
  int32x4_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int16x8_t v37;
  int32x4_t v38;
  int8x16_t v39;
  int16x8_t v40;
  int32x4_t v41;
  int8x16_t v42;
  int32x4_t v43;
  int8x16_t v44;
  int32x4_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int16x8_t v60;
  int32x4_t v61;
  int8x16_t v62;
  int16x8_t v63;
  int32x4_t v64;
  int8x16_t v65;
  int32x4_t v66;
  int8x16_t v67;
  int32x4_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int16x8_t v75;
  int32x4_t v76;
  int8x16_t v77;
  int16x8_t v78;
  int32x4_t v79;
  int8x16_t v80;
  int32x4_t v81;
  int8x16_t v82;
  int32x4_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  _OWORD *v89;
  ggl::BuildingFlatShader *v90;
  unsigned __int8 v91;
  unsigned __int8 v92;
  unsigned __int8 v93;
  unsigned __int8 v94;
  unsigned __int8 v95;
  unsigned __int8 v96;
  _QWORD *v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  _BYTE v101[28];

  if ((v5 & 1) == 0)
  {
    v89 = a4;
    v97 = a2;
    v98 = a3;
    a2 = v97;
    a3 = v98;
    a4 = v89;
    if ((_DWORD)v90)
    {
      if ((v91 & 1) == 0)
      {
        if ((_DWORD)v90)
        {
          if ((v94 & 1) == 0
          {
            if ((v96 & 1) == 0
            {
              ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::attributesReflection(void)::r = (uint64_t)&ggl::PolygonBase::compressedVboReflection;
            }
            ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::attributesReflection(void)::r;
            unk_1ECE43B18 = 1;
          }
          ggl::BuildingFlat::CompressedMeshPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::typedReflection(void)::r;
          unk_1EE57AF20 = &ggl::BuildingFlat::pipelineDataCompressedMeshPipelineDeviceStructs(void)::ref;
          qword_1EE57AF28 = 0;
          if ((v95 & 1) == 0
          {
            ggl::BuildingFlat::pipelineDataCompressedMeshPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            *(_QWORD *)algn_1EE57AF58 = ggl::BuildingFlat::Building::reflection(void)::reflection;
          }
          qword_1EE57AF30 = (uint64_t)&ggl::BuildingFlat::pipelineDataCompressedMeshPipelineConstantStructs(void)::ref;
          unk_1EE57AF38 = xmmword_19FFB35C0;
        }
      }
      ggl::BuildingFlat::CompressedMeshPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::BuildingFlat::CompressedMeshPipelineSetup::typedReflection(void)::ref;
      ggl::BuildingFlatShader::typedReflection(v90);
      qword_1ECE30F58 = (uint64_t)&ggl::BuildingFlatShader::typedReflection(void)::ref;
      if ((v92 & 1) == 0
      {
        ggl::BuildingFlat::pipelineStateCompressedMeshPipelineAttributeStructBinding(void)::attr = 0;
        *(_QWORD *)algn_1EE57AFC8 = 0;
        qword_1EE57AFD0 = (uint64_t)"";
        dword_1EE57AFD8 = 0;
        qword_1EE57AFE0 = (uint64_t)&ggl::BuildingFlat::pipelineStateCompressedMeshPipelineAttributeBinding_0(void)::attr;
        unk_1EE57AFE8 = 1;
      }
      qword_1ECE30F60 = (uint64_t)&ggl::BuildingFlat::pipelineStateCompressedMeshPipelineAttributeStructBinding(void)::attr;
      *(_QWORD *)algn_1ECE30F68 = 1;
      qword_1ECE30F70 = 0;
      unk_1ECE30F78 = 0;
      qword_1ECE30F80 = (uint64_t)&ggl::BuildingFlat::pipelineStateCompressedMeshPipelineDeviceStructBinding(void)::ref;
      unk_1ECE30F88 = 0;
      if ((v93 & 1) == 0
      {
        ggl::BuildingFlat::pipelineStateCompressedMeshPipelineConstantStructBinding(void)::ref = 0;
        *(_QWORD *)algn_1EE57AF68 = 0;
        qword_1EE57AF70 = (uint64_t)"view";
        dword_1EE57AF78 = 3;
        qword_1EE57AF80 = (uint64_t)&ggl::BuildingFlat::pipelineStateCompressedMeshPipelineConstantViewBinding(void)::reflection;
        unk_1EE57AF88 = xmmword_19FFB35A0;
        qword_1EE57AF98 = 1;
        unk_1EE57AFA0 = "building";
        dword_1EE57AFA8 = 3;
        qword_1EE57AFB0 = (uint64_t)&ggl::BuildingFlat::pipelineStateCompressedMeshPipelineConstantBuildingBinding(void)::reflection;
        unk_1EE57AFB8 = 3;
      }
      qword_1ECE30F90 = (uint64_t)&ggl::BuildingFlat::pipelineStateCompressedMeshPipelineConstantStructBinding(void)::ref;
      unk_1ECE30F98 = 2;
      a4 = v89;
      a2 = v97;
      a3 = v98;
    }
  }
  v6 = *a2;
  v7 = (std::__shared_weak_count *)a2[1];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  *(_OWORD *)v101 = *(_OWORD *)a3;
  *(_OWORD *)&v101[12] = *(_OWORD *)(a3 + 12);
  v10 = *(_OWORD *)(a3 + 28);
  v11 = *(_BYTE *)(a3 + 44);
  v99 = *a4;
  v100 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &off_1E42B6760;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = &ggl::BuildingFlat::CompressedMeshPipelineState::typedReflection(void)::ref;
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = v7;
  if (v7)
  {
    v12 = (unint64_t *)&v7->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_BYTE *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 148) = 0;
  *(_QWORD *)(a1 + 140) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 180) = 0;
  *(_QWORD *)(a1 + 196) = 0;
  *(_QWORD *)(a1 + 188) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 228) = 0;
  *(_QWORD *)(a1 + 244) = 0;
  *(_QWORD *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v99;
  *(_OWORD *)(a1 + 272) = v100;
  *(_BYTE *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0x100000001;
  *(_BYTE *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v101;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v101[12];
  *(_OWORD *)(a1 + 92) = v10;
  *(_BYTE *)(a1 + 108) = v11;
  if (v7)
  {
    v14 = (unint64_t *)&v7->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_BYTE *)(a1 + 305) = 0;
  v16 = *(int8x16_t *)(a1 + 320);
  v17 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  v18 = vmovl_high_s8(v17);
  v19 = vmovl_s16(*(int16x4_t *)v18.i8);
  v20.i64[0] = v19.u32[0];
  v20.i64[1] = v19.u32[1];
  v21 = v20;
  v22 = vmovl_s8(*(int8x8_t *)v17.i8);
  v23 = vmovl_s16(*(int16x4_t *)v22.i8);
  *(_QWORD *)a1 = &off_1E42B6078;
  v20.i64[0] = v23.u32[0];
  v20.i64[1] = v23.u32[1];
  v24 = v20;
  v25 = vmovl_high_s16(v18);
  v20.i64[0] = v25.u32[0];
  v20.i64[1] = v25.u32[1];
  v26 = v20;
  v27 = vmovl_high_s16(v22);
  v20.i64[0] = v27.u32[0];
  v20.i64[1] = v27.u32[1];
  v28 = v20;
  v20.i64[0] = v19.u32[2];
  v20.i64[1] = v19.u32[3];
  v29 = v20;
  v20.i64[0] = v23.u32[2];
  v20.i64[1] = v23.u32[3];
  v30 = v20;
  v20.i64[0] = v25.u32[2];
  v20.i64[1] = v25.u32[3];
  v31 = v20;
  v20.i64[0] = v27.u32[2];
  v20.i64[1] = v27.u32[3];
  v32 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v20);
  v33 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v31);
  v34 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v30);
  v35 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v26);
  v36 = vceqzq_s8(v16);
  v37 = vmovl_high_s8(v36);
  v38 = vmovl_s16(*(int16x4_t *)v37.i8);
  v20.i64[0] = v38.u32[0];
  v20.i64[1] = v38.u32[1];
  v39 = v20;
  v40 = vmovl_s8(*(int8x8_t *)v36.i8);
  v41 = vmovl_s16(*(int16x4_t *)v40.i8);
  v20.i64[0] = v41.u32[0];
  v20.i64[1] = v41.u32[1];
  v42 = v20;
  v43 = vmovl_high_s16(v37);
  v20.i64[0] = v43.u32[0];
  v20.i64[1] = v43.u32[1];
  v44 = v20;
  v45 = vmovl_high_s16(v40);
  v20.i64[0] = v45.u32[0];
  v20.i64[1] = v45.u32[1];
  v46 = v20;
  v20.i64[0] = v38.u32[2];
  v20.i64[1] = v38.u32[3];
  v47 = v20;
  v20.i64[0] = v41.u32[2];
  v20.i64[1] = v41.u32[3];
  v48 = v20;
  v20.i64[0] = v43.u32[2];
  v20.i64[1] = v43.u32[3];
  v49 = v20;
  v20.i64[0] = v45.u32[2];
  v20.i64[1] = v45.u32[3];
  v50 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v49);
  v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v39), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v21));
  v52 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v42), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v24));
  v53 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v44), v35);
  v54 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v46), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v28));
  v55 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v47), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v29));
  v56 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v48), v34);
  v57 = vorrq_s8(v50, v33);
  v58 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v20), v32);
  v59 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  v60 = vmovl_s8(*(int8x8_t *)v59.i8);
  v61 = vmovl_high_s16(v60);
  v20.i64[0] = v61.i32[2];
  v20.i64[1] = v61.i32[3];
  v62 = v20;
  v63 = vmovl_high_s8(v59);
  v64 = vmovl_high_s16(v63);
  v20.i64[0] = v64.i32[2];
  v20.i64[1] = v64.i32[3];
  v65 = v20;
  v66 = vmovl_s16(*(int16x4_t *)v60.i8);
  v20.i64[0] = v66.i32[2];
  v20.i64[1] = v66.i32[3];
  v67 = v20;
  v68 = vmovl_s16(*(int16x4_t *)v63.i8);
  v20.i64[0] = v68.i32[2];
  v20.i64[1] = v68.i32[3];
  v69 = v20;
  v20.i64[0] = v61.i32[0];
  v20.i64[1] = v61.i32[1];
  v70 = v20;
  v20.i64[0] = v64.i32[0];
  v20.i64[1] = v64.i32[1];
  v71 = v20;
  v20.i64[0] = v66.i32[0];
  v20.i64[1] = v66.i32[1];
  v72 = v20;
  v20.i64[0] = v68.i32[0];
  v20.i64[1] = v68.i32[1];
  v73 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v20);
  v74 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  v75 = vmovl_high_s8(v74);
  v76 = vmovl_s16(*(int16x4_t *)v75.i8);
  v20.i64[0] = v76.i32[0];
  v20.i64[1] = v76.i32[1];
  v77 = v20;
  v78 = vmovl_s8(*(int8x8_t *)v74.i8);
  v79 = vmovl_s16(*(int16x4_t *)v78.i8);
  v20.i64[0] = v79.i32[0];
  v20.i64[1] = v79.i32[1];
  v80 = v20;
  v81 = vmovl_high_s16(v75);
  v20.i64[0] = v81.i32[0];
  v20.i64[1] = v81.i32[1];
  v82 = v20;
  v83 = vmovl_high_s16(v78);
  v20.i64[0] = v83.i32[0];
  v20.i64[1] = v83.i32[1];
  v84 = v20;
  v20.i64[0] = v76.i32[2];
  v20.i64[1] = v76.i32[3];
  v85 = v20;
  v20.i64[0] = v79.i32[2];
  v20.i64[1] = v79.i32[3];
  v86 = v20;
  v20.i64[0] = v81.i32[2];
  v20.i64[1] = v81.i32[3];
  v87 = v20;
  v20.i64[0] = v83.i32[2];
  v20.i64[1] = v83.i32[3];
  *(_QWORD *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v80), vbicq_s8((int8x16_t)xmmword_19FFB3170, v72)), v52), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v77), v73), v51)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v84), vbicq_s8((int8x16_t)xmmword_19FFB3190, v70)), v54), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v82), vbicq_s8((int8x16_t)xmmword_19FFB3180, v71)),
                                               v53))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v86), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v67)), v56), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v85), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v69)), v55)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v20), vbicq_s8((int8x16_t)xmmword_19FFB31D0, v62)), v58), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31F0, v87),
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31C0, v65)),
                                               v57)))));
  *(_BYTE *)(a1 + 288) = 1;
  return a1;
}

void ggl::BuildingFlat::CompressedMeshPipelineSetup::~CompressedMeshPipelineSetup(ggl::BuildingFlat::CompressedMeshPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::BuildingFlat::CompressedMeshPipelineSetup::constantDataIsEnabled(ggl::BuildingFlat::CompressedMeshPipelineSetup *this, unint64_t a2)
{
  return a2 < 2;
}

uint64_t ggl::BuildingFlat::CompressedMeshPipelineSetup::textureIsEnabled(ggl::BuildingFlat::CompressedMeshPipelineSetup *this)
{
  return 0;
}

void ggl::SolidRibbon::PipelineSetup::~PipelineSetup(ggl::SolidRibbon::PipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::SolidRibbon::PipelineSetup::PipelineSetup(ggl::SolidRibbon::PipelineSetup *this)
{
  unsigned __int8 v2;
  uint64_t result;
  unsigned __int8 v4;
  unsigned __int8 v5;
  unsigned __int8 v6;

  if ((v2 & 1) == 0
  {
    if ((v4 & 1) == 0
    {
      if ((v6 & 1) == 0
      {
        ggl::MeshTyped<ggl::Ribbon::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::Ribbon::defaultVboReflection;
      }
      ggl::MeshTyped<ggl::Ribbon::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::Ribbon::DefaultVbo>::attributesReflection(void)::r;
      unk_1ECE43DB8 = 1;
    }
    ggl::SolidRibbon::PipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::Ribbon::DefaultVbo>::typedReflection(void)::r;
    *(_QWORD *)algn_1ECE38DC8 = &ggl::SolidRibbon::pipelineDataPipelineDeviceStructs(void)::ref;
    qword_1ECE38DD0 = 0;
    if ((v5 & 1) == 0
    {
      ggl::SolidRibbon::pipelineDataPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
      unk_1ECE38E00 = ggl::Tile::Transform::reflection(void)::reflection;
      qword_1ECE38E08 = (uint64_t)ggl::OffsetRibbon::Style::reflection(void)::reflection;
      unk_1ECE38E10 = ggl::Tile::Clipping::reflection(void)::reflection;
    }
    qword_1ECE38DD8 = (uint64_t)&ggl::SolidRibbon::pipelineDataPipelineConstantStructs(void)::ref;
    unk_1ECE38DE0 = xmmword_19FFB2F50;
  }
  result = ggl::PipelineSetup::PipelineSetup((uint64_t)this, (uint64_t)&ggl::SolidRibbon::PipelineSetup::typedReflection(void)::ref);
  *(_QWORD *)this = &off_1E42B5E58;
  return result;
}

double *md::mun::lookAtOrientation(double *a1, double *a2, double *a3)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v21[9];

  v3 = a2[1];
  v4 = *a3 - *a2;
  v5 = a3[1] - v3;
  v6 = a2[2];
  v7 = a3[2] - v6;
  v8 = 1.0 / sqrt(v4 * v4 + v5 * v5 + v7 * v7);
  v9 = 1.0 / sqrt(*a2 * *a2 + v3 * v3 + v6 * v6);
  v10 = v9 * *a2;
  v11 = v9 * v3;
  v12 = v9 * v6;
  v13 = -(v4 * v8);
  v14 = -(v5 * v8);
  v15 = -(v7 * v8);
  v16 = -(v14 * v12 - v15 * v11);
  v17 = -(v15 * v10 - v13 * v12);
  v18 = -(v13 * v11 - v14 * v10);
  v19 = 1.0 / sqrt(v16 * v16 + v17 * v17 + v18 * v18);
  v21[0] = v19 * v16;
  v21[1] = v19 * v17;
  v21[2] = v19 * v18;
  v21[3] = v10;
  v21[4] = v11;
  v21[5] = v12;
  v21[6] = -(v19 * v18 * v11 - v19 * v17 * v12);
  v21[7] = -(v19 * v16 * v12 - v19 * v18 * v10);
  v21[8] = -(v19 * v17 * v10 - v19 * v16 * v11);
  return gm::quaternionFromRotationMatrix<double>(a1, v21);
}

BOOL md::mun::isPhotoVisible(const double *a1, uint64_t a2)
{
  double v3;
  double v4;
  double v5;
  double v13;
  double v14;
  double v15;
  double v16;
  unint64_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float *v22;
  uint64_t v23;
  BOOL v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  float32x4_t v28;
  uint64_t v29;
  uint64_t v30;
  float32x4_t v31;
  _BYTE v33[32];
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  _OWORD v56[6];
  _OWORD v57[6];
  double v58[3];
  float64x2_t v59;
  double v60;
  double v61;
  uint64_t v62;
  uint64_t v63;
  __int32 v64;
  uint64_t v65;
  __int32 v66;

  v3 = (float)-*(float *)(a2 + 32);
  v4 = *(float *)(a2 + 36);
  v5 = *(double *)(a2 + 8);
  _D4 = *(double *)(a2 + 16);
  _Q5 = vcvtq_f64_f32(vneg_f32(*(float32x2_t *)(a2 + 24)));
  __asm { FMLA            D7, D4, V5.D[1] }
  v13 = -(_D4 * _Q5.f64[0] - *(double *)a2 * v3);
  v14 = vmlad_n_f64(-(*(double *)a2 * _Q5.f64[1]), v5, _Q5.f64[0]);
  v15 = _D7 + _D7;
  v16 = v13 + v13;
  _D17 = v14 + v14;
  __asm { FMLA            D3, D17, V5.D[1] }
  v58[0] = -(_D3 - v16 * v3);
  v58[1] = vmlad_n_f64(-(v5 + v15 * v3 + v16 * v4), _D17, _Q5.f64[0]);
  v59 = _Q5;
  v58[2] = -(vmlad_n_f64(-(v15 * _Q5.f64[1] - _D4), v16, _Q5.f64[0]) + _D17 * v4);
  v60 = v3;
  v61 = v4;
  geo::Frustum<double>::transformed((double *)v33, a1, (uint64_t)v58);
  v19 = 0;
  v56[0] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)v33), *(float64x2_t *)&v33[16]);
  v56[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v34), v35);
  v56[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v36), v37);
  v56[3] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v38), v39);
  v56[4] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v40), v41);
  v56[5] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v42), v43);
  v20 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v44), v45);
  v21.i32[3] = HIDWORD(v55.f64[1]);
  v57[0] = v20;
  v57[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v46), v47);
  v57[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v48), v49);
  v57[3] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v50), v51);
  v22 = (float *)(a2 + 44);
  v23 = a2 + 140;
  v24 = 1;
  v25 = &unk_1A007EBB0;
  v57[4] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v52), v53);
  v57[5] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v54), v55);
  do
  {
    v26 = 12 * *(v25 - 1);
    v27 = 12 * *v25;
    v21.i64[0] = *(_QWORD *)((char *)v57 + v27);
    v21.i32[2] = *(_DWORD *)((char *)v57 + v27 + 8);
    *(_QWORD *)v33 = *(_QWORD *)((char *)v57 + v26);
    v20.i64[0] = *(_QWORD *)v33;
    v20.i32[2] = *(_DWORD *)((char *)v57 + v26 + 8);
    v28 = vsubq_f32(v21, v20);
    *(_DWORD *)&v33[8] = v20.i32[2];
    *(_DWORD *)&v33[20] = v28.i32[2];
    *(_QWORD *)&v33[12] = v28.i64[0];
    v29 = v23 + v26;
    v28.i64[0] = *(_QWORD *)(v23 + v27);
    v28.i32[2] = *(_DWORD *)(v23 + v27 + 8);
    v30 = *(_QWORD *)v29;
    v62 = 0;
    v63 = v30;
    v20.i64[0] = v30;
    v20.i32[2] = *(_DWORD *)(v29 + 8);
    v31 = vsubq_f32(v28, v20);
    v64 = v20.i32[2];
    v66 = v31.i32[2];
    v65 = v31.i64[0];
    if ((geo::Intersect::internal::intersection<float,std::array<gm::Plane3<float>,6ul>>((float *)v56, (float *)&v63, (float *)&v62 + 1, (float *)&v62) & 1) != 0)break;
    if ((geo::Intersect::internal::intersection<float,std::array<gm::Plane3<float>,6ul>>(v22, (float *)v33, (float *)&v62 + 1, (float *)&v62) & 1) != 0)break;
    v25 += 2;
    v24 = v19++ < 0xB;
  }
  while (v19 != 12);
  return v24;
}

uint64_t geo::Intersect::internal::intersection<float,std::array<gm::Plane3<float>,6ul>>(float *a1, float *a2, float *a3, float *a4)
{
  float v4;
  float v5;
  float v6;
  float v7;
  BOOL v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  BOOL v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  BOOL v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  BOOL v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  BOOL v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  BOOL v45;
  float v46;

  *a3 = 0.0;
  *a4 = 1.0;
  v4 = a1[1];
  v5 = a1[2];
  v6 = (float)((float)(a2[3] * *a1) + (float)(a2[4] * v4)) + (float)(a2[5] * v5);
  v7 = (float)((float)(a1[3] + (float)(*a2 * *a1)) + (float)(a2[1] * v4)) + (float)(a2[2] * v5);
  v8 = v6 <= 0.0;
  if (v6 == 0.0)
  {
    v9 = 1.0;
    if (v7 < 0.0)
      return 0;
  }
  else
  {
    v10 = (float)-v7 / v6;
    if (v8)
    {
      v9 = fminf(v10, 1.0);
      *a4 = v9;
    }
    else
    {
      *a3 = fmaxf(*a3, v10);
      v9 = *a4;
    }
  }
  v11 = *a3;
  if (*a3 <= v9)
  {
    v12 = a1[4];
    v13 = a1[5];
    v14 = a1[6];
    v15 = (float)((float)(a2[3] * v12) + (float)(a2[4] * v13)) + (float)(a2[5] * v14);
    v16 = (float)((float)(a1[7] + (float)(*a2 * v12)) + (float)(a2[1] * v13)) + (float)(a2[2] * v14);
    v17 = v15 <= 0.0;
    if (v15 == 0.0)
    {
      if (v16 < 0.0)
        return 0;
    }
    else
    {
      v18 = (float)-v16 / v15;
      if (v17)
      {
        v9 = fminf(v18, v9);
        *a4 = v9;
        v11 = *a3;
        if (*a3 > v9)
          return 0;
LABEL_16:
        v19 = a1[8];
        v20 = a1[9];
        v21 = a1[10];
        v22 = (float)((float)(a2[3] * v19) + (float)(a2[4] * v20)) + (float)(a2[5] * v21);
        v23 = (float)((float)(a1[11] + (float)(*a2 * v19)) + (float)(a2[1] * v20)) + (float)(a2[2] * v21);
        v24 = v22 <= 0.0;
        if (v22 == 0.0)
        {
          if (v23 < 0.0)
            return 0;
        }
        else
        {
          v25 = (float)-v23 / v22;
          if (v24)
          {
            v9 = fminf(v25, v9);
            *a4 = v9;
            v11 = *a3;
            if (*a3 > v9)
              return 0;
            goto LABEL_24;
          }
          v11 = fmaxf(v11, v25);
          *a3 = v11;
          v9 = *a4;
        }
        if (v11 > v9)
          return 0;
LABEL_24:
        v26 = a1[12];
        v27 = a1[13];
        v28 = a1[14];
        v29 = (float)((float)(a2[3] * v26) + (float)(a2[4] * v27)) + (float)(a2[5] * v28);
        v30 = (float)((float)(a1[15] + (float)(*a2 * v26)) + (float)(a2[1] * v27)) + (float)(a2[2] * v28);
        v31 = v29 <= 0.0;
        if (v29 == 0.0)
        {
          if (v30 < 0.0)
            return 0;
        }
        else
        {
          v32 = (float)-v30 / v29;
          if (v31)
          {
            v9 = fminf(v32, v9);
            *a4 = v9;
            v11 = *a3;
          }
          else
          {
            v11 = fmaxf(v11, v32);
            *a3 = v11;
            v9 = *a4;
          }
        }
        if (v11 <= v9)
        {
          v33 = a1[16];
          v34 = a1[17];
          v35 = a1[18];
          v36 = (float)((float)(a2[3] * v33) + (float)(a2[4] * v34)) + (float)(a2[5] * v35);
          v37 = (float)((float)(a1[19] + (float)(*a2 * v33)) + (float)(a2[1] * v34)) + (float)(a2[2] * v35);
          v38 = v36 <= 0.0;
          if (v36 == 0.0)
          {
            if (v37 < 0.0)
              return 0;
          }
          else
          {
            v39 = (float)-v37 / v36;
            if (v38)
            {
              v9 = fminf(v39, v9);
              *a4 = v9;
              v11 = *a3;
            }
            else
            {
              v11 = fmaxf(v11, v39);
              *a3 = v11;
              v9 = *a4;
            }
          }
          if (v11 <= v9)
          {
            v40 = a1[20];
            v41 = a1[21];
            v42 = a1[22];
            v43 = (float)((float)(a2[3] * v40) + (float)(a2[4] * v41)) + (float)(a2[5] * v42);
            v44 = (float)((float)(a1[23] + (float)(*a2 * v40)) + (float)(a2[1] * v41)) + (float)(a2[2] * v42);
            v45 = v43 <= 0.0;
            if (v43 == 0.0)
            {
              if (v44 < 0.0)
                return 0;
            }
            else
            {
              v46 = (float)-v44 / v43;
              if (v45)
              {
                v9 = fminf(v46, v9);
                *a4 = v9;
                v11 = *a3;
              }
              else
              {
                v11 = fmaxf(v11, v46);
                *a3 = v11;
                v9 = *a4;
              }
            }
            if (v11 <= v9)
              return 1;
          }
        }
        return 0;
      }
      v11 = fmaxf(v11, v18);
      *a3 = v11;
      v9 = *a4;
    }
    if (v11 > v9)
      return 0;
    goto LABEL_16;
  }
  return 0;
}

double md::mun::PointView::PointView(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  __int128 *v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  double result;
  __int128 *v11;
  uint64_t v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE *v27;
  char *v28;
  char *v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  __int128 *v33;
  _OWORD *v34;
  unint64_t v35;
  __int128 v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t *v39;
  _QWORD *v40;
  uint64_t v41;
  char v42;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v2 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v2;
  v3 = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v3;
  *(_QWORD *)(a1 + 44) = *(_QWORD *)(a2 + 44);
  v4 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v4;
  v5 = a1 + 120;
  *(_QWORD *)(a1 + 88) = a1 + 120;
  v6 = *(__int128 **)(a2 + 88);
  *(_QWORD *)(a1 + 104) = a1 + 120;
  v7 = *(__int128 **)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 96) = a1 + 120;
  if (v6 == v7)
  {
    *(_QWORD *)(a1 + 96) = v5 + *(_QWORD *)(a2 + 96) - (_QWORD)v6;
    v11 = *(__int128 **)(a2 + 96);
    if (v6 == v11)
      goto LABEL_3;
    v12 = 0;
    v13 = (_OWORD *)(a1 + 416);
    v14 = a1 + 400;
    while (1)
    {
      v16 = *v6;
      *(_QWORD *)(v5 + 16) = *((_QWORD *)v6 + 2);
      *(_OWORD *)v5 = v16;
      v17 = *((_QWORD *)v6 + 3);
      *(_DWORD *)(v5 + 32) = *((_DWORD *)v6 + 8);
      *(_QWORD *)(v5 + 24) = v17;
      *(_QWORD *)(v5 + 36) = *(_QWORD *)((char *)v6 + 36);
      v18 = *(__int128 *)((char *)v6 + 44);
      v19 = *(__int128 *)((char *)v6 + 60);
      v20 = *(__int128 *)((char *)v6 + 76);
      *(_OWORD *)(v5 + 92) = *(__int128 *)((char *)v6 + 92);
      *(_OWORD *)(v5 + 76) = v20;
      *(_OWORD *)(v5 + 60) = v19;
      *(_OWORD *)(v5 + 44) = v18;
      v21 = *(__int128 *)((char *)v6 + 108);
      v22 = *(__int128 *)((char *)v6 + 124);
      v23 = *(__int128 *)((char *)v6 + 140);
      *(_OWORD *)(v5 + 156) = *(__int128 *)((char *)v6 + 156);
      *(_OWORD *)(v5 + 140) = v23;
      *(_OWORD *)(v5 + 124) = v22;
      *(_OWORD *)(v5 + 108) = v21;
      v24 = *(__int128 *)((char *)v6 + 172);
      v25 = *(__int128 *)((char *)v6 + 188);
      v26 = *(__int128 *)((char *)v6 + 204);
      *(_OWORD *)(v5 + 220) = *(__int128 *)((char *)v6 + 220);
      *(_OWORD *)(v5 + 204) = v26;
      *(_OWORD *)(v5 + 188) = v25;
      *(_OWORD *)(v5 + 172) = v24;
      v27 = (_BYTE *)(v5 + 280);
      *(_QWORD *)(v5 + 248) = v5 + 280;
      v28 = (char *)*((_QWORD *)v6 + 31);
      *(_BYTE *)(v5 + 240) = *((_BYTE *)v6 + 240);
      *(_QWORD *)(v5 + 264) = v5 + 280;
      v29 = (char *)*((_QWORD *)v6 + 33);
      *(_QWORD *)(v5 + 272) = *((_QWORD *)v6 + 34);
      *(_DWORD *)(v5 + 236) = *((_DWORD *)v6 + 59);
      *(_QWORD *)(v5 + 256) = v5 + 280;
      if (v28 == v29)
      {
        *(_QWORD *)(v5 + 256) = &v27[*((_QWORD *)v6 + 32) - (_QWORD)v28];
        v30 = (char *)*((_QWORD *)v6 + 32);
        if (v28 != v30)
        {
          v31 = v30 - v28;
          if ((unint64_t)(v30 - v28) >= 8 && (unint64_t)(a1 + 400 + 288 * v12 - (_QWORD)v28) >= 0x20)
          {
            if (v31 < 0x20)
            {
              v32 = 0;
              goto LABEL_18;
            }
            v32 = v31 & 0xFFFFFFFFFFFFFFE0;
            v33 = (__int128 *)(v28 + 16);
            v34 = v13;
            v35 = v31 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v36 = *v33;
              *(v34 - 1) = *(v33 - 1);
              *v34 = v36;
              v33 += 2;
              v34 += 2;
              v35 -= 32;
            }
            while (v35);
            if (v31 == v32)
              goto LABEL_7;
            if ((v31 & 0x18) != 0)
            {
LABEL_18:
              v37 = v31 & 0xFFFFFFFFFFFFFFF8;
              v27 += v31 & 0xFFFFFFFFFFFFFFF8;
              v38 = v32 - (v31 & 0xFFFFFFFFFFFFFFF8);
              v39 = (uint64_t *)&v28[v32];
              v40 = (_QWORD *)(v14 + v32);
              do
              {
                v41 = *v39++;
                *v40++ = v41;
                v38 += 8;
              }
              while (v38);
              if (v31 == v37)
                goto LABEL_7;
              v28 += v37;
            }
            else
            {
              v28 += v32;
              v27 += v32;
            }
          }
          do
          {
            v42 = *v28++;
            *v27++ = v42;
          }
          while (v28 != v30);
        }
      }
      else
      {
        v15 = *((_QWORD *)v6 + 32);
        *(_QWORD *)(v5 + 248) = v28;
        *(_QWORD *)(v5 + 256) = v15;
        *(__int128 *)((char *)v6 + 248) = 0uLL;
        *(__int128 *)((char *)v6 + 264) = 0uLL;
      }
LABEL_7:
      v5 += 288;
      v6 += 18;
      ++v12;
      v13 += 18;
      v14 += 288;
      if (v6 == v11)
        goto LABEL_3;
    }
  }
  v8 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = v6;
  *(_QWORD *)(a1 + 96) = v8;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
LABEL_3:
  v9 = *(_QWORD *)(a2 + 1848);
  *(_QWORD *)(a1 + 1853) = *(_QWORD *)(a2 + 1853);
  *(_QWORD *)(a1 + 1848) = v9;
  result = 0.0;
  *(_OWORD *)(a1 + 1864) = 0u;
  *(_OWORD *)(a1 + 1880) = 0u;
  *(_OWORD *)(a1 + 1896) = 0u;
  *(_QWORD *)(a1 + 1912) = a1 + 1944;
  *(_QWORD *)(a1 + 1920) = a1 + 1944;
  *(_QWORD *)(a1 + 1928) = a1 + 1944;
  *(_QWORD *)(a1 + 1936) = 6;
  return result;
}

uint64_t md::mun::PointView::PointView(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  char *v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 *v24;
  _OWORD *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  __int128 *v32;
  _OWORD *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 44) = *(_QWORD *)(a2 + 44);
  v8 = *(_OWORD *)(a2 + 56);
  v9 = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = a1 + 120;
  v10 = a1 + 88;
  *(_OWORD *)(a1 + 56) = v8;
  *(_OWORD *)(a1 + 72) = v9;
  *(_QWORD *)(a1 + 96) = a1 + 120;
  *(_QWORD *)(a1 + 104) = a1 + 120;
  *(_QWORD *)(a1 + 112) = 6;
  geo::small_vector_base<md::mun::PhotoInfo>::append<md::mun::PhotoInfo const*>(a1 + 88, *(__int128 **)(a2 + 88), *(__int128 **)(a2 + 96));
  v11 = *(_QWORD *)(a2 + 1848);
  *(_QWORD *)(v10 + 1765) = *(_QWORD *)(a2 + 1853);
  *(_QWORD *)(v10 + 1760) = v11;
  v12 = (char *)(v10 + 1856);
  *(_OWORD *)(v10 + 1776) = 0u;
  *(_OWORD *)(v10 + 1792) = 0u;
  *(_OWORD *)(v10 + 1808) = 0u;
  *(_QWORD *)(v10 + 1824) = v10 + 1856;
  *(_QWORD *)(v10 + 1832) = v10 + 1856;
  *(_QWORD *)(v10 + 1840) = v10 + 1856;
  *(_QWORD *)(v10 + 1848) = 6;
  v13 = *a3;
  v14 = a3[1];
  v15 = (char *)v14 - (char *)*a3;
  v16 = v15 >> 3;
  if ((unint64_t)v15 >= 0x31)
  {
    if (v16 <= 8)
      v17 = 8;
    else
      v17 = v15 >> 3;
    v12 = (char *)malloc_type_malloc(8 * v17, 0x100004087EB8081uLL);
    v18 = *(uint64_t **)(a1 + 1912);
    v19 = *(char **)(a1 + 1920);
    if (v18 == (uint64_t *)v19)
      goto LABEL_14;
    v20 = v19 - (char *)v18 - 8;
    if (v20 < 0x18)
    {
      v21 = v12;
    }
    else
    {
      v21 = v12;
      if ((unint64_t)(v12 - (char *)v18) >= 0x20)
      {
        v22 = (v20 >> 3) + 1;
        v23 = 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
        v21 = &v12[v23];
        v24 = (__int128 *)(v18 + 2);
        v25 = v12 + 16;
        v26 = v22 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v27 = *v24;
          *(v25 - 1) = *(v24 - 1);
          *v25 = v27;
          v24 += 2;
          v25 += 2;
          v26 -= 4;
        }
        while (v26);
        if (v22 == (v22 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_14;
        v18 = (uint64_t *)((char *)v18 + v23);
      }
    }
    do
    {
      v28 = *v18++;
      *(_QWORD *)v21 = v28;
      v21 += 8;
    }
    while (v18 != (uint64_t *)v19);
LABEL_14:
    *(_QWORD *)(a1 + 1912) = v12;
    *(_QWORD *)(a1 + 1920) = v12;
    *(_QWORD *)(a1 + 1936) = v17;
  }
  if (v13 != v14)
  {
    if ((unint64_t)(v15 - 8) < 0x18)
    {
      v31 = v12;
    }
    else if ((unint64_t)(v12 - (char *)v13) < 0x20)
    {
      v31 = v12;
    }
    else
    {
      v29 = ((unint64_t)(v15 - 8) >> 3) + 1;
      v30 = 8 * (v29 & 0x3FFFFFFFFFFFFFFCLL);
      v31 = &v12[v30];
      v32 = (__int128 *)(v13 + 2);
      v33 = v12 + 16;
      v34 = v29 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v35 = *v32;
        *(v33 - 1) = *(v32 - 1);
        *v33 = v35;
        v32 += 2;
        v33 += 2;
        v34 -= 4;
      }
      while (v34);
      if (v29 == (v29 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_25;
      v13 = (uint64_t *)((char *)v13 + v30);
    }
    do
    {
      v36 = *v13++;
      *(_QWORD *)v31 = v36;
      v31 += 8;
    }
    while (v13 != v14);
LABEL_25:
    v12 = *(char **)(a1 + 1920);
  }
  *(_QWORD *)(a1 + 1920) = &v12[8 * v16];
  return a1;
}

void md::mun::PointView::addOptionalView(md::mun::PointView *this, unsigned __int8 a2, int a3)
{
  char v3;
  uint64_t v5;
  int v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;

  v3 = a3;
  v5 = *(_QWORD *)this;
  v7 = *((unsigned __int8 *)this + 1859);
  v8 = (char *)*((_QWORD *)this + 236);
  v9 = (char *)*((_QWORD *)this + 237);
  if (v8 == v9)
  {
LABEL_9:
    v11 = *((_QWORD *)this + 238);
    if ((unint64_t)v9 >= v11)
    {
      v13 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v8) >> 3) + 1;
      if (v13 > 0xAAAAAAAAAAAAAAALL)
        abort();
      v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (_QWORD)v8) >> 3);
      if (2 * v14 > v13)
        v13 = 2 * v14;
      if (v14 >= 0x555555555555555)
        v15 = 0xAAAAAAAAAAAAAAALL;
      else
        v15 = v13;
      if (v15)
      {
        if (v15 > 0xAAAAAAAAAAAAAAALL)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v16 = (char *)operator new(24 * v15);
      }
      else
      {
        v16 = 0;
      }
      v17 = &v16[8 * ((v9 - v8) >> 3)];
      *(_QWORD *)v17 = v5;
      v17[8] = a2;
      v17[9] = v3;
      v17[10] = v7;
      *((_DWORD *)v17 + 4) = 0;
      v12 = v17 + 24;
      if (v8 != v9)
      {
        do
        {
          v18 = *(_OWORD *)(v9 - 24);
          *((_QWORD *)v17 - 1) = *((_QWORD *)v9 - 1);
          *(_OWORD *)(v17 - 24) = v18;
          v17 -= 24;
          v9 -= 24;
        }
        while (v9 != v8);
        v8 = (char *)*((_QWORD *)this + 236);
      }
      *((_QWORD *)this + 236) = v17;
      *((_QWORD *)this + 237) = v12;
      *((_QWORD *)this + 238) = &v16[24 * v15];
      if (v8)
        operator delete(v8);
    }
    else
    {
      *(_QWORD *)v9 = v5;
      v9[8] = a2;
      v9[9] = a3;
      v9[10] = v7;
      v12 = v9 + 24;
      *((_DWORD *)v9 + 4) = 0;
    }
    *((_QWORD *)this + 237) = v12;
  }
  else
  {
    v10 = *((_QWORD *)this + 236);
    while (*(_QWORD *)v10 != v5
         || *(unsigned __int8 *)(v10 + 8) != a2
         || *(unsigned __int8 *)(v10 + 9) != a3
         || *(unsigned __int8 *)(v10 + 10) != v7)
    {
      v10 += 24;
      if ((char *)v10 == v9)
        goto LABEL_9;
    }
  }
}

void md::mun::PointView::addRequiredView(md::mun::PointView *this, unsigned __int8 a2, int a3)
{
  char v3;
  uint64_t v5;
  int v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;

  v3 = a3;
  v5 = *(_QWORD *)this;
  v7 = *((unsigned __int8 *)this + 1859);
  v8 = (char *)*((_QWORD *)this + 233);
  v9 = (char *)*((_QWORD *)this + 234);
  if (v8 == v9)
  {
LABEL_9:
    v11 = *((_QWORD *)this + 235);
    if ((unint64_t)v9 >= v11)
    {
      v13 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v8) >> 3) + 1;
      if (v13 > 0xAAAAAAAAAAAAAAALL)
        abort();
      v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (_QWORD)v8) >> 3);
      if (2 * v14 > v13)
        v13 = 2 * v14;
      if (v14 >= 0x555555555555555)
        v15 = 0xAAAAAAAAAAAAAAALL;
      else
        v15 = v13;
      if (v15)
      {
        if (v15 > 0xAAAAAAAAAAAAAAALL)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v16 = (char *)operator new(24 * v15);
      }
      else
      {
        v16 = 0;
      }
      v17 = &v16[8 * ((v9 - v8) >> 3)];
      *(_QWORD *)v17 = v5;
      v17[8] = a2;
      v17[9] = v3;
      v17[10] = v7;
      *((_DWORD *)v17 + 4) = 0;
      v12 = v17 + 24;
      if (v8 != v9)
      {
        do
        {
          v18 = *(_OWORD *)(v9 - 24);
          *((_QWORD *)v17 - 1) = *((_QWORD *)v9 - 1);
          *(_OWORD *)(v17 - 24) = v18;
          v17 -= 24;
          v9 -= 24;
        }
        while (v9 != v8);
        v8 = (char *)*((_QWORD *)this + 233);
      }
      *((_QWORD *)this + 233) = v17;
      *((_QWORD *)this + 234) = v12;
      *((_QWORD *)this + 235) = &v16[24 * v15];
      if (v8)
        operator delete(v8);
    }
    else
    {
      *(_QWORD *)v9 = v5;
      v9[8] = a2;
      v9[9] = a3;
      v9[10] = v7;
      v12 = v9 + 24;
      *((_DWORD *)v9 + 4) = 0;
    }
    *((_QWORD *)this + 234) = v12;
  }
  else
  {
    v10 = *((_QWORD *)this + 233);
    while (*(_QWORD *)v10 != v5
         || *(unsigned __int8 *)(v10 + 8) != a2
         || *(unsigned __int8 *)(v10 + 9) != a3
         || *(unsigned __int8 *)(v10 + 10) != v7)
    {
      v10 += 24;
      if ((char *)v10 == v9)
        goto LABEL_9;
    }
  }
}

void md::NonTiledAssetLogic::~NonTiledAssetLogic(md::NonTiledAssetLogic *this)
{
  md::NonTiledAssetLogic::~NonTiledAssetLogic(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  void **v2;
  void *v3;
  void **v4;
  void *v5;
  void **v6;
  void *v7;
  void **v8;
  void **v9;
  void **v10;

  *(_QWORD *)this = &off_1E42955F0;
  v2 = (void **)*((_QWORD *)this + 27);
  if (v2)
  {
    do
    {
      v8 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v8;
    }
    while (v8);
  }
  v3 = (void *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v3)
    operator delete(v3);
  v4 = (void **)*((_QWORD *)this + 22);
  if (v4)
  {
    do
    {
      v9 = (void **)*v4;
      if (*((char *)v4 + 39) < 0)
        operator delete(v4[2]);
      operator delete(v4);
      v4 = v9;
    }
    while (v9);
  }
  v5 = (void *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v5)
    operator delete(v5);
  v6 = (void **)*((_QWORD *)this + 17);
  if (v6)
  {
    do
    {
      v10 = (void **)*v6;
      if (*((char *)v6 + 39) < 0)
        operator delete(v6[2]);
      operator delete(v6);
      v6 = v10;
    }
    while (v10);
  }
  v7 = (void *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v7)
    operator delete(v7);
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
}

uint64_t md::Logic<md::NonTiledAssetLogic,md::NonTiledAssetContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  _BYTE v4[2];

  if (*(_QWORD *)(a3 + 8) == 0x932EE29454ABDC4ELL && *(_QWORD *)(a3 + 32))
    return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)result + 160))(result, a2, v4);
  a4[23] = 0;
  *a4 = 0;
  return result;
}

uint64_t md::Logic<md::NonTiledAssetLogic,md::NonTiledAssetContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

void md::Logic<md::NonTiledAssetLogic,md::NonTiledAssetContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

void md::NonTiledAssetContext::~NonTiledAssetContext(md::NonTiledAssetContext *this)
{
  void **v2;
  void *v3;
  void **v4;
  void *v5;
  void **v6;
  void *v7;
  void **v8;
  void **v9;
  void **v10;

  v2 = (void **)*((_QWORD *)this + 12);
  if (v2)
  {
    do
    {
      v8 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v8;
    }
    while (v8);
  }
  v3 = (void *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
    operator delete(v3);
  v4 = (void **)*((_QWORD *)this + 7);
  if (v4)
  {
    do
    {
      v9 = (void **)*v4;
      if (*((char *)v4 + 39) < 0)
        operator delete(v4[2]);
      operator delete(v4);
      v4 = v9;
    }
    while (v9);
  }
  v5 = (void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v5)
    operator delete(v5);
  v6 = (void **)*((_QWORD *)this + 2);
  if (v6)
  {
    do
    {
      v10 = (void **)*v6;
      if (*((char *)v6 + 39) < 0)
        operator delete(v6[2]);
      operator delete(v6);
      v6 = v10;
    }
    while (v10);
  }
  v7 = *(void **)this;
  *(_QWORD *)this = 0;
  if (v7)
    operator delete(v7);
}

_QWORD *gdc::ManagedObjectHolder<md::NonTiledAssetContext>::~ManagedObjectHolder(_QWORD *a1)
{
  md::NonTiledAssetContext *v2;

  *a1 = &off_1E42B1040;
  v2 = (md::NonTiledAssetContext *)a1[4];
  if (v2)
  {
    md::NonTiledAssetContext::~NonTiledAssetContext(v2);
    MEMORY[0x1A1AF4E00]();
  }
  return a1;
}

void gdc::ManagedObjectHolder<md::NonTiledAssetContext>::~ManagedObjectHolder(_QWORD *a1)
{
  md::NonTiledAssetContext *v1;

  *a1 = &off_1E42B1040;
  v1 = (md::NonTiledAssetContext *)a1[4];
  if (v1)
  {
    md::NonTiledAssetContext::~NonTiledAssetContext(v1);
    MEMORY[0x1A1AF4E00]();
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::NonTiledAssetContext>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

uint64_t md::PolygonLayoutCharacteristics::renderOrderForAttributes()
{
  return 0;
}

float md::PolygonLayoutCharacteristics::tileScale(md::PolygonLayoutCharacteristics *this)
{
  return 0.0;
}

void std::__function::__func<void md::preparePolygonTiles<md::MapTileDataRenderable<md::PolygonTileData>>(std::vector<md::MapTileDataRenderable<md::PolygonTileData> *,std::allocator<md::MapTileDataRenderable<md::PolygonTileData> *>> const&,md::LayoutContext const&,md::PolygonLayoutCharacteristics const&)::{lambda(md::MapTileDataRenderable<md::PolygonTileData> const*)#1},std::allocator<void md::preparePolygonTiles<md::MapTileDataRenderable<md::PolygonTileData>>(std::vector<md::MapTileDataRenderable<md::PolygonTileData> *,std::allocator<md::MapTileDataRenderable<md::PolygonTileData> *>> const&,md::LayoutContext const&,md::PolygonLayoutCharacteristics const&)::{lambda(md::MapTileDataRenderable<md::PolygonTileData> const*)#1}>,BOOL ()(md::MapTileDataRenderable<md::PolygonTileData> const*)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<void md::preparePolygonTiles<md::MapTileDataRenderable<md::PolygonTileData>>(std::vector<md::MapTileDataRenderable<md::PolygonTileData> *,std::allocator<md::MapTileDataRenderable<md::PolygonTileData> *>> const&,md::LayoutContext const&,md::PolygonLayoutCharacteristics const&)::{lambda(md::MapTileDataRenderable<md::PolygonTileData> const*)#1},std::allocator<void md::preparePolygonTiles<md::MapTileDataRenderable<md::PolygonTileData>>(std::vector<md::MapTileDataRenderable<md::PolygonTileData> *,std::allocator<md::MapTileDataRenderable<md::PolygonTileData> *>> const&,md::LayoutContext const&,md::PolygonLayoutCharacteristics const&)::{lambda(md::MapTileDataRenderable<md::PolygonTileData> const*)#1}>,BOOL ()(md::MapTileDataRenderable<md::PolygonTileData> const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D0478;
  return result;
}

void std::__function::__func<void md::preparePolygonTiles<md::MapTileDataRenderable<md::PolygonTileData>>(std::vector<md::MapTileDataRenderable<md::PolygonTileData> *,std::allocator<md::MapTileDataRenderable<md::PolygonTileData> *>> const&,md::LayoutContext const&,md::PolygonLayoutCharacteristics const&)::{lambda(md::MapTileDataRenderable<md::PolygonTileData> const*)#1},std::allocator<void md::preparePolygonTiles<md::MapTileDataRenderable<md::PolygonTileData>>(std::vector<md::MapTileDataRenderable<md::PolygonTileData> *,std::allocator<md::MapTileDataRenderable<md::PolygonTileData> *>> const&,md::LayoutContext const&,md::PolygonLayoutCharacteristics const&)::{lambda(md::MapTileDataRenderable<md::PolygonTileData> const*)#1}>,BOOL ()(md::MapTileDataRenderable<md::PolygonTileData> const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D0478;
}

uint64_t std::__function::__func<void md::preparePolygonTiles<md::MapTileDataRenderable<md::PolygonTileData>>(std::vector<md::MapTileDataRenderable<md::PolygonTileData> *,std::allocator<md::MapTileDataRenderable<md::PolygonTileData> *>> const&,md::LayoutContext const&,md::PolygonLayoutCharacteristics const&)::{lambda(md::MapTileDataRenderable<md::PolygonTileData> const*)#1},std::allocator<void md::preparePolygonTiles<md::MapTileDataRenderable<md::PolygonTileData>>(std::vector<md::MapTileDataRenderable<md::PolygonTileData> *,std::allocator<md::MapTileDataRenderable<md::PolygonTileData> *>> const&,md::LayoutContext const&,md::PolygonLayoutCharacteristics const&)::{lambda(md::MapTileDataRenderable<md::PolygonTileData> const*)#1}>,BOOL ()(md::MapTileDataRenderable<md::PolygonTileData> const*)>::operator()()
{
  return 1;
}

uint64_t md::PolygonGroupLayoutInfo<md::PolygonTileData>::~PolygonGroupLayoutInfo(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)(a1 + 72) = &off_1E42B4B50;

  if (*(_BYTE *)(a1 + 40))
    *(_BYTE *)(a1 + 40) = 0;
  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (!v2)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return a1;
  }
  else
  {
LABEL_7:
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return a1;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return a1;
}

void md::_layoutPolygonGroup<md::PolygonTileData>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 *a7, uint64_t a8, __int16 a9, _QWORD *a10)
{
  ggl::CommandBuffer *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  float v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  id v23;
  uint64_t *v24;
  uint64_t v25;
  int v26;
  int v27;
  char v28;
  float v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  unsigned int v39;
  float *v40;
  float v41;
  BOOL v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  float *v46;
  float v47;
  BOOL v48;
  unsigned int v49;
  int v50;
  int v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  float *v56;
  float v57;
  BOOL v58;
  unsigned int v59;
  int v60;
  int v61;
  uint64_t v62;
  unsigned int v63;
  float *v64;
  float v65;
  BOOL v66;
  unsigned int v67;
  int v68;
  int v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  uint64_t v87;
  unsigned int v88;
  float *v89;
  float v90;
  BOOL v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  int *v95;
  int v96;
  float v97;
  float v98;
  unint64_t v99;
  float v100;
  float *v101;
  float v102;
  BOOL v103;
  unsigned int v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  double v110;
  float v111;
  uint64_t v112;
  float *v113;
  BOOL v114;
  unsigned int v115;
  float v116;
  BOOL v117;
  unsigned int v118;
  int v119;
  int v120;
  unint64_t v121;
  unsigned int v122;
  unsigned __int8 *v123;
  int v124;
  unint64_t v125;
  unsigned int v126;
  unsigned __int8 *v127;
  int v128;
  float v129;
  unsigned int v130;
  float32x4_t v131;
  float v132;
  uint64_t v133;
  unsigned int v134;
  unsigned int v135;
  float v136;
  float32x4_t v137;
  unsigned int v138;
  unsigned int v139;
  float32x4_t v140;
  id v141;
  uint64_t v142;
  float32x2_t v143;
  id v144;
  uint64_t v145;
  float32x2_t v146;
  id v147;
  uint64_t v148;
  uint64_t v149;
  id v150;
  uint64_t v151;
  uint64_t v152;
  BOOL v153;
  VKPolygonGroup *v155;
  id v156;
  int v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  uint64_t v164;
  unint64_t *v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t v168;
  unint64_t v169;
  __n128 v170;
  _DWORD *v171;
  __int128 v172;
  _QWORD *v173;
  int v174;
  int v175;
  unint64_t v176;
  unint64_t v177;
  __int128 *v178;
  __int128 v179;
  uint64_t v180;
  uint64_t v181;
  id v182;
  uint64_t v183;
  __int128 *v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t *v187;
  unint64_t v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  uint64_t *v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t *v195;
  unint64_t v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  __int128 *v200;
  __int128 v201;
  float32x4_t *v202;
  _DWORD *v203;
  uint64_t v204;
  id v205;
  float32x4_t v206;
  float32x4_t v207;
  int8x16_t v208;
  int8x16_t v209;
  float32x4_t v210;
  float32x4_t v211;
  float32x4_t v212;
  float32x4_t v213;
  int8x16_t v214;
  int8x16_t v215;
  float32x4_t v216;
  uint64_t v217;
  __int128 *v218;
  __int128 v219;
  _QWORD *v220;
  int v221;
  int v222;
  unint64_t v223;
  unint64_t v224;
  uint64_t v225;
  __n128 v226;
  uint64_t *v227;
  uint64_t v228;
  int v229;
  int v230;
  BOOL v231;
  char v232;
  char v233;
  uint64_t v234;
  uint64_t v235;
  _QWORD *v236;
  uint64_t v237;
  _QWORD *v238;
  uint64_t v239;
  unint64_t *v240;
  unint64_t v241;
  std::__shared_weak_count *v242;
  unint64_t *v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  unint64_t *v249;
  unint64_t v250;
  std::__shared_weak_count *v251;
  unint64_t *v252;
  unint64_t v253;
  __int32 v254;
  int v255;
  uint64_t v256;
  unsigned __int8 *v257;
  uint64_t v258;
  uint64_t v259;
  unsigned __int8 v260;
  uint64_t v261;
  _QWORD *v262;
  _QWORD *v263;
  uint64_t v264;
  std::__shared_weak_count *v265;
  unint64_t *v266;
  unint64_t v267;
  std::__shared_weak_count *v268;
  unint64_t *v269;
  unint64_t v270;
  uint64_t v271;
  _QWORD *v272;
  uint64_t v273;
  _QWORD *v274;
  uint64_t v275;
  unint64_t *v276;
  unint64_t v277;
  std::__shared_weak_count *v278;
  unint64_t *v279;
  unint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  unint64_t *v285;
  unint64_t v286;
  std::__shared_weak_count *v287;
  unint64_t *v288;
  unint64_t v289;
  uint64_t v290;
  unint64_t *v291;
  unint64_t v292;
  std::__shared_weak_count *v293;
  unint64_t *v294;
  unint64_t v295;
  uint64_t v296;
  unint64_t *v297;
  unint64_t v298;
  unint64_t *v299;
  unint64_t *v300;
  unint64_t v301;
  uint64_t v302;
  unint64_t *v303;
  unint64_t v304;
  unint64_t *v305;
  unint64_t *v306;
  __int128 *v307;
  uint64_t v308;
  uint64_t *v309;
  uint64_t v310;
  int v311;
  float v312;
  __int128 v313;
  std::__shared_weak_count *v314;
  unint64_t *v315;
  unint64_t v316;
  unint64_t v317;
  uint64_t v318;
  unint64_t *v319;
  unint64_t v320;
  unint64_t v321;
  float *v322;
  float v323;
  BOOL v324;
  unsigned int v325;
  float v326;
  float v327;
  float v328;
  float v329;
  float v330;
  uint64_t v331;
  uint64_t v332;
  _QWORD *v333;
  uint64_t v334;
  _QWORD *v335;
  uint64_t v336;
  unint64_t *v337;
  unint64_t v338;
  std::__shared_weak_count *v339;
  unint64_t *v340;
  unint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  unint64_t *v346;
  unint64_t v347;
  std::__shared_weak_count *v348;
  unint64_t *v349;
  unint64_t v350;
  __int32 v351;
  int v352;
  uint64_t v353;
  unsigned __int8 *v354;
  uint64_t v355;
  uint64_t v356;
  unsigned __int8 v357;
  uint64_t v358;
  _QWORD *v359;
  _QWORD *v360;
  uint64_t v361;
  std::__shared_weak_count *v362;
  unint64_t *v363;
  unint64_t v364;
  std::__shared_weak_count *v365;
  unint64_t *v366;
  unint64_t v367;
  uint64_t v368;
  _QWORD *v369;
  uint64_t v370;
  _QWORD *v371;
  uint64_t v372;
  unint64_t *v373;
  unint64_t v374;
  std::__shared_weak_count *v375;
  unint64_t *v376;
  unint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  unint64_t *v382;
  unint64_t v383;
  std::__shared_weak_count *v384;
  unint64_t *v385;
  unint64_t v386;
  uint64_t v387;
  unint64_t *v388;
  unint64_t v389;
  std::__shared_weak_count *v390;
  unint64_t *v391;
  unint64_t v392;
  uint64_t v393;
  unint64_t *v394;
  unint64_t v395;
  unint64_t *v396;
  unint64_t *v397;
  unint64_t v398;
  uint64_t v399;
  unint64_t *v400;
  unint64_t v401;
  unint64_t *v402;
  unint64_t *v403;
  _QWORD *v404;
  uint64_t v405;
  _QWORD *v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  int v410;
  int v411;
  BOOL v412;
  char v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  int v419;
  uint64_t v420;
  uint64_t *v421;
  uint64_t *v422;
  unsigned __int8 v423;
  id v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t *v427;
  __int128 *v428;
  uint64_t v429;
  uint64_t v430;
  _QWORD *v431;
  uint64_t v432;
  _QWORD *v433;
  __int32 v434;
  __int128 v435;
  uint64_t v436;
  _QWORD *v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  int v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t *v447;
  uint64_t *v448;
  unsigned __int8 v449;
  id v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t *v453;
  __int128 *v454;
  uint64_t v455;
  uint64_t v456;
  _QWORD *v457;
  uint64_t v458;
  _QWORD *v459;
  __int32 v460;
  __int128 v461;
  uint64_t v462;
  _QWORD *v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  _QWORD *v467;
  uint64_t v468;
  _QWORD *v469;
  uint64_t v470;
  unint64_t *v471;
  unint64_t v472;
  std::__shared_weak_count *v473;
  unint64_t *v474;
  unint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  unint64_t *v480;
  unint64_t v481;
  std::__shared_weak_count *v482;
  unint64_t *v483;
  unint64_t v484;
  uint64_t v485;
  uint64_t v486;
  __int128 v487;
  uint64_t v488;
  float v489;
  uint64_t *v490;
  uint64_t v491;
  int v492;
  float v493;
  float v494;
  uint64_t v495;
  float v496;
  uint64_t v497;
  uint64_t v498;
  __int128 v499;
  std::__shared_weak_count *v500;
  unint64_t *v501;
  unint64_t v502;
  unint64_t v503;
  uint64_t v504;
  unint64_t *v505;
  unint64_t v506;
  unint64_t v507;
  float v508;
  float *v509;
  float v510;
  BOOL v511;
  unsigned int v512;
  float v513;
  float v514;
  float v515;
  float v516;
  float v517;
  int v518;
  uint64_t v519;
  unsigned int v520;
  float *v521;
  float v522;
  _BOOL4 v523;
  unsigned int v525;
  float v526;
  _BOOL4 v527;
  unsigned int v529;
  int v530;
  int v531;
  __int128 v532;
  _QWORD *v533;
  int v534;
  int v535;
  unint64_t v536;
  unint64_t v537;
  uint64_t v538;
  int v539;
  int v540;
  uint64_t v541;
  uint64_t *v542;
  uint64_t *v543;
  unsigned __int8 v544;
  int v545;
  id v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t *v549;
  __int128 *v550;
  uint64_t v551;
  uint64_t v552;
  _QWORD *v553;
  uint64_t v554;
  _QWORD *v555;
  __int32 v556;
  __int128 v557;
  uint64_t v558;
  _QWORD *v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  _QWORD *v563;
  uint64_t v564;
  _QWORD *v565;
  uint64_t v566;
  unint64_t *v567;
  unint64_t v568;
  std::__shared_weak_count *v569;
  unint64_t *v570;
  unint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  unint64_t *v576;
  unint64_t v577;
  std::__shared_weak_count *v578;
  unint64_t *v579;
  unint64_t v580;
  uint64_t v581;
  unint64_t v582;
  __int128 v583;
  uint64_t v584;
  id v585;
  id v586;
  int v587;
  int v588;
  unint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  int v595;
  uint64_t v596;
  uint64_t *v597;
  uint64_t *v598;
  unsigned __int8 v599;
  id v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t *v603;
  __int128 *v604;
  uint64_t v605;
  uint64_t v606;
  _QWORD *v607;
  uint64_t v608;
  _QWORD *v609;
  __int32 v610;
  __int128 v611;
  uint64_t v612;
  _QWORD *v613;
  uint64_t v614;
  float32x4_t v615;
  __n128 v616;
  __int128 v617;
  uint64_t v618;
  int64x2_t v619;
  int64x2_t v620;
  int64x2_t v621;
  md::PolygonViewConstantsFrameCache *v622;
  md::PolygonViewConstantsFrameCache *v623[2];
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  __int128 v628;
  ggl::CommandBuffer *v630;
  ggl::CommandBuffer *v631;
  ggl::CommandBuffer *v632;
  int64x2_t v634;
  uint64_t v635;
  uint64_t v636;
  float32x2_t v637;
  float32x4_t v638;
  uint64_t v639;
  float32x4_t v640;
  float32x2_t v641;
  float32x4_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  __int128 v646;
  __int128 v647;
  __int128 v648;
  __int128 v649;
  __int128 v650;
  float32x4_t v651;
  float32x4_t v652;
  float32x2_t v653;
  uint64_t v654;
  BOOL v655;
  BOOL v656;
  unsigned __int8 v657[2];
  unsigned __int8 v658;
  _BYTE v659[20];
  uint64_t **v660;
  BOOL v661;
  char v662;
  char v663;
  _BYTE v664[2];
  unsigned __int8 v665;
  _QWORD v666[3];
  _QWORD *v667;
  _QWORD v668[3];
  _QWORD *v669;
  _QWORD v670[3];
  _QWORD *v671;
  _QWORD v672[3];
  _QWORD *v673;
  _QWORD v674[3];
  _QWORD *v675;
  __int128 v676;
  uint64_t v677;
  __int128 *v678;
  __int16 v679;
  float32x4_t *v680;
  _BYTE v681[36];
  _DWORD *v682;
  _QWORD v683[3];
  _QWORD *v684;
  _BYTE v685[32];
  float32x4_t v686;
  float32x4_t v687;
  __int128 v688;
  __int128 v689;
  int64x2_t v690;
  uint64_t v691;
  uint64_t v692;

  v692 = *MEMORY[0x1E0C80C00];
  v662 = 0;
  v646 = 0u;
  v647 = 0u;
  v648 = 0u;
  v641 = 0;
  v643 = 0;
  v637 = 0;
  v639 = 0;
  v14 = a1;
  v15 = *(_QWORD *)(*(_QWORD *)a2 + 520);
  v16 = *(std::__shared_weak_count **)(*(_QWORD *)a2 + 528);
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
    v19 = *(float *)(v15 + 256);
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  else
  {
    v19 = *(float *)(v15 + 256);
  }
  -[ggl::CommandBuffer textureManager](v14, "textureManager");
  v653 = **(float32x2_t **)v685;
  if (*(_QWORD *)&v685[8])
  {
    v21 = (unint64_t *)(*(_QWORD *)&v685[8] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)&v685[8] + 16))(*(_QWORD *)&v685[8]);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v685[8]);
    }
  }
  v636 = a8;
  v635 = a3;
  v654 = *(_QWORD *)(-[ggl::CommandBuffer alphaAtlas](v14, "alphaAtlas") + 24);
  v23 = *(id *)(a8 + 80);
  *(_WORD *)v685 = a9;
  v660 = (uint64_t **)objc_msgSend(v23, "styleQueries:", v685);

  if (!v660)
    goto LABEL_111;
  if (v660[1] == *v660)
    goto LABEL_111;
  v659[16] = 0;
  *(_QWORD *)v659 = 0;
  *(_WORD *)v657 = 0;
  v658 = 0;
  v655 = 0;
  v663 = 0;
  *(_DWORD *)&v659[12] = (*(float (**)(void))(*(_QWORD *)a7 + 96))();
  v24 = *v660;
  if (v660[1] == *v660)
    goto LABEL_111;
  v618 = a4;
  v631 = v14;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v622 = (md::PolygonViewConstantsFrameCache *)(v635 + 240);
  v29 = v19;
  do
  {
    v30 = *(_OWORD *)&v24[2 * v25];
    *(_OWORD *)v681 = v30;
    v31 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
    if (*((_QWORD *)&v30 + 1))
    {
      v32 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
      *(_OWORD *)v685 = v30;
      do
        v34 = __ldxr(v32);
      while (__stxr(v34 + 1, v32));
      v35 = v30;
    }
    else
    {
      v35 = v30;
      *(_OWORD *)v685 = (unint64_t)v30;
    }
    *(_OWORD *)&v685[16] = 0uLL;
    v686.i8[0] = 0;
    if (v35)
      LODWORD(v35) = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v35 + 48))(v35, &v685[16]);
    v686.i8[0] = v35;
    if (v31)
    {
      v36 = (unint64_t *)&v31->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
      LODWORD(v35) = v686.u8[0];
    }
    if ((_DWORD)v35)
    {
      v38 = *(_QWORD *)(*(_QWORD *)v685 + 24);
      v39 = *(unsigned __int8 *)(v38 + 12);
      if (v39 == 2)
      {
        if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(*(_QWORD *)(*(_QWORD *)v685 + 24), 0x8Au, 0) & 1) != 0)
          goto LABEL_40;
        v39 = 1;
      }
      if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v38, 0x8Au, v39))
      {
LABEL_50:
        v27 |= md::_polygonIsVisibleWithQueryLocker((uint64_t)v685, *(float *)(v636 + 48));
        if ((v27 & 1) != 0)
        {
          v44 = *(_QWORD *)(*(_QWORD *)v685 + 24);
          if ((int)*(float *)(v636 + 48) >= 0x17)
            v45 = 23;
          else
            v45 = (int)*(float *)(v636 + 48);
          v46 = *(float **)v44;
          if (*(_QWORD *)v44
            && (v47 = *v46, LODWORD(v46) = *v46 == 1.0, *(_BYTE *)(v44 + 10))
            && (v47 != 0.0 ? (v48 = v47 == 1.0) : (v48 = 1), !v48)
            || (v49 = *(unsigned __int8 *)(v44 + v46 + 11), v47 = 0.0, v49 == 2))
          {
            v681[0] = 1;
            LOBYTE(v676) = 1;
            v50 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v44, 0x1A4u, v45, 0, v681);
            v51 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v44, 0x1A4u, v45, 1u, &v676);
            if (v47 < 1.0)
              LOBYTE(v51) = v50;
          }
          else
          {
            LOBYTE(v51) = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(_QWORD *)(*(_QWORD *)v685 + 24), 0x1A4u, v45, v49, 0);
          }
          v52 = v51 == 0;
        }
        else
        {
          v52 = 0;
        }
        v53 = v636;
        v661 = v52;
        if ((v28 & 1) == 0)
        {
          v54 = *(_QWORD *)(*(_QWORD *)v685 + 24);
          if ((int)*(float *)(v636 + 48) >= 0x17)
            v55 = 23;
          else
            v55 = (int)*(float *)(v636 + 48);
          v56 = *(float **)v54;
          if (*(_QWORD *)v54
            && (v57 = *v56, LODWORD(v56) = *v56 == 1.0, *(_BYTE *)(v54 + 10))
            && (v57 != 0.0 ? (v58 = v57 == 1.0) : (v58 = 1), !v58)
            || (v59 = *(unsigned __int8 *)(v54 + v56 + 11), v57 = 0.0, v59 == 2))
          {
            v681[0] = 1;
            LOBYTE(v676) = 1;
            v60 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v54, 0x68u, v55, 0, v681);
            v61 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v54, 0x68u, v55, 1u, &v676);
            if (v57 < 1.0)
              v61 = v60;
          }
          else
          {
            v61 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(_QWORD *)(*(_QWORD *)v685 + 24), 0x68u, v55, v59, 0);
          }
          *(_DWORD *)v659 = v61;
          v53 = v636;
        }
        if ((v28 & 1) == 0)
        {
          v62 = *(_QWORD *)(*(_QWORD *)v685 + 24);
          if ((int)*(float *)(v53 + 48) >= 0x17)
            v63 = 23;
          else
            v63 = (int)*(float *)(v53 + 48);
          v64 = *(float **)v62;
          if (*(_QWORD *)v62
            && (v65 = *v64, LODWORD(v64) = *v64 == 1.0, *(_BYTE *)(v62 + 10))
            && (v65 != 0.0 ? (v66 = v65 == 1.0) : (v66 = 1), !v66)
            || (v67 = *(unsigned __int8 *)(v62 + v64 + 11), v65 = 0.0, v67 == 2))
          {
            v681[0] = 1;
            LOBYTE(v676) = 1;
            v68 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v62, 0x13Fu, v63, 0, v681);
            v69 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v62, 0x13Fu, v63, 1u, &v676);
            if (v65 < 1.0)
              LOBYTE(v69) = v68;
          }
          else
          {
            v69 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(_QWORD *)(*(_QWORD *)v685 + 24), 0x13Fu, v63, v67, 0);
          }
          v659[16] = v69;
        }
        *(_WORD *)v681 = 0;
        if (gss::FeatureAttributeSet::getValueForAttributeKey((uint64_t *)((*v660)[2 * v25] + 240), 187, v681))v663 = 1;
        v28 = 1;
        goto LABEL_19;
      }
LABEL_40:
      v40 = *(float **)v38;
      if (*(_QWORD *)v38
        && (v41 = *v40, LODWORD(v40) = *v40 == 1.0, *(_BYTE *)(v38 + 10))
        && (v41 != 0.0 ? (v42 = v41 == 1.0) : (v42 = 1), !v42)
        || (v43 = *(unsigned __int8 *)(v38 + v40 + 11), v43 == 2))
      {
        v681[0] = 1;
        LOBYTE(v676) = 1;
        gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v38, 0x8Au, 0, v681);
        gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v38, 0x8Au, 1u, &v676);
      }
      else
      {
        gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v38, 0x8Au, v43, 0);
      }
      goto LABEL_50;
    }
LABEL_19:
    gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)v685);
    v25 = ++v26;
    v24 = *v660;
  }
  while (v26 < (unint64_t)(((char *)v660[1] - (char *)*v660) >> 4));
  v14 = v631;
  if ((v27 & 1) == 0)
  {
LABEL_111:

    goto LABEL_112;
  }
  v70 = *v24;
  v71 = (std::__shared_weak_count *)v24[1];
  *(_QWORD *)v681 = *v24;
  *(_QWORD *)&v681[8] = v71;
  if (v71)
  {
    v72 = (unint64_t *)&v71->__shared_owners_;
    do
      v73 = __ldxr(v72);
    while (__stxr(v73 + 1, v72));
    *(_QWORD *)&v685[8] = v71;
    v74 = v636;
    do
      v75 = __ldxr(v72);
    while (__stxr(v75 + 1, v72));
  }
  else
  {
    *(_QWORD *)&v685[8] = 0;
    v74 = v636;
  }
  *(_QWORD *)v685 = v70;
  *(_OWORD *)&v685[16] = 0uLL;
  v686.i8[0] = 0;
  if (v70)
    LODWORD(v70) = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v70 + 48))(v70, &v685[16]);
  v686.i8[0] = v70;
  if (v71)
  {
    v85 = (unint64_t *)&v71->__shared_owners_;
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
    LODWORD(v70) = v686.u8[0];
  }
  LOBYTE(v683[0]) = 0;
  if ((_DWORD)v70)
  {
    v87 = *(_QWORD *)(*(_QWORD *)v685 + 24);
    v88 = *(unsigned __int8 *)(v87 + 12);
    if (v88 != 2)
      goto LABEL_141;
    if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(*(_QWORD *)(*(_QWORD *)v685 + 24), 0x8Au, 0) & 1) != 0)
      goto LABEL_142;
    v88 = 1;
LABEL_141:
    if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v87, 0x8Au, v88))
    {
LABEL_142:
      v89 = *(float **)v87;
      if (*(_QWORD *)v87
        && (v90 = *v89, LODWORD(v89) = *v89 == 1.0, *(_BYTE *)(v87 + 10))
        && (v90 != 0.0 ? (v91 = v90 == 1.0) : (v91 = 1), !v91)
        || (v92 = *(unsigned __int8 *)(v87 + v89 + 11), v90 = 0.0, v92 == 2))
      {
        v681[0] = 1;
        LOBYTE(v676) = 1;
        v93 = gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v87, 0x8Au, 0, v681);
        v94 = gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v87, 0x8Au, 1u, &v676);
        if (v90 >= 1.0)
          v95 = (int *)v94;
        else
          v95 = (int *)v93;
        v96 = *v95;
      }
      else
      {
        v96 = *(_DWORD *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v87, 0x8Au, v92, 0);
      }
    }
    else
    {
      LOBYTE(v96) = 0;
    }
    v657[0] = (*(uint64_t (**)(unsigned __int8 *, _QWORD, _QWORD *))(*(_QWORD *)a7 + 24))(a7, v96, v683);
    v99 = *(_QWORD *)(*(_QWORD *)v685 + 24);
    v100 = fminf(fmaxf(*(float *)(v74 + 48), 0.0), 23.0);
    v101 = *(float **)v99;
    if (*(_QWORD *)v99
      && (v102 = *v101, LODWORD(v101) = *v101 == 1.0, *(_BYTE *)(v99 + 10))
      && (v102 != 0.0 ? (v103 = v102 == 1.0) : (v103 = 1), !v103)
      || (v104 = *(unsigned __int8 *)(v99 + v101 + 11), v102 = 0.0, v104 == 2))
    {
      v681[0] = 1;
      LOBYTE(v676) = 1;
      gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v99, 0x149u, 0, v681, v100);
      v106 = v105;
      gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v99, 0x149u, 1u, (BOOL *)&v676, v100);
      v108 = v106 + (float)((float)(v107 - v106) * v102);
    }
    else
    {
      gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(*(_QWORD *)(*(_QWORD *)v685 + 24), 0x149u, v104, 0, v100);
      v108 = v109;
    }
    v110 = *(double *)(v74 + 64);
    v111 = v110 * (*(float (**)(unsigned __int8 *))(*(_QWORD *)a7 + 80))(a7) * v108;
    *(float *)&v659[4] = v111;
    v112 = *(_QWORD *)(*(_QWORD *)v685 + 24);
    v113 = *(float **)v112;
    if (*(_QWORD *)v112)
      v114 = *(_BYTE *)(v112 + 9) != 0;
    else
      v114 = 0;
    if (v29 <= 0.0)
      v114 = 0;
    v655 = v114;
    if ((int)*(float *)(v74 + 48) >= 0x17)
      v115 = 23;
    else
      v115 = (int)*(float *)(v74 + 48);
    if (v113
      && (v116 = *v113, LODWORD(v113) = *v113 == 1.0, *(_BYTE *)(v112 + 10))
      && (v116 != 0.0 ? (v117 = v116 == 1.0) : (v117 = 1), !v117)
      || (v118 = *(unsigned __int8 *)(v112 + v113 + 11), v116 = 0.0, v118 == 2))
    {
      v681[0] = 1;
      LOBYTE(v676) = 1;
      v119 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v112, 0x1A4u, v115, 0, v681);
      v120 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v112, 0x1A4u, v115, 1u, &v676);
      if (v116 < 1.0)
        LOBYTE(v120) = v119;
    }
    else
    {
      v120 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v112, 0x1A4u, v115, v118, 0);
    }
    v662 = v120;
    v121 = *(_QWORD *)(*(_QWORD *)v685 + 24);
    v122 = *(unsigned __int8 *)(v121 + 11);
    if (v122 == 2)
    {
      v681[0] = 1;
      LOBYTE(v676) = 1;
      v123 = (unsigned __int8 *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<BOOL>(v121, 0x6Cu, 0, v681);
      gss::RenderStyle<gss::PropertyID>::styleValueForKey<BOOL>(v121, 0x6Cu, 1u, &v676);
      v124 = *v123;
    }
    else
    {
      v124 = *(unsigned __int8 *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<BOOL>(*(_QWORD *)(*(_QWORD *)v685 + 24), 0x6Cu, v122, 0);
    }
    v125 = *(_QWORD *)(*(_QWORD *)v685 + 24);
    v126 = *(unsigned __int8 *)(v125 + 12);
    if (v126 == 2)
    {
      v681[0] = 1;
      LOBYTE(v676) = 1;
      v127 = (unsigned __int8 *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<BOOL>(v125, 0x6Cu, 0, v681);
      gss::RenderStyle<gss::PropertyID>::styleValueForKey<BOOL>(v125, 0x6Cu, 1u, &v676);
      v128 = *v127;
      v129 = *(float *)(v74 + 48);
      if (!v124)
        goto LABEL_192;
LABEL_197:
      gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)v681, *(_QWORD *)(*(_QWORD *)v685 + 24), 0x5Cu, 0, fminf(fmaxf(v129, 0.0), 23.0));
    }
    else
    {
      v128 = *(unsigned __int8 *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<BOOL>(*(_QWORD *)(*(_QWORD *)v685 + 24), 0x6Cu, v126, 0);
      v129 = *(float *)(v74 + 48);
      if (v124)
        goto LABEL_197;
LABEL_192:
      if ((int)v129 >= 0x17)
        v130 = 23;
      else
        v130 = (int)v129;
      gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)v681, *(_QWORD *)(*(_QWORD *)v685 + 24), 0x5Cu, v130, 0, 0);
    }
    v131 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v681)), (float32x4_t)vdupq_n_s32(0x37800080u));
    v642 = v131;
    v132 = *(float *)(v74 + 48);
    v133 = *(_QWORD *)(*(_QWORD *)v685 + 24);
    if ((int)v132 >= 0x17)
      v134 = 23;
    else
      v134 = (int)v132;
    v135 = *(unsigned __int8 *)(v133 + 11);
    v615 = v131;
    v98 = v131.f32[3];
    if (v135 == 2)
    {
      if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v133, 0x14Cu, v134, 0) & 1) == 0)
      {
        v135 = 1;
        goto LABEL_204;
      }
LABEL_205:
      if (v124)
        gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)v681, v133, 0x14Cu, 0, fminf(fmaxf(v132, 0.0), 23.0));
      else
        gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)v681, v133, 0x14Cu, v134, 0, 0);
      v136 = (float)*(unsigned __int16 *)&v681[6] * 0.000015259;
      v137 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v681)), (float32x4_t)vdupq_n_s32(0x37800080u));
      LODWORD(v645) = v137.i32[2];
      v644 = v137.i64[0];
      v132 = *(float *)(v74 + 48);
      v133 = *(_QWORD *)(*(_QWORD *)v685 + 24);
      if ((int)v132 >= 0x17)
        v134 = 23;
      else
        v134 = (int)v132;
    }
    else
    {
LABEL_204:
      if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v133, 0x14Cu, v134, v135))
        goto LABEL_205;
      LODWORD(v645) = v615.i32[2];
      v644 = v615.i64[0];
      v136 = v98;
    }
    *((float *)&v645 + 1) = v136;
    v138 = *(unsigned __int8 *)(v133 + 12);
    v139 = v138;
    if (v138 == 2)
    {
      if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v133, 0x5Cu, v134, 0) & 1) == 0)
      {
        v139 = 1;
        goto LABEL_215;
      }
LABEL_216:
      if (v128)
        gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)v681, v133, 0x5Cu, 1u, fminf(fmaxf(v132, 0.0), 23.0));
      else
        gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)v681, v133, 0x5Cu, v134, 1u, 0);
      v97 = (float)*(unsigned __int16 *)&v681[6] * 0.000015259;
      v140 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v681)), (float32x4_t)vdupq_n_s32(0x37800080u));
      v638.i32[2] = v140.i32[2];
      v638.i64[0] = v140.i64[0];
      v132 = *(float *)(v74 + 48);
      v133 = *(_QWORD *)(*(_QWORD *)v685 + 24);
      v138 = *(unsigned __int8 *)(v133 + 12);
      if ((int)v132 >= 0x17)
        v134 = 23;
      else
        v134 = (int)v132;
    }
    else
    {
LABEL_215:
      if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v133, 0x5Cu, v134, v139))
        goto LABEL_216;
      v638.i64[0] = v615.i64[0];
      v638.i32[2] = v615.i32[2];
      v97 = v98;
    }
    v638.f32[3] = v97;
    if (v138 == 2)
    {
      if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v133, 0x14Cu, v134, 0) & 1) == 0)
      {
        v138 = 1;
        goto LABEL_226;
      }
LABEL_227:
      if (v128)
        gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)v681, v133, 0x14Cu, 1u, fminf(fmaxf(v132, 0.0), 23.0));
      else
        gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)v681, v133, 0x14Cu, v134, 1u, 0);
      v640 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v681)), (float32x4_t)vdupq_n_s32(0x37800080u));
    }
    else
    {
LABEL_226:
      if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v133, 0x14Cu, v134, v138))
        goto LABEL_227;
      v640 = v638;
      v97 = v638.f32[3];
    }
  }
  else
  {
    v642 = 0uLL;
    v644 = 0;
    v645 = 0;
    v638 = 0uLL;
    v97 = 0.0;
    v98 = 0.0;
    v640 = 0uLL;
  }
  v657[1] = *(_BYTE *)(v74 + 52) + LOBYTE(v683[0]);
  v658 = a7[10] + LOBYTE(v683[0]);
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)v685);
  v141 = *(id *)(v74 + 80);
  v142 = objc_msgSend(v141, "sourceTexture");
  if (v142)
    v143 = (float32x2_t)v142;
  else
    v143 = v653;
  v641 = v143;

  v144 = *(id *)(v636 + 80);
  v145 = objc_msgSend(v144, "targetTexture");
  if (v145)
    v146 = (float32x2_t)v145;
  else
    v146 = v653;
  v637 = v146;

  v147 = *(id *)(v636 + 80);
  v148 = objc_msgSend(v147, "sourceRoofTexture");
  if (v148)
    v149 = v148;
  else
    v149 = (uint64_t)v143;
  v643 = v149;

  v150 = *(id *)(v636 + 80);
  v151 = objc_msgSend(v150, "targetRoofTexture");
  if (v151)
    v152 = v151;
  else
    v152 = (uint64_t)v146;
  v639 = v152;

  *(_DWORD *)&v659[8] = 1065353216;
  v153 = v98 >= 1.0 && (v97 >= 1.0 || !v655);
  v656 = v153;
  v155 = (VKPolygonGroup *)*(id *)(v636 + 80);
  md::PolygonRenderResources::worldTransformForPolygonGroup((md::PolygonRenderResources *)v685, v155, *(float *)(v636 + 44));
  v649 = *(_OWORD *)v685;
  v650 = *(_OWORD *)&v685[16];
  v651 = v686;
  v652 = v687;

  v156 = *(id *)(v636 + 80);
  v157 = (*(uint64_t (**)(unsigned __int8 *, id))(*(_QWORD *)a7 + 40))(a7, v156);

  v158 = md::PolygonViewConstantsFrameCache::pop(v622);
  v160 = *v158;
  v159 = v158[1];
  if (v159)
  {
    v161 = (unint64_t *)(v159 + 8);
    do
      v162 = __ldxr(v161);
    while (__stxr(v162 + 1, v161));
  }
  v163 = (std::__shared_weak_count *)*((_QWORD *)&v646 + 1);
  *(_QWORD *)&v646 = v160;
  *((_QWORD *)&v646 + 1) = v159;
  v164 = v636;
  if (v163)
  {
    v165 = (unint64_t *)&v163->__shared_owners_;
    do
      v166 = __ldaxr(v165);
    while (__stlxr(v166 - 1, v165));
    if (!v166)
    {
      ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
      std::__shared_weak_count::__release_weak(v163);
    }
  }
  v167 = *(_QWORD *)(v636 + 8);
  v682 = 0;
  *(_OWORD *)v681 = 0uLL;
  v168 = *(_QWORD *)(v167 + 8);
  if ((*(_BYTE *)(v167 + 16) & 2) == 0)
  {
    v169 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
    if (v169 != -1)
    {
      *(_QWORD *)v685 = v683;
      *(_QWORD *)&v676 = v685;
      std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v676, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
    }
  }
  v170.n128_u64[0] = 0;
  if (v168)
    v171 = *(_DWORD **)(v167 + 72);
  else
    v171 = 0;
  v170.n128_u64[1] = v167;
  if (v682)
  {
    v172 = *(_OWORD *)&v681[16];
    if (*(_QWORD *)&v681[24] != *(_QWORD *)&v681[16])
    {
      v173 = *(_QWORD **)&v681[8];
      v174 = v681[32];
      v175 = v681[33];
      if (*(_QWORD *)v681 && *(_BYTE *)(*(_QWORD *)&v681[8] + 17) != 2)
      {
        v616 = v170;
        (*(void (**)(void))(**(_QWORD **)v681 + 64))();
        v170 = v616;
      }
      if (v174 && !v175)
      {
        v177 = v173[7];
        v176 = v173[8];
        if (v176 == v177)
          v177 = v173[10] - v173[9];
        if ((unint64_t)v172 < v177)
          v177 = v172;
        if (v176 <= *((_QWORD *)&v172 + 1))
          v176 = *((_QWORD *)&v172 + 1);
        if (v176 == v177)
          v176 = v177 + v173[10] - v173[9];
        v173[7] = v177;
        v173[8] = v176;
      }
    }
  }
  *(__n128 *)v681 = v170;
  *(_QWORD *)&v681[16] = 0;
  *(_QWORD *)&v681[24] = v168;
  v682 = v171;
  *(_WORD *)&v681[32] = 0;
  v676 = 0uLL;
  v178 = *(__int128 **)(v646 + 8);
  *(_QWORD *)&v179 = 0;
  *((_QWORD *)&v179 + 1) = v646;
  if (v178)
    v180 = *(_QWORD *)(v646 + 72);
  else
    v180 = 0;
  v676 = v179;
  v677 = 0;
  v678 = v178;
  v680 = (float32x4_t *)v180;
  v679 = 1;
  *(_DWORD *)(v180 + 64) = v171[16];
  if (v157)
  {
    v617 = v179;
    v181 = *(_QWORD *)v636 + 88;
    v182 = *(id *)(v636 + 80);
    (*(void (**)(_BYTE *__return_ptr, unsigned __int8 *, uint64_t, _DWORD *, uint64_t, id, uint64_t, float))(*(_QWORD *)a7 + 48))(v685, a7, v636 + 24, v171, v181, v182, v636 + 104, *(float *)(v636 + 44));
    *(_OWORD *)v180 = *(_OWORD *)v685;
    *(_OWORD *)(v180 + 16) = *(_OWORD *)&v685[16];
    *(float32x4_t *)(v180 + 32) = v686;
    *(float32x4_t *)(v180 + 48) = v687;

    v164 = v636;
    v179 = v617;
    if (!v178)
      goto LABEL_295;
  }
  else
  {
    *(_DWORD *)v180 = *v171;
    *(_DWORD *)(v180 + 4) = v171[1];
    *(_DWORD *)(v180 + 8) = v171[2];
    *(_DWORD *)(v180 + 12) = v171[3];
    *(_DWORD *)(v180 + 16) = v171[4];
    *(_DWORD *)(v180 + 20) = v171[5];
    *(_DWORD *)(v180 + 24) = v171[6];
    *(_DWORD *)(v180 + 28) = v171[7];
    *(_DWORD *)(v180 + 32) = v171[8];
    *(_DWORD *)(v180 + 36) = v171[9];
    *(_DWORD *)(v180 + 40) = v171[10];
    *(_DWORD *)(v180 + 44) = v171[11];
    *(_DWORD *)(v180 + 48) = v171[12];
    *(_DWORD *)(v180 + 52) = v171[13];
    *(_DWORD *)(v180 + 56) = v171[14];
    *(_DWORD *)(v180 + 60) = v171[15];
    if (!v178)
      goto LABEL_295;
  }
  v183 = *((_QWORD *)&v179 + 1);
  if ((_QWORD)v179 && *(_BYTE *)(*((_QWORD *)&v179 + 1) + 17) != 2)
    (*(void (**)(void))(*(_QWORD *)v179 + 64))();
  v184 = *(__int128 **)(v183 + 64);
  if (v184 <= v178)
    v184 = v178;
  *(_QWORD *)(v183 + 56) = 0;
  *(_QWORD *)(v183 + 64) = v184;
LABEL_295:
  v186 = *(_QWORD *)(v164 + 24);
  v185 = *(_QWORD *)(v164 + 32);
  if (v185)
  {
    v187 = (unint64_t *)(v185 + 8);
    do
      v188 = __ldxr(v187);
    while (__stxr(v188 + 1, v187));
  }
  v189 = (std::__shared_weak_count *)*((_QWORD *)&v648 + 1);
  *(_QWORD *)&v648 = v186;
  *((_QWORD *)&v648 + 1) = v185;
  if (v189)
  {
    v190 = (unint64_t *)&v189->__shared_owners_;
    do
      v191 = __ldaxr(v190);
    while (__stlxr(v191 - 1, v190));
    if (!v191)
    {
      ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
      std::__shared_weak_count::__release_weak(v189);
    }
  }
  v170.n128_u32[0] = *(_DWORD *)&v659[4];
  if (*(float *)&v659[4] <= 0.00000011921)
  {
    if (v682)
      goto LABEL_327;
  }
  else
  {
    v192 = md::PolygonViewConstantsFrameCache::pop(v622);
    v194 = *v192;
    v193 = v192[1];
    if (v193)
    {
      v195 = (unint64_t *)(v193 + 8);
      do
        v196 = __ldxr(v195);
      while (__stxr(v196 + 1, v195));
    }
    v197 = (std::__shared_weak_count *)*((_QWORD *)&v647 + 1);
    *(_QWORD *)&v647 = v194;
    *((_QWORD *)&v647 + 1) = v193;
    if (v197)
    {
      v198 = (unint64_t *)&v197->__shared_owners_;
      do
        v199 = __ldaxr(v198);
      while (__stlxr(v199 - 1, v198));
      if (!v199)
      {
        ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
        std::__shared_weak_count::__release_weak(v197);
      }
    }
    v676 = 0uLL;
    v200 = *(__int128 **)(v647 + 8);
    *(_QWORD *)&v201 = 0;
    *((_QWORD *)&v201 + 1) = v647;
    if (v200)
      v202 = *(float32x4_t **)(v647 + 72);
    else
      v202 = 0;
    v676 = v201;
    v677 = 0;
    v678 = v200;
    v680 = v202;
    v679 = 1;
    v203 = v682;
    v202[4].i32[0] = v682[16];
    if (v157)
    {
      *(_OWORD *)v623 = v201;
      v204 = *(_QWORD *)v164 + 88;
      v205 = *(id *)(v164 + 80);
      (*(void (**)(_BYTE *__return_ptr, unsigned __int8 *, uint64_t, _DWORD *, uint64_t, id, uint64_t, float))(*(_QWORD *)a7 + 48))(v685, a7, v164 + 24, v203, v204, v205, v164 + 104, *(float *)(v164 + 44));
      v206.i64[0] = *(_QWORD *)v685;
      v207 = v686;
      v208 = (int8x16_t)vmulq_f32(*(float32x4_t *)&v685[8], (float32x4_t)xmmword_19FFB3850);
      v206.i64[1] = *(_QWORD *)&v685[24];
      v209 = (int8x16_t)vmulq_f32(*(float32x4_t *)&v685[8], (float32x4_t)xmmword_19FFB3480);
      v210 = vmlaq_n_f32(v687, v686, *(float *)&v659[4]);
      *v202 = vmlaq_f32((float32x4_t)vextq_s8(v208, v208, 8uLL), (float32x4_t)xmmword_19FFB3850, v206);
      v202[1] = vmlaq_f32((float32x4_t)vextq_s8(v209, v209, 8uLL), (float32x4_t)xmmword_19FFB3480, v206);
      v202[2] = v207;
      v202[3] = v210;

      v201 = *(_OWORD *)v623;
    }
    else
    {
      v170 = *(__n128 *)&v659[4];
      v211.i64[0] = *(_QWORD *)v203;
      v212 = *(float32x4_t *)(v203 + 2);
      v213 = *((float32x4_t *)v203 + 2);
      v214 = (int8x16_t)vmulq_f32(v212, (float32x4_t)xmmword_19FFB3850);
      v211.i64[1] = *((_QWORD *)v203 + 3);
      v215 = (int8x16_t)vmulq_f32(v212, (float32x4_t)xmmword_19FFB3480);
      v216 = vmlaq_n_f32(*((float32x4_t *)v203 + 3), v213, *(float *)&v659[4]);
      *v202 = vmlaq_f32((float32x4_t)vextq_s8(v214, v214, 8uLL), (float32x4_t)xmmword_19FFB3850, v211);
      v202[1] = vmlaq_f32((float32x4_t)vextq_s8(v215, v215, 8uLL), (float32x4_t)xmmword_19FFB3480, v211);
      v202[2] = v213;
      v202[3] = v216;
    }
    if (v200)
    {
      v217 = *((_QWORD *)&v201 + 1);
      if ((_QWORD)v201 && *(_BYTE *)(*((_QWORD *)&v201 + 1) + 17) != 2)
        (*(void (**)(void))(*(_QWORD *)v201 + 64))();
      v218 = *(__int128 **)(v217 + 64);
      if (v218 <= v200)
        v218 = v200;
      *(_QWORD *)(v217 + 56) = 0;
      *(_QWORD *)(v217 + 64) = v218;
    }
LABEL_327:
    v219 = *(_OWORD *)&v681[16];
    if (*(_QWORD *)&v681[24] != *(_QWORD *)&v681[16])
    {
      v220 = *(_QWORD **)&v681[8];
      v221 = v681[32];
      v222 = v681[33];
      if (*(_QWORD *)v681 && *(_BYTE *)(*(_QWORD *)&v681[8] + 17) != 2)
        (*(void (**)(__n128))(**(_QWORD **)v681 + 64))(v170);
      if (v221 && !v222)
      {
        v224 = v220[7];
        v223 = v220[8];
        if (v223 == v224)
          v224 = v220[10] - v220[9];
        if ((unint64_t)v219 < v224)
          v224 = v219;
        if (v223 <= *((_QWORD *)&v219 + 1))
          v223 = *((_QWORD *)&v219 + 1);
        if (v223 == v224)
          v223 = v224 + v220[10] - v220[9];
        v220[7] = v224;
        v220[8] = v223;
      }
    }
  }

  v225 = v636;
  v632 = (ggl::CommandBuffer *)md::_commandBufferForConfiguration((uint64_t)a7, (uint64_t)&v646, v618, *(unsigned __int8 *)(v636 + 96));
  v227 = (uint64_t *)v635;
  if (!v632)
    goto LABEL_699;
  v228 = a10[3];
  if (!v228)
    goto LABEL_346;
  if ((_QWORD *)v228 == a10)
  {
    v675 = v674;
    (*(void (**)(_QWORD *, _QWORD *))(*a10 + 24))(a10, v674);
  }
  else
  {
    v228 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v228 + 16))(v228);
LABEL_346:
    v675 = (_QWORD *)v228;
  }
  v229 = *(unsigned __int8 *)(v636 + 96);
  v230 = a7[8];
  (*(void (**)(_BYTE *__return_ptr, unsigned __int8 *, _QWORD))(*(_QWORD *)a7 + 88))(v664, a7, *(_QWORD *)(v636 + 80));
  if (v229)
    v231 = v230 == 0;
  else
    v231 = 0;
  v232 = v231;
  if (v664[0])
    v233 = v664[1];
  else
    v233 = v232;
  v234 = (uint64_t)v675;
  if (v675)
  {
    if (v675 != v674)
    {
      v234 = (*(uint64_t (**)(void))(*v675 + 16))();
      goto LABEL_360;
    }
    v678 = &v676;
    (*(void (**)(_QWORD *, __int128 *))(v674[0] + 24))(v674, &v676);
  }
  else
  {
LABEL_360:
    v678 = (__int128 *)v234;
  }
  LOBYTE(v683[0]) = 0;
  if (v655)
  {
    v225 = v636;
    v235 = md::animatingPolygonStrokePipelineSetup<md::PolygonTileData,md::Stroke1StyleProperties>((uint64_t *)v635, v636, (uint64_t)&v646, &v641, &v637, v683);
    *(_QWORD *)v681 = v636;
    *(_QWORD *)&v681[8] = v635;
    *(_QWORD *)&v681[16] = &v676;
    *(_QWORD *)&v681[24] = v632;
    if (!v235)
      goto LABEL_466;
LABEL_383:
    v254 = v657[1];
    v255 = LOBYTE(v683[0]);
    if (LOBYTE(v683[0]))
    {
      if (v657[0])
      {
        v256 = md::PolygonRenderResources::renderStateForBlendingEqual((md::PolygonRenderResources *)v635, v657[1], v658);
      }
      else
      {
        v256 = v635 + 1088;
        v254 = v658;
      }
      v257 = a7;
    }
    else
    {
      v257 = a7;
      v256 = *(_QWORD *)(v635 + 8 * (a7[8] | (2 * v657[0]) | (16 * v233)) + 272);
    }
    *(_QWORD *)v685 = &off_1E42B59B0;
    *(_QWORD *)&v685[16] = "";
    v688 = 0u;
    v689 = 0u;
    v690 = vdupq_n_s64(1uLL);
    v691 = 0;
    v687.i32[2] = 1065353216;
    v686.i32[2] = v254;
    *(_QWORD *)&v685[24] = v256;
    v686.i64[0] = v235;
    v258 = *(_QWORD *)(*(_QWORD *)v225 + 384);
    if (v258)
      v259 = v258 + 168;
    else
      v259 = 0;
    v687.i64[0] = (*(uint64_t (**)(unsigned __int8 *, BOOL, _QWORD, _QWORD, uint64_t, uint64_t, BOOL, uint64_t *, _QWORD))(*(_QWORD *)v257 + 32))(v257, v656, *(unsigned int *)v659, 0, v259, 1, *(_QWORD *)&v641 != *(_QWORD *)&v653, *v660, 0);
    md::generateStrokeRenderItem<md::PolygonTileData,md::Stroke1StyleProperties>(ggl::CommandBuffer *,md::PolygonRenderResources &,md::PolygonLayoutCharacteristics const&,md::PolygonGroupLayoutInfo<md::PolygonTileData> const&,md::PolygonConfiguration const&,md::PolygonBlendingConfiguration const&,md::PolygonBlendingConfiguration const&,std::function<BOOL ()(unsigned long long)>,md::PolygonLayoutCharacteristics::StrokeState,md::PolygonRenderDepthType)::{lambda(ggl::RenderItem const&)#1}::operator()(v681, (uint64_t)v685);
    if (v255)
    {
      if (v657[0])
        v260 = v657[1];
      else
        v260 = 0;
      v261 = md::PolygonRenderResources::renderStateForBlendingEqual((md::PolygonRenderResources *)v635, v658, v260);
      if (v655)
      {
        v262 = (_QWORD *)md::animatingPolygonStrokePipelineSetup<md::PolygonTileData,md::Stroke1StyleProperties>((uint64_t *)v635, v225, (uint64_t)&v646, &v641, &v637, v683);
        v263 = v262;
        v264 = *(_QWORD *)(v635 + 64);
        v265 = *(std::__shared_weak_count **)(v635 + 72);
        if (v265)
        {
          v266 = (unint64_t *)&v265->__shared_owners_;
          do
            v267 = __ldxr(v266);
          while (__stxr(v267 + 1, v266));
        }
        if (v264 && **(_QWORD **)(v264 + 40) == v262[1])
        {
          v296 = v262[2];
          if (v296 && v296 != v264)
            ggl::PipelineSetup::resetData((uint64_t)v262);
          if (v265)
          {
            v297 = (unint64_t *)&v265->__shared_owners_;
            do
              v298 = __ldxr(v297);
            while (__stxr(v298 + 1, v297));
          }
          v268 = (std::__shared_weak_count *)v263[3];
          v263[2] = v264;
          v263[3] = v265;
          if (v268)
          {
            v299 = (unint64_t *)&v268->__shared_owners_;
            do
              v270 = __ldaxr(v299);
            while (__stlxr(v270 - 1, v299));
            goto LABEL_443;
          }
        }
        else
        {
          v268 = (std::__shared_weak_count *)v262[3];
          v262[2] = 0;
          v262[3] = 0;
          if (v268)
          {
            v269 = (unint64_t *)&v268->__shared_owners_;
            do
              v270 = __ldaxr(v269);
            while (__stlxr(v270 - 1, v269));
LABEL_443:
            if (!v270)
            {
              ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
              std::__shared_weak_count::__release_weak(v268);
            }
          }
        }
        if (v265)
        {
          v300 = (unint64_t *)&v265->__shared_owners_;
          do
            v301 = __ldaxr(v300);
          while (__stlxr(v301 - 1, v300));
LABEL_463:
          if (!v301)
          {
            ((void (*)(std::__shared_weak_count *))v265->__on_zero_shared)(v265);
            std::__shared_weak_count::__release_weak(v265);
          }
        }
        goto LABEL_465;
      }
      v271 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(v635 + 176));
      v272 = *(_QWORD **)(v271 + 64);
      v273 = v646;
      *v272 = v646;
      v272[1] = 0;
      v274 = *(_QWORD **)(v271 + 160);
      v275 = *((_QWORD *)&v646 + 1);
      if (*((_QWORD *)&v646 + 1))
      {
        v276 = (unint64_t *)(*((_QWORD *)&v646 + 1) + 8);
        do
          v277 = __ldxr(v276);
        while (__stxr(v277 + 1, v276));
      }
      v278 = (std::__shared_weak_count *)v274[1];
      *v274 = v273;
      v274[1] = v275;
      if (v278)
      {
        v279 = (unint64_t *)&v278->__shared_owners_;
        do
          v280 = __ldaxr(v279);
        while (__stlxr(v280 - 1, v279));
        if (!v280)
        {
          ((void (*)(std::__shared_weak_count *))v278->__on_zero_shared)(v278);
          std::__shared_weak_count::__release_weak(v278);
        }
      }
      v281 = *(_QWORD *)(v271 + 64);
      *(_QWORD *)(v281 + 24) = 0;
      v282 = v648;
      *(_QWORD *)(v281 + 16) = v648;
      v283 = *(_QWORD *)(v271 + 160);
      v284 = *((_QWORD *)&v648 + 1);
      if (*((_QWORD *)&v648 + 1))
      {
        v285 = (unint64_t *)(*((_QWORD *)&v648 + 1) + 8);
        do
          v286 = __ldxr(v285);
        while (__stxr(v286 + 1, v285));
      }
      v287 = *(std::__shared_weak_count **)(v283 + 24);
      *(_QWORD *)(v283 + 16) = v282;
      *(_QWORD *)(v283 + 24) = v284;
      if (v287)
      {
        v288 = (unint64_t *)&v287->__shared_owners_;
        do
          v289 = __ldaxr(v288);
        while (__stlxr(v289 - 1, v288));
        if (!v289)
        {
          ((void (*)(std::__shared_weak_count *))v287->__on_zero_shared)(v287);
          std::__shared_weak_count::__release_weak(v287);
        }
      }
      **(_QWORD **)(v271 + 96) = v654;
      *(float32x2_t *)(*(_QWORD *)(v271 + 96) + 8) = v641;
      if (md::writeSourceConstants<md::PolygonTileData,md::Stroke1StyleProperties>(v225, (uint64_t)&v646, &v641, *(_QWORD *)(*(_QWORD *)(v271 + 64) + 32), v683))v263 = (_QWORD *)v271;
      else
        v263 = 0;
      v290 = *(_QWORD *)(v635 + 16);
      v265 = *(std::__shared_weak_count **)(v635 + 24);
      if (v265)
      {
        v291 = (unint64_t *)&v265->__shared_owners_;
        do
          v292 = __ldxr(v291);
        while (__stxr(v292 + 1, v291));
      }
      if (v290 && **(_QWORD **)(v290 + 40) == v263[1])
      {
        v302 = v263[2];
        if (v302 && v302 != v290)
          ggl::PipelineSetup::resetData((uint64_t)v263);
        if (v265)
        {
          v303 = (unint64_t *)&v265->__shared_owners_;
          do
            v304 = __ldxr(v303);
          while (__stxr(v304 + 1, v303));
        }
        v293 = (std::__shared_weak_count *)v263[3];
        v263[2] = v290;
        v263[3] = v265;
        if (v293)
        {
          v305 = (unint64_t *)&v293->__shared_owners_;
          do
            v295 = __ldaxr(v305);
          while (__stlxr(v295 - 1, v305));
          goto LABEL_458;
        }
      }
      else
      {
        v293 = (std::__shared_weak_count *)v263[3];
        v263[2] = 0;
        v263[3] = 0;
        if (v293)
        {
          v294 = (unint64_t *)&v293->__shared_owners_;
          do
            v295 = __ldaxr(v294);
          while (__stlxr(v295 - 1, v294));
LABEL_458:
          if (!v295)
          {
            ((void (*)(std::__shared_weak_count *))v293->__on_zero_shared)(v293);
            std::__shared_weak_count::__release_weak(v293);
          }
        }
      }
      if (v265)
      {
        v306 = (unint64_t *)&v265->__shared_owners_;
        do
          v301 = __ldaxr(v306);
        while (__stlxr(v301 - 1, v306));
        goto LABEL_463;
      }
LABEL_465:
      v686.i32[2] = v658;
      *(_QWORD *)&v685[24] = v261;
      v686.i64[0] = (uint64_t)v263;
      md::generateStrokeRenderItem<md::PolygonTileData,md::Stroke1StyleProperties>(ggl::CommandBuffer *,md::PolygonRenderResources &,md::PolygonLayoutCharacteristics const&,md::PolygonGroupLayoutInfo<md::PolygonTileData> const&,md::PolygonConfiguration const&,md::PolygonBlendingConfiguration const&,md::PolygonBlendingConfiguration const&,std::function<BOOL ()(unsigned long long)>,md::PolygonLayoutCharacteristics::StrokeState,md::PolygonRenderDepthType)::{lambda(ggl::RenderItem const&)#1}::operator()(v681, (uint64_t)v685);
    }
  }
  else
  {
    v225 = v636;
    v235 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(v635 + 176));
    v236 = *(_QWORD **)(v235 + 64);
    v237 = v646;
    *v236 = v646;
    v236[1] = 0;
    v238 = *(_QWORD **)(v235 + 160);
    v239 = *((_QWORD *)&v646 + 1);
    if (*((_QWORD *)&v646 + 1))
    {
      v240 = (unint64_t *)(*((_QWORD *)&v646 + 1) + 8);
      do
        v241 = __ldxr(v240);
      while (__stxr(v241 + 1, v240));
    }
    v242 = (std::__shared_weak_count *)v238[1];
    *v238 = v237;
    v238[1] = v239;
    if (v242)
    {
      v243 = (unint64_t *)&v242->__shared_owners_;
      do
        v244 = __ldaxr(v243);
      while (__stlxr(v244 - 1, v243));
      if (!v244)
      {
        ((void (*)(std::__shared_weak_count *))v242->__on_zero_shared)(v242);
        std::__shared_weak_count::__release_weak(v242);
      }
    }
    v245 = *(_QWORD *)(v235 + 64);
    *(_QWORD *)(v245 + 24) = 0;
    v246 = v648;
    *(_QWORD *)(v245 + 16) = v648;
    v247 = *(_QWORD *)(v235 + 160);
    v248 = *((_QWORD *)&v648 + 1);
    if (*((_QWORD *)&v648 + 1))
    {
      v249 = (unint64_t *)(*((_QWORD *)&v648 + 1) + 8);
      do
        v250 = __ldxr(v249);
      while (__stxr(v250 + 1, v249));
    }
    v251 = *(std::__shared_weak_count **)(v247 + 24);
    *(_QWORD *)(v247 + 16) = v246;
    *(_QWORD *)(v247 + 24) = v248;
    if (v251)
    {
      v252 = (unint64_t *)&v251->__shared_owners_;
      do
        v253 = __ldaxr(v252);
      while (__stlxr(v253 - 1, v252));
      if (!v253)
      {
        ((void (*)(std::__shared_weak_count *))v251->__on_zero_shared)(v251);
        std::__shared_weak_count::__release_weak(v251);
      }
    }
    **(_QWORD **)(v235 + 96) = v654;
    *(float32x2_t *)(*(_QWORD *)(v235 + 96) + 8) = v641;
    if (md::writeSourceConstants<md::PolygonTileData,md::Stroke1StyleProperties>(v636, (uint64_t)&v646, &v641, *(_QWORD *)(*(_QWORD *)(v235 + 64) + 32), v683))
    {
      *(_QWORD *)v681 = v636;
      *(_QWORD *)&v681[8] = v635;
      *(_QWORD *)&v681[16] = &v676;
      *(_QWORD *)&v681[24] = v632;
      goto LABEL_383;
    }
  }
LABEL_466:
  v307 = v678;
  if (v678 == &v676)
  {
    v308 = 4;
    v307 = &v676;
LABEL_470:
    (*(void (**)(void))(*(_QWORD *)v307 + 8 * v308))();
  }
  else if (v678)
  {
    v308 = 5;
    goto LABEL_470;
  }
  v309 = *v660;
  if (v660[1] == *v660)
    goto LABEL_616;
  v310 = 0;
  v311 = 0;
  v312 = fminf(fmaxf(*(float *)(v225 + 48), 0.0), 23.0);
  while (2)
  {
    v313 = *(_OWORD *)&v309[2 * v310];
    *(_OWORD *)v681 = v313;
    v314 = (std::__shared_weak_count *)*((_QWORD *)&v313 + 1);
    if (*((_QWORD *)&v313 + 1))
    {
      v315 = (unint64_t *)(*((_QWORD *)&v313 + 1) + 8);
      do
        v316 = __ldxr(v315);
      while (__stxr(v316 + 1, v315));
      *(_OWORD *)v685 = v313;
      do
        v317 = __ldxr(v315);
      while (__stxr(v317 + 1, v315));
      v318 = v313;
    }
    else
    {
      v318 = v313;
      *(_OWORD *)v685 = (unint64_t)v313;
    }
    *(_OWORD *)&v685[16] = 0uLL;
    v686.i8[0] = 0;
    if (v318)
      LODWORD(v318) = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v318 + 48))(v318, &v685[16]);
    v686.i8[0] = v318;
    if (v314)
    {
      v319 = (unint64_t *)&v314->__shared_owners_;
      do
        v320 = __ldaxr(v319);
      while (__stlxr(v320 - 1, v319));
      if (!v320)
      {
        ((void (*)(std::__shared_weak_count *))v314->__on_zero_shared)(v314);
        std::__shared_weak_count::__release_weak(v314);
      }
      LODWORD(v318) = v686.u8[0];
    }
    if (!(_DWORD)v318)
    {
      gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)v685);
      goto LABEL_474;
    }
    v321 = *(_QWORD *)(*(_QWORD *)v685 + 24);
    v322 = *(float **)v321;
    if (*(_QWORD *)v321
      && (v323 = *v322, LODWORD(v322) = *v322 == 1.0, *(_BYTE *)(v321 + 10))
      && (v323 != 0.0 ? (v324 = v323 == 1.0) : (v324 = 1), !v324)
      || (v325 = *(unsigned __int8 *)(v321 + v322 + 11), v323 = 0.0, v325 == 2))
    {
      v681[0] = 1;
      LOBYTE(v683[0]) = 1;
      gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v321, 0x194u, 0, v681, v312);
      v327 = v326;
      gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v321, 0x194u, 1u, (BOOL *)v683, v312);
      v329 = v327 + (float)((float)(v328 - v327) * v323);
    }
    else
    {
      gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(*(_QWORD *)(*(_QWORD *)v685 + 24), 0x194u, v325, 0, v312);
      v329 = v330;
    }
    gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)v685);
    if (v329 <= 0.0)
    {
LABEL_474:
      v310 = ++v311;
      v309 = *v660;
      if (v311 >= (unint64_t)(((char *)v660[1] - (char *)*v660) >> 4))
        goto LABEL_616;
      continue;
    }
    break;
  }
  v331 = (uint64_t)v675;
  if (!v675)
    goto LABEL_505;
  if (v675 == v674)
  {
    v684 = v683;
    (*(void (**)(_QWORD *, _QWORD *))(v674[0] + 24))(v674, v683);
  }
  else
  {
    v331 = (*(uint64_t (**)(void))(*v675 + 16))();
LABEL_505:
    v684 = (_QWORD *)v331;
  }
  v665 = 0;
  if (v655)
  {
    v225 = v636;
    v332 = md::animatingPolygonStrokePipelineSetup<md::PolygonTileData,md::Stroke2StyleProperties>((uint64_t *)v635, v636, (uint64_t *)&v646, &v641, &v637, &v665);
    *(_QWORD *)v681 = v636;
    *(_QWORD *)&v681[8] = v635;
    *(_QWORD *)&v681[16] = v683;
    *(_QWORD *)&v681[24] = v632;
    if (!v332)
      goto LABEL_611;
LABEL_528:
    v351 = v657[1];
    v352 = v665;
    if (v665)
    {
      if (v657[0])
      {
        v353 = md::PolygonRenderResources::renderStateForBlendingEqual((md::PolygonRenderResources *)v635, v657[1], v658);
      }
      else
      {
        v353 = v635 + 1088;
        v351 = v658;
      }
      v354 = a7;
    }
    else
    {
      v354 = a7;
      v353 = *(_QWORD *)(v635 + 8 * (a7[8] | (2 * v657[0]) | (16 * v233)) + 272);
    }
    *(_QWORD *)v685 = &off_1E42B59B0;
    *(_QWORD *)&v685[16] = "";
    v688 = 0u;
    v689 = 0u;
    v690 = vdupq_n_s64(1uLL);
    v691 = 0;
    v687.i32[2] = 1065353216;
    v686.i32[2] = v351;
    *(_QWORD *)&v685[24] = v353;
    v686.i64[0] = v332;
    v355 = *(_QWORD *)(*(_QWORD *)v225 + 384);
    if (v355)
      v356 = v355 + 168;
    else
      v356 = 0;
    v687.i64[0] = (*(uint64_t (**)(unsigned __int8 *, BOOL, _QWORD, _QWORD, uint64_t, uint64_t, BOOL, uint64_t *, _QWORD))(*(_QWORD *)v354 + 32))(v354, v656, *(unsigned int *)v659, 0, v356, 2, *(_QWORD *)&v641 != *(_QWORD *)&v653, *v660, 0);
    md::generateStrokeRenderItem<md::PolygonTileData,md::Stroke2StyleProperties>(ggl::CommandBuffer *,md::PolygonRenderResources &,md::PolygonLayoutCharacteristics const&,md::PolygonGroupLayoutInfo<md::PolygonTileData> const&,md::PolygonConfiguration const&,md::PolygonBlendingConfiguration const&,md::PolygonBlendingConfiguration const&,std::function<BOOL ()(unsigned long long)>,md::PolygonLayoutCharacteristics::StrokeState,md::PolygonRenderDepthType)::{lambda(ggl::RenderItem const&)#1}::operator()(v681, (uint64_t)v685);
    if (v352)
    {
      if (v657[0])
        v357 = v657[1];
      else
        v357 = 0;
      v358 = md::PolygonRenderResources::renderStateForBlendingEqual((md::PolygonRenderResources *)v635, v658, v357);
      if (v655)
      {
        v359 = (_QWORD *)md::animatingPolygonStrokePipelineSetup<md::PolygonTileData,md::Stroke2StyleProperties>((uint64_t *)v635, v225, (uint64_t *)&v646, &v641, &v637, &v665);
        v360 = v359;
        v361 = *(_QWORD *)(v635 + 64);
        v362 = *(std::__shared_weak_count **)(v635 + 72);
        if (v362)
        {
          v363 = (unint64_t *)&v362->__shared_owners_;
          do
            v364 = __ldxr(v363);
          while (__stxr(v364 + 1, v363));
        }
        if (v361 && **(_QWORD **)(v361 + 40) == v359[1])
        {
          v393 = v359[2];
          if (v393 && v393 != v361)
            ggl::PipelineSetup::resetData((uint64_t)v359);
          if (v362)
          {
            v394 = (unint64_t *)&v362->__shared_owners_;
            do
              v395 = __ldxr(v394);
            while (__stxr(v395 + 1, v394));
          }
          v365 = (std::__shared_weak_count *)v360[3];
          v360[2] = v361;
          v360[3] = v362;
          if (v365)
          {
            v396 = (unint64_t *)&v365->__shared_owners_;
            do
              v367 = __ldaxr(v396);
            while (__stlxr(v367 - 1, v396));
            goto LABEL_588;
          }
        }
        else
        {
          v365 = (std::__shared_weak_count *)v359[3];
          v359[2] = 0;
          v359[3] = 0;
          if (v365)
          {
            v366 = (unint64_t *)&v365->__shared_owners_;
            do
              v367 = __ldaxr(v366);
            while (__stlxr(v367 - 1, v366));
LABEL_588:
            if (!v367)
            {
              ((void (*)(std::__shared_weak_count *))v365->__on_zero_shared)(v365);
              std::__shared_weak_count::__release_weak(v365);
            }
          }
        }
        if (v362)
        {
          v397 = (unint64_t *)&v362->__shared_owners_;
          do
            v398 = __ldaxr(v397);
          while (__stlxr(v398 - 1, v397));
LABEL_608:
          if (!v398)
          {
            ((void (*)(std::__shared_weak_count *))v362->__on_zero_shared)(v362);
            std::__shared_weak_count::__release_weak(v362);
          }
        }
        goto LABEL_610;
      }
      v368 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(v635 + 176));
      v369 = *(_QWORD **)(v368 + 64);
      v370 = v646;
      *v369 = v646;
      v369[1] = 0;
      v371 = *(_QWORD **)(v368 + 160);
      v372 = *((_QWORD *)&v646 + 1);
      if (*((_QWORD *)&v646 + 1))
      {
        v373 = (unint64_t *)(*((_QWORD *)&v646 + 1) + 8);
        do
          v374 = __ldxr(v373);
        while (__stxr(v374 + 1, v373));
      }
      v375 = (std::__shared_weak_count *)v371[1];
      *v371 = v370;
      v371[1] = v372;
      if (v375)
      {
        v376 = (unint64_t *)&v375->__shared_owners_;
        do
          v377 = __ldaxr(v376);
        while (__stlxr(v377 - 1, v376));
        if (!v377)
        {
          ((void (*)(std::__shared_weak_count *))v375->__on_zero_shared)(v375);
          std::__shared_weak_count::__release_weak(v375);
        }
      }
      v378 = *(_QWORD *)(v368 + 64);
      *(_QWORD *)(v378 + 24) = 0;
      v379 = v648;
      *(_QWORD *)(v378 + 16) = v648;
      v380 = *(_QWORD *)(v368 + 160);
      v381 = *((_QWORD *)&v648 + 1);
      if (*((_QWORD *)&v648 + 1))
      {
        v382 = (unint64_t *)(*((_QWORD *)&v648 + 1) + 8);
        do
          v383 = __ldxr(v382);
        while (__stxr(v383 + 1, v382));
      }
      v384 = *(std::__shared_weak_count **)(v380 + 24);
      *(_QWORD *)(v380 + 16) = v379;
      *(_QWORD *)(v380 + 24) = v381;
      if (v384)
      {
        v385 = (unint64_t *)&v384->__shared_owners_;
        do
          v386 = __ldaxr(v385);
        while (__stlxr(v386 - 1, v385));
        if (!v386)
        {
          ((void (*)(std::__shared_weak_count *))v384->__on_zero_shared)(v384);
          std::__shared_weak_count::__release_weak(v384);
        }
      }
      **(_QWORD **)(v368 + 96) = v654;
      *(float32x2_t *)(*(_QWORD *)(v368 + 96) + 8) = v641;
      if (md::writeSourceConstants<md::PolygonTileData,md::Stroke2StyleProperties>(v225, (uint64_t)&v646, *(_QWORD *)(*(_QWORD *)(v368 + 64) + 32), &v665))v360 = (_QWORD *)v368;
      else
        v360 = 0;
      v387 = *(_QWORD *)(v635 + 16);
      v362 = *(std::__shared_weak_count **)(v635 + 24);
      if (v362)
      {
        v388 = (unint64_t *)&v362->__shared_owners_;
        do
          v389 = __ldxr(v388);
        while (__stxr(v389 + 1, v388));
      }
      if (v387 && **(_QWORD **)(v387 + 40) == v360[1])
      {
        v399 = v360[2];
        if (v399 && v399 != v387)
          ggl::PipelineSetup::resetData((uint64_t)v360);
        if (v362)
        {
          v400 = (unint64_t *)&v362->__shared_owners_;
          do
            v401 = __ldxr(v400);
          while (__stxr(v401 + 1, v400));
        }
        v390 = (std::__shared_weak_count *)v360[3];
        v360[2] = v387;
        v360[3] = v362;
        if (v390)
        {
          v402 = (unint64_t *)&v390->__shared_owners_;
          do
            v392 = __ldaxr(v402);
          while (__stlxr(v392 - 1, v402));
          goto LABEL_603;
        }
      }
      else
      {
        v390 = (std::__shared_weak_count *)v360[3];
        v360[2] = 0;
        v360[3] = 0;
        if (v390)
        {
          v391 = (unint64_t *)&v390->__shared_owners_;
          do
            v392 = __ldaxr(v391);
          while (__stlxr(v392 - 1, v391));
LABEL_603:
          if (!v392)
          {
            ((void (*)(std::__shared_weak_count *))v390->__on_zero_shared)(v390);
            std::__shared_weak_count::__release_weak(v390);
          }
        }
      }
      if (v362)
      {
        v403 = (unint64_t *)&v362->__shared_owners_;
        do
          v398 = __ldaxr(v403);
        while (__stlxr(v398 - 1, v403));
        goto LABEL_608;
      }
LABEL_610:
      v686.i32[2] = v658;
      *(_QWORD *)&v685[24] = v358;
      v686.i64[0] = (uint64_t)v360;
      md::generateStrokeRenderItem<md::PolygonTileData,md::Stroke2StyleProperties>(ggl::CommandBuffer *,md::PolygonRenderResources &,md::PolygonLayoutCharacteristics const&,md::PolygonGroupLayoutInfo<md::PolygonTileData> const&,md::PolygonConfiguration const&,md::PolygonBlendingConfiguration const&,md::PolygonBlendingConfiguration const&,std::function<BOOL ()(unsigned long long)>,md::PolygonLayoutCharacteristics::StrokeState,md::PolygonRenderDepthType)::{lambda(ggl::RenderItem const&)#1}::operator()(v681, (uint64_t)v685);
    }
  }
  else
  {
    v225 = v636;
    v332 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(v635 + 176));
    v333 = *(_QWORD **)(v332 + 64);
    v334 = v646;
    *v333 = v646;
    v333[1] = 0;
    v335 = *(_QWORD **)(v332 + 160);
    v336 = *((_QWORD *)&v646 + 1);
    if (*((_QWORD *)&v646 + 1))
    {
      v337 = (unint64_t *)(*((_QWORD *)&v646 + 1) + 8);
      do
        v338 = __ldxr(v337);
      while (__stxr(v338 + 1, v337));
    }
    v339 = (std::__shared_weak_count *)v335[1];
    *v335 = v334;
    v335[1] = v336;
    if (v339)
    {
      v340 = (unint64_t *)&v339->__shared_owners_;
      do
        v341 = __ldaxr(v340);
      while (__stlxr(v341 - 1, v340));
      if (!v341)
      {
        ((void (*)(std::__shared_weak_count *))v339->__on_zero_shared)(v339);
        std::__shared_weak_count::__release_weak(v339);
      }
    }
    v342 = *(_QWORD *)(v332 + 64);
    *(_QWORD *)(v342 + 24) = 0;
    v343 = v648;
    *(_QWORD *)(v342 + 16) = v648;
    v344 = *(_QWORD *)(v332 + 160);
    v345 = *((_QWORD *)&v648 + 1);
    if (*((_QWORD *)&v648 + 1))
    {
      v346 = (unint64_t *)(*((_QWORD *)&v648 + 1) + 8);
      do
        v347 = __ldxr(v346);
      while (__stxr(v347 + 1, v346));
    }
    v348 = *(std::__shared_weak_count **)(v344 + 24);
    *(_QWORD *)(v344 + 16) = v343;
    *(_QWORD *)(v344 + 24) = v345;
    if (v348)
    {
      v349 = (unint64_t *)&v348->__shared_owners_;
      do
        v350 = __ldaxr(v349);
      while (__stlxr(v350 - 1, v349));
      if (!v350)
      {
        ((void (*)(std::__shared_weak_count *))v348->__on_zero_shared)(v348);
        std::__shared_weak_count::__release_weak(v348);
      }
    }
    **(_QWORD **)(v332 + 96) = v654;
    *(float32x2_t *)(*(_QWORD *)(v332 + 96) + 8) = v641;
    if (md::writeSourceConstants<md::PolygonTileData,md::Stroke2StyleProperties>(v636, (uint64_t)&v646, *(_QWORD *)(*(_QWORD *)(v332 + 64) + 32), &v665))
    {
      *(_QWORD *)v681 = v636;
      *(_QWORD *)&v681[8] = v635;
      *(_QWORD *)&v681[16] = v683;
      *(_QWORD *)&v681[24] = v632;
      goto LABEL_528;
    }
  }
LABEL_611:
  v404 = v684;
  if (v684 == v683)
  {
    v405 = 4;
    v404 = v683;
LABEL_615:
    (*(void (**)(void))(*v404 + 8 * v405))();
  }
  else if (v684)
  {
    v405 = 5;
    goto LABEL_615;
  }
LABEL_616:
  v406 = v675;
  if (v675 == v674)
  {
    v407 = 4;
    v406 = v674;
LABEL_620:
    (*(void (**)(void))(*v406 + 8 * v407))();
  }
  else if (v675)
  {
    v407 = 5;
    goto LABEL_620;
  }
  if (v661)
  {
    v408 = a10[3];
    if (!v408)
      goto LABEL_625;
    if ((_QWORD *)v408 == a10)
    {
      v673 = v672;
      (*(void (**)(_QWORD *, _QWORD *))(*a10 + 24))(a10, v672);
    }
    else
    {
      v408 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v408 + 16))(v408);
LABEL_625:
      v673 = (_QWORD *)v408;
    }
    v409 = v225;
    v410 = *(unsigned __int8 *)(v225 + 96);
    v411 = a7[8];
    (*(void (**)(_QWORD *__return_ptr, unsigned __int8 *, _QWORD))(*(_QWORD *)a7 + 88))(v683, a7, *(_QWORD *)(v409 + 80));
    if (v411)
      v412 = 1;
    else
      v412 = v410 == 0;
    if (v412)
      v413 = 0;
    else
      v413 = 2;
    if (LOBYTE(v683[0]))
      v413 = BYTE1(v683[0]);
    v624 = *(_QWORD *)(v635 + 8 * ((2 * v657[0]) | (8 * !v656) | (16 * v413) | v656) + 272);
    if (v655)
      v414 = md::animatingPolygonFillPipelineSetup<md::PolygonTileData>((uint64_t *)v635, v636, (uint64_t *)&v646, (uint64_t)&v646, &v641, &v637, 0);
    else
      v414 = md::polygonFillPipelineSetup<md::PolygonTileData>(*(_QWORD *)(v635 + 208), *(_QWORD *)(v635 + 216), v636, (uint64_t *)&v646, (uint64_t)&v646, &v641, 0);
    v415 = v414;
    v225 = v636;
    if (v414)
    {
      memset(&v681[4], 0, 32);
      v416 = *(_QWORD *)(*(_QWORD *)v636 + 384);
      if (v416)
        v417 = v416 + 168;
      else
        v417 = 0;
      v418 = (*(uint64_t (**)(unsigned __int8 *, BOOL, _QWORD, _QWORD, uint64_t, _QWORD, BOOL, uint64_t *, _QWORD))(*(_QWORD *)a7 + 32))(a7, v656, *(unsigned int *)v659, 0, v417, 0, *(_QWORD *)&v641 != *(_QWORD *)&v653, *v660, 0);
      v419 = v657[1];
      v420 = objc_msgSend(*(id *)(v636 + 80), "fillMeshes");
      v421 = *(uint64_t **)v420;
      v422 = *(uint64_t **)(v420 + 8);
      if (*(uint64_t **)v420 != v422)
      {
        v423 = 0;
        v619 = vdupq_n_s64(1uLL);
        while (1)
        {
          v424 = *(id *)(v225 + 80);
          v425 = *(unsigned int *)(v225 + 100);
          v426 = (uint64_t)v673;
          if (!v673)
            goto LABEL_647;
          if (v673 != v672)
            break;
          v678 = &v676;
          (*(void (**)(_QWORD *, __int128 *))(v672[0] + 24))(v672, &v676);
LABEL_649:
          v427 = (uint64_t *)objc_msgSend(v424, "commitRangesToFillRenderItemBatcher:forMeshAtIndex:cullingMask:featureIdPredicate:", v635 + 984, v423, v425, &v676);
          v428 = v678;
          if (v678 == &v676)
          {
            v428 = &v676;
            v429 = 4;
            goto LABEL_653;
          }
          if (v678)
          {
            v429 = 5;
LABEL_653:
            (*(void (**)(void))(*(_QWORD *)v428 + 8 * v429))();
          }

          v430 = *v421;
          *(_OWORD *)v685 = *(_OWORD *)v681;
          *(_OWORD *)&v685[16] = *(_OWORD *)&v681[16];
          v686.i32[0] = *(_DWORD *)&v681[32];
          v431 = *(_QWORD **)(v635 + 1072);
          v432 = v431[1];
          if (v432 == *(_QWORD *)(v635 + 1080))
          {
            v431 = (_QWORD *)*v431;
            if (!v431)
            {
              v431 = malloc_type_malloc(120 * v432 + 16, 0xB644C221uLL);
              *v431 = 0;
              v431[1] = 0;
              **(_QWORD **)(v635 + 1072) = v431;
            }
            *(_QWORD *)(v635 + 1072) = v431;
            v432 = v431[1];
          }
          v433 = &v431[15 * v432];
          v431[1] = v432 + 1;
          v433[2] = &off_1E42B59B0;
          v433 += 2;
          v433[2] = "";
          v433[3] = v624;
          v433[4] = v415;
          *((_DWORD *)v433 + 10) = v419;
          v433[6] = v418;
          *((_DWORD *)v433 + 14) = 1065353216;
          v434 = v686.i32[0];
          v435 = *(_OWORD *)&v685[16];
          *(_OWORD *)((char *)v433 + 60) = *(_OWORD *)v685;
          *((_DWORD *)v433 + 23) = v434;
          *(_OWORD *)((char *)v433 + 76) = v435;
          *((int64x2_t *)v433 + 6) = v619;
          v433[14] = 0;
          v433[8] = v430;
          v436 = *v427;
          v433[11] = *v427;
          v433[12] = (v427[1] - v436) >> 4;
          ggl::CommandBuffer::pushRenderItem((uint64_t)v632, (ggl::RenderItem *)v433);
          v225 = v636;
          ++v423;
          v421 += 2;
          if (v421 == v422)
            goto LABEL_659;
        }
        v426 = (*(uint64_t (**)(void))(*v673 + 16))();
LABEL_647:
        v678 = (__int128 *)v426;
        goto LABEL_649;
      }
LABEL_659:
      v227 = (uint64_t *)v635;
    }
    v437 = v673;
    if (v673 == v672)
    {
      v438 = 4;
      v437 = v672;
LABEL_664:
      (*(void (**)(void))(*v437 + 8 * v438))();
    }
    else if (v673)
    {
      v438 = 5;
      goto LABEL_664;
    }
    v226.n128_u32[0] = *(_DWORD *)&v659[4];
    if (*(float *)&v659[4] > 0.00000011921)
    {
      v439 = a10[3];
      if (!v439)
        goto LABEL_669;
      if ((_QWORD *)v439 == a10)
      {
        v671 = v670;
        (*(void (**)(_QWORD *, _QWORD *, float))(*a10 + 24))(a10, v670, *(float *)&v659[4]);
      }
      else
      {
        v439 = (*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v439 + 16))(v439, *(float *)&v659[4]);
LABEL_669:
        v671 = (_QWORD *)v439;
      }
      v625 = v227[(((2 * v657[0]) | (8 * !v656)) | 0x21u) + 34];
      if (v655)
        v440 = md::animatingPolygonFillPipelineSetup<md::PolygonTileData>(v227, v225, (uint64_t *)&v647, (uint64_t)&v646, &v641, &v637, 1);
      else
        v440 = md::polygonFillPipelineSetup<md::PolygonTileData>(v227[26], v227[27], v225, (uint64_t *)&v647, (uint64_t)&v646, &v641, 1);
      v441 = v440;
      memset(&v681[4], 0, 32);
      v442 = v657[1];
      v443 = *(_QWORD *)(*(_QWORD *)v225 + 384);
      if (v443)
        v444 = v443 + 168;
      else
        v444 = 0;
      v445 = (*(uint64_t (**)(unsigned __int8 *, BOOL, _QWORD, uint64_t, uint64_t, _QWORD, BOOL, uint64_t *, _QWORD))(*(_QWORD *)a7 + 32))(a7, v656, *(unsigned int *)v659, 1, v444, 0, *(_QWORD *)&v641 != *(_QWORD *)&v653, *v660, 0);
      v446 = objc_msgSend(*(id *)(v225 + 80), "fillMeshes");
      v447 = *(uint64_t **)v446;
      v448 = *(uint64_t **)(v446 + 8);
      if (*(uint64_t **)v446 != v448)
      {
        v449 = 0;
        v620 = vdupq_n_s64(1uLL);
        while (1)
        {
          v450 = *(id *)(v225 + 80);
          v451 = *(unsigned int *)(v225 + 100);
          v452 = (uint64_t)v671;
          if (!v671)
            goto LABEL_682;
          if (v671 != v670)
            break;
          v678 = &v676;
          (*(void (**)(_QWORD *, __int128 *))(v670[0] + 24))(v670, &v676);
LABEL_684:
          v453 = (uint64_t *)objc_msgSend(v450, "commitRangesToFillRenderItemBatcher:forMeshAtIndex:cullingMask:featureIdPredicate:", v635 + 984, v449, v451, &v676);
          v454 = v678;
          if (v678 == &v676)
          {
            v454 = &v676;
            v455 = 4;
            goto LABEL_688;
          }
          if (v678)
          {
            v455 = 5;
LABEL_688:
            (*(void (**)(void))(*(_QWORD *)v454 + 8 * v455))();
          }

          v456 = *v447;
          *(_OWORD *)v685 = *(_OWORD *)v681;
          *(_OWORD *)&v685[16] = *(_OWORD *)&v681[16];
          v686.i32[0] = *(_DWORD *)&v681[32];
          v457 = *(_QWORD **)(v635 + 1072);
          v458 = v457[1];
          if (v458 == *(_QWORD *)(v635 + 1080))
          {
            v457 = (_QWORD *)*v457;
            if (!v457)
            {
              v457 = malloc_type_malloc(120 * v458 + 16, 0xB644C221uLL);
              *v457 = 0;
              v457[1] = 0;
              **(_QWORD **)(v635 + 1072) = v457;
            }
            *(_QWORD *)(v635 + 1072) = v457;
            v458 = v457[1];
          }
          v459 = &v457[15 * v458];
          v457[1] = v458 + 1;
          v459[2] = &off_1E42B59B0;
          v459 += 2;
          v459[2] = "";
          v459[3] = v625;
          v459[4] = v441;
          *((_DWORD *)v459 + 10) = v442;
          v459[6] = v445;
          *((_DWORD *)v459 + 14) = 1065353216;
          v460 = v686.i32[0];
          v461 = *(_OWORD *)&v685[16];
          *(_OWORD *)((char *)v459 + 60) = *(_OWORD *)v685;
          *((_DWORD *)v459 + 23) = v460;
          *(_OWORD *)((char *)v459 + 76) = v461;
          *((int64x2_t *)v459 + 6) = v620;
          v459[14] = 0;
          v459[8] = v456;
          v462 = *v453;
          v459[11] = *v453;
          v459[12] = (v453[1] - v462) >> 4;
          ggl::CommandBuffer::pushRenderItem((uint64_t)v632, (ggl::RenderItem *)v459);
          v225 = v636;
          ++v449;
          v447 += 2;
          if (v447 == v448)
            goto LABEL_694;
        }
        v452 = (*(uint64_t (**)(void))(*v671 + 16))();
LABEL_682:
        v678 = (__int128 *)v452;
        goto LABEL_684;
      }
LABEL_694:
      v463 = v671;
      if (v671 == v670)
      {
        v464 = 4;
        v463 = v670;
        v227 = (uint64_t *)v635;
LABEL_698:
        (*(void (**)(void))(*v463 + 8 * v464))();
      }
      else
      {
        v227 = (uint64_t *)v635;
        if (v671)
        {
          v464 = 5;
          goto LABEL_698;
        }
      }
    }
  }
LABEL_699:
  if (a5 && a7[52] && md::_maskTarget((uint64_t)&v646) == 1)
  {
    v465 = a10[3];
    if (!v465)
      goto LABEL_705;
    if ((_QWORD *)v465 == a10)
    {
      v669 = v668;
      (*(void (**)(_QWORD *, _QWORD *))(*a10 + 24))(a10, v668);
    }
    else
    {
      v465 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v465 + 16))(v465);
LABEL_705:
      v669 = (_QWORD *)v465;
    }
    v466 = ggl::FragmentedPool<ggl::RenderItem>::pop(v227[23]);
    v467 = *(_QWORD **)(v466 + 64);
    v468 = v646;
    *v467 = v646;
    v467[1] = 0;
    v469 = *(_QWORD **)(v466 + 160);
    v470 = *((_QWORD *)&v646 + 1);
    if (*((_QWORD *)&v646 + 1))
    {
      v471 = (unint64_t *)(*((_QWORD *)&v646 + 1) + 8);
      do
        v472 = __ldxr(v471);
      while (__stxr(v472 + 1, v471));
    }
    v473 = (std::__shared_weak_count *)v469[1];
    *v469 = v468;
    v469[1] = v470;
    if (v473)
    {
      v474 = (unint64_t *)&v473->__shared_owners_;
      do
        v475 = __ldaxr(v474);
      while (__stlxr(v475 - 1, v474));
      if (!v475)
      {
        ((void (*)(std::__shared_weak_count *))v473->__on_zero_shared)(v473);
        std::__shared_weak_count::__release_weak(v473);
      }
    }
    v476 = *(_QWORD *)(v466 + 64);
    *(_QWORD *)(v476 + 24) = 0;
    v477 = v648;
    *(_QWORD *)(v476 + 16) = v648;
    v478 = *(_QWORD *)(v466 + 160);
    v479 = *((_QWORD *)&v648 + 1);
    if (*((_QWORD *)&v648 + 1))
    {
      v480 = (unint64_t *)(*((_QWORD *)&v648 + 1) + 8);
      do
        v481 = __ldxr(v480);
      while (__stxr(v481 + 1, v480));
    }
    v482 = *(std::__shared_weak_count **)(v478 + 24);
    *(_QWORD *)(v478 + 16) = v477;
    *(_QWORD *)(v478 + 24) = v479;
    if (v482)
    {
      v483 = (unint64_t *)&v482->__shared_owners_;
      do
        v484 = __ldaxr(v483);
      while (__stlxr(v484 - 1, v483));
      if (!v484)
      {
        ((void (*)(std::__shared_weak_count *))v482->__on_zero_shared)(v482);
        std::__shared_weak_count::__release_weak(v482);
      }
    }
    **(_QWORD **)(v466 + 96) = v654;
    v485 = *(_QWORD *)(*(_QWORD *)(v466 + 64) + 32);
    *(_OWORD *)v685 = 0uLL;
    v486 = *(_QWORD *)(v485 + 8);
    *(_QWORD *)&v487 = 0;
    *((_QWORD *)&v487 + 1) = v485;
    v626 = v466;
    if (v486)
      v488 = *(_QWORD *)(v485 + 72);
    else
      v488 = 0;
    *(_OWORD *)v685 = v487;
    *(_QWORD *)&v685[16] = 0;
    *(_QWORD *)&v685[24] = v486;
    v686.i64[1] = v488;
    v686.i16[0] = 1;
    *(_OWORD *)v488 = v649;
    *(_OWORD *)(v488 + 16) = v650;
    *(float32x4_t *)(v488 + 32) = v651;
    *(float32x4_t *)(v488 + 48) = v652;
    *(_QWORD *)(v488 + 320) = 0;
    *(_QWORD *)(v488 + 328) = 0;
    *(_DWORD *)(v488 + 464) = *(_DWORD *)(v225 + 56);
    v489 = 1.0 / *(double *)(v225 + 64);
    *(float *)(v488 + 468) = v489;
    *(_DWORD *)(v488 + 472) = *(_DWORD *)&v659[12];
    v490 = *v660;
    if (v660[1] != *v660)
    {
      v491 = 0;
      v492 = 0;
      while (1)
      {
        v499 = *(_OWORD *)&v490[2 * v491];
        v676 = v499;
        v500 = (std::__shared_weak_count *)*((_QWORD *)&v499 + 1);
        if (*((_QWORD *)&v499 + 1))
        {
          v501 = (unint64_t *)(*((_QWORD *)&v499 + 1) + 8);
          do
            v502 = __ldxr(v501);
          while (__stxr(v502 + 1, v501));
          *(_OWORD *)v681 = v499;
          do
            v503 = __ldxr(v501);
          while (__stxr(v503 + 1, v501));
          v504 = v499;
        }
        else
        {
          v504 = v499;
          *(_OWORD *)v681 = (unint64_t)v499;
        }
        memset(&v681[16], 0, 17);
        if (v504)
          LODWORD(v504) = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v504 + 48))(v504, &v681[16]);
        v681[32] = v504;
        if (v500)
        {
          v505 = (unint64_t *)&v500->__shared_owners_;
          do
            v506 = __ldaxr(v505);
          while (__stlxr(v506 - 1, v505));
          if (!v506)
          {
            ((void (*)(std::__shared_weak_count *))v500->__on_zero_shared)(v500);
            std::__shared_weak_count::__release_weak(v500);
          }
          LODWORD(v504) = v681[32];
        }
        if ((_DWORD)v504)
        {
          v507 = *(_QWORD *)(*(_QWORD *)v681 + 24);
          v508 = fminf(fmaxf(*(float *)(v225 + 48), 0.0), 23.0);
          v509 = *(float **)v507;
          if (*(_QWORD *)v507
            && (v510 = *v509, LODWORD(v509) = *v509 == 1.0, *(_BYTE *)(v507 + 10))
            && (v510 != 0.0 ? (v511 = v510 == 1.0) : (v511 = 1), !v511)
            || (v512 = *(unsigned __int8 *)(v507 + v509 + 11), v510 = 0.0, v512 == 2))
          {
            LOBYTE(v676) = 1;
            LOBYTE(v683[0]) = 1;
            gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v507, 0x1D2u, 0, (BOOL *)&v676, v508);
            v514 = v513;
            gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v507, 0x1D2u, 1u, (BOOL *)v683, v508);
            v516 = v514 + (float)((float)(v515 - v514) * v510);
          }
          else
          {
            gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(*(_QWORD *)(*(_QWORD *)v681 + 24), 0x1D2u, v512, 0, v508);
            v516 = v517;
          }
        }
        else
        {
          v516 = 0.0;
        }
        LOBYTE(v518) = v659[16];
        if (!v681[32])
          goto LABEL_729;
        v519 = *(_QWORD *)(*(_QWORD *)v681 + 24);
        v520 = (int)*(float *)(v225 + 48) >= 0x17 ? 23 : (int)*(float *)(v225 + 48);
        v521 = *(float **)v519;
        if (!*(_QWORD *)v519)
          break;
        v522 = *v521;
        v523 = *v521 == 1.0;
        if (!*(_BYTE *)(v519 + 10))
          goto LABEL_778;
        if (v522 == 0.0 || v522 == 1.0)
          goto LABEL_778;
LABEL_779:
        if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(_QWORD *)(*(_QWORD *)v681 + 24), 0x1D3u, v520, 0) & 1) != 0)goto LABEL_782;
        v525 = 1;
LABEL_781:
        if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v519, 0x1D3u, v520, v525))
          goto LABEL_729;
LABEL_782:
        if (v521)
        {
          v526 = *v521;
          v527 = *v521 == 1.0;
          if (*(_BYTE *)(v519 + 10))
          {
            if (v526 != 0.0 && v526 != 1.0)
            {
LABEL_792:
              LOBYTE(v676) = 1;
              LOBYTE(v683[0]) = 1;
              v530 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v519, 0x1D3u, v520, 0, &v676);
              v531 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v519, 0x1D3u, v520, 1u, v683);
              if (v526 >= 1.0)
                LOBYTE(v518) = v531;
              else
                LOBYTE(v518) = v530;
              goto LABEL_728;
            }
          }
        }
        else
        {
          v527 = 0;
        }
        v529 = *(unsigned __int8 *)(v519 + v527 + 11);
        v526 = 0.0;
        if (v529 == 2)
          goto LABEL_792;
        v518 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v519, 0x1D3u, v520, v529, 0);
LABEL_728:
        v225 = v636;
LABEL_729:
        if (v518 == 1)
          v493 = 0.0;
        else
          v493 = 1.0;
        if (v518 == 1)
          v494 = -1.0;
        else
          v494 = 0.0;
        if (v518 == 2)
        {
          v493 = 0.5;
          v494 = -0.5;
        }
        v495 = v686.i64[1];
        v496 = v516 * 1.75 * *(double *)(v225 + 64);
        v497 = v686.i64[1] + 4 * v491;
        *(float *)(v497 + 336) = v493 * v496;
        *(float *)(v497 + 400) = v494 * v496;
        *(_DWORD *)(v495 + 476) = 0;
        v498 = v495 + 16 * v491;
        *(_QWORD *)(v498 + 64) = 0;
        *(_QWORD *)(v498 + 72) = 0;
        gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)v681);
        v491 = ++v492;
        v490 = *v660;
        if (v492 >= (unint64_t)(((char *)v660[1] - (char *)*v660) >> 4))
          goto LABEL_796;
      }
      v523 = 0;
LABEL_778:
      v525 = *(unsigned __int8 *)(v519 + v523 + 11);
      if (v525 != 2)
        goto LABEL_781;
      goto LABEL_779;
    }
LABEL_796:
    v532 = *(_OWORD *)&v685[16];
    if (*(_QWORD *)&v685[24] != *(_QWORD *)&v685[16])
    {
      v533 = *(_QWORD **)&v685[8];
      v534 = v686.u8[0];
      v535 = v686.u8[1];
      if (*(_QWORD *)v685 && *(_BYTE *)(*(_QWORD *)&v685[8] + 17) != 2)
        (*(void (**)(void))(**(_QWORD **)v685 + 64))();
      if (v534 && !v535)
      {
        v537 = v533[7];
        v536 = v533[8];
        if (v536 == v537)
          v537 = v533[10] - v533[9];
        if ((unint64_t)v532 < v537)
          v537 = v532;
        if (v536 <= *((_QWORD *)&v532 + 1))
          v536 = *((_QWORD *)&v532 + 1);
        if (v536 == v537)
          v536 = v537 + v533[10] - v533[9];
        v533[7] = v537;
        v533[8] = v536;
      }
    }
    v538 = *(_QWORD *)(v635 + 8 * (a7[8] | (2 * v657[0])) + 272);
    memset(&v681[4], 0, 32);
    v539 = *(char *)(v635 + 912);
    v540 = *(unsigned __int8 *)(v225 + 52);
    v541 = objc_msgSend(*(id *)(v225 + 80), "strokeMeshes");
    v542 = *(uint64_t **)v541;
    v543 = *(uint64_t **)(v541 + 8);
    if (*(uint64_t **)v541 != v543)
    {
      v544 = 0;
      v545 = v540 + v539;
      v621 = vdupq_n_s64(1uLL);
      while (1)
      {
        v546 = *(id *)(v225 + 80);
        v547 = *(unsigned int *)(v225 + 100);
        v548 = (uint64_t)v669;
        if (!v669)
          goto LABEL_816;
        if (v669 != v668)
          break;
        v678 = &v676;
        (*(void (**)(_QWORD *, __int128 *))(v668[0] + 24))(v668, &v676);
LABEL_818:
        v549 = (uint64_t *)objc_msgSend(v546, "commitRangesToStrokeRenderItemBatcher:forMeshAtIndex:cullingMask:featureIdPredicate:", v635 + 984, v544, v547, &v676);
        v550 = v678;
        if (v678 == &v676)
        {
          v550 = &v676;
          v551 = 4;
          goto LABEL_822;
        }
        if (v678)
        {
          v551 = 5;
LABEL_822:
          (*(void (**)(void))(*(_QWORD *)v550 + 8 * v551))();
        }

        v552 = *v542;
        *(_OWORD *)v685 = *(_OWORD *)v681;
        *(_OWORD *)&v685[16] = *(_OWORD *)&v681[16];
        v686.i32[0] = *(_DWORD *)&v681[32];
        v553 = *(_QWORD **)(v635 + 1072);
        v554 = v553[1];
        if (v554 == *(_QWORD *)(v635 + 1080))
        {
          v553 = (_QWORD *)*v553;
          if (!v553)
          {
            v553 = malloc_type_malloc(120 * v554 + 16, 0xB644C221uLL);
            *v553 = 0;
            v553[1] = 0;
            **(_QWORD **)(v635 + 1072) = v553;
          }
          *(_QWORD *)(v635 + 1072) = v553;
          v554 = v553[1];
        }
        v555 = &v553[15 * v554];
        v553[1] = v554 + 1;
        v555[2] = &off_1E42B59B0;
        v555 += 2;
        v555[2] = "";
        v555[3] = v538;
        v555[4] = v626;
        *((_DWORD *)v555 + 10) = v545;
        v555[6] = 0;
        *((_DWORD *)v555 + 14) = 1065353216;
        v556 = v686.i32[0];
        v557 = *(_OWORD *)&v685[16];
        *(_OWORD *)((char *)v555 + 60) = *(_OWORD *)v685;
        *((_DWORD *)v555 + 23) = v556;
        *(_OWORD *)((char *)v555 + 76) = v557;
        *((int64x2_t *)v555 + 6) = v621;
        v555[14] = 0;
        v555[8] = v552;
        v558 = *v549;
        v555[11] = *v549;
        v555[12] = (v549[1] - v558) >> 4;
        ggl::CommandBuffer::pushRenderItem(a5, (ggl::RenderItem *)v555);
        v225 = v636;
        ++v544;
        v542 += 2;
        if (v542 == v543)
          goto LABEL_828;
      }
      v548 = (*(uint64_t (**)(void))(*v669 + 16))();
LABEL_816:
      v678 = (__int128 *)v548;
      goto LABEL_818;
    }
LABEL_828:
    v559 = v669;
    if (v669 == v668)
    {
      v560 = 4;
      v559 = v668;
      v227 = (uint64_t *)v635;
LABEL_832:
      (*(void (**)(void))(*v559 + 8 * v560))();
    }
    else
    {
      v227 = (uint64_t *)v635;
      if (v669)
      {
        v560 = 5;
        goto LABEL_832;
      }
    }
  }
  if (a6 && a7[53] && v663)
  {
    v561 = a10[3];
    if (!v561)
      goto LABEL_839;
    if ((_QWORD *)v561 == a10)
    {
      v667 = v666;
      (*(void (**)(_QWORD *, _QWORD *, __n128))(*a10 + 24))(a10, v666, v226);
    }
    else
    {
      v561 = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v561 + 16))(v561, v226);
LABEL_839:
      v667 = (_QWORD *)v561;
    }
    v562 = ggl::FragmentedPool<ggl::RenderItem>::pop(v227[24]);
    v563 = *(_QWORD **)(v562 + 64);
    v564 = v646;
    *v563 = v646;
    v563[1] = 0;
    v565 = *(_QWORD **)(v562 + 160);
    v566 = *((_QWORD *)&v646 + 1);
    if (*((_QWORD *)&v646 + 1))
    {
      v567 = (unint64_t *)(*((_QWORD *)&v646 + 1) + 8);
      do
        v568 = __ldxr(v567);
      while (__stxr(v568 + 1, v567));
    }
    v569 = (std::__shared_weak_count *)v565[1];
    *v565 = v564;
    v565[1] = v566;
    if (v569)
    {
      v570 = (unint64_t *)&v569->__shared_owners_;
      do
        v571 = __ldaxr(v570);
      while (__stlxr(v571 - 1, v570));
      if (!v571)
      {
        ((void (*)(std::__shared_weak_count *))v569->__on_zero_shared)(v569);
        std::__shared_weak_count::__release_weak(v569);
      }
    }
    v572 = *(_QWORD *)(v562 + 64);
    *(_QWORD *)(v572 + 24) = 0;
    v573 = v648;
    *(_QWORD *)(v572 + 16) = v648;
    v574 = *(_QWORD *)(v562 + 160);
    v575 = *((_QWORD *)&v648 + 1);
    if (*((_QWORD *)&v648 + 1))
    {
      v576 = (unint64_t *)(*((_QWORD *)&v648 + 1) + 8);
      do
        v577 = __ldxr(v576);
      while (__stxr(v577 + 1, v576));
    }
    v578 = *(std::__shared_weak_count **)(v574 + 24);
    *(_QWORD *)(v574 + 16) = v573;
    *(_QWORD *)(v574 + 24) = v575;
    if (v578)
    {
      v579 = (unint64_t *)&v578->__shared_owners_;
      do
        v580 = __ldaxr(v579);
      while (__stlxr(v580 - 1, v579));
      if (!v580)
      {
        ((void (*)(std::__shared_weak_count *))v578->__on_zero_shared)(v578);
        std::__shared_weak_count::__release_weak(v578);
      }
    }
    v581 = *(_QWORD *)(*(_QWORD *)(v562 + 64) + 32);
    *(_OWORD *)v685 = 0uLL;
    v582 = *(_QWORD *)(v581 + 8);
    *(_QWORD *)&v583 = 0;
    *((_QWORD *)&v583 + 1) = v581;
    v630 = (ggl::CommandBuffer *)v562;
    if (v582)
      v584 = *(_QWORD *)(v581 + 72);
    else
      v584 = 0;
    v628 = v583;
    *(_OWORD *)v685 = v583;
    *(_QWORD *)&v685[16] = 0;
    *(_QWORD *)&v685[24] = v582;
    v686.i64[1] = v584;
    v686.i16[0] = 1;
    *(_OWORD *)v584 = v649;
    *(_OWORD *)(v584 + 16) = v650;
    *(float32x4_t *)(v584 + 32) = v651;
    *(float32x4_t *)(v584 + 48) = v652;
    *(_DWORD *)(v584 + 64) = *(_DWORD *)(v225 + 56);
    v585 = *(id *)(v225 + 80);
    *(_QWORD *)(v584 + 72) = *(_QWORD *)objc_msgSend(v585, "origin");

    v586 = *(id *)(v636 + 80);
    objc_msgSend(v586, "size");
    *(_DWORD *)(v584 + 80) = v587;
    *(_DWORD *)(v584 + 84) = v588;

    if (v582)
    {
      if ((_QWORD)v628 && *(_BYTE *)(*((_QWORD *)&v628 + 1) + 17) != 2)
        (*(void (**)(void))(*(_QWORD *)v628 + 64))();
      v589 = *(_QWORD *)(*((_QWORD *)&v628 + 1) + 64);
      if (v589 <= v582)
        v589 = v582;
      *(_QWORD *)(*((_QWORD *)&v628 + 1) + 56) = 0;
      *(_QWORD *)(*((_QWORD *)&v628 + 1) + 64) = v589;
    }
    v590 = v636;
    v591 = *(_QWORD *)(v635 + 8 * (v656 | (2 * v657[0])) + 272);
    memset(&v681[4], 0, 32);
    v592 = *(_QWORD *)(*(_QWORD *)v636 + 384);
    if (v592)
      v593 = v592 + 168;
    else
      v593 = 0;
    v594 = (*(uint64_t (**)(unsigned __int8 *, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t *, _QWORD))(*(_QWORD *)a7 + 32))(a7, 1, *(unsigned int *)v659, 0, v593, 0, 0, *v660, 0);
    v595 = v657[1];
    v596 = objc_msgSend(*(id *)(v636 + 80), "fillMeshes");
    v598 = *(uint64_t **)v596;
    v597 = *(uint64_t **)(v596 + 8);
    if (*(uint64_t **)v596 != v597)
    {
      v599 = 0;
      v634 = vdupq_n_s64(1uLL);
      while (1)
      {
        v600 = *(id *)(v590 + 80);
        v601 = *(unsigned int *)(v590 + 100);
        v602 = (uint64_t)v667;
        if (!v667)
          goto LABEL_875;
        if (v667 != v666)
          break;
        v678 = &v676;
        (*(void (**)(_QWORD *, __int128 *))(v666[0] + 24))(v666, &v676);
LABEL_877:
        v603 = (uint64_t *)objc_msgSend(v600, "commitRangesToFillRenderItemBatcher:forMeshAtIndex:cullingMask:featureIdPredicate:", v635 + 984, v599, v601, &v676);
        v604 = v678;
        if (v678 == &v676)
        {
          v604 = &v676;
          v605 = 4;
          goto LABEL_881;
        }
        if (v678)
        {
          v605 = 5;
LABEL_881:
          (*(void (**)(void))(*(_QWORD *)v604 + 8 * v605))();
        }

        v606 = *v598;
        *(_OWORD *)v685 = *(_OWORD *)v681;
        *(_OWORD *)&v685[16] = *(_OWORD *)&v681[16];
        v686.i32[0] = *(_DWORD *)&v681[32];
        v607 = *(_QWORD **)(v635 + 1072);
        v608 = v607[1];
        if (v608 == *(_QWORD *)(v635 + 1080))
        {
          v607 = (_QWORD *)*v607;
          if (!v607)
          {
            v607 = malloc_type_malloc(120 * v608 + 16, 0xB644C221uLL);
            *v607 = 0;
            v607[1] = 0;
            **(_QWORD **)(v635 + 1072) = v607;
          }
          *(_QWORD *)(v635 + 1072) = v607;
          v608 = v607[1];
        }
        v609 = &v607[15 * v608];
        v607[1] = v608 + 1;
        v609[2] = &off_1E42B59B0;
        v609 += 2;
        v609[2] = "";
        v609[3] = v591;
        v609[4] = v630;
        *((_DWORD *)v609 + 10) = v595;
        v609[6] = v594;
        *((_DWORD *)v609 + 14) = 1065353216;
        v610 = v686.i32[0];
        v611 = *(_OWORD *)&v685[16];
        *(_OWORD *)((char *)v609 + 60) = *(_OWORD *)v685;
        *((_DWORD *)v609 + 23) = v610;
        *(_OWORD *)((char *)v609 + 76) = v611;
        *((int64x2_t *)v609 + 6) = v634;
        v609[14] = 0;
        v609[8] = v606;
        v612 = *v603;
        v609[11] = *v603;
        v609[12] = (v603[1] - v612) >> 4;
        ggl::CommandBuffer::pushRenderItem((uint64_t)v632, (ggl::RenderItem *)v609);
        v590 = v636;
        ++v599;
        v598 += 2;
        if (v598 == v597)
          goto LABEL_887;
      }
      v602 = (*(uint64_t (**)(void))(*v667 + 16))();
LABEL_875:
      v678 = (__int128 *)v602;
      goto LABEL_877;
    }
LABEL_887:
    v613 = v667;
    if (v667 == v666)
    {
      v614 = 4;
      v613 = v666;
LABEL_891:
      (*(void (**)(void))(*v613 + 8 * v614))();
    }
    else if (v667)
    {
      v614 = 5;
      goto LABEL_891;
    }
  }
LABEL_112:
  v76 = (std::__shared_weak_count *)*((_QWORD *)&v648 + 1);
  if (*((_QWORD *)&v648 + 1))
  {
    v77 = (unint64_t *)(*((_QWORD *)&v648 + 1) + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  v79 = (std::__shared_weak_count *)*((_QWORD *)&v647 + 1);
  if (*((_QWORD *)&v647 + 1))
  {
    v80 = (unint64_t *)(*((_QWORD *)&v647 + 1) + 8);
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = (std::__shared_weak_count *)*((_QWORD *)&v646 + 1);
  if (*((_QWORD *)&v646 + 1))
  {
    v83 = (unint64_t *)(*((_QWORD *)&v646 + 1) + 8);
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
}

void sub_19FE67F48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  unint64_t *v38;
  uint64_t v39;
  unint64_t *v40;
  uint64_t v41;

  v38 = (unint64_t *)STACK[0x2B8];
  if ((unint64_t *)STACK[0x2B8] == &STACK[0x2A0])
  {
    v39 = 4;
    v38 = &STACK[0x2A0];
  }
  else
  {
    if (!v38)
      goto LABEL_6;
    v39 = 5;
  }
  (*(void (**)(void))(*v38 + 8 * v39))();
LABEL_6:
  v40 = (unint64_t *)STACK[0x238];
  if ((unint64_t *)STACK[0x238] == &STACK[0x220])
  {
    v41 = 4;
    v40 = &STACK[0x220];
  }
  else
  {
    if (!v40)
      goto LABEL_11;
    v41 = 5;
  }
  (*(void (**)(void))(*v40 + 8 * v41))();
LABEL_11:
  md::MuninRoadLabelCreationParams::~MuninRoadLabelCreationParams((md::MuninRoadLabelCreationParams *)&a37);
  _Unwind_Resume(a1);
}

uint64_t md::_commandBufferForConfiguration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v10;
  int v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  float *v23;
  float v24;
  BOOL v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  int v30;
  __int128 v32;
  __int128 v33;
  _QWORD v34[2];
  unsigned __int8 v35;
  char v36;

  v4 = *(uint64_t **)(a2 + 160);
  v5 = *v4;
  if (v4[1] != *v4)
  {
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = *(_OWORD *)(v5 + 16 * v10);
      v32 = v12;
      v13 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
      if (*((_QWORD *)&v12 + 1))
      {
        v14 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
        v33 = v12;
        do
          v16 = __ldxr(v14);
        while (__stxr(v16 + 1, v14));
        v17 = v12;
      }
      else
      {
        v17 = v12;
        v33 = (unint64_t)v12;
      }
      v34[0] = 0;
      v34[1] = 0;
      v35 = 0;
      if (v17)
        LODWORD(v17) = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v17 + 48))(v17, v34);
      v35 = v17;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v19 = __ldaxr(p_shared_owners);
        while (__stlxr(v19 - 1, p_shared_owners));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        LODWORD(v17) = v35;
      }
      if ((_DWORD)v17)
        break;
      gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v33);
      v10 = ++v11;
      v5 = **(_QWORD **)(a2 + 160);
      if (v11 >= (unint64_t)((*(_QWORD *)(*(_QWORD *)(a2 + 160) + 8) - v5) >> 4))
        return 0;
    }
    v21 = *(_QWORD *)(v33 + 24);
    v22 = *(unsigned __int8 *)(v21 + 12);
    if (v22 == 2)
    {
      if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(*(_QWORD *)(v33 + 24), 0x8Au, 0) & 1) != 0)
        goto LABEL_25;
      v22 = 1;
    }
    if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v21, 0x8Au, v22))
    {
      LOBYTE(v30) = 0;
LABEL_39:
      v20 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v30, a4, a3);
      gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v33);
      return v20;
    }
LABEL_25:
    v23 = *(float **)v21;
    if (*(_QWORD *)v21
      && (v24 = *v23, LODWORD(v23) = *v23 == 1.0, *(_BYTE *)(v21 + 10))
      && (v24 != 0.0 ? (v25 = v24 == 1.0) : (v25 = 1), !v25)
      || (v26 = *(unsigned __int8 *)(v21 + v23 + 11), v24 = 0.0, v26 == 2))
    {
      LOBYTE(v32) = 1;
      v36 = 1;
      v27 = gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v21, 0x8Au, 0, &v32);
      v28 = gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v21, 0x8Au, 1u, &v36);
      if (v24 >= 1.0)
        v29 = (int *)v28;
      else
        v29 = (int *)v27;
      v30 = *v29;
    }
    else
    {
      v30 = *(_DWORD *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v21, 0x8Au, v26, 0);
    }
    goto LABEL_39;
  }
  return 0;
}

void sub_19FE68708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19FE6871C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;

  v15 = a14;
  if (a14)
  {
    p_shared_owners = (unint64_t *)&a14->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = a12;
  if (a12)
  {
    v19 = (unint64_t *)&a12->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t md::_maskTarget(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  int v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  float v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  __int128 v26;
  __int128 v27;
  _QWORD v28[2];
  unsigned __int8 v29;
  char v30;

  v1 = *(uint64_t **)(a1 + 160);
  v2 = *v1;
  if (v1[1] != *v1)
  {
    v4 = 0;
    v5 = 0;
    while (1)
    {
      v6 = *(_OWORD *)(v2 + 16 * v4);
      v26 = v6;
      v7 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
      if (*((_QWORD *)&v6 + 1))
      {
        v8 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
        v27 = v6;
        do
          v10 = __ldxr(v8);
        while (__stxr(v10 + 1, v8));
        v11 = v6;
      }
      else
      {
        v11 = v6;
        v27 = (unint64_t)v6;
      }
      v28[0] = 0;
      v28[1] = 0;
      v29 = 0;
      if (v11)
        LODWORD(v11) = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v11 + 48))(v11, v28);
      v29 = v11;
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        LODWORD(v11) = v29;
      }
      if ((_DWORD)v11)
        break;
      gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v27);
      v4 = ++v5;
      v2 = **(_QWORD **)(a1 + 160);
      if (v5 >= (unint64_t)((*(_QWORD *)(*(_QWORD *)(a1 + 160) + 8) - v2) >> 4))
        goto LABEL_20;
    }
    v15 = *(_QWORD *)(v27 + 24);
    v16 = *(unsigned __int8 *)(v15 + 11);
    v17 = v16;
    if (v16 == 2)
    {
      if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(*(_QWORD *)(v27 + 24), 0x1D4u, 0) & 1) != 0)
        goto LABEL_29;
      v17 = 1;
    }
    if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v15, 0x1D4u, v17) & 1) == 0)
    {
      v18 = *(unsigned __int8 *)(v15 + 12);
      if (v18 == 2)
      {
        if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v15, 0x1D4u, 0) & 1) != 0)
          goto LABEL_29;
        v18 = 1;
      }
      if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v15, 0x1D4u, v18))
      {
        LOBYTE(v14) = 0;
        goto LABEL_47;
      }
    }
LABEL_29:
    if (*(_QWORD *)v15)
    {
      v19 = **(float **)v15;
      if (*(_BYTE *)(v15 + 10))
      {
        if (v19 != 0.0 && v19 != 1.0)
          goto LABEL_41;
      }
      if (v19 == 1.0)
        v21 = v15 + 1;
      else
        v21 = v15;
      v16 = *(unsigned __int8 *)(v21 + 11);
    }
    v19 = 0.0;
    if (v16 == 2)
    {
LABEL_41:
      LOBYTE(v26) = 1;
      v30 = 1;
      v22 = gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v15, 0x1D4u, 0, &v26);
      v23 = gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v15, 0x1D4u, 1u, &v30);
      if (v19 >= 1.0)
        v24 = (int *)v23;
      else
        v24 = (int *)v22;
      v14 = *v24;
      goto LABEL_47;
    }
    v14 = *(_DWORD *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v15, 0x1D4u, v16, 0);
LABEL_47:
    gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v27);
    return v14;
  }
LABEL_20:
  LOBYTE(v14) = 0;
  return v14;
}

void sub_19FE689F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19FE68A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;

  v15 = a14;
  if (a14)
  {
    p_shared_owners = (unint64_t *)&a14->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = a12;
  if (a12)
  {
    v19 = (unint64_t *)&a12->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t md::animatingPolygonFillPipelineSetup<md::PolygonTileData>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4, _QWORD *a5, _QWORD *a6, int a7)
{
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  unint64_t v45;
  __int128 v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  int v50;
  float v51;
  id v52;
  id v53;
  int v54;
  int v55;
  float *v56;
  uint64_t v57;
  float v58;
  int v59;
  unint64_t v60;
  __int128 v63;

  v14 = ggl::FragmentedPool<ggl::RenderItem>::pop(a1[28]);
  v15 = *(uint64_t **)(v14 + 64);
  v15[1] = 0;
  v16 = *a3;
  *v15 = *a3;
  v17 = *(_QWORD **)(v14 + 160);
  v18 = a3[1];
  if (v18)
  {
    v19 = (unint64_t *)(v18 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v21 = (std::__shared_weak_count *)v17[1];
  *v17 = v16;
  v17[1] = v18;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = *(_QWORD *)(v14 + 64);
  *(_QWORD *)(v24 + 24) = 0;
  v25 = *(_QWORD *)(a4 + 32);
  *(_QWORD *)(v24 + 16) = v25;
  v26 = *(_QWORD *)(v14 + 160);
  v27 = *(_QWORD *)(a4 + 40);
  if (v27)
  {
    v28 = (unint64_t *)(v27 + 8);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v30 = *(std::__shared_weak_count **)(v26 + 24);
  *(_QWORD *)(v26 + 16) = v25;
  *(_QWORD *)(v26 + 24) = v27;
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = *(_QWORD *)(v14 + 64);
  *(_QWORD *)(v33 + 56) = 0;
  v34 = a1[119];
  *(_QWORD *)(v33 + 48) = v34;
  v35 = *(_QWORD *)(v14 + 160);
  v36 = a1[120];
  if (v36)
  {
    v37 = (unint64_t *)(v36 + 8);
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
  }
  v39 = *(std::__shared_weak_count **)(v35 + 56);
  *(_QWORD *)(v35 + 48) = v34;
  *(_QWORD *)(v35 + 56) = v36;
  if (v39)
  {
    v40 = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = a5 + 3;
  if (!a7)
    v42 = a5;
  **(_QWORD **)(v14 + 96) = *v42;
  v43 = a6 + 3;
  if (!a7)
    v43 = a6;
  *(_QWORD *)(*(_QWORD *)(v14 + 96) + 8) = *v43;
  v44 = *(_QWORD *)(*(_QWORD *)(v14 + 64) + 32);
  v45 = *(_QWORD *)(v44 + 8);
  *(_QWORD *)&v46 = 0;
  if (v45)
    v47 = *(_QWORD *)(v44 + 72);
  else
    v47 = 0;
  *((_QWORD *)&v46 + 1) = *(_QWORD *)(*(_QWORD *)(v14 + 64) + 32);
  v63 = v46;
  *(_DWORD *)v47 = *(_DWORD *)(a4 + 48);
  *(_DWORD *)(v47 + 4) = *(_DWORD *)(a4 + 52);
  *(_DWORD *)(v47 + 8) = *(_DWORD *)(a4 + 56);
  *(_DWORD *)(v47 + 12) = *(_DWORD *)(a4 + 60);
  *(_DWORD *)(v47 + 16) = *(_DWORD *)(a4 + 64);
  *(_DWORD *)(v47 + 20) = *(_DWORD *)(a4 + 68);
  *(_DWORD *)(v47 + 24) = *(_DWORD *)(a4 + 72);
  *(_DWORD *)(v47 + 28) = *(_DWORD *)(a4 + 76);
  *(_DWORD *)(v47 + 32) = *(_DWORD *)(a4 + 80);
  *(_DWORD *)(v47 + 36) = *(_DWORD *)(a4 + 84);
  *(_DWORD *)(v47 + 40) = *(_DWORD *)(a4 + 88);
  *(_DWORD *)(v47 + 44) = *(_DWORD *)(a4 + 92);
  *(_DWORD *)(v47 + 48) = *(_DWORD *)(a4 + 96);
  *(_DWORD *)(v47 + 52) = *(_DWORD *)(a4 + 100);
  *(_DWORD *)(v47 + 56) = *(_DWORD *)(a4 + 104);
  *(_DWORD *)(v47 + 60) = *(_DWORD *)(a4 + 108);
  v48 = a5 + 4;
  v49 = 1;
  if (a7)
    v49 = 4;
  else
    v48 = a5 + 1;
  v50 = *((_DWORD *)v48 + 2);
  v51 = *(float *)(a4 + 144) * *((float *)v48 + 3);
  *(_QWORD *)(v47 + 64) = a5[v49];
  *(_DWORD *)(v47 + 72) = v50;
  *(float *)(v47 + 76) = v51;
  v52 = *(id *)(a2 + 80);
  *(_QWORD *)(v47 + 104) = *(_QWORD *)objc_msgSend(v52, "origin");

  v53 = *(id *)(a2 + 80);
  objc_msgSend(v53, "size");
  *(_DWORD *)(v47 + 112) = v54;
  *(_DWORD *)(v47 + 116) = v55;

  v56 = (float *)(a6 + 4);
  v57 = 1;
  if (a7)
    v57 = 4;
  else
    v56 = (float *)(a6 + 1);
  v58 = *(float *)(a4 + 144) * v56[3];
  v59 = a6[v57 + 1];
  *(_QWORD *)(v47 + 80) = a6[v57];
  *(_DWORD *)(v47 + 88) = v59;
  *(float *)(v47 + 92) = v58;
  *(_DWORD *)(v47 + 96) = *(_DWORD *)(a2 + 56);
  if (v45)
  {
    if ((_QWORD)v63 && *(_BYTE *)(*((_QWORD *)&v63 + 1) + 17) != 2)
      (*(void (**)(void))(*(_QWORD *)v63 + 64))();
    v60 = *(_QWORD *)(*((_QWORD *)&v63 + 1) + 64);
    if (v60 <= v45)
      v60 = v45;
    *(_QWORD *)(*((_QWORD *)&v63 + 1) + 56) = 0;
    *(_QWORD *)(*((_QWORD *)&v63 + 1) + 64) = v60;
  }
  if (v58 <= 0.0 && v51 <= 0.0)
    return 0;
  else
    return v14;
}

void sub_19FE68E30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);

  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)va);
  _Unwind_Resume(a1);
}

uint64_t md::polygonFillPipelineSetup<md::PolygonTileData>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, _QWORD *a6, int a7)
{
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  __int128 v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  int v38;
  float v39;
  id v40;
  id v41;
  int v42;
  int v43;
  unint64_t v44;
  __int128 v46;

  if (!*(_BYTE *)(a5 + 129))
    a1 = a2;
  v12 = ggl::FragmentedPool<ggl::RenderItem>::pop(a1);
  v13 = *(uint64_t **)(v12 + 64);
  v13[1] = 0;
  v14 = *a4;
  *v13 = *a4;
  v15 = *(_QWORD **)(v12 + 160);
  v16 = a4[1];
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = (std::__shared_weak_count *)v15[1];
  *v15 = v14;
  v15[1] = v16;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = *(_QWORD *)(v12 + 64);
  *(_QWORD *)(v22 + 24) = 0;
  v23 = *(_QWORD *)(a5 + 32);
  *(_QWORD *)(v22 + 16) = v23;
  v24 = *(_QWORD *)(v12 + 160);
  v25 = *(_QWORD *)(a5 + 40);
  if (v25)
  {
    v26 = (unint64_t *)(v25 + 8);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  v28 = *(std::__shared_weak_count **)(v24 + 24);
  *(_QWORD *)(v24 + 16) = v23;
  *(_QWORD *)(v24 + 24) = v25;
  if (v28)
  {
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = a6 + 3;
  if (!a7)
    v31 = a6;
  **(_QWORD **)(v12 + 96) = *v31;
  v32 = *(_QWORD *)(*(_QWORD *)(v12 + 64) + 32);
  v33 = *(_QWORD *)(v32 + 8);
  *(_QWORD *)&v34 = 0;
  if (v33)
    v35 = *(_QWORD *)(v32 + 72);
  else
    v35 = 0;
  *((_QWORD *)&v34 + 1) = *(_QWORD *)(*(_QWORD *)(v12 + 64) + 32);
  v46 = v34;
  *(_DWORD *)v35 = *(_DWORD *)(a5 + 48);
  *(_DWORD *)(v35 + 4) = *(_DWORD *)(a5 + 52);
  *(_DWORD *)(v35 + 8) = *(_DWORD *)(a5 + 56);
  *(_DWORD *)(v35 + 12) = *(_DWORD *)(a5 + 60);
  *(_DWORD *)(v35 + 16) = *(_DWORD *)(a5 + 64);
  *(_DWORD *)(v35 + 20) = *(_DWORD *)(a5 + 68);
  *(_DWORD *)(v35 + 24) = *(_DWORD *)(a5 + 72);
  *(_DWORD *)(v35 + 28) = *(_DWORD *)(a5 + 76);
  *(_DWORD *)(v35 + 32) = *(_DWORD *)(a5 + 80);
  *(_DWORD *)(v35 + 36) = *(_DWORD *)(a5 + 84);
  *(_DWORD *)(v35 + 40) = *(_DWORD *)(a5 + 88);
  *(_DWORD *)(v35 + 44) = *(_DWORD *)(a5 + 92);
  *(_DWORD *)(v35 + 48) = *(_DWORD *)(a5 + 96);
  *(_DWORD *)(v35 + 52) = *(_DWORD *)(a5 + 100);
  *(_DWORD *)(v35 + 56) = *(_DWORD *)(a5 + 104);
  *(_DWORD *)(v35 + 60) = *(_DWORD *)(a5 + 108);
  v36 = a6 + 4;
  v37 = 1;
  if (a7)
    v37 = 4;
  else
    v36 = a6 + 1;
  v38 = *((_DWORD *)v36 + 2);
  v39 = *(float *)(a5 + 144) * *((float *)v36 + 3);
  *(_QWORD *)(v35 + 64) = a6[v37];
  *(_DWORD *)(v35 + 72) = v38;
  *(float *)(v35 + 76) = v39;
  *(_DWORD *)(v35 + 80) = *(_DWORD *)(a3 + 56);
  v40 = *(id *)(a3 + 80);
  *(_QWORD *)(v35 + 88) = *(_QWORD *)objc_msgSend(v40, "origin");

  v41 = *(id *)(a3 + 80);
  objc_msgSend(v41, "size");
  *(_DWORD *)(v35 + 96) = v42;
  *(_DWORD *)(v35 + 100) = v43;

  if (v33)
  {
    if ((_QWORD)v46 && *(_BYTE *)(*((_QWORD *)&v46 + 1) + 17) != 2)
      (*(void (**)(void))(*(_QWORD *)v46 + 64))();
    v44 = *(_QWORD *)(*((_QWORD *)&v46 + 1) + 64);
    if (v44 <= v33)
      v44 = v33;
    *(_QWORD *)(*((_QWORD *)&v46 + 1) + 56) = 0;
    *(_QWORD *)(*((_QWORD *)&v46 + 1) + 64) = v44;
  }
  if (v39 <= 0.0)
    return 0;
  else
    return v12;
}

void sub_19FE6912C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);

  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)va);
  _Unwind_Resume(a1);
}

uint64_t md::writeSourceConstants<md::PolygonTileData,md::Stroke2StyleProperties>(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  unint64_t v6;
  __int128 v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  float v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  float v28;
  uint64_t v29;
  unsigned int v30;
  float *v31;
  float v32;
  _BOOL4 v33;
  _BOOL4 v35;
  unsigned int v36;
  float v37;
  _BOOL4 v38;
  int v40;
  char v41;
  char v42;
  unint64_t v43;
  float v44;
  float *v45;
  float v46;
  BOOL v47;
  unsigned int v48;
  float v49;
  float v50;
  float v51;
  float v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  float v57;
  int v58;
  uint64_t v59;
  unsigned int v60;
  float *v61;
  float v62;
  _BOOL4 v63;
  float v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  float *v70;
  float v71;
  BOOL v72;
  unsigned int v73;
  int v74;
  int v75;
  unsigned int v76;
  float v77;
  _BOOL4 v78;
  int v80;
  _BOOL4 v81;
  unsigned int v82;
  int v83;
  float v84;
  unsigned int v86;
  int v87;
  int v88;
  float v89;
  float v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  float *v94;
  float v95;
  BOOL v96;
  unsigned int v97;
  unint64_t v98;
  unint64_t v99;
  char *v100;
  char v101;
  float v102;
  unsigned int v103;
  float v104;
  float v105;
  float v106;
  float *v107;
  unint64_t v108;
  unint64_t v109;
  _QWORD *v110;
  int v111;
  int v112;
  unint64_t v113;
  unint64_t v114;
  __int128 v117;
  __int128 v118;
  _QWORD v119[2];
  unsigned __int8 v120;
  __int128 v121;
  unint64_t v122;
  unint64_t v123;
  __int16 v124;
  uint64_t v125;
  BOOL v126[9];

  v121 = 0uLL;
  v6 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)&v7 = 0;
  *((_QWORD *)&v7 + 1) = a3;
  if (v6)
    v8 = *(_QWORD *)(a3 + 72);
  else
    v8 = 0;
  v121 = v7;
  v122 = 0;
  v123 = v6;
  v125 = v8;
  v124 = 1;
  *(_DWORD *)v8 = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(v8 + 4) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(v8 + 8) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(v8 + 12) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(v8 + 16) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(v8 + 20) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(v8 + 24) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(v8 + 28) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(v8 + 32) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(v8 + 36) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(v8 + 40) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(v8 + 44) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(v8 + 48) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(v8 + 52) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(v8 + 56) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(v8 + 60) = *(_DWORD *)(a2 + 108);
  *(_QWORD *)(v8 + 320) = 0;
  *(_QWORD *)(v8 + 328) = 0;
  *(_DWORD *)(v8 + 464) = *(_DWORD *)(a1 + 56);
  v9 = 1.0 / *(double *)(a1 + 64);
  *(float *)(v8 + 468) = v9;
  *(_DWORD *)(v8 + 472) = *(_DWORD *)(a2 + 148);
  *a4 = 0;
  v10 = **(_QWORD **)(a2 + 160);
  if (*(_QWORD *)(*(_QWORD *)(a2 + 160) + 8) != v10)
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    while (1)
    {
      v20 = *(_OWORD *)(v10 + 16 * v11);
      v117 = v20;
      v21 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
      if (*((_QWORD *)&v20 + 1))
      {
        v22 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
        v118 = v20;
        do
          v24 = __ldxr(v22);
        while (__stxr(v24 + 1, v22));
        v25 = v20;
      }
      else
      {
        v25 = v20;
        v118 = (unint64_t)v20;
      }
      v119[0] = 0;
      v119[1] = 0;
      v120 = 0;
      if (v25)
        LODWORD(v25) = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v25 + 48))(v25, v119);
      v120 = v25;
      if (v21)
      {
        p_shared_owners = (unint64_t *)&v21->__shared_owners_;
        do
          v27 = __ldaxr(p_shared_owners);
        while (__stlxr(v27 - 1, p_shared_owners));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
        LODWORD(v25) = v120;
      }
      v28 = 0.0;
      if (!(_DWORD)v25)
      {
        v35 = 0;
        goto LABEL_75;
      }
      v29 = *(_QWORD *)(v118 + 24);
      v30 = (int)*(float *)(a1 + 48) >= 0x17 ? 23 : (int)*(float *)(a1 + 48);
      v31 = *(float **)v29;
      if (!*(_QWORD *)v29)
        break;
      v32 = *v31;
      v33 = *v31 == 1.0;
      if (!*(_BYTE *)(v29 + 10))
        goto LABEL_45;
      if (v32 == 0.0 || v32 == 1.0)
        goto LABEL_45;
LABEL_46:
      if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(_QWORD *)(v118 + 24), 0x11Du, v30, 0) & 1) != 0)
        goto LABEL_49;
      v36 = 1;
LABEL_48:
      if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v29, 0x11Du, v30, v36))
      {
LABEL_49:
        if (v31)
        {
          v37 = *v31;
          v38 = *v31 == 1.0;
          if (*(_BYTE *)(v29 + 10))
          {
            if (v37 != 0.0 && v37 != 1.0)
              goto LABEL_60;
          }
        }
        else
        {
          v38 = 0;
        }
        v40 = *(unsigned __int8 *)(v29 + v38 + 11);
        v37 = 0.0;
        if (v40 == 2)
        {
LABEL_60:
          LOBYTE(v117) = 1;
          v126[0] = 1;
          v41 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v29, 0x11Du, v30, 0, &v117);
          v42 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v29, 0x11Du, v30, 1, v126);
          if (v37 < 1.0)
            v42 = v41;
        }
        else
        {
          v42 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v29, 0x11Du, v30, v40, 0);
        }
        v35 = v42 != 0;
        if (!v120)
          goto LABEL_75;
        goto LABEL_65;
      }
      v35 = 1;
LABEL_65:
      v43 = *(_QWORD *)(v118 + 24);
      v44 = fminf(fmaxf(*(float *)(a1 + 48), 0.0), 23.0);
      v45 = *(float **)v43;
      if (*(_QWORD *)v43
        && (v46 = *v45, LODWORD(v45) = *v45 == 1.0, *(_BYTE *)(v43 + 10))
        && (v46 != 0.0 ? (v47 = v46 == 1.0) : (v47 = 1), !v47)
        || (v48 = *(unsigned __int8 *)(v43 + v45 + 11), v46 = 0.0, v48 == 2))
      {
        LOBYTE(v117) = 1;
        v126[0] = 1;
        gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v43, 0x194u, 0, (BOOL *)&v117, v44);
        v50 = v49;
        gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v43, 0x194u, 1u, v126, v44);
        v28 = v50 + (float)((float)(v51 - v50) * v46);
      }
      else
      {
        gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(*(_QWORD *)(v118 + 24), 0x194u, v48, 0, v44);
        v28 = v52;
      }
LABEL_75:
      v53 = *(double *)(a1 + 64) * 1.75;
      if (!v35 || v28 >= 0.0001)
      {
        v57 = v53 * v28;
        if (!v120)
        {
          v14 = *(unsigned __int8 *)(a2 + 152);
          if (v14 == 1)
            v15 = 0.0;
          else
            v15 = 1.0;
          if (v14 == 1)
            v16 = -1.0;
          else
            v16 = 0.0;
          if (v14 == 2)
          {
            v15 = 0.5;
            v16 = -0.5;
          }
          v17 = v125;
          v18 = v125 + 4 * v11;
          *(float *)(v18 + 336) = v15 * v57;
          *(float *)(v18 + 400) = v16 * v57;
          *(_DWORD *)(v17 + 476) = 0;
          v19 = v17 + 16 * v11;
          *(_QWORD *)(v19 + 64) = 0;
          *(_QWORD *)(v19 + 72) = 0;
          goto LABEL_15;
        }
        v58 = v12;
        v59 = *(_QWORD *)(v118 + 24);
        if ((int)*(float *)(a1 + 48) >= 0x17)
          v60 = 23;
        else
          v60 = (int)*(float *)(a1 + 48);
        v61 = *(float **)v59;
        if (*(_QWORD *)v59)
        {
          v62 = *v61;
          v63 = *v61 == 1.0;
          if (*(_BYTE *)(v59 + 10))
          {
            if (v62 != 0.0 && v62 != 1.0)
            {
LABEL_109:
              if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(_QWORD *)(v118 + 24), 0x198u, v60, 0) & 1) == 0)
              {
                v76 = 1;
                goto LABEL_111;
              }
              goto LABEL_112;
            }
          }
        }
        else
        {
          v63 = 0;
        }
        v76 = *(unsigned __int8 *)(v59 + v63 + 11);
        if (v76 == 2)
          goto LABEL_109;
LABEL_111:
        if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v59, 0x198u, v60, v76))
        {
LABEL_112:
          if (v61)
          {
            v77 = *v61;
            v78 = *v61 == 1.0;
            if (*(_BYTE *)(v59 + 10))
            {
              if (v77 != 0.0 && v77 != 1.0)
                goto LABEL_124;
            }
          }
          else
          {
            v78 = 0;
          }
          v82 = *(unsigned __int8 *)(v59 + v78 + 11);
          v77 = 0.0;
          if (v82 == 2)
          {
LABEL_124:
            LOBYTE(v117) = 1;
            v126[0] = 1;
            v80 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v59, 0x198u, v60, 0, &v117);
            v83 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v59, 0x198u, v60, 1u, v126);
            if (v77 >= 1.0)
              LOBYTE(v80) = v83;
          }
          else
          {
            v80 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v59, 0x198u, v60, v82, 0);
          }
          v59 = *(_QWORD *)(v118 + 24);
          v61 = *(float **)v59;
          if ((int)*(float *)(a1 + 48) >= 0x17)
            v60 = 23;
          else
            v60 = (int)*(float *)(a1 + 48);
          if (v61)
          {
LABEL_131:
            v84 = *v61;
            v81 = *v61 == 1.0;
            if (*(_BYTE *)(v59 + 10))
            {
              if (v84 != 0.0 && v84 != 1.0)
                goto LABEL_138;
            }
LABEL_137:
            v86 = *(unsigned __int8 *)(v59 + v81 + 11);
            v84 = 0.0;
            if (v86 == 2)
            {
LABEL_138:
              LOBYTE(v117) = 1;
              v126[0] = 1;
              v87 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v59, 0x1A4u, v60, 0, &v117);
              v88 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v59, 0x1A4u, v60, 1u, v126);
              if (v84 < 1.0)
                LOBYTE(v88) = v87;
            }
            else
            {
              LOBYTE(v88) = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v59, 0x1A4u, v60, v86, 0);
            }
            if (v80 == 2)
            {
              v89 = -0.5;
              v90 = 0.5;
            }
            else if (v80 == 1)
            {
              v89 = -1.0;
              v90 = 0.0;
            }
            else
            {
              v89 = 0.0;
              v90 = 1.0;
            }
            v91 = v125;
            v92 = v125 + 4 * v11;
            *(float *)(v92 + 336) = v90 * v57;
            *(float *)(v92 + 400) = v89 * v57;
            *(_DWORD *)(v91 + 476) = v88 == 1;
            v93 = *(_QWORD *)(v118 + 24);
            v94 = *(float **)v93;
            if (*(_QWORD *)v93
              && (v95 = *v94, LODWORD(v94) = *v94 == 1.0, *(_BYTE *)(v93 + 10))
              && (v95 != 0.0 ? (v96 = v95 == 1.0) : (v96 = 1), !v96)
              || (v97 = *(unsigned __int8 *)(v93 + v94 + 11), v95 = 0.0, v97 == 2))
            {
              LOBYTE(v117) = 1;
              v126[0] = 1;
              v98 = gss::RenderStyle<gss::PropertyID>::styleValueForKey<BOOL>(v93, 0x197u, 0, &v117);
              v99 = gss::RenderStyle<gss::PropertyID>::styleValueForKey<BOOL>(v93, 0x197u, 1u, v126);
              if (v95 >= 1.0)
                v100 = (char *)v99;
              else
                v100 = (char *)v98;
              v101 = *v100;
            }
            else
            {
              v101 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<BOOL>(*(_QWORD *)(v118 + 24), 0x197u, v97, 0);
            }
            v102 = *(float *)(a1 + 48);
            if (v101)
            {
              gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v117, *(_QWORD *)(v118 + 24), 0x193u, 2u, fminf(fmaxf(v102, 0.0), 23.0));
            }
            else
            {
              if ((int)v102 >= 0x17)
                v103 = 23;
              else
                v103 = (int)v102;
              gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v117, *(_QWORD *)(v118 + 24), 0x193u, v103, 2u, 0);
            }
            v104 = (float)WORD3(v117) * (float)(0.000015259 * *(float *)(a2 + 144));
            v105 = (float)(v104 * 0.000015259) * (float)WORD1(v117);
            v106 = (float)(v104 * 0.000015259) * (float)WORD2(v117);
            v107 = (float *)(v91 + 16 * v11);
            v107[16] = (float)(v104 * 0.000015259) * (float)(unsigned __int16)v117;
            v107[17] = v105;
            v107[18] = v106;
            v107[19] = v104;
            v12 = v58 | (v104 > 0.001);
            *a4 |= v104 < 1.0;
            goto LABEL_15;
          }
        }
        else
        {
          LOBYTE(v80) = *(_BYTE *)(a2 + 152);
          if (v61)
            goto LABEL_131;
        }
        v81 = 0;
        goto LABEL_137;
      }
      v54 = v125;
      if (*(_BYTE *)(a1 + 120))
      {
        v55 = v125 + 4 * v11;
        *(_DWORD *)(v55 + 336) = 0;
        *(_DWORD *)(v55 + 400) = 0;
        v56 = v54 + 16 * v11;
        *(_QWORD *)(v56 + 64) = 0;
        *(_QWORD *)(v56 + 72) = 0;
      }
      else
      {
        v65 = v53;
        v66 = v125 + 4 * v11;
        *(float *)(v66 + 336) = v65;
        *(_DWORD *)(v66 + 400) = 0;
        v67 = v54 + 16 * v11;
        *(_QWORD *)(v67 + 64) = 0;
        *(_QWORD *)(v67 + 72) = 0;
        if (v120)
        {
          v68 = *(_QWORD *)(v118 + 24);
          if ((int)*(float *)(a1 + 48) >= 0x17)
            v69 = 23;
          else
            v69 = (int)*(float *)(a1 + 48);
          v70 = *(float **)v68;
          if (*(_QWORD *)v68
            && (v71 = *v70, LODWORD(v70) = *v70 == 1.0, *(_BYTE *)(v68 + 10))
            && (v71 != 0.0 ? (v72 = v71 == 1.0) : (v72 = 1), !v72)
            || (v73 = *(unsigned __int8 *)(v68 + v70 + 11), v71 = 0.0, v73 == 2))
          {
            LOBYTE(v117) = 1;
            v126[0] = 1;
            v74 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v68, 0x1A4u, v69, 0, &v117);
            v75 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v68, 0x1A4u, v69, 1u, v126);
            if (v71 < 1.0)
              LOBYTE(v75) = v74;
          }
          else
          {
            LOBYTE(v75) = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(_QWORD *)(v118 + 24), 0x1A4u, v69, v73, 0);
          }
          *(_DWORD *)(v54 + 476) = v75 == 1;
          goto LABEL_15;
        }
      }
      *(_DWORD *)(v54 + 476) = 0;
LABEL_15:
      gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v118);
      v11 = ++v13;
      v10 = **(_QWORD **)(a2 + 160);
      if (v13 >= (unint64_t)((*(_QWORD *)(*(_QWORD *)(a2 + 160) + 8) - v10) >> 4))
        goto LABEL_170;
    }
    v33 = 0;
LABEL_45:
    v36 = *(unsigned __int8 *)(v29 + v33 + 11);
    if (v36 != 2)
      goto LABEL_48;
    goto LABEL_46;
  }
  LOBYTE(v12) = 0;
LABEL_170:
  v109 = v122;
  v108 = v123;
  if (v123 != v122)
  {
    v110 = (_QWORD *)*((_QWORD *)&v121 + 1);
    v111 = v124;
    v112 = HIBYTE(v124);
    if ((_QWORD)v121 && *(_BYTE *)(*((_QWORD *)&v121 + 1) + 17) != 2)
      (*(void (**)(void))(*(_QWORD *)v121 + 64))();
    if (v111 && !v112)
    {
      v114 = v110[7];
      v113 = v110[8];
      if (v113 == v114)
        v114 = v110[10] - v110[9];
      if (v109 < v114)
        v114 = v109;
      if (v113 <= v108)
        v113 = v108;
      if (v113 == v114)
        v113 = v114 + v110[10] - v110[9];
      v110[7] = v114;
      v110[8] = v113;
    }
  }
  return v12 & 1;
}

void sub_19FE69BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)va);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)va1);
  _Unwind_Resume(a1);
}

uint64_t md::animatingPolygonStrokePipelineSetup<md::PolygonTileData,md::Stroke2StyleProperties>(uint64_t *a1, uint64_t a2, uint64_t *a3, _QWORD *a4, _QWORD *a5, _BYTE *a6)
{
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  _QWORD *v42;

  v12 = ggl::FragmentedPool<ggl::RenderItem>::pop(a1[25]);
  v13 = *(uint64_t **)(v12 + 64);
  v14 = *a3;
  v15 = a3[1];
  *v13 = *a3;
  v13[1] = 0;
  v16 = *(_QWORD **)(v12 + 160);
  if (v15)
  {
    v17 = (unint64_t *)(v15 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = (std::__shared_weak_count *)v16[1];
  *v16 = v14;
  v16[1] = v15;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = *(_QWORD *)(v12 + 64);
  v23 = a3[4];
  v24 = a3[5];
  *(_QWORD *)(v22 + 16) = v23;
  *(_QWORD *)(v22 + 24) = 0;
  v25 = *(_QWORD *)(v12 + 160);
  if (v24)
  {
    v26 = (unint64_t *)(v24 + 8);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  v28 = *(std::__shared_weak_count **)(v25 + 24);
  *(_QWORD *)(v25 + 16) = v23;
  *(_QWORD *)(v25 + 24) = v24;
  if (v28)
  {
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = *(_QWORD *)(v12 + 64);
  v32 = a1[119];
  *(_QWORD *)(v31 + 48) = v32;
  *(_QWORD *)(v31 + 56) = 0;
  v33 = *(_QWORD *)(v12 + 160);
  v34 = a1[120];
  if (v34)
  {
    v35 = (unint64_t *)(v34 + 8);
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
  }
  v37 = *(std::__shared_weak_count **)(v33 + 56);
  *(_QWORD *)(v33 + 48) = v32;
  *(_QWORD *)(v33 + 56) = v34;
  if (v37)
  {
    v38 = (unint64_t *)&v37->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  **(_QWORD **)(v12 + 96) = a3[15];
  *(_QWORD *)(*(_QWORD *)(v12 + 96) + 8) = *a4;
  *(_QWORD *)(*(_QWORD *)(v12 + 96) + 16) = *a5;
  md::writeSourceConstants<md::PolygonTileData,md::Stroke2StyleProperties>(a2, (uint64_t)a3, *(_QWORD *)(*(_QWORD *)(v12 + 64) + 32), a6);
  v40 = *(_QWORD **)(*(_QWORD *)(v12 + 64) + 64);
  v41 = v40[1];
  v42 = (_QWORD *)v40[9];
  *v42 = 0;
  v42[1] = 0;
  if (v40[8] > v41)
    v41 = v40[8];
  v40[7] = 0;
  v40[8] = v41;
  return v12;
}

uint64_t md::generateStrokeRenderItem<md::PolygonTileData,md::Stroke2StyleProperties>(ggl::CommandBuffer *,md::PolygonRenderResources &,md::PolygonLayoutCharacteristics const&,md::PolygonGroupLayoutInfo<md::PolygonTileData> const&,md::PolygonConfiguration const&,md::PolygonBlendingConfiguration const&,md::PolygonBlendingConfiguration const&,std::function<BOOL ()(unsigned long long)>,md::PolygonLayoutCharacteristics::StrokeState,md::PolygonRenderDepthType)::{lambda(ggl::RenderItem const&)#1}::operator()(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t *v4;
  unsigned __int8 i;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[24];
  _BYTE *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  result = objc_msgSend(*(id *)(*a1 + 80), "strokeMeshes");
  v4 = *(uint64_t **)result;
  v23 = *(uint64_t **)(result + 8);
  if (*(uint64_t **)result != v23)
  {
    for (i = 0; ; ++i)
    {
      v6 = *(id *)(*a1 + 80);
      v7 = a1[1];
      v8 = *(unsigned int *)(*a1 + 100);
      v9 = a1[2];
      v10 = *(_QWORD *)(v9 + 24);
      if (!v10)
        goto LABEL_6;
      if (v10 != v9)
        break;
      v32 = v31;
      (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v9 + 24) + 24))(*(_QWORD *)(v9 + 24), v31);
LABEL_8:
      v11 = (uint64_t *)objc_msgSend(v6, "commitRangesToStrokeRenderItemBatcher:forMeshAtIndex:cullingMask:featureIdPredicate:", v7 + 984, i, v8, v31, v23);
      v12 = v32;
      if (v32 == v31)
      {
        v12 = v31;
        v13 = 4;
        goto LABEL_12;
      }
      if (v32)
      {
        v13 = 5;
LABEL_12:
        (*(void (**)(void))(*v12 + 8 * v13))();
      }

      v14 = a1[3];
      v15 = a1[1];
      v16 = *v4;
      v18 = *(_QWORD *)(a2 + 8);
      v17 = *(_QWORD *)(a2 + 16);
      v27 = *(_OWORD *)(a2 + 56);
      v28 = *(_OWORD *)(a2 + 72);
      v29 = *(_OWORD *)(a2 + 88);
      v30 = *(_OWORD *)(a2 + 104);
      v25 = *(_OWORD *)(a2 + 24);
      v26 = *(_OWORD *)(a2 + 40);
      v19 = *(_QWORD **)(v15 + 1072);
      v20 = v19[1];
      if (v20 == *(_QWORD *)(v15 + 1080))
      {
        v19 = (_QWORD *)*v19;
        if (!v19)
        {
          v19 = malloc_type_malloc(120 * v20 + 16, 0xB644C221uLL);
          *v19 = 0;
          v19[1] = 0;
          **(_QWORD **)(v15 + 1072) = v19;
        }
        *(_QWORD *)(v15 + 1072) = v19;
        v20 = v19[1];
      }
      v21 = &v19[15 * v20];
      v19[1] = v20 + 1;
      v21[2] = &off_1E42B59B0;
      v21[3] = v18;
      v21 += 2;
      v21[2] = v17;
      *(_OWORD *)(v21 + 7) = v27;
      *(_OWORD *)(v21 + 5) = v26;
      *(_OWORD *)(v21 + 3) = v25;
      *(_OWORD *)(v21 + 13) = v30;
      *(_OWORD *)(v21 + 11) = v29;
      *(_OWORD *)(v21 + 9) = v28;
      v21[8] = v16;
      v22 = *v11;
      v21[11] = *v11;
      v21[12] = (v11[1] - v22) >> 4;
      result = ggl::CommandBuffer::pushRenderItem(v14, (ggl::RenderItem *)v21);
      v4 += 2;
      if (v4 == v23)
        return result;
    }
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
LABEL_6:
    v32 = (_BYTE *)v10;
    goto LABEL_8;
  }
  return result;
}

void sub_19FE6A0A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t md::writeSourceConstants<md::PolygonTileData,md::Stroke1StyleProperties>(uint64_t a1, uint64_t a2, float32x2_t *a3, uint64_t a4, _BYTE *a5)
{
  unint64_t v5;
  __int128 v6;
  float32x2_t *v7;
  float v8;
  uint64_t v9;
  uint64_t v12;
  int v13;
  int v14;
  char *v15;
  float32x2_t *v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  float v25;
  uint64_t v26;
  unsigned int v27;
  float *v28;
  float v29;
  _BOOL4 v30;
  _BOOL4 v32;
  unsigned int v33;
  float v34;
  _BOOL4 v35;
  int v37;
  char v38;
  char v39;
  unint64_t v40;
  float v41;
  float *v42;
  float v43;
  BOOL v44;
  unsigned int v45;
  float v46;
  float v47;
  float v48;
  float v49;
  double v50;
  float32x2_t *v51;
  float v52;
  float *v53;
  float32x2_t *v54;
  __int32 v55;
  uint64_t v56;
  unsigned int v57;
  float *v58;
  float v59;
  BOOL v60;
  unsigned int v61;
  int v62;
  int v63;
  float v64;
  uint64_t v65;
  unsigned int v66;
  float *v67;
  float v68;
  _BOOL4 v69;
  int v71;
  float v72;
  float v73;
  float32x2_t *v74;
  float *v75;
  float32x2_t *v76;
  unsigned int v77;
  float v78;
  _BOOL4 v79;
  int v81;
  _BOOL4 v82;
  unsigned int v83;
  int v84;
  float v85;
  unsigned int v87;
  int v88;
  int v89;
  float v90;
  float v91;
  float32x2_t *v92;
  float *v93;
  unint64_t v94;
  float *v95;
  float v96;
  BOOL v97;
  unsigned int v98;
  unint64_t v99;
  unint64_t v100;
  char *v101;
  char v102;
  float v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  float v107;
  float *v108;
  _BOOL4 v109;
  unint64_t v110;
  unint64_t v111;
  _QWORD *v112;
  int v113;
  int v114;
  unint64_t v115;
  unint64_t v116;
  float v119;
  __int128 v120;
  __int128 v121;
  _QWORD v122[2];
  unsigned __int8 v123;
  __int128 v124;
  unint64_t v125;
  unint64_t v126;
  __int16 v127;
  float32x2_t *v128;
  BOOL v129[9];

  v124 = 0uLL;
  v5 = *(_QWORD *)(a4 + 8);
  *(_QWORD *)&v6 = 0;
  *((_QWORD *)&v6 + 1) = a4;
  v7 = *(float32x2_t **)(a4 + 72);
  v124 = v6;
  v125 = 0;
  v126 = v5;
  v128 = v7;
  v127 = 1;
  v7->i32[0] = *(_DWORD *)(a2 + 48);
  v7->i32[1] = *(_DWORD *)(a2 + 52);
  v7[1].i32[0] = *(_DWORD *)(a2 + 56);
  v7[1].i32[1] = *(_DWORD *)(a2 + 60);
  v7[2].i32[0] = *(_DWORD *)(a2 + 64);
  v7[2].i32[1] = *(_DWORD *)(a2 + 68);
  v7[3].i32[0] = *(_DWORD *)(a2 + 72);
  v7[3].i32[1] = *(_DWORD *)(a2 + 76);
  v7[4].i32[0] = *(_DWORD *)(a2 + 80);
  v7[4].i32[1] = *(_DWORD *)(a2 + 84);
  v7[5].i32[0] = *(_DWORD *)(a2 + 88);
  v7[5].i32[1] = *(_DWORD *)(a2 + 92);
  v7[6].i32[0] = *(_DWORD *)(a2 + 96);
  v7[6].i32[1] = *(_DWORD *)(a2 + 100);
  v7[7].i32[0] = *(_DWORD *)(a2 + 104);
  v7[7].i32[1] = *(_DWORD *)(a2 + 108);
  v8 = *(float *)(a2 + 144) * a3[2].f32[1];
  *(float *)&v6 = v8 * a3[2].f32[0];
  v7[40] = vmul_n_f32(a3[1], v8);
  v7[41].i32[0] = v6;
  v119 = v8;
  v7[41].f32[1] = v8;
  v7[58].i32[0] = *(_DWORD *)(a1 + 56);
  *(float *)&v6 = 1.0 / *(double *)(a1 + 64);
  v7[58].i32[1] = v6;
  v7[59].i32[0] = *(_DWORD *)(a2 + 148);
  *a5 = 0;
  v9 = **(_QWORD **)(a2 + 160);
  if (*(_QWORD *)(*(_QWORD *)(a2 + 160) + 8) != v9)
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    while (1)
    {
      v17 = *(_OWORD *)(v9 + 16 * v12);
      v120 = v17;
      v18 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
      if (*((_QWORD *)&v17 + 1))
      {
        v19 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
        v121 = v17;
        do
          v21 = __ldxr(v19);
        while (__stxr(v21 + 1, v19));
        v22 = v17;
      }
      else
      {
        v22 = v17;
        v121 = (unint64_t)v17;
      }
      v122[0] = 0;
      v122[1] = 0;
      v123 = 0;
      if (v22)
        LODWORD(v22) = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v22 + 48))(v22, v122);
      v123 = v22;
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v24 = __ldaxr(p_shared_owners);
        while (__stlxr(v24 - 1, p_shared_owners));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
        LODWORD(v22) = v123;
      }
      v25 = 0.0;
      if (!(_DWORD)v22)
      {
        v32 = 0;
        goto LABEL_64;
      }
      v26 = *(_QWORD *)(v121 + 24);
      v27 = (int)*(float *)(a1 + 48) >= 0x17 ? 23 : (int)*(float *)(a1 + 48);
      v28 = *(float **)v26;
      if (!*(_QWORD *)v26)
        break;
      v29 = *v28;
      v30 = *v28 == 1.0;
      if (!*(_BYTE *)(v26 + 10))
        goto LABEL_34;
      if (v29 == 0.0 || v29 == 1.0)
        goto LABEL_34;
LABEL_35:
      if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(_QWORD *)(v121 + 24), 0x11Du, v27, 0) & 1) != 0)
        goto LABEL_38;
      v33 = 1;
LABEL_37:
      if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v26, 0x11Du, v27, v33))
      {
LABEL_38:
        if (v28)
        {
          v34 = *v28;
          v35 = *v28 == 1.0;
          if (*(_BYTE *)(v26 + 10))
          {
            if (v34 != 0.0 && v34 != 1.0)
              goto LABEL_49;
          }
        }
        else
        {
          v35 = 0;
        }
        v37 = *(unsigned __int8 *)(v26 + v35 + 11);
        v34 = 0.0;
        if (v37 == 2)
        {
LABEL_49:
          LOBYTE(v120) = 1;
          v129[0] = 1;
          v38 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v26, 0x11Du, v27, 0, &v120);
          v39 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v26, 0x11Du, v27, 1, v129);
          if (v34 < 1.0)
            v39 = v38;
        }
        else
        {
          v39 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v26, 0x11Du, v27, v37, 0);
        }
        v32 = v39 != 0;
        if (!v123)
          goto LABEL_64;
        goto LABEL_54;
      }
      v32 = 1;
LABEL_54:
      v40 = *(_QWORD *)(v121 + 24);
      v41 = fminf(fmaxf(*(float *)(a1 + 48), 0.0), 23.0);
      v42 = *(float **)v40;
      if (*(_QWORD *)v40
        && (v43 = *v42, LODWORD(v42) = *v42 == 1.0, *(_BYTE *)(v40 + 10))
        && (v43 != 0.0 ? (v44 = v43 == 1.0) : (v44 = 1), !v44)
        || (v45 = *(unsigned __int8 *)(v40 + v42 + 11), v43 = 0.0, v45 == 2))
      {
        LOBYTE(v120) = 1;
        v129[0] = 1;
        gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v40, 0x61u, 0, (BOOL *)&v120, v41);
        v47 = v46;
        gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v40, 0x61u, 1u, v129, v41);
        v25 = v47 + (float)((float)(v48 - v47) * v43);
      }
      else
      {
        gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(*(_QWORD *)(v121 + 24), 0x61u, v45, 0, v41);
        v25 = v49;
      }
LABEL_64:
      v50 = *(double *)(a1 + 64) * 1.75;
      if (v32 && v25 < 0.0001)
      {
        v51 = v128;
        if (*(_BYTE *)(a1 + 120))
        {
          v15 = (char *)v128 + 4 * v12;
          *((_DWORD *)v15 + 84) = 0;
          *((_DWORD *)v15 + 100) = 0;
          v16 = &v51[2 * v12];
          v16[8] = 0;
          v16[9] = 0;
          v51[59].i32[1] = 0;
        }
        else
        {
          v52 = v50;
          v53 = (float *)v128 + v12;
          v53[84] = v52;
          v53[100] = 0.0;
          v54 = &v51[2 * v12];
          v54[8] = 0;
          v54[9] = 0;
          v55 = v123;
          if (v123)
          {
            v56 = *(_QWORD *)(v121 + 24);
            if ((int)*(float *)(a1 + 48) >= 0x17)
              v57 = 23;
            else
              v57 = (int)*(float *)(a1 + 48);
            v58 = *(float **)v56;
            if (*(_QWORD *)v56
              && (v59 = *v58, LODWORD(v58) = *v58 == 1.0, *(_BYTE *)(v56 + 10))
              && (v59 != 0.0 ? (v60 = v59 == 1.0) : (v60 = 1), !v60)
              || (v61 = *(unsigned __int8 *)(v56 + v58 + 11), v59 = 0.0, v61 == 2))
            {
              LOBYTE(v120) = 1;
              v129[0] = 1;
              v62 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v56, 0x1A4u, v57, 0, &v120);
              v63 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v56, 0x1A4u, v57, 1u, v129);
              if (v59 < 1.0)
                LOBYTE(v63) = v62;
            }
            else
            {
              LOBYTE(v63) = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(_QWORD *)(v121 + 24), 0x1A4u, v57, v61, 0);
            }
            v55 = v63 == 1;
          }
          v51[59].i32[1] = v55;
          v13 |= v119 > 0.001;
        }
        goto LABEL_4;
      }
      v64 = v50 * v25;
      if (!v123)
      {
        v71 = *(unsigned __int8 *)(a2 + 152);
        if (v71 == 1)
          v72 = 0.0;
        else
          v72 = 1.0;
        if (v71 == 1)
          v73 = -1.0;
        else
          v73 = 0.0;
        if (v71 == 2)
        {
          v72 = 0.5;
          v73 = -0.5;
        }
        v74 = v128;
        v75 = (float *)v128 + v12;
        v75[84] = v72 * v64;
        v75[100] = v73 * v64;
        v74[59].i32[1] = 0;
        v76 = &v74[2 * v12];
        v13 |= v119 > 0.001;
        v76[8] = 0;
        v76[9] = 0;
        goto LABEL_4;
      }
      v65 = *(_QWORD *)(v121 + 24);
      if ((int)*(float *)(a1 + 48) >= 0x17)
        v66 = 23;
      else
        v66 = (int)*(float *)(a1 + 48);
      v67 = *(float **)v65;
      if (!*(_QWORD *)v65)
      {
        v69 = 0;
LABEL_104:
        v77 = *(unsigned __int8 *)(v65 + v69 + 11);
        if (v77 != 2)
          goto LABEL_107;
        goto LABEL_105;
      }
      v68 = *v67;
      v69 = *v67 == 1.0;
      if (!*(_BYTE *)(v65 + 10))
        goto LABEL_104;
      if (v68 == 0.0 || v68 == 1.0)
        goto LABEL_104;
LABEL_105:
      if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(_QWORD *)(v121 + 24), 0x13Fu, v66, 0) & 1) != 0)
        goto LABEL_108;
      v77 = 1;
LABEL_107:
      if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v65, 0x13Fu, v66, v77))
      {
        LOBYTE(v81) = *(_BYTE *)(a2 + 152);
        if (!v67)
          goto LABEL_117;
        goto LABEL_127;
      }
LABEL_108:
      if (v67)
      {
        v78 = *v67;
        v79 = *v67 == 1.0;
        if (*(_BYTE *)(v65 + 10))
        {
          if (v78 != 0.0 && v78 != 1.0)
            goto LABEL_120;
        }
      }
      else
      {
        v79 = 0;
      }
      v83 = *(unsigned __int8 *)(v65 + v79 + 11);
      v78 = 0.0;
      if (v83 != 2)
      {
        v81 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v65, 0x13Fu, v66, v83, 0);
        goto LABEL_123;
      }
LABEL_120:
      LOBYTE(v120) = 1;
      v129[0] = 1;
      v81 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v65, 0x13Fu, v66, 0, &v120);
      v84 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v65, 0x13Fu, v66, 1u, v129);
      if (v78 >= 1.0)
        LOBYTE(v81) = v84;
LABEL_123:
      v65 = *(_QWORD *)(v121 + 24);
      v67 = *(float **)v65;
      if ((int)*(float *)(a1 + 48) >= 0x17)
        v66 = 23;
      else
        v66 = (int)*(float *)(a1 + 48);
      if (!v67)
      {
LABEL_117:
        v82 = 0;
        goto LABEL_133;
      }
LABEL_127:
      v85 = *v67;
      v82 = *v67 == 1.0;
      if (*(_BYTE *)(v65 + 10))
      {
        if (v85 != 0.0 && v85 != 1.0)
        {
LABEL_134:
          LOBYTE(v120) = 1;
          v129[0] = 1;
          v88 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v65, 0x1A4u, v66, 0, &v120);
          v89 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v65, 0x1A4u, v66, 1u, v129);
          if (v85 < 1.0)
            LOBYTE(v89) = v88;
          goto LABEL_138;
        }
      }
LABEL_133:
      v87 = *(unsigned __int8 *)(v65 + v82 + 11);
      v85 = 0.0;
      if (v87 == 2)
        goto LABEL_134;
      LOBYTE(v89) = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v65, 0x1A4u, v66, v87, 0);
LABEL_138:
      if (v81 == 2)
      {
        v90 = -0.5;
        v91 = 0.5;
      }
      else if (v81 == 1)
      {
        v90 = -1.0;
        v91 = 0.0;
      }
      else
      {
        v90 = 0.0;
        v91 = 1.0;
      }
      v92 = v128;
      v93 = (float *)v128 + v12;
      v93[84] = v91 * v64;
      v93[100] = v90 * v64;
      v92[59].i32[1] = v89 == 1;
      v94 = *(_QWORD *)(v121 + 24);
      v95 = *(float **)v94;
      if (*(_QWORD *)v94
        && (v96 = *v95, LODWORD(v95) = *v95 == 1.0, *(_BYTE *)(v94 + 10))
        && (v96 != 0.0 ? (v97 = v96 == 1.0) : (v97 = 1), !v97)
        || (v98 = *(unsigned __int8 *)(v94 + v95 + 11), v96 = 0.0, v98 == 2))
      {
        LOBYTE(v120) = 1;
        v129[0] = 1;
        v99 = gss::RenderStyle<gss::PropertyID>::styleValueForKey<BOOL>(v94, 0x6Bu, 0, &v120);
        v100 = gss::RenderStyle<gss::PropertyID>::styleValueForKey<BOOL>(v94, 0x6Bu, 1u, v129);
        if (v96 >= 1.0)
          v101 = (char *)v100;
        else
          v101 = (char *)v99;
        v102 = *v101;
      }
      else
      {
        v102 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<BOOL>(*(_QWORD *)(v121 + 24), 0x6Bu, v98, 0);
      }
      v103 = *(float *)(a1 + 48);
      if (v102)
      {
        gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v120, *(_QWORD *)(v121 + 24), 0x5Du, 2u, fminf(fmaxf(v103, 0.0), 23.0));
      }
      else
      {
        if ((int)v103 >= 0x17)
          v104 = 23;
        else
          v104 = (int)v103;
        gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v120, *(_QWORD *)(v121 + 24), 0x5Du, v104, 2u, 0);
      }
      v105 = WORD1(v120);
      v106 = WORD2(v120);
      v107 = (float)WORD3(v120) * (float)(0.000015259 * *(float *)(a2 + 144));
      v108 = (float *)&v92[2 * v12];
      v108[16] = (float)(v107 * 0.000015259) * (float)(unsigned __int16)v120;
      v108[17] = (float)(v107 * 0.000015259) * (float)v105;
      v108[18] = (float)(v107 * 0.000015259) * (float)v106;
      v108[19] = v107;
      v109 = v119 > 0.001 || v107 > 0.001;
      v13 |= v109;
      *a5 |= v107 < 1.0;
LABEL_4:
      gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v121);
      v12 = ++v14;
      v9 = **(_QWORD **)(a2 + 160);
      if (v14 >= (unint64_t)((*(_QWORD *)(*(_QWORD *)(a2 + 160) + 8) - v9) >> 4))
        goto LABEL_170;
    }
    v30 = 0;
LABEL_34:
    v33 = *(unsigned __int8 *)(v26 + v30 + 11);
    if (v33 != 2)
      goto LABEL_37;
    goto LABEL_35;
  }
  LOBYTE(v13) = 0;
  if (v128)
  {
LABEL_170:
    v111 = v125;
    v110 = v126;
    if (v126 != v125)
    {
      v112 = (_QWORD *)*((_QWORD *)&v124 + 1);
      v113 = v127;
      v114 = HIBYTE(v127);
      if ((_QWORD)v124 && *(_BYTE *)(*((_QWORD *)&v124 + 1) + 17) != 2)
        (*(void (**)(void))(*(_QWORD *)v124 + 64))();
      if (v113 && !v114)
      {
        v116 = v112[7];
        v115 = v112[8];
        if (v115 == v116)
          v116 = v112[10] - v112[9];
        if (v111 < v116)
          v116 = v111;
        if (v115 <= v110)
          v115 = v110;
        if (v115 == v116)
          v115 = v116 + v112[10] - v112[9];
        v112[7] = v116;
        v112[8] = v115;
      }
    }
  }
  return v13 & 1;
}

void sub_19FE6ABD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)va);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)va1);
  _Unwind_Resume(a1);
}

uint64_t md::animatingPolygonStrokePipelineSetup<md::PolygonTileData,md::Stroke1StyleProperties>(uint64_t *a1, uint64_t a2, uint64_t a3, float32x2_t *a4, float32x2_t *a5, _BYTE *a6)
{
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  int v40;
  _QWORD *v41;
  unint64_t v42;
  float v43;
  float32_t v44;
  float32x2_t *v45;
  unint64_t v46;
  int v47;

  v12 = ggl::FragmentedPool<ggl::RenderItem>::pop(a1[25]);
  v13 = *(_QWORD **)(v12 + 64);
  v14 = *(_QWORD *)a3;
  v15 = *(_QWORD *)(a3 + 8);
  *v13 = *(_QWORD *)a3;
  v13[1] = 0;
  v16 = *(_QWORD **)(v12 + 160);
  if (v15)
  {
    v17 = (unint64_t *)(v15 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = (std::__shared_weak_count *)v16[1];
  *v16 = v14;
  v16[1] = v15;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = *(_QWORD *)(v12 + 64);
  v23 = *(_QWORD *)(a3 + 32);
  v24 = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(v22 + 16) = v23;
  *(_QWORD *)(v22 + 24) = 0;
  v25 = *(_QWORD *)(v12 + 160);
  if (v24)
  {
    v26 = (unint64_t *)(v24 + 8);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  v28 = *(std::__shared_weak_count **)(v25 + 24);
  *(_QWORD *)(v25 + 16) = v23;
  *(_QWORD *)(v25 + 24) = v24;
  if (v28)
  {
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = *(_QWORD *)(v12 + 64);
  v32 = a1[119];
  *(_QWORD *)(v31 + 48) = v32;
  *(_QWORD *)(v31 + 56) = 0;
  v33 = *(_QWORD *)(v12 + 160);
  v34 = a1[120];
  if (v34)
  {
    v35 = (unint64_t *)(v34 + 8);
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
  }
  v37 = *(std::__shared_weak_count **)(v33 + 56);
  *(_QWORD *)(v33 + 48) = v32;
  *(_QWORD *)(v33 + 56) = v34;
  if (v37)
  {
    v38 = (unint64_t *)&v37->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  **(_QWORD **)(v12 + 96) = *(_QWORD *)(a3 + 120);
  *(float32x2_t *)(*(_QWORD *)(v12 + 96) + 8) = *a4;
  *(float32x2_t *)(*(_QWORD *)(v12 + 96) + 16) = *a5;
  v40 = md::writeSourceConstants<md::PolygonTileData,md::Stroke1StyleProperties>(a2, a3, a4, *(_QWORD *)(*(_QWORD *)(v12 + 64) + 32), a6);
  v41 = *(_QWORD **)(*(_QWORD *)(v12 + 64) + 64);
  v42 = v41[1];
  v43 = *(float *)(a3 + 144) * a5[2].f32[1];
  v44 = v43 * a5[2].f32[0];
  v46 = v41[8];
  v45 = (float32x2_t *)v41[9];
  *v45 = vmul_n_f32(a5[1], v43);
  v45[1].f32[0] = v44;
  v45[1].f32[1] = v43;
  if (v46 > v42)
    v42 = v46;
  v41[7] = 0;
  v41[8] = v42;
  if (v43 >= 0.0)
    v47 = 1;
  else
    v47 = v40;
  if (v47)
    return v12;
  else
    return 0;
}

uint64_t md::generateStrokeRenderItem<md::PolygonTileData,md::Stroke1StyleProperties>(ggl::CommandBuffer *,md::PolygonRenderResources &,md::PolygonLayoutCharacteristics const&,md::PolygonGroupLayoutInfo<md::PolygonTileData> const&,md::PolygonConfiguration const&,md::PolygonBlendingConfiguration const&,md::PolygonBlendingConfiguration const&,std::function<BOOL ()(unsigned long long)>,md::PolygonLayoutCharacteristics::StrokeState,md::PolygonRenderDepthType)::{lambda(ggl::RenderItem const&)#1}::operator()(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t *v4;
  unsigned __int8 i;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[24];
  _BYTE *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  result = objc_msgSend(*(id *)(*a1 + 80), "strokeMeshes");
  v4 = *(uint64_t **)result;
  v23 = *(uint64_t **)(result + 8);
  if (*(uint64_t **)result != v23)
  {
    for (i = 0; ; ++i)
    {
      v6 = *(id *)(*a1 + 80);
      v7 = a1[1];
      v8 = *(unsigned int *)(*a1 + 100);
      v9 = a1[2];
      v10 = *(_QWORD *)(v9 + 24);
      if (!v10)
        goto LABEL_6;
      if (v10 != v9)
        break;
      v32 = v31;
      (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v9 + 24) + 24))(*(_QWORD *)(v9 + 24), v31);
LABEL_8:
      v11 = (uint64_t *)objc_msgSend(v6, "commitRangesToStrokeRenderItemBatcher:forMeshAtIndex:cullingMask:featureIdPredicate:", v7 + 984, i, v8, v31, v23);
      v12 = v32;
      if (v32 == v31)
      {
        v12 = v31;
        v13 = 4;
        goto LABEL_12;
      }
      if (v32)
      {
        v13 = 5;
LABEL_12:
        (*(void (**)(void))(*v12 + 8 * v13))();
      }

      v14 = a1[3];
      v15 = a1[1];
      v16 = *v4;
      v18 = *(_QWORD *)(a2 + 8);
      v17 = *(_QWORD *)(a2 + 16);
      v27 = *(_OWORD *)(a2 + 56);
      v28 = *(_OWORD *)(a2 + 72);
      v29 = *(_OWORD *)(a2 + 88);
      v30 = *(_OWORD *)(a2 + 104);
      v25 = *(_OWORD *)(a2 + 24);
      v26 = *(_OWORD *)(a2 + 40);
      v19 = *(_QWORD **)(v15 + 1072);
      v20 = v19[1];
      if (v20 == *(_QWORD *)(v15 + 1080))
      {
        v19 = (_QWORD *)*v19;
        if (!v19)
        {
          v19 = malloc_type_malloc(120 * v20 + 16, 0xB644C221uLL);
          *v19 = 0;
          v19[1] = 0;
          **(_QWORD **)(v15 + 1072) = v19;
        }
        *(_QWORD *)(v15 + 1072) = v19;
        v20 = v19[1];
      }
      v21 = &v19[15 * v20];
      v19[1] = v20 + 1;
      v21[2] = &off_1E42B59B0;
      v21[3] = v18;
      v21 += 2;
      v21[2] = v17;
      *(_OWORD *)(v21 + 7) = v27;
      *(_OWORD *)(v21 + 5) = v26;
      *(_OWORD *)(v21 + 3) = v25;
      *(_OWORD *)(v21 + 13) = v30;
      *(_OWORD *)(v21 + 11) = v29;
      *(_OWORD *)(v21 + 9) = v28;
      v21[8] = v16;
      v22 = *v11;
      v21[11] = *v11;
      v21[12] = (v11[1] - v22) >> 4;
      result = ggl::CommandBuffer::pushRenderItem(v14, (ggl::RenderItem *)v21);
      v4 += 2;
      if (v4 == v23)
        return result;
    }
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
LABEL_6:
    v32 = (_BYTE *)v10;
    goto LABEL_8;
  }
  return result;
}

void sub_19FE6B0D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t md::_polygonIsVisibleWithQueryLocker(uint64_t a1, float a2)
{
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  float *v6;
  float v7;
  BOOL v8;
  int v9;
  char v10;
  char v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  char v16;
  char v17;

  v3 = (int)a2;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if ((int)a2 >= 0x17)
    v5 = 23;
  else
    v5 = (int)a2;
  v6 = *(float **)v4;
  if (!*(_QWORD *)v4
    || (v7 = *v6, LODWORD(v6) = *v6 == 1.0, !*(_BYTE *)(v4 + 10))
    || (v7 != 0.0 ? (v8 = v7 == 1.0) : (v8 = 1), v8))
  {
    v9 = *(unsigned __int8 *)(v4 + v6 + 11);
    v7 = 0.0;
    if (v9 != 2)
    {
      if (*(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(*(unsigned __int16 **)(*(_QWORD *)a1 + 24), 0x5Bu, v5, v9, 0))goto LABEL_15;
      return 0;
    }
  }
  v17 = 1;
  v16 = 1;
  v10 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v4, 0x5Bu, v5, 0, &v17);
  v11 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v4, 0x5Bu, v5, 1, &v16);
  if (v7 < 1.0)
    v11 = v10;
  if (!v11)
    return 0;
LABEL_15:
  v12 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v13 = *(unsigned __int8 *)(v12 + 11);
  if (v13 != 2)
  {
    if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v12, 0x5Cu, v5, *(unsigned __int8 *)(v12 + 11)) & 1) != 0
      || (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v12, 0x88u, v5, v13) & 1) != 0)
    {
      return 1;
    }
LABEL_26:
    if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v12, 0x5Du, v5, v13) & 1) != 0)
      return 1;
    LODWORD(v14) = *(unsigned __int8 *)(v12 + 12);
    if ((_DWORD)v14 == 2)
    {
      v14 = 1;
      if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v12, 0x5Cu, v5, 0) & 1) != 0
        || (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v12, 0x5Cu, v5, 1u) & 1) != 0
        || (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v12, 0x88u, v5, 0) & 1) != 0)
      {
        return v14;
      }
    }
    else if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v12, 0x5Cu, v5, *(unsigned __int8 *)(v12 + 12)) & 1) != 0)
    {
      return 1;
    }
    if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v12, 0x88u, v5, v14) & 1) == 0)
      return gss::QueryableLocker<gss::PropertyID>::hasTargetValueForKeyAtZ(v12, v3);
    return 1;
  }
  v14 = 1;
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v12, 0x5Cu, v5, 0) & 1) == 0
    && (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v12, 0x5Cu, v5, 1u) & 1) == 0
    && (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v12, 0x88u, v5, 0) & 1) == 0
    && (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v12, 0x88u, v5, 1u) & 1) == 0)
  {
    v13 = 1;
    if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v12, 0x5Du, v5, 0) & 1) == 0)
      goto LABEL_26;
  }
  return v14;
}

_QWORD *std::__function::__func<void md::_layoutPolygonTiles<md::MapTileDataRenderable<md::PolygonTileData>>(std::vector<md::MapTileDataRenderable<md::PolygonTileData> *,std::allocator<md::MapTileDataRenderable<md::PolygonTileData> *>> const&,md::LayoutContext const&,md::PolygonRenderResources &,std::array<ggl::CommandBuffer *,3ul> const&,ggl::CommandBuffer *,ggl::CommandBuffer *,geo::QuadTile const*,float,std::function<BOOL ()(md::MapTileDataRenderable<md::PolygonTileData> const*)>,md::PolygonGroupLayoutInfo<md::MapTileDataRenderable<md::PolygonTileData>::MapTileDataType> &,md::PolygonLayoutCharacteristics const&,BOOL)::{lambda(unsigned long long)#1},std::allocator<void md::_layoutPolygonTiles<md::MapTileDataRenderable<md::PolygonTileData>>(std::vector<md::MapTileDataRenderable<md::PolygonTileData> *,std::allocator<md::MapTileDataRenderable<md::PolygonTileData> *>> const&,md::LayoutContext const&,md::PolygonRenderResources &,std::array<ggl::CommandBuffer *,3ul> const&,ggl::CommandBuffer *,ggl::CommandBuffer *,geo::QuadTile const*,float,std::function<BOOL ()(md::MapTileDataRenderable<md::PolygonTileData> const*)>,md::PolygonGroupLayoutInfo<md::MapTileDataRenderable<md::PolygonTileData>::MapTileDataType> &,md::PolygonLayoutCharacteristics const&,BOOL)::{lambda(unsigned long long)#1}>,BOOL ()(unsigned long long)>::~__func(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E42D03E8;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void std::__function::__func<void md::_layoutPolygonTiles<md::MapTileDataRenderable<md::PolygonTileData>>(std::vector<md::MapTileDataRenderable<md::PolygonTileData> *,std::allocator<md::MapTileDataRenderable<md::PolygonTileData> *>> const&,md::LayoutContext const&,md::PolygonRenderResources &,std::array<ggl::CommandBuffer *,3ul> const&,ggl::CommandBuffer *,ggl::CommandBuffer *,geo::QuadTile const*,float,std::function<BOOL ()(md::MapTileDataRenderable<md::PolygonTileData> const*)>,md::PolygonGroupLayoutInfo<md::MapTileDataRenderable<md::PolygonTileData>::MapTileDataType> &,md::PolygonLayoutCharacteristics const&,BOOL)::{lambda(unsigned long long)#1},std::allocator<void md::_layoutPolygonTiles<md::MapTileDataRenderable<md::PolygonTileData>>(std::vector<md::MapTileDataRenderable<md::PolygonTileData> *,std::allocator<md::MapTileDataRenderable<md::PolygonTileData> *>> const&,md::LayoutContext const&,md::PolygonRenderResources &,std::array<ggl::CommandBuffer *,3ul> const&,ggl::CommandBuffer *,ggl::CommandBuffer *,geo::QuadTile const*,float,std::function<BOOL ()(md::MapTileDataRenderable<md::PolygonTileData> const*)>,md::PolygonGroupLayoutInfo<md::MapTileDataRenderable<md::PolygonTileData>::MapTileDataType> &,md::PolygonLayoutCharacteristics const&,BOOL)::{lambda(unsigned long long)#1}>,BOOL ()(unsigned long long)>::~__func(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E42D03E8;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<void md::_layoutPolygonTiles<md::MapTileDataRenderable<md::PolygonTileData>>(std::vector<md::MapTileDataRenderable<md::PolygonTileData> *,std::allocator<md::MapTileDataRenderable<md::PolygonTileData> *>> const&,md::LayoutContext const&,md::PolygonRenderResources &,std::array<ggl::CommandBuffer *,3ul> const&,ggl::CommandBuffer *,ggl::CommandBuffer *,geo::QuadTile const*,float,std::function<BOOL ()(md::MapTileDataRenderable<md::PolygonTileData> const*)>,md::PolygonGroupLayoutInfo<md::MapTileDataRenderable<md::PolygonTileData>::MapTileDataType> &,md::PolygonLayoutCharacteristics const&,BOOL)::{lambda(unsigned long long)#1},std::allocator<void md::_layoutPolygonTiles<md::MapTileDataRenderable<md::PolygonTileData>>(std::vector<md::MapTileDataRenderable<md::PolygonTileData> *,std::allocator<md::MapTileDataRenderable<md::PolygonTileData> *>> const&,md::LayoutContext const&,md::PolygonRenderResources &,std::array<ggl::CommandBuffer *,3ul> const&,ggl::CommandBuffer *,ggl::CommandBuffer *,geo::QuadTile const*,float,std::function<BOOL ()(md::MapTileDataRenderable<md::PolygonTileData> const*)>,md::PolygonGroupLayoutInfo<md::MapTileDataRenderable<md::PolygonTileData>::MapTileDataType> &,md::PolygonLayoutCharacteristics const&,BOOL)::{lambda(unsigned long long)#1}>,BOOL ()(unsigned long long)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;

  v2 = operator new(0x20uLL);
  *v2 = &off_1E42D03E8;
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0;
  v4 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      abort();
    v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    v7 = &v6[8 * (v5 >> 3)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    v2[2] = v7;
  }
  return v2;
}

void sub_19FE6B4B8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<void md::_layoutPolygonTiles<md::MapTileDataRenderable<md::PolygonTileData>>(std::vector<md::MapTileDataRenderable<md::PolygonTileData> *,std::allocator<md::MapTileDataRenderable<md::PolygonTileData> *>> const&,md::LayoutContext const&,md::PolygonRenderResources &,std::array<ggl::CommandBuffer *,3ul> const&,ggl::CommandBuffer *,ggl::CommandBuffer *,geo::QuadTile const*,float,std::function<BOOL ()(md::MapTileDataRenderable<md::PolygonTileData> const*)>,md::PolygonGroupLayoutInfo<md::MapTileDataRenderable<md::PolygonTileData>::MapTileDataType> &,md::PolygonLayoutCharacteristics const&,BOOL)::{lambda(unsigned long long)#1},std::allocator<void md::_layoutPolygonTiles<md::MapTileDataRenderable<md::PolygonTileData>>(std::vector<md::MapTileDataRenderable<md::PolygonTileData> *,std::allocator<md::MapTileDataRenderable<md::PolygonTileData> *>> const&,md::LayoutContext const&,md::PolygonRenderResources &,std::array<ggl::CommandBuffer *,3ul> const&,ggl::CommandBuffer *,ggl::CommandBuffer *,geo::QuadTile const*,float,std::function<BOOL ()(md::MapTileDataRenderable<md::PolygonTileData> const*)>,md::PolygonGroupLayoutInfo<md::MapTileDataRenderable<md::PolygonTileData>::MapTileDataType> &,md::PolygonLayoutCharacteristics const&,BOOL)::{lambda(unsigned long long)#1}>,BOOL ()(unsigned long long)>::__clone(_QWORD *result, _QWORD *a2)
{
  _BYTE *v2;
  _BYTE *v3;
  int64_t v4;
  char *v6;
  char *v7;

  *a2 = &off_1E42D03E8;
  a2[1] = 0;
  a2[2] = 0;
  a2[3] = 0;
  v3 = (_BYTE *)result[1];
  v2 = (_BYTE *)result[2];
  v4 = v2 - v3;
  if (v2 != v3)
  {
    if (v4 < 0)
      abort();
    v6 = (char *)operator new(v2 - v3);
    a2[1] = v6;
    a2[2] = v6;
    v7 = &v6[8 * (v4 >> 3)];
    a2[3] = v7;
    result = memcpy(v6, v3, v4);
    a2[2] = v7;
  }
  return result;
}

void std::__function::__func<void md::_layoutPolygonTiles<md::MapTileDataRenderable<md::PolygonTileData>>(std::vector<md::MapTileDataRenderable<md::PolygonTileData> *,std::allocator<md::MapTileDataRenderable<md::PolygonTileData> *>> const&,md::LayoutContext const&,md::PolygonRenderResources &,std::array<ggl::CommandBuffer *,3ul> const&,ggl::CommandBuffer *,ggl::CommandBuffer *,geo::QuadTile const*,float,std::function<BOOL ()(md::MapTileDataRenderable<md::PolygonTileData> const*)>,md::PolygonGroupLayoutInfo<md::MapTileDataRenderable<md::PolygonTileData>::MapTileDataType> &,md::PolygonLayoutCharacteristics const&,BOOL)::{lambda(unsigned long long)#1},std::allocator<void md::_layoutPolygonTiles<md::MapTileDataRenderable<md::PolygonTileData>>(std::vector<md::MapTileDataRenderable<md::PolygonTileData> *,std::allocator<md::MapTileDataRenderable<md::PolygonTileData> *>> const&,md::LayoutContext const&,md::PolygonRenderResources &,std::array<ggl::CommandBuffer *,3ul> const&,ggl::CommandBuffer *,ggl::CommandBuffer *,geo::QuadTile const*,float,std::function<BOOL ()(md::MapTileDataRenderable<md::PolygonTileData> const*)>,md::PolygonGroupLayoutInfo<md::MapTileDataRenderable<md::PolygonTileData>::MapTileDataType> &,md::PolygonLayoutCharacteristics const&,BOOL)::{lambda(unsigned long long)#1}>,BOOL ()(unsigned long long)>::destroy(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void std::__function::__func<void md::_layoutPolygonTiles<md::MapTileDataRenderable<md::PolygonTileData>>(std::vector<md::MapTileDataRenderable<md::PolygonTileData> *,std::allocator<md::MapTileDataRenderable<md::PolygonTileData> *>> const&,md::LayoutContext const&,md::PolygonRenderResources &,std::array<ggl::CommandBuffer *,3ul> const&,ggl::CommandBuffer *,ggl::CommandBuffer *,geo::QuadTile const*,float,std::function<BOOL ()(md::MapTileDataRenderable<md::PolygonTileData> const*)>,md::PolygonGroupLayoutInfo<md::MapTileDataRenderable<md::PolygonTileData>::MapTileDataType> &,md::PolygonLayoutCharacteristics const&,BOOL)::{lambda(unsigned long long)#1},std::allocator<void md::_layoutPolygonTiles<md::MapTileDataRenderable<md::PolygonTileData>>(std::vector<md::MapTileDataRenderable<md::PolygonTileData> *,std::allocator<md::MapTileDataRenderable<md::PolygonTileData> *>> const&,md::LayoutContext const&,md::PolygonRenderResources &,std::array<ggl::CommandBuffer *,3ul> const&,ggl::CommandBuffer *,ggl::CommandBuffer *,geo::QuadTile const*,float,std::function<BOOL ()(md::MapTileDataRenderable<md::PolygonTileData> const*)>,md::PolygonGroupLayoutInfo<md::MapTileDataRenderable<md::PolygonTileData>::MapTileDataType> &,md::PolygonLayoutCharacteristics const&,BOOL)::{lambda(unsigned long long)#1}>,BOOL ()(unsigned long long)>::destroy_deallocate(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

BOOL std::__function::__func<void md::_layoutPolygonTiles<md::MapTileDataRenderable<md::PolygonTileData>>(std::vector<md::MapTileDataRenderable<md::PolygonTileData> *,std::allocator<md::MapTileDataRenderable<md::PolygonTileData> *>> const&,md::LayoutContext const&,md::PolygonRenderResources &,std::array<ggl::CommandBuffer *,3ul> const&,ggl::CommandBuffer *,ggl::CommandBuffer *,geo::QuadTile const*,float,std::function<BOOL ()(md::MapTileDataRenderable<md::PolygonTileData> const*)>,md::PolygonGroupLayoutInfo<md::MapTileDataRenderable<md::PolygonTileData>::MapTileDataType> &,md::PolygonLayoutCharacteristics const&,BOOL)::{lambda(unsigned long long)#1},std::allocator<void md::_layoutPolygonTiles<md::MapTileDataRenderable<md::PolygonTileData>>(std::vector<md::MapTileDataRenderable<md::PolygonTileData> *,std::allocator<md::MapTileDataRenderable<md::PolygonTileData> *>> const&,md::LayoutContext const&,md::PolygonRenderResources &,std::array<ggl::CommandBuffer *,3ul> const&,ggl::CommandBuffer *,ggl::CommandBuffer *,geo::QuadTile const*,float,std::function<BOOL ()(md::MapTileDataRenderable<md::PolygonTileData> const*)>,md::PolygonGroupLayoutInfo<md::MapTileDataRenderable<md::PolygonTileData>::MapTileDataType> &,md::PolygonLayoutCharacteristics const&,BOOL)::{lambda(unsigned long long)#1}>,BOOL ()(unsigned long long)>::operator()(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = *(_QWORD **)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 16);
  if (v2 != v3)
  {
    while (*v2 != *a2)
    {
      if (++v2 == v3)
      {
        v2 = *(_QWORD **)(a1 + 16);
        return v2 != v3;
      }
    }
  }
  return v2 != v3;
}

void std::__function::__func<void md::layoutPolygonTiles<md::MapTileDataRenderable<md::PolygonTileData>>(std::vector<md::MapTileDataRenderable<md::PolygonTileData> *,std::allocator<md::MapTileDataRenderable<md::PolygonTileData> *>> const&,md::LayoutContext const&,md::CartographicRenderer &,md::PolygonRenderResources &,md::PolygonLayoutCharacteristics const&,BOOL)::{lambda(md::MapTileDataRenderable<md::PolygonTileData> const*)#1},std::allocator<void md::layoutPolygonTiles<md::MapTileDataRenderable<md::PolygonTileData>>(std::vector<md::MapTileDataRenderable<md::PolygonTileData> *,std::allocator<md::MapTileDataRenderable<md::PolygonTileData> *>> const&,md::LayoutContext const&,md::CartographicRenderer &,md::PolygonRenderResources &,md::PolygonLayoutCharacteristics const&,BOOL)::{lambda(md::MapTileDataRenderable<md::PolygonTileData> const*)#1}>,BOOL ()(md::MapTileDataRenderable<md::PolygonTileData> const*)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<void md::layoutPolygonTiles<md::MapTileDataRenderable<md::PolygonTileData>>(std::vector<md::MapTileDataRenderable<md::PolygonTileData> *,std::allocator<md::MapTileDataRenderable<md::PolygonTileData> *>> const&,md::LayoutContext const&,md::CartographicRenderer &,md::PolygonRenderResources &,md::PolygonLayoutCharacteristics const&,BOOL)::{lambda(md::MapTileDataRenderable<md::PolygonTileData> const*)#1},std::allocator<void md::layoutPolygonTiles<md::MapTileDataRenderable<md::PolygonTileData>>(std::vector<md::MapTileDataRenderable<md::PolygonTileData> *,std::allocator<md::MapTileDataRenderable<md::PolygonTileData> *>> const&,md::LayoutContext const&,md::CartographicRenderer &,md::PolygonRenderResources &,md::PolygonLayoutCharacteristics const&,BOOL)::{lambda(md::MapTileDataRenderable<md::PolygonTileData> const*)#1}>,BOOL ()(md::MapTileDataRenderable<md::PolygonTileData> const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42CF938;
  return result;
}

void std::__function::__func<void md::layoutPolygonTiles<md::MapTileDataRenderable<md::PolygonTileData>>(std::vector<md::MapTileDataRenderable<md::PolygonTileData> *,std::allocator<md::MapTileDataRenderable<md::PolygonTileData> *>> const&,md::LayoutContext const&,md::CartographicRenderer &,md::PolygonRenderResources &,md::PolygonLayoutCharacteristics const&,BOOL)::{lambda(md::MapTileDataRenderable<md::PolygonTileData> const*)#1},std::allocator<void md::layoutPolygonTiles<md::MapTileDataRenderable<md::PolygonTileData>>(std::vector<md::MapTileDataRenderable<md::PolygonTileData> *,std::allocator<md::MapTileDataRenderable<md::PolygonTileData> *>> const&,md::LayoutContext const&,md::CartographicRenderer &,md::PolygonRenderResources &,md::PolygonLayoutCharacteristics const&,BOOL)::{lambda(md::MapTileDataRenderable<md::PolygonTileData> const*)#1}>,BOOL ()(md::MapTileDataRenderable<md::PolygonTileData> const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42CF938;
}

uint64_t std::__function::__func<void md::layoutPolygonTiles<md::MapTileDataRenderable<md::PolygonTileData>>(std::vector<md::MapTileDataRenderable<md::PolygonTileData> *,std::allocator<md::MapTileDataRenderable<md::PolygonTileData> *>> const&,md::LayoutContext const&,md::CartographicRenderer &,md::PolygonRenderResources &,md::PolygonLayoutCharacteristics const&,BOOL)::{lambda(md::MapTileDataRenderable<md::PolygonTileData> const*)#1},std::allocator<void md::layoutPolygonTiles<md::MapTileDataRenderable<md::PolygonTileData>>(std::vector<md::MapTileDataRenderable<md::PolygonTileData> *,std::allocator<md::MapTileDataRenderable<md::PolygonTileData> *>> const&,md::LayoutContext const&,md::CartographicRenderer &,md::PolygonRenderResources &,md::PolygonLayoutCharacteristics const&,BOOL)::{lambda(md::MapTileDataRenderable<md::PolygonTileData> const*)#1}>,BOOL ()(md::MapTileDataRenderable<md::PolygonTileData> const*)>::operator()()
{
  return 1;
}

void md::preparePolygonTiles<md::MapTileDataRenderable<md::VenueTileData>>(uint64_t **a1, uint64_t *a2, uint64_t a3)
{
  int8x8_t v5;
  uint8x8_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  void *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  uint64_t *v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _OWORD *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  id v44;
  int v45;
  double v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  _OWORD v60[4];
  char v61;
  char **v62;
  char *v63;
  _QWORD v64[3];
  _QWORD *v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v5 = (int8x8_t)a2[1];
  v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = 0x1DCE255EA309B4ADLL;
    if (*(_QWORD *)&v5 <= 0x1DCE255EA309B4ADuLL)
      v7 = 0x1DCE255EA309B4ADuLL % *(_QWORD *)&v5;
  }
  else
  {
    v7 = (*(_QWORD *)&v5 - 1) & 0x1DCE255EA309B4ADLL;
  }
  v8 = *a2;
  v9 = *(_QWORD **)(*a2 + 8 * v7);
  if (v9)
  {
    v10 = (_QWORD *)*v9;
    if (v10)
    {
      if (v6.u32[0] < 2uLL)
      {
        while (1)
        {
          v12 = v10[1];
          if (v12 == 0x1DCE255EA309B4ADLL)
          {
            if (v10[2] == 0x1DCE255EA309B4ADLL)
              goto LABEL_20;
          }
          else if ((v12 & (*(_QWORD *)&v5 - 1)) != v7)
          {
            goto LABEL_20;
          }
          v10 = (_QWORD *)*v10;
          if (!v10)
            goto LABEL_20;
        }
      }
      do
      {
        v11 = v10[1];
        if (v11 == 0x1DCE255EA309B4ADLL)
        {
          if (v10[2] == 0x1DCE255EA309B4ADLL)
            break;
        }
        else
        {
          if (v11 >= *(_QWORD *)&v5)
            v11 %= *(_QWORD *)&v5;
          if (v11 != v7)
            break;
        }
        v10 = (_QWORD *)*v10;
      }
      while (v10);
    }
  }
LABEL_20:
  if (v6.u32[0] > 1uLL)
  {
    v13 = 0xA60DDA5A69582425;
    if (*(_QWORD *)&v5 <= 0xA60DDA5A69582425)
      v13 = 0xA60DDA5A69582425 % *(_QWORD *)&v5;
  }
  else
  {
    v13 = (*(_QWORD *)&v5 - 1) & 0xA60DDA5A69582425;
  }
  v14 = *(_QWORD **)(v8 + 8 * v13);
  if (!v14)
    goto LABEL_42;
  v15 = (_QWORD *)*v14;
  if (!v15)
    goto LABEL_42;
  if (v6.u32[0] < 2uLL)
  {
    while (1)
    {
      v17 = v15[1];
      if (v17 == 0xA60DDA5A69582425)
      {
        if (v15[2] == 0xA60DDA5A69582425)
          goto LABEL_40;
      }
      else if ((v17 & (*(_QWORD *)&v5 - 1)) != v13)
      {
        goto LABEL_42;
      }
      v15 = (_QWORD *)*v15;
      if (!v15)
        goto LABEL_42;
    }
  }
  while (1)
  {
    v16 = v15[1];
    if (v16 == 0xA60DDA5A69582425)
      break;
    if (v16 >= *(_QWORD *)&v5)
      v16 %= *(_QWORD *)&v5;
    if (v16 != v13)
      goto LABEL_42;
LABEL_29:
    v15 = (_QWORD *)*v15;
    if (!v15)
      goto LABEL_42;
  }
  if (v15[2] != 0xA60DDA5A69582425)
    goto LABEL_29;
LABEL_40:
  v18 = v15[5];
  if (*(_QWORD *)(v18 + 8) == 0xA60DDA5A69582425)
  {
    v19 = *(id **)(v18 + 32);
    goto LABEL_43;
  }
LABEL_42:
  v19 = 0;
LABEL_43:
  if (v6.u32[0] > 1uLL)
  {
    v20 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v5 <= 0x1AF456233693CD46uLL)
      v20 = 0x1AF456233693CD46uLL % *(_QWORD *)&v5;
  }
  else
  {
    v20 = (*(_QWORD *)&v5 - 1) & 0x1AF456233693CD46;
  }
  v21 = *(_QWORD **)(v8 + 8 * v20);
  if (!v21)
    goto LABEL_65;
  v22 = (_QWORD *)*v21;
  if (!v22)
    goto LABEL_65;
  if (v6.u32[0] < 2uLL)
  {
    v23 = *(_QWORD *)&v5 - 1;
    while (1)
    {
      v25 = v22[1];
      if (v25 == 0x1AF456233693CD46)
      {
        if (v22[2] == 0x1AF456233693CD46)
          goto LABEL_63;
      }
      else if ((v25 & v23) != v20)
      {
        goto LABEL_65;
      }
      v22 = (_QWORD *)*v22;
      if (!v22)
        goto LABEL_65;
    }
  }
  while (2)
  {
    v24 = v22[1];
    if (v24 != 0x1AF456233693CD46)
    {
      if (v24 >= *(_QWORD *)&v5)
        v24 %= *(_QWORD *)&v5;
      if (v24 != v20)
        goto LABEL_65;
      goto LABEL_52;
    }
    if (v22[2] != 0x1AF456233693CD46)
    {
LABEL_52:
      v22 = (_QWORD *)*v22;
      if (!v22)
        goto LABEL_65;
      continue;
    }
    break;
  }
LABEL_63:
  v26 = v22[5];
  if (*(_QWORD *)(v26 + 8) == 0x1AF456233693CD46)
  {
    v27 = *(_QWORD *)(v26 + 32);
    goto LABEL_66;
  }
LABEL_65:
  v27 = 0;
LABEL_66:
  v28 = *v19;
  v29 = v28;
  if (v28)
  {
    objc_msgSend(v28, "textureManager");
  }
  else
  {
    v58 = 0;
    v59 = 0;
  }

  v64[0] = &off_1E42D0430;
  v65 = v64;
  v56 = v58;
  v57 = v59;
  if (v59)
  {
    p_shared_owners = (unint64_t *)&v59->__shared_owners_;
    do
      v31 = __ldxr(p_shared_owners);
    while (__stxr(v31 + 1, p_shared_owners));
  }
  v32 = *a1;
  v55 = a1[1];
  if (*a1 != v55)
  {
    v33 = fmaxf(*(float *)(v27 + 3080) + *(float *)(v27 + 3076), 1.0);
    while (1)
    {
      v34 = *v32;
      if (!v65)
        break;
      *(_QWORD *)&v60[0] = *v32;
      if ((*(unsigned int (**)(_QWORD *, _OWORD *))(*v65 + 48))(v65, v60))
        break;
LABEL_74:
      if (++v32 == v55)
        goto LABEL_87;
    }
    v35 = *(_QWORD *)(v34 + 384);
    v36 = *(_QWORD *)(v34 + 216);
    if ((*(_BYTE *)(v36 + 16) & 2) == 0)
    {
      v37 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
      if (v37 != -1)
      {
        v63 = &v61;
        v62 = &v63;
        std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v62, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
      }
    }
    v38 = *(_OWORD **)(v36 + 72);
    v60[0] = *v38;
    v60[1] = v38[1];
    v60[2] = v38[2];
    v60[3] = v38[3];
    v39 = ggl::CullingGrid::intersectedCellsForView((float *)v60, 0.0);
    v40 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 48))(v35);
    v42 = *v40;
    v41 = v40[1];
    while (2)
    {
      if (v42 == v41)
        goto LABEL_74;
      v43 = *(id *)(v42 + 8);
      if (((*(uint64_t (**)(uint64_t, uint64_t, id, uint64_t))(*(_QWORD *)a3 + 56))(a3, v34, v43, v39) & 1) != 0)
      {
LABEL_81:

      }
      else
      {
        v44 = *(id *)(v42 + 8);
        v45 = (*(uint64_t (**)(uint64_t, id, uint64_t))(*(_QWORD *)a3 + 64))(a3, v44, 1);

        if (v45)
        {
          v43 = *(id *)(v42 + 8);
          *(float *)&v46 = v33;
          objc_msgSend(v43, "updateTexturesIfNecessary:textureManager:", &v56, v46);
          goto LABEL_81;
        }
      }
      v42 += 24;
      continue;
    }
  }
LABEL_87:
  v47 = v57;
  if (v57)
  {
    v48 = (unint64_t *)&v57->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v50 = v65;
  if (v65 == v64)
  {
    v51 = 4;
    v50 = v64;
LABEL_96:
    (*(void (**)(void))(*v50 + 8 * v51))();
  }
  else if (v65)
  {
    v51 = 5;
    goto LABEL_96;
  }
  v52 = v59;
  if (v59)
  {
    v53 = (unint64_t *)&v59->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
}

void sub_19FE6BBC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::__function::__func<void md::preparePolygonTiles<md::MapTileDataRenderable<md::VenueTileData>>(std::vector<md::MapTileDataRenderable<md::VenueTileData> *,std::allocator<md::MapTileDataRenderable<md::VenueTileData> *>> const&,md::LayoutContext const&,md::PolygonLayoutCharacteristics const&)::{lambda(md::MapTileDataRenderable<md::VenueTileData> const*)#1},std::allocator<void md::preparePolygonTiles<md::MapTileDataRenderable<md::VenueTileData>>(std::vector<md::MapTileDataRenderable<md::VenueTileData> *,std::allocator<md::MapTileDataRenderable<md::VenueTileData> *>> const&,md::LayoutContext const&,md::PolygonLayoutCharacteristics const&)::{lambda(md::MapTileDataRenderable<md::VenueTileData> const*)#1}>,BOOL ()(md::MapTileDataRenderable<md::VenueTileData> const*)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<void md::preparePolygonTiles<md::MapTileDataRenderable<md::VenueTileData>>(std::vector<md::MapTileDataRenderable<md::VenueTileData> *,std::allocator<md::MapTileDataRenderable<md::VenueTileData> *>> const&,md::LayoutContext const&,md::PolygonLayoutCharacteristics const&)::{lambda(md::MapTileDataRenderable<md::VenueTileData> const*)#1},std::allocator<void md::preparePolygonTiles<md::MapTileDataRenderable<md::VenueTileData>>(std::vector<md::MapTileDataRenderable<md::VenueTileData> *,std::allocator<md::MapTileDataRenderable<md::VenueTileData> *>> const&,md::LayoutContext const&,md::PolygonLayoutCharacteristics const&)::{lambda(md::MapTileDataRenderable<md::VenueTileData> const*)#1}>,BOOL ()(md::MapTileDataRenderable<md::VenueTileData> const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D0430;
  return result;
}

void std::__function::__func<void md::preparePolygonTiles<md::MapTileDataRenderable<md::VenueTileData>>(std::vector<md::MapTileDataRenderable<md::VenueTileData> *,std::allocator<md::MapTileDataRenderable<md::VenueTileData> *>> const&,md::LayoutContext const&,md::PolygonLayoutCharacteristics const&)::{lambda(md::MapTileDataRenderable<md::VenueTileData> const*)#1},std::allocator<void md::preparePolygonTiles<md::MapTileDataRenderable<md::VenueTileData>>(std::vector<md::MapTileDataRenderable<md::VenueTileData> *,std::allocator<md::MapTileDataRenderable<md::VenueTileData> *>> const&,md::LayoutContext const&,md::PolygonLayoutCharacteristics const&)::{lambda(md::MapTileDataRenderable<md::VenueTileData> const*)#1}>,BOOL ()(md::MapTileDataRenderable<md::VenueTileData> const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D0430;
}

uint64_t std::__function::__func<void md::preparePolygonTiles<md::MapTileDataRenderable<md::VenueTileData>>(std::vector<md::MapTileDataRenderable<md::VenueTileData> *,std::allocator<md::MapTileDataRenderable<md::VenueTileData> *>> const&,md::LayoutContext const&,md::PolygonLayoutCharacteristics const&)::{lambda(md::MapTileDataRenderable<md::VenueTileData> const*)#1},std::allocator<void md::preparePolygonTiles<md::MapTileDataRenderable<md::VenueTileData>>(std::vector<md::MapTileDataRenderable<md::VenueTileData> *,std::allocator<md::MapTileDataRenderable<md::VenueTileData> *>> const&,md::LayoutContext const&,md::PolygonLayoutCharacteristics const&)::{lambda(md::MapTileDataRenderable<md::VenueTileData> const*)#1}>,BOOL ()(md::MapTileDataRenderable<md::VenueTileData> const*)>::operator()()
{
  return 1;
}

void md::layoutPolygonTiles<md::MapTileDataRenderable<md::VenueTileData>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  id v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unsigned __int8 *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unsigned __int8 *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unsigned __int8 *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unsigned __int8 *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  void *v62;
  int64_t v63;
  void *v64;
  void *v65;
  _QWORD *v66;
  char *v67;
  char *v68;
  __int128 *v69;
  uint64_t v70;
  uint64_t *v71;
  int8x8_t v72;
  uint8x8_t v73;
  unsigned __int8 *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  uint64_t v92;
  unint64_t v93;
  int8x8_t *v94;
  uint64_t v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *p_shared_owners;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  int v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t i;
  uint64_t v115;
  int v116;
  float v117;
  float v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  uint64_t v133;
  unint64_t v134;
  __int128 *v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  id v141;
  int v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  _QWORD *v150;
  int v151;
  int v152;
  unint64_t v153;
  unint64_t v154;
  __n128 v155;
  uint64_t v156;
  id v157;
  id v158;
  id v159;
  char v160;
  id v161;
  char v162;
  id v163;
  id v164;
  id v165;
  uint64_t v166;
  _QWORD *v167;
  uint64_t v168;
  uint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  _QWORD *v172;
  uint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  __int16 v182;
  __int16 v183;
  uint64_t v184;
  _QWORD *v185;
  _QWORD *v186;
  void *v187;
  void *__src;
  uint64_t v189;
  uint64_t v190;
  id *v191;
  uint64_t v192;
  id v194;
  unsigned __int8 *v195;
  uint64_t v196;
  __n128 v197;
  _QWORD v198[3];
  uint64_t v199;
  __int128 v200;
  __int128 v201;
  char v202;
  float v203;
  float v204;
  char v205;
  float v206;
  double v207;
  uint64_t (**v208)();
  id v209;
  char v210;
  unsigned int v211;
  _QWORD v212[2];
  char v213;
  __n128 v214;
  unint64_t v215;
  unint64_t v216;
  __int16 v217;
  uint64_t v218;
  float v219[17];
  char v220;
  char **v221;
  char *v222;
  _QWORD v223[3];
  _QWORD *v224;
  _QWORD v225[3];
  _QWORD *v226;
  _QWORD v227[3];
  _QWORD *v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  _QWORD v233[3];
  _QWORD *v234;
  _QWORD v235[3];
  _QWORD *v236;
  uint64_t v237;

  v237 = *MEMORY[0x1E0C80C00];
  v11 = *(id *)(a3 + 104);
  v202 = 0;
  v201 = 0u;
  v200 = 0u;
  v208 = &off_1E42B4B50;
  v209 = 0;
  v210 = a6;
  objc_msgSend(v11, "size");
  v212[0] = v12;
  v212[1] = v13;
  md::LayoutContext::zoomAtCentrePoint(*(int8x8_t **)(a2 + 8));
  v203 = v14;
  v213 = objc_msgSend(v11, "multiSample");
  v15 = *(_QWORD *)(a3 + 24);
  v16 = *(_QWORD **)(v15 + 8);
  v17 = v16[3];
  v18 = v16[4];
  if (v18 == v17)
  {
    v30 = 0;
    v198[0] = 0;
  }
  else
  {
    v19 = 0;
    while (1)
    {
      v20 = *(unsigned __int8 **)(v17 + 8 * v19);
      if (*v20 == *(unsigned __int8 *)(a5 + 40))
      {
        v21 = *((_QWORD *)v20 + 1);
        v22 = v16[15];
        if (v21 < (v16[16] - v22) >> 3)
          break;
      }
      if (++v19 >= (unint64_t)((v18 - v17) >> 3))
      {
        v23 = 0;
        goto LABEL_9;
      }
    }
    v23 = *(_QWORD *)(v22 + 8 * v21);
    if (v23)
      v23 = *(_QWORD *)(*(_QWORD *)(v23 + 24) + 8 * *(unsigned __int8 *)(a5 + 41));
LABEL_9:
    v198[0] = v23;
    v24 = v18 - v17;
    if (v18 == v17)
    {
LABEL_16:
      v30 = 0;
    }
    else
    {
      v25 = 0;
      v26 = v24 >> 3;
      while (1)
      {
        v27 = *(unsigned __int8 **)(v17 + 8 * v25);
        if (*v27 == *(unsigned __int8 *)(a5 + 42))
        {
          v28 = *((_QWORD *)v27 + 1);
          v29 = v16[15];
          if (v28 < (v16[16] - v29) >> 3)
            break;
        }
        if (++v25 >= v26)
          goto LABEL_16;
      }
      v30 = *(_QWORD *)(v29 + 8 * v28);
      if (v30)
        v30 = *(_QWORD *)(*(_QWORD *)(v30 + 24) + 8 * *(unsigned __int8 *)(a5 + 43));
    }
  }
  v198[1] = v30;
  v31 = *(_QWORD **)(v15 + 8);
  v32 = v31[3];
  v33 = v31[4];
  v34 = v33 - v32;
  if (v33 == v32)
  {
LABEL_25:
    v40 = 0;
  }
  else
  {
    v35 = 0;
    v36 = v34 >> 3;
    while (1)
    {
      v37 = *(unsigned __int8 **)(v32 + 8 * v35);
      if (*v37 == *(unsigned __int8 *)(a5 + 44))
      {
        v38 = *((_QWORD *)v37 + 1);
        v39 = v31[15];
        if (v38 < (v31[16] - v39) >> 3)
          break;
      }
      if (++v35 >= v36)
        goto LABEL_25;
    }
    v40 = *(_QWORD *)(v39 + 8 * v38);
    if (v40)
      v40 = *(_QWORD *)(*(_QWORD *)(v40 + 24) + 8 * *(unsigned __int8 *)(a5 + 45));
  }
  v198[2] = v40;
  if (!*(_BYTE *)(a5 + 48))
    goto LABEL_35;
  v41 = *(_QWORD **)(v15 + 8);
  v42 = v41[3];
  v43 = v41[4];
  v44 = v43 - v42;
  if (v43 == v42)
    goto LABEL_35;
  v45 = 0;
  v46 = v44 >> 3;
  while (1)
  {
    v47 = *(unsigned __int8 **)(v42 + 8 * v45);
    if (*v47 == *(unsigned __int8 *)(a5 + 46))
    {
      v48 = *((_QWORD *)v47 + 1);
      v49 = v41[15];
      if (v48 < (v41[16] - v49) >> 3)
        break;
    }
    if (++v45 >= v46)
      goto LABEL_35;
  }
  v50 = *(_QWORD *)(v49 + 8 * v48);
  if (v50)
  {
    v190 = *(_QWORD *)(*(_QWORD *)(v50 + 24) + 8 * *(unsigned __int8 *)(a5 + 47));
    if (!*(_BYTE *)(a5 + 51))
      goto LABEL_43;
  }
  else
  {
LABEL_35:
    v190 = 0;
    if (!*(_BYTE *)(a5 + 51))
      goto LABEL_43;
  }
  v51 = *(_QWORD **)(v15 + 8);
  v52 = v51[3];
  v53 = v51[4];
  v54 = v53 - v52;
  if (v53 != v52)
  {
    v55 = 0;
    v56 = v54 >> 3;
    while (1)
    {
      v57 = *(unsigned __int8 **)(v52 + 8 * v55);
      if (*v57 == *(unsigned __int8 *)(a5 + 49))
      {
        v58 = *((_QWORD *)v57 + 1);
        v59 = v51[15];
        if (v58 < (v51[16] - v59) >> 3)
          break;
      }
      if (++v55 >= v56)
        goto LABEL_43;
    }
    v60 = *(_QWORD *)(v59 + 8 * v58);
    if (v60)
    {
      v189 = *(_QWORD *)(*(_QWORD *)(v60 + 24) + 8 * *(unsigned __int8 *)(a5 + 50));
      goto LABEL_44;
    }
  }
LABEL_43:
  v189 = 0;
LABEL_44:
  v223[0] = &off_1E42CF8F0;
  v224 = v223;
  v236 = v235;
  v233[0] = &off_1E42D2830;
  v234 = v233;
  v235[0] = &off_1E42D2830;
  v62 = *(void **)(a5 + 16);
  v61 = *(void **)(a5 + 24);
  v194 = v11;
  v195 = (unsigned __int8 *)a5;
  v187 = v61;
  __src = v62;
  v63 = (_BYTE *)v61 - (_BYTE *)v62;
  if (v61 == v62)
    goto LABEL_52;
  if ((_BYTE *)v61 - (_BYTE *)v62 < 0)
    abort();
  v64 = operator new((_BYTE *)v61 - (_BYTE *)v62);
  memcpy(v64, __src, v63);
  v65 = operator new(v63);
  memcpy(v65, v64, v63);
  v66 = operator new(0x20uLL);
  *v66 = &off_1E42D03A0;
  v66[1] = 0;
  v66[2] = 0;
  v66[3] = 0;
  v67 = (char *)operator new(v63);
  v66[1] = v67;
  v68 = &v67[8 * (v63 >> 3)];
  v66[3] = v68;
  memcpy(v67, v65, v63);
  v66[2] = v68;
  *((_QWORD *)&v230 + 1) = v66;
  std::__function::__value_func<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::swap[abi:nn180100](&v229, v233);
  v69 = (__int128 *)*((_QWORD *)&v230 + 1);
  if (*((__int128 **)&v230 + 1) == &v229)
  {
    v70 = 4;
    v69 = &v229;
    goto LABEL_50;
  }
  if (*((_QWORD *)&v230 + 1))
  {
    v70 = 5;
LABEL_50:
    (*(void (**)(void))(*(_QWORD *)v69 + 8 * v70))();
  }
  operator delete(v65);
  operator delete(v64);
LABEL_52:
  v71 = *(uint64_t **)(a2 + 8);
  v72 = (int8x8_t)v71[1];
  if (v72)
  {
    v73 = (uint8x8_t)vcnt_s8(v72);
    v73.i16[0] = vaddlv_u8(v73);
    v74 = (unsigned __int8 *)a5;
    if (v73.u32[0] > 1uLL)
    {
      v75 = 0x1AF456233693CD46;
      if (*(_QWORD *)&v72 <= 0x1AF456233693CD46uLL)
        v75 = 0x1AF456233693CD46uLL % *(_QWORD *)&v72;
    }
    else
    {
      v75 = (*(_QWORD *)&v72 - 1) & 0x1AF456233693CD46;
    }
    v76 = *v71;
    v77 = *(_QWORD **)(v76 + 8 * v75);
    if (!v77)
      goto LABEL_76;
    v78 = (_QWORD *)*v77;
    if (!v78)
      goto LABEL_76;
    if (v73.u32[0] < 2uLL)
    {
      while (1)
      {
        v80 = v78[1];
        if (v80 == 0x1AF456233693CD46)
        {
          if (v78[2] == 0x1AF456233693CD46)
            goto LABEL_74;
        }
        else if ((v80 & (*(_QWORD *)&v72 - 1)) != v75)
        {
          goto LABEL_76;
        }
        v78 = (_QWORD *)*v78;
        if (!v78)
          goto LABEL_76;
      }
    }
    while (1)
    {
      v79 = v78[1];
      if (v79 == 0x1AF456233693CD46)
      {
        if (v78[2] == 0x1AF456233693CD46)
        {
LABEL_74:
          v81 = v78[5];
          if (*(_QWORD *)(v81 + 8) == 0x1AF456233693CD46)
          {
            v184 = *(_QWORD *)(v81 + 32);
LABEL_77:
            if (v73.u32[0] > 1uLL)
            {
              v82 = 0xA60DDA5A69582425;
              if (*(_QWORD *)&v72 <= 0xA60DDA5A69582425)
                v82 = 0xA60DDA5A69582425 % *(_QWORD *)&v72;
            }
            else
            {
              v82 = (*(_QWORD *)&v72 - 1) & 0xA60DDA5A69582425;
            }
            v83 = *(_QWORD **)(v76 + 8 * v82);
            if (!v83)
              goto LABEL_99;
            v84 = (_QWORD *)*v83;
            if (!v84)
              goto LABEL_99;
            if (v73.u32[0] < 2uLL)
            {
              while (1)
              {
                v86 = v84[1];
                if (v86 == 0xA60DDA5A69582425)
                {
                  if (v84[2] == 0xA60DDA5A69582425)
                    goto LABEL_97;
                }
                else if ((v86 & (*(_QWORD *)&v72 - 1)) != v82)
                {
                  goto LABEL_99;
                }
                v84 = (_QWORD *)*v84;
                if (!v84)
                  goto LABEL_99;
              }
            }
            while (1)
            {
              v85 = v84[1];
              if (v85 == 0xA60DDA5A69582425)
              {
                if (v84[2] == 0xA60DDA5A69582425)
                {
LABEL_97:
                  v87 = v84[5];
                  if (*(_QWORD *)(v87 + 8) == 0xA60DDA5A69582425)
                  {
                    v191 = *(id **)(v87 + 32);
LABEL_100:
                    v88 = 0xE42D19AFCA302E68 % *(_QWORD *)&v72;
                    if (*(_QWORD *)&v72 > 0xE42D19AFCA302E68)
                      v88 = 0xE42D19AFCA302E68;
                    v89 = *(_QWORD *)&v72 - 1;
                    if (v73.u32[0] <= 1uLL)
                      v88 = (*(_QWORD *)&v72 - 1) & 0xE42D19AFCA302E68;
                    v90 = *(_QWORD **)(v76 + 8 * v88);
                    if (!v90)
                      goto LABEL_122;
                    v91 = (_QWORD *)*v90;
                    if (!v91)
                      goto LABEL_122;
                    if (v73.u32[0] < 2uLL)
                    {
                      while (1)
                      {
                        v92 = v91[1];
                        if (v92 == 0xE42D19AFCA302E68)
                        {
                          if (v91[2] == 0xE42D19AFCA302E68)
                            goto LABEL_120;
                        }
                        else if ((v92 & v89) != v88)
                        {
                          goto LABEL_122;
                        }
                        v91 = (_QWORD *)*v91;
                        if (!v91)
                          goto LABEL_122;
                      }
                    }
                    while (1)
                    {
                      v93 = v91[1];
                      if (v93 == 0xE42D19AFCA302E68)
                      {
                        if (v91[2] == 0xE42D19AFCA302E68)
                        {
LABEL_120:
                          v94 = (int8x8_t *)v91[5];
                          if (*(_QWORD *)&v94[1] == 0xE42D19AFCA302E68)
                          {
                            v72 = v94[4];
                            goto LABEL_123;
                          }
LABEL_122:
                          v72 = 0;
                          goto LABEL_123;
                        }
                      }
                      else
                      {
                        if (v93 >= *(_QWORD *)&v72)
                          v93 %= *(_QWORD *)&v72;
                        if (v93 != v88)
                          goto LABEL_122;
                      }
                      v91 = (_QWORD *)*v91;
                      if (!v91)
                        goto LABEL_122;
                    }
                  }
LABEL_99:
                  v191 = 0;
                  goto LABEL_100;
                }
              }
              else
              {
                if (v85 >= *(_QWORD *)&v72)
                  v85 %= *(_QWORD *)&v72;
                if (v85 != v82)
                  goto LABEL_99;
              }
              v84 = (_QWORD *)*v84;
              if (!v84)
                goto LABEL_99;
            }
          }
LABEL_76:
          v184 = 0;
          goto LABEL_77;
        }
      }
      else
      {
        if (v79 >= *(_QWORD *)&v72)
          v79 %= *(_QWORD *)&v72;
        if (v79 != v75)
          goto LABEL_76;
      }
      v78 = (_QWORD *)*v78;
      if (!v78)
        goto LABEL_76;
    }
  }
  v191 = 0;
  v184 = 0;
  v74 = (unsigned __int8 *)a5;
LABEL_123:
  v192 = (uint64_t)v72;
  v95 = **(_QWORD **)&v72;
  v96 = *(_QWORD *)(v95 + 520);
  v97 = *(std::__shared_weak_count **)(v95 + 528);
  if (!v97)
    goto LABEL_128;
  p_shared_owners = (unint64_t *)&v97->__shared_owners_;
  do
    v99 = __ldxr(p_shared_owners);
  while (__stxr(v99 + 1, p_shared_owners));
  do
    v100 = __ldaxr(p_shared_owners);
  while (__stlxr(v100 - 1, p_shared_owners));
  if (!v100)
  {
    ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
    std::__shared_weak_count::__release_weak(v97);
    if (!v96)
      goto LABEL_232;
  }
  else
  {
LABEL_128:
    if (!v96)
      goto LABEL_232;
  }
  v101 = *(_QWORD *)(*(_QWORD *)v192 + 520);
  v102 = *(std::__shared_weak_count **)(*(_QWORD *)v192 + 528);
  if (v102)
  {
    v103 = (unint64_t *)&v102->__shared_owners_;
    do
      v104 = __ldxr(v103);
    while (__stxr(v104 + 1, v103));
    v105 = *(_DWORD *)(v101 + 256);
    do
      v106 = __ldaxr(v103);
    while (__stlxr(v106 - 1, v103));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  else
  {
    v105 = *(_DWORD *)(v101 + 256);
  }
  v107 = *(_QWORD *)(a4 + 952);
  v108 = *(_QWORD *)(v107 + 8);
  **(_DWORD **)(v107 + 72) = v105;
  if (*(_QWORD *)(v107 + 64) > v108)
    v108 = *(_QWORD *)(v107 + 64);
  *(_QWORD *)(v107 + 56) = 0;
  *(_QWORD *)(v107 + 64) = v108;
  v109 = *(_QWORD **)a1;
  v185 = *(_QWORD **)(a1 + 8);
  if (*(_QWORD **)a1 != v185)
  {
    do
    {
      v110 = *v109;
      if (v224)
      {
        *(_QWORD *)&v229 = *v109;
        if (((*(uint64_t (**)(_QWORD *, __int128 *))(*v224 + 48))(v224, &v229) & 1) == 0)
          goto LABEL_144;
      }
      v199 = v110;
      v111 = *(_QWORD *)(v110 + 384);
      v112 = *(unsigned int *)(v111 + 744);
      if ((_DWORD)v112)
      {
        if (v112 < 0x201)
        {
          v113 = 0;
          i = 512;
        }
        else
        {
          v113 = 0;
          for (i = 512; i < v112; i *= 2)
            ++v113;
        }
        v115 = *(unsigned int *)(v111 + 744);
        if (i > v112)
        {
          do
          {
            --v113;
            v115 *= 2;
          }
          while (i > v115);
        }
      }
      else
      {
        v113 = 0;
      }
      v186 = v109;
      v116 = *(unsigned __int8 *)(v111 + 169);
      v117 = exp2((float)(ceilf(v203) - (float)(v113 + v116))) * (float)(v112 >> 7);
      v118 = fmaxf(*(float *)(v184 + 3080) + *(float *)(v184 + 3076), 1.0);
      v206 = v117;
      v204 = v118;
      v207 = *(double *)(v184 + 3768) / (*(double *)(v184 + 1368) * (*(double *)(v110 + 72) - *(double *)(v110 + 56)));
      v120 = *(_QWORD *)(v110 + 216);
      v119 = *(_QWORD *)(v110 + 224);
      if (v119)
      {
        v121 = (unint64_t *)(v119 + 8);
        do
          v122 = __ldxr(v121);
        while (__stxr(v122 + 1, v121));
      }
      v123 = (std::__shared_weak_count *)*((_QWORD *)&v200 + 1);
      *(_QWORD *)&v200 = v120;
      *((_QWORD *)&v200 + 1) = v119;
      if (!v123)
        goto LABEL_163;
      v124 = (unint64_t *)&v123->__shared_owners_;
      do
        v125 = __ldaxr(v124);
      while (__stlxr(v125 - 1, v124));
      if (!v125)
      {
        ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
        std::__shared_weak_count::__release_weak(v123);
        v127 = *(_QWORD *)(v110 + 232);
        v126 = *(_QWORD *)(v110 + 240);
        if (!v126)
          goto LABEL_166;
      }
      else
      {
LABEL_163:
        v127 = *(_QWORD *)(v110 + 232);
        v126 = *(_QWORD *)(v110 + 240);
        if (!v126)
          goto LABEL_166;
      }
      v128 = (unint64_t *)(v126 + 8);
      do
        v129 = __ldxr(v128);
      while (__stxr(v129 + 1, v128));
LABEL_166:
      v130 = (std::__shared_weak_count *)*((_QWORD *)&v201 + 1);
      *(_QWORD *)&v201 = v127;
      *((_QWORD *)&v201 + 1) = v126;
      if (v130)
      {
        v131 = (unint64_t *)&v130->__shared_owners_;
        do
          v132 = __ldaxr(v131);
        while (__stlxr(v132 - 1, v131));
        if (!v132)
        {
          ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
          std::__shared_weak_count::__release_weak(v130);
        }
      }
      v133 = v200;
      if ((*(_BYTE *)(v200 + 16) & 2) == 0)
      {
        v134 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
        if (v134 != -1)
        {
          *(_QWORD *)v219 = &v222;
          v214.n128_u64[0] = (unint64_t)v219;
          std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v214, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
        }
      }
      v135 = *(__int128 **)(v133 + 72);
      v229 = *v135;
      v230 = v135[1];
      v231 = v135[2];
      v232 = v135[3];
      v211 = ggl::CullingGrid::intersectedCellsForView((float *)&v229, 0.0);
      v205 = v116;
      v136 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v111 + 48))(v111);
      v138 = *v136;
      v137 = v136[1];
      v196 = v137;
      if (*v136 != v137)
      {
        while (1)
        {
          v141 = v209;
          v142 = (*(uint64_t (**)(unsigned __int8 *, id))(*(_QWORD *)v74 + 40))(v74, v141);

          if (v142)
          {
            v143 = v200;
            v218 = 0;
            v214 = 0uLL;
            v144 = *(_QWORD *)(v200 + 8);
            if ((*(_BYTE *)(v200 + 16) & 2) == 0)
            {
              v145 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
              if (v145 != -1)
              {
                v222 = &v220;
                v221 = &v222;
                std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v221, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
              }
            }
            if (v144)
              v146 = *(_QWORD *)(v143 + 72);
            else
              v146 = 0;
            v147 = v110;
            if (v218)
            {
              v148 = v215;
              v149 = v216;
              if (v216 != v215)
              {
                v150 = (_QWORD *)v214.n128_u64[1];
                v151 = v217;
                v152 = HIBYTE(v217);
                if (v214.n128_u64[0] && *(_BYTE *)(v214.n128_u64[1] + 17) != 2)
                  (*(void (**)(void))(*(_QWORD *)v214.n128_u64[0] + 64))();
                if (v151 && !v152)
                {
                  v153 = v150[7];
                  v154 = v150[8];
                  if (v154 == v153)
                    v153 = v150[10] - v150[9];
                  if (v148 < v153)
                    v153 = v148;
                  if (v154 <= v149)
                    v154 = v149;
                  if (v154 == v153)
                    v154 = v153 + v150[10] - v150[9];
                  v150[7] = v153;
                  v150[8] = v154;
                }
              }
            }
            v155.n128_u64[0] = 0;
            v155.n128_u64[1] = v143;
            v197 = v155;
            v214 = v155;
            v215 = 0;
            v216 = v144;
            v218 = v146;
            v217 = 0;
            v156 = v199 + 88;
            v157 = *(id *)(v138 + 8);
            v74 = v195;
            (*(void (**)(float *__return_ptr, unsigned __int8 *, __int128 *, uint64_t, uint64_t, id, _QWORD *, float))(*(_QWORD *)v195 + 48))(v219, v195, &v201, v146, v156, v157, v212, v203);

            v11 = v194;
            v110 = v147;
            v137 = v196;
            if (v146 && v144 && v197.n128_u64[0] && *(_BYTE *)(v197.n128_u64[1] + 17) != 2)
              (*(void (**)(__n128))(*(_QWORD *)v197.n128_u64[0] + 64))(v197);
            v211 = ggl::CullingGrid::intersectedCellsForView(v219, 0.0);
          }
          v158 = *(id *)(v138 + 8);
          if (((*(uint64_t (**)(unsigned __int8 *, uint64_t, id, _QWORD))(*(_QWORD *)v74 + 56))(v74, v110, v158, v211) & 1) != 0)goto LABEL_178;
          v159 = *(id *)(v138 + 8);
          v160 = (*(uint64_t (**)(unsigned __int8 *, id, _QWORD))(*(_QWORD *)v74 + 64))(v74, v159, 0);

          if ((v160 & 1) == 0)
            goto LABEL_179;
          v161 = *(id *)(v138 + 8);
          v162 = (*(uint64_t (**)(unsigned __int8 *, id))(*(_QWORD *)v74 + 72))(v74, v161);

          v163 = *(id *)(v138 + 8);
          v164 = v209;
          v209 = v163;

          v165 = *v191;
          v166 = (uint64_t)v236;
          if (!v236)
            goto LABEL_214;
          if (v236 != v235)
            break;
          v228 = v227;
          (*(void (**)(_QWORD *, _QWORD *))(v235[0] + 24))(v235, v227);
LABEL_216:
          HIBYTE(v182) = v162;
          LOBYTE(v182) = 0;
          md::_layoutPolygonGroup<md::VenueTileData>(v165, v192, a4, (uint64_t)v198, v190, v189, v74, (uint64_t)&v199, v182, v227);
          v167 = v228;
          if (v228 == v227)
          {
            v167 = v227;
            v168 = 4;
          }
          else
          {
            if (!v228)
              goto LABEL_221;
            v168 = 5;
          }
          (*(void (**)(void))(*v167 + 8 * v168))();
LABEL_221:

          if (v187 == __src)
            goto LABEL_179;
          v158 = *v191;
          v169 = (uint64_t)v234;
          if (!v234)
            goto LABEL_225;
          if (v234 != v233)
          {
            v169 = (*(uint64_t (**)(void))(*v234 + 16))();
LABEL_225:
            v226 = (_QWORD *)v169;
            goto LABEL_227;
          }
          v226 = v225;
          (*(void (**)(uint64_t, _QWORD *))(v233[0] + 24))((uint64_t)v233, v225);
LABEL_227:
          HIBYTE(v183) = v162;
          LOBYTE(v183) = 1;
          md::_layoutPolygonGroup<md::VenueTileData>(v158, v192, a4, (uint64_t)v198, v190, v189, v74, (uint64_t)&v199, v183, v225);
          v139 = v226;
          if (v226 == v225)
          {
            v139 = v225;
            v140 = 4;
          }
          else
          {
            if (!v226)
              goto LABEL_178;
            v140 = 5;
          }
          (*(void (**)(void))(*v139 + 8 * v140))();
LABEL_178:

LABEL_179:
          v138 += 24;
          if (v138 == v137)
            goto LABEL_143;
        }
        v166 = (*(uint64_t (**)(void))(*v236 + 16))();
LABEL_214:
        v228 = (_QWORD *)v166;
        goto LABEL_216;
      }
LABEL_143:
      v109 = v186;
LABEL_144:
      ++v109;
    }
    while (v109 != v185);
  }
LABEL_232:
  v170 = v234;
  if (v234 == v233)
  {
    v171 = 4;
    v170 = v233;
  }
  else
  {
    if (!v234)
      goto LABEL_237;
    v171 = 5;
  }
  (*(void (**)(void))(*v170 + 8 * v171))();
LABEL_237:
  v172 = v236;
  if (v236 == v235)
  {
    v173 = 4;
    v172 = v235;
  }
  else
  {
    if (!v236)
      goto LABEL_242;
    v173 = 5;
  }
  (*(void (**)(void))(*v172 + 8 * v173))();
LABEL_242:
  v174 = v224;
  if (v224 == v223)
  {
    v175 = 4;
    v174 = v223;
  }
  else
  {
    if (!v224)
      goto LABEL_247;
    v175 = 5;
  }
  (*(void (**)(void))(*v174 + 8 * v175))();
LABEL_247:
  v208 = &off_1E42B4B50;

  if (v202)
    v202 = 0;
  v176 = (std::__shared_weak_count *)*((_QWORD *)&v201 + 1);
  if (*((_QWORD *)&v201 + 1))
  {
    v177 = (unint64_t *)(*((_QWORD *)&v201 + 1) + 8);
    do
      v178 = __ldaxr(v177);
    while (__stlxr(v178 - 1, v177));
    if (!v178)
    {
      ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
      std::__shared_weak_count::__release_weak(v176);
    }
  }
  v179 = (std::__shared_weak_count *)*((_QWORD *)&v200 + 1);
  if (*((_QWORD *)&v200 + 1))
  {
    v180 = (unint64_t *)(*((_QWORD *)&v200 + 1) + 8);
    do
      v181 = __ldaxr(v180);
    while (__stlxr(v181 - 1, v180));
    if (!v181)
    {
      ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
      std::__shared_weak_count::__release_weak(v179);
    }
  }

}

void sub_19FE6CC78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;
  uint64_t a70;
  void *v70;
  void *v71;
  void *v72;
  uint64_t v73;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;

  operator delete(v71);
  operator delete(v72);
  operator delete(v70);
  v75 = *(_QWORD **)(v73 - 160);
  if (v75 == (_QWORD *)(v73 - 184))
  {
    v76 = 4;
    v75 = (_QWORD *)(v73 - 184);
  }
  else
  {
    if (!v75)
      goto LABEL_6;
    v76 = 5;
  }
  (*(void (**)(void))(*v75 + 8 * v76))();
LABEL_6:
  v77 = *(_QWORD **)(v73 - 128);
  if (v77 == (_QWORD *)(v73 - 152))
  {
    v78 = 4;
    v77 = (_QWORD *)(v73 - 152);
  }
  else
  {
    if (!v77)
      goto LABEL_11;
    v78 = 5;
  }
  (*(void (**)(void))(*v77 + 8 * v78))();
LABEL_11:
  v79 = (_QWORD *)a70;
  if ((char *)a70 == &a67)
  {
    v80 = 4;
    v79 = &a67;
  }
  else
  {
    if (!a70)
      goto LABEL_16;
    v80 = 5;
  }
  (*(void (**)(void))(*v79 + 8 * v80))();
LABEL_16:
  md::PolygonGroupLayoutInfo<md::PolygonTileData>::~PolygonGroupLayoutInfo((uint64_t)&a33);

  _Unwind_Resume(a1);
}

void md::_layoutPolygonGroup<md::VenueTileData>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 *a7, uint64_t a8, __int16 a9, _QWORD *a10)
{
  ggl::CommandBuffer *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  float v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  id v23;
  uint64_t *v24;
  uint64_t v25;
  int v26;
  int v27;
  char v28;
  float v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  unsigned int v39;
  float *v40;
  float v41;
  BOOL v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  float *v46;
  float v47;
  BOOL v48;
  unsigned int v49;
  int v50;
  int v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  float *v56;
  float v57;
  BOOL v58;
  unsigned int v59;
  int v60;
  int v61;
  uint64_t v62;
  unsigned int v63;
  float *v64;
  float v65;
  BOOL v66;
  unsigned int v67;
  int v68;
  int v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  uint64_t v87;
  unsigned int v88;
  float *v89;
  float v90;
  BOOL v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  int *v95;
  int v96;
  float v97;
  float v98;
  unint64_t v99;
  float v100;
  float *v101;
  float v102;
  BOOL v103;
  unsigned int v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  double v110;
  float v111;
  uint64_t v112;
  float *v113;
  BOOL v114;
  unsigned int v115;
  float v116;
  BOOL v117;
  unsigned int v118;
  int v119;
  int v120;
  unint64_t v121;
  unsigned int v122;
  unsigned __int8 *v123;
  int v124;
  unint64_t v125;
  unsigned int v126;
  unsigned __int8 *v127;
  int v128;
  float v129;
  unsigned int v130;
  float32x4_t v131;
  float v132;
  uint64_t v133;
  unsigned int v134;
  unsigned int v135;
  float v136;
  float32x4_t v137;
  unsigned int v138;
  unsigned int v139;
  float32x4_t v140;
  id v141;
  uint64_t v142;
  float32x2_t v143;
  id v144;
  uint64_t v145;
  float32x2_t v146;
  id v147;
  uint64_t v148;
  uint64_t v149;
  id v150;
  uint64_t v151;
  uint64_t v152;
  BOOL v153;
  VKPolygonGroup *v155;
  id v156;
  int v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  uint64_t v164;
  unint64_t *v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t v168;
  unint64_t v169;
  __n128 v170;
  _DWORD *v171;
  __int128 v172;
  _QWORD *v173;
  int v174;
  int v175;
  unint64_t v176;
  unint64_t v177;
  __int128 *v178;
  __int128 v179;
  uint64_t v180;
  uint64_t v181;
  id v182;
  uint64_t v183;
  __int128 *v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t *v187;
  unint64_t v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  uint64_t *v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t *v195;
  unint64_t v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  __int128 *v200;
  __int128 v201;
  float32x4_t *v202;
  _DWORD *v203;
  uint64_t v204;
  id v205;
  float32x4_t v206;
  float32x4_t v207;
  int8x16_t v208;
  int8x16_t v209;
  float32x4_t v210;
  float32x4_t v211;
  float32x4_t v212;
  float32x4_t v213;
  int8x16_t v214;
  int8x16_t v215;
  float32x4_t v216;
  uint64_t v217;
  __int128 *v218;
  __int128 v219;
  _QWORD *v220;
  int v221;
  int v222;
  unint64_t v223;
  unint64_t v224;
  uint64_t v225;
  __n128 v226;
  uint64_t *v227;
  uint64_t v228;
  int v229;
  int v230;
  BOOL v231;
  char v232;
  char v233;
  uint64_t v234;
  uint64_t v235;
  _QWORD *v236;
  uint64_t v237;
  _QWORD *v238;
  uint64_t v239;
  unint64_t *v240;
  unint64_t v241;
  std::__shared_weak_count *v242;
  unint64_t *v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  unint64_t *v249;
  unint64_t v250;
  std::__shared_weak_count *v251;
  unint64_t *v252;
  unint64_t v253;
  __int32 v254;
  int v255;
  uint64_t v256;
  unsigned __int8 *v257;
  uint64_t v258;
  uint64_t v259;
  unsigned __int8 v260;
  uint64_t v261;
  _QWORD *v262;
  _QWORD *v263;
  uint64_t v264;
  std::__shared_weak_count *v265;
  unint64_t *v266;
  unint64_t v267;
  std::__shared_weak_count *v268;
  unint64_t *v269;
  unint64_t v270;
  uint64_t v271;
  _QWORD *v272;
  uint64_t v273;
  _QWORD *v274;
  uint64_t v275;
  unint64_t *v276;
  unint64_t v277;
  std::__shared_weak_count *v278;
  unint64_t *v279;
  unint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  unint64_t *v285;
  unint64_t v286;
  std::__shared_weak_count *v287;
  unint64_t *v288;
  unint64_t v289;
  uint64_t v290;
  unint64_t *v291;
  unint64_t v292;
  std::__shared_weak_count *v293;
  unint64_t *v294;
  unint64_t v295;
  uint64_t v296;
  unint64_t *v297;
  unint64_t v298;
  unint64_t *v299;
  unint64_t *v300;
  unint64_t v301;
  uint64_t v302;
  unint64_t *v303;
  unint64_t v304;
  unint64_t *v305;
  unint64_t *v306;
  __int128 *v307;
  uint64_t v308;
  uint64_t *v309;
  uint64_t v310;
  int v311;
  float v312;
  __int128 v313;
  std::__shared_weak_count *v314;
  unint64_t *v315;
  unint64_t v316;
  unint64_t v317;
  uint64_t v318;
  unint64_t *v319;
  unint64_t v320;
  unint64_t v321;
  float *v322;
  float v323;
  BOOL v324;
  unsigned int v325;
  float v326;
  float v327;
  float v328;
  float v329;
  float v330;
  uint64_t v331;
  uint64_t v332;
  _QWORD *v333;
  uint64_t v334;
  _QWORD *v335;
  uint64_t v336;
  unint64_t *v337;
  unint64_t v338;
  std::__shared_weak_count *v339;
  unint64_t *v340;
  unint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  unint64_t *v346;
  unint64_t v347;
  std::__shared_weak_count *v348;
  unint64_t *v349;
  unint64_t v350;
  __int32 v351;
  int v352;
  uint64_t v353;
  unsigned __int8 *v354;
  uint64_t v355;
  uint64_t v356;
  unsigned __int8 v357;
  uint64_t v358;
  _QWORD *v359;
  _QWORD *v360;
  uint64_t v361;
  std::__shared_weak_count *v362;
  unint64_t *v363;
  unint64_t v364;
  std::__shared_weak_count *v365;
  unint64_t *v366;
  unint64_t v367;
  uint64_t v368;
  _QWORD *v369;
  uint64_t v370;
  _QWORD *v371;
  uint64_t v372;
  unint64_t *v373;
  unint64_t v374;
  std::__shared_weak_count *v375;
  unint64_t *v376;
  unint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  unint64_t *v382;
  unint64_t v383;
  std::__shared_weak_count *v384;
  unint64_t *v385;
  unint64_t v386;
  uint64_t v387;
  unint64_t *v388;
  unint64_t v389;
  std::__shared_weak_count *v390;
  unint64_t *v391;
  unint64_t v392;
  uint64_t v393;
  unint64_t *v394;
  unint64_t v395;
  unint64_t *v396;
  unint64_t *v397;
  unint64_t v398;
  uint64_t v399;
  unint64_t *v400;
  unint64_t v401;
  unint64_t *v402;
  unint64_t *v403;
  _QWORD *v404;
  uint64_t v405;
  _QWORD *v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  int v410;
  int v411;
  BOOL v412;
  char v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  int v419;
  uint64_t v420;
  uint64_t *v421;
  uint64_t *v422;
  unsigned __int8 v423;
  id v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t *v427;
  __int128 *v428;
  uint64_t v429;
  uint64_t v430;
  _QWORD *v431;
  uint64_t v432;
  _QWORD *v433;
  __int32 v434;
  __int128 v435;
  uint64_t v436;
  _QWORD *v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  int v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t *v447;
  uint64_t *v448;
  unsigned __int8 v449;
  id v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t *v453;
  __int128 *v454;
  uint64_t v455;
  uint64_t v456;
  _QWORD *v457;
  uint64_t v458;
  _QWORD *v459;
  __int32 v460;
  __int128 v461;
  uint64_t v462;
  _QWORD *v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  _QWORD *v467;
  uint64_t v468;
  _QWORD *v469;
  uint64_t v470;
  unint64_t *v471;
  unint64_t v472;
  std::__shared_weak_count *v473;
  unint64_t *v474;
  unint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  unint64_t *v480;
  unint64_t v481;
  std::__shared_weak_count *v482;
  unint64_t *v483;
  unint64_t v484;
  uint64_t v485;
  uint64_t v486;
  __int128 v487;
  uint64_t v488;
  float v489;
  uint64_t *v490;
  uint64_t v491;
  int v492;
  float v493;
  float v494;
  uint64_t v495;
  float v496;
  uint64_t v497;
  uint64_t v498;
  __int128 v499;
  std::__shared_weak_count *v500;
  unint64_t *v501;
  unint64_t v502;
  unint64_t v503;
  uint64_t v504;
  unint64_t *v505;
  unint64_t v506;
  unint64_t v507;
  float v508;
  float *v509;
  float v510;
  BOOL v511;
  unsigned int v512;
  float v513;
  float v514;
  float v515;
  float v516;
  float v517;
  int v518;
  uint64_t v519;
  unsigned int v520;
  float *v521;
  float v522;
  _BOOL4 v523;
  unsigned int v525;
  float v526;
  _BOOL4 v527;
  unsigned int v529;
  int v530;
  int v531;
  __int128 v532;
  _QWORD *v533;
  int v534;
  int v535;
  unint64_t v536;
  unint64_t v537;
  uint64_t v538;
  int v539;
  int v540;
  uint64_t v541;
  uint64_t *v542;
  uint64_t *v543;
  unsigned __int8 v544;
  int v545;
  id v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t *v549;
  __int128 *v550;
  uint64_t v551;
  uint64_t v552;
  _QWORD *v553;
  uint64_t v554;
  _QWORD *v555;
  __int32 v556;
  __int128 v557;
  uint64_t v558;
  _QWORD *v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  _QWORD *v563;
  uint64_t v564;
  _QWORD *v565;
  uint64_t v566;
  unint64_t *v567;
  unint64_t v568;
  std::__shared_weak_count *v569;
  unint64_t *v570;
  unint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  unint64_t *v576;
  unint64_t v577;
  std::__shared_weak_count *v578;
  unint64_t *v579;
  unint64_t v580;
  uint64_t v581;
  unint64_t v582;
  __int128 v583;
  uint64_t v584;
  id v585;
  id v586;
  int v587;
  int v588;
  unint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  int v595;
  uint64_t v596;
  uint64_t *v597;
  uint64_t *v598;
  unsigned __int8 v599;
  id v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t *v603;
  __int128 *v604;
  uint64_t v605;
  uint64_t v606;
  _QWORD *v607;
  uint64_t v608;
  _QWORD *v609;
  __int32 v610;
  __int128 v611;
  uint64_t v612;
  _QWORD *v613;
  uint64_t v614;
  float32x4_t v615;
  __n128 v616;
  __int128 v617;
  uint64_t v618;
  int64x2_t v619;
  int64x2_t v620;
  int64x2_t v621;
  md::PolygonViewConstantsFrameCache *v622;
  md::PolygonViewConstantsFrameCache *v623[2];
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  __int128 v628;
  ggl::CommandBuffer *v630;
  ggl::CommandBuffer *v631;
  ggl::CommandBuffer *v632;
  int64x2_t v634;
  uint64_t v635;
  uint64_t v636;
  float32x2_t v637;
  float32x4_t v638;
  uint64_t v639;
  float32x4_t v640;
  float32x2_t v641;
  float32x4_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  __int128 v646;
  __int128 v647;
  __int128 v648;
  __int128 v649;
  __int128 v650;
  float32x4_t v651;
  float32x4_t v652;
  float32x2_t v653;
  uint64_t v654;
  BOOL v655;
  BOOL v656;
  unsigned __int8 v657[2];
  unsigned __int8 v658;
  _BYTE v659[20];
  uint64_t **v660;
  BOOL v661;
  char v662;
  char v663;
  _BYTE v664[2];
  unsigned __int8 v665;
  _QWORD v666[3];
  _QWORD *v667;
  _QWORD v668[3];
  _QWORD *v669;
  _QWORD v670[3];
  _QWORD *v671;
  _QWORD v672[3];
  _QWORD *v673;
  _QWORD v674[3];
  _QWORD *v675;
  __int128 v676;
  uint64_t v677;
  __int128 *v678;
  __int16 v679;
  float32x4_t *v680;
  _BYTE v681[36];
  _DWORD *v682;
  _QWORD v683[3];
  _QWORD *v684;
  _BYTE v685[32];
  float32x4_t v686;
  float32x4_t v687;
  __int128 v688;
  __int128 v689;
  int64x2_t v690;
  uint64_t v691;
  uint64_t v692;

  v692 = *MEMORY[0x1E0C80C00];
  v662 = 0;
  v646 = 0u;
  v647 = 0u;
  v648 = 0u;
  v641 = 0;
  v643 = 0;
  v637 = 0;
  v639 = 0;
  v14 = a1;
  v15 = *(_QWORD *)(*(_QWORD *)a2 + 520);
  v16 = *(std::__shared_weak_count **)(*(_QWORD *)a2 + 528);
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
    v19 = *(float *)(v15 + 256);
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  else
  {
    v19 = *(float *)(v15 + 256);
  }
  -[ggl::CommandBuffer textureManager](v14, "textureManager");
  v653 = **(float32x2_t **)v685;
  if (*(_QWORD *)&v685[8])
  {
    v21 = (unint64_t *)(*(_QWORD *)&v685[8] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)&v685[8] + 16))(*(_QWORD *)&v685[8]);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v685[8]);
    }
  }
  v636 = a8;
  v635 = a3;
  v654 = *(_QWORD *)(-[ggl::CommandBuffer alphaAtlas](v14, "alphaAtlas") + 24);
  v23 = *(id *)(a8 + 80);
  *(_WORD *)v685 = a9;
  v660 = (uint64_t **)objc_msgSend(v23, "styleQueries:", v685);

  if (!v660)
    goto LABEL_111;
  if (v660[1] == *v660)
    goto LABEL_111;
  v659[16] = 0;
  *(_QWORD *)v659 = 0;
  *(_WORD *)v657 = 0;
  v658 = 0;
  v655 = 0;
  v663 = 0;
  *(_DWORD *)&v659[12] = (*(float (**)(void))(*(_QWORD *)a7 + 96))();
  v24 = *v660;
  if (v660[1] == *v660)
    goto LABEL_111;
  v618 = a4;
  v631 = v14;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v622 = (md::PolygonViewConstantsFrameCache *)(v635 + 240);
  v29 = v19;
  do
  {
    v30 = *(_OWORD *)&v24[2 * v25];
    *(_OWORD *)v681 = v30;
    v31 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
    if (*((_QWORD *)&v30 + 1))
    {
      v32 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
      *(_OWORD *)v685 = v30;
      do
        v34 = __ldxr(v32);
      while (__stxr(v34 + 1, v32));
      v35 = v30;
    }
    else
    {
      v35 = v30;
      *(_OWORD *)v685 = (unint64_t)v30;
    }
    *(_OWORD *)&v685[16] = 0uLL;
    v686.i8[0] = 0;
    if (v35)
      LODWORD(v35) = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v35 + 48))(v35, &v685[16]);
    v686.i8[0] = v35;
    if (v31)
    {
      v36 = (unint64_t *)&v31->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
      LODWORD(v35) = v686.u8[0];
    }
    if ((_DWORD)v35)
    {
      v38 = *(_QWORD *)(*(_QWORD *)v685 + 24);
      v39 = *(unsigned __int8 *)(v38 + 12);
      if (v39 == 2)
      {
        if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(*(_QWORD *)(*(_QWORD *)v685 + 24), 0x8Au, 0) & 1) != 0)
          goto LABEL_40;
        v39 = 1;
      }
      if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v38, 0x8Au, v39))
      {
LABEL_50:
        v27 |= md::_polygonIsVisibleWithQueryLocker((uint64_t)v685, *(float *)(v636 + 48));
        if ((v27 & 1) != 0)
        {
          v44 = *(_QWORD *)(*(_QWORD *)v685 + 24);
          if ((int)*(float *)(v636 + 48) >= 0x17)
            v45 = 23;
          else
            v45 = (int)*(float *)(v636 + 48);
          v46 = *(float **)v44;
          if (*(_QWORD *)v44
            && (v47 = *v46, LODWORD(v46) = *v46 == 1.0, *(_BYTE *)(v44 + 10))
            && (v47 != 0.0 ? (v48 = v47 == 1.0) : (v48 = 1), !v48)
            || (v49 = *(unsigned __int8 *)(v44 + v46 + 11), v47 = 0.0, v49 == 2))
          {
            v681[0] = 1;
            LOBYTE(v676) = 1;
            v50 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v44, 0x1A4u, v45, 0, v681);
            v51 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v44, 0x1A4u, v45, 1u, &v676);
            if (v47 < 1.0)
              LOBYTE(v51) = v50;
          }
          else
          {
            LOBYTE(v51) = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(_QWORD *)(*(_QWORD *)v685 + 24), 0x1A4u, v45, v49, 0);
          }
          v52 = v51 == 0;
        }
        else
        {
          v52 = 0;
        }
        v53 = v636;
        v661 = v52;
        if ((v28 & 1) == 0)
        {
          v54 = *(_QWORD *)(*(_QWORD *)v685 + 24);
          if ((int)*(float *)(v636 + 48) >= 0x17)
            v55 = 23;
          else
            v55 = (int)*(float *)(v636 + 48);
          v56 = *(float **)v54;
          if (*(_QWORD *)v54
            && (v57 = *v56, LODWORD(v56) = *v56 == 1.0, *(_BYTE *)(v54 + 10))
            && (v57 != 0.0 ? (v58 = v57 == 1.0) : (v58 = 1), !v58)
            || (v59 = *(unsigned __int8 *)(v54 + v56 + 11), v57 = 0.0, v59 == 2))
          {
            v681[0] = 1;
            LOBYTE(v676) = 1;
            v60 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v54, 0x68u, v55, 0, v681);
            v61 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v54, 0x68u, v55, 1u, &v676);
            if (v57 < 1.0)
              v61 = v60;
          }
          else
          {
            v61 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(_QWORD *)(*(_QWORD *)v685 + 24), 0x68u, v55, v59, 0);
          }
          *(_DWORD *)v659 = v61;
          v53 = v636;
        }
        if ((v28 & 1) == 0)
        {
          v62 = *(_QWORD *)(*(_QWORD *)v685 + 24);
          if ((int)*(float *)(v53 + 48) >= 0x17)
            v63 = 23;
          else
            v63 = (int)*(float *)(v53 + 48);
          v64 = *(float **)v62;
          if (*(_QWORD *)v62
            && (v65 = *v64, LODWORD(v64) = *v64 == 1.0, *(_BYTE *)(v62 + 10))
            && (v65 != 0.0 ? (v66 = v65 == 1.0) : (v66 = 1), !v66)
            || (v67 = *(unsigned __int8 *)(v62 + v64 + 11), v65 = 0.0, v67 == 2))
          {
            v681[0] = 1;
            LOBYTE(v676) = 1;
            v68 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v62, 0x13Fu, v63, 0, v681);
            v69 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v62, 0x13Fu, v63, 1u, &v676);
            if (v65 < 1.0)
              LOBYTE(v69) = v68;
          }
          else
          {
            v69 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(_QWORD *)(*(_QWORD *)v685 + 24), 0x13Fu, v63, v67, 0);
          }
          v659[16] = v69;
        }
        *(_WORD *)v681 = 0;
        if (gss::FeatureAttributeSet::getValueForAttributeKey((uint64_t *)((*v660)[2 * v25] + 240), 187, v681))v663 = 1;
        v28 = 1;
        goto LABEL_19;
      }
LABEL_40:
      v40 = *(float **)v38;
      if (*(_QWORD *)v38
        && (v41 = *v40, LODWORD(v40) = *v40 == 1.0, *(_BYTE *)(v38 + 10))
        && (v41 != 0.0 ? (v42 = v41 == 1.0) : (v42 = 1), !v42)
        || (v43 = *(unsigned __int8 *)(v38 + v40 + 11), v43 == 2))
      {
        v681[0] = 1;
        LOBYTE(v676) = 1;
        gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v38, 0x8Au, 0, v681);
        gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v38, 0x8Au, 1u, &v676);
      }
      else
      {
        gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v38, 0x8Au, v43, 0);
      }
      goto LABEL_50;
    }
LABEL_19:
    gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)v685);
    v25 = ++v26;
    v24 = *v660;
  }
  while (v26 < (unint64_t)(((char *)v660[1] - (char *)*v660) >> 4));
  v14 = v631;
  if ((v27 & 1) == 0)
  {
LABEL_111:

    goto LABEL_112;
  }
  v70 = *v24;
  v71 = (std::__shared_weak_count *)v24[1];
  *(_QWORD *)v681 = *v24;
  *(_QWORD *)&v681[8] = v71;
  if (v71)
  {
    v72 = (unint64_t *)&v71->__shared_owners_;
    do
      v73 = __ldxr(v72);
    while (__stxr(v73 + 1, v72));
    *(_QWORD *)&v685[8] = v71;
    v74 = v636;
    do
      v75 = __ldxr(v72);
    while (__stxr(v75 + 1, v72));
  }
  else
  {
    *(_QWORD *)&v685[8] = 0;
    v74 = v636;
  }
  *(_QWORD *)v685 = v70;
  *(_OWORD *)&v685[16] = 0uLL;
  v686.i8[0] = 0;
  if (v70)
    LODWORD(v70) = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v70 + 48))(v70, &v685[16]);
  v686.i8[0] = v70;
  if (v71)
  {
    v85 = (unint64_t *)&v71->__shared_owners_;
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
    LODWORD(v70) = v686.u8[0];
  }
  LOBYTE(v683[0]) = 0;
  if ((_DWORD)v70)
  {
    v87 = *(_QWORD *)(*(_QWORD *)v685 + 24);
    v88 = *(unsigned __int8 *)(v87 + 12);
    if (v88 != 2)
      goto LABEL_141;
    if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(*(_QWORD *)(*(_QWORD *)v685 + 24), 0x8Au, 0) & 1) != 0)
      goto LABEL_142;
    v88 = 1;
LABEL_141:
    if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v87, 0x8Au, v88))
    {
LABEL_142:
      v89 = *(float **)v87;
      if (*(_QWORD *)v87
        && (v90 = *v89, LODWORD(v89) = *v89 == 1.0, *(_BYTE *)(v87 + 10))
        && (v90 != 0.0 ? (v91 = v90 == 1.0) : (v91 = 1), !v91)
        || (v92 = *(unsigned __int8 *)(v87 + v89 + 11), v90 = 0.0, v92 == 2))
      {
        v681[0] = 1;
        LOBYTE(v676) = 1;
        v93 = gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v87, 0x8Au, 0, v681);
        v94 = gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v87, 0x8Au, 1u, &v676);
        if (v90 >= 1.0)
          v95 = (int *)v94;
        else
          v95 = (int *)v93;
        v96 = *v95;
      }
      else
      {
        v96 = *(_DWORD *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v87, 0x8Au, v92, 0);
      }
    }
    else
    {
      LOBYTE(v96) = 0;
    }
    v657[0] = (*(uint64_t (**)(unsigned __int8 *, _QWORD, _QWORD *))(*(_QWORD *)a7 + 24))(a7, v96, v683);
    v99 = *(_QWORD *)(*(_QWORD *)v685 + 24);
    v100 = fminf(fmaxf(*(float *)(v74 + 48), 0.0), 23.0);
    v101 = *(float **)v99;
    if (*(_QWORD *)v99
      && (v102 = *v101, LODWORD(v101) = *v101 == 1.0, *(_BYTE *)(v99 + 10))
      && (v102 != 0.0 ? (v103 = v102 == 1.0) : (v103 = 1), !v103)
      || (v104 = *(unsigned __int8 *)(v99 + v101 + 11), v102 = 0.0, v104 == 2))
    {
      v681[0] = 1;
      LOBYTE(v676) = 1;
      gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v99, 0x149u, 0, v681, v100);
      v106 = v105;
      gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v99, 0x149u, 1u, (BOOL *)&v676, v100);
      v108 = v106 + (float)((float)(v107 - v106) * v102);
    }
    else
    {
      gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(*(_QWORD *)(*(_QWORD *)v685 + 24), 0x149u, v104, 0, v100);
      v108 = v109;
    }
    v110 = *(double *)(v74 + 64);
    v111 = v110 * (*(float (**)(unsigned __int8 *))(*(_QWORD *)a7 + 80))(a7) * v108;
    *(float *)&v659[4] = v111;
    v112 = *(_QWORD *)(*(_QWORD *)v685 + 24);
    v113 = *(float **)v112;
    if (*(_QWORD *)v112)
      v114 = *(_BYTE *)(v112 + 9) != 0;
    else
      v114 = 0;
    if (v29 <= 0.0)
      v114 = 0;
    v655 = v114;
    if ((int)*(float *)(v74 + 48) >= 0x17)
      v115 = 23;
    else
      v115 = (int)*(float *)(v74 + 48);
    if (v113
      && (v116 = *v113, LODWORD(v113) = *v113 == 1.0, *(_BYTE *)(v112 + 10))
      && (v116 != 0.0 ? (v117 = v116 == 1.0) : (v117 = 1), !v117)
      || (v118 = *(unsigned __int8 *)(v112 + v113 + 11), v116 = 0.0, v118 == 2))
    {
      v681[0] = 1;
      LOBYTE(v676) = 1;
      v119 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v112, 0x1A4u, v115, 0, v681);
      v120 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v112, 0x1A4u, v115, 1u, &v676);
      if (v116 < 1.0)
        LOBYTE(v120) = v119;
    }
    else
    {
      v120 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v112, 0x1A4u, v115, v118, 0);
    }
    v662 = v120;
    v121 = *(_QWORD *)(*(_QWORD *)v685 + 24);
    v122 = *(unsigned __int8 *)(v121 + 11);
    if (v122 == 2)
    {
      v681[0] = 1;
      LOBYTE(v676) = 1;
      v123 = (unsigned __int8 *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<BOOL>(v121, 0x6Cu, 0, v681);
      gss::RenderStyle<gss::PropertyID>::styleValueForKey<BOOL>(v121, 0x6Cu, 1u, &v676);
      v124 = *v123;
    }
    else
    {
      v124 = *(unsigned __int8 *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<BOOL>(*(_QWORD *)(*(_QWORD *)v685 + 24), 0x6Cu, v122, 0);
    }
    v125 = *(_QWORD *)(*(_QWORD *)v685 + 24);
    v126 = *(unsigned __int8 *)(v125 + 12);
    if (v126 == 2)
    {
      v681[0] = 1;
      LOBYTE(v676) = 1;
      v127 = (unsigned __int8 *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<BOOL>(v125, 0x6Cu, 0, v681);
      gss::RenderStyle<gss::PropertyID>::styleValueForKey<BOOL>(v125, 0x6Cu, 1u, &v676);
      v128 = *v127;
      v129 = *(float *)(v74 + 48);
      if (!v124)
        goto LABEL_192;
LABEL_197:
      gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)v681, *(_QWORD *)(*(_QWORD *)v685 + 24), 0x5Cu, 0, fminf(fmaxf(v129, 0.0), 23.0));
    }
    else
    {
      v128 = *(unsigned __int8 *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<BOOL>(*(_QWORD *)(*(_QWORD *)v685 + 24), 0x6Cu, v126, 0);
      v129 = *(float *)(v74 + 48);
      if (v124)
        goto LABEL_197;
LABEL_192:
      if ((int)v129 >= 0x17)
        v130 = 23;
      else
        v130 = (int)v129;
      gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)v681, *(_QWORD *)(*(_QWORD *)v685 + 24), 0x5Cu, v130, 0, 0);
    }
    v131 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v681)), (float32x4_t)vdupq_n_s32(0x37800080u));
    v642 = v131;
    v132 = *(float *)(v74 + 48);
    v133 = *(_QWORD *)(*(_QWORD *)v685 + 24);
    if ((int)v132 >= 0x17)
      v134 = 23;
    else
      v134 = (int)v132;
    v135 = *(unsigned __int8 *)(v133 + 11);
    v615 = v131;
    v98 = v131.f32[3];
    if (v135 == 2)
    {
      if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v133, 0x14Cu, v134, 0) & 1) == 0)
      {
        v135 = 1;
        goto LABEL_204;
      }
LABEL_205:
      if (v124)
        gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)v681, v133, 0x14Cu, 0, fminf(fmaxf(v132, 0.0), 23.0));
      else
        gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)v681, v133, 0x14Cu, v134, 0, 0);
      v136 = (float)*(unsigned __int16 *)&v681[6] * 0.000015259;
      v137 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v681)), (float32x4_t)vdupq_n_s32(0x37800080u));
      LODWORD(v645) = v137.i32[2];
      v644 = v137.i64[0];
      v132 = *(float *)(v74 + 48);
      v133 = *(_QWORD *)(*(_QWORD *)v685 + 24);
      if ((int)v132 >= 0x17)
        v134 = 23;
      else
        v134 = (int)v132;
    }
    else
    {
LABEL_204:
      if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v133, 0x14Cu, v134, v135))
        goto LABEL_205;
      LODWORD(v645) = v615.i32[2];
      v644 = v615.i64[0];
      v136 = v98;
    }
    *((float *)&v645 + 1) = v136;
    v138 = *(unsigned __int8 *)(v133 + 12);
    v139 = v138;
    if (v138 == 2)
    {
      if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v133, 0x5Cu, v134, 0) & 1) == 0)
      {
        v139 = 1;
        goto LABEL_215;
      }
LABEL_216:
      if (v128)
        gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)v681, v133, 0x5Cu, 1u, fminf(fmaxf(v132, 0.0), 23.0));
      else
        gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)v681, v133, 0x5Cu, v134, 1u, 0);
      v97 = (float)*(unsigned __int16 *)&v681[6] * 0.000015259;
      v140 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v681)), (float32x4_t)vdupq_n_s32(0x37800080u));
      v638.i32[2] = v140.i32[2];
      v638.i64[0] = v140.i64[0];
      v132 = *(float *)(v74 + 48);
      v133 = *(_QWORD *)(*(_QWORD *)v685 + 24);
      v138 = *(unsigned __int8 *)(v133 + 12);
      if ((int)v132 >= 0x17)
        v134 = 23;
      else
        v134 = (int)v132;
    }
    else
    {
LABEL_215:
      if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v133, 0x5Cu, v134, v139))
        goto LABEL_216;
      v638.i64[0] = v615.i64[0];
      v638.i32[2] = v615.i32[2];
      v97 = v98;
    }
    v638.f32[3] = v97;
    if (v138 == 2)
    {
      if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v133, 0x14Cu, v134, 0) & 1) == 0)
      {
        v138 = 1;
        goto LABEL_226;
      }
LABEL_227:
      if (v128)
        gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)v681, v133, 0x14Cu, 1u, fminf(fmaxf(v132, 0.0), 23.0));
      else
        gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)v681, v133, 0x14Cu, v134, 1u, 0);
      v640 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v681)), (float32x4_t)vdupq_n_s32(0x37800080u));
    }
    else
    {
LABEL_226:
      if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v133, 0x14Cu, v134, v138))
        goto LABEL_227;
      v640 = v638;
      v97 = v638.f32[3];
    }
  }
  else
  {
    v642 = 0uLL;
    v644 = 0;
    v645 = 0;
    v638 = 0uLL;
    v97 = 0.0;
    v98 = 0.0;
    v640 = 0uLL;
  }
  v657[1] = *(_BYTE *)(v74 + 52) + LOBYTE(v683[0]);
  v658 = a7[10] + LOBYTE(v683[0]);
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)v685);
  v141 = *(id *)(v74 + 80);
  v142 = objc_msgSend(v141, "sourceTexture");
  if (v142)
    v143 = (float32x2_t)v142;
  else
    v143 = v653;
  v641 = v143;

  v144 = *(id *)(v636 + 80);
  v145 = objc_msgSend(v144, "targetTexture");
  if (v145)
    v146 = (float32x2_t)v145;
  else
    v146 = v653;
  v637 = v146;

  v147 = *(id *)(v636 + 80);
  v148 = objc_msgSend(v147, "sourceRoofTexture");
  if (v148)
    v149 = v148;
  else
    v149 = (uint64_t)v143;
  v643 = v149;

  v150 = *(id *)(v636 + 80);
  v151 = objc_msgSend(v150, "targetRoofTexture");
  if (v151)
    v152 = v151;
  else
    v152 = (uint64_t)v146;
  v639 = v152;

  *(_DWORD *)&v659[8] = 1065353216;
  v153 = v98 >= 1.0 && (v97 >= 1.0 || !v655);
  v656 = v153;
  v155 = (VKPolygonGroup *)*(id *)(v636 + 80);
  md::PolygonRenderResources::worldTransformForPolygonGroup((md::PolygonRenderResources *)v685, v155, *(float *)(v636 + 44));
  v649 = *(_OWORD *)v685;
  v650 = *(_OWORD *)&v685[16];
  v651 = v686;
  v652 = v687;

  v156 = *(id *)(v636 + 80);
  v157 = (*(uint64_t (**)(unsigned __int8 *, id))(*(_QWORD *)a7 + 40))(a7, v156);

  v158 = md::PolygonViewConstantsFrameCache::pop(v622);
  v160 = *v158;
  v159 = v158[1];
  if (v159)
  {
    v161 = (unint64_t *)(v159 + 8);
    do
      v162 = __ldxr(v161);
    while (__stxr(v162 + 1, v161));
  }
  v163 = (std::__shared_weak_count *)*((_QWORD *)&v646 + 1);
  *(_QWORD *)&v646 = v160;
  *((_QWORD *)&v646 + 1) = v159;
  v164 = v636;
  if (v163)
  {
    v165 = (unint64_t *)&v163->__shared_owners_;
    do
      v166 = __ldaxr(v165);
    while (__stlxr(v166 - 1, v165));
    if (!v166)
    {
      ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
      std::__shared_weak_count::__release_weak(v163);
    }
  }
  v167 = *(_QWORD *)(v636 + 8);
  v682 = 0;
  *(_OWORD *)v681 = 0uLL;
  v168 = *(_QWORD *)(v167 + 8);
  if ((*(_BYTE *)(v167 + 16) & 2) == 0)
  {
    v169 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
    if (v169 != -1)
    {
      *(_QWORD *)v685 = v683;
      *(_QWORD *)&v676 = v685;
      std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v676, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
    }
  }
  v170.n128_u64[0] = 0;
  if (v168)
    v171 = *(_DWORD **)(v167 + 72);
  else
    v171 = 0;
  v170.n128_u64[1] = v167;
  if (v682)
  {
    v172 = *(_OWORD *)&v681[16];
    if (*(_QWORD *)&v681[24] != *(_QWORD *)&v681[16])
    {
      v173 = *(_QWORD **)&v681[8];
      v174 = v681[32];
      v175 = v681[33];
      if (*(_QWORD *)v681 && *(_BYTE *)(*(_QWORD *)&v681[8] + 17) != 2)
      {
        v616 = v170;
        (*(void (**)(void))(**(_QWORD **)v681 + 64))();
        v170 = v616;
      }
      if (v174 && !v175)
      {
        v177 = v173[7];
        v176 = v173[8];
        if (v176 == v177)
          v177 = v173[10] - v173[9];
        if ((unint64_t)v172 < v177)
          v177 = v172;
        if (v176 <= *((_QWORD *)&v172 + 1))
          v176 = *((_QWORD *)&v172 + 1);
        if (v176 == v177)
          v176 = v177 + v173[10] - v173[9];
        v173[7] = v177;
        v173[8] = v176;
      }
    }
  }
  *(__n128 *)v681 = v170;
  *(_QWORD *)&v681[16] = 0;
  *(_QWORD *)&v681[24] = v168;
  v682 = v171;
  *(_WORD *)&v681[32] = 0;
  v676 = 0uLL;
  v178 = *(__int128 **)(v646 + 8);
  *(_QWORD *)&v179 = 0;
  *((_QWORD *)&v179 + 1) = v646;
  if (v178)
    v180 = *(_QWORD *)(v646 + 72);
  else
    v180 = 0;
  v676 = v179;
  v677 = 0;
  v678 = v178;
  v680 = (float32x4_t *)v180;
  v679 = 1;
  *(_DWORD *)(v180 + 64) = v171[16];
  if (v157)
  {
    v617 = v179;
    v181 = *(_QWORD *)v636 + 88;
    v182 = *(id *)(v636 + 80);
    (*(void (**)(_BYTE *__return_ptr, unsigned __int8 *, uint64_t, _DWORD *, uint64_t, id, uint64_t, float))(*(_QWORD *)a7 + 48))(v685, a7, v636 + 24, v171, v181, v182, v636 + 104, *(float *)(v636 + 44));
    *(_OWORD *)v180 = *(_OWORD *)v685;
    *(_OWORD *)(v180 + 16) = *(_OWORD *)&v685[16];
    *(float32x4_t *)(v180 + 32) = v686;
    *(float32x4_t *)(v180 + 48) = v687;

    v164 = v636;
    v179 = v617;
    if (!v178)
      goto LABEL_295;
  }
  else
  {
    *(_DWORD *)v180 = *v171;
    *(_DWORD *)(v180 + 4) = v171[1];
    *(_DWORD *)(v180 + 8) = v171[2];
    *(_DWORD *)(v180 + 12) = v171[3];
    *(_DWORD *)(v180 + 16) = v171[4];
    *(_DWORD *)(v180 + 20) = v171[5];
    *(_DWORD *)(v180 + 24) = v171[6];
    *(_DWORD *)(v180 + 28) = v171[7];
    *(_DWORD *)(v180 + 32) = v171[8];
    *(_DWORD *)(v180 + 36) = v171[9];
    *(_DWORD *)(v180 + 40) = v171[10];
    *(_DWORD *)(v180 + 44) = v171[11];
    *(_DWORD *)(v180 + 48) = v171[12];
    *(_DWORD *)(v180 + 52) = v171[13];
    *(_DWORD *)(v180 + 56) = v171[14];
    *(_DWORD *)(v180 + 60) = v171[15];
    if (!v178)
      goto LABEL_295;
  }
  v183 = *((_QWORD *)&v179 + 1);
  if ((_QWORD)v179 && *(_BYTE *)(*((_QWORD *)&v179 + 1) + 17) != 2)
    (*(void (**)(void))(*(_QWORD *)v179 + 64))();
  v184 = *(__int128 **)(v183 + 64);
  if (v184 <= v178)
    v184 = v178;
  *(_QWORD *)(v183 + 56) = 0;
  *(_QWORD *)(v183 + 64) = v184;
LABEL_295:
  v186 = *(_QWORD *)(v164 + 24);
  v185 = *(_QWORD *)(v164 + 32);
  if (v185)
  {
    v187 = (unint64_t *)(v185 + 8);
    do
      v188 = __ldxr(v187);
    while (__stxr(v188 + 1, v187));
  }
  v189 = (std::__shared_weak_count *)*((_QWORD *)&v648 + 1);
  *(_QWORD *)&v648 = v186;
  *((_QWORD *)&v648 + 1) = v185;
  if (v189)
  {
    v190 = (unint64_t *)&v189->__shared_owners_;
    do
      v191 = __ldaxr(v190);
    while (__stlxr(v191 - 1, v190));
    if (!v191)
    {
      ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
      std::__shared_weak_count::__release_weak(v189);
    }
  }
  v170.n128_u32[0] = *(_DWORD *)&v659[4];
  if (*(float *)&v659[4] <= 0.00000011921)
  {
    if (v682)
      goto LABEL_327;
  }
  else
  {
    v192 = md::PolygonViewConstantsFrameCache::pop(v622);
    v194 = *v192;
    v193 = v192[1];
    if (v193)
    {
      v195 = (unint64_t *)(v193 + 8);
      do
        v196 = __ldxr(v195);
      while (__stxr(v196 + 1, v195));
    }
    v197 = (std::__shared_weak_count *)*((_QWORD *)&v647 + 1);
    *(_QWORD *)&v647 = v194;
    *((_QWORD *)&v647 + 1) = v193;
    if (v197)
    {
      v198 = (unint64_t *)&v197->__shared_owners_;
      do
        v199 = __ldaxr(v198);
      while (__stlxr(v199 - 1, v198));
      if (!v199)
      {
        ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
        std::__shared_weak_count::__release_weak(v197);
      }
    }
    v676 = 0uLL;
    v200 = *(__int128 **)(v647 + 8);
    *(_QWORD *)&v201 = 0;
    *((_QWORD *)&v201 + 1) = v647;
    if (v200)
      v202 = *(float32x4_t **)(v647 + 72);
    else
      v202 = 0;
    v676 = v201;
    v677 = 0;
    v678 = v200;
    v680 = v202;
    v679 = 1;
    v203 = v682;
    v202[4].i32[0] = v682[16];
    if (v157)
    {
      *(_OWORD *)v623 = v201;
      v204 = *(_QWORD *)v164 + 88;
      v205 = *(id *)(v164 + 80);
      (*(void (**)(_BYTE *__return_ptr, unsigned __int8 *, uint64_t, _DWORD *, uint64_t, id, uint64_t, float))(*(_QWORD *)a7 + 48))(v685, a7, v164 + 24, v203, v204, v205, v164 + 104, *(float *)(v164 + 44));
      v206.i64[0] = *(_QWORD *)v685;
      v207 = v686;
      v208 = (int8x16_t)vmulq_f32(*(float32x4_t *)&v685[8], (float32x4_t)xmmword_19FFB3850);
      v206.i64[1] = *(_QWORD *)&v685[24];
      v209 = (int8x16_t)vmulq_f32(*(float32x4_t *)&v685[8], (float32x4_t)xmmword_19FFB3480);
      v210 = vmlaq_n_f32(v687, v686, *(float *)&v659[4]);
      *v202 = vmlaq_f32((float32x4_t)vextq_s8(v208, v208, 8uLL), (float32x4_t)xmmword_19FFB3850, v206);
      v202[1] = vmlaq_f32((float32x4_t)vextq_s8(v209, v209, 8uLL), (float32x4_t)xmmword_19FFB3480, v206);
      v202[2] = v207;
      v202[3] = v210;

      v201 = *(_OWORD *)v623;
    }
    else
    {
      v170 = *(__n128 *)&v659[4];
      v211.i64[0] = *(_QWORD *)v203;
      v212 = *(float32x4_t *)(v203 + 2);
      v213 = *((float32x4_t *)v203 + 2);
      v214 = (int8x16_t)vmulq_f32(v212, (float32x4_t)xmmword_19FFB3850);
      v211.i64[1] = *((_QWORD *)v203 + 3);
      v215 = (int8x16_t)vmulq_f32(v212, (float32x4_t)xmmword_19FFB3480);
      v216 = vmlaq_n_f32(*((float32x4_t *)v203 + 3), v213, *(float *)&v659[4]);
      *v202 = vmlaq_f32((float32x4_t)vextq_s8(v214, v214, 8uLL), (float32x4_t)xmmword_19FFB3850, v211);
      v202[1] = vmlaq_f32((float32x4_t)vextq_s8(v215, v215, 8uLL), (float32x4_t)xmmword_19FFB3480, v211);
      v202[2] = v213;
      v202[3] = v216;
    }
    if (v200)
    {
      v217 = *((_QWORD *)&v201 + 1);
      if ((_QWORD)v201 && *(_BYTE *)(*((_QWORD *)&v201 + 1) + 17) != 2)
        (*(void (**)(void))(*(_QWORD *)v201 + 64))();
      v218 = *(__int128 **)(v217 + 64);
      if (v218 <= v200)
        v218 = v200;
      *(_QWORD *)(v217 + 56) = 0;
      *(_QWORD *)(v217 + 64) = v218;
    }
LABEL_327:
    v219 = *(_OWORD *)&v681[16];
    if (*(_QWORD *)&v681[24] != *(_QWORD *)&v681[16])
    {
      v220 = *(_QWORD **)&v681[8];
      v221 = v681[32];
      v222 = v681[33];
      if (*(_QWORD *)v681 && *(_BYTE *)(*(_QWORD *)&v681[8] + 17) != 2)
        (*(void (**)(__n128))(**(_QWORD **)v681 + 64))(v170);
      if (v221 && !v222)
      {
        v224 = v220[7];
        v223 = v220[8];
        if (v223 == v224)
          v224 = v220[10] - v220[9];
        if ((unint64_t)v219 < v224)
          v224 = v219;
        if (v223 <= *((_QWORD *)&v219 + 1))
          v223 = *((_QWORD *)&v219 + 1);
        if (v223 == v224)
          v223 = v224 + v220[10] - v220[9];
        v220[7] = v224;
        v220[8] = v223;
      }
    }
  }

  v225 = v636;
  v632 = (ggl::CommandBuffer *)md::_commandBufferForConfiguration((uint64_t)a7, (uint64_t)&v646, v618, *(unsigned __int8 *)(v636 + 96));
  v227 = (uint64_t *)v635;
  if (!v632)
    goto LABEL_699;
  v228 = a10[3];
  if (!v228)
    goto LABEL_346;
  if ((_QWORD *)v228 == a10)
  {
    v675 = v674;
    (*(void (**)(_QWORD *, _QWORD *))(*a10 + 24))(a10, v674);
  }
  else
  {
    v228 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v228 + 16))(v228);
LABEL_346:
    v675 = (_QWORD *)v228;
  }
  v229 = *(unsigned __int8 *)(v636 + 96);
  v230 = a7[8];
  (*(void (**)(_BYTE *__return_ptr, unsigned __int8 *, _QWORD))(*(_QWORD *)a7 + 88))(v664, a7, *(_QWORD *)(v636 + 80));
  if (v229)
    v231 = v230 == 0;
  else
    v231 = 0;
  v232 = v231;
  if (v664[0])
    v233 = v664[1];
  else
    v233 = v232;
  v234 = (uint64_t)v675;
  if (v675)
  {
    if (v675 != v674)
    {
      v234 = (*(uint64_t (**)(void))(*v675 + 16))();
      goto LABEL_360;
    }
    v678 = &v676;
    (*(void (**)(_QWORD *, __int128 *))(v674[0] + 24))(v674, &v676);
  }
  else
  {
LABEL_360:
    v678 = (__int128 *)v234;
  }
  LOBYTE(v683[0]) = 0;
  if (v655)
  {
    v225 = v636;
    v235 = md::animatingPolygonStrokePipelineSetup<md::VenueTileData,md::Stroke1StyleProperties>((uint64_t *)v635, v636, (uint64_t)&v646, &v641, &v637, v683);
    *(_QWORD *)v681 = v636;
    *(_QWORD *)&v681[8] = v635;
    *(_QWORD *)&v681[16] = &v676;
    *(_QWORD *)&v681[24] = v632;
    if (!v235)
      goto LABEL_466;
LABEL_383:
    v254 = v657[1];
    v255 = LOBYTE(v683[0]);
    if (LOBYTE(v683[0]))
    {
      if (v657[0])
      {
        v256 = md::PolygonRenderResources::renderStateForBlendingEqual((md::PolygonRenderResources *)v635, v657[1], v658);
      }
      else
      {
        v256 = v635 + 1088;
        v254 = v658;
      }
      v257 = a7;
    }
    else
    {
      v257 = a7;
      v256 = *(_QWORD *)(v635 + 8 * (a7[8] | (2 * v657[0]) | (16 * v233)) + 272);
    }
    *(_QWORD *)v685 = &off_1E42B59B0;
    *(_QWORD *)&v685[16] = "";
    v688 = 0u;
    v689 = 0u;
    v690 = vdupq_n_s64(1uLL);
    v691 = 0;
    v687.i32[2] = 1065353216;
    v686.i32[2] = v254;
    *(_QWORD *)&v685[24] = v256;
    v686.i64[0] = v235;
    v258 = *(_QWORD *)(*(_QWORD *)v225 + 384);
    if (v258)
      v259 = v258 + 168;
    else
      v259 = 0;
    v687.i64[0] = (*(uint64_t (**)(unsigned __int8 *, BOOL, _QWORD, _QWORD, uint64_t, uint64_t, BOOL, uint64_t *, _QWORD))(*(_QWORD *)v257 + 32))(v257, v656, *(unsigned int *)v659, 0, v259, 1, *(_QWORD *)&v641 != *(_QWORD *)&v653, *v660, 0);
    md::generateStrokeRenderItem<md::VenueTileData,md::Stroke1StyleProperties>(ggl::CommandBuffer *,md::PolygonRenderResources &,md::PolygonLayoutCharacteristics const&,md::PolygonGroupLayoutInfo<md::VenueTileData> const&,md::PolygonConfiguration const&,md::PolygonBlendingConfiguration const&,md::PolygonBlendingConfiguration const&,std::function<BOOL ()(unsigned long long)>,md::PolygonLayoutCharacteristics::StrokeState,md::PolygonRenderDepthType)::{lambda(ggl::RenderItem const&)#1}::operator()(v681, (uint64_t)v685);
    if (v255)
    {
      if (v657[0])
        v260 = v657[1];
      else
        v260 = 0;
      v261 = md::PolygonRenderResources::renderStateForBlendingEqual((md::PolygonRenderResources *)v635, v658, v260);
      if (v655)
      {
        v262 = (_QWORD *)md::animatingPolygonStrokePipelineSetup<md::VenueTileData,md::Stroke1StyleProperties>((uint64_t *)v635, v225, (uint64_t)&v646, &v641, &v637, v683);
        v263 = v262;
        v264 = *(_QWORD *)(v635 + 64);
        v265 = *(std::__shared_weak_count **)(v635 + 72);
        if (v265)
        {
          v266 = (unint64_t *)&v265->__shared_owners_;
          do
            v267 = __ldxr(v266);
          while (__stxr(v267 + 1, v266));
        }
        if (v264 && **(_QWORD **)(v264 + 40) == v262[1])
        {
          v296 = v262[2];
          if (v296 && v296 != v264)
            ggl::PipelineSetup::resetData((uint64_t)v262);
          if (v265)
          {
            v297 = (unint64_t *)&v265->__shared_owners_;
            do
              v298 = __ldxr(v297);
            while (__stxr(v298 + 1, v297));
          }
          v268 = (std::__shared_weak_count *)v263[3];
          v263[2] = v264;
          v263[3] = v265;
          if (v268)
          {
            v299 = (unint64_t *)&v268->__shared_owners_;
            do
              v270 = __ldaxr(v299);
            while (__stlxr(v270 - 1, v299));
            goto LABEL_443;
          }
        }
        else
        {
          v268 = (std::__shared_weak_count *)v262[3];
          v262[2] = 0;
          v262[3] = 0;
          if (v268)
          {
            v269 = (unint64_t *)&v268->__shared_owners_;
            do
              v270 = __ldaxr(v269);
            while (__stlxr(v270 - 1, v269));
LABEL_443:
            if (!v270)
            {
              ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
              std::__shared_weak_count::__release_weak(v268);
            }
          }
        }
        if (v265)
        {
          v300 = (unint64_t *)&v265->__shared_owners_;
          do
            v301 = __ldaxr(v300);
          while (__stlxr(v301 - 1, v300));
LABEL_463:
          if (!v301)
          {
            ((void (*)(std::__shared_weak_count *))v265->__on_zero_shared)(v265);
            std::__shared_weak_count::__release_weak(v265);
          }
        }
        goto LABEL_465;
      }
      v271 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(v635 + 176));
      v272 = *(_QWORD **)(v271 + 64);
      v273 = v646;
      *v272 = v646;
      v272[1] = 0;
      v274 = *(_QWORD **)(v271 + 160);
      v275 = *((_QWORD *)&v646 + 1);
      if (*((_QWORD *)&v646 + 1))
      {
        v276 = (unint64_t *)(*((_QWORD *)&v646 + 1) + 8);
        do
          v277 = __ldxr(v276);
        while (__stxr(v277 + 1, v276));
      }
      v278 = (std::__shared_weak_count *)v274[1];
      *v274 = v273;
      v274[1] = v275;
      if (v278)
      {
        v279 = (unint64_t *)&v278->__shared_owners_;
        do
          v280 = __ldaxr(v279);
        while (__stlxr(v280 - 1, v279));
        if (!v280)
        {
          ((void (*)(std::__shared_weak_count *))v278->__on_zero_shared)(v278);
          std::__shared_weak_count::__release_weak(v278);
        }
      }
      v281 = *(_QWORD *)(v271 + 64);
      *(_QWORD *)(v281 + 24) = 0;
      v282 = v648;
      *(_QWORD *)(v281 + 16) = v648;
      v283 = *(_QWORD *)(v271 + 160);
      v284 = *((_QWORD *)&v648 + 1);
      if (*((_QWORD *)&v648 + 1))
      {
        v285 = (unint64_t *)(*((_QWORD *)&v648 + 1) + 8);
        do
          v286 = __ldxr(v285);
        while (__stxr(v286 + 1, v285));
      }
      v287 = *(std::__shared_weak_count **)(v283 + 24);
      *(_QWORD *)(v283 + 16) = v282;
      *(_QWORD *)(v283 + 24) = v284;
      if (v287)
      {
        v288 = (unint64_t *)&v287->__shared_owners_;
        do
          v289 = __ldaxr(v288);
        while (__stlxr(v289 - 1, v288));
        if (!v289)
        {
          ((void (*)(std::__shared_weak_count *))v287->__on_zero_shared)(v287);
          std::__shared_weak_count::__release_weak(v287);
        }
      }
      **(_QWORD **)(v271 + 96) = v654;
      *(float32x2_t *)(*(_QWORD *)(v271 + 96) + 8) = v641;
      if (md::writeSourceConstants<md::VenueTileData,md::Stroke1StyleProperties>(v225, (uint64_t)&v646, &v641, *(_QWORD *)(*(_QWORD *)(v271 + 64) + 32), v683))v263 = (_QWORD *)v271;
      else
        v263 = 0;
      v290 = *(_QWORD *)(v635 + 16);
      v265 = *(std::__shared_weak_count **)(v635 + 24);
      if (v265)
      {
        v291 = (unint64_t *)&v265->__shared_owners_;
        do
          v292 = __ldxr(v291);
        while (__stxr(v292 + 1, v291));
      }
      if (v290 && **(_QWORD **)(v290 + 40) == v263[1])
      {
        v302 = v263[2];
        if (v302 && v302 != v290)
          ggl::PipelineSetup::resetData((uint64_t)v263);
        if (v265)
        {
          v303 = (unint64_t *)&v265->__shared_owners_;
          do
            v304 = __ldxr(v303);
          while (__stxr(v304 + 1, v303));
        }
        v293 = (std::__shared_weak_count *)v263[3];
        v263[2] = v290;
        v263[3] = v265;
        if (v293)
        {
          v305 = (unint64_t *)&v293->__shared_owners_;
          do
            v295 = __ldaxr(v305);
          while (__stlxr(v295 - 1, v305));
          goto LABEL_458;
        }
      }
      else
      {
        v293 = (std::__shared_weak_count *)v263[3];
        v263[2] = 0;
        v263[3] = 0;
        if (v293)
        {
          v294 = (unint64_t *)&v293->__shared_owners_;
          do
            v295 = __ldaxr(v294);
          while (__stlxr(v295 - 1, v294));
LABEL_458:
          if (!v295)
          {
            ((void (*)(std::__shared_weak_count *))v293->__on_zero_shared)(v293);
            std::__shared_weak_count::__release_weak(v293);
          }
        }
      }
      if (v265)
      {
        v306 = (unint64_t *)&v265->__shared_owners_;
        do
          v301 = __ldaxr(v306);
        while (__stlxr(v301 - 1, v306));
        goto LABEL_463;
      }
LABEL_465:
      v686.i32[2] = v658;
      *(_QWORD *)&v685[24] = v261;
      v686.i64[0] = (uint64_t)v263;
      md::generateStrokeRenderItem<md::VenueTileData,md::Stroke1StyleProperties>(ggl::CommandBuffer *,md::PolygonRenderResources &,md::PolygonLayoutCharacteristics const&,md::PolygonGroupLayoutInfo<md::VenueTileData> const&,md::PolygonConfiguration const&,md::PolygonBlendingConfiguration const&,md::PolygonBlendingConfiguration const&,std::function<BOOL ()(unsigned long long)>,md::PolygonLayoutCharacteristics::StrokeState,md::PolygonRenderDepthType)::{lambda(ggl::RenderItem const&)#1}::operator()(v681, (uint64_t)v685);
    }
  }
  else
  {
    v225 = v636;
    v235 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(v635 + 176));
    v236 = *(_QWORD **)(v235 + 64);
    v237 = v646;
    *v236 = v646;
    v236[1] = 0;
    v238 = *(_QWORD **)(v235 + 160);
    v239 = *((_QWORD *)&v646 + 1);
    if (*((_QWORD *)&v646 + 1))
    {
      v240 = (unint64_t *)(*((_QWORD *)&v646 + 1) + 8);
      do
        v241 = __ldxr(v240);
      while (__stxr(v241 + 1, v240));
    }
    v242 = (std::__shared_weak_count *)v238[1];
    *v238 = v237;
    v238[1] = v239;
    if (v242)
    {
      v243 = (unint64_t *)&v242->__shared_owners_;
      do
        v244 = __ldaxr(v243);
      while (__stlxr(v244 - 1, v243));
      if (!v244)
      {
        ((void (*)(std::__shared_weak_count *))v242->__on_zero_shared)(v242);
        std::__shared_weak_count::__release_weak(v242);
      }
    }
    v245 = *(_QWORD *)(v235 + 64);
    *(_QWORD *)(v245 + 24) = 0;
    v246 = v648;
    *(_QWORD *)(v245 + 16) = v648;
    v247 = *(_QWORD *)(v235 + 160);
    v248 = *((_QWORD *)&v648 + 1);
    if (*((_QWORD *)&v648 + 1))
    {
      v249 = (unint64_t *)(*((_QWORD *)&v648 + 1) + 8);
      do
        v250 = __ldxr(v249);
      while (__stxr(v250 + 1, v249));
    }
    v251 = *(std::__shared_weak_count **)(v247 + 24);
    *(_QWORD *)(v247 + 16) = v246;
    *(_QWORD *)(v247 + 24) = v248;
    if (v251)
    {
      v252 = (unint64_t *)&v251->__shared_owners_;
      do
        v253 = __ldaxr(v252);
      while (__stlxr(v253 - 1, v252));
      if (!v253)
      {
        ((void (*)(std::__shared_weak_count *))v251->__on_zero_shared)(v251);
        std::__shared_weak_count::__release_weak(v251);
      }
    }
    **(_QWORD **)(v235 + 96) = v654;
    *(float32x2_t *)(*(_QWORD *)(v235 + 96) + 8) = v641;
    if (md::writeSourceConstants<md::VenueTileData,md::Stroke1StyleProperties>(v636, (uint64_t)&v646, &v641, *(_QWORD *)(*(_QWORD *)(v235 + 64) + 32), v683))
    {
      *(_QWORD *)v681 = v636;
      *(_QWORD *)&v681[8] = v635;
      *(_QWORD *)&v681[16] = &v676;
      *(_QWORD *)&v681[24] = v632;
      goto LABEL_383;
    }
  }
LABEL_466:
  v307 = v678;
  if (v678 == &v676)
  {
    v308 = 4;
    v307 = &v676;
LABEL_470:
    (*(void (**)(void))(*(_QWORD *)v307 + 8 * v308))();
  }
  else if (v678)
  {
    v308 = 5;
    goto LABEL_470;
  }
  v309 = *v660;
  if (v660[1] == *v660)
    goto LABEL_616;
  v310 = 0;
  v311 = 0;
  v312 = fminf(fmaxf(*(float *)(v225 + 48), 0.0), 23.0);
  while (2)
  {
    v313 = *(_OWORD *)&v309[2 * v310];
    *(_OWORD *)v681 = v313;
    v314 = (std::__shared_weak_count *)*((_QWORD *)&v313 + 1);
    if (*((_QWORD *)&v313 + 1))
    {
      v315 = (unint64_t *)(*((_QWORD *)&v313 + 1) + 8);
      do
        v316 = __ldxr(v315);
      while (__stxr(v316 + 1, v315));
      *(_OWORD *)v685 = v313;
      do
        v317 = __ldxr(v315);
      while (__stxr(v317 + 1, v315));
      v318 = v313;
    }
    else
    {
      v318 = v313;
      *(_OWORD *)v685 = (unint64_t)v313;
    }
    *(_OWORD *)&v685[16] = 0uLL;
    v686.i8[0] = 0;
    if (v318)
      LODWORD(v318) = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v318 + 48))(v318, &v685[16]);
    v686.i8[0] = v318;
    if (v314)
    {
      v319 = (unint64_t *)&v314->__shared_owners_;
      do
        v320 = __ldaxr(v319);
      while (__stlxr(v320 - 1, v319));
      if (!v320)
      {
        ((void (*)(std::__shared_weak_count *))v314->__on_zero_shared)(v314);
        std::__shared_weak_count::__release_weak(v314);
      }
      LODWORD(v318) = v686.u8[0];
    }
    if (!(_DWORD)v318)
    {
      gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)v685);
      goto LABEL_474;
    }
    v321 = *(_QWORD *)(*(_QWORD *)v685 + 24);
    v322 = *(float **)v321;
    if (*(_QWORD *)v321
      && (v323 = *v322, LODWORD(v322) = *v322 == 1.0, *(_BYTE *)(v321 + 10))
      && (v323 != 0.0 ? (v324 = v323 == 1.0) : (v324 = 1), !v324)
      || (v325 = *(unsigned __int8 *)(v321 + v322 + 11), v323 = 0.0, v325 == 2))
    {
      v681[0] = 1;
      LOBYTE(v683[0]) = 1;
      gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v321, 0x194u, 0, v681, v312);
      v327 = v326;
      gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v321, 0x194u, 1u, (BOOL *)v683, v312);
      v329 = v327 + (float)((float)(v328 - v327) * v323);
    }
    else
    {
      gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(*(_QWORD *)(*(_QWORD *)v685 + 24), 0x194u, v325, 0, v312);
      v329 = v330;
    }
    gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)v685);
    if (v329 <= 0.0)
    {
LABEL_474:
      v310 = ++v311;
      v309 = *v660;
      if (v311 >= (unint64_t)(((char *)v660[1] - (char *)*v660) >> 4))
        goto LABEL_616;
      continue;
    }
    break;
  }
  v331 = (uint64_t)v675;
  if (!v675)
    goto LABEL_505;
  if (v675 == v674)
  {
    v684 = v683;
    (*(void (**)(_QWORD *, _QWORD *))(v674[0] + 24))(v674, v683);
  }
  else
  {
    v331 = (*(uint64_t (**)(void))(*v675 + 16))();
LABEL_505:
    v684 = (_QWORD *)v331;
  }
  v665 = 0;
  if (v655)
  {
    v225 = v636;
    v332 = md::animatingPolygonStrokePipelineSetup<md::VenueTileData,md::Stroke2StyleProperties>((uint64_t *)v635, v636, (uint64_t *)&v646, &v641, &v637, &v665);
    *(_QWORD *)v681 = v636;
    *(_QWORD *)&v681[8] = v635;
    *(_QWORD *)&v681[16] = v683;
    *(_QWORD *)&v681[24] = v632;
    if (!v332)
      goto LABEL_611;
LABEL_528:
    v351 = v657[1];
    v352 = v665;
    if (v665)
    {
      if (v657[0])
      {
        v353 = md::PolygonRenderResources::renderStateForBlendingEqual((md::PolygonRenderResources *)v635, v657[1], v658);
      }
      else
      {
        v353 = v635 + 1088;
        v351 = v658;
      }
      v354 = a7;
    }
    else
    {
      v354 = a7;
      v353 = *(_QWORD *)(v635 + 8 * (a7[8] | (2 * v657[0]) | (16 * v233)) + 272);
    }
    *(_QWORD *)v685 = &off_1E42B59B0;
    *(_QWORD *)&v685[16] = "";
    v688 = 0u;
    v689 = 0u;
    v690 = vdupq_n_s64(1uLL);
    v691 = 0;
    v687.i32[2] = 1065353216;
    v686.i32[2] = v351;
    *(_QWORD *)&v685[24] = v353;
    v686.i64[0] = v332;
    v355 = *(_QWORD *)(*(_QWORD *)v225 + 384);
    if (v355)
      v356 = v355 + 168;
    else
      v356 = 0;
    v687.i64[0] = (*(uint64_t (**)(unsigned __int8 *, BOOL, _QWORD, _QWORD, uint64_t, uint64_t, BOOL, uint64_t *, _QWORD))(*(_QWORD *)v354 + 32))(v354, v656, *(unsigned int *)v659, 0, v356, 2, *(_QWORD *)&v641 != *(_QWORD *)&v653, *v660, 0);
    md::generateStrokeRenderItem<md::VenueTileData,md::Stroke2StyleProperties>(ggl::CommandBuffer *,md::PolygonRenderResources &,md::PolygonLayoutCharacteristics const&,md::PolygonGroupLayoutInfo<md::VenueTileData> const&,md::PolygonConfiguration const&,md::PolygonBlendingConfiguration const&,md::PolygonBlendingConfiguration const&,std::function<BOOL ()(unsigned long long)>,md::PolygonLayoutCharacteristics::StrokeState,md::PolygonRenderDepthType)::{lambda(ggl::RenderItem const&)#1}::operator()(v681, (uint64_t)v685);
    if (v352)
    {
      if (v657[0])
        v357 = v657[1];
      else
        v357 = 0;
      v358 = md::PolygonRenderResources::renderStateForBlendingEqual((md::PolygonRenderResources *)v635, v658, v357);
      if (v655)
      {
        v359 = (_QWORD *)md::animatingPolygonStrokePipelineSetup<md::VenueTileData,md::Stroke2StyleProperties>((uint64_t *)v635, v225, (uint64_t *)&v646, &v641, &v637, &v665);
        v360 = v359;
        v361 = *(_QWORD *)(v635 + 64);
        v362 = *(std::__shared_weak_count **)(v635 + 72);
        if (v362)
        {
          v363 = (unint64_t *)&v362->__shared_owners_;
          do
            v364 = __ldxr(v363);
          while (__stxr(v364 + 1, v363));
        }
        if (v361 && **(_QWORD **)(v361 + 40) == v359[1])
        {
          v393 = v359[2];
          if (v393 && v393 != v361)
            ggl::PipelineSetup::resetData((uint64_t)v359);
          if (v362)
          {
            v394 = (unint64_t *)&v362->__shared_owners_;
            do
              v395 = __ldxr(v394);
            while (__stxr(v395 + 1, v394));
          }
          v365 = (std::__shared_weak_count *)v360[3];
          v360[2] = v361;
          v360[3] = v362;
          if (v365)
          {
            v396 = (unint64_t *)&v365->__shared_owners_;
            do
              v367 = __ldaxr(v396);
            while (__stlxr(v367 - 1, v396));
            goto LABEL_588;
          }
        }
        else
        {
          v365 = (std::__shared_weak_count *)v359[3];
          v359[2] = 0;
          v359[3] = 0;
          if (v365)
          {
            v366 = (unint64_t *)&v365->__shared_owners_;
            do
              v367 = __ldaxr(v366);
            while (__stlxr(v367 - 1, v366));
LABEL_588:
            if (!v367)
            {
              ((void (*)(std::__shared_weak_count *))v365->__on_zero_shared)(v365);
              std::__shared_weak_count::__release_weak(v365);
            }
          }
        }
        if (v362)
        {
          v397 = (unint64_t *)&v362->__shared_owners_;
          do
            v398 = __ldaxr(v397);
          while (__stlxr(v398 - 1, v397));
LABEL_608:
          if (!v398)
          {
            ((void (*)(std::__shared_weak_count *))v362->__on_zero_shared)(v362);
            std::__shared_weak_count::__release_weak(v362);
          }
        }
        goto LABEL_610;
      }
      v368 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(v635 + 176));
      v369 = *(_QWORD **)(v368 + 64);
      v370 = v646;
      *v369 = v646;
      v369[1] = 0;
      v371 = *(_QWORD **)(v368 + 160);
      v372 = *((_QWORD *)&v646 + 1);
      if (*((_QWORD *)&v646 + 1))
      {
        v373 = (unint64_t *)(*((_QWORD *)&v646 + 1) + 8);
        do
          v374 = __ldxr(v373);
        while (__stxr(v374 + 1, v373));
      }
      v375 = (std::__shared_weak_count *)v371[1];
      *v371 = v370;
      v371[1] = v372;
      if (v375)
      {
        v376 = (unint64_t *)&v375->__shared_owners_;
        do
          v377 = __ldaxr(v376);
        while (__stlxr(v377 - 1, v376));
        if (!v377)
        {
          ((void (*)(std::__shared_weak_count *))v375->__on_zero_shared)(v375);
          std::__shared_weak_count::__release_weak(v375);
        }
      }
      v378 = *(_QWORD *)(v368 + 64);
      *(_QWORD *)(v378 + 24) = 0;
      v379 = v648;
      *(_QWORD *)(v378 + 16) = v648;
      v380 = *(_QWORD *)(v368 + 160);
      v381 = *((_QWORD *)&v648 + 1);
      if (*((_QWORD *)&v648 + 1))
      {
        v382 = (unint64_t *)(*((_QWORD *)&v648 + 1) + 8);
        do
          v383 = __ldxr(v382);
        while (__stxr(v383 + 1, v382));
      }
      v384 = *(std::__shared_weak_count **)(v380 + 24);
      *(_QWORD *)(v380 + 16) = v379;
      *(_QWORD *)(v380 + 24) = v381;
      if (v384)
      {
        v385 = (unint64_t *)&v384->__shared_owners_;
        do
          v386 = __ldaxr(v385);
        while (__stlxr(v386 - 1, v385));
        if (!v386)
        {
          ((void (*)(std::__shared_weak_count *))v384->__on_zero_shared)(v384);
          std::__shared_weak_count::__release_weak(v384);
        }
      }
      **(_QWORD **)(v368 + 96) = v654;
      *(float32x2_t *)(*(_QWORD *)(v368 + 96) + 8) = v641;
      if (md::writeSourceConstants<md::VenueTileData,md::Stroke2StyleProperties>(v225, (uint64_t)&v646, *(_QWORD *)(*(_QWORD *)(v368 + 64) + 32), &v665))v360 = (_QWORD *)v368;
      else
        v360 = 0;
      v387 = *(_QWORD *)(v635 + 16);
      v362 = *(std::__shared_weak_count **)(v635 + 24);
      if (v362)
      {
        v388 = (unint64_t *)&v362->__shared_owners_;
        do
          v389 = __ldxr(v388);
        while (__stxr(v389 + 1, v388));
      }
      if (v387 && **(_QWORD **)(v387 + 40) == v360[1])
      {
        v399 = v360[2];
        if (v399 && v399 != v387)
          ggl::PipelineSetup::resetData((uint64_t)v360);
        if (v362)
        {
          v400 = (unint64_t *)&v362->__shared_owners_;
          do
            v401 = __ldxr(v400);
          while (__stxr(v401 + 1, v400));
        }
        v390 = (std::__shared_weak_count *)v360[3];
        v360[2] = v387;
        v360[3] = v362;
        if (v390)
        {
          v402 = (unint64_t *)&v390->__shared_owners_;
          do
            v392 = __ldaxr(v402);
          while (__stlxr(v392 - 1, v402));
          goto LABEL_603;
        }
      }
      else
      {
        v390 = (std::__shared_weak_count *)v360[3];
        v360[2] = 0;
        v360[3] = 0;
        if (v390)
        {
          v391 = (unint64_t *)&v390->__shared_owners_;
          do
            v392 = __ldaxr(v391);
          while (__stlxr(v392 - 1, v391));
LABEL_603:
          if (!v392)
          {
            ((void (*)(std::__shared_weak_count *))v390->__on_zero_shared)(v390);
            std::__shared_weak_count::__release_weak(v390);
          }
        }
      }
      if (v362)
      {
        v403 = (unint64_t *)&v362->__shared_owners_;
        do
          v398 = __ldaxr(v403);
        while (__stlxr(v398 - 1, v403));
        goto LABEL_608;
      }
LABEL_610:
      v686.i32[2] = v658;
      *(_QWORD *)&v685[24] = v358;
      v686.i64[0] = (uint64_t)v360;
      md::generateStrokeRenderItem<md::VenueTileData,md::Stroke2StyleProperties>(ggl::CommandBuffer *,md::PolygonRenderResources &,md::PolygonLayoutCharacteristics const&,md::PolygonGroupLayoutInfo<md::VenueTileData> const&,md::PolygonConfiguration const&,md::PolygonBlendingConfiguration const&,md::PolygonBlendingConfiguration const&,std::function<BOOL ()(unsigned long long)>,md::PolygonLayoutCharacteristics::StrokeState,md::PolygonRenderDepthType)::{lambda(ggl::RenderItem const&)#1}::operator()(v681, (uint64_t)v685);
    }
  }
  else
  {
    v225 = v636;
    v332 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(v635 + 176));
    v333 = *(_QWORD **)(v332 + 64);
    v334 = v646;
    *v333 = v646;
    v333[1] = 0;
    v335 = *(_QWORD **)(v332 + 160);
    v336 = *((_QWORD *)&v646 + 1);
    if (*((_QWORD *)&v646 + 1))
    {
      v337 = (unint64_t *)(*((_QWORD *)&v646 + 1) + 8);
      do
        v338 = __ldxr(v337);
      while (__stxr(v338 + 1, v337));
    }
    v339 = (std::__shared_weak_count *)v335[1];
    *v335 = v334;
    v335[1] = v336;
    if (v339)
    {
      v340 = (unint64_t *)&v339->__shared_owners_;
      do
        v341 = __ldaxr(v340);
      while (__stlxr(v341 - 1, v340));
      if (!v341)
      {
        ((void (*)(std::__shared_weak_count *))v339->__on_zero_shared)(v339);
        std::__shared_weak_count::__release_weak(v339);
      }
    }
    v342 = *(_QWORD *)(v332 + 64);
    *(_QWORD *)(v342 + 24) = 0;
    v343 = v648;
    *(_QWORD *)(v342 + 16) = v648;
    v344 = *(_QWORD *)(v332 + 160);
    v345 = *((_QWORD *)&v648 + 1);
    if (*((_QWORD *)&v648 + 1))
    {
      v346 = (unint64_t *)(*((_QWORD *)&v648 + 1) + 8);
      do
        v347 = __ldxr(v346);
      while (__stxr(v347 + 1, v346));
    }
    v348 = *(std::__shared_weak_count **)(v344 + 24);
    *(_QWORD *)(v344 + 16) = v343;
    *(_QWORD *)(v344 + 24) = v345;
    if (v348)
    {
      v349 = (unint64_t *)&v348->__shared_owners_;
      do
        v350 = __ldaxr(v349);
      while (__stlxr(v350 - 1, v349));
      if (!v350)
      {
        ((void (*)(std::__shared_weak_count *))v348->__on_zero_shared)(v348);
        std::__shared_weak_count::__release_weak(v348);
      }
    }
    **(_QWORD **)(v332 + 96) = v654;
    *(float32x2_t *)(*(_QWORD *)(v332 + 96) + 8) = v641;
    if (md::writeSourceConstants<md::VenueTileData,md::Stroke2StyleProperties>(v636, (uint64_t)&v646, *(_QWORD *)(*(_QWORD *)(v332 + 64) + 32), &v665))
    {
      *(_QWORD *)v681 = v636;
      *(_QWORD *)&v681[8] = v635;
      *(_QWORD *)&v681[16] = v683;
      *(_QWORD *)&v681[24] = v632;
      goto LABEL_528;
    }
  }
LABEL_611:
  v404 = v684;
  if (v684 == v683)
  {
    v405 = 4;
    v404 = v683;
LABEL_615:
    (*(void (**)(void))(*v404 + 8 * v405))();
  }
  else if (v684)
  {
    v405 = 5;
    goto LABEL_615;
  }
LABEL_616:
  v406 = v675;
  if (v675 == v674)
  {
    v407 = 4;
    v406 = v674;
LABEL_620:
    (*(void (**)(void))(*v406 + 8 * v407))();
  }
  else if (v675)
  {
    v407 = 5;
    goto LABEL_620;
  }
  if (v661)
  {
    v408 = a10[3];
    if (!v408)
      goto LABEL_625;
    if ((_QWORD *)v408 == a10)
    {
      v673 = v672;
      (*(void (**)(_QWORD *, _QWORD *))(*a10 + 24))(a10, v672);
    }
    else
    {
      v408 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v408 + 16))(v408);
LABEL_625:
      v673 = (_QWORD *)v408;
    }
    v409 = v225;
    v410 = *(unsigned __int8 *)(v225 + 96);
    v411 = a7[8];
    (*(void (**)(_QWORD *__return_ptr, unsigned __int8 *, _QWORD))(*(_QWORD *)a7 + 88))(v683, a7, *(_QWORD *)(v409 + 80));
    if (v411)
      v412 = 1;
    else
      v412 = v410 == 0;
    if (v412)
      v413 = 0;
    else
      v413 = 2;
    if (LOBYTE(v683[0]))
      v413 = BYTE1(v683[0]);
    v624 = *(_QWORD *)(v635 + 8 * ((2 * v657[0]) | (8 * !v656) | (16 * v413) | v656) + 272);
    if (v655)
      v414 = md::animatingPolygonFillPipelineSetup<md::VenueTileData>((uint64_t *)v635, v636, (uint64_t *)&v646, (uint64_t)&v646, &v641, &v637, 0);
    else
      v414 = md::polygonFillPipelineSetup<md::VenueTileData>(*(_QWORD *)(v635 + 208), *(_QWORD *)(v635 + 216), v636, (uint64_t *)&v646, (uint64_t)&v646, &v641, 0);
    v415 = v414;
    v225 = v636;
    if (v414)
    {
      memset(&v681[4], 0, 32);
      v416 = *(_QWORD *)(*(_QWORD *)v636 + 384);
      if (v416)
        v417 = v416 + 168;
      else
        v417 = 0;
      v418 = (*(uint64_t (**)(unsigned __int8 *, BOOL, _QWORD, _QWORD, uint64_t, _QWORD, BOOL, uint64_t *, _QWORD))(*(_QWORD *)a7 + 32))(a7, v656, *(unsigned int *)v659, 0, v417, 0, *(_QWORD *)&v641 != *(_QWORD *)&v653, *v660, 0);
      v419 = v657[1];
      v420 = objc_msgSend(*(id *)(v636 + 80), "fillMeshes");
      v421 = *(uint64_t **)v420;
      v422 = *(uint64_t **)(v420 + 8);
      if (*(uint64_t **)v420 != v422)
      {
        v423 = 0;
        v619 = vdupq_n_s64(1uLL);
        while (1)
        {
          v424 = *(id *)(v225 + 80);
          v425 = *(unsigned int *)(v225 + 100);
          v426 = (uint64_t)v673;
          if (!v673)
            goto LABEL_647;
          if (v673 != v672)
            break;
          v678 = &v676;
          (*(void (**)(_QWORD *, __int128 *))(v672[0] + 24))(v672, &v676);
LABEL_649:
          v427 = (uint64_t *)objc_msgSend(v424, "commitRangesToFillRenderItemBatcher:forMeshAtIndex:cullingMask:featureIdPredicate:", v635 + 984, v423, v425, &v676);
          v428 = v678;
          if (v678 == &v676)
          {
            v428 = &v676;
            v429 = 4;
            goto LABEL_653;
          }
          if (v678)
          {
            v429 = 5;
LABEL_653:
            (*(void (**)(void))(*(_QWORD *)v428 + 8 * v429))();
          }

          v430 = *v421;
          *(_OWORD *)v685 = *(_OWORD *)v681;
          *(_OWORD *)&v685[16] = *(_OWORD *)&v681[16];
          v686.i32[0] = *(_DWORD *)&v681[32];
          v431 = *(_QWORD **)(v635 + 1072);
          v432 = v431[1];
          if (v432 == *(_QWORD *)(v635 + 1080))
          {
            v431 = (_QWORD *)*v431;
            if (!v431)
            {
              v431 = malloc_type_malloc(120 * v432 + 16, 0xB644C221uLL);
              *v431 = 0;
              v431[1] = 0;
              **(_QWORD **)(v635 + 1072) = v431;
            }
            *(_QWORD *)(v635 + 1072) = v431;
            v432 = v431[1];
          }
          v433 = &v431[15 * v432];
          v431[1] = v432 + 1;
          v433[2] = &off_1E42B59B0;
          v433 += 2;
          v433[2] = "";
          v433[3] = v624;
          v433[4] = v415;
          *((_DWORD *)v433 + 10) = v419;
          v433[6] = v418;
          *((_DWORD *)v433 + 14) = 1065353216;
          v434 = v686.i32[0];
          v435 = *(_OWORD *)&v685[16];
          *(_OWORD *)((char *)v433 + 60) = *(_OWORD *)v685;
          *((_DWORD *)v433 + 23) = v434;
          *(_OWORD *)((char *)v433 + 76) = v435;
          *((int64x2_t *)v433 + 6) = v619;
          v433[14] = 0;
          v433[8] = v430;
          v436 = *v427;
          v433[11] = *v427;
          v433[12] = (v427[1] - v436) >> 4;
          ggl::CommandBuffer::pushRenderItem((uint64_t)v632, (ggl::RenderItem *)v433);
          v225 = v636;
          ++v423;
          v421 += 2;
          if (v421 == v422)
            goto LABEL_659;
        }
        v426 = (*(uint64_t (**)(void))(*v673 + 16))();
LABEL_647:
        v678 = (__int128 *)v426;
        goto LABEL_649;
      }
LABEL_659:
      v227 = (uint64_t *)v635;
    }
    v437 = v673;
    if (v673 == v672)
    {
      v438 = 4;
      v437 = v672;
LABEL_664:
      (*(void (**)(void))(*v437 + 8 * v438))();
    }
    else if (v673)
    {
      v438 = 5;
      goto LABEL_664;
    }
    v226.n128_u32[0] = *(_DWORD *)&v659[4];
    if (*(float *)&v659[4] > 0.00000011921)
    {
      v439 = a10[3];
      if (!v439)
        goto LABEL_669;
      if ((_QWORD *)v439 == a10)
      {
        v671 = v670;
        (*(void (**)(_QWORD *, _QWORD *, float))(*a10 + 24))(a10, v670, *(float *)&v659[4]);
      }
      else
      {
        v439 = (*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v439 + 16))(v439, *(float *)&v659[4]);
LABEL_669:
        v671 = (_QWORD *)v439;
      }
      v625 = v227[(((2 * v657[0]) | (8 * !v656)) | 0x21u) + 34];
      if (v655)
        v440 = md::animatingPolygonFillPipelineSetup<md::VenueTileData>(v227, v225, (uint64_t *)&v647, (uint64_t)&v646, &v641, &v637, 1);
      else
        v440 = md::polygonFillPipelineSetup<md::VenueTileData>(v227[26], v227[27], v225, (uint64_t *)&v647, (uint64_t)&v646, &v641, 1);
      v441 = v440;
      memset(&v681[4], 0, 32);
      v442 = v657[1];
      v443 = *(_QWORD *)(*(_QWORD *)v225 + 384);
      if (v443)
        v444 = v443 + 168;
      else
        v444 = 0;
      v445 = (*(uint64_t (**)(unsigned __int8 *, BOOL, _QWORD, uint64_t, uint64_t, _QWORD, BOOL, uint64_t *, _QWORD))(*(_QWORD *)a7 + 32))(a7, v656, *(unsigned int *)v659, 1, v444, 0, *(_QWORD *)&v641 != *(_QWORD *)&v653, *v660, 0);
      v446 = objc_msgSend(*(id *)(v225 + 80), "fillMeshes");
      v447 = *(uint64_t **)v446;
      v448 = *(uint64_t **)(v446 + 8);
      if (*(uint64_t **)v446 != v448)
      {
        v449 = 0;
        v620 = vdupq_n_s64(1uLL);
        while (1)
        {
          v450 = *(id *)(v225 + 80);
          v451 = *(unsigned int *)(v225 + 100);
          v452 = (uint64_t)v671;
          if (!v671)
            goto LABEL_682;
          if (v671 != v670)
            break;
          v678 = &v676;
          (*(void (**)(_QWORD *, __int128 *))(v670[0] + 24))(v670, &v676);
LABEL_684:
          v453 = (uint64_t *)objc_msgSend(v450, "commitRangesToFillRenderItemBatcher:forMeshAtIndex:cullingMask:featureIdPredicate:", v635 + 984, v449, v451, &v676);
          v454 = v678;
          if (v678 == &v676)
          {
            v454 = &v676;
            v455 = 4;
            goto LABEL_688;
          }
          if (v678)
          {
            v455 = 5;
LABEL_688:
            (*(void (**)(void))(*(_QWORD *)v454 + 8 * v455))();
          }

          v456 = *v447;
          *(_OWORD *)v685 = *(_OWORD *)v681;
          *(_OWORD *)&v685[16] = *(_OWORD *)&v681[16];
          v686.i32[0] = *(_DWORD *)&v681[32];
          v457 = *(_QWORD **)(v635 + 1072);
          v458 = v457[1];
          if (v458 == *(_QWORD *)(v635 + 1080))
          {
            v457 = (_QWORD *)*v457;
            if (!v457)
            {
              v457 = malloc_type_malloc(120 * v458 + 16, 0xB644C221uLL);
              *v457 = 0;
              v457[1] = 0;
              **(_QWORD **)(v635 + 1072) = v457;
            }
            *(_QWORD *)(v635 + 1072) = v457;
            v458 = v457[1];
          }
          v459 = &v457[15 * v458];
          v457[1] = v458 + 1;
          v459[2] = &off_1E42B59B0;
          v459 += 2;
          v459[2] = "";
          v459[3] = v625;
          v459[4] = v441;
          *((_DWORD *)v459 + 10) = v442;
          v459[6] = v445;
          *((_DWORD *)v459 + 14) = 1065353216;
          v460 = v686.i32[0];
          v461 = *(_OWORD *)&v685[16];
          *(_OWORD *)((char *)v459 + 60) = *(_OWORD *)v685;
          *((_DWORD *)v459 + 23) = v460;
          *(_OWORD *)((char *)v459 + 76) = v461;
          *((int64x2_t *)v459 + 6) = v620;
          v459[14] = 0;
          v459[8] = v456;
          v462 = *v453;
          v459[11] = *v453;
          v459[12] = (v453[1] - v462) >> 4;
          ggl::CommandBuffer::pushRenderItem((uint64_t)v632, (ggl::RenderItem *)v459);
          v225 = v636;
          ++v449;
          v447 += 2;
          if (v447 == v448)
            goto LABEL_694;
        }
        v452 = (*(uint64_t (**)(void))(*v671 + 16))();
LABEL_682:
        v678 = (__int128 *)v452;
        goto LABEL_684;
      }
LABEL_694:
      v463 = v671;
      if (v671 == v670)
      {
        v464 = 4;
        v463 = v670;
        v227 = (uint64_t *)v635;
LABEL_698:
        (*(void (**)(void))(*v463 + 8 * v464))();
      }
      else
      {
        v227 = (uint64_t *)v635;
        if (v671)
        {
          v464 = 5;
          goto LABEL_698;
        }
      }
    }
  }
LABEL_699:
  if (a5 && a7[52] && md::_maskTarget((uint64_t)&v646) == 1)
  {
    v465 = a10[3];
    if (!v465)
      goto LABEL_705;
    if ((_QWORD *)v465 == a10)
    {
      v669 = v668;
      (*(void (**)(_QWORD *, _QWORD *))(*a10 + 24))(a10, v668);
    }
    else
    {
      v465 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v465 + 16))(v465);
LABEL_705:
      v669 = (_QWORD *)v465;
    }
    v466 = ggl::FragmentedPool<ggl::RenderItem>::pop(v227[23]);
    v467 = *(_QWORD **)(v466 + 64);
    v468 = v646;
    *v467 = v646;
    v467[1] = 0;
    v469 = *(_QWORD **)(v466 + 160);
    v470 = *((_QWORD *)&v646 + 1);
    if (*((_QWORD *)&v646 + 1))
    {
      v471 = (unint64_t *)(*((_QWORD *)&v646 + 1) + 8);
      do
        v472 = __ldxr(v471);
      while (__stxr(v472 + 1, v471));
    }
    v473 = (std::__shared_weak_count *)v469[1];
    *v469 = v468;
    v469[1] = v470;
    if (v473)
    {
      v474 = (unint64_t *)&v473->__shared_owners_;
      do
        v475 = __ldaxr(v474);
      while (__stlxr(v475 - 1, v474));
      if (!v475)
      {
        ((void (*)(std::__shared_weak_count *))v473->__on_zero_shared)(v473);
        std::__shared_weak_count::__release_weak(v473);
      }
    }
    v476 = *(_QWORD *)(v466 + 64);
    *(_QWORD *)(v476 + 24) = 0;
    v477 = v648;
    *(_QWORD *)(v476 + 16) = v648;
    v478 = *(_QWORD *)(v466 + 160);
    v479 = *((_QWORD *)&v648 + 1);
    if (*((_QWORD *)&v648 + 1))
    {
      v480 = (unint64_t *)(*((_QWORD *)&v648 + 1) + 8);
      do
        v481 = __ldxr(v480);
      while (__stxr(v481 + 1, v480));
    }
    v482 = *(std::__shared_weak_count **)(v478 + 24);
    *(_QWORD *)(v478 + 16) = v477;
    *(_QWORD *)(v478 + 24) = v479;
    if (v482)
    {
      v483 = (unint64_t *)&v482->__shared_owners_;
      do
        v484 = __ldaxr(v483);
      while (__stlxr(v484 - 1, v483));
      if (!v484)
      {
        ((void (*)(std::__shared_weak_count *))v482->__on_zero_shared)(v482);
        std::__shared_weak_count::__release_weak(v482);
      }
    }
    **(_QWORD **)(v466 + 96) = v654;
    v485 = *(_QWORD *)(*(_QWORD *)(v466 + 64) + 32);
    *(_OWORD *)v685 = 0uLL;
    v486 = *(_QWORD *)(v485 + 8);
    *(_QWORD *)&v487 = 0;
    *((_QWORD *)&v487 + 1) = v485;
    v626 = v466;
    if (v486)
      v488 = *(_QWORD *)(v485 + 72);
    else
      v488 = 0;
    *(_OWORD *)v685 = v487;
    *(_QWORD *)&v685[16] = 0;
    *(_QWORD *)&v685[24] = v486;
    v686.i64[1] = v488;
    v686.i16[0] = 1;
    *(_OWORD *)v488 = v649;
    *(_OWORD *)(v488 + 16) = v650;
    *(float32x4_t *)(v488 + 32) = v651;
    *(float32x4_t *)(v488 + 48) = v652;
    *(_QWORD *)(v488 + 320) = 0;
    *(_QWORD *)(v488 + 328) = 0;
    *(_DWORD *)(v488 + 464) = *(_DWORD *)(v225 + 56);
    v489 = 1.0 / *(double *)(v225 + 64);
    *(float *)(v488 + 468) = v489;
    *(_DWORD *)(v488 + 472) = *(_DWORD *)&v659[12];
    v490 = *v660;
    if (v660[1] != *v660)
    {
      v491 = 0;
      v492 = 0;
      while (1)
      {
        v499 = *(_OWORD *)&v490[2 * v491];
        v676 = v499;
        v500 = (std::__shared_weak_count *)*((_QWORD *)&v499 + 1);
        if (*((_QWORD *)&v499 + 1))
        {
          v501 = (unint64_t *)(*((_QWORD *)&v499 + 1) + 8);
          do
            v502 = __ldxr(v501);
          while (__stxr(v502 + 1, v501));
          *(_OWORD *)v681 = v499;
          do
            v503 = __ldxr(v501);
          while (__stxr(v503 + 1, v501));
          v504 = v499;
        }
        else
        {
          v504 = v499;
          *(_OWORD *)v681 = (unint64_t)v499;
        }
        memset(&v681[16], 0, 17);
        if (v504)
          LODWORD(v504) = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v504 + 48))(v504, &v681[16]);
        v681[32] = v504;
        if (v500)
        {
          v505 = (unint64_t *)&v500->__shared_owners_;
          do
            v506 = __ldaxr(v505);
          while (__stlxr(v506 - 1, v505));
          if (!v506)
          {
            ((void (*)(std::__shared_weak_count *))v500->__on_zero_shared)(v500);
            std::__shared_weak_count::__release_weak(v500);
          }
          LODWORD(v504) = v681[32];
        }
        if ((_DWORD)v504)
        {
          v507 = *(_QWORD *)(*(_QWORD *)v681 + 24);
          v508 = fminf(fmaxf(*(float *)(v225 + 48), 0.0), 23.0);
          v509 = *(float **)v507;
          if (*(_QWORD *)v507
            && (v510 = *v509, LODWORD(v509) = *v509 == 1.0, *(_BYTE *)(v507 + 10))
            && (v510 != 0.0 ? (v511 = v510 == 1.0) : (v511 = 1), !v511)
            || (v512 = *(unsigned __int8 *)(v507 + v509 + 11), v510 = 0.0, v512 == 2))
          {
            LOBYTE(v676) = 1;
            LOBYTE(v683[0]) = 1;
            gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v507, 0x1D2u, 0, (BOOL *)&v676, v508);
            v514 = v513;
            gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v507, 0x1D2u, 1u, (BOOL *)v683, v508);
            v516 = v514 + (float)((float)(v515 - v514) * v510);
          }
          else
          {
            gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(*(_QWORD *)(*(_QWORD *)v681 + 24), 0x1D2u, v512, 0, v508);
            v516 = v517;
          }
        }
        else
        {
          v516 = 0.0;
        }
        LOBYTE(v518) = v659[16];
        if (!v681[32])
          goto LABEL_729;
        v519 = *(_QWORD *)(*(_QWORD *)v681 + 24);
        v520 = (int)*(float *)(v225 + 48) >= 0x17 ? 23 : (int)*(float *)(v225 + 48);
        v521 = *(float **)v519;
        if (!*(_QWORD *)v519)
          break;
        v522 = *v521;
        v523 = *v521 == 1.0;
        if (!*(_BYTE *)(v519 + 10))
          goto LABEL_778;
        if (v522 == 0.0 || v522 == 1.0)
          goto LABEL_778;
LABEL_779:
        if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(_QWORD *)(*(_QWORD *)v681 + 24), 0x1D3u, v520, 0) & 1) != 0)goto LABEL_782;
        v525 = 1;
LABEL_781:
        if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v519, 0x1D3u, v520, v525))
          goto LABEL_729;
LABEL_782:
        if (v521)
        {
          v526 = *v521;
          v527 = *v521 == 1.0;
          if (*(_BYTE *)(v519 + 10))
          {
            if (v526 != 0.0 && v526 != 1.0)
            {
LABEL_792:
              LOBYTE(v676) = 1;
              LOBYTE(v683[0]) = 1;
              v530 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v519, 0x1D3u, v520, 0, &v676);
              v531 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v519, 0x1D3u, v520, 1u, v683);
              if (v526 >= 1.0)
                LOBYTE(v518) = v531;
              else
                LOBYTE(v518) = v530;
              goto LABEL_728;
            }
          }
        }
        else
        {
          v527 = 0;
        }
        v529 = *(unsigned __int8 *)(v519 + v527 + 11);
        v526 = 0.0;
        if (v529 == 2)
          goto LABEL_792;
        v518 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v519, 0x1D3u, v520, v529, 0);
LABEL_728:
        v225 = v636;
LABEL_729:
        if (v518 == 1)
          v493 = 0.0;
        else
          v493 = 1.0;
        if (v518 == 1)
          v494 = -1.0;
        else
          v494 = 0.0;
        if (v518 == 2)
        {
          v493 = 0.5;
          v494 = -0.5;
        }
        v495 = v686.i64[1];
        v496 = v516 * 1.75 * *(double *)(v225 + 64);
        v497 = v686.i64[1] + 4 * v491;
        *(float *)(v497 + 336) = v493 * v496;
        *(float *)(v497 + 400) = v494 * v496;
        *(_DWORD *)(v495 + 476) = 0;
        v498 = v495 + 16 * v491;
        *(_QWORD *)(v498 + 64) = 0;
        *(_QWORD *)(v498 + 72) = 0;
        gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)v681);
        v491 = ++v492;
        v490 = *v660;
        if (v492 >= (unint64_t)(((char *)v660[1] - (char *)*v660) >> 4))
          goto LABEL_796;
      }
      v523 = 0;
LABEL_778:
      v525 = *(unsigned __int8 *)(v519 + v523 + 11);
      if (v525 != 2)
        goto LABEL_781;
      goto LABEL_779;
    }
LABEL_796:
    v532 = *(_OWORD *)&v685[16];
    if (*(_QWORD *)&v685[24] != *(_QWORD *)&v685[16])
    {
      v533 = *(_QWORD **)&v685[8];
      v534 = v686.u8[0];
      v535 = v686.u8[1];
      if (*(_QWORD *)v685 && *(_BYTE *)(*(_QWORD *)&v685[8] + 17) != 2)
        (*(void (**)(void))(**(_QWORD **)v685 + 64))();
      if (v534 && !v535)
      {
        v537 = v533[7];
        v536 = v533[8];
        if (v536 == v537)
          v537 = v533[10] - v533[9];
        if ((unint64_t)v532 < v537)
          v537 = v532;
        if (v536 <= *((_QWORD *)&v532 + 1))
          v536 = *((_QWORD *)&v532 + 1);
        if (v536 == v537)
          v536 = v537 + v533[10] - v533[9];
        v533[7] = v537;
        v533[8] = v536;
      }
    }
    v538 = *(_QWORD *)(v635 + 8 * (a7[8] | (2 * v657[0])) + 272);
    memset(&v681[4], 0, 32);
    v539 = *(char *)(v635 + 912);
    v540 = *(unsigned __int8 *)(v225 + 52);
    v541 = objc_msgSend(*(id *)(v225 + 80), "strokeMeshes");
    v542 = *(uint64_t **)v541;
    v543 = *(uint64_t **)(v541 + 8);
    if (*(uint64_t **)v541 != v543)
    {
      v544 = 0;
      v545 = v540 + v539;
      v621 = vdupq_n_s64(1uLL);
      while (1)
      {
        v546 = *(id *)(v225 + 80);
        v547 = *(unsigned int *)(v225 + 100);
        v548 = (uint64_t)v669;
        if (!v669)
          goto LABEL_816;
        if (v669 != v668)
          break;
        v678 = &v676;
        (*(void (**)(_QWORD *, __int128 *))(v668[0] + 24))(v668, &v676);
LABEL_818:
        v549 = (uint64_t *)objc_msgSend(v546, "commitRangesToStrokeRenderItemBatcher:forMeshAtIndex:cullingMask:featureIdPredicate:", v635 + 984, v544, v547, &v676);
        v550 = v678;
        if (v678 == &v676)
        {
          v550 = &v676;
          v551 = 4;
          goto LABEL_822;
        }
        if (v678)
        {
          v551 = 5;
LABEL_822:
          (*(void (**)(void))(*(_QWORD *)v550 + 8 * v551))();
        }

        v552 = *v542;
        *(_OWORD *)v685 = *(_OWORD *)v681;
        *(_OWORD *)&v685[16] = *(_OWORD *)&v681[16];
        v686.i32[0] = *(_DWORD *)&v681[32];
        v553 = *(_QWORD **)(v635 + 1072);
        v554 = v553[1];
        if (v554 == *(_QWORD *)(v635 + 1080))
        {
          v553 = (_QWORD *)*v553;
          if (!v553)
          {
            v553 = malloc_type_malloc(120 * v554 + 16, 0xB644C221uLL);
            *v553 = 0;
            v553[1] = 0;
            **(_QWORD **)(v635 + 1072) = v553;
          }
          *(_QWORD *)(v635 + 1072) = v553;
          v554 = v553[1];
        }
        v555 = &v553[15 * v554];
        v553[1] = v554 + 1;
        v555[2] = &off_1E42B59B0;
        v555 += 2;
        v555[2] = "";
        v555[3] = v538;
        v555[4] = v626;
        *((_DWORD *)v555 + 10) = v545;
        v555[6] = 0;
        *((_DWORD *)v555 + 14) = 1065353216;
        v556 = v686.i32[0];
        v557 = *(_OWORD *)&v685[16];
        *(_OWORD *)((char *)v555 + 60) = *(_OWORD *)v685;
        *((_DWORD *)v555 + 23) = v556;
        *(_OWORD *)((char *)v555 + 76) = v557;
        *((int64x2_t *)v555 + 6) = v621;
        v555[14] = 0;
        v555[8] = v552;
        v558 = *v549;
        v555[11] = *v549;
        v555[12] = (v549[1] - v558) >> 4;
        ggl::CommandBuffer::pushRenderItem(a5, (ggl::RenderItem *)v555);
        v225 = v636;
        ++v544;
        v542 += 2;
        if (v542 == v543)
          goto LABEL_828;
      }
      v548 = (*(uint64_t (**)(void))(*v669 + 16))();
LABEL_816:
      v678 = (__int128 *)v548;
      goto LABEL_818;
    }
LABEL_828:
    v559 = v669;
    if (v669 == v668)
    {
      v560 = 4;
      v559 = v668;
      v227 = (uint64_t *)v635;
LABEL_832:
      (*(void (**)(void))(*v559 + 8 * v560))();
    }
    else
    {
      v227 = (uint64_t *)v635;
      if (v669)
      {
        v560 = 5;
        goto LABEL_832;
      }
    }
  }
  if (a6 && a7[53] && v663)
  {
    v561 = a10[3];
    if (!v561)
      goto LABEL_839;
    if ((_QWORD *)v561 == a10)
    {
      v667 = v666;
      (*(void (**)(_QWORD *, _QWORD *, __n128))(*a10 + 24))(a10, v666, v226);
    }
    else
    {
      v561 = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v561 + 16))(v561, v226);
LABEL_839:
      v667 = (_QWORD *)v561;
    }
    v562 = ggl::FragmentedPool<ggl::RenderItem>::pop(v227[24]);
    v563 = *(_QWORD **)(v562 + 64);
    v564 = v646;
    *v563 = v646;
    v563[1] = 0;
    v565 = *(_QWORD **)(v562 + 160);
    v566 = *((_QWORD *)&v646 + 1);
    if (*((_QWORD *)&v646 + 1))
    {
      v567 = (unint64_t *)(*((_QWORD *)&v646 + 1) + 8);
      do
        v568 = __ldxr(v567);
      while (__stxr(v568 + 1, v567));
    }
    v569 = (std::__shared_weak_count *)v565[1];
    *v565 = v564;
    v565[1] = v566;
    if (v569)
    {
      v570 = (unint64_t *)&v569->__shared_owners_;
      do
        v571 = __ldaxr(v570);
      while (__stlxr(v571 - 1, v570));
      if (!v571)
      {
        ((void (*)(std::__shared_weak_count *))v569->__on_zero_shared)(v569);
        std::__shared_weak_count::__release_weak(v569);
      }
    }
    v572 = *(_QWORD *)(v562 + 64);
    *(_QWORD *)(v572 + 24) = 0;
    v573 = v648;
    *(_QWORD *)(v572 + 16) = v648;
    v574 = *(_QWORD *)(v562 + 160);
    v575 = *((_QWORD *)&v648 + 1);
    if (*((_QWORD *)&v648 + 1))
    {
      v576 = (unint64_t *)(*((_QWORD *)&v648 + 1) + 8);
      do
        v577 = __ldxr(v576);
      while (__stxr(v577 + 1, v576));
    }
    v578 = *(std::__shared_weak_count **)(v574 + 24);
    *(_QWORD *)(v574 + 16) = v573;
    *(_QWORD *)(v574 + 24) = v575;
    if (v578)
    {
      v579 = (unint64_t *)&v578->__shared_owners_;
      do
        v580 = __ldaxr(v579);
      while (__stlxr(v580 - 1, v579));
      if (!v580)
      {
        ((void (*)(std::__shared_weak_count *))v578->__on_zero_shared)(v578);
        std::__shared_weak_count::__release_weak(v578);
      }
    }
    v581 = *(_QWORD *)(*(_QWORD *)(v562 + 64) + 32);
    *(_OWORD *)v685 = 0uLL;
    v582 = *(_QWORD *)(v581 + 8);
    *(_QWORD *)&v583 = 0;
    *((_QWORD *)&v583 + 1) = v581;
    v630 = (ggl::CommandBuffer *)v562;
    if (v582)
      v584 = *(_QWORD *)(v581 + 72);
    else
      v584 = 0;
    v628 = v583;
    *(_OWORD *)v685 = v583;
    *(_QWORD *)&v685[16] = 0;
    *(_QWORD *)&v685[24] = v582;
    v686.i64[1] = v584;
    v686.i16[0] = 1;
    *(_OWORD *)v584 = v649;
    *(_OWORD *)(v584 + 16) = v650;
    *(float32x4_t *)(v584 + 32) = v651;
    *(float32x4_t *)(v584 + 48) = v652;
    *(_DWORD *)(v584 + 64) = *(_DWORD *)(v225 + 56);
    v585 = *(id *)(v225 + 80);
    *(_QWORD *)(v584 + 72) = *(_QWORD *)objc_msgSend(v585, "origin");

    v586 = *(id *)(v636 + 80);
    objc_msgSend(v586, "size");
    *(_DWORD *)(v584 + 80) = v587;
    *(_DWORD *)(v584 + 84) = v588;

    if (v582)
    {
      if ((_QWORD)v628 && *(_BYTE *)(*((_QWORD *)&v628 + 1) + 17) != 2)
        (*(void (**)(void))(*(_QWORD *)v628 + 64))();
      v589 = *(_QWORD *)(*((_QWORD *)&v628 + 1) + 64);
      if (v589 <= v582)
        v589 = v582;
      *(_QWORD *)(*((_QWORD *)&v628 + 1) + 56) = 0;
      *(_QWORD *)(*((_QWORD *)&v628 + 1) + 64) = v589;
    }
    v590 = v636;
    v591 = *(_QWORD *)(v635 + 8 * (v656 | (2 * v657[0])) + 272);
    memset(&v681[4], 0, 32);
    v592 = *(_QWORD *)(*(_QWORD *)v636 + 384);
    if (v592)
      v593 = v592 + 168;
    else
      v593 = 0;
    v594 = (*(uint64_t (**)(unsigned __int8 *, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t *, _QWORD))(*(_QWORD *)a7 + 32))(a7, 1, *(unsigned int *)v659, 0, v593, 0, 0, *v660, 0);
    v595 = v657[1];
    v596 = objc_msgSend(*(id *)(v636 + 80), "fillMeshes");
    v598 = *(uint64_t **)v596;
    v597 = *(uint64_t **)(v596 + 8);
    if (*(uint64_t **)v596 != v597)
    {
      v599 = 0;
      v634 = vdupq_n_s64(1uLL);
      while (1)
      {
        v600 = *(id *)(v590 + 80);
        v601 = *(unsigned int *)(v590 + 100);
        v602 = (uint64_t)v667;
        if (!v667)
          goto LABEL_875;
        if (v667 != v666)
          break;
        v678 = &v676;
        (*(void (**)(_QWORD *, __int128 *))(v666[0] + 24))(v666, &v676);
LABEL_877:
        v603 = (uint64_t *)objc_msgSend(v600, "commitRangesToFillRenderItemBatcher:forMeshAtIndex:cullingMask:featureIdPredicate:", v635 + 984, v599, v601, &v676);
        v604 = v678;
        if (v678 == &v676)
        {
          v604 = &v676;
          v605 = 4;
          goto LABEL_881;
        }
        if (v678)
        {
          v605 = 5;
LABEL_881:
          (*(void (**)(void))(*(_QWORD *)v604 + 8 * v605))();
        }

        v606 = *v598;
        *(_OWORD *)v685 = *(_OWORD *)v681;
        *(_OWORD *)&v685[16] = *(_OWORD *)&v681[16];
        v686.i32[0] = *(_DWORD *)&v681[32];
        v607 = *(_QWORD **)(v635 + 1072);
        v608 = v607[1];
        if (v608 == *(_QWORD *)(v635 + 1080))
        {
          v607 = (_QWORD *)*v607;
          if (!v607)
          {
            v607 = malloc_type_malloc(120 * v608 + 16, 0xB644C221uLL);
            *v607 = 0;
            v607[1] = 0;
            **(_QWORD **)(v635 + 1072) = v607;
          }
          *(_QWORD *)(v635 + 1072) = v607;
          v608 = v607[1];
        }
        v609 = &v607[15 * v608];
        v607[1] = v608 + 1;
        v609[2] = &off_1E42B59B0;
        v609 += 2;
        v609[2] = "";
        v609[3] = v591;
        v609[4] = v630;
        *((_DWORD *)v609 + 10) = v595;
        v609[6] = v594;
        *((_DWORD *)v609 + 14) = 1065353216;
        v610 = v686.i32[0];
        v611 = *(_OWORD *)&v685[16];
        *(_OWORD *)((char *)v609 + 60) = *(_OWORD *)v685;
        *((_DWORD *)v609 + 23) = v610;
        *(_OWORD *)((char *)v609 + 76) = v611;
        *((int64x2_t *)v609 + 6) = v634;
        v609[14] = 0;
        v609[8] = v606;
        v612 = *v603;
        v609[11] = *v603;
        v609[12] = (v603[1] - v612) >> 4;
        ggl::CommandBuffer::pushRenderItem((uint64_t)v632, (ggl::RenderItem *)v609);
        v590 = v636;
        ++v599;
        v598 += 2;
        if (v598 == v597)
          goto LABEL_887;
      }
      v602 = (*(uint64_t (**)(void))(*v667 + 16))();
LABEL_875:
      v678 = (__int128 *)v602;
      goto LABEL_877;
    }
LABEL_887:
    v613 = v667;
    if (v667 == v666)
    {
      v614 = 4;
      v613 = v666;
LABEL_891:
      (*(void (**)(void))(*v613 + 8 * v614))();
    }
    else if (v667)
    {
      v614 = 5;
      goto LABEL_891;
    }
  }
LABEL_112:
  v76 = (std::__shared_weak_count *)*((_QWORD *)&v648 + 1);
  if (*((_QWORD *)&v648 + 1))
  {
    v77 = (unint64_t *)(*((_QWORD *)&v648 + 1) + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  v79 = (std::__shared_weak_count *)*((_QWORD *)&v647 + 1);
  if (*((_QWORD *)&v647 + 1))
  {
    v80 = (unint64_t *)(*((_QWORD *)&v647 + 1) + 8);
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = (std::__shared_weak_count *)*((_QWORD *)&v646 + 1);
  if (*((_QWORD *)&v646 + 1))
  {
    v83 = (unint64_t *)(*((_QWORD *)&v646 + 1) + 8);
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
}

void sub_19FE708C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  unint64_t *v38;
  uint64_t v39;
  unint64_t *v40;
  uint64_t v41;

  v38 = (unint64_t *)STACK[0x2B8];
  if ((unint64_t *)STACK[0x2B8] == &STACK[0x2A0])
  {
    v39 = 4;
    v38 = &STACK[0x2A0];
  }
  else
  {
    if (!v38)
      goto LABEL_6;
    v39 = 5;
  }
  (*(void (**)(void))(*v38 + 8 * v39))();
LABEL_6:
  v40 = (unint64_t *)STACK[0x238];
  if ((unint64_t *)STACK[0x238] == &STACK[0x220])
  {
    v41 = 4;
    v40 = &STACK[0x220];
  }
  else
  {
    if (!v40)
      goto LABEL_11;
    v41 = 5;
  }
  (*(void (**)(void))(*v40 + 8 * v41))();
LABEL_11:
  md::MuninRoadLabelCreationParams::~MuninRoadLabelCreationParams((md::MuninRoadLabelCreationParams *)&a37);
  _Unwind_Resume(a1);
}

uint64_t md::animatingPolygonFillPipelineSetup<md::VenueTileData>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4, _QWORD *a5, _QWORD *a6, int a7)
{
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  unint64_t v45;
  __int128 v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  int v50;
  float v51;
  id v52;
  id v53;
  int v54;
  int v55;
  float *v56;
  uint64_t v57;
  float v58;
  int v59;
  unint64_t v60;
  __int128 v63;

  v14 = ggl::FragmentedPool<ggl::RenderItem>::pop(a1[28]);
  v15 = *(uint64_t **)(v14 + 64);
  v15[1] = 0;
  v16 = *a3;
  *v15 = *a3;
  v17 = *(_QWORD **)(v14 + 160);
  v18 = a3[1];
  if (v18)
  {
    v19 = (unint64_t *)(v18 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v21 = (std::__shared_weak_count *)v17[1];
  *v17 = v16;
  v17[1] = v18;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = *(_QWORD *)(v14 + 64);
  *(_QWORD *)(v24 + 24) = 0;
  v25 = *(_QWORD *)(a4 + 32);
  *(_QWORD *)(v24 + 16) = v25;
  v26 = *(_QWORD *)(v14 + 160);
  v27 = *(_QWORD *)(a4 + 40);
  if (v27)
  {
    v28 = (unint64_t *)(v27 + 8);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v30 = *(std::__shared_weak_count **)(v26 + 24);
  *(_QWORD *)(v26 + 16) = v25;
  *(_QWORD *)(v26 + 24) = v27;
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = *(_QWORD *)(v14 + 64);
  *(_QWORD *)(v33 + 56) = 0;
  v34 = a1[119];
  *(_QWORD *)(v33 + 48) = v34;
  v35 = *(_QWORD *)(v14 + 160);
  v36 = a1[120];
  if (v36)
  {
    v37 = (unint64_t *)(v36 + 8);
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
  }
  v39 = *(std::__shared_weak_count **)(v35 + 56);
  *(_QWORD *)(v35 + 48) = v34;
  *(_QWORD *)(v35 + 56) = v36;
  if (v39)
  {
    v40 = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = a5 + 3;
  if (!a7)
    v42 = a5;
  **(_QWORD **)(v14 + 96) = *v42;
  v43 = a6 + 3;
  if (!a7)
    v43 = a6;
  *(_QWORD *)(*(_QWORD *)(v14 + 96) + 8) = *v43;
  v44 = *(_QWORD *)(*(_QWORD *)(v14 + 64) + 32);
  v45 = *(_QWORD *)(v44 + 8);
  *(_QWORD *)&v46 = 0;
  if (v45)
    v47 = *(_QWORD *)(v44 + 72);
  else
    v47 = 0;
  *((_QWORD *)&v46 + 1) = *(_QWORD *)(*(_QWORD *)(v14 + 64) + 32);
  v63 = v46;
  *(_DWORD *)v47 = *(_DWORD *)(a4 + 48);
  *(_DWORD *)(v47 + 4) = *(_DWORD *)(a4 + 52);
  *(_DWORD *)(v47 + 8) = *(_DWORD *)(a4 + 56);
  *(_DWORD *)(v47 + 12) = *(_DWORD *)(a4 + 60);
  *(_DWORD *)(v47 + 16) = *(_DWORD *)(a4 + 64);
  *(_DWORD *)(v47 + 20) = *(_DWORD *)(a4 + 68);
  *(_DWORD *)(v47 + 24) = *(_DWORD *)(a4 + 72);
  *(_DWORD *)(v47 + 28) = *(_DWORD *)(a4 + 76);
  *(_DWORD *)(v47 + 32) = *(_DWORD *)(a4 + 80);
  *(_DWORD *)(v47 + 36) = *(_DWORD *)(a4 + 84);
  *(_DWORD *)(v47 + 40) = *(_DWORD *)(a4 + 88);
  *(_DWORD *)(v47 + 44) = *(_DWORD *)(a4 + 92);
  *(_DWORD *)(v47 + 48) = *(_DWORD *)(a4 + 96);
  *(_DWORD *)(v47 + 52) = *(_DWORD *)(a4 + 100);
  *(_DWORD *)(v47 + 56) = *(_DWORD *)(a4 + 104);
  *(_DWORD *)(v47 + 60) = *(_DWORD *)(a4 + 108);
  v48 = a5 + 4;
  v49 = 1;
  if (a7)
    v49 = 4;
  else
    v48 = a5 + 1;
  v50 = *((_DWORD *)v48 + 2);
  v51 = *(float *)(a4 + 144) * *((float *)v48 + 3);
  *(_QWORD *)(v47 + 64) = a5[v49];
  *(_DWORD *)(v47 + 72) = v50;
  *(float *)(v47 + 76) = v51;
  v52 = *(id *)(a2 + 80);
  *(_QWORD *)(v47 + 104) = *(_QWORD *)objc_msgSend(v52, "origin");

  v53 = *(id *)(a2 + 80);
  objc_msgSend(v53, "size");
  *(_DWORD *)(v47 + 112) = v54;
  *(_DWORD *)(v47 + 116) = v55;

  v56 = (float *)(a6 + 4);
  v57 = 1;
  if (a7)
    v57 = 4;
  else
    v56 = (float *)(a6 + 1);
  v58 = *(float *)(a4 + 144) * v56[3];
  v59 = a6[v57 + 1];
  *(_QWORD *)(v47 + 80) = a6[v57];
  *(_DWORD *)(v47 + 88) = v59;
  *(float *)(v47 + 92) = v58;
  *(_DWORD *)(v47 + 96) = *(_DWORD *)(a2 + 56);
  if (v45)
  {
    if ((_QWORD)v63 && *(_BYTE *)(*((_QWORD *)&v63 + 1) + 17) != 2)
      (*(void (**)(void))(*(_QWORD *)v63 + 64))();
    v60 = *(_QWORD *)(*((_QWORD *)&v63 + 1) + 64);
    if (v60 <= v45)
      v60 = v45;
    *(_QWORD *)(*((_QWORD *)&v63 + 1) + 56) = 0;
    *(_QWORD *)(*((_QWORD *)&v63 + 1) + 64) = v60;
  }
  if (v58 <= 0.0 && v51 <= 0.0)
    return 0;
  else
    return v14;
}

void sub_19FE711D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);

  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)va);
  _Unwind_Resume(a1);
}

uint64_t md::polygonFillPipelineSetup<md::VenueTileData>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, _QWORD *a6, int a7)
{
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  __int128 v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  int v38;
  float v39;
  id v40;
  id v41;
  int v42;
  int v43;
  unint64_t v44;
  __int128 v46;

  if (!*(_BYTE *)(a5 + 129))
    a1 = a2;
  v12 = ggl::FragmentedPool<ggl::RenderItem>::pop(a1);
  v13 = *(uint64_t **)(v12 + 64);
  v13[1] = 0;
  v14 = *a4;
  *v13 = *a4;
  v15 = *(_QWORD **)(v12 + 160);
  v16 = a4[1];
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = (std::__shared_weak_count *)v15[1];
  *v15 = v14;
  v15[1] = v16;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = *(_QWORD *)(v12 + 64);
  *(_QWORD *)(v22 + 24) = 0;
  v23 = *(_QWORD *)(a5 + 32);
  *(_QWORD *)(v22 + 16) = v23;
  v24 = *(_QWORD *)(v12 + 160);
  v25 = *(_QWORD *)(a5 + 40);
  if (v25)
  {
    v26 = (unint64_t *)(v25 + 8);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  v28 = *(std::__shared_weak_count **)(v24 + 24);
  *(_QWORD *)(v24 + 16) = v23;
  *(_QWORD *)(v24 + 24) = v25;
  if (v28)
  {
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = a6 + 3;
  if (!a7)
    v31 = a6;
  **(_QWORD **)(v12 + 96) = *v31;
  v32 = *(_QWORD *)(*(_QWORD *)(v12 + 64) + 32);
  v33 = *(_QWORD *)(v32 + 8);
  *(_QWORD *)&v34 = 0;
  if (v33)
    v35 = *(_QWORD *)(v32 + 72);
  else
    v35 = 0;
  *((_QWORD *)&v34 + 1) = *(_QWORD *)(*(_QWORD *)(v12 + 64) + 32);
  v46 = v34;
  *(_DWORD *)v35 = *(_DWORD *)(a5 + 48);
  *(_DWORD *)(v35 + 4) = *(_DWORD *)(a5 + 52);
  *(_DWORD *)(v35 + 8) = *(_DWORD *)(a5 + 56);
  *(_DWORD *)(v35 + 12) = *(_DWORD *)(a5 + 60);
  *(_DWORD *)(v35 + 16) = *(_DWORD *)(a5 + 64);
  *(_DWORD *)(v35 + 20) = *(_DWORD *)(a5 + 68);
  *(_DWORD *)(v35 + 24) = *(_DWORD *)(a5 + 72);
  *(_DWORD *)(v35 + 28) = *(_DWORD *)(a5 + 76);
  *(_DWORD *)(v35 + 32) = *(_DWORD *)(a5 + 80);
  *(_DWORD *)(v35 + 36) = *(_DWORD *)(a5 + 84);
  *(_DWORD *)(v35 + 40) = *(_DWORD *)(a5 + 88);
  *(_DWORD *)(v35 + 44) = *(_DWORD *)(a5 + 92);
  *(_DWORD *)(v35 + 48) = *(_DWORD *)(a5 + 96);
  *(_DWORD *)(v35 + 52) = *(_DWORD *)(a5 + 100);
  *(_DWORD *)(v35 + 56) = *(_DWORD *)(a5 + 104);
  *(_DWORD *)(v35 + 60) = *(_DWORD *)(a5 + 108);
  v36 = a6 + 4;
  v37 = 1;
  if (a7)
    v37 = 4;
  else
    v36 = a6 + 1;
  v38 = *((_DWORD *)v36 + 2);
  v39 = *(float *)(a5 + 144) * *((float *)v36 + 3);
  *(_QWORD *)(v35 + 64) = a6[v37];
  *(_DWORD *)(v35 + 72) = v38;
  *(float *)(v35 + 76) = v39;
  *(_DWORD *)(v35 + 80) = *(_DWORD *)(a3 + 56);
  v40 = *(id *)(a3 + 80);
  *(_QWORD *)(v35 + 88) = *(_QWORD *)objc_msgSend(v40, "origin");

  v41 = *(id *)(a3 + 80);
  objc_msgSend(v41, "size");
  *(_DWORD *)(v35 + 96) = v42;
  *(_DWORD *)(v35 + 100) = v43;

  if (v33)
  {
    if ((_QWORD)v46 && *(_BYTE *)(*((_QWORD *)&v46 + 1) + 17) != 2)
      (*(void (**)(void))(*(_QWORD *)v46 + 64))();
    v44 = *(_QWORD *)(*((_QWORD *)&v46 + 1) + 64);
    if (v44 <= v33)
      v44 = v33;
    *(_QWORD *)(*((_QWORD *)&v46 + 1) + 56) = 0;
    *(_QWORD *)(*((_QWORD *)&v46 + 1) + 64) = v44;
  }
  if (v39 <= 0.0)
    return 0;
  else
    return v12;
}

void sub_19FE714D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);

  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)va);
  _Unwind_Resume(a1);
}

uint64_t md::writeSourceConstants<md::VenueTileData,md::Stroke2StyleProperties>(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  unint64_t v6;
  __int128 v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  float v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  float v28;
  uint64_t v29;
  unsigned int v30;
  float *v31;
  float v32;
  _BOOL4 v33;
  _BOOL4 v35;
  unsigned int v36;
  float v37;
  _BOOL4 v38;
  int v40;
  char v41;
  char v42;
  unint64_t v43;
  float v44;
  float *v45;
  float v46;
  BOOL v47;
  unsigned int v48;
  float v49;
  float v50;
  float v51;
  float v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  float v57;
  int v58;
  uint64_t v59;
  unsigned int v60;
  float *v61;
  float v62;
  _BOOL4 v63;
  float v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  float *v70;
  float v71;
  BOOL v72;
  unsigned int v73;
  int v74;
  int v75;
  unsigned int v76;
  float v77;
  _BOOL4 v78;
  int v80;
  _BOOL4 v81;
  unsigned int v82;
  int v83;
  float v84;
  unsigned int v86;
  int v87;
  int v88;
  float v89;
  float v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  float *v94;
  float v95;
  BOOL v96;
  unsigned int v97;
  unint64_t v98;
  unint64_t v99;
  char *v100;
  char v101;
  float v102;
  unsigned int v103;
  float v104;
  float v105;
  float v106;
  float *v107;
  unint64_t v108;
  unint64_t v109;
  _QWORD *v110;
  int v111;
  int v112;
  unint64_t v113;
  unint64_t v114;
  __int128 v117;
  __int128 v118;
  _QWORD v119[2];
  unsigned __int8 v120;
  __int128 v121;
  unint64_t v122;
  unint64_t v123;
  __int16 v124;
  uint64_t v125;
  BOOL v126[9];

  v121 = 0uLL;
  v6 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)&v7 = 0;
  *((_QWORD *)&v7 + 1) = a3;
  if (v6)
    v8 = *(_QWORD *)(a3 + 72);
  else
    v8 = 0;
  v121 = v7;
  v122 = 0;
  v123 = v6;
  v125 = v8;
  v124 = 1;
  *(_DWORD *)v8 = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(v8 + 4) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(v8 + 8) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(v8 + 12) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(v8 + 16) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(v8 + 20) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(v8 + 24) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(v8 + 28) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(v8 + 32) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(v8 + 36) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(v8 + 40) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(v8 + 44) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(v8 + 48) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(v8 + 52) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(v8 + 56) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(v8 + 60) = *(_DWORD *)(a2 + 108);
  *(_QWORD *)(v8 + 320) = 0;
  *(_QWORD *)(v8 + 328) = 0;
  *(_DWORD *)(v8 + 464) = *(_DWORD *)(a1 + 56);
  v9 = 1.0 / *(double *)(a1 + 64);
  *(float *)(v8 + 468) = v9;
  *(_DWORD *)(v8 + 472) = *(_DWORD *)(a2 + 148);
  *a4 = 0;
  v10 = **(_QWORD **)(a2 + 160);
  if (*(_QWORD *)(*(_QWORD *)(a2 + 160) + 8) != v10)
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    while (1)
    {
      v20 = *(_OWORD *)(v10 + 16 * v11);
      v117 = v20;
      v21 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
      if (*((_QWORD *)&v20 + 1))
      {
        v22 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
        v118 = v20;
        do
          v24 = __ldxr(v22);
        while (__stxr(v24 + 1, v22));
        v25 = v20;
      }
      else
      {
        v25 = v20;
        v118 = (unint64_t)v20;
      }
      v119[0] = 0;
      v119[1] = 0;
      v120 = 0;
      if (v25)
        LODWORD(v25) = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v25 + 48))(v25, v119);
      v120 = v25;
      if (v21)
      {
        p_shared_owners = (unint64_t *)&v21->__shared_owners_;
        do
          v27 = __ldaxr(p_shared_owners);
        while (__stlxr(v27 - 1, p_shared_owners));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
        LODWORD(v25) = v120;
      }
      v28 = 0.0;
      if (!(_DWORD)v25)
      {
        v35 = 0;
        goto LABEL_75;
      }
      v29 = *(_QWORD *)(v118 + 24);
      v30 = (int)*(float *)(a1 + 48) >= 0x17 ? 23 : (int)*(float *)(a1 + 48);
      v31 = *(float **)v29;
      if (!*(_QWORD *)v29)
        break;
      v32 = *v31;
      v33 = *v31 == 1.0;
      if (!*(_BYTE *)(v29 + 10))
        goto LABEL_45;
      if (v32 == 0.0 || v32 == 1.0)
        goto LABEL_45;
LABEL_46:
      if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(_QWORD *)(v118 + 24), 0x11Du, v30, 0) & 1) != 0)
        goto LABEL_49;
      v36 = 1;
LABEL_48:
      if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v29, 0x11Du, v30, v36))
      {
LABEL_49:
        if (v31)
        {
          v37 = *v31;
          v38 = *v31 == 1.0;
          if (*(_BYTE *)(v29 + 10))
          {
            if (v37 != 0.0 && v37 != 1.0)
              goto LABEL_60;
          }
        }
        else
        {
          v38 = 0;
        }
        v40 = *(unsigned __int8 *)(v29 + v38 + 11);
        v37 = 0.0;
        if (v40 == 2)
        {
LABEL_60:
          LOBYTE(v117) = 1;
          v126[0] = 1;
          v41 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v29, 0x11Du, v30, 0, &v117);
          v42 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v29, 0x11Du, v30, 1, v126);
          if (v37 < 1.0)
            v42 = v41;
        }
        else
        {
          v42 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v29, 0x11Du, v30, v40, 0);
        }
        v35 = v42 != 0;
        if (!v120)
          goto LABEL_75;
        goto LABEL_65;
      }
      v35 = 1;
LABEL_65:
      v43 = *(_QWORD *)(v118 + 24);
      v44 = fminf(fmaxf(*(float *)(a1 + 48), 0.0), 23.0);
      v45 = *(float **)v43;
      if (*(_QWORD *)v43
        && (v46 = *v45, LODWORD(v45) = *v45 == 1.0, *(_BYTE *)(v43 + 10))
        && (v46 != 0.0 ? (v47 = v46 == 1.0) : (v47 = 1), !v47)
        || (v48 = *(unsigned __int8 *)(v43 + v45 + 11), v46 = 0.0, v48 == 2))
      {
        LOBYTE(v117) = 1;
        v126[0] = 1;
        gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v43, 0x194u, 0, (BOOL *)&v117, v44);
        v50 = v49;
        gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v43, 0x194u, 1u, v126, v44);
        v28 = v50 + (float)((float)(v51 - v50) * v46);
      }
      else
      {
        gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(*(_QWORD *)(v118 + 24), 0x194u, v48, 0, v44);
        v28 = v52;
      }
LABEL_75:
      v53 = *(double *)(a1 + 64) * 1.75;
      if (!v35 || v28 >= 0.0001)
      {
        v57 = v53 * v28;
        if (!v120)
        {
          v14 = *(unsigned __int8 *)(a2 + 152);
          if (v14 == 1)
            v15 = 0.0;
          else
            v15 = 1.0;
          if (v14 == 1)
            v16 = -1.0;
          else
            v16 = 0.0;
          if (v14 == 2)
          {
            v15 = 0.5;
            v16 = -0.5;
          }
          v17 = v125;
          v18 = v125 + 4 * v11;
          *(float *)(v18 + 336) = v15 * v57;
          *(float *)(v18 + 400) = v16 * v57;
          *(_DWORD *)(v17 + 476) = 0;
          v19 = v17 + 16 * v11;
          *(_QWORD *)(v19 + 64) = 0;
          *(_QWORD *)(v19 + 72) = 0;
          goto LABEL_15;
        }
        v58 = v12;
        v59 = *(_QWORD *)(v118 + 24);
        if ((int)*(float *)(a1 + 48) >= 0x17)
          v60 = 23;
        else
          v60 = (int)*(float *)(a1 + 48);
        v61 = *(float **)v59;
        if (*(_QWORD *)v59)
        {
          v62 = *v61;
          v63 = *v61 == 1.0;
          if (*(_BYTE *)(v59 + 10))
          {
            if (v62 != 0.0 && v62 != 1.0)
            {
LABEL_109:
              if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(_QWORD *)(v118 + 24), 0x198u, v60, 0) & 1) == 0)
              {
                v76 = 1;
                goto LABEL_111;
              }
              goto LABEL_112;
            }
          }
        }
        else
        {
          v63 = 0;
        }
        v76 = *(unsigned __int8 *)(v59 + v63 + 11);
        if (v76 == 2)
          goto LABEL_109;
LABEL_111:
        if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v59, 0x198u, v60, v76))
        {
LABEL_112:
          if (v61)
          {
            v77 = *v61;
            v78 = *v61 == 1.0;
            if (*(_BYTE *)(v59 + 10))
            {
              if (v77 != 0.0 && v77 != 1.0)
                goto LABEL_124;
            }
          }
          else
          {
            v78 = 0;
          }
          v82 = *(unsigned __int8 *)(v59 + v78 + 11);
          v77 = 0.0;
          if (v82 == 2)
          {
LABEL_124:
            LOBYTE(v117) = 1;
            v126[0] = 1;
            v80 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v59, 0x198u, v60, 0, &v117);
            v83 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v59, 0x198u, v60, 1u, v126);
            if (v77 >= 1.0)
              LOBYTE(v80) = v83;
          }
          else
          {
            v80 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v59, 0x198u, v60, v82, 0);
          }
          v59 = *(_QWORD *)(v118 + 24);
          v61 = *(float **)v59;
          if ((int)*(float *)(a1 + 48) >= 0x17)
            v60 = 23;
          else
            v60 = (int)*(float *)(a1 + 48);
          if (v61)
          {
LABEL_131:
            v84 = *v61;
            v81 = *v61 == 1.0;
            if (*(_BYTE *)(v59 + 10))
            {
              if (v84 != 0.0 && v84 != 1.0)
                goto LABEL_138;
            }
LABEL_137:
            v86 = *(unsigned __int8 *)(v59 + v81 + 11);
            v84 = 0.0;
            if (v86 == 2)
            {
LABEL_138:
              LOBYTE(v117) = 1;
              v126[0] = 1;
              v87 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v59, 0x1A4u, v60, 0, &v117);
              v88 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v59, 0x1A4u, v60, 1u, v126);
              if (v84 < 1.0)
                LOBYTE(v88) = v87;
            }
            else
            {
              LOBYTE(v88) = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v59, 0x1A4u, v60, v86, 0);
            }
            if (v80 == 2)
            {
              v89 = -0.5;
              v90 = 0.5;
            }
            else if (v80 == 1)
            {
              v89 = -1.0;
              v90 = 0.0;
            }
            else
            {
              v89 = 0.0;
              v90 = 1.0;
            }
            v91 = v125;
            v92 = v125 + 4 * v11;
            *(float *)(v92 + 336) = v90 * v57;
            *(float *)(v92 + 400) = v89 * v57;
            *(_DWORD *)(v91 + 476) = v88 == 1;
            v93 = *(_QWORD *)(v118 + 24);
            v94 = *(float **)v93;
            if (*(_QWORD *)v93
              && (v95 = *v94, LODWORD(v94) = *v94 == 1.0, *(_BYTE *)(v93 + 10))
              && (v95 != 0.0 ? (v96 = v95 == 1.0) : (v96 = 1), !v96)
              || (v97 = *(unsigned __int8 *)(v93 + v94 + 11), v95 = 0.0, v97 == 2))
            {
              LOBYTE(v117) = 1;
              v126[0] = 1;
              v98 = gss::RenderStyle<gss::PropertyID>::styleValueForKey<BOOL>(v93, 0x197u, 0, &v117);
              v99 = gss::RenderStyle<gss::PropertyID>::styleValueForKey<BOOL>(v93, 0x197u, 1u, v126);
              if (v95 >= 1.0)
                v100 = (char *)v99;
              else
                v100 = (char *)v98;
              v101 = *v100;
            }
            else
            {
              v101 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<BOOL>(*(_QWORD *)(v118 + 24), 0x197u, v97, 0);
            }
            v102 = *(float *)(a1 + 48);
            if (v101)
            {
              gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v117, *(_QWORD *)(v118 + 24), 0x193u, 2u, fminf(fmaxf(v102, 0.0), 23.0));
            }
            else
            {
              if ((int)v102 >= 0x17)
                v103 = 23;
              else
                v103 = (int)v102;
              gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v117, *(_QWORD *)(v118 + 24), 0x193u, v103, 2u, 0);
            }
            v104 = (float)WORD3(v117) * (float)(0.000015259 * *(float *)(a2 + 144));
            v105 = (float)(v104 * 0.000015259) * (float)WORD1(v117);
            v106 = (float)(v104 * 0.000015259) * (float)WORD2(v117);
            v107 = (float *)(v91 + 16 * v11);
            v107[16] = (float)(v104 * 0.000015259) * (float)(unsigned __int16)v117;
            v107[17] = v105;
            v107[18] = v106;
            v107[19] = v104;
            v12 = v58 | (v104 > 0.001);
            *a4 |= v104 < 1.0;
            goto LABEL_15;
          }
        }
        else
        {
          LOBYTE(v80) = *(_BYTE *)(a2 + 152);
          if (v61)
            goto LABEL_131;
        }
        v81 = 0;
        goto LABEL_137;
      }
      v54 = v125;
      if (*(_BYTE *)(a1 + 120))
      {
        v55 = v125 + 4 * v11;
        *(_DWORD *)(v55 + 336) = 0;
        *(_DWORD *)(v55 + 400) = 0;
        v56 = v54 + 16 * v11;
        *(_QWORD *)(v56 + 64) = 0;
        *(_QWORD *)(v56 + 72) = 0;
      }
      else
      {
        v65 = v53;
        v66 = v125 + 4 * v11;
        *(float *)(v66 + 336) = v65;
        *(_DWORD *)(v66 + 400) = 0;
        v67 = v54 + 16 * v11;
        *(_QWORD *)(v67 + 64) = 0;
        *(_QWORD *)(v67 + 72) = 0;
        if (v120)
        {
          v68 = *(_QWORD *)(v118 + 24);
          if ((int)*(float *)(a1 + 48) >= 0x17)
            v69 = 23;
          else
            v69 = (int)*(float *)(a1 + 48);
          v70 = *(float **)v68;
          if (*(_QWORD *)v68
            && (v71 = *v70, LODWORD(v70) = *v70 == 1.0, *(_BYTE *)(v68 + 10))
            && (v71 != 0.0 ? (v72 = v71 == 1.0) : (v72 = 1), !v72)
            || (v73 = *(unsigned __int8 *)(v68 + v70 + 11), v71 = 0.0, v73 == 2))
          {
            LOBYTE(v117) = 1;
            v126[0] = 1;
            v74 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v68, 0x1A4u, v69, 0, &v117);
            v75 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v68, 0x1A4u, v69, 1u, v126);
            if (v71 < 1.0)
              LOBYTE(v75) = v74;
          }
          else
          {
            LOBYTE(v75) = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(_QWORD *)(v118 + 24), 0x1A4u, v69, v73, 0);
          }
          *(_DWORD *)(v54 + 476) = v75 == 1;
          goto LABEL_15;
        }
      }
      *(_DWORD *)(v54 + 476) = 0;
LABEL_15:
      gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v118);
      v11 = ++v13;
      v10 = **(_QWORD **)(a2 + 160);
      if (v13 >= (unint64_t)((*(_QWORD *)(*(_QWORD *)(a2 + 160) + 8) - v10) >> 4))
        goto LABEL_170;
    }
    v33 = 0;
LABEL_45:
    v36 = *(unsigned __int8 *)(v29 + v33 + 11);
    if (v36 != 2)
      goto LABEL_48;
    goto LABEL_46;
  }
  LOBYTE(v12) = 0;
LABEL_170:
  v109 = v122;
  v108 = v123;
  if (v123 != v122)
  {
    v110 = (_QWORD *)*((_QWORD *)&v121 + 1);
    v111 = v124;
    v112 = HIBYTE(v124);
    if ((_QWORD)v121 && *(_BYTE *)(*((_QWORD *)&v121 + 1) + 17) != 2)
      (*(void (**)(void))(*(_QWORD *)v121 + 64))();
    if (v111 && !v112)
    {
      v114 = v110[7];
      v113 = v110[8];
      if (v113 == v114)
        v114 = v110[10] - v110[9];
      if (v109 < v114)
        v114 = v109;
      if (v113 <= v108)
        v113 = v108;
      if (v113 == v114)
        v113 = v114 + v110[10] - v110[9];
      v110[7] = v114;
      v110[8] = v113;
    }
  }
  return v12 & 1;
}

void sub_19FE71F78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)va);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)va1);
  _Unwind_Resume(a1);
}

uint64_t md::animatingPolygonStrokePipelineSetup<md::VenueTileData,md::Stroke2StyleProperties>(uint64_t *a1, uint64_t a2, uint64_t *a3, _QWORD *a4, _QWORD *a5, _BYTE *a6)
{
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  _QWORD *v42;

  v12 = ggl::FragmentedPool<ggl::RenderItem>::pop(a1[25]);
  v13 = *(uint64_t **)(v12 + 64);
  v14 = *a3;
  v15 = a3[1];
  *v13 = *a3;
  v13[1] = 0;
  v16 = *(_QWORD **)(v12 + 160);
  if (v15)
  {
    v17 = (unint64_t *)(v15 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = (std::__shared_weak_count *)v16[1];
  *v16 = v14;
  v16[1] = v15;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = *(_QWORD *)(v12 + 64);
  v23 = a3[4];
  v24 = a3[5];
  *(_QWORD *)(v22 + 16) = v23;
  *(_QWORD *)(v22 + 24) = 0;
  v25 = *(_QWORD *)(v12 + 160);
  if (v24)
  {
    v26 = (unint64_t *)(v24 + 8);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  v28 = *(std::__shared_weak_count **)(v25 + 24);
  *(_QWORD *)(v25 + 16) = v23;
  *(_QWORD *)(v25 + 24) = v24;
  if (v28)
  {
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = *(_QWORD *)(v12 + 64);
  v32 = a1[119];
  *(_QWORD *)(v31 + 48) = v32;
  *(_QWORD *)(v31 + 56) = 0;
  v33 = *(_QWORD *)(v12 + 160);
  v34 = a1[120];
  if (v34)
  {
    v35 = (unint64_t *)(v34 + 8);
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
  }
  v37 = *(std::__shared_weak_count **)(v33 + 56);
  *(_QWORD *)(v33 + 48) = v32;
  *(_QWORD *)(v33 + 56) = v34;
  if (v37)
  {
    v38 = (unint64_t *)&v37->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  **(_QWORD **)(v12 + 96) = a3[15];
  *(_QWORD *)(*(_QWORD *)(v12 + 96) + 8) = *a4;
  *(_QWORD *)(*(_QWORD *)(v12 + 96) + 16) = *a5;
  md::writeSourceConstants<md::VenueTileData,md::Stroke2StyleProperties>(a2, (uint64_t)a3, *(_QWORD *)(*(_QWORD *)(v12 + 64) + 32), a6);
  v40 = *(_QWORD **)(*(_QWORD *)(v12 + 64) + 64);
  v41 = v40[1];
  v42 = (_QWORD *)v40[9];
  *v42 = 0;
  v42[1] = 0;
  if (v40[8] > v41)
    v41 = v40[8];
  v40[7] = 0;
  v40[8] = v41;
  return v12;
}

uint64_t md::generateStrokeRenderItem<md::VenueTileData,md::Stroke2StyleProperties>(ggl::CommandBuffer *,md::PolygonRenderResources &,md::PolygonLayoutCharacteristics const&,md::PolygonGroupLayoutInfo<md::VenueTileData> const&,md::PolygonConfiguration const&,md::PolygonBlendingConfiguration const&,md::PolygonBlendingConfiguration const&,std::function<BOOL ()(unsigned long long)>,md::PolygonLayoutCharacteristics::StrokeState,md::PolygonRenderDepthType)::{lambda(ggl::RenderItem const&)#1}::operator()(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t *v4;
  unsigned __int8 i;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[24];
  _BYTE *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  result = objc_msgSend(*(id *)(*a1 + 80), "strokeMeshes");
  v4 = *(uint64_t **)result;
  v23 = *(uint64_t **)(result + 8);
  if (*(uint64_t **)result != v23)
  {
    for (i = 0; ; ++i)
    {
      v6 = *(id *)(*a1 + 80);
      v7 = a1[1];
      v8 = *(unsigned int *)(*a1 + 100);
      v9 = a1[2];
      v10 = *(_QWORD *)(v9 + 24);
      if (!v10)
        goto LABEL_6;
      if (v10 != v9)
        break;
      v32 = v31;
      (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v9 + 24) + 24))(*(_QWORD *)(v9 + 24), v31);
LABEL_8:
      v11 = (uint64_t *)objc_msgSend(v6, "commitRangesToStrokeRenderItemBatcher:forMeshAtIndex:cullingMask:featureIdPredicate:", v7 + 984, i, v8, v31, v23);
      v12 = v32;
      if (v32 == v31)
      {
        v12 = v31;
        v13 = 4;
        goto LABEL_12;
      }
      if (v32)
      {
        v13 = 5;
LABEL_12:
        (*(void (**)(void))(*v12 + 8 * v13))();
      }

      v14 = a1[3];
      v15 = a1[1];
      v16 = *v4;
      v18 = *(_QWORD *)(a2 + 8);
      v17 = *(_QWORD *)(a2 + 16);
      v27 = *(_OWORD *)(a2 + 56);
      v28 = *(_OWORD *)(a2 + 72);
      v29 = *(_OWORD *)(a2 + 88);
      v30 = *(_OWORD *)(a2 + 104);
      v25 = *(_OWORD *)(a2 + 24);
      v26 = *(_OWORD *)(a2 + 40);
      v19 = *(_QWORD **)(v15 + 1072);
      v20 = v19[1];
      if (v20 == *(_QWORD *)(v15 + 1080))
      {
        v19 = (_QWORD *)*v19;
        if (!v19)
        {
          v19 = malloc_type_malloc(120 * v20 + 16, 0xB644C221uLL);
          *v19 = 0;
          v19[1] = 0;
          **(_QWORD **)(v15 + 1072) = v19;
        }
        *(_QWORD *)(v15 + 1072) = v19;
        v20 = v19[1];
      }
      v21 = &v19[15 * v20];
      v19[1] = v20 + 1;
      v21[2] = &off_1E42B59B0;
      v21[3] = v18;
      v21 += 2;
      v21[2] = v17;
      *(_OWORD *)(v21 + 7) = v27;
      *(_OWORD *)(v21 + 5) = v26;
      *(_OWORD *)(v21 + 3) = v25;
      *(_OWORD *)(v21 + 13) = v30;
      *(_OWORD *)(v21 + 11) = v29;
      *(_OWORD *)(v21 + 9) = v28;
      v21[8] = v16;
      v22 = *v11;
      v21[11] = *v11;
      v21[12] = (v11[1] - v22) >> 4;
      result = ggl::CommandBuffer::pushRenderItem(v14, (ggl::RenderItem *)v21);
      v4 += 2;
      if (v4 == v23)
        return result;
    }
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
LABEL_6:
    v32 = (_BYTE *)v10;
    goto LABEL_8;
  }
  return result;
}

void sub_19FE7244C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t md::writeSourceConstants<md::VenueTileData,md::Stroke1StyleProperties>(uint64_t a1, uint64_t a2, float32x2_t *a3, uint64_t a4, _BYTE *a5)
{
  unint64_t v5;
  __int128 v6;
  float32x2_t *v7;
  float v8;
  uint64_t v9;
  uint64_t v12;
  int v13;
  int v14;
  char *v15;
  float32x2_t *v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  float v25;
  uint64_t v26;
  unsigned int v27;
  float *v28;
  float v29;
  _BOOL4 v30;
  _BOOL4 v32;
  unsigned int v33;
  float v34;
  _BOOL4 v35;
  int v37;
  char v38;
  char v39;
  unint64_t v40;
  float v41;
  float *v42;
  float v43;
  BOOL v44;
  unsigned int v45;
  float v46;
  float v47;
  float v48;
  float v49;
  double v50;
  float32x2_t *v51;
  float v52;
  float *v53;
  float32x2_t *v54;
  __int32 v55;
  uint64_t v56;
  unsigned int v57;
  float *v58;
  float v59;
  BOOL v60;
  unsigned int v61;
  int v62;
  int v63;
  float v64;
  uint64_t v65;
  unsigned int v66;
  float *v67;
  float v68;
  _BOOL4 v69;
  int v71;
  float v72;
  float v73;
  float32x2_t *v74;
  float *v75;
  float32x2_t *v76;
  unsigned int v77;
  float v78;
  _BOOL4 v79;
  int v81;
  _BOOL4 v82;
  unsigned int v83;
  int v84;
  float v85;
  unsigned int v87;
  int v88;
  int v89;
  float v90;
  float v91;
  float32x2_t *v92;
  float *v93;
  unint64_t v94;
  float *v95;
  float v96;
  BOOL v97;
  unsigned int v98;
  unint64_t v99;
  unint64_t v100;
  char *v101;
  char v102;
  float v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  float v107;
  float *v108;
  _BOOL4 v109;
  unint64_t v110;
  unint64_t v111;
  _QWORD *v112;
  int v113;
  int v114;
  unint64_t v115;
  unint64_t v116;
  float v119;
  __int128 v120;
  __int128 v121;
  _QWORD v122[2];
  unsigned __int8 v123;
  __int128 v124;
  unint64_t v125;
  unint64_t v126;
  __int16 v127;
  float32x2_t *v128;
  BOOL v129[9];

  v124 = 0uLL;
  v5 = *(_QWORD *)(a4 + 8);
  *(_QWORD *)&v6 = 0;
  *((_QWORD *)&v6 + 1) = a4;
  v7 = *(float32x2_t **)(a4 + 72);
  v124 = v6;
  v125 = 0;
  v126 = v5;
  v128 = v7;
  v127 = 1;
  v7->i32[0] = *(_DWORD *)(a2 + 48);
  v7->i32[1] = *(_DWORD *)(a2 + 52);
  v7[1].i32[0] = *(_DWORD *)(a2 + 56);
  v7[1].i32[1] = *(_DWORD *)(a2 + 60);
  v7[2].i32[0] = *(_DWORD *)(a2 + 64);
  v7[2].i32[1] = *(_DWORD *)(a2 + 68);
  v7[3].i32[0] = *(_DWORD *)(a2 + 72);
  v7[3].i32[1] = *(_DWORD *)(a2 + 76);
  v7[4].i32[0] = *(_DWORD *)(a2 + 80);
  v7[4].i32[1] = *(_DWORD *)(a2 + 84);
  v7[5].i32[0] = *(_DWORD *)(a2 + 88);
  v7[5].i32[1] = *(_DWORD *)(a2 + 92);
  v7[6].i32[0] = *(_DWORD *)(a2 + 96);
  v7[6].i32[1] = *(_DWORD *)(a2 + 100);
  v7[7].i32[0] = *(_DWORD *)(a2 + 104);
  v7[7].i32[1] = *(_DWORD *)(a2 + 108);
  v8 = *(float *)(a2 + 144) * a3[2].f32[1];
  *(float *)&v6 = v8 * a3[2].f32[0];
  v7[40] = vmul_n_f32(a3[1], v8);
  v7[41].i32[0] = v6;
  v119 = v8;
  v7[41].f32[1] = v8;
  v7[58].i32[0] = *(_DWORD *)(a1 + 56);
  *(float *)&v6 = 1.0 / *(double *)(a1 + 64);
  v7[58].i32[1] = v6;
  v7[59].i32[0] = *(_DWORD *)(a2 + 148);
  *a5 = 0;
  v9 = **(_QWORD **)(a2 + 160);
  if (*(_QWORD *)(*(_QWORD *)(a2 + 160) + 8) != v9)
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    while (1)
    {
      v17 = *(_OWORD *)(v9 + 16 * v12);
      v120 = v17;
      v18 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
      if (*((_QWORD *)&v17 + 1))
      {
        v19 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
        v121 = v17;
        do
          v21 = __ldxr(v19);
        while (__stxr(v21 + 1, v19));
        v22 = v17;
      }
      else
      {
        v22 = v17;
        v121 = (unint64_t)v17;
      }
      v122[0] = 0;
      v122[1] = 0;
      v123 = 0;
      if (v22)
        LODWORD(v22) = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v22 + 48))(v22, v122);
      v123 = v22;
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v24 = __ldaxr(p_shared_owners);
        while (__stlxr(v24 - 1, p_shared_owners));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
        LODWORD(v22) = v123;
      }
      v25 = 0.0;
      if (!(_DWORD)v22)
      {
        v32 = 0;
        goto LABEL_64;
      }
      v26 = *(_QWORD *)(v121 + 24);
      v27 = (int)*(float *)(a1 + 48) >= 0x17 ? 23 : (int)*(float *)(a1 + 48);
      v28 = *(float **)v26;
      if (!*(_QWORD *)v26)
        break;
      v29 = *v28;
      v30 = *v28 == 1.0;
      if (!*(_BYTE *)(v26 + 10))
        goto LABEL_34;
      if (v29 == 0.0 || v29 == 1.0)
        goto LABEL_34;
LABEL_35:
      if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(_QWORD *)(v121 + 24), 0x11Du, v27, 0) & 1) != 0)
        goto LABEL_38;
      v33 = 1;
LABEL_37:
      if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v26, 0x11Du, v27, v33))
      {
LABEL_38:
        if (v28)
        {
          v34 = *v28;
          v35 = *v28 == 1.0;
          if (*(_BYTE *)(v26 + 10))
          {
            if (v34 != 0.0 && v34 != 1.0)
              goto LABEL_49;
          }
        }
        else
        {
          v35 = 0;
        }
        v37 = *(unsigned __int8 *)(v26 + v35 + 11);
        v34 = 0.0;
        if (v37 == 2)
        {
LABEL_49:
          LOBYTE(v120) = 1;
          v129[0] = 1;
          v38 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v26, 0x11Du, v27, 0, &v120);
          v39 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v26, 0x11Du, v27, 1, v129);
          if (v34 < 1.0)
            v39 = v38;
        }
        else
        {
          v39 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v26, 0x11Du, v27, v37, 0);
        }
        v32 = v39 != 0;
        if (!v123)
          goto LABEL_64;
        goto LABEL_54;
      }
      v32 = 1;
LABEL_54:
      v40 = *(_QWORD *)(v121 + 24);
      v41 = fminf(fmaxf(*(float *)(a1 + 48), 0.0), 23.0);
      v42 = *(float **)v40;
      if (*(_QWORD *)v40
        && (v43 = *v42, LODWORD(v42) = *v42 == 1.0, *(_BYTE *)(v40 + 10))
        && (v43 != 0.0 ? (v44 = v43 == 1.0) : (v44 = 1), !v44)
        || (v45 = *(unsigned __int8 *)(v40 + v42 + 11), v43 = 0.0, v45 == 2))
      {
        LOBYTE(v120) = 1;
        v129[0] = 1;
        gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v40, 0x61u, 0, (BOOL *)&v120, v41);
        v47 = v46;
        gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v40, 0x61u, 1u, v129, v41);
        v25 = v47 + (float)((float)(v48 - v47) * v43);
      }
      else
      {
        gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(*(_QWORD *)(v121 + 24), 0x61u, v45, 0, v41);
        v25 = v49;
      }
LABEL_64:
      v50 = *(double *)(a1 + 64) * 1.75;
      if (v32 && v25 < 0.0001)
      {
        v51 = v128;
        if (*(_BYTE *)(a1 + 120))
        {
          v15 = (char *)v128 + 4 * v12;
          *((_DWORD *)v15 + 84) = 0;
          *((_DWORD *)v15 + 100) = 0;
          v16 = &v51[2 * v12];
          v16[8] = 0;
          v16[9] = 0;
          v51[59].i32[1] = 0;
        }
        else
        {
          v52 = v50;
          v53 = (float *)v128 + v12;
          v53[84] = v52;
          v53[100] = 0.0;
          v54 = &v51[2 * v12];
          v54[8] = 0;
          v54[9] = 0;
          v55 = v123;
          if (v123)
          {
            v56 = *(_QWORD *)(v121 + 24);
            if ((int)*(float *)(a1 + 48) >= 0x17)
              v57 = 23;
            else
              v57 = (int)*(float *)(a1 + 48);
            v58 = *(float **)v56;
            if (*(_QWORD *)v56
              && (v59 = *v58, LODWORD(v58) = *v58 == 1.0, *(_BYTE *)(v56 + 10))
              && (v59 != 0.0 ? (v60 = v59 == 1.0) : (v60 = 1), !v60)
              || (v61 = *(unsigned __int8 *)(v56 + v58 + 11), v59 = 0.0, v61 == 2))
            {
              LOBYTE(v120) = 1;
              v129[0] = 1;
              v62 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v56, 0x1A4u, v57, 0, &v120);
              v63 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v56, 0x1A4u, v57, 1u, v129);
              if (v59 < 1.0)
                LOBYTE(v63) = v62;
            }
            else
            {
              LOBYTE(v63) = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(_QWORD *)(v121 + 24), 0x1A4u, v57, v61, 0);
            }
            v55 = v63 == 1;
          }
          v51[59].i32[1] = v55;
          v13 |= v119 > 0.001;
        }
        goto LABEL_4;
      }
      v64 = v50 * v25;
      if (!v123)
      {
        v71 = *(unsigned __int8 *)(a2 + 152);
        if (v71 == 1)
          v72 = 0.0;
        else
          v72 = 1.0;
        if (v71 == 1)
          v73 = -1.0;
        else
          v73 = 0.0;
        if (v71 == 2)
        {
          v72 = 0.5;
          v73 = -0.5;
        }
        v74 = v128;
        v75 = (float *)v128 + v12;
        v75[84] = v72 * v64;
        v75[100] = v73 * v64;
        v74[59].i32[1] = 0;
        v76 = &v74[2 * v12];
        v13 |= v119 > 0.001;
        v76[8] = 0;
        v76[9] = 0;
        goto LABEL_4;
      }
      v65 = *(_QWORD *)(v121 + 24);
      if ((int)*(float *)(a1 + 48) >= 0x17)
        v66 = 23;
      else
        v66 = (int)*(float *)(a1 + 48);
      v67 = *(float **)v65;
      if (!*(_QWORD *)v65)
      {
        v69 = 0;
LABEL_104:
        v77 = *(unsigned __int8 *)(v65 + v69 + 11);
        if (v77 != 2)
          goto LABEL_107;
        goto LABEL_105;
      }
      v68 = *v67;
      v69 = *v67 == 1.0;
      if (!*(_BYTE *)(v65 + 10))
        goto LABEL_104;
      if (v68 == 0.0 || v68 == 1.0)
        goto LABEL_104;
LABEL_105:
      if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(_QWORD *)(v121 + 24), 0x13Fu, v66, 0) & 1) != 0)
        goto LABEL_108;
      v77 = 1;
LABEL_107:
      if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v65, 0x13Fu, v66, v77))
      {
        LOBYTE(v81) = *(_BYTE *)(a2 + 152);
        if (!v67)
          goto LABEL_117;
        goto LABEL_127;
      }
LABEL_108:
      if (v67)
      {
        v78 = *v67;
        v79 = *v67 == 1.0;
        if (*(_BYTE *)(v65 + 10))
        {
          if (v78 != 0.0 && v78 != 1.0)
            goto LABEL_120;
        }
      }
      else
      {
        v79 = 0;
      }
      v83 = *(unsigned __int8 *)(v65 + v79 + 11);
      v78 = 0.0;
      if (v83 != 2)
      {
        v81 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v65, 0x13Fu, v66, v83, 0);
        goto LABEL_123;
      }
LABEL_120:
      LOBYTE(v120) = 1;
      v129[0] = 1;
      v81 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v65, 0x13Fu, v66, 0, &v120);
      v84 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v65, 0x13Fu, v66, 1u, v129);
      if (v78 >= 1.0)
        LOBYTE(v81) = v84;
LABEL_123:
      v65 = *(_QWORD *)(v121 + 24);
      v67 = *(float **)v65;
      if ((int)*(float *)(a1 + 48) >= 0x17)
        v66 = 23;
      else
        v66 = (int)*(float *)(a1 + 48);
      if (!v67)
      {
LABEL_117:
        v82 = 0;
        goto LABEL_133;
      }
LABEL_127:
      v85 = *v67;
      v82 = *v67 == 1.0;
      if (*(_BYTE *)(v65 + 10))
      {
        if (v85 != 0.0 && v85 != 1.0)
        {
LABEL_134:
          LOBYTE(v120) = 1;
          v129[0] = 1;
          v88 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v65, 0x1A4u, v66, 0, &v120);
          v89 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v65, 0x1A4u, v66, 1u, v129);
          if (v85 < 1.0)
            LOBYTE(v89) = v88;
          goto LABEL_138;
        }
      }
LABEL_133:
      v87 = *(unsigned __int8 *)(v65 + v82 + 11);
      v85 = 0.0;
      if (v87 == 2)
        goto LABEL_134;
      LOBYTE(v89) = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v65, 0x1A4u, v66, v87, 0);
LABEL_138:
      if (v81 == 2)
      {
        v90 = -0.5;
        v91 = 0.5;
      }
      else if (v81 == 1)
      {
        v90 = -1.0;
        v91 = 0.0;
      }
      else
      {
        v90 = 0.0;
        v91 = 1.0;
      }
      v92 = v128;
      v93 = (float *)v128 + v12;
      v93[84] = v91 * v64;
      v93[100] = v90 * v64;
      v92[59].i32[1] = v89 == 1;
      v94 = *(_QWORD *)(v121 + 24);
      v95 = *(float **)v94;
      if (*(_QWORD *)v94
        && (v96 = *v95, LODWORD(v95) = *v95 == 1.0, *(_BYTE *)(v94 + 10))
        && (v96 != 0.0 ? (v97 = v96 == 1.0) : (v97 = 1), !v97)
        || (v98 = *(unsigned __int8 *)(v94 + v95 + 11), v96 = 0.0, v98 == 2))
      {
        LOBYTE(v120) = 1;
        v129[0] = 1;
        v99 = gss::RenderStyle<gss::PropertyID>::styleValueForKey<BOOL>(v94, 0x6Bu, 0, &v120);
        v100 = gss::RenderStyle<gss::PropertyID>::styleValueForKey<BOOL>(v94, 0x6Bu, 1u, v129);
        if (v96 >= 1.0)
          v101 = (char *)v100;
        else
          v101 = (char *)v99;
        v102 = *v101;
      }
      else
      {
        v102 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<BOOL>(*(_QWORD *)(v121 + 24), 0x6Bu, v98, 0);
      }
      v103 = *(float *)(a1 + 48);
      if (v102)
      {
        gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v120, *(_QWORD *)(v121 + 24), 0x5Du, 2u, fminf(fmaxf(v103, 0.0), 23.0));
      }
      else
      {
        if ((int)v103 >= 0x17)
          v104 = 23;
        else
          v104 = (int)v103;
        gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v120, *(_QWORD *)(v121 + 24), 0x5Du, v104, 2u, 0);
      }
      v105 = WORD1(v120);
      v106 = WORD2(v120);
      v107 = (float)WORD3(v120) * (float)(0.000015259 * *(float *)(a2 + 144));
      v108 = (float *)&v92[2 * v12];
      v108[16] = (float)(v107 * 0.000015259) * (float)(unsigned __int16)v120;
      v108[17] = (float)(v107 * 0.000015259) * (float)v105;
      v108[18] = (float)(v107 * 0.000015259) * (float)v106;
      v108[19] = v107;
      v109 = v119 > 0.001 || v107 > 0.001;
      v13 |= v109;
      *a5 |= v107 < 1.0;
LABEL_4:
      gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v121);
      v12 = ++v14;
      v9 = **(_QWORD **)(a2 + 160);
      if (v14 >= (unint64_t)((*(_QWORD *)(*(_QWORD *)(a2 + 160) + 8) - v9) >> 4))
        goto LABEL_170;
    }
    v30 = 0;
LABEL_34:
    v33 = *(unsigned __int8 *)(v26 + v30 + 11);
    if (v33 != 2)
      goto LABEL_37;
    goto LABEL_35;
  }
  LOBYTE(v13) = 0;
  if (v128)
  {
LABEL_170:
    v111 = v125;
    v110 = v126;
    if (v126 != v125)
    {
      v112 = (_QWORD *)*((_QWORD *)&v124 + 1);
      v113 = v127;
      v114 = HIBYTE(v127);
      if ((_QWORD)v124 && *(_BYTE *)(*((_QWORD *)&v124 + 1) + 17) != 2)
        (*(void (**)(void))(*(_QWORD *)v124 + 64))();
      if (v113 && !v114)
      {
        v116 = v112[7];
        v115 = v112[8];
        if (v115 == v116)
          v116 = v112[10] - v112[9];
        if (v111 < v116)
          v116 = v111;
        if (v115 <= v110)
          v115 = v110;
        if (v115 == v116)
          v115 = v116 + v112[10] - v112[9];
        v112[7] = v116;
        v112[8] = v115;
      }
    }
  }
  return v13 & 1;
}

void sub_19FE72F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)va);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)va1);
  _Unwind_Resume(a1);
}

uint64_t md::animatingPolygonStrokePipelineSetup<md::VenueTileData,md::Stroke1StyleProperties>(uint64_t *a1, uint64_t a2, uint64_t a3, float32x2_t *a4, float32x2_t *a5, _BYTE *a6)
{
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  int v40;
  _QWORD *v41;
  unint64_t v42;
  float v43;
  float32_t v44;
  float32x2_t *v45;
  unint64_t v46;
  int v47;

  v12 = ggl::FragmentedPool<ggl::RenderItem>::pop(a1[25]);
  v13 = *(_QWORD **)(v12 + 64);
  v14 = *(_QWORD *)a3;
  v15 = *(_QWORD *)(a3 + 8);
  *v13 = *(_QWORD *)a3;
  v13[1] = 0;
  v16 = *(_QWORD **)(v12 + 160);
  if (v15)
  {
    v17 = (unint64_t *)(v15 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = (std::__shared_weak_count *)v16[1];
  *v16 = v14;
  v16[1] = v15;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = *(_QWORD *)(v12 + 64);
  v23 = *(_QWORD *)(a3 + 32);
  v24 = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(v22 + 16) = v23;
  *(_QWORD *)(v22 + 24) = 0;
  v25 = *(_QWORD *)(v12 + 160);
  if (v24)
  {
    v26 = (unint64_t *)(v24 + 8);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  v28 = *(std::__shared_weak_count **)(v25 + 24);
  *(_QWORD *)(v25 + 16) = v23;
  *(_QWORD *)(v25 + 24) = v24;
  if (v28)
  {
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = *(_QWORD *)(v12 + 64);
  v32 = a1[119];
  *(_QWORD *)(v31 + 48) = v32;
  *(_QWORD *)(v31 + 56) = 0;
  v33 = *(_QWORD *)(v12 + 160);
  v34 = a1[120];
  if (v34)
  {
    v35 = (unint64_t *)(v34 + 8);
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
  }
  v37 = *(std::__shared_weak_count **)(v33 + 56);
  *(_QWORD *)(v33 + 48) = v32;
  *(_QWORD *)(v33 + 56) = v34;
  if (v37)
  {
    v38 = (unint64_t *)&v37->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  **(_QWORD **)(v12 + 96) = *(_QWORD *)(a3 + 120);
  *(float32x2_t *)(*(_QWORD *)(v12 + 96) + 8) = *a4;
  *(float32x2_t *)(*(_QWORD *)(v12 + 96) + 16) = *a5;
  v40 = md::writeSourceConstants<md::VenueTileData,md::Stroke1StyleProperties>(a2, a3, a4, *(_QWORD *)(*(_QWORD *)(v12 + 64) + 32), a6);
  v41 = *(_QWORD **)(*(_QWORD *)(v12 + 64) + 64);
  v42 = v41[1];
  v43 = *(float *)(a3 + 144) * a5[2].f32[1];
  v44 = v43 * a5[2].f32[0];
  v46 = v41[8];
  v45 = (float32x2_t *)v41[9];
  *v45 = vmul_n_f32(a5[1], v43);
  v45[1].f32[0] = v44;
  v45[1].f32[1] = v43;
  if (v46 > v42)
    v42 = v46;
  v41[7] = 0;
  v41[8] = v42;
  if (v43 >= 0.0)
    v47 = 1;
  else
    v47 = v40;
  if (v47)
    return v12;
  else
    return 0;
}

uint64_t md::generateStrokeRenderItem<md::VenueTileData,md::Stroke1StyleProperties>(ggl::CommandBuffer *,md::PolygonRenderResources &,md::PolygonLayoutCharacteristics const&,md::PolygonGroupLayoutInfo<md::VenueTileData> const&,md::PolygonConfiguration const&,md::PolygonBlendingConfiguration const&,md::PolygonBlendingConfiguration const&,std::function<BOOL ()(unsigned long long)>,md::PolygonLayoutCharacteristics::StrokeState,md::PolygonRenderDepthType)::{lambda(ggl::RenderItem const&)#1}::operator()(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t *v4;
  unsigned __int8 i;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[24];
  _BYTE *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  result = objc_msgSend(*(id *)(*a1 + 80), "strokeMeshes");
  v4 = *(uint64_t **)result;
  v23 = *(uint64_t **)(result + 8);
  if (*(uint64_t **)result != v23)
  {
    for (i = 0; ; ++i)
    {
      v6 = *(id *)(*a1 + 80);
      v7 = a1[1];
      v8 = *(unsigned int *)(*a1 + 100);
      v9 = a1[2];
      v10 = *(_QWORD *)(v9 + 24);
      if (!v10)
        goto LABEL_6;
      if (v10 != v9)
        break;
      v32 = v31;
      (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v9 + 24) + 24))(*(_QWORD *)(v9 + 24), v31);
LABEL_8:
      v11 = (uint64_t *)objc_msgSend(v6, "commitRangesToStrokeRenderItemBatcher:forMeshAtIndex:cullingMask:featureIdPredicate:", v7 + 984, i, v8, v31, v23);
      v12 = v32;
      if (v32 == v31)
      {
        v12 = v31;
        v13 = 4;
        goto LABEL_12;
      }
      if (v32)
      {
        v13 = 5;
LABEL_12:
        (*(void (**)(void))(*v12 + 8 * v13))();
      }

      v14 = a1[3];
      v15 = a1[1];
      v16 = *v4;
      v18 = *(_QWORD *)(a2 + 8);
      v17 = *(_QWORD *)(a2 + 16);
      v27 = *(_OWORD *)(a2 + 56);
      v28 = *(_OWORD *)(a2 + 72);
      v29 = *(_OWORD *)(a2 + 88);
      v30 = *(_OWORD *)(a2 + 104);
      v25 = *(_OWORD *)(a2 + 24);
      v26 = *(_OWORD *)(a2 + 40);
      v19 = *(_QWORD **)(v15 + 1072);
      v20 = v19[1];
      if (v20 == *(_QWORD *)(v15 + 1080))
      {
        v19 = (_QWORD *)*v19;
        if (!v19)
        {
          v19 = malloc_type_malloc(120 * v20 + 16, 0xB644C221uLL);
          *v19 = 0;
          v19[1] = 0;
          **(_QWORD **)(v15 + 1072) = v19;
        }
        *(_QWORD *)(v15 + 1072) = v19;
        v20 = v19[1];
      }
      v21 = &v19[15 * v20];
      v19[1] = v20 + 1;
      v21[2] = &off_1E42B59B0;
      v21[3] = v18;
      v21 += 2;
      v21[2] = v17;
      *(_OWORD *)(v21 + 7) = v27;
      *(_OWORD *)(v21 + 5) = v26;
      *(_OWORD *)(v21 + 3) = v25;
      *(_OWORD *)(v21 + 13) = v30;
      *(_OWORD *)(v21 + 11) = v29;
      *(_OWORD *)(v21 + 9) = v28;
      v21[8] = v16;
      v22 = *v11;
      v21[11] = *v11;
      v21[12] = (v11[1] - v22) >> 4;
      result = ggl::CommandBuffer::pushRenderItem(v14, (ggl::RenderItem *)v21);
      v4 += 2;
      if (v4 == v23)
        return result;
    }
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
LABEL_6:
    v32 = (_BYTE *)v10;
    goto LABEL_8;
  }
  return result;
}

void sub_19FE73478(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<void md::_layoutPolygonTiles<md::MapTileDataRenderable<md::VenueTileData>>(std::vector<md::MapTileDataRenderable<md::VenueTileData> *,std::allocator<md::MapTileDataRenderable<md::VenueTileData> *>> const&,md::LayoutContext const&,md::PolygonRenderResources &,std::array<ggl::CommandBuffer *,3ul> const&,ggl::CommandBuffer *,ggl::CommandBuffer *,geo::QuadTile const*,float,std::function<BOOL ()(md::MapTileDataRenderable<md::VenueTileData> const*)>,md::PolygonGroupLayoutInfo<md::MapTileDataRenderable<md::VenueTileData>::MapTileDataType> &,md::PolygonLayoutCharacteristics const&,BOOL)::{lambda(unsigned long long)#1},std::allocator<void md::_layoutPolygonTiles<md::MapTileDataRenderable<md::VenueTileData>>(std::vector<md::MapTileDataRenderable<md::VenueTileData> *,std::allocator<md::MapTileDataRenderable<md::VenueTileData> *>> const&,md::LayoutContext const&,md::PolygonRenderResources &,std::array<ggl::CommandBuffer *,3ul> const&,ggl::CommandBuffer *,ggl::CommandBuffer *,geo::QuadTile const*,float,std::function<BOOL ()(md::MapTileDataRenderable<md::VenueTileData> const*)>,md::PolygonGroupLayoutInfo<md::MapTileDataRenderable<md::VenueTileData>::MapTileDataType> &,md::PolygonLayoutCharacteristics const&,BOOL)::{lambda(unsigned long long)#1}>,BOOL ()(unsigned long long)>::~__func(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E42D03A0;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void std::__function::__func<void md::_layoutPolygonTiles<md::MapTileDataRenderable<md::VenueTileData>>(std::vector<md::MapTileDataRenderable<md::VenueTileData> *,std::allocator<md::MapTileDataRenderable<md::VenueTileData> *>> const&,md::LayoutContext const&,md::PolygonRenderResources &,std::array<ggl::CommandBuffer *,3ul> const&,ggl::CommandBuffer *,ggl::CommandBuffer *,geo::QuadTile const*,float,std::function<BOOL ()(md::MapTileDataRenderable<md::VenueTileData> const*)>,md::PolygonGroupLayoutInfo<md::MapTileDataRenderable<md::VenueTileData>::MapTileDataType> &,md::PolygonLayoutCharacteristics const&,BOOL)::{lambda(unsigned long long)#1},std::allocator<void md::_layoutPolygonTiles<md::MapTileDataRenderable<md::VenueTileData>>(std::vector<md::MapTileDataRenderable<md::VenueTileData> *,std::allocator<md::MapTileDataRenderable<md::VenueTileData> *>> const&,md::LayoutContext const&,md::PolygonRenderResources &,std::array<ggl::CommandBuffer *,3ul> const&,ggl::CommandBuffer *,ggl::CommandBuffer *,geo::QuadTile const*,float,std::function<BOOL ()(md::MapTileDataRenderable<md::VenueTileData> const*)>,md::PolygonGroupLayoutInfo<md::MapTileDataRenderable<md::VenueTileData>::MapTileDataType> &,md::PolygonLayoutCharacteristics const&,BOOL)::{lambda(unsigned long long)#1}>,BOOL ()(unsigned long long)>::~__func(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E42D03A0;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<void md::_layoutPolygonTiles<md::MapTileDataRenderable<md::VenueTileData>>(std::vector<md::MapTileDataRenderable<md::VenueTileData> *,std::allocator<md::MapTileDataRenderable<md::VenueTileData> *>> const&,md::LayoutContext const&,md::PolygonRenderResources &,std::array<ggl::CommandBuffer *,3ul> const&,ggl::CommandBuffer *,ggl::CommandBuffer *,geo::QuadTile const*,float,std::function<BOOL ()(md::MapTileDataRenderable<md::VenueTileData> const*)>,md::PolygonGroupLayoutInfo<md::MapTileDataRenderable<md::VenueTileData>::MapTileDataType> &,md::PolygonLayoutCharacteristics const&,BOOL)::{lambda(unsigned long long)#1},std::allocator<void md::_layoutPolygonTiles<md::MapTileDataRenderable<md::VenueTileData>>(std::vector<md::MapTileDataRenderable<md::VenueTileData> *,std::allocator<md::MapTileDataRenderable<md::VenueTileData> *>> const&,md::LayoutContext const&,md::PolygonRenderResources &,std::array<ggl::CommandBuffer *,3ul> const&,ggl::CommandBuffer *,ggl::CommandBuffer *,geo::QuadTile const*,float,std::function<BOOL ()(md::MapTileDataRenderable<md::VenueTileData> const*)>,md::PolygonGroupLayoutInfo<md::MapTileDataRenderable<md::VenueTileData>::MapTileDataType> &,md::PolygonLayoutCharacteristics const&,BOOL)::{lambda(unsigned long long)#1}>,BOOL ()(unsigned long long)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;

  v2 = operator new(0x20uLL);
  *v2 = &off_1E42D03A0;
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0;
  v4 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      abort();
    v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    v7 = &v6[8 * (v5 >> 3)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    v2[2] = v7;
  }
  return v2;
}

void sub_19FE735D4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<void md::_layoutPolygonTiles<md::MapTileDataRenderable<md::VenueTileData>>(std::vector<md::MapTileDataRenderable<md::VenueTileData> *,std::allocator<md::MapTileDataRenderable<md::VenueTileData> *>> const&,md::LayoutContext const&,md::PolygonRenderResources &,std::array<ggl::CommandBuffer *,3ul> const&,ggl::CommandBuffer *,ggl::CommandBuffer *,geo::QuadTile const*,float,std::function<BOOL ()(md::MapTileDataRenderable<md::VenueTileData> const*)>,md::PolygonGroupLayoutInfo<md::MapTileDataRenderable<md::VenueTileData>::MapTileDataType> &,md::PolygonLayoutCharacteristics const&,BOOL)::{lambda(unsigned long long)#1},std::allocator<void md::_layoutPolygonTiles<md::MapTileDataRenderable<md::VenueTileData>>(std::vector<md::MapTileDataRenderable<md::VenueTileData> *,std::allocator<md::MapTileDataRenderable<md::VenueTileData> *>> const&,md::LayoutContext const&,md::PolygonRenderResources &,std::array<ggl::CommandBuffer *,3ul> const&,ggl::CommandBuffer *,ggl::CommandBuffer *,geo::QuadTile const*,float,std::function<BOOL ()(md::MapTileDataRenderable<md::VenueTileData> const*)>,md::PolygonGroupLayoutInfo<md::MapTileDataRenderable<md::VenueTileData>::MapTileDataType> &,md::PolygonLayoutCharacteristics const&,BOOL)::{lambda(unsigned long long)#1}>,BOOL ()(unsigned long long)>::__clone(_QWORD *result, _QWORD *a2)
{
  _BYTE *v2;
  _BYTE *v3;
  int64_t v4;
  char *v6;
  char *v7;

  *a2 = &off_1E42D03A0;
  a2[1] = 0;
  a2[2] = 0;
  a2[3] = 0;
  v3 = (_BYTE *)result[1];
  v2 = (_BYTE *)result[2];
  v4 = v2 - v3;
  if (v2 != v3)
  {
    if (v4 < 0)
      abort();
    v6 = (char *)operator new(v2 - v3);
    a2[1] = v6;
    a2[2] = v6;
    v7 = &v6[8 * (v4 >> 3)];
    a2[3] = v7;
    result = memcpy(v6, v3, v4);
    a2[2] = v7;
  }
  return result;
}

void std::__function::__func<void md::_layoutPolygonTiles<md::MapTileDataRenderable<md::VenueTileData>>(std::vector<md::MapTileDataRenderable<md::VenueTileData> *,std::allocator<md::MapTileDataRenderable<md::VenueTileData> *>> const&,md::LayoutContext const&,md::PolygonRenderResources &,std::array<ggl::CommandBuffer *,3ul> const&,ggl::CommandBuffer *,ggl::CommandBuffer *,geo::QuadTile const*,float,std::function<BOOL ()(md::MapTileDataRenderable<md::VenueTileData> const*)>,md::PolygonGroupLayoutInfo<md::MapTileDataRenderable<md::VenueTileData>::MapTileDataType> &,md::PolygonLayoutCharacteristics const&,BOOL)::{lambda(unsigned long long)#1},std::allocator<void md::_layoutPolygonTiles<md::MapTileDataRenderable<md::VenueTileData>>(std::vector<md::MapTileDataRenderable<md::VenueTileData> *,std::allocator<md::MapTileDataRenderable<md::VenueTileData> *>> const&,md::LayoutContext const&,md::PolygonRenderResources &,std::array<ggl::CommandBuffer *,3ul> const&,ggl::CommandBuffer *,ggl::CommandBuffer *,geo::QuadTile const*,float,std::function<BOOL ()(md::MapTileDataRenderable<md::VenueTileData> const*)>,md::PolygonGroupLayoutInfo<md::MapTileDataRenderable<md::VenueTileData>::MapTileDataType> &,md::PolygonLayoutCharacteristics const&,BOOL)::{lambda(unsigned long long)#1}>,BOOL ()(unsigned long long)>::destroy(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void std::__function::__func<void md::_layoutPolygonTiles<md::MapTileDataRenderable<md::VenueTileData>>(std::vector<md::MapTileDataRenderable<md::VenueTileData> *,std::allocator<md::MapTileDataRenderable<md::VenueTileData> *>> const&,md::LayoutContext const&,md::PolygonRenderResources &,std::array<ggl::CommandBuffer *,3ul> const&,ggl::CommandBuffer *,ggl::CommandBuffer *,geo::QuadTile const*,float,std::function<BOOL ()(md::MapTileDataRenderable<md::VenueTileData> const*)>,md::PolygonGroupLayoutInfo<md::MapTileDataRenderable<md::VenueTileData>::MapTileDataType> &,md::PolygonLayoutCharacteristics const&,BOOL)::{lambda(unsigned long long)#1},std::allocator<void md::_layoutPolygonTiles<md::MapTileDataRenderable<md::VenueTileData>>(std::vector<md::MapTileDataRenderable<md::VenueTileData> *,std::allocator<md::MapTileDataRenderable<md::VenueTileData> *>> const&,md::LayoutContext const&,md::PolygonRenderResources &,std::array<ggl::CommandBuffer *,3ul> const&,ggl::CommandBuffer *,ggl::CommandBuffer *,geo::QuadTile const*,float,std::function<BOOL ()(md::MapTileDataRenderable<md::VenueTileData> const*)>,md::PolygonGroupLayoutInfo<md::MapTileDataRenderable<md::VenueTileData>::MapTileDataType> &,md::PolygonLayoutCharacteristics const&,BOOL)::{lambda(unsigned long long)#1}>,BOOL ()(unsigned long long)>::destroy_deallocate(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

BOOL std::__function::__func<void md::_layoutPolygonTiles<md::MapTileDataRenderable<md::VenueTileData>>(std::vector<md::MapTileDataRenderable<md::VenueTileData> *,std::allocator<md::MapTileDataRenderable<md::VenueTileData> *>> const&,md::LayoutContext const&,md::PolygonRenderResources &,std::array<ggl::CommandBuffer *,3ul> const&,ggl::CommandBuffer *,ggl::CommandBuffer *,geo::QuadTile const*,float,std::function<BOOL ()(md::MapTileDataRenderable<md::VenueTileData> const*)>,md::PolygonGroupLayoutInfo<md::MapTileDataRenderable<md::VenueTileData>::MapTileDataType> &,md::PolygonLayoutCharacteristics const&,BOOL)::{lambda(unsigned long long)#1},std::allocator<void md::_layoutPolygonTiles<md::MapTileDataRenderable<md::VenueTileData>>(std::vector<md::MapTileDataRenderable<md::VenueTileData> *,std::allocator<md::MapTileDataRenderable<md::VenueTileData> *>> const&,md::LayoutContext const&,md::PolygonRenderResources &,std::array<ggl::CommandBuffer *,3ul> const&,ggl::CommandBuffer *,ggl::CommandBuffer *,geo::QuadTile const*,float,std::function<BOOL ()(md::MapTileDataRenderable<md::VenueTileData> const*)>,md::PolygonGroupLayoutInfo<md::MapTileDataRenderable<md::VenueTileData>::MapTileDataType> &,md::PolygonLayoutCharacteristics const&,BOOL)::{lambda(unsigned long long)#1}>,BOOL ()(unsigned long long)>::operator()(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = *(_QWORD **)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 16);
  if (v2 != v3)
  {
    while (*v2 != *a2)
    {
      if (++v2 == v3)
      {
        v2 = *(_QWORD **)(a1 + 16);
        return v2 != v3;
      }
    }
  }
  return v2 != v3;
}

void std::__function::__func<void md::layoutPolygonTiles<md::MapTileDataRenderable<md::VenueTileData>>(std::vector<md::MapTileDataRenderable<md::VenueTileData> *,std::allocator<md::MapTileDataRenderable<md::VenueTileData> *>> const&,md::LayoutContext const&,md::CartographicRenderer &,md::PolygonRenderResources &,md::PolygonLayoutCharacteristics const&,BOOL)::{lambda(md::MapTileDataRenderable<md::VenueTileData> const*)#1},std::allocator<void md::layoutPolygonTiles<md::MapTileDataRenderable<md::VenueTileData>>(std::vector<md::MapTileDataRenderable<md::VenueTileData> *,std::allocator<md::MapTileDataRenderable<md::VenueTileData> *>> const&,md::LayoutContext const&,md::CartographicRenderer &,md::PolygonRenderResources &,md::PolygonLayoutCharacteristics const&,BOOL)::{lambda(md::MapTileDataRenderable<md::VenueTileData> const*)#1}>,BOOL ()(md::MapTileDataRenderable<md::VenueTileData> const*)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<void md::layoutPolygonTiles<md::MapTileDataRenderable<md::VenueTileData>>(std::vector<md::MapTileDataRenderable<md::VenueTileData> *,std::allocator<md::MapTileDataRenderable<md::VenueTileData> *>> const&,md::LayoutContext const&,md::CartographicRenderer &,md::PolygonRenderResources &,md::PolygonLayoutCharacteristics const&,BOOL)::{lambda(md::MapTileDataRenderable<md::VenueTileData> const*)#1},std::allocator<void md::layoutPolygonTiles<md::MapTileDataRenderable<md::VenueTileData>>(std::vector<md::MapTileDataRenderable<md::VenueTileData> *,std::allocator<md::MapTileDataRenderable<md::VenueTileData> *>> const&,md::LayoutContext const&,md::CartographicRenderer &,md::PolygonRenderResources &,md::PolygonLayoutCharacteristics const&,BOOL)::{lambda(md::MapTileDataRenderable<md::VenueTileData> const*)#1}>,BOOL ()(md::MapTileDataRenderable<md::VenueTileData> const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42CF8F0;
  return result;
}

void std::__function::__func<void md::layoutPolygonTiles<md::MapTileDataRenderable<md::VenueTileData>>(std::vector<md::MapTileDataRenderable<md::VenueTileData> *,std::allocator<md::MapTileDataRenderable<md::VenueTileData> *>> const&,md::LayoutContext const&,md::CartographicRenderer &,md::PolygonRenderResources &,md::PolygonLayoutCharacteristics const&,BOOL)::{lambda(md::MapTileDataRenderable<md::VenueTileData> const*)#1},std::allocator<void md::layoutPolygonTiles<md::MapTileDataRenderable<md::VenueTileData>>(std::vector<md::MapTileDataRenderable<md::VenueTileData> *,std::allocator<md::MapTileDataRenderable<md::VenueTileData> *>> const&,md::LayoutContext const&,md::CartographicRenderer &,md::PolygonRenderResources &,md::PolygonLayoutCharacteristics const&,BOOL)::{lambda(md::MapTileDataRenderable<md::VenueTileData> const*)#1}>,BOOL ()(md::MapTileDataRenderable<md::VenueTileData> const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42CF8F0;
}

uint64_t std::__function::__func<void md::layoutPolygonTiles<md::MapTileDataRenderable<md::VenueTileData>>(std::vector<md::MapTileDataRenderable<md::VenueTileData> *,std::allocator<md::MapTileDataRenderable<md::VenueTileData> *>> const&,md::LayoutContext const&,md::CartographicRenderer &,md::PolygonRenderResources &,md::PolygonLayoutCharacteristics const&,BOOL)::{lambda(md::MapTileDataRenderable<md::VenueTileData> const*)#1},std::allocator<void md::layoutPolygonTiles<md::MapTileDataRenderable<md::VenueTileData>>(std::vector<md::MapTileDataRenderable<md::VenueTileData> *,std::allocator<md::MapTileDataRenderable<md::VenueTileData> *>> const&,md::LayoutContext const&,md::CartographicRenderer &,md::PolygonRenderResources &,md::PolygonLayoutCharacteristics const&,BOOL)::{lambda(md::MapTileDataRenderable<md::VenueTileData> const*)#1}>,BOOL ()(md::MapTileDataRenderable<md::VenueTileData> const*)>::operator()()
{
  return 1;
}

void md::PolygonLayoutCharacteristics::setSelectedFeatureIds(uint64_t a1, char **a2)
{
  uint64_t v2;
  _BYTE *v3;

  v3 = *(_BYTE **)(a1 + 16);
  v2 = a1 + 16;
  *(_QWORD *)(v2 + 8) = v3;
  std::vector<unsigned long long>::__insert_with_size[abi:nn180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>((char **)v2, v3, *a2, a2[1], (a2[1] - *a2) >> 3);
}

void md::RasterTileResourceFetcher::~RasterTileResourceFetcher(id *this)
{
  md::TiledGEOResourceFetcher::~TiledGEOResourceFetcher(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::RasterTileResourceFetcher::createResource(uint64_t a1, void *a2, unsigned __int16 *a3, char a4, unsigned int a5, uint64_t a6, char a7, uint64_t *a8)
{
  id *v15;
  unsigned int v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  _QWORD *v22;
  id v23;
  _QWORD *v24;
  char *v25;
  char *v26;
  unint64_t v27;
  size_t v28;
  char *v29;
  char *v30;
  unint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  __int128 *v34;
  _OWORD *v35;
  unint64_t v36;
  __int128 v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  _QWORD *v41;
  uint64_t v42;
  char v43;
  unint64_t v44;
  _BYTE *v45;
  __int128 *v46;
  _OWORD *v47;
  unint64_t v48;
  __int128 v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t *v52;
  _QWORD *v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  void *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  size_t v62;
  id v63;
  __int128 v65;
  char v66;
  uint64_t v67;
  void *v68;
  char *v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD v72[5];
  __int128 v73;
  __int128 v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  v15 = (id *)*a8;
  if (gdc::DataObject::length((id *)*a8) != 4
    || (v16 = *(_DWORD *)objc_msgSend(objc_retainAutorelease(v15[2]), "bytes"), v16 == 0x2000000))
  {
    if ((gdc::ResourceFetcher::createResource(a1, a2, a3, a4, a5, a6, a7, a8) & 1) != 0)
      return 1;
    v65 = *(_OWORD *)a8[4];
    md::TiledGEOResourceFetcher::getTileLoader((id *)a1);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "reportCorruptTile:", &v65);

    return 0;
  }
  v19 = *(void **)(a1 + 608);
  objc_msgSend(MEMORY[0x1E0D27418], "defaultConfiguration");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "dataForGenericTileType:configuration:", bswap32(v16), v20);
  v21 = (void *)objc_claimAutoreleasedReturnValue();

  v66 = 0;
  v22 = operator new(0x38uLL);
  v22[1] = 0;
  v22[2] = 0;
  *v22 = &off_1E42DE110;
  v23 = v21;
  v22[3] = &off_1E42B0670;
  v22[4] = &off_1E42B5310;
  v22[5] = v23;
  v63 = v23;
  *(_QWORD *)&v65 = v22 + 3;
  *((_QWORD *)&v65 + 1) = v22;
  if (*((_BYTE *)a8 + 16))
  {
    v24 = v72;
    v25 = (char *)a8[4];
    v67 = a8[3];
    v68 = v72;
    v69 = (char *)v72;
    v70 = v72;
    v71 = 32;
    v26 = (char *)a8[5];
    v27 = v26 - v25;
    if ((unint64_t)(v26 - v25) < 0x21)
      goto LABEL_28;
    if (v27 <= 0x40)
      v28 = 64;
    else
      v28 = v26 - v25;
    v62 = v28;
    v24 = malloc_type_malloc(v28, 0x100004077774924uLL);
    v29 = (char *)v68;
    v30 = v69;
    if (v68 == v69)
    {
LABEL_27:
      v68 = v24;
      v69 = (char *)v24;
      v71 = v62;
LABEL_28:
      if (v25 == v26)
      {
LABEL_46:
        v56 = a8[12];
        v69 = (char *)v24 + v27;
        v72[4] = v56;
        v73 = *(_OWORD *)(a8 + 13);
        v66 = 1;
        goto LABEL_47;
      }
      if (v27 < 8)
      {
        v45 = v24;
        goto LABEL_44;
      }
      if ((unint64_t)((char *)v24 - v25) < 0x20)
      {
        v45 = v24;
        goto LABEL_44;
      }
      if (v27 >= 0x20)
      {
        v44 = v27 & 0xFFFFFFFFFFFFFFE0;
        v46 = (__int128 *)(v25 + 16);
        v47 = v24 + 2;
        v48 = v27 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v49 = *v46;
          *(v47 - 1) = *(v46 - 1);
          *v47 = v49;
          v46 += 2;
          v47 += 2;
          v48 -= 32;
        }
        while (v48);
        if (v27 == v44)
          goto LABEL_45;
        if ((v27 & 0x18) == 0)
        {
          v25 += v44;
          v45 = (char *)v24 + v44;
          goto LABEL_44;
        }
      }
      else
      {
        v44 = 0;
      }
      v50 = v27 & 0xFFFFFFFFFFFFFFF8;
      v45 = (char *)v24 + (v27 & 0xFFFFFFFFFFFFFFF8);
      v51 = v44 - (v27 & 0xFFFFFFFFFFFFFFF8);
      v52 = (uint64_t *)&v25[v44];
      v53 = (_QWORD *)((char *)v24 + v44);
      do
      {
        v54 = *v52++;
        *v53++ = v54;
        v51 += 8;
      }
      while (v51);
      if (v27 == v50)
        goto LABEL_45;
      v25 += v50;
      do
      {
LABEL_44:
        v55 = *v25++;
        *v45++ = v55;
      }
      while (v25 != v26);
LABEL_45:
      v24 = v69;
      goto LABEL_46;
    }
    v31 = v69 - (_BYTE *)v68;
    if ((unint64_t)(v69 - (_BYTE *)v68) < 8)
    {
      v32 = v24;
    }
    else
    {
      v32 = v24;
      if ((unint64_t)((char *)v24 - (_BYTE *)v68) >= 0x20)
      {
        if (v31 < 0x20)
        {
          v33 = 0;
LABEL_21:
          v38 = v31 & 0xFFFFFFFFFFFFFFF8;
          v32 = (char *)v24 + (v31 & 0xFFFFFFFFFFFFFFF8);
          v39 = v33 - (v31 & 0xFFFFFFFFFFFFFFF8);
          v40 = (uint64_t *)&v29[v33];
          v41 = (_QWORD *)((char *)v24 + v33);
          do
          {
            v42 = *v40++;
            *v41++ = v42;
            v39 += 8;
          }
          while (v39);
          if (v31 == v38)
            goto LABEL_27;
          v29 += v38;
          goto LABEL_26;
        }
        v33 = v31 & 0xFFFFFFFFFFFFFFE0;
        v34 = (__int128 *)((char *)v68 + 16);
        v35 = v24 + 2;
        v36 = v31 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v37 = *v34;
          *(v35 - 1) = *(v34 - 1);
          *v35 = v37;
          v34 += 2;
          v35 += 2;
          v36 -= 32;
        }
        while (v36);
        if (v31 == v33)
          goto LABEL_27;
        if ((v31 & 0x18) != 0)
          goto LABEL_21;
        v29 += v33;
        v32 = (char *)v24 + v33;
      }
    }
    do
    {
LABEL_26:
      v43 = *v29++;
      *v32++ = v43;
    }
    while (v29 != v30);
    goto LABEL_27;
  }
LABEL_47:
  v17 = gdc::ResourceFetcher::createResource(a1, a2, a3, a4, a5, a6, a7, &v65);
  if ((v17 & 1) == 0)
  {
    v74 = *(_OWORD *)v68;
    md::TiledGEOResourceFetcher::getTileLoader((id *)a1);
    v57 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v57, "reportCorruptTile:", &v74);

  }
  if (v66)
  {
    if (v68 != v70)
      free(v68);
    v66 = 0;
  }
  v58 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
  if (*((_QWORD *)&v65 + 1))
  {
    v59 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }

  return v17;
}

void sub_19FE73BDC(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  va_list va;

  va_start(va, a5);

  gdc::RawResourceSourceData::~RawResourceSourceData((gdc::RawResourceSourceData *)va);
  _Unwind_Resume(a1);
}

uint64_t md::RasterTileResourceFetcher::tileScale(md::RasterTileResourceFetcher *this)
{
  if (*((_BYTE *)this + 624))
    return *((unsigned int *)this + 155);
  if (*((float *)this + 2) <= 1.0)
    return 1;
  return 2;
}

unint64_t md::RasterTileResourceFetcher::tileKey(uint64_t a1, void *a2)
{
  id v2;
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = a2;
  objc_msgSend(v2, "size");
  objc_msgSend(v2, "scale");
  v3 = objc_msgSend(v2, "style");
  v4 = GEOTileKeyMake();
  if (v3 <= 0x19 && ((1 << v3) & 0x200101C) != 0)
    v5 = 128;
  else
    v5 = (unint64_t)(v3 == 26) << 7;
  v6 = v5 | v4 & 0xFFFFFFFFFFFFFF7FLL;

  return v6;
}

void sub_19FE73D34(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *md::RasterTileResourceFetcher::RasterTileResourceFetcher(_QWORD *a1, void *a2, int a3, int a4, uint64_t *a5, uint64_t a6, float a7)
{
  id v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v24[2];
  _QWORD v25[3];
  _QWORD v26[2];

  v13 = a2;
  LOWORD(v24[0]) = a4;
  v14 = *a5;
  v15 = (std::__shared_weak_count *)a5[1];
  v26[0] = v14;
  v26[1] = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  v25[0] = &off_1E42B4B10;
  v25[1] = 0;
  md::TiledGEOResourceFetcher::TiledGEOResourceFetcher((uint64_t)a1, v13, a3, (unsigned __int16 *)v24, 1, v26, (uint64_t)v25, a7);
  v25[0] = &off_1E42B4B10;
  if (v15)
  {
    v18 = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  *a1 = &off_1E42A20C8;
  *(_QWORD *)((char *)a1 + 620) = a6;
  v20 = (std::__shared_weak_count *)operator new(0x20uLL);
  v20->__shared_owners_ = 0;
  v21 = (unint64_t *)&v20->__shared_owners_;
  v20->__shared_weak_owners_ = 0;
  v20->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD230;
  v20[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42A20A0;
  v24[0] = (uint64_t)&v20[1];
  v24[1] = (uint64_t)v20;
  gdc::ResourceFetcher::setDecoder(a1, a4, v24);
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }

  return a1;
}

void sub_19FE73EFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  id *v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  md::TiledGEOResourceFetcher::~TiledGEOResourceFetcher(v3);

  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<md::RasterTileResourceDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD230;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::RasterTileResourceDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD230;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::RasterTileResourceDecoder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void ggl::FlyoverRoute::DefaultMesh::~DefaultMesh(ggl::FlyoverRoute::DefaultMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::FlyoverRoute::DefaultMesh::~DefaultMesh(ggl::FlyoverRoute::DefaultMesh *this)
{
  ggl::Mesh::~Mesh((ggl::FlyoverRoute::DefaultMesh *)((char *)this - 16));
}

{
  ggl::Mesh::~Mesh((ggl::FlyoverRoute::DefaultMesh *)((char *)this - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::MeshTyped<ggl::FlyoverRoute::Default>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::MeshTyped<ggl::FlyoverRoute::Default>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::FlyoverRoute::DefaultPipelineState::~DefaultPipelineState(ggl::FlyoverRoute::DefaultPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::FlyoverRoute::DefaultPipelineState::DefaultPipelineState(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD *a4, char a5)
{
  unsigned __int8 v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  char v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int16x8_t v20;
  int32x4_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int16x8_t v24;
  int32x4_t v25;
  int8x16_t v26;
  int32x4_t v27;
  int8x16_t v28;
  int32x4_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int16x8_t v39;
  int32x4_t v40;
  int8x16_t v41;
  int16x8_t v42;
  int32x4_t v43;
  int8x16_t v44;
  int32x4_t v45;
  int8x16_t v46;
  int32x4_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int16x8_t v62;
  int32x4_t v63;
  int8x16_t v64;
  int16x8_t v65;
  int32x4_t v66;
  int8x16_t v67;
  int32x4_t v68;
  int8x16_t v69;
  int32x4_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int16x8_t v77;
  int32x4_t v78;
  int8x16_t v79;
  int16x8_t v80;
  int32x4_t v81;
  int8x16_t v82;
  int32x4_t v83;
  int8x16_t v84;
  int32x4_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int8x16_t v89;
  _OWORD *v91;
  ggl::FlyoverRouteShader *v92;
  unsigned __int8 v93;
  unsigned __int8 v94;
  unsigned __int8 v95;
  unsigned __int8 v96;
  unsigned __int8 v97;
  unsigned __int8 v98;
  _QWORD *v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  _BYTE v103[28];

  if ((v7 & 1) == 0)
  {
    v91 = a4;
    v99 = a2;
    v100 = a3;
    a2 = v99;
    a3 = v100;
    a4 = v91;
    if ((_DWORD)v92)
    {
      if ((v93 & 1) == 0)
      {
        if ((_DWORD)v92)
        {
          if ((v96 & 1) == 0
          {
            if ((v98 & 1) == 0
            {
              ggl::MeshTyped<ggl::FlyoverRoute::Default>::attributesReflection(void)::r = (uint64_t)&ggl::FlyoverRoute::defaultReflection;
            }
            ggl::MeshTyped<ggl::FlyoverRoute::Default>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::FlyoverRoute::Default>::attributesReflection(void)::r;
            *(_QWORD *)algn_1EE5761D0 = 1;
          }
          ggl::FlyoverRoute::DefaultPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::FlyoverRoute::Default>::typedReflection(void)::r;
          *(_QWORD *)algn_1EE58C4C8 = &ggl::FlyoverRoute::pipelineDataDefaultPipelineDeviceStructs(void)::ref;
          qword_1EE58C4D0 = 0;
          if ((v97 & 1) == 0
          {
            ggl::FlyoverRoute::pipelineDataDefaultPipelineConstantStructs(void)::ref = (uint64_t)ggl::FlyoverRibbon::View::reflection(void)::reflection;
            unk_1EE58C5E0 = ggl::FlyoverRoute::Displacement::reflection(void)::reflection;
            qword_1EE58C5E8 = (uint64_t)ggl::FlyoverRoute::Style::reflection(void)::reflection;
          }
          qword_1EE58C4D8 = (uint64_t)&ggl::FlyoverRoute::pipelineDataDefaultPipelineConstantStructs(void)::ref;
          unk_1EE58C4E0 = xmmword_19FFB35E0;
        }
      }
      ggl::FlyoverRoute::DefaultPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::FlyoverRoute::DefaultPipelineSetup::typedReflection(void)::ref;
      ggl::FlyoverRouteShader::typedReflection(v92);
      qword_1EE58C470 = (uint64_t)&ggl::FlyoverRouteShader::typedReflection(void)::ref;
      if ((v94 & 1) == 0
      {
        ggl::FlyoverRoute::pipelineStateDefaultPipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE58C500 = 0;
        qword_1EE58C508 = (uint64_t)"";
        dword_1EE58C510 = 0;
        qword_1EE58C518 = (uint64_t)&ggl::FlyoverRoute::pipelineStateDefaultPipelineAttributeBinding_0(void)::attr;
        unk_1EE58C520 = 5;
      }
      qword_1EE58C478 = (uint64_t)&ggl::FlyoverRoute::pipelineStateDefaultPipelineAttributeStructBinding(void)::attr;
      unk_1EE58C480 = 1;
      qword_1EE58C488 = 0;
      unk_1EE58C490 = 1;
      qword_1EE58C498 = (uint64_t)&ggl::FlyoverRoute::pipelineStateDefaultPipelineDeviceStructBinding(void)::ref;
      unk_1EE58C4A0 = 0;
      if ((v95 & 1) == 0
      {
        ggl::FlyoverRoute::pipelineStateDefaultPipelineConstantStructBinding(void)::ref = 0;
        unk_1EE58C540 = 0;
        qword_1EE58C548 = (uint64_t)"view";
        dword_1EE58C550 = 3;
        qword_1EE58C558 = (uint64_t)&ggl::FlyoverRoute::pipelineStateDefaultPipelineConstantViewBinding(void)::reflection;
        unk_1EE58C560 = vdupq_n_s64(1uLL);
        qword_1EE58C570 = 1;
        unk_1EE58C578 = "displacement";
        dword_1EE58C580 = 3;
        qword_1EE58C588 = (uint64_t)&ggl::FlyoverRoute::pipelineStateDefaultPipelineConstantDisplacementBinding(void)::reflection;
        *(int64x2_t *)algn_1EE58C590 = vdupq_n_s64(2uLL);
        qword_1EE58C5A0 = 2;
        unk_1EE58C5A8 = "style";
        dword_1EE58C5B0 = 3;
        qword_1EE58C5B8 = (uint64_t)&ggl::FlyoverRoute::pipelineStateDefaultPipelineConstantStyleBinding(void)::reflection;
        unk_1EE58C5C0 = 5;
      }
      qword_1EE58C4A8 = (uint64_t)&ggl::FlyoverRoute::pipelineStateDefaultPipelineConstantStructBinding(void)::ref;
      unk_1EE58C4B0 = 3;
      a4 = v91;
      a2 = v99;
      a3 = v100;
    }
  }
  v8 = *a2;
  v9 = (std::__shared_weak_count *)a2[1];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  *(_OWORD *)v103 = *(_OWORD *)a3;
  *(_OWORD *)&v103[12] = *(_OWORD *)(a3 + 12);
  v12 = *(_OWORD *)(a3 + 28);
  v13 = *(_BYTE *)(a3 + 44);
  v101 = *a4;
  v102 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &off_1E42B6760;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = &ggl::FlyoverRoute::DefaultPipelineState::typedReflection(void)::ref;
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v9;
  if (v9)
  {
    v14 = (unint64_t *)&v9->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *(_BYTE *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 148) = 0;
  *(_QWORD *)(a1 + 140) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 180) = 0;
  *(_QWORD *)(a1 + 196) = 0;
  *(_QWORD *)(a1 + 188) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 228) = 0;
  *(_QWORD *)(a1 + 244) = 0;
  *(_QWORD *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v101;
  *(_OWORD *)(a1 + 272) = v102;
  *(_BYTE *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0x100000001;
  *(_BYTE *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v103;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v103[12];
  *(_OWORD *)(a1 + 92) = v12;
  *(_BYTE *)(a1 + 108) = v13;
  if (v9)
  {
    v16 = (unint64_t *)&v9->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *(_BYTE *)(a1 + 304) = a5;
  v18 = *(int8x16_t *)(a1 + 320);
  v19 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  v20 = vmovl_high_s8(v19);
  v21 = vmovl_s16(*(int16x4_t *)v20.i8);
  v22.i64[0] = v21.u32[0];
  v22.i64[1] = v21.u32[1];
  v23 = v22;
  v24 = vmovl_s8(*(int8x8_t *)v19.i8);
  v25 = vmovl_s16(*(int16x4_t *)v24.i8);
  *(_QWORD *)a1 = &off_1E42B6230;
  v22.i64[0] = v25.u32[0];
  v22.i64[1] = v25.u32[1];
  v26 = v22;
  v27 = vmovl_high_s16(v20);
  v22.i64[0] = v27.u32[0];
  v22.i64[1] = v27.u32[1];
  v28 = v22;
  v29 = vmovl_high_s16(v24);
  v22.i64[0] = v29.u32[0];
  v22.i64[1] = v29.u32[1];
  v30 = v22;
  v22.i64[0] = v21.u32[2];
  v22.i64[1] = v21.u32[3];
  v31 = v22;
  v22.i64[0] = v25.u32[2];
  v22.i64[1] = v25.u32[3];
  v32 = v22;
  v22.i64[0] = v27.u32[2];
  v22.i64[1] = v27.u32[3];
  v33 = v22;
  v22.i64[0] = v29.u32[2];
  v22.i64[1] = v29.u32[3];
  v34 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v22);
  v35 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v33);
  v36 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v32);
  v37 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v28);
  v38 = vceqzq_s8(v18);
  v39 = vmovl_high_s8(v38);
  v40 = vmovl_s16(*(int16x4_t *)v39.i8);
  v22.i64[0] = v40.u32[0];
  v22.i64[1] = v40.u32[1];
  v41 = v22;
  v42 = vmovl_s8(*(int8x8_t *)v38.i8);
  v43 = vmovl_s16(*(int16x4_t *)v42.i8);
  v22.i64[0] = v43.u32[0];
  v22.i64[1] = v43.u32[1];
  v44 = v22;
  v45 = vmovl_high_s16(v39);
  v22.i64[0] = v45.u32[0];
  v22.i64[1] = v45.u32[1];
  v46 = v22;
  v47 = vmovl_high_s16(v42);
  v22.i64[0] = v47.u32[0];
  v22.i64[1] = v47.u32[1];
  v48 = v22;
  v22.i64[0] = v40.u32[2];
  v22.i64[1] = v40.u32[3];
  v49 = v22;
  v22.i64[0] = v43.u32[2];
  v22.i64[1] = v43.u32[3];
  v50 = v22;
  v22.i64[0] = v45.u32[2];
  v22.i64[1] = v45.u32[3];
  v51 = v22;
  v22.i64[0] = v47.u32[2];
  v22.i64[1] = v47.u32[3];
  v52 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v51);
  v53 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v41), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v23));
  v54 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v44), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v26));
  v55 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v46), v37);
  v56 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v48), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v30));
  v57 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v49), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v31));
  v58 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v50), v36);
  v59 = vorrq_s8(v52, v35);
  v60 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v22), v34);
  v61 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  v62 = vmovl_s8(*(int8x8_t *)v61.i8);
  v63 = vmovl_high_s16(v62);
  v22.i64[0] = v63.i32[2];
  v22.i64[1] = v63.i32[3];
  v64 = v22;
  v65 = vmovl_high_s8(v61);
  v66 = vmovl_high_s16(v65);
  v22.i64[0] = v66.i32[2];
  v22.i64[1] = v66.i32[3];
  v67 = v22;
  v68 = vmovl_s16(*(int16x4_t *)v62.i8);
  v22.i64[0] = v68.i32[2];
  v22.i64[1] = v68.i32[3];
  v69 = v22;
  v70 = vmovl_s16(*(int16x4_t *)v65.i8);
  v22.i64[0] = v70.i32[2];
  v22.i64[1] = v70.i32[3];
  v71 = v22;
  v22.i64[0] = v63.i32[0];
  v22.i64[1] = v63.i32[1];
  v72 = v22;
  v22.i64[0] = v66.i32[0];
  v22.i64[1] = v66.i32[1];
  v73 = v22;
  v22.i64[0] = v68.i32[0];
  v22.i64[1] = v68.i32[1];
  v74 = v22;
  v22.i64[0] = v70.i32[0];
  v22.i64[1] = v70.i32[1];
  v75 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v22);
  v76 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  v77 = vmovl_high_s8(v76);
  v78 = vmovl_s16(*(int16x4_t *)v77.i8);
  v22.i64[0] = v78.i32[0];
  v22.i64[1] = v78.i32[1];
  v79 = v22;
  v80 = vmovl_s8(*(int8x8_t *)v76.i8);
  v81 = vmovl_s16(*(int16x4_t *)v80.i8);
  v22.i64[0] = v81.i32[0];
  v22.i64[1] = v81.i32[1];
  v82 = v22;
  v83 = vmovl_high_s16(v77);
  v22.i64[0] = v83.i32[0];
  v22.i64[1] = v83.i32[1];
  v84 = v22;
  v85 = vmovl_high_s16(v80);
  v22.i64[0] = v85.i32[0];
  v22.i64[1] = v85.i32[1];
  v86 = v22;
  v22.i64[0] = v78.i32[2];
  v22.i64[1] = v78.i32[3];
  v87 = v22;
  v22.i64[0] = v81.i32[2];
  v22.i64[1] = v81.i32[3];
  v88 = v22;
  v22.i64[0] = v83.i32[2];
  v22.i64[1] = v83.i32[3];
  v89 = v22;
  v22.i64[0] = v85.i32[2];
  v22.i64[1] = v85.i32[3];
  *(_QWORD *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v82), vbicq_s8((int8x16_t)xmmword_19FFB3170, v74)), v54), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v79), v75), v53)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v86), vbicq_s8((int8x16_t)xmmword_19FFB3190, v72)), v56), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v84), vbicq_s8((int8x16_t)xmmword_19FFB3180, v73)),
                                               v55))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v88), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v69)), v58), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v87), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v71)), v57)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v22), vbicq_s8((int8x16_t)xmmword_19FFB31D0, v64)), v60), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31F0, v89),
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31C0, v67)),
                                               v59)))));
  *(_BYTE *)(a1 + 288) = 1;
  return a1;
}

void ggl::FlyoverRoute::DefaultPipelineSetup::~DefaultPipelineSetup(ggl::FlyoverRoute::DefaultPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::FlyoverRoute::DefaultPipelineSetup::constantDataIsEnabled(ggl::FlyoverRoute::DefaultPipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

BOOL ggl::FlyoverRoute::DefaultPipelineSetup::textureIsEnabled(ggl::FlyoverRoute::DefaultPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

uint64_t ggl::FlyoverRoute::DefaultPipelineSetup::DefaultPipelineSetup(uint64_t a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t a7)
{
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;

  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup((_QWORD *)a1, a2, (uint64_t)a3);
    v15 = (unint64_t *)&a3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup((_QWORD *)a1, a2, 0);
  }
  *(_QWORD *)a1 = &off_1E42B6200;
  v17 = *(uint64_t **)(a1 + 64);
  v18 = *a4;
  v19 = a4[1];
  *v17 = *a4;
  v17[1] = 0;
  v20 = *(_QWORD **)(a1 + 160);
  if (v19)
  {
    v21 = (unint64_t *)(v19 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = (std::__shared_weak_count *)v20[1];
  *v20 = v18;
  v20[1] = v19;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = *(_QWORD *)(a1 + 64);
  v27 = *a5;
  v28 = a5[1];
  *(_QWORD *)(v26 + 16) = *a5;
  *(_QWORD *)(v26 + 24) = 0;
  v29 = *(_QWORD *)(a1 + 160);
  if (v28)
  {
    v30 = (unint64_t *)(v28 + 8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v32 = *(std::__shared_weak_count **)(v29 + 24);
  *(_QWORD *)(v29 + 16) = v27;
  *(_QWORD *)(v29 + 24) = v28;
  if (v32)
  {
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = *(_QWORD *)(a1 + 64);
  v36 = *a6;
  v37 = a6[1];
  *(_QWORD *)(v35 + 32) = *a6;
  *(_QWORD *)(v35 + 40) = 0;
  v38 = *(_QWORD *)(a1 + 160);
  if (v37)
  {
    v39 = (unint64_t *)(v37 + 8);
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
  }
  v41 = *(std::__shared_weak_count **)(v38 + 40);
  *(_QWORD *)(v38 + 32) = v36;
  *(_QWORD *)(v38 + 40) = v37;
  if (v41)
  {
    v42 = (unint64_t *)&v41->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  **(_QWORD **)(a1 + 96) = a7;
  return a1;
}

void sub_19FE751C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  uint64_t v4;
  va_list va;

  va_start(va, a2);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  MEMORY[0x1A1AF4E00](v4, 0x10A0C40FFB9CAC9);

  _Unwind_Resume(a1);
}

void sub_19FE7536C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)VKGlobeImageCanvas;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_19FE75958(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FE75968(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_19FE75A48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FE75C74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  void *v9;

  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_19FE7628C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19FE76774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _Unwind_Exception *exception_object, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void sub_19FE768BC()
{
  JUMPOUT(0x19FE76890);
}

void sub_19FE76C64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19FE76DFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19FE76F60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19FE77128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN2md16ARCameraPanEventENS8_19ARCameraRotateEventEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_0EJS9_SA_EEEOSQ_EEEDcSI_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN2md16ARCameraPanEventENS8_19ARCameraRotateEventEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_0EJS9_SA_EEEOSQ_EEEDcSI_DpT0_(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  double result;

  result = *(double *)a3;
  *a2 = *(_QWORD *)a3;
  a2[1] = *(_QWORD *)(a3 + 8);
  return result;
}

double std::__introsort<std::_ClassicAlgPolicy,md::MuninJunctionFeature::setupCrossStreetLabeling(md::MuninRoadLabelingContext const&)::$_0 &,md::MuninJunctionFeature::setupCrossStreetLabeling(md::MuninRoadLabelingContext const&)::RoadEdgeInfo *,false>(uint64_t a1, __n128 *a2, uint64_t a3, char a4, __n128 a5)
{
  __n128 *v9;
  __n128 *v10;
  __int8 *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __n128 *v16;
  double v17;
  double v18;
  __n128 v19;
  double v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  __n128 *v26;
  unint64_t v27;
  __n128 *v28;
  double v29;
  double v30;
  __n128 v31;
  uint64_t v32;
  unsigned __int8 v33;
  __n128 v34;
  __n128 v35;
  uint64_t v36;
  __int8 v37;
  __n128 v38;
  __n128 v39;
  uint64_t v40;
  __int8 v41;
  __n128 v42;
  __n128 *v43;
  unint64_t v44;
  __n128 *v45;
  double v46;
  double v47;
  __n128 v48;
  uint64_t v49;
  unsigned __int8 v50;
  __n128 v51;
  __n128 v52;
  uint64_t v53;
  __int8 v54;
  __n128 v55;
  uint64_t v56;
  __int8 v57;
  __n128 v58;
  double v59;
  double v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  __n128 *v65;
  __n128 *v66;
  double v67;
  __n128 *v68;
  double v69;
  unint64_t v70;
  __n128 v71;
  uint64_t v72;
  char v73;
  double v74;
  double v75;
  __int128 v76;
  BOOL v77;
  __n128 v78;
  unint64_t v79;
  double v80;
  unint64_t v81;
  double v82;
  __n128 *v83;
  __n128 *v84;
  double v85;
  uint64_t v86;
  uint64_t v87;
  __n128 v88;
  double v89;
  double v90;
  __int128 v91;
  __n128 *v92;
  double v93;
  __n128 v94;
  __n128 *v95;
  __n128 *v96;
  __n128 *v97;
  uint64_t v98;
  unsigned __int8 v99;
  uint64_t v100;
  uint64_t v101;
  __n128 *v102;
  BOOL v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  __n128 *v108;
  unint64_t v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  int64_t v113;
  int64_t v114;
  BOOL v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  double v119;
  uint64_t v120;
  char v121;
  unint64_t v122;
  __int128 v123;
  uint64_t v124;
  uint64_t v125;
  int64_t v126;
  uint64_t v127;
  __n128 *v128;
  __n128 v129;
  __n128 *v130;
  uint64_t v131;
  int64_t v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unsigned __int8 v137;
  __n128 *v138;
  __n128 v139;
  uint64_t v140;
  unsigned __int8 v141;
  __n128 *v142;
  unint64_t v143;
  uint64_t v144;
  __n128 *v145;
  double v146;
  uint64_t v147;
  unsigned __int8 v148;
  __n128 v150;
  __n128 v151;
  __n128 v152;
  __n128 v153;
  __n128 v154;
  __n128 v155;
  __n128 v156;
  __n128 v157;
  __n128 v158;
  __n128 v159;
  __n128 v160;
  __n128 v161;
  __n128 v162;
  __n128 v163;
  __n128 v164;
  __n128 v165;
  __n128 v166;
  __n128 v167;
  __n128 v168;
  __n128 v169;
  __n128 v170;
  __n128 v171;
  __n128 v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;

void std::__shared_ptr_pointer<md::MuninJunctionCrossStreet *,std::shared_ptr<md::MuninJunctionElement>::__shared_ptr_default_delete<md::MuninJunctionElement,md::MuninJunctionCrossStreet>,std::allocator<md::MuninJunctionCrossStreet>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<md::MuninJunctionCrossStreet *,std::shared_ptr<md::MuninJunctionElement>::__shared_ptr_default_delete<md::MuninJunctionElement,md::MuninJunctionCrossStreet>,std::allocator<md::MuninJunctionCrossStreet>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninJunctionFeature::setupCrossStreetLabeling(md::MuninRoadLabelingContext const&)::$_0 &,md::MuninJunctionFeature::setupCrossStreetLabeling(md::MuninRoadLabelingContext const&)::RoadEdgeInfo *>(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 result)
{
  double v5;
  double v6;
  unint64_t v7;
  unsigned __int8 v8;
  unint64_t v9;
  unsigned __int8 v10;
  unint64_t v11;
  unsigned __int8 v12;
  unint64_t v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unint64_t v16;
  unsigned __int8 v17;
  unint64_t v18;
  unsigned __int8 v19;
  unint64_t v20;
  unsigned __int8 v21;

  v5 = a2->n128_f64[1];
  v6 = a3->n128_f64[1];
  if (v5 >= a1->n128_f64[1])
  {
    if (v6 < v5)
    {
      result = *a2;
      v9 = a2[1].n128_u64[0];
      v10 = a3[1].n128_u8[0];
      *a2 = *a3;
      a2[1].n128_u8[0] = v10;
      a3[1].n128_u8[0] = v9;
      *a3 = result;
      if (a2->n128_f64[1] < a1->n128_f64[1])
      {
        result = *a1;
        v11 = a1[1].n128_u64[0];
        v12 = a2[1].n128_u8[0];
        *a1 = *a2;
        a1[1].n128_u8[0] = v12;
        a2[1].n128_u8[0] = v11;
        *a2 = result;
      }
    }
  }
  else
  {
    if (v6 < v5)
    {
      result = *a1;
      v7 = a1[1].n128_u64[0];
      v8 = a3[1].n128_u8[0];
      *a1 = *a3;
      a1[1].n128_u8[0] = v8;
LABEL_9:
      a3[1].n128_u8[0] = v7;
      *a3 = result;
      goto LABEL_10;
    }
    result = *a1;
    v13 = a1[1].n128_u64[0];
    v14 = a2[1].n128_u8[0];
    *a1 = *a2;
    a1[1].n128_u8[0] = v14;
    a2[1].n128_u8[0] = v13;
    *a2 = result;
    if (a3->n128_f64[1] < a2->n128_f64[1])
    {
      result = *a2;
      v7 = a2[1].n128_u64[0];
      v15 = a3[1].n128_u8[0];
      *a2 = *a3;
      a2[1].n128_u8[0] = v15;
      goto LABEL_9;
    }
  }
LABEL_10:
  result.n128_u64[0] = a4->n128_u64[1];
  if (result.n128_f64[0] < a3->n128_f64[1])
  {
    result = *a3;
    v16 = a3[1].n128_u64[0];
    v17 = a4[1].n128_u8[0];
    *a3 = *a4;
    a3[1].n128_u8[0] = v17;
    a4[1].n128_u8[0] = v16;
    *a4 = result;
    result.n128_u64[0] = a3->n128_u64[1];
    if (result.n128_f64[0] < a2->n128_f64[1])
    {
      result = *a2;
      v18 = a2[1].n128_u64[0];
      v19 = a3[1].n128_u8[0];
      *a2 = *a3;
      a2[1].n128_u8[0] = v19;
      a3[1].n128_u8[0] = v18;
      *a3 = result;
      result.n128_u64[0] = a2->n128_u64[1];
      if (result.n128_f64[0] < a1->n128_f64[1])
      {
        result = *a1;
        v20 = a1[1].n128_u64[0];
        v21 = a2[1].n128_u8[0];
        *a1 = *a2;
        a1[1].n128_u8[0] = v21;
        a2[1].n128_u8[0] = v20;
        *a2 = result;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninJunctionFeature::setupCrossStreetLabeling(md::MuninRoadLabelingContext const&)::$_0 &,md::MuninJunctionFeature::setupCrossStreetLabeling(md::MuninRoadLabelingContext const&)::RoadEdgeInfo *>(uint64_t a1, uint64_t a2, __n128 a3)
{
  unint64_t v5;
  _BOOL8 result;
  __n128 v7;
  uint64_t v8;
  char v9;
  __n128 *v10;
  __n128 *v11;
  double v12;
  double v13;
  __n128 v14;
  uint64_t v15;
  char v16;
  __n128 *v17;
  __n128 *v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  __n128 v23;
  __n128 *v24;
  __n128 *v25;
  __n128 *v26;
  __n128 v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  __n128 v35;
  __n128 v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v43;
  __n128 v44;
  uint64_t v45;
  __n128 v46;
  __n128 v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  __n128 v51;
  uint64_t v52;
  __n128 v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  double v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;

  v5 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v5)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 16) < *(double *)(a1 + 8))
      {
        v7 = *(__n128 *)a1;
        v8 = *(_QWORD *)(a1 + 16);
        v9 = *(_BYTE *)(a2 - 8);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 24);
        *(_BYTE *)(a1 + 16) = v9;
        *(_BYTE *)(a2 - 8) = v8;
        *(__n128 *)(a2 - 24) = v7;
      }
      return result;
    case 3uLL:
      v10 = (__n128 *)(a1 + 24);
      v11 = (__n128 *)(a2 - 24);
      v12 = *(double *)(a1 + 32);
      v13 = *(double *)(a2 - 16);
      if (v12 >= *(double *)(a1 + 8))
      {
        if (v13 < v12)
        {
          v36 = *v10;
          v37 = *(_QWORD *)(a1 + 40);
          v38 = *(_BYTE *)(a2 - 8);
          *v10 = *v11;
          *(_BYTE *)(a1 + 40) = v38;
          *(_BYTE *)(a2 - 8) = v37;
          *v11 = v36;
          if (*(double *)(a1 + 32) < *(double *)(a1 + 8))
          {
            v39 = *(_QWORD *)(a1 + 16);
            v40 = *(__n128 *)a1;
            *(__n128 *)a1 = *v10;
            *(_BYTE *)(a1 + 16) = *(_BYTE *)(a1 + 40);
            *v10 = v40;
            *(_BYTE *)(a1 + 40) = v39;
          }
        }
      }
      else if (v13 >= v12)
      {
        v45 = *(_QWORD *)(a1 + 16);
        v46 = *(__n128 *)a1;
        *(__n128 *)a1 = *v10;
        *(_BYTE *)(a1 + 16) = *(_BYTE *)(a1 + 40);
        *v10 = v46;
        *(_BYTE *)(a1 + 40) = v45;
        if (*(double *)(a2 - 16) < *(double *)(a1 + 32))
        {
          v47 = *v10;
          v48 = *(_QWORD *)(a1 + 40);
          v49 = *(_BYTE *)(a2 - 8);
          *v10 = *v11;
          *(_BYTE *)(a1 + 40) = v49;
          *(_BYTE *)(a2 - 8) = v48;
          *v11 = v47;
        }
      }
      else
      {
        v14 = *(__n128 *)a1;
        v15 = *(_QWORD *)(a1 + 16);
        v16 = *(_BYTE *)(a2 - 8);
        *(__n128 *)a1 = *v11;
        *(_BYTE *)(a1 + 16) = v16;
        *(_BYTE *)(a2 - 8) = v15;
        *v11 = v14;
      }
      return result;
    case 4uLL:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninJunctionFeature::setupCrossStreetLabeling(md::MuninRoadLabelingContext const&)::$_0 &,md::MuninJunctionFeature::setupCrossStreetLabeling(md::MuninRoadLabelingContext const&)::RoadEdgeInfo *>((__n128 *)a1, (__n128 *)(a1 + 24), (__n128 *)(a1 + 48), (__n128 *)(a2 - 24), a3);
      return 1;
    case 5uLL:
      v24 = (__n128 *)(a1 + 24);
      v25 = (__n128 *)(a1 + 48);
      v26 = (__n128 *)(a1 + 72);
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninJunctionFeature::setupCrossStreetLabeling(md::MuninRoadLabelingContext const&)::$_0 &,md::MuninJunctionFeature::setupCrossStreetLabeling(md::MuninRoadLabelingContext const&)::RoadEdgeInfo *>((__n128 *)a1, (__n128 *)(a1 + 24), (__n128 *)(a1 + 48), (__n128 *)(a1 + 72), a3);
      if (*(double *)(a2 - 16) < *(double *)(a1 + 80))
      {
        v27 = *v26;
        v28 = *(_QWORD *)(a1 + 88);
        v29 = *(_BYTE *)(a2 - 8);
        *v26 = *(__n128 *)(a2 - 24);
        *(_BYTE *)(a1 + 88) = v29;
        *(_BYTE *)(a2 - 8) = v28;
        *(__n128 *)(a2 - 24) = v27;
        if (*(double *)(a1 + 80) < *(double *)(a1 + 56))
        {
          v30 = *(_QWORD *)(a1 + 64);
          v31 = *v25;
          *v25 = *v26;
          *(_BYTE *)(a1 + 64) = *(_BYTE *)(a1 + 88);
          *v26 = v31;
          *(_BYTE *)(a1 + 88) = v30;
          if (*(double *)(a1 + 56) < *(double *)(a1 + 32))
          {
            v32 = *(_QWORD *)(a1 + 40);
            v33 = *v24;
            *v24 = *v25;
            *(_BYTE *)(a1 + 40) = *(_BYTE *)(a1 + 64);
            *v25 = v33;
            *(_BYTE *)(a1 + 64) = v32;
            if (*(double *)(a1 + 32) < *(double *)(a1 + 8))
            {
              v34 = *(_QWORD *)(a1 + 16);
              v35 = *(__n128 *)a1;
              *(__n128 *)a1 = *v24;
              *(_BYTE *)(a1 + 16) = *(_BYTE *)(a1 + 40);
              *v24 = v35;
              *(_BYTE *)(a1 + 40) = v34;
            }
          }
        }
      }
      return 1;
    default:
      v17 = (__n128 *)(a1 + 48);
      v18 = (__n128 *)(a1 + 24);
      v19 = *(double *)(a1 + 32);
      v20 = *(double *)(a1 + 8);
      v21 = *(double *)(a1 + 56);
      if (v19 >= v20)
      {
        if (v21 < v19)
        {
          v41 = *(_QWORD *)(a1 + 40);
          v42 = *v18;
          *v18 = *v17;
          *(_BYTE *)(a1 + 40) = *(_BYTE *)(a1 + 64);
          *v17 = v42;
          *(_BYTE *)(a1 + 64) = v41;
          if (*(double *)(a1 + 32) < v20)
          {
            v43 = *(_QWORD *)(a1 + 16);
            v44 = *(__n128 *)a1;
            *(__n128 *)a1 = *v18;
            *(_BYTE *)(a1 + 16) = *(_BYTE *)(a1 + 40);
            *v18 = v44;
            *(_BYTE *)(a1 + 40) = v43;
          }
        }
      }
      else if (v21 >= v19)
      {
        v50 = *(_QWORD *)(a1 + 16);
        v51 = *(__n128 *)a1;
        *(__n128 *)a1 = *v18;
        *(_BYTE *)(a1 + 16) = *(_BYTE *)(a1 + 40);
        *v18 = v51;
        *(_BYTE *)(a1 + 40) = v50;
        if (v21 < *(double *)(a1 + 32))
        {
          v52 = *(_QWORD *)(a1 + 40);
          v53 = *v18;
          *v18 = *v17;
          *(_BYTE *)(a1 + 40) = *(_BYTE *)(a1 + 64);
          *v17 = v53;
          *(_BYTE *)(a1 + 64) = v52;
        }
      }
      else
      {
        v22 = *(_QWORD *)(a1 + 16);
        v23 = *(__n128 *)a1;
        *(__n128 *)a1 = *v17;
        *(_BYTE *)(a1 + 16) = *(_BYTE *)(a1 + 64);
        *v17 = v23;
        *(_BYTE *)(a1 + 64) = v22;
      }
      v54 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v55 = 0;
      v56 = 0;
      break;
  }
  while (1)
  {
    v58 = *(double *)(v54 + 8);
    if (v58 < v17->n128_f64[1])
    {
      v59 = *(_QWORD *)v54;
      v60 = *(_BYTE *)(v54 + 16);
      v61 = v55;
      do
      {
        v62 = a1 + v61;
        *(_OWORD *)(v62 + 72) = *(_OWORD *)(a1 + v61 + 48);
        *(_BYTE *)(v62 + 88) = *(_BYTE *)(a1 + v61 + 64);
        if (v61 == -48)
        {
          v57 = a1;
          goto LABEL_29;
        }
        v61 -= 24;
      }
      while (v58 < *(double *)(v62 + 32));
      v57 = a1 + v61 + 72;
LABEL_29:
      *(_QWORD *)v57 = v59;
      *(double *)(v57 + 8) = v58;
      *(_BYTE *)(v57 + 16) = v60;
      if (++v56 == 8)
        return v54 + 24 == a2;
    }
    v17 = (__n128 *)v54;
    v55 += 24;
    v54 += 24;
    if (v54 == a2)
      return 1;
  }
}

void std::__shared_ptr_pointer<md::MuninJunctionIntersection *,std::shared_ptr<md::MuninJunctionElement>::__shared_ptr_default_delete<md::MuninJunctionElement,md::MuninJunctionIntersection>,std::allocator<md::MuninJunctionIntersection>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<md::MuninJunctionIntersection *,std::shared_ptr<md::MuninJunctionElement>::__shared_ptr_default_delete<md::MuninJunctionElement,md::MuninJunctionIntersection>,std::allocator<md::MuninJunctionIntersection>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void md::MuninJunctionFeature::clearLabels(md::MuninJunctionFeature *this, md::MuninJunctionFeature *a2)
{
  md::MuninJunctionFeature *i;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _BYTE *v7;
  unsigned __int8 *v8;
  int v9;
  int v10;
  unsigned __int8 v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  if (this != a2)
  {
    for (i = this; i != a2; i = (md::MuninJunctionFeature *)((char *)i + 16))
    {
      v5 = *(_QWORD *)i;
      *(_BYTE *)(v5 + 40) = 0;
      v4 = *(_QWORD **)(v5 + 16);
      v6 = *(_QWORD **)(v5 + 24);
      if (v4 == v6)
        goto LABEL_4;
      do
      {
        v7 = (_BYTE *)*v4;
        v8 = (unsigned __int8 *)(*v4 + 306);
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (v9 != 1)
          goto LABEL_7;
        v10 = byte_1A007EA28[(char)v7[493] + 3];
        if (v10 != 255)
        {
          v7[493] = v10;
          v7[494] = 37;
          if (v10 == 2)
            goto LABEL_14;
LABEL_13:
          v7[299] = 0;
          goto LABEL_14;
        }
        if (v7[493] != 2)
          goto LABEL_13;
LABEL_14:
        v11 = atomic_load(v7 + 353);
        if ((v11 & 1) == 0)
          v7[356] = 2 * (v7[493] == 2);
LABEL_7:
        v4 += 2;
      }
      while (v4 != v6);
      v12 = *(_QWORD **)(v5 + 16);
      v4 = *(_QWORD **)(v5 + 24);
      if (v4 != v12)
      {
        do
        {
          v13 = (std::__shared_weak_count *)*(v4 - 1);
          if (v13)
          {
            p_shared_owners = (unint64_t *)&v13->__shared_owners_;
            do
              v15 = __ldaxr(p_shared_owners);
            while (__stlxr(v15 - 1, p_shared_owners));
            if (!v15)
            {
              ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
              std::__shared_weak_count::__release_weak(v13);
            }
          }
          v4 -= 2;
        }
        while (v4 != v12);
        v4 = v12;
      }
LABEL_4:
      *(_QWORD *)(v5 + 24) = v4;
    }
  }
}

void md::mun::MuninNavigation::path(_QWORD *a1, uint64_t a2, char *a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v13;
  uint64_t *v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  char *v22;
  _QWORD *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  unint64_t v34;
  double *v35;
  double *v36;
  char *v37;
  unint64_t v38;
  double *v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  double *v55;
  unint64_t v56;
  double *v57;
  double v58;
  double *v59;
  double v60;
  int v61;
  unint64_t v62;
  unint64_t v63;
  BOOL v64;
  unint64_t v65;
  double *v66;
  int v67;
  unint64_t v68;
  BOOL v69;
  unint64_t v70;
  double v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int64_t v76;
  double *v77;
  double *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  double v82;
  int v83;
  double v84;
  unint64_t v85;
  BOOL v86;
  char v87;
  uint64_t v88;
  unint64_t v89;
  double *v90;
  double v91;
  double v92;
  int v93;
  unint64_t v94;
  unint64_t v95;
  BOOL v96;
  unint64_t v97;
  double *v98;
  int v99;
  unint64_t v100;
  BOOL v101;
  int v102;
  unint64_t v103;
  unint64_t v104;
  double *v105;
  double *v106;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  int v113;
  unint64_t v114;
  double v115;
  double *v116;
  double v117;
  double v118;
  unint64_t v119;
  double v120;
  double *v121;
  double v122;
  double v123;
  uint64_t v125;
  _BYTE *v126;
  _BYTE *v127;
  unint64_t i;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  char *v138;
  char *v139;
  char *v140;
  char *v141;
  _QWORD *v142;
  _QWORD *v143;
  void *v144;
  char *v145;
  char *v146;
  NSObject *v147;
  char *v148;
  _QWORD *v149;
  _QWORD *v150;
  void *v151;
  char *v152;
  char *v153;
  void *v154;
  char *v155;
  _QWORD *v156;
  _QWORD *v157;
  void *v158;
  _QWORD *v159;
  uint64_t v160;
  unint64_t v161;
  char v162;
  void *__p;
  uint64_t *v164;
  uint64_t v165;
  void *v166[2];
  unint64_t v167;
  char v168;
  uint8_t buf[8];
  char *v170;
  char *v171;
  unint64_t v172;
  char v173[24];
  _QWORD *v174;
  uint64_t v175;

  v175 = *MEMORY[0x1E0C80C00];
  v168 = a5;
  v166[0] = 0;
  v166[1] = 0;
  v167 = 0;
  __p = 0;
  v164 = 0;
  v165 = 0;
  v162 = 0;
  v13 = operator new(0x40uLL);
  *v13 = &off_1E42D9320;
  v13[1] = &v162;
  v13[2] = a3;
  v13[3] = a4;
  v13[4] = &__p;
  v13[5] = &v168;
  v13[6] = a6;
  v13[7] = a7;
  v174 = v13;
  md::mun::MuninMetadataContainer::navigationGraphAccessor(a2, (uint64_t)v173);
  (*(void (**)(_QWORD *))(*v13 + 40))(v13);
  if (!v162)
  {
    *(_OWORD *)a1 = *(_OWORD *)v166;
    a1[2] = v167;
    v166[1] = 0;
    v167 = 0;
    v166[0] = 0;
    goto LABEL_246;
  }
  v159 = a1;
  std::vector<md::mun::CollectionPoint>::reserve((char **)v166, ((char *)v164 - (_BYTE *)__p) >> 3);
  v14 = (uint64_t *)__p;
  v15 = v164;
  if (__p != v164)
  {
    v16 = (char *)v166[1];
    do
    {
      v17 = *v14;
      if ((unint64_t)v16 >= v167)
      {
        v16 = std::vector<md::mun::CollectionPoint>::__push_back_slow_path<md::mun::CollectionPoint const&>((uint64_t *)v166, *v14);
      }
      else
      {
        *(_QWORD *)v16 = *(_QWORD *)v17;
        v18 = *(_OWORD *)(v17 + 8);
        *((_QWORD *)v16 + 3) = *(_QWORD *)(v17 + 24);
        *(_OWORD *)(v16 + 8) = v18;
        v19 = *(_QWORD *)(v17 + 32);
        *((_DWORD *)v16 + 10) = *(_DWORD *)(v17 + 40);
        *((_QWORD *)v16 + 4) = v19;
        *(_QWORD *)(v16 + 44) = *(_QWORD *)(v17 + 44);
        v20 = *(_OWORD *)(v17 + 56);
        v21 = *(_OWORD *)(v17 + 72);
        v22 = v16 + 120;
        *((_QWORD *)v16 + 11) = v16 + 120;
        v23 = v16 + 88;
        *((_OWORD *)v23 - 2) = v20;
        *((_OWORD *)v23 - 1) = v21;
        v23[1] = v22;
        v23[2] = v22;
        v23[3] = 6;
        geo::small_vector_base<md::mun::PhotoInfo>::append<md::mun::PhotoInfo const*>((uint64_t)v23, *(__int128 **)(v17 + 88), *(__int128 **)(v17 + 96));
        v24 = *(_QWORD *)(v17 + 1848);
        *(_QWORD *)((char *)v23 + 1765) = *(_QWORD *)(v17 + 1853);
        v23[220] = v24;
        v16 = (char *)(v23 + 222);
      }
      v166[1] = v16;
      ++v14;
    }
    while (v14 != v15);
  }
  v25 = (char *)v166[0];
  if (*(_QWORD *)v166[0] == *(_QWORD *)a3)
  {
    *((_DWORD *)v166[0] + 8) = *((_DWORD *)a3 + 8);
    *((_DWORD *)v25 + 9) = *((_DWORD *)a3 + 9);
    *((_DWORD *)v25 + 10) = *((_DWORD *)a3 + 10);
    *((_DWORD *)v25 + 11) = *((_DWORD *)a3 + 11);
    *((_QWORD *)v25 + 1) = *((_QWORD *)a3 + 1);
    *((_QWORD *)v25 + 2) = *((_QWORD *)a3 + 2);
    *((_QWORD *)v25 + 3) = *((_QWORD *)a3 + 3);
    *((_DWORD *)v25 + 12) = *((_DWORD *)a3 + 12);
    *((_QWORD *)v25 + 7) = *((_QWORD *)a3 + 7);
    *((_QWORD *)v25 + 8) = *((_QWORD *)a3 + 8);
    *((_QWORD *)v25 + 9) = *((_QWORD *)a3 + 9);
    *((_QWORD *)v25 + 10) = *((_QWORD *)a3 + 10);
    if (v25 != a3)
    {
      v26 = v25 + 120;
      v27 = (_QWORD *)*((_QWORD *)v25 + 11);
      v28 = (_QWORD *)*((_QWORD *)v25 + 12);
      if (v27 != v28)
      {
        do
        {
          v29 = (void *)v27[31];
          if (v29 != (void *)v27[33])
            free(v29);
          v27 += 36;
        }
        while (v27 != v28);
        v27 = (_QWORD *)*((_QWORD *)v25 + 11);
      }
      if (v27 != *((_QWORD **)v25 + 13))
        free(v27);
      *((_QWORD *)v25 + 11) = v26;
      *((_QWORD *)v25 + 12) = v26;
      *((_QWORD *)v25 + 13) = v26;
      *((_QWORD *)v25 + 14) = 6;
      geo::small_vector_base<md::mun::PhotoInfo>::append<md::mun::PhotoInfo const*>((uint64_t)(v25 + 88), *((__int128 **)a3 + 11), *((__int128 **)a3 + 12));
    }
    v30 = *((_QWORD *)a3 + 231);
    *(_QWORD *)(v25 + 1853) = *(_QWORD *)(a3 + 1853);
    *((_QWORD *)v25 + 231) = v30;
    v25 = (char *)v166[0];
  }
  v31 = 0x63FB9AEB1FDCD759 * (((char *)v166[1] - (char *)v25) >> 3);
  if (v166[1] == v25)
  {
    v33 = 0;
  }
  else
  {
    if ((char *)v166[1] - (char *)v25 < 0)
LABEL_266:
      abort();
    v32 = operator new(8 * ((v31 - 1) >> 6) + 8);
    v33 = v32;
    if (v31 >= 0x41)
      v34 = (v31 - 1) >> 6;
    else
      v34 = 0;
    v32[v34] = 0;
    if (v31 >= 0x40)
      bzero(v32, 8 * (v31 >> 6));
    if ((v31 & 0x3F) != 0)
      v33[v31 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v31 & 0x3F));
  }
  if (v31 - 3 > 0xFFFFFFFFFFFFFFFDLL)
  {
    v36 = 0;
LABEL_188:
    v125 = 0;
    goto LABEL_190;
  }
  v161 = v31;
  v35 = 0;
  v36 = 0;
  v37 = 0;
  v38 = 1;
  do
  {
    v39 = (double *)&v25[1864 * v38];
    v40 = v39[1];
    v41 = v39[2];
    v42 = v40 - *(v39 - 232);
    v43 = v41 - *(v39 - 231);
    v44 = v39[3];
    v45 = v44 - *(v39 - 230);
    v46 = v39[234] - v40;
    v47 = acos(fmax(fmin((v46 * v42 + (v39[235] - v41) * v43 + (v39[236] - v44) * v45)/ sqrt((v46 * v46 + (v39[235] - v41) * (v39[235] - v41) + (v39[236] - v44) * (v39[236] - v44))* (v42 * v42 + v43 * v43 + v45 * v45)), 1.0), -1.0));
    v48 = v47;
    if (v35 >= (double *)v37)
    {
      v49 = ((char *)v35 - (char *)v36) >> 4;
      v50 = v49 + 1;
      if ((unint64_t)(v49 + 1) >> 60)
        goto LABEL_266;
      if ((v37 - (char *)v36) >> 3 > v50)
        v50 = (v37 - (char *)v36) >> 3;
      if ((unint64_t)(v37 - (char *)v36) >= 0x7FFFFFFFFFFFFFF0)
        v50 = 0xFFFFFFFFFFFFFFFLL;
      if (v50 >> 60)
LABEL_267:
        std::__throw_bad_array_new_length[abi:nn180100]();
      v51 = 16 * v50;
      v52 = (char *)operator new(16 * v50);
      v53 = &v52[16 * v49];
      *(double *)v53 = v48;
      *((_QWORD *)v53 + 1) = v38;
      if (v35 == v36)
      {
        v55 = (double *)&v52[16 * v49];
      }
      else
      {
        v54 = &v52[16 * v49];
        do
        {
          v55 = (double *)(v54 - 16);
          *((_OWORD *)v54 - 1) = *((_OWORD *)v35 - 1);
          v35 -= 2;
          v54 -= 16;
        }
        while (v35 != v36);
      }
      v37 = &v52[v51];
      v35 = (double *)(v53 + 16);
      if (v36)
        operator delete(v36);
      v36 = v55;
    }
    else
    {
      *v35 = v47;
      *((_QWORD *)v35 + 1) = v38;
      v35 += 2;
    }
    if ((char *)v35 - (char *)v36 >= 17)
    {
      v56 = (((unint64_t)((char *)v35 - (char *)v36) >> 4) - 2) >> 1;
      v57 = v35 - 2;
      v58 = *(v35 - 2);
      v59 = &v36[2 * v56];
      v60 = *v59;
      if (*v59 == v58)
        v61 = 0;
      else
        v61 = -127;
      if (*v59 > v58)
        v61 = 1;
      if (*v59 < v58)
        v61 = -1;
      if (!v61)
      {
        v62 = *((_QWORD *)v59 + 1);
        v63 = *((_QWORD *)v35 - 1);
        v64 = v62 == v63;
        LOBYTE(v61) = v62 < v63 ? -1 : 1;
        if (v64)
          LOBYTE(v61) = 0;
      }
      if (v61 != 129 && (v61 & 0x80) != 0)
      {
        v65 = *((_QWORD *)v35 - 1);
        do
        {
          v66 = v57;
          v57 = v59;
          *v66 = v60;
          v66[1] = v59[1];
          if (!v56)
            break;
          v56 = (v56 - 1) >> 1;
          v59 = &v36[2 * v56];
          v60 = *v59;
          if (*v59 == v58)
            v67 = 0;
          else
            v67 = -127;
          if (*v59 > v58)
            v67 = 1;
          if (*v59 < v58)
            v67 = -1;
          if (!v67)
          {
            v68 = *((_QWORD *)v59 + 1);
            v69 = v68 == v65;
            LOBYTE(v67) = v68 < v65 ? -1 : 1;
            if (v69)
              LOBYTE(v67) = 0;
          }
        }
        while (v67 != 129 && (v67 & 0x80) != 0);
        *v57 = v58;
        *((_QWORD *)v57 + 1) = v65;
      }
    }
    ++v38;
    v25 = (char *)v166[0];
    v31 = 0x63FB9AEB1FDCD759 * (((char *)v166[1] - (char *)v166[0]) >> 3);
  }
  while (v38 < v31 - 1);
  if (v36 == v35)
    goto LABEL_188;
  v160 = 0;
  v70 = v161 - 1;
  do
  {
    v71 = *v36;
    v72 = *((_QWORD *)v36 + 1);
    v73 = (char *)v35 - (char *)v36;
    if ((char *)v35 - (char *)v36 >= 17)
    {
      v74 = 0;
      v75 = v73 >> 4;
      v76 = (unint64_t)((v73 >> 4) - 2) >> 1;
      v77 = v36;
      do
      {
        v80 = v74 + 1;
        v78 = &v77[2 * v74 + 2];
        v79 = (2 * v74) | 1;
        v81 = 2 * v74 + 2;
        if (v81 < v75)
        {
          v82 = v78[2];
          if (*v78 == v82)
            v83 = 0;
          else
            v83 = -127;
          if (*v78 > v82)
            v83 = 1;
          if (*v78 < v82)
            v83 = -1;
          if (!v83)
          {
            v84 = v77[2 * v80 + 1];
            v85 = *((_QWORD *)v78 + 3);
            v86 = *(_QWORD *)&v84 == v85;
            if (*(_QWORD *)&v84 < v85)
              v87 = -1;
            else
              v87 = 1;
            if (v86)
              LOBYTE(v83) = 0;
            else
              LOBYTE(v83) = v87;
          }
          if (v83 != 129 && (v83 & 0x80u) != 0)
          {
            v78 += 2;
            v79 = v81;
          }
        }
        *v77 = *v78;
        v77[1] = v78[1];
        v77 = v78;
        v74 = v79;
      }
      while (v79 <= v76);
      if (v78 == v35 - 2)
      {
        *v78 = v71;
        *((_QWORD *)v78 + 1) = v72;
      }
      else
      {
        *v78 = *(v35 - 2);
        v78[1] = *(v35 - 1);
        *(v35 - 2) = v71;
        *((_QWORD *)v35 - 1) = v72;
        v88 = (char *)v78 - (char *)v36 + 16;
        if (v88 >= 17)
        {
          v89 = (((unint64_t)v88 >> 4) - 2) >> 1;
          v90 = &v36[2 * v89];
          v91 = *v90;
          v92 = *v78;
          if (*v90 == *v78)
            v93 = 0;
          else
            v93 = -127;
          if (*v90 > *v78)
            v93 = 1;
          if (*v90 < *v78)
            v93 = -1;
          if (!v93)
          {
            v94 = *((_QWORD *)v90 + 1);
            v95 = *((_QWORD *)v78 + 1);
            v96 = v94 == v95;
            LOBYTE(v93) = v94 < v95 ? -1 : 1;
            if (v96)
              LOBYTE(v93) = 0;
          }
          if (v93 != 129 && (v93 & 0x80) != 0)
          {
            v97 = *((_QWORD *)v78 + 1);
            do
            {
              v98 = v78;
              v78 = v90;
              *v98 = v91;
              v98[1] = v90[1];
              if (!v89)
                break;
              v89 = (v89 - 1) >> 1;
              v90 = &v36[2 * v89];
              v91 = *v90;
              if (*v90 == v92)
                v99 = 0;
              else
                v99 = -127;
              if (*v90 > v92)
                v99 = 1;
              if (*v90 < v92)
                v99 = -1;
              if (!v99)
              {
                v100 = *((_QWORD *)v90 + 1);
                v101 = v100 == v97;
                LOBYTE(v99) = v100 < v97 ? -1 : 1;
                if (v101)
                  LOBYTE(v99) = 0;
              }
            }
            while (v99 != 129 && (v99 & 0x80) != 0);
            *v78 = v92;
            *((_QWORD *)v78 + 1) = v97;
          }
        }
      }
    }
    if ((int)v72 <= 1)
      v102 = 1;
    else
      v102 = v72;
    v103 = (v102 - 1);
    if (v102 == 1)
    {
      v103 = 0;
    }
    else
    {
      do
      {
        if (((*(_QWORD *)((char *)v33 + ((v103 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v103) & 1) == 0)
          break;
        --v103;
      }
      while (v103);
    }
    if (v70 >= v72 + 1)
      v104 = v72 + 1;
    else
      v104 = v161 - 1;
    if (v70 > v72 + 1)
    {
      while (((*(_QWORD *)((char *)v33 + ((v104 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v104) & 1) != 0)
      {
        if (v70 == ++v104)
        {
          v104 = v161 - 1;
          break;
        }
      }
    }
    v105 = (double *)&v25[1864 * v103];
    v106 = (double *)&v25[1864 * v104];
    v107 = v105[1];
    v108 = v105[2];
    v109 = v106[1];
    v110 = v106[2];
    v111 = v105[3];
    v112 = v106[3];
    if ((int)v103 <= 1)
      v113 = 1;
    else
      v113 = v103;
    v114 = (v113 - 1);
    if ((_DWORD)v114)
    {
      do
      {
        if (((*(_QWORD *)((char *)v33 + ((v114 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v114) & 1) == 0)
          break;
        --v114;
      }
      while (v114);
    }
    else
    {
      v114 = 0;
    }
    v115 = 0.0;
    if (v104 != v103 && v114 != v103)
    {
      v116 = (double *)&v25[1864 * v114];
      v117 = v107 - v116[1];
      v118 = v108 - v116[2];
      v115 = acos(fmax(fmin((v117 * (v109 - v107) + v118 * (v110 - v108) + (v111 - v116[3]) * (v112 - v111))/ sqrt((v117 * v117 + v118 * v118 + (v111 - v116[3]) * (v111 - v116[3]))* ((v109 - v107) * (v109 - v107) + (v110 - v108) * (v110 - v108) + (v112 - v111) * (v112 - v111))), 1.0), -1.0));
    }
    if (v70 >= v104 + 1)
      v119 = v104 + 1;
    else
      v119 = v161 - 1;
    if (v70 > v104 + 1)
    {
      while (((*(_QWORD *)((char *)v33 + ((v119 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v119) & 1) != 0)
      {
        if (v70 == ++v119)
        {
          v119 = v161 - 1;
          break;
        }
      }
    }
    v120 = 0.0;
    if (v104 != v103 && v119 != v104)
    {
      v121 = (double *)&v25[1864 * v119];
      v122 = v121[1] - v109;
      v123 = v121[2] - v110;
      v120 = acos(fmax(fmin((v122 * (v109 - v107) + v123 * (v110 - v108) + (v121[3] - v112) * (v112 - v111))/ sqrt((v122 * v122 + v123 * v123 + (v121[3] - v112) * (v121[3] - v112))* ((v109 - v107) * (v109 - v107) + (v110 - v108) * (v110 - v108) + (v112 - v111) * (v112 - v111))), 1.0), -1.0));
    }
    if (v115 + 0.436332313 < v71
      && v120 + 0.436332313 < v71
      && (v107 - v109) * (v107 - v109) + (v108 - v110) * (v108 - v110) + (v111 - v112) * (v111 - v112) < 100.0)
    {
      *(_QWORD *)((char *)v33 + ((v72 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v72;
      ++v160;
    }
    v35 -= 2;
  }
  while (v36 != v35);
  v125 = v160;
LABEL_190:
  v170 = 0;
  v171 = 0;
  v172 = 0;
  std::vector<md::mun::CollectionPoint>::reserve(&v170, v31 - v125);
  v127 = v166[0];
  v126 = v166[1];
  if (v166[1] != v166[0])
  {
    for (i = 0; i < 0x63FB9AEB1FDCD759 * ((v126 - v127) >> 3); ++i)
    {
      if (((*(_QWORD *)((char *)v33 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) >> i) & 1) != 0)
        continue;
      v130 = (uint64_t)&v127[1864 * i];
      if ((unint64_t)v171 < v172)
      {
        v129 = (char *)(std::construct_at[abi:nn180100]<md::mun::CollectionPoint,md::mun::CollectionPoint,md::mun::CollectionPoint*>((uint64_t)v171, (uint64_t)&v127[1864 * i])+ 1864);
      }
      else
      {
        v131 = 0x63FB9AEB1FDCD759 * ((v171 - v170) >> 3);
        v132 = v131 + 1;
        if ((unint64_t)(v131 + 1) > 0x2328A701194538)
          goto LABEL_266;
        if (0xC7F735D63FB9AEB2 * ((uint64_t)(v172 - (_QWORD)v170) >> 3) > v132)
          v132 = 0xC7F735D63FB9AEB2 * ((uint64_t)(v172 - (_QWORD)v170) >> 3);
        if ((unint64_t)(0x63FB9AEB1FDCD759 * ((uint64_t)(v172 - (_QWORD)v170) >> 3)) >= 0x119453808CA29CLL)
          v133 = 0x2328A701194538;
        else
          v133 = v132;
        if (v133)
        {
          if (v133 > 0x2328A701194538)
            goto LABEL_267;
          v134 = (char *)operator new(1864 * v133);
        }
        else
        {
          v134 = 0;
        }
        v135 = &v134[1864 * v131];
        v136 = &v134[1864 * v133];
        std::construct_at[abi:nn180100]<md::mun::CollectionPoint,md::mun::CollectionPoint,md::mun::CollectionPoint*>((uint64_t)v135, v130);
        v138 = v170;
        v137 = v171;
        if (v171 != v170)
        {
          v139 = v135;
          do
          {
            v137 -= 1864;
            v139 = (char *)std::construct_at[abi:nn180100]<md::mun::CollectionPoint,md::mun::CollectionPoint,md::mun::CollectionPoint*>((uint64_t)(v139 - 1864), (uint64_t)v137);
          }
          while (v137 != v138);
          v137 = v170;
          v140 = v171;
          v170 = v139;
          v172 = (unint64_t)v136;
          if (v171 != v137)
          {
            do
            {
              v141 = v140 - 1864;
              v142 = (_QWORD *)*((_QWORD *)v140 - 222);
              v143 = (_QWORD *)*((_QWORD *)v140 - 221);
              if (v142 != v143)
              {
                do
                {
                  v144 = (void *)v142[31];
                  if (v144 != (void *)v142[33])
                    free(v144);
                  v142 += 36;
                }
                while (v142 != v143);
                v142 = (_QWORD *)*((_QWORD *)v140 - 222);
              }
              if (v142 != *((_QWORD **)v140 - 220))
                free(v142);
              v140 -= 1864;
            }
            while (v141 != v137);
          }
          v129 = v135 + 1864;
          if (!v137)
            goto LABEL_193;
LABEL_224:
          operator delete(v137);
          goto LABEL_193;
        }
        v170 = v135;
        v172 = (unint64_t)v136;
        v129 = v135 + 1864;
        if (v171)
          goto LABEL_224;
      }
LABEL_193:
      v171 = v129;
      v127 = v166[0];
      v126 = v166[1];
    }
  }
  v146 = v170;
  v145 = v171;
  if ((unint64_t)(0x63FB9AEB1FDCD759 * ((v171 - v170) >> 3)) < 3 && *(_QWORD *)v170 == *((_QWORD *)v171 - 233))
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v147 = GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19F029000, v147, OS_LOG_TYPE_INFO, "Start point same as end point.", buf, 2u);
    }
    *v159 = 0;
    v159[1] = 0;
    v159[2] = 0;
    if (v145 != v146)
    {
      do
      {
        v148 = v145 - 1864;
        v149 = (_QWORD *)*((_QWORD *)v145 - 222);
        v150 = (_QWORD *)*((_QWORD *)v145 - 221);
        if (v149 != v150)
        {
          do
          {
            v151 = (void *)v149[31];
            if (v151 != (void *)v149[33])
              free(v151);
            v149 += 36;
          }
          while (v149 != v150);
          v149 = (_QWORD *)*((_QWORD *)v145 - 222);
        }
        if (v149 != *((_QWORD **)v145 - 220))
          free(v149);
        v145 -= 1864;
      }
      while (v148 != v146);
      v145 = v146;
    }
    operator delete(v145);
    if (!v36)
      goto LABEL_244;
  }
  else
  {
    *v159 = v170;
    v159[1] = v145;
    v159[2] = v172;
    if (!v36)
      goto LABEL_244;
  }
  operator delete(v36);
LABEL_244:
  if (v33)
    operator delete(v33);
LABEL_246:
  if (__p)
  {
    v164 = (uint64_t *)__p;
    operator delete(__p);
  }
  v152 = (char *)v166[0];
  if (v166[0])
  {
    v153 = (char *)v166[1];
    v154 = v166[0];
    if (v166[1] != v166[0])
    {
      do
      {
        v155 = v153 - 1864;
        v156 = (_QWORD *)*((_QWORD *)v153 - 222);
        v157 = (_QWORD *)*((_QWORD *)v153 - 221);
        if (v156 != v157)
        {
          do
          {
            v158 = (void *)v156[31];
            if (v158 != (void *)v156[33])
              free(v158);
            v156 += 36;
          }
          while (v156 != v157);
          v156 = (_QWORD *)*((_QWORD *)v153 - 222);
        }
        if (v156 != *((_QWORD **)v153 - 220))
          free(v156);
        v153 -= 1864;
      }
      while (v155 != v152);
      v154 = v166[0];
    }
    v166[1] = v152;
    operator delete(v154);
  }
}

void std::__function::__func<md::mun::MuninNavigation::path(md::mun::CollectionPoint const&,geo::Geocentric<double> const&,BOOL,md::MuninSettings const&,std::function<BOOL ()(void)>)::$_0,std::allocator<md::mun::MuninNavigation::path(md::mun::CollectionPoint const&,geo::Geocentric<double> const&,BOOL,md::MuninSettings const&,std::function<BOOL ()(void)>)::$_0>,void ()(md::mun::MuninNavigationGraph const*)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::mun::MuninNavigation::path(md::mun::CollectionPoint const&,geo::Geocentric<double> const&,BOOL,md::MuninSettings const&,std::function<BOOL ()(void)>)::$_0,std::allocator<md::mun::MuninNavigation::path(md::mun::CollectionPoint const&,geo::Geocentric<double> const&,BOOL,md::MuninSettings const&,std::function<BOOL ()(void)>)::$_0>,void ()(md::mun::MuninNavigationGraph const*)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &off_1E42D9320;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  return result;
}

__n128 std::__function::__func<md::mun::MuninNavigation::path(md::mun::CollectionPoint const&,geo::Geocentric<double> const&,BOOL,md::MuninSettings const&,std::function<BOOL ()(void)>)::$_0,std::allocator<md::mun::MuninNavigation::path(md::mun::CollectionPoint const&,geo::Geocentric<double> const&,BOOL,md::MuninSettings const&,std::function<BOOL ()(void)>)::$_0>,void ()(md::mun::MuninNavigationGraph const*)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_1E42D9320;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *std::__function::__func<md::mun::MuninNavigation::path(md::mun::CollectionPoint const&,geo::Geocentric<double> const&,BOOL,md::MuninSettings const&,std::function<BOOL ()(void)>)::$_0,std::allocator<md::mun::MuninNavigation::path(md::mun::CollectionPoint const&,geo::Geocentric<double> const&,BOOL,md::MuninSettings const&,std::function<BOOL ()(void)>)::$_0>,void ()(md::mun::MuninNavigationGraph const*)>::operator()(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  double *v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  _QWORD *v9;
  double *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  char v15;
  _QWORD *result;
  uint64_t v17;
  _QWORD *v18;
  int8x8_t v19;
  uint8x8_t v20;
  unint64_t v21;
  uint64_t ***v22;
  uint64_t **v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  unsigned int v30;
  unint64_t v31;
  double *v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double *v39;
  double v40;
  double v41;
  double *v42;
  double *v43;
  unint64_t v44;
  double v45;
  uint64_t v46;
  int64_t v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  _OWORD *v54;
  uint64_t v55;
  unint64_t v56;
  double *v57;
  double v58;
  double v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  BOOL v73;
  BOOL v74;
  BOOL v75;
  BOOL v76;
  uint64_t *v77;
  uint64_t **v78;
  uint64_t **v79;
  unint64_t v80;
  uint64_t *v81;
  uint64_t *v82;
  double *v84;
  float64_t v85;
  float64x2_t v86;
  float64x2_t v87;
  _QWORD *v88;
  unint64_t *v89;
  unint64_t *v90;
  unint64_t v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  double *v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint8x8_t v118;
  unint64_t v119;
  _QWORD *v120;
  _QWORD *v121;
  unint64_t v122;
  uint64_t v123;
  double v124;
  uint64_t *v125;
  uint64_t v126;
  double v127;
  double v128;
  double v129;
  double v130;
  double v131;
  double v132;
  double v133;
  double v134;
  double v135;
  double v136;
  double v137;
  double *v138;
  double v139;
  double v140;
  double v141;
  double v142;
  double v143;
  double v144;
  double v145;
  double v146;
  uint64_t *v147;
  uint64_t **v148;
  uint64_t *v149;
  float64x2_t *v150;
  int v151;
  float64x2_t *v152;
  double v153;
  float64x2_t **v154;
  double *v155;
  double v156;
  int v157;
  BOOL v158;
  uint64_t *v159;
  uint64_t **v160;
  _QWORD *v161;
  unint64_t v162;
  float64x2_t **v163;
  float64x2_t **v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  unint64_t v169;
  _BYTE *v170;
  float64x2_t **v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t v174;
  _OWORD *v175;
  float64x2_t **v176;
  uint64_t v177;
  __int128 v178;
  float64x2_t *v179;
  NSObject *v180;
  _QWORD *v181;
  _QWORD *v182;
  void *v183;
  _QWORD *v184;
  _QWORD *v185;
  void *v186;
  _QWORD *v187;
  uint64_t v188;
  unint64_t v189;
  float64x2_t **v190;
  _QWORD *v191;
  float64x2_t **v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  unint64_t v197;
  _BYTE *v198;
  float64x2_t **v199;
  char *v200;
  unint64_t v201;
  uint64_t v202;
  _OWORD *v203;
  float64x2_t **v204;
  uint64_t v205;
  __int128 v206;
  float64x2_t *v207;
  float64x2_t **v208;
  float64x2_t **v209;
  unint64_t v211;
  float64x2_t *v212;
  BOOL v213;
  double v214;
  _QWORD *v215;
  uint64_t v216;
  int v217;
  double v218;
  double v219;
  double v220;
  double v221;
  double v222;
  double v223;
  double v224;
  double v225;
  double *v226;
  double v227;
  unint64_t v228;
  double *v229;
  double *v230;
  uint64_t v231;
  uint64_t **v232;
  uint64_t *v233;
  uint64_t v234;
  void *v235[2];
  void *__p[2];
  int v237;
  void *v238[2];
  void *v239[2];
  int v240;
  float64x2_t *v241;
  uint8_t buf[16];
  _QWORD v243[3];
  _QWORD *v244;
  _BYTE v245[24];
  _BYTE *v246;
  uint64_t v247;

  v247 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)*a2;
  v4 = (_QWORD *)*a2;
  v5 = *(double **)(a1 + 24);
  v6 = **(_QWORD **)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = **(unsigned __int8 **)(a1 + 40);
  v10 = *(double **)(a1 + 48);
  v9 = *(_QWORD **)(a1 + 56);
  v226 = v10;
  v11 = (_QWORD *)v9[3];
  if (v11)
  {
    if (v11 == v9)
    {
      v244 = v243;
      (*(void (**)(_QWORD *, _QWORD *))(*v9 + 24))(v9, v243);
    }
    else
    {
      v244 = (_QWORD *)(*(uint64_t (**)(_QWORD))(*v11 + 16))(v9[3]);
    }
  }
  else
  {
    v244 = 0;
  }
  v14 = (_QWORD *)*v4;
  v13 = v4 + 1;
  v12 = v14;
  if (v14 == v13)
  {
LABEL_7:
    v15 = 0;
    goto LABEL_8;
  }
  while (1)
  {
    v18 = (_QWORD *)v12[4];
    v19 = (int8x8_t)v18[25];
    if (v19)
    {
      v20 = (uint8x8_t)vcnt_s8(v19);
      v20.i16[0] = vaddlv_u8(v20);
      if (v20.u32[0] > 1uLL)
      {
        v21 = v6;
        if (*(_QWORD *)&v19 <= v6)
          v21 = v6 % *(_QWORD *)&v19;
      }
      else
      {
        v21 = (*(_QWORD *)&v19 - 1) & v6;
      }
      v22 = *(uint64_t ****)(v18[24] + 8 * v21);
      if (v22)
      {
        v23 = *v22;
        if (v23)
          break;
      }
    }
LABEL_34:
    v28 = (_QWORD *)v12[1];
    if (v28)
    {
      do
      {
        v29 = v28;
        v28 = (_QWORD *)*v28;
      }
      while (v28);
    }
    else
    {
      do
      {
        v29 = (_QWORD *)v12[2];
        v73 = *v29 == (_QWORD)v12;
        v12 = v29;
      }
      while (!v73);
    }
    v12 = v29;
    if (v29 == v13)
      goto LABEL_7;
  }
  if (v20.u32[0] < 2uLL)
  {
    v24 = *(_QWORD *)&v19 - 1;
    while (1)
    {
      v26 = v23[1];
      if (v26 == (uint64_t *)v6)
      {
        if (v23[2] == (uint64_t *)v6)
          goto LABEL_33;
      }
      else if (((unint64_t)v26 & v24) != v21)
      {
        goto LABEL_34;
      }
      v23 = (uint64_t **)*v23;
      if (!v23)
        goto LABEL_34;
    }
  }
  while (1)
  {
    v25 = (unint64_t)v23[1];
    if (v25 == v6)
      break;
    if (v25 >= *(_QWORD *)&v19)
      v25 %= *(_QWORD *)&v19;
    if (v25 != v21)
      goto LABEL_34;
LABEL_22:
    v23 = (uint64_t **)*v23;
    if (!v23)
      goto LABEL_34;
  }
  if (v23[2] != (uint64_t *)v6)
    goto LABEL_22;
LABEL_33:
  v27 = v18[21];
  if (!v27)
    goto LABEL_34;
  v30 = *((unsigned __int16 *)v23 + 12);
  v31 = v27 + 1864 * *((unsigned __int16 *)v23 + 12);
  if (v244)
  {
    if (v244 == v243)
    {
      v246 = v245;
      (*(void (**)(_QWORD *, _BYTE *))(v243[0] + 24))(v243, v245);
    }
    else
    {
      v246 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v244 + 16))(v244);
    }
  }
  else
  {
    v246 = 0;
  }
  v217 = v8;
  v216 = v7;
  v241 = (float64x2_t *)v31;
  *(_OWORD *)v238 = 0u;
  *(_OWORD *)v239 = 0u;
  v240 = 1065353216;
  *(_OWORD *)v235 = 0u;
  *(_OWORD *)__p = 0u;
  v237 = 1065353216;
  v233 = 0;
  v234 = 0;
  v232 = &v233;
  v229 = 0;
  v230 = 0;
  v231 = 0;
  std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>>>::__emplace_unique_key_args<md::mun::CollectionPoint const*,std::piecewise_construct_t const&,std::tuple<md::mun::CollectionPoint const* const&>,std::tuple<>>((float *)v238, v31, &v241)[3] = v31;
  std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>>>::__emplace_unique_key_args<md::mun::CollectionPoint const*,std::piecewise_construct_t const&,std::tuple<md::mun::CollectionPoint const* const&>,std::tuple<>>((float *)v235, v31, &v241)[3] = 0;
  v32 = (double *)(v27 + 1864 * v30);
  v33 = v32[1];
  v34 = v32[2];
  v35 = *v5 - v33;
  v36 = v5[1] - v34;
  v37 = v32[3];
  v38 = v5[2] - v37;
  v39 = v226;
  v214 = sqrt(v35 * v35 + v36 * v36 + v38 * v38);
  v40 = fmin(v226[2], v214);
  v222 = v36 * (1.0 / v214);
  v223 = v35 * (1.0 / v214);
  v41 = v33 + v40 * v223;
  v221 = v38 * (1.0 / v214);
  v224 = v37 + v40 * v221;
  v225 = v34 + v40 * v222;
  v42 = v229;
  v43 = v230;
  if (v229 != v230)
  {
    v219 = v40 * 1.6;
    v220 = v40;
    v218 = fmax(v40 * 1.6, 10.0);
    v215 = v3 + 3;
    while (v246)
    {
      if (((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v246 + 48))(v246) & 1) != 0)
        goto LABEL_223;
      v44 = *((_QWORD *)v42 + 1);
      v45 = v42[2];
      if ((char *)v43 - (char *)v42 >= 25)
      {
        v46 = 0;
        v47 = 0xAAAAAAAAAAAAAAABLL * (v43 - v42);
        v48 = *(_QWORD *)v42;
        *(_OWORD *)buf = *(_OWORD *)(v42 + 1);
        v49 = (uint64_t)v42;
        do
        {
          v52 = v49 + 24 * v46 + 24;
          v53 = (2 * v46) | 1;
          v46 = 2 * v46 + 2;
          if (v46 < v47)
          {
            v50 = *(double *)v52;
            if (*(double *)v52 <= *(double *)(v52 + 24))
              v51 = -1;
            else
              v51 = 1;
            if (v51 <= 0)
            {
              v46 = v53;
            }
            else
            {
              v50 = *(double *)(v52 + 24);
              v52 += 24;
            }
          }
          else
          {
            v50 = *(double *)v52;
            v46 = v53;
          }
          *(double *)v49 = v50;
          *(_OWORD *)(v49 + 8) = *(_OWORD *)(v52 + 8);
          v49 = v52;
        }
        while (v46 <= (uint64_t)((unint64_t)(v47 - 2) >> 1));
        v54 = (_OWORD *)(v52 + 8);
        if ((double *)v52 == v43 - 3)
        {
          *(_QWORD *)v52 = v48;
          *v54 = *(_OWORD *)buf;
        }
        else
        {
          *(double *)v52 = *(v43 - 3);
          *v54 = *((_OWORD *)v43 - 1);
          *((_QWORD *)v43 - 3) = v48;
          *((_OWORD *)v43 - 1) = *(_OWORD *)buf;
          v55 = v52 - (_QWORD)v42 + 24;
          if (v55 >= 25)
          {
            v56 = (v55 / 0x18uLL - 2) >> 1;
            v57 = &v42[3 * v56];
            v58 = *v57;
            v59 = *(double *)v52;
            v60 = *(_QWORD *)(v52 + 8);
            v61 = *v57 <= *(double *)v52 ? -1 : 1;
            if (v61 >= 1)
            {
              v62 = *(_QWORD *)(v52 + 16);
              do
              {
                v63 = v52;
                v52 = (uint64_t)v57;
                *(double *)v63 = v58;
                *(_OWORD *)(v63 + 8) = *(_OWORD *)(v57 + 1);
                if (!v56)
                  break;
                v56 = (v56 - 1) >> 1;
                v57 = &v42[3 * v56];
                v58 = *v57;
                v64 = *v57 <= v59 ? -1 : 1;
              }
              while (v64 > 0);
              *(double *)v52 = v59;
              *(_QWORD *)(v52 + 8) = v60;
              *(_QWORD *)(v52 + 16) = v62;
            }
          }
        }
        v43 = v230;
      }
      v230 = v43 - 3;
      *(_QWORD *)buf = v44;
      v65 = *(double *)(v44 + 8);
      v66 = *(double *)(v44 + 16);
      v67 = v41 - v65;
      v68 = v225 - v66;
      v69 = *(double *)(v44 + 24);
      v70 = v224 - v69;
      v71 = (v41 - v65) * v223 + (v225 - v66) * v222 + (v224 - v69) * v221;
      if (v241 != (float64x2_t *)v44)
      {
        v72 = sqrt(v67 * v67 + v68 * v68 + v70 * v70);
        if (v72 + v45 <= v218
          || sqrt((v241->f64[1] - v65) * (v241->f64[1] - v65)+ (v241[1].f64[0] - v66) * (v241[1].f64[0] - v66)+ (v241[1].f64[1] - v69) * (v241[1].f64[1] - v69)) >= v45)
        {
          v73 = v72 <= 7.4 && v217 == 0;
          v74 = v73 || v45 <= 10.0;
          v75 = !v74 && v71 < 0.0;
          v76 = !v75 && v72 <= v40;
          if (v76 && (v40 - v72) * 4.0 >= v45)
          {
            v77 = v233;
            v78 = &v233;
LABEL_99:
            v79 = v78;
            if (v77)
            {
              do
              {
                v78 = (uint64_t **)v77;
                v80 = v77[4];
                if (v80 > v44)
                {
                  v77 = *v78;
                  goto LABEL_99;
                }
                if (v80 >= v44)
                  goto LABEL_108;
                v77 = v78[1];
              }
              while (v77);
              v79 = v78 + 1;
            }
            v81 = (uint64_t *)operator new(0x28uLL);
            v81[4] = v44;
            *v81 = 0;
            v81[1] = 0;
            v81[2] = (uint64_t)v78;
            *v79 = v81;
            if (*v232)
            {
              v232 = (uint64_t **)*v232;
              v82 = *v79;
            }
            else
            {
              v82 = v81;
            }
            std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v233, v82);
            ++v234;
            v44 = *(_QWORD *)buf;
          }
        }
      }
LABEL_108:
      if (v71 >= 0.0 && v219 >= v45)
      {
        v84 = (double *)v241;
        v85 = v241->f64[1] - *(double *)(v44 + 8);
        v86 = vsubq_f64(v241[1], *(float64x2_t *)(v44 + 16));
        v87 = vmulq_f64(v86, v86);
        if (sqrt(v87.f64[0] + v85 * v85 + v87.f64[1]) <= v39[2])
        {
          v88 = std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>>>::find<md::mun::CollectionPoint const*>(v215, v44);
          if (v88)
          {
            v89 = (unint64_t *)v88[3];
            v90 = (unint64_t *)v88[4];
            while (v89 != v90)
            {
              v91 = *v89;
              v228 = v91;
              if (v91 == v44)
                goto LABEL_116;
              if (*(_QWORD *)v91 == *(_QWORD *)v44)
                goto LABEL_116;
              v92 = *(double *)(v91 + 8);
              v93 = *(double *)(v91 + 16);
              v94 = v92 - *(double *)(v44 + 8);
              v95 = v93 - *(double *)(v44 + 16);
              v96 = *(double *)(v91 + 24);
              v97 = v96 - *(double *)(v44 + 24);
              v98 = sqrt(v94 * v94 + v95 * v95 + v97 * v97);
              if ((v95 * v68 + v97 * v70 + v94 * v67) / v98 < 0.0)
                goto LABEL_116;
              v99 = ((v93 - v84[2]) * (v225 - v93) + (v96 - v84[3]) * (v224 - v96) + (v92 - v84[1]) * (v41 - v92))
                  / sqrt((v92 - v84[1]) * (v92 - v84[1])+ (v93 - v84[2]) * (v93 - v84[2])+ (v96 - v84[3]) * (v96 - v84[3]));
              v100 = *(_QWORD *)(v44 + 80);
              v101 = *(_QWORD *)(v91 + 80);
              v102 = v101 - v100;
              v74 = v100 > v101;
              v103 = v100 - v101;
              if (v74)
                v104 = v103;
              else
                v104 = v102;
              v105 = (double *)std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>>>::__emplace_unique_key_args<md::mun::CollectionPoint const*,std::piecewise_construct_t const&,std::tuple<md::mun::CollectionPoint const* const&>,std::tuple<>>((float *)v235, v44, buf);
              v74 = v104 > 0xEA60;
              v39 = v226;
              if (v74)
                v106 = *v226;
              else
                v106 = -0.0;
              v107 = v226[7];
              v108 = fmin(v99, v45);
              v109 = v226[5];
              if (v108 < v109)
                v107 = v226[6] + fmin(fmax((v108 - v226[4]) / (v109 - v226[4]), 0.0), 1.0) * (v107 - v226[6]);
              v110 = v106 + v98;
              v111 = v226[8] * v107;
              if (v111 + v107 >= v98)
              {
                v113 = v107 - v111;
                if (v113 <= v98)
                  goto LABEL_134;
                v112 = v113 - v98;
                v107 = v98;
              }
              else
              {
                v112 = v98 - (v111 + v107);
              }
              v110 = v226[9] * v112 / v107 + v110;
LABEL_134:
              v114 = v110 + v105[3];
              if (!v235[1])
                goto LABEL_115;
              v115 = 0x9DDFEA08EB382D69 * (((8 * v91) + 8) ^ HIDWORD(v91));
              v116 = 0x9DDFEA08EB382D69 * (HIDWORD(v91) ^ (v115 >> 47) ^ v115);
              v117 = 0x9DDFEA08EB382D69 * (v116 ^ (v116 >> 47));
              v118 = (uint8x8_t)vcnt_s8((int8x8_t)v235[1]);
              v118.i16[0] = vaddlv_u8(v118);
              if (v118.u32[0] > 1uLL)
              {
                v119 = v117;
                if ((void *)v117 >= v235[1])
                  v119 = v117 % (unint64_t)v235[1];
              }
              else
              {
                v119 = v117 & ((unint64_t)v235[1] - 1);
              }
              v120 = (_QWORD *)*((_QWORD *)v235[0] + v119);
              if (!v120 || (v121 = (_QWORD *)*v120) == 0)
              {
LABEL_115:
                *((double *)std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>>>::__emplace_unique_key_args<md::mun::CollectionPoint const*,std::piecewise_construct_t const&,std::tuple<md::mun::CollectionPoint const* const&>,std::tuple<>>((float *)v235, v91, &v228)+ 3) = v114;
                std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>>>::__emplace_unique_key_args<md::mun::CollectionPoint const*,std::piecewise_construct_t const&,std::tuple<md::mun::CollectionPoint const* const&>,std::tuple<>>((float *)v238, v91, &v228)[3] = v44;
                goto LABEL_116;
              }
              if (v118.u32[0] < 2uLL)
              {
                while (1)
                {
                  v123 = v121[1];
                  if (v117 == v123)
                  {
                    if (v121[2] == v91)
                      goto LABEL_155;
                  }
                  else if ((v123 & ((uint64_t)v235[1] - 1)) != v119)
                  {
                    goto LABEL_115;
                  }
                  v121 = (_QWORD *)*v121;
                  if (!v121)
                    goto LABEL_115;
                }
              }
              while (1)
              {
                v122 = v121[1];
                if (v117 == v122)
                  break;
                if ((void *)v122 >= v235[1])
                  v122 %= (unint64_t)v235[1];
                if (v122 != v119)
                  goto LABEL_115;
LABEL_144:
                v121 = (_QWORD *)*v121;
                if (!v121)
                  goto LABEL_115;
              }
              if (v121[2] != v91)
                goto LABEL_144;
LABEL_155:
              if (v114 < *((double *)std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>>>::__emplace_unique_key_args<md::mun::CollectionPoint const*,std::piecewise_construct_t const&,std::tuple<md::mun::CollectionPoint const* const&>,std::tuple<>>((float *)v235, v91, &v228)+ 3))goto LABEL_115;
LABEL_116:
              ++v89;
            }
          }
        }
      }
      v42 = v229;
      v43 = v230;
      v40 = v220;
      if (v229 == v230)
        goto LABEL_157;
    }
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_272:
    abort();
  }
LABEL_157:
  if (v214 >= 10.0)
    v124 = 7.4;
  else
    v124 = 0.0;
  v125 = (uint64_t *)v232;
  v126 = v216;
  if (v232 == &v233)
    goto LABEL_219;
  v127 = 1.0 / sqrt(v41 * v41 + v225 * v225 + v224 * v224);
  v128 = v127 * v41;
  v129 = v127 * v225;
  v130 = v127 * v224;
  v227 = -(v129 * v221 - v130 * v222);
  v131 = -(v130 * v223 - v128 * v221);
  v132 = -(v128 * v222 - v129 * v223);
  v133 = fmin(fmax(v214 * 0.0181818182 + -0.454545455, 0.0), 1.0);
  v134 = v133 * -4.7 + 5.0;
  v135 = v133 * -1.5 + 5.0;
  v136 = 1.79769313e308;
  v137 = v41;
  do
  {
    v138 = (double *)std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>>>::__emplace_unique_key_args<md::mun::CollectionPoint const*,std::piecewise_construct_t const&,std::tuple<md::mun::CollectionPoint const* const&>,std::tuple<>>((float *)v235, v125[4], v125 + 4);
    v139 = v41 - *(double *)(v125[4] + 8);
    v140 = v225 - *(double *)(v125[4] + 16);
    v141 = v224 - *(double *)(v125[4] + 24);
    v142 = fabs(v140 * v222 + v139 * v223 + v141 * v221);
    v143 = (v142 - v124) * v135;
    if (v142 <= v124)
      v143 = -0.0;
    if (v217)
    {
      v144 = sqrt(v139 * v139 + v140 * v140 + v141 * v141);
      v145 = (2.5 - (v141 * v221 + v140 * v222 + v139 * v223) * 2.5 / v144) * v144;
    }
    else
    {
      v145 = 0.0;
    }
    v146 = fabs(v139 * v227 + v140 * v131 + v141 * v132) * v134 + v138[3] + fmin(v142, v124) + v143 + v145;
    *((double *)std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>>>::__emplace_unique_key_args<md::mun::CollectionPoint const*,std::piecewise_construct_t const&,std::tuple<md::mun::CollectionPoint const* const&>,std::tuple<>>((float *)v235, v125[4], v125 + 4)+ 3) = v146;
    v147 = (uint64_t *)v125[1];
    if (v147)
    {
      do
      {
        v148 = (uint64_t **)v147;
        v147 = (uint64_t *)*v147;
      }
      while (v147);
    }
    else
    {
      do
      {
        v148 = (uint64_t **)v125[2];
        v73 = *v148 == v125;
        v125 = (uint64_t *)v148;
      }
      while (!v73);
    }
    v136 = fmin(v146, v136);
    v125 = (uint64_t *)v148;
    v41 = v137;
  }
  while (v148 != &v233);
  v149 = (uint64_t *)v232;
  if (v232 == &v233)
    goto LABEL_219;
  v150 = 0;
  v151 = 0x80000000;
  v152 = v241;
  v153 = 1.79769313e308;
  do
  {
    v154 = (float64x2_t **)(v149 + 4);
    v155 = (double *)std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>>>::__emplace_unique_key_args<md::mun::CollectionPoint const*,std::piecewise_construct_t const&,std::tuple<md::mun::CollectionPoint const* const&>,std::tuple<>>((float *)v235, v149[4], v149 + 4);
    v156 = v155[3];
    if (v156 <= v39[1] + v136)
    {
      v157 = (LODWORD((*v154)[5].f64[0]) - LODWORD(v152[5].f64[0])) / 86400000;
      if (v151 < v157 || (v151 == v157 ? (v158 = v156 < v153) : (v158 = 0), v158))
      {
        v150 = *v154;
        v151 = (LODWORD((*v154)[5].f64[0]) - LODWORD(v152[5].f64[0])) / 86400000;
        v153 = v155[3];
      }
    }
    v159 = (uint64_t *)v149[1];
    if (v159)
    {
      do
      {
        v160 = (uint64_t **)v159;
        v159 = (uint64_t *)*v159;
      }
      while (v159);
    }
    else
    {
      do
      {
        v160 = (uint64_t **)v149[2];
        v73 = *v160 == v149;
        v149 = (uint64_t *)v160;
      }
      while (!v73);
    }
    v149 = (uint64_t *)v160;
  }
  while (v160 != &v233);
  if (!v150)
  {
LABEL_219:
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v180 = GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19F029000, v180, OS_LOG_TYPE_INFO, "NavGraph: No path found from start to the target point.", buf, 2u);
    }
LABEL_223:
    v15 = 0;
    if (!v42)
      goto LABEL_225;
LABEL_224:
    operator delete(v42);
    goto LABEL_225;
  }
  *(_QWORD *)buf = v150;
  if (v150 != v152)
  {
    v152 = v150;
    while (1)
    {
      v163 = *(float64x2_t ***)(v126 + 8);
      v162 = *(_QWORD *)(v126 + 16);
      if ((unint64_t)v163 >= v162)
        break;
      *v163 = v152;
      v161 = v163 + 1;
LABEL_195:
      *(_QWORD *)(v126 + 8) = v161;
      v152 = (float64x2_t *)std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>>>::__emplace_unique_key_args<md::mun::CollectionPoint const*,std::piecewise_construct_t const&,std::tuple<md::mun::CollectionPoint const* const&>,std::tuple<>>((float *)v238, *(unint64_t *)buf, buf)[3];
      *(_QWORD *)buf = v152;
      if (v152 == v241)
        goto LABEL_238;
    }
    v164 = *(float64x2_t ***)v126;
    v165 = (uint64_t)v163 - *(_QWORD *)v126;
    v166 = v165 >> 3;
    v167 = (v165 >> 3) + 1;
    if (v167 >> 61)
      goto LABEL_272;
    v168 = v162 - (_QWORD)v164;
    if (v168 >> 2 > v167)
      v167 = v168 >> 2;
    if ((unint64_t)v168 >= 0x7FFFFFFFFFFFFFF8)
      v169 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v169 = v167;
    if (v169)
    {
      if (v169 >> 61)
        goto LABEL_273;
      v170 = operator new(8 * v169);
    }
    else
    {
      v170 = 0;
    }
    v171 = (float64x2_t **)&v170[8 * v166];
    *v171 = v152;
    v161 = v171 + 1;
    if (v163 == v164)
    {
      v164 = v163;
      v126 = v216;
      goto LABEL_217;
    }
    v172 = (char *)(v163 - 1) - (char *)v164;
    if (v172 >= 0x58)
    {
      v173 = (char *)v163 - &v170[v165];
      v126 = v216;
      if (v173 >= 0x20)
      {
        v174 = (v172 >> 3) + 1;
        v175 = &v170[8 * v166 - 16];
        v176 = v163 - 2;
        v177 = v174 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v178 = *(_OWORD *)v176;
          *(v175 - 1) = *((_OWORD *)v176 - 1);
          *v175 = v178;
          v175 -= 2;
          v176 -= 4;
          v177 -= 4;
        }
        while (v177);
        v171 -= v174 & 0x3FFFFFFFFFFFFFFCLL;
        v163 -= v174 & 0x3FFFFFFFFFFFFFFCLL;
        if (v174 == (v174 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_217;
      }
    }
    else
    {
      v126 = v216;
    }
    do
    {
      v179 = *--v163;
      *--v171 = v179;
    }
    while (v163 != v164);
    v164 = *(float64x2_t ***)v126;
LABEL_217:
    *(_QWORD *)v126 = v171;
    *(_QWORD *)(v126 + 8) = v161;
    *(_QWORD *)(v126 + 16) = &v170[8 * v169];
    if (v164)
      operator delete(v164);
    goto LABEL_195;
  }
LABEL_238:
  v190 = *(float64x2_t ***)(v126 + 8);
  v189 = *(_QWORD *)(v126 + 16);
  if ((unint64_t)v190 >= v189)
  {
    v192 = *(float64x2_t ***)v126;
    v193 = (uint64_t)v190 - *(_QWORD *)v126;
    v194 = v193 >> 3;
    v195 = (v193 >> 3) + 1;
    if (v195 >> 61)
      goto LABEL_272;
    v196 = v189 - (_QWORD)v192;
    if (v196 >> 2 > v195)
      v195 = v196 >> 2;
    if ((unint64_t)v196 >= 0x7FFFFFFFFFFFFFF8)
      v197 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v197 = v195;
    if (v197)
    {
      if (v197 >> 61)
LABEL_273:
        std::__throw_bad_array_new_length[abi:nn180100]();
      v198 = operator new(8 * v197);
    }
    else
    {
      v198 = 0;
    }
    v199 = (float64x2_t **)&v198[8 * v194];
    v200 = &v198[8 * v197];
    *v199 = v152;
    v191 = v199 + 1;
    if (v190 == v192)
    {
      v192 = v190;
    }
    else
    {
      v201 = (char *)v190 - (char *)v192 - 8;
      if (v201 < 0x58)
        goto LABEL_276;
      if ((unint64_t)((char *)v190 - &v198[v193]) < 0x20)
        goto LABEL_276;
      v202 = (v201 >> 3) + 1;
      v203 = &v198[8 * v194 - 16];
      v204 = v190 - 2;
      v205 = v202 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v206 = *(_OWORD *)v204;
        *(v203 - 1) = *((_OWORD *)v204 - 1);
        *v203 = v206;
        v203 -= 2;
        v204 -= 4;
        v205 -= 4;
      }
      while (v205);
      v199 -= v202 & 0x3FFFFFFFFFFFFFFCLL;
      v190 -= v202 & 0x3FFFFFFFFFFFFFFCLL;
      if (v202 != (v202 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_276:
        do
        {
          v207 = *--v190;
          *--v199 = v207;
        }
        while (v190 != v192);
        v192 = *(float64x2_t ***)v126;
      }
    }
    *(_QWORD *)v126 = v199;
    *(_QWORD *)(v126 + 8) = v191;
    *(_QWORD *)(v126 + 16) = v200;
    if (v192)
      operator delete(v192);
  }
  else
  {
    *v190 = v152;
    v191 = v190 + 1;
  }
  *(_QWORD *)(v126 + 8) = v191;
  v208 = *(float64x2_t ***)v126;
  v209 = (float64x2_t **)(v191 - 1);
  if (*(_QWORD **)v126 != v191 && v209 > v208)
  {
    v211 = (unint64_t)(v208 + 1);
    do
    {
      v212 = *(float64x2_t **)(v211 - 8);
      *(_QWORD *)(v211 - 8) = *v209;
      *v209-- = v212;
      v213 = v211 >= (unint64_t)v209;
      v211 += 8;
    }
    while (!v213);
  }
  v15 = 1;
  v42 = v229;
  if (v229)
    goto LABEL_224;
LABEL_225:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v233);
  v181 = __p[0];
  if (__p[0])
  {
    do
    {
      v182 = (_QWORD *)*v181;
      operator delete(v181);
      v181 = v182;
    }
    while (v182);
  }
  v183 = v235[0];
  v235[0] = 0;
  if (v183)
    operator delete(v183);
  v184 = v239[0];
  if (v239[0])
  {
    do
    {
      v185 = (_QWORD *)*v184;
      operator delete(v184);
      v184 = v185;
    }
    while (v185);
  }
  v186 = v238[0];
  v238[0] = 0;
  if (v186)
    operator delete(v186);
  v187 = v246;
  if (v246 == v245)
  {
    v188 = 4;
    v187 = v245;
  }
  else
  {
    if (!v246)
      goto LABEL_8;
    v188 = 5;
  }
  (*(void (**)(void))(*v187 + 8 * v188))();
LABEL_8:
  **(_BYTE **)(a1 + 8) = v15;
  result = v244;
  if (v244 == v243)
  {
    v17 = 4;
    result = v243;
  }
  else
  {
    if (!v244)
      return result;
    v17 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v17))();
}

void std::__function::__func<md::mun::MuninNavigation::findTargetPoint(md::mun::CollectionPoint const&,geo::Geocentric<double> const&,BOOL,md::MuninSettings const&)::$_0,std::allocator<md::mun::MuninNavigation::findTargetPoint(md::mun::CollectionPoint const&,geo::Geocentric<double> const&,BOOL,md::MuninSettings const&)::$_0>,void ()(md::mun::MuninNavigationGraph const*)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::mun::MuninNavigation::findTargetPoint(md::mun::CollectionPoint const&,geo::Geocentric<double> const&,BOOL,md::MuninSettings const&)::$_0,std::allocator<md::mun::MuninNavigation::findTargetPoint(md::mun::CollectionPoint const&,geo::Geocentric<double> const&,BOOL,md::MuninSettings const&)::$_0>,void ()(md::mun::MuninNavigationGraph const*)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E42D92D8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<md::mun::MuninNavigation::findTargetPoint(md::mun::CollectionPoint const&,geo::Geocentric<double> const&,BOOL,md::MuninSettings const&)::$_0,std::allocator<md::mun::MuninNavigation::findTargetPoint(md::mun::CollectionPoint const&,geo::Geocentric<double> const&,BOOL,md::MuninSettings const&)::$_0>,void ()(md::mun::MuninNavigationGraph const*)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E42D92D8;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::mun::MuninNavigation::findTargetPoint(md::mun::CollectionPoint const&,geo::Geocentric<double> const&,BOOL,md::MuninSettings const&)::$_0,std::allocator<md::mun::MuninNavigation::findTargetPoint(md::mun::CollectionPoint const&,geo::Geocentric<double> const&,BOOL,md::MuninSettings const&)::$_0>,void ()(md::mun::MuninNavigationGraph const*)>::operator()(uint64_t a1, _QWORD **a2)
{
  _QWORD *v3;
  double *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  unint64_t *v13;
  unint64_t *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  float v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  float v33;
  double v34;
  double v35;
  uint64_t *v36;
  unint64_t v37;
  float v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  BOOL v49;
  BOOL v50;
  double v52;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  float v58;
  float v59;
  float v60;
  float v61;
  uint64_t *v62;
  uint64_t **v63;
  uint64_t **v64;
  unint64_t v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  double v70;
  int v71;
  double v72;
  _QWORD *v73;
  double *v74;
  double v75;
  int v76;
  BOOL v77;
  uint64_t *v78;
  uint64_t **v79;
  _QWORD *v80;
  _QWORD *v81;
  void *v82;
  double v83;
  float v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  int v91;
  float v92;
  double v93;
  void *v94;
  unint64_t *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t **v98;
  uint64_t *v99;
  uint64_t v100;
  void *v101[2];
  void *__p[2];
  int v103;

  v3 = *a2;
  v5 = *(_QWORD *)(a1 + 16);
  v4 = *(double **)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 40);
  v91 = **(unsigned __int8 **)(a1 + 32);
  v94 = 0;
  v95 = 0;
  v96 = 0;
  v9 = (_QWORD *)*v3;
  v7 = v3 + 1;
  v8 = v9;
  if (v9 == v7)
  {
    v14 = 0;
    v13 = 0;
  }
  else
  {
    do
    {
      md::mun::MuninMetadata::neighborsWithinRadius(v8[4], v4, (uint64_t)&v94, 0, 40.0);
      v10 = (_QWORD *)v8[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (_QWORD *)v8[2];
          v12 = *v11 == (_QWORD)v8;
          v8 = v11;
        }
        while (!v12);
      }
      v8 = v11;
    }
    while (v11 != v7);
    v13 = (unint64_t *)v94;
    v14 = v95;
  }
  *(_OWORD *)v101 = 0u;
  *(_OWORD *)__p = 0u;
  v103 = 1065353216;
  v99 = 0;
  v100 = 0;
  v98 = &v99;
  if (v13 == v14)
  {
    v69 = 0;
    v68 = a1;
    goto LABEL_77;
  }
  v15 = v4[1];
  v16 = *(double *)(v5 + 8);
  v17 = *(double *)(v5 + 16);
  v18 = *v4 - v16;
  v19 = v4[2];
  v20 = *(double *)(v5 + 24);
  v21 = sqrt(v18 * v18 + (v15 - v17) * (v15 - v17) + (v19 - v20) * (v19 - v20));
  v83 = *(double *)(v6 + 8) * 5.0;
  v22 = *(float *)(v5 + 44);
  v23 = (float)-*(float *)(v5 + 32);
  v24 = (float)-*(float *)(v5 + 36);
  v25 = (float)-*(float *)(v5 + 40);
  v26 = v22;
  v27 = -(v17 * v23 - v16 * v24) * v23;
  v28 = 2.0;
  v29 = -(v17 + (v27 + -(v17 * v25 - v20 * v24) * v25 + -(v20 * v23 - v16 * v25) * v22) * 2.0);
  v30 = v15
      - (v17
       + (v27 + -(v17 * v25 - v20 * v24) * v25 + -(v20 * v23 - v16 * v25) * v22) * 2.0)
      + (-(v15 * v25 - v19 * v24) * v25 + -(v19 * v23 - *v4 * v25) * v22 + -(v15 * v23 - *v4 * v24) * v23) * 2.0;
  v31 = fmax(v21 * 0.05, 0.0);
  if (v31 <= 1.0)
    v32 = v31 * 3.0 + 1.0;
  else
    v32 = 4.0;
  v33 = v32;
  v84 = v33;
  v89 = (v15 - v17) * (1.0 / v21);
  v90 = v18 * (1.0 / v21);
  v87 = v22;
  v88 = (v19 - v20) * (1.0 / v21);
  v34 = 1.79769313e308;
  v35 = -3.0;
  v85 = v15
      - (v17
       + (v27 + -(v17 * v25 - v20 * v24) * v25 + -(v20 * v23 - v16 * v25) * v22) * 2.0)
      + (-(v15 * v25 - v19 * v24) * v25 + -(v19 * v23 - *v4 * v25) * v22 + -(v15 * v23 - *v4 * v24) * v23) * 2.0;
  v86 = -(v17 + (v27 + -(v17 * v25 - v20 * v24) * v25 + -(v20 * v23 - v16 * v25) * v22) * 2.0);
  do
  {
    v37 = *v13;
    v97 = v37;
    if (*(_QWORD *)v37 != *(_QWORD *)v5)
    {
      v41 = *(double *)(v37 + 8);
      v40 = *(double *)(v37 + 16);
      v42 = *v4 - v41;
      v43 = v4[1] - v40;
      v44 = *(double *)(v37 + 24);
      v45 = v4[2] - v44;
      v46 = v42 * v42 + v43 * v43 + v45 * v45;
      v47 = sqrt(v46);
      v48 = sqrt((v41 - *(double *)(v5 + 8)) * (v41 - *(double *)(v5 + 8))+ (v40 - *(double *)(v5 + 16)) * (v40 - *(double *)(v5 + 16))+ (v44 - *(double *)(v5 + 24)) * (v44 - *(double *)(v5 + 24)));
      v49 = v47 <= v21 && v48 <= *(double *)(v6 + 16);
      v50 = v49 && v48 <= v21 * 1.1;
      if (v50 && v48 <= (v21 - v47) * 4.0)
      {
        v52 = v40
            + v29
            + (-(v40 * v23 - v41 * v24) * v23 + -(v40 * v25 - v44 * v24) * v25 + -(v44 * v23 - v41 * v25) * v26) * v28;
        if (v30 <= v28)
        {
          if (v30 >= v35)
          {
            if (v52 > v28 || v52 < v35)
              goto LABEL_20;
          }
          else if (v52 > v28)
          {
            goto LABEL_20;
          }
        }
        else if (v52 < v35)
        {
          goto LABEL_20;
        }
        v93 = v34;
        v54 = *(_QWORD *)(v37 + 80);
        v55 = *(_QWORD *)(v5 + 80);
        v56 = v55 - v54;
        v49 = v54 > v55;
        v57 = v54 - v55;
        if (!v49)
          v57 = v56;
        v58 = v84;
        if (v57 <= 0xEA60)
          v58 = 1.0;
        v92 = v58;
        v59 = acos(fmax(fmin((v42 * v90 + v43 * v89 + v45 * v88) / sqrt(v46 * (v90 * v90 + v89 * v89 + v88 * v88)), 1.0), -1.0));
        v60 = v59 * 12.7323954;
        if (v91)
          v61 = v60;
        else
          v61 = 0.0;
        v62 = v99;
        v63 = &v99;
        v64 = &v99;
        if (v99)
        {
          while (1)
          {
            while (1)
            {
              v64 = (uint64_t **)v62;
              v65 = v62[4];
              if (v37 >= v65)
                break;
              v62 = *v64;
              v63 = v64;
              if (!*v64)
                goto LABEL_57;
            }
            if (v65 >= v37)
              break;
            v62 = v64[1];
            if (!v62)
            {
              v63 = v64 + 1;
              goto LABEL_57;
            }
          }
        }
        else
        {
LABEL_57:
          v66 = (uint64_t *)operator new(0x28uLL);
          v66[4] = v37;
          *v66 = 0;
          v66[1] = 0;
          v66[2] = (uint64_t)v64;
          *v63 = v66;
          if (*v98)
          {
            v98 = (uint64_t **)*v98;
            v36 = *v63;
          }
          else
          {
            v36 = v66;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v99, v36);
          ++v100;
          v37 = v97;
        }
        v38 = v47;
        v39 = (float)((float)(v61 + v38) * v92);
        *((double *)std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>>>::__emplace_unique_key_args<md::mun::CollectionPoint const*,std::piecewise_construct_t const&,std::tuple<md::mun::CollectionPoint const* const&>,std::tuple<>>((float *)v101, v37, &v97)+ 3) = v39;
        v34 = fmin(v93, v39);
        v29 = v86;
        v26 = v87;
        v28 = 2.0;
        v30 = v85;
        v35 = -3.0;
      }
    }
LABEL_20:
    ++v13;
  }
  while (v13 != v14);
  v67 = (uint64_t *)v98;
  v68 = a1;
  v69 = 0;
  if (v98 != &v99)
  {
    v70 = v34 + v83;
    v71 = 0x80000000;
    v72 = 1.79769313e308;
    do
    {
      v73 = v67 + 4;
      v74 = (double *)std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>>>::__emplace_unique_key_args<md::mun::CollectionPoint const*,std::piecewise_construct_t const&,std::tuple<md::mun::CollectionPoint const* const&>,std::tuple<>>((float *)v101, v67[4], v67 + 4);
      v75 = v74[3];
      if (v75 <= v70)
      {
        v76 = (*(_DWORD *)(*v73 + 80) - *(_DWORD *)(v5 + 80)) / 86400000;
        if (v71 < v76 || (v71 == v76 ? (v77 = v75 < v72) : (v77 = 0), v77))
        {
          v69 = *v73;
          v71 = (*(_DWORD *)(*v73 + 80) - *(_DWORD *)(v5 + 80)) / 86400000;
          v72 = v74[3];
        }
      }
      v78 = (uint64_t *)v67[1];
      if (v78)
      {
        do
        {
          v79 = (uint64_t **)v78;
          v78 = (uint64_t *)*v78;
        }
        while (v78);
      }
      else
      {
        do
        {
          v79 = (uint64_t **)v67[2];
          v12 = *v79 == v67;
          v67 = (uint64_t *)v79;
        }
        while (!v12);
      }
      v67 = (uint64_t *)v79;
    }
    while (v79 != &v99);
  }
LABEL_77:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v99);
  v80 = __p[0];
  if (__p[0])
  {
    do
    {
      v81 = (_QWORD *)*v80;
      operator delete(v80);
      v80 = v81;
    }
    while (v81);
  }
  v82 = v101[0];
  v101[0] = 0;
  if (v82)
    operator delete(v82);
  if (v94)
    operator delete(v94);
  **(_QWORD **)(v68 + 8) = v69;
}

void sub_19FE7B480(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19FE7B5F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19FE7B718(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19FE7B868(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FE7BA84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19FE7BB58(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FE7CEE4(_Unwind_Exception *a1)
{
  uint64_t *v1;
  void *v2;
  uint64_t v4;

  v4 = *v1;
  if (*v1)
  {
    v1[1] = v4;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1[3] + 40))(v1[3], v4, v1[2] - v4);
  }
  _Unwind_Resume(a1);
}

void sub_19FE7D64C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double VKTrafficFeatureDirection(_QWORD *a1, void *a2)
{
  id v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  long double v12;
  long double v13;
  double v14;

  v3 = a2;
  LODWORD(a1) = objc_msgSend(v3, "routeCoordinateAtDistance:beforeRouteCoordinate:", *a1, 20.0);
  objc_msgSend(v3, "pointAt:", a1);
  v5 = v4;
  v7 = v6;
  objc_msgSend(v3, "pointAt:", ((_DWORD)a1 + 1));
  v10 = vabdd_f64(v7, v9);
  if (vabdd_f64(v5, v8) < 0.00000011920929 && v10 < 0.00000011920929)
  {
    v14 = -1.0;
  }
  else
  {
    GEOBearingFromCoordinateToCoordinate();
    v13 = fmod(v12, 360.0);
    v14 = fmod(v13 + 360.0, 360.0);
  }

  return v14;
}

void sub_19FE7D830(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FE7D97C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void md::ARApplyWorldTransformUpdatesLogic::~ARApplyWorldTransformUpdatesLogic(md::ARApplyWorldTransformUpdatesLogic *this)
{
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
}

{
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *md::ARApplyWorldTransformUpdatesLogic::runBeforeLayout(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *result;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  double *v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  BOOL v85;
  uint64_t v86;
  float *v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  BOOL v103;
  uint64_t v104;
  double *v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  BOOL v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  double *v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  BOOL v142;
  uint64_t v143;
  uint64_t v144;
  float *v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  BOOL v162;
  uint64_t v163;
  uint64_t v164;
  double *v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  unint64_t v177;
  unint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  BOOL v182;
  uint64_t v183;
  uint64_t v184;
  double *v185;
  uint64_t v186;
  uint64_t v187;
  float32x2_t *v188;
  float32x2_t *v189;
  unint64_t v190;
  unint64_t v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v201;
  unint64_t v202;
  uint64_t v203;
  unint64_t v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  unint64_t v210;
  uint64_t v211;
  unint64_t v212;
  uint64_t v213;
  unint64_t v214;
  uint64_t v215;
  BOOL v216;
  double *v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  float32x2_t *v222;
  unint64_t v223;
  unint64_t v224;
  uint64_t v225;
  unint64_t v226;
  uint64_t v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t v231;
  uint64_t v232;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t v240;
  uint64_t v241;
  unint64_t v243;
  uint64_t v244;
  unint64_t v245;
  uint64_t v246;
  unint64_t v247;
  uint64_t v248;
  BOOL v249;
  uint64_t v250;
  uint64_t v251;
  unint64_t v252;
  uint64_t v253;
  double *v255;
  unint64_t v256;
  unint64_t v257;
  uint64_t v258;
  unint64_t v259;
  uint64_t v260;
  unint64_t v261;
  uint64_t v262;
  uint64_t v263;
  unint64_t v264;
  uint64_t v265;
  uint64_t v267;
  unint64_t v268;
  uint64_t v269;
  unint64_t v270;
  uint64_t v271;
  uint64_t v272;
  unint64_t v273;
  uint64_t v274;
  unint64_t v276;
  uint64_t v277;
  unint64_t v278;
  uint64_t v279;
  unint64_t v280;
  uint64_t v281;
  BOOL v282;
  uint64_t v283;
  uint64_t v284;
  unint64_t v285;
  uint64_t v286;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;

  v2 = *(_QWORD *)(a1 + 120);
  v3 = (_QWORD *)gdc::Registry::storage<arComponents::WorldTransform>(v2);
  v4 = gdc::Registry::storage<arComponents::TranslationToApply>(v2);
  v5 = (_QWORD *)v4;
  v6 = v4 + 32;
  v8 = v3[7];
  v7 = v3[8];
  if (*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56) >= (unint64_t)(v7 - v8))
    v9 = v3 + 4;
  else
    v9 = (_QWORD *)(v4 + 32);
  if (v3 + 4 == v9 && v8 != v7)
  {
    v68 = v3[10];
    do
    {
      v70 = *(unsigned int *)(v8 + 4);
      v71 = v5[4];
      v72 = (v5[5] - v71) >> 3;
      if (v70 >> 7 < v72)
      {
        v73 = *(_QWORD *)(v71 + 8 * (v70 >> 7));
        if (v73)
        {
          v74 = *(unsigned __int16 *)(v73 + 2 * (v70 & 0x7F));
          v76 = v5[7];
          v75 = v5[8];
          v77 = (v75 - v76) >> 3;
          if (v77 > v74)
          {
            v78 = v76 + 8 * v74;
            if (v78 != v75 && *(_DWORD *)(v78 + 4) == (_DWORD)v70)
            {
              v80 = *(_QWORD *)v8;
              v81 = *(_QWORD *)v8 >> 39;
              if (v81 < v72
                && (v82 = *(_QWORD *)(v71 + 8 * v81)) != 0
                && (v83 = *(unsigned __int16 *)(v82 + 2 * (HIDWORD(v80) & 0x7F)), v77 > v83)
                && ((v84 = v76 + 8 * v83, v84 != v75) ? (v85 = *(_DWORD *)(v84 + 4) == HIDWORD(v80)) : (v85 = 0), v85))
              {
                v69 = (double *)(v5[10] + 24 * v83);
              }
              else
              {
                v69 = (double *)v5[11];
              }
              _ZZN2md33ARApplyWorldTransformUpdatesLogic15runBeforeLayoutERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJNS_27ARUpDirectionUpdatesContextENS_18ARAnimationContextENS_26ARRotateTowardsUserContextENS_25LabelsExternalMeshContextEEEENS6_IJEEEEE20ResolvedDependenciesERNS_35ARApplyWorldTransformUpdatesContextEENK3__0clENS5_6EntityERN12arComponents14WorldTransformERNSL_18TranslationToApplyE(a1, v80, v68, v69);
            }
          }
        }
      }
      v68 += 80;
      v8 += 8;
    }
    while (v8 != v7);
  }
  if ((_QWORD *)v6 == v9)
  {
    v123 = v5[7];
    v124 = v5[8];
    if (v123 != v124)
    {
      v125 = (double *)v5[10];
      do
      {
        v127 = *(unsigned int *)(v123 + 4);
        v128 = v3[4];
        v129 = (v3[5] - v128) >> 3;
        if (v127 >> 7 < v129)
        {
          v130 = *(_QWORD *)(v128 + 8 * (v127 >> 7));
          if (v130)
          {
            v131 = *(unsigned __int16 *)(v130 + 2 * (v127 & 0x7F));
            v133 = v3[7];
            v132 = v3[8];
            v134 = (v132 - v133) >> 3;
            if (v134 > v131)
            {
              v135 = v133 + 8 * v131;
              if (v135 != v132 && *(_DWORD *)(v135 + 4) == (_DWORD)v127)
              {
                v137 = *(_QWORD *)v123;
                v138 = *(_QWORD *)v123 >> 39;
                if (v138 < v129
                  && (v139 = *(_QWORD *)(v128 + 8 * v138)) != 0
                  && (v140 = *(unsigned __int16 *)(v139 + 2 * (HIDWORD(v137) & 0x7F)), v134 > v140)
                  && ((v141 = v133 + 8 * v140, v141 != v132)
                    ? (v142 = *(_DWORD *)(v141 + 4) == HIDWORD(v137))
                    : (v142 = 0),
                      v142))
                {
                  v126 = v3[10] + 80 * v140;
                }
                else
                {
                  v126 = v3[11];
                }
                _ZZN2md33ARApplyWorldTransformUpdatesLogic15runBeforeLayoutERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJNS_27ARUpDirectionUpdatesContextENS_18ARAnimationContextENS_26ARRotateTowardsUserContextENS_25LabelsExternalMeshContextEEEENS6_IJEEEEE20ResolvedDependenciesERNS_35ARApplyWorldTransformUpdatesContextEENK3__0clENS5_6EntityERN12arComponents14WorldTransformERNSL_18TranslationToApplyE(a1, v137, v126, v125);
              }
            }
          }
        }
        v125 += 3;
        v123 += 8;
      }
      while (v123 != v124);
    }
  }
  v11 = *(_QWORD *)(a1 + 120);
  v12 = (_QWORD *)gdc::Registry::storage<arComponents::WorldTransform>(v11);
  v13 = gdc::Registry::storage<arComponents::RotationToApply>(v11);
  v14 = (_QWORD *)v13;
  v15 = v13 + 32;
  v17 = v12[7];
  v16 = v12[8];
  if (*(_QWORD *)(v13 + 64) - *(_QWORD *)(v13 + 56) >= (unint64_t)(v16 - v17))
    v18 = v12 + 4;
  else
    v18 = (_QWORD *)(v13 + 32);
  if (v12 + 4 == v18 && v17 != v16)
  {
    v86 = v12[10];
    do
    {
      v88 = *(unsigned int *)(v17 + 4);
      v89 = v14[4];
      v90 = (v14[5] - v89) >> 3;
      if (v88 >> 7 < v90)
      {
        v91 = *(_QWORD *)(v89 + 8 * (v88 >> 7));
        if (v91)
        {
          v92 = *(unsigned __int16 *)(v91 + 2 * (v88 & 0x7F));
          v94 = v14[7];
          v93 = v14[8];
          v95 = (v93 - v94) >> 3;
          if (v95 > v92)
          {
            v96 = v94 + 8 * v92;
            if (v96 != v93 && *(_DWORD *)(v96 + 4) == (_DWORD)v88)
            {
              v98 = *(_QWORD *)v17;
              v99 = *(_QWORD *)v17 >> 39;
              if (v99 < v90
                && (v100 = *(_QWORD *)(v89 + 8 * v99)) != 0
                && (v101 = *(unsigned __int16 *)(v100 + 2 * (HIDWORD(v98) & 0x7F)), v95 > v101)
                && ((v102 = v94 + 8 * v101, v102 != v93) ? (v103 = *(_DWORD *)(v102 + 4) == HIDWORD(v98)) : (v103 = 0),
                    v103))
              {
                v87 = (float *)(v14[10] + 16 * v101);
              }
              else
              {
                v87 = (float *)v14[11];
              }
              _ZZN2md33ARApplyWorldTransformUpdatesLogic15runBeforeLayoutERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJNS_27ARUpDirectionUpdatesContextENS_18ARAnimationContextENS_26ARRotateTowardsUserContextENS_25LabelsExternalMeshContextEEEENS6_IJEEEEE20ResolvedDependenciesERNS_35ARApplyWorldTransformUpdatesContextEENK3__1clENS5_6EntityERN12arComponents14WorldTransformERNSL_15RotationToApplyE(a1, v98, v86, v87);
            }
          }
        }
      }
      v86 += 80;
      v17 += 8;
    }
    while (v17 != v16);
  }
  if ((_QWORD *)v15 == v18)
  {
    v143 = v14[7];
    v144 = v14[8];
    if (v143 != v144)
    {
      v145 = (float *)v14[10];
      do
      {
        v147 = *(unsigned int *)(v143 + 4);
        v148 = v12[4];
        v149 = (v12[5] - v148) >> 3;
        if (v147 >> 7 < v149)
        {
          v150 = *(_QWORD *)(v148 + 8 * (v147 >> 7));
          if (v150)
          {
            v151 = *(unsigned __int16 *)(v150 + 2 * (v147 & 0x7F));
            v153 = v12[7];
            v152 = v12[8];
            v154 = (v152 - v153) >> 3;
            if (v154 > v151)
            {
              v155 = v153 + 8 * v151;
              if (v155 != v152 && *(_DWORD *)(v155 + 4) == (_DWORD)v147)
              {
                v157 = *(_QWORD *)v143;
                v158 = *(_QWORD *)v143 >> 39;
                if (v158 < v149
                  && (v159 = *(_QWORD *)(v148 + 8 * v158)) != 0
                  && (v160 = *(unsigned __int16 *)(v159 + 2 * (HIDWORD(v157) & 0x7F)), v154 > v160)
                  && ((v161 = v153 + 8 * v160, v161 != v152)
                    ? (v162 = *(_DWORD *)(v161 + 4) == HIDWORD(v157))
                    : (v162 = 0),
                      v162))
                {
                  v146 = v12[10] + 80 * v160;
                }
                else
                {
                  v146 = v12[11];
                }
                _ZZN2md33ARApplyWorldTransformUpdatesLogic15runBeforeLayoutERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJNS_27ARUpDirectionUpdatesContextENS_18ARAnimationContextENS_26ARRotateTowardsUserContextENS_25LabelsExternalMeshContextEEEENS6_IJEEEEE20ResolvedDependenciesERNS_35ARApplyWorldTransformUpdatesContextEENK3__1clENS5_6EntityERN12arComponents14WorldTransformERNSL_15RotationToApplyE(a1, v157, v146, v145);
              }
            }
          }
        }
        v145 += 4;
        v143 += 8;
      }
      while (v143 != v144);
    }
  }
  v20 = *(_QWORD *)(a1 + 120);
  v21 = (_QWORD *)gdc::Registry::storage<arComponents::WorldTransform>(v20);
  v22 = gdc::Registry::storage<arComponents::ScaleToApply>(v20);
  v23 = (_QWORD *)v22;
  v24 = v22 + 32;
  v26 = v21[7];
  v25 = v21[8];
  if (*(_QWORD *)(v22 + 64) - *(_QWORD *)(v22 + 56) >= (unint64_t)(v25 - v26))
    v27 = v21 + 4;
  else
    v27 = (_QWORD *)(v22 + 32);
  if (v21 + 4 == v27 && v26 != v25)
  {
    v104 = v21[10];
    do
    {
      v106 = *(unsigned int *)(v26 + 4);
      v107 = v23[4];
      v108 = (v23[5] - v107) >> 3;
      if (v106 >> 7 < v108)
      {
        v109 = *(_QWORD *)(v107 + 8 * (v106 >> 7));
        if (v109)
        {
          v110 = *(unsigned __int16 *)(v109 + 2 * (v106 & 0x7F));
          v112 = v23[7];
          v111 = v23[8];
          v113 = (v111 - v112) >> 3;
          if (v113 > v110)
          {
            v114 = v112 + 8 * v110;
            if (v114 != v111 && *(_DWORD *)(v114 + 4) == (_DWORD)v106)
            {
              v116 = *(_QWORD *)v26;
              v117 = *(_QWORD *)v26 >> 39;
              if (v117 < v108
                && (v118 = *(_QWORD *)(v107 + 8 * v117)) != 0
                && (v119 = *(unsigned __int16 *)(v118 + 2 * (HIDWORD(v116) & 0x7F)), v113 > v119)
                && ((v120 = v112 + 8 * v119, v120 != v111)
                  ? (v121 = *(_DWORD *)(v120 + 4) == HIDWORD(v116))
                  : (v121 = 0),
                    v121))
              {
                v105 = (double *)(v23[10] + 8 * v119);
              }
              else
              {
                v105 = (double *)v23[11];
              }
              _ZZN2md33ARApplyWorldTransformUpdatesLogic15runBeforeLayoutERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJNS_27ARUpDirectionUpdatesContextENS_18ARAnimationContextENS_26ARRotateTowardsUserContextENS_25LabelsExternalMeshContextEEEENS6_IJEEEEE20ResolvedDependenciesERNS_35ARApplyWorldTransformUpdatesContextEENK3__2clENS5_6EntityERN12arComponents14WorldTransformERNSL_12ScaleToApplyE(a1, v116, v104, v105);
            }
          }
        }
      }
      v104 += 80;
      v26 += 8;
    }
    while (v26 != v25);
  }
  if ((_QWORD *)v24 == v27)
  {
    v163 = v23[7];
    v164 = v23[8];
    if (v163 != v164)
    {
      v165 = (double *)v23[10];
      do
      {
        v167 = *(unsigned int *)(v163 + 4);
        v168 = v21[4];
        v169 = (v21[5] - v168) >> 3;
        if (v167 >> 7 < v169)
        {
          v170 = *(_QWORD *)(v168 + 8 * (v167 >> 7));
          if (v170)
          {
            v171 = *(unsigned __int16 *)(v170 + 2 * (v167 & 0x7F));
            v173 = v21[7];
            v172 = v21[8];
            v174 = (v172 - v173) >> 3;
            if (v174 > v171)
            {
              v175 = v173 + 8 * v171;
              if (v175 != v172 && *(_DWORD *)(v175 + 4) == (_DWORD)v167)
              {
                v177 = *(_QWORD *)v163;
                v178 = *(_QWORD *)v163 >> 39;
                if (v178 < v169
                  && (v179 = *(_QWORD *)(v168 + 8 * v178)) != 0
                  && (v180 = *(unsigned __int16 *)(v179 + 2 * (HIDWORD(v177) & 0x7F)), v174 > v180)
                  && ((v181 = v173 + 8 * v180, v181 != v172)
                    ? (v182 = *(_DWORD *)(v181 + 4) == HIDWORD(v177))
                    : (v182 = 0),
                      v182))
                {
                  v166 = v21[10] + 80 * v180;
                }
                else
                {
                  v166 = v21[11];
                }
                _ZZN2md33ARApplyWorldTransformUpdatesLogic15runBeforeLayoutERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJNS_27ARUpDirectionUpdatesContextENS_18ARAnimationContextENS_26ARRotateTowardsUserContextENS_25LabelsExternalMeshContextEEEENS6_IJEEEEE20ResolvedDependenciesERNS_35ARApplyWorldTransformUpdatesContextEENK3__2clENS5_6EntityERN12arComponents14WorldTransformERNSL_12ScaleToApplyE(a1, v177, v166, v165);
              }
            }
          }
        }
        ++v165;
        v163 += 8;
      }
      while (v163 != v164);
    }
  }
  v29 = *(_QWORD *)(a1 + 120);
  v30 = (_QWORD *)gdc::Registry::storage<arComponents::WorldTransform>(v29);
  v31 = (_QWORD *)gdc::Registry::storage<arComponents::UpRelativeTranslationToApply>(v29);
  v32 = gdc::Registry::storage<arComponents::UpDirection>(v29);
  v33 = (_QWORD *)v32;
  v34 = v32 + 32;
  v36 = v30[7];
  v35 = v30[8];
  if (v31[8] - v31[7] >= (unint64_t)(v35 - v36))
    v37 = v30 + 4;
  else
    v37 = v31 + 4;
  if (*(_QWORD *)(v32 + 64) - *(_QWORD *)(v32 + 56) >= v37[4] - v37[3])
    v38 = v37;
  else
    v38 = (_QWORD *)(v32 + 32);
  if (v30 + 4 == v38 && v36 != v35)
  {
    v122 = v30[10];
    do
    {
      v190 = *(unsigned int *)(v36 + 4);
      v191 = v190 >> 7;
      v192 = v31[4];
      v193 = (v31[5] - v192) >> 3;
      if (v190 >> 7 >= v193)
        goto LABEL_194;
      v194 = *(_QWORD *)(v192 + 8 * v191);
      if (!v194)
        goto LABEL_194;
      v195 = *(unsigned __int16 *)(v194 + 2 * (v190 & 0x7F));
      v197 = v31[7];
      v196 = v31[8];
      v198 = (v196 - v197) >> 3;
      if (v198 <= v195)
        goto LABEL_194;
      v199 = v197 + 8 * v195;
      if (v199 == v196 || *(_DWORD *)(v199 + 4) != (_DWORD)v190)
        goto LABEL_194;
      v201 = v33[4];
      v202 = (v33[5] - v201) >> 3;
      if (v191 >= v202)
        goto LABEL_194;
      v203 = *(_QWORD *)(v201 + 8 * v191);
      if (!v203)
        goto LABEL_194;
      v204 = *(unsigned __int16 *)(v203 + 2 * (v190 & 0x7F));
      v206 = v33[7];
      v205 = v33[8];
      v207 = (v205 - v206) >> 3;
      if (v207 <= v204)
        goto LABEL_194;
      v208 = v206 + 8 * v204;
      if (v208 == v205 || *(_DWORD *)(v208 + 4) != (_DWORD)v190)
        goto LABEL_194;
      v210 = *(_QWORD *)v36;
      v211 = HIDWORD(*(_QWORD *)v36);
      v212 = *(_QWORD *)v36 >> 39;
      if (v212 < v193
        && (v213 = *(_QWORD *)(v192 + 8 * v212)) != 0
        && (v214 = *(unsigned __int16 *)(v213 + 2 * (HIDWORD(v210) & 0x7F)), v198 > v214)
        && ((v215 = v197 + 8 * v214, v215 != v196) ? (v216 = *(_DWORD *)(v215 + 4) == (_DWORD)v211) : (v216 = 0), v216))
      {
        v217 = (double *)(v31[10] + 8 * v214);
        if (v212 >= v202)
          goto LABEL_192;
      }
      else
      {
        v217 = (double *)v31[11];
        if (v212 >= v202)
          goto LABEL_192;
      }
      v218 = *(_QWORD *)(v201 + 8 * v212);
      if (v218)
      {
        v219 = *(unsigned __int16 *)(v218 + 2 * (HIDWORD(v210) & 0x7F));
        if (v207 > v219)
        {
          v220 = v206 + 8 * v219;
          if (v220 != v205 && *(_DWORD *)(v220 + 4) == (_DWORD)v211)
          {
            v189 = (float32x2_t *)(v33[10] + 12 * v219);
            goto LABEL_193;
          }
        }
      }
LABEL_192:
      v189 = (float32x2_t *)v33[11];
LABEL_193:
      _ZZN2md33ARApplyWorldTransformUpdatesLogic15runBeforeLayoutERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJNS_27ARUpDirectionUpdatesContextENS_18ARAnimationContextENS_26ARRotateTowardsUserContextENS_25LabelsExternalMeshContextEEEENS6_IJEEEEE20ResolvedDependenciesERNS_35ARApplyWorldTransformUpdatesContextEENK3__3clENS5_6EntityERN12arComponents14WorldTransformERNSL_28UpRelativeTranslationToApplyERNSL_11UpDirectionE(a1, v210, v122, v217, v189);
LABEL_194:
      v122 += 80;
      v36 += 8;
    }
    while (v36 != v35);
  }
  if (v31 + 4 == v38)
  {
    v183 = v31[7];
    v184 = v31[8];
    if (v183 != v184)
    {
      v185 = (double *)v31[10];
      do
      {
        v223 = *(unsigned int *)(v183 + 4);
        v224 = v223 >> 7;
        v225 = v30[4];
        v226 = (v30[5] - v225) >> 3;
        if (v223 >> 7 >= v226)
          goto LABEL_231;
        v227 = *(_QWORD *)(v225 + 8 * v224);
        if (!v227)
          goto LABEL_231;
        v228 = *(unsigned __int16 *)(v227 + 2 * (v223 & 0x7F));
        v230 = v30[7];
        v229 = v30[8];
        v231 = (v229 - v230) >> 3;
        if (v231 <= v228)
          goto LABEL_231;
        v232 = v230 + 8 * v228;
        if (v232 == v229 || *(_DWORD *)(v232 + 4) != (_DWORD)v223)
          goto LABEL_231;
        v234 = v33[4];
        v235 = (v33[5] - v234) >> 3;
        if (v224 >= v235)
          goto LABEL_231;
        v236 = *(_QWORD *)(v234 + 8 * v224);
        if (!v236)
          goto LABEL_231;
        v237 = *(unsigned __int16 *)(v236 + 2 * (v223 & 0x7F));
        v239 = v33[7];
        v238 = v33[8];
        v240 = (v238 - v239) >> 3;
        if (v240 <= v237)
          goto LABEL_231;
        v241 = v239 + 8 * v237;
        if (v241 == v238 || *(_DWORD *)(v241 + 4) != (_DWORD)v223)
          goto LABEL_231;
        v243 = *(_QWORD *)v183;
        v244 = HIDWORD(*(_QWORD *)v183);
        v245 = *(_QWORD *)v183 >> 39;
        if (v245 < v226
          && (v246 = *(_QWORD *)(v225 + 8 * v245)) != 0
          && (v247 = *(unsigned __int16 *)(v246 + 2 * (HIDWORD(v243) & 0x7F)), v231 > v247)
          && ((v248 = v230 + 8 * v247, v248 != v229) ? (v249 = *(_DWORD *)(v248 + 4) == (_DWORD)v244) : (v249 = 0), v249))
        {
          v250 = v30[10] + 80 * v247;
          if (v245 >= v235)
            goto LABEL_229;
        }
        else
        {
          v250 = v30[11];
          if (v245 >= v235)
            goto LABEL_229;
        }
        v251 = *(_QWORD *)(v234 + 8 * v245);
        if (v251)
        {
          v252 = *(unsigned __int16 *)(v251 + 2 * (HIDWORD(v243) & 0x7F));
          if (v240 > v252)
          {
            v253 = v239 + 8 * v252;
            if (v253 != v238 && *(_DWORD *)(v253 + 4) == (_DWORD)v244)
            {
              v222 = (float32x2_t *)(v33[10] + 12 * v252);
              goto LABEL_230;
            }
          }
        }
LABEL_229:
        v222 = (float32x2_t *)v33[11];
LABEL_230:
        _ZZN2md33ARApplyWorldTransformUpdatesLogic15runBeforeLayoutERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJNS_27ARUpDirectionUpdatesContextENS_18ARAnimationContextENS_26ARRotateTowardsUserContextENS_25LabelsExternalMeshContextEEEENS6_IJEEEEE20ResolvedDependenciesERNS_35ARApplyWorldTransformUpdatesContextEENK3__3clENS5_6EntityERN12arComponents14WorldTransformERNSL_28UpRelativeTranslationToApplyERNSL_11UpDirectionE(a1, v243, v250, v185, v222);
LABEL_231:
        ++v185;
        v183 += 8;
      }
      while (v183 != v184);
    }
  }
  if ((_QWORD *)v34 == v38)
  {
    v186 = v33[7];
    v187 = v33[8];
    if (v186 != v187)
    {
      v188 = (float32x2_t *)v33[10];
      do
      {
        v256 = *(unsigned int *)(v186 + 4);
        v257 = v256 >> 7;
        v258 = v30[4];
        v259 = (v30[5] - v258) >> 3;
        if (v256 >> 7 >= v259)
          goto LABEL_268;
        v260 = *(_QWORD *)(v258 + 8 * v257);
        if (!v260)
          goto LABEL_268;
        v261 = *(unsigned __int16 *)(v260 + 2 * (v256 & 0x7F));
        v263 = v30[7];
        v262 = v30[8];
        v264 = (v262 - v263) >> 3;
        if (v264 <= v261)
          goto LABEL_268;
        v265 = v263 + 8 * v261;
        if (v265 == v262 || *(_DWORD *)(v265 + 4) != (_DWORD)v256)
          goto LABEL_268;
        v267 = v31[4];
        v268 = (v31[5] - v267) >> 3;
        if (v257 >= v268)
          goto LABEL_268;
        v269 = *(_QWORD *)(v267 + 8 * v257);
        if (!v269)
          goto LABEL_268;
        v270 = *(unsigned __int16 *)(v269 + 2 * (v256 & 0x7F));
        v272 = v31[7];
        v271 = v31[8];
        v273 = (v271 - v272) >> 3;
        if (v273 <= v270)
          goto LABEL_268;
        v274 = v272 + 8 * v270;
        if (v274 == v271 || *(_DWORD *)(v274 + 4) != (_DWORD)v256)
          goto LABEL_268;
        v276 = *(_QWORD *)v186;
        v277 = HIDWORD(*(_QWORD *)v186);
        v278 = *(_QWORD *)v186 >> 39;
        if (v278 < v259
          && (v279 = *(_QWORD *)(v258 + 8 * v278)) != 0
          && (v280 = *(unsigned __int16 *)(v279 + 2 * (HIDWORD(v276) & 0x7F)), v264 > v280)
          && ((v281 = v263 + 8 * v280, v281 != v262) ? (v282 = *(_DWORD *)(v281 + 4) == (_DWORD)v277) : (v282 = 0), v282))
        {
          v283 = v30[10] + 80 * v280;
          if (v278 >= v268)
            goto LABEL_266;
        }
        else
        {
          v283 = v30[11];
          if (v278 >= v268)
            goto LABEL_266;
        }
        v284 = *(_QWORD *)(v267 + 8 * v278);
        if (v284)
        {
          v285 = *(unsigned __int16 *)(v284 + 2 * (HIDWORD(v276) & 0x7F));
          if (v273 > v285)
          {
            v286 = v272 + 8 * v285;
            if (v286 != v271 && *(_DWORD *)(v286 + 4) == (_DWORD)v277)
            {
              v255 = (double *)(v31[10] + 8 * v285);
              goto LABEL_267;
            }
          }
        }
LABEL_266:
        v255 = (double *)v31[11];
LABEL_267:
        _ZZN2md33ARApplyWorldTransformUpdatesLogic15runBeforeLayoutERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJNS_27ARUpDirectionUpdatesContextENS_18ARAnimationContextENS_26ARRotateTowardsUserContextENS_25LabelsExternalMeshContextEEEENS6_IJEEEEE20ResolvedDependenciesERNS_35ARApplyWorldTransformUpdatesContextEENK3__3clENS5_6EntityERN12arComponents14WorldTransformERNSL_28UpRelativeTranslationToApplyERNSL_11UpDirectionE(a1, v276, v283, v255, v188);
LABEL_268:
        v188 = (float32x2_t *)((char *)v188 + 12);
        v186 += 8;
      }
      while (v186 != v187);
    }
  }
  v40 = (_QWORD *)gdc::Registry::storage<arComponents::TranslationToApply>(*(_QWORD *)(a1 + 120));
  v41 = v40;
  if (v40[29] && (v42 = (_QWORD *)v40[28]) != 0)
  {
    v43 = v40[31];
    v44 = v40[7];
    v45 = (v40[8] - v44) >> 3;
    while (1)
    {
      v289 = v44;
      v290 = v45;
      v288 = v43;
      v46 = v42[6];
      if (!v46)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v46 + 48))(v46, &v288, &v289);
      v42 = (_QWORD *)*v42;
      if (!v42)
        goto LABEL_46;
    }
  }
  else
  {
LABEL_46:
    v41[8] = v41[7];
    v41[11] = v41[10];
    v47 = (_QWORD *)gdc::Registry::storage<arComponents::UpRelativeTranslationToApply>(*(_QWORD *)(a1 + 120));
    v48 = v47;
    if (v47[29] && (v49 = (_QWORD *)v47[28]) != 0)
    {
      v50 = v47[31];
      v51 = v47[7];
      v52 = (v47[8] - v51) >> 3;
      while (1)
      {
        v289 = v51;
        v290 = v52;
        v288 = v50;
        v53 = v49[6];
        if (!v53)
          break;
        (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v53 + 48))(v53, &v288, &v289);
        v49 = (_QWORD *)*v49;
        if (!v49)
          goto LABEL_51;
      }
    }
    else
    {
LABEL_51:
      v48[8] = v48[7];
      v48[11] = v48[10];
      v54 = (_QWORD *)gdc::Registry::storage<arComponents::RotationToApply>(*(_QWORD *)(a1 + 120));
      v55 = v54;
      if (v54[29] && (v56 = (_QWORD *)v54[28]) != 0)
      {
        v57 = v54[31];
        v58 = v54[7];
        v59 = (v54[8] - v58) >> 3;
        while (1)
        {
          v289 = v58;
          v290 = v59;
          v288 = v57;
          v60 = v56[6];
          if (!v60)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v60 + 48))(v60, &v288, &v289);
          v56 = (_QWORD *)*v56;
          if (!v56)
            goto LABEL_56;
        }
      }
      else
      {
LABEL_56:
        v55[8] = v55[7];
        v55[11] = v55[10];
        result = (_QWORD *)gdc::Registry::storage<arComponents::ScaleToApply>(*(_QWORD *)(a1 + 120));
        v62 = result;
        if (!result[29] || (v63 = (_QWORD *)result[28]) == 0)
        {
LABEL_61:
          v62[8] = v62[7];
          v62[11] = v62[10];
          return result;
        }
        v64 = result[31];
        v65 = result[7];
        v66 = (result[8] - v65) >> 3;
        while (1)
        {
          v289 = v65;
          v290 = v66;
          v288 = v64;
          v67 = v63[6];
          if (!v67)
            break;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v67 + 48))(v67, &v288, &v289);
          v63 = (_QWORD *)*v63;
          if (!v63)
            goto LABEL_61;
        }
      }
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return (_QWORD *)md::ARApplyWorldTransformUpdatesLogic::runAfterLayout();
}

uint64_t md::ARApplyWorldTransformUpdatesLogic::runAfterLayout(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t result;
  uint64_t *v4;
  unint64_t *v5;
  uint64_t *v6;
  unint64_t *v7;
  _QWORD *v8;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _OWORD *v14;
  uint64_t v15;
  _OWORD *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t v26;
  unint64_t v27;
  _OWORD *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _OWORD *v39;
  __int128 *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v50;
  unint64_t v51;
  _OWORD *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  BOOL v57;

  v1 = *(_QWORD *)(a1 + 120);
  v2 = (_QWORD *)gdc::Registry::storage<arComponents::WorldTransform>(v1);
  result = gdc::Registry::storage<arComponents::BaseWorldTransform>(v1);
  v5 = *(unint64_t **)(result + 56);
  v4 = *(uint64_t **)(result + 64);
  v7 = (unint64_t *)v2[7];
  v6 = (uint64_t *)v2[8];
  if ((char *)v4 - (char *)v5 >= (unint64_t)((char *)v6 - (char *)v7))
    v8 = v2 + 4;
  else
    v8 = (_QWORD *)(result + 32);
  if (v2 + 4 == v8 && v7 != (unint64_t *)v6)
  {
    v11 = *(_QWORD *)(result + 32);
    v12 = (*(_QWORD *)(result + 40) - v11) >> 3;
    v13 = ((char *)v4 - (char *)v5) >> 3;
    v15 = *(_QWORD *)(result + 80);
    v14 = *(_OWORD **)(result + 88);
    v16 = (_OWORD *)(v2[10] + 32);
    do
    {
      v21 = *((unsigned int *)v7 + 1);
      if (v21 >> 7 < v12)
      {
        v22 = *(_QWORD *)(v11 + 8 * (v21 >> 7));
        if (v22)
        {
          v23 = *(unsigned __int16 *)(v22 + 2 * (v21 & 0x7F));
          if (v13 > v23)
          {
            v24 = (uint64_t *)&v5[v23];
            if (v24 != v4 && *((_DWORD *)v24 + 1) == (_DWORD)v21)
            {
              v26 = *v7;
              v27 = *v7 >> 39;
              v28 = v14;
              if (v27 < v12)
              {
                v29 = *(_QWORD *)(v11 + 8 * v27);
                v28 = v14;
                if (v29)
                {
                  v30 = *(unsigned __int16 *)(v29 + 2 * (HIDWORD(v26) & 0x7F));
                  v28 = v14;
                  if (v13 > v30)
                  {
                    v31 = (uint64_t *)&v5[v30];
                    if (*((_DWORD *)v31 + 1) != HIDWORD(v26) || v31 == v4)
                      v28 = v14;
                    else
                      v28 = (_OWORD *)(v15 + 80 * v30);
                  }
                }
              }
              v17 = v28[1];
              v18 = v28[2];
              v19 = v28[3];
              v20 = v28[4];
              *(v16 - 2) = *v28;
              *(v16 - 1) = v17;
              *v16 = v18;
              v16[1] = v19;
              v16[2] = v20;
            }
          }
        }
      }
      ++v7;
      v16 += 5;
    }
    while (v7 != (unint64_t *)v6);
  }
  if ((_QWORD *)(result + 32) == v8 && v5 != (unint64_t *)v4)
  {
    v33 = v2[4];
    v34 = (v2[5] - v33) >> 3;
    v36 = v2[7];
    v35 = v2[8];
    v37 = (v35 - v36) >> 3;
    v38 = v2[10];
    v39 = (_OWORD *)v2[11];
    v40 = (__int128 *)(*(_QWORD *)(result + 80) + 32);
    result = 80;
    do
    {
      v45 = *((unsigned int *)v5 + 1);
      if (v45 >> 7 < v34)
      {
        v46 = *(_QWORD *)(v33 + 8 * (v45 >> 7));
        if (v46)
        {
          v47 = *(unsigned __int16 *)(v46 + 2 * (v45 & 0x7F));
          if (v37 > v47)
          {
            v48 = v36 + 8 * v47;
            if (v48 != v35 && *(_DWORD *)(v48 + 4) == (_DWORD)v45)
            {
              v50 = *v5;
              v51 = *v5 >> 39;
              v52 = v39;
              if (v51 < v34)
              {
                v53 = *(_QWORD *)(v33 + 8 * v51);
                v52 = v39;
                if (v53)
                {
                  v54 = *(unsigned __int16 *)(v53 + 2 * (HIDWORD(v50) & 0x7F));
                  v52 = v39;
                  if (v37 > v54)
                  {
                    v55 = HIDWORD(v50);
                    v56 = v36 + 8 * v54;
                    v57 = *(_DWORD *)(v56 + 4) != (_DWORD)v55 || v56 == v35;
                    v52 = (_OWORD *)(v38 + 80 * v54);
                    if (v57)
                      v52 = v39;
                  }
                }
              }
              v41 = *(v40 - 1);
              v42 = *v40;
              v43 = v40[1];
              v44 = v40[2];
              *v52 = *(v40 - 2);
              v52[1] = v41;
              v52[2] = v42;
              v52[3] = v43;
              v52[4] = v44;
            }
          }
        }
      }
      ++v5;
      v40 += 5;
    }
    while (v5 != (unint64_t *)v4);
  }
  return result;
}

uint64_t gdc::Registry::storage<arComponents::BaseWorldTransform>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x7558385A40C6FA73;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x7558385A40C6FA73;
      if (*(_QWORD *)&v3 <= 0x7558385A40C6FA73uLL)
        v5 = 0x7558385A40C6FA73uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x7558385A40C6FA73;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x7558385A40C6FA73)
            {
              if (v7[2] == 0x7558385A40C6FA73)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x7558385A40C6FA73)
          {
            if (v7[2] == 0x7558385A40C6FA73)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::BaseWorldTransform]";
  *(_QWORD *)(v11 + 24) = 32;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B1D28;
  *(_QWORD *)(v11 + 8) = 0x7558385A40C6FA73;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x7558385A40C6FA73uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x7558385A40C6FA73;
  v15[1] = "arComponents::BaseWorldTransform]";
  v15[2] = 32;
  gdc::Registry::_registerStorageDataSignals(a1, 0x7558385A40C6FA73, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19FE7EB24(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<arComponents::BaseWorldTransform>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::BaseWorldTransform>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != (_DWORD)v10 || v11 == v8)
    return 0;
  v14 = (_QWORD *)(a1[10] + 80 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = (_QWORD *)a1[11];
  v14[3] = *(v15 - 7);
  v14[4] = *(v15 - 6);
  v14[5] = *(v15 - 5);
  v14[6] = *(v15 - 4);
  v16 = *(v15 - 10);
  v15 -= 10;
  *v14 = v16;
  v14[1] = v15[1];
  v14[2] = v15[2];
  v14[7] = v15[7];
  v14[8] = v15[8];
  v14[9] = v15[9];
  a1[11] = v15;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::BaseWorldTransform>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<arComponents::BaseWorldTransform>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

uint64_t gdc::Registry::storage<arComponents::TranslationToApply>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x2EB7B1A523944070;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x2EB7B1A523944070;
      if (*(_QWORD *)&v3 <= 0x2EB7B1A523944070uLL)
        v5 = 0x2EB7B1A523944070uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x2EB7B1A523944070;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x2EB7B1A523944070)
            {
              if (v7[2] == 0x2EB7B1A523944070)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x2EB7B1A523944070)
          {
            if (v7[2] == 0x2EB7B1A523944070)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::TranslationToApply]";
  *(_QWORD *)(v11 + 24) = 32;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B1D88;
  *(_QWORD *)(v11 + 8) = 0x2EB7B1A523944070;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x2EB7B1A523944070uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x2EB7B1A523944070;
  v15[1] = "arComponents::TranslationToApply]";
  v15[2] = 32;
  gdc::Registry::_registerStorageDataSignals(a1, 0x2EB7B1A523944070, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19FE7EF08(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void _ZZN2md33ARApplyWorldTransformUpdatesLogic15runBeforeLayoutERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJNS_27ARUpDirectionUpdatesContextENS_18ARAnimationContextENS_26ARRotateTowardsUserContextENS_25LabelsExternalMeshContextEEEENS6_IJEEEEE20ResolvedDependenciesERNS_35ARApplyWorldTransformUpdatesContextEENK3__0clENS5_6EntityERN12arComponents14WorldTransformERNSL_18TranslationToApplyE(uint64_t a1, unint64_t a2, uint64_t a3, double *a4)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t *v17;
  double v18;
  uint64_t *v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;

  v8 = (_QWORD *)gdc::Registry::storage<arComponents::BaseWorldTransform>(*(_QWORD *)(a1 + 120));
  v9 = v8[4];
  if (a2 >> 39 >= (v8[5] - v9) >> 3
    || (v10 = *(_QWORD *)(v9 + 8 * (a2 >> 39))) == 0
    || (v11 = *(unsigned __int16 *)(v10 + 2 * (HIDWORD(a2) & 0x7F)), v13 = v8[7], v12 = v8[8], v11 >= (v12 - v13) >> 3)
    || ((v14 = v13 + 8 * v11, v14 != v12) ? (v15 = *(_DWORD *)(v14 + 4) == HIDWORD(a2)) : (v15 = 0), !v15))
  {
    v16 = *(_QWORD *)(a1 + 120);
    v20 = *(_OWORD *)a3;
    v21 = *(_QWORD *)(a3 + 16);
    v22 = *(_OWORD *)(a3 + 24);
    v23 = *(_QWORD *)(a3 + 40);
    v24 = *(_QWORD *)(a3 + 48);
    v25 = *(_OWORD *)(a3 + 56);
    v26 = *(_QWORD *)(a3 + 72);
    v17 = (uint64_t *)gdc::Registry::storage<arComponents::BaseWorldTransform>(v16);
    gdc::ComponentStorageWrapper<arComponents::WorldTransform>::emplace(v17, a2, &v20);
  }
  v18 = *(double *)(a3 + 8);
  *(double *)a3 = *(double *)a3 + *a4;
  *(double *)(a3 + 8) = v18 + a4[1];
  *(double *)(a3 + 16) = *(double *)(a3 + 16) + a4[2];
  v19 = (uint64_t *)gdc::Registry::storage<arComponents::RequiresUpdateInRenderLayer<arComponents::WorldTransform>>(*(_QWORD *)(a1 + 120));
  gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v19, a2);
}

void _ZZN2md33ARApplyWorldTransformUpdatesLogic15runBeforeLayoutERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJNS_27ARUpDirectionUpdatesContextENS_18ARAnimationContextENS_26ARRotateTowardsUserContextENS_25LabelsExternalMeshContextEEEENS6_IJEEEEE20ResolvedDependenciesERNS_35ARApplyWorldTransformUpdatesContextEENK3__1clENS5_6EntityERN12arComponents14WorldTransformERNSL_15RotationToApplyE(uint64_t a1, unint64_t a2, uint64_t a3, float *a4)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t *v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  uint64_t *v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;

  v8 = (_QWORD *)gdc::Registry::storage<arComponents::BaseWorldTransform>(*(_QWORD *)(a1 + 120));
  v9 = v8[4];
  if (a2 >> 39 >= (v8[5] - v9) >> 3
    || (v10 = *(_QWORD *)(v9 + 8 * (a2 >> 39))) == 0
    || (v11 = *(unsigned __int16 *)(v10 + 2 * (HIDWORD(a2) & 0x7F)), v13 = v8[7], v12 = v8[8], v11 >= (v12 - v13) >> 3)
    || ((v14 = v13 + 8 * v11, v14 != v12) ? (v15 = *(_DWORD *)(v14 + 4) == HIDWORD(a2)) : (v15 = 0), !v15))
  {
    v16 = *(_QWORD *)(a1 + 120);
    v27 = *(_OWORD *)a3;
    v28 = *(_QWORD *)(a3 + 16);
    v29 = *(_OWORD *)(a3 + 24);
    v30 = *(_QWORD *)(a3 + 40);
    v31 = *(_QWORD *)(a3 + 48);
    v32 = *(_OWORD *)(a3 + 56);
    v33 = *(_QWORD *)(a3 + 72);
    v17 = (uint64_t *)gdc::Registry::storage<arComponents::BaseWorldTransform>(v16);
    gdc::ComponentStorageWrapper<arComponents::WorldTransform>::emplace(v17, a2, &v27);
  }
  v18 = *a4;
  v19 = a4[1];
  v20 = a4[2];
  v21 = a4[3];
  v23 = *(double *)(a3 + 40);
  v22 = *(double *)(a3 + 48);
  v24 = *(double *)(a3 + 24);
  v25 = *(double *)(a3 + 32);
  *(double *)(a3 + 24) = v22 * v18 + v24 * v21 + v25 * v20 - v23 * v19;
  *(double *)(a3 + 32) = v25 * v21 - (v24 * v20 - v22 * v19) + v23 * v18;
  *(double *)(a3 + 40) = v22 * v20 + v24 * v19 - v25 * v18 + v23 * v21;
  *(double *)(a3 + 48) = -(v24 * v18 + v25 * v19 + v23 * v20 - v22 * v21);
  v26 = (uint64_t *)gdc::Registry::storage<arComponents::RequiresUpdateInRenderLayer<arComponents::WorldTransform>>(*(_QWORD *)(a1 + 120));
  gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v26, a2);
}

void _ZZN2md33ARApplyWorldTransformUpdatesLogic15runBeforeLayoutERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJNS_27ARUpDirectionUpdatesContextENS_18ARAnimationContextENS_26ARRotateTowardsUserContextENS_25LabelsExternalMeshContextEEEENS6_IJEEEEE20ResolvedDependenciesERNS_35ARApplyWorldTransformUpdatesContextEENK3__2clENS5_6EntityERN12arComponents14WorldTransformERNSL_12ScaleToApplyE(uint64_t a1, unint64_t a2, uint64_t a3, double *a4)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t *v17;
  double v18;
  uint64_t *v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;

  v8 = (_QWORD *)gdc::Registry::storage<arComponents::BaseWorldTransform>(*(_QWORD *)(a1 + 120));
  v9 = v8[4];
  if (a2 >> 39 >= (v8[5] - v9) >> 3
    || (v10 = *(_QWORD *)(v9 + 8 * (a2 >> 39))) == 0
    || (v11 = *(unsigned __int16 *)(v10 + 2 * (HIDWORD(a2) & 0x7F)), v13 = v8[7], v12 = v8[8], v11 >= (v12 - v13) >> 3)
    || ((v14 = v13 + 8 * v11, v14 != v12) ? (v15 = *(_DWORD *)(v14 + 4) == HIDWORD(a2)) : (v15 = 0), !v15))
  {
    v16 = *(_QWORD *)(a1 + 120);
    v20 = *(_OWORD *)a3;
    v21 = *(_QWORD *)(a3 + 16);
    v22 = *(_OWORD *)(a3 + 24);
    v23 = *(_QWORD *)(a3 + 40);
    v24 = *(_QWORD *)(a3 + 48);
    v25 = *(_OWORD *)(a3 + 56);
    v26 = *(_QWORD *)(a3 + 72);
    v17 = (uint64_t *)gdc::Registry::storage<arComponents::BaseWorldTransform>(v16);
    gdc::ComponentStorageWrapper<arComponents::WorldTransform>::emplace(v17, a2, &v20);
  }
  v18 = *(double *)(a3 + 72) * *a4;
  *(float64x2_t *)(a3 + 56) = vmulq_n_f64(*(float64x2_t *)(a3 + 56), *a4);
  *(double *)(a3 + 72) = v18;
  v19 = (uint64_t *)gdc::Registry::storage<arComponents::RequiresUpdateInRenderLayer<arComponents::WorldTransform>>(*(_QWORD *)(a1 + 120));
  gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v19, a2);
}

void _ZZN2md33ARApplyWorldTransformUpdatesLogic15runBeforeLayoutERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJNS_27ARUpDirectionUpdatesContextENS_18ARAnimationContextENS_26ARRotateTowardsUserContextENS_25LabelsExternalMeshContextEEEENS6_IJEEEEE20ResolvedDependenciesERNS_35ARApplyWorldTransformUpdatesContextEENK3__3clENS5_6EntityERN12arComponents14WorldTransformERNSL_28UpRelativeTranslationToApplyERNSL_11UpDirectionE(uint64_t a1, unint64_t a2, uint64_t a3, double *a4, float32x2_t *a5)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t *v19;
  double v20;
  double v21;
  uint64_t *v22;
  float64x2_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;

  v10 = (_QWORD *)gdc::Registry::storage<arComponents::BaseWorldTransform>(*(_QWORD *)(a1 + 120));
  v11 = v10[4];
  if (a2 >> 39 >= (v10[5] - v11) >> 3
    || (v12 = *(_QWORD *)(v11 + 8 * (a2 >> 39))) == 0
    || (v13 = *(unsigned __int16 *)(v12 + 2 * (HIDWORD(a2) & 0x7F)), v15 = v10[7], v14 = v10[8], v13 >= (v14 - v15) >> 3)
    || ((v16 = v15 + 8 * v13, v16 != v14) ? (v17 = *(_DWORD *)(v16 + 4) == HIDWORD(a2)) : (v17 = 0), !v17))
  {
    v18 = *(_QWORD *)(a1 + 120);
    v23 = *(float64x2_t *)a3;
    v24 = *(_QWORD *)(a3 + 16);
    v25 = *(_OWORD *)(a3 + 24);
    v26 = *(_QWORD *)(a3 + 40);
    v27 = *(_QWORD *)(a3 + 48);
    v28 = *(_OWORD *)(a3 + 56);
    v29 = *(_QWORD *)(a3 + 72);
    v19 = (uint64_t *)gdc::Registry::storage<arComponents::BaseWorldTransform>(v18);
    gdc::ComponentStorageWrapper<arComponents::WorldTransform>::emplace(v19, a2, (__int128 *)&v23);
  }
  v20 = a5[1].f32[0];
  v21 = *a4;
  *(float64x2_t *)a3 = vmlaq_n_f64(*(float64x2_t *)a3, vcvtq_f64_f32(*a5), *a4);
  *(double *)(a3 + 16) = *(double *)(a3 + 16) + v21 * v20;
  v22 = (uint64_t *)gdc::Registry::storage<arComponents::RequiresUpdateInRenderLayer<arComponents::WorldTransform>>(*(_QWORD *)(a1 + 120));
  gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v22, a2);
}

void gdc::ComponentStorageWrapper<arComponents::TranslationToApply>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::TranslationToApply>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = (_QWORD *)(a1[10] + 24 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  v16 = *(_QWORD *)(v15 - 24);
  v15 -= 24;
  *v14 = v16;
  v14[1] = *(_QWORD *)(v15 + 8);
  v14[2] = *(_QWORD *)(v15 + 16);
  a1[11] = v15;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::TranslationToApply>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<arComponents::TranslationToApply>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void md::RealisticPassList::~RealisticPassList(md::RealisticPassList *this)
{
  uint64_t v2;
  ggl::RenderQueue *v3;
  md::FrameGraph *v4;

  *(_QWORD *)this = &off_1E4293050;
  v2 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(_QWORD *)this = off_1E42AF5D0;
  v3 = (ggl::RenderQueue *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    ggl::RenderQueue::~RenderQueue(v3);
    MEMORY[0x1A1AF4E00]();
  }
  v4 = (md::FrameGraph *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    md::FrameGraph::~FrameGraph(v4);
    MEMORY[0x1A1AF4E00]();
  }
}

{
  uint64_t v2;
  ggl::RenderQueue *v3;
  md::FrameGraph *v4;

  *(_QWORD *)this = &off_1E4293050;
  v2 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(_QWORD *)this = off_1E42AF5D0;
  v3 = (ggl::RenderQueue *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    ggl::RenderQueue::~RenderQueue(v3);
    MEMORY[0x1A1AF4E00]();
  }
  v4 = (md::FrameGraph *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    md::FrameGraph::~FrameGraph(v4);
    MEMORY[0x1A1AF4E00]();
  }
  JUMPOUT(0x1A1AF4E00);
}

void md::RealisticPassList::buildFrameGraph(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _DWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  _DWORD *v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t Resource;
  _BYTE *v58;
  __int128 v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE *v70;
  __int128 v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  unsigned int *v75;
  unsigned int v76;
  unsigned int v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  _BYTE *v82;
  __int128 v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  ggl::RenderQueue *v89;
  _QWORD *v90;
  _OWORD *v91;
  uint64_t v92;
  ggl::CommandBuffer *v93;
  ggl::CommandBuffer *v94;
  const char *v95;
  double v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  ggl::RenderQueue *v106;
  _QWORD *v107;
  ggl::CommandBuffer *v108;
  double v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  _QWORD *v117;
  _QWORD *v118;
  ggl::RenderQueue *v119;
  _QWORD *v120;
  ggl::CommandBuffer *v121;
  double v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  _QWORD *v130;
  _QWORD *v131;
  ggl::RenderQueue *v132;
  _QWORD *v133;
  ggl::CommandBuffer *v134;
  double v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t *v144;
  _QWORD *v145;
  ggl::RenderQueue *v146;
  _QWORD *v147;
  _OWORD *v148;
  ggl::CommandBuffer *v149;
  double v150;
  uint64_t v151;
  ggl::CommandBuffer *v152;
  double v153;
  uint64_t v154;
  ggl::CommandBuffer *v155;
  double v156;
  uint64_t v157;
  ggl::CommandBuffer *v158;
  double v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t *v163;
  void *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  _BYTE v169[48];
  __int128 v170;
  uint64_t v171;
  char v172;
  __int128 v173;
  int v174;
  _BYTE v175[48];
  __int128 v176;
  uint64_t v177;
  char v178;
  __int128 v179;
  int v180;
  _BYTE v181[32];
  __int128 v182;
  __int128 v183;
  uint64_t v184;
  char v185;
  __int128 v186;
  int v187;
  _OWORD v188[2];
  __int128 v189;
  _DWORD v190[14];
  _QWORD *v191;
  _QWORD v192[3];
  _QWORD *v193;
  _QWORD v194[3];
  _QWORD *v195;
  _QWORD v196[3];
  _QWORD *v197;
  _QWORD v198[3];
  _QWORD *v199;
  _QWORD v200[3];
  _QWORD *v201;
  uint64_t v202;
  int v203;
  unsigned int v204;
  int v205;
  __int128 v206;
  char v207;
  uint64_t v208;
  unsigned int v209;
  char v210;
  _QWORD v211[3];
  _QWORD *v212;
  _QWORD v213[3];
  _QWORD *v214;
  _QWORD v215[3];
  _QWORD *v216;
  _QWORD v217[3];
  _QWORD *v218;
  _QWORD v219[3];
  _QWORD *v220;
  _QWORD v221[3];
  _QWORD *v222;
  _QWORD v223[3];
  _QWORD *v224;
  _QWORD v225[3];
  _QWORD *v226;
  _QWORD v227[3];
  _QWORD *v228;
  uint64_t v229;

  v229 = *MEMORY[0x1E0C80C00];
  v8 = *(id *)(a3 + 104);
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v8, "supportsFramebufferFetch"))
  {
    v164 = v9;
    v13 = objc_msgSend(v8, "finalRenderTarget");
    v14 = objc_msgSend(v8, "linearRenderTarget");
    if (!v14)
      goto LABEL_83;
    v16 = a1[3];
    v17 = *(_DWORD **)(v14 + 336);
    if (v17)
    {
      LODWORD(v18) = v17[9];
      LODWORD(v17) = v17[10];
LABEL_82:
      *(_DWORD *)(v16 + 40) = v18;
      *(_DWORD *)(v16 + 44) = (_DWORD)v17;
      v48 = *(_OWORD *)(v14 + 72);
      *(_OWORD *)(v16 + 48) = *(_OWORD *)(v14 + 56);
      *(_OWORD *)(v16 + 64) = v48;
LABEL_83:
      v189 = 0u;
      memset(v190, 0, 25);
      memset(v188, 0, sizeof(v188));
      md::FrameGraphUtils::prepareGraphBuilderForRenderTarget((uint64_t)v188, a5, (_QWORD *)v14, "renderTarget_linearColorBuffer", 0x6F1219E0000001EuLL, "renderTarget_linearDepthStencilBuffer", 0xE3A8F65400000025, v15, "renderTarget_linearMsaaResolveBuffer", 0xEECC3D6200000024);
      v49 = *((_OWORD *)a4 + 3);
      v182 = *((_OWORD *)a4 + 2);
      v183 = v49;
      v184 = a4[8];
      v50 = *((_OWORD *)a4 + 1);
      *(_OWORD *)v181 = *(_OWORD *)a4;
      *(_OWORD *)&v181[16] = v50;
      v185 = 0;
      if (*((_BYTE *)a4 + 72))
      {
        v186 = *(_OWORD *)((char *)a4 + 76);
        v187 = *((_DWORD *)a4 + 23);
        v185 = 1;
      }
      v51 = *(unsigned int **)(v13 + 88);
      v52 = v51[20];
      v53 = v51[21];
      v54 = v51[17];
      v55 = v51[18];
      if ((_DWORD)v54)
        v56 = v54 | 0x100000000;
      else
        v56 = 0;
      *(_WORD *)v175 = 0;
      *(_QWORD *)&v175[4] = v52;
      *(_DWORD *)&v175[12] = v53;
      *(_DWORD *)&v175[16] = 0;
      *(_QWORD *)&v175[20] = v56;
      *(_QWORD *)&v175[40] = 0x100000000;
      LODWORD(v176) = v55;
      BYTE4(v176) = 0;
      v175[36] = 1;
      *(_QWORD *)&v175[28] = 0x200000001;
      Resource = md::FrameGraphBuilder::createResource(a5, (uint64_t)v175, "renderTarget_colorBuffer_first", 0xE22C27790000001ELL, 0);
      v58 = (_BYTE *)Resource;
      *(_QWORD *)v181 = Resource;
      if (!v185)
      {
        v59 = *(_OWORD *)(Resource + 88);
        v187 = *(_DWORD *)(Resource + 104);
        v186 = v59;
        v185 = 1;
      }
      *(_QWORD *)v169 = Resource;
      v60 = operator new();
      *(_BYTE *)(v60 + 8) = *v58;
      *(_QWORD *)(v60 + 16) = v51;
      *(_QWORD *)v60 = &off_1E42A8F38;
      v61 = std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>>>::__emplace_unique_key_args<md::mun::CollectionPoint const*,std::piecewise_construct_t const&,std::tuple<md::mun::CollectionPoint const* const&>,std::tuple<>>((float *)(a5 + 88), (unint64_t)v58, v169);
      v62 = v61[3];
      v61[3] = v60;
      if (v62)
        (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
      *(_OWORD *)&v175[32] = v182;
      v176 = v183;
      v177 = v184;
      *(_OWORD *)v175 = *(_OWORD *)v181;
      *(_OWORD *)&v175[16] = *(_OWORD *)&v181[16];
      v178 = 0;
      if (v185)
      {
        v179 = v186;
        v180 = v187;
        v178 = 1;
      }
      v63 = *(unsigned int **)(v13 + 88);
      v64 = v63[20];
      v65 = v63[21];
      v66 = v63[17];
      v67 = v63[18];
      if ((_DWORD)v66)
        v68 = v66 | 0x100000000;
      else
        v68 = 0;
      *(_WORD *)v169 = 0;
      *(_QWORD *)&v169[4] = v64;
      *(_DWORD *)&v169[12] = v65;
      *(_DWORD *)&v169[16] = 0;
      *(_QWORD *)&v169[20] = v68;
      *(_QWORD *)&v169[40] = 0x100000000;
      LODWORD(v170) = v67;
      BYTE4(v170) = 0;
      v169[36] = 1;
      *(_QWORD *)&v169[28] = 0x200000002;
      v69 = md::FrameGraphBuilder::createResource(a5, (uint64_t)v169, "renderTarget_colorBuffer_intermediate", 0x6E2CAE8D00000025uLL, 0);
      v70 = (_BYTE *)v69;
      *(_QWORD *)v175 = v69;
      if (!v178)
      {
        v71 = *(_OWORD *)(v69 + 88);
        v180 = *(_DWORD *)(v69 + 104);
        v179 = v71;
        v178 = 1;
      }
      v202 = v69;
      v72 = operator new();
      *(_BYTE *)(v72 + 8) = *v70;
      *(_QWORD *)(v72 + 16) = v63;
      *(_QWORD *)v72 = &off_1E42A8F38;
      v73 = std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>>>::__emplace_unique_key_args<md::mun::CollectionPoint const*,std::piecewise_construct_t const&,std::tuple<md::mun::CollectionPoint const* const&>,std::tuple<>>((float *)(a5 + 88), (unint64_t)v70, &v202);
      v74 = v73[3];
      v73[3] = v72;
      if (v74)
        (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
      *(_OWORD *)&v169[32] = v182;
      v170 = v183;
      v171 = v184;
      *(_OWORD *)v169 = *(_OWORD *)v181;
      *(_OWORD *)&v169[16] = *(_OWORD *)&v181[16];
      v172 = 0;
      if (v185)
      {
        v173 = v186;
        v174 = v187;
        v172 = 1;
      }
      v75 = *(unsigned int **)(v13 + 88);
      v76 = v75[20];
      v77 = v75[21];
      v78 = v75[17];
      v79 = v75[18];
      if ((_DWORD)v78)
        v80 = v78 | 0x100000000;
      else
        v80 = 0;
      LOWORD(v202) = 0;
      HIDWORD(v202) = v76;
      v203 = 0;
      v204 = v77;
      v205 = 0;
      *(_QWORD *)&v206 = v80;
      v208 = 0x100000000;
      v209 = v79;
      v210 = 0;
      v207 = 1;
      *((_QWORD *)&v206 + 1) = 0x300000002;
      v81 = md::FrameGraphBuilder::createResource(a5, (uint64_t)&v202, "renderTarget_colorBuffer_last", 0x7DE608A50000001DuLL, 0);
      v82 = (_BYTE *)v81;
      *(_QWORD *)v169 = v81;
      if (!v172)
      {
        v83 = *(_OWORD *)(v81 + 88);
        v174 = *(_DWORD *)(v81 + 104);
        v173 = v83;
        v172 = 1;
      }
      v191 = (_QWORD *)v81;
      v84 = operator new();
      *(_BYTE *)(v84 + 8) = *v82;
      *(_QWORD *)(v84 + 16) = v75;
      *(_QWORD *)v84 = &off_1E42A8F38;
      v85 = std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>>>::__emplace_unique_key_args<md::mun::CollectionPoint const*,std::piecewise_construct_t const&,std::tuple<md::mun::CollectionPoint const* const&>,std::tuple<>>((float *)(a5 + 88), (unint64_t)v82, &v191);
      v86 = v85[3];
      v85[3] = v84;
      if (v86)
        (*(void (**)(uint64_t))(*(_QWORD *)v86 + 8))(v86);
      v168 = 0;
      v200[0] = &off_1E42CEA50;
      v200[1] = v181;
      v201 = v200;
      v87 = (_QWORD *)operator new();
      *v87 = &off_1E4290AA0;
      v88 = operator new(0x150uLL);
      v88[1] = 0;
      v88[2] = 0;
      *v88 = &off_1E42DE9D0;
      v89 = ggl::RenderQueue::RenderQueue((ggl::RenderQueue *)(v88 + 3), 14);
      v87[3] = 0;
      v90 = v87 + 3;
      v87[1] = v89;
      v87[2] = v88;
      v87[4] = 0;
      v87[5] = 0;
      v91 = operator new(0x70uLL);
      v92 = 0;
      v87[4] = v91 + 7;
      v87[5] = v91 + 7;
      *v91 = 0u;
      v91[1] = 0u;
      v91[2] = 0u;
      v91[3] = 0u;
      v91[4] = 0u;
      v91[5] = 0u;
      v91[6] = 0u;
      v87[3] = v91;
      *v87 = &off_1E428C620;
      do
      {
        v93 = (ggl::CommandBuffer *)operator new();
        v94 = v93;
        v95 = "<Invalid>";
        if (v92 <= 0xDu)
          v95 = off_1E42F93A0[v92];
        v96 = ggl::CommandBuffer::CommandBuffer(v93, v92, v95);
        v97 = *(_QWORD *)(*v90 + 8 * v92);
        *(_QWORD *)(*v90 + 8 * v92) = v94;
        if (v97)
          (*(void (**)(uint64_t, double))(*(_QWORD *)v97 + 8))(v97, v96);
        ggl::RenderQueue::setBufferForLayer(v87[1], v92++, v94);
      }
      while (v92 != 14);
      v191 = v87;
      if (v201)
      {
        if (v201 == v200)
        {
          *(_QWORD *)((char *)&v206 + 4) = &v202;
          (*(void (**)(uint64_t, _QWORD *))(v200[0] + 24))((uint64_t)v200, &v202);
          v98 = *(_QWORD *)((char *)&v206 + 4);
LABEL_122:
          v99 = md::FrameGraphBuilder::addRenderPass((unsigned __int8 ***)a5, 0, (uint64_t *)&v191, v98);
          v100 = *(uint64_t **)((char *)&v206 + 4);
          if (*(uint64_t **)((char *)&v206 + 4) == &v202)
          {
            v101 = 4;
            v100 = &v202;
          }
          else
          {
            if (!*(_QWORD *)((char *)&v206 + 4))
              goto LABEL_127;
            v101 = 5;
          }
          (*(void (**)(void))(*v100 + 8 * v101))();
LABEL_127:
          if (v191)
            (*(void (**)(_QWORD *))(*v191 + 8))(v191);
          v102 = v201;
          if (v201 == v200)
          {
            v103 = 4;
            v102 = v200;
          }
          else
          {
            if (!v201)
              goto LABEL_134;
            v103 = 5;
          }
          (*(void (**)(void))(*v102 + 8 * v103))();
LABEL_134:
          v167 = 0;
          v168 = v99;
          v198[0] = &off_1E42CEA98;
          v198[1] = &v168;
          v198[2] = v188;
          v199 = v198;
          v104 = (_QWORD *)operator new();
          *v104 = &off_1E4290AA0;
          v105 = operator new(0x150uLL);
          v105[2] = 0;
          *v105 = &off_1E42DE9D0;
          v105[1] = 0;
          v106 = ggl::RenderQueue::RenderQueue((ggl::RenderQueue *)(v105 + 3), 1);
          v104[3] = 0;
          v104[1] = v106;
          v104[2] = v105;
          v104[4] = 0;
          v104[5] = 0;
          v107 = operator new(8uLL);
          v104[3] = v107;
          *v107++ = 0;
          v104[4] = v107;
          v104[5] = v107;
          *v104 = &off_1E428C660;
          v108 = (ggl::CommandBuffer *)operator new();
          v109 = ggl::CommandBuffer::CommandBuffer(v108, 0, "OverlaysBeneath");
          v110 = *(_QWORD *)v104[3];
          *(_QWORD *)v104[3] = v108;
          if (v110)
            (*(void (**)(uint64_t, double))(*(_QWORD *)v110 + 8))(v110, v109);
          ggl::RenderQueue::setBufferForLayer(v104[1], 0, v108);
          v191 = v104;
          if (v199)
          {
            if (v199 == v198)
            {
              *(_QWORD *)((char *)&v206 + 4) = &v202;
              (*(void (**)(uint64_t, uint64_t))(v198[0] + 24))((uint64_t)v198, (uint64_t)&v202);
              v111 = *(_QWORD *)((char *)&v206 + 4);
LABEL_142:
              v112 = md::FrameGraphBuilder::addRenderPass((unsigned __int8 ***)a5, 1, (uint64_t *)&v191, v111);
              v113 = *(uint64_t **)((char *)&v206 + 4);
              if (*(uint64_t **)((char *)&v206 + 4) == &v202)
              {
                v114 = 4;
                v113 = &v202;
              }
              else
              {
                if (!*(_QWORD *)((char *)&v206 + 4))
                  goto LABEL_147;
                v114 = 5;
              }
              (*(void (**)(void))(*v113 + 8 * v114))();
LABEL_147:
              if (v191)
                (*(void (**)(_QWORD *))(*v191 + 8))(v191);
              v115 = v199;
              if (v199 == v198)
              {
                v116 = 4;
                v115 = v198;
              }
              else
              {
                if (!v199)
                  goto LABEL_154;
                v116 = 5;
              }
              (*(void (**)(void))(*v115 + 8 * v116))();
LABEL_154:
              v166 = 0;
              v167 = v112;
              v196[0] = &off_1E42CEAE0;
              v196[1] = &v167;
              v196[2] = v175;
              v197 = v196;
              v117 = (_QWORD *)operator new();
              *v117 = &off_1E4290AA0;
              v118 = operator new(0x150uLL);
              v118[2] = 0;
              *v118 = &off_1E42DE9D0;
              v118[1] = 0;
              v119 = ggl::RenderQueue::RenderQueue((ggl::RenderQueue *)(v118 + 3), 1);
              v117[3] = 0;
              v117[1] = v119;
              v117[2] = v118;
              v117[4] = 0;
              v117[5] = 0;
              v120 = operator new(8uLL);
              v117[3] = v120;
              *v120++ = 0;
              v117[4] = v120;
              v117[5] = v120;
              *v117 = &off_1E428C6A0;
              v121 = (ggl::CommandBuffer *)operator new();
              v122 = ggl::CommandBuffer::CommandBuffer(v121, 0, "Labels");
              v123 = *(_QWORD *)v117[3];
              *(_QWORD *)v117[3] = v121;
              if (v123)
                (*(void (**)(uint64_t, double))(*(_QWORD *)v123 + 8))(v123, v122);
              ggl::RenderQueue::setBufferForLayer(v117[1], 0, v121);
              v191 = v117;
              if (v197)
              {
                if (v197 == v196)
                {
                  *(_QWORD *)((char *)&v206 + 4) = &v202;
                  (*(void (**)(uint64_t, uint64_t))(v196[0] + 24))((uint64_t)v196, (uint64_t)&v202);
                  v124 = *(_QWORD *)((char *)&v206 + 4);
LABEL_162:
                  v125 = md::FrameGraphBuilder::addRenderPass((unsigned __int8 ***)a5, 2, (uint64_t *)&v191, v124);
                  v126 = *(uint64_t **)((char *)&v206 + 4);
                  if (*(uint64_t **)((char *)&v206 + 4) == &v202)
                  {
                    v127 = 4;
                    v126 = &v202;
                  }
                  else
                  {
                    if (!*(_QWORD *)((char *)&v206 + 4))
                      goto LABEL_167;
                    v127 = 5;
                  }
                  (*(void (**)(void))(*v126 + 8 * v127))();
LABEL_167:
                  if (v191)
                    (*(void (**)(_QWORD *))(*v191 + 8))(v191);
                  v128 = v197;
                  if (v197 == v196)
                  {
                    v129 = 4;
                    v128 = v196;
                  }
                  else
                  {
                    if (!v197)
                      goto LABEL_174;
                    v129 = 5;
                  }
                  (*(void (**)(void))(*v128 + 8 * v129))();
LABEL_174:
                  v165 = 0;
                  v166 = v125;
                  v194[0] = &off_1E42CEB28;
                  v194[1] = &v166;
                  v194[2] = v188;
                  v195 = v194;
                  v130 = (_QWORD *)operator new();
                  *v130 = &off_1E4290AA0;
                  v131 = operator new(0x150uLL);
                  v131[2] = 0;
                  *v131 = &off_1E42DE9D0;
                  v131[1] = 0;
                  v132 = ggl::RenderQueue::RenderQueue((ggl::RenderQueue *)(v131 + 3), 1);
                  v130[3] = 0;
                  v130[1] = v132;
                  v130[2] = v131;
                  v130[4] = 0;
                  v130[5] = 0;
                  v133 = operator new(8uLL);
                  v130[3] = v133;
                  *v133++ = 0;
                  v130[4] = v133;
                  v130[5] = v133;
                  *v130 = &off_1E428C640;
                  v134 = (ggl::CommandBuffer *)operator new();
                  v135 = ggl::CommandBuffer::CommandBuffer(v134, 0, "OverlaysAbove");
                  v136 = *(_QWORD *)v130[3];
                  *(_QWORD *)v130[3] = v134;
                  if (v136)
                    (*(void (**)(uint64_t, double))(*(_QWORD *)v136 + 8))(v136, v135);
                  ggl::RenderQueue::setBufferForLayer(v130[1], 0, v134);
                  v191 = v130;
                  if (v195)
                  {
                    if (v195 == v194)
                    {
                      *(_QWORD *)((char *)&v206 + 4) = &v202;
                      (*(void (**)(_QWORD *, uint64_t *))(v194[0] + 24))(v194, &v202);
                      v137 = *(_QWORD *)((char *)&v206 + 4);
LABEL_182:
                      v138 = md::FrameGraphBuilder::addRenderPass((unsigned __int8 ***)a5, 3, (uint64_t *)&v191, v137);
                      v139 = *(uint64_t **)((char *)&v206 + 4);
                      if (*(uint64_t **)((char *)&v206 + 4) == &v202)
                      {
                        v140 = 4;
                        v139 = &v202;
                      }
                      else
                      {
                        if (!*(_QWORD *)((char *)&v206 + 4))
                          goto LABEL_187;
                        v140 = 5;
                      }
                      (*(void (**)(void))(*v139 + 8 * v140))();
LABEL_187:
                      if (v191)
                        (*(void (**)(_QWORD *))(*v191 + 8))(v191);
                      v141 = v195;
                      if (v195 == v194)
                      {
                        v142 = 4;
                        v141 = v194;
                      }
                      else
                      {
                        if (!v195)
                          goto LABEL_194;
                        v142 = 5;
                      }
                      (*(void (**)(void))(*v141 + 8 * v142))();
LABEL_194:
                      v165 = v138;
                      v192[0] = &off_1E42CEB70;
                      v192[1] = &v165;
                      v192[2] = v169;
                      v193 = v192;
                      v143 = (_QWORD *)operator new();
                      *v143 = &off_1E4290AA0;
                      v144 = v143 + 1;
                      v145 = operator new(0x150uLL);
                      v145[2] = 0;
                      *v145 = &off_1E42DE9D0;
                      v145[1] = 0;
                      v146 = ggl::RenderQueue::RenderQueue((ggl::RenderQueue *)(v145 + 3), 4);
                      v143[3] = 0;
                      v147 = v143 + 3;
                      v143[1] = v146;
                      v143[2] = v145;
                      v143[4] = 0;
                      v143[5] = 0;
                      v148 = operator new(0x20uLL);
                      v143[4] = v148 + 2;
                      v143[5] = v148 + 2;
                      *v148 = 0u;
                      v148[1] = 0u;
                      v143[3] = v148;
                      *v143 = &off_1E428C600;
                      v149 = (ggl::CommandBuffer *)operator new();
                      v150 = ggl::CommandBuffer::CommandBuffer(v149, 0, "NavigationPuck");
                      v151 = *(_QWORD *)v143[3];
                      *(_QWORD *)v143[3] = v149;
                      if (v151)
                        (*(void (**)(uint64_t, double))(*(_QWORD *)v151 + 8))(v151, v150);
                      ggl::RenderQueue::setBufferForLayer(*v144, 0, v149);
                      v152 = (ggl::CommandBuffer *)operator new();
                      v153 = ggl::CommandBuffer::CommandBuffer(v152, 1, "AR");
                      v154 = *(_QWORD *)(*v147 + 8);
                      *(_QWORD *)(*v147 + 8) = v152;
                      if (v154)
                        (*(void (**)(uint64_t, double))(*(_QWORD *)v154 + 8))(v154, v153);
                      ggl::RenderQueue::setBufferForLayer(*v144, 1, v152);
                      v155 = (ggl::CommandBuffer *)operator new();
                      v156 = ggl::CommandBuffer::CommandBuffer(v155, 2, "Postchain");
                      v157 = *(_QWORD *)(*v147 + 16);
                      *(_QWORD *)(*v147 + 16) = v155;
                      if (v157)
                        (*(void (**)(uint64_t, double))(*(_QWORD *)v157 + 8))(v157, v156);
                      ggl::RenderQueue::setBufferForLayer(*v144, 2, v155);
                      v158 = (ggl::CommandBuffer *)operator new();
                      v159 = ggl::CommandBuffer::CommandBuffer(v158, 3, "Debug");
                      v160 = *(_QWORD *)(*v147 + 24);
                      *(_QWORD *)(*v147 + 24) = v158;
                      if (v160)
                        (*(void (**)(uint64_t, double))(*(_QWORD *)v160 + 8))(v160, v159);
                      ggl::RenderQueue::setBufferForLayer(v143[1], 3, v158);
                      v191 = v143;
                      v9 = v164;
                      if (v193)
                      {
                        if (v193 == v192)
                        {
                          *(_QWORD *)((char *)&v206 + 4) = &v202;
                          (*(void (**)(_QWORD *, uint64_t *))(v192[0] + 24))(v192, &v202);
                          v161 = *(_QWORD *)((char *)&v206 + 4);
LABEL_208:
                          v162 = 4;
                          md::FrameGraphBuilder::addRenderPass((unsigned __int8 ***)a5, 4, (uint64_t *)&v191, v161);
                          v163 = *(uint64_t **)((char *)&v206 + 4);
                          if (*(uint64_t **)((char *)&v206 + 4) == &v202)
                          {
                            v163 = &v202;
                          }
                          else
                          {
                            if (!*(_QWORD *)((char *)&v206 + 4))
                              goto LABEL_213;
                            v162 = 5;
                          }
                          (*(void (**)(void))(*v163 + 8 * v162))();
LABEL_213:
                          if (v191)
                            (*(void (**)(_QWORD *))(*v191 + 8))(v191);
                          v19 = v193;
                          if (v193 == v192)
                          {
                            v20 = 4;
                            v19 = v192;
                            goto LABEL_219;
                          }
                          goto LABEL_216;
                        }
                        v161 = (*(uint64_t (**)(void))(*v193 + 16))();
                      }
                      else
                      {
                        v161 = 0;
                      }
                      *(_QWORD *)((char *)&v206 + 4) = v161;
                      goto LABEL_208;
                    }
                    v137 = (*(uint64_t (**)(void))(*v195 + 16))();
                  }
                  else
                  {
                    v137 = 0;
                  }
                  *(_QWORD *)((char *)&v206 + 4) = v137;
                  goto LABEL_182;
                }
                v124 = (*(uint64_t (**)(void))(*v197 + 16))();
              }
              else
              {
                v124 = 0;
              }
              *(_QWORD *)((char *)&v206 + 4) = v124;
              goto LABEL_162;
            }
            v111 = (*(uint64_t (**)(void))(*v199 + 16))();
          }
          else
          {
            v111 = 0;
          }
          *(_QWORD *)((char *)&v206 + 4) = v111;
          goto LABEL_142;
        }
        v98 = (*(uint64_t (**)(void))(*v201 + 16))();
      }
      else
      {
        v98 = 0;
      }
      *(_QWORD *)((char *)&v206 + 4) = v98;
      goto LABEL_122;
    }
    v18 = *(_QWORD *)(v14 + 88);
    if (v18)
    {
      v28 = (_DWORD *)(v14 + 96);
    }
    else
    {
      v18 = *(_QWORD *)(v14 + 280);
      if (!v18)
        goto LABEL_71;
      v28 = (_DWORD *)(v14 + 288);
    }
    v41 = 80;
    if (*(_DWORD *)(v18 + 56) == 3)
      v41 = 196;
    v42 = *(_DWORD *)(v18 + v41);
    v43 = v42 >> *v28;
    if (v43 <= 1)
      v43 = 1;
    if (v42)
      LODWORD(v18) = v43;
    else
      LODWORD(v18) = 0;
LABEL_71:
    v17 = *(_DWORD **)(v14 + 88);
    if (v17)
    {
      v44 = (_DWORD *)(v14 + 96);
    }
    else
    {
      v17 = *(_DWORD **)(v14 + 280);
      if (!v17)
        goto LABEL_82;
      v44 = (_DWORD *)(v14 + 288);
    }
    v45 = 21;
    if (v17[14] == 3)
      v45 = 49;
    v46 = v17[v45];
    v47 = v46 >> *v44;
    if (v47 <= 1)
      v47 = 1;
    if (v46)
      LODWORD(v17) = v47;
    else
      LODWORD(v17) = 0;
    goto LABEL_82;
  }
  if (objc_msgSend(v9, "enableDOF"))
  {
    v10 = *a4;
    if (*a4 && *(_BYTE *)(v10 + 112) && (v11 = *(unsigned int *)(v10 + 108), (_DWORD)v11))
      v12 = v11 | 0x100000000;
    else
      v12 = 0;
    LOWORD(v188[0]) = 1;
    *(_QWORD *)((char *)v188 + 4) = 0x3F00000000000000;
    *(_QWORD *)((char *)v188 + 12) = 0x3F00000000000000;
    *(_QWORD *)((char *)&v188[1] + 4) = v12;
    BYTE12(v188[1]) = 0;
    BYTE4(v189) = 0;
    *((_QWORD *)&v189 + 1) = 0x100000000;
    v190[0] = 1;
    LOBYTE(v190[1]) = 0;
    if (v10 && *(_BYTE *)(v10 + 112) && (v21 = *(unsigned int *)(v10 + 108), (_DWORD)v21))
      v22 = v21 | 0x100000000;
    else
      v22 = 0;
    *(_WORD *)v181 = 1;
    *(_QWORD *)&v181[4] = 0x3F80000000000000;
    *(_QWORD *)&v181[12] = 0x3F80000000000000;
    *(_QWORD *)&v181[20] = v22;
    v181[28] = 0;
    BYTE4(v182) = 0;
    *((_QWORD *)&v182 + 1) = 0x100000000;
    LODWORD(v183) = 1;
    BYTE4(v183) = 0;
    v23 = a4[8];
    if (v23 && *(_BYTE *)(v23 + 112) && (v24 = *(unsigned int *)(v23 + 108), (_DWORD)v24))
      v25 = v24 | 0x100000000;
    else
      v25 = 0;
    *(_WORD *)v175 = 1;
    *(_QWORD *)&v175[4] = 0x3F80000000000000;
    *(_QWORD *)&v175[12] = 0x3F80000000000000;
    *(_QWORD *)&v175[20] = v25;
    v175[28] = 0;
    v175[36] = 0;
    *(_QWORD *)&v175[40] = 0x100000000;
    LODWORD(v176) = 1;
    BYTE4(v176) = 1;
    *(_WORD *)v169 = 1;
    *(_QWORD *)&v169[4] = 0x3E00000000000000;
    *(_QWORD *)&v169[12] = 0x3E00000000000000;
    *(_QWORD *)&v169[20] = 0x100000002;
    v169[28] = 0;
    v169[36] = 0;
    *(_QWORD *)&v169[40] = 0x100000000;
    LODWORD(v170) = 1;
    BYTE4(v170) = 0;
    a1[4] = md::FrameGraphBuilder::createResource(a5, (uint64_t)v181, "Scene Color", 0xDC09355C0000000BLL, 0);
    a1[5] = md::FrameGraphBuilder::createResource(a5, (uint64_t)v175, "Scene Depth", 0x40FC61DC0000000BuLL, 0);
    a1[7] = md::FrameGraphBuilder::createResource(a5, (uint64_t)v188, "FG Color CoC", 0x138985420000000CuLL, 0);
    a1[8] = md::FrameGraphBuilder::createResource(a5, (uint64_t)v188, "BG Color CoC", 0x108FBE3D0000000CuLL, 0);
    a1[6] = md::FrameGraphBuilder::createResource(a5, (uint64_t)v169, "FG Color Downsampled CoC", 0x4C9E23D800000018uLL, 0);
    a1[9] = md::FrameGraphBuilder::createResource(a5, (uint64_t)v188, "FG Blur", 0xF5B8B5BC00000007, 0);
    a1[10] = md::FrameGraphBuilder::createResource(a5, (uint64_t)v188, "BG Blur", 0x1F791AF00000007uLL, 0);
    a1[11] = md::FrameGraphBuilder::createResource(a5, (uint64_t)v188, "FG Tent Blur", 0xB5780D5C0000000CLL, 0);
    a1[12] = md::FrameGraphBuilder::createResource(a5, (uint64_t)v188, "BG Tent Blur", 0xB67E36230000000CLL, 0);
    v227[0] = &off_1E42CE7C8;
    v227[1] = a1;
    v228 = v227;
    md::FrameGraphBuilder::addRenderPass<md::RealisticCommandBufferIdInfo>((unsigned __int8 ***)a5, 0, v227);
    v26 = v228;
    if (v228 == v227)
    {
      v27 = 4;
      v26 = v227;
    }
    else
    {
      if (!v228)
        goto LABEL_30;
      v27 = 5;
    }
    (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_30:
    v225[0] = &off_1E42CE810;
    v225[1] = a1;
    v226 = v225;
    md::FrameGraphBuilder::addRenderPass<md::RealisticCommandBufferIdInfo>((unsigned __int8 ***)a5, 5, v225);
    v29 = v226;
    if (v226 == v225)
    {
      v30 = 4;
      v29 = v225;
    }
    else
    {
      if (!v226)
        goto LABEL_35;
      v30 = 5;
    }
    (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_35:
    v223[0] = &off_1E42CE858;
    v223[1] = a1;
    v224 = v223;
    md::FrameGraphBuilder::addRenderPass<md::RealisticCommandBufferIdInfo>((unsigned __int8 ***)a5, 6, v223);
    v31 = v224;
    if (v224 == v223)
    {
      v32 = 4;
      v31 = v223;
    }
    else
    {
      if (!v224)
        goto LABEL_40;
      v32 = 5;
    }
    (*(void (**)(void))(*v31 + 8 * v32))();
LABEL_40:
    v221[0] = &off_1E42CE8A0;
    v221[1] = a1;
    v222 = v221;
    md::FrameGraphBuilder::addRenderPass<md::RealisticCommandBufferIdInfo>((unsigned __int8 ***)a5, 7, v221);
    v33 = v222;
    if (v222 == v221)
    {
      v34 = 4;
      v33 = v221;
    }
    else
    {
      if (!v222)
        goto LABEL_45;
      v34 = 5;
    }
    (*(void (**)(void))(*v33 + 8 * v34))();
LABEL_45:
    v219[0] = &off_1E42CE8E8;
    v219[1] = a1;
    v220 = v219;
    md::FrameGraphBuilder::addRenderPass<md::RealisticCommandBufferIdInfo>((unsigned __int8 ***)a5, 8, v219);
    v35 = v220;
    if (v220 == v219)
    {
      v36 = 4;
      v35 = v219;
    }
    else
    {
      if (!v220)
        goto LABEL_50;
      v36 = 5;
    }
    (*(void (**)(void))(*v35 + 8 * v36))();
LABEL_50:
    v217[0] = &off_1E42CE930;
    v217[1] = a1;
    v218 = v217;
    md::FrameGraphBuilder::addRenderPass<md::RealisticCommandBufferIdInfo>((unsigned __int8 ***)a5, 9, v217);
    v37 = v218;
    if (v218 == v217)
    {
      v38 = 4;
      v37 = v217;
    }
    else
    {
      if (!v218)
        goto LABEL_55;
      v38 = 5;
    }
    (*(void (**)(void))(*v37 + 8 * v38))();
LABEL_55:
    v215[0] = &off_1E42CE978;
    v215[1] = a1;
    v216 = v215;
    md::FrameGraphBuilder::addRenderPass<md::RealisticCommandBufferIdInfo>((unsigned __int8 ***)a5, 10, v215);
    v39 = v216;
    if (v216 == v215)
    {
      v40 = 4;
      v39 = v215;
    }
    else
    {
      if (!v216)
        goto LABEL_60;
      v40 = 5;
    }
    (*(void (**)(void))(*v39 + 8 * v40))();
LABEL_60:
    v213[0] = &off_1E42CE9C0;
    v213[1] = a4;
    v214 = v213;
    md::FrameGraphBuilder::addRenderPass<md::RealisticCommandBufferIdInfo>((unsigned __int8 ***)a5, 11, v213);
    v19 = v214;
    if (v214 == v213)
    {
      v20 = 4;
      v19 = v213;
      goto LABEL_219;
    }
    goto LABEL_216;
  }
  v211[0] = &off_1E42CEA08;
  v211[1] = a4;
  v212 = v211;
  md::FrameGraphBuilder::addRenderPass<md::RealisticCommandBufferIdInfo>((unsigned __int8 ***)a5, 0, v211);
  v19 = v212;
  if (v212 == v211)
  {
    v20 = 4;
    v19 = v211;
LABEL_219:
    (*(void (**)(void))(*v19 + 8 * v20))();
    goto LABEL_220;
  }
LABEL_216:
  if (v19)
  {
    v20 = 5;
    goto LABEL_219;
  }
LABEL_220:

}

void sub_19FE80BA4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  unint64_t *v5;
  uint64_t v6;

  v5 = (unint64_t *)STACK[0x2E0];
  if (STACK[0x2E0] == v1)
  {
    v6 = 4;
    v5 = &STACK[0x2C8];
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:

  _Unwind_Resume(a1);
}

uint64_t md::FrameGraphBuilder::addRenderPass<md::RealisticCommandBufferIdInfo>(unsigned __int8 ***a1, int a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  ggl::RenderQueue *v8;
  _QWORD *v9;
  _OWORD *v10;
  uint64_t v11;
  ggl::CommandBuffer *v12;
  ggl::CommandBuffer *v13;
  const char *v14;
  double v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t result;
  _QWORD *v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v6 = (_QWORD *)operator new();
  *v6 = &off_1E4290AA0;
  v7 = operator new(0x150uLL);
  v7[1] = 0;
  v7[2] = 0;
  *v7 = &off_1E42DE9D0;
  v8 = ggl::RenderQueue::RenderQueue((ggl::RenderQueue *)(v7 + 3), 21);
  v6[3] = 0;
  v9 = v6 + 3;
  v6[1] = v8;
  v6[2] = v7;
  v6[4] = 0;
  v6[5] = 0;
  v10 = operator new(0xA8uLL);
  v11 = 0;
  v6[4] = (char *)v10 + 168;
  v6[5] = (char *)v10 + 168;
  *v10 = 0u;
  v10[1] = 0u;
  v10[2] = 0u;
  v10[3] = 0u;
  v10[4] = 0u;
  v10[5] = 0u;
  v10[6] = 0u;
  v10[7] = 0u;
  v10[8] = 0u;
  v10[9] = 0u;
  *((_QWORD *)v10 + 20) = 0;
  v6[3] = v10;
  *v6 = &off_1E428C520;
  do
  {
    v12 = (ggl::CommandBuffer *)operator new();
    v13 = v12;
    v14 = "<Invalid>";
    if (v11 <= 0x14u)
      v14 = off_1E42F92F8[v11];
    v15 = ggl::CommandBuffer::CommandBuffer(v12, v11, v14);
    v16 = *(_QWORD *)(*v9 + 8 * v11);
    *(_QWORD *)(*v9 + 8 * v11) = v13;
    if (v16)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v16 + 8))(v16, v15);
    ggl::RenderQueue::setBufferForLayer(v6[1], v11++, v13);
  }
  while (v11 != 21);
  v22 = v6;
  v17 = (_QWORD *)a3[3];
  if (!v17)
  {
    v18 = 0;
    goto LABEL_11;
  }
  if (v17 != a3)
  {
    v18 = (*(uint64_t (**)(_QWORD *))(*v17 + 16))(v17);
LABEL_11:
    v24 = (_BYTE *)v18;
    goto LABEL_13;
  }
  v24 = v23;
  (*(void (**)(_QWORD *, _BYTE *))(*a3 + 24))(a3, v23);
  v18 = (uint64_t)v24;
LABEL_13:
  md::FrameGraphBuilder::addRenderPass(a1, a2, (uint64_t *)&v22, v18);
  v19 = v24;
  if (v24 == v23)
  {
    v20 = 4;
    v19 = v23;
  }
  else
  {
    if (!v24)
      goto LABEL_18;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_18:
  result = (uint64_t)v22;
  if (v22)
    return (*(uint64_t (**)(_QWORD *))(*v22 + 8))(v22);
  return result;
}

void sub_19FE811C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_19FE811E0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v2);
  MEMORY[0x1A1AF4E00](v1, 0xA1C4084DA3AFDLL);
  _Unwind_Resume(a1);
}

_QWORD *md::RenderQueue<md::RealisticAboveOverlaysCommandBufferIdInfo>::~RenderQueue(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  *a1 = &off_1E4290AA0;
  v2 = (_QWORD *)a1[3];
  if (v2)
  {
    v3 = (_QWORD *)a1[4];
    v4 = (void *)a1[3];
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  v7 = (std::__shared_weak_count *)a1[2];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

void md::RenderQueue<md::RealisticAboveOverlaysCommandBufferIdInfo>::~RenderQueue(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  *a1 = &off_1E4290AA0;
  v2 = (_QWORD *)a1[3];
  if (v2)
  {
    v3 = (_QWORD *)a1[4];
    v4 = (void *)a1[3];
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  v7 = (std::__shared_weak_count *)a1[2];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_13,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_13>,void ()(md::FrameGraphRenderPassBuilder &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_13,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_13>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42CEB70;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_13,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_13>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42CEB70;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_13,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_13>,void ()(md::FrameGraphRenderPassBuilder &)>::operator()(uint64_t a1, uint64_t a2)
{
  void **v4;
  uint64_t v5;
  __n128 result;
  __int128 v7;
  __int128 v8;
  __int128 __src;
  uint64_t v10;

  HIBYTE(v10) = 14;
  strcpy((char *)&__src, "Above Overlays");
  v4 = (void **)(a2 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__assign_no_alias<false>(v4, &__src, 0xEuLL);
  }
  else
  {
    *(_OWORD *)v4 = __src;
    *(_QWORD *)(a2 + 48) = v10;
  }
  md::FrameGraphPassBuilder::dependsOn((uint64_t *)a2, **(unsigned __int8 ***)(a1 + 8));
  v5 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 104) = *(_OWORD *)v5;
  result = *(__n128 *)(v5 + 16);
  v7 = *(_OWORD *)(v5 + 32);
  v8 = *(_OWORD *)(v5 + 48);
  *(_QWORD *)(a2 + 168) = *(_QWORD *)(v5 + 64);
  *(_OWORD *)(a2 + 152) = v8;
  *(_OWORD *)(a2 + 136) = v7;
  *(__n128 *)(a2 + 120) = result;
  if (*(_BYTE *)(v5 + 72))
  {
    result = *(__n128 *)(v5 + 76);
    if (*(_BYTE *)(a2 + 176))
    {
      *(_DWORD *)(a2 + 196) = *(_DWORD *)(v5 + 92);
      *(__n128 *)(a2 + 180) = result;
    }
    else
    {
      *(_DWORD *)(a2 + 196) = *(_DWORD *)(v5 + 92);
      *(__n128 *)(a2 + 180) = result;
      *(_BYTE *)(a2 + 176) = 1;
    }
  }
  else if (*(_BYTE *)(a2 + 176))
  {
    *(_BYTE *)(a2 + 176) = 0;
  }
  return result;
}

_QWORD *md::RenderQueue<md::RealisticOverlaysAboveCommandBufferIdInfo>::~RenderQueue(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  *a1 = &off_1E4290AA0;
  v2 = (_QWORD *)a1[3];
  if (v2)
  {
    v3 = (_QWORD *)a1[4];
    v4 = (void *)a1[3];
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  v7 = (std::__shared_weak_count *)a1[2];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

void md::RenderQueue<md::RealisticOverlaysAboveCommandBufferIdInfo>::~RenderQueue(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  *a1 = &off_1E4290AA0;
  v2 = (_QWORD *)a1[3];
  if (v2)
  {
    v3 = (_QWORD *)a1[4];
    v4 = (void *)a1[3];
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  v7 = (std::__shared_weak_count *)a1[2];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_12,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_12>,void ()(md::FrameGraphRenderPassBuilder &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_12,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_12>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42CEB28;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_12,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_12>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42CEB28;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_12,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_12>,void ()(md::FrameGraphRenderPassBuilder &)>::operator()(uint64_t a1, uint64_t a2)
{
  void **v4;
  uint64_t v5;
  __n128 result;
  __int128 v7;
  __int128 v8;
  _OWORD v9[2];

  BYTE7(v9[1]) = 21;
  strcpy((char *)v9, "Overlays Above Labels");
  v4 = (void **)(a2 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__assign_no_alias<false>(v4, v9, 0x15uLL);
  }
  else
  {
    *(_OWORD *)v4 = v9[0];
    *(_QWORD *)(a2 + 48) = *(_QWORD *)&v9[1];
  }
  md::FrameGraphPassBuilder::dependsOn((uint64_t *)a2, **(unsigned __int8 ***)(a1 + 8));
  v5 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 104) = *(_OWORD *)v5;
  result = *(__n128 *)(v5 + 16);
  v7 = *(_OWORD *)(v5 + 32);
  v8 = *(_OWORD *)(v5 + 48);
  *(_QWORD *)(a2 + 168) = *(_QWORD *)(v5 + 64);
  *(_OWORD *)(a2 + 152) = v8;
  *(_OWORD *)(a2 + 136) = v7;
  *(__n128 *)(a2 + 120) = result;
  if (*(_BYTE *)(v5 + 72))
  {
    result = *(__n128 *)(v5 + 76);
    if (*(_BYTE *)(a2 + 176))
    {
      *(_DWORD *)(a2 + 196) = *(_DWORD *)(v5 + 92);
      *(__n128 *)(a2 + 180) = result;
    }
    else
    {
      *(_DWORD *)(a2 + 196) = *(_DWORD *)(v5 + 92);
      *(__n128 *)(a2 + 180) = result;
      *(_BYTE *)(a2 + 176) = 1;
    }
  }
  else if (*(_BYTE *)(a2 + 176))
  {
    *(_BYTE *)(a2 + 176) = 0;
  }
  return result;
}

_QWORD *md::RenderQueue<md::RealisticBetweenOverlaysCommandBufferIdInfo>::~RenderQueue(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  *a1 = &off_1E4290AA0;
  v2 = (_QWORD *)a1[3];
  if (v2)
  {
    v3 = (_QWORD *)a1[4];
    v4 = (void *)a1[3];
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  v7 = (std::__shared_weak_count *)a1[2];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

void md::RenderQueue<md::RealisticBetweenOverlaysCommandBufferIdInfo>::~RenderQueue(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  *a1 = &off_1E4290AA0;
  v2 = (_QWORD *)a1[3];
  if (v2)
  {
    v3 = (_QWORD *)a1[4];
    v4 = (void *)a1[3];
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  v7 = (std::__shared_weak_count *)a1[2];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_11,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_11>,void ()(md::FrameGraphRenderPassBuilder &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_11,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_11>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42CEAE0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_11,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_11>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42CEAE0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_11,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_11>,void ()(md::FrameGraphRenderPassBuilder &)>::operator()(uint64_t a1, uint64_t a2)
{
  void **v4;
  uint64_t v5;
  __n128 result;
  __int128 v7;
  __int128 v8;
  _OWORD v9[2];

  BYTE7(v9[1]) = 16;
  strcpy((char *)v9, "Between Overlays");
  v4 = (void **)(a2 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__assign_no_alias<false>(v4, v9, 0x10uLL);
  }
  else
  {
    *(_OWORD *)v4 = v9[0];
    *(_QWORD *)(a2 + 48) = *(_QWORD *)&v9[1];
  }
  md::FrameGraphPassBuilder::dependsOn((uint64_t *)a2, **(unsigned __int8 ***)(a1 + 8));
  v5 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 104) = *(_OWORD *)v5;
  result = *(__n128 *)(v5 + 16);
  v7 = *(_OWORD *)(v5 + 32);
  v8 = *(_OWORD *)(v5 + 48);
  *(_QWORD *)(a2 + 168) = *(_QWORD *)(v5 + 64);
  *(_OWORD *)(a2 + 152) = v8;
  *(_OWORD *)(a2 + 136) = v7;
  *(__n128 *)(a2 + 120) = result;
  if (*(_BYTE *)(v5 + 72))
  {
    result = *(__n128 *)(v5 + 76);
    if (*(_BYTE *)(a2 + 176))
    {
      *(_DWORD *)(a2 + 196) = *(_DWORD *)(v5 + 92);
      *(__n128 *)(a2 + 180) = result;
    }
    else
    {
      *(_DWORD *)(a2 + 196) = *(_DWORD *)(v5 + 92);
      *(__n128 *)(a2 + 180) = result;
      *(_BYTE *)(a2 + 176) = 1;
    }
  }
  else if (*(_BYTE *)(a2 + 176))
  {
    *(_BYTE *)(a2 + 176) = 0;
  }
  return result;
}

_QWORD *md::RenderQueue<md::RealisticOverlaysBelowCommandBufferIdInfo>::~RenderQueue(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  *a1 = &off_1E4290AA0;
  v2 = (_QWORD *)a1[3];
  if (v2)
  {
    v3 = (_QWORD *)a1[4];
    v4 = (void *)a1[3];
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  v7 = (std::__shared_weak_count *)a1[2];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

void md::RenderQueue<md::RealisticOverlaysBelowCommandBufferIdInfo>::~RenderQueue(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  *a1 = &off_1E4290AA0;
  v2 = (_QWORD *)a1[3];
  if (v2)
  {
    v3 = (_QWORD *)a1[4];
    v4 = (void *)a1[3];
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  v7 = (std::__shared_weak_count *)a1[2];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_10,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_10>,void ()(md::FrameGraphRenderPassBuilder &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_10,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_10>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42CEA98;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_10,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_10>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42CEA98;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_10,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_10>,void ()(md::FrameGraphRenderPassBuilder &)>::operator()(uint64_t a1, uint64_t a2)
{
  void **v4;
  uint64_t v5;
  __n128 result;
  __int128 v7;
  __int128 v8;
  _OWORD v9[2];

  BYTE7(v9[1]) = 21;
  strcpy((char *)v9, "Overlays Below Labels");
  v4 = (void **)(a2 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__assign_no_alias<false>(v4, v9, 0x15uLL);
  }
  else
  {
    *(_OWORD *)v4 = v9[0];
    *(_QWORD *)(a2 + 48) = *(_QWORD *)&v9[1];
  }
  md::FrameGraphPassBuilder::dependsOn((uint64_t *)a2, **(unsigned __int8 ***)(a1 + 8));
  v5 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 104) = *(_OWORD *)v5;
  result = *(__n128 *)(v5 + 16);
  v7 = *(_OWORD *)(v5 + 32);
  v8 = *(_OWORD *)(v5 + 48);
  *(_QWORD *)(a2 + 168) = *(_QWORD *)(v5 + 64);
  *(_OWORD *)(a2 + 152) = v8;
  *(_OWORD *)(a2 + 136) = v7;
  *(__n128 *)(a2 + 120) = result;
  if (*(_BYTE *)(v5 + 72))
  {
    result = *(__n128 *)(v5 + 76);
    if (*(_BYTE *)(a2 + 176))
    {
      *(_DWORD *)(a2 + 196) = *(_DWORD *)(v5 + 92);
      *(__n128 *)(a2 + 180) = result;
    }
    else
    {
      *(_DWORD *)(a2 + 196) = *(_DWORD *)(v5 + 92);
      *(__n128 *)(a2 + 180) = result;
      *(_BYTE *)(a2 + 176) = 1;
    }
  }
  else if (*(_BYTE *)(a2 + 176))
  {
    *(_BYTE *)(a2 + 176) = 0;
  }
  return result;
}

_QWORD *md::RenderQueue<md::RealisticBelowOverlaysCommandBufferIdInfo>::~RenderQueue(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  *a1 = &off_1E4290AA0;
  v2 = (_QWORD *)a1[3];
  if (v2)
  {
    v3 = (_QWORD *)a1[4];
    v4 = (void *)a1[3];
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  v7 = (std::__shared_weak_count *)a1[2];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

void md::RenderQueue<md::RealisticBelowOverlaysCommandBufferIdInfo>::~RenderQueue(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  *a1 = &off_1E4290AA0;
  v2 = (_QWORD *)a1[3];
  if (v2)
  {
    v3 = (_QWORD *)a1[4];
    v4 = (void *)a1[3];
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  v7 = (std::__shared_weak_count *)a1[2];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_9,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_9>,void ()(md::FrameGraphRenderPassBuilder &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_9,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_9>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CEA50;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_9,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_9>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CEA50;
  a2[1] = v2;
  return result;
}

__n128 std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_9,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_9>,void ()(md::FrameGraphRenderPassBuilder &)>::operator()(uint64_t a1, uint64_t a2)
{
  void **v4;
  uint64_t v5;
  __n128 result;
  __int128 v7;
  __int128 v8;
  __int128 __src;
  uint64_t v10;

  HIBYTE(v10) = 14;
  strcpy((char *)&__src, "Below Overlays");
  v4 = (void **)(a2 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__assign_no_alias<false>(v4, &__src, 0xEuLL);
  }
  else
  {
    *(_OWORD *)v4 = __src;
    *(_QWORD *)(a2 + 48) = v10;
  }
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 104) = *(_OWORD *)v5;
  result = *(__n128 *)(v5 + 16);
  v7 = *(_OWORD *)(v5 + 32);
  v8 = *(_OWORD *)(v5 + 48);
  *(_QWORD *)(a2 + 168) = *(_QWORD *)(v5 + 64);
  *(_OWORD *)(a2 + 152) = v8;
  *(_OWORD *)(a2 + 136) = v7;
  *(__n128 *)(a2 + 120) = result;
  if (*(_BYTE *)(v5 + 72))
  {
    result = *(__n128 *)(v5 + 76);
    if (*(_BYTE *)(a2 + 176))
    {
      *(_DWORD *)(a2 + 196) = *(_DWORD *)(v5 + 92);
      *(__n128 *)(a2 + 180) = result;
    }
    else
    {
      *(_DWORD *)(a2 + 196) = *(_DWORD *)(v5 + 92);
      *(__n128 *)(a2 + 180) = result;
      *(_BYTE *)(a2 + 176) = 1;
    }
  }
  else if (*(_BYTE *)(a2 + 176))
  {
    *(_BYTE *)(a2 + 176) = 0;
  }
  return result;
}

void std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_8,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_8>,void ()(md::FrameGraphRenderPassBuilder &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_8,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_8>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CEA08;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_8,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_8>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CEA08;
  a2[1] = v2;
  return result;
}

__n128 std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_8,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_8>,void ()(md::FrameGraphRenderPassBuilder &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 104) = *(_OWORD *)v2;
  result = *(__n128 *)(v2 + 16);
  v4 = *(_OWORD *)(v2 + 32);
  v5 = *(_OWORD *)(v2 + 48);
  *(_QWORD *)(a2 + 168) = *(_QWORD *)(v2 + 64);
  *(_OWORD *)(a2 + 152) = v5;
  *(_OWORD *)(a2 + 136) = v4;
  *(__n128 *)(a2 + 120) = result;
  if (*(_BYTE *)(v2 + 72))
  {
    result = *(__n128 *)(v2 + 76);
    if (*(_BYTE *)(a2 + 176))
    {
      *(_DWORD *)(a2 + 196) = *(_DWORD *)(v2 + 92);
      *(__n128 *)(a2 + 180) = result;
    }
    else
    {
      *(_DWORD *)(a2 + 196) = *(_DWORD *)(v2 + 92);
      *(__n128 *)(a2 + 180) = result;
      *(_BYTE *)(a2 + 176) = 1;
    }
  }
  else if (*(_BYTE *)(a2 + 176))
  {
    *(_BYTE *)(a2 + 176) = 0;
  }
  return result;
}

void std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_7,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_7>,void ()(md::FrameGraphRenderPassBuilder &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_7,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_7>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CE9C0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_7,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_7>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CE9C0;
  a2[1] = v2;
  return result;
}

__n128 std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_7,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_7>,void ()(md::FrameGraphRenderPassBuilder &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 104) = *(_OWORD *)v2;
  result = *(__n128 *)(v2 + 16);
  v4 = *(_OWORD *)(v2 + 32);
  v5 = *(_OWORD *)(v2 + 48);
  *(_QWORD *)(a2 + 168) = *(_QWORD *)(v2 + 64);
  *(_OWORD *)(a2 + 152) = v5;
  *(_OWORD *)(a2 + 136) = v4;
  *(__n128 *)(a2 + 120) = result;
  if (*(_BYTE *)(v2 + 72))
  {
    result = *(__n128 *)(v2 + 76);
    if (*(_BYTE *)(a2 + 176))
    {
      *(_DWORD *)(a2 + 196) = *(_DWORD *)(v2 + 92);
      *(__n128 *)(a2 + 180) = result;
    }
    else
    {
      *(_DWORD *)(a2 + 196) = *(_DWORD *)(v2 + 92);
      *(__n128 *)(a2 + 180) = result;
      *(_BYTE *)(a2 + 176) = 1;
    }
  }
  else if (*(_BYTE *)(a2 + 176))
  {
    *(_BYTE *)(a2 + 176) = 0;
  }
  return result;
}

void std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_6,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_6>,void ()(md::FrameGraphRenderPassBuilder &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_6,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_6>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CE978;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_6,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_6>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CE978;
  a2[1] = v2;
  return result;
}

__n128 std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_6,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_6>,void ()(md::FrameGraphRenderPassBuilder &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __n128 result;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 96);
  *(_QWORD *)(a2 + 104) = v2;
  if (!*(_BYTE *)(a2 + 176))
  {
    result = *(__n128 *)(v2 + 88);
    *(_DWORD *)(a2 + 196) = *(_DWORD *)(v2 + 104);
    *(__n128 *)(a2 + 180) = result;
    *(_BYTE *)(a2 + 176) = 1;
  }
  return result;
}

void std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_5,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_5>,void ()(md::FrameGraphRenderPassBuilder &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_5,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_5>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CE930;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_5,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_5>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CE930;
  a2[1] = v2;
  return result;
}

__n128 std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_5,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_5>,void ()(md::FrameGraphRenderPassBuilder &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __n128 result;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 88);
  *(_QWORD *)(a2 + 104) = v2;
  if (!*(_BYTE *)(a2 + 176))
  {
    result = *(__n128 *)(v2 + 88);
    *(_DWORD *)(a2 + 196) = *(_DWORD *)(v2 + 104);
    *(__n128 *)(a2 + 180) = result;
    *(_BYTE *)(a2 + 176) = 1;
  }
  return result;
}

void std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_4,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_4>,void ()(md::FrameGraphRenderPassBuilder &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_4,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_4>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CE8E8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_4,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_4>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CE8E8;
  a2[1] = v2;
  return result;
}

__n128 std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_4,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_4>,void ()(md::FrameGraphRenderPassBuilder &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __n128 result;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  *(_QWORD *)(a2 + 104) = v2;
  if (!*(_BYTE *)(a2 + 176))
  {
    result = *(__n128 *)(v2 + 88);
    *(_DWORD *)(a2 + 196) = *(_DWORD *)(v2 + 104);
    *(__n128 *)(a2 + 180) = result;
    *(_BYTE *)(a2 + 176) = 1;
  }
  return result;
}

void std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_3,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_3>,void ()(md::FrameGraphRenderPassBuilder &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_3,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_3>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CE8A0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_3,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_3>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CE8A0;
  a2[1] = v2;
  return result;
}

__n128 std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_3,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_3>,void ()(md::FrameGraphRenderPassBuilder &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __n128 result;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 72);
  *(_QWORD *)(a2 + 104) = v2;
  if (!*(_BYTE *)(a2 + 176))
  {
    result = *(__n128 *)(v2 + 88);
    *(_DWORD *)(a2 + 196) = *(_DWORD *)(v2 + 104);
    *(__n128 *)(a2 + 180) = result;
    *(_BYTE *)(a2 + 176) = 1;
  }
  return result;
}

void std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_2,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_2>,void ()(md::FrameGraphRenderPassBuilder &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_2,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_2>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CE858;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_2,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_2>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CE858;
  a2[1] = v2;
  return result;
}

__n128 std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_2,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_2>,void ()(md::FrameGraphRenderPassBuilder &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __n128 result;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
  *(_QWORD *)(a2 + 104) = v2;
  if (!*(_BYTE *)(a2 + 176))
  {
    result = *(__n128 *)(v2 + 88);
    *(_DWORD *)(a2 + 196) = *(_DWORD *)(v2 + 104);
    *(__n128 *)(a2 + 180) = result;
    *(_BYTE *)(a2 + 176) = 1;
  }
  return result;
}

void std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_1,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_1>,void ()(md::FrameGraphRenderPassBuilder &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_1,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_1>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CE810;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_1,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_1>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CE810;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_1,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_1>,void ()(md::FrameGraphRenderPassBuilder &)>::operator()(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;

  v2 = *(_QWORD *)(result + 8);
  v3 = *(_QWORD *)(v2 + 56);
  *(_QWORD *)(a2 + 104) = v3;
  if (!*(_BYTE *)(a2 + 176))
  {
    v4 = *(_OWORD *)(v3 + 88);
    *(_DWORD *)(a2 + 196) = *(_DWORD *)(v3 + 104);
    *(_OWORD *)(a2 + 180) = v4;
    *(_BYTE *)(a2 + 176) = 1;
  }
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v2 + 64);
  return result;
}

_QWORD *md::RenderQueue<md::RealisticCommandBufferIdInfo>::~RenderQueue(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  *a1 = &off_1E4290AA0;
  v2 = (_QWORD *)a1[3];
  if (v2)
  {
    v3 = (_QWORD *)a1[4];
    v4 = (void *)a1[3];
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  v7 = (std::__shared_weak_count *)a1[2];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

void md::RenderQueue<md::RealisticCommandBufferIdInfo>::~RenderQueue(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  *a1 = &off_1E4290AA0;
  v2 = (_QWORD *)a1[3];
  if (v2)
  {
    v3 = (_QWORD *)a1[4];
    v4 = (void *)a1[3];
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  v7 = (std::__shared_weak_count *)a1[2];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_0,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_0>,void ()(md::FrameGraphRenderPassBuilder &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_0,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_0>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CE7C8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_0,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_0>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CE7C8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_0,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_0>,void ()(md::FrameGraphRenderPassBuilder &)>::operator()(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;

  v2 = *(_QWORD *)(result + 8);
  v3 = *(_QWORD *)(v2 + 32);
  *(_QWORD *)(a2 + 104) = v3;
  if (!*(_BYTE *)(a2 + 176))
  {
    v4 = *(_OWORD *)(v3 + 88);
    *(_DWORD *)(a2 + 196) = *(_DWORD *)(v3 + 104);
    *(_OWORD *)(a2 + 180) = v4;
    *(_BYTE *)(a2 + 176) = 1;
  }
  *(_QWORD *)(a2 + 168) = *(_QWORD *)(v2 + 40);
  return result;
}

void sub_19FE82898(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FE82904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)VKAttachedNavGestureCameraBehavior;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_19FE82A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  id *v15;
  uint64_t v16;

  objc_destroyWeak(v15);
  objc_destroyWeak((id *)(v16 - 88));

  _Unwind_Resume(a1);
}

void sub_19FE82BB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19FE82C30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FE82CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FE82DC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19FE82E88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FE82EF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)VKDetachedNavGestureCameraBehavior;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_19FE8310C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location,char a25)
{
  void *v25;
  id *v26;

  objc_destroyWeak(v26);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a25, 8);

  _Unwind_Resume(a1);
}

void sub_19FE835D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FE83600(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19FE83A7C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FE845C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FE845D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19FE8460C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FE84724(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FE84734(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FE84B7C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FE84B8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19FE84FF0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FE85000(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19FE85108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void md::LiveTileFetcher::~LiveTileFetcher(id *this)
{
  md::TiledGEOResourceFetcher::~TiledGEOResourceFetcher(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::LiveTileFetcher::tileKey(uint64_t a1, void *a2)
{
  id v2;
  uint64_t v3;

  v2 = a2;
  objc_msgSend(v2, "size");
  objc_msgSend(v2, "scale");
  objc_msgSend(v2, "style");
  v3 = GEOLiveTileKeyMake();

  return v3;
}

void sub_19FE85200(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ggl::FlyoverRoadStrokeTextured::DefaultPipelineState::~DefaultPipelineState(ggl::FlyoverRoadStrokeTextured::DefaultPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::FlyoverRoadStrokeTextured::DefaultPipelineSetup::~DefaultPipelineSetup(ggl::FlyoverRoadStrokeTextured::DefaultPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::FlyoverRoadStrokeTextured::DefaultPipelineSetup::constantDataIsEnabled(ggl::FlyoverRoadStrokeTextured::DefaultPipelineSetup *this, unint64_t a2)
{
  return a2 < 5;
}

BOOL ggl::FlyoverRoadStrokeTextured::DefaultPipelineSetup::textureIsEnabled(ggl::FlyoverRoadStrokeTextured::DefaultPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

uint64_t ggl::FlyoverRoadStrokeTextured::DefaultPipelineSetup::DefaultPipelineSetup(uint64_t a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t a9)
{
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;

  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup((_QWORD *)a1, a2, (uint64_t)a3);
    v18 = (unint64_t *)&a3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup((_QWORD *)a1, a2, 0);
  }
  *(_QWORD *)a1 = &off_1E42BB380;
  v20 = *(uint64_t **)(a1 + 64);
  v21 = *a4;
  v22 = a4[1];
  *v20 = *a4;
  v20[1] = 0;
  v23 = *(_QWORD **)(a1 + 160);
  if (v22)
  {
    v24 = (unint64_t *)(v22 + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  v26 = (std::__shared_weak_count *)v23[1];
  *v23 = v21;
  v23[1] = v22;
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = *(_QWORD *)(a1 + 64);
  v30 = *a5;
  v31 = a5[1];
  *(_QWORD *)(v29 + 16) = *a5;
  *(_QWORD *)(v29 + 24) = 0;
  v32 = *(_QWORD *)(a1 + 160);
  if (v31)
  {
    v33 = (unint64_t *)(v31 + 8);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  v35 = *(std::__shared_weak_count **)(v32 + 24);
  *(_QWORD *)(v32 + 16) = v30;
  *(_QWORD *)(v32 + 24) = v31;
  if (v35)
  {
    v36 = (unint64_t *)&v35->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = *(_QWORD *)(a1 + 64);
  v39 = *a6;
  v40 = a6[1];
  *(_QWORD *)(v38 + 32) = *a6;
  *(_QWORD *)(v38 + 40) = 0;
  v41 = *(_QWORD *)(a1 + 160);
  if (v40)
  {
    v42 = (unint64_t *)(v40 + 8);
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
  }
  v44 = *(std::__shared_weak_count **)(v41 + 40);
  *(_QWORD *)(v41 + 32) = v39;
  *(_QWORD *)(v41 + 40) = v40;
  if (v44)
  {
    v45 = (unint64_t *)&v44->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v47 = *(_QWORD *)(a1 + 64);
  v48 = *a7;
  v49 = a7[1];
  *(_QWORD *)(v47 + 48) = *a7;
  *(_QWORD *)(v47 + 56) = 0;
  v50 = *(_QWORD *)(a1 + 160);
  if (v49)
  {
    v51 = (unint64_t *)(v49 + 8);
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 1, v51));
  }
  v53 = *(std::__shared_weak_count **)(v50 + 56);
  *(_QWORD *)(v50 + 48) = v48;
  *(_QWORD *)(v50 + 56) = v49;
  if (v53)
  {
    v54 = (unint64_t *)&v53->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  v56 = *(_QWORD *)(a1 + 64);
  v57 = *a8;
  v58 = a8[1];
  *(_QWORD *)(v56 + 64) = *a8;
  *(_QWORD *)(v56 + 72) = 0;
  v59 = *(_QWORD *)(a1 + 160);
  if (v58)
  {
    v60 = (unint64_t *)(v58 + 8);
    do
      v61 = __ldxr(v60);
    while (__stxr(v61 + 1, v60));
  }
  v62 = *(std::__shared_weak_count **)(v59 + 72);
  *(_QWORD *)(v59 + 64) = v57;
  *(_QWORD *)(v59 + 72) = v58;
  if (v62)
  {
    v63 = (unint64_t *)&v62->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  **(_QWORD **)(a1 + 96) = a9;
  return a1;
}

uint64_t md::ita::CreateMainRenderItems::operator()(uint64_t **a1, _BYTE *a2, unsigned __int8 *a3, char a4, char *a5, uint64_t *a6, uint64_t a7, uint64_t *a8, uint64_t *a9, uint64_t *a10, uint64_t *a11, uint64_t *a12, uint64_t *a13, _OWORD *a14, uint64_t *a15, uint64_t *a16, unint64_t *a17, uint64_t *a18, uint64_t *a19, uint64_t *a20,uint64_t *a21,uint64_t *a22,uint64_t *a23,uint64_t *a24,uint64_t *a25,uint64_t *a26,uint64_t *a27,uint64_t *a28,uint64_t a29,uint64_t *a30,uint64_t *a31,uint64_t *a32,uint64_t *a33,_OWORD *a34,uint64_t *a35,uint64_t *a36,uint64_t *a37,uint64_t *a38,uint64_t *a39,uint64_t *a40,uint64_t *a41,uint64_t *a42,uint64_t *a43,uint64_t *a44,uint64_t a45,uint64_t *a46,uint64_t a47,uint64_t a48,unsigned int *a49,uint64_t a50,uint64_t a51,uint64_t *a52,uint64_t a53,uint64_t *a54,uint64_t a55,uint64_t a56,uint64_t *a57,uint64_t *a58,unsigned __int8 *a59)
{
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t (***v66)();
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  std::__shared_weak_count *v72;
  uint64_t v73;
  unint64_t *p_shared_owners;
  unint64_t v75;
  unint64_t v76;
  unint64_t RenderItem;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  _QWORD *v81;
  uint64_t (***v82)();
  uint64_t v83;
  uint64_t *v84;
  uint64_t (***v85)();
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t (***v89)();
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t (***v93)();
  uint64_t v94;
  uint64_t *v95;
  uint64_t (***v96)();
  uint64_t v97;
  uint64_t *v98;
  unint64_t v99;
  uint64_t (***v100)();
  uint64_t v101;
  uint64_t *v102;
  _QWORD *v103;
  uint64_t (***v104)();
  uint64_t v105;
  char v106;
  uint64_t *v107;
  _BYTE *v108;
  uint64_t (***v109)();
  uint64_t v110;
  uint64_t *v111;
  uint64_t (***v112)();
  uint64_t v113;
  uint64_t *v114;
  uint64_t (***v115)();
  uint64_t v116;
  uint64_t *v117;
  uint64_t (***v118)();
  uint64_t v119;
  uint64_t *v120;
  uint64_t (***v121)();
  uint64_t v122;
  uint64_t v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  uint64_t *v129;
  unint64_t v130;
  uint64_t (***v131)();
  uint64_t v132;
  uint64_t *v133;
  uint64_t (***v134)();
  uint64_t v135;
  uint64_t *v136;
  uint64_t (***v137)();
  unsigned __int8 *v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t (***v141)();
  uint64_t v142;
  uint64_t *v143;
  uint64_t (***v144)();
  uint64_t v145;
  uint64_t *v146;
  char *v147;
  uint64_t (***v148)();
  uint64_t v149;
  uint64_t *v150;
  uint64_t (***v151)();
  uint64_t v152;
  uint64_t *v153;
  uint64_t (***v154)();
  unint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  _QWORD *v159;
  uint64_t v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  unint64_t v164;
  _QWORD *AssociationItemStorage;
  _QWORD *v166;
  unint64_t v167;
  unint64_t *v168;
  _QWORD *v169;
  char *v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  unint64_t v174;
  char *v175;
  unint64_t *v176;
  char *v177;
  unint64_t v178;
  uint64_t v179;
  char *v180;
  unint64_t *v181;
  uint64_t v182;
  __int128 v183;
  unint64_t v184;
  uint64_t *v185;
  uint64_t v186;
  uint64_t (***v187)();
  uint64_t v188;
  uint64_t *v189;
  char *v190;
  uint64_t (***v191)();
  uint64_t v192;
  uint64_t *v193;
  uint64_t v194;
  uint64_t (***v195)();
  uint64_t v196;
  uint64_t *v197;
  uint64_t v198;
  uint64_t (***v199)();
  uint64_t v200;
  uint64_t *v201;
  uint64_t v202;
  uint64_t (***v203)();
  uint64_t v204;
  uint64_t *v205;
  char *v206;
  uint64_t (***v207)();
  uint64_t v208;
  uint64_t *v209;
  uint64_t v210;
  uint64_t (***v211)();
  uint64_t v212;
  uint64_t *v213;
  uint64_t v214;
  uint64_t (***v215)();
  uint64_t v216;
  uint64_t *v217;
  uint64_t v218;
  uint64_t (***v219)();
  uint64_t v220;
  uint64_t *v221;
  uint64_t v222;
  uint64_t (***v223)();
  uint64_t v224;
  uint64_t *v225;
  uint64_t v226;
  uint64_t (***v227)();
  uint64_t v228;
  uint64_t *v229;
  uint64_t v230;
  uint64_t (***v231)();
  uint64_t v232;
  uint64_t *v233;
  uint64_t v234;
  uint64_t (***v235)();
  uint64_t v236;
  uint64_t *v237;
  uint64_t v238;
  uint64_t (***v239)();
  uint64_t v240;
  uint64_t *v241;
  char *v242;
  uint64_t (***v243)();
  uint64_t v244;
  uint64_t *v245;
  uint64_t v246;
  uint64_t (***v247)();
  uint64_t v248;
  uint64_t *v249;
  uint64_t v250;
  uint64_t (***v251)();
  uint64_t v252;
  uint64_t *v253;
  uint64_t v254;
  uint64_t (***v255)();
  uint64_t v256;
  uint64_t *v257;
  uint64_t v258;
  uint64_t (***v259)();
  uint64_t v260;
  uint64_t *v261;
  uint64_t (***v262)();
  uint64_t v263;
  uint64_t *v264;
  unint64_t v265;
  uint64_t (***v266)();
  uint64_t v267;
  uint64_t *v268;
  uint64_t (***v269)();
  uint64_t v270;
  uint64_t *v271;
  uint64_t (***v272)();
  uint64_t v273;
  uint64_t *v274;
  uint64_t v275;
  uint64_t (***v276)();
  uint64_t v277;
  uint64_t *v278;
  uint64_t (***v279)();
  uint64_t v280;
  uint64_t *v281;
  uint64_t v282;
  uint64_t (***v283)();
  uint64_t v284;
  uint64_t *v285;
  uint64_t v286;
  uint64_t (***v287)();
  uint64_t v288;
  uint64_t *v289;
  uint64_t v290;
  uint64_t (***v291)();
  uint64_t v292;
  uint64_t *v293;
  uint64_t v294;
  uint64_t (***v295)();
  uint64_t v296;
  uint64_t *v297;
  uint64_t v298;
  uint64_t (***v299)();
  uint64_t v300;
  uint64_t *v301;
  char *v302;
  uint64_t (***v303)();
  uint64_t v304;
  uint64_t *v305;
  uint64_t v306;
  uint64_t (***v307)();
  uint64_t v308;
  uint64_t *v309;
  char *v310;
  uint64_t (***v311)();
  uint64_t v312;
  uint64_t *v313;
  uint64_t v314;
  uint64_t (***v315)();
  uint64_t v316;
  uint64_t *v317;
  uint64_t v318;
  uint64_t (***v319)();
  uint64_t v320;
  uint64_t *v321;
  uint64_t v322;
  uint64_t (***v323)();
  uint64_t v324;
  uint64_t *v325;
  char *v326;
  __int128 v327;
  uint64_t (***v328)();
  uint64_t v329;
  uint64_t *v330;
  uint64_t v331;
  uint64_t (***v332)();
  uint64_t v333;
  uint64_t *v334;
  uint64_t v335;
  uint64_t (***v336)();
  uint64_t v337;
  uint64_t *v338;
  uint64_t v339;
  uint64_t (***v340)();
  uint64_t v341;
  uint64_t *v342;
  uint64_t v343;
  uint64_t (***v344)();
  uint64_t v345;
  uint64_t *v346;
  uint64_t v347;
  uint64_t (***v348)();
  uint64_t v349;
  uint64_t *v350;
  uint64_t v351;
  uint64_t (***v352)();
  uint64_t v353;
  uint64_t *v354;
  uint64_t v355;
  uint64_t (***v356)();
  uint64_t v357;
  uint64_t *v358;
  uint64_t v359;
  uint64_t (***v360)();
  uint64_t v361;
  uint64_t *v362;
  uint64_t v363;
  uint64_t (***v364)();
  uint64_t v365;
  uint64_t *v366;
  uint64_t v367;
  uint64_t (***v368)();
  uint64_t v369;
  uint64_t *v370;
  uint64_t v371;
  uint64_t (***v372)();
  uint64_t v373;
  uint64_t *v374;
  uint64_t *v375;
  uint64_t v376;
  uint64_t (***v377)(_QWORD);
  std::__shared_weak_count *v378;
  unint64_t *v379;
  unint64_t v380;
  unint64_t v381;
  uint64_t v382;
  uint64_t v383;
  _QWORD *v384;
  _QWORD *v385;
  uint64_t v386;
  std::__shared_weak_count *v387;
  unint64_t *v388;
  unint64_t v389;
  unint64_t v390;
  uint64_t v391;
  unsigned __int8 *v392;
  int v393;
  unsigned int v394;
  unsigned __int8 *v395;
  uint64_t result;
  char v402;
  uint64_t (**v403)();
  __int128 v404;
  uint64_t (***v405)();
  _BYTE v406[24];
  _BYTE *v407;
  int v408;
  uint64_t v409;

  v409 = *MEMORY[0x1E0C80C00];
  if ((a4 - 2) < 3u)
    v61 = (a4 - 2) + 1;
  else
    v61 = 0;
  v62 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  v63 = HIDWORD(*v62);
  v64 = *v62 << 32;
  v403 = &off_1E427EBC8;
  *(_QWORD *)&v404 = v64;
  DWORD2(v404) = v63;
  v405 = &v403;
  *(_QWORD *)v406 = &off_1E427EBC8;
  v407 = v406;
  *(_QWORD *)&v406[8] = v64;
  *(_DWORD *)&v406[16] = v63;
  v408 = 0;
  ecs2::Runtime::queueCommand(v65, (uint64_t)v406);
  if (v408 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v408])(&v402, v406);
  v408 = -1;
  v66 = v405;
  if (v405 == &v403)
  {
    v67 = 4;
    v66 = &v403;
  }
  else
  {
    if (!v405)
      goto LABEL_11;
    v67 = 5;
  }
  (*v66)[v67]();
LABEL_11:
  v68 = gdc::Registry::create((gdc::Registry *)(*a1)[1]);
  v69 = **a1;
  v70 = *(_QWORD **)v69;
  v71 = *(_QWORD **)(v69 + 8);
  if (v70 != v71)
  {
    while (*v70 != 0x41D4E9297E100630)
    {
      v70 += 5;
      if (v70 == v71)
        goto LABEL_22;
    }
  }
  if (v70 == v71)
  {
LABEL_22:
    v73 = 0;
  }
  else
  {
    v73 = v70[3];
    v72 = (std::__shared_weak_count *)v70[4];
    if (v72)
    {
      p_shared_owners = (unint64_t *)&v72->__shared_owners_;
      do
        v75 = __ldxr(p_shared_owners);
      while (__stxr(v75 + 1, p_shared_owners));
      do
        v76 = __ldaxr(p_shared_owners);
      while (__stlxr(v76 - 1, p_shared_owners));
      if (!v76)
      {
        ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
        std::__shared_weak_count::__release_weak(v72);
      }
    }
  }
  RenderItem = md::VKMRenderResourcesStore::createRenderItem(v73, a17);
  v79 = v78;
  v80 = *a1;
  v81 = operator new(0x28uLL);
  *v81 = &off_1E427DAA0;
  v81[1] = RenderItem;
  v81[2] = v79;
  v81[3] = 4;
  v81[4] = v68;
  v407 = v81;
  v405 = 0;
  v408 = 0;
  ecs2::Runtime::queueCommand(v80, (uint64_t)v406);
  if (v408 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v408])(&v402, v406);
  v408 = -1;
  v82 = v405;
  if (v405 == &v403)
  {
    v83 = 4;
    v82 = &v403;
  }
  else
  {
    if (!v405)
      goto LABEL_30;
    v83 = 5;
  }
  (*v82)[v83]();
LABEL_30:
  v84 = *a1;
  v403 = &off_1E427E550;
  *(_QWORD *)&v404 = 0;
  *((_QWORD *)&v404 + 1) = v68;
  v405 = &v403;
  v407 = v406;
  *(_QWORD *)v406 = &off_1E427E550;
  *(_OWORD *)&v406[8] = v404;
  v408 = 0;
  ecs2::Runtime::queueCommand(v84, (uint64_t)v406);
  if (v408 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v408])(&v402, v406);
  v408 = -1;
  v85 = v405;
  if (v405 == &v403)
  {
    v86 = 4;
    v85 = &v403;
  }
  else
  {
    if (!v405)
      goto LABEL_37;
    v86 = 5;
  }
  (*v85)[v86]();
LABEL_37:
  if (!a43)
    goto LABEL_45;
  v87 = *a43;
  v88 = *a1;
  v403 = &off_1E4280878;
  *(_QWORD *)&v404 = v87;
  *((_QWORD *)&v404 + 1) = v68;
  v405 = &v403;
  v407 = v406;
  *(_QWORD *)v406 = &off_1E4280878;
  *(_OWORD *)&v406[8] = v404;
  v408 = 0;
  ecs2::Runtime::queueCommand(v88, (uint64_t)v406);
  if (v408 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v408])(&v402, v406);
  v408 = -1;
  v89 = v405;
  if (v405 == &v403)
  {
    v90 = 4;
    v89 = &v403;
  }
  else
  {
    if (!v405)
      goto LABEL_45;
    v90 = 5;
  }
  (*v89)[v90]();
LABEL_45:
  if (!a44)
    goto LABEL_53;
  v91 = *a1;
  v92 = *a44;
  v403 = &off_1E427E430;
  *(_QWORD *)&v404 = v92;
  *((_QWORD *)&v404 + 1) = v68;
  v405 = &v403;
  v407 = v406;
  *(_QWORD *)v406 = &off_1E427E430;
  *(_OWORD *)&v406[8] = v404;
  v408 = 0;
  ecs2::Runtime::queueCommand(v91, (uint64_t)v406);
  if (v408 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v408])(&v402, v406);
  v408 = -1;
  v93 = v405;
  if (v405 == &v403)
  {
    v94 = 4;
    v93 = &v403;
  }
  else
  {
    if (!v405)
      goto LABEL_53;
    v94 = 5;
  }
  (*v93)[v94]();
LABEL_53:
  v95 = *a1;
  v403 = &off_1E427EF28;
  *(_QWORD *)&v404 = 0;
  *((_QWORD *)&v404 + 1) = v68;
  v405 = &v403;
  v407 = v406;
  *(_QWORD *)v406 = &off_1E427EF28;
  *(_OWORD *)&v406[8] = v404;
  v408 = 0;
  ecs2::Runtime::queueCommand(v95, (uint64_t)v406);
  if (v408 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v408])(&v402, v406);
  v408 = -1;
  v96 = v405;
  if (v405 == &v403)
  {
    v97 = 4;
    v96 = &v403;
  }
  else
  {
    if (!v405)
      goto LABEL_60;
    v97 = 5;
  }
  (*v96)[v97]();
LABEL_60:
  v98 = *a1;
  v99 = v68 << 32;
  v403 = &off_1E427DA58;
  *(_QWORD *)&v404 = v68 << 32;
  DWORD2(v404) = HIDWORD(v68);
  v405 = &v403;
  *(_QWORD *)v406 = &off_1E427DA58;
  v407 = v406;
  *(_QWORD *)&v406[8] = v68 << 32;
  *(_DWORD *)&v406[16] = HIDWORD(v68);
  v408 = 0;
  ecs2::Runtime::queueCommand(v98, (uint64_t)v406);
  if (v408 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v408])(&v402, v406);
  v408 = -1;
  v100 = v405;
  if (v405 == &v403)
  {
    v101 = 4;
    v100 = &v403;
  }
  else
  {
    if (!v405)
      goto LABEL_67;
    v101 = 5;
  }
  (*v100)[v101]();
LABEL_67:
  v102 = *a1;
  v103 = operator new(0x28uLL);
  *v103 = &off_1E427E508;
  v103[1] = 0xDB4F0ABC43345F6ALL;
  v103[2] = "md::ls::MainPassItem]";
  v103[3] = 20;
  v103[4] = v68;
  v407 = v103;
  v405 = 0;
  v408 = 0;
  ecs2::Runtime::queueCommand(v102, (uint64_t)v406);
  if (v408 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v408])(&v402, v406);
  v408 = -1;
  v104 = v405;
  if (v405 == &v403)
  {
    v105 = 4;
    v104 = &v403;
  }
  else
  {
    if (!v405)
      goto LABEL_74;
    v105 = 5;
  }
  (*v104)[v105]();
LABEL_74:
  v106 = *a5;
  v107 = *a1;
  v108 = operator new(0x28uLL);
  *(_QWORD *)v108 = &off_1E427EFB8;
  v108[8] = v106;
  *((_QWORD *)v108 + 2) = 9;
  *((_QWORD *)v108 + 3) = v61;
  *((_QWORD *)v108 + 4) = v68;
  v407 = v108;
  v405 = 0;
  v408 = 0;
  ecs2::Runtime::queueCommand(v107, (uint64_t)v406);
  if (v408 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v408])(&v402, v406);
  v408 = -1;
  v109 = v405;
  if (v405 == &v403)
  {
    v110 = 4;
    v109 = &v403;
  }
  else
  {
    if (!v405)
      goto LABEL_81;
    v110 = 5;
  }
  (*v109)[v110]();
LABEL_81:
  addIntendedSceneLayer<ecs2::Runtime>(*a1, v68, *a5);
  v111 = *a1;
  v403 = &off_1E427F9D8;
  *(_QWORD *)&v404 = v99 | 0xC;
  DWORD2(v404) = HIDWORD(v68);
  v405 = &v403;
  *(_QWORD *)v406 = &off_1E427F9D8;
  v407 = v406;
  *(_QWORD *)&v406[8] = v99 | 0xC;
  *(_DWORD *)&v406[16] = HIDWORD(v68);
  v408 = 0;
  ecs2::Runtime::queueCommand(v111, (uint64_t)v406);
  if (v408 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v408])(&v402, v406);
  v408 = -1;
  v112 = v405;
  if (v405 == &v403)
  {
    v113 = 4;
    v112 = &v403;
  }
  else
  {
    if (!v405)
      goto LABEL_88;
    v113 = 5;
  }
  (*v112)[v113]();
LABEL_88:
  v114 = *a1;
  v403 = &off_1E427EF70;
  *(_QWORD *)&v404 = 7;
  *((_QWORD *)&v404 + 1) = v68;
  v405 = &v403;
  v407 = v406;
  *(_QWORD *)v406 = &off_1E427EF70;
  *(_OWORD *)&v406[8] = v404;
  v408 = 0;
  ecs2::Runtime::queueCommand(v114, (uint64_t)v406);
  if (v408 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v408])(&v402, v406);
  v408 = -1;
  v115 = v405;
  if (v405 == &v403)
  {
    v116 = 4;
    v115 = &v403;
  }
  else
  {
    if (!v405)
      goto LABEL_95;
    v116 = 5;
  }
  (*v115)[v116]();
LABEL_95:
  if (*a2 != 1)
    goto LABEL_103;
  v117 = *a1;
  v403 = &off_1E427D548;
  *(_QWORD *)&v404 = v68 << 32;
  DWORD2(v404) = HIDWORD(v68);
  v405 = &v403;
  *(_QWORD *)v406 = &off_1E427D548;
  v407 = v406;
  *(_QWORD *)&v406[8] = v68 << 32;
  *(_DWORD *)&v406[16] = HIDWORD(v68);
  v408 = 0;
  ecs2::Runtime::queueCommand(v117, (uint64_t)v406);
  if (v408 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v408])(&v402, v406);
  v408 = -1;
  v118 = v405;
  if (v405 == &v403)
  {
    v119 = 4;
    v118 = &v403;
  }
  else
  {
    if (!v405)
      goto LABEL_103;
    v119 = 5;
  }
  (*v118)[v119]();
LABEL_103:
  if (a56)
  {
    v120 = *a1;
    v403 = &off_1E427E160;
    *(_QWORD *)&v404 = v68 << 32;
    DWORD2(v404) = HIDWORD(v68);
    v405 = &v403;
    *(_QWORD *)v406 = &off_1E427E160;
    v407 = v406;
    *(_QWORD *)&v406[8] = v68 << 32;
    *(_DWORD *)&v406[16] = HIDWORD(v68);
    v408 = 0;
    ecs2::Runtime::queueCommand(v120, (uint64_t)v406);
    if (v408 != -1)
      ((void (*)(char *, _BYTE *))off_1E42FB340[v408])(&v402, v406);
    v408 = -1;
    v121 = v405;
    if (v405 == &v403)
    {
      v122 = 4;
      v121 = &v403;
    }
    else
    {
      if (!v405)
        goto LABEL_120;
      v122 = 5;
    }
    (*v121)[v122]();
  }
  else if (a45)
  {
    v123 = *(_QWORD *)(a45 + 8);
    *(_QWORD *)v406 = *(_QWORD *)a45;
    *(_QWORD *)&v406[8] = v123;
    if (v123)
    {
      v124 = (unint64_t *)(v123 + 8);
      do
        v125 = __ldxr(v124);
      while (__stxr(v125 + 1, v124));
    }
    *(_WORD *)&v406[16] = *(_WORD *)(a45 + 16);
    ecs2::addComponent<md::ls::CustomRenderState>(*a1, v68, (uint64_t *)v406);
    v126 = *(std::__shared_weak_count **)&v406[8];
    if (*(_QWORD *)&v406[8])
    {
      v127 = (unint64_t *)(*(_QWORD *)&v406[8] + 8);
      do
        v128 = __ldaxr(v127);
      while (__stlxr(v128 - 1, v127));
      if (!v128)
      {
        ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
        std::__shared_weak_count::__release_weak(v126);
      }
    }
  }
LABEL_120:
  if (!a59)
    goto LABEL_128;
  v129 = *a1;
  v130 = v99 | *a59;
  v403 = &off_1E427F5A0;
  *(_QWORD *)&v404 = v130;
  DWORD2(v404) = HIDWORD(v68);
  v405 = &v403;
  *(_QWORD *)v406 = &off_1E427F5A0;
  v407 = v406;
  *(_QWORD *)&v406[8] = v130;
  *(_DWORD *)&v406[16] = HIDWORD(v68);
  v408 = 0;
  ecs2::Runtime::queueCommand(v129, (uint64_t)v406);
  if (v408 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v408])(&v402, v406);
  v408 = -1;
  v131 = v405;
  if (v405 == &v403)
  {
    v132 = 4;
    v131 = &v403;
  }
  else
  {
    if (!v405)
      goto LABEL_128;
    v132 = 5;
  }
  (*v131)[v132]();
LABEL_128:
  v133 = *a1;
  v403 = &off_1E427E478;
  *(_QWORD *)&v404 = v68 << 32;
  DWORD2(v404) = HIDWORD(v68);
  v405 = &v403;
  *(_QWORD *)v406 = &off_1E427E478;
  v407 = v406;
  *(_QWORD *)&v406[8] = v68 << 32;
  *(_DWORD *)&v406[16] = HIDWORD(v68);
  v408 = 0;
  ecs2::Runtime::queueCommand(v133, (uint64_t)v406);
  if (v408 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v408])(&v402, v406);
  v408 = -1;
  v134 = v405;
  if (v405 == &v403)
  {
    v135 = 4;
    v134 = &v403;
  }
  else
  {
    if (!v405)
      goto LABEL_135;
    v135 = 5;
  }
  (*v134)[v135]();
LABEL_135:
  v136 = *a1;
  if (a55)
  {
    v403 = &off_1E427D5D8;
    *(_QWORD *)&v404 = v68 << 32;
    DWORD2(v404) = HIDWORD(v68);
    v405 = &v403;
    *(_QWORD *)v406 = &off_1E427D5D8;
    v407 = v406;
    *(_QWORD *)&v406[8] = v68 << 32;
    goto LABEL_145;
  }
  v403 = &off_1E427DC98;
  *(_QWORD *)&v404 = v68 << 32;
  DWORD2(v404) = HIDWORD(v68);
  v405 = &v403;
  *(_QWORD *)v406 = &off_1E427DC98;
  v407 = v406;
  *(_QWORD *)&v406[8] = v68 << 32;
  *(_DWORD *)&v406[16] = HIDWORD(v68);
  v408 = 0;
  ecs2::Runtime::queueCommand(v136, (uint64_t)v406);
  if (v408 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v408])(&v402, v406);
  v408 = -1;
  v137 = v405;
  if (v405 == &v403)
  {
    v139 = 4;
    v137 = &v403;
    v138 = a3;
    goto LABEL_143;
  }
  v138 = a3;
  if (v405)
  {
    v139 = 5;
LABEL_143:
    (*v137)[v139]();
  }
  v136 = *a1;
  v140 = v99 | *v138;
  v403 = &off_1E4281D48;
  *(_QWORD *)&v404 = v140;
  DWORD2(v404) = HIDWORD(v68);
  v405 = &v403;
  *(_QWORD *)v406 = &off_1E4281D48;
  v407 = v406;
  *(_QWORD *)&v406[8] = v140;
LABEL_145:
  *(_DWORD *)&v406[16] = HIDWORD(v68);
  v408 = 0;
  ecs2::Runtime::queueCommand(v136, (uint64_t)v406);
  if (v408 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v408])(&v402, v406);
  v408 = -1;
  v141 = v405;
  if (v405 == &v403)
  {
    v142 = 4;
    v141 = &v403;
  }
  else
  {
    if (!v405)
      goto LABEL_152;
    v142 = 5;
  }
  (*v141)[v142]();
LABEL_152:
  v143 = *a1;
  v403 = &off_1E427D740;
  *(_QWORD *)&v404 = v68 << 32;
  DWORD2(v404) = HIDWORD(v68);
  v405 = &v403;
  *(_QWORD *)v406 = &off_1E427D740;
  v407 = v406;
  *(_QWORD *)&v406[8] = v68 << 32;
  *(_DWORD *)&v406[16] = HIDWORD(v68);
  v408 = 0;
  ecs2::Runtime::queueCommand(v143, (uint64_t)v406);
  if (v408 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v408])(&v402, v406);
  v408 = -1;
  v144 = v405;
  if (v405 == &v403)
  {
    v145 = 4;
    v144 = &v403;
  }
  else
  {
    if (!v405)
      goto LABEL_159;
    v145 = 5;
  }
  (*v144)[v145]();
LABEL_159:
  v146 = *a1;
  v147 = (char *)operator new(0x38uLL);
  *((_QWORD *)v147 + 1) = 0;
  *((_QWORD *)v147 + 2) = 0;
  *(_QWORD *)v147 = &off_1E427E9D0;
  v147[24] = 0;
  *(_WORD *)(v147 + 25) = 257;
  *(_DWORD *)(v147 + 27) = 0;
  v147[31] = 2;
  *((_QWORD *)v147 + 4) = 0;
  v147[40] = 0;
  *(_QWORD *)(v147 + 44) = v68;
  v407 = v147;
  v405 = 0;
  v408 = 0;
  ecs2::Runtime::queueCommand(v146, (uint64_t)v406);
  if (v408 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v408])(&v402, v406);
  v408 = -1;
  v148 = v405;
  if (v405 == &v403)
  {
    v149 = 4;
    v148 = &v403;
  }
  else
  {
    if (!v405)
      goto LABEL_166;
    v149 = 5;
  }
  (*v148)[v149]();
LABEL_166:
  v150 = *a1;
  v403 = &off_1E427E8B0;
  *(_QWORD *)&v404 = v68 << 32;
  DWORD2(v404) = HIDWORD(v68);
  v405 = &v403;
  *(_QWORD *)v406 = &off_1E427E8B0;
  v407 = v406;
  *(_QWORD *)&v406[8] = v68 << 32;
  *(_DWORD *)&v406[16] = HIDWORD(v68);
  v408 = 0;
  ecs2::Runtime::queueCommand(v150, (uint64_t)v406);
  if (v408 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v408])(&v402, v406);
  v408 = -1;
  v151 = v405;
  if (v405 == &v403)
  {
    v152 = 4;
    v151 = &v403;
  }
  else
  {
    if (!v405)
      goto LABEL_173;
    v152 = 5;
  }
  (*v151)[v152]();
LABEL_173:
  v153 = *a1;
  v403 = &off_1E427E598;
  *(_QWORD *)&v404 = 0;
  *((_QWORD *)&v404 + 1) = v68;
  v405 = &v403;
  v407 = v406;
  *(_QWORD *)v406 = &off_1E427E598;
  *(_OWORD *)&v406[8] = v404;
  v408 = 0;
  ecs2::Runtime::queueCommand(v153, (uint64_t)v406);
  if (v408 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v408])(&v402, v406);
  v408 = -1;
  v154 = v405;
  if (v405 == &v403)
  {
    v156 = 4;
    v154 = &v403;
    v155 = a17;
  }
  else
  {
    v155 = a17;
    if (!v405)
      goto LABEL_180;
    v156 = 5;
  }
  (*v154)[v156]();
LABEL_180:
  v157 = **a1;
  v158 = *(_QWORD **)v157;
  v159 = *(_QWORD **)(v157 + 8);
  if (v158 != v159)
  {
    while (*v158 != 0x41D4E9297E100630)
    {
      v158 += 5;
      if (v158 == v159)
        goto LABEL_191;
    }
  }
  if (v158 == v159)
  {
LABEL_191:
    v160 = 0;
  }
  else
  {
    v160 = v158[3];
    v161 = (std::__shared_weak_count *)v158[4];
    if (v161)
    {
      v162 = (unint64_t *)&v161->__shared_owners_;
      do
        v163 = __ldxr(v162);
      while (__stxr(v163 + 1, v162));
      do
        v164 = __ldaxr(v162);
      while (__stlxr(v164 - 1, v162));
      if (!v164)
      {
        ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
        std::__shared_weak_count::__release_weak(v161);
      }
    }
  }
  AssociationItemStorage = (_QWORD *)md::VKMRenderResourcesStore::getAssociationItemStorage(v160, *v155, 1);
  v166 = AssociationItemStorage;
  v168 = (unint64_t *)AssociationItemStorage[2];
  v167 = AssociationItemStorage[3];
  if ((unint64_t)v168 >= v167)
  {
    v170 = (char *)AssociationItemStorage[1];
    v171 = ((char *)v168 - v170) >> 3;
    v172 = v171 + 1;
    if ((unint64_t)(v171 + 1) >> 61)
      abort();
    v173 = v167 - (_QWORD)v170;
    if (v173 >> 2 > v172)
      v172 = v173 >> 2;
    if ((unint64_t)v173 >= 0x7FFFFFFFFFFFFFF8)
      v174 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v174 = v172;
    if (v174)
    {
      if (v174 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v175 = (char *)operator new(8 * v174);
    }
    else
    {
      v175 = 0;
    }
    v176 = (unint64_t *)&v175[8 * v171];
    v177 = &v175[8 * v174];
    *v176 = v68;
    v169 = v176 + 1;
    if (v168 != (unint64_t *)v170)
    {
      v178 = (char *)v168 - v170 - 8;
      if (v178 < 0x58)
        goto LABEL_630;
      if ((unint64_t)(v170 - v175) < 0x20)
        goto LABEL_630;
      v179 = (v178 >> 3) + 1;
      v180 = &v175[8 * v171 - 16];
      v181 = v168 - 2;
      v182 = v179 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v183 = *(_OWORD *)v181;
        *((_OWORD *)v180 - 1) = *((_OWORD *)v181 - 1);
        *(_OWORD *)v180 = v183;
        v180 -= 32;
        v181 -= 4;
        v182 -= 4;
      }
      while (v182);
      v176 -= v179 & 0x3FFFFFFFFFFFFFFCLL;
      v168 -= v179 & 0x3FFFFFFFFFFFFFFCLL;
      if (v179 != (v179 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_630:
        do
        {
          v184 = *--v168;
          *--v176 = v184;
        }
        while (v168 != (unint64_t *)v170);
      }
      v168 = (unint64_t *)v166[1];
    }
    v166[1] = v176;
    v166[2] = v169;
    v166[3] = v177;
    if (v168)
      operator delete(v168);
  }
  else
  {
    *v168 = v68;
    v169 = v168 + 1;
  }
  v166[2] = v169;
  if (a16)
  {
    v185 = *a1;
    v186 = *a16;
    v403 = &off_1E4280680;
    *(_QWORD *)&v404 = v186;
    *((_QWORD *)&v404 + 1) = v68;
    v405 = &v403;
    v407 = v406;
    *(_QWORD *)v406 = &off_1E4280680;
    *(_OWORD *)&v406[8] = v404;
    v408 = 0;
    ecs2::Runtime::queueCommand(v185, (uint64_t)v406);
    if (v408 != -1)
      ((void (*)(char *, _BYTE *))off_1E42FB340[v408])(&v402, v406);
    v408 = -1;
    v187 = v405;
    if (v405 == &v403)
    {
      v188 = 4;
      v187 = &v403;
    }
    else
    {
      if (!v405)
        goto LABEL_222;
      v188 = 5;
    }
    (*v187)[v188]();
  }
LABEL_222:
  v189 = *a1;
  v190 = (char *)operator new(0x20uLL);
  *(_QWORD *)v190 = &off_1E427E8F8;
  *(_OWORD *)(v190 + 8) = *(_OWORD *)a17;
  *((_QWORD *)v190 + 3) = v68;
  v407 = v190;
  v405 = 0;
  v408 = 0;
  ecs2::Runtime::queueCommand(v189, (uint64_t)v406);
  if (v408 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v408])(&v402, v406);
  v408 = -1;
  v191 = v405;
  if (v405 == &v403)
  {
    v192 = 4;
    v191 = &v403;
  }
  else
  {
    if (!v405)
      goto LABEL_229;
    v192 = 5;
  }
  (*v191)[v192]();
LABEL_229:
  if (!a21)
    goto LABEL_237;
  v193 = *a1;
  v194 = *a21;
  v403 = &off_1E42819A0;
  *(_QWORD *)&v404 = v194;
  *((_QWORD *)&v404 + 1) = v68;
  v405 = &v403;
  v407 = v406;
  *(_QWORD *)v406 = &off_1E42819A0;
  *(_OWORD *)&v406[8] = v404;
  v408 = 0;
  ecs2::Runtime::queueCommand(v193, (uint64_t)v406);
  if (v408 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v408])(&v402, v406);
  v408 = -1;
  v195 = v405;
  if (v405 == &v403)
  {
    v196 = 4;
    v195 = &v403;
  }
  else
  {
    if (!v405)
      goto LABEL_237;
    v196 = 5;
  }
  (*v195)[v196]();
LABEL_237:
  if (!a58)
    goto LABEL_245;
  v197 = *a1;
  v198 = *a58;
  v403 = &off_1E427DFB0;
  *(_QWORD *)&v404 = v198;
  *((_QWORD *)&v404 + 1) = v68;
  v405 = &v403;
  v407 = v406;
  *(_QWORD *)v406 = &off_1E427DFB0;
  *(_OWORD *)&v406[8] = v404;
  v408 = 0;
  ecs2::Runtime::queueCommand(v197, (uint64_t)v406);
  if (v408 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v408])(&v402, v406);
  v408 = -1;
  v199 = v405;
  if (v405 == &v403)
  {
    v200 = 4;
    v199 = &v403;
  }
  else
  {
    if (!v405)
      goto LABEL_245;
    v200 = 5;
  }
  (*v199)[v200]();
LABEL_245:
  if (!a57)
    goto LABEL_253;
  v201 = *a1;
  v202 = *a57;
  v403 = &off_1E427D9C8;
  *(_QWORD *)&v404 = v202;
  *((_QWORD *)&v404 + 1) = v68;
  v405 = &v403;
  v407 = v406;
  *(_QWORD *)v406 = &off_1E427D9C8;
  *(_OWORD *)&v406[8] = v404;
  v408 = 0;
  ecs2::Runtime::queueCommand(v201, (uint64_t)v406);
  if (v408 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v408])(&v402, v406);
  v408 = -1;
  v203 = v405;
  if (v405 == &v403)
  {
    v204 = 4;
    v203 = &v403;
  }
  else
  {
    if (!v405)
      goto LABEL_253;
    v204 = 5;
  }
  (*v203)[v204]();
LABEL_253:
  if (!a7)
    goto LABEL_261;
  v205 = *a1;
  *(_QWORD *)v406 = *(_QWORD *)a7;
  v406[8] = *(_BYTE *)(a7 + 8);
  v206 = (char *)operator new(0x20uLL);
  *(_QWORD *)v206 = &off_1E4281B98;
  *(_OWORD *)(v206 + 8) = *(_OWORD *)v406;
  *((_QWORD *)v206 + 3) = v68;
  v407 = v206;
  v405 = 0;
  v408 = 0;
  ecs2::Runtime::queueCommand(v205, (uint64_t)v406);
  if (v408 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v408])(&v402, v406);
  v408 = -1;
  v207 = v405;
  if (v405 == &v403)
  {
    v208 = 4;
    v207 = &v403;
  }
  else
  {
    if (!v405)
      goto LABEL_261;
    v208 = 5;
  }
  (*v207)[v208]();
LABEL_261:
  if (!a6)
    goto LABEL_269;
  v209 = *a1;
  v210 = *a6;
  v403 = &off_1E427DB78;
  *(_QWORD *)&v404 = v210;
  *((_QWORD *)&v404 + 1) = v68;
  v405 = &v403;
  v407 = v406;
  *(_QWORD *)v406 = &off_1E427DB78;
  *(_OWORD *)&v406[8] = v404;
  v408 = 0;
  ecs2::Runtime::queueCommand(v209, (uint64_t)v406);
  if (v408 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v408])(&v402, v406);
  v408 = -1;
  v211 = v405;
  if (v405 == &v403)
  {
    v212 = 4;
    v211 = &v403;
  }
  else
  {
    if (!v405)
      goto LABEL_269;
    v212 = 5;
  }
  (*v211)[v212]();
LABEL_269:
  if (!a8)
    goto LABEL_277;
  v213 = *a1;
  v214 = *a8;
  v403 = &off_1E427FA68;
  *(_QWORD *)&v404 = v214;
  *((_QWORD *)&v404 + 1) = v68;
  v405 = &v403;
  v407 = v406;
  *(_QWORD *)v406 = &off_1E427FA68;
  *(_OWORD *)&v406[8] = v404;
  v408 = 0;
  ecs2::Runtime::queueCommand(v213, (uint64_t)v406);
  if (v408 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v408])(&v402, v406);
  v408 = -1;
  v215 = v405;
  if (v405 == &v403)
  {
    v216 = 4;
    v215 = &v403;
  }
  else
  {
    if (!v405)
      goto LABEL_277;
    v216 = 5;
  }
  (*v215)[v216]();
LABEL_277:
  if (!a9)
    goto LABEL_285;
  v217 = *a1;
  v218 = *a9;
  v403 = &off_1E4280998;
  *(_QWORD *)&v404 = v218;
  *((_QWORD *)&v404 + 1) = v68;
  v405 = &v403;
  v407 = v406;
  *(_QWORD *)v406 = &off_1E4280998;
  *(_OWORD *)&v406[8] = v404;
  v408 = 0;
  ecs2::Runtime::queueCommand(v217, (uint64_t)v406);
  if (v408 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v408])(&v402, v406);
  v408 = -1;
  v219 = v405;
  if (v405 == &v403)
  {
    v220 = 4;
    v219 = &v403;
  }
  else
  {
    if (!v405)
      goto LABEL_285;
    v220 = 5;
  }
  (*v219)[v220]();
LABEL_285:
  if (!a10)
    goto LABEL_293;
  v221 = *a1;
  v222 = *a10;
  v403 = &off_1E427ED30;
  *(_QWORD *)&v404 = v222;
  *((_QWORD *)&v404 + 1) = v68;
  v405 = &v403;
  v407 = v406;
  *(_QWORD *)v406 = &off_1E427ED30;
  *(_OWORD *)&v406[8] = v404;
  v408 = 0;
  ecs2::Runtime::queueCommand(v221, (uint64_t)v406);
  if (v408 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v408])(&v402, v406);
  v408 = -1;
  v223 = v405;
  if (v405 == &v403)
  {
    v224 = 4;
    v223 = &v403;
  }
  else
  {
    if (!v405)
      goto LABEL_293;
    v224 = 5;
  }
  (*v223)[v224]();
LABEL_293:
  if (!a11)
    goto LABEL_301;
  v225 = *a1;
  v226 = *a11;
  v403 = &off_1E4280710;
  *(_QWORD *)&v404 = v226;
  *((_QWORD *)&v404 + 1) = v68;
  v405 = &v403;
  v407 = v406;
  *(_QWORD *)v406 = &off_1E4280710;
  *(_OWORD *)&v406[8] = v404;
  v408 = 0;
  ecs2::Runtime::queueCommand(v225, (uint64_t)v406);
  if (v408 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v408])(&v402, v406);
  v408 = -1;
  v227 = v405;
  if (v405 == &v403)
  {
    v228 = 4;
    v227 = &v403;
  }
  else
  {
    if (!v405)
      goto LABEL_301;
    v228 = 5;
  }
  (*v227)[v228]();
LABEL_301:
  if (!a12)
    goto LABEL_309;
  v229 = *a1;
  v230 = *a12;
  v403 = &off_1E4281640;
  *(_QWORD *)&v404 = v230;
  *((_QWORD *)&v404 + 1) = v68;
  v405 = &v403;
  v407 = v406;
  *(_QWORD *)v406 = &off_1E4281640;
  *(_OWORD *)&v406[8] = v404;
  v408 = 0;
  ecs2::Runtime::queueCommand(v229, (uint64_t)v406);
  if (v408 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v408])(&v402, v406);
  v408 = -1;
  v231 = v405;
  if (v405 == &v403)
  {
    v232 = 4;
    v231 = &v403;
  }
  else
  {
    if (!v405)
      goto LABEL_309;
    v232 = 5;
  }
  (*v231)[v232]();
LABEL_309:
  if (!a13)
    goto LABEL_317;
  v233 = *a1;
  v234 = *a13;
  v403 = &off_1E427E0D0;
  *(_QWORD *)&v404 = v234;
  *((_QWORD *)&v404 + 1) = v68;
  v405 = &v403;
  v407 = v406;
  *(_QWORD *)v406 = &off_1E427E0D0;
  *(_OWORD *)&v406[8] = v404;
  v408 = 0;
  ecs2::Runtime::queueCommand(v233, (uint64_t)v406);
  if (v408 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v408])(&v402, v406);
  v408 = -1;
  v235 = v405;
  if (v405 == &v403)
  {
    v236 = 4;
    v235 = &v403;
  }
  else
  {
    if (!v405)
      goto LABEL_317;
    v236 = 5;
  }
  (*v235)[v236]();
LABEL_317:
  if (!a30)
    goto LABEL_325;
  v237 = *a1;
  v238 = *a30;
  v403 = &off_1E427F1F8;
  *(_QWORD *)&v404 = v238;
  *((_QWORD *)&v404 + 1) = v68;
  v405 = &v403;
  v407 = v406;
  *(_QWORD *)v406 = &off_1E427F1F8;
  *(_OWORD *)&v406[8] = v404;
  v408 = 0;
  ecs2::Runtime::queueCommand(v237, (uint64_t)v406);
  if (v408 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v408])(&v402, v406);
  v408 = -1;
  v239 = v405;
  if (v405 == &v403)
  {
    v240 = 4;
    v239 = &v403;
  }
  else
  {
    if (!v405)
      goto LABEL_325;
    v240 = 5;
  }
  (*v239)[v240]();
LABEL_325:
  if (!a14)
    goto LABEL_333;
  v241 = *a1;
  v242 = (char *)operator new(0x20uLL);
  *(_QWORD *)v242 = &off_1E427D500;
  *(_OWORD *)(v242 + 8) = *a14;
  *((_QWORD *)v242 + 3) = v68;
  v407 = v242;
  v405 = 0;
  v408 = 0;
  ecs2::Runtime::queueCommand(v241, (uint64_t)v406);
  if (v408 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v408])(&v402, v406);
  v408 = -1;
  v243 = v405;
  if (v405 == &v403)
  {
    v244 = 4;
    v243 = &v403;
  }
  else
  {
    if (!v405)
      goto LABEL_333;
    v244 = 5;
  }
  (*v243)[v244]();
LABEL_333:
  if (!a18)
    goto LABEL_341;
  v245 = *a1;
  v246 = *a18;
  v403 = &off_1E427DD70;
  *(_QWORD *)&v404 = v246;
  *((_QWORD *)&v404 + 1) = v68;
  v405 = &v403;
  v407 = v406;
  *(_QWORD *)v406 = &off_1E427DD70;
  *(_OWORD *)&v406[8] = v404;
  v408 = 0;
  ecs2::Runtime::queueCommand(v245, (uint64_t)v406);
  if (v408 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v408])(&v402, v406);
  v408 = -1;
  v247 = v405;
  if (v405 == &v403)
  {
    v248 = 4;
    v247 = &v403;
  }
  else
  {
    if (!v405)
      goto LABEL_341;
    v248 = 5;
  }
  (*v247)[v248]();
LABEL_341:
  if (!a19)
    goto LABEL_349;
  v249 = *a1;
  v250 = *a19;
  v403 = &off_1E427FAB0;
  *(_QWORD *)&v404 = v250;
  *((_QWORD *)&v404 + 1) = v68;
  v405 = &v403;
  v407 = v406;
  *(_QWORD *)v406 = &off_1E427FAB0;
  *(_OWORD *)&v406[8] = v404;
  v408 = 0;
  ecs2::Runtime::queueCommand(v249, (uint64_t)v406);
  if (v408 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v408])(&v402, v406);
  v408 = -1;
  v251 = v405;
  if (v405 == &v403)
  {
    v252 = 4;
    v251 = &v403;
  }
  else
  {
    if (!v405)
      goto LABEL_349;
    v252 = 5;
  }
  (*v251)[v252]();
LABEL_349:
  if (!a20)
    goto LABEL_357;
  v253 = *a1;
  v254 = *a20;
  v403 = &off_1E4281F40;
  *(_QWORD *)&v404 = v254;
  *((_QWORD *)&v404 + 1) = v68;
  v405 = &v403;
  v407 = v406;
  *(_QWORD *)v406 = &off_1E4281F40;
  *(_OWORD *)&v406[8] = v404;
  v408 = 0;
  ecs2::Runtime::queueCommand(v253, (uint64_t)v406);
  if (v408 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v408])(&v402, v406);
  v408 = -1;
  v255 = v405;
  if (v405 == &v403)
  {
    v256 = 4;
    v255 = &v403;
  }
  else
  {
    if (!v405)
      goto LABEL_357;
    v256 = 5;
  }
  (*v255)[v256]();
LABEL_357:
  if (!a22)
    goto LABEL_365;
  v257 = *a1;
  v258 = *a22;
  v403 = &off_1E427E118;
  *(_QWORD *)&v404 = v258;
  *((_QWORD *)&v404 + 1) = v68;
  v405 = &v403;
  v407 = v406;
  *(_QWORD *)v406 = &off_1E427E118;
  *(_OWORD *)&v406[8] = v404;
  v408 = 0;
  ecs2::Runtime::queueCommand(v257, (uint64_t)v406);
  if (v408 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v408])(&v402, v406);
  v408 = -1;
  v259 = v405;
  if (v405 == &v403)
  {
    v260 = 4;
    v259 = &v403;
  }
  else
  {
    if (!v405)
      goto LABEL_365;
    v260 = 5;
  }
  (*v259)[v260]();
LABEL_365:
  if (!a48)
    goto LABEL_373;
  v261 = *a1;
  v403 = &off_1E4281E68;
  *(_QWORD *)&v404 = v68 << 32;
  DWORD2(v404) = HIDWORD(v68);
  v405 = &v403;
  *(_QWORD *)v406 = &off_1E4281E68;
  v407 = v406;
  *(_QWORD *)&v406[8] = v68 << 32;
  *(_DWORD *)&v406[16] = HIDWORD(v68);
  v408 = 0;
  ecs2::Runtime::queueCommand(v261, (uint64_t)v406);
  if (v408 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v408])(&v402, v406);
  v408 = -1;
  v262 = v405;
  if (v405 == &v403)
  {
    v263 = 4;
    v262 = &v403;
  }
  else
  {
    if (!v405)
      goto LABEL_373;
    v263 = 5;
  }
  (*v262)[v263]();
LABEL_373:
  if (!a49)
    goto LABEL_381;
  v264 = *a1;
  v265 = v99 | *a49;
  v403 = &off_1E427DCE0;
  *(_QWORD *)&v404 = v265;
  DWORD2(v404) = HIDWORD(v68);
  v405 = &v403;
  *(_QWORD *)v406 = &off_1E427DCE0;
  v407 = v406;
  *(_QWORD *)&v406[8] = v265;
  *(_DWORD *)&v406[16] = HIDWORD(v68);
  v408 = 0;
  ecs2::Runtime::queueCommand(v264, (uint64_t)v406);
  if (v408 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v408])(&v402, v406);
  v408 = -1;
  v266 = v405;
  if (v405 == &v403)
  {
    v267 = 4;
    v266 = &v403;
  }
  else
  {
    if (!v405)
      goto LABEL_381;
    v267 = 5;
  }
  (*v266)[v267]();
LABEL_381:
  if (!a50)
    goto LABEL_389;
  v268 = *a1;
  v403 = &off_1E427D6B0;
  *(_QWORD *)&v404 = v68 << 32;
  DWORD2(v404) = HIDWORD(v68);
  v405 = &v403;
  *(_QWORD *)v406 = &off_1E427D6B0;
  v407 = v406;
  *(_QWORD *)&v406[8] = v68 << 32;
  *(_DWORD *)&v406[16] = HIDWORD(v68);
  v408 = 0;
  ecs2::Runtime::queueCommand(v268, (uint64_t)v406);
  if (v408 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v408])(&v402, v406);
  v408 = -1;
  v269 = v405;
  if (v405 == &v403)
  {
    v270 = 4;
    v269 = &v403;
  }
  else
  {
    if (!v405)
      goto LABEL_389;
    v270 = 5;
  }
  (*v269)[v270]();
LABEL_389:
  if (!a51)
    goto LABEL_397;
  v271 = *a1;
  v403 = &off_1E427DF68;
  *(_QWORD *)&v404 = v68 << 32;
  DWORD2(v404) = HIDWORD(v68);
  v405 = &v403;
  *(_QWORD *)v406 = &off_1E427DF68;
  v407 = v406;
  *(_QWORD *)&v406[8] = v68 << 32;
  *(_DWORD *)&v406[16] = HIDWORD(v68);
  v408 = 0;
  ecs2::Runtime::queueCommand(v271, (uint64_t)v406);
  if (v408 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v408])(&v402, v406);
  v408 = -1;
  v272 = v405;
  if (v405 == &v403)
  {
    v273 = 4;
    v272 = &v403;
  }
  else
  {
    if (!v405)
      goto LABEL_397;
    v273 = 5;
  }
  (*v272)[v273]();
LABEL_397:
  if (!a52)
    goto LABEL_405;
  v274 = *a1;
  v275 = *a52;
  v403 = &off_1E427DC08;
  *(_QWORD *)&v404 = v275;
  *((_QWORD *)&v404 + 1) = v68;
  v405 = &v403;
  v407 = v406;
  *(_QWORD *)v406 = &off_1E427DC08;
  *(_OWORD *)&v406[8] = v404;
  v408 = 0;
  ecs2::Runtime::queueCommand(v274, (uint64_t)v406);
  if (v408 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v408])(&v402, v406);
  v408 = -1;
  v276 = v405;
  if (v405 == &v403)
  {
    v277 = 4;
    v276 = &v403;
  }
  else
  {
    if (!v405)
      goto LABEL_405;
    v277 = 5;
  }
  (*v276)[v277]();
LABEL_405:
  if (!a53)
    goto LABEL_413;
  v278 = *a1;
  v403 = &off_1E4281E20;
  *(_QWORD *)&v404 = v68 << 32;
  DWORD2(v404) = HIDWORD(v68);
  v405 = &v403;
  *(_QWORD *)v406 = &off_1E4281E20;
  v407 = v406;
  *(_QWORD *)&v406[8] = v68 << 32;
  *(_DWORD *)&v406[16] = HIDWORD(v68);
  v408 = 0;
  ecs2::Runtime::queueCommand(v278, (uint64_t)v406);
  if (v408 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v408])(&v402, v406);
  v408 = -1;
  v279 = v405;
  if (v405 == &v403)
  {
    v280 = 4;
    v279 = &v403;
  }
  else
  {
    if (!v405)
      goto LABEL_413;
    v280 = 5;
  }
  (*v279)[v280]();
LABEL_413:
  if (!a54)
    goto LABEL_421;
  v281 = *a1;
  v282 = *a54;
  v403 = &off_1E427D590;
  *(_QWORD *)&v404 = v282;
  *((_QWORD *)&v404 + 1) = v68;
  v405 = &v403;
  v407 = v406;
  *(_QWORD *)v406 = &off_1E427D590;
  *(_OWORD *)&v406[8] = v404;
  v408 = 0;
  ecs2::Runtime::queueCommand(v281, (uint64_t)v406);
  if (v408 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v408])(&v402, v406);
  v408 = -1;
  v283 = v405;
  if (v405 == &v403)
  {
    v284 = 4;
    v283 = &v403;
  }
  else
  {
    if (!v405)
      goto LABEL_421;
    v284 = 5;
  }
  (*v283)[v284]();
LABEL_421:
  if (!a23)
    goto LABEL_429;
  v285 = *a1;
  v286 = *a23;
  v403 = &off_1E427F240;
  *(_QWORD *)&v404 = v286;
  *((_QWORD *)&v404 + 1) = v68;
  v405 = &v403;
  v407 = v406;
  *(_QWORD *)v406 = &off_1E427F240;
  *(_OWORD *)&v406[8] = v404;
  v408 = 0;
  ecs2::Runtime::queueCommand(v285, (uint64_t)v406);
  if (v408 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v408])(&v402, v406);
  v408 = -1;
  v287 = v405;
  if (v405 == &v403)
  {
    v288 = 4;
    v287 = &v403;
  }
  else
  {
    if (!v405)
      goto LABEL_429;
    v288 = 5;
  }
  (*v287)[v288]();
LABEL_429:
  if (!a24)
    goto LABEL_437;
  v289 = *a1;
  v290 = *a24;
  v403 = &off_1E4281B50;
  *(_QWORD *)&v404 = v290;
  *((_QWORD *)&v404 + 1) = v68;
  v405 = &v403;
  v407 = v406;
  *(_QWORD *)v406 = &off_1E4281B50;
  *(_OWORD *)&v406[8] = v404;
  v408 = 0;
  ecs2::Runtime::queueCommand(v289, (uint64_t)v406);
  if (v408 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v408])(&v402, v406);
  v408 = -1;
  v291 = v405;
  if (v405 == &v403)
  {
    v292 = 4;
    v291 = &v403;
  }
  else
  {
    if (!v405)
      goto LABEL_437;
    v292 = 5;
  }
  (*v291)[v292]();
LABEL_437:
  if (!a27)
    goto LABEL_445;
  v293 = *a1;
  v294 = *a27;
  v403 = &off_1E4281B08;
  *(_QWORD *)&v404 = v294;
  *((_QWORD *)&v404 + 1) = v68;
  v405 = &v403;
  v407 = v406;
  *(_QWORD *)v406 = &off_1E4281B08;
  *(_OWORD *)&v406[8] = v404;
  v408 = 0;
  ecs2::Runtime::queueCommand(v293, (uint64_t)v406);
  if (v408 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v408])(&v402, v406);
  v408 = -1;
  v295 = v405;
  if (v405 == &v403)
  {
    v296 = 4;
    v295 = &v403;
  }
  else
  {
    if (!v405)
      goto LABEL_445;
    v296 = 5;
  }
  (*v295)[v296]();
LABEL_445:
  if (!a28)
    goto LABEL_453;
  v297 = *a1;
  v298 = *a28;
  v403 = &off_1E4280440;
  *(_QWORD *)&v404 = v298;
  *((_QWORD *)&v404 + 1) = v68;
  v405 = &v403;
  v407 = v406;
  *(_QWORD *)v406 = &off_1E4280440;
  *(_OWORD *)&v406[8] = v404;
  v408 = 0;
  ecs2::Runtime::queueCommand(v297, (uint64_t)v406);
  if (v408 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v408])(&v402, v406);
  v408 = -1;
  v299 = v405;
  if (v405 == &v403)
  {
    v300 = 4;
    v299 = &v403;
  }
  else
  {
    if (!v405)
      goto LABEL_453;
    v300 = 5;
  }
  (*v299)[v300]();
LABEL_453:
  if (!a29)
    goto LABEL_461;
  v301 = *a1;
  *(_QWORD *)v406 = *(_QWORD *)a29;
  v406[8] = *(_BYTE *)(a29 + 8);
  v302 = (char *)operator new(0x20uLL);
  *(_QWORD *)v302 = &off_1E4280200;
  *(_OWORD *)(v302 + 8) = *(_OWORD *)v406;
  *((_QWORD *)v302 + 3) = v68;
  v407 = v302;
  v405 = 0;
  v408 = 0;
  ecs2::Runtime::queueCommand(v301, (uint64_t)v406);
  if (v408 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v408])(&v402, v406);
  v408 = -1;
  v303 = v405;
  if (v405 == &v403)
  {
    v304 = 4;
    v303 = &v403;
  }
  else
  {
    if (!v405)
      goto LABEL_461;
    v304 = 5;
  }
  (*v303)[v304]();
LABEL_461:
  if (!a15)
    goto LABEL_469;
  v305 = *a1;
  v306 = *a15;
  v403 = &off_1E4281C70;
  *(_QWORD *)&v404 = v306;
  *((_QWORD *)&v404 + 1) = v68;
  v405 = &v403;
  v407 = v406;
  *(_QWORD *)v406 = &off_1E4281C70;
  *(_OWORD *)&v406[8] = v404;
  v408 = 0;
  ecs2::Runtime::queueCommand(v305, (uint64_t)v406);
  if (v408 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v408])(&v402, v406);
  v408 = -1;
  v307 = v405;
  if (v405 == &v403)
  {
    v308 = 4;
    v307 = &v403;
  }
  else
  {
    if (!v405)
      goto LABEL_469;
    v308 = 5;
  }
  (*v307)[v308]();
LABEL_469:
  if (!a47)
    goto LABEL_477;
  v309 = *a1;
  v310 = (char *)operator new(0x28uLL);
  *(_QWORD *)v310 = &off_1E427E040;
  *(_OWORD *)(v310 + 8) = *(_OWORD *)a47;
  *((_QWORD *)v310 + 3) = *(_QWORD *)(a47 + 16);
  *((_QWORD *)v310 + 4) = v68;
  v407 = v310;
  v405 = 0;
  v408 = 0;
  ecs2::Runtime::queueCommand(v309, (uint64_t)v406);
  if (v408 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v408])(&v402, v406);
  v408 = -1;
  v311 = v405;
  if (v405 == &v403)
  {
    v312 = 4;
    v311 = &v403;
  }
  else
  {
    if (!v405)
      goto LABEL_477;
    v312 = 5;
  }
  (*v311)[v312]();
LABEL_477:
  if (!a31)
    goto LABEL_485;
  v313 = *a1;
  v314 = *a31;
  v403 = &off_1E427F2D0;
  *(_QWORD *)&v404 = v314;
  *((_QWORD *)&v404 + 1) = v68;
  v405 = &v403;
  v407 = v406;
  *(_QWORD *)v406 = &off_1E427F2D0;
  *(_OWORD *)&v406[8] = v404;
  v408 = 0;
  ecs2::Runtime::queueCommand(v313, (uint64_t)v406);
  if (v408 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v408])(&v402, v406);
  v408 = -1;
  v315 = v405;
  if (v405 == &v403)
  {
    v316 = 4;
    v315 = &v403;
  }
  else
  {
    if (!v405)
      goto LABEL_485;
    v316 = 5;
  }
  (*v315)[v316]();
LABEL_485:
  if (!a32)
    goto LABEL_493;
  v317 = *a1;
  v318 = *a32;
  v403 = &off_1E427F288;
  *(_QWORD *)&v404 = v318;
  *((_QWORD *)&v404 + 1) = v68;
  v405 = &v403;
  v407 = v406;
  *(_QWORD *)v406 = &off_1E427F288;
  *(_OWORD *)&v406[8] = v404;
  v408 = 0;
  ecs2::Runtime::queueCommand(v317, (uint64_t)v406);
  if (v408 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v408])(&v402, v406);
  v408 = -1;
  v319 = v405;
  if (v405 == &v403)
  {
    v320 = 4;
    v319 = &v403;
  }
  else
  {
    if (!v405)
      goto LABEL_493;
    v320 = 5;
  }
  (*v319)[v320]();
LABEL_493:
  if (!a33)
    goto LABEL_501;
  v321 = *a1;
  v322 = *a33;
  v403 = &off_1E4281520;
  *(_QWORD *)&v404 = v322;
  *((_QWORD *)&v404 + 1) = v68;
  v405 = &v403;
  v407 = v406;
  *(_QWORD *)v406 = &off_1E4281520;
  *(_OWORD *)&v406[8] = v404;
  v408 = 0;
  ecs2::Runtime::queueCommand(v321, (uint64_t)v406);
  if (v408 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v408])(&v402, v406);
  v408 = -1;
  v323 = v405;
  if (v405 == &v403)
  {
    v324 = 4;
    v323 = &v403;
  }
  else
  {
    if (!v405)
      goto LABEL_501;
    v324 = 5;
  }
  (*v323)[v324]();
LABEL_501:
  if (!a34)
    goto LABEL_509;
  v325 = *a1;
  v326 = (char *)operator new(0x30uLL);
  *(_QWORD *)v326 = &off_1E4281958;
  v327 = a34[1];
  *(_OWORD *)(v326 + 8) = *a34;
  *(_OWORD *)(v326 + 24) = v327;
  *((_QWORD *)v326 + 5) = v68;
  v407 = v326;
  v405 = 0;
  v408 = 0;
  ecs2::Runtime::queueCommand(v325, (uint64_t)v406);
  if (v408 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v408])(&v402, v406);
  v408 = -1;
  v328 = v405;
  if (v405 == &v403)
  {
    v329 = 4;
    v328 = &v403;
  }
  else
  {
    if (!v405)
      goto LABEL_509;
    v329 = 5;
  }
  (*v328)[v329]();
LABEL_509:
  if (!a46)
    goto LABEL_517;
  v330 = *a1;
  v331 = *a46;
  v403 = &off_1E427EDC0;
  *(_QWORD *)&v404 = v331;
  *((_QWORD *)&v404 + 1) = v68;
  v405 = &v403;
  v407 = v406;
  *(_QWORD *)v406 = &off_1E427EDC0;
  *(_OWORD *)&v406[8] = v404;
  v408 = 0;
  ecs2::Runtime::queueCommand(v330, (uint64_t)v406);
  if (v408 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v408])(&v402, v406);
  v408 = -1;
  v332 = v405;
  if (v405 == &v403)
  {
    v333 = 4;
    v332 = &v403;
  }
  else
  {
    if (!v405)
      goto LABEL_517;
    v333 = 5;
  }
  (*v332)[v333]();
LABEL_517:
  if (!a35)
    goto LABEL_525;
  v334 = *a1;
  v335 = *a35;
  v403 = &off_1E4281CB8;
  *(_QWORD *)&v404 = v335;
  *((_QWORD *)&v404 + 1) = v68;
  v405 = &v403;
  v407 = v406;
  *(_QWORD *)v406 = &off_1E4281CB8;
  *(_OWORD *)&v406[8] = v404;
  v408 = 0;
  ecs2::Runtime::queueCommand(v334, (uint64_t)v406);
  if (v408 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v408])(&v402, v406);
  v408 = -1;
  v336 = v405;
  if (v405 == &v403)
  {
    v337 = 4;
    v336 = &v403;
  }
  else
  {
    if (!v405)
      goto LABEL_525;
    v337 = 5;
  }
  (*v336)[v337]();
LABEL_525:
  if (!a36)
    goto LABEL_533;
  v338 = *a1;
  v339 = *a36;
  v403 = &off_1E4281718;
  *(_QWORD *)&v404 = v339;
  *((_QWORD *)&v404 + 1) = v68;
  v405 = &v403;
  v407 = v406;
  *(_QWORD *)v406 = &off_1E4281718;
  *(_OWORD *)&v406[8] = v404;
  v408 = 0;
  ecs2::Runtime::queueCommand(v338, (uint64_t)v406);
  if (v408 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v408])(&v402, v406);
  v408 = -1;
  v340 = v405;
  if (v405 == &v403)
  {
    v341 = 4;
    v340 = &v403;
  }
  else
  {
    if (!v405)
      goto LABEL_533;
    v341 = 5;
  }
  (*v340)[v341]();
LABEL_533:
  if (!a37)
    goto LABEL_541;
  v342 = *a1;
  v343 = *a37;
  v403 = &off_1E4280A28;
  *(_QWORD *)&v404 = v343;
  *((_QWORD *)&v404 + 1) = v68;
  v405 = &v403;
  v407 = v406;
  *(_QWORD *)v406 = &off_1E4280A28;
  *(_OWORD *)&v406[8] = v404;
  v408 = 0;
  ecs2::Runtime::queueCommand(v342, (uint64_t)v406);
  if (v408 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v408])(&v402, v406);
  v408 = -1;
  v344 = v405;
  if (v405 == &v403)
  {
    v345 = 4;
    v344 = &v403;
  }
  else
  {
    if (!v405)
      goto LABEL_541;
    v345 = 5;
  }
  (*v344)[v345]();
LABEL_541:
  if (!a38)
    goto LABEL_549;
  v346 = *a1;
  v347 = *a38;
  v403 = &off_1E42807A0;
  *(_QWORD *)&v404 = v347;
  *((_QWORD *)&v404 + 1) = v68;
  v405 = &v403;
  v407 = v406;
  *(_QWORD *)v406 = &off_1E42807A0;
  *(_OWORD *)&v406[8] = v404;
  v408 = 0;
  ecs2::Runtime::queueCommand(v346, (uint64_t)v406);
  if (v408 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v408])(&v402, v406);
  v408 = -1;
  v348 = v405;
  if (v405 == &v403)
  {
    v349 = 4;
    v348 = &v403;
  }
  else
  {
    if (!v405)
      goto LABEL_549;
    v349 = 5;
  }
  (*v348)[v349]();
LABEL_549:
  if (!a39)
    goto LABEL_557;
  v350 = *a1;
  v351 = *a39;
  v403 = &off_1E4281568;
  *(_QWORD *)&v404 = v351;
  *((_QWORD *)&v404 + 1) = v68;
  v405 = &v403;
  v407 = v406;
  *(_QWORD *)v406 = &off_1E4281568;
  *(_OWORD *)&v406[8] = v404;
  v408 = 0;
  ecs2::Runtime::queueCommand(v350, (uint64_t)v406);
  if (v408 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v408])(&v402, v406);
  v408 = -1;
  v352 = v405;
  if (v405 == &v403)
  {
    v353 = 4;
    v352 = &v403;
  }
  else
  {
    if (!v405)
      goto LABEL_557;
    v353 = 5;
  }
  (*v352)[v353]();
LABEL_557:
  if (!a40)
    goto LABEL_565;
  v354 = *a1;
  v355 = *a40;
  v403 = &off_1E427F3F0;
  *(_QWORD *)&v404 = v355;
  *((_QWORD *)&v404 + 1) = v68;
  v405 = &v403;
  v407 = v406;
  *(_QWORD *)v406 = &off_1E427F3F0;
  *(_OWORD *)&v406[8] = v404;
  v408 = 0;
  ecs2::Runtime::queueCommand(v354, (uint64_t)v406);
  if (v408 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v408])(&v402, v406);
  v408 = -1;
  v356 = v405;
  if (v405 == &v403)
  {
    v357 = 4;
    v356 = &v403;
  }
  else
  {
    if (!v405)
      goto LABEL_565;
    v357 = 5;
  }
  (*v356)[v357]();
LABEL_565:
  if (!a41)
    goto LABEL_573;
  v358 = *a1;
  v359 = *a41;
  v403 = &off_1E427F3A8;
  *(_QWORD *)&v404 = v359;
  *((_QWORD *)&v404 + 1) = v68;
  v405 = &v403;
  v407 = v406;
  *(_QWORD *)v406 = &off_1E427F3A8;
  *(_OWORD *)&v406[8] = v404;
  v408 = 0;
  ecs2::Runtime::queueCommand(v358, (uint64_t)v406);
  if (v408 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v408])(&v402, v406);
  v408 = -1;
  v360 = v405;
  if (v405 == &v403)
  {
    v361 = 4;
    v360 = &v403;
  }
  else
  {
    if (!v405)
      goto LABEL_573;
    v361 = 5;
  }
  (*v360)[v361]();
LABEL_573:
  if (!a42)
    goto LABEL_581;
  v362 = *a1;
  v363 = *a42;
  v403 = &off_1E4280488;
  *(_QWORD *)&v404 = v363;
  *((_QWORD *)&v404 + 1) = v68;
  v405 = &v403;
  v407 = v406;
  *(_QWORD *)v406 = &off_1E4280488;
  *(_OWORD *)&v406[8] = v404;
  v408 = 0;
  ecs2::Runtime::queueCommand(v362, (uint64_t)v406);
  if (v408 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v408])(&v402, v406);
  v408 = -1;
  v364 = v405;
  if (v405 == &v403)
  {
    v365 = 4;
    v364 = &v403;
  }
  else
  {
    if (!v405)
      goto LABEL_581;
    v365 = 5;
  }
  (*v364)[v365]();
LABEL_581:
  if (!a25)
    goto LABEL_589;
  v366 = *a1;
  v367 = *a25;
  v403 = &off_1E4280248;
  *(_QWORD *)&v404 = v367;
  *((_QWORD *)&v404 + 1) = v68;
  v405 = &v403;
  v407 = v406;
  *(_QWORD *)v406 = &off_1E4280248;
  *(_OWORD *)&v406[8] = v404;
  v408 = 0;
  ecs2::Runtime::queueCommand(v366, (uint64_t)v406);
  if (v408 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v408])(&v402, v406);
  v408 = -1;
  v368 = v405;
  if (v405 == &v403)
  {
    v369 = 4;
    v368 = &v403;
  }
  else
  {
    if (!v405)
      goto LABEL_589;
    v369 = 5;
  }
  (*v368)[v369]();
LABEL_589:
  if (a26)
  {
    v370 = *a1;
    v371 = *a26;
    v403 = &off_1E42803F8;
    *(_QWORD *)&v404 = v371;
    *((_QWORD *)&v404 + 1) = v68;
    v405 = &v403;
    v407 = v406;
    *(_QWORD *)v406 = &off_1E42803F8;
    *(_OWORD *)&v406[8] = v404;
    v408 = 0;
    ecs2::Runtime::queueCommand(v370, (uint64_t)v406);
    if (v408 != -1)
      ((void (*)(char *, _BYTE *))off_1E42FB340[v408])(&v402, v406);
    v408 = -1;
    v372 = v405;
    if (v405 == &v403)
    {
      v373 = 4;
      v372 = &v403;
      goto LABEL_596;
    }
    if (v405)
    {
      v373 = 5;
LABEL_596:
      (*v372)[v373]();
    }
  }
  v374 = *(uint64_t **)**a1;
  if (v374 != *(uint64_t **)(**a1 + 8) && *v374 != 0x22D45F5AAD4BF408)
  {
    v375 = v374 + 5;
    do
    {
      v376 = *v375;
      v375 += 5;
    }
    while (v376 != 0x22D45F5AAD4BF408);
    v374 = v375 - 5;
  }
  v377 = (uint64_t (***)(_QWORD))v374[3];
  v378 = (std::__shared_weak_count *)v374[4];
  if (v378)
  {
    v379 = (unint64_t *)&v378->__shared_owners_;
    do
      v380 = __ldxr(v379);
    while (__stxr(v380 + 1, v379));
    do
      v381 = __ldaxr(v379);
    while (__stlxr(v381 - 1, v379));
    if (!v381)
    {
      ((void (*)(std::__shared_weak_count *))v378->__on_zero_shared)(v378);
      std::__shared_weak_count::__release_weak(v378);
    }
  }
  v382 = (**v377)(v377);
  v383 = **a1;
  v384 = *(_QWORD **)v383;
  v385 = *(_QWORD **)(v383 + 8);
  if (v384 != v385)
  {
    while (*v384 != 0xC94DD89A7B09BE9CLL)
    {
      v384 += 5;
      if (v384 == v385)
        goto LABEL_619;
    }
  }
  if (v384 == v385)
  {
LABEL_619:
    v386 = 0;
  }
  else
  {
    v386 = v384[3];
    v387 = (std::__shared_weak_count *)v384[4];
    if (v387)
    {
      v388 = (unint64_t *)&v387->__shared_owners_;
      do
        v389 = __ldxr(v388);
      while (__stxr(v389 + 1, v388));
      do
        v390 = __ldaxr(v388);
      while (__stlxr(v390 - 1, v388));
      if (!v390)
      {
        ((void (*)(std::__shared_weak_count *))v387->__on_zero_shared)(v387);
        std::__shared_weak_count::__release_weak(v387);
      }
    }
  }
  v391 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v386 + 32))(v386);
  v392 = *(unsigned __int8 **)(v382 + 24);
  v393 = *v392;
  v394 = v392[1];
  if (v393 + 9 <= v394)
    v395 = 0;
  else
    v395 = v392 + 4;
  *(_QWORD *)(v391 + 2608) = v395;
  if (v393 + 9 > v394)
  {
    v393 = 1;
    *v392 = 1;
    v392[1] = v392[2];
  }
  *v392 = v393 + 9;
  *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v386 + 32))(v386) + 2620) = v393;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v386 + 32))(v386);
  *(_DWORD *)(result + 2624) = v393 + 1;
  return result;
}

void sub_19FE88494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *addIntendedSceneLayer<ecs2::Runtime>(_QWORD *result, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t (**v4)();
  uint64_t v5;
  char v6;
  _QWORD v7[2];
  int v8;
  _QWORD *v9;
  _QWORD v10[2];
  int v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  switch(a3)
  {
    case 0:
      v3 = a2 << 32;
      v4 = &off_1E427F798;
      goto LABEL_7;
    case 1:
      v3 = a2 << 32;
      v4 = &off_1E427F7E0;
      goto LABEL_7;
    case 2:
      v3 = a2 << 32;
      v4 = &off_1E427F828;
      goto LABEL_7;
    case 3:
      v3 = a2 << 32;
      v4 = &off_1E427F870;
      goto LABEL_7;
    case 4:
      v3 = a2 << 32;
      v4 = &off_1E427F8B8;
LABEL_7:
      v7[0] = v4;
      v7[1] = v3;
      v8 = HIDWORD(a2);
      v9 = v7;
      v10[0] = v4;
      v12 = v10;
      v10[1] = v3;
      v11 = HIDWORD(a2);
      v13 = 0;
      ecs2::Runtime::queueCommand(result, (uint64_t)v10);
      if (v13 != -1)
        ((void (*)(char *, _QWORD *))off_1E42FB340[v13])(&v6, v10);
      v13 = -1;
      result = v9;
      if (v9 == v7)
      {
        v5 = 4;
        result = v7;
      }
      else
      {
        if (!v9)
          return result;
        v5 = 5;
      }
      return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
    default:
      return result;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::StyleGroundOcclusionConstantDataHandle>(gdc::Entity,md::ls::StyleGroundOcclusionConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::StyleGroundOcclusionConstantDataHandle>(gdc::Entity,md::ls::StyleGroundOcclusionConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E4281C70;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::StyleGroundOcclusionConstantDataHandle>(gdc::Entity,md::ls::StyleGroundOcclusionConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E4281C70;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::StyleGroundOcclusionConstantDataHandle>(gdc::Entity,md::ls::StyleGroundOcclusionConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::StyleGroundOcclusionConstantDataHandle>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_36;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 == v15)
      {
        v15 = v13;
      }
      else
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_40;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_40;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
          v15 = (char *)v4[10];
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + v4[10] - v4[7]);
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_QWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_35;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::LandCoverSettingsConstantDataHandle>(gdc::Entity,md::ls::LandCoverSettingsConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::LandCoverSettingsConstantDataHandle>(gdc::Entity,md::ls::LandCoverSettingsConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E4281B50;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::LandCoverSettingsConstantDataHandle>(gdc::Entity,md::ls::LandCoverSettingsConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E4281B50;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::LandCoverSettingsConstantDataHandle>(gdc::Entity,md::ls::LandCoverSettingsConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::LandCoverSettingsConstantDataHandle>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_36;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 == v15)
      {
        v15 = v13;
      }
      else
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_40;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_40;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
          v15 = (char *)v4[10];
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + v4[10] - v4[7]);
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_QWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_35;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderOrderToUse>(gdc::Entity,md::ls::RenderOrderToUse &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderOrderToUse>(gdc::Entity,md::ls::RenderOrderToUse &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427E598;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderOrderToUse>(gdc::Entity,md::ls::RenderOrderToUse &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427E598;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderOrderToUse>(gdc::Entity,md::ls::RenderOrderToUse &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::RenderOrderToUse>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_34;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 != v15)
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_38;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_38;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_38:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + v4[10] - v4[7]);
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_QWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_33:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_34:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_33;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UseGlobeLighting>(gdc::Entity,md::ls::UseGlobeLighting &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UseGlobeLighting>(gdc::Entity,md::ls::UseGlobeLighting &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427E8B0;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UseGlobeLighting>(gdc::Entity,md::ls::UseGlobeLighting &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427E8B0;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UseGlobeLighting>(gdc::Entity,md::ls::UseGlobeLighting &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::UseGlobeLighting>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FunctionConstants>(gdc::Entity,md::ls::FunctionConstants &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FunctionConstants>(gdc::Entity,md::ls::FunctionConstants &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_1E427E9D0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 36);
  *(__n128 *)(v2 + 36) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FunctionConstants>(gdc::Entity,md::ls::FunctionConstants &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E427E9D0;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 36) = *(_OWORD *)(a1 + 36);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FunctionConstants>(gdc::Entity,md::ls::FunctionConstants &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  _QWORD *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;

  v3 = *(_QWORD *)(a1 + 44);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::FunctionConstants>(a2);
  v24 = *(_OWORD *)(a1 + 8);
  v25 = *(_OWORD *)(a1 + 24);
  v26 = *(_BYTE *)(a1 + 40);
  v27 = v3;
  v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v27);
  if ((v6 & 1) != 0)
  {
    v12 = (char *)v4[11];
    v11 = v4[12];
    if ((unint64_t)v12 >= v11)
    {
      v14 = (char *)v4[10];
      v15 = 0xF83E0F83E0F83E1 * (v12 - v14) + 1;
      if (v15 > 0x7C1F07C1F07C1F0)
        goto LABEL_30;
      v16 = 0xF83E0F83E0F83E1 * (v11 - (_QWORD)v14);
      if (2 * v16 > v15)
        v15 = 2 * v16;
      if (v16 >= 0x3E0F83E0F83E0F8)
        v17 = 0x7C1F07C1F07C1F0;
      else
        v17 = v15;
      if (v17)
      {
        if (v17 > 0x7C1F07C1F07C1F0)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v18 = (char *)operator new(33 * v17);
      }
      else
      {
        v18 = 0;
      }
      v19 = &v18[v12 - v14];
      *(_OWORD *)v19 = v24;
      *((_OWORD *)v19 + 1) = v25;
      v19[32] = v26;
      v13 = v19 + 33;
      if (v12 != v14)
      {
        do
        {
          v20 = *(_OWORD *)(v12 - 33);
          v21 = *(_OWORD *)(v12 - 17);
          *(v19 - 1) = *(v12 - 1);
          *(_OWORD *)(v19 - 17) = v21;
          *(_OWORD *)(v19 - 33) = v20;
          v19 -= 33;
          v12 -= 33;
        }
        while (v12 != v14);
        v12 = (char *)v4[10];
      }
      v4[10] = (uint64_t)v19;
      v4[11] = (uint64_t)v13;
      v4[12] = (uint64_t)&v18[33 * v17];
      if (v12)
        operator delete(v12);
    }
    else
    {
      *(_OWORD *)v12 = v24;
      *((_OWORD *)v12 + 1) = v25;
      v12[32] = v26;
      v13 = v12 + 33;
    }
    v4[11] = (uint64_t)v13;
    v8 = v4[31];
  }
  else
  {
    v7 = v4[10] + 4 * ((_QWORD)v5 - v4[7]) + (((uint64_t)v5 - v4[7]) >> 3);
    *(_OWORD *)v7 = v24;
    *(_OWORD *)(v7 + 16) = v25;
    *(_BYTE *)(v7 + 32) = v26;
    v8 = v4[31];
    if (v7 != v4[11])
    {
      v9 = (_QWORD *)v4[16];
      if (v9)
      {
        while (1)
        {
          v29 = &v27;
          v30 = 1;
          v28 = v8;
          v10 = v9[6];
          if (!v10)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v10 + 48))(v10, &v28, &v29);
          v9 = (_QWORD *)*v9;
          if (!v9)
            return;
        }
LABEL_29:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_30:
        abort();
      }
      return;
    }
  }
  v22 = (_QWORD *)v4[22];
  if (v22)
  {
    while (1)
    {
      v29 = &v27;
      v30 = 1;
      v28 = v8;
      v23 = v22[6];
      if (!v23)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v23 + 48))(v23, &v28, &v29);
      v22 = (_QWORD *)*v22;
      if (!v22)
        return;
    }
    goto LABEL_29;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UsesShadow>(gdc::Entity,md::ls::UsesShadow &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UsesShadow>(gdc::Entity,md::ls::UsesShadow &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427D740;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UsesShadow>(gdc::Entity,md::ls::UsesShadow &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427D740;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UsesShadow>(gdc::Entity,md::ls::UsesShadow &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::UsesShadow>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IsS2>(gdc::Entity,md::ls::IsS2 &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IsS2>(gdc::Entity,md::ls::IsS2 &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4281D48;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IsS2>(gdc::Entity,md::ls::IsS2 &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E4281D48;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IsS2>(gdc::Entity,md::ls::IsS2 &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  char v5;
  _QWORD *v6;
  char v7;
  _BYTE *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  __int128 *v24;
  _OWORD *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t v28;
  uint64_t *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;

  v3 = *(_QWORD *)(a1 + 12);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::IsS2>(a2);
  v5 = *(_BYTE *)(a1 + 8);
  v36 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v36);
  if ((v7 & 1) != 0)
  {
    v13 = (_BYTE *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 < v12)
    {
      *v13 = v5;
      v14 = (uint64_t)(v13 + 1);
LABEL_39:
      v4[11] = v14;
      v9 = v4[31];
      goto LABEL_40;
    }
    v15 = v4[10];
    v16 = (unint64_t)&v13[-v15];
    v17 = (uint64_t)&v13[-v15 + 1];
    if (v17 < 0)
      goto LABEL_45;
    v18 = v12 - v15;
    if (2 * v18 > v17)
      v17 = 2 * v18;
    if (v18 >= 0x3FFFFFFFFFFFFFFFLL)
      v19 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v19 = v17;
    if (v19)
      v20 = (uint64_t)operator new(v19);
    else
      v20 = 0;
    v21 = (char *)(v20 + v16);
    v22 = (char *)(v20 + v19);
    *(_BYTE *)(v20 + v16) = v5;
    v14 = v20 + v16 + 1;
    if (v13 == (_BYTE *)v15)
    {
      v20 += v16;
      goto LABEL_37;
    }
    if (v16 >= 8 && (unint64_t)(v15 - v20) >= 0x20)
    {
      if (v16 >= 0x20)
      {
        v23 = v16 & 0xFFFFFFFFFFFFFFE0;
        v24 = (__int128 *)(v13 - 16);
        v25 = &v13[v20 - 16 - v15];
        v26 = v16 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v27 = *v24;
          *(v25 - 1) = *(v24 - 1);
          *v25 = v27;
          v25 -= 2;
          v24 -= 2;
          v26 -= 32;
        }
        while (v26);
        if (v16 == v23)
          goto LABEL_31;
        if ((v16 & 0x18) == 0)
        {
          v21 -= v23;
          v13 -= v23;
          goto LABEL_34;
        }
      }
      else
      {
        v23 = 0;
      }
      v28 = v23 - (v16 & 0xFFFFFFFFFFFFFFF8);
      v29 = (uint64_t *)&v13[-v23 - 8];
      v30 = (char *)v29 - v15;
      do
      {
        v31 = *v29--;
        *(_QWORD *)&v30[v20] = v31;
        v30 -= 8;
        v28 += 8;
      }
      while (v28);
      if (v16 == (v16 & 0xFFFFFFFFFFFFFFF8))
      {
LABEL_31:
        v13 = (_BYTE *)v15;
LABEL_37:
        v4[10] = v20;
        v4[11] = v14;
        v4[12] = (uint64_t)v22;
        if (v13)
          operator delete(v13);
        goto LABEL_39;
      }
      v21 -= v16 & 0xFFFFFFFFFFFFFFF8;
      v13 -= v16 & 0xFFFFFFFFFFFFFFF8;
    }
LABEL_34:
    v32 = v21 - 1;
    do
    {
      v33 = *--v13;
      *v32-- = v33;
    }
    while (v13 != (_BYTE *)v15);
    v13 = (_BYTE *)v4[10];
    goto LABEL_37;
  }
  v8 = (_BYTE *)(v4[10] + (((uint64_t)v6 - v4[7]) >> 3));
  *v8 = v5;
  v9 = v4[31];
  if (v8 != (_BYTE *)v4[11])
  {
    v10 = (_QWORD *)v4[16];
    if (v10)
    {
      while (1)
      {
        v38 = &v36;
        v39 = 1;
        v37 = v9;
        v11 = v10[6];
        if (!v11)
          break;
        (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v37, &v38);
        v10 = (_QWORD *)*v10;
        if (!v10)
          return;
      }
LABEL_44:
      std::__throw_bad_function_call[abi:nn180100]();
LABEL_45:
      abort();
    }
    return;
  }
LABEL_40:
  v34 = (_QWORD *)v4[22];
  if (v34)
  {
    while (1)
    {
      v38 = &v36;
      v39 = 1;
      v37 = v9;
      v35 = v34[6];
      if (!v35)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v35 + 48))(v35, &v37, &v38);
      v34 = (_QWORD *)*v34;
      if (!v34)
        return;
    }
    goto LABEL_44;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IsNotMercator>(gdc::Entity,md::ls::IsNotMercator &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IsNotMercator>(gdc::Entity,md::ls::IsNotMercator &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427DC98;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IsNotMercator>(gdc::Entity,md::ls::IsNotMercator &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427DC98;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IsNotMercator>(gdc::Entity,md::ls::IsNotMercator &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *IsNot;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  IsNot = (uint64_t *)gdc::Registry::storage<md::ls::IsNotMercator>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(IsNot + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)IsNot[11];
    v9 = IsNot[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)IsNot[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      IsNot[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      IsNot[11] = v11;
      IsNot[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    IsNot[11] = v11;
    v6 = IsNot[31];
  }
  else
  {
    v6 = IsNot[31];
    if (IsNot[10] + (((uint64_t)v4 - IsNot[7]) >> 3) != IsNot[11])
    {
      v7 = (_QWORD *)IsNot[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)IsNot[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::NeedsRenderState>(gdc::Entity,md::ls::NeedsRenderState &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::NeedsRenderState>(gdc::Entity,md::ls::NeedsRenderState &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427E478;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::NeedsRenderState>(gdc::Entity,md::ls::NeedsRenderState &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427E478;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::NeedsRenderState>(gdc::Entity,md::ls::NeedsRenderState &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::NeedsRenderState>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IsElevated>(gdc::Entity,md::ls::IsElevated &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IsElevated>(gdc::Entity,md::ls::IsElevated &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427D548;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IsElevated>(gdc::Entity,md::ls::IsElevated &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427D548;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IsElevated>(gdc::Entity,md::ls::IsElevated &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::IsElevated>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::VisibilityGroupTest>(gdc::Entity,md::ls::VisibilityGroupTest &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::VisibilityGroupTest>(gdc::Entity,md::ls::VisibilityGroupTest &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427EF70;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::VisibilityGroupTest>(gdc::Entity,md::ls::VisibilityGroupTest &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427EF70;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::VisibilityGroupTest>(gdc::Entity,md::ls::VisibilityGroupTest &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  char v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  int v22;
  char v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::VisibilityGroupTest>(a2);
  v5 = *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int8 *)(a1 + 12) << 32);
  v26 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v26);
  if ((v7 & 1) != 0)
  {
    v13 = (_BYTE *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = v4[10];
      v16 = (uint64_t)&v13[-v15] >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_30;
      v18 = v12 - v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = (char *)operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      *(_QWORD *)v21 = v5;
      v14 = v21 + 8;
      if (v13 != (_BYTE *)v15)
      {
        do
        {
          v22 = *((_DWORD *)v13 - 2);
          v13 -= 8;
          v23 = v13[4];
          *((_DWORD *)v21 - 2) = v22;
          v21 -= 8;
          v21[4] = v23;
        }
        while (v13 != (_BYTE *)v15);
        v13 = (_BYTE *)v4[10];
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)&v20[8 * v19];
      if (v13)
        operator delete(v13);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (char *)v6 + v4[10] - v4[7];
    v8[4] = BYTE4(v5);
    *(_DWORD *)v8 = v5;
    v9 = v4[31];
    if (v8 != (char *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v28 = &v26;
          v29 = 1;
          v27 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v27, &v28);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_29:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_30:
        abort();
      }
      return;
    }
  }
  v24 = (_QWORD *)v4[22];
  if (v24)
  {
    while (1)
    {
      v28 = &v26;
      v29 = 1;
      v27 = v9;
      v25 = v24[6];
      if (!v25)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v25 + 48))(v25, &v27, &v28);
      v24 = (_QWORD *)*v24;
      if (!v24)
        return;
    }
    goto LABEL_29;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiredPipelinePoolID>(gdc::Entity,md::ls::RequiredPipelinePoolID &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiredPipelinePoolID>(gdc::Entity,md::ls::RequiredPipelinePoolID &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427F9D8;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiredPipelinePoolID>(gdc::Entity,md::ls::RequiredPipelinePoolID &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427F9D8;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiredPipelinePoolID>(gdc::Entity,md::ls::RequiredPipelinePoolID &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  char v5;
  _QWORD *v6;
  char v7;
  _BYTE *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  size_t v19;
  char *v20;
  char *v21;
  char *v22;
  unint64_t v23;
  __int128 *v24;
  char *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t v28;
  char *v29;
  int64_t v30;
  uint64_t v31;
  char *v32;
  char v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;

  v3 = *(_QWORD *)(a1 + 12);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::RequiredPipelinePoolID>(a2);
  v5 = *(_BYTE *)(a1 + 8);
  v36 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v36);
  if ((v7 & 1) != 0)
  {
    v13 = (_BYTE *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 < v12)
    {
      *v13 = v5;
      v14 = (uint64_t)(v13 + 1);
LABEL_37:
      v4[11] = v14;
      v9 = v4[31];
      goto LABEL_38;
    }
    v15 = (_BYTE *)v4[10];
    v16 = v13 - v15;
    v17 = v13 - v15 + 1;
    if (v17 < 0)
      goto LABEL_43;
    v18 = v12 - (_QWORD)v15;
    if (2 * v18 > v17)
      v17 = 2 * v18;
    if (v18 >= 0x3FFFFFFFFFFFFFFFLL)
      v19 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v19 = v17;
    if (v19)
      v20 = (char *)operator new(v19);
    else
      v20 = 0;
    v21 = &v20[v16];
    v22 = &v20[v19];
    v20[v16] = v5;
    v14 = (uint64_t)&v20[v16 + 1];
    if (v13 == v15)
    {
LABEL_35:
      v4[10] = (uint64_t)v21;
      v4[11] = v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
      goto LABEL_37;
    }
    if (v16 < 8 || (unint64_t)(v15 - v20) < 0x20)
      goto LABEL_32;
    if (v16 >= 0x20)
    {
      v23 = v16 & 0xFFFFFFFFFFFFFFE0;
      v24 = (__int128 *)(v13 - 16);
      v25 = &v20[v13 - 16 - v15];
      v26 = v16 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v27 = *v24;
        *((_OWORD *)v25 - 1) = *(v24 - 1);
        *(_OWORD *)v25 = v27;
        v25 -= 32;
        v24 -= 2;
        v26 -= 32;
      }
      while (v26);
      if (v16 == v23)
        goto LABEL_34;
      if ((v16 & 0x18) == 0)
      {
        v21 -= v23;
        v13 -= v23;
        goto LABEL_32;
      }
    }
    else
    {
      v23 = 0;
    }
    v28 = v23 - (v16 & 0xFFFFFFFFFFFFFFF8);
    v29 = &v13[-v23 - 8];
    v30 = v29 - v15;
    do
    {
      v31 = *(_QWORD *)v29;
      v29 -= 8;
      *(_QWORD *)&v20[v30] = v31;
      v30 -= 8;
      v28 += 8;
    }
    while (v28);
    if (v16 == (v16 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_34;
    v21 -= v16 & 0xFFFFFFFFFFFFFFF8;
    v13 -= v16 & 0xFFFFFFFFFFFFFFF8;
LABEL_32:
    v32 = v21 - 1;
    do
    {
      v33 = *--v13;
      *v32-- = v33;
    }
    while (v13 != v15);
LABEL_34:
    v21 = v20;
    goto LABEL_35;
  }
  v8 = (_BYTE *)(v4[10] + (((uint64_t)v6 - v4[7]) >> 3));
  *v8 = v5;
  v9 = v4[31];
  if (v8 != (_BYTE *)v4[11])
  {
    v10 = (_QWORD *)v4[16];
    if (v10)
    {
      while (1)
      {
        v38 = &v36;
        v39 = 1;
        v37 = v9;
        v11 = v10[6];
        if (!v11)
          break;
        (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v37, &v38);
        v10 = (_QWORD *)*v10;
        if (!v10)
          return;
      }
LABEL_42:
      std::__throw_bad_function_call[abi:nn180100]();
LABEL_43:
      abort();
    }
    return;
  }
LABEL_38:
  v34 = (_QWORD *)v4[22];
  if (v34)
  {
    while (1)
    {
      v38 = &v36;
      v39 = 1;
      v37 = v9;
      v35 = v34[6];
      if (!v35)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v35 + 48))(v35, &v37, &v38);
      v34 = (_QWORD *)*v34;
      if (!v34)
        return;
    }
    goto LABEL_42;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IntendedSceneLayerType<(md::SceneLayer)4>>(gdc::Entity,md::ls::IntendedSceneLayerType<(md::SceneLayer)4> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IntendedSceneLayerType<(md::SceneLayer)4>>(gdc::Entity,md::ls::IntendedSceneLayerType<(md::SceneLayer)4> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427F8B8;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IntendedSceneLayerType<(md::SceneLayer)4>>(gdc::Entity,md::ls::IntendedSceneLayerType<(md::SceneLayer)4> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427F8B8;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IntendedSceneLayerType<(md::SceneLayer)4>>(gdc::Entity,md::ls::IntendedSceneLayerType<(md::SceneLayer)4> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::IntendedSceneLayerType<(md::SceneLayer)4>>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IntendedSceneLayerType<(md::SceneLayer)3>>(gdc::Entity,md::ls::IntendedSceneLayerType<(md::SceneLayer)3> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IntendedSceneLayerType<(md::SceneLayer)3>>(gdc::Entity,md::ls::IntendedSceneLayerType<(md::SceneLayer)3> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427F870;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IntendedSceneLayerType<(md::SceneLayer)3>>(gdc::Entity,md::ls::IntendedSceneLayerType<(md::SceneLayer)3> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427F870;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IntendedSceneLayerType<(md::SceneLayer)3>>(gdc::Entity,md::ls::IntendedSceneLayerType<(md::SceneLayer)3> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::IntendedSceneLayerType<(md::SceneLayer)3>>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IntendedSceneLayerType<(md::SceneLayer)2>>(gdc::Entity,md::ls::IntendedSceneLayerType<(md::SceneLayer)2> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IntendedSceneLayerType<(md::SceneLayer)2>>(gdc::Entity,md::ls::IntendedSceneLayerType<(md::SceneLayer)2> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427F828;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IntendedSceneLayerType<(md::SceneLayer)2>>(gdc::Entity,md::ls::IntendedSceneLayerType<(md::SceneLayer)2> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427F828;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IntendedSceneLayerType<(md::SceneLayer)2>>(gdc::Entity,md::ls::IntendedSceneLayerType<(md::SceneLayer)2> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  size_t v28;
  char *v29;
  char *v30;
  char *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;

  v3 = *(_QWORD *)(a1 + 12);
  v38 = 0xB62F599CC8566C3BLL;
  v4 = (uint64_t *)(a2 + 120);
  v5 = *(int8x8_t *)(a2 + 128);
  if (v5)
  {
    v6 = (uint8x8_t)vcnt_s8(v5);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      v7 = 0xB62F599CC8566C3BLL;
      if (*(_QWORD *)&v5 <= 0xB62F599CC8566C3BLL)
        v7 = 0xB62F599CC8566C3BLL % *(_QWORD *)&v5;
    }
    else
    {
      v7 = (*(_QWORD *)&v5 - 1) & 0xB62F599CC8566C3BLL;
    }
    v8 = *(_QWORD **)(*v4 + 8 * v7);
    if (v8)
    {
      v9 = (_QWORD *)*v8;
      if (v9)
      {
        if (v6.u32[0] < 2uLL)
        {
          v10 = *(_QWORD *)&v5 - 1;
          while (1)
          {
            v12 = v9[1];
            if (v12 == 0xB62F599CC8566C3BLL)
            {
              if (v9[2] == 0xB62F599CC8566C3BLL)
                goto LABEL_50;
            }
            else if ((v12 & v10) != v7)
            {
              goto LABEL_21;
            }
            v9 = (_QWORD *)*v9;
            if (!v9)
              goto LABEL_21;
          }
        }
        do
        {
          v11 = v9[1];
          if (v11 == 0xB62F599CC8566C3BLL)
          {
            if (v9[2] == 0xB62F599CC8566C3BLL)
            {
LABEL_50:
              v13 = v9[3];
              goto LABEL_24;
            }
          }
          else
          {
            if (v11 >= *(_QWORD *)&v5)
              v11 %= *(_QWORD *)&v5;
            if (v11 != v7)
              break;
          }
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
    }
  }
LABEL_21:
  v13 = operator new();
  *(_QWORD *)(v13 + 16) = "md::ls::IntendedSceneLayerType<md::SceneLayer::RoadNetwork>]";
  *(_QWORD *)(v13 + 24) = 59;
  *(_OWORD *)(v13 + 32) = 0u;
  *(_OWORD *)(v13 + 48) = 0u;
  *(_OWORD *)(v13 + 64) = 0u;
  *(_OWORD *)(v13 + 80) = 0u;
  *(_OWORD *)(v13 + 96) = 0u;
  *(_OWORD *)(v13 + 112) = 0u;
  *(_OWORD *)(v13 + 128) = 0u;
  *(_DWORD *)(v13 + 144) = 1065353216;
  *(_OWORD *)(v13 + 152) = 0u;
  *(_OWORD *)(v13 + 168) = 0u;
  *(_QWORD *)(v13 + 184) = 0;
  *(_DWORD *)(v13 + 192) = 1065353216;
  *(_OWORD *)(v13 + 200) = 0u;
  *(_OWORD *)(v13 + 216) = 0u;
  *(_QWORD *)(v13 + 232) = 0;
  *(_DWORD *)(v13 + 240) = 1065353216;
  *(_QWORD *)v13 = &off_1E4272978;
  *(_QWORD *)(v13 + 8) = 0xB62F599CC8566C3BLL;
  *(_QWORD *)(v13 + 248) = a2;
  v14 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v4, 0xB62F599CC8566C3BLL, &v38);
  v15 = v14[3];
  v14[3] = v13;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v34 = (uint64_t *)0xB62F599CC8566C3BLL;
  v35 = (uint64_t)"md::ls::IntendedSceneLayerType<md::SceneLayer::RoadNetwork>]";
  v36 = 59;
  gdc::Registry::_registerStorageDataSignals(a2, 0xB62F599CC8566C3BLL, (uint64_t)&v34, (uint64_t *)(v13 + 104));
LABEL_24:
  v37 = v3;
  v16 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v13 + 32), (uint64_t)&v37);
  if ((v17 & 1) != 0)
  {
    v22 = *(_BYTE **)(v13 + 88);
    v21 = *(_QWORD *)(v13 + 96);
    if ((unint64_t)v22 >= v21)
    {
      v24 = *(char **)(v13 + 80);
      v25 = v22 - v24;
      v26 = v22 - v24 + 1;
      if (v26 < 0)
        goto LABEL_52;
      v27 = v21 - (_QWORD)v24;
      if (2 * v27 > v26)
        v26 = 2 * v27;
      if (v27 >= 0x3FFFFFFFFFFFFFFFLL)
        v28 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v28 = v26;
      if (v28)
        v29 = (char *)operator new(v28);
      else
        v29 = 0;
      v30 = &v29[v28];
      v23 = (uint64_t)&v29[v25 + 1];
      v31 = (char *)(v24 - v22);
      if (v24 == v22)
        v31 = 0;
      *(_QWORD *)(v13 + 80) = &v29[v25 + (_QWORD)v31];
      *(_QWORD *)(v13 + 88) = v23;
      *(_QWORD *)(v13 + 96) = v30;
      if (v24)
        operator delete(v24);
    }
    else
    {
      v23 = (uint64_t)(v22 + 1);
    }
    *(_QWORD *)(v13 + 88) = v23;
    v18 = *(_QWORD *)(v13 + 248);
  }
  else
  {
    v18 = *(_QWORD *)(v13 + 248);
    if (*(_QWORD *)(v13 + 80) + (((uint64_t)v16 - *(_QWORD *)(v13 + 56)) >> 3) != *(_QWORD *)(v13 + 88))
    {
      v19 = *(_QWORD **)(v13 + 128);
      if (v19)
      {
        while (1)
        {
          v34 = &v37;
          v35 = 1;
          v38 = v18;
          v20 = v19[6];
          if (!v20)
            break;
          (*(void (**)(uint64_t, unint64_t *, uint64_t **))(*(_QWORD *)v20 + 48))(v20, &v38, &v34);
          v19 = (_QWORD *)*v19;
          if (!v19)
            return;
        }
LABEL_51:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_52:
        abort();
      }
      return;
    }
  }
  v32 = *(_QWORD **)(v13 + 176);
  if (v32)
  {
    while (1)
    {
      v34 = &v37;
      v35 = 1;
      v38 = v18;
      v33 = v32[6];
      if (!v33)
        break;
      (*(void (**)(uint64_t, unint64_t *, uint64_t **))(*(_QWORD *)v33 + 48))(v33, &v38, &v34);
      v32 = (_QWORD *)*v32;
      if (!v32)
        return;
    }
    goto LABEL_51;
  }
}

void sub_19FE8AA6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::IntendedSceneLayerType<(md::SceneLayer)2>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::IntendedSceneLayerType<(md::SceneLayer)2>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::IntendedSceneLayerType<(md::SceneLayer)2>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::IntendedSceneLayerType<(md::SceneLayer)2>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IntendedSceneLayerType<(md::SceneLayer)1>>(gdc::Entity,md::ls::IntendedSceneLayerType<(md::SceneLayer)1> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IntendedSceneLayerType<(md::SceneLayer)1>>(gdc::Entity,md::ls::IntendedSceneLayerType<(md::SceneLayer)1> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427F7E0;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IntendedSceneLayerType<(md::SceneLayer)1>>(gdc::Entity,md::ls::IntendedSceneLayerType<(md::SceneLayer)1> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427F7E0;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IntendedSceneLayerType<(md::SceneLayer)1>>(gdc::Entity,md::ls::IntendedSceneLayerType<(md::SceneLayer)1> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  size_t v28;
  char *v29;
  char *v30;
  char *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;

  v3 = *(_QWORD *)(a1 + 12);
  v38 = 0x9E3C294C9F37A685;
  v4 = (uint64_t *)(a2 + 120);
  v5 = *(int8x8_t *)(a2 + 128);
  if (v5)
  {
    v6 = (uint8x8_t)vcnt_s8(v5);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      v7 = 0x9E3C294C9F37A685;
      if (*(_QWORD *)&v5 <= 0x9E3C294C9F37A685)
        v7 = 0x9E3C294C9F37A685 % *(_QWORD *)&v5;
    }
    else
    {
      v7 = (*(_QWORD *)&v5 - 1) & 0x9E3C294C9F37A685;
    }
    v8 = *(_QWORD **)(*v4 + 8 * v7);
    if (v8)
    {
      v9 = (_QWORD *)*v8;
      if (v9)
      {
        if (v6.u32[0] < 2uLL)
        {
          v10 = *(_QWORD *)&v5 - 1;
          while (1)
          {
            v12 = v9[1];
            if (v12 == 0x9E3C294C9F37A685)
            {
              if (v9[2] == 0x9E3C294C9F37A685)
                goto LABEL_50;
            }
            else if ((v12 & v10) != v7)
            {
              goto LABEL_21;
            }
            v9 = (_QWORD *)*v9;
            if (!v9)
              goto LABEL_21;
          }
        }
        do
        {
          v11 = v9[1];
          if (v11 == 0x9E3C294C9F37A685)
          {
            if (v9[2] == 0x9E3C294C9F37A685)
            {
LABEL_50:
              v13 = v9[3];
              goto LABEL_24;
            }
          }
          else
          {
            if (v11 >= *(_QWORD *)&v5)
              v11 %= *(_QWORD *)&v5;
            if (v11 != v7)
              break;
          }
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
    }
  }
LABEL_21:
  v13 = operator new();
  *(_QWORD *)(v13 + 16) = "md::ls::IntendedSceneLayerType<md::SceneLayer::Background>]";
  *(_QWORD *)(v13 + 24) = 58;
  *(_OWORD *)(v13 + 32) = 0u;
  *(_OWORD *)(v13 + 48) = 0u;
  *(_OWORD *)(v13 + 64) = 0u;
  *(_OWORD *)(v13 + 80) = 0u;
  *(_OWORD *)(v13 + 96) = 0u;
  *(_OWORD *)(v13 + 112) = 0u;
  *(_OWORD *)(v13 + 128) = 0u;
  *(_DWORD *)(v13 + 144) = 1065353216;
  *(_OWORD *)(v13 + 152) = 0u;
  *(_OWORD *)(v13 + 168) = 0u;
  *(_QWORD *)(v13 + 184) = 0;
  *(_DWORD *)(v13 + 192) = 1065353216;
  *(_OWORD *)(v13 + 200) = 0u;
  *(_OWORD *)(v13 + 216) = 0u;
  *(_QWORD *)(v13 + 232) = 0;
  *(_DWORD *)(v13 + 240) = 1065353216;
  *(_QWORD *)v13 = &off_1E4272948;
  *(_QWORD *)(v13 + 8) = 0x9E3C294C9F37A685;
  *(_QWORD *)(v13 + 248) = a2;
  v14 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v4, 0x9E3C294C9F37A685, &v38);
  v15 = v14[3];
  v14[3] = v13;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v34 = (uint64_t *)0x9E3C294C9F37A685;
  v35 = (uint64_t)"md::ls::IntendedSceneLayerType<md::SceneLayer::Background>]";
  v36 = 58;
  gdc::Registry::_registerStorageDataSignals(a2, 0x9E3C294C9F37A685, (uint64_t)&v34, (uint64_t *)(v13 + 104));
LABEL_24:
  v37 = v3;
  v16 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v13 + 32), (uint64_t)&v37);
  if ((v17 & 1) != 0)
  {
    v22 = *(_BYTE **)(v13 + 88);
    v21 = *(_QWORD *)(v13 + 96);
    if ((unint64_t)v22 >= v21)
    {
      v24 = *(char **)(v13 + 80);
      v25 = v22 - v24;
      v26 = v22 - v24 + 1;
      if (v26 < 0)
        goto LABEL_52;
      v27 = v21 - (_QWORD)v24;
      if (2 * v27 > v26)
        v26 = 2 * v27;
      if (v27 >= 0x3FFFFFFFFFFFFFFFLL)
        v28 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v28 = v26;
      if (v28)
        v29 = (char *)operator new(v28);
      else
        v29 = 0;
      v30 = &v29[v28];
      v23 = (uint64_t)&v29[v25 + 1];
      v31 = (char *)(v24 - v22);
      if (v24 == v22)
        v31 = 0;
      *(_QWORD *)(v13 + 80) = &v29[v25 + (_QWORD)v31];
      *(_QWORD *)(v13 + 88) = v23;
      *(_QWORD *)(v13 + 96) = v30;
      if (v24)
        operator delete(v24);
    }
    else
    {
      v23 = (uint64_t)(v22 + 1);
    }
    *(_QWORD *)(v13 + 88) = v23;
    v18 = *(_QWORD *)(v13 + 248);
  }
  else
  {
    v18 = *(_QWORD *)(v13 + 248);
    if (*(_QWORD *)(v13 + 80) + (((uint64_t)v16 - *(_QWORD *)(v13 + 56)) >> 3) != *(_QWORD *)(v13 + 88))
    {
      v19 = *(_QWORD **)(v13 + 128);
      if (v19)
      {
        while (1)
        {
          v34 = &v37;
          v35 = 1;
          v38 = v18;
          v20 = v19[6];
          if (!v20)
            break;
          (*(void (**)(uint64_t, unint64_t *, uint64_t **))(*(_QWORD *)v20 + 48))(v20, &v38, &v34);
          v19 = (_QWORD *)*v19;
          if (!v19)
            return;
        }
LABEL_51:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_52:
        abort();
      }
      return;
    }
  }
  v32 = *(_QWORD **)(v13 + 176);
  if (v32)
  {
    while (1)
    {
      v34 = &v37;
      v35 = 1;
      v38 = v18;
      v33 = v32[6];
      if (!v33)
        break;
      (*(void (**)(uint64_t, unint64_t *, uint64_t **))(*(_QWORD *)v33 + 48))(v33, &v38, &v34);
      v32 = (_QWORD *)*v32;
      if (!v32)
        return;
    }
    goto LABEL_51;
  }
}

void sub_19FE8AFB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::IntendedSceneLayerType<(md::SceneLayer)1>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::IntendedSceneLayerType<(md::SceneLayer)1>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::IntendedSceneLayerType<(md::SceneLayer)1>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::IntendedSceneLayerType<(md::SceneLayer)1>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IntendedSceneLayerType<(md::SceneLayer)0>>(gdc::Entity,md::ls::IntendedSceneLayerType<(md::SceneLayer)0> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IntendedSceneLayerType<(md::SceneLayer)0>>(gdc::Entity,md::ls::IntendedSceneLayerType<(md::SceneLayer)0> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427F798;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IntendedSceneLayerType<(md::SceneLayer)0>>(gdc::Entity,md::ls::IntendedSceneLayerType<(md::SceneLayer)0> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427F798;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IntendedSceneLayerType<(md::SceneLayer)0>>(gdc::Entity,md::ls::IntendedSceneLayerType<(md::SceneLayer)0> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  int8x8_t v5;
  uint8x8_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  size_t v28;
  char *v29;
  char *v30;
  char *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v3 = *(_QWORD *)(a1 + 12);
  v38 = 0x2636D6B46908A08CLL;
  v4 = (uint64_t *)(a2 + 120);
  v5 = *(int8x8_t *)(a2 + 128);
  if (v5)
  {
    v6 = (uint8x8_t)vcnt_s8(v5);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      v7 = 0x2636D6B46908A08CLL;
      if (*(_QWORD *)&v5 <= 0x2636D6B46908A08CuLL)
        v7 = 0x2636D6B46908A08CuLL % *(_QWORD *)&v5;
    }
    else
    {
      v7 = (*(_QWORD *)&v5 - 1) & 0x2636D6B46908A08CLL;
    }
    v8 = *(_QWORD **)(*v4 + 8 * v7);
    if (v8)
    {
      v9 = (_QWORD *)*v8;
      if (v9)
      {
        if (v6.u32[0] < 2uLL)
        {
          v10 = *(_QWORD *)&v5 - 1;
          while (1)
          {
            v12 = v9[1];
            if (v12 == 0x2636D6B46908A08CLL)
            {
              if (v9[2] == 0x2636D6B46908A08CLL)
                goto LABEL_50;
            }
            else if ((v12 & v10) != v7)
            {
              goto LABEL_21;
            }
            v9 = (_QWORD *)*v9;
            if (!v9)
              goto LABEL_21;
          }
        }
        do
        {
          v11 = v9[1];
          if (v11 == 0x2636D6B46908A08CLL)
          {
            if (v9[2] == 0x2636D6B46908A08CLL)
            {
LABEL_50:
              v13 = v9[3];
              goto LABEL_24;
            }
          }
          else
          {
            if (v11 >= *(_QWORD *)&v5)
              v11 %= *(_QWORD *)&v5;
            if (v11 != v7)
              break;
          }
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
    }
  }
LABEL_21:
  v13 = operator new();
  *(_QWORD *)(v13 + 16) = "md::ls::IntendedSceneLayerType<md::SceneLayer::Default>]";
  *(_QWORD *)(v13 + 24) = 55;
  *(_OWORD *)(v13 + 32) = 0u;
  *(_OWORD *)(v13 + 48) = 0u;
  *(_OWORD *)(v13 + 64) = 0u;
  *(_OWORD *)(v13 + 80) = 0u;
  *(_OWORD *)(v13 + 96) = 0u;
  *(_OWORD *)(v13 + 112) = 0u;
  *(_OWORD *)(v13 + 128) = 0u;
  *(_DWORD *)(v13 + 144) = 1065353216;
  *(_OWORD *)(v13 + 152) = 0u;
  *(_OWORD *)(v13 + 168) = 0u;
  *(_QWORD *)(v13 + 184) = 0;
  *(_DWORD *)(v13 + 192) = 1065353216;
  *(_OWORD *)(v13 + 200) = 0u;
  *(_OWORD *)(v13 + 216) = 0u;
  *(_QWORD *)(v13 + 232) = 0;
  *(_DWORD *)(v13 + 240) = 1065353216;
  *(_QWORD *)v13 = &off_1E4272918;
  *(_QWORD *)(v13 + 8) = 0x2636D6B46908A08CLL;
  *(_QWORD *)(v13 + 248) = a2;
  v14 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v4, 0x2636D6B46908A08CuLL, &v38);
  v15 = v14[3];
  v14[3] = v13;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v34 = 0x2636D6B46908A08CLL;
  v35 = (uint64_t)"md::ls::IntendedSceneLayerType<md::SceneLayer::Default>]";
  v36 = 55;
  gdc::Registry::_registerStorageDataSignals(a2, 0x2636D6B46908A08CLL, (uint64_t)&v34, (uint64_t *)(v13 + 104));
LABEL_24:
  v37 = v3;
  v16 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v13 + 32), (uint64_t)&v37);
  if ((v17 & 1) != 0)
  {
    v22 = *(_BYTE **)(v13 + 88);
    v21 = *(_QWORD *)(v13 + 96);
    if ((unint64_t)v22 >= v21)
    {
      v24 = *(char **)(v13 + 80);
      v25 = v22 - v24;
      v26 = v22 - v24 + 1;
      if (v26 < 0)
        goto LABEL_52;
      v27 = v21 - (_QWORD)v24;
      if (2 * v27 > v26)
        v26 = 2 * v27;
      if (v27 >= 0x3FFFFFFFFFFFFFFFLL)
        v28 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v28 = v26;
      if (v28)
        v29 = (char *)operator new(v28);
      else
        v29 = 0;
      v30 = &v29[v28];
      v23 = (uint64_t)&v29[v25 + 1];
      v31 = (char *)(v24 - v22);
      if (v24 == v22)
        v31 = 0;
      *(_QWORD *)(v13 + 80) = &v29[v25 + (_QWORD)v31];
      *(_QWORD *)(v13 + 88) = v23;
      *(_QWORD *)(v13 + 96) = v30;
      if (v24)
        operator delete(v24);
    }
    else
    {
      v23 = (uint64_t)(v22 + 1);
    }
    *(_QWORD *)(v13 + 88) = v23;
    v18 = *(_QWORD *)(v13 + 248);
  }
  else
  {
    v18 = *(_QWORD *)(v13 + 248);
    if (*(_QWORD *)(v13 + 80) + (((uint64_t)v16 - *(_QWORD *)(v13 + 56)) >> 3) != *(_QWORD *)(v13 + 88))
    {
      v19 = *(_QWORD **)(v13 + 128);
      if (v19)
      {
        while (1)
        {
          v34 = (uint64_t)&v37;
          v35 = 1;
          v38 = v18;
          v20 = v19[6];
          if (!v20)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v20 + 48))(v20, &v38, &v34);
          v19 = (_QWORD *)*v19;
          if (!v19)
            return;
        }
LABEL_51:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_52:
        abort();
      }
      return;
    }
  }
  v32 = *(_QWORD **)(v13 + 176);
  if (v32)
  {
    while (1)
    {
      v34 = (uint64_t)&v37;
      v35 = 1;
      v38 = v18;
      v33 = v32[6];
      if (!v33)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v33 + 48))(v33, &v38, &v34);
      v32 = (_QWORD *)*v32;
      if (!v32)
        return;
    }
    goto LABEL_51;
  }
}

void sub_19FE8B4FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::IntendedSceneLayerType<(md::SceneLayer)0>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::IntendedSceneLayerType<(md::SceneLayer)0>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::IntendedSceneLayerType<(md::SceneLayer)0>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::IntendedSceneLayerType<(md::SceneLayer)0>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::DataForCommandBuffer>(gdc::Entity,md::ls::DataForCommandBuffer &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::DataForCommandBuffer>(gdc::Entity,md::ls::DataForCommandBuffer &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E427EFB8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::DataForCommandBuffer>(gdc::Entity,md::ls::DataForCommandBuffer &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427EFB8;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::DataForCommandBuffer>(gdc::Entity,md::ls::DataForCommandBuffer &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  _QWORD *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::DataForCommandBuffer>(a2);
  v23 = *(_OWORD *)(a1 + 8);
  v24 = *(_QWORD *)(a1 + 24);
  v25 = v3;
  v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v25);
  if ((v6 & 1) != 0)
  {
    v12 = (_QWORD *)v4[11];
    v11 = v4[12];
    if ((unint64_t)v12 >= v11)
    {
      v14 = (_QWORD *)v4[10];
      v15 = 0xAAAAAAAAAAAAAAABLL * (v12 - v14) + 1;
      if (v15 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_30;
      v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (_QWORD)v14) >> 3);
      if (2 * v16 > v15)
        v15 = 2 * v16;
      if (v16 >= 0x555555555555555)
        v17 = 0xAAAAAAAAAAAAAAALL;
      else
        v17 = v15;
      if (v17)
      {
        if (v17 > 0xAAAAAAAAAAAAAAALL)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v18 = (char *)operator new(24 * v17);
      }
      else
      {
        v18 = 0;
      }
      v19 = &v18[8 * (v12 - v14)];
      *(_OWORD *)v19 = v23;
      *((_QWORD *)v19 + 2) = v24;
      v13 = v19 + 24;
      if (v12 != v14)
      {
        do
        {
          v20 = *(_OWORD *)(v12 - 3);
          *((_QWORD *)v19 - 1) = *(v12 - 1);
          *(_OWORD *)(v19 - 24) = v20;
          v19 -= 24;
          v12 -= 3;
        }
        while (v12 != v14);
        v12 = (_QWORD *)v4[10];
      }
      v4[10] = (uint64_t)v19;
      v4[11] = (uint64_t)v13;
      v4[12] = (uint64_t)&v18[24 * v17];
      if (v12)
        operator delete(v12);
    }
    else
    {
      *(_OWORD *)v12 = v23;
      v12[2] = v24;
      v13 = v12 + 3;
    }
    v4[11] = (uint64_t)v13;
    v8 = v4[31];
  }
  else
  {
    v7 = v4[10] + 24 * (((uint64_t)v5 - v4[7]) >> 3);
    *(_OWORD *)v7 = v23;
    *(_QWORD *)(v7 + 16) = v24;
    v8 = v4[31];
    if (v7 != v4[11])
    {
      v9 = (_QWORD *)v4[16];
      if (v9)
      {
        while (1)
        {
          v27 = &v25;
          v28 = 1;
          v26 = v8;
          v10 = v9[6];
          if (!v10)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v10 + 48))(v10, &v26, &v27);
          v9 = (_QWORD *)*v9;
          if (!v9)
            return;
        }
LABEL_29:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_30:
        abort();
      }
      return;
    }
  }
  v21 = (_QWORD *)v4[22];
  if (v21)
  {
    while (1)
    {
      v27 = &v25;
      v28 = 1;
      v26 = v8;
      v22 = v21[6];
      if (!v22)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v22 + 48))(v22, &v26, &v27);
      v21 = (_QWORD *)*v21;
      if (!v21)
        return;
    }
    goto LABEL_29;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderItemTypeID>(gdc::Entity,md::ls::RenderItemTypeID &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderItemTypeID>(gdc::Entity,md::ls::RenderItemTypeID &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E427E508;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderItemTypeID>(gdc::Entity,md::ls::RenderItemTypeID &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427E508;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderItemTypeID>(gdc::Entity,md::ls::RenderItemTypeID &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  int8x8_t v6;
  uint8x8_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  __int128 v32;
  _QWORD *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;

  v4 = *(_QWORD *)(a1 + 32);
  v39 = (uint64_t *)0xCC7861782DE34E23;
  v5 = (uint64_t *)(a2 + 120);
  v6 = *(int8x8_t *)(a2 + 128);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8(v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v8 = 0xCC7861782DE34E23;
      if (*(_QWORD *)&v6 <= 0xCC7861782DE34E23)
        v8 = 0xCC7861782DE34E23 % *(_QWORD *)&v6;
    }
    else
    {
      v8 = (*(_QWORD *)&v6 - 1) & 0xCC7861782DE34E23;
    }
    v9 = *(_QWORD **)(*v5 + 8 * v8);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (v10)
      {
        if (v7.u32[0] < 2uLL)
        {
          v11 = *(_QWORD *)&v6 - 1;
          while (1)
          {
            v13 = v10[1];
            if (v13 == 0xCC7861782DE34E23)
            {
              if (v10[2] == 0xCC7861782DE34E23)
                goto LABEL_52;
            }
            else if ((v13 & v11) != v8)
            {
              goto LABEL_21;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_21;
          }
        }
        do
        {
          v12 = v10[1];
          if (v12 == 0xCC7861782DE34E23)
          {
            if (v10[2] == 0xCC7861782DE34E23)
            {
LABEL_52:
              v14 = v10[3];
              goto LABEL_24;
            }
          }
          else
          {
            if (v12 >= *(_QWORD *)&v6)
              v12 %= *(_QWORD *)&v6;
            if (v12 != v8)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_21:
  v14 = operator new();
  *(_QWORD *)(v14 + 16) = "md::ls::RenderItemTypeID]";
  *(_QWORD *)(v14 + 24) = 24;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_OWORD *)(v14 + 48) = 0u;
  *(_OWORD *)(v14 + 64) = 0u;
  *(_OWORD *)(v14 + 80) = 0u;
  *(_OWORD *)(v14 + 96) = 0u;
  *(_OWORD *)(v14 + 112) = 0u;
  *(_OWORD *)(v14 + 128) = 0u;
  *(_DWORD *)(v14 + 144) = 1065353216;
  *(_OWORD *)(v14 + 152) = 0u;
  *(_OWORD *)(v14 + 168) = 0u;
  *(_QWORD *)(v14 + 184) = 0;
  *(_DWORD *)(v14 + 192) = 1065353216;
  *(_OWORD *)(v14 + 200) = 0u;
  *(_OWORD *)(v14 + 216) = 0u;
  *(_QWORD *)(v14 + 232) = 0;
  *(_DWORD *)(v14 + 240) = 1065353216;
  *(_QWORD *)v14 = &off_1E4271C58;
  *(_QWORD *)(v14 + 8) = 0xCC7861782DE34E23;
  *(_QWORD *)(v14 + 248) = a2;
  v15 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v5, 0xCC7861782DE34E23, &v39);
  v16 = v15[3];
  v15[3] = v14;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  *(_QWORD *)&v35 = 0xCC7861782DE34E23;
  *((_QWORD *)&v35 + 1) = "md::ls::RenderItemTypeID]";
  v36 = 24;
  gdc::Registry::_registerStorageDataSignals(a2, 0xCC7861782DE34E23, (uint64_t)&v35, (uint64_t *)(v14 + 104));
LABEL_24:
  v35 = *(_OWORD *)(a1 + 8);
  v36 = *(_QWORD *)(a1 + 24);
  v37 = v4;
  v17 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v14 + 32), (uint64_t)&v37);
  if ((v18 & 1) != 0)
  {
    v24 = *(_QWORD **)(v14 + 88);
    v23 = *(_QWORD *)(v14 + 96);
    if ((unint64_t)v24 >= v23)
    {
      v26 = *(_QWORD **)(v14 + 80);
      v27 = 0xAAAAAAAAAAAAAAABLL * (v24 - v26) + 1;
      if (v27 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_54;
      v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - (_QWORD)v26) >> 3);
      if (2 * v28 > v27)
        v27 = 2 * v28;
      if (v28 >= 0x555555555555555)
        v29 = 0xAAAAAAAAAAAAAAALL;
      else
        v29 = v27;
      if (v29)
      {
        if (v29 > 0xAAAAAAAAAAAAAAALL)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v30 = (char *)operator new(24 * v29);
      }
      else
      {
        v30 = 0;
      }
      v31 = &v30[8 * (v24 - v26)];
      *(_OWORD *)v31 = v35;
      *((_QWORD *)v31 + 2) = v36;
      v25 = v31 + 24;
      if (v24 != v26)
      {
        do
        {
          v32 = *(_OWORD *)(v24 - 3);
          *((_QWORD *)v31 - 1) = *(v24 - 1);
          *(_OWORD *)(v31 - 24) = v32;
          v31 -= 24;
          v24 -= 3;
        }
        while (v24 != v26);
        v24 = *(_QWORD **)(v14 + 80);
      }
      *(_QWORD *)(v14 + 80) = v31;
      *(_QWORD *)(v14 + 88) = v25;
      *(_QWORD *)(v14 + 96) = &v30[24 * v29];
      if (v24)
        operator delete(v24);
    }
    else
    {
      *(_OWORD *)v24 = v35;
      v24[2] = v36;
      v25 = v24 + 3;
    }
    *(_QWORD *)(v14 + 88) = v25;
    v20 = *(_QWORD *)(v14 + 248);
  }
  else
  {
    v19 = *(_QWORD *)(v14 + 80) + 24 * (((uint64_t)v17 - *(_QWORD *)(v14 + 56)) >> 3);
    *(_OWORD *)v19 = v35;
    *(_QWORD *)(v19 + 16) = v36;
    v20 = *(_QWORD *)(v14 + 248);
    if (v19 != *(_QWORD *)(v14 + 88))
    {
      v21 = *(_QWORD **)(v14 + 128);
      if (v21)
      {
        while (1)
        {
          v39 = &v37;
          v40 = 1;
          v38 = v20;
          v22 = v21[6];
          if (!v22)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v22 + 48))(v22, &v38, &v39);
          v21 = (_QWORD *)*v21;
          if (!v21)
            return;
        }
LABEL_53:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_54:
        abort();
      }
      return;
    }
  }
  v33 = *(_QWORD **)(v14 + 176);
  if (v33)
  {
    while (1)
    {
      v39 = &v37;
      v40 = 1;
      v38 = v20;
      v34 = v33[6];
      if (!v34)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v34 + 48))(v34, &v38, &v39);
      v33 = (_QWORD *)*v33;
      if (!v33)
        return;
    }
    goto LABEL_53;
  }
}

void sub_19FE8BDAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::RenderItemTypeID>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RenderItemTypeID>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10] + 24 * v7;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  v16 = *(_QWORD *)(v15 - 8);
  *(_OWORD *)v14 = *(_OWORD *)(v15 - 24);
  *(_QWORD *)(v14 + 16) = v16;
  a1[11] -= 24;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RenderItemTypeID>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RenderItemTypeID>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MainPassItem>(gdc::Entity,md::ls::MainPassItem &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MainPassItem>(gdc::Entity,md::ls::MainPassItem &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427DA58;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MainPassItem>(gdc::Entity,md::ls::MainPassItem &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427DA58;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MainPassItem>(gdc::Entity,md::ls::MainPassItem &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::MainPassItem>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UniqueRenderArrayID>(gdc::Entity,md::ls::UniqueRenderArrayID &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UniqueRenderArrayID>(gdc::Entity,md::ls::UniqueRenderArrayID &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427EF28;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UniqueRenderArrayID>(gdc::Entity,md::ls::UniqueRenderArrayID &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427EF28;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UniqueRenderArrayID>(gdc::Entity,md::ls::UniqueRenderArrayID &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::UniqueRenderArrayID>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_34;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 != v15)
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_38;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_38;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_38:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + v4[10] - v4[7]);
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_QWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_33:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_34:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_33;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::HasMaterialRasterRenderItem>(gdc::Entity,md::ls::HasMaterialRasterRenderItem &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::HasMaterialRasterRenderItem>(gdc::Entity,md::ls::HasMaterialRasterRenderItem &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E4280878;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::HasMaterialRasterRenderItem>(gdc::Entity,md::ls::HasMaterialRasterRenderItem &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E4280878;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::HasMaterialRasterRenderItem>(gdc::Entity,md::ls::HasMaterialRasterRenderItem &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *HasMaterialRasterRender;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  HasMaterialRasterRender = (uint64_t *)gdc::Registry::storage<md::ls::HasMaterialRasterRenderItem>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(HasMaterialRasterRender + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)HasMaterialRasterRender[11];
    v12 = HasMaterialRasterRender[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)HasMaterialRasterRender[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_36;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 == v15)
      {
        v15 = v13;
      }
      else
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_40;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_40;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
          v15 = (char *)HasMaterialRasterRender[10];
        }
      }
      HasMaterialRasterRender[10] = (uint64_t)v21;
      HasMaterialRasterRender[11] = (uint64_t)v14;
      HasMaterialRasterRender[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    HasMaterialRasterRender[11] = (uint64_t)v14;
    v9 = HasMaterialRasterRender[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + HasMaterialRasterRender[10] - HasMaterialRasterRender[7]);
    *v8 = v5;
    v9 = HasMaterialRasterRender[31];
    if (v8 != (_QWORD *)HasMaterialRasterRender[11])
    {
      v10 = (_QWORD *)HasMaterialRasterRender[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)HasMaterialRasterRender[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_35;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderItemUpdate>(gdc::Entity,md::ls::RenderItemUpdate &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderItemUpdate>(gdc::Entity,md::ls::RenderItemUpdate &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427E550;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderItemUpdate>(gdc::Entity,md::ls::RenderItemUpdate &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427E550;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderItemUpdate>(gdc::Entity,md::ls::RenderItemUpdate &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::RenderItemUpdate>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_34;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 != v15)
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_38;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_38;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_38:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + v4[10] - v4[7]);
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_QWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_33:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_34:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_33;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderItemID>(gdc::Entity,md::ls::RenderItemID &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderItemID>(gdc::Entity,md::ls::RenderItemID &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E427DAA0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderItemID>(gdc::Entity,md::ls::RenderItemID &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427DAA0;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderItemID>(gdc::Entity,md::ls::RenderItemID &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  _QWORD *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::RenderItemID>(a2);
  v23 = *(_OWORD *)(a1 + 8);
  v24 = *(_QWORD *)(a1 + 24);
  v25 = v3;
  v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v25);
  if ((v6 & 1) != 0)
  {
    v12 = (_QWORD *)v4[11];
    v11 = v4[12];
    if ((unint64_t)v12 >= v11)
    {
      v14 = (_QWORD *)v4[10];
      v15 = 0xAAAAAAAAAAAAAAABLL * (v12 - v14) + 1;
      if (v15 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_30;
      v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (_QWORD)v14) >> 3);
      if (2 * v16 > v15)
        v15 = 2 * v16;
      if (v16 >= 0x555555555555555)
        v17 = 0xAAAAAAAAAAAAAAALL;
      else
        v17 = v15;
      if (v17)
      {
        if (v17 > 0xAAAAAAAAAAAAAAALL)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v18 = (char *)operator new(24 * v17);
      }
      else
      {
        v18 = 0;
      }
      v19 = &v18[8 * (v12 - v14)];
      *(_OWORD *)v19 = v23;
      *((_QWORD *)v19 + 2) = v24;
      v13 = v19 + 24;
      if (v12 != v14)
      {
        do
        {
          v20 = *(_OWORD *)(v12 - 3);
          *((_QWORD *)v19 - 1) = *(v12 - 1);
          *(_OWORD *)(v19 - 24) = v20;
          v19 -= 24;
          v12 -= 3;
        }
        while (v12 != v14);
        v12 = (_QWORD *)v4[10];
      }
      v4[10] = (uint64_t)v19;
      v4[11] = (uint64_t)v13;
      v4[12] = (uint64_t)&v18[24 * v17];
      if (v12)
        operator delete(v12);
    }
    else
    {
      *(_OWORD *)v12 = v23;
      v12[2] = v24;
      v13 = v12 + 3;
    }
    v4[11] = (uint64_t)v13;
    v8 = v4[31];
  }
  else
  {
    v7 = v4[10] + 24 * (((uint64_t)v5 - v4[7]) >> 3);
    *(_OWORD *)v7 = v23;
    *(_QWORD *)(v7 + 16) = v24;
    v8 = v4[31];
    if (v7 != v4[11])
    {
      v9 = (_QWORD *)v4[16];
      if (v9)
      {
        while (1)
        {
          v27 = &v25;
          v28 = 1;
          v26 = v8;
          v10 = v9[6];
          if (!v10)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v10 + 48))(v10, &v26, &v27);
          v9 = (_QWORD *)*v9;
          if (!v9)
            return;
        }
LABEL_29:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_30:
        abort();
      }
      return;
    }
  }
  v21 = (_QWORD *)v4[22];
  if (v21)
  {
    while (1)
    {
      v27 = &v25;
      v28 = 1;
      v26 = v8;
      v22 = v21[6];
      if (!v22)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v22 + 48))(v22, &v26, &v27);
      v21 = (_QWORD *)*v21;
      if (!v21)
        return;
    }
    goto LABEL_29;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FinishedProcessing>(gdc::Entity,md::ls::FinishedProcessing &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FinishedProcessing>(gdc::Entity,md::ls::FinishedProcessing &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427EBC8;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FinishedProcessing>(gdc::Entity,md::ls::FinishedProcessing &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427EBC8;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FinishedProcessing>(gdc::Entity,md::ls::FinishedProcessing &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::FinishedProcessing>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::VisibilityTestResult>(gdc::Entity,md::ls::VisibilityTestResult &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::VisibilityTestResult>(gdc::Entity,md::ls::VisibilityTestResult &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427F480;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::VisibilityTestResult>(gdc::Entity,md::ls::VisibilityTestResult &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427F480;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::VisibilityTestResult>(gdc::Entity,md::ls::VisibilityTestResult &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  char v5;
  _QWORD *v6;
  char v7;
  _BYTE *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  size_t v19;
  char *v20;
  char *v21;
  char *v22;
  unint64_t v23;
  __int128 *v24;
  char *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t v28;
  char *v29;
  int64_t v30;
  uint64_t v31;
  char *v32;
  char v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;

  v3 = *(_QWORD *)(a1 + 12);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::VisibilityTestResult>(a2);
  v5 = *(_BYTE *)(a1 + 8);
  v36 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v36);
  if ((v7 & 1) != 0)
  {
    v13 = (_BYTE *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 < v12)
    {
      *v13 = v5;
      v14 = (uint64_t)(v13 + 1);
LABEL_37:
      v4[11] = v14;
      v9 = v4[31];
      goto LABEL_38;
    }
    v15 = (_BYTE *)v4[10];
    v16 = v13 - v15;
    v17 = v13 - v15 + 1;
    if (v17 < 0)
      goto LABEL_43;
    v18 = v12 - (_QWORD)v15;
    if (2 * v18 > v17)
      v17 = 2 * v18;
    if (v18 >= 0x3FFFFFFFFFFFFFFFLL)
      v19 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v19 = v17;
    if (v19)
      v20 = (char *)operator new(v19);
    else
      v20 = 0;
    v21 = &v20[v16];
    v22 = &v20[v19];
    v20[v16] = v5;
    v14 = (uint64_t)&v20[v16 + 1];
    if (v13 == v15)
    {
LABEL_35:
      v4[10] = (uint64_t)v21;
      v4[11] = v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
      goto LABEL_37;
    }
    if (v16 < 8 || (unint64_t)(v15 - v20) < 0x20)
      goto LABEL_32;
    if (v16 >= 0x20)
    {
      v23 = v16 & 0xFFFFFFFFFFFFFFE0;
      v24 = (__int128 *)(v13 - 16);
      v25 = &v20[v13 - 16 - v15];
      v26 = v16 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v27 = *v24;
        *((_OWORD *)v25 - 1) = *(v24 - 1);
        *(_OWORD *)v25 = v27;
        v25 -= 32;
        v24 -= 2;
        v26 -= 32;
      }
      while (v26);
      if (v16 == v23)
        goto LABEL_34;
      if ((v16 & 0x18) == 0)
      {
        v21 -= v23;
        v13 -= v23;
        goto LABEL_32;
      }
    }
    else
    {
      v23 = 0;
    }
    v28 = v23 - (v16 & 0xFFFFFFFFFFFFFFF8);
    v29 = &v13[-v23 - 8];
    v30 = v29 - v15;
    do
    {
      v31 = *(_QWORD *)v29;
      v29 -= 8;
      *(_QWORD *)&v20[v30] = v31;
      v30 -= 8;
      v28 += 8;
    }
    while (v28);
    if (v16 == (v16 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_34;
    v21 -= v16 & 0xFFFFFFFFFFFFFFF8;
    v13 -= v16 & 0xFFFFFFFFFFFFFFF8;
LABEL_32:
    v32 = v21 - 1;
    do
    {
      v33 = *--v13;
      *v32-- = v33;
    }
    while (v13 != v15);
LABEL_34:
    v21 = v20;
    goto LABEL_35;
  }
  v8 = (_BYTE *)(v4[10] + (((uint64_t)v6 - v4[7]) >> 3));
  *v8 = v5;
  v9 = v4[31];
  if (v8 != (_BYTE *)v4[11])
  {
    v10 = (_QWORD *)v4[16];
    if (v10)
    {
      while (1)
      {
        v38 = &v36;
        v39 = 1;
        v37 = v9;
        v11 = v10[6];
        if (!v11)
          break;
        (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v37, &v38);
        v10 = (_QWORD *)*v10;
        if (!v10)
          return;
      }
LABEL_42:
      std::__throw_bad_function_call[abi:nn180100]();
LABEL_43:
      abort();
    }
    return;
  }
LABEL_38:
  v34 = (_QWORD *)v4[22];
  if (v34)
  {
    while (1)
    {
      v38 = &v36;
      v39 = 1;
      v37 = v9;
      v35 = v34[6];
      if (!v35)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v35 + 48))(v35, &v37, &v38);
      v34 = (_QWORD *)*v34;
      if (!v34)
        return;
    }
    goto LABEL_42;
  }
}

void std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::CommandBufferRef>(gdc::Entity,std::type_identity<md::ls::CommandBufferRef>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::CommandBufferRef>(gdc::Entity,std::type_identity<md::ls::CommandBufferRef>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::CommandBufferRef>(gdc::Entity,std::type_identity<md::ls::CommandBufferRef>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::CommandBufferRef>(gdc::Entity,std::type_identity<md::ls::CommandBufferRef>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4282600;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::CommandBufferRef>(gdc::Entity,std::type_identity<md::ls::CommandBufferRef>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::CommandBufferRef>(gdc::Entity,std::type_identity<md::ls::CommandBufferRef>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4282600;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

BOOL std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::CommandBufferRef>(gdc::Entity,std::type_identity<md::ls::CommandBufferRef>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::CommandBufferRef>(gdc::Entity,std::type_identity<md::ls::CommandBufferRef>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)gdc::Registry::storage<md::ls::CommandBufferRef>(a2);
  return gdc::ComponentStorageWrapper<md::ls::CommandBufferRef>::remove(v3, *(_QWORD *)(a1 + 8));
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::CommandBufferRef>(gdc::Entity,md::ls::CommandBufferRef &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::CommandBufferRef>(gdc::Entity,md::ls::CommandBufferRef &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427E310;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::CommandBufferRef>(gdc::Entity,md::ls::CommandBufferRef &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427E310;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::CommandBufferRef>(gdc::Entity,md::ls::CommandBufferRef &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::CommandBufferRef>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_36;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 == v15)
      {
        v15 = v13;
      }
      else
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_40;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_40;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
          v15 = (char *)v4[10];
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + v4[10] - v4[7]);
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_QWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_35;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::DepthPeeledPassItem>(gdc::Entity,md::ls::DepthPeeledPassItem &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::DepthPeeledPassItem>(gdc::Entity,md::ls::DepthPeeledPassItem &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427EE08;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::DepthPeeledPassItem>(gdc::Entity,md::ls::DepthPeeledPassItem &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427EE08;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::DepthPeeledPassItem>(gdc::Entity,md::ls::DepthPeeledPassItem &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  size_t v28;
  char *v29;
  char *v30;
  char *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;

  v3 = *(_QWORD *)(a1 + 12);
  v38 = 0xB1EC8A230021F56BLL;
  v4 = (uint64_t *)(a2 + 120);
  v5 = *(int8x8_t *)(a2 + 128);
  if (v5)
  {
    v6 = (uint8x8_t)vcnt_s8(v5);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      v7 = 0xB1EC8A230021F56BLL;
      if (*(_QWORD *)&v5 <= 0xB1EC8A230021F56BLL)
        v7 = 0xB1EC8A230021F56BLL % *(_QWORD *)&v5;
    }
    else
    {
      v7 = (*(_QWORD *)&v5 - 1) & 0xB1EC8A230021F56BLL;
    }
    v8 = *(_QWORD **)(*v4 + 8 * v7);
    if (v8)
    {
      v9 = (_QWORD *)*v8;
      if (v9)
      {
        if (v6.u32[0] < 2uLL)
        {
          v10 = *(_QWORD *)&v5 - 1;
          while (1)
          {
            v12 = v9[1];
            if (v12 == 0xB1EC8A230021F56BLL)
            {
              if (v9[2] == 0xB1EC8A230021F56BLL)
                goto LABEL_50;
            }
            else if ((v12 & v10) != v7)
            {
              goto LABEL_21;
            }
            v9 = (_QWORD *)*v9;
            if (!v9)
              goto LABEL_21;
          }
        }
        do
        {
          v11 = v9[1];
          if (v11 == 0xB1EC8A230021F56BLL)
          {
            if (v9[2] == 0xB1EC8A230021F56BLL)
            {
LABEL_50:
              v13 = v9[3];
              goto LABEL_24;
            }
          }
          else
          {
            if (v11 >= *(_QWORD *)&v5)
              v11 %= *(_QWORD *)&v5;
            if (v11 != v7)
              break;
          }
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
    }
  }
LABEL_21:
  v13 = operator new();
  *(_QWORD *)(v13 + 16) = "md::ls::DepthPeeledPassItem]";
  *(_QWORD *)(v13 + 24) = 27;
  *(_OWORD *)(v13 + 32) = 0u;
  *(_OWORD *)(v13 + 48) = 0u;
  *(_OWORD *)(v13 + 64) = 0u;
  *(_OWORD *)(v13 + 80) = 0u;
  *(_OWORD *)(v13 + 96) = 0u;
  *(_OWORD *)(v13 + 112) = 0u;
  *(_OWORD *)(v13 + 128) = 0u;
  *(_DWORD *)(v13 + 144) = 1065353216;
  *(_OWORD *)(v13 + 152) = 0u;
  *(_OWORD *)(v13 + 168) = 0u;
  *(_QWORD *)(v13 + 184) = 0;
  *(_DWORD *)(v13 + 192) = 1065353216;
  *(_OWORD *)(v13 + 200) = 0u;
  *(_OWORD *)(v13 + 216) = 0u;
  *(_QWORD *)(v13 + 232) = 0;
  *(_DWORD *)(v13 + 240) = 1065353216;
  *(_QWORD *)v13 = &off_1E42722B8;
  *(_QWORD *)(v13 + 8) = 0xB1EC8A230021F56BLL;
  *(_QWORD *)(v13 + 248) = a2;
  v14 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v4, 0xB1EC8A230021F56BLL, &v38);
  v15 = v14[3];
  v14[3] = v13;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v34 = (uint64_t *)0xB1EC8A230021F56BLL;
  v35 = (uint64_t)"md::ls::DepthPeeledPassItem]";
  v36 = 27;
  gdc::Registry::_registerStorageDataSignals(a2, 0xB1EC8A230021F56BLL, (uint64_t)&v34, (uint64_t *)(v13 + 104));
LABEL_24:
  v37 = v3;
  v16 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v13 + 32), (uint64_t)&v37);
  if ((v17 & 1) != 0)
  {
    v22 = *(_BYTE **)(v13 + 88);
    v21 = *(_QWORD *)(v13 + 96);
    if ((unint64_t)v22 >= v21)
    {
      v24 = *(char **)(v13 + 80);
      v25 = v22 - v24;
      v26 = v22 - v24 + 1;
      if (v26 < 0)
        goto LABEL_52;
      v27 = v21 - (_QWORD)v24;
      if (2 * v27 > v26)
        v26 = 2 * v27;
      if (v27 >= 0x3FFFFFFFFFFFFFFFLL)
        v28 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v28 = v26;
      if (v28)
        v29 = (char *)operator new(v28);
      else
        v29 = 0;
      v30 = &v29[v28];
      v23 = (uint64_t)&v29[v25 + 1];
      v31 = (char *)(v24 - v22);
      if (v24 == v22)
        v31 = 0;
      *(_QWORD *)(v13 + 80) = &v29[v25 + (_QWORD)v31];
      *(_QWORD *)(v13 + 88) = v23;
      *(_QWORD *)(v13 + 96) = v30;
      if (v24)
        operator delete(v24);
    }
    else
    {
      v23 = (uint64_t)(v22 + 1);
    }
    *(_QWORD *)(v13 + 88) = v23;
    v18 = *(_QWORD *)(v13 + 248);
  }
  else
  {
    v18 = *(_QWORD *)(v13 + 248);
    if (*(_QWORD *)(v13 + 80) + (((uint64_t)v16 - *(_QWORD *)(v13 + 56)) >> 3) != *(_QWORD *)(v13 + 88))
    {
      v19 = *(_QWORD **)(v13 + 128);
      if (v19)
      {
        while (1)
        {
          v34 = &v37;
          v35 = 1;
          v38 = v18;
          v20 = v19[6];
          if (!v20)
            break;
          (*(void (**)(uint64_t, unint64_t *, uint64_t **))(*(_QWORD *)v20 + 48))(v20, &v38, &v34);
          v19 = (_QWORD *)*v19;
          if (!v19)
            return;
        }
LABEL_51:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_52:
        abort();
      }
      return;
    }
  }
  v32 = *(_QWORD **)(v13 + 176);
  if (v32)
  {
    while (1)
    {
      v34 = &v37;
      v35 = 1;
      v38 = v18;
      v33 = v32[6];
      if (!v33)
        break;
      (*(void (**)(uint64_t, unint64_t *, uint64_t **))(*(_QWORD *)v33 + 48))(v33, &v38, &v34);
      v32 = (_QWORD *)*v32;
      if (!v32)
        return;
    }
    goto LABEL_51;
  }
}

void sub_19FE8D7B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::DepthPeeledPassItem>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::DepthPeeledPassItem>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::DepthPeeledPassItem>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::DepthPeeledPassItem>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UnflattenedPassItem>(gdc::Entity,md::ls::UnflattenedPassItem &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UnflattenedPassItem>(gdc::Entity,md::ls::UnflattenedPassItem &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427EEE0;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UnflattenedPassItem>(gdc::Entity,md::ls::UnflattenedPassItem &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427EEE0;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UnflattenedPassItem>(gdc::Entity,md::ls::UnflattenedPassItem &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  int8x8_t v5;
  uint8x8_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  size_t v28;
  char *v29;
  char *v30;
  char *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v3 = *(_QWORD *)(a1 + 12);
  v38 = 0x525987C8040ACB5FLL;
  v4 = (uint64_t *)(a2 + 120);
  v5 = *(int8x8_t *)(a2 + 128);
  if (v5)
  {
    v6 = (uint8x8_t)vcnt_s8(v5);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      v7 = 0x525987C8040ACB5FLL;
      if (*(_QWORD *)&v5 <= 0x525987C8040ACB5FuLL)
        v7 = 0x525987C8040ACB5FuLL % *(_QWORD *)&v5;
    }
    else
    {
      v7 = (*(_QWORD *)&v5 - 1) & 0x525987C8040ACB5FLL;
    }
    v8 = *(_QWORD **)(*v4 + 8 * v7);
    if (v8)
    {
      v9 = (_QWORD *)*v8;
      if (v9)
      {
        if (v6.u32[0] < 2uLL)
        {
          v10 = *(_QWORD *)&v5 - 1;
          while (1)
          {
            v12 = v9[1];
            if (v12 == 0x525987C8040ACB5FLL)
            {
              if (v9[2] == 0x525987C8040ACB5FLL)
                goto LABEL_50;
            }
            else if ((v12 & v10) != v7)
            {
              goto LABEL_21;
            }
            v9 = (_QWORD *)*v9;
            if (!v9)
              goto LABEL_21;
          }
        }
        do
        {
          v11 = v9[1];
          if (v11 == 0x525987C8040ACB5FLL)
          {
            if (v9[2] == 0x525987C8040ACB5FLL)
            {
LABEL_50:
              v13 = v9[3];
              goto LABEL_24;
            }
          }
          else
          {
            if (v11 >= *(_QWORD *)&v5)
              v11 %= *(_QWORD *)&v5;
            if (v11 != v7)
              break;
          }
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
    }
  }
LABEL_21:
  v13 = operator new();
  *(_QWORD *)(v13 + 16) = "md::ls::UnflattenedPassItem]";
  *(_QWORD *)(v13 + 24) = 27;
  *(_OWORD *)(v13 + 32) = 0u;
  *(_OWORD *)(v13 + 48) = 0u;
  *(_OWORD *)(v13 + 64) = 0u;
  *(_OWORD *)(v13 + 80) = 0u;
  *(_OWORD *)(v13 + 96) = 0u;
  *(_OWORD *)(v13 + 112) = 0u;
  *(_OWORD *)(v13 + 128) = 0u;
  *(_DWORD *)(v13 + 144) = 1065353216;
  *(_OWORD *)(v13 + 152) = 0u;
  *(_OWORD *)(v13 + 168) = 0u;
  *(_QWORD *)(v13 + 184) = 0;
  *(_DWORD *)(v13 + 192) = 1065353216;
  *(_OWORD *)(v13 + 200) = 0u;
  *(_OWORD *)(v13 + 216) = 0u;
  *(_QWORD *)(v13 + 232) = 0;
  *(_DWORD *)(v13 + 240) = 1065353216;
  *(_QWORD *)v13 = &off_1E4272438;
  *(_QWORD *)(v13 + 8) = 0x525987C8040ACB5FLL;
  *(_QWORD *)(v13 + 248) = a2;
  v14 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v4, 0x525987C8040ACB5FuLL, &v38);
  v15 = v14[3];
  v14[3] = v13;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v34 = 0x525987C8040ACB5FLL;
  v35 = (uint64_t)"md::ls::UnflattenedPassItem]";
  v36 = 27;
  gdc::Registry::_registerStorageDataSignals(a2, 0x525987C8040ACB5FLL, (uint64_t)&v34, (uint64_t *)(v13 + 104));
LABEL_24:
  v37 = v3;
  v16 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v13 + 32), (uint64_t)&v37);
  if ((v17 & 1) != 0)
  {
    v22 = *(_BYTE **)(v13 + 88);
    v21 = *(_QWORD *)(v13 + 96);
    if ((unint64_t)v22 >= v21)
    {
      v24 = *(char **)(v13 + 80);
      v25 = v22 - v24;
      v26 = v22 - v24 + 1;
      if (v26 < 0)
        goto LABEL_52;
      v27 = v21 - (_QWORD)v24;
      if (2 * v27 > v26)
        v26 = 2 * v27;
      if (v27 >= 0x3FFFFFFFFFFFFFFFLL)
        v28 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v28 = v26;
      if (v28)
        v29 = (char *)operator new(v28);
      else
        v29 = 0;
      v30 = &v29[v28];
      v23 = (uint64_t)&v29[v25 + 1];
      v31 = (char *)(v24 - v22);
      if (v24 == v22)
        v31 = 0;
      *(_QWORD *)(v13 + 80) = &v29[v25 + (_QWORD)v31];
      *(_QWORD *)(v13 + 88) = v23;
      *(_QWORD *)(v13 + 96) = v30;
      if (v24)
        operator delete(v24);
    }
    else
    {
      v23 = (uint64_t)(v22 + 1);
    }
    *(_QWORD *)(v13 + 88) = v23;
    v18 = *(_QWORD *)(v13 + 248);
  }
  else
  {
    v18 = *(_QWORD *)(v13 + 248);
    if (*(_QWORD *)(v13 + 80) + (((uint64_t)v16 - *(_QWORD *)(v13 + 56)) >> 3) != *(_QWORD *)(v13 + 88))
    {
      v19 = *(_QWORD **)(v13 + 128);
      if (v19)
      {
        while (1)
        {
          v34 = (uint64_t)&v37;
          v35 = 1;
          v38 = v18;
          v20 = v19[6];
          if (!v20)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v20 + 48))(v20, &v38, &v34);
          v19 = (_QWORD *)*v19;
          if (!v19)
            return;
        }
LABEL_51:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_52:
        abort();
      }
      return;
    }
  }
  v32 = *(_QWORD **)(v13 + 176);
  if (v32)
  {
    while (1)
    {
      v34 = (uint64_t)&v37;
      v35 = 1;
      v38 = v18;
      v33 = v32[6];
      if (!v33)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v33 + 48))(v33, &v38, &v34);
      v32 = (_QWORD *)*v32;
      if (!v32)
        return;
    }
    goto LABEL_51;
  }
}

void sub_19FE8DCF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::UnflattenedPassItem>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::UnflattenedPassItem>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::UnflattenedPassItem>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::UnflattenedPassItem>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IntendedStandardPassSceneDepth>(gdc::Entity,md::ls::IntendedStandardPassSceneDepth &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IntendedStandardPassSceneDepth>(gdc::Entity,md::ls::IntendedStandardPassSceneDepth &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4281760;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IntendedStandardPassSceneDepth>(gdc::Entity,md::ls::IntendedStandardPassSceneDepth &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E4281760;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IntendedStandardPassSceneDepth>(gdc::Entity,md::ls::IntendedStandardPassSceneDepth &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::IntendedStandardPassSceneDepth>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::DepthPrePassItem>(gdc::Entity,md::ls::DepthPrePassItem &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::DepthPrePassItem>(gdc::Entity,md::ls::DepthPrePassItem &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427E358;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::DepthPrePassItem>(gdc::Entity,md::ls::DepthPrePassItem &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427E358;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::DepthPrePassItem>(gdc::Entity,md::ls::DepthPrePassItem &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  int8x8_t v5;
  uint8x8_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  size_t v28;
  char *v29;
  char *v30;
  char *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v3 = *(_QWORD *)(a1 + 12);
  v38 = 0x1B35410F914DF9B5;
  v4 = (uint64_t *)(a2 + 120);
  v5 = *(int8x8_t *)(a2 + 128);
  if (v5)
  {
    v6 = (uint8x8_t)vcnt_s8(v5);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      v7 = 0x1B35410F914DF9B5;
      if (*(_QWORD *)&v5 <= 0x1B35410F914DF9B5uLL)
        v7 = 0x1B35410F914DF9B5uLL % *(_QWORD *)&v5;
    }
    else
    {
      v7 = (*(_QWORD *)&v5 - 1) & 0x1B35410F914DF9B5;
    }
    v8 = *(_QWORD **)(*v4 + 8 * v7);
    if (v8)
    {
      v9 = (_QWORD *)*v8;
      if (v9)
      {
        if (v6.u32[0] < 2uLL)
        {
          v10 = *(_QWORD *)&v5 - 1;
          while (1)
          {
            v12 = v9[1];
            if (v12 == 0x1B35410F914DF9B5)
            {
              if (v9[2] == 0x1B35410F914DF9B5)
                goto LABEL_50;
            }
            else if ((v12 & v10) != v7)
            {
              goto LABEL_21;
            }
            v9 = (_QWORD *)*v9;
            if (!v9)
              goto LABEL_21;
          }
        }
        do
        {
          v11 = v9[1];
          if (v11 == 0x1B35410F914DF9B5)
          {
            if (v9[2] == 0x1B35410F914DF9B5)
            {
LABEL_50:
              v13 = v9[3];
              goto LABEL_24;
            }
          }
          else
          {
            if (v11 >= *(_QWORD *)&v5)
              v11 %= *(_QWORD *)&v5;
            if (v11 != v7)
              break;
          }
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
    }
  }
LABEL_21:
  v13 = operator new();
  *(_QWORD *)(v13 + 16) = "md::ls::DepthPrePassItem]";
  *(_QWORD *)(v13 + 24) = 24;
  *(_OWORD *)(v13 + 32) = 0u;
  *(_OWORD *)(v13 + 48) = 0u;
  *(_OWORD *)(v13 + 64) = 0u;
  *(_OWORD *)(v13 + 80) = 0u;
  *(_OWORD *)(v13 + 96) = 0u;
  *(_OWORD *)(v13 + 112) = 0u;
  *(_OWORD *)(v13 + 128) = 0u;
  *(_DWORD *)(v13 + 144) = 1065353216;
  *(_OWORD *)(v13 + 152) = 0u;
  *(_OWORD *)(v13 + 168) = 0u;
  *(_QWORD *)(v13 + 184) = 0;
  *(_DWORD *)(v13 + 192) = 1065353216;
  *(_OWORD *)(v13 + 200) = 0u;
  *(_OWORD *)(v13 + 216) = 0u;
  *(_QWORD *)(v13 + 232) = 0;
  *(_DWORD *)(v13 + 240) = 1065353216;
  *(_QWORD *)v13 = &off_1E4271B08;
  *(_QWORD *)(v13 + 8) = 0x1B35410F914DF9B5;
  *(_QWORD *)(v13 + 248) = a2;
  v14 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v4, 0x1B35410F914DF9B5uLL, &v38);
  v15 = v14[3];
  v14[3] = v13;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v34 = 0x1B35410F914DF9B5;
  v35 = (uint64_t)"md::ls::DepthPrePassItem]";
  v36 = 24;
  gdc::Registry::_registerStorageDataSignals(a2, 0x1B35410F914DF9B5, (uint64_t)&v34, (uint64_t *)(v13 + 104));
LABEL_24:
  v37 = v3;
  v16 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v13 + 32), (uint64_t)&v37);
  if ((v17 & 1) != 0)
  {
    v22 = *(_BYTE **)(v13 + 88);
    v21 = *(_QWORD *)(v13 + 96);
    if ((unint64_t)v22 >= v21)
    {
      v24 = *(char **)(v13 + 80);
      v25 = v22 - v24;
      v26 = v22 - v24 + 1;
      if (v26 < 0)
        goto LABEL_52;
      v27 = v21 - (_QWORD)v24;
      if (2 * v27 > v26)
        v26 = 2 * v27;
      if (v27 >= 0x3FFFFFFFFFFFFFFFLL)
        v28 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v28 = v26;
      if (v28)
        v29 = (char *)operator new(v28);
      else
        v29 = 0;
      v30 = &v29[v28];
      v23 = (uint64_t)&v29[v25 + 1];
      v31 = (char *)(v24 - v22);
      if (v24 == v22)
        v31 = 0;
      *(_QWORD *)(v13 + 80) = &v29[v25 + (_QWORD)v31];
      *(_QWORD *)(v13 + 88) = v23;
      *(_QWORD *)(v13 + 96) = v30;
      if (v24)
        operator delete(v24);
    }
    else
    {
      v23 = (uint64_t)(v22 + 1);
    }
    *(_QWORD *)(v13 + 88) = v23;
    v18 = *(_QWORD *)(v13 + 248);
  }
  else
  {
    v18 = *(_QWORD *)(v13 + 248);
    if (*(_QWORD *)(v13 + 80) + (((uint64_t)v16 - *(_QWORD *)(v13 + 56)) >> 3) != *(_QWORD *)(v13 + 88))
    {
      v19 = *(_QWORD **)(v13 + 128);
      if (v19)
      {
        while (1)
        {
          v34 = (uint64_t)&v37;
          v35 = 1;
          v38 = v18;
          v20 = v19[6];
          if (!v20)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v20 + 48))(v20, &v38, &v34);
          v19 = (_QWORD *)*v19;
          if (!v19)
            return;
        }
LABEL_51:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_52:
        abort();
      }
      return;
    }
  }
  v32 = *(_QWORD **)(v13 + 176);
  if (v32)
  {
    while (1)
    {
      v34 = (uint64_t)&v37;
      v35 = 1;
      v38 = v18;
      v33 = v32[6];
      if (!v33)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v33 + 48))(v33, &v38, &v34);
      v32 = (_QWORD *)*v32;
      if (!v32)
        return;
    }
    goto LABEL_51;
  }
}

void sub_19FE8E43C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::DepthPrePassItem>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::DepthPrePassItem>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::DepthPrePassItem>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::DepthPrePassItem>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FinishedProcessingDepthPrePass>(gdc::Entity,md::ls::FinishedProcessingDepthPrePass &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FinishedProcessingDepthPrePass>(gdc::Entity,md::ls::FinishedProcessingDepthPrePass &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42816D0;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FinishedProcessingDepthPrePass>(gdc::Entity,md::ls::FinishedProcessingDepthPrePass &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E42816D0;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FinishedProcessingDepthPrePass>(gdc::Entity,md::ls::FinishedProcessingDepthPrePass &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::FinishedProcessingDepthPrePass>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IntendedStandardPassShadow>(gdc::Entity,md::ls::IntendedStandardPassShadow &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IntendedStandardPassShadow>(gdc::Entity,md::ls::IntendedStandardPassShadow &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42804D0;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IntendedStandardPassShadow>(gdc::Entity,md::ls::IntendedStandardPassShadow &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E42804D0;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IntendedStandardPassShadow>(gdc::Entity,md::ls::IntendedStandardPassShadow &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::IntendedStandardPassShadow>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ShadowPassItem>(gdc::Entity,md::ls::ShadowPassItem &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ShadowPassItem>(gdc::Entity,md::ls::ShadowPassItem &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427DFF8;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ShadowPassItem>(gdc::Entity,md::ls::ShadowPassItem &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427DFF8;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ShadowPassItem>(gdc::Entity,md::ls::ShadowPassItem &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  int8x8_t v5;
  uint8x8_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  size_t v28;
  char *v29;
  char *v30;
  char *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v3 = *(_QWORD *)(a1 + 12);
  v38 = 0x9E1F385137C59FBLL;
  v4 = (uint64_t *)(a2 + 120);
  v5 = *(int8x8_t *)(a2 + 128);
  if (v5)
  {
    v6 = (uint8x8_t)vcnt_s8(v5);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      v7 = 0x9E1F385137C59FBLL;
      if (*(_QWORD *)&v5 <= 0x9E1F385137C59FBuLL)
        v7 = 0x9E1F385137C59FBuLL % *(_QWORD *)&v5;
    }
    else
    {
      v7 = (*(_QWORD *)&v5 - 1) & 0x9E1F385137C59FBLL;
    }
    v8 = *(_QWORD **)(*v4 + 8 * v7);
    if (v8)
    {
      v9 = (_QWORD *)*v8;
      if (v9)
      {
        if (v6.u32[0] < 2uLL)
        {
          v10 = *(_QWORD *)&v5 - 1;
          while (1)
          {
            v12 = v9[1];
            if (v12 == 0x9E1F385137C59FBLL)
            {
              if (v9[2] == 0x9E1F385137C59FBLL)
                goto LABEL_50;
            }
            else if ((v12 & v10) != v7)
            {
              goto LABEL_21;
            }
            v9 = (_QWORD *)*v9;
            if (!v9)
              goto LABEL_21;
          }
        }
        do
        {
          v11 = v9[1];
          if (v11 == 0x9E1F385137C59FBLL)
          {
            if (v9[2] == 0x9E1F385137C59FBLL)
            {
LABEL_50:
              v13 = v9[3];
              goto LABEL_24;
            }
          }
          else
          {
            if (v11 >= *(_QWORD *)&v5)
              v11 %= *(_QWORD *)&v5;
            if (v11 != v7)
              break;
          }
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
    }
  }
LABEL_21:
  v13 = operator new();
  *(_QWORD *)(v13 + 16) = "md::ls::ShadowPassItem]";
  *(_QWORD *)(v13 + 24) = 22;
  *(_OWORD *)(v13 + 32) = 0u;
  *(_OWORD *)(v13 + 48) = 0u;
  *(_OWORD *)(v13 + 64) = 0u;
  *(_OWORD *)(v13 + 80) = 0u;
  *(_OWORD *)(v13 + 96) = 0u;
  *(_OWORD *)(v13 + 112) = 0u;
  *(_OWORD *)(v13 + 128) = 0u;
  *(_DWORD *)(v13 + 144) = 1065353216;
  *(_OWORD *)(v13 + 152) = 0u;
  *(_OWORD *)(v13 + 168) = 0u;
  *(_QWORD *)(v13 + 184) = 0;
  *(_DWORD *)(v13 + 192) = 1065353216;
  *(_OWORD *)(v13 + 200) = 0u;
  *(_OWORD *)(v13 + 216) = 0u;
  *(_QWORD *)(v13 + 232) = 0;
  *(_DWORD *)(v13 + 240) = 1065353216;
  *(_QWORD *)v13 = &off_1E4271838;
  *(_QWORD *)(v13 + 8) = 0x9E1F385137C59FBLL;
  *(_QWORD *)(v13 + 248) = a2;
  v14 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v4, 0x9E1F385137C59FBuLL, &v38);
  v15 = v14[3];
  v14[3] = v13;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v34 = 0x9E1F385137C59FBLL;
  v35 = (uint64_t)"md::ls::ShadowPassItem]";
  v36 = 22;
  gdc::Registry::_registerStorageDataSignals(a2, 0x9E1F385137C59FBLL, (uint64_t)&v34, (uint64_t *)(v13 + 104));
LABEL_24:
  v37 = v3;
  v16 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v13 + 32), (uint64_t)&v37);
  if ((v17 & 1) != 0)
  {
    v22 = *(_BYTE **)(v13 + 88);
    v21 = *(_QWORD *)(v13 + 96);
    if ((unint64_t)v22 >= v21)
    {
      v24 = *(char **)(v13 + 80);
      v25 = v22 - v24;
      v26 = v22 - v24 + 1;
      if (v26 < 0)
        goto LABEL_52;
      v27 = v21 - (_QWORD)v24;
      if (2 * v27 > v26)
        v26 = 2 * v27;
      if (v27 >= 0x3FFFFFFFFFFFFFFFLL)
        v28 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v28 = v26;
      if (v28)
        v29 = (char *)operator new(v28);
      else
        v29 = 0;
      v30 = &v29[v28];
      v23 = (uint64_t)&v29[v25 + 1];
      v31 = (char *)(v24 - v22);
      if (v24 == v22)
        v31 = 0;
      *(_QWORD *)(v13 + 80) = &v29[v25 + (_QWORD)v31];
      *(_QWORD *)(v13 + 88) = v23;
      *(_QWORD *)(v13 + 96) = v30;
      if (v24)
        operator delete(v24);
    }
    else
    {
      v23 = (uint64_t)(v22 + 1);
    }
    *(_QWORD *)(v13 + 88) = v23;
    v18 = *(_QWORD *)(v13 + 248);
  }
  else
  {
    v18 = *(_QWORD *)(v13 + 248);
    if (*(_QWORD *)(v13 + 80) + (((uint64_t)v16 - *(_QWORD *)(v13 + 56)) >> 3) != *(_QWORD *)(v13 + 88))
    {
      v19 = *(_QWORD **)(v13 + 128);
      if (v19)
      {
        while (1)
        {
          v34 = (uint64_t)&v37;
          v35 = 1;
          v38 = v18;
          v20 = v19[6];
          if (!v20)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v20 + 48))(v20, &v38, &v34);
          v19 = (_QWORD *)*v19;
          if (!v19)
            return;
        }
LABEL_51:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_52:
        abort();
      }
      return;
    }
  }
  v32 = *(_QWORD **)(v13 + 176);
  if (v32)
  {
    while (1)
    {
      v34 = (uint64_t)&v37;
      v35 = 1;
      v38 = v18;
      v33 = v32[6];
      if (!v33)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v33 + 48))(v33, &v38, &v34);
      v32 = (_QWORD *)*v32;
      if (!v32)
        return;
    }
    goto LABEL_51;
  }
}

void sub_19FE8ED7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::ShadowPassItem>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::ShadowPassItem>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::ShadowPassItem>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::ShadowPassItem>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FinishedProcessingShadow>(gdc::Entity,md::ls::FinishedProcessingShadow &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FinishedProcessingShadow>(gdc::Entity,md::ls::FinishedProcessingShadow &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4280170;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FinishedProcessingShadow>(gdc::Entity,md::ls::FinishedProcessingShadow &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E4280170;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FinishedProcessingShadow>(gdc::Entity,md::ls::FinishedProcessingShadow &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::FinishedProcessingShadow>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<md::ita::CreateTileClearRenderItemsForDepthPrePass::operator()(ecs2::Query<md::ls::EnteringView const&,md::ls::SupportsDepthPrePass const&,md::ls::RenderablesCount const&,md::ls::AssociationTileHandle const&,md::ls::BaseMapTileHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TilePrepassShadowConstantDataHandle const&,md::ls::TilePrepassConstantDataHandle const&>)::$_0,std::allocator<md::ita::CreateTileClearRenderItemsForDepthPrePass::operator()(ecs2::Query<md::ls::EnteringView const&,md::ls::SupportsDepthPrePass const&,md::ls::RenderablesCount const&,md::ls::AssociationTileHandle const&,md::ls::BaseMapTileHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TilePrepassShadowConstantDataHandle const&,md::ls::TilePrepassConstantDataHandle const&>)::$_0>,void ()(md::ls::EnteringView const&,md::ls::SupportsDepthPrePass const&,md::ls::RenderablesCount const&,md::ls::AssociationTileHandle const&,md::ls::BaseMapTileHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TilePrepassShadowConstantDataHandle const&,md::ls::TilePrepassConstantDataHandle const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::ita::CreateTileClearRenderItemsForDepthPrePass::operator()(ecs2::Query<md::ls::EnteringView const&,md::ls::SupportsDepthPrePass const&,md::ls::RenderablesCount const&,md::ls::AssociationTileHandle const&,md::ls::BaseMapTileHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TilePrepassShadowConstantDataHandle const&,md::ls::TilePrepassConstantDataHandle const&>)::$_0,std::allocator<md::ita::CreateTileClearRenderItemsForDepthPrePass::operator()(ecs2::Query<md::ls::EnteringView const&,md::ls::SupportsDepthPrePass const&,md::ls::RenderablesCount const&,md::ls::AssociationTileHandle const&,md::ls::BaseMapTileHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TilePrepassShadowConstantDataHandle const&,md::ls::TilePrepassConstantDataHandle const&>)::$_0>,void ()(md::ls::EnteringView const&,md::ls::SupportsDepthPrePass const&,md::ls::RenderablesCount const&,md::ls::AssociationTileHandle const&,md::ls::BaseMapTileHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TilePrepassShadowConstantDataHandle const&,md::ls::TilePrepassConstantDataHandle const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E42F9528;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<md::ita::CreateTileClearRenderItemsForDepthPrePass::operator()(ecs2::Query<md::ls::EnteringView const&,md::ls::SupportsDepthPrePass const&,md::ls::RenderablesCount const&,md::ls::AssociationTileHandle const&,md::ls::BaseMapTileHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TilePrepassShadowConstantDataHandle const&,md::ls::TilePrepassConstantDataHandle const&>)::$_0,std::allocator<md::ita::CreateTileClearRenderItemsForDepthPrePass::operator()(ecs2::Query<md::ls::EnteringView const&,md::ls::SupportsDepthPrePass const&,md::ls::RenderablesCount const&,md::ls::AssociationTileHandle const&,md::ls::BaseMapTileHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TilePrepassShadowConstantDataHandle const&,md::ls::TilePrepassConstantDataHandle const&>)::$_0>,void ()(md::ls::EnteringView const&,md::ls::SupportsDepthPrePass const&,md::ls::RenderablesCount const&,md::ls::AssociationTileHandle const&,md::ls::BaseMapTileHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TilePrepassShadowConstantDataHandle const&,md::ls::TilePrepassConstantDataHandle const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42F9528;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t (***std::__function::__func<md::ita::CreateTileClearRenderItemsForDepthPrePass::operator()(ecs2::Query<md::ls::EnteringView const&,md::ls::SupportsDepthPrePass const&,md::ls::RenderablesCount const&,md::ls::AssociationTileHandle const&,md::ls::BaseMapTileHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TilePrepassShadowConstantDataHandle const&,md::ls::TilePrepassConstantDataHandle const&>)::$_0,std::allocator<md::ita::CreateTileClearRenderItemsForDepthPrePass::operator()(ecs2::Query<md::ls::EnteringView const&,md::ls::SupportsDepthPrePass const&,md::ls::RenderablesCount const&,md::ls::AssociationTileHandle const&,md::ls::BaseMapTileHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TilePrepassShadowConstantDataHandle const&,md::ls::TilePrepassConstantDataHandle const&>)::$_0>,void ()(md::ls::EnteringView const&,md::ls::SupportsDepthPrePass const&,md::ls::RenderablesCount const&,md::ls::AssociationTileHandle const&,md::ls::BaseMapTileHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TilePrepassShadowConstantDataHandle const&,md::ls::TilePrepassConstantDataHandle const&)>::operator()(uint64_t (***result)(), _BYTE *a2, uint64_t a3, _WORD *a4, unint64_t *a5, uint64_t a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10, uint64_t *a11))()
{
  BOOL v11;
  uint64_t **v15;
  uint64_t (**v16)();
  unint64_t v17;
  _QWORD *AssociationItemStorage;
  _QWORD *v19;
  unint64_t v20;
  unint64_t *v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  unint64_t *v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  unint64_t *v34;
  uint64_t v35;
  __int128 v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)();
  _QWORD *v43;
  uint64_t (***v44)();
  uint64_t v45;
  uint64_t (*v46)();
  _QWORD *v47;
  uint64_t (***v48)();
  uint64_t v49;
  uint64_t (*v50)();
  uint64_t (***v51)();
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)();
  uint64_t (***v55)();
  uint64_t v56;
  uint64_t v57;
  uint64_t (*v58)();
  uint64_t (***v59)();
  uint64_t v60;
  uint64_t v61;
  uint64_t (*v62)();
  uint64_t (***v63)();
  uint64_t v64;
  uint64_t (*v65)();
  unint64_t v66;
  uint64_t (***v67)();
  uint64_t v68;
  uint64_t (*v69)();
  _QWORD *v70;
  uint64_t (***v71)();
  uint64_t v72;
  uint64_t (*v73)();
  uint64_t (***v74)();
  uint64_t v75;
  uint64_t v76;
  uint64_t (*v77)();
  uint64_t (***v78)();
  uint64_t v79;
  uint64_t v80;
  uint64_t (*v81)();
  uint64_t (***v82)();
  uint64_t v83;
  uint64_t (*v84)();
  _BYTE *v85;
  uint64_t (***v86)();
  uint64_t v87;
  uint64_t (*v88)();
  uint64_t (***v89)();
  uint64_t v90;
  uint64_t v91;
  uint64_t (*v92)();
  uint64_t (***v93)();
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t (*v98)();
  _QWORD *v99;
  uint64_t (***v100)();
  uint64_t v101;
  uint64_t (*v102)();
  uint64_t (***v103)();
  uint64_t v104;
  uint64_t (*v105)();
  uint64_t (***v106)();
  uint64_t v107;
  uint64_t (*v108)();
  uint64_t (***v109)();
  uint64_t v110;
  uint64_t (*v111)();
  char *v112;
  uint64_t (***v113)();
  uint64_t v114;
  uint64_t v115;
  uint64_t (*v116)();
  uint64_t (***v117)();
  uint64_t v118;
  uint64_t *v119;
  _QWORD *v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t (*v123)();
  uint64_t (***v124)();
  uint64_t v125;
  uint64_t (*v126)();
  uint64_t (***v127)();
  uint64_t v128;
  uint64_t (*v129)();
  uint64_t (***v130)();
  uint64_t v131;
  uint64_t (*v132)();
  uint64_t v133;
  uint64_t **v134;
  unint64_t v135;
  char v136;
  uint64_t (**v137)();
  __int128 v138;
  uint64_t (***v139)();
  _BYTE v140[24];
  _BYTE *v141;
  int v142;
  uint64_t v143;

  v143 = *MEMORY[0x1E0C80C00];
  if (*a4)
    v11 = *a2 == 0;
  else
    v11 = 1;
  if (v11)
    return result;
  v15 = (uint64_t **)result;
  v16 = result[1];
  v17 = gdc::Registry::create(*((gdc::Registry **)*v16 + 1));
  AssociationItemStorage = (_QWORD *)md::VKMRenderResourcesStore::getAssociationItemStorage(*v15[2], *a5, 1);
  v19 = AssociationItemStorage;
  v21 = (unint64_t *)AssociationItemStorage[2];
  v20 = AssociationItemStorage[3];
  v134 = v15;
  if ((unint64_t)v21 >= v20)
  {
    v23 = (char *)AssociationItemStorage[1];
    v24 = ((char *)v21 - v23) >> 3;
    v25 = v24 + 1;
    if ((unint64_t)(v24 + 1) >> 61)
      abort();
    v26 = v20 - (_QWORD)v23;
    if (v26 >> 2 > v25)
      v25 = v26 >> 2;
    if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
      v27 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v27 = v25;
    if (v27)
    {
      if (v27 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v28 = (char *)operator new(8 * v27);
    }
    else
    {
      v28 = 0;
    }
    v29 = (unint64_t *)&v28[8 * v24];
    v30 = &v28[8 * v27];
    *v29 = v17;
    v22 = v29 + 1;
    if (v21 != (unint64_t *)v23)
    {
      v31 = (char *)v21 - v23 - 8;
      if (v31 < 0x58)
        goto LABEL_204;
      if ((unint64_t)(v23 - v28) < 0x20)
        goto LABEL_204;
      v32 = (v31 >> 3) + 1;
      v33 = &v28[8 * v24 - 16];
      v34 = v21 - 2;
      v35 = v32 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v36 = *(_OWORD *)v34;
        *((_OWORD *)v33 - 1) = *((_OWORD *)v34 - 1);
        *(_OWORD *)v33 = v36;
        v33 -= 32;
        v34 -= 4;
        v35 -= 4;
      }
      while (v35);
      v29 -= v32 & 0x3FFFFFFFFFFFFFFCLL;
      v21 -= v32 & 0x3FFFFFFFFFFFFFFCLL;
      if (v32 != (v32 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_204:
        do
        {
          v37 = *--v21;
          *--v29 = v37;
        }
        while (v21 != (unint64_t *)v23);
      }
      v21 = (unint64_t *)v19[1];
    }
    v19[1] = v29;
    v19[2] = v22;
    v19[3] = v30;
    if (v21)
      operator delete(v21);
  }
  else
  {
    *v21 = v17;
    v22 = v21 + 1;
  }
  v19[2] = v22;
  v135 = *a5;
  v38 = v135;
  v39 = md::VKMRenderResourcesStore::createRenderItem(*v134[2], &v135);
  v41 = v40;
  v42 = *v16;
  v43 = operator new(0x20uLL);
  *v43 = &off_1E427E8F8;
  v43[1] = v38;
  v43[2] = 0;
  v43[3] = v17;
  v141 = v43;
  v139 = 0;
  v142 = 0;
  ecs2::Runtime::queueCommand(v42, (uint64_t)v140);
  if (v142 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v142])(&v136, v140);
  v142 = -1;
  v44 = v139;
  if (v139 == &v137)
  {
    v45 = 4;
    v44 = &v137;
  }
  else
  {
    if (!v139)
      goto LABEL_36;
    v45 = 5;
  }
  (*v44)[v45]();
LABEL_36:
  v46 = *v16;
  v47 = operator new(0x28uLL);
  *v47 = &off_1E427DAA0;
  v47[1] = v39;
  v47[2] = v41;
  v47[3] = 23;
  v47[4] = v17;
  v141 = v47;
  v139 = 0;
  v142 = 0;
  ecs2::Runtime::queueCommand(v46, (uint64_t)v140);
  if (v142 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v142])(&v136, v140);
  v142 = -1;
  v48 = v139;
  if (v139 == &v137)
  {
    v49 = 4;
    v48 = &v137;
  }
  else
  {
    if (!v139)
      goto LABEL_43;
    v49 = 5;
  }
  (*v48)[v49]();
LABEL_43:
  v50 = *v16;
  v137 = &off_1E427E550;
  *(_QWORD *)&v138 = 0;
  *((_QWORD *)&v138 + 1) = v17;
  v139 = &v137;
  v141 = v140;
  *(_QWORD *)v140 = &off_1E427E550;
  *(_OWORD *)&v140[8] = v138;
  v142 = 0;
  ecs2::Runtime::queueCommand(v50, (uint64_t)v140);
  if (v142 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v142])(&v136, v140);
  v142 = -1;
  v51 = v139;
  if (v139 == &v137)
  {
    v52 = 4;
    v51 = &v137;
  }
  else
  {
    if (!v139)
      goto LABEL_50;
    v52 = 5;
  }
  (*v51)[v52]();
LABEL_50:
  v53 = *a7;
  v54 = *v16;
  v137 = &off_1E427FA68;
  *(_QWORD *)&v138 = v53;
  *((_QWORD *)&v138 + 1) = v17;
  v139 = &v137;
  v141 = v140;
  *(_QWORD *)v140 = &off_1E427FA68;
  *(_OWORD *)&v140[8] = v138;
  v142 = 0;
  ecs2::Runtime::queueCommand(v54, (uint64_t)v140);
  if (v142 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v142])(&v136, v140);
  v142 = -1;
  v55 = v139;
  if (v139 == &v137)
  {
    v56 = 4;
    v55 = &v137;
  }
  else
  {
    if (!v139)
      goto LABEL_57;
    v56 = 5;
  }
  (*v55)[v56]();
LABEL_57:
  v57 = *a8;
  v58 = *v16;
  v137 = &off_1E4280998;
  *(_QWORD *)&v138 = v57;
  *((_QWORD *)&v138 + 1) = v17;
  v139 = &v137;
  v141 = v140;
  *(_QWORD *)v140 = &off_1E4280998;
  *(_OWORD *)&v140[8] = v138;
  v142 = 0;
  ecs2::Runtime::queueCommand(v58, (uint64_t)v140);
  if (v142 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v142])(&v136, v140);
  v142 = -1;
  v59 = v139;
  if (v139 == &v137)
  {
    v60 = 4;
    v59 = &v137;
  }
  else
  {
    if (!v139)
      goto LABEL_64;
    v60 = 5;
  }
  (*v59)[v60]();
LABEL_64:
  v61 = *a9;
  v62 = *v16;
  v137 = &off_1E427E5E0;
  *(_QWORD *)&v138 = v61;
  *((_QWORD *)&v138 + 1) = v17;
  v139 = &v137;
  v141 = v140;
  *(_QWORD *)v140 = &off_1E427E5E0;
  *(_OWORD *)&v140[8] = v138;
  v142 = 0;
  ecs2::Runtime::queueCommand(v62, (uint64_t)v140);
  if (v142 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v142])(&v136, v140);
  v142 = -1;
  v63 = v139;
  if (v139 == &v137)
  {
    v64 = 4;
    v63 = &v137;
  }
  else
  {
    if (!v139)
      goto LABEL_71;
    v64 = 5;
  }
  (*v63)[v64]();
LABEL_71:
  v65 = *v16;
  v66 = v17 << 32;
  v137 = &off_1E4280320;
  *(_QWORD *)&v138 = v17 << 32;
  DWORD2(v138) = HIDWORD(v17);
  v139 = &v137;
  *(_QWORD *)v140 = &off_1E4280320;
  v141 = v140;
  *(_QWORD *)&v140[8] = v17 << 32;
  *(_DWORD *)&v140[16] = HIDWORD(v17);
  v142 = 0;
  ecs2::Runtime::queueCommand(v65, (uint64_t)v140);
  if (v142 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v142])(&v136, v140);
  v142 = -1;
  v67 = v139;
  if (v139 == &v137)
  {
    v68 = 4;
    v67 = &v137;
  }
  else
  {
    if (!v139)
      goto LABEL_78;
    v68 = 5;
  }
  (*v67)[v68]();
LABEL_78:
  v69 = *v16;
  v70 = operator new(0x28uLL);
  *v70 = &off_1E427E508;
  v70[1] = 0xF23B9817A178C71CLL;
  v70[2] = "md::ls::DepthPrePassTileClearItem]";
  v70[3] = 33;
  v70[4] = v17;
  v141 = v70;
  v139 = 0;
  v142 = 0;
  ecs2::Runtime::queueCommand(v69, (uint64_t)v140);
  if (v142 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v142])(&v136, v140);
  v142 = -1;
  v71 = v139;
  if (v139 == &v137)
  {
    v72 = 4;
    v71 = &v137;
  }
  else
  {
    if (!v139)
      goto LABEL_85;
    v72 = 5;
  }
  (*v71)[v72]();
LABEL_85:
  v73 = *v16;
  v137 = &off_1E427EF70;
  *(_QWORD *)&v138 = 0x100000002;
  *((_QWORD *)&v138 + 1) = v17;
  v139 = &v137;
  v141 = v140;
  *(_QWORD *)v140 = &off_1E427EF70;
  *(_OWORD *)&v140[8] = v138;
  v142 = 0;
  ecs2::Runtime::queueCommand(v73, (uint64_t)v140);
  if (v142 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v142])(&v136, v140);
  v142 = -1;
  v74 = v139;
  if (v139 == &v137)
  {
    v75 = 4;
    v74 = &v137;
  }
  else
  {
    if (!v139)
      goto LABEL_92;
    v75 = 5;
  }
  (*v74)[v75]();
LABEL_92:
  v76 = *a10;
  v77 = *v16;
  v137 = &off_1E4281910;
  *(_QWORD *)&v138 = v76;
  *((_QWORD *)&v138 + 1) = v17;
  v139 = &v137;
  v141 = v140;
  *(_QWORD *)v140 = &off_1E4281910;
  *(_OWORD *)&v140[8] = v138;
  v142 = 0;
  ecs2::Runtime::queueCommand(v77, (uint64_t)v140);
  if (v142 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v142])(&v136, v140);
  v142 = -1;
  v78 = v139;
  if (v139 == &v137)
  {
    v79 = 4;
    v78 = &v137;
  }
  else
  {
    if (!v139)
      goto LABEL_99;
    v79 = 5;
  }
  (*v78)[v79]();
LABEL_99:
  v80 = *a11;
  v81 = *v16;
  v137 = &off_1E42803F8;
  *(_QWORD *)&v138 = v80;
  *((_QWORD *)&v138 + 1) = v17;
  v139 = &v137;
  v141 = v140;
  *(_QWORD *)v140 = &off_1E42803F8;
  *(_OWORD *)&v140[8] = v138;
  v142 = 0;
  ecs2::Runtime::queueCommand(v81, (uint64_t)v140);
  if (v142 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v142])(&v136, v140);
  v142 = -1;
  v82 = v139;
  if (v139 == &v137)
  {
    v83 = 4;
    v82 = &v137;
  }
  else
  {
    if (!v139)
      goto LABEL_106;
    v83 = 5;
  }
  (*v82)[v83]();
LABEL_106:
  v84 = *v16;
  v85 = operator new(0x28uLL);
  *(_QWORD *)v85 = &off_1E427EFB8;
  v85[8] = 0;
  *((_OWORD *)v85 + 1) = xmmword_19FFB3410;
  *((_QWORD *)v85 + 4) = v17;
  v141 = v85;
  v139 = 0;
  v142 = 0;
  ecs2::Runtime::queueCommand(v84, (uint64_t)v140);
  if (v142 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v142])(&v136, v140);
  v142 = -1;
  v86 = v139;
  if (v139 == &v137)
  {
    v87 = 4;
    v86 = &v137;
  }
  else
  {
    if (!v139)
      goto LABEL_113;
    v87 = 5;
  }
  (*v86)[v87]();
LABEL_113:
  v88 = *v16;
  v137 = &off_1E427F798;
  *(_QWORD *)&v138 = v17 << 32;
  DWORD2(v138) = HIDWORD(v17);
  v139 = &v137;
  *(_QWORD *)v140 = &off_1E427F798;
  v141 = v140;
  *(_QWORD *)&v140[8] = v17 << 32;
  *(_DWORD *)&v140[16] = HIDWORD(v17);
  v142 = 0;
  ecs2::Runtime::queueCommand(v88, (uint64_t)v140);
  if (v142 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v142])(&v136, v140);
  v142 = -1;
  v89 = v139;
  if (v139 == &v137)
  {
    v90 = 4;
    v89 = &v137;
  }
  else
  {
    if (!v139)
      goto LABEL_120;
    v90 = 5;
  }
  (*v89)[v90]();
LABEL_120:
  v91 = *v134[3];
  v92 = *v16;
  v137 = &off_1E427DB78;
  *(_QWORD *)&v138 = v91;
  *((_QWORD *)&v138 + 1) = v17;
  v139 = &v137;
  v141 = v140;
  *(_QWORD *)v140 = &off_1E427DB78;
  *(_OWORD *)&v140[8] = v138;
  v142 = 0;
  ecs2::Runtime::queueCommand(v92, (uint64_t)v140);
  if (v142 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v142])(&v136, v140);
  v142 = -1;
  v93 = v139;
  if (v139 == &v137)
  {
    v94 = 4;
    v93 = &v137;
  }
  else
  {
    if (!v139)
      goto LABEL_127;
    v94 = 5;
  }
  (*v93)[v94]();
LABEL_127:
  v95 = *(_QWORD *)(*v134[3] + 96);
  v97 = *(_QWORD *)(v95 + 40);
  v96 = *(_QWORD *)(v95 + 48);
  v98 = *v16;
  v99 = operator new(0x20uLL);
  *v99 = &off_1E427D500;
  v99[1] = 0;
  v99[2] = (unint64_t)(v96 - v97) >> 1;
  v99[3] = v17;
  v141 = v99;
  v139 = 0;
  v142 = 0;
  ecs2::Runtime::queueCommand(v98, (uint64_t)v140);
  if (v142 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v142])(&v136, v140);
  v142 = -1;
  v100 = v139;
  if (v139 == &v137)
  {
    v101 = 4;
    v100 = &v137;
  }
  else
  {
    if (!v139)
      goto LABEL_134;
    v101 = 5;
  }
  (*v100)[v101]();
LABEL_134:
  v102 = *v16;
  v137 = &off_1E427DC08;
  *(_QWORD *)&v138 = 1;
  *((_QWORD *)&v138 + 1) = v17;
  v139 = &v137;
  v141 = v140;
  *(_QWORD *)v140 = &off_1E427DC08;
  *(_OWORD *)&v140[8] = v138;
  v142 = 0;
  ecs2::Runtime::queueCommand(v102, (uint64_t)v140);
  if (v142 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v142])(&v136, v140);
  v142 = -1;
  v103 = v139;
  if (v139 == &v137)
  {
    v104 = 4;
    v103 = &v137;
  }
  else
  {
    if (!v139)
      goto LABEL_141;
    v104 = 5;
  }
  (*v103)[v104]();
LABEL_141:
  v105 = *v16;
  v137 = &off_1E427D5D8;
  *(_QWORD *)&v138 = v17 << 32;
  DWORD2(v138) = HIDWORD(v17);
  v139 = &v137;
  *(_QWORD *)v140 = &off_1E427D5D8;
  v141 = v140;
  *(_QWORD *)&v140[8] = v17 << 32;
  *(_DWORD *)&v140[16] = HIDWORD(v17);
  v142 = 0;
  ecs2::Runtime::queueCommand(v105, (uint64_t)v140);
  if (v142 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v142])(&v136, v140);
  v142 = -1;
  v106 = v139;
  if (v139 == &v137)
  {
    v107 = 4;
    v106 = &v137;
  }
  else
  {
    if (!v139)
      goto LABEL_148;
    v107 = 5;
  }
  (*v106)[v107]();
LABEL_148:
  v108 = *v16;
  v137 = &off_1E427F9D8;
  *(_QWORD *)&v138 = v66 | 6;
  DWORD2(v138) = HIDWORD(v17);
  v139 = &v137;
  *(_QWORD *)v140 = &off_1E427F9D8;
  v141 = v140;
  *(_QWORD *)&v140[8] = v66 | 6;
  *(_DWORD *)&v140[16] = HIDWORD(v17);
  v142 = 0;
  ecs2::Runtime::queueCommand(v108, (uint64_t)v140);
  if (v142 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v142])(&v136, v140);
  v142 = -1;
  v109 = v139;
  if (v139 == &v137)
  {
    v110 = 4;
    v109 = &v137;
  }
  else
  {
    if (!v139)
      goto LABEL_155;
    v110 = 5;
  }
  (*v109)[v110]();
LABEL_155:
  v111 = *v16;
  v112 = (char *)operator new(0x38uLL);
  *((_QWORD *)v112 + 1) = 0;
  *((_QWORD *)v112 + 2) = 0;
  *(_QWORD *)v112 = &off_1E427E9D0;
  v112[24] = 0;
  *(_WORD *)(v112 + 25) = 257;
  *(_DWORD *)(v112 + 27) = 0;
  v112[31] = 2;
  *((_QWORD *)v112 + 4) = 0;
  v112[40] = 0;
  *(_QWORD *)(v112 + 44) = v17;
  v141 = v112;
  v139 = 0;
  v142 = 0;
  ecs2::Runtime::queueCommand(v111, (uint64_t)v140);
  if (v142 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v142])(&v136, v140);
  v142 = -1;
  v113 = v139;
  if (v139 == &v137)
  {
    v114 = 4;
    v113 = &v137;
  }
  else
  {
    if (!v139)
      goto LABEL_162;
    v114 = 5;
  }
  (*v113)[v114]();
LABEL_162:
  v115 = *v134[4];
  v116 = *v16;
  v137 = &off_1E427E598;
  *(_QWORD *)&v138 = v115;
  *((_QWORD *)&v138 + 1) = v17;
  v139 = &v137;
  v141 = v140;
  *(_QWORD *)v140 = &off_1E427E598;
  *(_OWORD *)&v140[8] = v138;
  v142 = 0;
  ecs2::Runtime::queueCommand(v116, (uint64_t)v140);
  if (v142 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v142])(&v136, v140);
  v142 = -1;
  v117 = v139;
  if (v139 == &v137)
  {
    v118 = 4;
    v117 = &v137;
  }
  else
  {
    if (!v139)
      goto LABEL_169;
    v118 = 5;
  }
  (*v117)[v118]();
LABEL_169:
  v119 = v134[2];
  v120 = (_QWORD *)*v119;
  v121 = *(_QWORD *)(*v119 + 48);
  if (!v121)
  {
    v122 = md::DaVinciRenderStateCache::renderState((unsigned __int8 **)(v120[1312] + 2424), 3, 1, 1, 0, 0, 0, 3);
    v120[2] = v122;
    v137 = (uint64_t (**)())v122;
    v121 = geo::packed_array<md::RenderStateStorage,geo::handle<md::RenderStateItem>>::push_back(v120 + 91, &v137);
    *(int64x2_t *)v140 = vdupq_n_s64(1uLL);
    v140[16] = 1;
    std::__hash_table<std::__hash_value_type<geo::handle<md::RenderStateItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::RenderStateItem>,std::__hash_value_type<geo::handle<md::RenderStateItem>,md::Counter>,std::hash<geo::handle<md::RenderStateItem>>,std::equal_to<geo::handle<md::RenderStateItem>>,true>,std::__unordered_map_equal<geo::handle<md::RenderStateItem>,std::__hash_value_type<geo::handle<md::RenderStateItem>,md::Counter>,std::equal_to<geo::handle<md::RenderStateItem>>,std::hash<geo::handle<md::RenderStateItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::RenderStateItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::RenderStateItem>,geo::handle<md::RenderStateItem> const&,md::Counter>((uint64_t)(v120 + 86), v121, v121, (uint64_t)v140);
    v120[6] = v121;
  }
  v123 = *v16;
  v137 = &off_1E4281760;
  *(_QWORD *)&v138 = v17 << 32;
  DWORD2(v138) = HIDWORD(v17);
  v139 = &v137;
  *(_QWORD *)v140 = &off_1E4281760;
  v141 = v140;
  *(_QWORD *)&v140[8] = v17 << 32;
  *(_DWORD *)&v140[16] = HIDWORD(v17);
  v142 = 0;
  ecs2::Runtime::queueCommand(v123, (uint64_t)v140);
  if (v142 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v142])(&v136, v140);
  v142 = -1;
  v124 = v139;
  if (v139 == &v137)
  {
    v125 = 4;
    v124 = &v137;
  }
  else
  {
    if (!v139)
      goto LABEL_178;
    v125 = 5;
  }
  (*v124)[v125]();
LABEL_178:
  v126 = *v16;
  v137 = &off_1E427EAF0;
  *(_QWORD *)&v138 = v17 << 32;
  DWORD2(v138) = HIDWORD(v17);
  v139 = &v137;
  *(_QWORD *)v140 = &off_1E427EAF0;
  v141 = v140;
  *(_QWORD *)&v140[8] = v17 << 32;
  *(_DWORD *)&v140[16] = HIDWORD(v17);
  v142 = 0;
  ecs2::Runtime::queueCommand(v126, (uint64_t)v140);
  if (v142 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v142])(&v136, v140);
  v142 = -1;
  v127 = v139;
  if (v139 == &v137)
  {
    v128 = 4;
    v127 = &v137;
  }
  else
  {
    if (!v139)
      goto LABEL_185;
    v128 = 5;
  }
  (*v127)[v128]();
LABEL_185:
  v129 = *v16;
  v137 = &off_1E4281E68;
  *(_QWORD *)&v138 = v17 << 32;
  DWORD2(v138) = HIDWORD(v17);
  v139 = &v137;
  *(_QWORD *)v140 = &off_1E4281E68;
  v141 = v140;
  *(_QWORD *)&v140[8] = v17 << 32;
  *(_DWORD *)&v140[16] = HIDWORD(v17);
  v142 = 0;
  ecs2::Runtime::queueCommand(v129, (uint64_t)v140);
  if (v142 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v142])(&v136, v140);
  v142 = -1;
  v130 = v139;
  if (v139 == &v137)
  {
    v131 = 4;
    v130 = &v137;
    goto LABEL_191;
  }
  if (v139)
  {
    v131 = 5;
LABEL_191:
    (*v130)[v131]();
  }
  v132 = *v16;
  v137 = &off_1E427D938;
  *(_QWORD *)&v138 = v121;
  *((_QWORD *)&v138 + 1) = v17;
  v139 = &v137;
  v141 = v140;
  *(_QWORD *)v140 = &off_1E427D938;
  *(_OWORD *)&v140[8] = v138;
  v142 = 0;
  ecs2::Runtime::queueCommand(v132, (uint64_t)v140);
  if (v142 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v142])(&v136, v140);
  v142 = -1;
  result = v139;
  if (v139 == &v137)
  {
    v133 = 4;
    result = &v137;
  }
  else
  {
    if (!v139)
      return result;
    v133 = 5;
  }
  return (uint64_t (***)())(*result)[v133]();
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UseIdentityMatrix>(gdc::Entity,md::ls::UseIdentityMatrix &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UseIdentityMatrix>(gdc::Entity,md::ls::UseIdentityMatrix &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427EAF0;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UseIdentityMatrix>(gdc::Entity,md::ls::UseIdentityMatrix &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427EAF0;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UseIdentityMatrix>(gdc::Entity,md::ls::UseIdentityMatrix &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::UseIdentityMatrix>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::DepthPrePassTileClearItem>(gdc::Entity,md::ls::DepthPrePassTileClearItem &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::DepthPrePassTileClearItem>(gdc::Entity,md::ls::DepthPrePassTileClearItem &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4280320;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::DepthPrePassTileClearItem>(gdc::Entity,md::ls::DepthPrePassTileClearItem &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E4280320;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::DepthPrePassTileClearItem>(gdc::Entity,md::ls::DepthPrePassTileClearItem &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  size_t v28;
  char *v29;
  char *v30;
  char *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;

  v3 = *(_QWORD *)(a1 + 12);
  v38 = 0xF23B9817A178C71CLL;
  v4 = (uint64_t *)(a2 + 120);
  v5 = *(int8x8_t *)(a2 + 128);
  if (v5)
  {
    v6 = (uint8x8_t)vcnt_s8(v5);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      v7 = 0xF23B9817A178C71CLL;
      if (*(_QWORD *)&v5 <= 0xF23B9817A178C71CLL)
        v7 = 0xF23B9817A178C71CLL % *(_QWORD *)&v5;
    }
    else
    {
      v7 = (*(_QWORD *)&v5 - 1) & 0xF23B9817A178C71CLL;
    }
    v8 = *(_QWORD **)(*v4 + 8 * v7);
    if (v8)
    {
      v9 = (_QWORD *)*v8;
      if (v9)
      {
        if (v6.u32[0] < 2uLL)
        {
          v10 = *(_QWORD *)&v5 - 1;
          while (1)
          {
            v12 = v9[1];
            if (v12 == 0xF23B9817A178C71CLL)
            {
              if (v9[2] == 0xF23B9817A178C71CLL)
                goto LABEL_50;
            }
            else if ((v12 & v10) != v7)
            {
              goto LABEL_21;
            }
            v9 = (_QWORD *)*v9;
            if (!v9)
              goto LABEL_21;
          }
        }
        do
        {
          v11 = v9[1];
          if (v11 == 0xF23B9817A178C71CLL)
          {
            if (v9[2] == 0xF23B9817A178C71CLL)
            {
LABEL_50:
              v13 = v9[3];
              goto LABEL_24;
            }
          }
          else
          {
            if (v11 >= *(_QWORD *)&v5)
              v11 %= *(_QWORD *)&v5;
            if (v11 != v7)
              break;
          }
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
    }
  }
LABEL_21:
  v13 = operator new();
  *(_QWORD *)(v13 + 16) = "md::ls::DepthPrePassTileClearItem]";
  *(_QWORD *)(v13 + 24) = 33;
  *(_OWORD *)(v13 + 32) = 0u;
  *(_OWORD *)(v13 + 48) = 0u;
  *(_OWORD *)(v13 + 64) = 0u;
  *(_OWORD *)(v13 + 80) = 0u;
  *(_OWORD *)(v13 + 96) = 0u;
  *(_OWORD *)(v13 + 112) = 0u;
  *(_OWORD *)(v13 + 128) = 0u;
  *(_DWORD *)(v13 + 144) = 1065353216;
  *(_OWORD *)(v13 + 152) = 0u;
  *(_OWORD *)(v13 + 168) = 0u;
  *(_QWORD *)(v13 + 184) = 0;
  *(_DWORD *)(v13 + 192) = 1065353216;
  *(_OWORD *)(v13 + 200) = 0u;
  *(_OWORD *)(v13 + 216) = 0u;
  *(_QWORD *)(v13 + 232) = 0;
  *(_DWORD *)(v13 + 240) = 1065353216;
  *(_QWORD *)v13 = &off_1E4273038;
  *(_QWORD *)(v13 + 8) = 0xF23B9817A178C71CLL;
  *(_QWORD *)(v13 + 248) = a2;
  v14 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v4, 0xF23B9817A178C71CLL, &v38);
  v15 = v14[3];
  v14[3] = v13;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v34 = (uint64_t *)0xF23B9817A178C71CLL;
  v35 = (uint64_t)"md::ls::DepthPrePassTileClearItem]";
  v36 = 33;
  gdc::Registry::_registerStorageDataSignals(a2, 0xF23B9817A178C71CLL, (uint64_t)&v34, (uint64_t *)(v13 + 104));
LABEL_24:
  v37 = v3;
  v16 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v13 + 32), (uint64_t)&v37);
  if ((v17 & 1) != 0)
  {
    v22 = *(_BYTE **)(v13 + 88);
    v21 = *(_QWORD *)(v13 + 96);
    if ((unint64_t)v22 >= v21)
    {
      v24 = *(char **)(v13 + 80);
      v25 = v22 - v24;
      v26 = v22 - v24 + 1;
      if (v26 < 0)
        goto LABEL_52;
      v27 = v21 - (_QWORD)v24;
      if (2 * v27 > v26)
        v26 = 2 * v27;
      if (v27 >= 0x3FFFFFFFFFFFFFFFLL)
        v28 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v28 = v26;
      if (v28)
        v29 = (char *)operator new(v28);
      else
        v29 = 0;
      v30 = &v29[v28];
      v23 = (uint64_t)&v29[v25 + 1];
      v31 = (char *)(v24 - v22);
      if (v24 == v22)
        v31 = 0;
      *(_QWORD *)(v13 + 80) = &v29[v25 + (_QWORD)v31];
      *(_QWORD *)(v13 + 88) = v23;
      *(_QWORD *)(v13 + 96) = v30;
      if (v24)
        operator delete(v24);
    }
    else
    {
      v23 = (uint64_t)(v22 + 1);
    }
    *(_QWORD *)(v13 + 88) = v23;
    v18 = *(_QWORD *)(v13 + 248);
  }
  else
  {
    v18 = *(_QWORD *)(v13 + 248);
    if (*(_QWORD *)(v13 + 80) + (((uint64_t)v16 - *(_QWORD *)(v13 + 56)) >> 3) != *(_QWORD *)(v13 + 88))
    {
      v19 = *(_QWORD **)(v13 + 128);
      if (v19)
      {
        while (1)
        {
          v34 = &v37;
          v35 = 1;
          v38 = v18;
          v20 = v19[6];
          if (!v20)
            break;
          (*(void (**)(uint64_t, unint64_t *, uint64_t **))(*(_QWORD *)v20 + 48))(v20, &v38, &v34);
          v19 = (_QWORD *)*v19;
          if (!v19)
            return;
        }
LABEL_51:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_52:
        abort();
      }
      return;
    }
  }
  v32 = *(_QWORD **)(v13 + 176);
  if (v32)
  {
    while (1)
    {
      v34 = &v37;
      v35 = 1;
      v38 = v18;
      v33 = v32[6];
      if (!v33)
        break;
      (*(void (**)(uint64_t, unint64_t *, uint64_t **))(*(_QWORD *)v33 + 48))(v33, &v38, &v34);
      v32 = (_QWORD *)*v32;
      if (!v32)
        return;
    }
    goto LABEL_51;
  }
}

void sub_19FE90780(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::DepthPrePassTileClearItem>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::DepthPrePassTileClearItem>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::DepthPrePassTileClearItem>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::DepthPrePassTileClearItem>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<md::ita::CreateTileClearRenderItemsForShadowPass::operator()(ecs2::Query<md::ls::EnteringView const&,md::ls::SupportsShadows const&,md::ls::AssociationTileHandle const&,md::ls::BaseMapTileHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileShadowConstantDataHandle const&>)::$_0,std::allocator<md::ita::CreateTileClearRenderItemsForShadowPass::operator()(ecs2::Query<md::ls::EnteringView const&,md::ls::SupportsShadows const&,md::ls::AssociationTileHandle const&,md::ls::BaseMapTileHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileShadowConstantDataHandle const&>)::$_0>,void ()(md::ls::EnteringView const&,md::ls::SupportsShadows const&,md::ls::AssociationTileHandle const&,md::ls::BaseMapTileHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileShadowConstantDataHandle const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::ita::CreateTileClearRenderItemsForShadowPass::operator()(ecs2::Query<md::ls::EnteringView const&,md::ls::SupportsShadows const&,md::ls::AssociationTileHandle const&,md::ls::BaseMapTileHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileShadowConstantDataHandle const&>)::$_0,std::allocator<md::ita::CreateTileClearRenderItemsForShadowPass::operator()(ecs2::Query<md::ls::EnteringView const&,md::ls::SupportsShadows const&,md::ls::AssociationTileHandle const&,md::ls::BaseMapTileHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileShadowConstantDataHandle const&>)::$_0>,void ()(md::ls::EnteringView const&,md::ls::SupportsShadows const&,md::ls::AssociationTileHandle const&,md::ls::BaseMapTileHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileShadowConstantDataHandle const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E427C738;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<md::ita::CreateTileClearRenderItemsForShadowPass::operator()(ecs2::Query<md::ls::EnteringView const&,md::ls::SupportsShadows const&,md::ls::AssociationTileHandle const&,md::ls::BaseMapTileHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileShadowConstantDataHandle const&>)::$_0,std::allocator<md::ita::CreateTileClearRenderItemsForShadowPass::operator()(ecs2::Query<md::ls::EnteringView const&,md::ls::SupportsShadows const&,md::ls::AssociationTileHandle const&,md::ls::BaseMapTileHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileShadowConstantDataHandle const&>)::$_0>,void ()(md::ls::EnteringView const&,md::ls::SupportsShadows const&,md::ls::AssociationTileHandle const&,md::ls::BaseMapTileHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileShadowConstantDataHandle const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427C738;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t (***std::__function::__func<md::ita::CreateTileClearRenderItemsForShadowPass::operator()(ecs2::Query<md::ls::EnteringView const&,md::ls::SupportsShadows const&,md::ls::AssociationTileHandle const&,md::ls::BaseMapTileHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileShadowConstantDataHandle const&>)::$_0,std::allocator<md::ita::CreateTileClearRenderItemsForShadowPass::operator()(ecs2::Query<md::ls::EnteringView const&,md::ls::SupportsShadows const&,md::ls::AssociationTileHandle const&,md::ls::BaseMapTileHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileShadowConstantDataHandle const&>)::$_0>,void ()(md::ls::EnteringView const&,md::ls::SupportsShadows const&,md::ls::AssociationTileHandle const&,md::ls::BaseMapTileHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileShadowConstantDataHandle const&)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t a5, uint64_t *a6, uint64_t *a7, _QWORD *a8, uint64_t *a9))()
{
  uint64_t v14;
  unint64_t v15;
  _QWORD *AssociationItemStorage;
  _QWORD *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t *v20;
  _QWORD *v21;
  uint64_t **v22;
  unint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _BYTE *v28;
  unint64_t *v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  _OWORD *v33;
  unint64_t *v34;
  uint64_t v35;
  __int128 v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t (***v44)();
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t (***v48)();
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t (***v52)();
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t (***v56)();
  uint64_t v57;
  _QWORD *v58;
  unint64_t v59;
  uint64_t (***v60)();
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t (***v64)();
  uint64_t v65;
  _QWORD *v66;
  uint64_t (***v67)();
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t (***v71)();
  uint64_t v72;
  _QWORD *v73;
  uint64_t (***v74)();
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t (***v78)();
  uint64_t v79;
  _QWORD *v80;
  char *v81;
  uint64_t (***v82)();
  uint64_t v83;
  _QWORD *v84;
  uint64_t (***v85)();
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t (***v89)();
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t (***v96)();
  uint64_t v97;
  _QWORD *v98;
  uint64_t (***v99)();
  uint64_t v100;
  _QWORD *v101;
  uint64_t (***v102)();
  uint64_t v103;
  _QWORD *v104;
  char *v105;
  uint64_t (***v106)();
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t (***v110)();
  uint64_t v111;
  uint64_t *v112;
  _QWORD *v113;
  unint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t (***v117)();
  uint64_t v118;
  _QWORD *v119;
  uint64_t (***v120)();
  uint64_t v121;
  _QWORD *v122;
  uint64_t (***v123)();
  uint64_t v124;
  _QWORD *v125;
  uint64_t (***v126)();
  uint64_t v127;
  _QWORD *v128;
  uint64_t (***v129)();
  uint64_t v130;
  _QWORD *v131;
  uint64_t (***result)();
  uint64_t v133;
  _QWORD *v134;
  uint64_t *v135;
  uint64_t **v136;
  unint64_t v137;
  char v138;
  _BYTE v139[23];
  uint64_t (**v140)();
  __int128 v141;
  uint64_t (***v142)();
  _BYTE v143[24];
  _BYTE *v144;
  int v145;
  uint64_t v146;

  v146 = *MEMORY[0x1E0C80C00];
  v14 = *(_QWORD *)(a1 + 8);
  v15 = gdc::Registry::create(*(gdc::Registry **)(*(_QWORD *)v14 + 8));
  v136 = (uint64_t **)a1;
  AssociationItemStorage = (_QWORD *)md::VKMRenderResourcesStore::getAssociationItemStorage(**(_QWORD **)(a1 + 16), *a4, 1);
  v17 = AssociationItemStorage;
  v19 = (unint64_t *)AssociationItemStorage[2];
  v18 = AssociationItemStorage[3];
  v20 = v19;
  v135 = a6;
  if ((unint64_t)v19 >= v18)
  {
    v134 = a8;
    v23 = (unint64_t *)AssociationItemStorage[1];
    v24 = v19 - v23;
    v25 = v24 + 1;
    if ((unint64_t)(v24 + 1) >> 61)
      abort();
    v26 = v18 - (_QWORD)v23;
    if (v26 >> 2 > v25)
      v25 = v26 >> 2;
    if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
      v27 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v27 = v25;
    if (v27)
    {
      if (v27 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v28 = operator new(8 * v27);
    }
    else
    {
      v28 = 0;
    }
    v29 = (unint64_t *)&v28[8 * v24];
    v30 = &v28[8 * v27];
    *v29 = v15;
    v21 = v29 + 1;
    if (v19 == v23)
    {
      v23 = v19;
    }
    else
    {
      v31 = (char *)v19 - (char *)v23 - 8;
      if (v31 < 0x58)
        goto LABEL_201;
      if ((unint64_t)((char *)v23 - v28) < 0x20)
        goto LABEL_201;
      v32 = (v31 >> 3) + 1;
      v20 = &v19[-(v32 & 0x3FFFFFFFFFFFFFFCLL)];
      v33 = &v28[8 * v24 - 16];
      v34 = v19 - 2;
      v35 = v32 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v36 = *(_OWORD *)v34;
        *(v33 - 1) = *((_OWORD *)v34 - 1);
        *v33 = v36;
        v33 -= 2;
        v34 -= 4;
        v35 -= 4;
      }
      while (v35);
      v29 -= v32 & 0x3FFFFFFFFFFFFFFCLL;
      if (v32 != (v32 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_201:
        do
        {
          v37 = *--v20;
          *--v29 = v37;
        }
        while (v20 != v23);
        v23 = (unint64_t *)v17[1];
      }
    }
    v17[1] = v29;
    v17[2] = v21;
    v17[3] = v30;
    if (v23)
      operator delete(v23);
    v22 = v136;
    a8 = v134;
  }
  else
  {
    *v19 = v15;
    v21 = v19 + 1;
    v22 = v136;
  }
  v17[2] = v21;
  v137 = *a4;
  v38 = v137;
  v39 = md::VKMRenderResourcesStore::createRenderItem(*v22[2], &v137);
  v41 = v40;
  v42 = *(_QWORD **)v14;
  v43 = operator new(0x20uLL);
  *v43 = &off_1E427E8F8;
  v43[1] = v38;
  v43[2] = 0;
  v43[3] = v15;
  v144 = v43;
  v142 = 0;
  v145 = 0;
  ecs2::Runtime::queueCommand(v42, (uint64_t)v143);
  if (v145 != -1)
    ((void (*)(_BYTE *, _BYTE *))off_1E42FB340[v145])(v139, v143);
  v145 = -1;
  v44 = v142;
  if (v142 == &v140)
  {
    v45 = 4;
    v44 = &v140;
  }
  else
  {
    if (!v142)
      goto LABEL_33;
    v45 = 5;
  }
  (*v44)[v45]();
LABEL_33:
  v46 = *v135;
  v47 = *(_QWORD **)v14;
  v140 = &off_1E427FA68;
  *(_QWORD *)&v141 = v46;
  *((_QWORD *)&v141 + 1) = v15;
  v142 = &v140;
  v144 = v143;
  *(_QWORD *)v143 = &off_1E427FA68;
  *(_OWORD *)&v143[8] = v141;
  v145 = 0;
  ecs2::Runtime::queueCommand(v47, (uint64_t)v143);
  if (v145 != -1)
    ((void (*)(_BYTE *, _BYTE *))off_1E42FB340[v145])(v139, v143);
  v145 = -1;
  v48 = v142;
  if (v142 == &v140)
  {
    v49 = 4;
    v48 = &v140;
  }
  else
  {
    if (!v142)
      goto LABEL_40;
    v49 = 5;
  }
  (*v48)[v49]();
LABEL_40:
  v50 = *a7;
  v51 = *(_QWORD **)v14;
  v140 = &off_1E4280998;
  *(_QWORD *)&v141 = v50;
  *((_QWORD *)&v141 + 1) = v15;
  v142 = &v140;
  v144 = v143;
  *(_QWORD *)v143 = &off_1E4280998;
  *(_OWORD *)&v143[8] = v141;
  v145 = 0;
  ecs2::Runtime::queueCommand(v51, (uint64_t)v143);
  if (v145 != -1)
    ((void (*)(_BYTE *, _BYTE *))off_1E42FB340[v145])(v139, v143);
  v145 = -1;
  v52 = v142;
  if (v142 == &v140)
  {
    v53 = 4;
    v52 = &v140;
  }
  else
  {
    if (!v142)
      goto LABEL_47;
    v53 = 5;
  }
  (*v52)[v53]();
LABEL_47:
  v54 = *a8;
  v55 = *(_QWORD **)v14;
  v140 = &off_1E427E5E0;
  *(_QWORD *)&v141 = v54;
  *((_QWORD *)&v141 + 1) = v15;
  v142 = &v140;
  v144 = v143;
  *(_QWORD *)v143 = &off_1E427E5E0;
  *(_OWORD *)&v143[8] = v141;
  v145 = 0;
  ecs2::Runtime::queueCommand(v55, (uint64_t)v143);
  if (v145 != -1)
    ((void (*)(_BYTE *, _BYTE *))off_1E42FB340[v145])(v139, v143);
  v145 = -1;
  v56 = v142;
  if (v142 == &v140)
  {
    v57 = 4;
    v56 = &v140;
  }
  else
  {
    if (!v142)
      goto LABEL_54;
    v57 = 5;
  }
  (*v56)[v57]();
LABEL_54:
  v58 = *(_QWORD **)v14;
  v59 = v15 << 32;
  v140 = &off_1E427EE98;
  *(_QWORD *)&v141 = v15 << 32;
  DWORD2(v141) = HIDWORD(v15);
  v142 = &v140;
  *(_QWORD *)v143 = &off_1E427EE98;
  v144 = v143;
  *(_QWORD *)&v143[8] = v15 << 32;
  *(_DWORD *)&v143[16] = HIDWORD(v15);
  v145 = 0;
  ecs2::Runtime::queueCommand(v58, (uint64_t)v143);
  if (v145 != -1)
    ((void (*)(_BYTE *, _BYTE *))off_1E42FB340[v145])(v139, v143);
  v145 = -1;
  v60 = v142;
  if (v142 == &v140)
  {
    v61 = 4;
    v60 = &v140;
  }
  else
  {
    if (!v142)
      goto LABEL_61;
    v61 = 5;
  }
  (*v60)[v61]();
LABEL_61:
  v62 = *(_QWORD **)v14;
  v63 = operator new(0x28uLL);
  *v63 = &off_1E427E508;
  v63[1] = 0x92A64D0A32DD2051;
  v63[2] = "md::ls::ShadowTileClearItem]";
  v63[3] = 27;
  v63[4] = v15;
  v144 = v63;
  v142 = 0;
  v145 = 0;
  ecs2::Runtime::queueCommand(v62, (uint64_t)v143);
  if (v145 != -1)
    ((void (*)(_BYTE *, _BYTE *))off_1E42FB340[v145])(v139, v143);
  v145 = -1;
  v64 = v142;
  if (v142 == &v140)
  {
    v65 = 4;
    v64 = &v140;
  }
  else
  {
    if (!v142)
      goto LABEL_68;
    v65 = 5;
  }
  (*v64)[v65]();
LABEL_68:
  v66 = *(_QWORD **)v14;
  v140 = &off_1E427EF70;
  *(_QWORD *)&v141 = 0x100000002;
  *((_QWORD *)&v141 + 1) = v15;
  v142 = &v140;
  v144 = v143;
  *(_QWORD *)v143 = &off_1E427EF70;
  *(_OWORD *)&v143[8] = v141;
  v145 = 0;
  ecs2::Runtime::queueCommand(v66, (uint64_t)v143);
  if (v145 != -1)
    ((void (*)(_BYTE *, _BYTE *))off_1E42FB340[v145])(v139, v143);
  v145 = -1;
  v67 = v142;
  if (v142 == &v140)
  {
    v68 = 4;
    v67 = &v140;
  }
  else
  {
    if (!v142)
      goto LABEL_75;
    v68 = 5;
  }
  (*v67)[v68]();
LABEL_75:
  v69 = *(_QWORD **)v14;
  v70 = operator new(0x28uLL);
  *v70 = &off_1E427DAA0;
  v70[1] = v39;
  v70[2] = v41;
  v70[3] = 24;
  v70[4] = v15;
  v144 = v70;
  v142 = 0;
  v145 = 0;
  ecs2::Runtime::queueCommand(v69, (uint64_t)v143);
  if (v145 != -1)
    ((void (*)(_BYTE *, _BYTE *))off_1E42FB340[v145])(v139, v143);
  v145 = -1;
  v71 = v142;
  if (v142 == &v140)
  {
    v72 = 4;
    v71 = &v140;
  }
  else
  {
    if (!v142)
      goto LABEL_82;
    v72 = 5;
  }
  (*v71)[v72]();
LABEL_82:
  v73 = *(_QWORD **)v14;
  v140 = &off_1E427E550;
  *(_QWORD *)&v141 = 0;
  *((_QWORD *)&v141 + 1) = v15;
  v142 = &v140;
  v144 = v143;
  *(_QWORD *)v143 = &off_1E427E550;
  *(_OWORD *)&v143[8] = v141;
  v145 = 0;
  ecs2::Runtime::queueCommand(v73, (uint64_t)v143);
  if (v145 != -1)
    ((void (*)(_BYTE *, _BYTE *))off_1E42FB340[v145])(v139, v143);
  v145 = -1;
  v74 = v142;
  if (v142 == &v140)
  {
    v75 = 4;
    v74 = &v140;
  }
  else
  {
    if (!v142)
      goto LABEL_89;
    v75 = 5;
  }
  (*v74)[v75]();
LABEL_89:
  v76 = *a9;
  v77 = *(_QWORD **)v14;
  v140 = &off_1E4280248;
  *(_QWORD *)&v141 = v76;
  *((_QWORD *)&v141 + 1) = v15;
  v142 = &v140;
  v144 = v143;
  *(_QWORD *)v143 = &off_1E4280248;
  *(_OWORD *)&v143[8] = v141;
  v145 = 0;
  ecs2::Runtime::queueCommand(v77, (uint64_t)v143);
  if (v145 != -1)
    ((void (*)(_BYTE *, _BYTE *))off_1E42FB340[v145])(v139, v143);
  v145 = -1;
  v78 = v142;
  if (v142 == &v140)
  {
    v79 = 4;
    v78 = &v140;
  }
  else
  {
    if (!v142)
      goto LABEL_96;
    v79 = 5;
  }
  (*v78)[v79]();
LABEL_96:
  *(_OWORD *)&v139[7] = 0uLL;
  v80 = *(_QWORD **)v14;
  v81 = (char *)operator new(0x28uLL);
  *(_QWORD *)v81 = &off_1E427EFB8;
  v81[8] = 0;
  *(_OWORD *)(v81 + 9) = *(_OWORD *)v139;
  *((_QWORD *)v81 + 3) = *(_QWORD *)&v139[15];
  *((_QWORD *)v81 + 4) = v15;
  v144 = v81;
  v142 = 0;
  v145 = 0;
  ecs2::Runtime::queueCommand(v80, (uint64_t)v143);
  if (v145 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v145])(&v138, v143);
  v145 = -1;
  v82 = v142;
  if (v142 == &v140)
  {
    v83 = 4;
    v82 = &v140;
  }
  else
  {
    if (!v142)
      goto LABEL_103;
    v83 = 5;
  }
  (*v82)[v83]();
LABEL_103:
  v84 = *(_QWORD **)v14;
  v140 = &off_1E427F798;
  *(_QWORD *)&v141 = v15 << 32;
  DWORD2(v141) = HIDWORD(v15);
  v142 = &v140;
  *(_QWORD *)v143 = &off_1E427F798;
  v144 = v143;
  *(_QWORD *)&v143[8] = v15 << 32;
  *(_DWORD *)&v143[16] = HIDWORD(v15);
  v145 = 0;
  ecs2::Runtime::queueCommand(v84, (uint64_t)v143);
  if (v145 != -1)
    ((void (*)(_BYTE *, _BYTE *))off_1E42FB340[v145])(v139, v143);
  v145 = -1;
  v85 = v142;
  if (v142 == &v140)
  {
    v86 = 4;
    v85 = &v140;
  }
  else
  {
    if (!v142)
      goto LABEL_110;
    v86 = 5;
  }
  (*v85)[v86]();
LABEL_110:
  v87 = *v22[3];
  v88 = *(_QWORD **)v14;
  v140 = &off_1E427DB78;
  *(_QWORD *)&v141 = v87;
  *((_QWORD *)&v141 + 1) = v15;
  v142 = &v140;
  v144 = v143;
  *(_QWORD *)v143 = &off_1E427DB78;
  *(_OWORD *)&v143[8] = v141;
  v145 = 0;
  ecs2::Runtime::queueCommand(v88, (uint64_t)v143);
  if (v145 != -1)
    ((void (*)(_BYTE *, _BYTE *))off_1E42FB340[v145])(v139, v143);
  v145 = -1;
  v89 = v142;
  if (v142 == &v140)
  {
    v90 = 4;
    v89 = &v140;
  }
  else
  {
    if (!v142)
      goto LABEL_117;
    v90 = 5;
  }
  (*v89)[v90]();
LABEL_117:
  v91 = *(_QWORD *)(*v22[3] + 96);
  v93 = *(_QWORD *)(v91 + 40);
  v92 = *(_QWORD *)(v91 + 48);
  v94 = *(_QWORD **)v14;
  v95 = operator new(0x20uLL);
  *v95 = &off_1E427D500;
  v95[1] = 0;
  v95[2] = (unint64_t)(v92 - v93) >> 1;
  v95[3] = v15;
  v144 = v95;
  v142 = 0;
  v145 = 0;
  ecs2::Runtime::queueCommand(v94, (uint64_t)v143);
  if (v145 != -1)
    ((void (*)(_BYTE *, _BYTE *))off_1E42FB340[v145])(v139, v143);
  v145 = -1;
  v96 = v142;
  if (v142 == &v140)
  {
    v97 = 4;
    v96 = &v140;
  }
  else
  {
    if (!v142)
      goto LABEL_124;
    v97 = 5;
  }
  (*v96)[v97]();
LABEL_124:
  v98 = *(_QWORD **)v14;
  v140 = &off_1E427DC08;
  *(_QWORD *)&v141 = 1;
  *((_QWORD *)&v141 + 1) = v15;
  v142 = &v140;
  v144 = v143;
  *(_QWORD *)v143 = &off_1E427DC08;
  *(_OWORD *)&v143[8] = v141;
  v145 = 0;
  ecs2::Runtime::queueCommand(v98, (uint64_t)v143);
  if (v145 != -1)
    ((void (*)(_BYTE *, _BYTE *))off_1E42FB340[v145])(v139, v143);
  v145 = -1;
  v99 = v142;
  if (v142 == &v140)
  {
    v100 = 4;
    v99 = &v140;
  }
  else
  {
    if (!v142)
      goto LABEL_131;
    v100 = 5;
  }
  (*v99)[v100]();
LABEL_131:
  v101 = *(_QWORD **)v14;
  v140 = &off_1E427F9D8;
  *(_QWORD *)&v141 = v59 | 3;
  DWORD2(v141) = HIDWORD(v15);
  v142 = &v140;
  *(_QWORD *)v143 = &off_1E427F9D8;
  v144 = v143;
  *(_QWORD *)&v143[8] = v59 | 3;
  *(_DWORD *)&v143[16] = HIDWORD(v15);
  v145 = 0;
  ecs2::Runtime::queueCommand(v101, (uint64_t)v143);
  if (v145 != -1)
    ((void (*)(_BYTE *, _BYTE *))off_1E42FB340[v145])(v139, v143);
  v145 = -1;
  v102 = v142;
  if (v142 == &v140)
  {
    v103 = 4;
    v102 = &v140;
  }
  else
  {
    if (!v142)
      goto LABEL_138;
    v103 = 5;
  }
  (*v102)[v103]();
LABEL_138:
  v104 = *(_QWORD **)v14;
  v105 = (char *)operator new(0x38uLL);
  *((_QWORD *)v105 + 1) = 0;
  *((_QWORD *)v105 + 2) = 0;
  *(_QWORD *)v105 = &off_1E427E9D0;
  v105[24] = 0;
  *(_WORD *)(v105 + 25) = 257;
  *(_DWORD *)(v105 + 27) = 0;
  v105[31] = 2;
  *((_QWORD *)v105 + 4) = 0;
  v105[40] = 0;
  *(_QWORD *)(v105 + 44) = v15;
  v144 = v105;
  v142 = 0;
  v145 = 0;
  ecs2::Runtime::queueCommand(v104, (uint64_t)v143);
  if (v145 != -1)
    ((void (*)(_BYTE *, _BYTE *))off_1E42FB340[v145])(v139, v143);
  v145 = -1;
  v106 = v142;
  if (v142 == &v140)
  {
    v107 = 4;
    v106 = &v140;
  }
  else
  {
    if (!v142)
      goto LABEL_145;
    v107 = 5;
  }
  (*v106)[v107]();
LABEL_145:
  v108 = *v22[4];
  v109 = *(_QWORD **)v14;
  v140 = &off_1E427E598;
  *(_QWORD *)&v141 = v108;
  *((_QWORD *)&v141 + 1) = v15;
  v142 = &v140;
  v144 = v143;
  *(_QWORD *)v143 = &off_1E427E598;
  *(_OWORD *)&v143[8] = v141;
  v145 = 0;
  ecs2::Runtime::queueCommand(v109, (uint64_t)v143);
  if (v145 != -1)
    ((void (*)(_BYTE *, _BYTE *))off_1E42FB340[v145])(v139, v143);
  v145 = -1;
  v110 = v142;
  if (v142 == &v140)
  {
    v111 = 4;
    v110 = &v140;
  }
  else
  {
    if (!v142)
      goto LABEL_152;
    v111 = 5;
  }
  (*v110)[v111]();
LABEL_152:
  v112 = v22[2];
  v113 = (_QWORD *)*v112;
  v114 = *(_QWORD *)(*v112 + 48);
  if (!v114)
  {
    v115 = md::DaVinciRenderStateCache::renderState((unsigned __int8 **)(v113[1312] + 2424), 3, 1, 1, 0, 0, 0, 3);
    v113[2] = v115;
    v140 = (uint64_t (**)())v115;
    v114 = geo::packed_array<md::RenderStateStorage,geo::handle<md::RenderStateItem>>::push_back(v113 + 91, &v140);
    *(int64x2_t *)v143 = vdupq_n_s64(1uLL);
    v143[16] = 1;
    std::__hash_table<std::__hash_value_type<geo::handle<md::RenderStateItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::RenderStateItem>,std::__hash_value_type<geo::handle<md::RenderStateItem>,md::Counter>,std::hash<geo::handle<md::RenderStateItem>>,std::equal_to<geo::handle<md::RenderStateItem>>,true>,std::__unordered_map_equal<geo::handle<md::RenderStateItem>,std::__hash_value_type<geo::handle<md::RenderStateItem>,md::Counter>,std::equal_to<geo::handle<md::RenderStateItem>>,std::hash<geo::handle<md::RenderStateItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::RenderStateItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::RenderStateItem>,geo::handle<md::RenderStateItem> const&,md::Counter>((uint64_t)(v113 + 86), v114, v114, (uint64_t)v143);
    v113[6] = v114;
  }
  v116 = *(_QWORD **)v14;
  v140 = &off_1E427D6B0;
  *(_QWORD *)&v141 = v15 << 32;
  DWORD2(v141) = HIDWORD(v15);
  v142 = &v140;
  *(_QWORD *)v143 = &off_1E427D6B0;
  v144 = v143;
  *(_QWORD *)&v143[8] = v15 << 32;
  *(_DWORD *)&v143[16] = HIDWORD(v15);
  v145 = 0;
  ecs2::Runtime::queueCommand(v116, (uint64_t)v143);
  if (v145 != -1)
    ((void (*)(_BYTE *, _BYTE *))off_1E42FB340[v145])(v139, v143);
  v145 = -1;
  v117 = v142;
  if (v142 == &v140)
  {
    v118 = 4;
    v117 = &v140;
  }
  else
  {
    if (!v142)
      goto LABEL_161;
    v118 = 5;
  }
  (*v117)[v118]();
LABEL_161:
  v119 = *(_QWORD **)v14;
  v140 = &off_1E427D740;
  *(_QWORD *)&v141 = v15 << 32;
  DWORD2(v141) = HIDWORD(v15);
  v142 = &v140;
  *(_QWORD *)v143 = &off_1E427D740;
  v144 = v143;
  *(_QWORD *)&v143[8] = v15 << 32;
  *(_DWORD *)&v143[16] = HIDWORD(v15);
  v145 = 0;
  ecs2::Runtime::queueCommand(v119, (uint64_t)v143);
  if (v145 != -1)
    ((void (*)(_BYTE *, _BYTE *))off_1E42FB340[v145])(v139, v143);
  v145 = -1;
  v120 = v142;
  if (v142 == &v140)
  {
    v121 = 4;
    v120 = &v140;
  }
  else
  {
    if (!v142)
      goto LABEL_168;
    v121 = 5;
  }
  (*v120)[v121]();
LABEL_168:
  v122 = *(_QWORD **)v14;
  v140 = &off_1E42804D0;
  *(_QWORD *)&v141 = v15 << 32;
  DWORD2(v141) = HIDWORD(v15);
  v142 = &v140;
  *(_QWORD *)v143 = &off_1E42804D0;
  v144 = v143;
  *(_QWORD *)&v143[8] = v15 << 32;
  *(_DWORD *)&v143[16] = HIDWORD(v15);
  v145 = 0;
  ecs2::Runtime::queueCommand(v122, (uint64_t)v143);
  if (v145 != -1)
    ((void (*)(_BYTE *, _BYTE *))off_1E42FB340[v145])(v139, v143);
  v145 = -1;
  v123 = v142;
  if (v142 == &v140)
  {
    v124 = 4;
    v123 = &v140;
  }
  else
  {
    if (!v142)
      goto LABEL_175;
    v124 = 5;
  }
  (*v123)[v124]();
LABEL_175:
  v125 = *(_QWORD **)v14;
  v140 = &off_1E427EAF0;
  *(_QWORD *)&v141 = v15 << 32;
  DWORD2(v141) = HIDWORD(v15);
  v142 = &v140;
  *(_QWORD *)v143 = &off_1E427EAF0;
  v144 = v143;
  *(_QWORD *)&v143[8] = v15 << 32;
  *(_DWORD *)&v143[16] = HIDWORD(v15);
  v145 = 0;
  ecs2::Runtime::queueCommand(v125, (uint64_t)v143);
  if (v145 != -1)
    ((void (*)(_BYTE *, _BYTE *))off_1E42FB340[v145])(v139, v143);
  v145 = -1;
  v126 = v142;
  if (v142 == &v140)
  {
    v127 = 4;
    v126 = &v140;
  }
  else
  {
    if (!v142)
      goto LABEL_182;
    v127 = 5;
  }
  (*v126)[v127]();
LABEL_182:
  v128 = *(_QWORD **)v14;
  v140 = &off_1E4281E68;
  *(_QWORD *)&v141 = v15 << 32;
  DWORD2(v141) = HIDWORD(v15);
  v142 = &v140;
  *(_QWORD *)v143 = &off_1E4281E68;
  v144 = v143;
  *(_QWORD *)&v143[8] = v15 << 32;
  *(_DWORD *)&v143[16] = HIDWORD(v15);
  v145 = 0;
  ecs2::Runtime::queueCommand(v128, (uint64_t)v143);
  if (v145 != -1)
    ((void (*)(_BYTE *, _BYTE *))off_1E42FB340[v145])(v139, v143);
  v145 = -1;
  v129 = v142;
  if (v142 == &v140)
  {
    v130 = 4;
    v129 = &v140;
  }
  else
  {
    if (!v142)
      goto LABEL_189;
    v130 = 5;
  }
  (*v129)[v130]();
LABEL_189:
  v131 = *(_QWORD **)v14;
  v140 = &off_1E427D938;
  *(_QWORD *)&v141 = v114;
  *((_QWORD *)&v141 + 1) = v15;
  v142 = &v140;
  v144 = v143;
  *(_QWORD *)v143 = &off_1E427D938;
  *(_OWORD *)&v143[8] = v141;
  v145 = 0;
  ecs2::Runtime::queueCommand(v131, (uint64_t)v143);
  if (v145 != -1)
    ((void (*)(_BYTE *, _BYTE *))off_1E42FB340[v145])(v139, v143);
  v145 = -1;
  result = v142;
  if (v142 == &v140)
  {
    v133 = 4;
    result = &v140;
  }
  else
  {
    if (!v142)
      return result;
    v133 = 5;
  }
  return (uint64_t (***)())(*result)[v133]();
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ShadowTileClearItem>(gdc::Entity,md::ls::ShadowTileClearItem &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ShadowTileClearItem>(gdc::Entity,md::ls::ShadowTileClearItem &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427EE98;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ShadowTileClearItem>(gdc::Entity,md::ls::ShadowTileClearItem &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427EE98;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ShadowTileClearItem>(gdc::Entity,md::ls::ShadowTileClearItem &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  size_t v28;
  char *v29;
  char *v30;
  char *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;

  v3 = *(_QWORD *)(a1 + 12);
  v38 = 0x92A64D0A32DD2051;
  v4 = (uint64_t *)(a2 + 120);
  v5 = *(int8x8_t *)(a2 + 128);
  if (v5)
  {
    v6 = (uint8x8_t)vcnt_s8(v5);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      v7 = 0x92A64D0A32DD2051;
      if (*(_QWORD *)&v5 <= 0x92A64D0A32DD2051)
        v7 = 0x92A64D0A32DD2051 % *(_QWORD *)&v5;
    }
    else
    {
      v7 = (*(_QWORD *)&v5 - 1) & 0x92A64D0A32DD2051;
    }
    v8 = *(_QWORD **)(*v4 + 8 * v7);
    if (v8)
    {
      v9 = (_QWORD *)*v8;
      if (v9)
      {
        if (v6.u32[0] < 2uLL)
        {
          v10 = *(_QWORD *)&v5 - 1;
          while (1)
          {
            v12 = v9[1];
            if (v12 == 0x92A64D0A32DD2051)
            {
              if (v9[2] == 0x92A64D0A32DD2051)
                goto LABEL_50;
            }
            else if ((v12 & v10) != v7)
            {
              goto LABEL_21;
            }
            v9 = (_QWORD *)*v9;
            if (!v9)
              goto LABEL_21;
          }
        }
        do
        {
          v11 = v9[1];
          if (v11 == 0x92A64D0A32DD2051)
          {
            if (v9[2] == 0x92A64D0A32DD2051)
            {
LABEL_50:
              v13 = v9[3];
              goto LABEL_24;
            }
          }
          else
          {
            if (v11 >= *(_QWORD *)&v5)
              v11 %= *(_QWORD *)&v5;
            if (v11 != v7)
              break;
          }
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
    }
  }
LABEL_21:
  v13 = operator new();
  *(_QWORD *)(v13 + 16) = "md::ls::ShadowTileClearItem]";
  *(_QWORD *)(v13 + 24) = 27;
  *(_OWORD *)(v13 + 32) = 0u;
  *(_OWORD *)(v13 + 48) = 0u;
  *(_OWORD *)(v13 + 64) = 0u;
  *(_OWORD *)(v13 + 80) = 0u;
  *(_OWORD *)(v13 + 96) = 0u;
  *(_OWORD *)(v13 + 112) = 0u;
  *(_OWORD *)(v13 + 128) = 0u;
  *(_DWORD *)(v13 + 144) = 1065353216;
  *(_OWORD *)(v13 + 152) = 0u;
  *(_OWORD *)(v13 + 168) = 0u;
  *(_QWORD *)(v13 + 184) = 0;
  *(_DWORD *)(v13 + 192) = 1065353216;
  *(_OWORD *)(v13 + 200) = 0u;
  *(_OWORD *)(v13 + 216) = 0u;
  *(_QWORD *)(v13 + 232) = 0;
  *(_DWORD *)(v13 + 240) = 1065353216;
  *(_QWORD *)v13 = &off_1E4272378;
  *(_QWORD *)(v13 + 8) = 0x92A64D0A32DD2051;
  *(_QWORD *)(v13 + 248) = a2;
  v14 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v4, 0x92A64D0A32DD2051, &v38);
  v15 = v14[3];
  v14[3] = v13;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v34 = (uint64_t *)0x92A64D0A32DD2051;
  v35 = (uint64_t)"md::ls::ShadowTileClearItem]";
  v36 = 27;
  gdc::Registry::_registerStorageDataSignals(a2, 0x92A64D0A32DD2051, (uint64_t)&v34, (uint64_t *)(v13 + 104));
LABEL_24:
  v37 = v3;
  v16 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v13 + 32), (uint64_t)&v37);
  if ((v17 & 1) != 0)
  {
    v22 = *(_BYTE **)(v13 + 88);
    v21 = *(_QWORD *)(v13 + 96);
    if ((unint64_t)v22 >= v21)
    {
      v24 = *(char **)(v13 + 80);
      v25 = v22 - v24;
      v26 = v22 - v24 + 1;
      if (v26 < 0)
        goto LABEL_52;
      v27 = v21 - (_QWORD)v24;
      if (2 * v27 > v26)
        v26 = 2 * v27;
      if (v27 >= 0x3FFFFFFFFFFFFFFFLL)
        v28 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v28 = v26;
      if (v28)
        v29 = (char *)operator new(v28);
      else
        v29 = 0;
      v30 = &v29[v28];
      v23 = (uint64_t)&v29[v25 + 1];
      v31 = (char *)(v24 - v22);
      if (v24 == v22)
        v31 = 0;
      *(_QWORD *)(v13 + 80) = &v29[v25 + (_QWORD)v31];
      *(_QWORD *)(v13 + 88) = v23;
      *(_QWORD *)(v13 + 96) = v30;
      if (v24)
        operator delete(v24);
    }
    else
    {
      v23 = (uint64_t)(v22 + 1);
    }
    *(_QWORD *)(v13 + 88) = v23;
    v18 = *(_QWORD *)(v13 + 248);
  }
  else
  {
    v18 = *(_QWORD *)(v13 + 248);
    if (*(_QWORD *)(v13 + 80) + (((uint64_t)v16 - *(_QWORD *)(v13 + 56)) >> 3) != *(_QWORD *)(v13 + 88))
    {
      v19 = *(_QWORD **)(v13 + 128);
      if (v19)
      {
        while (1)
        {
          v34 = &v37;
          v35 = 1;
          v38 = v18;
          v20 = v19[6];
          if (!v20)
            break;
          (*(void (**)(uint64_t, unint64_t *, uint64_t **))(*(_QWORD *)v20 + 48))(v20, &v38, &v34);
          v19 = (_QWORD *)*v19;
          if (!v19)
            return;
        }
LABEL_51:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_52:
        abort();
      }
      return;
    }
  }
  v32 = *(_QWORD **)(v13 + 176);
  if (v32)
  {
    while (1)
    {
      v34 = &v37;
      v35 = 1;
      v38 = v18;
      v33 = v32[6];
      if (!v33)
        break;
      (*(void (**)(uint64_t, unint64_t *, uint64_t **))(*(_QWORD *)v33 + 48))(v33, &v38, &v34);
      v32 = (_QWORD *)*v32;
      if (!v32)
        return;
    }
    goto LABEL_51;
  }
}

