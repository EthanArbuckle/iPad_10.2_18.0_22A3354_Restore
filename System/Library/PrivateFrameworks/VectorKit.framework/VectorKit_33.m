BOOL gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::IsCompleted>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::IsFailed>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::IsFailed>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::IsFailed>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::IsFailed>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

_QWORD *gdc::ManagedObjectHolder<md::LabelsExternalMeshContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E42B12E8;
  v2 = a1[4];
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0xC400A2AC0F1);
  return a1;
}

void gdc::ManagedObjectHolder<md::LabelsExternalMeshContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E42B12E8;
  v1 = a1[4];
  if (v1)
    MEMORY[0x1A1AF4E00](v1, 0xC400A2AC0F1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::LabelsExternalMeshContext>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void md::Logic<md::LabelsExternalMeshLogic,md::LabelsExternalMeshContext,md::LogicDependencies<gdc::TypeList<md::LabelsContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

uint64_t md::LabelBase::setDedupingGroup(md::LabelBase *this, md::LabelDedupingGroup *a2)
{
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  __int128 *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;

  *((_QWORD *)this + 3) = a2;
  v4 = (_QWORD *)*((_QWORD *)a2 + 2);
  v5 = *((_QWORD *)a2 + 3);
  if ((unint64_t)v4 < v5)
  {
    if (v4)
      *v4 = this;
    v6 = v4 + 1;
    goto LABEL_27;
  }
  v7 = *((_QWORD *)a2 + 1);
  v8 = ((uint64_t)v4 - v7) >> 3;
  v9 = v8 + 1;
  if ((unint64_t)(v8 + 1) >> 61)
    abort();
  v10 = v5 - v7;
  if (v10 >> 2 > v9)
    v9 = v10 >> 2;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
    v9 = 0x1FFFFFFFFFFFFFFFLL;
  if (v9)
  {
    v11 = 8 * v9;
    v12 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**((_QWORD **)a2 + 4) + 16))(*((_QWORD *)a2 + 4), 8 * v9, 8);
    v13 = (_QWORD *)(v12 + 8 * v8);
    v9 = v12 + v11;
    if (v12)
      *v13 = this;
  }
  else
  {
    v13 = (_QWORD *)(8 * v8);
  }
  v6 = v13 + 1;
  v15 = *((_QWORD *)a2 + 1);
  v14 = *((_QWORD *)a2 + 2);
  if (v14 != v15)
  {
    v16 = v14 - v15 - 8;
    if (v16 < 0x38)
    {
      v18 = *((_QWORD *)a2 + 2);
    }
    else if ((unint64_t)(v14 - (_QWORD)v13) < 0x20)
    {
      v18 = *((_QWORD *)a2 + 2);
    }
    else
    {
      v17 = (v16 >> 3) + 1;
      v18 = v14 - 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
      v19 = v13 - 2;
      v20 = (__int128 *)(v14 - 16);
      v21 = v17 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v22 = *v20;
        *(v19 - 1) = *(v20 - 1);
        *v19 = v22;
        v19 -= 2;
        v20 -= 2;
        v21 -= 4;
      }
      while (v21);
      v13 -= v17 & 0x3FFFFFFFFFFFFFFCLL;
      if (v17 == (v17 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_24;
    }
    do
    {
      v23 = *(_QWORD *)(v18 - 8);
      v18 -= 8;
      *--v13 = v23;
    }
    while (v18 != v15);
LABEL_24:
    v14 = *((_QWORD *)a2 + 1);
  }
  *((_QWORD *)a2 + 1) = v13;
  *((_QWORD *)a2 + 2) = v6;
  v24 = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v9;
  if (v14)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)a2 + 4) + 40))(*((_QWORD *)a2 + 4), v14, v24 - v14);
LABEL_27:
  *((_QWORD *)a2 + 2) = v6;
  return (*(uint64_t (**)(md::LabelDedupingGroup *, md::LabelBase *))(*(_QWORD *)a2 + 40))(a2, this);
}

uint64_t ggl::VenueOpenToBelowShadowAlpha::MeshPipelineState::MeshPipelineState(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD *a4, char a5)
{
  unsigned __int8 v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  char v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int16x8_t v20;
  int32x4_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int16x8_t v24;
  int32x4_t v25;
  int8x16_t v26;
  int32x4_t v27;
  int8x16_t v28;
  int32x4_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int16x8_t v39;
  int32x4_t v40;
  int8x16_t v41;
  int16x8_t v42;
  int32x4_t v43;
  int8x16_t v44;
  int32x4_t v45;
  int8x16_t v46;
  int32x4_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int16x8_t v62;
  int32x4_t v63;
  int8x16_t v64;
  int16x8_t v65;
  int32x4_t v66;
  int8x16_t v67;
  int32x4_t v68;
  int8x16_t v69;
  int32x4_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int16x8_t v77;
  int32x4_t v78;
  int8x16_t v79;
  int16x8_t v80;
  int32x4_t v81;
  int8x16_t v82;
  int32x4_t v83;
  int8x16_t v84;
  int32x4_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int8x16_t v89;
  _OWORD *v91;
  int v92;
  unsigned __int8 v93;
  unsigned __int8 v94;
  unsigned __int8 v95;
  unsigned __int8 v96;
  unsigned __int8 v97;
  unsigned __int8 v98;
  unsigned __int8 v99;
  unsigned __int8 v100;
  unsigned __int8 v101;
  _QWORD *v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  _BYTE v106[28];

  if ((v7 & 1) == 0)
  {
    v91 = a4;
    v102 = a2;
    v103 = a3;
    a2 = v102;
    a3 = v103;
    a4 = v91;
    if (v92)
    {
      if ((v93 & 1) == 0
      {
        if ((v97 & 1) == 0
        {
          if ((v101 & 1) == 0
          {
            ggl::MeshTyped<ggl::PolygonCommonStroke::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::PolygonCommonStroke::defaultVboReflection;
          }
          ggl::MeshTyped<ggl::PolygonCommonStroke::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::PolygonCommonStroke::DefaultVbo>::attributesReflection(void)::r;
          unk_1ECE43D00 = 1;
        }
        ggl::VenueOpenToBelowShadowAlpha::MeshPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::PolygonCommonStroke::DefaultVbo>::typedReflection(void)::r;
        *(_QWORD *)algn_1EE5805B8 = &ggl::VenueOpenToBelowShadowAlpha::pipelineDataMeshPipelineDeviceStructs(void)::ref;
        qword_1EE5805C0 = 0;
        if ((v98 & 1) == 0
        {
          ggl::VenueOpenToBelowShadowAlpha::pipelineDataMeshPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
          unk_1EE5805F0 = ggl::VenueOpenToBelowShadow::Style::reflection(void)::reflection;
        }
        qword_1EE5805C8 = (uint64_t)&ggl::VenueOpenToBelowShadowAlpha::pipelineDataMeshPipelineConstantStructs(void)::ref;
        unk_1EE5805D0 = xmmword_19FFB35C0;
      }
      ggl::VenueOpenToBelowShadowAlpha::MeshPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::VenueOpenToBelowShadowAlpha::MeshPipelineSetup::typedReflection(void)::ref;
      if ((v94 & 1) == 0
      {
        ggl::VenueOpenToBelowShadowAlphaShader::typedReflection(void)::ref = (uint64_t)"VenueOpenToBelowShadowAlphaShader";
        if ((v99 & 1) == 0
        {
          qword_1ECE43240 = (uint64_t)"VenueOpenToBelowShadowAlphaShader";
          unk_1ECE43248 = ggl::venueOpenToBelowShadowAlphaShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE43250 = 1;
          unk_1ECE43258 = &ggl::venueOpenToBelowShadowAlphaShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE43260 = 2;
          unk_1ECE43268 = &ggl::venueOpenToBelowShadowAlphaShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE43270 = 0;
          unk_1ECE43278 = &ggl::venueOpenToBelowShadowAlphaShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::venueOpenToBelowShadowAlphaShaderVertexFunctionDescriptor(void)::ref = 1346813876;
          qword_1ECE43280 = 0;
          unk_1ECE43288 = &ggl::venueOpenToBelowShadowAlphaShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE43298 = 0;
          unk_1ECE432A0 = 0;
          qword_1ECE43290 = 0;
        }
        qword_1ECE3BDD0 = (uint64_t)&ggl::venueOpenToBelowShadowAlphaShaderVertexFunctionDescriptor(void)::ref;
        dword_1ECE3BDD8 = 1346813876;
        if ((v100 & 1) == 0
        {
          ggl::venueOpenToBelowShadowAlphaShaderFragmentFunctionDescriptor(void)::ref = 0x19B3262D4;
          qword_1ECE43568 = (uint64_t)"VenueOpenToBelowShadowAlphaShader";
          unk_1ECE43570 = 0;
          qword_1ECE43578 = 0;
          unk_1ECE43580 = &ggl::venueOpenToBelowShadowAlphaShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE43588 = 0;
          unk_1ECE43590 = &ggl::venueOpenToBelowShadowAlphaShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE43598 = 0;
          unk_1ECE435A0 = &ggl::venueOpenToBelowShadowAlphaShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE435A8 = 0;
          unk_1ECE435B0 = &ggl::venueOpenToBelowShadowAlphaShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE435C0 = 0;
          unk_1ECE435C8 = 0;
          qword_1ECE435B8 = 0;
        }
        qword_1ECE3BDE0 = (uint64_t)&ggl::venueOpenToBelowShadowAlphaShaderFragmentFunctionDescriptor(void)::ref;
        dword_1ECE3BDE8 = -1691196716;
        qword_1ECE3BDF0 = (uint64_t)ggl::venueOpenToBelowShadowAlphaShaderShaderConstants(void)::ref;
        unk_1ECE3BDF8 = 2;
        qword_1ECE3BE00 = (uint64_t)&ggl::venueOpenToBelowShadowAlphaShaderShaderTextures(void)::ref;
        unk_1ECE3BE08 = 0;
        qword_1ECE3BE10 = (uint64_t)&ggl::venueOpenToBelowShadowAlphaShaderShaderSamplers(void)::ref;
        unk_1ECE3BE18 = 0;
      }
      qword_1ECE2F6E0 = (uint64_t)&ggl::VenueOpenToBelowShadowAlphaShader::typedReflection(void)::ref;
      if ((v95 & 1) == 0
      {
        ggl::VenueOpenToBelowShadowAlpha::pipelineStateMeshPipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE580660 = 0;
        qword_1EE580668 = (uint64_t)"";
        dword_1EE580670 = 0;
        qword_1EE580678 = (uint64_t)&ggl::VenueOpenToBelowShadowAlpha::pipelineStateMeshPipelineAttributeBinding_0(void)::attr;
        unk_1EE580680 = 3;
      }
      qword_1ECE2F6E8 = (uint64_t)&ggl::VenueOpenToBelowShadowAlpha::pipelineStateMeshPipelineAttributeStructBinding(void)::attr;
      unk_1ECE2F6F0 = 1;
      qword_1ECE2F6F8 = 0;
      unk_1ECE2F700 = 0;
      qword_1ECE2F708 = (uint64_t)&ggl::VenueOpenToBelowShadowAlpha::pipelineStateMeshPipelineDeviceStructBinding(void)::ref;
      unk_1ECE2F710 = 0;
      if ((v96 & 1) == 0
      {
        ggl::VenueOpenToBelowShadowAlpha::pipelineStateMeshPipelineConstantStructBinding(void)::ref = 0;
        unk_1EE580600 = 0;
        qword_1EE580608 = (uint64_t)"view";
        dword_1EE580610 = 3;
        qword_1EE580618 = (uint64_t)&ggl::VenueOpenToBelowShadowAlpha::pipelineStateMeshPipelineConstantViewBinding(void)::reflection;
        unk_1EE580620 = xmmword_19FFB35A0;
        qword_1EE580630 = 1;
        unk_1EE580638 = "style";
        dword_1EE580640 = 3;
        qword_1EE580648 = (uint64_t)&ggl::VenueOpenToBelowShadowAlpha::pipelineStateMeshPipelineConstantStyleBinding(void)::reflection;
        unk_1EE580650 = 2;
      }
      qword_1ECE2F718 = (uint64_t)&ggl::VenueOpenToBelowShadowAlpha::pipelineStateMeshPipelineConstantStructBinding(void)::ref;
      unk_1ECE2F720 = 2;
      a4 = v91;
      a2 = v102;
      a3 = v103;
    }
  }
  v8 = *a2;
  v9 = (std::__shared_weak_count *)a2[1];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  *(_OWORD *)v106 = *(_OWORD *)a3;
  *(_OWORD *)&v106[12] = *(_OWORD *)(a3 + 12);
  v12 = *(_OWORD *)(a3 + 28);
  v13 = *(_BYTE *)(a3 + 44);
  v104 = *a4;
  v105 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &off_1E42B6760;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = &ggl::VenueOpenToBelowShadowAlpha::MeshPipelineState::typedReflection(void)::ref;
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v9;
  if (v9)
  {
    v14 = (unint64_t *)&v9->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *(_BYTE *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 148) = 0;
  *(_QWORD *)(a1 + 140) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 180) = 0;
  *(_QWORD *)(a1 + 196) = 0;
  *(_QWORD *)(a1 + 188) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 228) = 0;
  *(_QWORD *)(a1 + 244) = 0;
  *(_QWORD *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v104;
  *(_OWORD *)(a1 + 272) = v105;
  *(_BYTE *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0x100000001;
  *(_BYTE *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v106;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v106[12];
  *(_OWORD *)(a1 + 92) = v12;
  *(_BYTE *)(a1 + 108) = v13;
  if (v9)
  {
    v16 = (unint64_t *)&v9->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *(_BYTE *)(a1 + 304) = a5;
  *(_BYTE *)(a1 + 305) = 0;
  v18 = *(int8x16_t *)(a1 + 320);
  v19 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  v20 = vmovl_high_s8(v19);
  v21 = vmovl_s16(*(int16x4_t *)v20.i8);
  v22.i64[0] = v21.u32[0];
  v22.i64[1] = v21.u32[1];
  v23 = v22;
  v24 = vmovl_s8(*(int8x8_t *)v19.i8);
  v25 = vmovl_s16(*(int16x4_t *)v24.i8);
  v22.i64[0] = v25.u32[0];
  v22.i64[1] = v25.u32[1];
  v26 = v22;
  v27 = vmovl_high_s16(v20);
  v22.i64[0] = v27.u32[0];
  v22.i64[1] = v27.u32[1];
  v28 = v22;
  v29 = vmovl_high_s16(v24);
  v22.i64[0] = v29.u32[0];
  v22.i64[1] = v29.u32[1];
  v30 = v22;
  v22.i64[0] = v21.u32[2];
  v22.i64[1] = v21.u32[3];
  v31 = v22;
  v22.i64[0] = v25.u32[2];
  v22.i64[1] = v25.u32[3];
  v32 = v22;
  v22.i64[0] = v27.u32[2];
  v22.i64[1] = v27.u32[3];
  v33 = v22;
  v22.i64[0] = v29.u32[2];
  v22.i64[1] = v29.u32[3];
  v34 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v22);
  v35 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v33);
  v36 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v32);
  v37 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v28);
  *(_QWORD *)a1 = &off_1E42BB5F0;
  v38 = vceqzq_s8(v18);
  v39 = vmovl_high_s8(v38);
  v40 = vmovl_s16(*(int16x4_t *)v39.i8);
  v22.i64[0] = v40.u32[0];
  v22.i64[1] = v40.u32[1];
  v41 = v22;
  v42 = vmovl_s8(*(int8x8_t *)v38.i8);
  v43 = vmovl_s16(*(int16x4_t *)v42.i8);
  v22.i64[0] = v43.u32[0];
  v22.i64[1] = v43.u32[1];
  v44 = v22;
  v45 = vmovl_high_s16(v39);
  v22.i64[0] = v45.u32[0];
  v22.i64[1] = v45.u32[1];
  v46 = v22;
  v47 = vmovl_high_s16(v42);
  v22.i64[0] = v47.u32[0];
  v22.i64[1] = v47.u32[1];
  v48 = v22;
  v22.i64[0] = v40.u32[2];
  v22.i64[1] = v40.u32[3];
  v49 = v22;
  v22.i64[0] = v43.u32[2];
  v22.i64[1] = v43.u32[3];
  v50 = v22;
  v22.i64[0] = v45.u32[2];
  v22.i64[1] = v45.u32[3];
  v51 = v22;
  v22.i64[0] = v47.u32[2];
  v22.i64[1] = v47.u32[3];
  v52 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v51);
  v53 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v41), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v23));
  v54 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v44), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v26));
  v55 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v46), v37);
  v56 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v48), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v30));
  v57 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v49), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v31));
  v58 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v50), v36);
  v59 = vorrq_s8(v52, v35);
  v60 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v22), v34);
  v61 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  v62 = vmovl_s8(*(int8x8_t *)v61.i8);
  v63 = vmovl_high_s16(v62);
  v22.i64[0] = v63.i32[2];
  v22.i64[1] = v63.i32[3];
  v64 = v22;
  v65 = vmovl_high_s8(v61);
  v66 = vmovl_high_s16(v65);
  v22.i64[0] = v66.i32[2];
  v22.i64[1] = v66.i32[3];
  v67 = v22;
  v68 = vmovl_s16(*(int16x4_t *)v62.i8);
  v22.i64[0] = v68.i32[2];
  v22.i64[1] = v68.i32[3];
  v69 = v22;
  v70 = vmovl_s16(*(int16x4_t *)v65.i8);
  v22.i64[0] = v70.i32[2];
  v22.i64[1] = v70.i32[3];
  v71 = v22;
  v22.i64[0] = v63.i32[0];
  v22.i64[1] = v63.i32[1];
  v72 = v22;
  v22.i64[0] = v66.i32[0];
  v22.i64[1] = v66.i32[1];
  v73 = v22;
  v22.i64[0] = v68.i32[0];
  v22.i64[1] = v68.i32[1];
  v74 = v22;
  v22.i64[0] = v70.i32[0];
  v22.i64[1] = v70.i32[1];
  v75 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v22);
  v76 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  v77 = vmovl_high_s8(v76);
  v78 = vmovl_s16(*(int16x4_t *)v77.i8);
  v22.i64[0] = v78.i32[0];
  v22.i64[1] = v78.i32[1];
  v79 = v22;
  v80 = vmovl_s8(*(int8x8_t *)v76.i8);
  v81 = vmovl_s16(*(int16x4_t *)v80.i8);
  v22.i64[0] = v81.i32[0];
  v22.i64[1] = v81.i32[1];
  v82 = v22;
  v83 = vmovl_high_s16(v77);
  v22.i64[0] = v83.i32[0];
  v22.i64[1] = v83.i32[1];
  v84 = v22;
  v85 = vmovl_high_s16(v80);
  v22.i64[0] = v85.i32[0];
  v22.i64[1] = v85.i32[1];
  v86 = v22;
  v22.i64[0] = v78.i32[2];
  v22.i64[1] = v78.i32[3];
  v87 = v22;
  v22.i64[0] = v81.i32[2];
  v22.i64[1] = v81.i32[3];
  v88 = v22;
  v22.i64[0] = v83.i32[2];
  v22.i64[1] = v83.i32[3];
  v89 = v22;
  v22.i64[0] = v85.i32[2];
  v22.i64[1] = v85.i32[3];
  *(_QWORD *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v82), vbicq_s8((int8x16_t)xmmword_19FFB3170, v74)), v54), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v79), v75), v53)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v86), vbicq_s8((int8x16_t)xmmword_19FFB3190, v72)), v56), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v84), vbicq_s8((int8x16_t)xmmword_19FFB3180, v73)),
                                               v55))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v88), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v69)), v58), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v87), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v71)), v57)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v22), vbicq_s8((int8x16_t)xmmword_19FFB31D0, v64)), v60), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31F0, v89),
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31C0, v67)),
                                               v59)))));
  *(_BYTE *)(a1 + 288) = 1;
  return a1;
}

void ggl::VenueOpenToBelowShadowAlpha::MeshPipelineSetup::~MeshPipelineSetup(ggl::VenueOpenToBelowShadowAlpha::MeshPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::VenueOpenToBelowShadowAlpha::MeshPipelineSetup::constantDataIsEnabled(ggl::VenueOpenToBelowShadowAlpha::MeshPipelineSetup *this, unint64_t a2)
{
  return a2 < 2;
}

uint64_t ggl::VenueOpenToBelowShadowAlpha::MeshPipelineSetup::textureIsEnabled(ggl::VenueOpenToBelowShadowAlpha::MeshPipelineSetup *this)
{
  return 0;
}

void ggl::VenueOpenToBelowShadow::MeshPipelineSetup::~MeshPipelineSetup(ggl::VenueOpenToBelowShadow::MeshPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::VenueOpenToBelowShadow::MeshPipelineSetup::constantDataIsEnabled(ggl::VenueOpenToBelowShadow::MeshPipelineSetup *this, unint64_t a2)
{
  return a2 < 2;
}

uint64_t ggl::VenueOpenToBelowShadow::MeshPipelineSetup::textureIsEnabled(ggl::VenueOpenToBelowShadow::MeshPipelineSetup *this)
{
  return 0;
}

void sub_19FCFF430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, ggl::BufferMemory *a10, ggl::BufferMemory *a11, void *a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  uint64_t v33;
  ggl::BufferMemory *v34;
  md::DynamicTrafficTileList *v35;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v33);
  if (a33)
    std::default_delete<md::MeshSetStorage>::operator()[abi:nn180100](a33);
  ggl::BufferMemory::~BufferMemory(a11);
  ggl::BufferMemory::~BufferMemory(v34);
  md::DynamicTrafficTileList::~DynamicTrafficTileList(v35);
  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_19FCFF58C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 - 128);
  _Unwind_Resume(a1);
}

void sub_19FCFF618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19FD02ED0(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19FD02EDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, __int128 a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,uint64_t a22,std::__shared_weak_count *a23)
{
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;

  do
    v26 = __ldaxr(v24);
  while (__stlxr(v26 - 1, v24));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  if (a21)
  {
    p_shared_owners = (unint64_t *)&a21->__shared_owners_;
    do
      v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))a21->__on_zero_shared)(a21);
      std::__shared_weak_count::__release_weak(a21);
    }
  }
  if (a23)
  {
    v29 = (unint64_t *)&a23->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))a23->__on_zero_shared)(a23);
      std::__shared_weak_count::__release_weak(a23);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_19FD04530(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,char *a31)
{
  char *v32;
  uint64_t v33;

  v32 = a31;
  if (a31 == &a28)
  {
    v33 = 4;
    v32 = &a28;
  }
  else
  {
    if (!a31)
      _Unwind_Resume(exception_object);
    v33 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v32 + 8 * v33))();
  _Unwind_Resume(exception_object);
}

void sub_19FD04E44(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = *(_QWORD **)(v1 - 136);
  if (v3 == (_QWORD *)(v1 - 160))
  {
    v4 = 4;
    v3 = (_QWORD *)(v1 - 160);
  }
  else
  {
    if (!v3)
      _Unwind_Resume(exception_object);
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
  _Unwind_Resume(exception_object);
}

void sub_19FD051EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0)
    operator delete(__p);
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_19FD05210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, std::__shared_weak_count *a17)
{
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;

  v18 = a17;
  if (a17)
  {
    p_shared_owners = (unint64_t *)&a17->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = a15;
  if (a15)
  {
    v22 = (unint64_t *)&a15->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<std::pair<void const*,unsigned long>,std::vector<md::Edge>>,std::__unordered_map_hasher<std::pair<void const*,unsigned long>,std::__hash_value_type<std::pair<void const*,unsigned long>,std::vector<md::Edge>>,std::hash<std::pair<void const*,unsigned long>>,std::equal_to<std::pair<void const*,unsigned long>>,true>,std::__unordered_map_equal<std::pair<void const*,unsigned long>,std::__hash_value_type<std::pair<void const*,unsigned long>,std::vector<md::Edge>>,std::equal_to<std::pair<void const*,unsigned long>>,std::hash<std::pair<void const*,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<void const*,unsigned long>,std::vector<md::Edge>>>>::__emplace_unique_key_args<std::pair<void const*,unsigned long>,std::piecewise_construct_t const&,std::tuple<std::pair<void const*,unsigned long> const&>,std::tuple<>>(uint64_t a1, unint64_t a2, uint64_t a3, _OWORD *a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD **v12;
  _QWORD *v13;
  unint64_t v15;
  uint64_t v17;
  _QWORD *v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t prime;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;

  v7 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v8 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v7 >> 47) ^ v7);
  v9 = (a3
      + 0x77FA823ACE0B5A40 * (v8 ^ (v8 >> 47))
      + ((0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47))) >> 2)
      - 0x61C8864680B583EBLL) ^ (0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47)));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = (a3
          + 0x77FA823ACE0B5A40 * (v8 ^ (v8 >> 47))
          + ((0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47))) >> 2)
          - 0x61C8864680B583EBLL) ^ (0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47)));
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      v13 = *v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v17 = v13[1];
            if (v17 == v9)
            {
              if (v13[2] == a2 && v13[3] == a3)
                return v13;
            }
            else if ((v17 & (v10 - 1)) != v4)
            {
              goto LABEL_28;
            }
            v13 = (_QWORD *)*v13;
            if (!v13)
              goto LABEL_28;
          }
        }
        do
        {
          v15 = v13[1];
          if (v15 == v9)
          {
            if (v13[2] == a2 && v13[3] == a3)
              return v13;
          }
          else
          {
            if (v15 >= v10)
              v15 %= v10;
            if (v15 != v4)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_28:
  v18 = (_QWORD *)(a1 + 16);
  v13 = operator new(0x38uLL);
  *v13 = 0;
  v13[1] = v9;
  *((_OWORD *)v13 + 1) = *a4;
  v13[5] = 0;
  v13[6] = 0;
  v13[4] = 0;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v10 || (float)(v20 * (float)v10) < v19)
  {
    v21 = 1;
    if (v10 >= 3)
      v21 = (v10 & (v10 - 1)) != 0;
    v22 = v21 | (2 * v10);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      prime = v23;
    else
      prime = v22;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v10 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v10)
      goto LABEL_40;
    if (prime < v10)
    {
      v25 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
      {
        v25 = std::__next_prime(v25);
      }
      else
      {
        v27 = 1 << -(char)__clz(v25 - 1);
        if (v25 >= 2)
          v25 = v27;
      }
      if (prime <= v25)
        prime = v25;
      if (prime < v10)
LABEL_40:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v28 = *(_QWORD *)a1;
  v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v29)
  {
    *v13 = *v29;
LABEL_64:
    *v29 = v13;
    goto LABEL_65;
  }
  *v13 = *v18;
  *v18 = v13;
  *(_QWORD *)(v28 + 8 * v4) = v18;
  if (*v13)
  {
    v30 = *(_QWORD *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v30 >= v10)
        v30 %= v10;
    }
    else
    {
      v30 &= v10 - 1;
    }
    v29 = (_QWORD *)(*(_QWORD *)a1 + 8 * v30);
    goto LABEL_64;
  }
LABEL_65:
  ++*(_QWORD *)(a1 + 24);
  return v13;
}

void sub_19FD059D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::tuple<unsigned long,md::SceneLayer>,std::vector<ggl::CommandBuffer *>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::tuple<unsigned long,md::SceneLayer>,std::vector<ggl::CommandBuffer *>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEFF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEFF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF028;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF028;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::VenueWall::EndCapMesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E53E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VenueWall::EndCapMesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E53E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VenueWall::EndCapMesh>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::VenueWall::MeshMesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E54C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VenueWall::MeshMesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E54C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VenueWall::MeshMesh>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::Venue3DStroke::VerticalDefaultVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1},std::allocator<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::Venue3DStroke::VerticalDefaultVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1}>,std::shared_ptr<ggl::VertexData> ()(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::Venue3DStroke::VerticalDefaultVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1},std::allocator<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::Venue3DStroke::VerticalDefaultVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1}>,std::shared_ptr<ggl::VertexData> ()(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42CBF00;
  return result;
}

void std::__function::__func<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::Venue3DStroke::VerticalDefaultVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1},std::allocator<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::Venue3DStroke::VerticalDefaultVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1}>,std::shared_ptr<ggl::VertexData> ()(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42CBF00;
}

void std::__function::__func<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::Venue3DStroke::VerticalDefaultVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1},std::allocator<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::Venue3DStroke::VerticalDefaultVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1}>,std::shared_ptr<ggl::VertexData> ()(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)>::operator()(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD v17[2];

  v7 = *a1;
  v8 = operator new(0xF8uLL);
  v9 = v8;
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E42DFCD8;
  v10 = v8 + 3;
  v11 = *(_QWORD *)(a2 + 24);
  v12 = *(std::__shared_weak_count **)(a2 + 32);
  v17[0] = v11;
  v17[1] = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  ggl::BufferData::BufferData((uint64_t)(v8 + 3), 32, v17, *a3, a3[1], 1);
  if (v12)
  {
    v15 = (unint64_t *)&v12->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v9[29] = v7;
  v9[30] = &ggl::Venue3DStroke::verticalDefaultVboReflection;
  v9[3] = &off_1E42B7920;
  v9[28] = &unk_1E42B7940;
  *a4 = v10;
  a4[1] = v9;
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Venue3DStroke::VerticalDefaultVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DFCD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Venue3DStroke::VerticalDefaultVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DFCD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Venue3DStroke::VerticalDefaultVbo>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::Venue3DStroke::HorizontalDefaultVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1},std::allocator<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::Venue3DStroke::HorizontalDefaultVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1}>,std::shared_ptr<ggl::VertexData> ()(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::Venue3DStroke::HorizontalDefaultVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1},std::allocator<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::Venue3DStroke::HorizontalDefaultVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1}>,std::shared_ptr<ggl::VertexData> ()(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42CBF48;
  return result;
}

void std::__function::__func<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::Venue3DStroke::HorizontalDefaultVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1},std::allocator<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::Venue3DStroke::HorizontalDefaultVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1}>,std::shared_ptr<ggl::VertexData> ()(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42CBF48;
}

void std::__function::__func<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::Venue3DStroke::HorizontalDefaultVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1},std::allocator<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::Venue3DStroke::HorizontalDefaultVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1}>,std::shared_ptr<ggl::VertexData> ()(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)>::operator()(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD v17[2];

  v7 = *a1;
  v8 = operator new(0xF8uLL);
  v9 = v8;
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E42DFD10;
  v10 = v8 + 3;
  v11 = *(_QWORD *)(a2 + 24);
  v12 = *(std::__shared_weak_count **)(a2 + 32);
  v17[0] = v11;
  v17[1] = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  ggl::BufferData::BufferData((uint64_t)(v8 + 3), 40, v17, *a3, a3[1], 1);
  if (v12)
  {
    v15 = (unint64_t *)&v12->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v9[29] = v7;
  v9[30] = &ggl::Venue3DStroke::horizontalDefaultVboReflection;
  v9[3] = &off_1E42B7960;
  v9[28] = &unk_1E42B7980;
  *a4 = v10;
  a4[1] = v9;
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Venue3DStroke::HorizontalDefaultVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DFD10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Venue3DStroke::HorizontalDefaultVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DFD10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Venue3DStroke::HorizontalDefaultVbo>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::VenueWall::EndCapVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1},std::allocator<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::VenueWall::EndCapVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1}>,std::shared_ptr<ggl::VertexData> ()(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::VenueWall::EndCapVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1},std::allocator<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::VenueWall::EndCapVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1}>,std::shared_ptr<ggl::VertexData> ()(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42CC068;
  return result;
}

void std::__function::__func<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::VenueWall::EndCapVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1},std::allocator<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::VenueWall::EndCapVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1}>,std::shared_ptr<ggl::VertexData> ()(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42CC068;
}

void std::__function::__func<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::VenueWall::EndCapVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1},std::allocator<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::VenueWall::EndCapVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1}>,std::shared_ptr<ggl::VertexData> ()(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)>::operator()(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD v17[2];

  v7 = *a1;
  v8 = operator new(0xF8uLL);
  v9 = v8;
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E42E08A8;
  v10 = v8 + 3;
  v11 = *(_QWORD *)(a2 + 24);
  v12 = *(std::__shared_weak_count **)(a2 + 32);
  v17[0] = v11;
  v17[1] = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  ggl::BufferData::BufferData((uint64_t)(v8 + 3), 24, v17, *a3, a3[1], 1);
  if (v12)
  {
    v15 = (unint64_t *)&v12->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v9[29] = v7;
  v9[30] = &ggl::VenueWall::endCapVboReflection;
  v9[3] = &off_1E42B85E0;
  v9[28] = &unk_1E42B8600;
  *a4 = v10;
  a4[1] = v9;
}

uint64_t ggl::VertexDataTyped<ggl::VenueWall::EndCapVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::VertexDataTyped<ggl::VenueWall::EndCapVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::VertexDataTyped<ggl::VenueWall::EndCapVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v2 = *(_QWORD *)(a1 - 128);
  if (v2)
  {
    *(_QWORD *)(a1 - 120) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v2, *(_QWORD *)(a1 - 112) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  v2 = a1 - 200;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 - 120) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v3, *(_QWORD *)(a1 - 112) - v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 - 168);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::VenueWall::EndCapVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E08A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::VenueWall::EndCapVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E08A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::VenueWall::EndCapVbo>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::VenueWall::DefaultVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1},std::allocator<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::VenueWall::DefaultVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1}>,std::shared_ptr<ggl::VertexData> ()(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::VenueWall::DefaultVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1},std::allocator<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::VenueWall::DefaultVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1}>,std::shared_ptr<ggl::VertexData> ()(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42CC020;
  return result;
}

void std::__function::__func<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::VenueWall::DefaultVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1},std::allocator<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::VenueWall::DefaultVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1}>,std::shared_ptr<ggl::VertexData> ()(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42CC020;
}

void std::__function::__func<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::VenueWall::DefaultVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1},std::allocator<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::VenueWall::DefaultVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1}>,std::shared_ptr<ggl::VertexData> ()(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)>::operator()(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD v17[2];

  v7 = *a1;
  v8 = operator new(0xF8uLL);
  v9 = v8;
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E42E0870;
  v10 = v8 + 3;
  v11 = *(_QWORD *)(a2 + 24);
  v12 = *(std::__shared_weak_count **)(a2 + 32);
  v17[0] = v11;
  v17[1] = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  ggl::BufferData::BufferData((uint64_t)(v8 + 3), 24, v17, *a3, a3[1], 1);
  if (v12)
  {
    v15 = (unint64_t *)&v12->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v9[29] = v7;
  v9[30] = &ggl::VenueWall::defaultVboReflection;
  v9[3] = &off_1E42B85A0;
  v9[28] = &unk_1E42B85C0;
  *a4 = v10;
  a4[1] = v9;
}

uint64_t ggl::VertexDataTyped<ggl::VenueWall::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::VertexDataTyped<ggl::VenueWall::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::VertexDataTyped<ggl::VenueWall::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v2 = *(_QWORD *)(a1 - 128);
  if (v2)
  {
    *(_QWORD *)(a1 - 120) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v2, *(_QWORD *)(a1 - 112) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  v2 = a1 - 200;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 - 120) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v3, *(_QWORD *)(a1 - 112) - v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 - 168);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::VenueWall::DefaultVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0870;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::VenueWall::DefaultVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0870;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::VenueWall::DefaultVbo>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<md::ARWalkingLabeler::debugDrawMiniMap(md::DebugConsole *)::$_3,std::allocator<md::ARWalkingLabeler::debugDrawMiniMap(md::DebugConsole *)::$_3>,void ()(gdc::Tiled const*)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::ARWalkingLabeler::debugDrawMiniMap(md::DebugConsole *)::$_3,std::allocator<md::ARWalkingLabeler::debugDrawMiniMap(md::DebugConsole *)::$_3>,void ()(gdc::Tiled const*)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D8EA0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::ARWalkingLabeler::debugDrawMiniMap(md::DebugConsole *)::$_3,std::allocator<md::ARWalkingLabeler::debugDrawMiniMap(md::DebugConsole *)::$_3>,void ()(gdc::Tiled const*)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D8EA0;
  a2[1] = v2;
  return result;
}

double std::__function::__func<md::ARWalkingLabeler::debugDrawMiniMap(md::DebugConsole *)::$_3,std::allocator<md::ARWalkingLabeler::debugDrawMiniMap(md::DebugConsole *)::$_3>,void ()(gdc::Tiled const*)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  double v4;
  double v5;
  double result;
  int v7;
  double v8[4];

  v2 = *(_QWORD *)(a1 + 8);
  v3 = 1 << *(_BYTE *)(*(_QWORD *)a2 + 1);
  v4 = 1.0 / (double)v3;
  v5 = v4 * (double)(v3 + ~*(_DWORD *)(*(_QWORD *)a2 + 4));
  v8[0] = v4 * (double)*(int *)(*(_QWORD *)a2 + 8);
  v8[1] = v5;
  v8[2] = v8[0] + v4;
  v8[3] = v5 + v4;
  v7 = -16711681;
  md::DebugConsoleMapRect::drawWorldRect(v2, v8, (__int8 *)&v7, 0);
  return result;
}

void std::__function::__func<md::ARWalkingLabeler::debugDrawMiniMap(md::DebugConsole *)::$_2,std::allocator<md::ARWalkingLabeler::debugDrawMiniMap(md::DebugConsole *)::$_2>,void ()(gm::Matrix<double,4,4> const&,gm::Box<float,3> const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::ARWalkingLabeler::debugDrawMiniMap(md::DebugConsole *)::$_2,std::allocator<md::ARWalkingLabeler::debugDrawMiniMap(md::DebugConsole *)::$_2>,void ()(gm::Matrix<double,4,4> const&,gm::Box<float,3> const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42D8E58;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::ARWalkingLabeler::debugDrawMiniMap(md::DebugConsole *)::$_2,std::allocator<md::ARWalkingLabeler::debugDrawMiniMap(md::DebugConsole *)::$_2>,void ()(gm::Matrix<double,4,4> const&,gm::Box<float,3> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42D8E58;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::ARWalkingLabeler::debugDrawMiniMap(md::DebugConsole *)::$_2,std::allocator<md::ARWalkingLabeler::debugDrawMiniMap(md::DebugConsole *)::$_2>,void ()(gm::Matrix<double,4,4> const&,gm::Box<float,3> const&)>::operator()(uint64_t a1, uint64_t a2, float32x2_t *a3)
{
  uint64_t v4;
  float64x2_t v5;
  __n128 v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  int64x2_t v14;
  _BYTE v15[32];
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 8);
  v5 = vcvtq_f64_f32(a3[1]);
  v11 = vcvtq_f64_f32(*a3);
  v12 = v5;
  v13 = vcvtq_f64_f32(a3[2]);
  v14 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(_OWORD *)v15 = xmmword_19FFB2E00;
  *(int64x2_t *)&v15[16] = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  v16[0] = &off_1E42D8A68;
  v16[1] = &v14;
  v16[2] = a2;
  v17 = v16;
  v6.n128_f64[0] = gm::Box<double,3>::forEachCorner((uint64_t)&v11, (uint64_t)v16);
  v7 = v17;
  if (v17 == v16)
  {
    v8 = 4;
    v7 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_6;
    v8 = 5;
  }
  (*(void (**)(__n128))(*v7 + 8 * v8))(v6);
LABEL_6:
  v11 = (float64x2_t)v14;
  v12 = *(float64x2_t *)&v15[8];
  v9 = *(_QWORD *)(a1 + 16);
  if (*(_BYTE *)(*(_QWORD *)(v4 + 2200) + 129))
    v10 = -16776961;
  else
    v10 = 0x80000000;
  LODWORD(v16[0]) = v10;
  md::DebugConsoleMapRect::drawWorldRect(v9, v11.f64, (__int8 *)v16, 0);
}

void std::__function::__func<md::ARWalkingLabeler::debugDrawMiniMap(md::DebugConsole *)::$_1,std::allocator<md::ARWalkingLabeler::debugDrawMiniMap(md::DebugConsole *)::$_1>,void ()(gm::Matrix<double,4,4> const&,arComponents::LocalBounds const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::ARWalkingLabeler::debugDrawMiniMap(md::DebugConsole *)::$_1,std::allocator<md::ARWalkingLabeler::debugDrawMiniMap(md::DebugConsole *)::$_1>,void ()(gm::Matrix<double,4,4> const&,arComponents::LocalBounds const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42D8E10;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::ARWalkingLabeler::debugDrawMiniMap(md::DebugConsole *)::$_1,std::allocator<md::ARWalkingLabeler::debugDrawMiniMap(md::DebugConsole *)::$_1>,void ()(gm::Matrix<double,4,4> const&,arComponents::LocalBounds const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42D8E10;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::ARWalkingLabeler::debugDrawMiniMap(md::DebugConsole *)::$_1,std::allocator<md::ARWalkingLabeler::debugDrawMiniMap(md::DebugConsole *)::$_1>,void ()(gm::Matrix<double,4,4> const&,arComponents::LocalBounds const&)>::operator()(uint64_t a1, float64x2_t *a2, uint64_t a3, double a4, double a5, int32x4_t a6)
{
  uint64_t v9;
  float64x2_t v15;
  float32x2_t *v16;
  float32x2_t *v17;
  unint64_t v18;
  float64x2_t *v19;
  float64x2_t *v20;
  float64x2_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  float64x2_t *v27;
  float64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  unint64_t v42;
  double *v43;
  double v44;
  double v45;
  float64x2_t v46;
  float64x2_t v47;
  uint64_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52[2];
  void *__p;
  float32x2_t *v54;
  uint64_t v55;
  void *v56;
  float64x2_t *v57;
  float64x2_t *v58;

  v9 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(a3 + 160))
    goto LABEL_32;
  v56 = 0;
  v57 = 0;
  v58 = 0;
  __p = 0;
  v54 = 0;
  v55 = 0;
  v51 = 0uLL;
  v52[0].f64[0] = 0.0;
  __asm { FMOV            V0.4S, #1.0 }
  *(float32x4_t *)((char *)v52 + 8) = _Q0;
  geo::DiscreteOrientedPolytope<arComponents::XY26DOPTraits<float>>::extractVertices(a3, (char **)&__p, (uint64_t)&v51, _Q0, a5, a6);
  v17 = (float32x2_t *)__p;
  v16 = v54;
  if (v54 != __p)
  {
    v18 = 0xAAAAAAAAAAAAAAABLL * (((char *)v54 - (_BYTE *)__p) >> 2);
    if (!(v18 >> 60))
    {
      v19 = (float64x2_t *)operator new(0xAAAAAAAAAAAAAAB0 * (((char *)v54 - (_BYTE *)__p) >> 2));
      v56 = v19;
      v58 = &v19[v18];
      while (1)
      {
        v15 = vcvtq_f64_f32(*v17);
        if (v19 < v58)
        {
          *v19 = v15;
          v20 = v19 + 1;
        }
        else
        {
          v21 = (float64x2_t *)v56;
          v22 = ((char *)v19 - (_BYTE *)v56) >> 4;
          v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 60)
            abort();
          v24 = (char *)v58 - (_BYTE *)v56;
          if (((char *)v58 - (_BYTE *)v56) >> 3 > v23)
            v23 = v24 >> 3;
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0)
            v25 = 0xFFFFFFFFFFFFFFFLL;
          else
            v25 = v23;
          if (v25)
          {
            v50 = v15;
            if (v25 >> 60)
              std::__throw_bad_array_new_length[abi:nn180100]();
            v26 = (char *)operator new(16 * v25);
            v15 = v50;
          }
          else
          {
            v26 = 0;
          }
          v27 = (float64x2_t *)&v26[16 * v22];
          *v27 = v15;
          v20 = v27 + 1;
          if (v19 == v21)
          {
            v56 = v27;
            v58 = (float64x2_t *)&v26[16 * v25];
            v21 = v19;
          }
          else
          {
            do
            {
              v15 = v19[-1];
              v27[-1] = v15;
              --v27;
              --v19;
            }
            while (v19 != v21);
            v56 = v27;
            v58 = (float64x2_t *)&v26[16 * v25];
            if (!v21)
              goto LABEL_6;
          }
          operator delete(v21);
        }
LABEL_6:
        v57 = v20;
        v17 = (float32x2_t *)((char *)v17 + 12);
        v19 = v20;
        if (v17 == v16)
          goto LABEL_24;
      }
    }
LABEL_47:
    abort();
  }
LABEL_24:
  v51 = 0uLL;
  v52[0].f64[0] = 0.0;
  geo::ConvexHull2<double>::getConvexHullPoints((double **)&v56, &v51, v15);
  if (*(_BYTE *)(a3 + 160))
  {
    v28 = v51.f64[0];
    std::vector<gm::Matrix<double,2,1>>::__assign_with_size[abi:nn180100]<gm::Matrix<double,2,1>*,gm::Matrix<double,2,1>*>(a3 + 136, *(unint64_t *)&v51.f64[0], *(char **)&v51.f64[1], (uint64_t)(*(_QWORD *)&v51.f64[1] - *(_QWORD *)&v51.f64[0]) >> 4);
    if (v28 != 0.0)
      operator delete(*(void **)&v28);
    v29 = __p;
    if (__p)
      goto LABEL_28;
  }
  else
  {
    *(float64x2_t *)(a3 + 136) = v51;
    *(float64_t *)(a3 + 152) = v52[0].f64[0];
    *(_BYTE *)(a3 + 160) = 1;
    v29 = __p;
    if (__p)
LABEL_28:
      operator delete(v29);
  }
  if (v56)
    operator delete(v56);
  if (!*(_BYTE *)(a3 + 160))
  {
    std::__throw_bad_optional_access[abi:nn180100]();
    goto LABEL_47;
  }
LABEL_32:
  v30 = *(_QWORD *)(a3 + 136);
  v31 = *(_QWORD *)(a3 + 144) - v30;
  if (v31)
  {
    v32 = 0;
    v33 = 0;
    v34 = v31 >> 4;
    do
    {
      v36 = *(double *)(v30 + v32);
      v37 = *(double *)(v30 + v32 + 8);
      v38 = a2[1].f64[1];
      v39 = a2[3].f64[1];
      v40 = a2[7].f64[1];
      v41 = 1.0 / (v40 + v38 * v36 + v39 * v37);
      if (v33 < v34 - 1)
        v42 = v33 + 1;
      else
        v42 = 0;
      v43 = (double *)(v30 + 16 * v42);
      v44 = v43[1];
      v45 = 1.0 / (v40 + *v43 * v38 + v44 * v39);
      v46 = a2[2];
      v47 = vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(a2[6], *a2, v36), v46, v37), v41);
      v48 = *(_QWORD *)(a1 + 16);
      v49 = vmlaq_n_f64(vnegq_f64(v47), vmlaq_n_f64(vmlaq_n_f64(a2[6], *a2, *v43), v46, v44), v45);
      if (*(_BYTE *)(*(_QWORD *)(v9 + 2200) + 128))
        v35 = -16776961;
      else
        v35 = 0x80000000;
      LODWORD(v56) = v35;
      v51 = v47;
      v52[0] = v49;
      md::DebugConsoleMapRect::drawWorldSegment(v48, v51.f64, &v56);
      ++v33;
      v30 = *(_QWORD *)(a3 + 136);
      v34 = (*(_QWORD *)(a3 + 144) - v30) >> 4;
      v32 += 16;
    }
    while (v33 < v34);
  }
}

void sub_19FD07B80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20)
{
  void *v20;
  void *v22;

  if (v20)
    operator delete(v20);
  if (__p)
  {
    operator delete(__p);
    v22 = a20;
    if (!a20)
LABEL_5:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v22 = a20;
    if (!a20)
      goto LABEL_5;
  }
  operator delete(v22);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<md::ARWalkingLabeler::debugDrawMiniMap(md::DebugConsole *)::$_0,std::allocator<md::ARWalkingLabeler::debugDrawMiniMap(md::DebugConsole *)::$_0>,BOOL ()(gm::Box<double,3> const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::ARWalkingLabeler::debugDrawMiniMap(md::DebugConsole *)::$_0,std::allocator<md::ARWalkingLabeler::debugDrawMiniMap(md::DebugConsole *)::$_0>,BOOL ()(gm::Box<double,3> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D8DC8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::ARWalkingLabeler::debugDrawMiniMap(md::DebugConsole *)::$_0,std::allocator<md::ARWalkingLabeler::debugDrawMiniMap(md::DebugConsole *)::$_0>,BOOL ()(gm::Box<double,3> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D8DC8;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<md::ARWalkingLabeler::debugDrawMiniMap(md::DebugConsole *)::$_0,std::allocator<md::ARWalkingLabeler::debugDrawMiniMap(md::DebugConsole *)::$_0>,BOOL ()(gm::Box<double,3> const&)>::operator()(uint64_t a1, double *a2)
{
  double *v2;

  v2 = *(double **)(a1 + 8);
  return v2[5] <= *a2 || v2[3] >= a2[3] || v2[6] <= a2[1] || v2[4] >= a2[4];
}

void md::ARWalkingLabeler::debugString(md::ARWalkingLabeler *this@<X0>, _QWORD *a2@<X8>)
{
  NSMutableString *v4;
  const char *v5;
  size_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  NSMutableString *v11;

  v4 = (NSMutableString *)objc_alloc_init(MEMORY[0x1E0CB37A0]);
  md::ARWalkingLabeler::debugOutputLabelState(this, v4);
  v11 = objc_retainAutorelease(v4);
  v5 = (const char *)-[NSMutableString UTF8String](v11, "UTF8String");
  v6 = strlen(v5);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v8 = v6 | 7;
    v9 = v8 + 1;
    v10 = operator new(v8 + 1);
    a2[1] = v7;
    a2[2] = v9 | 0x8000000000000000;
    *a2 = v10;
    a2 = v10;
  }
  else
  {
    *((_BYTE *)a2 + 23) = v6;
    if (!v6)
      goto LABEL_9;
  }
  memmove(a2, v5, v7);
LABEL_9:
  *((_BYTE *)a2 + v7) = 0;

}

void sub_19FD07D80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void md::ARWalkingLabeler::debugOutputLabelState(md::ARWalkingLabeler *this, NSMutableString *a2)
{
  double v2;
  double v3;
  NSMutableString *v5;
  BOOL v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  const char *v18;
  void *v19;
  uint64_t v20;
  const __CFString *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  id v26;
  void *v27;
  void *v28;
  unint64_t *v29;
  unint64_t v30;
  void *v31;
  double v32;
  double v33;
  __double2 v34;
  double v35;
  __double2 v36;
  double v37;
  __double2 v38;
  double v39;
  __double2 v40;
  double v41;
  id **v42;
  void *v43;
  unint64_t v44;
  void **v45;
  std::string *v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  id v50;
  void *v51;
  void *v52;
  uint64_t v53;
  unint64_t i;
  uint64_t v55;
  uint64_t v56;
  id *v57;
  unint64_t v58;
  void *v59;
  std::string::size_type v60;
  int v61;
  id *v62;
  char *v63;
  unsigned int v64;
  id *v65;
  unsigned int v66;
  BOOL v67;
  id *v68;
  _DWORD *v69;
  char v70;
  int v71;
  int v72;
  char *v73;
  unsigned int v74;
  id *v75;
  unsigned int v76;
  BOOL v77;
  id *v78;
  uint64_t v79;
  long double v80;
  long double v81;
  double v82;
  double v83;
  double v84;
  float v85;
  int v86;
  id **v87;
  uint64_t v88;
  char v89;
  char v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  float v98;
  float v99;
  float v100;
  long double v101;
  uint64_t v102;
  uint64_t v103;
  float v104;
  long double v105;
  double v106;
  long double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  __double2 v113;
  const char *v114;
  unsigned int v115;
  std::string *v116;
  double v117;
  id v118;
  double v119;
  void *v120;
  const __CFString *v121;
  const char *v122;
  unint64_t v123;
  const char *v124;
  void **v125;
  id *v126;
  char *v127;
  unsigned int v128;
  id *v129;
  unsigned int v130;
  BOOL v131;
  char **v132;
  uint64_t v133;
  id v134;
  void *v135;
  const __CFString *v136;
  id **v137;
  md::ARWalkingLabeler *v138;
  NSMutableString *v139;
  void *v140;
  double *v141;
  char BOOL;
  id *v143;
  unint64_t v144;
  __CFString *v145;
  double v146;
  long double v147;
  unint64_t v148;
  double v149;
  double v150;
  double v151;
  double v152;
  void *__p[2];
  char v154;
  std::string v155;
  std::string v156;
  void *v157[2];
  char v158;
  uint64_t v159;
  std::__shared_weak_count *v160;

  v5 = a2;
  if ((_DWORD)VectorKitDebugConfig_DisplayAllLabelsInARDebugString)
    v6 = off_1EE569040 == 0;
  else
    v6 = 1;
  if (!v6)
    BOOL = GEOConfigGetBOOL();
  v141 = (double *)*((_QWORD *)this + 3);
  v7 = *((id *)this + 256);

  v138 = this;
  if (v7)
  {
    v8 = *((id *)this + 256);
    objc_msgSend(v8, "routeInfo");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "route");
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v10, "pointAtRouteCoordinate:", *(_QWORD *)(*((_QWORD *)this + 3) + 3560));
    v12 = v11;
    v2 = v13;
    v3 = v14;
  }
  else
  {
    v10 = 0;
    v12 = 0.0;
  }
  -[NSMutableString appendString:](v5, "appendString:", CFSTR("ARWalkingLabeler\n"));
  v15 = *((unsigned __int8 *)this + 2195);
  if (v15 > 3)
    v16 = "<Invalid>";
  else
    v16 = off_1E42F8718[v15];
  v17 = *((unsigned __int8 *)this + 2192);
  if (v17 > 3)
    v18 = "<Invalid>";
  else
    v18 = off_1E42F6CD8[v17];
  -[NSMutableString appendFormat:](v5, "appendFormat:", CFSTR("  arSessionState:%s|%s\n"), v16, v18);
  v19 = *(void **)(*((_QWORD *)this + 55) + 448);
  if (v19)
  {
    v20 = objc_msgSend(v19, "state");
    if ((unint64_t)(v20 - 1) > 4)
      v21 = CFSTR("VKARWalkingFeatureSetStateNone");
    else
      v21 = (const __CFString *)*((_QWORD *)&off_1E42F6CB0 + v20 - 1);
  }
  else
  {
    v21 = CFSTR("VKARWalkingFeatureSetStateNone");
  }
  -[NSMutableString appendFormat:](v5, "appendFormat:", CFSTR("  featureSetState:%@\n"), v21);
  -[NSMutableString appendFormat:](v5, "appendFormat:", CFSTR("  featureCount:%lu\n"), 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*(_QWORD *)(*((_QWORD *)this + 55) + 472) - *(_QWORD *)(*((_QWORD *)this + 55) + 464)) >> 3));
  v22 = *((_QWORD *)this + 275);
  v23 = (std::__shared_weak_count *)*((_QWORD *)v138 + 276);
  v159 = *((_QWORD *)v138 + 275);
  v160 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(p_shared_owners);
    while (__stxr(v25 + 1, p_shared_owners));
  }
  v139 = v5;
  v140 = v10;
  v26 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v27 = v26;
  if (v22)
  {
    if (*(_BYTE *)(v22 + 128))
      objc_msgSend(v26, "addObject:", CFSTR("Building"));
    if (*(_BYTE *)(v22 + 129))
      objc_msgSend(v27, "addObject:", CFSTR("Ground"));
  }
  objc_msgSend(v27, "componentsJoinedByString:", CFSTR("|"));
  v28 = (void *)objc_claimAutoreleasedReturnValue();

  -[NSMutableString appendFormat:](v5, "appendFormat:", CFSTR("  avoidanceTypes:%@\n"), v28);
  if (v23)
  {
    v29 = (unint64_t *)&v23->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  GEOPolylineCoordinateAsShortString();
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  -[NSMutableString appendFormat:](v5, "appendFormat:", CFSTR("  userRouteOffset:%@\n"), v31);

  -[NSMutableString appendFormat:](v5, "appendFormat:", CFSTR("  eye:%f,%f,%f\n"), *((_QWORD *)v138 + 51), *((_QWORD *)v138 + 52), *((_QWORD *)v138 + 53));
  if (v7)
  {
    v32 = *((double *)v138 + 52) * 0.0174532925;
    v33 = *((double *)v138 + 53);
    v34 = __sincos_stret(*((double *)v138 + 51) * 0.0174532925);
    v151 = v2;
    v146 = v3;
    v35 = 6378137.0 / sqrt(1.0 - v34.__sinval * v34.__sinval * 0.00669437999);
    v149 = (v35 + v33) * v34.__cosval;
    v36 = __sincos_stret(v32);
    v37 = v2 * 0.0174532925;
    v38 = __sincos_stret(v12 * 0.0174532925);
    v39 = 6378137.0 / sqrt(1.0 - v38.__sinval * v38.__sinval * 0.00669437999);
    v40 = __sincos_stret(v37);
    v41 = -((v3 + v39 * 0.99330562) * v38.__sinval - (v33 + v35 * 0.99330562) * v34.__sinval);
    -[NSMutableString appendFormat:](v5, "appendFormat:", CFSTR("  routeEye:%f,%f,%f(%3.0fm)\n"), *(_QWORD *)&v12, *(_QWORD *)&v151, *(_QWORD *)&v3, sqrt(-((v39 + v3) * v38.__cosval * v40.__cosval - v149 * v36.__cosval)* -((v39 + v3) * v38.__cosval * v40.__cosval - v149 * v36.__cosval)+ -((v39 + v3) * v38.__cosval * v40.__sinval - v149 * v36.__sinval)* -((v39 + v3) * v38.__cosval * v40.__sinval - v149 * v36.__sinval)+ v41 * v41));
  }
  v42 = (id **)*((_QWORD *)v138 + 252);
  v137 = (id **)*((_QWORD *)v138 + 253);
  if (v42 != v137)
  {
    while (1)
    {
      ARStringForFeature(v157, v42);
      (*((void (**)(id *))**v42 + 26))(*v42);
      v43 = (void *)objc_claimAutoreleasedReturnValue();
      v44 = objc_msgSend(v43, "intraFeaturePriority");

      v45 = v158 >= 0 ? v157 : (void **)v157[0];
      if (v44 == -1)
      {
        v46 = (std::string *)"-";
      }
      else
      {
        std::to_string(&v156, v44);
        v46 = &v156;
        if ((v156.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v46 = (std::string *)v156.__r_.__value_.__r.__words[0];
      }
      -[NSMutableString appendFormat:](v5, "appendFormat:", CFSTR("=======%s (p:%s)"), v45, v46);
      if (v44 != -1 && SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v156.__r_.__value_.__l.__data_);
      v47 = *((_QWORD *)v138 + 280);
      if (v47 && *v42 == *(id **)(v47 + 8))
        -[NSMutableString appendFormat:](v5, "appendFormat:", CFSTR(" ACTIVE"));
      -[NSMutableString appendFormat:](v5, "appendFormat:", CFSTR("======="));
      if ((*((unsigned int (**)(id *))**v42 + 33))(*v42) == 25
        || (*((unsigned int (**)(id *))**v42 + 33))(*v42) == 27)
      {
        v48 = (*((uint64_t (**)(id *))**v42 + 33))(*v42);
        v49 = 29;
        if (v48 == 27)
          v49 = 88;
        v50 = (*v42)[v49];
        objc_msgSend(v50, "storeFronts");
        v51 = (void *)objc_claimAutoreleasedReturnValue();
        -[NSMutableString appendFormat:](v5, "appendFormat:", CFSTR("\n  storeFronts:%lu"), objc_msgSend(v51, "count"));

        -[NSMutableString appendString:](v5, "appendString:", CFSTR("\n  attrs:"));
        objc_msgSend(v50, "styleAttributes");
        v52 = (void *)objc_claimAutoreleasedReturnValue();
        if (v52)
        {
          v53 = 0;
          for (i = 1; i - 1 < objc_msgSend(v52, "countAttrs"); ++i)
          {
            v55 = objc_msgSend(v52, "v");
            -[NSMutableString appendFormat:](v5, "appendFormat:", CFSTR("(%d,%d)"), *(unsigned int *)(v55 + v53), *(unsigned int *)(v55 + v53 + 4));
            if (i < objc_msgSend(v52, "countAttrs"))
              -[NSMutableString appendString:](v5, "appendString:", CFSTR(","));
            v53 += 8;
          }
        }

      }
      -[NSMutableString appendFormat:](v5, "appendFormat:", CFSTR("\n"));
      v56 = (*((unsigned int (**)(id *))**v42 + 33))(*v42) == 24 ? 2 : 3;
      v57 = v42[2];
      v143 = v42[3];
      v144 = v56;
      if (v57 != v143)
        break;
LABEL_38:
      if (v158 < 0)
        operator delete(v157[0]);
      v42 += 5;
      if (v42 == v137)
        goto LABEL_156;
    }
    v58 = 0;
    while (1)
    {
      if (!(BOOL & 1 | (v58 < v144)))
      {
        -[NSMutableString appendFormat:](v5, "appendFormat:", CFSTR("    ...+%lu more\n"), (((char *)v42[3] - (char *)v42[2]) >> 7) - v58);
        goto LABEL_38;
      }
      v61 = (*((uint64_t (**)(id *))**v42 + 33))(*v42);
      v62 = *v42;
      if (v61 == 26)
        break;
      v72 = (*((uint64_t (**)(id *))*v62 + 33))(v62);
      v62 = *v42;
      if (v72 != 24)
        goto LABEL_101;
      v73 = (char *)v62[58];
      if (!v73)
        goto LABEL_101;
      v74 = *((_DWORD *)v57 + 8);
      v75 = v62 + 58;
      do
      {
        v76 = *((_DWORD *)v73 + 8);
        v77 = v76 >= v74;
        if (v76 >= v74)
          v78 = (id *)v73;
        else
          v78 = (id *)(v73 + 8);
        if (v77)
          v75 = (id *)v73;
        v73 = (char *)*v78;
      }
      while (*v78);
      if (v75 == v62 + 58 || v74 < *((_DWORD *)v75 + 8))
        goto LABEL_101;
      v70 = 0;
      v71 = *((unsigned __int8 *)v75 + 121);
LABEL_102:
      v79 = (*((uint64_t (**)(id *, id *))*v62 + 14))(v62, v57 + 4);
      v148 = v58;
      v80 = *(double *)v79;
      v81 = *(double *)(v79 + 8);
      v82 = *(double *)(v79 + 16);
      v83 = *(double *)(v79 + 24);
      v84 = *(double *)(v79 + 32);
      v85 = *(float *)(v79 + 40);
      v86 = *(unsigned __int8 *)(v79 + 45);
      v87 = v42;
      v88 = (*((uint64_t (**)(id *, id *))**v42 + 38))(*v42, v57 + 4);
      v90 = v89;
      v147 = v82;
      v91 = *((double *)v57 + 5) - v141[72];
      v92 = *((double *)v57 + 6) - v141[73];
      v93 = *((double *)v57 + 7) - v141[74];
      v94 = 1.0 / sqrt(v91 * v91 + v92 * v92 + v93 * v93);
      v95 = v94 * v91;
      v96 = v94 * v92;
      v97 = v94 * v93;
      v152 = acos(v94 * v91 * v141[75] + v94 * v92 * v141[76] + v94 * v93 * v141[77]);
      if (*((_BYTE *)v57 + 76))
      {
        v99 = *((float *)v57 + 17);
        v98 = *((float *)v57 + 18);
        v100 = *((float *)v57 + 16);
      }
      else
      {
        v98 = 1.0;
        v99 = 0.0;
        v100 = 0.0;
      }
      v101 = acos(v96 * v99 + v97 * v98 + v95 * v100);
      v102 = 0;
      if (v10 && v90)
      {
        objc_msgSend(v10, "distanceFromPoint:toPoint:", *(_QWORD *)(*((_QWORD *)v138 + 3) + 3560), v88);
        v102 = v103;
      }
      v150 = v101;
      if (v86)
      {
        if (v85 == 3.4028e38)
          v104 = 0.0;
        else
          v104 = v85;
        v105 = exp(v84 * 6.28318531 + -3.14159265);
        v106 = atan(v105);
        v107 = fmod(v83 * 6.28318531, 6.28318531);
        v108 = fmod(v107 + 6.28318531, 6.28318531) * 57.2957795 + -180.0;
        v109 = v106 * 114.591559 + -90.0;
      }
      else
      {
        v110 = sqrt(v80 * v80 + v81 * v81);
        v111 = atan2(v147, v110 * 0.996647189);
        v112 = atan2(v81, v80);
        v113 = __sincos_stret(v111);
        v109 = atan2(v147 + v113.__sinval * v113.__sinval * 42841.3115 * v113.__sinval, v110 + v113.__cosval * v113.__cosval * -42697.6727 * v113.__cosval)* 57.2957795;
        v108 = v112 * 57.2957795;
        if (v85 == 3.4028e38)
          v104 = 0.0;
        else
          v104 = v85;
      }
      if (*((_BYTE *)v57 + 106))
        v114 = " ";
      else
        v114 = "!";
      v115 = *((_DWORD *)v57 + 8);
      if (v115)
      {
        std::to_string(&v155, v115);
        if ((v155.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v116 = &v155;
        else
          v116 = (std::string *)v155.__r_.__value_.__r.__words[0];
      }
      else
      {
        *((_BYTE *)&v155.__r_.__value_.__s + 23) = 7;
        strcpy((char *)&v155, "UNKNOWN");
        v116 = &v155;
      }
      v117 = *((double *)v57 + 7);
      v118 = v57[15];
      v119 = *((double *)v57 + 12);
      if (v90)
      {
        v120 = (void *)MEMORY[0x1E0CB3940];
        GEOPolylineCoordinateAsShortString();
        v146 = COERCE_DOUBLE(objc_claimAutoreleasedReturnValue());
        objc_msgSend(v120, "stringWithFormat:", CFSTR("rc:%@"), *(_QWORD *)&v146);
        v145 = (__CFString *)objc_claimAutoreleasedReturnValue();
        v121 = v145;
      }
      else
      {
        v121 = &stru_1E4315B30;
      }
      v122 = "";
      if ((v70 & 1) == 0)
        v122 = gss::to_string(v71);
      md::stringFromLabelOutcome((uint64_t)__p, *((unsigned __int8 *)v57 + 104));
      v123 = *((unsigned __int8 *)v57 + 105);
      v124 = "<NONE>";
      if (v123 <= 2)
        v124 = off_1E42F4048[v123];
      v125 = (void **)__p[0];
      if (v154 >= 0)
        v125 = __p;
      v136 = v121;
      v5 = v139;
      -[NSMutableString appendFormat:](v139, "appendFormat:", CFSTR("%s   id:%2s v:(%3.0f,%3.0f) e:(l:%3.0f o:%2.0f) d:(%3.0f:%3.0f) \n    %@ %f,%f,%f \n    %s %s-%s\n"), v114, v116, v152 * 57.2957795, v150 * 57.2957795, v117 * 40075017.0, v118, sqrt(v119), v102, v136, *(_QWORD *)&v109, *(_QWORD *)&v108, v104, v122, v125, v124);
      v10 = v140;
      if (v154 < 0)
      {
        operator delete(__p[0]);
        if (!v90)
          goto LABEL_136;
LABEL_135:

        goto LABEL_136;
      }
      if (v90)
        goto LABEL_135;
LABEL_136:
      if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v155.__r_.__value_.__l.__data_);
      v42 = v87;
      if ((*((unsigned int (**)(id *))**v87 + 33))(*v87) == 27)
      {
        v126 = *v87;
        v127 = (char *)(*v87)[58];
        if (v127)
        {
          v128 = *((_DWORD *)v57 + 8);
          v129 = v126 + 58;
          do
          {
            v130 = *((_DWORD *)v127 + 8);
            v131 = v130 >= v128;
            if (v130 >= v128)
              v132 = (char **)v127;
            else
              v132 = (char **)(v127 + 8);
            if (v131)
              v129 = (id *)v127;
            v127 = *v132;
          }
          while (*v132);
          if (v129 != v126 + 58 && v128 >= *((_DWORD *)v129 + 8))
          {
            v133 = *((_QWORD *)v126[84] + 2 * *((unsigned __int8 *)v129 + 121));
            if (v133)
            {
              v134 = *(id *)(v133 + 152);
              v135 = v134;
              if (v134)
              {
                objc_msgSend(v134, "faceWidthInMeters");
                v60 = v155.__r_.__value_.__r.__words[0];
                objc_msgSend(v135, "faceHeightInMeters");
                v59 = __p[0];
              }
              else
              {
                v155.__r_.__value_.__r.__words[0] = 0;
                __p[0] = 0;
                v59 = 0;
                v60 = 0;
              }
              -[NSMutableString appendFormat:](v139, "appendFormat:", CFSTR("    storefront: w:%f h:%f\n"), v60, v59);

            }
          }
        }
      }
      v58 = v148 + 1;
      v57 += 16;
      if (v57 == v143)
        goto LABEL_38;
    }
    v63 = (char *)v62[34];
    if (v63)
    {
      v64 = *((_DWORD *)v57 + 8);
      v65 = v62 + 34;
      do
      {
        v66 = *((_DWORD *)v63 + 8);
        v67 = v66 >= v64;
        if (v66 >= v64)
          v68 = (id *)v63;
        else
          v68 = (id *)(v63 + 8);
        if (v67)
          v65 = (id *)v63;
        v63 = (char *)*v68;
      }
      while (*v68);
      if (v65 != v62 + 34 && v64 >= *((_DWORD *)v65 + 8))
      {
        v69 = v65[5];
        if (v69)
        {
          v70 = 0;
          v71 = v69[41] == v64;
          goto LABEL_102;
        }
      }
    }
LABEL_101:
    v71 = 0;
    v70 = 1;
    goto LABEL_102;
  }
LABEL_156:

}

void sub_19FD08A8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  void *v49;

  _Unwind_Resume(a1);
}

void md::ARWalkingLabeler::populateDebugNode(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  _QWORD *v6;
  char *ChildNode;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  std::string::size_type v13;
  std::string::size_type v14;
  std::string::size_type v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  std::string *v33;
  size_t v34;
  std::string::size_type v35;
  std::string *p_dst;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  double v41;
  long double v42;
  long double v43;
  double v44;
  long double v45;
  double v46;
  unint64_t v47;
  const std::string::value_type *v48;
  unint64_t v49;
  const std::string::value_type *v50;
  double v51;
  double v52;
  double v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  float v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  double v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  std::string::size_type v78;
  char *v79;
  std::string::size_type v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  void ***v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void **v88;
  void **v89;
  void *v90;
  void ***v91;
  void **v92;
  void **v93;
  void *v94;
  void **v95;
  void **v96;
  void *v97;
  void **v98;
  _QWORD *v99;
  _QWORD *v100;
  BOOL v101;
  _QWORD *v102;
  void **v103;
  void **v104;
  void *v105;
  void **v106;
  void **v107;
  void *v108;
  void **v109;
  void **v110;
  void *v111;
  void **v112;
  _QWORD *v113;
  _QWORD *v114;
  char *v115;
  char *v116;
  uint64_t v117;
  id **v118;
  double v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  id v123;
  void *v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  const char *v130;
  uint64_t v131;
  const char *v132;
  size_t v133;
  std::string::size_type v134;
  std::string *v135;
  size_t v136;
  std::string::size_type v137;
  std::string *p_p;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  id *v146;
  unsigned int v147;
  char *v148;
  float64x2_t *v149;
  double v150;
  double v151;
  double v152;
  double v153;
  double v154;
  double v155;
  double v156;
  double v157;
  double v158;
  double v159;
  double v160;
  float64x2_t v161;
  _BOOL4 v162;
  double v163;
  float64_t v164;
  double v165;
  double v166;
  double v167;
  int v168;
  _BOOL4 v169;
  double v170;
  uint64_t v171;
  double v172;
  double v173;
  double v174;
  double v175;
  double v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  char *v180;
  uint64_t *v181;
  uint64_t v182;
  _QWORD *v183;
  uint64_t v184;
  _QWORD *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  float v189;
  unsigned int v190;
  char *v191;
  double v192;
  id v193;
  char *v194;
  id v195;
  id v196;
  id v197;
  float v198;
  long double v199;
  double v200;
  long double v201;
  double v202;
  double v203;
  double v204;
  double v205;
  double v206;
  __double2 v207;
  char *v208;
  int8x8_t v209;
  unint64_t v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t v213;
  uint8x8_t v214;
  unint64_t v215;
  _QWORD *v216;
  _QWORD *v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  double *v221;
  double *v222;
  double *v223;
  __int128 v224;
  __int128 v225;
  uint64_t v226;
  double *v227;
  double *v228;
  uint64_t v229;
  double v230;
  double v231;
  double v232;
  long double v233;
  double v234;
  long double v235;
  long double v236;
  char *v237;
  char *v238;
  char *v239;
  double v240;
  unsigned int v241;
  const md::LabelManager *v242;
  char *v243;
  id **v244;
  char *v245;
  uint64_t v246;
  double *v247;
  uint64_t v248;
  id *v249;
  char *v250;
  id **v251;
  long double v252;
  long double v253;
  long double v254;
  double v255;
  double v256;
  float v257;
  double v258;
  double v259;
  double v260;
  int v261;
  double v262;
  uint64_t v263;
  _QWORD *v264;
  double v265;
  uint64_t v266;
  _QWORD *v267;
  id v268;
  double v269;
  char *v270;
  char *v271;
  char *v272;
  double v273;
  char v274[16];
  double v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  int v279;
  char v280[16];
  double v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  int v285;
  char v286[16];
  long double v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  int v291;
  char v292[16];
  double v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  int v297;
  char v298[16];
  double v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  int v303;
  char v304[16];
  double v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  int v309;
  char v310[16];
  double v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  int v315;
  char v316[16];
  double v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  int v321;
  char v322[16];
  double v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  int v327;
  char v328[16];
  double v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  int v333;
  char v334[16];
  id v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  int v339;
  char v340[16];
  id v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  int v345;
  char v346[16];
  id v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  int v351;
  char v352[16];
  id v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  int v357;
  char v358[16];
  double v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  int v363;
  char v364[16];
  double v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  int v369;
  char v370[16];
  double v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  int v375;
  char v376[16];
  double v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  int v381;
  char v382[16];
  double v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  int v387;
  _QWORD v388[7];
  int v389;
  char v390[16];
  double v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  int v395;
  char v396[32];
  std::string v397;
  int v398;
  char v399[16];
  double v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  int v404;
  char v405[16];
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  int v410;
  char v411[16];
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  int v416;
  char v417[16];
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  int v422;
  char v423[16];
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  int v428;
  char v429[16];
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  int v434;
  _QWORD v435[7];
  int v436;
  _QWORD v437[7];
  int v438;
  char v439[32];
  std::string v440;
  int v441;
  _QWORD v442[7];
  int v443;
  char v444[16];
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  int v449;
  char v450[16];
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  int v455;
  char v456[16];
  double v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  int v461;
  char v462[16];
  double v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  int v467;
  char v468[16];
  double v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  int v473;
  char v474[16];
  double v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  int v479;
  char v480[16];
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  int v485;
  char v486[16];
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  int v491;
  char v492[16];
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  int v497;
  char v498[16];
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  int v503;
  char v504[16];
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  int v509;
  char v510[16];
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  int v515;
  char v516[16];
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  int v521;
  char v522[16];
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  int v527;
  char v528[16];
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  int v533;
  char v534[16];
  double v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  int v539;
  char v540[8];
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  int v545;
  _QWORD v546[7];
  int v547;
  char v548[32];
  std::string v549;
  int v550;
  char v551[32];
  std::string v552;
  int v553;
  __int128 v554[2];
  char v555[8];
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  int v560;
  _QWORD v561[2];
  char v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  int v566;
  char v567[32];
  _QWORD v568[2];
  char v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  int v573;
  _QWORD v574[2];
  char v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  int v579;
  __int128 v580;
  char v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  int v585;
  _QWORD v586[2];
  char v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  int v591;
  _BYTE v592[24];
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  int v596;
  _BYTE v597[24];
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  int v601;
  std::string v602;
  void *v603;
  uint64_t v604;
  uint64_t v605;
  void **v606;
  int v607;
  void *v608;
  void **v609;
  std::string __p;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  int v614;
  std::string __dst;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  int v619;

  v1 = MEMORY[0x1E0C80A78](a1);
  v3 = v2;
  v4 = v1;
  md::StandardLabeler::populateDebugNode(v1, v2, v5);
  v246 = v4;
  v6 = *(_QWORD **)(v4 + 440);
  BYTE7(v554[1]) = 16;
  strcpy((char *)v554, "ARWalkingSupport");
  v266 = v3;
  ChildNode = gdc::DebugTreeNode::createChildNode(v3, v554);
  *((_BYTE *)&v602.__r_.__value_.__s + 23) = 17;
  strcpy((char *)&v602, "ARWalkingFeatures");
  v263 = (uint64_t)ChildNode;
  v8 = gdc::DebugTreeNode::createChildNode((uint64_t)ChildNode, (__int128 *)&v602);
  v9 = v6[97];
  v10 = (char *)operator new(0x20uLL);
  v602.__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
  *(_OWORD *)&v602.__r_.__value_.__r.__words[1] = xmmword_19FFB3890;
  strcpy(v10, "HighPrecisionAltitudeRequestor");
  v11 = gdc::DebugTreeNode::createChildNode((uint64_t)v8, (__int128 *)&v602);
  operator delete(v10);
  *((_BYTE *)&v602.__r_.__value_.__s + 23) = 5;
  strcpy((char *)&v602, "Stats");
  v270 = gdc::DebugTreeNode::createChildNode((uint64_t)v11, (__int128 *)&v602);
  *((_BYTE *)&v602.__r_.__value_.__s + 23) = 10;
  strcpy((char *)&v602, "Undulation");
  v12 = gdc::DebugTreeNode::createChildNode((uint64_t)v270, (__int128 *)&v602);
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 9;
  strcpy((char *)&__dst, "cacheHits");
  v13 = *(unsigned int *)(v9 + 408);
  v606 = 0;
  v605 = 0;
  v607 = 1;
  v604 = 0;
  v602.__r_.__value_.__l.__size_ = v13;
  gdc::DebugTreeNode::addProperty((uint64_t)v12, (uint64_t)&__dst, (uint64_t)&v602);
  v14 = *(unsigned int *)(v9 + 412);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 11;
  strcpy((char *)&__p, "cacheMisses");
  v617 = 0;
  v618 = 0;
  v619 = 1;
  v616 = 0;
  __dst.__r_.__value_.__l.__size_ = v14;
  gdc::DebugTreeNode::addProperty((uint64_t)v12, (uint64_t)&__p, (uint64_t)&__dst);
  v15 = *(unsigned int *)(v9 + 232);
  v597[23] = 14;
  strcpy(v597, "cachedRequests");
  v613 = 0;
  v612 = 0;
  v614 = 1;
  v611 = 0;
  __p.__r_.__value_.__l.__size_ = v15;
  gdc::DebugTreeNode::addProperty((uint64_t)v12, (uint64_t)v597, (uint64_t)&__p);
  v597[23] = 2;
  strcpy(v597, "VL");
  v16 = gdc::DebugTreeNode::createChildNode((uint64_t)v270, (__int128 *)v597);
  v592[23] = 9;
  strcpy(v592, "cacheHits");
  v17 = *(unsigned int *)(v9 + 416);
  v600 = 0;
  v599 = 0;
  v601 = 1;
  v598 = 0;
  *(_QWORD *)&v597[8] = v17;
  gdc::DebugTreeNode::addProperty((uint64_t)v16, (uint64_t)v592, (uint64_t)v597);
  v18 = *(unsigned int *)(v9 + 420);
  v587 = 11;
  strcpy((char *)v586, "cacheMisses");
  v595 = 0;
  v594 = 0;
  v596 = 1;
  v593 = 0;
  *(_QWORD *)&v592[8] = v18;
  gdc::DebugTreeNode::addProperty((uint64_t)v16, (uint64_t)v586, (uint64_t)v592);
  v19 = *(unsigned int *)(v9 + 160);
  v581 = 14;
  strcpy((char *)&v580, "cachedRequests");
  v590 = 0;
  v589 = 0;
  v591 = 1;
  v588 = 0;
  v586[1] = v19;
  gdc::DebugTreeNode::addProperty((uint64_t)v16, (uint64_t)&v580, (uint64_t)v586);
  v581 = 8;
  strcpy((char *)&v580, "Requests");
  v20 = gdc::DebugTreeNode::createChildNode((uint64_t)v270, &v580);
  v575 = 9;
  strcpy((char *)v574, "cacheHits");
  v21 = *(unsigned int *)(v9 + 424);
  v584 = 0;
  v583 = 0;
  v585 = 1;
  v582 = 0;
  *((_QWORD *)&v580 + 1) = v21;
  gdc::DebugTreeNode::addProperty((uint64_t)v20, (uint64_t)v574, (uint64_t)&v580);
  v22 = *(unsigned int *)(v9 + 428);
  v569 = 11;
  strcpy((char *)v568, "cacheMisses");
  v578 = 0;
  v577 = 0;
  v579 = 1;
  v576 = 0;
  v574[1] = v22;
  gdc::DebugTreeNode::addProperty((uint64_t)v20, (uint64_t)v568, (uint64_t)v574);
  v23 = *(unsigned int *)(v9 + 304);
  v562 = 14;
  strcpy((char *)v561, "cachedRequests");
  v572 = 0;
  v571 = 0;
  v573 = 1;
  v570 = 0;
  v568[1] = v23;
  gdc::DebugTreeNode::addProperty((uint64_t)v20, (uint64_t)v561, (uint64_t)v568);
  for (i = *(_QWORD *)(v9 + 328); i != v9 + 320; i = *(_QWORD *)(i + 8))
    ;
  v567[23] = 18;
  strcpy(v567, "deviceLocationHits");
  v25 = *(unsigned int *)(v9 + 432);
  v565 = 0;
  v564 = 0;
  v566 = 1;
  v563 = 0;
  v561[1] = v25;
  gdc::DebugTreeNode::addProperty((uint64_t)v20, (uint64_t)v567, (uint64_t)v561);
  v26 = v6[58];
  v27 = v6[59];
  if (v26 == v27)
    goto LABEL_24;
  *((_BYTE *)&v602.__r_.__value_.__s + 23) = 12;
  strcpy((char *)&v602, "FeatureCount");
  v559 = 0;
  v558 = 0;
  v560 = 1;
  v557 = 0;
  v556 = -1431655765 * ((unint64_t)(v27 - v26) >> 3);
  gdc::DebugTreeNode::addProperty(v263, (uint64_t)&v602, (uint64_t)v555);
  v28 = v6[58];
  v29 = v6[59];
  if (v28 == v29)
  {
LABEL_24:
    v40 = v246;
    goto LABEL_27;
  }
  v30 = 1;
  v31 = (uint64_t)v8;
  do
  {
    v32 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v28 + 8) + 264))(*(_QWORD *)(v28 + 8));
    md::to_string((uint64_t)&v602, v32);
    if ((v602.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v33 = &v602;
    else
      v33 = (std::string *)v602.__r_.__value_.__r.__words[0];
    v34 = strlen((const char *)v33);
    if (v34 > 0x7FFFFFFFFFFFFFF7)
      abort();
    v35 = v34;
    if (v34 >= 0x17)
    {
      v37 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v34 | 7) != 0x17)
        v37 = v34 | 7;
      v38 = v37 + 1;
      p_dst = (std::string *)operator new(v37 + 1);
      __dst.__r_.__value_.__l.__size_ = v35;
      __dst.__r_.__value_.__r.__words[2] = v38 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      v31 = (uint64_t)v8;
LABEL_17:
      memmove(p_dst, v33, v35);
      goto LABEL_18;
    }
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v34;
    p_dst = &__dst;
    if (v34)
      goto LABEL_17;
LABEL_18:
    p_dst->__r_.__value_.__s.__data_[v35] = 0;
    std::to_string(&__p, v30);
    v39 = gdc::DebugTreeNode::createChildNode(v31, (__int128 *)&__dst, (__int128 *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_20;
    }
    else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_20;
    }
    operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_20:
    (*(void (**)(_QWORD, char *, _QWORD))(**(_QWORD **)(v28 + 8) + 464))(*(_QWORD *)(v28 + 8), v39, *v6);
    v40 = v246;
    if (SHIBYTE(v602.__r_.__value_.__r.__words[2]) < 0)
      (*(void (**)(void *, std::string::size_type, std::string::size_type))(*(_QWORD *)v603 + 40))(v603, v602.__r_.__value_.__r.__words[0], v602.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL);
    v28 += 24;
    ++v30;
  }
  while (v28 != v29);
  if (SBYTE7(v554[1]) < 0)
    operator delete(*(void **)&v554[0]);
LABEL_27:
  v248 = *(_QWORD *)(v40 + 24);
  v41 = *(double *)(v40 + 2080);
  v42 = *(double *)(v40 + 2064) * 6.28318531;
  v43 = exp(*(double *)(v40 + 2072) * 6.28318531 + -3.14159265);
  v44 = atan(v43);
  v45 = fmod(v42, 6.28318531);
  v46 = fmod(v45 + 6.28318531, 6.28318531);
  *((_BYTE *)&v602.__r_.__value_.__s + 23) = 16;
  strcpy((char *)&v602, "ARWalkingLabeler");
  v245 = gdc::DebugTreeNode::createChildNode(v266, (__int128 *)&v602);
  v47 = *(unsigned __int8 *)(v40 + 2195);
  *((_BYTE *)&v602.__r_.__value_.__s + 23) = 14;
  strcpy((char *)&v602, "arSessionState");
  if (v47 > 3)
    v48 = "<Invalid>";
  else
    v48 = off_1E42F8718[v47];
  memset(&v552, 0, sizeof(v552));
  v553 = 4;
  std::string::__assign_external(&v552, v48);
  gdc::DebugTreeNode::addProperty((uint64_t)v245, (uint64_t)&v602, (uint64_t)v551);
  if (SHIBYTE(v552.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v552.__r_.__value_.__l.__data_);
  v49 = *(unsigned __int8 *)(v246 + 2192);
  *((_BYTE *)&v602.__r_.__value_.__s + 23) = 19;
  strcpy((char *)&v602, "arLocalizationState");
  if (v49 > 3)
    v50 = "<Invalid>";
  else
    v50 = off_1E42F6CD8[v49];
  v51 = v41 * 40075017.0;
  v52 = v46 * 57.2957795 + -180.0;
  v53 = v44 * 114.591559 + -90.0;
  memset(&v549, 0, sizeof(v549));
  v550 = 4;
  std::string::__assign_external(&v549, v50);
  gdc::DebugTreeNode::addProperty((uint64_t)v245, (uint64_t)&v602, (uint64_t)v548);
  if (SHIBYTE(v549.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v549.__r_.__value_.__l.__data_);
  v54 = *(unsigned __int8 *)(v246 + 400);
  *((_BYTE *)&v602.__r_.__value_.__s + 23) = 18;
  strcpy((char *)&v602, "shouldLayoutLabels");
  v547 = 0;
  memset(&v546[4], 0, 24);
  v546[0] = v54;
  gdc::DebugTreeNode::addProperty((uint64_t)v245, (uint64_t)&v602, (uint64_t)v546);
  *((_BYTE *)&v602.__r_.__value_.__s + 23) = 15;
  strcpy((char *)&v602, "userRouteOffset");
  v55 = gdc::DebugTreeNode::createChildNode((uint64_t)v245, (__int128 *)&v602);
  v56 = *(unsigned int *)(*(_QWORD *)(v246 + 24) + 3560);
  *((_BYTE *)&v602.__r_.__value_.__s + 23) = 5;
  strcpy((char *)&v602, "index");
  v544 = 0;
  v543 = 0;
  v545 = 1;
  v542 = 0;
  v541 = v56;
  gdc::DebugTreeNode::addProperty((uint64_t)v55, (uint64_t)&v602, (uint64_t)v540);
  v57 = *(float *)(*(_QWORD *)(v246 + 24) + 3564);
  *((_BYTE *)&v602.__r_.__value_.__s + 23) = 6;
  strcpy((char *)&v602, "offset");
  v538 = 0;
  v536 = 0;
  v537 = 0;
  v539 = 2;
  v535 = v57;
  gdc::DebugTreeNode::addProperty((uint64_t)v55, (uint64_t)&v602, (uint64_t)v534);
  *((_BYTE *)&v602.__r_.__value_.__s + 23) = 6;
  strcpy((char *)&v602, "eyePos");
  v58 = gdc::DebugTreeNode::createChildNode((uint64_t)v245, (__int128 *)&v602);
  v59 = *(_QWORD *)(v248 + 576);
  *((_BYTE *)&v602.__r_.__value_.__s + 23) = 1;
  strcpy((char *)&v602, "x");
  v532 = 0;
  v530 = 0;
  v531 = 0;
  v533 = 2;
  v529 = v59;
  gdc::DebugTreeNode::addProperty((uint64_t)v58, (uint64_t)&v602, (uint64_t)v528);
  v60 = *(_QWORD *)(v248 + 584);
  *((_BYTE *)&v602.__r_.__value_.__s + 23) = 1;
  strcpy((char *)&v602, "y");
  v526 = 0;
  v524 = 0;
  v525 = 0;
  v527 = 2;
  v523 = v60;
  gdc::DebugTreeNode::addProperty((uint64_t)v58, (uint64_t)&v602, (uint64_t)v522);
  v61 = *(_QWORD *)(v248 + 592);
  *((_BYTE *)&v602.__r_.__value_.__s + 23) = 1;
  strcpy((char *)&v602, "z");
  v520 = 0;
  v518 = 0;
  v519 = 0;
  v521 = 2;
  v517 = v61;
  gdc::DebugTreeNode::addProperty((uint64_t)v58, (uint64_t)&v602, (uint64_t)v516);
  *((_BYTE *)&v602.__r_.__value_.__s + 23) = 11;
  strcpy((char *)&v602, "resolvedEye");
  v62 = gdc::DebugTreeNode::createChildNode((uint64_t)v245, (__int128 *)&v602);
  v63 = *(_QWORD *)(v246 + 2064);
  *((_BYTE *)&v602.__r_.__value_.__s + 23) = 1;
  strcpy((char *)&v602, "x");
  v514 = 0;
  v512 = 0;
  v513 = 0;
  v515 = 2;
  v511 = v63;
  gdc::DebugTreeNode::addProperty((uint64_t)v62, (uint64_t)&v602, (uint64_t)v510);
  v64 = *(_QWORD *)(v246 + 2072);
  *((_BYTE *)&v602.__r_.__value_.__s + 23) = 1;
  strcpy((char *)&v602, "y");
  v508 = 0;
  v506 = 0;
  v507 = 0;
  v509 = 2;
  v505 = v64;
  gdc::DebugTreeNode::addProperty((uint64_t)v62, (uint64_t)&v602, (uint64_t)v504);
  v65 = *(_QWORD *)(v246 + 2080);
  *((_BYTE *)&v602.__r_.__value_.__s + 23) = 1;
  strcpy((char *)&v602, "z");
  v502 = 0;
  v500 = 0;
  v501 = 0;
  v503 = 2;
  v499 = v65;
  gdc::DebugTreeNode::addProperty((uint64_t)v62, (uint64_t)&v602, (uint64_t)v498);
  *((_BYTE *)&v602.__r_.__value_.__s + 23) = 8;
  strcpy((char *)&v602, "eyeCoord");
  v66 = gdc::DebugTreeNode::createChildNode((uint64_t)v245, (__int128 *)&v602);
  v67 = *(_QWORD *)(v246 + 408);
  *((_BYTE *)&v602.__r_.__value_.__s + 23) = 3;
  strcpy((char *)&v602, "lat");
  v496 = 0;
  v494 = 0;
  v495 = 0;
  v497 = 2;
  v493 = v67;
  gdc::DebugTreeNode::addProperty((uint64_t)v66, (uint64_t)&v602, (uint64_t)v492);
  v68 = *(_QWORD *)(v246 + 416);
  *((_BYTE *)&v602.__r_.__value_.__s + 23) = 3;
  strcpy((char *)&v602, "lng");
  v490 = 0;
  v488 = 0;
  v489 = 0;
  v491 = 2;
  v487 = v68;
  gdc::DebugTreeNode::addProperty((uint64_t)v66, (uint64_t)&v602, (uint64_t)v486);
  v69 = *(_QWORD *)(v246 + 424);
  *((_BYTE *)&v602.__r_.__value_.__s + 23) = 3;
  strcpy((char *)&v602, "alt");
  v484 = 0;
  v482 = 0;
  v483 = 0;
  v485 = 2;
  v481 = v69;
  gdc::DebugTreeNode::addProperty((uint64_t)v66, (uint64_t)&v602, (uint64_t)v480);
  *((_BYTE *)&v602.__r_.__value_.__s + 23) = 16;
  strcpy((char *)&v602, "resolvedEyeCoord");
  v70 = gdc::DebugTreeNode::createChildNode((uint64_t)v245, (__int128 *)&v602);
  *((_BYTE *)&v602.__r_.__value_.__s + 23) = 3;
  strcpy((char *)&v602, "lat");
  v478 = 0;
  v476 = 0;
  v477 = 0;
  v479 = 2;
  v475 = v53;
  gdc::DebugTreeNode::addProperty((uint64_t)v70, (uint64_t)&v602, (uint64_t)v474);
  *((_BYTE *)&v602.__r_.__value_.__s + 23) = 3;
  strcpy((char *)&v602, "lng");
  v472 = 0;
  v470 = 0;
  v471 = 0;
  v473 = 2;
  v469 = v52;
  gdc::DebugTreeNode::addProperty((uint64_t)v70, (uint64_t)&v602, (uint64_t)v468);
  *((_BYTE *)&v602.__r_.__value_.__s + 23) = 3;
  strcpy((char *)&v602, "alt");
  v466 = 0;
  v464 = 0;
  v465 = 0;
  v467 = 2;
  v463 = v51;
  gdc::DebugTreeNode::addProperty((uint64_t)v70, (uint64_t)&v602, (uint64_t)v462);
  v71 = *(double *)(v248 + 592);
  *((_BYTE *)&v602.__r_.__value_.__s + 23) = 9;
  strcpy((char *)&v602, "elevation");
  v460 = 0;
  v458 = 0;
  v459 = 0;
  v461 = 2;
  v457 = v71 * 40075017.0;
  gdc::DebugTreeNode::addProperty((uint64_t)v245, (uint64_t)&v602, (uint64_t)v456);
  v72 = *(_QWORD *)(v246 + 776);
  *((_BYTE *)&v602.__r_.__value_.__s + 23) = 14;
  strcpy((char *)&v602, "min clip range");
  v454 = 0;
  v452 = 0;
  v453 = 0;
  v455 = 2;
  v451 = v72;
  gdc::DebugTreeNode::addProperty((uint64_t)v245, (uint64_t)&v602, (uint64_t)v450);
  v73 = *(_QWORD *)(v246 + 856);
  *((_BYTE *)&v602.__r_.__value_.__s + 23) = 14;
  strcpy((char *)&v602, "max clip range");
  v448 = 0;
  v446 = 0;
  v447 = 0;
  v449 = 2;
  v74 = v246;
  v445 = v73;
  gdc::DebugTreeNode::addProperty((uint64_t)v245, (uint64_t)&v602, (uint64_t)v444);
  v75 = *(_QWORD *)(v246 + 2200);
  if (v75)
  {
    *((_BYTE *)&v602.__r_.__value_.__s + 23) = 18;
    strcpy((char *)&v602, "ARWorldIntersector");
    v76 = gdc::DebugTreeNode::createChildNode((uint64_t)v245, (__int128 *)&v602);
    v77 = (char *)operator new(0x20uLL);
    v602.__r_.__value_.__r.__words[0] = (std::string::size_type)v77;
    *(_OWORD *)&v602.__r_.__value_.__r.__words[1] = xmmword_19FFB3800;
    strcpy(v77, "isGroundOcclusionEnabled");
    v78 = *(unsigned __int8 *)(v75 + 129);
    v617 = 0;
    v618 = 0;
    v619 = 0;
    v616 = 0;
    __dst.__r_.__value_.__r.__words[0] = v78;
    gdc::DebugTreeNode::addProperty((uint64_t)v76, (uint64_t)&v602, (uint64_t)&__dst);
    operator delete(v77);
    v79 = (char *)operator new(0x20uLL);
    v602.__r_.__value_.__r.__words[0] = (std::string::size_type)v79;
    *(_OWORD *)&v602.__r_.__value_.__r.__words[1] = xmmword_19FFB3620;
    strcpy(v79, "isBuildingOcclusionEnabled");
    v80 = *(unsigned __int8 *)(v75 + 128);
    v613 = 0;
    v612 = 0;
    v614 = 0;
    v611 = 0;
    __p.__r_.__value_.__r.__words[0] = v80;
    v271 = v76;
    gdc::DebugTreeNode::addProperty((uint64_t)v76, (uint64_t)&v602, (uint64_t)&__p);
    operator delete(v79);
    v586[0] = 0;
    v81 = *(_QWORD **)v75;
    v264 = (_QWORD *)v75;
    v82 = (_QWORD *)(v75 + 8);
    if (v81 != v82)
    {
      v83 = 0;
      v84 = &v606;
      v267 = v82;
      while (1)
      {
        v85 = gdc::Registry::storage<arComponents::LocalBounds>(*(_QWORD *)(v81[4] + 784));
        v87 = *(_QWORD *)(v85 + 80);
        v86 = *(_QWORD *)(v85 + 88);
        gdc::LayerDataKey::createDebugNode((uint64_t)&v602, (unsigned __int16 *)(v81[4] + 24));
        gdc::DebugTreeNode::addChildNode(v271, (__int128 *)&v602);
        v88 = (void **)v608;
        if (v608)
        {
          v89 = v609;
          v90 = v608;
          if (v609 != v608)
          {
            v91 = v84;
            do
            {
              v92 = (void **)*(v89 - 3);
              if (v92)
              {
                v93 = (void **)*(v89 - 2);
                v94 = *(v89 - 3);
                if (v93 != v92)
                {
                  do
                  {
                    if (*((char *)v93 - 1) < 0)
                      operator delete(*(v93 - 3));
                    v93 -= 3;
                  }
                  while (v93 != v92);
                  v94 = *(v89 - 3);
                }
                *(v89 - 2) = v92;
                operator delete(v94);
              }
              v95 = (void **)*(v89 - 6);
              if (v95)
              {
                v96 = (void **)*(v89 - 5);
                v97 = *(v89 - 6);
                if (v96 != v95)
                {
                  do
                  {
                    if (*((char *)v96 - 9) < 0)
                      operator delete(*(v96 - 4));
                    v96 -= 8;
                  }
                  while (v96 != v95);
                  v97 = *(v89 - 6);
                }
                *(v89 - 5) = v95;
                operator delete(v97);
              }
              v98 = v89 - 10;
              if (*((char *)v89 - 57) < 0)
                operator delete(*v98);
              v89 -= 10;
            }
            while (v98 != v88);
            v90 = v608;
            v74 = v246;
            v84 = v91;
            v82 = v267;
          }
          v609 = v88;
          operator delete(v90);
        }
        std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](v84);
        if (SHIBYTE(v605) < 0)
          operator delete(v603);
        if (SHIBYTE(v602.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v602.__r_.__value_.__l.__data_);
          v99 = (_QWORD *)v81[1];
          if (v99)
          {
            do
            {
LABEL_71:
              v100 = v99;
              v99 = (_QWORD *)*v99;
            }
            while (v99);
            goto LABEL_40;
          }
        }
        else
        {
          v99 = (_QWORD *)v81[1];
          if (v99)
            goto LABEL_71;
        }
        do
        {
          v100 = (_QWORD *)v81[2];
          v101 = *v100 == (_QWORD)v81;
          v81 = v100;
        }
        while (!v101);
LABEL_40:
        v83 -= 0x30C30C30C30C30C3 * ((v86 - v87) >> 3);
        v81 = v100;
        if (v100 == v82)
          goto LABEL_77;
      }
    }
    LODWORD(v83) = 0;
LABEL_77:
    v102 = (_QWORD *)v264[3];
    if (v102 != v264 + 4)
    {
      while (2)
      {
        (*(void (**)(std::string *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)v102[5] + 24))(&v602, v102[5], v586);
        gdc::DebugTreeNode::addChildNode(v271, (__int128 *)&v602);
        v103 = (void **)v608;
        if (v608)
        {
          v104 = v609;
          v105 = v608;
          if (v609 != v608)
          {
            do
            {
              v106 = (void **)*(v104 - 3);
              if (v106)
              {
                v107 = (void **)*(v104 - 2);
                v108 = *(v104 - 3);
                if (v107 != v106)
                {
                  do
                  {
                    if (*((char *)v107 - 1) < 0)
                      operator delete(*(v107 - 3));
                    v107 -= 3;
                  }
                  while (v107 != v106);
                  v108 = *(v104 - 3);
                }
                *(v104 - 2) = v106;
                operator delete(v108);
              }
              v109 = (void **)*(v104 - 6);
              if (v109)
              {
                v110 = (void **)*(v104 - 5);
                v111 = *(v104 - 6);
                if (v110 != v109)
                {
                  do
                  {
                    if (*((char *)v110 - 9) < 0)
                      operator delete(*(v110 - 4));
                    v110 -= 8;
                  }
                  while (v110 != v109);
                  v111 = *(v104 - 6);
                }
                *(v104 - 5) = v109;
                operator delete(v111);
              }
              v112 = v104 - 10;
              if (*((char *)v104 - 57) < 0)
                operator delete(*v112);
              v104 -= 10;
            }
            while (v112 != v103);
            v105 = v608;
            v74 = v246;
          }
          v609 = v103;
          operator delete(v105);
        }
        std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v606);
        if (SHIBYTE(v605) < 0)
          operator delete(v603);
        if (SHIBYTE(v602.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v602.__r_.__value_.__l.__data_);
          v113 = (_QWORD *)v102[1];
          if (v113)
            goto LABEL_110;
          do
          {
LABEL_112:
            v114 = (_QWORD *)v102[2];
            v101 = *v114 == (_QWORD)v102;
            v102 = v114;
          }
          while (!v101);
        }
        else
        {
          v113 = (_QWORD *)v102[1];
          if (!v113)
            goto LABEL_112;
          do
          {
LABEL_110:
            v114 = v113;
            v113 = (_QWORD *)*v113;
          }
          while (v113);
        }
        v102 = v114;
        if (v114 == v264 + 4)
          break;
        continue;
      }
    }
    v115 = (char *)operator new(0x20uLL);
    *(_QWORD *)v597 = v115;
    *(_OWORD *)&v597[8] = xmmword_19FFB3880;
    strcpy(v115, "buildingOcclusionBoundsCount");
    v606 = 0;
    v605 = 0;
    v607 = 1;
    v604 = 0;
    v602.__r_.__value_.__l.__size_ = v83;
    gdc::DebugTreeNode::addProperty((uint64_t)v271, (uint64_t)v597, (uint64_t)&v602);
    operator delete(v115);
    v116 = (char *)operator new(0x20uLL);
    *(_QWORD *)v592 = v116;
    *(_OWORD *)&v592[8] = xmmword_19FFB3620;
    strcpy(v116, "groundOcclusionBoundsCount");
    v117 = -1431655765 * ((v264[14] - v264[13]) >> 4);
    v600 = 0;
    v599 = 0;
    v601 = 1;
    v598 = 0;
    *(_QWORD *)&v597[8] = v117;
    gdc::DebugTreeNode::addProperty((uint64_t)v271, (uint64_t)v592, (uint64_t)v597);
    operator delete(v116);
  }
  v118 = *(id ***)(v74 + 2016);
  v244 = *(id ***)(v74 + 2024);
  if (v118 != v244)
  {
    v119 = 1.0;
    v247 = (double *)(v74 + 2088);
    do
    {
      ARStringForFeature(&v602, v118);
      v120 = *(_QWORD *)(v74 + 2240);
      if (v120 && *v118 == *(id **)(v120 + 8))
        std::string::append(&v602, "  - ACTIVE", 0xAuLL);
      v250 = gdc::DebugTreeNode::createChildNode((uint64_t)v245, (__int128 *)&v602);
      v251 = v118;
      if ((*((unsigned int (**)(id *))**v118 + 33))(*v118) == 25
        || (*((unsigned int (**)(id *))**v118 + 33))(*v118) == 27)
      {
        v121 = (*((uint64_t (**)(id *))**v118 + 33))(*v118);
        v122 = 29;
        if (v121 == 27)
          v122 = 88;
        v123 = (*v118)[v122];
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 14;
        strcpy((char *)&__dst, "hasStoreFronts");
        v268 = v123;
        objc_msgSend(v123, "storeFronts");
        v124 = (void *)objc_claimAutoreleasedReturnValue();
        v125 = objc_msgSend(v124, "count");
        memset(&v442[4], 0, 24);
        v443 = 0;
        v442[0] = v125 != 0;
        gdc::DebugTreeNode::addProperty((uint64_t)v250, (uint64_t)&__dst, (uint64_t)v442);

        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 15;
        strcpy((char *)&__dst, "StyleAttributes");
        v272 = gdc::DebugTreeNode::createChildNode((uint64_t)v250, (__int128 *)&__dst);
        (*((void (**)(_BYTE *__return_ptr, id *, _QWORD))**v251 + 73))(v597, *v251, 0);
        v126 = *(uint64_t **)v597;
        if (*(_BYTE *)(*(_QWORD *)v597 + 33))
        {
          v127 = 0;
          v128 = 0;
          do
          {
            v129 = *v126;
            v130 = gss::to_string(*(_DWORD *)(*v126 + v127));
            v131 = v129 + v127;
            v132 = gss::to_string(*(_DWORD *)(v129 + v127), *(_WORD *)(v129 + v127 + 4));
            if (v130)
            {
              v133 = strlen(v130);
              if (v133 > 0x7FFFFFFFFFFFFFF7)
                abort();
              v134 = v133;
              if (v133 >= 0x17)
              {
                v139 = (v133 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v133 | 7) != 0x17)
                  v139 = v133 | 7;
                v140 = v139 + 1;
                v135 = (std::string *)operator new(v139 + 1);
                __dst.__r_.__value_.__l.__size_ = v134;
                __dst.__r_.__value_.__r.__words[2] = v140 | 0x8000000000000000;
                __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v135;
              }
              else
              {
                *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v133;
                v135 = &__dst;
                if (!v133)
                {
                  __dst.__r_.__value_.__s.__data_[0] = 0;
                  if (!v132)
                    goto LABEL_135;
                  goto LABEL_137;
                }
              }
              memmove(v135, v130, v134);
              v135->__r_.__value_.__s.__data_[v134] = 0;
              if (!v132)
              {
LABEL_135:
                std::to_string(&__p, *(_DWORD *)(v131 + 4));
                goto LABEL_151;
              }
            }
            else
            {
              std::to_string(&__dst, *(_DWORD *)(v129 + v127));
              if (!v132)
                goto LABEL_135;
            }
LABEL_137:
            v136 = strlen(v132);
            if (v136 > 0x7FFFFFFFFFFFFFF7)
              abort();
            v137 = v136;
            if (v136 >= 0x17)
            {
              v141 = (v136 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v136 | 7) != 0x17)
                v141 = v136 | 7;
              v142 = v141 + 1;
              p_p = (std::string *)operator new(v141 + 1);
              __p.__r_.__value_.__r.__words[2] = v142 | 0x8000000000000000;
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
              __p.__r_.__value_.__l.__size_ = v137;
            }
            else
            {
              *((_BYTE *)&__p.__r_.__value_.__s + 23) = v136;
              p_p = &__p;
              if (!v136)
                goto LABEL_150;
            }
            memmove(p_p, v132, v137);
LABEL_150:
            p_p->__r_.__value_.__s.__data_[v137] = 0;
LABEL_151:
            memset(&v440, 0, sizeof(v440));
            v441 = 4;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              std::string::__assign_no_alias<true>(&v440, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
            else
              v440 = __p;
            gdc::DebugTreeNode::addProperty((uint64_t)v272, (uint64_t)&__dst, (uint64_t)v439);
            if (SHIBYTE(v440.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v440.__r_.__value_.__l.__data_);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              {
LABEL_128:
                operator delete(__p.__r_.__value_.__l.__data_);
                if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                  goto LABEL_159;
                goto LABEL_129;
              }
            }
            else if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            {
              goto LABEL_128;
            }
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
LABEL_159:
              operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_129:
            ++v128;
            v126 = *(uint64_t **)v597;
            v127 += 8;
          }
          while (v128 < *(unsigned __int8 *)(*(_QWORD *)v597 + 33));
        }
        v143 = *(std::__shared_weak_count **)&v597[8];
        v74 = v246;
        if (*(_QWORD *)&v597[8])
        {
          v144 = (unint64_t *)(*(_QWORD *)&v597[8] + 8);
          do
            v145 = __ldaxr(v144);
          while (__stlxr(v145 - 1, v144));
          if (!v145)
          {
            ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
            std::__shared_weak_count::__release_weak(v143);
          }
        }

      }
      v146 = v251[2];
      v249 = v251[3];
      if (v146 == v249)
        goto LABEL_237;
      do
      {
        v147 = *((_DWORD *)v146 + 8);
        if (v147)
        {
          std::to_string(&__dst, v147);
        }
        else
        {
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 7;
          strcpy((char *)&__dst, "UNKNOWN");
        }
        v148 = gdc::DebugTreeNode::createChildNode((uint64_t)v250, (__int128 *)&__dst);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        v149 = *(float64x2_t **)(v74 + 24);
        v273 = *(double *)(v74 + 656);
        v150 = v149[36].f64[0];
        v151 = *((double *)v146 + 5);
        v152 = *((double *)v146 + 6);
        v153 = v149[36].f64[1];
        v154 = *((double *)v146 + 7);
        v155 = v149[37].f64[0];
        v156 = v149[37].f64[1];
        v157 = v149[38].f64[0];
        v158 = v149[38].f64[1];
        v159 = v119 / (v149[81].f64[0] + v149[75].f64[0] * v151 + v149[77].f64[0] * v152 + v149[79].f64[0] * v154);
        v160 = v159 * (v149[79].f64[1] + v149[73].f64[1] * v151 + v149[75].f64[1] * v152 + v149[77].f64[1] * v154);
        v262 = v152;
        v265 = v151;
        v269 = v154;
        v161 = vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v149[80], v149[74], v151), v149[76], v152), v149[78], v154), v159);
        v162 = v161.f64[1] > v119 || v161.f64[1] < -1.0;
        v163 = v160 / v161.f64[1];
        v164 = v161.f64[0] / v161.f64[1];
        v165 = v119 / sqrt(v163 * v163 + v164 * v164);
        v166 = -(v163 * v165);
        v167 = acos(v165 * v164) * 57.2957795;
        v168 = v166 > 0.0 && !v162;
        v169 = v166 < 0.0 && v162;
        if (v168 | v169)
          v170 = 360.0 - v167;
        else
          v170 = v167;
        v171 = (*((uint64_t (**)(id *, id *))**v251 + 14))(*v251, v146 + 4);
        v252 = *(double *)(v171 + 8);
        v253 = *(double *)v171;
        v256 = *(double *)(v171 + 24);
        v254 = *(double *)(v171 + 16);
        v255 = *(double *)(v171 + 32);
        v257 = *(float *)(v171 + 40);
        v261 = *(unsigned __int8 *)(v171 + 45);
        v172 = *((double *)v146 + 5) - *(double *)(v248 + 576);
        v173 = *((double *)v146 + 6) - *(double *)(v248 + 584);
        v174 = *((double *)v146 + 7) - *(double *)(v248 + 592);
        v175 = 1.0 / sqrt(v172 * v172 + v173 * v173 + v174 * v174);
        v176 = v175 * v174;
        v259 = v175 * v172;
        v260 = v175 * v173;
        v258 = acos(v175 * v172 * *(double *)(v248 + 600)+ v175 * v173 * *(double *)(v248 + 608)+ v175 * v174 * *(double *)(v248 + 616));
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 14;
        strcpy((char *)&__dst, "isDisplayLabel");
        v177 = *((unsigned __int8 *)v146 + 106);
        memset(&v437[4], 0, 24);
        v438 = 0;
        v437[0] = v177;
        gdc::DebugTreeNode::addProperty((uint64_t)v148, (uint64_t)&__dst, (uint64_t)v437);
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 16;
        strcpy((char *)&__dst, "hasBecomeVisible");
        v178 = gdc::DebugTreeNode::createChildNode((uint64_t)v148, (__int128 *)&__dst);
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 16;
        strcpy((char *)&__dst, "hasBecomeVisible");
        v179 = *((unsigned __int8 *)v146 + 107);
        memset(&v435[4], 0, 24);
        v436 = 0;
        v435[0] = v179;
        gdc::DebugTreeNode::addProperty((uint64_t)v178, (uint64_t)&__dst, (uint64_t)v435);
        if (v146[14])
        {
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 13;
          strcpy((char *)&__dst, "eyeCoordinate");
          v180 = gdc::DebugTreeNode::createChildNode((uint64_t)v178, (__int128 *)&__dst);
          v181 = (uint64_t *)v146[14];
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 3;
          LODWORD(__dst.__r_.__value_.__l.__data_) = 7627116;
          v182 = *v181;
          v432 = 0;
          v433 = 0;
          v431 = 0;
          v434 = 2;
          v430 = v182;
          gdc::DebugTreeNode::addProperty((uint64_t)v180, (uint64_t)&__dst, (uint64_t)v429);
          v183 = v146[14];
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 3;
          LODWORD(__dst.__r_.__value_.__l.__data_) = 6778476;
          v184 = v183[1];
          v426 = 0;
          v427 = 0;
          v425 = 0;
          v428 = 2;
          v424 = v184;
          gdc::DebugTreeNode::addProperty((uint64_t)v180, (uint64_t)&__dst, (uint64_t)v423);
          v185 = v146[14];
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 8;
          strcpy((char *)&__dst, "altitude");
          v186 = v185[2];
          v420 = 0;
          v421 = 0;
          v419 = 0;
          v422 = 2;
          v418 = v186;
          gdc::DebugTreeNode::addProperty((uint64_t)v180, (uint64_t)&__dst, (uint64_t)v417);
          v187 = *((_QWORD *)v146[14] + 4);
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 8;
          strcpy((char *)&__dst, "distance");
          v414 = 0;
          v415 = 0;
          v413 = 0;
          v416 = 2;
          v412 = v187;
          gdc::DebugTreeNode::addProperty((uint64_t)v178, (uint64_t)&__dst, (uint64_t)v411);
          v188 = *((_QWORD *)v146[14] + 3);
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 15;
          strcpy((char *)&__dst, "faceAngleCosine");
          v408 = 0;
          v409 = 0;
          v407 = 0;
          v410 = 2;
          v406 = v188;
          gdc::DebugTreeNode::addProperty((uint64_t)v178, (uint64_t)&__dst, (uint64_t)v405);
        }
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 21;
        strcpy((char *)&__dst, "fixedPerspectiveScale");
        v189 = *((float *)v146[2] + 266);
        v402 = 0;
        v403 = 0;
        v401 = 0;
        v404 = 2;
        v400 = v189;
        gdc::DebugTreeNode::addProperty((uint64_t)v148, (uint64_t)&__dst, (uint64_t)v399);
        v190 = *((_DWORD *)v146 + 8);
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 10;
        strcpy((char *)&__dst, "identifier");
        if (!v190)
        {
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = 7;
          strcpy((char *)&__p, "UNKNOWN");
          memset(&v397, 0, sizeof(v397));
          v398 = 4;
LABEL_190:
          v397 = __p;
          goto LABEL_191;
        }
        std::to_string(&__p, v190);
        memset(&v397, 0, sizeof(v397));
        v398 = 4;
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_190;
        std::string::__assign_no_alias<true>(&v397, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
LABEL_191:
        gdc::DebugTreeNode::addProperty((uint64_t)v148, (uint64_t)&__dst, (uint64_t)v396);
        if (SHIBYTE(v397.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v397.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 13;
        strcpy((char *)&__dst, "screenHeading");
        v393 = 0;
        v394 = 0;
        v392 = 0;
        v395 = 2;
        v391 = v170;
        gdc::DebugTreeNode::addProperty((uint64_t)v148, (uint64_t)&__dst, (uint64_t)v390);
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 16;
        strcpy((char *)&__dst, "isDirectlyBehind");
        memset(&v388[4], 0, 24);
        v389 = 0;
        v388[0] = (v157 * (v262 - v153) + v158 * (v269 - v155) + v156 * (v265 - v150))
                / sqrt((v265 - v150) * (v265 - v150) + (v262 - v153) * (v262 - v153) + (v269 - v155) * (v269 - v155)) <= v273;
        gdc::DebugTreeNode::addProperty((uint64_t)v148, (uint64_t)&__dst, (uint64_t)v388);
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 13;
        strcpy((char *)&__dst, "angleFromView");
        v385 = 0;
        v386 = 0;
        v384 = 0;
        v387 = 2;
        v383 = v258 * 57.2957795;
        gdc::DebugTreeNode::addProperty((uint64_t)v148, (uint64_t)&__dst, (uint64_t)v382);
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 8;
        strcpy((char *)&__dst, "pointDir");
        v191 = gdc::DebugTreeNode::createChildNode((uint64_t)v148, (__int128 *)&__dst);
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 1;
        LOWORD(__dst.__r_.__value_.__l.__data_) = 120;
        v379 = 0;
        v380 = 0;
        v378 = 0;
        v381 = 2;
        v377 = v259;
        gdc::DebugTreeNode::addProperty((uint64_t)v191, (uint64_t)&__dst, (uint64_t)v376);
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 1;
        LOWORD(__dst.__r_.__value_.__l.__data_) = 121;
        v373 = 0;
        v374 = 0;
        v372 = 0;
        v375 = 2;
        v371 = v260;
        gdc::DebugTreeNode::addProperty((uint64_t)v191, (uint64_t)&__dst, (uint64_t)v370);
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 1;
        LOWORD(__dst.__r_.__value_.__l.__data_) = 122;
        v367 = 0;
        v368 = 0;
        v366 = 0;
        v369 = 2;
        v365 = v176;
        gdc::DebugTreeNode::addProperty((uint64_t)v191, (uint64_t)&__dst, (uint64_t)v364);
        v192 = *((double *)v146 + 7);
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 9;
        strcpy((char *)&__dst, "elevation");
        v361 = 0;
        v362 = 0;
        v360 = 0;
        v363 = 2;
        v359 = v192 * 40075017.0;
        gdc::DebugTreeNode::addProperty((uint64_t)v148, (uint64_t)&__dst, (uint64_t)v358);
        v193 = v146[15];
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 15;
        strcpy((char *)&__dst, "elevationOffset");
        v355 = 0;
        v356 = 0;
        v354 = 0;
        v357 = 2;
        v353 = v193;
        gdc::DebugTreeNode::addProperty((uint64_t)v148, (uint64_t)&__dst, (uint64_t)v352);
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 10;
        strcpy((char *)&__dst, "worldPoint");
        v194 = gdc::DebugTreeNode::createChildNode((uint64_t)v148, (__int128 *)&__dst);
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 1;
        LOWORD(__dst.__r_.__value_.__l.__data_) = 120;
        v195 = v146[5];
        v349 = 0;
        v350 = 0;
        v348 = 0;
        v351 = 2;
        v347 = v195;
        gdc::DebugTreeNode::addProperty((uint64_t)v194, (uint64_t)&__dst, (uint64_t)v346);
        v196 = v146[6];
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 1;
        LOWORD(__dst.__r_.__value_.__l.__data_) = 121;
        v343 = 0;
        v344 = 0;
        v342 = 0;
        v345 = 2;
        v341 = v196;
        gdc::DebugTreeNode::addProperty((uint64_t)v194, (uint64_t)&__dst, (uint64_t)v340);
        v197 = v146[7];
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 1;
        LOWORD(__dst.__r_.__value_.__l.__data_) = 122;
        v337 = 0;
        v338 = 0;
        v336 = 0;
        v339 = 2;
        v335 = v197;
        gdc::DebugTreeNode::addProperty((uint64_t)v194, (uint64_t)&__dst, (uint64_t)v334);
        if (v261)
        {
          if (v257 == 3.4028e38)
            v198 = 0.0;
          else
            v198 = v257;
          v199 = exp(v255 * 6.28318531 + -3.14159265);
          v200 = atan(v199);
          v201 = fmod(v256 * 6.28318531, 6.28318531);
          v202 = fmod(v201 + 6.28318531, 6.28318531) * 57.2957795 + -180.0;
          v203 = v200 * 114.591559 + -90.0;
        }
        else
        {
          v204 = sqrt(v253 * v253 + v252 * v252);
          v205 = atan2(v254, v204 * 0.996647189);
          v206 = atan2(v252, v253);
          v207 = __sincos_stret(v205);
          v203 = atan2(v254 + v207.__sinval * v207.__sinval * 42841.3115 * v207.__sinval, v204 + v207.__cosval * v207.__cosval * -42697.6727 * v207.__cosval)* 57.2957795;
          v202 = v206 * 57.2957795;
          if (v257 == 3.4028e38)
            v198 = 0.0;
          else
            v198 = v257;
        }
        v119 = 1.0;
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 10;
        strcpy((char *)&__dst, "coordinate");
        v208 = gdc::DebugTreeNode::createChildNode((uint64_t)v148, (__int128 *)&__dst);
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 3;
        LODWORD(__dst.__r_.__value_.__l.__data_) = 7627116;
        v331 = 0;
        v332 = 0;
        v330 = 0;
        v333 = 2;
        v329 = v203;
        gdc::DebugTreeNode::addProperty((uint64_t)v208, (uint64_t)&__dst, (uint64_t)v328);
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 3;
        LODWORD(__dst.__r_.__value_.__l.__data_) = 6778476;
        v325 = 0;
        v326 = 0;
        v324 = 0;
        v327 = 2;
        v323 = v202;
        gdc::DebugTreeNode::addProperty((uint64_t)v208, (uint64_t)&__dst, (uint64_t)v322);
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 8;
        strcpy((char *)&__dst, "altitude");
        v319 = 0;
        v320 = 0;
        v318 = 0;
        v321 = 2;
        v317 = v198;
        gdc::DebugTreeNode::addProperty((uint64_t)v208, (uint64_t)&__dst, (uint64_t)v316);
        v209 = *(int8x8_t *)(v74 + 2120);
        if (!*(_QWORD *)&v209)
          goto LABEL_231;
        v210 = (unint64_t)v146[2];
        v211 = 0x9DDFEA08EB382D69 * (((8 * v210) + 8) ^ HIDWORD(v210));
        v212 = 0x9DDFEA08EB382D69 * (HIDWORD(v210) ^ (v211 >> 47) ^ v211);
        v213 = 0x9DDFEA08EB382D69 * (v212 ^ (v212 >> 47));
        v214 = (uint8x8_t)vcnt_s8(v209);
        v214.i16[0] = vaddlv_u8(v214);
        if (v214.u32[0] > 1uLL)
        {
          v215 = v213;
          if (v213 >= *(_QWORD *)&v209)
            v215 = v213 % *(_QWORD *)&v209;
        }
        else
        {
          v215 = v213 & (*(_QWORD *)&v209 - 1);
        }
        v216 = *(_QWORD **)(*(_QWORD *)(v74 + 2112) + 8 * v215);
        if (!v216)
          goto LABEL_231;
        v217 = (_QWORD *)*v216;
        if (!*v216)
          goto LABEL_231;
        if (v214.u32[0] < 2uLL)
        {
          v218 = *(_QWORD *)&v209 - 1;
          while (1)
          {
            v220 = v217[1];
            if (v220 == v213)
            {
              if (v217[2] == v210)
                goto LABEL_224;
            }
            else if ((v220 & v218) != v215)
            {
              goto LABEL_231;
            }
            v217 = (_QWORD *)*v217;
            if (!v217)
              goto LABEL_231;
          }
        }
        while (1)
        {
          v219 = v217[1];
          if (v219 == v213)
            break;
          if (v219 >= *(_QWORD *)&v209)
            v219 %= *(_QWORD *)&v209;
          if (v219 != v215)
            goto LABEL_231;
LABEL_213:
          v217 = (_QWORD *)*v217;
          if (!v217)
            goto LABEL_231;
        }
        if (v217[2] != v210)
          goto LABEL_213;
LABEL_224:
        v221 = (double *)v217[3];
        v222 = (double *)operator new(0x38uLL);
        v223 = v222;
        v224 = *((_OWORD *)v221 + 1);
        v225 = *((_OWORD *)v221 + 2);
        v222[6] = v221[6];
        *((_OWORD *)v222 + 1) = v224;
        *((_OWORD *)v222 + 2) = v225;
        v226 = *(_QWORD *)(v74 + 2088);
        *(_QWORD *)(v226 + 8) = v222;
        *(_QWORD *)(v74 + 2088) = v222;
        *(_QWORD *)v222 = v226;
        *((_QWORD *)v222 + 1) = v247;
        v227 = *(double **)(v74 + 2152);
        if (v227 == v221)
        {
          v228 = (double *)*((_QWORD *)v221 + 1);
          goto LABEL_228;
        }
        v228 = v222;
        if (v227 == v247)
LABEL_228:
          *(_QWORD *)(v74 + 2152) = v228;
        v229 = *(_QWORD *)v221;
        *(double *)(v229 + 8) = v221[1];
        **((_QWORD **)v221 + 1) = v229;
        operator delete(v221);
        v217[3] = v223;
        if (v223 != v247)
        {
          v230 = v223[4];
          v231 = v223[5] * 40075017.0;
          v232 = v223[3];
          v233 = exp(v230 * 6.28318531 + -3.14159265);
          v234 = atan(v233);
          v235 = fmod(v232 * 6.28318531, 6.28318531) + 6.28318531;
          v119 = 1.0;
          v236 = fmod(v235, 6.28318531) * 57.2957795 + -180.0;
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 17;
          strcpy((char *)&__dst, "intersectionPoint");
          v237 = gdc::DebugTreeNode::createChildNode((uint64_t)v148, (__int128 *)&__dst);
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 8;
          strcpy((char *)&__dst, "mercator");
          v238 = gdc::DebugTreeNode::createChildNode((uint64_t)v237, (__int128 *)&__dst);
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 1;
          LOWORD(__dst.__r_.__value_.__l.__data_) = 120;
          v313 = 0;
          v314 = 0;
          v312 = 0;
          v315 = 2;
          v311 = v232;
          gdc::DebugTreeNode::addProperty((uint64_t)v238, (uint64_t)&__dst, (uint64_t)v310);
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 1;
          LOWORD(__dst.__r_.__value_.__l.__data_) = 121;
          v307 = 0;
          v308 = 0;
          v306 = 0;
          v309 = 2;
          v305 = v230;
          gdc::DebugTreeNode::addProperty((uint64_t)v238, (uint64_t)&__dst, (uint64_t)v304);
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 1;
          LOWORD(__dst.__r_.__value_.__l.__data_) = 122;
          v301 = 0;
          v302 = 0;
          v300 = 0;
          v303 = 2;
          v299 = v231;
          gdc::DebugTreeNode::addProperty((uint64_t)v238, (uint64_t)&__dst, (uint64_t)v298);
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 10;
          strcpy((char *)&__dst, "coordinate");
          v239 = gdc::DebugTreeNode::createChildNode((uint64_t)v237, (__int128 *)&__dst);
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 3;
          LODWORD(__dst.__r_.__value_.__l.__data_) = 7627116;
          v295 = 0;
          v296 = 0;
          v294 = 0;
          v297 = 2;
          v293 = v234 * 114.591559 + -90.0;
          gdc::DebugTreeNode::addProperty((uint64_t)v239, (uint64_t)&__dst, (uint64_t)v292);
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 3;
          LODWORD(__dst.__r_.__value_.__l.__data_) = 6778476;
          v289 = 0;
          v290 = 0;
          v288 = 0;
          v291 = 2;
          v287 = v236;
          gdc::DebugTreeNode::addProperty((uint64_t)v239, (uint64_t)&__dst, (uint64_t)v286);
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 8;
          strcpy((char *)&__dst, "altitude");
          v283 = 0;
          v284 = 0;
          v282 = 0;
          v285 = 2;
          v281 = v231;
          gdc::DebugTreeNode::addProperty((uint64_t)v239, (uint64_t)&__dst, (uint64_t)v280);
        }
LABEL_231:
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 8;
        strcpy((char *)&__dst, "distance");
        v240 = *((double *)v146 + 12);
        v277 = 0;
        v278 = 0;
        v276 = 0;
        v279 = 2;
        v275 = sqrt(v240);
        gdc::DebugTreeNode::addProperty((uint64_t)v148, (uint64_t)&__dst, (uint64_t)v274);
        v241 = *((_DWORD *)v146[2] + 12);
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 5;
        strcpy((char *)&__dst, "label");
        if (v241)
        {
          std::to_string(&__p, v241);
        }
        else
        {
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = 7;
          strcpy((char *)&__p, "UNKNOWN");
        }
        v243 = gdc::DebugTreeNode::createChildNode((uint64_t)v148, (__int128 *)&__dst, (__int128 *)&__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        md::Label::populateDebugNode((md::Label *)v146[2], (gdc::DebugTreeNode *)v243, v242);
        v146 += 16;
      }
      while (v146 != v249);
LABEL_237:
      if (SHIBYTE(v602.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v602.__r_.__value_.__l.__data_);
      v118 = v251 + 5;
    }
    while (v251 + 5 != v244);
  }
}

void sub_19FD0B67C(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0xF27]) < 0)
    operator delete((void *)STACK[0xF10]);
  _Unwind_Resume(a1);
}

void md::ARWalkingContinueFeatureDedupingGroup::~ARWalkingContinueFeatureDedupingGroup(md::ARWalkingContinueFeatureDedupingGroup *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;

  *(_QWORD *)this = &off_1E42AAE70;
  v2 = (_QWORD *)*((_QWORD *)this + 44);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)*((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;
  if (v4)
    operator delete(v4);
  v5 = (_QWORD *)*((_QWORD *)this + 39);
  if (v5)
  {
    do
    {
      v6 = (_QWORD *)*v5;
      operator delete(v5);
      v5 = v6;
    }
    while (v6);
  }
  v7 = (void *)*((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v7)
    operator delete(v7);
  *((_QWORD *)this + 31) = &off_1E42B4C30;

  md::ARWalkingLabelLayoutDedupingGroup::~ARWalkingLabelLayoutDedupingGroup(this);
}

{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;

  *(_QWORD *)this = &off_1E42AAE70;
  v2 = (_QWORD *)*((_QWORD *)this + 44);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)*((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;
  if (v4)
    operator delete(v4);
  v5 = (_QWORD *)*((_QWORD *)this + 39);
  if (v5)
  {
    do
    {
      v6 = (_QWORD *)*v5;
      operator delete(v5);
      v5 = v6;
    }
    while (v6);
  }
  v7 = (void *)*((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v7)
    operator delete(v7);
  *((_QWORD *)this + 31) = &off_1E42B4C30;

  md::ARWalkingLabelLayoutDedupingGroup::~ARWalkingLabelLayoutDedupingGroup(this);
  JUMPOUT(0x1A1AF4E00);
}

void md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(int8x8_t *this, const md::LabelLayoutContext **a2)
{
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  int8x8_t v8;
  uint64_t v9;
  int8x16_t *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  int8x16_t *v14;
  uint64_t v15;
  int8x16_t *i;
  int8x16_t *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t *v21;
  double *v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t *v29;
  double *v30;
  double v31;
  unint64_t v32;
  unint64_t *v33;
  float *v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  double *v39;
  double v40;
  double v41;
  double v42;
  unint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  double *v47;
  double v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  int8x8_t *v54;
  int8x8_t *v55;
  unint64_t v56;
  uint64_t v57;
  int8x8_t *v58;
  uint64_t v59;
  uint64_t v60;
  int8x8_t *v61;
  int8x8_t v62;
  int8x8_t v63;
  uint64_t v64;
  int8x8_t *v65;
  id *v66;
  float *v67;
  id v68;
  int8x8_t **v69;

  md::ARWalkingLabelLayoutDedupingGroup::prepareLayoutGroups(this, a2[54]);
  v4 = (uint64_t *)this[5];
  if (v4 == (uint64_t *)this[6])
    v5 = 0;
  else
    v5 = *v4;
  this[6] = (int8x8_t)v4;
  this[9] = 0;
  v68 = *(id *)&this[32];
  if (this[40])
  {
    v6 = (_QWORD *)this[39];
    if (v6)
    {
      do
      {
        v7 = (_QWORD *)*v6;
        operator delete(v6);
        v6 = v7;
      }
      while (v7);
    }
    this[39] = 0;
    v8 = this[38];
    if (v8)
    {
      v9 = 0;
      do
        *(_QWORD *)(*(_QWORD *)&this[37] + 8 * v9++) = 0;
      while (*(_QWORD *)&v8 != v9);
    }
    this[40] = 0;
  }
  v10 = (int8x16_t *)this[1];
  v11 = (unint64_t *)this[2];
  if (v10 != (int8x16_t *)v11)
  {
    do
    {
      while (1)
      {
        v12 = v10->i64[0];
        if (*(_BYTE *)(v10->i64[0] + 1290))
        {
          if (std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>>>::find<md::mun::CollectionPoint const*>(&this[26], v10->i64[0]))
          {
            break;
          }
        }
        if (v10 != (int8x16_t *)--v11)
        {
          while (1)
          {
            v13 = *v11;
            if (*(_BYTE *)(*v11 + 1290))
            {
              if (std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>>>::find<md::mun::CollectionPoint const*>(&this[26], *v11))
              {
                break;
              }
            }
            if (--v11 == (unint64_t *)v10)
              goto LABEL_22;
          }
          v10->i64[0] = v13;
          v10 = (int8x16_t *)((char *)v10 + 8);
          *v11 = v12;
          if (v10 != (int8x16_t *)v11)
            continue;
        }
        goto LABEL_22;
      }
      v10 = (int8x16_t *)((char *)v10 + 8);
    }
    while (v10 != (int8x16_t *)v11);
    v10 = (int8x16_t *)v11;
  }
LABEL_22:
  v14 = (int8x16_t *)this[1];
  v65 = this;
  v66 = &v68;
  v67 = (float *)(a2 + 445);
  v15 = (uint64_t)v10;
  i = v10;
  if (v14 == v10)
    goto LABEL_85;
  v17 = v10;
  do
  {
    while (1)
    {
      if (v5 == v14->i64[0])
      {
        v69 = (int8x8_t **)v5;
        v18 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v5 + 8) + 304))(*(_QWORD *)(v5 + 8), v5 + 48);
        if (v19)
        {
          v20 = v18;
          v21 = (uint64_t *)v69;
          v22 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(&v65[37], (unint64_t)v69);
          if (v22)
          {
            v23 = v22[3];
          }
          else
          {
            objc_msgSend(*v66, "distanceFromPoint:toPoint:", *(_QWORD *)v67, v20);
            v23 = v24;
            if (*(_DWORD *)v67 > v20 || *(_DWORD *)v67 == (_DWORD)v20 && v67[1] > *((float *)&v20 + 1))
              v23 = -v24;
            *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,geo::Unit<geo::MeterUnitDescription,double>>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,geo::Unit<geo::MeterUnitDescription,double>>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,geo::Unit<geo::MeterUnitDescription,double>>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,geo::Unit<geo::MeterUnitDescription,double>>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>((float *)&v65[37], (unint64_t)v21, &v69)+ 3) = v23;
          }
        }
        else
        {
          v23 = 0.0;
        }
        if (v23 >= -(*(double *)&this[35] * *(double *)&this[34]))
          break;
      }
      v17 = (int8x16_t *)((char *)v17 - 8);
      if (v14 != v17)
      {
        while (1)
        {
          if (v5 == v17->i64[0])
          {
            v69 = (int8x8_t **)v5;
            v26 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v5 + 8) + 304))(*(_QWORD *)(v5 + 8), v5 + 48);
            if (v27)
            {
              v28 = v26;
              v29 = (uint64_t *)v69;
              v30 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(&v65[37], (unint64_t)v69);
              if (v30)
              {
                v25 = v30[3];
              }
              else
              {
                objc_msgSend(*v66, "distanceFromPoint:toPoint:", *(_QWORD *)v67, v28);
                v25 = v31;
                if (*(_DWORD *)v67 > v28
                  || *(_DWORD *)v67 == (_DWORD)v28 && v67[1] > *((float *)&v28 + 1))
                {
                  v25 = -v31;
                }
                *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,geo::Unit<geo::MeterUnitDescription,double>>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,geo::Unit<geo::MeterUnitDescription,double>>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,geo::Unit<geo::MeterUnitDescription,double>>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,geo::Unit<geo::MeterUnitDescription,double>>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>((float *)&v65[37], (unint64_t)v29, &v69)+ 3) = v25;
              }
            }
            else
            {
              v25 = 0.0;
            }
            if (v25 >= -(*(double *)&this[35] * *(double *)&this[34]))
              break;
          }
          v17 = (int8x16_t *)((char *)v17 - 8);
          if (v17 == v14)
            goto LABEL_52;
        }
        v32 = v14->i64[0];
        v14->i64[0] = v17->i64[0];
        v14 = (int8x16_t *)((char *)v14 + 8);
        v17->i64[0] = v32;
        if (v14 != v17)
          continue;
      }
      goto LABEL_52;
    }
    v14 = (int8x16_t *)((char *)v14 + 8);
  }
  while (v14 != v17);
  v14 = v17;
LABEL_52:
  v15 = (uint64_t)v10;
  i = v10;
  if (v14 == v10)
    goto LABEL_85;
  i = v10;
  v33 = (unint64_t *)v14;
LABEL_54:
  v34 = (float *)&v65[37];
  while (1)
  {
    v35 = *v33;
    v69 = (int8x8_t **)v35;
    v36 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(v35 + 8) + 304))(*(_QWORD *)(v35 + 8), v35 + 48);
    if (!v37)
    {
      v40 = 0.0;
      goto LABEL_65;
    }
    v38 = v36;
    v39 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v34, v35);
    if (!v39)
      break;
    v40 = v39[3];
    if (v40 < 0.0)
      goto LABEL_68;
LABEL_65:
    if (v40 > *(double *)&this[35])
      goto LABEL_68;
    if (++v33 == (unint64_t *)i)
    {
      v15 = (uint64_t)v14;
      goto LABEL_85;
    }
  }
  objc_msgSend(*v66, "distanceFromPoint:toPoint:", *(_QWORD *)v67, v38);
  v40 = v41;
  if (*(_DWORD *)v67 > v38 || *(_DWORD *)v67 == (_DWORD)v38 && v67[1] > *((float *)&v38 + 1))
    v40 = -v41;
  *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,geo::Unit<geo::MeterUnitDescription,double>>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,geo::Unit<geo::MeterUnitDescription,double>>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,geo::Unit<geo::MeterUnitDescription,double>>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,geo::Unit<geo::MeterUnitDescription,double>>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v34, v35, &v69)+ 3) = v40;
  if (v40 >= 0.0)
    goto LABEL_65;
LABEL_68:
  for (i = (int8x16_t *)((char *)i - 8); i != (int8x16_t *)v33; i = (int8x16_t *)((char *)i - 8))
  {
    v43 = i->i64[0];
    v69 = (int8x8_t **)v43;
    v44 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(v43 + 8) + 304))(*(_QWORD *)(v43 + 8), v43 + 48);
    if (v45)
    {
      v46 = v44;
      v47 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v34, v43);
      if (v47)
      {
        v42 = v47[3];
        if (v42 < 0.0)
          continue;
      }
      else
      {
        objc_msgSend(*v66, "distanceFromPoint:toPoint:", *(_QWORD *)v67, v46);
        v42 = v48;
        if (*(_DWORD *)v67 > v46 || *(_DWORD *)v67 == (_DWORD)v46 && v67[1] > *((float *)&v46 + 1))
          v42 = -v48;
        *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,geo::Unit<geo::MeterUnitDescription,double>>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,geo::Unit<geo::MeterUnitDescription,double>>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,geo::Unit<geo::MeterUnitDescription,double>>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,geo::Unit<geo::MeterUnitDescription,double>>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v34, v43, &v69)+ 3) = v42;
        if (v42 < 0.0)
          continue;
      }
    }
    else
    {
      v42 = 0.0;
    }
    if (v42 <= *(double *)&this[35])
    {
      v49 = *v33;
      *v33++ = i->i64[0];
      i->i64[0] = v49;
      if (v33 == (unint64_t *)i)
        break;
      goto LABEL_54;
    }
  }
  v15 = (uint64_t)v14;
  i = (int8x16_t *)v33;
LABEL_85:
  v50 = 126 - 2 * __clz(((uint64_t)i->i64 - v15) >> 3);
  v69 = &v65;
  if (i == (int8x16_t *)v15)
    v51 = 0;
  else
    v51 = v50;
  std::__introsort<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **,false>(v15, i, (uint64_t **)&v69, v51, 1);
  v52 = 126 - 2 * __clz(((char *)v10 - (char *)i) >> 3);
  v69 = &v65;
  if (v10 == i)
    v53 = 0;
  else
    v53 = v52;
  std::__introsort<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4 &,md::LabelBase **,false>((uint64_t)i, v10, (uint64_t **)&v69, v53, 1);
  v54 = (int8x8_t *)this[1];
  v55 = (int8x8_t *)this[2];
  if (v54 != v55)
  {
    v56 = (char *)v55 - (char *)v54 - 8;
    if (v56 > 7)
    {
      v59 = 0;
      v60 = (v56 >> 3) + 1;
      v57 = v60 & 0x3FFFFFFFFFFFFFFELL;
      do
      {
        v61 = &v54[v59];
        v63 = *v61;
        v62 = v61[1];
        *(_DWORD *)(*(_QWORD *)&v63 + 32) = v59;
        *(_DWORD *)(*(_QWORD *)&v62 + 32) = v59 + 1;
        v59 += 2;
      }
      while (v57 != v59);
      if (v60 != v57)
      {
        v58 = &v54[v60 & 0x3FFFFFFFFFFFFFFELL];
        goto LABEL_98;
      }
    }
    else
    {
      LODWORD(v57) = 0;
      v58 = (int8x8_t *)this[1];
      do
      {
LABEL_98:
        v64 = (uint64_t)*v58++;
        *(_DWORD *)(v64 + 32) = v57;
        LODWORD(v57) = v57 + 1;
      }
      while (v58 != v55);
    }
    this[9] = *v54;
  }

}

void sub_19FD0BEF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{

  _Unwind_Resume(a1);
}

BOOL md::ARWalkingContinueFeatureDedupingGroup::isResolved(md::ARWalkingContinueFeatureDedupingGroup *this)
{
  return *((_QWORD *)this + 6) != *((_QWORD *)this + 5);
}

void md::ARWalkingContinueFeatureDedupingGroup::onLabelAdded(md::ARWalkingContinueFeatureDedupingGroup *this, md::LabelBase *a2)
{
  unint64_t v2;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  void **v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t prime;
  void *v18;
  void *v19;
  uint64_t v20;
  _QWORD *v21;
  char *v22;
  size_t v23;
  size_t v24;
  size_t v25;
  _QWORD *i;
  size_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint8x8_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  size_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  void *v40;

  md::ARWalkingLabelLayoutDedupingGroup::onLabelAdded(this, (unint64_t)a2);
  v5 = *((unsigned int *)a2 + 12);
  v6 = *((_QWORD *)this + 43);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v2 = *((unsigned int *)a2 + 12);
      if (v6 <= v5)
        v2 = v5 % v6;
    }
    else
    {
      v2 = ((_DWORD)v6 - 1) & v5;
    }
    v8 = *(void ***)(*((_QWORD *)this + 42) + 8 * v2);
    if (v8)
    {
      v9 = *v8;
      if (*v8)
      {
        if (v7.u32[0] < 2uLL)
        {
          while (1)
          {
            v11 = v9[1];
            if (v11 == v5)
            {
              if (*((_DWORD *)v9 + 4) == (_DWORD)v5)
                goto LABEL_82;
            }
            else if ((v11 & (v6 - 1)) != v2)
            {
              goto LABEL_22;
            }
            v9 = (_QWORD *)*v9;
            if (!v9)
              goto LABEL_22;
          }
        }
        do
        {
          v10 = v9[1];
          if (v10 == v5)
          {
            if (*((_DWORD *)v9 + 4) == (_DWORD)v5)
              goto LABEL_82;
          }
          else
          {
            if (v10 >= v6)
              v10 %= v6;
            if (v10 != v2)
              break;
          }
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
    }
  }
LABEL_22:
  v9 = operator new(0x20uLL);
  *v9 = 0;
  v9[1] = v5;
  *((_DWORD *)v9 + 4) = v5;
  v9[3] = 0;
  v12 = (float)(unint64_t)(*((_QWORD *)this + 45) + 1);
  v13 = *((float *)this + 92);
  if (v6 && (float)(v13 * (float)v6) >= v12)
  {
    v5 = v2;
    goto LABEL_72;
  }
  v14 = 1;
  if (v6 >= 3)
    v14 = (v6 & (v6 - 1)) != 0;
  v15 = v14 | (2 * v6);
  v16 = vcvtps_u32_f32(v12 / v13);
  if (v15 <= v16)
    prime = v16;
  else
    prime = v15;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v6 = *((_QWORD *)this + 43);
  }
  if (prime > v6)
  {
LABEL_35:
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v18 = operator new(8 * prime);
    v19 = (void *)*((_QWORD *)this + 42);
    *((_QWORD *)this + 42) = v18;
    if (v19)
      operator delete(v19);
    v20 = 0;
    *((_QWORD *)this + 43) = prime;
    do
      *(_QWORD *)(*((_QWORD *)this + 42) + 8 * v20++) = 0;
    while (prime != v20);
    v21 = (_QWORD *)*((_QWORD *)this + 44);
    if (!v21)
      goto LABEL_59;
    v22 = (char *)this + 352;
    v23 = v21[1];
    v24 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v25 = v23 & v24;
      *(_QWORD *)(*((_QWORD *)this + 42) + 8 * v25) = v22;
      for (i = (_QWORD *)*v21; *v21; i = (_QWORD *)*v21)
      {
        v27 = i[1] & v24;
        if (v27 == v25)
        {
          v21 = i;
        }
        else
        {
          v28 = *((_QWORD *)this + 42);
          if (*(_QWORD *)(v28 + 8 * v27))
          {
            *v21 = *i;
            v29 = 8 * v27;
            *i = **(_QWORD **)(*((_QWORD *)this + 42) + v29);
            **(_QWORD **)(*((_QWORD *)this + 42) + v29) = i;
          }
          else
          {
            *(_QWORD *)(v28 + 8 * v27) = v21;
            v21 = i;
            v25 = v27;
          }
        }
      }
LABEL_59:
      v6 = prime;
      goto LABEL_60;
    }
    if (v23 >= prime)
      v23 %= prime;
    *(_QWORD *)(*((_QWORD *)this + 42) + 8 * v23) = v22;
    v33 = (_QWORD *)*v21;
    if (!*v21)
      goto LABEL_59;
    while (1)
    {
      v35 = v33[1];
      if (v35 >= prime)
        v35 %= prime;
      if (v35 != v23)
      {
        v36 = *((_QWORD *)this + 42);
        if (!*(_QWORD *)(v36 + 8 * v35))
        {
          *(_QWORD *)(v36 + 8 * v35) = v21;
          goto LABEL_64;
        }
        *v21 = *v33;
        v34 = 8 * v35;
        *v33 = **(_QWORD **)(*((_QWORD *)this + 42) + v34);
        **(_QWORD **)(*((_QWORD *)this + 42) + v34) = v33;
        v33 = v21;
      }
      v35 = v23;
LABEL_64:
      v21 = v33;
      v33 = (_QWORD *)*v33;
      v23 = v35;
      if (!v33)
        goto LABEL_59;
    }
  }
  if (prime >= v6)
    goto LABEL_60;
  v30 = vcvtps_u32_f32((float)*((unint64_t *)this + 45) / *((float *)this + 92));
  if (v6 < 3 || (v31 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
  {
    v30 = std::__next_prime(v30);
  }
  else
  {
    v32 = 1 << -(char)__clz(v30 - 1);
    if (v30 >= 2)
      v30 = v32;
  }
  if (prime <= v30)
    prime = v30;
  if (prime < v6)
  {
    if (!prime)
    {
      v40 = (void *)*((_QWORD *)this + 42);
      *((_QWORD *)this + 42) = 0;
      if (v40)
        operator delete(v40);
      v6 = 0;
      *((_QWORD *)this + 43) = 0;
      goto LABEL_60;
    }
    goto LABEL_35;
  }
  v6 = *((_QWORD *)this + 43);
LABEL_60:
  if ((v6 & (v6 - 1)) != 0)
  {
    if (v6 <= v5)
      v5 %= v6;
  }
  else
  {
    v5 = ((_DWORD)v6 - 1) & v5;
  }
LABEL_72:
  v37 = *((_QWORD *)this + 42);
  v38 = *(_QWORD **)(v37 + 8 * v5);
  if (v38)
  {
    *v9 = *v38;
LABEL_80:
    *v38 = v9;
    goto LABEL_81;
  }
  *v9 = *((_QWORD *)this + 44);
  *((_QWORD *)this + 44) = v9;
  *(_QWORD *)(v37 + 8 * v5) = (char *)this + 352;
  if (*v9)
  {
    v39 = *(_QWORD *)(*v9 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v39 >= v6)
        v39 %= v6;
    }
    else
    {
      v39 &= v6 - 1;
    }
    v38 = (_QWORD *)(*((_QWORD *)this + 42) + 8 * v39);
    goto LABEL_80;
  }
LABEL_81:
  ++*((_QWORD *)this + 45);
LABEL_82:
  v9[3] = a2;
}

void sub_19FD0C374(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void md::ARWalkingContinueFeatureDedupingGroup::onLabelRemoved(int8x8_t *this, md::LabelBase *a2)
{
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  int8x8_t v8;
  int8x8_t **v9;
  int8x8_t *v10;
  uint64_t v11;
  int8x8_t v12;
  unint64_t v13;
  int8x8_t *v14;
  int8x8_t *v15;
  int8x8_t v16;
  unint64_t v17;
  int8x8_t v18;
  unint64_t v19;

  md::ARWalkingLabelLayoutDedupingGroup::onLabelRemoved(this, a2);
  v4 = this[43];
  if (v4)
  {
    v5 = *((unsigned int *)a2 + 12);
    v6 = (uint8x8_t)vcnt_s8(v4);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      v7 = *((unsigned int *)a2 + 12);
      if (*(_QWORD *)&v4 <= v5)
        v7 = v5 % *(_QWORD *)&v4;
    }
    else
    {
      v7 = (v4.i32[0] - 1) & v5;
    }
    v8 = this[42];
    v9 = *(int8x8_t ***)(*(_QWORD *)&v8 + 8 * v7);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        v11 = *(_QWORD *)&v4 - 1;
        if (v6.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (*(_QWORD *)&v12 == v5)
            {
              if (v10[2].i32[0] == (_DWORD)v5)
                goto LABEL_22;
            }
            else if ((*(_QWORD *)&v12 & v11) != v7)
            {
              return;
            }
            v10 = (int8x8_t *)*v10;
            if (!v10)
              return;
          }
        }
        do
        {
          v13 = (unint64_t)v10[1];
          if (v13 == v5)
          {
            if (v10[2].i32[0] == (_DWORD)v5)
            {
LABEL_22:
              if (v6.u32[0] > 1uLL)
              {
                if (*(_QWORD *)&v4 <= v5)
                  v5 %= *(_QWORD *)&v4;
              }
              else
              {
                v5 &= v11;
              }
              v14 = *(int8x8_t **)(*(_QWORD *)&v8 + 8 * v5);
              do
              {
                v15 = v14;
                v14 = (int8x8_t *)*v14;
              }
              while (v14 != v10);
              if (v15 == &this[44])
                goto LABEL_39;
              v16 = v15[1];
              if (v6.u32[0] > 1uLL)
              {
                if (*(_QWORD *)&v16 >= *(_QWORD *)&v4)
                  *(_QWORD *)&v16 %= *(_QWORD *)&v4;
              }
              else
              {
                *(_QWORD *)&v16 &= v11;
              }
              if (*(_QWORD *)&v16 != v5)
              {
LABEL_39:
                if (!*(_QWORD *)v10)
                  goto LABEL_40;
                v17 = *(_QWORD *)(*(_QWORD *)v10 + 8);
                if (v6.u32[0] > 1uLL)
                {
                  if (v17 >= *(_QWORD *)&v4)
                    v17 %= *(_QWORD *)&v4;
                }
                else
                {
                  v17 &= v11;
                }
                if (v17 != v5)
LABEL_40:
                  *(_QWORD *)(*(_QWORD *)&v8 + 8 * v5) = 0;
              }
              v18 = *v10;
              if (*v10)
              {
                v19 = *(_QWORD *)(*(_QWORD *)&v18 + 8);
                if (v6.u32[0] > 1uLL)
                {
                  if (v19 >= *(_QWORD *)&v4)
                    v19 %= *(_QWORD *)&v4;
                }
                else
                {
                  v19 &= v11;
                }
                if (v19 != v5)
                {
                  *(_QWORD *)(*(_QWORD *)&this[42] + 8 * v19) = v15;
                  v18 = *v10;
                }
              }
              *v15 = v18;
              *v10 = 0;
              --*(_QWORD *)&this[45];
              operator delete(v10);
              return;
            }
          }
          else
          {
            if (v13 >= *(_QWORD *)&v4)
              v13 %= *(_QWORD *)&v4;
            if (v13 != v7)
              return;
          }
          v10 = (int8x8_t *)*v10;
        }
        while (v10);
      }
    }
  }
}

uint64_t md::ARWalkingContinueFeatureDedupingGroup::getAlternateLayout(md::ARWalkingContinueFeatureDedupingGroup *this, md::LabelBase *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  uint8x8_t v15;
  unint64_t v16;
  uint64_t **v17;
  uint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;

  v2 = *((_QWORD *)this + 36);
  v3 = *(_QWORD *)(v2 + 272);
  if (!v3)
    goto LABEL_17;
  v4 = v2 + 272;
  v5 = *((_DWORD *)a2 + 12);
  v6 = v4;
  do
  {
    v7 = *(_DWORD *)(v3 + 32);
    v8 = v7 >= v5;
    if (v7 >= v5)
      v9 = (uint64_t *)v3;
    else
      v9 = (uint64_t *)(v3 + 8);
    if (v8)
      v6 = v3;
    v3 = *v9;
  }
  while (*v9);
  if (v6 != v4 && v5 >= *(_DWORD *)(v6 + 32) && (v10 = *(_QWORD *)(v6 + 40)) != 0)
  {
    v11 = *(_DWORD *)(v10 + 160) == v5;
    v12 = 160;
    if (v11)
      v12 = 164;
    v13 = *(_DWORD *)(v10 + v12);
    v14 = *((_QWORD *)this + 43);
    if (!v14)
      return 0;
  }
  else
  {
LABEL_17:
    v13 = 0;
    v14 = *((_QWORD *)this + 43);
    if (!v14)
      return 0;
  }
  v15 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
  v15.i16[0] = vaddlv_u8(v15);
  if (v15.u32[0] > 1uLL)
  {
    v16 = v13;
    if (v14 <= v13)
      v16 = v13 % v14;
  }
  else
  {
    v16 = ((_DWORD)v14 - 1) & v13;
  }
  v17 = *(uint64_t ***)(*((_QWORD *)this + 42) + 8 * v16);
  if (!v17)
    return 0;
  v18 = *v17;
  if (!v18)
    return 0;
  if (v15.u32[0] < 2uLL)
  {
    v19 = v14 - 1;
    while (1)
    {
      v21 = v18[1];
      if (v21 == v13)
      {
        if (*((_DWORD *)v18 + 4) == v13)
          return v18[3];
      }
      else if ((v21 & v19) != v16)
      {
        return 0;
      }
      v18 = (uint64_t *)*v18;
      if (!v18)
        return 0;
    }
  }
  while (1)
  {
    v20 = v18[1];
    if (v20 == v13)
      break;
    if (v20 >= v14)
      v20 %= v14;
    if (v20 != v16)
      return 0;
LABEL_27:
    v18 = (uint64_t *)*v18;
    if (!v18)
      return 0;
  }
  if (*((_DWORD *)v18 + 4) != v13)
    goto LABEL_27;
  return v18[3];
}

_QWORD *std::__hash_table<std::__hash_value_type<md::LabelBase const*,geo::Unit<geo::MeterUnitDescription,double>>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,geo::Unit<geo::MeterUnitDescription,double>>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,geo::Unit<geo::MeterUnitDescription,double>>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,geo::Unit<geo::MeterUnitDescription,double>>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(float *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t prime;
  void *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  size_t v26;
  size_t v27;
  size_t v28;
  _QWORD *i;
  size_t v30;
  uint64_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  size_t v37;
  _QWORD *v38;
  _QWORD *v39;
  unint64_t v40;
  _QWORD *v42;

  v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *((_QWORD *)a1 + 1);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v14 = v12[1];
            if (v14 == v8)
            {
              if (v12[2] == a2)
                return v12;
            }
            else if ((v14 & (v9 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v12 = (_QWORD *)*v12;
            if (!v12)
              goto LABEL_22;
          }
        }
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == a2)
              return v12;
          }
          else
          {
            if (v13 >= v9)
              v13 %= v9;
            if (v13 != v3)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_22:
  v12 = operator new(0x20uLL);
  *v12 = 0;
  v12[1] = v8;
  v12[2] = *a3;
  v15 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v16 = a1[8];
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = v19;
    else
      prime = v18;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v9 = *((_QWORD *)a1 + 1);
    }
    if (prime <= v9)
    {
      if (prime >= v9)
        goto LABEL_59;
      v32 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v9 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        v32 = std::__next_prime(v32);
      }
      else
      {
        v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2)
          v32 = v34;
      }
      if (prime <= v32)
        prime = v32;
      if (prime >= v9)
      {
        v9 = *((_QWORD *)a1 + 1);
LABEL_59:
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v8 >= v9)
            v3 = v8 % v9;
          else
            v3 = v8;
        }
        else
        {
          v3 = (v9 - 1) & v8;
        }
        goto LABEL_72;
      }
      if (!prime)
      {
        v42 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v42)
          operator delete(v42);
        v9 = 0;
        *((_QWORD *)a1 + 1) = 0;
        goto LABEL_59;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v21 = operator new(8 * prime);
    v22 = *(_QWORD **)a1;
    *(_QWORD *)a1 = v21;
    if (v22)
      operator delete(v22);
    v23 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23++) = 0;
    while (prime != v23);
    v25 = (uint64_t *)(a1 + 4);
    v24 = (_QWORD *)*((_QWORD *)a1 + 2);
    if (!v24)
    {
LABEL_58:
      v9 = prime;
      goto LABEL_59;
    }
    v26 = v24[1];
    v27 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v28 = v26 & v27;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v25;
      for (i = (_QWORD *)*v24; *v24; i = (_QWORD *)*v24)
      {
        v30 = i[1] & v27;
        if (v30 == v28)
        {
          v24 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v30))
        {
          *v24 = *i;
          v31 = 8 * v30;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v31);
          **(_QWORD **)(*(_QWORD *)a1 + v31) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v24;
          v24 = i;
          v28 = v30;
        }
      }
      goto LABEL_58;
    }
    if (v26 >= prime)
      v26 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = v25;
    v35 = (_QWORD *)*v24;
    if (!*v24)
      goto LABEL_58;
    while (1)
    {
      v37 = v35[1];
      if (v37 >= prime)
        v37 %= prime;
      if (v37 != v26)
      {
        if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v37))
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v37) = v24;
          goto LABEL_63;
        }
        *v24 = *v35;
        v36 = 8 * v37;
        *v35 = **(_QWORD **)(*(_QWORD *)a1 + v36);
        **(_QWORD **)(*(_QWORD *)a1 + v36) = v35;
        v35 = v24;
      }
      v37 = v26;
LABEL_63:
      v24 = v35;
      v35 = (_QWORD *)*v35;
      v26 = v37;
      if (!v35)
        goto LABEL_58;
    }
  }
LABEL_72:
  v38 = *(_QWORD **)a1;
  v39 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v39)
  {
    *v12 = *v39;
LABEL_80:
    *v39 = v12;
    goto LABEL_81;
  }
  *v12 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v12;
  v38[v3] = a1 + 4;
  if (*v12)
  {
    v40 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v40 >= v9)
        v40 %= v9;
    }
    else
    {
      v40 &= v9 - 1;
    }
    v39 = (_QWORD *)(*(_QWORD *)a1 + 8 * v40);
    goto LABEL_80;
  }
LABEL_81:
  ++*((_QWORD *)a1 + 3);
  return v12;
}

void sub_19FD0CB58(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **,false>(uint64_t result, int8x16_t *a2, uint64_t **a3, uint64_t a4, char a5)
{
  int8x16_t *v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int8x16_t *v17;
  int8x16_t *v18;
  unint64_t v19;
  int8x16_t *v20;
  unint64_t v21;
  unint64_t v22;
  int8x16_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  BOOL v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  int8x16_t *v45;
  BOOL v47;
  uint64_t v48;
  unint64_t *v49;
  _QWORD *i64;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  int64_t v55;
  int64_t v56;
  uint64_t v57;
  unint64_t *v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  int8x16_t *v65;
  uint64_t v66;
  _QWORD *v67;
  unint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t *v73;
  int8x16_t *v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  int8x16_t *v83;
  unint64_t *v84;
  unint64_t *v85;
  int64_t v87;
  unint64_t *v88;
  int64_t v89;
  unint64_t v90;

  v8 = (int8x16_t *)result;
LABEL_2:
  v88 = &a2[-1].u64[1];
  v84 = &a2[-2].u64[1];
  v85 = (unint64_t *)&a2[-1];
  v9 = (unint64_t *)v8;
  while (2)
  {
    v8 = (int8x16_t *)v9;
    v10 = (char *)a2 - (char *)v9;
    v11 = ((char *)a2 - (char *)v9) >> 3;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a3, *v88, v8->i64[0]);
        if ((_DWORD)result)
        {
          v39 = v8->i64[0];
          v8->i64[0] = *v88;
          *v88 = v39;
        }
        return result;
      case 3:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **>((unint64_t *)v8, &v8->u64[1], v88, a3);
      case 4:
        v40 = (unint64_t *)&v8[1];
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **>((unint64_t *)v8, &v8->u64[1], (unint64_t *)&v8[1], a3);
        result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a3, *v88, v8[1].u64[0]);
        if ((_DWORD)result)
        {
          v41 = *v40;
          *v40 = *v88;
          *v88 = v41;
          result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a3, *v40, v8->u64[1]);
          if ((_DWORD)result)
          {
            v43 = v8->i64[1];
            v42 = v8[1].u64[0];
            v44 = v8->i64[0];
            v8->i64[1] = v42;
            v8[1].i64[0] = v43;
            result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a3, v42, v44);
            if ((_DWORD)result)
              *v8 = vextq_s8(*v8, *v8, 8uLL);
          }
        }
        return result;
      case 5:
        return std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **,0>((unint64_t *)v8, &v8->u64[1], (unint64_t *)&v8[1], &v8[1].u64[1], v88, a3);
      default:
        if (v10 <= 191)
        {
          v45 = (int8x16_t *)&v8->u64[1];
          v47 = v8 == a2 || v45 == a2;
          if ((a5 & 1) != 0)
          {
            if (!v47)
            {
              v48 = 0;
              v49 = (unint64_t *)v8;
              do
              {
                v52 = *v49;
                v51 = v49[1];
                v49 = (unint64_t *)v45;
                result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a3, v51, v52);
                if ((_DWORD)result)
                {
                  v53 = *v49;
                  v54 = v48;
                  do
                  {
                    *(uint64_t *)((char *)&v8->i64[1] + v54) = *(uint64_t *)((char *)v8->i64 + v54);
                    if (!v54)
                    {
                      i64 = v8->i64;
                      goto LABEL_70;
                    }
                    result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a3, v53, *(unint64_t *)((char *)&v8->u64[-1] + v54));
                    v54 -= 8;
                  }
                  while ((result & 1) != 0);
                  i64 = (uint64_t *)((char *)&v8->i64[1] + v54);
LABEL_70:
                  *i64 = v53;
                }
                v45 = (int8x16_t *)(v49 + 1);
                v48 += 8;
              }
              while (v49 + 1 != (unint64_t *)a2);
            }
          }
          else if (!v47)
          {
            do
            {
              v78 = v8->i64[0];
              v77 = v8->u64[1];
              v8 = v45;
              result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a3, v77, v78);
              if ((_DWORD)result)
              {
                v79 = v8->i64[0];
                v80 = v8->i64;
                do
                {
                  v81 = v80;
                  v82 = *--v80;
                  *v81 = v82;
                  result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a3, v79, *(v81 - 2));
                }
                while ((result & 1) != 0);
                *v80 = v79;
              }
              v45 = (int8x16_t *)&v8->u64[1];
            }
            while (&v8->u64[1] != (unint64_t *)a2);
          }
          return result;
        }
        if (!a4)
        {
          if (v8 != a2)
          {
            v55 = (unint64_t)(v11 - 2) >> 1;
            v89 = v55;
            v83 = a2;
            do
            {
              v56 = v55;
              if (v89 >= v55)
              {
                v57 = (2 * v55) | 1;
                v58 = (unint64_t *)v8 + v57;
                if (2 * v55 + 2 < v11
                  && md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a3, *v58, v58[1]))
                {
                  ++v58;
                  v57 = 2 * v56 + 2;
                }
                v59 = (unint64_t *)v8 + v56;
                result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a3, *v58, *v59);
                if ((result & 1) == 0)
                {
                  v87 = v56;
                  v60 = *v59;
                  do
                  {
                    v61 = v58;
                    *v59 = *v58;
                    if (v89 < v57)
                      break;
                    v62 = (2 * v57) | 1;
                    v58 = (unint64_t *)v8 + v62;
                    if (2 * v57 + 2 < v11
                      && md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a3, *v58, v58[1]))
                    {
                      ++v58;
                      v62 = 2 * v57 + 2;
                    }
                    result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a3, *v58, v60);
                    v59 = v61;
                    v57 = v62;
                  }
                  while (!(_DWORD)result);
                  *v61 = v60;
                  a2 = v83;
                  v56 = v87;
                }
              }
              v55 = v56 - 1;
            }
            while (v56);
            v63 = (unint64_t)v10 >> 3;
            do
            {
              v65 = a2;
              v66 = 0;
              v90 = v8->i64[0];
              v67 = v8->i64;
              do
              {
                v68 = &v67[v66 + 1];
                v69 = (2 * v66) | 1;
                v70 = 2 * v66 + 2;
                if (v70 < v63)
                {
                  result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a3, *v68, v67[v66 + 2]);
                  if ((_DWORD)result)
                  {
                    ++v68;
                    v69 = v70;
                  }
                }
                *v67 = *v68;
                v67 = v68;
                v66 = v69;
              }
              while (v69 <= (uint64_t)((unint64_t)(v63 - 2) >> 1));
              a2 = (int8x16_t *)((char *)v65 - 8);
              if (v68 == &v65[-1].u64[1])
              {
                *v68 = v90;
              }
              else
              {
                *v68 = a2->i64[0];
                a2->i64[0] = v90;
                v71 = (char *)v68 - (char *)v8 + 8;
                if (v71 >= 9)
                {
                  v72 = (((unint64_t)v71 >> 3) - 2) >> 1;
                  v73 = (unint64_t *)v8 + v72;
                  result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a3, *v73, *v68);
                  if ((_DWORD)result)
                  {
                    v74 = (int8x16_t *)((char *)v65 - 8);
                    v75 = *v68;
                    do
                    {
                      v76 = v73;
                      *v68 = *v73;
                      if (!v72)
                        break;
                      v72 = (v72 - 1) >> 1;
                      v73 = (unint64_t *)v8 + v72;
                      result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a3, *v73, v75);
                      v68 = v76;
                    }
                    while ((result & 1) != 0);
                    *v76 = v75;
                    a2 = v74;
                  }
                }
              }
            }
            while (v63-- > 2);
          }
          return result;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = (unint64_t *)v8 + ((unint64_t)v11 >> 1);
        if ((unint64_t)v10 < 0x401)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **>(v13, (unint64_t *)v8, v88, a3);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **>((unint64_t *)v8, v13, v88, a3);
          v14 = v12;
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **>(&v8->u64[1], &v8->u64[v14 - 1], v85, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **>((unint64_t *)&v8[1], &v8->u64[v14 + 1], v84, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **>(&v8->u64[v14 - 1], v13, &v8->u64[v14 + 1], a3);
          v15 = v8->i64[0];
          v8->i64[0] = v8->i64[v14];
          v8->i64[v14] = v15;
        }
        --a4;
        if ((a5 & 1) == 0
          && !md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a3, v8[-1].u64[1], v8->i64[0]))
        {
          v30 = v8->i64[0];
          result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a3, v8->i64[0], *v88);
          if ((result & 1) != 0)
          {
            v9 = (unint64_t *)v8;
            do
            {
              v31 = v9[1];
              ++v9;
              result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a3, v30, v31);
            }
            while ((result & 1) == 0);
          }
          else
          {
            v32 = &v8->u64[1];
            do
            {
              v9 = v32;
              if (v32 >= (unint64_t *)a2)
                break;
              ++v32;
              result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a3, v30, *v9);
            }
            while (!(_DWORD)result);
          }
          v33 = (unint64_t *)a2;
          if (v9 < (unint64_t *)a2)
          {
            v33 = (unint64_t *)a2;
            do
            {
              v34 = *--v33;
              result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a3, v30, v34);
            }
            while ((result & 1) != 0);
          }
          while (v9 < v33)
          {
            v35 = *v9;
            *v9 = *v33;
            *v33 = v35;
            do
            {
              v36 = v9[1];
              ++v9;
            }
            while (!md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a3, v30, v36));
            do
            {
              v37 = *--v33;
              result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a3, v30, v37);
            }
            while ((result & 1) != 0);
          }
          v38 = v9 - 1;
          if (v9 - 1 != (unint64_t *)v8)
            v8->i64[0] = *v38;
          a5 = 0;
          *v38 = v30;
          continue;
        }
        v16 = v8->i64[0];
        v17 = v8;
        do
        {
          v18 = v17;
          v19 = v17->u64[1];
          v17 = (int8x16_t *)((char *)v17 + 8);
        }
        while (md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a3, v19, v16));
        v20 = a2;
        if (v18 == v8)
        {
          v20 = a2;
          do
          {
            if (v17 >= v20)
              break;
            v22 = v20[-1].u64[1];
            v20 = (int8x16_t *)((char *)v20 - 8);
          }
          while (!md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a3, v22, v16));
        }
        else
        {
          do
          {
            v21 = v20[-1].u64[1];
            v20 = (int8x16_t *)((char *)v20 - 8);
          }
          while (!md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a3, v21, v16));
        }
        v23 = a2;
        if (v17 < v20)
        {
          v24 = (uint64_t *)v17;
          v25 = (uint64_t *)v20;
          do
          {
            v26 = *v24;
            *v24 = *v25;
            *v25 = v26;
            do
            {
              v18 = (int8x16_t *)v24;
              v27 = v24[1];
              ++v24;
            }
            while (md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a3, v27, v16));
            do
              v28 = *--v25;
            while (!md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a3, v28, v16));
          }
          while (v24 < v25);
        }
        if (v18 != v8)
          v8->i64[0] = v18->i64[0];
        v18->i64[0] = v16;
        a2 = v23;
        if (v17 < v20)
        {
LABEL_30:
          result = std::__introsort<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **,false>(v8, v18, a3, a4, a5 & 1);
          a5 = 0;
          v9 = &v18->u64[1];
          continue;
        }
        v29 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **>(v8, v18, a3);
        v9 = &v18->u64[1];
        result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **>((int8x16_t *)&v18->u64[1], v23, a3);
        if (!(_DWORD)result)
        {
          if (v29)
            continue;
          goto LABEL_30;
        }
        a2 = v18;
        if (!v29)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4 &,md::LabelBase **,false>(uint64_t result, int8x16_t *a2, uint64_t **a3, uint64_t a4, char a5)
{
  int8x16_t *v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int8x16_t *v17;
  int8x16_t *v18;
  unint64_t v19;
  int8x16_t *v20;
  unint64_t v21;
  unint64_t v22;
  int8x16_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  BOOL v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  int8x16_t *v45;
  BOOL v47;
  uint64_t v48;
  unint64_t *v49;
  _QWORD *i64;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  int64_t v55;
  int64_t v56;
  uint64_t v57;
  unint64_t *v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  int8x16_t *v65;
  uint64_t v66;
  _QWORD *v67;
  unint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t *v73;
  int8x16_t *v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  int8x16_t *v83;
  unint64_t *v84;
  unint64_t *v85;
  int64_t v87;
  unint64_t *v88;
  int64_t v89;
  unint64_t v90;

  v8 = (int8x16_t *)result;
LABEL_2:
  v88 = &a2[-1].u64[1];
  v84 = &a2[-2].u64[1];
  v85 = (unint64_t *)&a2[-1];
  v9 = (unint64_t *)v8;
  while (2)
  {
    v8 = (int8x16_t *)v9;
    v10 = (char *)a2 - (char *)v9;
    v11 = ((char *)a2 - (char *)v9) >> 3;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a3, *v88, v8->i64[0]);
        if ((_DWORD)result)
        {
          v39 = v8->i64[0];
          v8->i64[0] = *v88;
          *v88 = v39;
        }
        return result;
      case 3:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4 &,md::LabelBase **>((unint64_t *)v8, &v8->u64[1], v88, a3);
      case 4:
        v40 = (unint64_t *)&v8[1];
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4 &,md::LabelBase **>((unint64_t *)v8, &v8->u64[1], (unint64_t *)&v8[1], a3);
        result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a3, *v88, v8[1].u64[0]);
        if ((_DWORD)result)
        {
          v41 = *v40;
          *v40 = *v88;
          *v88 = v41;
          result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a3, *v40, v8->u64[1]);
          if ((_DWORD)result)
          {
            v43 = v8->i64[1];
            v42 = v8[1].u64[0];
            v44 = v8->i64[0];
            v8->i64[1] = v42;
            v8[1].i64[0] = v43;
            result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a3, v42, v44);
            if ((_DWORD)result)
              *v8 = vextq_s8(*v8, *v8, 8uLL);
          }
        }
        return result;
      case 5:
        return std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4 &,md::LabelBase **,0>((unint64_t *)v8, &v8->u64[1], (unint64_t *)&v8[1], &v8[1].u64[1], v88, a3);
      default:
        if (v10 <= 191)
        {
          v45 = (int8x16_t *)&v8->u64[1];
          v47 = v8 == a2 || v45 == a2;
          if ((a5 & 1) != 0)
          {
            if (!v47)
            {
              v48 = 0;
              v49 = (unint64_t *)v8;
              do
              {
                v52 = *v49;
                v51 = v49[1];
                v49 = (unint64_t *)v45;
                result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a3, v51, v52);
                if ((_DWORD)result)
                {
                  v53 = *v49;
                  v54 = v48;
                  do
                  {
                    *(uint64_t *)((char *)&v8->i64[1] + v54) = *(uint64_t *)((char *)v8->i64 + v54);
                    if (!v54)
                    {
                      i64 = v8->i64;
                      goto LABEL_70;
                    }
                    result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a3, v53, *(unint64_t *)((char *)&v8->u64[-1] + v54));
                    v54 -= 8;
                  }
                  while ((result & 1) != 0);
                  i64 = (uint64_t *)((char *)&v8->i64[1] + v54);
LABEL_70:
                  *i64 = v53;
                }
                v45 = (int8x16_t *)(v49 + 1);
                v48 += 8;
              }
              while (v49 + 1 != (unint64_t *)a2);
            }
          }
          else if (!v47)
          {
            do
            {
              v78 = v8->i64[0];
              v77 = v8->u64[1];
              v8 = v45;
              result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a3, v77, v78);
              if ((_DWORD)result)
              {
                v79 = v8->i64[0];
                v80 = v8->i64;
                do
                {
                  v81 = v80;
                  v82 = *--v80;
                  *v81 = v82;
                  result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a3, v79, *(v81 - 2));
                }
                while ((result & 1) != 0);
                *v80 = v79;
              }
              v45 = (int8x16_t *)&v8->u64[1];
            }
            while (&v8->u64[1] != (unint64_t *)a2);
          }
          return result;
        }
        if (!a4)
        {
          if (v8 != a2)
          {
            v55 = (unint64_t)(v11 - 2) >> 1;
            v89 = v55;
            v83 = a2;
            do
            {
              v56 = v55;
              if (v89 >= v55)
              {
                v57 = (2 * v55) | 1;
                v58 = (unint64_t *)v8 + v57;
                if (2 * v55 + 2 < v11
                  && md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a3, *v58, v58[1]))
                {
                  ++v58;
                  v57 = 2 * v56 + 2;
                }
                v59 = (unint64_t *)v8 + v56;
                result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a3, *v58, *v59);
                if ((result & 1) == 0)
                {
                  v87 = v56;
                  v60 = *v59;
                  do
                  {
                    v61 = v58;
                    *v59 = *v58;
                    if (v89 < v57)
                      break;
                    v62 = (2 * v57) | 1;
                    v58 = (unint64_t *)v8 + v62;
                    if (2 * v57 + 2 < v11
                      && md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a3, *v58, v58[1]))
                    {
                      ++v58;
                      v62 = 2 * v57 + 2;
                    }
                    result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a3, *v58, v60);
                    v59 = v61;
                    v57 = v62;
                  }
                  while (!(_DWORD)result);
                  *v61 = v60;
                  a2 = v83;
                  v56 = v87;
                }
              }
              v55 = v56 - 1;
            }
            while (v56);
            v63 = (unint64_t)v10 >> 3;
            do
            {
              v65 = a2;
              v66 = 0;
              v90 = v8->i64[0];
              v67 = v8->i64;
              do
              {
                v68 = &v67[v66 + 1];
                v69 = (2 * v66) | 1;
                v70 = 2 * v66 + 2;
                if (v70 < v63)
                {
                  result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a3, *v68, v67[v66 + 2]);
                  if ((_DWORD)result)
                  {
                    ++v68;
                    v69 = v70;
                  }
                }
                *v67 = *v68;
                v67 = v68;
                v66 = v69;
              }
              while (v69 <= (uint64_t)((unint64_t)(v63 - 2) >> 1));
              a2 = (int8x16_t *)((char *)v65 - 8);
              if (v68 == &v65[-1].u64[1])
              {
                *v68 = v90;
              }
              else
              {
                *v68 = a2->i64[0];
                a2->i64[0] = v90;
                v71 = (char *)v68 - (char *)v8 + 8;
                if (v71 >= 9)
                {
                  v72 = (((unint64_t)v71 >> 3) - 2) >> 1;
                  v73 = (unint64_t *)v8 + v72;
                  result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a3, *v73, *v68);
                  if ((_DWORD)result)
                  {
                    v74 = (int8x16_t *)((char *)v65 - 8);
                    v75 = *v68;
                    do
                    {
                      v76 = v73;
                      *v68 = *v73;
                      if (!v72)
                        break;
                      v72 = (v72 - 1) >> 1;
                      v73 = (unint64_t *)v8 + v72;
                      result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a3, *v73, v75);
                      v68 = v76;
                    }
                    while ((result & 1) != 0);
                    *v76 = v75;
                    a2 = v74;
                  }
                }
              }
            }
            while (v63-- > 2);
          }
          return result;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = (unint64_t *)v8 + ((unint64_t)v11 >> 1);
        if ((unint64_t)v10 < 0x401)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4 &,md::LabelBase **>(v13, (unint64_t *)v8, v88, a3);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4 &,md::LabelBase **>((unint64_t *)v8, v13, v88, a3);
          v14 = v12;
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4 &,md::LabelBase **>(&v8->u64[1], &v8->u64[v14 - 1], v85, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4 &,md::LabelBase **>((unint64_t *)&v8[1], &v8->u64[v14 + 1], v84, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4 &,md::LabelBase **>(&v8->u64[v14 - 1], v13, &v8->u64[v14 + 1], a3);
          v15 = v8->i64[0];
          v8->i64[0] = v8->i64[v14];
          v8->i64[v14] = v15;
        }
        --a4;
        if ((a5 & 1) == 0
          && !md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a3, v8[-1].u64[1], v8->i64[0]))
        {
          v30 = v8->i64[0];
          result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a3, v8->i64[0], *v88);
          if ((result & 1) != 0)
          {
            v9 = (unint64_t *)v8;
            do
            {
              v31 = v9[1];
              ++v9;
              result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a3, v30, v31);
            }
            while ((result & 1) == 0);
          }
          else
          {
            v32 = &v8->u64[1];
            do
            {
              v9 = v32;
              if (v32 >= (unint64_t *)a2)
                break;
              ++v32;
              result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a3, v30, *v9);
            }
            while (!(_DWORD)result);
          }
          v33 = (unint64_t *)a2;
          if (v9 < (unint64_t *)a2)
          {
            v33 = (unint64_t *)a2;
            do
            {
              v34 = *--v33;
              result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a3, v30, v34);
            }
            while ((result & 1) != 0);
          }
          while (v9 < v33)
          {
            v35 = *v9;
            *v9 = *v33;
            *v33 = v35;
            do
            {
              v36 = v9[1];
              ++v9;
            }
            while (!md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a3, v30, v36));
            do
            {
              v37 = *--v33;
              result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a3, v30, v37);
            }
            while ((result & 1) != 0);
          }
          v38 = v9 - 1;
          if (v9 - 1 != (unint64_t *)v8)
            v8->i64[0] = *v38;
          a5 = 0;
          *v38 = v30;
          continue;
        }
        v16 = v8->i64[0];
        v17 = v8;
        do
        {
          v18 = v17;
          v19 = v17->u64[1];
          v17 = (int8x16_t *)((char *)v17 + 8);
        }
        while (md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a3, v19, v16));
        v20 = a2;
        if (v18 == v8)
        {
          v20 = a2;
          do
          {
            if (v17 >= v20)
              break;
            v22 = v20[-1].u64[1];
            v20 = (int8x16_t *)((char *)v20 - 8);
          }
          while (!md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a3, v22, v16));
        }
        else
        {
          do
          {
            v21 = v20[-1].u64[1];
            v20 = (int8x16_t *)((char *)v20 - 8);
          }
          while (!md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a3, v21, v16));
        }
        v23 = a2;
        if (v17 < v20)
        {
          v24 = (uint64_t *)v17;
          v25 = (uint64_t *)v20;
          do
          {
            v26 = *v24;
            *v24 = *v25;
            *v25 = v26;
            do
            {
              v18 = (int8x16_t *)v24;
              v27 = v24[1];
              ++v24;
            }
            while (md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a3, v27, v16));
            do
              v28 = *--v25;
            while (!md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a3, v28, v16));
          }
          while (v24 < v25);
        }
        if (v18 != v8)
          v8->i64[0] = v18->i64[0];
        v18->i64[0] = v16;
        a2 = v23;
        if (v17 < v20)
        {
LABEL_30:
          result = std::__introsort<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4 &,md::LabelBase **,false>(v8, v18, a3, a4, a5 & 1);
          a5 = 0;
          v9 = &v18->u64[1];
          continue;
        }
        v29 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4 &,md::LabelBase **>(v8, v18, a3);
        v9 = &v18->u64[1];
        result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4 &,md::LabelBase **>((int8x16_t *)&v18->u64[1], v23, a3);
        if (!(_DWORD)result)
        {
          if (v29)
            continue;
          goto LABEL_30;
        }
        a2 = v18;
        if (!v29)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(uint64_t **a1, unint64_t a2, unint64_t a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  float *v11;
  double *v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  float *v21;
  double *v22;
  double v23;
  _BOOL8 result;
  double v25;
  uint64_t v26;
  unint64_t v27;

  v6 = *a1;
  v27 = a2;
  v7 = *v6;
  v8 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(a2 + 8) + 304))(*(_QWORD *)(a2 + 8), a2 + 48);
  if (v9)
  {
    v10 = v8;
    v11 = (float *)(v7 + 296);
    v12 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v11, a2);
    if (v12)
    {
      v13 = v12[3];
    }
    else
    {
      objc_msgSend(*(id *)v6[1], "distanceFromPoint:toPoint:", *(_QWORD *)v6[2], v10);
      v13 = v14;
      v15 = v6[2];
      if (*(_DWORD *)v15 > v10
        || *(_DWORD *)v15 == (_DWORD)v10 && *(float *)(v15 + 4) > *((float *)&v10 + 1))
      {
        v13 = -v14;
      }
      *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,geo::Unit<geo::MeterUnitDescription,double>>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,geo::Unit<geo::MeterUnitDescription,double>>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,geo::Unit<geo::MeterUnitDescription,double>>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,geo::Unit<geo::MeterUnitDescription,double>>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v11, a2, &v27)+ 3) = v13;
    }
  }
  else
  {
    v13 = 0.0;
  }
  v16 = *a1;
  v27 = a3;
  v17 = *v16;
  v18 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(a3 + 8) + 304))(*(_QWORD *)(a3 + 8), a3 + 48);
  if (!v19)
  {
    v23 = 0.0;
    if (v13 >= 0.0)
      return v13 < v23;
    if (v13 > 0.0)
      return 0;
    return v13 > v23;
  }
  v20 = v18;
  v21 = (float *)(v17 + 296);
  v22 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v21, a3);
  if (v22)
  {
    v23 = v22[3];
  }
  else
  {
    objc_msgSend(*(id *)v16[1], "distanceFromPoint:toPoint:", *(_QWORD *)v16[2], v20);
    v23 = v25;
    v26 = v16[2];
    if (*(_DWORD *)v26 > v20
      || *(_DWORD *)v26 == (_DWORD)v20 && *(float *)(v26 + 4) > *((float *)&v20 + 1))
    {
      v23 = -v25;
    }
    *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,geo::Unit<geo::MeterUnitDescription,double>>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,geo::Unit<geo::MeterUnitDescription,double>>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,geo::Unit<geo::MeterUnitDescription,double>>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,geo::Unit<geo::MeterUnitDescription,double>>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v21, a3, &v27)+ 3) = v23;
  }
  result = v13 >= 0.0;
  if (v13 >= 0.0 && v23 >= 0.0)
    return v13 < v23;
  if (v13 <= 0.0 && v23 <= 0.0)
    return v13 > v23;
  return result;
}

BOOL std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4 &,md::LabelBase **>(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t **a4)
{
  BOOL v8;
  _BOOL8 result;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v8 = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a4, *a2, *a1);
  result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a4, *a3, *a2);
  if (v8)
  {
    v10 = *a1;
    if (result)
    {
      *a1 = *a3;
      *a3 = v10;
    }
    else
    {
      *a1 = *a2;
      *a2 = v10;
      result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a4, *a3, v10);
      if (result)
      {
        v13 = *a2;
        *a2 = *a3;
        *a3 = v13;
      }
    }
  }
  else if (result)
  {
    v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a4, *a2, *a1);
    if (result)
    {
      v12 = *a1;
      *a1 = *a2;
      *a2 = v12;
    }
  }
  return result;
}

BOOL std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4 &,md::LabelBase **,0>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5, uint64_t **a6)
{
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _BOOL8 result;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4 &,md::LabelBase **>(a1, a2, a3, a6);
  if (md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a6, *a4, *a3))
  {
    v12 = *a3;
    *a3 = *a4;
    *a4 = v12;
    if (md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a6, *a3, *a2))
    {
      v13 = *a2;
      *a2 = *a3;
      *a3 = v13;
      if (md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a6, *a2, *a1))
      {
        v14 = *a1;
        *a1 = *a2;
        *a2 = v14;
      }
    }
  }
  result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a6, *a5, *a4);
  if (result)
  {
    v16 = *a4;
    *a4 = *a5;
    *a5 = v16;
    result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a6, *a4, *a3);
    if (result)
    {
      v17 = *a3;
      *a3 = *a4;
      *a4 = v17;
      result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a6, *a3, *a2);
      if (result)
      {
        v18 = *a2;
        *a2 = *a3;
        *a3 = v18;
        result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a6, *a2, *a1);
        if (result)
        {
          v19 = *a1;
          *a1 = *a2;
          *a2 = v19;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4 &,md::LabelBase **>(int8x16_t *a1, int8x16_t *a2, uint64_t **a3)
{
  uint64_t v6;
  _BOOL8 result;
  unint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  uint64_t v11;
  int v12;
  _QWORD *i64;
  unint64_t v14;
  uint64_t v15;
  __int8 *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v6 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a3, a2[-1].u64[1], a1->i64[0]))
      {
        v8 = a1->i64[0];
        a1->i64[0] = a2[-1].i64[1];
        a2[-1].i64[1] = v8;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4 &,md::LabelBase **>((unint64_t *)a1, &a1->u64[1], &a2[-1].u64[1], a3);
      return 1;
    case 4:
      v17 = (unint64_t *)&a1[1];
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4 &,md::LabelBase **>((unint64_t *)a1, &a1->u64[1], (unint64_t *)&a1[1], a3);
      if (md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a3, a2[-1].u64[1], a1[1].u64[0]))
      {
        v18 = *v17;
        *v17 = a2[-1].u64[1];
        a2[-1].i64[1] = v18;
        if (md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a3, *v17, a1->u64[1]))
        {
          v20 = a1->i64[1];
          v19 = a1[1].u64[0];
          v21 = a1->i64[0];
          a1->i64[1] = v19;
          a1[1].i64[0] = v20;
          if (md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a3, v19, v21))
          {
            *a1 = vextq_s8(*a1, *a1, 8uLL);
          }
        }
      }
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4 &,md::LabelBase **,0>((unint64_t *)a1, &a1->u64[1], (unint64_t *)&a1[1], &a1[1].u64[1], &a2[-1].u64[1], a3);
      return 1;
    default:
      v9 = (unint64_t *)&a1[1];
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4 &,md::LabelBase **>((unint64_t *)a1, &a1->u64[1], (unint64_t *)&a1[1], a3);
      v10 = &a1[1].u64[1];
      if (&a1[1].u64[1] == (unint64_t *)a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    if (md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a3, *v10, *v9))
    {
      v14 = *v10;
      v15 = v11;
      do
      {
        v16 = &a1->i8[v15];
        *(uint64_t *)((char *)&a1[1].i64[1] + v15) = *(uint64_t *)((char *)a1[1].i64 + v15);
        if (v15 == -16)
        {
          i64 = a1->i64;
          goto LABEL_7;
        }
        v15 -= 8;
      }
      while (md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a3, v14, *((_QWORD *)v16 + 1)));
      i64 = (uint64_t *)((char *)&a1[1].i64[1] + v15);
LABEL_7:
      *i64 = v14;
      if (++v12 == 8)
        return v10 + 1 == (unint64_t *)a2;
    }
    v9 = v10;
    v11 += 8;
    if (++v10 == (unint64_t *)a2)
      return 1;
  }
}

BOOL md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(uint64_t **a1, unint64_t a2, unint64_t a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  char v11;
  uint64_t v12;
  float *v13;
  double *v14;
  double v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  float *v22;
  double *v23;
  double v24;
  uint64_t v25;
  unint64_t v27;

  v6 = *a1;
  v27 = a2;
  v7 = *v6;
  v8 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(a2 + 8) + 304))(*(_QWORD *)(a2 + 8), a2 + 48);
  v9 = 0.0;
  v10 = 0.0;
  if (v11)
  {
    v12 = v8;
    v13 = (float *)(v7 + 296);
    v14 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v13, a2);
    if (v14)
    {
      v10 = v14[3];
    }
    else
    {
      objc_msgSend(*(id *)v6[1], "distanceFromPoint:toPoint:", *(_QWORD *)v6[2], v12);
      v10 = v15;
      v16 = v6[2];
      if (*(_DWORD *)v16 > v12
        || *(_DWORD *)v16 == (_DWORD)v12 && *(float *)(v16 + 4) > *((float *)&v12 + 1))
      {
        v10 = -v15;
      }
      *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,geo::Unit<geo::MeterUnitDescription,double>>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,geo::Unit<geo::MeterUnitDescription,double>>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,geo::Unit<geo::MeterUnitDescription,double>>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,geo::Unit<geo::MeterUnitDescription,double>>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v13, a2, &v27)+ 3) = v10;
    }
  }
  v17 = *a1;
  v27 = a3;
  v18 = *v17;
  v19 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(a3 + 8) + 304))(*(_QWORD *)(a3 + 8), a3 + 48);
  if (v20)
  {
    v21 = v19;
    v22 = (float *)(v18 + 296);
    v23 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v22, a3);
    if (v23)
    {
      v9 = v23[3];
    }
    else
    {
      objc_msgSend(*(id *)v17[1], "distanceFromPoint:toPoint:", *(_QWORD *)v17[2], v21);
      v9 = v24;
      v25 = v17[2];
      if (*(_DWORD *)v25 > v21
        || *(_DWORD *)v25 == (_DWORD)v21 && *(float *)(v25 + 4) > *((float *)&v21 + 1))
      {
        v9 = -v24;
      }
      *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,geo::Unit<geo::MeterUnitDescription,double>>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,geo::Unit<geo::MeterUnitDescription,double>>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,geo::Unit<geo::MeterUnitDescription,double>>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,geo::Unit<geo::MeterUnitDescription,double>>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v22, a3, &v27)+ 3) = v9;
    }
  }
  return v10 > v9;
}

BOOL std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **>(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t **a4)
{
  BOOL v8;
  _BOOL8 result;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v8 = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a4, *a2, *a1);
  result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a4, *a3, *a2);
  if (v8)
  {
    v10 = *a1;
    if (result)
    {
      *a1 = *a3;
      *a3 = v10;
    }
    else
    {
      *a1 = *a2;
      *a2 = v10;
      result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a4, *a3, v10);
      if (result)
      {
        v13 = *a2;
        *a2 = *a3;
        *a3 = v13;
      }
    }
  }
  else if (result)
  {
    v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a4, *a2, *a1);
    if (result)
    {
      v12 = *a1;
      *a1 = *a2;
      *a2 = v12;
    }
  }
  return result;
}

BOOL std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **,0>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5, uint64_t **a6)
{
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _BOOL8 result;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **>(a1, a2, a3, a6);
  if (md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a6, *a4, *a3))
  {
    v12 = *a3;
    *a3 = *a4;
    *a4 = v12;
    if (md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a6, *a3, *a2))
    {
      v13 = *a2;
      *a2 = *a3;
      *a3 = v13;
      if (md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a6, *a2, *a1))
      {
        v14 = *a1;
        *a1 = *a2;
        *a2 = v14;
      }
    }
  }
  result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a6, *a5, *a4);
  if (result)
  {
    v16 = *a4;
    *a4 = *a5;
    *a5 = v16;
    result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a6, *a4, *a3);
    if (result)
    {
      v17 = *a3;
      *a3 = *a4;
      *a4 = v17;
      result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a6, *a3, *a2);
      if (result)
      {
        v18 = *a2;
        *a2 = *a3;
        *a3 = v18;
        result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a6, *a2, *a1);
        if (result)
        {
          v19 = *a1;
          *a1 = *a2;
          *a2 = v19;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **>(int8x16_t *a1, int8x16_t *a2, uint64_t **a3)
{
  uint64_t v6;
  _BOOL8 result;
  unint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  uint64_t v11;
  int v12;
  _QWORD *i64;
  unint64_t v14;
  uint64_t v15;
  __int8 *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v6 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a3, a2[-1].u64[1], a1->i64[0]))
      {
        v8 = a1->i64[0];
        a1->i64[0] = a2[-1].i64[1];
        a2[-1].i64[1] = v8;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **>((unint64_t *)a1, &a1->u64[1], &a2[-1].u64[1], a3);
      return 1;
    case 4:
      v17 = (unint64_t *)&a1[1];
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **>((unint64_t *)a1, &a1->u64[1], (unint64_t *)&a1[1], a3);
      if (md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a3, a2[-1].u64[1], a1[1].u64[0]))
      {
        v18 = *v17;
        *v17 = a2[-1].u64[1];
        a2[-1].i64[1] = v18;
        if (md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a3, *v17, a1->u64[1]))
        {
          v20 = a1->i64[1];
          v19 = a1[1].u64[0];
          v21 = a1->i64[0];
          a1->i64[1] = v19;
          a1[1].i64[0] = v20;
          if (md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a3, v19, v21))
          {
            *a1 = vextq_s8(*a1, *a1, 8uLL);
          }
        }
      }
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **,0>((unint64_t *)a1, &a1->u64[1], (unint64_t *)&a1[1], &a1[1].u64[1], &a2[-1].u64[1], a3);
      return 1;
    default:
      v9 = (unint64_t *)&a1[1];
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **>((unint64_t *)a1, &a1->u64[1], (unint64_t *)&a1[1], a3);
      v10 = &a1[1].u64[1];
      if (&a1[1].u64[1] == (unint64_t *)a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    if (md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a3, *v10, *v9))
    {
      v14 = *v10;
      v15 = v11;
      do
      {
        v16 = &a1->i8[v15];
        *(uint64_t *)((char *)&a1[1].i64[1] + v15) = *(uint64_t *)((char *)a1[1].i64 + v15);
        if (v15 == -16)
        {
          i64 = a1->i64;
          goto LABEL_7;
        }
        v15 -= 8;
      }
      while (md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a3, v14, *((_QWORD *)v16 + 1)));
      i64 = (uint64_t *)((char *)&a1[1].i64[1] + v15);
LABEL_7:
      *i64 = v14;
      if (++v12 == 8)
        return v10 + 1 == (unint64_t *)a2;
    }
    v9 = v10;
    v11 += 8;
    if (++v10 == (unint64_t *)a2)
      return 1;
  }
}

void md::ARWalkingLabelLayoutDedupingGroup::~ARWalkingLabelLayoutDedupingGroup(md::ARWalkingLabelLayoutDedupingGroup *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;

  *(_QWORD *)this = &off_1E42A9368;
  v2 = (_QWORD *)*((_QWORD *)this + 28);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v4)
    operator delete(v4);
  v5 = (_QWORD *)*((_QWORD *)this + 23);
  if (v5)
  {
    do
    {
      v6 = (_QWORD *)*v5;
      operator delete(v5);
      v5 = v6;
    }
    while (v6);
  }
  v7 = (void *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v7)
    operator delete(v7);
  v8 = (_QWORD *)*((_QWORD *)this + 18);
  if (v8)
  {
    do
    {
      v15 = (_QWORD *)*v8;
      v16 = (void *)v8[3];
      if (v16)
      {
        v8[4] = v16;
        operator delete(v16);
      }
      operator delete(v8);
      v8 = v15;
    }
    while (v15);
  }
  v9 = (void *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v9)
    operator delete(v9);
  v10 = (_QWORD *)*((_QWORD *)this + 13);
  if (v10)
  {
    do
    {
      v11 = (_QWORD *)*v10;
      operator delete(v10);
      v10 = v11;
    }
    while (v11);
  }
  v12 = (void *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v12)
    operator delete(v12);
  *(_QWORD *)this = &off_1E4294980;
  v13 = *((_QWORD *)this + 5);
  if (v13)
  {
    *((_QWORD *)this + 6) = v13;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 8) + 40))(*((_QWORD *)this + 8), v13, *((_QWORD *)this + 7) - v13);
  }
  v14 = *((_QWORD *)this + 1);
  if (v14)
  {
    *((_QWORD *)this + 2) = v14;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 4) + 40))(*((_QWORD *)this + 4), v14, *((_QWORD *)this + 3) - v14);
  }
}

{
  md::ARWalkingLabelLayoutDedupingGroup::~ARWalkingLabelLayoutDedupingGroup(this);
  JUMPOUT(0x1A1AF4E00);
}

void sub_19FD0E974(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_19FD0EB9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19FD0F8F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{
  void *v27;

  _Unwind_Resume(a1);
}

void sub_19FD0FD40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,id location)
{
  void *v25;
  id *v26;
  id *v27;

  objc_destroyWeak(v27);
  objc_destroyWeak(v26);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_19FD107AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19FD1085C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19FD1094C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FD10C14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FD10EE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void md::CameraManager::~CameraManager(md::CameraManager *this)
{
  JUMPOUT(0x1A1AF4E00);
}

double md::getDirFromScreenPosition(uint64_t a1, double *a2, float a3, float a4)
{
  float v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  long double v14;
  long double v15;
  double v16;
  double v17;
  long double v18;
  long double v19;
  double v20;
  float v21;
  double v22;
  float v23;
  double v24;
  long double v25;
  long double v26;
  double v27;
  double v28;
  long double v29;
  double v30;
  double v31;
  long double v32;
  long double v33;
  double result;
  long double v35;
  long double v36;
  float v37;
  double v40[3];
  double v41;
  double v42;
  double v43;
  double v44;

  gdc::CameraFrame<geo::Radians,double>::toRigidTransformGeocentric(v40, (double *)(a1 + 8));
  v37 = *(float *)(a1 + 488);
  v6 = *(float *)(a1 + 492);
  v7 = *(double *)(a1 + 384);
  v8 = *(double *)(a1 + 392);
  v9 = *(double *)(a1 + 368);
  v10 = *(double *)(a1 + 376);
  v11 = v10 * v9;
  if (v10 >= v9)
  {
    v13 = *(double *)(a1 + 456);
    v16 = v13;
    if (v9 >= v10)
      goto LABEL_12;
    goto LABEL_8;
  }
  if (v11 <= 0.0)
    v12 = 1.0;
  else
    v12 = v10 / v9;
  v13 = *(double *)(a1 + 456);
  v14 = tan(v13 * 0.5);
  v15 = atan(v12 * v14);
  v16 = v15 + v15;
  if (v9 < v10)
  {
LABEL_8:
    if (v11 <= 0.0)
      v17 = 1.0;
    else
      v17 = v9 / v10;
    v18 = tan(v13 * 0.5);
    v19 = atan(v17 * v18);
    v13 = v19 + v19;
  }
LABEL_12:
  v20 = tan(v16 * 0.5);
  v21 = v8 * v6;
  v22 = ((float)(v21 - a4) + (float)(v21 - a4)) / v8;
  v23 = v7 * v37;
  v24 = ((float)(a3 - v23) + (float)(a3 - v23)) / v7;
  v25 = tan(v13 * 0.5);
  v26 = -(v25 - v24 * v25);
  v27 = v20 + v22 * v20;
  v28 = 1.0 / sqrt(v27 * v27 + 1.0 + v26 * v26);
  v29 = v28 * v26;
  v30 = v28 * v27;
  v31 = -(v30 * v43 + v28 * v42) - (v30 * v43 + v28 * v42);
  v32 = v28 * v41 + v29 * v43 + v28 * v41 + v29 * v43;
  v33 = -(v29 * v42 - v30 * v41) - (v29 * v42 - v30 * v41);
  result = v29 + v31 * v44 + v33 * v42 - v32 * v43;
  v35 = v30 + v31 * v43 + v32 * v44 - v33 * v41;
  v36 = v33 * v44 + v32 * v41 - (v28 + v31 * v42);
  *a2 = result;
  a2[1] = v35;
  a2[2] = v36;
  return result;
}

void md::CameraManager::update(uint64_t a1, uint64_t *a2, int a3)
{
  double v6;
  double v7;
  char v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  double *v12;
  double v13;
  double v14;
  __double2 v15;
  double v16;
  double v17;
  __double2 v18;
  double v19;
  double v20;
  double v22;
  double v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  double v30;
  double v31;
  double v32;
  double v33;
  __double2 v34;
  double v35;
  double v36;
  __double2 v37;
  double v38;
  double v39;
  double v40;
  __double2 v41;
  double v42;
  double v44;
  double v45;
  double v47;
  double v48;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  __double2 v65;
  double v66;
  double v67;
  __double2 v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  __double2 v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  __double2 v95;
  double v96;
  double v97;
  __double2 v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  int v110;
  float v111;
  float v112;
  double v113;
  double v114;
  float v115;
  float v116;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  long double v124;
  long double v125;
  double v126;
  double v127;
  double v128;
  double v129;
  double v130;
  double v131;
  double v132;
  double v133;
  double v134;
  double v135;
  double v136;
  double v137;
  double v138;
  long double v139;
  long double v140;
  double v141;
  long double v142;
  double v143;
  long double v144;
  double v145;
  double v146;
  double v147;
  long double v148;
  long double v149;
  double v150;
  double v151;
  double v152;
  double v153;
  double v154;
  double v155;
  double v156;
  double v157;
  double v158;
  double v159;
  double v160;
  double v161;
  double v162;
  double v163;
  double v164;
  double v165;
  double v166;
  double v167;
  __double2 v168;
  double v169;
  __double2 v170;
  double v171;
  double v172;
  double v173;
  double v174;
  double v175;
  double v176;
  double v177;
  double v178;
  double v179;
  double v180;
  long double v181;
  long double v182;
  long double v183;
  double v184;
  double v185;
  double v186;
  __double2 v187;
  double v188;
  __double2 v189;
  double v190;
  double v191;
  __double2 v192;
  double v193;
  double v194;
  double v195;
  double v196;
  double v197;
  double v198;
  double v199;
  double v200;
  double v201;
  double v202;
  double v203;
  double v204;
  double v205;
  __double2 v206;
  long double v207;
  long double v208;
  double v210;
  double v212;
  double v213;
  double v215;
  double v216;
  double v217;
  double v218;
  double v219;
  double v220;
  double v221;
  double v222;
  double v223;
  double v224;
  double v225;
  double v226;
  double v227;
  double v228;
  double v229;
  double v230;
  int v231;
  double v232;
  double v233;
  __double2 v234;
  __double2 v235;
  double v236;
  double v237;
  __double2 v238;
  double v239;
  double v240;
  double v241;
  double v242;
  double v243;
  double v244;
  double v245;
  double v246;
  double v247;
  double v248;
  double v249;
  double v250;
  double v251;
  double v252;
  double v253;
  double v254;
  double v255;
  double v256;
  double v257;
  float64x2_t v258;
  double v259;
  double v260;
  double v261;
  double v262;
  double v263;
  double v264;
  int v265;
  int v266;
  _BYTE *v267;
  double v268;
  double v269;
  __double2 v270;
  double v271;
  double v272;
  __double2 v273;
  double v274;
  double v275;
  double v276;
  uint64_t v277;
  int v278;
  double v279;
  double v280;
  double v281;
  double v282;
  double v283;
  double v284;
  double v285;
  __double2 v286;
  double v287;
  double v288;
  __double2 v289;
  double v290;
  double v291;
  double v292;
  double v293;
  double v294;
  double v295;
  double v296;
  __double2 v297;
  __double2 v298;
  double v299;
  double v300;
  double v301;
  double v302;
  double v303;
  double v304;
  double v305;
  double v306;
  double v307;
  int v308;
  double v309;
  __double2 v310;
  double v311;
  double v312;
  double v313;
  double v314;
  double v315;
  double v316;
  double v317;
  double v318;
  double v319;
  double v320;
  float64x2_t v321;
  double v322;
  double v323;
  double v324;
  int8x16_t v325;
  double v326;
  double v327;
  double v328;
  long double v329;
  double v330;
  double v331;
  double v332;
  double v333;
  double v334;
  double v335;
  double v336;
  double v337;
  double v338;
  double v339;
  double v340;
  double v341;
  double v342;
  double v343;
  double v344;
  double v345;
  double v346;
  double v347;
  double v348;
  char v349;
  double v350;
  float64_t v351;
  long double v352;
  double v353;
  long double v354;
  long double v355;
  long double v356;
  uint64_t *v357;
  BOOL v358;
  double v359;
  double v360;
  double v361;
  char v362;
  double v363;
  double v364;
  double v365;
  double v366;
  float64x2_t *v367;
  int8x16_t v368;
  double v369;
  double v370;
  double v371;
  double v372;
  double v373;
  double v374;
  double v375;
  double v376;
  double v377;
  double v378;
  double v379;
  double v380;
  double v381;
  float64_t v382;
  double v383;
  float64_t v384;
  double v385;
  double v386;
  double v387;
  double v388;
  double v389;
  double v390;
  double v391;
  double v392;
  double v393;
  double v394;
  double v395;
  double v396;
  double v397;
  double v398;
  double v399;
  double v400;
  double v401;
  double v402;
  double v403;
  double v404;
  double v405;
  double v406;
  double v407;
  double v408;
  long double v409;
  double v410;
  double v411;
  double v412;
  double v413;
  double v414;
  double v415;
  long double v416;
  double v417;
  float64x2_t v418;
  float64x2_t v419;
  float64x2_t v420;
  float64x2_t v421;
  float64x2_t v422;
  double v423;
  double v424;
  double v425;
  double v426;
  double v427;
  double v428;
  double v429;
  double v430;
  double v431;
  double v432;
  double v433;
  double v434;
  double v435;
  float64x2_t v436;
  double v437;
  __int128 v438;
  __int128 v439;

  if (*(_BYTE *)(a1 + 16) || *(_BYTE *)(a1 + 81) || *(_BYTE *)(a1 + 128) || *(_BYTE *)(a1 + 184))
  {
    md::MapDataAccess::heightAtCoordinate(*(unsigned __int8 **)(a1 + 8), (_OWORD *)(*a2 + 8));
    v7 = v6;
    if (!v8)
      v7 = 0.0;
    v9 = *a2;
    *(double *)(*a2 + 24) = fmax(v7, *(double *)(*a2 + 24));
    v10 = 1;
    if (*(_BYTE *)(a1 + 16))
    {
      md::MapDataAccess::groundCoordinateForScreenCursor((uint64_t)&v436, *(_QWORD *)(a1 + 8), v9 + 8, *(int32x2_t *)(a1 + 20));
      *(float64x2_t *)(a1 + 48) = v436;
      *(double *)(a1 + 64) = v437;
      *(_BYTE *)(a1 + 17) = 1;
    }
    if (*(_BYTE *)(a1 + 81))
      goto LABEL_10;
  }
  else
  {
    v10 = 0;
    if (*(_BYTE *)(a1 + 81))
    {
LABEL_10:
      md::MapDataAccess::groundCoordinateForScreenCursor((uint64_t)&v436, *(_QWORD *)(a1 + 8), *a2 + 8, *(int32x2_t *)(a1 + 112));
      *(float64x2_t *)(a1 + 88) = v436;
      *(double *)(a1 + 104) = v437;
      *(_BYTE *)(a1 + 82) = 1;
    }
  }
  if (*(_BYTE *)(a1 + 128))
  {
    md::MapDataAccess::groundCoordinateForScreenCursor((uint64_t)&v436, *(_QWORD *)(a1 + 8), *a2 + 8, *(int32x2_t *)(a1 + 160));
    *(float64x2_t *)(a1 + 136) = v436;
    *(double *)(a1 + 152) = v437;
    *(_BYTE *)(a1 + 129) = 1;
  }
  if (*(_BYTE *)(a1 + 184))
  {
    md::MapDataAccess::groundCoordinateForScreenCursor((uint64_t)&v436, *(_QWORD *)(a1 + 8), *a2 + 8, *(int32x2_t *)(a1 + 216));
    *(float64x2_t *)(a1 + 192) = v436;
    *(double *)(a1 + 208) = v437;
    *(_QWORD *)(a1 + 232) = *(_QWORD *)(*a2 + 32);
    *(_BYTE *)(a1 + 185) = 1;
  }
  if (v10 && (!*(_BYTE *)(a1 + 16) || !*(_BYTE *)(a1 + 243)))
    *(_BYTE *)(a1 + 244) = 0;
  v11 = *a2;
  v12 = (double *)(*a2 + 8);
  gdc::CameraFrame<geo::Radians,double>::toRigidTransformGeocentric(v436.f64, v12);
  v13 = *(double *)(v11 + 16);
  v14 = *(double *)(v11 + 24);
  v15 = __sincos_stret(*(double *)(v11 + 8));
  v16 = 6378137.0 / sqrt(v15.__sinval * v15.__sinval * -0.00669437999 + 1.0);
  v17 = (v16 + v14) * v15.__cosval;
  v18 = __sincos_stret(v13);
  v424 = v17 * v18.__cosval;
  v19 = v17 * v18.__sinval;
  v20 = (v14 + v16 * 0.99330562) * v15.__sinval;
  _Q22 = v436;
  v23 = v437;
  v22 = *(double *)&v438;
  v407 = *(double *)&v439 * -2.0 * *(double *)&v439 + 1.0 - (v22 + v22) * v22;
  v408 = (v22 + v22) * *((double *)&v438 + 1) + *((double *)&v439 + 1) * (*(double *)&v439 * -2.0);
  v406 = -(*(double *)&v439 * -2.0 * *((double *)&v438 + 1) - (v22 + v22) * *((double *)&v439 + 1));
  if (!*(_BYTE *)(a1 + 17))
  {
LABEL_22:
    v29 = 0;
    if (!*(_BYTE *)(a1 + 82))
      goto LABEL_24;
    goto LABEL_23;
  }
  v24 = *(_DWORD *)(a1 + 20);
  v25 = *(_DWORD *)(a1 + 28);
  v26 = v24 - v25;
  if (v24 == v25)
  {
    v27 = *(_DWORD *)(a1 + 24);
    v28 = *(_DWORD *)(a1 + 32);
    if (v27 == v28)
      goto LABEL_22;
  }
  else
  {
    v28 = *(_DWORD *)(a1 + 32);
    v27 = *(_DWORD *)(a1 + 24);
  }
  v421 = v436;
  v400 = v437;
  v403 = v17 * v18.__sinval;
  if (*(_BYTE *)(a1 + 80))
  {
    v110 = v27 - v28;
    v25 = *(_DWORD *)(a1 + 36);
    v28 = *(_DWORD *)(a1 + 40);
    v24 = v26 + v25;
    v27 = v110 + v28;
  }
  v387 = *(double *)(v11 + 32);
  v111 = (float)v24;
  v112 = (float)v27;
  md::getDirFromScreenPosition(v11, &v429, (float)v24, (float)v27);
  md::getDirFromScreenPosition(v11, &v426, (float)v25, (float)v28);
  v369 = v430;
  v370 = v431;
  v383 = v428;
  v385 = v429;
  v379 = v427;
  v381 = v426;
  v373 = -(v426 * v431 - v429 * v428);
  v372 = -(v429 * v427 - v426 * v430);
  v375 = -(v430 * v428 - v431 * v427) * -(v430 * v428 - v431 * v427) + v373 * v373 + v372 * v372;
  v377 = -(v430 * v428 - v431 * v427);
  gdc::CameraFrame<geo::Radians,double>::toRigidTransformGeocentric(v436.f64, v12);
  v397 = v436.f64[1];
  v390 = v436.f64[0];
  v393 = v437;
  v113 = *(double *)(v11 + 384);
  v114 = *(double *)(v11 + 392);
  v115 = v113 * *(float *)(v11 + 488);
  v116 = v114 * *(float *)(v11 + 492);
  v117 = ((float)(v111 - v115) + (float)(v111 - v115)) / v113;
  v118 = ((float)(v116 - v112) + (float)(v116 - v112)) / v114;
  v120 = *(double *)(v11 + 368);
  v119 = *(double *)(v11 + 376);
  v415 = v20;
  if (v119 >= v120)
  {
    v122 = 1.0;
    v123 = *(double *)(v11 + 456);
    v126 = v123;
  }
  else
  {
    if (v119 * v120 <= 0.0)
      v121 = 1.0;
    else
      v121 = v119 / v120;
    v122 = 1.0;
    v123 = *(double *)(v11 + 456);
    v124 = tan(v123 * 0.5);
    v125 = atan(v121 * v124);
    v126 = v125 + v125;
  }
  v134 = v117 + -1.0;
  v135 = v118 + v122;
  v136 = sqrt(v375);
  v137 = tan(v126 * 0.5);
  if (v120 < v119)
  {
    if (v119 * v120 <= 0.0)
      v138 = 1.0;
    else
      v138 = v120 / v119;
    v139 = tan(v123 * 0.5);
    v140 = atan(v138 * v139);
    v123 = v140 + v140;
  }
  v141 = 1.0 / v136;
  v142 = tan(v123 * 0.5) * v134;
  v143 = 1.0 / sqrt(v135 * v137 * (v135 * v137) + 1.0 + v142 * v142);
  v144 = v143 * v142;
  v145 = v143 * (v135 * v137);
  v146 = *(double *)&v439;
  v147 = -(v145 * v146 + v143 * *((double *)&v438 + 1)) - (v145 * v146 + v143 * *((double *)&v438 + 1));
  v148 = v143 * *(double *)&v438 + v144 * v146 + v143 * *(double *)&v438 + v144 * v146;
  v149 = -(v144 * *((double *)&v438 + 1) - v145 * *(double *)&v438)
       - (v144 * *((double *)&v438 + 1)
        - v145 * *(double *)&v438);
  v150 = v144 + v147 * *((double *)&v439 + 1) + v149 * *((double *)&v438 + 1) - v148 * *(double *)&v439;
  v151 = v145 + v147 * *(double *)&v439 + v148 * *((double *)&v439 + 1) - v149 * *(double *)&v438;
  v152 = v149 * *((double *)&v439 + 1) + v148 * *(double *)&v438 - (v143 + v147 * *((double *)&v438 + 1));
  v371 = v390 * v390 + v397 * v397 + v393 * v393;
  v153 = 1.0 / sqrt(v371);
  v154 = v153 * v397;
  v155 = v153 * v393;
  v156 = 1.0 / sqrt(v153 * v390 * (v153 * v390) + v154 * v154 + v155 * v155);
  v157 = v156 * (v153 * v390);
  v158 = v156 * v154;
  v159 = v156 * v155;
  v160 = v150 * v157 + 0.1 + v151 * v158 + v152 * (v156 * v155);
  if (v160 > 0.0)
  {
    v161 = v160 * 0.8;
    v150 = v150 - v161 * v157;
    v151 = v151 - v161 * v158;
    v152 = v152 - v161 * v159;
  }
  v374 = v141 * v373;
  v376 = v141 * v377;
  v378 = v141 * v372;
  v162 = 1.0 / sqrt(v152 * v152 + v151 * v151 + v150 * v150);
  v163 = v162 * v150;
  v164 = v162 * v151;
  v165 = v162 * v152;
  v166 = *(double *)(a1 + 56);
  v167 = *(double *)(a1 + 64);
  v168 = __sincos_stret(*(double *)(a1 + 48));
  v169 = 6378137.0 / sqrt(v168.__sinval * v168.__sinval * -0.00669437999 + 1.0);
  v170 = __sincos_stret(v166);
  v171 = v163 * v163 + v164 * v164 + v165 * v165;
  v172 = v164 * v397 + v163 * v390 + v165 * v393;
  v173 = v172 + v172;
  v174 = (v371
        - ((v169 + v167) * v168.__cosval * v170.__sinval * ((v169 + v167) * v168.__cosval * v170.__sinval)
         + (v167 + v169 * 0.99330562) * v168.__sinval * ((v167 + v169 * 0.99330562) * v168.__sinval)
         + (v169 + v167) * v168.__cosval * v170.__cosval * ((v169 + v167) * v168.__cosval * v170.__cosval)))
       * 4.0
       * v171;
  v175 = -(v174 - v173 * v173);
  if (v175 >= 0.0 && (v176 = (sqrt(v175) + v173) * -0.5 / v171, v176 >= 0.0))
  {
    v201 = v176 * v163;
    v202 = v176 * v164;
    v203 = v176 * v165;
  }
  else
  {
    v177 = -(v165 * v393 + v164 * v397 + v163 * v390) - (v165 * v393 + v164 * v397 + v163 * v390);
    v178 = -(v174 - v177 * v177);
    if (v178 < 0.0
      || (v199 = sqrt(v170.__cosval), v200 = (v199 + v177) * -0.5 / v171, v200 < 0.0)
      && (v200 = (v199 - v177) * 0.5 / v171, v200 < 0.0))
    {
      v179 = sqrt((v387 + cos(3.14159265 - *(double *)(v11 + 40)) * -12756274.0) * v387 + 4.06806316e13);
      v180 = sqrt((v179 + 6378137.0) * (v179 + -6378137.0));
      v181 = v390 + v180 * v163;
      v182 = v397 + v180 * v164;
      v183 = v393 + v180 * v165;
      v184 = sqrt(v181 * v181 + v182 * v182);
      v185 = atan2(v183, v184 * 0.996647189);
      v186 = atan2(v182, v181);
      v187 = __sincos_stret(v185);
      v188 = atan2(v183 + v187.__sinval * v187.__sinval * 42841.3115 * v187.__sinval, v184 + v187.__cosval * v187.__cosval * -42697.6727 * v187.__cosval);
      v189 = __sincos_stret(v188);
      v190 = 6378137.0 / sqrt(v189.__sinval * v189.__sinval * -0.00669437999 + 1.0);
      v191 = (v190 + v167) * v189.__cosval;
      v192 = __sincos_stret(v186);
      v193 = v191 * v192.__cosval;
      v194 = v191 * v192.__sinval;
      v195 = (v167 + v190 * 0.99330562) * v189.__sinval;
      v196 = v424;
      v198 = v369;
      v197 = v370;
      goto LABEL_66;
    }
    v201 = v200 * -v163;
    v202 = v200 * -v164;
    v203 = v200 * -v165;
  }
  v196 = v424;
  v198 = v369;
  v197 = v370;
  v195 = v203 + v393;
  v194 = v202 + v397;
  v193 = v201 + v390;
LABEL_66:
  v204 = sqrt(v193 * v193 + v194 * v194);
  v205 = atan2(v195, v204 * 0.996647189);
  v206 = __sincos_stret(v205);
  v207 = atan2(v195 + v206.__sinval * v206.__sinval * 42841.3115 * v206.__sinval, v204 + v206.__cosval * v206.__cosval * -42697.6727 * v206.__cosval);
  v208 = cos(v207);
  _V5.D[1] = v421.f64[1];
  v210 = v193 - v421.f64[0];
  _D10 = v421.f64[1];
  v212 = v400;
  v213 = fabs(fmax(v387 * 0.2, sqrt(v210 * v210 + (v194 - v421.f64[1]) * (v194 - v421.f64[1]) + (v195 - v400) * (v195 - v400))))* sqrt(2.0 - (v383 * v197 + v198 * v379 + v381 * v385) * 2.0);
  *(double *)(a1 + 72) = v213;
  __asm { FMLA            D3, D10, V5.D[1] }
  v215 = fabs(-(vmuld_lane_f64(v198, v421, 1) + v212 * v197 + v421.f64[0] * v385) / sqrt(_D3 + v212 * v212));
  v216 = 1.0;
  v217 = v213 * (0.000000156961014 * fmin(1.0 / v215, 2.0));
  v218 = 1.0 / sqrt(v196 * v196 + v403 * v403 + v415 * v415);
  v219 = v218 * v196;
  v220 = -(v403 * v218);
  v221 = 1.0 / sqrt(v220 * v220 + v219 * v219);
  v222 = v221 * v220;
  v223 = v221 * v219;
  v398 = -(v221 * v220);
  v388 = v221 * v220 * v376 + v221 * v219 * v374;
  v391 = -(v221 * v220 * v374 - v221 * v219 * v376);
  v224 = -(v400 * (v221 * v219));
  v225 = vmlad_n_f64(-(v222 * v421.f64[1]), v221 * v219, v421.f64[0]);
  v226 = v217
       * (v222 * v400 * v374 + v225 * v378 + v224 * v376)
       * fmin(1.0 / v208, 4.0)
       / sqrt(v224 * v224 + v222 * v212 * (v222 * v212) + v225 * v225);
  v227 = fmax(fabs(v207), 1.30899694);
  if (v227 <= 1.48352986)
    v228 = v227 * 5.72957795 + -7.5;
  else
    v228 = 1.0;
  v229 = -((v228 * 2.0 + -3.0) * (v228 * v228));
  v394 = v217;
  v230 = v226 + -(v226 - v217 * v378) * v229;
  if (*(double *)(*a2 + 32) > 1000000.0)
  {
    v231 = *(_DWORD *)(a1 + 24) - *(_DWORD *)(a1 + 40);
    if (v231)
    {
      v232 = fmax(fabs((double)(*(_DWORD *)(a1 + 20) - *(_DWORD *)(a1 + 36)) / (double)v231), 1.0);
      if (v232 <= 2.0)
        v233 = v232 + -1.0;
      else
        v233 = 1.0;
      v216 = v233 * v233 * (v233 * 2.0 + -3.0) + 1.0;
    }
  }
  v234 = __sincos_stret(v230 * 0.5);
  v235 = __sincos_stret(v394 * 0.5 * (v388 * v216));
  v236 = -(v235.__sinval * v223 * v234.__sinval - v235.__sinval * v222 * v234.__cosval);
  v237 = v235.__sinval * v222 * v234.__sinval + v235.__sinval * v223 * v234.__cosval;
  v238 = __sincos_stret(v394 * 0.5 * v391 * v229);
  v239 = v236 * v238.__cosval
       - (v235.__cosval * v234.__sinval * (v238.__sinval * v398)
        - v235.__cosval * v234.__cosval * (v238.__sinval * v223));
  v240 = v235.__cosval * v234.__cosval * (v238.__sinval * v398)
       + v235.__cosval * v234.__sinval * (v238.__sinval * v223)
       + v237 * v238.__cosval;
  v241 = v235.__cosval * v234.__sinval * v238.__cosval - (v237 * (v238.__sinval * v223) - v236 * (v238.__sinval * v398));
  v242 = -(v237 * (v238.__sinval * v398) + v236 * (v238.__sinval * v223) - v235.__cosval * v234.__cosval * v238.__cosval);
  v243 = -(v241 * v421.f64[1] - v240 * v400) - (v241 * v421.f64[1] - v240 * v400);
  v244 = -(v239 * v400 - v241 * v421.f64[0]) - (v239 * v400 - v241 * v421.f64[0]);
  v245 = -(v240 * v421.f64[0] - v239 * v421.f64[1]) - (v240 * v421.f64[0] - v239 * v421.f64[1]);
  _Q22.f64[0] = v421.f64[0] + v243 * v242 + v245 * v240 - v244 * v241;
  v23 = v400 + v244 * v239 + v245 * v242 - v243 * v240;
  _Q22.f64[1] = v421.f64[1] + v243 * v241 + v244 * v242 - v245 * v239;
  v246 = -(v403 * v241 - v240 * v415) - (v403 * v241 - v240 * v415);
  v247 = -(v239 * v415 - v424 * v241) - (v239 * v415 - v424 * v241);
  v248 = -(v424 * v240 - v403 * v239) - (v424 * v240 - v403 * v239);
  v424 = v424 + v246 * v242 + v248 * v240 - v247 * v241;
  v19 = v403 + v246 * v241 + v247 * v242 - v248 * v239;
  v20 = v415 - v246 * v240 + v247 * v239 + v248 * v242;
  v249 = -(v407 * v241 - v406 * v240) - (v407 * v241 - v406 * v240);
  v250 = -(v406 * v239 - v408 * v241) - (v406 * v239 - v408 * v241);
  v251 = -(v408 * v240 - v407 * v239) - (v408 * v240 - v407 * v239);
  v407 = v407 + v249 * v241 + v250 * v242 - v251 * v239;
  v408 = v408 + v249 * v242 + v251 * v240 - v250 * v241;
  v406 = v406 - v249 * v240 + v250 * v239 + v251 * v242;
  *(_QWORD *)(a1 + 28) = *(_QWORD *)(a1 + 20);
  v29 = 1;
  if (*(_BYTE *)(a1 + 82))
  {
LABEL_23:
    v30 = *(double *)(a1 + 96);
    v412 = v20;
    v31 = *(double *)(a1 + 104);
    v418 = _Q22;
    v32 = v19;
    v33 = v424;
    v34 = __sincos_stret(*(double *)(a1 + 88));
    v35 = 6378137.0 / sqrt(v34.__sinval * v34.__sinval * -0.00669437999 + 1.0);
    v36 = (v35 + v31) * v34.__cosval;
    v37 = __sincos_stret(v30);
    v38 = v36 * v37.__cosval;
    v39 = v36 * v37.__sinval;
    v40 = (v31 + v35 * 0.99330562) * v34.__sinval;
    v41 = __sincos_stret(*(double *)(a1 + 120) * 0.5);
    v42 = v41.__sinval / sqrt(v38 * v38 + v39 * v39 + v40 * v40);
    _D2 = v42 * v38;
    v44 = v42 * v39;
    v45 = v42 * v40;
    _V16.D[1] = v418.f64[1];
    v47 = vmuld_lane_f64(v45, v418, 1);
    v48 = vmlad_n_f64(-(_D2 * v23), v45, v418.f64[0]);
    __asm { FMLA            D7, D2, V16.D[1] }
    v54 = -(v47 - v44 * v23) - (v47 - v44 * v23);
    v55 = v48 + v48;
    v56 = _D7 + _D7;
    _Q22.f64[0] = v418.f64[0] + v54 * v41.__cosval + v56 * v44 - v55 * v45;
    v23 = v23 + v55 * _D2 + v56 * v41.__cosval - v54 * v44;
    _Q22.f64[1] = v418.f64[1] + v54 * v45 + v55 * v41.__cosval - v56 * _D2;
    v57 = -(v45 * v32 - v44 * v412) - (v45 * v32 - v44 * v412);
    v58 = -(_D2 * v412 - v45 * v33) - (_D2 * v412 - v45 * v33);
    v59 = -(v44 * v33 - _D2 * v32) - (v44 * v33 - _D2 * v32);
    v424 = v424 + v57 * v41.__cosval + v59 * v44 - v58 * v45;
    v19 = v32 + v57 * v45 + v58 * v41.__cosval - v59 * _D2;
    v20 = v412 + v58 * _D2 + v59 * v41.__cosval - v57 * v44;
    v60 = -(v407 * v45 - v406 * v44) - (v407 * v45 - v406 * v44);
    v61 = -(_D2 * v406 - v408 * v45) - (_D2 * v406 - v408 * v45);
    v62 = -(v408 * v44 - v407 * _D2) - (v408 * v44 - v407 * _D2);
    v407 = v407 + v60 * v45 + v61 * v41.__cosval - v62 * _D2;
    v408 = v408 + v60 * v41.__cosval + v62 * v44 - v61 * v45;
    v406 = v406 - v60 * v44 + v61 * _D2 + v62 * v41.__cosval;
    *(_QWORD *)(a1 + 120) = 0;
    v29 = 1;
  }
LABEL_24:
  if (*(_BYTE *)(a1 + 129))
  {
    v392 = fmin(fmax(*(double *)(*a2 + 40) + *(double *)(a1 + 176), 0.0), 3.14159265) - *(double *)(*a2 + 40);
    v63 = *(double *)(a1 + 144);
    v64 = *(double *)(a1 + 152);
    v419 = _Q22;
    v65 = __sincos_stret(*(double *)(a1 + 136));
    v66 = 6378137.0 / sqrt(v65.__sinval * v65.__sinval * -0.00669437999 + 1.0);
    v67 = (v66 + v64) * v65.__cosval;
    v68 = __sincos_stret(v63);
    v69 = (v64 + v66 * 0.99330562) * v65.__sinval;
    v382 = v419.f64[1] - v67 * v68.__sinval;
    v384 = v419.f64[0] - v67 * v68.__cosval;
    v380 = v23 - v69;
    v395 = v424 - v67 * v68.__cosval;
    v386 = v20 - v69;
    v389 = v19 - v67 * v68.__sinval;
    v70 = v20 - v23;
    v72 = v406;
    v71 = v407;
    v413 = v20;
    v73 = -(v407 * (v20 - v23) - v406 * (v19 - v419.f64[1]));
    v74 = v408;
    v75 = -(v406 * (v424 - v419.f64[0]) - v408 * v70);
    v402 = v19;
    v76 = -(v408 * (v19 - v419.f64[1]) - v407 * (v424 - v419.f64[0]));
    v77 = __sincos_stret(v392 * 0.5);
    v78 = v77.__sinval / sqrt(v73 * v73 + v75 * v75 + v76 * v76);
    v79 = v78 * v73;
    v80 = v78 * v75;
    v81 = v78 * v76;
    v82 = -(v81 * v382 - v80 * v380) - (v81 * v382 - v80 * v380);
    v83 = -(v79 * v380 - v81 * v384) - (v79 * v380 - v81 * v384);
    v84 = -(v80 * v384 - v79 * v382) - (v80 * v384 - v79 * v382);
    _Q22.f64[0] = v419.f64[0] + v82 * v77.__cosval + v84 * v80 - v83 * v81;
    v23 = v23 + v83 * v79 + v84 * v77.__cosval - v82 * v80;
    _Q22.f64[1] = v419.f64[1] + v82 * v81 + v83 * v77.__cosval - v84 * v79;
    v85 = -(v81 * v389 - v80 * v386) - (v81 * v389 - v80 * v386);
    v86 = -(v79 * v386 - v81 * v395) - (v79 * v386 - v81 * v395);
    v87 = -(v80 * v395 - v79 * v389) - (v80 * v395 - v79 * v389);
    v424 = v424 + v85 * v77.__cosval + v87 * v80 - v86 * v81;
    v19 = v402 + v85 * v81 + v86 * v77.__cosval - v87 * v79;
    v20 = v413 + v86 * v79 + v87 * v77.__cosval - v85 * v80;
    v88 = -(v81 * v71 - v80 * v72) - (v81 * v71 - v80 * v72);
    v89 = -(v79 * v72 - v81 * v74) - (v79 * v72 - v81 * v74);
    v90 = -(v80 * v74 - v79 * v71) - (v80 * v74 - v79 * v71);
    v407 = v407 + v88 * v81 + v89 * v77.__cosval - v90 * v79;
    v408 = v408 + v88 * v77.__cosval + v90 * v80 - v89 * v81;
    v406 = v406 + v89 * v79 + v90 * v77.__cosval - v88 * v80;
    *(_QWORD *)(a1 + 176) = 0;
    v29 = 1;
  }
  if (*(_BYTE *)(a1 + 185))
  {
    v91 = v23;
    v420 = _Q22;
    v414 = v20;
    v396 = *(double *)(*a2 + 104);
    v399 = *(double *)(*a2 + 96);
    v92 = *(double *)(*a2 + 32);
    if (v92 < *(double *)(a1 + 232) * 0.125)
    {
      md::MapDataAccess::groundCoordinateForScreenCursor((uint64_t)&v436, *(_QWORD *)(a1 + 8), *a2 + 8, *(int32x2_t *)(a1 + 216));
      *(float64x2_t *)(a1 + 192) = v436;
      *(double *)(a1 + 208) = v437;
      *(_QWORD *)(a1 + 232) = *(_QWORD *)(*a2 + 32);
    }
    v93 = *(double *)(a1 + 200);
    v94 = *(double *)(a1 + 208);
    v95 = __sincos_stret(*(double *)(a1 + 192));
    v96 = 6378137.0 / sqrt(v95.__sinval * v95.__sinval * -0.00669437999 + 1.0);
    v97 = (v96 + v94) * v95.__cosval;
    v98 = __sincos_stret(v93);
    v99 = v97 * v98.__cosval;
    v100 = v97 * v98.__sinval;
    v101 = (v94 + v96 * 0.99330562) * v95.__sinval;
    v102 = *(double *)(a1 + 224);
    if (v102 <= 1.0)
    {
      _Q22 = v420;
      _D3 = v420.f64[1];
      v20 = v414;
      v23 = v91;
    }
    else
    {
      _Q22 = v420;
      _D3 = v420.f64[1];
      __asm { FMLA            D6, D3, V22.D[1] }
      v23 = v91;
      v20 = v414;
      if (sqrt(_D6 + v91 * v91) - sqrt(v99 * v99 + v100 * v100 + v101 * v101) < v92 * 0.2)
      {
        v105 = 0.2 - v102 * 0.2;
        v106 = v105 * (v424 - v420.f64[0]);
        v107 = v105 * (v19 - v420.f64[1]);
        v108 = v105 * (v414 - v91);
        _Q22.f64[0] = v106 + v420.f64[0];
        _Q22.f64[1] = v107 + v420.f64[1];
        v109 = v108 + v91;
        v424 = v106 + v424;
        v19 = v107 + v19;
        v20 = v108 + v414;
        goto LABEL_82;
      }
    }
    v127 = v99 - _Q22.f64[0];
    v128 = v100 - _D3;
    v129 = v101 - v23;
    v130 = sqrt(v127 * v127 + v128 * v128 + v129 * v129);
    v131 = v130 * v102;
    if (v102 >= 1.0)
    {
      if (v102 <= 1.0)
      {
        v133 = v130 * v102;
LABEL_78:
        v252 = v130 - v133;
        v253 = 1.0
             / sqrt((v424 - _Q22.f64[0]) * (v424 - _Q22.f64[0]) + (v19 - _D3) * (v19 - _D3) + (v20 - v23) * (v20 - v23));
        v254 = v253 * (v424 - _Q22.f64[0]);
        v255 = v253 * (v19 - _D3);
        v256 = v253 * (v20 - v23);
        v257 = v252 / v130;
        v258.f64[0] = _Q22.f64[0] + v257 * v127;
        v259 = _D3 + v257 * v128;
        v109 = v23 + v257 * v129;
        v260 = v254 * v254 + v255 * v255 + v256 * v256;
        v261 = v254 * v258.f64[0] + v255 * v259 + v256 * v109;
        v262 = v261 + v261;
        v263 = (v259 * v259 - (v100 * v100 + v101 * v101 + v99 * v99 - v258.f64[0] * v258.f64[0]) + v109 * v109)
             * (-4.0
              * v260)
             + v262 * v262;
        if (v263 < 0.0 || (v264 = (sqrt(v263) + v262) * -0.5 / v260, v264 < 0.0))
        {
          v265 = 0;
LABEL_83:
          v29 |= v265;
          goto LABEL_84;
        }
        v424 = v258.f64[0] + v264 * v254;
        v19 = v259 + v264 * v255;
        v20 = v109 + v264 * v256;
        v258.f64[1] = v259;
        _Q22 = v258;
LABEL_82:
        *(_QWORD *)(a1 + 224) = 0x3FF0000000000000;
        v265 = 1;
        v23 = v109;
        goto LABEL_83;
      }
      v132 = v396;
      v133 = v130;
      if (v130 > v396)
        goto LABEL_78;
      v133 = v131;
      if (v131 <= v396)
        goto LABEL_78;
    }
    else
    {
      v132 = v399;
      v133 = v130;
      if (v130 < v399)
        goto LABEL_78;
      v133 = v131;
      if (v131 >= v399)
        goto LABEL_78;
    }
    v133 = v132;
    goto LABEL_78;
  }
LABEL_84:
  v266 = *(unsigned __int8 *)(a1 + 18);
  v416 = v20;
  v422 = _Q22;
  v401 = v23;
  if (*(_BYTE *)(a1 + 18) || *(_BYTE *)(a1 + 130) || *(_BYTE *)(a1 + 83) || *(_BYTE *)(a1 + 186))
  {
    v267 = (_BYTE *)(a1 + 243);
    if (*(_BYTE *)(a1 + 243))
    {
      if (*(double *)(a1 + 256) < 1.0)
        goto LABEL_92;
      *v267 = 0;
    }
    goto LABEL_91;
  }
  v267 = (_BYTE *)(a1 + 243);
  if (!*(_BYTE *)(a1 + 243))
LABEL_91:
    *(_QWORD *)(a1 + 264) = *(_QWORD *)(*a2 + 40);
LABEL_92:
  v268 = *(double *)(*a2 + 16);
  v269 = *(double *)(*a2 + 24);
  v270 = __sincos_stret(*(double *)(*a2 + 8));
  v271 = 6378137.0 / sqrt(v270.__sinval * v270.__sinval * -0.00669437999 + 1.0);
  v272 = (v271 + v269) * v270.__cosval;
  v273 = __sincos_stret(v268);
  v274 = v272 * v273.__cosval;
  v275 = v272 * v273.__sinval;
  v276 = (v269 + v271 * 0.99330562) * v270.__sinval;
  *(double *)(a1 + 272) = v274;
  *(double *)(a1 + 280) = v275;
  *(double *)(a1 + 288) = v276;
  *(_QWORD *)(a1 + 256) = 0;
  *(_BYTE *)(a1 + 244) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  v277 = *a2;
  v278 = *(unsigned __int8 *)(a1 + 241);
  if (*(_BYTE *)(a1 + 241))
  {
    v279 = *(double *)(v277 + 32);
    v280 = 0.0;
    if (v279 <= 1500000.0)
    {
      v281 = 0.000000666666667;
      if (v279 >= 1.0)
        v281 = v279 * 0.000000666666667;
      v282 = cos(sqrt(v281) * 3.7699104 + 2.5132736);
      if (*v267)
        v280 = *(double *)(a1 + 264);
      else
        v280 = 0.680678408 - v282 * 0.680678408;
    }
  }
  else
  {
    v280 = 1.57079633;
  }
  v283 = *(double *)(v277 + 40);
  *(_BYTE *)(a1 + 243) = v280 < v283;
  *(_QWORD *)(a1 + 320) = 0x3FD3333333333333;
  if (v280 < v283)
  {
    v404 = v19;
    v284 = *(double *)(v277 + 16);
    v285 = *(double *)(v277 + 24);
    v286 = __sincos_stret(*(double *)(v277 + 8));
    v287 = 6378137.0 / sqrt(v286.__sinval * v286.__sinval * -0.00669437999 + 1.0);
    v288 = (v287 + v285) * v286.__cosval;
    v289 = __sincos_stret(v284);
    v290 = -(v274 - v288 * v289.__cosval);
    v291 = -(v275 - v288 * v289.__sinval);
    v292 = -(v276 - (v285 + v287 * 0.99330562) * v286.__sinval);
    v293 = sqrt(v290 * v290 + v291 * v291 + v292 * v292);
    if (v293 > 1.0)
    {
      v294 = 1.0 / v293;
      *(double *)(a1 + 296) = v294 * v290;
      *(double *)(a1 + 304) = v294 * v291;
      *(double *)(a1 + 312) = v294 * v292;
    }
    *(_QWORD *)(a1 + 256) = 0;
    v19 = v404;
  }
  if ((v29 | a3) == 1)
  {
    v405 = v424 * v424 + v19 * v19;
    v295 = sqrt(v405);
    v296 = atan2(v416, v295 * 0.996647189);
    v409 = atan2(v19, v424);
    v297 = __sincos_stret(v296);
    v410 = atan2(v416 + v297.__sinval * v297.__sinval * 42841.3115 * v297.__sinval, v295 + v297.__cosval * v297.__cosval * -42697.6727 * v297.__cosval);
    v298 = __sincos_stret(v410);
    v411 = v295 / v298.__cosval + -6378137.0 / sqrt(v298.__sinval * v298.__sinval * -0.00669437999 + 1.0);
    v299 = v424 - v422.f64[0];
    v422.f64[0] = sqrt(v299 * v299 + (v19 - v422.f64[1]) * (v19 - v422.f64[1]) + (v416 - v401) * (v416 - v401));
    v300 = 1.0 / v422.f64[0] * v299;
    v301 = v19;
    v302 = 1.0 / v422.f64[0] * (v19 - v422.f64[1]);
    v303 = 1.0 / v422.f64[0] * (v416 - v401);
    v304 = 1.0 / sqrt(v408 * v408 + v407 * v407 + v406 * v406);
    v305 = v304 * v408;
    v306 = v304 * v407;
    v307 = v304 * v406;
    v308 = *(unsigned __int8 *)(a1 + 129);
    if (*(_BYTE *)(a1 + 129))
      v309 = acos(fmin(fmax(-(v302 * v301 + v303 * v416 + v300 * v424) / sqrt(v405 + v416 * v416), -1.0), 1.0));
    else
      v309 = *(double *)(v277 + 40);
    v310 = __sincos_stret(v309);
    v311 = v305 * v310.__cosval + v310.__sinval * v300;
    v312 = v306 * v310.__cosval + v310.__sinval * v302;
    v439 = 0u;
    v438 = 0u;
    v313 = v307 * v310.__cosval + v310.__sinval * v303;
    v436.f64[0] = v410;
    v436.f64[1] = v409;
    v314 = v411;
    v437 = v411;
    gdc::CameraFrame<geo::Radians,double>::toRigidTransformGeocentric(&v429, v436.f64);
    v315 = -(v433 * v313 - v434 * v312) - (v433 * v313 - v434 * v312);
    v316 = -(v434 * v311 - v432 * v313) - (v434 * v311 - v432 * v313);
    v317 = -(v432 * v312 - v433 * v311) - (v432 * v312 - v433 * v311);
    v318 = atan2(-(v316 * v434 - (-(v311 - v317 * v433) - v315 * v435)), v312 + v317 * v432 + v316 * v435 - v315 * v434);
    if (v308)
    {
      v319 = v309;
      v321.f64[0] = v409;
      v320 = v410;
      v322 = v422.f64[0];
      goto LABEL_121;
    }
    v322 = v422.f64[0];
    if (v278)
    {
      v319 = 0.0;
      if (v422.f64[0] <= 1500000.0)
      {
        v323 = 0.000000666666667;
        if (v422.f64[0] >= 1.0)
          v323 = v422.f64[0] * 0.000000666666667;
        v324 = cos(sqrt(v323) * 3.7699104 + 2.5132736);
        if (*(_BYTE *)(a1 + 243))
        {
          v319 = *(double *)(a1 + 264);
          if (v309 <= v319)
          {
LABEL_116:
            v319 = v309;
            v321.f64[0] = v409;
            v320 = v410;
            goto LABEL_121;
          }
        }
        else
        {
          v319 = 0.680678408 - v324 * 0.680678408;
          if (v309 <= v319)
            goto LABEL_116;
        }
LABEL_119:
        v321.f64[0] = v409;
        v320 = v410;
        if (*(_BYTE *)(a1 + 242))
        {
          *(_BYTE *)(a1 + 244) = 1;
          *(double *)(a1 + 248) = v309;
        }
LABEL_121:
        *(double *)v325.i64 = v320;
        if (*(_BYTE *)(a1 + 82))
        {
          v326 = v318;
        }
        else
        {
          v326 = v318;
          if (fabs(v320) < 1.30899694)
          {
            v327 = *(double *)(v277 + 48);
            if (v322 >= 400000.0)
            {
              v328 = fabs(v327);
              v326 = 0.0;
              if (v328 >= 0.01)
              {
                v425 = v320;
                v329 = fmod(v321.f64[0] + 3.14159265 - *(double *)(v277 + 16), 6.28318531);
                v330 = fabs(fmod(v329 + 6.28318531, 6.28318531) + -3.14159265);
                v331 = v330 + v330;
                if (*(_BYTE *)(a1 + 240))
                {
                  v332 = *(double *)(v277 + 32);
                  if (v322 >= v332)
                    v333 = v322 * 0.785398163 / v332;
                  else
                    v333 = v332 * 0.785398163 / v322;
                  v334 = v333 + -0.785398163;
                }
                else
                {
                  v334 = 0.0;
                }
                v321.f64[0] = v409;
                v320 = v410;
                *(double *)v325.i64 = v425;
                v335 = fmin(v328, fmax(v331, v334));
                if (v327 <= 0.0)
                  v335 = -v335;
                v326 = v318 - v335;
              }
            }
            else
            {
              v326 = *(double *)(v277 + 48);
            }
          }
        }
        v325.i64[1] = *(_QWORD *)&v321.f64[0];
        v336 = fmin(v322, 60592301.5);
        v337 = *(double *)(a1 + 344);
        v338 = *(double *)(a1 + 328);
        if (v337 < v338 || (v339 = *(double *)(a1 + 352), v340 = *(double *)(a1 + 336), v339 < v340))
        {
LABEL_144:
          v341 = *(double *)(a1 + 376);
          v342 = *(double *)(a1 + 360);
          if (v341 < v342)
            goto LABEL_156;
          v343 = *(double *)(a1 + 384);
          v344 = *(double *)(a1 + 368);
          if (v343 < v344)
            goto LABEL_156;
          v345 = *(double *)(a1 + 408);
          v346 = *(double *)(a1 + 392);
          if (v345 < v346)
            goto LABEL_156;
          v347 = *(double *)(a1 + 416);
          v348 = *(double *)(a1 + 400);
          if (v347 < v348)
            goto LABEL_156;
          if (v321.f64[0] <= v341)
          {
            if (v321.f64[0] >= v342)
            {
              v349 = 1;
              v359 = 0.0;
LABEL_177:
              if (v320 <= v343)
              {
                if (v320 >= v344)
                {
                  if ((v349 & 1) != 0)
                    goto LABEL_156;
                  v361 = sqrt(v359);
                  if (v321.f64[0] > v345)
                    goto LABEL_182;
                  goto LABEL_185;
                }
                v360 = v344 - v320;
              }
              else
              {
                v360 = v320 - v343;
              }
              v361 = sqrt(v360 * v360 + v359);
              if (v321.f64[0] > v345)
              {
LABEL_182:
                v362 = 0;
                v363 = v321.f64[0] - v345;
                goto LABEL_187;
              }
LABEL_185:
              if (v321.f64[0] >= v346)
              {
                v362 = 1;
                v364 = 0.0;
                goto LABEL_189;
              }
              v362 = 0;
              v363 = v346 - v321.f64[0];
LABEL_187:
              v364 = v363 * v363;
LABEL_189:
              if (v320 > v347)
              {
                v365 = v320 - v347;
LABEL_193:
                v366 = sqrt(v365 * v365 + v364);
LABEL_194:
                v367 = (float64x2_t *)(a1 + 360);
                if (v361 > v366)
                  v367 = (float64x2_t *)(a1 + 392);
                v321.f64[1] = v320;
                v368 = (int8x16_t)vminnmq_f64(vmaxnmq_f64(v321, *v367), v367[1]);
                v325 = vextq_s8(v368, v368, 8uLL);
                goto LABEL_156;
              }
              if (v320 < v348)
              {
                v365 = v348 - v320;
                goto LABEL_193;
              }
              if ((v362 & 1) == 0)
              {
                v366 = sqrt(v364);
                goto LABEL_194;
              }
LABEL_156:
              *(int8x16_t *)(v277 + 8) = v325;
              *(double *)(v277 + 24) = v314;
              *(double *)(v277 + 32) = v336;
              *(double *)(v277 + 40) = v319;
              *(double *)(v277 + 48) = v326;
              *(_QWORD *)(v277 + 56) = 0;
              v266 = *(unsigned __int8 *)(a1 + 18);
              goto LABEL_157;
            }
            v349 = 0;
            v350 = v342 - v321.f64[0];
          }
          else
          {
            v349 = 0;
            v350 = v321.f64[0] - v341;
          }
          v359 = v350 * v350;
          goto LABEL_177;
        }
        if (v321.f64[0] < v338)
          goto LABEL_151;
        if (v321.f64[0] < v337)
        {
          v358 = v320 >= v340 && v320 < v339;
          if (v358)
            goto LABEL_144;
        }
        if (v321.f64[0] > v337)
        {
LABEL_151:
          v423 = v319;
          v351 = v321.f64[0] + -3.14159265;
          v417 = v336;
          v352 = fmod(v338 - (v321.f64[0] + -3.14159265), 6.28318531);
          v353 = fabs(fmod(v352 + 6.28318531, 6.28318531) + -3.14159265);
          v354 = v337 - v351;
          v319 = v423;
          v355 = fmod(v354, 6.28318531);
          v356 = fmod(v355 + 6.28318531, 6.28318531);
          v320 = v410;
          v358 = v353 <= fabs(v356 + -3.14159265);
          v314 = v411;
          v336 = v417;
          if (v358)
            v357 = (uint64_t *)(a1 + 328);
          else
            v357 = (uint64_t *)(a1 + 344);
          v325.i64[1] = *v357;
        }
        v325.i64[0] = fmin(fmax(v320, v340), v339);
        goto LABEL_156;
      }
    }
    else
    {
      v319 = 1.57079633;
    }
    if (v309 <= v319)
      goto LABEL_116;
    goto LABEL_119;
  }
LABEL_157:
  if (v266)
    *(_WORD *)(a1 + 17) = 0;
  if (*(_BYTE *)(a1 + 130))
    *(_WORD *)(a1 + 129) = 0;
  if (*(_BYTE *)(a1 + 83))
    *(_WORD *)(a1 + 82) = 0;
  if (*(_BYTE *)(a1 + 186))
    *(_WORD *)(a1 + 185) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 81) = 0;
  *(_BYTE *)(a1 + 184) = 0;
}

uint64_t ggl::ConstantDataTyped<ggl::OffsetRibbon::Noise>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::OffsetRibbon::Noise>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::OffsetRibbon::Noise>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1210;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::OffsetRibbon::Noise>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1210;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::OffsetRibbon::Noise>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ggl::ConstantDataTyped<ggl::TexturedInnerShadowRibbon::ShadowStyle>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::TexturedInnerShadowRibbon::ShadowStyle>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TexturedInnerShadowRibbon::ShadowStyle>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2080;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TexturedInnerShadowRibbon::ShadowStyle>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2080;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TexturedInnerShadowRibbon::ShadowStyle>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ggl::ConstantDataTyped<ggl::Line::Style>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::Line::Style>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Line::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2208;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Line::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2208;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Line::Style>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ggl::ConstantDataTyped<ggl::OuterShadowRibbon::Style>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::OuterShadowRibbon::Style>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::OuterShadowRibbon::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1BE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::OuterShadowRibbon::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1BE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::OuterShadowRibbon::Style>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ggl::ConstantDataTyped<ggl::OffsetRibbon::Style>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::OffsetRibbon::Style>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::OffsetRibbon::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1248;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::OffsetRibbon::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1248;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::OffsetRibbon::Style>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::TexturedInnerShadowRibbon::PipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3EE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::TexturedInnerShadowRibbon::PipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3EE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::TexturedSolidRibbon::PipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3890;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::TexturedSolidRibbon::PipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3890;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::Line::BasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E43F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::Line::BasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E43F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::OuterShadowRibbon::PipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3008;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::OuterShadowRibbon::PipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3008;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t *md::RoadSharedResources::RoadSharedResources(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, __int128 *a6, int a7, float a8, float a9)
{
  char v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  char *v23;
  unsigned __int8 v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  int8x16_t v30;
  int16x8_t v31;
  int32x4_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int16x8_t v35;
  int32x4_t v36;
  int8x16_t v37;
  int32x4_t v38;
  int8x16_t v39;
  int32x4_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int16x8_t v50;
  int32x4_t v51;
  int8x16_t v52;
  int16x8_t v53;
  int32x4_t v54;
  int8x16_t v55;
  int32x4_t v56;
  int8x16_t v57;
  int32x4_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int16x8_t v73;
  int32x4_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int16x8_t v77;
  int32x4_t v78;
  int8x16_t v79;
  int16x8_t v80;
  int32x4_t v81;
  int8x16_t v82;
  int16x8_t v83;
  int32x4_t v84;
  int8x16_t v85;
  int32x4_t v86;
  int8x16_t v87;
  int32x4_t v88;
  int8x16_t v89;
  int32x4_t v90;
  int8x16_t v91;
  int32x4_t v92;
  int8x16_t v93;
  int8x16_t v94;
  int8x16_t v95;
  int8x16_t v96;
  int8x16_t v97;
  int8x16_t v98;
  int8x16_t v99;
  int8x16_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  char *v111;
  unsigned __int8 v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t *v116;
  unint64_t v117;
  int8x16_t v118;
  int16x8_t v119;
  int32x4_t v120;
  int8x16_t v121;
  int8x16_t v122;
  int16x8_t v123;
  int32x4_t v124;
  int8x16_t v125;
  int32x4_t v126;
  int8x16_t v127;
  int32x4_t v128;
  int8x16_t v129;
  int8x16_t v130;
  int8x16_t v131;
  int8x16_t v132;
  int8x16_t v133;
  int8x16_t v134;
  int8x16_t v135;
  int8x16_t v136;
  int8x16_t v137;
  int16x8_t v138;
  int32x4_t v139;
  int8x16_t v140;
  int16x8_t v141;
  int32x4_t v142;
  int8x16_t v143;
  int32x4_t v144;
  int8x16_t v145;
  int32x4_t v146;
  int8x16_t v147;
  int8x16_t v148;
  int8x16_t v149;
  int8x16_t v150;
  int8x16_t v151;
  int8x16_t v152;
  int8x16_t v153;
  int8x16_t v154;
  int8x16_t v155;
  int8x16_t v156;
  int8x16_t v157;
  int8x16_t v158;
  int8x16_t v159;
  int8x16_t v160;
  int16x8_t v161;
  int32x4_t v162;
  int16x8_t v163;
  int32x4_t v164;
  int32x4_t v165;
  int32x4_t v166;
  int8x16_t v167;
  int8x16_t v168;
  int8x16_t v169;
  int16x8_t v170;
  int32x4_t v171;
  int16x8_t v172;
  int32x4_t v173;
  int8x16_t v174;
  int8x16_t v175;
  int8x16_t v176;
  int32x4_t v177;
  int8x16_t v178;
  int8x16_t v179;
  int8x16_t v180;
  int32x4_t v181;
  int8x16_t v182;
  int8x16_t v183;
  int8x16_t v184;
  int8x16_t v185;
  int8x16_t v186;
  int8x16_t v187;
  int8x16_t v188;
  int8x16_t v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  unint64_t *v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  char *v200;
  unsigned __int8 v201;
  unint64_t *v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t *v205;
  unint64_t v206;
  int8x16_t v207;
  int16x8_t v208;
  int32x4_t v209;
  int8x16_t v210;
  int8x16_t v211;
  int16x8_t v212;
  int32x4_t v213;
  int8x16_t v214;
  int32x4_t v215;
  int8x16_t v216;
  int32x4_t v217;
  int8x16_t v218;
  int8x16_t v219;
  int8x16_t v220;
  int8x16_t v221;
  int8x16_t v222;
  int8x16_t v223;
  int8x16_t v224;
  int8x16_t v225;
  int8x16_t v226;
  int16x8_t v227;
  int32x4_t v228;
  int8x16_t v229;
  int16x8_t v230;
  int32x4_t v231;
  int8x16_t v232;
  int32x4_t v233;
  int8x16_t v234;
  int32x4_t v235;
  int8x16_t v236;
  int8x16_t v237;
  int8x16_t v238;
  int8x16_t v239;
  int8x16_t v240;
  int8x16_t v241;
  int8x16_t v242;
  int8x16_t v243;
  int8x16_t v244;
  int8x16_t v245;
  int8x16_t v246;
  int8x16_t v247;
  int8x16_t v248;
  int8x16_t v249;
  int16x8_t v250;
  int32x4_t v251;
  int16x8_t v252;
  int32x4_t v253;
  int32x4_t v254;
  int32x4_t v255;
  int8x16_t v256;
  int8x16_t v257;
  int8x16_t v258;
  int16x8_t v259;
  int32x4_t v260;
  int16x8_t v261;
  int32x4_t v262;
  int8x16_t v263;
  int8x16_t v264;
  int8x16_t v265;
  int32x4_t v266;
  int8x16_t v267;
  int8x16_t v268;
  int8x16_t v269;
  int32x4_t v270;
  int8x16_t v271;
  int8x16_t v272;
  int8x16_t v273;
  int8x16_t v274;
  int8x16_t v275;
  int8x16_t v276;
  int8x16_t v277;
  int8x16_t v278;
  std::__shared_weak_count *v279;
  unint64_t *v280;
  unint64_t v281;
  unint64_t *v282;
  unint64_t v283;
  uint64_t v284;
  uint64_t v285;
  std::__shared_weak_count *v286;
  unint64_t *v287;
  unint64_t v288;
  char *v289;
  unsigned __int8 v290;
  unint64_t *v291;
  unint64_t v292;
  unint64_t v293;
  unint64_t *v294;
  unint64_t v295;
  int8x16_t v296;
  int16x8_t v297;
  int32x4_t v298;
  int8x16_t v299;
  int8x16_t v300;
  int16x8_t v301;
  int32x4_t v302;
  int8x16_t v303;
  int32x4_t v304;
  int8x16_t v305;
  int32x4_t v306;
  int8x16_t v307;
  int8x16_t v308;
  int8x16_t v309;
  int8x16_t v310;
  int8x16_t v311;
  int8x16_t v312;
  int16x8_t v313;
  int32x4_t v314;
  int8x16_t v315;
  int16x8_t v316;
  int32x4_t v317;
  int8x16_t v318;
  int32x4_t v319;
  int8x16_t v320;
  int32x4_t v321;
  int8x16_t v322;
  int8x16_t v323;
  int8x16_t v324;
  int8x16_t v325;
  int8x16_t v326;
  int8x16_t v327;
  int8x16_t v328;
  int8x16_t v329;
  int8x16_t v330;
  int8x16_t v331;
  int8x16_t v332;
  int8x16_t v333;
  int8x16_t v334;
  int16x8_t v335;
  int32x4_t v336;
  int16x8_t v337;
  int32x4_t v338;
  int32x4_t v339;
  int32x4_t v340;
  int8x16_t v341;
  int8x16_t v342;
  int8x16_t v343;
  int8x16_t v344;
  int8x16_t v345;
  int8x16_t v346;
  int8x16_t v347;
  int8x16_t v348;
  int8x16_t v349;
  int16x8_t v350;
  int32x4_t v351;
  int16x8_t v352;
  int32x4_t v353;
  int32x4_t v354;
  int32x4_t v355;
  int8x16_t v356;
  int8x16_t v357;
  int8x16_t v358;
  int8x16_t v359;
  int8x16_t v360;
  int8x16_t v361;
  int8x16_t v362;
  std::__shared_weak_count *v363;
  unint64_t *v364;
  unint64_t v365;
  unint64_t *v366;
  unint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  std::__shared_weak_count *v372;
  unint64_t *v373;
  unint64_t v374;
  unint64_t v375;
  unint64_t v376;
  unint64_t *v377;
  unint64_t v378;
  uint64_t v379;
  std::__shared_weak_count *v380;
  unint64_t *v381;
  unint64_t v382;
  unint64_t *v383;
  unint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  unint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  unint64_t *v399;
  unint64_t v400;
  std::__shared_weak_count *v401;
  unint64_t *v402;
  std::__shared_weak_count *v403;
  _QWORD *v404;
  std::__shared_weak_count *v405;
  unint64_t *v406;
  _QWORD *v407;
  _QWORD *v408;
  char *v409;
  unint64_t v410;
  int shared_owners_high;
  int shared_owners;
  unint64_t v413;
  unint64_t v414;
  unint64_t v415;
  std::__shared_weak_count *v416;
  unint64_t *v417;
  unint64_t v418;
  unint64_t v419;
  unint64_t v420;
  ggl::OuterShadowRibbonShader *v422;
  unsigned __int8 v423;
  unsigned __int8 v424;
  unsigned __int8 v425;
  ggl::LineShader *v426;
  unsigned __int8 v427;
  unsigned __int8 v428;
  unsigned __int8 v429;
  ggl::TexturedSolidRibbonShader *v430;
  unsigned __int8 v431;
  unsigned __int8 v432;
  unsigned __int8 v433;
  unsigned __int8 v434;
  unsigned __int8 v435;
  unsigned __int8 v436;
  unsigned __int8 v437;
  unsigned __int8 v438;
  unsigned __int8 v439;
  unsigned __int8 v440;
  unsigned __int8 v441;
  unsigned __int8 v442;
  unsigned __int8 v443;
  unsigned __int8 v444;
  unsigned __int8 v445;
  unsigned __int8 v446;
  unsigned __int8 v447;
  unsigned __int8 v448;
  unsigned __int8 v449;
  unsigned __int8 v450;
  unsigned __int8 v451;
  int v452;
  uint64_t v453;
  __int128 v454;
  __int128 v455;
  __int16 v456;
  char v457;
  __int16 v458;
  char v459;
  __int128 v460;
  __int128 v461;
  __int128 v462;
  __int128 v463;
  __int128 v464;
  __int128 v465;
  __int128 v466;
  __int128 v467;
  __int128 v468;
  __int128 v469;

  if (a7)
    v17 = 15;
  else
    v17 = 7;
  a1[8] = 0;
  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  v18 = *(_QWORD *)(a2 + 80);
  v19 = *(_QWORD *)(v18 + 1448);
  v20 = *(std::__shared_weak_count **)(v18 + 1456);
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(p_shared_owners);
    while (__stxr(v22 + 1, p_shared_owners));
  }
  v23 = (char *)operator new(0x198uLL);
  v453 = a3;
  *((_QWORD *)v23 + 1) = 0;
  *((_QWORD *)v23 + 2) = 0;
  *(_QWORD *)v23 = &off_1E42E3008;
  v460 = *a6;
  v465 = a6[1];
  if ((v24 & 1) == 0)
  {
    if ((_DWORD)v422)
    {
      if ((v423 & 1) == 0)
      {
        if ((_DWORD)v422)
        {
          if ((v438 & 1) == 0
          {
            if ((v448 & 1) == 0
            {
              ggl::MeshTyped<ggl::Ribbon::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::Ribbon::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::Ribbon::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::Ribbon::DefaultVbo>::attributesReflection(void)::r;
            unk_1ECE43DB8 = 1;
          }
          ggl::OuterShadowRibbon::PipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::Ribbon::DefaultVbo>::typedReflection(void)::r;
          *(_QWORD *)algn_1ECE397C8 = &ggl::OuterShadowRibbon::pipelineDataPipelineDeviceStructs(void)::ref;
          qword_1ECE397D0 = 0;
          if ((v439 & 1) == 0
          {
            ggl::OuterShadowRibbon::pipelineDataPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            unk_1ECE39800 = ggl::Tile::Transform::reflection(void)::reflection;
            qword_1ECE39808 = (uint64_t)ggl::OuterShadowRibbon::Style::reflection(void)::reflection;
          }
          qword_1ECE397D8 = (uint64_t)&ggl::OuterShadowRibbon::pipelineDataPipelineConstantStructs(void)::ref;
          unk_1ECE397E0 = xmmword_19FFB35E0;
        }
      }
      ggl::OuterShadowRibbon::PipelineState::typedReflection(void)::ref = (uint64_t)&ggl::OuterShadowRibbon::PipelineSetup::typedReflection(void)::ref;
      ggl::OuterShadowRibbonShader::typedReflection(v422);
      qword_1ECE315D0 = (uint64_t)&ggl::OuterShadowRibbonShader::typedReflection(void)::ref;
      if ((v424 & 1) == 0
      {
        ggl::OuterShadowRibbon::pipelineStatePipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE57D5F0 = 0;
        qword_1EE57D5F8 = (uint64_t)"";
        dword_1EE57D600 = 0;
        qword_1EE57D608 = (uint64_t)&ggl::OuterShadowRibbon::pipelineStatePipelineAttributeBinding_0(void)::attr;
        unk_1EE57D610 = 4;
      }
      qword_1ECE315D8 = (uint64_t)&ggl::OuterShadowRibbon::pipelineStatePipelineAttributeStructBinding(void)::attr;
      unk_1ECE315E0 = 1;
      qword_1ECE315E8 = 0;
      unk_1ECE315F0 = 1;
      qword_1ECE315F8 = (uint64_t)&ggl::OuterShadowRibbon::pipelineStatePipelineDeviceStructBinding(void)::ref;
      unk_1ECE31600 = 0;
      if ((v425 & 1) == 0
      {
        ggl::OuterShadowRibbon::pipelineStatePipelineConstantStructBinding(void)::ref = 0;
        unk_1EE57D560 = 0;
        qword_1EE57D568 = (uint64_t)"view";
        dword_1EE57D570 = 3;
        qword_1EE57D578 = (uint64_t)&ggl::OuterShadowRibbon::pipelineStatePipelineConstantViewBinding(void)::reflection;
        unk_1EE57D580 = xmmword_19FFB35A0;
        qword_1EE57D590 = 1;
        unk_1EE57D598 = "transform";
        dword_1EE57D5A0 = 3;
        qword_1EE57D5A8 = (uint64_t)&ggl::OuterShadowRibbon::pipelineStatePipelineConstantTransformBinding(void)::reflection;
        *(_OWORD *)algn_1EE57D5B0 = xmmword_19FFB3660;
        qword_1EE57D5C0 = 2;
        unk_1EE57D5C8 = "style";
        dword_1EE57D5D0 = 3;
        qword_1EE57D5D8 = (uint64_t)&ggl::OuterShadowRibbon::pipelineStatePipelineConstantStyleBinding(void)::reflection;
        unk_1EE57D5E0 = 4;
      }
      qword_1ECE31608 = (uint64_t)&ggl::OuterShadowRibbon::pipelineStatePipelineConstantStructBinding(void)::ref;
      *(_QWORD *)algn_1ECE31610 = 3;
    }
  }
  if (v20)
  {
    v25 = (unint64_t *)&v20->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
    *((_DWORD *)v23 + 14) = 0;
    *((_QWORD *)v23 + 5) = 0;
    *((_QWORD *)v23 + 6) = 0;
    *((_QWORD *)v23 + 3) = &off_1E42B6760;
    *((_QWORD *)v23 + 4) = 0;
    *((_QWORD *)v23 + 8) = &ggl::OuterShadowRibbon::PipelineState::typedReflection(void)::ref;
    *((_QWORD *)v23 + 9) = v19;
    *((_QWORD *)v23 + 10) = v20;
    do
      v27 = __ldxr(v25);
    while (__stxr(v27 + 1, v25));
  }
  else
  {
    *((_DWORD *)v23 + 14) = 0;
    *((_QWORD *)v23 + 5) = 0;
    *((_QWORD *)v23 + 6) = 0;
    *((_QWORD *)v23 + 3) = &off_1E42B6760;
    *((_QWORD *)v23 + 4) = 0;
    *((_QWORD *)v23 + 8) = &ggl::OuterShadowRibbon::PipelineState::typedReflection(void)::ref;
    *((_QWORD *)v23 + 9) = v19;
    *((_QWORD *)v23 + 10) = 0;
  }
  v23[136] = 0;
  *(_OWORD *)(v23 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v23 + 156) = 0;
  *(_QWORD *)(v23 + 172) = 0;
  *(_QWORD *)(v23 + 164) = 0;
  v23[184] = 0;
  *(_OWORD *)(v23 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v23 + 204) = 0;
  *(_QWORD *)(v23 + 220) = 0;
  *(_QWORD *)(v23 + 212) = 0;
  v23[232] = 0;
  *(_OWORD *)(v23 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v23 + 252) = 0;
  *(_QWORD *)(v23 + 268) = 0;
  *(_QWORD *)(v23 + 260) = 0;
  *(_OWORD *)(v23 + 280) = v460;
  *(_OWORD *)(v23 + 296) = v465;
  v23[312] = 0;
  *((_QWORD *)v23 + 48) = 0;
  *((_OWORD *)v23 + 22) = 0u;
  *((_OWORD *)v23 + 23) = 0u;
  *((_OWORD *)v23 + 20) = 0u;
  *((_OWORD *)v23 + 21) = 0u;
  *((_QWORD *)v23 + 49) = 0x100000001;
  v23[400] = 0;
  v23[88] = 1;
  *(_WORD *)(v23 + 89) = v458;
  v23[91] = v459;
  *(_OWORD *)(v23 + 92) = xmmword_19FFB35B0;
  *((_DWORD *)v23 + 27) = 7;
  *((_QWORD *)v23 + 14) = 0;
  *((_QWORD *)v23 + 15) = 0;
  *((_DWORD *)v23 + 32) = 0;
  v23[132] = v17;
  if (v20)
  {
    v28 = (unint64_t *)&v20->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  *((_DWORD *)v23 + 84) = 0;
  *(_QWORD *)(v23 + 329) = 0;
  v30 = vceqzq_s8(*(int8x16_t *)(v23 + 328));
  v31 = vmovl_high_s8(v30);
  v32 = vmovl_s16(*(int16x4_t *)v31.i8);
  v33.i64[0] = v32.u32[0];
  v33.i64[1] = v32.u32[1];
  v34 = v33;
  v35 = vmovl_s8(*(int8x8_t *)v30.i8);
  v36 = vmovl_s16(*(int16x4_t *)v35.i8);
  v33.i64[0] = v36.u32[0];
  v33.i64[1] = v36.u32[1];
  v37 = v33;
  v38 = vmovl_high_s16(v31);
  v33.i64[0] = v38.u32[0];
  v33.i64[1] = v38.u32[1];
  v39 = v33;
  v40 = vmovl_high_s16(v35);
  v33.i64[0] = v40.u32[0];
  v33.i64[1] = v40.u32[1];
  v41 = v33;
  v33.i64[0] = v32.u32[2];
  v33.i64[1] = v32.u32[3];
  v42 = v33;
  v33.i64[0] = v36.u32[2];
  v33.i64[1] = v36.u32[3];
  v43 = v33;
  v33.i64[0] = v38.u32[2];
  v33.i64[1] = v38.u32[3];
  v44 = v33;
  v33.i64[0] = v40.u32[2];
  v33.i64[1] = v40.u32[3];
  v45 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v33);
  v46 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v44);
  v47 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v43);
  v48 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v39);
  v49 = vceqzq_s8(*(int8x16_t *)(v23 + 344));
  v50 = vmovl_high_s8(v49);
  v51 = vmovl_s16(*(int16x4_t *)v50.i8);
  v33.i64[0] = v51.u32[0];
  v33.i64[1] = v51.u32[1];
  v52 = v33;
  v53 = vmovl_s8(*(int8x8_t *)v49.i8);
  v54 = vmovl_s16(*(int16x4_t *)v53.i8);
  v33.i64[0] = v54.u32[0];
  v33.i64[1] = v54.u32[1];
  v55 = v33;
  v56 = vmovl_high_s16(v50);
  v33.i64[0] = v56.u32[0];
  v33.i64[1] = v56.u32[1];
  v57 = v33;
  v58 = vmovl_high_s16(v53);
  v33.i64[0] = v58.u32[0];
  v33.i64[1] = v58.u32[1];
  v59 = v33;
  v33.i64[0] = v51.u32[2];
  v33.i64[1] = v51.u32[3];
  v60 = v33;
  v33.i64[0] = v54.u32[2];
  v33.i64[1] = v54.u32[3];
  v61 = v33;
  v33.i64[0] = v56.u32[2];
  v33.i64[1] = v56.u32[3];
  v62 = v33;
  v33.i64[0] = v58.u32[2];
  v33.i64[1] = v58.u32[3];
  v63 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v62);
  v64 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v52), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v34));
  v65 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v55), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v37));
  v66 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v57), v48);
  v67 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v59), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v41));
  v68 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v60), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v42));
  v69 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v61), v47);
  v70 = vorrq_s8(v63, v46);
  v71 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v33), v45);
  v72 = vceqzq_s8(*(int8x16_t *)(v23 + 360));
  v73 = vmovl_high_s8(v72);
  v74 = vmovl_s16(*(int16x4_t *)v73.i8);
  v33.i64[0] = v74.i32[0];
  v33.i64[1] = v74.i32[1];
  v75 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v33);
  v76 = vceqzq_s8(*(int8x16_t *)(v23 + 376));
  v77 = vmovl_high_s8(v76);
  v78 = vmovl_s16(*(int16x4_t *)v77.i8);
  v33.i64[0] = v78.i32[0];
  v33.i64[1] = v78.i32[1];
  v79 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v33), v75), v64);
  v80 = vmovl_s8(*(int8x8_t *)v72.i8);
  v81 = vmovl_s16(*(int16x4_t *)v80.i8);
  v33.i64[0] = v81.i32[0];
  v33.i64[1] = v81.i32[1];
  v82 = vbicq_s8((int8x16_t)xmmword_19FFB3170, v33);
  v83 = vmovl_s8(*(int8x8_t *)v76.i8);
  v84 = vmovl_s16(*(int16x4_t *)v83.i8);
  v33.i64[0] = v84.i32[0];
  v33.i64[1] = v84.i32[1];
  v85 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v33), v82), v65);
  v86 = vmovl_high_s16(v73);
  v33.i64[0] = v86.i32[0];
  v33.i64[1] = v86.i32[1];
  v87 = vbicq_s8((int8x16_t)xmmword_19FFB3180, v33);
  v88 = vmovl_high_s16(v77);
  v33.i64[0] = v88.i32[0];
  v33.i64[1] = v88.i32[1];
  v89 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v33), v87), v66);
  v90 = vmovl_high_s16(v80);
  v33.i64[0] = v90.i32[0];
  v33.i64[1] = v90.i32[1];
  v91 = vbicq_s8((int8x16_t)xmmword_19FFB3190, v33);
  v92 = vmovl_high_s16(v83);
  v33.i64[0] = v92.i32[0];
  v33.i64[1] = v92.i32[1];
  v93 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v33), v91), v67);
  v33.i64[0] = v74.i32[2];
  v33.i64[1] = v74.i32[3];
  v94 = vbicq_s8((int8x16_t)xmmword_19FFB31A0, v33);
  v33.i64[0] = v78.i32[2];
  v33.i64[1] = v78.i32[3];
  v95 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v33), v94), v68);
  v33.i64[0] = v81.i32[2];
  v33.i64[1] = v81.i32[3];
  v96 = vbicq_s8((int8x16_t)xmmword_19FFB31B0, v33);
  v33.i64[0] = v84.i32[2];
  v33.i64[1] = v84.i32[3];
  v97 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v33), v96), v69);
  v33.i64[0] = v86.i32[2];
  v33.i64[1] = v86.i32[3];
  v98 = vbicq_s8((int8x16_t)xmmword_19FFB31C0, v33);
  v33.i64[0] = v88.i32[2];
  v33.i64[1] = v88.i32[3];
  v99 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31F0, v33), v98), v70);
  v33.i64[0] = v90.i32[2];
  v33.i64[1] = v90.i32[3];
  v100 = vbicq_s8((int8x16_t)xmmword_19FFB31D0, v33);
  v33.i64[0] = v92.i32[2];
  v33.i64[1] = v92.i32[3];
  *((_QWORD *)v23 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(v85, v79), vorrq_s8(v93, v89)), (int64x2_t)vorrq_s8(vorrq_s8(v97, v95), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v33), v100), v71), v99))));
  *((_QWORD *)v23 + 3) = &off_1E42BA160;
  v23[312] = 1;
  v101 = (std::__shared_weak_count *)a1[4];
  a1[3] = (uint64_t)(v23 + 24);
  a1[4] = (uint64_t)v23;
  if (v101)
  {
    v102 = (unint64_t *)&v101->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  if (v20)
  {
    v104 = (unint64_t *)&v20->__shared_owners_;
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v106 = *(_QWORD *)(a2 + 80);
  v107 = *(_QWORD *)(v106 + 1352);
  v108 = *(std::__shared_weak_count **)(v106 + 1360);
  if (v108)
  {
    v109 = (unint64_t *)&v108->__shared_owners_;
    do
      v110 = __ldxr(v109);
    while (__stxr(v110 + 1, v109));
  }
  v111 = (char *)operator new(0x198uLL);
  *((_QWORD *)v111 + 1) = 0;
  *((_QWORD *)v111 + 2) = 0;
  *(_QWORD *)v111 = &off_1E42E43F0;
  v461 = *a6;
  v466 = a6[1];
  if ((v112 & 1) == 0)
  {
    if ((_DWORD)v426)
    {
      if ((v427 & 1) == 0)
      {
        if ((_DWORD)v426)
        {
          if ((v440 & 1) == 0
          {
            if ((v449 & 1) == 0
            {
              ggl::MeshTyped<ggl::Ribbon::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::Ribbon::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::Ribbon::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::Ribbon::DefaultVbo>::attributesReflection(void)::r;
            unk_1ECE43DB8 = 1;
          }
          ggl::Line::BasePipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::Ribbon::DefaultVbo>::typedReflection(void)::r;
          unk_1ECE3BFA0 = &ggl::Line::pipelineDataBasePipelineDeviceStructs(void)::ref;
          qword_1ECE3BFA8 = 0;
          if ((v441 & 1) == 0
          {
            ggl::Line::pipelineDataBasePipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            unk_1ECE3BFD8 = ggl::Line::Style::reflection(void)::reflection;
          }
          qword_1ECE3BFB0 = (uint64_t)&ggl::Line::pipelineDataBasePipelineConstantStructs(void)::ref;
          unk_1ECE3BFB8 = xmmword_19FFB35C0;
        }
      }
      ggl::Line::BasePipelineState::typedReflection(void)::ref = (uint64_t)&ggl::Line::BasePipelineSetup::typedReflection(void)::ref;
      ggl::LineShader::typedReflection(v426);
      qword_1ECE320E8 = (uint64_t)&ggl::LineShader::typedReflection(void)::ref;
      if ((v428 & 1) == 0
      {
        ggl::Line::pipelineStateBasePipelineAttributeStructBinding(void)::attr = 0;
        *(_QWORD *)algn_1EE5813C8 = 0;
        qword_1EE5813D0 = (uint64_t)"";
        dword_1EE5813D8 = 0;
        qword_1EE5813E0 = (uint64_t)&ggl::Line::pipelineStateBasePipelineAttributeBinding_0(void)::attr;
        unk_1EE5813E8 = 4;
      }
      qword_1ECE320F0 = (uint64_t)&ggl::Line::pipelineStateBasePipelineAttributeStructBinding(void)::attr;
      *(_QWORD *)algn_1ECE320F8 = 1;
      qword_1ECE32100 = 0;
      unk_1ECE32108 = 0;
      qword_1ECE32110 = (uint64_t)&ggl::Line::pipelineStateBasePipelineDeviceStructBinding(void)::ref;
      unk_1ECE32118 = 0;
      if ((v429 & 1) == 0
      {
        ggl::Line::pipelineStateBasePipelineConstantStructBinding(void)::ref = 0;
        *(_QWORD *)algn_1EE581368 = 0;
        qword_1EE581370 = (uint64_t)"view";
        dword_1EE581378 = 3;
        qword_1EE581380 = (uint64_t)&ggl::Line::pipelineStateBasePipelineConstantViewBinding(void)::reflection;
        unk_1EE581388 = xmmword_19FFB35A0;
        qword_1EE581398 = 1;
        unk_1EE5813A0 = "style";
        dword_1EE5813A8 = 3;
        qword_1EE5813B0 = (uint64_t)&ggl::Line::pipelineStateBasePipelineConstantStyleBinding(void)::reflection;
        unk_1EE5813B8 = 1;
      }
      qword_1ECE32120 = (uint64_t)&ggl::Line::pipelineStateBasePipelineConstantStructBinding(void)::ref;
      *(_QWORD *)algn_1ECE32128 = 2;
    }
  }
  if (v108)
  {
    v113 = (unint64_t *)&v108->__shared_owners_;
    do
      v114 = __ldxr(v113);
    while (__stxr(v114 + 1, v113));
    *((_DWORD *)v111 + 14) = 0;
    *((_QWORD *)v111 + 5) = 0;
    *((_QWORD *)v111 + 6) = 0;
    *((_QWORD *)v111 + 3) = &off_1E42B6760;
    *((_QWORD *)v111 + 4) = 0;
    *((_QWORD *)v111 + 8) = &ggl::Line::BasePipelineState::typedReflection(void)::ref;
    *((_QWORD *)v111 + 9) = v107;
    *((_QWORD *)v111 + 10) = v108;
    do
      v115 = __ldxr(v113);
    while (__stxr(v115 + 1, v113));
  }
  else
  {
    *((_DWORD *)v111 + 14) = 0;
    *((_QWORD *)v111 + 5) = 0;
    *((_QWORD *)v111 + 6) = 0;
    *((_QWORD *)v111 + 3) = &off_1E42B6760;
    *((_QWORD *)v111 + 4) = 0;
    *((_QWORD *)v111 + 8) = &ggl::Line::BasePipelineState::typedReflection(void)::ref;
    *((_QWORD *)v111 + 9) = v107;
    *((_QWORD *)v111 + 10) = 0;
  }
  v111[136] = 0;
  *(_OWORD *)(v111 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v111 + 156) = 0;
  *(_QWORD *)(v111 + 172) = 0;
  *(_QWORD *)(v111 + 164) = 0;
  v111[184] = 0;
  *(_OWORD *)(v111 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v111 + 204) = 0;
  *(_QWORD *)(v111 + 220) = 0;
  *(_QWORD *)(v111 + 212) = 0;
  v111[232] = 0;
  *(_OWORD *)(v111 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v111 + 252) = 0;
  *(_QWORD *)(v111 + 268) = 0;
  *(_QWORD *)(v111 + 260) = 0;
  *(_OWORD *)(v111 + 280) = v461;
  *(_OWORD *)(v111 + 296) = v466;
  v111[312] = 0;
  *((_QWORD *)v111 + 48) = 0;
  *((_OWORD *)v111 + 22) = 0u;
  *((_OWORD *)v111 + 23) = 0u;
  *((_OWORD *)v111 + 20) = 0u;
  *((_OWORD *)v111 + 21) = 0u;
  *((_QWORD *)v111 + 49) = 0x100000001;
  v111[400] = 0;
  v111[88] = 1;
  *(_WORD *)(v111 + 89) = v458;
  v111[91] = v459;
  *(_OWORD *)(v111 + 92) = xmmword_19FFB35B0;
  *((_DWORD *)v111 + 27) = 7;
  *((_QWORD *)v111 + 14) = 0;
  *((_QWORD *)v111 + 15) = 0;
  *((_DWORD *)v111 + 32) = 0;
  v111[132] = v17;
  if (v108)
  {
    v116 = (unint64_t *)&v108->__shared_owners_;
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  *((_DWORD *)v111 + 84) = 0;
  *(_QWORD *)(v111 + 329) = 0;
  v118 = vceqzq_s8(*(int8x16_t *)(v111 + 328));
  v119 = vmovl_high_s8(v118);
  v120 = vmovl_s16(*(int16x4_t *)v119.i8);
  v121.i64[0] = v120.u32[0];
  v121.i64[1] = v120.u32[1];
  v122 = v121;
  v123 = vmovl_s8(*(int8x8_t *)v118.i8);
  v124 = vmovl_s16(*(int16x4_t *)v123.i8);
  v121.i64[0] = v124.u32[0];
  v121.i64[1] = v124.u32[1];
  v125 = v121;
  v126 = vmovl_high_s16(v119);
  v121.i64[0] = v126.u32[0];
  v121.i64[1] = v126.u32[1];
  v127 = v121;
  v128 = vmovl_high_s16(v123);
  v121.i64[0] = v128.u32[0];
  v121.i64[1] = v128.u32[1];
  v129 = v121;
  v121.i64[0] = v120.u32[2];
  v121.i64[1] = v120.u32[3];
  v130 = v121;
  v121.i64[0] = v124.u32[2];
  v121.i64[1] = v124.u32[3];
  v131 = v121;
  v121.i64[0] = v126.u32[2];
  v121.i64[1] = v126.u32[3];
  v132 = v121;
  v121.i64[0] = v128.u32[2];
  v121.i64[1] = v128.u32[3];
  v133 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v121);
  v134 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v132);
  v135 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v131);
  v136 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v127);
  v137 = vceqzq_s8(*(int8x16_t *)(v111 + 344));
  v138 = vmovl_high_s8(v137);
  v139 = vmovl_s16(*(int16x4_t *)v138.i8);
  v121.i64[0] = v139.u32[0];
  v121.i64[1] = v139.u32[1];
  v140 = v121;
  v141 = vmovl_s8(*(int8x8_t *)v137.i8);
  v142 = vmovl_s16(*(int16x4_t *)v141.i8);
  v121.i64[0] = v142.u32[0];
  v121.i64[1] = v142.u32[1];
  v143 = v121;
  v144 = vmovl_high_s16(v138);
  v121.i64[0] = v144.u32[0];
  v121.i64[1] = v144.u32[1];
  v145 = v121;
  v146 = vmovl_high_s16(v141);
  v121.i64[0] = v146.u32[0];
  v121.i64[1] = v146.u32[1];
  v147 = v121;
  v121.i64[0] = v139.u32[2];
  v121.i64[1] = v139.u32[3];
  v148 = v121;
  v121.i64[0] = v142.u32[2];
  v121.i64[1] = v142.u32[3];
  v149 = v121;
  v121.i64[0] = v144.u32[2];
  v121.i64[1] = v144.u32[3];
  v150 = v121;
  v121.i64[0] = v146.u32[2];
  v121.i64[1] = v146.u32[3];
  v151 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v150);
  v152 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v140), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v122));
  v153 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v143), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v125));
  v154 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v145), v136);
  v155 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v147), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v129));
  v156 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v148), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v130));
  v157 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v149), v135);
  v158 = vorrq_s8(v151, v134);
  v159 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v121), v133);
  v160 = vceqzq_s8(*(int8x16_t *)(v111 + 360));
  v161 = vmovl_s8(*(int8x8_t *)v160.i8);
  v162 = vmovl_high_s16(v161);
  v163 = vmovl_high_s8(v160);
  v164 = vmovl_high_s16(v163);
  v165 = vmovl_s16(*(int16x4_t *)v161.i8);
  v166 = vmovl_s16(*(int16x4_t *)v163.i8);
  v121.i64[0] = v165.i32[0];
  v121.i64[1] = v165.i32[1];
  v167 = v121;
  v121.i64[0] = v166.i32[0];
  v121.i64[1] = v166.i32[1];
  v168 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v121);
  v169 = vceqzq_s8(*(int8x16_t *)(v111 + 376));
  v170 = vmovl_high_s8(v169);
  v171 = vmovl_s16(*(int16x4_t *)v170.i8);
  v121.i64[0] = v171.i32[0];
  v121.i64[1] = v171.i32[1];
  v172 = vmovl_s8(*(int8x8_t *)v169.i8);
  v173 = vmovl_s16(*(int16x4_t *)v172.i8);
  v174 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v121), v168), v152);
  v121.i64[0] = v173.i32[0];
  v121.i64[1] = v173.i32[1];
  v175 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v121), vbicq_s8((int8x16_t)xmmword_19FFB3170, v167));
  v121.i64[0] = v164.i32[0];
  v121.i64[1] = v164.i32[1];
  v176 = vbicq_s8((int8x16_t)xmmword_19FFB3180, v121);
  v177 = vmovl_high_s16(v170);
  v178 = vorrq_s8(v175, v153);
  v121.i64[0] = v177.i32[0];
  v121.i64[1] = v177.i32[1];
  v179 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v121), v176);
  v121.i64[0] = v162.i32[0];
  v121.i64[1] = v162.i32[1];
  v180 = vbicq_s8((int8x16_t)xmmword_19FFB3190, v121);
  v181 = vmovl_high_s16(v172);
  v121.i64[0] = v181.i32[0];
  v121.i64[1] = v181.i32[1];
  v182 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v121), v180), v155);
  v121.i64[0] = v166.i32[2];
  v121.i64[1] = v166.i32[3];
  v183 = vbicq_s8((int8x16_t)xmmword_19FFB31A0, v121);
  v121.i64[0] = v171.i32[2];
  v121.i64[1] = v171.i32[3];
  v184 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v121), v183), v156);
  v121.i64[0] = v165.i32[2];
  v121.i64[1] = v165.i32[3];
  v185 = vbicq_s8((int8x16_t)xmmword_19FFB31B0, v121);
  v121.i64[0] = v173.i32[2];
  v121.i64[1] = v173.i32[3];
  v186 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v121), v185), v157);
  v121.i64[0] = v164.i32[2];
  v121.i64[1] = v164.i32[3];
  v187 = vbicq_s8((int8x16_t)xmmword_19FFB31C0, v121);
  v121.i64[0] = v177.i32[2];
  v121.i64[1] = v177.i32[3];
  v188 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31F0, v121), v187), v158);
  v121.i64[0] = v162.i32[2];
  v121.i64[1] = v162.i32[3];
  v189 = vbicq_s8((int8x16_t)xmmword_19FFB31D0, v121);
  v121.i64[0] = v181.i32[2];
  v121.i64[1] = v181.i32[3];
  *((_QWORD *)v111 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(v178, v174), vorrq_s8(v182, vorrq_s8(v179, v154))), (int64x2_t)vorrq_s8(vorrq_s8(v186, v184), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v121), v189), v159), v188))));
  *((_QWORD *)v111 + 3) = &off_1E42BBBE8;
  v111[312] = 1;
  v190 = (std::__shared_weak_count *)a1[2];
  a1[1] = (uint64_t)(v111 + 24);
  a1[2] = (uint64_t)v111;
  if (v190)
  {
    v191 = (unint64_t *)&v190->__shared_owners_;
    do
      v192 = __ldaxr(v191);
    while (__stlxr(v192 - 1, v191));
    if (!v192)
    {
      ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
      std::__shared_weak_count::__release_weak(v190);
    }
  }
  if (v108)
  {
    v193 = (unint64_t *)&v108->__shared_owners_;
    do
      v194 = __ldaxr(v193);
    while (__stlxr(v194 - 1, v193));
    if (!v194)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v195 = *(_QWORD *)(a2 + 80);
  v196 = *(_QWORD *)(v195 + 2984);
  v197 = *(std::__shared_weak_count **)(v195 + 2992);
  if (v197)
  {
    v198 = (unint64_t *)&v197->__shared_owners_;
    do
      v199 = __ldxr(v198);
    while (__stxr(v199 + 1, v198));
  }
  v200 = (char *)operator new(0x198uLL);
  *((_QWORD *)v200 + 1) = 0;
  *((_QWORD *)v200 + 2) = 0;
  *(_QWORD *)v200 = &off_1E42E3890;
  v462 = *a6;
  v467 = a6[1];
  if ((v201 & 1) == 0)
  {
    if ((_DWORD)v430)
    {
      if ((v431 & 1) == 0)
      {
        if ((_DWORD)v430)
        {
          if ((v442 & 1) == 0
          {
            if ((v450 & 1) == 0
            {
              ggl::MeshTyped<ggl::Ribbon::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::Ribbon::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::Ribbon::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::Ribbon::DefaultVbo>::attributesReflection(void)::r;
            unk_1ECE43DB8 = 1;
          }
          ggl::TexturedSolidRibbon::PipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::Ribbon::DefaultVbo>::typedReflection(void)::r;
          unk_1ECE3A060 = &ggl::TexturedSolidRibbon::pipelineDataPipelineDeviceStructs(void)::ref;
          qword_1ECE3A068 = 0;
          if ((v443 & 1) == 0
          {
            ggl::TexturedSolidRibbon::pipelineDataPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            *(_QWORD *)algn_1ECE3A098 = ggl::Tile::Transform::reflection(void)::reflection;
            qword_1ECE3A0A0 = (uint64_t)ggl::OffsetRibbon::Style::reflection(void)::reflection;
            unk_1ECE3A0A8 = ggl::OffsetRibbon::Noise::reflection(void)::reflection;
          }
          qword_1ECE3A070 = (uint64_t)&ggl::TexturedSolidRibbon::pipelineDataPipelineConstantStructs(void)::ref;
          unk_1ECE3A078 = xmmword_19FFB2F50;
        }
      }
      ggl::TexturedSolidRibbon::PipelineState::typedReflection(void)::ref = (uint64_t)&ggl::TexturedSolidRibbon::PipelineSetup::typedReflection(void)::ref;
      ggl::TexturedSolidRibbonShader::typedReflection(v430);
      qword_1ECE31878 = (uint64_t)&ggl::TexturedSolidRibbonShader::typedReflection(void)::ref;
      if ((v432 & 1) == 0
      {
        ggl::TexturedSolidRibbon::pipelineStatePipelineAttributeStructBinding(void)::attr = 0;
        *(_QWORD *)algn_1EE57ECD8 = 0;
        qword_1EE57ECE0 = (uint64_t)"";
        dword_1EE57ECE8 = 0;
        qword_1EE57ECF0 = (uint64_t)&ggl::TexturedSolidRibbon::pipelineStatePipelineAttributeBinding_0(void)::attr;
        unk_1EE57ECF8 = 4;
      }
      qword_1ECE31880 = (uint64_t)&ggl::TexturedSolidRibbon::pipelineStatePipelineAttributeStructBinding(void)::attr;
      *(_QWORD *)algn_1ECE31888 = 1;
      qword_1ECE31890 = 0;
      unk_1ECE31898 = 2;
      qword_1ECE318A0 = (uint64_t)&ggl::TexturedSolidRibbon::pipelineStatePipelineDeviceStructBinding(void)::ref;
      unk_1ECE318A8 = 0;
      if ((v433 & 1) == 0
      {
        ggl::TexturedSolidRibbon::pipelineStatePipelineConstantStructBinding(void)::ref = 0;
        *(_QWORD *)algn_1EE57EC18 = 0;
        qword_1EE57EC20 = (uint64_t)"view";
        dword_1EE57EC28 = 3;
        qword_1EE57EC30 = (uint64_t)&ggl::TexturedSolidRibbon::pipelineStatePipelineConstantViewBinding(void)::reflection;
        unk_1EE57EC38 = xmmword_19FFB35A0;
        qword_1EE57EC48 = 1;
        unk_1EE57EC50 = "transform";
        dword_1EE57EC58 = 3;
        qword_1EE57EC60 = (uint64_t)&ggl::TexturedSolidRibbon::pipelineStatePipelineConstantTransformBinding(void)::reflection;
        unk_1EE57EC68 = xmmword_19FFB3660;
        qword_1EE57EC78 = 2;
        unk_1EE57EC80 = "style";
        dword_1EE57EC88 = 3;
        qword_1EE57EC90 = (uint64_t)&ggl::TexturedSolidRibbon::pipelineStatePipelineConstantStyleBinding(void)::reflection;
        unk_1EE57EC98 = xmmword_19FFB38C0;
        qword_1EE57ECA8 = 3;
        unk_1EE57ECB0 = "noise";
        dword_1EE57ECB8 = 3;
        qword_1EE57ECC0 = (uint64_t)&ggl::TexturedSolidRibbon::pipelineStatePipelineConstantNoiseBinding(void)::reflection;
        unk_1EE57ECC8 = 1;
      }
      qword_1ECE318B0 = (uint64_t)&ggl::TexturedSolidRibbon::pipelineStatePipelineConstantStructBinding(void)::ref;
      *(_QWORD *)algn_1ECE318B8 = 4;
    }
  }
  if (v197)
  {
    v202 = (unint64_t *)&v197->__shared_owners_;
    do
      v203 = __ldxr(v202);
    while (__stxr(v203 + 1, v202));
    *((_DWORD *)v200 + 14) = 0;
    *((_QWORD *)v200 + 5) = 0;
    *((_QWORD *)v200 + 6) = 0;
    *((_QWORD *)v200 + 3) = &off_1E42B6760;
    *((_QWORD *)v200 + 4) = 0;
    *((_QWORD *)v200 + 8) = &ggl::TexturedSolidRibbon::PipelineState::typedReflection(void)::ref;
    *((_QWORD *)v200 + 9) = v196;
    *((_QWORD *)v200 + 10) = v197;
    do
      v204 = __ldxr(v202);
    while (__stxr(v204 + 1, v202));
  }
  else
  {
    *((_DWORD *)v200 + 14) = 0;
    *((_QWORD *)v200 + 5) = 0;
    *((_QWORD *)v200 + 6) = 0;
    *((_QWORD *)v200 + 3) = &off_1E42B6760;
    *((_QWORD *)v200 + 4) = 0;
    *((_QWORD *)v200 + 8) = &ggl::TexturedSolidRibbon::PipelineState::typedReflection(void)::ref;
    *((_QWORD *)v200 + 9) = v196;
    *((_QWORD *)v200 + 10) = 0;
  }
  v200[136] = 0;
  *(_OWORD *)(v200 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v200 + 156) = 0;
  *(_QWORD *)(v200 + 172) = 0;
  *(_QWORD *)(v200 + 164) = 0;
  v200[184] = 0;
  *(_OWORD *)(v200 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v200 + 204) = 0;
  *(_QWORD *)(v200 + 220) = 0;
  *(_QWORD *)(v200 + 212) = 0;
  v200[232] = 0;
  *(_OWORD *)(v200 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v200 + 252) = 0;
  *(_QWORD *)(v200 + 268) = 0;
  *(_QWORD *)(v200 + 260) = 0;
  *(_OWORD *)(v200 + 280) = v462;
  *(_OWORD *)(v200 + 296) = v467;
  v200[312] = 0;
  *((_QWORD *)v200 + 48) = 0;
  *((_OWORD *)v200 + 22) = 0u;
  *((_OWORD *)v200 + 23) = 0u;
  *((_OWORD *)v200 + 20) = 0u;
  *((_OWORD *)v200 + 21) = 0u;
  *((_QWORD *)v200 + 49) = 0x100000001;
  v200[400] = 0;
  v200[88] = 1;
  *(_WORD *)(v200 + 89) = v458;
  v200[91] = v459;
  *(_OWORD *)(v200 + 92) = xmmword_19FFB35B0;
  *((_DWORD *)v200 + 27) = 7;
  *((_QWORD *)v200 + 14) = 0;
  *((_QWORD *)v200 + 15) = 0;
  *((_DWORD *)v200 + 32) = 0;
  v200[132] = v17;
  if (v197)
  {
    v205 = (unint64_t *)&v197->__shared_owners_;
    do
      v206 = __ldaxr(v205);
    while (__stlxr(v206 - 1, v205));
    if (!v206)
    {
      ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
      std::__shared_weak_count::__release_weak(v197);
    }
  }
  *((_DWORD *)v200 + 84) = 0;
  *(_QWORD *)(v200 + 329) = 0;
  v207 = vceqzq_s8(*(int8x16_t *)(v200 + 328));
  v208 = vmovl_high_s8(v207);
  v209 = vmovl_s16(*(int16x4_t *)v208.i8);
  v210.i64[0] = v209.u32[0];
  v210.i64[1] = v209.u32[1];
  v211 = v210;
  v212 = vmovl_s8(*(int8x8_t *)v207.i8);
  v213 = vmovl_s16(*(int16x4_t *)v212.i8);
  v210.i64[0] = v213.u32[0];
  v210.i64[1] = v213.u32[1];
  v214 = v210;
  v215 = vmovl_high_s16(v208);
  v210.i64[0] = v215.u32[0];
  v210.i64[1] = v215.u32[1];
  v216 = v210;
  v217 = vmovl_high_s16(v212);
  v210.i64[0] = v217.u32[0];
  v210.i64[1] = v217.u32[1];
  v218 = v210;
  v210.i64[0] = v209.u32[2];
  v210.i64[1] = v209.u32[3];
  v219 = v210;
  v210.i64[0] = v213.u32[2];
  v210.i64[1] = v213.u32[3];
  v220 = v210;
  v210.i64[0] = v215.u32[2];
  v210.i64[1] = v215.u32[3];
  v221 = v210;
  v210.i64[0] = v217.u32[2];
  v210.i64[1] = v217.u32[3];
  v222 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v210);
  v223 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v221);
  v224 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v220);
  v225 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v216);
  v226 = vceqzq_s8(*(int8x16_t *)(v200 + 344));
  v227 = vmovl_high_s8(v226);
  v228 = vmovl_s16(*(int16x4_t *)v227.i8);
  v210.i64[0] = v228.u32[0];
  v210.i64[1] = v228.u32[1];
  v229 = v210;
  v230 = vmovl_s8(*(int8x8_t *)v226.i8);
  v231 = vmovl_s16(*(int16x4_t *)v230.i8);
  v210.i64[0] = v231.u32[0];
  v210.i64[1] = v231.u32[1];
  v232 = v210;
  v233 = vmovl_high_s16(v227);
  v210.i64[0] = v233.u32[0];
  v210.i64[1] = v233.u32[1];
  v234 = v210;
  v235 = vmovl_high_s16(v230);
  v210.i64[0] = v235.u32[0];
  v210.i64[1] = v235.u32[1];
  v236 = v210;
  v210.i64[0] = v228.u32[2];
  v210.i64[1] = v228.u32[3];
  v237 = v210;
  v210.i64[0] = v231.u32[2];
  v210.i64[1] = v231.u32[3];
  v238 = v210;
  v210.i64[0] = v233.u32[2];
  v210.i64[1] = v233.u32[3];
  v239 = v210;
  v210.i64[0] = v235.u32[2];
  v210.i64[1] = v235.u32[3];
  v240 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v239);
  v241 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v229), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v211));
  v242 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v232), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v214));
  v243 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v234), v225);
  v244 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v236), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v218));
  v245 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v237), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v219));
  v246 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v238), v224);
  v247 = vorrq_s8(v240, v223);
  v248 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v210), v222);
  v249 = vceqzq_s8(*(int8x16_t *)(v200 + 360));
  v250 = vmovl_s8(*(int8x8_t *)v249.i8);
  v251 = vmovl_high_s16(v250);
  v252 = vmovl_high_s8(v249);
  v253 = vmovl_high_s16(v252);
  v254 = vmovl_s16(*(int16x4_t *)v250.i8);
  v255 = vmovl_s16(*(int16x4_t *)v252.i8);
  v210.i64[0] = v254.i32[0];
  v210.i64[1] = v254.i32[1];
  v256 = v210;
  v210.i64[0] = v255.i32[0];
  v210.i64[1] = v255.i32[1];
  v257 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v210);
  v258 = vceqzq_s8(*(int8x16_t *)(v200 + 376));
  v259 = vmovl_high_s8(v258);
  v260 = vmovl_s16(*(int16x4_t *)v259.i8);
  v210.i64[0] = v260.i32[0];
  v210.i64[1] = v260.i32[1];
  v261 = vmovl_s8(*(int8x8_t *)v258.i8);
  v262 = vmovl_s16(*(int16x4_t *)v261.i8);
  v263 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v210), v257), v241);
  v210.i64[0] = v262.i32[0];
  v210.i64[1] = v262.i32[1];
  v264 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v210), vbicq_s8((int8x16_t)xmmword_19FFB3170, v256));
  v210.i64[0] = v253.i32[0];
  v210.i64[1] = v253.i32[1];
  v265 = vbicq_s8((int8x16_t)xmmword_19FFB3180, v210);
  v266 = vmovl_high_s16(v259);
  v267 = vorrq_s8(v264, v242);
  v210.i64[0] = v266.i32[0];
  v210.i64[1] = v266.i32[1];
  v268 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v210), v265);
  v210.i64[0] = v251.i32[0];
  v210.i64[1] = v251.i32[1];
  v269 = vbicq_s8((int8x16_t)xmmword_19FFB3190, v210);
  v270 = vmovl_high_s16(v261);
  v210.i64[0] = v270.i32[0];
  v210.i64[1] = v270.i32[1];
  v271 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v210), v269), v244);
  v210.i64[0] = v255.i32[2];
  v210.i64[1] = v255.i32[3];
  v272 = vbicq_s8((int8x16_t)xmmword_19FFB31A0, v210);
  v210.i64[0] = v260.i32[2];
  v210.i64[1] = v260.i32[3];
  v273 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v210), v272), v245);
  v210.i64[0] = v254.i32[2];
  v210.i64[1] = v254.i32[3];
  v274 = vbicq_s8((int8x16_t)xmmword_19FFB31B0, v210);
  v210.i64[0] = v262.i32[2];
  v210.i64[1] = v262.i32[3];
  v275 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v210), v274), v246);
  v210.i64[0] = v253.i32[2];
  v210.i64[1] = v253.i32[3];
  v276 = vbicq_s8((int8x16_t)xmmword_19FFB31C0, v210);
  v210.i64[0] = v266.i32[2];
  v210.i64[1] = v266.i32[3];
  v277 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31F0, v210), v276), v247);
  v210.i64[0] = v251.i32[2];
  v210.i64[1] = v251.i32[3];
  v278 = vbicq_s8((int8x16_t)xmmword_19FFB31D0, v210);
  v210.i64[0] = v270.i32[2];
  v210.i64[1] = v270.i32[3];
  *((_QWORD *)v200 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(v267, v263), vorrq_s8(v271, vorrq_s8(v268, v243))), (int64x2_t)vorrq_s8(vorrq_s8(v275, v273), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v210), v278), v248), v277))));
  *((_QWORD *)v200 + 3) = &off_1E42BAB30;
  v200[312] = 1;
  v279 = (std::__shared_weak_count *)a1[8];
  a1[7] = (uint64_t)(v200 + 24);
  a1[8] = (uint64_t)v200;
  if (v279)
  {
    v280 = (unint64_t *)&v279->__shared_owners_;
    do
      v281 = __ldaxr(v280);
    while (__stlxr(v281 - 1, v280));
    if (!v281)
    {
      ((void (*)(std::__shared_weak_count *))v279->__on_zero_shared)(v279);
      std::__shared_weak_count::__release_weak(v279);
    }
  }
  if (v197)
  {
    v282 = (unint64_t *)&v197->__shared_owners_;
    do
      v283 = __ldaxr(v282);
    while (__stlxr(v283 - 1, v282));
    if (!v283)
    {
      ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
      std::__shared_weak_count::__release_weak(v197);
    }
  }
  v284 = *(_QWORD *)(a2 + 80);
  v285 = *(_QWORD *)(v284 + 2960);
  v286 = *(std::__shared_weak_count **)(v284 + 2968);
  if (v286)
  {
    v287 = (unint64_t *)&v286->__shared_owners_;
    do
      v288 = __ldxr(v287);
    while (__stxr(v288 + 1, v287));
  }
  v289 = (char *)operator new(0x198uLL);
  *((_QWORD *)v289 + 1) = 0;
  *((_QWORD *)v289 + 2) = 0;
  *(_QWORD *)v289 = &off_1E42E3EE8;
  v463 = *a6;
  v468 = a6[1];
  if ((v290 & 1) == 0
  {
    if ((v434 & 1) == 0
    {
      if ((v444 & 1) == 0
      {
        if ((v451 & 1) == 0
        {
          ggl::MeshTyped<ggl::Ribbon::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::Ribbon::defaultVboReflection;
        }
        ggl::MeshTyped<ggl::Ribbon::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::Ribbon::DefaultVbo>::attributesReflection(void)::r;
        unk_1ECE43DB8 = 1;
      }
      ggl::TexturedInnerShadowRibbon::PipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::Ribbon::DefaultVbo>::typedReflection(void)::r;
      unk_1ECE3B2B0 = &ggl::TexturedInnerShadowRibbon::pipelineDataPipelineDeviceStructs(void)::ref;
      qword_1ECE3B2B8 = 0;
      if ((v445 & 1) == 0
      {
        ggl::TexturedInnerShadowRibbon::pipelineDataPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
        *(_QWORD *)algn_1ECE3B2E8 = ggl::Tile::Transform::reflection(void)::reflection;
        qword_1ECE3B2F0 = (uint64_t)ggl::OffsetRibbon::Style::reflection(void)::reflection;
        unk_1ECE3B2F8 = ggl::OffsetRibbon::Noise::reflection(void)::reflection;
        qword_1ECE3B300 = (uint64_t)ggl::TexturedInnerShadowRibbon::ShadowStyle::reflection(void)::reflection;
      }
      qword_1ECE3B2C0 = (uint64_t)&ggl::TexturedInnerShadowRibbon::pipelineDataPipelineConstantStructs(void)::ref;
      *(_OWORD *)algn_1ECE3B2C8 = xmmword_19FFB38C0;
    }
    ggl::TexturedInnerShadowRibbon::PipelineState::typedReflection(void)::ref = (uint64_t)&ggl::TexturedInnerShadowRibbon::PipelineSetup::typedReflection(void)::ref;
    if ((v435 & 1) == 0
    {
      ggl::TexturedInnerShadowRibbonShader::typedReflection(void)::ref = (uint64_t)"TexturedInnerShadowRibbonShader";
      if ((v446 & 1) == 0
      {
        v452 = ggl::crc32::compute<38ul>("TexturedInnerShadowRibbonShaderVertex");
        qword_1ECE45418 = (uint64_t)"TexturedInnerShadowRibbonShader";
        unk_1ECE45420 = ggl::texturedInnerShadowRibbonShaderVertShaderFunctionAttributes(void)::ref;
        qword_1ECE45428 = 1;
        unk_1ECE45430 = &ggl::texturedInnerShadowRibbonShaderVertShaderFunctionConstantMapping(void)::ref;
        qword_1ECE45438 = 4;
        unk_1ECE45440 = &ggl::texturedInnerShadowRibbonShaderVertShaderFunctionBufferMapping(void)::ref;
        qword_1ECE45448 = 0;
        unk_1ECE45450 = &ggl::texturedInnerShadowRibbonShaderVertShaderFunctionTextureMapping(void)::ref;
        ggl::texturedInnerShadowRibbonShaderVertexFunctionDescriptor(void)::ref = v452;
        *(_DWORD *)algn_1ECE45414 = 0;
        qword_1ECE45458 = 0;
        unk_1ECE45460 = &ggl::texturedInnerShadowRibbonShaderVertShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE45470 = 0;
        unk_1ECE45478 = 0;
        qword_1ECE45468 = 0;
      }
      qword_1ECE3BC08 = (uint64_t)&ggl::texturedInnerShadowRibbonShaderVertexFunctionDescriptor(void)::ref;
      dword_1ECE3BC10 = ggl::crc32::compute<38ul>("TexturedInnerShadowRibbonShaderVertex");
      if ((v447 & 1) == 0
      {
        qword_1ECE431E0 = 0;
        unk_1ECE431E8 = &ggl::texturedInnerShadowRibbonShaderFragShaderFunctionConstantMapping(void)::ref;
        qword_1ECE431F0 = 3;
        unk_1ECE431F8 = &ggl::texturedInnerShadowRibbonShaderFragShaderFunctionBufferMapping(void)::ref;
        ggl::texturedInnerShadowRibbonShaderFragmentFunctionDescriptor(void)::ref = 0x17C729238;
        qword_1ECE43200 = 0;
        unk_1ECE43208 = &ggl::texturedInnerShadowRibbonShaderFragShaderFunctionTextureMapping(void)::ref;
        qword_1ECE431D0 = (uint64_t)"TexturedInnerShadowRibbonShader";
        unk_1ECE431D8 = 0;
        qword_1ECE43210 = 3;
        unk_1ECE43218 = &ggl::texturedInnerShadowRibbonShaderFragShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE43228 = 0;
        unk_1ECE43230 = 0;
        qword_1ECE43220 = 3;
      }
      qword_1ECE3BC18 = (uint64_t)&ggl::texturedInnerShadowRibbonShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE3BC20 = 2087883320;
      qword_1ECE3BC28 = (uint64_t)ggl::texturedInnerShadowRibbonShaderShaderConstants(void)::ref;
      unk_1ECE3BC30 = 5;
      qword_1ECE3BC38 = (uint64_t)ggl::texturedInnerShadowRibbonShaderShaderTextures(void)::ref;
      unk_1ECE3BC40 = 3;
      qword_1ECE3BC48 = (uint64_t)ggl::texturedInnerShadowRibbonShaderShaderSamplers(void)::ref;
      unk_1ECE3BC50 = 3;
    }
    qword_1ECE31D78 = (uint64_t)&ggl::TexturedInnerShadowRibbonShader::typedReflection(void)::ref;
    if ((v436 & 1) == 0
    {
      ggl::TexturedInnerShadowRibbon::pipelineStatePipelineAttributeStructBinding(void)::attr = 0;
      *(_QWORD *)algn_1EE580388 = 0;
      qword_1EE580390 = (uint64_t)"";
      dword_1EE580398 = 0;
      qword_1EE5803A0 = (uint64_t)&ggl::TexturedInnerShadowRibbon::pipelineStatePipelineAttributeBinding_0(void)::attr;
      unk_1EE5803A8 = 4;
    }
    qword_1ECE31D80 = (uint64_t)&ggl::TexturedInnerShadowRibbon::pipelineStatePipelineAttributeStructBinding(void)::attr;
    *(_QWORD *)algn_1ECE31D88 = 1;
    qword_1ECE31D90 = 0;
    unk_1ECE31D98 = 3;
    qword_1ECE31DA0 = (uint64_t)&ggl::TexturedInnerShadowRibbon::pipelineStatePipelineDeviceStructBinding(void)::ref;
    unk_1ECE31DA8 = 0;
    if ((v437 & 1) == 0
    {
      ggl::TexturedInnerShadowRibbon::pipelineStatePipelineConstantStructBinding(void)::ref = 0;
      *(_QWORD *)algn_1EE580298 = 0;
      qword_1EE5802A0 = (uint64_t)"view";
      dword_1EE5802A8 = 3;
      qword_1EE5802B0 = (uint64_t)&ggl::TexturedInnerShadowRibbon::pipelineStatePipelineConstantViewBinding(void)::reflection;
      unk_1EE5802B8 = xmmword_19FFB35A0;
      qword_1EE5802C8 = 1;
      unk_1EE5802D0 = "transform";
      dword_1EE5802D8 = 3;
      qword_1EE5802E0 = (uint64_t)&ggl::TexturedInnerShadowRibbon::pipelineStatePipelineConstantTransformBinding(void)::reflection;
      unk_1EE5802E8 = xmmword_19FFB3660;
      qword_1EE5802F8 = 2;
      unk_1EE580300 = "style";
      dword_1EE580308 = 3;
      qword_1EE580310 = (uint64_t)&ggl::TexturedInnerShadowRibbon::pipelineStatePipelineConstantStyleBinding(void)::reflection;
      unk_1EE580318 = xmmword_19FFB38C0;
      qword_1EE580328 = 3;
      unk_1EE580330 = "noise";
      dword_1EE580338 = 3;
      qword_1EE580340 = (uint64_t)&ggl::TexturedInnerShadowRibbon::pipelineStatePipelineConstantNoiseBinding(void)::reflection;
      unk_1EE580348 = xmmword_19FFB3050;
      qword_1EE580358 = 4;
      unk_1EE580360 = "shadowStyle";
      dword_1EE580368 = 3;
      qword_1EE580370 = (uint64_t)&ggl::TexturedInnerShadowRibbon::pipelineStatePipelineConstantShadowStyleBinding(void)::reflection;
      unk_1EE580378 = 2;
    }
    qword_1ECE31DB0 = (uint64_t)&ggl::TexturedInnerShadowRibbon::pipelineStatePipelineConstantStructBinding(void)::ref;
    unk_1ECE31DB8 = 5;
  }
  if (v286)
  {
    v291 = (unint64_t *)&v286->__shared_owners_;
    do
      v292 = __ldxr(v291);
    while (__stxr(v292 + 1, v291));
    *((_DWORD *)v289 + 14) = 0;
    *((_QWORD *)v289 + 5) = 0;
    *((_QWORD *)v289 + 6) = 0;
    *((_QWORD *)v289 + 3) = &off_1E42B6760;
    *((_QWORD *)v289 + 4) = 0;
    *((_QWORD *)v289 + 8) = &ggl::TexturedInnerShadowRibbon::PipelineState::typedReflection(void)::ref;
    *((_QWORD *)v289 + 9) = v285;
    *((_QWORD *)v289 + 10) = v286;
    do
      v293 = __ldxr(v291);
    while (__stxr(v293 + 1, v291));
  }
  else
  {
    *((_DWORD *)v289 + 14) = 0;
    *((_QWORD *)v289 + 5) = 0;
    *((_QWORD *)v289 + 6) = 0;
    *((_QWORD *)v289 + 3) = &off_1E42B6760;
    *((_QWORD *)v289 + 4) = 0;
    *((_QWORD *)v289 + 8) = &ggl::TexturedInnerShadowRibbon::PipelineState::typedReflection(void)::ref;
    *((_QWORD *)v289 + 9) = v285;
    *((_QWORD *)v289 + 10) = 0;
  }
  v289[136] = 0;
  *(_OWORD *)(v289 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v289 + 156) = 0;
  *(_QWORD *)(v289 + 172) = 0;
  *(_QWORD *)(v289 + 164) = 0;
  v289[184] = 0;
  *(_OWORD *)(v289 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v289 + 204) = 0;
  *(_QWORD *)(v289 + 220) = 0;
  *(_QWORD *)(v289 + 212) = 0;
  v289[232] = 0;
  *(_OWORD *)(v289 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v289 + 252) = 0;
  *(_QWORD *)(v289 + 268) = 0;
  *(_QWORD *)(v289 + 260) = 0;
  *(_OWORD *)(v289 + 280) = v463;
  *(_OWORD *)(v289 + 296) = v468;
  v289[312] = 0;
  *((_QWORD *)v289 + 48) = 0;
  *((_OWORD *)v289 + 22) = 0u;
  *((_OWORD *)v289 + 23) = 0u;
  *((_OWORD *)v289 + 20) = 0u;
  *((_OWORD *)v289 + 21) = 0u;
  *((_QWORD *)v289 + 49) = 0x100000001;
  v289[400] = 0;
  v289[88] = 1;
  *(_WORD *)(v289 + 89) = v458;
  v289[91] = v459;
  *(_OWORD *)(v289 + 92) = xmmword_19FFB35B0;
  *((_DWORD *)v289 + 27) = 7;
  *((_QWORD *)v289 + 14) = 0;
  *((_QWORD *)v289 + 15) = 0;
  *((_DWORD *)v289 + 32) = 0;
  v289[132] = v17;
  if (v286)
  {
    v294 = (unint64_t *)&v286->__shared_owners_;
    do
      v295 = __ldaxr(v294);
    while (__stlxr(v295 - 1, v294));
    if (!v295)
    {
      ((void (*)(std::__shared_weak_count *))v286->__on_zero_shared)(v286);
      std::__shared_weak_count::__release_weak(v286);
    }
  }
  *((_DWORD *)v289 + 84) = 0;
  *(_QWORD *)(v289 + 329) = 0;
  v296 = vceqzq_s8(*(int8x16_t *)(v289 + 328));
  v297 = vmovl_s8(*(int8x8_t *)v296.i8);
  v298 = vmovl_high_s16(v297);
  v299.i64[0] = v298.u32[2];
  v299.i64[1] = v298.u32[3];
  v300 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v299);
  v301 = vmovl_high_s8(v296);
  v302 = vmovl_high_s16(v301);
  v299.i64[0] = v302.u32[2];
  v299.i64[1] = v302.u32[3];
  v303 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v299);
  v304 = vmovl_s16(*(int16x4_t *)v297.i8);
  v299.i64[0] = v304.u32[2];
  v299.i64[1] = v304.u32[3];
  v305 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v299);
  v306 = vmovl_s16(*(int16x4_t *)v301.i8);
  v299.i64[0] = v306.u32[2];
  v299.i64[1] = v306.u32[3];
  v307 = vbicq_s8((int8x16_t)xmmword_19FFB30A0, v299);
  v299.i64[0] = v298.u32[0];
  v299.i64[1] = v298.u32[1];
  v308 = vbicq_s8((int8x16_t)xmmword_19FFB30B0, v299);
  v299.i64[0] = v302.u32[0];
  v299.i64[1] = v302.u32[1];
  v309 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v299);
  v299.i64[0] = v304.u32[0];
  v299.i64[1] = v304.u32[1];
  v310 = vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v299);
  v299.i64[0] = v306.u32[0];
  v299.i64[1] = v306.u32[1];
  v311 = vbicq_s8((int8x16_t)xmmword_19FFB30D0, v299);
  v312 = vceqzq_s8(*(int8x16_t *)(v289 + 344));
  v313 = vmovl_s8(*(int8x8_t *)v312.i8);
  v314 = vmovl_high_s16(v313);
  v299.i64[0] = v314.u32[2];
  v299.i64[1] = v314.u32[3];
  v315 = vbicq_s8((int8x16_t)xmmword_19FFB30E0, v299);
  v316 = vmovl_high_s8(v312);
  v317 = vmovl_high_s16(v316);
  v299.i64[0] = v317.u32[2];
  v299.i64[1] = v317.u32[3];
  v318 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v299);
  v319 = vmovl_s16(*(int16x4_t *)v313.i8);
  v299.i64[0] = v319.u32[2];
  v299.i64[1] = v319.u32[3];
  v320 = vbicq_s8((int8x16_t)xmmword_19FFB3100, v299);
  v321 = vmovl_s16(*(int16x4_t *)v316.i8);
  v299.i64[0] = v321.u32[2];
  v299.i64[1] = v321.u32[3];
  v322 = vbicq_s8((int8x16_t)xmmword_19FFB3110, v299);
  v299.i64[0] = v314.u32[0];
  v299.i64[1] = v314.u32[1];
  v323 = vbicq_s8((int8x16_t)xmmword_19FFB3120, v299);
  v299.i64[0] = v317.u32[0];
  v299.i64[1] = v317.u32[1];
  v324 = vbicq_s8((int8x16_t)xmmword_19FFB3130, v299);
  v299.i64[0] = v319.u32[0];
  v299.i64[1] = v319.u32[1];
  v325 = vbicq_s8((int8x16_t)xmmword_19FFB3140, v299);
  v299.i64[0] = v321.u32[0];
  v299.i64[1] = v321.u32[1];
  v326 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v299), v311);
  v327 = vorrq_s8(v325, v310);
  v328 = vorrq_s8(v324, v309);
  v329 = vorrq_s8(v323, v308);
  v330 = vorrq_s8(v322, v307);
  v331 = vorrq_s8(v320, v305);
  v332 = vorrq_s8(v318, v303);
  v333 = vorrq_s8(v315, v300);
  v334 = vceqzq_s8(*(int8x16_t *)(v289 + 360));
  v335 = vmovl_s8(*(int8x8_t *)v334.i8);
  v336 = vmovl_high_s16(v335);
  v337 = vmovl_high_s8(v334);
  v338 = vmovl_high_s16(v337);
  v339 = vmovl_s16(*(int16x4_t *)v335.i8);
  v340 = vmovl_s16(*(int16x4_t *)v337.i8);
  v299.i64[0] = v340.i32[0];
  v299.i64[1] = v340.i32[1];
  v341 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v299);
  v299.i64[0] = v339.i32[0];
  v299.i64[1] = v339.i32[1];
  v342 = vbicq_s8((int8x16_t)xmmword_19FFB3170, v299);
  v299.i64[0] = v338.i32[0];
  v299.i64[1] = v338.i32[1];
  v343 = vbicq_s8((int8x16_t)xmmword_19FFB3180, v299);
  v299.i64[0] = v336.i32[0];
  v299.i64[1] = v336.i32[1];
  v344 = vbicq_s8((int8x16_t)xmmword_19FFB3190, v299);
  v299.i64[0] = v336.i32[2];
  v299.i64[1] = v336.i32[3];
  v345 = v299;
  v299.i64[0] = v338.i32[2];
  v299.i64[1] = v338.i32[3];
  v346 = v299;
  v299.i64[0] = v339.i32[2];
  v299.i64[1] = v339.i32[3];
  v347 = v299;
  v299.i64[0] = v340.i32[2];
  v299.i64[1] = v340.i32[3];
  v348 = vbicq_s8((int8x16_t)xmmword_19FFB31A0, v299);
  v349 = vceqzq_s8(*(int8x16_t *)(v289 + 376));
  v350 = vmovl_high_s8(v349);
  v351 = vmovl_s16(*(int16x4_t *)v350.i8);
  v352 = vmovl_s8(*(int8x8_t *)v349.i8);
  v353 = vmovl_s16(*(int16x4_t *)v352.i8);
  v354 = vmovl_high_s16(v350);
  v355 = vmovl_high_s16(v352);
  v299.i64[0] = v355.i32[2];
  v299.i64[1] = v355.i32[3];
  v356 = vbicq_s8((int8x16_t)xmmword_19FFB31E0, v299);
  v299.i64[0] = v354.i32[2];
  v299.i64[1] = v354.i32[3];
  v357 = vbicq_s8((int8x16_t)xmmword_19FFB31F0, v299);
  v299.i64[0] = v353.i32[2];
  v299.i64[1] = v353.i32[3];
  v358 = vbicq_s8((int8x16_t)xmmword_19FFB3200, v299);
  v299.i64[0] = v351.i32[2];
  v299.i64[1] = v351.i32[3];
  v359 = vbicq_s8((int8x16_t)xmmword_19FFB3210, v299);
  v299.i64[0] = v355.i32[0];
  v299.i64[1] = v355.i32[1];
  v360 = vbicq_s8((int8x16_t)xmmword_19FFB3220, v299);
  v299.i64[0] = v354.i32[0];
  v299.i64[1] = v354.i32[1];
  v361 = vbicq_s8((int8x16_t)xmmword_19FFB3230, v299);
  v299.i64[0] = v353.i32[0];
  v299.i64[1] = v353.i32[1];
  v362 = vbicq_s8((int8x16_t)xmmword_19FFB3240, v299);
  v299.i64[0] = v351.i32[0];
  v299.i64[1] = v351.i32[1];
  *((_QWORD *)v289 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(v362, v342), v327), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v299), v341), v326)), vorrq_s8(vorrq_s8(vorrq_s8(v360, v344), v329), vorrq_s8(vorrq_s8(v361, v343), v328))), (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(v358, vbicq_s8((int8x16_t)xmmword_19FFB31B0, v347)), v331), vorrq_s8(vorrq_s8(v359, v348), v330)), vorrq_s8(vorrq_s8(vorrq_s8(v356, vbicq_s8((int8x16_t)xmmword_19FFB31D0, v345)),
                                                v333),
                                              vorrq_s8(vorrq_s8(v357, vbicq_s8((int8x16_t)xmmword_19FFB31C0, v346)), v332)))));
  *((_QWORD *)v289 + 3) = &off_1E42BB490;
  v289[312] = 1;
  v363 = (std::__shared_weak_count *)a1[6];
  a1[5] = (uint64_t)(v289 + 24);
  a1[6] = (uint64_t)v289;
  if (v363)
  {
    v364 = (unint64_t *)&v363->__shared_owners_;
    do
      v365 = __ldaxr(v364);
    while (__stlxr(v365 - 1, v364));
    if (!v365)
    {
      ((void (*)(std::__shared_weak_count *))v363->__on_zero_shared)(v363);
      std::__shared_weak_count::__release_weak(v363);
    }
  }
  if (v286)
  {
    v366 = (unint64_t *)&v286->__shared_owners_;
    do
      v367 = __ldaxr(v366);
    while (__stlxr(v367 - 1, v366));
    if (!v367)
    {
      ((void (*)(std::__shared_weak_count *))v286->__on_zero_shared)(v286);
      std::__shared_weak_count::__release_weak(v286);
    }
  }
  v368 = operator new();
  v369 = v368;
  v370 = *(_QWORD *)(a2 + 80);
  v371 = *(_QWORD *)(v370 + 2312);
  v372 = *(std::__shared_weak_count **)(v370 + 2320);
  if (v372)
  {
    v373 = (unint64_t *)&v372->__shared_owners_;
    do
      v374 = __ldxr(v373);
    while (__stxr(v374 + 1, v373));
    v454 = *a6;
    v455 = a6[1];
    do
      v375 = __ldxr(v373);
    while (__stxr(v375 + 1, v373));
    v464 = v454;
    v469 = v455;
    *(_QWORD *)v368 = v371;
    *(_QWORD *)(v368 + 8) = v372;
    do
      v376 = __ldxr(v373);
    while (__stxr(v376 + 1, v373));
  }
  else
  {
    v464 = *a6;
    v469 = a6[1];
    *(_QWORD *)v368 = v371;
    *(_QWORD *)(v368 + 8) = 0;
  }
  *(_OWORD *)(v368 + 16) = v464;
  *(_OWORD *)(v368 + 32) = v469;
  *(_BYTE *)(v368 + 48) = 1;
  *(_WORD *)(v368 + 49) = v458;
  *(_BYTE *)(v368 + 51) = v459;
  *(_OWORD *)(v368 + 52) = xmmword_19FFB35B0;
  *(_DWORD *)(v368 + 68) = 7;
  *(_QWORD *)(v368 + 72) = 0;
  *(_QWORD *)(v368 + 80) = 0;
  *(_DWORD *)(v368 + 88) = 0;
  *(_BYTE *)(v368 + 92) = v17;
  *(_QWORD *)(v368 + 104) = 0;
  *(_BYTE *)(v368 + 95) = v457;
  *(_WORD *)(v368 + 93) = v456;
  *(_QWORD *)(v368 + 112) = 0;
  *(_QWORD *)(v368 + 96) = v368 + 104;
  if (v372)
  {
    v377 = (unint64_t *)&v372->__shared_owners_;
    do
      v378 = __ldaxr(v377);
    while (__stlxr(v378 - 1, v377));
    if (!v378)
    {
      ((void (*)(std::__shared_weak_count *))v372->__on_zero_shared)(v372);
      std::__shared_weak_count::__release_weak(v372);
    }
  }
  v379 = *a1;
  *a1 = v369;
  if (v379)
  {
    std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*(_QWORD **)(v379 + 104));
    v380 = *(std::__shared_weak_count **)(v379 + 8);
    if (v380)
    {
      v381 = (unint64_t *)&v380->__shared_owners_;
      do
        v382 = __ldaxr(v381);
      while (__stlxr(v382 - 1, v381));
      if (!v382)
      {
        ((void (*)(std::__shared_weak_count *))v380->__on_zero_shared)(v380);
        std::__shared_weak_count::__release_weak(v380);
      }
    }
    MEMORY[0x1A1AF4E00](v379, 0x1020C40AD78EA61);
  }
  if (v372)
  {
    v383 = (unint64_t *)&v372->__shared_owners_;
    do
      v384 = __ldaxr(v383);
    while (__stlxr(v384 - 1, v383));
    if (!v384)
    {
      ((void (*)(std::__shared_weak_count *))v372->__on_zero_shared)(v372);
      std::__shared_weak_count::__release_weak(v372);
    }
  }
  *(_OWORD *)(a1 + 9) = 0u;
  *(_OWORD *)(a1 + 11) = 0u;
  *(_OWORD *)(a1 + 13) = 0u;
  v385 = operator new();
  *(_DWORD *)(v385 + 32) = 0;
  *(_QWORD *)(v385 + 16) = 0;
  *(_QWORD *)(v385 + 24) = 0;
  *(_QWORD *)v385 = &off_1E42B5DE8;
  *(_QWORD *)(v385 + 8) = 0;
  *(_QWORD *)(v385 + 36) = 65537;
  *(_DWORD *)(v385 + 44) = 0;
  *(_QWORD *)(v385 + 48) = 1;
  *(_WORD *)(v385 + 56) = 0;
  *(_BYTE *)(v385 + 58) = 3;
  *(_QWORD *)(v385 + 67) = 0;
  *(_QWORD *)(v385 + 59) = 0;
  *(_BYTE *)(v385 + 75) = 0;
  *(_QWORD *)(v385 + 132) = 0;
  *(_QWORD *)(v385 + 124) = 0;
  *(_WORD *)(v385 + 188) = 257;
  *(_QWORD *)(v385 + 192) = 0;
  *(_QWORD *)(v385 + 200) = 0;
  *(_BYTE *)(v385 + 208) = 0;
  v386 = a1[9];
  a1[9] = v385;
  if (v386)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v386 + 8))(v386);
    v385 = a1[9];
  }
  *(_BYTE *)(v385 + 56) = 1;
  v387 = operator new();
  *(_DWORD *)(v387 + 32) = 0;
  v388 = (((unint64_t)LODWORD(a8) << 32) | 0x10001) + 767;
  *(_QWORD *)(v387 + 16) = 0;
  *(_QWORD *)(v387 + 24) = 0;
  *(_QWORD *)v387 = &off_1E42B5DE8;
  *(_QWORD *)(v387 + 8) = 0;
  *(_QWORD *)(v387 + 36) = v388;
  *(float *)(v387 + 44) = a9;
  *(_QWORD *)(v387 + 48) = 1;
  *(_WORD *)(v387 + 56) = 0;
  *(_BYTE *)(v387 + 58) = 3;
  *(_QWORD *)(v387 + 67) = 0;
  *(_QWORD *)(v387 + 59) = 0;
  *(_BYTE *)(v387 + 75) = 0;
  *(_QWORD *)(v387 + 132) = 0;
  *(_QWORD *)(v387 + 124) = 0;
  *(_WORD *)(v387 + 188) = 257;
  *(_QWORD *)(v387 + 192) = 0;
  *(_QWORD *)(v387 + 200) = 0;
  *(_BYTE *)(v387 + 208) = 0;
  v389 = a1[11];
  a1[11] = v387;
  if (v389)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v389 + 8))(v389);
    v387 = a1[11];
  }
  *(_BYTE *)(v387 + 56) = 1;
  v390 = operator new();
  *(_DWORD *)(v390 + 32) = 0;
  *(_QWORD *)(v390 + 16) = 0;
  *(_QWORD *)(v390 + 24) = 0;
  *(_QWORD *)v390 = &off_1E42B5DE8;
  *(_QWORD *)(v390 + 8) = 0;
  *(_QWORD *)(v390 + 36) = 65537;
  *(_DWORD *)(v390 + 44) = 0;
  *(_QWORD *)(v390 + 48) = 0x7F0000000400;
  *(_WORD *)(v390 + 56) = 0;
  *(_BYTE *)(v390 + 58) = 3;
  *(_QWORD *)(v390 + 67) = 0;
  *(_QWORD *)(v390 + 59) = 0;
  *(_BYTE *)(v390 + 75) = 0;
  *(_QWORD *)(v390 + 132) = 0;
  *(_QWORD *)(v390 + 124) = 0;
  *(_WORD *)(v390 + 188) = 257;
  *(_QWORD *)(v390 + 192) = 0;
  *(_QWORD *)(v390 + 200) = 0;
  *(_BYTE *)(v390 + 208) = 0;
  v391 = a1[10];
  a1[10] = v390;
  if (v391)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v391 + 8))(v391);
    v390 = a1[10];
  }
  *(_BYTE *)(v390 + 208) = 1;
  *(_BYTE *)(v390 + 56) = 1;
  v392 = operator new();
  *(_DWORD *)(v392 + 32) = 0;
  *(_QWORD *)(v392 + 16) = 0;
  *(_QWORD *)(v392 + 24) = 0;
  *(_QWORD *)v392 = &off_1E42B5DE8;
  *(_QWORD *)(v392 + 8) = 0;
  *(_QWORD *)(v392 + 36) = 65537;
  *(_DWORD *)(v392 + 44) = 0;
  *(_QWORD *)(v392 + 48) = 1;
  *(_WORD *)(v392 + 56) = 0;
  *(_BYTE *)(v392 + 58) = 3;
  *(_QWORD *)(v392 + 67) = 0;
  *(_QWORD *)(v392 + 59) = 0;
  *(_BYTE *)(v392 + 75) = 0;
  *(_QWORD *)(v392 + 132) = 0;
  *(_QWORD *)(v392 + 124) = 0;
  *(_WORD *)(v392 + 188) = 257;
  *(_QWORD *)(v392 + 192) = 0;
  *(_QWORD *)(v392 + 200) = 0;
  *(_BYTE *)(v392 + 208) = 0;
  v393 = a1[12];
  a1[12] = v392;
  if (v393)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v393 + 8))(v393);
    v392 = a1[12];
  }
  *(_BYTE *)(v392 + 58) = 1;
  *(_BYTE *)(v392 + 56) = 1;
  v394 = operator new();
  *(_DWORD *)(v394 + 32) = 0;
  *(_QWORD *)(v394 + 16) = 0;
  *(_QWORD *)(v394 + 24) = 0;
  *(_QWORD *)v394 = &off_1E42B5DE8;
  *(_QWORD *)(v394 + 8) = 0;
  *(_QWORD *)(v394 + 36) = 65537;
  *(_DWORD *)(v394 + 44) = 0;
  *(_QWORD *)(v394 + 48) = 0xFF0000000400;
  *(_WORD *)(v394 + 56) = 0;
  *(_BYTE *)(v394 + 58) = 3;
  *(_QWORD *)(v394 + 67) = 0;
  *(_QWORD *)(v394 + 59) = 0;
  *(_BYTE *)(v394 + 75) = 0;
  *(_QWORD *)(v394 + 132) = 0;
  *(_QWORD *)(v394 + 124) = 0;
  *(_WORD *)(v394 + 188) = 257;
  *(_QWORD *)(v394 + 192) = 0;
  *(_QWORD *)(v394 + 200) = 0;
  *(_BYTE *)(v394 + 208) = 0;
  v395 = a1[13];
  a1[13] = v394;
  if (v395)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v395 + 8))(v395);
    v394 = a1[13];
  }
  *(_BYTE *)(v394 + 208) = 1;
  *(_BYTE *)(v394 + 58) = 1;
  *(_BYTE *)(v394 + 56) = 1;
  v396 = operator new();
  *(_DWORD *)(v396 + 32) = 0;
  *(_QWORD *)(v396 + 16) = 0;
  *(_QWORD *)(v396 + 24) = 0;
  *(_QWORD *)v396 = &off_1E42B5DE8;
  *(_QWORD *)(v396 + 8) = 0;
  *(_QWORD *)(v396 + 36) = v388;
  *(float *)(v396 + 44) = a9;
  *(_QWORD *)(v396 + 48) = 1;
  *(_WORD *)(v396 + 56) = 0;
  *(_BYTE *)(v396 + 58) = 3;
  *(_QWORD *)(v396 + 67) = 0;
  *(_QWORD *)(v396 + 59) = 0;
  *(_BYTE *)(v396 + 75) = 0;
  *(_QWORD *)(v396 + 132) = 0;
  *(_QWORD *)(v396 + 124) = 0;
  *(_WORD *)(v396 + 188) = 257;
  *(_QWORD *)(v396 + 192) = 0;
  *(_QWORD *)(v396 + 200) = 0;
  *(_BYTE *)(v396 + 208) = 0;
  v397 = a1[14];
  a1[14] = v396;
  if (v397)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v397 + 8))(v397);
    v396 = a1[14];
  }
  *(_BYTE *)(v396 + 58) = 1;
  *(_BYTE *)(v396 + 56) = 1;
  a1[15] = v453;
  a1[16] = a4;
  a1[17] = 0;
  a1[18] = 0;
  a1[19] = *a5;
  v398 = a5[1];
  a1[20] = v398;
  if (v398)
  {
    v399 = (unint64_t *)(v398 + 8);
    do
      v400 = __ldxr(v399);
    while (__stxr(v400 + 1, v399));
  }
  v401 = (std::__shared_weak_count *)operator new(0x60uLL);
  v401->__shared_owners_ = 0;
  v402 = (unint64_t *)&v401->__shared_owners_;
  v401->__shared_weak_owners_ = 0;
  v401->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEFB8;
  v403 = v401 + 1;
  v404 = ggl::TextureData2D::TextureData2D((uint64_t)&v401[1], 1, 1, 1u, 12, 0);
  *(_BYTE *)((uint64_t (*)(_QWORD *, _QWORD))v401[1].__on_zero_shared)(v404, 0) = 127;
  *(_BYTE *)(((uint64_t (*)(std::__shared_weak_count *, _QWORD))v403->__on_zero_shared)(v403, 0) + 1) = 127;
  *(_BYTE *)(((uint64_t (*)(std::__shared_weak_count *, _QWORD))v403->__on_zero_shared)(v403, 0) + 2) = 127;
  *(_BYTE *)(((uint64_t (*)(std::__shared_weak_count *, _QWORD))v403->__on_zero_shared)(v403, 0) + 3) = -1;
  v405 = (std::__shared_weak_count *)operator new(0x58uLL);
  v405->__shared_owners_ = 0;
  v406 = (unint64_t *)&v405->__shared_owners_;
  v405->__shared_weak_owners_ = 0;
  v405->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DED18;
  v405[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B63B0;
  v405[1].__shared_weak_owners_ = 0;
  v405[2].__vftable = 0;
  v405[1].__shared_owners_ = 0;
  LODWORD(v405[2].__shared_owners_) = 0;
  HIDWORD(v405[2].__shared_weak_owners_) = 1;
  *(uint64_t *)((char *)&v405[2].__shared_owners_ + 4) = 0x100000001;
  v405[3].__vftable = 0;
  v405[3].__shared_owners_ = 0;
  v407 = operator new(0xB0uLL);
  v408 = v407;
  v407[1] = 0;
  v407[2] = 0;
  *v407 = &off_1E42E53B0;
  v409 = (char *)(v407 + 3);
  do
    v410 = __ldxr(v402);
  while (__stxr(v410 + 1, v402));
  v407[13] = 0;
  v407[5] = 0;
  v407[6] = 0;
  *((_DWORD *)v407 + 14) = 0;
  v407[10] = 0x100000001;
  shared_owners = v401[1].__shared_owners_;
  shared_owners_high = HIDWORD(v401[1].__shared_owners_);
  *((_DWORD *)v407 + 22) = 0;
  *((_DWORD *)v407 + 23) = shared_owners_high;
  v407[12] = 0x100000001;
  v407[14] = 0;
  v407[15] = 0;
  v407[3] = &off_1E42BE438;
  v407[4] = 0;
  v407[8] = &unk_1E42BE458;
  v407[9] = "";
  *((_DWORD *)v407 + 32) = shared_owners;
  v407[17] = v403;
  v407[18] = v401;
  do
    v413 = __ldxr(v402);
  while (__stxr(v413 + 1, v402));
  *((_WORD *)v407 + 76) = 0;
  *((_BYTE *)v407 + 154) = 1;
  v407[20] = v405 + 1;
  v407[21] = v405;
  do
    v414 = __ldxr(v406);
  while (__stxr(v414 + 1, v406));
  v407[13] = v401[1].__shared_weak_owners_;
  do
    v415 = __ldaxr(v402);
  while (__stlxr(v415 - 1, v402));
  if (!v415)
  {
    ((void (*)(std::__shared_weak_count *))v401->__on_zero_shared)(v401);
    std::__shared_weak_count::__release_weak(v401);
  }
  v416 = (std::__shared_weak_count *)a1[18];
  a1[17] = (uint64_t)v409;
  a1[18] = (uint64_t)v408;
  if (v416)
  {
    v417 = (unint64_t *)&v416->__shared_owners_;
    do
      v418 = __ldaxr(v417);
    while (__stlxr(v418 - 1, v417));
    if (!v418)
    {
      ((void (*)(std::__shared_weak_count *))v416->__on_zero_shared)(v416);
      std::__shared_weak_count::__release_weak(v416);
    }
  }
  do
    v419 = __ldaxr(v406);
  while (__stlxr(v419 - 1, v406));
  if (!v419)
  {
    ((void (*)(std::__shared_weak_count *))v405->__on_zero_shared)(v405);
    std::__shared_weak_count::__release_weak(v405);
  }
  do
    v420 = __ldaxr(v402);
  while (__stlxr(v420 - 1, v402));
  if (!v420)
  {
    ((void (*)(std::__shared_weak_count *))v401->__on_zero_shared)(v401);
    std::__shared_weak_count::__release_weak(v401);
  }
  return a1;
}

void sub_19FD15D1C(_Unwind_Exception *a1)
{
  md::RoadSharedPipelineStates *v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t *v4;
  unint64_t *v5;
  unint64_t *v6;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  do
    v8 = __ldaxr(v6);
  while (__stlxr(v8 - 1, v6));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  do
    v9 = __ldaxr(v5);
  while (__stlxr(v9 - 1, v5));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)v1 + 20);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)v1 + 18);
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = *((_QWORD *)v1 + 14);
  *((_QWORD *)v1 + 14) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = *((_QWORD *)v1 + 13);
  *((_QWORD *)v1 + 13) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *((_QWORD *)v1 + 12);
  *((_QWORD *)v1 + 12) = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v19 = *((_QWORD *)v1 + 11);
  *((_QWORD *)v1 + 11) = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = *((_QWORD *)v1 + 10);
  *((_QWORD *)v1 + 10) = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  v21 = *v4;
  *v4 = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  md::RoadSharedPipelineStates::~RoadSharedPipelineStates(v1);
  _Unwind_Resume(a1);
}

uint64_t md::RibbonBatch<md::Ribbons::RoadRibbonDescriptor>::~RibbonBatch(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_1E428C6C0;
  v2 = (std::__shared_weak_count *)a1[132];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return md::Ribbons::RibbonBatch<md::Ribbons::RoadRibbonDescriptor>::~RibbonBatch((uint64_t)a1);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_1E428C6C0;
  v2 = (std::__shared_weak_count *)a1[132];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return md::Ribbons::RibbonBatch<md::Ribbons::RoadRibbonDescriptor>::~RibbonBatch((uint64_t)a1);
}

uint64_t md::Ribbons::RibbonBatch<md::Ribbons::RoadRibbonDescriptor>::~RibbonBatch(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  malloc_zone_t *zone;
  void (***v11)(_QWORD, uint64_t);
  void (***v12)(_QWORD, uint64_t);
  unsigned __int8 v13;
  uint64_t v14;
  geo::read_write_lock *v15;
  const char *v16;
  _QWORD *v17;
  unint64_t v18;
  void (***v19)(void);
  void (**v20)(void);
  _QWORD **v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  _QWORD *v33;

  *(_QWORD *)a1 = &off_1E42AF0C8;
  v2 = *(_QWORD **)(a1 + 1016);
  if (v2)
  {
    v3 = *(_QWORD **)(a1 + 1024);
    v4 = *(void **)(a1 + 1016);
    if (v3 != v2)
    {
      do
      {
        v7 = *--v3;
        v6 = v7;
        *v3 = 0;
        if (v7)
        {
          v8 = *(_QWORD **)(v6 + 56);
          if (v8)
          {
            v9 = *(_QWORD **)(v6 + 64);
            v5 = *(_QWORD *)(v6 + 56);
            if (v9 != v8)
            {
              do
              {
                v12 = (void (***)(_QWORD, uint64_t))*--v9;
                v11 = v12;
                *v9 = 0;
                if (v12)
                {
                  (**v11)(v11, v5);
                  {
                    v33 = v2;
                    v14 = operator new();
                    *(_QWORD *)(v14 + 16) = 0x5ED09DD50000000FLL;
                    *(_QWORD *)(v14 + 24) = "VectorKitLabels";
                    *(_OWORD *)(v14 + 32) = xmmword_19FFB2E80;
                    *(_QWORD *)v14 = &off_1E42B5668;
                    *(_QWORD *)(v14 + 8) = "VectorKitLabels";
                    *(_OWORD *)(v14 + 72) = 0u;
                    *(_OWORD *)(v14 + 88) = 0u;
                    *(_OWORD *)(v14 + 104) = 0u;
                    *(_OWORD *)(v14 + 120) = 0u;
                    *(_OWORD *)(v14 + 136) = 0u;
                    *(_OWORD *)(v14 + 152) = 0u;
                    *(_OWORD *)(v14 + 168) = 0u;
                    *(_OWORD *)(v14 + 184) = 0u;
                    *(_OWORD *)(v14 + 200) = 0u;
                    *(_OWORD *)(v14 + 216) = 0u;
                    *(_OWORD *)(v14 + 232) = 0u;
                    *(_QWORD *)(v14 + 248) = 0;
                    *(_OWORD *)(v14 + 56) = 0u;
                    v15 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v14 + 56), 0);
                    if ((_DWORD)v15)
                      geo::read_write_lock::logFailure(v15, (uint64_t)"initialization", v16);
                    zone = malloc_create_zone(0, 0);
                    *(_QWORD *)(v14 + 48) = zone;
                    malloc_set_zone_name(zone, "VectorKitLabels");
                    *(_QWORD *)(v14 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                    mdm::Allocator::instance(void)::alloc = v14;
                    v2 = v33;
                  }
                  (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v11, 120);
                }
              }
              while (v9 != v8);
              v5 = *(_QWORD *)(v6 + 56);
            }
            *(_QWORD *)(v6 + 64) = v8;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v6 + 80) + 40))(*(_QWORD *)(v6 + 80), v5, *(_QWORD *)(v6 + 72) - v5);
          }
          MEMORY[0x1A1AF4E00](v6, 0x1020C4010FC18DELL);
        }
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 1016);
    }
    *(_QWORD *)(a1 + 1024) = v2;
    operator delete(v4);
  }
  v17 = *(_QWORD **)(a1 + 992);
  do
  {
    if (v17[1])
    {
      v18 = 0;
      v19 = (void (***)(void))(v17 + 2);
      do
      {
        v20 = *v19;
        v19 += 15;
        (*v20)();
        ++v18;
      }
      while (v18 < v17[1]);
    }
    v17[1] = 0;
    v17 = (_QWORD *)*v17;
  }
  while (v17);
  v21 = *(_QWORD ***)(a1 + 992);
  *(_QWORD *)(a1 + 1000) = v21;
  v22 = *v21;
  *v21 = 0;
  if (v22)
  {
    do
    {
      v23 = (_QWORD *)*v22;
      free(v22);
      v22 = v23;
    }
    while (v23);
    v21 = *(_QWORD ***)(a1 + 992);
  }
  free(v21);
  v24 = *(void **)(a1 + 968);
  if (v24)
  {
    *(_QWORD *)(a1 + 976) = v24;
    operator delete(v24);
  }
  v25 = *(_QWORD *)(a1 + 936);
  if (v25)
  {
    v26 = *(_QWORD *)(a1 + 944);
    v27 = *(_QWORD *)(a1 + 936);
    if (v26 != v25)
    {
      v28 = *(_QWORD *)(a1 + 944);
      do
      {
        v30 = *(void **)(v28 - 24);
        v28 -= 24;
        v29 = v30;
        if (v30)
        {
          *(_QWORD *)(v26 - 16) = v29;
          operator delete(v29);
        }
        v26 = v28;
      }
      while (v28 != v25);
      v27 = *(_QWORD *)(a1 + 936);
    }
    *(_QWORD *)(a1 + 944) = v25;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 960) + 40))(*(_QWORD *)(a1 + 960), v27, *(_QWORD *)(a1 + 952) - v27);
  }
  v31 = *(void **)(a1 + 912);
  if (v31)
  {
    *(_QWORD *)(a1 + 920) = v31;
    operator delete(v31);
  }
  *(_QWORD *)(a1 + 784) = &off_1E42B59B0;
  *(_QWORD *)(a1 + 800) = 3131955885;
  *(_QWORD *)(a1 + 656) = &off_1E42B59B0;
  *(_QWORD *)(a1 + 672) = 3131955885;
  *(_QWORD *)(a1 + 528) = &off_1E42B59B0;
  *(_QWORD *)(a1 + 544) = 3131955885;
  *(_QWORD *)(a1 + 400) = &off_1E42B59B0;
  *(_QWORD *)(a1 + 416) = 3131955885;
  *(_QWORD *)(a1 + 272) = &off_1E42B59B0;
  *(_QWORD *)(a1 + 288) = 3131955885;
  *(_QWORD *)(a1 + 144) = &off_1E42B59B0;
  *(_QWORD *)(a1 + 160) = 3131955885;
  *(_QWORD *)(a1 + 16) = &off_1E42B59B0;
  *(_QWORD *)(a1 + 32) = 3131955885;
  return a1;
}

void md::Ribbons::RibbonBatch<md::Ribbons::RoadRibbonDescriptor>::~RibbonBatch(uint64_t a1)
{
  md::Ribbons::RibbonBatch<md::Ribbons::RoadRibbonDescriptor>::~RibbonBatch(a1);
  JUMPOUT(0x1A1AF4E00);
}

void md::RoadBatch::~RoadBatch(md::RoadBatch *this)
{
  md::RoadBatch::~RoadBatch(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;

  *(_QWORD *)this = &off_1E42AFDF8;
  v2 = *((_QWORD *)this + 142);
  *((_QWORD *)this + 142) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 141);
  *((_QWORD *)this + 141) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 140);
  *((_QWORD *)this + 140) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 139);
  *((_QWORD *)this + 139) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 138);
  *((_QWORD *)this + 138) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)this + 137);
  *((_QWORD *)this + 137) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *((_QWORD *)this + 136);
  *((_QWORD *)this + 136) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 135);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *(_QWORD *)this = &off_1E428C6C0;
  v12 = (std::__shared_weak_count *)*((_QWORD *)this + 132);
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  md::Ribbons::RibbonBatch<md::Ribbons::RoadRibbonDescriptor>::~RibbonBatch((uint64_t)this);
}

void md::RibbonBatch<md::Ribbons::RoadRibbonDescriptor>::~RibbonBatch(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_1E428C6C0;
  v2 = (std::__shared_weak_count *)a1[132];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::Ribbons::RibbonBatch<md::Ribbons::RoadRibbonDescriptor>::~RibbonBatch((uint64_t)a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::RoadBatch::setRenderOrdersForStrokeAndFill(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, unsigned __int8 a12)
{
  char v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t v22;
  int v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  uint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  _QWORD v33[2];
  char v34;

  v19 = a9;
  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
    v31 = a9;
    v32 = a10;
    do
      v22 = __ldxr(p_shared_owners);
    while (__stxr(v22 + 1, p_shared_owners));
  }
  else
  {
    v31 = a9;
    v32 = 0;
  }
  v33[0] = 0;
  v33[1] = 0;
  v34 = 0;
  if (a9)
  {
    v23 = a8;
    v19 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)a9 + 48))(a9, v33);
    a8 = v23;
  }
  v34 = v19;
  if (a10)
  {
    v24 = (unint64_t *)&a10->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      v30 = a5;
      v26 = a6;
      v27 = a7;
      v28 = a8;
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
      a8 = v28;
      a7 = v27;
      a6 = v26;
      a5 = v30;
    }
  }
  md::RoadBatch::setRenderOrdersForStrokeAndFill(a1, a2, a3, a4, a5, a6, a7, a8, &v31, a11, a12);
  return gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v31);
}

void sub_19FD16840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, std::__shared_weak_count *a19)
{
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;

  v20 = a19;
  if (a19)
  {
    p_shared_owners = (unint64_t *)&a19->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = a17;
  if (a17)
  {
    v24 = (unint64_t *)&a17->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void sub_19FD168C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)va);
  _Unwind_Resume(a1);
}

void md::RoadBatch::setRenderOrdersForStrokeAndFill(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, int a8, _BYTE *a9, uint64_t a10, unsigned __int8 a11)
{
  uint64_t v15;
  unsigned int v16;
  float *v17;
  float v18;
  BOOL v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  float *v27;
  float v28;
  BOOL v29;
  unsigned int v30;
  int v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  const char *v38;
  unint64_t *v39;
  unint64_t v40;
  NSObject *v41;
  uint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  const char *v47;
  unint64_t *v48;
  unint64_t v49;
  NSObject *v50;
  uint64_t v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  const char *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  void *v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v70;
  uint8_t buf[4];
  unsigned int v72;
  __int16 v73;
  const char *v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  if (!a9[32])
  {
    v23 = 0;
    v24 = 0;
    goto LABEL_77;
  }
  v15 = *(_QWORD *)(*(_QWORD *)a9 + 24);
  if (*(unsigned __int8 *)(a10 + 12) >= 0x17u)
    v16 = 23;
  else
    v16 = *(unsigned __int8 *)(a10 + 12);
  v17 = *(float **)v15;
  if (*(_QWORD *)v15
    && (v18 = *v17, LODWORD(v17) = *v17 == 1.0, *(_BYTE *)(v15 + 10))
    && (v18 != 0.0 ? (v19 = v18 == 1.0) : (v19 = 1), !v19)
    || (v20 = *(unsigned __int8 *)(v15 + v17 + 11), v18 = 0.0, v20 == 2))
  {
    buf[0] = 1;
    v70 = 1;
    v21 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v15, 0x68u, v16, 0, buf);
    v22 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v15, 0x68u, v16, 1u, &v70);
    if (v18 >= 1.0)
      v21 = v22;
  }
  else
  {
    v21 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(_QWORD *)(*(_QWORD *)a9 + 24), 0x68u, v16, v20, 0);
  }
  v25 = *(_QWORD *)(*(_QWORD *)a9 + 24);
  if (*(unsigned __int8 *)(a10 + 12) >= 0x17u)
    v26 = 23;
  else
    v26 = *(unsigned __int8 *)(a10 + 12);
  v27 = *(float **)v25;
  if (!*(_QWORD *)v25
    || (v28 = *v27, LODWORD(v27) = *v27 == 1.0, !*(_BYTE *)(v25 + 10))
    || (v28 != 0.0 ? (v29 = v28 == 1.0) : (v29 = 1), v29))
  {
    v30 = *(unsigned __int8 *)(v25 + v27 + 11);
    v28 = 0.0;
    if (v30 != 2)
    {
      v23 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(_QWORD *)(*(_QWORD *)a9 + 24), 0x6Au, v26, v30, 0);
      if (v21 >= 0x100)
        goto LABEL_31;
LABEL_47:
      v24 = v21;
      if (v23 < 0x100)
      {
        v24 = v21;
        goto LABEL_77;
      }
      goto LABEL_48;
    }
  }
  buf[0] = 1;
  v70 = 1;
  v23 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v25, 0x6Au, v26, 0, buf);
  v31 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v25, 0x6Au, v26, 1u, &v70);
  if (v28 >= 1.0)
    v23 = v31;
  if (v21 < 0x100)
    goto LABEL_47;
LABEL_31:
  if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
  v32 = (id)GEOGetVectorKitVKDefaultLog_log;
  if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
  {
    v33 = *(_QWORD *)(*(_QWORD *)a9 + 24);
    v34 = *(_QWORD *)(v33 + 16);
    v35 = *(std::__shared_weak_count **)(v33 + 24);
    if (v35)
    {
      p_shared_owners = (unint64_t *)&v35->__shared_owners_;
      do
        v37 = __ldxr(p_shared_owners);
      while (__stxr(v37 + 1, p_shared_owners));
    }
    v38 = *(const char **)(v34 + 104);
    if (!v38)
      v38 = "";
    *(_DWORD *)buf = 67109378;
    v72 = v21;
    v73 = 2080;
    v74 = v38;
    _os_log_impl(&dword_19F029000, v32, OS_LOG_TYPE_INFO, "Stroke Z index (%d) in style %s is too large - clamping to 255", buf, 0x12u);
    if (v35)
    {
      v39 = (unint64_t *)&v35->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
  }

  v24 = 255;
  if (v23 <= 0xFF)
    goto LABEL_62;
LABEL_48:
  if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
  v41 = (id)GEOGetVectorKitVKDefaultLog_log;
  if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
  {
    v42 = *(_QWORD *)(*(_QWORD *)a9 + 24);
    v43 = *(_QWORD *)(v42 + 16);
    v44 = *(std::__shared_weak_count **)(v42 + 24);
    if (v44)
    {
      v45 = (unint64_t *)&v44->__shared_owners_;
      do
        v46 = __ldxr(v45);
      while (__stxr(v46 + 1, v45));
    }
    v47 = *(const char **)(v43 + 104);
    if (!v47)
      v47 = "";
    *(_DWORD *)buf = 67109378;
    v72 = v23;
    v73 = 2080;
    v74 = v47;
    _os_log_impl(&dword_19F029000, v41, OS_LOG_TYPE_INFO, "Fill Z index (%d) in style %s is too large - clamping to 255", buf, 0x12u);
    if (v44)
    {
      v48 = (unint64_t *)&v44->__shared_owners_;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
  }

  v23 = 255;
  if (v21 > 0xFF)
  {
LABEL_62:
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v50 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v50, OS_LOG_TYPE_INFO))
    {
      v51 = *(_QWORD *)(*(_QWORD *)a9 + 24);
      v52 = *(_QWORD *)(v51 + 16);
      v53 = *(std::__shared_weak_count **)(v51 + 24);
      if (v53)
      {
        v54 = (unint64_t *)&v53->__shared_owners_;
        do
          v55 = __ldxr(v54);
        while (__stxr(v55 + 1, v54));
      }
      v56 = *(const char **)(v52 + 104);
      if (!v56)
        v56 = "";
      *(_DWORD *)buf = 67109378;
      v72 = v21;
      v73 = 2080;
      v74 = v56;
      _os_log_impl(&dword_19F029000, v50, OS_LOG_TYPE_INFO, "Stroke2 Z index (%d) in style %s is too large - clamping to 255", buf, 0x12u);
      if (v53)
      {
        v57 = (unint64_t *)&v53->__shared_owners_;
        do
          v58 = __ldaxr(v57);
        while (__stlxr(v58 - 1, v57));
        if (!v58)
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
        }
      }
    }

  }
LABEL_77:
  v59 = a11 | ((unint64_t)a7 << 28) | 4;
  if (a2)
    *(_QWORD *)(a2 + 48) = v59;
  v60 = v59 | (v24 << 19) | (v23 << 8);
  if (a3)
    *(_QWORD *)(a3 + 48) = v60;
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v61 = (void *)objc_claimAutoreleasedReturnValue();
  v62 = objc_msgSend(v61, "prioritizeTrafficSkeleton");

  if (a4)
  {
    v63 = 196608;
    if (a1)
      v63 = 0x20000;
    v64 = 0x10000;
    if (v62 ^ 1 | a8)
      v64 = v63;
    *(_QWORD *)(a4 + 48) = v64 | v60;
  }
  if (a5)
    *(_QWORD *)(a5 + 48) = v60 | 0x40000;
  if (a6)
  {
    v65 = 0x20000;
    if (a1)
      v65 = 196608;
    *(_QWORD *)(a6 + 48) = v60 | v65;
  }
}

void sub_19FD16EE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void md::RoadLayer::~RoadLayer(md::RoadLayer *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E428C800;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 21);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 21);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  md::Ribbons::RibbonLayer<md::Ribbons::RoadRibbonDescriptor>::~RibbonLayer(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E428C800;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 21);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 21);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  md::Ribbons::RibbonLayer<md::Ribbons::RoadRibbonDescriptor>::~RibbonLayer(this);
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *md::Ribbons::RibbonLayer<md::Ribbons::RoadRibbonDescriptor>::~RibbonLayer(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;

  *a1 = &off_1E42AF308;
  v2 = (_QWORD *)a1[1];
  v3 = (_QWORD *)a1[2];
  while (v2 != v3)
  {
    if (*v2)
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    ++v2;
  }
  v4 = (_QWORD *)a1[4];
  v5 = (_QWORD *)a1[5];
  while (v4 != v5)
  {
    if (*v4)
      (*(void (**)(_QWORD))(*(_QWORD *)*v4 + 8))(*v4);
    ++v4;
  }
  v6 = a1[15];
  a1[15] = 0;
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 2584);
    if (v7)
      MEMORY[0x1A1AF4DE8](v7, 0x1000C8000313F17);
    MEMORY[0x1A1AF4E00](v6, 0x1020C4007FF0C4BLL);
  }
  v8 = (void *)a1[4];
  if (v8)
  {
    a1[5] = v8;
    operator delete(v8);
  }
  v9 = (void *)a1[1];
  if (v9)
  {
    a1[2] = v9;
    operator delete(v9);
  }
  return a1;
}

void md::Ribbons::RibbonLayer<md::Ribbons::RoadRibbonDescriptor>::~RibbonLayer(_QWORD *a1)
{
  md::Ribbons::RibbonLayer<md::Ribbons::RoadRibbonDescriptor>::~RibbonLayer(a1);
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *md::RibbonLayer<md::Ribbons::RoadRibbonDescriptor>::~RibbonLayer(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *a1 = &off_1E428C800;
  v2 = (std::__shared_weak_count *)a1[23];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[21];
    if (!v5)
      return md::Ribbons::RibbonLayer<md::Ribbons::RoadRibbonDescriptor>::~RibbonLayer(a1);
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[21];
    if (!v5)
      return md::Ribbons::RibbonLayer<md::Ribbons::RoadRibbonDescriptor>::~RibbonLayer(a1);
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return md::Ribbons::RibbonLayer<md::Ribbons::RoadRibbonDescriptor>::~RibbonLayer(a1);
}

void md::RibbonLayer<md::Ribbons::RoadRibbonDescriptor>::~RibbonLayer(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *a1 = &off_1E428C800;
  v2 = (std::__shared_weak_count *)a1[23];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[21];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[21];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  md::Ribbons::RibbonLayer<md::Ribbons::RoadRibbonDescriptor>::~RibbonLayer(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t *md::RibbonLayer<md::Ribbons::RoadRibbonDescriptor>::batch(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4, int a5)
{
  uint64_t *v5;
  unsigned __int8 v6;
  unint64_t v7;
  unsigned __int8 v8;
  uint64_t *v9;
  uint64_t *v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unsigned int v15;
  __int32 *v16;
  int8x16_t v17;
  unint64_t v18;
  int8x16_t v19;
  uint32x4_t v20;
  uint32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  int8x16_t v26;
  unint64_t v27;
  float *v28;
  unsigned int v29;
  float v30;
  unsigned int v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unsigned __int8 v38;
  float v39;
  _BOOL8 v40;
  unint64_t v41;
  unint64_t v42;
  int8x8_t prime;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD **v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *i;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint8x8_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t *v60;
  unint64_t v61;
  _QWORD *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  void (***v81)(_QWORD);
  void (***v82)(_QWORD);
  unsigned __int8 v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  _OWORD *v87;
  __int128 *v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  int64x2_t v96;
  unsigned __int8 v97;
  _QWORD *v98;
  uint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  int v102;
  ggl::SolidRibbon::PipelineSetup *v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *p_shared_owners;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  ggl::SolidRibbon::PipelineSetup *v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t *v138;
  unint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  ggl::SolidRibbon::PipelineSetup *v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  unint64_t *v149;
  unint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t *v158;
  unint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  _QWORD *v163;
  unsigned __int8 v164;
  uint64_t *v165;
  uint64_t v166;
  _QWORD *v167;
  uint64_t v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t *v178;
  unint64_t v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  _QWORD *v187;
  unsigned __int8 v188;
  uint64_t *v189;
  uint64_t v190;
  _QWORD *v191;
  uint64_t v192;
  unint64_t *v193;
  unint64_t v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t *v202;
  unint64_t v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  _QWORD *v207;
  unsigned __int8 v208;
  uint64_t *v209;
  uint64_t v210;
  _QWORD *v211;
  uint64_t v212;
  unint64_t *v213;
  unint64_t v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t *v222;
  unint64_t v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  _QWORD *v229;
  unsigned __int8 v230;
  unsigned __int16 *v231;
  uint64_t *v232;
  uint64_t v233;
  _QWORD *v234;
  uint64_t v235;
  unint64_t *v236;
  unint64_t v237;
  std::__shared_weak_count *v238;
  unint64_t *v239;
  unint64_t v240;
  uint64_t v241;
  uint64_t v242;
  unsigned int *v243;
  unsigned int *v244;
  unint64_t j;
  unint64_t v246;
  unsigned int v247;
  unint64_t v248;
  unsigned int *v249;
  unsigned int v250;
  uint64_t v251;
  uint64_t v252;
  unsigned int v253;
  unint64_t v254;
  uint64_t *v255;
  _QWORD *v256;
  uint64_t *v257;
  uint64_t v258;
  uint64_t v259;
  unint64_t v260;
  uint64_t v261;
  unint64_t v262;
  _BYTE *v263;
  uint64_t *v264;
  unint64_t v265;
  uint64_t v266;
  _OWORD *v267;
  uint64_t *v268;
  uint64_t v269;
  __int128 v270;
  uint64_t v271;
  uint64_t *v272;
  char *v273;
  uint64_t *v274;
  uint64_t v275;
  unsigned __int8 v276;
  uint64_t *v277;
  uint64_t v278;
  int64_t v279;
  uint64_t v280;
  unint64_t v281;
  unint64_t v282;
  char *v283;
  uint64_t *v284;
  int64_t v285;
  unint64_t v286;
  uint64_t *v287;
  uint64_t v288;
  unint64_t v289;
  unint64_t v290;
  unint64_t v291;
  unint64_t v292;
  char *v293;
  uint64_t *v294;
  uint64_t v295;
  __int128 v296;
  __int128 v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  _QWORD *v301;
  _QWORD *v302;
  void (***v303)(_QWORD, uint64_t);
  void (***v304)(_QWORD, uint64_t);
  unsigned __int8 v305;
  uint64_t v306;
  _QWORD *v307;
  _QWORD *v308;
  uint64_t v309;
  void (***v310)(_QWORD, uint64_t);
  void (***v311)(_QWORD, uint64_t);
  unsigned __int8 v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  void (***v316)(_QWORD);
  uint64_t v317;
  uint64_t v318;
  unsigned __int8 v319;
  uint64_t v320;
  uint64_t v321;
  int64_t v322;
  uint64_t v323;
  unint64_t v324;
  unint64_t v325;
  char *v326;
  uint64_t *v327;
  int64_t v328;
  unint64_t v329;
  uint64_t *v330;
  uint64_t v331;
  unint64_t v332;
  unint64_t v333;
  unint64_t v334;
  unint64_t v335;
  char *v336;
  uint64_t *v337;
  uint64_t v338;
  __int128 v339;
  __int128 v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  _QWORD *v344;
  _QWORD *v345;
  malloc_zone_t *zone;
  void (***v347)(_QWORD, uint64_t);
  void (***v348)(_QWORD, uint64_t);
  unsigned __int8 v349;
  uint64_t v350;
  geo::read_write_lock *v351;
  const char *v352;
  _QWORD *v353;
  _QWORD *v354;
  uint64_t v355;
  void (***v356)(_QWORD, uint64_t);
  void (***v357)(_QWORD, uint64_t);
  unsigned __int8 v358;
  uint64_t v359;
  _QWORD *v360;
  unint64_t v361;
  _QWORD *v362;
  uint64_t v363;
  uint64_t v364;
  unint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  _QWORD *v369;
  uint64_t v370;
  _QWORD *v371;
  unint64_t v372;
  unint64_t v373;
  unint64_t v374;
  BOOL v375;
  unint64_t v376;
  uint64_t v377;
  _QWORD *v378;
  _OWORD *v379;
  __int128 *v380;
  uint64_t v381;
  __int128 v382;
  __int128 v383;
  uint64_t v384;
  _QWORD *v385;
  void (***v386)(_QWORD);
  void (***v387)(_QWORD);
  unsigned __int8 v388;
  uint64_t v389;
  unsigned __int8 v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  int8x16_t *v396;
  unint64_t v397;
  uint64_t v398;
  uint64_t *v399;
  _QWORD *v400;
  uint64_t v401;
  uint64_t *v402;
  unint64_t v403;
  _QWORD *v404;
  uint64_t v405;
  char *v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  unint64_t v410;
  char *v411;
  char *v412;
  char *v413;
  char *v414;
  char *v415;
  unint64_t v416;
  uint64_t v418;
  char *v419;
  char *v420;
  uint64_t v421;
  __int128 v422;
  __int128 v423;
  uint64_t v424;
  char *v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  _QWORD *v429;
  uint64_t *v430;
  _QWORD *v431;
  void (***v432)(_QWORD, uint64_t);
  void (***v433)(_QWORD, uint64_t);
  unsigned __int8 v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  _QWORD *v439;
  _QWORD *v440;
  void (***v441)(_QWORD, uint64_t);
  void (***v442)(_QWORD, uint64_t);
  unsigned __int8 v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  int v447;
  uint64_t v448;
  unsigned __int8 v449;
  unsigned __int8 v450;
  unsigned __int8 v451;
  unsigned __int8 v452;
  unsigned __int8 v453;
  unsigned __int8 v454;
  unsigned __int8 v455;
  unsigned __int8 v456;
  unsigned __int8 v457;
  unsigned __int8 v458;
  unsigned __int8 v459;
  unsigned __int8 v460;
  uint64_t *v461;
  uint64_t *v465;
  char *v466;
  uint64_t v467;
  uint64_t *v468;
  uint64_t v469;
  uint64_t *v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t *v473;
  uint64_t v474;
  int8x8_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  unint64_t v479;
  float v480;
  uint64_t v481;
  uint64_t *v482;
  char v483;

  *result = 0;
  result[1] = 0;
  result[2] = 0;
  v461 = a2;
  if (a2)
  {
    v5 = result;
    v465 = result;
    do
    {
      v474 = 0;
      v475 = 0;
      {
        v445 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v445, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      v7 = (unint64_t)&md::SignedDistanceFieldGenerator::_hypotCache[32438];
      v476 = mdm::Allocator::instance(void)::alloc;
      v477 = 0;
      {
        v446 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v446, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      v478 = mdm::Allocator::instance(void)::alloc;
      v479 = 0;
      v480 = 1.0;
      v9 = (uint64_t *)v461[5];
      v10 = (uint64_t *)v461[6];
      while (v9 != v10)
      {
        v12 = *(_QWORD *)(*v9 + 88);
        v13 = *(_QWORD **)(*v9 + 72);
        if (a5)
        {
          if (v12)
          {
            if (v12 >= 8)
            {
              v14 = v12 & 0xFFFFFFFFFFFFFFF8;
              v16 = (__int32 *)(v13 + 6);
              v17 = 0uLL;
              v18 = v12 & 0xFFFFFFFFFFFFFFF8;
              v19 = 0uLL;
              v20.i64[0] = 0x300000003;
              v20.i64[1] = 0x300000003;
              v21.i64[0] = 0x100000001;
              v21.i64[1] = 0x100000001;
              do
              {
                v22.i32[0] = *(v16 - 12);
                v23.i32[0] = *(v16 - 11);
                v22.i32[1] = *(v16 - 9);
                v22.i32[2] = *(v16 - 6);
                v22.i32[3] = *(v16 - 3);
                v24.i32[0] = *v16;
                v25.i32[0] = v16[1];
                v24.i32[1] = v16[3];
                v24.i32[2] = v16[6];
                v24.i32[3] = v16[9];
                v23.i32[1] = *(v16 - 8);
                v23.i32[2] = *(v16 - 5);
                v23.i32[3] = *(v16 - 2);
                v25.i32[1] = v16[4];
                v25.i32[2] = v16[7];
                v25.i32[3] = v16[10];
                v17 = vorrq_s8((int8x16_t)vshlq_u32(v21, (uint32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vminq_u32(vcvtq_n_u32_f32(v23, 2uLL), v20), 2uLL), (int8x16_t)vminq_u32(vcvtq_n_u32_f32(v22, 2uLL), v20))), v17);
                v19 = vorrq_s8((int8x16_t)vshlq_u32(v21, (uint32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vminq_u32(vcvtq_n_u32_f32(v25, 2uLL), v20), 2uLL), (int8x16_t)vminq_u32(vcvtq_n_u32_f32(v24, 2uLL), v20))), v19);
                v16 += 24;
                v18 -= 8;
              }
              while (v18);
              v26 = vorrq_s8(v19, v17);
              *(int8x8_t *)v26.i8 = vorr_s8(*(int8x8_t *)v26.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL));
              v15 = v26.i32[0] | v26.i32[1];
              if (v12 == v14)
                goto LABEL_26;
            }
            else
            {
              v14 = 0;
              v15 = 0;
            }
            v27 = v12 - v14;
            v28 = (float *)v13 + 3 * v14 + 1;
            do
            {
              v29 = vcvts_n_u32_f32(*(v28 - 1), 2uLL);
              if (v29 >= 3)
                LOBYTE(v29) = 3;
              v30 = *v28;
              v28 += 3;
              v31 = vcvts_n_u32_f32(v30, 2uLL);
              if (v31 >= 3)
                LOBYTE(v31) = 3;
              v15 |= 1 << (v29 | (4 * v31));
              --v27;
            }
            while (v27);
          }
          else
          {
            v15 = 0;
          }
        }
        else
        {
          v15 = ggl::CullingGrid::intersectedCellsForRibbon(v12, v13);
        }
LABEL_26:
        v32 = (unint64_t)v475;
        if (v475)
        {
          v33 = (uint8x8_t)vcnt_s8(v475);
          v33.i16[0] = vaddlv_u8(v33);
          if (v33.u32[0] > 1uLL)
          {
            v7 = v15;
            if (*(_QWORD *)&v475 <= (unint64_t)v15)
              v7 = (unint64_t)v15 % *(_QWORD *)&v475;
          }
          else
          {
            v7 = (v475.i32[0] - 1) & v15;
          }
          v34 = *(uint64_t **)(v474 + 8 * v7);
          if (v34)
          {
            v35 = *v34;
            if (*v34)
            {
              if (v33.u32[0] < 2uLL)
              {
                while (1)
                {
                  v37 = *(_QWORD *)(v35 + 8);
                  if (v37 == v15)
                  {
                    if (*(_DWORD *)(v35 + 16) == v15)
                      goto LABEL_106;
                  }
                  else if ((v37 & (*(_QWORD *)&v475 - 1)) != v7)
                  {
                    goto LABEL_46;
                  }
                  v35 = *(_QWORD *)v35;
                  if (!v35)
                    goto LABEL_46;
                }
              }
              do
              {
                v36 = *(_QWORD *)(v35 + 8);
                if (v36 == v15)
                {
                  if (*(_DWORD *)(v35 + 16) == v15)
                    goto LABEL_106;
                }
                else
                {
                  if (v36 >= *(_QWORD *)&v475)
                    v36 %= *(_QWORD *)&v475;
                  if (v36 != v7)
                    break;
                }
                v35 = *(_QWORD *)v35;
              }
              while (v35);
            }
          }
        }
LABEL_46:
        v35 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v478 + 16))(v478, 56, 8);
        v481 = v35;
        v482 = &v478;
        *(_QWORD *)v35 = 0;
        *(_QWORD *)(v35 + 8) = v15;
        *(_DWORD *)(v35 + 16) = v15;
        *(_QWORD *)(v35 + 32) = 0;
        *(_QWORD *)(v35 + 40) = 0;
        *(_QWORD *)(v35 + 24) = 0;
        {
          v93 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v93, "VectorKitLabels", 0x5ED09DD50000000FLL);
        }
        *(_QWORD *)(v35 + 48) = mdm::Allocator::instance(void)::alloc;
        v483 = 1;
        v39 = (float)(v479 + 1);
        if (!v32 || (float)(v480 * (float)v32) < v39)
        {
          v40 = (v32 & (v32 - 1)) != 0;
          if (v32 < 3)
            v40 = 1;
          v41 = v40 | (2 * v32);
          v42 = vcvtps_u32_f32(v39 / v480);
          if (v41 <= v42)
            prime = (int8x8_t)v42;
          else
            prime = (int8x8_t)v41;
          if (*(_QWORD *)&prime == 1)
          {
            prime = (int8x8_t)2;
          }
          else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
          {
            prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
          }
          v32 = (unint64_t)v475;
          if (*(_QWORD *)&prime <= *(_QWORD *)&v475)
          {
            if (*(_QWORD *)&prime < *(_QWORD *)&v475)
            {
              v54 = vcvtps_u32_f32((float)v479 / v480);
              if (*(_QWORD *)&v475 < 3uLL
                || (v55 = (uint8x8_t)vcnt_s8(v475), v55.i16[0] = vaddlv_u8(v55), v55.u32[0] > 1uLL))
              {
                v54 = std::__next_prime(v54);
              }
              else
              {
                v56 = 1 << -(char)__clz(v54 - 1);
                if (v54 >= 2)
                  v54 = v56;
              }
              if (*(_QWORD *)&prime <= v54)
                prime = (int8x8_t)v54;
              if (*(_QWORD *)&prime >= v32)
              {
                v32 = (unint64_t)v475;
              }
              else
              {
                if (prime)
                  goto LABEL_59;
                v92 = v474;
                v474 = 0;
                if (v92)
                  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v476 + 40))(v476, v92, 8 * *(_QWORD *)&v475);
                v32 = 0;
                v475 = 0;
              }
            }
LABEL_83:
            if ((v32 & (v32 - 1)) != 0)
            {
              if (v32 <= v15)
                v7 = v15 % v32;
              else
                v7 = v15;
            }
            else
            {
              v7 = ((_DWORD)v32 - 1) & v15;
            }
            goto LABEL_96;
          }
LABEL_59:
          v44 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v476 + 16))(v476, 8 * *(_QWORD *)&prime, 8);
          v45 = v474;
          v474 = v44;
          if (v45)
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v476 + 40))(v476, v45, 8 * *(_QWORD *)&v475);
          v46 = 0;
          v475 = prime;
          do
            *(_QWORD *)(v474 + 8 * v46++) = 0;
          while (*(_QWORD *)&prime != v46);
          v47 = (_QWORD **)v477;
          if (!v477)
            goto LABEL_82;
          v48 = *(_QWORD *)(v477 + 8);
          v49 = *(_QWORD *)&prime - 1;
          if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) == 0)
          {
            v50 = v48 & v49;
            *(_QWORD *)(v474 + 8 * v50) = &v477;
            for (i = *v47; *v47; i = *v47)
            {
              v52 = i[1] & v49;
              if (v52 == v50)
              {
                v47 = (_QWORD **)i;
              }
              else if (*(_QWORD *)(v474 + 8 * v52))
              {
                *v47 = (_QWORD *)*i;
                v53 = 8 * v52;
                *i = **(_QWORD **)(v474 + v53);
                **(_QWORD **)(v474 + v53) = i;
              }
              else
              {
                *(_QWORD *)(v474 + 8 * v52) = v47;
                v47 = (_QWORD **)i;
                v50 = v52;
              }
            }
            goto LABEL_82;
          }
          if (v48 >= *(_QWORD *)&prime)
            v48 %= *(_QWORD *)&prime;
          *(_QWORD *)(v474 + 8 * v48) = &v477;
          v57 = *v47;
          if (!*v47)
          {
LABEL_82:
            v32 = (unint64_t)prime;
            goto LABEL_83;
          }
          while (2)
          {
            v59 = v57[1];
            if (v59 >= *(_QWORD *)&prime)
              v59 %= *(_QWORD *)&prime;
            if (v59 != v48)
            {
              if (!*(_QWORD *)(v474 + 8 * v59))
              {
                *(_QWORD *)(v474 + 8 * v59) = v47;
LABEL_87:
                v47 = (_QWORD **)v57;
                v57 = (_QWORD *)*v57;
                v48 = v59;
                if (!v57)
                  goto LABEL_82;
                continue;
              }
              *v47 = (_QWORD *)*v57;
              v58 = 8 * v59;
              *v57 = **(_QWORD **)(v474 + v58);
              **(_QWORD **)(v474 + v58) = v57;
              v57 = v47;
            }
            break;
          }
          v59 = v48;
          goto LABEL_87;
        }
LABEL_96:
        v60 = *(uint64_t **)(v474 + 8 * v7);
        if (v60)
        {
          *(_QWORD *)v35 = *v60;
LABEL_104:
          *v60 = v35;
          goto LABEL_105;
        }
        *(_QWORD *)v35 = v477;
        v477 = v35;
        *(_QWORD *)(v474 + 8 * v7) = &v477;
        if (*(_QWORD *)v35)
        {
          v61 = *(_QWORD *)(*(_QWORD *)v35 + 8);
          if ((v32 & (v32 - 1)) != 0)
          {
            if (v61 >= v32)
              v61 %= v32;
          }
          else
          {
            v61 &= v32 - 1;
          }
          v60 = (uint64_t *)(v474 + 8 * v61);
          goto LABEL_104;
        }
LABEL_105:
        ++v479;
LABEL_106:
        v62 = *(_QWORD **)(v35 + 32);
        v63 = *(_QWORD *)(v35 + 40);
        if ((unint64_t)v62 < v63)
        {
          if (v62)
          {
            v64 = *v9;
            *v9 = 0;
            *v62 = v64;
          }
          v11 = v62 + 1;
          goto LABEL_9;
        }
        v65 = *(_QWORD *)(v35 + 24);
        v66 = ((uint64_t)v62 - v65) >> 3;
        v67 = v66 + 1;
        if ((unint64_t)(v66 + 1) >> 61)
          abort();
        v68 = v63 - v65;
        if (v68 >> 2 > v67)
          v67 = v68 >> 2;
        if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFF8)
          v69 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v69 = v67;
        if (v69)
        {
          v70 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v35 + 48) + 16))(*(_QWORD *)(v35 + 48), 8 * v69, 8);
          v71 = (_QWORD *)(v70 + 8 * v66);
          v72 = v70 + 8 * v69;
          if (v70)
          {
            v73 = *v9;
            *v9 = 0;
            *v71 = v73;
          }
        }
        else
        {
          v72 = 0;
          v71 = (_QWORD *)(8 * v66);
        }
        v11 = v71 + 1;
        v74 = *(_QWORD **)(v35 + 24);
        v75 = *(_QWORD *)(v35 + 32);
        if ((_QWORD *)v75 == v74)
        {
          *(_QWORD *)(v35 + 24) = v71;
          *(_QWORD *)(v35 + 32) = v11;
          v7 = *(_QWORD *)(v35 + 40);
          *(_QWORD *)(v35 + 40) = v72;
          goto LABEL_133;
        }
        v76 = v75 - (_QWORD)v74 - 8;
        if (v76 <= 0x47
          || (v77 = v76 >> 3, v75 - 8 * v77 - 8 < (unint64_t)v71) && (unint64_t)&v71[-v77 - 1] < v75)
        {
          v78 = *(_QWORD **)(v35 + 32);
          do
          {
LABEL_124:
            v79 = *--v78;
            *v78 = 0;
            *--v71 = v79;
          }
          while (v78 != v74);
          goto LABEL_125;
        }
        v85 = v77 + 1;
        v86 = (v77 + 1) & 0x3FFFFFFFFFFFFFFCLL;
        v78 = (_QWORD *)(v75 - 8 * v86);
        v87 = v71 - 2;
        v88 = (__int128 *)(v75 - 32);
        v89 = v86;
        do
        {
          v91 = *v88;
          v90 = v88[1];
          *v88 = 0uLL;
          v88[1] = 0uLL;
          v88 -= 2;
          *(v87 - 1) = v91;
          *v87 = v90;
          v87 -= 2;
          v89 -= 4;
        }
        while (v89);
        v71 -= v86;
        if (v85 != v86)
          goto LABEL_124;
LABEL_125:
        v75 = *(_QWORD *)(v35 + 24);
        v80 = *(_QWORD **)(v35 + 32);
        *(_QWORD *)(v35 + 24) = v71;
        *(_QWORD *)(v35 + 32) = v11;
        v7 = *(_QWORD *)(v35 + 40);
        *(_QWORD *)(v35 + 40) = v72;
        while (v80 != (_QWORD *)v75)
        {
          v82 = (void (***)(_QWORD))*--v80;
          v81 = v82;
          *v80 = 0;
          if (v82)
          {
            (**v81)(v81);
            {
              v84 = operator new();
              mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v84, "VectorKitLabels", 0x5ED09DD50000000FLL);
            }
            (*(void (**)(uint64_t, void (***)(_QWORD), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                    + 40))(mdm::Allocator::instance(void)::alloc, v81, 120);
          }
        }
LABEL_133:
        if (v75)
          (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v35 + 48) + 40))(*(_QWORD *)(v35 + 48), v75, v7 - v75);
LABEL_9:
        *(_QWORD *)(v35 + 32) = v11;
        ++v9;
      }
      v94 = operator new();
      *(_QWORD *)v94 = &off_1E42AF0C8;
      *(_QWORD *)(v94 + 8) = 0;
      *(_QWORD *)(v94 + 64) = 0;
      *(_QWORD *)(v94 + 40) = 0;
      *(_QWORD *)(v94 + 48) = 0;
      *(_QWORD *)(v94 + 32) = "";
      *(_DWORD *)(v94 + 56) = 0;
      *(_DWORD *)(v94 + 72) = 1065353216;
      v95 = 0uLL;
      *(_OWORD *)(v94 + 80) = 0u;
      *(_OWORD *)(v94 + 96) = 0u;
      v96 = vdupq_n_s64(1uLL);
      *(int64x2_t *)(v94 + 112) = v96;
      *(_QWORD *)(v94 + 128) = 0;
      *(_QWORD *)(v94 + 16) = &off_1E42AF548;
      *(_BYTE *)(v94 + 136) = 1;
      *(_QWORD *)(v94 + 192) = 0;
      *(_QWORD *)(v94 + 168) = 0;
      *(_QWORD *)(v94 + 176) = 0;
      *(_QWORD *)(v94 + 160) = "";
      *(_DWORD *)(v94 + 184) = 0;
      *(_DWORD *)(v94 + 200) = 1065353216;
      *(_OWORD *)(v94 + 208) = 0u;
      *(_OWORD *)(v94 + 224) = 0u;
      *(int64x2_t *)(v94 + 240) = v96;
      *(_QWORD *)(v94 + 256) = 0;
      *(_QWORD *)(v94 + 144) = &off_1E42AF548;
      *(_BYTE *)(v94 + 264) = 1;
      *(_QWORD *)(v94 + 320) = 0;
      *(_DWORD *)(v94 + 312) = 0;
      *(_QWORD *)(v94 + 288) = "";
      *(_QWORD *)(v94 + 296) = 0;
      *(_QWORD *)(v94 + 304) = 0;
      *(_DWORD *)(v94 + 328) = 1065353216;
      *(_OWORD *)(v94 + 336) = 0u;
      *(_OWORD *)(v94 + 352) = 0u;
      *(int64x2_t *)(v94 + 368) = v96;
      *(_QWORD *)(v94 + 384) = 0;
      *(_QWORD *)(v94 + 272) = &off_1E42AF548;
      *(_BYTE *)(v94 + 392) = 1;
      *(_QWORD *)(v94 + 448) = 0;
      *(_QWORD *)(v94 + 424) = 0;
      *(_QWORD *)(v94 + 432) = 0;
      *(_QWORD *)(v94 + 416) = "";
      *(_DWORD *)(v94 + 440) = 0;
      *(_DWORD *)(v94 + 456) = 1065353216;
      *(_OWORD *)(v94 + 464) = 0u;
      *(_OWORD *)(v94 + 480) = 0u;
      *(int64x2_t *)(v94 + 496) = v96;
      *(_QWORD *)(v94 + 512) = 0;
      *(_QWORD *)(v94 + 400) = &off_1E42AF548;
      *(_BYTE *)(v94 + 520) = 1;
      *(_QWORD *)(v94 + 544) = "";
      *(_QWORD *)(v94 + 576) = 0;
      *(_DWORD *)(v94 + 568) = 0;
      *(_QWORD *)(v94 + 552) = 0;
      *(_QWORD *)(v94 + 560) = 0;
      *(_DWORD *)(v94 + 584) = 1065353216;
      *(_OWORD *)(v94 + 592) = 0u;
      *(_OWORD *)(v94 + 608) = 0u;
      *(int64x2_t *)(v94 + 624) = v96;
      *(_QWORD *)(v94 + 640) = 0;
      *(_QWORD *)(v94 + 528) = &off_1E42AF548;
      *(_BYTE *)(v94 + 648) = 1;
      *(_QWORD *)(v94 + 672) = "";
      *(_QWORD *)(v94 + 704) = 0;
      *(_QWORD *)(v94 + 688) = 0;
      *(_QWORD *)(v94 + 680) = 0;
      *(_DWORD *)(v94 + 696) = 0;
      *(_DWORD *)(v94 + 712) = 1065353216;
      *(_OWORD *)(v94 + 720) = 0u;
      *(_OWORD *)(v94 + 736) = 0u;
      *(int64x2_t *)(v94 + 752) = v96;
      *(_QWORD *)(v94 + 768) = 0;
      *(_QWORD *)(v94 + 656) = &off_1E42AF548;
      *(_BYTE *)(v94 + 776) = 1;
      *(_QWORD *)(v94 + 800) = "";
      *(_QWORD *)(v94 + 832) = 0;
      *(_QWORD *)(v94 + 816) = 0;
      *(_QWORD *)(v94 + 808) = 0;
      *(_DWORD *)(v94 + 824) = 0;
      *(_DWORD *)(v94 + 840) = 1065353216;
      *(_OWORD *)(v94 + 848) = 0u;
      *(_OWORD *)(v94 + 864) = 0u;
      *(int64x2_t *)(v94 + 880) = v96;
      *(_QWORD *)(v94 + 896) = 0;
      *(_QWORD *)(v94 + 784) = &off_1E42AF548;
      *(_BYTE *)(v94 + 904) = 1;
      *(_OWORD *)(v94 + 928) = 0u;
      *(_OWORD *)(v94 + 944) = 0u;
      *(_OWORD *)(v94 + 912) = 0u;
      if ((v97 & 1) == 0)
      {
        v95 = 0uLL;
        if (v447)
        {
          v448 = operator new();
          ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v448, "GeoGL", 0xA3D02C1100000005);
          v95 = 0uLL;
        }
      }
      *(_QWORD *)(v94 + 960) = ggl::Allocator::instance(void)::alloc;
      *(_QWORD *)(v94 + 1000) = 0;
      *(_OWORD *)(v94 + 968) = v95;
      *(_OWORD *)(v94 + 984) = v95;
      *(_QWORD *)(v94 + 1008) = 32;
      v98 = malloc_type_malloc(0xF10uLL, 0xB644C221uLL);
      *v98 = 0;
      v98[1] = 0;
      *(_QWORD *)(v94 + 992) = v98;
      *(_QWORD *)(v94 + 1000) = v98;
      *(_QWORD *)(v94 + 1016) = 0;
      *(_QWORD *)(v94 + 1032) = 0;
      *(_QWORD *)(v94 + 1024) = 0;
      *(_BYTE *)(v94 + 1040) = 1;
      *(_QWORD *)v94 = &off_1E428C6C0;
      *(_QWORD *)(v94 + 1048) = v461[2];
      v99 = v461[3];
      *(_QWORD *)(v94 + 1056) = v99;
      if (v99)
      {
        v100 = (unint64_t *)(v99 + 8);
        do
          v101 = __ldxr(v100);
        while (__stxr(v101 + 1, v100));
      }
      v102 = *((_DWORD *)v461 + 8);
      *(_BYTE *)(v94 + 1068) = *((_BYTE *)v461 + 36);
      *(_DWORD *)(v94 + 1064) = v102;
      *(_QWORD *)v94 = &off_1E42AFDF8;
      *(_OWORD *)(v94 + 1072) = 0u;
      *(_OWORD *)(v94 + 1088) = 0u;
      *(_OWORD *)(v94 + 1104) = 0u;
      *(_OWORD *)(v94 + 1120) = 0u;
      *(_QWORD *)(v94 + 1136) = 0;
      v103 = (ggl::SolidRibbon::PipelineSetup *)operator new();
      v104 = ggl::SolidRibbon::PipelineSetup::PipelineSetup(v103);
      v105 = *(uint64_t **)(v104 + 64);
      v105[1] = 0;
      v106 = *a3;
      *v105 = *a3;
      v107 = *(_QWORD **)(v104 + 160);
      v108 = a3[1];
      if (v108)
      {
        v109 = (unint64_t *)(v108 + 8);
        do
          v110 = __ldxr(v109);
        while (__stxr(v110 + 1, v109));
      }
      v111 = (std::__shared_weak_count *)v107[1];
      *v107 = v106;
      v107[1] = v108;
      if (v111)
      {
        p_shared_owners = (unint64_t *)&v111->__shared_owners_;
        do
          v113 = __ldaxr(p_shared_owners);
        while (__stlxr(v113 - 1, p_shared_owners));
        if (!v113)
        {
          ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
          std::__shared_weak_count::__release_weak(v111);
        }
      }
      v114 = *((_QWORD *)v103 + 8);
      *(_QWORD *)(v114 + 24) = 0;
      v115 = *a4;
      *(_QWORD *)(v114 + 16) = *a4;
      v116 = *((_QWORD *)v103 + 20);
      v117 = a4[1];
      if (v117)
      {
        v118 = (unint64_t *)(v117 + 8);
        do
          v119 = __ldxr(v118);
        while (__stxr(v119 + 1, v118));
      }
      v120 = *(std::__shared_weak_count **)(v116 + 24);
      *(_QWORD *)(v116 + 16) = v115;
      *(_QWORD *)(v116 + 24) = v117;
      if (v120)
      {
        v121 = (unint64_t *)&v120->__shared_owners_;
        do
          v122 = __ldaxr(v121);
        while (__stlxr(v122 - 1, v121));
        if (!v122)
        {
          ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
          std::__shared_weak_count::__release_weak(v120);
        }
      }
      v123 = (ggl::SolidRibbon::PipelineSetup *)operator new();
      v124 = ggl::SolidRibbon::PipelineSetup::PipelineSetup(v123);
      v125 = *(uint64_t **)(v124 + 64);
      v125[1] = 0;
      v126 = *a3;
      *v125 = *a3;
      v127 = *(_QWORD **)(v124 + 160);
      v128 = a3[1];
      if (v128)
      {
        v129 = (unint64_t *)(v128 + 8);
        do
          v130 = __ldxr(v129);
        while (__stxr(v130 + 1, v129));
      }
      v131 = (std::__shared_weak_count *)v127[1];
      *v127 = v126;
      v127[1] = v128;
      if (v131)
      {
        v132 = (unint64_t *)&v131->__shared_owners_;
        do
          v133 = __ldaxr(v132);
        while (__stlxr(v133 - 1, v132));
        if (!v133)
        {
          ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
          std::__shared_weak_count::__release_weak(v131);
        }
      }
      v134 = *((_QWORD *)v123 + 8);
      *(_QWORD *)(v134 + 24) = 0;
      v135 = *a4;
      *(_QWORD *)(v134 + 16) = *a4;
      v136 = *((_QWORD *)v123 + 20);
      v137 = a4[1];
      if (v137)
      {
        v138 = (unint64_t *)(v137 + 8);
        do
          v139 = __ldxr(v138);
        while (__stxr(v139 + 1, v138));
      }
      v140 = *(std::__shared_weak_count **)(v136 + 24);
      *(_QWORD *)(v136 + 16) = v135;
      *(_QWORD *)(v136 + 24) = v137;
      if (v140)
      {
        v141 = (unint64_t *)&v140->__shared_owners_;
        do
          v142 = __ldaxr(v141);
        while (__stlxr(v142 - 1, v141));
        if (!v142)
        {
          ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
          std::__shared_weak_count::__release_weak(v140);
        }
      }
      v143 = (ggl::SolidRibbon::PipelineSetup *)operator new();
      v144 = ggl::SolidRibbon::PipelineSetup::PipelineSetup(v143);
      v145 = *(uint64_t **)(v144 + 64);
      v145[1] = 0;
      v146 = *a3;
      *v145 = *a3;
      v147 = *(_QWORD **)(v144 + 160);
      v148 = a3[1];
      if (v148)
      {
        v149 = (unint64_t *)(v148 + 8);
        do
          v150 = __ldxr(v149);
        while (__stxr(v150 + 1, v149));
      }
      v151 = (std::__shared_weak_count *)v147[1];
      *v147 = v146;
      v147[1] = v148;
      if (v151)
      {
        v152 = (unint64_t *)&v151->__shared_owners_;
        do
          v153 = __ldaxr(v152);
        while (__stlxr(v153 - 1, v152));
        if (!v153)
        {
          ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
          std::__shared_weak_count::__release_weak(v151);
        }
      }
      v154 = *((_QWORD *)v143 + 8);
      *(_QWORD *)(v154 + 24) = 0;
      v155 = *a4;
      *(_QWORD *)(v154 + 16) = *a4;
      v156 = *((_QWORD *)v143 + 20);
      v157 = a4[1];
      if (v157)
      {
        v158 = (unint64_t *)(v157 + 8);
        do
          v159 = __ldxr(v158);
        while (__stxr(v159 + 1, v158));
      }
      v160 = *(std::__shared_weak_count **)(v156 + 24);
      *(_QWORD *)(v156 + 16) = v155;
      *(_QWORD *)(v156 + 24) = v157;
      if (v160)
      {
        v161 = (unint64_t *)&v160->__shared_owners_;
        do
          v162 = __ldaxr(v161);
        while (__stlxr(v162 - 1, v161));
        if (!v162)
        {
          ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
          std::__shared_weak_count::__release_weak(v160);
        }
      }
      v163 = (_QWORD *)operator new();
      if ((v164 & 1) == 0
      {
        if ((v449 & 1) == 0
        {
          if ((v457 & 1) == 0
          {
            ggl::MeshTyped<ggl::Ribbon::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::Ribbon::defaultVboReflection;
          }
          ggl::MeshTyped<ggl::Ribbon::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::Ribbon::DefaultVbo>::attributesReflection(void)::r;
          unk_1ECE43DB8 = 1;
        }
        ggl::OuterShadowRibbon::PipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::Ribbon::DefaultVbo>::typedReflection(void)::r;
        *(_QWORD *)algn_1ECE397C8 = &ggl::OuterShadowRibbon::pipelineDataPipelineDeviceStructs(void)::ref;
        qword_1ECE397D0 = 0;
        if ((v450 & 1) == 0
        {
          ggl::OuterShadowRibbon::pipelineDataPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
          unk_1ECE39800 = ggl::Tile::Transform::reflection(void)::reflection;
          qword_1ECE39808 = (uint64_t)ggl::OuterShadowRibbon::Style::reflection(void)::reflection;
        }
        qword_1ECE397D8 = (uint64_t)&ggl::OuterShadowRibbon::pipelineDataPipelineConstantStructs(void)::ref;
        unk_1ECE397E0 = xmmword_19FFB35E0;
      }
      ggl::PipelineSetup::PipelineSetup((uint64_t)v163, (uint64_t)&ggl::OuterShadowRibbon::PipelineSetup::typedReflection(void)::ref);
      *v163 = &off_1E42BA130;
      v165 = (uint64_t *)v163[8];
      v165[1] = 0;
      v166 = *a3;
      *v165 = *a3;
      v167 = (_QWORD *)v163[20];
      v168 = a3[1];
      if (v168)
      {
        v169 = (unint64_t *)(v168 + 8);
        do
          v170 = __ldxr(v169);
        while (__stxr(v170 + 1, v169));
      }
      v171 = (std::__shared_weak_count *)v167[1];
      *v167 = v166;
      v167[1] = v168;
      if (v171)
      {
        v172 = (unint64_t *)&v171->__shared_owners_;
        do
          v173 = __ldaxr(v172);
        while (__stlxr(v173 - 1, v172));
        if (!v173)
        {
          ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
          std::__shared_weak_count::__release_weak(v171);
        }
      }
      v174 = v163[8];
      *(_QWORD *)(v174 + 24) = 0;
      v175 = *a4;
      *(_QWORD *)(v174 + 16) = *a4;
      v176 = v163[20];
      v177 = a4[1];
      if (v177)
      {
        v178 = (unint64_t *)(v177 + 8);
        do
          v179 = __ldxr(v178);
        while (__stxr(v179 + 1, v178));
      }
      v180 = *(std::__shared_weak_count **)(v176 + 24);
      *(_QWORD *)(v176 + 16) = v175;
      *(_QWORD *)(v176 + 24) = v177;
      if (v180)
      {
        v181 = (unint64_t *)&v180->__shared_owners_;
        do
          v182 = __ldaxr(v181);
        while (__stlxr(v182 - 1, v181));
        if (!v182)
        {
          ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
          std::__shared_weak_count::__release_weak(v180);
        }
      }
      v183 = *(_QWORD *)(v94 + 1096);
      *(_QWORD *)(v94 + 1096) = v163;
      if (v183)
        (*(void (**)(uint64_t))(*(_QWORD *)v183 + 8))(v183);
      v184 = *(_QWORD *)(v94 + 1112);
      *(_QWORD *)(v94 + 1112) = v103;
      if (v184)
        (*(void (**)(uint64_t))(*(_QWORD *)v184 + 8))(v184);
      v185 = *(_QWORD *)(v94 + 1104);
      *(_QWORD *)(v94 + 1104) = v123;
      if (v185)
        (*(void (**)(uint64_t))(*(_QWORD *)v185 + 8))(v185);
      v186 = *(_QWORD *)(v94 + 1088);
      *(_QWORD *)(v94 + 1088) = v143;
      if (v186)
        (*(void (**)(uint64_t))(*(_QWORD *)v186 + 8))(v186);
      v187 = (_QWORD *)operator new();
      if ((v188 & 1) == 0
      {
        if ((v451 & 1) == 0
        {
          if ((v458 & 1) == 0
          {
            ggl::MeshTyped<ggl::Ribbon::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::Ribbon::defaultVboReflection;
          }
          ggl::MeshTyped<ggl::Ribbon::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::Ribbon::DefaultVbo>::attributesReflection(void)::r;
          unk_1ECE43DB8 = 1;
        }
        ggl::TexturedSolidRibbon::PipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::Ribbon::DefaultVbo>::typedReflection(void)::r;
        unk_1ECE3A060 = &ggl::TexturedSolidRibbon::pipelineDataPipelineDeviceStructs(void)::ref;
        qword_1ECE3A068 = 0;
        if ((v452 & 1) == 0
        {
          ggl::TexturedSolidRibbon::pipelineDataPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
          *(_QWORD *)algn_1ECE3A098 = ggl::Tile::Transform::reflection(void)::reflection;
          qword_1ECE3A0A0 = (uint64_t)ggl::OffsetRibbon::Style::reflection(void)::reflection;
          unk_1ECE3A0A8 = ggl::OffsetRibbon::Noise::reflection(void)::reflection;
        }
        qword_1ECE3A070 = (uint64_t)&ggl::TexturedSolidRibbon::pipelineDataPipelineConstantStructs(void)::ref;
        unk_1ECE3A078 = xmmword_19FFB2F50;
      }
      ggl::PipelineSetup::PipelineSetup((uint64_t)v187, (uint64_t)&ggl::TexturedSolidRibbon::PipelineSetup::typedReflection(void)::ref);
      *v187 = &off_1E42BAB00;
      v189 = (uint64_t *)v187[8];
      v189[1] = 0;
      v190 = *a3;
      *v189 = *a3;
      v191 = (_QWORD *)v187[20];
      v192 = a3[1];
      if (v192)
      {
        v193 = (unint64_t *)(v192 + 8);
        do
          v194 = __ldxr(v193);
        while (__stxr(v194 + 1, v193));
      }
      v195 = (std::__shared_weak_count *)v191[1];
      *v191 = v190;
      v191[1] = v192;
      if (v195)
      {
        v196 = (unint64_t *)&v195->__shared_owners_;
        do
          v197 = __ldaxr(v196);
        while (__stlxr(v197 - 1, v196));
        if (!v197)
        {
          ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
          std::__shared_weak_count::__release_weak(v195);
        }
      }
      v198 = v187[8];
      *(_QWORD *)(v198 + 24) = 0;
      v199 = *a4;
      *(_QWORD *)(v198 + 16) = *a4;
      v200 = v187[20];
      v201 = a4[1];
      if (v201)
      {
        v202 = (unint64_t *)(v201 + 8);
        do
          v203 = __ldxr(v202);
        while (__stxr(v203 + 1, v202));
      }
      v204 = *(std::__shared_weak_count **)(v200 + 24);
      *(_QWORD *)(v200 + 16) = v199;
      *(_QWORD *)(v200 + 24) = v201;
      if (v204)
      {
        v205 = (unint64_t *)&v204->__shared_owners_;
        do
          v206 = __ldaxr(v205);
        while (__stlxr(v206 - 1, v205));
        if (!v206)
        {
          ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
          std::__shared_weak_count::__release_weak(v204);
        }
      }
      v207 = (_QWORD *)operator new();
      if ((v208 & 1) == 0
      {
        if ((v453 & 1) == 0
        {
          if ((v459 & 1) == 0
          {
            ggl::MeshTyped<ggl::Ribbon::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::Ribbon::defaultVboReflection;
          }
          ggl::MeshTyped<ggl::Ribbon::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::Ribbon::DefaultVbo>::attributesReflection(void)::r;
          unk_1ECE43DB8 = 1;
        }
        ggl::TexturedInnerShadowRibbon::PipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::Ribbon::DefaultVbo>::typedReflection(void)::r;
        unk_1ECE3B2B0 = &ggl::TexturedInnerShadowRibbon::pipelineDataPipelineDeviceStructs(void)::ref;
        qword_1ECE3B2B8 = 0;
        if ((v454 & 1) == 0
        {
          ggl::TexturedInnerShadowRibbon::pipelineDataPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
          *(_QWORD *)algn_1ECE3B2E8 = ggl::Tile::Transform::reflection(void)::reflection;
          qword_1ECE3B2F0 = (uint64_t)ggl::OffsetRibbon::Style::reflection(void)::reflection;
          unk_1ECE3B2F8 = ggl::OffsetRibbon::Noise::reflection(void)::reflection;
          qword_1ECE3B300 = (uint64_t)ggl::TexturedInnerShadowRibbon::ShadowStyle::reflection(void)::reflection;
        }
        qword_1ECE3B2C0 = (uint64_t)&ggl::TexturedInnerShadowRibbon::pipelineDataPipelineConstantStructs(void)::ref;
        *(_OWORD *)algn_1ECE3B2C8 = xmmword_19FFB38C0;
      }
      ggl::PipelineSetup::PipelineSetup((uint64_t)v207, (uint64_t)&ggl::TexturedInnerShadowRibbon::PipelineSetup::typedReflection(void)::ref);
      *v207 = &off_1E42BB460;
      v209 = (uint64_t *)v207[8];
      v209[1] = 0;
      v210 = *a3;
      *v209 = *a3;
      v211 = (_QWORD *)v207[20];
      v212 = a3[1];
      if (v212)
      {
        v213 = (unint64_t *)(v212 + 8);
        do
          v214 = __ldxr(v213);
        while (__stxr(v214 + 1, v213));
      }
      v215 = (std::__shared_weak_count *)v211[1];
      *v211 = v210;
      v211[1] = v212;
      if (v215)
      {
        v216 = (unint64_t *)&v215->__shared_owners_;
        do
          v217 = __ldaxr(v216);
        while (__stlxr(v217 - 1, v216));
        if (!v217)
        {
          ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
          std::__shared_weak_count::__release_weak(v215);
        }
      }
      v218 = v207[8];
      *(_QWORD *)(v218 + 24) = 0;
      v219 = *a4;
      *(_QWORD *)(v218 + 16) = *a4;
      v220 = v207[20];
      v221 = a4[1];
      if (v221)
      {
        v222 = (unint64_t *)(v221 + 8);
        do
          v223 = __ldxr(v222);
        while (__stxr(v223 + 1, v222));
      }
      v224 = *(std::__shared_weak_count **)(v220 + 24);
      *(_QWORD *)(v220 + 16) = v219;
      *(_QWORD *)(v220 + 24) = v221;
      if (v224)
      {
        v225 = (unint64_t *)&v224->__shared_owners_;
        do
          v226 = __ldaxr(v225);
        while (__stlxr(v226 - 1, v225));
        if (!v226)
        {
          ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
          std::__shared_weak_count::__release_weak(v224);
        }
      }
      v227 = *(_QWORD *)(v94 + 1120);
      *(_QWORD *)(v94 + 1120) = v187;
      if (v227)
        (*(void (**)(uint64_t))(*(_QWORD *)v227 + 8))(v227);
      v228 = *(_QWORD *)(v94 + 1128);
      *(_QWORD *)(v94 + 1128) = v207;
      if (v228)
        (*(void (**)(uint64_t))(*(_QWORD *)v228 + 8))(v228);
      v229 = (_QWORD *)operator new();
      if ((v230 & 1) == 0
      {
        if ((v455 & 1) == 0
        {
          if ((v460 & 1) == 0
          {
            ggl::MeshTyped<ggl::Ribbon::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::Ribbon::defaultVboReflection;
          }
          ggl::MeshTyped<ggl::Ribbon::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::Ribbon::DefaultVbo>::attributesReflection(void)::r;
          unk_1ECE43DB8 = 1;
        }
        ggl::Line::BasePipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::Ribbon::DefaultVbo>::typedReflection(void)::r;
        unk_1ECE3BFA0 = &ggl::Line::pipelineDataBasePipelineDeviceStructs(void)::ref;
        qword_1ECE3BFA8 = 0;
        if ((v456 & 1) == 0
        {
          ggl::Line::pipelineDataBasePipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
          unk_1ECE3BFD8 = ggl::Line::Style::reflection(void)::reflection;
        }
        qword_1ECE3BFB0 = (uint64_t)&ggl::Line::pipelineDataBasePipelineConstantStructs(void)::ref;
        unk_1ECE3BFB8 = xmmword_19FFB35C0;
      }
      ggl::PipelineSetup::PipelineSetup((uint64_t)v229, (uint64_t)&ggl::Line::BasePipelineSetup::typedReflection(void)::ref);
      *v229 = &off_1E42BBBB8;
      v232 = (uint64_t *)v229[8];
      v232[1] = 0;
      v233 = *a3;
      *v232 = *a3;
      v234 = (_QWORD *)v229[20];
      v235 = a3[1];
      if (v235)
      {
        v236 = (unint64_t *)(v235 + 8);
        do
          v237 = __ldxr(v236);
        while (__stxr(v237 + 1, v236));
      }
      v238 = (std::__shared_weak_count *)v234[1];
      *v234 = v233;
      v234[1] = v235;
      if (v238)
      {
        v239 = (unint64_t *)&v238->__shared_owners_;
        do
          v240 = __ldaxr(v239);
        while (__stlxr(v240 - 1, v239));
        if (!v240)
        {
          ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
          std::__shared_weak_count::__release_weak(v238);
        }
      }
      v241 = *(_QWORD *)(v94 + 1136);
      *(_QWORD *)(v94 + 1136) = v229;
      if (v241)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v241 + 8))(v241);
        v229 = *(_QWORD **)(v94 + 1136);
      }
      *(_QWORD *)(v94 + 48) = *(_QWORD *)(v94 + 1088);
      *(_QWORD *)(v94 + 176) = *(_QWORD *)(v94 + 1096);
      *(_QWORD *)(v94 + 432) = *(_QWORD *)(v94 + 1112);
      *(_QWORD *)(v94 + 304) = *(_QWORD *)(v94 + 1104);
      *(_QWORD *)(v94 + 560) = *(_QWORD *)(v94 + 1120);
      *(_QWORD *)(v94 + 816) = v229;
      *(_QWORD *)(v94 + 688) = *(_QWORD *)(v94 + 1128);
      *(_QWORD *)(v94 + 64) = 1;
      *(_QWORD *)(v94 + 192) = 2;
      *(_QWORD *)(v94 + 832) = 3;
      v242 = *(_QWORD *)(v94 + 1048);
      v244 = *(unsigned int **)(v242 + 240);
      v243 = *(unsigned int **)(v242 + 248);
      for (j = ((char *)v243 - (char *)v244) >> 3; v244 != v243; v244 += 2)
      {
        v246 = ((j << 6) - 0x61C8864680B583EBLL + (j >> 2) + *v244) ^ j;
        j = (*((unsigned __int16 *)v244 + 2) - 0x61C8864680B583EBLL + (v246 << 6) + (v246 >> 2)) ^ v246;
      }
      v247 = *(unsigned __int16 *)(v242 + 282);
      if (*(_WORD *)(v242 + 282))
      {
        v248 = 0;
        v249 = 0;
        v250 = 0;
        v251 = *(_QWORD *)(v242 + 272);
        v252 = v251 + *(unsigned __int16 *)(v242 + 280);
        do
        {
          if (v250 < v247)
          {
            v249 = (unsigned int *)(v251 + 4 * v250);
            v231 = (unsigned __int16 *)(v252 + 2 * v250);
          }
          v248 ^= (*v231
                 - 0x61C8864680B583EBLL
                 + ((((v248 << 6) - 0x61C8864680B583EBLL + (v248 >> 2) + *v249) ^ v248) << 6)
                 + ((((v248 << 6) - 0x61C8864680B583EBLL + (v248 >> 2) + *v249) ^ v248) >> 2)) ^ ((v248 << 6)
                                                                                                - 0x61C8864680B583EBLL
                                                                                                + (v248 >> 2)
                                                                                                + *v249);
          v253 = v250 + 1;
          if (v250 + 1 < v247)
            ++v250;
          else
            v250 = v247;
        }
        while (v253 < v247);
      }
      else
      {
        LODWORD(v248) = 0;
      }
      *(_BYTE *)(v94 + 1144) = v248 ^ j ^ *(_BYTE *)(v94 + 1064) ^ *(_BYTE *)(v94 + 1068) ^ ((v248 ^ j ^ *(_DWORD *)(v94 + 1064)) >> 16) ^ ((unsigned __int16)(v248 ^ j ^ *(_WORD *)(v94 + 1064) ^ *(unsigned __int8 *)(v94 + 1068) ^ ((v248 ^ j ^ *(_DWORD *)(v94 + 1064)) >> 16)) >> 8);
      v255 = (uint64_t *)v5[1];
      v254 = v5[2];
      if ((unint64_t)v255 >= v254)
      {
        v257 = (uint64_t *)*v5;
        v258 = (uint64_t)v255 - *v5;
        v259 = v258 >> 3;
        v260 = (v258 >> 3) + 1;
        if (v260 >> 61)
          abort();
        v261 = v254 - (_QWORD)v257;
        if (v261 >> 2 > v260)
          v260 = v261 >> 2;
        if ((unint64_t)v261 >= 0x7FFFFFFFFFFFFFF8)
          v262 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v262 = v260;
        if (v262)
        {
          if (v262 >> 61)
LABEL_610:
            std::__throw_bad_array_new_length[abi:nn180100]();
          v263 = operator new(8 * v262);
        }
        else
        {
          v263 = 0;
        }
        v264 = (uint64_t *)&v263[8 * v259];
        *v264 = v94;
        v256 = v264 + 1;
        if (v255 == v257)
        {
          v257 = v255;
        }
        else
        {
          v265 = (char *)(v255 - 1) - (char *)v257;
          if (v265 < 0x58)
            goto LABEL_617;
          if ((unint64_t)((char *)v255 - &v263[v258]) < 0x20)
            goto LABEL_617;
          v266 = (v265 >> 3) + 1;
          v267 = &v263[8 * v259 - 16];
          v268 = v255 - 2;
          v269 = v266 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v270 = *(_OWORD *)v268;
            *(v267 - 1) = *((_OWORD *)v268 - 1);
            *v267 = v270;
            v267 -= 2;
            v268 -= 4;
            v269 -= 4;
          }
          while (v269);
          v264 -= v266 & 0x3FFFFFFFFFFFFFFCLL;
          v255 -= v266 & 0x3FFFFFFFFFFFFFFCLL;
          if (v266 != (v266 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_617:
            do
            {
              v271 = *--v255;
              *--v264 = v271;
            }
            while (v255 != v257);
            v257 = (uint64_t *)*v5;
          }
        }
        *v5 = (uint64_t)v264;
        v5[1] = (uint64_t)v256;
        v5[2] = (uint64_t)&v263[8 * v262];
        if (v257)
          operator delete(v257);
      }
      else
      {
        *v255 = v94;
        v256 = v255 + 1;
      }
      v5[1] = (uint64_t)v256;
      v469 = v477;
      if (v477)
      {
        v272 = 0;
        v273 = 0;
        v274 = 0;
        while (1)
        {
          v275 = operator new();
          *(_QWORD *)(v275 + 96) = 0;
          *(_OWORD *)(v275 + 64) = 0u;
          *(_OWORD *)(v275 + 80) = 0u;
          *(_OWORD *)(v275 + 32) = 0u;
          *(_OWORD *)(v275 + 48) = 0u;
          *(_OWORD *)v275 = 0u;
          *(_OWORD *)(v275 + 16) = 0u;
          *(_BYTE *)(v275 + 48) = 1;
          *(_QWORD *)(v275 + 56) = 0;
          *(_QWORD *)(v275 + 64) = 0;
          *(_QWORD *)(v275 + 72) = 0;
          {
            v393 = operator new();
            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v393, "VectorKitLabels", 0x5ED09DD50000000FLL);
          }
          *(_QWORD *)(v275 + 80) = mdm::Allocator::instance(void)::alloc;
          *(_DWORD *)(v275 + 96) = 0;
          v481 = v275;
          if (v274 < (uint64_t *)v273)
          {
            v481 = 0;
            *v274 = v275;
            v277 = v274 + 1;
            v278 = v481;
            if (!v481)
              goto LABEL_371;
LABEL_359:
            v307 = *(_QWORD **)(v278 + 56);
            if (v307)
            {
              v308 = *(_QWORD **)(v278 + 64);
              v309 = *(_QWORD *)(v278 + 56);
              if (v308 != v307)
              {
                do
                {
                  v311 = (void (***)(_QWORD, uint64_t))*--v308;
                  v310 = v311;
                  *v308 = 0;
                  if (v311)
                  {
                    (**v310)(v310, v309);
                    if ((v312 & 1) == 0
                    {
                      v313 = operator new();
                      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v313, "VectorKitLabels", 0x5ED09DD50000000FLL);
                    }
                    (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v310, 120);
                  }
                }
                while (v308 != v307);
                v309 = *(_QWORD *)(v278 + 56);
              }
              *(_QWORD *)(v278 + 64) = v307;
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v278 + 80) + 40))(*(_QWORD *)(v278 + 80), v309, *(_QWORD *)(v278 + 72) - v309);
            }
            MEMORY[0x1A1AF4E00](v278, 0x1020C4010FC18DELL);
            goto LABEL_371;
          }
          v279 = (char *)v274 - (char *)v272;
          v280 = v274 - v272;
          v281 = v280 + 1;
          if ((unint64_t)(v280 + 1) >> 61)
            abort();
          if ((v273 - (char *)v272) >> 2 > v281)
            v281 = (v273 - (char *)v272) >> 2;
          v282 = (unint64_t)(v273 - (char *)v272) >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v281;
          if (v282)
          {
            if (v282 >> 61)
              goto LABEL_610;
            v283 = (char *)operator new(8 * v282);
          }
          else
          {
            v283 = 0;
          }
          v284 = (uint64_t *)&v283[8 * v280];
          v481 = 0;
          *v284 = v275;
          v277 = v284 + 1;
          v285 = (char *)v274 - (char *)v272;
          if (v274 != v272)
            break;
LABEL_356:
          v273 = &v283[8 * v282];
          if (v272)
            operator delete(v272);
          v272 = v284;
          v278 = v481;
          if (v481)
            goto LABEL_359;
LABEL_371:
          *(_DWORD *)(*(v277 - 1) + 96) = *(_DWORD *)(v469 + 16);
          v314 = *(_QWORD *)(v469 + 24);
          v472 = *(_QWORD *)(v469 + 32);
          if (v314 != v472)
          {
            v315 = 0;
            v274 = v277;
            while (1)
            {
              v316 = *(void (****)(_QWORD))v314;
              v317 = *(_QWORD *)(*(_QWORD *)v314 + 88);
              if ((unint64_t)(v317 + v315) <= 0x5999)
              {
                v321 = *(v274 - 1);
                goto LABEL_436;
              }
              v318 = operator new();
              *(_QWORD *)(v318 + 96) = 0;
              *(_OWORD *)(v318 + 64) = 0u;
              *(_OWORD *)(v318 + 80) = 0u;
              *(_OWORD *)(v318 + 32) = 0u;
              *(_OWORD *)(v318 + 48) = 0u;
              *(_OWORD *)v318 = 0u;
              *(_OWORD *)(v318 + 16) = 0u;
              *(_BYTE *)(v318 + 48) = 1;
              *(_QWORD *)(v318 + 56) = 0;
              *(_QWORD *)(v318 + 64) = 0;
              *(_QWORD *)(v318 + 72) = 0;
              {
                v392 = operator new();
                mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v392, "VectorKitLabels", 0x5ED09DD50000000FLL);
              }
              *(_QWORD *)(v318 + 80) = mdm::Allocator::instance(void)::alloc;
              *(_DWORD *)(v318 + 96) = 0;
              v481 = v318;
              if (v274 >= (uint64_t *)v273)
                break;
              v481 = 0;
              *v274++ = v318;
              v320 = v481;
              if (v481)
                goto LABEL_423;
LABEL_435:
              v315 = 0;
              v321 = *(v274 - 1);
              *(_DWORD *)(v321 + 96) = *(_DWORD *)(v469 + 16);
              v316 = *(void (****)(_QWORD))v314;
              v317 = *(_QWORD *)(*(_QWORD *)v314 + 88);
LABEL_436:
              *(_QWORD *)v314 = 0;
              v360 = *(_QWORD **)(v321 + 64);
              v361 = *(_QWORD *)(v321 + 72);
              if ((unint64_t)v360 < v361)
              {
                if (v360)
                {
                  *v360 = v316;
                  v316 = 0;
                }
                v362 = v360 + 1;
                goto LABEL_473;
              }
              v363 = *(_QWORD *)(v321 + 56);
              v364 = ((uint64_t)v360 - v363) >> 3;
              v365 = v364 + 1;
              if ((unint64_t)(v364 + 1) >> 61)
                abort();
              v366 = v361 - v363;
              if (v366 >> 2 > v365)
                v365 = v366 >> 2;
              if ((unint64_t)v366 >= 0x7FFFFFFFFFFFFFF8)
                v367 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v367 = v365;
              if (v367)
              {
                v368 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v321 + 80) + 16))(*(_QWORD *)(v321 + 80), 8 * v367, 8);
                v369 = (_QWORD *)(v368 + 8 * v364);
                v370 = v368 + 8 * v367;
                if (v368)
                {
                  *v369 = v316;
                  v316 = 0;
                }
              }
              else
              {
                v370 = 0;
                v369 = (_QWORD *)(8 * v364);
              }
              v362 = v369 + 1;
              v371 = *(_QWORD **)(v321 + 56);
              v372 = *(_QWORD *)(v321 + 64);
              if ((_QWORD *)v372 == v371)
              {
                *(_QWORD *)(v321 + 56) = v369;
                *(_QWORD *)(v321 + 64) = v362;
                v471 = *(_QWORD *)(v321 + 72);
                *(_QWORD *)(v321 + 72) = v370;
                if (!v372)
                  goto LABEL_473;
                goto LABEL_472;
              }
              v373 = v372 - (_QWORD)v371 - 8;
              v468 = v272;
              if (v373 <= 0x47
                || ((v374 = v373 >> 3, v372 - 8 * v374 - 8 < (unint64_t)v369)
                  ? (v375 = (unint64_t)&v369[-v374 - 1] >= v372)
                  : (v375 = 1),
                    !v375))
              {
                v378 = *(_QWORD **)(v321 + 64);
                do
                {
LABEL_462:
                  v384 = *--v378;
                  *v378 = 0;
                  *--v369 = v384;
                }
                while (v378 != v371);
                goto LABEL_463;
              }
              v376 = v374 + 1;
              v377 = (v374 + 1) & 0x3FFFFFFFFFFFFFFCLL;
              v378 = (_QWORD *)(v372 - 8 * v377);
              v379 = v369 - 2;
              v380 = (__int128 *)(v372 - 32);
              v381 = v377;
              do
              {
                v383 = *v380;
                v382 = v380[1];
                *v380 = 0uLL;
                v380[1] = 0uLL;
                v380 -= 2;
                *(v379 - 1) = v383;
                *v379 = v382;
                v379 -= 2;
                v381 -= 4;
              }
              while (v381);
              v369 -= v377;
              if (v376 != v377)
                goto LABEL_462;
LABEL_463:
              v372 = *(_QWORD *)(v321 + 56);
              v385 = *(_QWORD **)(v321 + 64);
              *(_QWORD *)(v321 + 56) = v369;
              *(_QWORD *)(v321 + 64) = v362;
              v471 = *(_QWORD *)(v321 + 72);
              *(_QWORD *)(v321 + 72) = v370;
              if (v385 == (_QWORD *)v372)
              {
                v272 = v468;
                if (!v372)
                  goto LABEL_473;
              }
              else
              {
                v466 = v273;
                do
                {
                  v387 = (void (***)(_QWORD))*--v385;
                  v386 = v387;
                  *v385 = 0;
                  if (v387)
                  {
                    (**v386)(v386);
                    if ((v388 & 1) == 0
                    {
                      v389 = operator new();
                      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v389, "VectorKitLabels", 0x5ED09DD50000000FLL);
                    }
                    (*(void (**)(uint64_t, void (***)(_QWORD), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                            + 40))(mdm::Allocator::instance(void)::alloc, v386, 120);
                  }
                }
                while (v385 != (_QWORD *)v372);
                v273 = v466;
                v272 = v468;
                if (!v372)
                  goto LABEL_473;
              }
LABEL_472:
              (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v321 + 80) + 40))(*(_QWORD *)(v321 + 80), v372, v471 - v372);
LABEL_473:
              *(_QWORD *)(v321 + 64) = v362;
              if (v316)
              {
                (**v316)(v316);
                {
                  v391 = operator new();
                  mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v391, "VectorKitLabels", 0x5ED09DD50000000FLL);
                }
                (*(void (**)(uint64_t, void (***)(_QWORD), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                        + 40))(mdm::Allocator::instance(void)::alloc, v316, 120);
              }
              v315 += v317;
              v314 += 8;
              if (v314 == v472)
                goto LABEL_314;
            }
            v322 = (char *)v274 - (char *)v272;
            v323 = v274 - v272;
            v324 = v323 + 1;
            if ((unint64_t)(v323 + 1) >> 61)
              abort();
            if ((v273 - (char *)v272) >> 2 > v324)
              v324 = (v273 - (char *)v272) >> 2;
            if ((unint64_t)(v273 - (char *)v272) >= 0x7FFFFFFFFFFFFFF8)
              v325 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v325 = v324;
            if (v325)
            {
              if (v325 >> 61)
                goto LABEL_610;
              v326 = (char *)operator new(8 * v325);
            }
            else
            {
              v326 = 0;
            }
            v327 = (uint64_t *)&v326[8 * v323];
            v481 = 0;
            *v327 = v318;
            v470 = v327 + 1;
            v328 = (char *)v274 - (char *)v272;
            if (v274 != v272)
            {
              v329 = v328 - 8;
              if ((unint64_t)(v328 - 8) < 0x138)
              {
                v330 = v274;
                goto LABEL_394;
              }
              v332 = v329 & 0xFFFFFFFFFFFFFFF8;
              if ((uint64_t *)((char *)v274 - (v329 & 0xFFFFFFFFFFFFFFF8) - 8) > v274 - 1)
              {
                v330 = v274;
                goto LABEL_394;
              }
              if (&v326[v322 - 8 - v332] > &v326[v322 - 8])
              {
                v330 = v274;
                goto LABEL_394;
              }
              v333 = v329 >> 3;
              if (&v274[-v333 - 1] < v327)
              {
                v334 = (unint64_t)&v326[v322 - v332 - 8];
                v330 = v274;
                if (v334 < (unint64_t)v274)
                  goto LABEL_618;
              }
              v335 = v333 + 1;
              v330 = &v274[-(v335 & 0x3FFFFFFFFFFFFFFCLL)];
              v336 = &v326[8 * v323 - 16];
              v337 = v274 - 4;
              v338 = v335 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v340 = *(_OWORD *)v337;
                v339 = *((_OWORD *)v337 + 1);
                *(_OWORD *)v337 = 0uLL;
                *((_OWORD *)v337 + 1) = 0uLL;
                v337 -= 4;
                *((_OWORD *)v336 - 1) = v340;
                *(_OWORD *)v336 = v339;
                v336 -= 32;
                v338 -= 4;
              }
              while (v338);
              v327 -= v335 & 0x3FFFFFFFFFFFFFFCLL;
              if (v335 != (v335 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_618:
                do
                {
LABEL_394:
                  v331 = *--v330;
                  *v330 = 0;
                  *--v327 = v331;
                }
                while (v330 != v272);
              }
              do
              {
                v343 = *--v274;
                v342 = v343;
                *v274 = 0;
                if (v343)
                {
                  v344 = *(_QWORD **)(v342 + 56);
                  if (v344)
                  {
                    v345 = *(_QWORD **)(v342 + 64);
                    v341 = *(_QWORD *)(v342 + 56);
                    if (v345 != v344)
                    {
                      do
                      {
                        v348 = (void (***)(_QWORD, uint64_t))*--v345;
                        v347 = v348;
                        *v345 = 0;
                        if (v348)
                        {
                          (**v347)(v347, v341);
                          if ((v349 & 1) == 0
                          {
                            v350 = operator new();
                            *(_QWORD *)(v350 + 16) = 0x5ED09DD50000000FLL;
                            *(_QWORD *)(v350 + 24) = "VectorKitLabels";
                            *(_OWORD *)(v350 + 32) = xmmword_19FFB2E80;
                            *(_QWORD *)v350 = &off_1E42B5668;
                            *(_QWORD *)(v350 + 8) = "VectorKitLabels";
                            *(_OWORD *)(v350 + 72) = 0u;
                            *(_OWORD *)(v350 + 88) = 0u;
                            *(_OWORD *)(v350 + 104) = 0u;
                            *(_OWORD *)(v350 + 120) = 0u;
                            *(_OWORD *)(v350 + 136) = 0u;
                            *(_OWORD *)(v350 + 152) = 0u;
                            *(_OWORD *)(v350 + 168) = 0u;
                            *(_OWORD *)(v350 + 184) = 0u;
                            *(_OWORD *)(v350 + 200) = 0u;
                            *(_OWORD *)(v350 + 216) = 0u;
                            *(_OWORD *)(v350 + 232) = 0u;
                            *(_QWORD *)(v350 + 248) = 0;
                            v467 = v350;
                            *(_OWORD *)(v350 + 56) = 0u;
                            v351 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v350 + 56), 0);
                            if ((_DWORD)v351)
                              geo::read_write_lock::logFailure(v351, (uint64_t)"initialization", v352);
                            zone = malloc_create_zone(0, 0);
                            *(_QWORD *)(v467 + 48) = zone;
                            malloc_set_zone_name(zone, "VectorKitLabels");
                            *(_QWORD *)(v467 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                            mdm::Allocator::instance(void)::alloc = v467;
                          }
                          (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v347, 120);
                        }
                      }
                      while (v345 != v344);
                      v341 = *(_QWORD *)(v342 + 56);
                    }
                    *(_QWORD *)(v342 + 64) = v344;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v342 + 80) + 40))(*(_QWORD *)(v342 + 80), v341, *(_QWORD *)(v342 + 72) - v341);
                  }
                  MEMORY[0x1A1AF4E00](v342, 0x1020C4010FC18DELL);
                }
              }
              while (v274 != v272);
            }
            v273 = &v326[8 * v325];
            if (v272)
              operator delete(v272);
            v272 = v327;
            v274 = v470;
            v320 = v481;
            if (!v481)
              goto LABEL_435;
LABEL_423:
            v353 = *(_QWORD **)(v320 + 56);
            if (v353)
            {
              v354 = *(_QWORD **)(v320 + 64);
              v355 = *(_QWORD *)(v320 + 56);
              if (v354 != v353)
              {
                do
                {
                  v357 = (void (***)(_QWORD, uint64_t))*--v354;
                  v356 = v357;
                  *v354 = 0;
                  if (v357)
                  {
                    (**v356)(v356, v355);
                    if ((v358 & 1) == 0
                    {
                      v359 = operator new();
                      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v359, "VectorKitLabels", 0x5ED09DD50000000FLL);
                    }
                    (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v356, 120);
                  }
                }
                while (v354 != v353);
                v355 = *(_QWORD *)(v320 + 56);
              }
              *(_QWORD *)(v320 + 64) = v353;
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v320 + 80) + 40))(*(_QWORD *)(v320 + 80), v355, *(_QWORD *)(v320 + 72) - v355);
            }
            MEMORY[0x1A1AF4E00](v320, 0x1020C4010FC18DELL);
            goto LABEL_435;
          }
          v274 = v277;
LABEL_314:
          v469 = *(_QWORD *)v469;
          if (!v469)
          {
            v256 = (_QWORD *)v465[1];
            goto LABEL_491;
          }
        }
        v286 = v285 - 8;
        if ((unint64_t)(v285 - 8) < 0x138)
        {
          v287 = v274;
          goto LABEL_332;
        }
        v289 = v286 & 0xFFFFFFFFFFFFFFF8;
        if ((uint64_t *)((char *)v274 - (v286 & 0xFFFFFFFFFFFFFFF8) - 8) > v274 - 1)
        {
          v287 = v274;
          goto LABEL_332;
        }
        if (&v283[v279 - 8 - v289] > &v283[v279 - 8])
        {
          v287 = v274;
          goto LABEL_332;
        }
        v290 = v286 >> 3;
        if (&v274[-v290 - 1] < v284)
        {
          v291 = (unint64_t)&v283[v279 - v289 - 8];
          v287 = v274;
          if (v291 < (unint64_t)v274)
            goto LABEL_619;
        }
        v292 = v290 + 1;
        v287 = &v274[-(v292 & 0x3FFFFFFFFFFFFFFCLL)];
        v293 = &v283[8 * v280 - 16];
        v294 = v274 - 4;
        v295 = v292 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v297 = *(_OWORD *)v294;
          v296 = *((_OWORD *)v294 + 1);
          *(_OWORD *)v294 = 0uLL;
          *((_OWORD *)v294 + 1) = 0uLL;
          v294 -= 4;
          *((_OWORD *)v293 - 1) = v297;
          *(_OWORD *)v293 = v296;
          v293 -= 32;
          v295 -= 4;
        }
        while (v295);
        v284 -= v292 & 0x3FFFFFFFFFFFFFFCLL;
        if (v292 != (v292 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_619:
          do
          {
LABEL_332:
            v288 = *--v287;
            *v287 = 0;
            *--v284 = v288;
          }
          while (v287 != v272);
        }
        do
        {
          v300 = *--v274;
          v299 = v300;
          *v274 = 0;
          if (v300)
          {
            v301 = *(_QWORD **)(v299 + 56);
            if (v301)
            {
              v302 = *(_QWORD **)(v299 + 64);
              v298 = *(_QWORD *)(v299 + 56);
              if (v302 != v301)
              {
                do
                {
                  v304 = (void (***)(_QWORD, uint64_t))*--v302;
                  v303 = v304;
                  *v302 = 0;
                  if (v304)
                  {
                    (**v303)(v303, v298);
                    if ((v305 & 1) == 0
                    {
                      v306 = operator new();
                      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v306, "VectorKitLabels", 0x5ED09DD50000000FLL);
                    }
                    (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v303, 120);
                  }
                }
                while (v302 != v301);
                v298 = *(_QWORD *)(v299 + 56);
              }
              *(_QWORD *)(v299 + 64) = v301;
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v299 + 80) + 40))(*(_QWORD *)(v299 + 80), v298, *(_QWORD *)(v299 + 72) - v298);
            }
            MEMORY[0x1A1AF4E00](v299, 0x1020C4010FC18DELL);
          }
        }
        while (v274 != v272);
        goto LABEL_356;
      }
      v274 = 0;
      v272 = 0;
LABEL_491:
      v394 = *(v256 - 1);
      v395 = *(_QWORD *)(v394 + 1016);
      v396 = *(int8x16_t **)(v394 + 1024);
      v397 = 126 - 2 * __clz(((uint64_t)v396->i64 - v395) >> 3);
      if (v396 == (int8x16_t *)v395)
        v398 = 0;
      else
        v398 = v397;
      std::__introsort<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::RoadRibbonDescriptor>::batch(std::unordered_map<md::RoadBatchKey,std::vector<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,geo::StdAllocator<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::RoadBatchKey,std::vector<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,geo::StdAllocator<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::RoadRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::RoadRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*,false>(v395, v396, v398, 1);
      v399 = v272;
      if (v272 == v274)
      {
        if (!v274)
          goto LABEL_4;
      }
      else
      {
        do
        {
          v400 = *(_QWORD **)(v465[1] - 8);
          v401 = *v399;
          *v399 = 0;
          v402 = (uint64_t *)v400[128];
          v403 = v400[129];
          if ((unint64_t)v402 >= v403)
          {
            v405 = v400[127];
            v406 = (char *)v402 - v405;
            v407 = ((uint64_t)v402 - v405) >> 3;
            if ((unint64_t)(v407 + 1) >> 61)
              abort();
            v408 = v403 - v405;
            v409 = v408 >> 2;
            if (v408 >> 2 <= (unint64_t)(v407 + 1))
              v409 = v407 + 1;
            if ((unint64_t)v408 >= 0x7FFFFFFFFFFFFFF8)
              v410 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v410 = v409;
            v473 = v399;
            if (v410)
            {
              if (v410 >> 61)
                goto LABEL_610;
              v411 = (char *)operator new(8 * v410);
            }
            else
            {
              v411 = 0;
            }
            v412 = &v411[8 * v407];
            v413 = &v411[8 * v410];
            *(_QWORD *)v412 = v401;
            v404 = v412 + 8;
            v414 = (char *)v400[128];
            v415 = (char *)v400[127];
            if (v414 == v415)
            {
              v400[127] = v412;
              v400[128] = v404;
              v400[129] = v413;
            }
            else
            {
              v416 = v414 - v415 - 8;
              if (v416 <= 0x77)
                goto LABEL_620;
              if (&v414[-(v416 & 0xFFFFFFFFFFFFFFF8) - 8] < v412
                && &v406[(_QWORD)v411 - (v416 & 0xFFFFFFFFFFFFFFF8) - 8] < v414)
              {
                goto LABEL_620;
              }
              v418 = (v416 >> 3) + 1;
              v419 = &v411[8 * v407 - 16];
              v420 = v414 - 32;
              v421 = v418 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v423 = *(_OWORD *)v420;
                v422 = *((_OWORD *)v420 + 1);
                *(_OWORD *)v420 = 0uLL;
                *((_OWORD *)v420 + 1) = 0uLL;
                v420 -= 32;
                *((_OWORD *)v419 - 1) = v423;
                *(_OWORD *)v419 = v422;
                v419 -= 32;
                v421 -= 4;
              }
              while (v421);
              v412 -= 8 * (v418 & 0x3FFFFFFFFFFFFFFCLL);
              v414 -= 8 * (v418 & 0x3FFFFFFFFFFFFFFCLL);
              if (v418 != (v418 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_620:
                do
                {
                  v424 = *((_QWORD *)v414 - 1);
                  v414 -= 8;
                  *(_QWORD *)v414 = 0;
                  *((_QWORD *)v412 - 1) = v424;
                  v412 -= 8;
                }
                while (v414 != v415);
              }
              v414 = (char *)v400[127];
              v425 = (char *)v400[128];
              v400[127] = v412;
              v400[128] = v404;
              v400[129] = v413;
              while (v425 != v414)
              {
                v428 = *((_QWORD *)v425 - 1);
                v425 -= 8;
                v427 = v428;
                *(_QWORD *)v425 = 0;
                if (v428)
                {
                  v429 = *(_QWORD **)(v427 + 56);
                  if (v429)
                  {
                    v430 = v272;
                    v431 = *(_QWORD **)(v427 + 64);
                    v426 = *(_QWORD *)(v427 + 56);
                    if (v431 != v429)
                    {
                      do
                      {
                        v433 = (void (***)(_QWORD, uint64_t))*--v431;
                        v432 = v433;
                        *v431 = 0;
                        if (v433)
                        {
                          (**v432)(v432, v426);
                          if ((v434 & 1) == 0
                          {
                            v435 = operator new();
                            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v435, "VectorKitLabels", 0x5ED09DD50000000FLL);
                          }
                          (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v432, 120);
                        }
                      }
                      while (v431 != v429);
                      v426 = *(_QWORD *)(v427 + 56);
                    }
                    *(_QWORD *)(v427 + 64) = v429;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v427 + 80) + 40))(*(_QWORD *)(v427 + 80), v426, *(_QWORD *)(v427 + 72) - v426);
                    v272 = v430;
                  }
                  MEMORY[0x1A1AF4E00](v427, 0x1020C4010FC18DELL);
                }
              }
            }
            if (v414)
              operator delete(v414);
            v399 = v473;
          }
          else
          {
            *v402 = v401;
            v404 = v402 + 1;
          }
          v400[128] = v404;
          ++v399;
        }
        while (v399 != v274);
        if (!v272)
          goto LABEL_4;
        do
        {
          v438 = *--v274;
          v437 = v438;
          *v274 = 0;
          if (v438)
          {
            v439 = *(_QWORD **)(v437 + 56);
            if (v439)
            {
              v440 = *(_QWORD **)(v437 + 64);
              v436 = *(_QWORD *)(v437 + 56);
              if (v440 != v439)
              {
                do
                {
                  v442 = (void (***)(_QWORD, uint64_t))*--v440;
                  v441 = v442;
                  *v440 = 0;
                  if (v442)
                  {
                    (**v441)(v441, v436);
                    if ((v443 & 1) == 0
                    {
                      v444 = operator new();
                      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v444, "VectorKitLabels", 0x5ED09DD50000000FLL);
                    }
                    (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v441, 120);
                  }
                }
                while (v440 != v439);
                v436 = *(_QWORD *)(v437 + 56);
              }
              *(_QWORD *)(v437 + 64) = v439;
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v437 + 80) + 40))(*(_QWORD *)(v437 + 80), v436, *(_QWORD *)(v437 + 72) - v436);
            }
            MEMORY[0x1A1AF4E00](v437, 0x1020C4010FC18DELL);
          }
        }
        while (v274 != v272);
      }
      operator delete(v272);
LABEL_4:
      result = std::__hash_table<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,geo::StdAllocator<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,mdm::Allocator>>::~__hash_table(&v474);
      v5 = v465;
      v461 = (uint64_t *)*v461;
    }
    while (v461);
  }
  return result;
}

void sub_19FD1A158(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  std::__hash_table<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,geo::StdAllocator<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,mdm::Allocator>>::~__hash_table((uint64_t *)(v2 - 168));
  v4 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::RoadRibbonDescriptor>::batch(std::unordered_map<md::RoadBatchKey,std::vector<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,geo::StdAllocator<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::RoadBatchKey,std::vector<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,geo::StdAllocator<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::RoadRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::RoadRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(int8x16_t *a1, int8x16_t *a2)
{
  int8x16_t *v2;
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *i64;
  int8x16_t *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int8x16_t *i;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  void (***v19)(_QWORD, uint64_t);
  void (***v20)(_QWORD, uint64_t);
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  void (***v26)(_QWORD, uint64_t);
  void (***v27)(_QWORD, uint64_t);
  unsigned __int8 v28;
  uint64_t v29;
  int8x16_t *v30;
  uint64_t v31;
  uint64_t v32;
  int8x16_t v33;
  int8x16_t *v34;
  int v35;

  v2 = a2;
  v4 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = a2[-1].i64[1];
      v7 = a1->i64[0];
      if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v6 + 96), a1->i64[0]))
      {
        a1->i64[0] = v6;
        v2[-1].i64[1] = v7;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], &a2[-1].i64[1]);
      return 1;
    case 4:
      v30 = a1 + 1;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], a1[1].i64);
      v31 = v2[-1].i64[1];
      v32 = a1[1].i64[0];
      if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v31 + 96), v32))
      {
        v30->i64[0] = v31;
        v2[-1].i64[1] = v32;
        if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v30->i64[0] + 96), a1->i64[1]))
        {
          v33 = *(int8x16_t *)((char *)a1 + 8);
          *(int8x16_t *)((char *)a1 + 8) = vextq_s8(v33, v33, 8uLL);
          if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v33.i64[1] + 96), a1->i64[0]))
          {
            *a1 = vextq_s8(*a1, *a1, 8uLL);
          }
        }
      }
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], a1[1].i64, &a1[1].i64[1], &a2[-1].i64[1]);
      return 1;
    default:
      i64 = a1[1].i64;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], a1[1].i64);
      v9 = (int8x16_t *)((char *)a1 + 24);
      if (&a1[1].u64[1] == (unint64_t *)v2)
        return 1;
      v10 = 0;
      v34 = v2;
      break;
  }
  while (1)
  {
    v12 = v9->i64[0];
    v13 = *i64;
    if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v9->i64[0] + 96), *i64))
    {
      v35 = v10;
      v14 = 0;
      v9->i64[0] = 0;
      for (i = v9; ; v14 = i->i64[0])
      {
        i->i64[0] = v13;
        i = (int8x16_t *)i64;
        *i64 = 0;
        if (v14)
        {
          v16 = *(_QWORD **)(v14 + 56);
          if (v16)
          {
            v17 = *(_QWORD **)(v14 + 64);
            v18 = *(_QWORD *)(v14 + 56);
            if (v17 != v16)
            {
              do
              {
                v20 = (void (***)(_QWORD, uint64_t))*--v17;
                v19 = v20;
                *v17 = 0;
                if (v20)
                {
                  (**v19)(v19, v18);
                  {
                    v22 = operator new();
                    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v22, "VectorKitLabels", 0x5ED09DD50000000FLL);
                  }
                  (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v19, 120);
                }
              }
              while (v17 != v16);
              v18 = *(_QWORD *)(v14 + 56);
            }
            *(_QWORD *)(v14 + 64) = v16;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v14 + 80) + 40))(*(_QWORD *)(v14 + 80), v18, *(_QWORD *)(v14 + 72) - v18);
          }
          MEMORY[0x1A1AF4E00](v14, 0x1020C4010FC18DELL);
        }
        if (i == a1)
          break;
        i64 = &i[-1].i64[1];
        v13 = i[-1].i64[1];
        if (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v12 + 96), v13))goto LABEL_30;
      }
      i = a1;
LABEL_30:
      v23 = i->i64[0];
      i->i64[0] = v12;
      v2 = v34;
      if (v23)
      {
        v24 = *(_QWORD **)(v23 + 56);
        if (v24)
        {
          v25 = *(_QWORD **)(v23 + 64);
          v11 = *(_QWORD *)(v23 + 56);
          if (v25 != v24)
          {
            do
            {
              v27 = (void (***)(_QWORD, uint64_t))*--v25;
              v26 = v27;
              *v25 = 0;
              if (v27)
              {
                (**v26)(v26, v11);
                {
                  v29 = operator new();
                  mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v29, "VectorKitLabels", 0x5ED09DD50000000FLL);
                }
                (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                                 + 40))(mdm::Allocator::instance(void)::alloc, v26, 120);
              }
            }
            while (v25 != v24);
            v11 = *(_QWORD *)(v23 + 56);
          }
          *(_QWORD *)(v23 + 64) = v24;
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v23 + 80) + 40))(*(_QWORD *)(v23 + 80), v11, *(_QWORD *)(v23 + 72) - v11);
        }
        MEMORY[0x1A1AF4E00](v23, 0x1020C4010FC18DELL);
      }
      v10 = v35 + 1;
      if (v35 == 7)
        return &v9->u64[1] == (unint64_t *)v34;
    }
    i64 = (uint64_t *)v9;
    v9 = (int8x16_t *)((char *)v9 + 8);
    if (v9 == v2)
      return 1;
  }
}

uint64_t md::RoadLayer::RoadLayer(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, char *a6, int a7)
{
  char v7;
  uint64_t v8;
  int v13;
  char v14;
  const void *v15;
  int64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *__ptr32 *v20;
  char *__ptr32 *v21;
  char *v22;
  char *v23;
  char *v24;
  _QWORD *v25;
  _QWORD **v26;
  _QWORD **v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  float v43;
  float v44;
  float *v45;
  float v46;
  char *v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  char *v53;
  uint64_t v54;
  double v55;
  float v56;
  float v57;
  unint64_t v58;
  float v59;
  float v60;
  unint64_t v61;
  float *v62;
  float v63;
  float v64;
  float *v65;
  unint64_t v66;
  float v67;
  float v68;
  BOOL v69;
  float v70;
  float v71;
  float v72;
  float v73;
  double v74;
  uint64_t v75;
  unint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  _BYTE *v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  _OWORD *v87;
  char *v88;
  uint64_t v89;
  __int128 v90;
  char *v91;
  gdc::GlobeTileGrid *v92;
  gdc::GlobeTileGrid *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  float *v103;
  unsigned int v104;
  float v105;
  unsigned int v106;
  unsigned int v107;
  float *v108;
  float v109;
  float v110;
  unint64_t v111;
  unint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *p_shared_owners;
  std::__shared_count v120;
  unsigned __int8 v121;
  char *v122;
  unint64_t *v123;
  __int128 v124;
  unsigned __int8 v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  unint64_t v134;
  char *v135;
  _QWORD *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  _BYTE *v144;
  uint64_t *v145;
  unint64_t v146;
  uint64_t v147;
  _OWORD *v148;
  char *v149;
  uint64_t v150;
  __int128 v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  _QWORD *v167;
  _QWORD *v168;
  uint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  _QWORD *v176;
  int v177;
  uint64_t v178;
  geo::read_write_lock *v179;
  const char *v180;
  malloc_zone_t *zone;
  int v182;
  uint64_t v183;
  geo::read_write_lock *v184;
  const char *v185;
  malloc_zone_t *v186;
  uint64_t v187;
  unint64_t *v188;
  unint64_t v189;
  uint64_t v190;
  unint64_t *v191;
  unint64_t v192;
  uint64_t v193;
  float v194;
  uint64_t v195;
  uint64_t v196;
  _QWORD *v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  int8x16_t v213;
  unint64_t v214;
  char *v215;
  unint64_t v216;
  int32x2_t v217;
  unint64_t v218;
  float v219;
  float32x2_t v220;
  uint64_t v221;
  uint64_t v222;
  int8x16_t v223;
  int32x4_t *v224;
  float32x4_t v225;
  unint64_t v226;
  float32x4_t v227;
  const float *i32;
  int32x4_t v229;
  int32x4_t v230;
  int32x4_t v231;
  int8x16_t v232;
  float32x4_t v233;
  float32x4_t v234;
  float32x4_t v235;
  float32x4_t v236;
  float32x4_t v237;
  unint64_t v238;
  _QWORD *v239;
  float32x2_t v240;
  float32x2_t v241;
  double v242;
  float v243;
  unint64_t v244;
  float v245;
  float v246;
  float v247;
  float *v248;
  unint64_t v249;
  float v250;
  float v251;
  float v253;
  float v254;
  float v255;
  int v256;
  uint64_t v257;
  float v258;
  float v259;
  int v260;
  float v261;
  float v262;
  int v263;
  float32x4_t v264;
  float32x4_t v265;
  float v266;
  int v267;
  float v268;
  float v269;
  int v270;
  float32x4_t v271;
  float32x4_t v272;
  uint64_t v273;
  float v274;
  float v275;
  float v276;
  float v277;
  float v278;
  int v279;
  float v280;
  float v281;
  int v282;
  float32x4_t v283;
  float32x4_t v284;
  float v285;
  float *v286;
  float v287;
  float v288;
  float *v289;
  unint64_t v290;
  float v291;
  float v292;
  float v294;
  float v295;
  float v296;
  char *v297;
  float v298;
  float v299;
  float v300;
  float v301;
  float v302;
  float v303;
  int v304;
  float v305;
  float v306;
  double v307;
  float v308;
  unint64_t v309;
  uint64_t v310;
  float v311;
  float v312;
  int v313;
  float v314;
  float v315;
  int v316;
  __float2 v317;
  float32x4_t v318;
  float32x4_t v319;
  float *v320;
  float *v321;
  char *v322;
  float v323;
  float v324;
  float v325;
  float v326;
  float v327;
  float v328;
  float v329;
  float v330;
  float v331;
  float v332;
  float v333;
  float v334;
  float v335;
  float v336;
  float v337;
  float v338;
  float v339;
  float v340;
  float v341;
  float v342;
  float v343;
  float v344;
  double v345;
  float v346;
  float v347;
  int v348;
  float v349;
  float v350;
  int v351;
  float v352;
  float v353;
  int v354;
  float32x4_t v355;
  float32x4_t v356;
  uint64_t v357;
  uint64_t v358;
  float32x4_t v359;
  float32x4_t v360;
  float32x4_t v361;
  unint64_t v362;
  unint64_t v363;
  unint64_t v364;
  int16x8_t v365;
  uint64_t v366;
  unint64_t v367;
  uint64_t v368;
  _WORD *v369;
  uint64_t v370;
  unint64_t v371;
  unint64_t v372;
  _WORD *v373;
  __int16 v374;
  unint64_t v375;
  __int16 v376;
  __int16 v377;
  unint64_t v378;
  unint64_t v379;
  _WORD *v380;
  unint64_t v381;
  int64x2_t v382;
  int64x2_t v383;
  int64x2_t v384;
  int64x2_t v385;
  int64x2_t v386;
  int64x2_t v387;
  __int16 *v388;
  unint64_t v389;
  unint64_t v390;
  unint64_t v391;
  unsigned __int8 v393;
  _QWORD *v394;
  _QWORD *v395;
  uint64_t v396;
  _QWORD *v397;
  _QWORD *v398;
  malloc_zone_t *v399;
  void (***v400)(_QWORD, _QWORD *);
  void (***v401)(_QWORD, _QWORD *);
  unsigned __int8 v402;
  uint64_t v403;
  geo::read_write_lock *v404;
  const char *v405;
  uint64_t v406;
  geo::read_write_lock *v407;
  const char *v408;
  malloc_zone_t *v409;
  uint64_t result;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  _QWORD *v423;
  _QWORD *v424;
  _QWORD *v426;
  uint64_t *v427;
  QuadTile *v428;
  QuadTile *v429;
  uint64_t *v430;
  _WORD *v431;
  uint64_t *v432;
  _WORD *v433;
  void **v434;
  uint64_t v435;
  char *v436;
  char *v437;
  float v438;
  _QWORD **v439;
  uint64_t v440;
  float v441;
  char *v442;
  uint64_t v443;
  float v444;
  _QWORD *v445;
  unint64_t v446;
  float v447;
  char *v448;
  float v449;
  float v450;
  char __pd;
  char *__p;
  char *__pa;
  float __pb;
  float __pc;
  char v456;
  uint64_t *v457;
  std::vector<unsigned int> v458;
  void *v459[3];
  _BYTE v460[32];
  __int128 v461;
  uint64_t v462;
  std::vector<unsigned int> v463;
  unint64_t v464;
  int16x8x2_t v465;
  float32x4x3_t v466;

  v13 = a6[24];
  if (a6[24])
  {
    v7 = a6[1];
    v14 = *a6;
    v8 = *(_QWORD *)(a6 + 4);
  }
  else
  {
    v14 = 0;
  }
  md::RibbonLayer<md::Ribbons::RoadRibbonDescriptor>::batch((uint64_t *)&v461, *(uint64_t **)(a3 + 16), a4, a5, a7);
  a1[1] = 0;
  *a1 = &off_1E42AF308;
  a1[2] = 0;
  a1[3] = 0;
  v15 = (const void *)v461;
  v16 = *((_QWORD *)&v461 + 1) - v461;
  v456 = v14;
  if (*((_QWORD *)&v461 + 1) == (_QWORD)v461)
  {
    v436 = 0;
    v19 = 0;
  }
  else
  {
    if (v16 < 0)
      abort();
    __pd = v7;
    v17 = (char *)operator new(*((_QWORD *)&v461 + 1) - v461);
    a1[1] = v17;
    a1[2] = v17;
    v18 = &v17[8 * (v16 >> 3)];
    a1[3] = v18;
    v19 = v17;
    memcpy(v17, v15, v16);
    v436 = v18;
    a1[2] = v18;
    v7 = __pd;
  }
  v430 = a4;
  v432 = a5;
  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_BYTE *)a1 + 112) = a7;
  a1[15] = 0;
  *((_BYTE *)a1 + 128) = 0;
  v428 = (QuadTile *)(a1 + 16);
  v434 = (void **)(a1 + 4);
  *((_BYTE *)a1 + 152) = 0;
  if (v13)
  {
    *((_BYTE *)a1 + 128) = v456;
    *((_BYTE *)a1 + 129) = v7;
    *(_QWORD *)((char *)a1 + 132) = v8;
    *((_BYTE *)a1 + 152) = 1;
  }
  v20 = &off_19FFB1000;
  v21 = &off_19FFB1000;
  v426 = a1;
  if (v19 == v436)
  {
    v24 = 0;
    __pa = 0;
    if (!a7)
      goto LABEL_117;
    goto LABEL_96;
  }
  v22 = v19;
  v23 = 0;
  v24 = 0;
  v442 = 0;
  while (2)
  {
    v437 = v22;
    v25 = *(_QWORD **)v22;
    v25[1] = a1;
    v26 = (_QWORD **)v25[127];
    v27 = (_QWORD **)v25[128];
    v439 = v27;
    while (v26 != v27)
    {
      v445 = v26;
      v448 = v24;
      __p = v23;
      v28 = *v26;
      v28[1] = **v26;
      v28[3] = v28[2];
      v28[5] = v28[4];
      memset(v460, 0, 24);
      memset(&v463, 0, sizeof(v463));
      v30 = (uint64_t *)v28[7];
      v29 = (uint64_t *)v28[8];
      if (v30 != v29)
      {
        v457 = (uint64_t *)v28[8];
        do
        {
          v38 = *v30;
          v459[0] = (void *)1;
          md::Ribbons::RibbonWriter<md::Ribbons::DaVinciTrafficRibbonDescriptor>::eliminateDuplicates(v38, (uint64_t)v460, &v463, (uint64_t *)v459);
          v39 = v459[0];
          if (v459[0] >= (void *)2)
          {
            v40 = *(_QWORD *)v460;
            if (*(_BYTE *)(v38 + 98))
            {
              v41 = 0;
              v42 = 0;
              v43 = *(float *)(v38 + 100);
              v44 = *(float *)(v38 + 104);
            }
            else
            {
              v45 = (float *)(*(_QWORD *)v460 + 12);
              v46 = **(float **)v460;
              v47 = (char *)v459[0] - 1;
              while (1)
              {
                if (vabds_f32(*v45, v46) >= 1.0e-10)
                {
                  v50 = v45[1] - *(float *)(*(_QWORD *)v460 + 4);
                  goto LABEL_35;
                }
                v48 = *(float *)(*(_QWORD *)v460 + 4);
                v49 = v45[1];
                if (vabds_f32(v49, v48) >= 1.0e-10)
                  break;
                v45 += 3;
                if (!--v47)
                {
                  v44 = 0.0;
                  v43 = 1.0;
                  goto LABEL_36;
                }
              }
              v50 = v49 - v48;
LABEL_35:
              v51 = *v45 - v46;
              v52 = 1.0 / sqrtf((float)(v51 * v51) + (float)(v50 * v50));
              v43 = v52 * v51;
              v44 = v52 * v50;
LABEL_36:
              v41 = 2;
              v42 = 1;
            }
            v53 = (char *)v459[0] - 1;
            if ((void *)v42 < (char *)v459[0] - 1)
            {
              v54 = *(_QWORD *)v460 + 12 * v42 + 16;
              do
              {
                v59 = v43;
                v60 = v44;
                v61 = v42++;
                if (v42 < (unint64_t)v39)
                {
                  v62 = (float *)(v40 + 12 * v61);
                  v63 = *v62;
                  v64 = v62[1];
                  v65 = (float *)v54;
                  v66 = v42;
                  while (1)
                  {
                    v67 = *(v65 - 1);
                    v68 = vabds_f32(*v65, v64);
                    v69 = vabds_f32(v67, v63) < 1.0e-10 && v68 < 1.0e-10;
                    if (!v69)
                      break;
                    ++v66;
                    v65 += 3;
                    if (v66 >= (unint64_t)v39)
                      goto LABEL_52;
                  }
                  v70 = v67 - v63;
                  v71 = *v65 - v64;
                  v72 = 1.0 / sqrtf((float)(v70 * v70) + (float)(v71 * v71));
                  v43 = v72 * v70;
                  v44 = v72 * v71;
                }
LABEL_52:
                v73 = atan2f(v44, v43);
                v56 = v73 - atan2f(v60, v59);
                v74 = v56;
                if (v56 > 3.14159265)
                {
                  v55 = v74 + -6.28318531;
                }
                else
                {
                  if (v74 >= -3.14159265)
                    goto LABEL_41;
                  v55 = v74 + 6.28318531;
                }
                v56 = v55;
LABEL_41:
                v57 = fmaxf(ceilf(fabsf(v56) * 1.2732), 1.0);
                v58 = 2;
                if ((unint64_t)v57 >= 2)
                  v58 = 2 * (unint64_t)v57;
                v41 += v58;
                v54 += 12;
              }
              while ((char *)v42 != v53);
            }
            v75 = 2;
            if (*(_BYTE *)(v38 + 96))
              v75 = 4;
            v76 = v75 + v41;
            if (*(_BYTE *)(v38 + 97))
              v76 += 2;
            if (v76 < 0x10000)
            {
              v31 = 3 * v76 + *(_QWORD *)(v38 + 24);
              if (*(_BYTE *)(v38 + 96))
                v32 = -1;
              else
                v32 = 0;
              v33 = ((v76 + 2 * (v32 - (*(_BYTE *)(v38 + 97) != 0))) & 0xFFFFFFFFFFFFFFFELL) + *(_QWORD *)(v38 + 40);
              v34 = *(_QWORD *)(v38 + 8) + v76;
              v35 = v31 - 6;
              v36 = v33 - 2;
            }
            else
            {
              v34 = *(_QWORD *)(v38 + 8);
              v35 = *(_QWORD *)(v38 + 24);
              v36 = *(_QWORD *)(v38 + 40);
            }
            v29 = v457;
            *(_QWORD *)(v38 + 16) = v34;
            *(_QWORD *)(v38 + 32) = v35;
            *(_QWORD *)(v38 + 48) = v36;
          }
          v37 = (_QWORD *)*v30++;
          v28[1] = v37[2] + v28[1] - v37[1];
          v28[3] = v37[4] + v28[3] - v37[3];
          v28[5] = v37[6] + v28[5] - v37[5];
        }
        while (v30 != v29);
        if (v463.__begin_)
          operator delete(v463.__begin_);
      }
      if (*(_QWORD *)v460)
        operator delete(*(void **)v460);
      v77 = v445;
      v78 = *v445;
      a1 = v426;
      if (v448 < v442)
      {
        *(_QWORD *)v448 = v78;
        v24 = v448 + 8;
        v23 = __p;
        goto LABEL_15;
      }
      v79 = (v448 - __p) >> 3;
      v80 = v79 + 1;
      if ((unint64_t)(v79 + 1) >> 61)
        abort();
      if ((v442 - __p) >> 2 > v80)
        v80 = (v442 - __p) >> 2;
      if ((unint64_t)(v442 - __p) >= 0x7FFFFFFFFFFFFFF8)
        v81 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v81 = v80;
      if (v81)
      {
        if (v81 >> 61)
LABEL_382:
          std::__throw_bad_array_new_length[abi:nn180100]();
        v82 = operator new(8 * v81);
      }
      else
      {
        v82 = 0;
      }
      v23 = &v82[8 * v79];
      *(_QWORD *)v23 = v78;
      v24 = v23 + 8;
      if (v448 != __p)
      {
        v83 = v448 - 8 - __p;
        if (v83 < 0x168)
        {
          v84 = v448;
          goto LABEL_79;
        }
        if (&v82[v448 - __p - 8 - (v83 & 0xFFFFFFFFFFFFFFF8)] > &v82[v448 - __p - 8])
        {
          v84 = v448;
          do
          {
LABEL_79:
            v85 = *((_QWORD *)v84 - 1);
            v84 -= 8;
            *((_QWORD *)v23 - 1) = v85;
            v23 -= 8;
          }
          while (v84 != __p);
          goto LABEL_80;
        }
        if (&v448[-(v83 & 0xFFFFFFFFFFFFFFF8) - 8] > v448 - 8)
        {
          v84 = v448;
          goto LABEL_79;
        }
        if ((unint64_t)(__p - v82) < 0x20)
        {
          v84 = v448;
          goto LABEL_79;
        }
        v86 = (v83 >> 3) + 1;
        v84 = &v448[-8 * (v86 & 0x3FFFFFFFFFFFFFFCLL)];
        v87 = &v82[8 * v79 - 16];
        v88 = v448 - 16;
        v89 = v86 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v90 = *(_OWORD *)v88;
          *(v87 - 1) = *((_OWORD *)v88 - 1);
          *v87 = v90;
          v87 -= 2;
          v88 -= 32;
          v89 -= 4;
        }
        while (v89);
        v23 -= 8 * (v86 & 0x3FFFFFFFFFFFFFFCLL);
        if (v86 != (v86 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_79;
      }
LABEL_80:
      v442 = &v82[8 * v81];
      if (__p)
        operator delete(__p);
      v77 = v445;
LABEL_15:
      v26 = (_QWORD **)(v77 + 1);
      v27 = v439;
    }
    v22 = v437 + 8;
    if (v437 + 8 != v436)
      continue;
    break;
  }
  __pa = v23;
  v20 = &off_19FFB1000;
  v21 = &off_19FFB1000;
  if (!*((_BYTE *)a1 + 112))
    goto LABEL_117;
LABEL_96:
  v91 = __pa;
  v92 = (gdc::GlobeTileGrid *)operator new();
  v93 = v92;
  if (*((_BYTE *)a1 + 152))
  {
    gdc::GlobeTileGrid::GlobeTileGrid(v92, v428);
    v94 = a1[15];
    a1[15] = v93;
    if (v94)
    {
      v95 = *(_QWORD *)(v94 + 2584);
      if (v95)
        MEMORY[0x1A1AF4DE8](v95, 0x1000C8000313F17);
      MEMORY[0x1A1AF4E00](v94, 0x1020C4007FF0C4BLL);
      v93 = (gdc::GlobeTileGrid *)a1[15];
    }
    *((_QWORD *)v93 + 323) = operator new[]();
    if (__pa != v24)
    {
      do
      {
        v96 = *(uint64_t **)(*(_QWORD *)v91 + 56);
        v97 = *(uint64_t **)(*(_QWORD *)v91 + 64);
        while (v96 != v97)
        {
          v98 = *v96;
          if (!*(_QWORD *)(*v96 + 80))
          {
            v99 = *(_QWORD *)(v98 + 88);
            if (v99)
            {
              v100 = *(_QWORD *)(v98 + 72);
              v101 = a1[15];
              v102 = *(_QWORD *)(v101 + 2584);
              v103 = (float *)(v100 + 4);
              v104 = 1;
              do
              {
                v105 = *(float *)(v101 + 2592) * v103[1];
                v106 = vcvts_n_u32_f32(*(v103 - 1), 2uLL);
                if (v106 >= 3)
                  v106 = 3;
                v107 = vcvts_n_u32_f32(*v103, 2uLL);
                if (v107 >= 3)
                  v107 = 3;
                v108 = (float *)(v102 + 8 * (v106 | (4 * v107)));
                v109 = fminf(v105, *v108);
                v110 = fmaxf(v108[1], v105);
                *v108 = v109;
                v108[1] = v110;
                v103 += 3;
                v69 = v99 > v104++;
              }
              while (v69);
            }
          }
          ++v96;
        }
        v91 += 8;
      }
      while (v91 != v24);
    }
    gdc::GlobeTileGrid::endBuildingHeightRange((gdc::GlobeTileGrid *)a1[15]);
LABEL_117:
    v111 = 0;
    v112 = 0;
    v113 = v24;
    v114 = 0;
    v115 = 0;
    v116 = __pa;
    v117 = (v113 - __pa) >> 3;
    v446 = v117;
    while (2)
    {
      if (v112 == v117
        || (unint64_t)(*(_QWORD *)(*(_QWORD *)&v116[8 * v112] + 8) + v115 - **(_QWORD **)&v116[8 * v112]) >= 0x10000)
      {
        v118 = (std::__shared_weak_count *)operator new(0xF8uLL);
        v118->__shared_owners_ = 0;
        p_shared_owners = (unint64_t *)&v118->__shared_owners_;
        v118->__shared_weak_owners_ = 0;
        v118[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B5748;
        v118->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E04B8;
        v118[1].__shared_owners_ = 16;
        LODWORD(v118[1].__shared_weak_owners_) = 1;
        v118[2].__vftable = 0;
        v118[2].__shared_owners_ = 0;
        v118[2].__shared_weak_owners_ = 0;
        v118[3].__vftable = (std::__shared_weak_count_vtbl *)(16 * v115);
        v120 = (std::__shared_count)0;
        *(_OWORD *)&v118[3].__shared_owners_ = 0u;
        v118[4].std::__shared_count = 0u;
        v118[4].__shared_weak_owners_ = 0;
        if ((v121 & 1) == 0)
        {
          v120 = (std::__shared_count)0;
          if (v177)
          {
            v178 = operator new();
            *(_QWORD *)(v178 + 16) = 0xA3D02C1100000005;
            *(_QWORD *)(v178 + 24) = "GeoGL";
            *(_OWORD *)(v178 + 32) = xmmword_19FFB2DE0;
            *(_QWORD *)v178 = &off_1E42B5668;
            *(_QWORD *)(v178 + 8) = "GeoGL";
            *(_OWORD *)(v178 + 72) = 0u;
            *(_OWORD *)(v178 + 88) = 0u;
            *(_OWORD *)(v178 + 104) = 0u;
            *(_OWORD *)(v178 + 120) = 0u;
            *(_OWORD *)(v178 + 136) = 0u;
            *(_OWORD *)(v178 + 152) = 0u;
            *(_OWORD *)(v178 + 168) = 0u;
            *(_OWORD *)(v178 + 184) = 0u;
            *(_OWORD *)(v178 + 200) = 0u;
            *(_OWORD *)(v178 + 216) = 0u;
            *(_OWORD *)(v178 + 232) = 0u;
            *(_QWORD *)(v178 + 248) = 0;
            *(_OWORD *)(v178 + 56) = 0u;
            v179 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v178 + 56), 0);
            if ((_DWORD)v179)
              geo::read_write_lock::logFailure(v179, (uint64_t)"initialization", v180);
            zone = malloc_create_zone(0, 0);
            *(_QWORD *)(v178 + 48) = zone;
            malloc_set_zone_name(zone, "GeoGL");
            *(_QWORD *)(v178 + 256) = os_log_create("com.apple.VectorKit", "Memory");
            ggl::Allocator::instance(void)::alloc = v178;
            v120 = (std::__shared_count)0;
          }
        }
        v118[5].__vftable = (std::__shared_weak_count_vtbl *)ggl::Allocator::instance(void)::alloc;
        v118[5].__shared_owners_ = 0;
        *((std::__shared_count *)v118 + 11) = v120;
        v118[8].std::__shared_count = v120;
        v118[8].__shared_weak_owners_ = 0;
        v118[9].__vftable = (std::__shared_weak_count_vtbl *)-1;
        *((std::__shared_count *)v118 + 10) = v120;
        v118[6].std::__shared_count = (std::__shared_count)xmmword_19FFB2DD0;
        LODWORD(v118[5].__shared_weak_owners_) = 0;
        v118[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B81A0;
        v118[9].__shared_weak_owners_ = (uint64_t)"BatchType/VData";
        v118[10].__vftable = (std::__shared_weak_count_vtbl *)&ggl::Ribbon::defaultVboReflection;
        v118[9].__shared_owners_ = (uint64_t)&unk_1E42B81C0;
        v122 = (char *)operator new(0xF8uLL);
        *((_QWORD *)v122 + 1) = 0;
        v123 = (unint64_t *)(v122 + 8);
        *((_QWORD *)v122 + 2) = 0;
        *((_QWORD *)v122 + 3) = &off_1E42B5748;
        *(_QWORD *)v122 = &off_1E42DF1E8;
        *((_QWORD *)v122 + 4) = 2;
        *((_DWORD *)v122 + 10) = 257;
        *((_QWORD *)v122 + 6) = 0;
        *((_QWORD *)v122 + 7) = 0;
        *((_QWORD *)v122 + 8) = 0;
        *((_QWORD *)v122 + 9) = 2 * v114;
        v124 = 0uLL;
        *((_OWORD *)v122 + 5) = 0u;
        *((_OWORD *)v122 + 6) = 0u;
        *((_QWORD *)v122 + 14) = 0;
        if ((v125 & 1) == 0)
        {
          v124 = 0uLL;
          if (v182)
          {
            v183 = operator new();
            *(_QWORD *)(v183 + 16) = 0xA3D02C1100000005;
            *(_QWORD *)(v183 + 24) = "GeoGL";
            *(_OWORD *)(v183 + 32) = xmmword_19FFB2DE0;
            *(_QWORD *)v183 = &off_1E42B5668;
            *(_QWORD *)(v183 + 8) = "GeoGL";
            *(_OWORD *)(v183 + 72) = 0u;
            *(_OWORD *)(v183 + 88) = 0u;
            *(_OWORD *)(v183 + 104) = 0u;
            *(_OWORD *)(v183 + 120) = 0u;
            *(_OWORD *)(v183 + 136) = 0u;
            *(_OWORD *)(v183 + 152) = 0u;
            *(_OWORD *)(v183 + 168) = 0u;
            *(_OWORD *)(v183 + 184) = 0u;
            *(_OWORD *)(v183 + 200) = 0u;
            *(_OWORD *)(v183 + 216) = 0u;
            *(_OWORD *)(v183 + 232) = 0u;
            *(_QWORD *)(v183 + 248) = 0;
            *(_OWORD *)(v183 + 56) = 0u;
            v184 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v183 + 56), 0);
            if ((_DWORD)v184)
              geo::read_write_lock::logFailure(v184, (uint64_t)"initialization", v185);
            v186 = malloc_create_zone(0, 0);
            *(_QWORD *)(v183 + 48) = v186;
            malloc_set_zone_name(v186, "GeoGL");
            *(_QWORD *)(v183 + 256) = os_log_create("com.apple.VectorKit", "Memory");
            ggl::Allocator::instance(void)::alloc = v183;
            v124 = 0uLL;
          }
        }
        *((_QWORD *)v122 + 15) = ggl::Allocator::instance(void)::alloc;
        *((_QWORD *)v122 + 16) = 0;
        *((_OWORD *)v122 + 11) = v124;
        *((_OWORD *)v122 + 12) = v124;
        *((_QWORD *)v122 + 26) = 0;
        *((_QWORD *)v122 + 27) = -1;
        *((_OWORD *)v122 + 10) = v124;
        *((_OWORD *)v122 + 9) = xmmword_19FFB2DD0;
        *((_DWORD *)v122 + 34) = 0;
        *((_DWORD *)v122 + 60) = 0;
        *((_QWORD *)v122 + 3) = &off_1E42B6B88;
        *((_QWORD *)v122 + 4) = 2;
        *((_QWORD *)v122 + 28) = &unk_1E42B6BA8;
        *((_QWORD *)v122 + 29) = "BatchType/IData";
        v126 = operator new();
        v127 = v126;
        *(_QWORD *)v460 = v118 + 1;
        *(_QWORD *)&v460[8] = v118;
        do
          v128 = __ldxr(p_shared_owners);
        while (__stxr(v128 + 1, p_shared_owners));
        v463.__begin_ = (std::vector<unsigned int>::pointer)(v122 + 24);
        v463.__end_ = (std::vector<unsigned int>::pointer)v122;
        do
          v129 = __ldxr(v123);
        while (__stxr(v129 + 1, v123));
        ggl::Ribbon::BaseMesh::BaseMesh(v126, (uint64_t)"BatchType/Mesh", (uint64_t *)v460, (uint64_t *)&v463);
        do
          v130 = __ldaxr(v123);
        while (__stlxr(v130 - 1, v123));
        if (v130)
        {
          v131 = *(std::__shared_weak_count **)&v460[8];
          if (!*(_QWORD *)&v460[8])
            goto LABEL_137;
        }
        else
        {
          (*(void (**)(char *))(*(_QWORD *)v122 + 16))(v122);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v122);
          v131 = *(std::__shared_weak_count **)&v460[8];
          if (!*(_QWORD *)&v460[8])
            goto LABEL_137;
        }
        v132 = (unint64_t *)&v131->__shared_owners_;
        do
          v133 = __ldaxr(v132);
        while (__stlxr(v133 - 1, v132));
        if (!v133)
        {
          ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
          std::__shared_weak_count::__release_weak(v131);
        }
LABEL_137:
        v135 = (char *)v426[5];
        v134 = v426[6];
        if ((unint64_t)v135 >= v134)
        {
          v137 = (char *)*v434;
          v138 = v135 - (_BYTE *)*v434;
          v139 = v138 >> 3;
          v140 = (v138 >> 3) + 1;
          if (v140 >> 61)
            abort();
          v141 = v134 - (_QWORD)v137;
          if (v141 >> 2 > v140)
            v140 = v141 >> 2;
          if ((unint64_t)v141 >= 0x7FFFFFFFFFFFFFF8)
            v142 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v142 = v140;
          if (v142)
          {
            v440 = v135 - (_BYTE *)*v434;
            v443 = v138 >> 3;
            if (v142 >> 61)
              goto LABEL_382;
            v143 = v142;
            v144 = operator new(8 * v142);
            v142 = v143;
            v138 = v440;
            v139 = v443;
          }
          else
          {
            v144 = 0;
          }
          v145 = (uint64_t *)&v144[8 * v139];
          *v145 = v127;
          v136 = v145 + 1;
          if (v135 == v137)
          {
            v137 = v135;
          }
          else
          {
            v146 = v135 - 8 - v137;
            if (v146 < 0x58)
              goto LABEL_388;
            if ((unint64_t)(v135 - &v144[v138]) < 0x20)
              goto LABEL_388;
            v147 = (v146 >> 3) + 1;
            v148 = &v144[8 * v139 - 16];
            v149 = v135 - 16;
            v150 = v147 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v151 = *(_OWORD *)v149;
              *(v148 - 1) = *((_OWORD *)v149 - 1);
              *v148 = v151;
              v148 -= 2;
              v149 -= 32;
              v150 -= 4;
            }
            while (v150);
            v145 -= v147 & 0x3FFFFFFFFFFFFFFCLL;
            v135 -= 8 * (v147 & 0x3FFFFFFFFFFFFFFCLL);
            if (v147 != (v147 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_388:
              do
              {
                v152 = *((_QWORD *)v135 - 1);
                v135 -= 8;
                *--v145 = v152;
              }
              while (v135 != v137);
              v137 = (char *)*v434;
            }
          }
          a1 = v426;
          v426[4] = v145;
          v426[5] = v136;
          v426[6] = &v144[8 * v142];
          if (v137)
            operator delete(v137);
        }
        else
        {
          *(_QWORD *)v135 = v127;
          v136 = v135 + 8;
          a1 = v426;
        }
        a1[5] = v136;
        v117 = v446;
        if (v111 < v112)
        {
          v153 = 0;
          v154 = v111;
          do
          {
            v155 = *(_QWORD *)&__pa[8 * v154];
            v156 = *(_QWORD *)(v155 + 32);
            v157 = v156 + v153;
            v158 = *(_QWORD *)(v155 + 40) + v153;
            *(_QWORD *)(v155 + 32) = v157;
            *(_QWORD *)(v155 + 40) = v158;
            v153 = v158 - v156;
            ++v154;
          }
          while (v112 != v154);
          v159 = 0;
          do
          {
            v160 = *(uint64_t **)&__pa[8 * v111];
            v161 = *v160;
            v162 = *v160 + v159;
            v163 = v160[1] + v159;
            *v160 = v162;
            v160[1] = v163;
            v164 = v160[2];
            v165 = v164 + v153;
            v166 = v160[3] + v153;
            v160[2] = v165;
            v160[3] = v166;
            v160[11] = v127;
            v167 = (_QWORD *)v160[7];
            v168 = (_QWORD *)v160[8];
            if (v167 != v168)
            {
              v169 = v160[4];
              do
              {
                v170 = (_QWORD *)*v167++;
                v171 = v170[2] - v170[1];
                v170[1] = v162;
                v162 += v171;
                v172 = v170[4] - v170[3];
                v170[2] = v162;
                v170[3] = v165;
                v165 += v172;
                v173 = v170[6] - v170[5];
                v170[4] = v165;
                v170[5] = v169;
                v169 += v173;
                v170[6] = v169;
              }
              while (v167 != v168);
            }
            v159 = v163 - v161;
            v153 = v166 - v164;
            ++v111;
          }
          while (v111 != v112);
        }
        do
          v174 = __ldaxr(v123);
        while (__stlxr(v174 - 1, v123));
        if (!v174)
        {
          (*(void (**)(char *))(*(_QWORD *)v122 + 16))(v122);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v122);
        }
        v116 = __pa;
        do
          v175 = __ldaxr(p_shared_owners);
        while (__stlxr(v175 - 1, p_shared_owners));
        if (!v175)
        {
          ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
          std::__shared_weak_count::__release_weak(v118);
        }
        v115 = 0;
        v114 = 0;
        v111 = v112;
        v20 = &off_19FFB1000;
        v21 = &off_19FFB1000;
      }
      if (v112 < v117)
      {
        v176 = *(_QWORD **)&v116[8 * v112];
        v115 = v176[1] + v115 - *v176;
        v114 = v176[3] + v114 + v176[5] - (v176[2] + v176[4]);
      }
      if (++v112 <= v117)
        continue;
      break;
    }
    if (v116)
      operator delete(v116);
    if ((_QWORD)v461)
      operator delete((void *)v461);
    *a1 = &off_1E428C800;
    a1[20] = *v430;
    v187 = v430[1];
    a1[21] = v187;
    if (v187)
    {
      v188 = (unint64_t *)(v187 + 8);
      do
        v189 = __ldxr(v188);
      while (__stxr(v189 + 1, v188));
    }
    a1[22] = *v432;
    v190 = v432[1];
    a1[23] = v190;
    if (v190)
    {
      v191 = (unint64_t *)(v190 + 8);
      do
        v192 = __ldxr(v191);
      while (__stxr(v192 + 1, v191));
    }
    a1[24] = 0;
    v193 = a1[1];
    v411 = a1[2];
    if (v193 != v411)
    {
      v194 = 1.0;
      do
      {
        v195 = *(_QWORD *)(*(_QWORD *)v193 + 1016);
        v196 = *(_QWORD *)(*(_QWORD *)v193 + 1024);
        v412 = v193;
        v413 = v196;
        while (v195 != v196)
        {
          v197 = *(_QWORD **)v195;
          v198 = **(_QWORD **)(*(_QWORD *)(*(_QWORD *)v195 + 88) + 64);
          v199 = *(_QWORD *)(v198 + 8);
          v420 = v199 * **(_QWORD **)v195;
          v416 = v199 * *(_QWORD *)(*(_QWORD *)v195 + 8);
          v417 = v198;
          v414 = v195;
          if (v416 == v420)
          {
            v422 = 0;
          }
          else if (a2 && *(_BYTE *)(v198 + 17) != 2)
          {
            v422 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
          }
          else
          {
            v422 = *(_QWORD *)(v198 + 72) + v420;
          }
          v200 = v197;
          v201 = v197[2];
          v203 = v200[4];
          v202 = v200[5];
          if (v202 == v203)
          {
            v202 = v200[3];
          }
          else
          {
            if (v203 < v201)
              v201 = v200[4];
            if (v200[3] > v202)
              v202 = v200[3];
          }
          v424 = v200;
          v418 = *(_QWORD *)(v200[11] + 96);
          v204 = *(_QWORD *)(v418 + 8);
          v419 = v204 * v201;
          v415 = v204 * v202;
          if (v204 * v202 == v204 * v201)
          {
            v421 = 0;
          }
          else if (a2 && *(_BYTE *)(v418 + 17) != 2)
          {
            v421 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 56))(a2, v418, v419);
          }
          else
          {
            v421 = *(_QWORD *)(v418 + 72) + v419;
          }
          v205 = v424[2];
          v206 = v424[4];
          memset(v459, 0, sizeof(v459));
          memset(&v458, 0, sizeof(v458));
          v207 = (uint64_t *)v424[7];
          v423 = v424 + 7;
          v429 = (QuadTile *)v424[8];
          if (v207 != (uint64_t *)v429)
          {
            v208 = v421 + 2 * v206 - 2 * v201;
            v209 = v421 + 2 * v205 - 2 * v201;
            v435 = v422;
            while (1)
            {
              v433 = (_WORD *)v208;
              v211 = *v207;
              *(_OWORD *)v460 = xmmword_19FFB2F60;
              *(_OWORD *)&v460[16] = xmmword_19FFB2F70;
              v212 = *(_QWORD *)(v211 + 16);
              if (v212 != *(_QWORD *)(v211 + 8))
                break;
              v210 = *(_QWORD *)(v211 + 16);
LABEL_224:
              v435 += 16 * (v210 - v212);
              v209 += 2 * (*(_QWORD *)(v211 + 32) - *(_QWORD *)(v211 + 24));
              v208 = (uint64_t)&v433[*(_QWORD *)(v211 + 48) - *(_QWORD *)(v211 + 40)];
              if (++v207 == (uint64_t *)v429)
                goto LABEL_348;
            }
            v431 = (_WORD *)v209;
            v464 = 1;
            md::Ribbons::RibbonWriter<md::Ribbons::DaVinciTrafficRibbonDescriptor>::eliminateDuplicates(v211, (uint64_t)v459, &v458, (uint64_t *)&v464);
            v427 = v207;
            v214 = v464;
            if (v464 >= 2)
            {
              v215 = (char *)v459[0];
              v216 = v464 - 1;
              v217 = *(int32x2_t *)v459[0];
              if (v464 > 9)
              {
                v222 = v216 & 7;
                if ((v216 & 7) == 0)
                  v222 = 8;
                v218 = v216 - v222;
                v213.i64[1] = *(_QWORD *)v459[0];
                v223 = (int8x16_t)vdupq_lane_s32(v217, 0);
                v224 = (int32x4_t *)((char *)v459[0] + 60);
                v225 = 0uLL;
                v226 = v218;
                v227 = 0uLL;
                v221 = v435;
                do
                {
                  i32 = (const float *)v224[-3].i32;
                  v466 = vld3q_f32(i32);
                  v230 = v224[1];
                  v229 = v224[2];
                  v231 = *v224;
                  v224 += 6;
                  v232.i64[0] = __PAIR64__(v231.u32[3], v231.u32[0]);
                  v233 = (float32x4_t)vrev64q_s32(v230);
                  v233.i32[0] = v231.i32[1];
                  v232.i64[1] = __PAIR64__(v229.u32[1], v230.u32[2]);
                  v233.i32[3] = v229.i32[2];
                  v234 = vsubq_f32(v466.val[0], (float32x4_t)vextq_s8(v223, (int8x16_t)v466.val[0], 0xCuLL));
                  v235 = vsubq_f32((float32x4_t)v232, (float32x4_t)vextq_s8((int8x16_t)v466.val[0], v232, 0xCuLL));
                  v236 = vsubq_f32(v466.val[1], (float32x4_t)vextq_s8(v213, (int8x16_t)v466.val[1], 0xCuLL));
                  v466.val[0] = vsubq_f32(v233, (float32x4_t)vextq_s8((int8x16_t)v466.val[1], (int8x16_t)v233, 0xCuLL));
                  v225 = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(v234, v234), v236, v236)), v225);
                  v227 = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(v235, v235), v466.val[0], v466.val[0])), v227);
                  v213 = (int8x16_t)v233;
                  v223 = v232;
                  v226 -= 8;
                }
                while (v226);
                v220 = *(float32x2_t *)((char *)v229.i64 + 4);
                v237 = vaddq_f32(v227, v225);
                v219 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v237, v237));
              }
              else
              {
                v218 = 0;
                v219 = 0.0;
                v220 = *(float32x2_t *)v459[0];
                v221 = v435;
              }
              v238 = v218 + 1;
              v239 = (char *)v459[0] + 12 * v218 + 12;
              do
              {
                v240 = *(float32x2_t *)v239;
                v239 = (_QWORD *)((char *)v239 + 12);
                v241 = vsub_f32(v240, v220);
                v219 = sqrtf(vaddv_f32(vmul_f32(v241, v241))) + v219;
                ++v238;
                v220 = v240;
              }
              while (v464 != v238);
              v242 = v219;
              v243 = v194 / v219;
              if (v242 <= 1.0e-10)
                v243 = 0.0;
              v438 = v243;
              if (*(_BYTE *)(v211 + 98))
              {
                v244 = 0;
                v246 = *(float *)(v211 + 100);
                v245 = *(float *)(v211 + 104);
                v247 = 0.0;
              }
              else
              {
                v248 = (float *)((char *)v459[0] + 16);
                v247 = sqrtf((float)((float)(*((float *)v459[0] + 3) - *(float *)v217.i32)* (float)(*((float *)v459[0] + 3) - *(float *)v217.i32))+ (float)((float)(*((float *)v459[0] + 4) - *(float *)&v217.i32[1])* (float)(*((float *)v459[0] + 4) - *(float *)&v217.i32[1])));
                v249 = v464 - 1;
                do
                {
                  v250 = *(v248 - 1);
                  v251 = vabds_f32(*v248, *(float *)&v217.i32[1]);
                  if (vabds_f32(v250, *(float *)v217.i32) >= 1.0e-10 || v251 >= 1.0e-10)
                  {
                    v253 = v250 - *(float *)v217.i32;
                    v254 = *v248 - *(float *)&v217.i32[1];
                    v255 = v194 / sqrtf((float)(v253 * v253) + (float)(v254 * v254));
                    v246 = v255 * v253;
                    v245 = v255 * v254;
                    goto LABEL_248;
                  }
                  v248 += 3;
                  --v249;
                }
                while (v249);
                v246 = 1.0;
                v245 = 0.0;
LABEL_248:
                v256 = *((_DWORD *)v459[0] + 2);
                v462 = 0;
                *(float *)&v463.__end_cap_.__value_ = -v245;
                *((float *)&v463.__end_cap_.__value_ + 1) = v246;
                v257 = v221;
                if (*(_BYTE *)(v211 + 96))
                {
                  *(float *)&v463.__begin_ = (float)-v245 - v246;
                  *((float *)&v463.__begin_ + 1) = v246 - v245;
                  *(float *)&v463.__end_ = v245 - v246;
                  *((float *)&v463.__end_ + 1) = -(float)(v245 + v246);
                  v461 = xmmword_19FFB2F80;
                  v258 = fmaxf(*(float *)v217.i32, 0.0);
                  if (v258 >= v194)
                    v259 = 65535.0;
                  else
                    v259 = v258 * 65535.0;
                  v260 = (int)v259;
                  v261 = fmaxf(*(float *)&v217.i32[1], 0.0);
                  if (v261 >= v194)
                    v262 = 65535.0;
                  else
                    v262 = v261 * 65535.0;
                  v263 = (int)v262;
                  *(_WORD *)v221 = v260;
                  *(_WORD *)(v221 + 2) = (int)v262;
                  *(_DWORD *)(v221 + 12) = v256;
                  v264.i64[0] = (uint64_t)v463.__begin_;
                  v264.i64[1] = 0xBF8000003F800000;
                  v265.i64[0] = 0xBF000000BF000000;
                  v265.i64[1] = 0xBF000000BF000000;
                  *(int16x4_t *)(v221 + 4) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v265, (float32x4_t)xmmword_19FFB2FA0, v264)));
                  *(_WORD *)(v221 + 16) = v260;
                  *(_WORD *)(v221 + 18) = v263;
                  *(_DWORD *)(v221 + 28) = v256;
                  v264.i64[0] = (uint64_t)v463.__end_;
                  v264.i64[1] = *((_QWORD *)&v461 + 1);
                  v265.i64[0] = 0xBF000000BF000000;
                  v265.i64[1] = 0xBF000000BF000000;
                  *(int16x4_t *)(v221 + 20) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v265, (float32x4_t)xmmword_19FFB2FA0, v264)));
                  v257 = v221 + 32;
                }
                *(float *)&v463.__begin_ = -v245;
                *((float *)&v463.__begin_ + 1) = v246;
                *(float *)&v463.__end_ = v245;
                *((float *)&v463.__end_ + 1) = -v246;
                v461 = xmmword_19FFB2FB0;
                v266 = fmaxf(*(float *)v217.i32, 0.0);
                if (v266 >= v194)
                  *(float *)v217.i32 = 65535.0;
                else
                  *(float *)v217.i32 = v266 * 65535.0;
                v267 = (int)*(float *)v217.i32;
                v268 = fmaxf(*(float *)&v217.i32[1], 0.0);
                if (v268 >= v194)
                  v269 = 65535.0;
                else
                  v269 = v268 * 65535.0;
                v270 = (int)v269;
                *(_WORD *)v257 = v267;
                *(_WORD *)(v257 + 2) = (int)v269;
                *(_DWORD *)(v257 + 12) = v256;
                v271.i64[0] = (uint64_t)v463.__begin_;
                v271.i64[1] = v461;
                v272.i64[0] = 0xBF000000BF000000;
                v272.i64[1] = 0xBF000000BF000000;
                *(int16x4_t *)(v257 + 4) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v272, (float32x4_t)xmmword_19FFB2FA0, v271)));
                *(_WORD *)(v257 + 16) = v267;
                *(_WORD *)(v257 + 18) = v270;
                *(_DWORD *)(v257 + 28) = v256;
                v271.i64[0] = (uint64_t)v463.__end_;
                v271.i64[1] = *((_QWORD *)&v461 + 1);
                v272.i64[0] = 0xBF000000BF000000;
                v272.i64[1] = 0xBF000000BF000000;
                *(int16x4_t *)(v257 + 20) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v272, (float32x4_t)xmmword_19FFB2FA0, v271)));
                v221 = v257 + 32;
                v244 = 1;
              }
              if (v244 >= v216)
              {
                v274 = v245;
                v275 = v246;
              }
              else
              {
                v273 = (uint64_t)&v215[12 * v244 + 16];
                v274 = v245;
                v275 = v246;
                do
                {
                  v286 = (float *)&v215[12 * v244];
                  v288 = *v286;
                  v287 = v286[1];
                  if (++v244 < v214)
                  {
                    v289 = (float *)v273;
                    v290 = v244;
                    do
                    {
                      v291 = *(v289 - 1);
                      v292 = vabds_f32(*v289, v287);
                      if (vabds_f32(v291, v288) >= 1.0e-10 || v292 >= 1.0e-10)
                      {
                        v294 = v291 - v288;
                        v295 = *v289 - v287;
                        v296 = v194 / sqrtf((float)(v294 * v294) + (float)(v295 * v295));
                        v275 = v296 * v294;
                        v274 = v296 * v295;
                        goto LABEL_282;
                      }
                      ++v290;
                      v289 += 3;
                    }
                    while (v290 < v214);
                    v274 = v245;
                    v275 = v246;
                  }
LABEL_282:
                  v297 = v215;
                  v298 = v275 + v246;
                  v299 = v274 + v245;
                  v300 = (float)(v298 * v298) + (float)(v299 * v299);
                  v301 = v245;
                  v302 = v246;
                  if (v300 > 0.0)
                  {
                    v303 = v194 / sqrtf(v300);
                    v302 = -(float)(v299 * v303);
                    v301 = v303 * v298;
                  }
                  v444 = v286[4];
                  v304 = *((_DWORD *)v286 + 2);
                  v441 = v286[3];
                  __pb = v247;
                  *(float *)&v462 = v247;
                  *((float *)&v462 + 1) = v247 * v438;
                  v461 = xmmword_19FFB2FB0;
                  v449 = v274;
                  v447 = v275;
                  v305 = atan2f(v274, v275);
                  v306 = v305 - atan2f(v245, v246);
                  v307 = v306;
                  if (v306 <= *((double *)v20 + 322))
                  {
                    v194 = 1.0;
                    v308 = -0.5;
                    if (v307 < -3.14159265)
                      v306 = v307 + 6.28318531;
                  }
                  else
                  {
                    v306 = v307 + *((double *)v21 + 365);
                    v194 = 1.0;
                    v308 = -0.5;
                  }
                  v309 = (unint64_t)fmaxf(ceilf(fabsf(v306) * 1.2732), v194);
                  if (v309 <= 1)
                  {
                    v275 = v447;
                    v274 = v449;
                    v276 = sqrtf(fmaxf(-(float)((float)((float)((float)(v302 * v447) + (float)(v301 * v449))* (float)((float)(v302 * v447) + (float)(v301 * v449)))+ -1.0), 0.1));
                    v463.__end_cap_.__value_ = (unsigned int *)__PAIR64__(LODWORD(v301), LODWORD(v302));
                    *(float *)&v463.__begin_ = v302 / v276;
                    *((float *)&v463.__begin_ + 1) = v301 / v276;
                    *(float *)&v463.__end_ = -(float)(v302 / v276);
                    *((float *)&v463.__end_ + 1) = -(float)(v301 / v276);
                    v277 = fmaxf(v288, 0.0);
                    if (v277 >= v194)
                      v278 = 65535.0;
                    else
                      v278 = v277 * 65535.0;
                    v279 = (int)v278;
                    v280 = fmaxf(v287, 0.0);
                    if (v280 >= v194)
                      v281 = 65535.0;
                    else
                      v281 = v280 * 65535.0;
                    v282 = (int)v281;
                    *(_WORD *)v221 = v279;
                    *(_WORD *)(v221 + 2) = (int)v281;
                    *(_DWORD *)(v221 + 12) = v304;
                    v283.i64[0] = (uint64_t)v463.__begin_;
                    v283.i64[1] = v461;
                    v284.i64[0] = 0xBF000000BF000000;
                    v284.i64[1] = 0xBF000000BF000000;
                    *(int16x4_t *)(v221 + 4) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v284, (float32x4_t)xmmword_19FFB2FA0, v283)));
                    *(_WORD *)(v221 + 16) = v279;
                    *(_WORD *)(v221 + 18) = v282;
                    *(_DWORD *)(v221 + 28) = v304;
                    v283.i64[0] = (uint64_t)v463.__end_;
                    v283.i64[1] = *((_QWORD *)&v461 + 1);
                    v284.i64[0] = 0xBF000000BF000000;
                    v284.i64[1] = 0xBF000000BF000000;
                    *(int16x4_t *)(v221 + 20) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v284, (float32x4_t)xmmword_19FFB2FA0, v283)));
                    v221 += 32;
                    v215 = v297;
                    v285 = __pb;
                  }
                  else
                  {
                    v310 = 0;
                    v311 = fmaxf(v288, 0.0);
                    if (v311 >= v194)
                      v312 = 65535.0;
                    else
                      v312 = v311 * 65535.0;
                    v313 = (int)v312;
                    v314 = fmaxf(v287, 0.0);
                    if (v314 >= v194)
                      v315 = 65535.0;
                    else
                      v315 = v314 * 65535.0;
                    v316 = (int)v315;
                    do
                    {
                      v317 = __sincosf_stret((float)(v308 + (float)((float)(int)v310 * (float)(1.0 / (float)((float)v309 + -1.0))))* v306);
                      *(float *)&v463.__end_cap_.__value_ = -(float)((float)(v317.__sinval * v301)
                                                                   - (float)(v317.__cosval * v302));
                      *((float *)&v463.__end_cap_.__value_ + 1) = (float)(v317.__sinval * v302)
                                                                + (float)(v317.__cosval * v301);
                      v463.__begin_ = (std::vector<unsigned int>::pointer)v463.__end_cap_;
                      *(float *)&v463.__end_ = -(float)((float)(v317.__cosval * v302) - (float)(v317.__sinval * v301));
                      *((float *)&v463.__end_ + 1) = -*((float *)&v463.__end_cap_.__value_ + 1);
                      *(_WORD *)v221 = v313;
                      *(_WORD *)(v221 + 2) = v316;
                      *(_DWORD *)(v221 + 12) = v304;
                      v318.i64[0] = (uint64_t)v463.__begin_;
                      v318.i64[1] = v461;
                      v319.i64[0] = 0xBF000000BF000000;
                      v319.i64[1] = 0xBF000000BF000000;
                      *(int16x4_t *)(v221 + 4) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v319, (float32x4_t)xmmword_19FFB2FA0, v318)));
                      *(_WORD *)(v221 + 16) = v313;
                      *(_WORD *)(v221 + 18) = v316;
                      *(_DWORD *)(v221 + 28) = v304;
                      v318.i64[0] = (uint64_t)v463.__end_;
                      v318.i64[1] = *((_QWORD *)&v461 + 1);
                      v319.i64[0] = 0xBF000000BF000000;
                      v319.i64[1] = 0xBF000000BF000000;
                      *(int16x4_t *)(v221 + 20) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v319, (float32x4_t)xmmword_19FFB2FA0, v318)));
                      v221 += 32;
                      ++v310;
                    }
                    while (v309 != v310);
                    v20 = &off_19FFB1000;
                    v21 = &off_19FFB1000;
                    v194 = 1.0;
                    v215 = v297;
                    v285 = __pb;
                    v274 = v449;
                    v275 = v447;
                  }
                  v247 = sqrtf((float)((float)(v441 - v288) * (float)(v441 - v288))+ (float)((float)(v444 - v287) * (float)(v444 - v287)))+ v285;
                  v273 += 12;
                  v245 = v274;
                  v246 = v275;
                  v216 = v214 - 1;
                }
                while (v244 != v214 - 1);
              }
              v320 = (float *)&v215[12 * v216];
              v321 = (float *)&v215[12 * v214];
              v323 = *(v321 - 6);
              v322 = (char *)(v321 - 6);
              v324 = v323;
              v325 = *v320;
              if (vabds_f32(*v320, v323) >= 1.0e-10)
              {
                v327 = v320[1];
                v332 = v327 - *((float *)v322 + 1);
              }
              else
              {
                v326 = *((float *)v322 + 1);
                v327 = v320[1];
                if (vabds_f32(v327, v326) < 1.0e-10)
                {
                  if (!*(_BYTE *)(v211 + 99))
                    goto LABEL_302;
LABEL_306:
                  v450 = v327;
                  __pc = v247;
                  v335 = *(float *)(v211 + 108);
                  v336 = *(float *)(v211 + 112);
                  v337 = v275 + v335;
                  v338 = v274 + v336;
                  v339 = (float)(v337 * v337) + (float)(v338 * v338);
                  v340 = v275;
                  v328 = v275;
                  v341 = v274;
                  v331 = v274;
                  if (v339 > 0.0)
                  {
                    v342 = v194 / sqrtf(v339);
                    v328 = -(float)(v338 * v342);
                    v331 = v342 * v337;
                  }
                  v343 = atan2f(*(float *)(v211 + 112), *(float *)(v211 + 108));
                  v344 = v343 - atan2f(v341, v340);
                  v345 = v344;
                  if (v344 <= *((double *)v20 + 322))
                  {
                    v194 = 1.0;
                    v247 = __pc;
                    v327 = v450;
                    if (v345 < -3.14159265)
                      v344 = v345 + 6.28318531;
                  }
                  else
                  {
                    v344 = v345 + *((double *)v21 + 365);
                    v194 = 1.0;
                    v247 = __pc;
                    v327 = v450;
                  }
                  v69 = (unint64_t)fmaxf(ceilf(fabsf(v344) * 1.2732), v194) > 1;
                  v346 = sqrtf(fmaxf(-(float)((float)((float)((float)(v328 * v335) + (float)(v331 * v336))* (float)((float)(v328 * v335) + (float)(v331 * v336)))+ -1.0), 0.1));
                  v347 = v328 / v346;
                  v329 = v331 / v346;
                  if (v69)
                  {
                    v347 = v328;
                    v329 = v331;
                  }
                  v463.__begin_ = (std::vector<unsigned int>::pointer)__PAIR64__(LODWORD(v329), LODWORD(v347));
                  v330 = -v347;
                  v274 = v341;
                  v275 = v340;
                  goto LABEL_315;
                }
                v332 = v327 - v326;
              }
              v333 = v325 - v324;
              v334 = v194 / sqrtf((float)(v333 * v333) + (float)(v332 * v332));
              v275 = v334 * v333;
              v274 = v334 * v332;
              if (*(_BYTE *)(v211 + 99))
                goto LABEL_306;
LABEL_302:
              v328 = -v274;
              *(float *)&v463.__begin_ = -v274;
              *((float *)&v463.__begin_ + 1) = v275;
              v329 = v275;
              v330 = v274;
              v331 = v275;
LABEL_315:
              *(float *)&v463.__end_ = v330;
              *((float *)&v463.__end_ + 1) = -v329;
              v348 = *((_DWORD *)v320 + 2);
              v463.__end_cap_.__value_ = (unsigned int *)__PAIR64__(LODWORD(v331), LODWORD(v328));
              *(float *)&v462 = v247;
              *((float *)&v462 + 1) = v247 * v438;
              v349 = fmaxf(v325, 0.0);
              if (v349 >= v194)
                v350 = 65535.0;
              else
                v350 = v349 * 65535.0;
              v351 = (int)v350;
              v352 = fmaxf(v327, 0.0);
              if (v352 >= v194)
                v353 = 65535.0;
              else
                v353 = v352 * 65535.0;
              v354 = (int)v353;
              *(_WORD *)v221 = v351;
              *(_WORD *)(v221 + 2) = (int)v353;
              *(_DWORD *)(v221 + 12) = v348;
              v355.i64[0] = (uint64_t)v463.__begin_;
              v355.i64[1] = v461;
              v356.i64[0] = 0xBF000000BF000000;
              v356.i64[1] = 0xBF000000BF000000;
              *(int16x4_t *)(v221 + 4) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v356, (float32x4_t)xmmword_19FFB2FA0, v355)));
              *(_WORD *)(v221 + 16) = v351;
              *(_WORD *)(v221 + 18) = v354;
              *(_DWORD *)(v221 + 28) = v348;
              v355.i64[0] = (uint64_t)v463.__end_;
              v355.i64[1] = *((_QWORD *)&v461 + 1);
              v356.i64[0] = 0xBF000000BF000000;
              v356.i64[1] = 0xBF000000BF000000;
              *(int16x4_t *)(v221 + 20) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v356, (float32x4_t)xmmword_19FFB2FA0, v355)));
              v357 = *(char *)(v211 + 97);
              if (*(_BYTE *)(v211 + 97))
              {
                *(float *)&v463.__begin_ = v275 + v328;
                *((float *)&v463.__begin_ + 1) = v274 + v331;
                *(float *)&v463.__end_ = v275 - v328;
                *((float *)&v463.__end_ + 1) = v274 - v331;
                v358 = *(_QWORD *)&v460[8];
                v461 = *(_OWORD *)&v460[8];
                *(_WORD *)(v221 + 32) = v351;
                *(_WORD *)(v221 + 34) = v354;
                v359.i64[0] = (uint64_t)v463.__begin_;
                v359.i64[1] = v358;
                *(_DWORD *)(v221 + 44) = v348;
                v360.i64[0] = 0xBF000000BF000000;
                v360.i64[1] = 0xBF000000BF000000;
                *(int16x4_t *)(v221 + 36) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v360, (float32x4_t)xmmword_19FFB2FA0, v359)));
                *(_WORD *)(v221 + 48) = v351;
                *(_WORD *)(v221 + 50) = v354;
                v360.i64[0] = (uint64_t)v463.__end_;
                v360.i64[1] = *((_QWORD *)&v461 + 1);
                *(_DWORD *)(v221 + 60) = v348;
                v361.i64[0] = 0xBF000000BF000000;
                v361.i64[1] = 0xBF000000BF000000;
                *(int16x4_t *)(v221 + 52) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v361, (float32x4_t)xmmword_19FFB2FA0, v360)));
              }
              v362 = *(_QWORD *)(v211 + 8);
              v363 = *(_QWORD *)(v211 + 16) - v362;
              v364 = v363 >> 1;
              a1 = v426;
              v365.i64[0] = 0x1000100010001;
              v365.i64[1] = 0x1000100010001;
              if (v363 >= 4)
              {
                v366 = *(_QWORD *)(v211 + 8);
                v367 = 2;
                if (v364 > 2)
                  v367 = v364;
                if (v367 >= 3)
                {
                  v370 = 0;
                  v371 = v367 - 1;
                  v372 = (v367 - 1) & 0xFFFFFFFFFFFFFFFELL;
                  v373 = v431 + 6;
                  do
                  {
                    v374 = v362 + 2 * v370;
                    *(v373 - 6) = v374;
                    *v373 = v374 + 2;
                    *(v373 - 5) = v374 + 1;
                    v373[1] = v374 + 3;
                    *(v373 - 4) = v374 + 2;
                    v373[2] = v374 + 4;
                    *(v373 - 3) = v374 + 1;
                    v373[3] = v374 + 3;
                    *(v373 - 2) = v374 + 3;
                    v373[4] = v374 + 5;
                    v370 += 2;
                    *(v373 - 1) = v374 + 2;
                    v373[5] = v374 + 4;
                    v373 += 12;
                  }
                  while (v372 != v370);
                  if (v371 != v372)
                  {
                    v368 = v371 | 1;
                    LODWORD(v366) = 2 * v372 + v362;
                    v369 = &v431[6 * v372];
                    goto LABEL_332;
                  }
                }
                else
                {
                  v368 = 1;
                  v369 = v431;
LABEL_332:
                  v375 = v367 - v368;
                  do
                  {
                    *v369 = v366;
                    v376 = v366 + 1;
                    v369[1] = v366 + 1;
                    v377 = v366 + 3;
                    LODWORD(v366) = v366 + 2;
                    v369[2] = v366;
                    v369[3] = v376;
                    v369[4] = v377;
                    v369[5] = v366;
                    v369 += 6;
                    --v375;
                  }
                  while (v375);
                }
              }
              if (*(_QWORD *)(v211 + 48) != *(_QWORD *)(v211 + 40))
              {
                v378 = *(_BYTE *)(v211 + 96) ? 2 : 1;
                if (v364 - v357 > v378)
                {
                  v379 = v364 - (v378 + v357);
                  v380 = v433;
                  if (v379 < 8)
                  {
LABEL_344:
                    v390 = v378 + v357 - v364;
                    v391 = v362 + 2 * v378;
                    do
                    {
                      *v380 = v391 - 2;
                      v380[1] = v391;
                      v391 += 2;
                      v380 += 2;
                    }
                    while (!__CFADD__(v390++, 1));
                  }
                  else
                  {
                    v381 = v379 & 0xFFFFFFFFFFFFFFF8;
                    v382 = vdupq_n_s64(v378);
                    v383 = vaddq_s64(v382, (int64x2_t)xmmword_19FFB2FE0);
                    v384 = vaddq_s64(v382, (int64x2_t)xmmword_19FFB2FF0);
                    v385 = vaddq_s64(v382, (int64x2_t)xmmword_19FFB3000);
                    v386 = vaddq_s64(v382, (int64x2_t)xmmword_19FFB2E40);
                    v387 = vdupq_n_s64(v362);
                    v388 = v433;
                    v389 = v379 & 0xFFFFFFFFFFFFFFF8;
                    do
                    {
                      v465.val[1] = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vaddq_s64(v387, vaddq_s64(v386, v386)), (int32x4_t)vaddq_s64(v387, vaddq_s64(v385, v385))), (int16x8_t)vuzp1q_s32((int32x4_t)vaddq_s64(v387, vaddq_s64(v384, v384)), (int32x4_t)vaddq_s64(v387, vaddq_s64(v383, v383))));
                      v465.val[0] = vaddq_s16(v465.val[1], v365);
                      vst2q_s16(v388, v465);
                      v388 += 16;
                      v465.val[0] = (int16x8_t)vdupq_n_s64(8uLL);
                      v384 = vaddq_s64(v384, (int64x2_t)v465.val[0]);
                      v385 = vaddq_s64(v385, (int64x2_t)v465.val[0]);
                      v386 = vaddq_s64(v386, (int64x2_t)v465.val[0]);
                      v383 = vaddq_s64(v383, (int64x2_t)v465.val[0]);
                      v389 -= 8;
                    }
                    while (v389);
                    if (v379 != v381)
                    {
                      v378 |= v381;
                      v380 = &v433[2 * (v379 & 0xFFFFFFFFFFFFFFF8)];
                      goto LABEL_344;
                    }
                  }
                }
              }
            }
            v207 = v427;
            v211 = *v427;
            v212 = *(_QWORD *)(*v427 + 8);
            v210 = *(_QWORD *)(*v427 + 16);
            v209 = (uint64_t)v431;
            goto LABEL_224;
          }
LABEL_348:
          {
            v406 = operator new();
            *(_QWORD *)(v406 + 16) = 0x5ED09DD50000000FLL;
            *(_QWORD *)(v406 + 24) = "VectorKitLabels";
            *(_OWORD *)(v406 + 32) = xmmword_19FFB2E80;
            *(_QWORD *)v406 = &off_1E42B5668;
            *(_QWORD *)(v406 + 8) = "VectorKitLabels";
            *(_OWORD *)(v406 + 72) = 0u;
            *(_OWORD *)(v406 + 88) = 0u;
            *(_OWORD *)(v406 + 104) = 0u;
            *(_OWORD *)(v406 + 120) = 0u;
            *(_OWORD *)(v406 + 136) = 0u;
            *(_OWORD *)(v406 + 152) = 0u;
            *(_OWORD *)(v406 + 168) = 0u;
            *(_OWORD *)(v406 + 184) = 0u;
            *(_OWORD *)(v406 + 200) = 0u;
            *(_OWORD *)(v406 + 216) = 0u;
            *(_OWORD *)(v406 + 232) = 0u;
            *(_QWORD *)(v406 + 248) = 0;
            *(_OWORD *)(v406 + 56) = 0u;
            v407 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v406 + 56), 0);
            if ((_DWORD)v407)
              geo::read_write_lock::logFailure(v407, (uint64_t)"initialization", v408);
            v409 = malloc_create_zone(0, 0);
            *(_QWORD *)(v406 + 48) = v409;
            malloc_set_zone_name(v409, "VectorKitLabels");
            *(_QWORD *)(v406 + 256) = os_log_create("com.apple.VectorKit", "Memory");
            mdm::Allocator::instance(void)::alloc = v406;
          }
          v394 = v424 + 7;
          v395 = (_QWORD *)*v423;
          v396 = v417;
          if (*v423)
          {
            v397 = (_QWORD *)v424[8];
            v398 = (_QWORD *)*v423;
            if (v397 != v395)
            {
              do
              {
                v401 = (void (***)(_QWORD, _QWORD *))*--v397;
                v400 = v401;
                *v397 = 0;
                if (v401)
                {
                  (**v400)(v400, v398);
                  if ((v402 & 1) == 0
                  {
                    v403 = operator new();
                    *(_QWORD *)(v403 + 16) = 0x5ED09DD50000000FLL;
                    *(_QWORD *)(v403 + 24) = "VectorKitLabels";
                    *(_OWORD *)(v403 + 32) = xmmword_19FFB2E80;
                    *(_QWORD *)v403 = &off_1E42B5668;
                    *(_QWORD *)(v403 + 8) = "VectorKitLabels";
                    *(_OWORD *)(v403 + 72) = 0u;
                    *(_OWORD *)(v403 + 88) = 0u;
                    *(_OWORD *)(v403 + 104) = 0u;
                    *(_OWORD *)(v403 + 120) = 0u;
                    *(_OWORD *)(v403 + 136) = 0u;
                    *(_OWORD *)(v403 + 152) = 0u;
                    *(_OWORD *)(v403 + 168) = 0u;
                    *(_OWORD *)(v403 + 184) = 0u;
                    *(_OWORD *)(v403 + 200) = 0u;
                    *(_OWORD *)(v403 + 216) = 0u;
                    *(_OWORD *)(v403 + 232) = 0u;
                    *(_QWORD *)(v403 + 248) = 0;
                    *(_OWORD *)(v403 + 56) = 0u;
                    v404 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v403 + 56), 0);
                    if ((_DWORD)v404)
                      geo::read_write_lock::logFailure(v404, (uint64_t)"initialization", v405);
                    v399 = malloc_create_zone(0, 0);
                    *(_QWORD *)(v403 + 48) = v399;
                    malloc_set_zone_name(v399, "VectorKitLabels");
                    *(_QWORD *)(v403 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                    mdm::Allocator::instance(void)::alloc = v403;
                  }
                  (*(void (**)(uint64_t, void (***)(_QWORD, _QWORD *), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v400, 120);
                }
              }
              while (v397 != v395);
              v398 = (_QWORD *)*v423;
              v396 = v417;
            }
            v424[8] = v395;
            (*(void (**)(_QWORD, _QWORD *, _QWORD))(*(_QWORD *)v424[10] + 40))(v424[10], v398, v424[9] - (_QWORD)v398);
            v394 = v424 + 7;
            *v423 = 0;
            v424[8] = 0;
            v424[9] = 0;
          }
          *v394 = 0;
          v394[1] = 0;
          v394[2] = 0;
          if (v458.__begin_)
            operator delete(v458.__begin_);
          if (v459[0])
            operator delete(v459[0]);
          if (v421 && v415 != v419 && a2 && *(_BYTE *)(v418 + 17) != 2)
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, v421, v418, v419, v415, 1, 1);
          if (v422 && v416 != v420 && a2 && *(_BYTE *)(v396 + 17) != 2)
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, v422, v396, v420, v416, 1, 1);
          v195 = v414 + 8;
          v196 = v413;
        }
        v193 = v412 + 8;
      }
      while (v412 + 8 != v411);
    }
    *a1 = &off_1E42AFE18;
    a1[25] = 0;
    *((_DWORD *)a1 + 52) = 0;
    return (uint64_t)a1;
  }
  else
  {
    result = std::__throw_bad_optional_access[abi:nn180100]();
    __break(1u);
  }
  return result;
}

void sub_19FD1CB68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,_QWORD *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void **a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void **a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,void *a60)
{
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  void *v66;
  void *v67;

  MEMORY[0x1A1AF4E00](v60, 0x1020C4007FF0C4BLL);
  if (__p)
    operator delete(__p);
  v63 = a32[15];
  a32[15] = 0;
  if (v63)
  {
    v64 = *(_QWORD *)(v63 + 2584);
    if (v64)
      MEMORY[0x1A1AF4DE8](v64, 0x1000C8000313F17);
    MEMORY[0x1A1AF4E00](v63, 0x1020C4007FF0C4BLL);
  }
  v65 = *a42;
  if (*a42)
  {
    a32[5] = v65;
    operator delete(v65);
    v66 = *a37;
    if (!*a37)
    {
LABEL_9:
      v67 = *(void **)(v61 - 224);
      if (!v67)
        goto LABEL_10;
      goto LABEL_13;
    }
  }
  else
  {
    v66 = *a37;
    if (!*a37)
      goto LABEL_9;
  }
  a32[2] = v66;
  operator delete(v66);
  v67 = *(void **)(v61 - 224);
  if (!v67)
LABEL_10:
    _Unwind_Resume(a1);
LABEL_13:
  operator delete(v67);
  _Unwind_Resume(a1);
}

void md::RoadLayer::setSharedResources(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t *v46;
  unint64_t v47;
  _QWORD *v48;
  std::__shared_weak_count *v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t *v60;
  unint64_t v61;

  a1[25] = a2;
  v2 = a1[1];
  v3 = a1[2];
  while (v2 != v3)
  {
    v4 = *(_QWORD **)v2;
    v5 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)v2 + 8) + 200);
    **(_QWORD **)(*(_QWORD *)(*(_QWORD *)v2 + 1112) + 96) = *(_QWORD *)(v5[15] + 16);
    **(_QWORD **)(v4[138] + 96) = *(_QWORD *)(v5[15] + 16);
    **(_QWORD **)(v4[136] + 96) = *(_QWORD *)(v5[15] + 16);
    v6 = (_QWORD *)v4[137];
    v8 = v5[3];
    v7 = (std::__shared_weak_count *)v5[4];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    if (v8 && **(_QWORD **)(v8 + 40) == v6[1])
    {
      v14 = v6[2];
      if (v14 && v14 != v8)
        ggl::PipelineSetup::resetData((uint64_t)v6);
      if (v7)
      {
        v15 = (unint64_t *)&v7->__shared_owners_;
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      v11 = (std::__shared_weak_count *)v6[3];
      v6[2] = v8;
      v6[3] = v7;
      if (!v11)
        goto LABEL_23;
      v17 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(v17);
      while (__stlxr(v13 - 1, v17));
    }
    else
    {
      v11 = (std::__shared_weak_count *)v6[3];
      v6[2] = 0;
      v6[3] = 0;
      if (!v11)
        goto LABEL_23;
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
    }
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if (!v7)
        goto LABEL_29;
      goto LABEL_24;
    }
LABEL_23:
    if (!v7)
      goto LABEL_29;
LABEL_24:
    v18 = (unint64_t *)&v7->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
LABEL_29:
    **(_QWORD **)(v4[137] + 96) = *(_QWORD *)(v5[16] + 16);
    v20 = (_QWORD *)v4[140];
    v22 = v5[7];
    v21 = (std::__shared_weak_count *)v5[8];
    if (v21)
    {
      v23 = (unint64_t *)&v21->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    if (v22 && **(_QWORD **)(v22 + 40) == v20[1])
    {
      v28 = v20[2];
      if (v28 && v28 != v22)
        ggl::PipelineSetup::resetData((uint64_t)v20);
      if (v21)
      {
        v29 = (unint64_t *)&v21->__shared_owners_;
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
      }
      v25 = (std::__shared_weak_count *)v20[3];
      v20[2] = v22;
      v20[3] = v21;
      if (!v25)
        goto LABEL_48;
      v31 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldaxr(v31);
      while (__stlxr(v27 - 1, v31));
    }
    else
    {
      v25 = (std::__shared_weak_count *)v20[3];
      v20[2] = 0;
      v20[3] = 0;
      if (!v25)
        goto LABEL_48;
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
    }
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
      if (!v21)
        goto LABEL_54;
      goto LABEL_49;
    }
LABEL_48:
    if (!v21)
      goto LABEL_54;
LABEL_49:
    v32 = (unint64_t *)&v21->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
LABEL_54:
    **(_QWORD **)(v4[140] + 96) = *(_QWORD *)(v5[15] + 16);
    v34 = (_QWORD *)v4[141];
    v36 = v5[5];
    v35 = (std::__shared_weak_count *)v5[6];
    if (v35)
    {
      v37 = (unint64_t *)&v35->__shared_owners_;
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
    }
    if (v36 && **(_QWORD **)(v36 + 40) == v34[1])
    {
      v42 = v34[2];
      if (v42 && v42 != v36)
        ggl::PipelineSetup::resetData((uint64_t)v34);
      if (v35)
      {
        v43 = (unint64_t *)&v35->__shared_owners_;
        do
          v44 = __ldxr(v43);
        while (__stxr(v44 + 1, v43));
      }
      v39 = (std::__shared_weak_count *)v34[3];
      v34[2] = v36;
      v34[3] = v35;
      if (!v39)
        goto LABEL_73;
      v45 = (unint64_t *)&v39->__shared_owners_;
      do
        v41 = __ldaxr(v45);
      while (__stlxr(v41 - 1, v45));
    }
    else
    {
      v39 = (std::__shared_weak_count *)v34[3];
      v34[2] = 0;
      v34[3] = 0;
      if (!v39)
        goto LABEL_73;
      v40 = (unint64_t *)&v39->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
    }
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
      if (!v35)
        goto LABEL_79;
      goto LABEL_74;
    }
LABEL_73:
    if (!v35)
      goto LABEL_79;
LABEL_74:
    v46 = (unint64_t *)&v35->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
LABEL_79:
    *(_QWORD *)(*(_QWORD *)(v4[141] + 96) + 8) = *(_QWORD *)(v5[16] + 16);
    *(_QWORD *)(*(_QWORD *)(v4[141] + 96) + 16) = *(_QWORD *)(v5[15] + 16);
    v48 = (_QWORD *)v4[142];
    v50 = v5[1];
    v49 = (std::__shared_weak_count *)v5[2];
    if (v49)
    {
      v51 = (unint64_t *)&v49->__shared_owners_;
      do
        v52 = __ldxr(v51);
      while (__stxr(v52 + 1, v51));
    }
    if (v50 && **(_QWORD **)(v50 + 40) == v48[1])
    {
      v56 = v48[2];
      if (v56 && v56 != v50)
        ggl::PipelineSetup::resetData((uint64_t)v48);
      if (v49)
      {
        v57 = (unint64_t *)&v49->__shared_owners_;
        do
          v58 = __ldxr(v57);
        while (__stxr(v58 + 1, v57));
      }
      v53 = (std::__shared_weak_count *)v48[3];
      v48[2] = v50;
      v48[3] = v49;
      if (!v53)
        goto LABEL_98;
      v59 = (unint64_t *)&v53->__shared_owners_;
      do
        v55 = __ldaxr(v59);
      while (__stlxr(v55 - 1, v59));
    }
    else
    {
      v53 = (std::__shared_weak_count *)v48[3];
      v48[2] = 0;
      v48[3] = 0;
      if (!v53)
        goto LABEL_98;
      v54 = (unint64_t *)&v53->__shared_owners_;
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
    }
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
      if (!v49)
        goto LABEL_2;
      goto LABEL_99;
    }
LABEL_98:
    if (!v49)
      goto LABEL_2;
LABEL_99:
    v60 = (unint64_t *)&v49->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
LABEL_2:
    v2 += 8;
  }
}

BOOL md::CollisionObject::rectsCollideWithRectsOBB(md::CollisionObject *this, const md::CollisionObject *a2)
{
  unint64_t v2;
  uint64_t v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float *v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  BOOL v18;
  float *v19;
  float v20;
  float v21;
  float *v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float *v32;
  uint64_t v33;
  float v34;
  float v35;
  uint64_t v37;
  uint64_t v38;
  float *v39;
  float v40;
  float v41;
  float *v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float *v48;
  uint64_t v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  BOOL v60;
  float v61;
  float v62;

  v2 = *((unsigned int *)a2 + 44);
  if (!(_DWORD)v2)
    return 0;
  v3 = *((unsigned int *)this + 44);
  if (!(_DWORD)v3)
    return 0;
  v4 = *((float *)a2 + 4);
  v5 = *((float *)a2 + 5);
  v6 = -v5;
  v7 = *((float *)this + 4);
  v8 = *((float *)this + 5);
  LODWORD(v9) = HIDWORD(*((_QWORD *)this + 2));
  LODWORD(v10) = *((_QWORD *)this + 2);
  v11 = *((unsigned __int8 *)a2 + 199);
  v12 = *((unsigned __int8 *)this + 199);
  v13 = *((_QWORD *)a2 + 23);
  v14 = (float *)*((_QWORD *)this + 23);
  if (*((_QWORD *)this + 2) == (LODWORD(v4) | ((unint64_t)LODWORD(v5) << 32)))
  {
    v15 = 0;
    v16 = 2 * v11;
    v17 = 1;
LABEL_6:
    v19 = (float *)(v13 + 24 * v15);
    v20 = *v19;
    v21 = v19[1];
    v22 = &v19[2 * v12];
    v23 = v22[2];
    v24 = v22[3];
    v25 = v23 * v4;
    v26 = v23 * v5;
    v27 = v24 * v6;
    v28 = v24 * v4;
    v29 = fabsf((float)(v7 * (float)(v23 * v4)) + (float)(v8 * (float)(v23 * v5)));
    v30 = fabsf((float)((float)(v24 * v6) * v7) + (float)(v8 * (float)(v24 * v4)));
    v31 = fabsf(-(float)((float)(v27 * v9) - (float)(v28 * v10)))
        + fabsf(-(float)((float)(v25 * v9) - (float)(v26 * v10)));
    v32 = v14;
    v33 = v3;
    while (1)
    {
      v34 = v20 - *v32;
      v35 = v21 - v32[1];
      if (fabsf((float)(v7 * v34) + (float)(v8 * v35)) <= (float)((float)(v29 + v30) + v32[v16 + 2])
        && fabsf(-(float)((float)(v34 * v9) - (float)(v35 * v10))) <= (float)(v31 + v32[v16 + 3]))
      {
        return v17;
      }
      v32 += 6;
      if (!--v33)
      {
        v18 = 0;
        v17 = ++v15 < v2;
        if (v15 == v2)
          return v18;
        goto LABEL_6;
      }
    }
  }
  else
  {
    v37 = 0;
    v38 = 2 * v11;
    v18 = 1;
LABEL_13:
    v39 = (float *)(v13 + 24 * v37);
    v40 = *v39;
    v41 = v39[1];
    v42 = &v39[2 * v12];
    v43 = v42[2];
    v44 = v42[3];
    v45 = fabsf((float)(v7 * (float)(v43 * v4)) + (float)(v8 * (float)(v43 * v5)));
    v46 = fabsf((float)((float)(v44 * v6) * v7) + (float)(v8 * (float)(v44 * v4)));
    v47 = fabsf(-(float)((float)((float)(v44 * v6) * v9) - (float)((float)(v44 * v4) * v10)))
        + fabsf(-(float)((float)((float)(v43 * v4) * v9) - (float)((float)(v43 * v5) * v10)));
    v48 = v14;
    v49 = v3;
    while (1)
    {
      v50 = v40 - *v48;
      v51 = v41 - v48[1];
      v52 = v48[v38 + 2];
      if (fabsf((float)(v7 * v50) + (float)(v8 * v51)) <= (float)((float)(v45 + v46) + v52))
      {
        v53 = v48[v38 + 3];
        v60 = fabsf(-(float)((float)(v50 * v9) - (float)(v51 * v10))) <= (float)(v47 + v53);
        v54 = v52 * v7;
        v55 = v52 * v8;
        v56 = v53 * (float)-v9;
        v57 = v53 * v10;
        v58 = fabsf((float)(v50 * v4) + (float)(v51 * v5));
        v59 = (float)(fabsf((float)(v54 * v4) + (float)(v55 * v5)) + v43) + fabsf((float)(v56 * v4) + (float)(v57 * v5));
        v60 = v60 && v58 <= v59;
        v61 = fabsf(-(float)((float)(v50 * v5) - (float)(v51 * v4)));
        v62 = (float)(fabsf(-(float)((float)(v54 * v5) - (float)(v55 * v4))) + v44)
            + fabsf(-(float)((float)(v56 * v5) - (float)(v57 * v4)));
        if (v60 && v61 <= v62)
          return v18;
      }
      v48 += 6;
      if (!--v49)
      {
        v18 = ++v37 < v2;
        if (v37 == v2)
          return 0;
        goto LABEL_13;
      }
    }
  }
}

void md::CollisionObject::worldDrawDebugHighlightWithContext(md::CollisionObject *this, float64x2_t *a2, float32x2_t *a3)
{
  __int128 *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  double *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  double v19;
  double v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float32x2_t v83;
  double v84;
  double v85;
  double v86;
  double v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float32x2_t v91;
  double v92;
  double v93;
  double v94;
  double v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float32x2_t v99;
  double v100;
  double v101;
  double v102;
  double v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float32x2_t v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  uint64_t v133;
  double v134[12];
  __int128 v135;
  uint64_t v136;
  uint64_t v137;

  v6 = (__int128 *)*((_QWORD *)this + 14);
  if (v6)
  {
    v7 = v6[5];
    v121 = v6[4];
    v122 = v7;
    v8 = v6[7];
    v123 = v6[6];
    v124 = v8;
    v9 = v6[1];
    v117 = *v6;
    v118 = v9;
    v10 = v6[3];
    v119 = v6[2];
    v120 = v10;
    if (*((_BYTE *)this + 152))
      return;
  }
  else
  {
    v11 = (double *)*((_QWORD *)this + 15);
    if (!v11)
      return;
    v12 = v11[4];
    v13 = v11[5];
    v14 = v12 + v12;
    v15 = (v12 + v12) * v12;
    v16 = (v13 + v13) * v13;
    v18 = *((_QWORD *)v11 + 2);
    v17 = v11[3];
    v19 = (v17 + v17) * v12;
    v20 = v11[6];
    v21 = *((_QWORD *)v11 + 7);
    v22 = (v13 + v13) * v20;
    v23 = v19 - v22;
    v24 = v13 * (v17 + v17);
    v134[0] = 1.0 - (v15 + v16);
    v134[1] = v22 + v19;
    v25 = 1.0 - (v17 + v17) * v17;
    v134[4] = v23;
    v134[5] = v25 - v16;
    v26 = v20 * v14;
    v27 = v20 * v14 + v24;
    v28 = v14 * v13;
    v29 = v20 * (v17 + v17);
    v134[8] = v27;
    v134[9] = v28 - v29;
    v134[2] = v24 - v26;
    v134[6] = v29 + v28;
    v134[10] = v25 - v15;
    v134[3] = 0.0;
    v134[7] = 0.0;
    v134[11] = 0.0;
    v135 = *(_OWORD *)v11;
    v136 = v18;
    v137 = 0x3FF0000000000000;
    v128 = 0u;
    v130 = 0u;
    v132 = 0u;
    v131 = 0u;
    v129 = 0u;
    v127 = 0u;
    v126 = 0u;
    v133 = 0x3FF0000000000000;
    v30 = *((_QWORD *)v11 + 8);
    v31 = *((_QWORD *)v11 + 9);
    v125 = v21;
    *(_QWORD *)&v128 = v30;
    *((_QWORD *)&v130 + 1) = v31;
    gm::operator*<double,4,4,4>((double *)&v117, v134, (double *)&v125);
    if (*((_BYTE *)this + 152))
      return;
  }
  v32 = 100;
  if (!*((_BYTE *)this + 199))
    v32 = 96;
  v33 = *((float *)this + 2);
  v34 = *(float *)this;
  if (v33 >= *(float *)this)
  {
    v36 = *((float *)this + 3);
    v35 = *((float *)this + 1);
    if (v36 >= v35)
    {
      v37 = *(float *)((char *)this + v32);
      v34 = v34 - v37;
      v33 = v33 + v37;
      v35 = v35 - v37;
      v36 = v36 + v37;
    }
  }
  else
  {
    v35 = *((float *)this + 1);
    v36 = *((float *)this + 3);
  }
  v38 = v33;
  v39 = v36;
  v40 = *(double *)&v117 * v38;
  v41 = *(double *)&v119 * v39;
  v42 = *(double *)&v119 * v39 + *(double *)&v117 * v38 + *(double *)&v123;
  v43 = *((double *)&v117 + 1) * v38;
  v44 = *((double *)&v119 + 1) * v39;
  v45 = *((double *)&v119 + 1) * v39 + *((double *)&v117 + 1) * v38 + *((double *)&v123 + 1);
  v46 = *(double *)&v118 * v38;
  v47 = *(double *)&v120 * v39;
  v48 = *(double *)&v120 * v39 + *(double *)&v118 * v38 + *(double *)&v124;
  v49 = *((double *)&v118 + 1) * v38;
  v50 = *((double *)&v120 + 1) * v39;
  v51 = 1.0 / (v50 + v49 + *((double *)&v124 + 1));
  v52 = v51 * v42;
  v53 = v51 * v45;
  v54 = v34;
  v55 = *(double *)&v117 * v54;
  v56 = v41 + *(double *)&v117 * v54 + *(double *)&v123;
  v57 = *((double *)&v117 + 1) * v54;
  v58 = v44 + *((double *)&v117 + 1) * v54 + *((double *)&v123 + 1);
  v59 = *(double *)&v118 * v54;
  v60 = v47 + *(double *)&v118 * v54 + *(double *)&v124;
  v61 = *((double *)&v118 + 1) * v54;
  v62 = 1.0 / (v50 + v61 + *((double *)&v124 + 1));
  v63 = v62 * v56;
  v64 = v62 * v58;
  v65 = v62 * v60;
  v66 = v35;
  v67 = *(double *)&v119 * v66;
  v68 = *(double *)&v119 * v66 + v55 + *(double *)&v123;
  v69 = *((double *)&v119 + 1) * v66;
  v70 = *((double *)&v119 + 1) * v66 + v57 + *((double *)&v123 + 1);
  v71 = *(double *)&v120 * v66;
  v72 = *(double *)&v120 * v66 + v59 + *(double *)&v124;
  v73 = *((double *)&v120 + 1) * v66;
  v74 = 1.0 / (v73 + v61 + *((double *)&v124 + 1));
  v111 = v74 * v68;
  v112 = v74 * v70;
  v113 = v74 * v72;
  v75 = 1.0 / (v73 + v49 + *((double *)&v124 + 1));
  v114 = v75 * (v67 + v40 + *(double *)&v123);
  v115 = v75 * (v69 + v43 + *((double *)&v123 + 1));
  v116 = v75 * (v71 + v46 + *(double *)&v124);
  v76 = a2[55].f64[1];
  v77 = a2[57].f64[1];
  v78 = a2[61].f64[1];
  v79 = a2[59].f64[1];
  v110 = v63;
  v80 = a2[54];
  v81 = a2[56];
  v82 = a2[58];
  v83 = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(a2[60], v80, v52), v81, v53), v82, v51 * v48), 1.0 / (v78 + v76 * v52 + v77 * v53 + v79 * (v51 * v48))));
  v108 = v65;
  v109 = v64;
  *(float32x2_t *)&v134[0] = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(a2[60], v80, v63), v81, v64), v82, v65), 1.0 / (v78 + v76 * v63 + v77 * v64 + v79 * v65)));
  a3[1] = v83;
  ggl::DebugConsole::drawLine((uint64_t)a3, (float *)v134);
  v84 = a2[55].f64[1];
  v85 = a2[57].f64[1];
  v86 = a2[61].f64[1];
  v87 = a2[59].f64[1];
  v88 = a2[54];
  v89 = a2[56];
  v90 = a2[58];
  v91 = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(a2[60], v88, v110), v89, v109), v90, v108), 1.0 / (v86 + v84 * v110 + v85 * v109 + v87 * v108)));
  *(float32x2_t *)&v134[0] = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(a2[60], v88, v111), v89, v112), v90, v113), 1.0 / (v86 + v84 * v111 + v85 * v112 + v87 * v113)));
  a3[1] = v91;
  ggl::DebugConsole::drawLine((uint64_t)a3, (float *)v134);
  v92 = a2[55].f64[1];
  v93 = a2[57].f64[1];
  v94 = a2[61].f64[1];
  v95 = a2[59].f64[1];
  v96 = a2[54];
  v97 = a2[56];
  v98 = a2[58];
  v99 = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(a2[60], v96, v111), v97, v112), v98, v113), 1.0 / (v94 + v92 * v111 + v93 * v112 + v95 * v113)));
  *(float32x2_t *)&v134[0] = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(a2[60], v96, v114), v97, v115), v98, v116), 1.0 / (v94 + v92 * v114 + v93 * v115 + v95 * v116)));
  a3[1] = v99;
  ggl::DebugConsole::drawLine((uint64_t)a3, (float *)v134);
  v100 = a2[55].f64[1];
  v101 = a2[57].f64[1];
  v102 = a2[61].f64[1];
  v103 = a2[59].f64[1];
  v104 = a2[54];
  v105 = a2[56];
  v106 = a2[58];
  v107 = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(a2[60], v104, v114), v105, v115), v106, v116), 1.0 / (v102 + v100 * v114 + v101 * v115 + v103 * v116)));
  *(float32x2_t *)&v134[0] = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(a2[60], v104, v52), v105, v53), v106, v51 * v48), 1.0 / (v102 + v100 * v52 + v101 * v53 + v103 * (v51 * v48))));
  a3[1] = v107;
  ggl::DebugConsole::drawLine((uint64_t)a3, (float *)v134);
}

float md::Ribbons::RibbonWriter<md::Ribbons::TransitRibbonDescriptor>::writeVertex(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  uint64_t v11;
  float v12;
  float v13;
  int v14;
  float v15;
  float v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  int16x4_t v20;
  float v21;
  BOOL v22;
  float v23;
  uint64_t v24;
  float v25;
  float v26;
  float32x4_t v27;
  uint64_t v28;
  float result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(float *)(v3 + 116);
  v5 = *(float *)(v3 + 120);
  v6 = *(float *)(v3 + 112);
  if (v6 == v5 && v4 == *(float *)(v3 + 124))
  {
    v7 = 0.0;
    if (v6 != v4)
      v7 = (float)(fminf(v4, fmaxf(v6, *(float *)(a3 + 60))) - v6) / (float)(v4 - v6);
    v8 = -1.0 - v7;
  }
  else
  {
    v9 = *(float *)(a3 + 60);
    if (v9 >= v4)
    {
      v8 = 1.0;
      if (v9 >= v5)
      {
        v10 = *(float *)(v3 + 124);
        if (v5 != v10)
          v8 = (float)((float)(fminf(v10, fmaxf(v5, v9)) - v5) / (float)(v10 - v5)) + 1.0;
      }
    }
    else
    {
      v8 = 0.0;
      if (v6 != v4)
        v8 = (float)(fminf(v4, fmaxf(v6, v9)) - v6) / (float)(v4 - v6);
    }
  }
  v11 = *a2;
  v12 = fmaxf(*(float *)(a3 + 8), 0.0);
  if (v12 >= 1.0)
    v13 = 65535.0;
  else
    v13 = v12 * 65535.0;
  v14 = (int)v13;
  v15 = fmaxf(*(float *)(a3 + 12), 0.0);
  if (v15 >= 1.0)
    v16 = 65535.0;
  else
    v16 = v15 * 65535.0;
  *(_WORD *)v11 = v14;
  *(_WORD *)(v11 + 2) = (int)v16;
  v17 = *(float32x4_t *)(a3 + 20);
  v17.i64[1] = *(_QWORD *)(a3 + 44);
  v18.i64[0] = 0xBF000000BF000000;
  v18.i64[1] = 0xBF000000BF000000;
  v19.i64[0] = 0xBF000000BF000000;
  v19.i64[1] = 0xBF000000BF000000;
  v20 = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v19, (float32x4_t)xmmword_19FFB2FA0, v17)));
  *(_DWORD *)(v11 + 16) = *(_DWORD *)(v3 + 100);
  *(_DWORD *)(v11 + 20) = *(_DWORD *)(v3 + 104);
  *(float *)(v11 + 24) = v8;
  *(float *)(v11 + 28) = *(float *)(v3 + 128) + *(float *)(a3 + 60);
  *(_DWORD *)(v11 + 32) = *(_DWORD *)(a3 + 16);
  v21 = *(float *)(a3 + 12);
  v19.f32[0] = fmaxf(*(float *)(a3 + 8), 0.0);
  v22 = v19.f32[0] < 1.0;
  v23 = v19.f32[0] * 65535.0;
  if (!v22)
    v23 = 65535.0;
  *(_WORD *)(v11 + 40) = (int)v23;
  v24 = v11 + 40;
  *(int16x4_t *)(v24 - 36) = v20;
  v25 = fmaxf(v21, 0.0);
  if (v25 >= 1.0)
    v26 = 65535.0;
  else
    v26 = v25 * 65535.0;
  *a2 = v24;
  *(_WORD *)(v24 + 2) = (int)v26;
  v27 = *(float32x4_t *)(a3 + 28);
  v27.i64[1] = *(_QWORD *)(a3 + 52);
  *(int16x4_t *)(v24 + 4) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v18, (float32x4_t)xmmword_19FFB2FA0, v27)));
  v28 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(v24 + 16) = *(_DWORD *)(v28 + 100);
  *(_DWORD *)(v24 + 20) = *(_DWORD *)(v28 + 104);
  *(float *)(v24 + 24) = v8;
  *(float *)(v24 + 28) = *(float *)(v28 + 128) + *(float *)(a3 + 60);
  result = *(float *)(a3 + 16);
  *(float *)(v24 + 32) = result;
  *a2 = v24 + 40;
  return result;
}

void md::FlyoverCompleteTileDataLogic::~FlyoverCompleteTileDataLogic(md::FlyoverCompleteTileDataLogic *this)
{
  md::FlyoverCompleteTileDataLogic::~FlyoverCompleteTileDataLogic(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  void *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  md::FlyoverCompleteTileDataLogic *v14;
  uint64_t v15;
  uint64_t v16;
  md::FlyoverCompleteTileDataLogic *v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  _QWORD *v21;
  void *v22;
  _QWORD *v23;
  void *v24;
  _QWORD *v25;
  _QWORD *v26;
  void *v27;
  _QWORD *v28;
  void *v29;
  _QWORD *v30;
  void *v31;
  void *v32;
  _QWORD *v33;
  void *v34;
  _QWORD *v35;
  void *v36;

  *(_QWORD *)this = &off_1E426F9B0;
  md::FlyoverCompleteTileDataLogic::reset(this);
  v2 = (_QWORD *)*((_QWORD *)this + 98);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)*((_QWORD *)this + 96);
  *((_QWORD *)this + 96) = 0;
  if (v4)
    operator delete(v4);
  std::__tree<std::__value_type<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::TransitionInfo>,std::__map_value_compare<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,std::__value_type<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::TransitionInfo>,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare,true>,std::allocator<std::__value_type<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::TransitionInfo>>>::destroy(*((_QWORD **)this + 93));
  v5 = (_QWORD *)*((_QWORD *)this + 89);
  if (v5)
  {
    do
    {
      v6 = (_QWORD *)*v5;
      operator delete(v5);
      v5 = v6;
    }
    while (v6);
  }
  v7 = (void *)*((_QWORD *)this + 87);
  *((_QWORD *)this + 87) = 0;
  if (v7)
    operator delete(v7);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 85));
  std::__hash_table<std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,md::FlyoverCompleteTileDataLogic::MeshStorage>,std::__unordered_map_hasher<md::FlyoverCompleteTileDataLogic::DrapingTask,std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,md::FlyoverCompleteTileDataLogic::MeshStorage>,md::FlyoverCompleteTileDataLogic::DrapingTaskHash,std::equal_to<md::FlyoverCompleteTileDataLogic::DrapingTask>,true>,std::__unordered_map_equal<md::FlyoverCompleteTileDataLogic::DrapingTask,std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,md::FlyoverCompleteTileDataLogic::MeshStorage>,std::equal_to<md::FlyoverCompleteTileDataLogic::DrapingTask>,md::FlyoverCompleteTileDataLogic::DrapingTaskHash,true>,std::allocator<std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,md::FlyoverCompleteTileDataLogic::MeshStorage>>>::__deallocate_node(*((_QWORD **)this + 81));
  v8 = (void *)*((_QWORD *)this + 79);
  *((_QWORD *)this + 79) = 0;
  if (v8)
    operator delete(v8);
  std::__hash_table<std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,md::FlyoverCompleteTileDataLogic::MeshStorage>,std::__unordered_map_hasher<md::FlyoverCompleteTileDataLogic::DrapingTask,std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,md::FlyoverCompleteTileDataLogic::MeshStorage>,md::FlyoverCompleteTileDataLogic::DrapingTaskHash,std::equal_to<md::FlyoverCompleteTileDataLogic::DrapingTask>,true>,std::__unordered_map_equal<md::FlyoverCompleteTileDataLogic::DrapingTask,std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,md::FlyoverCompleteTileDataLogic::MeshStorage>,std::equal_to<md::FlyoverCompleteTileDataLogic::DrapingTask>,md::FlyoverCompleteTileDataLogic::DrapingTaskHash,true>,std::allocator<std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,md::FlyoverCompleteTileDataLogic::MeshStorage>>>::__deallocate_node(*((_QWORD **)this + 76));
  v9 = (void *)*((_QWORD *)this + 74);
  *((_QWORD *)this + 74) = 0;
  if (v9)
    operator delete(v9);
  std::__hash_table<std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,std::shared_ptr<geo::Task>>,std::__unordered_map_hasher<md::FlyoverCompleteTileDataLogic::DrapingTask,std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,std::shared_ptr<geo::Task>>,md::FlyoverCompleteTileDataLogic::DrapingTaskHash,std::equal_to<md::FlyoverCompleteTileDataLogic::DrapingTask>,true>,std::__unordered_map_equal<md::FlyoverCompleteTileDataLogic::DrapingTask,std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,std::shared_ptr<geo::Task>>,std::equal_to<md::FlyoverCompleteTileDataLogic::DrapingTask>,md::FlyoverCompleteTileDataLogic::DrapingTaskHash,true>,std::allocator<std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,std::shared_ptr<geo::Task>>>>::~__hash_table((uint64_t)this + 552);
  std::mutex::~mutex((std::mutex *)((char *)this + 488));
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 60);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = *((_QWORD *)this + 58);
  *((_QWORD *)this + 58) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (*((_QWORD *)this + 57))
  {
    v15 = *((_QWORD *)this + 55);
    v14 = (md::FlyoverCompleteTileDataLogic *)*((_QWORD *)this + 56);
    v16 = *(_QWORD *)v14;
    *(_QWORD *)(v16 + 8) = *(_QWORD *)(v15 + 8);
    **(_QWORD **)(v15 + 8) = v16;
    *((_QWORD *)this + 57) = 0;
    if (v14 != (md::FlyoverCompleteTileDataLogic *)((char *)this + 440))
    {
      do
      {
        v17 = (md::FlyoverCompleteTileDataLogic *)*((_QWORD *)v14 + 1);
        operator delete(v14);
        v14 = v17;
      }
      while (v17 != (md::FlyoverCompleteTileDataLogic *)((char *)this + 440));
    }
  }
  v18 = (_QWORD *)*((_QWORD *)this + 52);
  if (v18)
  {
    do
    {
      v19 = (_QWORD *)*v18;
      operator delete(v18);
      v18 = v19;
    }
    while (v19);
  }
  v20 = (void *)*((_QWORD *)this + 50);
  *((_QWORD *)this + 50) = 0;
  if (v20)
    operator delete(v20);
  v21 = (_QWORD *)*((_QWORD *)this + 45);
  if (v21)
  {
    do
    {
      v30 = (_QWORD *)*v21;
      v31 = (void *)v21[11];
      if (v31)
      {
        v21[12] = v31;
        operator delete(v31);
      }
      v32 = (void *)v21[8];
      if (v32)
      {
        v21[9] = v32;
        operator delete(v32);
      }
      operator delete(v21);
      v21 = v30;
    }
    while (v30);
  }
  v22 = (void *)*((_QWORD *)this + 43);
  *((_QWORD *)this + 43) = 0;
  if (v22)
    operator delete(v22);
  v23 = (_QWORD *)*((_QWORD *)this + 40);
  if (v23)
  {
    do
    {
      v33 = (_QWORD *)*v23;
      v34 = (void *)v23[12];
      if (v34)
      {
        v23[13] = v34;
        operator delete(v34);
      }
      operator delete(v23);
      v23 = v33;
    }
    while (v33);
  }
  v24 = (void *)*((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = 0;
  if (v24)
    operator delete(v24);
  v25 = (_QWORD *)*((_QWORD *)this + 33);
  if (v25)
  {
    do
    {
      v26 = (_QWORD *)*v25;
      operator delete(v25);
      v25 = v26;
    }
    while (v26);
  }
  v27 = (void *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v27)
    operator delete(v27);
  std::__list_imp<geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::CacheEntry,std::allocator<geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::CacheEntry>>::clear((uint64_t *)this + 28);
  v28 = (_QWORD *)*((_QWORD *)this + 25);
  if (v28)
  {
    do
    {
      v35 = (_QWORD *)*v28;
      v36 = (void *)v28[8];
      if (v36)
      {
        v28[9] = v36;
        operator delete(v36);
      }
      operator delete(v28);
      v28 = v35;
    }
    while (v35);
  }
  v29 = (void *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v29)
    operator delete(v29);
  std::deque<md::FlyoverOctile>::~deque[abi:nn180100]((uint64_t)this + 120);
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
}

void md::FlyoverCompleteTileDataLogic::reset(md::FlyoverCompleteTileDataLogic *this)
{
  _QWORD *i;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *j;
  unsigned __int8 v17;
  unsigned __int8 v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t k;
  uint64_t v22;
  uint64_t m;
  uint64_t v24;
  uint64_t n;
  _QWORD *v26;
  uint64_t v27;
  uint64_t ii;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t jj;
  _QWORD *v33;
  uint64_t v34;
  uint64_t kk;
  _QWORD *v36;
  uint64_t v37;
  uint64_t mm;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t nn;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t i1;
  md::FlyoverCompleteTileDataLogic *v47;
  uint64_t v48;
  uint64_t v49;
  md::FlyoverCompleteTileDataLogic *v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t i2;
  _QWORD *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  _QWORD *v62;
  void *v63;
  _QWORD *v64;
  void *v65;
  _QWORD *v66;
  void *v67;
  void *v68;
  _QWORD v69[3];
  _QWORD *v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  for (i = (_QWORD *)*((_QWORD *)this + 71); i; i = (_QWORD *)*i)
  {
    v3 = (std::__shared_weak_count *)i[3];
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
    }
    v6 = i[15];
    v7 = (std::__shared_weak_count *)i[16];
    if (v7)
    {
      v8 = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
      atomic_store(1u, (unsigned __int8 *)(v6 + 32));
      do
        v10 = __ldaxr(v8);
      while (__stlxr(v10 - 1, v8));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    else
    {
      atomic_store(1u, (unsigned __int8 *)(v6 + 32));
    }
    if (v3)
    {
      v11 = (unint64_t *)&v3->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
  v13 = *(_QWORD *)(*((_QWORD *)this + 22) + 128);
  v69[0] = &off_1E427B070;
  v70 = v69;
  geo::TaskQueue::barrierSync(v13, v69);
  v14 = v70;
  if (v70 == v69)
  {
    v15 = 4;
    v14 = v69;
  }
  else
  {
    if (!v70)
      goto LABEL_25;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_25:
  std::mutex::lock((std::mutex *)((char *)this + 488));
  std::__hash_table<std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,std::__unordered_map_hasher<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,std::hash<gdc::Registry *>,std::equal_to<gdc::Registry *>,true>,std::__unordered_map_equal<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,std::equal_to<gdc::Registry *>,std::hash<gdc::Registry *>,true>,std::allocator<std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>>>::swap((uint64_t)this + 592, (uint64_t)this + 632);
  std::mutex::unlock((std::mutex *)((char *)this + 488));
  for (j = (uint64_t *)*((_QWORD *)this + 71); j; j = (uint64_t *)*j)
  {
    while (1)
    {
      v17 = atomic_load((unsigned __int8 *)(j[15] + 33));
      if ((v17 & 1) == 0)
      {
        v18 = atomic_load((unsigned __int8 *)(j[15] + 32));
        if ((v18 & 1) == 0)
          break;
      }
      j = (uint64_t *)std::__hash_table<std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,std::shared_ptr<geo::Task>>,std::__unordered_map_hasher<md::FlyoverCompleteTileDataLogic::DrapingTask,std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,std::shared_ptr<geo::Task>>,md::FlyoverCompleteTileDataLogic::DrapingTaskHash,std::equal_to<md::FlyoverCompleteTileDataLogic::DrapingTask>,true>,std::__unordered_map_equal<md::FlyoverCompleteTileDataLogic::DrapingTask,std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,std::shared_ptr<geo::Task>>,std::equal_to<md::FlyoverCompleteTileDataLogic::DrapingTask>,md::FlyoverCompleteTileDataLogic::DrapingTaskHash,true>,std::allocator<std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,std::shared_ptr<geo::Task>>>>::erase((_QWORD *)this + 69, j);
      if (!j)
        goto LABEL_31;
    }
  }
LABEL_31:
  if (*((_QWORD *)this + 72))
  {
    v19 = (_QWORD *)*((_QWORD *)this + 71);
    if (!v19)
    {
LABEL_33:
      *((_QWORD *)this + 71) = 0;
      v20 = *((_QWORD *)this + 70);
      if (v20)
      {
        for (k = 0; k != v20; ++k)
          *(_QWORD *)(*((_QWORD *)this + 69) + 8 * k) = 0;
      }
      *((_QWORD *)this + 72) = 0;
      goto LABEL_37;
    }
    while (1)
    {
      v55 = v19;
      v19 = (_QWORD *)*v19;
      v56 = (std::__shared_weak_count *)v55[16];
      if (!v56)
        goto LABEL_102;
      v57 = (unint64_t *)&v56->__shared_owners_;
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
        v59 = (std::__shared_weak_count *)v55[3];
        if (v59)
        {
LABEL_103:
          v60 = (unint64_t *)&v59->__shared_owners_;
          do
            v61 = __ldaxr(v60);
          while (__stlxr(v61 - 1, v60));
          if (!v61)
          {
            ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
            std::__shared_weak_count::__release_weak(v59);
          }
        }
      }
      else
      {
LABEL_102:
        v59 = (std::__shared_weak_count *)v55[3];
        if (v59)
          goto LABEL_103;
      }
      operator delete(v55);
      if (!v19)
        goto LABEL_33;
    }
  }
LABEL_37:
  if (*((_QWORD *)this + 77))
  {
    std::__hash_table<std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,md::FlyoverCompleteTileDataLogic::MeshStorage>,std::__unordered_map_hasher<md::FlyoverCompleteTileDataLogic::DrapingTask,std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,md::FlyoverCompleteTileDataLogic::MeshStorage>,md::FlyoverCompleteTileDataLogic::DrapingTaskHash,std::equal_to<md::FlyoverCompleteTileDataLogic::DrapingTask>,true>,std::__unordered_map_equal<md::FlyoverCompleteTileDataLogic::DrapingTask,std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,md::FlyoverCompleteTileDataLogic::MeshStorage>,std::equal_to<md::FlyoverCompleteTileDataLogic::DrapingTask>,md::FlyoverCompleteTileDataLogic::DrapingTaskHash,true>,std::allocator<std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,md::FlyoverCompleteTileDataLogic::MeshStorage>>>::__deallocate_node(*((_QWORD **)this + 76));
    *((_QWORD *)this + 76) = 0;
    v22 = *((_QWORD *)this + 75);
    if (v22)
    {
      for (m = 0; m != v22; ++m)
        *(_QWORD *)(*((_QWORD *)this + 74) + 8 * m) = 0;
    }
    *((_QWORD *)this + 77) = 0;
  }
  if (*((_QWORD *)this + 82))
  {
    std::__hash_table<std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,md::FlyoverCompleteTileDataLogic::MeshStorage>,std::__unordered_map_hasher<md::FlyoverCompleteTileDataLogic::DrapingTask,std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,md::FlyoverCompleteTileDataLogic::MeshStorage>,md::FlyoverCompleteTileDataLogic::DrapingTaskHash,std::equal_to<md::FlyoverCompleteTileDataLogic::DrapingTask>,true>,std::__unordered_map_equal<md::FlyoverCompleteTileDataLogic::DrapingTask,std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,md::FlyoverCompleteTileDataLogic::MeshStorage>,std::equal_to<md::FlyoverCompleteTileDataLogic::DrapingTask>,md::FlyoverCompleteTileDataLogic::DrapingTaskHash,true>,std::allocator<std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,md::FlyoverCompleteTileDataLogic::MeshStorage>>>::__deallocate_node(*((_QWORD **)this + 81));
    *((_QWORD *)this + 81) = 0;
    v24 = *((_QWORD *)this + 80);
    if (v24)
    {
      for (n = 0; n != v24; ++n)
        *(_QWORD *)(*((_QWORD *)this + 79) + 8 * n) = 0;
    }
    *((_QWORD *)this + 82) = 0;
  }
  if (*((_QWORD *)this + 26))
  {
    v26 = (_QWORD *)*((_QWORD *)this + 25);
    if (v26)
    {
      do
      {
        v62 = (_QWORD *)*v26;
        v63 = (void *)v26[8];
        if (v63)
        {
          v26[9] = v63;
          operator delete(v63);
        }
        operator delete(v26);
        v26 = v62;
      }
      while (v62);
    }
    *((_QWORD *)this + 25) = 0;
    v27 = *((_QWORD *)this + 24);
    if (v27)
    {
      for (ii = 0; ii != v27; ++ii)
        *(_QWORD *)(*((_QWORD *)this + 23) + 8 * ii) = 0;
    }
    *((_QWORD *)this + 26) = 0;
  }
  std::__list_imp<geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::CacheEntry,std::allocator<geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::CacheEntry>>::clear((uint64_t *)this + 28);
  if (*((_QWORD *)this + 34))
  {
    v29 = (_QWORD *)*((_QWORD *)this + 33);
    if (v29)
    {
      do
      {
        v30 = (_QWORD *)*v29;
        operator delete(v29);
        v29 = v30;
      }
      while (v30);
    }
    *((_QWORD *)this + 33) = 0;
    v31 = *((_QWORD *)this + 32);
    if (v31)
    {
      for (jj = 0; jj != v31; ++jj)
        *(_QWORD *)(*((_QWORD *)this + 31) + 8 * jj) = 0;
    }
    *((_QWORD *)this + 34) = 0;
  }
  *((_QWORD *)this + 36) = (char *)this + 224;
  *((_QWORD *)this + 37) = 0;
  if (*((_QWORD *)this + 41))
  {
    v33 = (_QWORD *)*((_QWORD *)this + 40);
    if (v33)
    {
      do
      {
        v64 = (_QWORD *)*v33;
        v65 = (void *)v33[12];
        if (v65)
        {
          v33[13] = v65;
          operator delete(v65);
        }
        operator delete(v33);
        v33 = v64;
      }
      while (v64);
    }
    *((_QWORD *)this + 40) = 0;
    v34 = *((_QWORD *)this + 39);
    if (v34)
    {
      for (kk = 0; kk != v34; ++kk)
        *(_QWORD *)(*((_QWORD *)this + 38) + 8 * kk) = 0;
    }
    *((_QWORD *)this + 41) = 0;
  }
  if (*((_QWORD *)this + 46))
  {
    v36 = (_QWORD *)*((_QWORD *)this + 45);
    if (v36)
    {
      do
      {
        v66 = (_QWORD *)*v36;
        v67 = (void *)v36[11];
        if (v67)
        {
          v36[12] = v67;
          operator delete(v67);
        }
        v68 = (void *)v36[8];
        if (v68)
        {
          v36[9] = v68;
          operator delete(v68);
        }
        operator delete(v36);
        v36 = v66;
      }
      while (v66);
    }
    *((_QWORD *)this + 45) = 0;
    v37 = *((_QWORD *)this + 44);
    if (v37)
    {
      for (mm = 0; mm != v37; ++mm)
        *(_QWORD *)(*((_QWORD *)this + 43) + 8 * mm) = 0;
    }
    *((_QWORD *)this + 46) = 0;
  }
  if (*((_QWORD *)this + 90))
  {
    v39 = (_QWORD *)*((_QWORD *)this + 89);
    if (v39)
    {
      do
      {
        v40 = (_QWORD *)*v39;
        operator delete(v39);
        v39 = v40;
      }
      while (v40);
    }
    *((_QWORD *)this + 89) = 0;
    v41 = *((_QWORD *)this + 88);
    if (v41)
    {
      for (nn = 0; nn != v41; ++nn)
        *(_QWORD *)(*((_QWORD *)this + 87) + 8 * nn) = 0;
    }
    *((_QWORD *)this + 90) = 0;
  }
  if (*((_QWORD *)this + 53))
  {
    v43 = (_QWORD *)*((_QWORD *)this + 52);
    if (v43)
    {
      do
      {
        v44 = (_QWORD *)*v43;
        operator delete(v43);
        v43 = v44;
      }
      while (v44);
    }
    *((_QWORD *)this + 52) = 0;
    v45 = *((_QWORD *)this + 51);
    if (v45)
    {
      for (i1 = 0; i1 != v45; ++i1)
        *(_QWORD *)(*((_QWORD *)this + 50) + 8 * i1) = 0;
    }
    *((_QWORD *)this + 53) = 0;
  }
  if (*((_QWORD *)this + 57))
  {
    v48 = *((_QWORD *)this + 55);
    v47 = (md::FlyoverCompleteTileDataLogic *)*((_QWORD *)this + 56);
    v49 = *(_QWORD *)v47;
    *(_QWORD *)(v49 + 8) = *(_QWORD *)(v48 + 8);
    **(_QWORD **)(v48 + 8) = v49;
    *((_QWORD *)this + 57) = 0;
    if (v47 != (md::FlyoverCompleteTileDataLogic *)((char *)this + 440))
    {
      do
      {
        v50 = (md::FlyoverCompleteTileDataLogic *)*((_QWORD *)v47 + 1);
        operator delete(v47);
        v47 = v50;
      }
      while (v50 != (md::FlyoverCompleteTileDataLogic *)((char *)this + 440));
    }
  }
  if (*((_QWORD *)this + 99))
  {
    v51 = (_QWORD *)*((_QWORD *)this + 98);
    if (v51)
    {
      do
      {
        v52 = (_QWORD *)*v51;
        operator delete(v51);
        v51 = v52;
      }
      while (v52);
    }
    *((_QWORD *)this + 98) = 0;
    v53 = *((_QWORD *)this + 97);
    if (v53)
    {
      for (i2 = 0; i2 != v53; ++i2)
        *(_QWORD *)(*((_QWORD *)this + 96) + 8 * i2) = 0;
    }
    *((_QWORD *)this + 99) = 0;
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 85));
  *((_QWORD *)this + 84) = (char *)this + 680;
  *((_QWORD *)this + 86) = 0;
  *((_QWORD *)this + 85) = 0;
  std::__tree<std::__value_type<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::TransitionInfo>,std::__map_value_compare<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,std::__value_type<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::TransitionInfo>,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare,true>,std::allocator<std::__value_type<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::TransitionInfo>>>::destroy(*((_QWORD **)this + 93));
  *((_QWORD *)this + 92) = (char *)this + 744;
  *((_QWORD *)this + 94) = 0;
  *((_QWORD *)this + 93) = 0;
}

void sub_19FD1E318(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19FD1E324(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      _Unwind_Resume(exception_object);
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
  _Unwind_Resume(exception_object);
}

double md::FlyoverCompleteTileDataLogic::createDebugNode@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

double md::Logic<md::FlyoverCompleteTileDataLogic,md::FlyoverCompleteTileDataContext,md::LogicDependencies<gdc::TypeList<md::TileSelectionContext,md::FlyoverTileDataResolverContext,md::PendingSceneContext>,gdc::TypeList<>>>::_allocateContext@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  double result;
  __int128 v7;
  _OWORD v8[2];
  uint64_t v9;

  v4 = (_QWORD *)operator new();
  (*(void (**)(_OWORD *__return_ptr, uint64_t))(*(_QWORD *)a1 + 112))(v8, a1);
  v5 = operator new();
  result = *(double *)v8;
  v7 = v8[1];
  *(_OWORD *)v5 = v8[0];
  *(_OWORD *)(v5 + 16) = v7;
  *(_QWORD *)(v5 + 32) = v9;
  v4[2] = "md::FlyoverCompleteTileDataContext]";
  v4[3] = 34;
  v4[4] = v5;
  *v4 = &off_1E4270738;
  v4[1] = 0xD3D7935EF848FCE7;
  *a2 = v4;
  return result;
}

void sub_19FD1E440(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::FlyoverCompleteTileDataLogic,md::FlyoverCompleteTileDataContext,md::LogicDependencies<gdc::TypeList<md::TileSelectionContext,md::FlyoverTileDataResolverContext,md::PendingSceneContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[4];

  if (*(_QWORD *)(a3 + 8) == 0xD3D7935EF848FCE7)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::TileSelectionContext,md::FlyoverTileDataResolverContext,md::PendingSceneContext>,gdc::TypeList<>>::buildRequiredTuple<md::TileSelectionContext,md::FlyoverTileDataResolverContext,md::PendingSceneContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 128))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::FlyoverCompleteTileDataLogic,md::FlyoverCompleteTileDataContext,md::LogicDependencies<gdc::TypeList<md::TileSelectionContext,md::FlyoverTileDataResolverContext,md::PendingSceneContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[4];

  if (*(_QWORD *)(a3 + 8) == 0xD3D7935EF848FCE7)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::TileSelectionContext,md::FlyoverTileDataResolverContext,md::PendingSceneContext>,gdc::TypeList<>>::buildRequiredTuple<md::TileSelectionContext,md::FlyoverTileDataResolverContext,md::PendingSceneContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 136))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::FlyoverCompleteTileDataLogic,md::FlyoverCompleteTileDataContext,md::LogicDependencies<gdc::TypeList<md::TileSelectionContext,md::FlyoverTileDataResolverContext,md::PendingSceneContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[4];

  if (*(_QWORD *)(a3 + 8) == 0xD3D7935EF848FCE7)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::TileSelectionContext,md::FlyoverTileDataResolverContext,md::PendingSceneContext>,gdc::TypeList<>>::buildRequiredTuple<md::TileSelectionContext,md::FlyoverTileDataResolverContext,md::PendingSceneContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 144))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::FlyoverCompleteTileDataLogic,md::FlyoverCompleteTileDataContext,md::LogicDependencies<gdc::TypeList<md::TileSelectionContext,md::FlyoverTileDataResolverContext,md::PendingSceneContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[4];

  if (*(_QWORD *)(a3 + 8) == 0xD3D7935EF848FCE7)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::TileSelectionContext,md::FlyoverTileDataResolverContext,md::PendingSceneContext>,gdc::TypeList<>>::buildRequiredTuple<md::TileSelectionContext,md::FlyoverTileDataResolverContext,md::PendingSceneContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 152))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::FlyoverCompleteTileDataLogic,md::FlyoverCompleteTileDataContext,md::LogicDependencies<gdc::TypeList<md::TileSelectionContext,md::FlyoverTileDataResolverContext,md::PendingSceneContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[4];

  if (*(_QWORD *)(a3 + 8) == 0xD3D7935EF848FCE7 && (v4 = *(_QWORD *)(a3 + 32)) != 0)
  {
    v6 = result;
    md::LogicDependencies<gdc::TypeList<md::TileSelectionContext,md::FlyoverTileDataResolverContext,md::PendingSceneContext>,gdc::TypeList<>>::buildRequiredTuple<md::TileSelectionContext,md::FlyoverTileDataResolverContext,md::PendingSceneContext>(v7, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v6 + 160))(v6, a2, v7, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

double md::Logic<md::FlyoverCompleteTileDataLogic,md::FlyoverCompleteTileDataContext,md::LogicDependencies<gdc::TypeList<md::TileSelectionContext,md::FlyoverTileDataResolverContext,md::PendingSceneContext>,gdc::TypeList<>>>::allocateContext@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t md::Logic<md::FlyoverCompleteTileDataLogic,md::FlyoverCompleteTileDataContext,md::LogicDependencies<gdc::TypeList<md::TileSelectionContext,md::FlyoverTileDataResolverContext,md::PendingSceneContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

_QWORD *md::FlyoverCompleteTileDataLogic::runBeforeLayoutAtVariableRate(uint64_t a1, md::LayoutContext *a2, unsigned __int16 ***a3, _QWORD *a4)
{
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __n128 v16;
  uint64_t v17;
  double v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t i;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unsigned __int8 *v30;
  int8x8_t v31;
  unint64_t v32;
  uint8x8_t v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t j;
  uint64_t *k;
  unsigned __int8 v64;
  unsigned __int8 v65;
  uint64_t *v66;
  int v67;
  uint64_t v68;
  unsigned __int8 v69;
  unsigned __int16 *v70;
  unsigned __int16 *v71;
  unsigned __int16 *v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  int8x8_t v83;
  unint64_t v84;
  uint8x8_t v85;
  unint64_t v86;
  uint64_t ***v87;
  uint64_t **v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t *v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint8x8_t v96;
  unint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  int v105;
  unint64_t v106;
  unint64_t v107;
  char v108;
  char v109;
  char v110;
  uint64_t v111;
  int v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  uint8x8_t v120;
  uint64_t **v121;
  uint64_t *v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  char *v128;
  float v129;
  float v130;
  _BOOL8 v131;
  unint64_t v132;
  unint64_t v133;
  size_t prime;
  void *v135;
  void *v136;
  uint64_t v137;
  _QWORD *v138;
  size_t v139;
  size_t v140;
  size_t v141;
  _QWORD *m;
  size_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint8x8_t v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  size_t v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  unint64_t v155;
  void *v156;
  unint64_t v157;
  int v158;
  unint64_t v159;
  unsigned __int8 *v160;
  unsigned int v161;
  unsigned int v162;
  void *v164;
  uint64_t v165;
  _QWORD **v166;
  _QWORD **v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t *v171;
  uint64_t v172;
  _QWORD *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  int8x8_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  int v182;
  int v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  uint8x8_t v187;
  unint64_t v188;
  uint64_t **v189;
  uint64_t *v190;
  int v191;
  int v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t *v195;
  uint64_t v196;
  unint64_t v197;
  unint64_t v198;
  __int128 *v199;
  unsigned __int16 *v200;
  uint64_t *v201;
  _QWORD *v202;
  uint64_t v203;
  unsigned int v204;
  unsigned int v205;
  void *v206;
  unint64_t *v207;
  unint64_t *v208;
  _QWORD *v210;
  _QWORD **v211;
  _QWORD **v212;
  _QWORD *v213;
  _BOOL4 v214;
  _QWORD *v215;
  _QWORD *v216;
  _QWORD *v217;
  _QWORD *v218;
  int v219;
  unsigned int v220;
  int v221;
  int v222;
  unsigned int v223;
  _QWORD **v224;
  _QWORD **v225;
  unsigned int v226;
  char v227;
  _QWORD *v228;
  _QWORD **v229;
  unsigned int v230;
  unsigned int v231;
  unsigned int v232;
  _QWORD *v233;
  _QWORD *v234;
  _QWORD *v235;
  _QWORD **v236;
  unsigned int v237;
  int v238;
  int v239;
  int v240;
  unsigned int v241;
  char v242;
  _QWORD *v243;
  _QWORD **v244;
  _QWORD *v246;
  _QWORD *v247;
  uint64_t **v248;
  uint64_t *v249;
  uint64_t **v250;
  uint64_t v251;
  char *v252;
  uint64_t v253;
  uint64_t *v254;
  char *v255;
  char **v256;
  uint64_t v257;
  uint64_t v258;
  _QWORD *v259;
  _QWORD *v260;
  _QWORD *v261;
  _QWORD *v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  char *v274;
  char *v275;
  _QWORD *v276;
  unint64_t v277;
  unint64_t v278;
  unint64_t v279;
  unint64_t v280;
  unsigned int v281;
  unsigned int v282;
  char v283;
  int v284;
  unsigned int v285;
  unsigned int v286;
  unsigned int v287;
  unsigned int v288;
  unint64_t v289;
  int v291;
  unint64_t v292;
  int v294;
  int v295;
  uint64_t v296;
  char *v297;
  char *v298;
  _QWORD *v299;
  _QWORD *v300;
  _QWORD *n;
  char **v302;
  char *v303;
  char *v304;
  char **v305;
  char **v306;
  uint64_t v307;
  char *v308;
  char *v309;
  _QWORD *v310;
  _QWORD **v311;
  _QWORD *v312;
  const gdc::LayerDataRequestKey *v313;
  uint64_t **v314;
  float v315;
  float32x2_t v316;
  int v317;
  std::__shared_weak_count *v318;
  unint64_t *v319;
  unint64_t v320;
  uint64_t **v321;
  uint64_t *v322;
  uint64_t *v323;
  uint64_t **v324;
  std::__shared_weak_count *v325;
  unint64_t *v326;
  unint64_t v327;
  uint64_t *v328;
  uint64_t **v329;
  uint64_t *v330;
  unsigned __int16 v331;
  unsigned __int8 *v332;
  int8x8_t v333;
  _BYTE *v335;
  void *v336;
  unint64_t v337;
  uint8x8_t v338;
  unint64_t *v339;
  _BYTE *v340;
  std::__shared_weak_count *v341;
  unint64_t *v342;
  unint64_t v343;
  void *v344;
  unint64_t v345;
  uint8x8_t v346;
  unint64_t v347;
  uint64_t ***v348;
  uint64_t **v349;
  uint64_t v350;
  unint64_t v351;
  uint64_t *v352;
  size_t v353;
  const void *v354;
  uint64_t *v355;
  uint64_t *v356;
  size_t v357;
  const void *v358;
  uint64_t *v359;
  uint64_t *v360;
  unint64_t *v361;
  unint64_t v362;
  std::__shared_weak_count *v363;
  unint64_t *v364;
  unint64_t v365;
  _QWORD *v366;
  _QWORD *v367;
  unint64_t v368;
  unint64_t v369;
  _QWORD *v370;
  float v371;
  _BOOL8 v372;
  unint64_t v373;
  unint64_t v374;
  size_t v375;
  void *v376;
  void *v377;
  uint64_t v378;
  _QWORD **v379;
  size_t v380;
  size_t v381;
  size_t v382;
  _QWORD *ii;
  size_t v384;
  uint64_t v385;
  unint64_t v386;
  uint8x8_t v387;
  uint64_t v388;
  _QWORD *v389;
  uint64_t v390;
  size_t v391;
  _QWORD *v392;
  _QWORD *v393;
  unint64_t v394;
  _BYTE *v395;
  void *v396;
  _BYTE *v397;
  std::__shared_weak_count *v398;
  unint64_t *v399;
  unint64_t v400;
  void *v401;
  void *v402;
  uint64_t v403;
  unsigned __int8 *v404;
  unsigned __int16 *v405;
  unsigned __int16 *v406;
  unsigned __int16 *v407;
  unsigned __int16 *jj;
  char *v409;
  unsigned __int8 **v410;
  unsigned __int8 *v411;
  uint64_t v412;
  __int128 v413;
  uint64_t v414;
  uint64_t v415;
  __int128 *v416;
  unsigned __int8 **v417;
  _QWORD *v418;
  _QWORD *v419;
  uint64_t v420;
  uint64_t kk;
  _QWORD *v422;
  _QWORD *v423;
  uint64_t v424;
  uint64_t mm;
  _QWORD *v426;
  _QWORD *v427;
  uint64_t v428;
  uint64_t nn;
  _QWORD *v430;
  unsigned __int8 *v431;
  uint64_t v432;
  uint64_t i1;
  uint64_t v434;
  _QWORD *v435;
  _QWORD *v436;
  void *v437;
  std::__shared_weak_count *v438;
  unint64_t *v439;
  unint64_t v440;
  _QWORD *result;
  uint64_t v442;
  unsigned __int8 *v443;
  unsigned __int8 *v444;
  _QWORD *v445;
  void *v446;
  _QWORD *v447;
  void *v448;
  void *v449;
  _QWORD *v450;
  void *v451;
  unsigned __int8 *v452;
  _QWORD *v453;
  _QWORD *v454;
  unsigned __int8 *v455;
  unsigned __int8 *v456;
  unsigned __int16 v457;
  char *v458;
  int8x8_t v459;
  unint64_t v460;
  uint8x8_t v461;
  uint64_t v462;
  char *v463;
  char *v464;
  unint64_t v465;
  uint64_t v466;
  unint64_t v467;
  unint64_t v468;
  _QWORD *v469;
  uint64_t v470;
  uint64_t v472;
  unint64_t *v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  md::FlyoverMetaData *v477;
  unsigned __int16 **v478;
  unint64_t v479;
  uint64_t **v480;
  unsigned __int16 **v481;
  unint64_t *v482;
  unint64_t v483;
  unint64_t *v484;
  _QWORD *v485;
  uint64_t v486;
  char v487;
  char v488;
  uint64_t v489;
  signed int v490;
  uint64_t v491;
  unint64_t v492;
  uint64_t v493;
  uint64_t v494;
  void *v495[2];
  void *v496[2];
  int v497;
  __int128 v498;
  uint64_t v499;
  void *v500[2];
  void *v501[2];
  float v502;
  uint64_t v503;
  std::__shared_weak_count *v504;
  _QWORD **v505;
  _QWORD *v506;
  uint64_t v507;
  _QWORD **v508;
  _QWORD *v509[2];
  char *v510;
  uint64_t v511;
  _QWORD **v512;
  _QWORD *v513[2];
  void *__p[2];
  _BYTE v515[24];
  uint64_t v516;
  std::__shared_weak_count *v517;
  _QWORD v518[3];
  _QWORD *v519;
  _QWORD v520[3];
  _QWORD *v521;
  _QWORD v522[3];
  _QWORD *v523;
  __int128 v524;
  void *v525;
  __int128 v526;
  char v527;
  uint64_t v528;

  v528 = *MEMORY[0x1E0C80C00];
  v520[0] = &off_1E427AFE0;
  v520[1] = a2;
  v521 = v520;
  v518[0] = &off_1E427B028;
  v518[1] = a2;
  v519 = v518;
  v523 = v522;
  v522[0] = &off_1E427B028;
  v522[1] = a2;
  _ZNSt3__110__function6__funcIZN2md28FlyoverCompleteTileDataLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_20TileSelectionContextENS2_30FlyoverTileDataResolverContextENS2_19PendingSceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_30FlyoverCompleteTileDataContextEE3__0NS_9allocatorISL_EEFvvEEclEv((uint64_t)v520);
  v7 = v519;
  if (v519 == v518)
  {
    v8 = 4;
    v7 = v518;
  }
  else
  {
    if (!v519)
      goto LABEL_6;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_6:
  v9 = v521;
  if (v521 == v520)
  {
    v10 = 4;
    v9 = v520;
  }
  else
  {
    if (!v521)
      goto LABEL_11;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_11:
  v11 = *(_QWORD *)(a1 + 168);
  if (!v11)
    goto LABEL_926;
  v477 = *(md::FlyoverMetaData **)(v11 + 352);
  if (!v477)
    goto LABEL_926;
  v478 = *a3;
  v12 = (uint64_t *)a3[2];
  v481 = a3[1];
  v13 = (std::__shared_weak_count *)v12[1];
  v503 = *v12;
  v504 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  v16.n128_f32[0] = md::LayoutContext::frameState(a2);
  v18 = *(double *)(v17 + 88);
  if (*(_QWORD *)(a1 + 792))
  {
    v19 = *(_QWORD **)(a1 + 784);
    if (v19)
    {
      do
      {
        v20 = (_QWORD *)*v19;
        operator delete(v19);
        v19 = v20;
      }
      while (v20);
    }
    *(_QWORD *)(a1 + 784) = 0;
    v21 = *(_QWORD *)(a1 + 776);
    if (v21)
    {
      for (i = 0; i != v21; ++i)
        *(_QWORD *)(*(_QWORD *)(a1 + 768) + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 792) = 0;
  }
  v470 = a1 + 768;
  v23 = *(_QWORD *)(a1 + 232);
  v24 = *(uint64_t **)(a1 + 288);
  if ((uint64_t *)v23 != v24)
  {
    v25 = 0;
    v26 = 0;
    v27 = *(_QWORD *)(a1 + 272);
    v28 = (_QWORD *)(a1 + 248);
    while (v26 != v27)
    {
      v29 = *(_QWORD *)(v23 + 120);
      v30 = std::__hash_table<std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__list_iterator<geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::CacheEntry,void *>>,std::__unordered_map_hasher<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__list_iterator<geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::CacheEntry,void *>>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>,true>,std::__unordered_map_equal<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__list_iterator<geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::CacheEntry,void *>>,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>,md::FlyoverOctilePairHash,true>,std::allocator<std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__list_iterator<geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::CacheEntry,void *>>>>::find<std::pair<md::FlyoverOctile,md::FlyoverOctile>>((_QWORD *)(a1 + 248), (unsigned __int8 *)(v23 + 16));
      if (v30)
      {
        v31 = *(int8x8_t *)(a1 + 256);
        v32 = *((_QWORD *)v30 + 1);
        v33 = (uint8x8_t)vcnt_s8(v31);
        v33.i16[0] = vaddlv_u8(v33);
        if (v33.u32[0] > 1uLL)
        {
          if (v32 >= *(_QWORD *)&v31)
            v32 %= *(_QWORD *)&v31;
        }
        else
        {
          v32 &= *(_QWORD *)&v31 - 1;
        }
        v34 = *(unsigned __int8 **)(*v28 + 8 * v32);
        do
        {
          v35 = v34;
          v34 = *(unsigned __int8 **)v34;
        }
        while (v34 != v30);
        if (v35 == (unsigned __int8 *)(a1 + 264))
          goto LABEL_46;
        v36 = *((_QWORD *)v35 + 1);
        if (v33.u32[0] > 1uLL)
        {
          if (v36 >= *(_QWORD *)&v31)
            v36 %= *(_QWORD *)&v31;
        }
        else
        {
          v36 &= *(_QWORD *)&v31 - 1;
        }
        if (v36 != v32)
        {
LABEL_46:
          if (!*(_QWORD *)v30)
            goto LABEL_47;
          v37 = *(_QWORD *)(*(_QWORD *)v30 + 8);
          if (v33.u32[0] > 1uLL)
          {
            if (v37 >= *(_QWORD *)&v31)
              v37 %= *(_QWORD *)&v31;
          }
          else
          {
            v37 &= *(_QWORD *)&v31 - 1;
          }
          if (v37 != v32)
LABEL_47:
            *(_QWORD *)(*v28 + 8 * v32) = 0;
        }
        v38 = *(_QWORD *)v30;
        if (*(_QWORD *)v30)
        {
          v39 = *(_QWORD *)(v38 + 8);
          if (v33.u32[0] > 1uLL)
          {
            if (v39 >= *(_QWORD *)&v31)
              v39 %= *(_QWORD *)&v31;
          }
          else
          {
            v39 &= *(_QWORD *)&v31 - 1;
          }
          if (v39 != v32)
          {
            *(_QWORD *)(*v28 + 8 * v39) = v35;
            v38 = *(_QWORD *)v30;
          }
        }
        *(_QWORD *)v35 = v38;
        --*(_QWORD *)(a1 + 272);
        operator delete(v30);
        v24 = *(uint64_t **)(a1 + 288);
      }
      v25 += v29;
      v23 = *(_QWORD *)(v23 + 8);
      ++v26;
      if ((uint64_t *)v23 == v24)
        goto LABEL_56;
    }
    v24 = (uint64_t *)v23;
LABEL_56:
    v40 = *(uint64_t **)(a1 + 232);
    if (v40 != v24)
    {
      v41 = *v24;
      v42 = *v40;
      *(_QWORD *)(v42 + 8) = *(_QWORD *)(*v24 + 8);
      **(_QWORD **)(v41 + 8) = v42;
      while (1)
      {
        v43 = (uint64_t *)v40[1];
        --*(_QWORD *)(a1 + 240);
        if (v40[14])
        {
          v44 = v40[12];
          v45 = (uint64_t *)v40[13];
          v46 = *v45;
          *(_QWORD *)(v46 + 8) = *(_QWORD *)(v44 + 8);
          **(_QWORD **)(v44 + 8) = v46;
          v40[14] = 0;
          if (v45 != v40 + 12)
            break;
        }
LABEL_58:
        operator delete(v40);
        v40 = v43;
        if (v43 == v24)
          goto LABEL_78;
      }
      while (1)
      {
        v47 = (uint64_t *)v45[1];
        v48 = (std::__shared_weak_count *)v45[7];
        if (!v48)
          goto LABEL_67;
        v49 = (unint64_t *)&v48->__shared_owners_;
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v48->__on_zero_shared)(v48, v16);
          std::__shared_weak_count::__release_weak(v48);
          v51 = (std::__shared_weak_count *)v45[5];
          if (v51)
          {
LABEL_68:
            v52 = (unint64_t *)&v51->__shared_owners_;
            do
              v53 = __ldaxr(v52);
            while (__stlxr(v53 - 1, v52));
            if (!v53)
            {
              ((void (*)(std::__shared_weak_count *, __n128))v51->__on_zero_shared)(v51, v16);
              std::__shared_weak_count::__release_weak(v51);
            }
          }
        }
        else
        {
LABEL_67:
          v51 = (std::__shared_weak_count *)v45[5];
          if (v51)
            goto LABEL_68;
        }
        v54 = (std::__shared_weak_count *)v45[3];
        if (v54)
        {
          v55 = (unint64_t *)&v54->__shared_owners_;
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *, __n128))v54->__on_zero_shared)(v54, v16);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        operator delete(v45);
        v45 = v47;
        if (v47 == v40 + 12)
          goto LABEL_58;
      }
    }
LABEL_78:
    v57 = *(_QWORD *)(a1 + 296);
    _CF = v57 >= v25;
    v58 = v57 - v25;
    if (!_CF)
      v58 = 0;
    *(_QWORD *)(a1 + 296) = v58;
  }
  if (*(_QWORD *)(a1 + 720))
  {
    v59 = *(_QWORD **)(a1 + 712);
    if (v59)
    {
      do
      {
        v60 = (_QWORD *)*v59;
        operator delete(v59);
        v59 = v60;
      }
      while (v60);
    }
    *(_QWORD *)(a1 + 712) = 0;
    v61 = *(_QWORD *)(a1 + 704);
    if (v61)
    {
      for (j = 0; j != v61; ++j)
        *(_QWORD *)(*(_QWORD *)(a1 + 696) + 8 * j) = 0;
    }
    *(_QWORD *)(a1 + 720) = 0;
  }
  std::mutex::lock((std::mutex *)(a1 + 488));
  v469 = (_QWORD *)(a1 + 592);
  std::__hash_table<std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,std::__unordered_map_hasher<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,std::hash<gdc::Registry *>,std::equal_to<gdc::Registry *>,true>,std::__unordered_map_equal<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,std::equal_to<gdc::Registry *>,std::hash<gdc::Registry *>,true>,std::allocator<std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>>>::swap(a1 + 592, a1 + 632);
  std::mutex::unlock((std::mutex *)(a1 + 488));
  for (k = *(uint64_t **)(a1 + 568); k; k = (uint64_t *)*k)
  {
    while (1)
    {
      v64 = atomic_load((unsigned __int8 *)(k[15] + 33));
      if ((v64 & 1) == 0)
      {
        v65 = atomic_load((unsigned __int8 *)(k[15] + 32));
        if ((v65 & 1) == 0)
          break;
      }
      k = (uint64_t *)std::__hash_table<std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,std::shared_ptr<geo::Task>>,std::__unordered_map_hasher<md::FlyoverCompleteTileDataLogic::DrapingTask,std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,std::shared_ptr<geo::Task>>,md::FlyoverCompleteTileDataLogic::DrapingTaskHash,std::equal_to<md::FlyoverCompleteTileDataLogic::DrapingTask>,true>,std::__unordered_map_equal<md::FlyoverCompleteTileDataLogic::DrapingTask,std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,std::shared_ptr<geo::Task>>,std::equal_to<md::FlyoverCompleteTileDataLogic::DrapingTask>,md::FlyoverCompleteTileDataLogic::DrapingTaskHash,true>,std::allocator<std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,std::shared_ptr<geo::Task>>>>::erase((_QWORD *)(a1 + 552), k);
      if (!k)
        goto LABEL_94;
    }
  }
LABEL_94:
  v66 = (uint64_t *)v12[2];
  v67 = *(unsigned __int16 *)(a1 + 384);
  v68 = *v12;
  if ((v69 & 1) == 0
  {
    qword_1ECE2F300 = 0;
    qword_1ECE2F2F8 = 0;
    md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1ECE2F2F8;
    __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_19F029000);
  }
  v70 = *(unsigned __int16 **)(v68 + 48);
  v71 = *(unsigned __int16 **)(v68 + 56);
  if (v70 == v71)
    goto LABEL_105;
  v473 = (unint64_t *)&md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
  v72 = *(unsigned __int16 **)(v68 + 48);
  while (*v72 != v67)
  {
    v72 += 16;
    if (v72 == v71)
      goto LABEL_107;
  }
  if (v72 == v71)
  {
LABEL_105:
    v73 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
  }
  else
  {
    while (*v70 != v67)
    {
      v70 += 16;
      if (v70 == v71)
      {
        v70 = *(unsigned __int16 **)(v68 + 56);
        break;
      }
    }
    v73 = (uint64_t *)(v70 + 4);
  }
  v473 = (unint64_t *)v73;
LABEL_107:
  *(_OWORD *)v500 = 0u;
  *(_OWORD *)v501 = 0u;
  v502 = 1.0;
  *((_QWORD *)&v498 + 1) = 0;
  v499 = 0;
  *(_QWORD *)&v498 = (char *)&v498 + 8;
  v74 = *v66;
  v75 = v66[1];
  if (*v66 == v75)
    goto LABEL_872;
  v485 = (_QWORD *)(a1 + 712);
  v482 = v473 + 1;
  v76 = a1 + 680;
  v480 = (uint64_t **)(a1 + 744);
  v472 = v66[1];
  __asm { FMOV            V14.2S, #1.0 }
  v491 = a1 + 680;
  v494 = a1;
  while (2)
  {
    v80 = v74 + 8;
    v81 = *(_QWORD *)(v74 + 16);
    if (v81 == v74 + 8)
      goto LABEL_109;
    do
    {
      while (1)
      {
        v82 = *(_QWORD **)(v81 + 16);
        v83 = (int8x8_t)v82[3];
        if (v83)
        {
          v84 = *(unsigned __int16 *)(a1 + 384);
          v85 = (uint8x8_t)vcnt_s8(v83);
          v85.i16[0] = vaddlv_u8(v85);
          if (v85.u32[0] > 1uLL)
          {
            v86 = *(unsigned __int16 *)(a1 + 384);
            if (*(_QWORD *)&v83 <= v84)
              v86 = v84 % *(_QWORD *)&v83;
          }
          else
          {
            v86 = (v83.i32[0] - 1) & v84;
          }
          v87 = *(uint64_t ****)(v82[2] + 8 * v86);
          if (v87)
          {
            v88 = *v87;
            if (v88)
            {
              if (v85.u32[0] < 2uLL)
              {
                v89 = *(_QWORD *)&v83 - 1;
                while (1)
                {
                  v91 = v88[1];
                  if (v91 == (uint64_t *)v84)
                  {
                    if (*((unsigned __int16 *)v88 + 8) == (_DWORD)v84)
                      goto LABEL_134;
                  }
                  else if (((unint64_t)v91 & v89) != v86)
                  {
                    goto LABEL_112;
                  }
                  v88 = (uint64_t **)*v88;
                  if (!v88)
                    goto LABEL_112;
                }
              }
              while (1)
              {
                v90 = (unint64_t)v88[1];
                if (v90 == v84)
                  break;
                if (v90 >= *(_QWORD *)&v83)
                  v90 %= *(_QWORD *)&v83;
                if (v90 != v86)
                  goto LABEL_112;
LABEL_123:
                v88 = (uint64_t **)*v88;
                if (!v88)
                  goto LABEL_112;
              }
              if (*((unsigned __int16 *)v88 + 8) != (_DWORD)v84)
                goto LABEL_123;
LABEL_134:
              if (v82)
              {
                v484 = (unint64_t *)v82[1];
                if (v484)
                  break;
              }
            }
          }
        }
LABEL_112:
        v81 = *(_QWORD *)(v81 + 8);
        if (v81 == v80)
          goto LABEL_109;
      }
      v92 = 0x9DDFEA08EB382D69 * (((8 * (_DWORD)v484) + 8) ^ ((unint64_t)v484 >> 32));
      v93 = 0x9DDFEA08EB382D69 * (((unint64_t)v484 >> 32) ^ (v92 >> 47) ^ v92);
      v94 = v93 ^ (v93 >> 47);
      v95 = 0x9DDFEA08EB382D69 * v94;
      if (v500[1])
      {
        v96 = (uint8x8_t)vcnt_s8((int8x8_t)v500[1]);
        v96.i16[0] = vaddlv_u8(v96);
        if (v96.u32[0] > 1uLL)
        {
          v97 = 0x9DDFEA08EB382D69 * v94;
          if ((void *)v95 >= v500[1])
            v97 = v95 % (unint64_t)v500[1];
        }
        else
        {
          v97 = ((unint64_t)v500[1] - 1) & v95;
        }
        v98 = (_QWORD *)*((_QWORD *)v500[0] + v97);
        if (v98)
        {
          v99 = (_QWORD *)*v98;
          if (v99)
          {
            if (v96.u32[0] < 2uLL)
            {
              while (1)
              {
                v101 = v99[1];
                if (v95 == v101)
                {
                  if ((unint64_t *)v99[2] == v484)
                    goto LABEL_112;
                }
                else if ((v101 & ((uint64_t)v500[1] - 1)) != v97)
                {
                  goto LABEL_156;
                }
                v99 = (_QWORD *)*v99;
                if (!v99)
                  goto LABEL_156;
              }
            }
            do
            {
              v100 = v99[1];
              if (v95 == v100)
              {
                if ((unint64_t *)v99[2] == v484)
                  goto LABEL_112;
              }
              else
              {
                if ((void *)v100 >= v500[1])
                  v100 %= (unint64_t)v500[1];
                if (v100 != v97)
                  break;
              }
              v99 = (_QWORD *)*v99;
            }
            while (v99);
          }
        }
      }
LABEL_156:
      v479 = v95;
      v474 = v81;
      v475 = v80;
      v476 = v74;
      *(_OWORD *)v495 = 0u;
      *(_OWORD *)v496 = 0u;
      v497 = 1065353216;
      md::FlyoverCompleteTileDataLogic::addFallbackData(a1, v484, (uint64_t)v495);
      v102 = *v484;
      v103 = *v484;
      v483 = v484[1];
      if (*v484 != v483)
      {
        v104 = v102 + 144;
        v103 = *v484;
        while (1)
        {
          if (v104 == v483)
          {
            v103 = v484[1];
            goto LABEL_166;
          }
          if (*(unsigned __int8 *)(v104 + 112) != *(unsigned __int8 *)(v102 + 112))
            break;
          v103 += 144;
          if (*(unsigned __int8 *)(v104 + 113) == *(unsigned __int8 *)(v102 + 113)
            && *(_DWORD *)(v104 + 116) == *(_DWORD *)(v102 + 116))
          {
            v105 = *(_DWORD *)(v104 + 120);
            v104 += 144;
            if (v105 == *(_DWORD *)(v102 + 120))
              continue;
          }
          goto LABEL_166;
        }
        v103 = v104;
      }
LABEL_166:
      v106 = v484[1];
LABEL_169:
      if (v102 != v106)
      {
        v487 = *(_BYTE *)(v102 + 112);
        v488 = *(_BYTE *)(v102 + 113);
        v486 = *(_QWORD *)(v102 + 116);
        v490 = vcvtmd_s64_f64((double)SHIDWORD(v486) / (double)(1 << v488));
        v489 = v490 - 0x61C8864680B583EBLL;
        v492 = v103;
        while (1)
        {
          if (v102 == v103)
          {
            v107 = v483;
            if (v483 != v103)
            {
              v157 = v103 + 144;
              v107 = v103;
              while (1)
              {
                if (v157 == v483)
                {
                  v107 = v483;
                  goto LABEL_168;
                }
                if (*(unsigned __int8 *)(v157 + 112) != *(unsigned __int8 *)(v103 + 112))
                  break;
                v107 += 144;
                if (*(unsigned __int8 *)(v157 + 113) == *(unsigned __int8 *)(v103 + 113)
                  && *(_DWORD *)(v157 + 116) == *(_DWORD *)(v103 + 116))
                {
                  v158 = *(_DWORD *)(v157 + 120);
                  v157 += 144;
                  if (v158 == *(_DWORD *)(v103 + 120))
                    continue;
                }
                goto LABEL_168;
              }
              v107 = v157;
            }
LABEL_168:
            v106 = v484[1];
            v102 = v103;
            v103 = v107;
            goto LABEL_169;
          }
          if (*(unsigned __int16 *)(v102 + 8) == *(unsigned __int16 *)(a1 + 384))
            break;
LABEL_175:
          v102 += 144;
        }
        md::FlyoverCommon::decodeFlyoverKey((md::FlyoverCommon *)&v524, (const gdc::LayerDataRequestKey *)v102);
        v108 = v526;
        if (!(_BYTE)v526)
        {
LABEL_174:
          a1 = v494;
          v76 = v491;
          v103 = v492;
          goto LABEL_175;
        }
        v109 = BYTE1(v524);
        v110 = v524;
        v111 = *(_QWORD *)((char *)&v526 + 4);
        v112 = HIDWORD(v526);
        v493 = *(_QWORD *)((char *)&v524 + 4);
        v115 = *(_QWORD *)((_BYTE *)&v526 + 4) & 0xFF00000000;
        v116 = 2 * DWORD1(v526);
        if ((*(_QWORD *)((_BYTE *)&v526 + 4) & 0xFF00000000) == 0)
          v116 = 0;
        v113 = (BYTE1(v524)
              - 0x61C8864680B583EBLL
              + ((v524 - 0x61C8864680B583EBLL) << 6)
              + (((unint64_t)v524 - 0x61C8864680B583EBLL) >> 2)) ^ (v524
                                                                                          - 0x61C8864680B583EBLL);
        v114 = (SDWORD1(v524) - 0x61C8864680B583EBLL + (v113 << 6) + (v113 >> 2)) ^ v113;
        v117 = (v116 | ((unint64_t)HIDWORD(v526) << 33)) ^ v114 ^ (SDWORD2(v524)
                                                                        - 0x61C8864680B583EBLL
                                                                        + (v114 << 6)
                                                                        + (v114 >> 2));
        v118 = (v489 + (v117 << 6) + (v117 >> 2)) ^ v117;
        v119 = *(_QWORD *)(v494 + 704);
        if (v119)
        {
          v120 = (uint8x8_t)vcnt_s8((int8x8_t)v119);
          v120.i16[0] = vaddlv_u8(v120);
          if (v120.u32[0] > 1uLL)
          {
            v76 = (v489 + (v117 << 6) + (v117 >> 2)) ^ v117;
            if (v118 >= v119)
              v76 = v118 % v119;
          }
          else
          {
            v76 = v118 & (v119 - 1);
          }
          v121 = *(uint64_t ***)(*(_QWORD *)(v494 + 696) + 8 * v76);
          if (v121)
          {
            v122 = *v121;
            if (v122)
            {
              if (v120.u32[0] <= 1uLL)
              {
                v123 = v119 - 1;
                if (!v115)
                {
                  while (1)
                  {
                    v125 = v122[1];
                    if (v125 == v118)
                    {
                      if (*((unsigned __int8 *)v122 + 40) == v526
                        && __PAIR64__(*((unsigned __int8 *)v122 + 17), *((unsigned __int8 *)v122 + 16)) == __PAIR64__(BYTE1(v524), v524)
                        && *(uint64_t *)((char *)v122 + 20) == *(_QWORD *)((char *)&v524 + 4)
                        && *((_DWORD *)v122 + 13) == HIDWORD(v526)
                        && !*((_BYTE *)v122 + 48)
                        && *((unsigned __int8 *)v122 + 56) == v490)
                      {
                        goto LABEL_174;
                      }
                    }
                    else if ((v125 & v123) != v76)
                    {
                      goto LABEL_239;
                    }
                    v122 = (uint64_t *)*v122;
                    if (!v122)
                      goto LABEL_239;
                  }
                }
                while (1)
                {
                  v124 = v122[1];
                  if (v124 == v118)
                  {
                    if (*((unsigned __int8 *)v122 + 40) == v526
                      && __PAIR64__(*((unsigned __int8 *)v122 + 17), *((unsigned __int8 *)v122 + 16)) == __PAIR64__(BYTE1(v524), v524)
                      && *(uint64_t *)((char *)v122 + 20) == *(_QWORD *)((char *)&v524 + 4)
                      && *((_DWORD *)v122 + 13) == HIDWORD(v526)
                      && *((_BYTE *)v122 + 48)
                      && *((_DWORD *)v122 + 11) == DWORD1(v526)
                      && *((unsigned __int8 *)v122 + 56) == v490)
                    {
                      goto LABEL_174;
                    }
                  }
                  else if ((v124 & v123) != v76)
                  {
                    goto LABEL_239;
                  }
                  v122 = (uint64_t *)*v122;
                  if (!v122)
                    goto LABEL_239;
                }
              }
              if (!v115)
              {
                while (1)
                {
                  v127 = v122[1];
                  if (v127 == v118)
                  {
                    if (*((unsigned __int8 *)v122 + 40) == v526
                      && __PAIR64__(*((unsigned __int8 *)v122 + 17), *((unsigned __int8 *)v122 + 16)) == __PAIR64__(BYTE1(v524), v524)
                      && *(uint64_t *)((char *)v122 + 20) == *(_QWORD *)((char *)&v524 + 4)
                      && *((_DWORD *)v122 + 13) == HIDWORD(v526)
                      && !*((_BYTE *)v122 + 48)
                      && *((unsigned __int8 *)v122 + 56) == v490)
                    {
                      goto LABEL_174;
                    }
                  }
                  else
                  {
                    if (v127 >= v119)
                      v127 %= v119;
                    if (v127 != v76)
                      goto LABEL_239;
                  }
                  v122 = (uint64_t *)*v122;
                  if (!v122)
                    goto LABEL_239;
                }
              }
              do
              {
                v126 = v122[1];
                if (v126 == v118)
                {
                  if (*((unsigned __int8 *)v122 + 40) == v526
                    && __PAIR64__(*((unsigned __int8 *)v122 + 17), *((unsigned __int8 *)v122 + 16)) == __PAIR64__(BYTE1(v524), v524)
                    && *(uint64_t *)((char *)v122 + 20) == *(_QWORD *)((char *)&v524 + 4)
                    && *((_DWORD *)v122 + 13) == HIDWORD(v526)
                    && *((_BYTE *)v122 + 48)
                    && *((_DWORD *)v122 + 11) == DWORD1(v526)
                    && *((unsigned __int8 *)v122 + 56) == v490)
                  {
                    goto LABEL_174;
                  }
                }
                else
                {
                  if (v126 >= v119)
                    v126 %= v119;
                  if (v126 != v76)
                    break;
                }
                v122 = (uint64_t *)*v122;
              }
              while (v122);
            }
          }
        }
LABEL_239:
        v128 = (char *)operator new(0x58uLL);
        *(_QWORD *)v128 = 0;
        *((_QWORD *)v128 + 1) = v118;
        v128[16] = v110;
        v128[17] = v109;
        *(_QWORD *)(v128 + 20) = v493;
        v128[40] = v108;
        *(_WORD *)(v128 + 41) = *(_WORD *)((char *)&v526 + 1);
        v128[43] = BYTE3(v526);
        *(_QWORD *)(v128 + 44) = v111;
        *((_DWORD *)v128 + 13) = v112;
        v128[56] = v490;
        v128[64] = v487;
        v128[65] = v488;
        *(_QWORD *)(v128 + 68) = v486;
        v129 = (float)(unint64_t)(*(_QWORD *)(v494 + 720) + 1);
        v130 = *(float *)(v494 + 728);
        if (v119 && (float)(v130 * (float)v119) >= v129)
        {
LABEL_289:
          v153 = *(_QWORD *)(v494 + 696);
          v154 = *(_QWORD **)(v153 + 8 * v76);
          if (v154)
          {
            *(_QWORD *)v128 = *v154;
          }
          else
          {
            *(_QWORD *)v128 = *v485;
            *v485 = v128;
            *(_QWORD *)(v153 + 8 * v76) = v485;
            if (!*(_QWORD *)v128)
              goto LABEL_173;
            v155 = *(_QWORD *)(*(_QWORD *)v128 + 8);
            if ((v119 & (v119 - 1)) != 0)
            {
              if (v155 >= v119)
                v155 %= v119;
            }
            else
            {
              v155 &= v119 - 1;
            }
            v154 = (_QWORD *)(*(_QWORD *)(v494 + 696) + 8 * v155);
          }
          *v154 = v128;
LABEL_173:
          ++*(_QWORD *)(v494 + 720);
          goto LABEL_174;
        }
        v131 = (v119 & (v119 - 1)) != 0;
        if (v119 < 3)
          v131 = 1;
        v132 = v131 | (2 * v119);
        v133 = vcvtps_u32_f32(v129 / v130);
        if (v132 <= v133)
          prime = v133;
        else
          prime = v132;
        if (prime == 1)
        {
          prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          prime = std::__next_prime(prime);
          v119 = *(_QWORD *)(v494 + 704);
        }
        if (prime <= v119)
        {
          if (prime >= v119)
            goto LABEL_276;
          v146 = vcvtps_u32_f32((float)*(unint64_t *)(v494 + 720) / *(float *)(v494 + 728));
          if (v119 < 3
            || (v147 = (uint8x8_t)vcnt_s8((int8x8_t)v119), v147.i16[0] = vaddlv_u8(v147), v147.u32[0] > 1uLL))
          {
            v146 = std::__next_prime(v146);
          }
          else
          {
            v148 = 1 << -(char)__clz(v146 - 1);
            if (v146 >= 2)
              v146 = v148;
          }
          if (prime <= v146)
            prime = v146;
          if (prime >= v119)
          {
            v119 = *(_QWORD *)(v494 + 704);
LABEL_276:
            if ((v119 & (v119 - 1)) != 0)
            {
              if (v118 >= v119)
                v76 = v118 % v119;
              else
                v76 = v118;
            }
            else
            {
              v76 = (v119 - 1) & v118;
            }
            goto LABEL_289;
          }
          if (!prime)
          {
            v156 = *(void **)(v494 + 696);
            *(_QWORD *)(v494 + 696) = 0;
            if (v156)
              operator delete(v156);
            v119 = 0;
            *(_QWORD *)(v494 + 704) = 0;
            goto LABEL_276;
          }
        }
        if (prime >> 61)
          goto LABEL_996;
        v135 = operator new(8 * prime);
        v136 = *(void **)(v494 + 696);
        *(_QWORD *)(v494 + 696) = v135;
        if (v136)
          operator delete(v136);
        v137 = 0;
        *(_QWORD *)(v494 + 704) = prime;
        do
          *(_QWORD *)(*(_QWORD *)(v494 + 696) + 8 * v137++) = 0;
        while (prime != v137);
        v138 = (_QWORD *)*v485;
        if (!*v485)
        {
LABEL_275:
          v119 = prime;
          goto LABEL_276;
        }
        v139 = v138[1];
        v140 = prime - 1;
        if ((prime & (prime - 1)) == 0)
        {
          v141 = v139 & v140;
          *(_QWORD *)(*(_QWORD *)(v494 + 696) + 8 * v141) = v485;
          for (m = (_QWORD *)*v138; *v138; m = (_QWORD *)*v138)
          {
            v143 = m[1] & v140;
            if (v143 == v141)
            {
              v138 = m;
            }
            else
            {
              v144 = *(_QWORD *)(v494 + 696);
              if (*(_QWORD *)(v144 + 8 * v143))
              {
                *v138 = *m;
                v145 = 8 * v143;
                *m = **(_QWORD **)(*(_QWORD *)(v494 + 696) + v145);
                **(_QWORD **)(*(_QWORD *)(v494 + 696) + v145) = m;
              }
              else
              {
                *(_QWORD *)(v144 + 8 * v143) = v138;
                v138 = m;
                v141 = v143;
              }
            }
          }
          goto LABEL_275;
        }
        if (v139 >= prime)
          v139 %= prime;
        *(_QWORD *)(*(_QWORD *)(v494 + 696) + 8 * v139) = v485;
        v149 = (_QWORD *)*v138;
        if (!*v138)
          goto LABEL_275;
        while (1)
        {
          v151 = v149[1];
          if (v151 >= prime)
            v151 %= prime;
          if (v151 != v139)
          {
            v152 = *(_QWORD *)(v494 + 696);
            if (!*(_QWORD *)(v152 + 8 * v151))
            {
              *(_QWORD *)(v152 + 8 * v151) = v138;
              goto LABEL_280;
            }
            *v138 = *v149;
            v150 = 8 * v151;
            *v149 = **(_QWORD **)(*(_QWORD *)(v494 + 696) + v150);
            **(_QWORD **)(*(_QWORD *)(v494 + 696) + v150) = v149;
            v149 = v138;
          }
          v151 = v139;
LABEL_280:
          v138 = v149;
          v149 = (_QWORD *)*v149;
          v139 = v151;
          if (!v149)
            goto LABEL_275;
        }
      }
      v159 = *v473;
      if ((unint64_t *)*v473 == v482)
        goto LABEL_315;
      while (2)
      {
        v172 = *(_QWORD *)(v159 + 32);
        if (!v172)
          goto LABEL_413;
        v173 = (_QWORD *)(v172 + 820);
        v174 = *(_QWORD *)(v172 + 844);
        v175 = v174 & 0xFF00000000;
        if ((v174 & 0xFF00000000) != 0)
          v176 = 2 * *(_QWORD *)(v172 + 844);
        else
          v176 = 0;
        v177 = *(int8x8_t *)(a1 + 704);
        if (!*(_QWORD *)&v177)
          goto LABEL_398;
        v178 = *(unsigned __int8 *)(v172 + 817);
        v179 = *(unsigned __int8 *)(v172 + 816);
        v180 = *(unsigned int *)(v172 + 852);
        v181 = (v178
              - 0x61C8864680B583EBLL
              + ((v179 - 0x61C8864680B583EBLL) << 6)
              + ((unint64_t)(v179 - 0x61C8864680B583EBLL) >> 2)) ^ (v179 - 0x61C8864680B583EBLL);
        v182 = HIDWORD(*v173);
        v183 = *v173;
        v184 = (v183 - 0x61C8864680B583EBLL + (v181 << 6) + (v181 >> 2)) ^ v181;
        v185 = (v176 | (v180 << 33)) ^ v184 ^ (v182 - 0x61C8864680B583EBLL + (v184 << 6) + (v184 >> 2));
        v186 = (*(char *)(v159 + 48) - 0x61C8864680B583EBLL + (v185 << 6) + (v185 >> 2)) ^ v185;
        v187 = (uint8x8_t)vcnt_s8(v177);
        v187.i16[0] = vaddlv_u8(v187);
        if (v187.u32[0] > 1uLL)
        {
          v188 = v186;
          if (v186 >= *(_QWORD *)&v177)
            v188 = v186 % *(_QWORD *)&v177;
        }
        else
        {
          v188 = v186 & (*(_QWORD *)&v177 - 1);
        }
        v189 = *(uint64_t ***)(*(_QWORD *)(a1 + 696) + 8 * v188);
        if (!v189 || (v190 = *v189) == 0)
        {
LABEL_398:
          v195 = 0;
          goto LABEL_399;
        }
        v191 = *(unsigned __int8 *)(v172 + 840);
        v192 = *(unsigned __int8 *)(v159 + 48);
        if (v187.u32[0] <= 1uLL)
        {
          v193 = *(_QWORD *)&v177 - 1;
          if (!v175)
          {
            while (1)
            {
              v196 = v190[1];
              if (v196 == v186)
              {
                if (*((unsigned __int8 *)v190 + 40) == v191
                  && __PAIR64__(*((unsigned __int8 *)v190 + 17), *((unsigned __int8 *)v190 + 16)) == __PAIR64__(v178, v179)
                  && *((_DWORD *)v190 + 5) == v183
                  && *((_DWORD *)v190 + 6) == v182
                  && *((_DWORD *)v190 + 13) == (_DWORD)v180
                  && !*((_BYTE *)v190 + 48)
                  && *((unsigned __int8 *)v190 + 56) == v192)
                {
                  goto LABEL_368;
                }
              }
              else if ((v196 & v193) != v188)
              {
                goto LABEL_398;
              }
              v195 = 0;
              v190 = (uint64_t *)*v190;
              if (!v190)
                goto LABEL_399;
            }
          }
          while (1)
          {
            v194 = v190[1];
            if (v194 == v186)
            {
              if (*((unsigned __int8 *)v190 + 40) == v191
                && __PAIR64__(*((unsigned __int8 *)v190 + 17), *((unsigned __int8 *)v190 + 16)) == __PAIR64__(v178, v179)&& *((_DWORD *)v190 + 5) == v183&& *((_DWORD *)v190 + 6) == v182&& *((_DWORD *)v190 + 13) == (_DWORD)v180&& *((_BYTE *)v190 + 48)&& *((_DWORD *)v190 + 11) == (_DWORD)v174&& *((unsigned __int8 *)v190 + 56) == v192)
              {
                goto LABEL_368;
              }
            }
            else if ((v194 & v193) != v188)
            {
              goto LABEL_398;
            }
            v190 = (uint64_t *)*v190;
            if (!v190)
              goto LABEL_398;
          }
        }
        if (!v175)
        {
          while (1)
          {
            v198 = v190[1];
            if (v198 == v186)
            {
              if (*((unsigned __int8 *)v190 + 40) == v191
                && __PAIR64__(*((unsigned __int8 *)v190 + 17), *((unsigned __int8 *)v190 + 16)) == __PAIR64__(v178, v179)&& *((_DWORD *)v190 + 5) == v183&& *((_DWORD *)v190 + 6) == v182&& *((_DWORD *)v190 + 13) == (_DWORD)v180&& !*((_BYTE *)v190 + 48)&& *((unsigned __int8 *)v190 + 56) == v192)
              {
                goto LABEL_368;
              }
            }
            else
            {
              if (v198 >= *(_QWORD *)&v177)
                v198 %= *(_QWORD *)&v177;
              if (v198 != v188)
                goto LABEL_398;
            }
            v195 = 0;
            v190 = (uint64_t *)*v190;
            if (!v190)
              goto LABEL_399;
          }
        }
        while (1)
        {
          v197 = v190[1];
          if (v197 == v186)
            break;
          if (v197 >= *(_QWORD *)&v177)
            v197 %= *(_QWORD *)&v177;
          if (v197 != v188)
            goto LABEL_398;
LABEL_372:
          v190 = (uint64_t *)*v190;
          if (!v190)
            goto LABEL_398;
        }
        if (*((unsigned __int8 *)v190 + 40) != v191
          || __PAIR64__(*((unsigned __int8 *)v190 + 17), *((unsigned __int8 *)v190 + 16)) != __PAIR64__(v178, v179)
          || *((_DWORD *)v190 + 5) != v183
          || *((_DWORD *)v190 + 6) != v182
          || *((_DWORD *)v190 + 13) != (_DWORD)v180
          || !*((_BYTE *)v190 + 48)
          || *((_DWORD *)v190 + 11) != (_DWORD)v174
          || *((unsigned __int8 *)v190 + 56) != v192)
        {
          goto LABEL_372;
        }
LABEL_368:
        v195 = v190;
LABEL_399:
        LOBYTE(v512) = 0;
        v199 = (__int128 *)operator new(0x30uLL);
        *(_QWORD *)v199 = &off_1E427AF98;
        *((_QWORD *)v199 + 1) = a1;
        *((_QWORD *)v199 + 2) = v172 + 816;
        *((_QWORD *)v199 + 3) = &v512;
        *((_QWORD *)v199 + 4) = &v498;
        *((_QWORD *)v199 + 5) = v195 + 8;
        *(_QWORD *)&v526 = v199;
        v200 = v481[3];
        if (!v200
          || (v201 = std::__hash_table<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>>>::find<geo::QuadTile>(v200, (unsigned __int8 *)(v172 + 816))) == 0)
        {
LABEL_406:
          v203 = 5;
LABEL_407:
          (*(void (**)(__int128 *))(*(_QWORD *)v199 + 8 * v203))(v199);
          goto LABEL_408;
        }
        v202 = (_QWORD *)v201[7];
        if (!v202)
        {
          v203 = 5;
          v76 = v491;
          goto LABEL_407;
        }
        do
        {
          if (!(_QWORD)v526)
            goto LABEL_997;
          (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)v526 + 48))(v526, v202 + 2);
          v202 = (_QWORD *)*v202;
        }
        while (v202);
        v199 = (__int128 *)v526;
        if ((__int128 *)v526 == &v524)
        {
          v199 = &v524;
          v203 = 4;
          v76 = v491;
          goto LABEL_407;
        }
        v76 = v491;
        if ((_QWORD)v526)
          goto LABEL_406;
LABEL_408:
        if (!(_BYTE)v512)
        {
          v204 = *(unsigned __int8 *)(v172 + 817);
          LOBYTE(__p[0]) = *(_BYTE *)(v172 + 816);
          BYTE1(__p[0]) = v204;
          *(void **)((char *)__p + 4) = *(void **)v173;
          *(_OWORD *)&v515[8] = *(_OWORD *)(v172 + 840);
          v205 = *((unsigned __int8 *)v195 + 65);
          if (v204 < v205 && *(_BYTE *)(v172 + 840) == 2)
          {
            v206 = *(void **)((char *)v195 + 68);
            LOBYTE(__p[0]) = *((_BYTE *)v195 + 64);
            BYTE1(__p[0]) = v205;
            *(void **)((char *)__p + 4) = v206;
            v515[8] = 2;
            *(_QWORD *)&v515[12] = 0;
            *(_DWORD *)&v515[20] = 0;
          }
          md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo::FlyoverOctileTileInfo((uint64_t)&v524, (char *)(v172 + 816), (uint64_t)__p, (uint64_t)(v195 + 8));
          std::__tree<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare,std::allocator<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo>>::__emplace_unique_key_args<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo const&>((uint64_t **)&v498, (uint64_t)&v524, (uint64_t)&v524);
        }
LABEL_413:
        v207 = *(unint64_t **)(v159 + 8);
        if (v207)
        {
          do
          {
            v208 = v207;
            v207 = (unint64_t *)*v207;
          }
          while (v207);
        }
        else
        {
          do
          {
            v208 = *(unint64_t **)(v159 + 16);
            _ZF = *v208 == v159;
            v159 = (unint64_t)v208;
          }
          while (!_ZF);
        }
        v159 = (unint64_t)v208;
        if (v208 != v482)
          continue;
        break;
      }
LABEL_315:
      v160 = (unsigned __int8 *)v496[0];
      if (v496[0])
      {
        do
        {
          v161 = v160[57];
          LOBYTE(__p[0]) = v160[56];
          BYTE1(__p[0]) = v161;
          *(void **)((char *)__p + 4) = *(void **)(v160 + 60);
          *(_OWORD *)&v515[8] = *((_OWORD *)v160 + 5);
          v162 = v160[209];
          _ZF = v161 < v162 && v515[8] == 2;
          if (_ZF)
          {
            v164 = *(void **)(v160 + 212);
            LOBYTE(__p[0]) = v160[208];
            BYTE1(__p[0]) = v162;
            *(void **)((char *)__p + 4) = v164;
            v515[8] = 2;
            *(_QWORD *)&v515[12] = 0;
            *(_DWORD *)&v515[20] = 0;
          }
          md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo::FlyoverOctileTileInfo((uint64_t)&v524, (char *)v160 + 16, (uint64_t)__p, (uint64_t)(v160 + 208));
          std::__tree<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare,std::allocator<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo>>::__emplace_unique_key_args<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo const&>((uint64_t **)&v498, (uint64_t)&v524, (uint64_t)&v524);
          v160 = *(unsigned __int8 **)v160;
        }
        while (v160);
      }
      if (!*(_BYTE *)(a1 + 808))
        goto LABEL_715;
      v509[0] = 0;
      v509[1] = 0;
      v508 = v509;
      v165 = *(_QWORD *)(a1 + 672);
      v511 = v76;
      v512 = (_QWORD **)v498;
      v505 = (_QWORD **)&v498 + 1;
      v516 = v165;
      __p[0] = &v508;
      __p[1] = v509;
      std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare &,std::__tree_const_iterator<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,std::__tree_node<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,void *> *,long> &,std::__tree_const_iterator<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,std::__tree_node<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,void *> *,long> &,std::__tree_const_iterator<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,std::__tree_node<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,void *> *,long> &,std::__tree_const_iterator<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,std::__tree_node<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,void *> *,long> &,std::insert_iterator<std::set<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare,std::allocator<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo>>> &>((char *)&v524, (uint64_t)&v512, &v505, (uint64_t)&v516, &v511, (uint64_t)__p);
      v506 = 0;
      v507 = 0;
      v505 = &v506;
      v166 = *(_QWORD ***)(a1 + 672);
      v511 = v498;
      v512 = v166;
      v516 = v76;
      v510 = (char *)&v498 + 8;
      __p[0] = &v505;
      __p[1] = &v506;
      std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare &,std::__tree_const_iterator<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,std::__tree_node<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,void *> *,long> &,std::__tree_const_iterator<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,std::__tree_node<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,void *> *,long> &,std::__tree_const_iterator<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,std::__tree_node<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,void *> *,long> &,std::__tree_const_iterator<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,std::__tree_node<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,void *> *,long> &,std::insert_iterator<std::set<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare,std::allocator<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo>>> &>((char *)&v524, (uint64_t)&v512, &v516, (uint64_t)&v511, &v510, (uint64_t)__p);
      v167 = v508;
      if (v508 != v509)
      {
        while (1)
        {
          v159 = (unint64_t)(v167 + 12);
          if (*((_BYTE *)v167 + 56) != 2 && *((_BYTE *)v167 + 96) != 2)
            break;
LABEL_635:
          v310 = v167[1];
          if (v310)
          {
            do
            {
              v311 = (_QWORD **)v310;
              v310 = (_QWORD *)*v310;
            }
            while (v310);
          }
          else
          {
            do
            {
              v311 = (_QWORD **)v167[2];
              _ZF = *v311 == v167;
              v167 = v311;
            }
            while (!_ZF);
          }
          v167 = v311;
          if (v311 == v509)
            goto LABEL_325;
        }
        *((_QWORD *)&v524 + 1) = 0;
        v525 = 0;
        *(_QWORD *)&v524 = (char *)&v524 + 8;
        *(_QWORD *)&v526 = 0;
        *((double *)&v526 + 1) = v18;
        if (!v507)
          goto LABEL_634;
        v210 = v506;
        v211 = &v506;
        v212 = &v506;
        v213 = v506;
        if (v506)
        {
          do
          {
            v214 = md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare::operator()((uint64_t)(v213 + 4), (uint64_t)(v167 + 4));
            v215 = v213 + 1;
            if (!v214)
            {
              v215 = v213;
              v212 = (_QWORD **)v213;
            }
            v213 = (_QWORD *)*v215;
          }
          while (*v215);
          if (v212 == &v506)
          {
            do
            {
              v211 = (_QWORD **)v210;
              v210 = (_QWORD *)v210[1];
            }
            while (v210);
            v212 = &v506;
          }
          else
          {
            if (v212 == v505)
            {
              v224 = &v506;
LABEL_464:
              if (v224 == &v506)
                goto LABEL_465;
LABEL_483:
              if (v224 == &v506)
                goto LABEL_634;
              v236 = &v506;
              if (v212 == &v506)
                goto LABEL_505;
              v237 = *((unsigned __int8 *)v167 + 73);
              v238 = *((_DWORD *)v167 + 19);
              v239 = *((_DWORD *)v167 + 20);
              v240 = *((_DWORD *)v167 + 27);
              v236 = &v506;
              while (1)
              {
                if (*((unsigned __int8 *)v167 + 72) != *((unsigned __int8 *)v212 + 72))
                {
LABEL_503:
                  v236 = v212;
                  if (v224 == v212)
                    goto LABEL_634;
                  goto LABEL_508;
                }
                v241 = *((unsigned __int8 *)v212 + 73);
                if (v237 >= v241)
                {
                  if (v237 != v241
                    || v238 != *((_DWORD *)v212 + 19)
                    || v239 != *((_DWORD *)v212 + 20)
                    || v240 != *((_DWORD *)v212 + 27))
                  {
                    goto LABEL_503;
                  }
                }
                else
                {
                  v242 = v241 - v237;
                  if (v238 != *((int *)v212 + 19) >> v242 || v239 != *((int *)v212 + 20) >> v242)
                    goto LABEL_503;
                  if (v240 != *((_DWORD *)v212 + 27) >> v242)
                  {
                    v236 = v212;
LABEL_505:
                    if (v224 == v236)
                    {
LABEL_634:
                      std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)&v524 + 1));
                      goto LABEL_635;
                    }
                    do
                    {
LABEL_508:
                      if (*((_BYTE *)v224 + 56) != 2 && *((_BYTE *)v224 + 96) != 2)
                        std::__tree<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare,std::allocator<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo>>::__emplace_unique_key_args<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo const&>((uint64_t **)&v524, (uint64_t)(v224 + 4), (uint64_t)(v224 + 4));
                      v246 = v224[1];
                      if (v246)
                      {
                        do
                        {
                          v247 = v246;
                          v246 = (_QWORD *)*v246;
                        }
                        while (v246);
                      }
                      else
                      {
                        do
                        {
                          v247 = v224[2];
                          _ZF = *v247 == (_QWORD)v224;
                          v224 = (_QWORD **)v247;
                        }
                        while (!_ZF);
                      }
                      v224 = (_QWORD **)v247;
                    }
                    while (v247 != v236);
                    if (!v525)
                      goto LABEL_634;
                    v248 = v480;
                    while (1)
                    {
                      v249 = *v248;
                      v250 = v248;
                      if (!*v248)
                        break;
                      while (1)
                      {
                        v248 = (uint64_t **)v249;
                        v251 = (uint64_t)(v249 + 4);
                        if (md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare::operator()((uint64_t)(v167 + 4), (uint64_t)(v249 + 4)))
                        {
                          break;
                        }
                        if (!md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare::operator()(v251, (uint64_t)(v167 + 4)))
                        {
                          v252 = (char *)v248;
                          goto LABEL_529;
                        }
                        v250 = v248 + 1;
                        v249 = v248[1];
                        if (!v249)
                          goto LABEL_525;
                      }
                    }
LABEL_525:
                    v252 = (char *)operator new(0x130uLL);
                    *((_WORD *)v252 + 16) = *((_WORD *)v167 + 16);
                    *(_QWORD *)(v252 + 36) = *(_QWORD **)((char *)v167 + 36);
                    *(_OWORD *)(v252 + 56) = *(_OWORD *)(v167 + 7);
                    *((_WORD *)v252 + 36) = *((_WORD *)v167 + 36);
                    *(_QWORD *)(v252 + 76) = *(_QWORD **)((char *)v167 + 76);
                    *((_OWORD *)v252 + 6) = *(_OWORD *)v159;
                    *((_WORD *)v252 + 56) = *((_WORD *)v167 + 56);
                    *(_QWORD *)(v252 + 116) = *(_QWORD **)((char *)v167 + 116);
                    *((_QWORD *)v252 + 17) = v167[17];
                    *((_WORD *)v252 + 72) = *((_WORD *)v167 + 72);
                    *(_QWORD *)(v252 + 148) = *(_QWORD **)((char *)v167 + 148);
                    *(_OWORD *)(v252 + 168) = *(_OWORD *)(v167 + 21);
                    v252[184] = *((_BYTE *)v167 + 184);
                    *((_QWORD *)v252 + 24) = v167[24];
                    *((_WORD *)v252 + 100) = *((_WORD *)v167 + 100);
                    *(_QWORD *)(v252 + 204) = *(_QWORD **)((char *)v167 + 204);
                    *((_OWORD *)v252 + 14) = *((_OWORD *)v167 + 14);
                    v252[240] = *((_BYTE *)v167 + 240);
                    *(_OWORD *)(v252 + 248) = *(_OWORD *)(v167 + 31);
                    *((_QWORD *)v252 + 33) = v252 + 272;
                    *((_QWORD *)v252 + 34) = 0;
                    *((_QWORD *)v252 + 36) = 0;
                    *((_QWORD *)v252 + 37) = 0;
                    *((_QWORD *)v252 + 35) = 0;
                    *(_QWORD *)v252 = 0;
                    *((_QWORD *)v252 + 1) = 0;
                    *((_QWORD *)v252 + 2) = v248;
                    *v250 = (uint64_t *)v252;
                    v253 = **(_QWORD **)(a1 + 736);
                    v254 = (uint64_t *)v252;
                    if (v253)
                    {
                      *(_QWORD *)(a1 + 736) = v253;
                      v254 = *v250;
                    }
                    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 744), v254);
                    ++*(_QWORD *)(a1 + 752);
LABEL_529:
                    v159 = (unint64_t)(v252 + 264);
                    if (v252 + 264 != (char *)&v524)
                    {
                      v255 = (char *)v524;
                      if (*((_QWORD *)v252 + 35))
                      {
                        v256 = (char **)(v252 + 272);
                        v257 = *((_QWORD *)v252 + 33);
                        v258 = *((_QWORD *)v252 + 34);
                        *((_QWORD *)v252 + 33) = v252 + 272;
                        *(_QWORD *)(v258 + 16) = 0;
                        *((_QWORD *)v252 + 34) = 0;
                        *((_QWORD *)v252 + 35) = 0;
                        v259 = *(_QWORD *)(v257 + 8) ? *(_QWORD **)(v257 + 8) : (_QWORD *)v257;
                        if (v259)
                        {
                          v260 = (_QWORD *)v259[2];
                          if (v260)
                          {
                            v261 = (_QWORD *)*v260;
                            if ((_QWORD *)*v260 == v259)
                            {
                              *v260 = 0;
                              while (1)
                              {
                                v312 = (_QWORD *)v260[1];
                                if (!v312)
                                  break;
                                do
                                {
                                  v260 = v312;
                                  v312 = (_QWORD *)*v312;
                                }
                                while (v312);
                              }
                            }
                            else
                            {
                              for (v260[1] = 0; v261; v261 = (_QWORD *)v260[1])
                              {
                                do
                                {
                                  v260 = v261;
                                  v261 = (_QWORD *)*v261;
                                }
                                while (v261);
                              }
                            }
                          }
                          if (v255 == (char *)&v524 + 8)
                          {
                            v298 = (char *)&v524 + 8;
                            v262 = v259;
                            goto LABEL_611;
                          }
                          while (1)
                          {
                            v262 = v260;
                            v263 = *((_OWORD *)v255 + 2);
                            v264 = *((_OWORD *)v255 + 4);
                            *((_OWORD *)v259 + 3) = *((_OWORD *)v255 + 3);
                            *((_OWORD *)v259 + 4) = v264;
                            *((_OWORD *)v259 + 2) = v263;
                            v265 = *((_OWORD *)v255 + 5);
                            v266 = *((_OWORD *)v255 + 6);
                            v267 = *((_OWORD *)v255 + 8);
                            *((_OWORD *)v259 + 7) = *((_OWORD *)v255 + 7);
                            *((_OWORD *)v259 + 8) = v267;
                            *((_OWORD *)v259 + 5) = v265;
                            *((_OWORD *)v259 + 6) = v266;
                            v268 = *((_OWORD *)v255 + 9);
                            v269 = *((_OWORD *)v255 + 10);
                            v270 = *((_OWORD *)v255 + 12);
                            *((_OWORD *)v259 + 11) = *((_OWORD *)v255 + 11);
                            *((_OWORD *)v259 + 12) = v270;
                            *((_OWORD *)v259 + 9) = v268;
                            *((_OWORD *)v259 + 10) = v269;
                            v271 = *((_OWORD *)v255 + 13);
                            v272 = *((_OWORD *)v255 + 14);
                            v273 = *((_OWORD *)v255 + 15);
                            v259[32] = *((_QWORD *)v255 + 32);
                            *((_OWORD *)v259 + 14) = v272;
                            *((_OWORD *)v259 + 15) = v273;
                            *((_OWORD *)v259 + 13) = v271;
                            v274 = *v256;
                            v275 = v252 + 272;
                            v276 = v252 + 272;
                            if (!*v256)
                              goto LABEL_587;
                            v277 = v259[24];
                            do
                            {
                              while (1)
                              {
                                v275 = v274;
                                v278 = *((_QWORD *)v274 + 24);
                                if (v277 != v278)
                                {
                                  v285 = *((unsigned __int8 *)v259 + 240);
                                  v286 = v274[240];
                                  if (v285 >= v286)
                                  {
                                    if (v285 <= v286)
                                    {
                                      if (v277 >= v278)
                                        goto LABEL_581;
                                      goto LABEL_543;
                                    }
                                    v289 = v277 >> (3 * (v285 - v286));
                                    _CF = v277 == v289 || v289 >= v278;
                                    if (!_CF)
                                      goto LABEL_543;
                                  }
                                  else if (v277 <= v278 >> (3 * (v286 - v285)))
                                  {
                                    goto LABEL_543;
                                  }
                                  goto LABEL_581;
                                }
                                v279 = v259[17];
                                v280 = *((_QWORD *)v274 + 17);
                                if (v279 != v280)
                                {
                                  v287 = *((unsigned __int8 *)v259 + 184);
                                  v288 = v275[184];
                                  if (v287 >= v288)
                                  {
                                    if (v287 <= v288)
                                      goto LABEL_580;
                                    v292 = v279 >> (3 * (v287 - v288));
                                    if (v279 != v292 && v292 < v280)
                                      goto LABEL_543;
                                  }
                                  else if (v279 <= v280 >> (3 * (v288 - v287)))
                                  {
                                    goto LABEL_543;
                                  }
                                  goto LABEL_581;
                                }
                                v281 = *((unsigned __int8 *)v259 + 256);
                                v282 = v275[256];
                                v283 = v281 - v282;
                                if (v281 >= v282)
                                  break;
                                v284 = *((unsigned __int8 *)v259 + 257);
                                if (v284 != BYTE1(*((_QWORD *)v275 + 32)))
                                {
                                  if ((char)v284 < (char)BYTE1(*((_QWORD *)v275 + 32)))
                                    goto LABEL_543;
                                  goto LABEL_581;
                                }
                                if (v259[31] > *((_QWORD *)v275 + 31) >> (2
                                                                         * (v282 - v281)))
                                  goto LABEL_581;
LABEL_543:
                                v274 = *(char **)v275;
                                v276 = v275;
                                if (!*(_QWORD *)v275)
                                  goto LABEL_587;
                              }
                              if (v281 <= v282)
                              {
                                v294 = *((unsigned __int8 *)v259 + 257);
                                v295 = v275[257];
                                if (v294 == v295)
                                {
                                  v279 = v259[31];
                                  goto LABEL_579;
                                }
                                if ((char)v294 < (char)v295)
                                  goto LABEL_543;
                              }
                              else
                              {
                                v291 = v275[257];
                                if (v291 == BYTE1(v259[32]))
                                {
                                  v279 = v259[31] >> (2 * v283);
LABEL_579:
                                  v280 = *((_QWORD *)v275 + 31);
LABEL_580:
                                  if (v279 >= v280)
                                    goto LABEL_581;
                                  goto LABEL_543;
                                }
                                if ((char)v291 > (char)BYTE1(v259[32]))
                                  goto LABEL_543;
                              }
LABEL_581:
                              v274 = (char *)*((_QWORD *)v275 + 1);
                            }
                            while (v274);
                            v276 = v275 + 8;
LABEL_587:
                            *v259 = 0;
                            v259[1] = 0;
                            v259[2] = v275;
                            *v276 = v259;
                            v296 = **(_QWORD **)v159;
                            if (v296)
                            {
                              *(_QWORD *)v159 = v296;
                              v259 = (_QWORD *)*v276;
                            }
                            std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v252 + 34), v259);
                            ++*((_QWORD *)v252 + 35);
                            if (v260)
                            {
                              v260 = (_QWORD *)v260[2];
                              if (v260)
                              {
                                v299 = (_QWORD *)*v260;
                                if ((_QWORD *)*v260 == v262)
                                {
                                  *v260 = 0;
                                  while (1)
                                  {
                                    v300 = (_QWORD *)v260[1];
                                    if (!v300)
                                      break;
                                    do
                                    {
                                      v260 = v300;
                                      v300 = (_QWORD *)*v300;
                                    }
                                    while (v300);
                                  }
                                }
                                else
                                {
                                  for (v260[1] = 0; v299; v299 = (_QWORD *)v260[1])
                                  {
                                    do
                                    {
                                      v260 = v299;
                                      v299 = (_QWORD *)*v299;
                                    }
                                    while (v299);
                                  }
                                }
                              }
                            }
                            else
                            {
                              v260 = 0;
                            }
                            v297 = (char *)*((_QWORD *)v255 + 1);
                            if (v297)
                            {
                              do
                              {
                                v298 = v297;
                                v297 = *(char **)v297;
                              }
                              while (v297);
                            }
                            else
                            {
                              do
                              {
                                v298 = (char *)*((_QWORD *)v255 + 2);
                                _ZF = *(_QWORD *)v298 == (_QWORD)v255;
                                v255 = v298;
                              }
                              while (!_ZF);
                            }
                            if (v262)
                            {
                              v259 = v262;
                              v255 = v298;
                              if (v298 != (char *)&v524 + 8)
                                continue;
                            }
LABEL_611:
                            std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v262);
                            if (v260)
                            {
                              for (n = (_QWORD *)v260[2]; n; n = (_QWORD *)n[2])
                                v260 = n;
                              std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v260);
                            }
                            goto LABEL_615;
                          }
                        }
                      }
                      v298 = v255;
LABEL_615:
                      if (v298 != (char *)&v524 + 8)
                      {
                        v302 = (char **)(v252 + 272);
                        do
                        {
                          v303 = (char *)operator new(0x108uLL);
                          *((_WORD *)v303 + 16) = *((_WORD *)v298 + 16);
                          *(_QWORD *)(v303 + 36) = *(_QWORD *)(v298 + 36);
                          *(_OWORD *)(v303 + 56) = *(_OWORD *)(v298 + 56);
                          *((_WORD *)v303 + 36) = *((_WORD *)v298 + 36);
                          *(_QWORD *)(v303 + 76) = *(_QWORD *)(v298 + 76);
                          *((_OWORD *)v303 + 6) = *((_OWORD *)v298 + 6);
                          *((_WORD *)v303 + 56) = *((_WORD *)v298 + 56);
                          *(_QWORD *)(v303 + 116) = *(_QWORD *)(v298 + 116);
                          *((_QWORD *)v303 + 17) = *((_QWORD *)v298 + 17);
                          *((_WORD *)v303 + 72) = *((_WORD *)v298 + 72);
                          *(_QWORD *)(v303 + 148) = *(_QWORD *)(v298 + 148);
                          *(_OWORD *)(v303 + 168) = *(_OWORD *)(v298 + 168);
                          v303[184] = v298[184];
                          *((_QWORD *)v303 + 24) = *((_QWORD *)v298 + 24);
                          *((_WORD *)v303 + 100) = *((_WORD *)v298 + 100);
                          *(_QWORD *)(v303 + 204) = *(_QWORD *)(v298 + 204);
                          *((_OWORD *)v303 + 14) = *((_OWORD *)v298 + 14);
                          v303[240] = v298[240];
                          *(_OWORD *)(v303 + 248) = *(_OWORD *)(v298 + 248);
                          v304 = *v302;
                          v305 = (char **)(v252 + 272);
                          v306 = (char **)(v252 + 272);
                          if (*v302)
                          {
                            do
                            {
                              while (1)
                              {
                                v305 = (char **)v304;
                                if (!md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare::operator()((uint64_t)(v303 + 32), (uint64_t)(v304 + 32)))break;
                                v304 = *v305;
                                v306 = v305;
                                if (!*v305)
                                  goto LABEL_625;
                              }
                              v304 = v305[1];
                            }
                            while (v304);
                            v306 = v305 + 1;
                          }
LABEL_625:
                          *(_QWORD *)v303 = 0;
                          *((_QWORD *)v303 + 1) = 0;
                          *((_QWORD *)v303 + 2) = v305;
                          *v306 = v303;
                          v307 = **(_QWORD **)v159;
                          if (v307)
                          {
                            *(_QWORD *)v159 = v307;
                            v303 = *v306;
                          }
                          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v252 + 34), (uint64_t *)v303);
                          ++*((_QWORD *)v252 + 35);
                          v308 = (char *)*((_QWORD *)v298 + 1);
                          if (v308)
                          {
                            do
                            {
                              v309 = v308;
                              v308 = *(char **)v308;
                            }
                            while (v308);
                          }
                          else
                          {
                            do
                            {
                              v309 = (char *)*((_QWORD *)v298 + 2);
                              _ZF = *(_QWORD *)v309 == (_QWORD)v298;
                              v298 = v309;
                            }
                            while (!_ZF);
                          }
                          v298 = v309;
                        }
                        while (v309 != (char *)&v524 + 8);
                      }
                    }
                    *((_OWORD *)v252 + 18) = v526;
                    goto LABEL_634;
                  }
                }
                v243 = v212[1];
                if (v243)
                {
                  do
                  {
                    v244 = (_QWORD **)v243;
                    v243 = (_QWORD *)*v243;
                  }
                  while (v243);
                }
                else
                {
                  do
                  {
                    v244 = (_QWORD **)v212[2];
                    _ZF = *v244 == v212;
                    v212 = v244;
                  }
                  while (!_ZF);
                }
                v212 = v244;
                if (v244 == &v506)
                  goto LABEL_505;
              }
            }
            v216 = *v212;
            v211 = v212;
            if (*v212)
            {
              do
              {
                v211 = (_QWORD **)v216;
                v216 = (_QWORD *)v216[1];
              }
              while (v216);
            }
            else
            {
              do
              {
                v218 = v211;
                v211 = (_QWORD **)v211[2];
              }
              while (*v211 == v218);
            }
          }
        }
        else
        {
          do
          {
            v217 = v211;
            v211 = (_QWORD **)v211[2];
          }
          while (*v211 == v217);
          v212 = &v506;
        }
        if (v211 == &v506 || (v219 = *((unsigned __int8 *)v167 + 72), *((unsigned __int8 *)v211 + 72) != v219))
        {
          v224 = &v506;
          goto LABEL_465;
        }
        v220 = *((unsigned __int8 *)v167 + 73);
        v221 = *((_DWORD *)v167 + 19);
        v222 = *((_DWORD *)v167 + 20);
        v223 = *((_DWORD *)v167 + 27);
        v224 = &v506;
        do
        {
          v225 = v211;
          v226 = *((unsigned __int8 *)v211 + 73);
          if (v226 >= v220)
          {
            if (v226 != v220
              || *((_DWORD *)v225 + 19) != v221
              || *((_DWORD *)v225 + 20) != v222
              || *((_DWORD *)v225 + 27) != v223)
            {
              goto LABEL_464;
            }
          }
          else
          {
            v227 = v220 - v226;
            if (*((_DWORD *)v225 + 19) != v221 >> v227
              || *((_DWORD *)v225 + 20) != v222 >> v227
              || *((_DWORD *)v225 + 27) != v223 >> v227)
            {
              goto LABEL_464;
            }
          }
          if (v225 == v505)
          {
            v224 = v505;
            if (v505 != &v506)
              goto LABEL_483;
            goto LABEL_465;
          }
          v228 = *v225;
          v229 = v225;
          if (*v225)
          {
            do
            {
              v211 = (_QWORD **)v228;
              v228 = (_QWORD *)v228[1];
            }
            while (v228);
          }
          else
          {
            do
            {
              v211 = (_QWORD **)v229[2];
              _ZF = *v211 == v229;
              v229 = v211;
            }
            while (_ZF);
          }
          if (v211 == &v506)
            break;
          v224 = v225;
        }
        while (*((unsigned __int8 *)v211 + 72) == v219);
        v224 = v225;
        if (v225 != &v506)
          goto LABEL_483;
LABEL_465:
        if (v212 != &v506)
        {
          if (*((unsigned __int8 *)v167 + 72) != *((unsigned __int8 *)v212 + 72))
            goto LABEL_634;
          v230 = *((unsigned __int8 *)v167 + 73);
          v231 = *((unsigned __int8 *)v212 + 73);
          _CF = v231 >= v230;
          v232 = v231 - v230;
          if (v232 != 0 && _CF)
          {
            if (*((_DWORD *)v167 + 19) != *((int *)v212 + 19) >> v232
              || *((_DWORD *)v167 + 20) != *((int *)v212 + 20) >> v232
              || *((_DWORD *)v167 + 27) != *((_DWORD *)v212 + 27) >> v232)
            {
              goto LABEL_634;
            }
          }
          else if (v232
                 || *((_DWORD *)v167 + 19) != *((_DWORD *)v212 + 19)
                 || *((_DWORD *)v167 + 20) != *((_DWORD *)v212 + 20)
                 || *((_DWORD *)v167 + 27) != *((_DWORD *)v212 + 27))
          {
            goto LABEL_634;
          }
          v233 = v212[1];
          v234 = v212;
          if (v233)
          {
            do
            {
              v234 = v233;
              v233 = (_QWORD *)*v233;
            }
            while (v233);
          }
          else
          {
            do
            {
              v235 = v234;
              v234 = (_QWORD *)v234[2];
            }
            while ((_QWORD *)*v234 != v235);
          }
          v224 = v212;
          v212 = (_QWORD **)v234;
        }
        goto LABEL_483;
      }
LABEL_325:
      if (!*(_BYTE *)(a1 + 808))
        goto LABEL_714;
      *(_OWORD *)__p = 0u;
      *(_OWORD *)v515 = 0u;
      *(_DWORD *)&v515[16] = 1065353216;
      v168 = *(_QWORD *)(a1 + 168);
      v169 = *(_QWORD *)(v168 + 80);
      v170 = *(_QWORD *)(v168 + 88);
      if (v169 == v170)
      {
        v171 = v484;
      }
      else
      {
        v171 = v484;
        while (*(_WORD *)v169 != 75)
        {
          v169 += 16;
          if (v169 == v170)
            goto LABEL_648;
        }
      }
      if (v169 == v170)
LABEL_648:
        v313 = 0;
      else
        v313 = *(const gdc::LayerDataRequestKey **)(v169 + 8);
      v513[0] = 0;
      v513[1] = 0;
      v512 = v513;
      v314 = *(uint64_t ***)(a1 + 736);
      if (v314 != v480)
      {
        while (2)
        {
          v315 = fmax((v18 - *((double *)v314 + 37)) * 10.0, 0.0);
          if (v315 >= 1.0)
            goto LABEL_669;
          v316.f32[0] = v315 + v315;
          v316.f32[1] = 2.0 - v316.f32[0];
          v314[36] = (uint64_t *)vminnm_f32(vmaxnm_f32(v316, 0), _D14);
          md::FlyoverCommon::encodeFlyoverKey((unsigned __int8 *)&v524, (unsigned __int8 *)v314 + 32, 0, 0);
          gdc::LayerDataStore::get((gdc::LayerDataStore *)&v516, v313, (unsigned __int8 *)&v524);
          if (v516)
          {
            if (!std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>(v171 + 6, (unsigned __int8 *)&v524))gdc::LayerDataCollector::addDataKey((gdc::LayerDataCollector *)v171, (const gdc::LayerDataRequestKey *)&v524, (const QuadTile *)(v314 + 14));
            std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>>>>::__emplace_unique_key_args<gdc::LayerDataRequestKey,gdc::LayerDataRequestKey&,std::shared_ptr<gdc::LayerData>&>((uint64_t)__p, (unsigned __int8 *)&v524, (uint64_t)&v524, &v516);
            v317 = 0;
            v318 = v517;
            if (!v517)
            {
LABEL_663:
              if (v527)
                goto LABEL_664;
              goto LABEL_665;
            }
          }
          else
          {
            v317 = 1;
            v318 = v517;
            if (!v517)
              goto LABEL_663;
          }
          v319 = (unint64_t *)&v318->__shared_owners_;
          do
            v320 = __ldaxr(v319);
          while (__stlxr(v320 - 1, v319));
          if (v320)
            goto LABEL_663;
          ((void (*)(std::__shared_weak_count *))v318->__on_zero_shared)(v318);
          std::__shared_weak_count::__release_weak(v318);
          if (v527)
LABEL_664:
            v527 = 0;
LABEL_665:
          if (v525 != *((void **)&v526 + 1))
            free(v525);
          v321 = (uint64_t **)v314[33];
          if (v321 == v314 + 34)
          {
LABEL_668:
            if (v317)
            {
LABEL_669:
              v322 = v314[1];
              v323 = (uint64_t *)v314;
              if (v322)
              {
                do
                {
                  v324 = (uint64_t **)v322;
                  v322 = (uint64_t *)*v322;
                }
                while (v322);
              }
              else
              {
                do
                {
                  v324 = (uint64_t **)v323[2];
                  _ZF = *v324 == v323;
                  v323 = (uint64_t *)v324;
                }
                while (!_ZF);
              }
              if (*(uint64_t ***)(a1 + 736) == v314)
                *(_QWORD *)(a1 + 736) = v324;
              --*(_QWORD *)(a1 + 752);
              std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 744), (uint64_t *)v314);
              std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v314[34]);
              operator delete(v314);
            }
            else
            {
              v330 = v314[1];
              if (v330)
              {
                do
                {
                  v324 = (uint64_t **)v330;
                  v330 = (uint64_t *)*v330;
                }
                while (v330);
              }
              else
              {
                do
                {
                  v324 = (uint64_t **)v314[2];
                  _ZF = *v324 == (uint64_t *)v314;
                  v314 = v324;
                }
                while (!_ZF);
              }
            }
            v314 = v324;
            if (v324 == v480)
              goto LABEL_706;
            continue;
          }
          break;
        }
        while (2)
        {
          md::FlyoverCommon::encodeFlyoverKey((unsigned __int8 *)&v524, (unsigned __int8 *)v321 + 32, 0, 0);
          gdc::LayerDataStore::get((gdc::LayerDataStore *)&v516, v313, (unsigned __int8 *)&v524);
          if (v516)
          {
            if (!std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>(v171 + 6, (unsigned __int8 *)&v524))gdc::LayerDataCollector::addDataKey((gdc::LayerDataCollector *)v171, (const gdc::LayerDataRequestKey *)&v524, (const QuadTile *)(v321 + 14));
            std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>>>>::__emplace_unique_key_args<gdc::LayerDataRequestKey,gdc::LayerDataRequestKey&,std::shared_ptr<gdc::LayerData>&>((uint64_t)__p, (unsigned __int8 *)&v524, (uint64_t)&v524, &v516);
            v325 = v517;
            if (!v517)
            {
LABEL_682:
              if (v527)
                goto LABEL_683;
              goto LABEL_684;
            }
          }
          else
          {
            v317 = 1;
            v325 = v517;
            if (!v517)
              goto LABEL_682;
          }
          v326 = (unint64_t *)&v325->__shared_owners_;
          do
            v327 = __ldaxr(v326);
          while (__stlxr(v327 - 1, v326));
          if (v327)
            goto LABEL_682;
          ((void (*)(std::__shared_weak_count *))v325->__on_zero_shared)(v325);
          std::__shared_weak_count::__release_weak(v325);
          if (v527)
LABEL_683:
            v527 = 0;
LABEL_684:
          if (v525 != *((void **)&v526 + 1))
            free(v525);
          v328 = v321[1];
          if (v328)
          {
            do
            {
              v329 = (uint64_t **)v328;
              v328 = (uint64_t *)*v328;
            }
            while (v328);
          }
          else
          {
            do
            {
              v329 = (uint64_t **)v321[2];
              _ZF = *v329 == (uint64_t *)v321;
              v321 = v329;
            }
            while (!_ZF);
          }
          v321 = v329;
          if (v329 == v314 + 34)
            goto LABEL_668;
          continue;
        }
      }
LABEL_706:
      v331 = *(_WORD *)(a1 + 384);
      v332 = *(unsigned __int8 **)geo::linear_map<unsigned short,std::vector<gdc::LayerDataHolder>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::vector<gdc::LayerDataHolder>>>,std::vector<std::pair<unsigned short,std::vector<gdc::LayerDataHolder>>>>::operator[]((unsigned __int16 **)v171 + 3, v331);
      v159 = *((_QWORD *)geo::linear_map<unsigned short,std::vector<gdc::LayerDataHolder>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::vector<gdc::LayerDataHolder>>>,std::vector<std::pair<unsigned short,std::vector<gdc::LayerDataHolder>>>>::operator[]((unsigned __int16 **)v171 + 3, v331)+ 1);
      v333 = (int8x8_t)__p[1];
      if (v332 != (unsigned __int8 *)v159 && __p[1] != 0)
      {
        while (1)
        {
          if (v333)
          {
            v345 = *((_QWORD *)v332 + 13);
            v346 = (uint8x8_t)vcnt_s8(v333);
            v346.i16[0] = vaddlv_u8(v346);
            if (v346.u32[0] > 1uLL)
            {
              v347 = *((_QWORD *)v332 + 13);
              if (v345 >= *(_QWORD *)&v333)
                v347 = v345 % *(_QWORD *)&v333;
            }
            else
            {
              v347 = (*(_QWORD *)&v333 - 1) & v345;
            }
            v348 = (uint64_t ***)*((_QWORD *)__p[0] + v347);
            if (v348)
            {
              v349 = *v348;
              if (*v348)
              {
                if (v346.u32[0] < 2uLL)
                {
                  v350 = *(_QWORD *)&v333 - 1;
                  while (1)
                  {
                    v355 = v349[1];
                    if (v355 == (uint64_t *)v345)
                    {
                      if (*((unsigned __int8 *)v349 + 16) == *v332
                        && *((unsigned __int16 *)v349 + 12) == *((unsigned __int16 *)v332 + 4)
                        && v349[12] == *((uint64_t **)v332 + 10))
                      {
                        v356 = v349[4];
                        v357 = (char *)v349[5] - (char *)v356;
                        v358 = (const void *)*((_QWORD *)v332 + 2);
                        if (v357 == *((_QWORD *)v332 + 3) - (_QWORD)v358 && !memcmp(v356, v358, v357))
                          goto LABEL_757;
                      }
                    }
                    else if (((unint64_t)v355 & v350) != v347)
                    {
                      goto LABEL_769;
                    }
                    v349 = (uint64_t **)*v349;
                    if (!v349)
                      goto LABEL_769;
                  }
                }
                do
                {
                  v351 = (unint64_t)v349[1];
                  if (v351 == v345)
                  {
                    if (*((unsigned __int8 *)v349 + 16) == *v332
                      && *((unsigned __int16 *)v349 + 12) == *((unsigned __int16 *)v332 + 4)
                      && v349[12] == *((uint64_t **)v332 + 10))
                    {
                      v352 = v349[4];
                      v353 = (char *)v349[5] - (char *)v352;
                      v354 = (const void *)*((_QWORD *)v332 + 2);
                      if (v353 == *((_QWORD *)v332 + 3) - (_QWORD)v354 && !memcmp(v352, v354, v353))
                      {
LABEL_757:
                        v359 = v349[16];
                        if (v359 && !*((_QWORD *)v332 + 14) && *((_DWORD *)v332 + 32) != 3)
                        {
                          v360 = v349[17];
                          if (v360)
                          {
                            v361 = (unint64_t *)(v360 + 1);
                            do
                              v362 = __ldxr(v361);
                            while (__stxr(v362 + 1, v361));
                          }
                          v363 = (std::__shared_weak_count *)*((_QWORD *)v332 + 15);
                          *((_QWORD *)v332 + 14) = v359;
                          *((_QWORD *)v332 + 15) = v360;
                          if (v363)
                          {
                            v364 = (unint64_t *)&v363->__shared_owners_;
                            do
                              v365 = __ldaxr(v364);
                            while (__stlxr(v365 - 1, v364));
                            if (!v365)
                            {
                              ((void (*)(std::__shared_weak_count *))v363->__on_zero_shared)(v363);
                              std::__shared_weak_count::__release_weak(v363);
                            }
                          }
                          *((_DWORD *)v332 + 32) = 3;
                        }
                        break;
                      }
                    }
                  }
                  else
                  {
                    if (v351 >= *(_QWORD *)&v333)
                      v351 %= *(_QWORD *)&v333;
                    if (v351 != v347)
                      break;
                  }
                  v349 = (uint64_t **)*v349;
                }
                while (v349);
              }
            }
          }
LABEL_769:
          v332 += 144;
          if (v332 == (unsigned __int8 *)v159)
            break;
          v333 = (int8x8_t)__p[1];
        }
      }
      std::__tree<std::__value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,md::FlyoverCompleteTileDataLogic::TransitionInfo>,std::__map_value_compare<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,md::FlyoverCompleteTileDataLogic::TransitionInfo>,std::less<std::pair<md::FlyoverOctile,md::FlyoverOctile>>,true>,std::allocator<std::__value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,md::FlyoverCompleteTileDataLogic::TransitionInfo>>>::destroy(v513[0]);
      v335 = *(_BYTE **)v515;
      if (*(_QWORD *)v515)
      {
        while (1)
        {
          v340 = *(_BYTE **)v335;
          v341 = (std::__shared_weak_count *)*((_QWORD *)v335 + 17);
          if (v341)
          {
            v342 = (unint64_t *)&v341->__shared_owners_;
            do
              v343 = __ldaxr(v342);
            while (__stlxr(v343 - 1, v342));
            if (!v343)
              break;
          }
          if (v335[112])
            goto LABEL_724;
LABEL_725:
          v344 = (void *)*((_QWORD *)v335 + 4);
          if (v344 != *((void **)v335 + 6))
            free(v344);
          operator delete(v335);
          v335 = v340;
          if (!v340)
            goto LABEL_712;
        }
        ((void (*)(std::__shared_weak_count *))v341->__on_zero_shared)(v341);
        std::__shared_weak_count::__release_weak(v341);
        if (!v335[112])
          goto LABEL_725;
LABEL_724:
        v335[112] = 0;
        goto LABEL_725;
      }
LABEL_712:
      v336 = __p[0];
      __p[0] = 0;
      if (v336)
        operator delete(v336);
LABEL_714:
      std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v506);
      std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v509[0]);
LABEL_715:
      v337 = (unint64_t)v500[1];
      if (v500[1])
      {
        v338 = (uint8x8_t)vcnt_s8((int8x8_t)v500[1]);
        v338.i16[0] = vaddlv_u8(v338);
        if (v338.u32[0] > 1uLL)
        {
          v159 = v479;
          v339 = v484;
          if ((void *)v479 >= v500[1])
            v159 = v479 % (unint64_t)v500[1];
        }
        else
        {
          v159 = v479 & ((unint64_t)v500[1] - 1);
          v339 = v484;
        }
        v366 = (_QWORD *)*((_QWORD *)v500[0] + v159);
        if (v366)
        {
          v367 = (_QWORD *)*v366;
          if (v367)
          {
            if (v338.u32[0] < 2uLL)
            {
              while (1)
              {
                v369 = v367[1];
                if (v369 == v479)
                {
                  if ((unint64_t *)v367[2] == v339)
                    goto LABEL_847;
                }
                else if ((v369 & ((unint64_t)v500[1] - 1)) != v159)
                {
                  goto LABEL_788;
                }
                v367 = (_QWORD *)*v367;
                if (!v367)
                  goto LABEL_788;
              }
            }
            do
            {
              v368 = v367[1];
              if (v368 == v479)
              {
                if ((unint64_t *)v367[2] == v339)
                  goto LABEL_847;
              }
              else
              {
                if ((void *)v368 >= v500[1])
                  v368 %= (unint64_t)v500[1];
                if (v368 != v159)
                  break;
              }
              v367 = (_QWORD *)*v367;
            }
            while (v367);
          }
        }
      }
LABEL_788:
      v370 = operator new(0x18uLL);
      *v370 = 0;
      v370[1] = v479;
      v370[2] = v484;
      v371 = (float)((unint64_t)v501[1] + 1);
      if (!v337 || (float)(v502 * (float)v337) < v371)
      {
        v372 = (v337 & (v337 - 1)) != 0;
        if (v337 < 3)
          v372 = 1;
        v373 = v372 | (2 * v337);
        v374 = vcvtps_u32_f32(v371 / v502);
        if (v373 <= v374)
          v375 = v374;
        else
          v375 = v373;
        if (v375 == 1)
        {
          v375 = 2;
        }
        else if ((v375 & (v375 - 1)) != 0)
        {
          v375 = std::__next_prime(v375);
          v337 = (unint64_t)v500[1];
        }
        if (v375 > v337)
        {
LABEL_800:
          if (v375 >> 61)
LABEL_996:
            std::__throw_bad_array_new_length[abi:nn180100]();
          v376 = operator new(8 * v375);
          v377 = v500[0];
          v500[0] = v376;
          if (v377)
            operator delete(v377);
          v378 = 0;
          v500[1] = (void *)v375;
          do
            *((_QWORD *)v500[0] + v378++) = 0;
          while (v375 != v378);
          v379 = (_QWORD **)v501[0];
          if (!v501[0])
            goto LABEL_824;
          v380 = *((_QWORD *)v501[0] + 1);
          v381 = v375 - 1;
          if ((v375 & (v375 - 1)) == 0)
          {
            v382 = v380 & v381;
            *((_QWORD *)v500[0] + v382) = v501;
            for (ii = *v379; *v379; ii = *v379)
            {
              v384 = ii[1] & v381;
              if (v384 == v382)
              {
                v379 = (_QWORD **)ii;
              }
              else if (*((_QWORD *)v500[0] + v384))
              {
                *v379 = (_QWORD *)*ii;
                v385 = 8 * v384;
                *ii = **(_QWORD **)((char *)v500[0] + v385);
                **(_QWORD **)((char *)v500[0] + v385) = ii;
              }
              else
              {
                *((_QWORD *)v500[0] + v384) = v379;
                v379 = (_QWORD **)ii;
                v382 = v384;
              }
            }
            goto LABEL_824;
          }
          if (v380 >= v375)
            v380 %= v375;
          *((_QWORD *)v500[0] + v380) = v501;
          v389 = *v379;
          if (!*v379)
          {
LABEL_824:
            v337 = v375;
            goto LABEL_825;
          }
          while (2)
          {
            v391 = v389[1];
            if (v391 >= v375)
              v391 %= v375;
            if (v391 != v380)
            {
              if (!*((_QWORD *)v500[0] + v391))
              {
                *((_QWORD *)v500[0] + v391) = v379;
LABEL_829:
                v379 = (_QWORD **)v389;
                v389 = (_QWORD *)*v389;
                v380 = v391;
                if (!v389)
                  goto LABEL_824;
                continue;
              }
              *v379 = (_QWORD *)*v389;
              v390 = 8 * v391;
              *v389 = **(_QWORD **)((char *)v500[0] + v390);
              **(_QWORD **)((char *)v500[0] + v390) = v389;
              v389 = v379;
            }
            break;
          }
          v391 = v380;
          goto LABEL_829;
        }
        if (v375 < v337)
        {
          v386 = vcvtps_u32_f32((float)(unint64_t)v501[1] / v502);
          if (v337 < 3
            || (v387 = (uint8x8_t)vcnt_s8((int8x8_t)v337), v387.i16[0] = vaddlv_u8(v387), v387.u32[0] > 1uLL))
          {
            v386 = std::__next_prime(v386);
          }
          else
          {
            v388 = 1 << -(char)__clz(v386 - 1);
            if (v386 >= 2)
              v386 = v388;
          }
          if (v375 <= v386)
            v375 = v386;
          if (v375 >= v337)
          {
            v337 = (unint64_t)v500[1];
          }
          else
          {
            if (v375)
              goto LABEL_800;
            v402 = v500[0];
            v500[0] = 0;
            if (v402)
              operator delete(v402);
            v337 = 0;
            v500[1] = 0;
          }
        }
LABEL_825:
        if ((v337 & (v337 - 1)) != 0)
        {
          v159 = v479;
          if (v479 >= v337)
            v159 = v479 % v337;
        }
        else
        {
          v159 = (v337 - 1) & v479;
        }
      }
      v392 = v500[0];
      v393 = (_QWORD *)*((_QWORD *)v500[0] + v159);
      if (v393)
      {
        *v370 = *v393;
        goto LABEL_845;
      }
      *v370 = v501[0];
      v501[0] = v370;
      v392[v159] = v501;
      if (*v370)
      {
        v394 = *(_QWORD *)(*v370 + 8);
        if ((v337 & (v337 - 1)) != 0)
        {
          if (v394 >= v337)
            v394 %= v337;
        }
        else
        {
          v394 &= v337 - 1;
        }
        v393 = (char *)v500[0] + 8 * v394;
LABEL_845:
        *v393 = v370;
      }
      ++v501[1];
LABEL_847:
      v395 = v496[0];
      if (v496[0])
      {
        while (1)
        {
          v397 = *(_BYTE **)v395;
          v398 = (std::__shared_weak_count *)*((_QWORD *)v395 + 30);
          if (v398)
          {
            v399 = (unint64_t *)&v398->__shared_owners_;
            do
              v400 = __ldaxr(v399);
            while (__stlxr(v400 - 1, v399));
            if (!v400)
              break;
          }
          if (v395[192])
            goto LABEL_858;
LABEL_859:
          v401 = (void *)*((_QWORD *)v395 + 14);
          if (v401 != *((void **)v395 + 16))
            free(v401);
          operator delete(v395);
          v395 = v397;
          if (!v397)
            goto LABEL_848;
        }
        ((void (*)(std::__shared_weak_count *))v398->__on_zero_shared)(v398);
        std::__shared_weak_count::__release_weak(v398);
        if (!v395[192])
          goto LABEL_859;
LABEL_858:
        v395[192] = 0;
        goto LABEL_859;
      }
LABEL_848:
      v396 = v495[0];
      v495[0] = 0;
      if (v396)
        operator delete(v396);
      v80 = v475;
      v74 = v476;
      v75 = v472;
      v76 = v491;
      v81 = *(_QWORD *)(v474 + 8);
    }
    while (v81 != v475);
LABEL_109:
    v74 += 32;
    if (v74 != v75)
      continue;
    break;
  }
LABEL_872:
  v403 = v503;
  if (v503)
  {
    v404 = (unsigned __int8 *)*((_QWORD *)v477 + 13);
    if (v404)
    {
      do
      {
        v405 = *v478;
        v406 = v478[1];
        if (*v478 != v406)
        {
          do
            md::SceneStateManager::setHasTileSelectionDependency(v403, *v405++, *(unsigned __int16 *)(a1 + 384), v404 + 16);
          while (v405 != v406);
        }
        v407 = v478[3];
        for (jj = v478[4]; v407 != jj; ++v407)
          md::SceneStateManager::setHasTileSelectionDependency(v403, *v407, *(unsigned __int16 *)(a1 + 384), v404 + 16);
        v404 = *(unsigned __int8 **)v404;
      }
      while (v404);
      v409 = (char *)*((_QWORD *)v477 + 13);
      if (v409)
      {
        do
        {
          v457 = md::FlyoverMetaData::tileType(v477, (const QuadTile *)(v409 + 16), 0);
          v458 = *(char **)v409;
          if (v457 < 0x100u)
            goto LABEL_964;
          v459 = *(int8x8_t *)((char *)v477 + 96);
          v460 = *((_QWORD *)v409 + 1);
          v461 = (uint8x8_t)vcnt_s8(v459);
          v461.i16[0] = vaddlv_u8(v461);
          if (v461.u32[0] > 1uLL)
          {
            if (v460 >= *(_QWORD *)&v459)
              v460 %= *(_QWORD *)&v459;
          }
          else
          {
            v460 &= *(_QWORD *)&v459 - 1;
          }
          v462 = *((_QWORD *)v477 + 11);
          v463 = *(char **)(v462 + 8 * v460);
          do
          {
            v464 = v463;
            v463 = *(char **)v463;
          }
          while (v463 != v409);
          if (v464 == (char *)v477 + 104)
            goto LABEL_1002;
          v465 = *((_QWORD *)v464 + 1);
          if (v461.u32[0] > 1uLL)
          {
            if (v465 >= *(_QWORD *)&v459)
              v465 %= *(_QWORD *)&v459;
          }
          else
          {
            v465 &= *(_QWORD *)&v459 - 1;
          }
          v466 = *(_QWORD *)v409;
          if (v465 != v460)
          {
LABEL_1002:
            if (v458)
            {
              v467 = *((_QWORD *)v458 + 1);
              if (v461.u32[0] > 1uLL)
              {
                if (v467 >= *(_QWORD *)&v459)
                  v467 %= *(_QWORD *)&v459;
              }
              else
              {
                v467 &= *(_QWORD *)&v459 - 1;
              }
              v466 = *(_QWORD *)v409;
              if (v467 == v460)
              {
LABEL_986:
                v468 = *(_QWORD *)(v466 + 8);
                if (v461.u32[0] > 1uLL)
                {
                  if (v468 >= *(_QWORD *)&v459)
                    v468 %= *(_QWORD *)&v459;
                }
                else
                {
                  v468 &= *(_QWORD *)&v459 - 1;
                }
                if (v468 != v460)
                {
                  *(_QWORD *)(*((_QWORD *)v477 + 11) + 8 * v468) = v464;
                  v466 = *(_QWORD *)v409;
                }
                goto LABEL_963;
              }
            }
            *(_QWORD *)(v462 + 8 * v460) = 0;
            v466 = *(_QWORD *)v409;
          }
          if (v466)
            goto LABEL_986;
LABEL_963:
          *(_QWORD *)v464 = v466;
          --*((_QWORD *)v477 + 14);
          operator delete(v409);
LABEL_964:
          v409 = v458;
        }
        while (v458);
      }
    }
  }
  v410 = (unsigned __int8 **)(a1 + 672);
  v411 = (unsigned __int8 *)(a1 + 680);
  v412 = *(_QWORD *)(a1 + 680);
  v413 = v498;
  *(_QWORD *)&v498 = *(_QWORD *)(a1 + 672);
  *((_QWORD *)&v498 + 1) = v412;
  *(_OWORD *)(a1 + 672) = v413;
  v414 = v499;
  v499 = *(_QWORD *)(a1 + 688);
  v415 = v499;
  *(_QWORD *)(a1 + 688) = v414;
  v416 = (__int128 *)(v412 + 16);
  if (!v415)
    v416 = &v498;
  *(_QWORD *)v416 = (char *)&v498 + 8;
  if (v414)
    v417 = (unsigned __int8 **)(*(_QWORD *)(a1 + 680) + 16);
  else
    v417 = (unsigned __int8 **)(a1 + 672);
  *v417 = v411;
  v418 = (_QWORD *)(a1 + 304);
  if (*(_QWORD *)(a1 + 328))
  {
    v419 = *(_QWORD **)(a1 + 320);
    if (v419)
    {
      do
      {
        v445 = (_QWORD *)*v419;
        v446 = (void *)v419[12];
        if (v446)
        {
          v419[13] = v446;
          operator delete(v446);
        }
        operator delete(v419);
        v419 = v445;
      }
      while (v445);
    }
    *(_QWORD *)(a1 + 320) = 0;
    v420 = *(_QWORD *)(a1 + 312);
    if (v420)
    {
      for (kk = 0; kk != v420; ++kk)
        *(_QWORD *)(*v418 + 8 * kk) = 0;
    }
    *(_QWORD *)(a1 + 328) = 0;
  }
  v422 = (_QWORD *)(a1 + 344);
  if (*(_QWORD *)(a1 + 368))
  {
    v423 = *(_QWORD **)(a1 + 360);
    if (v423)
    {
      do
      {
        v447 = (_QWORD *)*v423;
        v448 = (void *)v423[11];
        if (v448)
        {
          v423[12] = v448;
          operator delete(v448);
        }
        v449 = (void *)v423[8];
        if (v449)
        {
          v423[9] = v449;
          operator delete(v449);
        }
        operator delete(v423);
        v423 = v447;
      }
      while (v447);
    }
    *(_QWORD *)(a1 + 360) = 0;
    v424 = *(_QWORD *)(a1 + 352);
    if (v424)
    {
      for (mm = 0; mm != v424; ++mm)
        *(_QWORD *)(*v422 + 8 * mm) = 0;
    }
    *(_QWORD *)(a1 + 368) = 0;
  }
  v426 = (_QWORD *)(a1 + 184);
  if (*(_QWORD *)(a1 + 208))
  {
    v427 = *(_QWORD **)(a1 + 200);
    if (v427)
    {
      do
      {
        v450 = (_QWORD *)*v427;
        v451 = (void *)v427[8];
        if (v451)
        {
          v427[9] = v451;
          operator delete(v451);
        }
        operator delete(v427);
        v427 = v450;
      }
      while (v450);
    }
    *(_QWORD *)(a1 + 200) = 0;
    v428 = *(_QWORD *)(a1 + 192);
    if (v428)
    {
      for (nn = 0; nn != v428; ++nn)
        *(_QWORD *)(*v426 + 8 * nn) = 0;
    }
    *(_QWORD *)(a1 + 208) = 0;
  }
  v525 = 0;
  *((_QWORD *)&v524 + 1) = 0;
  *(_QWORD *)&v524 = (char *)&v524 + 8;
  __p[0] = (void *)a1;
  __p[1] = &v524;
  if (*(_BYTE *)(a1 + 808))
  {
    v430 = *(_QWORD **)(a1 + 736);
    if (v430 != (_QWORD *)(a1 + 744))
    {
      do
      {
        md::FlyoverCompleteTileDataLogic::buildOctileInstances(void)::$_0::operator()((uint64_t)__p, (unsigned __int8 *)v430 + 32, 1, *((float *)v430 + 72));
        v452 = (unsigned __int8 *)v430[33];
        if (v452 != (unsigned __int8 *)(v430 + 34))
        {
          do
          {
            md::FlyoverCompleteTileDataLogic::buildOctileInstances(void)::$_0::operator()((uint64_t)__p, v452 + 32, 1, *((float *)v430 + 73));
            v455 = (unsigned __int8 *)*((_QWORD *)v452 + 1);
            if (v455)
            {
              do
              {
                v456 = v455;
                v455 = *(unsigned __int8 **)v455;
              }
              while (v455);
            }
            else
            {
              do
              {
                v456 = (unsigned __int8 *)*((_QWORD *)v452 + 2);
                _ZF = *(_QWORD *)v456 == (_QWORD)v452;
                v452 = v456;
              }
              while (!_ZF);
            }
            v452 = v456;
          }
          while (v456 != (unsigned __int8 *)(v430 + 34));
        }
        v453 = (_QWORD *)v430[1];
        if (v453)
        {
          do
          {
            v454 = v453;
            v453 = (_QWORD *)*v453;
          }
          while (v453);
        }
        else
        {
          do
          {
            v454 = (_QWORD *)v430[2];
            _ZF = *v454 == (_QWORD)v430;
            v430 = v454;
          }
          while (!_ZF);
        }
        v430 = v454;
      }
      while (v454 != (_QWORD *)(a1 + 744));
    }
  }
  v431 = *v410;
  if (*v410 != v411)
  {
    do
    {
      md::FlyoverCompleteTileDataLogic::buildOctileInstances(void)::$_0::operator()((uint64_t)__p, v431 + 32, 0, 1.0);
      v443 = (unsigned __int8 *)*((_QWORD *)v431 + 1);
      if (v443)
      {
        do
        {
          v444 = v443;
          v443 = *(unsigned __int8 **)v443;
        }
        while (v443);
      }
      else
      {
        do
        {
          v444 = (unsigned __int8 *)*((_QWORD *)v431 + 2);
          _ZF = *(_QWORD *)v444 == (_QWORD)v431;
          v431 = v444;
        }
        while (!_ZF);
      }
      v431 = v444;
    }
    while (v444 != v411);
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)&v524 + 1));
  *(_QWORD *)(a1 + 288) = a1 + 224;
  if (*(_QWORD *)(a1 + 616))
  {
    std::__hash_table<std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,md::FlyoverCompleteTileDataLogic::MeshStorage>,std::__unordered_map_hasher<md::FlyoverCompleteTileDataLogic::DrapingTask,std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,md::FlyoverCompleteTileDataLogic::MeshStorage>,md::FlyoverCompleteTileDataLogic::DrapingTaskHash,std::equal_to<md::FlyoverCompleteTileDataLogic::DrapingTask>,true>,std::__unordered_map_equal<md::FlyoverCompleteTileDataLogic::DrapingTask,std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,md::FlyoverCompleteTileDataLogic::MeshStorage>,std::equal_to<md::FlyoverCompleteTileDataLogic::DrapingTask>,md::FlyoverCompleteTileDataLogic::DrapingTaskHash,true>,std::allocator<std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,md::FlyoverCompleteTileDataLogic::MeshStorage>>>::__deallocate_node(*(_QWORD **)(a1 + 608));
    *(_QWORD *)(a1 + 608) = 0;
    v432 = *(_QWORD *)(a1 + 600);
    if (v432)
    {
      for (i1 = 0; i1 != v432; ++i1)
        *(_QWORD *)(*v469 + 8 * i1) = 0;
    }
    *(_QWORD *)(a1 + 616) = 0;
  }
  *a4 = v426;
  a4[1] = a1 + 224;
  a4[2] = v418;
  a4[3] = v422;
  a4[4] = v470;
  if (*(_QWORD *)(a1 + 752) || *(_BYTE *)(a1 + 760))
  {
    *(_BYTE *)(a1 + 760) = 0;
    v434 = **(_QWORD **)(a1 + 472);
    if (v434)
    {
      LOBYTE(v524) = 8;
      md::MapEngine::setNeedsTick(v434, &v524);
    }
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)&v498 + 1));
  v435 = v501[0];
  if (v501[0])
  {
    do
    {
      v436 = (_QWORD *)*v435;
      operator delete(v435);
      v435 = v436;
    }
    while (v436);
  }
  v437 = v500[0];
  v500[0] = 0;
  if (v437)
    operator delete(v437);
  v438 = v504;
  if (v504)
  {
    v439 = (unint64_t *)&v504->__shared_owners_;
    do
      v440 = __ldaxr(v439);
    while (__stlxr(v440 - 1, v439));
    if (!v440)
    {
      ((void (*)(std::__shared_weak_count *))v438->__on_zero_shared)(v438);
      std::__shared_weak_count::__release_weak(v438);
    }
  }
LABEL_926:
  if (!v523)
  {
LABEL_997:
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(_QWORD *))(*v523 + 48))(v523);
  result = v523;
  if (v523 == v522)
  {
    v442 = 4;
    result = v522;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v442))();
  }
  else if (v523)
  {
    v442 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v442))();
  }
  return result;
}

void sub_19FD21B7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a62);
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)&STACK[0x290]);
  _Unwind_Resume(a1);
}

void md::Logic<md::FlyoverCompleteTileDataLogic,md::FlyoverCompleteTileDataContext,md::LogicDependencies<gdc::TypeList<md::TileSelectionContext,md::FlyoverTileDataResolverContext,md::PendingSceneContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

void _ZNSt3__110__function6__funcIZN2md28FlyoverCompleteTileDataLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_20TileSelectionContextENS2_30FlyoverTileDataResolverContextENS2_19PendingSceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_30FlyoverCompleteTileDataContextEE3__0NS_9allocatorISL_EEFvvEEclEv(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "FlyoverCompleteTileDataLogic", (const char *)&unk_1A0189141, v5, 2u);
  }

}

uint64_t std::__hash_table<std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,std::shared_ptr<geo::Task>>,std::__unordered_map_hasher<md::FlyoverCompleteTileDataLogic::DrapingTask,std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,std::shared_ptr<geo::Task>>,md::FlyoverCompleteTileDataLogic::DrapingTaskHash,std::equal_to<md::FlyoverCompleteTileDataLogic::DrapingTask>,true>,std::__unordered_map_equal<md::FlyoverCompleteTileDataLogic::DrapingTask,std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,std::shared_ptr<geo::Task>>,std::equal_to<md::FlyoverCompleteTileDataLogic::DrapingTask>,md::FlyoverCompleteTileDataLogic::DrapingTaskHash,true>,std::allocator<std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,std::shared_ptr<geo::Task>>>>::erase(_QWORD *a1, uint64_t *__p)
{
  int8x8_t v3;
  unint64_t v4;
  uint64_t v5;
  uint8x8_t v6;
  uint64_t *v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;

  v3 = (int8x8_t)a1[1];
  v5 = *__p;
  v4 = __p[1];
  v6 = (uint8x8_t)vcnt_s8(v3);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  v7 = *(uint64_t **)(*a1 + 8 * v4);
  do
  {
    v8 = v7;
    v7 = (uint64_t *)*v7;
  }
  while (v7 != __p);
  if (v8 != a1 + 2)
  {
    v9 = v8[1];
    if (v6.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    v10 = *__p;
    if (v9 == v4)
    {
LABEL_20:
      if (!v10)
        goto LABEL_27;
      goto LABEL_21;
    }
  }
  if (!v5)
    goto LABEL_19;
  v11 = *(_QWORD *)(v5 + 8);
  if (v6.u32[0] > 1uLL)
  {
    if (v11 >= *(_QWORD *)&v3)
      v11 %= *(_QWORD *)&v3;
  }
  else
  {
    v11 &= *(_QWORD *)&v3 - 1;
  }
  v10 = *__p;
  if (v11 != v4)
  {
LABEL_19:
    *(_QWORD *)(*a1 + 8 * v4) = 0;
    v10 = *__p;
    goto LABEL_20;
  }
LABEL_21:
  v12 = *(_QWORD *)(v10 + 8);
  if (v6.u32[0] > 1uLL)
  {
    if (v12 >= *(_QWORD *)&v3)
      v12 %= *(_QWORD *)&v3;
  }
  else
  {
    v12 &= *(_QWORD *)&v3 - 1;
  }
  if (v12 != v4)
  {
    *(_QWORD *)(*a1 + 8 * v12) = v8;
    v10 = *__p;
  }
LABEL_27:
  *v8 = v10;
  *__p = 0;
  --a1[3];
  v13 = (std::__shared_weak_count *)__p[16];
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = (std::__shared_weak_count *)__p[3];
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  operator delete(__p);
  return v5;
}

void md::FlyoverCompleteTileDataLogic::addFallbackData(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  gdc::LayerDataRequestKey *v8;
  gdc::LayerDataRequestKey *v9;
  uint64_t v10;
  int v11;
  char v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint8x8_t v22;
  uint64_t **v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  float v31;
  _BOOL8 v32;
  unint64_t v33;
  unint64_t v34;
  size_t prime;
  void *v36;
  void *v37;
  uint64_t v38;
  _QWORD **v39;
  size_t v40;
  size_t v41;
  size_t v42;
  _QWORD *i;
  size_t v44;
  uint64_t v45;
  unint64_t v46;
  uint8x8_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  size_t v51;
  _QWORD *v52;
  uint64_t v53;
  unint64_t v54;
  gdc::LayerDataRequestKey *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  gdc::LayerDataRequestKey *v59;
  gdc::LayerDataRequestKey *v60;
  uint64_t v61;
  unint64_t v62;
  unsigned __int8 v63;
  uint64_t v64;
  uint64_t v65;
  __int8 v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint8x8_t v70;
  unint64_t v71;
  uint64_t **v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  gdc::LayerDataRequestKey *v80;
  const void *v81;
  size_t v82;
  const void *v83;
  int v84;
  char *v85;
  QuadTile *v86;
  std::__shared_weak_count *v87;
  unsigned __int8 v88;
  char *v89;
  char v90;
  QuadTile *v91;
  QuadTile *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  std::__shared_weak_count *v96;
  _OWORD *v97;
  uint64_t v98;
  unint64_t *p_shared_owners;
  unint64_t v100;
  QuadTile *v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  char v105;
  uint64_t v106;
  unsigned __int8 v107;
  __int8 v108;
  uint64_t v109;
  __int8 v110;
  unint64_t *v111;
  unint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t *v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint8x8_t v138;
  unint64_t v139;
  unsigned __int8 **v140;
  unsigned __int8 *v141;
  unint64_t v142;
  uint64_t v143;
  float v144;
  float v145;
  _BOOL8 v146;
  unint64_t v147;
  unint64_t v148;
  size_t v149;
  unint64_t v150;
  uint8x8_t v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  uint8x8_t v155;
  uint64_t *v156;
  uint64_t *v157;
  uint64_t *v158;
  unint64_t v159;
  uint64_t *v160;
  unint64_t v161;
  unint64_t v162;
  uint8x8_t v163;
  uint64_t *v164;
  unint64_t v165;
  char *v166;
  std::__shared_weak_count *v167;
  _BYTE *v168;
  void *v169;
  int v170;
  unint64_t v171;
  unint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  unsigned int v176;
  uint64_t v177;
  _BYTE *v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  void *v182;
  BOOL v183;
  unsigned int v184;
  unsigned __int16 v185;
  unint64_t v186;
  uint64_t v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  char v194;
  uint64_t v195;
  char v196;
  __int8 v197;
  uint64_t v198;
  __int8 v199;
  unint64_t *v200;
  unint64_t v201;
  unint64_t *v202;
  unint64_t v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  unint64_t *v210;
  unint64_t v211;
  uint64_t v212;
  uint64_t *v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  unint64_t v220;
  unint64_t v221;
  uint8x8_t v222;
  unint64_t v223;
  void **v224;
  unsigned __int8 *v225;
  unint64_t v226;
  uint64_t v227;
  void **v228;
  unint64_t v229;
  uint64_t v230;
  float v231;
  _BOOL8 v232;
  unint64_t v233;
  unint64_t v234;
  size_t v235;
  void *v236;
  void *v237;
  uint64_t v238;
  _QWORD **v239;
  size_t v240;
  size_t v241;
  size_t v242;
  _QWORD *j;
  size_t v244;
  uint64_t v245;
  unint64_t v246;
  uint8x8_t v247;
  uint64_t v248;
  _QWORD *v249;
  uint64_t v250;
  size_t v251;
  _QWORD *v252;
  _QWORD *v253;
  unint64_t v254;
  _QWORD *v255;
  unsigned __int8 v256;
  unint64_t v257;
  _QWORD *v258;
  int8x8_t v259;
  uint8x8_t v260;
  unint64_t v261;
  uint64_t ***v262;
  uint64_t **v263;
  int v264;
  int v265;
  uint64_t *v266;
  const void *v267;
  size_t v268;
  uint64_t v269;
  unint64_t v270;
  uint64_t *v271;
  int v272;
  uint64_t *v273;
  uint64_t *v274;
  int v275;
  uint64_t *v276;
  uint64_t v277;
  std::__shared_weak_count *v278;
  unint64_t *v279;
  unint64_t v280;
  int v281;
  unsigned int v282;
  int v283;
  int v284;
  unsigned int v285;
  int v286;
  unsigned int v287;
  unsigned int v288;
  unsigned __int8 *v289;
  unsigned __int8 *v290;
  char *v291;
  unsigned int v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  unsigned int v296;
  _QWORD *v297;
  _QWORD *v298;
  unsigned int v299;
  _QWORD *v300;
  uint64_t v301;
  _QWORD *v302;
  unint64_t *v303;
  unint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  unsigned int v308;
  uint64_t v309;
  char v310;
  int v311;
  int v312;
  uint64_t v314;
  uint64_t v317;
  unint64_t *v318;
  unint64_t v319;
  std::__shared_weak_count *v320;
  unint64_t *v321;
  unint64_t v322;
  std::__shared_weak_count *v323;
  std::__shared_weak_count *v324;
  unint64_t *v325;
  unint64_t v326;
  unsigned int v327;
  uint64_t v328;
  BOOL v329;
  uint64_t v330;
  _QWORD *v331;
  uint64_t v332;
  std::__shared_weak_count *hash;
  unint64_t *v334;
  unint64_t v335;
  char v336;
  unint64_t v337;
  uint64_t v338;
  char v339;
  uint64_t *v340;
  char v341;
  uint64_t v342;
  _QWORD *v343;
  uint64_t v344;
  uint64_t v345;
  unint64_t *v346;
  unint64_t v347;
  std::__shared_weak_count *v348;
  unint64_t *v349;
  unint64_t v350;
  uint64_t v351;
  std::__shared_weak_count *v352;
  unint64_t *v353;
  unint64_t v354;
  unint64_t v355;
  unint64_t v356;
  uint64_t v357;
  uint64_t v358;
  unint64_t v359;
  unint64_t v360;
  uint64_t v361;
  unint64_t v362;
  _QWORD *v363;
  float64x2_t v364;
  float64x2_t v365;
  QuadTile *p_xIdx;
  uint64_t *v367;
  uint64_t v368;
  std::__shared_weak_count *v369;
  unint64_t *v370;
  unint64_t v371;
  __int128 v372;
  unint64_t *v373;
  unint64_t v374;
  char *v375;
  char *v376;
  char v377;
  uint64_t v378;
  _QWORD *v379;
  uint64_t v380;
  unint64_t *v381;
  unint64_t v382;
  __n128 v383;
  uint64_t v384;
  uint64_t v385;
  void *v386;
  std::__shared_weak_count *v387;
  unint64_t *v388;
  unint64_t v389;
  char *v390;
  std::__shared_weak_count *v391;
  unint64_t *v392;
  char *v393;
  uint64_t v394;
  uint64_t v395;
  unint64_t *v396;
  unint64_t v397;
  __int128 v398;
  __int128 v399;
  __int128 v400;
  std::__shared_weak_count *v401;
  unint64_t *v402;
  unint64_t v403;
  char v404;
  uint64_t v405;
  std::__shared_weak_count *v406;
  unint64_t *v407;
  unint64_t v408;
  void (__cdecl **v409)(std::__shared_weak_count *__hidden);
  void (__cdecl **v410)(std::__shared_weak_count *__hidden);
  uint64_t v411;
  std::__shared_weak_count_vtbl *v412;
  void (__cdecl *v413)(std::__shared_weak_count *__hidden);
  unint64_t *v414;
  unint64_t v415;
  __int128 v416;
  _QWORD *v417;
  unint64_t v418;
  unint64_t *v419;
  unint64_t v420;
  unint64_t *v421;
  unint64_t v422;
  _QWORD *v423;
  void (__cdecl **v424)(std::__shared_weak_count *__hidden);
  void (__cdecl **v425)(std::__shared_weak_count *__hidden);
  void *v426;
  std::__shared_weak_count *v427;
  unint64_t *v428;
  unint64_t v429;
  std::__shared_weak_count *v430;
  unint64_t *v431;
  unint64_t v432;
  std::__shared_weak_count *v433;
  unint64_t *v434;
  unint64_t v435;
  std::__shared_weak_count *v436;
  unint64_t *v437;
  unint64_t v438;
  unint64_t *v439;
  unint64_t v440;
  unint64_t *v441;
  unint64_t v442;
  unint64_t v443;
  void *v444;
  unsigned __int8 *v445;
  unsigned __int8 *v446;
  char *v447;
  char *v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  char *v452;
  char *v453;
  std::__shared_weak_count *v454;
  unint64_t *v455;
  unint64_t v456;
  unint64_t v457;
  unint64_t v458;
  int8x8_t v459;
  unint64_t v460;
  uint8x8_t v461;
  unint64_t v462;
  char *v463;
  uint64_t v464;
  uint64_t v465;
  char *v466;
  uint64_t v467;
  unsigned __int8 level;
  unint64_t v469;
  unint64_t v470;
  uint64_t v471;
  unint64_t v472;
  char v473;
  char v474;
  unint64_t v475;
  unint64_t v476;
  uint64_t v477;
  unint64_t v478;
  unint64_t v479;
  uint8x8_t v480;
  unint64_t v481;
  unint64_t v482;
  unint64_t v483;
  uint64_t v484;
  uint64_t *v485;
  uint64_t v486;
  uint64_t v487;
  char *v488;
  _QWORD *v489;
  _QWORD *v490;
  uint64_t v491;
  unint64_t v492;
  uint64_t v493;
  _QWORD *v494;
  unint64_t *v495;
  unint64_t v496;
  uint64_t v497;
  unint64_t *v498;
  unint64_t v499;
  char *v500;
  unint64_t *v501;
  unint64_t v502;
  _QWORD *v503;
  unint64_t v504;
  uint64_t v505;
  unsigned __int8 **v506;
  unsigned __int8 *v507;
  unint64_t v508;
  uint64_t v509;
  char *v510;
  float v511;
  float v512;
  _BOOL8 v513;
  unint64_t v514;
  unint64_t v515;
  size_t v516;
  void *v517;
  void *v518;
  uint64_t v519;
  _QWORD *v520;
  size_t v521;
  size_t v522;
  size_t v523;
  _QWORD *k;
  size_t v525;
  uint64_t v526;
  unint64_t v527;
  uint8x8_t v528;
  uint64_t v529;
  unint64_t *v530;
  unint64_t v531;
  uint64_t v532;
  uint64_t v533;
  unint64_t *v534;
  unint64_t v535;
  uint64_t v536;
  uint64_t v537;
  char v538;
  char v539;
  uint64_t v540;
  std::__shared_weak_count *v541;
  unint64_t *v542;
  unint64_t v543;
  unint64_t v544;
  unint64_t v545;
  uint8x8_t v546;
  _QWORD *v547;
  _QWORD *v548;
  unint64_t v549;
  uint64_t v550;
  char *v551;
  char *v552;
  unint64_t *v553;
  unint64_t v554;
  float v555;
  float v556;
  _BOOL8 v557;
  unint64_t v558;
  unint64_t v559;
  size_t v560;
  void *v561;
  void *v562;
  uint64_t v563;
  _QWORD *v564;
  size_t v565;
  size_t v566;
  size_t v567;
  _QWORD *m;
  size_t v569;
  uint64_t v570;
  uint64_t v571;
  unint64_t v572;
  uint8x8_t v573;
  uint64_t v574;
  _QWORD *v575;
  uint64_t v576;
  size_t v577;
  uint64_t v578;
  _QWORD *v579;
  unint64_t v580;
  _QWORD *v581;
  uint64_t v582;
  uint64_t v583;
  _BYTE *v584;
  uint64_t *v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t *v588;
  _QWORD *v589;
  _QWORD *v590;
  uint64_t v591;
  _QWORD *v592;
  char *v593;
  char *v594;
  std::__shared_weak_count *v595;
  unint64_t *v596;
  unint64_t v597;
  std::__shared_weak_count *v598;
  unint64_t *v599;
  unint64_t v600;
  std::__shared_weak_count *v601;
  unint64_t *v602;
  unint64_t v603;
  std::__shared_weak_count *v604;
  unint64_t *v605;
  unint64_t v606;
  std::__shared_weak_count *v607;
  unint64_t *v608;
  unint64_t v609;
  std::__shared_weak_count *v610;
  unint64_t *v611;
  unint64_t v612;
  std::__shared_weak_count *v613;
  unint64_t *v614;
  unint64_t v615;
  std::__shared_weak_count *v616;
  unint64_t *v617;
  unint64_t v618;
  void *v619;
  _QWORD *v620;
  uint64_t v621;
  size_t v622;
  uint64_t v623;
  uint64_t v624;
  _QWORD *v625;
  unint64_t v626;
  std::__shared_weak_count *v627;
  unint64_t *v628;
  unint64_t v629;
  std::__shared_weak_count *v630;
  unint64_t *v631;
  unint64_t v632;
  unint64_t *v633;
  unint64_t v634;
  std::__shared_weak_count *v635;
  unint64_t *v636;
  unint64_t v637;
  std::__shared_weak_count *v638;
  unint64_t *v639;
  unint64_t v640;
  unint64_t *v641;
  unint64_t v642;
  unint64_t *v643;
  unint64_t v644;
  void *v645;
  _QWORD *v646;
  void *v647;
  _QWORD *v648;
  void *v649;
  _QWORD *v650;
  _QWORD *v651;
  uint64_t v652;
  uint64_t v653;
  gdc::LayerDataRequestKey *v654;
  uint64_t v655;
  gdc::LayerDataRequestKey *v657;
  int v659;
  unsigned __int8 v660;
  __int8 v661;
  unsigned int v662;
  int32x2_t v663;
  unsigned __int8 v664;
  int v665;
  _QWORD *v666;
  int v667;
  uint64_t **v668;
  int v669;
  char *v670;
  QuadTile *v671;
  unsigned int v672;
  char v673;
  char *v674;
  unsigned int v675;
  QuadTile ***v676;
  md::FlyoverMetaData *v677;
  QuadTile *v678;
  QuadTile *v679;
  QuadTile *v680;
  uint64_t v681;
  uint64_t v682;
  char v683;
  int v684;
  QuadTile *v685;
  uint64_t v686;
  uint64_t *v687;
  uint64_t *v688;
  int v689;
  std::__shared_weak_count *v690;
  char v691;
  gdc::LayerDataRequestKey *v692;
  _QWORD *v693;
  gdc::LayerDataRequestKey *v694;
  uint64_t v695;
  char *v696;
  char *v697;
  char *v698;
  uint64_t *v699;
  gdc::LayerDataRequestKey *v700;
  std::__shared_weak_count *v701;
  QuadTile *v702;
  QuadTile *v703;
  __int16 *v704;
  int v705;
  uint64_t v706;
  char v707;
  char v708[8];
  void *v709;
  void *v710;
  void *v711[2];
  __int128 v712;
  float v713;
  void *v714;
  char *v715;
  uint64_t v716;
  unsigned __int16 v717;
  gdc::LayerDataRequestKey *v718;
  gdc::LayerDataRequestKey *v719;
  uint64_t v720;
  unsigned __int16 v721;
  gdc::LayerDataRequestKey *v722;
  uint64_t v723;
  __int128 __p;
  __int128 v725;
  float v726;
  _QWORD *v727;
  void *v728;
  uint64_t v729;
  void *v730;
  char *v731;
  uint64_t v732;
  float32x4_t v733;
  _BYTE v734[32];
  __int128 v735;
  __int128 v736;
  __int128 v737;
  __int128 v738;
  uint64_t v739;
  uint64_t v740;
  _BYTE v741[40];
  __int8 v742;
  __int8 v743;
  _BYTE v744[20];
  __int128 v745;
  unsigned __int8 type;
  __int128 v747;
  __int128 v748;
  double v749;
  uint64_t v750;
  __int16 v751;
  uint64_t v752;
  uint64_t v753;
  std::__shared_weak_count *v754;
  void (**v755)(md::MeshRenderable *__hidden);
  uint64_t v756;
  __int128 v757;
  __int128 v758;
  char v759;
  __int128 v760;
  char v761;
  char v762;
  __int128 v763;
  _BYTE v764[20];
  char v765;
  char v766;
  char v767;
  int v768;
  __int16 v769;
  char v770;
  std::__shared_weak_count *v771;
  char v772;
  char v773;
  char v774;
  __int16 v775;
  char v776;
  char v777;
  unint64_t v778;
  uint64_t v779;
  uint64_t v780;
  std::__shared_weak_count *v781;
  std::__shared_weak_count *v782;
  std::__shared_weak_count *v783;
  __int128 v784;
  uint64_t v785;
  std::__shared_weak_count *v786;
  _BYTE v787[25];
  uint64_t v788;
  uint64_t v789;
  std::__shared_weak_count *v790;
  unsigned __int8 v791;
  uint64_t v792;
  __int128 v793;
  uint64_t v794;
  unsigned __int8 v795[4];
  uint64_t v796;
  __int128 v797;
  __int16 v798;
  uint64_t v799;
  __int128 v800;
  uint64_t v801;
  std::__shared_weak_count *v802;
  QuadTile v803;
  _BYTE v804[72];
  _BYTE v805[32];
  _BYTE v806[24];
  uint64_t v807;
  std::__shared_weak_count *v808;
  char v809;
  char v810;
  uint64_t v811;
  char v812;
  char v813;
  _BYTE v814[28];
  uint64_t v815;
  std::__shared_weak_count *v816;
  void *v817;
  void (__cdecl **v818)(std::__shared_weak_count *__hidden);
  std::__shared_count v819;
  __int128 v820;
  __int128 v821;
  unsigned __int8 v822[8];
  unsigned __int16 v823[2];
  _BYTE v824[20];
  uint64_t v825;
  uint64_t *v826;
  uint64_t v827;
  char v828;
  unint64_t v829;
  _BYTE v830[40];
  __int16 v831;
  uint64_t v832;
  __int128 v833;
  uint64_t v834;
  void *v835;
  uint64_t v836;
  _BYTE v837[24];
  char v838;
  char v839;
  uint64_t v840;
  __int128 v841;
  __int16 v842;
  uint64_t v843;
  __int128 v844;
  uint64_t v845;

  v845 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD **)(a1 + 168);
  v676 = (QuadTile ***)v4[44];
  v5 = v4[10];
  v6 = v4[11];
  if (v5 != v6)
  {
    while (*(_WORD *)v5 != 75)
    {
      v5 += 16;
      if (v5 == v6)
        goto LABEL_7;
    }
  }
  if (v5 == v6)
LABEL_7:
    v694 = 0;
  else
    v694 = *(gdc::LayerDataRequestKey **)(v5 + 8);
  __p = 0u;
  v725 = 0u;
  v726 = 1.0;
  gdc::LayerDataCollector::missingData((gdc::LayerDataCollector *)&v717, a2, *(unsigned __int16 *)(a1 + 384));
  v7 = v717;
  v8 = v718;
  v9 = v719;
  v10 = v720;
  v11 = v721;
  v700 = v722;
  v695 = v723;
  v682 = a3;
  v659 = v717;
LABEL_10:
  while (v7 != v11 || v8 != v700 || v10 != v695)
  {
    md::FlyoverCommon::decodeFlyoverKey((md::FlyoverCommon *)v741, v8);
    if (*(_BYTE *)v8 == 1)
    {
      v12 = v741[0];
      v13 = v741[1];
      v14 = (v741[1]
           - 0x61C8864680B583EBLL
           + ((v741[0] - 0x61C8864680B583EBLL) << 6)
           + (((unint64_t)v741[0] - 0x61C8864680B583EBLL) >> 2)) ^ (v741[0] - 0x61C8864680B583EBLL);
      v15 = (*(int *)&v741[4] - 0x61C8864680B583EBLL + (v14 << 6) + (v14 >> 2)) ^ v14;
      v16 = *(int *)&v741[8] - 0x61C8864680B583EBLL + (v15 << 6) + (v15 >> 2);
      v17 = *(_QWORD *)&v741[28] & 0xFF00000000;
      v18 = 2 * *(unsigned int *)&v741[28];
      if ((*(_QWORD *)&v741[28] & 0xFF00000000) == 0)
        v18 = 0;
      v19 = (v18 | ((unint64_t)*(unsigned int *)&v741[36] << 33)) ^ v15;
      v20 = v19 ^ v16;
      v21 = *((_QWORD *)&__p + 1);
      if (*((_QWORD *)&__p + 1))
      {
        v22 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&__p + 8));
        v22.i16[0] = vaddlv_u8(v22);
        if (v22.u32[0] > 1uLL)
        {
          a3 = v19 ^ v16;
          if (v20 >= *((_QWORD *)&__p + 1))
            a3 = v20 % *((_QWORD *)&__p + 1);
        }
        else
        {
          a3 = v20 & (*((_QWORD *)&__p + 1) - 1);
        }
        v23 = *(uint64_t ***)(__p + 8 * a3);
        if (v23)
        {
          v24 = *v23;
          if (v24)
          {
            if (v22.u32[0] <= 1uLL)
            {
              v25 = *((_QWORD *)&__p + 1) - 1;
              if (!v17)
              {
                while (1)
                {
                  v27 = v24[1];
                  if (v27 == v20)
                  {
                    if (*((unsigned __int8 *)v24 + 40) == v741[24]
                      && __PAIR64__(*((unsigned __int8 *)v24 + 17), *((unsigned __int8 *)v24 + 16)) == __PAIR64__(v741[1], v741[0])
                      && *(uint64_t *)((char *)v24 + 20) == *(_QWORD *)&v741[4]
                      && *((_DWORD *)v24 + 13) == *(_DWORD *)&v741[36]
                      && !*((_BYTE *)v24 + 48))
                    {
                      goto LABEL_130;
                    }
                  }
                  else if ((v27 & v25) != a3)
                  {
                    goto LABEL_70;
                  }
                  v24 = (uint64_t *)*v24;
                  if (!v24)
                    goto LABEL_70;
                }
              }
              while (1)
              {
                v26 = v24[1];
                if (v26 == v20)
                {
                  if (*((unsigned __int8 *)v24 + 40) == v741[24]
                    && __PAIR64__(*((unsigned __int8 *)v24 + 17), *((unsigned __int8 *)v24 + 16)) == __PAIR64__(v741[1], v741[0])
                    && *(uint64_t *)((char *)v24 + 20) == *(_QWORD *)&v741[4]
                    && *((_DWORD *)v24 + 13) == *(_DWORD *)&v741[36]
                    && *((_BYTE *)v24 + 48)
                    && *((_DWORD *)v24 + 11) == *(_DWORD *)&v741[28])
                  {
                    goto LABEL_130;
                  }
                }
                else if ((v26 & v25) != a3)
                {
                  goto LABEL_70;
                }
                v24 = (uint64_t *)*v24;
                if (!v24)
                  goto LABEL_70;
              }
            }
            if (!v17)
            {
              while (1)
              {
                v29 = v24[1];
                if (v29 == v20)
                {
                  if (*((unsigned __int8 *)v24 + 40) == v741[24]
                    && __PAIR64__(*((unsigned __int8 *)v24 + 17), *((unsigned __int8 *)v24 + 16)) == __PAIR64__(v741[1], v741[0])
                    && *(uint64_t *)((char *)v24 + 20) == *(_QWORD *)&v741[4]
                    && *((_DWORD *)v24 + 13) == *(_DWORD *)&v741[36]
                    && !*((_BYTE *)v24 + 48))
                  {
                    goto LABEL_130;
                  }
                }
                else
                {
                  if (v29 >= *((_QWORD *)&__p + 1))
                    v29 %= *((_QWORD *)&__p + 1);
                  if (v29 != a3)
                    goto LABEL_70;
                }
                v24 = (uint64_t *)*v24;
                if (!v24)
                  goto LABEL_70;
              }
            }
            do
            {
              v28 = v24[1];
              if (v28 == v20)
              {
                if (*((unsigned __int8 *)v24 + 40) == v741[24]
                  && __PAIR64__(*((unsigned __int8 *)v24 + 17), *((unsigned __int8 *)v24 + 16)) == __PAIR64__(v741[1], v741[0])&& *(uint64_t *)((char *)v24 + 20) == *(_QWORD *)&v741[4]&& *((_DWORD *)v24 + 13) == *(_DWORD *)&v741[36]&& *((_BYTE *)v24 + 48)&& *((_DWORD *)v24 + 11) == *(_DWORD *)&v741[28])
                {
                  goto LABEL_130;
                }
              }
              else
              {
                if (v28 >= *((_QWORD *)&__p + 1))
                  v28 %= *((_QWORD *)&__p + 1);
                if (v28 != a3)
                  break;
              }
              v24 = (uint64_t *)*v24;
            }
            while (v24);
          }
        }
      }
LABEL_70:
      v30 = (char *)operator new(0x90uLL);
      *(_QWORD *)&v803._type = v30;
      *(_QWORD *)&v803._xIdx = &v725;
      *(_QWORD *)v30 = 0;
      *((_QWORD *)v30 + 1) = v20;
      v30[16] = v12;
      v30[17] = v13;
      *(_QWORD *)(v30 + 20) = *(_QWORD *)&v741[4];
      *(_OWORD *)(v30 + 40) = *(_OWORD *)&v741[24];
      gdc::LayerDataKey::LayerDataKey((uint64_t)(v30 + 56), (uint64_t)v8 + 8);
      LOBYTE(v803._hash) = 1;
      v31 = (float)(unint64_t)(*((_QWORD *)&v725 + 1) + 1);
      if (!v21 || (float)(v726 * (float)v21) < v31)
      {
        v32 = (v21 & (v21 - 1)) != 0;
        if (v21 < 3)
          v32 = 1;
        v33 = v32 | (2 * v21);
        v34 = vcvtps_u32_f32(v31 / v726);
        if (v33 <= v34)
          prime = v34;
        else
          prime = v33;
        if (prime == 1)
        {
          prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          prime = std::__next_prime(prime);
        }
        v21 = *((_QWORD *)&__p + 1);
        if (prime > *((_QWORD *)&__p + 1))
        {
LABEL_82:
          if (prime >> 61)
            goto LABEL_1241;
          v36 = operator new(8 * prime);
          v37 = (void *)__p;
          *(_QWORD *)&__p = v36;
          if (v37)
            operator delete(v37);
          v38 = 0;
          *((_QWORD *)&__p + 1) = prime;
          do
            *(_QWORD *)(__p + 8 * v38++) = 0;
          while (prime != v38);
          v39 = (_QWORD **)v725;
          if (!(_QWORD)v725)
            goto LABEL_106;
          v40 = *(_QWORD *)(v725 + 8);
          v41 = prime - 1;
          if ((prime & (prime - 1)) == 0)
          {
            v42 = v40 & v41;
            *(_QWORD *)(__p + 8 * v42) = &v725;
            for (i = *v39; *v39; i = *v39)
            {
              v44 = i[1] & v41;
              if (v44 == v42)
              {
                v39 = (_QWORD **)i;
              }
              else if (*(_QWORD *)(__p + 8 * v44))
              {
                *v39 = (_QWORD *)*i;
                v45 = 8 * v44;
                *i = **(_QWORD **)(__p + v45);
                **(_QWORD **)(__p + v45) = i;
              }
              else
              {
                *(_QWORD *)(__p + 8 * v44) = v39;
                v39 = (_QWORD **)i;
                v42 = v44;
              }
            }
            goto LABEL_106;
          }
          if (v40 >= prime)
            v40 %= prime;
          *(_QWORD *)(__p + 8 * v40) = &v725;
          v49 = *v39;
          if (!*v39)
          {
LABEL_106:
            v21 = prime;
            goto LABEL_107;
          }
          while (2)
          {
            v51 = v49[1];
            if (v51 >= prime)
              v51 %= prime;
            if (v51 != v40)
            {
              if (!*(_QWORD *)(__p + 8 * v51))
              {
                *(_QWORD *)(__p + 8 * v51) = v39;
LABEL_111:
                v39 = (_QWORD **)v49;
                v49 = (_QWORD *)*v49;
                v40 = v51;
                if (!v49)
                  goto LABEL_106;
                continue;
              }
              *v39 = (_QWORD *)*v49;
              v50 = 8 * v51;
              *v49 = **(_QWORD **)(__p + v50);
              **(_QWORD **)(__p + v50) = v49;
              v49 = v39;
            }
            break;
          }
          v51 = v40;
          goto LABEL_111;
        }
        if (prime < *((_QWORD *)&__p + 1))
        {
          v46 = vcvtps_u32_f32((float)*((unint64_t *)&v725 + 1) / v726);
          if (*((_QWORD *)&__p + 1) < 3uLL
            || (v47 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&__p + 8)), v47.i16[0] = vaddlv_u8(v47),
                                                                           v47.u32[0] > 1uLL))
          {
            v46 = std::__next_prime(v46);
          }
          else
          {
            v48 = 1 << -(char)__clz(v46 - 1);
            if (v46 >= 2)
              v46 = v48;
          }
          if (prime <= v46)
            prime = v46;
          if (prime >= v21)
          {
            v21 = *((_QWORD *)&__p + 1);
          }
          else
          {
            if (prime)
              goto LABEL_82;
            v57 = (void *)__p;
            *(_QWORD *)&__p = 0;
            if (v57)
              operator delete(v57);
            v21 = 0;
            *((_QWORD *)&__p + 1) = 0;
          }
        }
LABEL_107:
        if ((v21 & (v21 - 1)) != 0)
        {
          if (v20 >= v21)
            a3 = v20 % v21;
          else
            a3 = v20;
        }
        else
        {
          a3 = (v21 - 1) & v20;
        }
      }
      v52 = *(_QWORD **)(__p + 8 * a3);
      v53 = *(_QWORD *)&v803._type;
      if (v52)
      {
        **(_QWORD **)&v803._type = *v52;
        goto LABEL_128;
      }
      **(_QWORD **)&v803._type = v725;
      *(_QWORD *)&v725 = v53;
      *(_QWORD *)(__p + 8 * a3) = &v725;
      if (*(_QWORD *)v53)
      {
        v54 = *(_QWORD *)(*(_QWORD *)v53 + 8);
        if ((v21 & (v21 - 1)) != 0)
        {
          if (v54 >= v21)
            v54 %= v21;
        }
        else
        {
          v54 &= v21 - 1;
        }
        v52 = (_QWORD *)(__p + 8 * v54);
LABEL_128:
        *v52 = v53;
      }
      ++*((_QWORD *)&v725 + 1);
    }
LABEL_130:
    v55 = (gdc::LayerDataRequestKey *)((char *)v8 + 144);
    v8 = v9;
    a3 = v682;
    v7 = v659;
    if (v55 != v9)
    {
      v8 = v55;
      while (1)
      {
        if (*((unsigned __int16 *)v8 + 4) == v659)
        {
          v56 = *((_QWORD *)v8 + 17);
          if (!*(_QWORD *)(v10 + 144 * v56 + 112) || *(_BYTE *)(v10 + 144 * v56 + 136))
            break;
        }
        v8 = (gdc::LayerDataRequestKey *)((char *)v8 + 144);
        if (v8 == v9)
        {
          v8 = v9;
          goto LABEL_10;
        }
      }
    }
  }
  v715 = 0;
  v714 = 0;
  v58 = a1;
  v716 = 0;
  v59 = v718;
  v60 = v719;
  v61 = v720;
  v657 = v722;
  v654 = v719;
  v655 = v723;
  v668 = (uint64_t **)(a3 + 16);
  v652 = v720;
  v62 = (unint64_t)v795;
LABEL_148:
  while (v59 != v657 || v61 != v655)
  {
    v692 = v59;
    md::FlyoverCommon::decodeFlyoverKey((md::FlyoverCommon *)&v733, v59);
    v63 = v733.i8[0];
    v64 = *(_QWORD *)&v734[12] & 0xFF00000000;
    if ((*(_QWORD *)&v734[12] & 0xFF00000000) != 0)
      v65 = 2 * *(unsigned int *)&v734[12];
    else
      v65 = 0;
    v663 = *(int32x2_t *)&v733.i32[1];
    v662 = *(_DWORD *)&v734[20];
    if (!*((_QWORD *)&__p + 1))
    {
      v66 = v733.i8[1];
LABEL_208:
      v76 = 0;
      goto LABEL_209;
    }
    v66 = v733.i8[1];
    v67 = (v733.u8[1]
         - 0x61C8864680B583EBLL
         + ((v733.u8[0] - 0x61C8864680B583EBLL) << 6)
         + (((unint64_t)v733.u8[0] - 0x61C8864680B583EBLL) >> 2)) ^ (v733.u8[0] - 0x61C8864680B583EBLL);
    v68 = (v733.i32[1] - 0x61C8864680B583EBLL + (v67 << 6) + (v67 >> 2)) ^ v67;
    v69 = (v65 | ((unint64_t)*(unsigned int *)&v734[20] << 33)) ^ v68 ^ (v733.i32[2]
                                                                              - 0x61C8864680B583EBLL
                                                                              + (v68 << 6)
                                                                              + (v68 >> 2));
    v70 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&__p + 8));
    v70.i16[0] = vaddlv_u8(v70);
    if (v70.u32[0] > 1uLL)
    {
      v71 = v69;
      if (v69 >= *((_QWORD *)&__p + 1))
        v71 = v69 % *((_QWORD *)&__p + 1);
    }
    else
    {
      v71 = v69 & (*((_QWORD *)&__p + 1) - 1);
    }
    v72 = *(uint64_t ***)(__p + 8 * v71);
    if (!v72)
      goto LABEL_208;
    v73 = *v72;
    if (!v73)
      goto LABEL_208;
    if (v70.u32[0] <= 1uLL)
    {
      v74 = *((_QWORD *)&__p + 1) - 1;
      if (!v64)
      {
        while (1)
        {
          v77 = v73[1];
          if (v77 == v69)
          {
            if (*((unsigned __int8 *)v73 + 40) == v734[8]
              && __PAIR64__(*((unsigned __int8 *)v73 + 17), *((unsigned __int8 *)v73 + 16)) == __PAIR64__(v733.u8[1], v733.u8[0])&& *(uint64_t *)((char *)v73 + 20) == *(uint64_t *)((char *)v733.i64 + 4)&& *((_DWORD *)v73 + 13) == *(_DWORD *)&v734[20]&& !*((_BYTE *)v73 + 48))
            {
              goto LABEL_182;
            }
          }
          else if ((v77 & v74) != v71)
          {
            goto LABEL_208;
          }
          v76 = 0;
          v73 = (uint64_t *)*v73;
          if (!v73)
            goto LABEL_209;
        }
      }
      while (1)
      {
        v75 = v73[1];
        if (v75 == v69)
        {
          if (*((unsigned __int8 *)v73 + 40) == v734[8]
            && __PAIR64__(*((unsigned __int8 *)v73 + 17), *((unsigned __int8 *)v73 + 16)) == __PAIR64__(v733.u8[1], v733.u8[0])&& *(uint64_t *)((char *)v73 + 20) == *(uint64_t *)((char *)v733.i64 + 4)&& *((_DWORD *)v73 + 13) == *(_DWORD *)&v734[20]&& *((_BYTE *)v73 + 48)&& *((_DWORD *)v73 + 11) == *(_DWORD *)&v734[12])
          {
            goto LABEL_182;
          }
        }
        else if ((v75 & v74) != v71)
        {
          goto LABEL_208;
        }
        v73 = (uint64_t *)*v73;
        if (!v73)
          goto LABEL_208;
      }
    }
    if (!v64)
    {
      while (1)
      {
        v79 = v73[1];
        if (v79 == v69)
        {
          if (*((unsigned __int8 *)v73 + 40) == v734[8]
            && __PAIR64__(*((unsigned __int8 *)v73 + 17), *((unsigned __int8 *)v73 + 16)) == __PAIR64__(v733.u8[1], v733.u8[0])&& *(uint64_t *)((char *)v73 + 20) == *(uint64_t *)((char *)v733.i64 + 4)&& *((_DWORD *)v73 + 13) == *(_DWORD *)&v734[20]&& !*((_BYTE *)v73 + 48))
          {
            goto LABEL_182;
          }
        }
        else
        {
          if (v79 >= *((_QWORD *)&__p + 1))
            v79 %= *((_QWORD *)&__p + 1);
          if (v79 != v71)
            goto LABEL_208;
        }
        v76 = 0;
        v73 = (uint64_t *)*v73;
        if (!v73)
          goto LABEL_209;
      }
    }
    while (1)
    {
      v78 = v73[1];
      if (v78 == v69)
        break;
      if (v78 >= *((_QWORD *)&__p + 1))
        v78 %= *((_QWORD *)&__p + 1);
      if (v78 != v71)
        goto LABEL_208;
LABEL_186:
      v73 = (uint64_t *)*v73;
      if (!v73)
        goto LABEL_208;
    }
    if (*((unsigned __int8 *)v73 + 40) != v734[8]
      || __PAIR64__(*((unsigned __int8 *)v73 + 17), *((unsigned __int8 *)v73 + 16)) != __PAIR64__(v733.u8[1], v733.u8[0])|| *(uint64_t *)((char *)v73 + 20) != *(uint64_t *)((char *)v733.i64 + 4)|| *((_DWORD *)v73 + 13) != *(_DWORD *)&v734[20]|| !*((_BYTE *)v73 + 48)|| *((_DWORD *)v73 + 11) != *(_DWORD *)&v734[12])
    {
      goto LABEL_186;
    }
LABEL_182:
    v76 = v73;
LABEL_209:
    v80 = v692;
    if (!*((_QWORD *)&v725 + 1)
      || v76
      && *((unsigned __int16 *)v76 + 28) == *((unsigned __int16 *)v692 + 4)
      && v76[16] == *((_QWORD *)v692 + 10)
      && (v81 = (const void *)v76[8],
          v82 = v76[9] - (_QWORD)v81,
          v83 = (const void *)*((_QWORD *)v692 + 2),
          v82 == *((_QWORD *)v692 + 3) - (_QWORD)v83)
      && (v84 = memcmp(v81, v83, v82), v80 = v692, !v84)
      && !*(_BYTE *)v692)
    {
      v660 = v63;
      *(_QWORD *)&v837[12] = *(_QWORD *)&v734[8];
      *(_DWORD *)&v837[20] = *(_DWORD *)&v734[16];
      v85 = (char *)operator new(0x28uLL);
      v696 = 0;
      v86 = 0;
      v87 = 0;
      v88 = v66 - 1;
      v673 = v66 + 1;
      v89 = v85 + 40;
      *v85 = v660;
      v661 = v66;
      v85[1] = v66;
      *(int32x2_t *)(v85 + 4) = v663;
      v671 = (QuadTile *)v85;
      *(_OWORD *)(v85 + 24) = *(_OWORD *)&v734[8];
      v669 = v66 + 2;
      v665 = v66 - 4;
      v667 = 1;
      v678 = (QuadTile *)(v85 + 40);
      while (1)
      {
        v670 = v89;
        v90 = 0;
        if (v669 < v673)
        {
          v166 = v89;
          v91 = v671;
          goto LABEL_403;
        }
        v91 = v671;
        if (v671 == v678)
        {
          v166 = v89;
          goto LABEL_403;
        }
        v664 = v88;
        memset(v830, 0, 32);
        v92 = v86;
        v93 = (uint64_t)v671;
        *(_DWORD *)&v830[32] = 1065353216;
        v94 = v682;
LABEL_221:
        md::FlyoverCommon::selectChildren(v676, v93, &v714, (void **)(a1 + 120));
        v95 = (char *)v714;
        v697 = v715;
        if (v714 == v715)
          goto LABEL_220;
        v681 = v93;
        v683 = 1;
        while (1)
        {
          v97 = v95 + 24;
          if (v95[24])
            break;
          v96 = v87;
LABEL_224:
          v95 += 40;
          v87 = v96;
          if (v95 == v697)
            goto LABEL_295;
        }
        md::FlyoverCommon::encodeFlyoverKey((unsigned __int8 *)&v755, (unsigned __int8 *)v95, 0, 0);
        gdc::LayerDataStore::get((gdc::LayerDataStore *)v741, v694, (unsigned __int8 *)&v755);
        v98 = *(_QWORD *)v741;
        v96 = *(std::__shared_weak_count **)&v741[8];
        *(_QWORD *)&v741[8] = 0;
        *(_QWORD *)v741 = 0;
        if (v87)
        {
          p_shared_owners = (unint64_t *)&v87->__shared_owners_;
          do
            v100 = __ldaxr(p_shared_owners);
          while (__stlxr(v100 - 1, p_shared_owners));
          if (!v100)
          {
            ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
            std::__shared_weak_count::__release_weak(v87);
          }
        }
        v101 = v86;
        v102 = *(std::__shared_weak_count **)&v741[8];
        if (!*(_QWORD *)&v741[8])
          goto LABEL_235;
        v103 = (unint64_t *)(*(_QWORD *)&v741[8] + 8);
        do
          v104 = __ldaxr(v103);
        while (__stlxr(v104 - 1, v103));
        if (!v104)
        {
          ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
          std::__shared_weak_count::__release_weak(v102);
          if (!v98)
          {
LABEL_275:
            v683 = 0;
            if (!v764[4])
              goto LABEL_277;
LABEL_276:
            v764[4] = 0;
            goto LABEL_277;
          }
        }
        else
        {
LABEL_235:
          if (!v98)
            goto LABEL_275;
        }
        v701 = v96;
        v105 = v95[1];
        v106 = *(_QWORD *)(v95 + 4);
        v107 = *v95;
        *(_OWORD *)v824 = *v97;
        v108 = v733.i8[1];
        v109 = *(uint64_t *)((char *)v733.i64 + 4);
        v110 = v733.i8[0];
        v803._type = *(_BYTE *)(v98 + 16);
        gdc::LayerDataKey::LayerDataKey((uint64_t)&v803._xIdx, v98 + 24);
        v805[0] = 0;
        if (*(_BYTE *)(v98 + 112))
        {
          *(_DWORD *)&v805[4] = *(_DWORD *)(v98 + 116);
          v805[0] = 1;
        }
        *(_QWORD *)&v805[8] = *(_QWORD *)(v98 + 120);
        *(_WORD *)&v805[16] = *((_WORD *)v692 + 56);
        *(_QWORD *)&v805[20] = *(_QWORD *)((char *)v692 + 116);
        *(_QWORD *)&v806[8] = v98;
        *(_QWORD *)&v806[16] = v701;
        if (v701)
        {
          v111 = (unint64_t *)&v701->__shared_owners_;
          do
            v112 = __ldxr(v111);
          while (__stxr(v112 + 1, v111));
        }
        v741[0] = v107;
        v741[1] = v105;
        *(_QWORD *)&v741[4] = v106;
        *(_OWORD *)&v741[24] = *(_OWORD *)v824;
        v742 = v110;
        v743 = v108;
        *(_QWORD *)v744 = v109;
        v745 = *(_OWORD *)&v734[8];
        type = v803._type;
        gdc::LayerDataKey::LayerDataKey((uint64_t)&v747, (uint64_t)&v803._xIdx);
        LOBYTE(v749) = 0;
        if (v805[0])
        {
          HIDWORD(v749) = *(_DWORD *)&v805[4];
          LOBYTE(v749) = 1;
        }
        v750 = *(_QWORD *)&v805[8];
        v751 = *(_WORD *)&v805[16];
        v62 = (unint64_t)v795;
        v752 = *(_QWORD *)&v805[20];
        v753 = *(_QWORD *)&v806[8];
        v754 = *(std::__shared_weak_count **)&v806[16];
        v86 = v101;
        v96 = v701;
        if (*(_QWORD *)&v806[16])
        {
          v113 = (unint64_t *)(*(_QWORD *)&v806[16] + 8);
          do
            v114 = __ldxr(v113);
          while (__stxr(v114 + 1, v113));
        }
        std::__hash_table<std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,md::FlyoverCompleteTileDataLogic::FallbackInfo>,std::__unordered_map_hasher<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,md::FlyoverCompleteTileDataLogic::FallbackInfo>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>,true>,std::__unordered_map_equal<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,md::FlyoverCompleteTileDataLogic::FallbackInfo>,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>,md::FlyoverOctilePairHash,true>,std::allocator<std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,md::FlyoverCompleteTileDataLogic::FallbackInfo>>>::__emplace_unique_key_args<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::pair<std::pair<md::FlyoverOctile,md::FlyoverOctile> const,md::FlyoverCompleteTileDataLogic::FallbackInfo>>((uint64_t)v830, v741, (uint64_t)v741);
        v115 = v754;
        if (!v754)
          break;
        v116 = (unint64_t *)&v754->__shared_owners_;
        do
          v117 = __ldaxr(v116);
        while (__stlxr(v117 - 1, v116));
        if (v117)
          break;
        ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
        std::__shared_weak_count::__release_weak(v115);
        if (LOBYTE(v749))
          goto LABEL_251;
LABEL_252:
        if (*((_QWORD *)&v747 + 1) != *((_QWORD *)&v748 + 1))
          free(*((void **)&v747 + 1));
        v118 = *(std::__shared_weak_count **)&v806[16];
        if (!*(_QWORD *)&v806[16])
          goto LABEL_258;
        v119 = (unint64_t *)(*(_QWORD *)&v806[16] + 8);
        do
          v120 = __ldaxr(v119);
        while (__stlxr(v120 - 1, v119));
        if (v120)
        {
LABEL_258:
          if (!v805[0])
            goto LABEL_260;
LABEL_259:
          v805[0] = 0;
          goto LABEL_260;
        }
        ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
        std::__shared_weak_count::__release_weak(v118);
        if (v805[0])
          goto LABEL_259;
LABEL_260:
        if (v803._hash != *(_QWORD *)&v804[8])
          free((void *)v803._hash);
        if (v92 >= (QuadTile *)v696)
        {
          v121 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v92 - (char *)v101) >> 3) + 1;
          if (v121 > 0x666666666666666)
            abort();
          if (0x999999999999999ALL * ((v696 - (char *)v101) >> 3) > v121)
            v121 = 0x999999999999999ALL * ((v696 - (char *)v101) >> 3);
          if (0xCCCCCCCCCCCCCCCDLL * ((v696 - (char *)v101) >> 3) >= 0x333333333333333)
            v122 = 0x666666666666666;
          else
            v122 = v121;
          if (v122)
          {
            if (v122 > 0x666666666666666)
              goto LABEL_1241;
            v123 = (char *)operator new(40 * v122);
          }
          else
          {
            v123 = 0;
          }
          v124 = &v123[8 * (((char *)v92 - (char *)v101) >> 3)];
          *(_WORD *)v124 = *(_WORD *)v95;
          *(_QWORD *)(v124 + 4) = *(_QWORD *)(v95 + 4);
          *(_OWORD *)(v124 + 24) = *v97;
          if (v92 == v101)
          {
            v127 = &v123[8 * (((char *)v92 - (char *)v101) >> 3)];
          }
          else
          {
            v125 = 0;
            do
            {
              v126 = &v124[v125];
              *((_WORD *)v126 - 20) = *(_WORD *)((char *)&v92[-1] + v125 - 16);
              *(_QWORD *)(v126 - 36) = *(_QWORD *)((char *)&v92[-1] + v125 - 12);
              *((_OWORD *)v126 - 1) = *(_OWORD *)((char *)v92 + v125 - 16);
              v125 -= 40;
            }
            while ((QuadTile *)((char *)v92 + v125) != v101);
            v127 = &v124[v125];
          }
          v696 = &v123[40 * v122];
          v92 = (QuadTile *)(v124 + 40);
          if (v101)
            operator delete(v101);
          v86 = (QuadTile *)v127;
          v96 = v701;
          if (v764[4])
            goto LABEL_276;
        }
        else
        {
          *(_WORD *)&v92->_type = *(_WORD *)v95;
          *(_QWORD *)&v92->_yIdx = *(_QWORD *)(v95 + 4);
          *(_OWORD *)&v92[1]._type = *v97;
          v92 = (QuadTile *)((char *)v92 + 40);
          if (v764[4])
            goto LABEL_276;
        }
LABEL_277:
        if ((_QWORD)v757 != (_QWORD)v758)
          free((void *)v757);
        if (v98)
          goto LABEL_224;
LABEL_295:
        if ((v683 & 1) == 0)
        {
          v167 = v96;
          v90 = 0;
          v168 = *(_BYTE **)&v830[16];
          if (!*(_QWORD *)&v830[16])
            goto LABEL_399;
LABEL_417:
          while (1)
          {
            v178 = *(_BYTE **)v168;
            v179 = (std::__shared_weak_count *)*((_QWORD *)v168 + 30);
            if (v179)
            {
              v180 = (unint64_t *)&v179->__shared_owners_;
              do
                v181 = __ldaxr(v180);
              while (__stlxr(v181 - 1, v180));
              if (!v181)
                break;
            }
            if (v168[192])
              goto LABEL_422;
LABEL_423:
            v182 = (void *)*((_QWORD *)v168 + 14);
            if (v182 != *((void **)v168 + 16))
              free(v182);
            operator delete(v168);
            v168 = v178;
            if (!v178)
              goto LABEL_399;
          }
          ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
          std::__shared_weak_count::__release_weak(v179);
          if (!v168[192])
            goto LABEL_423;
LABEL_422:
          v168[192] = 0;
          goto LABEL_423;
        }
        v87 = v96;
        v93 = v681;
        v94 = v682;
LABEL_220:
        v93 += 40;
        if ((QuadTile *)v93 != v678)
          goto LABEL_221;
        if (!*(_QWORD *)&v830[24])
        {
          v90 = 0;
          v167 = v87;
          v168 = *(_BYTE **)&v830[16];
          if (*(_QWORD *)&v830[16])
            goto LABEL_417;
          goto LABEL_399;
        }
        v128 = *(uint64_t **)&v830[16];
        if (!*(_QWORD *)&v830[16])
        {
          v90 = 1;
          v166 = v696;
          v678 = v92;
          v91 = v86;
          goto LABEL_400;
        }
        v129 = *(_QWORD *)(v94 + 8);
        v702 = v86;
LABEL_303:
        while (2)
        {
          v130 = (*((unsigned __int8 *)v128 + 17)
                - 0x61C8864680B583EBLL
                + ((*((unsigned __int8 *)v128 + 16) - 0x61C8864680B583EBLL) << 6)
                + (((unint64_t)*((unsigned __int8 *)v128 + 16) - 0x61C8864680B583EBLL) >> 2)) ^ (*((unsigned __int8 *)v128 + 16) - 0x61C8864680B583EBLL);
          v131 = (*((int *)v128 + 5) - 0x61C8864680B583EBLL + (v130 << 6) + (v130 >> 2)) ^ v130;
          if ((*(uint64_t *)((char *)v128 + 44) & 0xFF00000000) != 0)
            v132 = 2 * *(uint64_t *)((char *)v128 + 44);
          else
            v132 = 0;
          v133 = (v132 | ((unint64_t)*((unsigned int *)v128 + 13) << 33)) ^ v131 ^ (*((int *)v128 + 6)
                                                                                         - 0x61C8864680B583EBLL
                                                                                         + (v131 << 6)
                                                                                         + (v131 >> 2));
          v134 = (*((unsigned __int8 *)v128 + 57)
                - 0x61C8864680B583EBLL
                + ((*((unsigned __int8 *)v128 + 56) - 0x61C8864680B583EBLL) << 6)
                + (((unint64_t)*((unsigned __int8 *)v128 + 56) - 0x61C8864680B583EBLL) >> 2)) ^ (*((unsigned __int8 *)v128 + 56) - 0x61C8864680B583EBLL);
          v135 = (*((int *)v128 + 15) - 0x61C8864680B583EBLL + (v134 << 6) + (v134 >> 2)) ^ v134;
          if ((*(uint64_t *)((char *)v128 + 84) & 0xFF00000000) != 0)
            v136 = 2 * *(uint64_t *)((char *)v128 + 84);
          else
            v136 = 0;
          v137 = ((v133 << 6)
                - 0x61C8864680B583EBLL
                + (v133 >> 2)
                + ((v136 | ((unint64_t)*((unsigned int *)v128 + 23) << 33)) ^ v135 ^ (*((int *)v128 + 16)
                                                                                           - 0x61C8864680B583EBLL
                                                                                           + (v135 << 6)
                                                                                           + (v135 >> 2)))) ^ v133;
          if (v129)
          {
            v138 = (uint8x8_t)vcnt_s8((int8x8_t)v129);
            v138.i16[0] = vaddlv_u8(v138);
            if (v138.u32[0] > 1uLL)
            {
              v139 = ((v133 << 6)
                    - 0x61C8864680B583EBLL
                    + (v133 >> 2)
                    + ((v136 | ((unint64_t)*((unsigned int *)v128 + 23) << 33)) ^ v135 ^ (*((int *)v128 + 16)
                                                                                               - 0x61C8864680B583EBLL
                                                                                               + (v135 << 6)
                                                                                               + (v135 >> 2)))) ^ v133;
              if (v129 <= v137)
                v139 = v137 % v129;
            }
            else
            {
              v139 = (v129 - 1) & v137;
            }
            v140 = *(unsigned __int8 ***)(*(_QWORD *)v682 + 8 * v139);
            if (v140)
            {
              v141 = *v140;
              if (*v140)
              {
                if (v138.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v143 = *((_QWORD *)v141 + 1);
                    if (v143 == v137)
                    {
                      if (std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>::operator()[abi:nn180100](v141 + 16, (unsigned __int8 *)v128 + 16))
                      {
                        goto LABEL_349;
                      }
                    }
                    else if ((v143 & (v129 - 1)) != v139)
                    {
                      goto LABEL_329;
                    }
                    v141 = *(unsigned __int8 **)v141;
                    if (!v141)
                      goto LABEL_329;
                  }
                }
                do
                {
                  v142 = *((_QWORD *)v141 + 1);
                  if (v142 == v137)
                  {
                    if (std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>::operator()[abi:nn180100](v141 + 16, (unsigned __int8 *)v128 + 16))
                    {
LABEL_349:
                      v86 = v702;
                      v128 = (uint64_t *)*v128;
                      if (!v128)
                        goto LABEL_396;
                      goto LABEL_303;
                    }
                  }
                  else
                  {
                    if (v142 >= v129)
                      v142 %= v129;
                    if (v142 != v139)
                      break;
                  }
                  v141 = *(unsigned __int8 **)v141;
                }
                while (v141);
              }
            }
          }
LABEL_329:
          v144 = (float)(unint64_t)(*(_QWORD *)(v682 + 24) + 1);
          v145 = *(float *)(v682 + 32);
          if (!v129 || (float)(v145 * (float)v129) < v144)
          {
            v146 = v129 < 3 || (v129 & (v129 - 1)) != 0;
            v147 = v146 | (2 * v129);
            v148 = vcvtps_u32_f32(v144 / v145);
            if (v147 <= v148)
              v149 = v148;
            else
              v149 = v147;
            if (v149 == 1)
            {
              v149 = 2;
            }
            else if ((v149 & (v149 - 1)) != 0)
            {
              v149 = std::__next_prime(v149);
              v129 = *(_QWORD *)(v682 + 8);
            }
            if (v149 > v129)
              goto LABEL_342;
            if (v149 < v129)
            {
              v150 = vcvtps_u32_f32((float)*(unint64_t *)(v682 + 24) / *(float *)(v682 + 32));
              if (v129 < 3
                || (v151 = (uint8x8_t)vcnt_s8((int8x8_t)v129), v151.i16[0] = vaddlv_u8(v151), v151.u32[0] > 1uLL))
              {
                v150 = std::__next_prime(v150);
              }
              else
              {
                v152 = 1 << -(char)__clz(v150 - 1);
                if (v150 >= 2)
                  v150 = v152;
              }
              if (v149 <= v150)
                v149 = v150;
              if (v149 < v129)
LABEL_342:
                std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(v682, v149);
            }
          }
          v153 = *(_QWORD *)&v830[8];
          v154 = v128[1];
          v155 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&v830[8]);
          v155.i16[0] = vaddlv_u8(v155);
          if (v155.u32[0] > 1uLL)
          {
            v86 = v702;
            if (v154 >= *(_QWORD *)&v830[8])
              v154 %= *(_QWORD *)&v830[8];
          }
          else
          {
            v154 &= *(_QWORD *)&v830[8] - 1;
            v86 = v702;
          }
          v156 = (uint64_t *)*v128;
          v157 = *(uint64_t **)(*(_QWORD *)v830 + 8 * v154);
          do
          {
            v158 = v157;
            v157 = (uint64_t *)*v157;
          }
          while (v157 != v128);
          if (v158 == (uint64_t *)&v830[16])
            goto LABEL_1247;
          v159 = v158[1];
          if (v155.u32[0] > 1uLL)
          {
            if (v159 >= *(_QWORD *)&v830[8])
              v159 %= *(_QWORD *)&v830[8];
          }
          else
          {
            v159 &= *(_QWORD *)&v830[8] - 1;
          }
          v160 = (uint64_t *)*v128;
          if (v159 == v154)
          {
LABEL_374:
            if (v160)
              goto LABEL_375;
          }
          else
          {
LABEL_1247:
            if (!v156)
              goto LABEL_373;
            v161 = v156[1];
            if (v155.u32[0] > 1uLL)
            {
              if (v161 >= *(_QWORD *)&v830[8])
                v161 %= *(_QWORD *)&v830[8];
            }
            else
            {
              v161 &= *(_QWORD *)&v830[8] - 1;
            }
            v160 = (uint64_t *)*v128;
            if (v161 != v154)
            {
LABEL_373:
              *(_QWORD *)(*(_QWORD *)v830 + 8 * v154) = 0;
              v160 = (uint64_t *)*v128;
              goto LABEL_374;
            }
LABEL_375:
            v162 = v160[1];
            if (v155.u32[0] > 1uLL)
            {
              if (v162 >= v153)
                v162 %= v153;
            }
            else
            {
              v162 &= v153 - 1;
            }
            if (v162 != v154)
            {
              *(_QWORD *)(*(_QWORD *)v830 + 8 * v162) = v158;
              v160 = (uint64_t *)*v128;
            }
          }
          *v158 = (uint64_t)v160;
          *v128 = 0;
          --*(_QWORD *)&v830[24];
          v128[1] = v137;
          v129 = *(_QWORD *)(v682 + 8);
          v163 = (uint8x8_t)vcnt_s8((int8x8_t)v129);
          v163.i16[0] = vaddlv_u8(v163);
          if (v163.u32[0] > 1uLL)
          {
            if (v137 >= v129)
              v137 %= v129;
          }
          else
          {
            v137 &= v129 - 1;
          }
          v164 = *(uint64_t **)(*(_QWORD *)v682 + 8 * v137);
          if (v164)
          {
            *v128 = *v164;
            goto LABEL_301;
          }
          *v128 = *(_QWORD *)(v682 + 16);
          *(_QWORD *)(v682 + 16) = v128;
          *(_QWORD *)(*(_QWORD *)v682 + 8 * v137) = v668;
          if (*v128)
          {
            v165 = *(_QWORD *)(*v128 + 8);
            if (v163.u32[0] > 1uLL)
            {
              if (v165 >= v129)
                v165 %= v129;
            }
            else
            {
              v165 &= v129 - 1;
            }
            v164 = (uint64_t *)(*(_QWORD *)v682 + 8 * v165);
LABEL_301:
            *v164 = (uint64_t)v128;
          }
          ++*(_QWORD *)(v682 + 24);
          v128 = v156;
          if (v156)
            continue;
          break;
        }
LABEL_396:
        v90 = 1;
        v167 = v87;
        v62 = (unint64_t)v795;
        v168 = *(_BYTE **)&v830[16];
        if (*(_QWORD *)&v830[16])
          goto LABEL_417;
LABEL_399:
        v166 = v696;
        v678 = v92;
        v91 = v86;
        v87 = v167;
LABEL_400:
        v169 = *(void **)v830;
        *(_QWORD *)v830 = 0;
        v88 = v664;
        if (v169)
          operator delete(v169);
        v86 = v671;
        v696 = v670;
LABEL_403:
        if ((v90 & 1) != 0 || (v88 & 0x80) != 0 || v665 >= v88 || !v667)
        {
          if ((v90 & 1) != 0)
            goto LABEL_495;
          goto LABEL_428;
        }
        v170 = (int)v676;
        if (!v676)
          goto LABEL_436;
        if (!v661)
        {
          v170 = 0;
LABEL_436:
          v183 = 0;
          v830[0] = 0;
          LOBYTE(v831) = 0;
          goto LABEL_486;
        }
        v698 = v166;
        LOWORD(v755) = *(_WORD *)&v837[13];
        BYTE2(v755) = v837[15];
        v803._type = v660;
        v803._level = v661 - 1;
        *(int32x2_t *)&v803._yIdx = vshr_n_s32(v663, 1uLL);
        md::FlyoverRegionManager::Internal::getRegionArea((md::FlyoverRegionManager::Internal *)v741, **v676, (uint64_t)&v803);
        if (!v741[24])
        {
          LOBYTE(v171) = 0;
          v177 = 0;
          LODWORD(v172) = 0;
LABEL_439:
          v176 = v662;
          goto LABEL_440;
        }
        v171 = *(unsigned int *)&v741[16] | 0x100000000;
        v172 = v171 >> 8;
        v173 = *(std::__shared_weak_count **)&v741[8];
        if (!*(_QWORD *)&v741[8])
        {
          v177 = 0x100000000;
          goto LABEL_439;
        }
        v174 = (unint64_t *)(*(_QWORD *)&v741[8] + 8);
        do
          v175 = __ldaxr(v174);
        while (__stlxr(v175 - 1, v174));
        v176 = v662;
        if (!v175)
        {
          ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
          std::__shared_weak_count::__release_weak(v173);
          v176 = v662;
        }
        v177 = 0x100000000;
LABEL_440:
        v184 = v176 >> 1;
        v185 = md::FlyoverMetaData::tileType((md::FlyoverMetaData *)v676, &v803, v176 >> 1);
        if (v185 <= 0xFFu)
        {
          v170 = 0;
          v183 = 0;
          v830[0] = 0;
          LOBYTE(v831) = 0;
          v62 = (unint64_t)v795;
          v166 = v698;
          goto LABEL_486;
        }
        v183 = 0;
        v186 = v171 | (unint64_t)v177;
        v62 = (unint64_t)v795;
        *(_WORD *)&v830[25] = (_WORD)v755;
        v830[27] = BYTE2(v755);
        *(_QWORD *)&v830[4] = *(_QWORD *)&v803._yIdx;
        v830[24] = v185;
        *(_QWORD *)&v830[28] = v186 | ((_DWORD)v172 << 8);
        *(_DWORD *)&v830[36] = v184;
        *(_WORD *)v830 = *(_WORD *)&v803._type;
        v170 = 1;
        LOBYTE(v831) = 1;
        v166 = v698;
        if ((_BYTE)v185)
        {
          md::FlyoverCommon::encodeFlyoverKey((unsigned __int8 *)&v755, v830, 0, 0);
          gdc::LayerDataStore::get((gdc::LayerDataStore *)v741, v694, (unsigned __int8 *)&v755);
          v187 = *(_QWORD *)v741;
          v188 = *(std::__shared_weak_count **)&v741[8];
          *(_QWORD *)&v741[8] = 0;
          *(_QWORD *)v741 = 0;
          if (!v87)
            goto LABEL_447;
          v189 = (unint64_t *)&v87->__shared_owners_;
          do
            v190 = __ldaxr(v189);
          while (__stlxr(v190 - 1, v189));
          if (!v190)
          {
            ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
            std::__shared_weak_count::__release_weak(v87);
            v191 = *(std::__shared_weak_count **)&v741[8];
            if (*(_QWORD *)&v741[8])
            {
LABEL_448:
              v192 = (unint64_t *)&v191->__shared_owners_;
              do
                v193 = __ldaxr(v192);
              while (__stlxr(v193 - 1, v192));
              if (!v193)
              {
                ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
                std::__shared_weak_count::__release_weak(v191);
              }
            }
          }
          else
          {
LABEL_447:
            v191 = *(std::__shared_weak_count **)&v741[8];
            if (*(_QWORD *)&v741[8])
              goto LABEL_448;
          }
          v183 = v187 != 0;
          if (v187)
          {
            v703 = v86;
            if (!(_BYTE)v831)
            {
              std::__throw_bad_optional_access[abi:nn180100]();
              __break(1u);
            }
            v194 = v830[1];
            v195 = *(_QWORD *)&v830[4];
            v196 = v830[0];
            v197 = v733.i8[1];
            v198 = *(uint64_t *)((char *)v733.i64 + 4);
            v199 = v733.i8[0];
            v803._type = *(_BYTE *)(v187 + 16);
            gdc::LayerDataKey::LayerDataKey((uint64_t)&v803._xIdx, v187 + 24);
            v805[0] = 0;
            if (*(_BYTE *)(v187 + 112))
            {
              *(_DWORD *)&v805[4] = *(_DWORD *)(v187 + 116);
              v805[0] = 1;
            }
            *(_QWORD *)&v805[8] = *(_QWORD *)(v187 + 120);
            *(_WORD *)&v805[16] = *((_WORD *)v692 + 56);
            *(_QWORD *)&v805[20] = *(_QWORD *)((char *)v692 + 116);
            *(_QWORD *)&v806[8] = v187;
            *(_QWORD *)&v806[16] = v188;
            if (v188)
            {
              v200 = (unint64_t *)&v188->__shared_owners_;
              do
                v201 = __ldxr(v200);
              while (__stxr(v201 + 1, v200));
            }
            v741[0] = v196;
            v741[1] = v194;
            *(_QWORD *)&v741[4] = v195;
            *(_OWORD *)&v741[24] = *(_OWORD *)&v830[24];
            v742 = v199;
            v743 = v197;
            *(_QWORD *)v744 = v198;
            v745 = *(_OWORD *)&v734[8];
            type = v803._type;
            gdc::LayerDataKey::LayerDataKey((uint64_t)&v747, (uint64_t)&v803._xIdx);
            LOBYTE(v749) = 0;
            if (v805[0])
            {
              HIDWORD(v749) = *(_DWORD *)&v805[4];
              LOBYTE(v749) = 1;
            }
            v750 = *(_QWORD *)&v805[8];
            v751 = *(_WORD *)&v805[16];
            v62 = (unint64_t)v795;
            v752 = *(_QWORD *)&v805[20];
            v753 = *(_QWORD *)&v806[8];
            v754 = *(std::__shared_weak_count **)&v806[16];
            v86 = v703;
            if (*(_QWORD *)&v806[16])
            {
              v202 = (unint64_t *)(*(_QWORD *)&v806[16] + 8);
              do
                v203 = __ldxr(v202);
              while (__stxr(v203 + 1, v202));
            }
            std::__hash_table<std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,md::FlyoverCompleteTileDataLogic::FallbackInfo>,std::__unordered_map_hasher<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,md::FlyoverCompleteTileDataLogic::FallbackInfo>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>,true>,std::__unordered_map_equal<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,md::FlyoverCompleteTileDataLogic::FallbackInfo>,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>,md::FlyoverOctilePairHash,true>,std::allocator<std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,md::FlyoverCompleteTileDataLogic::FallbackInfo>>>::__emplace_unique_key_args<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::pair<std::pair<md::FlyoverOctile,md::FlyoverOctile> const,md::FlyoverCompleteTileDataLogic::FallbackInfo>>(v682, v741, (uint64_t)v741);
            v204 = v754;
            if (!v754)
              goto LABEL_469;
            v205 = (unint64_t *)&v754->__shared_owners_;
            do
              v206 = __ldaxr(v205);
            while (__stlxr(v206 - 1, v205));
            if (!v206)
            {
              ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
              std::__shared_weak_count::__release_weak(v204);
              if (LOBYTE(v749))
LABEL_470:
                LOBYTE(v749) = 0;
            }
            else
            {
LABEL_469:
              if (LOBYTE(v749))
                goto LABEL_470;
            }
            if (*((_QWORD *)&v747 + 1) != *((_QWORD *)&v748 + 1))
              free(*((void **)&v747 + 1));
            v207 = *(std::__shared_weak_count **)&v806[16];
            if (!*(_QWORD *)&v806[16])
              goto LABEL_477;
            v208 = (unint64_t *)(*(_QWORD *)&v806[16] + 8);
            do
              v209 = __ldaxr(v208);
            while (__stlxr(v209 - 1, v208));
            if (!v209)
            {
              ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
              std::__shared_weak_count::__release_weak(v207);
              if (v805[0])
LABEL_478:
                v805[0] = 0;
            }
            else
            {
LABEL_477:
              if (v805[0])
                goto LABEL_478;
            }
            if (v803._hash != *(_QWORD *)&v804[8])
              free((void *)v803._hash);
          }
          if (v764[4])
            v764[4] = 0;
          v166 = v698;
          if ((_QWORD)v757 != (_QWORD)v758)
            free((void *)v757);
          v170 = v831;
          v87 = v188;
        }
LABEL_486:
        if (v667 != v170)
        {
          v667 = 0;
          if (!v183)
            goto LABEL_428;
          goto LABEL_495;
        }
        v660 = v830[0];
        v661 = v830[1];
        v663 = *(int32x2_t *)&v830[4];
        *(_OWORD *)v837 = *(_OWORD *)&v830[12];
        *(_QWORD *)&v837[16] = *(_QWORD *)&v830[28];
        v662 = *(_DWORD *)&v830[36];
        if (v183)
          goto LABEL_495;
LABEL_428:
        ++v673;
        if ((--v88 & 0x80) == 0 && v665 < v88)
        {
          v89 = v166;
          v671 = v91;
          if (v667)
            continue;
        }
        if (v669 >= v673)
        {
          v89 = v166;
          v671 = v91;
          if (v91 != v678)
            continue;
        }
LABEL_495:
        if (v86)
          operator delete(v86);
        v7 = v659;
        v61 = v652;
        v60 = v654;
        if (v91)
          operator delete(v91);
        v58 = a1;
        v80 = v692;
        if (v87)
        {
          v210 = (unint64_t *)&v87->__shared_owners_;
          do
            v211 = __ldaxr(v210);
          while (__stlxr(v211 - 1, v210));
          if (!v211)
          {
            ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
            std::__shared_weak_count::__release_weak(v87);
            v80 = v692;
          }
        }
        goto LABEL_504;
      }
      if (!LOBYTE(v749))
        goto LABEL_252;
LABEL_251:
      LOBYTE(v749) = 0;
      goto LABEL_252;
    }
LABEL_504:
    v59 = v60;
    if ((gdc::LayerDataRequestKey *)((char *)v80 + 144) != v60)
    {
      v59 = (gdc::LayerDataRequestKey *)((char *)v80 + 144);
      while (1)
      {
        if (*((unsigned __int16 *)v59 + 4) == v7)
        {
          v212 = *((_QWORD *)v59 + 17);
          if (!*(_QWORD *)(v61 + 144 * v212 + 112) || *(_BYTE *)(v61 + 144 * v212 + 136))
            break;
        }
        v59 = (gdc::LayerDataRequestKey *)((char *)v59 + 144);
        if (v59 == v60)
        {
          v59 = v60;
          goto LABEL_148;
        }
      }
    }
  }
  *(_OWORD *)v711 = 0u;
  v712 = 0u;
  v713 = 1.0;
  v213 = *v668;
  if (!*v668)
    goto LABEL_1231;
  v674 = (char *)(v58 + 224);
  v693 = (_QWORD *)(v58 + 248);
  v666 = (_QWORD *)(v58 + 592);
  v650 = (_QWORD *)(v58 + 264);
  v651 = (_QWORD *)(v58 + 568);
  while (2)
  {
    v214 = *((unsigned __int8 *)v213 + 208);
    v215 = *((unsigned __int8 *)v213 + 209);
    v216 = (v215
          - 0x61C8864680B583EBLL
          + ((v214 - 0x61C8864680B583EBLL) << 6)
          + ((unint64_t)(v214 - 0x61C8864680B583EBLL) >> 2)) ^ (v214 - 0x61C8864680B583EBLL);
    v217 = *((int *)v213 + 53);
    v218 = *((int *)v213 + 54);
    v704 = (__int16 *)(v213 + 26);
    v219 = (v217 - 0x61C8864680B583EBLL + (v216 << 6) + (v216 >> 2)) ^ v216;
    v220 = (v218 - 0x61C8864680B583EBLL + (v219 << 6) + (v219 >> 2)) ^ v219;
    v221 = (unint64_t)v711[1];
    if (v711[1])
    {
      v222 = (uint8x8_t)vcnt_s8((int8x8_t)v711[1]);
      v222.i16[0] = vaddlv_u8(v222);
      if (v222.u32[0] > 1uLL)
      {
        v223 = (v218 - 0x61C8864680B583EBLL + (v219 << 6) + (v219 >> 2)) ^ v219;
        if ((void *)v220 >= v711[1])
          v223 = v220 % (unint64_t)v711[1];
      }
      else
      {
        v223 = v220 & ((unint64_t)v711[1] - 1);
      }
      v224 = (void **)*((_QWORD *)v711[0] + v223);
      if (v224)
      {
        v225 = (unsigned __int8 *)*v224;
        if (*v224)
        {
          if (v222.u32[0] < 2uLL)
          {
            while (1)
            {
              v227 = *((_QWORD *)v225 + 1);
              if (v227 == v220)
              {
                if (__PAIR64__(v225[17], v225[16]) == __PAIR64__(v215, v214)
                  && *(_QWORD *)(v225 + 20) == __PAIR64__(v218, v217))
                {
                  goto LABEL_626;
                }
              }
              else if ((v227 & ((uint64_t)v711[1] - 1)) != v223)
              {
                goto LABEL_538;
              }
              v225 = *(unsigned __int8 **)v225;
              if (!v225)
                goto LABEL_538;
            }
          }
          do
          {
            v226 = *((_QWORD *)v225 + 1);
            if (v226 == v220)
            {
              if (__PAIR64__(v225[17], v225[16]) == __PAIR64__(v215, v214)
                && *(_QWORD *)(v225 + 20) == __PAIR64__(v218, v217))
              {
                goto LABEL_626;
              }
            }
            else
            {
              if ((void *)v226 >= v711[1])
                v226 %= (unint64_t)v711[1];
              if (v226 != v223)
                break;
            }
            v225 = *(unsigned __int8 **)v225;
          }
          while (v225);
        }
      }
LABEL_538:
      memset(v741, 0, 32);
      *(_DWORD *)&v741[32] = 1065353216;
      if (v222.u32[0] > 1uLL)
      {
        v62 = (v218 - 0x61C8864680B583EBLL + (v219 << 6) + (v219 >> 2)) ^ v219;
        if ((void *)v220 >= v711[1])
          v62 = v220 % (unint64_t)v711[1];
      }
      else
      {
        v62 = v220 & ((unint64_t)v711[1] - 1);
      }
      v228 = (void **)*((_QWORD *)v711[0] + v62);
      if (v228)
      {
        v225 = (unsigned __int8 *)*v228;
        if (*v228)
        {
          if (v222.u32[0] < 2uLL)
          {
            while (1)
            {
              v230 = *((_QWORD *)v225 + 1);
              if (v230 == v220)
              {
                if (v225[16] == (_DWORD)v214
                  && v225[17] == (_DWORD)v215
                  && *((_DWORD *)v225 + 5) == (_DWORD)v217
                  && *((_DWORD *)v225 + 6) == (_DWORD)v218)
                {
                  goto LABEL_624;
                }
              }
              else if ((v230 & ((uint64_t)v711[1] - 1)) != v62)
              {
                goto LABEL_564;
              }
              v225 = *(unsigned __int8 **)v225;
              if (!v225)
                goto LABEL_564;
            }
          }
          do
          {
            v229 = *((_QWORD *)v225 + 1);
            if (v229 == v220)
            {
              if (v225[16] == (_DWORD)v214
                && v225[17] == (_DWORD)v215
                && *((_DWORD *)v225 + 5) == (_DWORD)v217
                && *((_DWORD *)v225 + 6) == (_DWORD)v218)
              {
                goto LABEL_624;
              }
            }
            else
            {
              if ((void *)v229 >= v711[1])
                v229 %= (unint64_t)v711[1];
              if (v229 != v62)
                break;
            }
            v225 = *(unsigned __int8 **)v225;
          }
          while (v225);
        }
      }
    }
    else
    {
      memset(v741, 0, 32);
      *(_DWORD *)&v741[32] = 1065353216;
    }
LABEL_564:
    v225 = (unsigned __int8 *)operator new(0x50uLL);
    *(_QWORD *)&v803._type = v225;
    *(_QWORD *)&v803._xIdx = &v712;
    *(_QWORD *)v225 = 0;
    *((_QWORD *)v225 + 1) = v220;
    *((_WORD *)v225 + 8) = *((_WORD *)v213 + 104);
    *(_QWORD *)(v225 + 20) = *(uint64_t *)((char *)v213 + 212);
    *(_QWORD *)&v741[8] = 0;
    *(_QWORD *)v741 = 0;
    *((_QWORD *)v225 + 5) = 0;
    *((_QWORD *)v225 + 6) = 0;
    *((_QWORD *)v225 + 7) = 0;
    *((_QWORD *)v225 + 8) = 0;
    *((_DWORD *)v225 + 18) = 1065353216;
    LOBYTE(v803._hash) = 1;
    v231 = (float)(unint64_t)(*((_QWORD *)&v712 + 1) + 1);
    if (!v221 || (float)(v713 * (float)v221) < v231)
    {
      v232 = (v221 & (v221 - 1)) != 0;
      if (v221 < 3)
        v232 = 1;
      v233 = v232 | (2 * v221);
      v234 = vcvtps_u32_f32(v231 / v713);
      if (v233 <= v234)
        v235 = v234;
      else
        v235 = v233;
      if (v235 == 1)
      {
        v235 = 2;
      }
      else if ((v235 & (v235 - 1)) != 0)
      {
        v235 = std::__next_prime(v235);
        v221 = (unint64_t)v711[1];
      }
      if (v235 <= v221)
      {
        if (v235 >= v221)
          goto LABEL_601;
        v246 = vcvtps_u32_f32((float)*((unint64_t *)&v712 + 1) / v713);
        if (v221 < 3 || (v247 = (uint8x8_t)vcnt_s8((int8x8_t)v221), v247.i16[0] = vaddlv_u8(v247), v247.u32[0] > 1uLL))
        {
          v246 = std::__next_prime(v246);
        }
        else
        {
          v248 = 1 << -(char)__clz(v246 - 1);
          if (v246 >= 2)
            v246 = v248;
        }
        if (v235 <= v246)
          v235 = v246;
        if (v235 >= v221)
        {
          v221 = (unint64_t)v711[1];
LABEL_601:
          if ((v221 & (v221 - 1)) != 0)
          {
            if (v220 >= v221)
              v62 = v220 % v221;
            else
              v62 = v220;
          }
          else
          {
            v62 = (v221 - 1) & v220;
          }
          goto LABEL_614;
        }
        if (!v235)
        {
          v444 = v711[0];
          v711[0] = 0;
          if (v444)
            operator delete(v444);
          v221 = 0;
          v711[1] = 0;
          goto LABEL_601;
        }
      }
      if (v235 >> 61)
        goto LABEL_1241;
      v236 = operator new(8 * v235);
      v237 = v711[0];
      v711[0] = v236;
      if (v237)
        operator delete(v237);
      v238 = 0;
      v711[1] = (void *)v235;
      do
        *((_QWORD *)v711[0] + v238++) = 0;
      while (v235 != v238);
      v239 = (_QWORD **)v712;
      if (!(_QWORD)v712)
      {
LABEL_600:
        v221 = v235;
        goto LABEL_601;
      }
      v240 = *(_QWORD *)(v712 + 8);
      v241 = v235 - 1;
      if ((v235 & (v235 - 1)) == 0)
      {
        v242 = v240 & v241;
        *((_QWORD *)v711[0] + v242) = &v712;
        for (j = *v239; *v239; j = *v239)
        {
          v244 = j[1] & v241;
          if (v244 == v242)
          {
            v239 = (_QWORD **)j;
          }
          else if (*((_QWORD *)v711[0] + v244))
          {
            *v239 = (_QWORD *)*j;
            v245 = 8 * v244;
            *j = **(_QWORD **)((char *)v711[0] + v245);
            **(_QWORD **)((char *)v711[0] + v245) = j;
          }
          else
          {
            *((_QWORD *)v711[0] + v244) = v239;
            v239 = (_QWORD **)j;
            v242 = v244;
          }
        }
        goto LABEL_600;
      }
      if (v240 >= v235)
        v240 %= v235;
      *((_QWORD *)v711[0] + v240) = &v712;
      v249 = *v239;
      if (!*v239)
        goto LABEL_600;
      while (1)
      {
        v251 = v249[1];
        if (v251 >= v235)
          v251 %= v235;
        if (v251 != v240)
        {
          if (!*((_QWORD *)v711[0] + v251))
          {
            *((_QWORD *)v711[0] + v251) = v239;
            goto LABEL_605;
          }
          *v239 = (_QWORD *)*v249;
          v250 = 8 * v251;
          *v249 = **(_QWORD **)((char *)v711[0] + v250);
          **(_QWORD **)((char *)v711[0] + v250) = v249;
          v249 = v239;
        }
        v251 = v240;
LABEL_605:
        v239 = (_QWORD **)v249;
        v249 = (_QWORD *)*v249;
        v240 = v251;
        if (!v249)
          goto LABEL_600;
      }
    }
LABEL_614:
    v252 = v711[0];
    v253 = (_QWORD *)*((_QWORD *)v711[0] + v62);
    if (v253)
    {
      *(_QWORD *)v225 = *v253;
LABEL_622:
      *v253 = v225;
      goto LABEL_623;
    }
    *(_QWORD *)v225 = v712;
    *(_QWORD *)&v712 = v225;
    v252[v62] = &v712;
    if (*(_QWORD *)v225)
    {
      v254 = *(_QWORD *)(*(_QWORD *)v225 + 8);
      if ((v221 & (v221 - 1)) != 0)
      {
        if (v254 >= v221)
          v254 %= v221;
      }
      else
      {
        v254 &= v221 - 1;
      }
      v253 = (char *)v711[0] + 8 * v254;
      goto LABEL_622;
    }
LABEL_623:
    ++*((_QWORD *)&v712 + 1);
LABEL_624:
    if (*(_QWORD *)v741)
      operator delete(*(void **)v741);
LABEL_626:
    v255 = v213 + 29;
    v256 = *(_BYTE *)(v213[29] + 16);
    gdc::LayerDataKey::LayerDataKey((uint64_t)v708, (uint64_t)(v213 + 13));
    v822[0] = v256;
    gdc::LayerDataKey::LayerDataKey((uint64_t)v823, (uint64_t)v708);
    v828 = 0;
    v257 = (v827
          - 0x61C8864680B583EBLL
          + ((v822[0] - 0x61C8864680B583EBLL) << 6)
          + (((unint64_t)v822[0] - 0x61C8864680B583EBLL) >> 2)) ^ (v822[0] - 0x61C8864680B583EBLL);
    v829 = v257;
    v699 = v213;
    if (v709 != v710)
    {
      free(v709);
      v257 = v829;
    }
    v258 = v225 + 40;
    v259 = *(int8x8_t *)(v225 + 48);
    if (v259)
    {
      v260 = (uint8x8_t)vcnt_s8(v259);
      v260.i16[0] = vaddlv_u8(v260);
      if (v260.u32[0] > 1uLL)
      {
        v261 = v257;
        if (v257 >= *(_QWORD *)&v259)
          v261 = v257 % *(_QWORD *)&v259;
      }
      else
      {
        v261 = (*(_QWORD *)&v259 - 1) & v257;
      }
      v262 = *(uint64_t ****)(*v258 + 8 * v261);
      if (v262)
      {
        v263 = *v262;
        if (*v262)
        {
          v264 = v822[0];
          v265 = v823[0];
          v266 = v826;
          v267 = *(const void **)&v824[4];
          v268 = *(_QWORD *)&v824[12] - *(_QWORD *)&v824[4];
          if (v260.u32[0] < 2uLL)
          {
            v269 = *(_QWORD *)&v259 - 1;
            while (1)
            {
              v273 = v263[1];
              if ((uint64_t *)v257 == v273)
              {
                if (*((unsigned __int8 *)v263 + 16) == v264
                  && *((unsigned __int16 *)v263 + 12) == v265
                  && v263[12] == v266)
                {
                  v274 = v263[4];
                  if ((char *)v263[5] - (char *)v274 == v268)
                  {
                    v688 = v266;
                    v275 = memcmp(v274, v267, v268);
                    v266 = v688;
                    if (!v275)
                      goto LABEL_658;
                  }
                }
              }
              else if (((unint64_t)v273 & v269) != v261)
              {
                goto LABEL_657;
              }
              v263 = (uint64_t **)*v263;
              if (!v263)
                goto LABEL_657;
            }
          }
          do
          {
            v270 = (unint64_t)v263[1];
            if (v257 == v270)
            {
              if (*((unsigned __int8 *)v263 + 16) == v264
                && *((unsigned __int16 *)v263 + 12) == v265
                && v263[12] == v266)
              {
                v271 = v263[4];
                if ((char *)v263[5] - (char *)v271 == v268)
                {
                  v687 = v266;
                  v272 = memcmp(v271, v267, v268);
                  v266 = v687;
                  if (!v272)
                    goto LABEL_658;
                }
              }
            }
            else
            {
              if (v270 >= *(_QWORD *)&v259)
                v270 %= *(_QWORD *)&v259;
              if (v270 != v261)
                break;
            }
            v263 = (uint64_t **)*v263;
          }
          while (v263);
        }
      }
    }
LABEL_657:
    gdc::LayerDataCollector::addFallbackData((uint64_t)a2, (uint64_t)v822, v704, v255);
    std::__hash_table<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>::__emplace_unique_key_args<gdc::LayerDataRequestKey,gdc::LayerDataRequestKey const&>((uint64_t)v258, v822, (uint64_t)v822);
LABEL_658:
    v276 = v699;
    v277 = v699[29];
    v278 = (std::__shared_weak_count *)v699[30];
    v801 = v277;
    v802 = v278;
    if (v278)
    {
      v279 = (unint64_t *)&v278->__shared_owners_;
      do
        v280 = __ldxr(v279);
      while (__stxr(v280 + 1, v279));
    }
    v281 = *((unsigned __int8 *)v699 + 80);
    v282 = *((unsigned __int8 *)v699 + 17);
    v283 = *((unsigned __int8 *)v699 + 16);
    v795[0] = *((_BYTE *)v699 + 16);
    v795[1] = v282;
    v62 = (unint64_t)(v699 + 5);
    v284 = *((unsigned __int8 *)v699 + 40);
    v796 = *(uint64_t *)((char *)v699 + 20);
    v797 = *(_OWORD *)(v699 + 5);
    v285 = *((unsigned __int8 *)v699 + 57);
    v286 = *((unsigned __int8 *)v699 + 56);
    LOBYTE(v798) = *((_BYTE *)v699 + 56);
    HIBYTE(v798) = v285;
    v799 = *(uint64_t *)((char *)v699 + 60);
    v800 = *((_OWORD *)v699 + 5);
    if (v284 != 2)
      goto LABEL_1205;
    if (v283 != 255)
      goto LABEL_1205;
    if (!v281)
      goto LABEL_1205;
    if (v286 != 255)
      goto LABEL_1205;
    if (v282 >= v285)
      goto LABEL_1205;
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t, __int16 *))(**(_QWORD **)(a1 + 464) + 16))(&v792, *(_QWORD *)(a1 + 464), 20, v704 - 96);
    if (!(_BYTE)v792)
      goto LABEL_1205;
    v287 = BYTE1(v793);
    (*(void (**)(_BYTE *__return_ptr, _QWORD, uint64_t, uint64_t *))(**(_QWORD **)(a1 + 464) + 16))(v741, *(_QWORD *)(a1 + 464), 20, v699 + 7);
    if (!v741[0])
      goto LABEL_1205;
    v679 = (QuadTile *)(v704 - 96);
    if ((_BYTE)v792)
    {
      v793 = *(_OWORD *)&v741[8];
      v794 = *(_QWORD *)&v741[24];
      v288 = v741[9];
      v689 = *(_DWORD *)&v741[12];
      v684 = *(_DWORD *)&v741[16];
      v705 = v741[8];
    }
    else
    {
      v705 = v741[8];
      LOWORD(v793) = *(_WORD *)&v741[8];
      v288 = v741[9];
      v689 = *(_DWORD *)&v741[12];
      *(_QWORD *)((char *)&v793 + 4) = *(_QWORD *)&v741[12];
      v684 = *(_DWORD *)&v741[16];
      LOBYTE(v792) = 1;
    }
    v289 = std::__hash_table<std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__list_iterator<geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::CacheEntry,void *>>,std::__unordered_map_hasher<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__list_iterator<geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::CacheEntry,void *>>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>,true>,std::__unordered_map_equal<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__list_iterator<geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::CacheEntry,void *>>,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>,md::FlyoverOctilePairHash,true>,std::allocator<std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__list_iterator<geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::CacheEntry,void *>>>>::find<std::pair<md::FlyoverOctile,md::FlyoverOctile>>(v693, v795);
    if (v289
      && (v290 = v289,
          v291 = geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::_elementAccessed(v674, *((char **)v289 + 12)), *((_QWORD *)v290 + 12) = v291, v674 != v291)&& *((_QWORD *)v291 + 14))
    {
      v292 = *(unsigned __int8 *)(*((_QWORD *)v291 + 12) + 64);
      if (v292 == v288)
        goto LABEL_1205;
    }
    else
    {
      v292 = 0;
      if (!v288)
        goto LABEL_1205;
    }
    v675 = v287;
    v293 = *(_QWORD *)(a1 + 168);
    *(_QWORD *)&v741[8] = 0;
    *(_QWORD *)v741 = 0;
    v294 = *(_QWORD *)(v293 + 80);
    v295 = *(_QWORD *)(v293 + 88);
    v677 = (md::FlyoverMetaData *)v278;
    v672 = v292;
    v296 = v288;
    if (v294 != v295)
    {
      while (*(_WORD *)v294 != 77)
      {
        v294 += 16;
        if (v294 == v295)
          goto LABEL_732;
      }
    }
    if (v294 == v295 || (v297 = *(_QWORD **)(v294 + 8)) == 0 || (v298 = (_QWORD *)v297[1], v298 == v297))
    {
LABEL_732:
      LOBYTE(v299) = 0;
      v789 = 0;
      v788 = 0;
      v790 = 0;
      v327 = v675;
LABEL_733:
      v791 = v299;
      v278 = (std::__shared_weak_count *)v677;
      goto LABEL_734;
    }
    v653 = 0;
    v299 = 0;
    v300 = *(_QWORD **)(v294 + 8);
    do
    {
      v302 = (_QWORD *)v298[16];
      v301 = v298[17];
      *(_QWORD *)&v803._type = v302;
      *(_QWORD *)&v803._xIdx = v301;
      if (v301)
      {
        v303 = (unint64_t *)(v301 + 8);
        do
          v304 = __ldxr(v303);
        while (__stxr(v304 + 1, v303));
      }
      v305 = v302[90];
      if (v305)
      {
        if (*(unsigned __int8 *)(v305 + 57) <= v299)
          goto LABEL_725;
LABEL_691:
        if (*(unsigned __int8 *)(v305 + 57) > v296)
          goto LABEL_725;
        goto LABEL_692;
      }
      v314 = v302[92];
      if (!v314 || *(unsigned __int8 *)(v314 + 57) <= v299)
        goto LABEL_725;
      v305 = v302[92];
      if (v305)
        goto LABEL_691;
LABEL_692:
      if (!(*(uint64_t (**)(_QWORD *))(*v302 + 72))(v302))
      {
        v297 = v300;
        goto LABEL_725;
      }
      v306 = (*(uint64_t (**)(_QWORD *))(*v302 + 72))(v302);
      v307 = v306;
      v297 = v300;
      if (v306 && *(unsigned __int8 *)(v306 + 56) == v705)
      {
        v308 = *(unsigned __int8 *)(v306 + 57);
        v309 = *(_QWORD *)(v306 + 60);
        v310 = v296 - v308;
        if (v296 <= v308)
        {
          if (v296 != v308 || (_DWORD)v309 != v689 || HIDWORD(v309) != v684)
            goto LABEL_725;
        }
        else
        {
          v311 = v689 >> v310;
          v312 = v684 >> v310;
          if ((_DWORD)v309 != v311 || HIDWORD(v309) != v312)
            goto LABEL_725;
        }
        v317 = v302[90];
        if (v317 || (v317 = v302[92]) != 0)
        {
          v299 = *(unsigned __int8 *)(v317 + 57);
          if (v301)
          {
LABEL_717:
            v318 = (unint64_t *)(v301 + 8);
            do
              v319 = __ldxr(v318);
            while (__stxr(v319 + 1, v318));
          }
        }
        else
        {
          v299 = 0;
          if (v301)
            goto LABEL_717;
        }
        v320 = *(std::__shared_weak_count **)&v741[8];
        *(_QWORD *)v741 = v302;
        *(_QWORD *)&v741[8] = v301;
        if (v320)
        {
          v321 = (unint64_t *)&v320->__shared_owners_;
          do
            v322 = __ldaxr(v321);
          while (__stlxr(v322 - 1, v321));
          if (!v322)
          {
            v323 = v320;
            ((void (*)(std::__shared_weak_count *))v320->__on_zero_shared)(v320);
            std::__shared_weak_count::__release_weak(v323);
            v297 = v300;
          }
        }
        v653 = v307;
      }
LABEL_725:
      v324 = *(std::__shared_weak_count **)&v803._xIdx;
      if (*(_QWORD *)&v803._xIdx)
      {
        v325 = (unint64_t *)(*(_QWORD *)&v803._xIdx + 8);
        do
          v326 = __ldaxr(v325);
        while (__stlxr(v326 - 1, v325));
        if (!v326)
        {
          ((void (*)(std::__shared_weak_count *))v324->__on_zero_shared)(v324);
          std::__shared_weak_count::__release_weak(v324);
          v297 = v300;
        }
      }
      v298 = (_QWORD *)v298[1];
    }
    while (v298 != v297);
    v454 = *(std::__shared_weak_count **)&v741[8];
    v788 = v653;
    v789 = *(_QWORD *)v741;
    v790 = *(std::__shared_weak_count **)&v741[8];
    v327 = v675;
    if (!*(_QWORD *)&v741[8])
    {
      v276 = v699;
      goto LABEL_733;
    }
    v455 = (unint64_t *)(*(_QWORD *)&v741[8] + 8);
    do
      v456 = __ldxr(v455);
    while (__stxr(v456 + 1, v455));
    v791 = v299;
    v276 = v699;
    do
      v457 = __ldaxr(v455);
    while (__stlxr(v457 - 1, v455));
    v278 = (std::__shared_weak_count *)v677;
    if (!v457)
    {
      ((void (*)(std::__shared_weak_count *))v454->__on_zero_shared)(v454);
      std::__shared_weak_count::__release_weak(v454);
    }
LABEL_734:
    v328 = v788;
    if (!v788)
      goto LABEL_1201;
    v329 = v672 < v791 && v791 >= v327;
    if (!v329)
      goto LABEL_1201;
    v330 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v277 + 48))(v277);
    v331 = (_QWORD *)gdc::Registry::storage<md::components::TexturedMeshInstance>(v330);
    v332 = v789;
    hash = v790;
    *(_QWORD *)v837 = v789;
    *(_QWORD *)&v837[8] = v790;
    if (v790)
    {
      v334 = (unint64_t *)&v790->__shared_owners_;
      do
        v335 = __ldxr(v334);
      while (__stxr(v335 + 1, v334));
    }
    *(_QWORD *)&v837[16] = v328;
    v336 = *((_BYTE *)v276 + 57);
    v337 = *((unsigned __int8 *)v276 + 56);
    v838 = *((_BYTE *)v276 + 56);
    v839 = v336;
    v338 = *(uint64_t *)((char *)v276 + 60);
    v840 = v338;
    v841 = *((_OWORD *)v699 + 5);
    v339 = *((_BYTE *)v276 + 17);
    v340 = v276;
    v341 = *((_BYTE *)v276 + 16);
    LOBYTE(v842) = v341;
    HIBYTE(v842) = v339;
    v342 = *(uint64_t *)((char *)v340 + 20);
    v843 = v342;
    v844 = *(_OWORD *)v62;
    v343 = std::__hash_table<std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,md::FlyoverCompleteTileDataLogic::MeshStorage>,std::__unordered_map_hasher<md::FlyoverCompleteTileDataLogic::DrapingTask,std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,md::FlyoverCompleteTileDataLogic::MeshStorage>,md::FlyoverCompleteTileDataLogic::DrapingTaskHash,std::equal_to<md::FlyoverCompleteTileDataLogic::DrapingTask>,true>,std::__unordered_map_equal<md::FlyoverCompleteTileDataLogic::DrapingTask,std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,md::FlyoverCompleteTileDataLogic::MeshStorage>,std::equal_to<md::FlyoverCompleteTileDataLogic::DrapingTask>,md::FlyoverCompleteTileDataLogic::DrapingTaskHash,true>,std::allocator<std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,md::FlyoverCompleteTileDataLogic::MeshStorage>>>::find<md::FlyoverCompleteTileDataLogic::DrapingTask>(v666, (uint64_t)v837);
    if (v343)
    {
      v345 = v343[15];
      v344 = v343[16];
      *(_QWORD *)&v784 = v345;
      *((_QWORD *)&v784 + 1) = v344;
      if (v344)
      {
        v346 = (unint64_t *)(v344 + 8);
        do
          v347 = __ldxr(v346);
        while (__stxr(v347 + 1, v346));
      }
      v348 = (std::__shared_weak_count *)v343[18];
      v785 = v343[17];
      v786 = v348;
      if (v348)
      {
        v349 = (unint64_t *)&v348->__shared_owners_;
        do
          v350 = __ldxr(v349);
        while (__stxr(v350 + 1, v349));
      }
      *(_OWORD *)v787 = *(_OWORD *)(v343 + 19);
      *(_OWORD *)&v787[9] = *(_OWORD *)((char *)v343 + 161);
      *(_QWORD *)&v741[8] = 0;
      *(_QWORD *)v741 = 0;
      *(_QWORD *)&v803._xIdx = 0;
      *(_QWORD *)&v803._type = 0;
      md::MeshRenderableBuilder::MeshRenderableBuilder(&v780, 0, 0, &v803);
      v351 = operator new();
      md::InstanceData::InstanceData(v351, 1u, 0);
      v352 = (std::__shared_weak_count *)operator new();
      v352->__shared_owners_ = 0;
      v353 = (unint64_t *)&v352->__shared_owners_;
      v352->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E6BC0;
      v352->__shared_weak_owners_ = 0;
      v352[1].__vftable = (std::__shared_weak_count_vtbl *)v351;
      v755 = &off_1E428F838;
      LOBYTE(v756) = 3;
      v757 = 0uLL;
      *(_QWORD *)&v758 = v351;
      *((_QWORD *)&v758 + 1) = v352;
      do
        v354 = __ldxr(v353);
      while (__stxr(v354 + 1, v353));
      v759 = 0;
      BYTE8(v760) = 0;
      v761 = 1;
      v763 = xmmword_19FFB3470;
      *(_QWORD *)v764 = 0x80000000800000;
      v764[8] = 0;
      v765 = 0;
      v766 = 0;
      v767 = 0;
      v768 = 65537;
      v769 = 0;
      v770 = 0;
      v772 = 0;
      v773 = 0;
      v774 = 0;
      v775 = 0;
      v776 = 0;
      v777 = 0;
      do
        v355 = __ldaxr((unint64_t *)&md::MeshRenderable::generateId(void)::sId);
      while (__stlxr(v355 + 1, (unint64_t *)&md::MeshRenderable::generateId(void)::sId));
      v778 = v355;
      v779 = v345;
      v757 = *(_OWORD *)(v345 + 16);
      md::MeshRenderable::recalculateBounds((md::MeshRenderable *)&v755);
      do
        v356 = __ldaxr(v353);
      while (__stlxr(v356 - 1, v353));
      if (!v356)
      {
        ((void (*)(std::__shared_weak_count *))v352->__on_zero_shared)(v352);
        std::__shared_weak_count::__release_weak(v352);
      }
      v357 = v758;
      v358 = *(_QWORD *)v758;
      v359 = *(_QWORD *)(*(_QWORD *)v758 + 48) - *(_QWORD *)(*(_QWORD *)v758 + 40);
      v360 = v359 % *(_QWORD *)(*(_QWORD *)v758 + 8);
      v361 = *(_QWORD *)(*(_QWORD *)v758 + 72);
      *(_DWORD *)v361 = 1065353216;
      *(_QWORD *)(v361 + 12) = 0;
      *(_QWORD *)(v361 + 4) = 0;
      *(_DWORD *)(v361 + 20) = 1065353216;
      *(_QWORD *)(v361 + 24) = 0;
      *(_QWORD *)(v361 + 32) = 0;
      *(_DWORD *)(v361 + 40) = 1065353216;
      *(_QWORD *)(v361 + 52) = 0;
      *(_QWORD *)(v361 + 44) = 0;
      *(_DWORD *)(v361 + 60) = 1065353216;
      v362 = v359 - v360;
      v363 = v693;
      if (v362)
      {
        if (*(_QWORD *)(v358 + 64) > v362)
          v362 = *(_QWORD *)(v358 + 64);
        *(_QWORD *)(v358 + 56) = 0;
        *(_QWORD *)(v358 + 64) = v362;
      }
      *(_BYTE *)(v357 + 20) = 1;
      gdc::Tiled::Tiled((gdc::Tiled *)v741, v679, 0.0, 0.0);
      gm::Matrix<double,4,4>::inverted<int,void>((double *)v830, &v749);
      v733 = (float32x4_t)xmmword_19FFB32C0;
      *(_OWORD *)&v734[16] = xmmword_19FFB33A0;
      *(_QWORD *)&v734[8] = 0;
      *(_QWORD *)v734 = 0;
      v735 = 0u;
      v736 = 0u;
      v737 = xmmword_19FFB32C0;
      v738 = *(_OWORD *)v787;
      v739 = *(_QWORD *)&v787[16];
      v740 = 0x3FF0000000000000;
      gm::operator*<double,4,4,4>((double *)&v803._type, (double *)v830, (double *)v733.i64);
      *(_QWORD *)&v364.f64[0] = v803._hash;
      v365.f64[0] = *(float64_t *)&v804[56];
      v364.f64[1] = *(float64_t *)&v804[8];
      v365.f64[1] = *(float64_t *)v805;
      v733 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)&v803._type), v364);
      *(float32x4_t *)v734 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)&v804[16]), *(float64x2_t *)&v804[40]);
      *(float32x4_t *)&v734[16] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v365), *(float64x2_t *)&v805[8]);
      v731 = 0;
      v730 = 0;
      v732 = 0;
      v727 = &v727;
      v728 = &v727;
      v729 = 0;
      p_xIdx = (QuadTile *)v331[7];
      v680 = (QuadTile *)v331[8];
      if (p_xIdx != v680)
      {
        v367 = (uint64_t *)v331[10];
        do
        {
          v368 = v785;
          v369 = v786;
          if (v786)
          {
            v370 = (unint64_t *)&v786->__shared_owners_;
            do
              v371 = __ldxr(v370);
            while (__stxr(v371 + 1, v370));
          }
          v690 = v369;
          v372 = v784;
          if (*((_QWORD *)&v784 + 1))
          {
            v373 = (unint64_t *)(*((_QWORD *)&v784 + 1) + 8);
            do
              v374 = __ldxr(v373);
            while (__stxr(v374 + 1, v373));
          }
          v375 = (char *)v367[16];
          v376 = (char *)v367[17];
          v377 = v787[24];
          memset(v830, 0, 24);
          v378 = v376 - v375;
          if (v376 != v375)
          {
            if (v378 < 0)
              abort();
            v379 = operator new(v376 - v375);
            *(_QWORD *)v830 = v379;
            *(_QWORD *)&v830[8] = v379;
            *(_QWORD *)&v830[16] = &v379[2 * (v378 >> 4)];
            do
            {
              *v379 = *(_QWORD *)v375;
              v380 = *((_QWORD *)v375 + 1);
              v379[1] = v380;
              if (v380)
              {
                v381 = (unint64_t *)(v380 + 8);
                do
                  v382 = __ldxr(v381);
                while (__stxr(v382 + 1, v381));
              }
              v375 += 16;
              v379 += 2;
            }
            while (v375 != v376);
            *(_QWORD *)&v830[8] = v379;
          }
          v383 = md::MeshRenderableBuilder::buildRenderable((uint64_t)&v803, (uint64_t)&v755, v367 + 14, (uint64_t **)v830, (uint64_t)&v733);
          v384 = *(_QWORD *)v830;
          if (*(_QWORD *)v830)
          {
            v385 = *(_QWORD *)&v830[8];
            v386 = *(void **)v830;
            if (*(_QWORD *)&v830[8] != *(_QWORD *)v830)
            {
              do
              {
                v387 = *(std::__shared_weak_count **)(v385 - 8);
                if (v387)
                {
                  v388 = (unint64_t *)&v387->__shared_owners_;
                  do
                    v389 = __ldaxr(v388);
                  while (__stlxr(v389 - 1, v388));
                  if (!v389)
                  {
                    ((void (*)(std::__shared_weak_count *, __n128))v387->__on_zero_shared)(v387, v383);
                    std::__shared_weak_count::__release_weak(v387);
                  }
                }
                v385 -= 16;
              }
              while (v385 != v384);
              v386 = *(void **)v830;
            }
            *(_QWORD *)&v830[8] = v384;
            operator delete(v386);
          }
          v390 = (char *)operator new(0x150uLL);
          v391 = (std::__shared_weak_count *)v390;
          *((_QWORD *)v390 + 1) = 0;
          v392 = (unint64_t *)(v390 + 8);
          *((_QWORD *)v390 + 2) = 0;
          *(_QWORD *)v390 = &off_1E428A028;
          *((_QWORD *)v390 + 3) = &off_1E428F838;
          v393 = v390 + 24;
          *((_OWORD *)v390 + 2) = *(_OWORD *)&v803._xIdx;
          v394 = *(_QWORD *)&v804[8];
          v395 = *(_QWORD *)&v804[16];
          *((_QWORD *)v390 + 6) = *(_QWORD *)v804;
          *((_QWORD *)v390 + 7) = v394;
          *((_QWORD *)v390 + 8) = v395;
          if (v395)
          {
            v396 = (unint64_t *)(v395 + 8);
            do
              v397 = __ldxr(v396);
            while (__stxr(v397 + 1, v396));
          }
          v398 = *(_OWORD *)&v804[56];
          *(_OWORD *)(v390 + 120) = *(_OWORD *)v805;
          v399 = *(_OWORD *)v806;
          *(_OWORD *)(v390 + 136) = *(_OWORD *)&v805[16];
          *(_OWORD *)(v390 + 152) = v399;
          v400 = *(_OWORD *)&v804[40];
          *(_OWORD *)(v390 + 72) = *(_OWORD *)&v804[24];
          *(_OWORD *)(v390 + 88) = v400;
          *(_QWORD *)(v390 + 166) = *(_QWORD *)&v806[14];
          *(_OWORD *)(v390 + 104) = v398;
          v390[176] = 0;
          v390[200] = 0;
          if (v810)
          {
            v401 = v808;
            *((_QWORD *)v390 + 22) = v807;
            *((_QWORD *)v390 + 23) = v401;
            if (v401)
            {
              v402 = (unint64_t *)&v401->__shared_owners_;
              do
                v403 = __ldxr(v402);
              while (__stxr(v403 + 1, v402));
            }
            v390[192] = v809;
            v390[200] = 1;
          }
          v685 = p_xIdx;
          v404 = v377;
          *((_QWORD *)v390 + 26) = v811;
          *((_WORD *)v390 + 108) = 0;
          if (v813)
          {
            v390[216] = v812;
            v390[217] = 1;
          }
          v405 = v368;
          *(_OWORD *)(v390 + 220) = *(_OWORD *)v814;
          *(_OWORD *)(v390 + 232) = *(_OWORD *)&v814[12];
          *((_QWORD *)v390 + 3) = &off_1E4296560;
          v406 = v816;
          *((_QWORD *)v390 + 31) = v815;
          *((_QWORD *)v390 + 32) = v406;
          if (v406)
          {
            v407 = (unint64_t *)&v406->__shared_owners_;
            do
              v408 = __ldxr(v407);
            while (__stxr(v408 + 1, v407));
          }
          *((_QWORD *)v390 + 33) = 0;
          *((_QWORD *)v390 + 34) = 0;
          *((_QWORD *)v390 + 35) = 0;
          v409 = (void (__cdecl **)(std::__shared_weak_count *__hidden))v817;
          v410 = v818;
          v411 = (char *)v818 - (_BYTE *)v817;
          if (v818 != v817)
          {
            if (v411 < 0)
              abort();
            v412 = (std::__shared_weak_count_vtbl *)operator new((char *)v818 - (_BYTE *)v817);
            v391[11].__vftable = v412;
            v391[11].__shared_owners_ = (uint64_t)v412;
            v391[11].__shared_weak_owners_ = (uint64_t)v412 + 16 * (v411 >> 4);
            do
            {
              v412->~__shared_weak_count = *v409;
              v413 = v409[1];
              v412->~__shared_weak_count_0 = v413;
              if (v413)
              {
                v414 = (unint64_t *)((char *)v413 + 8);
                do
                  v415 = __ldxr(v414);
                while (__stxr(v415 + 1, v414));
              }
              v409 += 2;
              v412 = (std::__shared_weak_count_vtbl *)((char *)v412 + 16);
            }
            while (v409 != v410);
            v391[11].__shared_owners_ = (uint64_t)v412;
          }
          v416 = v820;
          v391[12].std::__shared_count = v819;
          *(_OWORD *)&v391[12].__shared_weak_owners_ = v416;
          *(_OWORD *)&v391[13].__shared_owners_ = v821;
          v417 = operator new(0x48uLL);
          v417[2] = v393;
          v417[3] = v391;
          v363 = v693;
          v337 = *((_QWORD *)&v372 + 1);
          do
            v418 = __ldxr(v392);
          while (__stxr(v418 + 1, v392));
          *((_OWORD *)v417 + 2) = v372;
          if (*((_QWORD *)&v372 + 1))
          {
            v419 = (unint64_t *)(*((_QWORD *)&v372 + 1) + 8);
            do
              v420 = __ldxr(v419);
            while (__stxr(v420 + 1, v419));
          }
          v417[6] = v405;
          v417[7] = v690;
          if (v690)
          {
            v421 = (unint64_t *)&v690->__shared_owners_;
            do
              v422 = __ldxr(v421);
            while (__stxr(v422 + 1, v421));
          }
          *((_BYTE *)v417 + 64) = v404;
          v423 = v727;
          *v417 = v727;
          v417[1] = &v727;
          v423[1] = v417;
          v727 = v417;
          ++v729;
          *(_QWORD *)&v803._type = &off_1E4296560;
          v424 = (void (__cdecl **)(std::__shared_weak_count *__hidden))v817;
          if (v817)
          {
            v425 = v818;
            v426 = v817;
            if (v818 != v817)
            {
              do
              {
                v427 = (std::__shared_weak_count *)*(v425 - 1);
                if (v427)
                {
                  v428 = (unint64_t *)&v427->__shared_owners_;
                  do
                    v429 = __ldaxr(v428);
                  while (__stlxr(v429 - 1, v428));
                  if (!v429)
                  {
                    ((void (*)(std::__shared_weak_count *))v427->__on_zero_shared)(v427);
                    std::__shared_weak_count::__release_weak(v427);
                  }
                }
                v425 -= 2;
              }
              while (v425 != v424);
              v426 = v817;
            }
            v818 = v424;
            operator delete(v426);
            v363 = v693;
          }
          v430 = v816;
          if (v816)
          {
            v431 = (unint64_t *)&v816->__shared_owners_;
            do
              v432 = __ldaxr(v431);
            while (__stlxr(v432 - 1, v431));
            if (!v432)
            {
              ((void (*)(std::__shared_weak_count *))v430->__on_zero_shared)(v430);
              std::__shared_weak_count::__release_weak(v430);
            }
          }
          *(_QWORD *)&v803._type = &off_1E428F838;
          if (!v810)
            goto LABEL_842;
          v433 = v808;
          if (!v808)
            goto LABEL_842;
          v434 = (unint64_t *)&v808->__shared_owners_;
          do
            v435 = __ldaxr(v434);
          while (__stlxr(v435 - 1, v434));
          if (!v435)
          {
            ((void (*)(std::__shared_weak_count *))v433->__on_zero_shared)(v433);
            std::__shared_weak_count::__release_weak(v433);
            v436 = *(std::__shared_weak_count **)&v804[16];
            if (!*(_QWORD *)&v804[16])
              goto LABEL_847;
          }
          else
          {
LABEL_842:
            v436 = *(std::__shared_weak_count **)&v804[16];
            if (!*(_QWORD *)&v804[16])
              goto LABEL_847;
          }
          v437 = (unint64_t *)&v436->__shared_owners_;
          do
            v438 = __ldaxr(v437);
          while (__stlxr(v438 - 1, v437));
          if (!v438)
          {
            ((void (*)(std::__shared_weak_count *))v436->__on_zero_shared)(v436);
            std::__shared_weak_count::__release_weak(v436);
          }
          if (!v690)
            goto LABEL_851;
LABEL_847:
          v439 = (unint64_t *)&v690->__shared_owners_;
          do
            v440 = __ldaxr(v439);
          while (__stlxr(v440 - 1, v439));
          if (!v440)
          {
            ((void (*)(std::__shared_weak_count *))v690->__on_zero_shared)(v690);
            std::__shared_weak_count::__release_weak(v690);
            if (*((_QWORD *)&v372 + 1))
            {
LABEL_852:
              v441 = (unint64_t *)(*((_QWORD *)&v372 + 1) + 8);
              do
                v442 = __ldaxr(v441);
              while (__stlxr(v442 - 1, v441));
              if (!v442)
              {
                (*(void (**)(_QWORD))(**((_QWORD **)&v372 + 1) + 16))(*((_QWORD *)&v372 + 1));
                std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v372 + 1));
              }
              goto LABEL_857;
            }
          }
          else
          {
LABEL_851:
            if (*((_QWORD *)&v372 + 1))
              goto LABEL_852;
          }
          do
LABEL_857:
            v443 = __ldaxr(v392);
          while (__stlxr(v443 - 1, v392));
          if (!v443)
          {
            ((void (*)(std::__shared_weak_count *))v391->__on_zero_shared)(v391);
            std::__shared_weak_count::__release_weak(v391);
          }
          v367 += 19;
          p_xIdx = (QuadTile *)&v685->_xIdx;
        }
        while (&v685->_xIdx != (int *)v680);
      }
      *(_WORD *)v830 = *(_WORD *)v795;
      *(_QWORD *)&v830[4] = v796;
      *(_OWORD *)&v830[24] = v797;
      v831 = v798;
      v832 = v799;
      v833 = v800;
      v62 = (unint64_t)&v834;
      std::list<md::FlyoverDynamicGeometry>::list(&v834, (uint64_t)&v727);
      *(_WORD *)&v803._type = *(_WORD *)v830;
      *(_QWORD *)&v803._yIdx = *(_QWORD *)&v830[4];
      *(_OWORD *)v804 = *(_OWORD *)&v830[24];
      *(_WORD *)&v804[16] = v831;
      *(_QWORD *)&v804[20] = v832;
      *(_OWORD *)&v804[40] = v833;
      std::list<md::FlyoverDynamicGeometry>::list((uint64_t *)&v804[56], (uint64_t)&v834);
      *(_QWORD *)&v805[8] = 0;
      v445 = std::__hash_table<std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__list_iterator<geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::CacheEntry,void *>>,std::__unordered_map_hasher<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__list_iterator<geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::CacheEntry,void *>>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>,true>,std::__unordered_map_equal<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__list_iterator<geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::CacheEntry,void *>>,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>,md::FlyoverOctilePairHash,true>,std::allocator<std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__list_iterator<geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::CacheEntry,void *>>>>::find<std::pair<md::FlyoverOctile,md::FlyoverOctile>>(v363, &v803._type);
      if (v445)
      {
        v446 = v445;
        v447 = (char *)*((_QWORD *)v445 + 12);
        v448 = (char *)operator new(0x80uLL);
        *(_QWORD *)v448 = 0;
        *((_QWORD *)v448 + 1) = 0;
        *((_WORD *)v448 + 8) = *(_WORD *)&v803._type;
        *(_QWORD *)(v448 + 20) = *(_QWORD *)&v803._yIdx;
        *(_OWORD *)(v448 + 40) = *(_OWORD *)v804;
        *((_WORD *)v448 + 28) = *(_WORD *)&v804[16];
        *(_QWORD *)(v448 + 60) = *(_QWORD *)&v804[20];
        *((_OWORD *)v448 + 5) = *(_OWORD *)&v804[40];
        std::list<md::FlyoverDynamicGeometry>::list((uint64_t *)v448 + 12, (uint64_t)&v804[56]);
        v449 = *(_QWORD *)&v805[8];
        *((_QWORD *)v448 + 15) = *(_QWORD *)&v805[8];
        v450 = *(_QWORD *)(a1 + 224);
        *(_QWORD *)(v450 + 8) = v448;
        *(_QWORD *)(a1 + 224) = v448;
        *(_QWORD *)v448 = v450;
        *((_QWORD *)v448 + 1) = v674;
        v451 = *(_QWORD *)(a1 + 240);
        *(_QWORD *)(a1 + 240) = v451 + 1;
        v452 = *(char **)(a1 + 288);
        if (v452 == v447)
        {
          v453 = (char *)*((_QWORD *)v447 + 1);
          goto LABEL_898;
        }
        v453 = v448;
        if (v452 == v674)
LABEL_898:
          *(_QWORD *)(a1 + 288) = v453;
        v481 = *((_QWORD *)v447 + 15);
        v482 = *(_QWORD *)(a1 + 296);
        v329 = v482 >= v481;
        v483 = v482 - v481;
        if (!v329)
          v483 = 0;
        *(_QWORD *)(a1 + 296) = v483 + v449;
        v484 = *(_QWORD *)v447;
        *(_QWORD *)(v484 + 8) = *((_QWORD *)v447 + 1);
        **((_QWORD **)v447 + 1) = v484;
        *(_QWORD *)(a1 + 240) = v451;
        if (*((_QWORD *)v447 + 14))
        {
          v486 = *((_QWORD *)v447 + 12);
          v485 = (uint64_t *)*((_QWORD *)v447 + 13);
          v487 = *v485;
          *(_QWORD *)(v487 + 8) = *(_QWORD *)(v486 + 8);
          **(_QWORD **)(v486 + 8) = v487;
          *((_QWORD *)v447 + 14) = 0;
          if (v485 != (uint64_t *)(v447 + 96))
          {
            do
            {
              v488 = (char *)v485[1];
              std::__list_imp<md::FlyoverDynamicGeometry>::__delete_node[abi:nn180100]<>(v485);
              v485 = (uint64_t *)v488;
            }
            while (v488 != v447 + 96);
          }
        }
        operator delete(v447);
        *((_QWORD *)v446 + 12) = v448;
LABEL_1087:
        if (*(_QWORD *)v805)
        {
          v581 = *(_QWORD **)&v804[64];
          v582 = *(_QWORD *)&v804[56];
          v583 = **(_QWORD **)&v804[64];
          *(_QWORD *)(v583 + 8) = *(_QWORD *)(*(_QWORD *)&v804[56] + 8);
          **(_QWORD **)(v582 + 8) = v583;
          *(_QWORD *)v805 = 0;
          if (v581 != (_QWORD *)&v804[56])
          {
            do
            {
              v584 = (_BYTE *)v581[1];
              std::__list_imp<md::FlyoverDynamicGeometry>::__delete_node[abi:nn180100]<>(v581);
              v581 = v584;
            }
            while (v584 != &v804[56]);
          }
        }
        v276 = v699;
        v278 = (std::__shared_weak_count *)v677;
        if (v836)
        {
          v585 = (uint64_t *)v835;
          v586 = v834;
          v587 = *(_QWORD *)v835;
          *(_QWORD *)(v587 + 8) = *(_QWORD *)(v834 + 8);
          **(_QWORD **)(v586 + 8) = v587;
          v836 = 0;
          if (v585 != &v834)
          {
            do
            {
              v588 = (uint64_t *)v585[1];
              std::__list_imp<md::FlyoverDynamicGeometry>::__delete_node[abi:nn180100]<>(v585);
              v585 = v588;
            }
            while (v588 != &v834);
          }
        }
        if (v729)
        {
          v589 = v728;
          v590 = v727;
          v591 = *(_QWORD *)v728;
          *(_QWORD *)(v591 + 8) = v727[1];
          *(_QWORD *)v590[1] = v591;
          v729 = 0;
          if (v589 != &v727)
          {
            do
            {
              v592 = (_QWORD *)v589[1];
              std::__list_imp<md::FlyoverDynamicGeometry>::__delete_node[abi:nn180100]<>(v589);
              v589 = v592;
            }
            while (v592 != &v727);
          }
        }
        v593 = (char *)v730;
        if (v730)
        {
          v594 = v731;
          if (v731 != v730)
          {
            do
            {
              v595 = (std::__shared_weak_count *)*((_QWORD *)v594 - 1);
              if (v595)
              {
                v596 = (unint64_t *)&v595->__shared_owners_;
                do
                  v597 = __ldaxr(v596);
                while (__stlxr(v597 - 1, v596));
                if (!v597)
                {
                  ((void (*)(std::__shared_weak_count *))v595->__on_zero_shared)(v595);
                  std::__shared_weak_count::__release_weak(v595);
                }
              }
              v594 -= 16;
            }
            while (v594 != v593);
            v593 = (char *)v730;
          }
          operator delete(v593);
        }
        v755 = &off_1E428F838;
        if (v772)
        {
          v598 = v771;
          if (v771)
          {
            v599 = (unint64_t *)&v771->__shared_owners_;
            do
              v600 = __ldaxr(v599);
            while (__stlxr(v600 - 1, v599));
            if (!v600)
            {
              ((void (*)(std::__shared_weak_count *))v598->__on_zero_shared)(v598);
              std::__shared_weak_count::__release_weak(v598);
            }
          }
        }
        v601 = (std::__shared_weak_count *)*((_QWORD *)&v758 + 1);
        if (*((_QWORD *)&v758 + 1))
        {
          v602 = (unint64_t *)(*((_QWORD *)&v758 + 1) + 8);
          do
            v603 = __ldaxr(v602);
          while (__stlxr(v603 - 1, v602));
          if (!v603)
          {
            ((void (*)(std::__shared_weak_count *))v601->__on_zero_shared)(v601);
            std::__shared_weak_count::__release_weak(v601);
          }
        }
        v604 = v783;
        if (v783)
        {
          v605 = (unint64_t *)&v783->__shared_owners_;
          do
            v606 = __ldaxr(v605);
          while (__stlxr(v606 - 1, v605));
          if (!v606)
          {
            ((void (*)(std::__shared_weak_count *))v604->__on_zero_shared)(v604);
            std::__shared_weak_count::__release_weak(v604);
          }
        }
        v607 = v782;
        if (v782)
        {
          v608 = (unint64_t *)&v782->__shared_owners_;
          do
            v609 = __ldaxr(v608);
          while (__stlxr(v609 - 1, v608));
          if (!v609)
          {
            ((void (*)(std::__shared_weak_count *))v607->__on_zero_shared)(v607);
            std::__shared_weak_count::__release_weak(v607);
          }
        }
        v610 = v781;
        if (v781)
        {
          v611 = (unint64_t *)&v781->__shared_owners_;
          do
            v612 = __ldaxr(v611);
          while (__stlxr(v612 - 1, v611));
          if (!v612)
          {
            ((void (*)(std::__shared_weak_count *))v610->__on_zero_shared)(v610);
            std::__shared_weak_count::__release_weak(v610);
          }
        }
        v613 = v786;
        if (v786)
        {
          v614 = (unint64_t *)&v786->__shared_owners_;
          do
            v615 = __ldaxr(v614);
          while (__stlxr(v615 - 1, v614));
          if (!v615)
          {
            ((void (*)(std::__shared_weak_count *))v613->__on_zero_shared)(v613);
            std::__shared_weak_count::__release_weak(v613);
          }
        }
        v616 = (std::__shared_weak_count *)*((_QWORD *)&v784 + 1);
        if (*((_QWORD *)&v784 + 1))
        {
          v617 = (unint64_t *)(*((_QWORD *)&v784 + 1) + 8);
          do
            v618 = __ldaxr(v617);
          while (__stlxr(v618 - 1, v617));
          if (!v618)
          {
            ((void (*)(std::__shared_weak_count *))v616->__on_zero_shared)(v616);
            std::__shared_weak_count::__release_weak(v616);
          }
        }
        goto LABEL_1196;
      }
      v463 = (char *)operator new(0x80uLL);
      *(_QWORD *)v463 = 0;
      *((_QWORD *)v463 + 1) = 0;
      *((_WORD *)v463 + 8) = *(_WORD *)&v803._type;
      *(_QWORD *)(v463 + 20) = *(_QWORD *)&v803._yIdx;
      *(_OWORD *)(v463 + 40) = *(_OWORD *)v804;
      *((_WORD *)v463 + 28) = *(_WORD *)&v804[16];
      *(_QWORD *)(v463 + 60) = *(_QWORD *)&v804[20];
      *((_OWORD *)v463 + 5) = *(_OWORD *)&v804[40];
      std::list<md::FlyoverDynamicGeometry>::list((uint64_t *)v463 + 12, (uint64_t)&v804[56]);
      v464 = *(_QWORD *)&v805[8];
      *((_QWORD *)v463 + 15) = *(_QWORD *)&v805[8];
      v465 = *(_QWORD *)(a1 + 224);
      *(_QWORD *)(v465 + 8) = v463;
      ++*(_QWORD *)(a1 + 240);
      v466 = *(char **)(a1 + 288);
      v467 = *(_QWORD *)(a1 + 296) + v464;
      *(_QWORD *)(a1 + 224) = v463;
      *(_QWORD *)v463 = v465;
      *((_QWORD *)v463 + 1) = v674;
      *(_QWORD *)(a1 + 296) = v467;
      if (v466 == v674)
        *(_QWORD *)(a1 + 288) = v463;
      v62 = v803._type;
      level = v803._level;
      v469 = (v803._level
            - 0x61C8864680B583EBLL
            + ((v803._type - 0x61C8864680B583EBLL) << 6)
            + (((unint64_t)v803._type - 0x61C8864680B583EBLL) >> 2)) ^ (v803._type - 0x61C8864680B583EBLL);
      v470 = (v803._yIdx - 0x61C8864680B583EBLL + (v469 << 6) + (v469 >> 2)) ^ v469;
      if ((*(_QWORD *)&v804[4] & 0xFF00000000) != 0)
        v471 = 2 * *(unsigned int *)&v804[4];
      else
        v471 = 0;
      v472 = (v471 | ((unint64_t)*(unsigned int *)&v804[12] << 33)) ^ v470 ^ (v803._xIdx
                                                                                   - 0x61C8864680B583EBLL
                                                                                   + (v470 << 6)
                                                                                   + (v470 >> 2));
      v473 = v804[16];
      v474 = v804[17];
      v475 = (v804[17]
            - 0x61C8864680B583EBLL
            + ((v804[16] - 0x61C8864680B583EBLL) << 6)
            + (((unint64_t)v804[16] - 0x61C8864680B583EBLL) >> 2)) ^ (v804[16] - 0x61C8864680B583EBLL);
      v476 = (*(int *)&v804[20] - 0x61C8864680B583EBLL + (v475 << 6) + (v475 >> 2)) ^ v475;
      if ((*(_QWORD *)&v804[44] & 0xFF00000000) != 0)
        v477 = 2 * *(unsigned int *)&v804[44];
      else
        v477 = 0;
      v478 = ((v472 << 6)
            - 0x61C8864680B583EBLL
            + (v472 >> 2)
            + ((v477 | ((unint64_t)*(unsigned int *)&v804[52] << 33)) ^ v476 ^ (*(int *)&v804[24]
                                                                                     - 0x61C8864680B583EBLL
                                                                                     + (v476 << 6)
                                                                                     + (v476 >> 2)))) ^ v472;
      v479 = *(_QWORD *)(a1 + 256);
      if (v479)
      {
        v480 = (uint8x8_t)vcnt_s8((int8x8_t)v479);
        v480.i16[0] = vaddlv_u8(v480);
        if (v480.u32[0] > 1uLL)
        {
          v337 = ((v472 << 6)
                - 0x61C8864680B583EBLL
                + (v472 >> 2)
                + ((v477 | ((unint64_t)*(unsigned int *)&v804[52] << 33)) ^ v476 ^ (*(int *)&v804[24]
                                                                                         - 0x61C8864680B583EBLL
                                                                                         + (v476 << 6)
                                                                                         + (v476 >> 2)))) ^ v472;
          if (v478 >= v479)
            v337 = v478 % v479;
        }
        else
        {
          v337 = v478 & (v479 - 1);
        }
        v506 = *(unsigned __int8 ***)(*v363 + 8 * v337);
        if (v506)
        {
          v507 = *v506;
          if (*v506)
          {
            if (v480.u32[0] < 2uLL)
            {
              while (1)
              {
                v509 = *((_QWORD *)v507 + 1);
                if (v509 == v478)
                {
                  if (std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>::operator()[abi:nn180100](v507 + 16, &v803._type))
                  {
                    goto LABEL_1087;
                  }
                }
                else if ((v509 & (v479 - 1)) != v337)
                {
                  goto LABEL_957;
                }
                v507 = *(unsigned __int8 **)v507;
                if (!v507)
                  goto LABEL_957;
              }
            }
            do
            {
              v508 = *((_QWORD *)v507 + 1);
              if (v508 == v478)
              {
                if (std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>::operator()[abi:nn180100](v507 + 16, &v803._type))
                {
                  goto LABEL_1087;
                }
              }
              else
              {
                if (v508 >= v479)
                  v508 %= v479;
                if (v508 != v337)
                  break;
              }
              v507 = *(unsigned __int8 **)v507;
            }
            while (v507);
          }
        }
      }
LABEL_957:
      v510 = (char *)operator new(0x68uLL);
      *(_QWORD *)v510 = 0;
      *((_QWORD *)v510 + 1) = v478;
      v510[16] = v62;
      v510[17] = level;
      *(_QWORD *)(v510 + 20) = *(_QWORD *)&v803._yIdx;
      *(_OWORD *)(v510 + 40) = *(_OWORD *)v804;
      v510[56] = v473;
      v510[57] = v474;
      *(_QWORD *)(v510 + 60) = *(_QWORD *)&v804[20];
      *((_OWORD *)v510 + 5) = *(_OWORD *)&v804[40];
      *((_QWORD *)v510 + 12) = v463;
      v511 = (float)(unint64_t)(*(_QWORD *)(a1 + 272) + 1);
      v512 = *(float *)(a1 + 280);
      if (!v479 || (float)(v512 * (float)v479) < v511)
      {
        v513 = (v479 & (v479 - 1)) != 0;
        if (v479 < 3)
          v513 = 1;
        v514 = v513 | (2 * v479);
        v515 = vcvtps_u32_f32(v511 / v512);
        if (v514 <= v515)
          v516 = v515;
        else
          v516 = v514;
        if (v516 == 1)
        {
          v516 = 2;
        }
        else if ((v516 & (v516 - 1)) != 0)
        {
          v516 = std::__next_prime(v516);
          v479 = *(_QWORD *)(a1 + 256);
        }
        if (v516 > v479)
        {
LABEL_969:
          if (!(v516 >> 61))
          {
            v517 = operator new(8 * v516);
            v518 = (void *)*v693;
            *v693 = v517;
            if (v518)
              operator delete(v518);
            v519 = 0;
            *(_QWORD *)(a1 + 256) = v516;
            do
              *(_QWORD *)(*v693 + 8 * v519++) = 0;
            while (v516 != v519);
            v520 = (_QWORD *)*v650;
            if (!*v650)
              goto LABEL_1063;
            v521 = v520[1];
            v522 = v516 - 1;
            if ((v516 & (v516 - 1)) == 0)
            {
              v523 = v521 & v522;
              *(_QWORD *)(*v693 + 8 * v523) = v650;
              for (k = (_QWORD *)*v520; *v520; k = (_QWORD *)*v520)
              {
                v525 = k[1] & v522;
                if (v525 == v523)
                {
                  v520 = k;
                }
                else if (*(_QWORD *)(*v693 + 8 * v525))
                {
                  *v520 = *k;
                  v526 = 8 * v525;
                  *k = **(_QWORD **)(*v693 + v526);
                  **(_QWORD **)(*v693 + v526) = k;
                }
                else
                {
                  *(_QWORD *)(*v693 + 8 * v525) = v520;
                  v520 = k;
                  v523 = v525;
                }
              }
              goto LABEL_1063;
            }
            if (v521 >= v516)
              v521 %= v516;
            *(_QWORD *)(*v693 + 8 * v521) = v650;
            v575 = (_QWORD *)*v520;
            if (!*v520)
            {
LABEL_1063:
              v479 = v516;
              goto LABEL_1064;
            }
            while (2)
            {
              v577 = v575[1];
              if (v577 >= v516)
                v577 %= v516;
              if (v577 != v521)
              {
                if (!*(_QWORD *)(*v693 + 8 * v577))
                {
                  *(_QWORD *)(*v693 + 8 * v577) = v520;
LABEL_1068:
                  v520 = v575;
                  v575 = (_QWORD *)*v575;
                  v521 = v577;
                  if (!v575)
                    goto LABEL_1063;
                  continue;
                }
                *v520 = *v575;
                v576 = 8 * v577;
                *v575 = **(_QWORD **)(*v693 + v576);
                **(_QWORD **)(*v693 + v576) = v575;
                v575 = v520;
              }
              break;
            }
            v577 = v521;
            goto LABEL_1068;
          }
LABEL_1241:
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        if (v516 < v479)
        {
          v527 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 272) / *(float *)(a1 + 280));
          if (v479 < 3
            || (v528 = (uint8x8_t)vcnt_s8((int8x8_t)v479), v528.i16[0] = vaddlv_u8(v528), v528.u32[0] > 1uLL))
          {
            v527 = std::__next_prime(v527);
          }
          else
          {
            v529 = 1 << -(char)__clz(v527 - 1);
            if (v527 >= 2)
              v527 = v529;
          }
          if (v516 <= v527)
            v516 = v527;
          if (v516 >= v479)
          {
            v479 = *(_QWORD *)(a1 + 256);
          }
          else
          {
            if (v516)
              goto LABEL_969;
            v619 = (void *)*v693;
            *v693 = 0;
            if (v619)
              operator delete(v619);
            v479 = 0;
            *(_QWORD *)(a1 + 256) = 0;
          }
        }
LABEL_1064:
        if ((v479 & (v479 - 1)) != 0)
        {
          if (v478 >= v479)
            v337 = v478 % v479;
          else
            v337 = v478;
        }
        else
        {
          v337 = (v479 - 1) & v478;
        }
      }
      v578 = *v693;
      v579 = *(_QWORD **)(*v693 + 8 * v337);
      if (v579)
      {
        *(_QWORD *)v510 = *v579;
        goto LABEL_1085;
      }
      *(_QWORD *)v510 = *v650;
      *v650 = v510;
      *(_QWORD *)(v578 + 8 * v337) = v650;
      if (*(_QWORD *)v510)
      {
        v580 = *(_QWORD *)(*(_QWORD *)v510 + 8);
        if ((v479 & (v479 - 1)) != 0)
        {
          if (v580 >= v479)
            v580 %= v479;
        }
        else
        {
          v580 &= v479 - 1;
        }
        v579 = (_QWORD *)(*v693 + 8 * v580);
LABEL_1085:
        *v579 = v510;
      }
      ++*(_QWORD *)(a1 + 272);
      goto LABEL_1087;
    }
    v458 = md::FlyoverCompleteTileDataLogic::DrapingTaskHash::operator()((uint64_t)v837);
    v459 = *(int8x8_t *)(a1 + 560);
    v62 = (unint64_t)v795;
    v706 = v332;
    if (v459)
    {
      v460 = v458;
      v461 = (uint8x8_t)vcnt_s8(v459);
      v461.i16[0] = vaddlv_u8(v461);
      if (v461.u32[0] > 1uLL)
      {
        v462 = v458;
        if (v458 >= *(_QWORD *)&v459)
          v462 = v458 % *(_QWORD *)&v459;
      }
      else
      {
        v462 = (*(_QWORD *)&v459 - 1) & v458;
      }
      v490 = *(_QWORD **)(*(_QWORD *)(a1 + 552) + 8 * v462);
      if (v490)
      {
        v489 = (_QWORD *)*v490;
        if (*v490)
        {
          if (v461.u32[0] < 2uLL)
          {
            v491 = *(_QWORD *)&v459 - 1;
            while (1)
            {
              v493 = v489[1];
              if (v493 == v460)
              {
                if (md::FlyoverCompleteTileDataLogic::DrapingTask::operator==((uint64_t)(v489 + 2), (uint64_t)v837))
                  goto LABEL_924;
              }
              else if ((v493 & v491) != v462)
              {
                goto LABEL_923;
              }
              v489 = (_QWORD *)*v489;
              if (!v489)
                goto LABEL_924;
            }
          }
          do
          {
            v492 = v489[1];
            if (v492 == v460)
            {
              if (md::FlyoverCompleteTileDataLogic::DrapingTask::operator==((uint64_t)(v489 + 2), (uint64_t)v837))
                break;
            }
            else
            {
              if (v492 >= *(_QWORD *)&v459)
                v492 %= *(_QWORD *)&v459;
              if (v492 != v462)
                goto LABEL_923;
            }
            v489 = (_QWORD *)*v489;
          }
          while (v489);
        }
      }
      else
      {
LABEL_923:
        v489 = 0;
      }
LABEL_924:
      v62 = (unint64_t)v795;
    }
    else
    {
      v489 = 0;
    }
    v494 = std::__hash_table<std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,md::FlyoverCompleteTileDataLogic::MeshStorage>,std::__unordered_map_hasher<md::FlyoverCompleteTileDataLogic::DrapingTask,std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,md::FlyoverCompleteTileDataLogic::MeshStorage>,md::FlyoverCompleteTileDataLogic::DrapingTaskHash,std::equal_to<md::FlyoverCompleteTileDataLogic::DrapingTask>,true>,std::__unordered_map_equal<md::FlyoverCompleteTileDataLogic::DrapingTask,std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,md::FlyoverCompleteTileDataLogic::MeshStorage>,std::equal_to<md::FlyoverCompleteTileDataLogic::DrapingTask>,md::FlyoverCompleteTileDataLogic::DrapingTaskHash,true>,std::allocator<std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,md::FlyoverCompleteTileDataLogic::MeshStorage>>>::find<md::FlyoverCompleteTileDataLogic::DrapingTask>(v666, (uint64_t)v837);
    if (v489 || v494)
      goto LABEL_1195;
    *(_QWORD *)&v803._type = a1;
    *(_QWORD *)&v803._xIdx = v706;
    v803._hash = (unint64_t)hash;
    if (hash)
    {
      v495 = (unint64_t *)&hash->__shared_owners_;
      do
        v496 = __ldxr(v495);
      while (__stxr(v496 + 1, v495));
    }
    *(_QWORD *)v804 = v328;
    v804[8] = v337;
    v804[9] = v336;
    *(_QWORD *)&v804[12] = v338;
    *(_OWORD *)&v804[32] = v841;
    v804[48] = v341;
    v804[49] = v339;
    *(_QWORD *)&v804[52] = v342;
    *(_OWORD *)v805 = v844;
    v497 = *(_QWORD *)(*(_QWORD *)(a1 + 176) + 128);
    if (!v497)
      goto LABEL_1190;
    v755 = (void (**)(md::MeshRenderable *__hidden))a1;
    v756 = v706;
    *(_QWORD *)&v757 = hash;
    if (hash)
    {
      v498 = (unint64_t *)&hash->__shared_owners_;
      do
        v499 = __ldxr(v498);
      while (__stxr(v499 + 1, v498));
    }
    *((_QWORD *)&v757 + 1) = v328;
    LOBYTE(v758) = v337;
    BYTE1(v758) = v336;
    *(_QWORD *)((char *)&v758 + 4) = v338;
    v760 = *(_OWORD *)&v804[32];
    v761 = v341;
    v762 = v339;
    *(_QWORD *)&v763 = v342;
    *(_OWORD *)&v764[4] = *(_OWORD *)v805;
    *(_QWORD *)&v830[24] = 0;
    v500 = (char *)operator new(0x78uLL);
    *(_QWORD *)v500 = &off_1E427AF50;
    *((_QWORD *)v500 + 1) = a1;
    *((_QWORD *)v500 + 2) = v706;
    *((_QWORD *)v500 + 3) = hash;
    if (hash)
    {
      v501 = (unint64_t *)&hash->__shared_owners_;
      do
        v502 = __ldxr(v501);
      while (__stxr(v502 + 1, v501));
    }
    *((_QWORD *)v500 + 4) = v328;
    v500[40] = v337;
    v500[41] = v336;
    *(_QWORD *)(v500 + 44) = v338;
    *((_OWORD *)v500 + 4) = v760;
    v500[80] = v341;
    v500[81] = v339;
    *(_QWORD *)(v500 + 84) = v342;
    *(_OWORD *)(v500 + 104) = *(_OWORD *)&v764[4];
    *(_QWORD *)&v830[24] = v500;
    geo::TaskQueue::async((std::__shared_weak_count_vtbl **)&v784, v497, v830);
    v503 = *(_QWORD **)&v830[24];
    v504 = (unint64_t)v830;
    if (*(_BYTE **)&v830[24] == v830)
    {
      v503 = v830;
      v505 = 4;
LABEL_991:
      (*(void (**)(void))(*v503 + 8 * v505))();
    }
    else if (*(_QWORD *)&v830[24])
    {
      v505 = 5;
      goto LABEL_991;
    }
    if (hash)
    {
      v530 = (unint64_t *)&hash->__shared_owners_;
      do
        v531 = __ldaxr(v530);
      while (__stlxr(v531 - 1, v530));
      if (!v531)
      {
        ((void (*)(std::__shared_weak_count *))hash->__on_zero_shared)(hash);
        std::__shared_weak_count::__release_weak(hash);
      }
    }
    v533 = *(_QWORD *)v837;
    v532 = *(_QWORD *)&v837[8];
    *(_QWORD *)v741 = *(_QWORD *)v837;
    *(_QWORD *)&v741[8] = *(_QWORD *)&v837[8];
    if (*(_QWORD *)&v837[8])
    {
      v534 = (unint64_t *)(*(_QWORD *)&v837[8] + 8);
      do
        v535 = __ldxr(v534);
      while (__stxr(v535 + 1, v534));
    }
    v536 = *(_QWORD *)&v837[16];
    *(_QWORD *)&v741[16] = *(_QWORD *)&v837[16];
    v691 = v838;
    v741[24] = v838;
    v707 = v839;
    v741[25] = v839;
    v537 = v840;
    *(_QWORD *)&v741[28] = v840;
    *(_OWORD *)&v744[4] = v841;
    v538 = HIBYTE(v842);
    v539 = v842;
    LOWORD(v745) = v842;
    v540 = v843;
    *(_QWORD *)((char *)&v745 + 4) = v843;
    v747 = v844;
    v541 = (std::__shared_weak_count *)*((_QWORD *)&v784 + 1);
    v748 = v784;
    if (*((_QWORD *)&v784 + 1))
    {
      v542 = (unint64_t *)(*((_QWORD *)&v784 + 1) + 8);
      do
        v543 = __ldxr(v542);
      while (__stxr(v543 + 1, v542));
    }
    v544 = md::FlyoverCompleteTileDataLogic::DrapingTaskHash::operator()((uint64_t)v741);
    v62 = v544;
    v545 = *(_QWORD *)(a1 + 560);
    if (!v545)
      goto LABEL_1024;
    v546 = (uint8x8_t)vcnt_s8((int8x8_t)v545);
    v546.i16[0] = vaddlv_u8(v546);
    if (v546.u32[0] > 1uLL)
    {
      v504 = v544;
      if (v544 >= v545)
        v504 = v544 % v545;
    }
    else
    {
      v504 = (v545 - 1) & v544;
    }
    v547 = *(_QWORD **)(*(_QWORD *)(a1 + 552) + 8 * v504);
    if (!v547)
      goto LABEL_1024;
    v686 = v536;
    v548 = (_QWORD *)*v547;
    if (!*v547)
    {
LABEL_1023:
      v536 = v686;
LABEL_1024:
      v551 = (char *)operator new(0x88uLL);
      v552 = v551;
      v733.i64[0] = (uint64_t)v551;
      v733.i64[1] = (uint64_t)v651;
      *(_QWORD *)v551 = 0;
      *((_QWORD *)v551 + 1) = v62;
      *((_QWORD *)v551 + 2) = v533;
      *((_QWORD *)v551 + 3) = v532;
      if (v532)
      {
        v553 = (unint64_t *)(v532 + 8);
        do
          v554 = __ldxr(v553);
        while (__stxr(v554 + 1, v553));
      }
      *((_QWORD *)v551 + 4) = v536;
      v551[40] = v691;
      v551[41] = v707;
      *(_QWORD *)(v551 + 44) = v537;
      *((_OWORD *)v551 + 4) = *(_OWORD *)&v744[4];
      v551[80] = v539;
      v551[81] = v538;
      *(_QWORD *)(v551 + 84) = v540;
      *(_OWORD *)(v551 + 104) = v747;
      *(_OWORD *)(v551 + 120) = v748;
      v748 = 0uLL;
      v734[0] = 1;
      v555 = (float)(unint64_t)(*(_QWORD *)(a1 + 576) + 1);
      v556 = *(float *)(a1 + 584);
      if (v545 && (float)(v556 * (float)v545) >= v555)
      {
LABEL_1169:
        v624 = *(_QWORD *)(a1 + 552);
        v625 = *(_QWORD **)(v624 + 8 * v504);
        if (v625)
        {
          *(_QWORD *)v552 = *v625;
        }
        else
        {
          *(_QWORD *)v552 = *v651;
          *v651 = v552;
          *(_QWORD *)(v624 + 8 * v504) = v651;
          if (!*(_QWORD *)v552)
          {
LABEL_1178:
            ++*(_QWORD *)(a1 + 576);
            goto LABEL_1179;
          }
          v626 = *(_QWORD *)(*(_QWORD *)v552 + 8);
          if ((v545 & (v545 - 1)) != 0)
          {
            if (v626 >= v545)
              v626 %= v545;
          }
          else
          {
            v626 &= v545 - 1;
          }
          v625 = (_QWORD *)(*(_QWORD *)(a1 + 552) + 8 * v626);
        }
        *v625 = v552;
        goto LABEL_1178;
      }
      v557 = (v545 & (v545 - 1)) != 0;
      if (v545 < 3)
        v557 = 1;
      v558 = v557 | (2 * v545);
      v559 = vcvtps_u32_f32(v555 / v556);
      if (v558 <= v559)
        v560 = v559;
      else
        v560 = v558;
      if (v560 == 1)
      {
        v560 = 2;
      }
      else if ((v560 & (v560 - 1)) != 0)
      {
        v560 = std::__next_prime(v560);
      }
      v545 = *(_QWORD *)(a1 + 560);
      if (v560 <= v545)
      {
        if (v560 >= v545)
          goto LABEL_1156;
        v572 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 576) / *(float *)(a1 + 584));
        if (v545 < 3 || (v573 = (uint8x8_t)vcnt_s8((int8x8_t)v545), v573.i16[0] = vaddlv_u8(v573), v573.u32[0] > 1uLL))
        {
          v572 = std::__next_prime(v572);
        }
        else
        {
          v574 = 1 << -(char)__clz(v572 - 1);
          if (v572 >= 2)
            v572 = v574;
        }
        if (v560 <= v572)
          v560 = v572;
        if (v560 >= v545)
        {
          v545 = *(_QWORD *)(a1 + 560);
LABEL_1156:
          if ((v545 & (v545 - 1)) != 0)
          {
            if (v62 >= v545)
              v504 = v62 % v545;
            else
              v504 = v62;
          }
          else
          {
            v504 = (v545 - 1) & v62;
          }
          goto LABEL_1169;
        }
        if (!v560)
        {
          v645 = *(void **)(a1 + 552);
          *(_QWORD *)(a1 + 552) = 0;
          if (v645)
            operator delete(v645);
          v545 = 0;
          *(_QWORD *)(a1 + 560) = 0;
          goto LABEL_1156;
        }
      }
      if (v560 >> 61)
        goto LABEL_1241;
      v561 = operator new(8 * v560);
      v562 = *(void **)(a1 + 552);
      *(_QWORD *)(a1 + 552) = v561;
      if (v562)
        operator delete(v562);
      v563 = 0;
      *(_QWORD *)(a1 + 560) = v560;
      do
        *(_QWORD *)(*(_QWORD *)(a1 + 552) + 8 * v563++) = 0;
      while (v560 != v563);
      v564 = (_QWORD *)*v651;
      if (!*v651)
      {
LABEL_1155:
        v545 = v560;
        goto LABEL_1156;
      }
      v565 = v564[1];
      v566 = v560 - 1;
      if ((v560 & (v560 - 1)) == 0)
      {
        v567 = v565 & v566;
        *(_QWORD *)(*(_QWORD *)(a1 + 552) + 8 * v567) = v651;
        for (m = (_QWORD *)*v564; *v564; m = (_QWORD *)*v564)
        {
          v569 = m[1] & v566;
          if (v569 == v567)
          {
            v564 = m;
          }
          else
          {
            v570 = *(_QWORD *)(a1 + 552);
            if (*(_QWORD *)(v570 + 8 * v569))
            {
              *v564 = *m;
              v571 = 8 * v569;
              *m = **(_QWORD **)(*(_QWORD *)(a1 + 552) + v571);
              **(_QWORD **)(*(_QWORD *)(a1 + 552) + v571) = m;
            }
            else
            {
              *(_QWORD *)(v570 + 8 * v569) = v564;
              v564 = m;
              v567 = v569;
            }
          }
        }
        goto LABEL_1155;
      }
      if (v565 >= v560)
        v565 %= v560;
      *(_QWORD *)(*(_QWORD *)(a1 + 552) + 8 * v565) = v651;
      v620 = (_QWORD *)*v564;
      if (!*v564)
        goto LABEL_1155;
      while (1)
      {
        v622 = v620[1];
        if (v622 >= v560)
          v622 %= v560;
        if (v622 != v565)
        {
          v623 = *(_QWORD *)(a1 + 552);
          if (!*(_QWORD *)(v623 + 8 * v622))
          {
            *(_QWORD *)(v623 + 8 * v622) = v564;
            goto LABEL_1160;
          }
          *v564 = *v620;
          v621 = 8 * v622;
          *v620 = **(_QWORD **)(*(_QWORD *)(a1 + 552) + v621);
          **(_QWORD **)(*(_QWORD *)(a1 + 552) + v621) = v620;
          v620 = v564;
        }
        v622 = v565;
LABEL_1160:
        v564 = v620;
        v620 = (_QWORD *)*v620;
        v565 = v622;
        if (!v620)
          goto LABEL_1155;
      }
    }
    if (v546.u32[0] < 2uLL)
    {
      while (1)
      {
        v550 = v548[1];
        if (v550 == v62)
        {
          if (md::FlyoverCompleteTileDataLogic::DrapingTask::operator==((uint64_t)(v548 + 2), (uint64_t)v741))
            goto LABEL_1217;
        }
        else if ((v550 & (v545 - 1)) != v504)
        {
          goto LABEL_1023;
        }
        v548 = (_QWORD *)*v548;
        if (!v548)
          goto LABEL_1023;
      }
    }
    while (1)
    {
      v549 = v548[1];
      if (v549 == v62)
        break;
      if (v549 >= v545)
        v549 %= v545;
      if (v549 != v504)
        goto LABEL_1023;
LABEL_1013:
      v548 = (_QWORD *)*v548;
      if (!v548)
        goto LABEL_1023;
    }
    if (!md::FlyoverCompleteTileDataLogic::DrapingTask::operator==((uint64_t)(v548 + 2), (uint64_t)v741))
      goto LABEL_1013;
LABEL_1217:
    if (v541)
    {
      v643 = (unint64_t *)&v541->__shared_owners_;
      do
        v644 = __ldaxr(v643);
      while (__stlxr(v644 - 1, v643));
      if (!v644)
      {
        ((void (*)(std::__shared_weak_count *))v541->__on_zero_shared)(v541);
        std::__shared_weak_count::__release_weak(v541);
      }
    }
LABEL_1179:
    v627 = *(std::__shared_weak_count **)&v741[8];
    if (*(_QWORD *)&v741[8])
    {
      v628 = (unint64_t *)(*(_QWORD *)&v741[8] + 8);
      do
        v629 = __ldaxr(v628);
      while (__stlxr(v629 - 1, v628));
      if (!v629)
      {
        ((void (*)(std::__shared_weak_count *))v627->__on_zero_shared)(v627);
        std::__shared_weak_count::__release_weak(v627);
      }
    }
    v630 = (std::__shared_weak_count *)*((_QWORD *)&v784 + 1);
    if (*((_QWORD *)&v784 + 1))
    {
      v631 = (unint64_t *)(*((_QWORD *)&v784 + 1) + 8);
      do
        v632 = __ldaxr(v631);
      while (__stlxr(v632 - 1, v631));
      if (!v632)
      {
        ((void (*)(std::__shared_weak_count *))v630->__on_zero_shared)(v630);
        std::__shared_weak_count::__release_weak(v630);
      }
    }
    hash = (std::__shared_weak_count *)v803._hash;
LABEL_1190:
    if (hash)
    {
      v633 = (unint64_t *)&hash->__shared_owners_;
      do
        v634 = __ldaxr(v633);
      while (__stlxr(v634 - 1, v633));
      if (!v634)
      {
        ((void (*)(std::__shared_weak_count *))hash->__on_zero_shared)(hash);
        std::__shared_weak_count::__release_weak(hash);
      }
    }
LABEL_1195:
    v276 = v699;
    v278 = (std::__shared_weak_count *)v677;
LABEL_1196:
    v635 = *(std::__shared_weak_count **)&v837[8];
    if (*(_QWORD *)&v837[8])
    {
      v636 = (unint64_t *)(*(_QWORD *)&v837[8] + 8);
      do
        v637 = __ldaxr(v636);
      while (__stlxr(v637 - 1, v636));
      if (!v637)
      {
        ((void (*)(std::__shared_weak_count *))v635->__on_zero_shared)(v635);
        std::__shared_weak_count::__release_weak(v635);
      }
    }
LABEL_1201:
    v638 = v790;
    if (v790)
    {
      v639 = (unint64_t *)&v790->__shared_owners_;
      do
        v640 = __ldaxr(v639);
      while (__stlxr(v640 - 1, v639));
      if (!v640)
      {
        ((void (*)(std::__shared_weak_count *))v638->__on_zero_shared)(v638);
        std::__shared_weak_count::__release_weak(v638);
        if (v278)
          goto LABEL_1206;
        goto LABEL_1209;
      }
    }
LABEL_1205:
    if (!v278)
      goto LABEL_1209;
LABEL_1206:
    v641 = (unint64_t *)&v278->__shared_owners_;
    do
      v642 = __ldaxr(v641);
    while (__stlxr(v642 - 1, v641));
    if (v642)
    {
LABEL_1209:
      if (v828)
        goto LABEL_1210;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v278->__on_zero_shared)(v278);
      std::__shared_weak_count::__release_weak(v278);
      if (v828)
LABEL_1210:
        v828 = 0;
    }
    if (*(_QWORD *)&v824[4] != v825)
      free(*(void **)&v824[4]);
    v213 = (uint64_t *)*v276;
    if (v213)
      continue;
    break;
  }
LABEL_1231:
  std::__hash_table<std::__hash_value_type<geo::QuadTile,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>>>>::~__hash_table((uint64_t)v711);
  if (v714)
    operator delete(v714);
  v646 = (_QWORD *)v725;
  if ((_QWORD)v725)
  {
    do
    {
      v648 = (_QWORD *)*v646;
      v649 = (void *)v646[8];
      if (v649 != (void *)v646[10])
        free(v649);
      operator delete(v646);
      v646 = v648;
    }
    while (v648);
  }
  v647 = (void *)__p;
  *(_QWORD *)&__p = 0;
  if (v647)
    operator delete(v647);
}

void sub_19FD26C48(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  void *v6;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,std::shared_ptr<geo::Task>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,std::shared_ptr<geo::Task>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)&STACK[0x2E0]);
  std::pair<md::FlyoverCompleteTileDataLogic::DrapingTask const,std::shared_ptr<geo::Task>>::~pair((uint64_t)&STACK[0x360]);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x640]);
  md::components::Material::~Material((md::components::Material *)&STACK[0x720]);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 - 240);
  md::components::Material::~Material((md::components::Material *)&STACK[0x680]);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x710]);
  if (LOBYTE(STACK[0x8C0]))
    LOBYTE(STACK[0x8C0]) = 0;
  if (STACK[0x870] != STACK[0x880])
    free((void *)STACK[0x870]);
  std::__hash_table<std::__hash_value_type<geo::QuadTile,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>>>>::~__hash_table((uint64_t)&STACK[0x200]);
  if (STACK[0x228])
    operator delete((void *)STACK[0x228]);
  v3 = (_QWORD *)STACK[0x290];
  if (STACK[0x290])
  {
    do
    {
      v5 = (_QWORD *)*v3;
      v6 = (void *)v3[8];
      if (v6 != (void *)v3[10])
        free(v6);
      operator delete(v3);
      v3 = v5;
    }
    while (v5);
  }
  v4 = (void *)STACK[0x280];
  STACK[0x280] = 0;
  if (v4)
    operator delete(v4);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::pair<md::FlyoverOctile,md::FlyoverOctile>,md::FlyoverCompleteTileDataLogic::FallbackInfo,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>,std::allocator<std::pair<std::pair<md::FlyoverOctile,md::FlyoverOctile> const,md::FlyoverCompleteTileDataLogic::FallbackInfo>>>::~unordered_map[abi:nn180100](uint64_t a1)
{
  _BYTE *v2;
  void *v3;
  _BYTE *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9;

  v2 = *(_BYTE **)(a1 + 16);
  if (v2)
  {
    while (1)
    {
      v5 = *(_BYTE **)v2;
      v6 = (std::__shared_weak_count *)*((_QWORD *)v2 + 30);
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
          break;
      }
      if (v2[192])
        goto LABEL_11;
LABEL_12:
      v9 = (void *)*((_QWORD *)v2 + 14);
      if (v9 != *((void **)v2 + 16))
        free(v9);
      operator delete(v2);
      v2 = v5;
      if (!v5)
        goto LABEL_2;
    }
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v2[192])
      goto LABEL_12;
LABEL_11:
    v2[192] = 0;
    goto LABEL_12;
  }
LABEL_2:
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void std::__hash_table<std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,md::FlyoverCompleteTileDataLogic::MeshStorage>,std::__unordered_map_hasher<md::FlyoverCompleteTileDataLogic::DrapingTask,std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,md::FlyoverCompleteTileDataLogic::MeshStorage>,md::FlyoverCompleteTileDataLogic::DrapingTaskHash,std::equal_to<md::FlyoverCompleteTileDataLogic::DrapingTask>,true>,std::__unordered_map_equal<md::FlyoverCompleteTileDataLogic::DrapingTask,std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,md::FlyoverCompleteTileDataLogic::MeshStorage>,std::equal_to<md::FlyoverCompleteTileDataLogic::DrapingTask>,md::FlyoverCompleteTileDataLogic::DrapingTaskHash,true>,std::allocator<std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,md::FlyoverCompleteTileDataLogic::MeshStorage>>>::__deallocate_node(_QWORD *__p)
{
  _QWORD *v1;
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  if (__p)
  {
    v1 = __p;
    do
    {
      v2 = v1;
      v1 = (_QWORD *)*v1;
      v3 = (std::__shared_weak_count *)v2[18];
      if (!v3)
        goto LABEL_8;
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
        v6 = (std::__shared_weak_count *)v2[16];
        if (v6)
        {
LABEL_9:
          v7 = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(v7);
          while (__stlxr(v8 - 1, v7));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
      }
      else
      {
LABEL_8:
        v6 = (std::__shared_weak_count *)v2[16];
        if (v6)
          goto LABEL_9;
      }
      v9 = (std::__shared_weak_count *)v2[3];
      if (v9)
      {
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      operator delete(v2);
    }
    while (v1);
  }
}

uint64_t *md::FlyoverCompleteTileDataLogic::buildOctileInstances(void)::$_0::operator()(uint64_t a1, unsigned __int8 *a2, int a3, float a4)
{
  double v4;
  _QWORD *i;
  _OWORD *v9;
  int v10;
  char v11;
  uint64_t v12;
  QuadTile ***v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  __int128 v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  __n128 v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t *result;
  unsigned __int8 v38;
  unsigned __int8 *v39;
  char **v40;
  char *v41;
  char *v42;
  unsigned __int8 v43;
  unsigned __int8 v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  _QWORD *v51;
  uint64_t *v52;
  uint64_t *v53;
  unint64_t v54;
  unsigned __int8 *v55;
  uint64_t v56;
  __int128 v57;
  _BYTE *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  _OWORD *v66;
  uint64_t v67;
  __int128 v68;
  char *v69;
  __int128 v70;
  __int128 v71;
  char v72;
  int v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint8x8_t v81;
  unsigned __int8 *v82;
  char *v83;
  __int128 v84;
  float *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  unsigned __int8 *v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  unint64_t v95;
  uint64_t **v96;
  uint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  unint64_t v102;
  unint64_t v103;
  char *v104;
  float v105;
  float v106;
  _BOOL8 v107;
  unint64_t v108;
  unint64_t v109;
  size_t v110;
  void *v111;
  _QWORD *v112;
  uint64_t v113;
  _QWORD *v114;
  size_t v115;
  size_t v116;
  size_t v117;
  _QWORD *m;
  size_t v119;
  uint64_t v120;
  unint64_t v121;
  uint8x8_t v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  size_t v126;
  _QWORD *v127;
  _QWORD *v128;
  unint64_t v129;
  int v130;
  unsigned __int8 *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  char *v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  uint8x8_t v148;
  void **v149;
  unint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  float v153;
  float v154;
  _BOOL8 v155;
  unint64_t v156;
  unint64_t v157;
  size_t v158;
  void *v159;
  _QWORD *v160;
  uint64_t v161;
  _QWORD *v162;
  size_t v163;
  size_t v164;
  size_t v165;
  _QWORD *k;
  size_t v167;
  uint64_t v168;
  unint64_t v169;
  uint8x8_t v170;
  uint64_t v171;
  _QWORD *v172;
  uint64_t v173;
  size_t v174;
  _QWORD *v175;
  _QWORD *v176;
  unint64_t v177;
  uint64_t v178;
  _QWORD *v179;
  _QWORD *v180;
  uint64_t v181;
  unint64_t v182;
  char *v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  unint64_t v187;
  char *v188;
  char *v189;
  unint64_t v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  __int128 *v195;
  uint64_t v196;
  __int128 v197;
  signed int v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  _QWORD *v202;
  unsigned __int8 *v203;
  unint64_t v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  unint64_t v209;
  unint64_t v210;
  uint8x8_t v211;
  void **v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  unint64_t v217;
  _QWORD *v218;
  float v219;
  float v220;
  _BOOL8 v221;
  unint64_t v222;
  unint64_t v223;
  size_t prime;
  void *v225;
  _QWORD *v226;
  uint64_t v227;
  _QWORD *v228;
  size_t v229;
  size_t v230;
  size_t v231;
  _QWORD *j;
  size_t v233;
  uint64_t v234;
  unint64_t v235;
  uint8x8_t v236;
  uint64_t v237;
  _QWORD *v238;
  uint64_t v239;
  size_t v240;
  _QWORD *v241;
  _QWORD *v242;
  unint64_t v243;
  uint64_t v244;
  char *v245;
  uint64_t v246;
  unint64_t v247;
  char *v248;
  _QWORD *v249;
  char *v250;
  uint64_t v251;
  unint64_t v252;
  uint64_t v253;
  unint64_t v254;
  char *v255;
  char *v256;
  unint64_t v257;
  uint64_t v258;
  char *v259;
  __int128 *v260;
  uint64_t v261;
  __int128 v262;
  uint64_t v263;
  unint64_t v264;
  char *v265;
  char *v266;
  unint64_t v267;
  unint64_t v268;
  unint64_t v269;
  char *v270;
  char *v271;
  uint64_t v272;
  char *v273;
  char *v274;
  _QWORD *v275;
  _QWORD *v276;
  char *v277;
  signed int v278;
  uint64_t v279;
  uint64_t v280;
  __int128 v281;
  uint64_t v282;
  char v284;
  uint64_t v285;
  BOOL v286;
  _QWORD *v287;
  uint64_t v288;
  uint64_t v289;
  _QWORD *v290;
  char v291;
  int v292;
  unsigned __int8 v293;
  uint64_t v294;
  _OWORD *v295;
  unsigned __int8 *v296;
  _OWORD *v297;
  char *v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  _BYTE v303[40];
  uint64_t v304;
  __int128 v305;
  double v306;
  uint64_t v307;
  __int128 v308;
  double v309;
  uint64_t v310;
  __int128 v311;
  _BYTE v312[36];
  __int128 v313;
  _BYTE v314[24];
  __int128 v315;
  double v316;
  double v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  double v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  unsigned __int8 *v325;
  uint64_t v326;
  char v327;
  __int128 v328;
  double v329;
  _OWORD v330[2];
  __int128 v331;
  double v332;
  _OWORD v333[2];
  void *__p[12];
  __int128 v335;
  uint64_t v336;
  uint64_t v337;
  _BYTE v338[32];
  uint64_t v339;

  v339 = *MEMORY[0x1E0C80C00];
  v289 = *(_QWORD *)a1;
  for (i = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 8); i; i = (_QWORD *)*i)
  {
    if (!md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare::operator()((uint64_t)a2, (uint64_t)(i + 4)))
    {
      result = (uint64_t *)md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare::operator()((uint64_t)(i + 4), (uint64_t)a2);
      if (!(_DWORD)result)
        return result;
      ++i;
    }
  }
  v291 = 0;
  v9 = a2 + 24;
  v10 = *a2;
  v11 = 1;
  v295 = a2 + 24;
  v296 = a2;
  if (!a2[24])
  {
    v12 = v289;
    goto LABEL_21;
  }
  v12 = v289;
  if (v10 == 255)
  {
    v291 = 0;
    if (a2[64])
    {
      if (a2[40] == 255)
      {
        if (a2[1] >= a2[41])
        {
          v291 = 0;
          LOBYTE(v10) = -1;
          goto LABEL_21;
        }
        v13 = *(QuadTile ****)(*(_QWORD *)(v289 + 168) + 352);
        md::FlyoverCompleteTileDataLogic::getTileBounds((uint64_t)&v318, v289, v13, a2 + 40, a2[64]);
        md::FlyoverCompleteTileDataLogic::getTileBounds((uint64_t)v314, v289, v13, a2, a2[64]);
        v14 = -(*(double *)&v314[16] * *((double *)&v315 + 1) - *(double *)&v314[8] * v316)
            - (*(double *)&v314[16] * *((double *)&v315 + 1)
             - *(double *)&v314[8] * v316);
        v15 = -(*(double *)v314 * v316 - *(double *)&v314[16] * *(double *)&v315)
            - (*(double *)v314 * v316
             - *(double *)&v314[16] * *(double *)&v315);
        v16 = -(*(double *)&v314[8] * *(double *)&v315 - *(double *)v314 * *((double *)&v315 + 1))
            - (*(double *)&v314[8] * *(double *)&v315
             - *(double *)v314 * *((double *)&v315 + 1));
        v17 = -(v16 * *(double *)&v315 - (-(*(double *)&v314[8] - v14 * v316) - v15 * v317));
        v18 = *(double *)&v314[16] + v14 * *((double *)&v315 + 1) + v16 * v317;
        *(double *)&v19 = -(*(double *)v314 + v14 * v317 + v15 * v316 - v16 * *((double *)&v315 + 1));
        *((double *)&v19 + 1) = v17;
        v20 = -(*((double *)&v315 + 1) * (*((double *)&v315 + 1) * -2.0));
        v21 = v316 * -2.0 * v317;
        v22 = v317 * (*((double *)&v315 + 1) * -2.0);
        v23 = *(double *)&v315 * (*(double *)&v315 * -2.0) + 1.0;
        v24 = v317 * (*(double *)&v315 * -2.0);
        *(double *)&v302 = 1.0 - (v20 - v316 * (v316 * -2.0));
        *((double *)&v302 + 1) = v21 - *((double *)&v315 + 1) * (*(double *)&v315 * -2.0);
        *(double *)&v303[16] = -(*((double *)&v315 + 1) * (*(double *)&v315 * -2.0)) - v21;
        *(double *)&v303[24] = v23 - -(v316 * (v316 * -2.0));
        *(double *)&v305 = v22 - v316 * (*(double *)&v315 * -2.0);
        *((double *)&v305 + 1) = -(v316 * (*((double *)&v315 + 1) * -2.0)) - v24;
        *(double *)v303 = -(v316 * (*(double *)&v315 * -2.0)) - v22;
        *(double *)&v303[32] = v24 - v316 * (*((double *)&v315 + 1) * -2.0);
        v306 = v23 - v20;
        *(_QWORD *)&v303[8] = 0;
        v304 = 0;
        v307 = 0;
        v308 = v19;
        v309 = -(v18 - v15 * *(double *)&v315);
        v310 = 0x3FF0000000000000;
        v25 = *(double *)&v320;
        v26 = v25 + v25;
        *(double *)&v19 = (v25 + v25) * v25;
        v27 = (*((double *)&v320 + 1) + *((double *)&v320 + 1)) * *((double *)&v320 + 1);
        v28 = *((double *)&v319 + 1);
        v29 = (v28 + v28) * *(double *)&v320;
        v30 = (*((double *)&v320 + 1) + *((double *)&v320 + 1)) * v321;
        v31 = *((double *)&v320 + 1) * (v28 + v28);
        v32 = 1.0 - (v28 + v28) * v28;
        *(double *)__p = 1.0 - (*(double *)&v19 + v27);
        *(double *)&__p[1] = v30 + v29;
        *(double *)&__p[4] = v29 - v30;
        *(double *)&__p[5] = v32 - v27;
        v33 = v321 * (v28 + v28);
        *(double *)&__p[8] = v321 * v26 + v31;
        *(double *)&__p[9] = v26 * *((double *)&v320 + 1) - v33;
        *(_OWORD *)&__p[2] = COERCE_UNSIGNED_INT64(v31 - v321 * v26);
        *(double *)&__p[6] = v33 + v26 * *((double *)&v320 + 1);
        *(double *)&__p[10] = v32 - *(double *)&v19;
        __p[7] = 0;
        __p[11] = 0;
        v335 = v318;
        v336 = v319;
        v337 = 0x3FF0000000000000;
        gm::operator*<double,4,4,4>((double *)&v311, (double *)&v302, (double *)__p);
        v302 = v322;
        *(_OWORD *)v303 = v323;
        *(_OWORD *)&v303[16] = v324;
        *(int64x2_t *)__p = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
        *(_OWORD *)&__p[2] = xmmword_19FFB2E00;
        *(int64x2_t *)&__p[4] = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
        *(_QWORD *)v338 = &off_1E42D8A68;
        *(_QWORD *)&v338[8] = __p;
        *(_QWORD *)&v338[16] = &v311;
        *(_QWORD *)&v338[24] = v338;
        v34.n128_f64[0] = gm::Box<double,3>::forEachCorner((uint64_t)&v302, (uint64_t)v338);
        v35 = *(_QWORD **)&v338[24];
        if (*(_BYTE **)&v338[24] == v338)
        {
          v36 = 4;
          v35 = v338;
          v12 = v289;
        }
        else
        {
          v12 = v289;
          if (!*(_QWORD *)&v338[24])
          {
LABEL_20:
            v11 = 0;
            v4 = v317;
            v333[0] = *(_OWORD *)&v314[1];
            *(_QWORD *)((char *)v333 + 15) = *(_QWORD *)&v314[16];
            v291 = v314[0];
            v331 = v315;
            v332 = v316;
            v299 = *(_OWORD *)__p;
            v300 = *(_OWORD *)&__p[2];
            v301 = *(_OWORD *)&__p[4];
            LOBYTE(v10) = *a2;
            v9 = a2 + 24;
            goto LABEL_21;
          }
          v36 = 5;
        }
        (*(void (**)(__n128))(*v35 + 8 * v36))(v34);
        goto LABEL_20;
      }
    }
  }
LABEL_21:
  v38 = a2[1];
  LOBYTE(v302) = v10;
  BYTE1(v302) = v38;
  *(_QWORD *)((char *)&v302 + 4) = *(_QWORD *)(a2 + 4);
  *(_OWORD *)&v303[8] = *v9;
  *(_WORD *)&v303[24] = *((_WORD *)a2 + 20);
  *(_QWORD *)&v303[28] = *(_QWORD *)(a2 + 44);
  v305 = *((_OWORD *)a2 + 4);
  v39 = std::__hash_table<std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__list_iterator<geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::CacheEntry,void *>>,std::__unordered_map_hasher<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__list_iterator<geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::CacheEntry,void *>>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>,true>,std::__unordered_map_equal<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__list_iterator<geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::CacheEntry,void *>>,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>,md::FlyoverOctilePairHash,true>,std::allocator<std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__list_iterator<geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::CacheEntry,void *>>>>::find<std::pair<md::FlyoverOctile,md::FlyoverOctile>>((_QWORD *)(v12 + 248), (unsigned __int8 *)&v302);
  if (v39)
  {
    v40 = (char **)(v39 + 96);
    v41 = geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::_elementAccessed((char *)(v12 + 224), *((char **)v39 + 12));
    *v40 = v41;
    if ((char *)(v12 + 224) == v41)
    {
      v298 = 0;
    }
    else
    {
      v42 = v41 + 96;
      if (!*((_QWORD *)v41 + 14))
        v42 = 0;
      v298 = v42;
    }
    v9 = a2 + 24;
  }
  else
  {
    v298 = 0;
  }
  v43 = a2[40];
  v44 = a2[41];
  v45 = *(_QWORD *)(a2 + 44);
  *(_OWORD *)v338 = *(_OWORD *)(a2 + 52);
  *(_OWORD *)&v338[12] = *((_OWORD *)a2 + 4);
  if ((v11 & 1) != 0)
  {
    v291 = 0;
  }
  else
  {
    v330[0] = v333[0];
    *(_QWORD *)((char *)v330 + 15) = *(_QWORD *)((char *)v333 + 15);
    v328 = v331;
    v329 = v332;
    v318 = v299;
    v319 = v300;
    v320 = v301;
  }
  v286 = v298 != 0;
  v297 = a2 + 64;
  v46 = v12;
  if (a3)
  {
    if (a4 >= 1.0)
      v47 = 2;
    else
      v47 = 3;
  }
  else
  {
    v47 = a2[64] == 2;
  }
  v284 = v47;
  v48 = a2[1];
  v49 = *a2;
  v314[0] = *a2;
  v314[1] = v48;
  v282 = *(_QWORD *)(a2 + 4);
  *(_QWORD *)&v314[4] = v282;
  v315 = *v9;
  v50 = vcvtmd_s64_f64((double)*((int *)a2 + 22) / (double)(1 << a2[81]));
  LOBYTE(v316) = v50;
  v51 = (_QWORD *)(v46 + 184);
  v52 = std::__hash_table<std::__hash_value_type<md::FlyoverOctileWorld,std::vector<md::FlyoverOctileInstance>>,std::__unordered_map_hasher<md::FlyoverOctileWorld,std::__hash_value_type<md::FlyoverOctileWorld,std::vector<md::FlyoverOctileInstance>>,md::FlyoverOctileWorldHash,std::equal_to<md::FlyoverOctileWorld>,true>,std::__unordered_map_equal<md::FlyoverOctileWorld,std::__hash_value_type<md::FlyoverOctileWorld,std::vector<md::FlyoverOctileInstance>>,std::equal_to<md::FlyoverOctileWorld>,md::FlyoverOctileWorldHash,true>,std::allocator<std::__hash_value_type<md::FlyoverOctileWorld,std::vector<md::FlyoverOctileInstance>>>>::find<md::FlyoverOctileWorld>((_QWORD *)(v46 + 184), v314);
  if (!v52)
  {
    v59 = v49;
    if ((v11 & 1) != 0)
    {
      v291 = 0;
    }
    else
    {
      *(_OWORD *)__p = v330[0];
      *(void **)((char *)&__p[1] + 7) = *(void **)((char *)v330 + 15);
      *(_OWORD *)((char *)&__p[2] + 7) = v328;
      *(void **)((char *)&__p[4] + 7) = *(void **)&v329;
      v311 = v318;
      *(_OWORD *)v312 = v319;
      *(_OWORD *)&v312[16] = v320;
    }
    v56 = v46;
    v278 = v50;
    v65 = (char *)operator new(0xA8uLL);
    v66 = v65;
    *v65 = v43;
    v65[1] = v44;
    *(_QWORD *)(v65 + 4) = v45;
    *(_OWORD *)(v65 + 24) = *(_OWORD *)&v338[12];
    v65[40] = 0;
    v67 = (uint64_t)(v65 + 40);
    v65[144] = 0;
    if ((v11 & 1) == 0)
    {
      v65[40] = v291;
      *(_OWORD *)(v65 + 41) = *(_OWORD *)__p;
      *((void **)v65 + 7) = *(void **)((char *)&__p[1] + 7);
      *((_OWORD *)v65 + 4) = *(_OWORD *)((char *)&__p[2] + 7);
      *((void **)v65 + 10) = *(void **)((char *)&__p[4] + 7);
      *((double *)v65 + 11) = v4;
      v68 = *(_OWORD *)v312;
      *((_OWORD *)v65 + 6) = v311;
      *((_OWORD *)v65 + 7) = v68;
      *((_OWORD *)v65 + 8) = *(_OWORD *)&v312[16];
      v65[144] = 1;
    }
    v65[152] = v286;
    *((float *)v65 + 39) = a4;
    v65[160] = v284;
    v292 = v315;
    v279 = *(_QWORD *)((char *)&v315 + 4);
    v280 = HIDWORD(v315);
    v69 = (char *)operator new(0xA8uLL);
    *(_QWORD *)&v70 = v69;
    v277 = v69 + 168;
    *v69 = v43;
    v69[1] = v44;
    *(_QWORD *)(v69 + 4) = v45;
    *(_OWORD *)(v69 + 24) = *(_OWORD *)((char *)v66 + 24);
    v69[40] = 0;
    v69[144] = 0;
    if ((v11 & 1) == 0)
    {
      *(_OWORD *)(v69 + 40) = *(_OWORD *)v67;
      *((_QWORD *)v69 + 7) = *(_QWORD *)(v67 + 16);
      *((_OWORD *)v69 + 4) = v66[4];
      *((_QWORD *)v69 + 10) = *((_QWORD *)v66 + 10);
      *((double *)v69 + 11) = v4;
      v71 = v66[7];
      *((_OWORD *)v69 + 6) = v66[6];
      *((_OWORD *)v69 + 7) = v71;
      *((_OWORD *)v69 + 8) = v66[8];
      v69[144] = 1;
    }
    v69[152] = v286;
    *((float *)v69 + 39) = a4;
    v69[160] = v284;
    *((_QWORD *)&v70 + 1) = v69 + 168;
    v281 = v70;
    v72 = v59;
    v73 = v48;
    v76 = v279 & 0xFF00000000;
    v77 = 2 * v279;
    if ((v279 & 0xFF00000000) == 0)
      v77 = 0;
    v74 = (v48
         + ((v59 - 0x61C8864680B583EBLL) << 6)
         + ((unint64_t)(v59 - 0x61C8864680B583EBLL) >> 2)
         - 0x61C8864680B583EBLL) ^ (v59 - 0x61C8864680B583EBLL);
    v75 = ((v74 << 6) + (int)v282 + (v74 >> 2) - 0x61C8864680B583EBLL) ^ v74;
    v78 = (v77 | (v280 << 33)) ^ v75 ^ ((v75 << 6) + SHIDWORD(v282) + (v75 >> 2) - 0x61C8864680B583EBLL);
    v79 = ((v78 << 6) + v278 + (v78 >> 2) - 0x61C8864680B583EBLL) ^ v78;
    v80 = *(_QWORD *)(v46 + 192);
    if (v80)
    {
      v81 = (uint8x8_t)vcnt_s8((int8x8_t)v80);
      v81.i16[0] = vaddlv_u8(v81);
      if (v81.u32[0] > 1uLL)
      {
        v67 = ((v78 << 6) + v278 + (v78 >> 2) - 0x61C8864680B583EBLL) ^ v78;
        if (v79 >= v80)
          v67 = v79 % v80;
      }
      else
      {
        v67 = v79 & (v80 - 1);
      }
      v96 = *(uint64_t ***)(*v51 + 8 * v67);
      if (v96)
      {
        v97 = *v96;
        if (v97)
        {
          if (v81.u32[0] <= 1uLL)
          {
            v98 = v80 - 1;
            if (!v76)
            {
              while (1)
              {
                v100 = v97[1];
                if (v100 == v79)
                {
                  if (*((unsigned __int8 *)v97 + 40) == v292
                    && *((unsigned __int8 *)v97 + 16) == (_DWORD)v59
                    && *((unsigned __int8 *)v97 + 17) == v73
                    && *(uint64_t *)((char *)v97 + 20) == v282
                    && *((_DWORD *)v97 + 13) == (_DWORD)v280
                    && !*((_BYTE *)v97 + 48)
                    && *((unsigned __int8 *)v97 + 56) == v278)
                  {
                    goto LABEL_106;
                  }
                }
                else if ((v100 & v98) != v67)
                {
                  goto LABEL_136;
                }
                v97 = (uint64_t *)*v97;
                if (!v97)
                  goto LABEL_136;
              }
            }
            while (1)
            {
              v99 = v97[1];
              if (v99 == v79)
              {
                if (*((unsigned __int8 *)v97 + 40) == v292
                  && *((unsigned __int8 *)v97 + 16) == (_DWORD)v59
                  && *((unsigned __int8 *)v97 + 17) == v73
                  && *(uint64_t *)((char *)v97 + 20) == v282
                  && *((_DWORD *)v97 + 13) == (_DWORD)v280
                  && *((_BYTE *)v97 + 48)
                  && *((_DWORD *)v97 + 11) == (_DWORD)v279
                  && *((unsigned __int8 *)v97 + 56) == v278)
                {
                  goto LABEL_106;
                }
              }
              else if ((v99 & v98) != v67)
              {
                goto LABEL_136;
              }
              v97 = (uint64_t *)*v97;
              if (!v97)
                goto LABEL_136;
            }
          }
          if (!v76)
          {
            while (1)
            {
              v103 = v97[1];
              if (v103 == v79)
              {
                if (*((unsigned __int8 *)v97 + 40) == v292
                  && *((unsigned __int8 *)v97 + 16) == (_DWORD)v59
                  && *((unsigned __int8 *)v97 + 17) == v73
                  && *(uint64_t *)((char *)v97 + 20) == v282
                  && *((_DWORD *)v97 + 13) == (_DWORD)v280
                  && !*((_BYTE *)v97 + 48)
                  && *((unsigned __int8 *)v97 + 56) == v278)
                {
                  goto LABEL_106;
                }
              }
              else
              {
                if (v103 >= v80)
                  v103 %= v80;
                if (v103 != v67)
                  goto LABEL_136;
              }
              v97 = (uint64_t *)*v97;
              if (!v97)
                goto LABEL_136;
            }
          }
          do
          {
            v102 = v97[1];
            if (v102 == v79)
            {
              if (*((unsigned __int8 *)v97 + 40) == v292
                && *((unsigned __int8 *)v97 + 16) == (_DWORD)v59
                && *((unsigned __int8 *)v97 + 17) == v73
                && *(uint64_t *)((char *)v97 + 20) == v282
                && *((_DWORD *)v97 + 13) == (_DWORD)v280
                && *((_BYTE *)v97 + 48)
                && *((_DWORD *)v97 + 11) == (_DWORD)v279
                && *((unsigned __int8 *)v97 + 56) == v278)
              {
LABEL_106:
                a2 = v296;
                v95 = (unint64_t)v297;
                v101 = (void *)v281;
                goto LABEL_196;
              }
            }
            else
            {
              if (v102 >= v80)
                v102 %= v80;
              if (v102 != v67)
                break;
            }
            v97 = (uint64_t *)*v97;
          }
          while (v97);
        }
      }
    }
LABEL_136:
    v104 = (char *)operator new(0x58uLL);
    v325 = (unsigned __int8 *)v104;
    v287 = (_QWORD *)(v46 + 200);
    v326 = v46 + 200;
    *(_QWORD *)v104 = 0;
    *((_QWORD *)v104 + 1) = v79;
    v104[16] = v72;
    v104[17] = v73;
    *(_QWORD *)(v104 + 20) = v282;
    v104[40] = v292;
    *(_WORD *)(v104 + 41) = *(_WORD *)((char *)&v315 + 1);
    v104[43] = BYTE3(v315);
    *(_QWORD *)(v104 + 44) = v279;
    *((_DWORD *)v104 + 13) = v280;
    v104[56] = v278;
    *((_OWORD *)v104 + 4) = v281;
    *((_QWORD *)v104 + 10) = v277;
    v327 = 1;
    v105 = (float)(unint64_t)(*(_QWORD *)(v46 + 208) + 1);
    v106 = *(float *)(v46 + 216);
    if (v80 && (float)(v106 * (float)v80) >= v105)
    {
LABEL_186:
      v127 = (_QWORD *)*v51;
      v128 = *(_QWORD **)(*v51 + 8 * v67);
      if (v128)
      {
        *(_QWORD *)v104 = *v128;
      }
      else
      {
        *(_QWORD *)v104 = *v287;
        *v287 = v104;
        v127[v67] = v287;
        if (!*(_QWORD *)v104)
        {
LABEL_195:
          ++*(_QWORD *)(v46 + 208);
          v101 = 0;
          a2 = v296;
          v95 = (unint64_t)v297;
LABEL_196:
          if (v101)
            operator delete(v101);
          operator delete(v66);
          if (!v298)
            return std::__tree<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare,std::allocator<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo>>::__emplace_unique_key_args<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo const&>(*(uint64_t ***)(a1 + 8), (uint64_t)a2, (uint64_t)a2);
LABEL_199:
          v293 = a2[81];
          v130 = *((_DWORD *)a2 + 22);
          v131 = a2;
          v132 = a2[1];
          v133 = *v131;
          LOBYTE(v311) = *v131;
          BYTE1(v311) = v132;
          v288 = *(_QWORD *)(v131 + 4);
          *(_QWORD *)((char *)&v311 + 4) = v288;
          *(_OWORD *)&v312[8] = *v295;
          v134 = v131[41];
          v135 = v131[40];
          v312[24] = v131[40];
          v312[25] = v134;
          v285 = *(_QWORD *)(v131 + 44);
          *(_QWORD *)&v312[28] = v285;
          v136 = (_QWORD *)(v56 + 304);
          v313 = *(_OWORD *)v95;
          v137 = (char *)std::__hash_table<std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__list_iterator<geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::CacheEntry,void *>>,std::__unordered_map_hasher<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__list_iterator<geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::CacheEntry,void *>>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>,true>,std::__unordered_map_equal<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__list_iterator<geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::CacheEntry,void *>>,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>,md::FlyoverOctilePairHash,true>,std::allocator<std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__list_iterator<geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::CacheEntry,void *>>>>::find<std::pair<md::FlyoverOctile,md::FlyoverOctile>>((_QWORD *)(v56 + 304), (unsigned __int8 *)&v311);
          if (v137)
            goto LABEL_298;
          v138 = (v132
                + ((v133 - 0x61C8864680B583EBLL) << 6)
                + ((unint64_t)(v133 - 0x61C8864680B583EBLL) >> 2)
                - 0x61C8864680B583EBLL) ^ (v133 - 0x61C8864680B583EBLL);
          v139 = ((v138 << 6) + (int)v288 + (v138 >> 2) - 0x61C8864680B583EBLL) ^ v138;
          if ((*(_QWORD *)&v312[12] & 0xFF00000000) != 0)
            v140 = 2 * *(unsigned int *)&v312[12];
          else
            v140 = 0;
          v141 = (v140 | ((unint64_t)*(unsigned int *)&v312[20] << 33)) ^ v139 ^ ((v139 << 6)
                                                                                       + SHIDWORD(v288)
                                                                                       + (v139 >> 2)
                                                                                       - 0x61C8864680B583EBLL);
          v142 = (v134
                + ((v135 - 0x61C8864680B583EBLL) << 6)
                + ((unint64_t)(v135 - 0x61C8864680B583EBLL) >> 2)
                - 0x61C8864680B583EBLL) ^ (v135 - 0x61C8864680B583EBLL);
          v143 = ((v142 << 6) + (int)v285 + (v142 >> 2) - 0x61C8864680B583EBLL) ^ v142;
          if ((*(_QWORD *)((_BYTE *)&v313 + 4) & 0xFF00000000) != 0)
            v145 = 2 * DWORD1(v313);
          else
            v145 = 0;
          v144 = (v143 << 6) + SHIDWORD(v285) + (v143 >> 2) - 0x61C8864680B583EBLL;
          v146 = ((v141 << 6)
                + (v141 >> 2)
                + ((v145 | ((unint64_t)HIDWORD(v313) << 33)) ^ v143 ^ v144)
                - 0x61C8864680B583EBLL) ^ v141;
          v147 = *(_QWORD *)(v56 + 312);
          if (v147)
          {
            v148 = (uint8x8_t)vcnt_s8((int8x8_t)v147);
            v148.i16[0] = vaddlv_u8(v148);
            if (v148.u32[0] > 1uLL)
            {
              v95 = ((v141 << 6)
                   + (v141 >> 2)
                   + ((v145 | ((unint64_t)HIDWORD(v313) << 33)) ^ v143 ^ v144)
                   - 0x61C8864680B583EBLL) ^ v141;
              if (v146 >= v147)
                v95 = v146 % v147;
            }
            else
            {
              v95 = v146 & (v147 - 1);
            }
            v149 = *(void ***)(*v136 + 8 * v95);
            if (v149)
            {
              v137 = (char *)*v149;
              if (*v149)
              {
                if (v148.u32[0] >= 2uLL)
                {
                  while (1)
                  {
                    v150 = *((_QWORD *)v137 + 1);
                    if (v150 == v146)
                    {
                      if (std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>::operator()[abi:nn180100]((unsigned __int8 *)v137 + 16, (unsigned __int8 *)&v311))
                      {
                        goto LABEL_298;
                      }
                    }
                    else
                    {
                      if (v150 >= v147)
                        v150 %= v147;
                      if (v150 != v95)
                        goto LABEL_238;
                    }
                    v137 = *(char **)v137;
                    if (!v137)
                      goto LABEL_238;
                  }
                }
                do
                {
                  v151 = *((_QWORD *)v137 + 1);
                  if (v151 == v146)
                  {
                    if (std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>::operator()[abi:nn180100]((unsigned __int8 *)v137 + 16, (unsigned __int8 *)&v311))
                    {
                      v56 = v289;
                      goto LABEL_298;
                    }
                  }
                  else if ((v151 & (v147 - 1)) != v95)
                  {
                    break;
                  }
                  v137 = *(char **)v137;
                }
                while (v137);
                v56 = v289;
              }
            }
          }
LABEL_238:
          v137 = (char *)operator new(0x78uLL);
          __p[0] = v137;
          v290 = (_QWORD *)(v56 + 320);
          __p[1] = (void *)(v56 + 320);
          *(_QWORD *)v137 = 0;
          *((_QWORD *)v137 + 1) = v146;
          v137[16] = v133;
          v137[17] = v132;
          *(_QWORD *)(v137 + 20) = v288;
          *(_OWORD *)(v137 + 40) = *v295;
          v137[56] = v135;
          v137[57] = v134;
          *(_QWORD *)(v137 + 60) = v285;
          *((_OWORD *)v137 + 5) = *v297;
          *((_QWORD *)v137 + 13) = 0;
          *((_QWORD *)v137 + 14) = 0;
          *((_QWORD *)v137 + 12) = 0;
          LOBYTE(__p[2]) = 1;
          v153 = (float)(unint64_t)(*(_QWORD *)(v56 + 328) + 1);
          v154 = *(float *)(v56 + 336);
          if (v147 && (float)(v154 * (float)v147) >= v153)
          {
LABEL_288:
            v175 = (_QWORD *)*v136;
            v176 = *(_QWORD **)(*v136 + 8 * v95);
            if (v176)
            {
              *(_QWORD *)v137 = *v176;
            }
            else
            {
              *(_QWORD *)v137 = *v290;
              *v290 = v137;
              v175[v95] = v290;
              if (!*(_QWORD *)v137)
              {
LABEL_297:
                ++*(_QWORD *)(v56 + 328);
LABEL_298:
                v178 = *((_QWORD *)v298 + 1);
                if ((char *)v178 != v298)
                {
                  v179 = (_QWORD *)*((_QWORD *)v137 + 13);
                  while (1)
                  {
                    v181 = *(_QWORD *)(v178 + 16);
                    v182 = *((_QWORD *)v137 + 14);
                    if ((unint64_t)v179 >= v182)
                      break;
                    *v179 = v181;
                    v180 = v179 + 1;
LABEL_301:
                    *((_QWORD *)v137 + 13) = v180;
                    v178 = *(_QWORD *)(v178 + 8);
                    v179 = v180;
                    if ((char *)v178 == v298)
                      goto LABEL_330;
                  }
                  v183 = (char *)*((_QWORD *)v137 + 12);
                  v184 = ((char *)v179 - v183) >> 3;
                  v185 = v184 + 1;
                  if ((unint64_t)(v184 + 1) >> 61)
                    abort();
                  v186 = v182 - (_QWORD)v183;
                  if (v186 >> 2 > v185)
                    v185 = v186 >> 2;
                  if ((unint64_t)v186 >= 0x7FFFFFFFFFFFFFF8)
                    v187 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v187 = v185;
                  if (v187)
                  {
                    if (v187 >> 61)
                      goto LABEL_521;
                    v188 = (char *)operator new(8 * v187);
                  }
                  else
                  {
                    v188 = 0;
                  }
                  v189 = &v188[8 * v184];
                  *(_QWORD *)v189 = v181;
                  v180 = v189 + 8;
                  if (v179 == (_QWORD *)v183)
                  {
LABEL_318:
                    *((_QWORD *)v137 + 12) = v189;
                    *((_QWORD *)v137 + 13) = v180;
                    *((_QWORD *)v137 + 14) = &v188[8 * v187];
                    if (v179)
                      operator delete(v179);
                    goto LABEL_301;
                  }
                  v190 = (char *)(v179 - 1) - v183;
                  if (v190 >= 0x168)
                  {
                    if (&v188[(char *)v179 - v183 - 8 - (v190 & 0xFFFFFFFFFFFFFFF8)] > &v188[(char *)v179 - v183 - 8])
                    {
                      v191 = (char *)v179;
                    }
                    else if ((_QWORD *)((char *)v179 - (v190 & 0xFFFFFFFFFFFFFFF8) - 8) > v179 - 1)
                    {
                      v191 = (char *)v179;
                    }
                    else if ((unint64_t)(v183 - v188) >= 0x20)
                    {
                      v193 = (v190 >> 3) + 1;
                      v191 = (char *)&v179[-(v193 & 0x3FFFFFFFFFFFFFFCLL)];
                      v194 = &v188[8 * v184 - 16];
                      v195 = (__int128 *)(v179 - 2);
                      v196 = v193 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        v197 = *v195;
                        *((_OWORD *)v194 - 1) = *(v195 - 1);
                        *(_OWORD *)v194 = v197;
                        v194 -= 32;
                        v195 -= 2;
                        v196 -= 4;
                      }
                      while (v196);
                      v189 -= 8 * (v193 & 0x3FFFFFFFFFFFFFFCLL);
                      if (v193 == (v193 & 0x3FFFFFFFFFFFFFFCLL))
                        goto LABEL_317;
                    }
                    else
                    {
                      v191 = (char *)v179;
                    }
                  }
                  else
                  {
                    v191 = (char *)v179;
                  }
                  do
                  {
                    v192 = *((_QWORD *)v191 - 1);
                    v191 -= 8;
                    *((_QWORD *)v189 - 1) = v192;
                    v189 -= 8;
                  }
                  while (v191 != v183);
LABEL_317:
                  v179 = (_QWORD *)*((_QWORD *)v137 + 12);
                  goto LABEL_318;
                }
LABEL_330:
                v198 = vcvtmd_s64_f64((double)v130 / (double)(1 << v293));
                v199 = v296[1];
                v200 = *v296;
                LOBYTE(v311) = *v296;
                BYTE1(v311) = v199;
                v201 = (uint64_t)&v311;
                v294 = *(_QWORD *)(v296 + 4);
                *(_QWORD *)((char *)&v311 + 4) = v294;
                *(_OWORD *)&v312[8] = *v295;
                v312[24] = v198;
                v202 = (_QWORD *)(v56 + 344);
                v203 = (unsigned __int8 *)std::__hash_table<std::__hash_value_type<md::FlyoverOctileWorld,std::vector<md::FlyoverOctileInstance>>,std::__unordered_map_hasher<md::FlyoverOctileWorld,std::__hash_value_type<md::FlyoverOctileWorld,std::vector<md::FlyoverOctileInstance>>,md::FlyoverOctileWorldHash,std::equal_to<md::FlyoverOctileWorld>,true>,std::__unordered_map_equal<md::FlyoverOctileWorld,std::__hash_value_type<md::FlyoverOctileWorld,std::vector<md::FlyoverOctileInstance>>,std::equal_to<md::FlyoverOctileWorld>,md::FlyoverOctileWorldHash,true>,std::allocator<std::__hash_value_type<md::FlyoverOctileWorld,std::vector<md::FlyoverOctileInstance>>>>::find<md::FlyoverOctileWorld>((_QWORD *)(v56 + 344), (unsigned __int8 *)&v311);
                if (v203)
                {
LABEL_458:
                  v244 = *((_QWORD *)v298 + 1);
                  a2 = v296;
                  if ((char *)v244 != v298)
                  {
                    while (1)
                    {
                      v246 = *(_QWORD *)(v244 + 16);
                      v248 = (char *)*((_QWORD *)v203 + 9);
                      v247 = *((_QWORD *)v203 + 10);
                      if ((unint64_t)v248 >= v247)
                      {
                        v250 = (char *)*((_QWORD *)v203 + 8);
                        v251 = (v248 - v250) >> 3;
                        v252 = v251 + 1;
                        if ((unint64_t)(v251 + 1) >> 61)
                          abort();
                        v253 = v247 - (_QWORD)v250;
                        if (v253 >> 2 > v252)
                          v252 = v253 >> 2;
                        if ((unint64_t)v253 >= 0x7FFFFFFFFFFFFFF8)
                          v254 = 0x1FFFFFFFFFFFFFFFLL;
                        else
                          v254 = v252;
                        if (v254)
                        {
                          if (v254 >> 61)
                            goto LABEL_521;
                          v255 = (char *)operator new(8 * v254);
                        }
                        else
                        {
                          v255 = 0;
                        }
                        v256 = &v255[8 * v251];
                        *(_QWORD *)v256 = v246;
                        v249 = v256 + 8;
                        if (v248 != v250)
                        {
                          v257 = v248 - 8 - v250;
                          if (v257 < 0x58)
                            goto LABEL_528;
                          if ((unint64_t)(v250 - v255) < 0x20)
                            goto LABEL_528;
                          v258 = (v257 >> 3) + 1;
                          v259 = &v255[8 * v251 - 16];
                          v260 = (__int128 *)(v248 - 16);
                          v261 = v258 & 0x3FFFFFFFFFFFFFFCLL;
                          do
                          {
                            v262 = *v260;
                            *((_OWORD *)v259 - 1) = *(v260 - 1);
                            *(_OWORD *)v259 = v262;
                            v259 -= 32;
                            v260 -= 2;
                            v261 -= 4;
                          }
                          while (v261);
                          v256 -= 8 * (v258 & 0x3FFFFFFFFFFFFFFCLL);
                          v248 -= 8 * (v258 & 0x3FFFFFFFFFFFFFFCLL);
                          if (v258 != (v258 & 0x3FFFFFFFFFFFFFFCLL))
                          {
LABEL_528:
                            do
                            {
                              v263 = *((_QWORD *)v248 - 1);
                              v248 -= 8;
                              *((_QWORD *)v256 - 1) = v263;
                              v256 -= 8;
                            }
                            while (v248 != v250);
                          }
                          v248 = (char *)*((_QWORD *)v203 + 8);
                        }
                        *((_QWORD *)v203 + 8) = v256;
                        *((_QWORD *)v203 + 9) = v249;
                        *((_QWORD *)v203 + 10) = &v255[8 * v254];
                        a2 = v296;
                        if (v248)
                          operator delete(v248);
                      }
                      else
                      {
                        *(_QWORD *)v248 = v246;
                        v249 = v248 + 8;
                      }
                      *((_QWORD *)v203 + 9) = v249;
                      v265 = (char *)*((_QWORD *)v203 + 12);
                      v264 = *((_QWORD *)v203 + 13);
                      if ((unint64_t)v265 < v264)
                      {
                        *(_WORD *)v265 = *((_WORD *)a2 + 20);
                        *(_QWORD *)(v265 + 4) = *(_QWORD *)(a2 + 44);
                        *(_OWORD *)(v265 + 24) = *v297;
                        v245 = v265 + 40;
                      }
                      else
                      {
                        v266 = (char *)*((_QWORD *)v203 + 11);
                        v267 = 0xCCCCCCCCCCCCCCCDLL * ((v265 - v266) >> 3) + 1;
                        if (v267 > 0x666666666666666)
                          abort();
                        v268 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v264 - (_QWORD)v266) >> 3);
                        if (2 * v268 > v267)
                          v267 = 2 * v268;
                        if (v268 >= 0x333333333333333)
                          v269 = 0x666666666666666;
                        else
                          v269 = v267;
                        if (v269)
                        {
                          if (v269 > 0x666666666666666)
                            goto LABEL_521;
                          v270 = (char *)operator new(40 * v269);
                          a2 = v296;
                        }
                        else
                        {
                          v270 = 0;
                        }
                        v271 = &v270[8 * ((v265 - v266) >> 3)];
                        *(_WORD *)v271 = *((_WORD *)a2 + 20);
                        *(_QWORD *)(v271 + 4) = *(_QWORD *)(a2 + 44);
                        *(_OWORD *)(v271 + 24) = *v297;
                        if (v265 == v266)
                        {
                          v274 = &v270[8 * ((v265 - v266) >> 3)];
                        }
                        else
                        {
                          v272 = 0;
                          do
                          {
                            v273 = &v271[v272];
                            *((_WORD *)v273 - 20) = *(_WORD *)&v265[v272 - 40];
                            *(_QWORD *)(v273 - 36) = *(_QWORD *)&v265[v272 - 36];
                            *((_OWORD *)v273 - 1) = *(_OWORD *)&v265[v272 - 16];
                            v272 -= 40;
                          }
                          while (&v265[v272] != v266);
                          v274 = &v271[v272];
                          v265 = (char *)*((_QWORD *)v203 + 11);
                        }
                        v245 = v271 + 40;
                        *((_QWORD *)v203 + 11) = v274;
                        *((_QWORD *)v203 + 12) = v271 + 40;
                        *((_QWORD *)v203 + 13) = &v270[40 * v269];
                        if (v265)
                          operator delete(v265);
                      }
                      *((_QWORD *)v203 + 12) = v245;
                      v244 = *(_QWORD *)(v244 + 8);
                      if ((char *)v244 == v298)
                        return std::__tree<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare,std::allocator<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo>>::__emplace_unique_key_args<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo const&>(*(uint64_t ***)(a1 + 8), (uint64_t)a2, (uint64_t)a2);
                    }
                  }
                  return std::__tree<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare,std::allocator<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo>>::__emplace_unique_key_args<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo const&>(*(uint64_t ***)(a1 + 8), (uint64_t)a2, (uint64_t)a2);
                }
                memset(__p, 0, 48);
                v206 = *(_QWORD *)&v312[12] & 0xFF00000000;
                v207 = 2 * *(unsigned int *)&v312[12];
                if ((*(_QWORD *)&v312[12] & 0xFF00000000) == 0)
                  v207 = 0;
                v204 = (v199
                      + ((v200 - 0x61C8864680B583EBLL) << 6)
                      + ((unint64_t)(v200 - 0x61C8864680B583EBLL) >> 2)
                      - 0x61C8864680B583EBLL) ^ (v200 - 0x61C8864680B583EBLL);
                v205 = ((v204 << 6) + (int)v294 + (v204 >> 2) - 0x61C8864680B583EBLL) ^ v204;
                v208 = (v207 | ((unint64_t)*(unsigned int *)&v312[20] << 33)) ^ v205 ^ ((v205 << 6)
                                                                                             + SHIDWORD(v294)
                                                                                             + (v205 >> 2)
                                                                                             - 0x61C8864680B583EBLL);
                v209 = ((v208 << 6) + v198 + (v208 >> 2) - 0x61C8864680B583EBLL) ^ v208;
                v210 = *(_QWORD *)(v56 + 352);
                if (v210)
                {
                  v211 = (uint8x8_t)vcnt_s8((int8x8_t)v210);
                  v211.i16[0] = vaddlv_u8(v211);
                  if (v211.u32[0] > 1uLL)
                  {
                    v201 = ((v208 << 6) + v198 + (v208 >> 2) - 0x61C8864680B583EBLL) ^ v208;
                    if (v209 >= v210)
                      v201 = v209 % v210;
                  }
                  else
                  {
                    v201 = v209 & (v210 - 1);
                  }
                  v212 = *(void ***)(*v202 + 8 * v201);
                  if (v212)
                  {
                    v203 = (unsigned __int8 *)*v212;
                    if (*v212)
                    {
                      if (v211.u32[0] <= 1uLL)
                      {
                        v213 = v210 - 1;
                        if (!v206)
                        {
                          while (1)
                          {
                            v215 = *((_QWORD *)v203 + 1);
                            if (v215 == v209)
                            {
                              if (v203[40] == v312[8]
                                && v203[16] == (_DWORD)v200
                                && v203[17] == (_DWORD)v199
                                && *(_QWORD *)(v203 + 20) == v294
                                && *((_DWORD *)v203 + 13) == *(_DWORD *)&v312[20]
                                && !v203[48]
                                && v203[56] == v198)
                              {
                                goto LABEL_456;
                              }
                            }
                            else if ((v215 & v213) != v201)
                            {
                              goto LABEL_396;
                            }
                            v203 = *(unsigned __int8 **)v203;
                            if (!v203)
                              goto LABEL_396;
                          }
                        }
                        while (1)
                        {
                          v214 = *((_QWORD *)v203 + 1);
                          if (v214 == v209)
                          {
                            if (v203[40] == v312[8]
                              && v203[16] == (_DWORD)v200
                              && v203[17] == (_DWORD)v199
                              && *(_QWORD *)(v203 + 20) == v294
                              && *((_DWORD *)v203 + 13) == *(_DWORD *)&v312[20]
                              && v203[48]
                              && *((_DWORD *)v203 + 11) == *(_DWORD *)&v312[12]
                              && v203[56] == v198)
                            {
                              goto LABEL_456;
                            }
                          }
                          else if ((v214 & v213) != v201)
                          {
                            goto LABEL_396;
                          }
                          v203 = *(unsigned __int8 **)v203;
                          if (!v203)
                            goto LABEL_396;
                        }
                      }
                      if (!v206)
                      {
                        while (1)
                        {
                          v217 = *((_QWORD *)v203 + 1);
                          if (v217 == v209)
                          {
                            if (v203[40] == v312[8]
                              && v203[16] == (_DWORD)v200
                              && v203[17] == (_DWORD)v199
                              && *(_QWORD *)(v203 + 20) == v294
                              && *((_DWORD *)v203 + 13) == *(_DWORD *)&v312[20]
                              && !v203[48]
                              && v203[56] == v198)
                            {
                              goto LABEL_456;
                            }
                          }
                          else
                          {
                            if (v217 >= v210)
                              v217 %= v210;
                            if (v217 != v201)
                              goto LABEL_396;
                          }
                          v203 = *(unsigned __int8 **)v203;
                          if (!v203)
                            goto LABEL_396;
                        }
                      }
                      do
                      {
                        v216 = *((_QWORD *)v203 + 1);
                        if (v216 == v209)
                        {
                          if (v203[40] == v312[8]
                            && v203[16] == (_DWORD)v200
                            && v203[17] == (_DWORD)v199
                            && *(_QWORD *)(v203 + 20) == v294
                            && *((_DWORD *)v203 + 13) == *(_DWORD *)&v312[20]
                            && v203[48]
                            && *((_DWORD *)v203 + 11) == *(_DWORD *)&v312[12]
                            && v203[56] == v198)
                          {
                            goto LABEL_456;
                          }
                        }
                        else
                        {
                          if (v216 >= v210)
                            v216 %= v210;
                          if (v216 != v201)
                            break;
                        }
                        v203 = *(unsigned __int8 **)v203;
                      }
                      while (v203);
                    }
                  }
                }
LABEL_396:
                v203 = (unsigned __int8 *)operator new(0x70uLL);
                v218 = (_QWORD *)(v56 + 360);
                v325 = v203;
                v326 = v56 + 360;
                *(_QWORD *)v203 = 0;
                *((_QWORD *)v203 + 1) = v209;
                v203[16] = v200;
                v203[17] = v199;
                *(_QWORD *)(v203 + 20) = v294;
                *(_OWORD *)(v203 + 40) = *v295;
                v203[56] = v198;
                *((_QWORD *)v203 + 8) = 0;
                *((_QWORD *)v203 + 9) = 0;
                __p[0] = 0;
                __p[1] = 0;
                *((_QWORD *)v203 + 10) = 0;
                *((_QWORD *)v203 + 11) = 0;
                *((_QWORD *)v203 + 12) = 0;
                *((_QWORD *)v203 + 13) = 0;
                memset(&__p[2], 0, 32);
                v327 = 1;
                v219 = (float)(unint64_t)(*(_QWORD *)(v56 + 368) + 1);
                v220 = *(float *)(v56 + 376);
                if (v210 && (float)(v220 * (float)v210) >= v219)
                {
LABEL_446:
                  v241 = (_QWORD *)*v202;
                  v242 = *(_QWORD **)(*v202 + 8 * v201);
                  if (v242)
                  {
                    *(_QWORD *)v203 = *v242;
                  }
                  else
                  {
                    *(_QWORD *)v203 = *v218;
                    *v218 = v203;
                    v241[v201] = v218;
                    if (!*(_QWORD *)v203)
                      goto LABEL_455;
                    v243 = *(_QWORD *)(*(_QWORD *)v203 + 8);
                    if ((v210 & (v210 - 1)) != 0)
                    {
                      if (v243 >= v210)
                        v243 %= v210;
                    }
                    else
                    {
                      v243 &= v210 - 1;
                    }
                    v242 = (_QWORD *)(*v202 + 8 * v243);
                  }
                  *v242 = v203;
LABEL_455:
                  ++*(_QWORD *)(v56 + 368);
LABEL_456:
                  if (__p[0])
                    operator delete(__p[0]);
                  goto LABEL_458;
                }
                v221 = 1;
                if (v210 >= 3)
                  v221 = (v210 & (v210 - 1)) != 0;
                v222 = v221 | (2 * v210);
                v223 = vcvtps_u32_f32(v219 / v220);
                if (v222 <= v223)
                  prime = v223;
                else
                  prime = v222;
                if (prime == 1)
                {
                  prime = 2;
                }
                else if ((prime & (prime - 1)) != 0)
                {
                  prime = std::__next_prime(prime);
                  v210 = *(_QWORD *)(v56 + 352);
                }
                if (prime <= v210)
                {
                  if (prime >= v210)
                    goto LABEL_433;
                  v235 = vcvtps_u32_f32((float)*(unint64_t *)(v56 + 368) / *(float *)(v56 + 376));
                  if (v210 < 3
                    || (v236 = (uint8x8_t)vcnt_s8((int8x8_t)v210), v236.i16[0] = vaddlv_u8(v236), v236.u32[0] > 1uLL))
                  {
                    v235 = std::__next_prime(v235);
                  }
                  else
                  {
                    v237 = 1 << -(char)__clz(v235 - 1);
                    if (v235 >= 2)
                      v235 = v237;
                  }
                  if (prime <= v235)
                    prime = v235;
                  if (prime >= v210)
                  {
                    v210 = *(_QWORD *)(v56 + 352);
LABEL_433:
                    if ((v210 & (v210 - 1)) != 0)
                    {
                      if (v209 >= v210)
                        v201 = v209 % v210;
                      else
                        v201 = v209;
                    }
                    else
                    {
                      v201 = (v210 - 1) & v209;
                    }
                    goto LABEL_446;
                  }
                  if (!prime)
                  {
                    v275 = (_QWORD *)*v202;
                    *v202 = 0;
                    if (v275)
                      operator delete(v275);
                    v210 = 0;
                    *(_QWORD *)(v56 + 352) = 0;
                    goto LABEL_433;
                  }
                }
                if (!(prime >> 61))
                {
                  v225 = operator new(8 * prime);
                  v226 = (_QWORD *)*v202;
                  *v202 = v225;
                  if (v226)
                    operator delete(v226);
                  v227 = 0;
                  *(_QWORD *)(v56 + 352) = prime;
                  do
                    *(_QWORD *)(*v202 + 8 * v227++) = 0;
                  while (prime != v227);
                  v228 = (_QWORD *)*v218;
                  if (!*v218)
                    goto LABEL_432;
                  v229 = v228[1];
                  v230 = prime - 1;
                  if ((prime & (prime - 1)) == 0)
                  {
                    v231 = v229 & v230;
                    *(_QWORD *)(*v202 + 8 * v231) = v218;
                    for (j = (_QWORD *)*v228; *v228; j = (_QWORD *)*v228)
                    {
                      v233 = j[1] & v230;
                      if (v233 == v231)
                      {
                        v228 = j;
                      }
                      else if (*(_QWORD *)(*v202 + 8 * v233))
                      {
                        *v228 = *j;
                        v234 = 8 * v233;
                        *j = **(_QWORD **)(*v202 + v234);
                        **(_QWORD **)(*v202 + v234) = j;
                      }
                      else
                      {
                        *(_QWORD *)(*v202 + 8 * v233) = v228;
                        v228 = j;
                        v231 = v233;
                      }
                    }
LABEL_432:
                    v210 = prime;
                    goto LABEL_433;
                  }
                  if (v229 >= prime)
                    v229 %= prime;
                  *(_QWORD *)(*v202 + 8 * v229) = v218;
                  v238 = (_QWORD *)*v228;
                  if (!*v228)
                    goto LABEL_432;
                  while (1)
                  {
                    v240 = v238[1];
                    if (v240 >= prime)
                      v240 %= prime;
                    if (v240 != v229)
                    {
                      if (!*(_QWORD *)(*v202 + 8 * v240))
                      {
                        *(_QWORD *)(*v202 + 8 * v240) = v228;
                        goto LABEL_437;
                      }
                      *v228 = *v238;
                      v239 = 8 * v240;
                      *v238 = **(_QWORD **)(*v202 + v239);
                      **(_QWORD **)(*v202 + v239) = v238;
                      v238 = v228;
                    }
                    v240 = v229;
LABEL_437:
                    v228 = v238;
                    v238 = (_QWORD *)*v238;
                    v229 = v240;
                    if (!v238)
                      goto LABEL_432;
                  }
                }
LABEL_521:
                std::__throw_bad_array_new_length[abi:nn180100]();
              }
              v177 = *(_QWORD *)(*(_QWORD *)v137 + 8);
              if ((v147 & (v147 - 1)) != 0)
              {
                if (v177 >= v147)
                  v177 %= v147;
              }
              else
              {
                v177 &= v147 - 1;
              }
              v176 = (_QWORD *)(*v136 + 8 * v177);
            }
            *v176 = v137;
            goto LABEL_297;
          }
          v155 = 1;
          if (v147 >= 3)
            v155 = (v147 & (v147 - 1)) != 0;
          v156 = v155 | (2 * v147);
          v157 = vcvtps_u32_f32(v153 / v154);
          if (v156 <= v157)
            v158 = v157;
          else
            v158 = v156;
          if (v158 == 1)
          {
            v158 = 2;
          }
          else if ((v158 & (v158 - 1)) != 0)
          {
            v158 = std::__next_prime(v158);
            v147 = *(_QWORD *)(v56 + 312);
          }
          if (v158 <= v147)
          {
            if (v158 >= v147)
              goto LABEL_275;
            v169 = vcvtps_u32_f32((float)*(unint64_t *)(v56 + 328) / *(float *)(v56 + 336));
            if (v147 < 3
              || (v170 = (uint8x8_t)vcnt_s8((int8x8_t)v147), v170.i16[0] = vaddlv_u8(v170), v170.u32[0] > 1uLL))
            {
              v169 = std::__next_prime(v169);
            }
            else
            {
              v171 = 1 << -(char)__clz(v169 - 1);
              if (v169 >= 2)
                v169 = v171;
            }
            if (v158 <= v169)
              v158 = v169;
            if (v158 >= v147)
            {
              v147 = *(_QWORD *)(v56 + 312);
LABEL_275:
              if ((v147 & (v147 - 1)) != 0)
              {
                if (v146 >= v147)
                  v95 = v146 % v147;
                else
                  v95 = v146;
              }
              else
              {
                v95 = (v147 - 1) & v146;
              }
              goto LABEL_288;
            }
            if (!v158)
            {
              v276 = (_QWORD *)*v136;
              *v136 = 0;
              if (v276)
                operator delete(v276);
              v147 = 0;
              *(_QWORD *)(v56 + 312) = 0;
              goto LABEL_275;
            }
          }
          if (v158 >> 61)
            goto LABEL_521;
          v159 = operator new(8 * v158);
          v160 = (_QWORD *)*v136;
          *v136 = v159;
          if (v160)
            operator delete(v160);
          v161 = 0;
          *(_QWORD *)(v56 + 312) = v158;
          do
            *(_QWORD *)(*v136 + 8 * v161++) = 0;
          while (v158 != v161);
          v162 = (_QWORD *)*v290;
          if (!*v290)
          {
LABEL_274:
            v147 = v158;
            goto LABEL_275;
          }
          v163 = v162[1];
          v164 = v158 - 1;
          if ((v158 & (v158 - 1)) == 0)
          {
            v165 = v163 & v164;
            *(_QWORD *)(*v136 + 8 * v165) = v290;
            for (k = (_QWORD *)*v162; *v162; k = (_QWORD *)*v162)
            {
              v167 = k[1] & v164;
              if (v167 == v165)
              {
                v162 = k;
              }
              else if (*(_QWORD *)(*v136 + 8 * v167))
              {
                *v162 = *k;
                v168 = 8 * v167;
                *k = **(_QWORD **)(*v136 + v168);
                **(_QWORD **)(*v136 + v168) = k;
              }
              else
              {
                *(_QWORD *)(*v136 + 8 * v167) = v162;
                v162 = k;
                v165 = v167;
              }
            }
            goto LABEL_274;
          }
          if (v163 >= v158)
            v163 %= v158;
          *(_QWORD *)(*v136 + 8 * v163) = v290;
          v172 = (_QWORD *)*v162;
          if (!*v162)
            goto LABEL_274;
          while (1)
          {
            v174 = v172[1];
            if (v174 >= v158)
              v174 %= v158;
            if (v174 != v163)
            {
              if (!*(_QWORD *)(*v136 + 8 * v174))
              {
                *(_QWORD *)(*v136 + 8 * v174) = v162;
                goto LABEL_279;
              }
              *v162 = *v172;
              v173 = 8 * v174;
              *v172 = **(_QWORD **)(*v136 + v173);
              **(_QWORD **)(*v136 + v173) = v172;
              v172 = v162;
            }
            v174 = v163;
LABEL_279:
            v162 = v172;
            v172 = (_QWORD *)*v172;
            v163 = v174;
            if (!v172)
              goto LABEL_274;
          }
        }
        v129 = *(_QWORD *)(*(_QWORD *)v104 + 8);
        if ((v80 & (v80 - 1)) != 0)
        {
          if (v129 >= v80)
            v129 %= v80;
        }
        else
        {
          v129 &= v80 - 1;
        }
        v128 = (_QWORD *)(*v51 + 8 * v129);
      }
      *v128 = v104;
      goto LABEL_195;
    }
    v107 = 1;
    if (v80 >= 3)
      v107 = (v80 & (v80 - 1)) != 0;
    v108 = v107 | (2 * v80);
    v109 = vcvtps_u32_f32(v105 / v106);
    if (v108 <= v109)
      v110 = v109;
    else
      v110 = v108;
    if (v110 == 1)
    {
      v110 = 2;
    }
    else if ((v110 & (v110 - 1)) != 0)
    {
      v110 = std::__next_prime(v110);
      v80 = *(_QWORD *)(v46 + 192);
    }
    if (v110 <= v80)
    {
      if (v110 >= v80)
        goto LABEL_173;
      v121 = vcvtps_u32_f32((float)*(unint64_t *)(v46 + 208) / *(float *)(v46 + 216));
      if (v80 < 3 || (v122 = (uint8x8_t)vcnt_s8((int8x8_t)v80), v122.i16[0] = vaddlv_u8(v122), v122.u32[0] > 1uLL))
      {
        v121 = std::__next_prime(v121);
      }
      else
      {
        v123 = 1 << -(char)__clz(v121 - 1);
        if (v121 >= 2)
          v121 = v123;
      }
      if (v110 <= v121)
        v110 = v121;
      if (v110 >= v80)
      {
        v80 = *(_QWORD *)(v46 + 192);
LABEL_173:
        if ((v80 & (v80 - 1)) != 0)
        {
          if (v79 >= v80)
            v67 = v79 % v80;
          else
            v67 = v79;
        }
        else
        {
          v67 = (v80 - 1) & v79;
        }
        goto LABEL_186;
      }
      if (!v110)
      {
        v152 = (_QWORD *)*v51;
        *v51 = 0;
        if (v152)
          operator delete(v152);
        v80 = 0;
        *(_QWORD *)(v46 + 192) = 0;
        goto LABEL_173;
      }
    }
    if (v110 >> 61)
      goto LABEL_521;
    v111 = operator new(8 * v110);
    v112 = (_QWORD *)*v51;
    *v51 = v111;
    if (v112)
      operator delete(v112);
    v113 = 0;
    *(_QWORD *)(v46 + 192) = v110;
    do
      *(_QWORD *)(*v51 + 8 * v113++) = 0;
    while (v110 != v113);
    v114 = (_QWORD *)*v287;
    if (!*v287)
    {
LABEL_172:
      v80 = v110;
      goto LABEL_173;
    }
    v115 = v114[1];
    v116 = v110 - 1;
    if ((v110 & (v110 - 1)) == 0)
    {
      v117 = v115 & v116;
      *(_QWORD *)(*v51 + 8 * v117) = v287;
      for (m = (_QWORD *)*v114; *v114; m = (_QWORD *)*v114)
      {
        v119 = m[1] & v116;
        if (v119 == v117)
        {
          v114 = m;
        }
        else if (*(_QWORD *)(*v51 + 8 * v119))
        {
          *v114 = *m;
          v120 = 8 * v119;
          *m = **(_QWORD **)(*v51 + v120);
          **(_QWORD **)(*v51 + v120) = m;
        }
        else
        {
          *(_QWORD *)(*v51 + 8 * v119) = v114;
          v114 = m;
          v117 = v119;
        }
      }
      goto LABEL_172;
    }
    if (v115 >= v110)
      v115 %= v110;
    *(_QWORD *)(*v51 + 8 * v115) = v287;
    v124 = (_QWORD *)*v114;
    if (!*v114)
      goto LABEL_172;
    while (1)
    {
      v126 = v124[1];
      if (v126 >= v110)
        v126 %= v110;
      if (v126 != v115)
      {
        if (!*(_QWORD *)(*v51 + 8 * v126))
        {
          *(_QWORD *)(*v51 + 8 * v126) = v114;
          goto LABEL_177;
        }
        *v114 = *v124;
        v125 = 8 * v126;
        *v124 = **(_QWORD **)(*v51 + v125);
        **(_QWORD **)(*v51 + v125) = v124;
        v124 = v114;
      }
      v126 = v115;
LABEL_177:
      v114 = v124;
      v124 = (_QWORD *)*v124;
      v115 = v126;
      if (!v124)
        goto LABEL_172;
    }
  }
  v53 = v52;
  v55 = (unsigned __int8 *)v52[9];
  v54 = v52[10];
  if ((unint64_t)v55 >= v54)
  {
    v60 = v52[8];
    v61 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)&v55[-v60] >> 3) + 1;
    if (v61 > 0x186186186186186)
      abort();
    v56 = v46;
    v62 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v54 - v60) >> 3);
    if (2 * v62 > v61)
      v61 = 2 * v62;
    if (v62 >= 0xC30C30C30C30C3)
      v63 = 0x186186186186186;
    else
      v63 = v61;
    if (v63)
    {
      if (v63 > 0x186186186186186)
        goto LABEL_521;
      v64 = (char *)operator new(168 * v63);
    }
    else
    {
      v64 = 0;
    }
    v82 = (unsigned __int8 *)&v64[8 * ((uint64_t)&v55[-v60] >> 3)];
    *v82 = v43;
    v82[1] = v44;
    *(_QWORD *)(v82 + 4) = v45;
    *(_OWORD *)(v82 + 24) = *(_OWORD *)&v338[12];
    v82[40] = 0;
    v82[144] = 0;
    if ((v11 & 1) == 0)
    {
      v82[40] = v291;
      *(_OWORD *)(v82 + 41) = v330[0];
      *((_QWORD *)v82 + 7) = *(_QWORD *)((char *)v330 + 15);
      v83 = &v64[8 * ((uint64_t)&v55[-v60] >> 3)];
      *((_OWORD *)v83 + 4) = v328;
      *((double *)v83 + 10) = v329;
      *((double *)v83 + 11) = v4;
      v84 = v319;
      *((_OWORD *)v83 + 6) = v318;
      *((_OWORD *)v83 + 7) = v84;
      *((_OWORD *)v83 + 8) = v320;
      v82[144] = 1;
    }
    v85 = (float *)&v64[8 * ((uint64_t)&v55[-v60] >> 3)];
    *((_BYTE *)v85 + 152) = v286;
    v86 = &v64[168 * v63];
    v85[39] = a4;
    *((_BYTE *)v85 + 160) = v284;
    v58 = v82 + 168;
    if (v55 != (unsigned __int8 *)v60)
    {
      v87 = 0;
      do
      {
        v89 = (char *)&v82[v87];
        v90 = &v55[v87];
        *((_WORD *)v89 - 84) = *(_WORD *)&v55[v87 - 168];
        *(_QWORD *)(v89 - 164) = *(_QWORD *)&v55[v87 - 164];
        *((_OWORD *)v89 - 9) = *(_OWORD *)&v55[v87 - 144];
        v82[v87 - 128] = 0;
        *(v89 - 24) = 0;
        if (v55[v87 - 24])
        {
          v91 = *((_OWORD *)v90 - 8);
          *(_QWORD *)&v82[v87 - 112] = *((_QWORD *)v90 - 14);
          *(_OWORD *)&v82[v87 - 128] = v91;
          v92 = *(_OWORD *)(v90 - 104);
          *((_QWORD *)v89 - 11) = *((_QWORD *)v90 - 11);
          *(_OWORD *)(v89 - 104) = v92;
          *((_QWORD *)v89 - 10) = *((_QWORD *)v90 - 10);
          v93 = *(_OWORD *)(v90 - 72);
          v94 = *(_OWORD *)(v90 - 56);
          *(_OWORD *)(v89 - 40) = *(_OWORD *)(v90 - 40);
          *(_OWORD *)(v89 - 56) = v94;
          *(_OWORD *)(v89 - 72) = v93;
          *(v89 - 24) = 1;
        }
        v88 = *((_QWORD *)v90 - 2);
        *(v89 - 8) = *(v90 - 8);
        *((_QWORD *)v89 - 2) = v88;
        v87 -= 168;
      }
      while (&v55[v87] != (unsigned __int8 *)v60);
      v82 += v87;
      v55 = (unsigned __int8 *)v53[8];
    }
    v53[8] = (uint64_t)v82;
    v53[9] = (uint64_t)v58;
    v53[10] = (uint64_t)v86;
    a2 = v296;
    if (v55)
      operator delete(v55);
  }
  else
  {
    *v55 = v43;
    v55[1] = v44;
    *(_QWORD *)(v55 + 4) = v45;
    *(_OWORD *)(v55 + 24) = *(_OWORD *)&v338[12];
    v55[40] = 0;
    v55[144] = 0;
    v56 = v46;
    if ((v11 & 1) == 0)
    {
      v55[40] = v291;
      *(_OWORD *)(v55 + 41) = v330[0];
      *((_QWORD *)v55 + 7) = *(_QWORD *)((char *)v330 + 15);
      *((_OWORD *)v55 + 4) = v328;
      *((double *)v55 + 10) = v329;
      *((double *)v55 + 11) = v4;
      v57 = v319;
      *((_OWORD *)v55 + 6) = v318;
      *((_OWORD *)v55 + 7) = v57;
      *((_OWORD *)v55 + 8) = v320;
      v55[144] = 1;
    }
    v55[152] = v286;
    *((float *)v55 + 39) = a4;
    v58 = v55 + 168;
    v55[160] = v284;
  }
  v53[9] = (uint64_t)v58;
  v95 = (unint64_t)v297;
  if (v298)
    goto LABEL_199;
  return std::__tree<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare,std::allocator<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo>>::__emplace_unique_key_args<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo const&>(*(uint64_t ***)(a1 + 8), (uint64_t)a2, (uint64_t)a2);
}

void sub_19FD29750(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::vector<md::MeshRenderable *>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::vector<md::MeshRenderable *>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)&STACK[0x350]);
  _Unwind_Resume(a1);
}

void sub_19FD29764(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<md::FlyoverOctileWorld,std::pair<std::vector<md::MeshRenderable *>,std::vector<md::FlyoverOctile>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::FlyoverOctileWorld,std::pair<std::vector<md::MeshRenderable *>,std::vector<md::FlyoverOctile>>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)&STACK[0x2B8]);
  md::TileAdjustmentHelpers::~TileAdjustmentHelpers((md::TileAdjustmentHelpers *)&STACK[0x350]);
  _Unwind_Resume(a1);
}

BOOL md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare::operator()(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;
  char v6;
  int v7;
  unsigned int v9;
  unsigned int v10;
  _BOOL4 v11;
  unint64_t v12;
  _BOOL4 v14;
  _BOOL4 v15;
  int v16;
  unint64_t v17;
  int v18;
  int v19;

  v2 = *(_QWORD *)(a1 + 160);
  v3 = *(_QWORD *)(a2 + 160);
  if (v2 != v3)
  {
    v9 = *(unsigned __int8 *)(a1 + 208);
    v10 = *(unsigned __int8 *)(a2 + 208);
LABEL_8:
    v11 = v2 < v3;
    v12 = v2 >> (3 * (v9 - v10));
    v14 = v2 != v12 && v12 < v3;
    if (v9 > v10)
      v11 = v14;
    v15 = v2 <= v3 >> (3 * (v10 - v9));
    if (v9 < v10)
      return v15;
    else
      return v11;
  }
  v2 = *(_QWORD *)(a1 + 104);
  v3 = *(_QWORD *)(a2 + 104);
  if (v2 != v3)
  {
    v9 = *(unsigned __int8 *)(a1 + 152);
    v10 = *(unsigned __int8 *)(a2 + 152);
    goto LABEL_8;
  }
  v4 = *(unsigned __int8 *)(a1 + 224);
  v5 = *(unsigned __int8 *)(a2 + 224);
  v6 = v4 - v5;
  if (v4 >= v5)
  {
    if (v4 <= v5)
    {
      v18 = *(unsigned __int8 *)(a1 + 225);
      v19 = *(unsigned __int8 *)(a2 + 225);
      if (v18 != v19)
        return (char)v18 < (char)v19;
      v17 = *(_QWORD *)(a1 + 216);
    }
    else
    {
      v16 = *(unsigned __int8 *)(a2 + 225);
      if (v16 != BYTE1(*(_QWORD *)(a1 + 224)))
        return (char)v16 > (char)BYTE1(*(_QWORD *)(a1 + 224));
      v17 = *(_QWORD *)(a1 + 216) >> (2 * v6);
    }
    return v17 < *(_QWORD *)(a2 + 216);
  }
  v7 = *(unsigned __int8 *)(a1 + 225);
  if (v7 == BYTE1(*(_QWORD *)(a2 + 224)))
    return *(_QWORD *)(a1 + 216) <= *(_QWORD *)(a2 + 216) >> (2 * (v5 - v4));
  else
    return (char)v7 < (char)BYTE1(*(_QWORD *)(a2 + 224));
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__list_iterator<geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::CacheEntry,void *>>,std::__unordered_map_hasher<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__list_iterator<geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::CacheEntry,void *>>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>,true>,std::__unordered_map_equal<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__list_iterator<geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::CacheEntry,void *>>,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>,md::FlyoverOctilePairHash,true>,std::allocator<std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__list_iterator<geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::CacheEntry,void *>>>>::find<std::pair<md::FlyoverOctile,md::FlyoverOctile>>(_QWORD *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  int8x8_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v2 = 2 * *(_QWORD *)(a2 + 28);
  if ((*(_QWORD *)(a2 + 28) & 0xFF00000000) == 0)
    v2 = 0;
  if ((*(_QWORD *)(a2 + 68) & 0xFF00000000) != 0)
    v3 = 2 * *(_QWORD *)(a2 + 68);
  else
    v3 = 0;
  v4 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v4)
    return 0;
  v6 = (a2[1]
      + ((*a2 - 0x61C8864680B583EBLL) << 6)
      + (((unint64_t)*a2 - 0x61C8864680B583EBLL) >> 2)
      - 0x61C8864680B583EBLL) ^ (*a2 - 0x61C8864680B583EBLL);
  v7 = (*((int *)a2 + 1) + (v6 << 6) + (v6 >> 2) - 0x61C8864680B583EBLL) ^ v6;
  v8 = (v2 | ((unint64_t)*((unsigned int *)a2 + 9) << 33)) ^ v7 ^ (*((int *)a2 + 2)
                                                                        + (v7 << 6)
                                                                        + (v7 >> 2)
                                                                        - 0x61C8864680B583EBLL);
  v9 = (a2[41]
      + ((a2[40] - 0x61C8864680B583EBLL) << 6)
      + (((unint64_t)a2[40] - 0x61C8864680B583EBLL) >> 2)
      - 0x61C8864680B583EBLL) ^ (a2[40] - 0x61C8864680B583EBLL);
  v10 = (*((int *)a2 + 11) + (v9 << 6) + (v9 >> 2) - 0x61C8864680B583EBLL) ^ v9;
  v11 = ((v8 << 6)
       + (v8 >> 2)
       + ((v3 | ((unint64_t)*((unsigned int *)a2 + 19) << 33)) ^ v10 ^ (*((int *)a2 + 12)
                                                                             + (v10 << 6)
                                                                             + (v10 >> 2)
                                                                             - 0x61C8864680B583EBLL))
       - 0x61C8864680B583EBLL) ^ v8;
  v12 = (uint8x8_t)vcnt_s8(v4);
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.u32[0] > 1uLL)
  {
    v13 = ((v8 << 6)
         + (v8 >> 2)
         + ((v3 | ((unint64_t)*((unsigned int *)a2 + 19) << 33)) ^ v10 ^ (*((int *)a2 + 12)
                                                                               + (v10 << 6)
                                                                               + (v10 >> 2)
                                                                               - 0x61C8864680B583EBLL))
         - 0x61C8864680B583EBLL) ^ v8;
    if (v11 >= *(_QWORD *)&v4)
      v13 = v11 % *(_QWORD *)&v4;
  }
  else
  {
    v13 = v11 & (*(_QWORD *)&v4 - 1);
  }
  v14 = *(unsigned __int8 ***)(*a1 + 8 * v13);
  if (!v14)
    return 0;
  v15 = *v14;
  if (*v14)
  {
    if (v12.u32[0] < 2uLL)
    {
      v16 = *(_QWORD *)&v4 - 1;
      while (1)
      {
        v18 = *((_QWORD *)v15 + 1);
        if (v18 == v11)
        {
          if (std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>::operator()[abi:nn180100](v15 + 16, a2))
            return v15;
        }
        else if ((v18 & v16) != v13)
        {
          return 0;
        }
        v15 = *(unsigned __int8 **)v15;
        if (!v15)
          return v15;
      }
    }
    do
    {
      v17 = *((_QWORD *)v15 + 1);
      if (v17 == v11)
      {
        if (std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>::operator()[abi:nn180100](v15 + 16, a2))
          return v15;
      }
      else
      {
        if (v17 >= *(_QWORD *)&v4)
          v17 %= *(_QWORD *)&v4;
        if (v17 != v13)
          return 0;
      }
      v15 = *(unsigned __int8 **)v15;
    }
    while (v15);
  }
  return v15;
}

char *geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::_elementAccessed(char *a1, char *a2)
{
  char *v4;
  char v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;

  v4 = (char *)operator new(0x80uLL);
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = a2[17];
  v4[16] = a2[16];
  v4[17] = v5;
  *(_QWORD *)(v4 + 20) = *(_QWORD *)(a2 + 20);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 40);
  *((_WORD *)v4 + 28) = *((_WORD *)a2 + 28);
  *(_QWORD *)(v4 + 60) = *(_QWORD *)(a2 + 60);
  *((_OWORD *)v4 + 5) = *((_OWORD *)a2 + 5);
  v6 = (uint64_t *)(a2 + 96);
  std::list<md::FlyoverDynamicGeometry>::list((uint64_t *)v4 + 12, (uint64_t)(a2 + 96));
  *((_QWORD *)v4 + 15) = *((_QWORD *)a2 + 15);
  v7 = *(_QWORD *)a1;
  *(_QWORD *)(v7 + 8) = v4;
  *(_QWORD *)a1 = v4;
  *(_QWORD *)v4 = v7;
  *((_QWORD *)v4 + 1) = a1;
  v8 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v8 + 1;
  v9 = (char *)*((_QWORD *)a1 + 8);
  if (v9 == a2)
  {
    v10 = (char *)*((_QWORD *)a2 + 1);
LABEL_5:
    *((_QWORD *)a1 + 8) = v10;
    goto LABEL_6;
  }
  v10 = v4;
  if (v9 == a1)
    goto LABEL_5;
LABEL_6:
  v11 = *(_QWORD *)a2;
  *(_QWORD *)(v11 + 8) = *((_QWORD *)a2 + 1);
  **((_QWORD **)a2 + 1) = v11;
  *((_QWORD *)a1 + 2) = v8;
  if (*((_QWORD *)a2 + 14))
  {
    v13 = *((_QWORD *)a2 + 12);
    v12 = (uint64_t *)*((_QWORD *)a2 + 13);
    v14 = *v12;
    *(_QWORD *)(v14 + 8) = *(_QWORD *)(v13 + 8);
    **(_QWORD **)(v13 + 8) = v14;
    *((_QWORD *)a2 + 14) = 0;
    if (v12 != v6)
    {
      do
      {
        v15 = (uint64_t *)v12[1];
        std::__list_imp<md::FlyoverDynamicGeometry>::__delete_node[abi:nn180100]<>(v12);
        v12 = v15;
      }
      while (v15 != v6);
    }
  }
  operator delete(a2);
  return v4;
}

void sub_19FD29C30(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<md::FlyoverOctileWorld,std::vector<md::FlyoverOctileInstance>>,std::__unordered_map_hasher<md::FlyoverOctileWorld,std::__hash_value_type<md::FlyoverOctileWorld,std::vector<md::FlyoverOctileInstance>>,md::FlyoverOctileWorldHash,std::equal_to<md::FlyoverOctileWorld>,true>,std::__unordered_map_equal<md::FlyoverOctileWorld,std::__hash_value_type<md::FlyoverOctileWorld,std::vector<md::FlyoverOctileInstance>>,std::equal_to<md::FlyoverOctileWorld>,md::FlyoverOctileWorldHash,true>,std::allocator<std::__hash_value_type<md::FlyoverOctileWorld,std::vector<md::FlyoverOctileInstance>>>>::find<md::FlyoverOctileWorld>(_QWORD *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int8x8_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint8x8_t v15;
  unint64_t v16;
  uint64_t **v17;
  uint64_t *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *result;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;

  v2 = *(_QWORD *)(a2 + 28);
  v3 = v2 & 0xFF00000000;
  if ((v2 & 0xFF00000000) != 0)
    v4 = 2 * *(_QWORD *)(a2 + 28);
  else
    v4 = 0;
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = *a2;
  v7 = a2[1];
  v8 = (v7
      + ((v6 - 0x61C8864680B583EBLL) << 6)
      + ((unint64_t)(v6 - 0x61C8864680B583EBLL) >> 2)
      - 0x61C8864680B583EBLL) ^ (v6 - 0x61C8864680B583EBLL);
  v9 = *((int *)a2 + 1);
  v10 = *((int *)a2 + 2);
  v11 = (v9 + (v8 << 6) + (v8 >> 2) - 0x61C8864680B583EBLL) ^ v8;
  v12 = *((unsigned int *)a2 + 9);
  v13 = (v4 | (v12 << 33)) ^ v11 ^ (v10 + (v11 << 6) + (v11 >> 2) - 0x61C8864680B583EBLL);
  v14 = ((char)a2[40] + (v13 << 6) + (v13 >> 2) - 0x61C8864680B583EBLL) ^ v13;
  v15 = (uint8x8_t)vcnt_s8(v5);
  v15.i16[0] = vaddlv_u8(v15);
  if (v15.u32[0] > 1uLL)
  {
    v16 = v14;
    if (v14 >= *(_QWORD *)&v5)
      v16 = v14 % *(_QWORD *)&v5;
  }
  else
  {
    v16 = v14 & (*(_QWORD *)&v5 - 1);
  }
  v17 = *(uint64_t ***)(*a1 + 8 * v16);
  if (!v17)
    return 0;
  v18 = *v17;
  if (!v18)
    return 0;
  v19 = a2[40];
  v20 = a2[24];
  if (v15.u32[0] <= 1uLL)
  {
    v21 = *(_QWORD *)&v5 - 1;
    if (!v3)
    {
      while (1)
      {
        v24 = v18[1];
        if (v24 == v14)
        {
          if (*((unsigned __int8 *)v18 + 40) == v20
            && *((unsigned __int8 *)v18 + 16) == (_DWORD)v6
            && *((unsigned __int8 *)v18 + 17) == (_DWORD)v7
            && *((_DWORD *)v18 + 5) == (_DWORD)v9
            && *((_DWORD *)v18 + 6) == (_DWORD)v10
            && *((_DWORD *)v18 + 13) == (_DWORD)v12
            && !*((_BYTE *)v18 + 48)
            && *((unsigned __int8 *)v18 + 56) == v19)
          {
            return v18;
          }
        }
        else if ((v24 & v21) != v16)
        {
          return 0;
        }
        result = 0;
        v18 = (uint64_t *)*v18;
        if (!v18)
          return result;
      }
    }
    while (1)
    {
      v22 = v18[1];
      if (v22 == v14)
      {
        if (*((unsigned __int8 *)v18 + 40) == v20
          && *((unsigned __int8 *)v18 + 16) == (_DWORD)v6
          && *((unsigned __int8 *)v18 + 17) == (_DWORD)v7
          && *((_DWORD *)v18 + 5) == (_DWORD)v9
          && *((_DWORD *)v18 + 6) == (_DWORD)v10
          && *((_DWORD *)v18 + 13) == (_DWORD)v12
          && *((_BYTE *)v18 + 48)
          && *((_DWORD *)v18 + 11) == (_DWORD)v2
          && *((unsigned __int8 *)v18 + 56) == v19)
        {
          return v18;
        }
      }
      else if ((v22 & v21) != v16)
      {
        return 0;
      }
      v18 = (uint64_t *)*v18;
      if (!v18)
        return 0;
    }
  }
  if (!v3)
  {
    while (1)
    {
      v26 = v18[1];
      if (v26 == v14)
      {
        if (*((unsigned __int8 *)v18 + 40) == v20
          && __PAIR64__(*((unsigned __int8 *)v18 + 17), *((unsigned __int8 *)v18 + 16)) == __PAIR64__(v7, v6)
          && *(uint64_t *)((char *)v18 + 20) == __PAIR64__(v10, v9)
          && *((_DWORD *)v18 + 13) == (_DWORD)v12
          && !*((_BYTE *)v18 + 48)
          && *((unsigned __int8 *)v18 + 56) == v19)
        {
          return v18;
        }
      }
      else
      {
        if (v26 >= *(_QWORD *)&v5)
          v26 %= *(_QWORD *)&v5;
        if (v26 != v16)
          return 0;
      }
      result = 0;
      v18 = (uint64_t *)*v18;
      if (!v18)
        return result;
    }
  }
  while (1)
  {
    v25 = v18[1];
    if (v25 == v14)
      break;
    if (v25 >= *(_QWORD *)&v5)
      v25 %= *(_QWORD *)&v5;
    if (v25 != v16)
      return 0;
LABEL_43:
    v18 = (uint64_t *)*v18;
    if (!v18)
      return 0;
  }
  if (*((unsigned __int8 *)v18 + 40) != v20
    || __PAIR64__(*((unsigned __int8 *)v18 + 17), *((unsigned __int8 *)v18 + 16)) != __PAIR64__(v7, v6)
    || *(uint64_t *)((char *)v18 + 20) != __PAIR64__(v10, v9)
    || *((_DWORD *)v18 + 13) != (_DWORD)v12
    || !*((_BYTE *)v18 + 48)
    || *((_DWORD *)v18 + 11) != (_DWORD)v2
    || *((unsigned __int8 *)v18 + 56) != v19)
  {
    goto LABEL_43;
  }
  return v18;
}

uint64_t *std::__tree<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare,std::allocator<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo>>::__emplace_unique_key_args<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo const&>(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v8;
  uint64_t v9;
  uint64_t *result;
  char *v11;
  uint64_t *v12;
  uint64_t *v13;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = (uint64_t)(v5 + 4);
        if (!md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare::operator()(a2, (uint64_t)(v5 + 4)))
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_9;
      }
      result = (uint64_t *)md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare::operator()(v9, a2);
      if (!(_DWORD)result)
        break;
      v6 = v8 + 1;
      v5 = v8[1];
      if (!v5)
        goto LABEL_9;
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_9:
    v11 = (char *)operator new(0x108uLL);
    *((_WORD *)v11 + 16) = *(_WORD *)a3;
    *(_QWORD *)(v11 + 36) = *(_QWORD *)(a3 + 4);
    *(_OWORD *)(v11 + 56) = *(_OWORD *)(a3 + 24);
    *((_WORD *)v11 + 36) = *(_WORD *)(a3 + 40);
    *(_QWORD *)(v11 + 76) = *(_QWORD *)(a3 + 44);
    *((_OWORD *)v11 + 6) = *(_OWORD *)(a3 + 64);
    *((_WORD *)v11 + 56) = *(_WORD *)(a3 + 80);
    *(_QWORD *)(v11 + 116) = *(_QWORD *)(a3 + 84);
    *((_QWORD *)v11 + 17) = *(_QWORD *)(a3 + 104);
    *((_WORD *)v11 + 72) = *(_WORD *)(a3 + 112);
    *(_QWORD *)(v11 + 148) = *(_QWORD *)(a3 + 116);
    *(_OWORD *)(v11 + 168) = *(_OWORD *)(a3 + 136);
    v11[184] = *(_BYTE *)(a3 + 152);
    *((_QWORD *)v11 + 24) = *(_QWORD *)(a3 + 160);
    *((_WORD *)v11 + 100) = *(_WORD *)(a3 + 168);
    *(_QWORD *)(v11 + 204) = *(_QWORD *)(a3 + 172);
    *((_OWORD *)v11 + 14) = *(_OWORD *)(a3 + 192);
    v11[240] = *(_BYTE *)(a3 + 208);
    *(_OWORD *)(v11 + 248) = *(_OWORD *)(a3 + 216);
    *(_QWORD *)v11 = 0;
    *((_QWORD *)v11 + 1) = 0;
    *((_QWORD *)v11 + 2) = v8;
    *v6 = (uint64_t *)v11;
    v12 = (uint64_t *)**a1;
    if (v12)
    {
      *a1 = v12;
      v13 = *v6;
    }
    else
    {
      v13 = (uint64_t *)v11;
    }
    result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return result;
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<md::FlyoverOctileWorld,std::pair<std::vector<md::MeshRenderable *>,std::vector<md::FlyoverOctile>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::FlyoverOctileWorld,std::pair<std::vector<md::MeshRenderable *>,std::vector<md::FlyoverOctile>>>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  void *v4;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (void *)v2[11];
      if (v3)
      {
        v2[12] = v3;
        operator delete(v3);
      }
      v4 = (void *)v2[8];
      if (v4)
      {
        v2[9] = v4;
        operator delete(v4);
      }
    }
    operator delete(v2);
  }
  return a1;
}

BOOL std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>::operator()[abi:nn180100](unsigned __int8 *a1, unsigned __int8 *a2)
{
  _BOOL8 v2;

  if (a1[24] != a2[24]
    || *a1 != *a2
    || a1[1] != a2[1]
    || *((_DWORD *)a1 + 1) != *((_DWORD *)a2 + 1)
    || *((_DWORD *)a1 + 2) != *((_DWORD *)a2 + 2)
    || *((_DWORD *)a1 + 9) != *((_DWORD *)a2 + 9))
  {
    return 0;
  }
  if (a1[32] && a2[32])
  {
    if (*((_DWORD *)a1 + 7) != *((_DWORD *)a2 + 7))
      return 0;
  }
  else if ((a1[32] != 0) != (a2[32] != 0))
  {
    return 0;
  }
  if (a1[64] != a2[64]
    || a1[40] != a2[40]
    || a1[41] != a2[41]
    || *((_DWORD *)a1 + 11) != *((_DWORD *)a2 + 11)
    || *((_DWORD *)a1 + 12) != *((_DWORD *)a2 + 12)
    || *((_DWORD *)a1 + 19) != *((_DWORD *)a2 + 19))
  {
    return 0;
  }
  v2 = (a1[72] != 0) == (a2[72] != 0);
  if (a1[72])
  {
    if (a2[72])
      return *((_DWORD *)a1 + 17) == *((_DWORD *)a2 + 17);
  }
  return v2;
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::vector<md::MeshRenderable *>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::vector<md::MeshRenderable *>>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  _QWORD *v2;
  void *v3;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (void *)v2[12];
      if (v3)
      {
        v2[13] = v3;
        operator delete(v3);
      }
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<md::FlyoverOctileWorld,std::vector<md::FlyoverOctileInstance>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::FlyoverOctileWorld,std::vector<md::FlyoverOctileInstance>>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  _QWORD *v2;
  void *v3;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (void *)v2[8];
      if (v3)
      {
        v2[9] = v3;
        operator delete(v3);
      }
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t *std::list<md::FlyoverDynamicGeometry>::list(uint64_t *a1, uint64_t a2)
{
  uint64_t i;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  for (i = *(_QWORD *)(a2 + 8); i != a2; i = *(_QWORD *)(i + 8))
  {
    v6 = operator new(0x48uLL);
    v7 = *(_QWORD *)(i + 24);
    v6[2] = *(_QWORD *)(i + 16);
    v6[3] = v7;
    if (v7)
    {
      v8 = (unint64_t *)(v7 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    v10 = *(_QWORD *)(i + 40);
    v6[4] = *(_QWORD *)(i + 32);
    v6[5] = v10;
    if (v10)
    {
      v11 = (unint64_t *)(v10 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    v13 = *(_QWORD *)(i + 56);
    v6[6] = *(_QWORD *)(i + 48);
    v6[7] = v13;
    if (v13)
    {
      v14 = (unint64_t *)(v13 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    *((_BYTE *)v6 + 64) = *(_BYTE *)(i + 64);
    v5 = *a1;
    *v6 = *a1;
    v6[1] = a1;
    *(_QWORD *)(v5 + 8) = v6;
    *a1 = (uint64_t)v6;
    ++a1[2];
  }
  return a1;
}

void sub_19FD2A41C(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;

  if (v3)
  {
    v5 = (uint64_t *)v1[1];
    v6 = *v5;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(v2 + 8);
    **(_QWORD **)(v2 + 8) = v6;
    v1[2] = 0;
    if (v5 != v1)
    {
      do
      {
        v7 = (uint64_t *)v5[1];
        std::__list_imp<md::FlyoverDynamicGeometry>::__delete_node[abi:nn180100]<>(v5);
        v5 = v7;
      }
      while (v7 != v1);
    }
  }
  _Unwind_Resume(exception_object);
}

void std::__list_imp<md::FlyoverDynamicGeometry>::__delete_node[abi:nn180100]<>(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (std::__shared_weak_count *)__p[7];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)__p[5];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[5];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)__p[3];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  operator delete(__p);
}

double md::FlyoverCompleteTileDataLogic::getTileBounds(uint64_t a1, uint64_t a2, QuadTile ***a3, unsigned __int8 *a4, int a5)
{
  double v5;
  double v6;
  uint64_t *v11;
  void **v12;
  uint64_t *v13;
  double *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  _BOOL4 v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  char *v32;
  unsigned __int8 v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint8x8_t v50;
  unint64_t v51;
  uint64_t **v52;
  uint64_t *v53;
  int v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  float v61;
  float v62;
  _BOOL8 v63;
  unint64_t v64;
  unint64_t v65;
  size_t prime;
  void *v67;
  void *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  size_t v72;
  size_t v73;
  size_t v74;
  _QWORD *i;
  size_t v76;
  uint64_t v77;
  unint64_t v78;
  uint8x8_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  size_t v83;
  _QWORD *v84;
  _QWORD *v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t *v89;
  float v90;
  float v91;
  __int128 v92;
  double result;
  void *v94;
  unint64_t v95;
  uint64_t v96;
  void *v97[2];
  __int128 v98;
  int64x2_t v99;
  void *__p[2];
  _BYTE v101[40];

  if (a5 == 2)
  {
    v5 = 22000.0;
    v6 = -22000.0;
    goto LABEL_157;
  }
  v11 = (uint64_t *)(a2 + 440);
  v12 = (void **)(a2 + 400);
  v13 = std::__hash_table<std::__hash_value_type<md::FlyoverOctile,std::__list_iterator<std::pair<md::FlyoverOctile,geo::OrientedBox<double,3u,double,double>>,void *>>,std::__unordered_map_hasher<md::FlyoverOctile,std::__hash_value_type<md::FlyoverOctile,std::__list_iterator<std::pair<md::FlyoverOctile,geo::OrientedBox<double,3u,double,double>>,void *>>,md::FlyoverOctileHash,std::equal_to<md::FlyoverOctile>,true>,std::__unordered_map_equal<md::FlyoverOctile,std::__hash_value_type<md::FlyoverOctile,std::__list_iterator<std::pair<md::FlyoverOctile,geo::OrientedBox<double,3u,double,double>>,void *>>,std::equal_to<md::FlyoverOctile>,md::FlyoverOctileHash,true>,std::allocator<std::__hash_value_type<md::FlyoverOctile,std::__list_iterator<std::pair<md::FlyoverOctile,geo::OrientedBox<double,3u,double,double>>,void *>>>>::find<md::FlyoverOctile>((_QWORD *)(a2 + 400), a4);
  if (v13)
  {
    v14 = *(double **)(a2 + 448);
    v15 = (uint64_t *)v13[7];
    if (v14 != (double *)v15)
    {
      v16 = (uint64_t *)v15[1];
      if (v16 != (uint64_t *)v14)
      {
        v17 = *v15;
        *(_QWORD *)(v17 + 8) = v16;
        *(_QWORD *)v15[1] = v17;
        v18 = *v14;
        *(_QWORD *)(*(_QWORD *)&v18 + 8) = v15;
        *(double *)v15 = v18;
        *(_QWORD *)v14 = v15;
        v15[1] = (uint64_t)v14;
        v14 = *(double **)(a2 + 448);
      }
    }
    if (v14 != (double *)v11)
    {
      v6 = v14[7];
      v5 = v14[8];
      goto LABEL_157;
    }
  }
  md::FlyoverMetaData::elevationBoundsForHeightTile((md::FlyoverMetaData *)__p, **a3, (uint64_t)a4, *((unsigned int *)a4 + 9));
  if (LOBYTE(__p[0]))
  {
    v6 = *(double *)&__p[1];
    v5 = *(double *)v101;
    goto LABEL_31;
  }
  md::World::getDsmTileData((md::World *)v97, *(const QuadTile **)(*(_QWORD *)(a2 + 168) + 80), *(const QuadTile **)(*(_QWORD *)(a2 + 168) + 88), (int *)a4);
  if (v97[0]
    && ((v19 = 720, *((_QWORD *)v97[0] + 90))
      ? (v20 = (unint64_t *)((char *)v97[0] + 720))
      : (v19 = 736, v20 = (unint64_t *)((char *)v97[0] + 736)),
        (v21 = *(_QWORD *)((char *)v97[0] + v19)) != 0))
  {
    if (*(_BYTE *)(v21 + 24) == 8)
      v22 = md::FlyoverDsmTileData::_heightBounds<unsigned char>((uint64_t)v97[0], (uint64_t)a4, v20);
    else
      v22 = md::FlyoverDsmTileData::_heightBounds<unsigned short>((uint64_t)v97[0], (uint64_t)a4, v20);
    if (v23)
      v6 = *(float *)&v22;
    else
      v6 = *((float *)&v22 + 1);
    v5 = *((float *)&v22 + 1);
    v24 = v23 == 0;
    v25 = (std::__shared_weak_count *)v97[1];
    if (v97[1])
    {
LABEL_25:
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldaxr(p_shared_owners);
      while (__stlxr(v27 - 1, p_shared_owners));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
  }
  else
  {
    v24 = 1;
    v25 = (std::__shared_weak_count *)v97[1];
    if (v97[1])
      goto LABEL_25;
  }
  if (v24)
  {
    v5 = 22000.0;
    v6 = -22000.0;
  }
LABEL_31:
  v28 = std::__hash_table<std::__hash_value_type<md::FlyoverOctile,std::__list_iterator<std::pair<md::FlyoverOctile,geo::OrientedBox<double,3u,double,double>>,void *>>,std::__unordered_map_hasher<md::FlyoverOctile,std::__hash_value_type<md::FlyoverOctile,std::__list_iterator<std::pair<md::FlyoverOctile,geo::OrientedBox<double,3u,double,double>>,void *>>,md::FlyoverOctileHash,std::equal_to<md::FlyoverOctile>,true>,std::__unordered_map_equal<md::FlyoverOctile,std::__hash_value_type<md::FlyoverOctile,std::__list_iterator<std::pair<md::FlyoverOctile,geo::OrientedBox<double,3u,double,double>>,void *>>,std::equal_to<md::FlyoverOctile>,md::FlyoverOctileHash,true>,std::allocator<std::__hash_value_type<md::FlyoverOctile,std::__list_iterator<std::pair<md::FlyoverOctile,geo::OrientedBox<double,3u,double,double>>,void *>>>>::find<md::FlyoverOctile>(v12, a4);
  if (v28)
  {
    v29 = v28;
    v30 = (uint64_t *)v28[7];
    v31 = *v30;
    *(_QWORD *)(v31 + 8) = v30[1];
    *(_QWORD *)v30[1] = v31;
    --*(_QWORD *)(a2 + 456);
    operator delete(v30);
    std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, v12, v29);
    if (__p[0])
      operator delete(__p[0]);
  }
  v32 = (char *)operator new(0x48uLL);
  v33 = a4[1];
  v34 = *a4;
  v32[16] = v34;
  v32[17] = v33;
  v35 = *(_QWORD *)(a4 + 4);
  *(_QWORD *)(v32 + 20) = v35;
  v36 = a4 + 24;
  *(_OWORD *)(v32 + 40) = *(_OWORD *)(a4 + 24);
  *((double *)v32 + 7) = v6;
  *((double *)v32 + 8) = v5;
  v37 = *(_QWORD **)(a2 + 448);
  *(_QWORD *)v32 = v11;
  *((_QWORD *)v32 + 1) = v37;
  *v37 = v32;
  v38 = *(_QWORD *)(a2 + 456) + 1;
  *(_QWORD *)(a2 + 448) = v32;
  *(_QWORD *)(a2 + 456) = v38;
  v39 = a4[1];
  v40 = (v39
       + ((v34 - 0x61C8864680B583EBLL) << 6)
       + ((unint64_t)(v34 - 0x61C8864680B583EBLL) >> 2)
       - 0x61C8864680B583EBLL) ^ (v34 - 0x61C8864680B583EBLL);
  v41 = ((v40 << 6) + (int)v35 + (v40 >> 2) - 0x61C8864680B583EBLL) ^ v40;
  v42 = (v41 << 6) + SHIDWORD(v35) + (v41 >> 2) - 0x61C8864680B583EBLL;
  v43 = *((unsigned int *)a4 + 9);
  v44 = *(_QWORD *)(a4 + 28);
  v45 = v44 & 0xFF00000000;
  v46 = 2 * v44;
  if ((v44 & 0xFF00000000) == 0)
    v46 = 0;
  v47 = (v46 | (v43 << 33)) ^ v41;
  v48 = v47 ^ v42;
  v49 = *(_QWORD *)(a2 + 408);
  v96 = v35;
  if (v49)
  {
    v50 = (uint8x8_t)vcnt_s8((int8x8_t)v49);
    v50.i16[0] = vaddlv_u8(v50);
    if (v50.u32[0] > 1uLL)
    {
      v51 = v47 ^ v42;
      if (v48 >= v49)
        v51 = v48 % v49;
    }
    else
    {
      v51 = v48 & (v49 - 1);
    }
    v52 = (uint64_t **)*((_QWORD *)*v12 + v51);
    v95 = v51;
    if (v52)
    {
      v53 = *v52;
      if (v53)
      {
        v54 = *v36;
        if (v50.u32[0] <= 1uLL)
        {
          v55 = v49 - 1;
          if (!v45)
          {
            while (1)
            {
              v57 = v53[1];
              if (v57 == v48)
              {
                if (*((unsigned __int8 *)v53 + 40) == v54
                  && __PAIR64__(*((unsigned __int8 *)v53 + 17), *((unsigned __int8 *)v53 + 16)) == __PAIR64__(v39, v34)
                  && *(uint64_t *)((char *)v53 + 20) == v35
                  && *((_DWORD *)v53 + 13) == (_DWORD)v43
                  && !*((_BYTE *)v53 + 48))
                {
                  goto LABEL_151;
                }
              }
              else if ((v57 & v55) != v51)
              {
                goto LABEL_91;
              }
              v53 = (uint64_t *)*v53;
              if (!v53)
                goto LABEL_91;
            }
          }
          while (1)
          {
            v56 = v53[1];
            if (v56 == v48)
            {
              if (*((unsigned __int8 *)v53 + 40) == v54
                && __PAIR64__(*((unsigned __int8 *)v53 + 17), *((unsigned __int8 *)v53 + 16)) == __PAIR64__(v39, v34)
                && *(uint64_t *)((char *)v53 + 20) == v35
                && *((_DWORD *)v53 + 13) == (_DWORD)v43
                && *((_BYTE *)v53 + 48)
                && *((_DWORD *)v53 + 11) == (_DWORD)v44)
              {
                goto LABEL_151;
              }
            }
            else if ((v56 & v55) != v51)
            {
              goto LABEL_91;
            }
            v53 = (uint64_t *)*v53;
            if (!v53)
              goto LABEL_91;
          }
        }
        if (!v45)
        {
          while (1)
          {
            v59 = v53[1];
            if (v59 == v48)
            {
              if (*((unsigned __int8 *)v53 + 40) == v54
                && __PAIR64__(*((unsigned __int8 *)v53 + 17), *((unsigned __int8 *)v53 + 16)) == __PAIR64__(v39, v34)
                && *(uint64_t *)((char *)v53 + 20) == v35
                && *((_DWORD *)v53 + 13) == (_DWORD)v43
                && !*((_BYTE *)v53 + 48))
              {
                goto LABEL_151;
              }
            }
            else
            {
              if (v59 >= v49)
                v59 %= v49;
              if (v59 != v51)
                goto LABEL_91;
            }
            v53 = (uint64_t *)*v53;
            if (!v53)
              goto LABEL_91;
          }
        }
        do
        {
          v58 = v53[1];
          if (v58 == v48)
          {
            if (*((unsigned __int8 *)v53 + 40) == v54
              && __PAIR64__(*((unsigned __int8 *)v53 + 17), *((unsigned __int8 *)v53 + 16)) == __PAIR64__(v39, v34)
              && *(uint64_t *)((char *)v53 + 20) == v35
              && *((_DWORD *)v53 + 13) == (_DWORD)v43
              && *((_BYTE *)v53 + 48)
              && *((_DWORD *)v53 + 11) == (_DWORD)v44)
            {
              goto LABEL_151;
            }
          }
          else
          {
            if (v58 >= v49)
              v58 %= v49;
            if (v58 != v51)
              break;
          }
          v53 = (uint64_t *)*v53;
        }
        while (v53);
      }
    }
  }
LABEL_91:
  v60 = (char *)operator new(0x40uLL);
  *(_QWORD *)v60 = 0;
  *((_QWORD *)v60 + 1) = v48;
  v60[16] = *a4;
  v60[17] = v39;
  *(_QWORD *)(v60 + 20) = v96;
  *(_OWORD *)(v60 + 40) = *(_OWORD *)v36;
  *((_QWORD *)v60 + 7) = v32;
  v61 = (float)(unint64_t)(*(_QWORD *)(a2 + 424) + 1);
  v62 = *(float *)(a2 + 432);
  if (v49 && (float)(v62 * (float)v49) >= v61)
  {
    v48 = v95;
    goto LABEL_141;
  }
  v63 = 1;
  if (v49 >= 3)
    v63 = (v49 & (v49 - 1)) != 0;
  v64 = v63 | (2 * v49);
  v65 = vcvtps_u32_f32(v61 / v62);
  if (v64 <= v65)
    prime = v65;
  else
    prime = v64;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v49 = *(_QWORD *)(a2 + 408);
  }
  if (prime > v49)
  {
LABEL_104:
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v67 = operator new(8 * prime);
    v68 = *v12;
    *v12 = v67;
    if (v68)
      operator delete(v68);
    v69 = 0;
    *(_QWORD *)(a2 + 408) = prime;
    do
      *((_QWORD *)*v12 + v69++) = 0;
    while (prime != v69);
    v70 = *(_QWORD **)(a2 + 416);
    if (!v70)
      goto LABEL_128;
    v71 = a2 + 416;
    v72 = v70[1];
    v73 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v74 = v72 & v73;
      *((_QWORD *)*v12 + v74) = v71;
      for (i = (_QWORD *)*v70; *v70; i = (_QWORD *)*v70)
      {
        v76 = i[1] & v73;
        if (v76 == v74)
        {
          v70 = i;
        }
        else if (*((_QWORD *)*v12 + v76))
        {
          *v70 = *i;
          v77 = 8 * v76;
          *i = **(_QWORD **)((char *)*v12 + v77);
          **(_QWORD **)((char *)*v12 + v77) = i;
        }
        else
        {
          *((_QWORD *)*v12 + v76) = v70;
          v70 = i;
          v74 = v76;
        }
      }
LABEL_128:
      v49 = prime;
      goto LABEL_129;
    }
    if (v72 >= prime)
      v72 %= prime;
    *((_QWORD *)*v12 + v72) = v71;
    v81 = (_QWORD *)*v70;
    if (!*v70)
      goto LABEL_128;
    while (1)
    {
      v83 = v81[1];
      if (v83 >= prime)
        v83 %= prime;
      if (v83 != v72)
      {
        if (!*((_QWORD *)*v12 + v83))
        {
          *((_QWORD *)*v12 + v83) = v70;
          goto LABEL_133;
        }
        *v70 = *v81;
        v82 = 8 * v83;
        *v81 = **(_QWORD **)((char *)*v12 + v82);
        **(_QWORD **)((char *)*v12 + v82) = v81;
        v81 = v70;
      }
      v83 = v72;
LABEL_133:
      v70 = v81;
      v81 = (_QWORD *)*v81;
      v72 = v83;
      if (!v81)
        goto LABEL_128;
    }
  }
  if (prime >= v49)
    goto LABEL_129;
  v78 = vcvtps_u32_f32((float)*(unint64_t *)(a2 + 424) / *(float *)(a2 + 432));
  if (v49 < 3 || (v79 = (uint8x8_t)vcnt_s8((int8x8_t)v49), v79.i16[0] = vaddlv_u8(v79), v79.u32[0] > 1uLL))
  {
    v78 = std::__next_prime(v78);
  }
  else
  {
    v80 = 1 << -(char)__clz(v78 - 1);
    if (v78 >= 2)
      v78 = v80;
  }
  if (prime <= v78)
    prime = v78;
  if (prime < v49)
  {
    if (!prime)
    {
      v94 = *v12;
      *v12 = 0;
      if (v94)
        operator delete(v94);
      v49 = 0;
      *(_QWORD *)(a2 + 408) = 0;
      goto LABEL_129;
    }
    goto LABEL_104;
  }
  v49 = *(_QWORD *)(a2 + 408);
LABEL_129:
  if ((v49 & (v49 - 1)) != 0)
  {
    if (v48 >= v49)
      v48 %= v49;
  }
  else
  {
    v48 &= v49 - 1;
  }
LABEL_141:
  v84 = *v12;
  v85 = (_QWORD *)*((_QWORD *)*v12 + v48);
  if (v85)
  {
    *(_QWORD *)v60 = *v85;
  }
  else
  {
    *(_QWORD *)v60 = *(_QWORD *)(a2 + 416);
    *(_QWORD *)(a2 + 416) = v60;
    v84[v48] = a2 + 416;
    if (!*(_QWORD *)v60)
      goto LABEL_150;
    v86 = *(_QWORD *)(*(_QWORD *)v60 + 8);
    if ((v49 & (v49 - 1)) != 0)
    {
      if (v86 >= v49)
        v86 %= v49;
    }
    else
    {
      v86 &= v49 - 1;
    }
    v85 = (char *)*v12 + 8 * v86;
  }
  *v85 = v60;
LABEL_150:
  ++*(_QWORD *)(a2 + 424);
  v38 = *(_QWORD *)(a2 + 456);
LABEL_151:
  while (v38 > *(_QWORD *)(a2 + 392))
  {
    v87 = *(char **)(a2 + 440);
    LOWORD(__p[0]) = *((_WORD *)v87 + 8);
    *(void **)((char *)__p + 4) = *(void **)(v87 + 20);
    *(_OWORD *)&v101[8] = *(_OWORD *)(v87 + 40);
    *(_OWORD *)&v101[24] = *(_OWORD *)(v87 + 56);
    v88 = *(_QWORD *)v87;
    *(_QWORD *)(v88 + 8) = *((_QWORD *)v87 + 1);
    **((_QWORD **)v87 + 1) = v88;
    *(_QWORD *)(a2 + 456) = v38 - 1;
    operator delete(v87);
    v89 = std::__hash_table<std::__hash_value_type<md::FlyoverOctile,std::__list_iterator<std::pair<md::FlyoverOctile,geo::OrientedBox<double,3u,double,double>>,void *>>,std::__unordered_map_hasher<md::FlyoverOctile,std::__hash_value_type<md::FlyoverOctile,std::__list_iterator<std::pair<md::FlyoverOctile,geo::OrientedBox<double,3u,double,double>>,void *>>,md::FlyoverOctileHash,std::equal_to<md::FlyoverOctile>,true>,std::__unordered_map_equal<md::FlyoverOctile,std::__hash_value_type<md::FlyoverOctile,std::__list_iterator<std::pair<md::FlyoverOctile,geo::OrientedBox<double,3u,double,double>>,void *>>,std::equal_to<md::FlyoverOctile>,md::FlyoverOctileHash,true>,std::allocator<std::__hash_value_type<md::FlyoverOctile,std::__list_iterator<std::pair<md::FlyoverOctile,geo::OrientedBox<double,3u,double,double>>,void *>>>>::find<md::FlyoverOctile>(v12, (unsigned __int8 *)__p);
    if (v89)
    {
      std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)v97, v12, v89);
      if (v97[0])
        operator delete(v97[0]);
    }
    v38 = *(_QWORD *)(a2 + 456);
  }
LABEL_157:
  *(int64x2_t *)v97 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  v98 = xmmword_19FFB2E00;
  memset(v101, 0, 32);
  v99 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  *(_OWORD *)__p = 0u;
  *(_QWORD *)&v101[32] = 0x3FF0000000000000;
  v90 = v6;
  v91 = v5;
  md::FlyoverCommon::computeGeocentricBoundsFromOctile((uint64_t)a4, (uint64_t)__p, (uint64_t)v97, v90, v91);
  *(_OWORD *)a1 = *(_OWORD *)__p;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)&v101[8];
  *(_QWORD *)(a1 + 48) = *(_QWORD *)&v101[32];
  v92 = v98;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)v97;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)v101;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)&v101[24];
  *(_OWORD *)(a1 + 72) = v92;
  result = *(double *)v99.i64;
  *(int64x2_t *)(a1 + 88) = v99;
  return result;
}

void sub_19FD2AF5C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char *std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare &,std::__tree_const_iterator<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,std::__tree_node<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,void *> *,long> &,std::__tree_const_iterator<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,std::__tree_node<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,void *> *,long> &,std::__tree_const_iterator<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,std::__tree_node<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,void *> *,long> &,std::__tree_const_iterator<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,std::__tree_node<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,void *> *,long> &,std::insert_iterator<std::set<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare,std::allocator<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo>>> &>(char *result, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6)
{
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *i;
  char *v15;
  char *v16;
  BOOL v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  char *v28;
  char **v29;
  char *v30;
  _QWORD *v31;
  _QWORD *v32;

  v7 = result;
  v8 = *(_QWORD **)a2;
  v9 = (_QWORD *)*a3;
  if (*(_QWORD *)a2 == *a3)
  {
LABEL_49:
    v29 = *(char ***)a6;
    v28 = *(char **)(a6 + 8);
    v9 = v8;
    goto LABEL_50;
  }
  for (i = *(_QWORD **)a4; *(_QWORD *)a4 != *a5; i = *(_QWORD **)a4)
  {
    if (md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare::operator()((uint64_t)(v8 + 4), (uint64_t)(i + 4)))
    {
      result = std::__tree<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare,std::allocator<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo>>::__emplace_hint_unique_key_args<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo const&>(*(char ***)a6, *(char **)(a6 + 8), (uint64_t)(v8 + 4), (uint64_t)(v8 + 4));
      *(_QWORD *)(a6 + 8) = result;
      v15 = (char *)*((_QWORD *)result + 1);
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = *(char **)v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (char *)*((_QWORD *)result + 2);
          v17 = *(_QWORD *)v16 == (_QWORD)result;
          result = v16;
        }
        while (!v17);
      }
      *(_QWORD *)(a6 + 8) = v16;
      v18 = *(_QWORD **)a2;
      v19 = *(_QWORD **)(*(_QWORD *)a2 + 8);
      if (v19)
      {
        do
        {
          v20 = v19;
          v19 = (_QWORD *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          v20 = (_QWORD *)v18[2];
          v17 = *v20 == (_QWORD)v18;
          v18 = v20;
        }
        while (!v17);
      }
      *(_QWORD *)a2 = v20;
    }
    else
    {
      result = (char *)md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare::operator()((uint64_t)(i + 4), (uint64_t)(v8 + 4));
      if ((_DWORD)result)
      {
        v21 = (_QWORD *)i[1];
        if (v21)
        {
          do
          {
            v22 = v21;
            v21 = (_QWORD *)*v21;
          }
          while (v21);
        }
        else
        {
          do
          {
            v22 = (_QWORD *)i[2];
            v17 = *v22 == (_QWORD)i;
            i = v22;
          }
          while (!v17);
        }
        *(_QWORD *)a4 = v22;
      }
      else
      {
        v23 = (_QWORD *)v8[1];
        if (v23)
        {
          do
          {
            v24 = v23;
            v23 = (_QWORD *)*v23;
          }
          while (v23);
        }
        else
        {
          do
          {
            v24 = (_QWORD *)v8[2];
            v17 = *v24 == (_QWORD)v8;
            v8 = v24;
          }
          while (!v17);
        }
        *(_QWORD *)a2 = v24;
        v25 = *(_QWORD **)a4;
        v26 = *(_QWORD **)(*(_QWORD *)a4 + 8);
        if (v26)
        {
          do
          {
            v27 = v26;
            v26 = (_QWORD *)*v26;
          }
          while (v26);
        }
        else
        {
          do
          {
            v27 = (_QWORD *)v25[2];
            v17 = *v27 == (_QWORD)v25;
            v25 = v27;
          }
          while (!v17);
        }
        *(_QWORD *)a4 = v27;
      }
    }
    v8 = *(_QWORD **)a2;
    v9 = (_QWORD *)*a3;
    if (*(_QWORD *)a2 == *a3)
      goto LABEL_49;
  }
  v29 = *(char ***)a6;
  v28 = *(char **)(a6 + 8);
  if (v8 != v9)
  {
    do
    {
      result = std::__tree<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare,std::allocator<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo>>::__emplace_hint_unique_key_args<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo const&>(v29, v28, (uint64_t)(v8 + 4), (uint64_t)(v8 + 4));
      v30 = (char *)*((_QWORD *)result + 1);
      if (v30)
      {
        do
        {
          v28 = v30;
          v30 = *(char **)v30;
        }
        while (v30);
      }
      else
      {
        do
        {
          v28 = (char *)*((_QWORD *)result + 2);
          v17 = *(_QWORD *)v28 == (_QWORD)result;
          result = v28;
        }
        while (!v17);
      }
      v31 = (_QWORD *)v8[1];
      if (v31)
      {
        do
        {
          v32 = v31;
          v31 = (_QWORD *)*v31;
        }
        while (v31);
      }
      else
      {
        do
        {
          v32 = (_QWORD *)v8[2];
          v17 = *v32 == (_QWORD)v8;
          v8 = v32;
        }
        while (!v17);
      }
      v8 = v32;
    }
    while (v32 != v9);
  }
LABEL_50:
  *v7 = v9;
  v7[1] = v29;
  v7[2] = v28;
  return result;
}

void std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>>>>::__emplace_unique_key_args<gdc::LayerDataRequestKey,gdc::LayerDataRequestKey&,std::shared_ptr<gdc::LayerData>&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  uint64_t ***v11;
  uint64_t **v12;
  int v13;
  int v14;
  uint64_t *v15;
  const void *v16;
  size_t v17;
  unint64_t v18;
  uint64_t *v19;
  size_t v20;
  int v21;
  uint64_t *v22;
  uint64_t *v23;
  int v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  float v31;
  float v32;
  _BOOL8 v33;
  unint64_t v34;
  unint64_t v35;
  size_t prime;
  int8x8_t v37;
  unint64_t v38;
  uint8x8_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  size_t v44;
  uint64_t *v45;
  uint64_t *v46;
  const void *v47;
  const void *v48;

  v8 = *((_QWORD *)a2 + 13);
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = *((_QWORD *)a2 + 13);
      if (v8 >= v9)
        v4 = v8 % v9;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
    v11 = *(uint64_t ****)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        v13 = *a2;
        v14 = *((unsigned __int16 *)a2 + 4);
        v15 = (uint64_t *)*((_QWORD *)a2 + 10);
        v16 = (const void *)*((_QWORD *)a2 + 2);
        v17 = *((_QWORD *)a2 + 3) - (_QWORD)v16;
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v22 = v12[1];
            if (v22 == (uint64_t *)v8)
            {
              if (*((unsigned __int8 *)v12 + 16) == v13 && *((unsigned __int16 *)v12 + 12) == v14 && v12[12] == v15)
              {
                v23 = v12[4];
                if ((char *)v12[5] - (char *)v23 == v17)
                {
                  v46 = v15;
                  v48 = v16;
                  v44 = v17;
                  v24 = memcmp(v23, v16, v17);
                  v17 = v44;
                  v15 = v46;
                  v16 = v48;
                  if (!v24)
                    return;
                }
              }
            }
            else if (((unint64_t)v22 & (v9 - 1)) != v4)
            {
              goto LABEL_31;
            }
            v12 = (uint64_t **)*v12;
            if (!v12)
              goto LABEL_31;
          }
        }
        do
        {
          v18 = (unint64_t)v12[1];
          if (v18 == v8)
          {
            if (*((unsigned __int8 *)v12 + 16) == v13 && *((unsigned __int16 *)v12 + 12) == v14 && v12[12] == v15)
            {
              v19 = v12[4];
              if ((char *)v12[5] - (char *)v19 == v17)
              {
                v45 = v15;
                v47 = v16;
                v20 = v17;
                v21 = memcmp(v19, v16, v17);
                v17 = v20;
                v15 = v45;
                v16 = v47;
                if (!v21)
                  return;
              }
            }
          }
          else
          {
            if (v18 >= v9)
              v18 %= v9;
            if (v18 != v4)
              break;
          }
          v12 = (uint64_t **)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_31:
  v25 = (_QWORD *)(a1 + 16);
  v26 = operator new(0x90uLL);
  *v26 = 0;
  v26[1] = v8;
  *((_BYTE *)v26 + 16) = *(_BYTE *)a3;
  gdc::LayerDataKey::LayerDataKey((uint64_t)(v26 + 3), a3 + 8);
  *((_BYTE *)v26 + 112) = 0;
  if (*(_BYTE *)(a3 + 96))
  {
    *((_DWORD *)v26 + 29) = *(_DWORD *)(a3 + 100);
    *((_BYTE *)v26 + 112) = 1;
  }
  v28 = *a4;
  v27 = a4[1];
  v26[15] = *(_QWORD *)(a3 + 104);
  v26[16] = v28;
  v26[17] = v27;
  if (v27)
  {
    v29 = (unint64_t *)(v27 + 8);
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  v31 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v32 = *(float *)(a1 + 32);
  if (!v9 || (float)(v32 * (float)v9) < v31)
  {
    v33 = 1;
    if (v9 >= 3)
      v33 = (v9 & (v9 - 1)) != 0;
    v34 = v33 | (2 * v9);
    v35 = vcvtps_u32_f32(v31 / v32);
    if (v34 <= v35)
      prime = v35;
    else
      prime = v34;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v37 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v37)
      goto LABEL_48;
    if (prime < *(_QWORD *)&v37)
    {
      v38 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v37 < 3uLL || (v39 = (uint8x8_t)vcnt_s8(v37), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
      {
        v38 = std::__next_prime(v38);
      }
      else
      {
        v40 = 1 << -(char)__clz(v38 - 1);
        if (v38 >= 2)
          v38 = v40;
      }
      if (prime <= v38)
        prime = v38;
      if (prime < *(_QWORD *)&v37)
LABEL_48:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
  }
  v41 = *(_QWORD *)a1;
  v42 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v42)
  {
    *v26 = *v42;
LABEL_72:
    *v42 = v26;
    goto LABEL_73;
  }
  *v26 = *v25;
  *v25 = v26;
  *(_QWORD *)(v41 + 8 * v4) = v25;
  if (*v26)
  {
    v43 = *(_QWORD *)(*v26 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v43 >= v9)
        v43 %= v9;
    }
    else
    {
      v43 &= v9 - 1;
    }
    v42 = (_QWORD *)(*(_QWORD *)a1 + 8 * v43);
    goto LABEL_72;
  }
LABEL_73:
  ++*(_QWORD *)(a1 + 24);
}

void sub_19FD2B5B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,md::FlyoverCompleteTileDataLogic::TransitionInfo>,std::__map_value_compare<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,md::FlyoverCompleteTileDataLogic::TransitionInfo>,std::less<std::pair<md::FlyoverOctile,md::FlyoverOctile>>,true>,std::allocator<std::__value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,md::FlyoverCompleteTileDataLogic::TransitionInfo>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,md::FlyoverCompleteTileDataLogic::TransitionInfo>,std::__map_value_compare<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,md::FlyoverCompleteTileDataLogic::TransitionInfo>,std::less<std::pair<md::FlyoverOctile,md::FlyoverOctile>>,true>,std::allocator<std::__value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,md::FlyoverCompleteTileDataLogic::TransitionInfo>>>::destroy(*a1);
    std::__tree<std::__value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,md::FlyoverCompleteTileDataLogic::TransitionInfo>,std::__map_value_compare<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,md::FlyoverCompleteTileDataLogic::TransitionInfo>,std::less<std::pair<md::FlyoverOctile,md::FlyoverOctile>>,true>,std::allocator<std::__value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,md::FlyoverCompleteTileDataLogic::TransitionInfo>>>::destroy(a1[1]);
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy((_QWORD *)a1[15]);
    operator delete(a1);
  }
}

char *std::__tree<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare,std::allocator<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo>>::__emplace_hint_unique_key_args<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo const&>(char **a1, char *a2, uint64_t a3, uint64_t a4)
{
  char *v6;
  void **v8;
  void **v9;
  void **v10;
  void **v11;
  void **v12;
  void **v13;
  void **v14;
  void **v15;
  BOOL v16;
  void **v17;
  uint64_t v18;
  void **v19;
  void **v20;
  uint64_t v21;
  uint64_t *v22;
  char *v23;
  char *v25;

  v6 = a2;
  v8 = (void **)(a1 + 1);
  if (a1 + 1 != (char **)a2
    && !md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare::operator()(a3, (uint64_t)(a2 + 32)))
  {
    if (!md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare::operator()((uint64_t)(v6 + 32), a3))
    {
      v25 = v6;
      v13 = (void **)&v25;
      v11 = (void **)v6;
      if (v6)
        return v6;
      goto LABEL_42;
    }
    v13 = (void **)(v6 + 8);
    v12 = (void **)*((_QWORD *)v6 + 1);
    if (v12)
    {
      do
      {
        v13 = v12;
        v12 = (void **)*v12;
        v11 = v13;
        v14 = v13;
      }
      while (v12);
      if (v13 == v8)
        goto LABEL_41;
    }
    else
    {
      v14 = (void **)v6;
      do
      {
        v19 = v14;
        v14 = (void **)v14[2];
      }
      while (*v14 != v19);
      v11 = (void **)v6;
      if (v14 == v8)
        goto LABEL_41;
    }
    if (md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare::operator()(a3, (uint64_t)(v14 + 4)))
      goto LABEL_41;
    v20 = (void **)*v8;
    if (*v8)
    {
      v13 = v8;
      do
      {
        while (1)
        {
          v11 = v20;
          v21 = (uint64_t)(v20 + 4);
          if (!md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare::operator()(a3, (uint64_t)(v20 + 4)))
            break;
          v20 = (void **)*v11;
          v13 = v11;
          if (!*v11)
            goto LABEL_41;
        }
        if (!md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare::operator()(v21, a3))
          break;
        v13 = v11 + 1;
        v20 = (void **)v11[1];
      }
      while (v20);
LABEL_41:
      v6 = (char *)*v13;
      if (*v13)
        return v6;
      goto LABEL_42;
    }
LABEL_40:
    v11 = v8;
    v13 = v8;
    goto LABEL_41;
  }
  v9 = *(void ***)v6;
  if (*a1 == v6)
  {
    v11 = (void **)v6;
    goto LABEL_17;
  }
  if (v9)
  {
    v10 = *(void ***)v6;
    do
    {
      v11 = v10;
      v10 = (void **)v10[1];
    }
    while (v10);
  }
  else
  {
    v15 = (void **)v6;
    do
    {
      v11 = (void **)v15[2];
      v16 = *v11 == v15;
      v15 = v11;
    }
    while (v16);
  }
  if (!md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare::operator()((uint64_t)(v11 + 4), a3))
  {
    v17 = (void **)*v8;
    if (*v8)
    {
      v13 = v8;
      do
      {
        while (1)
        {
          v11 = v17;
          v18 = (uint64_t)(v17 + 4);
          if (!md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare::operator()(a3, (uint64_t)(v17 + 4)))
            break;
          v17 = (void **)*v11;
          v13 = v11;
          if (!*v11)
            goto LABEL_41;
        }
        if (!md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare::operator()(v18, a3))
          break;
        v13 = v11 + 1;
        v17 = (void **)v11[1];
      }
      while (v17);
      goto LABEL_41;
    }
    goto LABEL_40;
  }
LABEL_17:
  if (v9)
  {
    v13 = v11 + 1;
    goto LABEL_41;
  }
  v11 = (void **)v6;
  v13 = (void **)v6;
LABEL_42:
  v6 = (char *)operator new(0x108uLL);
  *((_WORD *)v6 + 16) = *(_WORD *)a4;
  *(_QWORD *)(v6 + 36) = *(_QWORD *)(a4 + 4);
  *(_OWORD *)(v6 + 56) = *(_OWORD *)(a4 + 24);
  *((_WORD *)v6 + 36) = *(_WORD *)(a4 + 40);
  *(_QWORD *)(v6 + 76) = *(_QWORD *)(a4 + 44);
  *((_OWORD *)v6 + 6) = *(_OWORD *)(a4 + 64);
  *((_WORD *)v6 + 56) = *(_WORD *)(a4 + 80);
  *(_QWORD *)(v6 + 116) = *(_QWORD *)(a4 + 84);
  *((_QWORD *)v6 + 17) = *(_QWORD *)(a4 + 104);
  *((_WORD *)v6 + 72) = *(_WORD *)(a4 + 112);
  *(_QWORD *)(v6 + 148) = *(_QWORD *)(a4 + 116);
  *(_OWORD *)(v6 + 168) = *(_OWORD *)(a4 + 136);
  v6[184] = *(_BYTE *)(a4 + 152);
  *((_QWORD *)v6 + 24) = *(_QWORD *)(a4 + 160);
  *((_WORD *)v6 + 100) = *(_WORD *)(a4 + 168);
  *(_QWORD *)(v6 + 204) = *(_QWORD *)(a4 + 172);
  *((_OWORD *)v6 + 14) = *(_OWORD *)(a4 + 192);
  v6[240] = *(_BYTE *)(a4 + 208);
  *(_OWORD *)(v6 + 248) = *(_OWORD *)(a4 + 216);
  *(_QWORD *)v6 = 0;
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = v11;
  *v13 = v6;
  v22 = (uint64_t *)v6;
  v23 = *(char **)*a1;
  if (v23)
  {
    *a1 = v23;
    v22 = (uint64_t *)*v13;
  }
  std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)a1[1], v22);
  ++a1[2];
  return v6;
}

uint64_t md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo::FlyoverOctileTileInfo(uint64_t result, char *a2, uint64_t a3, uint64_t a4)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v4 = a2[1];
  v6 = *((unsigned int *)a2 + 1);
  v5 = *((unsigned int *)a2 + 2);
  v7 = *a2;
  *(_BYTE *)result = *a2;
  *(_BYTE *)(result + 1) = v4;
  *(_DWORD *)(result + 4) = v6;
  *(_DWORD *)(result + 8) = v5;
  v8 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(result + 24) = v8;
  *(_WORD *)(result + 40) = *(_WORD *)a3;
  *(_QWORD *)(result + 44) = *(_QWORD *)(a3 + 4);
  *(_OWORD *)(result + 64) = *(_OWORD *)(a3 + 24);
  *(_WORD *)(result + 80) = *(_WORD *)a4;
  *(_QWORD *)(result + 84) = *(_QWORD *)(a4 + 4);
  *(_BYTE *)(result + 112) = v7;
  *(_BYTE *)(result + 113) = v4;
  *(_DWORD *)(result + 116) = v6;
  *(_DWORD *)(result + 120) = v5;
  *(_OWORD *)(result + 136) = v8;
  *(_BYTE *)(result + 152) = v4;
  v9 = ((v5 << 32) | (v5 << 16)) & 0x1F0000FF0000FFLL | v5;
  v10 = (v9 | (v9 << 8)) & 0x100F00F00F00F00FLL | (16 * ((v9 | (v9 << 8)) & 0x100F00F00F00F00FLL));
  v11 = ((v6 << 32) | (v6 << 16)) & 0x1F0000FF0000FFLL | v6;
  v12 = (v11 | (v11 << 8)) & 0x1003003003003003 | (16 * ((v11 | (v11 << 8)) & 0x100F00F00F00F00FLL)) & 0x10C30C30C30C30C3;
  v13 = (((unint64_t)*(unsigned int *)(result + 36) << 32) | ((unint64_t)*(unsigned int *)(result + 36) << 16) | *(_DWORD *)(result + 36)) & 0x1F0000FF0000FFLL;
  v14 = (v13 | (v13 << 8)) & 0x1003003003003003 | (16 * ((v13 | (v13 << 8)) & 0x100F00F00F00F00FLL)) & 0x10C30C30C30C30C3;
  *(_QWORD *)(result + 104) = v10 & 0x1041041041041041 | (4 * (v10 & 0x10C30C30C30C30C3)) & 0x1249249249249249 | ((8 * v12) | (2 * v12)) & 0x2492492492492492 | ((16 * v14) | (4 * v14)) & 0x4924924924924924;
  *(_QWORD *)(result + 160) = 0;
  LOBYTE(v12) = *(_BYTE *)(a3 + 1);
  *(_BYTE *)(result + 168) = *(_BYTE *)a3;
  *(_BYTE *)(result + 169) = v12;
  *(_QWORD *)(result + 172) = *(_QWORD *)(a3 + 4);
  *(_OWORD *)(result + 192) = *(_OWORD *)(a3 + 24);
  *(_BYTE *)(result + 208) = v12;
  v15 = ((unint64_t)*(unsigned int *)(a3 + 8) << 32) | ((unint64_t)*(unsigned int *)(a3 + 8) << 16) | *(_DWORD *)(a3 + 8);
  v16 = v15 & 0xF00000F00000FLL | ((v15 & 0x1F0000FF0000FFLL) << 8) & 0x100F00F00F00F00FLL;
  v17 = (((unint64_t)*(unsigned int *)(a3 + 4) << 32) | ((unint64_t)*(unsigned int *)(a3 + 4) << 16) | *(_DWORD *)(a3 + 4)) & 0x1F0000FF0000FFLL;
  v18 = (v17 | (v17 << 8)) & 0x1003003003003003 | (16 * ((v17 | (v17 << 8)) & 0x100F00F00F00F00FLL)) & 0x10C30C30C30C30C3;
  v19 = ((8 * v18) | (2 * v18)) & 0x2492492492492492 | (v16 | (16 * v16)) & 0x1041041041041041 | (4 * ((v16 | (16 * v16)) & 0x10C30C30C30C30C3)) & 0x1249249249249249;
  v20 = ((unint64_t)*(unsigned int *)(a3 + 36) << 32) | ((unint64_t)*(unsigned int *)(a3 + 36) << 16) | *(_DWORD *)(a3 + 36);
  v21 = v20 & 0xF00000F00000FLL | ((v20 & 0x1F0000FF0000FFLL) << 8) & 0x100F00F00F00F00FLL;
  *(_QWORD *)(result + 160) = v19 | ((16 * ((v21 | (16 * v21)) & 0x10C30C30C30C30C3)) | (4
                                                                                         * ((v21 | (16 * v21)) & 0x10C30C30C30C30C3))) & 0x4924924924924924;
  *(_QWORD *)(result + 216) = 0;
  *(_WORD *)(result + 224) = 0;
  v22 = *(unsigned __int8 *)(a4 + 1);
  if (v22 <= 0x1E)
  {
    v23 = 1 << v22;
    v24 = *(_DWORD *)(a4 + 8);
    v25 = vcvtmd_s64_f64((double)v24 / (double)(1 << v22));
    if (v25 >= 0)
      v26 = v25;
    else
      v26 = -v25;
    if (v26 <= 0x7F)
    {
      *(_BYTE *)(result + 224) = v22;
      *(_BYTE *)(result + 225) = v25;
      v27 = ((*(_DWORD *)(a4 + 4) % v23 + v23) % v23);
      v28 = (((v24 % v23 + v23) % v23) | ((unint64_t)((v24 % v23 + v23) % v23) << 16)) & 0xFFFF0000FFFFLL;
      v29 = (v28 | (v28 << 8)) & 0xF000F000F000FLL | (16 * ((v28 | (v28 << 8)) & 0xFF00FF00FF00FFLL)) & 0xF0F0F0F0F0F0F0FLL;
      v30 = (v27 | (v27 << 16)) & 0xFF000000FFLL | (((v27 | (v27 << 16)) & 0xFFFF0000FFFFLL) << 8) & 0xFF00FF00FF00FFLL;
      v31 = (v30 | (16 * v30)) & 0x303030303030303 | (4 * ((v30 | (16 * v30)) & 0xF0F0F0F0F0F0F0FLL)) & 0x3333333333333333;
      *(_QWORD *)(result + 216) = (v29 | (4 * v29)) & 0x1111111111111111 | (2
                                                                            * ((v29 | (4 * v29)) & 0x3333333333333333)) & 0x5555555555555555 | ((4 * v31) | (2 * v31)) & 0xAAAAAAAAAAAAAAAALL;
    }
  }
  return result;
}

void std::__function::__func<md::FlyoverCompleteTileDataLogic::collectFlyoverTilesInView(std::set<gdc::LayerDataWithWorld> const&,std::unordered_map<std::pair<md::FlyoverOctile,md::FlyoverOctile>,md::FlyoverCompleteTileDataLogic::FallbackInfo,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>,std::allocator<std::pair<std::pair<md::FlyoverOctile,md::FlyoverOctile> const,md::FlyoverCompleteTileDataLogic::FallbackInfo>>> const&,std::set<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare,std::allocator<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo>> &,md::FlyoverTileDataResolverContext const&)::$_1,std::allocator<md::FlyoverCompleteTileDataLogic::collectFlyoverTilesInView(std::set<gdc::LayerDataWithWorld> const&,std::unordered_map<std::pair<md::FlyoverOctile,md::FlyoverOctile>,md::FlyoverCompleteTileDataLogic::FallbackInfo,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>,std::allocator<std::pair<std::pair<md::FlyoverOctile,md::FlyoverOctile> const,md::FlyoverCompleteTileDataLogic::FallbackInfo>>> const&,std::set<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare,std::allocator<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo>> &,md::FlyoverTileDataResolverContext const&)::$_1>,void ()(geo::QuadTile const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::FlyoverCompleteTileDataLogic::collectFlyoverTilesInView(std::set<gdc::LayerDataWithWorld> const&,std::unordered_map<std::pair<md::FlyoverOctile,md::FlyoverOctile>,md::FlyoverCompleteTileDataLogic::FallbackInfo,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>,std::allocator<std::pair<std::pair<md::FlyoverOctile,md::FlyoverOctile> const,md::FlyoverCompleteTileDataLogic::FallbackInfo>>> const&,std::set<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare,std::allocator<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo>> &,md::FlyoverTileDataResolverContext const&)::$_1,std::allocator<md::FlyoverCompleteTileDataLogic::collectFlyoverTilesInView(std::set<gdc::LayerDataWithWorld> const&,std::unordered_map<std::pair<md::FlyoverOctile,md::FlyoverOctile>,md::FlyoverCompleteTileDataLogic::FallbackInfo,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>,std::allocator<std::pair<std::pair<md::FlyoverOctile,md::FlyoverOctile> const,md::FlyoverCompleteTileDataLogic::FallbackInfo>>> const&,std::set<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare,std::allocator<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo>> &,md::FlyoverTileDataResolverContext const&)::$_1>,void ()(geo::QuadTile const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E427AF98;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<md::FlyoverCompleteTileDataLogic::collectFlyoverTilesInView(std::set<gdc::LayerDataWithWorld> const&,std::unordered_map<std::pair<md::FlyoverOctile,md::FlyoverOctile>,md::FlyoverCompleteTileDataLogic::FallbackInfo,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>,std::allocator<std::pair<std::pair<md::FlyoverOctile,md::FlyoverOctile> const,md::FlyoverCompleteTileDataLogic::FallbackInfo>>> const&,std::set<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare,std::allocator<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo>> &,md::FlyoverTileDataResolverContext const&)::$_1,std::allocator<md::FlyoverCompleteTileDataLogic::collectFlyoverTilesInView(std::set<gdc::LayerDataWithWorld> const&,std::unordered_map<std::pair<md::FlyoverOctile,md::FlyoverOctile>,md::FlyoverCompleteTileDataLogic::FallbackInfo,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>,std::allocator<std::pair<std::pair<md::FlyoverOctile,md::FlyoverOctile> const,md::FlyoverCompleteTileDataLogic::FallbackInfo>>> const&,std::set<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare,std::allocator<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo>> &,md::FlyoverTileDataResolverContext const&)::$_1>,void ()(geo::QuadTile const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E427AF98;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::FlyoverCompleteTileDataLogic::collectFlyoverTilesInView(std::set<gdc::LayerDataWithWorld> const&,std::unordered_map<std::pair<md::FlyoverOctile,md::FlyoverOctile>,md::FlyoverCompleteTileDataLogic::FallbackInfo,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>,std::allocator<std::pair<std::pair<md::FlyoverOctile,md::FlyoverOctile> const,md::FlyoverCompleteTileDataLogic::FallbackInfo>>> const&,std::set<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare,std::allocator<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo>> &,md::FlyoverTileDataResolverContext const&)::$_1,std::allocator<md::FlyoverCompleteTileDataLogic::collectFlyoverTilesInView(std::set<gdc::LayerDataWithWorld> const&,std::unordered_map<std::pair<md::FlyoverOctile,md::FlyoverOctile>,md::FlyoverCompleteTileDataLogic::FallbackInfo,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>,std::allocator<std::pair<std::pair<md::FlyoverOctile,md::FlyoverOctile> const,md::FlyoverCompleteTileDataLogic::FallbackInfo>>> const&,std::set<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare,std::allocator<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo>> &,md::FlyoverTileDataResolverContext const&)::$_1>,void ()(geo::QuadTile const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int v5;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  signed int v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint8x8_t v23;
  uint64_t **v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  float v32;
  float v33;
  _BOOL8 v34;
  unint64_t v35;
  unint64_t v36;
  size_t prime;
  void *v38;
  void *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  size_t v43;
  size_t v44;
  size_t v45;
  _QWORD *v46;
  size_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint8x8_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  size_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  _QWORD *v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  __int16 v63;
  unsigned __int8 v64;
  _BYTE v65[232];
  _BYTE v66[4];
  uint64_t v67;
  char v68;
  uint64_t v69;
  int v70;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(unsigned __int8 *)(a2 + 1);
  if (*(unsigned __int8 *)(v4 + 1) < v5)
  {
    v7 = *(_QWORD *)(a1 + 8);
    v66[0] = *(_BYTE *)a2;
    v66[1] = v5;
    v67 = *(_QWORD *)(a2 + 4);
    v68 = 2;
    v69 = 0;
    v70 = 0;
    md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo::FlyoverOctileTileInfo((uint64_t)v65, (char *)v4, (uint64_t)v66, *(_QWORD *)(a1 + 40));
    std::__tree<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare,std::allocator<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo>>::__emplace_unique_key_args<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo const&>(*(uint64_t ***)(a1 + 32), (uint64_t)v65, (uint64_t)v65);
    **(_BYTE **)(a1 + 24) = 1;
    v8 = *(unsigned __int8 **)(a1 + 16);
    v9 = v8[1];
    v10 = *v8;
    v11 = *(_QWORD *)(v8 + 4);
    v12 = v8[24];
    v63 = *(_WORD *)(v8 + 25);
    v64 = v8[27];
    v13 = *(_QWORD *)(v8 + 28);
    v14 = *((unsigned int *)v8 + 9);
    v15 = vcvtmd_s64_f64((double)*(int *)(*(_QWORD *)(a1 + 40) + 8) / (double)(1 << *(_BYTE *)(*(_QWORD *)(a1 + 40)
                                                                                               + 1)));
    v18 = v13 & 0xFF00000000;
    v19 = 2 * v13;
    if ((v13 & 0xFF00000000) == 0)
      v19 = 0;
    v16 = (v9
         + ((v10 - 0x61C8864680B583EBLL) << 6)
         + ((unint64_t)(v10 - 0x61C8864680B583EBLL) >> 2)
         - 0x61C8864680B583EBLL) ^ (v10 - 0x61C8864680B583EBLL);
    v17 = ((v16 << 6) + (int)v11 + (v16 >> 2) - 0x61C8864680B583EBLL) ^ v16;
    v20 = (v19 | (v14 << 33)) ^ v17 ^ ((v17 << 6) + SHIDWORD(v11) + (v17 >> 2) - 0x61C8864680B583EBLL);
    v21 = ((v20 << 6) + v15 + (v20 >> 2) - 0x61C8864680B583EBLL) ^ v20;
    v22 = *(_QWORD *)(v7 + 776);
    v61 = *(_QWORD *)(v8 + 4);
    v62 = v21;
    if (v22)
    {
      v23 = (uint8x8_t)vcnt_s8((int8x8_t)v22);
      v23.i16[0] = vaddlv_u8(v23);
      if (v23.u32[0] > 1uLL)
      {
        v2 = ((v20 << 6) + v15 + (v20 >> 2) - 0x61C8864680B583EBLL) ^ v20;
        if (v21 >= v22)
          v2 = v21 % v22;
      }
      else
      {
        v2 = v21 & (v22 - 1);
      }
      v24 = *(uint64_t ***)(*(_QWORD *)(v7 + 768) + 8 * v2);
      if (v24)
      {
        v25 = *v24;
        if (v25)
        {
          if (v23.u32[0] <= 1uLL)
          {
            v26 = v22 - 1;
            if (!v18)
            {
              while (1)
              {
                v28 = v25[1];
                if (v28 == v21)
                {
                  if (*((unsigned __int8 *)v25 + 40) == v12
                    && __PAIR64__(*((unsigned __int8 *)v25 + 17), *((unsigned __int8 *)v25 + 16)) == __PAIR64__(v9, v10)
                    && *(uint64_t *)((char *)v25 + 20) == v11
                    && *((_DWORD *)v25 + 13) == (_DWORD)v14
                    && !*((_BYTE *)v25 + 48)
                    && *((unsigned __int8 *)v25 + 56) == v15)
                  {
                    return;
                  }
                }
                else if ((v28 & v26) != v2)
                {
                  goto LABEL_63;
                }
                v25 = (uint64_t *)*v25;
                if (!v25)
                  goto LABEL_63;
              }
            }
            while (1)
            {
              v27 = v25[1];
              if (v27 == v21)
              {
                if (*((unsigned __int8 *)v25 + 40) == v12
                  && __PAIR64__(*((unsigned __int8 *)v25 + 17), *((unsigned __int8 *)v25 + 16)) == __PAIR64__(v9, v10)
                  && *(uint64_t *)((char *)v25 + 20) == v11
                  && *((_DWORD *)v25 + 13) == (_DWORD)v14
                  && *((_BYTE *)v25 + 48)
                  && *((_DWORD *)v25 + 11) == (_DWORD)v13
                  && *((unsigned __int8 *)v25 + 56) == v15)
                {
                  return;
                }
              }
              else if ((v27 & v26) != v2)
              {
                goto LABEL_63;
              }
              v25 = (uint64_t *)*v25;
              if (!v25)
                goto LABEL_63;
            }
          }
          if (!v18)
          {
            while (1)
            {
              v30 = v25[1];
              if (v30 == v21)
              {
                if (*((unsigned __int8 *)v25 + 40) == v12
                  && __PAIR64__(*((unsigned __int8 *)v25 + 17), *((unsigned __int8 *)v25 + 16)) == __PAIR64__(v9, v10)
                  && *(uint64_t *)((char *)v25 + 20) == v11
                  && *((_DWORD *)v25 + 13) == (_DWORD)v14
                  && !*((_BYTE *)v25 + 48)
                  && *((unsigned __int8 *)v25 + 56) == v15)
                {
                  return;
                }
              }
              else
              {
                if (v30 >= v22)
                  v30 %= v22;
                if (v30 != v2)
                  goto LABEL_63;
              }
              v25 = (uint64_t *)*v25;
              if (!v25)
                goto LABEL_63;
            }
          }
          do
          {
            v29 = v25[1];
            if (v29 == v21)
            {
              if (*((unsigned __int8 *)v25 + 40) == v12
                && __PAIR64__(*((unsigned __int8 *)v25 + 17), *((unsigned __int8 *)v25 + 16)) == __PAIR64__(v9, v10)
                && *(uint64_t *)((char *)v25 + 20) == v11
                && *((_DWORD *)v25 + 13) == (_DWORD)v14
                && *((_BYTE *)v25 + 48)
                && *((_DWORD *)v25 + 11) == (_DWORD)v13
                && *((unsigned __int8 *)v25 + 56) == v15)
              {
                return;
              }
            }
            else
            {
              if (v29 >= v22)
                v29 %= v22;
              if (v29 != v2)
                break;
            }
            v25 = (uint64_t *)*v25;
          }
          while (v25);
        }
      }
    }
LABEL_63:
    v31 = (char *)operator new(0x40uLL);
    *(_QWORD *)v31 = 0;
    *((_QWORD *)v31 + 1) = v62;
    v31[16] = v10;
    v31[17] = v9;
    *(_QWORD *)(v31 + 20) = v61;
    v31[40] = v12;
    *(_WORD *)(v31 + 41) = v63;
    v31[43] = v64;
    *(_QWORD *)(v31 + 44) = v13;
    *((_DWORD *)v31 + 13) = v14;
    v31[56] = v15;
    v32 = (float)(unint64_t)(*(_QWORD *)(v7 + 792) + 1);
    v33 = *(float *)(v7 + 800);
    if (v22 && (float)(v33 * (float)v22) >= v32)
    {
LABEL_119:
      v58 = *(_QWORD *)(v7 + 768);
      v59 = *(_QWORD **)(v58 + 8 * v2);
      if (v59)
      {
        *(_QWORD *)v31 = *v59;
      }
      else
      {
        *(_QWORD *)v31 = *(_QWORD *)(v7 + 784);
        *(_QWORD *)(v7 + 784) = v31;
        *(_QWORD *)(v58 + 8 * v2) = v7 + 784;
        if (!*(_QWORD *)v31)
        {
LABEL_128:
          ++*(_QWORD *)(v7 + 792);
          return;
        }
        v60 = *(_QWORD *)(*(_QWORD *)v31 + 8);
        if ((v22 & (v22 - 1)) != 0)
        {
          if (v60 >= v22)
            v60 %= v22;
        }
        else
        {
          v60 &= v22 - 1;
        }
        v59 = (_QWORD *)(*(_QWORD *)(v7 + 768) + 8 * v60);
      }
      *v59 = v31;
      goto LABEL_128;
    }
    v34 = 1;
    if (v22 >= 3)
      v34 = (v22 & (v22 - 1)) != 0;
    v35 = v34 | (2 * v22);
    v36 = vcvtps_u32_f32(v32 / v33);
    if (v35 <= v36)
      prime = v36;
    else
      prime = v35;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v22 = *(_QWORD *)(v7 + 776);
    }
    if (prime <= v22)
    {
      if (prime >= v22)
        goto LABEL_115;
      v50 = vcvtps_u32_f32((float)*(unint64_t *)(v7 + 792) / *(float *)(v7 + 800));
      if (v22 < 3 || (v51 = (uint8x8_t)vcnt_s8((int8x8_t)v22), v51.i16[0] = vaddlv_u8(v51), v51.u32[0] > 1uLL))
      {
        v50 = std::__next_prime(v50);
      }
      else
      {
        v52 = 1 << -(char)__clz(v50 - 1);
        if (v50 >= 2)
          v50 = v52;
      }
      if (prime <= v50)
        prime = v50;
      if (prime >= v22)
        goto LABEL_115;
      if (!prime)
      {
        v57 = *(void **)(v7 + 768);
        *(_QWORD *)(v7 + 768) = 0;
        if (v57)
          operator delete(v57);
        *(_QWORD *)(v7 + 776) = 0;
        goto LABEL_115;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v38 = operator new(8 * prime);
    v39 = *(void **)(v7 + 768);
    *(_QWORD *)(v7 + 768) = v38;
    if (v39)
      operator delete(v39);
    v40 = 0;
    *(_QWORD *)(v7 + 776) = prime;
    do
      *(_QWORD *)(*(_QWORD *)(v7 + 768) + 8 * v40++) = 0;
    while (prime != v40);
    v41 = *(_QWORD **)(v7 + 784);
    if (!v41)
    {
LABEL_115:
      v22 = *(_QWORD *)(v7 + 776);
      if ((v22 & (v22 - 1)) != 0)
      {
        v2 = v62;
        if (v62 >= v22)
          v2 = v62 % v22;
      }
      else
      {
        v2 = (v22 - 1) & v62;
      }
      goto LABEL_119;
    }
    v42 = v7 + 784;
    v43 = v41[1];
    v44 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v45 = v43 & v44;
      *(_QWORD *)(*(_QWORD *)(v7 + 768) + 8 * v45) = v42;
      while (1)
      {
        v46 = (_QWORD *)*v41;
        if (!*v41)
          break;
        v47 = v46[1] & v44;
        if (v47 == v45)
        {
          v41 = (_QWORD *)*v41;
        }
        else
        {
          v48 = *(_QWORD *)(v7 + 768);
          if (*(_QWORD *)(v48 + 8 * v47))
          {
            *v41 = *v46;
            v49 = 8 * v47;
            *v46 = **(_QWORD **)(*(_QWORD *)(v7 + 768) + v49);
            **(_QWORD **)(*(_QWORD *)(v7 + 768) + v49) = v46;
          }
          else
          {
            *(_QWORD *)(v48 + 8 * v47) = v41;
            v41 = v46;
            v45 = v47;
          }
        }
      }
      goto LABEL_115;
    }
    if (v43 >= prime)
      v43 %= prime;
    *(_QWORD *)(*(_QWORD *)(v7 + 768) + 8 * v43) = v42;
    v53 = (_QWORD *)*v41;
    if (!*v41)
      goto LABEL_115;
    while (1)
    {
      v55 = v53[1];
      if (v55 >= prime)
        v55 %= prime;
      if (v55 != v43)
      {
        v56 = *(_QWORD *)(v7 + 768);
        if (!*(_QWORD *)(v56 + 8 * v55))
        {
          *(_QWORD *)(v56 + 8 * v55) = v41;
          goto LABEL_101;
        }
        *v41 = *v53;
        v54 = 8 * v55;
        *v53 = **(_QWORD **)(*(_QWORD *)(v7 + 768) + v54);
        **(_QWORD **)(*(_QWORD *)(v7 + 768) + v54) = v53;
        v53 = v41;
      }
      v55 = v43;
LABEL_101:
      v41 = v53;
      v53 = (_QWORD *)*v53;
      v43 = v55;
      if (!v53)
        goto LABEL_115;
    }
  }
}

void sub_19FD2C3F8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,md::FlyoverCompleteTileDataLogic::FallbackInfo>,std::__unordered_map_hasher<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,md::FlyoverCompleteTileDataLogic::FallbackInfo>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>,true>,std::__unordered_map_equal<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,md::FlyoverCompleteTileDataLogic::FallbackInfo>,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>,md::FlyoverOctilePairHash,true>,std::allocator<std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,md::FlyoverCompleteTileDataLogic::FallbackInfo>>>::__emplace_unique_key_args<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::pair<std::pair<md::FlyoverOctile,md::FlyoverOctile> const,md::FlyoverCompleteTileDataLogic::FallbackInfo>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint8x8_t v16;
  unsigned __int8 **v17;
  unsigned __int8 *v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  char *v22;
  __int128 v23;
  float v24;
  float v25;
  _BOOL8 v26;
  unint64_t v27;
  unint64_t v28;
  size_t prime;
  int8x8_t v30;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;

  v6 = (a2[1]
      + ((*a2 - 0x61C8864680B583EBLL) << 6)
      + (((unint64_t)*a2 - 0x61C8864680B583EBLL) >> 2)
      - 0x61C8864680B583EBLL) ^ (*a2 - 0x61C8864680B583EBLL);
  v7 = (*((int *)a2 + 1) + (v6 << 6) + (v6 >> 2) - 0x61C8864680B583EBLL) ^ v6;
  if ((*(_QWORD *)(a2 + 28) & 0xFF00000000) != 0)
    v8 = 2 * *(_QWORD *)(a2 + 28);
  else
    v8 = 0;
  v9 = (v8 | ((unint64_t)*((unsigned int *)a2 + 9) << 33)) ^ v7 ^ (*((int *)a2 + 2)
                                                                        + (v7 << 6)
                                                                        + (v7 >> 2)
                                                                        - 0x61C8864680B583EBLL);
  v10 = (a2[41]
       + ((a2[40] - 0x61C8864680B583EBLL) << 6)
       + (((unint64_t)a2[40] - 0x61C8864680B583EBLL) >> 2)
       - 0x61C8864680B583EBLL) ^ (a2[40] - 0x61C8864680B583EBLL);
  v11 = (*((int *)a2 + 11) + (v10 << 6) + (v10 >> 2) - 0x61C8864680B583EBLL) ^ v10;
  if ((*(_QWORD *)(a2 + 68) & 0xFF00000000) != 0)
    v12 = 2 * *(_QWORD *)(a2 + 68);
  else
    v12 = 0;
  v13 = ((v9 << 6)
       + (v9 >> 2)
       + ((v12 | ((unint64_t)*((unsigned int *)a2 + 19) << 33)) ^ v11 ^ (*((int *)a2 + 12)
                                                                              + (v11 << 6)
                                                                              + (v11 >> 2)
                                                                              - 0x61C8864680B583EBLL))
       - 0x61C8864680B583EBLL) ^ v9;
  v14 = *(_QWORD *)(a1 + 8);
  if (v14)
  {
    v16 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
    v16.i16[0] = vaddlv_u8(v16);
    if (v16.u32[0] > 1uLL)
    {
      v3 = ((v9 << 6)
          + (v9 >> 2)
          + ((v12 | ((unint64_t)*((unsigned int *)a2 + 19) << 33)) ^ v11 ^ (*((int *)a2 + 12)
                                                                                 + (v11 << 6)
                                                                                 + (v11 >> 2)
                                                                                 - 0x61C8864680B583EBLL))
          - 0x61C8864680B583EBLL) ^ v9;
      if (v13 >= v14)
        v3 = v13 % v14;
    }
    else
    {
      v3 = v13 & (v14 - 1);
    }
    v17 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v17)
    {
      v18 = *v17;
      if (*v17)
      {
        if (v16.u32[0] < 2uLL)
        {
          while (1)
          {
            v20 = *((_QWORD *)v18 + 1);
            if (v20 == v13)
            {
              if (std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>::operator()[abi:nn180100](v18 + 16, a2))
                return;
            }
            else if ((v20 & (v14 - 1)) != v3)
            {
              goto LABEL_28;
            }
            v18 = *(unsigned __int8 **)v18;
            if (!v18)
              goto LABEL_28;
          }
        }
        do
        {
          v19 = *((_QWORD *)v18 + 1);
          if (v19 == v13)
          {
            if (std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>::operator()[abi:nn180100](v18 + 16, a2))
              return;
          }
          else
          {
            if (v19 >= v14)
              v19 %= v14;
            if (v19 != v3)
              break;
          }
          v18 = *(unsigned __int8 **)v18;
        }
        while (v18);
      }
    }
  }
LABEL_28:
  v21 = (_QWORD *)(a1 + 16);
  v22 = (char *)operator new(0xF8uLL);
  *(_QWORD *)v22 = 0;
  *((_QWORD *)v22 + 1) = v13;
  *((_WORD *)v22 + 8) = *(_WORD *)a3;
  *(_QWORD *)(v22 + 20) = *(_QWORD *)(a3 + 4);
  *(_OWORD *)(v22 + 40) = *(_OWORD *)(a3 + 24);
  *((_WORD *)v22 + 28) = *(_WORD *)(a3 + 40);
  *(_QWORD *)(v22 + 60) = *(_QWORD *)(a3 + 44);
  v23 = *(_OWORD *)(a3 + 64);
  v22[96] = *(_BYTE *)(a3 + 80);
  *((_OWORD *)v22 + 5) = v23;
  gdc::LayerDataKey::LayerDataKey((uint64_t)(v22 + 104), a3 + 88);
  v22[192] = 0;
  if (*(_BYTE *)(a3 + 176))
  {
    *((_DWORD *)v22 + 49) = *(_DWORD *)(a3 + 180);
    v22[192] = 1;
  }
  *((_QWORD *)v22 + 25) = *(_QWORD *)(a3 + 184);
  *((_WORD *)v22 + 104) = *(_WORD *)(a3 + 192);
  *(_QWORD *)(v22 + 212) = *(_QWORD *)(a3 + 196);
  *(_OWORD *)(v22 + 232) = *(_OWORD *)(a3 + 216);
  *(_QWORD *)(a3 + 216) = 0;
  *(_QWORD *)(a3 + 224) = 0;
  v24 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v25 = *(float *)(a1 + 32);
  if (!v14 || (float)(v25 * (float)v14) < v24)
  {
    v26 = v14 < 3 || (v14 & (v14 - 1)) != 0;
    v27 = v26 | (2 * v14);
    v28 = vcvtps_u32_f32(v24 / v25);
    if (v27 <= v28)
      prime = v28;
    else
      prime = v27;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v30 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v30)
      goto LABEL_43;
    if (prime < *(_QWORD *)&v30)
    {
      v31 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v30 < 3uLL || (v32 = (uint8x8_t)vcnt_s8(v30), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        v31 = std::__next_prime(v31);
      }
      else
      {
        v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2)
          v31 = v33;
      }
      if (prime <= v31)
        prime = v31;
      if (prime < *(_QWORD *)&v30)
LABEL_43:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v14 = *(_QWORD *)(a1 + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v13 >= v14)
        v3 = v13 % v14;
      else
        v3 = v13;
    }
    else
    {
      v3 = (v14 - 1) & v13;
    }
  }
  v34 = *(_QWORD *)a1;
  v35 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v35)
  {
    *(_QWORD *)v22 = *v35;
LABEL_67:
    *v35 = v22;
    goto LABEL_68;
  }
  *(_QWORD *)v22 = *v21;
  *v21 = v22;
  *(_QWORD *)(v34 + 8 * v3) = v21;
  if (*(_QWORD *)v22)
  {
    v36 = *(_QWORD *)(*(_QWORD *)v22 + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v36 >= v14)
        v36 %= v14;
    }
    else
    {
      v36 &= v14 - 1;
    }
    v35 = (_QWORD *)(*(_QWORD *)a1 + 8 * v36);
    goto LABEL_67;
  }
LABEL_68:
  ++*(_QWORD *)(a1 + 24);
}

void sub_19FD2C84C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,md::FlyoverCompleteTileDataLogic::FallbackInfo>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,md::FlyoverCompleteTileDataLogic::FallbackInfo>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::pair<md::FlyoverOctile,md::FlyoverOctile> const,md::FlyoverCompleteTileDataLogic::FallbackInfo>::~pair(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    if (!*(_BYTE *)(a1 + 176))
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  if (*(_BYTE *)(a1 + 176))
LABEL_6:
    *(_BYTE *)(a1 + 176) = 0;
LABEL_7:
  v5 = *(void **)(a1 + 96);
  if (v5 != *(void **)(a1 + 112))
    free(v5);
  return a1;
}

void md::FlyoverCompleteTileDataLogic::FallbackInfo::~FallbackInfo(md::FlyoverCompleteTileDataLogic::FallbackInfo *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    if (!*((_BYTE *)this + 96))
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  if (*((_BYTE *)this + 96))
LABEL_6:
    *((_BYTE *)this + 96) = 0;
LABEL_7:
  v5 = (void *)*((_QWORD *)this + 2);
  if (v5 != *((void **)this + 4))
    free(v5);
}

uint64_t std::__hash_table<std::__hash_value_type<geo::QuadTile,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  _BYTE *v6;
  void *v7;
  _BYTE *v8;
  void *v9;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = (_BYTE *)v2[7];
      if (v6)
      {
        do
        {
          if (v6[112])
            v6[112] = 0;
          v8 = *(_BYTE **)v6;
          v9 = (void *)*((_QWORD *)v6 + 4);
          if (v9 != *((void **)v6 + 6))
            free(v9);
          operator delete(v6);
          v6 = v8;
        }
        while (v8);
      }
      v7 = (void *)v2[5];
      v2[5] = 0;
      if (v7)
        operator delete(v7);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

_QWORD *std::__hash_table<std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,md::FlyoverCompleteTileDataLogic::MeshStorage>,std::__unordered_map_hasher<md::FlyoverCompleteTileDataLogic::DrapingTask,std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,md::FlyoverCompleteTileDataLogic::MeshStorage>,md::FlyoverCompleteTileDataLogic::DrapingTaskHash,std::equal_to<md::FlyoverCompleteTileDataLogic::DrapingTask>,true>,std::__unordered_map_equal<md::FlyoverCompleteTileDataLogic::DrapingTask,std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,md::FlyoverCompleteTileDataLogic::MeshStorage>,std::equal_to<md::FlyoverCompleteTileDataLogic::DrapingTask>,md::FlyoverCompleteTileDataLogic::DrapingTaskHash,true>,std::allocator<std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,md::FlyoverCompleteTileDataLogic::MeshStorage>>>::find<md::FlyoverCompleteTileDataLogic::DrapingTask>(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v4 = md::FlyoverCompleteTileDataLogic::DrapingTaskHash::operator()(a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    v8 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v8 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v8 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v9 = *(_QWORD **)(*a1 + 8 * v8);
  if (!v9)
    return 0;
  v10 = (_QWORD *)*v9;
  if (*v9)
  {
    if (v7.u32[0] < 2uLL)
    {
      v11 = *(_QWORD *)&v5 - 1;
      while (1)
      {
        v13 = v10[1];
        if (v13 == v6)
        {
          if (md::FlyoverCompleteTileDataLogic::DrapingTask::operator==((uint64_t)(v10 + 2), a2))
            return v10;
        }
        else if ((v13 & v11) != v8)
        {
          return 0;
        }
        v10 = (_QWORD *)*v10;
        if (!v10)
          return v10;
      }
    }
    do
    {
      v12 = v10[1];
      if (v12 == v6)
      {
        if (md::FlyoverCompleteTileDataLogic::DrapingTask::operator==((uint64_t)(v10 + 2), a2))
          return v10;
      }
      else
      {
        if (v12 >= *(_QWORD *)&v5)
          v12 %= *(_QWORD *)&v5;
        if (v12 != v8)
          return 0;
      }
      v10 = (_QWORD *)*v10;
    }
    while (v10);
  }
  return v10;
}

_QWORD *std::pair<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>>::~pair(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;

  if (a1[12])
  {
    v2 = a1 + 10;
    v4 = a1[10];
    v3 = (uint64_t *)a1[11];
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    a1[12] = 0;
    if (v3 != a1 + 10)
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        std::__list_imp<md::FlyoverDynamicGeometry>::__delete_node[abi:nn180100]<>(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  return a1;
}

uint64_t *std::list<md::FlyoverDynamicGeometry>::~list(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v3 = *a1;
    v2 = (uint64_t *)a1[1];
    v4 = *v2;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v3 + 8) = v4;
    a1[2] = 0;
    if (v2 != a1)
    {
      do
      {
        v5 = (uint64_t *)v2[1];
        std::__list_imp<md::FlyoverDynamicGeometry>::__delete_node[abi:nn180100]<>(v2);
        v2 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

uint64_t std::pair<md::FlyoverCompleteTileDataLogic::DrapingTask const,std::shared_ptr<geo::Task>>::~pair(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 112);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 8);
    if (!v5)
      return a1;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 8);
    if (!v5)
      return a1;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return a1;
}

unint64_t md::FlyoverCompleteTileDataLogic::DrapingTaskHash::operator()(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v1 = (*(unsigned __int8 *)(a1 + 65)
      + ((*(unsigned __int8 *)(a1 + 64) - 0x61C8864680B583EBLL) << 6)
      + (((unint64_t)*(unsigned __int8 *)(a1 + 64) - 0x61C8864680B583EBLL) >> 2)
      - 0x61C8864680B583EBLL) ^ (*(unsigned __int8 *)(a1 + 64) - 0x61C8864680B583EBLL);
  v2 = (*(int *)(a1 + 68) + (v1 << 6) + (v1 >> 2) - 0x61C8864680B583EBLL) ^ v1;
  if ((*(_QWORD *)(a1 + 92) & 0xFF00000000) != 0)
    v3 = 2 * *(_QWORD *)(a1 + 92);
  else
    v3 = 0;
  v4 = (v3 | ((unint64_t)*(unsigned int *)(a1 + 100) << 33)) ^ v2 ^ (*(int *)(a1 + 72)
                                                                          + (v2 << 6)
                                                                          + (v2 >> 2)
                                                                          - 0x61C8864680B583EBLL);
  v5 = (*(unsigned __int8 *)(a1 + 25)
      + ((*(unsigned __int8 *)(a1 + 24) - 0x61C8864680B583EBLL) << 6)
      + (((unint64_t)*(unsigned __int8 *)(a1 + 24) - 0x61C8864680B583EBLL) >> 2)
      - 0x61C8864680B583EBLL) ^ (*(unsigned __int8 *)(a1 + 24) - 0x61C8864680B583EBLL);
  v6 = (*(int *)(a1 + 28) + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583EBLL) ^ v5;
  if ((*(_QWORD *)(a1 + 52) & 0xFF00000000) != 0)
    v7 = 2 * *(_QWORD *)(a1 + 52);
  else
    v7 = 0;
  v8 = ((v4 << 6)
      + (v4 >> 2)
      + ((v7 | ((unint64_t)*(unsigned int *)(a1 + 60) << 33)) ^ v6 ^ (*(int *)(a1 + 32)
                                                                           + (v6 << 6)
                                                                           + (v6 >> 2)
                                                                           - 0x61C8864680B583EBLL))
      - 0x61C8864680B583EBLL) ^ v4;
  v9 = *(_QWORD *)(a1 + 16);
  v10 = HIDWORD(v9);
  v11 = 0x9DDFEA08EB382D69 * (((8 * v9) + 8) ^ HIDWORD(v9));
  return (0x9DDFEA08EB382D69
        * ((0x9DDFEA08EB382D69 * (v10 ^ (v11 >> 47) ^ v11)) ^ ((0x9DDFEA08EB382D69 * (v10 ^ (v11 >> 47) ^ v11)) >> 47))
        + (v8 << 6)
        + (v8 >> 2)
        - 0x61C8864680B583EBLL) ^ v8;
}

BOOL md::FlyoverCompleteTileDataLogic::DrapingTask::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 88) != *(unsigned __int8 *)(a2 + 88)
    || *(unsigned __int8 *)(a1 + 64) != *(unsigned __int8 *)(a2 + 64)
    || *(unsigned __int8 *)(a1 + 65) != *(unsigned __int8 *)(a2 + 65)
    || *(_DWORD *)(a1 + 68) != *(_DWORD *)(a2 + 68)
    || *(_DWORD *)(a1 + 72) != *(_DWORD *)(a2 + 72)
    || *(_DWORD *)(a1 + 100) != *(_DWORD *)(a2 + 100))
  {
    return 0;
  }
  if (*(_BYTE *)(a1 + 96) && *(_BYTE *)(a2 + 96))
  {
    if (*(_DWORD *)(a1 + 92) != *(_DWORD *)(a2 + 92))
      return 0;
  }
  else if ((*(_BYTE *)(a1 + 96) != 0) != (*(_BYTE *)(a2 + 96) != 0))
  {
    return 0;
  }
  if (*(unsigned __int8 *)(a1 + 48) != *(unsigned __int8 *)(a2 + 48)
    || *(unsigned __int8 *)(a1 + 24) != *(unsigned __int8 *)(a2 + 24)
    || *(unsigned __int8 *)(a1 + 25) != *(unsigned __int8 *)(a2 + 25)
    || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28)
    || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32)
    || *(_DWORD *)(a1 + 60) != *(_DWORD *)(a2 + 60))
  {
    return 0;
  }
  if (*(_BYTE *)(a1 + 56) && *(_BYTE *)(a2 + 56))
  {
    if (*(_DWORD *)(a1 + 52) != *(_DWORD *)(a2 + 52))
      return 0;
  }
  else if ((*(_BYTE *)(a1 + 56) != 0) != (*(_BYTE *)(a2 + 56) != 0))
  {
    return 0;
  }
  return *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16);
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,std::shared_ptr<geo::Task>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,std::shared_ptr<geo::Task>>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (std::__shared_weak_count *)v2[16];
      if (v3)
      {
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v5 = __ldaxr(p_shared_owners);
        while (__stlxr(v5 - 1, p_shared_owners));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
      v6 = (std::__shared_weak_count *)v2[3];
      if (v6)
      {
        v7 = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
    operator delete(v2);
  }
  return a1;
}

_QWORD *std::__function::__func<md::FlyoverCompleteTileDataLogic::submitDrapings(md::FlyoverCompleteTileDataLogic::DrapingTask const&)::$_0,std::allocator<md::FlyoverCompleteTileDataLogic::submitDrapings(md::FlyoverCompleteTileDataLogic::DrapingTask const&)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_1E427AF50;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void std::__function::__func<md::FlyoverCompleteTileDataLogic::submitDrapings(md::FlyoverCompleteTileDataLogic::DrapingTask const&)::$_0,std::allocator<md::FlyoverCompleteTileDataLogic::submitDrapings(md::FlyoverCompleteTileDataLogic::DrapingTask const&)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_1E427AF50;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::FlyoverCompleteTileDataLogic::submitDrapings(md::FlyoverCompleteTileDataLogic::DrapingTask const&)::$_0,std::allocator<md::FlyoverCompleteTileDataLogic::submitDrapings(md::FlyoverCompleteTileDataLogic::DrapingTask const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v2 = (char *)operator new(0x78uLL);
  *(_QWORD *)v2 = &off_1E427AF50;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)v2 + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *((_QWORD *)v2 + 4) = *(_QWORD *)(a1 + 32);
  *((_WORD *)v2 + 20) = *(_WORD *)(a1 + 40);
  *(_QWORD *)(v2 + 44) = *(_QWORD *)(a1 + 44);
  *((_OWORD *)v2 + 4) = *(_OWORD *)(a1 + 64);
  *((_WORD *)v2 + 40) = *(_WORD *)(a1 + 80);
  *(_QWORD *)(v2 + 84) = *(_QWORD *)(a1 + 84);
  result = *(__n128 *)(a1 + 104);
  *(__n128 *)(v2 + 104) = result;
  return result;
}

__n128 std::__function::__func<md::FlyoverCompleteTileDataLogic::submitDrapings(md::FlyoverCompleteTileDataLogic::DrapingTask const&)::$_0,std::allocator<md::FlyoverCompleteTileDataLogic::submitDrapings(md::FlyoverCompleteTileDataLogic::DrapingTask const&)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  __n128 result;

  *(_QWORD *)a2 = &off_1E427AF50;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  *(_WORD *)(a2 + 40) = *(_WORD *)(a1 + 40);
  *(_QWORD *)(a2 + 44) = *(_QWORD *)(a1 + 44);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
  *(_WORD *)(a2 + 80) = *(_WORD *)(a1 + 80);
  *(_QWORD *)(a2 + 84) = *(_QWORD *)(a1 + 84);
  result = *(__n128 *)(a1 + 104);
  *(__n128 *)(a2 + 104) = result;
  return result;
}

void std::__function::__func<md::FlyoverCompleteTileDataLogic::submitDrapings(md::FlyoverCompleteTileDataLogic::DrapingTask const&)::$_0,std::allocator<md::FlyoverCompleteTileDataLogic::submitDrapings(md::FlyoverCompleteTileDataLogic::DrapingTask const&)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__function::__func<md::FlyoverCompleteTileDataLogic::submitDrapings(md::FlyoverCompleteTileDataLogic::DrapingTask const&)::$_0,std::allocator<md::FlyoverCompleteTileDataLogic::submitDrapings(md::FlyoverCompleteTileDataLogic::DrapingTask const&)::$_0>,void ()(void)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(__p);
}

void std::__function::__func<md::FlyoverCompleteTileDataLogic::submitDrapings(md::FlyoverCompleteTileDataLogic::DrapingTask const&)::$_0,std::allocator<md::FlyoverCompleteTileDataLogic::submitDrapings(md::FlyoverCompleteTileDataLogic::DrapingTask const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  char v2;
  float v3;
  float v4;
  int v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  _QWORD *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  std::__shared_weak_count *v26;
  unint64_t v27;
  unint64_t *v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint8x8_t v47;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  unint64_t *v54;
  unint64_t v55;
  float v56;
  float v57;
  _BOOL8 v58;
  unint64_t v59;
  unint64_t v60;
  size_t prime;
  void *v62;
  void *v63;
  uint64_t v64;
  _QWORD *v65;
  size_t v66;
  size_t v67;
  size_t v68;
  _QWORD *i;
  size_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint8x8_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  size_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  std::mutex *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  void *v102;
  _QWORD *v103;
  char v104;
  char v105;
  char v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  uint64_t v112;
  char v113;
  char v114;
  uint64_t v115;
  __int128 v116;
  char v117;
  char v118;
  uint64_t v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  _BYTE v123[25];
  uint64_t v124;
  std::__shared_weak_count *v125;
  _QWORD *v126;
  uint64_t v127;
  __int128 v128;
  uint64_t v129;
  __int128 v130;
  uint64_t v131;
  uint64_t v132[3];

  v2 = *(_BYTE *)(a1 + 41) - *(_BYTE *)(a1 + 81);
  v3 = (float)(1 << v2);
  v4 = (float)(*(_DWORD *)(a1 + 48) - (*(_DWORD *)(a1 + 88) << v2)) / v3;
  v5 = ((*(_DWORD *)(a1 + 84) + 1) << v2) + ~*(_DWORD *)(a1 + 44);
  v6 = *(_QWORD *)(a1 + 32);
  if (v6)
    v7 = *(_BYTE *)(v6 + 57);
  else
    v7 = 0;
  v8 = *(_QWORD *)(a1 + 8);
  *(float *)&v110 = v4;
  *((float *)&v110 + 1) = (float)v5 / v3;
  *(float *)v132 = 1.0 / v3;
  md::FlyoverTileBuilder::generateHeightMesh((uint64_t)&v124, a1 + 40, v6, (float *)&v110, (float *)v132);
  v9 = (std::__shared_weak_count *)operator new(0xA8uLL);
  v10 = v9;
  v9->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  v9->__shared_weak_owners_ = 0;
  v9->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE570;
  v12 = &v9[1].__vftable;
  v110 = v124;
  v111 = v125;
  if (v125)
  {
    v13 = (unint64_t *)&v125->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = (std::__shared_weak_count *)v127;
  v132[0] = (uint64_t)v126;
  v132[1] = v127;
  if (v127)
  {
    v16 = (unint64_t *)(v127 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    ggl::CommonMesh::Pos4UVMesh::Pos4UVMesh((uint64_t)&v9[1], (uint64_t)"Height Mesh Fallback", &v110, v132);
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 - 1, v16));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  else
  {
    ggl::CommonMesh::Pos4UVMesh::Pos4UVMesh((uint64_t)&v9[1], (uint64_t)"Height Mesh Fallback", &v110, v132);
  }
  v19 = v111;
  if (v111)
  {
    v20 = (unint64_t *)&v111->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v23 = v126[5];
  v22 = v126[6];
  v24 = v126[1];
  v25 = (char *)operator new(0x68uLL);
  v26 = (std::__shared_weak_count *)v25;
  v27 = v22 - v23;
  *((_QWORD *)v25 + 1) = 0;
  v28 = (unint64_t *)(v25 + 8);
  *((_QWORD *)v25 + 2) = 0;
  *(_QWORD *)v25 = &off_1E428A108;
  v29 = v25 + 24;
  v30 = v27 / v24;
  do
    v31 = __ldxr(p_shared_owners);
  while (__stxr(v31 + 1, p_shared_owners));
  *((_QWORD *)v25 + 3) = v12;
  *((_QWORD *)v25 + 4) = v10;
  do
    v32 = __ldxr(p_shared_owners);
  while (__stxr(v32 + 1, p_shared_owners));
  *((_QWORD *)v25 + 5) = 0;
  *((_QWORD *)v25 + 6) = v30;
  v25[56] = 3;
  *(_OWORD *)(v25 + 60) = v130;
  *(_QWORD *)(v25 + 76) = v131;
  *((_WORD *)v25 + 42) = 0;
  *((_QWORD *)v25 + 11) = 0;
  *((_QWORD *)v25 + 12) = 0;
  do
    v33 = __ldaxr(p_shared_owners);
  while (__stlxr(v33 - 1, p_shared_owners));
  if (!v33)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  std::mutex::lock((std::mutex *)(v8 + 488));
  do
    v34 = __ldxr(v28);
  while (__stxr(v34 + 1, v28));
  do
    v35 = __ldxr(p_shared_owners);
  while (__stxr(v35 + 1, p_shared_owners));
  v36 = *(std::__shared_weak_count **)(a1 + 24);
  v109 = *(_QWORD *)(a1 + 16);
  v110 = v109;
  v111 = v36;
  if (v36)
  {
    v37 = (unint64_t *)&v36->__shared_owners_;
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
  }
  v108 = *(_QWORD *)(a1 + 32);
  v112 = v108;
  v106 = *(_BYTE *)(a1 + 40);
  v107 = *(_BYTE *)(a1 + 41);
  v113 = v106;
  v114 = v107;
  v39 = *(_QWORD *)(a1 + 44);
  v115 = v39;
  v116 = *(_OWORD *)(a1 + 64);
  v104 = *(_BYTE *)(a1 + 80);
  v105 = *(_BYTE *)(a1 + 81);
  v117 = v104;
  v118 = v105;
  v40 = *(_QWORD *)(a1 + 84);
  v119 = v40;
  v120 = *(_OWORD *)(a1 + 104);
  v41 = (unint64_t)&v121;
  *(_QWORD *)&v121 = v29;
  *((_QWORD *)&v121 + 1) = v26;
  do
    v42 = __ldxr(v28);
  while (__stxr(v42 + 1, v28));
  *(_QWORD *)&v122 = v12;
  *((_QWORD *)&v122 + 1) = v10;
  do
    v43 = __ldxr(p_shared_owners);
  while (__stxr(v43 + 1, p_shared_owners));
  *(_OWORD *)v123 = v128;
  *(_QWORD *)&v123[16] = v129;
  v123[24] = v7;
  v44 = md::FlyoverCompleteTileDataLogic::DrapingTaskHash::operator()((uint64_t)&v110);
  v45 = v44;
  v46 = *(_QWORD *)(v8 + 640);
  if (!v46)
    goto LABEL_59;
  v47 = (uint8x8_t)vcnt_s8((int8x8_t)v46);
  v47.i16[0] = vaddlv_u8(v47);
  if (v47.u32[0] > 1uLL)
  {
    v41 = v44;
    if (v44 >= v46)
      v41 = v44 % v46;
  }
  else
  {
    v41 = (v46 - 1) & v44;
  }
  v48 = *(_QWORD **)(*(_QWORD *)(v8 + 632) + 8 * v41);
  if (!v48 || (v49 = (_QWORD *)*v48) == 0)
  {
LABEL_59:
    v52 = (char *)operator new(0xB8uLL);
    v53 = v52;
    v103 = (_QWORD *)(v8 + 648);
    *(_QWORD *)v52 = 0;
    *((_QWORD *)v52 + 1) = v45;
    *((_QWORD *)v52 + 2) = v109;
    *((_QWORD *)v52 + 3) = v36;
    if (v36)
    {
      v54 = (unint64_t *)&v36->__shared_owners_;
      do
        v55 = __ldxr(v54);
      while (__stxr(v55 + 1, v54));
    }
    *((_QWORD *)v52 + 4) = v108;
    v52[40] = v106;
    v52[41] = v107;
    *(_QWORD *)(v52 + 44) = v39;
    *((_OWORD *)v52 + 4) = v116;
    v52[80] = v104;
    v52[81] = v105;
    *(_QWORD *)(v52 + 84) = v40;
    *(_OWORD *)(v52 + 104) = v120;
    *(_OWORD *)(v52 + 120) = v121;
    v121 = 0uLL;
    *(_OWORD *)(v52 + 136) = v122;
    v122 = 0uLL;
    *(_OWORD *)(v52 + 161) = *(_OWORD *)&v123[9];
    *(_OWORD *)(v52 + 152) = *(_OWORD *)v123;
    v56 = (float)(unint64_t)(*(_QWORD *)(v8 + 656) + 1);
    v57 = *(float *)(v8 + 664);
    if (v46 && (float)(v57 * (float)v46) >= v56)
    {
LABEL_112:
      v80 = *(_QWORD *)(v8 + 632);
      v81 = *(_QWORD **)(v80 + 8 * v41);
      if (v81)
      {
        *(_QWORD *)v53 = *v81;
        v82 = (std::mutex *)(v8 + 488);
      }
      else
      {
        *(_QWORD *)v53 = *v103;
        *v103 = v53;
        *(_QWORD *)(v80 + 8 * v41) = v103;
        v82 = (std::mutex *)(v8 + 488);
        if (!*(_QWORD *)v53)
        {
LABEL_121:
          ++*(_QWORD *)(v8 + 656);
          goto LABEL_122;
        }
        v83 = *(_QWORD *)(*(_QWORD *)v53 + 8);
        if ((v46 & (v46 - 1)) != 0)
        {
          if (v83 >= v46)
            v83 %= v46;
        }
        else
        {
          v83 &= v46 - 1;
        }
        v81 = (_QWORD *)(*(_QWORD *)(v8 + 632) + 8 * v83);
      }
      *v81 = v53;
      goto LABEL_121;
    }
    v58 = 1;
    if (v46 >= 3)
      v58 = (v46 & (v46 - 1)) != 0;
    v59 = v58 | (2 * v46);
    v60 = vcvtps_u32_f32(v56 / v57);
    if (v59 <= v60)
      prime = v60;
    else
      prime = v59;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v46 = *(_QWORD *)(v8 + 640);
    if (prime <= v46)
    {
      if (prime >= v46)
        goto LABEL_99;
      v73 = vcvtps_u32_f32((float)*(unint64_t *)(v8 + 656) / *(float *)(v8 + 664));
      if (v46 < 3 || (v74 = (uint8x8_t)vcnt_s8((int8x8_t)v46), v74.i16[0] = vaddlv_u8(v74), v74.u32[0] > 1uLL))
      {
        v73 = std::__next_prime(v73);
      }
      else
      {
        v75 = 1 << -(char)__clz(v73 - 1);
        if (v73 >= 2)
          v73 = v75;
      }
      if (prime <= v73)
        prime = v73;
      if (prime >= v46)
      {
        v46 = *(_QWORD *)(v8 + 640);
LABEL_99:
        if ((v46 & (v46 - 1)) != 0)
        {
          if (v45 >= v46)
            v41 = v45 % v46;
          else
            v41 = v45;
        }
        else
        {
          v41 = (v46 - 1) & v45;
        }
        goto LABEL_112;
      }
      if (!prime)
      {
        v102 = *(void **)(v8 + 632);
        *(_QWORD *)(v8 + 632) = 0;
        if (v102)
          operator delete(v102);
        v46 = 0;
        *(_QWORD *)(v8 + 640) = 0;
        goto LABEL_99;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v62 = operator new(8 * prime);
    v63 = *(void **)(v8 + 632);
    *(_QWORD *)(v8 + 632) = v62;
    if (v63)
      operator delete(v63);
    v64 = 0;
    *(_QWORD *)(v8 + 640) = prime;
    do
      *(_QWORD *)(*(_QWORD *)(v8 + 632) + 8 * v64++) = 0;
    while (prime != v64);
    v65 = (_QWORD *)*v103;
    if (!*v103)
    {
LABEL_98:
      v46 = prime;
      goto LABEL_99;
    }
    v66 = v65[1];
    v67 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v68 = v66 & v67;
      *(_QWORD *)(*(_QWORD *)(v8 + 632) + 8 * v68) = v103;
      for (i = (_QWORD *)*v65; *v65; i = (_QWORD *)*v65)
      {
        v70 = i[1] & v67;
        if (v70 == v68)
        {
          v65 = i;
        }
        else
        {
          v71 = *(_QWORD *)(v8 + 632);
          if (*(_QWORD *)(v71 + 8 * v70))
          {
            *v65 = *i;
            v72 = 8 * v70;
            *i = **(_QWORD **)(*(_QWORD *)(v8 + 632) + v72);
            **(_QWORD **)(*(_QWORD *)(v8 + 632) + v72) = i;
          }
          else
          {
            *(_QWORD *)(v71 + 8 * v70) = v65;
            v65 = i;
            v68 = v70;
          }
        }
      }
      goto LABEL_98;
    }
    if (v66 >= prime)
      v66 %= prime;
    *(_QWORD *)(*(_QWORD *)(v8 + 632) + 8 * v66) = v103;
    v76 = (_QWORD *)*v65;
    if (!*v65)
      goto LABEL_98;
    while (1)
    {
      v78 = v76[1];
      if (v78 >= prime)
        v78 %= prime;
      if (v78 != v66)
      {
        v79 = *(_QWORD *)(v8 + 632);
        if (!*(_QWORD *)(v79 + 8 * v78))
        {
          *(_QWORD *)(v79 + 8 * v78) = v65;
          goto LABEL_103;
        }
        *v65 = *v76;
        v77 = 8 * v78;
        *v76 = **(_QWORD **)(*(_QWORD *)(v8 + 632) + v77);
        **(_QWORD **)(*(_QWORD *)(v8 + 632) + v77) = v76;
        v76 = v65;
      }
      v78 = v66;
LABEL_103:
      v65 = v76;
      v76 = (_QWORD *)*v76;
      v66 = v78;
      if (!v76)
        goto LABEL_98;
    }
  }
  if (v47.u32[0] < 2uLL)
  {
    while (1)
    {
      v51 = v49[1];
      if (v51 == v45)
      {
        if (md::FlyoverCompleteTileDataLogic::DrapingTask::operator==((uint64_t)(v49 + 2), (uint64_t)&v110))
          goto LABEL_158;
      }
      else if ((v51 & (v46 - 1)) != v41)
      {
        goto LABEL_59;
      }
      v49 = (_QWORD *)*v49;
      if (!v49)
        goto LABEL_59;
    }
  }
  while (1)
  {
    v50 = v49[1];
    if (v50 == v45)
      break;
    if (v50 >= v46)
      v50 %= v46;
    if (v50 != v41)
      goto LABEL_59;
LABEL_49:
    v49 = (_QWORD *)*v49;
    if (!v49)
      goto LABEL_59;
  }
  if (!md::FlyoverCompleteTileDataLogic::DrapingTask::operator==((uint64_t)(v49 + 2), (uint64_t)&v110))
    goto LABEL_49;
LABEL_158:
  v100 = (unint64_t *)&v10->__shared_owners_;
  do
    v101 = __ldaxr(v100);
  while (__stlxr(v101 - 1, v100));
  v82 = (std::mutex *)(v8 + 488);
  if (!v101)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
LABEL_122:
  v84 = (std::__shared_weak_count *)*((_QWORD *)&v121 + 1);
  if (*((_QWORD *)&v121 + 1))
  {
    v85 = (unint64_t *)(*((_QWORD *)&v121 + 1) + 8);
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  v87 = v111;
  if (v111)
  {
    v88 = (unint64_t *)&v111->__shared_owners_;
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  do
    v90 = __ldaxr(p_shared_owners);
  while (__stlxr(v90 - 1, p_shared_owners));
  if (!v90)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  do
    v91 = __ldaxr(v28);
  while (__stlxr(v91 - 1, v28));
  if (!v91)
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  std::mutex::unlock(v82);
  do
    v92 = __ldaxr(v28);
  while (__stlxr(v92 - 1, v28));
  if (!v92)
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  do
    v93 = __ldaxr(p_shared_owners);
  while (__stlxr(v93 - 1, p_shared_owners));
  if (v93)
  {
    v94 = (std::__shared_weak_count *)v127;
    if (!v127)
      goto LABEL_150;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    v94 = (std::__shared_weak_count *)v127;
    if (!v127)
      goto LABEL_150;
  }
  v95 = (unint64_t *)&v94->__shared_owners_;
  do
    v96 = __ldaxr(v95);
  while (__stlxr(v96 - 1, v95));
  if (v96)
  {
LABEL_150:
    v97 = v125;
    if (v125)
    {
LABEL_151:
      v98 = (unint64_t *)&v97->__shared_owners_;
      do
        v99 = __ldaxr(v98);
      while (__stlxr(v99 - 1, v98));
      if (!v99)
      {
        ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
        std::__shared_weak_count::__release_weak(v97);
      }
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
    std::__shared_weak_count::__release_weak(v94);
    v97 = v125;
    if (v125)
      goto LABEL_151;
  }
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,md::FlyoverCompleteTileDataLogic::MeshStorage>,void *>>>::operator()[abi:nn180100](char a1, _QWORD *__p)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  if (a1)
  {
    v3 = (std::__shared_weak_count *)__p[18];
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v6 = (std::__shared_weak_count *)__p[16];
    if (v6)
    {
      v7 = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v9 = (std::__shared_weak_count *)__p[3];
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void std::__shared_ptr_emplace<md::Mesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E428A108;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::Mesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E428A108;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::Mesh>::__on_zero_shared(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 96);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 32);
    if (!v5)
      return;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 32);
    if (!v5)
      return;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void std::__shared_ptr_emplace<md::TexturedRenderable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E428A028;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::TexturedRenderable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E428A028;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::TexturedRenderable>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<geo::QuadTile,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<geo::QuadTile,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  void *v4;
  _BYTE *v6;
  void *v7;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (_BYTE *)v2[7];
      if (v3)
      {
        do
        {
          if (v3[112])
            v3[112] = 0;
          v6 = *(_BYTE **)v3;
          v7 = (void *)*((_QWORD *)v3 + 4);
          if (v7 != *((void **)v3 + 6))
            free(v7);
          operator delete(v3);
          v3 = v6;
        }
        while (v6);
      }
      v4 = (void *)v2[5];
      v2[5] = 0;
      if (v4)
        operator delete(v4);
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,md::FlyoverCompleteTileDataLogic::FallbackInfo>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,md::FlyoverCompleteTileDataLogic::FallbackInfo>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void *v6;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(std::__shared_weak_count **)(v2 + 240);
      if (v3)
      {
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v5 = __ldaxr(p_shared_owners);
        while (__stlxr(v5 - 1, p_shared_owners));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
      if (*(_BYTE *)(v2 + 192))
        *(_BYTE *)(v2 + 192) = 0;
      v6 = *(void **)(v2 + 112);
      if (v6 != *(void **)(v2 + 128))
        free(v6);
    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<md::FlyoverOctile,gdc::LayerDataKey>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::FlyoverOctile,gdc::LayerDataKey>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  _QWORD *v2;
  void *v3;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (void *)v2[8];
      if (v3 != (void *)v2[10])
        free(v3);
    }
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN2md28FlyoverCompleteTileDataLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_20TileSelectionContextENS2_30FlyoverTileDataResolverContextENS2_19PendingSceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_30FlyoverCompleteTileDataContextEE3__1NS_9allocatorISL_EEFvvEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2md28FlyoverCompleteTileDataLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_20TileSelectionContextENS2_30FlyoverTileDataResolverContextENS2_19PendingSceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_30FlyoverCompleteTileDataContextEE3__1NS_9allocatorISL_EEFvvEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427B028;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2md28FlyoverCompleteTileDataLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_20TileSelectionContextENS2_30FlyoverTileDataResolverContextENS2_19PendingSceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_30FlyoverCompleteTileDataContextEE3__1NS_9allocatorISL_EEFvvEE7__cloneEPNS0_6__baseISO_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E427B028;
  a2[1] = v2;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md28FlyoverCompleteTileDataLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_20TileSelectionContextENS2_30FlyoverTileDataResolverContextENS2_19PendingSceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_30FlyoverCompleteTileDataContextEE3__1NS_9allocatorISL_EEFvvEEclEv(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "FlyoverCompleteTileDataLogic", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void _ZNSt3__110__function6__funcIZN2md28FlyoverCompleteTileDataLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_20TileSelectionContextENS2_30FlyoverTileDataResolverContextENS2_19PendingSceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_30FlyoverCompleteTileDataContextEE3__0NS_9allocatorISL_EEFvvEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2md28FlyoverCompleteTileDataLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_20TileSelectionContextENS2_30FlyoverTileDataResolverContextENS2_19PendingSceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_30FlyoverCompleteTileDataContextEE3__0NS_9allocatorISL_EEFvvEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427AFE0;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2md28FlyoverCompleteTileDataLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_20TileSelectionContextENS2_30FlyoverTileDataResolverContextENS2_19PendingSceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_30FlyoverCompleteTileDataContextEE3__0NS_9allocatorISL_EEFvvEE7__cloneEPNS0_6__baseISO_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E427AFE0;
  a2[1] = v2;
  return result;
}

_QWORD *md::LogicDependencies<gdc::TypeList<md::TileSelectionContext,md::FlyoverTileDataResolverContext,md::PendingSceneContext>,gdc::TypeList<>>::buildRequiredTuple<md::TileSelectionContext,md::FlyoverTileDataResolverContext,md::PendingSceneContext>(_QWORD *result, uint64_t a2, unint64_t a3)
{
  uint8x8_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (!a3)
  {
    v5 = 0;
    v6 = 0;
    goto LABEL_71;
  }
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)a3);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = 0x64780CBD71DF7CF5;
    if (a3 <= 0x64780CBD71DF7CF5)
      v4 = 0x64780CBD71DF7CF5 % a3;
  }
  else
  {
    v4 = (a3 - 1) & 0x64780CBD71DF7CF5;
  }
  v7 = *(_QWORD **)(a2 + 8 * v4);
  if (!v7)
    goto LABEL_25;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_25;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v10 = v8[1];
      if (v10 == 0x64780CBD71DF7CF5)
      {
        if (v8[2] == 0x64780CBD71DF7CF5)
          goto LABEL_23;
      }
      else if ((v10 & (a3 - 1)) != v4)
      {
        goto LABEL_25;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_25;
    }
  }
  while (1)
  {
    v9 = v8[1];
    if (v9 == 0x64780CBD71DF7CF5)
      break;
    if (v9 >= a3)
      v9 %= a3;
    if (v9 != v4)
      goto LABEL_25;
LABEL_12:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_25;
  }
  if (v8[2] != 0x64780CBD71DF7CF5)
    goto LABEL_12;
LABEL_23:
  v11 = v8[5];
  if (*(_QWORD *)(v11 + 8) == 0x64780CBD71DF7CF5)
  {
    v6 = *(_QWORD *)(v11 + 32);
    goto LABEL_26;
  }
LABEL_25:
  v6 = 0;
LABEL_26:
  if (v3.u32[0] > 1uLL)
  {
    v12 = 0x479E84E48468DB70;
    if (a3 <= 0x479E84E48468DB70)
      v12 = 0x479E84E48468DB70 % a3;
  }
  else
  {
    v12 = (a3 - 1) & 0x479E84E48468DB70;
  }
  v13 = *(_QWORD **)(a2 + 8 * v12);
  if (!v13)
    goto LABEL_48;
  v14 = (_QWORD *)*v13;
  if (!v14)
    goto LABEL_48;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v16 = v14[1];
      if (v16 == 0x479E84E48468DB70)
      {
        if (v14[2] == 0x479E84E48468DB70)
          goto LABEL_46;
      }
      else if ((v16 & (a3 - 1)) != v12)
      {
        goto LABEL_48;
      }
      v14 = (_QWORD *)*v14;
      if (!v14)
        goto LABEL_48;
    }
  }
  while (2)
  {
    v15 = v14[1];
    if (v15 != 0x479E84E48468DB70)
    {
      if (v15 >= a3)
        v15 %= a3;
      if (v15 != v12)
        goto LABEL_48;
      goto LABEL_35;
    }
    if (v14[2] != 0x479E84E48468DB70)
    {
LABEL_35:
      v14 = (_QWORD *)*v14;
      if (!v14)
        goto LABEL_48;
      continue;
    }
    break;
  }
LABEL_46:
  v17 = v14[5];
  if (*(_QWORD *)(v17 + 8) == 0x479E84E48468DB70)
  {
    v5 = *(_QWORD *)(v17 + 32);
    goto LABEL_49;
  }
LABEL_48:
  v5 = 0;
LABEL_49:
  if (v3.u32[0] > 1uLL)
  {
    v18 = 0x9F2276D081C2CB20;
    if (a3 <= 0x9F2276D081C2CB20)
      v18 = 0x9F2276D081C2CB20 % a3;
  }
  else
  {
    v18 = (a3 - 1) & 0x9F2276D081C2CB20;
  }
  v19 = *(_QWORD **)(a2 + 8 * v18);
  if (!v19)
    goto LABEL_71;
  v20 = (_QWORD *)*v19;
  if (!v20)
    goto LABEL_71;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v22 = v20[1];
      if (v22 == 0x9F2276D081C2CB20)
      {
        if (v20[2] == 0x9F2276D081C2CB20)
          goto LABEL_69;
      }
      else if ((v22 & (a3 - 1)) != v18)
      {
        goto LABEL_71;
      }
      v20 = (_QWORD *)*v20;
      if (!v20)
        goto LABEL_71;
    }
  }
  while (1)
  {
    v21 = v20[1];
    if (v21 == 0x9F2276D081C2CB20)
      break;
    if (v21 >= a3)
      v21 %= a3;
    if (v21 != v18)
      goto LABEL_71;
LABEL_58:
    v20 = (_QWORD *)*v20;
    if (!v20)
      goto LABEL_71;
  }
  if (v20[2] != 0x9F2276D081C2CB20)
    goto LABEL_58;
LABEL_69:
  v23 = v20[5];
  if (*(_QWORD *)(v23 + 8) != 0x9F2276D081C2CB20)
  {
LABEL_71:
    v24 = 0;
    goto LABEL_72;
  }
  v24 = *(_QWORD *)(v23 + 32);
LABEL_72:
  *result = v6;
  result[1] = v5;
  result[2] = v24;
  return result;
}

_QWORD *gdc::ManagedObjectHolder<md::FlyoverCompleteTileDataContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E4270738;
  v2 = a1[4];
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0x20C40769AC3DALL);
  return a1;
}

void gdc::ManagedObjectHolder<md::FlyoverCompleteTileDataContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E4270738;
  v1 = a1[4];
  if (v1)
    MEMORY[0x1A1AF4E00](v1, 0x20C40769AC3DALL);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::FlyoverCompleteTileDataContext>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void std::__list_imp<geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::CacheEntry,std::allocator<geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::CacheEntry>>::clear(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      while (1)
      {
        v5 = (uint64_t *)v3[1];
        if (v3[14])
        {
          v6 = v3[12];
          v7 = (uint64_t *)v3[13];
          v8 = *v7;
          *(_QWORD *)(v8 + 8) = *(_QWORD *)(v6 + 8);
          **(_QWORD **)(v6 + 8) = v8;
          v3[14] = 0;
          if (v7 != v3 + 12)
            break;
        }
LABEL_4:
        operator delete(v3);
        v3 = v5;
        if (v5 == a1)
          return;
      }
      while (1)
      {
        v9 = (uint64_t *)v7[1];
        v10 = (std::__shared_weak_count *)v7[7];
        if (!v10)
          goto LABEL_13;
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
          v13 = (std::__shared_weak_count *)v7[5];
          if (v13)
          {
LABEL_14:
            v14 = (unint64_t *)&v13->__shared_owners_;
            do
              v15 = __ldaxr(v14);
            while (__stlxr(v15 - 1, v14));
            if (!v15)
            {
              ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
              std::__shared_weak_count::__release_weak(v13);
            }
          }
        }
        else
        {
LABEL_13:
          v13 = (std::__shared_weak_count *)v7[5];
          if (v13)
            goto LABEL_14;
        }
        v16 = (std::__shared_weak_count *)v7[3];
        if (v16)
        {
          v17 = (unint64_t *)&v16->__shared_owners_;
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
        operator delete(v7);
        v7 = v9;
        if (v9 == v3 + 12)
          goto LABEL_4;
      }
    }
  }
}

void std::__tree<std::__value_type<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::TransitionInfo>,std::__map_value_compare<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,std::__value_type<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::TransitionInfo>,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare,true>,std::allocator<std::__value_type<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::TransitionInfo>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::TransitionInfo>,std::__map_value_compare<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,std::__value_type<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::TransitionInfo>,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare,true>,std::allocator<std::__value_type<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::TransitionInfo>>>::destroy(*a1);
    std::__tree<std::__value_type<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::TransitionInfo>,std::__map_value_compare<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,std::__value_type<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::TransitionInfo>,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare,true>,std::allocator<std::__value_type<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::TransitionInfo>>>::destroy(a1[1]);
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy((_QWORD *)a1[34]);
    operator delete(a1);
  }
}

void std::__function::__func<md::FlyoverCompleteTileDataLogic::reset(void)::$_0,std::allocator<md::FlyoverCompleteTileDataLogic::reset(void)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::FlyoverCompleteTileDataLogic::reset(void)::$_0,std::allocator<md::FlyoverCompleteTileDataLogic::reset(void)::$_0>,void ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E427B070;
  return result;
}

void std::__function::__func<md::FlyoverCompleteTileDataLogic::reset(void)::$_0,std::allocator<md::FlyoverCompleteTileDataLogic::reset(void)::$_0>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E427B070;
}

void sub_19FD2EC68(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100](v1 + 768);
  std::__tree<std::__value_type<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::TransitionInfo>,std::__map_value_compare<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,std::__value_type<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::TransitionInfo>,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare,true>,std::allocator<std::__value_type<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::TransitionInfo>>>::destroy(*(_QWORD **)(v1 + 744));
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100](v1 + 696);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v1 + 680));
  std::unordered_map<md::FlyoverCompleteTileDataLogic::DrapingTask,md::FlyoverCompleteTileDataLogic::MeshStorage,md::FlyoverCompleteTileDataLogic::DrapingTaskHash,std::equal_to<md::FlyoverCompleteTileDataLogic::DrapingTask>,std::allocator<std::pair<md::FlyoverCompleteTileDataLogic::DrapingTask const,md::FlyoverCompleteTileDataLogic::MeshStorage>>>::~unordered_map[abi:nn180100](v1 + 632);
  std::unordered_map<md::FlyoverCompleteTileDataLogic::DrapingTask,md::FlyoverCompleteTileDataLogic::MeshStorage,md::FlyoverCompleteTileDataLogic::DrapingTaskHash,std::equal_to<md::FlyoverCompleteTileDataLogic::DrapingTask>,std::allocator<std::pair<md::FlyoverCompleteTileDataLogic::DrapingTask const,md::FlyoverCompleteTileDataLogic::MeshStorage>>>::~unordered_map[abi:nn180100](v1 + 592);
  std::__hash_table<std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,std::shared_ptr<geo::Task>>,std::__unordered_map_hasher<md::FlyoverCompleteTileDataLogic::DrapingTask,std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,std::shared_ptr<geo::Task>>,md::FlyoverCompleteTileDataLogic::DrapingTaskHash,std::equal_to<md::FlyoverCompleteTileDataLogic::DrapingTask>,true>,std::__unordered_map_equal<md::FlyoverCompleteTileDataLogic::DrapingTask,std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,std::shared_ptr<geo::Task>>,std::equal_to<md::FlyoverCompleteTileDataLogic::DrapingTask>,md::FlyoverCompleteTileDataLogic::DrapingTaskHash,true>,std::allocator<std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,std::shared_ptr<geo::Task>>>>::~__hash_table(v1 + 552);
  std::mutex::~mutex((std::mutex *)(v1 + 488));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 472);
  v3 = *(_QWORD *)(v1 + 464);
  *(_QWORD *)(v1 + 464) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  geo::Cache<md::FlyoverOctile,gm::Range<double>,md::FlyoverOctileHash,geo::LRUPolicy>::~Cache((_QWORD *)(v1 + 392));
  std::unordered_map<md::FlyoverOctileWorld,std::pair<std::vector<md::MeshRenderable *>,std::vector<md::FlyoverOctile>>,md::FlyoverOctileWorldHash,std::equal_to<md::FlyoverOctileWorld>,std::allocator<std::pair<md::FlyoverOctileWorld const,std::pair<std::vector<md::MeshRenderable *>,std::vector<md::FlyoverOctile>>>>>::~unordered_map[abi:nn180100](v1 + 344);
  std::unordered_map<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::vector<md::MeshRenderable *>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>,std::allocator<std::pair<std::pair<md::FlyoverOctile,md::FlyoverOctile> const,std::vector<md::MeshRenderable *>>>>::~unordered_map[abi:nn180100](v1 + 304);
  geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::~MarkedLRUCache((uint64_t *)(v1 + 224));
  std::unordered_map<md::FlyoverOctileWorld,std::vector<md::FlyoverOctileInstance>,md::FlyoverOctileWorldHash,std::equal_to<md::FlyoverOctileWorld>,std::allocator<std::pair<md::FlyoverOctileWorld const,std::vector<md::FlyoverOctileInstance>>>>::~unordered_map[abi:nn180100](v1 + 184);
  std::deque<md::FlyoverOctile>::~deque[abi:nn180100](v1 + 120);
  md::Logic<md::DrapingLogic,md::DrapingContext,md::LogicDependencies<gdc::TypeList<md::OverlaysContext,md::CameraContext,md::PendingSceneContext,md::ElevationContext>,gdc::TypeList<>>>::~Logic(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,std::shared_ptr<geo::Task>>,std::__unordered_map_hasher<md::FlyoverCompleteTileDataLogic::DrapingTask,std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,std::shared_ptr<geo::Task>>,md::FlyoverCompleteTileDataLogic::DrapingTaskHash,std::equal_to<md::FlyoverCompleteTileDataLogic::DrapingTask>,true>,std::__unordered_map_equal<md::FlyoverCompleteTileDataLogic::DrapingTask,std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,std::shared_ptr<geo::Task>>,std::equal_to<md::FlyoverCompleteTileDataLogic::DrapingTask>,md::FlyoverCompleteTileDataLogic::DrapingTaskHash,true>,std::allocator<std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,std::shared_ptr<geo::Task>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  v2 = *(_QWORD **)(a1 + 16);
  while (v2)
  {
    v5 = v2;
    v2 = (_QWORD *)*v2;
    v6 = (std::__shared_weak_count *)v5[16];
    if (!v6)
      goto LABEL_10;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      v9 = (std::__shared_weak_count *)v5[3];
      if (v9)
      {
LABEL_11:
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    else
    {
LABEL_10:
      v9 = (std::__shared_weak_count *)v5[3];
      if (v9)
        goto LABEL_11;
    }
    operator delete(v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t std::unordered_map<md::FlyoverCompleteTileDataLogic::DrapingTask,md::FlyoverCompleteTileDataLogic::MeshStorage,md::FlyoverCompleteTileDataLogic::DrapingTaskHash,std::equal_to<md::FlyoverCompleteTileDataLogic::DrapingTask>,std::allocator<std::pair<md::FlyoverCompleteTileDataLogic::DrapingTask const,md::FlyoverCompleteTileDataLogic::MeshStorage>>>::~unordered_map[abi:nn180100](uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,md::FlyoverCompleteTileDataLogic::MeshStorage>,std::__unordered_map_hasher<md::FlyoverCompleteTileDataLogic::DrapingTask,std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,md::FlyoverCompleteTileDataLogic::MeshStorage>,md::FlyoverCompleteTileDataLogic::DrapingTaskHash,std::equal_to<md::FlyoverCompleteTileDataLogic::DrapingTask>,true>,std::__unordered_map_equal<md::FlyoverCompleteTileDataLogic::DrapingTask,std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,md::FlyoverCompleteTileDataLogic::MeshStorage>,std::equal_to<md::FlyoverCompleteTileDataLogic::DrapingTask>,md::FlyoverCompleteTileDataLogic::DrapingTaskHash,true>,std::allocator<std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,md::FlyoverCompleteTileDataLogic::MeshStorage>>>::__deallocate_node(*(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

_QWORD *geo::Cache<md::FlyoverOctile,gm::Range<double>,md::FlyoverOctileHash,geo::LRUPolicy>::~Cache(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;

  if (a1[8])
  {
    v2 = a1 + 6;
    v4 = a1[6];
    v3 = (uint64_t *)a1[7];
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    a1[8] = 0;
    if (v3 != a1 + 6)
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  v7 = (_QWORD *)a1[3];
  if (v7)
  {
    do
    {
      v8 = (_QWORD *)*v7;
      operator delete(v7);
      v7 = v8;
    }
    while (v8);
  }
  v9 = (void *)a1[1];
  a1[1] = 0;
  if (v9)
    operator delete(v9);
  return a1;
}

uint64_t std::unordered_map<md::FlyoverOctileWorld,std::pair<std::vector<md::MeshRenderable *>,std::vector<md::FlyoverOctile>>,md::FlyoverOctileWorldHash,std::equal_to<md::FlyoverOctileWorld>,std::allocator<std::pair<md::FlyoverOctileWorld const,std::pair<std::vector<md::MeshRenderable *>,std::vector<md::FlyoverOctile>>>>>::~unordered_map[abi:nn180100](uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  void *v6;
  void *v7;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = (void *)v2[11];
      if (v6)
      {
        v2[12] = v6;
        operator delete(v6);
      }
      v7 = (void *)v2[8];
      if (v7)
      {
        v2[9] = v7;
        operator delete(v7);
      }
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t std::unordered_map<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::vector<md::MeshRenderable *>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>,std::allocator<std::pair<std::pair<md::FlyoverOctile,md::FlyoverOctile> const,std::vector<md::MeshRenderable *>>>>::~unordered_map[abi:nn180100](uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  void *v6;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = (void *)v2[12];
      if (v6)
      {
        v2[13] = v6;
        operator delete(v6);
      }
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t *geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::~MarkedLRUCache(uint64_t *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = (_QWORD *)a1[5];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)a1[3];
  a1[3] = 0;
  if (v4)
    operator delete(v4);
  std::__list_imp<geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::CacheEntry,std::allocator<geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::CacheEntry>>::clear(a1);
  return a1;
}

uint64_t std::unordered_map<md::FlyoverOctileWorld,std::vector<md::FlyoverOctileInstance>,md::FlyoverOctileWorldHash,std::equal_to<md::FlyoverOctileWorld>,std::allocator<std::pair<md::FlyoverOctileWorld const,std::vector<md::FlyoverOctileInstance>>>>::~unordered_map[abi:nn180100](uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  void *v6;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = (void *)v2[8];
      if (v6)
      {
        v2[9] = v6;
        operator delete(v6);
      }
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

int64_t md::FlyoverCompleteTileDataContext::getOctileInstances(int64_t *a1, int64_t *a2, __int16 *a3, char a4)
{
  __int16 v6;
  char v7;
  char v8;
  int v9;
  int64_t result;
  int64_t v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  unsigned __int8 v24[4];
  uint64_t v25;
  __int128 v26;
  char v27;

  if (*((_BYTE *)a3 + 24) == 4)
  {
    v6 = *a3;
    v7 = *((_BYTE *)a3 + 28);
    v8 = *((_BYTE *)a3 + 32);
    v9 = *((_DWORD *)a3 + 9);
    a1[1] = 0;
    a1[2] = 0;
    *a1 = 0;
    result = (int64_t)operator new(0xA8uLL);
    v11 = result + 168;
    a1[2] = result + 168;
    *(_WORD *)result = v6;
    *(_QWORD *)(result + 4) = *(_QWORD *)(a3 + 2);
    *(_BYTE *)(result + 24) = 4;
    *(_WORD *)(result + 25) = *(__int16 *)((char *)a3 + 25);
    *(_BYTE *)(result + 27) = *((_BYTE *)a3 + 27);
    *(_BYTE *)(result + 28) = v7;
    *(_WORD *)(result + 29) = *(__int16 *)((char *)a3 + 29);
    *(_BYTE *)(result + 31) = *((_BYTE *)a3 + 31);
    *(_BYTE *)(result + 32) = v8;
    v12 = *(__int16 *)((char *)a3 + 33);
    *(_BYTE *)(result + 35) = *((_BYTE *)a3 + 35);
    *(_WORD *)(result + 33) = v12;
    *(_DWORD *)(result + 36) = v9;
    *(_BYTE *)(result + 40) = 0;
    *(_BYTE *)(result + 144) = 0;
    *(_BYTE *)(result + 152) = 0;
    *(_DWORD *)(result + 156) = 1065353216;
    *(_BYTE *)(result + 160) = 0;
    *a1 = result;
LABEL_3:
    a1[1] = v11;
    return result;
  }
  result = *a2;
  if (*a2
    && (*(_WORD *)v24 = *a3,
        v25 = *(_QWORD *)(a3 + 2),
        v26 = *(_OWORD *)(a3 + 12),
        v27 = a4,
        (result = (int64_t)std::__hash_table<std::__hash_value_type<md::FlyoverOctileWorld,std::vector<md::FlyoverOctileInstance>>,std::__unordered_map_hasher<md::FlyoverOctileWorld,std::__hash_value_type<md::FlyoverOctileWorld,std::vector<md::FlyoverOctileInstance>>,md::FlyoverOctileWorldHash,std::equal_to<md::FlyoverOctileWorld>,true>,std::__unordered_map_equal<md::FlyoverOctileWorld,std::__hash_value_type<md::FlyoverOctileWorld,std::vector<md::FlyoverOctileInstance>>,std::equal_to<md::FlyoverOctileWorld>,md::FlyoverOctileWorldHash,true>,std::allocator<std::__hash_value_type<md::FlyoverOctileWorld,std::vector<md::FlyoverOctileInstance>>>>::find<md::FlyoverOctileWorld>((_QWORD *)result, v24)) != 0))
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    v13 = *(_QWORD *)(result + 64);
    v14 = *(_QWORD *)(result + 72);
    result = v14 - v13;
    if (v14 != v13)
    {
      v15 = 0xCF3CF3CF3CF3CF3DLL * (result >> 3);
      if (v15 >= 0x186186186186187)
        abort();
      result = (int64_t)operator new(result);
      v16 = 0;
      *a1 = result;
      a1[1] = result;
      a1[2] = result + 168 * v15;
      do
      {
        v18 = result + v16;
        v19 = v13 + v16;
        *(_WORD *)v18 = *(_WORD *)(v13 + v16);
        *(_QWORD *)(v18 + 4) = *(_QWORD *)(v13 + v16 + 4);
        *(_OWORD *)(v18 + 24) = *(_OWORD *)(v13 + v16 + 24);
        *(_BYTE *)(result + v16 + 40) = 0;
        *(_BYTE *)(v18 + 144) = 0;
        if (*(_BYTE *)(v13 + v16 + 144))
        {
          v20 = *(_OWORD *)(v19 + 40);
          *(_QWORD *)(result + v16 + 56) = *(_QWORD *)(v19 + 56);
          *(_OWORD *)(result + v16 + 40) = v20;
          v21 = *(_OWORD *)(v19 + 64);
          *(_QWORD *)(v18 + 80) = *(_QWORD *)(v19 + 80);
          *(_OWORD *)(v18 + 64) = v21;
          *(_QWORD *)(v18 + 88) = *(_QWORD *)(v19 + 88);
          v22 = *(_OWORD *)(v19 + 96);
          v23 = *(_OWORD *)(v19 + 128);
          *(_OWORD *)(v18 + 112) = *(_OWORD *)(v19 + 112);
          *(_OWORD *)(v18 + 128) = v23;
          *(_OWORD *)(v18 + 96) = v22;
          *(_BYTE *)(v18 + 144) = 1;
        }
        v17 = *(_QWORD *)(v19 + 152);
        *(_BYTE *)(v18 + 160) = *(_BYTE *)(v19 + 160);
        *(_QWORD *)(v18 + 152) = v17;
        v16 += 168;
      }
      while (v13 + v16 != v14);
      v11 = result + v16;
      goto LABEL_3;
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  return result;
}

void sub_19FD2F430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19FD2F6B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FD2FBC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_19FD2FDD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19FD2FF7C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FD30154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FD30220(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FD302BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19FD303A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19FD30464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_19FD30524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void ___ZL27GEOGetVectorKitVKMapViewLogv_block_invoke_30683()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.VectorKit", "VKMapView");
  v1 = (void *)GEOGetVectorKitVKMapViewLog(void)::log;
  GEOGetVectorKitVKMapViewLog(void)::log = (uint64_t)v0;

}

void sub_19FD308BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void std::__function::__func<md::ita::PushLegacyRibbons::operator()(ecs2::Query<md::ls::RequireTypedRenderableForLegacyReasons<md::DaVinciGroundRenderable> const&>)::$_0,std::allocator<md::ita::PushLegacyRibbons::operator()(ecs2::Query<md::ls::RequireTypedRenderableForLegacyReasons<md::DaVinciGroundRenderable> const&>)::$_0>,void ()(md::ls::RequireTypedRenderableForLegacyReasons<md::DaVinciGroundRenderable> const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::ita::PushLegacyRibbons::operator()(ecs2::Query<md::ls::RequireTypedRenderableForLegacyReasons<md::DaVinciGroundRenderable> const&>)::$_0,std::allocator<md::ita::PushLegacyRibbons::operator()(ecs2::Query<md::ls::RequireTypedRenderableForLegacyReasons<md::DaVinciGroundRenderable> const&>)::$_0>,void ()(md::ls::RequireTypedRenderableForLegacyReasons<md::DaVinciGroundRenderable> const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E427B418;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<md::ita::PushLegacyRibbons::operator()(ecs2::Query<md::ls::RequireTypedRenderableForLegacyReasons<md::DaVinciGroundRenderable> const&>)::$_0,std::allocator<md::ita::PushLegacyRibbons::operator()(ecs2::Query<md::ls::RequireTypedRenderableForLegacyReasons<md::DaVinciGroundRenderable> const&>)::$_0>,void ()(md::ls::RequireTypedRenderableForLegacyReasons<md::DaVinciGroundRenderable> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E427B418;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::ita::PushLegacyRibbons::operator()(ecs2::Query<md::ls::RequireTypedRenderableForLegacyReasons<md::DaVinciGroundRenderable> const&>)::$_0,std::allocator<md::ita::PushLegacyRibbons::operator()(ecs2::Query<md::ls::RequireTypedRenderableForLegacyReasons<md::DaVinciGroundRenderable> const&>)::$_0>,void ()(md::ls::RequireTypedRenderableForLegacyReasons<md::DaVinciGroundRenderable> const&)>::operator()(uint64_t a1, uint64_t *a2)
{
  const md::DaVinciGroundRenderable *v2;
  uint64_t v3;
  const md::LayoutContext *v4;
  uint64_t *v5;
  int8x8_t v6;
  uint8x8_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  const md::StyleLogicContext *v25;
  double v26;
  int8x16_t v27;
  __n128 v28;
  _BYTE v29[40];

  v2 = (const md::DaVinciGroundRenderable *)*a2;
  v3 = **(_QWORD **)(a1 + 8);
  v4 = **(const md::LayoutContext ***)(a1 + 16);
  md::DaVinciGroundRenderLayer::layoutRibbons(v3, (uint64_t)v4, *(_QWORD *)(a1 + 24), *a2, **(_QWORD **)(a1 + 32), **(_BYTE **)(a1 + 40));
  v5 = (uint64_t *)*((_QWORD *)v4 + 1);
  v6 = (int8x8_t)v5[1];
  if (!*(_QWORD *)&v6)
    return;
  v7 = (uint8x8_t)vcnt_s8(v6);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    v8 = 0xC97B9E962ADF4AD4;
    if (*(_QWORD *)&v6 <= 0xC97B9E962ADF4AD4)
      v8 = 0xC97B9E962ADF4AD4 % *(_QWORD *)&v6;
  }
  else
  {
    v8 = (*(_QWORD *)&v6 - 1) & 0xC97B9E962ADF4AD4;
  }
  v9 = *v5;
  v10 = *(_QWORD **)(*v5 + 8 * v8);
  if (!v10)
    return;
  v11 = (_QWORD *)*v10;
  if (!*v10)
    return;
  v12 = *(_QWORD *)&v6 - 1;
  if (v7.u32[0] < 2uLL)
  {
    while (1)
    {
      v13 = v11[1];
      if (v13 == 0xC97B9E962ADF4AD4)
      {
        if (v11[2] == 0xC97B9E962ADF4AD4)
          goto LABEL_22;
      }
      else if ((v13 & v12) != v8)
      {
        return;
      }
      v11 = (_QWORD *)*v11;
      if (!v11)
        return;
    }
  }
  while (1)
  {
    v14 = v11[1];
    if (v14 == 0xC97B9E962ADF4AD4)
      break;
    if (v14 >= *(_QWORD *)&v6)
      v14 %= *(_QWORD *)&v6;
    if (v14 != v8)
      return;
LABEL_16:
    v11 = (_QWORD *)*v11;
    if (!v11)
      return;
  }
  if (v11[2] != 0xC97B9E962ADF4AD4)
    goto LABEL_16;
LABEL_22:
  v15 = v11[5];
  if (*(_QWORD *)(v15 + 8) == 0xC97B9E962ADF4AD4)
  {
    v16 = *(uint64_t **)(v15 + 32);
    if (v16)
    {
      v17 = *v16;
      v18 = v16[1];
      if (v17 != v18)
      {
        while (*(_BYTE *)v17 != 11)
        {
          v17 += 16;
          if (v17 == v18)
            return;
        }
      }
      if (v17 != v18 && *(_QWORD *)(v17 + 8))
      {
        if (v7.u32[0] > 1uLL)
        {
          v19 = 0xE42D19AFCA302E68;
          if (*(_QWORD *)&v6 <= 0xE42D19AFCA302E68)
            v19 = 0xE42D19AFCA302E68 % *(_QWORD *)&v6;
        }
        else
        {
          v19 = v12 & 0xE42D19AFCA302E68;
        }
        v20 = *(_QWORD **)(v9 + 8 * v19);
        if (!v20)
          goto LABEL_52;
        v21 = (_QWORD *)*v20;
        if (!v21)
          goto LABEL_52;
        if (v7.u32[0] < 2uLL)
        {
          while (1)
          {
            v22 = v21[1];
            if (v22 == 0xE42D19AFCA302E68)
            {
              if (v21[2] == 0xE42D19AFCA302E68)
                goto LABEL_50;
            }
            else if ((v22 & v12) != v19)
            {
              goto LABEL_52;
            }
            v21 = (_QWORD *)*v21;
            if (!v21)
              goto LABEL_52;
          }
        }
        while (1)
        {
          v23 = v21[1];
          if (v23 == 0xE42D19AFCA302E68)
          {
            if (v21[2] == 0xE42D19AFCA302E68)
            {
LABEL_50:
              v24 = v21[5];
              if (*(_QWORD *)(v24 + 8) == 0xE42D19AFCA302E68)
              {
                v25 = *(const md::StyleLogicContext **)(v24 + 32);
                goto LABEL_53;
              }
LABEL_52:
              v25 = 0;
LABEL_53:
              md::ElevatedPolygonContext::ElevatedPolygonContext((md::ElevatedPolygonContext *)v29, v4, *(_BYTE *)(v3 + 3192), *(const md::StandardPassList **)(*(_QWORD *)(v3 + 40) + 24), *(float *)v7.i32);
              md::DaVinciGroundRenderLayer::layoutPredrapedPolygons((md::DaVinciGroundRenderLayer *)v3, v4, v2, (const md::ElevatedPolygonContext *)v29, v25, v26, v27, v28);
              return;
            }
          }
          else
          {
            if (v23 >= *(_QWORD *)&v6)
              v23 %= *(_QWORD *)&v6;
            if (v23 != v19)
              goto LABEL_52;
          }
          v21 = (_QWORD *)*v21;
          if (!v21)
            goto LABEL_52;
        }
      }
    }
  }
}

void md::LabelSettingsData::~LabelSettingsData(id *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = (std::__shared_weak_count *)this[38];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  this[34] = &off_1E42B5110;

  this[30] = &off_1E42B5490;
  this[27] = &off_1E42B4B90;

  this[24] = &off_1E42B4CF0;
  this[20] = &off_1E42B4AB0;

  this[17] = &off_1E42B4F50;
  this[13] = &off_1E42B5390;

  this[10] = &off_1E42B53B0;
  this[7] = &off_1E42B5350;

  v5 = (std::__shared_weak_count *)this[5];
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

uint64_t geo::_retain_ptr<NSMutableSet<objc_object  {objcproto25VKCustomFeatureDataSource}*> * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4AB0;

  return a1;
}

void geo::_retain_ptr<NSMutableSet<objc_object  {objcproto25VKCustomFeatureDataSource}*> * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4AB0;

  JUMPOUT(0x1A1AF4E00);
}

uint64_t geo::_retain_ptr<NSArray<VKTrafficFeature *> * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B5350;

  return a1;
}

void geo::_retain_ptr<NSArray<VKTrafficFeature *> * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B5350;

  JUMPOUT(0x1A1AF4E00);
}

void md::LabelSettings::removeCustomFeatureDataSource(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  _QWORD *v7;
  uint64_t v8;
  id v9;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 168), "removeObject:", v3);
  v4 = *(_QWORD *)(a1 + 24);
  v9 = v3;
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v4 + 168) + 64) + 32))(*(_QWORD *)(*(_QWORD *)(v4 + 168) + 64));
  if (v5)
  {
    v6 = v9;
    v10[0] = &off_1E42D2BD8;
    v10[1] = v5;
    v10[2] = v6;
    v11 = v10;
    md::LabelCustomFeatureSupport::queueCommand(v5, 1, v10);
    v7 = v11;
    if (v11 == v10)
    {
      v8 = 4;
      v7 = v10;
    }
    else
    {
      if (!v11)
      {
LABEL_7:

        goto LABEL_8;
      }
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
    goto LABEL_7;
  }
LABEL_8:

}

void sub_19FD30F5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  void *v13;
  void *v14;
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a13;
  if (a13 == v15)
  {
    v18 = 4;
    v17 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:

  _Unwind_Resume(a1);
}

id md::LabelSettings::debugLabelString(md::LabelSettings *this, uint64_t a2)
{
  void *v2;
  void **v3;
  void *v4;
  void *__p[2];
  char v7;

  v2 = (void *)MEMORY[0x1E0CB3940];
  md::LabelManager::debugString((md::LabelManager *)__p, (uint64_t)this, a2);
  if (v7 >= 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  objc_msgSend(v2, "stringWithUTF8String:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v7 < 0)
    operator delete(__p[0]);
  return v4;
}

void sub_19FD31028(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void altitude::GlobeMainViewNode::~GlobeMainViewNode(void **this)
{
  *this = off_1E42C34D0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_1E42C34D0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t altitude::GlobeMainViewNode::computeView(altitude::GlobeMainViewNode *this, const karo::Item *a2, int a3)
{
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  double *v7;
  double v8;
  double v9;
  double v10;
  long double v11;
  long double v12;
  double v13;
  double v14;
  double v15;
  long double v16;
  long double v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  __double2 v22;
  double v23;
  double v24;
  __double2 v25;
  double v26;
  double v27;
  double v28;
  double v29;
  long double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  __double2 v36;
  double v37;
  __double2 v38;
  double cosval;
  uint64_t v40;
  uint64_t v41;
  double v42;
  double v43;
  double v44;
  long double v45;
  double v46;
  double v47;
  long double v48;
  long double v49;
  long double v50;
  double v51;
  long double v52;
  long double v53;
  long double v54;
  double v55;
  double v56;
  long double v57;
  long double v58;
  long double v59;
  long double v60;
  double v61;
  double v62;
  long double v63;
  __double2 v64;
  long double v65;
  double v66;
  double v67;
  long double v68;
  __double2 v69;
  long double v70;
  long double v71;
  double v72;
  double v73;
  long double v74;
  __double2 v75;
  long double v76;
  long double v77;
  long double v78;
  double v79;
  double v80;
  long double v81;
  __double2 v82;
  long double v83;
  long double v84;
  long double v85;
  double v86;
  double v87;
  long double v88;
  __double2 v89;
  int v90;
  int v91;
  double v93;
  int v94;
  int v95;
  int v97;
  int v98;
  int v100;
  int v101;
  int v103;
  double v104;
  double v106;
  double v107;
  __double2 v108;
  double v109;
  __int128 v110;
  double v111;
  double v112;
  __double2 v113;
  uint64_t v114;
  float64x2_t v115;
  uint64_t v116;
  uint64_t v117;
  double v118;
  double v119;
  uint64_t v120;
  float v121;
  double v122;
  float64x2_t v123;
  float64x2_t v124;
  double v125;
  double v126;
  float v127;
  unsigned int v128;
  unsigned int v129;
  int v130;
  float v131;
  float v132;
  float v133;
  int v134;
  uint64_t v135;
  long double v137;
  float64_t v138;
  double v139;
  long double v140;
  float64_t v141;
  long double v142;
  uint64_t v143;
  double v144;
  double v145;
  long double v146;
  double v147;
  double v148;
  long double v149;
  double v150;
  double v151;
  double v152;
  double v153;
  float64x2_t __x;
  uint64_t v155;
  float64x2_t v156;
  _BYTE v157[24];
  double v158;
  float64x2_t v159;
  double v160[4];
  float64x2_t v161;
  double v162;
  long double v163;
  double v164;
  double v165;
  double v166[2];
  double v167[4];

  v167[2] = *(double *)MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)this + 5);
  if (v3)
  {
    v5 = (uint64_t *)*((_QWORD *)this + 4);
    v6 = *v5;
    if (*v5)
    {
      if (*((_DWORD *)v5 + 22) != *((_DWORD *)this + 16) || *((_DWORD *)this + 15) != *(_DWORD *)(v6 + 376))
        goto LABEL_8;
      if (a3 == -1)
        a3 = *((_DWORD *)this + 14);
      if (*(_DWORD *)(v3 + 112) != a3)
      {
LABEL_8:
        v7 = *(double **)(v6 + 72);
        v8 = v7[46];
        v9 = v7[47];
        if (v9 * v8 > 0.0)
        {
          v10 = v7[57];
          if (v9 < v8)
          {
            v11 = tan(v10 * 0.5);
            v12 = atan(v9 * v11 / v8);
            v10 = v12 + v12;
          }
          v13 = v7[59];
          v14 = v7[60];
          v15 = v8 / v9;
          v16 = tan(v10 * 0.5);
          *(double *)(v3 + 1000) = v10;
          *(double *)(v3 + 992) = v15;
          *(double *)(v3 + 944) = v13;
          *(_QWORD *)(v3 + 952) = 0x3FF0000000000000;
          *(long double *)(v3 + 976) = -(v16 * v15);
          *(long double *)(v3 + 984) = v16 * v15;
          *(long double *)(v3 + 968) = -v16;
          *(long double *)(v3 + 960) = v16;
          *(double *)(v3 + 1008) = v14;
          *(_BYTE *)(v3 + 1016) = 0;
          v17 = v15 * (v16 + v16);
          v18 = -(v13 - v14 * v13);
          *(long double *)(v3 + 376) = 2.0 / v17;
          *(_OWORD *)(v3 + 384) = 0u;
          *(_OWORD *)(v3 + 400) = 0u;
          *(long double *)(v3 + 416) = 1.0 / v16;
          *(_OWORD *)(v3 + 424) = 0u;
          *(_OWORD *)(v3 + 440) = 0u;
          *(double *)(v3 + 456) = (v14 - v13) / (v13 + -1.0);
          *(_QWORD *)(v3 + 472) = 0;
          *(_QWORD *)(v3 + 480) = 0;
          *(_QWORD *)(v3 + 464) = 0xBFF0000000000000;
          *(double *)(v3 + 488) = v18 / (v13 + -1.0);
          *(_QWORD *)(v3 + 496) = 0;
          *(long double *)(v3 + 1160) = v17 * 0.5;
          *(_OWORD *)(v3 + 1168) = 0u;
          *(_OWORD *)(v3 + 1184) = 0u;
          *(long double *)(v3 + 1200) = v16;
          *(_OWORD *)(v3 + 1208) = 0u;
          *(_OWORD *)(v3 + 1224) = 0u;
          *(_QWORD *)(v3 + 1240) = 0;
          *(double *)(v3 + 1248) = (v13 + -1.0) / v18;
          *(_QWORD *)(v3 + 1256) = 0;
          *(_QWORD *)(v3 + 1264) = 0;
          *(_QWORD *)(v3 + 1272) = 0xBFF0000000000000;
          *(double *)(v3 + 1280) = (v14 - v13) / v18;
          karo::graphics::View::projectionUpdate((karo::graphics::View *)v3, 1);
          v19 = *(_QWORD *)(v6 + 72);
          gdc::CameraFrame<geo::Radians,double>::toRigidTransformGeocentric(v161.f64, (double *)(v19 + 8));
          v20 = *(double *)(v19 + 16);
          v21 = *(double *)(v19 + 24);
          v22 = __sincos_stret(*(double *)(v19 + 8));
          v23 = 6378137.0 / sqrt(v22.__sinval * v22.__sinval * -0.00669437999 + 1.0);
          v24 = (v23 + v21) * v22.__cosval;
          v25 = __sincos_stret(v20);
          v26 = v24 * v25.__cosval;
          v27 = v24 * v25.__sinval;
          v28 = (v21 + v23 * 0.99330562) * v22.__sinval;
          v159.f64[0] = v24 * v25.__sinval;
          v159.f64[1] = v28;
          *(float64x2_t *)v157 = v161;
          v30 = v162;
          v29 = v163;
          *(double *)&v157[16] = v162;
          v158 = v26;
          v31 = (v29 + v29) * v164 + v166[0] * (v165 * -2.0);
          v32 = v165 * -2.0 * v165 + 1.0 - (v29 + v29) * v29;
          v33 = -(v165 * -2.0 * v164 - (v29 + v29) * v166[0]);
          v160[0] = v31;
          v160[1] = v32;
          v160[2] = v33;
          if (!*(_BYTE *)(v6 + 185))
            goto LABEL_50;
          if (*(_BYTE *)(v6 + 160))
            goto LABEL_50;
          v34 = *(double *)(v19 + 32);
          __x = v161;
          v148 = v27;
          v150 = v26;
          if (cos(*(long double *)(v19 + 40)) * v34 >= 500.0)
            goto LABEL_50;
          v145 = vmulq_f64(__x, __x).f64[0] + __x.f64[1] * __x.f64[1];
          v35 = sqrt(v145);
          v153 = v30;
          v152 = atan2(v30, v35 * 0.996647189);
          v147 = atan2(__x.f64[1], __x.f64[0]);
          v36 = __sincos_stret(v152);
          v144 = v35;
          v37 = atan2(v30 + v36.__sinval * v36.__sinval * 42841.3115 * v36.__sinval, v35 + v36.__cosval * v36.__cosval * -42697.6727 * v36.__cosval);
          v38 = __sincos_stret(v37);
          cosval = v38.__cosval;
          v151 = 6378137.0 / sqrt(v38.__sinval * v38.__sinval * -0.00669437999 + 1.0);
          v40 = **((_QWORD **)this + 4);
          v41 = *(_QWORD *)(v40 + 712);
          if (!v41)
            goto LABEL_46;
          v42 = 1.0 / sqrt(v145 + v30 * v30);
          v43 = v42 * __x.f64[0];
          v44 = v42 * __x.f64[1];
          v45 = v42 * v30;
          v46 = v31 + v150 - __x.f64[0];
          v47 = v32 + v148 - __x.f64[1];
          v48 = v33 + v28 - v30;
          v49 = -(v48 * v44 - v47 * v45);
          v50 = -(v46 * v45 - v48 * v43);
          v51 = -(v47 * v43 - v46 * v44);
          v52 = -(v50 * v45 - v51 * v44);
          v53 = -(v51 * v43 - v49 * v45);
          v54 = -(v49 * v44 - v50 * v43);
          v55 = 1.0 / sqrt(v52 * v52 + v53 * v53 + v54 * v54);
          v146 = v55 * v52;
          v149 = v55 * v54;
          v156.f64[0] = -1.79769313e308;
          v141 = __x.f64[0] + v55 * v52 * 5.0;
          v142 = v55 * v53;
          v137 = v30 + v55 * v54 * 5.0;
          v138 = __x.f64[1] + v55 * v53 * 5.0;
          v56 = 5.0 / sqrt(v51 * v51 + v49 * v49 + v50 * v50);
          v57 = v56 * v49;
          v139 = v56 * v51;
          v140 = v56 * v50;
          v58 = v141 + v56 * v49;
          v59 = v138 + v56 * v50;
          v60 = v137 + v56 * v51;
          v61 = sqrt(v58 * v58 + v59 * v59);
          v143 = v40;
          v62 = atan2(v60, v61 * 0.996647189);
          v63 = atan2(v59, v58);
          v64 = __sincos_stret(v62);
          v161.f64[0] = atan2(v60 + v64.__sinval * v64.__sinval * 42841.3115 * v64.__sinval, v61 - v64.__cosval * v64.__cosval * 42697.6727 * v64.__cosval);
          v161.f64[1] = v63;
          v65 = v141 - v57;
          v66 = sqrt(v65 * v65 + (v138 - v140) * (v138 - v140));
          v67 = atan2(v137 - v139, v66 * 0.996647189);
          v68 = atan2(v138 - v140, v65);
          v69 = __sincos_stret(v67);
          v162 = atan2(v137 - v139 + v69.__sinval * v69.__sinval * 42841.3115 * v69.__sinval, v66 - v69.__cosval * v69.__cosval * 42697.6727 * v69.__cosval);
          v163 = v68;
          v70 = __x.f64[0] - v146 * 2.5;
          v71 = __x.f64[1] - v142 * 2.5;
          v72 = sqrt(v70 * v70 + v71 * v71);
          v73 = atan2(v153 - v149 * 2.5, v72 * 0.996647189);
          v74 = atan2(v71, v70);
          v75 = __sincos_stret(v73);
          v164 = atan2(v153 - v149 * 2.5 + v75.__sinval * v75.__sinval * 42841.3115 * v75.__sinval, v72 - v75.__cosval * v75.__cosval * 42697.6727 * v75.__cosval);
          v165 = v74;
          v76 = __x.f64[0] + v146 * 15.0;
          v77 = __x.f64[1] + v142 * 15.0;
          v78 = v153 + v149 * 15.0;
          v79 = sqrt(v76 * v76 + v77 * v77);
          v80 = atan2(v78, v79 * 0.996647189);
          v81 = atan2(v77, v76);
          v82 = __sincos_stret(v80);
          v166[0] = atan2(v78 + v82.__sinval * v82.__sinval * 42841.3115 * v82.__sinval, v79 - v82.__cosval * v82.__cosval * 42697.6727 * v82.__cosval);
          v166[1] = v81;
          v83 = __x.f64[0] + v146 * 30.0;
          v84 = __x.f64[1] + v142 * 30.0;
          v85 = v153 + v149 * 30.0;
          v86 = sqrt(v83 * v83 + v84 * v84);
          v87 = atan2(v85, v86 * 0.996647189);
          v88 = atan2(v84, v83);
          v89 = __sincos_stret(v87);
          v167[0] = atan2(v85 + v89.__sinval * v89.__sinval * 42841.3115 * v89.__sinval, v86 - v89.__cosval * v89.__cosval * 42697.6727 * v89.__cosval);
          v167[1] = v88;
          v90 = altitude::IntersectorHeight::heightAtLatLon(v41, v161.f64, v156.f64, 0xEu);
          v91 = v90;
          if (v156.f64[0] > -1.79769313e308 && v90 == 0)
            v93 = v156.f64[0];
          else
            v93 = -1.79769313e308;
          v94 = altitude::IntersectorHeight::heightAtLatLon(v41, &v162, v156.f64, 0xEu);
          v95 = v94;
          if (v93 < v156.f64[0] && v94 == 0)
            v93 = v156.f64[0];
          v97 = altitude::IntersectorHeight::heightAtLatLon(v41, &v164, v156.f64, 0xEu);
          v98 = v97;
          if (v93 < v156.f64[0] && v97 == 0)
            v93 = v156.f64[0];
          v100 = altitude::IntersectorHeight::heightAtLatLon(v41, v166, v156.f64, 0xEu);
          v101 = v100;
          if (v93 < v156.f64[0] && v100 == 0)
            v93 = v156.f64[0];
          v103 = altitude::IntersectorHeight::heightAtLatLon(v41, v167, v156.f64, 0xEu);
          v40 = v143;
          cosval = v38.__cosval;
          v104 = v156.f64[0];
          if (v93 >= v156.f64[0] || v103 != 0)
            v104 = v93;
          if (v103 || v101 || v98 || v95 || v91)
          {
LABEL_46:
            v155 = v40;
            v106 = cosval;
            v107 = (v151 + 10000.0) * cosval;
            v108 = __sincos_stret(v147);
            v161.f64[0] = v107 * v108.__cosval;
            v161.f64[1] = v107 * v108.__sinval;
            v162 = (v151 * 0.99330562 + 10000.0) * v38.__sinval;
            if (!altitude::Intersector::intersectAtPosition((uint64_t)&v155, &v161, &v156))
            {
LABEL_50:
              v116 = *((_QWORD *)this + 5);
              altitude::View::updatePoints(v116, (double *)(*(_QWORD *)(v6 + 72) + 8));
              v117 = *(_QWORD *)(**((_QWORD **)this + 4) + 792);
              v118 = altitude::GlobeView::calculateMinZoomDistance((altitude::GlobeView *)v6);
              v119 = fmax(fmin(*(double *)(v6 + 400), 60592301.5), altitude::GlobeView::calculateMinZoomDistance((altitude::GlobeView *)v6));
              v120 = *(_QWORD *)(v116 + 1456);
              if (!v120)
              {
                v120 = *(_QWORD *)(v116 + 32);
                *(_QWORD *)(v116 + 1456) = v120;
              }
              v121 = *(double *)(v120 + 32);
              *(float *)(v116 + 1388) = v121;
              v122 = 1.0 / *(double *)(v116 + 376);
              v123 = vsubq_f64(*(float64x2_t *)&v157[8], v159);
              v124 = vmulq_f64(v123, v123);
              v125 = sqrt(v124.f64[0] + (*(double *)v157 - v158) * (*(double *)v157 - v158) + v124.f64[1]);
              *(float *)v124.f64 = v125 * v122 / ((double)(*(_DWORD *)(v117 + 48) - *(_DWORD *)(v117 + 40)) * 0.5);
              *(_DWORD *)(v116 + 1384) = LODWORD(v124.f64[0]);
              *(float *)(v116 + 1380) = *(float *)v124.f64 * v121;
              v126 = v122 * 0.0000000499064043;
              v127 = fmin(fmax(-log2(v125 * (v122 * 0.0000000499064043)), 0.0), 19.0);
              *(float *)(v116 + 1352) = v127;
              v128 = v127;
              *(_DWORD *)(v116 + 1356) = v127;
              if ((int)v127 <= 1)
                v129 = 1;
              else
                v129 = v127;
              *(_DWORD *)(v116 + 1360) = v129 - 1;
              if (v128 + 1 < 0x13)
                v130 = v128 + 1;
              else
                v130 = 19;
              *(_DWORD *)(v116 + 1364) = v130;
              *(float *)(v116 + 1376) = v127 - truncf(v127);
              v131 = fmin(fmax(-log2(v126 * v118), 0.0), 19.0);
              *(float *)(v116 + 1368) = v131;
              v132 = fmin(fmax(-log2(v126 * v119), 0.0), 19.0);
              *(float *)(v116 + 1372) = v132;
              v133 = *(double *)(*(_QWORD *)(v6 + 72) + 40) * 57.2957795;
              *(float *)(v116 + 1320) = v133;
              if (*(_BYTE *)(v6 + 432))
                v134 = 3;
              else
                v134 = 1;
              *(_DWORD *)(v116 + 1392) = v134 | (4 * *(unsigned __int8 *)(v6 + 434)) | (8
                                                                                      * *(unsigned __int8 *)(v6 + 433));
              karo::graphics::View::lookAt(*((double **)this + 5), (double *)v157, &v158, v160);
              v135 = *((_QWORD *)this + 4);
              v3 = *((_QWORD *)this + 5);
              *((_DWORD *)this + 14) = *(_DWORD *)(v3 + 112);
              *((_DWORD *)this + 16) = *(_DWORD *)(v135 + 88);
              *((_DWORD *)this + 15) = *(_DWORD *)(v6 + 376);
              return v3;
            }
            geo::Coordinate3D<geo::Radians,double>::Coordinate3D<double>((uint64_t)&v161, v156.f64);
            v104 = v162;
            cosval = v106;
          }
          v109 = v104 + 35.0;
          if (v144 / cosval - v151 < v104 + 35.0)
          {
            v110 = *(_OWORD *)v157;
            v111 = *(double *)&v157[16];
            v112 = (v109 + v151) * cosval;
            v113 = __sincos_stret(v147);
            *(double *)v157 = v112 * v113.__cosval;
            *(double *)&v157[8] = v112 * v113.__sinval;
            *(double *)&v157[16] = (v109 + v151 * 0.99330562) * v38.__sinval;
            v158 = v112 * v113.__cosval - *(double *)&v110 + v158;
            v159.f64[0] = v112 * v113.__sinval - *((double *)&v110 + 1) + v159.f64[0];
            v159.f64[1] = *(double *)&v157[16] - v111 + v159.f64[1];
            v114 = *(_QWORD *)(v6 + 72);
            geo::Coordinate3D<geo::Radians,double>::Coordinate3D<double>((uint64_t)&v161, &v158);
            v115 = v161;
            *(double *)(v114 + 24) = v162;
            *(float64x2_t *)(v114 + 8) = v115;
            ++*(_DWORD *)(v6 + 376);
          }
          goto LABEL_50;
        }
      }
    }
  }
  return v3;
}

uint64_t altitude::GlobeMainViewNode::onChildTileRemoved(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(_QWORD *)(result + 72) == a3)
    *(_QWORD *)(result + 72) = 0;
  return result;
}

void `non-virtual thunk to'altitude::GlobeMainViewNode::~GlobeMainViewNode(altitude::GlobeMainViewNode *this)
{
  *((_QWORD *)this - 6) = off_1E42C34D0;
  if (*((char *)this - 17) < 0)
    operator delete(*((void **)this - 5));
}

{
  *((_QWORD *)this - 6) = off_1E42C34D0;
  if (*((char *)this - 17) < 0)
    operator delete(*((void **)this - 5));
  JUMPOUT(0x1A1AF4E00);
}

uint64_t `non-virtual thunk to'altitude::GlobeMainViewNode::onChildTileRemoved(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(_QWORD *)(result + 24) == a3)
    *(_QWORD *)(result + 24) = 0;
  return result;
}

uint64_t geo::Coordinate3D<geo::Radians,double>::Coordinate3D<double>(uint64_t a1, double *a2)
{
  long double v3;
  long double v4;
  long double v5;
  double v6;
  double v7;
  long double v8;
  __double2 v9;
  double v10;
  __double2 v11;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = sqrt(v3 * v3 + v4 * v4);
  v7 = atan2(v5, v6 * 0.996647189);
  v8 = atan2(v4, v3);
  v9 = __sincos_stret(v7);
  v10 = atan2(v5 + v9.__sinval * v9.__sinval * 42841.3115 * v9.__sinval, v6 + v9.__cosval * v9.__cosval * -42697.6727 * v9.__cosval);
  v11 = __sincos_stret(v10);
  *(double *)a1 = v10;
  *(long double *)(a1 + 8) = v8;
  *(double *)(a1 + 16) = v6 / v11.__cosval + -6378137.0 / sqrt(v11.__sinval * v11.__sinval * -0.00669437999 + 1.0);
  return a1;
}

uint64_t ggl::VertexDataTyped<ggl::BuildingPointyRoof::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::VertexDataTyped<ggl::BuildingPointyRoof::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::VertexDataTyped<ggl::BuildingPointyRoof::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v2 = *(_QWORD *)(a1 - 128);
  if (v2)
  {
    *(_QWORD *)(a1 - 120) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v2, *(_QWORD *)(a1 - 112) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  v2 = a1 - 200;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 - 120) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v3, *(_QWORD *)(a1 - 112) - v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 - 168);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::BuildingPointyRoof::DefaultVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::BuildingPointyRoof::DefaultVbo>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0090;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::BuildingPointyRoof::DefaultVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::BuildingPointyRoof::DefaultVbo>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0090;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::BuildingPointyRoof::DefaultVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::BuildingPointyRoof::DefaultVbo>,ggl::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 32))(a1 + 32);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::BuildingPointyRoof::DefaultVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::BuildingPointyRoof::DefaultVbo>,ggl::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a1, 256);
}

void ggl::BuildingPointyRoof::BuildingMesh::~BuildingMesh(ggl::BuildingPointyRoof::BuildingMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::BuildingPointyRoof::BuildingMesh::~BuildingMesh(ggl::BuildingPointyRoof::BuildingMesh *this)
{
  ggl::Mesh::~Mesh((ggl::BuildingPointyRoof::BuildingMesh *)((char *)this - 16));
}

{
  ggl::Mesh::~Mesh((ggl::BuildingPointyRoof::BuildingMesh *)((char *)this - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::MeshTyped<ggl::BuildingPointyRoof::DefaultVbo>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::MeshTyped<ggl::BuildingPointyRoof::DefaultVbo>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::ElevationTileData::primaryRaster(md::ElevationTileData *this)
{
  return 0;
}

void std::__shared_ptr_emplace<ggl::TexturedAnimatedRibbon::BasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3BD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::TexturedAnimatedRibbon::BasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3BD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::RouteLineTraffic::BasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0CD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::RouteLineTraffic::BasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0CD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::RouteLineAlphaReset::BasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E37B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::RouteLineAlphaReset::BasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E37B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::RouteLine::RouteLineMaskPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5308;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::RouteLine::RouteLineMaskPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5308;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::RouteLine::PatternedBasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E52D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::RouteLine::PatternedBasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E52D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::DottedRouteLine::BasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF568;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::DottedRouteLine::BasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF568;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::RouteLine::BasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5298;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::RouteLine::BasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5298;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

md::RouteLineSharedResources *md::RouteLineSharedResources::RouteLineSharedResources(md::RouteLineSharedResources *this, const ggl::StandardLibrary *a2, AlphaAtlas *a3, const RenderTargetFormat *a4, int a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *p_shared_owners;
  unint64_t v51;
  char *v52;
  unsigned __int8 v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  int8x16_t v59;
  int16x8_t v60;
  int32x4_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int16x8_t v64;
  int32x4_t v65;
  int8x16_t v66;
  int32x4_t v67;
  int8x16_t v68;
  int32x4_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int16x8_t v79;
  int32x4_t v80;
  int8x16_t v81;
  int16x8_t v82;
  int32x4_t v83;
  int8x16_t v84;
  int32x4_t v85;
  int8x16_t v86;
  int32x4_t v87;
  int8x16_t v88;
  int8x16_t v89;
  int8x16_t v90;
  int8x16_t v91;
  int8x16_t v92;
  int8x16_t v93;
  int8x16_t v94;
  int8x16_t v95;
  int8x16_t v96;
  int8x16_t v97;
  int8x16_t v98;
  int8x16_t v99;
  int8x16_t v100;
  int8x16_t v101;
  int16x8_t v102;
  int32x4_t v103;
  int8x16_t v104;
  int8x16_t v105;
  int16x8_t v106;
  int32x4_t v107;
  int8x16_t v108;
  int16x8_t v109;
  int32x4_t v110;
  int8x16_t v111;
  int16x8_t v112;
  int32x4_t v113;
  int8x16_t v114;
  int32x4_t v115;
  int8x16_t v116;
  int32x4_t v117;
  int8x16_t v118;
  int32x4_t v119;
  int8x16_t v120;
  int32x4_t v121;
  int8x16_t v122;
  int8x16_t v123;
  int8x16_t v124;
  int8x16_t v125;
  int8x16_t v126;
  int8x16_t v127;
  int8x16_t v128;
  int8x16_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  unint64_t *v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  char *v140;
  unsigned __int8 v141;
  unint64_t *v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t *v145;
  unint64_t v146;
  int8x16_t v147;
  int16x8_t v148;
  int32x4_t v149;
  int8x16_t v150;
  int8x16_t v151;
  int16x8_t v152;
  int32x4_t v153;
  int8x16_t v154;
  int32x4_t v155;
  int8x16_t v156;
  int32x4_t v157;
  int8x16_t v158;
  int8x16_t v159;
  int8x16_t v160;
  int8x16_t v161;
  int8x16_t v162;
  int8x16_t v163;
  int8x16_t v164;
  int8x16_t v165;
  int8x16_t v166;
  int16x8_t v167;
  int32x4_t v168;
  int8x16_t v169;
  int16x8_t v170;
  int32x4_t v171;
  int8x16_t v172;
  int32x4_t v173;
  int8x16_t v174;
  int32x4_t v175;
  int8x16_t v176;
  int8x16_t v177;
  int8x16_t v178;
  int8x16_t v179;
  int8x16_t v180;
  int8x16_t v181;
  int8x16_t v182;
  int8x16_t v183;
  int8x16_t v184;
  int8x16_t v185;
  int8x16_t v186;
  int8x16_t v187;
  int8x16_t v188;
  int8x16_t v189;
  int16x8_t v190;
  int32x4_t v191;
  int16x8_t v192;
  int32x4_t v193;
  int32x4_t v194;
  int32x4_t v195;
  int8x16_t v196;
  int8x16_t v197;
  int8x16_t v198;
  int16x8_t v199;
  int32x4_t v200;
  int16x8_t v201;
  int32x4_t v202;
  int8x16_t v203;
  int8x16_t v204;
  int8x16_t v205;
  int32x4_t v206;
  int8x16_t v207;
  int8x16_t v208;
  int8x16_t v209;
  int32x4_t v210;
  int8x16_t v211;
  int8x16_t v212;
  int8x16_t v213;
  int8x16_t v214;
  int8x16_t v215;
  int8x16_t v216;
  int8x16_t v217;
  int8x16_t v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  unint64_t *v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  char *v229;
  unsigned __int8 v230;
  unint64_t *v231;
  unint64_t v232;
  unint64_t v233;
  unint64_t *v234;
  unint64_t v235;
  int8x16_t v236;
  int16x8_t v237;
  int32x4_t v238;
  int8x16_t v239;
  int8x16_t v240;
  int16x8_t v241;
  int32x4_t v242;
  int8x16_t v243;
  int32x4_t v244;
  int8x16_t v245;
  int32x4_t v246;
  int8x16_t v247;
  int8x16_t v248;
  int8x16_t v249;
  int8x16_t v250;
  int8x16_t v251;
  int8x16_t v252;
  int8x16_t v253;
  int8x16_t v254;
  int8x16_t v255;
  int16x8_t v256;
  int32x4_t v257;
  int8x16_t v258;
  int16x8_t v259;
  int32x4_t v260;
  int8x16_t v261;
  int32x4_t v262;
  int8x16_t v263;
  int32x4_t v264;
  int8x16_t v265;
  int8x16_t v266;
  int8x16_t v267;
  int8x16_t v268;
  int8x16_t v269;
  int8x16_t v270;
  int8x16_t v271;
  int8x16_t v272;
  int8x16_t v273;
  int8x16_t v274;
  int8x16_t v275;
  int8x16_t v276;
  int8x16_t v277;
  int8x16_t v278;
  int16x8_t v279;
  int32x4_t v280;
  int16x8_t v281;
  int32x4_t v282;
  int32x4_t v283;
  int32x4_t v284;
  int8x16_t v285;
  int8x16_t v286;
  int8x16_t v287;
  int16x8_t v288;
  int32x4_t v289;
  int16x8_t v290;
  int32x4_t v291;
  int8x16_t v292;
  int8x16_t v293;
  int8x16_t v294;
  int32x4_t v295;
  int8x16_t v296;
  int8x16_t v297;
  int8x16_t v298;
  int32x4_t v299;
  int8x16_t v300;
  int8x16_t v301;
  int8x16_t v302;
  int8x16_t v303;
  int8x16_t v304;
  int8x16_t v305;
  int8x16_t v306;
  int8x16_t v307;
  std::__shared_weak_count *v308;
  unint64_t *v309;
  unint64_t v310;
  unint64_t *v311;
  unint64_t v312;
  uint64_t v313;
  uint64_t v314;
  std::__shared_weak_count *v315;
  unint64_t *v316;
  unint64_t v317;
  char *v318;
  unsigned __int8 v319;
  unint64_t *v320;
  unint64_t v321;
  unint64_t v322;
  unint64_t *v323;
  unint64_t v324;
  int8x16_t v325;
  int16x8_t v326;
  int32x4_t v327;
  int8x16_t v328;
  int8x16_t v329;
  int16x8_t v330;
  int32x4_t v331;
  int8x16_t v332;
  int32x4_t v333;
  int8x16_t v334;
  int32x4_t v335;
  int8x16_t v336;
  int8x16_t v337;
  int8x16_t v338;
  int8x16_t v339;
  int8x16_t v340;
  int8x16_t v341;
  int8x16_t v342;
  int8x16_t v343;
  int8x16_t v344;
  int16x8_t v345;
  int32x4_t v346;
  int8x16_t v347;
  int16x8_t v348;
  int32x4_t v349;
  int8x16_t v350;
  int32x4_t v351;
  int8x16_t v352;
  int32x4_t v353;
  int8x16_t v354;
  int8x16_t v355;
  int8x16_t v356;
  int8x16_t v357;
  int8x16_t v358;
  int8x16_t v359;
  int8x16_t v360;
  int8x16_t v361;
  int8x16_t v362;
  int8x16_t v363;
  int8x16_t v364;
  int8x16_t v365;
  int8x16_t v366;
  int8x16_t v367;
  int16x8_t v368;
  int32x4_t v369;
  int16x8_t v370;
  int32x4_t v371;
  int32x4_t v372;
  int32x4_t v373;
  int8x16_t v374;
  int8x16_t v375;
  int8x16_t v376;
  int16x8_t v377;
  int32x4_t v378;
  int16x8_t v379;
  int32x4_t v380;
  int8x16_t v381;
  int8x16_t v382;
  int8x16_t v383;
  int32x4_t v384;
  int8x16_t v385;
  int8x16_t v386;
  int8x16_t v387;
  int32x4_t v388;
  int8x16_t v389;
  int8x16_t v390;
  int8x16_t v391;
  int8x16_t v392;
  int8x16_t v393;
  int8x16_t v394;
  int8x16_t v395;
  int8x16_t v396;
  std::__shared_weak_count *v397;
  unint64_t *v398;
  unint64_t v399;
  unint64_t *v400;
  unint64_t v401;
  uint64_t v402;
  uint64_t v403;
  std::__shared_weak_count *v404;
  unint64_t *v405;
  unint64_t v406;
  char *v407;
  unsigned __int8 v408;
  unint64_t *v409;
  unint64_t v410;
  unint64_t v411;
  unint64_t *v412;
  unint64_t v413;
  int8x16_t v414;
  int16x8_t v415;
  int32x4_t v416;
  int8x16_t v417;
  int8x16_t v418;
  int16x8_t v419;
  int32x4_t v420;
  int8x16_t v421;
  int32x4_t v422;
  int8x16_t v423;
  int32x4_t v424;
  int8x16_t v425;
  int8x16_t v426;
  int8x16_t v427;
  int8x16_t v428;
  int8x16_t v429;
  int8x16_t v430;
  int8x16_t v431;
  int8x16_t v432;
  int8x16_t v433;
  int16x8_t v434;
  int32x4_t v435;
  int8x16_t v436;
  int16x8_t v437;
  int32x4_t v438;
  int8x16_t v439;
  int32x4_t v440;
  int8x16_t v441;
  int32x4_t v442;
  int8x16_t v443;
  int8x16_t v444;
  int8x16_t v445;
  int8x16_t v446;
  int8x16_t v447;
  int8x16_t v448;
  int8x16_t v449;
  int8x16_t v450;
  int8x16_t v451;
  int8x16_t v452;
  int8x16_t v453;
  int8x16_t v454;
  int8x16_t v455;
  int8x16_t v456;
  int16x8_t v457;
  int32x4_t v458;
  int16x8_t v459;
  int32x4_t v460;
  int32x4_t v461;
  int32x4_t v462;
  int8x16_t v463;
  int8x16_t v464;
  int8x16_t v465;
  int16x8_t v466;
  int32x4_t v467;
  int16x8_t v468;
  int32x4_t v469;
  int8x16_t v470;
  int8x16_t v471;
  int8x16_t v472;
  int32x4_t v473;
  int8x16_t v474;
  int8x16_t v475;
  int8x16_t v476;
  int32x4_t v477;
  int8x16_t v478;
  int8x16_t v479;
  int8x16_t v480;
  int8x16_t v481;
  int8x16_t v482;
  int8x16_t v483;
  int8x16_t v484;
  int8x16_t v485;
  std::__shared_weak_count *v486;
  unint64_t *v487;
  unint64_t v488;
  unint64_t *v489;
  unint64_t v490;
  uint64_t v491;
  uint64_t v492;
  std::__shared_weak_count *v493;
  unint64_t *v494;
  unint64_t v495;
  char *v496;
  unsigned __int8 v497;
  unint64_t *v498;
  unint64_t v499;
  unint64_t v500;
  unint64_t *v501;
  unint64_t v502;
  int8x16_t v503;
  int16x8_t v504;
  int32x4_t v505;
  int8x16_t v506;
  int8x16_t v507;
  int16x8_t v508;
  int32x4_t v509;
  int8x16_t v510;
  int32x4_t v511;
  int8x16_t v512;
  int32x4_t v513;
  int8x16_t v514;
  int8x16_t v515;
  int8x16_t v516;
  int8x16_t v517;
  int8x16_t v518;
  int8x16_t v519;
  int8x16_t v520;
  int8x16_t v521;
  int8x16_t v522;
  int16x8_t v523;
  int32x4_t v524;
  int8x16_t v525;
  int16x8_t v526;
  int32x4_t v527;
  int8x16_t v528;
  int32x4_t v529;
  int8x16_t v530;
  int32x4_t v531;
  int8x16_t v532;
  int8x16_t v533;
  int8x16_t v534;
  int8x16_t v535;
  int8x16_t v536;
  int8x16_t v537;
  int8x16_t v538;
  int8x16_t v539;
  int8x16_t v540;
  int8x16_t v541;
  int8x16_t v542;
  int8x16_t v543;
  int8x16_t v544;
  int8x16_t v545;
  int16x8_t v546;
  int32x4_t v547;
  int16x8_t v548;
  int32x4_t v549;
  int32x4_t v550;
  int32x4_t v551;
  int8x16_t v552;
  int8x16_t v553;
  int8x16_t v554;
  int16x8_t v555;
  int32x4_t v556;
  int16x8_t v557;
  int32x4_t v558;
  int8x16_t v559;
  int8x16_t v560;
  int8x16_t v561;
  int32x4_t v562;
  int8x16_t v563;
  int8x16_t v564;
  int8x16_t v565;
  int32x4_t v566;
  int8x16_t v567;
  int8x16_t v568;
  int8x16_t v569;
  int8x16_t v570;
  int8x16_t v571;
  int8x16_t v572;
  int8x16_t v573;
  int8x16_t v574;
  std::__shared_weak_count *v575;
  unint64_t *v576;
  unint64_t v577;
  unint64_t *v578;
  unint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  std::__shared_weak_count *v584;
  unint64_t *v585;
  unint64_t v586;
  unint64_t v587;
  unint64_t v588;
  unint64_t *v589;
  unint64_t v590;
  uint64_t v591;
  std::__shared_weak_count *v592;
  unint64_t *v593;
  unint64_t v594;
  unint64_t *v595;
  unint64_t v596;
  uint64_t v597;
  uint64_t v598;
  std::__shared_weak_count *v599;
  unint64_t *v600;
  unint64_t v601;
  char *v602;
  unsigned __int8 v603;
  unint64_t *v604;
  unint64_t v605;
  unint64_t v606;
  unint64_t *v607;
  unint64_t v608;
  int8x16_t v609;
  int16x8_t v610;
  int32x4_t v611;
  int8x16_t v612;
  int8x16_t v613;
  int16x8_t v614;
  int32x4_t v615;
  int8x16_t v616;
  int32x4_t v617;
  int8x16_t v618;
  int32x4_t v619;
  int8x16_t v620;
  int8x16_t v621;
  int8x16_t v622;
  int8x16_t v623;
  int8x16_t v624;
  int8x16_t v625;
  int16x8_t v626;
  int32x4_t v627;
  int8x16_t v628;
  int16x8_t v629;
  int32x4_t v630;
  int8x16_t v631;
  int32x4_t v632;
  int8x16_t v633;
  int32x4_t v634;
  int8x16_t v635;
  int8x16_t v636;
  int8x16_t v637;
  int8x16_t v638;
  int8x16_t v639;
  int8x16_t v640;
  int8x16_t v641;
  int8x16_t v642;
  int8x16_t v643;
  int8x16_t v644;
  int8x16_t v645;
  int8x16_t v646;
  int8x16_t v647;
  int16x8_t v648;
  int32x4_t v649;
  int16x8_t v650;
  int32x4_t v651;
  int32x4_t v652;
  int32x4_t v653;
  int8x16_t v654;
  int8x16_t v655;
  int8x16_t v656;
  int8x16_t v657;
  int8x16_t v658;
  int8x16_t v659;
  int8x16_t v660;
  int8x16_t v661;
  int8x16_t v662;
  int16x8_t v663;
  int32x4_t v664;
  int16x8_t v665;
  int32x4_t v666;
  int32x4_t v667;
  int32x4_t v668;
  int8x16_t v669;
  int8x16_t v670;
  int8x16_t v671;
  int8x16_t v672;
  int8x16_t v673;
  int8x16_t v674;
  int8x16_t v675;
  std::__shared_weak_count *v676;
  unint64_t *v677;
  unint64_t v678;
  unint64_t *v679;
  unint64_t v680;
  ggl::RouteLineShader *v682;
  unsigned __int8 v683;
  unsigned __int8 v684;
  unsigned __int8 v685;
  ggl::DottedRouteLineShader *v686;
  unsigned __int8 v687;
  unsigned __int8 v688;
  unsigned __int8 v689;
  ggl::PatternedRouteLineShader *v690;
  unsigned __int8 v691;
  unsigned __int8 v692;
  unsigned __int8 v693;
  ggl::RouteLineMaskShader *v694;
  unsigned __int8 v695;
  unsigned __int8 v696;
  unsigned __int8 v697;
  ggl::RouteLineAlphaResetShader *v698;
  unsigned __int8 v699;
  unsigned __int8 v700;
  unsigned __int8 v701;
  ggl::RouteLineTrafficShader *v702;
  unsigned __int8 v703;
  unsigned __int8 v704;
  unsigned __int8 v705;
  ggl::TexturedAnimatedRibbonShader *v706;
  unsigned __int8 v707;
  unsigned __int8 v708;
  unsigned __int8 v709;
  unsigned __int8 v710;
  unsigned __int8 v711;
  unsigned __int8 v712;
  unsigned __int8 v713;
  unsigned __int8 v714;
  unsigned __int8 v715;
  unsigned __int8 v716;
  unsigned __int8 v717;
  unsigned __int8 v718;
  unsigned __int8 v719;
  unsigned __int8 v720;
  unsigned __int8 v721;
  unsigned __int8 v722;
  unsigned __int8 v723;
  unsigned __int8 v724;
  unsigned __int8 v725;
  unsigned __int8 v726;
  unsigned __int8 v727;
  unsigned __int8 v728;
  unsigned __int8 v729;
  unsigned __int8 v730;
  AlphaAtlas *v731;
  uint64_t *v732;
  char v733;
  int v734;
  uint64_t v736;
  std::__shared_weak_count *v737;
  __int16 v738;
  char v739;
  __int16 v740;
  char v741;
  __int16 v742;
  char v743;
  __int128 v744;
  __int128 v745;
  __int128 v746;
  uint64_t v747;
  __int128 v748;
  __int128 v749;
  __int128 v750;
  __int128 v751;
  std::__shared_weak_count *v752;
  __int128 v753;
  __int128 v754;
  __int128 v755;
  __int128 v756;
  __int128 v757;
  __int128 v758;
  __int128 v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  __int128 v765;
  std::__shared_weak_count *v766;
  std::__shared_weak_count *v767;
  std::__shared_weak_count *v768;
  std::__shared_weak_count *v769;
  std::__shared_weak_count *v770;
  __int128 v771;

  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  if (a5)
  {
    v9 = operator new();
    *(_DWORD *)(v9 + 32) = 0;
    *(_QWORD *)(v9 + 16) = 0;
    *(_QWORD *)(v9 + 24) = 0;
    *(_QWORD *)v9 = &off_1E42B5DE8;
    *(_QWORD *)(v9 + 8) = 0;
    *(_QWORD *)(v9 + 36) = 65537;
    *(_DWORD *)(v9 + 44) = 0;
    *(_QWORD *)(v9 + 48) = 0x7F000202020100;
    *(_WORD *)(v9 + 56) = 0;
    *(_BYTE *)(v9 + 58) = 3;
    *(_QWORD *)(v9 + 67) = 0;
    *(_QWORD *)(v9 + 59) = 0;
    *(_BYTE *)(v9 + 75) = 0;
    *(_QWORD *)(v9 + 132) = 0;
    *(_QWORD *)(v9 + 124) = 0;
    *(_WORD *)(v9 + 188) = 257;
    *(_QWORD *)(v9 + 192) = 0;
    *(_QWORD *)(v9 + 200) = 0;
    *(_BYTE *)(v9 + 208) = 0;
    v10 = *(_QWORD *)this;
    *(_QWORD *)this = v9;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v11 = operator new();
    *(_DWORD *)(v11 + 32) = 0;
    *(_QWORD *)(v11 + 16) = 0;
    *(_QWORD *)(v11 + 24) = 0;
    *(_QWORD *)v11 = &off_1E42B5DE8;
    *(_QWORD *)(v11 + 8) = 0;
    *(_QWORD *)(v11 + 36) = 66304;
    *(_DWORD *)(v11 + 44) = 1056964608;
    *(_QWORD *)(v11 + 48) = 0x7F000202020100;
    *(_WORD *)(v11 + 56) = 0;
    *(_BYTE *)(v11 + 58) = 3;
    *(_QWORD *)(v11 + 67) = 0;
    *(_QWORD *)(v11 + 59) = 0;
    *(_BYTE *)(v11 + 75) = 0;
    *(_QWORD *)(v11 + 132) = 0;
    *(_QWORD *)(v11 + 124) = 0;
    *(_WORD *)(v11 + 188) = 257;
    *(_QWORD *)(v11 + 192) = 0;
    *(_QWORD *)(v11 + 200) = 0;
    *(_BYTE *)(v11 + 208) = 0;
    v12 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v11;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    v13 = operator new();
    *(_DWORD *)(v13 + 32) = 0;
    *(_QWORD *)(v13 + 16) = 0;
    *(_QWORD *)(v13 + 24) = 0;
    *(_QWORD *)v13 = &off_1E42B5DE8;
    *(_QWORD *)(v13 + 8) = 0;
    *(_QWORD *)(v13 + 36) = 66560;
    *(_DWORD *)(v13 + 44) = 1056964608;
    *(_QWORD *)(v13 + 48) = 0x7F000202020100;
    *(_WORD *)(v13 + 56) = 0;
    *(_BYTE *)(v13 + 58) = 3;
    *(_QWORD *)(v13 + 67) = 0;
    *(_QWORD *)(v13 + 59) = 0;
    *(_BYTE *)(v13 + 75) = 0;
    *(_QWORD *)(v13 + 132) = 0;
    *(_QWORD *)(v13 + 124) = 0;
    *(_WORD *)(v13 + 188) = 257;
    *(_QWORD *)(v13 + 192) = 0;
    *(_QWORD *)(v13 + 200) = 0;
    *(_BYTE *)(v13 + 208) = 0;
    v14 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v13;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    v15 = operator new();
    *(_DWORD *)(v15 + 32) = 0;
    *(_QWORD *)(v15 + 16) = 0;
    *(_QWORD *)(v15 + 24) = 0;
    *(_QWORD *)v15 = &off_1E42B5DE8;
    *(_QWORD *)(v15 + 8) = 0;
    *(_QWORD *)(v15 + 36) = 65537;
    *(_DWORD *)(v15 + 44) = 0;
    *(_QWORD *)(v15 + 48) = 1;
    *(_WORD *)(v15 + 56) = 0;
    *(_BYTE *)(v15 + 58) = 3;
    *(_QWORD *)(v15 + 67) = 0;
    *(_QWORD *)(v15 + 59) = 0;
    *(_BYTE *)(v15 + 75) = 0;
    *(_QWORD *)(v15 + 132) = 0;
    *(_QWORD *)(v15 + 124) = 0;
    *(_WORD *)(v15 + 188) = 257;
    *(_QWORD *)(v15 + 192) = 0;
    *(_QWORD *)(v15 + 200) = 0;
    *(_BYTE *)(v15 + 208) = 0;
    v16 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = v15;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    v17 = operator new();
    *(_DWORD *)(v17 + 32) = 0;
    *(_QWORD *)(v17 + 16) = 0;
    *(_QWORD *)(v17 + 24) = 0;
    *(_QWORD *)v17 = &off_1E42B5DE8;
    *(_QWORD *)(v17 + 8) = 0;
    *(_QWORD *)(v17 + 36) = 66304;
    *(_DWORD *)(v17 + 44) = 1056964608;
    *(_QWORD *)(v17 + 48) = 1;
    *(_WORD *)(v17 + 56) = 0;
    *(_BYTE *)(v17 + 58) = 3;
    *(_QWORD *)(v17 + 67) = 0;
    *(_QWORD *)(v17 + 59) = 0;
    *(_BYTE *)(v17 + 75) = 0;
    *(_QWORD *)(v17 + 132) = 0;
    *(_QWORD *)(v17 + 124) = 0;
    *(_WORD *)(v17 + 188) = 257;
    *(_QWORD *)(v17 + 192) = 0;
    *(_QWORD *)(v17 + 200) = 0;
    *(_BYTE *)(v17 + 208) = 0;
    v18 = *((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = v17;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    v19 = operator new();
    *(_DWORD *)(v19 + 32) = 0;
    *(_QWORD *)(v19 + 16) = 0;
    *(_QWORD *)(v19 + 24) = 0;
    *(_QWORD *)v19 = &off_1E42B5DE8;
    *(_QWORD *)(v19 + 8) = 0;
    *(_QWORD *)(v19 + 36) = 66304;
    *(_DWORD *)(v19 + 44) = 1056964608;
    *(_QWORD *)(v19 + 48) = 1;
    *(_WORD *)(v19 + 56) = 0;
    *(_BYTE *)(v19 + 58) = 3;
    *(_QWORD *)(v19 + 67) = 0;
    *(_QWORD *)(v19 + 59) = 0;
    *(_BYTE *)(v19 + 75) = 0;
    *(_QWORD *)(v19 + 132) = 0;
    *(_QWORD *)(v19 + 124) = 0;
    *(_WORD *)(v19 + 188) = 257;
    *(_QWORD *)(v19 + 192) = 0;
    *(_QWORD *)(v19 + 200) = 0;
    *(_BYTE *)(v19 + 208) = 0;
    v20 = *((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = v19;
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    v21 = operator new();
  }
  else
  {
    v22 = operator new();
    *(_DWORD *)(v22 + 32) = 0;
    *(_QWORD *)(v22 + 16) = 0;
    *(_QWORD *)(v22 + 24) = 0;
    *(_QWORD *)v22 = &off_1E42B5DE8;
    *(_QWORD *)(v22 + 8) = 0;
    *(_QWORD *)(v22 + 36) = 65537;
    *(_DWORD *)(v22 + 44) = 0;
    *(_QWORD *)(v22 + 48) = 0xFF7F0200000500;
    *(_WORD *)(v22 + 56) = 0;
    *(_BYTE *)(v22 + 58) = 3;
    *(_QWORD *)(v22 + 67) = 0;
    *(_QWORD *)(v22 + 59) = 0;
    *(_BYTE *)(v22 + 75) = 0;
    *(_QWORD *)(v22 + 132) = 0;
    *(_QWORD *)(v22 + 124) = 0;
    *(_WORD *)(v22 + 188) = 257;
    *(_QWORD *)(v22 + 192) = 0;
    *(_QWORD *)(v22 + 200) = 0;
    *(_BYTE *)(v22 + 208) = 0;
    v23 = *(_QWORD *)this;
    *(_QWORD *)this = v22;
    if (v23)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
      v22 = *(_QWORD *)this;
    }
    *(_BYTE *)(v22 + 56) = 0;
    v24 = operator new();
    *(_DWORD *)(v24 + 32) = 0;
    *(_QWORD *)(v24 + 16) = 0;
    *(_QWORD *)(v24 + 24) = 0;
    *(_QWORD *)v24 = &off_1E42B5DE8;
    *(_QWORD *)(v24 + 8) = 0;
    *(_QWORD *)(v24 + 36) = 66304;
    *(_DWORD *)(v24 + 44) = 1056964608;
    *(_QWORD *)(v24 + 48) = 0xFF7F0200000500;
    *(_WORD *)(v24 + 56) = 0;
    *(_BYTE *)(v24 + 58) = 3;
    *(_QWORD *)(v24 + 67) = 0;
    *(_QWORD *)(v24 + 59) = 0;
    *(_BYTE *)(v24 + 75) = 0;
    *(_QWORD *)(v24 + 132) = 0;
    *(_QWORD *)(v24 + 124) = 0;
    *(_WORD *)(v24 + 188) = 257;
    *(_QWORD *)(v24 + 192) = 0;
    *(_QWORD *)(v24 + 200) = 0;
    *(_BYTE *)(v24 + 208) = 0;
    v25 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v24;
    if (v25)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
      v24 = *((_QWORD *)this + 1);
    }
    *(_BYTE *)(v24 + 56) = 0;
    v26 = operator new();
    *(_DWORD *)(v26 + 32) = 0;
    *(_QWORD *)(v26 + 16) = 0;
    *(_QWORD *)(v26 + 24) = 0;
    *(_QWORD *)v26 = &off_1E42B5DE8;
    *(_QWORD *)(v26 + 8) = 0;
    *(_QWORD *)(v26 + 36) = 66560;
    *(_DWORD *)(v26 + 44) = 1056964608;
    *(_QWORD *)(v26 + 48) = 0xFF7F0200000500;
    *(_WORD *)(v26 + 56) = 0;
    *(_BYTE *)(v26 + 58) = 3;
    *(_QWORD *)(v26 + 67) = 0;
    *(_QWORD *)(v26 + 59) = 0;
    *(_BYTE *)(v26 + 75) = 0;
    *(_QWORD *)(v26 + 132) = 0;
    *(_QWORD *)(v26 + 124) = 0;
    *(_WORD *)(v26 + 188) = 257;
    *(_QWORD *)(v26 + 192) = 0;
    *(_QWORD *)(v26 + 200) = 0;
    *(_BYTE *)(v26 + 208) = 0;
    v27 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v26;
    if (v27)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
      v26 = *((_QWORD *)this + 2);
    }
    *(_BYTE *)(v26 + 56) = 0;
    v28 = operator new();
    *(_DWORD *)(v28 + 32) = 0;
    *(_QWORD *)(v28 + 16) = 0;
    *(_QWORD *)(v28 + 24) = 0;
    *(_QWORD *)v28 = &off_1E42B5DE8;
    *(_QWORD *)(v28 + 8) = 0;
    *(_QWORD *)(v28 + 36) = 66304;
    *(_DWORD *)(v28 + 44) = 0;
    *(_QWORD *)(v28 + 48) = 0x7F0000000500;
    *(_WORD *)(v28 + 56) = 0;
    *(_BYTE *)(v28 + 58) = 3;
    *(_QWORD *)(v28 + 67) = 0;
    *(_QWORD *)(v28 + 59) = 0;
    *(_BYTE *)(v28 + 75) = 0;
    *(_QWORD *)(v28 + 132) = 0;
    *(_QWORD *)(v28 + 124) = 0;
    *(_WORD *)(v28 + 188) = 257;
    *(_QWORD *)(v28 + 192) = 0;
    *(_QWORD *)(v28 + 200) = 0;
    *(_BYTE *)(v28 + 208) = 0;
    v29 = *((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = v28;
    if (v29)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
      v28 = *((_QWORD *)this + 3);
    }
    *(_BYTE *)(v28 + 208) = 1;
    *(_BYTE *)(v28 + 56) = 0;
    v30 = operator new();
    *(_DWORD *)(v30 + 32) = 0;
    *(_QWORD *)(v30 + 16) = 0;
    *(_QWORD *)(v30 + 24) = 0;
    *(_QWORD *)v30 = &off_1E42B5DE8;
    *(_QWORD *)(v30 + 8) = 0;
    *(_QWORD *)(v30 + 36) = 65537;
    *(_DWORD *)(v30 + 44) = 0;
    *(_QWORD *)(v30 + 48) = 1;
    *(_WORD *)(v30 + 56) = 0;
    *(_BYTE *)(v30 + 58) = 3;
    *(_QWORD *)(v30 + 67) = 0;
    *(_QWORD *)(v30 + 59) = 0;
    *(_BYTE *)(v30 + 75) = 0;
    *(_QWORD *)(v30 + 132) = 0;
    *(_QWORD *)(v30 + 124) = 0;
    *(_WORD *)(v30 + 188) = 257;
    *(_QWORD *)(v30 + 192) = 0;
    *(_QWORD *)(v30 + 200) = 0;
    *(_BYTE *)(v30 + 208) = 0;
    v31 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = v30;
    if (v31)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
      v30 = *((_QWORD *)this + 4);
    }
    *(_BYTE *)(v30 + 56) = 0;
    v32 = operator new();
    *(_DWORD *)(v32 + 32) = 0;
    *(_QWORD *)(v32 + 16) = 0;
    *(_QWORD *)(v32 + 24) = 0;
    *(_QWORD *)v32 = &off_1E42B5DE8;
    *(_QWORD *)(v32 + 8) = 0;
    *(_QWORD *)(v32 + 36) = 66304;
    *(_DWORD *)(v32 + 44) = 1056964608;
    *(_QWORD *)(v32 + 48) = 1;
    *(_WORD *)(v32 + 56) = 0;
    *(_BYTE *)(v32 + 58) = 3;
    *(_QWORD *)(v32 + 67) = 0;
    *(_QWORD *)(v32 + 59) = 0;
    *(_BYTE *)(v32 + 75) = 0;
    *(_QWORD *)(v32 + 132) = 0;
    *(_QWORD *)(v32 + 124) = 0;
    *(_WORD *)(v32 + 188) = 257;
    *(_QWORD *)(v32 + 192) = 0;
    *(_QWORD *)(v32 + 200) = 0;
    *(_BYTE *)(v32 + 208) = 0;
    v33 = *((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = v32;
    if (v33)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
      v32 = *((_QWORD *)this + 5);
    }
    *(_BYTE *)(v32 + 56) = 0;
    v34 = operator new();
    *(_DWORD *)(v34 + 32) = 0;
    *(_QWORD *)(v34 + 16) = 0;
    *(_QWORD *)(v34 + 24) = 0;
    *(_QWORD *)v34 = &off_1E42B5DE8;
    *(_QWORD *)(v34 + 8) = 0;
    *(_QWORD *)(v34 + 36) = 66304;
    *(_DWORD *)(v34 + 44) = 0;
    *(_QWORD *)(v34 + 48) = 1;
    *(_WORD *)(v34 + 56) = 0;
    *(_BYTE *)(v34 + 58) = 3;
    *(_QWORD *)(v34 + 67) = 0;
    *(_QWORD *)(v34 + 59) = 0;
    *(_BYTE *)(v34 + 75) = 0;
    *(_QWORD *)(v34 + 132) = 0;
    *(_QWORD *)(v34 + 124) = 0;
    *(_WORD *)(v34 + 188) = 257;
    *(_QWORD *)(v34 + 192) = 0;
    *(_QWORD *)(v34 + 200) = 0;
    *(_BYTE *)(v34 + 208) = 0;
    v35 = *((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = v34;
    if (v35)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
      v34 = *((_QWORD *)this + 6);
    }
    *(_BYTE *)(v34 + 56) = 0;
    v21 = operator new();
  }
  *(_DWORD *)(v21 + 32) = 0;
  *(_QWORD *)(v21 + 16) = 0;
  *(_QWORD *)(v21 + 24) = 0;
  *(_QWORD *)v21 = &off_1E42B5DE8;
  *(_QWORD *)(v21 + 8) = 0;
  *(_QWORD *)(v21 + 36) = 65537;
  *(_DWORD *)(v21 + 44) = 0;
  *(_QWORD *)(v21 + 48) = 1;
  *(_WORD *)(v21 + 56) = 0;
  *(_BYTE *)(v21 + 58) = 3;
  *(_QWORD *)(v21 + 67) = 0;
  *(_QWORD *)(v21 + 59) = 0;
  *(_BYTE *)(v21 + 75) = 0;
  *(_QWORD *)(v21 + 132) = 0;
  *(_QWORD *)(v21 + 124) = 0;
  *(_WORD *)(v21 + 188) = 257;
  *(_QWORD *)(v21 + 192) = 0;
  *(_QWORD *)(v21 + 200) = 0;
  *(_BYTE *)(v21 + 208) = 0;
  v36 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = v21;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  v37 = operator new();
  *(_DWORD *)(v37 + 32) = 0;
  *(_QWORD *)(v37 + 16) = 0;
  *(_QWORD *)(v37 + 24) = 0;
  *(_QWORD *)v37 = &off_1E42B5DE8;
  *(_QWORD *)(v37 + 8) = 0;
  *(_QWORD *)(v37 + 36) = 65537;
  *(_DWORD *)(v37 + 44) = 0;
  *(_QWORD *)(v37 + 48) = 1;
  *(_WORD *)(v37 + 56) = 0;
  *(_BYTE *)(v37 + 58) = 3;
  *(_QWORD *)(v37 + 67) = 0;
  *(_QWORD *)(v37 + 59) = 0;
  *(_BYTE *)(v37 + 75) = 0;
  *(_QWORD *)(v37 + 132) = 0;
  *(_QWORD *)(v37 + 124) = 0;
  *(_WORD *)(v37 + 188) = 257;
  *(_QWORD *)(v37 + 192) = 0;
  *(_QWORD *)(v37 + 200) = 0;
  *(_BYTE *)(v37 + 208) = 0;
  v38 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = v37;
  if (v38)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
    v37 = *((_QWORD *)this + 11);
  }
  *(_BYTE *)(v37 + 56) = 0;
  *(_BYTE *)(v37 + 208) = 1;
  v39 = operator new();
  *(_DWORD *)(v39 + 32) = 0;
  *(_QWORD *)(v39 + 16) = 0;
  *(_QWORD *)(v39 + 24) = 0;
  *(_QWORD *)v39 = &off_1E42B5DE8;
  *(_QWORD *)(v39 + 8) = 0;
  *(_QWORD *)(v39 + 36) = 65537;
  *(_DWORD *)(v39 + 44) = 0;
  *(_QWORD *)(v39 + 48) = 0x7F0000000400;
  *(_WORD *)(v39 + 56) = 0;
  *(_BYTE *)(v39 + 58) = 3;
  *(_QWORD *)(v39 + 67) = 0;
  *(_QWORD *)(v39 + 59) = 0;
  *(_BYTE *)(v39 + 75) = 0;
  *(_QWORD *)(v39 + 132) = 0;
  *(_QWORD *)(v39 + 124) = 0;
  *(_WORD *)(v39 + 188) = 257;
  *(_QWORD *)(v39 + 192) = 0;
  *(_QWORD *)(v39 + 200) = 0;
  *(_BYTE *)(v39 + 208) = 0;
  v40 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = v39;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  v41 = operator new();
  *(_DWORD *)(v41 + 32) = 0;
  *(_QWORD *)(v41 + 16) = 0;
  *(_QWORD *)(v41 + 24) = 0;
  *(_QWORD *)v41 = &off_1E42B5DE8;
  *(_QWORD *)(v41 + 8) = 0;
  *(_QWORD *)(v41 + 36) = 66304;
  *(_DWORD *)(v41 + 44) = 1056964608;
  *(_QWORD *)(v41 + 48) = 0x7F0000000400;
  *(_WORD *)(v41 + 56) = 0;
  *(_BYTE *)(v41 + 58) = 3;
  *(_QWORD *)(v41 + 67) = 0;
  *(_QWORD *)(v41 + 59) = 0;
  *(_BYTE *)(v41 + 75) = 0;
  *(_QWORD *)(v41 + 132) = 0;
  *(_QWORD *)(v41 + 124) = 0;
  *(_WORD *)(v41 + 188) = 257;
  *(_QWORD *)(v41 + 192) = 0;
  *(_QWORD *)(v41 + 200) = 0;
  *(_BYTE *)(v41 + 208) = 0;
  v42 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = v41;
  if (v42)
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  v43 = operator new();
  v731 = a3;
  *(_DWORD *)(v43 + 32) = 0;
  *(_QWORD *)(v43 + 16) = 0;
  *(_QWORD *)(v43 + 24) = 0;
  *(_QWORD *)v43 = &off_1E42B5DE8;
  *(_QWORD *)(v43 + 8) = 0;
  *(_QWORD *)(v43 + 36) = 66560;
  *(_DWORD *)(v43 + 44) = 1056964608;
  *(_QWORD *)(v43 + 48) = 0x7F0000000400;
  *(_WORD *)(v43 + 56) = 0;
  *(_BYTE *)(v43 + 58) = 3;
  *(_QWORD *)(v43 + 67) = 0;
  *(_QWORD *)(v43 + 59) = 0;
  *(_BYTE *)(v43 + 75) = 0;
  *(_QWORD *)(v43 + 132) = 0;
  *(_QWORD *)(v43 + 124) = 0;
  *(_WORD *)(v43 + 188) = 257;
  *(_QWORD *)(v43 + 192) = 0;
  *(_QWORD *)(v43 + 200) = 0;
  *(_BYTE *)(v43 + 208) = 0;
  v44 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = v43;
  if (v44)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
    v43 = *((_QWORD *)this + 9);
  }
  *(_BYTE *)(*(_QWORD *)this + 208) = 1;
  *(_BYTE *)(*((_QWORD *)this + 1) + 208) = 1;
  *(_BYTE *)(*((_QWORD *)this + 2) + 208) = 1;
  *(_BYTE *)(*((_QWORD *)this + 7) + 208) = 1;
  *(_BYTE *)(*((_QWORD *)this + 8) + 208) = 1;
  *(_BYTE *)(v43 + 208) = 1;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_QWORD *)this + 26) = 0;
  v732 = (uint64_t *)((char *)this + 208);
  *((_BYTE *)this + 216) = a5;
  if (a5)
    v45 = 1;
  else
    v45 = 6;
  v734 = v45;
  if (a5)
    v46 = 0;
  else
    v46 = 7;
  v47 = *((_QWORD *)a2 + 10);
  v48 = *(_QWORD *)(v47 + 2000);
  v49 = *(std::__shared_weak_count **)(v47 + 2008);
  v760 = v48;
  v766 = v49;
  if (v49)
  {
    p_shared_owners = (unint64_t *)&v49->__shared_owners_;
    do
      v51 = __ldxr(p_shared_owners);
    while (__stxr(v51 + 1, p_shared_owners));
  }
  v52 = (char *)operator new(0x198uLL);
  v733 = a5 ^ 1;
  *((_QWORD *)v52 + 1) = 0;
  *((_QWORD *)v52 + 2) = 0;
  *(_QWORD *)v52 = &off_1E42E5298;
  v744 = *(_OWORD *)a4->colorFormats;
  v753 = *(_OWORD *)&a4->colorFormatsCount;
  if ((v53 & 1) == 0)
  {
    if ((_DWORD)v682)
    {
      if ((v683 & 1) == 0)
      {
        if ((_DWORD)v682)
        {
          if ((v710 & 1) == 0
          {
            if ((v724 & 1) == 0
            {
              ggl::MeshTyped<ggl::RouteLine::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::RouteLine::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::RouteLine::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::RouteLine::DefaultVbo>::attributesReflection(void)::r;
            unk_1ECE43E18 = 1;
          }
          ggl::RouteLine::BasePipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::RouteLine::DefaultVbo>::typedReflection(void)::r;
          *(_QWORD *)algn_1ECE3C108 = &ggl::RouteLine::pipelineDataBasePipelineDeviceStructs(void)::ref;
          qword_1ECE3C110 = 0;
          if ((v711 & 1) == 0
          {
            ggl::RouteLine::pipelineDataBasePipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            unk_1ECE3C170 = ggl::Tile::Transform::reflection(void)::reflection;
            qword_1ECE3C178 = (uint64_t)ggl::RouteLine::Style::reflection(void)::reflection;
          }
          qword_1ECE3C118 = (uint64_t)&ggl::RouteLine::pipelineDataBasePipelineConstantStructs(void)::ref;
          unk_1ECE3C120 = xmmword_19FFB35E0;
        }
      }
      ggl::RouteLine::BasePipelineState::typedReflection(void)::ref = (uint64_t)&ggl::RouteLine::BasePipelineSetup::typedReflection(void)::ref;
      ggl::RouteLineShader::typedReflection(v682);
      qword_1ECE2F780 = (uint64_t)&ggl::RouteLineShader::typedReflection(void)::ref;
      if ((v684 & 1) == 0
      {
        ggl::RouteLine::pipelineStateBasePipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE584AF0 = 0;
        qword_1EE584AF8 = (uint64_t)"";
        dword_1EE584B00 = 0;
        qword_1EE584B08 = (uint64_t)&ggl::RouteLine::pipelineStateBasePipelineAttributeBinding_0(void)::attr;
        unk_1EE584B10 = 5;
      }
      qword_1ECE2F788 = (uint64_t)&ggl::RouteLine::pipelineStateBasePipelineAttributeStructBinding(void)::attr;
      unk_1ECE2F790 = 1;
      qword_1ECE2F798 = 0;
      unk_1ECE2F7A0 = 1;
      qword_1ECE2F7A8 = (uint64_t)&ggl::RouteLine::pipelineStateBasePipelineDeviceStructBinding(void)::ref;
      unk_1ECE2F7B0 = 0;
      if ((v685 & 1) == 0
      {
        ggl::RouteLine::pipelineStateBasePipelineConstantStructBinding(void)::ref = 0;
        unk_1EE584A60 = 0;
        qword_1EE584A68 = (uint64_t)"view";
        dword_1EE584A70 = 3;
        qword_1EE584A78 = (uint64_t)&ggl::RouteLine::pipelineStateBasePipelineConstantViewBinding(void)::reflection;
        unk_1EE584A80 = xmmword_19FFB35A0;
        qword_1EE584A90 = 1;
        unk_1EE584A98 = "transform";
        dword_1EE584AA0 = 3;
        qword_1EE584AA8 = (uint64_t)&ggl::RouteLine::pipelineStateBasePipelineConstantTransformBinding(void)::reflection;
        *(_OWORD *)algn_1EE584AB0 = xmmword_19FFB3660;
        qword_1EE584AC0 = 2;
        unk_1EE584AC8 = "style";
        dword_1EE584AD0 = 3;
        qword_1EE584AD8 = (uint64_t)&ggl::RouteLine::pipelineStateBasePipelineConstantStyleBinding(void)::reflection;
        unk_1EE584AE0 = 12;
      }
      qword_1ECE2F7B8 = (uint64_t)&ggl::RouteLine::pipelineStateBasePipelineConstantStructBinding(void)::ref;
      unk_1ECE2F7C0 = 3;
    }
  }
  if (v766)
  {
    v54 = (unint64_t *)&v766->__shared_owners_;
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 1, v54));
    *((_DWORD *)v52 + 14) = 0;
    *((_QWORD *)v52 + 5) = 0;
    *((_QWORD *)v52 + 6) = 0;
    *((_QWORD *)v52 + 3) = &off_1E42B6760;
    *((_QWORD *)v52 + 4) = 0;
    *((_QWORD *)v52 + 8) = &ggl::RouteLine::BasePipelineState::typedReflection(void)::ref;
    *((_QWORD *)v52 + 9) = v760;
    *((_QWORD *)v52 + 10) = v766;
    do
      v56 = __ldxr(v54);
    while (__stxr(v56 + 1, v54));
  }
  else
  {
    *((_DWORD *)v52 + 14) = 0;
    *((_QWORD *)v52 + 5) = 0;
    *((_QWORD *)v52 + 6) = 0;
    *((_QWORD *)v52 + 3) = &off_1E42B6760;
    *((_QWORD *)v52 + 4) = 0;
    *((_QWORD *)v52 + 8) = &ggl::RouteLine::BasePipelineState::typedReflection(void)::ref;
    *((_QWORD *)v52 + 9) = v760;
    *((_QWORD *)v52 + 10) = 0;
  }
  v52[136] = 0;
  *(_OWORD *)(v52 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v52 + 156) = 0;
  *(_QWORD *)(v52 + 172) = 0;
  *(_QWORD *)(v52 + 164) = 0;
  v52[184] = 0;
  *(_OWORD *)(v52 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v52 + 204) = 0;
  *(_QWORD *)(v52 + 220) = 0;
  *(_QWORD *)(v52 + 212) = 0;
  v52[232] = 0;
  *(_OWORD *)(v52 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v52 + 252) = 0;
  *(_QWORD *)(v52 + 268) = 0;
  *(_QWORD *)(v52 + 260) = 0;
  *(_OWORD *)(v52 + 280) = v744;
  *(_OWORD *)(v52 + 296) = v753;
  v52[312] = 0;
  *((_QWORD *)v52 + 48) = 0;
  *((_OWORD *)v52 + 22) = 0u;
  *((_OWORD *)v52 + 23) = 0u;
  *((_OWORD *)v52 + 20) = 0u;
  *((_OWORD *)v52 + 21) = 0u;
  *((_QWORD *)v52 + 49) = 0x100000001;
  v52[400] = 0;
  v52[88] = v733;
  v52[91] = v743;
  *(_WORD *)(v52 + 89) = v742;
  *((_DWORD *)v52 + 23) = v734;
  *((_DWORD *)v52 + 24) = v46;
  *(_QWORD *)(v52 + 100) = 0x100000000;
  *((_DWORD *)v52 + 27) = v46;
  *((_QWORD *)v52 + 14) = 0;
  *((_QWORD *)v52 + 15) = 0;
  *((_DWORD *)v52 + 32) = 0;
  v52[132] = 15;
  if (v766)
  {
    v57 = (unint64_t *)&v766->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v766->__on_zero_shared)(v766);
      std::__shared_weak_count::__release_weak(v766);
    }
  }
  v52[328] = a5;
  v52[329] = 1;
  *((_WORD *)v52 + 169) = 0;
  *(_QWORD *)(v52 + 330) = 0;
  v59 = vceqzq_s8(*(int8x16_t *)(v52 + 328));
  v60 = vmovl_high_s8(v59);
  v61 = vmovl_s16(*(int16x4_t *)v60.i8);
  v62.i64[0] = v61.u32[0];
  v62.i64[1] = v61.u32[1];
  v63 = v62;
  v64 = vmovl_s8(*(int8x8_t *)v59.i8);
  v65 = vmovl_s16(*(int16x4_t *)v64.i8);
  v62.i64[0] = v65.u32[0];
  v62.i64[1] = v65.u32[1];
  v66 = v62;
  v67 = vmovl_high_s16(v60);
  v62.i64[0] = v67.u32[0];
  v62.i64[1] = v67.u32[1];
  v68 = v62;
  v69 = vmovl_high_s16(v64);
  v62.i64[0] = v69.u32[0];
  v62.i64[1] = v69.u32[1];
  v70 = v62;
  v62.i64[0] = v61.u32[2];
  v62.i64[1] = v61.u32[3];
  v71 = v62;
  v62.i64[0] = v65.u32[2];
  v62.i64[1] = v65.u32[3];
  v72 = v62;
  v62.i64[0] = v67.u32[2];
  v62.i64[1] = v67.u32[3];
  v73 = v62;
  v62.i64[0] = v69.u32[2];
  v62.i64[1] = v69.u32[3];
  v74 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v62);
  v75 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v73);
  v76 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v72);
  v77 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v68);
  v78 = vceqzq_s8(*(int8x16_t *)(v52 + 344));
  v79 = vmovl_high_s8(v78);
  v80 = vmovl_s16(*(int16x4_t *)v79.i8);
  v62.i64[0] = v80.u32[0];
  v62.i64[1] = v80.u32[1];
  v81 = v62;
  v82 = vmovl_s8(*(int8x8_t *)v78.i8);
  v83 = vmovl_s16(*(int16x4_t *)v82.i8);
  v62.i64[0] = v83.u32[0];
  v62.i64[1] = v83.u32[1];
  v84 = v62;
  v85 = vmovl_high_s16(v79);
  v62.i64[0] = v85.u32[0];
  v62.i64[1] = v85.u32[1];
  v86 = v62;
  v87 = vmovl_high_s16(v82);
  v62.i64[0] = v87.u32[0];
  v62.i64[1] = v87.u32[1];
  v88 = v62;
  v62.i64[0] = v80.u32[2];
  v62.i64[1] = v80.u32[3];
  v89 = v62;
  v62.i64[0] = v83.u32[2];
  v62.i64[1] = v83.u32[3];
  v90 = v62;
  v62.i64[0] = v85.u32[2];
  v62.i64[1] = v85.u32[3];
  v91 = v62;
  v62.i64[0] = v87.u32[2];
  v62.i64[1] = v87.u32[3];
  v92 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v91);
  v93 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v81), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v63));
  v94 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v84), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v66));
  v95 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v86), v77);
  v96 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v88), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v70));
  v97 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v89), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v71));
  v98 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v90), v76);
  v99 = vorrq_s8(v92, v75);
  v100 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v62), v74);
  v101 = vceqzq_s8(*(int8x16_t *)(v52 + 360));
  v102 = vmovl_high_s8(v101);
  v103 = vmovl_s16(*(int16x4_t *)v102.i8);
  v62.i64[0] = v103.i32[0];
  v62.i64[1] = v103.i32[1];
  v104 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v62);
  v105 = vceqzq_s8(*(int8x16_t *)(v52 + 376));
  v106 = vmovl_high_s8(v105);
  v107 = vmovl_s16(*(int16x4_t *)v106.i8);
  v62.i64[0] = v107.i32[0];
  v62.i64[1] = v107.i32[1];
  v108 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v62), v104), v93);
  v109 = vmovl_s8(*(int8x8_t *)v101.i8);
  v110 = vmovl_s16(*(int16x4_t *)v109.i8);
  v62.i64[0] = v110.i32[0];
  v62.i64[1] = v110.i32[1];
  v111 = vbicq_s8((int8x16_t)xmmword_19FFB3170, v62);
  v112 = vmovl_s8(*(int8x8_t *)v105.i8);
  v113 = vmovl_s16(*(int16x4_t *)v112.i8);
  v62.i64[0] = v113.i32[0];
  v62.i64[1] = v113.i32[1];
  v114 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v62), v111), v94);
  v115 = vmovl_high_s16(v102);
  v62.i64[0] = v115.i32[0];
  v62.i64[1] = v115.i32[1];
  v116 = vbicq_s8((int8x16_t)xmmword_19FFB3180, v62);
  v117 = vmovl_high_s16(v106);
  v62.i64[0] = v117.i32[0];
  v62.i64[1] = v117.i32[1];
  v118 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v62), v116), v95);
  v119 = vmovl_high_s16(v109);
  v62.i64[0] = v119.i32[0];
  v62.i64[1] = v119.i32[1];
  v120 = vbicq_s8((int8x16_t)xmmword_19FFB3190, v62);
  v121 = vmovl_high_s16(v112);
  v62.i64[0] = v121.i32[0];
  v62.i64[1] = v121.i32[1];
  v122 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v62), v120), v96);
  v62.i64[0] = v103.i32[2];
  v62.i64[1] = v103.i32[3];
  v123 = vbicq_s8((int8x16_t)xmmword_19FFB31A0, v62);
  v62.i64[0] = v107.i32[2];
  v62.i64[1] = v107.i32[3];
  v124 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v62), v123), v97);
  v62.i64[0] = v110.i32[2];
  v62.i64[1] = v110.i32[3];
  v125 = vbicq_s8((int8x16_t)xmmword_19FFB31B0, v62);
  v62.i64[0] = v113.i32[2];
  v62.i64[1] = v113.i32[3];
  v126 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v62), v125), v98);
  v62.i64[0] = v115.i32[2];
  v62.i64[1] = v115.i32[3];
  v127 = vbicq_s8((int8x16_t)xmmword_19FFB31C0, v62);
  v62.i64[0] = v117.i32[2];
  v62.i64[1] = v117.i32[3];
  v128 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31F0, v62), v127), v99);
  v62.i64[0] = v119.i32[2];
  v62.i64[1] = v119.i32[3];
  v129 = vbicq_s8((int8x16_t)xmmword_19FFB31D0, v62);
  v62.i64[0] = v121.i32[2];
  v62.i64[1] = v121.i32[3];
  *((_QWORD *)v52 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(v114, v108), vorrq_s8(v122, v118)), (int64x2_t)vorrq_s8(vorrq_s8(v126, v124), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v62), v129), v100), v128))));
  *((_QWORD *)v52 + 3) = &off_1E42BE2E8;
  v52[312] = 1;
  v130 = (std::__shared_weak_count *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 12) = v52 + 24;
  *((_QWORD *)this + 13) = v52;
  if (v130)
  {
    v131 = (unint64_t *)&v130->__shared_owners_;
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
    }
  }
  if (v766)
  {
    v133 = (unint64_t *)&v766->__shared_owners_;
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v766->__on_zero_shared)(v766);
      std::__shared_weak_count::__release_weak(v766);
    }
  }
  v135 = *((_QWORD *)a2 + 10);
  v136 = *(_QWORD *)(v135 + 2168);
  v137 = *(std::__shared_weak_count **)(v135 + 2176);
  v761 = v136;
  v767 = v137;
  if (v137)
  {
    v138 = (unint64_t *)&v137->__shared_owners_;
    do
      v139 = __ldxr(v138);
    while (__stxr(v139 + 1, v138));
  }
  v140 = (char *)operator new(0x198uLL);
  *((_QWORD *)v140 + 1) = 0;
  *((_QWORD *)v140 + 2) = 0;
  *(_QWORD *)v140 = &off_1E42DF568;
  v745 = *(_OWORD *)a4->colorFormats;
  v754 = *(_OWORD *)&a4->colorFormatsCount;
  if ((v141 & 1) == 0)
  {
    if ((_DWORD)v686)
    {
      if ((v687 & 1) == 0)
      {
        if ((_DWORD)v686)
        {
          if ((v712 & 1) == 0
          {
            if ((v725 & 1) == 0
            {
              ggl::MeshTyped<ggl::DottedRouteLine::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::DottedRouteLine::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::DottedRouteLine::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::DottedRouteLine::DefaultVbo>::attributesReflection(void)::r;
            unk_1ECE30C48 = 1;
          }
          ggl::DottedRouteLine::BasePipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::DottedRouteLine::DefaultVbo>::typedReflection(void)::r;
          unk_1ECE2FFA0 = &ggl::DottedRouteLine::pipelineDataBasePipelineDeviceStructs(void)::ref;
          qword_1ECE2FFA8 = 0;
          if ((v713 & 1) == 0
          {
            ggl::DottedRouteLine::pipelineDataBasePipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            *(_QWORD *)algn_1ECE2FFD8 = ggl::Tile::Transform::reflection(void)::reflection;
            qword_1ECE2FFE0 = (uint64_t)ggl::RouteLine::Style::reflection(void)::reflection;
          }
          qword_1ECE2FFB0 = (uint64_t)&ggl::DottedRouteLine::pipelineDataBasePipelineConstantStructs(void)::ref;
          unk_1ECE2FFB8 = xmmword_19FFB3410;
        }
      }
      ggl::DottedRouteLine::BasePipelineState::typedReflection(void)::ref = (uint64_t)&ggl::DottedRouteLine::BasePipelineSetup::typedReflection(void)::ref;
      ggl::DottedRouteLineShader::typedReflection(v686);
      qword_1EE57C4A8 = (uint64_t)&ggl::DottedRouteLineShader::typedReflection(void)::ref;
      if ((v688 & 1) == 0
      {
        ggl::DottedRouteLine::pipelineStateBasePipelineAttributeStructBinding(void)::attr = 0;
        *(_QWORD *)algn_1EE57C588 = 0;
        qword_1EE57C590 = (uint64_t)"";
        dword_1EE57C598 = 0;
        qword_1EE57C5A0 = (uint64_t)&ggl::DottedRouteLine::pipelineStateBasePipelineAttributeBinding_0(void)::attr;
        unk_1EE57C5A8 = 6;
      }
      qword_1EE57C4B0 = (uint64_t)&ggl::DottedRouteLine::pipelineStateBasePipelineAttributeStructBinding(void)::attr;
      *(_QWORD *)algn_1EE57C4B8 = 1;
      qword_1EE57C4C0 = 0;
      unk_1EE57C4C8 = 0;
      qword_1EE57C4D0 = (uint64_t)&ggl::DottedRouteLine::pipelineStateBasePipelineDeviceStructBinding(void)::ref;
      unk_1EE57C4D8 = 0;
      if ((v689 & 1) == 0
      {
        ggl::DottedRouteLine::pipelineStateBasePipelineConstantStructBinding(void)::ref = 0;
        *(_QWORD *)algn_1EE57C4F8 = 0;
        qword_1EE57C500 = (uint64_t)"view";
        dword_1EE57C508 = 3;
        qword_1EE57C510 = (uint64_t)&ggl::DottedRouteLine::pipelineStateBasePipelineConstantViewBinding(void)::reflection;
        unk_1EE57C518 = xmmword_19FFB35A0;
        qword_1EE57C528 = 1;
        unk_1EE57C530 = "transform";
        dword_1EE57C538 = 3;
        qword_1EE57C540 = (uint64_t)&ggl::DottedRouteLine::pipelineStateBasePipelineConstantTransformBinding(void)::reflection;
        unk_1EE57C548 = xmmword_19FFB3660;
        qword_1EE57C558 = 2;
        unk_1EE57C560 = "style";
        dword_1EE57C568 = 3;
        qword_1EE57C570 = (uint64_t)&ggl::DottedRouteLine::pipelineStateBasePipelineConstantStyleBinding(void)::reflection;
        unk_1EE57C578 = 12;
      }
      qword_1EE57C4E0 = (uint64_t)&ggl::DottedRouteLine::pipelineStateBasePipelineConstantStructBinding(void)::ref;
      *(_QWORD *)algn_1EE57C4E8 = 3;
    }
  }
  if (v767)
  {
    v142 = (unint64_t *)&v767->__shared_owners_;
    do
      v143 = __ldxr(v142);
    while (__stxr(v143 + 1, v142));
    *((_DWORD *)v140 + 14) = 0;
    *((_QWORD *)v140 + 5) = 0;
    *((_QWORD *)v140 + 6) = 0;
    *((_QWORD *)v140 + 3) = &off_1E42B6760;
    *((_QWORD *)v140 + 4) = 0;
    *((_QWORD *)v140 + 8) = &ggl::DottedRouteLine::BasePipelineState::typedReflection(void)::ref;
    *((_QWORD *)v140 + 9) = v761;
    *((_QWORD *)v140 + 10) = v767;
    do
      v144 = __ldxr(v142);
    while (__stxr(v144 + 1, v142));
  }
  else
  {
    *((_DWORD *)v140 + 14) = 0;
    *((_QWORD *)v140 + 5) = 0;
    *((_QWORD *)v140 + 6) = 0;
    *((_QWORD *)v140 + 3) = &off_1E42B6760;
    *((_QWORD *)v140 + 4) = 0;
    *((_QWORD *)v140 + 8) = &ggl::DottedRouteLine::BasePipelineState::typedReflection(void)::ref;
    *((_QWORD *)v140 + 9) = v761;
    *((_QWORD *)v140 + 10) = 0;
  }
  v140[136] = 0;
  *(_OWORD *)(v140 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v140 + 156) = 0;
  *(_QWORD *)(v140 + 172) = 0;
  *(_QWORD *)(v140 + 164) = 0;
  v140[184] = 0;
  *(_OWORD *)(v140 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v140 + 204) = 0;
  *(_QWORD *)(v140 + 220) = 0;
  *(_QWORD *)(v140 + 212) = 0;
  v140[232] = 0;
  *(_OWORD *)(v140 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v140 + 252) = 0;
  *(_QWORD *)(v140 + 268) = 0;
  *(_QWORD *)(v140 + 260) = 0;
  *(_OWORD *)(v140 + 280) = v745;
  *(_OWORD *)(v140 + 296) = v754;
  v140[312] = 0;
  *((_QWORD *)v140 + 48) = 0;
  *((_OWORD *)v140 + 22) = 0u;
  *((_OWORD *)v140 + 23) = 0u;
  *((_OWORD *)v140 + 20) = 0u;
  *((_OWORD *)v140 + 21) = 0u;
  *((_QWORD *)v140 + 49) = 0x100000001;
  v140[400] = 0;
  v140[88] = v733;
  v140[91] = v743;
  *(_WORD *)(v140 + 89) = v742;
  *((_DWORD *)v140 + 23) = v734;
  *((_DWORD *)v140 + 24) = v46;
  *(_QWORD *)(v140 + 100) = 0x100000000;
  *((_DWORD *)v140 + 27) = v46;
  *((_QWORD *)v140 + 14) = 0;
  *((_QWORD *)v140 + 15) = 0;
  *((_DWORD *)v140 + 32) = 0;
  v140[132] = 15;
  if (v767)
  {
    v145 = (unint64_t *)&v767->__shared_owners_;
    do
      v146 = __ldaxr(v145);
    while (__stlxr(v146 - 1, v145));
    if (!v146)
    {
      ((void (*)(std::__shared_weak_count *))v767->__on_zero_shared)(v767);
      std::__shared_weak_count::__release_weak(v767);
    }
  }
  v140[328] = a5;
  v140[329] = 1;
  *((_WORD *)v140 + 169) = 0;
  *(_QWORD *)(v140 + 330) = 0;
  v147 = vceqzq_s8(*(int8x16_t *)(v140 + 328));
  v148 = vmovl_high_s8(v147);
  v149 = vmovl_s16(*(int16x4_t *)v148.i8);
  v150.i64[0] = v149.u32[0];
  v150.i64[1] = v149.u32[1];
  v151 = v150;
  v152 = vmovl_s8(*(int8x8_t *)v147.i8);
  v153 = vmovl_s16(*(int16x4_t *)v152.i8);
  v150.i64[0] = v153.u32[0];
  v150.i64[1] = v153.u32[1];
  v154 = v150;
  v155 = vmovl_high_s16(v148);
  v150.i64[0] = v155.u32[0];
  v150.i64[1] = v155.u32[1];
  v156 = v150;
  v157 = vmovl_high_s16(v152);
  v150.i64[0] = v157.u32[0];
  v150.i64[1] = v157.u32[1];
  v158 = v150;
  v150.i64[0] = v149.u32[2];
  v150.i64[1] = v149.u32[3];
  v159 = v150;
  v150.i64[0] = v153.u32[2];
  v150.i64[1] = v153.u32[3];
  v160 = v150;
  v150.i64[0] = v155.u32[2];
  v150.i64[1] = v155.u32[3];
  v161 = v150;
  v150.i64[0] = v157.u32[2];
  v150.i64[1] = v157.u32[3];
  v162 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v150);
  v163 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v161);
  v164 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v160);
  v165 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v156);
  v166 = vceqzq_s8(*(int8x16_t *)(v140 + 344));
  v167 = vmovl_high_s8(v166);
  v168 = vmovl_s16(*(int16x4_t *)v167.i8);
  v150.i64[0] = v168.u32[0];
  v150.i64[1] = v168.u32[1];
  v169 = v150;
  v170 = vmovl_s8(*(int8x8_t *)v166.i8);
  v171 = vmovl_s16(*(int16x4_t *)v170.i8);
  v150.i64[0] = v171.u32[0];
  v150.i64[1] = v171.u32[1];
  v172 = v150;
  v173 = vmovl_high_s16(v167);
  v150.i64[0] = v173.u32[0];
  v150.i64[1] = v173.u32[1];
  v174 = v150;
  v175 = vmovl_high_s16(v170);
  v150.i64[0] = v175.u32[0];
  v150.i64[1] = v175.u32[1];
  v176 = v150;
  v150.i64[0] = v168.u32[2];
  v150.i64[1] = v168.u32[3];
  v177 = v150;
  v150.i64[0] = v171.u32[2];
  v150.i64[1] = v171.u32[3];
  v178 = v150;
  v150.i64[0] = v173.u32[2];
  v150.i64[1] = v173.u32[3];
  v179 = v150;
  v150.i64[0] = v175.u32[2];
  v150.i64[1] = v175.u32[3];
  v180 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v179);
  v181 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v169), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v151));
  v182 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v172), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v154));
  v183 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v174), v165);
  v184 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v176), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v158));
  v185 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v177), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v159));
  v186 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v178), v164);
  v187 = vorrq_s8(v180, v163);
  v188 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v150), v162);
  v189 = vceqzq_s8(*(int8x16_t *)(v140 + 360));
  v190 = vmovl_s8(*(int8x8_t *)v189.i8);
  v191 = vmovl_high_s16(v190);
  v192 = vmovl_high_s8(v189);
  v193 = vmovl_high_s16(v192);
  v194 = vmovl_s16(*(int16x4_t *)v190.i8);
  v195 = vmovl_s16(*(int16x4_t *)v192.i8);
  v150.i64[0] = v194.i32[0];
  v150.i64[1] = v194.i32[1];
  v196 = v150;
  v150.i64[0] = v195.i32[0];
  v150.i64[1] = v195.i32[1];
  v197 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v150);
  v198 = vceqzq_s8(*(int8x16_t *)(v140 + 376));
  v199 = vmovl_high_s8(v198);
  v200 = vmovl_s16(*(int16x4_t *)v199.i8);
  v150.i64[0] = v200.i32[0];
  v150.i64[1] = v200.i32[1];
  v201 = vmovl_s8(*(int8x8_t *)v198.i8);
  v202 = vmovl_s16(*(int16x4_t *)v201.i8);
  v203 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v150), v197), v181);
  v150.i64[0] = v202.i32[0];
  v150.i64[1] = v202.i32[1];
  v204 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v150), vbicq_s8((int8x16_t)xmmword_19FFB3170, v196));
  v150.i64[0] = v193.i32[0];
  v150.i64[1] = v193.i32[1];
  v205 = vbicq_s8((int8x16_t)xmmword_19FFB3180, v150);
  v206 = vmovl_high_s16(v199);
  v207 = vorrq_s8(v204, v182);
  v150.i64[0] = v206.i32[0];
  v150.i64[1] = v206.i32[1];
  v208 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v150), v205);
  v150.i64[0] = v191.i32[0];
  v150.i64[1] = v191.i32[1];
  v209 = vbicq_s8((int8x16_t)xmmword_19FFB3190, v150);
  v210 = vmovl_high_s16(v201);
  v150.i64[0] = v210.i32[0];
  v150.i64[1] = v210.i32[1];
  v211 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v150), v209), v184);
  v150.i64[0] = v195.i32[2];
  v150.i64[1] = v195.i32[3];
  v212 = vbicq_s8((int8x16_t)xmmword_19FFB31A0, v150);
  v150.i64[0] = v200.i32[2];
  v150.i64[1] = v200.i32[3];
  v213 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v150), v212), v185);
  v150.i64[0] = v194.i32[2];
  v150.i64[1] = v194.i32[3];
  v214 = vbicq_s8((int8x16_t)xmmword_19FFB31B0, v150);
  v150.i64[0] = v202.i32[2];
  v150.i64[1] = v202.i32[3];
  v215 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v150), v214), v186);
  v150.i64[0] = v193.i32[2];
  v150.i64[1] = v193.i32[3];
  v216 = vbicq_s8((int8x16_t)xmmword_19FFB31C0, v150);
  v150.i64[0] = v206.i32[2];
  v150.i64[1] = v206.i32[3];
  v217 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31F0, v150), v216), v187);
  v150.i64[0] = v191.i32[2];
  v150.i64[1] = v191.i32[3];
  v218 = vbicq_s8((int8x16_t)xmmword_19FFB31D0, v150);
  v150.i64[0] = v210.i32[2];
  v150.i64[1] = v210.i32[3];
  *((_QWORD *)v140 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(v207, v203), vorrq_s8(v211, vorrq_s8(v208, v183))), (int64x2_t)vorrq_s8(vorrq_s8(v215, v213), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v150), v218), v188), v217))));
  *((_QWORD *)v140 + 3) = &off_1E42B7038;
  v140[312] = 1;
  v219 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 22) = v140 + 24;
  *((_QWORD *)this + 23) = v140;
  if (v219)
  {
    v220 = (unint64_t *)&v219->__shared_owners_;
    do
      v221 = __ldaxr(v220);
    while (__stlxr(v221 - 1, v220));
    if (!v221)
    {
      ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
      std::__shared_weak_count::__release_weak(v219);
    }
  }
  if (v767)
  {
    v222 = (unint64_t *)&v767->__shared_owners_;
    do
      v223 = __ldaxr(v222);
    while (__stlxr(v223 - 1, v222));
    if (!v223)
    {
      ((void (*)(std::__shared_weak_count *))v767->__on_zero_shared)(v767);
      std::__shared_weak_count::__release_weak(v767);
    }
  }
  v224 = *((_QWORD *)a2 + 10);
  v225 = *(_QWORD *)(v224 + 2024);
  v226 = *(std::__shared_weak_count **)(v224 + 2032);
  v762 = v225;
  v768 = v226;
  if (v226)
  {
    v227 = (unint64_t *)&v226->__shared_owners_;
    do
      v228 = __ldxr(v227);
    while (__stxr(v228 + 1, v227));
  }
  v229 = (char *)operator new(0x198uLL);
  *((_QWORD *)v229 + 1) = 0;
  *((_QWORD *)v229 + 2) = 0;
  *(_QWORD *)v229 = &off_1E42E52D0;
  v746 = *(_OWORD *)a4->colorFormats;
  v755 = *(_OWORD *)&a4->colorFormatsCount;
  if ((v230 & 1) == 0)
  {
    if ((_DWORD)v690)
    {
      if ((v691 & 1) == 0)
      {
        if ((_DWORD)v690)
        {
          if ((v714 & 1) == 0
          {
            if ((v726 & 1) == 0
            {
              ggl::MeshTyped<ggl::RouteLine::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::RouteLine::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::RouteLine::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::RouteLine::DefaultVbo>::attributesReflection(void)::r;
            unk_1ECE43E18 = 1;
          }
          ggl::RouteLine::PatternedBasePipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::RouteLine::DefaultVbo>::typedReflection(void)::r;
          *(_QWORD *)algn_1ECE3C138 = &ggl::RouteLine::pipelineDataPatternedBasePipelineDeviceStructs(void)::ref;
          qword_1ECE3C140 = 0;
          if ((v715 & 1) == 0
          {
            ggl::RouteLine::pipelineDataPatternedBasePipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            unk_1ECE3C190 = ggl::Tile::Transform::reflection(void)::reflection;
            qword_1ECE3C198 = (uint64_t)ggl::PatternedRibbon::Style::reflection(void)::reflection;
            unk_1ECE3C1A0 = ggl::RouteLine::Style::reflection(void)::reflection;
          }
          qword_1ECE3C148 = (uint64_t)&ggl::RouteLine::pipelineDataPatternedBasePipelineConstantStructs(void)::ref;
          unk_1ECE3C150 = xmmword_19FFB48D0;
        }
      }
      ggl::RouteLine::PatternedBasePipelineState::typedReflection(void)::ref = (uint64_t)&ggl::RouteLine::PatternedBasePipelineSetup::typedReflection(void)::ref;
      ggl::PatternedRouteLineShader::typedReflection(v690);
      qword_1ECE2FC60 = (uint64_t)&ggl::PatternedRouteLineShader::typedReflection(void)::ref;
      if ((v692 & 1) == 0
      {
        ggl::RouteLine::pipelineStatePatternedBasePipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE584C80 = 0;
        qword_1EE584C88 = (uint64_t)"";
        dword_1EE584C90 = 0;
        qword_1EE584C98 = (uint64_t)&ggl::RouteLine::pipelineStatePatternedBasePipelineAttributeBinding_0(void)::attr;
        unk_1EE584CA0 = 5;
      }
      qword_1ECE2FC68 = (uint64_t)&ggl::RouteLine::pipelineStatePatternedBasePipelineAttributeStructBinding(void)::attr;
      unk_1ECE2FC70 = 1;
      qword_1ECE2FC78 = 0;
      unk_1ECE2FC80 = 1;
      qword_1ECE2FC88 = (uint64_t)&ggl::RouteLine::pipelineStatePatternedBasePipelineDeviceStructBinding(void)::ref;
      unk_1ECE2FC90 = 0;
      if ((v693 & 1) == 0
      {
        ggl::RouteLine::pipelineStatePatternedBasePipelineConstantStructBinding(void)::ref = 0;
        unk_1EE584B20 = 0;
        qword_1EE584B28 = (uint64_t)"view";
        dword_1EE584B30 = 3;
        qword_1EE584B38 = (uint64_t)&ggl::RouteLine::pipelineStatePatternedBasePipelineConstantViewBinding(void)::reflection;
        unk_1EE584B40 = xmmword_19FFB35A0;
        qword_1EE584B50 = 1;
        unk_1EE584B58 = "transform";
        dword_1EE584B60 = 3;
        qword_1EE584B68 = (uint64_t)&ggl::RouteLine::pipelineStatePatternedBasePipelineConstantTransformBinding(void)::reflection;
        *(_OWORD *)algn_1EE584B70 = xmmword_19FFB3660;
        qword_1EE584B80 = 2;
        unk_1EE584B88 = "patternStyle";
        dword_1EE584B90 = 3;
        qword_1EE584B98 = (uint64_t)&ggl::RouteLine::pipelineStatePatternedBasePipelineConstantPatternStyleBinding(void)::reflection;
        unk_1EE584BA0 = xmmword_19FFB5E10;
        qword_1EE584BB0 = 3;
        unk_1EE584BB8 = "routeStyle";
        dword_1EE584BC0 = 3;
        qword_1EE584BC8 = (uint64_t)&ggl::RouteLine::pipelineStatePatternedBasePipelineConstantRouteStyleBinding(void)::reflection;
        unk_1EE584BD0 = 12;
      }
      qword_1ECE2FC98 = (uint64_t)&ggl::RouteLine::pipelineStatePatternedBasePipelineConstantStructBinding(void)::ref;
      unk_1ECE2FCA0 = 4;
    }
  }
  if (v768)
  {
    v231 = (unint64_t *)&v768->__shared_owners_;
    do
      v232 = __ldxr(v231);
    while (__stxr(v232 + 1, v231));
    *((_DWORD *)v229 + 14) = 0;
    *((_QWORD *)v229 + 5) = 0;
    *((_QWORD *)v229 + 6) = 0;
    *((_QWORD *)v229 + 3) = &off_1E42B6760;
    *((_QWORD *)v229 + 4) = 0;
    *((_QWORD *)v229 + 8) = &ggl::RouteLine::PatternedBasePipelineState::typedReflection(void)::ref;
    *((_QWORD *)v229 + 9) = v762;
    *((_QWORD *)v229 + 10) = v768;
    do
      v233 = __ldxr(v231);
    while (__stxr(v233 + 1, v231));
  }
  else
  {
    *((_DWORD *)v229 + 14) = 0;
    *((_QWORD *)v229 + 5) = 0;
    *((_QWORD *)v229 + 6) = 0;
    *((_QWORD *)v229 + 3) = &off_1E42B6760;
    *((_QWORD *)v229 + 4) = 0;
    *((_QWORD *)v229 + 8) = &ggl::RouteLine::PatternedBasePipelineState::typedReflection(void)::ref;
    *((_QWORD *)v229 + 9) = v762;
    *((_QWORD *)v229 + 10) = 0;
  }
  v229[136] = 0;
  *(_OWORD *)(v229 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v229 + 156) = 0;
  *(_QWORD *)(v229 + 172) = 0;
  *(_QWORD *)(v229 + 164) = 0;
  v229[184] = 0;
  *(_OWORD *)(v229 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v229 + 204) = 0;
  *(_QWORD *)(v229 + 220) = 0;
  *(_QWORD *)(v229 + 212) = 0;
  v229[232] = 0;
  *(_OWORD *)(v229 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v229 + 252) = 0;
  *(_QWORD *)(v229 + 268) = 0;
  *(_QWORD *)(v229 + 260) = 0;
  *(_OWORD *)(v229 + 280) = v746;
  *(_OWORD *)(v229 + 296) = v755;
  v229[312] = 0;
  *((_QWORD *)v229 + 48) = 0;
  *((_OWORD *)v229 + 22) = 0u;
  *((_OWORD *)v229 + 23) = 0u;
  *((_OWORD *)v229 + 20) = 0u;
  *((_OWORD *)v229 + 21) = 0u;
  *((_QWORD *)v229 + 49) = 0x100000001;
  v229[400] = 0;
  v229[88] = v733;
  v229[91] = v743;
  *(_WORD *)(v229 + 89) = v742;
  *((_DWORD *)v229 + 23) = v734;
  *((_DWORD *)v229 + 24) = v46;
  *(_QWORD *)(v229 + 100) = 0x100000000;
  *((_DWORD *)v229 + 27) = v46;
  *((_QWORD *)v229 + 14) = 0;
  *((_QWORD *)v229 + 15) = 0;
  *((_DWORD *)v229 + 32) = 0;
  v229[132] = 15;
  if (v768)
  {
    v234 = (unint64_t *)&v768->__shared_owners_;
    do
      v235 = __ldaxr(v234);
    while (__stlxr(v235 - 1, v234));
    if (!v235)
    {
      ((void (*)(std::__shared_weak_count *))v768->__on_zero_shared)(v768);
      std::__shared_weak_count::__release_weak(v768);
    }
  }
  v229[328] = a5;
  v229[329] = 1;
  *((_WORD *)v229 + 169) = 0;
  *(_QWORD *)(v229 + 330) = 0;
  v236 = vceqzq_s8(*(int8x16_t *)(v229 + 328));
  v237 = vmovl_high_s8(v236);
  v238 = vmovl_s16(*(int16x4_t *)v237.i8);
  v239.i64[0] = v238.u32[0];
  v239.i64[1] = v238.u32[1];
  v240 = v239;
  v241 = vmovl_s8(*(int8x8_t *)v236.i8);
  v242 = vmovl_s16(*(int16x4_t *)v241.i8);
  v239.i64[0] = v242.u32[0];
  v239.i64[1] = v242.u32[1];
  v243 = v239;
  v244 = vmovl_high_s16(v237);
  v239.i64[0] = v244.u32[0];
  v239.i64[1] = v244.u32[1];
  v245 = v239;
  v246 = vmovl_high_s16(v241);
  v239.i64[0] = v246.u32[0];
  v239.i64[1] = v246.u32[1];
  v247 = v239;
  v239.i64[0] = v238.u32[2];
  v239.i64[1] = v238.u32[3];
  v248 = v239;
  v239.i64[0] = v242.u32[2];
  v239.i64[1] = v242.u32[3];
  v249 = v239;
  v239.i64[0] = v244.u32[2];
  v239.i64[1] = v244.u32[3];
  v250 = v239;
  v239.i64[0] = v246.u32[2];
  v239.i64[1] = v246.u32[3];
  v251 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v239);
  v252 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v250);
  v253 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v249);
  v254 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v245);
  v255 = vceqzq_s8(*(int8x16_t *)(v229 + 344));
  v256 = vmovl_high_s8(v255);
  v257 = vmovl_s16(*(int16x4_t *)v256.i8);
  v239.i64[0] = v257.u32[0];
  v239.i64[1] = v257.u32[1];
  v258 = v239;
  v259 = vmovl_s8(*(int8x8_t *)v255.i8);
  v260 = vmovl_s16(*(int16x4_t *)v259.i8);
  v239.i64[0] = v260.u32[0];
  v239.i64[1] = v260.u32[1];
  v261 = v239;
  v262 = vmovl_high_s16(v256);
  v239.i64[0] = v262.u32[0];
  v239.i64[1] = v262.u32[1];
  v263 = v239;
  v264 = vmovl_high_s16(v259);
  v239.i64[0] = v264.u32[0];
  v239.i64[1] = v264.u32[1];
  v265 = v239;
  v239.i64[0] = v257.u32[2];
  v239.i64[1] = v257.u32[3];
  v266 = v239;
  v239.i64[0] = v260.u32[2];
  v239.i64[1] = v260.u32[3];
  v267 = v239;
  v239.i64[0] = v262.u32[2];
  v239.i64[1] = v262.u32[3];
  v268 = v239;
  v239.i64[0] = v264.u32[2];
  v239.i64[1] = v264.u32[3];
  v269 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v268);
  v270 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v258), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v240));
  v271 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v261), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v243));
  v272 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v263), v254);
  v273 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v265), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v247));
  v274 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v266), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v248));
  v275 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v267), v253);
  v276 = vorrq_s8(v269, v252);
  v277 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v239), v251);
  v278 = vceqzq_s8(*(int8x16_t *)(v229 + 360));
  v279 = vmovl_s8(*(int8x8_t *)v278.i8);
  v280 = vmovl_high_s16(v279);
  v281 = vmovl_high_s8(v278);
  v282 = vmovl_high_s16(v281);
  v283 = vmovl_s16(*(int16x4_t *)v279.i8);
  v284 = vmovl_s16(*(int16x4_t *)v281.i8);
  v239.i64[0] = v283.i32[0];
  v239.i64[1] = v283.i32[1];
  v285 = v239;
  v239.i64[0] = v284.i32[0];
  v239.i64[1] = v284.i32[1];
  v286 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v239);
  v287 = vceqzq_s8(*(int8x16_t *)(v229 + 376));
  v288 = vmovl_high_s8(v287);
  v289 = vmovl_s16(*(int16x4_t *)v288.i8);
  v239.i64[0] = v289.i32[0];
  v239.i64[1] = v289.i32[1];
  v290 = vmovl_s8(*(int8x8_t *)v287.i8);
  v291 = vmovl_s16(*(int16x4_t *)v290.i8);
  v292 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v239), v286), v270);
  v239.i64[0] = v291.i32[0];
  v239.i64[1] = v291.i32[1];
  v293 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v239), vbicq_s8((int8x16_t)xmmword_19FFB3170, v285));
  v239.i64[0] = v282.i32[0];
  v239.i64[1] = v282.i32[1];
  v294 = vbicq_s8((int8x16_t)xmmword_19FFB3180, v239);
  v295 = vmovl_high_s16(v288);
  v296 = vorrq_s8(v293, v271);
  v239.i64[0] = v295.i32[0];
  v239.i64[1] = v295.i32[1];
  v297 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v239), v294);
  v239.i64[0] = v280.i32[0];
  v239.i64[1] = v280.i32[1];
  v298 = vbicq_s8((int8x16_t)xmmword_19FFB3190, v239);
  v299 = vmovl_high_s16(v290);
  v239.i64[0] = v299.i32[0];
  v239.i64[1] = v299.i32[1];
  v300 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v239), v298), v273);
  v239.i64[0] = v284.i32[2];
  v239.i64[1] = v284.i32[3];
  v301 = vbicq_s8((int8x16_t)xmmword_19FFB31A0, v239);
  v239.i64[0] = v289.i32[2];
  v239.i64[1] = v289.i32[3];
  v302 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v239), v301), v274);
  v239.i64[0] = v283.i32[2];
  v239.i64[1] = v283.i32[3];
  v303 = vbicq_s8((int8x16_t)xmmword_19FFB31B0, v239);
  v239.i64[0] = v291.i32[2];
  v239.i64[1] = v291.i32[3];
  v304 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v239), v303), v275);
  v239.i64[0] = v282.i32[2];
  v239.i64[1] = v282.i32[3];
  v305 = vbicq_s8((int8x16_t)xmmword_19FFB31C0, v239);
  v239.i64[0] = v295.i32[2];
  v239.i64[1] = v295.i32[3];
  v306 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31F0, v239), v305), v276);
  v239.i64[0] = v280.i32[2];
  v239.i64[1] = v280.i32[3];
  v307 = vbicq_s8((int8x16_t)xmmword_19FFB31D0, v239);
  v239.i64[0] = v299.i32[2];
  v239.i64[1] = v299.i32[3];
  *((_QWORD *)v229 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(v296, v292), vorrq_s8(v300, vorrq_s8(v297, v272))), (int64x2_t)vorrq_s8(vorrq_s8(v304, v302), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v239), v307), v277), v306))));
  *((_QWORD *)v229 + 3) = &off_1E42BE338;
  v229[312] = 1;
  v308 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 14) = v229 + 24;
  *((_QWORD *)this + 15) = v229;
  if (v308)
  {
    v309 = (unint64_t *)&v308->__shared_owners_;
    do
      v310 = __ldaxr(v309);
    while (__stlxr(v310 - 1, v309));
    if (!v310)
    {
      ((void (*)(std::__shared_weak_count *))v308->__on_zero_shared)(v308);
      std::__shared_weak_count::__release_weak(v308);
    }
  }
  if (v768)
  {
    v311 = (unint64_t *)&v768->__shared_owners_;
    do
      v312 = __ldaxr(v311);
    while (__stlxr(v312 - 1, v311));
    if (!v312)
    {
      ((void (*)(std::__shared_weak_count *))v768->__on_zero_shared)(v768);
      std::__shared_weak_count::__release_weak(v768);
    }
  }
  v313 = *((_QWORD *)a2 + 10);
  v314 = *(_QWORD *)(v313 + 2048);
  v315 = *(std::__shared_weak_count **)(v313 + 2056);
  v747 = v314;
  v752 = v315;
  if (v315)
  {
    v316 = (unint64_t *)&v315->__shared_owners_;
    do
      v317 = __ldxr(v316);
    while (__stxr(v317 + 1, v316));
  }
  v318 = (char *)operator new(0x198uLL);
  *((_QWORD *)v318 + 1) = 0;
  *((_QWORD *)v318 + 2) = 0;
  *(_QWORD *)v318 = &off_1E42E5308;
  if ((v319 & 1) == 0)
  {
    if ((_DWORD)v694)
    {
      if ((v695 & 1) == 0)
      {
        if ((_DWORD)v694)
        {
          if ((v716 & 1) == 0
          {
            if ((v727 & 1) == 0
            {
              ggl::MeshTyped<ggl::RouteLine::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::RouteLine::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::RouteLine::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::RouteLine::DefaultVbo>::attributesReflection(void)::r;
            unk_1ECE43E18 = 1;
          }
          ggl::RouteLine::RouteLineMaskPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::RouteLine::DefaultVbo>::typedReflection(void)::r;
          *(_QWORD *)algn_1ECE444A8 = &ggl::RouteLine::pipelineDataRouteLineMaskPipelineDeviceStructs(void)::ref;
          qword_1ECE444B0 = 0;
          if ((v717 & 1) == 0
          {
            ggl::RouteLine::pipelineDataRouteLineMaskPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            *(_QWORD *)algn_1ECE444D8 = ggl::Tile::Transform::reflection(void)::reflection;
            qword_1ECE444E0 = (uint64_t)ggl::RouteLine::Style::reflection(void)::reflection;
          }
          qword_1ECE444B8 = (uint64_t)&ggl::RouteLine::pipelineDataRouteLineMaskPipelineConstantStructs(void)::ref;
          unk_1ECE444C0 = xmmword_19FFB3410;
        }
      }
      ggl::RouteLine::RouteLineMaskPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::RouteLine::RouteLineMaskPipelineSetup::typedReflection(void)::ref;
      ggl::RouteLineMaskShader::typedReflection(v694);
      qword_1ECE2FCB0 = (uint64_t)&ggl::RouteLineMaskShader::typedReflection(void)::ref;
      if ((v696 & 1) == 0
      {
        ggl::RouteLine::pipelineStateRouteLineMaskPipelineAttributeStructBinding(void)::attr = 0;
        *(_QWORD *)algn_1EE584CB8 = 0;
        qword_1EE584CC0 = (uint64_t)"";
        dword_1EE584CC8 = 0;
        qword_1EE584CD0 = (uint64_t)&ggl::RouteLine::pipelineStateRouteLineMaskPipelineAttributeBinding_0(void)::attr;
        unk_1EE584CD8 = 5;
      }
      qword_1ECE2FCB8 = (uint64_t)&ggl::RouteLine::pipelineStateRouteLineMaskPipelineAttributeStructBinding(void)::attr;
      unk_1ECE2FCC0 = 1;
      qword_1ECE2FCC8 = 0;
      unk_1ECE2FCD0 = 0;
      qword_1ECE2FCD8 = (uint64_t)&ggl::RouteLine::pipelineStateRouteLineMaskPipelineDeviceStructBinding(void)::ref;
      unk_1ECE2FCE0 = 0;
      if ((v697 & 1) == 0
      {
        ggl::RouteLine::pipelineStateRouteLineMaskPipelineConstantStructBinding(void)::ref = 0;
        *(_QWORD *)algn_1EE584BE8 = 0;
        qword_1EE584BF0 = (uint64_t)"view";
        dword_1EE584BF8 = 3;
        qword_1EE584C00 = (uint64_t)&ggl::RouteLine::pipelineStateRouteLineMaskPipelineConstantViewBinding(void)::reflection;
        unk_1EE584C08 = xmmword_19FFB35A0;
        qword_1EE584C18 = 1;
        unk_1EE584C20 = "transform";
        dword_1EE584C28 = 3;
        qword_1EE584C30 = (uint64_t)&ggl::RouteLine::pipelineStateRouteLineMaskPipelineConstantTransformBinding(void)::reflection;
        unk_1EE584C38 = xmmword_19FFB3660;
        qword_1EE584C48 = 2;
        unk_1EE584C50 = "style";
        dword_1EE584C58 = 3;
        qword_1EE584C60 = (uint64_t)&ggl::RouteLine::pipelineStateRouteLineMaskPipelineConstantStyleBinding(void)::reflection;
        unk_1EE584C68 = 12;
      }
      qword_1ECE2FCE8 = (uint64_t)&ggl::RouteLine::pipelineStateRouteLineMaskPipelineConstantStructBinding(void)::ref;
      *(_QWORD *)algn_1ECE2FCF0 = 3;
    }
  }
  if (v752)
  {
    v320 = (unint64_t *)&v752->__shared_owners_;
    do
      v321 = __ldxr(v320);
    while (__stxr(v321 + 1, v320));
    *((_DWORD *)v318 + 14) = 0;
    *((_QWORD *)v318 + 5) = 0;
    *((_QWORD *)v318 + 6) = 0;
    *((_QWORD *)v318 + 3) = &off_1E42B6760;
    *((_QWORD *)v318 + 4) = 0;
    *((_QWORD *)v318 + 8) = &ggl::RouteLine::RouteLineMaskPipelineState::typedReflection(void)::ref;
    *((_QWORD *)v318 + 9) = v747;
    *((_QWORD *)v318 + 10) = v752;
    do
      v322 = __ldxr(v320);
    while (__stxr(v322 + 1, v320));
  }
  else
  {
    *((_DWORD *)v318 + 14) = 0;
    *((_QWORD *)v318 + 5) = 0;
    *((_QWORD *)v318 + 6) = 0;
    *((_QWORD *)v318 + 3) = &off_1E42B6760;
    *((_QWORD *)v318 + 4) = 0;
    *((_QWORD *)v318 + 8) = &ggl::RouteLine::RouteLineMaskPipelineState::typedReflection(void)::ref;
    *((_QWORD *)v318 + 9) = v747;
    *((_QWORD *)v318 + 10) = 0;
  }
  v318[136] = 0;
  *(_OWORD *)(v318 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v318 + 156) = 0;
  *(_QWORD *)(v318 + 172) = 0;
  *(_QWORD *)(v318 + 164) = 0;
  v318[184] = 0;
  *(_OWORD *)(v318 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v318 + 204) = 0;
  *(_QWORD *)(v318 + 220) = 0;
  *(_QWORD *)(v318 + 212) = 0;
  v318[232] = 0;
  *(_OWORD *)(v318 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v318 + 252) = 0;
  *(_QWORD *)(v318 + 268) = 0;
  *(_QWORD *)(v318 + 260) = 0;
  *((_DWORD *)v318 + 70) = 8;
  *((_DWORD *)v318 + 73) = 0;
  *(_QWORD *)(v318 + 284) = 0;
  *((_QWORD *)v318 + 37) = 1;
  *((_QWORD *)v318 + 38) = 1;
  v318[312] = 0;
  *((_QWORD *)v318 + 48) = 0;
  *((_OWORD *)v318 + 22) = 0u;
  *((_OWORD *)v318 + 23) = 0u;
  *((_OWORD *)v318 + 20) = 0u;
  *((_OWORD *)v318 + 21) = 0u;
  *((_QWORD *)v318 + 49) = 0x100000001;
  v318[400] = 0;
  v318[88] = 0;
  *(_WORD *)(v318 + 89) = v738;
  v318[91] = v739;
  *(_OWORD *)(v318 + 92) = xmmword_19FFB3060;
  *(_QWORD *)(v318 + 108) = 0;
  *((_DWORD *)v318 + 29) = 0;
  *((_QWORD *)v318 + 15) = 0;
  *((_DWORD *)v318 + 32) = 0;
  v318[132] = 15;
  if (v752)
  {
    v323 = (unint64_t *)&v752->__shared_owners_;
    do
      v324 = __ldaxr(v323);
    while (__stlxr(v324 - 1, v323));
    if (!v324)
    {
      ((void (*)(std::__shared_weak_count *))v752->__on_zero_shared)(v752);
      std::__shared_weak_count::__release_weak(v752);
    }
  }
  v318[328] = a5;
  *((_DWORD *)v318 + 84) = 0;
  *(_QWORD *)(v318 + 329) = 0;
  v325 = vceqzq_s8(*(int8x16_t *)(v318 + 328));
  v326 = vmovl_high_s8(v325);
  v327 = vmovl_s16(*(int16x4_t *)v326.i8);
  v328.i64[0] = v327.u32[0];
  v328.i64[1] = v327.u32[1];
  v329 = v328;
  v330 = vmovl_s8(*(int8x8_t *)v325.i8);
  v331 = vmovl_s16(*(int16x4_t *)v330.i8);
  v328.i64[0] = v331.u32[0];
  v328.i64[1] = v331.u32[1];
  v332 = v328;
  v333 = vmovl_high_s16(v326);
  v328.i64[0] = v333.u32[0];
  v328.i64[1] = v333.u32[1];
  v334 = v328;
  v335 = vmovl_high_s16(v330);
  v328.i64[0] = v335.u32[0];
  v328.i64[1] = v335.u32[1];
  v336 = v328;
  v328.i64[0] = v327.u32[2];
  v328.i64[1] = v327.u32[3];
  v337 = v328;
  v328.i64[0] = v331.u32[2];
  v328.i64[1] = v331.u32[3];
  v338 = v328;
  v328.i64[0] = v333.u32[2];
  v328.i64[1] = v333.u32[3];
  v339 = v328;
  v328.i64[0] = v335.u32[2];
  v328.i64[1] = v335.u32[3];
  v340 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v328);
  v341 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v339);
  v342 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v338);
  v343 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v334);
  v344 = vceqzq_s8(*(int8x16_t *)(v318 + 344));
  v345 = vmovl_high_s8(v344);
  v346 = vmovl_s16(*(int16x4_t *)v345.i8);
  v328.i64[0] = v346.u32[0];
  v328.i64[1] = v346.u32[1];
  v347 = v328;
  v348 = vmovl_s8(*(int8x8_t *)v344.i8);
  v349 = vmovl_s16(*(int16x4_t *)v348.i8);
  v328.i64[0] = v349.u32[0];
  v328.i64[1] = v349.u32[1];
  v350 = v328;
  v351 = vmovl_high_s16(v345);
  v328.i64[0] = v351.u32[0];
  v328.i64[1] = v351.u32[1];
  v352 = v328;
  v353 = vmovl_high_s16(v348);
  v328.i64[0] = v353.u32[0];
  v328.i64[1] = v353.u32[1];
  v354 = v328;
  v328.i64[0] = v346.u32[2];
  v328.i64[1] = v346.u32[3];
  v355 = v328;
  v328.i64[0] = v349.u32[2];
  v328.i64[1] = v349.u32[3];
  v356 = v328;
  v328.i64[0] = v351.u32[2];
  v328.i64[1] = v351.u32[3];
  v357 = v328;
  v328.i64[0] = v353.u32[2];
  v328.i64[1] = v353.u32[3];
  v358 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v357);
  v359 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v347), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v329));
  v360 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v350), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v332));
  v361 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v352), v343);
  v362 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v354), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v336));
  v363 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v355), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v337));
  v364 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v356), v342);
  v365 = vorrq_s8(v358, v341);
  v366 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v328), v340);
  v367 = vceqzq_s8(*(int8x16_t *)(v318 + 360));
  v368 = vmovl_s8(*(int8x8_t *)v367.i8);
  v369 = vmovl_high_s16(v368);
  v370 = vmovl_high_s8(v367);
  v371 = vmovl_high_s16(v370);
  v372 = vmovl_s16(*(int16x4_t *)v368.i8);
  v373 = vmovl_s16(*(int16x4_t *)v370.i8);
  v328.i64[0] = v372.i32[0];
  v328.i64[1] = v372.i32[1];
  v374 = v328;
  v328.i64[0] = v373.i32[0];
  v328.i64[1] = v373.i32[1];
  v375 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v328);
  v376 = vceqzq_s8(*(int8x16_t *)(v318 + 376));
  v377 = vmovl_high_s8(v376);
  v378 = vmovl_s16(*(int16x4_t *)v377.i8);
  v328.i64[0] = v378.i32[0];
  v328.i64[1] = v378.i32[1];
  v379 = vmovl_s8(*(int8x8_t *)v376.i8);
  v380 = vmovl_s16(*(int16x4_t *)v379.i8);
  v381 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v328), v375), v359);
  v328.i64[0] = v380.i32[0];
  v328.i64[1] = v380.i32[1];
  v382 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v328), vbicq_s8((int8x16_t)xmmword_19FFB3170, v374));
  v328.i64[0] = v371.i32[0];
  v328.i64[1] = v371.i32[1];
  v383 = vbicq_s8((int8x16_t)xmmword_19FFB3180, v328);
  v384 = vmovl_high_s16(v377);
  v385 = vorrq_s8(v382, v360);
  v328.i64[0] = v384.i32[0];
  v328.i64[1] = v384.i32[1];
  v386 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v328), v383);
  v328.i64[0] = v369.i32[0];
  v328.i64[1] = v369.i32[1];
  v387 = vbicq_s8((int8x16_t)xmmword_19FFB3190, v328);
  v388 = vmovl_high_s16(v379);
  v328.i64[0] = v388.i32[0];
  v328.i64[1] = v388.i32[1];
  v389 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v328), v387), v362);
  v328.i64[0] = v373.i32[2];
  v328.i64[1] = v373.i32[3];
  v390 = vbicq_s8((int8x16_t)xmmword_19FFB31A0, v328);
  v328.i64[0] = v378.i32[2];
  v328.i64[1] = v378.i32[3];
  v391 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v328), v390), v363);
  v328.i64[0] = v372.i32[2];
  v328.i64[1] = v372.i32[3];
  v392 = vbicq_s8((int8x16_t)xmmword_19FFB31B0, v328);
  v328.i64[0] = v380.i32[2];
  v328.i64[1] = v380.i32[3];
  v393 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v328), v392), v364);
  v328.i64[0] = v371.i32[2];
  v328.i64[1] = v371.i32[3];
  v394 = vbicq_s8((int8x16_t)xmmword_19FFB31C0, v328);
  v328.i64[0] = v384.i32[2];
  v328.i64[1] = v384.i32[3];
  v395 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31F0, v328), v394), v365);
  v328.i64[0] = v369.i32[2];
  v328.i64[1] = v369.i32[3];
  v396 = vbicq_s8((int8x16_t)xmmword_19FFB31D0, v328);
  v328.i64[0] = v388.i32[2];
  v328.i64[1] = v388.i32[3];
  *((_QWORD *)v318 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(v385, v381), vorrq_s8(v389, vorrq_s8(v386, v361))), (int64x2_t)vorrq_s8(vorrq_s8(v393, v391), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v328), v396), v366), v395))));
  *((_QWORD *)v318 + 3) = &off_1E42BE388;
  v318[312] = 1;
  v397 = (std::__shared_weak_count *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 20) = v318 + 24;
  *((_QWORD *)this + 21) = v318;
  if (v397)
  {
    v398 = (unint64_t *)&v397->__shared_owners_;
    do
      v399 = __ldaxr(v398);
    while (__stlxr(v399 - 1, v398));
    if (!v399)
    {
      ((void (*)(std::__shared_weak_count *))v397->__on_zero_shared)(v397);
      std::__shared_weak_count::__release_weak(v397);
    }
  }
  if (v752)
  {
    v400 = (unint64_t *)&v752->__shared_owners_;
    do
      v401 = __ldaxr(v400);
    while (__stlxr(v401 - 1, v400));
    if (!v401)
    {
      ((void (*)(std::__shared_weak_count *))v752->__on_zero_shared)(v752);
      std::__shared_weak_count::__release_weak(v752);
    }
  }
  v402 = *((_QWORD *)a2 + 10);
  v403 = *(_QWORD *)(v402 + 2072);
  v404 = *(std::__shared_weak_count **)(v402 + 2080);
  v763 = v403;
  v769 = v404;
  if (v404)
  {
    v405 = (unint64_t *)&v404->__shared_owners_;
    do
      v406 = __ldxr(v405);
    while (__stxr(v406 + 1, v405));
  }
  v407 = (char *)operator new(0x198uLL);
  *((_QWORD *)v407 + 1) = 0;
  *((_QWORD *)v407 + 2) = 0;
  *(_QWORD *)v407 = &off_1E42E37B0;
  v748 = *(_OWORD *)a4->colorFormats;
  v756 = *(_OWORD *)&a4->colorFormatsCount;
  if ((v408 & 1) == 0)
  {
    if ((_DWORD)v698)
    {
      if ((v699 & 1) == 0)
      {
        if ((_DWORD)v698)
        {
          if ((v718 & 1) == 0
          {
            if ((v728 & 1) == 0
            {
              ggl::MeshTyped<ggl::RouteLine::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::RouteLine::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::RouteLine::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::RouteLine::DefaultVbo>::attributesReflection(void)::r;
            unk_1ECE43E18 = 1;
          }
          ggl::RouteLineAlphaReset::BasePipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::RouteLine::DefaultVbo>::typedReflection(void)::r;
          *(_QWORD *)algn_1ECE3A008 = &ggl::RouteLineAlphaReset::pipelineDataBasePipelineDeviceStructs(void)::ref;
          qword_1ECE3A010 = 0;
          if ((v719 & 1) == 0
          {
            ggl::RouteLineAlphaReset::pipelineDataBasePipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            unk_1ECE3A040 = ggl::Tile::Transform::reflection(void)::reflection;
            qword_1ECE3A048 = (uint64_t)ggl::Ribbon::Style::reflection(void)::reflection;
            unk_1ECE3A050 = ggl::RouteLineAlphaReset::FadeParams::reflection(void)::reflection;
          }
          qword_1ECE3A018 = (uint64_t)&ggl::RouteLineAlphaReset::pipelineDataBasePipelineConstantStructs(void)::ref;
          unk_1ECE3A020 = xmmword_19FFB3690;
        }
      }
      ggl::RouteLineAlphaReset::BasePipelineState::typedReflection(void)::ref = (uint64_t)&ggl::RouteLineAlphaReset::BasePipelineSetup::typedReflection(void)::ref;
      ggl::RouteLineAlphaResetShader::typedReflection(v698);
      qword_1ECE2F980 = (uint64_t)&ggl::RouteLineAlphaResetShader::typedReflection(void)::ref;
      if ((v700 & 1) == 0
      {
        ggl::RouteLineAlphaReset::pipelineStateBasePipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE57E9E0 = 0;
        qword_1EE57E9E8 = (uint64_t)"";
        dword_1EE57E9F0 = 0;
        qword_1EE57E9F8 = (uint64_t)&ggl::RouteLineAlphaReset::pipelineStateBasePipelineAttributeBinding_0(void)::attr;
        unk_1EE57EA00 = 3;
      }
      qword_1ECE2F988 = (uint64_t)&ggl::RouteLineAlphaReset::pipelineStateBasePipelineAttributeStructBinding(void)::attr;
      unk_1ECE2F990 = 1;
      qword_1ECE2F998 = 0;
      unk_1ECE2F9A0 = 0;
      qword_1ECE2F9A8 = (uint64_t)&ggl::RouteLineAlphaReset::pipelineStateBasePipelineDeviceStructBinding(void)::ref;
      unk_1ECE2F9B0 = 0;
      if ((v701 & 1) == 0
      {
        ggl::RouteLineAlphaReset::pipelineStateBasePipelineConstantStructBinding(void)::ref = 0;
        unk_1EE57E920 = 0;
        qword_1EE57E928 = (uint64_t)"view";
        dword_1EE57E930 = 3;
        qword_1EE57E938 = (uint64_t)&ggl::RouteLineAlphaReset::pipelineStateBasePipelineConstantViewBinding(void)::reflection;
        unk_1EE57E940 = xmmword_19FFB35A0;
        qword_1EE57E950 = 1;
        unk_1EE57E958 = "transform";
        dword_1EE57E960 = 3;
        qword_1EE57E968 = (uint64_t)&ggl::RouteLineAlphaReset::pipelineStateBasePipelineConstantTransformBinding(void)::reflection;
        *(_OWORD *)algn_1EE57E970 = xmmword_19FFB3660;
        qword_1EE57E980 = 2;
        unk_1EE57E988 = "style";
        dword_1EE57E990 = 3;
        qword_1EE57E998 = (uint64_t)&ggl::RouteLineAlphaReset::pipelineStateBasePipelineConstantStyleBinding(void)::reflection;
        unk_1EE57E9A0 = xmmword_19FFB3000;
        qword_1EE57E9B0 = 3;
        unk_1EE57E9B8 = "params";
        dword_1EE57E9C0 = 3;
        qword_1EE57E9C8 = (uint64_t)&ggl::RouteLineAlphaReset::pipelineStateBasePipelineConstantParamsBinding(void)::reflection;
        unk_1EE57E9D0 = 1;
      }
      qword_1ECE2F9B8 = (uint64_t)&ggl::RouteLineAlphaReset::pipelineStateBasePipelineConstantStructBinding(void)::ref;
      unk_1ECE2F9C0 = 4;
    }
  }
  if (v769)
  {
    v409 = (unint64_t *)&v769->__shared_owners_;
    do
      v410 = __ldxr(v409);
    while (__stxr(v410 + 1, v409));
    *((_DWORD *)v407 + 14) = 0;
    *((_QWORD *)v407 + 5) = 0;
    *((_QWORD *)v407 + 6) = 0;
    *((_QWORD *)v407 + 3) = &off_1E42B6760;
    *((_QWORD *)v407 + 4) = 0;
    *((_QWORD *)v407 + 8) = &ggl::RouteLineAlphaReset::BasePipelineState::typedReflection(void)::ref;
    *((_QWORD *)v407 + 9) = v763;
    *((_QWORD *)v407 + 10) = v769;
    do
      v411 = __ldxr(v409);
    while (__stxr(v411 + 1, v409));
  }
  else
  {
    *((_DWORD *)v407 + 14) = 0;
    *((_QWORD *)v407 + 5) = 0;
    *((_QWORD *)v407 + 6) = 0;
    *((_QWORD *)v407 + 3) = &off_1E42B6760;
    *((_QWORD *)v407 + 4) = 0;
    *((_QWORD *)v407 + 8) = &ggl::RouteLineAlphaReset::BasePipelineState::typedReflection(void)::ref;
    *((_QWORD *)v407 + 9) = v763;
    *((_QWORD *)v407 + 10) = 0;
  }
  v407[136] = 0;
  *(_OWORD *)(v407 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v407 + 156) = 0;
  *(_QWORD *)(v407 + 172) = 0;
  *(_QWORD *)(v407 + 164) = 0;
  v407[184] = 0;
  *(_OWORD *)(v407 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v407 + 204) = 0;
  *(_QWORD *)(v407 + 220) = 0;
  *(_QWORD *)(v407 + 212) = 0;
  v407[232] = 0;
  *(_OWORD *)(v407 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v407 + 252) = 0;
  *(_QWORD *)(v407 + 268) = 0;
  *(_QWORD *)(v407 + 260) = 0;
  *(_OWORD *)(v407 + 280) = v748;
  *(_OWORD *)(v407 + 296) = v756;
  v407[312] = 0;
  *((_QWORD *)v407 + 48) = 0;
  *((_OWORD *)v407 + 22) = 0u;
  *((_OWORD *)v407 + 23) = 0u;
  *((_OWORD *)v407 + 20) = 0u;
  *((_OWORD *)v407 + 21) = 0u;
  *((_QWORD *)v407 + 49) = 0x100000001;
  v407[400] = 0;
  v407[88] = 0;
  *(_WORD *)(v407 + 89) = v738;
  v407[91] = v739;
  *(_OWORD *)(v407 + 92) = xmmword_19FFB3060;
  *(_QWORD *)(v407 + 108) = 0;
  *((_DWORD *)v407 + 29) = 0;
  *((_QWORD *)v407 + 15) = 0;
  *((_DWORD *)v407 + 32) = 0;
  v407[132] = 8;
  if (v769)
  {
    v412 = (unint64_t *)&v769->__shared_owners_;
    do
      v413 = __ldaxr(v412);
    while (__stlxr(v413 - 1, v412));
    if (!v413)
    {
      ((void (*)(std::__shared_weak_count *))v769->__on_zero_shared)(v769);
      std::__shared_weak_count::__release_weak(v769);
    }
  }
  v407[328] = a5;
  v407[329] = 1;
  *((_WORD *)v407 + 169) = 0;
  *(_QWORD *)(v407 + 330) = 0;
  v414 = vceqzq_s8(*(int8x16_t *)(v407 + 328));
  v415 = vmovl_high_s8(v414);
  v416 = vmovl_s16(*(int16x4_t *)v415.i8);
  v417.i64[0] = v416.u32[0];
  v417.i64[1] = v416.u32[1];
  v418 = v417;
  v419 = vmovl_s8(*(int8x8_t *)v414.i8);
  v420 = vmovl_s16(*(int16x4_t *)v419.i8);
  v417.i64[0] = v420.u32[0];
  v417.i64[1] = v420.u32[1];
  v421 = v417;
  v422 = vmovl_high_s16(v415);
  v417.i64[0] = v422.u32[0];
  v417.i64[1] = v422.u32[1];
  v423 = v417;
  v424 = vmovl_high_s16(v419);
  v417.i64[0] = v424.u32[0];
  v417.i64[1] = v424.u32[1];
  v425 = v417;
  v417.i64[0] = v416.u32[2];
  v417.i64[1] = v416.u32[3];
  v426 = v417;
  v417.i64[0] = v420.u32[2];
  v417.i64[1] = v420.u32[3];
  v427 = v417;
  v417.i64[0] = v422.u32[2];
  v417.i64[1] = v422.u32[3];
  v428 = v417;
  v417.i64[0] = v424.u32[2];
  v417.i64[1] = v424.u32[3];
  v429 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v417);
  v430 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v428);
  v431 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v427);
  v432 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v423);
  v433 = vceqzq_s8(*(int8x16_t *)(v407 + 344));
  v434 = vmovl_high_s8(v433);
  v435 = vmovl_s16(*(int16x4_t *)v434.i8);
  v417.i64[0] = v435.u32[0];
  v417.i64[1] = v435.u32[1];
  v436 = v417;
  v437 = vmovl_s8(*(int8x8_t *)v433.i8);
  v438 = vmovl_s16(*(int16x4_t *)v437.i8);
  v417.i64[0] = v438.u32[0];
  v417.i64[1] = v438.u32[1];
  v439 = v417;
  v440 = vmovl_high_s16(v434);
  v417.i64[0] = v440.u32[0];
  v417.i64[1] = v440.u32[1];
  v441 = v417;
  v442 = vmovl_high_s16(v437);
  v417.i64[0] = v442.u32[0];
  v417.i64[1] = v442.u32[1];
  v443 = v417;
  v417.i64[0] = v435.u32[2];
  v417.i64[1] = v435.u32[3];
  v444 = v417;
  v417.i64[0] = v438.u32[2];
  v417.i64[1] = v438.u32[3];
  v445 = v417;
  v417.i64[0] = v440.u32[2];
  v417.i64[1] = v440.u32[3];
  v446 = v417;
  v417.i64[0] = v442.u32[2];
  v417.i64[1] = v442.u32[3];
  v447 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v446);
  v448 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v436), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v418));
  v449 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v439), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v421));
  v450 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v441), v432);
  v451 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v443), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v425));
  v452 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v444), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v426));
  v453 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v445), v431);
  v454 = vorrq_s8(v447, v430);
  v455 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v417), v429);
  v456 = vceqzq_s8(*(int8x16_t *)(v407 + 360));
  v457 = vmovl_s8(*(int8x8_t *)v456.i8);
  v458 = vmovl_high_s16(v457);
  v459 = vmovl_high_s8(v456);
  v460 = vmovl_high_s16(v459);
  v461 = vmovl_s16(*(int16x4_t *)v457.i8);
  v462 = vmovl_s16(*(int16x4_t *)v459.i8);
  v417.i64[0] = v461.i32[0];
  v417.i64[1] = v461.i32[1];
  v463 = v417;
  v417.i64[0] = v462.i32[0];
  v417.i64[1] = v462.i32[1];
  v464 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v417);
  v465 = vceqzq_s8(*(int8x16_t *)(v407 + 376));
  v466 = vmovl_high_s8(v465);
  v467 = vmovl_s16(*(int16x4_t *)v466.i8);
  v417.i64[0] = v467.i32[0];
  v417.i64[1] = v467.i32[1];
  v468 = vmovl_s8(*(int8x8_t *)v465.i8);
  v469 = vmovl_s16(*(int16x4_t *)v468.i8);
  v470 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v417), v464), v448);
  v417.i64[0] = v469.i32[0];
  v417.i64[1] = v469.i32[1];
  v471 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v417), vbicq_s8((int8x16_t)xmmword_19FFB3170, v463));
  v417.i64[0] = v460.i32[0];
  v417.i64[1] = v460.i32[1];
  v472 = vbicq_s8((int8x16_t)xmmword_19FFB3180, v417);
  v473 = vmovl_high_s16(v466);
  v474 = vorrq_s8(v471, v449);
  v417.i64[0] = v473.i32[0];
  v417.i64[1] = v473.i32[1];
  v475 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v417), v472);
  v417.i64[0] = v458.i32[0];
  v417.i64[1] = v458.i32[1];
  v476 = vbicq_s8((int8x16_t)xmmword_19FFB3190, v417);
  v477 = vmovl_high_s16(v468);
  v417.i64[0] = v477.i32[0];
  v417.i64[1] = v477.i32[1];
  v478 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v417), v476), v451);
  v417.i64[0] = v462.i32[2];
  v417.i64[1] = v462.i32[3];
  v479 = vbicq_s8((int8x16_t)xmmword_19FFB31A0, v417);
  v417.i64[0] = v467.i32[2];
  v417.i64[1] = v467.i32[3];
  v480 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v417), v479), v452);
  v417.i64[0] = v461.i32[2];
  v417.i64[1] = v461.i32[3];
  v481 = vbicq_s8((int8x16_t)xmmword_19FFB31B0, v417);
  v417.i64[0] = v469.i32[2];
  v417.i64[1] = v469.i32[3];
  v482 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v417), v481), v453);
  v417.i64[0] = v460.i32[2];
  v417.i64[1] = v460.i32[3];
  v483 = vbicq_s8((int8x16_t)xmmword_19FFB31C0, v417);
  v417.i64[0] = v473.i32[2];
  v417.i64[1] = v473.i32[3];
  v484 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31F0, v417), v483), v454);
  v417.i64[0] = v458.i32[2];
  v417.i64[1] = v458.i32[3];
  v485 = vbicq_s8((int8x16_t)xmmword_19FFB31D0, v417);
  v417.i64[0] = v477.i32[2];
  v417.i64[1] = v477.i32[3];
  *((_QWORD *)v407 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(v474, v470), vorrq_s8(v478, vorrq_s8(v475, v450))), (int64x2_t)vorrq_s8(vorrq_s8(v482, v480), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v417), v485), v455), v484))));
  *((_QWORD *)v407 + 3) = &off_1E42BA9C8;
  v407[312] = 1;
  v486 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 16) = v407 + 24;
  *((_QWORD *)this + 17) = v407;
  if (v486)
  {
    v487 = (unint64_t *)&v486->__shared_owners_;
    do
      v488 = __ldaxr(v487);
    while (__stlxr(v488 - 1, v487));
    if (!v488)
    {
      ((void (*)(std::__shared_weak_count *))v486->__on_zero_shared)(v486);
      std::__shared_weak_count::__release_weak(v486);
    }
  }
  if (v769)
  {
    v489 = (unint64_t *)&v769->__shared_owners_;
    do
      v490 = __ldaxr(v489);
    while (__stlxr(v490 - 1, v489));
    if (!v490)
    {
      ((void (*)(std::__shared_weak_count *))v769->__on_zero_shared)(v769);
      std::__shared_weak_count::__release_weak(v769);
    }
  }
  v491 = *((_QWORD *)a2 + 10);
  v492 = *(_QWORD *)(v491 + 2120);
  v493 = *(std::__shared_weak_count **)(v491 + 2128);
  v764 = v492;
  v770 = v493;
  if (v493)
  {
    v494 = (unint64_t *)&v493->__shared_owners_;
    do
      v495 = __ldxr(v494);
    while (__stxr(v495 + 1, v494));
  }
  v496 = (char *)operator new(0x198uLL);
  *((_QWORD *)v496 + 1) = 0;
  *((_QWORD *)v496 + 2) = 0;
  *(_QWORD *)v496 = &off_1E42E0CD0;
  v749 = *(_OWORD *)a4->colorFormats;
  v757 = *(_OWORD *)&a4->colorFormatsCount;
  if ((v497 & 1) == 0)
  {
    if ((_DWORD)v702)
    {
      if ((v703 & 1) == 0)
      {
        if ((_DWORD)v702)
        {
          if ((v720 & 1) == 0
          {
            if ((v729 & 1) == 0
            {
              ggl::MeshTyped<ggl::RouteLine::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::RouteLine::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::RouteLine::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::RouteLine::DefaultVbo>::attributesReflection(void)::r;
            unk_1ECE43E18 = 1;
          }
          ggl::RouteLineTraffic::BasePipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::RouteLine::DefaultVbo>::typedReflection(void)::r;
          *(_QWORD *)algn_1ECE39618 = &ggl::RouteLineTraffic::pipelineDataBasePipelineDeviceStructs(void)::ref;
          qword_1ECE39620 = 0;
          if ((v721 & 1) == 0
          {
            ggl::RouteLineTraffic::pipelineDataBasePipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            unk_1ECE39650 = ggl::Tile::Transform::reflection(void)::reflection;
            qword_1ECE39658 = (uint64_t)ggl::RouteLineTraffic::Style::reflection(void)::reflection;
          }
          qword_1ECE39628 = (uint64_t)&ggl::RouteLineTraffic::pipelineDataBasePipelineConstantStructs(void)::ref;
          unk_1ECE39630 = xmmword_19FFB35E0;
        }
      }
      ggl::RouteLineTraffic::BasePipelineState::typedReflection(void)::ref = (uint64_t)&ggl::RouteLineTraffic::BasePipelineSetup::typedReflection(void)::ref;
      ggl::RouteLineTrafficShader::typedReflection(v702);
      qword_1ECE31480 = (uint64_t)&ggl::RouteLineTrafficShader::typedReflection(void)::ref;
      if ((v704 & 1) == 0
      {
        ggl::RouteLineTraffic::pipelineStateBasePipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE57CF40 = 0;
        qword_1EE57CF48 = (uint64_t)"";
        dword_1EE57CF50 = 0;
        qword_1EE57CF58 = (uint64_t)&ggl::RouteLineTraffic::pipelineStateBasePipelineAttributeBinding_0(void)::attr;
        unk_1EE57CF60 = 7;
      }
      qword_1ECE31488 = (uint64_t)&ggl::RouteLineTraffic::pipelineStateBasePipelineAttributeStructBinding(void)::attr;
      unk_1ECE31490 = 1;
      qword_1ECE31498 = 0;
      unk_1ECE314A0 = 1;
      qword_1ECE314A8 = (uint64_t)&ggl::RouteLineTraffic::pipelineStateBasePipelineDeviceStructBinding(void)::ref;
      unk_1ECE314B0 = 0;
      if ((v705 & 1) == 0
      {
        ggl::RouteLineTraffic::pipelineStateBasePipelineConstantStructBinding(void)::ref = 0;
        unk_1EE57CEB0 = 0;
        qword_1EE57CEB8 = (uint64_t)"view";
        dword_1EE57CEC0 = 3;
        qword_1EE57CEC8 = (uint64_t)&ggl::RouteLineTraffic::pipelineStateBasePipelineConstantViewBinding(void)::reflection;
        *(_OWORD *)algn_1EE57CED0 = xmmword_19FFB35A0;
        qword_1EE57CEE0 = 1;
        unk_1EE57CEE8 = "transform";
        dword_1EE57CEF0 = 3;
        qword_1EE57CEF8 = (uint64_t)&ggl::RouteLineTraffic::pipelineStateBasePipelineConstantTransformBinding(void)::reflection;
        unk_1EE57CF00 = xmmword_19FFB3660;
        qword_1EE57CF10 = 2;
        unk_1EE57CF18 = "style";
        dword_1EE57CF20 = 3;
        qword_1EE57CF28 = (uint64_t)&ggl::RouteLineTraffic::pipelineStateBasePipelineConstantStyleBinding(void)::reflection;
        unk_1EE57CF30 = 6;
      }
      qword_1ECE314B8 = (uint64_t)&ggl::RouteLineTraffic::pipelineStateBasePipelineConstantStructBinding(void)::ref;
      unk_1ECE314C0 = 3;
    }
  }
  if (v770)
  {
    v498 = (unint64_t *)&v770->__shared_owners_;
    do
      v499 = __ldxr(v498);
    while (__stxr(v499 + 1, v498));
    *((_DWORD *)v496 + 14) = 0;
    *((_QWORD *)v496 + 5) = 0;
    *((_QWORD *)v496 + 6) = 0;
    *((_QWORD *)v496 + 3) = &off_1E42B6760;
    *((_QWORD *)v496 + 4) = 0;
    *((_QWORD *)v496 + 8) = &ggl::RouteLineTraffic::BasePipelineState::typedReflection(void)::ref;
    *((_QWORD *)v496 + 9) = v764;
    *((_QWORD *)v496 + 10) = v770;
    do
      v500 = __ldxr(v498);
    while (__stxr(v500 + 1, v498));
  }
  else
  {
    *((_DWORD *)v496 + 14) = 0;
    *((_QWORD *)v496 + 5) = 0;
    *((_QWORD *)v496 + 6) = 0;
    *((_QWORD *)v496 + 3) = &off_1E42B6760;
    *((_QWORD *)v496 + 4) = 0;
    *((_QWORD *)v496 + 8) = &ggl::RouteLineTraffic::BasePipelineState::typedReflection(void)::ref;
    *((_QWORD *)v496 + 9) = v764;
    *((_QWORD *)v496 + 10) = 0;
  }
  v496[136] = 0;
  *(_OWORD *)(v496 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v496 + 156) = 0;
  *(_QWORD *)(v496 + 172) = 0;
  *(_QWORD *)(v496 + 164) = 0;
  v496[184] = 0;
  *(_OWORD *)(v496 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v496 + 204) = 0;
  *(_QWORD *)(v496 + 220) = 0;
  *(_QWORD *)(v496 + 212) = 0;
  v496[232] = 0;
  *(_OWORD *)(v496 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v496 + 252) = 0;
  *(_QWORD *)(v496 + 268) = 0;
  *(_QWORD *)(v496 + 260) = 0;
  *(_OWORD *)(v496 + 280) = v749;
  *(_OWORD *)(v496 + 296) = v757;
  v496[312] = 0;
  *((_QWORD *)v496 + 48) = 0;
  *((_OWORD *)v496 + 22) = 0u;
  *((_OWORD *)v496 + 23) = 0u;
  *((_OWORD *)v496 + 20) = 0u;
  *((_OWORD *)v496 + 21) = 0u;
  *((_QWORD *)v496 + 49) = 0x100000001;
  v496[400] = 0;
  v496[88] = 1;
  *(_WORD *)(v496 + 89) = 0;
  v496[91] = 0;
  *(_OWORD *)(v496 + 92) = xmmword_19FFB35D0;
  *((_DWORD *)v496 + 27) = 7;
  *((_QWORD *)v496 + 14) = 0;
  *((_QWORD *)v496 + 15) = 0;
  *((_DWORD *)v496 + 32) = 0;
  v496[132] = 15;
  if (v770)
  {
    v501 = (unint64_t *)&v770->__shared_owners_;
    do
      v502 = __ldaxr(v501);
    while (__stlxr(v502 - 1, v501));
    if (!v502)
    {
      ((void (*)(std::__shared_weak_count *))v770->__on_zero_shared)(v770);
      std::__shared_weak_count::__release_weak(v770);
    }
  }
  *((_DWORD *)v496 + 84) = 0;
  *(_QWORD *)(v496 + 329) = 0;
  v503 = vceqzq_s8(*(int8x16_t *)(v496 + 328));
  v504 = vmovl_high_s8(v503);
  v505 = vmovl_s16(*(int16x4_t *)v504.i8);
  v506.i64[0] = v505.u32[0];
  v506.i64[1] = v505.u32[1];
  v507 = v506;
  v508 = vmovl_s8(*(int8x8_t *)v503.i8);
  v509 = vmovl_s16(*(int16x4_t *)v508.i8);
  v506.i64[0] = v509.u32[0];
  v506.i64[1] = v509.u32[1];
  v510 = v506;
  v511 = vmovl_high_s16(v504);
  v506.i64[0] = v511.u32[0];
  v506.i64[1] = v511.u32[1];
  v512 = v506;
  v513 = vmovl_high_s16(v508);
  v506.i64[0] = v513.u32[0];
  v506.i64[1] = v513.u32[1];
  v514 = v506;
  v506.i64[0] = v505.u32[2];
  v506.i64[1] = v505.u32[3];
  v515 = v506;
  v506.i64[0] = v509.u32[2];
  v506.i64[1] = v509.u32[3];
  v516 = v506;
  v506.i64[0] = v511.u32[2];
  v506.i64[1] = v511.u32[3];
  v517 = v506;
  v506.i64[0] = v513.u32[2];
  v506.i64[1] = v513.u32[3];
  v518 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v506);
  v519 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v517);
  v520 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v516);
  v521 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v512);
  v522 = vceqzq_s8(*(int8x16_t *)(v496 + 344));
  v523 = vmovl_high_s8(v522);
  v524 = vmovl_s16(*(int16x4_t *)v523.i8);
  v506.i64[0] = v524.u32[0];
  v506.i64[1] = v524.u32[1];
  v525 = v506;
  v526 = vmovl_s8(*(int8x8_t *)v522.i8);
  v527 = vmovl_s16(*(int16x4_t *)v526.i8);
  v506.i64[0] = v527.u32[0];
  v506.i64[1] = v527.u32[1];
  v528 = v506;
  v529 = vmovl_high_s16(v523);
  v506.i64[0] = v529.u32[0];
  v506.i64[1] = v529.u32[1];
  v530 = v506;
  v531 = vmovl_high_s16(v526);
  v506.i64[0] = v531.u32[0];
  v506.i64[1] = v531.u32[1];
  v532 = v506;
  v506.i64[0] = v524.u32[2];
  v506.i64[1] = v524.u32[3];
  v533 = v506;
  v506.i64[0] = v527.u32[2];
  v506.i64[1] = v527.u32[3];
  v534 = v506;
  v506.i64[0] = v529.u32[2];
  v506.i64[1] = v529.u32[3];
  v535 = v506;
  v506.i64[0] = v531.u32[2];
  v506.i64[1] = v531.u32[3];
  v536 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v535);
  v537 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v525), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v507));
  v538 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v528), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v510));
  v539 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v530), v521);
  v540 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v532), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v514));
  v541 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v533), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v515));
  v542 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v534), v520);
  v543 = vorrq_s8(v536, v519);
  v544 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v506), v518);
  v545 = vceqzq_s8(*(int8x16_t *)(v496 + 360));
  v546 = vmovl_s8(*(int8x8_t *)v545.i8);
  v547 = vmovl_high_s16(v546);
  v548 = vmovl_high_s8(v545);
  v549 = vmovl_high_s16(v548);
  v550 = vmovl_s16(*(int16x4_t *)v546.i8);
  v551 = vmovl_s16(*(int16x4_t *)v548.i8);
  v506.i64[0] = v550.i32[0];
  v506.i64[1] = v550.i32[1];
  v552 = v506;
  v506.i64[0] = v551.i32[0];
  v506.i64[1] = v551.i32[1];
  v553 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v506);
  v554 = vceqzq_s8(*(int8x16_t *)(v496 + 376));
  v555 = vmovl_high_s8(v554);
  v556 = vmovl_s16(*(int16x4_t *)v555.i8);
  v506.i64[0] = v556.i32[0];
  v506.i64[1] = v556.i32[1];
  v557 = vmovl_s8(*(int8x8_t *)v554.i8);
  v558 = vmovl_s16(*(int16x4_t *)v557.i8);
  v559 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v506), v553), v537);
  v506.i64[0] = v558.i32[0];
  v506.i64[1] = v558.i32[1];
  v560 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v506), vbicq_s8((int8x16_t)xmmword_19FFB3170, v552));
  v506.i64[0] = v549.i32[0];
  v506.i64[1] = v549.i32[1];
  v561 = vbicq_s8((int8x16_t)xmmword_19FFB3180, v506);
  v562 = vmovl_high_s16(v555);
  v563 = vorrq_s8(v560, v538);
  v506.i64[0] = v562.i32[0];
  v506.i64[1] = v562.i32[1];
  v564 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v506), v561);
  v506.i64[0] = v547.i32[0];
  v506.i64[1] = v547.i32[1];
  v565 = vbicq_s8((int8x16_t)xmmword_19FFB3190, v506);
  v566 = vmovl_high_s16(v557);
  v506.i64[0] = v566.i32[0];
  v506.i64[1] = v566.i32[1];
  v567 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v506), v565), v540);
  v506.i64[0] = v551.i32[2];
  v506.i64[1] = v551.i32[3];
  v568 = vbicq_s8((int8x16_t)xmmword_19FFB31A0, v506);
  v506.i64[0] = v556.i32[2];
  v506.i64[1] = v556.i32[3];
  v569 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v506), v568), v541);
  v506.i64[0] = v550.i32[2];
  v506.i64[1] = v550.i32[3];
  v570 = vbicq_s8((int8x16_t)xmmword_19FFB31B0, v506);
  v506.i64[0] = v558.i32[2];
  v506.i64[1] = v558.i32[3];
  v571 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v506), v570), v542);
  v506.i64[0] = v549.i32[2];
  v506.i64[1] = v549.i32[3];
  v572 = vbicq_s8((int8x16_t)xmmword_19FFB31C0, v506);
  v506.i64[0] = v562.i32[2];
  v506.i64[1] = v562.i32[3];
  v573 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31F0, v506), v572), v543);
  v506.i64[0] = v547.i32[2];
  v506.i64[1] = v547.i32[3];
  v574 = vbicq_s8((int8x16_t)xmmword_19FFB31D0, v506);
  v506.i64[0] = v566.i32[2];
  v506.i64[1] = v566.i32[3];
  *((_QWORD *)v496 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(v563, v559), vorrq_s8(v567, vorrq_s8(v564, v539))), (int64x2_t)vorrq_s8(vorrq_s8(v571, v569), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v506), v574), v544), v573))));
  *((_QWORD *)v496 + 3) = &off_1E42B8A60;
  v496[312] = 1;
  v575 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 18) = v496 + 24;
  *((_QWORD *)this + 19) = v496;
  if (v575)
  {
    v576 = (unint64_t *)&v575->__shared_owners_;
    do
      v577 = __ldaxr(v576);
    while (__stlxr(v577 - 1, v576));
    if (!v577)
    {
      ((void (*)(std::__shared_weak_count *))v575->__on_zero_shared)(v575);
      std::__shared_weak_count::__release_weak(v575);
    }
  }
  if (v770)
  {
    v578 = (unint64_t *)&v770->__shared_owners_;
    do
      v579 = __ldaxr(v578);
    while (__stlxr(v579 - 1, v578));
    if (!v579)
    {
      ((void (*)(std::__shared_weak_count *))v770->__on_zero_shared)(v770);
      std::__shared_weak_count::__release_weak(v770);
    }
  }
  v580 = operator new();
  v581 = v580;
  v582 = *((_QWORD *)a2 + 10);
  v583 = *(_QWORD *)(v582 + 2144);
  v584 = *(std::__shared_weak_count **)(v582 + 2152);
  if (v584)
  {
    v585 = (unint64_t *)&v584->__shared_owners_;
    do
      v586 = __ldxr(v585);
    while (__stxr(v586 + 1, v585));
    v765 = *(_OWORD *)a4->colorFormats;
    v771 = *(_OWORD *)&a4->colorFormatsCount;
    do
      v587 = __ldxr(v585);
    while (__stxr(v587 + 1, v585));
    v750 = v765;
    v758 = v771;
    *(_QWORD *)v580 = v583;
    *(_QWORD *)(v580 + 8) = v584;
    do
      v588 = __ldxr(v585);
    while (__stxr(v588 + 1, v585));
  }
  else
  {
    v750 = *(_OWORD *)a4->colorFormats;
    v758 = *(_OWORD *)&a4->colorFormatsCount;
    *(_QWORD *)v580 = v583;
    *(_QWORD *)(v580 + 8) = 0;
  }
  *(_OWORD *)(v580 + 16) = v750;
  *(_OWORD *)(v580 + 32) = v758;
  *(_BYTE *)(v580 + 48) = v733;
  *(_WORD *)(v580 + 49) = v742;
  *(_BYTE *)(v580 + 51) = v743;
  *(_DWORD *)(v580 + 52) = v734;
  *(_DWORD *)(v580 + 56) = v46;
  *(_QWORD *)(v580 + 60) = 0x100000000;
  *(_DWORD *)(v580 + 68) = v46;
  *(_QWORD *)(v580 + 72) = 0;
  *(_QWORD *)(v580 + 80) = 0;
  *(_DWORD *)(v580 + 88) = 0;
  *(_BYTE *)(v580 + 92) = 15;
  *(_QWORD *)(v580 + 104) = 0;
  *(_WORD *)(v580 + 93) = v740;
  *(_BYTE *)(v580 + 95) = v741;
  *(_QWORD *)(v580 + 112) = 0;
  *(_QWORD *)(v580 + 96) = v580 + 104;
  if (v584)
  {
    v589 = (unint64_t *)&v584->__shared_owners_;
    do
      v590 = __ldaxr(v589);
    while (__stlxr(v590 - 1, v589));
    if (!v590)
    {
      ((void (*)(std::__shared_weak_count *))v584->__on_zero_shared)(v584);
      std::__shared_weak_count::__release_weak(v584);
    }
  }
  v591 = *v732;
  *v732 = v581;
  if (v591)
  {
    std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*(_QWORD **)(v591 + 104));
    v592 = *(std::__shared_weak_count **)(v591 + 8);
    if (v592)
    {
      v593 = (unint64_t *)&v592->__shared_owners_;
      do
        v594 = __ldaxr(v593);
      while (__stlxr(v594 - 1, v593));
      if (!v594)
      {
        ((void (*)(std::__shared_weak_count *))v592->__on_zero_shared)(v592);
        std::__shared_weak_count::__release_weak(v592);
      }
    }
    MEMORY[0x1A1AF4E00](v591, 0x1020C40AD78EA61);
  }
  if (v584)
  {
    v595 = (unint64_t *)&v584->__shared_owners_;
    do
      v596 = __ldaxr(v595);
    while (__stlxr(v596 - 1, v595));
    if (!v596)
    {
      ((void (*)(std::__shared_weak_count *))v584->__on_zero_shared)(v584);
      std::__shared_weak_count::__release_weak(v584);
    }
  }
  v597 = *((_QWORD *)a2 + 10);
  v598 = *(_QWORD *)(v597 + 3560);
  v599 = *(std::__shared_weak_count **)(v597 + 3568);
  v736 = v598;
  v737 = v599;
  if (v599)
  {
    v600 = (unint64_t *)&v599->__shared_owners_;
    do
      v601 = __ldxr(v600);
    while (__stxr(v601 + 1, v600));
  }
  v602 = (char *)operator new(0x198uLL);
  *((_QWORD *)v602 + 1) = 0;
  *((_QWORD *)v602 + 2) = 0;
  *(_QWORD *)v602 = &off_1E42E3BD8;
  v751 = *(_OWORD *)a4->colorFormats;
  v759 = *(_OWORD *)&a4->colorFormatsCount;
  if ((v603 & 1) == 0)
  {
    if ((_DWORD)v706)
    {
      if ((v707 & 1) == 0)
      {
        if ((_DWORD)v706)
        {
          if ((v722 & 1) == 0
          {
            if ((v730 & 1) == 0
            {
              ggl::MeshTyped<ggl::TexturedAnimatedRibbon::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::TexturedAnimatedRibbon::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::TexturedAnimatedRibbon::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::TexturedAnimatedRibbon::DefaultVbo>::attributesReflection(void)::r;
            unk_1ECE336A8 = 1;
          }
          ggl::TexturedAnimatedRibbon::BasePipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::TexturedAnimatedRibbon::DefaultVbo>::typedReflection(void)::r;
          unk_1ECE328F0 = &ggl::TexturedAnimatedRibbon::pipelineDataBasePipelineDeviceStructs(void)::ref;
          qword_1ECE328F8 = 0;
          if ((v723 & 1) == 0
          {
            ggl::TexturedAnimatedRibbon::pipelineDataBasePipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            *(_QWORD *)algn_1ECE32928 = ggl::Tile::Transform::reflection(void)::reflection;
            qword_1ECE32930 = (uint64_t)ggl::TexturedAnimatedRibbon::Style::reflection(void)::reflection;
          }
          qword_1ECE32900 = (uint64_t)&ggl::TexturedAnimatedRibbon::pipelineDataBasePipelineConstantStructs(void)::ref;
          *(_OWORD *)algn_1ECE32908 = xmmword_19FFB3C60;
        }
      }
      ggl::TexturedAnimatedRibbon::BasePipelineState::typedReflection(void)::ref = (uint64_t)&ggl::TexturedAnimatedRibbon::BasePipelineSetup::typedReflection(void)::ref;
      ggl::TexturedAnimatedRibbonShader::typedReflection(v706);
      qword_1EE57F608 = (uint64_t)&ggl::TexturedAnimatedRibbonShader::typedReflection(void)::ref;
      if ((v708 & 1) == 0
      {
        ggl::TexturedAnimatedRibbon::pipelineStateBasePipelineAttributeStructBinding(void)::attr = 0;
        *(_QWORD *)algn_1EE57F6E8 = 0;
        qword_1EE57F6F0 = (uint64_t)"";
        dword_1EE57F6F8 = 0;
        qword_1EE57F700 = (uint64_t)&ggl::TexturedAnimatedRibbon::pipelineStateBasePipelineAttributeBinding_0(void)::attr;
        unk_1EE57F708 = 5;
      }
      qword_1EE57F610 = (uint64_t)&ggl::TexturedAnimatedRibbon::pipelineStateBasePipelineAttributeStructBinding(void)::attr;
      *(_QWORD *)algn_1EE57F618 = 1;
      qword_1EE57F620 = 0;
      unk_1EE57F628 = 2;
      qword_1EE57F630 = (uint64_t)&ggl::TexturedAnimatedRibbon::pipelineStateBasePipelineDeviceStructBinding(void)::ref;
      unk_1EE57F638 = 0;
      if ((v709 & 1) == 0
      {
        ggl::TexturedAnimatedRibbon::pipelineStateBasePipelineConstantStructBinding(void)::ref = 0;
        *(_QWORD *)algn_1EE57F658 = 0;
        qword_1EE57F660 = (uint64_t)"view";
        dword_1EE57F668 = 3;
        qword_1EE57F670 = (uint64_t)&ggl::TexturedAnimatedRibbon::pipelineStateBasePipelineConstantViewBinding(void)::reflection;
        unk_1EE57F678 = xmmword_19FFB35A0;
        qword_1EE57F688 = 1;
        unk_1EE57F690 = "transform";
        dword_1EE57F698 = 3;
        qword_1EE57F6A0 = (uint64_t)&ggl::TexturedAnimatedRibbon::pipelineStateBasePipelineConstantTransformBinding(void)::reflection;
        unk_1EE57F6A8 = xmmword_19FFB3660;
        qword_1EE57F6B8 = 2;
        unk_1EE57F6C0 = "style";
        dword_1EE57F6C8 = 3;
        qword_1EE57F6D0 = (uint64_t)&ggl::TexturedAnimatedRibbon::pipelineStateBasePipelineConstantStyleBinding(void)::reflection;
        unk_1EE57F6D8 = 7;
      }
      qword_1EE57F640 = (uint64_t)&ggl::TexturedAnimatedRibbon::pipelineStateBasePipelineConstantStructBinding(void)::ref;
      *(_QWORD *)algn_1EE57F648 = 3;
    }
  }
  if (v737)
  {
    v604 = (unint64_t *)&v737->__shared_owners_;
    do
      v605 = __ldxr(v604);
    while (__stxr(v605 + 1, v604));
    *((_DWORD *)v602 + 14) = 0;
    *((_QWORD *)v602 + 5) = 0;
    *((_QWORD *)v602 + 6) = 0;
    *((_QWORD *)v602 + 3) = &off_1E42B6760;
    *((_QWORD *)v602 + 4) = 0;
    *((_QWORD *)v602 + 8) = &ggl::TexturedAnimatedRibbon::BasePipelineState::typedReflection(void)::ref;
    *((_QWORD *)v602 + 9) = v736;
    *((_QWORD *)v602 + 10) = v737;
    do
      v606 = __ldxr(v604);
    while (__stxr(v606 + 1, v604));
  }
  else
  {
    *((_DWORD *)v602 + 14) = 0;
    *((_QWORD *)v602 + 5) = 0;
    *((_QWORD *)v602 + 6) = 0;
    *((_QWORD *)v602 + 3) = &off_1E42B6760;
    *((_QWORD *)v602 + 4) = 0;
    *((_QWORD *)v602 + 8) = &ggl::TexturedAnimatedRibbon::BasePipelineState::typedReflection(void)::ref;
    *((_QWORD *)v602 + 9) = v736;
    *((_QWORD *)v602 + 10) = 0;
  }
  v602[136] = 0;
  *(_OWORD *)(v602 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v602 + 156) = 0;
  *(_QWORD *)(v602 + 172) = 0;
  *(_QWORD *)(v602 + 164) = 0;
  v602[184] = 0;
  *(_OWORD *)(v602 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v602 + 204) = 0;
  *(_QWORD *)(v602 + 220) = 0;
  *(_QWORD *)(v602 + 212) = 0;
  v602[232] = 0;
  *(_OWORD *)(v602 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v602 + 252) = 0;
  *(_QWORD *)(v602 + 268) = 0;
  *(_QWORD *)(v602 + 260) = 0;
  *(_OWORD *)(v602 + 280) = v751;
  *(_OWORD *)(v602 + 296) = v759;
  v602[312] = 0;
  *((_QWORD *)v602 + 48) = 0;
  *((_OWORD *)v602 + 22) = 0u;
  *((_OWORD *)v602 + 23) = 0u;
  *((_OWORD *)v602 + 20) = 0u;
  *((_OWORD *)v602 + 21) = 0u;
  *((_QWORD *)v602 + 49) = 0x100000001;
  v602[400] = 0;
  v602[88] = v733;
  v602[91] = v743;
  *(_WORD *)(v602 + 89) = v742;
  *((_DWORD *)v602 + 23) = v734;
  *((_DWORD *)v602 + 24) = v46;
  *(_QWORD *)(v602 + 100) = 0x100000000;
  *((_DWORD *)v602 + 27) = v46;
  *((_QWORD *)v602 + 14) = 0;
  *((_QWORD *)v602 + 15) = 0;
  *((_DWORD *)v602 + 32) = 0;
  v602[132] = 15;
  if (v737)
  {
    v607 = (unint64_t *)&v737->__shared_owners_;
    do
      v608 = __ldaxr(v607);
    while (__stlxr(v608 - 1, v607));
    if (!v608)
    {
      ((void (*)(std::__shared_weak_count *))v737->__on_zero_shared)(v737);
      std::__shared_weak_count::__release_weak(v737);
    }
  }
  v602[328] = a5;
  *((_DWORD *)v602 + 84) = 0;
  *(_QWORD *)(v602 + 329) = 0;
  v609 = vceqzq_s8(*(int8x16_t *)(v602 + 328));
  v610 = vmovl_s8(*(int8x8_t *)v609.i8);
  v611 = vmovl_high_s16(v610);
  v612.i64[0] = v611.u32[2];
  v612.i64[1] = v611.u32[3];
  v613 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v612);
  v614 = vmovl_high_s8(v609);
  v615 = vmovl_high_s16(v614);
  v612.i64[0] = v615.u32[2];
  v612.i64[1] = v615.u32[3];
  v616 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v612);
  v617 = vmovl_s16(*(int16x4_t *)v610.i8);
  v612.i64[0] = v617.u32[2];
  v612.i64[1] = v617.u32[3];
  v618 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v612);
  v619 = vmovl_s16(*(int16x4_t *)v614.i8);
  v612.i64[0] = v619.u32[2];
  v612.i64[1] = v619.u32[3];
  v620 = vbicq_s8((int8x16_t)xmmword_19FFB30A0, v612);
  v612.i64[0] = v611.u32[0];
  v612.i64[1] = v611.u32[1];
  v621 = vbicq_s8((int8x16_t)xmmword_19FFB30B0, v612);
  v612.i64[0] = v615.u32[0];
  v612.i64[1] = v615.u32[1];
  v622 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v612);
  v612.i64[0] = v617.u32[0];
  v612.i64[1] = v617.u32[1];
  v623 = vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v612);
  v612.i64[0] = v619.u32[0];
  v612.i64[1] = v619.u32[1];
  v624 = vbicq_s8((int8x16_t)xmmword_19FFB30D0, v612);
  v625 = vceqzq_s8(*(int8x16_t *)(v602 + 344));
  v626 = vmovl_s8(*(int8x8_t *)v625.i8);
  v627 = vmovl_high_s16(v626);
  v612.i64[0] = v627.u32[2];
  v612.i64[1] = v627.u32[3];
  v628 = vbicq_s8((int8x16_t)xmmword_19FFB30E0, v612);
  v629 = vmovl_high_s8(v625);
  v630 = vmovl_high_s16(v629);
  v612.i64[0] = v630.u32[2];
  v612.i64[1] = v630.u32[3];
  v631 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v612);
  v632 = vmovl_s16(*(int16x4_t *)v626.i8);
  v612.i64[0] = v632.u32[2];
  v612.i64[1] = v632.u32[3];
  v633 = vbicq_s8((int8x16_t)xmmword_19FFB3100, v612);
  v634 = vmovl_s16(*(int16x4_t *)v629.i8);
  v612.i64[0] = v634.u32[2];
  v612.i64[1] = v634.u32[3];
  v635 = vbicq_s8((int8x16_t)xmmword_19FFB3110, v612);
  v612.i64[0] = v627.u32[0];
  v612.i64[1] = v627.u32[1];
  v636 = vbicq_s8((int8x16_t)xmmword_19FFB3120, v612);
  v612.i64[0] = v630.u32[0];
  v612.i64[1] = v630.u32[1];
  v637 = vbicq_s8((int8x16_t)xmmword_19FFB3130, v612);
  v612.i64[0] = v632.u32[0];
  v612.i64[1] = v632.u32[1];
  v638 = vbicq_s8((int8x16_t)xmmword_19FFB3140, v612);
  v612.i64[0] = v634.u32[0];
  v612.i64[1] = v634.u32[1];
  v639 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v612), v624);
  v640 = vorrq_s8(v638, v623);
  v641 = vorrq_s8(v637, v622);
  v642 = vorrq_s8(v636, v621);
  v643 = vorrq_s8(v635, v620);
  v644 = vorrq_s8(v633, v618);
  v645 = vorrq_s8(v631, v616);
  v646 = vorrq_s8(v628, v613);
  v647 = vceqzq_s8(*(int8x16_t *)(v602 + 360));
  v648 = vmovl_s8(*(int8x8_t *)v647.i8);
  v649 = vmovl_high_s16(v648);
  v650 = vmovl_high_s8(v647);
  v651 = vmovl_high_s16(v650);
  v652 = vmovl_s16(*(int16x4_t *)v648.i8);
  v653 = vmovl_s16(*(int16x4_t *)v650.i8);
  v612.i64[0] = v653.i32[0];
  v612.i64[1] = v653.i32[1];
  v654 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v612);
  v612.i64[0] = v652.i32[0];
  v612.i64[1] = v652.i32[1];
  v655 = vbicq_s8((int8x16_t)xmmword_19FFB3170, v612);
  v612.i64[0] = v651.i32[0];
  v612.i64[1] = v651.i32[1];
  v656 = vbicq_s8((int8x16_t)xmmword_19FFB3180, v612);
  v612.i64[0] = v649.i32[0];
  v612.i64[1] = v649.i32[1];
  v657 = vbicq_s8((int8x16_t)xmmword_19FFB3190, v612);
  v612.i64[0] = v649.i32[2];
  v612.i64[1] = v649.i32[3];
  v658 = v612;
  v612.i64[0] = v651.i32[2];
  v612.i64[1] = v651.i32[3];
  v659 = v612;
  v612.i64[0] = v652.i32[2];
  v612.i64[1] = v652.i32[3];
  v660 = v612;
  v612.i64[0] = v653.i32[2];
  v612.i64[1] = v653.i32[3];
  v661 = vbicq_s8((int8x16_t)xmmword_19FFB31A0, v612);
  v662 = vceqzq_s8(*(int8x16_t *)(v602 + 376));
  v663 = vmovl_high_s8(v662);
  v664 = vmovl_s16(*(int16x4_t *)v663.i8);
  v665 = vmovl_s8(*(int8x8_t *)v662.i8);
  v666 = vmovl_s16(*(int16x4_t *)v665.i8);
  v667 = vmovl_high_s16(v663);
  v668 = vmovl_high_s16(v665);
  v612.i64[0] = v668.i32[2];
  v612.i64[1] = v668.i32[3];
  v669 = vbicq_s8((int8x16_t)xmmword_19FFB31E0, v612);
  v612.i64[0] = v667.i32[2];
  v612.i64[1] = v667.i32[3];
  v670 = vbicq_s8((int8x16_t)xmmword_19FFB31F0, v612);
  v612.i64[0] = v666.i32[2];
  v612.i64[1] = v666.i32[3];
  v671 = vbicq_s8((int8x16_t)xmmword_19FFB3200, v612);
  v612.i64[0] = v664.i32[2];
  v612.i64[1] = v664.i32[3];
  v672 = vbicq_s8((int8x16_t)xmmword_19FFB3210, v612);
  v612.i64[0] = v668.i32[0];
  v612.i64[1] = v668.i32[1];
  v673 = vbicq_s8((int8x16_t)xmmword_19FFB3220, v612);
  v612.i64[0] = v667.i32[0];
  v612.i64[1] = v667.i32[1];
  v674 = vbicq_s8((int8x16_t)xmmword_19FFB3230, v612);
  v612.i64[0] = v666.i32[0];
  v612.i64[1] = v666.i32[1];
  v675 = vbicq_s8((int8x16_t)xmmword_19FFB3240, v612);
  v612.i64[0] = v664.i32[0];
  v612.i64[1] = v664.i32[1];
  *((_QWORD *)v602 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(v675, v655), v640), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v612), v654), v639)), vorrq_s8(vorrq_s8(vorrq_s8(v673, v657), v642), vorrq_s8(vorrq_s8(v674, v656), v641))), (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(v671, vbicq_s8((int8x16_t)xmmword_19FFB31B0, v660)), v644), vorrq_s8(vorrq_s8(v672, v661), v643)), vorrq_s8(vorrq_s8(vorrq_s8(v669, vbicq_s8((int8x16_t)xmmword_19FFB31D0, v658)),
                                                v646),
                                              vorrq_s8(vorrq_s8(v670, vbicq_s8((int8x16_t)xmmword_19FFB31C0, v659)), v645)))));
  *((_QWORD *)v602 + 3) = &off_1E42BB030;
  v602[312] = 1;
  v676 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 24) = v602 + 24;
  *((_QWORD *)this + 25) = v602;
  if (v676)
  {
    v677 = (unint64_t *)&v676->__shared_owners_;
    do
      v678 = __ldaxr(v677);
    while (__stlxr(v678 - 1, v677));
    if (!v678)
    {
      ((void (*)(std::__shared_weak_count *))v676->__on_zero_shared)(v676);
      std::__shared_weak_count::__release_weak(v676);
    }
  }
  if (v737)
  {
    v679 = (unint64_t *)&v737->__shared_owners_;
    do
      v680 = __ldaxr(v679);
    while (__stlxr(v680 - 1, v679));
    if (!v680)
    {
      ((void (*)(std::__shared_weak_count *))v737->__on_zero_shared)(v737);
      std::__shared_weak_count::__release_weak(v737);
    }
  }
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 31) = v731;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_DWORD *)this + 72) = 1065353216;
  *((_BYTE *)this + 296) = a5;
  return this;
}

void sub_19FD3657C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t *a17)
{
  md::RouteLineSharedRenderStates *v17;
  uint64_t v18;
  uint64_t v19;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v19 - 208);
  std::unique_ptr<md::PolylinePipelineStateManager<md::Ribbons::GradientPolylineOverlayRibbonDescriptor,ggl::GradientPolylineOverlayRibbon::FillPipelineState,std::shared_ptr<ggl::GradientPolylineOverlayFillShader>>>::~unique_ptr[abi:nn180100](a17);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a10);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a11);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a12);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a13);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a14);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a15);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v18);
  md::RouteLineSharedRenderStates::~RouteLineSharedRenderStates(v17);
  _Unwind_Resume(a1);
}

void sub_19FD36640(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = v1[11];
  v1[11] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = v1[10];
  v1[10] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = v1[9];
  v1[9] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = v1[8];
  v1[8] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = v1[7];
  v1[7] = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = v1[6];
  v1[6] = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = v1[5];
  v1[5] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = v1[4];
  v1[4] = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = v1[3];
  v1[3] = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = v1[2];
  v1[2] = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = v1[1];
  v1[1] = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *v1;
  *v1 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  _Unwind_Resume(exception_object);
}

uint64_t md::Ribbons::RibbonBatch<md::Ribbons::RouteLineRibbonDescriptor>::~RibbonBatch(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  malloc_zone_t *zone;
  void (***v11)(_QWORD, uint64_t);
  void (***v12)(_QWORD, uint64_t);
  unsigned __int8 v13;
  uint64_t v14;
  geo::read_write_lock *v15;
  const char *v16;
  _QWORD *v17;
  unint64_t v18;
  void (***v19)(void);
  void (**v20)(void);
  _QWORD **v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  _QWORD *v33;

  *(_QWORD *)a1 = &off_1E42AF128;
  v2 = *(_QWORD **)(a1 + 2424);
  if (v2)
  {
    v3 = *(_QWORD **)(a1 + 2432);
    v4 = *(void **)(a1 + 2424);
    if (v3 != v2)
    {
      do
      {
        v7 = *--v3;
        v6 = v7;
        *v3 = 0;
        if (v7)
        {
          v8 = *(_QWORD **)(v6 + 56);
          if (v8)
          {
            v9 = *(_QWORD **)(v6 + 64);
            v5 = *(_QWORD *)(v6 + 56);
            if (v9 != v8)
            {
              do
              {
                v12 = (void (***)(_QWORD, uint64_t))*--v9;
                v11 = v12;
                *v9 = 0;
                if (v12)
                {
                  (**v11)(v11, v5);
                  {
                    v33 = v2;
                    v14 = operator new();
                    *(_QWORD *)(v14 + 16) = 0x5ED09DD50000000FLL;
                    *(_QWORD *)(v14 + 24) = "VectorKitLabels";
                    *(_OWORD *)(v14 + 32) = xmmword_19FFB2E80;
                    *(_QWORD *)v14 = &off_1E42B5668;
                    *(_QWORD *)(v14 + 8) = "VectorKitLabels";
                    *(_OWORD *)(v14 + 72) = 0u;
                    *(_OWORD *)(v14 + 88) = 0u;
                    *(_OWORD *)(v14 + 104) = 0u;
                    *(_OWORD *)(v14 + 120) = 0u;
                    *(_OWORD *)(v14 + 136) = 0u;
                    *(_OWORD *)(v14 + 152) = 0u;
                    *(_OWORD *)(v14 + 168) = 0u;
                    *(_OWORD *)(v14 + 184) = 0u;
                    *(_OWORD *)(v14 + 200) = 0u;
                    *(_OWORD *)(v14 + 216) = 0u;
                    *(_OWORD *)(v14 + 232) = 0u;
                    *(_QWORD *)(v14 + 248) = 0;
                    *(_OWORD *)(v14 + 56) = 0u;
                    v15 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v14 + 56), 0);
                    if ((_DWORD)v15)
                      geo::read_write_lock::logFailure(v15, (uint64_t)"initialization", v16);
                    zone = malloc_create_zone(0, 0);
                    *(_QWORD *)(v14 + 48) = zone;
                    malloc_set_zone_name(zone, "VectorKitLabels");
                    *(_QWORD *)(v14 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                    mdm::Allocator::instance(void)::alloc = v14;
                    v2 = v33;
                  }
                  (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v11, 128);
                }
              }
              while (v9 != v8);
              v5 = *(_QWORD *)(v6 + 56);
            }
            *(_QWORD *)(v6 + 64) = v8;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v6 + 80) + 40))(*(_QWORD *)(v6 + 80), v5, *(_QWORD *)(v6 + 72) - v5);
          }
          MEMORY[0x1A1AF4E00](v6, 0x1020C4010FC18DELL);
        }
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 2424);
    }
    *(_QWORD *)(a1 + 2432) = v2;
    operator delete(v4);
  }
  v17 = *(_QWORD **)(a1 + 2400);
  do
  {
    if (v17[1])
    {
      v18 = 0;
      v19 = (void (***)(void))(v17 + 2);
      do
      {
        v20 = *v19;
        v19 += 15;
        (*v20)();
        ++v18;
      }
      while (v18 < v17[1]);
    }
    v17[1] = 0;
    v17 = (_QWORD *)*v17;
  }
  while (v17);
  v21 = *(_QWORD ***)(a1 + 2400);
  *(_QWORD *)(a1 + 2408) = v21;
  v22 = *v21;
  *v21 = 0;
  if (v22)
  {
    do
    {
      v23 = (_QWORD *)*v22;
      free(v22);
      v22 = v23;
    }
    while (v23);
    v21 = *(_QWORD ***)(a1 + 2400);
  }
  free(v21);
  v24 = *(void **)(a1 + 2376);
  if (v24)
  {
    *(_QWORD *)(a1 + 2384) = v24;
    operator delete(v24);
  }
  v25 = *(_QWORD *)(a1 + 2344);
  if (v25)
  {
    v26 = *(_QWORD *)(a1 + 2352);
    v27 = *(_QWORD *)(a1 + 2344);
    if (v26 != v25)
    {
      v28 = *(_QWORD *)(a1 + 2352);
      do
      {
        v30 = *(void **)(v28 - 24);
        v28 -= 24;
        v29 = v30;
        if (v30)
        {
          *(_QWORD *)(v26 - 16) = v29;
          operator delete(v29);
        }
        v26 = v28;
      }
      while (v28 != v25);
      v27 = *(_QWORD *)(a1 + 2344);
    }
    *(_QWORD *)(a1 + 2352) = v25;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 2368) + 40))(*(_QWORD *)(a1 + 2368), v27, *(_QWORD *)(a1 + 2360) - v27);
  }
  v31 = *(void **)(a1 + 2320);
  if (v31)
  {
    *(_QWORD *)(a1 + 2328) = v31;
    operator delete(v31);
  }
  *(_QWORD *)(a1 + 2192) = &off_1E42B59B0;
  *(_QWORD *)(a1 + 2208) = 3131955885;
  *(_QWORD *)(a1 + 2064) = &off_1E42B59B0;
  *(_QWORD *)(a1 + 2080) = 3131955885;
  *(_QWORD *)(a1 + 1936) = &off_1E42B59B0;
  *(_QWORD *)(a1 + 1952) = 3131955885;
  *(_QWORD *)(a1 + 1808) = &off_1E42B59B0;
  *(_QWORD *)(a1 + 1824) = 3131955885;
  *(_QWORD *)(a1 + 1680) = &off_1E42B59B0;
  *(_QWORD *)(a1 + 1696) = 3131955885;
  *(_QWORD *)(a1 + 1552) = &off_1E42B59B0;
  *(_QWORD *)(a1 + 1568) = 3131955885;
  *(_QWORD *)(a1 + 1424) = &off_1E42B59B0;
  *(_QWORD *)(a1 + 1440) = 3131955885;
  *(_QWORD *)(a1 + 1296) = &off_1E42B59B0;
  *(_QWORD *)(a1 + 1312) = 3131955885;
  *(_QWORD *)(a1 + 1168) = &off_1E42B59B0;
  *(_QWORD *)(a1 + 1184) = 3131955885;
  *(_QWORD *)(a1 + 1040) = &off_1E42B59B0;
  *(_QWORD *)(a1 + 1056) = 3131955885;
  *(_QWORD *)(a1 + 912) = &off_1E42B59B0;
  *(_QWORD *)(a1 + 928) = 3131955885;
  *(_QWORD *)(a1 + 784) = &off_1E42B59B0;
  *(_QWORD *)(a1 + 800) = 3131955885;
  *(_QWORD *)(a1 + 656) = &off_1E42B59B0;
  *(_QWORD *)(a1 + 672) = 3131955885;
  *(_QWORD *)(a1 + 528) = &off_1E42B59B0;
  *(_QWORD *)(a1 + 544) = 3131955885;
  *(_QWORD *)(a1 + 400) = &off_1E42B59B0;
  *(_QWORD *)(a1 + 416) = 3131955885;
  *(_QWORD *)(a1 + 272) = &off_1E42B59B0;
  *(_QWORD *)(a1 + 288) = 3131955885;
  *(_QWORD *)(a1 + 144) = &off_1E42B59B0;
  *(_QWORD *)(a1 + 160) = 3131955885;
  *(_QWORD *)(a1 + 16) = &off_1E42B59B0;
  *(_QWORD *)(a1 + 32) = 3131955885;
  return a1;
}

void md::Ribbons::RibbonBatch<md::Ribbons::RouteLineRibbonDescriptor>::~RibbonBatch(uint64_t a1)
{
  md::Ribbons::RibbonBatch<md::Ribbons::RouteLineRibbonDescriptor>::~RibbonBatch(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::ConstantDataTyped<ggl::RouteLineAlphaReset::FadeParams>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::RouteLineAlphaReset::FadeParams>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::RouteLineAlphaReset::FadeParams>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1E18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::RouteLineAlphaReset::FadeParams>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1E18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::RouteLineAlphaReset::FadeParams>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ggl::ConstantDataTyped<ggl::Ribbon::Style>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::Ribbon::Style>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Ribbon::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2710;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Ribbon::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2710;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Ribbon::Style>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ggl::ConstantDataTyped<ggl::RouteLineTraffic::Style>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::RouteLineTraffic::Style>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::RouteLineTraffic::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1A60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::RouteLineTraffic::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1A60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::RouteLineTraffic::Style>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void md::RouteLineBatch::~RouteLineBatch(md::RouteLineBatch *this)
{
  md::RouteLineBatch::~RouteLineBatch(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)this = &off_1E428FCA8;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 325);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *((_QWORD *)this + 322);
  *((_QWORD *)this + 322) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 321);
  *((_QWORD *)this + 321) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)this + 320);
  *((_QWORD *)this + 320) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *((_QWORD *)this + 319);
  *((_QWORD *)this + 319) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *((_QWORD *)this + 318);
  *((_QWORD *)this + 318) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *((_QWORD *)this + 317);
  *((_QWORD *)this + 317) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = *((_QWORD *)this + 316);
  *((_QWORD *)this + 316) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *((_QWORD *)this + 315);
  *((_QWORD *)this + 315) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = *((_QWORD *)this + 314);
  *((_QWORD *)this + 314) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *((_QWORD *)this + 313);
  *((_QWORD *)this + 313) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = *((_QWORD *)this + 312);
  *((_QWORD *)this + 312) = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = *((_QWORD *)this + 311);
  *((_QWORD *)this + 311) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = *((_QWORD *)this + 310);
  *((_QWORD *)this + 310) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *((_QWORD *)this + 309);
  *((_QWORD *)this + 309) = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v19 = *((_QWORD *)this + 308);
  *((_QWORD *)this + 308) = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  md::Ribbons::RibbonBatch<md::Ribbons::RouteLineRibbonDescriptor>::~RibbonBatch((uint64_t)this);
}

void md::RouteLineBatch::layout(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  float v5;
  uint64_t v6;
  float32x4_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  float32x4_t *v14;
  float32x4_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  NSObject *v21;
  void *v22;
  void *v23;
  int v24;
  char *v25;
  uint64_t v26;
  float32_t v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t *v40;
  unint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  float v46;
  uint64_t v47;
  unint64_t v48;
  _DWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  _DWORD *v52;
  unint64_t v53;
  _DWORD *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  unint64_t v58;
  _DWORD *v59;
  unint64_t v60;
  _DWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  unint64_t v64;
  _DWORD *v65;
  unint64_t v66;
  _DWORD *v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  float v74;
  unsigned int *v75;
  unsigned int *v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  uint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __n128 v100;
  uint64_t v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *p_shared_owners;
  unint64_t v105;
  int v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  __n128 v131;
  uint64_t v132;
  void *v133;
  float v134;
  float v135;
  float v136;
  float v137;
  uint64_t v138;
  double *v139;
  double v140;
  long double v141;
  long double v142;
  long double v143;
  double v144;
  long double v145;
  double v146;
  long double v147;
  long double v148;
  long double v149;
  int v150;
  __n128 v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  int v155;
  _BOOL4 v156;
  int v157;
  BOOL v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  int v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  int v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t *v171;
  int v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t *v176;
  int v177;
  unint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  uint64_t v181;
  unint64_t v182;
  void (***v183)(__n128);
  void (**v184)(__n128);
  float v185;
  uint64_t v186;
  unint64_t v187;
  char *v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  float32x4_t v196;
  unint64_t v197;
  unint64_t v198;
  unsigned int v199;
  float v200;
  uint64_t v202;
  char *v203;
  char *v204;
  uint64_t v205;
  _DWORD *v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  uint64_t v213;
  float v214;
  uint64_t v215;
  _QWORD *v216;
  unint64_t v217;
  uint64_t v218;
  float v219;
  uint64_t v220;
  unint64_t v221;
  _QWORD *v222;
  uint64_t v223;
  uint64_t v224;
  unint64_t *v225;
  unint64_t v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  std::__shared_weak_count *v230;
  uint64_t v231;
  unint64_t *v232;
  unint64_t v233;
  std::__shared_weak_count *v234;
  unint64_t *v235;
  unint64_t v236;
  unint64_t *v237;
  unint64_t v238;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  std::__shared_weak_count *v242;
  unint64_t *v243;
  unint64_t v244;
  unint64_t *v245;
  unint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  __n128 v250;
  char v251;
  unsigned __int8 v252;
  char v253;
  char v254;
  char v255;
  char v256;
  char v257;
  float32x4_t v258;
  float32x4_t v259;
  __int32 v260[4];
  float32x4_t v261;
  _DWORD v262[4];
  __int32 v263[4];
  __int32 v264[4];
  float32x4_t v265;
  __int32 v266[4];
  uint64_t v267;
  int v268[4];
  unsigned __int8 v269;
  char *v270;
  char *v271;
  uint64_t v272;
  unint64_t v273;
  float v274;
  int v275;
  float v276;
  float32_t v277;
  float v278;
  float32_t v279;
  float32_t v280;
  float v281;
  float32_t v282;
  uint64_t v283;
  std::__shared_weak_count *v284;
  uint64_t v285;
  std::__shared_weak_count *v286;
  uint64_t v287;
  std::__shared_weak_count *v288;
  __int8 v289[3];
  char v290;
  uint64_t v291;
  std::__shared_weak_count *v292;
  uint64_t v293;
  std::__shared_weak_count *v294;
  _BYTE *v295;
  std::__shared_weak_count *v296;
  float32x4_t v297;
  uint64_t v298;
  uint64_t *v299;
  char *v300;
  _BYTE buf[24];
  unint64_t v302;
  float v303;
  uint64_t v304;
  uint64_t v305;

  v305 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 304) + 248);
  if (v4)
    v5 = *(float *)(v4 + 16);
  else
    v5 = 1.0;
  md::RouteStyleContext::RouteStyleContext((uint64_t)&v251, a2, *(_QWORD *)(a1 + 2456), *(unsigned __int8 *)(a1 + 2609), v5);
  if (!v253)
  {
    if (!*(_BYTE *)(*(_QWORD *)(a1 + 8) + 316))
    {
      if (GEOGetVectorKitRouteLog_onceToken != -1)
        dispatch_once(&GEOGetVectorKitRouteLog_onceToken, &__block_literal_global_25_11794);
      v21 = (id)GEOGetVectorKitRouteLog_log;
      if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(*(id *)(a2 + 200), "uniqueRouteID");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v22, "UUIDString");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        v24 = *(_DWORD *)(a2 + 196);
        *(_DWORD *)buf = 138412546;
        *(_QWORD *)&buf[4] = v23;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v24;
        _os_log_impl(&dword_19F029000, v21, OS_LOG_TYPE_INFO, "RouteLineBatch::layout failed due to style locker fail. Route ID %@, route leg %d", buf, 0x12u);

      }
      md::RouteLineSection::dumpStyleAttributes(*(md::RouteLineSection **)(a1 + 2456));
      *(_BYTE *)(*(_QWORD *)(a1 + 8) + 316) = 1;
    }
    *(_BYTE *)(a1 + 136) = 0;
    *(_BYTE *)(a1 + 264) = 0;
    *(_BYTE *)(a1 + 392) = 0;
    *(_BYTE *)(a1 + 520) = 0;
    *(_BYTE *)(a1 + 648) = 0;
    *(_BYTE *)(a1 + 776) = 0;
    *(_BYTE *)(a1 + 904) = 0;
    *(_BYTE *)(a1 + 1032) = 0;
    *(_BYTE *)(a1 + 1160) = 0;
    *(_BYTE *)(a1 + 1288) = 0;
    *(_BYTE *)(a1 + 1416) = 0;
    *(_BYTE *)(a1 + 1544) = 0;
    *(_BYTE *)(a1 + 1672) = 0;
    *(_BYTE *)(a1 + 1800) = 0;
    *(_BYTE *)(a1 + 1928) = 0;
    *(_BYTE *)(a1 + 2056) = 0;
    *(_BYTE *)(a1 + 2184) = 0;
    *(_BYTE *)(a1 + 2312) = 0;
    *(_BYTE *)(a1 + 2448) = 0;
    v25 = v270;
    if (v270)
      goto LABEL_266;
    return;
  }
  if (!v251)
  {
    v26 = 0;
    v27 = *(float *)(*(_QWORD *)(a1 + 2456) + 88);
    *(float32_t *)&v287 = v27;
    v28 = *(unsigned __int8 *)(a1 + 2609);
    v29 = v252;
    v30 = 2;
    v31 = 4;
    v32 = 6;
    if (!*(_BYTE *)(a1 + 2609) && v252)
    {
      v26 = 1;
      v30 = 3;
      v31 = 5;
      v32 = 7;
    }
    if (v252)
      v33 = v28 != 0;
    else
      v33 = 1;
    *(_BYTE *)(a1 + 136) = v33;
    *(_BYTE *)(a1 + 392) = v33;
    *(_BYTE *)(a1 + 648) = v33;
    *(_BYTE *)(a1 + 904) = v33;
    if (v28)
      v34 = 0;
    else
      v34 = v29 != 0;
    *(_BYTE *)(a1 + 264) = v34;
    *(_BYTE *)(a1 + 520) = v34;
    *(_BYTE *)(a1 + 776) = v34;
    *(_BYTE *)(a1 + 1032) = v34;
    if (!v28)
    {
      *(_BYTE *)(a1 + 1544) = v29 == 0;
      *(_BYTE *)(a1 + 1672) = v29;
    }
    *(_BYTE *)(a1 + 1928) = 0;
    *(_BYTE *)(a1 + 1160) = 0;
    *(_BYTE *)(a1 + 1800) = 0;
    *(_BYTE *)(a1 + 2312) = 0;
    if (v254)
    {
      v35 = 0;
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      v297 = 0uLL;
      if (!v28)
        v35 = *(_QWORD *)(a1 + 2520);
      _setupRenderItems(&v258, (__int32 *)buf, &v261, (__int32 *)&v297, *(_QWORD *)(a1 + 2464), *(_QWORD *)(a1 + 2472), v35, a1 + 16 + (v26 << 7), v277, v278, *(float32_t *)(a2 + 124), v27, v279, v280, a1 + 16 + (v30 << 7), v28 != 0);
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      v297 = 0uLL;
      _setupRenderItems((float32x4_t *)buf, v263, &v297, v264, *(_QWORD *)(a1 + 2480), *(_QWORD *)(a1 + 2488), 0, a1 + 16 + (v31 << 7), v277, v278, *(float32_t *)(a2 + 124), *(float32_t *)&v287, v279, v280, a1 + 16 + (v32 << 7), *(_BYTE *)(a1 + 2609));
      goto LABEL_164;
    }
    v97 = 0;
    v98 = *(_QWORD *)(a1 + 2472);
    v249 = *(_QWORD *)(a1 + 2496);
    v248 = *(_QWORD *)(a1 + 2504);
    if (v256)
      v99 = 0;
    else
      v99 = *(_QWORD *)(a1 + 2464);
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    if (!v28)
      v97 = *(_QWORD *)(a1 + 2520);
    v247 = a1 + 16 + (v26 << 7);
    _setupRenderItems(&v258, v260, &v261, (__int32 *)buf, v99, v98, v97, v247, v277, v278, *(float32_t *)(a2 + 124), v27, v279, v280, a1 + 16 + (v30 << 7), v28 != 0);
    v101 = *(_QWORD *)(a1 + 2456);
    v102 = *(_QWORD *)(v101 + 304);
    v103 = *(std::__shared_weak_count **)(v101 + 312);
    if (v103)
    {
      p_shared_owners = (unint64_t *)&v103->__shared_owners_;
      do
        v105 = __ldxr(p_shared_owners);
      while (__stxr(v105 + 1, p_shared_owners));
      if (!v102)
      {
        do
          v108 = __ldaxr(p_shared_owners);
        while (__stlxr(v108 - 1, p_shared_owners));
        if (!v108)
        {
          ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
          std::__shared_weak_count::__release_weak(v103);
        }
LABEL_273:
        if (!v256)
          goto LABEL_323;
        v185 = *(float *)(a2 + 20) * v276;
        v186 = *(_QWORD *)(a1 + 2592);
        if (v186)
        {
          v187 = v273;
          v188 = v270;
          v189 = v271;
          v190 = v271 - v270;
          if (v271 == v270)
          {
            v194 = 0;
            v195 = 0;
            v192 = 0;
          }
          else
          {
            if (v190 < 0)
              goto LABEL_376;
            v191 = (*(uint64_t (**)(unint64_t, int64_t, uint64_t))(*(_QWORD *)v273 + 16))(v273, v271 - v270, 4);
            v192 = v191;
            v193 = 0;
            do
            {
              if (v191 + v193)
                *(_DWORD *)(v191 + v193) = *(_DWORD *)&v188[v193];
              v193 += 4;
            }
            while (&v188[v193] != v189);
            v194 = v191 + v193;
            v195 = v191 + 4 * (v190 >> 2);
          }
          if (*(unsigned __int16 *)(v186 + 46) == (int)(float)(v185 + 0.5)
            && (v196.i16[1] = HIWORD(v274), v274 == *(float *)(v186 + 32))
            && (v197 = (v194 - v192) >> 2, v197 == (uint64_t)(*(_QWORD *)(v186 + 8) - *(_QWORD *)v186) >> 2))
          {
            if (v194 == v192)
            {
              if (v194)
                (*(void (**)(unint64_t, uint64_t, uint64_t, float))(*(_QWORD *)v187 + 40))(v187, v194, v195 - v194, v274);
              goto LABEL_316;
            }
            v198 = 0;
            v199 = 1;
            v100.n128_u64[0] = 0x3400000034000000;
            do
            {
              v200 = vabds_f32(*(float *)(v192 + 4 * v198), *(float *)(*(_QWORD *)v186 + 4 * v198));
              v198 = v199++;
            }
            while (v200 <= 0.00000011921 && v197 > v198);
            (*(void (**)(unint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)v187 + 40))(v187, v192, v195 - v192, v100);
            v196.i16[1] = 13312;
            if (v200 <= 0.00000011921)
            {
LABEL_316:
              v213 = *(_QWORD *)(a1 + 2592);
              v196.i16[0] = *(_WORD *)(v213 + 40);
              *(float *)&v295 = (float)(*(float *)(a2 + 128) * (float)v196.u32[0]) / *(float *)(a2 + 20);
              if (*(double *)(*(_QWORD *)(a1 + 2456) + 232) / *(float *)(a2 + 152) >= *(float *)(v213 + 48))
              {
                v297.i64[0] = (uint64_t)&v295;
                v297.i64[1] = a1;
                v298 = a2;
                v299 = &v287;
                v300 = &v251;
                md::RouteLineBatch::layoutTwoPasses(md::RouteLayoutContext const&,md::RouteStyleContext const&)::$_0::operator()((uint64_t)&v297, v249, &v259, v260);
                *(_QWORD *)(v247 + 32) = v249;
                v214 = fabsf(v278);
                if (v214 <= (float)(v214 * 0.000011921) || v214 < 1.1755e-38)
                  *(_BYTE *)(a1 + (v30 << 7) + 136) = 0;
                if (*(_BYTE *)(a1 + 1928))
                {
                  md::RouteLineBatch::layoutTwoPasses(md::RouteLayoutContext const&,md::RouteStyleContext const&)::$_0::operator()((uint64_t)&v297, v248, &v265, v266);
                  *(_QWORD *)(a1 + 1840) = v248;
                }
              }
              else
              {
                *(_BYTE *)(a1 + 136) = 0;
                *(_BYTE *)(a1 + 264) = 0;
                *(_BYTE *)(a1 + 392) = 0;
                *(_BYTE *)(a1 + 520) = 0;
                *(_BYTE *)(a1 + 648) = 0;
                *(_BYTE *)(a1 + 776) = 0;
                *(_BYTE *)(a1 + 904) = 0;
                *(_BYTE *)(a1 + 1032) = 0;
                *(_BYTE *)(a1 + 1160) = 0;
                *(_BYTE *)(a1 + 1288) = 0;
                *(_BYTE *)(a1 + 1416) = 0;
                *(_BYTE *)(a1 + 1544) = 0;
                *(_BYTE *)(a1 + 1672) = 0;
                *(_BYTE *)(a1 + 1800) = 0;
                *(_BYTE *)(a1 + 1928) = 0;
                *(_BYTE *)(a1 + 2056) = 0;
                *(_BYTE *)(a1 + 2184) = 0;
                *(_BYTE *)(a1 + 2312) = 0;
                *(_BYTE *)(a1 + 2448) = 0;
              }
LABEL_323:
              *(_BYTE *)(a1 + 16 + (v31 << 7) + 120) = 0;
              *(_BYTE *)(a1 + 16 + (v32 << 7) + 120) = 0;
              if (*(_BYTE *)(a1 + 2609))
              {
                if (v256)
                {
                  *(_BYTE *)(a1 + 1416) = 0;
                }
                else
                {
                  v215 = *(_QWORD *)(*(_QWORD *)(a1 + 2512) + 64);
                  v216 = *(_QWORD **)(v215 + 32);
                  v217 = v216[1];
                  if (v217)
                    v218 = v216[9];
                  else
                    v218 = 0;
                  v219 = v281 + (float)(v276 * 0.5);
                  *(float *)(v218 + 16) = *(float *)(a2 + 128) * (float)(v219 + 2.0);
                  v220 = *(_QWORD *)(v215 + 48);
                  v221 = *(_QWORD *)(v220 + 8);
                  **(float **)(v220 + 72) = v219 / (float)(v219 + 2.0);
                  *(_BYTE *)(a1 + 1416) = 1;
                  if (*(_QWORD *)(v220 + 64) > v221)
                    v221 = *(_QWORD *)(v220 + 64);
                  *(_QWORD *)(v220 + 56) = 0;
                  *(_QWORD *)(v220 + 64) = v221;
                  if (v218 && v217)
                  {
                    if (v216[8] > v217)
                      v217 = v216[8];
                    v216[7] = 0;
                    v216[8] = v217;
                  }
                }
              }
              *(_BYTE *)(a1 + 2056) = 0;
              *(_BYTE *)(a1 + 2184) = 0;
              if (v257)
              {
                v222 = *(_QWORD **)(a1 + 2456);
                v223 = v222[40];
                v224 = v222[41];
                v297.i64[0] = v223;
                v297.i64[1] = v224;
                if (v224)
                {
                  v225 = (unint64_t *)(v224 + 8);
                  do
                    v226 = __ldxr(v225);
                  while (__stxr(v226 + 1, v225));
                }
                v227 = (std::__shared_weak_count *)v222[43];
                v295 = (_BYTE *)v222[42];
                v296 = v227;
                if (v227)
                {
                  v228 = (unint64_t *)&v227->__shared_owners_;
                  do
                    v229 = __ldxr(v228);
                  while (__stxr(v229 + 1, v228));
                }
                v231 = v222[44];
                v230 = (std::__shared_weak_count *)v222[45];
                v293 = v231;
                v294 = v230;
                if (v230)
                {
                  v232 = (unint64_t *)&v230->__shared_owners_;
                  do
                    v233 = __ldxr(v232);
                  while (__stxr(v233 + 1, v232));
                }
                v234 = (std::__shared_weak_count *)v222[47];
                v291 = v222[46];
                v292 = v234;
                if (v234)
                {
                  v235 = (unint64_t *)&v234->__shared_owners_;
                  do
                    v236 = __ldxr(v235);
                  while (__stxr(v236 + 1, v235));
                }
                if (v223)
                  setupTrafficRenderItem(a2, (uint64_t *)&v297, (uint64_t *)&v295, a1 + 1936, v277, v280, v279, *(float *)&v287);
                if (v231 && *(_BYTE *)(a2 + 144))
                  setupTrafficRenderItem(a2, &v293, &v291, a1 + 2064, v277, v280, v279, *(float *)&v287);
                if (v234)
                {
                  v237 = (unint64_t *)&v234->__shared_owners_;
                  do
                    v238 = __ldaxr(v237);
                  while (__stlxr(v238 - 1, v237));
                  if (!v238)
                  {
                    ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
                    std::__shared_weak_count::__release_weak(v234);
                  }
                }
                v239 = v294;
                if (v294)
                {
                  v240 = (unint64_t *)&v294->__shared_owners_;
                  do
                    v241 = __ldaxr(v240);
                  while (__stlxr(v241 - 1, v240));
                  if (!v241)
                  {
                    ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
                    std::__shared_weak_count::__release_weak(v239);
                  }
                }
                v242 = v296;
                if (v296)
                {
                  v243 = (unint64_t *)&v296->__shared_owners_;
                  do
                    v244 = __ldaxr(v243);
                  while (__stlxr(v244 - 1, v243));
                  if (!v244)
                  {
                    ((void (*)(std::__shared_weak_count *))v242->__on_zero_shared)(v242);
                    std::__shared_weak_count::__release_weak(v242);
                  }
                }
                v125 = (std::__shared_weak_count *)v297.i64[1];
                if (v297.i64[1])
                {
                  v245 = (unint64_t *)(v297.i64[1] + 8);
                  do
                    v246 = __ldaxr(v245);
                  while (__stlxr(v246 - 1, v245));
                  if (!v246)
                    goto LABEL_163;
                }
              }
              goto LABEL_164;
            }
          }
          else if (v192)
          {
            (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)v187 + 40))(v187, v192, v195 - v192);
          }
        }
        v202 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 304);
        memset(buf, 0, sizeof(buf));
        v302 = v273;
        v204 = v270;
        v203 = v271;
        v205 = v271 - v270;
        if (v271 == v270)
        {
LABEL_303:
          v303 = v274;
          md::DashTextureCache::textureForPattern(&v297, (float *)(v202 + 256), (float *)buf, 0, v185);
          v196 = v297;
          v297 = 0uLL;
          v207 = *(std::__shared_weak_count **)(a1 + 2600);
          *(float32x4_t *)(a1 + 2592) = v196;
          if (v207)
          {
            v208 = (unint64_t *)&v207->__shared_owners_;
            do
              v209 = __ldaxr(v208);
            while (__stlxr(v209 - 1, v208));
            if (!v209)
            {
              ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
              std::__shared_weak_count::__release_weak(v207);
            }
          }
          v210 = (std::__shared_weak_count *)v297.i64[1];
          if (v297.i64[1])
          {
            v211 = (unint64_t *)(v297.i64[1] + 8);
            do
              v212 = __ldaxr(v211);
            while (__stlxr(v212 - 1, v211));
            if (!v212)
            {
              ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
              std::__shared_weak_count::__release_weak(v210);
            }
          }
          if (*(_QWORD *)buf)
          {
            *(_QWORD *)&buf[8] = *(_QWORD *)buf;
            (*(void (**)(unint64_t, _QWORD, _QWORD))(*(_QWORD *)v302 + 40))(v302, *(_QWORD *)buf, *(_QWORD *)&buf[16] - *(_QWORD *)buf);
          }
          **(_QWORD **)(*(_QWORD *)(a1 + 2496) + 96) = *(_QWORD *)(*(_QWORD *)(a1 + 2592) + 64);
          **(_QWORD **)(*(_QWORD *)(a1 + 2504) + 96) = *(_QWORD *)(*(_QWORD *)(a1 + 2592) + 64);
          goto LABEL_316;
        }
        if ((v205 & 0x8000000000000000) == 0)
        {
          v206 = (_DWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v273 + 16))();
          *(_QWORD *)buf = v206;
          *(_QWORD *)&buf[16] = &v206[v205 >> 2];
          do
          {
            if (v206)
              *v206 = *(_DWORD *)v204;
            v204 += 4;
            ++v206;
          }
          while (v204 != v203);
          *(_QWORD *)&buf[8] = v206;
          goto LABEL_303;
        }
LABEL_376:
        abort();
      }
      v106 = *(unsigned __int8 *)(a2 + 144);
      do
        v107 = __ldaxr(p_shared_owners);
      while (__stlxr(v107 - 1, p_shared_owners));
      if (!v107)
      {
        ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
        std::__shared_weak_count::__release_weak(v103);
      }
    }
    else
    {
      if (!v102)
        goto LABEL_273;
      v106 = *(unsigned __int8 *)(a2 + 144);
    }
    if (v106 && v255)
    {
      *(_BYTE *)(a1 + 1928) = 1;
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      v297 = 0uLL;
      _setupRenderItems(&v265, v266, (float32x4_t *)buf, (__int32 *)&v297, *(_QWORD *)(a1 + 2528), 0, 0, a1 + 1808, v282, 0.0, *(float32_t *)(a2 + 124), *(float32_t *)&v287, v279, v280, 0, *(_BYTE *)(a1 + 2609));
    }
    goto LABEL_273;
  }
  *(_BYTE *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 392) = 0;
  *(_BYTE *)(a1 + 648) = 0;
  *(_BYTE *)(a1 + 904) = 0;
  *(_BYTE *)(a1 + 1928) = 0;
  *(_BYTE *)(a1 + 2056) = 0;
  *(_BYTE *)(a1 + 2184) = 0;
  *(_BYTE *)(a1 + 264) = 0;
  *(_BYTE *)(a1 + 520) = 0;
  *(_BYTE *)(a1 + 776) = 0;
  *(_BYTE *)(a1 + 1032) = 0;
  *(_BYTE *)(a1 + 1160) = 1;
  *(_BYTE *)(a1 + 1800) = 1;
  *(_BYTE *)(a1 + 2312) = 1;
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 304);
  v289[0] = *(_BYTE *)(v6 + 296);
  v289[1] = *(_BYTE *)(a2 + 195);
  v289[2] = *(_BYTE *)(a2 + 194);
  v290 = 0;
  md::SinglePassRoutePipelineStateManager::pipelineStateForFunctionConstants((std::__shared_weak_count **)&v297, *(_QWORD *)(v6 + 208), v289);
  ggl::Flyover::FlyoverPipelineSetup::setState(*(ggl::PipelineSetup **)(a1 + 2560), v297.i64[0], (std::__shared_weak_count *)v297.i64[1]);
  ggl::Flyover::FlyoverPipelineSetup::setState(*(ggl::PipelineSetup **)(a1 + 2568), v297.i64[0], (std::__shared_weak_count *)v297.i64[1]);
  v290 = 1;
  md::SinglePassRoutePipelineStateManager::pipelineStateForFunctionConstants((std::__shared_weak_count **)buf, *(_QWORD *)(v6 + 208), v289);
  v7 = *(float32x4_t *)buf;
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  v8 = (std::__shared_weak_count *)v297.i64[1];
  v297 = v7;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v12 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = *(float32x4_t **)(a1 + 2576);
  v15 = v297;
  if (v297.i64[1])
  {
    v16 = (unint64_t *)(v297.i64[1] + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  if (!v15.i64[0] || **(_QWORD **)(v15.i64[0] + 40) != v14->i64[1])
  {
    v18 = (std::__shared_weak_count *)v14[1].i64[1];
    v14[1].i64[0] = 0;
    v14[1].i64[1] = 0;
    if (!v18)
      goto LABEL_60;
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    goto LABEL_58;
  }
  v36 = v14[1].i64[0];
  if (v36 && v36 != v15.i64[0])
    ggl::PipelineSetup::resetData((uint64_t)v14);
  if (v15.i64[1])
  {
    v37 = (unint64_t *)(v15.i64[1] + 8);
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
  }
  v18 = (std::__shared_weak_count *)v14[1].i64[1];
  v14[1] = v15;
  if (v18)
  {
    v39 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(v39);
    while (__stlxr(v20 - 1, v39));
LABEL_58:
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
LABEL_60:
  if (v15.i64[1])
  {
    v40 = (unint64_t *)(v15.i64[1] + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v15.i64[1] + 16))(v15.i64[1]);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v15.i64[1]);
    }
  }
  v42 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 2560) + 64) + 64);
  v43 = v42[1];
  v44 = v42[9];
  *(_DWORD *)v44 = *(_DWORD *)(a1 + 2584);
  v45 = v42[8];
  if (v45 <= v43)
    v45 = v43;
  v42[7] = 0;
  v46 = *(double *)(*(_QWORD *)(a1 + 2456) + 232);
  *(float *)(v44 + 4) = v46;
  if (v45 > v43)
    v43 = v45;
  v42[8] = v43;
  v47 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 288);
  if ((*(_BYTE *)(v47 + 16) & 2) == 0)
  {
    v48 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
    if (v48 != -1)
    {
      *(_QWORD *)buf = &v293;
      v295 = buf;
      std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v295, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
    }
  }
  v49 = *(_DWORD **)(v47 + 72);
  v50 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 2560) + 64) + 48);
  v51 = v50[1];
  v52 = (_DWORD *)v50[9];
  *v52 = *v49;
  v52[1] = v49[1];
  v52[2] = v49[2];
  v52[3] = v49[3];
  v52[4] = v49[4];
  v52[5] = v49[5];
  v52[6] = v49[6];
  v52[7] = v49[7];
  v52[8] = v49[8];
  v52[9] = v49[9];
  v52[10] = v49[10];
  v52[11] = v49[11];
  v52[12] = v49[12];
  v52[13] = v49[13];
  v52[14] = v49[14];
  v52[15] = v49[15];
  v53 = v50[8];
  v54 = (_DWORD *)v50[9];
  if (v53 <= v51)
    v53 = v51;
  v50[7] = 0;
  v50[8] = v53;
  v54[16] = v49[16];
  v54[17] = v49[17];
  v54[18] = v49[18];
  v54[19] = v49[19];
  if (v53 > v51)
    v51 = v53;
  v50[8] = v51;
  v55 = *(_QWORD *)(a1 + 2568);
  v56 = *(_QWORD *)(v55 + 64);
  v57 = *(_QWORD **)(v56 + 48);
  v58 = v57[1];
  v59 = (_DWORD *)v57[9];
  *v59 = *v49;
  v59[1] = v49[1];
  v59[2] = v49[2];
  v59[3] = v49[3];
  v59[4] = v49[4];
  v59[5] = v49[5];
  v59[6] = v49[6];
  v59[7] = v49[7];
  v59[8] = v49[8];
  v59[9] = v49[9];
  v59[10] = v49[10];
  v59[11] = v49[11];
  v59[12] = v49[12];
  v59[13] = v49[13];
  v59[14] = v49[14];
  v59[15] = v49[15];
  v60 = v57[8];
  v61 = (_DWORD *)v57[9];
  if (v60 <= v58)
    v60 = v58;
  v57[7] = 0;
  v57[8] = v60;
  v61[16] = v49[16];
  v61[17] = v49[17];
  v61[18] = v49[18];
  v61[19] = v49[19];
  if (v60 > v58)
    v58 = v60;
  v57[8] = v58;
  v62 = *(_QWORD *)(a1 + 2576);
  v63 = *(_QWORD **)(*(_QWORD *)(v62 + 64) + 48);
  v64 = v63[1];
  v65 = (_DWORD *)v63[9];
  *v65 = *v49;
  v65[1] = v49[1];
  v65[2] = v49[2];
  v65[3] = v49[3];
  v65[4] = v49[4];
  v65[5] = v49[5];
  v65[6] = v49[6];
  v65[7] = v49[7];
  v65[8] = v49[8];
  v65[9] = v49[9];
  v65[10] = v49[10];
  v65[11] = v49[11];
  v65[12] = v49[12];
  v65[13] = v49[13];
  v65[14] = v49[14];
  v65[15] = v49[15];
  v66 = v63[8];
  v67 = (_DWORD *)v63[9];
  if (v66 <= v64)
    v66 = v64;
  v63[7] = 0;
  v63[8] = v66;
  v67[16] = v49[16];
  v67[17] = v49[17];
  v67[18] = v49[18];
  v67[19] = v49[19];
  if (v66 <= v64)
    v68 = v64;
  else
    v68 = v66;
  v63[8] = v68;
  v69 = *(_QWORD *)(v56 + 64);
  v70 = *(_QWORD *)(v69 + 8);
  **(_DWORD **)(v69 + 72) = *(_DWORD *)(a1 + 2584);
  v71 = *(_QWORD *)(v69 + 64);
  v72 = *(_QWORD *)(v69 + 72);
  if (v71 <= v70)
    v71 = v70;
  *(_QWORD *)(v69 + 56) = 0;
  *(_QWORD *)(v69 + 64) = v71;
  v73 = *(_QWORD *)(a1 + 2456);
  v74 = *(double *)(v73 + 232);
  *(float *)(v72 + 4) = v74;
  if (v71 > v70)
    v70 = v71;
  *(_QWORD *)(v69 + 64) = v70;
  *(_QWORD *)(a1 + 1072) = *(_QWORD *)(a1 + 2560);
  *(_QWORD *)(a1 + 1712) = v55;
  *(_QWORD *)(a1 + 2224) = v62;
  v75 = (unsigned int *)operator new(8uLL);
  v76 = v75;
  *(_QWORD *)v75 = 0x1100000008;
  v77 = *(std::__shared_weak_count **)(v73 + 328);
  v295 = *(_BYTE **)(v73 + 320);
  v296 = v77;
  if (v77)
  {
    v78 = (unint64_t *)&v77->__shared_owners_;
    do
      v79 = __ldxr(v78);
    while (__stxr(v79 + 1, v78));
  }
  v80 = *(std::__shared_weak_count **)(v73 + 344);
  v293 = *(_QWORD *)(v73 + 336);
  v294 = v80;
  if (v80)
  {
    v81 = (unint64_t *)&v80->__shared_owners_;
    do
      v82 = __ldxr(v81);
    while (__stxr(v82 + 1, v81));
  }
  v84 = *(_QWORD *)(v73 + 352);
  v83 = *(std::__shared_weak_count **)(v73 + 360);
  v291 = v84;
  v292 = v83;
  if (v83)
  {
    v85 = (unint64_t *)&v83->__shared_owners_;
    do
      v86 = __ldxr(v85);
    while (__stxr(v86 + 1, v85));
  }
  v87 = *(_QWORD *)(v73 + 368);
  v88 = *(std::__shared_weak_count **)(v73 + 376);
  v287 = v87;
  v288 = v88;
  if (v88)
  {
    v89 = (unint64_t *)&v88->__shared_owners_;
    do
      v90 = __ldxr(v89);
    while (__stxr(v90 + 1, v89));
  }
  _setupSinglePassRenderItem(a2, (uint64_t *)&v295, &v293, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + ((unint64_t)*v75 << 7) + 48) + 64) + 32), v269, (uint64_t)&v261, v262, *(unsigned __int8 *)(*(_QWORD *)(a1 + 2456) + 261), v277, v278, v280, v279, *(float *)(a2 + 124), *(float *)(a2 + 124), *(float *)(*(_QWORD *)(a1 + 2456) + 88), a1);
  _setupSinglePassRenderItem(a2, (uint64_t *)&v295, &v293, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + ((unint64_t)v76[1] << 7) + 48) + 64) + 32), v269, (uint64_t)&v261, v262, *(unsigned __int8 *)(*(_QWORD *)(a1 + 2456) + 261), v277, v278, v280, v279, *(float *)(a2 + 124), *(float *)(a2 + 124), *(float *)(*(_QWORD *)(a1 + 2456) + 88), a1);
  if (v84 && *(_BYTE *)(a2 + 144))
  {
    v91 = *(_QWORD *)(a1 + 2456);
    v92 = *(_QWORD *)(v91 + 304);
    v93 = *(std::__shared_weak_count **)(v91 + 312);
    if (v93)
    {
      v94 = (unint64_t *)&v93->__shared_owners_;
      do
        v95 = __ldxr(v94);
      while (__stxr(v95 + 1, v94));
      v286 = v93;
      v283 = 0;
      v284 = 0;
      *(_QWORD *)&buf[8] = v93;
      do
        v96 = __ldxr(v94);
      while (__stxr(v96 + 1, v94));
    }
    else
    {
      v286 = 0;
      v283 = 0;
      v284 = 0;
      *(_QWORD *)&buf[8] = 0;
    }
    v285 = v92;
    *(_QWORD *)&buf[16] = 0;
    v302 = 0;
    *(_QWORD *)buf = v92;
    LOBYTE(v303) = 0;
    if (v92)
      LOBYTE(v92) = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v92 + 48))(v92, &buf[16]);
    LOBYTE(v303) = v92;
    if (v93)
    {
      v109 = (unint64_t *)&v93->__shared_owners_;
      do
        v110 = __ldaxr(v109);
      while (__stlxr(v110 - 1, v109));
      if (!v110)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
    v111 = v284;
    if (v284)
    {
      v112 = (unint64_t *)&v284->__shared_owners_;
      do
        v113 = __ldaxr(v112);
      while (__stlxr(v113 - 1, v112));
      if (!v113)
      {
        ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
        std::__shared_weak_count::__release_weak(v111);
      }
    }
    _setupSinglePassRenderItem(a2, &v291, &v287, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1712) + 64) + 32), v269, (uint64_t)&v267, v268, *(unsigned __int8 *)(*(_QWORD *)(a1 + 2456) + 261), v277, v278, v280, v279, *(float *)(a2 + 124), *(float *)(a2 + 124), *(float *)(*(_QWORD *)(a1 + 2456) + 88), a1);
    gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)buf);
    v88 = v288;
  }
  if (v88)
  {
    v114 = (unint64_t *)&v88->__shared_owners_;
    do
      v115 = __ldaxr(v114);
    while (__stlxr(v115 - 1, v114));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  v116 = v292;
  if (v292)
  {
    v117 = (unint64_t *)&v292->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  v119 = v294;
  if (v294)
  {
    v120 = (unint64_t *)&v294->__shared_owners_;
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
  v122 = v296;
  if (v296)
  {
    v123 = (unint64_t *)&v296->__shared_owners_;
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
  operator delete(v76);
  v125 = (std::__shared_weak_count *)v297.i64[1];
  if (v297.i64[1])
  {
    v126 = (unint64_t *)(v297.i64[1] + 8);
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
    if (!v127)
    {
LABEL_163:
      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
      std::__shared_weak_count::__release_weak(v125);
    }
  }
LABEL_164:
  v128 = *(_QWORD *)(a1 + 2552);
  v129 = *(_QWORD *)(*(_QWORD *)(v128 + 64) + 32);
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  v130 = *(_QWORD *)(v129 + 8);
  v131.n128_u64[0] = 0;
  v131.n128_u64[1] = v129;
  if (v130)
    v132 = *(_QWORD *)(v129 + 72);
  else
    v132 = 0;
  v250 = v131;
  *(__n128 *)buf = v131;
  *(_QWORD *)&buf[16] = 0;
  v302 = v130;
  v304 = v132;
  LOWORD(v303) = 1;
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v133 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v133, "routeLineMaskWidth");
  v135 = v134;
  objc_msgSend(v133, "routeLineMaskAlphaFalloff");
  v137 = v136;
  v138 = *(_QWORD *)(a1 + 2456);
  v139 = *(double **)(a2 + 160);
  if (v139)
  {
    v140 = *v139;
    v137 = v139[1];
  }
  else
  {
    v140 = v135;
  }
  v141 = exp((*(double *)(v138 + 176) + (*(double *)(v138 + 200) - *(double *)(v138 + 176)) * 0.5) * 6.28318531+ -3.14159265);
  v142 = atan(v141) * 114.591559 + -90.0;
  v143 = tan(v142 * 0.00872664626 + 0.789761487);
  v144 = log(v143);
  v145 = tan(v142 * 0.00872664626 + 0.78103484);
  v146 = fabs((v144 - log(v145)) * 0.159154943);
  v147 = cos(v142 * 0.034906585) * -559.82 + 111132.92;
  v148 = v147 + cos(v142 * 0.0698131701) * 1.175;
  v149 = cos(v142 * 0.104719755);
  v150 = *(_DWORD *)(v138 + 88);
  *(float *)&v149 = v140 * 0.5 * *(float *)(a2 + 128) * v146 / ((v148 + v149 * -0.0023) * *(float *)(a2 + 180));
  *(float *)(v132 + 100) = v137;
  *(_DWORD *)v132 = LODWORD(v149);
  *(_DWORD *)(v132 + 32) = v150;
  *(_DWORD *)(v132 + 96) = 0;
  *(float32_t *)(v132 + 92) = v280;
  *(_QWORD *)(a1 + 1200) = v128;
  *(_BYTE *)(a1 + 1288) = 1;

  v151 = v250;
  if (v130)
  {
    if (v250.n128_u64[0] && *(_BYTE *)(v250.n128_u64[1] + 17) != 2)
      (*(void (**)(__n128))(*(_QWORD *)v250.n128_u64[0] + 64))(v250);
    v152 = *(_QWORD *)(v250.n128_u64[1] + 64);
    if (v152 <= v130)
      v152 = v130;
    *(_QWORD *)(v250.n128_u64[1] + 56) = 0;
    *(_QWORD *)(v250.n128_u64[1] + 64) = v152;
  }
  v153 = *(_QWORD *)(a1 + 2456);
  v154 = (*(_QWORD *)(v153 + 240) + *(_QWORD *)(a2 + 136)) | (v275 << 18);
  v155 = *(_DWORD *)(a2 + 148);
  v156 = v155 == 1;
  v157 = *(_DWORD *)(v153 + 216);
  if (v157 != 1)
    v156 = 0;
  v158 = v157 != 2 || v155 != 1;
  if (v157 == 2)
    v159 = v154 | 0x28000;
  else
    v159 = v154 | 0x8000;
  if (v157 == 2)
    v160 = v154 | 0x20000;
  else
    v160 = (*(_QWORD *)(v153 + 240) + *(_QWORD *)(a2 + 136)) | (v275 << 18);
  v161 = *(unsigned __int8 *)(a2 + 57);
  v162 = v161 + 2;
  if (v155 == 1)
  {
    if (v157 == 2)
    {
      if (v158)
      {
        v170 = 0;
        v171 = (uint64_t *)(a1 + 64);
        do
        {
          v174 = v154;
          v172 = v161;
          v173 = v154 | 0x8000;
          switch((int)v170)
          {
            case 0:
            case 1:
            case 14:
              v172 = v161 + 2;
              v173 = v154 | 0x28000;
              goto LABEL_229;
            case 2:
            case 3:
              v172 = v161;
              v173 = v160;
              goto LABEL_229;
            case 4:
            case 5:
              v172 = *(unsigned __int8 *)(a2 + 57) + v156;
              v173 = v160;
              goto LABEL_229;
            case 6:
            case 7:
              v172 = v161;
              v173 = v159;
              goto LABEL_229;
            case 8:
              v172 = v161;
              v173 = v154 | 0x8000;
              v174 = v154 | 0x2000;
              if (!*(_BYTE *)(a1 + 2609))
                goto LABEL_229;
              break;
            case 9:
            case 11:
            case 12:
              v172 = v161;
              v173 = v154;
              goto LABEL_229;
            case 10:
              v172 = v161;
              v173 = v154 | 0xFFFFFFFF80000000;
              goto LABEL_229;
            case 13:
              v172 = v161;
              v173 = v154 | 0x8000;
              v174 = v154 | 0x4000;
              if (!*(_BYTE *)(a1 + 2609))
                goto LABEL_229;
              break;
            case 15:
            case 16:
              v172 = v161;
              v173 = v154 | 0x40000000;
              goto LABEL_229;
            case 17:
LABEL_229:
              *((_DWORD *)v171 - 2) = v172;
              v174 = v173;
              break;
            default:
              break;
          }
          *v171 = v174;
          v171 += 16;
          ++v170;
        }
        while (v170 != 18);
      }
      else
      {
        v175 = 0;
        v176 = (uint64_t *)(a1 + 64);
        do
        {
          v179 = v154;
          v177 = v161 + 2;
          v178 = v154 | 0x28000;
          switch((int)v175)
          {
            case 0:
            case 1:
            case 14:
              goto LABEL_244;
            case 2:
            case 3:
              v177 = v161;
              v178 = v160;
              goto LABEL_244;
            case 4:
            case 5:
              v177 = *(unsigned __int8 *)(a2 + 57) + v156;
              v178 = v160;
              goto LABEL_244;
            case 6:
            case 7:
              v177 = v161;
              v178 = v159;
              goto LABEL_244;
            case 8:
              v177 = v161;
              v178 = v154 | 0x8000;
              v179 = v154 | 0x2000;
              if (!*(_BYTE *)(a1 + 2609))
                goto LABEL_244;
              break;
            case 9:
            case 11:
            case 12:
              v177 = v161;
              v178 = v154;
              goto LABEL_244;
            case 10:
              v177 = v161;
              v178 = v154 | 0xFFFFFFFF80000000;
              goto LABEL_244;
            case 13:
              v177 = v161;
              v178 = v154 | 0x8000;
              v179 = v154 | 0x4000;
              if (!*(_BYTE *)(a1 + 2609))
                goto LABEL_244;
              break;
            case 15:
            case 16:
              v177 = v161 + 2;
              v178 = v154 | 0x40000000;
              goto LABEL_244;
            case 17:
              v177 = v161;
              v178 = v154 | 0x8000;
LABEL_244:
              *((_DWORD *)v176 - 2) = v177;
              v179 = v178;
              break;
            default:
              break;
          }
          *v176 = v179;
          v176 += 16;
          ++v175;
        }
        while (v175 != 18);
      }
    }
    else
    {
      v166 = 0;
      if (v157 == 1)
        v167 = v161 + 1;
      else
        v167 = *(unsigned __int8 *)(a2 + 57);
      v168 = a1 + 56;
      do
      {
        v169 = v166;
        switch((int)v166)
        {
          case 0:
          case 1:
          case 14:
            *(_DWORD *)v168 = v167;
            goto LABEL_224;
          case 2:
          case 3:
            *(_DWORD *)v168 = v161;
            v169 = v160;
            break;
          case 4:
          case 5:
            *(_DWORD *)v168 = *(unsigned __int8 *)(a2 + 57) + v156;
            v169 = v160;
            break;
          case 6:
          case 7:
            *(_DWORD *)v168 = v161;
            v169 = v159;
            break;
          case 8:
            v169 = v154 | 0x2000;
            if (!*(_BYTE *)(a1 + 2609))
              goto LABEL_223;
            break;
          case 9:
          case 11:
          case 12:
            *(_DWORD *)v168 = v161;
            v169 = v154;
            break;
          case 10:
            *(_DWORD *)v168 = v161;
            v169 = v154 | 0xFFFFFFFF80000000;
            break;
          case 13:
            v169 = v154 | 0x4000;
            if (!*(_BYTE *)(a1 + 2609))
              goto LABEL_223;
            break;
          case 15:
          case 16:
            if (v158)
              *(_DWORD *)v168 = v161;
            else
              *(_DWORD *)v168 = v162;
            v169 = v154 | 0x40000000;
            break;
          case 17:
LABEL_223:
            *(_DWORD *)v168 = v161;
LABEL_224:
            v169 = v154 | 0x8000;
            break;
          default:
            break;
        }
        *(_QWORD *)(v168 + 8) = v169;
        ++v166;
        v168 += 128;
      }
      while (v166 != 18);
    }
  }
  else
  {
    v163 = 0;
    v164 = a1 + 56;
    do
    {
      v165 = v163;
      switch((int)v163)
      {
        case 0:
        case 1:
        case 6:
        case 7:
        case 14:
        case 17:
          goto LABEL_190;
        case 2:
        case 3:
        case 9:
        case 11:
        case 12:
          *(_DWORD *)v164 = v161;
          v165 = v154;
          break;
        case 4:
        case 5:
          *(_DWORD *)v164 = *(unsigned __int8 *)(a2 + 57) + v156;
          v165 = v154;
          break;
        case 8:
          v165 = v154 | 0x2000;
          if (!*(_BYTE *)(a1 + 2609))
            goto LABEL_190;
          break;
        case 10:
          *(_DWORD *)v164 = v161;
          v165 = v154 | 0xFFFFFFFF80000000;
          break;
        case 13:
          v165 = v154 | 0x4000;
          if (!*(_BYTE *)(a1 + 2609))
          {
LABEL_190:
            *(_DWORD *)v164 = v161;
            v165 = v154 | 0x8000;
          }
          break;
        case 15:
        case 16:
          if (v158)
            *(_DWORD *)v164 = v161;
          else
            *(_DWORD *)v164 = v162;
          v165 = v154 | 0x40000000;
          break;
        default:
          break;
      }
      *(_QWORD *)(v164 + 8) = v165;
      ++v163;
      v164 += 128;
    }
    while (v163 != 18);
  }
  v180 = *(_QWORD **)(a1 + 2400);
  if (v180)
  {
    do
    {
      if (v180[1])
      {
        v182 = 0;
        v183 = (void (***)(__n128))(v180 + 2);
        do
        {
          v184 = *v183;
          v183 += 15;
          (*v184)(v151);
          ++v182;
        }
        while (v182 < v180[1]);
      }
      v180[1] = 0;
      v180 = (_QWORD *)*v180;
    }
    while (v180);
    v181 = *(_QWORD *)(a1 + 2400);
  }
  else
  {
    v181 = 0;
  }
  *(_QWORD *)(a1 + 2408) = v181;
  v25 = v270;
  if (v270)
  {
LABEL_266:
    v271 = v25;
    (*(void (**)(unint64_t, char *, uint64_t))(*(_QWORD *)v273 + 40))(v273, v25, v272 - (_QWORD)v25);
  }
}

void sub_19FD38C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,char a61,uint64_t a62,char a63)
{
  uint64_t v63;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a59);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a61);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a63);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v63 - 256);
  if (a42)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a45 + 40))(a45, a42, a44 - a42);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t md::Ribbons::RibbonBatch<md::Ribbons::RouteStyledOverlayRibbonDescriptor>::~RibbonBatch(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  malloc_zone_t *zone;
  void (***v11)(_QWORD, uint64_t);
  void (***v12)(_QWORD, uint64_t);
  unsigned __int8 v13;
  uint64_t v14;
  geo::read_write_lock *v15;
  const char *v16;
  _QWORD *v17;
  unint64_t v18;
  void (***v19)(void);
  void (**v20)(void);
  _QWORD **v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  _QWORD *v33;

  *(_QWORD *)a1 = &off_1E42AF228;
  v2 = *(_QWORD **)(a1 + 248);
  if (v2)
  {
    v3 = *(_QWORD **)(a1 + 256);
    v4 = *(void **)(a1 + 248);
    if (v3 != v2)
    {
      do
      {
        v7 = *--v3;
        v6 = v7;
        *v3 = 0;
        if (v7)
        {
          v8 = *(_QWORD **)(v6 + 56);
          if (v8)
          {
            v9 = *(_QWORD **)(v6 + 64);
            v5 = *(_QWORD *)(v6 + 56);
            if (v9 != v8)
            {
              do
              {
                v12 = (void (***)(_QWORD, uint64_t))*--v9;
                v11 = v12;
                *v9 = 0;
                if (v12)
                {
                  (**v11)(v11, v5);
                  {
                    v33 = v2;
                    v14 = operator new();
                    *(_QWORD *)(v14 + 16) = 0x5ED09DD50000000FLL;
                    *(_QWORD *)(v14 + 24) = "VectorKitLabels";
                    *(_OWORD *)(v14 + 32) = xmmword_19FFB2E80;
                    *(_QWORD *)v14 = &off_1E42B5668;
                    *(_QWORD *)(v14 + 8) = "VectorKitLabels";
                    *(_OWORD *)(v14 + 72) = 0u;
                    *(_OWORD *)(v14 + 88) = 0u;
                    *(_OWORD *)(v14 + 104) = 0u;
                    *(_OWORD *)(v14 + 120) = 0u;
                    *(_OWORD *)(v14 + 136) = 0u;
                    *(_OWORD *)(v14 + 152) = 0u;
                    *(_OWORD *)(v14 + 168) = 0u;
                    *(_OWORD *)(v14 + 184) = 0u;
                    *(_OWORD *)(v14 + 200) = 0u;
                    *(_OWORD *)(v14 + 216) = 0u;
                    *(_OWORD *)(v14 + 232) = 0u;
                    *(_QWORD *)(v14 + 248) = 0;
                    *(_OWORD *)(v14 + 56) = 0u;
                    v15 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v14 + 56), 0);
                    if ((_DWORD)v15)
                      geo::read_write_lock::logFailure(v15, (uint64_t)"initialization", v16);
                    zone = malloc_create_zone(0, 0);
                    *(_QWORD *)(v14 + 48) = zone;
                    malloc_set_zone_name(zone, "VectorKitLabels");
                    *(_QWORD *)(v14 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                    mdm::Allocator::instance(void)::alloc = v14;
                    v2 = v33;
                  }
                  (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v11, 128);
                }
              }
              while (v9 != v8);
              v5 = *(_QWORD *)(v6 + 56);
            }
            *(_QWORD *)(v6 + 64) = v8;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v6 + 80) + 40))(*(_QWORD *)(v6 + 80), v5, *(_QWORD *)(v6 + 72) - v5);
          }
          MEMORY[0x1A1AF4E00](v6, 0x1020C4010FC18DELL);
        }
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 248);
    }
    *(_QWORD *)(a1 + 256) = v2;
    operator delete(v4);
  }
  v17 = *(_QWORD **)(a1 + 224);
  do
  {
    if (v17[1])
    {
      v18 = 0;
      v19 = (void (***)(void))(v17 + 2);
      do
      {
        v20 = *v19;
        v19 += 15;
        (*v20)();
        ++v18;
      }
      while (v18 < v17[1]);
    }
    v17[1] = 0;
    v17 = (_QWORD *)*v17;
  }
  while (v17);
  v21 = *(_QWORD ***)(a1 + 224);
  *(_QWORD *)(a1 + 232) = v21;
  v22 = *v21;
  *v21 = 0;
  if (v22)
  {
    do
    {
      v23 = (_QWORD *)*v22;
      free(v22);
      v22 = v23;
    }
    while (v23);
    v21 = *(_QWORD ***)(a1 + 224);
  }
  free(v21);
  v24 = *(void **)(a1 + 200);
  if (v24)
  {
    *(_QWORD *)(a1 + 208) = v24;
    operator delete(v24);
  }
  v25 = *(_QWORD *)(a1 + 168);
  if (v25)
  {
    v26 = *(_QWORD *)(a1 + 176);
    v27 = *(_QWORD *)(a1 + 168);
    if (v26 != v25)
    {
      v28 = *(_QWORD *)(a1 + 176);
      do
      {
        v30 = *(void **)(v28 - 24);
        v28 -= 24;
        v29 = v30;
        if (v30)
        {
          *(_QWORD *)(v26 - 16) = v29;
          operator delete(v29);
        }
        v26 = v28;
      }
      while (v28 != v25);
      v27 = *(_QWORD *)(a1 + 168);
    }
    *(_QWORD *)(a1 + 176) = v25;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 192) + 40))(*(_QWORD *)(a1 + 192), v27, *(_QWORD *)(a1 + 184) - v27);
  }
  v31 = *(void **)(a1 + 144);
  if (v31)
  {
    *(_QWORD *)(a1 + 152) = v31;
    operator delete(v31);
  }
  *(_QWORD *)(a1 + 16) = &off_1E42B59B0;
  *(_QWORD *)(a1 + 32) = 3131955885;
  return a1;
}

void md::Ribbons::RibbonBatch<md::Ribbons::RouteStyledOverlayRibbonDescriptor>::~RibbonBatch(uint64_t a1)
{
  md::Ribbons::RibbonBatch<md::Ribbons::RouteStyledOverlayRibbonDescriptor>::~RibbonBatch(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::ConstantDataTyped<ggl::TexturedAnimatedRibbon::Style>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::TexturedAnimatedRibbon::Style>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TexturedAnimatedRibbon::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1FA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TexturedAnimatedRibbon::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1FA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TexturedAnimatedRibbon::Style>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void md::RouteStyledOverlayBatch::~RouteStyledOverlayBatch(md::RouteStyledOverlayBatch *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  *(_QWORD *)this = &off_1E429F478;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 43);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *(_QWORD *)this = &off_1E428C7C0;
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 39);
  if (!v6)
    goto LABEL_12;
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    v9 = (std::__shared_weak_count *)*((_QWORD *)this + 37);
    if (!v9)
      goto LABEL_18;
  }
  else
  {
LABEL_12:
    v9 = (std::__shared_weak_count *)*((_QWORD *)this + 37);
    if (!v9)
      goto LABEL_18;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
LABEL_18:
  md::Ribbons::RibbonBatch<md::Ribbons::RouteStyledOverlayRibbonDescriptor>::~RibbonBatch((uint64_t)this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  *(_QWORD *)this = &off_1E429F478;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 43);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *(_QWORD *)this = &off_1E428C7C0;
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 39);
  if (!v6)
    goto LABEL_12;
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    v9 = (std::__shared_weak_count *)*((_QWORD *)this + 37);
    if (!v9)
      goto LABEL_18;
  }
  else
  {
LABEL_12:
    v9 = (std::__shared_weak_count *)*((_QWORD *)this + 37);
    if (!v9)
      goto LABEL_18;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
LABEL_18:
  md::Ribbons::RibbonBatch<md::Ribbons::RouteStyledOverlayRibbonDescriptor>::~RibbonBatch((uint64_t)this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::RibbonBatch<md::Ribbons::RouteStyledOverlayRibbonDescriptor>::~RibbonBatch(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *a1 = &off_1E428C7C0;
  v2 = (std::__shared_weak_count *)a1[39];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[37];
    if (!v5)
      return md::Ribbons::RibbonBatch<md::Ribbons::RouteStyledOverlayRibbonDescriptor>::~RibbonBatch((uint64_t)a1);
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[37];
    if (!v5)
      return md::Ribbons::RibbonBatch<md::Ribbons::RouteStyledOverlayRibbonDescriptor>::~RibbonBatch((uint64_t)a1);
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return md::Ribbons::RibbonBatch<md::Ribbons::RouteStyledOverlayRibbonDescriptor>::~RibbonBatch((uint64_t)a1);
}

void md::RibbonBatch<md::Ribbons::RouteStyledOverlayRibbonDescriptor>::~RibbonBatch(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *a1 = &off_1E428C7C0;
  v2 = (std::__shared_weak_count *)a1[39];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[37];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[37];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  md::Ribbons::RibbonBatch<md::Ribbons::RouteStyledOverlayRibbonDescriptor>::~RibbonBatch((uint64_t)a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::RouteStyledOverlayBatch::StyleProperties::StyleProperties(uint64_t a1, std::string::size_type *a2, float a3)
{
  void **v5;
  std::string::size_type v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  void **v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  float *v16;
  float v17;
  _BOOL4 v18;
  BOOL v19;
  NSObject *v20;
  unsigned int v21;
  float v22;
  float v23;
  _BOOL4 v24;
  unsigned int v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  _BOOL4 v32;
  BOOL v33;
  unsigned int v34;
  float v35;
  float v36;
  _BOOL4 v37;
  unsigned int v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  _BOOL4 v45;
  unsigned int v47;
  float v48;
  _BOOL4 v49;
  unsigned int v51;
  int v52;
  int v53;
  float v54;
  _BOOL4 v55;
  unsigned int v56;
  float v57;
  _BOOL4 v58;
  unsigned int v59;
  int v60;
  int v61;
  float v62;
  _BOOL4 v63;
  unsigned int v64;
  float v65;
  float v66;
  _BOOL4 v67;
  unsigned int v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  _BOOL4 v74;
  unsigned int v75;
  float v76;
  float v77;
  _BOOL4 v78;
  unsigned int v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  _BOOL4 v85;
  unsigned int v86;
  int v87;
  int v88;
  float v89;
  _BOOL4 v90;
  unsigned int v91;
  int v92;
  int v93;
  float v94;
  _BOOL4 v95;
  unsigned int v96;
  float v97;
  float v98;
  _BOOL4 v99;
  unsigned int v100;
  float v101;
  float v102;
  float v103;
  float v104;
  std::string v106;
  std::string::size_type v107;
  std::__shared_weak_count *v108;
  _QWORD v109[2];
  unsigned __int8 v110;
  char v111;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  v5 = (void **)(a1 + 56);
  *(_DWORD *)(a1 + 16) = 1092616192;
  *(_WORD *)(a1 + 79) = 0;
  *(_BYTE *)(a1 + 103) = 0;
  *(_OWORD *)(a1 + 20) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_DWORD *)(a1 + 104) = 1065353216;
  v6 = *a2;
  v7 = (std::__shared_weak_count *)a2[1];
  v106.__r_.__value_.__r.__words[0] = *a2;
  v106.__r_.__value_.__l.__size_ = (std::string::size_type)v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    v108 = v7;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    v108 = 0;
  }
  v11 = (void **)(a1 + 80);
  v109[0] = 0;
  v109[1] = 0;
  v107 = v6;
  v110 = 0;
  if (v6)
    LODWORD(v6) = (*(uint64_t (**)(std::string::size_type, _QWORD *))(*(_QWORD *)v6 + 48))(v6, v109);
  v110 = v6;
  if (v7)
  {
    v12 = (unint64_t *)&v7->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    LODWORD(v6) = v110;
  }
  if (!(_DWORD)v6)
  {
    if (GEOGetVectorKitRouteLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitRouteLog_onceToken, &__block_literal_global_25_11794);
    v20 = (id)GEOGetVectorKitRouteLog_log;
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      LOWORD(v106.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_19F029000, v20, OS_LOG_TYPE_INFO, "***RouteStyledOverlayBatch failed to get style for StyleProperties", (uint8_t *)&v106, 2u);
    }

    goto LABEL_213;
  }
  v14 = *(_QWORD *)(v107 + 24);
  if ((int)a3 >= 0x17)
    v15 = 23;
  else
    v15 = (int)a3;
  v16 = *(float **)v14;
  if (!*(_QWORD *)v14)
  {
    v18 = 0;
    goto LABEL_34;
  }
  v17 = *v16;
  v18 = *v16 == 1.0;
  if (!*(_BYTE *)(v14 + 10) || (v17 != 0.0 ? (v19 = v17 == 1.0) : (v19 = 1), v19))
  {
LABEL_34:
    v21 = *(unsigned __int8 *)(v14 + v18 + 11);
    if (v21 != 2)
      goto LABEL_37;
  }
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(_QWORD *)(v107 + 24), 0x140u, v15, 0) & 1) != 0)
    goto LABEL_38;
  v21 = 1;
LABEL_37:
  if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v14, 0x140u, v15, v21))
    goto LABEL_51;
LABEL_38:
  v22 = fminf(fmaxf(a3, 0.0), 23.0);
  if (v16)
  {
    v23 = *v16;
    v24 = *v16 == 1.0;
    if (*(_BYTE *)(v14 + 10))
    {
      if (v23 != 0.0 && v23 != 1.0)
        goto LABEL_48;
    }
  }
  else
  {
    v24 = 0;
  }
  v26 = *(unsigned __int8 *)(v14 + v24 + 11);
  v23 = 0.0;
  if (v26 != 2)
  {
    gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v14, 0x140u, v26, 0, v22);
    goto LABEL_50;
  }
LABEL_48:
  v106.__r_.__value_.__s.__data_[0] = 1;
  v111 = 1;
  gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v14, 0x140u, 0, (BOOL *)&v106, v22);
  v28 = v27;
  gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v14, 0x140u, 1u, (BOOL *)&v111, v22);
  v30 = v28 + (float)((float)(v29 - v28) * v23);
LABEL_50:
  *(float *)a1 = v30;
  v14 = *(_QWORD *)(v107 + 24);
  v16 = *(float **)v14;
LABEL_51:
  if (!v16)
  {
    v32 = 0;
    goto LABEL_60;
  }
  v31 = *v16;
  v32 = *v16 == 1.0;
  if (!*(_BYTE *)(v14 + 10) || (v31 != 0.0 ? (v33 = v31 == 1.0) : (v33 = 1), v33))
  {
LABEL_60:
    v34 = *(unsigned __int8 *)(v14 + v32 + 11);
    if (v34 != 2)
      goto LABEL_63;
  }
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v14, 0xC2u, v15, 0) & 1) != 0)
    goto LABEL_64;
  v34 = 1;
LABEL_63:
  if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v14, 0xC2u, v15, v34))
    goto LABEL_77;
LABEL_64:
  v35 = fminf(fmaxf(a3, 0.0), 23.0);
  if (v16)
  {
    v36 = *v16;
    v37 = *v16 == 1.0;
    if (*(_BYTE *)(v14 + 10))
    {
      if (v36 != 0.0 && v36 != 1.0)
        goto LABEL_74;
    }
  }
  else
  {
    v37 = 0;
  }
  v39 = *(unsigned __int8 *)(v14 + v37 + 11);
  v36 = 0.0;
  if (v39 != 2)
  {
    gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v14, 0xC2u, v39, 0, v35);
    goto LABEL_76;
  }
LABEL_74:
  v106.__r_.__value_.__s.__data_[0] = 1;
  v111 = 1;
  gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v14, 0xC2u, 0, (BOOL *)&v106, v35);
  v41 = v40;
  gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v14, 0xC2u, 1u, (BOOL *)&v111, v35);
  v43 = v41 + (float)((float)(v42 - v41) * v36);
LABEL_76:
  *(float *)(a1 + 12) = v43;
  v14 = *(_QWORD *)(v107 + 24);
  v16 = *(float **)v14;
LABEL_77:
  if (v16)
  {
    v44 = *v16;
    v45 = *v16 == 1.0;
    if (*(_BYTE *)(v14 + 10))
    {
      if (v44 != 0.0 && v44 != 1.0)
        goto LABEL_87;
    }
  }
  else
  {
    v45 = 0;
  }
  v47 = *(unsigned __int8 *)(v14 + v45 + 11);
  if (v47 != 2)
    goto LABEL_89;
LABEL_87:
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v14, 0x88u, 0) & 1) == 0)
  {
    v47 = 1;
LABEL_89:
    if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v14, 0x88u, v47))
      goto LABEL_93;
  }
  gss::RenderStyleHelper<gss::PropertyID,std::string>::valueForKey(&v106, 0x88u, 2, v14, 0);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*v5);
  *(std::string *)v5 = v106;
  v14 = *(_QWORD *)(v107 + 24);
  v16 = *(float **)v14;
LABEL_93:
  if (v16)
  {
    v48 = *v16;
    v49 = *v16 == 1.0;
    if (*(_BYTE *)(v14 + 10))
    {
      if (v48 != 0.0 && v48 != 1.0)
        goto LABEL_103;
    }
  }
  else
  {
    v49 = 0;
  }
  v51 = *(unsigned __int8 *)(v14 + v49 + 11);
  if (v51 != 2)
    goto LABEL_105;
LABEL_103:
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v14, 0x1A7u, 0) & 1) == 0)
  {
    v51 = 1;
LABEL_105:
    if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v14, 0x1A7u, v51))
      goto LABEL_107;
  }
  gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<gm::Matrix<float,2,1>>(v14, 0x1A7u, fminf(fmaxf(a3, 0.0), 23.0));
  *(_DWORD *)(a1 + 20) = v52;
  *(_DWORD *)(a1 + 24) = v53;
  v14 = *(_QWORD *)(v107 + 24);
  v16 = *(float **)v14;
LABEL_107:
  if (v16)
  {
    v54 = *v16;
    v55 = *v16 == 1.0;
    if (*(_BYTE *)(v14 + 10) && v54 != 0.0 && v54 != 1.0)
      goto LABEL_114;
  }
  else
  {
    v55 = 0;
  }
  v56 = *(unsigned __int8 *)(v14 + v55 + 11);
  if (v56 != 2)
    goto LABEL_116;
LABEL_114:
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v14, 0x1ABu, 0) & 1) == 0)
  {
    v56 = 1;
LABEL_116:
    if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v14, 0x1ABu, v56))
      goto LABEL_120;
  }
  gss::RenderStyleHelper<gss::PropertyID,std::string>::valueForKey(&v106, 0x1ABu, 2, v14, 0);
  if (*(char *)(a1 + 103) < 0)
    operator delete(*v11);
  *(_OWORD *)v11 = *(_OWORD *)&v106.__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 96) = *((_QWORD *)&v106.__r_.__value_.__l + 2);
  v14 = *(_QWORD *)(v107 + 24);
  v16 = *(float **)v14;
LABEL_120:
  if (v16)
  {
    v57 = *v16;
    v58 = *v16 == 1.0;
    if (*(_BYTE *)(v14 + 10) && v57 != 0.0 && v57 != 1.0)
      goto LABEL_127;
  }
  else
  {
    v58 = 0;
  }
  v59 = *(unsigned __int8 *)(v14 + v58 + 11);
  if (v59 != 2)
    goto LABEL_129;
LABEL_127:
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v14, 0x1A5u, 0) & 1) == 0)
  {
    v59 = 1;
LABEL_129:
    if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v14, 0x1A5u, v59))
      goto LABEL_131;
  }
  gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<gm::Matrix<float,2,1>>(v14, 0x1A5u, fminf(fmaxf(a3, 0.0), 23.0));
  *(_DWORD *)(a1 + 36) = v60;
  *(_DWORD *)(a1 + 40) = v61;
  v14 = *(_QWORD *)(v107 + 24);
  v16 = *(float **)v14;
LABEL_131:
  if (!v16)
  {
    v63 = 0;
    goto LABEL_137;
  }
  v62 = *v16;
  v63 = *v16 == 1.0;
  if (!*(_BYTE *)(v14 + 10) || v62 == 0.0 || v62 == 1.0)
  {
LABEL_137:
    v64 = *(unsigned __int8 *)(v14 + v63 + 11);
    if (v64 != 2)
      goto LABEL_140;
  }
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v14, 0x1A9u, v15, 0) & 1) != 0)
    goto LABEL_141;
  v64 = 1;
LABEL_140:
  if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v14, 0x1A9u, v15, v64))
    goto LABEL_151;
LABEL_141:
  v65 = fminf(fmaxf(a3, 0.0), 23.0);
  if (v16)
  {
    v66 = *v16;
    v67 = *v16 == 1.0;
    if (*(_BYTE *)(v14 + 10) && v66 != 0.0 && v66 != 1.0)
      goto LABEL_148;
  }
  else
  {
    v67 = 0;
  }
  v68 = *(unsigned __int8 *)(v14 + v67 + 11);
  v66 = 0.0;
  if (v68 != 2)
  {
    gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v14, 0x1A9u, v68, 0, v65);
    goto LABEL_150;
  }
LABEL_148:
  v106.__r_.__value_.__s.__data_[0] = 1;
  v111 = 1;
  gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v14, 0x1A9u, 0, (BOOL *)&v106, v65);
  v70 = v69;
  gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v14, 0x1A9u, 1u, (BOOL *)&v111, v65);
  v72 = v70 + (float)((float)(v71 - v70) * v66);
LABEL_150:
  *(float *)(a1 + 8) = v72;
  v14 = *(_QWORD *)(v107 + 24);
  v16 = *(float **)v14;
LABEL_151:
  if (!v16)
  {
    v74 = 0;
    goto LABEL_157;
  }
  v73 = *v16;
  v74 = *v16 == 1.0;
  if (!*(_BYTE *)(v14 + 10) || v73 == 0.0 || v73 == 1.0)
  {
LABEL_157:
    v75 = *(unsigned __int8 *)(v14 + v74 + 11);
    if (v75 != 2)
      goto LABEL_160;
  }
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v14, 0x1AAu, v15, 0) & 1) != 0)
    goto LABEL_161;
  v75 = 1;
LABEL_160:
  if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v14, 0x1AAu, v15, v75))
    goto LABEL_171;
LABEL_161:
  v76 = fminf(fmaxf(a3, 0.0), 23.0);
  if (v16)
  {
    v77 = *v16;
    v78 = *v16 == 1.0;
    if (*(_BYTE *)(v14 + 10) && v77 != 0.0 && v77 != 1.0)
      goto LABEL_168;
  }
  else
  {
    v78 = 0;
  }
  v79 = *(unsigned __int8 *)(v14 + v78 + 11);
  v77 = 0.0;
  if (v79 != 2)
  {
    gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v14, 0x1AAu, v79, 0, v76);
    goto LABEL_170;
  }
LABEL_168:
  v106.__r_.__value_.__s.__data_[0] = 1;
  v111 = 1;
  gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v14, 0x1AAu, 0, (BOOL *)&v106, v76);
  v81 = v80;
  gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v14, 0x1AAu, 1u, (BOOL *)&v111, v76);
  v83 = v81 + (float)((float)(v82 - v81) * v77);
LABEL_170:
  *(float *)(a1 + 4) = v83;
  v14 = *(_QWORD *)(v107 + 24);
  v16 = *(float **)v14;
LABEL_171:
  if (v16)
  {
    v84 = *v16;
    v85 = *v16 == 1.0;
    if (*(_BYTE *)(v14 + 10) && v84 != 0.0 && v84 != 1.0)
      goto LABEL_178;
  }
  else
  {
    v85 = 0;
  }
  v86 = *(unsigned __int8 *)(v14 + v85 + 11);
  if (v86 != 2)
    goto LABEL_180;
LABEL_178:
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v14, 0x1A6u, v15, 0) & 1) == 0)
  {
    v86 = 1;
LABEL_180:
    if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v14, 0x1A6u, v15, v86))
      goto LABEL_182;
  }
  gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<gm::Matrix<float,2,1>>(v14, 0x1A6u, fminf(fmaxf(a3, 0.0), 23.0));
  *(_DWORD *)(a1 + 44) = v87;
  *(_DWORD *)(a1 + 48) = v88;
  v14 = *(_QWORD *)(v107 + 24);
  v16 = *(float **)v14;
LABEL_182:
  if (v16)
  {
    v89 = *v16;
    v90 = *v16 == 1.0;
    if (*(_BYTE *)(v14 + 10) && v89 != 0.0 && v89 != 1.0)
      goto LABEL_189;
  }
  else
  {
    v90 = 0;
  }
  v91 = *(unsigned __int8 *)(v14 + v90 + 11);
  if (v91 != 2)
    goto LABEL_191;
LABEL_189:
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v14, 0x1A8u, v15, 0) & 1) == 0)
  {
    v91 = 1;
LABEL_191:
    if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v14, 0x1A8u, v15, v91))
      goto LABEL_193;
  }
  gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<gm::Matrix<float,2,1>>(v14, 0x1A8u, fminf(fmaxf(a3, 0.0), 23.0));
  *(_DWORD *)(a1 + 28) = v92;
  *(_DWORD *)(a1 + 32) = v93;
  v14 = *(_QWORD *)(v107 + 24);
  v16 = *(float **)v14;
LABEL_193:
  if (!v16)
  {
    v95 = 0;
    goto LABEL_199;
  }
  v94 = *v16;
  v95 = *v16 == 1.0;
  if (!*(_BYTE *)(v14 + 10) || v94 == 0.0 || v94 == 1.0)
  {
LABEL_199:
    v96 = *(unsigned __int8 *)(v14 + v95 + 11);
    if (v96 != 2)
      goto LABEL_202;
  }
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v14, 0x19Eu, v15, 0) & 1) != 0)
    goto LABEL_203;
  v96 = 1;
LABEL_202:
  if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v14, 0x19Eu, v15, v96))
  {
LABEL_203:
    v97 = fminf(fmaxf(a3, 0.0), 23.0);
    if (v16)
    {
      v98 = *v16;
      v99 = *v16 == 1.0;
      if (*(_BYTE *)(v14 + 10) && v98 != 0.0 && v98 != 1.0)
        goto LABEL_210;
    }
    else
    {
      v99 = 0;
    }
    v100 = *(unsigned __int8 *)(v14 + v99 + 11);
    v98 = 0.0;
    if (v100 != 2)
    {
      gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v14, 0x19Eu, v100, 0, v97);
      goto LABEL_212;
    }
LABEL_210:
    v106.__r_.__value_.__s.__data_[0] = 1;
    v111 = 1;
    gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v14, 0x19Eu, 0, (BOOL *)&v106, v97);
    v102 = v101;
    gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v14, 0x19Eu, 1u, (BOOL *)&v111, v97);
    v104 = v102 + (float)((float)(v103 - v102) * v98);
LABEL_212:
    *(float *)(a1 + 16) = v104;
  }
LABEL_213:
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v107);
  return a1;
}

void sub_19FD3A308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  void **v6;
  void **v7;
  va_list va;

  va_start(va, a5);
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)va);
  if (*(char *)(v5 + 103) < 0)
  {
    operator delete(*v7);
    if ((*(char *)(v5 + 79) & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((*(char *)(v5 + 79) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v6);
  _Unwind_Resume(a1);
}

unint64_t gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<gm::Matrix<float,2,1>>(unint64_t a1, unsigned int a2, float a3)
{
  float *v6;
  float v7;
  BOOL v8;
  unsigned int v9;
  char v11;
  char v12;

  v6 = *(float **)a1;
  if (!*(_QWORD *)a1
    || (v7 = *v6, LODWORD(v6) = *v6 == 1.0, !*(_BYTE *)(a1 + 10))
    || (v7 != 0.0 ? (v8 = v7 == 1.0) : (v8 = 1), v8))
  {
    v9 = *(unsigned __int8 *)(a1 + v6 + 11);
    if (v9 != 2)
      return gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<gm::Matrix<float,2,1>>(a1, a2, v9, 0, a3);
  }
  v12 = 1;
  v11 = 1;
  gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<gm::Matrix<float,2,1>>(a1, a2, 0, (BOOL *)&v12, a3);
  return gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<gm::Matrix<float,2,1>>(a1, a2, 1u, (BOOL *)&v11, a3);
}

unint64_t gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<gm::Matrix<float,2,1>>(unint64_t result, unsigned int a2, unsigned int a3, BOOL *a4, float a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char v16;
  uint64_t *v17;
  uint64_t *v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unsigned int v23;
  uint64_t v24;
  char **v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  char *v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  unsigned __int16 *v34;
  unsigned __int16 *v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  unsigned int v41;
  uint64_t *v42;
  unsigned int v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unsigned int v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unsigned __int16 *v51;
  uint64_t *v52;
  unsigned int v53;
  uint64_t v54;
  unsigned __int16 *v55;
  unsigned __int16 *v56;
  unint64_t v57;
  unint64_t v58;
  unsigned __int16 *v59;
  unsigned __int16 *v60;
  unsigned int v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  unsigned __int16 *v68;
  uint64_t *v69;
  uint64_t *v70;
  unsigned __int16 *v71;
  uint64_t *v72;
  unsigned int v73;
  unsigned __int8 v74;
  unsigned __int8 v75;

  LODWORD(v7) = (int)a5;
  if ((int)a5 >= 0x17)
    v8 = 23;
  else
    v8 = v7;
  if (v7 >= 0x16)
    v7 = 22;
  else
    v7 = v7;
  v9 = (uint64_t *)(result + 16 * a3);
  v12 = v9[2];
  v11 = v9 + 2;
  v10 = v12;
  if (!v12)
  {
    if (a4)
      *a4 = 0;
    return (unint64_t)gss::defaultValueForKey<gss::PropertyID,gm::Matrix<float,2,1>>();
  }
  v13 = v7 + 1;
  v14 = (uint64_t *)(result + 16 * a3);
  v15 = *((unsigned __int16 *)v14 + 28);
  if (!*((_WORD *)v14 + 28))
  {
    v75 = 1;
    v74 = 1;
LABEL_125:
    gss::CartoStyle<gss::PropertyID>::valueForKeyAtZ<gm::Matrix<float,2,1>>(*(uint64_t **)(v10 + 72), a2, v8, &v75);
LABEL_126:
    result = (unint64_t)gss::CartoStyle<gss::PropertyID>::valueForKeyAtZ<gm::Matrix<float,2,1>>(*(uint64_t **)(*v11 + 72), a2, v13, &v74);
    if (a4)
LABEL_127:
      *a4 = (v75 | v74) != 0;
    return result;
  }
  v16 = 0;
  v17 = (uint64_t *)v14[6];
  v18 = &v17[v15];
  while (2)
  {
    LOBYTE(v19) = 0;
    while (1)
    {
      v21 = *v17;
      if ((v19 & 1) == 0)
      {
        v22 = *(uint64_t **)(v21 + 72);
        if (!v22)
          goto LABEL_51;
        v23 = *((unsigned __int8 *)v22 + v8 + 16);
        v24 = *v22;
        v25 = (char **)(v24 + 80 * v23);
        v26 = *((unsigned __int16 *)v25 + 5);
        if (!*((_WORD *)v25 + 5))
        {
          result = 0;
LABEL_51:
          v19 = 0;
          if ((v16 & 1) != 0)
          {
LABEL_88:
            if (v19)
              goto LABEL_129;
            goto LABEL_116;
          }
          goto LABEL_52;
        }
        result = (unint64_t)*v25;
        if (*((_BYTE *)v25 + 15))
        {
          if (v26 >= 0x1E)
          {
            v31 = *v25;
            v32 = v26;
            do
            {
              v33 = v32 >> 1;
              v34 = (unsigned __int16 *)&v31[2 * (v32 >> 1)];
              v36 = *v34;
              v35 = v34 + 1;
              v32 += ~(v32 >> 1);
              if (v36 < a2)
                v31 = (char *)v35;
              else
                v32 = v33;
            }
            while (v32);
            if (v31 == (char *)(result + 2 * v26))
              goto LABEL_51;
            if (*(unsigned __int16 *)v31 != a2)
              goto LABEL_51;
            result = (unint64_t)&v31[-result] >> 1;
            if ((_DWORD)v26 == (unsigned __int16)result)
              goto LABEL_51;
          }
          else
          {
            v27 = 0;
            while (1)
            {
              v28 = *(unsigned __int16 *)(result + 2 * v27);
              if (v28 >= a2)
                break;
              if (v26 == ++v27)
                goto LABEL_51;
            }
            if (v28 == a2)
              result = v27;
            else
              result = v26;
            if ((_DWORD)v26 == (unsigned __int16)result)
              goto LABEL_51;
          }
        }
        else
        {
          v29 = 2 * v26;
          v30 = *v25;
          while (*(unsigned __int16 *)v30 != a2)
          {
            v30 += 2;
            v29 -= 2;
            if (!v29)
            {
              v30 = (char *)(result + 2 * v26);
              break;
            }
          }
          result = (unint64_t)&v30[-result] >> 1;
          if ((_DWORD)v26 == (unsigned __int16)result)
            goto LABEL_51;
        }
        v37 = v24 + 80 * v23;
        result = *(unsigned __int16 *)(v37 + 58);
        if (*(_WORD *)(v37 + 58))
        {
          v38 = v24 + 80 * v23;
          v39 = *(_QWORD *)(v38 + 48);
          if (*(_BYTE *)(v38 + 63))
          {
            if (result >= 0x1E)
            {
              v56 = *(unsigned __int16 **)(v38 + 48);
              v57 = result;
              do
              {
                v58 = v57 >> 1;
                v59 = &v56[v57 >> 1];
                v61 = *v59;
                v60 = v59 + 1;
                v57 += ~(v57 >> 1);
                if (v61 < a2)
                  v56 = v60;
                else
                  v57 = v58;
              }
              while (v57);
            }
            else
            {
              v40 = 0;
              do
              {
                v41 = *(unsigned __int16 *)(v39 + 2 * (_QWORD)v40);
                if (v41 >= a2)
                  break;
                v40 = (uint64_t *)((char *)v40 + 1);
              }
              while ((uint64_t *)result != v40);
            }
          }
          else
          {
            v54 = 2 * result;
            v55 = *(unsigned __int16 **)(v38 + 48);
            do
            {
              if (*v55 == a2)
                break;
              ++v55;
              v54 -= 2;
            }
            while (v54);
          }
        }
      }
      v19 = 1;
      if ((v16 & 1) != 0)
        goto LABEL_88;
LABEL_52:
      v42 = *(uint64_t **)(v21 + 72);
      if (v42)
      {
        v43 = *((unsigned __int8 *)v42 + v13 + 16);
        v44 = *v42;
        result = v44 + 80 * v43;
        v45 = *(unsigned __int16 *)(result + 10);
        if (*(_WORD *)(result + 10))
        {
          v46 = *(_QWORD *)result;
          if (*(_BYTE *)(result + 15))
          {
            if (v45 >= 0x1E)
            {
              result = *(_QWORD *)result;
              v49 = v45;
              do
              {
                v50 = v49 >> 1;
                v51 = (unsigned __int16 *)(result + 2 * (v49 >> 1));
                v53 = *v51;
                v52 = (uint64_t *)(v51 + 1);
                v49 += ~(v49 >> 1);
                if (v53 < a2)
                  result = (unint64_t)v52;
                else
                  v49 = v50;
              }
              while (v49);
              if (result == v46 + 2 * v45 || *(unsigned __int16 *)result != a2)
                goto LABEL_13;
              v20 = (result - v46) >> 1;
            }
            else
            {
              result = 0;
              while (1)
              {
                v47 = *(unsigned __int16 *)(v46 + 2 * result);
                if (v47 >= a2)
                  break;
                if (v45 == ++result)
                  goto LABEL_13;
              }
              LOWORD(v20) = v47 == a2 ? result : (unsigned __int16)v45;
            }
          }
          else
          {
            v48 = 2 * v45;
            result = *(_QWORD *)result;
            while (*(unsigned __int16 *)result != a2)
            {
              result += 2;
              v48 -= 2;
              if (!v48)
              {
                result = v46 + 2 * v45;
                break;
              }
            }
            v20 = (result - v46) >> 1;
          }
        }
        else
        {
          LOWORD(v20) = 0;
        }
        if ((_DWORD)v45 != (unsigned __int16)v20)
          break;
      }
LABEL_13:
      v16 = 0;
      if (++v17 == v18)
      {
        v75 = 1;
        v74 = 1;
        if ((v19 & 1) == 0)
          goto LABEL_125;
        goto LABEL_126;
      }
    }
    v62 = v44 + 80 * v43;
    v63 = *(unsigned __int16 *)(v62 + 58);
    if (*(_WORD *)(v62 + 58))
    {
      v64 = v44 + 80 * v43;
      v65 = *(_QWORD *)(v64 + 48);
      if (!*(_BYTE *)(v64 + 63))
      {
        v67 = 2 * v63;
        v68 = *(unsigned __int16 **)(v64 + 48);
        while (*v68 != a2)
        {
          ++v68;
          v67 -= 2;
          if (!v67)
          {
            v68 = (unsigned __int16 *)(v65 + 2 * v63);
            break;
          }
        }
        result = ((unint64_t)v68 - v65) >> 1;
LABEL_115:
        if ((v19 & 1) != 0)
          goto LABEL_129;
        goto LABEL_116;
      }
      if (v63 < 0x1E)
      {
        result = 0;
        while (1)
        {
          v66 = *(unsigned __int16 *)(v65 + 2 * result);
          if (v66 >= a2)
            break;
          if (v63 == ++result)
            goto LABEL_110;
        }
        if (v66 == a2)
          result = result;
        else
          result = v63;
        goto LABEL_115;
      }
      result = *(_QWORD *)(v64 + 48);
      v69 = (uint64_t *)v63;
      do
      {
        v70 = (uint64_t *)((unint64_t)v69 >> 1);
        v71 = (unsigned __int16 *)(result + 2 * ((unint64_t)v69 >> 1));
        v73 = *v71;
        v72 = (uint64_t *)(v71 + 1);
        v69 = (uint64_t *)((char *)v69 + ~((unint64_t)v69 >> 1));
        if (v73 < a2)
          result = (unint64_t)v72;
        else
          v69 = v70;
      }
      while (v69);
      if (result != v65 + 2 * v63)
      {
        if (*(unsigned __int16 *)result == a2)
          result = (result - v65) >> 1;
        goto LABEL_115;
      }
    }
LABEL_110:
    if ((v19 & 1) != 0)
    {
LABEL_129:
      v75 = 1;
      v74 = 1;
      if (a4)
        goto LABEL_127;
      return result;
    }
LABEL_116:
    ++v17;
    v16 = 1;
    if (v17 != v18)
      continue;
    break;
  }
  v75 = 1;
  v74 = 1;
  result = (unint64_t)gss::CartoStyle<gss::PropertyID>::valueForKeyAtZ<gm::Matrix<float,2,1>>(*(uint64_t **)(v10 + 72), a2, v8, &v75);
  if (a4)
    goto LABEL_127;
  return result;
}

uint64_t md::RibbonLayer<md::Ribbons::RouteLineRibbonDescriptor>::RibbonLayer(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t *a5, char *a6)
{
  char v6;
  uint64_t v7;
  int v12;
  char v13;
  const void *v14;
  int64_t v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *__ptr32 *v19;
  char *v20;
  _QWORD *v21;
  _QWORD **v22;
  _QWORD **v23;
  char *v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float *v36;
  float v37;
  uint64_t v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  uint64_t v46;
  float *v47;
  uint64_t v48;
  uint64_t v49;
  float v50;
  float v51;
  uint64_t v52;
  float *v53;
  float v54;
  float v55;
  float *v56;
  uint64_t v57;
  float v58;
  float v59;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  double v66;
  double v67;
  float v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  _QWORD **v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  _BYTE *v77;
  char *v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  _OWORD *v83;
  char *v84;
  uint64_t v85;
  __int128 v86;
  gdc::GlobeTileGrid *v87;
  gdc::GlobeTileGrid *v88;
  gdc::GlobeTileGrid *v89;
  uint64_t v90;
  char *v91;
  uint64_t *v92;
  uint64_t *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  gdc::GlobeTileGrid *v97;
  uint64_t v98;
  float *v99;
  unsigned int v100;
  float v101;
  unsigned int v102;
  unsigned int v103;
  float *v104;
  float v105;
  float v106;
  char *v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  char *v114;
  unint64_t *v115;
  __int128 v116;
  unsigned __int8 v117;
  std::__shared_weak_count *v118;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v120;
  std::__shared_count v121;
  unsigned __int8 v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unsigned __int8 v126;
  uint64_t v127;
  unsigned __int8 v128;
  uint64_t v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t *v141;
  _QWORD *v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t v148;
  _BYTE *v149;
  uint64_t *v150;
  unint64_t v151;
  unint64_t v152;
  uint64_t v153;
  _OWORD *v154;
  uint64_t *v155;
  uint64_t v156;
  __int128 v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  _QWORD *v173;
  _QWORD *v174;
  uint64_t v175;
  _QWORD *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  std::__shared_weak_count *end;
  unint64_t *v184;
  unint64_t v185;
  _QWORD *v186;
  int v187;
  uint64_t v188;
  int v189;
  uint64_t v190;
  unsigned __int8 v191;
  int v192;
  uint64_t v193;
  geo::read_write_lock *v194;
  const char *v195;
  malloc_zone_t *zone;
  int v197;
  uint64_t v198;
  geo::read_write_lock *v199;
  const char *v200;
  malloc_zone_t *v201;
  uint64_t v202;
  unint64_t *v203;
  unint64_t v204;
  uint64_t v205;
  unint64_t *v206;
  unint64_t v207;
  uint64_t v208;
  float v209;
  float32x2_t v210;
  uint64_t **v211;
  uint64_t **v212;
  uint64_t v213;
  uint64_t *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  __int128 v221;
  unint64_t v222;
  unint64_t v223;
  unint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  unsigned int *v228;
  unsigned int *v229;
  __int128 v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t *v233;
  uint64_t v234;
  uint64_t *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  int8x16_t v240;
  unint64_t v241;
  float *v242;
  float32x2_t v243;
  unint64_t v244;
  float v245;
  float32x2_t v246;
  uint64_t v247;
  int8x16_t v248;
  int32x4_t *v249;
  float32x4_t v250;
  unint64_t v251;
  float32x4_t v252;
  const float *i32;
  int32x4_t v254;
  int32x4_t v255;
  int32x4_t v256;
  int8x16_t v257;
  float32x4_t v258;
  float32x4_t v259;
  float32x4_t v260;
  float32x4_t v261;
  float32x4_t v262;
  unint64_t v263;
  _QWORD *v264;
  float32x2_t v265;
  float32x2_t v266;
  double v267;
  float v268;
  float32x2_t *v269;
  float v270;
  uint64_t v271;
  int32x2_t v272;
  float32x2_t v273;
  float32x2_t v274;
  unsigned int v275;
  int v276;
  uint64_t v277;
  float32x2_t v278;
  uint64_t v279;
  char v280;
  char v281;
  int v282;
  float32x4_t v283;
  float32x4_t v284;
  float32x4_t v285;
  uint64_t v286;
  char v287;
  char v288;
  int v289;
  int v290;
  float32x4_t v291;
  float32x4_t v292;
  float32x4_t v293;
  float v294;
  uint64_t v295;
  float *v296;
  unint64_t v297;
  uint64_t v298;
  uint64_t v299;
  char v300;
  char v301;
  int v302;
  int v303;
  float32x4_t v304;
  float32x4_t v305;
  float32x4_t v306;
  float v307;
  float32x4_t v308;
  float v309;
  int32x2_t v310;
  float v311;
  float v312;
  float32x4_t v313;
  float v314;
  float *v315;
  float v316;
  float v317;
  uint64_t v318;
  float *v319;
  unint64_t v320;
  float v321;
  float v322;
  float v324;
  float v325;
  float v326;
  float v327;
  unsigned int v328;
  unint64_t v329;
  float32x2_t v330;
  float v331;
  float v332;
  float v333;
  float v334;
  float v335;
  float v336;
  unsigned int v337;
  float v338;
  int v339;
  float v340;
  float v341;
  double v342;
  double v343;
  double v344;
  float v345;
  float v346;
  float v347;
  float v348;
  unint64_t v349;
  float v350;
  float32x2_t v351;
  __float2 v352;
  float32x2_t v353;
  float32x2_t v354;
  uint64_t i;
  __float2 v356;
  uint64_t v357;
  char v358;
  char v359;
  int v360;
  int v361;
  float32x4_t v362;
  float32x4_t v363;
  float32x4_t v364;
  float v365;
  __float2 v366;
  float32x2_t v367;
  float32x2_t v368;
  uint64_t v369;
  char v370;
  char v371;
  int v372;
  int v373;
  float32x4_t v374;
  float32x4_t v375;
  float32x4_t v376;
  float v377;
  uint64_t v378;
  float32x2_t v379;
  __float2 v380;
  uint64_t v381;
  char v382;
  char v383;
  int v384;
  int v385;
  float32x4_t v386;
  float32x4_t v387;
  float32x4_t v388;
  float v389;
  __float2 v390;
  uint64_t v391;
  char v392;
  char v393;
  int v394;
  int v395;
  float32x4_t v396;
  float32x4_t v397;
  float32x4_t v398;
  double v399;
  float v400;
  float32x2_t v401;
  __float2 v402;
  float32x2_t v403;
  float32x2_t v404;
  float v405;
  __float2 v406;
  float32x2_t v407;
  float32x2_t v408;
  uint64_t v409;
  float32x4_t v410;
  float32x4_t v411;
  float *v412;
  float *v413;
  float v414;
  float v415;
  float v416;
  int16x8_t v417;
  float v418;
  float v419;
  float v420;
  float v421;
  unsigned int v422;
  int v423;
  uint64_t v424;
  char v425;
  char v426;
  int v427;
  int v428;
  float32x4_t v429;
  float32x4_t v430;
  float v431;
  float32x4_t v432;
  float32x4_t v433;
  float32x4_t v434;
  float32x4_t v435;
  float32x4_t v436;
  uint64_t v437;
  char v438;
  char v439;
  int v440;
  float32x4_t v441;
  float v442;
  float32x4_t v443;
  unint64_t v444;
  unint64_t v445;
  unint64_t v446;
  uint64_t v447;
  unint64_t v448;
  uint64_t v449;
  _WORD *v450;
  uint64_t v451;
  unint64_t v452;
  unint64_t v453;
  _WORD *v454;
  __int16 v455;
  unint64_t v456;
  __int16 v457;
  __int16 v458;
  unint64_t v459;
  uint64_t v460;
  unint64_t v461;
  _WORD *v462;
  unint64_t v463;
  int64x2_t v464;
  int64x2_t v465;
  int64x2_t v466;
  int64x2_t v467;
  int64x2_t v468;
  int64x2_t v469;
  __int16 *v470;
  unint64_t v471;
  unint64_t v472;
  unint64_t v473;
  unsigned __int8 v475;
  _QWORD *v476;
  uint64_t *v477;
  _QWORD *v478;
  _QWORD *v479;
  void (***v480)(_QWORD, _QWORD *);
  void (***v481)(_QWORD, _QWORD *);
  unsigned __int8 v482;
  uint64_t v483;
  unsigned int *v484;
  unsigned int *value;
  std::vector<unsigned int>::pointer v486;
  int v487;
  int v488;
  unsigned int *v489;
  unsigned int *v490;
  unint64_t v491;
  unint64_t v492;
  _QWORD *v493;
  int v494;
  int v495;
  unint64_t v496;
  unint64_t v497;
  uint64_t v498;
  uint64_t result;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t **v503;
  _QWORD *v505;
  uint64_t **v506;
  uint64_t *v507;
  float32x2_t v508;
  uint64_t *v509;
  uint64_t v510;
  uint64_t *v511;
  unint64_t v512;
  _WORD *v513;
  uint64_t v514;
  float v515;
  uint64_t *v516;
  double v517;
  uint64_t *v518;
  unint64_t v519;
  void **v520;
  float *v521;
  _QWORD *v522;
  gdc::GlobeTileGrid **v523;
  float v524;
  _QWORD *v525;
  uint64_t v526;
  unint64_t v527;
  _QWORD **v528;
  uint64_t v529;
  std::vector<unsigned int>::pointer begin;
  _QWORD **v531;
  float v532;
  float32x2_t v533;
  char *v534;
  float v535;
  char *v536;
  char *v537;
  float v538;
  char *v539;
  unint64_t v540;
  uint64_t *v541;
  unint64_t v542;
  float v543;
  _QWORD *v544;
  std::__shared_weak_count *v545;
  float v546;
  float v547;
  float v548;
  float v549;
  std::vector<unsigned int> v550;
  void *v551[3];
  std::vector<unsigned int> __p;
  unsigned int *v553;
  __int16 v554;
  uint64_t v555;
  _BYTE v556[32];
  __int128 v557;
  uint64_t v558;
  float32x4_t v559;
  float v560;
  float v561;
  unint64_t v562;
  __int128 v563;
  unint64_t v564;
  unint64_t v565;
  __int16 v566;
  uint64_t v567;
  uint64_t v568;
  int16x8x2_t v569;
  float32x4x3_t v570;

  v568 = *MEMORY[0x1E0C80C00];
  md::RibbonLayer<md::Ribbons::RouteLineRibbonDescriptor>::batch((uint64_t *)v556, a3, a4, a5);
  v518 = a4;
  v12 = a6[24];
  if (a6[24])
  {
    v6 = a6[1];
    v13 = *a6;
    v7 = *(_QWORD *)(a6 + 4);
  }
  else
  {
    v13 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &off_1E42AF368;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v14 = *(const void **)v556;
  v15 = *(_QWORD *)&v556[8] - *(_QWORD *)v556;
  if (*(_QWORD *)&v556[8] == *(_QWORD *)v556)
  {
    v522 = 0;
    v18 = 0;
  }
  else
  {
    if (v15 < 0)
      abort();
    v16 = operator new(*(_QWORD *)&v556[8] - *(_QWORD *)v556);
    *(_QWORD *)(a1 + 8) = v16;
    *(_QWORD *)(a1 + 16) = v16;
    v17 = (char *)&v16[v15 >> 3];
    *(_QWORD *)(a1 + 24) = v17;
    v18 = v16;
    memcpy(v16, v14, v15);
    v522 = v17;
    *(_QWORD *)(a1 + 16) = v17;
  }
  v516 = a5;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 208) = 0;
  v523 = (gdc::GlobeTileGrid **)(a1 + 208);
  *(_BYTE *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  v520 = (void **)(a1 + 32);
  *(_OWORD *)(a1 + 185) = 0u;
  if (v12)
  {
    *(_BYTE *)(a1 + 216) = v13;
    *(_BYTE *)(a1 + 217) = v6;
    *(_QWORD *)(a1 + 220) = v7;
    *(_BYTE *)(a1 + 240) = 1;
  }
  v19 = &off_19FFB1000;
  v502 = a1;
  if (v18 == v522)
  {
    v20 = 0;
    v108 = 0;
    goto LABEL_113;
  }
  v20 = 0;
  v539 = 0;
  v534 = 0;
  while (2)
  {
    v21 = (_QWORD *)*v18;
    v21[1] = a1;
    v22 = (_QWORD **)v21[303];
    v23 = (_QWORD **)v21[304];
    v525 = v18;
    v528 = v23;
    while (v22 != v23)
    {
      v536 = v20;
      v25 = *v22;
      v25[1] = **v22;
      v25[3] = v25[2];
      v25[5] = v25[4];
      v563 = 0uLL;
      v564 = 0;
      memset(&__p, 0, sizeof(__p));
      v27 = (uint64_t *)v25[7];
      v26 = (uint64_t *)v25[8];
      if (v27 != v26)
      {
        v531 = v22;
        v541 = (uint64_t *)v25[8];
        v544 = v25;
        do
        {
          v32 = *v27;
          v559.i64[0] = 1;
          md::Ribbons::RibbonWriter<md::Ribbons::RouteStyledOverlayRibbonDescriptor>::eliminateDuplicates(v32, (uint64_t)&v563, &__p, (uint64_t *)&v559);
          v33 = v559.i64[0];
          v34 = v559.i64[0] - 2;
          if (v559.i64[0] >= 2uLL)
          {
            v35 = v563;
            v36 = (float *)(v563 + 12);
            v37 = *(float *)v563;
            v38 = 1;
            while (1)
            {
              if (vabds_f32(*v36, v37) >= 1.0e-10)
              {
                v43 = v36[1] - *(float *)(v563 + 4);
                goto LABEL_30;
              }
              v39 = *(float *)(v563 + 4);
              v40 = v36[1];
              if (vabds_f32(v40, v39) >= 1.0e-10)
                break;
              ++v38;
              v36 += 3;
              if (v559.i64[0] == v38)
              {
                v41 = 0.0;
                v42 = 1.0;
                goto LABEL_31;
              }
            }
            v43 = v40 - v39;
LABEL_30:
            v44 = *v36 - v37;
            v45 = 1.0 / sqrtf((float)(v44 * v44) + (float)(v43 * v43));
            v42 = v45 * v44;
            v41 = v45 * v43;
LABEL_31:
            v46 = v559.i64[0] - 1;
            if ((unint64_t)(v559.i64[0] - 1) >= 2)
            {
              v47 = (float *)(v563 + 28);
              v48 = 1;
              v49 = 2;
              v50 = v42;
              v51 = v41;
              while (1)
              {
                v52 = v48 + 1;
                if (v48 + 1 < v33)
                {
                  v53 = (float *)(v35 + 12 * v48);
                  v54 = *v53;
                  v55 = v53[1];
                  v56 = v47;
                  v57 = v34;
                  do
                  {
                    v58 = *(v56 - 1);
                    v59 = vabds_f32(*v56, v55);
                    if (vabds_f32(v58, v54) >= 1.0e-10 || v59 >= 1.0e-10)
                    {
                      v61 = v58 - v54;
                      v62 = *v56 - v55;
                      v63 = 1.0 / sqrtf((float)(v61 * v61) + (float)(v62 * v62));
                      v50 = v63 * v61;
                      v51 = v63 * v62;
                      goto LABEL_44;
                    }
                    v56 += 3;
                    --v57;
                  }
                  while (v57);
                  v50 = v42;
                  v51 = v41;
                }
LABEL_44:
                v64 = atan2f(v51, v50);
                v65 = v64 - atan2f(v41, v42);
                v66 = v65;
                if (v65 > 3.14159265)
                  break;
                if (v66 < -3.14159265)
                {
                  v67 = 6.28318531;
                  goto LABEL_48;
                }
LABEL_49:
                v68 = fabsf(v65);
                v69 = (unint64_t)fmaxf(ceilf(v68 * 5.7296), 1.0);
                if (v69 < 2)
                  v49 += 2;
                else
                  v49 += 4 * (v68 < 1.5708) + 2 * v69;
                --v34;
                v47 += 3;
                v48 = v52;
                v41 = v51;
                v42 = v50;
                if (v52 == v46)
                  goto LABEL_52;
              }
              v67 = -6.28318531;
LABEL_48:
              v65 = v66 + v67;
              goto LABEL_49;
            }
            v49 = 2;
LABEL_52:
            v70 = 2;
            if (*(_BYTE *)(v32 + 96))
              v70 = 4;
            v71 = v70 + v49;
            if (*(_BYTE *)(v32 + 97))
              v71 += 2;
            if (v71 < 0x10000)
            {
              v28 = 3 * v71 + *(_QWORD *)(v32 + 24);
              v29 = *(_QWORD *)(v32 + 8) + v71;
              v30 = v28 - 6;
            }
            else
            {
              v29 = *(_QWORD *)(v32 + 8);
              v30 = *(_QWORD *)(v32 + 24);
            }
            v26 = v541;
            v25 = v544;
            *(_QWORD *)(v32 + 16) = v29;
            *(_QWORD *)(v32 + 32) = v30;
            *(_QWORD *)(v32 + 48) = *(_QWORD *)(v32 + 40);
          }
          v31 = (_QWORD *)*v27++;
          v25[1] = v31[2] + v25[1] - v31[1];
          v25[3] = v31[4] + v25[3] - v31[3];
          v25[5] = v31[6] + v25[5] - v31[5];
        }
        while (v27 != v26);
        v22 = v531;
        if (__p.__begin_)
          operator delete(__p.__begin_);
      }
      v20 = v536;
      if ((_QWORD)v563)
        operator delete((void *)v563);
      v72 = *v22;
      if (v539 < v534)
      {
        *(_QWORD *)v539 = v72;
        v24 = v539 + 8;
        v19 = &off_19FFB1000;
        goto LABEL_15;
      }
      v73 = v22;
      v74 = (v539 - v536) >> 3;
      v75 = v74 + 1;
      if ((unint64_t)(v74 + 1) >> 61)
        abort();
      if ((v534 - v536) >> 2 > v75)
        v75 = (v534 - v536) >> 2;
      if ((unint64_t)(v534 - v536) >= 0x7FFFFFFFFFFFFFF8)
        v76 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v76 = v75;
      if (v76)
      {
        if (v76 >> 61)
LABEL_394:
          std::__throw_bad_array_new_length[abi:nn180100]();
        v77 = operator new(8 * v76);
      }
      else
      {
        v77 = 0;
      }
      v78 = &v77[8 * v74];
      *(_QWORD *)v78 = v72;
      v24 = v78 + 8;
      if (v539 == v536)
      {
        v19 = &off_19FFB1000;
        v22 = v73;
        goto LABEL_82;
      }
      v79 = v539 - 8 - v536;
      v19 = &off_19FFB1000;
      if (v79 < 0x168)
      {
        v80 = v539;
        v22 = v73;
        goto LABEL_81;
      }
      if (&v77[v539 - v536 - 8 - (v79 & 0xFFFFFFFFFFFFFFF8)] > &v77[v539 - v536 - 8]
        || &v539[-(v79 & 0xFFFFFFFFFFFFFFF8) - 8] > v539 - 8
        || (unint64_t)(v536 - v77) < 0x20)
      {
        v80 = v539;
        v22 = v73;
        do
        {
LABEL_81:
          v81 = *((_QWORD *)v80 - 1);
          v80 -= 8;
          *((_QWORD *)v78 - 1) = v81;
          v78 -= 8;
        }
        while (v80 != v536);
        goto LABEL_82;
      }
      v82 = (v79 >> 3) + 1;
      v80 = &v539[-8 * (v82 & 0x3FFFFFFFFFFFFFFCLL)];
      v83 = &v77[8 * v74 - 16];
      v84 = v539 - 16;
      v85 = v82 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v86 = *(_OWORD *)v84;
        *(v83 - 1) = *((_OWORD *)v84 - 1);
        *v83 = v86;
        v83 -= 2;
        v84 -= 32;
        v85 -= 4;
      }
      while (v85);
      v78 -= 8 * (v82 & 0x3FFFFFFFFFFFFFFCLL);
      v22 = v73;
      if (v82 != (v82 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_81;
LABEL_82:
      v534 = &v77[8 * v76];
      if (v536)
        operator delete(v536);
      v20 = v78;
LABEL_15:
      ++v22;
      v539 = v24;
      v23 = v528;
    }
    v18 = v525 + 1;
    if (v525 + 1 != v522)
      continue;
    break;
  }
  if (!*(_BYTE *)(a1 + 200))
    goto LABEL_111;
  v87 = (gdc::GlobeTileGrid *)operator new();
  v88 = v87;
  if (*(_BYTE *)(a1 + 240))
  {
    gdc::GlobeTileGrid::GlobeTileGrid(v87, (const QuadTile *)(a1 + 216));
    v89 = *v523;
    *v523 = v88;
    if (v89)
    {
      v90 = *((_QWORD *)v89 + 323);
      if (v90)
        MEMORY[0x1A1AF4DE8](v90, 0x1000C8000313F17);
      MEMORY[0x1A1AF4E00](v89, 0x1020C4007FF0C4BLL);
      v88 = *v523;
    }
    *((_QWORD *)v88 + 323) = operator new[]();
    if (v20 != v539)
    {
      v91 = v20;
      do
      {
        v92 = *(uint64_t **)(*(_QWORD *)v91 + 56);
        v93 = *(uint64_t **)(*(_QWORD *)v91 + 64);
        while (v92 != v93)
        {
          v94 = *v92;
          if (!*(_QWORD *)(*v92 + 80))
          {
            v95 = *(_QWORD *)(v94 + 88);
            if (v95)
            {
              v96 = *(_QWORD *)(v94 + 72);
              v97 = *v523;
              v98 = *((_QWORD *)*v523 + 323);
              v99 = (float *)(v96 + 4);
              v100 = 1;
              do
              {
                v101 = *((float *)v97 + 648) * v99[1];
                v102 = vcvts_n_u32_f32(*(v99 - 1), 2uLL);
                if (v102 >= 3)
                  v102 = 3;
                v103 = vcvts_n_u32_f32(*v99, 2uLL);
                if (v103 >= 3)
                  v103 = 3;
                v104 = (float *)(v98 + 8 * (v102 | (4 * v103)));
                v105 = fminf(v101, *v104);
                v106 = fmaxf(v104[1], v101);
                *v104 = v105;
                v104[1] = v106;
                v99 += 3;
              }
              while (v95 > v100++);
            }
          }
          ++v92;
        }
        v91 += 8;
      }
      while (v91 != v539);
    }
    gdc::GlobeTileGrid::endBuildingHeightRange(*v523);
LABEL_111:
    v108 = v539;
LABEL_113:
    v109 = 0;
    v110 = 0;
    v111 = 0;
    v112 = 0;
    v113 = (v108 - v20) >> 3;
    v537 = v20;
    v542 = v113;
    while (2)
    {
      if (v110 == v113
        || (unint64_t)(*(_QWORD *)(*(_QWORD *)&v20[8 * v110] + 8) + v112 - **(_QWORD **)&v20[8 * v110]) >= 0x10000)
      {
        v114 = (char *)operator new(0xF8uLL);
        *((_QWORD *)v114 + 1) = 0;
        v115 = (unint64_t *)(v114 + 8);
        *((_QWORD *)v114 + 2) = 0;
        *(_QWORD *)v114 = &off_1E42E0838;
        *((_QWORD *)v114 + 3) = &off_1E42B5748;
        *((_QWORD *)v114 + 4) = 48;
        *((_DWORD *)v114 + 10) = 1;
        *((_QWORD *)v114 + 6) = 0;
        *((_QWORD *)v114 + 7) = 0;
        *((_QWORD *)v114 + 8) = 0;
        *((_QWORD *)v114 + 9) = 48 * v112;
        v116 = 0uLL;
        *((_OWORD *)v114 + 5) = 0u;
        *((_OWORD *)v114 + 6) = 0u;
        *((_QWORD *)v114 + 14) = 0;
        if ((v117 & 1) == 0)
        {
          v116 = 0uLL;
          if (v187)
          {
            v188 = operator new();
            ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v188, "GeoGL", 0xA3D02C1100000005);
            v116 = 0uLL;
          }
        }
        *((_QWORD *)v114 + 15) = ggl::Allocator::instance(void)::alloc;
        *((_QWORD *)v114 + 16) = 0;
        *((_OWORD *)v114 + 11) = v116;
        *((_OWORD *)v114 + 12) = v116;
        *((_QWORD *)v114 + 26) = 0;
        *((_QWORD *)v114 + 27) = -1;
        *((_OWORD *)v114 + 10) = v116;
        *((_OWORD *)v114 + 9) = xmmword_19FFB2DD0;
        *((_DWORD *)v114 + 34) = 0;
        *((_QWORD *)v114 + 3) = &off_1E42B8560;
        *((_QWORD *)v114 + 29) = "BatchType/VData";
        *((_QWORD *)v114 + 30) = &ggl::RouteLine::defaultVboReflection;
        *((_QWORD *)v114 + 28) = &unk_1E42B8580;
        __p.__begin_ = (std::vector<unsigned int>::pointer)(v114 + 24);
        __p.__end_ = (std::vector<unsigned int>::pointer)v114;
        v118 = (std::__shared_weak_count *)operator new(0xF8uLL);
        v118->__shared_owners_ = 0;
        p_shared_owners = (unint64_t *)&v118->__shared_owners_;
        v118->__shared_weak_owners_ = 0;
        v118[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B5748;
        v120 = v118 + 1;
        v118->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF1E8;
        v118[1].__shared_owners_ = 2;
        LODWORD(v118[1].__shared_weak_owners_) = 257;
        v118[2].__vftable = 0;
        v118[2].__shared_owners_ = 0;
        v118[2].__shared_weak_owners_ = 0;
        v118[3].__vftable = (std::__shared_weak_count_vtbl *)(2 * v111);
        v121 = (std::__shared_count)0;
        *(_OWORD *)&v118[3].__shared_owners_ = 0u;
        v118[4].std::__shared_count = 0u;
        v118[4].__shared_weak_owners_ = 0;
        if ((v122 & 1) == 0)
        {
          v121 = (std::__shared_count)0;
          v120 = v118 + 1;
          if (v189)
          {
            v190 = operator new();
            ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v190, "GeoGL", 0xA3D02C1100000005);
            v121 = (std::__shared_count)0;
            v120 = v118 + 1;
          }
        }
        v118[5].__vftable = (std::__shared_weak_count_vtbl *)ggl::Allocator::instance(void)::alloc;
        v118[5].__shared_owners_ = 0;
        *((std::__shared_count *)v118 + 11) = v121;
        v118[8].std::__shared_count = v121;
        v118[8].__shared_weak_owners_ = 0;
        v118[9].__vftable = (std::__shared_weak_count_vtbl *)-1;
        *((std::__shared_count *)v118 + 10) = v121;
        v118[6].std::__shared_count = (std::__shared_count)xmmword_19FFB2DD0;
        LODWORD(v118[5].__shared_weak_owners_) = 0;
        LODWORD(v118[10].__vftable) = 0;
        v118[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6B88;
        v118[1].__shared_owners_ = 2;
        v118[9].__shared_owners_ = (uint64_t)&unk_1E42B6BA8;
        v118[9].__shared_weak_owners_ = (uint64_t)"BatchType/IData";
        v545 = v120;
        v559.i64[0] = (uint64_t)v120;
        v559.i64[1] = (uint64_t)v118;
        v123 = operator new();
        do
          v124 = __ldxr(v115);
        while (__stxr(v124 + 1, v115));
        do
          v125 = __ldxr(p_shared_owners);
        while (__stxr(v125 + 1, p_shared_owners));
        if ((v126 & 1) == 0
        {
          if ((v191 & 1) == 0
          {
            ggl::MeshTyped<ggl::RouteLine::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::RouteLine::defaultVboReflection;
          }
          ggl::MeshTyped<ggl::RouteLine::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::RouteLine::DefaultVbo>::attributesReflection(void)::r;
          unk_1ECE43E18 = 1;
        }
        *(_QWORD *)(v123 + 32) = 0;
        *(_QWORD *)(v123 + 40) = 0;
        *(_DWORD *)(v123 + 48) = 0;
        *(_QWORD *)v123 = &off_1E42BBC08;
        *(_QWORD *)(v123 + 8) = "BatchType/Mesh";
        *(_QWORD *)(v123 + 16) = &unk_1E42BBC28;
        *(_QWORD *)(v123 + 24) = 0;
        *(_QWORD *)(v123 + 56) = &ggl::MeshTyped<ggl::RouteLine::DefaultVbo>::typedReflection(void)::r;
        *(_QWORD *)(v123 + 64) = 0;
        v127 = v123 + 64;
        *(_QWORD *)(v123 + 72) = 0;
        *(_QWORD *)(v123 + 80) = 0;
        if ((v128 & 1) == 0)
        {
          v127 = v123 + 64;
          if (v192)
          {
            v193 = operator new();
            *(_QWORD *)(v193 + 16) = 0xA3D02C1100000005;
            *(_QWORD *)(v193 + 24) = "GeoGL";
            *(_OWORD *)(v193 + 32) = xmmword_19FFB2DE0;
            *(_QWORD *)v193 = &off_1E42B5668;
            *(_QWORD *)(v193 + 8) = "GeoGL";
            *(_OWORD *)(v193 + 72) = 0u;
            *(_OWORD *)(v193 + 88) = 0u;
            *(_OWORD *)(v193 + 104) = 0u;
            *(_OWORD *)(v193 + 120) = 0u;
            *(_OWORD *)(v193 + 136) = 0u;
            *(_OWORD *)(v193 + 152) = 0u;
            *(_OWORD *)(v193 + 168) = 0u;
            *(_OWORD *)(v193 + 184) = 0u;
            *(_OWORD *)(v193 + 200) = 0u;
            *(_OWORD *)(v193 + 216) = 0u;
            *(_OWORD *)(v193 + 232) = 0u;
            *(_QWORD *)(v193 + 248) = 0;
            *(_OWORD *)(v193 + 56) = 0u;
            v194 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v193 + 56), 0);
            if ((_DWORD)v194)
              geo::read_write_lock::logFailure(v194, (uint64_t)"initialization", v195);
            zone = malloc_create_zone(0, 0);
            *(_QWORD *)(v193 + 48) = zone;
            malloc_set_zone_name(zone, "GeoGL");
            *(_QWORD *)(v193 + 256) = os_log_create("com.apple.VectorKit", "Memory");
            ggl::Allocator::instance(void)::alloc = v193;
            v127 = v123 + 64;
          }
        }
        v129 = ggl::Allocator::instance(void)::alloc;
        *(_QWORD *)(v123 + 120) = 0;
        *(_QWORD *)(v123 + 96) = 0;
        *(_QWORD *)(v123 + 104) = 0;
        *(_QWORD *)(v123 + 88) = v129;
        if ((v129 & 1) == 0)
        {
          v529 = v127;
          v127 = v529;
          if (v197)
          {
            v198 = operator new();
            *(_QWORD *)(v198 + 16) = 0xA3D02C1100000005;
            *(_QWORD *)(v198 + 24) = "GeoGL";
            *(_OWORD *)(v198 + 32) = xmmword_19FFB2DE0;
            *(_QWORD *)v198 = &off_1E42B5668;
            *(_QWORD *)(v198 + 8) = "GeoGL";
            *(_OWORD *)(v198 + 72) = 0u;
            *(_OWORD *)(v198 + 88) = 0u;
            *(_OWORD *)(v198 + 104) = 0u;
            *(_OWORD *)(v198 + 120) = 0u;
            *(_OWORD *)(v198 + 136) = 0u;
            *(_OWORD *)(v198 + 152) = 0u;
            *(_OWORD *)(v198 + 168) = 0u;
            *(_OWORD *)(v198 + 184) = 0u;
            *(_OWORD *)(v198 + 200) = 0u;
            *(_OWORD *)(v198 + 216) = 0u;
            *(_OWORD *)(v198 + 232) = 0u;
            *(_QWORD *)(v198 + 248) = 0;
            v526 = v198;
            *(_OWORD *)(v198 + 56) = 0u;
            v199 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v198 + 56), 0);
            if ((_DWORD)v199)
              geo::read_write_lock::logFailure(v199, (uint64_t)"initialization", v200);
            v201 = malloc_create_zone(0, 0);
            *(_QWORD *)(v526 + 48) = v201;
            malloc_set_zone_name(v201, "GeoGL");
            *(_QWORD *)(v526 + 256) = os_log_create("com.apple.VectorKit", "Memory");
            ggl::Allocator::instance(void)::alloc = v526;
            v127 = v529;
          }
        }
        *(_QWORD *)(v123 + 128) = ggl::Allocator::instance(void)::alloc;
        *(_QWORD *)(v123 + 136) = 0;
        *(_QWORD *)(v123 + 112) = v123 + 120;
        *(_QWORD *)v123 = &off_1E42BE1B8;
        *(_QWORD *)(v123 + 16) = &unk_1E42BE1D8;
        *(_QWORD *)&v563 = v114 + 24;
        *((_QWORD *)&v563 + 1) = v114;
        do
          v130 = __ldxr(v115);
        while (__stxr(v130 + 1, v115));
        std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__assign_with_size[abi:nn180100]<std::shared_ptr<ggl::VertexData> const*,std::shared_ptr<ggl::VertexData> const*>(v127, (uint64_t *)&v563, (uint64_t *)&v564, 1uLL);
        v131 = (std::__shared_weak_count *)*((_QWORD *)&v563 + 1);
        if (*((_QWORD *)&v563 + 1))
        {
          v132 = (unint64_t *)(*((_QWORD *)&v563 + 1) + 8);
          do
            v133 = __ldaxr(v132);
          while (__stlxr(v133 - 1, v132));
          if (!v133)
          {
            ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
            std::__shared_weak_count::__release_weak(v131);
          }
        }
        do
          v134 = __ldxr(p_shared_owners);
        while (__stxr(v134 + 1, p_shared_owners));
        v135 = *(std::__shared_weak_count **)(v123 + 104);
        *(_QWORD *)(v123 + 96) = v545;
        *(_QWORD *)(v123 + 104) = v118;
        if (v135)
        {
          v136 = (unint64_t *)&v135->__shared_owners_;
          do
            v137 = __ldaxr(v136);
          while (__stlxr(v137 - 1, v136));
          if (!v137)
          {
            ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
            std::__shared_weak_count::__release_weak(v135);
          }
        }
        *(_QWORD *)v123 = &off_1E42BE3A8;
        *(_QWORD *)(v123 + 16) = &unk_1E42BE3C8;
        do
          v138 = __ldaxr(p_shared_owners);
        while (__stlxr(v138 - 1, p_shared_owners));
        a1 = v502;
        if (!v138)
        {
          ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
          std::__shared_weak_count::__release_weak(v118);
        }
        do
          v139 = __ldaxr(v115);
        while (__stlxr(v139 - 1, v115));
        v113 = v542;
        if (!v139)
        {
          (*(void (**)(char *))(*(_QWORD *)v114 + 16))(v114);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v114);
        }
        v141 = *(uint64_t **)(v502 + 40);
        v140 = *(_QWORD *)(v502 + 48);
        if ((unint64_t)v141 < v140)
        {
          *v141 = v123;
          v142 = v141 + 1;
          v20 = v537;
          goto LABEL_170;
        }
        v143 = (uint64_t *)*v520;
        v144 = (char *)v141 - (_BYTE *)*v520;
        v145 = v144 >> 3;
        v146 = (v144 >> 3) + 1;
        if (v146 >> 61)
          abort();
        v147 = v140 - (_QWORD)v143;
        if (v147 >> 2 > v146)
          v146 = v147 >> 2;
        if ((unint64_t)v147 >= 0x7FFFFFFFFFFFFFF8)
          v148 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v148 = v146;
        if (v148)
        {
          if (v148 >> 61)
            goto LABEL_394;
          v149 = operator new(8 * v148);
        }
        else
        {
          v149 = 0;
        }
        v150 = (uint64_t *)&v149[8 * v145];
        *v150 = v123;
        v142 = v150 + 1;
        if (v141 == v143)
        {
          v143 = v141;
          a1 = v502;
        }
        else
        {
          v151 = (char *)(v141 - 1) - (char *)v143;
          if (v151 >= 0x58)
          {
            v152 = (char *)v141 - &v149[v144];
            a1 = v502;
            if (v152 < 0x20)
              goto LABEL_165;
            v153 = (v151 >> 3) + 1;
            v154 = &v149[8 * v145 - 16];
            v155 = v141 - 2;
            v156 = v153 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v157 = *(_OWORD *)v155;
              *(v154 - 1) = *((_OWORD *)v155 - 1);
              *v154 = v157;
              v154 -= 2;
              v155 -= 4;
              v156 -= 4;
            }
            while (v156);
            v150 -= v153 & 0x3FFFFFFFFFFFFFFCLL;
            v141 -= v153 & 0x3FFFFFFFFFFFFFFCLL;
            if (v153 != (v153 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_165;
          }
          else
          {
            a1 = v502;
            do
            {
LABEL_165:
              v158 = *--v141;
              *--v150 = v158;
            }
            while (v141 != v143);
            v143 = (uint64_t *)*v520;
          }
        }
        *(_QWORD *)(a1 + 32) = v150;
        *(_QWORD *)(a1 + 40) = v142;
        *(_QWORD *)(a1 + 48) = &v149[8 * v148];
        if (v143)
          operator delete(v143);
        v20 = v537;
        v113 = v542;
LABEL_170:
        *(_QWORD *)(a1 + 40) = v142;
        v19 = &off_19FFB1000;
        if (v109 < v110)
        {
          v159 = 0;
          v160 = v109;
          do
          {
            v161 = *(_QWORD *)&v20[8 * v160];
            v162 = *(_QWORD *)(v161 + 32);
            v163 = v162 + v159;
            v164 = *(_QWORD *)(v161 + 40) + v159;
            *(_QWORD *)(v161 + 32) = v163;
            *(_QWORD *)(v161 + 40) = v164;
            v159 = v164 - v162;
            ++v160;
          }
          while (v110 != v160);
          v165 = 0;
          do
          {
            v166 = *(uint64_t **)&v20[8 * v109];
            v167 = *v166;
            v168 = *v166 + v165;
            v169 = v166[1] + v165;
            *v166 = v168;
            v166[1] = v169;
            v170 = v166[2];
            v171 = v170 + v159;
            v172 = v166[3] + v159;
            v166[2] = v171;
            v166[3] = v172;
            v166[11] = v123;
            v173 = (_QWORD *)v166[7];
            v174 = (_QWORD *)v166[8];
            if (v173 != v174)
            {
              v175 = v166[4];
              do
              {
                v176 = (_QWORD *)*v173++;
                v177 = v176[2] - v176[1];
                v176[1] = v168;
                v168 += v177;
                v178 = v176[4] - v176[3];
                v176[2] = v168;
                v176[3] = v171;
                v171 += v178;
                v179 = v176[6] - v176[5];
                v176[4] = v171;
                v176[5] = v175;
                v175 += v179;
                v176[6] = v175;
              }
              while (v173 != v174);
            }
            v165 = v169 - v167;
            v159 = v172 - v170;
            ++v109;
          }
          while (v109 != v110);
        }
        v180 = (std::__shared_weak_count *)v559.i64[1];
        if (!v559.i64[1])
          goto LABEL_183;
        v181 = (unint64_t *)(v559.i64[1] + 8);
        do
          v182 = __ldaxr(v181);
        while (__stlxr(v182 - 1, v181));
        if (!v182)
        {
          ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
          std::__shared_weak_count::__release_weak(v180);
          end = (std::__shared_weak_count *)__p.__end_;
          if (__p.__end_)
          {
LABEL_184:
            v184 = (unint64_t *)&end->__shared_owners_;
            do
              v185 = __ldaxr(v184);
            while (__stlxr(v185 - 1, v184));
            if (!v185)
            {
              ((void (*)(std::__shared_weak_count *))end->__on_zero_shared)(end);
              std::__shared_weak_count::__release_weak(end);
            }
          }
        }
        else
        {
LABEL_183:
          end = (std::__shared_weak_count *)__p.__end_;
          if (__p.__end_)
            goto LABEL_184;
        }
        v112 = 0;
        v111 = 0;
        v109 = v110;
      }
      if (v110 < v113)
      {
        v186 = *(_QWORD **)&v20[8 * v110];
        v112 = v186[1] + v112 - *v186;
        v111 = v186[3] + v111 + v186[5] - (v186[2] + v186[4]);
      }
      if (++v110 <= v113)
        continue;
      break;
    }
    if (v20)
      operator delete(v20);
    if (*(_QWORD *)v556)
      operator delete(*(void **)v556);
    *(_QWORD *)a1 = &off_1E428C840;
    *(_QWORD *)(a1 + 248) = *v518;
    v202 = v518[1];
    *(_QWORD *)(a1 + 256) = v202;
    if (v202)
    {
      v203 = (unint64_t *)(v202 + 8);
      do
        v204 = __ldxr(v203);
      while (__stxr(v204 + 1, v203));
    }
    *(_QWORD *)(a1 + 264) = *v516;
    v205 = v516[1];
    *(_QWORD *)(a1 + 272) = v205;
    if (v205)
    {
      v206 = (unint64_t *)(v205 + 8);
      do
        v207 = __ldxr(v206);
      while (__stxr(v207 + 1, v206));
    }
    *(_QWORD *)(a1 + 280) = 0;
    v208 = *(_QWORD *)(a1 + 8);
    v500 = *(_QWORD *)(a1 + 16);
    if (v208 != v500)
    {
      v209 = 1.0;
      v210 = (float32x2_t)vdup_n_s32(0x2EDBE6FFu);
      v508 = v210;
      do
      {
        v501 = v208;
        v211 = *(uint64_t ***)(*(_QWORD *)v208 + 2424);
        v212 = *(uint64_t ***)(*(_QWORD *)v208 + 2432);
        v503 = v212;
        while (v211 != v212)
        {
          v213 = 0;
          v214 = *v211;
          v215 = **(_QWORD **)((*v211)[11] + 64);
          v216 = **v211;
          v217 = (*v211)[1];
          v563 = 0uLL;
          v218 = *(_QWORD *)(v215 + 8);
          v219 = v218 * v216;
          v220 = v218 * v217;
          if (v218 * v217 != v218 * v216)
          {
            if (a2 && *(_BYTE *)(v215 + 17) != 2)
              v213 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 56))(a2, v215, v219, v218 * v217, 1, 1);
            else
              v213 = *(_QWORD *)(v215 + 72) + v219;
          }
          v506 = v211;
          *(_QWORD *)&v221 = a2;
          *((_QWORD *)&v221 + 1) = v215;
          v563 = v221;
          v564 = v219;
          v565 = v220;
          v567 = v213;
          v566 = 257;
          v222 = v214[2];
          v224 = v214[4];
          v223 = v214[5];
          if (v223 == v224)
          {
            v223 = v214[3];
          }
          else
          {
            if (v224 < v222)
              v222 = v214[4];
            if (v214[3] > v223)
              v223 = v214[3];
          }
          v225 = 0;
          v226 = *(_QWORD *)(v214[11] + 96);
          __p.__begin_ = 0;
          __p.__end_ = 0;
          v227 = *(_QWORD *)(v226 + 8);
          v228 = (unsigned int *)(v227 * v222);
          v229 = (unsigned int *)(v227 * v223);
          if (v227 * v223 != v227 * v222)
          {
            if (a2 && *(_BYTE *)(v226 + 17) != 2)
              v225 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, unsigned int *, uint64_t, uint64_t))(*(_QWORD *)a2 + 56))(a2, v226, v227 * v222, v229, 1, 1);
            else
              v225 = (uint64_t)v228 + *(_QWORD *)(v226 + 72);
          }
          *(_QWORD *)&v230 = a2;
          *((_QWORD *)&v230 + 1) = v226;
          *(_OWORD *)&__p.__begin_ = v230;
          __p.__end_cap_.__value_ = v228;
          v553 = v229;
          v555 = v225;
          v554 = 257;
          v231 = v214[2];
          v232 = v214[4];
          memset(v551, 0, sizeof(v551));
          memset(&v550, 0, sizeof(v550));
          v507 = v214;
          v505 = v214 + 7;
          v233 = (uint64_t *)v214[8];
          if ((uint64_t *)v214[7] != v233)
          {
            v234 = v213;
            v235 = (uint64_t *)v214[7];
            v514 = v225 + 2 * v231 - 2 * v222;
            v236 = v225 + 2 * v232 - 2 * v222;
            v511 = (uint64_t *)v214[8];
            while (1)
            {
              v238 = *v235;
              *(_OWORD *)v556 = xmmword_19FFB2F60;
              *(_OWORD *)&v556[16] = xmmword_19FFB2F70;
              v239 = *(_QWORD *)(v238 + 16);
              if (v239 != *(_QWORD *)(v238 + 8))
                break;
              v237 = *(_QWORD *)(v238 + 16);
LABEL_245:
              v234 += 48 * (v237 - v239);
              v514 += 2 * (*(_QWORD *)(v238 + 32) - *(_QWORD *)(v238 + 24));
              v236 += 2 * (*(_QWORD *)(v238 + 48) - *(_QWORD *)(v238 + 40));
              if (++v235 == v233)
                goto LABEL_343;
            }
            v513 = (_WORD *)v236;
            v562 = 1;
            md::Ribbons::RibbonWriter<md::Ribbons::RouteStyledOverlayRibbonDescriptor>::eliminateDuplicates(v238, (uint64_t)v551, &v550, (uint64_t *)&v562);
            v241 = v562;
            v236 = (uint64_t)v513;
            if (v562 >= 2)
            {
              v512 = v562 - 2;
              v242 = (float *)v551[0];
              v243 = *(float32x2_t *)v551[0];
              if (v562 >= 0xA)
              {
                v247 = (v562 - 1) & 7;
                if (!v247)
                  v247 = 8;
                v244 = v562 - 1 - v247;
                v240.i64[1] = *(_QWORD *)v551[0];
                v248 = (int8x16_t)vdupq_lane_s32((int32x2_t)v243, 0);
                v249 = (int32x4_t *)((char *)v551[0] + 60);
                v250 = 0uLL;
                v251 = v244;
                v252 = 0uLL;
                do
                {
                  i32 = (const float *)v249[-3].i32;
                  v570 = vld3q_f32(i32);
                  v255 = v249[1];
                  v254 = v249[2];
                  v256 = *v249;
                  v249 += 6;
                  v257.i64[0] = __PAIR64__(v256.u32[3], v256.u32[0]);
                  v258 = (float32x4_t)vrev64q_s32(v255);
                  v258.i32[0] = v256.i32[1];
                  v257.i64[1] = __PAIR64__(v254.u32[1], v255.u32[2]);
                  v258.i32[3] = v254.i32[2];
                  v259 = vsubq_f32(v570.val[0], (float32x4_t)vextq_s8(v248, (int8x16_t)v570.val[0], 0xCuLL));
                  v260 = vsubq_f32((float32x4_t)v257, (float32x4_t)vextq_s8((int8x16_t)v570.val[0], v257, 0xCuLL));
                  v261 = vsubq_f32(v570.val[1], (float32x4_t)vextq_s8(v240, (int8x16_t)v570.val[1], 0xCuLL));
                  v570.val[0] = vsubq_f32(v258, (float32x4_t)vextq_s8((int8x16_t)v570.val[1], (int8x16_t)v258, 0xCuLL));
                  v250 = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(v259, v259), v261, v261)), v250);
                  v252 = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(v260, v260), v570.val[0], v570.val[0])), v252);
                  v240 = (int8x16_t)v258;
                  v248 = v257;
                  v251 -= 8;
                }
                while (v251);
                v246 = *(float32x2_t *)((char *)v254.i64 + 4);
                v262 = vaddq_f32(v252, v250);
                v245 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v262, v262));
              }
              else
              {
                v244 = 0;
                v245 = 0.0;
                v246 = *(float32x2_t *)v551[0];
              }
              begin = v550.__begin_;
              v263 = v244 + 1;
              v264 = (char *)v551[0] + 12 * v244 + 12;
              do
              {
                v265 = *(float32x2_t *)v264;
                v264 = (_QWORD *)((char *)v264 + 12);
                v266 = vsub_f32(v265, v246);
                v245 = sqrtf(vaddv_f32(vmul_f32(v266, v266))) + v245;
                ++v263;
                v246 = v265;
              }
              while (v562 != v263);
              v267 = v245;
              v268 = v209 / v245;
              if (v267 <= 1.0e-10)
                v268 = 0.0;
              v524 = v268;
              v269 = (float32x2_t *)((char *)v551[0] + 12);
              v270 = sqrtf((float)((float)(*((float *)v551[0] + 3) - v243.f32[0])* (float)(*((float *)v551[0] + 3) - v243.f32[0]))+ (float)((float)(*((float *)v551[0] + 4) - v243.f32[1])* (float)(*((float *)v551[0] + 4) - v243.f32[1])));
              v271 = 1;
              while (1)
              {
                v272 = vcgt_f32(v210, vabd_f32(*v269, v243));
                if ((v272.i32[0] & v272.i32[1] & 1) == 0)
                  break;
                ++v271;
                v269 = (float32x2_t *)((char *)v269 + 12);
                if (v562 == v271)
                {
                  v273 = (float32x2_t)1065353216;
                  goto LABEL_264;
                }
              }
              v274 = vsub_f32(*v269, v243);
              v273 = vmul_n_f32(v274, v209 / sqrtf(vaddv_f32(vmul_f32(v274, v274))));
LABEL_264:
              v275 = *v550.__begin_;
              v276 = *((_DWORD *)v551[0] + 2);
              v558 = 0;
              v560 = -v273.f32[1];
              v561 = v273.f32[0];
              v277 = v234;
              if (*(_BYTE *)(v238 + 96))
              {
                v278 = (float32x2_t)vdup_lane_s32((int32x2_t)v273, 0);
                v278.f32[0] = -v273.f32[1];
                *(float32x2_t *)v559.f32 = vsub_f32(v278, v273);
                v559.f32[2] = v273.f32[1] - v273.f32[0];
                v559.f32[3] = -(float)(v273.f32[1] + v273.f32[0]);
                v557 = xmmword_19FFB2F80;
                v279 = *(_QWORD *)(v238 + 104) + 12 * v275;
                v280 = *(_BYTE *)(v279 + 8);
                v281 = *(_BYTE *)(v279 + 9);
                v282 = *(_DWORD *)v279;
                v278.i32[0] = *(_DWORD *)(v279 + 4);
                *(float32x2_t *)v234 = v243;
                *(_DWORD *)(v234 + 8) = v276;
                v283.i64[0] = v559.i64[0];
                v283.i64[1] = 0xBF8000003F800000;
                v284.i64[0] = 0xBF000000BF000000;
                v284.i64[1] = 0xBF000000BF000000;
                *(int16x4_t *)(v234 + 16) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v284, (float32x4_t)xmmword_19FFB2FA0, v283)));
                v283.i32[0] = *(_DWORD *)(v238 + 100);
                *(_BYTE *)(v234 + 36) = v280;
                *(_BYTE *)(v234 + 37) = v281;
                *(_DWORD *)(v234 + 28) = v282;
                *(_DWORD *)(v234 + 32) = v278.i32[0];
                *(_DWORD *)(v234 + 24) = v283.i32[0];
                *(float32x2_t *)(v234 + 48) = v243;
                *(_DWORD *)(v234 + 56) = v276;
                v283.i64[0] = v559.i64[1];
                v284.i32[2] = v558;
                v283.i64[1] = *((_QWORD *)&v557 + 1);
                v285.i64[0] = 0xBF000000BF000000;
                v285.i64[1] = 0xBF000000BF000000;
                *(int16x4_t *)(v234 + 64) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v285, (float32x4_t)xmmword_19FFB2FA0, v283)));
                v283.f32[0] = *(float *)(v238 + 100) + v284.f32[2];
                *(_BYTE *)(v234 + 84) = v280;
                *(_BYTE *)(v234 + 85) = v281;
                *(_DWORD *)(v234 + 76) = v282;
                *(_DWORD *)(v234 + 80) = v278.i32[0];
                *(float *)(v234 + 72) = v283.f32[0];
                v277 = v234 + 96;
              }
              v509 = v235;
              v510 = v234;
              *(float32x2_t *)&v559.i32[1] = v273;
              v559.f32[0] = -v273.f32[1];
              v559.f32[3] = -v273.f32[0];
              v557 = xmmword_19FFB2FB0;
              v286 = *(_QWORD *)(v238 + 104) + 12 * v275;
              v287 = *(_BYTE *)(v286 + 8);
              v288 = *(_BYTE *)(v286 + 9);
              v289 = *(_DWORD *)v286;
              v290 = *(_DWORD *)(v286 + 4);
              *(float32x2_t *)v277 = v243;
              *(_DWORD *)(v277 + 8) = v276;
              v291.i64[0] = v559.i64[0];
              v291.i64[1] = v557;
              v292.i64[0] = 0xBF000000BF000000;
              v292.i64[1] = 0xBF000000BF000000;
              *(int16x4_t *)(v277 + 16) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v292, (float32x4_t)xmmword_19FFB2FA0, v291)));
              v291.f32[0] = *(float *)(v238 + 100) + *(float *)&v558;
              *(_BYTE *)(v277 + 36) = v287;
              *(_BYTE *)(v277 + 37) = v288;
              *(_DWORD *)(v277 + 28) = v289;
              *(_DWORD *)(v277 + 32) = v290;
              *(_DWORD *)(v277 + 24) = v291.i32[0];
              *(float32x2_t *)(v277 + 48) = v243;
              *(_DWORD *)(v277 + 56) = v276;
              v293.i64[0] = v559.i64[1];
              v294 = *(float *)&v558;
              v293.i64[1] = *((_QWORD *)&v557 + 1);
              v291.i64[0] = 0xBF000000BF000000;
              v291.i64[1] = 0xBF000000BF000000;
              *(int16x4_t *)(v277 + 64) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v291, (float32x4_t)xmmword_19FFB2FA0, v293)));
              v293.f32[0] = *(float *)(v238 + 100) + v294;
              *(_BYTE *)(v277 + 84) = v287;
              *(_BYTE *)(v277 + 85) = v288;
              *(_DWORD *)(v277 + 76) = v289;
              *(_DWORD *)(v277 + 80) = v290;
              *(float *)(v277 + 72) = v293.f32[0];
              v295 = v277 + 96;
              v527 = v241 - 1;
              if (v241 - 1 >= 2)
              {
                v519 = v241;
                v521 = v242;
                v296 = v242 + 7;
                v297 = v512;
                v298 = 1;
                while (1)
                {
                  v315 = &v242[3 * v298];
                  v317 = *v315;
                  v316 = v315[1];
                  v318 = v298 + 1;
                  if (v298 + 1 >= v519)
                  {
LABEL_279:
                    v330 = (float32x2_t)vdup_lane_s32((int32x2_t)v273, 1);
                    v329 = (unint64_t)v273;
                    v327 = v273.f32[0];
                  }
                  else
                  {
                    v319 = v296;
                    v320 = v297;
                    while (1)
                    {
                      v321 = *(v319 - 1);
                      v322 = vabds_f32(*v319, v316);
                      if (vabds_f32(v321, v317) >= 1.0e-10 || v322 >= 1.0e-10)
                        break;
                      v319 += 3;
                      if (!--v320)
                        goto LABEL_279;
                    }
                    v324 = v321 - v317;
                    v325 = *v319 - v316;
                    v326 = v209 / sqrtf((float)(v324 * v324) + (float)(v325 * v325));
                    v327 = v326 * v324;
                    *(float *)&v328 = v326 * v325;
                    v329 = __PAIR64__(v326 * v325, LODWORD(v327));
                    v330 = (float32x2_t)__PAIR64__(v273.u32[1], v328);
                  }
                  v331 = v327 + v273.f32[0];
                  v332 = vaddv_f32(v330);
                  v333 = (float)(v331 * v331) + (float)(v332 * v332);
                  v540 = v329;
                  v532 = v273.f32[0];
                  if (v333 <= 0.0)
                  {
                    v336 = v273.f32[1];
                    v335 = v273.f32[0];
                  }
                  else
                  {
                    v334 = v209 / sqrtf(v333);
                    v335 = -(float)(v332 * v334);
                    v336 = v334 * v331;
                  }
                  v337 = begin[v298];
                  v538 = v315[4];
                  v338 = v330.f32[1];
                  v339 = *((_DWORD *)v315 + 2);
                  v535 = v315[3];
                  v543 = v270;
                  *(float *)&v558 = v270;
                  *((float *)&v558 + 1) = v270 * v524;
                  v557 = xmmword_19FFB2FB0;
                  v560 = v335;
                  v561 = v336;
                  v546 = v330.f32[0];
                  v548 = v327;
                  v340 = atan2f(v330.f32[0], v327);
                  v341 = v340 - atan2f(v338, v532);
                  v342 = v341;
                  v343 = *((double *)v19 + 322);
                  if (v341 <= v343)
                  {
                    if (v342 >= -3.14159265)
                      goto LABEL_288;
                    v344 = 6.28318531;
                  }
                  else
                  {
                    v344 = -6.28318531;
                  }
                  v341 = v342 + v344;
LABEL_288:
                  v345 = sqrtf(fmaxf(-(float)((float)((float)((float)(v335 * v548) + (float)(v336 * v546))* (float)((float)(v335 * v548) + (float)(v336 * v546)))+ -1.0), 0.1));
                  v346 = v335 / v345;
                  v347 = v336 / v345;
                  v348 = fabsf(v341);
                  v349 = (unint64_t)fmaxf(ceilf(v348 * 5.7296), v209);
                  if (v349 < 2)
                  {
                    v559.i64[0] = __PAIR64__(LODWORD(v347), LODWORD(v346));
                    v559.f32[2] = -v346;
                    v559.f32[3] = -v347;
                    v299 = *(_QWORD *)(v238 + 104) + 12 * v337;
                    v300 = *(_BYTE *)(v299 + 8);
                    v301 = *(_BYTE *)(v299 + 9);
                    v302 = *(_DWORD *)v299;
                    v303 = *(_DWORD *)(v299 + 4);
                    *(float *)v295 = v317;
                    *(float *)(v295 + 4) = v316;
                    *(_DWORD *)(v295 + 8) = v339;
                    v304.i64[0] = v559.i64[0];
                    v304.i64[1] = v557;
                    v305.i64[0] = 0xBF000000BF000000;
                    v305.i64[1] = 0xBF000000BF000000;
                    v306 = (float32x4_t)xmmword_19FFB2FA0;
                    *(int16x4_t *)(v295 + 16) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v305, (float32x4_t)xmmword_19FFB2FA0, v304)));
                    v304.f32[0] = *(float *)(v238 + 100) + *(float *)&v558;
                    *(_BYTE *)(v295 + 36) = v300;
                    *(_BYTE *)(v295 + 37) = v301;
                    *(_DWORD *)(v295 + 28) = v302;
                    *(_DWORD *)(v295 + 32) = v303;
                    *(_DWORD *)(v295 + 24) = v304.i32[0];
                    *(float *)(v295 + 48) = v317;
                    *(float *)(v295 + 52) = v316;
                    *(_DWORD *)(v295 + 56) = v339;
                    v307 = *(float *)&v558;
                    v308.i64[0] = v559.i64[1];
                    v308.i64[1] = *((_QWORD *)&v557 + 1);
                    v242 = v521;
                    goto LABEL_269;
                  }
                  v533 = (float32x2_t)__PAIR64__(LODWORD(v347), LODWORD(v346));
                  v547 = v336 / v345;
                  v549 = v335 / v345;
                  v517 = *((double *)v19 + 322);
                  v515 = v348;
                  if (v348 >= 1.5708)
                  {
                    for (i = 0; i != v349; ++i)
                    {
                      v356 = __sincosf_stret((float)((float)((float)(int)i * (float)(v209 / (float)((float)v349 + -1.0))) + -0.5)* v341);
                      v560 = -(float)((float)(v336 * v356.__sinval) - (float)(v335 * v356.__cosval));
                      v561 = (float)(v335 * v356.__sinval) + (float)(v336 * v356.__cosval);
                      v559.f32[0] = v560;
                      v559.f32[1] = v561;
                      v559.f32[2] = -(float)((float)(v335 * v356.__cosval) - (float)(v336 * v356.__sinval));
                      v559.f32[3] = -v561;
                      v357 = *(_QWORD *)(v238 + 104) + 12 * v337;
                      v358 = *(_BYTE *)(v357 + 8);
                      v359 = *(_BYTE *)(v357 + 9);
                      v360 = *(_DWORD *)v357;
                      v361 = *(_DWORD *)(v357 + 4);
                      *(float *)v295 = v317;
                      *(float *)(v295 + 4) = v316;
                      *(_DWORD *)(v295 + 8) = v339;
                      v362.i64[0] = v559.i64[0];
                      v362.i64[1] = v557;
                      v363.i64[0] = 0xBF000000BF000000;
                      v363.i64[1] = 0xBF000000BF000000;
                      *(int16x4_t *)(v295 + 16) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v363, (float32x4_t)xmmword_19FFB2FA0, v362)));
                      v362.f32[0] = *(float *)(v238 + 100) + *(float *)&v558;
                      *(_BYTE *)(v295 + 36) = v358;
                      *(_BYTE *)(v295 + 37) = v359;
                      *(_DWORD *)(v295 + 28) = v360;
                      *(_DWORD *)(v295 + 32) = v361;
                      *(_DWORD *)(v295 + 24) = v362.i32[0];
                      *(float *)(v295 + 48) = v317;
                      *(float *)(v295 + 52) = v316;
                      *(_DWORD *)(v295 + 56) = v339;
                      v362.i64[0] = v559.i64[1];
                      v363.i32[2] = v558;
                      v362.i64[1] = *((_QWORD *)&v557 + 1);
                      v364.i64[0] = 0xBF000000BF000000;
                      v364.i64[1] = 0xBF000000BF000000;
                      *(int16x4_t *)(v295 + 64) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v364, (float32x4_t)xmmword_19FFB2FA0, v362)));
                      v362.f32[0] = *(float *)(v238 + 100) + v363.f32[2];
                      *(_BYTE *)(v295 + 84) = v358;
                      *(_BYTE *)(v295 + 85) = v359;
                      *(_DWORD *)(v295 + 76) = v360;
                      *(_DWORD *)(v295 + 80) = v361;
                      *(float *)(v295 + 72) = v362.f32[0];
                      v295 += 96;
                    }
                  }
                  else
                  {
                    if (v341 >= 0.0)
                    {
                      v559.f32[0] = v335 / v345;
                      v559.f32[1] = v336 / v345;
                      v365 = v343 - v341;
                      v366 = __sincosf_stret(v365);
                      v367 = (float32x2_t)vrev64_s32((int32x2_t)vmul_n_f32(v533, v366.__sinval));
                      v368 = vmul_n_f32(v533, v366.__cosval);
                      v354.i32[0] = vsub_f32(v368, v367).u32[0];
                      v354.i32[1] = vadd_f32(v368, v367).i32[1];
                    }
                    else
                    {
                      v350 = -3.14159265 - v341;
                      v352 = __sincosf_stret(v350);
                      v351.f32[0] = v352.__cosval;
                      v353.f32[0] = -v352.__sinval;
                      v353.i32[1] = LODWORD(v352.__sinval);
                      *(float32x2_t *)v559.f32 = vmls_lane_f32((float32x2_t)vrev64_s32((int32x2_t)vmul_f32(v533, v353)), v533, v351, 0);
                      v354 = vneg_f32(v533);
                    }
                    *(float32x2_t *)&v559.u32[2] = v354;
                    v369 = *(_QWORD *)(v238 + 104) + 12 * v337;
                    v370 = *(_BYTE *)(v369 + 8);
                    v371 = *(_BYTE *)(v369 + 9);
                    v372 = *(_DWORD *)v369;
                    v373 = *(_DWORD *)(v369 + 4);
                    *(float *)v295 = v317;
                    *(float *)(v295 + 4) = v316;
                    *(_DWORD *)(v295 + 8) = v339;
                    v374.i64[0] = v559.i64[0];
                    v374.i64[1] = v557;
                    v375.i64[0] = 0xBF000000BF000000;
                    v375.i64[1] = 0xBF000000BF000000;
                    *(int16x4_t *)(v295 + 16) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v375, (float32x4_t)xmmword_19FFB2FA0, v374)));
                    v374.f32[0] = *(float *)(v238 + 100) + *(float *)&v558;
                    *(_BYTE *)(v295 + 36) = v370;
                    *(_BYTE *)(v295 + 37) = v371;
                    *(_DWORD *)(v295 + 28) = v372;
                    *(_DWORD *)(v295 + 32) = v373;
                    *(_DWORD *)(v295 + 24) = v374.i32[0];
                    *(float *)(v295 + 48) = v317;
                    *(float *)(v295 + 52) = v316;
                    *(_DWORD *)(v295 + 56) = v339;
                    v374.i64[0] = v559.i64[1];
                    v375.i32[2] = v558;
                    v374.i64[1] = *((_QWORD *)&v557 + 1);
                    v376.i64[0] = 0xBF000000BF000000;
                    v376.i64[1] = 0xBF000000BF000000;
                    *(int16x4_t *)(v295 + 64) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v376, (float32x4_t)xmmword_19FFB2FA0, v374)));
                    v374.f32[0] = *(float *)(v238 + 100) + v375.f32[2];
                    *(_BYTE *)(v295 + 84) = v370;
                    *(_BYTE *)(v295 + 85) = v371;
                    *(_DWORD *)(v295 + 76) = v372;
                    *(_DWORD *)(v295 + 80) = v373;
                    *(float *)(v295 + 72) = v374.f32[0];
                    v295 += 96;
                    v377 = v209 / (float)((float)v349 + -1.0);
                    v378 = 0;
                    if (v341 >= 0.0)
                    {
                      do
                      {
                        v390 = __sincosf_stret((float)((float)(v377 * (float)(int)v378) + -0.5) * v341);
                        v389 = v549;
                        v560 = -(float)((float)(v336 * v390.__sinval) - (float)(v335 * v390.__cosval));
                        v561 = (float)(v335 * v390.__sinval) + (float)(v336 * v390.__cosval);
                        v559.i64[0] = __PAIR64__(LODWORD(v547), LODWORD(v549));
                        v559.f32[2] = -(float)((float)(v335 * v390.__cosval) - (float)(v336 * v390.__sinval));
                        v559.f32[3] = -v561;
                        v391 = *(_QWORD *)(v238 + 104) + 12 * v337;
                        v392 = *(_BYTE *)(v391 + 8);
                        v393 = *(_BYTE *)(v391 + 9);
                        v394 = *(_DWORD *)v391;
                        v395 = *(_DWORD *)(v391 + 4);
                        *(float *)v295 = v317;
                        *(float *)(v295 + 4) = v316;
                        *(_DWORD *)(v295 + 8) = v339;
                        v396.i64[0] = v559.i64[0];
                        v396.i64[1] = v557;
                        v397.i64[0] = 0xBF000000BF000000;
                        v397.i64[1] = 0xBF000000BF000000;
                        *(int16x4_t *)(v295 + 16) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v397, (float32x4_t)xmmword_19FFB2FA0, v396)));
                        v396.f32[0] = *(float *)(v238 + 100) + *(float *)&v558;
                        *(_BYTE *)(v295 + 36) = v392;
                        *(_BYTE *)(v295 + 37) = v393;
                        *(_DWORD *)(v295 + 28) = v394;
                        *(_DWORD *)(v295 + 32) = v395;
                        *(_DWORD *)(v295 + 24) = v396.i32[0];
                        *(float *)(v295 + 48) = v317;
                        *(float *)(v295 + 52) = v316;
                        *(_DWORD *)(v295 + 56) = v339;
                        v396.i64[0] = v559.i64[1];
                        v397.i32[2] = v558;
                        v396.i64[1] = *((_QWORD *)&v557 + 1);
                        v398.i64[0] = 0xBF000000BF000000;
                        v398.i64[1] = 0xBF000000BF000000;
                        *(int16x4_t *)(v295 + 64) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v398, (float32x4_t)xmmword_19FFB2FA0, v396)));
                        v396.f32[0] = *(float *)(v238 + 100) + v397.f32[2];
                        *(_BYTE *)(v295 + 84) = v392;
                        *(_BYTE *)(v295 + 85) = v393;
                        *(_DWORD *)(v295 + 76) = v394;
                        *(_DWORD *)(v295 + 80) = v395;
                        *(float *)(v295 + 72) = v396.f32[0];
                        v295 += 96;
                        ++v378;
                      }
                      while (v349 != v378);
                      v19 = &off_19FFB1000;
                      v209 = 1.0;
                      goto LABEL_302;
                    }
                    v379 = vneg_f32(v533);
                    do
                    {
                      v380 = __sincosf_stret((float)((float)(v377 * (float)(int)v378) + -0.5) * v341);
                      v560 = -(float)((float)(v336 * v380.__sinval) - (float)(v335 * v380.__cosval));
                      v561 = (float)(v335 * v380.__sinval) + (float)(v336 * v380.__cosval);
                      v559.f32[0] = v560;
                      v559.f32[1] = v561;
                      *(float32x2_t *)&v559.u32[2] = v379;
                      v381 = *(_QWORD *)(v238 + 104) + 12 * v337;
                      v382 = *(_BYTE *)(v381 + 8);
                      v383 = *(_BYTE *)(v381 + 9);
                      v384 = *(_DWORD *)v381;
                      v385 = *(_DWORD *)(v381 + 4);
                      *(float *)v295 = v317;
                      *(float *)(v295 + 4) = v316;
                      *(_DWORD *)(v295 + 8) = v339;
                      v386.i64[0] = v559.i64[0];
                      v386.i64[1] = v557;
                      v387.i64[0] = 0xBF000000BF000000;
                      v387.i64[1] = 0xBF000000BF000000;
                      *(int16x4_t *)(v295 + 16) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v387, (float32x4_t)xmmword_19FFB2FA0, v386)));
                      v386.f32[0] = *(float *)(v238 + 100) + *(float *)&v558;
                      *(_BYTE *)(v295 + 36) = v382;
                      *(_BYTE *)(v295 + 37) = v383;
                      *(_DWORD *)(v295 + 28) = v384;
                      *(_DWORD *)(v295 + 32) = v385;
                      *(_DWORD *)(v295 + 24) = v386.i32[0];
                      *(float *)(v295 + 48) = v317;
                      *(float *)(v295 + 52) = v316;
                      *(_DWORD *)(v295 + 56) = v339;
                      v386.i64[0] = v559.i64[1];
                      v387.i32[2] = v558;
                      v386.i64[1] = *((_QWORD *)&v557 + 1);
                      v388.i64[0] = 0xBF000000BF000000;
                      v388.i64[1] = 0xBF000000BF000000;
                      *(int16x4_t *)(v295 + 64) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v388, (float32x4_t)xmmword_19FFB2FA0, v386)));
                      v386.f32[0] = *(float *)(v238 + 100) + v387.f32[2];
                      *(_BYTE *)(v295 + 84) = v382;
                      *(_BYTE *)(v295 + 85) = v383;
                      *(_DWORD *)(v295 + 76) = v384;
                      *(_DWORD *)(v295 + 80) = v385;
                      *(float *)(v295 + 72) = v386.f32[0];
                      v295 += 96;
                      ++v378;
                    }
                    while (v349 != v378);
                  }
                  v19 = &off_19FFB1000;
                  v209 = 1.0;
                  v389 = v549;
LABEL_302:
                  v242 = v521;
                  if (v515 >= 1.5708)
                  {
                    v309 = v543;
                    v310 = (int32x2_t)v540;
                    v311 = v538;
                    v312 = v535;
                    goto LABEL_270;
                  }
                  v399 = v341;
                  if (v341 >= 0.0)
                  {
                    v559.i64[0] = __PAIR64__(LODWORD(v547), LODWORD(v389));
                    v405 = v399 + -3.14159265;
                    v406 = __sincosf_stret(v405);
                    v407 = (float32x2_t)vrev64_s32((int32x2_t)vmul_n_f32(v533, v406.__sinval));
                    v408 = vmul_n_f32(v533, v406.__cosval);
                    v404.i32[0] = vsub_f32(v408, v407).u32[0];
                    v404.i32[1] = vadd_f32(v408, v407).i32[1];
                  }
                  else
                  {
                    v400 = v399 + v517;
                    v402 = __sincosf_stret(v400);
                    v401.f32[0] = v402.__cosval;
                    v403.f32[0] = -v402.__sinval;
                    v403.i32[1] = LODWORD(v402.__sinval);
                    *(float32x2_t *)v559.f32 = vmls_lane_f32((float32x2_t)vrev64_s32((int32x2_t)vmul_f32(v533, v403)), v533, v401, 0);
                    v404 = vneg_f32(v533);
                  }
                  *(float32x2_t *)&v559.u32[2] = v404;
                  v409 = *(_QWORD *)(v238 + 104) + 12 * v337;
                  v300 = *(_BYTE *)(v409 + 8);
                  v301 = *(_BYTE *)(v409 + 9);
                  v302 = *(_DWORD *)v409;
                  v303 = *(_DWORD *)(v409 + 4);
                  *(float *)v295 = v317;
                  *(float *)(v295 + 4) = v316;
                  *(_DWORD *)(v295 + 8) = v339;
                  v410.i64[0] = v559.i64[0];
                  v410.i64[1] = v557;
                  v411.i64[0] = 0xBF000000BF000000;
                  v411.i64[1] = 0xBF000000BF000000;
                  v306 = (float32x4_t)xmmword_19FFB2FA0;
                  *(int16x4_t *)(v295 + 16) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v411, (float32x4_t)xmmword_19FFB2FA0, v410)));
                  v410.f32[0] = *(float *)(v238 + 100) + *(float *)&v558;
                  *(_BYTE *)(v295 + 36) = v300;
                  *(_BYTE *)(v295 + 37) = v301;
                  *(_DWORD *)(v295 + 28) = v302;
                  *(_DWORD *)(v295 + 32) = v303;
                  *(_DWORD *)(v295 + 24) = v410.i32[0];
                  *(float *)(v295 + 48) = v317;
                  *(float *)(v295 + 52) = v316;
                  *(_DWORD *)(v295 + 56) = v339;
                  v307 = *(float *)&v558;
                  v308.i64[0] = v559.i64[1];
                  v308.i64[1] = *((_QWORD *)&v557 + 1);
LABEL_269:
                  v309 = v543;
                  v310 = (int32x2_t)v540;
                  v311 = v538;
                  v312 = v535;
                  v313.i64[0] = 0xBF000000BF000000;
                  v313.i64[1] = 0xBF000000BF000000;
                  *(int16x4_t *)(v295 + 64) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v313, v306, v308)));
                  v314 = *(float *)(v238 + 100);
                  *(_BYTE *)(v295 + 84) = v300;
                  *(_BYTE *)(v295 + 85) = v301;
                  *(_DWORD *)(v295 + 76) = v302;
                  *(_DWORD *)(v295 + 80) = v303;
                  *(float *)(v295 + 72) = v314 + v307;
                  v295 += 96;
LABEL_270:
                  --v297;
                  v270 = sqrtf((float)((float)(v312 - v317) * (float)(v312 - v317))+ (float)((float)(v311 - v316) * (float)(v311 - v316)))+ v309;
                  v296 += 3;
                  v273 = (float32x2_t)v310;
                  v298 = v318;
                  if (v318 == v527)
                    goto LABEL_309;
                }
              }
              v310 = (int32x2_t)v273;
LABEL_309:
              v412 = &v242[3 * v527];
              v413 = &v242[3 * v512];
              v414 = *v412;
              if (vabds_f32(*v412, *v413) >= 1.0e-10)
              {
                v416 = v412[1];
                v419 = v416 - v413[1];
                v417.i64[0] = 0x1000100010001;
                v417.i64[1] = 0x1000100010001;
                v235 = v509;
                v234 = v510;
              }
              else
              {
                v415 = v413[1];
                v416 = v412[1];
                v417.i64[0] = 0x1000100010001;
                v417.i64[1] = 0x1000100010001;
                v235 = v509;
                v234 = v510;
                if (vabds_f32(v416, v415) < 1.0e-10)
                {
                  v418 = *(float *)&v310.i32[1];
                  goto LABEL_315;
                }
                v419 = v416 - v415;
              }
              v420 = v414 - *v413;
              v421 = v209 / sqrtf((float)(v420 * v420) + (float)(v419 * v419));
              *(float *)v310.i32 = v421 * v420;
              v418 = v421 * v419;
              *(float *)&v310.i32[1] = v418;
LABEL_315:
              v210 = v508;
              v559.f32[0] = -v418;
              *(uint64_t *)((char *)v559.i64 + 4) = __PAIR64__(LODWORD(v418), v310.u32[0]);
              v559.f32[3] = -*(float *)v310.i32;
              v422 = begin[v527];
              v423 = *((_DWORD *)v412 + 2);
              v560 = -v418;
              v561 = *(float *)v310.i32;
              *(float *)&v558 = v270;
              *((float *)&v558 + 1) = v270 * v524;
              v424 = *(_QWORD *)(v238 + 104) + 12 * v422;
              v425 = *(_BYTE *)(v424 + 8);
              v426 = *(_BYTE *)(v424 + 9);
              v427 = *(_DWORD *)v424;
              v428 = *(_DWORD *)(v424 + 4);
              *(float *)v295 = v414;
              *(float *)(v295 + 4) = v416;
              *(_DWORD *)(v295 + 8) = v423;
              v429.i64[0] = v559.i64[0];
              v429.i64[1] = v557;
              v430.i64[0] = 0xBF000000BF000000;
              v430.i64[1] = 0xBF000000BF000000;
              *(int16x4_t *)(v295 + 16) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v430, (float32x4_t)xmmword_19FFB2FA0, v429)));
              v429.f32[0] = *(float *)(v238 + 100) + *(float *)&v558;
              *(_BYTE *)(v295 + 36) = v425;
              *(_BYTE *)(v295 + 37) = v426;
              *(_DWORD *)(v295 + 28) = v427;
              *(_DWORD *)(v295 + 32) = v428;
              *(_DWORD *)(v295 + 24) = v429.i32[0];
              *(float *)(v295 + 48) = v414;
              *(float *)(v295 + 52) = v416;
              *(_DWORD *)(v295 + 56) = v423;
              v429.i64[0] = v559.i64[1];
              v431 = *(float *)&v558;
              v429.i64[1] = *((_QWORD *)&v557 + 1);
              v432.i64[0] = 0xBF000000BF000000;
              v432.i64[1] = 0xBF000000BF000000;
              *(int16x4_t *)(v295 + 64) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v432, (float32x4_t)xmmword_19FFB2FA0, v429)));
              v430.f32[0] = *(float *)(v238 + 100) + v431;
              *(_BYTE *)(v295 + 84) = v425;
              *(_BYTE *)(v295 + 85) = v426;
              *(_DWORD *)(v295 + 76) = v427;
              *(_DWORD *)(v295 + 80) = v428;
              *(_DWORD *)(v295 + 72) = v430.i32[0];
              if (*(_BYTE *)(v238 + 97))
              {
                *(int32x2_t *)v433.f32 = v310;
                *(int32x2_t *)&v433.u32[2] = v310;
                *(int32x2_t *)v434.f32 = vdup_lane_s32(v310, 0);
                v434.f32[0] = v418;
                v434.i64[1] = v434.i64[0];
                v435 = vsubq_f32(v433, v434);
                v436 = vaddq_f32(v433, v434);
                v436.i32[0] = v435.i32[0];
                v436.i32[3] = v435.i32[3];
                v559 = v436;
                v557 = *(_OWORD *)&v556[8];
                v435.i64[0] = *(_QWORD *)&v556[8];
                v437 = *(_QWORD *)(v238 + 104) + 12 * v422;
                v438 = *(_BYTE *)(v437 + 8);
                v439 = *(_BYTE *)(v437 + 9);
                v434.i32[0] = *(_DWORD *)v437;
                v440 = *(_DWORD *)(v437 + 4);
                *(float *)(v295 + 96) = v414;
                *(float *)(v295 + 100) = v416;
                *(_DWORD *)(v295 + 104) = v423;
                v436.i64[1] = v435.i64[0];
                v435.i64[0] = 0xBF000000BF000000;
                v435.i64[1] = 0xBF000000BF000000;
                *(int16x4_t *)(v295 + 112) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v435, (float32x4_t)xmmword_19FFB2FA0, v436)));
                v435.f32[0] = *(float *)(v238 + 100) + v431;
                *(_BYTE *)(v295 + 132) = v438;
                *(_BYTE *)(v295 + 133) = v439;
                *(_DWORD *)(v295 + 124) = v434.i32[0];
                *(_DWORD *)(v295 + 128) = v440;
                *(_DWORD *)(v295 + 120) = v435.i32[0];
                *(float *)(v295 + 144) = v414;
                *(float *)(v295 + 148) = v416;
                *(_DWORD *)(v295 + 152) = v423;
                v441.i64[0] = v559.i64[1];
                v442 = *(float *)&v558;
                v441.i64[1] = *((_QWORD *)&v557 + 1);
                v443.i64[0] = 0xBF000000BF000000;
                v443.i64[1] = 0xBF000000BF000000;
                *(int16x4_t *)(v295 + 160) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v443, (float32x4_t)xmmword_19FFB2FA0, v441)));
                v441.f32[0] = *(float *)(v238 + 100) + v442;
                *(_BYTE *)(v295 + 180) = v438;
                *(_BYTE *)(v295 + 181) = v439;
                *(_DWORD *)(v295 + 172) = v434.i32[0];
                *(_DWORD *)(v295 + 176) = v440;
                *(float *)(v295 + 168) = v441.f32[0];
              }
              v444 = *(_QWORD *)(v238 + 8);
              v445 = *(_QWORD *)(v238 + 16) - v444;
              v446 = v445 >> 1;
              if (v445 >= 4)
              {
                v447 = *(_QWORD *)(v238 + 8);
                v448 = 2;
                if (v446 > 2)
                  v448 = v446;
                if (v448 >= 3)
                {
                  v451 = 0;
                  v452 = v448 - 1;
                  v453 = (v448 - 1) & 0xFFFFFFFFFFFFFFFELL;
                  v454 = (_WORD *)(v514 + 12);
                  do
                  {
                    v455 = v444 + 2 * v451;
                    *(v454 - 6) = v455;
                    *v454 = v455 + 2;
                    *(v454 - 5) = v455 + 1;
                    v454[1] = v455 + 3;
                    *(v454 - 4) = v455 + 2;
                    v454[2] = v455 + 4;
                    *(v454 - 3) = v455 + 1;
                    v454[3] = v455 + 3;
                    *(v454 - 2) = v455 + 3;
                    v454[4] = v455 + 5;
                    v451 += 2;
                    *(v454 - 1) = v455 + 2;
                    v454[5] = v455 + 4;
                    v454 += 12;
                  }
                  while (v453 != v451);
                  if (v452 != v453)
                  {
                    v449 = v452 | 1;
                    LODWORD(v447) = 2 * v453 + v444;
                    v450 = (_WORD *)(v514 + 12 * v453);
                    goto LABEL_326;
                  }
                }
                else
                {
                  v449 = 1;
                  v450 = (_WORD *)v514;
LABEL_326:
                  v456 = v448 - v449;
                  do
                  {
                    *v450 = v447;
                    v457 = v447 + 1;
                    v450[1] = v447 + 1;
                    v458 = v447 + 3;
                    LODWORD(v447) = v447 + 2;
                    v450[2] = v447;
                    v450[3] = v457;
                    v450[4] = v458;
                    v450[5] = v447;
                    v450 += 6;
                    --v456;
                  }
                  while (v456);
                }
              }
              if (*(_QWORD *)(v238 + 48) != *(_QWORD *)(v238 + 40))
              {
                v459 = *(_BYTE *)(v238 + 96) ? 2 : 1;
                if (v446 - *(char *)(v238 + 97) > v459)
                {
                  v460 = *(unsigned __int8 *)(v238 + 97);
                  v461 = v446 - (v459 + v460);
                  v462 = v513;
                  if (v461 < 8)
                  {
LABEL_338:
                    v472 = v459 + v460 - v446;
                    v473 = v444 + 2 * v459;
                    do
                    {
                      *v462 = v473 - 2;
                      v462[1] = v473;
                      v473 += 2;
                      v462 += 2;
                    }
                    while (!__CFADD__(v472++, 1));
                  }
                  else
                  {
                    v463 = v461 & 0xFFFFFFFFFFFFFFF8;
                    v464 = vdupq_n_s64(v459);
                    v465 = vaddq_s64(v464, (int64x2_t)xmmword_19FFB2FE0);
                    v466 = vaddq_s64(v464, (int64x2_t)xmmword_19FFB2FF0);
                    v467 = vaddq_s64(v464, (int64x2_t)xmmword_19FFB3000);
                    v468 = vaddq_s64(v464, (int64x2_t)xmmword_19FFB2E40);
                    v469 = vdupq_n_s64(v444);
                    v470 = v513;
                    v471 = v461 & 0xFFFFFFFFFFFFFFF8;
                    do
                    {
                      v569.val[1] = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vaddq_s64(v469, vaddq_s64(v468, v468)), (int32x4_t)vaddq_s64(v469, vaddq_s64(v467, v467))), (int16x8_t)vuzp1q_s32((int32x4_t)vaddq_s64(v469, vaddq_s64(v466, v466)), (int32x4_t)vaddq_s64(v469, vaddq_s64(v465, v465))));
                      v569.val[0] = vaddq_s16(v569.val[1], v417);
                      vst2q_s16(v470, v569);
                      v470 += 16;
                      v569.val[0] = (int16x8_t)vdupq_n_s64(8uLL);
                      v466 = vaddq_s64(v466, (int64x2_t)v569.val[0]);
                      v467 = vaddq_s64(v467, (int64x2_t)v569.val[0]);
                      v468 = vaddq_s64(v468, (int64x2_t)v569.val[0]);
                      v465 = vaddq_s64(v465, (int64x2_t)v569.val[0]);
                      v471 -= 8;
                    }
                    while (v471);
                    if (v461 != v463)
                    {
                      v459 |= v463;
                      v462 = &v513[2 * (v461 & 0xFFFFFFFFFFFFFFF8)];
                      goto LABEL_338;
                    }
                  }
                }
              }
              v236 = (uint64_t)v513;
            }
            v238 = *v235;
            v239 = *(_QWORD *)(*v235 + 8);
            v237 = *(_QWORD *)(*v235 + 16);
            v233 = v511;
            goto LABEL_245;
          }
LABEL_343:
          {
            v498 = operator new();
            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v498, "VectorKitLabels", 0x5ED09DD50000000FLL);
          }
          v476 = (_QWORD *)*v505;
          v477 = v507;
          if (*v505)
          {
            v478 = (_QWORD *)v507[8];
            v479 = (_QWORD *)*v505;
            if (v478 != v476)
            {
              do
              {
                v481 = (void (***)(_QWORD, _QWORD *))*--v478;
                v480 = v481;
                *v478 = 0;
                if (v481)
                {
                  (**v480)(v480, v479);
                  if ((v482 & 1) == 0
                  {
                    v483 = operator new();
                    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v483, "VectorKitLabels", 0x5ED09DD50000000FLL);
                  }
                  (*(void (**)(uint64_t, void (***)(_QWORD, _QWORD *), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v480, 128);
                }
              }
              while (v478 != v476);
              v479 = (_QWORD *)*v505;
              v477 = v507;
            }
            v477[8] = (uint64_t)v476;
            (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v477[10] + 40))(v477[10], v479, v477[9] - (_QWORD)v479);
            *v505 = 0;
            v505[1] = 0;
            v505[2] = 0;
          }
          *v505 = 0;
          v505[1] = 0;
          v505[2] = 0;
          if (v550.__begin_)
            operator delete(v550.__begin_);
          if (v551[0])
            operator delete(v551[0]);
          if (v555)
          {
            value = __p.__end_cap_.__value_;
            v484 = v553;
            if (v553 != __p.__end_cap_.__value_)
            {
              v486 = __p.__end_;
              v487 = v554;
              v488 = HIBYTE(v554);
              if (__p.__begin_ && *((_BYTE *)__p.__end_ + 17) != 2)
                (*(void (**)(void))(*(_QWORD *)__p.__begin_ + 64))();
              if (v487 && !v488)
              {
                v489 = (unsigned int *)*((_QWORD *)v486 + 7);
                v490 = (unsigned int *)*((_QWORD *)v486 + 8);
                if (v490 == v489)
                  v489 = (unsigned int *)(*((_QWORD *)v486 + 10) - *((_QWORD *)v486 + 9));
                if (value < v489)
                  v489 = value;
                if (v490 <= v484)
                  v490 = v484;
                if (v490 == v489)
                  v490 = (unsigned int *)((char *)v489 + *((_QWORD *)v486 + 10) - *((_QWORD *)v486 + 9));
                *((_QWORD *)v486 + 7) = v489;
                *((_QWORD *)v486 + 8) = v490;
              }
            }
          }
          if (v567)
          {
            v492 = v564;
            v491 = v565;
            if (v565 != v564)
            {
              v493 = (_QWORD *)*((_QWORD *)&v563 + 1);
              v494 = v566;
              v495 = HIBYTE(v566);
              if ((_QWORD)v563 && *(_BYTE *)(*((_QWORD *)&v563 + 1) + 17) != 2)
                (*(void (**)(void))(*(_QWORD *)v563 + 64))();
              if (v494 && !v495)
              {
                v496 = v493[7];
                v497 = v493[8];
                if (v497 == v496)
                  v496 = v493[10] - v493[9];
                if (v492 < v496)
                  v496 = v492;
                if (v497 <= v491)
                  v497 = v491;
                if (v497 == v496)
                  v497 = v496 + v493[10] - v493[9];
                v493[7] = v496;
                v493[8] = v497;
              }
            }
          }
          v211 = v506 + 1;
          v212 = v503;
        }
        v208 = v501 + 8;
      }
      while (v501 + 8 != v500);
    }
    return v502;
  }
  else
  {
    result = std::__throw_bad_optional_access[abi:nn180100]();
    __break(1u);
  }
  return result;
}

void sub_19FD3D378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void **a34,uint64_t a35,uint64_t a36,uint64_t a37,void **a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  void *__p;
  uint64_t v71;
  void *v72;
  void *v74;
  void *v75;

  MEMORY[0x1A1AF4E00](v71, 0x1020C4007FF0C4BLL);
  if (v72)
    operator delete(v72);
  std::unique_ptr<gdc::GlobeTileGrid>::~unique_ptr[abi:nn180100](a42);
  v74 = *a38;
  if (*a38)
  {
    *(_QWORD *)(a14 + 40) = v74;
    operator delete(v74);
  }
  v75 = *a34;
  if (*a34)
  {
    *(_QWORD *)(a14 + 16) = v75;
    operator delete(v75);
  }
  if (!__p)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void md::RouteLineLayer::~RouteLineLayer(md::RouteLineLayer *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  *(_QWORD *)this = &off_1E428FCC8;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 37);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E428C840;
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 34);
  if (!v5)
    goto LABEL_10;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v8 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
    if (!v8)
      goto LABEL_16;
  }
  else
  {
LABEL_10:
    v8 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
    if (!v8)
      goto LABEL_16;
  }
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
LABEL_16:
  md::Ribbons::RibbonLayer<md::Ribbons::RouteLineRibbonDescriptor>::~RibbonLayer(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  *(_QWORD *)this = &off_1E428FCC8;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 37);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E428C840;
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 34);
  if (!v5)
    goto LABEL_10;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v8 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
    if (!v8)
      goto LABEL_16;
  }
  else
  {
LABEL_10:
    v8 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
    if (!v8)
      goto LABEL_16;
  }
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
LABEL_16:
  md::Ribbons::RibbonLayer<md::Ribbons::RouteLineRibbonDescriptor>::~RibbonLayer(this);
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *md::Ribbons::RibbonLayer<md::Ribbons::RouteLineRibbonDescriptor>::~RibbonLayer(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;

  *a1 = &off_1E42AF368;
  v2 = (_QWORD *)a1[1];
  v3 = (_QWORD *)a1[2];
  while (v2 != v3)
  {
    if (*v2)
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    ++v2;
  }
  v4 = (_QWORD *)a1[4];
  v5 = (_QWORD *)a1[5];
  while (v4 != v5)
  {
    if (*v4)
      (*(void (**)(_QWORD))(*(_QWORD *)*v4 + 8))(*v4);
    ++v4;
  }
  v6 = a1[26];
  a1[26] = 0;
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 2584);
    if (v7)
      MEMORY[0x1A1AF4DE8](v7, 0x1000C8000313F17);
    MEMORY[0x1A1AF4E00](v6, 0x1020C4007FF0C4BLL);
  }
  v8 = (void *)a1[4];
  if (v8)
  {
    a1[5] = v8;
    operator delete(v8);
  }
  v9 = (void *)a1[1];
  if (v9)
  {
    a1[2] = v9;
    operator delete(v9);
  }
  return a1;
}

void md::Ribbons::RibbonLayer<md::Ribbons::RouteLineRibbonDescriptor>::~RibbonLayer(_QWORD *a1)
{
  md::Ribbons::RibbonLayer<md::Ribbons::RouteLineRibbonDescriptor>::~RibbonLayer(a1);
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *md::RibbonLayer<md::Ribbons::RouteLineRibbonDescriptor>::~RibbonLayer(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *a1 = &off_1E428C840;
  v2 = (std::__shared_weak_count *)a1[34];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[32];
    if (!v5)
      return md::Ribbons::RibbonLayer<md::Ribbons::RouteLineRibbonDescriptor>::~RibbonLayer(a1);
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[32];
    if (!v5)
      return md::Ribbons::RibbonLayer<md::Ribbons::RouteLineRibbonDescriptor>::~RibbonLayer(a1);
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return md::Ribbons::RibbonLayer<md::Ribbons::RouteLineRibbonDescriptor>::~RibbonLayer(a1);
}

void md::RibbonLayer<md::Ribbons::RouteLineRibbonDescriptor>::~RibbonLayer(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *a1 = &off_1E428C840;
  v2 = (std::__shared_weak_count *)a1[34];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[32];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[32];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  md::Ribbons::RibbonLayer<md::Ribbons::RouteLineRibbonDescriptor>::~RibbonLayer(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t *md::RibbonLayer<md::Ribbons::RouteLineRibbonDescriptor>::batch(uint64_t *result, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  unsigned __int8 v4;
  unint64_t v5;
  unsigned __int8 v6;
  uint64_t *v7;
  uint64_t *v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  int8x8_t prime;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD **v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *i;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint8x8_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  void (***v62)(_QWORD);
  void (***v63)(_QWORD);
  unsigned __int8 v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  _OWORD *v68;
  __int128 *v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  int64x2_t v77;
  unsigned __int8 v78;
  _OWORD *v79;
  void *v80;
  ggl::RouteLine::BasePipelineSetup *v81;
  std::__shared_weak_count *v82;
  unint64_t *p_shared_owners;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  ggl::RouteLine::BasePipelineSetup *v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  ggl::RouteLine::BasePipelineSetup *v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t *v150;
  uint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t *v163;
  unint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  ggl::RouteLine::BasePipelineSetup *v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  unint64_t v178;
  uint64_t *v179;
  uint64_t v180;
  _QWORD *v181;
  uint64_t v182;
  unint64_t *v183;
  unint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t *v192;
  unint64_t v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  ggl::RouteLine::PatternedBasePipelineSetup *v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  unint64_t v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  unint64_t v217;
  uint64_t *v218;
  uint64_t v219;
  _QWORD *v220;
  uint64_t v221;
  unint64_t *v222;
  unint64_t v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t *v231;
  unint64_t v232;
  std::__shared_weak_count *v233;
  unint64_t *v234;
  unint64_t v235;
  ggl::RouteLine::PatternedBasePipelineSetup *v236;
  std::__shared_weak_count *v237;
  unint64_t *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  unint64_t v242;
  std::__shared_weak_count *v243;
  unint64_t *v244;
  unint64_t v245;
  unint64_t v246;
  std::__shared_weak_count *v247;
  unint64_t *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  unint64_t v252;
  std::__shared_weak_count *v253;
  unint64_t *v254;
  unint64_t v255;
  unint64_t v256;
  uint64_t *v257;
  uint64_t v258;
  _QWORD *v259;
  uint64_t v260;
  unint64_t *v261;
  unint64_t v262;
  std::__shared_weak_count *v263;
  unint64_t *v264;
  unint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  unint64_t *v270;
  unint64_t v271;
  std::__shared_weak_count *v272;
  unint64_t *v273;
  unint64_t v274;
  ggl::RouteLineTraffic::BasePipelineSetup *v275;
  uint64_t v276;
  uint64_t *v277;
  uint64_t v278;
  _QWORD *v279;
  uint64_t v280;
  unint64_t *v281;
  unint64_t v282;
  std::__shared_weak_count *v283;
  unint64_t *v284;
  unint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  unint64_t *v290;
  unint64_t v291;
  std::__shared_weak_count *v292;
  unint64_t *v293;
  unint64_t v294;
  std::__shared_weak_count *v295;
  unint64_t *v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  unint64_t v300;
  std::__shared_weak_count *v301;
  unint64_t *v302;
  unint64_t v303;
  unint64_t v304;
  ggl::RouteLine::BasePipelineSetup *v305;
  std::__shared_weak_count *v306;
  unint64_t *v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  unint64_t v311;
  std::__shared_weak_count *v312;
  unint64_t *v313;
  unint64_t v314;
  unint64_t v315;
  uint64_t *v316;
  uint64_t v317;
  _QWORD *v318;
  uint64_t v319;
  unint64_t *v320;
  unint64_t v321;
  std::__shared_weak_count *v322;
  unint64_t *v323;
  unint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  unint64_t *v329;
  unint64_t v330;
  std::__shared_weak_count *v331;
  unint64_t *v332;
  unint64_t v333;
  ggl::RouteLineTraffic::BasePipelineSetup *v334;
  uint64_t v335;
  uint64_t *v336;
  uint64_t v337;
  _QWORD *v338;
  uint64_t v339;
  unint64_t *v340;
  unint64_t v341;
  std::__shared_weak_count *v342;
  unint64_t *v343;
  unint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  unint64_t *v349;
  unint64_t v350;
  std::__shared_weak_count *v351;
  unint64_t *v352;
  unint64_t v353;
  ggl::RouteLine::PatternedBasePipelineSetup *v354;
  std::__shared_weak_count *v355;
  ggl::RouteLine::PatternedBasePipelineSetup *v356;
  unint64_t *v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  unint64_t v361;
  std::__shared_weak_count *v362;
  unint64_t *v363;
  unint64_t v364;
  unint64_t v365;
  ggl::RouteLine::BasePipelineSetup *v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t *v376;
  ggl::SinglePassRouteLine::BasePipelineSetup *v377;
  uint64_t v378;
  uint64_t *v379;
  uint64_t v380;
  _QWORD *v381;
  uint64_t v382;
  unint64_t *v383;
  unint64_t v384;
  std::__shared_weak_count *v385;
  unint64_t *v386;
  unint64_t v387;
  std::__shared_weak_count *v388;
  unint64_t *v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  unint64_t v393;
  std::__shared_weak_count *v394;
  unint64_t *v395;
  unint64_t v396;
  unint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  unint64_t *v402;
  unint64_t v403;
  std::__shared_weak_count *v404;
  unint64_t *v405;
  unint64_t v406;
  std::__shared_weak_count *v407;
  unint64_t *v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  unint64_t v412;
  std::__shared_weak_count *v413;
  unint64_t *v414;
  unint64_t v415;
  unint64_t v416;
  std::__shared_weak_count *v417;
  unint64_t *v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  unint64_t v422;
  std::__shared_weak_count *v423;
  unint64_t *v424;
  unint64_t v425;
  unint64_t v426;
  ggl::SinglePassRouteLine::BasePipelineSetup **v427;
  ggl::SinglePassRouteLine::BasePipelineSetup *v428;
  _QWORD *v429;
  unsigned __int8 v430;
  std::__shared_weak_count *v431;
  unint64_t *v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  unint64_t v436;
  std::__shared_weak_count *v437;
  unint64_t *v438;
  unint64_t v439;
  unint64_t v440;
  uint64_t *v441;
  uint64_t v442;
  _QWORD *v443;
  uint64_t v444;
  unint64_t *v445;
  unint64_t v446;
  std::__shared_weak_count *v447;
  unint64_t *v448;
  unint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  unint64_t *v454;
  unint64_t v455;
  std::__shared_weak_count *v456;
  unint64_t *v457;
  unint64_t v458;
  std::__shared_weak_count *v459;
  unint64_t *v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  unint64_t v464;
  std::__shared_weak_count *v465;
  unint64_t *v466;
  unint64_t v467;
  unint64_t v468;
  uint64_t v469;
  ggl::RouteLine::BasePipelineSetup *v470;
  std::__shared_weak_count *v471;
  unint64_t *v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  unint64_t v476;
  std::__shared_weak_count *v477;
  unint64_t *v478;
  unint64_t v479;
  unint64_t v480;
  uint64_t *v481;
  uint64_t v482;
  _QWORD *v483;
  uint64_t v484;
  unint64_t *v485;
  unint64_t v486;
  std::__shared_weak_count *v487;
  unint64_t *v488;
  unint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  unint64_t *v494;
  unint64_t v495;
  std::__shared_weak_count *v496;
  unint64_t *v497;
  unint64_t v498;
  uint64_t v499;
  _QWORD *v500;
  unsigned __int8 v501;
  uint64_t v502;
  std::__shared_weak_count *v503;
  unint64_t *v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  unint64_t v508;
  std::__shared_weak_count *v509;
  unint64_t *v510;
  unint64_t v511;
  unint64_t v512;
  uint64_t v513;
  uint64_t *v514;
  uint64_t v515;
  _QWORD *v516;
  uint64_t v517;
  unint64_t *v518;
  unint64_t v519;
  std::__shared_weak_count *v520;
  unint64_t *v521;
  unint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  unint64_t *v528;
  unint64_t v529;
  std::__shared_weak_count *v530;
  unint64_t *v531;
  unint64_t v532;
  unint64_t v533;
  uint64_t *v534;
  _QWORD *v535;
  uint64_t *v536;
  uint64_t v537;
  uint64_t v538;
  unint64_t v539;
  uint64_t v540;
  unint64_t v541;
  _BYTE *v542;
  uint64_t *v543;
  unint64_t v544;
  uint64_t v545;
  _OWORD *v546;
  uint64_t *v547;
  uint64_t v548;
  __int128 v549;
  uint64_t v550;
  uint64_t *v551;
  char *v552;
  uint64_t *v553;
  uint64_t v554;
  unsigned __int8 v555;
  uint64_t *v556;
  uint64_t v557;
  char *v558;
  int64_t v559;
  uint64_t v560;
  unint64_t v561;
  unint64_t v562;
  unint64_t v563;
  unint64_t v564;
  char *v565;
  uint64_t *v566;
  int64_t v567;
  unint64_t v568;
  uint64_t *v569;
  uint64_t v570;
  unint64_t v571;
  unint64_t v572;
  unint64_t v573;
  unint64_t v574;
  char *v575;
  uint64_t *v576;
  uint64_t v577;
  __int128 v578;
  __int128 v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  _QWORD *v583;
  _QWORD *v584;
  void (***v585)(_QWORD, uint64_t);
  void (***v586)(_QWORD, uint64_t);
  unsigned __int8 v587;
  uint64_t v588;
  _QWORD *v589;
  _QWORD *v590;
  uint64_t v591;
  void (***v592)(_QWORD, uint64_t);
  void (***v593)(_QWORD, uint64_t);
  unsigned __int8 v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  void (***v598)(_QWORD);
  uint64_t v599;
  uint64_t v600;
  unsigned __int8 v601;
  uint64_t v602;
  uint64_t v603;
  char *v604;
  int64_t v605;
  uint64_t v606;
  unint64_t v607;
  unint64_t v608;
  unint64_t v609;
  unint64_t v610;
  char *v611;
  uint64_t *v612;
  int64_t v613;
  unint64_t v614;
  uint64_t *v615;
  uint64_t v616;
  unint64_t v617;
  unint64_t v618;
  unint64_t v619;
  unint64_t v620;
  char *v621;
  uint64_t *v622;
  uint64_t v623;
  __int128 v624;
  __int128 v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  _QWORD *v629;
  _QWORD *v630;
  malloc_zone_t *zone;
  void (***v632)(_QWORD, uint64_t);
  void (***v633)(_QWORD, uint64_t);
  unsigned __int8 v634;
  uint64_t v635;
  geo::read_write_lock *v636;
  const char *v637;
  _QWORD *v638;
  _QWORD *v639;
  uint64_t v640;
  void (***v641)(_QWORD, uint64_t);
  void (***v642)(_QWORD, uint64_t);
  unsigned __int8 v643;
  uint64_t v644;
  _QWORD *v645;
  unint64_t v646;
  _QWORD *v647;
  uint64_t v648;
  uint64_t v649;
  unint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  _QWORD *v654;
  uint64_t v655;
  _QWORD *v656;
  unint64_t v657;
  unint64_t v658;
  unint64_t v659;
  BOOL v660;
  unint64_t v661;
  uint64_t v662;
  _QWORD *v663;
  _OWORD *v664;
  __int128 *v665;
  uint64_t v666;
  __int128 v667;
  __int128 v668;
  uint64_t v669;
  _QWORD *v670;
  void (***v671)(_QWORD);
  void (***v672)(_QWORD);
  unsigned __int8 v673;
  uint64_t v674;
  unsigned __int8 v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  int8x16_t *v681;
  unint64_t v682;
  uint64_t v683;
  uint64_t *v684;
  _QWORD *v685;
  uint64_t v686;
  uint64_t *v687;
  unint64_t v688;
  _QWORD *v689;
  uint64_t v690;
  char *v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  unint64_t v695;
  char *v696;
  char *v697;
  char *v698;
  char *v699;
  char *v700;
  unint64_t v701;
  uint64_t v703;
  char *v704;
  char *v705;
  uint64_t v706;
  __int128 v707;
  __int128 v708;
  uint64_t v709;
  char *v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t *v714;
  _QWORD *v715;
  _QWORD *v716;
  void (***v717)(_QWORD, uint64_t);
  void (***v718)(_QWORD, uint64_t);
  unsigned __int8 v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  _QWORD *v724;
  _QWORD *v725;
  void (***v726)(_QWORD, uint64_t);
  void (***v727)(_QWORD, uint64_t);
  unsigned __int8 v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  int v732;
  uint64_t v733;
  unsigned __int8 v734;
  unsigned __int8 v735;
  unsigned __int8 v736;
  unsigned __int8 v737;
  unsigned __int8 v738;
  unsigned __int8 v739;
  ggl::RouteLine::BasePipelineSetup **v740;
  ggl::RouteLine::BasePipelineSetup *v741;
  _QWORD *v742;
  uint64_t *v743;
  char *v746;
  uint64_t v747;
  uint64_t *v748;
  ggl::RouteLineTraffic::BasePipelineSetup *v749;
  uint64_t v750;
  ggl::RouteLine::BasePipelineSetup *v751;
  uint64_t *v752;
  uint64_t v753;
  ggl::RouteLine::BasePipelineSetup *v754;
  uint64_t v755;
  uint64_t *v756;
  uint64_t v757;
  int8x8_t v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  unint64_t v762;
  float v763;
  uint64_t v764;
  uint64_t *v765;
  uint64_t v766;
  uint64_t v767;

  v767 = *MEMORY[0x1E0C80C00];
  *result = 0;
  result[1] = 0;
  result[2] = 0;
  v742 = a2;
  if (!a2)
    return result;
  v743 = result;
  while (2)
  {
    v757 = 0;
    v758 = 0;
    {
      v730 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v730, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v5 = (unint64_t)&md::SignedDistanceFieldGenerator::_hypotCache[32438];
    v759 = mdm::Allocator::instance(void)::alloc;
    v760 = 0;
    {
      v731 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v731, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v761 = mdm::Allocator::instance(void)::alloc;
    v762 = 0;
    v763 = 1.0;
    v7 = (uint64_t *)v742[3];
    v8 = (uint64_t *)v742[4];
    while (v7 != v8)
    {
      v9 = ggl::CullingGrid::intersectedCellsForRibbon(*(_QWORD *)(*v7 + 88), *(_QWORD **)(*v7 + 72));
      v10 = v9;
      v11 = v9;
      v12 = (unint64_t)v758;
      if (v758)
      {
        v13 = (uint8x8_t)vcnt_s8(v758);
        v13.i16[0] = vaddlv_u8(v13);
        if (v13.u32[0] > 1uLL)
        {
          v5 = v9;
          if (*(_QWORD *)&v758 <= (unint64_t)v9)
            v5 = (unint64_t)v9 % *(_QWORD *)&v758;
        }
        else
        {
          v5 = (v758.i32[0] - 1) & v9;
        }
        v14 = *(uint64_t **)(v757 + 8 * v5);
        if (v14)
        {
          v15 = *v14;
          if (*v14)
          {
            if (v13.u32[0] < 2uLL)
            {
              while (1)
              {
                v17 = *(_QWORD *)(v15 + 8);
                if (v17 == v9)
                {
                  if (*(_DWORD *)(v15 + 16) == v9)
                    goto LABEL_91;
                }
                else if ((v17 & (*(_QWORD *)&v758 - 1)) != v5)
                {
                  goto LABEL_31;
                }
                v15 = *(_QWORD *)v15;
                if (!v15)
                  goto LABEL_31;
              }
            }
            do
            {
              v16 = *(_QWORD *)(v15 + 8);
              if (v16 == v9)
              {
                if (*(_DWORD *)(v15 + 16) == v9)
                  goto LABEL_91;
              }
              else
              {
                if (v16 >= *(_QWORD *)&v758)
                  v16 %= *(_QWORD *)&v758;
                if (v16 != v5)
                  break;
              }
              v15 = *(_QWORD *)v15;
            }
            while (v15);
          }
        }
      }
LABEL_31:
      v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v761 + 16))(v761, 56, 8);
      v764 = v15;
      v765 = &v761;
      *(_QWORD *)v15 = 0;
      *(_QWORD *)(v15 + 8) = v11;
      *(_DWORD *)(v15 + 16) = v10;
      *(_QWORD *)(v15 + 32) = 0;
      *(_QWORD *)(v15 + 40) = 0;
      *(_QWORD *)(v15 + 24) = 0;
      {
        v74 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v74, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      *(_QWORD *)(v15 + 48) = mdm::Allocator::instance(void)::alloc;
      LOBYTE(v766) = 1;
      v19 = (float)(v762 + 1);
      if (!v12 || (float)(v763 * (float)v12) < v19)
      {
        v20 = (v12 & (v12 - 1)) != 0;
        if (v12 < 3)
          v20 = 1;
        v21 = v20 | (2 * v12);
        v22 = vcvtps_u32_f32(v19 / v763);
        if (v21 <= v22)
          prime = (int8x8_t)v22;
        else
          prime = (int8x8_t)v21;
        if (*(_QWORD *)&prime == 1)
        {
          prime = (int8x8_t)2;
        }
        else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
        {
          prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
        }
        v12 = (unint64_t)v758;
        if (*(_QWORD *)&prime <= *(_QWORD *)&v758)
        {
          if (*(_QWORD *)&prime < *(_QWORD *)&v758)
          {
            v34 = vcvtps_u32_f32((float)v762 / v763);
            if (*(_QWORD *)&v758 < 3uLL
              || (v35 = (uint8x8_t)vcnt_s8(v758), v35.i16[0] = vaddlv_u8(v35), v35.u32[0] > 1uLL))
            {
              v34 = std::__next_prime(v34);
            }
            else
            {
              v36 = 1 << -(char)__clz(v34 - 1);
              if (v34 >= 2)
                v34 = v36;
            }
            if (*(_QWORD *)&prime <= v34)
              prime = (int8x8_t)v34;
            if (*(_QWORD *)&prime >= v12)
            {
              v12 = (unint64_t)v758;
            }
            else
            {
              if (prime)
                goto LABEL_44;
              v73 = v757;
              v757 = 0;
              if (v73)
                (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v759 + 40))(v759, v73, 8 * *(_QWORD *)&v758);
              v12 = 0;
              v758 = 0;
            }
          }
LABEL_68:
          if ((v12 & (v12 - 1)) != 0)
          {
            if (v12 <= v11)
              v5 = v11 % v12;
            else
              v5 = v11;
          }
          else
          {
            v5 = ((_DWORD)v12 - 1) & v11;
          }
          goto LABEL_81;
        }
LABEL_44:
        v24 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v759 + 16))(v759, 8 * *(_QWORD *)&prime, 8);
        v25 = v757;
        v757 = v24;
        if (v25)
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v759 + 40))(v759, v25, 8 * *(_QWORD *)&v758);
        v26 = 0;
        v758 = prime;
        do
          *(_QWORD *)(v757 + 8 * v26++) = 0;
        while (*(_QWORD *)&prime != v26);
        v27 = (_QWORD **)v760;
        if (!v760)
          goto LABEL_67;
        v28 = *(_QWORD *)(v760 + 8);
        v29 = *(_QWORD *)&prime - 1;
        if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) == 0)
        {
          v30 = v28 & v29;
          *(_QWORD *)(v757 + 8 * v30) = &v760;
          for (i = *v27; *v27; i = *v27)
          {
            v32 = i[1] & v29;
            if (v32 == v30)
            {
              v27 = (_QWORD **)i;
            }
            else if (*(_QWORD *)(v757 + 8 * v32))
            {
              *v27 = (_QWORD *)*i;
              v33 = 8 * v32;
              *i = **(_QWORD **)(v757 + v33);
              **(_QWORD **)(v757 + v33) = i;
            }
            else
            {
              *(_QWORD *)(v757 + 8 * v32) = v27;
              v27 = (_QWORD **)i;
              v30 = v32;
            }
          }
          goto LABEL_67;
        }
        if (v28 >= *(_QWORD *)&prime)
          v28 %= *(_QWORD *)&prime;
        *(_QWORD *)(v757 + 8 * v28) = &v760;
        v37 = *v27;
        if (!*v27)
        {
LABEL_67:
          v12 = (unint64_t)prime;
          goto LABEL_68;
        }
        while (2)
        {
          v39 = v37[1];
          if (v39 >= *(_QWORD *)&prime)
            v39 %= *(_QWORD *)&prime;
          if (v39 != v28)
          {
            if (!*(_QWORD *)(v757 + 8 * v39))
            {
              *(_QWORD *)(v757 + 8 * v39) = v27;
LABEL_72:
              v27 = (_QWORD **)v37;
              v37 = (_QWORD *)*v37;
              v28 = v39;
              if (!v37)
                goto LABEL_67;
              continue;
            }
            *v27 = (_QWORD *)*v37;
            v38 = 8 * v39;
            *v37 = **(_QWORD **)(v757 + v38);
            **(_QWORD **)(v757 + v38) = v37;
            v37 = v27;
          }
          break;
        }
        v39 = v28;
        goto LABEL_72;
      }
LABEL_81:
      v40 = *(uint64_t **)(v757 + 8 * v5);
      if (v40)
      {
        *(_QWORD *)v15 = *v40;
LABEL_89:
        *v40 = v15;
        goto LABEL_90;
      }
      *(_QWORD *)v15 = v760;
      v760 = v15;
      *(_QWORD *)(v757 + 8 * v5) = &v760;
      if (*(_QWORD *)v15)
      {
        v41 = *(_QWORD *)(*(_QWORD *)v15 + 8);
        if ((v12 & (v12 - 1)) != 0)
        {
          if (v41 >= v12)
            v41 %= v12;
        }
        else
        {
          v41 &= v12 - 1;
        }
        v40 = (uint64_t *)(v757 + 8 * v41);
        goto LABEL_89;
      }
LABEL_90:
      ++v762;
LABEL_91:
      v42 = *(_QWORD **)(v15 + 32);
      v43 = *(_QWORD *)(v15 + 40);
      if ((unint64_t)v42 < v43)
      {
        if (v42)
        {
          v44 = *v7;
          *v7 = 0;
          *v42 = v44;
        }
        v5 = (unint64_t)(v42 + 1);
        goto LABEL_9;
      }
      v45 = *(_QWORD *)(v15 + 24);
      v46 = ((uint64_t)v42 - v45) >> 3;
      v47 = v46 + 1;
      if ((unint64_t)(v46 + 1) >> 61)
        abort();
      v48 = v43 - v45;
      if (v48 >> 2 > v47)
        v47 = v48 >> 2;
      if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8)
        v49 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v49 = v47;
      if (v49)
      {
        v50 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v15 + 48) + 16))(*(_QWORD *)(v15 + 48), 8 * v49, 8);
        v51 = (_QWORD *)(v50 + 8 * v46);
        v52 = v50 + 8 * v49;
        if (v50)
        {
          v53 = *v7;
          *v7 = 0;
          *v51 = v53;
        }
      }
      else
      {
        v52 = 0;
        v51 = (_QWORD *)(8 * v46);
      }
      v5 = (unint64_t)(v51 + 1);
      v54 = *(_QWORD **)(v15 + 24);
      v55 = *(_QWORD *)(v15 + 32);
      if ((_QWORD *)v55 == v54)
      {
        *(_QWORD *)(v15 + 24) = v51;
        *(_QWORD *)(v15 + 32) = v5;
        v61 = *(_QWORD *)(v15 + 40);
        *(_QWORD *)(v15 + 40) = v52;
        goto LABEL_118;
      }
      v56 = v55 - (_QWORD)v54 - 8;
      if (v56 <= 0x47
        || (v57 = v56 >> 3, v55 - 8 * v57 - 8 < (unint64_t)v51) && (unint64_t)&v51[-v57 - 1] < v55)
      {
        v58 = *(_QWORD **)(v15 + 32);
        do
        {
LABEL_109:
          v59 = *--v58;
          *v58 = 0;
          *--v51 = v59;
        }
        while (v58 != v54);
        goto LABEL_110;
      }
      v66 = v57 + 1;
      v67 = (v57 + 1) & 0x3FFFFFFFFFFFFFFCLL;
      v58 = (_QWORD *)(v55 - 8 * v67);
      v68 = v51 - 2;
      v69 = (__int128 *)(v55 - 32);
      v70 = v67;
      do
      {
        v72 = *v69;
        v71 = v69[1];
        *v69 = 0uLL;
        v69[1] = 0uLL;
        v69 -= 2;
        *(v68 - 1) = v72;
        *v68 = v71;
        v68 -= 2;
        v70 -= 4;
      }
      while (v70);
      v51 -= v67;
      if (v66 != v67)
        goto LABEL_109;
LABEL_110:
      v55 = *(_QWORD *)(v15 + 24);
      v60 = *(_QWORD **)(v15 + 32);
      *(_QWORD *)(v15 + 24) = v51;
      *(_QWORD *)(v15 + 32) = v5;
      v61 = *(_QWORD *)(v15 + 40);
      *(_QWORD *)(v15 + 40) = v52;
      while (v60 != (_QWORD *)v55)
      {
        v63 = (void (***)(_QWORD))*--v60;
        v62 = v63;
        *v60 = 0;
        if (v63)
        {
          (**v62)(v62);
          {
            v65 = operator new();
            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v65, "VectorKitLabels", 0x5ED09DD50000000FLL);
          }
          (*(void (**)(uint64_t, void (***)(_QWORD), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                  + 40))(mdm::Allocator::instance(void)::alloc, v62, 128);
        }
      }
LABEL_118:
      if (v55)
        (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v15 + 48) + 40))(*(_QWORD *)(v15 + 48), v55, v61 - v55);
LABEL_9:
      *(_QWORD *)(v15 + 32) = v5;
      ++v7;
    }
    v75 = operator new();
    *(_QWORD *)v75 = &off_1E42AF128;
    *(_QWORD *)(v75 + 8) = 0;
    *(_QWORD *)(v75 + 64) = 0;
    *(_QWORD *)(v75 + 40) = 0;
    *(_QWORD *)(v75 + 48) = 0;
    *(_QWORD *)(v75 + 32) = "";
    *(_DWORD *)(v75 + 56) = 0;
    *(_DWORD *)(v75 + 72) = 1065353216;
    v76 = 0uLL;
    *(_OWORD *)(v75 + 80) = 0u;
    *(_OWORD *)(v75 + 96) = 0u;
    v77 = vdupq_n_s64(1uLL);
    *(int64x2_t *)(v75 + 112) = v77;
    *(_QWORD *)(v75 + 128) = 0;
    *(_QWORD *)(v75 + 16) = &off_1E42AF548;
    *(_BYTE *)(v75 + 136) = 1;
    *(_QWORD *)(v75 + 192) = 0;
    *(_QWORD *)(v75 + 168) = 0;
    *(_QWORD *)(v75 + 176) = 0;
    *(_QWORD *)(v75 + 160) = "";
    *(_DWORD *)(v75 + 184) = 0;
    *(_DWORD *)(v75 + 200) = 1065353216;
    *(_OWORD *)(v75 + 208) = 0u;
    *(_OWORD *)(v75 + 224) = 0u;
    *(int64x2_t *)(v75 + 240) = v77;
    *(_QWORD *)(v75 + 256) = 0;
    *(_QWORD *)(v75 + 144) = &off_1E42AF548;
    *(_BYTE *)(v75 + 264) = 1;
    *(_QWORD *)(v75 + 320) = 0;
    *(_DWORD *)(v75 + 312) = 0;
    *(_QWORD *)(v75 + 288) = "";
    *(_QWORD *)(v75 + 296) = 0;
    *(_QWORD *)(v75 + 304) = 0;
    *(_DWORD *)(v75 + 328) = 1065353216;
    *(_OWORD *)(v75 + 336) = 0u;
    *(_OWORD *)(v75 + 352) = 0u;
    *(int64x2_t *)(v75 + 368) = v77;
    *(_QWORD *)(v75 + 384) = 0;
    *(_QWORD *)(v75 + 272) = &off_1E42AF548;
    *(_BYTE *)(v75 + 392) = 1;
    *(_QWORD *)(v75 + 448) = 0;
    *(_QWORD *)(v75 + 424) = 0;
    *(_QWORD *)(v75 + 432) = 0;
    *(_QWORD *)(v75 + 416) = "";
    *(_DWORD *)(v75 + 440) = 0;
    *(_DWORD *)(v75 + 456) = 1065353216;
    *(_OWORD *)(v75 + 464) = 0u;
    *(_OWORD *)(v75 + 480) = 0u;
    *(int64x2_t *)(v75 + 496) = v77;
    *(_QWORD *)(v75 + 512) = 0;
    *(_QWORD *)(v75 + 400) = &off_1E42AF548;
    *(_BYTE *)(v75 + 520) = 1;
    *(_QWORD *)(v75 + 544) = "";
    *(_QWORD *)(v75 + 576) = 0;
    *(_DWORD *)(v75 + 568) = 0;
    *(_QWORD *)(v75 + 552) = 0;
    *(_QWORD *)(v75 + 560) = 0;
    *(_DWORD *)(v75 + 584) = 1065353216;
    *(_OWORD *)(v75 + 592) = 0u;
    *(_OWORD *)(v75 + 608) = 0u;
    *(int64x2_t *)(v75 + 624) = v77;
    *(_QWORD *)(v75 + 640) = 0;
    *(_QWORD *)(v75 + 528) = &off_1E42AF548;
    *(_BYTE *)(v75 + 648) = 1;
    *(_QWORD *)(v75 + 672) = "";
    *(_QWORD *)(v75 + 704) = 0;
    *(_QWORD *)(v75 + 688) = 0;
    *(_QWORD *)(v75 + 680) = 0;
    *(_DWORD *)(v75 + 696) = 0;
    *(_DWORD *)(v75 + 712) = 1065353216;
    *(_OWORD *)(v75 + 720) = 0u;
    *(_OWORD *)(v75 + 736) = 0u;
    *(int64x2_t *)(v75 + 752) = v77;
    *(_QWORD *)(v75 + 768) = 0;
    *(_QWORD *)(v75 + 656) = &off_1E42AF548;
    *(_BYTE *)(v75 + 776) = 1;
    *(_QWORD *)(v75 + 800) = "";
    *(_QWORD *)(v75 + 832) = 0;
    *(_QWORD *)(v75 + 816) = 0;
    *(_QWORD *)(v75 + 808) = 0;
    *(_DWORD *)(v75 + 824) = 0;
    *(_DWORD *)(v75 + 840) = 1065353216;
    *(_OWORD *)(v75 + 848) = 0u;
    *(_OWORD *)(v75 + 864) = 0u;
    *(int64x2_t *)(v75 + 880) = v77;
    *(_QWORD *)(v75 + 896) = 0;
    *(_QWORD *)(v75 + 784) = &off_1E42AF548;
    *(_BYTE *)(v75 + 904) = 1;
    *(_QWORD *)(v75 + 928) = "";
    *(_QWORD *)(v75 + 960) = 0;
    *(_QWORD *)(v75 + 944) = 0;
    *(_QWORD *)(v75 + 936) = 0;
    *(_DWORD *)(v75 + 952) = 0;
    *(_DWORD *)(v75 + 968) = 1065353216;
    *(_OWORD *)(v75 + 976) = 0u;
    *(_OWORD *)(v75 + 992) = 0u;
    *(int64x2_t *)(v75 + 1008) = v77;
    *(_QWORD *)(v75 + 1024) = 0;
    *(_QWORD *)(v75 + 912) = &off_1E42AF548;
    *(_BYTE *)(v75 + 1032) = 1;
    *(_QWORD *)(v75 + 1056) = "";
    *(_QWORD *)(v75 + 1088) = 0;
    *(_QWORD *)(v75 + 1072) = 0;
    *(_QWORD *)(v75 + 1064) = 0;
    *(_DWORD *)(v75 + 1080) = 0;
    *(_DWORD *)(v75 + 1096) = 1065353216;
    *(_OWORD *)(v75 + 1120) = 0u;
    *(_OWORD *)(v75 + 1104) = 0u;
    *(int64x2_t *)(v75 + 1136) = v77;
    *(_QWORD *)(v75 + 1152) = 0;
    *(_QWORD *)(v75 + 1040) = &off_1E42AF548;
    *(_BYTE *)(v75 + 1160) = 1;
    *(_QWORD *)(v75 + 1184) = "";
    *(_QWORD *)(v75 + 1216) = 0;
    *(_QWORD *)(v75 + 1200) = 0;
    *(_QWORD *)(v75 + 1192) = 0;
    *(_DWORD *)(v75 + 1208) = 0;
    *(_DWORD *)(v75 + 1224) = 1065353216;
    *(_OWORD *)(v75 + 1248) = 0u;
    *(_OWORD *)(v75 + 1232) = 0u;
    *(int64x2_t *)(v75 + 1264) = v77;
    *(_QWORD *)(v75 + 1280) = 0;
    *(_QWORD *)(v75 + 1168) = &off_1E42AF548;
    *(_BYTE *)(v75 + 1288) = 1;
    *(_QWORD *)(v75 + 1312) = "";
    *(_QWORD *)(v75 + 1344) = 0;
    *(_QWORD *)(v75 + 1328) = 0;
    *(_QWORD *)(v75 + 1320) = 0;
    *(_DWORD *)(v75 + 1336) = 0;
    *(_DWORD *)(v75 + 1352) = 1065353216;
    *(_OWORD *)(v75 + 1376) = 0u;
    *(_OWORD *)(v75 + 1360) = 0u;
    *(int64x2_t *)(v75 + 1392) = v77;
    *(_QWORD *)(v75 + 1408) = 0;
    *(_QWORD *)(v75 + 1296) = &off_1E42AF548;
    *(_BYTE *)(v75 + 1416) = 1;
    *(_QWORD *)(v75 + 1440) = "";
    *(_QWORD *)(v75 + 1472) = 0;
    *(_QWORD *)(v75 + 1456) = 0;
    *(_QWORD *)(v75 + 1448) = 0;
    *(_DWORD *)(v75 + 1464) = 0;
    *(_DWORD *)(v75 + 1480) = 1065353216;
    *(_OWORD *)(v75 + 1504) = 0u;
    *(_OWORD *)(v75 + 1488) = 0u;
    *(int64x2_t *)(v75 + 1520) = v77;
    *(_QWORD *)(v75 + 1536) = 0;
    *(_QWORD *)(v75 + 1424) = &off_1E42AF548;
    *(_BYTE *)(v75 + 1544) = 1;
    *(_QWORD *)(v75 + 1568) = "";
    *(_QWORD *)(v75 + 1600) = 0;
    *(_QWORD *)(v75 + 1584) = 0;
    *(_QWORD *)(v75 + 1576) = 0;
    *(_DWORD *)(v75 + 1592) = 0;
    *(_DWORD *)(v75 + 1608) = 1065353216;
    *(_OWORD *)(v75 + 1632) = 0u;
    *(_OWORD *)(v75 + 1616) = 0u;
    *(int64x2_t *)(v75 + 1648) = v77;
    *(_QWORD *)(v75 + 1664) = 0;
    *(_QWORD *)(v75 + 1552) = &off_1E42AF548;
    *(_BYTE *)(v75 + 1672) = 1;
    *(_QWORD *)(v75 + 1696) = "";
    *(_QWORD *)(v75 + 1728) = 0;
    *(_QWORD *)(v75 + 1712) = 0;
    *(_QWORD *)(v75 + 1704) = 0;
    *(_DWORD *)(v75 + 1720) = 0;
    *(_DWORD *)(v75 + 1736) = 1065353216;
    *(_OWORD *)(v75 + 1760) = 0u;
    *(_OWORD *)(v75 + 1744) = 0u;
    *(int64x2_t *)(v75 + 1776) = v77;
    *(_QWORD *)(v75 + 1792) = 0;
    *(_QWORD *)(v75 + 1680) = &off_1E42AF548;
    *(_BYTE *)(v75 + 1800) = 1;
    *(_QWORD *)(v75 + 1824) = "";
    *(_QWORD *)(v75 + 1856) = 0;
    *(_QWORD *)(v75 + 1840) = 0;
    *(_QWORD *)(v75 + 1832) = 0;
    *(_DWORD *)(v75 + 1848) = 0;
    *(_DWORD *)(v75 + 1864) = 1065353216;
    *(_OWORD *)(v75 + 1888) = 0u;
    *(_OWORD *)(v75 + 1872) = 0u;
    *(int64x2_t *)(v75 + 1904) = v77;
    *(_QWORD *)(v75 + 1920) = 0;
    *(_QWORD *)(v75 + 1808) = &off_1E42AF548;
    *(_BYTE *)(v75 + 1928) = 1;
    *(_QWORD *)(v75 + 1952) = "";
    *(_QWORD *)(v75 + 1984) = 0;
    *(_QWORD *)(v75 + 1968) = 0;
    *(_QWORD *)(v75 + 1960) = 0;
    *(_DWORD *)(v75 + 1976) = 0;
    *(_DWORD *)(v75 + 1992) = 1065353216;
    *(_OWORD *)(v75 + 2016) = 0u;
    *(_OWORD *)(v75 + 2000) = 0u;
    *(int64x2_t *)(v75 + 2032) = v77;
    *(_QWORD *)(v75 + 2048) = 0;
    *(_QWORD *)(v75 + 1936) = &off_1E42AF548;
    *(_BYTE *)(v75 + 2056) = 1;
    *(_QWORD *)(v75 + 2080) = "";
    *(_QWORD *)(v75 + 2112) = 0;
    *(_QWORD *)(v75 + 2096) = 0;
    *(_QWORD *)(v75 + 2088) = 0;
    *(_DWORD *)(v75 + 2104) = 0;
    *(_DWORD *)(v75 + 2120) = 1065353216;
    *(_OWORD *)(v75 + 2144) = 0u;
    *(_OWORD *)(v75 + 2128) = 0u;
    *(int64x2_t *)(v75 + 2160) = v77;
    *(_QWORD *)(v75 + 2176) = 0;
    *(_QWORD *)(v75 + 2064) = &off_1E42AF548;
    *(_BYTE *)(v75 + 2184) = 1;
    *(_QWORD *)(v75 + 2208) = "";
    *(_QWORD *)(v75 + 2240) = 0;
    *(_QWORD *)(v75 + 2224) = 0;
    *(_QWORD *)(v75 + 2216) = 0;
    *(_DWORD *)(v75 + 2232) = 0;
    *(_DWORD *)(v75 + 2248) = 1065353216;
    *(_OWORD *)(v75 + 2272) = 0u;
    *(_OWORD *)(v75 + 2256) = 0u;
    *(int64x2_t *)(v75 + 2288) = v77;
    *(_QWORD *)(v75 + 2304) = 0;
    *(_QWORD *)(v75 + 2192) = &off_1E42AF548;
    *(_BYTE *)(v75 + 2312) = 1;
    *(_OWORD *)(v75 + 2352) = 0u;
    *(_OWORD *)(v75 + 2336) = 0u;
    *(_OWORD *)(v75 + 2320) = 0u;
    if ((v78 & 1) == 0)
    {
      v76 = 0uLL;
      if (v732)
      {
        v733 = operator new();
        ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v733, "GeoGL", 0xA3D02C1100000005);
        v76 = 0uLL;
      }
    }
    *(_QWORD *)(v75 + 2368) = ggl::Allocator::instance(void)::alloc;
    *(_QWORD *)(v75 + 2408) = 0;
    *(_OWORD *)(v75 + 2376) = v76;
    *(_OWORD *)(v75 + 2392) = v76;
    *(_QWORD *)(v75 + 2416) = 32;
    v79 = malloc_type_malloc(0xF10uLL, 0xB644C221uLL);
    *v79 = 0u;
    *(_QWORD *)(v75 + 2400) = v79;
    *(_QWORD *)(v75 + 2408) = v79;
    *(_QWORD *)(v75 + 2424) = 0;
    *(_OWORD *)(v75 + 2432) = 0u;
    *(_BYTE *)(v75 + 2448) = 1;
    *(_QWORD *)(v75 + 2456) = v742[2];
    *(_QWORD *)v75 = &off_1E428FCA8;
    *(_OWORD *)(v75 + 2573) = 0u;
    *(_OWORD *)(v75 + 2560) = 0u;
    *(_OWORD *)(v75 + 2544) = 0u;
    *(_OWORD *)(v75 + 2528) = 0u;
    *(_OWORD *)(v75 + 2512) = 0u;
    *(_OWORD *)(v75 + 2496) = 0u;
    *(_OWORD *)(v75 + 2480) = 0u;
    *(_OWORD *)(v75 + 2464) = 0u;
    *(_WORD *)(v75 + 2608) = 0;
    *(_OWORD *)(v75 + 2592) = 0u;
    +[VKSharedResourcesManager sharedResources](VKSharedResourcesManager, "sharedResources");
    v80 = (void *)objc_claimAutoreleasedReturnValue();
    *(_BYTE *)(v75 + 2609) = *(_BYTE *)(objc_msgSend(v80, "gglDevice") + 20);

    v81 = (ggl::RouteLine::BasePipelineSetup *)operator new();
    ggl::RouteLine::BasePipelineSetup::BasePipelineSetup(v81);
    v82 = (std::__shared_weak_count *)operator new(0xE8uLL);
    v82->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v82->__shared_owners_;
    v82->__shared_weak_owners_ = 0;
    v82->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2E48;
    v84 = ggl::BufferData::BufferData((uint64_t)&v82[1], qword_1EE572D18, 2, 1, 6, 1);
    v82[9].__shared_owners_ = (uint64_t)ggl::RouteLine::Style::reflection(void)::reflection;
    v82[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9FD0;
    v85 = *((_QWORD *)v81 + 8);
    *(_QWORD *)(v85 + 32) = v84;
    *(_QWORD *)(v85 + 40) = 0;
    v86 = *((_QWORD *)v81 + 20);
    do
      v87 = __ldxr(p_shared_owners);
    while (__stxr(v87 + 1, p_shared_owners));
    v88 = *(std::__shared_weak_count **)(v86 + 40);
    *(_QWORD *)(v86 + 32) = v84;
    *(_QWORD *)(v86 + 40) = v82;
    if (v88)
    {
      v89 = (unint64_t *)&v88->__shared_owners_;
      do
        v90 = __ldaxr(v89);
      while (__stlxr(v90 - 1, v89));
      if (!v90)
      {
        ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
        std::__shared_weak_count::__release_weak(v88);
      }
    }
    do
      v91 = __ldaxr(p_shared_owners);
    while (__stlxr(v91 - 1, p_shared_owners));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
    v92 = (uint64_t *)*((_QWORD *)v81 + 8);
    v92[1] = 0;
    v93 = *a3;
    *v92 = *a3;
    v94 = (_QWORD *)*((_QWORD *)v81 + 20);
    v95 = a3[1];
    if (v95)
    {
      v96 = (unint64_t *)(v95 + 8);
      do
        v97 = __ldxr(v96);
      while (__stxr(v97 + 1, v96));
    }
    v98 = (std::__shared_weak_count *)v94[1];
    *v94 = v93;
    v94[1] = v95;
    if (v98)
    {
      v99 = (unint64_t *)&v98->__shared_owners_;
      do
        v100 = __ldaxr(v99);
      while (__stlxr(v100 - 1, v99));
      if (!v100)
      {
        ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
        std::__shared_weak_count::__release_weak(v98);
      }
    }
    v101 = *((_QWORD *)v81 + 8);
    *(_QWORD *)(v101 + 24) = 0;
    v102 = *a4;
    *(_QWORD *)(v101 + 16) = *a4;
    v103 = *((_QWORD *)v81 + 20);
    v104 = a4[1];
    if (v104)
    {
      v105 = (unint64_t *)(v104 + 8);
      do
        v106 = __ldxr(v105);
      while (__stxr(v106 + 1, v105));
    }
    v107 = *(std::__shared_weak_count **)(v103 + 24);
    *(_QWORD *)(v103 + 16) = v102;
    *(_QWORD *)(v103 + 24) = v104;
    if (v107)
    {
      v108 = (unint64_t *)&v107->__shared_owners_;
      do
        v109 = __ldaxr(v108);
      while (__stlxr(v109 - 1, v108));
      if (!v109)
      {
        ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
        std::__shared_weak_count::__release_weak(v107);
      }
    }
    v110 = (ggl::RouteLine::BasePipelineSetup *)operator new();
    ggl::RouteLine::BasePipelineSetup::BasePipelineSetup(v110);
    v111 = (std::__shared_weak_count *)operator new(0xE8uLL);
    v111->__shared_owners_ = 0;
    v112 = (unint64_t *)&v111->__shared_owners_;
    v111->__shared_weak_owners_ = 0;
    v111->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2E48;
    v113 = ggl::BufferData::BufferData((uint64_t)&v111[1], qword_1EE572D18, 2, 1, 6, 1);
    v111[9].__shared_owners_ = (uint64_t)ggl::RouteLine::Style::reflection(void)::reflection;
    v111[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9FD0;
    v114 = *((_QWORD *)v110 + 8);
    *(_QWORD *)(v114 + 32) = v113;
    *(_QWORD *)(v114 + 40) = 0;
    v115 = *((_QWORD *)v110 + 20);
    do
      v116 = __ldxr(v112);
    while (__stxr(v116 + 1, v112));
    v117 = *(std::__shared_weak_count **)(v115 + 40);
    *(_QWORD *)(v115 + 32) = v113;
    *(_QWORD *)(v115 + 40) = v111;
    if (v117)
    {
      v118 = (unint64_t *)&v117->__shared_owners_;
      do
        v119 = __ldaxr(v118);
      while (__stlxr(v119 - 1, v118));
      if (!v119)
      {
        ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
        std::__shared_weak_count::__release_weak(v117);
      }
    }
    do
      v120 = __ldaxr(v112);
    while (__stlxr(v120 - 1, v112));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
    v121 = (uint64_t *)*((_QWORD *)v110 + 8);
    v121[1] = 0;
    v122 = *a3;
    *v121 = *a3;
    v123 = (_QWORD *)*((_QWORD *)v110 + 20);
    v124 = a3[1];
    if (v124)
    {
      v125 = (unint64_t *)(v124 + 8);
      do
        v126 = __ldxr(v125);
      while (__stxr(v126 + 1, v125));
    }
    v127 = (std::__shared_weak_count *)v123[1];
    *v123 = v122;
    v123[1] = v124;
    if (v127)
    {
      v128 = (unint64_t *)&v127->__shared_owners_;
      do
        v129 = __ldaxr(v128);
      while (__stlxr(v129 - 1, v128));
      if (!v129)
      {
        ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
        std::__shared_weak_count::__release_weak(v127);
      }
    }
    v130 = *((_QWORD *)v110 + 8);
    *(_QWORD *)(v130 + 24) = 0;
    v131 = *a4;
    *(_QWORD *)(v130 + 16) = *a4;
    v132 = *((_QWORD *)v110 + 20);
    v133 = a4[1];
    if (v133)
    {
      v134 = (unint64_t *)(v133 + 8);
      do
        v135 = __ldxr(v134);
      while (__stxr(v135 + 1, v134));
    }
    v136 = *(std::__shared_weak_count **)(v132 + 24);
    *(_QWORD *)(v132 + 16) = v131;
    *(_QWORD *)(v132 + 24) = v133;
    if (v136)
    {
      v137 = (unint64_t *)&v136->__shared_owners_;
      do
        v138 = __ldaxr(v137);
      while (__stlxr(v138 - 1, v137));
      if (!v138)
      {
        ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
        std::__shared_weak_count::__release_weak(v136);
      }
    }
    v139 = (ggl::RouteLine::BasePipelineSetup *)operator new();
    ggl::RouteLine::BasePipelineSetup::BasePipelineSetup(v139);
    v140 = (std::__shared_weak_count *)operator new(0xE8uLL);
    v140->__shared_owners_ = 0;
    v141 = (unint64_t *)&v140->__shared_owners_;
    v140->__shared_weak_owners_ = 0;
    v140->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2E48;
    v142 = ggl::BufferData::BufferData((uint64_t)&v140[1], qword_1EE572D18, 2, 1, 6, 1);
    v140[9].__shared_owners_ = (uint64_t)ggl::RouteLine::Style::reflection(void)::reflection;
    v140[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9FD0;
    v143 = *((_QWORD *)v139 + 8);
    *(_QWORD *)(v143 + 32) = v142;
    *(_QWORD *)(v143 + 40) = 0;
    v754 = v139;
    v144 = *((_QWORD *)v139 + 20);
    do
      v145 = __ldxr(v141);
    while (__stxr(v145 + 1, v141));
    v146 = *(std::__shared_weak_count **)(v144 + 40);
    *(_QWORD *)(v144 + 32) = v142;
    *(_QWORD *)(v144 + 40) = v140;
    if (v146)
    {
      v147 = (unint64_t *)&v146->__shared_owners_;
      do
        v148 = __ldaxr(v147);
      while (__stlxr(v148 - 1, v147));
      if (!v148)
      {
        ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
        std::__shared_weak_count::__release_weak(v146);
      }
    }
    do
      v149 = __ldaxr(v141);
    while (__stlxr(v149 - 1, v141));
    if (!v149)
    {
      ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
      std::__shared_weak_count::__release_weak(v140);
    }
    v150 = (uint64_t *)*((_QWORD *)v754 + 8);
    v150[1] = 0;
    v151 = *a3;
    *v150 = *a3;
    v152 = (_QWORD *)*((_QWORD *)v754 + 20);
    v153 = a3[1];
    if (v153)
    {
      v154 = (unint64_t *)(v153 + 8);
      do
        v155 = __ldxr(v154);
      while (__stxr(v155 + 1, v154));
    }
    v156 = (std::__shared_weak_count *)v152[1];
    *v152 = v151;
    v152[1] = v153;
    if (v156)
    {
      v157 = (unint64_t *)&v156->__shared_owners_;
      do
        v158 = __ldaxr(v157);
      while (__stlxr(v158 - 1, v157));
      if (!v158)
      {
        ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
        std::__shared_weak_count::__release_weak(v156);
      }
    }
    v159 = *((_QWORD *)v754 + 8);
    *(_QWORD *)(v159 + 24) = 0;
    v160 = *a4;
    *(_QWORD *)(v159 + 16) = *a4;
    v161 = *((_QWORD *)v754 + 20);
    v162 = a4[1];
    if (v162)
    {
      v163 = (unint64_t *)(v162 + 8);
      do
        v164 = __ldxr(v163);
      while (__stxr(v164 + 1, v163));
    }
    v165 = *(std::__shared_weak_count **)(v161 + 24);
    *(_QWORD *)(v161 + 16) = v160;
    *(_QWORD *)(v161 + 24) = v162;
    if (v165)
    {
      v166 = (unint64_t *)&v165->__shared_owners_;
      do
        v167 = __ldaxr(v166);
      while (__stlxr(v167 - 1, v166));
      if (!v167)
      {
        ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
        std::__shared_weak_count::__release_weak(v165);
      }
    }
    v168 = (ggl::RouteLine::BasePipelineSetup *)operator new();
    ggl::RouteLine::BasePipelineSetup::BasePipelineSetup(v168);
    v169 = (std::__shared_weak_count *)operator new(0xE8uLL);
    v169->__shared_owners_ = 0;
    v170 = (unint64_t *)&v169->__shared_owners_;
    v169->__shared_weak_owners_ = 0;
    v169->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2E48;
    v171 = ggl::BufferData::BufferData((uint64_t)&v169[1], qword_1EE572D18, 2, 1, 6, 1);
    v169[9].__shared_owners_ = (uint64_t)ggl::RouteLine::Style::reflection(void)::reflection;
    v169[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9FD0;
    v172 = *((_QWORD *)v168 + 8);
    *(_QWORD *)(v172 + 32) = v171;
    *(_QWORD *)(v172 + 40) = 0;
    v751 = v168;
    v173 = *((_QWORD *)v168 + 20);
    do
      v174 = __ldxr(v170);
    while (__stxr(v174 + 1, v170));
    v175 = *(std::__shared_weak_count **)(v173 + 40);
    *(_QWORD *)(v173 + 32) = v171;
    *(_QWORD *)(v173 + 40) = v169;
    if (v175)
    {
      v176 = (unint64_t *)&v175->__shared_owners_;
      do
        v177 = __ldaxr(v176);
      while (__stlxr(v177 - 1, v176));
      if (!v177)
      {
        ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
        std::__shared_weak_count::__release_weak(v175);
      }
    }
    do
      v178 = __ldaxr(v170);
    while (__stlxr(v178 - 1, v170));
    if (!v178)
    {
      ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
      std::__shared_weak_count::__release_weak(v169);
    }
    v179 = (uint64_t *)*((_QWORD *)v751 + 8);
    v179[1] = 0;
    v180 = *a3;
    *v179 = *a3;
    v181 = (_QWORD *)*((_QWORD *)v751 + 20);
    v182 = a3[1];
    if (v182)
    {
      v183 = (unint64_t *)(v182 + 8);
      do
        v184 = __ldxr(v183);
      while (__stxr(v184 + 1, v183));
    }
    v185 = (std::__shared_weak_count *)v181[1];
    *v181 = v180;
    v181[1] = v182;
    if (v185)
    {
      v186 = (unint64_t *)&v185->__shared_owners_;
      do
        v187 = __ldaxr(v186);
      while (__stlxr(v187 - 1, v186));
      if (!v187)
      {
        ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
        std::__shared_weak_count::__release_weak(v185);
      }
    }
    v188 = *((_QWORD *)v751 + 8);
    *(_QWORD *)(v188 + 24) = 0;
    v189 = *a4;
    *(_QWORD *)(v188 + 16) = *a4;
    v190 = *((_QWORD *)v751 + 20);
    v191 = a4[1];
    if (v191)
    {
      v192 = (unint64_t *)(v191 + 8);
      do
        v193 = __ldxr(v192);
      while (__stxr(v193 + 1, v192));
    }
    v194 = *(std::__shared_weak_count **)(v190 + 24);
    *(_QWORD *)(v190 + 16) = v189;
    *(_QWORD *)(v190 + 24) = v191;
    if (v194)
    {
      v195 = (unint64_t *)&v194->__shared_owners_;
      do
        v196 = __ldaxr(v195);
      while (__stlxr(v196 - 1, v195));
      if (!v196)
      {
        ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
        std::__shared_weak_count::__release_weak(v194);
      }
    }
    v197 = (ggl::RouteLine::PatternedBasePipelineSetup *)operator new();
    ggl::RouteLine::PatternedBasePipelineSetup::PatternedBasePipelineSetup(v197);
    v198 = (std::__shared_weak_count *)operator new(0xE8uLL);
    v741 = v110;
    v198->__shared_owners_ = 0;
    v199 = (unint64_t *)&v198->__shared_owners_;
    v198->__shared_weak_owners_ = 0;
    v198->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E17F8;
    v200 = ggl::BufferData::BufferData((uint64_t)&v198[1], qword_1EE56BEF8, 2, 1, 6, 1);
    v198[9].__shared_owners_ = (uint64_t)ggl::PatternedRibbon::Style::reflection(void)::reflection;
    v198[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9170;
    v201 = *((_QWORD *)v197 + 8);
    *(_QWORD *)(v201 + 32) = v200;
    *(_QWORD *)(v201 + 40) = 0;
    v202 = *((_QWORD *)v197 + 20);
    do
      v203 = __ldxr(v199);
    while (__stxr(v203 + 1, v199));
    v204 = *(std::__shared_weak_count **)(v202 + 40);
    *(_QWORD *)(v202 + 32) = v200;
    *(_QWORD *)(v202 + 40) = v198;
    if (v204)
    {
      v205 = (unint64_t *)&v204->__shared_owners_;
      do
        v206 = __ldaxr(v205);
      while (__stlxr(v206 - 1, v205));
      if (!v206)
      {
        ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
        std::__shared_weak_count::__release_weak(v204);
      }
    }
    do
      v207 = __ldaxr(v199);
    while (__stlxr(v207 - 1, v199));
    if (!v207)
    {
      ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
      std::__shared_weak_count::__release_weak(v198);
    }
    v208 = (std::__shared_weak_count *)operator new(0xE8uLL);
    v208->__shared_owners_ = 0;
    v209 = (unint64_t *)&v208->__shared_owners_;
    v208->__shared_weak_owners_ = 0;
    v208->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2E48;
    v210 = ggl::BufferData::BufferData((uint64_t)&v208[1], qword_1EE572D18, 2, 1, 6, 1);
    v208[9].__shared_owners_ = (uint64_t)ggl::RouteLine::Style::reflection(void)::reflection;
    v208[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9FD0;
    v211 = *((_QWORD *)v197 + 8);
    *(_QWORD *)(v211 + 48) = v210;
    *(_QWORD *)(v211 + 56) = 0;
    v212 = *((_QWORD *)v197 + 20);
    do
      v213 = __ldxr(v209);
    while (__stxr(v213 + 1, v209));
    v214 = *(std::__shared_weak_count **)(v212 + 56);
    *(_QWORD *)(v212 + 48) = v210;
    *(_QWORD *)(v212 + 56) = v208;
    if (v214)
    {
      v215 = (unint64_t *)&v214->__shared_owners_;
      do
        v216 = __ldaxr(v215);
      while (__stlxr(v216 - 1, v215));
      if (!v216)
      {
        ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
        std::__shared_weak_count::__release_weak(v214);
      }
    }
    do
      v217 = __ldaxr(v209);
    while (__stlxr(v217 - 1, v209));
    if (!v217)
    {
      ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
      std::__shared_weak_count::__release_weak(v208);
    }
    v218 = (uint64_t *)*((_QWORD *)v197 + 8);
    v218[1] = 0;
    v219 = *a3;
    *v218 = *a3;
    v220 = (_QWORD *)*((_QWORD *)v197 + 20);
    v221 = a3[1];
    if (v221)
    {
      v222 = (unint64_t *)(v221 + 8);
      do
        v223 = __ldxr(v222);
      while (__stxr(v223 + 1, v222));
    }
    v224 = (std::__shared_weak_count *)v220[1];
    *v220 = v219;
    v220[1] = v221;
    if (v224)
    {
      v225 = (unint64_t *)&v224->__shared_owners_;
      do
        v226 = __ldaxr(v225);
      while (__stlxr(v226 - 1, v225));
      if (!v226)
      {
        ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
        std::__shared_weak_count::__release_weak(v224);
      }
    }
    v227 = *((_QWORD *)v197 + 8);
    *(_QWORD *)(v227 + 24) = 0;
    v228 = *a4;
    *(_QWORD *)(v227 + 16) = *a4;
    v229 = *((_QWORD *)v197 + 20);
    v230 = a4[1];
    if (v230)
    {
      v231 = (unint64_t *)(v230 + 8);
      do
        v232 = __ldxr(v231);
      while (__stxr(v232 + 1, v231));
    }
    v233 = *(std::__shared_weak_count **)(v229 + 24);
    *(_QWORD *)(v229 + 16) = v228;
    *(_QWORD *)(v229 + 24) = v230;
    if (v233)
    {
      v234 = (unint64_t *)&v233->__shared_owners_;
      do
        v235 = __ldaxr(v234);
      while (__stlxr(v235 - 1, v234));
      if (!v235)
      {
        ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
        std::__shared_weak_count::__release_weak(v233);
      }
    }
    v236 = (ggl::RouteLine::PatternedBasePipelineSetup *)operator new();
    ggl::RouteLine::PatternedBasePipelineSetup::PatternedBasePipelineSetup(v236);
    v237 = (std::__shared_weak_count *)operator new(0xE8uLL);
    v237->__shared_owners_ = 0;
    v238 = (unint64_t *)&v237->__shared_owners_;
    v237->__shared_weak_owners_ = 0;
    v237->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E17F8;
    v239 = ggl::BufferData::BufferData((uint64_t)&v237[1], qword_1EE56BEF8, 2, 1, 6, 1);
    v237[9].__shared_owners_ = (uint64_t)ggl::PatternedRibbon::Style::reflection(void)::reflection;
    v237[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9170;
    v240 = *((_QWORD *)v236 + 8);
    *(_QWORD *)(v240 + 32) = v239;
    *(_QWORD *)(v240 + 40) = 0;
    v241 = *((_QWORD *)v236 + 20);
    do
      v242 = __ldxr(v238);
    while (__stxr(v242 + 1, v238));
    v243 = *(std::__shared_weak_count **)(v241 + 40);
    *(_QWORD *)(v241 + 32) = v239;
    *(_QWORD *)(v241 + 40) = v237;
    if (v243)
    {
      v244 = (unint64_t *)&v243->__shared_owners_;
      do
        v245 = __ldaxr(v244);
      while (__stlxr(v245 - 1, v244));
      if (!v245)
      {
        ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
        std::__shared_weak_count::__release_weak(v243);
      }
    }
    do
      v246 = __ldaxr(v238);
    while (__stlxr(v246 - 1, v238));
    if (!v246)
    {
      ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
      std::__shared_weak_count::__release_weak(v237);
    }
    v247 = (std::__shared_weak_count *)operator new(0xE8uLL);
    v247->__shared_owners_ = 0;
    v248 = (unint64_t *)&v247->__shared_owners_;
    v247->__shared_weak_owners_ = 0;
    v247->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2E48;
    v249 = ggl::BufferData::BufferData((uint64_t)&v247[1], qword_1EE572D18, 2, 1, 6, 1);
    v247[9].__shared_owners_ = (uint64_t)ggl::RouteLine::Style::reflection(void)::reflection;
    v247[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9FD0;
    v250 = *((_QWORD *)v236 + 8);
    *(_QWORD *)(v250 + 48) = v249;
    *(_QWORD *)(v250 + 56) = 0;
    v251 = *((_QWORD *)v236 + 20);
    do
      v252 = __ldxr(v248);
    while (__stxr(v252 + 1, v248));
    v253 = *(std::__shared_weak_count **)(v251 + 56);
    *(_QWORD *)(v251 + 48) = v249;
    *(_QWORD *)(v251 + 56) = v247;
    if (v253)
    {
      v254 = (unint64_t *)&v253->__shared_owners_;
      do
        v255 = __ldaxr(v254);
      while (__stlxr(v255 - 1, v254));
      if (!v255)
      {
        ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
        std::__shared_weak_count::__release_weak(v253);
      }
    }
    do
      v256 = __ldaxr(v248);
    while (__stlxr(v256 - 1, v248));
    if (!v256)
    {
      ((void (*)(std::__shared_weak_count *))v247->__on_zero_shared)(v247);
      std::__shared_weak_count::__release_weak(v247);
    }
    v257 = (uint64_t *)*((_QWORD *)v236 + 8);
    v257[1] = 0;
    v258 = *a3;
    *v257 = *a3;
    v259 = (_QWORD *)*((_QWORD *)v236 + 20);
    v260 = a3[1];
    if (v260)
    {
      v261 = (unint64_t *)(v260 + 8);
      do
        v262 = __ldxr(v261);
      while (__stxr(v262 + 1, v261));
    }
    v263 = (std::__shared_weak_count *)v259[1];
    *v259 = v258;
    v259[1] = v260;
    if (v263)
    {
      v264 = (unint64_t *)&v263->__shared_owners_;
      do
        v265 = __ldaxr(v264);
      while (__stlxr(v265 - 1, v264));
      if (!v265)
      {
        ((void (*)(std::__shared_weak_count *))v263->__on_zero_shared)(v263);
        std::__shared_weak_count::__release_weak(v263);
      }
    }
    v266 = *((_QWORD *)v236 + 8);
    *(_QWORD *)(v266 + 24) = 0;
    v267 = *a4;
    *(_QWORD *)(v266 + 16) = *a4;
    v268 = *((_QWORD *)v236 + 20);
    v269 = a4[1];
    if (v269)
    {
      v270 = (unint64_t *)(v269 + 8);
      do
        v271 = __ldxr(v270);
      while (__stxr(v271 + 1, v270));
    }
    v272 = *(std::__shared_weak_count **)(v268 + 24);
    *(_QWORD *)(v268 + 16) = v267;
    *(_QWORD *)(v268 + 24) = v269;
    if (v272)
    {
      v273 = (unint64_t *)&v272->__shared_owners_;
      do
        v274 = __ldaxr(v273);
      while (__stlxr(v274 - 1, v273));
      if (!v274)
      {
        ((void (*)(std::__shared_weak_count *))v272->__on_zero_shared)(v272);
        std::__shared_weak_count::__release_weak(v272);
      }
    }
    v275 = (ggl::RouteLineTraffic::BasePipelineSetup *)operator new();
    v276 = ggl::RouteLineTraffic::BasePipelineSetup::BasePipelineSetup(v275);
    v277 = *(uint64_t **)(v276 + 64);
    v277[1] = 0;
    v278 = *a3;
    *v277 = *a3;
    v279 = *(_QWORD **)(v276 + 160);
    v280 = a3[1];
    if (v280)
    {
      v281 = (unint64_t *)(v280 + 8);
      do
        v282 = __ldxr(v281);
      while (__stxr(v282 + 1, v281));
    }
    v283 = (std::__shared_weak_count *)v279[1];
    *v279 = v278;
    v279[1] = v280;
    if (v283)
    {
      v284 = (unint64_t *)&v283->__shared_owners_;
      do
        v285 = __ldaxr(v284);
      while (__stlxr(v285 - 1, v284));
      if (!v285)
      {
        ((void (*)(std::__shared_weak_count *))v283->__on_zero_shared)(v283);
        std::__shared_weak_count::__release_weak(v283);
      }
    }
    v286 = *((_QWORD *)v275 + 8);
    *(_QWORD *)(v286 + 24) = 0;
    v287 = *a4;
    *(_QWORD *)(v286 + 16) = *a4;
    v288 = *((_QWORD *)v275 + 20);
    v289 = a4[1];
    if (v289)
    {
      v290 = (unint64_t *)(v289 + 8);
      do
        v291 = __ldxr(v290);
      while (__stxr(v291 + 1, v290));
    }
    v292 = *(std::__shared_weak_count **)(v288 + 24);
    *(_QWORD *)(v288 + 16) = v287;
    *(_QWORD *)(v288 + 24) = v289;
    if (v292)
    {
      v293 = (unint64_t *)&v292->__shared_owners_;
      do
        v294 = __ldaxr(v293);
      while (__stlxr(v294 - 1, v293));
      if (!v294)
      {
        ((void (*)(std::__shared_weak_count *))v292->__on_zero_shared)(v292);
        std::__shared_weak_count::__release_weak(v292);
      }
    }
    v749 = v275;
    v295 = (std::__shared_weak_count *)operator new(0xE8uLL);
    v295->__shared_owners_ = 0;
    v296 = (unint64_t *)&v295->__shared_owners_;
    v295->__shared_weak_owners_ = 0;
    v295->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1A60;
    v297 = ggl::BufferData::BufferData((uint64_t)&v295[1], qword_1EE568708, 2, 1, 6, 1);
    v295[9].__shared_owners_ = (uint64_t)ggl::RouteLineTraffic::Style::reflection(void)::reflection;
    v295[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B92F0;
    v298 = *((_QWORD *)v749 + 8);
    *(_QWORD *)(v298 + 32) = v297;
    *(_QWORD *)(v298 + 40) = 0;
    v299 = *((_QWORD *)v749 + 20);
    do
      v300 = __ldxr(v296);
    while (__stxr(v300 + 1, v296));
    v301 = *(std::__shared_weak_count **)(v299 + 40);
    *(_QWORD *)(v299 + 32) = v297;
    *(_QWORD *)(v299 + 40) = v295;
    if (v301)
    {
      v302 = (unint64_t *)&v301->__shared_owners_;
      do
        v303 = __ldaxr(v302);
      while (__stlxr(v303 - 1, v302));
      if (!v303)
      {
        ((void (*)(std::__shared_weak_count *))v301->__on_zero_shared)(v301);
        std::__shared_weak_count::__release_weak(v301);
      }
    }
    do
      v304 = __ldaxr(v296);
    while (__stlxr(v304 - 1, v296));
    if (!v304)
    {
      ((void (*)(std::__shared_weak_count *))v295->__on_zero_shared)(v295);
      std::__shared_weak_count::__release_weak(v295);
    }
    v305 = (ggl::RouteLine::BasePipelineSetup *)operator new();
    ggl::RouteLine::BasePipelineSetup::BasePipelineSetup(v305);
    v306 = (std::__shared_weak_count *)operator new(0xE8uLL);
    v740 = (ggl::RouteLine::BasePipelineSetup **)(v75 + 2464);
    v306->__shared_owners_ = 0;
    v307 = (unint64_t *)&v306->__shared_owners_;
    v306->__shared_weak_owners_ = 0;
    v306->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2E48;
    v308 = ggl::BufferData::BufferData((uint64_t)&v306[1], qword_1EE572D18, 2, 1, 6, 1);
    v306[9].__shared_owners_ = (uint64_t)ggl::RouteLine::Style::reflection(void)::reflection;
    v306[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9FD0;
    v309 = *((_QWORD *)v305 + 8);
    *(_QWORD *)(v309 + 32) = v308;
    *(_QWORD *)(v309 + 40) = 0;
    v310 = *((_QWORD *)v305 + 20);
    do
      v311 = __ldxr(v307);
    while (__stxr(v311 + 1, v307));
    v312 = *(std::__shared_weak_count **)(v310 + 40);
    *(_QWORD *)(v310 + 32) = v308;
    *(_QWORD *)(v310 + 40) = v306;
    if (v312)
    {
      v313 = (unint64_t *)&v312->__shared_owners_;
      do
        v314 = __ldaxr(v313);
      while (__stlxr(v314 - 1, v313));
      if (!v314)
      {
        ((void (*)(std::__shared_weak_count *))v312->__on_zero_shared)(v312);
        std::__shared_weak_count::__release_weak(v312);
      }
    }
    do
      v315 = __ldaxr(v307);
    while (__stlxr(v315 - 1, v307));
    if (!v315)
    {
      ((void (*)(std::__shared_weak_count *))v306->__on_zero_shared)(v306);
      std::__shared_weak_count::__release_weak(v306);
    }
    v316 = (uint64_t *)*((_QWORD *)v305 + 8);
    v316[1] = 0;
    v317 = *a3;
    *v316 = *a3;
    v318 = (_QWORD *)*((_QWORD *)v305 + 20);
    v319 = a3[1];
    if (v319)
    {
      v320 = (unint64_t *)(v319 + 8);
      do
        v321 = __ldxr(v320);
      while (__stxr(v321 + 1, v320));
    }
    v322 = (std::__shared_weak_count *)v318[1];
    *v318 = v317;
    v318[1] = v319;
    if (v322)
    {
      v323 = (unint64_t *)&v322->__shared_owners_;
      do
        v324 = __ldaxr(v323);
      while (__stlxr(v324 - 1, v323));
      if (!v324)
      {
        ((void (*)(std::__shared_weak_count *))v322->__on_zero_shared)(v322);
        std::__shared_weak_count::__release_weak(v322);
      }
    }
    v325 = *((_QWORD *)v305 + 8);
    *(_QWORD *)(v325 + 24) = 0;
    v326 = *a4;
    *(_QWORD *)(v325 + 16) = *a4;
    v327 = *((_QWORD *)v305 + 20);
    v328 = a4[1];
    if (v328)
    {
      v329 = (unint64_t *)(v328 + 8);
      do
        v330 = __ldxr(v329);
      while (__stxr(v330 + 1, v329));
    }
    v331 = *(std::__shared_weak_count **)(v327 + 24);
    *(_QWORD *)(v327 + 16) = v326;
    *(_QWORD *)(v327 + 24) = v328;
    if (v331)
    {
      v332 = (unint64_t *)&v331->__shared_owners_;
      do
        v333 = __ldaxr(v332);
      while (__stlxr(v333 - 1, v332));
      if (!v333)
      {
        ((void (*)(std::__shared_weak_count *))v331->__on_zero_shared)(v331);
        std::__shared_weak_count::__release_weak(v331);
      }
    }
    v334 = (ggl::RouteLineTraffic::BasePipelineSetup *)operator new();
    v335 = ggl::RouteLineTraffic::BasePipelineSetup::BasePipelineSetup(v334);
    v336 = *(uint64_t **)(v335 + 64);
    v336[1] = 0;
    v337 = *a3;
    *v336 = *a3;
    v338 = *(_QWORD **)(v335 + 160);
    v339 = a3[1];
    if (v339)
    {
      v340 = (unint64_t *)(v339 + 8);
      do
        v341 = __ldxr(v340);
      while (__stxr(v341 + 1, v340));
    }
    v342 = (std::__shared_weak_count *)v338[1];
    *v338 = v337;
    v338[1] = v339;
    if (v342)
    {
      v343 = (unint64_t *)&v342->__shared_owners_;
      do
        v344 = __ldaxr(v343);
      while (__stlxr(v344 - 1, v343));
      if (!v344)
      {
        ((void (*)(std::__shared_weak_count *))v342->__on_zero_shared)(v342);
        std::__shared_weak_count::__release_weak(v342);
      }
    }
    v345 = *((_QWORD *)v334 + 8);
    *(_QWORD *)(v345 + 24) = 0;
    v346 = *a4;
    *(_QWORD *)(v345 + 16) = *a4;
    v347 = *((_QWORD *)v334 + 20);
    v348 = a4[1];
    if (v348)
    {
      v349 = (unint64_t *)(v348 + 8);
      do
        v350 = __ldxr(v349);
      while (__stxr(v350 + 1, v349));
    }
    v351 = *(std::__shared_weak_count **)(v347 + 24);
    *(_QWORD *)(v347 + 16) = v346;
    *(_QWORD *)(v347 + 24) = v348;
    if (v351)
    {
      v352 = (unint64_t *)&v351->__shared_owners_;
      do
        v353 = __ldaxr(v352);
      while (__stlxr(v353 - 1, v352));
      if (!v353)
      {
        ((void (*)(std::__shared_weak_count *))v351->__on_zero_shared)(v351);
        std::__shared_weak_count::__release_weak(v351);
      }
    }
    v354 = v236;
    v355 = (std::__shared_weak_count *)operator new(0xE8uLL);
    v356 = v197;
    v355->__shared_owners_ = 0;
    v357 = (unint64_t *)&v355->__shared_owners_;
    v355->__shared_weak_owners_ = 0;
    v355->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1A60;
    v358 = ggl::BufferData::BufferData((uint64_t)&v355[1], qword_1EE568708, 2, 1, 6, 1);
    v355[9].__shared_owners_ = (uint64_t)ggl::RouteLineTraffic::Style::reflection(void)::reflection;
    v355[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B92F0;
    v359 = *((_QWORD *)v334 + 8);
    *(_QWORD *)(v359 + 32) = v358;
    *(_QWORD *)(v359 + 40) = 0;
    v360 = *((_QWORD *)v334 + 20);
    do
      v361 = __ldxr(v357);
    while (__stxr(v361 + 1, v357));
    v362 = *(std::__shared_weak_count **)(v360 + 40);
    *(_QWORD *)(v360 + 32) = v358;
    *(_QWORD *)(v360 + 40) = v355;
    if (v362)
    {
      v363 = (unint64_t *)&v362->__shared_owners_;
      do
        v364 = __ldaxr(v363);
      while (__stlxr(v364 - 1, v363));
      if (!v364)
      {
        ((void (*)(std::__shared_weak_count *))v362->__on_zero_shared)(v362);
        std::__shared_weak_count::__release_weak(v362);
      }
    }
    do
      v365 = __ldaxr(v357);
    while (__stlxr(v365 - 1, v357));
    if (!v365)
    {
      ((void (*)(std::__shared_weak_count *))v355->__on_zero_shared)(v355);
      std::__shared_weak_count::__release_weak(v355);
    }
    v366 = *v740;
    *v740 = v81;
    if (v366)
      (*(void (**)(ggl::RouteLine::BasePipelineSetup *))(*(_QWORD *)v366 + 8))(v366);
    v367 = *(_QWORD *)(v75 + 2472);
    *(_QWORD *)(v75 + 2472) = v741;
    if (v367)
      (*(void (**)(uint64_t))(*(_QWORD *)v367 + 8))(v367);
    v368 = *(_QWORD *)(v75 + 2480);
    *(_QWORD *)(v75 + 2480) = v754;
    if (v368)
      (*(void (**)(uint64_t))(*(_QWORD *)v368 + 8))(v368);
    v369 = *(_QWORD *)(v75 + 2488);
    *(_QWORD *)(v75 + 2488) = v751;
    if (v369)
      (*(void (**)(uint64_t))(*(_QWORD *)v369 + 8))(v369);
    v370 = *(_QWORD *)(v75 + 2496);
    *(_QWORD *)(v75 + 2496) = v356;
    if (v370)
      (*(void (**)(uint64_t))(*(_QWORD *)v370 + 8))(v370);
    v371 = *(_QWORD *)(v75 + 2504);
    *(_QWORD *)(v75 + 2504) = v354;
    if (v371)
      (*(void (**)(uint64_t))(*(_QWORD *)v371 + 8))(v371);
    v372 = *(_QWORD *)(v75 + 2536);
    *(_QWORD *)(v75 + 2536) = v749;
    if (v372)
      (*(void (**)(uint64_t))(*(_QWORD *)v372 + 8))(v372);
    v373 = *(_QWORD *)(v75 + 2528);
    *(_QWORD *)(v75 + 2528) = v305;
    if (v373)
      (*(void (**)(uint64_t))(*(_QWORD *)v373 + 8))(v373);
    v374 = *(_QWORD *)(v75 + 2544);
    *(_QWORD *)(v75 + 2544) = v334;
    if (v374)
      (*(void (**)(uint64_t))(*(_QWORD *)v374 + 8))(v374);
    v375 = 0;
    v764 = v75 + 2560;
    v765 = (uint64_t *)(v75 + 2568);
    v766 = v75 + 2576;
    v376 = v743;
    do
    {
      v377 = (ggl::SinglePassRouteLine::BasePipelineSetup *)operator new();
      v378 = ggl::SinglePassRouteLine::BasePipelineSetup::BasePipelineSetup(v377);
      v379 = *(uint64_t **)(v378 + 64);
      v379[1] = 0;
      v380 = *a3;
      *v379 = *a3;
      v381 = *(_QWORD **)(v378 + 160);
      v382 = a3[1];
      if (v382)
      {
        v383 = (unint64_t *)(v382 + 8);
        do
          v384 = __ldxr(v383);
        while (__stxr(v384 + 1, v383));
      }
      v385 = (std::__shared_weak_count *)v381[1];
      *v381 = v380;
      v381[1] = v382;
      if (v385)
      {
        v386 = (unint64_t *)&v385->__shared_owners_;
        do
          v387 = __ldaxr(v386);
        while (__stlxr(v387 - 1, v386));
        if (!v387)
        {
          ((void (*)(std::__shared_weak_count *))v385->__on_zero_shared)(v385);
          std::__shared_weak_count::__release_weak(v385);
        }
      }
      v388 = (std::__shared_weak_count *)operator new(0xE8uLL);
      v388->__shared_owners_ = 0;
      v389 = (unint64_t *)&v388->__shared_owners_;
      v388->__shared_weak_owners_ = 0;
      v388->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1EC0;
      v390 = ggl::BufferData::BufferData((uint64_t)&v388[1], qword_1EE560190, 2, 1, 6, 1);
      v388[9].__shared_owners_ = (uint64_t)ggl::SinglePassRouteLine::Style::reflection(void)::reflection;
      v388[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9570;
      v391 = *((_QWORD *)v377 + 8);
      *(_QWORD *)(v391 + 32) = v390;
      *(_QWORD *)(v391 + 40) = 0;
      v392 = *((_QWORD *)v377 + 20);
      do
        v393 = __ldxr(v389);
      while (__stxr(v393 + 1, v389));
      v394 = *(std::__shared_weak_count **)(v392 + 40);
      *(_QWORD *)(v392 + 32) = v390;
      *(_QWORD *)(v392 + 40) = v388;
      if (v394)
      {
        v395 = (unint64_t *)&v394->__shared_owners_;
        do
          v396 = __ldaxr(v395);
        while (__stlxr(v396 - 1, v395));
        if (!v396)
        {
          ((void (*)(std::__shared_weak_count *))v394->__on_zero_shared)(v394);
          std::__shared_weak_count::__release_weak(v394);
        }
      }
      do
        v397 = __ldaxr(v389);
      while (__stlxr(v397 - 1, v389));
      if (!v397)
      {
        ((void (*)(std::__shared_weak_count *))v388->__on_zero_shared)(v388);
        std::__shared_weak_count::__release_weak(v388);
      }
      v398 = *((_QWORD *)v377 + 8);
      *(_QWORD *)(v398 + 24) = 0;
      v399 = *a4;
      *(_QWORD *)(v398 + 16) = *a4;
      v400 = *((_QWORD *)v377 + 20);
      v401 = a4[1];
      if (v401)
      {
        v402 = (unint64_t *)(v401 + 8);
        do
          v403 = __ldxr(v402);
        while (__stxr(v403 + 1, v402));
      }
      v404 = *(std::__shared_weak_count **)(v400 + 24);
      *(_QWORD *)(v400 + 16) = v399;
      *(_QWORD *)(v400 + 24) = v401;
      if (v404)
      {
        v405 = (unint64_t *)&v404->__shared_owners_;
        do
          v406 = __ldaxr(v405);
        while (__stlxr(v406 - 1, v405));
        if (!v406)
        {
          ((void (*)(std::__shared_weak_count *))v404->__on_zero_shared)(v404);
          std::__shared_weak_count::__release_weak(v404);
        }
      }
      v407 = (std::__shared_weak_count *)operator new(0xE8uLL);
      v407->__shared_owners_ = 0;
      v408 = (unint64_t *)&v407->__shared_owners_;
      v407->__shared_weak_owners_ = 0;
      v407->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1E88;
      v409 = ggl::BufferData::BufferData((uint64_t)&v407[1], qword_1EE5601F0, 2, 1, 6, 1);
      v407[9].__shared_owners_ = (uint64_t)ggl::SinglePassRouteLine::DrawAnimationDescription::reflection(void)::reflection;
      v407[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9550;
      v410 = *((_QWORD *)v377 + 8);
      *(_QWORD *)(v410 + 64) = v409;
      *(_QWORD *)(v410 + 72) = 0;
      v411 = *((_QWORD *)v377 + 20);
      do
        v412 = __ldxr(v408);
      while (__stxr(v412 + 1, v408));
      v413 = *(std::__shared_weak_count **)(v411 + 72);
      *(_QWORD *)(v411 + 64) = v409;
      *(_QWORD *)(v411 + 72) = v407;
      if (v413)
      {
        v414 = (unint64_t *)&v413->__shared_owners_;
        do
          v415 = __ldaxr(v414);
        while (__stlxr(v415 - 1, v414));
        if (!v415)
        {
          ((void (*)(std::__shared_weak_count *))v413->__on_zero_shared)(v413);
          std::__shared_weak_count::__release_weak(v413);
        }
      }
      do
        v416 = __ldaxr(v408);
      while (__stlxr(v416 - 1, v408));
      if (!v416)
      {
        ((void (*)(std::__shared_weak_count *))v407->__on_zero_shared)(v407);
        std::__shared_weak_count::__release_weak(v407);
      }
      v417 = (std::__shared_weak_count *)operator new(0xE8uLL);
      v417->__shared_owners_ = 0;
      v418 = (unint64_t *)&v417->__shared_owners_;
      v417->__shared_weak_owners_ = 0;
      v417->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1E50;
      v419 = ggl::BufferData::BufferData((uint64_t)&v417[1], qword_1EE560250, 2, 1, 6, 1);
      v417[9].__shared_owners_ = (uint64_t)ggl::SinglePassRouteLine::ClipParams::reflection(void)::reflection;
      v417[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9530;
      v420 = *((_QWORD *)v377 + 8);
      *(_QWORD *)(v420 + 48) = v419;
      *(_QWORD *)(v420 + 56) = 0;
      v421 = *((_QWORD *)v377 + 20);
      do
        v422 = __ldxr(v418);
      while (__stxr(v422 + 1, v418));
      v423 = *(std::__shared_weak_count **)(v421 + 56);
      *(_QWORD *)(v421 + 48) = v419;
      *(_QWORD *)(v421 + 56) = v417;
      if (v423)
      {
        v424 = (unint64_t *)&v423->__shared_owners_;
        do
          v425 = __ldaxr(v424);
        while (__stlxr(v425 - 1, v424));
        if (!v425)
        {
          ((void (*)(std::__shared_weak_count *))v423->__on_zero_shared)(v423);
          std::__shared_weak_count::__release_weak(v423);
        }
      }
      do
        v426 = __ldaxr(v418);
      while (__stlxr(v426 - 1, v418));
      if (!v426)
      {
        ((void (*)(std::__shared_weak_count *))v417->__on_zero_shared)(v417);
        std::__shared_weak_count::__release_weak(v417);
      }
      v427 = (ggl::SinglePassRouteLine::BasePipelineSetup **)*(&v764 + v375);
      v428 = *v427;
      *v427 = v377;
      if (v428)
        (*(void (**)(ggl::SinglePassRouteLine::BasePipelineSetup *))(*(_QWORD *)v428 + 8))(v428);
      ++v375;
    }
    while (v375 != 3);
    if (*(_BYTE *)(v75 + 2609))
    {
      v429 = (_QWORD *)operator new();
      if ((v430 & 1) == 0
      {
        if ((v736 & 1) == 0
        {
          if ((v739 & 1) == 0
          {
            ggl::MeshTyped<ggl::RouteLine::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::RouteLine::defaultVboReflection;
          }
          ggl::MeshTyped<ggl::RouteLine::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::RouteLine::DefaultVbo>::attributesReflection(void)::r;
          unk_1ECE43E18 = 1;
        }
        ggl::RouteLineAlphaReset::BasePipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::RouteLine::DefaultVbo>::typedReflection(void)::r;
        *(_QWORD *)algn_1ECE3A008 = &ggl::RouteLineAlphaReset::pipelineDataBasePipelineDeviceStructs(void)::ref;
        qword_1ECE3A010 = 0;
        if ((v737 & 1) == 0
        {
          ggl::RouteLineAlphaReset::pipelineDataBasePipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
          unk_1ECE3A040 = ggl::Tile::Transform::reflection(void)::reflection;
          qword_1ECE3A048 = (uint64_t)ggl::Ribbon::Style::reflection(void)::reflection;
          unk_1ECE3A050 = ggl::RouteLineAlphaReset::FadeParams::reflection(void)::reflection;
        }
        qword_1ECE3A018 = (uint64_t)&ggl::RouteLineAlphaReset::pipelineDataBasePipelineConstantStructs(void)::ref;
        unk_1ECE3A020 = xmmword_19FFB3690;
        v376 = v743;
      }
      ggl::PipelineSetup::PipelineSetup((uint64_t)v429, (uint64_t)&ggl::RouteLineAlphaReset::BasePipelineSetup::typedReflection(void)::ref);
      *v429 = &off_1E42BA998;
      v431 = (std::__shared_weak_count *)operator new(0xE8uLL);
      v431->__shared_owners_ = 0;
      v432 = (unint64_t *)&v431->__shared_owners_;
      v431->__shared_weak_owners_ = 0;
      v431->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2710;
      v433 = ggl::BufferData::BufferData((uint64_t)&v431[1], qword_1EE567210, 2, 1, 6, 1);
      v431[9].__shared_owners_ = (uint64_t)ggl::Ribbon::Style::reflection(void)::reflection;
      v431[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9A50;
      v434 = v429[8];
      *(_QWORD *)(v434 + 32) = v433;
      *(_QWORD *)(v434 + 40) = 0;
      v435 = v429[20];
      do
        v436 = __ldxr(v432);
      while (__stxr(v436 + 1, v432));
      v437 = *(std::__shared_weak_count **)(v435 + 40);
      *(_QWORD *)(v435 + 32) = v433;
      *(_QWORD *)(v435 + 40) = v431;
      if (v437)
      {
        v438 = (unint64_t *)&v437->__shared_owners_;
        do
          v439 = __ldaxr(v438);
        while (__stlxr(v439 - 1, v438));
        if (!v439)
        {
          ((void (*)(std::__shared_weak_count *))v437->__on_zero_shared)(v437);
          std::__shared_weak_count::__release_weak(v437);
        }
      }
      do
        v440 = __ldaxr(v432);
      while (__stlxr(v440 - 1, v432));
      if (!v440)
      {
        ((void (*)(std::__shared_weak_count *))v431->__on_zero_shared)(v431);
        std::__shared_weak_count::__release_weak(v431);
      }
      v441 = (uint64_t *)v429[8];
      v441[1] = 0;
      v442 = *a3;
      *v441 = *a3;
      v443 = (_QWORD *)v429[20];
      v444 = a3[1];
      if (v444)
      {
        v445 = (unint64_t *)(v444 + 8);
        do
          v446 = __ldxr(v445);
        while (__stxr(v446 + 1, v445));
      }
      v447 = (std::__shared_weak_count *)v443[1];
      *v443 = v442;
      v443[1] = v444;
      if (v447)
      {
        v448 = (unint64_t *)&v447->__shared_owners_;
        do
          v449 = __ldaxr(v448);
        while (__stlxr(v449 - 1, v448));
        if (!v449)
        {
          ((void (*)(std::__shared_weak_count *))v447->__on_zero_shared)(v447);
          std::__shared_weak_count::__release_weak(v447);
        }
      }
      v450 = v429[8];
      *(_QWORD *)(v450 + 24) = 0;
      v451 = *a4;
      *(_QWORD *)(v450 + 16) = *a4;
      v452 = v429[20];
      v453 = a4[1];
      if (v453)
      {
        v454 = (unint64_t *)(v453 + 8);
        do
          v455 = __ldxr(v454);
        while (__stxr(v455 + 1, v454));
      }
      v456 = *(std::__shared_weak_count **)(v452 + 24);
      *(_QWORD *)(v452 + 16) = v451;
      *(_QWORD *)(v452 + 24) = v453;
      if (v456)
      {
        v457 = (unint64_t *)&v456->__shared_owners_;
        do
          v458 = __ldaxr(v457);
        while (__stlxr(v458 - 1, v457));
        if (!v458)
        {
          ((void (*)(std::__shared_weak_count *))v456->__on_zero_shared)(v456);
          std::__shared_weak_count::__release_weak(v456);
        }
      }
      v459 = (std::__shared_weak_count *)operator new(0xE8uLL);
      v459->__shared_owners_ = 0;
      v460 = (unint64_t *)&v459->__shared_owners_;
      v459->__shared_weak_owners_ = 0;
      v459->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1E18;
      v461 = ggl::BufferData::BufferData((uint64_t)&v459[1], qword_1EE553070, 2, 1, 6, 1);
      v459[9].__shared_owners_ = (uint64_t)ggl::RouteLineAlphaReset::FadeParams::reflection(void)::reflection;
      v459[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9510;
      v462 = v429[8];
      *(_QWORD *)(v462 + 48) = v461;
      *(_QWORD *)(v462 + 56) = 0;
      v463 = v429[20];
      do
        v464 = __ldxr(v460);
      while (__stxr(v464 + 1, v460));
      v465 = *(std::__shared_weak_count **)(v463 + 56);
      *(_QWORD *)(v463 + 48) = v461;
      *(_QWORD *)(v463 + 56) = v459;
      if (v465)
      {
        v466 = (unint64_t *)&v465->__shared_owners_;
        do
          v467 = __ldaxr(v466);
        while (__stlxr(v467 - 1, v466));
        if (!v467)
        {
          ((void (*)(std::__shared_weak_count *))v465->__on_zero_shared)(v465);
          std::__shared_weak_count::__release_weak(v465);
        }
      }
      do
        v468 = __ldaxr(v460);
      while (__stlxr(v468 - 1, v460));
      if (!v468)
      {
        ((void (*)(std::__shared_weak_count *))v459->__on_zero_shared)(v459);
        std::__shared_weak_count::__release_weak(v459);
      }
      v469 = *(_QWORD *)(v75 + 2512);
      *(_QWORD *)(v75 + 2512) = v429;
      if (v469)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v469 + 8))(v469);
        v429 = *(_QWORD **)(v75 + 2512);
      }
      *(_QWORD *)(v75 + 1328) = v429;
    }
    else
    {
      v470 = (ggl::RouteLine::BasePipelineSetup *)operator new();
      ggl::RouteLine::BasePipelineSetup::BasePipelineSetup(v470);
      v471 = (std::__shared_weak_count *)operator new(0xE8uLL);
      v471->__shared_owners_ = 0;
      v472 = (unint64_t *)&v471->__shared_owners_;
      v471->__shared_weak_owners_ = 0;
      v471->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2E48;
      v473 = ggl::BufferData::BufferData((uint64_t)&v471[1], qword_1EE572D18, 2, 1, 6, 1);
      v471[9].__shared_owners_ = (uint64_t)ggl::RouteLine::Style::reflection(void)::reflection;
      v471[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9FD0;
      v474 = *((_QWORD *)v470 + 8);
      *(_QWORD *)(v474 + 32) = v473;
      *(_QWORD *)(v474 + 40) = 0;
      v475 = *((_QWORD *)v470 + 20);
      do
        v476 = __ldxr(v472);
      while (__stxr(v476 + 1, v472));
      v477 = *(std::__shared_weak_count **)(v475 + 40);
      *(_QWORD *)(v475 + 32) = v473;
      *(_QWORD *)(v475 + 40) = v471;
      if (v477)
      {
        v478 = (unint64_t *)&v477->__shared_owners_;
        do
          v479 = __ldaxr(v478);
        while (__stlxr(v479 - 1, v478));
        if (!v479)
        {
          ((void (*)(std::__shared_weak_count *))v477->__on_zero_shared)(v477);
          std::__shared_weak_count::__release_weak(v477);
        }
      }
      do
        v480 = __ldaxr(v472);
      while (__stlxr(v480 - 1, v472));
      if (!v480)
      {
        ((void (*)(std::__shared_weak_count *))v471->__on_zero_shared)(v471);
        std::__shared_weak_count::__release_weak(v471);
      }
      v481 = (uint64_t *)*((_QWORD *)v470 + 8);
      v481[1] = 0;
      v482 = *a3;
      *v481 = *a3;
      v483 = (_QWORD *)*((_QWORD *)v470 + 20);
      v484 = a3[1];
      if (v484)
      {
        v485 = (unint64_t *)(v484 + 8);
        do
          v486 = __ldxr(v485);
        while (__stxr(v486 + 1, v485));
      }
      v487 = (std::__shared_weak_count *)v483[1];
      *v483 = v482;
      v483[1] = v484;
      if (v487)
      {
        v488 = (unint64_t *)&v487->__shared_owners_;
        do
          v489 = __ldaxr(v488);
        while (__stlxr(v489 - 1, v488));
        if (!v489)
        {
          ((void (*)(std::__shared_weak_count *))v487->__on_zero_shared)(v487);
          std::__shared_weak_count::__release_weak(v487);
        }
      }
      v490 = *((_QWORD *)v470 + 8);
      *(_QWORD *)(v490 + 24) = 0;
      v491 = *a4;
      *(_QWORD *)(v490 + 16) = *a4;
      v492 = *((_QWORD *)v470 + 20);
      v493 = a4[1];
      if (v493)
      {
        v494 = (unint64_t *)(v493 + 8);
        do
          v495 = __ldxr(v494);
        while (__stxr(v495 + 1, v494));
      }
      v496 = *(std::__shared_weak_count **)(v492 + 24);
      *(_QWORD *)(v492 + 16) = v491;
      *(_QWORD *)(v492 + 24) = v493;
      if (v496)
      {
        v497 = (unint64_t *)&v496->__shared_owners_;
        do
          v498 = __ldaxr(v497);
        while (__stlxr(v498 - 1, v497));
        if (!v498)
        {
          ((void (*)(std::__shared_weak_count *))v496->__on_zero_shared)(v496);
          std::__shared_weak_count::__release_weak(v496);
        }
      }
      v499 = *(_QWORD *)(v75 + 2520);
      *(_QWORD *)(v75 + 2520) = v470;
      if (v499)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v499 + 8))(v499);
        v470 = *(ggl::RouteLine::BasePipelineSetup **)(v75 + 2520);
      }
      *(_QWORD *)(v75 + 1456) = v470;
      *(_QWORD *)(v75 + 1584) = v470;
    }
    v500 = (_QWORD *)operator new();
    if ((v501 & 1) == 0
    {
      if ((v734 & 1) == 0
      {
        if ((v738 & 1) == 0
        {
          ggl::MeshTyped<ggl::RouteLine::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::RouteLine::defaultVboReflection;
        }
        ggl::MeshTyped<ggl::RouteLine::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::RouteLine::DefaultVbo>::attributesReflection(void)::r;
        unk_1ECE43E18 = 1;
      }
      ggl::RouteLine::RouteLineMaskPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::RouteLine::DefaultVbo>::typedReflection(void)::r;
      *(_QWORD *)algn_1ECE444A8 = &ggl::RouteLine::pipelineDataRouteLineMaskPipelineDeviceStructs(void)::ref;
      qword_1ECE444B0 = 0;
      if ((v735 & 1) == 0
      {
        ggl::RouteLine::pipelineDataRouteLineMaskPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
        *(_QWORD *)algn_1ECE444D8 = ggl::Tile::Transform::reflection(void)::reflection;
        qword_1ECE444E0 = (uint64_t)ggl::RouteLine::Style::reflection(void)::reflection;
      }
      qword_1ECE444B8 = (uint64_t)&ggl::RouteLine::pipelineDataRouteLineMaskPipelineConstantStructs(void)::ref;
      unk_1ECE444C0 = xmmword_19FFB3410;
      v376 = v743;
    }
    ggl::PipelineSetup::PipelineSetup((uint64_t)v500, (uint64_t)&ggl::RouteLine::RouteLineMaskPipelineSetup::typedReflection(void)::ref);
    *v500 = &off_1E42BE358;
    v502 = *(_QWORD *)(v75 + 2552);
    *(_QWORD *)(v75 + 2552) = v500;
    if (v502)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v502 + 8))(v502);
      v500 = *(_QWORD **)(v75 + 2552);
    }
    v503 = (std::__shared_weak_count *)operator new(0xE8uLL);
    v503->__shared_owners_ = 0;
    v504 = (unint64_t *)&v503->__shared_owners_;
    v503->__shared_weak_owners_ = 0;
    v503->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2E48;
    v505 = ggl::BufferData::BufferData((uint64_t)&v503[1], qword_1EE572D18, 2, 1, 6, 1);
    v503[9].__shared_owners_ = (uint64_t)ggl::RouteLine::Style::reflection(void)::reflection;
    v503[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9FD0;
    v506 = v500[8];
    *(_QWORD *)(v506 + 32) = v505;
    *(_QWORD *)(v506 + 40) = 0;
    v507 = v500[20];
    do
      v508 = __ldxr(v504);
    while (__stxr(v508 + 1, v504));
    v509 = *(std::__shared_weak_count **)(v507 + 40);
    *(_QWORD *)(v507 + 32) = v505;
    *(_QWORD *)(v507 + 40) = v503;
    if (v509)
    {
      v510 = (unint64_t *)&v509->__shared_owners_;
      do
        v511 = __ldaxr(v510);
      while (__stlxr(v511 - 1, v510));
      if (!v511)
      {
        ((void (*)(std::__shared_weak_count *))v509->__on_zero_shared)(v509);
        std::__shared_weak_count::__release_weak(v509);
      }
    }
    do
      v512 = __ldaxr(v504);
    while (__stlxr(v512 - 1, v504));
    if (!v512)
    {
      ((void (*)(std::__shared_weak_count *))v503->__on_zero_shared)(v503);
      std::__shared_weak_count::__release_weak(v503);
    }
    v513 = *(_QWORD *)(v75 + 2552);
    v514 = *(uint64_t **)(v513 + 64);
    v514[1] = 0;
    v515 = *a3;
    *v514 = *a3;
    v516 = *(_QWORD **)(v513 + 160);
    v517 = a3[1];
    if (v517)
    {
      v518 = (unint64_t *)(v517 + 8);
      do
        v519 = __ldxr(v518);
      while (__stxr(v519 + 1, v518));
    }
    v520 = (std::__shared_weak_count *)v516[1];
    *v516 = v515;
    v516[1] = v517;
    if (v520)
    {
      v521 = (unint64_t *)&v520->__shared_owners_;
      do
        v522 = __ldaxr(v521);
      while (__stlxr(v522 - 1, v521));
      if (!v522)
      {
        ((void (*)(std::__shared_weak_count *))v520->__on_zero_shared)(v520);
        std::__shared_weak_count::__release_weak(v520);
      }
    }
    v523 = *(_QWORD *)(v75 + 2552);
    v524 = *(_QWORD *)(v523 + 64);
    *(_QWORD *)(v524 + 24) = 0;
    v525 = *a4;
    *(_QWORD *)(v524 + 16) = *a4;
    v526 = *(_QWORD *)(v523 + 160);
    v527 = a4[1];
    if (v527)
    {
      v528 = (unint64_t *)(v527 + 8);
      do
        v529 = __ldxr(v528);
      while (__stxr(v529 + 1, v528));
    }
    v530 = *(std::__shared_weak_count **)(v526 + 24);
    *(_QWORD *)(v526 + 16) = v525;
    *(_QWORD *)(v526 + 24) = v527;
    if (v530)
    {
      v531 = (unint64_t *)&v530->__shared_owners_;
      do
        v532 = __ldaxr(v531);
      while (__stlxr(v532 - 1, v531));
      if (!v532)
      {
        ((void (*)(std::__shared_weak_count *))v530->__on_zero_shared)(v530);
        std::__shared_weak_count::__release_weak(v530);
      }
    }
    *(_QWORD *)(v75 + 1200) = *(_QWORD *)(v75 + 2552);
    *(_QWORD *)(v75 + 1968) = *(_QWORD *)(v75 + 2536);
    *(_QWORD *)(v75 + 2096) = *(_QWORD *)(v75 + 2544);
    v534 = (uint64_t *)v376[1];
    v533 = v376[2];
    if ((unint64_t)v534 >= v533)
    {
      v536 = (uint64_t *)*v376;
      v537 = (uint64_t)v534 - *v376;
      v538 = v537 >> 3;
      v539 = (v537 >> 3) + 1;
      if (v539 >> 61)
        abort();
      v540 = v533 - (_QWORD)v536;
      if (v540 >> 2 > v539)
        v539 = v540 >> 2;
      if ((unint64_t)v540 >= 0x7FFFFFFFFFFFFFF8)
        v541 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v541 = v539;
      if (v541)
      {
        if (v541 >> 61)
LABEL_858:
          std::__throw_bad_array_new_length[abi:nn180100]();
        v542 = operator new(8 * v541);
      }
      else
      {
        v542 = 0;
      }
      v543 = (uint64_t *)&v542[8 * v538];
      *v543 = v75;
      v535 = v543 + 1;
      if (v534 == v536)
      {
        v536 = v534;
      }
      else
      {
        v544 = (char *)(v534 - 1) - (char *)v536;
        if (v544 < 0x58)
          goto LABEL_865;
        if ((unint64_t)((char *)v534 - &v542[v537]) < 0x20)
          goto LABEL_865;
        v545 = (v544 >> 3) + 1;
        v546 = &v542[8 * v538 - 16];
        v547 = v534 - 2;
        v548 = v545 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v549 = *(_OWORD *)v547;
          *(v546 - 1) = *((_OWORD *)v547 - 1);
          *v546 = v549;
          v546 -= 2;
          v547 -= 4;
          v548 -= 4;
        }
        while (v548);
        v543 -= v545 & 0x3FFFFFFFFFFFFFFCLL;
        v534 -= v545 & 0x3FFFFFFFFFFFFFFCLL;
        if (v545 != (v545 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_865:
          do
          {
            v550 = *--v534;
            *--v543 = v550;
          }
          while (v534 != v536);
          v536 = (uint64_t *)*v376;
        }
      }
      *v376 = (uint64_t)v543;
      v376[1] = (uint64_t)v535;
      v376[2] = (uint64_t)&v542[8 * v541];
      if (v536)
        operator delete(v536);
    }
    else
    {
      *v534 = v75;
      v535 = v534 + 1;
    }
    v376[1] = (uint64_t)v535;
    v750 = v760;
    if (v760)
    {
      v551 = 0;
      v552 = 0;
      v553 = 0;
      while (1)
      {
        v554 = operator new();
        *(_QWORD *)(v554 + 96) = 0;
        *(_OWORD *)(v554 + 64) = 0u;
        *(_OWORD *)(v554 + 80) = 0u;
        *(_OWORD *)(v554 + 32) = 0u;
        *(_OWORD *)(v554 + 48) = 0u;
        *(_OWORD *)v554 = 0u;
        *(_OWORD *)(v554 + 16) = 0u;
        *(_BYTE *)(v554 + 48) = 1;
        *(_QWORD *)(v554 + 56) = 0;
        *(_QWORD *)(v554 + 64) = 0;
        *(_QWORD *)(v554 + 72) = 0;
        {
          v678 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v678, "VectorKitLabels", 0x5ED09DD50000000FLL);
        }
        *(_QWORD *)(v554 + 80) = mdm::Allocator::instance(void)::alloc;
        *(_DWORD *)(v554 + 96) = 0;
        v764 = v554;
        if (v553 < (uint64_t *)v552)
        {
          v764 = 0;
          *v553 = v554;
          v556 = v553 + 1;
          v557 = v764;
          if (!v764)
            goto LABEL_640;
LABEL_628:
          v589 = *(_QWORD **)(v557 + 56);
          if (v589)
          {
            v590 = *(_QWORD **)(v557 + 64);
            v591 = *(_QWORD *)(v557 + 56);
            if (v590 != v589)
            {
              do
              {
                v593 = (void (***)(_QWORD, uint64_t))*--v590;
                v592 = v593;
                *v590 = 0;
                if (v593)
                {
                  (**v592)(v592, v591);
                  if ((v594 & 1) == 0
                  {
                    v595 = operator new();
                    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v595, "VectorKitLabels", 0x5ED09DD50000000FLL);
                  }
                  (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v592, 128);
                }
              }
              while (v590 != v589);
              v591 = *(_QWORD *)(v557 + 56);
            }
            *(_QWORD *)(v557 + 64) = v589;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v557 + 80) + 40))(*(_QWORD *)(v557 + 80), v591, *(_QWORD *)(v557 + 72) - v591);
          }
          MEMORY[0x1A1AF4E00](v557, 0x1020C4010FC18DELL);
          goto LABEL_640;
        }
        v558 = v552;
        v559 = (char *)v553 - (char *)v551;
        v560 = v553 - v551;
        v561 = v560 + 1;
        if ((unint64_t)(v560 + 1) >> 61)
          abort();
        v562 = v558 - (char *)v551;
        v563 = (v558 - (char *)v551) >> 2;
        if (v563 > v561)
          v561 = v563;
        v564 = v562 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v561;
        if (v564)
        {
          if (v564 >> 61)
            goto LABEL_858;
          v565 = (char *)operator new(8 * v564);
        }
        else
        {
          v565 = 0;
        }
        v566 = (uint64_t *)&v565[8 * v560];
        v764 = 0;
        *v566 = v554;
        v556 = v566 + 1;
        v567 = (char *)v553 - (char *)v551;
        if (v553 != v551)
          break;
LABEL_625:
        v552 = &v565[8 * v564];
        if (v551)
          operator delete(v551);
        v551 = v566;
        v557 = v764;
        if (v764)
          goto LABEL_628;
LABEL_640:
        *(_DWORD *)(*(v556 - 1) + 96) = *(_DWORD *)(v750 + 16);
        v596 = *(_QWORD *)(v750 + 24);
        v755 = *(_QWORD *)(v750 + 32);
        if (v596 != v755)
        {
          v597 = 0;
          v553 = v556;
          while (1)
          {
            v598 = *(void (****)(_QWORD))v596;
            v599 = *(_QWORD *)(*(_QWORD *)v596 + 88);
            if ((unint64_t)(v599 + v597) <= 0x5999)
            {
              v603 = *(v553 - 1);
              goto LABEL_705;
            }
            v600 = operator new();
            *(_QWORD *)(v600 + 96) = 0;
            *(_OWORD *)(v600 + 64) = 0u;
            *(_OWORD *)(v600 + 80) = 0u;
            *(_OWORD *)(v600 + 32) = 0u;
            *(_OWORD *)(v600 + 48) = 0u;
            *(_OWORD *)v600 = 0u;
            *(_OWORD *)(v600 + 16) = 0u;
            *(_BYTE *)(v600 + 48) = 1;
            *(_QWORD *)(v600 + 56) = 0;
            *(_QWORD *)(v600 + 64) = 0;
            *(_QWORD *)(v600 + 72) = 0;
            {
              v677 = operator new();
              mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v677, "VectorKitLabels", 0x5ED09DD50000000FLL);
            }
            *(_QWORD *)(v600 + 80) = mdm::Allocator::instance(void)::alloc;
            *(_DWORD *)(v600 + 96) = 0;
            v764 = v600;
            if (v553 >= (uint64_t *)v552)
              break;
            v764 = 0;
            *v553++ = v600;
            v602 = v764;
            if (v764)
              goto LABEL_692;
LABEL_704:
            v597 = 0;
            v603 = *(v553 - 1);
            *(_DWORD *)(v603 + 96) = *(_DWORD *)(v750 + 16);
            v598 = *(void (****)(_QWORD))v596;
            v599 = *(_QWORD *)(*(_QWORD *)v596 + 88);
LABEL_705:
            *(_QWORD *)v596 = 0;
            v645 = *(_QWORD **)(v603 + 64);
            v646 = *(_QWORD *)(v603 + 72);
            if ((unint64_t)v645 < v646)
            {
              if (v645)
              {
                *v645 = v598;
                v598 = 0;
              }
              v647 = v645 + 1;
              goto LABEL_742;
            }
            v648 = *(_QWORD *)(v603 + 56);
            v649 = ((uint64_t)v645 - v648) >> 3;
            v650 = v649 + 1;
            if ((unint64_t)(v649 + 1) >> 61)
              abort();
            v651 = v646 - v648;
            if (v651 >> 2 > v650)
              v650 = v651 >> 2;
            if ((unint64_t)v651 >= 0x7FFFFFFFFFFFFFF8)
              v652 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v652 = v650;
            if (v652)
            {
              v653 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v603 + 80) + 16))(*(_QWORD *)(v603 + 80), 8 * v652, 8);
              v654 = (_QWORD *)(v653 + 8 * v649);
              v655 = v653 + 8 * v652;
              if (v653)
              {
                *v654 = v598;
                v598 = 0;
              }
            }
            else
            {
              v655 = 0;
              v654 = (_QWORD *)(8 * v649);
            }
            v647 = v654 + 1;
            v656 = *(_QWORD **)(v603 + 56);
            v657 = *(_QWORD *)(v603 + 64);
            if ((_QWORD *)v657 == v656)
            {
              *(_QWORD *)(v603 + 56) = v654;
              *(_QWORD *)(v603 + 64) = v647;
              v753 = *(_QWORD *)(v603 + 72);
              *(_QWORD *)(v603 + 72) = v655;
              if (!v657)
                goto LABEL_742;
              goto LABEL_741;
            }
            v658 = v657 - (_QWORD)v656 - 8;
            v748 = v551;
            if (v658 <= 0x47
              || ((v659 = v658 >> 3, v657 - 8 * v659 - 8 < (unint64_t)v654)
                ? (v660 = (unint64_t)&v654[-v659 - 1] >= v657)
                : (v660 = 1),
                  !v660))
            {
              v663 = *(_QWORD **)(v603 + 64);
              do
              {
LABEL_731:
                v669 = *--v663;
                *v663 = 0;
                *--v654 = v669;
              }
              while (v663 != v656);
              goto LABEL_732;
            }
            v661 = v659 + 1;
            v662 = (v659 + 1) & 0x3FFFFFFFFFFFFFFCLL;
            v663 = (_QWORD *)(v657 - 8 * v662);
            v664 = v654 - 2;
            v665 = (__int128 *)(v657 - 32);
            v666 = v662;
            do
            {
              v668 = *v665;
              v667 = v665[1];
              *v665 = 0uLL;
              v665[1] = 0uLL;
              v665 -= 2;
              *(v664 - 1) = v668;
              *v664 = v667;
              v664 -= 2;
              v666 -= 4;
            }
            while (v666);
            v654 -= v662;
            if (v661 != v662)
              goto LABEL_731;
LABEL_732:
            v657 = *(_QWORD *)(v603 + 56);
            v670 = *(_QWORD **)(v603 + 64);
            *(_QWORD *)(v603 + 56) = v654;
            *(_QWORD *)(v603 + 64) = v647;
            v753 = *(_QWORD *)(v603 + 72);
            *(_QWORD *)(v603 + 72) = v655;
            if (v670 == (_QWORD *)v657)
            {
              v551 = v748;
              if (!v657)
                goto LABEL_742;
            }
            else
            {
              v746 = v552;
              do
              {
                v672 = (void (***)(_QWORD))*--v670;
                v671 = v672;
                *v670 = 0;
                if (v672)
                {
                  (**v671)(v671);
                  if ((v673 & 1) == 0
                  {
                    v674 = operator new();
                    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v674, "VectorKitLabels", 0x5ED09DD50000000FLL);
                  }
                  (*(void (**)(uint64_t, void (***)(_QWORD), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                          + 40))(mdm::Allocator::instance(void)::alloc, v671, 128);
                }
              }
              while (v670 != (_QWORD *)v657);
              v552 = v746;
              v551 = v748;
              if (!v657)
                goto LABEL_742;
            }
LABEL_741:
            (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v603 + 80) + 40))(*(_QWORD *)(v603 + 80), v657, v753 - v657);
LABEL_742:
            *(_QWORD *)(v603 + 64) = v647;
            if (v598)
            {
              (**v598)(v598);
              {
                v676 = operator new();
                mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v676, "VectorKitLabels", 0x5ED09DD50000000FLL);
              }
              (*(void (**)(uint64_t, void (***)(_QWORD), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                      + 40))(mdm::Allocator::instance(void)::alloc, v598, 128);
            }
            v597 += v599;
            v596 += 8;
            if (v596 == v755)
              goto LABEL_583;
          }
          v604 = v552;
          v605 = (char *)v553 - (char *)v551;
          v606 = v553 - v551;
          v607 = v606 + 1;
          if ((unint64_t)(v606 + 1) >> 61)
            abort();
          v608 = v604 - (char *)v551;
          v609 = (v604 - (char *)v551) >> 2;
          if (v609 > v607)
            v607 = v609;
          if (v608 >= 0x7FFFFFFFFFFFFFF8)
            v610 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v610 = v607;
          if (v610)
          {
            if (v610 >> 61)
              goto LABEL_858;
            v611 = (char *)operator new(8 * v610);
          }
          else
          {
            v611 = 0;
          }
          v612 = (uint64_t *)&v611[8 * v606];
          v764 = 0;
          *v612 = v600;
          v752 = v612 + 1;
          v613 = (char *)v553 - (char *)v551;
          if (v553 != v551)
          {
            v614 = v613 - 8;
            if ((unint64_t)(v613 - 8) < 0x138)
            {
              v615 = v553;
              goto LABEL_663;
            }
            v617 = v614 & 0xFFFFFFFFFFFFFFF8;
            if ((uint64_t *)((char *)v553 - (v614 & 0xFFFFFFFFFFFFFFF8) - 8) > v553 - 1)
            {
              v615 = v553;
              goto LABEL_663;
            }
            if (&v611[v605 - 8 - v617] > &v611[v605 - 8])
            {
              v615 = v553;
              goto LABEL_663;
            }
            v618 = v614 >> 3;
            if (&v553[-v618 - 1] < v612)
            {
              v619 = (unint64_t)&v611[v605 - v617 - 8];
              v615 = v553;
              if (v619 < (unint64_t)v553)
                goto LABEL_866;
            }
            v620 = v618 + 1;
            v615 = &v553[-(v620 & 0x3FFFFFFFFFFFFFFCLL)];
            v621 = &v611[8 * v606 - 16];
            v622 = v553 - 4;
            v623 = v620 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v625 = *(_OWORD *)v622;
              v624 = *((_OWORD *)v622 + 1);
              *(_OWORD *)v622 = 0uLL;
              *((_OWORD *)v622 + 1) = 0uLL;
              v622 -= 4;
              *((_OWORD *)v621 - 1) = v625;
              *(_OWORD *)v621 = v624;
              v621 -= 32;
              v623 -= 4;
            }
            while (v623);
            v612 -= v620 & 0x3FFFFFFFFFFFFFFCLL;
            if (v620 != (v620 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_866:
              do
              {
LABEL_663:
                v616 = *--v615;
                *v615 = 0;
                *--v612 = v616;
              }
              while (v615 != v551);
            }
            do
            {
              v628 = *--v553;
              v627 = v628;
              *v553 = 0;
              if (v628)
              {
                v629 = *(_QWORD **)(v627 + 56);
                if (v629)
                {
                  v630 = *(_QWORD **)(v627 + 64);
                  v626 = *(_QWORD *)(v627 + 56);
                  if (v630 != v629)
                  {
                    do
                    {
                      v633 = (void (***)(_QWORD, uint64_t))*--v630;
                      v632 = v633;
                      *v630 = 0;
                      if (v633)
                      {
                        (**v632)(v632, v626);
                        if ((v634 & 1) == 0
                        {
                          v635 = operator new();
                          *(_QWORD *)(v635 + 16) = 0x5ED09DD50000000FLL;
                          *(_QWORD *)(v635 + 24) = "VectorKitLabels";
                          *(_OWORD *)(v635 + 32) = xmmword_19FFB2E80;
                          *(_QWORD *)v635 = &off_1E42B5668;
                          *(_QWORD *)(v635 + 8) = "VectorKitLabels";
                          *(_OWORD *)(v635 + 72) = 0u;
                          *(_OWORD *)(v635 + 88) = 0u;
                          *(_OWORD *)(v635 + 104) = 0u;
                          *(_OWORD *)(v635 + 120) = 0u;
                          *(_OWORD *)(v635 + 136) = 0u;
                          *(_OWORD *)(v635 + 152) = 0u;
                          *(_OWORD *)(v635 + 168) = 0u;
                          *(_OWORD *)(v635 + 184) = 0u;
                          *(_OWORD *)(v635 + 200) = 0u;
                          *(_OWORD *)(v635 + 216) = 0u;
                          *(_OWORD *)(v635 + 232) = 0u;
                          *(_QWORD *)(v635 + 248) = 0;
                          v747 = v635;
                          *(_OWORD *)(v635 + 56) = 0u;
                          v636 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v635 + 56), 0);
                          if ((_DWORD)v636)
                            geo::read_write_lock::logFailure(v636, (uint64_t)"initialization", v637);
                          zone = malloc_create_zone(0, 0);
                          *(_QWORD *)(v747 + 48) = zone;
                          malloc_set_zone_name(zone, "VectorKitLabels");
                          *(_QWORD *)(v747 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                          mdm::Allocator::instance(void)::alloc = v747;
                        }
                        (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v632, 128);
                      }
                    }
                    while (v630 != v629);
                    v626 = *(_QWORD *)(v627 + 56);
                  }
                  *(_QWORD *)(v627 + 64) = v629;
                  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v627 + 80) + 40))(*(_QWORD *)(v627 + 80), v626, *(_QWORD *)(v627 + 72) - v626);
                }
                MEMORY[0x1A1AF4E00](v627, 0x1020C4010FC18DELL);
              }
            }
            while (v553 != v551);
          }
          v552 = &v611[8 * v610];
          if (v551)
            operator delete(v551);
          v551 = v612;
          v553 = v752;
          v602 = v764;
          if (!v764)
            goto LABEL_704;
LABEL_692:
          v638 = *(_QWORD **)(v602 + 56);
          if (v638)
          {
            v639 = *(_QWORD **)(v602 + 64);
            v640 = *(_QWORD *)(v602 + 56);
            if (v639 != v638)
            {
              do
              {
                v642 = (void (***)(_QWORD, uint64_t))*--v639;
                v641 = v642;
                *v639 = 0;
                if (v642)
                {
                  (**v641)(v641, v640);
                  if ((v643 & 1) == 0
                  {
                    v644 = operator new();
                    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v644, "VectorKitLabels", 0x5ED09DD50000000FLL);
                  }
                  (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v641, 128);
                }
              }
              while (v639 != v638);
              v640 = *(_QWORD *)(v602 + 56);
            }
            *(_QWORD *)(v602 + 64) = v638;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v602 + 80) + 40))(*(_QWORD *)(v602 + 80), v640, *(_QWORD *)(v602 + 72) - v640);
          }
          MEMORY[0x1A1AF4E00](v602, 0x1020C4010FC18DELL);
          goto LABEL_704;
        }
        v553 = v556;
LABEL_583:
        v750 = *(_QWORD *)v750;
        if (!v750)
        {
          v535 = (_QWORD *)v743[1];
          goto LABEL_760;
        }
      }
      v568 = v567 - 8;
      if ((unint64_t)(v567 - 8) >= 0x138)
      {
        v571 = v568 & 0xFFFFFFFFFFFFFFF8;
        if ((uint64_t *)((char *)v553 - (v568 & 0xFFFFFFFFFFFFFFF8) - 8) > v553 - 1)
        {
          v569 = v553;
        }
        else if (&v565[v559 - 8 - v571] > &v565[v559 - 8])
        {
          v569 = v553;
        }
        else
        {
          v572 = v568 >> 3;
          if (&v553[-v572 - 1] >= v566
            || (v573 = (unint64_t)&v565[v559 - v571 - 8], v569 = v553, v573 >= (unint64_t)v553))
          {
            v574 = v572 + 1;
            v569 = &v553[-(v574 & 0x3FFFFFFFFFFFFFFCLL)];
            v575 = &v565[8 * v560 - 16];
            v576 = v553 - 4;
            v577 = v574 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v579 = *(_OWORD *)v576;
              v578 = *((_OWORD *)v576 + 1);
              *(_OWORD *)v576 = 0uLL;
              *((_OWORD *)v576 + 1) = 0uLL;
              v576 -= 4;
              *((_OWORD *)v575 - 1) = v579;
              *(_OWORD *)v575 = v578;
              v575 -= 32;
              v577 -= 4;
            }
            while (v577);
            v566 -= v574 & 0x3FFFFFFFFFFFFFFCLL;
            if (v574 == (v574 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_615:
                v582 = *--v553;
                v581 = v582;
                *v553 = 0;
                if (v582)
                {
                  v583 = *(_QWORD **)(v581 + 56);
                  if (v583)
                  {
                    v584 = *(_QWORD **)(v581 + 64);
                    v580 = *(_QWORD *)(v581 + 56);
                    if (v584 != v583)
                    {
                      do
                      {
                        v586 = (void (***)(_QWORD, uint64_t))*--v584;
                        v585 = v586;
                        *v584 = 0;
                        if (v586)
                        {
                          (**v585)(v585, v580);
                          if ((v587 & 1) == 0
                          {
                            v588 = operator new();
                            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v588, "VectorKitLabels", 0x5ED09DD50000000FLL);
                          }
                          (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v585, 128);
                        }
                      }
                      while (v584 != v583);
                      v580 = *(_QWORD *)(v581 + 56);
                    }
                    *(_QWORD *)(v581 + 64) = v583;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v581 + 80) + 40))(*(_QWORD *)(v581 + 80), v580, *(_QWORD *)(v581 + 72) - v580);
                  }
                  MEMORY[0x1A1AF4E00](v581, 0x1020C4010FC18DELL);
                }
              }
              while (v553 != v551);
              goto LABEL_625;
            }
          }
        }
      }
      else
      {
        v569 = v553;
      }
      do
      {
        v570 = *--v569;
        *v569 = 0;
        *--v566 = v570;
      }
      while (v569 != v551);
      goto LABEL_615;
    }
    v553 = 0;
    v551 = 0;
LABEL_760:
    v679 = *(v535 - 1);
    v680 = *(_QWORD *)(v679 + 2424);
    v681 = *(int8x16_t **)(v679 + 2432);
    v682 = 126 - 2 * __clz(((uint64_t)v681->i64 - v680) >> 3);
    if (v681 == (int8x16_t *)v680)
      v683 = 0;
    else
      v683 = v682;
    std::__introsort<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::RouteLineRibbonDescriptor>::batch(std::unordered_map<md::RouteLineBatchKey,std::vector<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::RouteLineBatchKey,std::vector<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::RouteLineRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::RouteLineRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*,false>(v680, v681, v683, 1);
    v684 = v551;
    if (v551 == v553)
    {
      if (!v553)
        goto LABEL_4;
LABEL_3:
      operator delete(v551);
      goto LABEL_4;
    }
    do
    {
      v685 = *(_QWORD **)(v743[1] - 8);
      v686 = *v684;
      *v684 = 0;
      v687 = (uint64_t *)v685[304];
      v688 = v685[305];
      if ((unint64_t)v687 < v688)
      {
        *v687 = v686;
        v689 = v687 + 1;
        goto LABEL_796;
      }
      v756 = v684;
      v690 = v685[303];
      v691 = (char *)v687 - v690;
      v692 = ((uint64_t)v687 - v690) >> 3;
      if ((unint64_t)(v692 + 1) >> 61)
        abort();
      v693 = v688 - v690;
      v694 = v693 >> 2;
      if (v693 >> 2 <= (unint64_t)(v692 + 1))
        v694 = v692 + 1;
      if ((unint64_t)v693 >= 0x7FFFFFFFFFFFFFF8)
        v695 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v695 = v694;
      if (v695)
      {
        if (v695 >> 61)
          goto LABEL_858;
        v696 = (char *)operator new(8 * v695);
      }
      else
      {
        v696 = 0;
      }
      v697 = &v696[8 * v692];
      v698 = &v696[8 * v695];
      *(_QWORD *)v697 = v686;
      v689 = v697 + 8;
      v699 = (char *)v685[304];
      v700 = (char *)v685[303];
      if (v699 == v700)
      {
        v685[303] = v697;
        v685[304] = v689;
        v685[305] = v698;
      }
      else
      {
        v701 = v699 - v700 - 8;
        if (v701 <= 0x77)
          goto LABEL_867;
        if (&v699[-(v701 & 0xFFFFFFFFFFFFFFF8) - 8] < v697
          && &v691[(_QWORD)v696 - (v701 & 0xFFFFFFFFFFFFFFF8) - 8] < v699)
        {
          goto LABEL_867;
        }
        v703 = (v701 >> 3) + 1;
        v704 = &v696[8 * v692 - 16];
        v705 = v699 - 32;
        v706 = v703 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v708 = *(_OWORD *)v705;
          v707 = *((_OWORD *)v705 + 1);
          *(_OWORD *)v705 = 0uLL;
          *((_OWORD *)v705 + 1) = 0uLL;
          v705 -= 32;
          *((_OWORD *)v704 - 1) = v708;
          *(_OWORD *)v704 = v707;
          v704 -= 32;
          v706 -= 4;
        }
        while (v706);
        v697 -= 8 * (v703 & 0x3FFFFFFFFFFFFFFCLL);
        v699 -= 8 * (v703 & 0x3FFFFFFFFFFFFFFCLL);
        if (v703 != (v703 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_867:
          do
          {
            v709 = *((_QWORD *)v699 - 1);
            v699 -= 8;
            *(_QWORD *)v699 = 0;
            *((_QWORD *)v697 - 1) = v709;
            v697 -= 8;
          }
          while (v699 != v700);
        }
        v699 = (char *)v685[303];
        v710 = (char *)v685[304];
        v685[303] = v697;
        v685[304] = v689;
        v685[305] = v698;
        if (v710 == v699)
          goto LABEL_794;
        do
        {
          v713 = *((_QWORD *)v710 - 1);
          v710 -= 8;
          v712 = v713;
          *(_QWORD *)v710 = 0;
          if (v713)
          {
            v714 = v551;
            v715 = *(_QWORD **)(v712 + 56);
            if (v715)
            {
              v716 = *(_QWORD **)(v712 + 64);
              v711 = *(_QWORD *)(v712 + 56);
              if (v716 != v715)
              {
                do
                {
                  v718 = (void (***)(_QWORD, uint64_t))*--v716;
                  v717 = v718;
                  *v716 = 0;
                  if (v718)
                  {
                    (**v717)(v717, v711);
                    if ((v719 & 1) == 0
                    {
                      v720 = operator new();
                      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v720, "VectorKitLabels", 0x5ED09DD50000000FLL);
                    }
                    (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v717, 128);
                  }
                }
                while (v716 != v715);
                v711 = *(_QWORD *)(v712 + 56);
              }
              *(_QWORD *)(v712 + 64) = v715;
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v712 + 80) + 40))(*(_QWORD *)(v712 + 80), v711, *(_QWORD *)(v712 + 72) - v711);
            }
            MEMORY[0x1A1AF4E00](v712, 0x1020C4010FC18DELL);
            v551 = v714;
          }
        }
        while (v710 != v699);
      }
      v684 = v756;
LABEL_794:
      if (v699)
        operator delete(v699);
LABEL_796:
      v685[304] = v689;
      ++v684;
    }
    while (v684 != v553);
    if (v551)
    {
      do
      {
        v723 = *--v553;
        v722 = v723;
        *v553 = 0;
        if (v723)
        {
          v724 = *(_QWORD **)(v722 + 56);
          if (v724)
          {
            v725 = *(_QWORD **)(v722 + 64);
            v721 = *(_QWORD *)(v722 + 56);
            if (v725 != v724)
            {
              do
              {
                v727 = (void (***)(_QWORD, uint64_t))*--v725;
                v726 = v727;
                *v725 = 0;
                if (v727)
                {
                  (**v726)(v726, v721);
                  if ((v728 & 1) == 0
                  {
                    v729 = operator new();
                    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v729, "VectorKitLabels", 0x5ED09DD50000000FLL);
                  }
                  (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v726, 128);
                }
              }
              while (v725 != v724);
              v721 = *(_QWORD *)(v722 + 56);
            }
            *(_QWORD *)(v722 + 64) = v724;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v722 + 80) + 40))(*(_QWORD *)(v722 + 80), v721, *(_QWORD *)(v722 + 72) - v721);
          }
          MEMORY[0x1A1AF4E00](v722, 0x1020C4010FC18DELL);
        }
      }
      while (v553 != v551);
      goto LABEL_3;
    }
LABEL_4:
    result = std::__hash_table<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,geo::StdAllocator<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>>,mdm::Allocator>>::~__hash_table(&v757);
    v742 = (_QWORD *)*v742;
    if (v742)
      continue;
    return result;
  }
}

void sub_19FD41B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t *a25,uint64_t *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)(v32 + 324));
  v36 = *a25;
  *a25 = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  v37 = *a26;
  *a26 = 0;
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  v38 = *v31;
  *v31 = 0;
  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  v39 = v32[319];
  v32[319] = 0;
  if (v39)
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  v40 = v32[318];
  v32[318] = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  v41 = v32[317];
  v32[317] = 0;
  if (v41)
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  v42 = v32[316];
  v32[316] = 0;
  if (v42)
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  v43 = v32[315];
  v32[315] = 0;
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  v44 = v32[314];
  v32[314] = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  v45 = v32[313];
  v32[313] = 0;
  if (v45)
    (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
  v46 = v32[312];
  v32[312] = 0;
  if (v46)
    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
  v47 = v32[311];
  v32[311] = 0;
  if (v47)
    (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  v48 = v32[310];
  v32[310] = 0;
  if (v48)
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  v49 = v32[309];
  v32[309] = 0;
  if (v49)
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
  v50 = *v34;
  *v34 = 0;
  if (v50)
    (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
  md::Ribbons::RibbonBatch<md::Ribbons::RouteLineRibbonDescriptor>::~RibbonBatch((uint64_t)v32);
  MEMORY[0x1A1AF4E00](v32, 0x10F1C40942B15B6);
  std::__hash_table<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,geo::StdAllocator<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>>,mdm::Allocator>>::~__hash_table(&a31);
  v51 = *(void **)v33;
  if (!*(_QWORD *)v33)
    _Unwind_Resume(a1);
  *(_QWORD *)(v33 + 8) = v51;
  operator delete(v51);
  _Unwind_Resume(a1);
}

uint64_t ggl::VertexDataTyped<ggl::RouteLine::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::VertexDataTyped<ggl::RouteLine::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::VertexDataTyped<ggl::RouteLine::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v2 = *(_QWORD *)(a1 - 128);
  if (v2)
  {
    *(_QWORD *)(a1 - 120) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v2, *(_QWORD *)(a1 - 112) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  v2 = a1 - 200;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 - 120) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v3, *(_QWORD *)(a1 - 112) - v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 - 168);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::RouteLine::DefaultVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0838;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::RouteLine::DefaultVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0838;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::RouteLine::DefaultVbo>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::RouteLineRibbonDescriptor>::batch(std::unordered_map<md::RouteLineBatchKey,std::vector<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::RouteLineBatchKey,std::vector<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::RouteLineRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::RouteLineRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*,false>(uint64_t result, int8x16_t *a2, uint64_t a3, char a4)
{
  uint64_t *v5;
  int8x16_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int8x16_t *v14;
  int8x16_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  _BOOL8 v28;
  unsigned int v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  void (***v44)(_QWORD, uint64_t);
  void (***v45)(_QWORD, uint64_t);
  unsigned __int8 v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  void (***v52)(_QWORD, uint64_t);
  void (***v53)(_QWORD, uint64_t);
  unsigned __int8 v54;
  uint64_t v55;
  BOOL v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BOOL8 v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  void (***v79)(_QWORD, uint64_t);
  void (***v80)(_QWORD, uint64_t);
  unsigned __int8 v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  void (***v87)(_QWORD, uint64_t);
  void (***v88)(_QWORD, uint64_t);
  unsigned __int8 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int8x16_t *v93;
  uint64_t v94;
  uint64_t v95;
  int8x16_t v96;
  int8x16_t *v97;
  BOOL v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int8x16_t *v106;
  _QWORD *v107;
  _QWORD *v108;
  uint64_t v109;
  malloc_zone_t *zone;
  void (***v111)(_QWORD, uint64_t);
  void (***v112)(_QWORD, uint64_t);
  unsigned __int8 v113;
  uint64_t v114;
  geo::read_write_lock *v115;
  const char *v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  int v121;
  int v122;
  int v123;
  unsigned int v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  _QWORD *v129;
  malloc_zone_t *v130;
  void (***v131)(_QWORD, uint64_t);
  void (***v132)(_QWORD, uint64_t);
  unsigned __int8 v133;
  uint64_t v134;
  geo::read_write_lock *v135;
  const char *v136;
  int64_t v137;
  uint64_t v138;
  int64_t v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  _BOOL4 v144;
  uint64_t v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t v151;
  _QWORD *v152;
  _QWORD *v153;
  uint64_t v154;
  void (***v155)(_QWORD, uint64_t);
  void (***v156)(_QWORD, uint64_t);
  unsigned __int8 v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  _QWORD *v162;
  void (***v163)(_QWORD, uint64_t);
  void (***v164)(_QWORD, uint64_t);
  unsigned __int8 v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v170;
  uint64_t *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  _QWORD *v181;
  malloc_zone_t *v182;
  void (***v183)(_QWORD, uint64_t);
  void (***v184)(_QWORD, uint64_t);
  unsigned __int8 v185;
  uint64_t v186;
  geo::read_write_lock *v187;
  const char *v188;
  uint64_t *v189;
  uint64_t v190;
  uint64_t v191;
  _QWORD *v192;
  _QWORD *v193;
  uint64_t v194;
  void (***v195)(_QWORD, uint64_t);
  void (***v196)(_QWORD, uint64_t);
  unsigned __int8 v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  _QWORD *v201;
  void (***v202)(_QWORD, uint64_t);
  void (***v203)(_QWORD, uint64_t);
  unsigned __int8 v204;
  uint64_t v205;
  uint64_t v206;
  _QWORD *v207;
  _QWORD *v208;
  uint64_t v209;
  void (***v210)(_QWORD, uint64_t);
  void (***v211)(_QWORD, uint64_t);
  unsigned __int8 v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t *v219;
  uint64_t v220;
  _QWORD *v221;
  _QWORD *v222;
  uint64_t v223;
  void (***v224)(_QWORD, uint64_t);
  void (***v225)(_QWORD, uint64_t);
  unsigned __int8 v226;
  uint64_t v227;
  _QWORD *v228;
  void (***v229)(_QWORD, uint64_t);
  void (***v230)(_QWORD, uint64_t);
  unsigned __int8 v231;
  uint64_t v232;
  uint64_t v233;
  int8x16_t *v234;
  uint64_t *v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  int v242;
  unint64_t v243;
  uint64_t v244;
  _QWORD *v245;
  _QWORD *v246;
  malloc_zone_t *v247;
  void (***v248)(_QWORD, uint64_t);
  void (***v249)(_QWORD, uint64_t);
  unsigned __int8 v250;
  uint64_t v251;
  geo::read_write_lock *v252;
  const char *v253;
  _QWORD *v254;
  _QWORD *v255;
  malloc_zone_t *v256;
  void (***v257)(_QWORD, uint64_t);
  void (***v258)(_QWORD, uint64_t);
  unsigned __int8 v259;
  uint64_t v260;
  geo::read_write_lock *v261;
  const char *v262;
  uint64_t v263;
  uint64_t *v265;
  uint64_t v266;
  uint64_t v267;
  int64_t v268;
  uint64_t v269;
  _QWORD *v270;
  uint64_t v271;
  uint64_t *v272;
  int64_t v273;
  int8x16_t *v275;
  uint64_t v276;

  v275 = (int8x16_t *)result;
LABEL_2:
  v5 = (uint64_t *)v275;
  v265 = &a2[-1].i64[1];
  while (2)
  {
    v6 = (int8x16_t *)v5;
    v7 = (char *)a2 - (char *)v5;
    v8 = ((char *)a2 - (char *)v5) >> 3;
    v275 = v6;
    switch(v8)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v91 = *v265;
        v92 = v6->i64[0];
        result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v265 + 96), v6->i64[0]);
        if ((_DWORD)result)
        {
          v6->i64[0] = v91;
          *v265 = v92;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v6->i64, &v6->i64[1], v265);
      case 4uLL:
        v93 = v6 + 1;
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v6->i64, &v6->i64[1], v6[1].i64);
        v94 = *v265;
        v95 = v6[1].i64[0];
        result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v265 + 96), v95);
        if ((_DWORD)result)
        {
          v93->i64[0] = v94;
          *v265 = v95;
          result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v93->i64[0] + 96), v6->i64[1]);
          if ((_DWORD)result)
          {
            v96 = *(int8x16_t *)((char *)v6 + 8);
            *(int8x16_t *)((char *)v6 + 8) = vextq_s8(v96, v96, 8uLL);
            result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v96.i64[1] + 96), v6->i64[0]);
            if ((_DWORD)result)
              *v6 = vextq_s8(*v6, *v6, 8uLL);
          }
        }
        return result;
      case 5uLL:
        return std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v6->i64, &v6->i64[1], v6[1].i64, &v6[1].i64[1], v265);
      default:
        if (v7 <= 191)
        {
          v97 = (int8x16_t *)&v6->u64[1];
          v99 = v6 == a2 || v97 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v99)
            {
              v100 = (uint64_t *)v6;
              do
              {
                v102 = v100;
                v100 = (uint64_t *)v97;
                v104 = *v102;
                v103 = v102[1];
                result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v103 + 96), *v102);
                if ((_DWORD)result)
                {
                  v105 = 0;
                  *v100 = 0;
                  v272 = v100;
                  while (1)
                  {
                    *v100 = v104;
                    v100 = v102;
                    *v102 = 0;
                    v106 = v275;
                    if (v105)
                    {
                      v107 = *(_QWORD **)(v105 + 56);
                      if (v107)
                      {
                        v108 = *(_QWORD **)(v105 + 64);
                        v109 = *(_QWORD *)(v105 + 56);
                        if (v108 != v107)
                        {
                          do
                          {
                            v112 = (void (***)(_QWORD, uint64_t))*--v108;
                            v111 = v112;
                            *v108 = 0;
                            if (v112)
                            {
                              (**v111)(v111, v109);
                              if ((v113 & 1) == 0
                              {
                                v114 = operator new();
                                *(_QWORD *)(v114 + 16) = 0x5ED09DD50000000FLL;
                                *(_QWORD *)(v114 + 24) = "VectorKitLabels";
                                *(_OWORD *)(v114 + 32) = xmmword_19FFB2E80;
                                *(_QWORD *)v114 = &off_1E42B5668;
                                *(_QWORD *)(v114 + 8) = "VectorKitLabels";
                                *(_OWORD *)(v114 + 72) = 0u;
                                *(_OWORD *)(v114 + 88) = 0u;
                                *(_OWORD *)(v114 + 104) = 0u;
                                *(_OWORD *)(v114 + 120) = 0u;
                                *(_OWORD *)(v114 + 136) = 0u;
                                *(_OWORD *)(v114 + 152) = 0u;
                                *(_OWORD *)(v114 + 168) = 0u;
                                *(_OWORD *)(v114 + 184) = 0u;
                                *(_OWORD *)(v114 + 200) = 0u;
                                *(_OWORD *)(v114 + 216) = 0u;
                                *(_OWORD *)(v114 + 232) = 0u;
                                *(_QWORD *)(v114 + 248) = 0;
                                v266 = v114;
                                *(_OWORD *)(v114 + 56) = 0u;
                                v115 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v114 + 56), 0);
                                if ((_DWORD)v115)
                                  geo::read_write_lock::logFailure(v115, (uint64_t)"initialization", v116);
                                zone = malloc_create_zone(0, 0);
                                *(_QWORD *)(v266 + 48) = zone;
                                malloc_set_zone_name(zone, "VectorKitLabels");
                                *(_QWORD *)(v266 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                                mdm::Allocator::instance(void)::alloc = v266;
                              }
                              (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v111, 128);
                            }
                          }
                          while (v108 != v107);
                          v109 = *(_QWORD *)(v105 + 56);
                          v106 = v275;
                        }
                        *(_QWORD *)(v105 + 64) = v107;
                        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v105 + 80) + 40))(*(_QWORD *)(v105 + 80), v109, *(_QWORD *)(v105 + 72) - v109);
                      }
                      result = MEMORY[0x1A1AF4E00](v105, 0x1020C4010FC18DELL);
                    }
                    if (v100 == (uint64_t *)v106)
                      break;
                    v117 = *(unsigned int *)(v103 + 96);
                    v118 = v117 & 0xF;
                    if ((v117 & 0xF000) != 0)
                      v119 = 3;
                    else
                      v119 = 0;
                    if ((v117 & 0xF00) != 0)
                      v119 = 2;
                    if ((v117 & 0xF0) != 0)
                      v119 = 1;
                    if ((v117 & 0xF) != 0)
                      v119 = 0;
                    v120 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v119];
                    v121 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v117 >> 12];
                    v122 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v117 >> 8) & 0xF];
                    v123 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v117 >> 4];
                    v124 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v118];
                    v102 = v100 - 1;
                    v104 = *(v100 - 1);
                    v125 = *(unsigned int *)(v104 + 96);
                    if ((v125 & 0xF000) != 0)
                      v126 = 3;
                    else
                      v126 = 0;
                    if ((v125 & 0xF00) != 0)
                      v126 = 2;
                    if ((v125 & 0xF0) != 0)
                      v126 = 1;
                    if ((v125 & 0xF) != 0)
                      v126 = 0;
                    if (((v121 << 12) | (v120 << 16) | (v122 << 8) | (16 * v123) | v124) >= ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v125 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v126] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v125 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v125 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v125 & 0xF]))
                      goto LABEL_214;
                    v105 = *v100;
                  }
                  v100 = (uint64_t *)v106;
LABEL_214:
                  v127 = *v100;
                  *v100 = v103;
                  v100 = v272;
                  if (v127)
                  {
                    v128 = *(_QWORD **)(v127 + 56);
                    if (v128)
                    {
                      v129 = *(_QWORD **)(v127 + 64);
                      v101 = *(_QWORD *)(v127 + 56);
                      if (v129 != v128)
                      {
                        do
                        {
                          v132 = (void (***)(_QWORD, uint64_t))*--v129;
                          v131 = v132;
                          *v129 = 0;
                          if (v132)
                          {
                            (**v131)(v131, v101);
                            if ((v133 & 1) == 0
                            {
                              v134 = operator new();
                              *(_QWORD *)(v134 + 16) = 0x5ED09DD50000000FLL;
                              *(_QWORD *)(v134 + 24) = "VectorKitLabels";
                              *(_OWORD *)(v134 + 32) = xmmword_19FFB2E80;
                              *(_QWORD *)v134 = &off_1E42B5668;
                              *(_QWORD *)(v134 + 8) = "VectorKitLabels";
                              *(_OWORD *)(v134 + 72) = 0u;
                              *(_OWORD *)(v134 + 88) = 0u;
                              *(_OWORD *)(v134 + 104) = 0u;
                              *(_OWORD *)(v134 + 120) = 0u;
                              *(_OWORD *)(v134 + 136) = 0u;
                              *(_OWORD *)(v134 + 152) = 0u;
                              *(_OWORD *)(v134 + 168) = 0u;
                              *(_OWORD *)(v134 + 184) = 0u;
                              *(_OWORD *)(v134 + 200) = 0u;
                              *(_OWORD *)(v134 + 216) = 0u;
                              *(_OWORD *)(v134 + 232) = 0u;
                              *(_QWORD *)(v134 + 248) = 0;
                              *(_OWORD *)(v134 + 56) = 0u;
                              v135 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v134 + 56), 0);
                              if ((_DWORD)v135)
                                geo::read_write_lock::logFailure(v135, (uint64_t)"initialization", v136);
                              v130 = malloc_create_zone(0, 0);
                              *(_QWORD *)(v134 + 48) = v130;
                              malloc_set_zone_name(v130, "VectorKitLabels");
                              *(_QWORD *)(v134 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                              mdm::Allocator::instance(void)::alloc = v134;
                              v100 = v272;
                            }
                            (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v131, 128);
                          }
                        }
                        while (v129 != v128);
                        v101 = *(_QWORD *)(v127 + 56);
                      }
                      *(_QWORD *)(v127 + 64) = v128;
                      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v127 + 80) + 40))(*(_QWORD *)(v127 + 80), v101, *(_QWORD *)(v127 + 72) - v101);
                    }
                    result = MEMORY[0x1A1AF4E00](v127, 0x1020C4010FC18DELL);
                  }
                }
                v97 = (int8x16_t *)(v100 + 1);
              }
              while (v100 + 1 != (uint64_t *)a2);
            }
          }
          else if (!v99)
          {
            do
            {
              v235 = (uint64_t *)v275;
              v234 = v97;
              v237 = v275->i64[0];
              v236 = v275->i64[1];
              v238 = *(unsigned int *)(v236 + 96);
              result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v238, v275->i64[0]);
              v275 = v234;
              if ((_DWORD)result)
              {
                v239 = 0;
                v234->i64[0] = 0;
                do
                {
                  v234->i64[0] = v237;
                  v234 = (int8x16_t *)v235;
                  *v235 = 0;
                  if (v239)
                  {
                    v245 = *(_QWORD **)(v239 + 56);
                    if (v245)
                    {
                      v246 = *(_QWORD **)(v239 + 64);
                      v240 = *(_QWORD *)(v239 + 56);
                      if (v246 != v245)
                      {
                        do
                        {
                          v249 = (void (***)(_QWORD, uint64_t))*--v246;
                          v248 = v249;
                          *v246 = 0;
                          if (v249)
                          {
                            (**v248)(v248, v240);
                            if ((v250 & 1) == 0
                            {
                              v251 = operator new();
                              *(_QWORD *)(v251 + 16) = 0x5ED09DD50000000FLL;
                              *(_QWORD *)(v251 + 24) = "VectorKitLabels";
                              *(_OWORD *)(v251 + 32) = xmmword_19FFB2E80;
                              *(_QWORD *)v251 = &off_1E42B5668;
                              *(_QWORD *)(v251 + 8) = "VectorKitLabels";
                              *(_OWORD *)(v251 + 72) = 0u;
                              *(_OWORD *)(v251 + 88) = 0u;
                              *(_OWORD *)(v251 + 104) = 0u;
                              *(_OWORD *)(v251 + 120) = 0u;
                              *(_OWORD *)(v251 + 136) = 0u;
                              *(_OWORD *)(v251 + 152) = 0u;
                              *(_OWORD *)(v251 + 168) = 0u;
                              *(_OWORD *)(v251 + 184) = 0u;
                              *(_OWORD *)(v251 + 200) = 0u;
                              *(_OWORD *)(v251 + 216) = 0u;
                              *(_OWORD *)(v251 + 232) = 0u;
                              *(_QWORD *)(v251 + 248) = 0;
                              v269 = v251;
                              *(_OWORD *)(v251 + 56) = 0u;
                              v252 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v251 + 56), 0);
                              if ((_DWORD)v252)
                                geo::read_write_lock::logFailure(v252, (uint64_t)"initialization", v253);
                              v247 = malloc_create_zone(0, 0);
                              *(_QWORD *)(v269 + 48) = v247;
                              malloc_set_zone_name(v247, "VectorKitLabels");
                              *(_QWORD *)(v269 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                              mdm::Allocator::instance(void)::alloc = v269;
                            }
                            (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v248, 128);
                          }
                        }
                        while (v246 != v245);
                        v240 = *(_QWORD *)(v239 + 56);
                      }
                      *(_QWORD *)(v239 + 64) = v245;
                      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v239 + 80) + 40))(*(_QWORD *)(v239 + 80), v240, *(_QWORD *)(v239 + 72) - v240);
                    }
                    result = MEMORY[0x1A1AF4E00](v239, 0x1020C4010FC18DELL);
                    v238 = *(unsigned int *)(v236 + 96);
                  }
                  if ((v238 & 0xF000) != 0)
                    v241 = 3;
                  else
                    v241 = 0;
                  if ((v238 & 0xF00) != 0)
                    v241 = 2;
                  if ((v238 & 0xF0) != 0)
                    v241 = 1;
                  if ((v238 & 0xF) != 0)
                    v241 = 0;
                  v242 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v241];
                  v235 = &v234[-1].i64[1];
                  v237 = v234[-1].i64[1];
                  v243 = *(unsigned int *)(v237 + 96);
                  if ((v243 & 0xF000) != 0)
                    v244 = 3;
                  else
                    v244 = 0;
                  if ((v243 & 0xF00) != 0)
                    v244 = 2;
                  if ((v243 & 0xF0) != 0)
                    v244 = 1;
                  if ((v243 & 0xF) != 0)
                    v244 = 0;
                  v239 = v234->i64[0];
                }
                while (((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v238 >> 12] << 12) | (v242 << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v238 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v238 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v238 & 0xF]) < ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v243 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v244] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v243 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v243 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v243 & 0xF]));
                v234->i64[0] = v236;
                v234 = v275;
                if (v239)
                {
                  v254 = *(_QWORD **)(v239 + 56);
                  if (v254)
                  {
                    v255 = *(_QWORD **)(v239 + 64);
                    v233 = *(_QWORD *)(v239 + 56);
                    if (v255 != v254)
                    {
                      do
                      {
                        v258 = (void (***)(_QWORD, uint64_t))*--v255;
                        v257 = v258;
                        *v255 = 0;
                        if (v258)
                        {
                          (**v257)(v257, v233);
                          if ((v259 & 1) == 0
                          {
                            v260 = operator new();
                            *(_QWORD *)(v260 + 16) = 0x5ED09DD50000000FLL;
                            *(_QWORD *)(v260 + 24) = "VectorKitLabels";
                            *(_OWORD *)(v260 + 32) = xmmword_19FFB2E80;
                            *(_QWORD *)v260 = &off_1E42B5668;
                            *(_QWORD *)(v260 + 8) = "VectorKitLabels";
                            *(_OWORD *)(v260 + 72) = 0u;
                            *(_OWORD *)(v260 + 88) = 0u;
                            *(_OWORD *)(v260 + 104) = 0u;
                            *(_OWORD *)(v260 + 120) = 0u;
                            *(_OWORD *)(v260 + 136) = 0u;
                            *(_OWORD *)(v260 + 152) = 0u;
                            *(_OWORD *)(v260 + 168) = 0u;
                            *(_OWORD *)(v260 + 184) = 0u;
                            *(_OWORD *)(v260 + 200) = 0u;
                            *(_OWORD *)(v260 + 216) = 0u;
                            *(_OWORD *)(v260 + 232) = 0u;
                            *(_QWORD *)(v260 + 248) = 0;
                            *(_OWORD *)(v260 + 56) = 0u;
                            v261 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v260 + 56), 0);
                            if ((_DWORD)v261)
                              geo::read_write_lock::logFailure(v261, (uint64_t)"initialization", v262);
                            v256 = malloc_create_zone(0, 0);
                            *(_QWORD *)(v260 + 48) = v256;
                            malloc_set_zone_name(v256, "VectorKitLabels");
                            *(_QWORD *)(v260 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                            mdm::Allocator::instance(void)::alloc = v260;
                          }
                          (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v257, 128);
                        }
                      }
                      while (v255 != v254);
                      v233 = *(_QWORD *)(v239 + 56);
                    }
                    *(_QWORD *)(v239 + 64) = v254;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v239 + 80) + 40))(*(_QWORD *)(v239 + 80), v233, *(_QWORD *)(v239 + 72) - v233);
                  }
                  result = MEMORY[0x1A1AF4E00](v239, 0x1020C4010FC18DELL);
                  v234 = v275;
                }
              }
              v97 = (int8x16_t *)&v234->u64[1];
            }
            while (&v234->u64[1] != (unint64_t *)a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v6 == a2)
            return result;
          v137 = (v8 - 2) >> 1;
          v273 = v137;
          do
          {
            v139 = v137;
            if (v273 >= v137)
            {
              v140 = (2 * v137) | 1;
              v141 = &v275->i64[v140];
              if (2 * v137 + 2 >= (uint64_t)v8)
              {
                v145 = *v141;
              }
              else
              {
                v142 = *v141;
                v143 = v141[1];
                v144 = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v141 + 96), v143);
                if (v144)
                  v145 = v143;
                else
                  v145 = v142;
                if (v144)
                {
                  ++v141;
                  v140 = 2 * v139 + 2;
                }
              }
              v146 = &v275->i64[v139];
              v147 = *v146;
              result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v145 + 96), *v146);
              if ((result & 1) == 0)
              {
                v268 = v139;
                *v146 = 0;
                v148 = *v141;
                do
                {
                  v150 = v141;
                  *v141 = 0;
                  v151 = *v146;
                  *v146 = v148;
                  if (v151)
                  {
                    v152 = *(_QWORD **)(v151 + 56);
                    if (v152)
                    {
                      v153 = *(_QWORD **)(v151 + 64);
                      v154 = *(_QWORD *)(v151 + 56);
                      if (v153 != v152)
                      {
                        do
                        {
                          v156 = (void (***)(_QWORD, uint64_t))*--v153;
                          v155 = v156;
                          *v153 = 0;
                          if (v156)
                          {
                            (**v155)(v155, v154);
                            if ((v157 & 1) == 0
                            {
                              v158 = operator new();
                              mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v158, "VectorKitLabels", 0x5ED09DD50000000FLL);
                            }
                            (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v155, 128);
                          }
                        }
                        while (v153 != v152);
                        v154 = *(_QWORD *)(v151 + 56);
                      }
                      *(_QWORD *)(v151 + 64) = v152;
                      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v151 + 80) + 40))(*(_QWORD *)(v151 + 80), v154, *(_QWORD *)(v151 + 72) - v154);
                    }
                    result = MEMORY[0x1A1AF4E00](v151, 0x1020C4010FC18DELL);
                  }
                  if (v273 < v140)
                    break;
                  v159 = (2 * v140) | 1;
                  v141 = &v275->i64[v159];
                  v140 = 2 * v140 + 2;
                  if (v140 < (uint64_t)v8)
                  {
                    v148 = *v141;
                    v149 = v141[1];
                    if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v141 + 96), v149))
                    {
                      v148 = v149;
                      ++v141;
                    }
                    else
                    {
                      v140 = v159;
                    }
                  }
                  else
                  {
                    v148 = *v141;
                    v140 = v159;
                  }
                  result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v148 + 96), v147);
                  v146 = v150;
                }
                while (!(_DWORD)result);
                v160 = *v150;
                *v150 = v147;
                v139 = v268;
                if (v160)
                {
                  v161 = *(_QWORD **)(v160 + 56);
                  if (v161)
                  {
                    v162 = *(_QWORD **)(v160 + 64);
                    v138 = *(_QWORD *)(v160 + 56);
                    if (v162 != v161)
                    {
                      do
                      {
                        v164 = (void (***)(_QWORD, uint64_t))*--v162;
                        v163 = v164;
                        *v162 = 0;
                        if (v164)
                        {
                          (**v163)(v163, v138);
                          if ((v165 & 1) == 0
                          {
                            v166 = operator new();
                            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v166, "VectorKitLabels", 0x5ED09DD50000000FLL);
                          }
                          (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v163, 128);
                        }
                      }
                      while (v162 != v161);
                      v138 = *(_QWORD *)(v160 + 56);
                    }
                    *(_QWORD *)(v160 + 64) = v161;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v160 + 80) + 40))(*(_QWORD *)(v160 + 80), v138, *(_QWORD *)(v160 + 72) - v138);
                  }
                  result = MEMORY[0x1A1AF4E00](v160, 0x1020C4010FC18DELL);
                }
              }
            }
            v137 = v139 - 1;
          }
          while (v139);
          v167 = (unint64_t)v7 >> 3;
          while (2)
          {
            if (v167 >= 2)
            {
              v170 = 0;
              v171 = (uint64_t *)v275;
              v172 = v275->i64[0];
              v275->i64[0] = 0;
              do
              {
                v174 = &v171[v170 + 1];
                v175 = (2 * v170) | 1;
                v170 = 2 * v170 + 2;
                if (v170 >= v167)
                {
                  v178 = *v174;
                  v170 = v175;
                }
                else
                {
                  v176 = *v174;
                  v177 = v174[1];
                  result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v174 + 96), v177);
                  if ((_DWORD)result)
                    v178 = v177;
                  else
                    v178 = v176;
                  if ((_DWORD)result)
                    ++v174;
                  else
                    v170 = v175;
                }
                *v174 = 0;
                v179 = *v171;
                *v171 = v178;
                if (v179)
                {
                  v180 = *(_QWORD **)(v179 + 56);
                  if (v180)
                  {
                    v181 = *(_QWORD **)(v179 + 64);
                    v173 = *(_QWORD *)(v179 + 56);
                    if (v181 != v180)
                    {
                      do
                      {
                        v184 = (void (***)(_QWORD, uint64_t))*--v181;
                        v183 = v184;
                        *v181 = 0;
                        if (v184)
                        {
                          (**v183)(v183, v173);
                          if ((v185 & 1) == 0
                          {
                            v186 = operator new();
                            *(_QWORD *)(v186 + 16) = 0x5ED09DD50000000FLL;
                            *(_QWORD *)(v186 + 24) = "VectorKitLabels";
                            *(_OWORD *)(v186 + 32) = xmmword_19FFB2E80;
                            *(_QWORD *)v186 = &off_1E42B5668;
                            *(_QWORD *)(v186 + 8) = "VectorKitLabels";
                            *(_OWORD *)(v186 + 72) = 0u;
                            *(_OWORD *)(v186 + 88) = 0u;
                            *(_OWORD *)(v186 + 104) = 0u;
                            *(_OWORD *)(v186 + 120) = 0u;
                            *(_OWORD *)(v186 + 136) = 0u;
                            *(_OWORD *)(v186 + 152) = 0u;
                            *(_OWORD *)(v186 + 168) = 0u;
                            *(_OWORD *)(v186 + 184) = 0u;
                            *(_OWORD *)(v186 + 200) = 0u;
                            *(_OWORD *)(v186 + 216) = 0u;
                            *(_OWORD *)(v186 + 232) = 0u;
                            *(_QWORD *)(v186 + 248) = 0;
                            *(_OWORD *)(v186 + 56) = 0u;
                            v187 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v186 + 56), 0);
                            if ((_DWORD)v187)
                              geo::read_write_lock::logFailure(v187, (uint64_t)"initialization", v188);
                            v182 = malloc_create_zone(0, 0);
                            *(_QWORD *)(v186 + 48) = v182;
                            malloc_set_zone_name(v182, "VectorKitLabels");
                            *(_QWORD *)(v186 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                            mdm::Allocator::instance(void)::alloc = v186;
                          }
                          (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v183, 128);
                        }
                      }
                      while (v181 != v180);
                      v173 = *(_QWORD *)(v179 + 56);
                    }
                    *(_QWORD *)(v179 + 64) = v180;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v179 + 80) + 40))(*(_QWORD *)(v179 + 80), v173, *(_QWORD *)(v179 + 72) - v173);
                  }
                  result = MEMORY[0x1A1AF4E00](v179, 0x1020C4010FC18DELL);
                }
                v171 = v174;
              }
              while (v170 <= (uint64_t)((unint64_t)(v167 - 2) >> 1));
              v189 = &a2[-1].i64[1];
              if (v174 == (uint64_t *)&a2[-1].u64[1])
              {
                v199 = *v174;
                *v174 = v172;
                if (v199)
                {
                  v200 = *(_QWORD **)(v199 + 56);
                  if (v200)
                  {
                    v201 = *(_QWORD **)(v199 + 64);
                    v168 = *(_QWORD *)(v199 + 56);
                    if (v201 == v200)
                      goto LABEL_275;
                    do
                    {
                      v203 = (void (***)(_QWORD, uint64_t))*--v201;
                      v202 = v203;
                      *v201 = 0;
                      if (v203)
                      {
                        (**v202)(v202, v168);
                        if ((v204 & 1) == 0
                        {
                          v205 = operator new();
                          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v205, "VectorKitLabels", 0x5ED09DD50000000FLL);
                        }
                        (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v202, 128);
                      }
                    }
                    while (v201 != v200);
                    goto LABEL_274;
                  }
LABEL_276:
                  result = MEMORY[0x1A1AF4E00](v199, 0x1020C4010FC18DELL);
                }
              }
              else
              {
                v190 = *v189;
                *v189 = 0;
                v191 = *v174;
                *v174 = v190;
                if (v191)
                {
                  v192 = *(_QWORD **)(v191 + 56);
                  if (v192)
                  {
                    v193 = *(_QWORD **)(v191 + 64);
                    v194 = *(_QWORD *)(v191 + 56);
                    if (v193 != v192)
                    {
                      do
                      {
                        v196 = (void (***)(_QWORD, uint64_t))*--v193;
                        v195 = v196;
                        *v193 = 0;
                        if (v196)
                        {
                          (**v195)(v195, v194);
                          if ((v197 & 1) == 0
                          {
                            v198 = operator new();
                            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v198, "VectorKitLabels", 0x5ED09DD50000000FLL);
                          }
                          (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v195, 128);
                        }
                      }
                      while (v193 != v192);
                      v194 = *(_QWORD *)(v191 + 56);
                    }
                    *(_QWORD *)(v191 + 64) = v192;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v191 + 80) + 40))(*(_QWORD *)(v191 + 80), v194, *(_QWORD *)(v191 + 72) - v194);
                  }
                  result = MEMORY[0x1A1AF4E00](v191, 0x1020C4010FC18DELL);
                }
                v206 = *v189;
                *v189 = v172;
                if (v206)
                {
                  v207 = *(_QWORD **)(v206 + 56);
                  if (v207)
                  {
                    v208 = *(_QWORD **)(v206 + 64);
                    v209 = *(_QWORD *)(v206 + 56);
                    if (v208 != v207)
                    {
                      do
                      {
                        v211 = (void (***)(_QWORD, uint64_t))*--v208;
                        v210 = v211;
                        *v208 = 0;
                        if (v211)
                        {
                          (**v210)(v210, v209);
                          if ((v212 & 1) == 0
                          {
                            v213 = operator new();
                            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v213, "VectorKitLabels", 0x5ED09DD50000000FLL);
                          }
                          (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v210, 128);
                        }
                      }
                      while (v208 != v207);
                      v209 = *(_QWORD *)(v206 + 56);
                    }
                    *(_QWORD *)(v206 + 64) = v207;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v206 + 80) + 40))(*(_QWORD *)(v206 + 80), v209, *(_QWORD *)(v206 + 72) - v209);
                  }
                  result = MEMORY[0x1A1AF4E00](v206, 0x1020C4010FC18DELL);
                }
                v214 = (char *)(v174 + 1) - (char *)v275;
                if (v214 >= 9)
                {
                  v215 = (unint64_t)((v214 >> 3) - 2) >> 1;
                  v216 = &v275->i64[v215];
                  v217 = *v174;
                  result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v216 + 96), *v174);
                  if ((_DWORD)result)
                  {
                    *v174 = 0;
                    v218 = *v216;
                    do
                    {
                      v219 = v216;
                      *v216 = 0;
                      v220 = *v174;
                      *v174 = v218;
                      if (v220)
                      {
                        v221 = *(_QWORD **)(v220 + 56);
                        if (v221)
                        {
                          v222 = *(_QWORD **)(v220 + 64);
                          v223 = *(_QWORD *)(v220 + 56);
                          if (v222 != v221)
                          {
                            do
                            {
                              v225 = (void (***)(_QWORD, uint64_t))*--v222;
                              v224 = v225;
                              *v222 = 0;
                              if (v225)
                              {
                                (**v224)(v224, v223);
                                if ((v226 & 1) == 0
                                {
                                  v227 = operator new();
                                  mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v227, "VectorKitLabels", 0x5ED09DD50000000FLL);
                                }
                                (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v224, 128);
                              }
                            }
                            while (v222 != v221);
                            v223 = *(_QWORD *)(v220 + 56);
                          }
                          *(_QWORD *)(v220 + 64) = v221;
                          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v220 + 80) + 40))(*(_QWORD *)(v220 + 80), v223, *(_QWORD *)(v220 + 72) - v223);
                        }
                        result = MEMORY[0x1A1AF4E00](v220, 0x1020C4010FC18DELL);
                      }
                      if (!v215)
                        break;
                      v215 = (v215 - 1) >> 1;
                      v216 = &v275->i64[v215];
                      v218 = *v216;
                      result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v216 + 96), v217);
                      v174 = v219;
                    }
                    while ((result & 1) != 0);
                    v199 = *v219;
                    *v219 = v217;
                    if (v199)
                    {
                      v200 = *(_QWORD **)(v199 + 56);
                      if (v200)
                      {
                        v228 = *(_QWORD **)(v199 + 64);
                        v168 = *(_QWORD *)(v199 + 56);
                        if (v228 == v200)
                        {
LABEL_275:
                          *(_QWORD *)(v199 + 64) = v200;
                          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v199 + 80) + 40))(*(_QWORD *)(v199 + 80), v168, *(_QWORD *)(v199 + 72) - v168);
                          goto LABEL_276;
                        }
                        do
                        {
                          v230 = (void (***)(_QWORD, uint64_t))*--v228;
                          v229 = v230;
                          *v228 = 0;
                          if (v230)
                          {
                            (**v229)(v229, v168);
                            if ((v231 & 1) == 0
                            {
                              v232 = operator new();
                              mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v232, "VectorKitLabels", 0x5ED09DD50000000FLL);
                            }
                            (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v229, 128);
                          }
                        }
                        while (v228 != v200);
LABEL_274:
                        v168 = *(_QWORD *)(v199 + 56);
                        goto LABEL_275;
                      }
                      goto LABEL_276;
                    }
                  }
                }
              }
            }
            a2 = (int8x16_t *)((char *)a2 - 8);
            if ((unint64_t)v167-- <= 2)
              return result;
            continue;
          }
        }
        v9 = v8 >> 1;
        if ((unint64_t)v7 < 0x401)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(&v6->i64[v8 >> 1], v6->i64, v265);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v6->i64, &v6->i64[v8 >> 1], v265);
          v10 = v9;
          v11 = &v6->i64[v9];
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(&v6->i64[1], v11 - 1, a2[-1].i64);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v6[1].i64, &v6->i64[v10 + 1], &a2[-2].i64[1]);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v11 - 1, &v6->i64[v8 >> 1], &v6->i64[v10 + 1]);
          v12 = v6->i64[0];
          v6->i64[0] = *v11;
          *v11 = v12;
        }
        v267 = a3 - 1;
        v13 = v6->i64[0];
        if ((a4 & 1) == 0
          && !md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v6[-1].i64[1] + 96), v6->i64[0]))
        {
          v6->i64[0] = 0;
          v57 = *(unsigned int *)(v13 + 96);
          result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v57, *v265);
          if ((result & 1) != 0)
          {
            v5 = (uint64_t *)v6;
            do
            {
              v58 = v5[1];
              ++v5;
              result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v57, v58);
            }
            while ((result & 1) == 0);
          }
          else
          {
            v59 = &v6->i64[1];
            do
            {
              v5 = v59;
              if (v59 >= (uint64_t *)a2)
                break;
              ++v59;
              result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v57, *v5);
            }
            while (!(_DWORD)result);
          }
          v60 = (uint64_t *)a2;
          if (v5 < (uint64_t *)a2)
          {
            v60 = (uint64_t *)a2;
            do
            {
              v61 = *--v60;
              result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v57, v61);
            }
            while ((result & 1) != 0);
          }
          if (v5 < v60)
          {
            v62 = *v5;
            v63 = *v60;
            v64 = (v57 & 0xF) == 0;
            if ((v57 & 0xF000) != 0)
              v65 = 3;
            else
              v65 = 0;
            if ((v57 & 0xF00) != 0)
              v65 = 2;
            if (!(_BYTE)v57)
              v64 = v65;
            v66 = (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v57 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v64] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v57 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v57 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v57 & 0xF];
            do
            {
              *v5 = v63;
              *v60 = v62;
              do
              {
                v67 = v5[1];
                ++v5;
                v62 = v67;
                v68 = *(unsigned int *)(v67 + 96);
                if ((v68 & 0xF000) != 0)
                  v69 = 3;
                else
                  v69 = 0;
                if ((v68 & 0xF00) != 0)
                  v69 = 2;
                if ((v68 & 0xF0) != 0)
                  v69 = 1;
                if ((v68 & 0xF) != 0)
                  v69 = 0;
              }
              while (v66 >= ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v68 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v69] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v68 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v68 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v68 & 0xF]));
              do
              {
                v70 = *--v60;
                v63 = v70;
                v71 = *(unsigned int *)(v70 + 96);
                if ((v71 & 0xF000) != 0)
                  v72 = 3;
                else
                  v72 = 0;
                if ((v71 & 0xF00) != 0)
                  v72 = 2;
                if ((v71 & 0xF0) != 0)
                  v72 = 1;
                if ((v71 & 0xF) != 0)
                  v72 = 0;
              }
              while (v66 < ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v71 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v72] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v71 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v71 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v71 & 0xF]));
            }
            while (v5 < v60);
          }
          v73 = v5 - 1;
          if (v5 - 1 != (uint64_t *)v6)
          {
            v74 = *v73;
            *v73 = 0;
            result = v6->i64[0];
            v6->i64[0] = v74;
            if (result)
            {
              v75 = *(_QWORD **)(result + 56);
              if (v75)
              {
                v76 = result;
                v77 = *(_QWORD **)(result + 64);
                v78 = *(_QWORD *)(result + 56);
                if (v77 != v75)
                {
                  v276 = result;
                  do
                  {
                    v80 = (void (***)(_QWORD, uint64_t))*--v77;
                    v79 = v80;
                    *v77 = 0;
                    if (v80)
                    {
                      (**v79)(v79, v78);
                      if ((v81 & 1) == 0
                      {
                        v82 = operator new();
                        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v82, "VectorKitLabels", 0x5ED09DD50000000FLL);
                      }
                      (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v79, 128);
                    }
                  }
                  while (v77 != v75);
                  v76 = v276;
                  v78 = *(_QWORD *)(v276 + 56);
                }
                *(_QWORD *)(v76 + 64) = v75;
                (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v76 + 80) + 40))(*(_QWORD *)(v76 + 80), v78, *(_QWORD *)(v76 + 72) - v78);
                result = v76;
              }
              result = MEMORY[0x1A1AF4E00](result, 0x1020C4010FC18DELL);
            }
          }
          a4 = 0;
          v83 = *v73;
          *v73 = v13;
          a3 = v267;
          if (v83)
          {
            v84 = *(_QWORD **)(v83 + 56);
            if (v84)
            {
              v85 = *(_QWORD **)(v83 + 64);
              v86 = *(_QWORD *)(v83 + 56);
              if (v85 != v84)
              {
                do
                {
                  v88 = (void (***)(_QWORD, uint64_t))*--v85;
                  v87 = v88;
                  *v85 = 0;
                  if (v88)
                  {
                    (**v87)(v87, v86);
                    if ((v89 & 1) == 0
                    {
                      v90 = operator new();
                      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v90, "VectorKitLabels", 0x5ED09DD50000000FLL);
                    }
                    (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v87, 128);
                  }
                }
                while (v85 != v84);
                v86 = *(_QWORD *)(v83 + 56);
              }
              *(_QWORD *)(v83 + 64) = v84;
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v83 + 80) + 40))(*(_QWORD *)(v83 + 80), v86, *(_QWORD *)(v83 + 72) - v86);
            }
            result = MEMORY[0x1A1AF4E00](v83, 0x1020C4010FC18DELL);
            a4 = 0;
          }
          continue;
        }
        v6->i64[0] = 0;
        v14 = v6;
        do
        {
          v15 = v14;
          v17 = v14->i64[1];
          v14 = (int8x16_t *)((char *)v14 + 8);
          v16 = v17;
        }
        while (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v17 + 96), v13));
        v18 = (uint64_t *)a2;
        if (v15 == v6)
        {
          v18 = (uint64_t *)a2;
          do
          {
            if (v14 >= (int8x16_t *)v18)
              break;
            v20 = *--v18;
          }
          while (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v20 + 96), v13));
        }
        else
        {
          do
            v19 = *--v18;
          while (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v19 + 96), v13));
        }
        if (v14 < (int8x16_t *)v18)
        {
          v21 = *v18;
          v22 = *(unsigned int *)(v13 + 96);
          v23 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v22 >> 12] << 12;
          v24 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v22 >> 8) & 0xF];
          v25 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v22 >> 4];
          v26 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v22 & 0xF];
          if ((v22 & 0xF000) != 0)
            v27 = 3;
          else
            v27 = 0;
          if ((v22 & 0xF00) != 0)
            v27 = 2;
          if (*(_DWORD *)(v13 + 96))
            v28 = (*(_DWORD *)(v13 + 96) & 0xF) == 0;
          else
            v28 = v27;
          v29 = v23 | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v28] << 16) | (v24 << 8) | (16 * v25) | v26;
          v30 = (uint64_t *)v14;
          v31 = v18;
          do
          {
            *v30 = v21;
            *v31 = v16;
            do
            {
              v32 = v30[1];
              ++v30;
              v16 = v32;
              v33 = *(unsigned int *)(v32 + 96);
              if ((v33 & 0xF000) != 0)
                v34 = 3;
              else
                v34 = 0;
              if ((v33 & 0xF00) != 0)
                v34 = 2;
              if ((v33 & 0xF0) != 0)
                v34 = 1;
              if ((v33 & 0xF) != 0)
                v34 = 0;
            }
            while (((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v33 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v34] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v33 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v33 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v33 & 0xF]) < v29);
            v15 = (int8x16_t *)(v30 - 1);
            do
            {
              v35 = *--v31;
              v21 = v35;
              v36 = *(unsigned int *)(v35 + 96);
              if ((v36 & 0xF000) != 0)
                v37 = 3;
              else
                v37 = 0;
              if ((v36 & 0xF00) != 0)
                v37 = 2;
              if ((v36 & 0xF0) != 0)
                v37 = 1;
              if ((v36 & 0xF) != 0)
                v37 = 0;
            }
            while (((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v36 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v37] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v36 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v36 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v36 & 0xF]) >= v29);
          }
          while (v30 < v31);
        }
        if (v15 != v6)
        {
          v38 = v15->i64[0];
          v15->i64[0] = 0;
          v39 = v6->i64[0];
          v6->i64[0] = v38;
          if (v39)
          {
            v40 = *(_QWORD **)(v39 + 56);
            if (v40)
            {
              v41 = v39;
              v42 = *(_QWORD **)(v39 + 64);
              v43 = *(_QWORD *)(v39 + 56);
              if (v42 != v40)
              {
                v263 = v39;
                v270 = *(_QWORD **)(v39 + 56);
                do
                {
                  v45 = (void (***)(_QWORD, uint64_t))*--v42;
                  v44 = v45;
                  *v42 = 0;
                  if (v45)
                  {
                    (**v44)(v44, v43);
                    if ((v46 & 1) == 0
                    {
                      v47 = operator new();
                      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v47, "VectorKitLabels", 0x5ED09DD50000000FLL);
                    }
                    (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v44, 128);
                    v40 = v270;
                  }
                }
                while (v42 != v40);
                v41 = v263;
                v43 = *(_QWORD *)(v263 + 56);
              }
              *(_QWORD *)(v41 + 64) = v40;
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v41 + 80) + 40))(*(_QWORD *)(v41 + 80), v43, *(_QWORD *)(v41 + 72) - v43);
              v39 = v41;
            }
            MEMORY[0x1A1AF4E00](v39, 0x1020C4010FC18DELL);
          }
        }
        v48 = v15->i64[0];
        v15->i64[0] = v13;
        if (v48)
        {
          v49 = *(_QWORD **)(v48 + 56);
          if (v49)
          {
            v50 = *(_QWORD **)(v48 + 64);
            v51 = *(_QWORD *)(v48 + 56);
            if (v50 != v49)
            {
              v271 = v48;
              do
              {
                v53 = (void (***)(_QWORD, uint64_t))*--v50;
                v52 = v53;
                *v50 = 0;
                if (v53)
                {
                  (**v52)(v52, v51);
                  {
                    v55 = operator new();
                    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v55, "VectorKitLabels", 0x5ED09DD50000000FLL);
                  }
                  (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v52, 128);
                }
              }
              while (v50 != v49);
              v48 = v271;
              v51 = *(_QWORD *)(v271 + 56);
            }
            *(_QWORD *)(v48 + 64) = v49;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v48 + 80) + 40))(*(_QWORD *)(v48 + 80), v51, *(_QWORD *)(v48 + 72) - v51);
          }
          MEMORY[0x1A1AF4E00](v48, 0x1020C4010FC18DELL);
        }
        a3 = v267;
        if (v14 < (int8x16_t *)v18)
        {
LABEL_82:
          result = std::__introsort<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::RouteLineRibbonDescriptor>::batch(std::unordered_map<md::RouteLineBatchKey,std::vector<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::RouteLineBatchKey,std::vector<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::RouteLineRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::RouteLineRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*,false>(v275, v15, v267, a4 & 1);
          a4 = 0;
          v5 = &v15->i64[1];
          continue;
        }
        v56 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::RouteLineRibbonDescriptor>::batch(std::unordered_map<md::RouteLineBatchKey,std::vector<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::RouteLineBatchKey,std::vector<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::RouteLineRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::RouteLineRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v275, v15);
        v5 = &v15->i64[1];
        result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::RouteLineRibbonDescriptor>::batch(std::unordered_map<md::RouteLineBatchKey,std::vector<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::RouteLineBatchKey,std::vector<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::RouteLineRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::RouteLineRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>((int8x16_t *)&v15->u64[1], a2);
        if (!(_DWORD)result)
        {
          if (v56)
            continue;
          goto LABEL_82;
        }
        a2 = v15;
        if (!v56)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::RouteLineRibbonDescriptor>::batch(std::unordered_map<md::RouteLineBatchKey,std::vector<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::RouteLineBatchKey,std::vector<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::RouteLineRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::RouteLineRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(int8x16_t *a1, int8x16_t *a2)
{
  int8x16_t *v2;
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *i64;
  int8x16_t *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int8x16_t *i;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  void (***v19)(_QWORD, uint64_t);
  void (***v20)(_QWORD, uint64_t);
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  void (***v26)(_QWORD, uint64_t);
  void (***v27)(_QWORD, uint64_t);
  unsigned __int8 v28;
  uint64_t v29;
  int8x16_t *v30;
  uint64_t v31;
  uint64_t v32;
  int8x16_t v33;
  int8x16_t *v34;
  int v35;

  v2 = a2;
  v4 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = a2[-1].i64[1];
      v7 = a1->i64[0];
      if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v6 + 96), a1->i64[0]))
      {
        a1->i64[0] = v6;
        v2[-1].i64[1] = v7;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], &a2[-1].i64[1]);
      return 1;
    case 4:
      v30 = a1 + 1;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], a1[1].i64);
      v31 = v2[-1].i64[1];
      v32 = a1[1].i64[0];
      if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v31 + 96), v32))
      {
        v30->i64[0] = v31;
        v2[-1].i64[1] = v32;
        if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v30->i64[0] + 96), a1->i64[1]))
        {
          v33 = *(int8x16_t *)((char *)a1 + 8);
          *(int8x16_t *)((char *)a1 + 8) = vextq_s8(v33, v33, 8uLL);
          if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v33.i64[1] + 96), a1->i64[0]))
          {
            *a1 = vextq_s8(*a1, *a1, 8uLL);
          }
        }
      }
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], a1[1].i64, &a1[1].i64[1], &a2[-1].i64[1]);
      return 1;
    default:
      i64 = a1[1].i64;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], a1[1].i64);
      v9 = (int8x16_t *)((char *)a1 + 24);
      if (&a1[1].u64[1] == (unint64_t *)v2)
        return 1;
      v10 = 0;
      v34 = v2;
      break;
  }
  while (1)
  {
    v12 = v9->i64[0];
    v13 = *i64;
    if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v9->i64[0] + 96), *i64))
    {
      v35 = v10;
      v14 = 0;
      v9->i64[0] = 0;
      for (i = v9; ; v14 = i->i64[0])
      {
        i->i64[0] = v13;
        i = (int8x16_t *)i64;
        *i64 = 0;
        if (v14)
        {
          v16 = *(_QWORD **)(v14 + 56);
          if (v16)
          {
            v17 = *(_QWORD **)(v14 + 64);
            v18 = *(_QWORD *)(v14 + 56);
            if (v17 != v16)
            {
              do
              {
                v20 = (void (***)(_QWORD, uint64_t))*--v17;
                v19 = v20;
                *v17 = 0;
                if (v20)
                {
                  (**v19)(v19, v18);
                  {
                    v22 = operator new();
                    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v22, "VectorKitLabels", 0x5ED09DD50000000FLL);
                  }
                  (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v19, 128);
                }
              }
              while (v17 != v16);
              v18 = *(_QWORD *)(v14 + 56);
            }
            *(_QWORD *)(v14 + 64) = v16;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v14 + 80) + 40))(*(_QWORD *)(v14 + 80), v18, *(_QWORD *)(v14 + 72) - v18);
          }
          MEMORY[0x1A1AF4E00](v14, 0x1020C4010FC18DELL);
        }
        if (i == a1)
          break;
        i64 = &i[-1].i64[1];
        v13 = i[-1].i64[1];
        if (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v12 + 96), v13))goto LABEL_30;
      }
      i = a1;
LABEL_30:
      v23 = i->i64[0];
      i->i64[0] = v12;
      v2 = v34;
      if (v23)
      {
        v24 = *(_QWORD **)(v23 + 56);
        if (v24)
        {
          v25 = *(_QWORD **)(v23 + 64);
          v11 = *(_QWORD *)(v23 + 56);
          if (v25 != v24)
          {
            do
            {
              v27 = (void (***)(_QWORD, uint64_t))*--v25;
              v26 = v27;
              *v25 = 0;
              if (v27)
              {
                (**v26)(v26, v11);
                {
                  v29 = operator new();
                  mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v29, "VectorKitLabels", 0x5ED09DD50000000FLL);
                }
                (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                                 + 40))(mdm::Allocator::instance(void)::alloc, v26, 128);
              }
            }
            while (v25 != v24);
            v11 = *(_QWORD *)(v23 + 56);
          }
          *(_QWORD *)(v23 + 64) = v24;
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v23 + 80) + 40))(*(_QWORD *)(v23 + 80), v11, *(_QWORD *)(v23 + 72) - v11);
        }
        MEMORY[0x1A1AF4E00](v23, 0x1020C4010FC18DELL);
      }
      v10 = v35 + 1;
      if (v35 == 7)
        return &v9->u64[1] == (unint64_t *)v34;
    }
    i64 = (uint64_t *)v9;
    v9 = (int8x16_t *)((char *)v9 + 8);
    if (v9 == v2)
      return 1;
  }
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_7DaVinci42ElevatedFillColorWithDistancePipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_7DaVinci42ElevatedFillColorWithDistancePipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D78F8;
  return result;
}

void std::__function::__func<md::ElevatedPolygonRenderResources::ElevatedPolygonRenderResources(ggl::StandardLibrary const&,ggl::RenderTargetFormat const&)::$_3,std::allocator<md::ElevatedPolygonRenderResources::ElevatedPolygonRenderResources(ggl::StandardLibrary const&,ggl::RenderTargetFormat const&)::$_3>,ggl::DaVinci::ElevatedFillColorWithDistancePipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::ElevatedPolygonRenderResources::ElevatedPolygonRenderResources(ggl::StandardLibrary const&,ggl::RenderTargetFormat const&)::$_3,std::allocator<md::ElevatedPolygonRenderResources::ElevatedPolygonRenderResources(ggl::StandardLibrary const&,ggl::RenderTargetFormat const&)::$_3>,ggl::DaVinci::ElevatedFillColorWithDistancePipelineSetup * ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D3880;
  return result;
}

_QWORD *std::__function::__func<md::ElevatedPolygonRenderResources::ElevatedPolygonRenderResources(ggl::StandardLibrary const&,ggl::RenderTargetFormat const&)::$_3,std::allocator<md::ElevatedPolygonRenderResources::ElevatedPolygonRenderResources(ggl::StandardLibrary const&,ggl::RenderTargetFormat const&)::$_3>,ggl::DaVinci::ElevatedFillColorWithDistancePipelineSetup * ()(void)>::operator()()
{
  _QWORD *v0;
  unsigned __int8 v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned __int8 v23;
  unsigned __int8 v24;
  unsigned __int8 v25;

  v0 = (_QWORD *)operator new();
  if ((v1 & 1) == 0
  {
    if ((v23 & 1) == 0
    {
      if ((v25 & 1) == 0
      {
        ggl::MeshTyped<ggl::DaVinci::DistanceCompressedVbo>::attributesReflection(void)::r = (uint64_t)&ggl::DaVinci::distanceCompressedVboReflection;
      }
      ggl::MeshTyped<ggl::DaVinci::DistanceCompressedVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::DaVinci::DistanceCompressedVbo>::attributesReflection(void)::r;
      unk_1EE577C38 = 1;
    }
    ggl::DaVinci::ElevatedFillColorWithDistancePipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::DaVinci::DistanceCompressedVbo>::typedReflection(void)::r;
    unk_1EE577A60 = &ggl::DaVinci::pipelineDataElevatedFillColorWithDistancePipelineDeviceStructs(void)::ref;
    qword_1EE577A68 = 0;
    if ((v24 & 1) == 0
    {
      ggl::DaVinci::pipelineDataElevatedFillColorWithDistancePipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
      unk_1EE577AD0 = ggl::Tile::Transform::reflection(void)::reflection;
      qword_1EE577AD8 = (uint64_t)ggl::DaVinci::ElevatedFillStyle::reflection(void)::reflection;
      unk_1EE577AE0 = ggl::Tile::Clipping::reflection(void)::reflection;
    }
    qword_1EE577A70 = (uint64_t)&ggl::DaVinci::pipelineDataElevatedFillColorWithDistancePipelineConstantStructs(void)::ref;
    unk_1EE577A78 = xmmword_19FFB3690;
  }
  ggl::PipelineSetup::PipelineSetup((uint64_t)v0, (uint64_t)&ggl::DaVinci::ElevatedFillColorWithDistancePipelineSetup::typedReflection(void)::ref);
  *v0 = &off_1E42BC940;
  v2 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v2->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  v2->__shared_weak_owners_ = 0;
  v2->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E29B0;
  v4 = ggl::BufferData::BufferData((uint64_t)&v2[1], qword_1EE546430, 2, 1, 6, 1);
  v2[9].__shared_owners_ = (uint64_t)ggl::DaVinci::ElevatedFillStyle::reflection(void)::reflection;
  v2[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9C50;
  v5 = v0[8];
  *(_QWORD *)(v5 + 32) = v4;
  *(_QWORD *)(v5 + 40) = 0;
  v6 = v0[20];
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  v8 = *(std::__shared_weak_count **)(v6 + 40);
  *(_QWORD *)(v6 + 32) = v4;
  *(_QWORD *)(v6 + 40) = v2;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v11->__shared_owners_ = 0;
  v12 = (unint64_t *)&v11->__shared_owners_;
  v11->__shared_weak_owners_ = 0;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2278;
  v13 = ggl::BufferData::BufferData((uint64_t)&v11[1], qword_1EE54ADE0, 2, 1, 6, 1);
  v11[9].__shared_owners_ = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
  v11[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B97B0;
  v14 = (uint64_t *)v0[8];
  *v14 = v13;
  v14[1] = 0;
  v15 = (uint64_t *)v0[20];
  do
    v16 = __ldxr(v12);
  while (__stxr(v16 + 1, v12));
  v17 = (std::__shared_weak_count *)v15[1];
  *v15 = v13;
  v15[1] = (uint64_t)v11;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  do
    v20 = __ldaxr(v12);
  while (__stlxr(v20 - 1, v12));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  do
    v21 = __ldaxr(p_shared_owners);
  while (__stlxr(v21 - 1, p_shared_owners));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return v0;
}

uint64_t ggl::ConstantDataTyped<ggl::DaVinci::ElevatedFillStyle>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::DaVinci::ElevatedFillStyle>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::DaVinci::ElevatedFillStyle>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E29B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::DaVinci::ElevatedFillStyle>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E29B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::DaVinci::ElevatedFillStyle>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_7DaVinci30ElevatedFillColorPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_7DaVinci30ElevatedFillColorPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D7868;
  return result;
}

void std::__function::__func<md::ElevatedPolygonRenderResources::ElevatedPolygonRenderResources(ggl::StandardLibrary const&,ggl::RenderTargetFormat const&)::$_2,std::allocator<md::ElevatedPolygonRenderResources::ElevatedPolygonRenderResources(ggl::StandardLibrary const&,ggl::RenderTargetFormat const&)::$_2>,ggl::DaVinci::ElevatedFillColorPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::ElevatedPolygonRenderResources::ElevatedPolygonRenderResources(ggl::StandardLibrary const&,ggl::RenderTargetFormat const&)::$_2,std::allocator<md::ElevatedPolygonRenderResources::ElevatedPolygonRenderResources(ggl::StandardLibrary const&,ggl::RenderTargetFormat const&)::$_2>,ggl::DaVinci::ElevatedFillColorPipelineSetup * ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D3838;
  return result;
}

_QWORD *std::__function::__func<md::ElevatedPolygonRenderResources::ElevatedPolygonRenderResources(ggl::StandardLibrary const&,ggl::RenderTargetFormat const&)::$_2,std::allocator<md::ElevatedPolygonRenderResources::ElevatedPolygonRenderResources(ggl::StandardLibrary const&,ggl::RenderTargetFormat const&)::$_2>,ggl::DaVinci::ElevatedFillColorPipelineSetup * ()(void)>::operator()()
{
  _QWORD *v0;
  unsigned __int8 v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned __int8 v23;
  unsigned __int8 v24;
  unsigned __int8 v25;

  v0 = (_QWORD *)operator new();
  if ((v1 & 1) == 0
  {
    if ((v23 & 1) == 0
    {
      if ((v25 & 1) == 0
      {
        ggl::MeshTyped<ggl::DaVinci::ElevatedFillVbo>::attributesReflection(void)::r = (uint64_t)&ggl::DaVinci::elevatedFillVboReflection;
      }
      ggl::MeshTyped<ggl::DaVinci::ElevatedFillVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::DaVinci::ElevatedFillVbo>::attributesReflection(void)::r;
      *(_QWORD *)algn_1EE586C58 = 1;
    }
    ggl::DaVinci::ElevatedFillColorPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::DaVinci::ElevatedFillVbo>::typedReflection(void)::r;
    unk_1EE586AA0 = &ggl::DaVinci::pipelineDataElevatedFillColorPipelineDeviceStructs(void)::ref;
    qword_1EE586AA8 = 0;
    if ((v24 & 1) == 0
    {
      ggl::DaVinci::pipelineDataElevatedFillColorPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
      *(_QWORD *)algn_1EE586C08 = ggl::Tile::Transform::reflection(void)::reflection;
      qword_1EE586C10 = (uint64_t)ggl::DaVinci::ElevatedFillStyle::reflection(void)::reflection;
      unk_1EE586C18 = ggl::Tile::Clipping::reflection(void)::reflection;
    }
    qword_1EE586AB0 = (uint64_t)&ggl::DaVinci::pipelineDataElevatedFillColorPipelineConstantStructs(void)::ref;
    unk_1EE586AB8 = xmmword_19FFB3690;
  }
  ggl::PipelineSetup::PipelineSetup((uint64_t)v0, (uint64_t)&ggl::DaVinci::ElevatedFillColorPipelineSetup::typedReflection(void)::ref);
  *v0 = &off_1E42BC7C0;
  v2 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v2->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  v2->__shared_weak_owners_ = 0;
  v2->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E29B0;
  v4 = ggl::BufferData::BufferData((uint64_t)&v2[1], qword_1EE546430, 2, 1, 6, 1);
  v2[9].__shared_owners_ = (uint64_t)ggl::DaVinci::ElevatedFillStyle::reflection(void)::reflection;
  v2[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9C50;
  v5 = v0[8];
  *(_QWORD *)(v5 + 32) = v4;
  *(_QWORD *)(v5 + 40) = 0;
  v6 = v0[20];
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  v8 = *(std::__shared_weak_count **)(v6 + 40);
  *(_QWORD *)(v6 + 32) = v4;
  *(_QWORD *)(v6 + 40) = v2;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v11->__shared_owners_ = 0;
  v12 = (unint64_t *)&v11->__shared_owners_;
  v11->__shared_weak_owners_ = 0;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2278;
  v13 = ggl::BufferData::BufferData((uint64_t)&v11[1], qword_1EE54ADE0, 2, 1, 6, 1);
  v11[9].__shared_owners_ = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
  v11[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B97B0;
  v14 = (uint64_t *)v0[8];
  *v14 = v13;
  v14[1] = 0;
  v15 = (uint64_t *)v0[20];
  do
    v16 = __ldxr(v12);
  while (__stxr(v16 + 1, v12));
  v17 = (std::__shared_weak_count *)v15[1];
  *v15 = v13;
  v15[1] = (uint64_t)v11;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  do
    v20 = __ldaxr(v12);
  while (__stlxr(v20 - 1, v12));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  do
    v21 = __ldaxr(p_shared_owners);
  while (__stlxr(v21 - 1, p_shared_owners));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return v0;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_7DaVinci44ElevatedStrokeColorWithDistancePipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_7DaVinci44ElevatedStrokeColorWithDistancePipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D7940;
  return result;
}

void std::__function::__func<md::ElevatedPolygonRenderResources::ElevatedPolygonRenderResources(ggl::StandardLibrary const&,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::ElevatedPolygonRenderResources::ElevatedPolygonRenderResources(ggl::StandardLibrary const&,ggl::RenderTargetFormat const&)::$_1>,ggl::DaVinci::ElevatedStrokeColorWithDistancePipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::ElevatedPolygonRenderResources::ElevatedPolygonRenderResources(ggl::StandardLibrary const&,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::ElevatedPolygonRenderResources::ElevatedPolygonRenderResources(ggl::StandardLibrary const&,ggl::RenderTargetFormat const&)::$_1>,ggl::DaVinci::ElevatedStrokeColorWithDistancePipelineSetup * ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D37F0;
  return result;
}

_QWORD *std::__function::__func<md::ElevatedPolygonRenderResources::ElevatedPolygonRenderResources(ggl::StandardLibrary const&,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::ElevatedPolygonRenderResources::ElevatedPolygonRenderResources(ggl::StandardLibrary const&,ggl::RenderTargetFormat const&)::$_1>,ggl::DaVinci::ElevatedStrokeColorWithDistancePipelineSetup * ()(void)>::operator()()
{
  _QWORD *v0;
  unsigned __int8 v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned __int8 v23;
  unsigned __int8 v24;
  unsigned __int8 v25;

  v0 = (_QWORD *)operator new();
  if ((v1 & 1) == 0
  {
    if ((v23 & 1) == 0
    {
      if ((v25 & 1) == 0
      {
        ggl::MeshTyped<ggl::DaVinci::DistanceCompressedVbo>::attributesReflection(void)::r = (uint64_t)&ggl::DaVinci::distanceCompressedVboReflection;
      }
      ggl::MeshTyped<ggl::DaVinci::DistanceCompressedVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::DaVinci::DistanceCompressedVbo>::attributesReflection(void)::r;
      unk_1EE577C38 = 1;
    }
    ggl::DaVinci::ElevatedStrokeColorWithDistancePipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::DaVinci::DistanceCompressedVbo>::typedReflection(void)::r;
    *(_QWORD *)algn_1EE577A98 = &ggl::DaVinci::pipelineDataElevatedStrokeColorWithDistancePipelineDeviceStructs(void)::ref;
    qword_1EE577AA0 = 0;
    if ((v24 & 1) == 0
    {
      ggl::DaVinci::pipelineDataElevatedStrokeColorWithDistancePipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
      unk_1EE577AF0 = ggl::Tile::Transform::reflection(void)::reflection;
      qword_1EE577AF8 = (uint64_t)ggl::Tile::Clipping::reflection(void)::reflection;
      unk_1EE577B00 = ggl::DaVinci::ClippedStroke::reflection(void)::reflection;
      qword_1EE577B08 = (uint64_t)ggl::PolylineOverlayRibbon::Style::reflection(void)::reflection;
    }
    qword_1EE577AA8 = (uint64_t)&ggl::DaVinci::pipelineDataElevatedStrokeColorWithDistancePipelineConstantStructs(void)::ref;
    unk_1EE577AB0 = xmmword_19FFB3030;
  }
  ggl::PipelineSetup::PipelineSetup((uint64_t)v0, (uint64_t)&ggl::DaVinci::ElevatedStrokeColorWithDistancePipelineSetup::typedReflection(void)::ref);
  *v0 = &off_1E42BC990;
  v2 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v2->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  v2->__shared_weak_owners_ = 0;
  v2->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2898;
  v4 = ggl::BufferData::BufferData((uint64_t)&v2[1], qword_1EE55A500, 2, 1, 6, 1);
  v2[9].__shared_owners_ = (uint64_t)ggl::DaVinci::ClippedStroke::reflection(void)::reflection;
  v2[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9B50;
  v5 = v0[8];
  *(_QWORD *)(v5 + 48) = v4;
  *(_QWORD *)(v5 + 56) = 0;
  v6 = v0[20];
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  v8 = *(std::__shared_weak_count **)(v6 + 56);
  *(_QWORD *)(v6 + 48) = v4;
  *(_QWORD *)(v6 + 56) = v2;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v11->__shared_owners_ = 0;
  v12 = (unint64_t *)&v11->__shared_owners_;
  v11->__shared_weak_owners_ = 0;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2278;
  v13 = ggl::BufferData::BufferData((uint64_t)&v11[1], qword_1EE54ADE0, 2, 1, 6, 1);
  v11[9].__shared_owners_ = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
  v11[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B97B0;
  v14 = (uint64_t *)v0[8];
  *v14 = v13;
  v14[1] = 0;
  v15 = (uint64_t *)v0[20];
  do
    v16 = __ldxr(v12);
  while (__stxr(v16 + 1, v12));
  v17 = (std::__shared_weak_count *)v15[1];
  *v15 = v13;
  v15[1] = (uint64_t)v11;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  do
    v20 = __ldaxr(v12);
  while (__stlxr(v20 - 1, v12));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  do
    v21 = __ldaxr(p_shared_owners);
  while (__stlxr(v21 - 1, p_shared_owners));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return v0;
}

uint64_t ggl::ConstantDataTyped<ggl::DaVinci::ClippedStroke>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::DaVinci::ClippedStroke>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::DaVinci::ClippedStroke>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2898;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::DaVinci::ClippedStroke>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2898;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::DaVinci::ClippedStroke>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_7DaVinci32ElevatedStrokeColorPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_7DaVinci32ElevatedStrokeColorPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D78B0;
  return result;
}

void std::__function::__func<md::ElevatedPolygonRenderResources::ElevatedPolygonRenderResources(ggl::StandardLibrary const&,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::ElevatedPolygonRenderResources::ElevatedPolygonRenderResources(ggl::StandardLibrary const&,ggl::RenderTargetFormat const&)::$_0>,ggl::DaVinci::ElevatedStrokeColorPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::ElevatedPolygonRenderResources::ElevatedPolygonRenderResources(ggl::StandardLibrary const&,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::ElevatedPolygonRenderResources::ElevatedPolygonRenderResources(ggl::StandardLibrary const&,ggl::RenderTargetFormat const&)::$_0>,ggl::DaVinci::ElevatedStrokeColorPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D37A8;
  result[1] = v3;
  return result;
}

_QWORD *std::__function::__func<md::ElevatedPolygonRenderResources::ElevatedPolygonRenderResources(ggl::StandardLibrary const&,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::ElevatedPolygonRenderResources::ElevatedPolygonRenderResources(ggl::StandardLibrary const&,ggl::RenderTargetFormat const&)::$_0>,ggl::DaVinci::ElevatedStrokeColorPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (_QWORD *)operator new();
  md::DaVinciPipelineStateManager<ggl::DaVinci::ElevatedStrokeColorPipelineState,std::shared_ptr<ggl::ElevatedStrokeColorShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(&v33, v1 + 32, 0);
  v3 = v33;
  v4 = v34;
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v2, (uint64_t)v3, (uint64_t)v4);
    v7 = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v2, (uint64_t)v33, 0);
  }
  *v2 = &off_1E42BC8A0;
  v9 = v34;
  if (v34)
  {
    v10 = (unint64_t *)&v34->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v12->__shared_owners_ = 0;
  v13 = (unint64_t *)&v12->__shared_owners_;
  v12->__shared_weak_owners_ = 0;
  v12->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2898;
  v14 = ggl::BufferData::BufferData((uint64_t)&v12[1], qword_1EE55A500, 2, 1, 6, 1);
  v12[9].__shared_owners_ = (uint64_t)ggl::DaVinci::ClippedStroke::reflection(void)::reflection;
  v12[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9B50;
  v15 = v2[8];
  *(_QWORD *)(v15 + 48) = v14;
  *(_QWORD *)(v15 + 56) = 0;
  v16 = v2[20];
  do
    v17 = __ldxr(v13);
  while (__stxr(v17 + 1, v13));
  v18 = *(std::__shared_weak_count **)(v16 + 56);
  *(_QWORD *)(v16 + 48) = v14;
  *(_QWORD *)(v16 + 56) = v12;
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v21->__shared_owners_ = 0;
  v22 = (unint64_t *)&v21->__shared_owners_;
  v21->__shared_weak_owners_ = 0;
  v21->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2278;
  v23 = ggl::BufferData::BufferData((uint64_t)&v21[1], qword_1EE54ADE0, 2, 1, 6, 1);
  v21[9].__shared_owners_ = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
  v21[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B97B0;
  v24 = (uint64_t *)v2[8];
  *v24 = v23;
  v24[1] = 0;
  v25 = (uint64_t *)v2[20];
  do
    v26 = __ldxr(v22);
  while (__stxr(v26 + 1, v22));
  v27 = (std::__shared_weak_count *)v25[1];
  *v25 = v23;
  v25[1] = (uint64_t)v21;
  if (v27)
  {
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  do
    v30 = __ldaxr(v22);
  while (__stlxr(v30 - 1, v22));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  do
    v31 = __ldaxr(v13);
  while (__stlxr(v31 - 1, v13));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  return v2;
}

md::ElevatedPolygonRenderResources *md::ElevatedPolygonRenderResources::ElevatedPolygonRenderResources(md::ElevatedPolygonRenderResources *this, const ggl::StandardLibrary *a2, const RenderTargetFormat *a3)
{
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  _OWORD *v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  __int128 v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 v26;
  _QWORD *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  __int128 v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  _QWORD *v45;
  __int128 v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  __int128 v50;
  _QWORD *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  __int128 v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  _QWORD *v69;
  __int128 v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  __int128 v74;
  _QWORD *v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  __int128 v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  _QWORD *v93;
  __int128 v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  __int128 v98;
  _QWORD *v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  uint64_t *v106;
  unsigned __int8 v107;
  uint64_t v108;
  uint64_t (***v109)();
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  _OWORD *v119;
  __int128 *v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  _OWORD *v135;
  __int128 *v136;
  uint64_t v137;
  __int128 v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t (***v143)();
  uint64_t v144;
  __int128 *v145;
  uint64_t v146;
  uint64_t *v147;
  unsigned __int8 v148;
  uint64_t v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  _OWORD *v160;
  __int128 *v161;
  uint64_t v162;
  __int128 v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  uint64_t v175;
  _OWORD *v176;
  __int128 *v177;
  uint64_t v178;
  __int128 v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  _QWORD *v184;
  uint64_t v185;
  _QWORD *v186;
  uint64_t v187;
  uint64_t *v188;
  unsigned __int8 v189;
  uint64_t v190;
  _QWORD *v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  unint64_t v199;
  uint64_t v200;
  _OWORD *v201;
  __int128 *v202;
  uint64_t v203;
  __int128 v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  unint64_t v214;
  unint64_t v215;
  uint64_t v216;
  _OWORD *v217;
  __int128 *v218;
  uint64_t v219;
  __int128 v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  _QWORD *v225;
  uint64_t v226;
  _QWORD *v227;
  uint64_t v228;
  uint64_t *v229;
  unsigned __int8 v230;
  uint64_t v231;
  _QWORD *v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t v239;
  unint64_t v240;
  uint64_t v241;
  _OWORD *v242;
  __int128 *v243;
  uint64_t v244;
  __int128 v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  unint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  unint64_t v256;
  uint64_t v257;
  _OWORD *v258;
  __int128 *v259;
  uint64_t v260;
  __int128 v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  _QWORD *v266;
  uint64_t v267;
  _QWORD *v268;
  uint64_t v269;
  uint64_t v271;
  geo::read_write_lock *v272;
  const char *v273;
  malloc_zone_t *zone;
  uint64_t v275;
  geo::read_write_lock *v276;
  const char *v277;
  malloc_zone_t *v278;
  uint64_t v279;
  geo::read_write_lock *v280;
  const char *v281;
  malloc_zone_t *v282;
  uint64_t v283;
  geo::read_write_lock *v284;
  const char *v285;
  malloc_zone_t *v286;
  uint64_t v287;
  geo::read_write_lock *v288;
  const char *v289;
  malloc_zone_t *v290;
  uint64_t v291;
  geo::read_write_lock *v292;
  const char *v293;
  malloc_zone_t *v294;
  uint64_t v295;
  geo::read_write_lock *v296;
  const char *v297;
  malloc_zone_t *v298;
  uint64_t v299;
  geo::read_write_lock *v300;
  const char *v301;
  malloc_zone_t *v302;
  char *v303;
  const ggl::StandardLibrary *v304;
  _QWORD v305[3];
  _QWORD *v306;
  _QWORD v307[3];
  _QWORD *v308;
  _QWORD v309[3];
  _QWORD *v310;
  _QWORD v311[3];
  _QWORD *v312;
  _QWORD v313[3];
  _QWORD *v314;
  _QWORD v315[3];
  _QWORD *v316;
  uint64_t (**v317)();
  _QWORD *v318;
  uint64_t v319;
  uint64_t (***v320)();
  __int128 v321;
  __int128 v322;
  __int128 v323;
  _BYTE v324[44];
  char v325;
  _QWORD **v326;
  _QWORD *v327;
  uint64_t v328;
  uint64_t v329;

  v329 = *MEMORY[0x1E0C80C00];
  *((_BYTE *)this + 80) = 0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  v6 = (char *)this + 324;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  *(_OWORD *)((char *)this + 84) = xmmword_19FFB3060;
  *(_QWORD *)((char *)this + 100) = 0;
  *(_OWORD *)((char *)this + 108) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  v7 = (char *)this + 136;
  *((_QWORD *)this + 16) = (char *)this + 136;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((_BYTE *)this + 200) = 0;
  *(_OWORD *)((char *)this + 204) = xmmword_19FFB3060;
  *(_OWORD *)((char *)this + 220) = 0u;
  *(_QWORD *)((char *)this + 236) = 0;
  v8 = (char *)this + 256;
  *((_QWORD *)this + 31) = (char *)this + 256;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_BYTE *)this + 320) = 0;
  *(_OWORD *)((char *)this + 324) = xmmword_19FFB3060;
  *(_QWORD *)((char *)this + 356) = 0;
  *(_OWORD *)((char *)this + 340) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  v9 = (char *)this + 376;
  *((_QWORD *)this + 46) = (char *)this + 376;
  *(_OWORD *)((char *)this + 392) = 0u;
  v10 = (_OWORD *)((char *)this + 392);
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *((_BYTE *)this + 440) = 0;
  *(_OWORD *)((char *)this + 444) = xmmword_19FFB3060;
  *(_QWORD *)((char *)this + 476) = 0;
  *(_OWORD *)((char *)this + 460) = 0u;
  v11 = (char *)this + 496;
  *((_OWORD *)this + 31) = 0u;
  *((_QWORD *)this + 61) = (char *)this + 496;
  *(_OWORD *)((char *)this + 520) = 0u;
  *((_DWORD *)this + 136) = 0;
  *((_QWORD *)this + 67) = 0;
  *((_QWORD *)this + 64) = &off_1E42B5DE8;
  *(_QWORD *)((char *)this + 548) = 66304;
  *((_DWORD *)this + 139) = 0;
  *((_QWORD *)this + 70) = 0xFF7F0200000700;
  *((_WORD *)this + 284) = 0;
  *((_BYTE *)this + 570) = 3;
  *((_BYTE *)this + 587) = 0;
  *(_OWORD *)((char *)this + 571) = 0u;
  *(_OWORD *)((char *)this + 636) = 0u;
  *((_WORD *)this + 350) = 257;
  *((_BYTE *)this + 720) = 0;
  *((_OWORD *)this + 44) = 0u;
  *(_OWORD *)((char *)this + 728) = 0u;
  *((_QWORD *)this + 93) = 32;
  v12 = malloc_type_malloc(0xF10uLL, 0xB644C221uLL);
  *v12 = 0;
  v12[1] = 0;
  *((_QWORD *)this + 91) = v12;
  *((_QWORD *)this + 92) = v12;
  md::DaVinciRenderStateCache::DaVinciRenderStateCache((_QWORD *)this + 94);
  *((_QWORD *)this + 100) = 0;
  *((_QWORD *)this + 99) = 0;
  *((_QWORD *)this + 98) = (char *)this + 792;
  *((_WORD *)this + 404) = 2048;
  v304 = a2;
  v13 = *((_QWORD *)a2 + 10);
  v14 = *(_QWORD *)(v13 + 632);
  v15 = *(std::__shared_weak_count **)(v13 + 640);
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  v18 = *(_OWORD *)&a3->colorFormatsCount;
  v322 = *(_OWORD *)a3->colorFormats;
  v323 = v18;
  v321 = 0uLL;
  v324[0] = 1;
  *(_OWORD *)&v324[4] = xmmword_19FFB35D0;
  *(_DWORD *)&v324[20] = 7;
  memset(&v324[24], 0, 20);
  v325 = 15;
  v327 = 0;
  v328 = 0;
  v326 = &v327;
  v303 = v11;
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    *(_QWORD *)&v321 = v14;
    *((_QWORD *)&v321 + 1) = v15;
  }
  else
  {
    *(_QWORD *)&v321 = v14;
  }
  v318 = 0;
  v319 = 0;
  v317 = (uint64_t (**)())&v318;
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(0);
  v21 = v318;
  v326 = &v318;
  v327 = v318;
  v328 = v319;
  if (v319)
  {
    v318[2] = &v327;
    v317 = (uint64_t (**)())&v318;
    v318 = 0;
    v319 = 0;
    v21 = 0;
  }
  else
  {
    v326 = &v327;
  }
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(v21);
  v22 = v321;
  v321 = 0uLL;
  v23 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  *((_OWORD *)this + 2) = v22;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = v323;
  *((_OWORD *)this + 3) = v322;
  *((_OWORD *)this + 4) = v26;
  *((_OWORD *)this + 5) = *(_OWORD *)v324;
  *(_OWORD *)((char *)this + 92) = *(_OWORD *)&v324[12];
  *(_OWORD *)((char *)this + 108) = *(_OWORD *)&v324[28];
  *((_BYTE *)this + 124) = v325;
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*((_QWORD **)this + 17));
  v27 = v327;
  *((_QWORD *)this + 16) = v326;
  *((_QWORD *)this + 17) = v27;
  v28 = v328;
  *((_QWORD *)this + 18) = v328;
  if (v28)
  {
    v27[2] = v7;
    v27 = 0;
    v326 = &v327;
    v327 = 0;
    v328 = 0;
  }
  else
  {
    *((_QWORD *)this + 16) = v7;
  }
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(v27);
  v29 = (std::__shared_weak_count *)*((_QWORD *)&v321 + 1);
  if (*((_QWORD *)&v321 + 1))
  {
    v30 = (unint64_t *)(*((_QWORD *)&v321 + 1) + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (v15)
  {
    v32 = (unint64_t *)&v15->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v34 = *((_QWORD *)v304 + 10);
  v35 = *(_QWORD *)(v34 + 656);
  v36 = *(std::__shared_weak_count **)(v34 + 664);
  if (v36)
  {
    v37 = (unint64_t *)&v36->__shared_owners_;
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
  }
  v39 = *(_OWORD *)&a3->colorFormatsCount;
  v322 = *(_OWORD *)a3->colorFormats;
  v323 = v39;
  v321 = 0uLL;
  v324[0] = 1;
  *(_OWORD *)&v324[4] = xmmword_19FFB35D0;
  *(_DWORD *)&v324[20] = 7;
  memset(&v324[24], 0, 20);
  v325 = 15;
  v327 = 0;
  v328 = 0;
  v326 = &v327;
  if (v36)
  {
    v40 = (unint64_t *)&v36->__shared_owners_;
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
    v42 = (std::__shared_weak_count *)*((_QWORD *)&v321 + 1);
    *(_QWORD *)&v321 = v35;
    *((_QWORD *)&v321 + 1) = v36;
    if (v42)
    {
      v43 = (unint64_t *)&v42->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
  }
  else
  {
    v321 = v35;
  }
  v318 = 0;
  v319 = 0;
  v317 = (uint64_t (**)())&v318;
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(v327);
  v45 = v318;
  v326 = &v318;
  v327 = v318;
  v328 = v319;
  if (v319)
  {
    v318[2] = &v327;
    v317 = (uint64_t (**)())&v318;
    v318 = 0;
    v319 = 0;
    v45 = 0;
  }
  else
  {
    v326 = &v327;
  }
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(v45);
  v46 = v321;
  v321 = 0uLL;
  v47 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
  *(_OWORD *)((char *)this + 152) = v46;
  if (v47)
  {
    v48 = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v50 = v323;
  *(_OWORD *)((char *)this + 168) = v322;
  *(_OWORD *)((char *)this + 184) = v50;
  *(_OWORD *)((char *)this + 200) = *(_OWORD *)v324;
  *(_OWORD *)((char *)this + 212) = *(_OWORD *)&v324[12];
  *(_OWORD *)((char *)this + 228) = *(_OWORD *)&v324[28];
  *((_BYTE *)this + 244) = v325;
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*((_QWORD **)this + 32));
  v51 = v327;
  *((_QWORD *)this + 31) = v326;
  *((_QWORD *)this + 32) = v51;
  v52 = v328;
  *((_QWORD *)this + 33) = v328;
  if (v52)
  {
    v51[2] = v8;
    v51 = 0;
    v326 = &v327;
    v327 = 0;
    v328 = 0;
  }
  else
  {
    *((_QWORD *)this + 31) = v8;
  }
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(v51);
  v53 = (std::__shared_weak_count *)*((_QWORD *)&v321 + 1);
  if (*((_QWORD *)&v321 + 1))
  {
    v54 = (unint64_t *)(*((_QWORD *)&v321 + 1) + 8);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  if (v36)
  {
    v56 = (unint64_t *)&v36->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v58 = *((_QWORD *)v304 + 10);
  v59 = *(_QWORD *)(v58 + 608);
  v60 = *(std::__shared_weak_count **)(v58 + 616);
  if (v60)
  {
    v61 = (unint64_t *)&v60->__shared_owners_;
    do
      v62 = __ldxr(v61);
    while (__stxr(v62 + 1, v61));
  }
  v63 = *(_OWORD *)&a3->colorFormatsCount;
  v322 = *(_OWORD *)a3->colorFormats;
  v323 = v63;
  v321 = 0uLL;
  v324[0] = 1;
  *(_OWORD *)&v324[4] = xmmword_19FFB35D0;
  *(_DWORD *)&v324[20] = 7;
  memset(&v324[24], 0, 20);
  v325 = 15;
  v327 = 0;
  v328 = 0;
  v326 = &v327;
  if (v60)
  {
    v64 = (unint64_t *)&v60->__shared_owners_;
    do
      v65 = __ldxr(v64);
    while (__stxr(v65 + 1, v64));
    v66 = (std::__shared_weak_count *)*((_QWORD *)&v321 + 1);
    *(_QWORD *)&v321 = v59;
    *((_QWORD *)&v321 + 1) = v60;
    if (v66)
    {
      v67 = (unint64_t *)&v66->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
      }
    }
  }
  else
  {
    v321 = v59;
  }
  v318 = 0;
  v319 = 0;
  v317 = (uint64_t (**)())&v318;
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(v327);
  v69 = v318;
  v326 = &v318;
  v327 = v318;
  v328 = v319;
  if (v319)
  {
    v318[2] = &v327;
    v317 = (uint64_t (**)())&v318;
    v318 = 0;
    v319 = 0;
    v69 = 0;
  }
  else
  {
    v326 = &v327;
  }
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(v69);
  v70 = v321;
  v321 = 0uLL;
  v71 = (std::__shared_weak_count *)*((_QWORD *)this + 35);
  *((_OWORD *)this + 17) = v70;
  if (v71)
  {
    v72 = (unint64_t *)&v71->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  v74 = v323;
  *((_OWORD *)this + 18) = v322;
  *((_OWORD *)this + 19) = v74;
  *((_OWORD *)this + 20) = *(_OWORD *)v324;
  *(_OWORD *)((char *)this + 332) = *(_OWORD *)&v324[12];
  *(_OWORD *)(v6 + 24) = *(_OWORD *)&v324[28];
  *((_BYTE *)this + 364) = v325;
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*((_QWORD **)this + 47));
  v75 = v327;
  *((_QWORD *)this + 46) = v326;
  *((_QWORD *)this + 47) = v75;
  v76 = v328;
  *((_QWORD *)this + 48) = v328;
  if (v76)
  {
    v75[2] = v9;
    v75 = 0;
    v326 = &v327;
    v327 = 0;
    v328 = 0;
  }
  else
  {
    *((_QWORD *)this + 46) = v9;
  }
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(v75);
  v77 = (std::__shared_weak_count *)*((_QWORD *)&v321 + 1);
  if (*((_QWORD *)&v321 + 1))
  {
    v78 = (unint64_t *)(*((_QWORD *)&v321 + 1) + 8);
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  if (v60)
  {
    v80 = (unint64_t *)&v60->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  v82 = *((_QWORD *)v304 + 10);
  v83 = *(_QWORD *)(v82 + 584);
  v84 = *(std::__shared_weak_count **)(v82 + 592);
  if (v84)
  {
    v85 = (unint64_t *)&v84->__shared_owners_;
    do
      v86 = __ldxr(v85);
    while (__stxr(v86 + 1, v85));
  }
  v87 = *(_OWORD *)&a3->colorFormatsCount;
  v322 = *(_OWORD *)a3->colorFormats;
  v323 = v87;
  v321 = 0uLL;
  v324[0] = 1;
  *(_OWORD *)&v324[4] = xmmword_19FFB35D0;
  *(_DWORD *)&v324[20] = 7;
  memset(&v324[24], 0, 20);
  v325 = 15;
  v327 = 0;
  v328 = 0;
  v326 = &v327;
  if (v84)
  {
    v88 = (unint64_t *)&v84->__shared_owners_;
    do
      v89 = __ldxr(v88);
    while (__stxr(v89 + 1, v88));
    v90 = (std::__shared_weak_count *)*((_QWORD *)&v321 + 1);
    *(_QWORD *)&v321 = v83;
    *((_QWORD *)&v321 + 1) = v84;
    if (v90)
    {
      v91 = (unint64_t *)&v90->__shared_owners_;
      do
        v92 = __ldaxr(v91);
      while (__stlxr(v92 - 1, v91));
      if (!v92)
      {
        ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
        std::__shared_weak_count::__release_weak(v90);
      }
    }
  }
  else
  {
    v321 = v83;
  }
  v318 = 0;
  v319 = 0;
  v317 = (uint64_t (**)())&v318;
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(v327);
  v93 = v318;
  v326 = &v318;
  v327 = v318;
  v328 = v319;
  if (v319)
  {
    v318[2] = &v327;
    v317 = (uint64_t (**)())&v318;
    v318 = 0;
    v319 = 0;
    v93 = 0;
  }
  else
  {
    v326 = &v327;
  }
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(v93);
  v94 = v321;
  v321 = 0uLL;
  v95 = (std::__shared_weak_count *)*((_QWORD *)this + 50);
  *v10 = v94;
  if (v95)
  {
    v96 = (unint64_t *)&v95->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v98 = v323;
  *(_OWORD *)((char *)this + 408) = v322;
  *(_OWORD *)((char *)this + 424) = v98;
  *(_OWORD *)((char *)this + 440) = *(_OWORD *)v324;
  *(_OWORD *)((char *)this + 452) = *(_OWORD *)&v324[12];
  *((_OWORD *)v6 + 9) = *(_OWORD *)&v324[28];
  *((_BYTE *)this + 484) = v325;
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*((_QWORD **)this + 62));
  v99 = v327;
  *((_QWORD *)this + 61) = v326;
  *((_QWORD *)this + 62) = v99;
  v100 = v328;
  *((_QWORD *)this + 63) = v328;
  if (v100)
  {
    v99[2] = v303;
    v99 = 0;
    v326 = &v327;
    v327 = 0;
    v328 = 0;
  }
  else
  {
    *((_QWORD *)this + 61) = v303;
  }
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(v99);
  v101 = (std::__shared_weak_count *)*((_QWORD *)&v321 + 1);
  if (*((_QWORD *)&v321 + 1))
  {
    v102 = (unint64_t *)(*((_QWORD *)&v321 + 1) + 8);
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  if (v84)
  {
    v104 = (unint64_t *)&v84->__shared_owners_;
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  v106 = (uint64_t *)operator new();
  *(_QWORD *)&v321 = &off_1E42D37A8;
  *((_QWORD *)&v321 + 1) = this;
  *((_QWORD *)&v322 + 1) = &v321;
  v317 = &off_1E42D78B0;
  v320 = &v317;
  v106[1] = 0;
  v106[2] = 0;
  *v106 = 0;
  {
    v271 = operator new();
    *(_QWORD *)(v271 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v271 + 24) = "GeoGL";
    *(_OWORD *)(v271 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v271 = &off_1E42B5668;
    *(_QWORD *)(v271 + 8) = "GeoGL";
    *(_OWORD *)(v271 + 72) = 0u;
    *(_OWORD *)(v271 + 88) = 0u;
    *(_OWORD *)(v271 + 104) = 0u;
    *(_OWORD *)(v271 + 120) = 0u;
    *(_OWORD *)(v271 + 136) = 0u;
    *(_OWORD *)(v271 + 152) = 0u;
    *(_OWORD *)(v271 + 168) = 0u;
    *(_OWORD *)(v271 + 184) = 0u;
    *(_OWORD *)(v271 + 200) = 0u;
    *(_OWORD *)(v271 + 216) = 0u;
    *(_OWORD *)(v271 + 232) = 0u;
    *(_QWORD *)(v271 + 248) = 0;
    *(_OWORD *)(v271 + 56) = 0u;
    v272 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v271 + 56), 0);
    if ((_DWORD)v272)
      geo::read_write_lock::logFailure(v272, (uint64_t)"initialization", v273);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v271 + 48) = zone;
    malloc_set_zone_name(zone, "GeoGL");
    *(_QWORD *)(v271 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v271;
  }
  v108 = ggl::Allocator::instance(void)::alloc;
  v106[4] = 0;
  v106[3] = v108;
  v106[5] = 0;
  v106[6] = 0;
  {
    v275 = operator new();
    *(_QWORD *)(v275 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v275 + 24) = "GeoGL";
    *(_OWORD *)(v275 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v275 = &off_1E42B5668;
    *(_QWORD *)(v275 + 8) = "GeoGL";
    *(_OWORD *)(v275 + 72) = 0u;
    *(_OWORD *)(v275 + 88) = 0u;
    *(_OWORD *)(v275 + 104) = 0u;
    *(_OWORD *)(v275 + 120) = 0u;
    *(_OWORD *)(v275 + 136) = 0u;
    *(_OWORD *)(v275 + 152) = 0u;
    *(_OWORD *)(v275 + 168) = 0u;
    *(_OWORD *)(v275 + 184) = 0u;
    *(_OWORD *)(v275 + 200) = 0u;
    *(_OWORD *)(v275 + 216) = 0u;
    *(_OWORD *)(v275 + 232) = 0u;
    *(_QWORD *)(v275 + 248) = 0;
    *(_OWORD *)(v275 + 56) = 0u;
    v276 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v275 + 56), 0);
    if ((_DWORD)v276)
      geo::read_write_lock::logFailure(v276, (uint64_t)"initialization", v277);
    v278 = malloc_create_zone(0, 0);
    *(_QWORD *)(v275 + 48) = v278;
    malloc_set_zone_name(v278, "GeoGL");
    *(_QWORD *)(v275 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v275;
  }
  v106[7] = ggl::Allocator::instance(void)::alloc;
  if (!*((_QWORD *)&v322 + 1))
  {
    v106[11] = 0;
    v109 = v320;
    if (v320)
      goto LABEL_136;
    goto LABEL_139;
  }
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v106[11] = (uint64_t)(v106 + 8);
    (*(void (**)(__int128 *))(v321 + 24))(&v321);
    v109 = v320;
    if (v320)
      goto LABEL_136;
LABEL_139:
    v106[15] = 0;
    goto LABEL_141;
  }
  v106[11] = (*(uint64_t (**)(void))(**((_QWORD **)&v322 + 1) + 16))();
  v109 = v320;
  if (!v320)
    goto LABEL_139;
LABEL_136:
  if (v109 == &v317)
  {
    v106[15] = (uint64_t)(v106 + 12);
    ((void (*)(uint64_t, _QWORD *))v317[3])((uint64_t)&v317, v106 + 12);
  }
  else
  {
    v106[15] = ((uint64_t (*)(uint64_t (***)()))(*v109)[2])(v109);
  }
LABEL_141:
  v106[16] = 2000;
  if ((unint64_t)(v106[2] - *v106) > 0x31F)
    goto LABEL_154;
  v110 = v106[1] - *v106;
  v111 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v106[3] + 16))(v106[3], 800, 8);
  v112 = v111 + (v110 & 0xFFFFFFFFFFFFFFF8);
  v114 = *v106;
  v113 = v106[1];
  v115 = v113 - *v106;
  if (v113 == *v106)
  {
    v117 = v111 + (v110 & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_152;
  }
  v116 = v115 - 8;
  if ((unint64_t)(v115 - 8) >= 0x58)
  {
    v117 = v111 + (v110 & 0xFFFFFFFFFFFFFFF8);
    if (v113 - (v110 & 0xFFFFFFFFFFFFFFF8) - v111 >= 0x20)
    {
      v118 = (v116 >> 3) + 1;
      v119 = (_OWORD *)(v111 + 8 * (v110 >> 3) - 16);
      v120 = (__int128 *)(v113 - 16);
      v121 = v118 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v122 = *v120;
        *(v119 - 1) = *(v120 - 1);
        *v119 = v122;
        v119 -= 2;
        v120 -= 2;
        v121 -= 4;
      }
      while (v121);
      v117 = v112 - 8 * (v118 & 0x3FFFFFFFFFFFFFFCLL);
      v113 -= 8 * (v118 & 0x3FFFFFFFFFFFFFFCLL);
      if (v118 == (v118 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_151;
    }
  }
  else
  {
    v117 = v111 + (v110 & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v123 = *(_QWORD *)(v113 - 8);
    v113 -= 8;
    *(_QWORD *)(v117 - 8) = v123;
    v117 -= 8;
  }
  while (v113 != v114);
LABEL_151:
  v113 = *v106;
LABEL_152:
  *v106 = v117;
  v106[1] = v112;
  v124 = v106[2];
  v106[2] = v111 + 800;
  if (v113)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v106[3] + 40))(v106[3], v113, v124 - v113);
LABEL_154:
  v125 = v106[4];
  if ((unint64_t)(v106[6] - v125) > 0x31F)
    goto LABEL_167;
  v126 = v106[5] - v125;
  v127 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v106[7] + 16))(v106[7], 800, 8);
  v128 = v127 + (v126 & 0xFFFFFFFFFFFFFFF8);
  v130 = v106[4];
  v129 = v106[5];
  v131 = v129 - v130;
  if (v129 == v130)
  {
    v133 = v127 + (v126 & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_165;
  }
  v132 = v131 - 8;
  if ((unint64_t)(v131 - 8) >= 0x58)
  {
    v133 = v127 + (v126 & 0xFFFFFFFFFFFFFFF8);
    if (v129 - (v126 & 0xFFFFFFFFFFFFFFF8) - v127 >= 0x20)
    {
      v134 = (v132 >> 3) + 1;
      v135 = (_OWORD *)(v127 + 8 * (v126 >> 3) - 16);
      v136 = (__int128 *)(v129 - 16);
      v137 = v134 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v138 = *v136;
        *(v135 - 1) = *(v136 - 1);
        *v135 = v138;
        v135 -= 2;
        v136 -= 2;
        v137 -= 4;
      }
      while (v137);
      v133 = v128 - 8 * (v134 & 0x3FFFFFFFFFFFFFFCLL);
      v129 -= 8 * (v134 & 0x3FFFFFFFFFFFFFFCLL);
      if (v134 == (v134 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_164;
    }
  }
  else
  {
    v133 = v127 + (v126 & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v139 = *(_QWORD *)(v129 - 8);
    v129 -= 8;
    *(_QWORD *)(v133 - 8) = v139;
    v133 -= 8;
  }
  while (v129 != v130);
LABEL_164:
  v129 = v106[4];
LABEL_165:
  v106[4] = v133;
  v106[5] = v128;
  v140 = v106[6];
  v106[6] = v127 + 800;
  if (v129)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v106[7] + 40))(v106[7], v129, v140 - v129);
LABEL_167:
  v141 = *(_QWORD *)this;
  *(_QWORD *)this = v106;
  if (v141)
  {
    v142 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v141);
    MEMORY[0x1A1AF4E00](v142, 0x10A0C40D234DDC7);
  }
  v143 = v320;
  if (v320 == &v317)
  {
    v144 = 4;
    v143 = &v317;
  }
  else
  {
    if (!v320)
      goto LABEL_174;
    v144 = 5;
  }
  (*v143)[v144]();
LABEL_174:
  v145 = (__int128 *)*((_QWORD *)&v322 + 1);
  if (*((__int128 **)&v322 + 1) == &v321)
  {
    v146 = 4;
    v145 = &v321;
    goto LABEL_178;
  }
  if (*((_QWORD *)&v322 + 1))
  {
    v146 = 5;
LABEL_178:
    (*(void (**)(void))(*(_QWORD *)v145 + 8 * v146))();
  }
  v147 = (uint64_t *)operator new();
  v316 = v315;
  v313[0] = &off_1E42D7940;
  v314 = v313;
  v315[0] = &off_1E42D37F0;
  v147[1] = 0;
  v147[2] = 0;
  *v147 = 0;
  {
    v279 = operator new();
    *(_QWORD *)(v279 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v279 + 24) = "GeoGL";
    *(_OWORD *)(v279 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v279 = &off_1E42B5668;
    *(_QWORD *)(v279 + 8) = "GeoGL";
    *(_OWORD *)(v279 + 72) = 0u;
    *(_OWORD *)(v279 + 88) = 0u;
    *(_OWORD *)(v279 + 104) = 0u;
    *(_OWORD *)(v279 + 120) = 0u;
    *(_OWORD *)(v279 + 136) = 0u;
    *(_OWORD *)(v279 + 152) = 0u;
    *(_OWORD *)(v279 + 168) = 0u;
    *(_OWORD *)(v279 + 184) = 0u;
    *(_OWORD *)(v279 + 200) = 0u;
    *(_OWORD *)(v279 + 216) = 0u;
    *(_OWORD *)(v279 + 232) = 0u;
    *(_QWORD *)(v279 + 248) = 0;
    *(_OWORD *)(v279 + 56) = 0u;
    v280 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v279 + 56), 0);
    if ((_DWORD)v280)
      geo::read_write_lock::logFailure(v280, (uint64_t)"initialization", v281);
    v282 = malloc_create_zone(0, 0);
    *(_QWORD *)(v279 + 48) = v282;
    malloc_set_zone_name(v282, "GeoGL");
    *(_QWORD *)(v279 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v279;
  }
  v149 = ggl::Allocator::instance(void)::alloc;
  v147[4] = 0;
  v147[3] = v149;
  v147[5] = 0;
  v147[6] = 0;
  {
    v283 = operator new();
    *(_QWORD *)(v283 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v283 + 24) = "GeoGL";
    *(_OWORD *)(v283 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v283 = &off_1E42B5668;
    *(_QWORD *)(v283 + 8) = "GeoGL";
    *(_OWORD *)(v283 + 72) = 0u;
    *(_OWORD *)(v283 + 88) = 0u;
    *(_OWORD *)(v283 + 104) = 0u;
    *(_OWORD *)(v283 + 120) = 0u;
    *(_OWORD *)(v283 + 136) = 0u;
    *(_OWORD *)(v283 + 152) = 0u;
    *(_OWORD *)(v283 + 168) = 0u;
    *(_OWORD *)(v283 + 184) = 0u;
    *(_OWORD *)(v283 + 200) = 0u;
    *(_OWORD *)(v283 + 216) = 0u;
    *(_OWORD *)(v283 + 232) = 0u;
    *(_QWORD *)(v283 + 248) = 0;
    *(_OWORD *)(v283 + 56) = 0u;
    v284 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v283 + 56), 0);
    if ((_DWORD)v284)
      geo::read_write_lock::logFailure(v284, (uint64_t)"initialization", v285);
    v286 = malloc_create_zone(0, 0);
    *(_QWORD *)(v283 + 48) = v286;
    malloc_set_zone_name(v286, "GeoGL");
    *(_QWORD *)(v283 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v283;
  }
  v147[7] = ggl::Allocator::instance(void)::alloc;
  if (!v316)
  {
    v147[11] = 0;
    v150 = v314;
    if (v314)
      goto LABEL_186;
    goto LABEL_189;
  }
  if (v316 == v315)
  {
    v147[11] = (uint64_t)(v147 + 8);
    (*(void (**)(_QWORD *))(v315[0] + 24))(v315);
    v150 = v314;
    if (v314)
      goto LABEL_186;
LABEL_189:
    v147[15] = 0;
    goto LABEL_191;
  }
  v147[11] = (*(uint64_t (**)(void))(*v316 + 16))();
  v150 = v314;
  if (!v314)
    goto LABEL_189;
LABEL_186:
  if (v150 == v313)
  {
    v147[15] = (uint64_t)(v147 + 12);
    (*(void (**)(uint64_t, _QWORD *))(v313[0] + 24))((uint64_t)v313, v147 + 12);
  }
  else
  {
    v147[15] = (*(uint64_t (**)(_QWORD *))(*v150 + 16))(v150);
  }
LABEL_191:
  v147[16] = 2000;
  if ((unint64_t)(v147[2] - *v147) > 0x31F)
    goto LABEL_204;
  v151 = v147[1] - *v147;
  v152 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v147[3] + 16))(v147[3], 800, 8);
  v153 = v152 + (v151 & 0xFFFFFFFFFFFFFFF8);
  v155 = *v147;
  v154 = v147[1];
  v156 = v154 - *v147;
  if (v154 == *v147)
  {
    v158 = v152 + (v151 & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_202;
  }
  v157 = v156 - 8;
  if ((unint64_t)(v156 - 8) >= 0x58)
  {
    v158 = v152 + (v151 & 0xFFFFFFFFFFFFFFF8);
    if (v154 - v158 >= 0x20)
    {
      v159 = (v157 >> 3) + 1;
      v160 = (_OWORD *)(v152 + 8 * (v151 >> 3) - 16);
      v161 = (__int128 *)(v154 - 16);
      v162 = v159 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v163 = *v161;
        *(v160 - 1) = *(v161 - 1);
        *v160 = v163;
        v160 -= 2;
        v161 -= 2;
        v162 -= 4;
      }
      while (v162);
      v158 = v153 - 8 * (v159 & 0x3FFFFFFFFFFFFFFCLL);
      v154 -= 8 * (v159 & 0x3FFFFFFFFFFFFFFCLL);
      if (v159 == (v159 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_201;
    }
  }
  else
  {
    v158 = v152 + (v151 & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v164 = *(_QWORD *)(v154 - 8);
    v154 -= 8;
    *(_QWORD *)(v158 - 8) = v164;
    v158 -= 8;
  }
  while (v154 != v155);
LABEL_201:
  v154 = *v147;
LABEL_202:
  *v147 = v158;
  v147[1] = v153;
  v165 = v147[2];
  v147[2] = v152 + 800;
  if (v154)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v147[3] + 40))(v147[3], v154, v165 - v154);
LABEL_204:
  v166 = v147[4];
  if ((unint64_t)(v147[6] - v166) > 0x31F)
    goto LABEL_217;
  v167 = v147[5] - v166;
  v168 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v147[7] + 16))(v147[7], 800, 8);
  v169 = v168 + (v167 & 0xFFFFFFFFFFFFFFF8);
  v171 = v147[4];
  v170 = v147[5];
  v172 = v170 - v171;
  if (v170 == v171)
  {
    v174 = v168 + (v167 & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_215;
  }
  v173 = v172 - 8;
  if ((unint64_t)(v172 - 8) >= 0x58)
  {
    v174 = v168 + (v167 & 0xFFFFFFFFFFFFFFF8);
    if (v170 - (v167 & 0xFFFFFFFFFFFFFFF8) - v168 >= 0x20)
    {
      v175 = (v173 >> 3) + 1;
      v176 = (_OWORD *)(v168 + 8 * (v167 >> 3) - 16);
      v177 = (__int128 *)(v170 - 16);
      v178 = v175 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v179 = *v177;
        *(v176 - 1) = *(v177 - 1);
        *v176 = v179;
        v176 -= 2;
        v177 -= 2;
        v178 -= 4;
      }
      while (v178);
      v174 = v169 - 8 * (v175 & 0x3FFFFFFFFFFFFFFCLL);
      v170 -= 8 * (v175 & 0x3FFFFFFFFFFFFFFCLL);
      if (v175 == (v175 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_214;
    }
  }
  else
  {
    v174 = v168 + (v167 & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v180 = *(_QWORD *)(v170 - 8);
    v170 -= 8;
    *(_QWORD *)(v174 - 8) = v180;
    v174 -= 8;
  }
  while (v170 != v171);
LABEL_214:
  v170 = v147[4];
LABEL_215:
  v147[4] = v174;
  v147[5] = v169;
  v181 = v147[6];
  v147[6] = v168 + 800;
  if (v170)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v147[7] + 40))(v147[7], v170, v181 - v170);
LABEL_217:
  v182 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v147;
  if (v182)
  {
    v183 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v182);
    MEMORY[0x1A1AF4E00](v183, 0x10A0C40D234DDC7);
  }
  v184 = v314;
  if (v314 == v313)
  {
    v185 = 4;
    v184 = v313;
  }
  else
  {
    if (!v314)
      goto LABEL_224;
    v185 = 5;
  }
  (*(void (**)(void))(*v184 + 8 * v185))();
LABEL_224:
  v186 = v316;
  if (v316 == v315)
  {
    v187 = 4;
    v186 = v315;
    goto LABEL_228;
  }
  if (v316)
  {
    v187 = 5;
LABEL_228:
    (*(void (**)(void))(*v186 + 8 * v187))();
  }
  v188 = (uint64_t *)operator new();
  v312 = v311;
  v309[0] = &off_1E42D7868;
  v310 = v309;
  v311[0] = &off_1E42D3838;
  v188[1] = 0;
  v188[2] = 0;
  *v188 = 0;
  {
    v287 = operator new();
    *(_QWORD *)(v287 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v287 + 24) = "GeoGL";
    *(_OWORD *)(v287 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v287 = &off_1E42B5668;
    *(_QWORD *)(v287 + 8) = "GeoGL";
    *(_OWORD *)(v287 + 72) = 0u;
    *(_OWORD *)(v287 + 88) = 0u;
    *(_OWORD *)(v287 + 104) = 0u;
    *(_OWORD *)(v287 + 120) = 0u;
    *(_OWORD *)(v287 + 136) = 0u;
    *(_OWORD *)(v287 + 152) = 0u;
    *(_OWORD *)(v287 + 168) = 0u;
    *(_OWORD *)(v287 + 184) = 0u;
    *(_OWORD *)(v287 + 200) = 0u;
    *(_OWORD *)(v287 + 216) = 0u;
    *(_OWORD *)(v287 + 232) = 0u;
    *(_QWORD *)(v287 + 248) = 0;
    *(_OWORD *)(v287 + 56) = 0u;
    v288 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v287 + 56), 0);
    if ((_DWORD)v288)
      geo::read_write_lock::logFailure(v288, (uint64_t)"initialization", v289);
    v290 = malloc_create_zone(0, 0);
    *(_QWORD *)(v287 + 48) = v290;
    malloc_set_zone_name(v290, "GeoGL");
    *(_QWORD *)(v287 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v287;
  }
  v190 = ggl::Allocator::instance(void)::alloc;
  v188[4] = 0;
  v188[3] = v190;
  v188[5] = 0;
  v188[6] = 0;
  {
    v291 = operator new();
    *(_QWORD *)(v291 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v291 + 24) = "GeoGL";
    *(_OWORD *)(v291 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v291 = &off_1E42B5668;
    *(_QWORD *)(v291 + 8) = "GeoGL";
    *(_OWORD *)(v291 + 72) = 0u;
    *(_OWORD *)(v291 + 88) = 0u;
    *(_OWORD *)(v291 + 104) = 0u;
    *(_OWORD *)(v291 + 120) = 0u;
    *(_OWORD *)(v291 + 136) = 0u;
    *(_OWORD *)(v291 + 152) = 0u;
    *(_OWORD *)(v291 + 168) = 0u;
    *(_OWORD *)(v291 + 184) = 0u;
    *(_OWORD *)(v291 + 200) = 0u;
    *(_OWORD *)(v291 + 216) = 0u;
    *(_OWORD *)(v291 + 232) = 0u;
    *(_QWORD *)(v291 + 248) = 0;
    *(_OWORD *)(v291 + 56) = 0u;
    v292 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v291 + 56), 0);
    if ((_DWORD)v292)
      geo::read_write_lock::logFailure(v292, (uint64_t)"initialization", v293);
    v294 = malloc_create_zone(0, 0);
    *(_QWORD *)(v291 + 48) = v294;
    malloc_set_zone_name(v294, "GeoGL");
    *(_QWORD *)(v291 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v291;
  }
  v188[7] = ggl::Allocator::instance(void)::alloc;
  if (!v312)
  {
    v188[11] = 0;
    v191 = v310;
    if (v310)
      goto LABEL_236;
    goto LABEL_239;
  }
  if (v312 == v311)
  {
    v188[11] = (uint64_t)(v188 + 8);
    (*(void (**)(_QWORD *))(v311[0] + 24))(v311);
    v191 = v310;
    if (v310)
      goto LABEL_236;
LABEL_239:
    v188[15] = 0;
    goto LABEL_241;
  }
  v188[11] = (*(uint64_t (**)(void))(*v312 + 16))();
  v191 = v310;
  if (!v310)
    goto LABEL_239;
LABEL_236:
  if (v191 == v309)
  {
    v188[15] = (uint64_t)(v188 + 12);
    (*(void (**)(uint64_t, _QWORD *))(v309[0] + 24))((uint64_t)v309, v188 + 12);
  }
  else
  {
    v188[15] = (*(uint64_t (**)(_QWORD *))(*v191 + 16))(v191);
  }
LABEL_241:
  v188[16] = 2000;
  if ((unint64_t)(v188[2] - *v188) > 0x31F)
    goto LABEL_254;
  v192 = v188[1] - *v188;
  v193 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v188[3] + 16))(v188[3], 800, 8);
  v194 = v193 + (v192 & 0xFFFFFFFFFFFFFFF8);
  v196 = *v188;
  v195 = v188[1];
  v197 = v195 - *v188;
  if (v195 == *v188)
  {
    v199 = v193 + (v192 & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_252;
  }
  v198 = v197 - 8;
  if ((unint64_t)(v197 - 8) >= 0x58)
  {
    v199 = v193 + (v192 & 0xFFFFFFFFFFFFFFF8);
    if (v195 - v199 >= 0x20)
    {
      v200 = (v198 >> 3) + 1;
      v201 = (_OWORD *)(v193 + 8 * (v192 >> 3) - 16);
      v202 = (__int128 *)(v195 - 16);
      v203 = v200 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v204 = *v202;
        *(v201 - 1) = *(v202 - 1);
        *v201 = v204;
        v201 -= 2;
        v202 -= 2;
        v203 -= 4;
      }
      while (v203);
      v199 = v194 - 8 * (v200 & 0x3FFFFFFFFFFFFFFCLL);
      v195 -= 8 * (v200 & 0x3FFFFFFFFFFFFFFCLL);
      if (v200 == (v200 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_251;
    }
  }
  else
  {
    v199 = v193 + (v192 & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v205 = *(_QWORD *)(v195 - 8);
    v195 -= 8;
    *(_QWORD *)(v199 - 8) = v205;
    v199 -= 8;
  }
  while (v195 != v196);
LABEL_251:
  v195 = *v188;
LABEL_252:
  *v188 = v199;
  v188[1] = v194;
  v206 = v188[2];
  v188[2] = v193 + 800;
  if (v195)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v188[3] + 40))(v188[3], v195, v206 - v195);
LABEL_254:
  v207 = v188[4];
  if ((unint64_t)(v188[6] - v207) > 0x31F)
    goto LABEL_267;
  v208 = v188[5] - v207;
  v209 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v188[7] + 16))(v188[7], 800, 8);
  v210 = v209 + (v208 & 0xFFFFFFFFFFFFFFF8);
  v212 = v188[4];
  v211 = v188[5];
  v213 = v211 - v212;
  if (v211 == v212)
  {
    v215 = v209 + (v208 & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_265;
  }
  v214 = v213 - 8;
  if ((unint64_t)(v213 - 8) >= 0x58)
  {
    v215 = v209 + (v208 & 0xFFFFFFFFFFFFFFF8);
    if (v211 - (v208 & 0xFFFFFFFFFFFFFFF8) - v209 >= 0x20)
    {
      v216 = (v214 >> 3) + 1;
      v217 = (_OWORD *)(v209 + 8 * (v208 >> 3) - 16);
      v218 = (__int128 *)(v211 - 16);
      v219 = v216 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v220 = *v218;
        *(v217 - 1) = *(v218 - 1);
        *v217 = v220;
        v217 -= 2;
        v218 -= 2;
        v219 -= 4;
      }
      while (v219);
      v215 = v210 - 8 * (v216 & 0x3FFFFFFFFFFFFFFCLL);
      v211 -= 8 * (v216 & 0x3FFFFFFFFFFFFFFCLL);
      if (v216 == (v216 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_264;
    }
  }
  else
  {
    v215 = v209 + (v208 & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v221 = *(_QWORD *)(v211 - 8);
    v211 -= 8;
    *(_QWORD *)(v215 - 8) = v221;
    v215 -= 8;
  }
  while (v211 != v212);
LABEL_264:
  v211 = v188[4];
LABEL_265:
  v188[4] = v215;
  v188[5] = v210;
  v222 = v188[6];
  v188[6] = v209 + 800;
  if (v211)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v188[7] + 40))(v188[7], v211, v222 - v211);
LABEL_267:
  v223 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v188;
  if (v223)
  {
    v224 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v223);
    MEMORY[0x1A1AF4E00](v224, 0x10A0C40D234DDC7);
  }
  v225 = v310;
  if (v310 == v309)
  {
    v226 = 4;
    v225 = v309;
  }
  else
  {
    if (!v310)
      goto LABEL_274;
    v226 = 5;
  }
  (*(void (**)(void))(*v225 + 8 * v226))();
LABEL_274:
  v227 = v312;
  if (v312 == v311)
  {
    v228 = 4;
    v227 = v311;
    goto LABEL_278;
  }
  if (v312)
  {
    v228 = 5;
LABEL_278:
    (*(void (**)(void))(*v227 + 8 * v228))();
  }
  v229 = (uint64_t *)operator new();
  v308 = v307;
  v305[0] = &off_1E42D78F8;
  v306 = v305;
  v307[0] = &off_1E42D3880;
  v229[1] = 0;
  v229[2] = 0;
  *v229 = 0;
  {
    v295 = operator new();
    *(_QWORD *)(v295 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v295 + 24) = "GeoGL";
    *(_OWORD *)(v295 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v295 = &off_1E42B5668;
    *(_QWORD *)(v295 + 8) = "GeoGL";
    *(_OWORD *)(v295 + 72) = 0u;
    *(_OWORD *)(v295 + 88) = 0u;
    *(_OWORD *)(v295 + 104) = 0u;
    *(_OWORD *)(v295 + 120) = 0u;
    *(_OWORD *)(v295 + 136) = 0u;
    *(_OWORD *)(v295 + 152) = 0u;
    *(_OWORD *)(v295 + 168) = 0u;
    *(_OWORD *)(v295 + 184) = 0u;
    *(_OWORD *)(v295 + 200) = 0u;
    *(_OWORD *)(v295 + 216) = 0u;
    *(_OWORD *)(v295 + 232) = 0u;
    *(_QWORD *)(v295 + 248) = 0;
    *(_OWORD *)(v295 + 56) = 0u;
    v296 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v295 + 56), 0);
    if ((_DWORD)v296)
      geo::read_write_lock::logFailure(v296, (uint64_t)"initialization", v297);
    v298 = malloc_create_zone(0, 0);
    *(_QWORD *)(v295 + 48) = v298;
    malloc_set_zone_name(v298, "GeoGL");
    *(_QWORD *)(v295 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v295;
  }
  v231 = ggl::Allocator::instance(void)::alloc;
  v229[4] = 0;
  v229[3] = v231;
  v229[5] = 0;
  v229[6] = 0;
  {
    v299 = operator new();
    *(_QWORD *)(v299 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v299 + 24) = "GeoGL";
    *(_OWORD *)(v299 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v299 = &off_1E42B5668;
    *(_QWORD *)(v299 + 8) = "GeoGL";
    *(_OWORD *)(v299 + 72) = 0u;
    *(_OWORD *)(v299 + 88) = 0u;
    *(_OWORD *)(v299 + 104) = 0u;
    *(_OWORD *)(v299 + 120) = 0u;
    *(_OWORD *)(v299 + 136) = 0u;
    *(_OWORD *)(v299 + 152) = 0u;
    *(_OWORD *)(v299 + 168) = 0u;
    *(_OWORD *)(v299 + 184) = 0u;
    *(_OWORD *)(v299 + 200) = 0u;
    *(_OWORD *)(v299 + 216) = 0u;
    *(_OWORD *)(v299 + 232) = 0u;
    *(_QWORD *)(v299 + 248) = 0;
    *(_OWORD *)(v299 + 56) = 0u;
    v300 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v299 + 56), 0);
    if ((_DWORD)v300)
      geo::read_write_lock::logFailure(v300, (uint64_t)"initialization", v301);
    v302 = malloc_create_zone(0, 0);
    *(_QWORD *)(v299 + 48) = v302;
    malloc_set_zone_name(v302, "GeoGL");
    *(_QWORD *)(v299 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v299;
  }
  v229[7] = ggl::Allocator::instance(void)::alloc;
  if (!v308)
  {
    v229[11] = 0;
    v232 = v306;
    if (v306)
      goto LABEL_286;
    goto LABEL_289;
  }
  if (v308 == v307)
  {
    v229[11] = (uint64_t)(v229 + 8);
    (*(void (**)(_QWORD *))(v307[0] + 24))(v307);
    v232 = v306;
    if (v306)
      goto LABEL_286;
LABEL_289:
    v229[15] = 0;
    goto LABEL_291;
  }
  v229[11] = (*(uint64_t (**)(void))(*v308 + 16))();
  v232 = v306;
  if (!v306)
    goto LABEL_289;
LABEL_286:
  if (v232 == v305)
  {
    v229[15] = (uint64_t)(v229 + 12);
    (*(void (**)(uint64_t, _QWORD *))(v305[0] + 24))((uint64_t)v305, v229 + 12);
  }
  else
  {
    v229[15] = (*(uint64_t (**)(_QWORD *))(*v232 + 16))(v232);
  }
LABEL_291:
  v229[16] = 2000;
  if ((unint64_t)(v229[2] - *v229) > 0x31F)
    goto LABEL_304;
  v233 = v229[1] - *v229;
  v234 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v229[3] + 16))(v229[3], 800, 8);
  v235 = v234 + (v233 & 0xFFFFFFFFFFFFFFF8);
  v237 = *v229;
  v236 = v229[1];
  v238 = v236 - *v229;
  if (v236 == *v229)
  {
    v240 = v234 + (v233 & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_302;
  }
  v239 = v238 - 8;
  if ((unint64_t)(v238 - 8) >= 0x58)
  {
    v240 = v234 + (v233 & 0xFFFFFFFFFFFFFFF8);
    if (v236 - v240 >= 0x20)
    {
      v241 = (v239 >> 3) + 1;
      v242 = (_OWORD *)(v234 + 8 * (v233 >> 3) - 16);
      v243 = (__int128 *)(v236 - 16);
      v244 = v241 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v245 = *v243;
        *(v242 - 1) = *(v243 - 1);
        *v242 = v245;
        v242 -= 2;
        v243 -= 2;
        v244 -= 4;
      }
      while (v244);
      v240 = v235 - 8 * (v241 & 0x3FFFFFFFFFFFFFFCLL);
      v236 -= 8 * (v241 & 0x3FFFFFFFFFFFFFFCLL);
      if (v241 == (v241 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_301;
    }
  }
  else
  {
    v240 = v234 + (v233 & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v246 = *(_QWORD *)(v236 - 8);
    v236 -= 8;
    *(_QWORD *)(v240 - 8) = v246;
    v240 -= 8;
  }
  while (v236 != v237);
LABEL_301:
  v236 = *v229;
LABEL_302:
  *v229 = v240;
  v229[1] = v235;
  v247 = v229[2];
  v229[2] = v234 + 800;
  if (v236)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v229[3] + 40))(v229[3], v236, v247 - v236);
LABEL_304:
  v248 = v229[4];
  if ((unint64_t)(v229[6] - v248) > 0x31F)
    goto LABEL_317;
  v249 = v229[5] - v248;
  v250 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v229[7] + 16))(v229[7], 800, 8);
  v251 = v250 + (v249 & 0xFFFFFFFFFFFFFFF8);
  v253 = v229[4];
  v252 = v229[5];
  v254 = v252 - v253;
  if (v252 == v253)
  {
    v256 = v250 + (v249 & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_315;
  }
  v255 = v254 - 8;
  if ((unint64_t)(v254 - 8) >= 0x58)
  {
    v256 = v250 + (v249 & 0xFFFFFFFFFFFFFFF8);
    if (v252 - (v249 & 0xFFFFFFFFFFFFFFF8) - v250 >= 0x20)
    {
      v257 = (v255 >> 3) + 1;
      v258 = (_OWORD *)(v250 + 8 * (v249 >> 3) - 16);
      v259 = (__int128 *)(v252 - 16);
      v260 = v257 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v261 = *v259;
        *(v258 - 1) = *(v259 - 1);
        *v258 = v261;
        v258 -= 2;
        v259 -= 2;
        v260 -= 4;
      }
      while (v260);
      v256 = v251 - 8 * (v257 & 0x3FFFFFFFFFFFFFFCLL);
      v252 -= 8 * (v257 & 0x3FFFFFFFFFFFFFFCLL);
      if (v257 == (v257 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_314;
    }
  }
  else
  {
    v256 = v250 + (v249 & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v262 = *(_QWORD *)(v252 - 8);
    v252 -= 8;
    *(_QWORD *)(v256 - 8) = v262;
    v256 -= 8;
  }
  while (v252 != v253);
LABEL_314:
  v252 = v229[4];
LABEL_315:
  v229[4] = v256;
  v229[5] = v251;
  v263 = v229[6];
  v229[6] = v250 + 800;
  if (v252)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v229[7] + 40))(v229[7], v252, v263 - v252);
LABEL_317:
  v264 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = v229;
  if (v264)
  {
    v265 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v264);
    MEMORY[0x1A1AF4E00](v265, 0x10A0C40D234DDC7);
  }
  v266 = v306;
  if (v306 == v305)
  {
    v267 = 4;
    v266 = v305;
  }
  else
  {
    if (!v306)
      goto LABEL_324;
    v267 = 5;
  }
  (*(void (**)(void))(*v266 + 8 * v267))();
LABEL_324:
  v268 = v308;
  if (v308 == v307)
  {
    v269 = 4;
    v268 = v307;
    goto LABEL_328;
  }
  if (v308)
  {
    v269 = 5;
LABEL_328:
    (*(void (**)(void))(*v268 + 8 * v269))();
  }
  *((_BYTE *)this + 570) = 3;
  *((_BYTE *)this + 568) = 1;
  *((_BYTE *)this + 720) = 1;
  return this;
}

void md::SharedResourcesLogic::~SharedResourcesLogic(md::SharedResourcesLogic *this)
{
  *(_QWORD *)this = &off_1E429A4B8;
  *((_QWORD *)this + 15) = &off_1E42B4D50;

  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
}

{
  *(_QWORD *)this = &off_1E429A4B8;
  *((_QWORD *)this + 15) = &off_1E42B4D50;

  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::Logic<md::SharedResourcesLogic,md::SharedResourcesContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  _BYTE v4[2];

  if (*(_QWORD *)(a3 + 8) == 0xA60DDA5A69582425 && *(_QWORD *)(a3 + 32))
    return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)result + 160))(result, a2, v4);
  a4[23] = 0;
  *a4 = 0;
  return result;
}

uint64_t md::Logic<md::SharedResourcesLogic,md::SharedResourcesContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

void md::Logic<md::SharedResourcesLogic,md::SharedResourcesContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

void _ZNSt3__110__function6__funcIZN2md20SharedResourcesLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_22SharedResourcesContextEE3__1NS_9allocatorISH_EEFvvEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2md20SharedResourcesLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_22SharedResourcesContextEE3__1NS_9allocatorISH_EEFvvEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D0790;
  result[1] = v3;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md20SharedResourcesLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_22SharedResourcesContextEE3__0NS_9allocatorISH_EEFvvEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2md20SharedResourcesLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_22SharedResourcesContextEE3__0NS_9allocatorISH_EEFvvEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D0748;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2md20SharedResourcesLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_22SharedResourcesContextEE3__0NS_9allocatorISH_EEFvvEE7__cloneEPNS0_6__baseISK_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D0748;
  a2[1] = v2;
  return result;
}

_QWORD *gdc::ManagedObjectHolder<md::SharedResourcesContext>::~ManagedObjectHolder(_QWORD *a1)
{
  id *v2;

  *a1 = &off_1E42B11F8;
  v2 = (id *)a1[4];
  if (v2)
  {

    MEMORY[0x1A1AF4E00](v2, 0x80C40B8603338);
  }
  return a1;
}

void gdc::ManagedObjectHolder<md::SharedResourcesContext>::~ManagedObjectHolder(_QWORD *a1)
{
  id *v1;

  *a1 = &off_1E42B11F8;
  v1 = (id *)a1[4];
  if (v1)
  {

    MEMORY[0x1A1AF4E00](v1, 0x80C40B8603338);
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::SharedResourcesContext>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void karo::Loader::~Loader(karo::Loader *this)
{
  karo::Loader::~Loader(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;

  *(_QWORD *)this = &off_1E42C3588;
  v2 = *((_QWORD *)this + 4);
  v3 = (unint64_t)(*((_QWORD *)this + 5) - v2) >> 3;
  v4 = (v3 - 1);
  if ((int)v3 - 1 >= 0)
  {
    do
    {
      v6 = *(_QWORD *)(*((_QWORD *)this + 4) + 8 * v4);
      if (v6)
      {
        (*(void (**)(karo::Loader *, uint64_t))(*(_QWORD *)this + 48))(this, v6);
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
    }
    while (v4-- > 0);
    v2 = *((_QWORD *)this + 4);
  }
  *((_QWORD *)this + 5) = v2;
  pthread_mutex_destroy(*((pthread_mutex_t **)this + 11));
  v7 = *((_QWORD *)this + 11);
  if (v7)
    MEMORY[0x1A1AF4E00](v7, 0x1000C40FA0F61DDLL);
  *((_QWORD *)this + 11) = 0;
  std::__tree<std::__value_type<std::string,std::vector<unsigned char>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned char>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned char>>>>::destroy(*((char **)this + 8));
  v8 = (void *)*((_QWORD *)this + 4);
  if (v8)
  {
    *((_QWORD *)this + 5) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 1);
  if (v9)
  {
    *((_QWORD *)this + 2) = v9;
    operator delete(v9);
  }
}

_QWORD *karo::Loader::unloadScene(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v1 = this;
  v2 = (this[5] - this[4]) >> 3;
  v3 = (v2 - 1);
  if ((int)v2 - 1 >= 0)
  {
    do
    {
      v6 = *(_QWORD *)(v1[4] + 8 * v3);
      this = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*v1 + 48))(v1, v6);
      if (v6)
        this = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    }
    while (v3-- > 0);
  }
  if ((int)(((v1[2] - v1[1]) >> 3) - 1) >= 0)
  {
    v4 = 8 * (((v1[2] - v1[1]) >> 3) - 1);
    do
    {
      this = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD))(*v1 + 48))(v1, *(_QWORD *)(v1[1] + v4));
      v4 -= 8;
    }
    while (v4 != -8);
  }
  return this;
}

uint64_t karo::Loader::manage(pthread_mutex_t **this, karo::Item *a2)
{
  karo::Item **v4;
  karo::Item **v5;
  karo::Item **v6;
  karo::Item **v7;
  NSObject *v8;
  _QWORD *v9;
  pthread_mutex_t *v10;
  pthread_mutex_t *opaque;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  pthread_mutex_t *v18;
  pthread_mutex_t *v19;
  unint64_t v20;
  _OWORD *v21;
  karo::Item **v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  int v27;
  _QWORD *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  pthread_mutex_lock(this[11]);
  v4 = (karo::Item **)this[4];
  v5 = (karo::Item **)this[5];
  v6 = v5;
  v7 = v4;
  if (v4 != v5)
  {
    while (*v7 != a2)
    {
      if (++v7 == v5)
      {
        v7 = (karo::Item **)this[5];
        break;
      }
    }
  }
  if (v7 == v5)
  {
    v10 = this[6];
    if (v5 >= (karo::Item **)v10)
    {
      v12 = (char *)v5 - (char *)v4;
      v13 = v5 - v4;
      v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 61)
        abort();
      v15 = (char *)v10 - (char *)v4;
      if (v15 >> 2 > v14)
        v14 = v15 >> 2;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
        v16 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
      {
        if (v16 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v17 = operator new(8 * v16);
      }
      else
      {
        v17 = 0;
      }
      v18 = (pthread_mutex_t *)&v17[8 * v13];
      v19 = (pthread_mutex_t *)&v17[8 * v16];
      v18->__sig = (uint64_t)a2;
      opaque = (pthread_mutex_t *)v18->__opaque;
      if (v4 != v5)
      {
        if ((unint64_t)(v12 - 8) < 0x58)
          goto LABEL_41;
        if ((unint64_t)((char *)v4 - v17) < 0x20)
          goto LABEL_41;
        v20 = ((unint64_t)(v12 - 8) >> 3) + 1;
        v6 = &v5[-(v20 & 0x3FFFFFFFFFFFFFFCLL)];
        v21 = &v17[8 * v13 - 16];
        v22 = v5 - 2;
        v23 = v20 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v24 = *(_OWORD *)v22;
          *(v21 - 1) = *((_OWORD *)v22 - 1);
          *v21 = v24;
          v21 -= 2;
          v22 -= 4;
          v23 -= 4;
        }
        while (v23);
        v18 = (pthread_mutex_t *)((char *)v18 - 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL));
        if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_41:
          do
          {
            v25 = (uint64_t)*--v6;
            *(_QWORD *)&v18[-1].__opaque[48] = v25;
            v18 = (pthread_mutex_t *)((char *)v18 - 8);
          }
          while (v6 != v4);
          v4 = (karo::Item **)this[4];
        }
      }
      this[4] = v18;
      this[5] = opaque;
      this[6] = v19;
      if (v4)
        operator delete(v4);
    }
    else
    {
      *v5 = a2;
      opaque = (pthread_mutex_t *)(v5 + 1);
    }
    this[5] = opaque;
  }
  else
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v8 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      v9 = (_QWORD *)((char *)a2 + 8);
      if (*((char *)a2 + 31) < 0)
        v9 = (_QWORD *)*v9;
      v27 = 136315138;
      v28 = v9;
      _os_log_impl(&dword_19F029000, v8, OS_LOG_TYPE_INFO, "This item is already managed, skipping add: %s", (uint8_t *)&v27, 0xCu);
    }

  }
  return pthread_mutex_unlock(this[11]);
}

void sub_19FD47F30(_Unwind_Exception *a1)
{
  uint64_t v1;

  pthread_mutex_unlock(*(pthread_mutex_t **)(v1 + 88));
  _Unwind_Resume(a1);
}

uint64_t karo::Loader::unmanage(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  int64_t v6;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 88));
  v5 = *(char **)(a1 + 32);
  v4 = *(char **)(a1 + 40);
  if (v5 != v4)
  {
    while (*(_QWORD *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        v5 = *(char **)(a1 + 40);
        break;
      }
    }
  }
  if (v5 != v4)
  {
    v6 = v4 - (v5 + 8);
    if (v4 != v5 + 8)
      memmove(v5, v5 + 8, v4 - (v5 + 8));
    *(_QWORD *)(a1 + 40) = &v5[v6];
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 88));
}

uint64_t karo::Loader::insert(pthread_mutex_t **this, karo::Item *a2)
{
  karo::Item **v4;
  karo::Item **v5;
  karo::Item **v6;
  karo::Item **v7;
  NSObject *v8;
  _QWORD *v9;
  pthread_mutex_t *v10;
  pthread_mutex_t *opaque;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  pthread_mutex_t *v18;
  pthread_mutex_t *v19;
  unint64_t v20;
  _OWORD *v21;
  karo::Item **v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  int v27;
  _QWORD *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  pthread_mutex_lock(this[11]);
  v4 = (karo::Item **)this[1];
  v5 = (karo::Item **)this[2];
  v6 = v5;
  v7 = v4;
  if (v4 != v5)
  {
    while (*v7 != a2)
    {
      if (++v7 == v5)
      {
        v7 = (karo::Item **)this[2];
        break;
      }
    }
  }
  if (v7 == v5)
  {
    v10 = this[3];
    if (v5 >= (karo::Item **)v10)
    {
      v12 = (char *)v5 - (char *)v4;
      v13 = v5 - v4;
      v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 61)
        abort();
      v15 = (char *)v10 - (char *)v4;
      if (v15 >> 2 > v14)
        v14 = v15 >> 2;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
        v16 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
      {
        if (v16 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v17 = operator new(8 * v16);
      }
      else
      {
        v17 = 0;
      }
      v18 = (pthread_mutex_t *)&v17[8 * v13];
      v19 = (pthread_mutex_t *)&v17[8 * v16];
      v18->__sig = (uint64_t)a2;
      opaque = (pthread_mutex_t *)v18->__opaque;
      if (v4 != v5)
      {
        if ((unint64_t)(v12 - 8) < 0x58)
          goto LABEL_41;
        if ((unint64_t)((char *)v4 - v17) < 0x20)
          goto LABEL_41;
        v20 = ((unint64_t)(v12 - 8) >> 3) + 1;
        v6 = &v5[-(v20 & 0x3FFFFFFFFFFFFFFCLL)];
        v21 = &v17[8 * v13 - 16];
        v22 = v5 - 2;
        v23 = v20 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v24 = *(_OWORD *)v22;
          *(v21 - 1) = *((_OWORD *)v22 - 1);
          *v21 = v24;
          v21 -= 2;
          v22 -= 4;
          v23 -= 4;
        }
        while (v23);
        v18 = (pthread_mutex_t *)((char *)v18 - 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL));
        if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_41:
          do
          {
            v25 = (uint64_t)*--v6;
            *(_QWORD *)&v18[-1].__opaque[48] = v25;
            v18 = (pthread_mutex_t *)((char *)v18 - 8);
          }
          while (v6 != v4);
          v4 = (karo::Item **)this[1];
        }
      }
      this[1] = v18;
      this[2] = opaque;
      this[3] = v19;
      if (v4)
        operator delete(v4);
    }
    else
    {
      *v5 = a2;
      opaque = (pthread_mutex_t *)(v5 + 1);
    }
    this[2] = opaque;
  }
  else
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v8 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      v9 = (_QWORD *)((char *)a2 + 8);
      if (*((char *)a2 + 31) < 0)
        v9 = (_QWORD *)*v9;
      v27 = 136315138;
      v28 = v9;
      _os_log_impl(&dword_19F029000, v8, OS_LOG_TYPE_INFO, "This item already exist in mItems, skipping insert: %s", (uint8_t *)&v27, 0xCu);
    }

  }
  return pthread_mutex_unlock(this[11]);
}

void sub_19FD48230(_Unwind_Exception *a1)
{
  uint64_t v1;

  pthread_mutex_unlock(*(pthread_mutex_t **)(v1 + 88));
  _Unwind_Resume(a1);
}

uint64_t karo::Loader::remove(uint64_t this, karo::Item *a2)
{
  uint64_t v3;
  karo::Item **v4;
  karo::Item **v5;
  NSObject *v6;
  _QWORD *v7;
  karo::Item **v8;
  int64_t v9;
  karo::Item **v10;
  karo::Item **v11;
  int64_t v12;
  NSObject *v13;
  _QWORD *v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v3 = this;
    pthread_mutex_lock(*(pthread_mutex_t **)(this + 88));
    v5 = *(karo::Item ***)(v3 + 8);
    v4 = *(karo::Item ***)(v3 + 16);
    if (v5 != v4)
    {
      while (*v5 != a2)
      {
        if (++v5 == v4)
        {
          v5 = *(karo::Item ***)(v3 + 16);
          break;
        }
      }
    }
    if (v5 == v4)
    {
      if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
      v13 = (id)GEOGetVectorKitVKDefaultLog_log;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        v14 = (_QWORD *)((char *)a2 + 8);
        if (*((char *)a2 + 31) < 0)
          v14 = (_QWORD *)*v14;
        v15 = 136315138;
        v16 = v14;
        _os_log_impl(&dword_19F029000, v13, OS_LOG_TYPE_DEBUG, "This item is not added to loader %s", (uint8_t *)&v15, 0xCu);
      }

    }
    else
    {
      if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
      v6 = (id)GEOGetVectorKitVKDefaultLog_log;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        v7 = (_QWORD *)((char *)a2 + 8);
        if (*((char *)a2 + 31) < 0)
          v7 = (_QWORD *)*v7;
        v15 = 136315138;
        v16 = v7;
        _os_log_impl(&dword_19F029000, v6, OS_LOG_TYPE_DEBUG, "Removing item: %s", (uint8_t *)&v15, 0xCu);
      }

      v8 = *(karo::Item ***)(v3 + 16);
      v9 = (char *)v8 - (char *)(v5 + 1);
      if (v8 != v5 + 1)
        memmove(v5, v5 + 1, (char *)v8 - (char *)(v5 + 1));
      *(_QWORD *)(v3 + 16) = (char *)v5 + v9;
      v11 = *(karo::Item ***)(v3 + 32);
      v10 = *(karo::Item ***)(v3 + 40);
      if (v11 != v10)
      {
        while (*v11 != a2)
        {
          if (++v11 == v10)
          {
            v11 = *(karo::Item ***)(v3 + 40);
            break;
          }
        }
      }
      if (v11 != v10)
      {
        v12 = (char *)v10 - (char *)(v11 + 1);
        if (v10 != v11 + 1)
          memmove(v11, v11 + 1, (char *)v10 - (char *)(v11 + 1));
        *(_QWORD *)(v3 + 40) = (char *)v11 + v12;
      }
    }
    return pthread_mutex_unlock(*(pthread_mutex_t **)(v3 + 88));
  }
  return this;
}

uint64_t karo::Loader::initialize(karo::Loader *this)
{
  return 1;
}

uint64_t karo::Loader::uninitialize(karo::Loader *this)
{
  return (*(uint64_t (**)(karo::Loader *))(*(_QWORD *)this + 16))(this);
}

void sub_19FD48570(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;
  void *v4;

  karo::Mutex::~Mutex((pthread_mutex_t **)(v1 + 88));
  std::__tree<std::__value_type<std::string,std::vector<unsigned char>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned char>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned char>>>>::destroy(*(char **)(v1 + 64));
  v3 = *(void **)(v1 + 32);
  if (v3)
  {
    *(_QWORD *)(v1 + 40) = v3;
    operator delete(v3);
    v4 = *(void **)(v1 + 8);
    if (!v4)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else
  {
    v4 = *(void **)(v1 + 8);
    if (!v4)
      goto LABEL_3;
  }
  *(_QWORD *)(v1 + 16) = v4;
  operator delete(v4);
  _Unwind_Resume(a1);
}

uint64_t karo::Loader::getMemFile(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  std::string *p_p;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  char v9;
  std::string::size_type size;
  uint64_t *v11;
  int v12;
  uint64_t *v13;
  std::string::size_type v14;
  size_t v15;
  int v16;
  int v17;
  const void *v18;
  size_t v19;
  size_t v20;
  int v21;
  uint64_t v22;
  std::string __p;

  p_p = &__p;
  karo::util::Path::purify(&__p, a2);
  v8 = *(uint64_t **)(a1 + 64);
  v6 = (uint64_t *)(a1 + 64);
  v7 = v8;
  v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if (!v8)
    goto LABEL_36;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else
  {
    size = __p.__r_.__value_.__l.__size_;
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  v11 = v6;
  do
  {
    while (1)
    {
      v12 = *((char *)v7 + 55);
      v13 = v12 >= 0 ? v7 + 4 : (uint64_t *)v7[4];
      v14 = v12 >= 0 ? *((unsigned __int8 *)v7 + 55) : v7[5];
      v15 = size >= v14 ? v14 : size;
      v16 = memcmp(v13, p_p, v15);
      if (v16)
        break;
      if (v14 >= size)
        goto LABEL_20;
LABEL_6:
      v7 = (uint64_t *)v7[1];
      if (!v7)
        goto LABEL_21;
    }
    if (v16 < 0)
      goto LABEL_6;
LABEL_20:
    v11 = v7;
    v7 = (uint64_t *)*v7;
  }
  while (v7);
LABEL_21:
  if (v11 == v6)
    goto LABEL_36;
  v17 = *((char *)v11 + 55);
  if (v17 >= 0)
    v18 = v11 + 4;
  else
    v18 = (const void *)v11[4];
  if (v17 >= 0)
    v19 = *((unsigned __int8 *)v11 + 55);
  else
    v19 = v11[5];
  if (v19 >= size)
    v20 = size;
  else
    v20 = v19;
  v21 = memcmp(p_p, v18, v20);
  if (v21)
  {
    if ((v21 & 0x80000000) == 0)
      goto LABEL_33;
LABEL_36:
    v22 = 0;
    if (v9 < 0)
LABEL_37:
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    if (size < v19)
      goto LABEL_36;
LABEL_33:
    v22 = v11[7];
    *a3 = *((_DWORD *)v11 + 16) - v22;
    if (v9 < 0)
      goto LABEL_37;
  }
  return v22;
}

void md::TrafficTileData::~TrafficTileData(md::TrafficTileData *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  *(_QWORD *)this = &off_1E4290F58;
  *((_QWORD *)this + 79) = &unk_1E4290F98;
  v2 = *((_QWORD *)this + 94);
  if (v2)
  {
    *((_QWORD *)this + 95) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 97) + 40))(*((_QWORD *)this + 97), v2, *((_QWORD *)this + 96) - v2);
  }
  v3 = *((_QWORD *)this + 93);
  *((_QWORD *)this + 93) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 92);
  *((_QWORD *)this + 92) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 91);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  md::MapTileData::~MapTileData(this);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  *(_QWORD *)this = &off_1E4290F58;
  *((_QWORD *)this + 79) = &unk_1E4290F98;
  v2 = *((_QWORD *)this + 94);
  if (v2)
  {
    *((_QWORD *)this + 95) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 97) + 40))(*((_QWORD *)this + 97), v2, *((_QWORD *)this + 96) - v2);
  }
  v3 = *((_QWORD *)this + 93);
  *((_QWORD *)this + 93) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 92);
  *((_QWORD *)this + 92) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 91);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  md::MapTileData::~MapTileData(this);
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *md::TrafficTileData::TrafficTileData(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  gss::Allocator *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[2];

  v20[0] = 0;
  v20[1] = 0;
  v12 = (gss::Allocator *)md::MapTileData::MapTileData((uint64_t)a1, a2, a7, (uint64_t)v20, 1);
  v14 = *a3;
  v13 = a3[1];
  *(_QWORD *)v12 = &off_1E4290F58;
  *((_QWORD *)v12 + 79) = &unk_1E4290F98;
  *((_QWORD *)v12 + 90) = v14;
  *((_QWORD *)v12 + 91) = v13;
  if (v13)
  {
    v15 = (unint64_t *)(v13 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = *a4;
  *a4 = 0;
  a1[92] = v17;
  v18 = *a5;
  *a5 = 0;
  a1[93] = v18;
  a1[94] = 0;
  a1[96] = 0;
  a1[95] = 0;
  a1[97] = gss::Allocator::instance(v12);
  if (a1 + 94 != (_QWORD *)a6)
    std::vector<std::pair<gss::StyleAttribute,unsigned short>,geo::StdAllocator<std::pair<gss::StyleAttribute,unsigned short>,gss::Allocator>>::__assign_with_size[abi:nn180100]<std::pair<gss::StyleAttribute,unsigned short>*,std::pair<gss::StyleAttribute,unsigned short>*>(a1 + 94, *(_QWORD *)a6, *(_QWORD **)(a6 + 8), (uint64_t)(*(_QWORD *)(a6 + 8) - *(_QWORD *)a6) >> 3);
  return a1;
}

void sub_19FD48974(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 760) = v4;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1 + 776) + 40))(*(_QWORD *)(v1 + 776), v4, *(_QWORD *)(v1 + 768) - v4);
  }
  v5 = *(_QWORD *)(v1 + 744);
  *(_QWORD *)(v1 + 744) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *(_QWORD *)(v1 + 736);
  *(_QWORD *)(v1 + 736) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(std::__shared_weak_count **)(v1 + 728);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  md::MapTileData::~MapTileData((md::MapTileData *)v1);
  _Unwind_Resume(a1);
}

void md::NavRoadSign::~NavRoadSign(md::NavRoadSign *this)
{
  md::NavLabel::~NavLabel(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::NavRoadSign::type(md::NavRoadSign *this)
{
  return 0;
}

uint64_t md::NavRoadSign::NavRoadSign(uint64_t a1, void *a2, uint64_t *a3, void *a4, double a5, double a6, double a7)
{
  id v13;
  VKRoadSignArtwork *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  double v19;
  double v20;
  unint64_t *v21;
  unint64_t v22;
  int v23;
  int v24;
  std::__shared_weak_count *v25;
  unsigned __int8 v26;
  void (***v27)(md::NavRoadSignLabelPart *__hidden);
  uint64_t v28;
  void (**v29)(md::NavRoadSignLabelPart *__hidden);
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v35;
  geo::read_write_lock *v36;
  const char *v37;
  malloc_zone_t *zone;
  md::RoadSignLabelIcon *v39;
  std::__shared_weak_count *v40;
  _QWORD v41[2];

  v13 = a2;
  v14 = a4;
  v15 = *a3;
  v16 = (std::__shared_weak_count *)a3[1];
  v41[0] = v15;
  v41[1] = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
  }
  md::NavLabel::NavLabel(a1, v13, v41, a5, a6, a7);
  if (v16)
  {
    v21 = (unint64_t *)&v16->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  *(_QWORD *)a1 = &off_1E428C418;
  LODWORD(v19) = 0;
  LODWORD(v20) = 0;
  -[VKRoadSignArtwork offsetPixelForPixel:](v14, "offsetPixelForPixel:", v19, v20);
  *(_DWORD *)(a1 + 256) = v23;
  *(_DWORD *)(a1 + 260) = v24;
  v25 = (std::__shared_weak_count *)operator new(0xC8uLL);
  v25->__shared_owners_ = 0;
  v25->__shared_weak_owners_ = 0;
  v25->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB9B0;
  v39 = md::RoadSignLabelIcon::RoadSignLabelIcon((md::RoadSignLabelIcon *)&v25[1], v14);
  v40 = v25;
  {
    v35 = operator new();
    *(_QWORD *)(v35 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v35 + 24) = "VectorKitLabels";
    *(_OWORD *)(v35 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v35 = &off_1E42B5668;
    *(_QWORD *)(v35 + 8) = "VectorKitLabels";
    *(_OWORD *)(v35 + 72) = 0u;
    *(_OWORD *)(v35 + 88) = 0u;
    *(_OWORD *)(v35 + 104) = 0u;
    *(_OWORD *)(v35 + 120) = 0u;
    *(_OWORD *)(v35 + 136) = 0u;
    *(_OWORD *)(v35 + 152) = 0u;
    *(_OWORD *)(v35 + 168) = 0u;
    *(_OWORD *)(v35 + 184) = 0u;
    *(_OWORD *)(v35 + 200) = 0u;
    *(_OWORD *)(v35 + 216) = 0u;
    *(_OWORD *)(v35 + 232) = 0u;
    *(_QWORD *)(v35 + 248) = 0;
    *(_OWORD *)(v35 + 56) = 0u;
    v36 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v35 + 56), 0);
    if ((_DWORD)v36)
      geo::read_write_lock::logFailure(v36, (uint64_t)"initialization", v37);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v35 + 48) = zone;
    malloc_set_zone_name(zone, "VectorKitLabels");
    *(_QWORD *)(v35 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v35;
  }
  v27 = (void (***)(md::NavRoadSignLabelPart *__hidden))(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc, 848, 8);
  md::IconLabelPart::IconLabelPart((uint64_t)v27, &v39);
  *(_BYTE *)(v28 + 766) = 9;
  *(_BYTE *)(v28 + 768) = 0;
  *(_OWORD *)(v28 + 816) = 0u;
  *(_OWORD *)(v28 + 832) = 0u;
  *(_OWORD *)(v28 + 776) = 0u;
  *(_OWORD *)(v28 + 792) = 0u;
  *(_BYTE *)(v28 + 808) = 0;
  *(_BYTE *)(v28 + 557) = 3;
  *(_BYTE *)(v28 + 656) = 3;
  *(_BYTE *)(v28 + 664) = 0;
  v29 = off_1E42997C0;
  *(_QWORD *)v28 = off_1E42997C0;
  v30 = *(_QWORD *)(a1 + 288);
  *(_QWORD *)(a1 + 288) = v27;
  if (v30)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
    v29 = *v27;
  }
  ((void (*)(void (***)(md::NavRoadSignLabelPart *__hidden), uint64_t))v29[3])(v27, a1 + 176);
  v31 = v40;
  if (v40)
  {
    v32 = (unint64_t *)&v40->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }

  return a1;
}

void sub_19FD48D44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  void *v11;
  md::NavLabel *v12;
  std::__shared_weak_count *v13;
  void *v15;

  std::__shared_weak_count::~__shared_weak_count(v13);
  operator delete(v15);
  md::NavLabel::~NavLabel(v12);

  _Unwind_Resume(a1);
}

void md::NavCurrentRoadSign::~NavCurrentRoadSign(md::NavCurrentRoadSign *this)
{
  md::NavLabel::~NavLabel(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::NavCurrentRoadSign::type(md::NavCurrentRoadSign *this)
{
  return 0;
}

void md::NavRouteEtaLabelPart::~NavRouteEtaLabelPart(md::NavRouteEtaLabelPart *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_1E428D080;
  v2 = *((_QWORD *)this + 102);
  *((_QWORD *)this + 102) = 0;
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0x1000C40AE2C30F4);
  v3 = *((_QWORD *)this + 97);
  *((_QWORD *)this + 97) = 0;
  if (v3)
    MEMORY[0x1A1AF4E00](v3, 0x1000C40AE2C30F4);
  md::IconLabelPart::~IconLabelPart(this);
}

{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t v5;
  geo::read_write_lock *v6;
  const char *v7;
  malloc_zone_t *zone;

  *(_QWORD *)this = off_1E428D080;
  v2 = *((_QWORD *)this + 102);
  *((_QWORD *)this + 102) = 0;
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0x1000C40AE2C30F4);
  v3 = *((_QWORD *)this + 97);
  *((_QWORD *)this + 97) = 0;
  if (v3)
    MEMORY[0x1A1AF4E00](v3, 0x1000C40AE2C30F4);
  md::IconLabelPart::~IconLabelPart(this);
  {
    v5 = operator new();
    *(_QWORD *)(v5 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v5 + 24) = "VectorKitLabels";
    *(_OWORD *)(v5 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v5 = &off_1E42B5668;
    *(_QWORD *)(v5 + 8) = "VectorKitLabels";
    *(_OWORD *)(v5 + 72) = 0u;
    *(_OWORD *)(v5 + 88) = 0u;
    *(_OWORD *)(v5 + 104) = 0u;
    *(_OWORD *)(v5 + 120) = 0u;
    *(_OWORD *)(v5 + 136) = 0u;
    *(_OWORD *)(v5 + 152) = 0u;
    *(_OWORD *)(v5 + 168) = 0u;
    *(_OWORD *)(v5 + 184) = 0u;
    *(_OWORD *)(v5 + 200) = 0u;
    *(_OWORD *)(v5 + 216) = 0u;
    *(_OWORD *)(v5 + 232) = 0u;
    *(_QWORD *)(v5 + 248) = 0;
    *(_OWORD *)(v5 + 56) = 0u;
    v6 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v5 + 56), 0);
    if ((_DWORD)v6)
      geo::read_write_lock::logFailure(v6, (uint64_t)"initialization", v7);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v5 + 48) = zone;
    malloc_set_zone_name(zone, "VectorKitLabels");
    *(_QWORD *)(v5 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v5;
  }
  (*(void (**)(uint64_t, md::NavRouteEtaLabelPart *, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                       + 40))(mdm::Allocator::instance(void)::alloc, this, 848);
}

void md::NavRouteEtaLabelPart::debugString(char *a1@<X8>)
{
  a1[23] = 20;
  strcpy(a1, "NavRouteEtaLabelPart");
}

void md::NavRouteEta::~NavRouteEta(md::NavRouteEta *this)
{
  md::NavLabel::~NavLabel(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::NavRouteEta::type(md::NavRouteEta *this)
{
  return 6;
}

void md::ARWalkingMapEngineMode::didBecomeActive(uint64_t a1, md::MapEngine *this)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  int8x8_t *v20;
  int8x8_t v21;
  uint8x8_t v22;
  unint64_t v23;
  int8x8_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  md::ARDebugScene **v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  ARSession *v33;
  gdc::Registry *v34;
  uint64_t v35;

  md::MapEngine::setDisplayRate((uint64_t)this, -1);
  v4 = (uint64_t *)*((_QWORD *)this + 141);
  v5 = *v4;
  v6 = v4[1];
  if (v5 != v6)
  {
    while (*(_BYTE *)v5 != 27)
    {
      v5 += 16;
      if (v5 == v6)
        goto LABEL_7;
    }
  }
  if (v5 == v6)
LABEL_7:
    LOBYTE(v7) = 0;
  else
    v7 = *(_QWORD *)(v5 + 8);
  v8 = *((_QWORD *)this + 140);
  v9 = *(_QWORD *)(v8 + 16);
  if ((v9 & (v9 - 1)) != 0)
  {
    v11 = 0x3F812BA5755E8568;
    if (v9 <= 0x3F812BA5755E8568)
      v11 = 0x3F812BA5755E8568 % v9;
    v10 = *(_QWORD **)(*(_QWORD *)(v8 + 8) + 8 * v11);
    do
    {
      do
        v10 = (_QWORD *)*v10;
      while (v10[1] != 0x3F812BA5755E8568);
    }
    while (v10[2] != 0x3F812BA5755E8568);
  }
  else
  {
    v10 = *(_QWORD **)(*(_QWORD *)(v8 + 8) + 8 * ((v9 - 1) & 0x3F812BA5755E8568));
    do
    {
      do
        v10 = (_QWORD *)*v10;
      while (v10[1] != 0x3F812BA5755E8568);
    }
    while (v10[2] != 0x3F812BA5755E8568);
  }
  v12 = *(id *)(v10[5] + 128);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, md::MapEngine *))(*(_QWORD *)a1 + 56))(&v35, a1, this);
  v13 = v35;
  v35 = 0;
  v14 = *(_QWORD *)(a1 + 576);
  *(_QWORD *)(a1 + 576) = v13;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    v15 = v35;
    v35 = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  *(_QWORD *)(a1 + 568) = (*(uint64_t (**)(uint64_t, _QWORD, id))(*(_QWORD *)a1 + 64))(a1, v7, v12);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  v16 = (id)objc_claimAutoreleasedReturnValue();
  v17 = v16;
  if (v16)
    v18 = v16;
  v19 = *(void **)(a1 + 592);
  *(_QWORD *)(a1 + 592) = v17;

  v20 = (int8x8_t *)*((_QWORD *)this + 140);
  v21 = v20[2];
  v22 = (uint8x8_t)vcnt_s8(v21);
  v22.i16[0] = vaddlv_u8(v22);
  if (v22.u32[0] > 1uLL)
  {
    v23 = 0xF4B920F5F640B882 % *(_QWORD *)&v21;
    if (*(_QWORD *)&v21 > 0xF4B920F5F640B882)
      v23 = 0xF4B920F5F640B882;
  }
  else
  {
    v23 = (*(_QWORD *)&v21 - 1) & 0xF4B920F5F640B882;
  }
  v24 = v20[1];
  v25 = *(_QWORD **)(*(_QWORD *)&v24 + 8 * v23);
  if (!v25 || (v26 = (_QWORD *)*v25) == 0)
  {
LABEL_42:
    v29 = 0;
    goto LABEL_43;
  }
  if (v22.u32[0] < 2uLL)
  {
    while (1)
    {
      v28 = v26[1];
      if (v28 == 0xF4B920F5F640B882)
      {
        if (v26[2] == 0xF4B920F5F640B882)
          goto LABEL_56;
      }
      else if ((v28 & (*(_QWORD *)&v21 - 1)) != v23)
      {
        goto LABEL_42;
      }
      v26 = (_QWORD *)*v26;
      if (!v26)
        goto LABEL_42;
    }
  }
  while (1)
  {
    v27 = v26[1];
    if (v27 == 0xF4B920F5F640B882)
      break;
    if (v27 >= *(_QWORD *)&v21)
      v27 %= *(_QWORD *)&v21;
    if (v27 != v23)
      goto LABEL_42;
LABEL_32:
    v26 = (_QWORD *)*v26;
    if (!v26)
      goto LABEL_42;
  }
  if (v26[2] != 0xF4B920F5F640B882)
    goto LABEL_32;
LABEL_56:
  v29 = (md::ARDebugScene **)v26[5];
LABEL_43:
  if (v22.u32[0] >= 2uLL)
  {
    v31 = 0x69AB09C896BF94A7;
    if (*(_QWORD *)&v21 <= 0x69AB09C896BF94A7uLL)
      v31 = 0x69AB09C896BF94A7uLL % *(_QWORD *)&v21;
    v30 = *(_QWORD **)(*(_QWORD *)&v24 + 8 * v31);
    do
    {
      do
        v30 = (_QWORD *)*v30;
      while (v30[1] != 0x69AB09C896BF94A7);
    }
    while (v30[2] != 0x69AB09C896BF94A7);
  }
  else
  {
    v30 = *(_QWORD **)(*(_QWORD *)&v24 + 8 * ((*(_QWORD *)&v21 - 1) & 0x69AB09C896BF94A7));
    do
    {
      do
        v30 = (_QWORD *)*v30;
      while (v30[1] != 0x69AB09C896BF94A7);
    }
    while (v30[2] != 0x69AB09C896BF94A7);
  }
  v32 = v30[5];
  *(_QWORD *)(v32 + 264) = *(_QWORD *)(a1 + 576);
  v33 = *(ARSession **)(a1 + 592);
  if (v33)
    md::ARLogic::setARSession((id *)v32, v33);
  md::ARFeatureInjectionLogic::setARDebugScene(v29, *(md::ARDebugScene **)(a1 + 568));
  md::ARWalkingMapEngineMode::updateRegistries(this, *(md::MapEngine **)(a1 + 536), *(gdc::Registry **)(a1 + 552), v34);

}

void sub_19FD49400(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void md::ARWalkingMapEngineMode::willBecomeInactive(int a1, md::MapEngine *this)
{
  int8x8_t *v3;
  int8x8_t v4;
  uint8x8_t v5;
  unint64_t v6;
  int8x8_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  md::ARDebugScene **v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  gdc::Registry *v16;

  md::MapEngine::setDisplayRate((uint64_t)this, -1);
  v3 = (int8x8_t *)*((_QWORD *)this + 140);
  v4 = v3[2];
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0xF4B920F5F640B882 % *(_QWORD *)&v4;
    if (*(_QWORD *)&v4 > 0xF4B920F5F640B882)
      v6 = 0xF4B920F5F640B882;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0xF4B920F5F640B882;
  }
  v7 = v3[1];
  v8 = *(_QWORD **)(*(_QWORD *)&v7 + 8 * v6);
  if (!v8 || (v9 = (_QWORD *)*v8) == 0)
  {
LABEL_20:
    v12 = 0;
    if (v5.u32[0] >= 2uLL)
      goto LABEL_26;
    goto LABEL_21;
  }
  if (v5.u32[0] < 2uLL)
  {
    while (1)
    {
      v11 = v9[1];
      if (v11 == 0xF4B920F5F640B882)
      {
        if (v9[2] == 0xF4B920F5F640B882)
          goto LABEL_25;
      }
      else if ((v11 & (*(_QWORD *)&v4 - 1)) != v6)
      {
        goto LABEL_20;
      }
      v9 = (_QWORD *)*v9;
      if (!v9)
        goto LABEL_20;
    }
  }
  while (1)
  {
    v10 = v9[1];
    if (v10 == 0xF4B920F5F640B882)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_20;
LABEL_10:
    v9 = (_QWORD *)*v9;
    if (!v9)
      goto LABEL_20;
  }
  if (v9[2] != 0xF4B920F5F640B882)
    goto LABEL_10;
LABEL_25:
  v12 = (md::ARDebugScene **)v9[5];
  if (v5.u32[0] < 2uLL)
  {
LABEL_21:
    v13 = *(_QWORD **)(*(_QWORD *)&v7 + 8 * ((*(_QWORD *)&v4 - 1) & 0x69AB09C896BF94A7));
    do
    {
      do
        v13 = (_QWORD *)*v13;
      while (v13[1] != 0x69AB09C896BF94A7);
    }
    while (v13[2] != 0x69AB09C896BF94A7);
    goto LABEL_31;
  }
LABEL_26:
  v14 = 0x69AB09C896BF94A7;
  if (*(_QWORD *)&v4 <= 0x69AB09C896BF94A7uLL)
    v14 = 0x69AB09C896BF94A7uLL % *(_QWORD *)&v4;
  v13 = *(_QWORD **)(*(_QWORD *)&v7 + 8 * v14);
  do
  {
    do
      v13 = (_QWORD *)*v13;
    while (v13[1] != 0x69AB09C896BF94A7);
  }
  while (v13[2] != 0x69AB09C896BF94A7);
LABEL_31:
  v15 = v13[5];
  *(_QWORD *)(v15 + 264) = 0;
  md::ARLogic::setARSession((id *)v15, 0);
  md::ARFeatureInjectionLogic::setARDebugScene(v12, 0);
  md::ARWalkingMapEngineMode::updateRegistries(this, 0, 0, v16);
}

void md::ARWalkingMapEngineMode::updateRegistries(md::ARWalkingMapEngineMode *this, md::MapEngine *a2, gdc::Registry *a3, gdc::Registry *a4)
{
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  int8x8_t *v15;
  int8x8_t v16;
  uint8x8_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int8x8_t *v26;
  int8x8_t v27;
  uint8x8_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _QWORD *i;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  _QWORD *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  _QWORD *v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  _QWORD *v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  _QWORD *v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  _QWORD *v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  _QWORD *v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  _QWORD *v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  _QWORD *v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  _QWORD *v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  _QWORD *v107;
  unint64_t v108;

  v7 = *((_QWORD *)this + 140);
  v8 = *(_QWORD *)(v7 + 16);
  if ((v8 & (v8 - 1)) != 0)
  {
    v10 = 0x69AB09C896BF94A7;
    if (v8 <= 0x69AB09C896BF94A7)
      v10 = 0x69AB09C896BF94A7 % v8;
    v9 = *(_QWORD **)(*(_QWORD *)(v7 + 8) + 8 * v10);
    do
    {
      do
        v9 = (_QWORD *)*v9;
      while (v9[1] != 0x69AB09C896BF94A7);
    }
    while (v9[2] != 0x69AB09C896BF94A7);
  }
  else
  {
    v9 = *(_QWORD **)(*(_QWORD *)(v7 + 8) + 8 * ((v8 - 1) & 0x69AB09C896BF94A7));
    do
    {
      do
        v9 = (_QWORD *)*v9;
      while (v9[1] != 0x69AB09C896BF94A7);
    }
    while (v9[2] != 0x69AB09C896BF94A7);
  }
  *(_QWORD *)(v9[5] + 248) = a2;
  v11 = *((_QWORD *)this + 140);
  v12 = *(_QWORD *)(v11 + 16);
  if ((v12 & (v12 - 1)) != 0)
  {
    v14 = 0xFB5C21263048A572;
    if (v12 <= 0xFB5C21263048A572)
      v14 = 0xFB5C21263048A572 % v12;
    v13 = *(_QWORD **)(*(_QWORD *)(v11 + 8) + 8 * v14);
    do
    {
      do
        v13 = (_QWORD *)*v13;
      while (v13[1] != 0xFB5C21263048A572);
    }
    while (v13[2] != 0xFB5C21263048A572);
  }
  else
  {
    v13 = *(_QWORD **)(*(_QWORD *)(v11 + 8) + 8 * ((v12 - 1) & 0xFB5C21263048A572));
    do
    {
      do
        v13 = (_QWORD *)*v13;
      while (v13[1] != 0xFB5C21263048A572);
    }
    while (v13[2] != 0xFB5C21263048A572);
  }
  *(_QWORD *)(v13[5] + 120) = a2;
  v15 = (int8x8_t *)*((_QWORD *)this + 140);
  v16 = v15[2];
  if (!*(_QWORD *)&v16)
    goto LABEL_41;
  v17 = (uint8x8_t)vcnt_s8(v16);
  v17.i16[0] = vaddlv_u8(v17);
  if (v17.u32[0] > 1uLL)
  {
    v18 = 0xED12839080614CEDLL;
    if (*(_QWORD *)&v16 <= 0xED12839080614CEDLL)
      v18 = 0xED12839080614CEDLL % *(_QWORD *)&v16;
  }
  else
  {
    v18 = (*(_QWORD *)&v16 - 1) & 0xED12839080614CEDLL;
  }
  v19 = *(_QWORD **)(*(_QWORD *)&v15[1] + 8 * v18);
  if (!v19 || (v20 = (_QWORD *)*v19) == 0)
  {
LABEL_41:
    v23 = 0;
    goto LABEL_42;
  }
  if (v17.u32[0] < 2uLL)
  {
    while (1)
    {
      v22 = v20[1];
      if (v22 == 0xED12839080614CEDLL)
      {
        if (v20[2] == 0xED12839080614CEDLL)
          goto LABEL_257;
      }
      else if ((v22 & (*(_QWORD *)&v16 - 1)) != v18)
      {
        goto LABEL_41;
      }
      v20 = (_QWORD *)*v20;
      if (!v20)
        goto LABEL_41;
    }
  }
  while (1)
  {
    v21 = v20[1];
    if (v21 == 0xED12839080614CEDLL)
      break;
    if (v21 >= *(_QWORD *)&v16)
      v21 %= *(_QWORD *)&v16;
    if (v21 != v18)
      goto LABEL_41;
LABEL_31:
    v20 = (_QWORD *)*v20;
    if (!v20)
      goto LABEL_41;
  }
  if (v20[2] != 0xED12839080614CEDLL)
    goto LABEL_31;
LABEL_257:
  v23 = v20[5];
LABEL_42:
  if (*(md::MapEngine **)(v23 + 120) != a2)
  {
    *(_QWORD *)(v23 + 120) = a2;
    v15 = (int8x8_t *)*((_QWORD *)this + 140);
    v16 = v15[2];
  }
  if ((*(_QWORD *)&v16 & (*(_QWORD *)&v16 - 1)) != 0)
  {
    v25 = 0x98D5C8EC32AB5D9ELL;
    if (*(_QWORD *)&v16 <= 0x98D5C8EC32AB5D9ELL)
      v25 = 0x98D5C8EC32AB5D9ELL % *(_QWORD *)&v16;
    v24 = *(_QWORD **)(*(_QWORD *)&v15[1] + 8 * v25);
    do
    {
      do
        v24 = (_QWORD *)*v24;
      while (v24[1] != 0x98D5C8EC32AB5D9ELL);
    }
    while (v24[2] != 0x98D5C8EC32AB5D9ELL);
  }
  else
  {
    v24 = *(_QWORD **)(*(_QWORD *)&v15[1] + 8 * ((*(_QWORD *)&v16 - 1) & 0x98D5C8EC32AB5D9ELL));
    do
    {
      do
        v24 = (_QWORD *)*v24;
      while (v24[1] != 0x98D5C8EC32AB5D9ELL);
    }
    while (v24[2] != 0x98D5C8EC32AB5D9ELL);
  }
  *(_QWORD *)(v24[5] + 120) = a2;
  v26 = (int8x8_t *)*((_QWORD *)this + 140);
  v27 = v26[2];
  if (!*(_QWORD *)&v27)
    goto LABEL_74;
  v28 = (uint8x8_t)vcnt_s8(v27);
  v28.i16[0] = vaddlv_u8(v28);
  if (v28.u32[0] > 1uLL)
  {
    v29 = 0x20A1ED17D78F322BLL;
    if (*(_QWORD *)&v27 <= 0x20A1ED17D78F322BuLL)
      v29 = 0x20A1ED17D78F322BuLL % *(_QWORD *)&v27;
  }
  else
  {
    v29 = (*(_QWORD *)&v27 - 1) & 0x20A1ED17D78F322BLL;
  }
  v30 = *(_QWORD **)(*(_QWORD *)&v26[1] + 8 * v29);
  if (!v30 || (v31 = (_QWORD *)*v30) == 0)
  {
LABEL_74:
    v35 = 0;
    goto LABEL_75;
  }
  if (v28.u32[0] < 2uLL)
  {
    v32 = *(_QWORD *)&v27 - 1;
    while (1)
    {
      v34 = v31[1];
      if (v34 == 0x20A1ED17D78F322BLL)
      {
        if (v31[2] == 0x20A1ED17D78F322BLL)
          goto LABEL_258;
      }
      else if ((v34 & v32) != v29)
      {
        goto LABEL_74;
      }
      v31 = (_QWORD *)*v31;
      if (!v31)
        goto LABEL_74;
    }
  }
  while (2)
  {
    v33 = v31[1];
    if (v33 != 0x20A1ED17D78F322BLL)
    {
      if (v33 >= *(_QWORD *)&v27)
        v33 %= *(_QWORD *)&v27;
      if (v33 != v29)
        goto LABEL_74;
      goto LABEL_64;
    }
    if (v31[2] != 0x20A1ED17D78F322BLL)
    {
LABEL_64:
      v31 = (_QWORD *)*v31;
      if (!v31)
        goto LABEL_74;
      continue;
    }
    break;
  }
LABEL_258:
  v35 = v31[5];
LABEL_75:
  md::LabelsLogic::setWorldType(v35, 3u);
  v36 = *((_QWORD *)this + 140);
  v37 = *(_QWORD *)(v36 + 16);
  if ((v37 & (v37 - 1)) != 0)
  {
    v39 = 0x123A864D0AA1A5ADLL;
    if (v37 <= 0x123A864D0AA1A5ADLL)
      v39 = 0x123A864D0AA1A5ADLL % v37;
    i = *(_QWORD **)(*(_QWORD *)(v36 + 8) + 8 * v39);
    do
    {
      do
        i = (_QWORD *)*i;
      while (i[1] != 0x123A864D0AA1A5ADLL);
    }
    while (i[2] != 0x123A864D0AA1A5ADLL);
  }
  else
  {
    for (i = **(_QWORD ***)(*(_QWORD *)(v36 + 8) + 8 * ((v37 - 1) & 0x123A864D0AA1A5ADLL));
          i[1] != 0x123A864D0AA1A5ADLL || i[2] != 0x123A864D0AA1A5ADLL;
  }
  *(_QWORD *)(i[5] + 528) = a2;
  v40 = *((_QWORD *)this + 140);
  v41 = *(_QWORD *)(v40 + 16);
  if ((v41 & (v41 - 1)) != 0)
  {
    v43 = 0x14AF6A5C51A03795;
    if (v41 <= 0x14AF6A5C51A03795)
      v43 = 0x14AF6A5C51A03795 % v41;
    v42 = *(_QWORD **)(*(_QWORD *)(v40 + 8) + 8 * v43);
    do
    {
      do
        v42 = (_QWORD *)*v42;
      while (v42[1] != 0x14AF6A5C51A03795);
    }
    while (v42[2] != 0x14AF6A5C51A03795);
  }
  else
  {
    v42 = *(_QWORD **)(*(_QWORD *)(v40 + 8) + 8 * ((v41 - 1) & 0x14AF6A5C51A03795));
    do
    {
      do
        v42 = (_QWORD *)*v42;
      while (v42[1] != 0x14AF6A5C51A03795);
    }
    while (v42[2] != 0x14AF6A5C51A03795);
  }
  *(_QWORD *)(v42[5] + 120) = a2;
  v44 = *((_QWORD *)this + 140);
  v45 = *(_QWORD *)(v44 + 16);
  if ((v45 & (v45 - 1)) != 0)
  {
    v47 = 0xB922E53C3328A050;
    if (v45 <= 0xB922E53C3328A050)
      v47 = 0xB922E53C3328A050 % v45;
    v46 = *(_QWORD **)(*(_QWORD *)(v44 + 8) + 8 * v47);
    do
    {
      do
        v46 = (_QWORD *)*v46;
      while (v46[1] != 0xB922E53C3328A050);
    }
    while (v46[2] != 0xB922E53C3328A050);
  }
  else
  {
    v46 = *(_QWORD **)(*(_QWORD *)(v44 + 8) + 8 * ((v45 - 1) & 0xB922E53C3328A050));
    do
    {
      do
        v46 = (_QWORD *)*v46;
      while (v46[1] != 0xB922E53C3328A050);
    }
    while (v46[2] != 0xB922E53C3328A050);
  }
  *(_QWORD *)(v46[5] + 168) = a2;
  v48 = *((_QWORD *)this + 140);
  v49 = *(_QWORD *)(v48 + 16);
  if ((v49 & (v49 - 1)) != 0)
  {
    v51 = 0xBBE47937F4A9FFC3;
    if (v49 <= 0xBBE47937F4A9FFC3)
      v51 = 0xBBE47937F4A9FFC3 % v49;
    v50 = *(_QWORD **)(*(_QWORD *)(v48 + 8) + 8 * v51);
    do
    {
      do
        v50 = (_QWORD *)*v50;
      while (v50[1] != 0xBBE47937F4A9FFC3);
    }
    while (v50[2] != 0xBBE47937F4A9FFC3);
  }
  else
  {
    v50 = *(_QWORD **)(*(_QWORD *)(v48 + 8) + 8 * ((v49 - 1) & 0xBBE47937F4A9FFC3));
    do
    {
      do
        v50 = (_QWORD *)*v50;
      while (v50[1] != 0xBBE47937F4A9FFC3);
    }
    while (v50[2] != 0xBBE47937F4A9FFC3);
  }
  *(_QWORD *)(v50[5] + 120) = a2;
  v52 = *((_QWORD *)this + 140);
  v53 = *(_QWORD *)(v52 + 16);
  if ((v53 & (v53 - 1)) != 0)
  {
    v55 = 0x6604A2C36A6A9ABFLL;
    if (v53 <= 0x6604A2C36A6A9ABFLL)
      v55 = 0x6604A2C36A6A9ABFLL % v53;
    v54 = *(_QWORD **)(*(_QWORD *)(v52 + 8) + 8 * v55);
    do
    {
      do
        v54 = (_QWORD *)*v54;
      while (v54[1] != 0x6604A2C36A6A9ABFLL);
    }
    while (v54[2] != 0x6604A2C36A6A9ABFLL);
  }
  else
  {
    v54 = *(_QWORD **)(*(_QWORD *)(v52 + 8) + 8 * ((v53 - 1) & 0x6604A2C36A6A9ABFLL));
    do
    {
      do
        v54 = (_QWORD *)*v54;
      while (v54[1] != 0x6604A2C36A6A9ABFLL);
    }
    while (v54[2] != 0x6604A2C36A6A9ABFLL);
  }
  *(_QWORD *)(v54[5] + 120) = a2;
  v56 = *((_QWORD *)this + 140);
  v57 = *(_QWORD *)(v56 + 16);
  if ((v57 & (v57 - 1)) != 0)
  {
    v59 = 0xD20B76AD5FA2D0ADLL;
    if (v57 <= 0xD20B76AD5FA2D0ADLL)
      v59 = 0xD20B76AD5FA2D0ADLL % v57;
    v58 = *(_QWORD **)(*(_QWORD *)(v56 + 8) + 8 * v59);
    do
    {
      do
        v58 = (_QWORD *)*v58;
      while (v58[1] != 0xD20B76AD5FA2D0ADLL);
    }
    while (v58[2] != 0xD20B76AD5FA2D0ADLL);
  }
  else
  {
    v58 = *(_QWORD **)(*(_QWORD *)(v56 + 8) + 8 * ((v57 - 1) & 0xD20B76AD5FA2D0ADLL));
    do
    {
      do
        v58 = (_QWORD *)*v58;
      while (v58[1] != 0xD20B76AD5FA2D0ADLL);
    }
    while (v58[2] != 0xD20B76AD5FA2D0ADLL);
  }
  *(_QWORD *)(v58[5] + 144) = a2;
  v60 = *((_QWORD *)this + 140);
  v61 = *(_QWORD *)(v60 + 16);
  if ((v61 & (v61 - 1)) != 0)
  {
    v63 = 0x664391E400540AABLL;
    if (v61 <= 0x664391E400540AABLL)
      v63 = 0x664391E400540AABLL % v61;
    v62 = *(_QWORD **)(*(_QWORD *)(v60 + 8) + 8 * v63);
    do
    {
      do
        v62 = (_QWORD *)*v62;
      while (v62[1] != 0x664391E400540AABLL);
    }
    while (v62[2] != 0x664391E400540AABLL);
  }
  else
  {
    v62 = *(_QWORD **)(*(_QWORD *)(v60 + 8) + 8 * ((v61 - 1) & 0x664391E400540AABLL));
    do
    {
      do
        v62 = (_QWORD *)*v62;
      while (v62[1] != 0x664391E400540AABLL);
    }
    while (v62[2] != 0x664391E400540AABLL);
  }
  *(_QWORD *)(v62[5] + 120) = a2;
  v64 = *((_QWORD *)this + 140);
  v65 = *(_QWORD *)(v64 + 16);
  if ((v65 & (v65 - 1)) != 0)
  {
    v67 = 0x5AEC4ACCAEFFBF89;
    if (v65 <= 0x5AEC4ACCAEFFBF89)
      v67 = 0x5AEC4ACCAEFFBF89 % v65;
    v66 = *(_QWORD **)(*(_QWORD *)(v64 + 8) + 8 * v67);
    do
    {
      do
        v66 = (_QWORD *)*v66;
      while (v66[1] != 0x5AEC4ACCAEFFBF89);
    }
    while (v66[2] != 0x5AEC4ACCAEFFBF89);
  }
  else
  {
    v66 = *(_QWORD **)(*(_QWORD *)(v64 + 8) + 8 * ((v65 - 1) & 0x5AEC4ACCAEFFBF89));
    do
    {
      do
        v66 = (_QWORD *)*v66;
      while (v66[1] != 0x5AEC4ACCAEFFBF89);
    }
    while (v66[2] != 0x5AEC4ACCAEFFBF89);
  }
  *(_QWORD *)(v66[5] + 128) = a2;
  v68 = *((_QWORD *)this + 140);
  v69 = *(_QWORD *)(v68 + 16);
  if ((v69 & (v69 - 1)) != 0)
  {
    v71 = 0x740CC191D773D72BLL;
    if (v69 <= 0x740CC191D773D72BLL)
      v71 = 0x740CC191D773D72BLL % v69;
    v70 = *(_QWORD **)(*(_QWORD *)(v68 + 8) + 8 * v71);
    do
    {
      do
        v70 = (_QWORD *)*v70;
      while (v70[1] != 0x740CC191D773D72BLL);
    }
    while (v70[2] != 0x740CC191D773D72BLL);
  }
  else
  {
    v70 = *(_QWORD **)(*(_QWORD *)(v68 + 8) + 8 * ((v69 - 1) & 0x740CC191D773D72BLL));
    do
    {
      do
        v70 = (_QWORD *)*v70;
      while (v70[1] != 0x740CC191D773D72BLL);
    }
    while (v70[2] != 0x740CC191D773D72BLL);
  }
  *(_QWORD *)(v70[5] + 120) = a2;
  v72 = *((_QWORD *)this + 140);
  v73 = *(_QWORD *)(v72 + 16);
  if ((v73 & (v73 - 1)) != 0)
  {
    v75 = 0x40755F331E0AB142;
    if (v73 <= 0x40755F331E0AB142)
      v75 = 0x40755F331E0AB142 % v73;
    v74 = *(_QWORD **)(*(_QWORD *)(v72 + 8) + 8 * v75);
    do
    {
      do
        v74 = (_QWORD *)*v74;
      while (v74[1] != 0x40755F331E0AB142);
    }
    while (v74[2] != 0x40755F331E0AB142);
  }
  else
  {
    v74 = *(_QWORD **)(*(_QWORD *)(v72 + 8) + 8 * ((v73 - 1) & 0x40755F331E0AB142));
    do
    {
      do
        v74 = (_QWORD *)*v74;
      while (v74[1] != 0x40755F331E0AB142);
    }
    while (v74[2] != 0x40755F331E0AB142);
  }
  *(_QWORD *)(v74[5] + 120) = a2;
  v76 = *((_QWORD *)this + 140);
  v77 = *(_QWORD *)(v76 + 16);
  if ((v77 & (v77 - 1)) != 0)
  {
    v79 = 0x70FF69C50676D824;
    if (v77 <= 0x70FF69C50676D824)
      v79 = 0x70FF69C50676D824 % v77;
    v78 = *(_QWORD **)(*(_QWORD *)(v76 + 8) + 8 * v79);
    do
    {
      do
        v78 = (_QWORD *)*v78;
      while (v78[1] != 0x70FF69C50676D824);
    }
    while (v78[2] != 0x70FF69C50676D824);
  }
  else
  {
    v78 = *(_QWORD **)(*(_QWORD *)(v76 + 8) + 8 * ((v77 - 1) & 0x70FF69C50676D824));
    do
    {
      do
        v78 = (_QWORD *)*v78;
      while (v78[1] != 0x70FF69C50676D824);
    }
    while (v78[2] != 0x70FF69C50676D824);
  }
  *(_QWORD *)(v78[5] + 120) = a2;
  v80 = *((_QWORD *)this + 140);
  v81 = *(_QWORD *)(v80 + 16);
  if ((v81 & (v81 - 1)) != 0)
  {
    v83 = 0xF9FBA0FF1E09D6ALL;
    if (v81 <= 0xF9FBA0FF1E09D6ALL)
      v83 = 0xF9FBA0FF1E09D6ALL % v81;
    v82 = *(_QWORD **)(*(_QWORD *)(v80 + 8) + 8 * v83);
    do
    {
      do
        v82 = (_QWORD *)*v82;
      while (v82[1] != 0xF9FBA0FF1E09D6ALL);
    }
    while (v82[2] != 0xF9FBA0FF1E09D6ALL);
  }
  else
  {
    v82 = *(_QWORD **)(*(_QWORD *)(v80 + 8) + 8 * ((v81 - 1) & 0xF9FBA0FF1E09D6ALL));
    do
    {
      do
        v82 = (_QWORD *)*v82;
      while (v82[1] != 0xF9FBA0FF1E09D6ALL);
    }
    while (v82[2] != 0xF9FBA0FF1E09D6ALL);
  }
  *(_QWORD *)(v82[5] + 120) = a2;
  v84 = *((_QWORD *)this + 140);
  v85 = *(_QWORD *)(v84 + 16);
  if ((v85 & (v85 - 1)) != 0)
  {
    v87 = 0xD8AF9C2D0B889F8CLL;
    if (v85 <= 0xD8AF9C2D0B889F8CLL)
      v87 = 0xD8AF9C2D0B889F8CLL % v85;
    v86 = *(_QWORD **)(*(_QWORD *)(v84 + 8) + 8 * v87);
    do
    {
      do
        v86 = (_QWORD *)*v86;
      while (v86[1] != 0xD8AF9C2D0B889F8CLL);
    }
    while (v86[2] != 0xD8AF9C2D0B889F8CLL);
  }
  else
  {
    v86 = *(_QWORD **)(*(_QWORD *)(v84 + 8) + 8 * ((v85 - 1) & 0xD8AF9C2D0B889F8CLL));
    do
    {
      do
        v86 = (_QWORD *)*v86;
      while (v86[1] != 0xD8AF9C2D0B889F8CLL);
    }
    while (v86[2] != 0xD8AF9C2D0B889F8CLL);
  }
  *(_QWORD *)(v86[5] + 120) = a2;
  v88 = *((_QWORD *)this + 140);
  v89 = *(_QWORD *)(v88 + 16);
  if ((v89 & (v89 - 1)) != 0)
  {
    v91 = 0xAA8F0DAB5699C54BLL;
    if (v89 <= 0xAA8F0DAB5699C54BLL)
      v91 = 0xAA8F0DAB5699C54BLL % v89;
    v90 = *(_QWORD **)(*(_QWORD *)(v88 + 8) + 8 * v91);
    do
    {
      do
        v90 = (_QWORD *)*v90;
      while (v90[1] != 0xAA8F0DAB5699C54BLL);
    }
    while (v90[2] != 0xAA8F0DAB5699C54BLL);
  }
  else
  {
    v90 = *(_QWORD **)(*(_QWORD *)(v88 + 8) + 8 * ((v89 - 1) & 0xAA8F0DAB5699C54BLL));
    do
    {
      do
        v90 = (_QWORD *)*v90;
      while (v90[1] != 0xAA8F0DAB5699C54BLL);
    }
    while (v90[2] != 0xAA8F0DAB5699C54BLL);
  }
  *(_QWORD *)(v90[5] + 120) = a2;
  v92 = *((_QWORD *)this + 140);
  v93 = *(_QWORD *)(v92 + 16);
  if ((v93 & (v93 - 1)) != 0)
  {
    v95 = 0xB0E499CD21F9C854;
    if (v93 <= 0xB0E499CD21F9C854)
      v95 = 0xB0E499CD21F9C854 % v93;
    v94 = *(_QWORD **)(*(_QWORD *)(v92 + 8) + 8 * v95);
    do
    {
      do
        v94 = (_QWORD *)*v94;
      while (v94[1] != 0xB0E499CD21F9C854);
    }
    while (v94[2] != 0xB0E499CD21F9C854);
  }
  else
  {
    v94 = *(_QWORD **)(*(_QWORD *)(v92 + 8) + 8 * ((v93 - 1) & 0xB0E499CD21F9C854));
    do
    {
      do
        v94 = (_QWORD *)*v94;
      while (v94[1] != 0xB0E499CD21F9C854);
    }
    while (v94[2] != 0xB0E499CD21F9C854);
  }
  v96 = v94[5];
  *(_QWORD *)(v96 + 120) = a2;
  *(_QWORD *)(v96 + 128) = a3;
  v97 = *((_QWORD *)this + 140);
  v98 = *(_QWORD *)(v97 + 16);
  if ((v98 & (v98 - 1)) != 0)
  {
    v100 = 0x8251BC418DB947FFLL;
    if (v98 <= 0x8251BC418DB947FFLL)
      v100 = 0x8251BC418DB947FFLL % v98;
    v99 = *(_QWORD **)(*(_QWORD *)(v97 + 8) + 8 * v100);
    do
    {
      do
        v99 = (_QWORD *)*v99;
      while (v99[1] != 0x8251BC418DB947FFLL);
    }
    while (v99[2] != 0x8251BC418DB947FFLL);
  }
  else
  {
    v99 = *(_QWORD **)(*(_QWORD *)(v97 + 8) + 8 * ((v98 - 1) & 0x8251BC418DB947FFLL));
    do
    {
      do
        v99 = (_QWORD *)*v99;
      while (v99[1] != 0x8251BC418DB947FFLL);
    }
    while (v99[2] != 0x8251BC418DB947FFLL);
  }
  *(_QWORD *)(v99[5] + 120) = a2;
  v101 = *((_QWORD *)this + 140);
  v102 = *(_QWORD *)(v101 + 16);
  if ((v102 & (v102 - 1)) != 0)
  {
    v104 = 0xE7C55C766FD99921;
    if (v102 <= 0xE7C55C766FD99921)
      v104 = 0xE7C55C766FD99921 % v102;
    v103 = *(_QWORD **)(*(_QWORD *)(v101 + 8) + 8 * v104);
    do
    {
      do
        v103 = (_QWORD *)*v103;
      while (v103[1] != 0xE7C55C766FD99921);
    }
    while (v103[2] != 0xE7C55C766FD99921);
  }
  else
  {
    v103 = *(_QWORD **)(*(_QWORD *)(v101 + 8) + 8 * ((v102 - 1) & 0xE7C55C766FD99921));
    do
    {
      do
        v103 = (_QWORD *)*v103;
      while (v103[1] != 0xE7C55C766FD99921);
    }
    while (v103[2] != 0xE7C55C766FD99921);
  }
  *(_QWORD *)(v103[5] + 120) = a2;
  v105 = *((_QWORD *)this + 140);
  v106 = *(_QWORD *)(v105 + 16);
  if ((v106 & (v106 - 1)) != 0)
  {
    v108 = 0x6CE28AC70D358CE7;
    if (v106 <= 0x6CE28AC70D358CE7)
      v108 = 0x6CE28AC70D358CE7 % v106;
    v107 = *(_QWORD **)(*(_QWORD *)(v105 + 8) + 8 * v108);
    do
    {
      do
        v107 = (_QWORD *)*v107;
      while (v107[1] != 0x6CE28AC70D358CE7);
    }
    while (v107[2] != 0x6CE28AC70D358CE7);
  }
  else
  {
    v107 = *(_QWORD **)(*(_QWORD *)(v105 + 8) + 8 * ((v106 - 1) & 0x6CE28AC70D358CE7));
    do
    {
      do
        v107 = (_QWORD *)*v107;
      while (v107[1] != 0x6CE28AC70D358CE7);
    }
    while (v107[2] != 0x6CE28AC70D358CE7);
  }
  *(_QWORD *)(v107[5] + 120) = a2;
}

uint64_t md::ARWalkingMapEngineMode::ARWalkingMapEngineMode(uint64_t a1, _QWORD *a2, _QWORD *a3, char a4)
{
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  gdc::Registry *v14;
  unint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  char v18;
  _WORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  _WORD *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  _WORD *v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  _OWORD *v37;
  char *v38;
  unint64_t v39;
  __int128 v40;
  __int16 v41;
  _QWORD *i;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  char v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  v7 = (_QWORD *)md::MapEngineMode::MapEngineMode(a1, a4);
  *v7 = off_1E429C660;
  v7[67] = *a2;
  v8 = a2[1];
  v7[68] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  *(_QWORD *)(a1 + 552) = *a3;
  v11 = a3[1];
  *(_QWORD *)(a1 + 560) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_OWORD *)(a1 + 568) = 0u;
  *(_QWORD *)(a1 + 584) = &off_1E42B54D0;
  *(_QWORD *)(a1 + 592) = 0;
  *(_QWORD *)(a1 + 608) = 0;
  v14 = *(gdc::Registry **)(a1 + 536);
  v15 = gdc::Registry::create(v14);
  v16 = (uint64_t *)gdc::Registry::storage<arComponents::Configuration>((uint64_t)v14);
  *(_QWORD *)&v60 = v15;
  v17 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v16 + 4, (uint64_t)&v60);
  if ((v18 & 1) != 0)
  {
    v24 = (char *)v16[11];
    v23 = v16[12];
    if ((unint64_t)v24 >= v23)
    {
      v26 = (char *)v16[10];
      v27 = v24 - v26;
      if (v24 - v26 <= -3)
        abort();
      v28 = v27 >> 1;
      v29 = v23 - (_QWORD)v26;
      if (v29 <= (v27 >> 1) + 1)
        v30 = v28 + 1;
      else
        v30 = v29;
      if (v29 >= 0x7FFFFFFFFFFFFFFELL)
        v31 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v31 = v30;
      if (v31)
      {
        if (v31 < 0)
          goto LABEL_54;
        v32 = operator new(2 * v31);
      }
      else
      {
        v32 = 0;
      }
      v33 = &v32[2 * v28];
      v34 = &v32[2 * v31];
      *v33 = 0;
      v25 = v33 + 1;
      if (v24 != v26)
      {
        v35 = v24 - v26 - 2;
        if (v35 < 0x1E)
          goto LABEL_57;
        if (v24 - v32 - (v27 & 0xFFFFFFFFFFFFFFFELL) < 0x20)
          goto LABEL_57;
        v36 = (v35 >> 1) + 1;
        v37 = &v32[2 * v28 - 16];
        v38 = v24 - 16;
        v39 = v36 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v40 = *(_OWORD *)v38;
          *(v37 - 1) = *((_OWORD *)v38 - 1);
          *v37 = v40;
          v37 -= 2;
          v38 -= 32;
          v39 -= 16;
        }
        while (v39);
        v33 -= v36 & 0xFFFFFFFFFFFFFFF0;
        v24 -= 2 * (v36 & 0xFFFFFFFFFFFFFFF0);
        if (v36 != (v36 & 0xFFFFFFFFFFFFFFF0))
        {
LABEL_57:
          do
          {
            v41 = *((_WORD *)v24 - 1);
            v24 -= 2;
            *--v33 = v41;
          }
          while (v24 != v26);
        }
        v24 = (char *)v16[10];
      }
      v16[10] = (uint64_t)v33;
      v16[11] = (uint64_t)v25;
      v16[12] = (uint64_t)v34;
      if (v24)
        operator delete(v24);
    }
    else
    {
      *(_WORD *)v24 = 0;
      v25 = v24 + 2;
    }
    v16[11] = (uint64_t)v25;
    v20 = v16[31];
  }
  else
  {
    v19 = (_WORD *)(v16[10] + (((uint64_t)v17 - v16[7]) >> 2));
    *v19 = 0;
    v20 = v16[31];
    if (v19 != (_WORD *)v16[11])
    {
      v21 = (_QWORD *)v16[16];
      if (v21)
      {
        while (1)
        {
          *(_QWORD *)&v66 = &v60;
          *((_QWORD *)&v66 + 1) = 1;
          *(_QWORD *)&v57 = v20;
          v22 = v21[6];
          if (!v22)
            break;
          (*(void (**)(uint64_t, __int128 *, __int128 *))(*(_QWORD *)v22 + 48))(v22, &v57, &v66);
          v21 = (_QWORD *)*v21;
          if (!v21)
            goto LABEL_40;
        }
LABEL_52:
        std::__throw_bad_function_call[abi:nn180100]();
        __break(1u);
LABEL_54:
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      goto LABEL_40;
    }
  }
  for (i = (_QWORD *)v16[22]; i; i = (_QWORD *)*i)
  {
    *(_QWORD *)&v66 = &v60;
    *((_QWORD *)&v66 + 1) = 1;
    *(_QWORD *)&v57 = v20;
    v43 = i[6];
    if (!v43)
      goto LABEL_52;
    (*(void (**)(uint64_t, __int128 *, __int128 *))(*(_QWORD *)v43 + 48))(v43, &v57, &v66);
  }
LABEL_40:
  v44 = (_QWORD *)gdc::Registry::storage<arComponents::Configuration>(*(_QWORD *)(a1 + 536));
  v45 = v44[4];
  if (v15 >> 39 < (v44[5] - v45) >> 3
    && (v46 = *(_QWORD *)(v45 + 8 * (v15 >> 39))) != 0
    && (v47 = *(unsigned __int16 *)(v46 + 2 * (HIDWORD(v15) & 0x7F)), v49 = v44[7], v48 = v44[8], v47 < (v48 - v49) >> 3)
    && ((v50 = v49 + 8 * v47, v50 != v48) ? (v51 = *(_DWORD *)(v50 + 4) == HIDWORD(v15)) : (v51 = 0), v51))
  {
    v52 = v44[11];
    v53 = v44[10] + 2 * v47;
  }
  else
  {
    v52 = v44[11];
    v53 = v52;
  }
  if (v53 == v52)
    v53 = 0;
  *(_QWORD *)(a1 + 608) = v53;
  *(_DWORD *)(a1 + 52) = 25;
  *(_WORD *)(a1 + 224) = 768;
  LOBYTE(v66) = 0;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0, &v66)+ 17) = 0;
  LOBYTE(v66) = 1;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 1u, &v66)+ 17) = 0;
  LOBYTE(v66) = 2;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 2u, &v66)+ 17) = 0;
  LOBYTE(v66) = 3;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 3u, &v66)+ 17) = 0;
  v63 = 0x4AC7AB7561675F6;
  v64 = "md::GridLogic]";
  v65 = 13;
  *(_QWORD *)&v60 = 0x336A901A15BB7353;
  *((_QWORD *)&v60 + 1) = "md::GridContext]";
  v61 = 15;
  v62 = 1;
  *(_QWORD *)&v66 = &v67;
  *((_QWORD *)&v66 + 1) = 1;
  v67 = xmmword_1E42F8C28;
  *(_QWORD *)&v68 = 21;
  *(_QWORD *)&v57 = &v58;
  *((_QWORD *)&v57 + 1) = 1;
  v58 = xmmword_1E42F8B38;
  v59 = 24;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, &v63, &v60, 0, (uint64_t)&v66, (uint64_t)&v57);
  *(_QWORD *)&v60 = 0x8251BC418DB947FFLL;
  *((_QWORD *)&v60 + 1) = "md::ARAnimationLogic]";
  v61 = 20;
  *(_QWORD *)&v57 = 0x148CB13E59522D82;
  *((_QWORD *)&v57 + 1) = "md::ARAnimationContext]";
  *(_QWORD *)&v58 = 22;
  BYTE8(v58) = 1;
  *(_QWORD *)&v66 = &v67;
  *((_QWORD *)&v66 + 1) = 3;
  v69 = xmmword_1E42F6EB8;
  v70 = unk_1E42F6EC8;
  *(_QWORD *)&v71 = 29;
  v68 = unk_1E42F6EA8;
  v67 = xmmword_1E42F6E98;
  v63 = (unint64_t)&v65;
  v64 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v60, &v57, 0, (uint64_t)&v66, (uint64_t)&v63);
  *(_QWORD *)&v60 = 0x8E629317B3523E63;
  *((_QWORD *)&v60 + 1) = "md::CameraLogic]";
  v61 = 15;
  *(_QWORD *)&v57 = 0x1AF456233693CD46;
  *((_QWORD *)&v57 + 1) = "md::CameraContext]";
  *(_QWORD *)&v58 = 17;
  BYTE8(v58) = 1;
  *(_QWORD *)&v66 = &v67;
  *((_QWORD *)&v66 + 1) = 1;
  v67 = xmmword_1E42F8820;
  *(_QWORD *)&v68 = 20;
  v63 = (unint64_t)&v65;
  v64 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v60, &v57, 0, (uint64_t)&v66, (uint64_t)&v63);
  *(_QWORD *)&v57 = 0xD2443A61CED86C69;
  *((_QWORD *)&v57 + 1) = "md::SettingsLogic]";
  *(_QWORD *)&v58 = 17;
  *(_QWORD *)&v66 = 0xC97B9E962ADF4AD4;
  *((_QWORD *)&v66 + 1) = "md::SettingsContext]";
  *(_QWORD *)&v67 = 19;
  BYTE8(v67) = 1;
  *(_QWORD *)&v60 = &v61;
  *((_QWORD *)&v60 + 1) = 0;
  v63 = (unint64_t)&v65;
  v64 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v57, &v66, 0, (uint64_t)&v60, (uint64_t)&v63);
  *(_QWORD *)&v57 = 0x2FED70A4459DFCA1;
  *((_QWORD *)&v57 + 1) = "md::StyleLogic]";
  *(_QWORD *)&v58 = 14;
  *(_QWORD *)&v66 = 0xE42D19AFCA302E68;
  *((_QWORD *)&v66 + 1) = "md::StyleLogicContext]";
  *(_QWORD *)&v67 = 21;
  BYTE8(v67) = 1;
  *(_QWORD *)&v60 = &v61;
  *((_QWORD *)&v60 + 1) = 0;
  v63 = (unint64_t)&v65;
  v64 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v57, &v66, 0, (uint64_t)&v60, (uint64_t)&v63);
  v63 = 0x17767EADC5B287BLL;
  v64 = "md::ElevationLogic]";
  v65 = 18;
  *(_QWORD *)&v60 = 0x8BD499FBD96FBB9ELL;
  *((_QWORD *)&v60 + 1) = "md::ElevationContext]";
  v61 = 20;
  v62 = 1;
  *(_QWORD *)&v66 = &v67;
  *((_QWORD *)&v66 + 1) = 2;
  v67 = xmmword_1E42F88C8;
  v68 = unk_1E42F88D8;
  v69 = xmmword_1E42F88E8;
  *(_QWORD *)&v57 = &v58;
  *((_QWORD *)&v57 + 1) = 1;
  v58 = xmmword_1E42F88F8;
  v59 = 25;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, &v63, &v60, 0, (uint64_t)&v66, (uint64_t)&v57);
  *(_QWORD *)&v60 = 0x123A864D0AA1A5ADLL;
  *((_QWORD *)&v60 + 1) = "md::ARSceneLogic]";
  v61 = 16;
  *(_QWORD *)&v57 = 0x29BDA47DB65B52C8;
  *((_QWORD *)&v57 + 1) = "md::ARSceneContext]";
  *(_QWORD *)&v58 = 18;
  BYTE8(v58) = 1;
  *(_QWORD *)&v66 = &v67;
  *((_QWORD *)&v66 + 1) = 1;
  v67 = xmmword_1E42F7A80;
  *(_QWORD *)&v68 = 17;
  v63 = (unint64_t)&v65;
  v64 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v60, &v57, 0, (uint64_t)&v66, (uint64_t)&v63);
  *(_QWORD *)&v57 = 0x701C95861FC50076;
  *((_QWORD *)&v57 + 1) = "md::GeometryLogic]";
  *(_QWORD *)&v58 = 17;
  *(_QWORD *)&v66 = 0x3070CB6B3C7F21D3;
  *((_QWORD *)&v66 + 1) = "md::GeometryContext]";
  *(_QWORD *)&v67 = 19;
  BYTE8(v67) = 1;
  *(_QWORD *)&v60 = &v61;
  *((_QWORD *)&v60 + 1) = 0;
  v63 = (unint64_t)&v65;
  v64 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v57, &v66, 0, (uint64_t)&v60, (uint64_t)&v63);
  v63 = 0x20A1ED17D78F322BLL;
  v64 = "md::LabelsLogic]";
  v65 = 15;
  *(_QWORD *)&v60 = 0xA588623CD4116DAELL;
  *((_QWORD *)&v60 + 1) = "md::LabelsContext]";
  v61 = 17;
  v62 = 1;
  *(_QWORD *)&v66 = &v67;
  *((_QWORD *)&v66 + 1) = 1;
  v67 = xmmword_1E42F8C28;
  *(_QWORD *)&v68 = 21;
  *(_QWORD *)&v57 = &v58;
  *((_QWORD *)&v57 + 1) = 1;
  v58 = xmmword_1E42F8C40;
  v59 = 25;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, &v63, &v60, 0, (uint64_t)&v66, (uint64_t)&v57);
  *(_QWORD *)&v60 = 0xFB5C21263048A572;
  *((_QWORD *)&v60 + 1) = "md::LabelsExtractExternallyResolvedWorldTransformLogic]";
  v61 = 54;
  *(_QWORD *)&v57 = 0xDB33FC702E07AAFLL;
  *((_QWORD *)&v57 + 1) = "md::LabelsExtractExternallyResolvedWorldTransformContext]";
  *(_QWORD *)&v58 = 56;
  BYTE8(v58) = 1;
  *(_QWORD *)&v66 = &v67;
  *((_QWORD *)&v66 + 1) = 1;
  v67 = xmmword_1E42F6EE0;
  *(_QWORD *)&v68 = 39;
  v63 = (unint64_t)&v65;
  v64 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v60, &v57, 0, (uint64_t)&v66, (uint64_t)&v63);
  *(_QWORD *)&v60 = 0xED12839080614CEDLL;
  *((_QWORD *)&v60 + 1) = "md::LabelsExternalMeshLogic]";
  v61 = 27;
  *(_QWORD *)&v57 = 0xF409241CDA31AF08;
  *((_QWORD *)&v57 + 1) = "md::LabelsExternalMeshContext]";
  *(_QWORD *)&v58 = 29;
  BYTE8(v58) = 1;
  *(_QWORD *)&v66 = &v67;
  *((_QWORD *)&v66 + 1) = 1;
  v67 = xmmword_1E42F6EF8;
  *(_QWORD *)&v68 = 17;
  v63 = (unint64_t)&v65;
  v64 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v60, &v57, 0, (uint64_t)&v66, (uint64_t)&v63);
  v63 = 0xBEC1A12372CEEC00;
  v64 = "md::NavigationLogic]";
  v65 = 19;
  *(_QWORD *)&v60 = 0x1B8B241A8D896A1DLL;
  *((_QWORD *)&v60 + 1) = "md::NavigationContext]";
  v61 = 21;
  v62 = 1;
  *(_QWORD *)&v66 = &v67;
  *((_QWORD *)&v66 + 1) = 3;
  v69 = xmmword_1E42F8858;
  v70 = unk_1E42F8868;
  *(_QWORD *)&v71 = 17;
  v68 = unk_1E42F8848;
  v67 = xmmword_1E42F8838;
  *(_QWORD *)&v57 = &v58;
  *((_QWORD *)&v57 + 1) = 1;
  v58 = xmmword_1E42F8880;
  v59 = 23;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, &v63, &v60, 0, (uint64_t)&v66, (uint64_t)&v57);
  *(_QWORD *)&v60 = 0xB922E53C3328A050;
  *((_QWORD *)&v60 + 1) = "md::AROcclusionGenerationLogic]";
  v61 = 30;
  *(_QWORD *)&v57 = 0xA822B3A972ECE7CDLL;
  *((_QWORD *)&v57 + 1) = "md::AROcclusionGenerationContext]";
  *(_QWORD *)&v58 = 32;
  BYTE8(v58) = 1;
  *(_QWORD *)&v66 = &v67;
  *((_QWORD *)&v66 + 1) = 2;
  v67 = xmmword_1E42F6F10;
  v68 = unk_1E42F6F20;
  v69 = xmmword_1E42F6F30;
  v63 = (unint64_t)&v65;
  v64 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v60, &v57, 0, (uint64_t)&v66, (uint64_t)&v63);
  *(_QWORD *)&v60 = 0x5AEC4ACCAEFFBF89;
  *((_QWORD *)&v60 + 1) = "md::CollectARMapDataLogic]";
  v61 = 25;
  *(_QWORD *)&v57 = 0x127F9F77D6DAB2F5;
  *((_QWORD *)&v57 + 1) = "md::ARCollectMapDataContext<md::MapDataType::ARBuildings>]";
  *(_QWORD *)&v58 = 57;
  BYTE8(v58) = 1;
  *(_QWORD *)&v66 = &v67;
  *((_QWORD *)&v66 + 1) = 2;
  v67 = xmmword_1E42F6F40;
  v68 = unk_1E42F6F50;
  v69 = xmmword_1E42F6F60;
  v63 = (unint64_t)&v65;
  v64 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v60, &v57, 0, (uint64_t)&v66, (uint64_t)&v63);
  *(_QWORD *)&v60 = 0xB0E499CD21F9C854;
  *((_QWORD *)&v60 + 1) = "md::ARRenderEntityGenerationLogic]";
  v61 = 33;
  *(_QWORD *)&v57 = 0x51AAE9259E4A5431;
  *((_QWORD *)&v57 + 1) = "md::ARRenderEntityGenerationContext]";
  *(_QWORD *)&v58 = 35;
  BYTE8(v58) = 1;
  *(_QWORD *)&v66 = &v67;
  *((_QWORD *)&v66 + 1) = 5;
  v71 = xmmword_1E42F6FB0;
  v72 = *(_OWORD *)&off_1E42F6FC0;
  v73 = xmmword_1E42F6FD0;
  v74 = 39;
  v67 = xmmword_1E42F6F70;
  v68 = unk_1E42F6F80;
  v69 = xmmword_1E42F6F90;
  v70 = unk_1E42F6FA0;
  v63 = (unint64_t)&v65;
  v64 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v60, &v57, 0, (uint64_t)&v66, (uint64_t)&v63);
  *(_QWORD *)&v60 = 0x14AF6A5C51A03795;
  *((_QWORD *)&v60 + 1) = "md::ARExternalAssetDataRequestLogic]";
  v61 = 35;
  *(_QWORD *)&v57 = 0x18488114F1AD890;
  *((_QWORD *)&v57 + 1) = "md::ARExternalAssetDataRequestContext]";
  *(_QWORD *)&v58 = 37;
  BYTE8(v58) = 1;
  *(_QWORD *)&v66 = &v67;
  *((_QWORD *)&v66 + 1) = 2;
  v67 = xmmword_1E42F6FE8;
  v68 = unk_1E42F6FF8;
  v69 = xmmword_1E42F7008;
  v63 = (unint64_t)&v65;
  v64 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v60, &v57, 0, (uint64_t)&v66, (uint64_t)&v63);
  *(_QWORD *)&v57 = 0x98D5C8EC32AB5D9ELL;
  *((_QWORD *)&v57 + 1) = "md::ARLabelsLogic]";
  *(_QWORD *)&v58 = 17;
  *(_QWORD *)&v66 = 0x8741E659406FCBBLL;
  *((_QWORD *)&v66 + 1) = "md::ARLabelsContext]";
  *(_QWORD *)&v67 = 19;
  BYTE8(v67) = 1;
  *(_QWORD *)&v60 = &v61;
  *((_QWORD *)&v60 + 1) = 0;
  v63 = (unint64_t)&v65;
  v64 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v57, &v66, 0, (uint64_t)&v60, (uint64_t)&v63);
  *(_QWORD *)&v60 = 0xBBE47937F4A9FFC3;
  *((_QWORD *)&v60 + 1) = "md::ARRotateTowardsUserLogic]";
  v61 = 28;
  *(_QWORD *)&v57 = 0x9C174DEE01931CA6;
  *((_QWORD *)&v57 + 1) = "md::ARRotateTowardsUserContext]";
  *(_QWORD *)&v58 = 30;
  BYTE8(v58) = 1;
  *(_QWORD *)&v66 = &v67;
  *((_QWORD *)&v66 + 1) = 1;
  v67 = xmmword_1E42F7A80;
  *(_QWORD *)&v68 = 17;
  v63 = (unint64_t)&v65;
  v64 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v60, &v57, 0, (uint64_t)&v66, (uint64_t)&v63);
  *(_QWORD *)&v60 = 0x6604A2C36A6A9ABFLL;
  *((_QWORD *)&v60 + 1) = "md::ARUpDirectionUpdatesLogic]";
  v61 = 29;
  *(_QWORD *)&v57 = 0x2BD4930A0600742;
  *((_QWORD *)&v57 + 1) = "md::ARUpDirectionUpdatesContext]";
  *(_QWORD *)&v58 = 31;
  BYTE8(v58) = 1;
  *(_QWORD *)&v66 = &v67;
  *((_QWORD *)&v66 + 1) = 1;
  v67 = xmmword_1E42F7018;
  *(_QWORD *)&v68 = 22;
  v63 = (unint64_t)&v65;
  v64 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v60, &v57, 0, (uint64_t)&v66, (uint64_t)&v63);
  *(_QWORD *)&v60 = 0xD20B76AD5FA2D0ADLL;
  *((_QWORD *)&v60 + 1) = "md::ARProcessMeshComponentsLogic]";
  v61 = 32;
  *(_QWORD *)&v57 = 0x3C394DB2AC35C8;
  *((_QWORD *)&v57 + 1) = "md::ARProcessMeshComponentsContext]";
  *(_QWORD *)&v58 = 34;
  BYTE8(v58) = 1;
  *(_QWORD *)&v66 = &v67;
  *((_QWORD *)&v66 + 1) = 2;
  v67 = xmmword_1E42F6F10;
  v68 = unk_1E42F6F20;
  v69 = xmmword_1E42F6F30;
  v63 = (unint64_t)&v65;
  v64 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v60, &v57, 0, (uint64_t)&v66, (uint64_t)&v63);
  *(_QWORD *)&v60 = 0x664391E400540AABLL;
  *((_QWORD *)&v60 + 1) = "md::ARAddEnvironmentProbeLogic]";
  v61 = 30;
  *(_QWORD *)&v57 = 0x62E8209F98919A2ELL;
  *((_QWORD *)&v57 + 1) = "md::ARAddEnvironmentProbeContext]";
  *(_QWORD *)&v58 = 32;
  BYTE8(v58) = 1;
  *(_QWORD *)&v66 = &v67;
  *((_QWORD *)&v66 + 1) = 1;
  v67 = xmmword_1E42F7030;
  *(_QWORD *)&v68 = 18;
  v63 = (unint64_t)&v65;
  v64 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v60, &v57, 0, (uint64_t)&v66, (uint64_t)&v63);
  *(_QWORD *)&v60 = 0xF4B920F5F640B882;
  *((_QWORD *)&v60 + 1) = "md::ARFeatureInjectionLogic]";
  v61 = 27;
  *(_QWORD *)&v57 = 0xB6CE4C2C57DB41DFLL;
  *((_QWORD *)&v57 + 1) = "md::ARFeatureInjectionContext]";
  *(_QWORD *)&v58 = 29;
  BYTE8(v58) = 1;
  *(_QWORD *)&v66 = &v67;
  *((_QWORD *)&v66 + 1) = 3;
  v69 = xmmword_1E42F7068;
  v70 = unk_1E42F7078;
  *(_QWORD *)&v71 = 19;
  v68 = unk_1E42F7058;
  v67 = xmmword_1E42F7048;
  v63 = (unint64_t)&v65;
  v64 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v60, &v57, 0, (uint64_t)&v66, (uint64_t)&v63);
  v63 = 0x740CC191D773D72BLL;
  v64 = "md::ARWorldIntersectorLogic]";
  v65 = 27;
  *(_QWORD *)&v60 = 0x6DBE9777D7FEDAAELL;
  *((_QWORD *)&v60 + 1) = "md::ARWorldIntersectorContext]";
  v61 = 29;
  v62 = 1;
  *(_QWORD *)&v66 = &v67;
  *((_QWORD *)&v66 + 1) = 3;
  v69 = xmmword_1E42F70B0;
  v70 = unk_1E42F70C0;
  *(_QWORD *)&v71 = 35;
  v68 = unk_1E42F70A0;
  v67 = xmmword_1E42F7090;
  *(_QWORD *)&v57 = &v58;
  *((_QWORD *)&v57 + 1) = 1;
  v58 = xmmword_1E42F7180;
  v59 = 55;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, &v63, &v60, 0, (uint64_t)&v66, (uint64_t)&v57);
  *(_QWORD *)&v57 = 0x40755F331E0AB142;
  *((_QWORD *)&v57 + 1) = "md::ARDebugDrawMeshBoundsLogic]";
  *(_QWORD *)&v58 = 30;
  *(_QWORD *)&v66 = 0x9BE0A35B5769E59FLL;
  *((_QWORD *)&v66 + 1) = "md::ARDebugDrawMeshBoundsContext]";
  *(_QWORD *)&v67 = 32;
  BYTE8(v67) = 1;
  *(_QWORD *)&v60 = &v61;
  *((_QWORD *)&v60 + 1) = 0;
  v63 = (unint64_t)&v65;
  v64 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v57, &v66, 0, (uint64_t)&v60, (uint64_t)&v63);
  *(_QWORD *)&v60 = 0x70FF69C50676D824;
  *((_QWORD *)&v60 + 1) = "md::ARDebugDrawIntersectionsLogic]";
  v61 = 33;
  *(_QWORD *)&v57 = 0xA77E48F1AFA034A1;
  *((_QWORD *)&v57 + 1) = "md::ARDebugDrawIntersectionsContext]";
  *(_QWORD *)&v58 = 35;
  BYTE8(v58) = 1;
  *(_QWORD *)&v66 = &v67;
  *((_QWORD *)&v66 + 1) = 1;
  v67 = xmmword_1E42F70D8;
  *(_QWORD *)&v68 = 29;
  v63 = (unint64_t)&v65;
  v64 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v60, &v57, 0, (uint64_t)&v66, (uint64_t)&v63);
  *(_QWORD *)&v60 = 0xF9FBA0FF1E09D6ALL;
  *((_QWORD *)&v60 + 1) = "md::ARPushDebugDrawItemsLogic]";
  v61 = 29;
  *(_QWORD *)&v57 = 0xBB644C924C2E1F27;
  *((_QWORD *)&v57 + 1) = "md::ARPushDebugDrawItemsContext]";
  *(_QWORD *)&v58 = 31;
  BYTE8(v58) = 1;
  *(_QWORD *)&v66 = &v67;
  *((_QWORD *)&v66 + 1) = 1;
  v67 = xmmword_1E42F6EE0;
  *(_QWORD *)&v68 = 39;
  v63 = (unint64_t)&v65;
  v64 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v60, &v57, 0, (uint64_t)&v66, (uint64_t)&v63);
  *(_QWORD *)&v57 = 0xD8AF9C2D0B889F8CLL;
  *((_QWORD *)&v57 + 1) = "md::ARDataRequestObserverLogic]";
  *(_QWORD *)&v58 = 30;
  *(_QWORD *)&v66 = 0xBC61DE3EFA7960C9;
  *((_QWORD *)&v66 + 1) = "md::ARDataRequestObserverContext]";
  *(_QWORD *)&v67 = 32;
  BYTE8(v67) = 1;
  *(_QWORD *)&v60 = &v61;
  *((_QWORD *)&v60 + 1) = 0;
  v63 = (unint64_t)&v65;
  v64 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v57, &v66, 0, (uint64_t)&v60, (uint64_t)&v63);
  *(_QWORD *)&v60 = 0xE7C55C766FD99921;
  *((_QWORD *)&v60 + 1) = "md::ARApplyWorldTransformUpdatesLogic]";
  v61 = 37;
  *(_QWORD *)&v57 = 0x61AAF6FADEFBCCACLL;
  *((_QWORD *)&v57 + 1) = "md::ARApplyWorldTransformUpdatesContext]";
  *(_QWORD *)&v58 = 39;
  BYTE8(v58) = 1;
  *(_QWORD *)&v66 = &v67;
  *((_QWORD *)&v66 + 1) = 4;
  v69 = xmmword_1E42F7110;
  v70 = unk_1E42F7120;
  v71 = xmmword_1E42F7130;
  v72 = *(_OWORD *)&off_1E42F7140;
  v67 = xmmword_1E42F70F0;
  v68 = unk_1E42F7100;
  v63 = (unint64_t)&v65;
  v64 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v60, &v57, 0, (uint64_t)&v66, (uint64_t)&v63);
  *(_QWORD *)&v57 = 0xAA8F0DAB5699C54BLL;
  *((_QWORD *)&v57 + 1) = "md::ARLabelIconDataRequestLogic]";
  *(_QWORD *)&v58 = 31;
  *(_QWORD *)&v66 = 0x30B26197B2C0D9CELL;
  *((_QWORD *)&v66 + 1) = "md::ARLabelIconDataRequestContext]";
  *(_QWORD *)&v67 = 33;
  BYTE8(v67) = 1;
  *(_QWORD *)&v60 = &v61;
  *((_QWORD *)&v60 + 1) = 0;
  v63 = (unint64_t)&v65;
  v64 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v57, &v66, 0, (uint64_t)&v60, (uint64_t)&v63);
  *(_QWORD *)&v60 = 0x69AB09C896BF94A7;
  *((_QWORD *)&v60 + 1) = "md::ARLogic]";
  v61 = 11;
  *(_QWORD *)&v57 = 0x37F8C546A65FE3EELL;
  *((_QWORD *)&v57 + 1) = "md::ARLogicContext]";
  *(_QWORD *)&v58 = 18;
  BYTE8(v58) = 1;
  *(_QWORD *)&v66 = &v67;
  *((_QWORD *)&v66 + 1) = 2;
  v67 = xmmword_1E42F7150;
  v68 = unk_1E42F7160;
  v69 = xmmword_1E42F7170;
  v63 = (unint64_t)&v65;
  v64 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v60, &v57, 0, (uint64_t)&v66, (uint64_t)&v63);
  *(_QWORD *)&v60 = 0xBDB8C71631E0AA6CLL;
  *((_QWORD *)&v60 + 1) = "md::MapZoomLevelStyleLogic]";
  v61 = 26;
  *(_QWORD *)&v57 = 0xF0AA2DB42EB710AFLL;
  *((_QWORD *)&v57 + 1) = "md::MapZoomLevelStyleLogicContext]";
  *(_QWORD *)&v58 = 33;
  BYTE8(v58) = 1;
  *(_QWORD *)&v66 = &v67;
  *((_QWORD *)&v66 + 1) = 2;
  v67 = xmmword_1E42F8898;
  v68 = unk_1E42F88A8;
  v69 = xmmword_1E42F88B8;
  v63 = (unint64_t)&v65;
  v64 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v60, &v57, 0, (uint64_t)&v66, (uint64_t)&v63);
  v63 = 0x6CE28AC70D358CE7;
  v64 = "md::ARAssetOcclusionMeshDataLogic]";
  v65 = 33;
  *(_QWORD *)&v60 = 0x18CA739B45F5362ALL;
  *((_QWORD *)&v60 + 1) = "md::ARAssetOcclusionMeshDataContext]";
  v61 = 35;
  v62 = 1;
  *(_QWORD *)&v66 = &v67;
  *((_QWORD *)&v66 + 1) = 1;
  v67 = xmmword_1E42F88F8;
  *(_QWORD *)&v68 = 25;
  *(_QWORD *)&v57 = &v58;
  *((_QWORD *)&v57 + 1) = 1;
  v58 = xmmword_1E42F7180;
  v59 = 55;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, &v63, &v60, 0, (uint64_t)&v66, (uint64_t)&v57);
  *(_QWORD *)&v57 = 0x90C2E4CBBB63E301;
  *((_QWORD *)&v57 + 1) = "md::LayerDataLogic]";
  *(_QWORD *)&v58 = 18;
  *(_QWORD *)&v66 = 0x7851AF310F49C988;
  *((_QWORD *)&v66 + 1) = "md::LayerDataLogicContext]";
  *(_QWORD *)&v67 = 25;
  BYTE8(v67) = 1;
  *(_QWORD *)&v60 = &v61;
  *((_QWORD *)&v60 + 1) = 0;
  v63 = (unint64_t)&v65;
  v64 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v57, &v66, 0, (uint64_t)&v60, (uint64_t)&v63);
  *(_QWORD *)&v66 = 0x3C00000037;
  DWORD2(v66) = 61;
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, 0x37u, &v66)+ 18) = 0;
  v54 = WORD3(v66);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, WORD2(v66), (_WORD *)&v66 + 2)+ 18) = v54 << 16;
  v55 = WORD5(v66);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, WORD4(v66), (_WORD *)&v66 + 4)+ 18) = v55 << 16;
  return a1;
}

void sub_19FD4BBEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v12;

  *(_QWORD *)(v10 + 584) = &off_1E42B54D0;

  v12 = *(_QWORD *)(v10 + 576);
  *(_QWORD *)(v10 + 576) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v10 + 552);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a10);
  md::MapEngineMode::~MapEngineMode((md::MapEngineMode *)v10);
  _Unwind_Resume(a1);
}

void md::SharedResourcesManager::FrameReferences::~FrameReferences(md::SharedResourcesManager::FrameReferences *this)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (_QWORD *)*((_QWORD *)this + 23);
  while (v2)
  {
    v4 = v2;
    v2 = (_QWORD *)*v2;
    v5 = (std::__shared_weak_count *)v4[3];
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    operator delete(v4);
  }
  v3 = (void *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v3)
    operator delete(v3);
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 112));
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 64));
  std::mutex::~mutex((std::mutex *)this);
}

void ___ZL33GEOGetVectorKitSharedResourcesLogv_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.VectorKit", "SharedResources");
  v1 = (void *)GEOGetVectorKitSharedResourcesLog(void)::log;
  GEOGetVectorKitSharedResourcesLog(void)::log = (uint64_t)v0;

}

void std::__shared_ptr_emplace<md::MaskingOverlayRenderable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD070;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::MaskingOverlayRenderable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD070;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::MaskingOverlayRenderable>::__on_zero_shared(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;

  v2 = (std::__shared_weak_count *)a1[20];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (void *)a1[14];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (void *)a1[14];
  if (v5)
LABEL_6:
    operator delete(v5);
LABEL_7:
  v6 = (_QWORD *)a1[11];
  if (v6)
  {
    v7 = (_QWORD *)a1[12];
    v8 = (void *)a1[11];
    if (v7 != v6)
    {
      do
      {
        v10 = *--v7;
        v9 = v10;
        *v7 = 0;
        if (v10)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      while (v7 != v6);
      v8 = (void *)a1[11];
    }
    a1[12] = v6;
    operator delete(v8);
  }
  v11 = (std::__shared_weak_count *)a1[10];
  if (!v11)
    goto LABEL_19;
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    v14 = (std::__shared_weak_count *)a1[8];
    if (!v14)
      return;
  }
  else
  {
LABEL_19:
    v14 = (std::__shared_weak_count *)a1[8];
    if (!v14)
      return;
  }
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
}

void md::MaskingOverlayMeshProcessor::_buildTintBandOverlayStyle(md::MaskingOverlayMeshProcessor *this, uint64_t a2)
{
  gss::Allocator *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  gss::Allocator *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  _BYTE v17[15];
  char v18;

  v4 = (gss::Allocator *)objc_msgSend(*(id *)a2, "style");
  if (v4 == (gss::Allocator *)1)
    v5 = 0x7600000003;
  else
    v5 = 3;
  v6 = gss::Allocator::instance(v4);
  v7 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, 24, 4);
  v8 = v7;
  if (v7)
    *v7 = 0x200000005;
  v7[1] = v5;
  v7[2] = 0xA0001004BLL;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = v6;
  v9 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, 24, 4);
  v13 = v9;
  v15 = (char *)(v9 + 3);
  if (v9)
    *v9 = *v8;
  v9[1] = v8[1];
  v9[2] = v8[2];
  v14 = v9 + 3;
  gss::FeatureAttributeSet::sort((gss::FeatureAttributeSet *)&v13);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v6 + 40))(v6, v8, 24);
  v10 = **(_QWORD **)(a2 + 32);
  memset(v17, 0, sizeof(v17));
  v18 = 1;
  gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((unint64_t *)this, v10, (gss::FeatureAttributeSet *)&v13, (gss::QueryOverrides *)v17);
  if (!v17[14] && *(_QWORD *)v17)
  {
    v12 = gss::Allocator::instance(v11);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v12 + 40))(v12, *(_QWORD *)v17, *(unsigned __int16 *)&v17[12]);
  }
  if (v13)
  {
    v14 = v13;
    (*(void (**)(uint64_t, _QWORD *, int64_t))(*(_QWORD *)v16 + 40))(v16, v13, v15 - (char *)v13);
  }
}

void sub_19FD4C020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  gss::QueryOverrides::~QueryOverrides((gss::QueryOverrides *)va);
  if (a2)
    (*(void (**)(uint64_t))(*(_QWORD *)a5 + 40))(a5);
  _Unwind_Resume(a1);
}

void md::MaskingOverlayMeshProcessor::_unionPolygons(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v5;
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  char **v15;
  char *v16;
  char *v17;
  unint64_t v18;
  double v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  float64x2_t v24;
  float64x2_t v25;
  const double *v26;
  uint64_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  const double *v34;
  double v35;
  double v36;
  double v37;
  char v38;
  int v39;
  int v40;
  unsigned int v41;
  int hasValueForKeyAtEnd;
  double v43;
  float *v44;
  float v45;
  BOOL v46;
  unsigned int v47;
  float *v48;
  float v49;
  double v50;
  double v51;
  double v52;
  float v53;
  float v54;
  uint64_t v55;
  char **v56;
  unint64_t *v57;
  unint64_t v58;
  char *v59;
  char *v60;
  unint64_t v61;
  double v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  const double *v67;
  float64x2_t v68;
  float64x2_t v69;
  const double *v70;
  unsigned __int128 v71;
  unsigned __int128 v72;
  double v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  char **v78;
  unint64_t *v79;
  unint64_t v80;
  char *v81;
  char *v82;
  unint64_t v83;
  double v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  const double *v89;
  float64x2_t v90;
  float64x2_t v91;
  const double *v92;
  unsigned __int128 v93;
  unsigned __int128 v94;
  double v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  _BYTE *v101;
  unint64_t *v102;
  uint64_t *v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  __int16 v110;
  uint64_t v111;
  int64_t v112;
  char ***v113;
  char **v114;
  _QWORD *v115;
  char ***v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char ***v120;
  double v121;
  double v122;
  _BOOL4 v123;
  unsigned int v124;
  unsigned int v125;
  char *v126;
  char *v127;
  unint64_t v128;
  double v129;
  double v130;
  double v131;
  double v132;
  uint64_t v133;
  float64x2_t v134;
  float64x2_t v135;
  const double *v136;
  uint64_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  const double *v144;
  double v145;
  double v146;
  char *v147;
  char *v148;
  unint64_t v149;
  double v150;
  double v151;
  double v152;
  double v153;
  uint64_t v154;
  const double *v155;
  uint64_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  const double *v165;
  double v166;
  double v167;
  double v168;
  double v169;
  __int128 v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  __int128 v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  uint64_t v178;
  unint64_t *v179;
  unint64_t v180;
  unint64_t *v181;
  unint64_t v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  uint64_t **v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t v191;
  uint8x8_t v192;
  double v193;
  double v194;
  double v195;
  double v196;
  char *v200;
  char *v201;
  void *v202;
  void *v203;
  char *v204;
  char *v205;
  unint64_t v206;
  double v207;
  double v208;
  double v209;
  double v210;
  uint64_t v211;
  float64x2_t v212;
  float64x2_t v213;
  const double *v214;
  uint64_t v215;
  float64x2_t v216;
  float64x2_t v217;
  float64x2_t v218;
  float64x2_t v219;
  float64x2_t v220;
  float64x2_t v221;
  const double *v222;
  double v223;
  double v224;
  uint64_t *v225;
  char *v226;
  char *v227;
  unint64_t v228;
  uint64_t v229;
  float64x2_t v230;
  float64x2_t v231;
  const double *v232;
  uint64_t v233;
  float64x2_t v234;
  float64x2_t v235;
  float64x2_t v236;
  float64x2_t v237;
  float64x2_t v238;
  float64x2_t v239;
  const double *v240;
  double v241;
  double v242;
  _QWORD *v243;
  _QWORD *v244;
  uint64_t v245;
  unint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  int64_t v253;
  uint64_t *v254;
  uint64_t *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t *v258;
  uint64_t v259;
  unint64_t v260;
  uint64_t *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t *v264;
  _QWORD *v265;
  _QWORD **v266;
  _QWORD *v267;
  _QWORD **v268;
  uint64_t *v269;
  int v270;
  _QWORD *v271;
  uint64_t *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t *v275;
  _QWORD *v276;
  _QWORD *v277;
  void **v278;
  double **v279;
  BOOL v280;
  double *v282;
  double *v283;
  double *v284;
  double *v285;
  double v286;
  double v287;
  double v288;
  double v289;
  double v290;
  double v291;
  int v292;
  uint64_t v293;
  char v294;
  double v295;
  double v296;
  double v297;
  double v298;
  double v299;
  double v300;
  double v301;
  double v302;
  unint64_t v303;
  uint64_t v304;
  unint64_t v305;
  unint64_t v306;
  float64x2_t *v307;
  float64x2_t v308;
  char v309;
  unint64_t v310;
  float64x2_t v311;
  double *f64;
  unint64_t v313;
  float64x2_t *v314;
  float64x2_t v315;
  unint64_t v316;
  uint64_t v317;
  void **v318;
  double *v319;
  uint64_t v320;
  unint64_t v321;
  uint64_t v322;
  unint64_t v323;
  char *v324;
  float64x2_t v325;
  float64x2_t *v326;
  float64x2_t *v327;
  float64x2_t v328;
  uint64_t v329;
  unint64_t v330;
  uint64_t v331;
  unint64_t v332;
  uint64_t v333;
  _QWORD *v334;
  int v335;
  int v336;
  _QWORD *v337;
  uint64_t v338;
  uint64_t *v339;
  uint64_t v340;
  char v341;
  _QWORD *v342;
  int v343;
  _OWORD *v344;
  __int128 v345;
  _QWORD *v346;
  _QWORD *v347;
  _QWORD **v348;
  _QWORD *v349;
  _QWORD **v350;
  uint64_t *v351;
  int v352;
  _QWORD *v353;
  uint64_t *v354;
  uint64_t v355;
  uint64_t *v356;
  int v357;
  _QWORD *v358;
  uint64_t v359;
  uint64_t *v360;
  _QWORD *v361;
  _QWORD *v362;
  unint64_t v363;
  unint64_t v364;
  uint8x8_t v365;
  unint64_t v366;
  _QWORD **v367;
  _QWORD *v368;
  unint64_t v369;
  unint64_t v370;
  _QWORD **v371;
  unint64_t v372;
  unint64_t v373;
  float v374;
  _BOOL8 v375;
  unint64_t v376;
  unint64_t v377;
  size_t v378;
  void *v379;
  void *v380;
  uint64_t v381;
  _QWORD **v382;
  size_t v383;
  size_t v384;
  size_t v385;
  _QWORD *j;
  size_t v387;
  uint64_t v388;
  unint64_t v389;
  uint8x8_t v390;
  uint64_t v391;
  _QWORD *v392;
  uint64_t v393;
  size_t v394;
  _QWORD *v395;
  _QWORD *v396;
  unint64_t v397;
  _QWORD *v398;
  unint64_t v399;
  char *v400;
  char *v401;
  uint64_t v402;
  unint64_t v403;
  uint64_t v404;
  char *v405;
  char *v406;
  unint64_t v407;
  uint64_t v408;
  char *v409;
  __int128 *v410;
  uint64_t v411;
  __int128 v412;
  uint64_t v413;
  void *v414;
  _QWORD *v415;
  uint64_t *v416;
  uint64_t v417;
  char *v418;
  uint64_t *v419;
  uint64_t *v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t *v423;
  uint64_t *v424;
  uint64_t *v425;
  uint64_t *v426;
  uint64_t *v427;
  void *v428;
  uint64_t *v429;
  char *v430;
  char *v431;
  char *v432;
  char *v433;
  void *v434;
  void *v435;
  uint64_t v436;
  unint64_t v437;
  unint64_t v438;
  uint64_t *v439;
  uint64_t v440;
  uint64_t *v441;
  uint64_t v442;
  uint64_t *v443;
  uint64_t v444;
  void *v445;
  uint64_t v446;
  void *v447;
  void *v448;
  void **v449;
  uint64_t v450;
  unint64_t v451;
  uint64_t *v452;
  uint64_t *v453;
  uint64_t *v454;
  uint64_t *v455;
  uint64_t *v456;
  void **v457;
  __int128 v458;
  uint64_t *v459;
  uint64_t *v460;
  char *v461;
  void **v462;
  void *v463;
  char *v464;
  char *v465;
  char *v466;
  char *v467;
  void *v468;
  void *v469;
  uint64_t **v470;
  uint64_t v471;
  unint64_t v472;
  float64x2_t *v473;
  float64x2_t *v474;
  float64x2_t *v475;
  unint64_t v476;
  float64x2_t *v477;
  float64x2_t *v478;
  uint64_t v479;
  unint64_t v480;
  uint64_t v481;
  unint64_t v482;
  char *v483;
  float64x2_t *v484;
  float64x2_t *v485;
  float64x2_t v486;
  float64x2_t *v487;
  uint64_t v488;
  unint64_t v489;
  uint64_t v490;
  unint64_t v491;
  char *v492;
  float64x2_t *v493;
  unint64_t v494;
  char *v495;
  uint64_t v496;
  uint64_t v497;
  char *v498;
  unint64_t v499;
  float64x2_t *v500;
  float64x2_t *v501;
  float64x2_t *v502;
  unint64_t v503;
  float64x2_t *v504;
  float64x2_t *v505;
  uint64_t v506;
  unint64_t v507;
  uint64_t v508;
  unint64_t v509;
  char *v510;
  float64x2_t *v511;
  float64x2_t *v512;
  float64x2_t v513;
  float64x2_t *v514;
  uint64_t v515;
  unint64_t v516;
  uint64_t v517;
  unint64_t v518;
  char *v519;
  float64x2_t *v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  int64_t v525;
  uint64_t *v526;
  uint64_t *v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t *v530;
  uint64_t v531;
  unint64_t v532;
  uint64_t *v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t *v536;
  _QWORD *v537;
  _QWORD *v538;
  _QWORD *v539;
  void *v540;
  _QWORD *v541;
  _QWORD *v542;
  uint64_t v543;
  const void **v544;
  const void **v545;
  char *v546;
  _QWORD *v547;
  void *v548;
  void *v549;
  _QWORD *v550;
  char *v551;
  size_t v552;
  char *v553;
  _BYTE *v554;
  const void *v555;
  uint64_t v556;
  unint64_t v557;
  unint64_t v558;
  uint64_t *v559;
  void **v560;
  char *v561;
  _BYTE *v562;
  const void *v563;
  uint64_t v564;
  char *v565;
  size_t v566;
  void **v567;
  __int128 v568;
  char *v569;
  char *v570;
  void *v571;
  void *v572;
  void **v573;
  BOOL v574;
  uint64_t *v575;
  void *v576;
  void **v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  void *v581;
  void *v582;
  uint64_t *v583;
  char *v584;
  const void **v585;
  void *v586;
  char *v587;
  void *v588;
  void *v589;
  std::__shared_weak_count *v590;
  uint64_t v591;
  const void *v592;
  uint64_t v593;
  std::__shared_weak_count_vtbl *v594;
  size_t v595;
  std::__shared_weak_count *v596;
  unint64_t *v597;
  unint64_t v598;
  unsigned __int8 v599;
  int v600;
  __int16 v601;
  unint64_t *v602;
  unint64_t v603;
  char *v604;
  char *shared_owners;
  unint64_t v606;
  double v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  float64x2_t v612;
  const double *v613;
  float64x2_t v614;
  const double *v615;
  unsigned __int128 v616;
  unsigned __int128 v617;
  double v618;
  unint64_t *v619;
  unint64_t v620;
  unint64_t v621;
  unint64_t v622;
  unint64_t v623;
  uint8x8_t v624;
  unint64_t v625;
  uint64_t ***v626;
  uint64_t **v627;
  unint64_t v628;
  uint64_t *v629;
  _QWORD *v630;
  void *v631;
  unint64_t *v632;
  unint64_t v633;
  float v634;
  _BOOL4 v635;
  unint64_t v636;
  unint64_t v637;
  size_t prime;
  void *v639;
  void *v640;
  uint64_t v641;
  _QWORD **v642;
  size_t v643;
  size_t v644;
  size_t v645;
  _QWORD *i;
  size_t v647;
  uint64_t v648;
  unint64_t v649;
  uint8x8_t v650;
  uint64_t v651;
  uint64_t *v652;
  uint64_t v653;
  unint64_t v654;
  uint64_t v655;
  _QWORD *v656;
  uint64_t v657;
  unint64_t *v658;
  unint64_t v659;
  uint64_t v660;
  _QWORD *v661;
  uint64_t v662;
  size_t v663;
  _QWORD *v664;
  _QWORD *v665;
  unint64_t v666;
  unint64_t *v667;
  unint64_t v668;
  void *v669;
  uint64_t *v670;
  uint64_t v671;
  uint64_t v672;
  double *v673;
  int64_t v674;
  uint64_t v675;
  uint64_t v676;
  unint64_t v677;
  unint64_t v678;
  double v679;
  uint64_t v680;
  double *v681;
  double v682;
  uint64_t v683;
  double v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  double *v688;
  double v689;
  double v690;
  double v691;
  double v692;
  double *v693;
  unint64_t v694;
  unint64_t v695;
  double *v696;
  double v697;
  double v698;
  char *v699;
  size_t v700;
  char *v701;
  char *v702;
  char *v703;
  uint64_t v704;
  uint64_t v705;
  _QWORD *v706;
  std::__shared_weak_count *v707;
  unint64_t *v708;
  unint64_t v709;
  char *v710;
  char *v711;
  char *v712;
  void *v713;
  void *v714;
  _QWORD *v715;
  void *v716;
  char *v717;
  char *v718;
  _QWORD *v719;
  std::__shared_weak_count *v720;
  unint64_t *v721;
  unint64_t v722;
  std::__shared_weak_count *v723;
  unint64_t *v724;
  unint64_t v725;
  int64x2_t v726;
  int64x2_t v727;
  uint64_t *v728;
  uint64_t v729;
  int v730;
  char **v731;
  uint64_t *v732;
  int64x2_t v733;
  int64x2_t v734;
  char **v735;
  uint64_t v736;
  float64x2_t v737;
  float64x2_t v738;
  unint64_t v739;
  std::__shared_weak_count *v740;
  __int16 v741;
  char v742;
  char *v743;
  __int128 v744;
  void *v745[2];
  void *v746[2];
  float v747;
  void *v748;
  char *v749;
  uint64_t v750;
  uint64_t *v751;
  uint64_t *v752;
  unint64_t v753;
  void *v754;
  const void **v755;
  uint64_t v756;
  void *__p[2];
  void *v758[2];
  float v759;
  _QWORD *v760;
  _QWORD *v761;
  uint64_t v762;
  uint64_t *v763;
  void **v764;
  _QWORD *v765;
  char *v766;
  unint64_t *v767;
  __int128 v768;
  uint64_t v769;
  double v770;
  uint64_t *v771;
  _QWORD *v772;
  uint64_t v773;
  _QWORD *v774;
  _QWORD *v775;
  uint64_t v776;
  uint64_t v777;
  float64x2x2_t v778;
  float64x2x2_t v779;
  float64x2x2_t v780;
  float64x2x2_t v781;
  float64x2x2_t v782;
  float64x2x2_t v783;
  float64x2x2_t v784;
  float64x2x2_t v785;
  float64x2x2_t v786;
  float64x2x2_t v787;

  v777 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend(*(id *)a1, "style"))
  {
    v748 = 0;
    v749 = 0;
    v750 = 0;
    v5 = a2[1];
    v728 = a2;
    if ((uint64_t *)v5 != a2)
    {
      v733 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
      v734 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
      do
      {
        md::MaskingOverlayMeshProcessor::_buildTintBandOverlayStyle((md::MaskingOverlayMeshProcessor *)__p, a1);
        v6 = __p[0];
        v7 = (std::__shared_weak_count *)__p[1];
        v763 = (uint64_t *)__p[0];
        v764 = (void **)__p[1];
        __p[0] = 0;
        __p[1] = 0;
        *(_QWORD *)&v768 = v763;
        *((_QWORD *)&v768 + 1) = v7;
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v9 = __ldxr(p_shared_owners);
          while (__stxr(v9 + 1, p_shared_owners));
        }
        v769 = 0;
        v770 = 0.0;
        LOBYTE(v771) = 0;
        if (v6)
          LOBYTE(v6) = (*(uint64_t (**)(void *, uint64_t *))(*(_QWORD *)v6 + 48))(v6, &v769);
        LOBYTE(v771) = (_BYTE)v6;
        if (!v7)
          goto LABEL_15;
        v10 = (unint64_t *)&v7->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
          v12 = (std::__shared_weak_count *)__p[1];
          if (!__p[1])
            goto LABEL_21;
        }
        else
        {
LABEL_15:
          v12 = (std::__shared_weak_count *)__p[1];
          if (!__p[1])
            goto LABEL_21;
        }
        v13 = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
LABEL_21:
        if (!(_BYTE)v771)
          goto LABEL_48;
        v15 = *(char ***)(v5 + 16);
        v16 = *v15;
        v17 = v15[1];
        if (v16 == v17)
        {
          v21 = 1.79769313e308;
          v22 = -1.79769313e308;
          v19 = 1.79769313e308;
          v20 = -1.79769313e308;
          goto LABEL_31;
        }
        v18 = v17 - v16 - 16;
        if (v18 < 0x30)
        {
          v19 = 1.79769313e308;
          v20 = -1.79769313e308;
          v21 = 1.79769313e308;
          v22 = -1.79769313e308;
          goto LABEL_30;
        }
        v23 = (v18 >> 4) + 1;
        v24 = (float64x2_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
        v25 = (float64x2_t)vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
        v26 = (const double *)(v16 + 32);
        v27 = v23 & 0x1FFFFFFFFFFFFFFCLL;
        v28 = v25;
        v29 = v24;
        v30 = v24;
        v31 = v24;
        v32 = v25;
        v33 = v25;
        do
        {
          v34 = v26 - 4;
          v778 = vld2q_f64(v34);
          v781 = vld2q_f64(v26);
          v24 = vminnmq_f64(v778.val[0], v24);
          v29 = vminnmq_f64(v781.val[0], v29);
          v32 = vmaxnmq_f64(v32, v778.val[0]);
          v33 = vmaxnmq_f64(v33, v781.val[0]);
          v30 = vminnmq_f64(v778.val[1], v30);
          v31 = vminnmq_f64(v781.val[1], v31);
          v25 = vmaxnmq_f64(v25, v778.val[1]);
          v28 = vmaxnmq_f64(v28, v781.val[1]);
          v26 += 8;
          v27 -= 4;
        }
        while (v27);
        v22 = vmaxnmvq_f64(vmaxnmq_f64(v32, v33));
        v21 = vminnmvq_f64(vminnmq_f64(v30, v31));
        v19 = vminnmvq_f64(vminnmq_f64(v24, v29));
        v20 = vmaxnmvq_f64(vmaxnmq_f64(v25, v28));
        if (v23 != (v23 & 0x1FFFFFFFFFFFFFFCLL))
        {
          v16 += 16 * (v23 & 0x1FFFFFFFFFFFFFFCLL);
          do
          {
LABEL_30:
            v35 = *(double *)v16;
            v36 = *((double *)v16 + 1);
            v16 += 16;
            v19 = fmin(v35, v19);
            v22 = fmax(v22, v35);
            v21 = fmin(v36, v21);
            v20 = fmax(v20, v36);
          }
          while (v16 != v17);
        }
LABEL_31:
        v37 = fmin(*(double *)(a1 + 48), *(double *)(a1 + 40)) * 0.001953125;
        if (v37 == 0.0)
          goto LABEL_48;
        v38 = *(_BYTE *)(a1 + 57);
        v39 = *(_DWORD *)(a1 + 64);
        v40 = *(_DWORD *)(a1 + 60);
        v2 = *(_QWORD *)(v768 + 24);
        v41 = *(unsigned __int8 *)(v2 + 12);
        if (v41 != 2)
          goto LABEL_35;
        if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(*(_QWORD *)(v768 + 24), 0x1D7u, 0) & 1) == 0)
        {
          v41 = 1;
LABEL_35:
          hasValueForKeyAtEnd = gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v2, 0x1D7u, v41);
          v43 = 0.0;
          if (!hasValueForKeyAtEnd)
            goto LABEL_47;
        }
        v44 = *(float **)v2;
        if (*(_QWORD *)v2
          && (v45 = *v44, LODWORD(v44) = *v44 == 1.0, *(_BYTE *)(v2 + 10))
          && (v45 != 0.0 ? (v46 = v45 == 1.0) : (v46 = 1), !v46)
          || (v47 = *(unsigned __int8 *)(v2 + v44 + 11), v45 = 0.0, v47 == 2))
        {
          LOBYTE(v763) = 1;
          LOBYTE(__p[0]) = 1;
          v48 = (float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v2, 0x1D7u, 0, &v763);
          v49 = *v48
              + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v2, 0x1D7u, 1u, __p)- *v48)* v45);
        }
        else
        {
          v49 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v2, 0x1D7u, v47, 0);
        }
        v43 = v49;
        a2 = v728;
LABEL_47:
        v50 = (double)(1 << v38);
        v51 = 1.0 / v50 * (double)v39;
        v52 = 1.0 / v50 * (double)((1 << v38) + ~v40);
        v53 = (v22 - v51) * v50;
        v54 = (v20 - v52) * v50;
        *(float *)&v51 = (v51 - v19) * v50;
        *(float *)&v50 = (v52 - v21) * v50;
        if (fmax(v53 + *(float *)&v51, v54 + *(float *)&v50) / v37 > v43)
        {
LABEL_48:
          gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v768);
          v56 = *(char ***)(v5 + 16);
          v55 = *(_QWORD *)(v5 + 24);
          *(_QWORD *)&v768 = v56;
          *((_QWORD *)&v768 + 1) = v55;
          if (v55)
          {
            v57 = (unint64_t *)(v55 + 8);
            do
              v58 = __ldxr(v57);
            while (__stxr(v58 + 1, v57));
            v56 = *(char ***)(v5 + 16);
          }
          LOWORD(v769) = *(_WORD *)(v5 + 32);
          v59 = *v56;
          v60 = v56[1];
          if (v59 == v60)
          {
            v62 = 1.79769313e308;
          }
          else
          {
            v61 = v60 - v59 - 16;
            if (v61 >= 0x40)
            {
              v63 = (v61 >> 4) + 1;
              v64 = v63 & 3;
              if ((v63 & 3) == 0)
                v64 = 4;
              v65 = v63 - v64;
              v66 = 16 * v65;
              v67 = (const double *)(v59 + 32);
              v68 = (float64x2_t)v734;
              v69 = (float64x2_t)v734;
              do
              {
                v70 = v67 - 4;
                v71 = (unsigned __int128)vld2q_f64(v70);
                v72 = (unsigned __int128)vld2q_f64(v67);
                v69 = vminnmq_f64((float64x2_t)v71, v69);
                v68 = vminnmq_f64((float64x2_t)v72, v68);
                v67 += 8;
                v65 -= 4;
              }
              while (v65);
              v59 += v66;
              v62 = vminnmvq_f64(vminnmq_f64(v69, v68));
            }
            else
            {
              v62 = 1.79769313e308;
            }
            do
            {
              v73 = *(double *)v59;
              v59 += 16;
              v62 = fmin(v73, v62);
            }
            while (v59 != v60);
          }
          v770 = v62;
          LOBYTE(v771) = 1;
          std::priority_queue<md::MaskingOverlayMeshProcessor::_unionPolygons(std::list<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>> &)::PolygonEdge,std::vector<md::MaskingOverlayMeshProcessor::_unionPolygons(std::list<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>> &)::PolygonEdge,std::allocator<md::MaskingOverlayMeshProcessor::_unionPolygons(std::list<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>> &)::PolygonEdge>>,std::less<md::MaskingOverlayMeshProcessor::_unionPolygons(std::list<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>> &)::PolygonEdge>>::push((uint64_t *)&v748, (uint64_t)&v768);
          v74 = (std::__shared_weak_count *)*((_QWORD *)&v768 + 1);
          if (*((_QWORD *)&v768 + 1))
          {
            v75 = (unint64_t *)(*((_QWORD *)&v768 + 1) + 8);
            do
              v76 = __ldaxr(v75);
            while (__stlxr(v76 - 1, v75));
            if (!v76)
            {
              ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
              std::__shared_weak_count::__release_weak(v74);
            }
          }
          v78 = *(char ***)(v5 + 16);
          v77 = *(_QWORD *)(v5 + 24);
          *(_QWORD *)&v768 = v78;
          *((_QWORD *)&v768 + 1) = v77;
          if (v77)
          {
            v79 = (unint64_t *)(v77 + 8);
            do
              v80 = __ldxr(v79);
            while (__stxr(v80 + 1, v79));
            v78 = *(char ***)(v5 + 16);
          }
          LOWORD(v769) = *(_WORD *)(v5 + 32);
          v81 = *v78;
          v82 = v78[1];
          if (v81 == v82)
          {
            v84 = -1.79769313e308;
          }
          else
          {
            v83 = v82 - v81 - 16;
            if (v83 >= 0x40)
            {
              v85 = (v83 >> 4) + 1;
              v86 = v85 & 3;
              if ((v85 & 3) == 0)
                v86 = 4;
              v87 = v85 - v86;
              v88 = 16 * v87;
              v89 = (const double *)(v81 + 32);
              v90 = (float64x2_t)v733;
              v91 = (float64x2_t)v733;
              do
              {
                v92 = v89 - 4;
                v93 = (unsigned __int128)vld2q_f64(v92);
                v94 = (unsigned __int128)vld2q_f64(v89);
                v91 = vmaxnmq_f64(v91, (float64x2_t)v93);
                v90 = vmaxnmq_f64(v90, (float64x2_t)v94);
                v89 += 8;
                v87 -= 4;
              }
              while (v87);
              v81 += v88;
              v84 = vmaxnmvq_f64(vmaxnmq_f64(v91, v90));
            }
            else
            {
              v84 = -1.79769313e308;
            }
            do
            {
              v95 = *(double *)v81;
              v81 += 16;
              v84 = fmax(v84, v95);
            }
            while (v81 != v82);
          }
          v770 = v84;
          LOBYTE(v771) = 0;
          std::priority_queue<md::MaskingOverlayMeshProcessor::_unionPolygons(std::list<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>> &)::PolygonEdge,std::vector<md::MaskingOverlayMeshProcessor::_unionPolygons(std::list<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>> &)::PolygonEdge,std::allocator<md::MaskingOverlayMeshProcessor::_unionPolygons(std::list<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>> &)::PolygonEdge>>,std::less<md::MaskingOverlayMeshProcessor::_unionPolygons(std::list<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>> &)::PolygonEdge>>::push((uint64_t *)&v748, (uint64_t)&v768);
          v2 = *((_QWORD *)&v768 + 1);
          if (*((_QWORD *)&v768 + 1))
          {
            v96 = (unint64_t *)(*((_QWORD *)&v768 + 1) + 8);
            do
              v97 = __ldaxr(v96);
            while (__stlxr(v97 - 1, v96));
            if (!v97)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
              std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v2);
            }
          }
          goto LABEL_5;
        }
        gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v768);
LABEL_5:
        v5 = *(_QWORD *)(v5 + 8);
      }
      while ((uint64_t *)v5 != a2);
    }
    if (a2[2])
    {
      v98 = *a2;
      v99 = (uint64_t *)a2[1];
      v100 = *v99;
      *(_QWORD *)(v100 + 8) = *(_QWORD *)(*a2 + 8);
      **(_QWORD **)(v98 + 8) = v100;
      a2[2] = 0;
      if (v99 != a2)
      {
        do
        {
          v103 = (uint64_t *)v99[1];
          v104 = (std::__shared_weak_count *)v99[3];
          if (v104)
          {
            v105 = (unint64_t *)&v104->__shared_owners_;
            do
              v106 = __ldaxr(v105);
            while (__stlxr(v106 - 1, v105));
            if (!v106)
            {
              ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
              std::__shared_weak_count::__release_weak(v104);
            }
          }
          operator delete(v99);
          v99 = v103;
        }
        while (v103 != a2);
      }
    }
    *(_OWORD *)v745 = 0u;
    *(_OWORD *)v746 = 0u;
    v747 = 1.0;
    v743 = 0;
    v744 = 0uLL;
    v102 = (unint64_t *)v748;
    v101 = v749;
    if (v748 != v749)
    {
      v727 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
      v726 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
      while (1)
      {
        v107 = (std::__shared_weak_count *)v102[1];
        v739 = *v102;
        v740 = v107;
        if (v107)
        {
          v108 = (unint64_t *)&v107->__shared_owners_;
          do
            v109 = __ldxr(v108);
          while (__stxr(v109 + 1, v108));
        }
        v110 = *((_WORD *)v102 + 8);
        v741 = v110;
        v742 = *((_BYTE *)v102 + 32);
        if (v101 - (_BYTE *)v102 >= 41)
        {
          v111 = 0;
          v112 = 0xCCCCCCCCCCCCCCCDLL * ((v101 - (_BYTE *)v102) >> 3);
          v731 = (char **)*v102;
          v735 = (char **)v102[1];
          *v102 = 0;
          v102[1] = 0;
          *(_QWORD *)((char *)&v768 + 6) = v102[3];
          BYTE14(v768) = *((_BYTE *)v102 + 32);
          v113 = (char ***)v102;
          while (1)
          {
            v116 = v113;
            v117 = v111 + 1;
            v113 += 5 * v111 + 5;
            v118 = 2 * v111;
            v111 = (2 * v111) | 1;
            v119 = v118 + 2;
            if (v118 + 2 < v112)
              break;
LABEL_136:
            v170 = *(_OWORD *)v113;
            *v113 = 0;
            v113[1] = 0;
            v171 = (std::__shared_weak_count *)v116[1];
            *(_OWORD *)v116 = v170;
            if (v171)
            {
              v172 = (unint64_t *)&v171->__shared_owners_;
              do
                v173 = __ldaxr(v172);
              while (__stlxr(v173 - 1, v172));
              if (!v173)
              {
                ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
                std::__shared_weak_count::__release_weak(v171);
              }
            }
            *((_WORD *)v116 + 8) = *((_WORD *)v113 + 8);
            v115 = v113 + 3;
            v114 = v113[3];
            *((_BYTE *)v116 + 32) = *((_BYTE *)v113 + 32);
            v116[3] = v114;
            if (v111 > (uint64_t)((unint64_t)(v112 - 2) >> 1))
            {
              if (v113 == (char ***)(v101 - 40))
              {
                v2 = (uint64_t)v113[1];
                *v113 = v731;
                v113[1] = v735;
                if (v2)
                {
                  v181 = (unint64_t *)(v2 + 8);
                  do
                    v182 = __ldaxr(v181);
                  while (__stlxr(v182 - 1, v181));
                  if (!v182)
                  {
                    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
                    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v2);
                  }
                }
                *((_WORD *)v113 + 8) = v110;
                *v115 = *(_QWORD *)((char *)&v768 + 6);
                *((_BYTE *)v113 + 32) = BYTE14(v768);
              }
              else
              {
                v174 = *(_OWORD *)(v101 - 40);
                *((_QWORD *)v101 - 5) = 0;
                *((_QWORD *)v101 - 4) = 0;
                v175 = (std::__shared_weak_count *)v113[1];
                *(_OWORD *)v113 = v174;
                if (v175)
                {
                  v176 = (unint64_t *)&v175->__shared_owners_;
                  do
                    v177 = __ldaxr(v176);
                  while (__stlxr(v177 - 1, v176));
                  if (!v177)
                  {
                    ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
                    std::__shared_weak_count::__release_weak(v175);
                  }
                }
                *((_WORD *)v113 + 8) = *((_WORD *)v101 - 12);
                v178 = *((_QWORD *)v101 - 2);
                *((_BYTE *)v113 + 32) = *(v101 - 8);
                *v115 = v178;
                v2 = *((_QWORD *)v101 - 4);
                *((_QWORD *)v101 - 5) = v731;
                *((_QWORD *)v101 - 4) = v735;
                if (v2)
                {
                  v179 = (unint64_t *)(v2 + 8);
                  do
                    v180 = __ldaxr(v179);
                  while (__stlxr(v180 - 1, v179));
                  if (!v180)
                  {
                    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
                    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v2);
                  }
                }
                *((_WORD *)v101 - 12) = v110;
                *((_QWORD *)v101 - 2) = *(_QWORD *)((char *)&v768 + 6);
                *(v101 - 8) = BYTE14(v768);
                std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,std::less<md::MaskingOverlayMeshProcessor::_unionPolygons(std::list<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>> &)::PolygonEdge> &,std::__wrap_iter<md::MaskingOverlayMeshProcessor::_unionPolygons(std::list<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>> &)::PolygonEdge*>>((uint64_t)v102, (uint64_t)(v113 + 5), 0xCCCCCCCCCCCCCCCDLL * (((char *)(v113 + 5) - (char *)v102) >> 3));
              }
              v101 = v749;
              goto LABEL_160;
            }
          }
          v120 = v113 + 5;
          v121 = *(double *)&v116[5 * v117 + 3];
          v122 = *((double *)v113 + 8);
          if (vabdd_f64(v121, v122) > 1.0e-12)
          {
            v123 = v121 > v122;
            goto LABEL_134;
          }
          v124 = LOBYTE(v116[5 * v117 + 4]);
          v125 = *((unsigned __int8 *)v113 + 72);
          if (v124 != v125)
          {
            v123 = v124 < v125;
LABEL_134:
            if (v123)
            {
              v113 += 5;
              v111 = v119;
            }
            goto LABEL_136;
          }
          v126 = **v113;
          v127 = (*v113)[1];
          if (v126 == v127)
          {
            v131 = 1.79769313e308;
            v132 = -1.79769313e308;
            v129 = 1.79769313e308;
            v130 = -1.79769313e308;
            goto LABEL_117;
          }
          v128 = v127 - v126 - 16;
          if (v128 >= 0x30)
          {
            v133 = (v128 >> 4) + 1;
            v134 = (float64x2_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
            v135 = (float64x2_t)vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
            v136 = (const double *)(v126 + 32);
            v137 = v133 & 0x1FFFFFFFFFFFFFFCLL;
            v138 = v135;
            v139 = v134;
            v140 = v134;
            v141 = v134;
            v142 = v135;
            v143 = v135;
            do
            {
              v144 = v136 - 4;
              v779 = vld2q_f64(v144);
              v782 = vld2q_f64(v136);
              v134 = vminnmq_f64(v779.val[0], v134);
              v139 = vminnmq_f64(v782.val[0], v139);
              v142 = vmaxnmq_f64(v142, v779.val[0]);
              v143 = vmaxnmq_f64(v143, v782.val[0]);
              v140 = vminnmq_f64(v779.val[1], v140);
              v141 = vminnmq_f64(v782.val[1], v141);
              v135 = vmaxnmq_f64(v135, v779.val[1]);
              v138 = vmaxnmq_f64(v138, v782.val[1]);
              v136 += 8;
              v137 -= 4;
            }
            while (v137);
            v132 = vmaxnmvq_f64(vmaxnmq_f64(v142, v143));
            v131 = vminnmvq_f64(vminnmq_f64(v140, v141));
            v129 = vminnmvq_f64(vminnmq_f64(v134, v139));
            v130 = vmaxnmvq_f64(vmaxnmq_f64(v135, v138));
            if (v133 == (v133 & 0x1FFFFFFFFFFFFFFCLL))
            {
LABEL_117:
              v147 = **v120;
              v148 = (*v120)[1];
              if (v147 == v148)
              {
                v152 = 1.79769313e308;
                v153 = -1.79769313e308;
                v150 = 1.79769313e308;
                v151 = -1.79769313e308;
              }
              else
              {
                v149 = v148 - v147 - 16;
                if (v149 >= 0x30)
                {
                  v154 = (v149 >> 4) + 1;
                  v155 = (const double *)(v147 + 32);
                  v156 = v154 & 0x1FFFFFFFFFFFFFFCLL;
                  v158 = (float64x2_t)v726;
                  v157 = (float64x2_t)v727;
                  v159 = (float64x2_t)v726;
                  v160 = (float64x2_t)v726;
                  v161 = (float64x2_t)v727;
                  v162 = (float64x2_t)v727;
                  v163 = (float64x2_t)v727;
                  v164 = (float64x2_t)v726;
                  do
                  {
                    v165 = v155 - 4;
                    v784 = vld2q_f64(v165);
                    v786 = vld2q_f64(v155);
                    v161 = vminnmq_f64(v784.val[0], v161);
                    v162 = vminnmq_f64(v786.val[0], v162);
                    v164 = vmaxnmq_f64(v164, v784.val[0]);
                    v158 = vmaxnmq_f64(v158, v786.val[0]);
                    v163 = vminnmq_f64(v784.val[1], v163);
                    v157 = vminnmq_f64(v786.val[1], v157);
                    v159 = vmaxnmq_f64(v159, v784.val[1]);
                    v160 = vmaxnmq_f64(v160, v786.val[1]);
                    v155 += 8;
                    v156 -= 4;
                  }
                  while (v156);
                  v153 = vmaxnmvq_f64(vmaxnmq_f64(v164, v158));
                  v152 = vminnmvq_f64(vminnmq_f64(v163, v157));
                  v150 = vminnmvq_f64(vminnmq_f64(v161, v162));
                  v151 = vmaxnmvq_f64(vmaxnmq_f64(v159, v160));
                  if (v154 == (v154 & 0x1FFFFFFFFFFFFFFCLL))
                    goto LABEL_126;
                  v147 += 16 * (v154 & 0x1FFFFFFFFFFFFFFCLL);
                }
                else
                {
                  v150 = 1.79769313e308;
                  v151 = -1.79769313e308;
                  v152 = 1.79769313e308;
                  v153 = -1.79769313e308;
                }
                do
                {
                  v166 = *(double *)v147;
                  v167 = *((double *)v147 + 1);
                  v147 += 16;
                  v150 = fmin(v166, v150);
                  v153 = fmax(v153, v166);
                  v152 = fmin(v167, v152);
                  v151 = fmax(v151, v167);
                }
                while (v147 != v148);
              }
LABEL_126:
              if (v124)
                v168 = v132;
              else
                v168 = v129;
              if (v124)
                v169 = v153;
              else
                v169 = v150;
              v123 = v168 > v169;
              if (vabdd_f64(v168, v169) <= 1.0e-12)
                v123 = (v130 - v131) * (v132 - v129) > (v151 - v152) * (v153 - v150);
              goto LABEL_134;
            }
            v126 += 16 * (v133 & 0x1FFFFFFFFFFFFFFCLL);
          }
          else
          {
            v129 = 1.79769313e308;
            v130 = -1.79769313e308;
            v131 = 1.79769313e308;
            v132 = -1.79769313e308;
          }
          do
          {
            v145 = *(double *)v126;
            v146 = *((double *)v126 + 1);
            v126 += 16;
            v129 = fmin(v145, v129);
            v132 = fmax(v132, v145);
            v131 = fmin(v146, v131);
            v130 = fmax(v130, v146);
          }
          while (v126 != v127);
          goto LABEL_117;
        }
LABEL_160:
        v183 = (std::__shared_weak_count *)*((_QWORD *)v101 - 4);
        if (v183)
        {
          v184 = (unint64_t *)&v183->__shared_owners_;
          do
            v185 = __ldaxr(v184);
          while (__stlxr(v185 - 1, v184));
          if (!v185)
          {
            ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
            std::__shared_weak_count::__release_weak(v183);
          }
        }
        v749 = v101 - 40;
        if (v742)
          break;
        if (v745[1])
        {
          v621 = 0x9DDFEA08EB382D69 * (((8 * v739) + 8) ^ HIDWORD(v739));
          v622 = 0x9DDFEA08EB382D69 * (HIDWORD(v739) ^ (v621 >> 47) ^ v621);
          v623 = 0x9DDFEA08EB382D69 * (v622 ^ (v622 >> 47));
          v624 = (uint8x8_t)vcnt_s8((int8x8_t)v745[1]);
          v624.i16[0] = vaddlv_u8(v624);
          if (v624.u32[0] > 1uLL)
          {
            v625 = v623;
            if ((void *)v623 >= v745[1])
              v625 = v623 % (unint64_t)v745[1];
          }
          else
          {
            v625 = v623 & ((unint64_t)v745[1] - 1);
          }
          v652 = (uint64_t *)*((_QWORD *)v745[0] + v625);
          if (v652)
          {
            v653 = *v652;
            if (*v652)
            {
              if (v624.u32[0] < 2uLL)
              {
                while (1)
                {
                  v655 = *(_QWORD *)(v653 + 8);
                  if (v655 == v623)
                  {
                    if (*(_QWORD *)(v653 + 16) == v739
                      && __PAIR64__(*(unsigned __int8 *)(v653 + 33), *(unsigned __int8 *)(v653 + 32)) == __PAIR64__(HIBYTE(v110), v110))
                    {
                      goto LABEL_874;
                    }
                  }
                  else if ((v655 & ((uint64_t)v745[1] - 1)) != v625)
                  {
                    goto LABEL_905;
                  }
                  v653 = *(_QWORD *)v653;
                  if (!v653)
                    goto LABEL_905;
                }
              }
              do
              {
                v654 = *(_QWORD *)(v653 + 8);
                if (v654 == v623)
                {
                  if (*(_QWORD *)(v653 + 16) == v739
                    && __PAIR64__(*(unsigned __int8 *)(v653 + 33), *(unsigned __int8 *)(v653 + 32)) == __PAIR64__(HIBYTE(v110), v110))
                  {
LABEL_874:
                    v656 = operator new(0x28uLL);
                    v656[2] = *(_QWORD *)(v653 + 16);
                    v657 = *(_QWORD *)(v653 + 24);
                    v656[3] = v657;
                    if (v657)
                    {
                      v658 = (unint64_t *)(v657 + 8);
                      do
                        v659 = __ldxr(v658);
                      while (__stxr(v659 + 1, v658));
                    }
                    *((_WORD *)v656 + 16) = *(_WORD *)(v653 + 32);
                    v660 = *v728;
                    *v656 = *v728;
                    v656[1] = v728;
                    *(_QWORD *)(v660 + 8) = v656;
                    *v728 = (uint64_t)v656;
                    ++v728[2];
                    std::unordered_set<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>,md::MaskingOverlayMeshProcessor::_unionPolygons(std::list<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>> &)::PolygonPairHash,std::equal_to<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>>,std::allocator<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>>>::erase[abi:nn180100](v745, (uint64_t *)v653);
                    break;
                  }
                }
                else
                {
                  if ((void *)v654 >= v745[1])
                    v654 %= (unint64_t)v745[1];
                  if (v654 != v625)
                    break;
                }
                v653 = *(_QWORD *)v653;
              }
              while (v653);
            }
          }
        }
LABEL_905:
        if (v740)
        {
          v667 = (unint64_t *)&v740->__shared_owners_;
          do
            v668 = __ldaxr(v667);
          while (__stlxr(v668 - 1, v667));
          if (!v668)
          {
            ((void (*)(std::__shared_weak_count *))v740->__on_zero_shared)(v740);
            std::__shared_weak_count::__release_weak(v740);
          }
        }
        v102 = (unint64_t *)v748;
        v101 = v749;
        if (v748 == v749)
          goto LABEL_919;
      }
      v186 = (uint64_t **)v746[0];
      if (!v746[0])
      {
LABEL_167:
        v187 = 0x9DDFEA08EB382D69 * (((8 * v739) + 8) ^ HIDWORD(v739));
        v188 = 0x9DDFEA08EB382D69 * (HIDWORD(v739) ^ (v187 >> 47) ^ v187);
        v189 = v188 ^ (v188 >> 47);
        v190 = 0x9DDFEA08EB382D69 * v189;
        v191 = (unint64_t)v745[1];
        if (v745[1])
        {
          v192 = (uint8x8_t)vcnt_s8((int8x8_t)v745[1]);
          v192.i16[0] = vaddlv_u8(v192);
          if (v192.u32[0] > 1uLL)
          {
            v2 = 0x9DDFEA08EB382D69 * v189;
            if ((void *)v190 >= v745[1])
              v2 = v190 % (unint64_t)v745[1];
          }
          else
          {
            v2 = v190 & ((unint64_t)v745[1] - 1);
          }
          v626 = (uint64_t ***)*((_QWORD *)v745[0] + v2);
          if (v626)
          {
            v627 = *v626;
            if (v627)
            {
              if (v192.u32[0] < 2uLL)
              {
                while (1)
                {
                  v629 = v627[1];
                  if (v629 == (uint64_t *)v190)
                  {
                    if (v627[2] == (uint64_t *)v739
                      && __PAIR64__(*((unsigned __int8 *)v627 + 33), *((unsigned __int8 *)v627 + 32)) == __PAIR64__(HIBYTE(v741), v741))
                    {
                      goto LABEL_905;
                    }
                  }
                  else if (((unint64_t)v629 & ((unint64_t)v745[1] - 1)) != v2)
                  {
                    goto LABEL_819;
                  }
                  v627 = (uint64_t **)*v627;
                  if (!v627)
                    goto LABEL_819;
                }
              }
              do
              {
                v628 = (unint64_t)v627[1];
                if (v628 == v190)
                {
                  if (v627[2] == (uint64_t *)v739
                    && __PAIR64__(*((unsigned __int8 *)v627 + 33), *((unsigned __int8 *)v627 + 32)) == __PAIR64__(HIBYTE(v741), v741))
                  {
                    goto LABEL_905;
                  }
                }
                else
                {
                  if ((void *)v628 >= v745[1])
                    v628 %= (unint64_t)v745[1];
                  if (v628 != v2)
                    break;
                }
                v627 = (uint64_t **)*v627;
              }
              while (v627);
            }
          }
        }
LABEL_819:
        v630 = operator new(0x28uLL);
        v631 = v630;
        *v630 = 0;
        v630[1] = v190;
        v630[2] = v739;
        v630[3] = v740;
        if (v740)
        {
          v632 = (unint64_t *)&v740->__shared_owners_;
          do
            v633 = __ldxr(v632);
          while (__stxr(v633 + 1, v632));
        }
        *((_WORD *)v630 + 16) = v741;
        v634 = (float)((unint64_t)v746[1] + 1);
        if (!v191 || (float)(v747 * (float)v191) < v634)
        {
          v635 = (v191 & (v191 - 1)) == 0;
          if (v191 < 3)
            v635 = 0;
          v636 = (2 * v191) | !v635;
          v637 = vcvtps_u32_f32(v634 / v747);
          if (v636 <= v637)
            prime = v637;
          else
            prime = v636;
          if (prime == 1)
          {
            prime = 2;
          }
          else if ((prime & (prime - 1)) != 0)
          {
            prime = std::__next_prime(prime);
          }
          v191 = (unint64_t)v745[1];
          if ((void *)prime > v745[1])
          {
LABEL_834:
            if (prime >> 61)
LABEL_983:
              std::__throw_bad_array_new_length[abi:nn180100]();
            v639 = operator new(8 * prime);
            v640 = v745[0];
            v745[0] = v639;
            if (v640)
              operator delete(v640);
            v641 = 0;
            v745[1] = (void *)prime;
            do
              *((_QWORD *)v745[0] + v641++) = 0;
            while (prime != v641);
            v642 = (_QWORD **)v746[0];
            if (!v746[0])
              goto LABEL_881;
            v643 = *((_QWORD *)v746[0] + 1);
            v644 = prime - 1;
            if ((prime & (prime - 1)) == 0)
            {
              v645 = v643 & v644;
              *((_QWORD *)v745[0] + v645) = v746;
              for (i = *v642; *v642; i = *v642)
              {
                v647 = i[1] & v644;
                if (v647 == v645)
                {
                  v642 = (_QWORD **)i;
                }
                else if (*((_QWORD *)v745[0] + v647))
                {
                  *v642 = (_QWORD *)*i;
                  v648 = 8 * v647;
                  *i = **(_QWORD **)((char *)v745[0] + v648);
                  **(_QWORD **)((char *)v745[0] + v648) = i;
                }
                else
                {
                  *((_QWORD *)v745[0] + v647) = v642;
                  v642 = (_QWORD **)i;
                  v645 = v647;
                }
              }
              goto LABEL_881;
            }
            if (v643 >= prime)
              v643 %= prime;
            *((_QWORD *)v745[0] + v643) = v746;
            v661 = *v642;
            if (!*v642)
            {
LABEL_881:
              v191 = prime;
              goto LABEL_882;
            }
            while (2)
            {
              v663 = v661[1];
              if (v663 >= prime)
                v663 %= prime;
              if (v663 != v643)
              {
                if (!*((_QWORD *)v745[0] + v663))
                {
                  *((_QWORD *)v745[0] + v663) = v642;
LABEL_886:
                  v642 = (_QWORD **)v661;
                  v661 = (_QWORD *)*v661;
                  v643 = v663;
                  if (!v661)
                    goto LABEL_881;
                  continue;
                }
                *v642 = (_QWORD *)*v661;
                v662 = 8 * v663;
                *v661 = **(_QWORD **)((char *)v745[0] + v662);
                **(_QWORD **)((char *)v745[0] + v662) = v661;
                v661 = v642;
              }
              break;
            }
            v663 = v643;
            goto LABEL_886;
          }
          if ((void *)prime < v745[1])
          {
            v649 = vcvtps_u32_f32((float)(unint64_t)v746[1] / v747);
            if (v745[1] < (void *)3
              || (v650 = (uint8x8_t)vcnt_s8((int8x8_t)v745[1]), v650.i16[0] = vaddlv_u8(v650), v650.u32[0] > 1uLL))
            {
              v649 = std::__next_prime(v649);
            }
            else
            {
              v651 = 1 << -(char)__clz(v649 - 1);
              if (v649 >= 2)
                v649 = v651;
            }
            if (prime <= v649)
              prime = v649;
            if (prime >= v191)
            {
              v191 = (unint64_t)v745[1];
            }
            else
            {
              if (prime)
                goto LABEL_834;
              v669 = v745[0];
              v745[0] = 0;
              if (v669)
                operator delete(v669);
              v191 = 0;
              v745[1] = 0;
            }
          }
LABEL_882:
          if ((v191 & (v191 - 1)) != 0)
          {
            if (v190 >= v191)
              v2 = v190 % v191;
            else
              v2 = v190;
          }
          else
          {
            v2 = (v191 - 1) & v190;
          }
        }
        v664 = v745[0];
        v665 = (_QWORD *)*((_QWORD *)v745[0] + v2);
        if (v665)
        {
          *(_QWORD *)v631 = *v665;
          goto LABEL_903;
        }
        *(void **)v631 = v746[0];
        v746[0] = v631;
        v664[v2] = v746;
        if (*(_QWORD *)v631)
        {
          v666 = *(_QWORD *)(*(_QWORD *)v631 + 8);
          if ((v191 & (v191 - 1)) != 0)
          {
            if (v666 >= v191)
              v666 %= v191;
          }
          else
          {
            v666 &= v191 - 1;
          }
          v665 = (char *)v745[0] + 8 * v666;
LABEL_903:
          *v665 = v631;
        }
        ++v746[1];
        goto LABEL_905;
      }
      while (1)
      {
        v200 = (char *)v744;
        if ((char *)v744 != v743)
        {
          v201 = (char *)v744;
          do
          {
            v203 = (void *)*((_QWORD *)v201 - 3);
            v201 -= 24;
            v202 = v203;
            if (v203)
            {
              *((_QWORD *)v200 - 2) = v202;
              operator delete(v202);
            }
            v200 = v201;
          }
          while (v201 != v743);
        }
        *(_QWORD *)&v744 = v743;
        v2 = v739;
        v204 = *(char **)v739;
        v205 = *(char **)(v739 + 8);
        if (*(char **)v739 == v205)
        {
          v209 = 1.79769313e308;
          v210 = -1.79769313e308;
          v207 = 1.79769313e308;
          v208 = -1.79769313e308;
          goto LABEL_196;
        }
        v206 = v205 - v204 - 16;
        if (v206 < 0x30)
          break;
        v211 = (v206 >> 4) + 1;
        v212 = (float64x2_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
        v213 = (float64x2_t)vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
        v214 = (const double *)(v204 + 32);
        v215 = v211 & 0x1FFFFFFFFFFFFFFCLL;
        v216 = v213;
        v217 = v212;
        v218 = v212;
        v219 = v212;
        v220 = v213;
        v221 = v213;
        do
        {
          v222 = v214 - 4;
          v780 = vld2q_f64(v222);
          v783 = vld2q_f64(v214);
          v212 = vminnmq_f64(v780.val[0], v212);
          v217 = vminnmq_f64(v783.val[0], v217);
          v220 = vmaxnmq_f64(v220, v780.val[0]);
          v221 = vmaxnmq_f64(v221, v783.val[0]);
          v218 = vminnmq_f64(v780.val[1], v218);
          v219 = vminnmq_f64(v783.val[1], v219);
          v213 = vmaxnmq_f64(v213, v780.val[1]);
          v216 = vmaxnmq_f64(v216, v783.val[1]);
          v214 += 8;
          v215 -= 4;
        }
        while (v215);
        v210 = vmaxnmvq_f64(vmaxnmq_f64(v220, v221));
        v209 = vminnmvq_f64(vminnmq_f64(v218, v219));
        v207 = vminnmvq_f64(vminnmq_f64(v212, v217));
        v208 = vmaxnmvq_f64(vmaxnmq_f64(v213, v216));
        if (v211 != (v211 & 0x1FFFFFFFFFFFFFFCLL))
        {
          v204 += 16 * (v211 & 0x1FFFFFFFFFFFFFFCLL);
          do
          {
LABEL_195:
            v223 = *(double *)v204;
            v224 = *((double *)v204 + 1);
            v204 += 16;
            v207 = fmin(v223, v207);
            v210 = fmax(v210, v223);
            v209 = fmin(v224, v209);
            v208 = fmax(v208, v224);
          }
          while (v204 != v205);
        }
LABEL_196:
        v732 = (uint64_t *)v186;
        v225 = v186[2];
        v226 = (char *)*v225;
        v227 = (char *)v225[1];
        if ((char *)*v225 == v227)
        {
          v193 = 1.79769313e308;
          v194 = -1.79769313e308;
          v195 = 1.79769313e308;
          v196 = -1.79769313e308;
          goto LABEL_171;
        }
        v228 = v227 - v226 - 16;
        if (v228 < 0x30)
        {
          v195 = 1.79769313e308;
          v196 = -1.79769313e308;
          v193 = 1.79769313e308;
          v194 = -1.79769313e308;
          goto LABEL_203;
        }
        v229 = (v228 >> 4) + 1;
        v230 = (float64x2_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
        v231 = (float64x2_t)vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
        v232 = (const double *)(v226 + 32);
        v233 = v229 & 0x1FFFFFFFFFFFFFFCLL;
        v234 = v231;
        v235 = v230;
        v236 = v230;
        v237 = v230;
        v238 = v231;
        v239 = v231;
        do
        {
          v240 = v232 - 4;
          v785 = vld2q_f64(v240);
          v787 = vld2q_f64(v232);
          v230 = vminnmq_f64(v785.val[0], v230);
          v235 = vminnmq_f64(v787.val[0], v235);
          v238 = vmaxnmq_f64(v238, v785.val[0]);
          v239 = vmaxnmq_f64(v239, v787.val[0]);
          v236 = vminnmq_f64(v785.val[1], v236);
          v237 = vminnmq_f64(v787.val[1], v237);
          v231 = vmaxnmq_f64(v231, v785.val[1]);
          v234 = vmaxnmq_f64(v234, v787.val[1]);
          v232 += 8;
          v233 -= 4;
        }
        while (v233);
        v194 = vmaxnmvq_f64(vmaxnmq_f64(v238, v239));
        v193 = vminnmvq_f64(vminnmq_f64(v236, v237));
        v195 = vminnmvq_f64(vminnmq_f64(v230, v235));
        v196 = vmaxnmvq_f64(vmaxnmq_f64(v231, v234));
        if (v229 != (v229 & 0x1FFFFFFFFFFFFFFCLL))
        {
          v226 += 16 * (v229 & 0x1FFFFFFFFFFFFFFCLL);
          do
          {
LABEL_203:
            v241 = *(double *)v226;
            v242 = *((double *)v226 + 1);
            v226 += 16;
            v195 = fmin(v241, v195);
            v194 = fmax(v194, v241);
            v193 = fmin(v242, v193);
            v196 = fmax(v196, v242);
          }
          while (v226 != v227);
        }
LABEL_171:
        if (v210 <= v195 || v207 >= v194 || v208 <= v193 || v209 >= v196)
          goto LABEL_181;
        v768 = 0uLL;
        v772 = 0;
        v773 = 0;
        v769 = 0;
        v771 = (uint64_t *)&v772;
        v775 = 0;
        v776 = 0;
        v774 = 0;
        v754 = 0;
        v755 = 0;
        v756 = 0;
        v751 = 0;
        v752 = 0;
        v753 = 0;
        std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(0);
        v772 = 0;
        v773 = 0;
        v771 = (uint64_t *)&v772;
        v243 = v774;
        v244 = v775;
        if (v774 != v775)
        {
          do
          {
            if (*v243)
              MEMORY[0x1A1AF4E00](*v243, 0x1020C406C923FA7);
            ++v243;
          }
          while (v243 != v244);
          v243 = v774;
        }
        v775 = v243;
        v760 = &v760;
        v761 = &v760;
        v762 = 0;
        geo::MartinezPolygonUnion<double>::addPolygonPoints(&v768, (uint64_t *)v739, 0);
        geo::MartinezPolygonUnion<double>::addPolygonPoints(&v768, v225, 1);
LABEL_214:
        while (2)
        {
          v247 = *((_QWORD *)&v768 + 1);
          v246 = v768;
          if ((_QWORD)v768 != *((_QWORD *)&v768 + 1))
          {
            v248 = *(_QWORD *)v768;
            v249 = *((_QWORD *)&v768 + 1) - v768;
            if ((uint64_t)(*((_QWORD *)&v768 + 1) - v768) >= 9)
            {
              v250 = *(_QWORD *)v768;
              v251 = 0;
              v252 = v249 >> 3;
              v253 = (unint64_t)((v249 >> 3) - 2) >> 1;
              v254 = (uint64_t *)v768;
              do
              {
                v255 = &v254[v251 + 1];
                v256 = (2 * v251) | 1;
                v257 = 2 * v251 + 2;
                if (v257 < v252
                  && !geo::MartinezPolygonUnion<double>::HorizontalIndex::operator<(*v255, v254[v251 + 2]))
                {
                  ++v255;
                  v256 = v257;
                }
                *v254 = *v255;
                v254 = v255;
                v251 = v256;
              }
              while (v256 <= v253);
              v258 = (uint64_t *)(v247 - 8);
              if (v255 == (uint64_t *)(v247 - 8))
              {
                v248 = v250;
                *v255 = v250;
              }
              else
              {
                *v255 = *v258;
                v248 = v250;
                *v258 = v250;
                v259 = (uint64_t)v255 - v246 + 8;
                if (v259 >= 9)
                {
                  v260 = (((unint64_t)v259 >> 3) - 2) >> 1;
                  v261 = (uint64_t *)(v246 + 8 * v260);
                  v262 = *v261;
                  v263 = *v255;
                  if (!geo::MartinezPolygonUnion<double>::HorizontalIndex::operator<(*v261, *v255))
                  {
                    do
                    {
                      v264 = v261;
                      *v255 = v262;
                      if (!v260)
                        break;
                      v260 = (v260 - 1) >> 1;
                      v261 = (uint64_t *)(v246 + 8 * v260);
                      v262 = *v261;
                      v255 = v264;
                    }
                    while (!geo::MartinezPolygonUnion<double>::HorizontalIndex::operator<(*v261, v263));
                    *v264 = v263;
                  }
                }
              }
            }
            *((_QWORD *)&v768 + 1) -= 8;
            if (*(_BYTE *)(v248 + 36) == 1)
            {
              v763 = (uint64_t *)v248;
              std::__tree<geo::MartinezPolygonUnion<double>::VerticalIndex,std::less<geo::MartinezPolygonUnion<double>::VerticalIndex>,std::allocator<geo::MartinezPolygonUnion<double>::VerticalIndex>>::__emplace_unique_key_args<geo::MartinezPolygonUnion<double>::VerticalIndex,geo::MartinezPolygonUnion<double>::VerticalIndex>(&v771, (uint64_t *)&v763, v248);
              v763 = (uint64_t *)v248;
              v265 = v772;
              v266 = &v772;
              v267 = v772;
              if (v772)
              {
                do
                {
                  v268 = v266;
                  v269 = v267 + 4;
                  v270 = geo::MartinezPolygonUnion<double>::VerticalIndex::operator<((uint64_t *)&v763, v267 + 4);
                  if (v270)
                    v271 = v267;
                  else
                    v271 = v267 + 1;
                  if (v270)
                    v266 = (_QWORD **)v267;
                  else
                    v266 = v268;
                  v267 = (_QWORD *)*v271;
                }
                while (*v271);
                if (v266 == &v772)
                {
                  v273 = 0;
                }
                else
                {
                  v272 = (uint64_t *)(v268 + 4);
                  if (v270)
                    v272 = v269;
                  v273 = *v272;
                }
                v763 = (uint64_t *)v248;
                v275 = (uint64_t *)&v772;
                do
                {
                  v336 = geo::MartinezPolygonUnion<double>::VerticalIndex::operator<(v265 + 4, (uint64_t *)&v763);
                  v337 = v265 + 1;
                  if (!v336)
                  {
                    v337 = v265;
                    v275 = v265;
                  }
                  v265 = (_QWORD *)*v337;
                }
                while (*v337);
              }
              else
              {
                v273 = 0;
                v275 = (uint64_t *)&v772;
              }
              if (v275 == v771)
              {
                v340 = 0;
              }
              else
              {
                v338 = *v275;
                if (*v275)
                {
                  do
                  {
                    v339 = (uint64_t *)v338;
                    v338 = *(_QWORD *)(v338 + 8);
                  }
                  while (v338);
                }
                else
                {
                  do
                  {
                    v339 = (uint64_t *)v275[2];
                    v46 = *v339 == (_QWORD)v275;
                    v275 = v339;
                  }
                  while (v46);
                }
                v340 = v339[4];
                if (v340)
                {
                  if (*(_DWORD *)(v340 + 32) == *(_DWORD *)(v248 + 32))
                  {
                    *(_BYTE *)(v248 + 48) = *(_BYTE *)(v340 + 48);
                    v341 = *(_BYTE *)(v340 + 49) ^ 1;
                  }
                  else
                  {
                    *(_BYTE *)(v248 + 48) = *(_BYTE *)(v340 + 49) ^ 1;
                    v341 = *(_BYTE *)(v340 + 48);
                  }
                  *(_BYTE *)(v248 + 49) = v341;
                }
              }
              geo::MartinezPolygonUnion<double>::possibleIntersects((uint64_t)&v768, v248, v273);
              geo::MartinezPolygonUnion<double>::possibleIntersects((uint64_t)&v768, v248, v340);
              continue;
            }
            v274 = *(_QWORD *)(v248 + 40);
            if (!v274)
              continue;
            if (*(_BYTE *)(v274 + 50))
            {
              if (*(_BYTE *)(v274 + 51) || !*(_BYTE *)(v274 + 52))
                goto LABEL_356;
            }
            else if (*(_BYTE *)(v274 + 48))
            {
              goto LABEL_356;
            }
            v276 = v761;
            if (v761 == &v760)
              goto LABEL_355;
            v277 = &v760;
            v736 = v248;
            v729 = *(_QWORD *)(v248 + 40);
            while (v277 == &v760)
            {
              if (geo::MartinezPolygonUnion<double>::Chain::add((uint64_t)(v276 + 2), (double *)v274, *(_DWORD *)(v274 + 32)))
              {
                v277 = v276;
              }
              else
              {
                v277 = &v760;
              }
LABEL_334:
              v276 = (_QWORD *)v276[1];
              if (v276 == &v760)
              {
                if (v277 == &v760)
                {
LABEL_355:
                  v342 = operator new(0x30uLL);
                  *v342 = 0;
                  v342[1] = 0;
                  v343 = *(_DWORD *)(v274 + 32);
                  v342[2] = 0;
                  v342[3] = 0;
                  v342[4] = 0;
                  v344 = operator new(0x20uLL);
                  v342[2] = v344;
                  v342[4] = v344 + 2;
                  v345 = *(_OWORD *)(v274 + 16);
                  *v344 = *(_OWORD *)v274;
                  v344[1] = v345;
                  v342[3] = v344 + 2;
                  *((_BYTE *)v342 + 40) = 0;
                  *((_DWORD *)v342 + 11) = v343;
                  v346 = v760;
                  v760[1] = v342;
                  *v342 = v346;
                  v342[1] = &v760;
                  v760 = v342;
                  ++v762;
                }
LABEL_356:
                v763 = (uint64_t *)v248;
                v347 = v772;
                v348 = &v772;
                v349 = v772;
                if (v772)
                {
                  do
                  {
                    v350 = v348;
                    v351 = v349 + 4;
                    v352 = geo::MartinezPolygonUnion<double>::VerticalIndex::operator<((uint64_t *)&v763, v349 + 4);
                    if (v352)
                      v353 = v349;
                    else
                      v353 = v349 + 1;
                    if (v352)
                      v348 = (_QWORD **)v349;
                    else
                      v348 = v350;
                    v349 = (_QWORD *)*v353;
                  }
                  while (*v353);
                  if (v348 == &v772)
                  {
                    v355 = 0;
                  }
                  else
                  {
                    v354 = (uint64_t *)(v350 + 4);
                    if (v352)
                      v354 = v351;
                    v355 = *v354;
                  }
                  v763 = (uint64_t *)v248;
                  v356 = (uint64_t *)&v772;
                  do
                  {
                    v357 = geo::MartinezPolygonUnion<double>::VerticalIndex::operator<(v347 + 4, (uint64_t *)&v763);
                    v358 = v347 + 1;
                    if (!v357)
                    {
                      v358 = v347;
                      v356 = v347;
                    }
                    v347 = (_QWORD *)*v358;
                  }
                  while (*v358);
                }
                else
                {
                  v355 = 0;
                  v356 = (uint64_t *)&v772;
                }
                if (v356 == v771)
                {
                  v245 = 0;
                }
                else
                {
                  v359 = *v356;
                  if (*v356)
                  {
                    do
                    {
                      v360 = (uint64_t *)v359;
                      v359 = *(_QWORD *)(v359 + 8);
                    }
                    while (v359);
                  }
                  else
                  {
                    do
                    {
                      v360 = (uint64_t *)v356[2];
                      v46 = *v360 == (_QWORD)v356;
                      v356 = v360;
                    }
                    while (v46);
                  }
                  v245 = v360[4];
                }
                v763 = (uint64_t *)v274;
                std::__tree<geo::MartinezPolygonUnion<double>::VerticalIndex,std::less<geo::MartinezPolygonUnion<double>::VerticalIndex>,std::allocator<geo::MartinezPolygonUnion<double>::VerticalIndex>>::__erase_unique<geo::MartinezPolygonUnion<double>::VerticalIndex>(&v771, (uint64_t *)&v763);
                geo::MartinezPolygonUnion<double>::possibleIntersects((uint64_t)&v768, v245, v355);
                goto LABEL_214;
              }
            }
            v278 = (void **)(v277 + 2);
            while (1)
            {
              v279 = (double **)(v276 + 2);
              v280 = geo::MartinezPolygonUnion<double>::Chain::add((uint64_t)(v276 + 2), (double *)v274, *(_DWORD *)(v274 + 32));
              if (v277 == v276 || !v280)
                goto LABEL_334;
              if (!(*((unsigned __int8 *)v277 + 40) | *((unsigned __int8 *)v276 + 40)))
                break;
              v284 = *v279;
LABEL_326:
              v333 = *v276;
              v334 = (_QWORD *)v276[1];
              *(_QWORD *)(v333 + 8) = v334;
              *(_QWORD *)v276[1] = v333;
              --v762;
              if (v284)
              {
                v276[3] = v284;
                operator delete(v284);
              }
              operator delete(v276);
              v276 = v334;
              if (v334 == &v760)
              {
                if (v277 != &v760)
                  goto LABEL_356;
                goto LABEL_355;
              }
            }
            v282 = (double *)v277[2];
            v283 = (double *)v277[3];
            v284 = *v279;
            if (v282 == v283 || (v285 = (double *)v276[3], v284 == v285))
            {
LABEL_325:
              v248 = v736;
              goto LABEL_326;
            }
            v287 = *v284;
            v286 = v284[1];
            v288 = v284[2] + *v284;
            v289 = v284[3] + v286;
            v290 = *v282;
            if (vabdd_f64(*v282, v288) >= 1.0e-12
              || (v291 = v282[1], vabdd_f64(v291, v289) >= 1.0e-12)
              || fabs(v290 - v287 + v282[2]) >= 1.0e-12
              || fabs(v282[3] - v286 + v291) >= 1.0e-12)
            {
              v296 = *(v285 - 4);
              v295 = *(v285 - 3);
              v297 = *(v285 - 2) + v296;
              v298 = *(v285 - 1) + v295;
              v299 = *(v283 - 4);
              if (vabdd_f64(v299, v297) >= 1.0e-12
                || (v300 = *(v283 - 3), vabdd_f64(v300, v298) >= 1.0e-12)
                || fabs(v299 - v296 + *(v283 - 2)) >= 1.0e-12
                || fabs(*(v283 - 1) - v295 + v300) >= 1.0e-12)
              {
                if (vabdd_f64(v290, v296) >= 1.0e-12
                  || (v301 = v282[1], vabdd_f64(v301, v295) >= 1.0e-12)
                  || fabs(v290 - v297 + v282[2]) >= 1.0e-12
                  || fabs(v282[3] - v298 + v301) >= 1.0e-12)
                {
                  if (vabdd_f64(v299, v287) >= 1.0e-12
                    || (v302 = *(v283 - 3), vabdd_f64(v302, v286) >= 1.0e-12)
                    || fabs(v299 - v288 + *(v283 - 2)) >= 1.0e-12
                    || fabs(*(v283 - 1) - v289 + v302) >= 1.0e-12)
                  {
                    v309 = 1;
                    goto LABEL_321;
                  }
                  v293 = 0;
                  v292 = 0;
                  v294 = 0;
                }
                else
                {
                  v293 = 0;
                  v292 = 1;
                  v294 = 1;
                }
              }
              else
              {
                v294 = 0;
                v293 = 1;
                v292 = 1;
              }
            }
            else
            {
              v292 = 0;
              v293 = 1;
              v294 = 1;
            }
            if ((unint64_t)((char *)v285 - (char *)v284) >= 0x21)
            {
              v303 = ((char *)v285 - (char *)v284) >> 5;
              if ((v294 & 1) == 0)
              {
                v310 = 1;
                v730 = v292;
                while (1)
                {
                  v313 = v303 + ~v310;
                  if (!v292)
                    v313 = v310;
                  v314 = (float64x2_t *)&v284[4 * v313];
                  if ((_DWORD)v293)
                  {
                    v315 = v314[1];
                    *v314 = vaddq_f64(v315, *v314);
                    v314[1] = vnegq_f64(v315);
                  }
                  v316 = v277[4];
                  if ((unint64_t)v283 < v316)
                  {
                    v311 = v314[1];
                    *(float64x2_t *)v283 = *v314;
                    *((float64x2_t *)v283 + 1) = v311;
                    f64 = v283 + 4;
                  }
                  else
                  {
                    v317 = v293;
                    v318 = v278;
                    v319 = (double *)*v278;
                    v320 = ((char *)v283 - (_BYTE *)*v278) >> 5;
                    v321 = v320 + 1;
                    if ((unint64_t)(v320 + 1) >> 59)
                      abort();
                    v322 = v316 - (_QWORD)v319;
                    if (v322 >> 4 > v321)
                      v321 = v322 >> 4;
                    if ((unint64_t)v322 >= 0x7FFFFFFFFFFFFFE0)
                      v323 = 0x7FFFFFFFFFFFFFFLL;
                    else
                      v323 = v321;
                    if (v323)
                    {
                      if (v323 >> 59)
                        goto LABEL_983;
                      v324 = (char *)operator new(32 * v323);
                    }
                    else
                    {
                      v324 = 0;
                    }
                    v325 = v314[1];
                    v326 = (float64x2_t *)&v324[32 * v320];
                    *v326 = *v314;
                    v326[1] = v325;
                    v327 = v326;
                    v278 = v318;
                    if (v283 != v319)
                    {
                      do
                      {
                        v328 = *(float64x2_t *)(v283 - 2);
                        v327[-2] = *(float64x2_t *)(v283 - 4);
                        v327[-1] = v328;
                        v327 -= 2;
                        v283 -= 4;
                      }
                      while (v283 != v319);
                      v283 = (double *)*v318;
                    }
                    v293 = v317;
                    f64 = v326[2].f64;
                    v277[2] = v327;
                    v277[3] = v326 + 2;
                    v277[4] = &v324[32 * v323];
                    if (v283)
                      operator delete(v283);
                    v292 = v730;
                  }
                  v277[3] = f64;
                  ++v310;
                  v284 = (double *)v276[2];
                  v303 = (uint64_t)(v276[3] - (_QWORD)v284) >> 5;
                  v283 = f64;
                  if (v310 >= v303)
                    goto LABEL_320;
                }
              }
              if ((_DWORD)v293)
              {
                v304 = -2;
                v305 = 1;
                do
                {
                  v306 = v303 + v304;
                  if (!v292)
                    v306 = v305;
                  v307 = (float64x2_t *)&v284[4 * v306];
                  v308 = v307[1];
                  *v307 = vaddq_f64(v308, *v307);
                  v307[1] = vnegq_f64(v308);
                  std::vector<gm::LineSegment<double,2>>::insert(v278, *v278, v307);
                  ++v305;
                  v284 = (double *)v276[2];
                  v303 = (uint64_t)(v276[3] - (_QWORD)v284) >> 5;
                  --v304;
                }
                while (v305 < v303);
              }
              else if ((v292 & 1) != 0)
              {
                v329 = -2;
                v330 = 1;
                do
                {
                  std::vector<gm::LineSegment<double,2>>::insert(v278, *v278, &v284[4 * v303 + 4 * v329]);
                  ++v330;
                  v284 = (double *)v276[2];
                  v303 = (uint64_t)(v276[3] - (_QWORD)v284) >> 5;
                  --v329;
                }
                while (v330 < v303);
              }
              else
              {
                v331 = 4;
                v332 = 1;
                do
                {
                  std::vector<gm::LineSegment<double,2>>::insert(v278, *v278, &v284[v331]);
                  ++v332;
                  v284 = (double *)v276[2];
                  v331 += 4;
                }
                while (v332 < (uint64_t)(v276[3] - (_QWORD)v284) >> 5);
              }
            }
LABEL_320:
            v309 = 0;
            v276[3] = v284;
            v282 = (double *)v277[2];
            v283 = (double *)v277[3];
            v299 = *(v283 - 4);
            v290 = *v282;
            v274 = v729;
LABEL_321:
            if (vabdd_f64(v290, v299 + *(v283 - 2)) < 1.0e-12
              && vabdd_f64(v282[1], *(v283 - 1) + *(v283 - 3)) < 1.0e-12)
            {
              *((_BYTE *)v277 + 40) = 1;
            }
            if ((v309 & 1) == 0)
            {
              v335 = *((_DWORD *)v277 + 11);
              v248 = v736;
              if (v335 != 2 && v335 != *((_DWORD *)v276 + 11))
                *((_DWORD *)v277 + 11) = 2;
              goto LABEL_326;
            }
            goto LABEL_325;
          }
          break;
        }
        *(_OWORD *)__p = 0u;
        *(_OWORD *)v758 = 0u;
        v759 = 1.0;
        v361 = v761;
        if (v761 != &v760)
        {
          while (!*((_BYTE *)v361 + 40))
          {
LABEL_384:
            v361 = (_QWORD *)v361[1];
            if (v361 == &v760)
            {
              v415 = v758[0];
              if (v758[0])
              {
                do
                {
                  v418 = std::vector<std::vector<gm::Matrix<double,2,1>>>::emplace<>((char **)&v754, (uint64_t)v755);
                  v419 = v751;
                  v420 = v752;
                  v421 = (char *)v752 - (char *)v751;
                  v422 = ((char *)v752 - (char *)v751) / 24;
                  v423 = &v751[3 * v422];
                  if ((unint64_t)v752 >= v753)
                  {
                    v436 = v422 + 1;
                    if ((unint64_t)(v422 + 1) > 0xAAAAAAAAAAAAAAALL)
                      abort();
                    v437 = 0x5555555555555556 * ((uint64_t)(v753 - (_QWORD)v751) >> 3);
                    if (v437 <= v436)
                      v437 = v422 + 1;
                    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v753 - (_QWORD)v751) >> 3) >= 0x555555555555555)
                      v438 = 0xAAAAAAAAAAAAAAALL;
                    else
                      v438 = v437;
                    v767 = &v753;
                    if (v438)
                    {
                      if (v438 > 0xAAAAAAAAAAAAAAALL)
                        goto LABEL_983;
                      v439 = (uint64_t *)operator new(24 * v438);
                    }
                    else
                    {
                      v439 = 0;
                    }
                    v449 = (void **)&v439[3 * v422];
                    v763 = v439;
                    v764 = v449;
                    v765 = v449;
                    v766 = (char *)&v439[3 * v438];
                    if (v422 == v438)
                    {
                      if (v421 < 24)
                      {
                        if ((unint64_t)(v421 + 23) < 0x2F)
                          v451 = 1;
                        else
                          v451 = 2 * v422;
                        if (v451 > 0xAAAAAAAAAAAAAAALL)
                          goto LABEL_983;
                        v452 = (uint64_t *)operator new(24 * v451);
                        v449 = (void **)&v452[3 * (v451 >> 2)];
                        v763 = v452;
                        v764 = v449;
                        v765 = v449;
                        v766 = (char *)&v452[3 * v451];
                        if (v439)
                        {
                          operator delete(v439);
                          v449 = (void **)v765;
                        }
                      }
                      else
                      {
                        if (v436 >= 0)
                          v450 = v422 + 1;
                        else
                          v450 = v422 + 2;
                        v449 -= 3 * (v450 >> 1);
                        v764 = v449;
                        v765 = v449;
                      }
                    }
                    *v449 = 0;
                    v449[1] = 0;
                    v449[2] = 0;
                    v453 = (uint64_t *)v764;
                    v454 = v765 + 3;
                    v765 += 3;
                    v455 = v751;
                    if (v751 == v423)
                    {
                      v457 = v764;
                    }
                    else
                    {
                      v456 = v423;
                      v457 = v764;
                      do
                      {
                        *(v457 - 3) = 0;
                        *(v457 - 2) = 0;
                        v457 -= 3;
                        v457[2] = 0;
                        v458 = *(_OWORD *)(v456 - 3);
                        v456 -= 3;
                        *(_OWORD *)v457 = v458;
                        v457[2] = (void *)v456[2];
                        *v456 = 0;
                        v456[1] = 0;
                        v456[2] = 0;
                      }
                      while (v456 != v455);
                      v454 = v765;
                    }
                    v764 = v457;
                    v459 = v752;
                    if (v752 != v423)
                    {
                      do
                      {
                        *v454 = 0;
                        v454[1] = 0;
                        v454[2] = 0;
                        *(_OWORD *)v454 = *(_OWORD *)v423;
                        v454[2] = v423[2];
                        *v423 = 0;
                        v423[1] = 0;
                        v423[2] = 0;
                        v454 += 3;
                        v423 += 3;
                      }
                      while (v423 != v459);
                      v457 = v764;
                      v423 = v752;
                    }
                    v460 = v751;
                    v461 = (char *)v753;
                    v751 = (uint64_t *)v457;
                    v752 = v454;
                    v753 = (unint64_t)v766;
                    v765 = v423;
                    v766 = v461;
                    v763 = v460;
                    v764 = (void **)v460;
                    if (v423 != v460)
                    {
                      v462 = (void **)v423;
                      do
                      {
                        v465 = (char *)*(v462 - 3);
                        v462 -= 3;
                        v464 = v465;
                        v765 = v462;
                        if (v465)
                        {
                          v466 = (char *)*(v423 - 2);
                          v463 = v464;
                          if (v466 != v464)
                          {
                            v467 = (char *)*(v423 - 2);
                            do
                            {
                              v469 = (void *)*((_QWORD *)v467 - 3);
                              v467 -= 24;
                              v468 = v469;
                              if (v469)
                              {
                                *((_QWORD *)v466 - 2) = v468;
                                operator delete(v468);
                              }
                              v466 = v467;
                            }
                            while (v467 != v464);
                            v463 = *v462;
                          }
                          *(v423 - 2) = (uint64_t)v464;
                          operator delete(v463);
                          v462 = (void **)v765;
                        }
                        v423 = (uint64_t *)v462;
                      }
                      while (v462 != (void **)v460);
                      v423 = v763;
                    }
                    if (v423)
                      operator delete(v423);
                    v423 = v453;
                  }
                  else if (v423 == v752)
                  {
                    *v752 = 0;
                    v420[1] = 0;
                    v420[2] = 0;
                    v752 = v420 + 3;
                    v423 = v420;
                  }
                  else
                  {
                    v424 = v752 - 3;
                    v425 = v752;
                    v426 = v752 - 3;
                    if ((unint64_t)v752 >= 0x18)
                    {
                      do
                      {
                        *v425 = 0;
                        v425[1] = 0;
                        v425[2] = 0;
                        *(_OWORD *)v425 = *(_OWORD *)v426;
                        v425[2] = v426[2];
                        *v426 = 0;
                        v426[1] = 0;
                        v426[2] = 0;
                        v425 += 3;
                        v426 += 3;
                      }
                      while (v426 < v420);
                    }
                    v752 = v425;
                    if (v420 != v423 + 3)
                    {
                      v427 = v420;
                      do
                      {
                        v431 = (char *)*(v427 - 3);
                        v427 -= 3;
                        v430 = v431;
                        if (v431)
                        {
                          v432 = (char *)*(v420 - 2);
                          v428 = v430;
                          if (v432 != v430)
                          {
                            v433 = (char *)*(v420 - 2);
                            do
                            {
                              v435 = (void *)*((_QWORD *)v433 - 3);
                              v433 -= 24;
                              v434 = v435;
                              if (v435)
                              {
                                *((_QWORD *)v432 - 2) = v434;
                                operator delete(v434);
                              }
                              v432 = v433;
                            }
                            while (v433 != v430);
                            v428 = (void *)*v427;
                          }
                          *(v420 - 2) = (uint64_t)v430;
                          operator delete(v428);
                          *v427 = 0;
                          v427[1] = 0;
                          v427[2] = 0;
                        }
                        *(_OWORD *)(v420 - 3) = *(_OWORD *)(v424 - 3);
                        v429 = v424 - 3;
                        *(v420 - 1) = *(v424 - 1);
                        *v429 = 0;
                        v429[1] = 0;
                        v429[2] = 0;
                        v420 = v427;
                        v424 -= 3;
                      }
                      while (v429 != v423);
                    }
                    v440 = *v423;
                    if (*v423)
                    {
                      v441 = &v419[3 * v422];
                      v444 = v441[1];
                      v443 = v441 + 1;
                      v442 = v444;
                      v445 = (void *)*v423;
                      if (v444 != v440)
                      {
                        v446 = v442;
                        do
                        {
                          v448 = *(void **)(v446 - 24);
                          v446 -= 24;
                          v447 = v448;
                          if (v448)
                          {
                            *(_QWORD *)(v442 - 16) = v447;
                            operator delete(v447);
                          }
                          v442 = v446;
                        }
                        while (v446 != v440);
                        v445 = (void *)*v423;
                      }
                      *v443 = v440;
                      operator delete(v445);
                      *v423 = 0;
                      v423[1] = 0;
                      v423[2] = 0;
                    }
                    *v423 = 0;
                    v423[1] = 0;
                    v423[2] = 0;
                  }
                  v470 = (uint64_t **)v415[3];
                  v471 = **v470;
                  if ((*v470)[1] != v471)
                  {
                    v472 = 0;
                    v473 = (float64x2_t *)*((_QWORD *)v418 + 1);
                    do
                    {
                      v475 = (float64x2_t *)(v471 + 32 * v472);
                      v476 = *((_QWORD *)v418 + 2);
                      if (!v472)
                      {
                        if ((unint64_t)v473 >= v476)
                        {
                          v478 = *(float64x2_t **)v418;
                          v479 = ((uint64_t)v473 - *(_QWORD *)v418) >> 4;
                          v480 = v479 + 1;
                          if ((unint64_t)(v479 + 1) >> 60)
                            abort();
                          v481 = v476 - (_QWORD)v478;
                          if (v481 >> 3 > v480)
                            v480 = v481 >> 3;
                          if ((unint64_t)v481 >= 0x7FFFFFFFFFFFFFF0)
                            v482 = 0xFFFFFFFFFFFFFFFLL;
                          else
                            v482 = v480;
                          if (v482)
                          {
                            if (v482 >> 60)
                              goto LABEL_983;
                            v483 = (char *)operator new(16 * v482);
                          }
                          else
                          {
                            v483 = 0;
                          }
                          v484 = (float64x2_t *)&v483[16 * v479];
                          *v484 = *v475;
                          v485 = v484;
                          if (v473 != v478)
                          {
                            do
                            {
                              v485[-1] = v473[-1];
                              --v485;
                              --v473;
                            }
                            while (v473 != v478);
                            v473 = *(float64x2_t **)v418;
                          }
                          v477 = v484 + 1;
                          *(_QWORD *)v418 = v485;
                          *((_QWORD *)v418 + 1) = v484 + 1;
                          *((_QWORD *)v418 + 2) = &v483[16 * v482];
                          if (v473)
                            operator delete(v473);
                        }
                        else
                        {
                          *v473 = *v475;
                          v477 = v473 + 1;
                        }
                        *((_QWORD *)v418 + 1) = v477;
                        v476 = *((_QWORD *)v418 + 2);
                        v473 = v477;
                      }
                      v486 = vaddq_f64(v475[1], *v475);
                      if ((unint64_t)v473 < v476)
                      {
                        *v473 = v486;
                        v474 = v473 + 1;
                      }
                      else
                      {
                        v487 = *(float64x2_t **)v418;
                        v488 = ((uint64_t)v473 - *(_QWORD *)v418) >> 4;
                        v489 = v488 + 1;
                        if ((unint64_t)(v488 + 1) >> 60)
                          abort();
                        v490 = v476 - (_QWORD)v487;
                        if (v490 >> 3 > v489)
                          v489 = v490 >> 3;
                        if ((unint64_t)v490 >= 0x7FFFFFFFFFFFFFF0)
                          v491 = 0xFFFFFFFFFFFFFFFLL;
                        else
                          v491 = v489;
                        if (v491)
                        {
                          if (v491 >> 60)
                            goto LABEL_983;
                          v737 = v486;
                          v492 = (char *)operator new(16 * v491);
                          v486 = v737;
                        }
                        else
                        {
                          v492 = 0;
                        }
                        v493 = (float64x2_t *)&v492[16 * v488];
                        *v493 = v486;
                        v474 = v493 + 1;
                        if (v473 != v487)
                        {
                          do
                          {
                            v493[-1] = v473[-1];
                            --v493;
                            --v473;
                          }
                          while (v473 != v487);
                          v473 = *(float64x2_t **)v418;
                        }
                        *(_QWORD *)v418 = v493;
                        *((_QWORD *)v418 + 1) = v474;
                        *((_QWORD *)v418 + 2) = &v492[16 * v491];
                        if (v473)
                          operator delete(v473);
                      }
                      *((_QWORD *)v418 + 1) = v474;
                      ++v472;
                      v470 = (uint64_t **)v415[3];
                      v471 = **v470;
                      v473 = v474;
                    }
                    while (v472 < ((*v470)[1] - v471) >> 5);
                  }
                  if (v415[4] - (_QWORD)v470 >= 9uLL)
                  {
                    v494 = 1;
                    do
                    {
                      v495 = std::vector<std::vector<gm::Matrix<double,2,1>>>::emplace<>((char **)v423, v423[1]);
                      v496 = v415[3];
                      v497 = **(_QWORD **)(v496 + 8 * v494);
                      if (*(_QWORD *)(*(_QWORD *)(v496 + 8 * v494) + 8) != v497)
                      {
                        v498 = v495;
                        v499 = 0;
                        v500 = (float64x2_t *)*((_QWORD *)v495 + 1);
                        do
                        {
                          v502 = (float64x2_t *)(v497 + 32 * v499);
                          v503 = *((_QWORD *)v498 + 2);
                          if (!v499)
                          {
                            if ((unint64_t)v500 >= v503)
                            {
                              v505 = *(float64x2_t **)v498;
                              v506 = ((uint64_t)v500 - *(_QWORD *)v498) >> 4;
                              v507 = v506 + 1;
                              if ((unint64_t)(v506 + 1) >> 60)
                                abort();
                              v508 = v503 - (_QWORD)v505;
                              if (v508 >> 3 > v507)
                                v507 = v508 >> 3;
                              if ((unint64_t)v508 >= 0x7FFFFFFFFFFFFFF0)
                                v509 = 0xFFFFFFFFFFFFFFFLL;
                              else
                                v509 = v507;
                              if (v509)
                              {
                                if (v509 >> 60)
                                  goto LABEL_983;
                                v510 = (char *)operator new(16 * v509);
                              }
                              else
                              {
                                v510 = 0;
                              }
                              v511 = (float64x2_t *)&v510[16 * v506];
                              *v511 = *v502;
                              v512 = v511;
                              if (v500 != v505)
                              {
                                do
                                {
                                  v512[-1] = v500[-1];
                                  --v512;
                                  --v500;
                                }
                                while (v500 != v505);
                                v500 = *(float64x2_t **)v498;
                              }
                              v504 = v511 + 1;
                              *(_QWORD *)v498 = v512;
                              *((_QWORD *)v498 + 1) = v511 + 1;
                              *((_QWORD *)v498 + 2) = &v510[16 * v509];
                              if (v500)
                                operator delete(v500);
                            }
                            else
                            {
                              *v500 = *v502;
                              v504 = v500 + 1;
                            }
                            *((_QWORD *)v498 + 1) = v504;
                            v503 = *((_QWORD *)v498 + 2);
                            v500 = v504;
                          }
                          v513 = vaddq_f64(v502[1], *v502);
                          if ((unint64_t)v500 < v503)
                          {
                            *v500 = v513;
                            v501 = v500 + 1;
                          }
                          else
                          {
                            v514 = *(float64x2_t **)v498;
                            v515 = ((uint64_t)v500 - *(_QWORD *)v498) >> 4;
                            v516 = v515 + 1;
                            if ((unint64_t)(v515 + 1) >> 60)
                              abort();
                            v517 = v503 - (_QWORD)v514;
                            if (v517 >> 3 > v516)
                              v516 = v517 >> 3;
                            if ((unint64_t)v517 >= 0x7FFFFFFFFFFFFFF0)
                              v518 = 0xFFFFFFFFFFFFFFFLL;
                            else
                              v518 = v516;
                            if (v518)
                            {
                              if (v518 >> 60)
                                goto LABEL_983;
                              v738 = v513;
                              v519 = (char *)operator new(16 * v518);
                              v513 = v738;
                            }
                            else
                            {
                              v519 = 0;
                            }
                            v520 = (float64x2_t *)&v519[16 * v515];
                            *v520 = v513;
                            v501 = v520 + 1;
                            if (v500 != v514)
                            {
                              do
                              {
                                v520[-1] = v500[-1];
                                --v520;
                                --v500;
                              }
                              while (v500 != v514);
                              v500 = *(float64x2_t **)v498;
                            }
                            *(_QWORD *)v498 = v520;
                            *((_QWORD *)v498 + 1) = v501;
                            *((_QWORD *)v498 + 2) = &v519[16 * v518];
                            if (v500)
                              operator delete(v500);
                          }
                          *((_QWORD *)v498 + 1) = v501;
                          v496 = v415[3];
                          ++v499;
                          v497 = **(_QWORD **)(v496 + 8 * v494);
                          v500 = v501;
                        }
                        while (v499 < (*(_QWORD *)(*(_QWORD *)(v496 + 8 * v494) + 8) - v497) >> 5);
                      }
                      ++v494;
                    }
                    while (v494 < (v415[4] - v496) >> 3);
                  }
                  v415 = (_QWORD *)*v415;
                }
                while (v415);
              }
              goto LABEL_516;
            }
          }
          v363 = *((unsigned int *)v361 + 11);
          v364 = (unint64_t)__p[1];
          if (__p[1])
          {
            v365 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
            v365.i16[0] = vaddlv_u8(v365);
            if (v365.u32[0] > 1uLL)
            {
              v366 = *((unsigned int *)v361 + 11);
              if (__p[1] <= (void *)v363)
                v366 = v363 % (unint64_t)__p[1];
            }
            else
            {
              v366 = (LODWORD(__p[1]) - 1) & v363;
            }
            v367 = (_QWORD **)*((_QWORD *)__p[0] + v366);
            if (v367)
            {
              v368 = *v367;
              if (*v367)
              {
                if (v365.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v370 = v368[1];
                    if (v370 == v363)
                    {
                      if (*((_DWORD *)v368 + 4) == (_DWORD)v363)
                        goto LABEL_485;
                    }
                    else if ((v370 & ((unint64_t)__p[1] - 1)) != v366)
                    {
                      goto LABEL_406;
                    }
                    v368 = (_QWORD *)*v368;
                    if (!v368)
                      goto LABEL_406;
                  }
                }
                do
                {
                  v369 = v368[1];
                  if (v369 == v363)
                  {
                    if (*((_DWORD *)v368 + 4) == (_DWORD)v363)
                      goto LABEL_485;
                  }
                  else
                  {
                    if ((void *)v369 >= __p[1])
                      v369 %= (unint64_t)__p[1];
                    if (v369 != v366)
                      break;
                  }
                  v368 = (_QWORD *)*v368;
                }
                while (v368);
              }
            }
LABEL_406:
            if (v365.u32[0] > 1uLL)
            {
              v246 = *((unsigned int *)v361 + 11);
              if (__p[1] <= (void *)v363)
                v246 = v363 % (unint64_t)__p[1];
            }
            else
            {
              v246 = (LODWORD(__p[1]) - 1) & v363;
            }
            v371 = (_QWORD **)*((_QWORD *)__p[0] + v246);
            if (v371)
            {
              v368 = *v371;
              if (*v371)
              {
                if (v365.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v373 = v368[1];
                    if (v373 == v363)
                    {
                      if (*((_DWORD *)v368 + 4) == (_DWORD)v363)
                        goto LABEL_485;
                    }
                    else if ((v373 & ((unint64_t)__p[1] - 1)) != v246)
                    {
                      goto LABEL_425;
                    }
                    v368 = (_QWORD *)*v368;
                    if (!v368)
                      goto LABEL_425;
                  }
                }
                do
                {
                  v372 = v368[1];
                  if (v372 == v363)
                  {
                    if (*((_DWORD *)v368 + 4) == (_DWORD)v363)
                      goto LABEL_485;
                  }
                  else
                  {
                    if ((void *)v372 >= __p[1])
                      v372 %= (unint64_t)__p[1];
                    if (v372 != v246)
                      break;
                  }
                  v368 = (_QWORD *)*v368;
                }
                while (v368);
              }
            }
          }
LABEL_425:
          v368 = operator new(0x30uLL);
          v763 = v368;
          v764 = v758;
          *v368 = 0;
          v368[1] = v363;
          *((_DWORD *)v368 + 4) = *((_DWORD *)v361 + 11);
          v368[4] = 0;
          v368[5] = 0;
          v368[3] = 0;
          LOBYTE(v765) = 1;
          v374 = (float)((unint64_t)v758[1] + 1);
          if (v364 && (float)(v759 * (float)v364) >= v374)
          {
            v363 = v246;
            goto LABEL_475;
          }
          v375 = (v364 & (v364 - 1)) != 0;
          if (v364 < 3)
            v375 = 1;
          v376 = v375 | (2 * v364);
          v377 = vcvtps_u32_f32(v374 / v759);
          if (v376 <= v377)
            v378 = v377;
          else
            v378 = v376;
          if (v378 == 1)
          {
            v378 = 2;
          }
          else if ((v378 & (v378 - 1)) != 0)
          {
            v378 = std::__next_prime(v378);
            v364 = (unint64_t)__p[1];
          }
          if (v378 > v364)
          {
LABEL_438:
            if (v378 >> 61)
              goto LABEL_983;
            v379 = operator new(8 * v378);
            v380 = __p[0];
            __p[0] = v379;
            if (v380)
              operator delete(v380);
            v381 = 0;
            __p[1] = (void *)v378;
            do
              *((_QWORD *)__p[0] + v381++) = 0;
            while (v378 != v381);
            v382 = (_QWORD **)v758[0];
            if (!v758[0])
              goto LABEL_462;
            v383 = *((_QWORD *)v758[0] + 1);
            v384 = v378 - 1;
            if ((v378 & (v378 - 1)) == 0)
            {
              v385 = v383 & v384;
              *((_QWORD *)__p[0] + v385) = v758;
              for (j = *v382; *v382; j = *v382)
              {
                v387 = j[1] & v384;
                if (v387 == v385)
                {
                  v382 = (_QWORD **)j;
                }
                else if (*((_QWORD *)__p[0] + v387))
                {
                  *v382 = (_QWORD *)*j;
                  v388 = 8 * v387;
                  *j = **(_QWORD **)((char *)__p[0] + v388);
                  **(_QWORD **)((char *)__p[0] + v388) = j;
                }
                else
                {
                  *((_QWORD *)__p[0] + v387) = v382;
                  v382 = (_QWORD **)j;
                  v385 = v387;
                }
              }
              goto LABEL_462;
            }
            if (v383 >= v378)
              v383 %= v378;
            *((_QWORD *)__p[0] + v383) = v758;
            v392 = *v382;
            if (!*v382)
            {
LABEL_462:
              v364 = v378;
              goto LABEL_463;
            }
            while (2)
            {
              v394 = v392[1];
              if (v394 >= v378)
                v394 %= v378;
              if (v394 != v383)
              {
                if (!*((_QWORD *)__p[0] + v394))
                {
                  *((_QWORD *)__p[0] + v394) = v382;
LABEL_467:
                  v382 = (_QWORD **)v392;
                  v392 = (_QWORD *)*v392;
                  v383 = v394;
                  if (!v392)
                    goto LABEL_462;
                  continue;
                }
                *v382 = (_QWORD *)*v392;
                v393 = 8 * v394;
                *v392 = **(_QWORD **)((char *)__p[0] + v393);
                **(_QWORD **)((char *)__p[0] + v393) = v392;
                v392 = v382;
              }
              break;
            }
            v394 = v383;
            goto LABEL_467;
          }
          if (v378 < v364)
          {
            v389 = vcvtps_u32_f32((float)(unint64_t)v758[1] / v759);
            if (v364 < 3
              || (v390 = (uint8x8_t)vcnt_s8((int8x8_t)v364), v390.i16[0] = vaddlv_u8(v390), v390.u32[0] > 1uLL))
            {
              v389 = std::__next_prime(v389);
            }
            else
            {
              v391 = 1 << -(char)__clz(v389 - 1);
              if (v389 >= 2)
                v389 = v391;
            }
            if (v378 <= v389)
              v378 = v389;
            if (v378 >= v364)
            {
              v364 = (unint64_t)__p[1];
            }
            else
            {
              if (v378)
                goto LABEL_438;
              v414 = __p[0];
              __p[0] = 0;
              if (v414)
                operator delete(v414);
              v364 = 0;
              __p[1] = 0;
            }
          }
LABEL_463:
          if ((v364 & (v364 - 1)) != 0)
          {
            if (v364 <= v363)
              v363 %= v364;
          }
          else
          {
            v363 = ((_DWORD)v364 - 1) & v363;
          }
LABEL_475:
          v395 = __p[0];
          v396 = (_QWORD *)*((_QWORD *)__p[0] + v363);
          if (v396)
          {
            *v368 = *v396;
            goto LABEL_483;
          }
          *v368 = v758[0];
          v758[0] = v368;
          v395[v363] = v758;
          if (*v368)
          {
            v397 = *(_QWORD *)(*v368 + 8);
            if ((v364 & (v364 - 1)) != 0)
            {
              if (v397 >= v364)
                v397 %= v364;
            }
            else
            {
              v397 &= v364 - 1;
            }
            v396 = (char *)__p[0] + 8 * v397;
LABEL_483:
            *v396 = v368;
          }
          ++v758[1];
LABEL_485:
          v398 = v361 + 2;
          v400 = (char *)v368[4];
          v399 = v368[5];
          if ((unint64_t)v400 < v399)
          {
            *(_QWORD *)v400 = v398;
            v362 = v400 + 8;
          }
          else
          {
            v401 = (char *)v368[3];
            v402 = (v400 - v401) >> 3;
            v403 = v402 + 1;
            if ((unint64_t)(v402 + 1) >> 61)
              abort();
            v404 = v399 - (_QWORD)v401;
            if (v404 >> 2 > v403)
              v403 = v404 >> 2;
            if ((unint64_t)v404 >= 0x7FFFFFFFFFFFFFF8)
              v246 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v246 = v403;
            if (v246)
            {
              if (v246 >> 61)
                goto LABEL_983;
              v405 = (char *)operator new(8 * v246);
            }
            else
            {
              v405 = 0;
            }
            v406 = &v405[8 * v402];
            *(_QWORD *)v406 = v398;
            v362 = v406 + 8;
            if (v400 != v401)
            {
              v407 = v400 - 8 - v401;
              if (v407 < 0x58)
                goto LABEL_997;
              if ((unint64_t)(v401 - v405) < 0x20)
                goto LABEL_997;
              v408 = (v407 >> 3) + 1;
              v409 = &v405[8 * v402 - 16];
              v410 = (__int128 *)(v400 - 16);
              v411 = v408 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v412 = *v410;
                *((_OWORD *)v409 - 1) = *(v410 - 1);
                *(_OWORD *)v409 = v412;
                v409 -= 32;
                v410 -= 2;
                v411 -= 4;
              }
              while (v411);
              v406 -= 8 * (v408 & 0x3FFFFFFFFFFFFFFCLL);
              v400 -= 8 * (v408 & 0x3FFFFFFFFFFFFFFCLL);
              if (v408 != (v408 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_997:
                do
                {
                  v413 = *((_QWORD *)v400 - 1);
                  v400 -= 8;
                  *((_QWORD *)v406 - 1) = v413;
                  v406 -= 8;
                }
                while (v400 != v401);
              }
              v400 = (char *)v368[3];
            }
            v368[3] = v406;
            v368[4] = v362;
            v368[5] = &v405[8 * v246];
            if (v400)
              operator delete(v400);
          }
          v368[4] = v362;
          goto LABEL_384;
        }
LABEL_516:
        v417 = *((_QWORD *)&v768 + 1);
        v416 = (uint64_t *)v768;
        while (v416 != (uint64_t *)v417)
        {
          v521 = v417 - (_QWORD)v416;
          if (v417 - (uint64_t)v416 >= 9)
          {
            v522 = 0;
            v523 = v521 >> 3;
            v524 = *v416;
            v525 = (unint64_t)((v521 >> 3) - 2) >> 1;
            v526 = v416;
            do
            {
              v527 = &v526[v522 + 1];
              v528 = (2 * v522) | 1;
              v529 = 2 * v522 + 2;
              if (v529 < v523 && !geo::MartinezPolygonUnion<double>::HorizontalIndex::operator<(*v527, v526[v522 + 2]))
              {
                ++v527;
                v528 = v529;
              }
              *v526 = *v527;
              v526 = v527;
              v522 = v528;
            }
            while (v528 <= v525);
            v530 = (uint64_t *)(v417 - 8);
            if (v527 == (uint64_t *)(v417 - 8))
            {
              *v527 = v524;
            }
            else
            {
              *v527 = *v530;
              *v530 = v524;
              v531 = (char *)v527 - (char *)v416 + 8;
              if (v531 >= 9)
              {
                v532 = (((unint64_t)v531 >> 3) - 2) >> 1;
                v533 = &v416[v532];
                v534 = *v533;
                v535 = *v527;
                if (!geo::MartinezPolygonUnion<double>::HorizontalIndex::operator<(*v533, *v527))
                {
                  do
                  {
                    v536 = v533;
                    *v527 = v534;
                    if (!v532)
                      break;
                    v532 = (v532 - 1) >> 1;
                    v533 = &v416[v532];
                    v534 = *v533;
                    v527 = v536;
                  }
                  while (!geo::MartinezPolygonUnion<double>::HorizontalIndex::operator<(*v533, v535));
                  *v536 = v535;
                }
              }
            }
          }
          v416 = (uint64_t *)v768;
          v417 = *((_QWORD *)&v768 + 1) - 8;
          *((_QWORD *)&v768 + 1) -= 8;
        }
        std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v772);
        v772 = 0;
        v773 = 0;
        v771 = (uint64_t *)&v772;
        v537 = v774;
        v538 = v775;
        if (v774 != v775)
        {
          do
          {
            if (*v537)
              MEMORY[0x1A1AF4E00](*v537, 0x1020C406C923FA7);
            ++v537;
          }
          while (v537 != v538);
          v537 = v774;
        }
        v775 = v537;
        v539 = v758[0];
        if (v758[0])
        {
          do
          {
            v547 = (_QWORD *)*v539;
            v548 = (void *)v539[3];
            if (v548)
            {
              v539[4] = v548;
              operator delete(v548);
            }
            operator delete(v539);
            v539 = v547;
          }
          while (v547);
        }
        v540 = __p[0];
        __p[0] = 0;
        if (v540)
          operator delete(v540);
        if (v762)
        {
          v541 = v760;
          v542 = v761;
          v543 = *v761;
          *(_QWORD *)(v543 + 8) = v760[1];
          *(_QWORD *)v541[1] = v543;
          v762 = 0;
          if (v542 != &v760)
          {
            do
            {
              v550 = (_QWORD *)v542[1];
              v549 = (void *)v542[2];
              if (v549)
              {
                v542[3] = v549;
                operator delete(v549);
              }
              operator delete(v542);
              v542 = v550;
            }
            while (v550 != &v760);
          }
        }
        v544 = (const void **)v754;
        v545 = v755;
        if (v754 != v755)
        {
          v546 = v743;
          do
          {
            if ((unint64_t)v546 >= *((_QWORD *)&v744 + 1))
            {
              v557 = 0xAAAAAAAAAAAAAAABLL * ((v546 - v743) >> 3) + 1;
              if (v557 > 0xAAAAAAAAAAAAAAALL)
                abort();
              if (0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v744 + 1) - (_QWORD)v743) >> 3) > v557)
                v557 = 0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v744 + 1) - (_QWORD)v743) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v744 + 1) - (_QWORD)v743) >> 3) >= 0x555555555555555)
                v558 = 0xAAAAAAAAAAAAAAALL;
              else
                v558 = v557;
              v767 = (unint64_t *)&v744 + 1;
              if (v558)
              {
                if (v558 > 0xAAAAAAAAAAAAAAALL)
                  goto LABEL_983;
                v559 = (uint64_t *)operator new(24 * v558);
              }
              else
              {
                v559 = 0;
              }
              v560 = (void **)&v559[(v546 - v743) >> 3];
              v763 = v559;
              v764 = v560;
              v561 = (char *)&v559[3 * v558];
              v765 = v560;
              v766 = v561;
              v560[1] = 0;
              v560[2] = 0;
              *v560 = 0;
              v563 = *v544;
              v562 = v544[1];
              v564 = v562 - (_BYTE *)*v544;
              if (v562 != *v544)
              {
                if (v564 < 0)
                  abort();
                v565 = (char *)operator new(v562 - (_BYTE *)*v544);
                *v560 = v565;
                v560[1] = v565;
                v560[2] = &v565[16 * (v564 >> 4)];
                v566 = v564 & 0xFFFFFFFFFFFFFFF0;
                memcpy(v565, v563, v566);
                v560[1] = &v565[v566];
              }
              v553 = (char *)(v560 + 3);
              v765 = v560 + 3;
              if (v546 == v743)
              {
                v743 = (char *)v560;
                *((_QWORD *)&v744 + 1) = v561;
              }
              else
              {
                do
                {
                  v567 = v560;
                  *(v560 - 2) = 0;
                  *(v560 - 1) = 0;
                  v568 = *(_OWORD *)(v546 - 24);
                  v546 -= 24;
                  *(_OWORD *)(v560 - 3) = v568;
                  v560 -= 3;
                  *(v567 - 1) = (void *)*((_QWORD *)v546 + 2);
                  *(_QWORD *)v546 = 0;
                  *((_QWORD *)v546 + 1) = 0;
                  *((_QWORD *)v546 + 2) = 0;
                }
                while (v546 != v743);
                v546 = v743;
                v569 = (char *)v744;
                v743 = (char *)v560;
                *((_QWORD *)&v744 + 1) = v766;
                v553 = (char *)v765;
                if ((char *)v744 != v546)
                {
                  v570 = (char *)v744;
                  do
                  {
                    v572 = (void *)*((_QWORD *)v570 - 3);
                    v570 -= 24;
                    v571 = v572;
                    if (v572)
                    {
                      *((_QWORD *)v569 - 2) = v571;
                      operator delete(v571);
                    }
                    v569 = v570;
                  }
                  while (v570 != v546);
                }
              }
              if (v546)
                operator delete(v546);
            }
            else
            {
              *(_QWORD *)v546 = 0;
              *((_QWORD *)v546 + 1) = 0;
              *((_QWORD *)v546 + 2) = 0;
              v555 = *v544;
              v554 = v544[1];
              v556 = v554 - (_BYTE *)*v544;
              if (v554 != *v544)
              {
                if (v556 < 0)
                  abort();
                v551 = (char *)operator new(v554 - (_BYTE *)*v544);
                *(_QWORD *)v546 = v551;
                *((_QWORD *)v546 + 1) = v551;
                *((_QWORD *)v546 + 2) = &v551[16 * (v556 >> 4)];
                v552 = v556 & 0xFFFFFFFFFFFFFFF0;
                memcpy(v551, v555, v552);
                *((_QWORD *)v546 + 1) = &v551[v552];
              }
              v553 = v546 + 24;
            }
            *(_QWORD *)&v744 = v553;
            v544 += 3;
            v546 = v553;
          }
          while (v544 != v545);
        }
        v573 = (void **)v751;
        v2 = (uint64_t)v752;
        if (v751 == v752)
        {
          v574 = 0;
          v583 = v751;
          if (!v751)
            goto LABEL_752;
          goto LABEL_751;
        }
        v574 = 0;
        v575 = v751;
        do
        {
          v574 = v574 || *v575 != v575[1];
          v575 += 3;
        }
        while (v575 != v752);
        if (v751)
        {
          do
          {
            v577 = (void **)(v2 - 24);
            v578 = *(_QWORD *)(v2 - 24);
            if (v578)
            {
              v579 = *(_QWORD *)(v2 - 16);
              v576 = *(void **)(v2 - 24);
              if (v579 != v578)
              {
                v580 = *(_QWORD *)(v2 - 16);
                do
                {
                  v582 = *(void **)(v580 - 24);
                  v580 -= 24;
                  v581 = v582;
                  if (v582)
                  {
                    *(_QWORD *)(v579 - 16) = v581;
                    operator delete(v581);
                  }
                  v579 = v580;
                }
                while (v580 != v578);
                v576 = *v577;
              }
              *(_QWORD *)(v2 - 16) = v578;
              operator delete(v576);
            }
            v2 -= 24;
          }
          while (v577 != v573);
          v583 = v751;
LABEL_751:
          v752 = (uint64_t *)v573;
          operator delete(v583);
        }
LABEL_752:
        v584 = (char *)v754;
        if (v754)
        {
          v585 = v755;
          v586 = v754;
          if (v755 != v754)
          {
            v587 = (char *)v755;
            do
            {
              v589 = (void *)*((_QWORD *)v587 - 3);
              v587 -= 24;
              v588 = v589;
              if (v589)
              {
                *(v585 - 2) = v588;
                operator delete(v588);
              }
              v585 = (const void **)v587;
            }
            while (v587 != v584);
            v586 = v754;
          }
          v755 = (const void **)v584;
          operator delete(v586);
        }
        geo::MartinezPolygonUnion<double>::~MartinezPolygonUnion((uint64_t)&v768);
        if (v574 || (_QWORD)v744 - (_QWORD)v743 != 24)
        {
LABEL_181:
          v186 = (uint64_t **)*v732;
          if (!*v732)
            goto LABEL_167;
          continue;
        }
        v590 = (std::__shared_weak_count *)operator new(0x30uLL);
        v590->__shared_owners_ = 0;
        v590->__shared_weak_owners_ = 0;
        v590[1].__vftable = 0;
        v590->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE458;
        v590[1].__shared_owners_ = 0;
        v590[1].__shared_weak_owners_ = 0;
        v592 = *(const void **)v743;
        v591 = *((_QWORD *)v743 + 1);
        v593 = v591 - *(_QWORD *)v743;
        if (v591 != *(_QWORD *)v743)
        {
          if (v593 < 0)
            abort();
          v594 = (std::__shared_weak_count_vtbl *)operator new(v591 - *(_QWORD *)v743);
          v590[1].__vftable = v594;
          v590[1].__shared_weak_owners_ = (uint64_t)v594 + 16 * (v593 >> 4);
          v595 = v593 & 0xFFFFFFFFFFFFFFF0;
          memcpy(v594, v592, v595);
          v590[1].__shared_owners_ = (uint64_t)v594 + v595;
        }
        v596 = v740;
        v739 = (unint64_t)&v590[1];
        v740 = v590;
        if (v596)
        {
          v597 = (unint64_t *)&v596->__shared_owners_;
          do
            v598 = __ldaxr(v597);
          while (__stlxr(v598 - 1, v597));
          if (!v598)
          {
            ((void (*)(std::__shared_weak_count *))v596->__on_zero_shared)(v596);
            std::__shared_weak_count::__release_weak(v596);
          }
        }
        if ((char)v741 >= *((char *)v732 + 32))
          v599 = *((_BYTE *)v732 + 32);
        else
          v599 = v741;
        v600 = *((char *)v732 + 33);
        if (v600 <= SHIBYTE(v741))
          LOWORD(v600) = SHIBYTE(v741);
        v601 = v599 | (unsigned __int16)((_WORD)v600 << 8);
        v741 = v601;
        v186 = (uint64_t **)std::unordered_set<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>,md::MaskingOverlayMeshProcessor::_unionPolygons(std::list<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>> &)::PolygonPairHash,std::equal_to<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>>,std::allocator<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>>>::erase[abi:nn180100](v745, v732);
        *(_QWORD *)&v768 = v590 + 1;
        *((_QWORD *)&v768 + 1) = v590;
        if (v590)
        {
          v602 = (unint64_t *)&v590->__shared_owners_;
          do
            v603 = __ldxr(v602);
          while (__stxr(v603 + 1, v602));
        }
        LOWORD(v769) = v601;
        v604 = *(char **)v739;
        shared_owners = (char *)v590[1].__shared_owners_;
        if (*(char **)v739 == shared_owners)
        {
          v607 = -1.79769313e308;
        }
        else
        {
          v606 = shared_owners - v604 - 16;
          if (v606 >= 0x40)
          {
            v608 = (v606 >> 4) + 1;
            v609 = v608 & 3;
            if ((v608 & 3) == 0)
              v609 = 4;
            v610 = v608 - v609;
            v611 = 16 * v610;
            v612 = (float64x2_t)vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
            v613 = (const double *)(v604 + 32);
            v614 = v612;
            do
            {
              v615 = v613 - 4;
              v616 = (unsigned __int128)vld2q_f64(v615);
              v617 = (unsigned __int128)vld2q_f64(v613);
              v612 = vmaxnmq_f64(v612, (float64x2_t)v616);
              v614 = vmaxnmq_f64(v614, (float64x2_t)v617);
              v613 += 8;
              v610 -= 4;
            }
            while (v610);
            v604 += v611;
            v607 = vmaxnmvq_f64(vmaxnmq_f64(v612, v614));
          }
          else
          {
            v607 = -1.79769313e308;
          }
          do
          {
            v618 = *(double *)v604;
            v604 += 16;
            v607 = fmax(v607, v618);
          }
          while (v604 != shared_owners);
        }
        v770 = v607;
        LOBYTE(v771) = 0;
        std::priority_queue<md::MaskingOverlayMeshProcessor::_unionPolygons(std::list<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>> &)::PolygonEdge,std::vector<md::MaskingOverlayMeshProcessor::_unionPolygons(std::list<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>> &)::PolygonEdge,std::allocator<md::MaskingOverlayMeshProcessor::_unionPolygons(std::list<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>> &)::PolygonEdge>>,std::less<md::MaskingOverlayMeshProcessor::_unionPolygons(std::list<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>> &)::PolygonEdge>>::push((uint64_t *)&v748, (uint64_t)&v768);
        v2 = *((_QWORD *)&v768 + 1);
        if (!*((_QWORD *)&v768 + 1))
          goto LABEL_792;
        v619 = (unint64_t *)(*((_QWORD *)&v768 + 1) + 8);
        do
          v620 = __ldaxr(v619);
        while (__stlxr(v620 - 1, v619));
        if (!v620)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v2);
          if (!v186)
            goto LABEL_167;
        }
        else
        {
LABEL_792:
          if (!v186)
            goto LABEL_167;
        }
      }
      v207 = 1.79769313e308;
      v208 = -1.79769313e308;
      v209 = 1.79769313e308;
      v210 = -1.79769313e308;
      goto LABEL_195;
    }
LABEL_919:
    v670 = (uint64_t *)v728[1];
    if (v670 != v728)
    {
      while (1)
      {
        v671 = v670[2];
        v673 = *(double **)v671;
        v672 = *(_QWORD *)(v671 + 8);
        v674 = v672 - *(_QWORD *)v671;
        if (v672 != *(_QWORD *)v671)
          break;
LABEL_921:
        v670 = (uint64_t *)v670[1];
        if (v670 == v728)
          goto LABEL_953;
      }
      v675 = v674 >> 4;
      v676 = (v674 >> 4) - 1;
      if ((unint64_t)(v674 >> 4) <= 1)
        v677 = 1;
      else
        v677 = v674 >> 4;
      if (v677 > 1)
      {
        v680 = 0;
        v678 = v677 & 0xFFFFFFFFFFFFFFFELL;
        v681 = v673 + 2;
        v682 = 0.0;
        v683 = (v674 >> 4) - 1;
        v684 = 0.0;
        do
        {
          v685 = v680 | 1;
          v680 += 2;
          if (v683)
            v686 = v685;
          else
            v686 = 0;
          if (v685 == v676)
            v687 = 0;
          else
            v687 = v680;
          v688 = &v673[2 * v686];
          v689 = *(v681 - 1);
          v690 = *v688 - *(v681 - 2);
          v691 = *v681;
          v692 = v681[1];
          v681 += 4;
          v682 = v682 + (v689 + v688[1]) * v690;
          v684 = v684 + (v692 + v673[2 * v687 + 1]) * (v673[2 * v687] - v691);
          v683 -= 2;
        }
        while (v680 != v678);
        v679 = v684 + v682;
        if (v677 == v678)
        {
LABEL_942:
          if (v679 > 0.0)
          {
            if (v674 < 0)
              abort();
            v699 = (char *)operator new(v674);
            v700 = v674 & 0xFFFFFFFFFFFFFFF0;
            memcpy(v699, v673, v700);
            v701 = &v699[v700];
            if (v700)
            {
              v702 = v701 - 16;
              if (v701 - 16 > v699)
              {
                v703 = v699;
                do
                {
                  v704 = *(_QWORD *)v703;
                  v705 = *((_QWORD *)v703 + 1);
                  *(_QWORD *)v703 = *(_QWORD *)v702;
                  *((_QWORD *)v703 + 1) = *((_QWORD *)v702 + 1);
                  *(_QWORD *)v702 = v704;
                  *((_QWORD *)v702 + 1) = v705;
                  v702 -= 16;
                  v703 += 16;
                }
                while (v703 < v702);
              }
            }
            v706 = operator new(0x30uLL);
            v706[1] = 0;
            v706[2] = 0;
            v706[3] = v699;
            *v706 = &off_1E42DE458;
            v706[4] = v701;
            v706[5] = &v699[16 * v675];
            v707 = (std::__shared_weak_count *)v670[3];
            v670[2] = (uint64_t)(v706 + 3);
            v670[3] = (uint64_t)v706;
            if (v707)
            {
              v708 = (unint64_t *)&v707->__shared_owners_;
              do
                v709 = __ldaxr(v708);
              while (__stlxr(v709 - 1, v708));
              if (!v709)
              {
                ((void (*)(std::__shared_weak_count *))v707->__on_zero_shared)(v707);
                std::__shared_weak_count::__release_weak(v707);
              }
            }
          }
          goto LABEL_921;
        }
      }
      else
      {
        v678 = 0;
        v679 = 0.0;
      }
      v693 = &v673[2 * v678 + 1];
      do
      {
        if (v676 == v678)
          v694 = 0;
        else
          v694 = v678 + 1;
        v695 = v678 + 1;
        v696 = &v673[2 * v694];
        v697 = *v696 - *(v693 - 1);
        v698 = *v693;
        v693 += 2;
        v679 = v679 + (v698 + v696[1]) * v697;
        v678 = v695;
      }
      while (v677 != v695);
      goto LABEL_942;
    }
LABEL_953:
    if (v743)
    {
      v710 = (char *)v744;
      v711 = v743;
      if ((char *)v744 != v743)
      {
        v712 = (char *)v744;
        do
        {
          v714 = (void *)*((_QWORD *)v712 - 3);
          v712 -= 24;
          v713 = v714;
          if (v714)
          {
            *((_QWORD *)v710 - 2) = v713;
            operator delete(v713);
          }
          v710 = v712;
        }
        while (v712 != v743);
        v711 = v743;
      }
      operator delete(v711);
    }
    v715 = v746[0];
    if (v746[0])
    {
      do
      {
        v719 = v715;
        v715 = (_QWORD *)*v715;
        v720 = (std::__shared_weak_count *)v719[3];
        if (v720)
        {
          v721 = (unint64_t *)&v720->__shared_owners_;
          do
            v722 = __ldaxr(v721);
          while (__stlxr(v722 - 1, v721));
          if (!v722)
          {
            ((void (*)(std::__shared_weak_count *))v720->__on_zero_shared)(v720);
            std::__shared_weak_count::__release_weak(v720);
          }
        }
        operator delete(v719);
      }
      while (v715);
    }
    v716 = v745[0];
    v745[0] = 0;
    if (v716)
      operator delete(v716);
    v717 = (char *)v748;
    if (v748)
    {
      v718 = v749;
      if (v749 != v748)
      {
        do
        {
          v723 = (std::__shared_weak_count *)*((_QWORD *)v718 - 4);
          if (v723)
          {
            v724 = (unint64_t *)&v723->__shared_owners_;
            do
              v725 = __ldaxr(v724);
            while (__stlxr(v725 - 1, v724));
            if (!v725)
            {
              ((void (*)(std::__shared_weak_count *))v723->__on_zero_shared)(v723);
              std::__shared_weak_count::__release_weak(v723);
            }
          }
          v718 -= 40;
        }
        while (v718 != v717);
        v717 = (char *)v748;
      }
      operator delete(v717);
    }
  }
}

void sub_19FD4F9DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  std::vector<std::vector<unsigned long>>::~vector[abi:nn180100](&a36);
  std::unordered_map<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,md::CoastlineGroup *>::~unordered_map[abi:nn180100]((uint64_t)&a39);
  std::priority_queue<md::MaskingOverlayMeshProcessor::_unionPolygons(std::list<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>> &)::PolygonEdge,std::vector<md::MaskingOverlayMeshProcessor::_unionPolygons(std::list<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>> &)::PolygonEdge,std::allocator<md::MaskingOverlayMeshProcessor::_unionPolygons(std::list<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>> &)::PolygonEdge>>,std::less<md::MaskingOverlayMeshProcessor::_unionPolygons(std::list<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>> &)::PolygonEdge>>::~priority_queue(&a45);
  _Unwind_Resume(a1);
}

void std::priority_queue<md::MaskingOverlayMeshProcessor::_unionPolygons(std::list<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>> &)::PolygonEdge,std::vector<md::MaskingOverlayMeshProcessor::_unionPolygons(std::list<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>> &)::PolygonEdge,std::allocator<md::MaskingOverlayMeshProcessor::_unionPolygons(std::list<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>> &)::PolygonEdge>>,std::less<md::MaskingOverlayMeshProcessor::_unionPolygons(std::list<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>> &)::PolygonEdge>>::push(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;

  v4 = a1[1];
  v5 = a1[2];
  if (v4 >= v5)
  {
    v8 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v4 - *a1) >> 3);
    v9 = v8 + 1;
    if (v8 + 1 > 0x666666666666666)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x333333333333333)
      v11 = 0x666666666666666;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 > 0x666666666666666)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v12 = (char *)operator new(40 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[40 * v8];
    v14 = &v12[40 * v11];
    *(_OWORD *)v13 = *(_OWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *((_WORD *)v13 + 8) = *(_WORD *)(a2 + 16);
    *((_QWORD *)v13 + 3) = *(_QWORD *)(a2 + 24);
    v13[32] = *(_BYTE *)(a2 + 32);
    v7 = (uint64_t)(v13 + 40);
    v15 = (char *)*a1;
    v16 = (char *)a1[1];
    if (v16 == (char *)*a1)
    {
      *a1 = (uint64_t)v13;
      a1[1] = v7;
      a1[2] = (uint64_t)v14;
    }
    else
    {
      v17 = 0;
      do
      {
        v18 = &v13[v17];
        v19 = &v16[v17];
        *(_OWORD *)(v18 - 40) = *(_OWORD *)&v16[v17 - 40];
        *((_QWORD *)v19 - 5) = 0;
        *((_QWORD *)v19 - 4) = 0;
        *((_WORD *)v18 - 12) = *(_WORD *)&v16[v17 - 24];
        v20 = *(_QWORD *)&v16[v17 - 16];
        *(v18 - 8) = v16[v17 - 8];
        *((_QWORD *)v18 - 2) = v20;
        v17 -= 40;
      }
      while (&v16[v17] != v15);
      v16 = (char *)*a1;
      v21 = (char *)a1[1];
      *a1 = (uint64_t)&v13[v17];
      a1[1] = v7;
      a1[2] = (uint64_t)v14;
      while (v21 != v16)
      {
        v22 = (std::__shared_weak_count *)*((_QWORD *)v21 - 4);
        if (v22)
        {
          p_shared_owners = (unint64_t *)&v22->__shared_owners_;
          do
            v24 = __ldaxr(p_shared_owners);
          while (__stlxr(v24 - 1, p_shared_owners));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        v21 -= 40;
      }
    }
    if (v16)
      operator delete(v16);
  }
  else
  {
    *(_OWORD *)v4 = *(_OWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_WORD *)(v4 + 16) = *(_WORD *)(a2 + 16);
    v6 = *(_QWORD *)(a2 + 24);
    *(_BYTE *)(v4 + 32) = *(_BYTE *)(a2 + 32);
    *(_QWORD *)(v4 + 24) = v6;
    v7 = v4 + 40;
  }
  a1[1] = v7;
  std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,std::less<md::MaskingOverlayMeshProcessor::_unionPolygons(std::list<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>> &)::PolygonEdge> &,std::__wrap_iter<md::MaskingOverlayMeshProcessor::_unionPolygons(std::list<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>> &)::PolygonEdge*>>(*a1, v7, 0xCCCCCCCCCCCCCCCDLL * ((v7 - *a1) >> 3));
}

void std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,std::less<md::MaskingOverlayMeshProcessor::_unionPolygons(std::list<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>> &)::PolygonEdge> &,std::__wrap_iter<md::MaskingOverlayMeshProcessor::_unionPolygons(std::list<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>> &)::PolygonEdge*>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  __int16 v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;

  if (a3 >= 2)
  {
    v27 = v3;
    v28 = v4;
    v7 = (unint64_t)(a3 - 2) >> 1;
    v8 = a1 + 40 * v7;
    v9 = a2 - 40;
    if (std::less<md::MaskingOverlayMeshProcessor::_unionPolygons(std::list<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>> &)::PolygonEdge>::operator()[abi:nn180100](v8, a2 - 40))
    {
      v23 = *(_OWORD *)(a2 - 40);
      *(_QWORD *)v9 = 0;
      *(_QWORD *)(v9 + 8) = 0;
      v24 = *(_WORD *)(a2 - 24);
      v25 = *(_QWORD *)(a2 - 16);
      v26 = *(_BYTE *)(a2 - 8);
      do
      {
        v10 = v8;
        v11 = *(_OWORD *)v8;
        *(_QWORD *)v8 = 0;
        *(_QWORD *)(v8 + 8) = 0;
        v12 = *(std::__shared_weak_count **)(v9 + 8);
        *(_OWORD *)v9 = v11;
        if (v12)
        {
          p_shared_owners = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldaxr(p_shared_owners);
          while (__stlxr(v14 - 1, p_shared_owners));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        *(_WORD *)(v9 + 16) = *(_WORD *)(v10 + 16);
        v15 = *(_QWORD *)(v10 + 24);
        *(_BYTE *)(v9 + 32) = *(_BYTE *)(v10 + 32);
        *(_QWORD *)(v9 + 24) = v15;
        if (!v7)
          break;
        v7 = (v7 - 1) >> 1;
        v8 = a1 + 40 * v7;
        v9 = v10;
      }
      while (std::less<md::MaskingOverlayMeshProcessor::_unionPolygons(std::list<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>> &)::PolygonEdge>::operator()[abi:nn180100](v8, (uint64_t)&v23));
      v16 = v23;
      v23 = 0uLL;
      v17 = *(std::__shared_weak_count **)(v10 + 8);
      *(_OWORD *)v10 = v16;
      if (v17)
      {
        v18 = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      *(_WORD *)(v10 + 16) = v24;
      *(_QWORD *)(v10 + 24) = v25;
      *(_BYTE *)(v10 + 32) = v26;
      v20 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
      if (*((_QWORD *)&v23 + 1))
      {
        v21 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
    }
  }
}

uint64_t std::unordered_set<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>,md::MaskingOverlayMeshProcessor::_unionPolygons(std::list<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>> &)::PolygonPairHash,std::equal_to<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>>,std::allocator<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>>>::erase[abi:nn180100](_QWORD *a1, uint64_t *__p)
{
  int8x8_t v3;
  unint64_t v4;
  uint64_t v5;
  uint8x8_t v6;
  uint64_t *v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  v3 = (int8x8_t)a1[1];
  v5 = *__p;
  v4 = __p[1];
  v6 = (uint8x8_t)vcnt_s8(v3);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  v7 = *(uint64_t **)(*a1 + 8 * v4);
  do
  {
    v8 = v7;
    v7 = (uint64_t *)*v7;
  }
  while (v7 != __p);
  if (v8 == a1 + 2)
    goto LABEL_36;
  v9 = v8[1];
  if (v6.u32[0] > 1uLL)
  {
    if (v9 >= *(_QWORD *)&v3)
      v9 %= *(_QWORD *)&v3;
  }
  else
  {
    v9 &= *(_QWORD *)&v3 - 1;
  }
  v10 = *__p;
  if (v9 != v4)
  {
LABEL_36:
    if (v5)
    {
      v11 = *(_QWORD *)(v5 + 8);
      if (v6.u32[0] > 1uLL)
      {
        v12 = *(_QWORD *)(v5 + 8);
        if (v11 >= *(_QWORD *)&v3)
          v12 = v11 % *(_QWORD *)&v3;
      }
      else
      {
        v12 = v11 & (*(_QWORD *)&v3 - 1);
      }
      v10 = *__p;
      if (v12 == v4)
        goto LABEL_22;
    }
    *(_QWORD *)(*a1 + 8 * v4) = 0;
    v10 = *__p;
  }
  if (!v10)
    goto LABEL_28;
  v11 = *(_QWORD *)(v10 + 8);
LABEL_22:
  if (v6.u32[0] > 1uLL)
  {
    if (v11 >= *(_QWORD *)&v3)
      v11 %= *(_QWORD *)&v3;
  }
  else
  {
    v11 &= *(_QWORD *)&v3 - 1;
  }
  if (v11 != v4)
  {
    *(_QWORD *)(*a1 + 8 * v11) = v8;
    v10 = *__p;
  }
LABEL_28:
  *v8 = v10;
  *__p = 0;
  --a1[3];
  v13 = (std::__shared_weak_count *)__p[3];
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  operator delete(__p);
  return v5;
}

void **std::priority_queue<md::MaskingOverlayMeshProcessor::_unionPolygons(std::list<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>> &)::PolygonEdge,std::vector<md::MaskingOverlayMeshProcessor::_unionPolygons(std::list<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>> &)::PolygonEdge,std::allocator<md::MaskingOverlayMeshProcessor::_unionPolygons(std::list<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>> &)::PolygonEdge>>,std::less<md::MaskingOverlayMeshProcessor::_unionPolygons(std::list<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>> &)::PolygonEdge>>::~priority_queue(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 4);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 40;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t geo::MartinezPolygonUnion<double>::~MartinezPolygonUnion(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  while (*(_QWORD *)a1 != *(_QWORD *)(a1 + 8))
    std::priority_queue<geo::MartinezPolygonUnion<double>::HorizontalIndex,std::vector<geo::MartinezPolygonUnion<double>::HorizontalIndex,std::allocator<geo::MartinezPolygonUnion<double>::HorizontalIndex>>,std::greater<geo::MartinezPolygonUnion<double>::HorizontalIndex>>::pop(a1);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 40));
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v2 = *(_QWORD **)(a1 + 56);
  v3 = *(_QWORD **)(a1 + 64);
  if (v2 == v3)
  {
    *(_QWORD *)(a1 + 64) = v2;
    if (!v2)
      goto LABEL_6;
    goto LABEL_5;
  }
  do
  {
    if (*v2)
      MEMORY[0x1A1AF4E00](*v2, 0x1020C406C923FA7);
    ++v2;
  }
  while (v2 != v3);
  v2 = *(_QWORD **)(a1 + 56);
  *(_QWORD *)(a1 + 64) = v2;
  if (v2)
LABEL_5:
    operator delete(v2);
LABEL_6:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 40));
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t std::priority_queue<geo::MartinezPolygonUnion<double>::HorizontalIndex,std::vector<geo::MartinezPolygonUnion<double>::HorizontalIndex,std::allocator<geo::MartinezPolygonUnion<double>::HorizontalIndex>>,std::greater<geo::MartinezPolygonUnion<double>::HorizontalIndex>>::pop(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;

  v1 = result;
  v3 = *(char **)result;
  v2 = *(_QWORD *)(result + 8);
  v4 = v2 - *(_QWORD *)result;
  if (v4 >= 9)
  {
    v5 = 0;
    v6 = v4 >> 3;
    v19 = *(_QWORD *)v3;
    v7 = (unint64_t)((v4 >> 3) - 2) >> 1;
    v8 = *(uint64_t **)result;
    do
    {
      v9 = &v8[v5 + 1];
      v10 = (2 * v5) | 1;
      v11 = 2 * v5 + 2;
      if (v11 < v6)
      {
        result = geo::MartinezPolygonUnion<double>::HorizontalIndex::operator<(*v9, v8[v5 + 2]);
        if (!(_DWORD)result)
        {
          ++v9;
          v10 = v11;
        }
      }
      *v8 = *v9;
      v8 = v9;
      v5 = v10;
    }
    while (v10 <= v7);
    v12 = (uint64_t *)(v2 - 8);
    if (v9 == (uint64_t *)(v2 - 8))
    {
      *v9 = v19;
    }
    else
    {
      *v9 = *v12;
      *v12 = v19;
      v13 = (char *)v9 - v3 + 8;
      if (v13 >= 9)
      {
        v14 = (((unint64_t)v13 >> 3) - 2) >> 1;
        v15 = (uint64_t *)&v3[8 * v14];
        v16 = *v15;
        v17 = *v9;
        result = geo::MartinezPolygonUnion<double>::HorizontalIndex::operator<(*v15, *v9);
        if ((result & 1) == 0)
        {
          do
          {
            v18 = v15;
            *v9 = v16;
            if (!v14)
              break;
            v14 = (v14 - 1) >> 1;
            v15 = (uint64_t *)&v3[8 * v14];
            v16 = *v15;
            result = geo::MartinezPolygonUnion<double>::HorizontalIndex::operator<(*v15, v17);
            v9 = v18;
          }
          while (!(_DWORD)result);
          *v18 = v17;
        }
      }
    }
  }
  *(_QWORD *)(v1 + 8) -= 8;
  return result;
}

BOOL geo::MartinezPolygonUnion<double>::HorizontalIndex::operator<(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  unsigned int v12;
  unsigned int v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v20;
  double v21;
  int v22;
  unsigned int v23;
  unsigned int v24;

  v2 = *(double *)(a1 + 8);
  v4 = *(double *)(a1 + 16);
  v3 = *(double *)(a1 + 24);
  v5 = v4 + *(double *)a1;
  v6 = v3 + v2;
  v8 = *(double *)a2;
  v7 = *(double *)(a2 + 8);
  v9 = *(double *)(a2 + 16);
  v10 = v9 + *(double *)a2;
  v11 = *(double *)(a2 + 24) + v7;
  v12 = *(unsigned __int8 *)(a1 + 36);
  v13 = *(unsigned __int8 *)(a2 + 36);
  if (v12 == 1)
    v14 = *(double *)a1;
  else
    v14 = v4 + *(double *)a1;
  if (v13 == 1)
    v15 = *(double *)a2;
  else
    v15 = v9 + *(double *)a2;
  if (vabdd_f64(v14, v15) < 1.0e-12)
  {
    v16 = v12 == 1 ? *(double *)(a1 + 8) : v3 + v2;
    v17 = v13 == 1 ? *(double *)(a2 + 8) : *(double *)(a2 + 24) + v7;
    if (vabdd_f64(v16, v17) < 1.0e-12)
    {
      if (v12 < v13)
        return 1;
      if (v12 > v13)
        return 0;
      if (vabdd_f64(*(double *)a1, v8) >= 1.0e-12 || vabdd_f64(v2, v7) >= 1.0e-12)
      {
        if (vabdd_f64(v5, v10) >= 1.0e-12 || vabdd_f64(v6, v11) >= 1.0e-12)
        {
LABEL_40:
          v23 = *(_DWORD *)(a1 + 32);
          v24 = *(_DWORD *)(a2 + 32);
          if (v23 >= v24)
          {
            if (v23 <= v24)
              return *(_QWORD *)(a2 + 40) == 0;
            return 0;
          }
          return 1;
        }
        v18 = (v6 - v7) * v4 + (v8 - v5) * v3;
      }
      else
      {
        v18 = (v6 - v11) * v4 + (v10 - v5) * v3;
      }
      v21 = fabs(v18);
      if (v18 > 0.0)
        v22 = 1;
      else
        v22 = 2;
      if (v21 <= 1.0e-12)
        v22 = 0;
      if (v22 == 1)
        return 0;
      if (v22 == 2)
        return 1;
      goto LABEL_40;
    }
  }
  if (v14 < v15)
    return 1;
  if (v14 > v15)
    return 0;
  if (v12 == 1)
    v6 = *(double *)(a1 + 8);
  if (v13 == 1)
    v20 = *(double *)(a2 + 8);
  else
    v20 = *(double *)(a2 + 24) + v7;
  return v6 < v20;
}

void geo::MartinezPolygonUnion<double>::addPolygonPoints(_QWORD *a1, uint64_t *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  double *v9;
  double v10;
  double v11;
  unint64_t v12;
  double *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  BOOL v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _BYTE *v30;
  uint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  _OWORD *v34;
  uint64_t *v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t *v46;
  char *v47;
  unint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t *v53;
  uint64_t v54;
  __int128 v55;

  v4 = *a2;
  v3 = a2[1];
  if (v3 != *a2)
  {
    v6 = 0;
    v7 = (v3 - v4) >> 4;
    while (1)
    {
      v9 = (double *)(v4 + 16 * v6);
      v11 = *v9;
      v10 = v9[1];
      if (v6 == v7 - 1)
        v12 = 0;
      else
        v12 = v6 + 1;
      v13 = (double *)(v4 + 16 * v12);
      v15 = *v13;
      v14 = v13[1];
      if (vabdd_f64(v11, *v13) < 1.0e-12 && vabdd_f64(v10, v14) < 1.0e-12)
        goto LABEL_5;
      if (v11 < v15 || (v11 <= v15 ? (v18 = v10 < v14) : (v18 = 0), v18))
      {
        v16 = v15 - v11;
        v17 = v9[1];
      }
      else
      {
        v16 = v11 - v15;
        v17 = v13[1];
        v11 = *v13;
        v14 = v9[1];
      }
      v19 = v14 - v17;
      v20 = operator new();
      *(double *)v20 = v11;
      *(double *)(v20 + 8) = v17;
      *(double *)(v20 + 16) = v16;
      *(double *)(v20 + 24) = v19;
      *(_DWORD *)(v20 + 32) = a3;
      *(_BYTE *)(v20 + 36) = 1;
      *(_QWORD *)(v20 + 40) = 0;
      *(_QWORD *)(v20 + 45) = 0;
      v21 = operator new();
      *(double *)v21 = v11;
      *(double *)(v21 + 8) = v17;
      *(double *)(v21 + 16) = v16;
      *(double *)(v21 + 24) = v19;
      *(_DWORD *)(v21 + 32) = a3;
      *(_BYTE *)(v21 + 36) = 0;
      *(_DWORD *)(v21 + 48) = 0;
      *(_BYTE *)(v21 + 52) = 0;
      *(_QWORD *)(v20 + 40) = v21;
      *(_QWORD *)(v21 + 40) = v20;
      v23 = (uint64_t *)a1[8];
      v22 = a1[9];
      if ((unint64_t)v23 >= v22)
      {
        v25 = (uint64_t *)a1[7];
        v26 = v23 - v25;
        v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 61)
          goto LABEL_67;
        v28 = v22 - (_QWORD)v25;
        if (v28 >> 2 > v27)
          v27 = v28 >> 2;
        v29 = (unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v27;
        if (v29)
        {
          if (v29 >> 61)
            goto LABEL_68;
          v30 = operator new(8 * v29);
        }
        else
        {
          v30 = 0;
        }
        v31 = (uint64_t *)&v30[8 * v26];
        *v31 = v20;
        v24 = v31 + 1;
        if (v23 == v25)
        {
          v25 = v23;
        }
        else
        {
          v32 = (char *)(v23 - 1) - (char *)v25;
          if (v32 < 0x58)
            goto LABEL_71;
          if ((unint64_t)((char *)v25 - v30) < 0x20)
            goto LABEL_71;
          v33 = (v32 >> 3) + 1;
          v34 = &v30[8 * v26 - 16];
          v35 = v23 - 2;
          v36 = v33 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v37 = *(_OWORD *)v35;
            *(v34 - 1) = *((_OWORD *)v35 - 1);
            *v34 = v37;
            v34 -= 2;
            v35 -= 4;
            v36 -= 4;
          }
          while (v36);
          v31 -= v33 & 0x3FFFFFFFFFFFFFFCLL;
          v23 -= v33 & 0x3FFFFFFFFFFFFFFCLL;
          if (v33 != (v33 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_71:
            do
            {
              v38 = *--v23;
              *--v31 = v38;
            }
            while (v23 != v25);
            v25 = (uint64_t *)a1[7];
          }
        }
        a1[7] = v31;
        a1[8] = v24;
        a1[9] = &v30[8 * v29];
        if (v25)
          operator delete(v25);
      }
      else
      {
        *v23 = v20;
        v24 = v23 + 1;
      }
      a1[8] = v24;
      v39 = a1[9];
      if ((unint64_t)v24 >= v39)
        break;
      *v24 = v21;
      v8 = v24 + 1;
LABEL_4:
      a1[8] = v8;
      std::priority_queue<geo::MartinezPolygonUnion<double>::HorizontalIndex,std::vector<geo::MartinezPolygonUnion<double>::HorizontalIndex,std::allocator<geo::MartinezPolygonUnion<double>::HorizontalIndex>>,std::greater<geo::MartinezPolygonUnion<double>::HorizontalIndex>>::push((uint64_t)a1, v20);
      std::priority_queue<geo::MartinezPolygonUnion<double>::HorizontalIndex,std::vector<geo::MartinezPolygonUnion<double>::HorizontalIndex,std::allocator<geo::MartinezPolygonUnion<double>::HorizontalIndex>>,std::greater<geo::MartinezPolygonUnion<double>::HorizontalIndex>>::push((uint64_t)a1, v21);
      v4 = *a2;
      v3 = a2[1];
LABEL_5:
      ++v6;
      v7 = (v3 - v4) >> 4;
      if (v6 >= v7)
        return;
    }
    v40 = (char *)a1[7];
    v41 = ((char *)v24 - v40) >> 3;
    v42 = v41 + 1;
    if ((unint64_t)(v41 + 1) >> 61)
LABEL_67:
      abort();
    v43 = v39 - (_QWORD)v40;
    if (v43 >> 2 > v42)
      v42 = v43 >> 2;
    if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8)
      v44 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v44 = v42;
    if (v44)
    {
      if (v44 >> 61)
LABEL_68:
        std::__throw_bad_array_new_length[abi:nn180100]();
      v45 = (char *)operator new(8 * v44);
    }
    else
    {
      v45 = 0;
    }
    v46 = (uint64_t *)&v45[8 * v41];
    v47 = &v45[8 * v44];
    *v46 = v21;
    v8 = v46 + 1;
    if (v24 == (uint64_t *)v40)
    {
      a1[7] = v46;
      a1[8] = v8;
      a1[9] = v47;
LABEL_61:
      operator delete(v24);
      goto LABEL_4;
    }
    v48 = (char *)(v24 - 1) - v40;
    if (v48 > 0x57 && (unint64_t)(v40 - v45) >= 0x20)
    {
      v51 = (v48 >> 3) + 1;
      v49 = &v24[-(v51 & 0x3FFFFFFFFFFFFFFCLL)];
      v52 = &v45[8 * v41 - 16];
      v53 = v24 - 2;
      v54 = v51 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v55 = *(_OWORD *)v53;
        *((_OWORD *)v52 - 1) = *((_OWORD *)v53 - 1);
        *(_OWORD *)v52 = v55;
        v52 -= 32;
        v53 -= 4;
        v54 -= 4;
      }
      while (v54);
      v46 -= v51 & 0x3FFFFFFFFFFFFFFCLL;
      if (v51 == (v51 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_58;
    }
    else
    {
      v49 = v24;
    }
    do
    {
      v50 = *--v49;
      *--v46 = v50;
    }
    while (v49 != (uint64_t *)v40);
    v40 = (char *)a1[7];
LABEL_58:
    a1[7] = v46;
    a1[8] = v8;
    v24 = (uint64_t *)v40;
    a1[9] = v47;
    if (!v40)
      goto LABEL_4;
    goto LABEL_61;
  }
}

uint64_t std::__tree<geo::MartinezPolygonUnion<double>::VerticalIndex,std::less<geo::MartinezPolygonUnion<double>::VerticalIndex>,std::allocator<geo::MartinezPolygonUnion<double>::VerticalIndex>>::__emplace_unique_key_args<geo::MartinezPolygonUnion<double>::VerticalIndex,geo::MartinezPolygonUnion<double>::VerticalIndex>(uint64_t **a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t result;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5 + 4;
        if (!geo::MartinezPolygonUnion<double>::VerticalIndex::operator<(a2, v5 + 4))
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_9;
      }
      result = geo::MartinezPolygonUnion<double>::VerticalIndex::operator<(v9, a2);
      if (!(_DWORD)result)
        break;
      v6 = v8 + 1;
      v5 = v8[1];
      if (!v5)
        goto LABEL_9;
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_9:
    v11 = (uint64_t *)operator new(0x28uLL);
    v11[4] = a3;
    *v11 = 0;
    v11[1] = 0;
    v11[2] = (uint64_t)v8;
    *v6 = v11;
    v12 = (uint64_t *)**a1;
    if (v12)
    {
      *a1 = v12;
      v13 = *v6;
    }
    else
    {
      v13 = v11;
    }
    result = (uint64_t)std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return result;
}

uint64_t geo::MartinezPolygonUnion<double>::VerticalIndex::operator<(uint64_t *a1, uint64_t *a2)
{
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  int v13;
  double v14;
  double v15;
  int v16;
  _BOOL4 v17;

  v3 = 0;
  v4 = *a1;
  while (1)
  {
    v5 = a1;
    v6 = *a2;
    if (!geo::MartinezPolygonUnion<double>::HorizontalIndex::operator<(*a2, v4))
      break;
    v3 ^= 1u;
    v4 = v6;
    a1 = a2;
    a2 = v5;
  }
  v8 = *(double *)(v4 + 16);
  v7 = *(double *)(v4 + 24);
  v9 = *(double *)v6 - (v8 + *(double *)v4);
  v10 = *(double *)(v6 + 8) - (v7 + *(double *)(v4 + 8));
  v11 = -(v10 * v8 - v9 * v7);
  v12 = fabs(v11);
  if (v11 > 0.0)
    v13 = 1;
  else
    v13 = 2;
  if (v12 <= 1.0e-12)
    v13 = 0;
  if (v13 == 1)
    goto LABEL_19;
  if (v13 != 2)
  {
    v14 = -(v8 * (v10 + *(double *)(v6 + 24)) - v7 * (v9 + *(double *)(v6 + 16)));
    v15 = fabs(v14);
    if (v14 > 0.0)
      v16 = 1;
    else
      v16 = 2;
    if (v15 <= 1.0e-12)
      v16 = 0;
    if (v16 != 1)
    {
      if (v16 != 2)
      {
        v17 = *(_DWORD *)(v4 + 32) < *(_DWORD *)(v6 + 32);
        return (v3 ^ v17) & 1;
      }
      goto LABEL_18;
    }
LABEL_19:
    v17 = 0;
    return (v3 ^ v17) & 1;
  }
LABEL_18:
  v17 = 1;
  return (v3 ^ v17) & 1;
}

void geo::MartinezPolygonUnion<double>::possibleIntersects(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  BOOL v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v24;
  float64x2_t v26;

  if (a2 && a3 && *(_DWORD *)(a2 + 32) != *(_DWORD *)(a3 + 32))
  {
    v6 = *(double *)(a2 + 8);
    v7 = *(double *)(a2 + 16);
    v8 = *(double *)(a2 + 24);
    v9 = v7 + *(double *)a2;
    v10 = v8 + v6;
    v11 = *(double *)a3;
    v12 = *(double *)(a3 + 8);
    v14 = *(double *)(a3 + 16);
    v13 = *(double *)(a3 + 24);
    v15 = v14 + *(double *)a3;
    v16 = v13 + v12;
    if (vabdd_f64(*(double *)a2, *(double *)a3) < 1.0e-12
      && vabdd_f64(v6, v12) < 1.0e-12
      && vabdd_f64(v9, v15) < 1.0e-12
      && vabdd_f64(v10, v16) < 1.0e-12)
    {
      *(_BYTE *)(a3 + 50) = 1;
      *(_BYTE *)(a2 + 50) = 1;
      *(_BYTE *)(a2 + 51) = 0;
      *(_BYTE *)(a3 + 51) = 1;
      v17 = *(unsigned __int8 *)(a2 + 49) == *(unsigned __int8 *)(a3 + 49);
      *(_BYTE *)(a3 + 52) = v17;
      *(_BYTE *)(a2 + 52) = v17;
      return;
    }
    v18 = v10 - v12;
    if (fabs(v18 * v7 + (v11 - v9) * v8) <= 1.0e-12 && fabs((v10 - v16) * v7 + (v15 - v9) * v8) <= 1.0e-12)
    {
      geo::MartinezPolygonUnion<double>::subdivide(a1, a2, (float64x2_t *)a3);
      v26 = vaddq_f64(*(float64x2_t *)(a3 + 16), *(float64x2_t *)a3);
      geo::MartinezPolygonUnion<double>::subdivide(a1, a2, &v26);
      geo::MartinezPolygonUnion<double>::subdivide(a1, a3, (float64x2_t *)a2);
      v26 = vaddq_f64(*(float64x2_t *)(a2 + 16), *(float64x2_t *)a2);
LABEL_24:
      geo::MartinezPolygonUnion<double>::subdivide(a1, a3, &v26);
      return;
    }
    v19 = -(v14 * v8 - v13 * v7);
    if (v19 != 0.0)
    {
      v20 = 1.0 / v19;
      v21 = v9 - v11;
      v22 = v20 * -(v18 * v14 - v13 * v21);
      v26.f64[0] = v9 - v22 * v7;
      v26.f64[1] = v10 - v22 * v8;
      if (v22 >= 0.0 && v22 <= 1.0)
      {
        v24 = v20 * -(v21 * v8 - v18 * v7);
        if (v24 >= 0.0 && v24 <= 1.0)
        {
          geo::MartinezPolygonUnion<double>::subdivide(a1, a2, &v26);
          goto LABEL_24;
        }
      }
    }
  }
}

BOOL geo::MartinezPolygonUnion<double>::Chain::add(uint64_t a1, double *a2, int a3)
{
  _BOOL8 result;
  double *v5;
  double *v6;
  double v8;
  double v9;
  int v10;
  int v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  unint64_t v25;
  __int128 v26;
  double v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  __int128 v33;
  char *v34;
  char *v35;
  __int128 v36;
  char *v37;
  double *v38;
  int v39;
  __int128 v40;
  __int128 v41;

  if (*(_BYTE *)(a1 + 24))
    return 0;
  v5 = *(double **)a1;
  v6 = *(double **)(a1 + 8);
  if (*(double **)a1 == v6)
    return 0;
  v8 = *v5;
  v9 = *a2;
  if (vabdd_f64(*v5, *a2) >= 1.0e-12 || vabdd_f64(v5[1], a2[1]) >= 1.0e-12)
  {
    if (vabdd_f64(v8, v9 + a2[2]) >= 1.0e-12 || vabdd_f64(v5[1], a2[3] + a2[1]) >= 1.0e-12)
    {
      v11 = 0;
      v10 = -1;
    }
    else
    {
      v11 = 0;
      v10 = 0;
    }
  }
  else
  {
    v10 = 0;
    v11 = 1;
  }
  v12 = *(v6 - 4);
  v13 = *(v6 - 3);
  v14 = *(v6 - 2) + v12;
  v15 = *(v6 - 1) + v13;
  if (vabdd_f64(v14, v9) < 1.0e-12 && vabdd_f64(v15, a2[1]) < 1.0e-12)
  {
    v16 = a2[2];
    v10 = 1;
LABEL_21:
    v20 = a2[3];
    v40 = *(_OWORD *)a2;
    goto LABEL_22;
  }
  v16 = a2[2];
  v17 = v9 + v16;
  if (vabdd_f64(v14, v9 + v16) >= 1.0e-12 || (v18 = a2[3], v19 = v18 + a2[1], vabdd_f64(v15, v19) >= 1.0e-12))
  {
    if (!v11)
      goto LABEL_21;
    v18 = a2[3];
    v19 = v18 + a2[1];
  }
  else
  {
    v10 = 1;
  }
  v16 = -v16;
  v20 = -v18;
  *(double *)&v40 = v17;
  *((double *)&v40 + 1) = v19;
LABEL_22:
  *(double *)&v41 = v16;
  *((double *)&v41 + 1) = v20;
  if (v10 == 1)
  {
    v24 = v20 + *((double *)&v40 + 1) - v13;
    if (fabs(v24 * v16 + (v12 - (v16 + *(double *)&v40)) * v20) <= 1.0e-12)
    {
      *(v6 - 2) = v16 + *(double *)&v40 - v12;
      *(v6 - 1) = v24;
    }
    else
    {
      v25 = *(_QWORD *)(a1 + 16);
      if ((unint64_t)v6 >= v25)
      {
        v28 = ((char *)v6 - (char *)v5) >> 5;
        v29 = v28 + 1;
        if ((unint64_t)(v28 + 1) >> 59)
          abort();
        v30 = v25 - (_QWORD)v5;
        if (v30 >> 4 > v29)
          v29 = v30 >> 4;
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFE0)
          v31 = 0x7FFFFFFFFFFFFFFLL;
        else
          v31 = v29;
        if (v31)
        {
          if (v31 >> 59)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v32 = (char *)operator new(32 * v31);
        }
        else
        {
          v32 = 0;
        }
        v33 = v41;
        v34 = &v32[32 * v28];
        *(_OWORD *)v34 = v40;
        *((_OWORD *)v34 + 1) = v33;
        v35 = v34;
        do
        {
          v36 = *((_OWORD *)v6 - 1);
          *((_OWORD *)v35 - 2) = *((_OWORD *)v6 - 2);
          *((_OWORD *)v35 - 1) = v36;
          v35 -= 32;
          v6 -= 4;
        }
        while (v6 != v5);
        v37 = &v32[32 * v31];
        v38 = *(double **)a1;
        v6 = (double *)(v34 + 32);
        *(_QWORD *)a1 = v35;
        *(_QWORD *)(a1 + 8) = v34 + 32;
        *(_QWORD *)(a1 + 16) = v37;
        if (v38)
          operator delete(v38);
      }
      else
      {
        v26 = v41;
        *(_OWORD *)v6 = v40;
        *((_OWORD *)v6 + 1) = v26;
        v6 += 4;
      }
      *(_QWORD *)(a1 + 8) = v6;
    }
  }
  else if (!v10)
  {
    v21 = *((double *)&v40 + 1);
    v22 = v5[2] + v8;
    v23 = v5[3] + v5[1];
    if (fabs((*((double *)&v40 + 1) + v20 - v23) * v16 + (v22 - (*(double *)&v40 + v16)) * v20) <= 1.0e-12)
    {
      v27 = v22 - *(double *)&v40;
      *(_OWORD *)v5 = v40;
      v5[2] = v27;
      v5[3] = v23 - v21;
    }
    else
    {
      std::vector<gm::LineSegment<double,2>>::insert((void **)a1, v5, &v40);
      v6 = *(double **)(a1 + 8);
    }
  }
  if (vabdd_f64(**(double **)a1, *(v6 - 4) + *(v6 - 2)) < 1.0e-12
    && vabdd_f64(*(double *)(*(_QWORD *)a1 + 8), *(v6 - 1) + *(v6 - 3)) < 1.0e-12)
  {
    *(_BYTE *)(a1 + 24) = 1;
  }
  result = v10 != -1;
  if (v10 != -1)
  {
    v39 = *(_DWORD *)(a1 + 28);
    if (v39 != 2 && v39 != a3)
      *(_DWORD *)(a1 + 28) = 2;
  }
  return result;
}

void std::__tree<geo::MartinezPolygonUnion<double>::VerticalIndex,std::less<geo::MartinezPolygonUnion<double>::VerticalIndex>,std::allocator<geo::MartinezPolygonUnion<double>::VerticalIndex>>::__erase_unique<geo::MartinezPolygonUnion<double>::VerticalIndex>(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v6;
  uint64_t *v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  BOOL v13;

  v3 = (uint64_t *)(a1 + 1);
  v2 = a1[1];
  if (v2)
  {
    v6 = (uint64_t *)(a1 + 1);
    v7 = a1[1];
    do
    {
      v8 = geo::MartinezPolygonUnion<double>::VerticalIndex::operator<(v7 + 4, a2);
      v9 = (uint64_t **)(v7 + 1);
      if (!v8)
      {
        v9 = (uint64_t **)v7;
        v6 = v7;
      }
      v7 = *v9;
    }
    while (*v9);
    if (v6 != v3 && (geo::MartinezPolygonUnion<double>::VerticalIndex::operator<(a2, v6 + 4) & 1) == 0)
    {
      v10 = (uint64_t *)v6[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
      else
      {
        v12 = v6;
        do
        {
          v11 = (uint64_t *)v12[2];
          v13 = *v11 == (_QWORD)v12;
          v12 = v11;
        }
        while (!v13);
      }
      if (*a1 == v6)
        *a1 = v11;
      a1[2] = (uint64_t *)((char *)a1[2] - 1);
      std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v2, v6);
      operator delete(v6);
    }
  }
}

char *std::vector<std::vector<gm::Matrix<double,2,1>>>::emplace<>(char **a1, uint64_t a2)
{
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  __int128 v29;
  char *v30;
  char *v31;
  char *v32;
  void *v33;
  void *v34;
  char *v36;

  v4 = *a1;
  v3 = (unint64_t)a1[1];
  v5 = a2 - (_QWORD)*a1;
  v6 = v5 / 24;
  v7 = &(*a1)[24 * (v5 / 24)];
  v8 = (unint64_t)a1[2];
  if (v3 < v8)
  {
    if (v7 == (char *)v3)
    {
      *(_QWORD *)v7 = 0;
      *((_QWORD *)v7 + 1) = 0;
      *((_QWORD *)v7 + 2) = 0;
      a1[1] = v7 + 24;
    }
    else
    {
      v9 = v7 + 24;
      v10 = v3 - 24;
      if (v3 < 0x18)
      {
        v12 = a1[1];
      }
      else
      {
        v11 = v3 - 24;
        v12 = a1[1];
        do
        {
          *(_QWORD *)v12 = 0;
          *((_QWORD *)v12 + 1) = 0;
          *((_QWORD *)v12 + 2) = 0;
          *(_OWORD *)v12 = *(_OWORD *)v11;
          *((_QWORD *)v12 + 2) = *(_QWORD *)(v11 + 16);
          *(_QWORD *)v11 = 0;
          *(_QWORD *)(v11 + 8) = 0;
          *(_QWORD *)(v11 + 16) = 0;
          v12 += 24;
          v11 += 24;
        }
        while (v11 < v3);
      }
      a1[1] = v12;
      if ((_QWORD *)v3 != v9)
      {
        v19 = 8 * ((uint64_t)(v3 - (_QWORD)v9) >> 3);
        do
        {
          v21 = *(void **)v10;
          if (*(_QWORD *)v10)
          {
            *(_QWORD *)(v10 + 8) = v21;
            operator delete(v21);
            *(_QWORD *)v10 = 0;
            *(_QWORD *)(v10 + 8) = 0;
            *(_QWORD *)(v10 + 16) = 0;
          }
          v20 = (uint64_t)&v7[v19 - 24];
          *(_OWORD *)v10 = *(_OWORD *)v20;
          *(_QWORD *)(v10 + 16) = *(_QWORD *)&v7[v19 - 8];
          *(_QWORD *)v20 = 0;
          *(_QWORD *)(v20 + 8) = 0;
          *(_QWORD *)(v20 + 16) = 0;
          v10 -= 24;
          v19 -= 24;
        }
        while (v19);
      }
      v22 = *(void **)v7;
      if (*(_QWORD *)v7)
      {
        *(_QWORD *)&v4[24 * v6 + 8] = v22;
        operator delete(v22);
        *(_QWORD *)v7 = 0;
        *((_QWORD *)v7 + 1) = 0;
        *((_QWORD *)v7 + 2) = 0;
      }
      *(_QWORD *)v7 = 0;
      *((_QWORD *)v7 + 1) = 0;
      *((_QWORD *)v7 + 2) = 0;
    }
    return v7;
  }
  v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3 - (_QWORD)v4) >> 3) + 1;
  if (v13 > 0xAAAAAAAAAAAAAAALL)
    abort();
  v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - (_QWORD)v4) >> 3);
  if (2 * v14 > v13)
    v13 = 2 * v14;
  if (v14 >= 0x555555555555555)
    v15 = 0xAAAAAAAAAAAAAAALL;
  else
    v15 = v13;
  if (v15)
  {
    if (v15 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_57;
    v16 = (char *)operator new(24 * v15);
  }
  else
  {
    v16 = 0;
  }
  v17 = &v16[24 * v6];
  v36 = &v16[24 * v15];
  if (v6 == v15)
  {
    if (v5 >= 24)
    {
      v18 = v6 + 2;
      if (v6 >= -1)
        v18 = v6 + 1;
      v17 -= 24 * (v18 >> 1);
      goto LABEL_38;
    }
    if ((unint64_t)(v5 + 23) < 0x2F)
      v23 = 1;
    else
      v23 = 2 * v6;
    if (v23 <= 0xAAAAAAAAAAAAAAALL)
    {
      v24 = (char *)operator new(24 * v23);
      v17 = &v24[24 * (v23 >> 2)];
      v36 = &v24[24 * v23];
      if (v16)
        operator delete(v16);
      goto LABEL_38;
    }
LABEL_57:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
LABEL_38:
  *(_QWORD *)v17 = 0;
  *((_QWORD *)v17 + 1) = 0;
  *((_QWORD *)v17 + 2) = 0;
  v25 = v17 + 24;
  v26 = *a1;
  if (*a1 == v7)
  {
    v28 = v17;
  }
  else
  {
    v27 = v7;
    v28 = v17;
    do
    {
      *((_QWORD *)v28 - 3) = 0;
      *((_QWORD *)v28 - 2) = 0;
      v28 -= 24;
      *((_QWORD *)v28 + 2) = 0;
      v29 = *(_OWORD *)(v27 - 24);
      v27 -= 24;
      *(_OWORD *)v28 = v29;
      *((_QWORD *)v28 + 2) = *((_QWORD *)v27 + 2);
      *(_QWORD *)v27 = 0;
      *((_QWORD *)v27 + 1) = 0;
      *((_QWORD *)v27 + 2) = 0;
    }
    while (v27 != v26);
    v25 = v17 + 24;
  }
  v30 = a1[1];
  if (v30 != v7)
  {
    do
    {
      *(_QWORD *)v25 = 0;
      *((_QWORD *)v25 + 1) = 0;
      *((_QWORD *)v25 + 2) = 0;
      *(_OWORD *)v25 = *(_OWORD *)v7;
      *((_QWORD *)v25 + 2) = *((_QWORD *)v7 + 2);
      *(_QWORD *)v7 = 0;
      *((_QWORD *)v7 + 1) = 0;
      *((_QWORD *)v7 + 2) = 0;
      v25 += 24;
      v7 += 24;
    }
    while (v7 != v30);
    v7 = a1[1];
  }
  v31 = *a1;
  *a1 = v28;
  a1[1] = v25;
  a1[2] = v36;
  if (v7 != v31)
  {
    v32 = v7;
    do
    {
      v34 = (void *)*((_QWORD *)v32 - 3);
      v32 -= 24;
      v33 = v34;
      if (v34)
      {
        *((_QWORD *)v7 - 2) = v33;
        operator delete(v33);
      }
      v7 = v32;
    }
    while (v32 != v31);
    v7 = v31;
  }
  if (v7)
    operator delete(v7);
  return v17;
}

void sub_19FD51694(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<arComponents::CustomBoxCreateDesc>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::vector<std::vector<gm::Matrix<double,2,1>>>>::~__split_buffer(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4;
  void *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  void *v10;
  void *v11;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 != v2)
  {
    v4 = *(void ***)(a1 + 16);
    do
    {
      v7 = (char *)*(v4 - 3);
      v4 -= 3;
      v6 = v7;
      *(_QWORD *)(a1 + 16) = v4;
      if (v7)
      {
        v8 = (char *)*(v3 - 2);
        v5 = v6;
        if (v8 != v6)
        {
          v9 = (char *)*(v3 - 2);
          do
          {
            v11 = (void *)*((_QWORD *)v9 - 3);
            v9 -= 24;
            v10 = v11;
            if (v11)
            {
              *((_QWORD *)v8 - 2) = v10;
              operator delete(v10);
            }
            v8 = v9;
          }
          while (v9 != v6);
          v5 = *v4;
        }
        *(v3 - 2) = v6;
        operator delete(v5);
        v4 = *(void ***)(a1 + 16);
      }
      v3 = v4;
    }
    while (v4 != v2);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<gm::LineSegment<double,2>>::insert(void **a1, _BYTE *a2, _OWORD *a3)
{
  unint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _OWORD *v12;
  __int128 *v13;
  __int128 v14;
  __int128 v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  const double *v20;
  double *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _BOOL8 v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  __int128 v39;
  _OWORD *v40;
  unint64_t v41;
  char *v42;
  __int128 v43;
  void *i;
  __int128 v45;
  __int128 v46;
  void *v47;
  float64x2x4_t v48;

  v6 = *a1;
  v5 = (unint64_t)a1[1];
  v7 = a2 - (_BYTE *)*a1;
  v8 = (unint64_t)*a1 + (v7 & 0xFFFFFFFFFFFFFFE0);
  v9 = (unint64_t)a1[2];
  if (v5 < v9)
  {
    if (v8 == v5)
    {
      v33 = a3[1];
      *(_OWORD *)v8 = *a3;
      *(_OWORD *)(v8 + 16) = v33;
      a1[1] = (void *)(v8 + 32);
      return;
    }
    v10 = v8 + 32;
    v11 = (_QWORD *)(v5 - 32);
    v12 = a1[1];
    if (v5 >= 0x20)
    {
      v13 = (__int128 *)(v5 - 32);
      v12 = a1[1];
      do
      {
        v14 = *v13;
        v15 = v13[1];
        v13 += 2;
        *v12 = v14;
        v12[1] = v15;
        v12 += 2;
      }
      while ((unint64_t)v13 < v5);
    }
    a1[1] = v12;
    if (v5 == v10)
      goto LABEL_16;
    v16 = v5 - v10;
    v17 = v5 - v10 - 32;
    if (v17 >= 0xE0
      && (v5 - (v16 & 0xFFFFFFFFFFFFFFE0) >= (unint64_t)v11
       || (unint64_t)&v6[v16 + (v7 & 0xFFFFFFFFFFFFFFE0) - (v16 & 0xFFFFFFFFFFFFFFE0)] >= v5))
    {
      v18 = (v17 >> 5) + 1;
      v19 = v5 - 32 * (v18 & 0xFFFFFFFFFFFFFFELL);
      v20 = (const double *)(v5 - 96);
      v21 = (double *)(v5 - 64);
      v22 = v18 & 0xFFFFFFFFFFFFFFELL;
      do
      {
        v48 = vld4q_f64(v20);
        vst4q_f64(v21, v48);
        v21 -= 8;
        v20 -= 8;
        v22 -= 2;
      }
      while (v22);
      if (v18 == (v18 & 0xFFFFFFFFFFFFFFELL))
      {
LABEL_16:
        v26 = v8 <= (unint64_t)a3 && v12 > a3;
        v27 = &a3[2 * v26];
        *(_QWORD *)v8 = *v27;
        *(_QWORD *)(v8 + 8) = v27[1];
        *(_QWORD *)(v8 + 16) = v27[2];
        *(_QWORD *)(v8 + 24) = v27[3];
        return;
      }
      v11 -= 4 * (v18 & 0xFFFFFFFFFFFFFFELL);
      v5 = v19;
    }
    v23 = (_QWORD *)(v5 - 16);
    do
    {
      v24 = *(v11 - 4);
      v11 -= 4;
      *(v23 - 2) = v24;
      *(v23 - 1) = v11[1];
      *v23 = v11[2];
      v23[1] = v11[3];
      v23 -= 4;
    }
    while (v11 != (_QWORD *)v8);
    goto LABEL_16;
  }
  v28 = ((uint64_t)(v5 - (_QWORD)v6) >> 5) + 1;
  if (v28 >> 59)
    abort();
  v30 = v9 - (_QWORD)v6;
  if (v30 >> 4 > v28)
    v28 = v30 >> 4;
  if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFE0)
    v31 = 0x7FFFFFFFFFFFFFFLL;
  else
    v31 = v28;
  if (v31)
  {
    if (v31 >> 59)
      goto LABEL_57;
    v32 = (char *)operator new(32 * v31);
  }
  else
  {
    v32 = 0;
  }
  v34 = v7 >> 5;
  v35 = &v32[32 * (v7 >> 5)];
  v36 = &v32[32 * v31];
  if (v7 >> 5 == v31)
  {
    if (v7 >= 1)
    {
      if (v34 >= -1)
        v37 = v34 + 1;
      else
        v37 = v34 + 2;
      v35 -= 32 * (v37 >> 1);
      goto LABEL_46;
    }
    if (v6 == a2)
      v38 = 1;
    else
      v38 = v7 >> 4;
    if (!(v38 >> 59))
    {
      v35 = (char *)operator new(32 * v38);
      v36 = &v35[32 * v38];
      if (v32)
      {
        operator delete(v32);
        v6 = *a1;
      }
      goto LABEL_46;
    }
LABEL_57:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
LABEL_46:
  v39 = a3[1];
  *(_OWORD *)v35 = *a3;
  *((_OWORD *)v35 + 1) = v39;
  v40 = v35 + 32;
  if (v6 == (_BYTE *)v8)
  {
    v42 = v35;
  }
  else
  {
    v41 = v8;
    do
    {
      v42 = v35 - 32;
      v43 = *(_OWORD *)(v41 - 16);
      *((_OWORD *)v35 - 2) = *(_OWORD *)(v41 - 32);
      *((_OWORD *)v35 - 1) = v43;
      v41 -= 32;
      v35 -= 32;
    }
    while ((_BYTE *)v41 != v6);
  }
  for (i = a1[1]; (void *)v8 != i; v40 += 2)
  {
    v45 = *(_OWORD *)v8;
    v46 = *(_OWORD *)(v8 + 16);
    v8 += 32;
    *v40 = v45;
    v40[1] = v46;
  }
  v47 = *a1;
  *a1 = v42;
  a1[1] = v40;
  a1[2] = v36;
  if (v47)
    operator delete(v47);
}

void sub_19FD51A40(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void geo::MartinezPolygonUnion<double>::subdivide(uint64_t a1, uint64_t a2, float64x2_t *a3)
{
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  int32x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  double v16;
  int v18;
  uint64_t v19;
  uint64_t v20;
  float64x2_t v21;
  __int128 v22;
  unint64_t v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _BYTE *v31;
  uint64_t *v32;
  char *v33;
  unint64_t v34;
  uint64_t v35;
  _OWORD *v36;
  uint64_t *v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  _BYTE *v51;
  uint64_t *v52;
  char *v53;
  unint64_t v54;
  uint64_t v55;
  _OWORD *v56;
  uint64_t *v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  uint64_t *v69;
  char *v70;
  unint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t *v76;
  uint64_t v77;
  __int128 v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  v7 = *(float64x2_t *)a2;
  v6 = *(float64x2_t *)(a2 + 16);
  v8 = *a3;
  v9 = vsubq_f64(*(float64x2_t *)a2, *a3);
  if (fabs(v9.f64[0]) >= 1.0e-12 || fabs(v9.f64[1]) >= 1.0e-12)
  {
    v10 = vaddq_f64(v6, v7);
    v11 = vmovn_s64(vcgtq_f64((float64x2_t)vdupq_n_s64(0x3D719799812DEA11uLL), vabdq_f64(v10, v8)));
    if ((v11.i32[0] & v11.i32[1] & 1) == 0)
    {
      v12 = vsubq_f64(v8, v7);
      v13 = vmulq_f64(vsubq_f64(v10, v8), (float64x2_t)vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL));
      if (fabs(vsubq_f64(v13, (float64x2_t)vdupq_laneq_s64((int64x2_t)v13, 1)).f64[0]) <= 1.0e-12)
      {
        v14 = vmulq_f64((float64x2_t)vextq_s8((int8x16_t)v12, (int8x16_t)v6, 8uLL), (float64x2_t)vextq_s8((int8x16_t)v6, (int8x16_t)v6, 8uLL));
        v12.f64[1] = *(float64_t *)(a2 + 24);
        v15 = vmlaq_f64(v14, v6, v12);
        v16 = vdivq_f64(v15, (float64x2_t)vdupq_laneq_s64((int64x2_t)v15, 1)).f64[0];
        if (v16 >= 0.0 && v16 <= 1.0)
        {
          v79 = v10;
          v18 = *(_DWORD *)(a2 + 32);
          *(_QWORD *)&v81.f64[0] = a2;
          std::__tree<geo::MartinezPolygonUnion<double>::VerticalIndex,std::less<geo::MartinezPolygonUnion<double>::VerticalIndex>,std::allocator<geo::MartinezPolygonUnion<double>::VerticalIndex>>::__erase_unique<geo::MartinezPolygonUnion<double>::VerticalIndex>((uint64_t **)(a1 + 32), (uint64_t *)&v81);
          *(float64x2_t *)(a2 + 16) = vsubq_f64(*a3, *(float64x2_t *)a2);
          *(_QWORD *)(*(_QWORD *)(a2 + 40) + 40) = 0;
          v19 = operator new();
          v20 = v19;
          v21 = *(float64x2_t *)a2;
          v22 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)v19 = *(_OWORD *)a2;
          *(_OWORD *)(v19 + 16) = v22;
          *(_DWORD *)(v19 + 32) = *(_DWORD *)(a2 + 32);
          *(_BYTE *)(v19 + 36) = *(_BYTE *)(a2 + 36);
          *(_QWORD *)(v19 + 40) = 0;
          LODWORD(v21.f64[0]) = *(_DWORD *)(a2 + 49);
          *(_BYTE *)(v19 + 48) = vmovl_u8(*(uint8x8_t *)&v21.f64[0]).u8[0];
          *(_DWORD *)(v19 + 49) = LODWORD(v21.f64[0]);
          v24 = *(uint64_t **)(a1 + 64);
          v23 = *(_QWORD *)(a1 + 72);
          if ((unint64_t)v24 >= v23)
          {
            v26 = *(uint64_t **)(a1 + 56);
            v27 = v24 - v26;
            v28 = v27 + 1;
            if ((unint64_t)(v27 + 1) >> 61)
              goto LABEL_85;
            v29 = v23 - (_QWORD)v26;
            if (v29 >> 2 > v28)
              v28 = v29 >> 2;
            if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
              v30 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v30 = v28;
            if (v30)
            {
              if (v30 >> 61)
                goto LABEL_86;
              v31 = operator new(8 * v30);
            }
            else
            {
              v31 = 0;
            }
            v32 = (uint64_t *)&v31[8 * v27];
            v33 = &v31[8 * v30];
            *v32 = v20;
            v25 = v32 + 1;
            if (v24 == v26)
            {
              v26 = v24;
            }
            else
            {
              v34 = (char *)v24 - (char *)v26 - 8;
              if (v34 < 0x58)
                goto LABEL_89;
              if ((unint64_t)((char *)v26 - v31) < 0x20)
                goto LABEL_89;
              v35 = (v34 >> 3) + 1;
              v36 = &v31[8 * v27 - 16];
              v37 = v24 - 2;
              v38 = v35 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v39 = *(_OWORD *)v37;
                *(v36 - 1) = *((_OWORD *)v37 - 1);
                *v36 = v39;
                v36 -= 2;
                v37 -= 4;
                v38 -= 4;
              }
              while (v38);
              v32 -= v35 & 0x3FFFFFFFFFFFFFFCLL;
              v24 -= v35 & 0x3FFFFFFFFFFFFFFCLL;
              if (v35 != (v35 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_89:
                do
                {
                  v40 = *--v24;
                  *--v32 = v40;
                }
                while (v24 != v26);
                v26 = *(uint64_t **)(a1 + 56);
              }
            }
            *(_QWORD *)(a1 + 56) = v32;
            *(_QWORD *)(a1 + 64) = v25;
            *(_QWORD *)(a1 + 72) = v33;
            if (v26)
              operator delete(v26);
          }
          else
          {
            *v24 = v19;
            v25 = v24 + 1;
          }
          *(_QWORD *)(a1 + 64) = v25;
          *(_BYTE *)(v20 + 36) = 0;
          *(_QWORD *)(a2 + 40) = v20;
          *(_QWORD *)(v20 + 40) = a2;
          std::priority_queue<geo::MartinezPolygonUnion<double>::HorizontalIndex,std::vector<geo::MartinezPolygonUnion<double>::HorizontalIndex,std::allocator<geo::MartinezPolygonUnion<double>::HorizontalIndex>>,std::greater<geo::MartinezPolygonUnion<double>::HorizontalIndex>>::push(a1, v20);
          *(_QWORD *)&v81.f64[0] = a2;
          std::__tree<geo::MartinezPolygonUnion<double>::VerticalIndex,std::less<geo::MartinezPolygonUnion<double>::VerticalIndex>,std::allocator<geo::MartinezPolygonUnion<double>::VerticalIndex>>::__emplace_unique_key_args<geo::MartinezPolygonUnion<double>::VerticalIndex,geo::MartinezPolygonUnion<double>::VerticalIndex>((uint64_t **)(a1 + 32), (uint64_t *)&v81, a2);
          v80 = vsubq_f64(v79, *a3);
          v81 = *a3;
          v41 = operator new();
          *(float64x2_t *)v41 = v81;
          *(float64x2_t *)(v41 + 16) = v80;
          *(_DWORD *)(v41 + 32) = v18;
          *(_BYTE *)(v41 + 36) = 1;
          *(_QWORD *)(v41 + 40) = 0;
          *(_QWORD *)(v41 + 45) = 0;
          v42 = operator new();
          *(float64x2_t *)v42 = v81;
          *(float64x2_t *)(v42 + 16) = v80;
          *(_DWORD *)(v42 + 32) = v18;
          *(_BYTE *)(v42 + 36) = 0;
          *(_QWORD *)(v42 + 40) = 0;
          *(_QWORD *)(v42 + 45) = 0;
          v43 = *(uint64_t **)(a1 + 64);
          v44 = *(_QWORD *)(a1 + 72);
          if ((unint64_t)v43 >= v44)
          {
            v46 = *(uint64_t **)(a1 + 56);
            v47 = v43 - v46;
            v48 = v47 + 1;
            if ((unint64_t)(v47 + 1) >> 61)
              goto LABEL_85;
            v49 = v44 - (_QWORD)v46;
            if (v49 >> 2 > v48)
              v48 = v49 >> 2;
            if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
              v50 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v50 = v48;
            if (v50)
            {
              if (v50 >> 61)
                goto LABEL_86;
              v51 = operator new(8 * v50);
            }
            else
            {
              v51 = 0;
            }
            v52 = (uint64_t *)&v51[8 * v47];
            v53 = &v51[8 * v50];
            *v52 = v41;
            v45 = v52 + 1;
            if (v43 == v46)
            {
              v46 = v43;
            }
            else
            {
              v54 = (char *)v43 - (char *)v46 - 8;
              if (v54 < 0x58)
                goto LABEL_90;
              if ((unint64_t)((char *)v46 - v51) < 0x20)
                goto LABEL_90;
              v55 = (v54 >> 3) + 1;
              v56 = &v51[8 * v47 - 16];
              v57 = v43 - 2;
              v58 = v55 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v59 = *(_OWORD *)v57;
                *(v56 - 1) = *((_OWORD *)v57 - 1);
                *v56 = v59;
                v56 -= 2;
                v57 -= 4;
                v58 -= 4;
              }
              while (v58);
              v52 -= v55 & 0x3FFFFFFFFFFFFFFCLL;
              v43 -= v55 & 0x3FFFFFFFFFFFFFFCLL;
              if (v55 != (v55 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_90:
                do
                {
                  v60 = *--v43;
                  *--v52 = v60;
                }
                while (v43 != v46);
                v46 = *(uint64_t **)(a1 + 56);
              }
            }
            *(_QWORD *)(a1 + 56) = v52;
            *(_QWORD *)(a1 + 64) = v45;
            *(_QWORD *)(a1 + 72) = v53;
            if (v46)
              operator delete(v46);
          }
          else
          {
            *v43 = v41;
            v45 = v43 + 1;
          }
          *(_QWORD *)(a1 + 64) = v45;
          v61 = *(_QWORD *)(a1 + 72);
          if ((unint64_t)v45 < v61)
          {
            *v45 = v42;
            v62 = v45 + 1;
LABEL_79:
            *(_QWORD *)(a1 + 64) = v62;
            *(_QWORD *)(v41 + 40) = v42;
            *(_QWORD *)(v42 + 40) = v41;
            std::priority_queue<geo::MartinezPolygonUnion<double>::HorizontalIndex,std::vector<geo::MartinezPolygonUnion<double>::HorizontalIndex,std::allocator<geo::MartinezPolygonUnion<double>::HorizontalIndex>>,std::greater<geo::MartinezPolygonUnion<double>::HorizontalIndex>>::push(a1, v41);
            std::priority_queue<geo::MartinezPolygonUnion<double>::HorizontalIndex,std::vector<geo::MartinezPolygonUnion<double>::HorizontalIndex,std::allocator<geo::MartinezPolygonUnion<double>::HorizontalIndex>>,std::greater<geo::MartinezPolygonUnion<double>::HorizontalIndex>>::push(a1, v42);
            return;
          }
          v63 = *(char **)(a1 + 56);
          v64 = ((char *)v45 - v63) >> 3;
          v65 = v64 + 1;
          if (!((unint64_t)(v64 + 1) >> 61))
          {
            v66 = v61 - (_QWORD)v63;
            if (v66 >> 2 > v65)
              v65 = v66 >> 2;
            if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF8)
              v67 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v67 = v65;
            if (!v67)
            {
              v68 = 0;
LABEL_69:
              v69 = (uint64_t *)&v68[8 * v64];
              v70 = &v68[8 * v67];
              *v69 = v42;
              v62 = v69 + 1;
              if (v45 == (uint64_t *)v63)
              {
                *(_QWORD *)(a1 + 56) = v69;
                *(_QWORD *)(a1 + 64) = v62;
                *(_QWORD *)(a1 + 72) = v70;
LABEL_78:
                operator delete(v45);
                goto LABEL_79;
              }
              v71 = (char *)v45 - v63 - 8;
              if (v71 > 0x57 && (unint64_t)(v63 - v68) >= 0x20)
              {
                v74 = (v71 >> 3) + 1;
                v72 = &v45[-(v74 & 0x3FFFFFFFFFFFFFFCLL)];
                v75 = &v68[8 * v64 - 16];
                v76 = v45 - 2;
                v77 = v74 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v78 = *(_OWORD *)v76;
                  *((_OWORD *)v75 - 1) = *((_OWORD *)v76 - 1);
                  *(_OWORD *)v75 = v78;
                  v75 -= 32;
                  v76 -= 4;
                  v77 -= 4;
                }
                while (v77);
                v69 -= v74 & 0x3FFFFFFFFFFFFFFCLL;
                if (v74 == (v74 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_75;
              }
              else
              {
                v72 = v45;
              }
              do
              {
                v73 = *--v72;
                *--v69 = v73;
              }
              while (v72 != (uint64_t *)v63);
              v63 = *(char **)(a1 + 56);
LABEL_75:
              *(_QWORD *)(a1 + 56) = v69;
              *(_QWORD *)(a1 + 64) = v62;
              v45 = (uint64_t *)v63;
              *(_QWORD *)(a1 + 72) = v70;
              if (!v63)
                goto LABEL_79;
              goto LABEL_78;
            }
            if (!(v67 >> 61))
            {
              v68 = (char *)operator new(8 * v67);
              goto LABEL_69;
            }
LABEL_86:
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
LABEL_85:
          abort();
        }
      }
    }
  }
}

void std::priority_queue<geo::MartinezPolygonUnion<double>::HorizontalIndex,std::vector<geo::MartinezPolygonUnion<double>::HorizontalIndex,std::allocator<geo::MartinezPolygonUnion<double>::HorizontalIndex>>,std::greater<geo::MartinezPolygonUnion<double>::HorizontalIndex>>::push(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  _QWORD *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  __int128 *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;

  v5 = *(_QWORD **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    v8 = *(_BYTE **)a1;
    v9 = (uint64_t)v5 - *(_QWORD *)a1;
    v10 = v9 >> 3;
    v11 = (v9 >> 3) + 1;
    if (v11 >> 61)
      abort();
    v12 = v4 - (_QWORD)v8;
    if (v12 >> 2 > v11)
      v11 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v14 = operator new(8 * v13);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v10];
    v16 = &v14[8 * v13];
    *v15 = a2;
    v7 = v15 + 1;
    if (v5 == (_QWORD *)v8)
    {
      v8 = v5;
    }
    else
    {
      v17 = (char *)v5 - v8 - 8;
      if (v17 < 0x58)
        goto LABEL_34;
      if ((unint64_t)((char *)v5 - v14 - v9) < 0x20)
        goto LABEL_34;
      v18 = (v17 >> 3) + 1;
      v6 = &v5[-(v18 & 0x3FFFFFFFFFFFFFFCLL)];
      v19 = &v14[8 * v10 - 16];
      v20 = (__int128 *)(v5 - 2);
      v21 = v18 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v22 = *v20;
        *(v19 - 1) = *(v20 - 1);
        *v19 = v22;
        v19 -= 2;
        v20 -= 2;
        v21 -= 4;
      }
      while (v21);
      v15 -= v18 & 0x3FFFFFFFFFFFFFFCLL;
      if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v23 = *--v6;
          *--v15 = v23;
        }
        while (v6 != (_QWORD *)v8);
        v8 = *(_BYTE **)a1;
      }
    }
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v16;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v5 = a2;
    v7 = v5 + 1;
  }
  *(_QWORD *)(a1 + 8) = v7;
  v24 = *(_BYTE **)a1;
  v25 = (uint64_t)v7 - *(_QWORD *)a1;
  if (v25 >= 9)
  {
    v26 = (((unint64_t)v25 >> 3) - 2) >> 1;
    v27 = (uint64_t *)&v24[8 * v26];
    v30 = *(v7 - 1);
    v29 = v7 - 1;
    v28 = v30;
    v31 = *v27;
    if (!geo::MartinezPolygonUnion<double>::HorizontalIndex::operator<(*v27, v30))
    {
      do
      {
        v32 = v27;
        *v29 = v31;
        if (!v26)
          break;
        v26 = (v26 - 1) >> 1;
        v27 = (uint64_t *)&v24[8 * v26];
        v31 = *v27;
        v29 = v32;
      }
      while (!geo::MartinezPolygonUnion<double>::HorizontalIndex::operator<(*v27, v28));
      *v32 = v28;
    }
  }
}

BOOL std::less<md::MaskingOverlayMeshProcessor::_unionPolygons(std::list<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>> &)::PolygonEdge>::operator()[abi:nn180100](uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  unsigned int v5;
  unsigned int v6;
  char *v7;
  char *v8;
  unint64_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  float64x2_t v15;
  float64x2_t v16;
  const double *v17;
  uint64_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  const double *v25;
  double v26;
  double v27;
  char *v28;
  char *v29;
  unint64_t v30;
  double v31;
  double v32;
  double v33;
  double v34;
  uint64_t v35;
  float64x2_t v36;
  float64x2_t v37;
  const double *v38;
  uint64_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  const double *v46;
  double v47;
  double v48;
  double v49;
  double v50;
  float64x2x2_t v51;
  float64x2x2_t v52;
  float64x2x2_t v53;
  float64x2x2_t v54;

  v2 = *(double *)(a1 + 24);
  v3 = *(double *)(a2 + 24);
  if (vabdd_f64(v2, v3) > 1.0e-12)
    return v2 > v3;
  v5 = *(unsigned __int8 *)(a1 + 32);
  v6 = *(unsigned __int8 *)(a2 + 32);
  if (v5 != v6)
    return v5 < v6;
  v7 = **(char ***)a1;
  v8 = *(char **)(*(_QWORD *)a1 + 8);
  if (v7 == v8)
  {
    v12 = 1.79769313e308;
    v13 = -1.79769313e308;
    v10 = 1.79769313e308;
    v11 = -1.79769313e308;
    goto LABEL_14;
  }
  v9 = v8 - v7 - 16;
  if (v9 < 0x30)
  {
    v10 = 1.79769313e308;
    v11 = -1.79769313e308;
    v12 = 1.79769313e308;
    v13 = -1.79769313e308;
    goto LABEL_13;
  }
  v14 = (v9 >> 4) + 1;
  v15 = (float64x2_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  v16 = (float64x2_t)vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  v17 = (const double *)(v7 + 32);
  v18 = v14 & 0x1FFFFFFFFFFFFFFCLL;
  v19 = v16;
  v20 = v15;
  v21 = v15;
  v22 = v15;
  v23 = v16;
  v24 = v16;
  do
  {
    v25 = v17 - 4;
    v51 = vld2q_f64(v25);
    v52 = vld2q_f64(v17);
    v15 = vminnmq_f64(v51.val[0], v15);
    v20 = vminnmq_f64(v52.val[0], v20);
    v23 = vmaxnmq_f64(v23, v51.val[0]);
    v24 = vmaxnmq_f64(v24, v52.val[0]);
    v21 = vminnmq_f64(v51.val[1], v21);
    v22 = vminnmq_f64(v52.val[1], v22);
    v16 = vmaxnmq_f64(v16, v51.val[1]);
    v19 = vmaxnmq_f64(v19, v52.val[1]);
    v17 += 8;
    v18 -= 4;
  }
  while (v18);
  v13 = vmaxnmvq_f64(vmaxnmq_f64(v23, v24));
  v12 = vminnmvq_f64(vminnmq_f64(v21, v22));
  v10 = vminnmvq_f64(vminnmq_f64(v15, v20));
  v11 = vmaxnmvq_f64(vmaxnmq_f64(v16, v19));
  if (v14 != (v14 & 0x1FFFFFFFFFFFFFFCLL))
  {
    v7 += 16 * (v14 & 0x1FFFFFFFFFFFFFFCLL);
    do
    {
LABEL_13:
      v26 = *(double *)v7;
      v27 = *((double *)v7 + 1);
      v7 += 16;
      v10 = fmin(v26, v10);
      v13 = fmax(v13, v26);
      v12 = fmin(v27, v12);
      v11 = fmax(v11, v27);
    }
    while (v7 != v8);
  }
LABEL_14:
  v28 = **(char ***)a2;
  v29 = *(char **)(*(_QWORD *)a2 + 8);
  if (v28 == v29)
  {
    v33 = 1.79769313e308;
    v34 = -1.79769313e308;
    v31 = 1.79769313e308;
    v32 = -1.79769313e308;
    goto LABEL_23;
  }
  v30 = v29 - v28 - 16;
  if (v30 < 0x30)
  {
    v31 = 1.79769313e308;
    v32 = -1.79769313e308;
    v33 = 1.79769313e308;
    v34 = -1.79769313e308;
    goto LABEL_22;
  }
  v35 = (v30 >> 4) + 1;
  v36 = (float64x2_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  v37 = (float64x2_t)vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  v38 = (const double *)(v28 + 32);
  v39 = v35 & 0x1FFFFFFFFFFFFFFCLL;
  v40 = v37;
  v41 = v36;
  v42 = v36;
  v43 = v36;
  v44 = v37;
  v45 = v37;
  do
  {
    v46 = v38 - 4;
    v53 = vld2q_f64(v46);
    v54 = vld2q_f64(v38);
    v36 = vminnmq_f64(v53.val[0], v36);
    v41 = vminnmq_f64(v54.val[0], v41);
    v44 = vmaxnmq_f64(v44, v53.val[0]);
    v45 = vmaxnmq_f64(v45, v54.val[0]);
    v42 = vminnmq_f64(v53.val[1], v42);
    v43 = vminnmq_f64(v54.val[1], v43);
    v37 = vmaxnmq_f64(v37, v53.val[1]);
    v40 = vmaxnmq_f64(v40, v54.val[1]);
    v38 += 8;
    v39 -= 4;
  }
  while (v39);
  v34 = vmaxnmvq_f64(vmaxnmq_f64(v44, v45));
  v33 = vminnmvq_f64(vminnmq_f64(v42, v43));
  v31 = vminnmvq_f64(vminnmq_f64(v36, v41));
  v32 = vmaxnmvq_f64(vmaxnmq_f64(v37, v40));
  if (v35 != (v35 & 0x1FFFFFFFFFFFFFFCLL))
  {
    v28 += 16 * (v35 & 0x1FFFFFFFFFFFFFFCLL);
    do
    {
LABEL_22:
      v47 = *(double *)v28;
      v48 = *((double *)v28 + 1);
      v28 += 16;
      v31 = fmin(v47, v31);
      v34 = fmax(v34, v47);
      v33 = fmin(v48, v33);
      v32 = fmax(v32, v48);
    }
    while (v28 != v29);
  }
LABEL_23:
  if (*(_BYTE *)(a1 + 32))
    v49 = v13;
  else
    v49 = v10;
  if (*(_BYTE *)(a1 + 32))
    v50 = v34;
  else
    v50 = v31;
  if (vabdd_f64(v49, v50) <= 1.0e-12)
    return (v11 - v12) * (v13 - v10) > (v32 - v33) * (v34 - v31);
  else
    return v49 > v50;
}

void altitude::HeightRequestManager::~HeightRequestManager(altitude::HeightRequestManager *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E42C5868;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = off_1E42C2E08;
  while (*((_QWORD *)this + 10))
    (*(void (**)(altitude::HeightRequestManager *, uint64_t))(*(_QWORD *)this + 48))(this, *((_QWORD *)this + 8) + 32);
  std::__tree<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TileKey,std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TileKey>,true>,std::allocator<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*((_QWORD **)this + 9));
  karo::AsyncRequestManager::~AsyncRequestManager(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E42C5868;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = off_1E42C2E08;
  while (*((_QWORD *)this + 10))
    (*(void (**)(altitude::HeightRequestManager *, uint64_t))(*(_QWORD *)this + 48))(this, *((_QWORD *)this + 8) + 32);
  std::__tree<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TileKey,std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TileKey>,true>,std::allocator<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*((_QWORD **)this + 9));
  karo::AsyncRequestManager::~AsyncRequestManager(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::HeightRequestId,karo::AsyncRequestManagerNoArgs>::pruneRequests(uint64_t a1, int a2)
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  BOOL v9;
  uint64_t v10;
  int v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  v4 = *(uint64_t **)(a1 + 64);
  if (v4 != (uint64_t *)(a1 + 72))
  {
    do
    {
      v6 = (uint64_t *)v4[1];
      v7 = v4;
      if (v6)
      {
        do
        {
          v8 = v6;
          v6 = (uint64_t *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v8 = (uint64_t *)v7[2];
          v9 = *v8 == (_QWORD)v7;
          v7 = v8;
        }
        while (!v9);
      }
      v10 = v4[8];
      if (atomic_load((unsigned int *)(v10 + 128)))
        *(_DWORD *)(v10 + 180) = a2;
      pthread_mutex_lock(*(pthread_mutex_t **)(v10 + 152));
      v12 = *(_DWORD *)(v10 + 160);
      pthread_mutex_unlock(*(pthread_mutex_t **)(v10 + 152));
      if ((v12 & 1) != 0 && *(_BYTE *)(v10 + 176) && *(_DWORD *)(v10 + 180) != a2
        || (a2 - *(_DWORD *)(v10 + 180)) > *(_DWORD *)(v10 + 184))
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
        v13 = (uint64_t *)v4[1];
        v14 = v4;
        if (v13)
        {
          do
          {
            v15 = v13;
            v13 = (uint64_t *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            v15 = (uint64_t *)v14[2];
            v9 = *v15 == (_QWORD)v14;
            v14 = v15;
          }
          while (!v9);
        }
        if (*(uint64_t **)(a1 + 64) == v4)
          *(_QWORD *)(a1 + 64) = v15;
        v16 = *(uint64_t **)(a1 + 72);
        --*(_QWORD *)(a1 + 80);
        std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v16, v4);
        v17 = (std::__shared_weak_count *)v4[9];
        if (v17)
        {
          p_shared_owners = (unint64_t *)&v17->__shared_owners_;
          do
            v19 = __ldaxr(p_shared_owners);
          while (__stlxr(v19 - 1, p_shared_owners));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        operator delete(v4);
      }
      v4 = v8;
    }
    while (v8 != (uint64_t *)(a1 + 72));
  }
  *(_DWORD *)(a1 + 88) = a2;
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::HeightRequestId,karo::AsyncRequestManagerNoArgs>::removeFromRequests(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  v4 = *(uint64_t **)(a1 + 64);
  if (v4 != (uint64_t *)(a1 + 72))
  {
    v5 = *(uint64_t **)(a1 + 64);
    while (1)
    {
      v6 = (uint64_t *)v5[1];
      if (v5[8] == a2)
        break;
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (uint64_t *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (uint64_t *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      v5 = v7;
      if (v7 == (uint64_t *)(a1 + 72))
        return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
    }
    if (v6)
    {
      do
      {
        v9 = v6;
        v6 = (uint64_t *)*v6;
      }
      while (v6);
    }
    else
    {
      v10 = v5;
      do
      {
        v9 = (uint64_t *)v10[2];
        v8 = *v9 == (_QWORD)v10;
        v10 = v9;
      }
      while (!v8);
    }
    if (v4 == v5)
      *(_QWORD *)(a1 + 64) = v9;
    v11 = *(uint64_t **)(a1 + 72);
    --*(_QWORD *)(a1 + 80);
    std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v11, v5);
    v12 = (std::__shared_weak_count *)v5[9];
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    operator delete(v5);
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::HeightRequestId,karo::AsyncRequestManagerNoArgs>::clearRequest(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _BOOL4 v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  v4 = *(_QWORD **)(a1 + 72);
  if (v4)
  {
    v5 = (_QWORD *)(a1 + 72);
    do
    {
      v6 = altitude::HeightRequestId::operator<((uint64_t)(v4 + 4), a2);
      v7 = v4 + 1;
      if (!v6)
      {
        v7 = v4;
        v5 = v4;
      }
      v4 = (_QWORD *)*v7;
    }
    while (*v7);
    if (v5 != (_QWORD *)(a1 + 72) && !altitude::HeightRequestId::operator<(a2, (uint64_t)(v5 + 4)))
    {
      (*(void (**)(_QWORD))(*(_QWORD *)v5[8] + 16))(v5[8]);
      v8 = (_QWORD *)v5[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        v10 = v5;
        do
        {
          v9 = (_QWORD *)v10[2];
          v11 = *v9 == (_QWORD)v10;
          v10 = v9;
        }
        while (!v11);
      }
      if (*(_QWORD **)(a1 + 64) == v5)
        *(_QWORD *)(a1 + 64) = v9;
      v12 = *(uint64_t **)(a1 + 72);
      --*(_QWORD *)(a1 + 80);
      std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v12, v5);
      v13 = (std::__shared_weak_count *)v5[9];
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      operator delete(v5);
    }
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

void karo::AsyncRequestManagerTemplate<altitude::HeightRequestId,karo::AsyncRequestManagerNoArgs>::createAndQueueRequest(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  _QWORD v10[2];

  (*(void (**)(uint64_t *__return_ptr))(*a1 + 64))(a2);
  v4 = a1[6];
  if (v4)
  {
    v5 = *a2;
    v6 = (std::__shared_weak_count *)a2[1];
    v10[0] = v5;
    v10[1] = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      karo::JobManager::queueJob(v4, v10);
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    else
    {
      karo::JobManager::queueJob(v4, v10);
    }
  }
}

void altitude::HeightRequestManager::createRequest(uint64_t *a1@<X0>, unsigned int *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  uint64_t v14;
  size_t v15;
  size_t v16;
  __int128 *p_dst;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  std::string *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  _QWORD *v36;
  char v37;
  uint64_t v38;
  uint64_t *v39;
  __int128 __dst;
  unint64_t v41;
  char __str[1024];
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v6 = *((_QWORD *)a2 + 2);
  v7 = v6 + 40;
  v8 = *(char *)(v6 + 135);
  v9 = v8 < 0;
  if (v8 >= 0)
    v10 = *(unsigned __int8 *)(v6 + 135);
  else
    v10 = *(_QWORD *)(v6 + 120);
  v11 = v6 + 112;
  if (v9)
    v11 = *(_QWORD *)(v6 + 112);
  if (v10 == 5 && (*(_DWORD *)v11 == 1819308129 ? (v12 = *(_BYTE *)(v11 + 4) == 101) : (v12 = 0), v12))
  {
    snprintf(__str, 0x400uLL, "%s&z=%d&x=%d&y=%d&h=%d");
  }
  else
  {
    v13 = *(char *)(v6 + 63);
    v14 = *(_QWORD *)(v6 + 40);
    if (v13 < 0)
      v7 = v14;
    snprintf(__str, 0x400uLL, "%s%i/%i/map_%i_%i_%i_%i%s", v7, *a2);
  }
  v15 = strlen(__str);
  if (v15 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v16 = v15;
  v39 = a3;
  if (v15 >= 0x17)
  {
    v18 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v18 = v15 | 7;
    v19 = v18 + 1;
    p_dst = (__int128 *)operator new(v18 + 1);
    *((_QWORD *)&__dst + 1) = v16;
    v41 = v19 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_21;
  }
  HIBYTE(v41) = v15;
  p_dst = &__dst;
  if (v15)
LABEL_21:
    memcpy(p_dst, __str, v16);
  *((_BYTE *)p_dst + v16) = 0;
  v20 = operator new();
  v21 = *((_QWORD *)a2 + 2);
  v37 = *((_BYTE *)a2 + 24);
  v22 = *((_BYTE *)a2 + 25);
  v23 = *((_BYTE *)a2 + 26);
  v24 = a2[7];
  v25 = a1[12];
  v26 = a1[6];
  v27 = a1[15];
  v28 = a1[17];
  v38 = a1[18];
  v29 = karo::Job::Job(v20, a1[4]);
  *(_BYTE *)(v29 + 176) = 0;
  *(_QWORD *)(v29 + 180) = 0xFFFFFFFF00000000;
  *(_QWORD *)v29 = &off_1E42C40D0;
  v30 = (std::string *)(v29 + 192);
  v31 = SHIBYTE(v41);
  if (SHIBYTE(v41) < 0)
  {
    std::string::__init_copy_ctor_external(v30, (const std::string::value_type *)__dst, *((std::string::size_type *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)&v30->__r_.__value_.__l.__data_ = __dst;
    v30->__r_.__value_.__r.__words[2] = v41;
  }
  *(_BYTE *)(v20 + 216) = 0;
  v33 = a1[13];
  v32 = a1[14];
  *(_QWORD *)(v20 + 224) = v25;
  *(_QWORD *)(v20 + 232) = v33;
  *(_QWORD *)(v20 + 240) = v32;
  if (v32)
  {
    v34 = (unint64_t *)(v32 + 8);
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
  }
  *(_QWORD *)(v20 + 248) = v27;
  *(_QWORD *)(v20 + 256) = v26;
  *(_QWORD *)(v20 + 264) = v28;
  *(_QWORD *)(v20 + 272) = v21;
  *(_BYTE *)(v20 + 360) = 0;
  *(_OWORD *)(v20 + 280) = 0u;
  *(_OWORD *)(v20 + 296) = 0u;
  *(_OWORD *)(v20 + 312) = 0u;
  *(_OWORD *)(v20 + 328) = 0u;
  *(_OWORD *)(v20 + 344) = 0u;
  *(_WORD *)(v20 + 368) = 255;
  *(_QWORD *)(v20 + 372) = 0;
  *(_BYTE *)(v20 + 392) = v37;
  *(_BYTE *)(v20 + 393) = v22;
  *(_BYTE *)(v20 + 394) = v23;
  *(_DWORD *)(v20 + 396) = v24;
  *(_QWORD *)(v20 + 400) = 0xFF7FFFFF7F7FFFFFLL;
  *(_QWORD *)(v20 + 432) = v20 + 440;
  *(_QWORD *)(v20 + 440) = 0;
  *(_QWORD *)(v20 + 448) = 0;
  *(_QWORD *)(v20 + 456) = v38;
  *(double *)(v20 + 408) = (double)std::chrono::steady_clock::now().__d_.__rep_ * 0.000000001;
  *(_QWORD *)(v20 + 416) = 0xBFF0000000000000;
  *(double *)(v20 + 424) = (double)std::chrono::steady_clock::now().__d_.__rep_ * 0.000000001;
  *v39 = v20;
  v36 = (_QWORD *)operator new();
  *v36 = &off_1E42E8670;
  v36[1] = 0;
  v36[2] = 0;
  v36[3] = v20;
  v39[1] = (uint64_t)v36;
  if (v31 < 0)
    operator delete((void *)__dst);
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::HeightRequestId,karo::AsyncRequestManagerNoArgs>::requestT(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  int v11;
  unsigned int v12;
  char v13;
  unsigned int v14;
  _QWORD *v15;
  unsigned int *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  unsigned int *v27;
  std::__shared_weak_count *v28;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  if (!a4)
    a4 = *(_DWORD *)(a1 + 88) + 1;
  v8 = *a2;
  v9 = a2[1];
  if (*a2 != v9)
  {
    do
    {
      (*(void (**)(unsigned int **__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 96))(&v27, a1, v8, v8 + 32);
      v10 = v27;
      v11 = *(_DWORD *)(v8 + 36);
      v12 = *(_DWORD *)(v8 + 40);
      v13 = *(_BYTE *)(v8 + 44);
      v14 = atomic_load(v27 + 4);
      if (v14 != v11)
        (*(void (**)(unsigned int *))(*(_QWORD *)v27 + 24))(v27);
      v10[45] = a4;
      v10[46] = v12;
      *((_BYTE *)v10 + 176) = v13;
      v15 = *(_QWORD **)(a3 + 8);
      if ((unint64_t)v15 >= *(_QWORD *)(a3 + 16))
      {
        v22 = std::vector<karo::AsyncRequestManager::RequestHandle>::__emplace_back_slow_path<std::shared_ptr<karo::AsyncRequestManager::Request> &>((void **)a3, (uint64_t)v27, (uint64_t)v28);
      }
      else
      {
        *v15 = &off_1E42C2D08;
        v16 = v27;
        v15[1] = v27;
        v17 = (uint64_t)v28;
        v15[2] = v28;
        if (v17)
        {
          v18 = (unint64_t *)(v17 + 8);
          do
            v19 = __ldxr(v18);
          while (__stxr(v19 + 1, v18));
          v16 = (unsigned int *)v15[1];
        }
        if (v16)
        {
          v20 = v16 + 32;
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 + 1, v20));
        }
        v22 = v15 + 3;
      }
      *(_QWORD *)(a3 + 8) = v22;
      v23 = v28;
      if (v28)
      {
        p_shared_owners = (unint64_t *)&v28->__shared_owners_;
        do
          v25 = __ldaxr(p_shared_owners);
        while (__stlxr(v25 - 1, p_shared_owners));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v8 += 48;
    }
    while (v8 != v9);
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::HeightRequestId,karo::AsyncRequestManagerNoArgs>::requestT@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, unsigned int a5@<W4>, char a6@<W5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unsigned int *v28;
  std::__shared_weak_count *v29;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  if (!a3)
    a3 = *(_DWORD *)(a1 + 88) + 1;
  (*(void (**)(unsigned int **__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 96))(&v28, a1, a2, a7);
  v16 = v28;
  v17 = atomic_load(v28 + 4);
  if (v17 != (_DWORD)a4)
    (*(void (**)(unsigned int *, uint64_t))(*(_QWORD *)v28 + 24))(v28, a4);
  v16[45] = a3;
  v16[46] = a5;
  *((_BYTE *)v16 + 176) = a6;
  v18 = v28;
  v19 = v29;
  *a8 = &off_1E42C2D08;
  a8[1] = v18;
  a8[2] = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
  }
  if (v18)
  {
    v22 = v18 + 32;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 + 1, v22));
  }
  v24 = v29;
  if (v29)
  {
    v25 = (unint64_t *)&v29->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::HeightRequestId,karo::AsyncRequestManagerNoArgs>::waitOnRequest(uint64_t a1, uint64_t a2, unsigned int a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _BOOL4 v8;
  _QWORD *v9;
  uint64_t v10;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  v6 = *(_QWORD **)(a1 + 72);
  if (!v6)
    goto LABEL_8;
  v7 = (_QWORD *)(a1 + 72);
  do
  {
    v8 = altitude::HeightRequestId::operator<((uint64_t)(v6 + 4), a2);
    v9 = v6 + 1;
    if (!v8)
    {
      v9 = v6;
      v7 = v6;
    }
    v6 = (_QWORD *)*v9;
  }
  while (*v9);
  if (v7 == (_QWORD *)(a1 + 72) || altitude::HeightRequestId::operator<(a2, (uint64_t)(v7 + 4)))
  {
LABEL_8:
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
    return 0;
  }
  else
  {
    v13 = v7[8];
    v12 = (std::__shared_weak_count *)v7[9];
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
    if (v13)
    {
      karo::Job::waitToFinish((karo::Job *)v13, a3);
      pthread_mutex_lock(*(pthread_mutex_t **)(v13 + 152));
      v10 = *(_DWORD *)(v13 + 160) & 1;
      pthread_mutex_unlock(*(pthread_mutex_t **)(v13 + 152));
      if (!v12)
        return v10;
    }
    else
    {
      v10 = 0;
      if (!v12)
        return v10;
    }
    v16 = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  return v10;
}

void karo::AsyncRequestManagerTemplate<altitude::HeightRequestId,karo::AsyncRequestManagerNoArgs>::getRequest(uint64_t a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t **a4@<X8>)
{
  uint64_t **v8;
  _QWORD *v9;
  uint64_t **v10;
  _BOOL4 v11;
  _QWORD *v12;
  uint64_t *v13;
  std::__shared_weak_count *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t *v37;
  std::__shared_weak_count *v38;

  *a4 = 0;
  a4[1] = 0;
  v8 = (uint64_t **)(a1 + 72);
  v9 = *(_QWORD **)(a1 + 72);
  if (!v9)
    goto LABEL_8;
  v10 = (uint64_t **)(a1 + 72);
  do
  {
    v11 = altitude::HeightRequestId::operator<((uint64_t)(v9 + 4), (uint64_t)a2);
    v12 = v9 + 1;
    if (!v11)
    {
      v12 = v9;
      v10 = (uint64_t **)v9;
    }
    v9 = (_QWORD *)*v12;
  }
  while (*v12);
  if (v10 == v8 || altitude::HeightRequestId::operator<((uint64_t)a2, (uint64_t)(v10 + 4)))
  {
LABEL_8:
    (*(void (**)(uint64_t **__return_ptr, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a1 + 64))(&v37, a1, a2, a3);
    v13 = v37;
    v14 = v38;
    *a4 = v37;
    a4[1] = (uint64_t *)v14;
    v15 = *(char **)(a1 + 72);
    v16 = (char *)v8;
    if (v15)
    {
      while (1)
      {
        while (1)
        {
          v16 = v15;
          v17 = (uint64_t)(v15 + 32);
          if (!altitude::HeightRequestId::operator<((uint64_t)a2, (uint64_t)(v15 + 32)))
            break;
          v15 = *(char **)v16;
          v8 = (uint64_t **)v16;
          if (!*(_QWORD *)v16)
            goto LABEL_15;
        }
        if (!altitude::HeightRequestId::operator<(v17, (uint64_t)a2))
          break;
        v15 = (char *)*((_QWORD *)v16 + 1);
        if (!v15)
        {
          v8 = (uint64_t **)(v16 + 8);
          goto LABEL_15;
        }
      }
    }
    else
    {
LABEL_15:
      v18 = v16;
      v16 = (char *)operator new(0x50uLL);
      v19 = a2[1];
      *((_OWORD *)v16 + 2) = *a2;
      *((_OWORD *)v16 + 3) = v19;
      *((_QWORD *)v16 + 8) = 0;
      *((_QWORD *)v16 + 9) = 0;
      *(_QWORD *)v16 = 0;
      *((_QWORD *)v16 + 1) = 0;
      *((_QWORD *)v16 + 2) = v18;
      *v8 = (uint64_t *)v16;
      v20 = **(_QWORD **)(a1 + 64);
      v21 = (uint64_t *)v16;
      if (v20)
      {
        *(_QWORD *)(a1 + 64) = v20;
        v21 = *v8;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 72), v21);
      ++*(_QWORD *)(a1 + 80);
      v13 = *a4;
      v14 = (std::__shared_weak_count *)a4[1];
    }
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v23 = __ldxr(p_shared_owners);
      while (__stxr(v23 + 1, p_shared_owners));
    }
    v24 = (std::__shared_weak_count *)*((_QWORD *)v16 + 9);
    *((_QWORD *)v16 + 8) = v13;
    *((_QWORD *)v16 + 9) = v14;
    if (!v24)
      goto LABEL_25;
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
      v27 = *(_QWORD *)(a1 + 48);
      if (!v27)
        return;
    }
    else
    {
LABEL_25:
      v27 = *(_QWORD *)(a1 + 48);
      if (!v27)
        return;
    }
    v28 = *a4;
    v29 = (std::__shared_weak_count *)a4[1];
    v37 = v28;
    v38 = v29;
    if (v29)
    {
      v30 = (unint64_t *)&v29->__shared_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
      karo::JobManager::queueJob(v27, &v37);
      do
        v32 = __ldaxr(v30);
      while (__stlxr(v32 - 1, v30));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    else
    {
      karo::JobManager::queueJob(v27, &v37);
    }
  }
  else
  {
    v34 = v10[8];
    v33 = v10[9];
    if (v33)
    {
      v35 = (unint64_t *)(v33 + 1);
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
    }
    *a4 = v34;
    a4[1] = v33;
  }
}

void altitude::HeightRequestManager::request(_QWORD *a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  NSObject *v9;
  int v10;
  int v11;
  int v12;
  _DWORD v13[2];
  __int16 v14;
  int v15;
  __int16 v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (a1[12])
  {
    (*(void (**)(_QWORD *, int *, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*a1 + 80))(a1, a2, a3, a4, a5, a6, 0);
  }
  else
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v9 = GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
    {
      v11 = a2[1];
      v10 = a2[2];
      v12 = *a2;
      v13[0] = 67109632;
      v13[1] = v11;
      v14 = 1024;
      v15 = v10;
      v16 = 1024;
      v17 = v12;
      _os_log_impl(&dword_19F029000, v9, OS_LOG_TYPE_ERROR, "Missing input slot! Unable to fetch request %u %u %u", (uint8_t *)v13, 0x14u);
    }
    a7[1] = 0;
    a7[2] = 0;
    *a7 = &off_1E42C2D08;
  }
}

BOOL altitude::HeightRequestId::operator<(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  float v13;
  float v14;

  if (*(_DWORD *)a1 < *(_DWORD *)a2)
    return 1;
  if (*(_DWORD *)a1 > *(_DWORD *)a2)
    return 0;
  v3 = *(_DWORD *)(a1 + 4);
  v4 = *(_DWORD *)(a2 + 4);
  if (v3 < v4)
    return 1;
  if (v3 > v4)
    return 0;
  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a2 + 8);
  if (v5 < v6)
    return 1;
  if (v5 <= v6)
  {
    v7 = *(_DWORD *)(a1 + 12);
    v8 = *(_DWORD *)(a2 + 12);
    v9 = v7 >= v8;
    v10 = v7 < v8;
    if (!v9)
      return v10;
  }
  v11 = *(_DWORD *)(a2 + 8);
  v12 = *(_DWORD *)(a1 + 8);
  if (v11 < v12)
    return 0;
  if (v11 <= v12 && *(_DWORD *)(a2 + 12) < *(_DWORD *)(a1 + 12))
    return 0;
  v10 = *(unsigned __int8 *)(a2 + 24);
  if (!*(_BYTE *)(a1 + 24) && *(_BYTE *)(a2 + 24))
    return 1;
  if (*(_BYTE *)(a1 + 24) && !*(_BYTE *)(a2 + 24))
    return v10;
  v10 = *(unsigned __int8 *)(a2 + 25);
  if (!*(_BYTE *)(a1 + 25) && *(_BYTE *)(a2 + 25))
    return 1;
  if (*(_BYTE *)(a1 + 25) && !*(_BYTE *)(a2 + 25))
    return v10;
  v10 = *(unsigned __int8 *)(a2 + 26);
  if (!*(_BYTE *)(a1 + 26) && *(_BYTE *)(a2 + 26))
    return 1;
  if (*(_BYTE *)(a1 + 26) && !*(_BYTE *)(a2 + 26))
    return v10;
  v13 = *(float *)(a1 + 28);
  v14 = *(float *)(a2 + 28);
  if (v13 < v14)
    return 1;
  if (v13 <= v14)
    return *(_QWORD *)(a1 + 16) < *(_QWORD *)(a2 + 16);
  return 0;
}

void std::__shared_ptr_pointer<altitude::HeightRequest *,std::shared_ptr<karo::AsyncRequestManager::Request>::__shared_ptr_default_delete<karo::AsyncRequestManager::Request,altitude::HeightRequest>,std::allocator<altitude::HeightRequest>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<altitude::HeightRequest *,std::shared_ptr<karo::AsyncRequestManager::Request>::__shared_ptr_default_delete<karo::AsyncRequestManager::Request,altitude::HeightRequest>,std::allocator<altitude::HeightRequest>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t altitude::HeightRequestManager::getResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  double v42;
  double v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  std::__shared_weak_count *v53;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 96))(&v52, a1, a2, 0);
  v13 = v52;
  v12 = v53;
  if (v53)
  {
    p_shared_owners = (unint64_t *)&v53->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
  if ((_DWORD)v16)
  {
    (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v13 + 48))(&v50, v13);
    v17 = v50;
    v50 = 0uLL;
    v18 = *(std::__shared_weak_count **)(a3 + 8);
    *(_OWORD *)a3 = v17;
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v21 = (std::__shared_weak_count *)*((_QWORD *)&v50 + 1);
    if (*((_QWORD *)&v50 + 1))
    {
      v22 = (unint64_t *)(*((_QWORD *)&v50 + 1) + 8);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v13 + 56))(&v50, v13);
    v24 = v50;
    v50 = 0uLL;
    v25 = *(std::__shared_weak_count **)(a4 + 8);
    *(_OWORD *)a4 = v24;
    if (v25)
    {
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v28 = (std::__shared_weak_count *)*((_QWORD *)&v50 + 1);
    if (*((_QWORD *)&v50 + 1))
    {
      v29 = (unint64_t *)(*((_QWORD *)&v50 + 1) + 8);
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    v51 = 0;
    v50 = (unint64_t)&v50 + 8;
    std::set<altitude::TileKey>::insert[abi:nn180100]<std::__tree_const_iterator<altitude::TileKey,std::__tree_node<altitude::TileKey,void *> *,long>>((uint64_t *)&v50, *(_QWORD **)(v13 + 432), (_QWORD *)(v13 + 440));
    v31 = a5 + 8;
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a5 + 8));
    v32 = (_QWORD *)*((_QWORD *)&v50 + 1);
    *(_QWORD *)a5 = v50;
    *(_QWORD *)(a5 + 8) = v32;
    v33 = v51;
    *(_QWORD *)(a5 + 16) = v51;
    if (v33)
    {
      v32[2] = v31;
      *(_QWORD *)&v50 = (char *)&v50 + 8;
      *((_QWORD *)&v50 + 1) = 0;
      v51 = 0;
      v32 = 0;
    }
    else
    {
      *(_QWORD *)a5 = v31;
    }
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v32);
    v34 = *(_QWORD *)(v13 + 288);
    *(_QWORD *)&v35 = *(_QWORD *)(v13 + 280);
    *((_QWORD *)&v35 + 1) = v34;
    if (v34)
    {
      v36 = (unint64_t *)(v34 + 8);
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
    }
    v38 = *(std::__shared_weak_count **)(a6 + 8);
    *(_OWORD *)a6 = v35;
    if (v38)
    {
      v39 = (unint64_t *)&v38->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    v41 = *(_QWORD *)(a1 + 128);
    if (v41)
    {
      v42 = *(double *)(v13 + 424);
      v43 = (v42 - *(double *)(v13 + 416)) * 1000.0;
      gdc::Statistics::addSampleValue(v41, "HeightLoadJobTotalTime (ms)", 0x4F1B74F10000001BuLL, (v42 - *(double *)(v13 + 408)) * 1000.0);
      gdc::Statistics::addSampleValue(*(_QWORD *)(a1 + 128), "HeightLoadJobMainTime (ms)", 0x6A12CB110000001AuLL, v43);
    }
  }
  if (v12)
  {
    v44 = (unint64_t *)&v12->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v46 = v53;
  if (v53)
  {
    v47 = (unint64_t *)&v53->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
  return v16;
}

uint64_t altitude::HeightRequestManager::maxHeightMeshLevelForTileKey(uint64_t a1, unsigned int *a2)
{
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  _QWORD v9[3];

  v9[2] = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0D27420], "modernManager");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v9[0] = altitude::TileKey::getGEOTileKey(a2, a1);
  v9[1] = v5;
  objc_msgSend(v4, "activeTileGroup");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "activeTileSetForKey:", v9);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  GEOMapRectForGEOTileKey();
  LODWORD(v6) = objc_msgSend(v7, "maximumZoomLevelInRect:");

  return ((_DWORD)v6 - 1);
}

void sub_19FD53BA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void md::ARFeatureInjectionLogic::~ARFeatureInjectionLogic(md::ARFeatureInjectionLogic *this)
{
  *(_QWORD *)this = &off_1E429E090;
  *((_QWORD *)this + 20) = &off_1E42B4F50;

  *((_QWORD *)this + 17) = &off_1E42B4F50;
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
}

{
  *(_QWORD *)this = &off_1E429E090;
  *((_QWORD *)this + 20) = &off_1E42B4F50;

  *((_QWORD *)this + 17) = &off_1E42B4F50;
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
  JUMPOUT(0x1A1AF4E00);
}

void md::ARFeatureInjectionLogic::didBecomeInactive(md::ARFeatureInjectionLogic *this)
{
  void *v2;
  void *v3;

  *((_QWORD *)this + 15) = 0;
  md::LabelSettings::setARWalkingFeatures(*((md::LabelSettings **)this + 16), *((VKARWalkingFeatureSet **)this + 21), 0);
  v2 = (void *)*((_QWORD *)this + 21);
  if (v2)
  {
    *((_QWORD *)this + 21) = 0;

  }
  v3 = (void *)*((_QWORD *)this + 18);
  if (v3)
  {
    *((_QWORD *)this + 18) = 0;

  }
}

void md::ARFeatureInjectionLogic::createDebugNode(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  void *v5;
  void *v6;
  const std::string::value_type *v7;
  id v8;
  void *v9;
  const std::string::value_type *v10;
  uint64_t v11;
  std::string v12;
  int v13;
  _BYTE v14[32];
  std::string __p;
  int v16;
  _QWORD v17[7];
  int v18;
  char v19[32];

  v4 = (char *)operator new(0x19uLL);
  strcpy(v4, "ARFeatureInjectionLogic");
  std::string::__init_copy_ctor_external((std::string *)a2, v4, 0x17uLL);
  *(_BYTE *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 47) = 0u;
  *(_OWORD *)(a2 + 63) = 0u;
  *(_OWORD *)(a2 + 79) = 0u;
  *(_BYTE *)(a2 + 95) = 0;
  operator delete(v4);
  if (*(_QWORD *)(a1 + 120))
  {
    v19[23] = 10;
    strcpy(v19, "DebugScene");
    v18 = 0;
    memset(&v17[4], 0, 24);
    v17[0] = 1;
    gdc::DebugTreeNode::addProperty(a2, (uint64_t)v19, (uint64_t)v17);
  }
  objc_msgSend(*(id *)(a1 + 168), "description");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v5)
  {
    v19[23] = 16;
    strcpy(v19, "ExternalFeatures");
    v7 = (const std::string::value_type *)objc_msgSend(objc_retainAutorelease(v5), "UTF8String");
    memset(&__p, 0, sizeof(__p));
    v16 = 4;
    if (v7)
    {
      std::string::__assign_external(&__p, v7);
    }
    else
    {
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 6;
      strcpy((char *)&__p, "<null>");
    }
    gdc::DebugTreeNode::addProperty(a2, (uint64_t)v19, (uint64_t)v14);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  v8 = *(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 40) + 144);
  objc_msgSend(v8, "description");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9)
  {
    v19[23] = 21;
    strcpy(v19, "LabelSettingsFeatures");
    v10 = (const std::string::value_type *)objc_msgSend(objc_retainAutorelease(v9), "UTF8String");
    memset(&v12, 0, sizeof(v12));
    v13 = 4;
    if (v10)
    {
      std::string::__assign_external(&v12, v10);
    }
    else
    {
      *((_BYTE *)&v12.__r_.__value_.__s + 23) = 6;
      strcpy((char *)&v12, "<null>");
    }
    gdc::DebugTreeNode::addProperty(a2, (uint64_t)v19, (uint64_t)&v11);
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v12.__r_.__value_.__l.__data_);
  }

}

void sub_19FD53F6C(_Unwind_Exception *a1)
{
  gdc::DebugTreeNode *v1;
  void *v2;

  gdc::DebugTreeNode::~DebugTreeNode(v1);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::ARFeatureInjectionLogic,md::ARFeatureInjectionContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext,md::SettingsContext>,gdc::TypeList<>>>::_allocateContext@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;
  char v7;

  v4 = (_QWORD *)operator new();
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 112))(&v6, a1);
  result = operator new();
  *(_QWORD *)result = v6;
  *(_BYTE *)(result + 8) = v7;
  v4[2] = "md::ARFeatureInjectionContext]";
  v4[3] = 29;
  v4[4] = result;
  *v4 = &off_1E42B1270;
  v4[1] = 0xB6CE4C2C57DB41DFLL;
  *a2 = v4;
  return result;
}

void sub_19FD5405C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v9;

  MEMORY[0x1A1AF4E00](v9, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::ARFeatureInjectionLogic,md::ARFeatureInjectionContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext,md::SettingsContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[4];

  if (*(_QWORD *)(a3 + 8) == 0xB6CE4C2C57DB41DFLL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext,md::SettingsContext>,gdc::TypeList<>>::buildRequiredTuple<md::ARLogicContext,md::NavigationContext,md::SettingsContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 128))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::ARFeatureInjectionLogic,md::ARFeatureInjectionContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext,md::SettingsContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[4];

  if (*(_QWORD *)(a3 + 8) == 0xB6CE4C2C57DB41DFLL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext,md::SettingsContext>,gdc::TypeList<>>::buildRequiredTuple<md::ARLogicContext,md::NavigationContext,md::SettingsContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 136))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::ARFeatureInjectionLogic,md::ARFeatureInjectionContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext,md::SettingsContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[4];

  if (*(_QWORD *)(a3 + 8) == 0xB6CE4C2C57DB41DFLL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext,md::SettingsContext>,gdc::TypeList<>>::buildRequiredTuple<md::ARLogicContext,md::NavigationContext,md::SettingsContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 144))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::ARFeatureInjectionLogic,md::ARFeatureInjectionContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext,md::SettingsContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[4];

  if (*(_QWORD *)(a3 + 8) == 0xB6CE4C2C57DB41DFLL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext,md::SettingsContext>,gdc::TypeList<>>::buildRequiredTuple<md::ARLogicContext,md::NavigationContext,md::SettingsContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 152))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::ARFeatureInjectionLogic,md::ARFeatureInjectionContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext,md::SettingsContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[4];

  if (*(_QWORD *)(a3 + 8) == 0xB6CE4C2C57DB41DFLL && (v4 = *(_QWORD *)(a3 + 32)) != 0)
  {
    v6 = result;
    md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext,md::SettingsContext>,gdc::TypeList<>>::buildRequiredTuple<md::ARLogicContext,md::NavigationContext,md::SettingsContext>(v7, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v6 + 160))(v6, a2, v7, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

void md::Logic<md::ARFeatureInjectionLogic,md::ARFeatureInjectionContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext,md::SettingsContext>,gdc::TypeList<>>>::allocateContext(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
}

uint64_t md::Logic<md::ARFeatureInjectionLogic,md::ARFeatureInjectionContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext,md::SettingsContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

void md::ARFeatureInjectionLogic::runBeforeLayout(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v6;
  VKARWalkingFeatureSet *v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  void *v12;

  v6 = *(_QWORD *)(a1 + 120);
  if (!v6)
  {
    v9 = *(id *)(a1 + 168);
    v8 = v9;
    if (v9)
      v10 = v9;
    v11 = *(void **)(a1 + 144);
    *(_QWORD *)(a1 + 144) = v8;

    goto LABEL_7;
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v6 + 16))(v6, a2, a3[1], *a3))
  {
    v7 = -[VKARWalkingFeatureSet initWithFeatures:]([VKARWalkingFeatureSet alloc], "initWithFeatures:", *(_QWORD *)(*(_QWORD *)(a1 + 120) + 16));
    v8 = *(void **)(a1 + 144);
    *(_QWORD *)(a1 + 144) = v7;
LABEL_7:

  }
  md::LabelSettings::setARWalkingFeatures(*(md::LabelSettings **)(a1 + 128), *(VKARWalkingFeatureSet **)(a1 + 144), 0);
  v12 = *(void **)(a1 + 144);
  *(_BYTE *)(a4 + 8) = *(_QWORD *)a4 != (_QWORD)v12;
  objc_storeStrong((id *)a4, v12);
}

void md::Logic<md::ARFeatureInjectionLogic,md::ARFeatureInjectionContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext,md::SettingsContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

_QWORD *md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext,md::SettingsContext>,gdc::TypeList<>>::buildRequiredTuple<md::ARLogicContext,md::NavigationContext,md::SettingsContext>(_QWORD *result, uint64_t a2, unint64_t a3)
{
  uint8x8_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (!a3)
  {
    v5 = 0;
    v6 = 0;
    goto LABEL_71;
  }
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)a3);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = 0x37F8C546A65FE3EELL;
    if (a3 <= 0x37F8C546A65FE3EELL)
      v4 = 0x37F8C546A65FE3EELL % a3;
  }
  else
  {
    v4 = (a3 - 1) & 0x37F8C546A65FE3EELL;
  }
  v7 = *(_QWORD **)(a2 + 8 * v4);
  if (!v7)
    goto LABEL_25;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_25;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v10 = v8[1];
      if (v10 == 0x37F8C546A65FE3EELL)
      {
        if (v8[2] == 0x37F8C546A65FE3EELL)
          goto LABEL_23;
      }
      else if ((v10 & (a3 - 1)) != v4)
      {
        goto LABEL_25;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_25;
    }
  }
  while (1)
  {
    v9 = v8[1];
    if (v9 == 0x37F8C546A65FE3EELL)
      break;
    if (v9 >= a3)
      v9 %= a3;
    if (v9 != v4)
      goto LABEL_25;
LABEL_12:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_25;
  }
  if (v8[2] != 0x37F8C546A65FE3EELL)
    goto LABEL_12;
LABEL_23:
  v11 = v8[5];
  if (*(_QWORD *)(v11 + 8) == 0x37F8C546A65FE3EELL)
  {
    v6 = *(_QWORD *)(v11 + 32);
    goto LABEL_26;
  }
LABEL_25:
  v6 = 0;
LABEL_26:
  if (v3.u32[0] > 1uLL)
  {
    v12 = 0x1B8B241A8D896A1DLL;
    if (a3 <= 0x1B8B241A8D896A1DLL)
      v12 = 0x1B8B241A8D896A1DLL % a3;
  }
  else
  {
    v12 = (a3 - 1) & 0x1B8B241A8D896A1DLL;
  }
  v13 = *(_QWORD **)(a2 + 8 * v12);
  if (!v13)
    goto LABEL_48;
  v14 = (_QWORD *)*v13;
  if (!v14)
    goto LABEL_48;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v16 = v14[1];
      if (v16 == 0x1B8B241A8D896A1DLL)
      {
        if (v14[2] == 0x1B8B241A8D896A1DLL)
          goto LABEL_46;
      }
      else if ((v16 & (a3 - 1)) != v12)
      {
        goto LABEL_48;
      }
      v14 = (_QWORD *)*v14;
      if (!v14)
        goto LABEL_48;
    }
  }
  while (2)
  {
    v15 = v14[1];
    if (v15 != 0x1B8B241A8D896A1DLL)
    {
      if (v15 >= a3)
        v15 %= a3;
      if (v15 != v12)
        goto LABEL_48;
      goto LABEL_35;
    }
    if (v14[2] != 0x1B8B241A8D896A1DLL)
    {
LABEL_35:
      v14 = (_QWORD *)*v14;
      if (!v14)
        goto LABEL_48;
      continue;
    }
    break;
  }
LABEL_46:
  v17 = v14[5];
  if (*(_QWORD *)(v17 + 8) == 0x1B8B241A8D896A1DLL)
  {
    v5 = *(_QWORD *)(v17 + 32);
    goto LABEL_49;
  }
LABEL_48:
  v5 = 0;
LABEL_49:
  if (v3.u32[0] > 1uLL)
  {
    v18 = 0xC97B9E962ADF4AD4;
    if (a3 <= 0xC97B9E962ADF4AD4)
      v18 = 0xC97B9E962ADF4AD4 % a3;
  }
  else
  {
    v18 = (a3 - 1) & 0xC97B9E962ADF4AD4;
  }
  v19 = *(_QWORD **)(a2 + 8 * v18);
  if (!v19)
    goto LABEL_71;
  v20 = (_QWORD *)*v19;
  if (!v20)
    goto LABEL_71;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v22 = v20[1];
      if (v22 == 0xC97B9E962ADF4AD4)
      {
        if (v20[2] == 0xC97B9E962ADF4AD4)
          goto LABEL_69;
      }
      else if ((v22 & (a3 - 1)) != v18)
      {
        goto LABEL_71;
      }
      v20 = (_QWORD *)*v20;
      if (!v20)
        goto LABEL_71;
    }
  }
  while (1)
  {
    v21 = v20[1];
    if (v21 == 0xC97B9E962ADF4AD4)
      break;
    if (v21 >= a3)
      v21 %= a3;
    if (v21 != v18)
      goto LABEL_71;
LABEL_58:
    v20 = (_QWORD *)*v20;
    if (!v20)
      goto LABEL_71;
  }
  if (v20[2] != 0xC97B9E962ADF4AD4)
    goto LABEL_58;
LABEL_69:
  v23 = v20[5];
  if (*(_QWORD *)(v23 + 8) != 0xC97B9E962ADF4AD4)
  {
LABEL_71:
    v24 = 0;
    goto LABEL_72;
  }
  v24 = *(_QWORD *)(v23 + 32);
LABEL_72:
  *result = v6;
  result[1] = v5;
  result[2] = v24;
  return result;
}

_QWORD *gdc::ManagedObjectHolder<md::ARFeatureInjectionContext>::~ManagedObjectHolder(_QWORD *a1)
{
  id *v2;

  *a1 = &off_1E42B1270;
  v2 = (id *)a1[4];
  if (v2)
  {

    MEMORY[0x1A1AF4E00](v2, 0x1080C40C20BADFCLL);
  }
  return a1;
}

void gdc::ManagedObjectHolder<md::ARFeatureInjectionContext>::~ManagedObjectHolder(_QWORD *a1)
{
  id *v1;

  *a1 = &off_1E42B1270;
  v1 = (id *)a1[4];
  if (v1)
  {

    MEMORY[0x1A1AF4E00](v1, 0x1080C40C20BADFCLL);
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::ARFeatureInjectionContext>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void md::ARFeatureInjectionLogic::setARDebugScene(md::ARDebugScene **this, md::ARDebugScene *a2)
{
  VKARWalkingFeatureSet *v3;
  md::ARDebugScene *v4;
  NSObject *v5;
  md::ARDebugScene *v6;
  int v7;
  md::ARDebugScene *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (this[15] == a2)
    return;
  this[15] = a2;
  if (a2)
  {
    v3 = -[VKARWalkingFeatureSet initWithFeatures:]([VKARWalkingFeatureSet alloc], "initWithFeatures:", *((_QWORD *)this[15] + 2));
    v4 = this[18];
    this[18] = (md::ARDebugScene *)v3;
LABEL_6:

    goto LABEL_7;
  }
  v4 = this[18];
  if (v4)
  {
    this[18] = 0;
    goto LABEL_6;
  }
LABEL_7:
  if (GEOGetVectorKitARFeatureInjectionLogicLog(void)::onceToken != -1)
    dispatch_once(&GEOGetVectorKitARFeatureInjectionLogicLog(void)::onceToken, &__block_literal_global_31028);
  v5 = GEOGetVectorKitARFeatureInjectionLogicLog(void)::log;
  if (os_log_type_enabled((os_log_t)GEOGetVectorKitARFeatureInjectionLogicLog(void)::log, OS_LOG_TYPE_INFO))
  {
    v6 = this[15];
    v7 = 134217984;
    v8 = v6;
    _os_log_impl(&dword_19F029000, v5, OS_LOG_TYPE_INFO, "ARDebugSceneDidChange:%p", (uint8_t *)&v7, 0xCu);
  }
}

void ___ZL41GEOGetVectorKitARFeatureInjectionLogicLogv_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.VectorKit", "ARFeatureInjectionLogic");
  v1 = (void *)GEOGetVectorKitARFeatureInjectionLogicLog(void)::log;
  GEOGetVectorKitARFeatureInjectionLogicLog(void)::log = (uint64_t)v0;

}

void md::MapZoomLevelStyleLogic::~MapZoomLevelStyleLogic(md::MapZoomLevelStyleLogic *this)
{
  md::MapZoomLevelStyleLogic::~MapZoomLevelStyleLogic(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1E429CF20;
  v2 = (void *)*((_QWORD *)this + 16);
  if (v2)
  {
    objc_msgSend(v2, "stop");
    v3 = (void *)*((_QWORD *)this + 16);
    if (v3)
    {
      *((_QWORD *)this + 16) = 0;

      v3 = (void *)*((_QWORD *)this + 16);
    }
  }
  else
  {
    v3 = 0;
  }
  *((_QWORD *)this + 15) = &off_1E42B4C90;

  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
}

uint64_t md::Logic<md::MapZoomLevelStyleLogic,md::MapZoomLevelStyleLogicContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[3];

  if (*(_QWORD *)(a3 + 8) == 0xF0AA2DB42EB710AFLL && (v4 = *(_QWORD *)(a3 + 32)) != 0)
  {
    v6 = result;
    v8[0] = md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::StyleLogicContext>(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
    v8[1] = v7;
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v6 + 160))(v6, a2, v8, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

uint64_t md::Logic<md::MapZoomLevelStyleLogic,md::MapZoomLevelStyleLogicContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

void md::Logic<md::MapZoomLevelStyleLogic,md::MapZoomLevelStyleLogicContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

void _ZNSt3__110__function6__funcIZN2md22MapZoomLevelStyleLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_17StyleLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_29MapZoomLevelStyleLogicContextEE3__0NS_9allocatorISK_EEFvNS2_17StyleManagerEventEEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 _ZNKSt3__110__function6__funcIZN2md22MapZoomLevelStyleLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_17StyleLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_29MapZoomLevelStyleLogicContextEE3__0NS_9allocatorISK_EEFvNS2_17StyleManagerEventEEE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42D0EE0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN2md22MapZoomLevelStyleLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_17StyleLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_29MapZoomLevelStyleLogicContextEE3__0NS_9allocatorISK_EEFvNS2_17StyleManagerEventEEE7__cloneEPNS0_6__baseISO_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42D0EE0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *gdc::ManagedObjectHolder<md::MapZoomLevelStyleLogicContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E42B14A0;
  v2 = a1[4];
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0xC400A2AC0F1);
  return a1;
}

void gdc::ManagedObjectHolder<md::MapZoomLevelStyleLogicContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E42B14A0;
  v1 = a1[4];
  if (v1)
    MEMORY[0x1A1AF4E00](v1, 0xC400A2AC0F1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::MapZoomLevelStyleLogicContext>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void sub_19FD54CE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 120) = &off_1E42B4C90;

  md::Logic<md::DrapingLogic,md::DrapingContext,md::LogicDependencies<gdc::TypeList<md::OverlaysContext,md::CameraContext,md::PendingSceneContext,md::ElevationContext>,gdc::TypeList<>>>::~Logic(v1);
  _Unwind_Resume(a1);
}

void ggl::VenueWall::MeshMesh::~MeshMesh(ggl::VenueWall::MeshMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::VenueWall::MeshMesh::~MeshMesh(ggl::VenueWall::MeshMesh *this)
{
  ggl::Mesh::~Mesh((ggl::VenueWall::MeshMesh *)((char *)this - 16));
}

{
  ggl::Mesh::~Mesh((ggl::VenueWall::MeshMesh *)((char *)this - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::MeshTyped<ggl::VenueWall::DefaultVbo>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::MeshTyped<ggl::VenueWall::DefaultVbo>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::VenueWall::EndCapMesh::~EndCapMesh(ggl::VenueWall::EndCapMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::VenueWall::EndCapMesh::~EndCapMesh(ggl::VenueWall::EndCapMesh *this)
{
  ggl::Mesh::~Mesh((ggl::VenueWall::EndCapMesh *)((char *)this - 16));
}

{
  ggl::Mesh::~Mesh((ggl::VenueWall::EndCapMesh *)((char *)this - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::MeshTyped<ggl::VenueWall::EndCapVbo>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::MeshTyped<ggl::VenueWall::EndCapVbo>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::VenueWall::MeshPipelineState::MeshPipelineState(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD *a4)
{
  unsigned __int8 v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v10;
  char v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int16x8_t v18;
  int32x4_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int16x8_t v22;
  int32x4_t v23;
  int8x16_t v24;
  int32x4_t v25;
  int8x16_t v26;
  int32x4_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int16x8_t v37;
  int32x4_t v38;
  int8x16_t v39;
  int16x8_t v40;
  int32x4_t v41;
  int8x16_t v42;
  int32x4_t v43;
  int8x16_t v44;
  int32x4_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int16x8_t v60;
  int32x4_t v61;
  int8x16_t v62;
  int16x8_t v63;
  int32x4_t v64;
  int8x16_t v65;
  int32x4_t v66;
  int8x16_t v67;
  int32x4_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int16x8_t v75;
  int32x4_t v76;
  int8x16_t v77;
  int16x8_t v78;
  int32x4_t v79;
  int8x16_t v80;
  int32x4_t v81;
  int8x16_t v82;
  int32x4_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  _OWORD *v89;
  ggl::VenueWallShader *v90;
  unsigned __int8 v91;
  unsigned __int8 v92;
  unsigned __int8 v93;
  unsigned __int8 v94;
  unsigned __int8 v95;
  unsigned __int8 v96;
  _QWORD *v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  _BYTE v101[28];

  if ((v5 & 1) == 0)
  {
    v89 = a4;
    v97 = a2;
    v98 = a3;
    a2 = v97;
    a3 = v98;
    a4 = v89;
    if ((_DWORD)v90)
    {
      if ((v91 & 1) == 0)
      {
        if ((_DWORD)v90)
        {
          if ((v94 & 1) == 0
          {
            if ((v96 & 1) == 0
            {
              ggl::MeshTyped<ggl::VenueWall::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::VenueWall::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::VenueWall::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::VenueWall::DefaultVbo>::attributesReflection(void)::r;
            unk_1ECE43E40 = 1;
          }
          ggl::VenueWall::MeshPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::VenueWall::DefaultVbo>::typedReflection(void)::r;
          *(_QWORD *)algn_1EE584CE8 = &ggl::VenueWall::pipelineDataMeshPipelineDeviceStructs(void)::ref;
          qword_1EE584CF0 = 0;
          if ((v95 & 1) == 0
          {
            ggl::VenueWall::pipelineDataMeshPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            unk_1EE584D80 = ggl::Lighting::LightConfiguration::reflection(void)::reflection;
            qword_1EE584D88 = (uint64_t)ggl::Building::Gradient::reflection(void)::reflection;
            unk_1EE584D90 = ggl::VenueWall::Wall::reflection(void)::reflection;
          }
          qword_1EE584CF8 = (uint64_t)&ggl::VenueWall::pipelineDataMeshPipelineConstantStructs(void)::ref;
          unk_1EE584D00 = xmmword_19FFB48D0;
        }
      }
      ggl::VenueWall::MeshPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::VenueWall::MeshPipelineSetup::typedReflection(void)::ref;
      ggl::VenueWallShader::typedReflection(v90);
      qword_1ECE323C0 = (uint64_t)&ggl::VenueWallShader::typedReflection(void)::ref;
      if ((v92 & 1) == 0
      {
        ggl::VenueWall::pipelineStateMeshPipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE584E80 = 0;
        qword_1EE584E88 = (uint64_t)"";
        dword_1EE584E90 = 0;
        qword_1EE584E98 = (uint64_t)&ggl::VenueWall::pipelineStateMeshPipelineAttributeBinding_0(void)::attr;
        unk_1EE584EA0 = 4;
      }
      qword_1ECE323C8 = (uint64_t)&ggl::VenueWall::pipelineStateMeshPipelineAttributeStructBinding(void)::attr;
      unk_1ECE323D0 = 1;
      qword_1ECE323D8 = 0;
      unk_1ECE323E0 = 1;
      qword_1ECE323E8 = (uint64_t)&ggl::VenueWall::pipelineStateMeshPipelineDeviceStructBinding(void)::ref;
      unk_1ECE323F0 = 0;
      if ((v93 & 1) == 0
      {
        ggl::VenueWall::pipelineStateMeshPipelineConstantStructBinding(void)::ref = 0;
        unk_1EE584DC0 = 0;
        qword_1EE584DC8 = (uint64_t)"view";
        dword_1EE584DD0 = 3;
        qword_1EE584DD8 = (uint64_t)&ggl::VenueWall::pipelineStateMeshPipelineConstantViewBinding(void)::reflection;
        unk_1EE584DE0 = xmmword_19FFB35A0;
        qword_1EE584DF0 = 1;
        unk_1EE584DF8 = "lightConfig";
        dword_1EE584E00 = 3;
        qword_1EE584E08 = (uint64_t)&ggl::VenueWall::pipelineStateMeshPipelineConstantLightConfigBinding(void)::reflection;
        *(_OWORD *)algn_1EE584E10 = xmmword_19FFB2F50;
        qword_1EE584E20 = 2;
        unk_1EE584E28 = "gradient";
        dword_1EE584E30 = 3;
        qword_1EE584E38 = (uint64_t)&ggl::VenueWall::pipelineStateMeshPipelineConstantGradientBinding(void)::reflection;
        unk_1EE584E40 = xmmword_19FFB3040;
        qword_1EE584E50 = 3;
        unk_1EE584E58 = "wall";
        dword_1EE584E60 = 3;
        qword_1EE584E68 = (uint64_t)&ggl::VenueWall::pipelineStateMeshPipelineConstantWallBinding(void)::reflection;
        unk_1EE584E70 = 7;
      }
      qword_1ECE323F8 = (uint64_t)&ggl::VenueWall::pipelineStateMeshPipelineConstantStructBinding(void)::ref;
      unk_1ECE32400 = 4;
      a4 = v89;
      a2 = v97;
      a3 = v98;
    }
  }
  v6 = *a2;
  v7 = (std::__shared_weak_count *)a2[1];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  *(_OWORD *)v101 = *(_OWORD *)a3;
  *(_OWORD *)&v101[12] = *(_OWORD *)(a3 + 12);
  v10 = *(_OWORD *)(a3 + 28);
  v11 = *(_BYTE *)(a3 + 44);
  v99 = *a4;
  v100 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &off_1E42B6760;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = &ggl::VenueWall::MeshPipelineState::typedReflection(void)::ref;
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = v7;
  if (v7)
  {
    v12 = (unint64_t *)&v7->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_BYTE *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 148) = 0;
  *(_QWORD *)(a1 + 140) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 180) = 0;
  *(_QWORD *)(a1 + 196) = 0;
  *(_QWORD *)(a1 + 188) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 228) = 0;
  *(_QWORD *)(a1 + 244) = 0;
  *(_QWORD *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v99;
  *(_OWORD *)(a1 + 272) = v100;
  *(_BYTE *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0x100000001;
  *(_BYTE *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v101;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v101[12];
  *(_OWORD *)(a1 + 92) = v10;
  *(_BYTE *)(a1 + 108) = v11;
  if (v7)
  {
    v14 = (unint64_t *)&v7->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_BYTE *)(a1 + 305) = 0;
  v16 = *(int8x16_t *)(a1 + 320);
  v17 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  v18 = vmovl_high_s8(v17);
  v19 = vmovl_s16(*(int16x4_t *)v18.i8);
  v20.i64[0] = v19.u32[0];
  v20.i64[1] = v19.u32[1];
  v21 = v20;
  v22 = vmovl_s8(*(int8x8_t *)v17.i8);
  v23 = vmovl_s16(*(int16x4_t *)v22.i8);
  *(_QWORD *)a1 = &off_1E42BE508;
  v20.i64[0] = v23.u32[0];
  v20.i64[1] = v23.u32[1];
  v24 = v20;
  v25 = vmovl_high_s16(v18);
  v20.i64[0] = v25.u32[0];
  v20.i64[1] = v25.u32[1];
  v26 = v20;
  v27 = vmovl_high_s16(v22);
  v20.i64[0] = v27.u32[0];
  v20.i64[1] = v27.u32[1];
  v28 = v20;
  v20.i64[0] = v19.u32[2];
  v20.i64[1] = v19.u32[3];
  v29 = v20;
  v20.i64[0] = v23.u32[2];
  v20.i64[1] = v23.u32[3];
  v30 = v20;
  v20.i64[0] = v25.u32[2];
  v20.i64[1] = v25.u32[3];
  v31 = v20;
  v20.i64[0] = v27.u32[2];
  v20.i64[1] = v27.u32[3];
  v32 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v20);
  v33 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v31);
  v34 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v30);
  v35 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v26);
  v36 = vceqzq_s8(v16);
  v37 = vmovl_high_s8(v36);
  v38 = vmovl_s16(*(int16x4_t *)v37.i8);
  v20.i64[0] = v38.u32[0];
  v20.i64[1] = v38.u32[1];
  v39 = v20;
  v40 = vmovl_s8(*(int8x8_t *)v36.i8);
  v41 = vmovl_s16(*(int16x4_t *)v40.i8);
  v20.i64[0] = v41.u32[0];
  v20.i64[1] = v41.u32[1];
  v42 = v20;
  v43 = vmovl_high_s16(v37);
  v20.i64[0] = v43.u32[0];
  v20.i64[1] = v43.u32[1];
  v44 = v20;
  v45 = vmovl_high_s16(v40);
  v20.i64[0] = v45.u32[0];
  v20.i64[1] = v45.u32[1];
  v46 = v20;
  v20.i64[0] = v38.u32[2];
  v20.i64[1] = v38.u32[3];
  v47 = v20;
  v20.i64[0] = v41.u32[2];
  v20.i64[1] = v41.u32[3];
  v48 = v20;
  v20.i64[0] = v43.u32[2];
  v20.i64[1] = v43.u32[3];
  v49 = v20;
  v20.i64[0] = v45.u32[2];
  v20.i64[1] = v45.u32[3];
  v50 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v49);
  v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v39), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v21));
  v52 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v42), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v24));
  v53 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v44), v35);
  v54 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v46), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v28));
  v55 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v47), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v29));
  v56 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v48), v34);
  v57 = vorrq_s8(v50, v33);
  v58 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v20), v32);
  v59 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  v60 = vmovl_s8(*(int8x8_t *)v59.i8);
  v61 = vmovl_high_s16(v60);
  v20.i64[0] = v61.i32[2];
  v20.i64[1] = v61.i32[3];
  v62 = v20;
  v63 = vmovl_high_s8(v59);
  v64 = vmovl_high_s16(v63);
  v20.i64[0] = v64.i32[2];
  v20.i64[1] = v64.i32[3];
  v65 = v20;
  v66 = vmovl_s16(*(int16x4_t *)v60.i8);
  v20.i64[0] = v66.i32[2];
  v20.i64[1] = v66.i32[3];
  v67 = v20;
  v68 = vmovl_s16(*(int16x4_t *)v63.i8);
  v20.i64[0] = v68.i32[2];
  v20.i64[1] = v68.i32[3];
  v69 = v20;
  v20.i64[0] = v61.i32[0];
  v20.i64[1] = v61.i32[1];
  v70 = v20;
  v20.i64[0] = v64.i32[0];
  v20.i64[1] = v64.i32[1];
  v71 = v20;
  v20.i64[0] = v66.i32[0];
  v20.i64[1] = v66.i32[1];
  v72 = v20;
  v20.i64[0] = v68.i32[0];
  v20.i64[1] = v68.i32[1];
  v73 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v20);
  v74 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  v75 = vmovl_high_s8(v74);
  v76 = vmovl_s16(*(int16x4_t *)v75.i8);
  v20.i64[0] = v76.i32[0];
  v20.i64[1] = v76.i32[1];
  v77 = v20;
  v78 = vmovl_s8(*(int8x8_t *)v74.i8);
  v79 = vmovl_s16(*(int16x4_t *)v78.i8);
  v20.i64[0] = v79.i32[0];
  v20.i64[1] = v79.i32[1];
  v80 = v20;
  v81 = vmovl_high_s16(v75);
  v20.i64[0] = v81.i32[0];
  v20.i64[1] = v81.i32[1];
  v82 = v20;
  v83 = vmovl_high_s16(v78);
  v20.i64[0] = v83.i32[0];
  v20.i64[1] = v83.i32[1];
  v84 = v20;
  v20.i64[0] = v76.i32[2];
  v20.i64[1] = v76.i32[3];
  v85 = v20;
  v20.i64[0] = v79.i32[2];
  v20.i64[1] = v79.i32[3];
  v86 = v20;
  v20.i64[0] = v81.i32[2];
  v20.i64[1] = v81.i32[3];
  v87 = v20;
  v20.i64[0] = v83.i32[2];
  v20.i64[1] = v83.i32[3];
  *(_QWORD *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v80), vbicq_s8((int8x16_t)xmmword_19FFB3170, v72)), v52), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v77), v73), v51)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v84), vbicq_s8((int8x16_t)xmmword_19FFB3190, v70)), v54), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v82), vbicq_s8((int8x16_t)xmmword_19FFB3180, v71)),
                                               v53))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v86), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v67)), v56), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v85), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v69)), v55)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v20), vbicq_s8((int8x16_t)xmmword_19FFB31D0, v62)), v58), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31F0, v87),
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31C0, v65)),
                                               v57)))));
  *(_BYTE *)(a1 + 288) = 1;
  return a1;
}

void ggl::VenueWall::MeshPipelineSetup::~MeshPipelineSetup(ggl::VenueWall::MeshPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::VenueWall::MeshPipelineSetup::constantDataIsEnabled(ggl::VenueWall::MeshPipelineSetup *this, unint64_t a2)
{
  return a2 < 4;
}

BOOL ggl::VenueWall::MeshPipelineSetup::textureIsEnabled(ggl::VenueWall::MeshPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

void ggl::VenueWall::WallTopMeshPipelineSetup::~WallTopMeshPipelineSetup(ggl::VenueWall::WallTopMeshPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::VenueWall::WallTopMeshPipelineSetup::constantDataIsEnabled(ggl::VenueWall::WallTopMeshPipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

BOOL ggl::VenueWall::WallTopMeshPipelineSetup::textureIsEnabled(ggl::VenueWall::WallTopMeshPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

void ggl::VenueWall::WallEndCapMeshPipelineSetup::~WallEndCapMeshPipelineSetup(ggl::VenueWall::WallEndCapMeshPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::VenueWall::WallEndCapMeshPipelineSetup::constantDataIsEnabled(ggl::VenueWall::WallEndCapMeshPipelineSetup *this, unint64_t a2)
{
  return a2 < 4;
}

BOOL ggl::VenueWall::WallEndCapMeshPipelineSetup::textureIsEnabled(ggl::VenueWall::WallEndCapMeshPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

void sub_19FD55A70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19FD55B8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

Class initARGeoTrackingConfiguration(void)
{
  Class result;

  if (LoadARKit(void)::loadPredicate != -1)
    dispatch_once(&LoadARKit(void)::loadPredicate, &__block_literal_global_31230);
  result = objc_getClass("ARGeoTrackingConfiguration");
  classARGeoTrackingConfiguration = (uint64_t)result;
  getARGeoTrackingConfigurationClass = (uint64_t (*)(void))ARGeoTrackingConfigurationFunction;
  return result;
}

id ARGeoTrackingConfigurationFunction(void)
{
  return (id)classARGeoTrackingConfiguration;
}

void ___ZL9LoadARKitv_block_invoke_31232()
{
  LoadARKit(void)::frameworkLibrary = (uint64_t)dlopen("/System/Library/Frameworks/ARKit.framework/ARKit", 2);
  if (!LoadARKit(void)::frameworkLibrary)
    NSLog((NSString *)CFSTR("### Failed to Soft Linked: /System/Library/Frameworks/ARKit.framework/ARKit"));
}

Class initARWorldTrackingConfiguration(void)
{
  Class result;

  if (LoadARKit(void)::loadPredicate != -1)
    dispatch_once(&LoadARKit(void)::loadPredicate, &__block_literal_global_31230);
  result = objc_getClass("ARWorldTrackingConfiguration");
  classARWorldTrackingConfiguration = (uint64_t)result;
  getARWorldTrackingConfigurationClass = (uint64_t (*)(void))ARWorldTrackingConfigurationFunction;
  return result;
}

id ARWorldTrackingConfigurationFunction(void)
{
  return (id)classARWorldTrackingConfiguration;
}

Class initARSession()
{
  Class result;

  if (LoadARKit(void)::loadPredicate != -1)
    dispatch_once(&LoadARKit(void)::loadPredicate, &__block_literal_global_31230);
  result = objc_getClass("ARSession");
  classARSession = (uint64_t)result;
  getARSessionClass = (uint64_t (*)())ARSessionFunction;
  return result;
}

id ARSessionFunction()
{
  return (id)classARSession;
}

void std::__function::__func<md::ita::AssignRenderOrder::operator()(ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>)::$_4,std::allocator<md::ita::AssignRenderOrder::operator()(ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>)::$_4>,void ()(md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::ita::AssignRenderOrder::operator()(ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>)::$_4,std::allocator<md::ita::AssignRenderOrder::operator()(ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>)::$_4>,void ()(md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E427B388;
  return result;
}

void std::__function::__func<md::ita::AssignRenderOrder::operator()(ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>)::$_4,std::allocator<md::ita::AssignRenderOrder::operator()(ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>)::$_4>,void ()(md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E427B388;
}

void std::__function::__func<md::ita::AssignRenderOrder::operator()(ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>)::$_4,std::allocator<md::ita::AssignRenderOrder::operator()(ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>)::$_4>,void ()(md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &)>::operator()(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t *a5)
{
  *a5 = (*a3 >> 4) | 0x300;
}

void std::__function::__func<md::ita::AssignRenderOrder::operator()(ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>)::$_3,std::allocator<md::ita::AssignRenderOrder::operator()(ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>)::$_3>,void ()(md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::ita::AssignRenderOrder::operator()(ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>)::$_3,std::allocator<md::ita::AssignRenderOrder::operator()(ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>)::$_3>,void ()(md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E427B340;
  return result;
}

void std::__function::__func<md::ita::AssignRenderOrder::operator()(ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>)::$_3,std::allocator<md::ita::AssignRenderOrder::operator()(ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>)::$_3>,void ()(md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E427B340;
}

void std::__function::__func<md::ita::AssignRenderOrder::operator()(ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>)::$_3,std::allocator<md::ita::AssignRenderOrder::operator()(ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>)::$_3>,void ()(md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &)>::operator()(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t *a5)
{
  *a5 = (*a3 >> 4) | 0x300;
}

void std::__function::__func<md::ita::AssignRenderOrder::operator()(ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>)::$_2,std::allocator<md::ita::AssignRenderOrder::operator()(ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>)::$_2>,void ()(md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::ita::AssignRenderOrder::operator()(ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>)::$_2,std::allocator<md::ita::AssignRenderOrder::operator()(ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>)::$_2>,void ()(md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427B2F8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::ita::AssignRenderOrder::operator()(ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>)::$_2,std::allocator<md::ita::AssignRenderOrder::operator()(ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>)::$_2>,void ()(md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E427B2F8;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<md::ita::AssignRenderOrder::operator()(ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>)::$_2,std::allocator<md::ita::AssignRenderOrder::operator()(ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>)::$_2>,void ()(md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &)>::operator()(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t *a5, _QWORD *a6, uint64_t *a7)
{
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;

  v9 = *(_QWORD **)result[1];
  v10 = *a4;
  v11 = *a4;
  v12 = v9[89];
  if (v11 < (v9[90] - v12) >> 3
    && ((v13 = *(_QWORD *)(v12 + 8 * v11)) != 0 ? (v14 = HIDWORD(v10) == HIDWORD(v13)) : (v14 = 0), v14))
  {
    v16 = v9[92] + 8 * v13;
    v15 = v9[93];
  }
  else
  {
    v15 = v9[93];
    v16 = v15;
  }
  v17 = *a5;
  if (v16 == v15)
    v18 = 0;
  else
    v18 = (unsigned int *)v16;
  if (v18)
  {
    result = std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::MaterialIDStorage>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::MaterialIDStorage> const&>,std::tuple<>>((uint64_t)(v9 + 81), v10, a4);
    ++result[3];
  }
  if (*((_BYTE *)v18 + 4))
  {
    v19 = 0xFFFFFFFE00;
    if (v17)
      v19 = 0;
    v20 = (*a6 >> 4);
  }
  else
  {
    v21 = 256;
    if (!v17)
      v21 = 512;
    v20 = v21 + ((unint64_t)*v18 << 9);
    v19 = (*a6 >> 4);
  }
  *a7 = v20 | v19;
  return result;
}

void std::__function::__func<md::ita::AssignRenderOrder::operator()(ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>)::$_1,std::allocator<md::ita::AssignRenderOrder::operator()(ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>)::$_1>,void ()(md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::ita::AssignRenderOrder::operator()(ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>)::$_1,std::allocator<md::ita::AssignRenderOrder::operator()(ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>)::$_1>,void ()(md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E427B2B0;
  return result;
}

void std::__function::__func<md::ita::AssignRenderOrder::operator()(ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>)::$_1,std::allocator<md::ita::AssignRenderOrder::operator()(ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>)::$_1>,void ()(md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E427B2B0;
}

void std::__function::__func<md::ita::AssignRenderOrder::operator()(ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>)::$_1,std::allocator<md::ita::AssignRenderOrder::operator()(ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>)::$_1>,void ()(md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, _QWORD *a7)
{
  *a7 = (((unint64_t)(*a5 == 0) << 8) | (*a4 << 9) | (*a6 >> 4)) + 256;
}

void std::__function::__func<md::ita::AssignRenderOrder::operator()(ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>)::$_0,std::allocator<md::ita::AssignRenderOrder::operator()(ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>)::$_0>,void ()(md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::ita::AssignRenderOrder::operator()(ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>)::$_0,std::allocator<md::ita::AssignRenderOrder::operator()(ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>)::$_0>,void ()(md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E427B268;
  return result;
}

void std::__function::__func<md::ita::AssignRenderOrder::operator()(ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>)::$_0,std::allocator<md::ita::AssignRenderOrder::operator()(ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>)::$_0>,void ()(md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E427B268;
}

void std::__function::__func<md::ita::AssignRenderOrder::operator()(ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>)::$_0,std::allocator<md::ita::AssignRenderOrder::operator()(ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>)::$_0>,void ()(md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  *a4 = 0x100000000;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ItemsPrepared>(gdc::Entity,md::ls::ItemsPrepared &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ItemsPrepared>(gdc::Entity,md::ls::ItemsPrepared &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427DD28;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ItemsPrepared>(gdc::Entity,md::ls::ItemsPrepared &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427DD28;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ItemsPrepared>(gdc::Entity,md::ls::ItemsPrepared &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::ItemsPrepared>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

_QWORD *md::ClientDrapedPolygonRenderLayer::prune(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD **v3;
  _QWORD **v4;
  _QWORD *v5;
  _QWORD **v6;
  _QWORD **v7;
  _QWORD *v8;
  _QWORD **v9;
  _QWORD **v10;
  _QWORD *v11;
  _QWORD **v12;
  _QWORD **v13;

  v1 = result[60];
  v2 = *(_QWORD **)v1;
  v4 = **(_QWORD ****)v1;
  v3 = *(_QWORD ***)(*(_QWORD *)v1 + 8);
  if (v4 != v3)
  {
    do
    {
      result = *v4;
      if (*v4)
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
        v3 = (_QWORD **)v2[1];
      }
      ++v4;
    }
    while (v4 != v3);
    v4 = (_QWORD **)*v2;
  }
  v2[1] = v4;
  v5 = *(_QWORD **)(v1 + 8);
  v7 = (_QWORD **)*v5;
  v6 = (_QWORD **)v5[1];
  if ((_QWORD **)*v5 != v6)
  {
    do
    {
      result = *v7;
      if (*v7)
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
        v6 = (_QWORD **)v5[1];
      }
      ++v7;
    }
    while (v7 != v6);
    v7 = (_QWORD **)*v5;
  }
  v5[1] = v7;
  v8 = *(_QWORD **)(v1 + 16);
  v10 = (_QWORD **)*v8;
  v9 = (_QWORD **)v8[1];
  if ((_QWORD **)*v8 != v9)
  {
    do
    {
      result = *v10;
      if (*v10)
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
        v9 = (_QWORD **)v8[1];
      }
      ++v10;
    }
    while (v10 != v9);
    v10 = (_QWORD **)*v8;
  }
  v8[1] = v10;
  v11 = *(_QWORD **)(v1 + 24);
  v13 = (_QWORD **)*v11;
  v12 = (_QWORD **)v11[1];
  if ((_QWORD **)*v11 != v12)
  {
    do
    {
      result = *v13;
      if (*v13)
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
        v12 = (_QWORD **)v11[1];
      }
      ++v13;
    }
    while (v13 != v12);
    v13 = (_QWORD **)*v11;
  }
  v11[1] = v13;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN2md16ServerDrapedMeshENS8_18ClientDrapedMeshesEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, _QWORD *a2)
{
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = (void *)a2[5];
  if (v3)
  {
    a2[6] = v3;
    operator delete(v3);
  }
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN2md16ServerDrapedMeshENS8_18ClientDrapedMeshesEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = *(std::__shared_weak_count **)(a2 + 72);
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    if (!*(_BYTE *)(a2 + 56))
      goto LABEL_12;
  }
  else
  {
LABEL_5:
    if (!*(_BYTE *)(a2 + 56))
      goto LABEL_12;
  }
  v6 = *(std::__shared_weak_count **)(a2 + 40);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
LABEL_12:
  if (*(_BYTE *)(a2 + 24))
  {
    v9 = *(std::__shared_weak_count **)(a2 + 8);
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

uint64_t **std::map<md::DrapedPolygonPlacement,md::CommandBufferLocation>::map[abi:nn180100](uint64_t **a1, int *a2, uint64_t a3)
{
  uint64_t *v4;
  int *v5;
  int *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  BOOL v11;
  int v12;
  uint64_t **v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;
  int v17;

  a1[1] = 0;
  v4 = (uint64_t *)(a1 + 1);
  a1[2] = 0;
  *a1 = (uint64_t *)(a1 + 1);
  if (a3)
  {
    v5 = a2;
    v6 = &a2[2 * a3];
    do
    {
      v7 = a1[1];
      v8 = v4;
      if (*a1 == v4)
        goto LABEL_11;
      v9 = a1[1];
      v10 = v4;
      if (v7)
      {
        do
        {
          v8 = v9;
          v9 = (uint64_t *)v9[1];
        }
        while (v9);
      }
      else
      {
        do
        {
          v8 = (uint64_t *)v10[2];
          v11 = *v8 == (_QWORD)v10;
          v10 = v8;
        }
        while (v11);
      }
      v12 = *v5;
      if (*((_DWORD *)v8 + 7) < *v5)
      {
LABEL_11:
        if (v7)
          v13 = (uint64_t **)v8;
        else
          v13 = (uint64_t **)v4;
        if (v7)
          v14 = (uint64_t **)(v8 + 1);
        else
          v14 = (uint64_t **)v4;
      }
      else
      {
        v13 = (uint64_t **)v4;
        v14 = (uint64_t **)v4;
        if (v7)
        {
          v14 = (uint64_t **)v4;
          while (1)
          {
            while (1)
            {
              v13 = (uint64_t **)v7;
              v17 = *((_DWORD *)v7 + 7);
              if (v12 >= v17)
                break;
              v7 = *v13;
              v14 = v13;
              if (!*v13)
                goto LABEL_18;
            }
            if (v17 >= v12)
              break;
            v14 = v13 + 1;
            v7 = v13[1];
            if (!v7)
              goto LABEL_18;
          }
        }
      }
      if (!*v14)
      {
LABEL_18:
        v15 = (uint64_t *)operator new(0x28uLL);
        *(uint64_t *)((char *)v15 + 28) = *(_QWORD *)v5;
        *v15 = 0;
        v15[1] = 0;
        v15[2] = (uint64_t)v13;
        *v14 = v15;
        v16 = (uint64_t *)**a1;
        if (v16)
        {
          *a1 = v16;
          v15 = *v14;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v15);
        a1[2] = (uint64_t *)((char *)a1[2] + 1);
      }
      v5 += 2;
    }
    while (v5 != v6);
  }
  return a1;
}

void sub_19FD567BC(_Unwind_Exception *a1)
{
  _QWORD **v1;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<md::ElevatedPolygonRenderResources>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDA48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::ElevatedPolygonRenderResources>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDA48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::ClientDrapedPolygonRenderLayer::ClientDrapedPolygonRenderLayer(uint64_t a1, int a2, uint64_t a3, const ggl::StandardLibrary *a4, uint64_t a5)
{
  uint64_t v10;
  int v11;
  unsigned __int16 *v12;
  uint64_t v13;
  int v14;
  char *v15;
  char *v16;
  _WORD *v17;
  int64_t v18;
  char *v19;
  char *v20;
  __int128 v21;
  uint64_t **v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  const RenderTargetFormat *v26;
  _QWORD *v27;
  int v29;
  __int16 v30;
  int v31;
  __int16 v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (a2 == 58)
  {
    v13 = *(_QWORD *)(a5 + 8);
    v11 = *(unsigned __int16 *)(v13 + 96);
    v12 = (unsigned __int16 *)(v13 + 144);
    goto LABEL_5;
  }
  if (a2 == 57)
  {
    v10 = *(_QWORD *)(a5 + 8);
    v11 = *(unsigned __int16 *)(v10 + 94);
    v12 = (unsigned __int16 *)(v10 + 142);
LABEL_5:
    v14 = *v12;
    v15 = (char *)operator new(4uLL);
    *(_DWORD *)v15 = v11 | (v14 << 16);
    v16 = v15 + 4;
    goto LABEL_7;
  }
  v15 = 0;
  v16 = 0;
LABEL_7:
  v17 = operator new(2uLL);
  *v17 = a2;
  *(_QWORD *)a1 = off_1E428C468;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v18 = v16 - v15;
  if (v18)
  {
    if (v18 < 0)
      abort();
    v19 = (char *)operator new(v18);
    *(_QWORD *)(a1 + 8) = v19;
    v20 = &v19[2 * (v18 >> 1)];
    *(_QWORD *)(a1 + 24) = v20;
    memcpy(v19, v15, v18);
    *(_QWORD *)(a1 + 16) = v20;
  }
  *(_QWORD *)&v21 = v17;
  *((_QWORD *)&v21 + 1) = v17 + 1;
  *(_WORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 34) = 49;
  *(_QWORD *)(a1 + 40) = a3;
  *(_WORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 52) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 120) = 1065353216;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 128) = a1 + 136;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = a1 + 160;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = a1 + 184;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = a1 + 208;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 224) = a1 + 232;
  *(_OWORD *)(a1 + 248) = xmmword_19FFB4CA0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 320) = v21;
  *(_QWORD *)(a1 + 336) = v17 + 1;
  *(_DWORD *)(a1 + 344) = 2;
  *(_QWORD *)a1 = off_1E429D7B8;
  *(_QWORD *)(a1 + 352) = a1 + 360;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = a1 + 384;
  *(_QWORD *)(a1 + 400) = a1 + 408;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 424) = a1 + 432;
  *(_WORD *)(a1 + 448) = a2;
  *(_WORD *)(a1 + 450) = 33;
  if (v15)
    operator delete(v15);
  *(_QWORD *)a1 = &off_1E42A78B0;
  v22 = (uint64_t **)(a1 + 456);
  if (a2 == 58)
  {
    v24 = *(_QWORD *)(a5 + 8);
    v29 = 0;
    v30 = *(_WORD *)(v24 + 96);
    v31 = 1;
    v32 = *(_WORD *)(v24 + 144);
    std::map<md::DrapedPolygonPlacement,md::CommandBufferLocation>::map[abi:nn180100](v22, &v29, 2);
  }
  else if (a2 == 57)
  {
    v23 = *(_QWORD *)(a5 + 8);
    v29 = 0;
    v30 = *(_WORD *)(v23 + 94);
    v31 = 1;
    v32 = *(_WORD *)(v23 + 142);
    std::map<md::DrapedPolygonPlacement,md::CommandBufferLocation>::map[abi:nn180100](v22, &v29, 2);
  }
  else
  {
    *(_QWORD *)(a1 + 464) = 0;
    *(_QWORD *)(a1 + 472) = 0;
    *(_QWORD *)(a1 + 456) = a1 + 464;
  }
  v25 = *(id *)(a3 + 104);
  v26 = (const RenderTargetFormat *)objc_msgSend(v25, "format");
  v27 = operator new(0x348uLL);
  v27[1] = 0;
  v27[2] = 0;
  *v27 = &off_1E42DDA48;
  *(_QWORD *)(a1 + 480) = md::ElevatedPolygonRenderResources::ElevatedPolygonRenderResources((md::ElevatedPolygonRenderResources *)(v27 + 3), a4, v26);
  *(_QWORD *)(a1 + 488) = v27;

  return a1;
}

void sub_19FD56B08(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)v1 = v2;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(v1 + 432));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(v1 + 408));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(v1 + 384));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(v1 + 360));
  md::CartographicTiledRenderLayer<md::ElevatedPolygonRenderable>::~CartographicTiledRenderLayer(v1);
  _Unwind_Resume(a1);
}

void md::RegionalResourceSetFetcher::~RegionalResourceSetFetcher(id *this)
{
  md::TiledGEOResourceFetcher::~TiledGEOResourceFetcher(this);
  JUMPOUT(0x1A1AF4E00);
}

void md::RegionalAttributionsResourceFetcher::~RegionalAttributionsResourceFetcher(id *this)
{
  md::TiledGEOResourceFetcher::~TiledGEOResourceFetcher(this);
  JUMPOUT(0x1A1AF4E00);
}

void md::RegionalAttributionsResourceFetcher::resourceTileForTile(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void md::RegionalAttributionsResourceFetcher::tileSize(uint64_t a1@<X8>)
{
  *(_BYTE *)a1 = 1;
  *(_DWORD *)(a1 + 4) = 512;
}

uint64_t md::RegionalAttributionsResourceFetcher::tileKey()
{
  GEOResourceFilterScaleForScale();
  return GEORegionalResourceTileKeyMake();
}

void std::__shared_ptr_emplace<md::RegionalResourceSetDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD460;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::RegionalResourceSetDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD460;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::RegionalResourceSetDecoder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<md::RegionalAttributionsDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD690;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::RegionalAttributionsDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD690;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::RegionalAttributionsDecoder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void md::SandboxRealisticSatelliteMapEngineMode::~SandboxRealisticSatelliteMapEngineMode(md::SandboxRealisticSatelliteMapEngineMode *this)
{
  *(_QWORD *)this = &off_1E42A1BF8;
  if (*((_BYTE *)this + 548))
    *((_BYTE *)this + 548) = 0;
  md::MapEngineMode::~MapEngineMode(this);
}

{
  *(_QWORD *)this = &off_1E42A1BF8;
  if (*((_BYTE *)this + 548))
    *((_BYTE *)this + 548) = 0;
  md::MapEngineMode::~MapEngineMode(this);
  JUMPOUT(0x1A1AF4E00);
}

void ggl::StenciledAlphaClear::ClearPipelineState::~ClearPipelineState(ggl::StenciledAlphaClear::ClearPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::StenciledAlphaClear::ClearPipelineState::ClearPipelineState(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD *a4, char a5)
{
  unsigned __int8 v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  char v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int16x8_t v20;
  int32x4_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int16x8_t v24;
  int32x4_t v25;
  int8x16_t v26;
  int32x4_t v27;
  int8x16_t v28;
  int32x4_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int16x8_t v39;
  int32x4_t v40;
  int8x16_t v41;
  int16x8_t v42;
  int32x4_t v43;
  int8x16_t v44;
  int32x4_t v45;
  int8x16_t v46;
  int32x4_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int16x8_t v62;
  int32x4_t v63;
  int8x16_t v64;
  int16x8_t v65;
  int32x4_t v66;
  int8x16_t v67;
  int32x4_t v68;
  int8x16_t v69;
  int32x4_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int16x8_t v77;
  int32x4_t v78;
  int8x16_t v79;
  int16x8_t v80;
  int32x4_t v81;
  int8x16_t v82;
  int32x4_t v83;
  int8x16_t v84;
  int32x4_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int8x16_t v89;
  _OWORD *v91;
  ggl::StenciledAlphaClearShader *v92;
  unsigned __int8 v93;
  unsigned __int8 v94;
  unsigned __int8 v95;
  unsigned __int8 v96;
  _QWORD *v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  _BYTE v101[28];

  if ((v7 & 1) == 0)
  {
    v91 = a4;
    v97 = a2;
    v98 = a3;
    a2 = v97;
    a3 = v98;
    a4 = v91;
    if ((_DWORD)v92)
    {
      if ((v93 & 1) == 0)
      {
        if ((_DWORD)v92)
        {
          if ((v95 & 1) == 0
          {
            if ((v96 & 1) == 0
            {
              ggl::MeshTyped<ggl::CommonMesh::BufferPos2>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos2Reflection;
            }
            ggl::MeshTyped<ggl::CommonMesh::BufferPos2>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2>::attributesReflection(void)::r;
            unk_1ECE43A80 = 1;
          }
          ggl::StenciledAlphaClear::ClearPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2>::typedReflection(void)::r;
          *(_QWORD *)algn_1EE58B6D8 = &ggl::StenciledAlphaClear::pipelineDataClearPipelineDeviceStructs(void)::ref;
          qword_1EE58B6E0 = 0;
          unk_1EE58B6E8 = &ggl::StenciledAlphaClear::pipelineDataClearPipelineConstantStructs(void)::ref;
          qword_1EE58B6F0 = 0;
          unk_1EE58B6F8 = 0;
        }
      }
      ggl::StenciledAlphaClear::ClearPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::StenciledAlphaClear::ClearPipelineSetup::typedReflection(void)::ref;
      ggl::StenciledAlphaClearShader::typedReflection(v92);
      qword_1EE58B680 = (uint64_t)&ggl::StenciledAlphaClearShader::typedReflection(void)::ref;
      if ((v94 & 1) == 0
      {
        ggl::StenciledAlphaClear::pipelineStateClearPipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE58B720 = 0;
        qword_1EE58B728 = (uint64_t)"";
        dword_1EE58B730 = 0;
        qword_1EE58B738 = (uint64_t)&ggl::StenciledAlphaClear::pipelineStateClearPipelineAttributeBinding_0(void)::attr;
        unk_1EE58B740 = 1;
      }
      qword_1EE58B688 = (uint64_t)&ggl::StenciledAlphaClear::pipelineStateClearPipelineAttributeStructBinding(void)::attr;
      unk_1EE58B690 = 1;
      qword_1EE58B698 = 0;
      unk_1EE58B6A0 = 0;
      qword_1EE58B6A8 = (uint64_t)&ggl::StenciledAlphaClear::pipelineStateClearPipelineDeviceStructBinding(void)::ref;
      unk_1EE58B6B0 = 0;
      qword_1EE58B6B8 = (uint64_t)&ggl::StenciledAlphaClear::pipelineStateClearPipelineConstantStructBinding(void)::ref;
      unk_1EE58B6C0 = 0;
      a4 = v91;
      a2 = v97;
      a3 = v98;
    }
  }
  v8 = *a2;
  v9 = (std::__shared_weak_count *)a2[1];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  *(_OWORD *)v101 = *(_OWORD *)a3;
  *(_OWORD *)&v101[12] = *(_OWORD *)(a3 + 12);
  v12 = *(_OWORD *)(a3 + 28);
  v13 = *(_BYTE *)(a3 + 44);
  v99 = *a4;
  v100 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &off_1E42B6760;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = &ggl::StenciledAlphaClear::ClearPipelineState::typedReflection(void)::ref;
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v9;
  if (v9)
  {
    v14 = (unint64_t *)&v9->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *(_BYTE *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 148) = 0;
  *(_QWORD *)(a1 + 140) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 180) = 0;
  *(_QWORD *)(a1 + 196) = 0;
  *(_QWORD *)(a1 + 188) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 228) = 0;
  *(_QWORD *)(a1 + 244) = 0;
  *(_QWORD *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v99;
  *(_OWORD *)(a1 + 272) = v100;
  *(_BYTE *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0x100000001;
  *(_BYTE *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v101;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v101[12];
  *(_OWORD *)(a1 + 92) = v12;
  *(_BYTE *)(a1 + 108) = v13;
  if (v9)
  {
    v16 = (unint64_t *)&v9->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *(_BYTE *)(a1 + 304) = a5;
  v18 = *(int8x16_t *)(a1 + 320);
  v19 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  v20 = vmovl_high_s8(v19);
  v21 = vmovl_s16(*(int16x4_t *)v20.i8);
  v22.i64[0] = v21.u32[0];
  v22.i64[1] = v21.u32[1];
  v23 = v22;
  v24 = vmovl_s8(*(int8x8_t *)v19.i8);
  v25 = vmovl_s16(*(int16x4_t *)v24.i8);
  *(_QWORD *)a1 = &off_1E42BAAB8;
  v22.i64[0] = v25.u32[0];
  v22.i64[1] = v25.u32[1];
  v26 = v22;
  v27 = vmovl_high_s16(v20);
  v22.i64[0] = v27.u32[0];
  v22.i64[1] = v27.u32[1];
  v28 = v22;
  v29 = vmovl_high_s16(v24);
  v22.i64[0] = v29.u32[0];
  v22.i64[1] = v29.u32[1];
  v30 = v22;
  v22.i64[0] = v21.u32[2];
  v22.i64[1] = v21.u32[3];
  v31 = v22;
  v22.i64[0] = v25.u32[2];
  v22.i64[1] = v25.u32[3];
  v32 = v22;
  v22.i64[0] = v27.u32[2];
  v22.i64[1] = v27.u32[3];
  v33 = v22;
  v22.i64[0] = v29.u32[2];
  v22.i64[1] = v29.u32[3];
  v34 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v22);
  v35 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v33);
  v36 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v32);
  v37 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v28);
  v38 = vceqzq_s8(v18);
  v39 = vmovl_high_s8(v38);
  v40 = vmovl_s16(*(int16x4_t *)v39.i8);
  v22.i64[0] = v40.u32[0];
  v22.i64[1] = v40.u32[1];
  v41 = v22;
  v42 = vmovl_s8(*(int8x8_t *)v38.i8);
  v43 = vmovl_s16(*(int16x4_t *)v42.i8);
  v22.i64[0] = v43.u32[0];
  v22.i64[1] = v43.u32[1];
  v44 = v22;
  v45 = vmovl_high_s16(v39);
  v22.i64[0] = v45.u32[0];
  v22.i64[1] = v45.u32[1];
  v46 = v22;
  v47 = vmovl_high_s16(v42);
  v22.i64[0] = v47.u32[0];
  v22.i64[1] = v47.u32[1];
  v48 = v22;
  v22.i64[0] = v40.u32[2];
  v22.i64[1] = v40.u32[3];
  v49 = v22;
  v22.i64[0] = v43.u32[2];
  v22.i64[1] = v43.u32[3];
  v50 = v22;
  v22.i64[0] = v45.u32[2];
  v22.i64[1] = v45.u32[3];
  v51 = v22;
  v22.i64[0] = v47.u32[2];
  v22.i64[1] = v47.u32[3];
  v52 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v51);
  v53 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v41), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v23));
  v54 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v44), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v26));
  v55 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v46), v37);
  v56 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v48), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v30));
  v57 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v49), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v31));
  v58 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v50), v36);
  v59 = vorrq_s8(v52, v35);
  v60 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v22), v34);
  v61 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  v62 = vmovl_s8(*(int8x8_t *)v61.i8);
  v63 = vmovl_high_s16(v62);
  v22.i64[0] = v63.i32[2];
  v22.i64[1] = v63.i32[3];
  v64 = v22;
  v65 = vmovl_high_s8(v61);
  v66 = vmovl_high_s16(v65);
  v22.i64[0] = v66.i32[2];
  v22.i64[1] = v66.i32[3];
  v67 = v22;
  v68 = vmovl_s16(*(int16x4_t *)v62.i8);
  v22.i64[0] = v68.i32[2];
  v22.i64[1] = v68.i32[3];
  v69 = v22;
  v70 = vmovl_s16(*(int16x4_t *)v65.i8);
  v22.i64[0] = v70.i32[2];
  v22.i64[1] = v70.i32[3];
  v71 = v22;
  v22.i64[0] = v63.i32[0];
  v22.i64[1] = v63.i32[1];
  v72 = v22;
  v22.i64[0] = v66.i32[0];
  v22.i64[1] = v66.i32[1];
  v73 = v22;
  v22.i64[0] = v68.i32[0];
  v22.i64[1] = v68.i32[1];
  v74 = v22;
  v22.i64[0] = v70.i32[0];
  v22.i64[1] = v70.i32[1];
  v75 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v22);
  v76 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  v77 = vmovl_high_s8(v76);
  v78 = vmovl_s16(*(int16x4_t *)v77.i8);
  v22.i64[0] = v78.i32[0];
  v22.i64[1] = v78.i32[1];
  v79 = v22;
  v80 = vmovl_s8(*(int8x8_t *)v76.i8);
  v81 = vmovl_s16(*(int16x4_t *)v80.i8);
  v22.i64[0] = v81.i32[0];
  v22.i64[1] = v81.i32[1];
  v82 = v22;
  v83 = vmovl_high_s16(v77);
  v22.i64[0] = v83.i32[0];
  v22.i64[1] = v83.i32[1];
  v84 = v22;
  v85 = vmovl_high_s16(v80);
  v22.i64[0] = v85.i32[0];
  v22.i64[1] = v85.i32[1];
  v86 = v22;
  v22.i64[0] = v78.i32[2];
  v22.i64[1] = v78.i32[3];
  v87 = v22;
  v22.i64[0] = v81.i32[2];
  v22.i64[1] = v81.i32[3];
  v88 = v22;
  v22.i64[0] = v83.i32[2];
  v22.i64[1] = v83.i32[3];
  v89 = v22;
  v22.i64[0] = v85.i32[2];
  v22.i64[1] = v85.i32[3];
  *(_QWORD *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v82), vbicq_s8((int8x16_t)xmmword_19FFB3170, v74)), v54), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v79), v75), v53)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v86), vbicq_s8((int8x16_t)xmmword_19FFB3190, v72)), v56), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v84), vbicq_s8((int8x16_t)xmmword_19FFB3180, v73)),
                                               v55))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v88), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v69)), v58), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v87), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v71)), v57)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v22), vbicq_s8((int8x16_t)xmmword_19FFB31D0, v64)), v60), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31F0, v89),
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31C0, v67)),
                                               v59)))));
  *(_BYTE *)(a1 + 288) = 1;
  return a1;
}

void ggl::StenciledAlphaClear::ClearPipelineSetup::~ClearPipelineSetup(ggl::StenciledAlphaClear::ClearPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::StenciledAlphaClear::ClearPipelineSetup::constantDataIsEnabled(ggl::StenciledAlphaClear::ClearPipelineSetup *this)
{
  return 0;
}

uint64_t ggl::StenciledAlphaClear::ClearPipelineSetup::textureIsEnabled(ggl::StenciledAlphaClear::ClearPipelineSetup *this)
{
  return 0;
}

void md::LabelScene::shouldHideLabel(uint64_t a1, unsigned int a2, uint64_t a3, int a4)
{
  uint64_t v4;
  int v5;
  md::MuninPointLabelFeature *v6;

  v4 = *(_QWORD *)(a1 + 56);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 64) - v4) >> 2) > a2)
  {
    v5 = *(unsigned __int8 *)(a1 + 52);
    if (*(_BYTE *)(a1 + 52))
    {
      if (v5 != 3 && v5 != 2 && *(_BYTE *)(v4 + 20 * a2 + 16) && a4)
      {
        if (a3)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)a3 + 48))(a3);
        }
        else
        {
          std::__throw_bad_function_call[abi:nn180100]();
          md::MuninPointLabelFeature::~MuninPointLabelFeature(v6);
        }
      }
    }
  }
}

void md::MuninPointLabelFeature::~MuninPointLabelFeature(md::MuninPointLabelFeature *this)
{
  md::PointLabelFeature::~PointLabelFeature(this);
  JUMPOUT(0x1A1AF4E00);
}

float md::MuninPointLabelFeature::minZoomRank(md::MuninPointLabelFeature *this)
{
  return 0.0;
}

float md::MuninPointLabelFeature::maxZoomRank(md::MuninPointLabelFeature *this)
{
  return 252.0;
}

uint64_t md::MuninPointLabelFeature::labelFeatureType(md::MuninPointLabelFeature *this)
{
  return 17;
}

void md::mun::MuninPointLabelLayerDataSource::~MuninPointLabelLayerDataSource(md::mun::MuninPointLabelLayerDataSource *this)
{
  std::__shared_weak_count *v2;
  md::mun::MuninPointLabelLayerDataSource *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E42AC018;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 82);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (md::mun::MuninPointLabelLayerDataSource *)*((_QWORD *)this + 80);
  if (v3 == (md::mun::MuninPointLabelLayerDataSource *)((char *)this + 616))
  {
    v4 = 4;
    v3 = (md::mun::MuninPointLabelLayerDataSource *)((char *)this + 616);
    goto LABEL_7;
  }
  if (v3)
  {
    v4 = 5;
LABEL_7:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  *((_QWORD *)this + 74) = &off_1E42B4D50;

  gdc::LayerDataSource::~LayerDataSource(this);
}

{
  std::__shared_weak_count *v2;
  md::mun::MuninPointLabelLayerDataSource *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E42AC018;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 82);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (md::mun::MuninPointLabelLayerDataSource *)*((_QWORD *)this + 80);
  if (v3 == (md::mun::MuninPointLabelLayerDataSource *)((char *)this + 616))
  {
    v4 = 4;
    v3 = (md::mun::MuninPointLabelLayerDataSource *)((char *)this + 616);
  }
  else
  {
    if (!v3)
    {
LABEL_8:
      *((_QWORD *)this + 74) = &off_1E42B4D50;

      gdc::LayerDataSource::~LayerDataSource(this);
      JUMPOUT(0x1A1AF4E00);
    }
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  goto LABEL_8;
}

void md::mun::MuninPointLabelLayerDataSource::didActivate(md::mun::MuninPointLabelLayerDataSource *this)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  md::mun::MuninPointLabelLayerDataSource *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;

  v2 = *((_QWORD *)this + 80);
  if (v2)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v2 + 48))(&v11);
    v3 = v11;
    v4 = v12;
    if (v12)
    {
      p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
      do
        v6 = __ldxr(p_shared_weak_owners);
      while (__stxr(v6 + 1, p_shared_weak_owners));
    }
    *((_QWORD *)this + 81) = v3;
    v7 = (std::__shared_weak_count *)*((_QWORD *)this + 82);
    *((_QWORD *)this + 82) = v4;
    if (v7)
    {
      std::__shared_weak_count::__release_weak(v7);
      v4 = v12;
    }
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  else
  {
    std::__throw_bad_function_call[abi:nn180100]();
    md::mun::MuninPointLabelLayerDataSource::didDeactivate(v10);
  }
}

void md::mun::MuninPointLabelLayerDataSource::didDeactivate(md::mun::MuninPointLabelLayerDataSource *this)
{
  _OWORD *v1;
  std::__shared_weak_count *v2;

  v1 = (_OWORD *)((char *)this + 648);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 82);
  *v1 = 0u;
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

void md::mun::MuninPointLabelLayerDataSource::constructRequests(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v3;
  _BYTE *v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unsigned __int8 *v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  void *v17;
  void *v18;
  unint64_t v19;
  int v20;
  int v21;
  _BOOL4 v22;
  void *v23;
  unint64_t i;
  unsigned int v26;
  unsigned int v27;
  char v28;
  unint64_t j;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  unint64_t v34;
  unint64_t v35;
  unsigned int v36;
  _BOOL4 v39;
  uint64_t v40;
  void *v41;
  uint64_t *v42;
  int v43;
  int v44;
  void *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char v49[32];
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE v55[2];
  __int16 v56;
  int v57;
  void *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char v62[32];
  unint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  int *v67;
  int *v68;
  char v69;
  int v70;
  uint64_t v71;
  int v72;
  char v73[8];

  if (a2 != a3)
  {
    v3 = a2;
    do
    {
      v4 = (_BYTE *)*v3;
      v65 = *(_BYTE *)*v3;
      gdc::LayerDataKey::LayerDataKey((uint64_t)&v66, (uint64_t)(v4 + 8));
      v69 = 0;
      if (v4[96])
      {
        v70 = *((_DWORD *)v4 + 25);
        v69 = 1;
      }
      v71 = *((_QWORD *)v4 + 13);
      v5 = *(_QWORD *)(*v3 + 16);
      v6 = *(unsigned __int8 *)(v5 + 8);
      v8 = *(_DWORD *)v5;
      v7 = *(_DWORD *)(v5 + 4);
      v9 = *v67;
      v10 = v67[1];
      v11 = v67[2];
      v12 = v67[3];
      v40 = *(_QWORD *)(*v3 + 112);
      v55[0] = 0;
      v56 = 26;
      v57 = 2147483646;
      v58 = v62;
      v59 = v62;
      v60 = v62;
      v61 = 32;
      v63 = 0;
      v43 = v9;
      geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v58, v62, (char *)&v43, (char *)&v44);
      v43 = v10;
      geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v58, v59, (char *)&v43, (char *)&v44);
      v43 = v11;
      geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v58, v59, (char *)&v43, (char *)&v44);
      v43 = v12;
      geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v58, v59, (char *)&v43, (char *)&v44);
      v13 = (unsigned __int8 *)v58;
      v14 = v59 - (_BYTE *)v58;
      if (v59 == v58)
      {
        v15 = 0;
      }
      else
      {
        v15 = 0;
        if (v14 <= 1)
          v14 = 1;
        do
        {
          v16 = *v13++;
          v15 ^= (v15 << 6) - 0x61C8864680B583EBLL + (v15 >> 2) + v16;
          --v14;
        }
        while (v14);
      }
      v63 = v15;
      v64 = v40;
      gdc::LayerDataRequest::request(*v3, (uint64_t)v55, 0);
      objc_msgSend(MEMORY[0x1E0D27420], "modernManager");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "activeTileGroup");
      v18 = (void *)objc_claimAutoreleasedReturnValue();

      v19 = 0;
      v20 = v7 >> v6;
      v21 = v8 >> v6;
      if (!v6)
      {
        v20 = v7;
        v21 = v8;
      }
      v22 = (v21 | v20) == 0;
      v41 = v18;
      v42 = v3;
      v39 = v22;
      while (v19 < objc_msgSend(v18, "regionalResourcesCount"))
      {
        objc_msgSend(v18, "regionalResourceAtIndex:", v19);
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        if (v23)
        {
          for (i = 0; i < objc_msgSend(v23, "regionsCount"); ++i)
          {
            v52 = 0;
            v53 = 0;
            v54 = 0;
            objc_msgSend(v23, "regionAtIndex:", i);
            if (HIDWORD(v54) <= v6 && v53 >= v6)
            {
              v26 = v7;
              v27 = v8;
              if (v6)
              {
                if (v6 >= (v6 - BYTE4(v54)))
                  v28 = v6 - BYTE4(v54);
                else
                  v28 = v6;
                v26 = v7 >> v28;
                v27 = v8 >> v28;
              }
              if (v27 >= HIDWORD(v53) && v27 <= v52 && v26 >= v54 && v26 <= HIDWORD(v52))
                goto LABEL_44;
            }
          }
        }
        else if (objc_msgSend(0, "regionsCount"))
        {
          v52 = 0;
          v53 = 0;
          v54 = 0;
          if (v6 || !v22)
          {
            for (j = 1; j < objc_msgSend(0, "regionsCount"); ++j)
            {
              v52 = 0;
              v53 = 0;
              v54 = 0;
              if (!v6 && v22)
                goto LABEL_44;
            }
          }
          else
          {
LABEL_44:
            v30 = v3;
            v31 = *(_QWORD *)(a1 + 584);
            v32 = *(_QWORD *)(*v30 + 112);
            LOBYTE(v43) = 0;
            HIWORD(v43) = 18;
            v44 = -1073741827;
            v45 = v49;
            v46 = v49;
            v47 = v49;
            v48 = 32;
            v50 = 0;
            v72 = v19;
            geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v45, v49, (char *)&v72, v73);
            v72 = v31;
            geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v45, v46, (char *)&v72, v73);
            v33 = (unsigned __int8 *)v45;
            v34 = v46 - (_BYTE *)v45;
            if (v46 == v45)
            {
              v35 = 0;
            }
            else
            {
              v35 = 0;
              if (v34 <= 1)
                v34 = 1;
              do
              {
                v36 = *v33++;
                v35 ^= (v35 << 6) - 0x61C8864680B583EBLL + (v35 >> 2) + v36;
                --v34;
              }
              while (v34);
            }
            v50 = v35;
            v51 = v32;
            v3 = v42;
            gdc::LayerDataRequest::request(*v42, (uint64_t)&v43, 0);
            v18 = v41;
            v22 = v39;
            if (v45 != v47)
              free(v45);
          }
        }

        ++v19;
      }

      if (v58 != v60)
        free(v58);
      if (v69)
        v69 = 0;
      if (v67 != v68)
        free(v67);
      v3 += 2;
    }
    while (v3 != a3);
  }
}

void sub_19FD57D50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,void *a40)
{
  void *v40;
  uint64_t v41;
  void *v43;

  if (a38 != a40)
    free(a38);
  if (*(_BYTE *)(v41 - 112))
    *(_BYTE *)(v41 - 112) = 0;
  v43 = *(void **)(v41 - 192);
  if (v43 != *(void **)(v41 - 176))
    free(v43);
  _Unwind_Resume(a1);
}

void md::mun::MuninPointLabelLayerDataSource::createLayerData(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  geo::codec::VectorTile **v25;
  geo::codec::VectorTile *v26;
  char v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  __int128 v35;
  int32x2_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  double v40;
  double v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *i;
  _QWORD *v46;
  __int128 v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  NSArray *v62;
  unint64_t *v63;
  unint64_t v64;
  int v65;
  md::ResourceInfo *v66;
  std::__shared_weak_count *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  _BYTE v70[4];
  uint64_t v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  __int128 v76;
  uint64_t v77;

  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(unsigned __int8 *)(v8 + 8);
  v10 = *(_DWORD *)v8;
  v11 = *(_DWORD *)(v8 + 4);
  v12 = *a3;
  v13 = a3[1];
  if (*a3 != v13)
  {
    while (*(_WORD *)v12 != 26)
    {
      v12 += 48;
      if (v12 == v13)
        goto LABEL_17;
    }
  }
  if (v12 == v13 || *(_QWORD *)(v12 + 32) != 1)
  {
LABEL_17:
    v15 = 0;
LABEL_18:
    v74 = v15;
    v75 = 0;
    if (v15)
      goto LABEL_19;
    goto LABEL_15;
  }
  v14 = *(_QWORD *)(v12 + 24);
  v15 = *(_QWORD *)(v14 + 112);
  v16 = *(std::__shared_weak_count **)(v14 + 120);
  if (!v16)
    goto LABEL_18;
  p_shared_owners = (unint64_t *)&v16->__shared_owners_;
  do
    v18 = __ldxr(p_shared_owners);
  while (__stxr(v18 + 1, p_shared_owners));
  v74 = v15;
  v75 = v16;
  v19 = (unint64_t *)&v16->__shared_owners_;
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
  do
    v21 = __ldaxr(v19);
  while (__stlxr(v21 - 1, v19));
  if (v21)
  {
    v15 = v74;
    if (!v74)
      goto LABEL_15;
LABEL_19:
    v72 = 0;
    v73 = 0;
    v23 = *(std::__shared_weak_count **)(a1 + 656);
    if (v23)
    {
      v24 = std::__shared_weak_count::lock(v23);
      v73 = v24;
      if (v24)
      {
        v72 = *(_QWORD *)(a1 + 648);
        if (v72)
        {
          v65 = v10;
          v26 = *(geo::codec::VectorTile **)(v15 + 144);
          v25 = (geo::codec::VectorTile **)(v15 + 144);
          v27 = *(_BYTE *)(geo::codec::VectorTile::key(v26) + 1);
          v28 = geo::codec::VectorTile::key(*v25);
          v29 = *(unsigned __int8 *)(v28 + 10);
          v30 = *(unsigned __int16 *)(v28 + 8);
          v31 = *(_QWORD *)v28;
          v32 = geo::codec::VectorTile::key(*v25);
          v33 = *(unsigned __int16 *)(v32 + 8) | ((unint64_t)*(unsigned __int8 *)(v32 + 10) << 16);
          v34 = *(_QWORD *)v32;
          v70[0] = -1;
          v70[1] = v27 & 0x3F;
          *((_QWORD *)&v35 + 1) = (v30 | (v29 << 16)) & 0xFFFFFF;
          *(_QWORD *)&v35 = v31;
          v36 = (int32x2_t)(v35 >> 40);
          *((_QWORD *)&v35 + 1) = v33;
          *(_QWORD *)&v35 = v34;
          v71 = *(_QWORD *)&vzip1_s32(v36, (int32x2_t)(v35 >> 14)) & 0x3FFFFFF03FFFFFFLL;
          v37 = (char *)operator new(0x170uLL);
          *(_OWORD *)(v37 + 8) = 0u;
          *(_QWORD *)v37 = &off_1E42DDF88;
          v76 = 0u;
          md::LabelTile::LabelTile((unsigned __int8 *)v37 + 24, (uint64_t)v70, (uint64_t)v25, 8u, &v72, 0, &v76, 0);
          v68 = v38;
          v69 = (std::__shared_weak_count *)v37;
          v39 = (char *)operator new(0x70uLL);
          v40 = 1.0 / (double)(1 << v9);
          v41 = v40 * (double)((1 << v9) + ~v11);
          *((_QWORD *)v39 + 1) = 0;
          *((_QWORD *)v39 + 2) = 0;
          *(_QWORD *)v39 = &off_1E42DAE88;
          v42 = v40 * (double)v65;
          *(_OWORD *)(v39 + 40) = 0u;
          *(_OWORD *)(v39 + 56) = 0u;
          *(_OWORD *)(v39 + 24) = 0u;
          *((_DWORD *)v39 + 18) = v9;
          *((double *)v39 + 10) = v42;
          *((double *)v39 + 11) = v41;
          *((double *)v39 + 12) = v42 + v40;
          *((double *)v39 + 13) = v41 + v40;
          v66 = (md::ResourceInfo *)(v39 + 24);
          v67 = (std::__shared_weak_count *)v39;
          v43 = *a3;
          v44 = a3[1];
          if (*a3 != v44)
          {
            while (*(_WORD *)v43 != 18)
            {
              v43 += 48;
              if (v43 == v44)
                goto LABEL_31;
            }
          }
          if (v43 != v44)
          {
            for (i = *(_QWORD **)(v43 + 24); i; i = (_QWORD *)*i)
            {
              v58 = i[14];
              v59 = (std::__shared_weak_count *)i[15];
              *(_QWORD *)&v76 = v58;
              *((_QWORD *)&v76 + 1) = v59;
              if (v59)
              {
                v60 = (unint64_t *)&v59->__shared_owners_;
                do
                  v61 = __ldxr(v60);
                while (__stxr(v61 + 1, v60));
              }
              v62 = (NSArray *)*(id *)(v58 + 144);
              md::ResourceInfo::setResourceNames(v66, v62);

              if (v59)
              {
                v63 = (unint64_t *)&v59->__shared_owners_;
                do
                  v64 = __ldaxr(v63);
                while (__stlxr(v64 - 1, v63));
                if (!v64)
                {
                  ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                  std::__shared_weak_count::__release_weak(v59);
                }
              }
            }
          }
LABEL_31:
          v76 = 0uLL;
          v77 = 0;
          v46 = operator new(0x308uLL);
          v46[1] = 0;
          v46[2] = 0;
          *v46 = &off_1E42DC200;
          *(_QWORD *)&v47 = md::MuninLabelLayerData::MuninLabelLayerData(v46 + 3, a2, &v68, &v66, (uint64_t)&v76);
          *((_QWORD *)&v47 + 1) = v46;
          *(_OWORD *)a4 = v47;
          v48 = v67;
          if (v67)
          {
            v49 = (unint64_t *)&v67->__shared_owners_;
            do
              v50 = __ldaxr(v49);
            while (__stlxr(v50 - 1, v49));
            if (!v50)
            {
              ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
              std::__shared_weak_count::__release_weak(v48);
            }
          }
          v51 = v69;
          if (v69)
          {
            v52 = (unint64_t *)&v69->__shared_owners_;
            do
              v53 = __ldaxr(v52);
            while (__stlxr(v53 - 1, v52));
            if (!v53)
            {
              ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
              std::__shared_weak_count::__release_weak(v51);
            }
          }
          v24 = v73;
          if (v73)
          {
LABEL_42:
            v54 = (unint64_t *)&v24->__shared_owners_;
            do
              v55 = __ldaxr(v54);
            while (__stlxr(v55 - 1, v54));
            if (!v55)
            {
              ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
              std::__shared_weak_count::__release_weak(v24);
              v22 = v75;
              if (!v75)
                return;
              goto LABEL_46;
            }
          }
LABEL_45:
          v22 = v75;
          if (!v75)
            return;
          goto LABEL_46;
        }
      }
    }
    else
    {
      v24 = 0;
    }
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    if (v24)
      goto LABEL_42;
    goto LABEL_45;
  }
  ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
  std::__shared_weak_count::__release_weak(v16);
  v15 = v74;
  if (v74)
    goto LABEL_19;
LABEL_15:
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  v22 = v75;
  if (!v75)
    return;
LABEL_46:
  v56 = (unint64_t *)&v22->__shared_owners_;
  do
    v57 = __ldaxr(v56);
  while (__stlxr(v57 - 1, v56));
  if (!v57)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
}

void sub_19FD58258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22)
{
  std::__shared_weak_count *v22;
  void *v24;

  std::__shared_weak_count::~__shared_weak_count(v22);
  operator delete(v24);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void md::ARUpDirectionUpdatesLogic::~ARUpDirectionUpdatesLogic(md::ARUpDirectionUpdatesLogic *this)
{
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
}

{
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
  JUMPOUT(0x1A1AF4E00);
}

void md::ARUpDirectionUpdatesLogic::runBeforeLayout(uint64_t a1)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t *i;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v14;
  _QWORD *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  _DWORD *v22;
  _DWORD *v23;
  _DWORD *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  _QWORD *j;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;

  v2 = gdc::Registry::storage<arComponents::UpRelativeTranslationToApply>(*(_QWORD *)(a1 + 120));
  v3 = *(unint64_t **)(v2 + 56);
  for (i = *(unint64_t **)(v2 + 64); v3 != i; ++v3)
  {
    v5 = *v3;
    v6 = (_QWORD *)gdc::Registry::storage<arComponents::UpDirection>(*(_QWORD *)(a1 + 120));
    v7 = v6[4];
    if (v5 >> 39 < (v6[5] - v7) >> 3)
    {
      v8 = *(_QWORD *)(v7 + 8 * (v5 >> 39));
      if (v8)
      {
        v9 = *(unsigned __int16 *)(v8 + 2 * (HIDWORD(v5) & 0x7F));
        v11 = v6[7];
        v10 = v6[8];
        if (v9 < (v10 - v11) >> 3)
        {
          v12 = v11 + 8 * v9;
          if (v12 != v10 && *(_DWORD *)(v12 + 4) == HIDWORD(v5))
            continue;
        }
      }
    }
    v14 = (uint64_t *)gdc::Registry::storage<arComponents::UpDirection>(*(_QWORD *)(a1 + 120));
    v35 = v5;
    v15 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v14 + 4, (uint64_t)&v35);
    if ((v16 & 1) != 0)
    {
      v22 = (_DWORD *)v14[11];
      v21 = v14[12];
      if ((unint64_t)v22 >= v21)
      {
        v24 = (_DWORD *)v14[10];
        v25 = 0xAAAAAAAAAAAAAAABLL * (v22 - v24) + 1;
        if (v25 > 0x1555555555555555)
          goto LABEL_41;
        v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - (_QWORD)v24) >> 2);
        if (2 * v26 > v25)
          v25 = 2 * v26;
        if (v26 >= 0xAAAAAAAAAAAAAAALL)
          v27 = 0x1555555555555555;
        else
          v27 = v25;
        if (v27)
        {
          if (v27 > 0x1555555555555555)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v28 = (char *)operator new(12 * v27);
        }
        else
        {
          v28 = 0;
        }
        v29 = &v28[4 * (v22 - v24)];
        *((_DWORD *)v29 + 2) = 1065353216;
        *(_QWORD *)v29 = 0;
        v30 = (uint64_t)v29;
        if (v22 != v24)
        {
          do
          {
            v31 = *(_QWORD *)(v22 - 3);
            v22 -= 3;
            v32 = v22[2];
            *(_QWORD *)(v30 - 12) = v31;
            v30 -= 12;
            *(_DWORD *)(v30 + 8) = v32;
          }
          while (v22 != v24);
          v22 = (_DWORD *)v14[10];
        }
        v23 = v29 + 12;
        v14[10] = v30;
        v14[11] = (uint64_t)(v29 + 12);
        v14[12] = (uint64_t)&v28[12 * v27];
        if (v22)
          operator delete(v22);
      }
      else
      {
        v22[2] = 1065353216;
        *(_QWORD *)v22 = 0;
        v23 = v22 + 3;
      }
      v14[11] = (uint64_t)v23;
      v18 = v14[31];
    }
    else
    {
      v17 = v14[10] + 12 * (((uint64_t)v15 - v14[7]) >> 3);
      *(_QWORD *)v17 = 0;
      *(_DWORD *)(v17 + 8) = 1065353216;
      v18 = v14[31];
      if (v17 != v14[11])
      {
        v19 = (_QWORD *)v14[16];
        if (v19)
        {
          while (1)
          {
            v37 = (uint64_t *)&v35;
            v38 = 1;
            v36 = v18;
            v20 = v19[6];
            if (!v20)
              break;
            (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v20 + 48))(v20, &v36, &v37);
            v19 = (_QWORD *)*v19;
            if (!v19)
              goto LABEL_3;
          }
LABEL_40:
          std::__throw_bad_function_call[abi:nn180100]();
LABEL_41:
          abort();
        }
        continue;
      }
    }
    for (j = (_QWORD *)v14[22]; j; j = (_QWORD *)*j)
    {
      v37 = (uint64_t *)&v35;
      v38 = 1;
      v36 = v18;
      v34 = j[6];
      if (!v34)
        goto LABEL_40;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v34 + 48))(v34, &v36, &v37);
    }
LABEL_3:
    ;
  }
}

uint64_t gdc::Registry::storage<arComponents::UpDirection>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x7D08E683B5523498;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x7D08E683B5523498;
      if (*(_QWORD *)&v3 <= 0x7D08E683B5523498uLL)
        v5 = 0x7D08E683B5523498uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x7D08E683B5523498;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x7D08E683B5523498)
            {
              if (v7[2] == 0x7D08E683B5523498)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x7D08E683B5523498)
          {
            if (v7[2] == 0x7D08E683B5523498)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::UpDirection]";
  *(_QWORD *)(v11 + 24) = 25;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B17E8;
  *(_QWORD *)(v11 + 8) = 0x7D08E683B5523498;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x7D08E683B5523498uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x7D08E683B5523498;
  v15[1] = "arComponents::UpDirection]";
  v15[2] = 25;
  gdc::Registry::_registerStorageDataSignals(a1, 0x7D08E683B5523498, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19FD5880C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<arComponents::UpDirection>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::UpDirection>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = (_DWORD *)(a1[10] + 12 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  v16 = *(_DWORD *)(v15 - 12);
  v15 -= 12;
  *v14 = v16;
  v14[1] = *(_DWORD *)(v15 + 4);
  v14[2] = *(_DWORD *)(v15 + 8);
  a1[11] = v15;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::UpDirection>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<arComponents::UpDirection>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void sub_19FD58CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25)
{
  void *v25;

  if (a24 < 0)
    (*(void (**)(void))(*(_QWORD *)a25 + 40))();

  _Unwind_Resume(a1);
}

void md::SingleGEOResourceLayerDataSource::createDebugNode(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  const std::string::value_type *v5;
  uint64_t v6;
  std::string __p;
  int v8;
  char v9[32];

  gdc::LayerDataSource::createDebugNode((_QWORD *)a1, a2);
  v9[23] = 17;
  strcpy(v9, "gdc::ResourceType");
  v4 = *(unsigned __int16 *)(a1 + 584);
  if (v4 > 0x35)
    v5 = "<Invalid>";
  else
    v5 = off_1E42F75C0[v4];
  memset(&__p, 0, sizeof(__p));
  v8 = 4;
  std::string::__assign_external(&__p, v5);
  gdc::DebugTreeNode::addProperty(a2, (uint64_t)v9, (uint64_t)&v6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

uint64_t md::SingleGEOResourceLayerDataSource::fallbackSettings(md::SingleGEOResourceLayerDataSource *this)
{
  return *((unsigned __int16 *)this + 348) | 0x10000u;
}

uint64_t md::SingleGEOResourceLayerDataSource::descriptionForKey@<X0>(const gdc::LayerDataRequestKey *a1@<X1>, _BYTE *a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  std::ios_base *v10;
  uint64_t v11;
  unint64_t v12;
  const char *v13;
  size_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  size_t v18;
  unint64_t v19;
  const void **v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[3];
  uint64_t v29;
  unint64_t v30;
  void *__p[2];
  __int128 v32;
  int v33;
  uint64_t v34[20];

  v5 = MEMORY[0x1E0DE4FE0];
  v6 = MEMORY[0x1E0DE4FE0] + 64;
  v7 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v34[0] = MEMORY[0x1E0DE4FE0] + 64;
  v26 = v8;
  *(uint64_t *)((char *)&v26 + *(_QWORD *)(v8 - 24)) = v9;
  v10 = (std::ios_base *)((char *)&v26 + *(_QWORD *)(v26 - 24));
  std::ios_base::init(v10, &v27);
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  v26 = v5 + 24;
  v34[0] = v6;
  std::streambuf::basic_streambuf();
  v11 = MEMORY[0x1E0DE4FB8];
  v27 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v32 = 0u;
  v33 = 16;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v26, (uint64_t)"gdc::LayerDataRequestKey<Type:", 30);
  v12 = *((unsigned __int16 *)a1 + 4);
  if (v12 > 0x51)
    v13 = "<Invalid>";
  else
    v13 = off_1E42F61C0[v12];
  v14 = strlen(v13);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v26, (uint64_t)v13, v14);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v26, (uint64_t)", Tile: ", 8);
  v15 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v15, (uint64_t)".", 1);
  v16 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v16, (uint64_t)".", 1);
  v17 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v17, (uint64_t)">", 1);
  if ((v33 & 0x10) != 0)
  {
    v19 = *((_QWORD *)&v32 + 1);
    if (*((_QWORD *)&v32 + 1) < v30)
    {
      *((_QWORD *)&v32 + 1) = v30;
      v19 = v30;
    }
    v20 = (const void **)&v29;
  }
  else
  {
    if ((v33 & 8) == 0)
    {
      v18 = 0;
      a2[23] = 0;
      goto LABEL_19;
    }
    v20 = (const void **)v28;
    v19 = v28[2];
  }
  v21 = *v20;
  v18 = v19 - (_QWORD)*v20;
  if (v18 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v18 >= 0x17)
  {
    v22 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v22 = v18 | 7;
    v23 = v22 + 1;
    v24 = operator new(v22 + 1);
    *((_QWORD *)a2 + 1) = v18;
    *((_QWORD *)a2 + 2) = v23 | 0x8000000000000000;
    *(_QWORD *)a2 = v24;
    a2 = v24;
    goto LABEL_18;
  }
  a2[23] = v18;
  if (v18)
LABEL_18:
    memmove(a2, v21, v18);
LABEL_19:
  a2[v18] = 0;
  v26 = *v7;
  *(uint64_t *)((char *)&v26 + *(_QWORD *)(v26 - 24)) = v7[3];
  v27 = v11 + 16;
  if (SBYTE7(v32) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AF4D64](v34);
}

void sub_19FD59100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::ostream::~ostream();
  MEMORY[0x1A1AF4D64](a10);
  _Unwind_Resume(a1);
}

void sub_19FD59128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<geo::QuadTile,gdc::LayerDataKey,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<std::pair<geo::QuadTile const,gdc::LayerDataKey>>>::~unordered_map[abi:nn180100](uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  void *v6;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = (void *)v2[6];
      if (v6 != (void *)v2[8])
        free(v6);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<geo::QuadTile,gdc::LayerDataKey>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<geo::QuadTile,gdc::LayerDataKey>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  _QWORD *v2;
  void *v3;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (void *)v2[6];
      if (v3 != (void *)v2[8])
        free(v3);
    }
    operator delete(v2);
  }
  return a1;
}

void md::SingleGEOResourceLayerDataSource::~SingleGEOResourceLayerDataSource(md::SingleGEOResourceLayerDataSource *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = off_1E42A9120;
  v2 = (void *)*((_QWORD *)this + 91);
  if (v2)
  {
    *((_QWORD *)this + 92) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 88);
  if (v3)
  {
    *((_QWORD *)this + 89) = v3;
    operator delete(v3);
  }
  geo::Pool<gdc::FallbackNode>::disposeElements((uint64_t)this + 648);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 82));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 78));
  if (*((_BYTE *)this + 592))
    *((_BYTE *)this + 592) = 0;
  gdc::LayerDataSource::~LayerDataSource(this);
}

void sub_19FD59268(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v1 + 656));
  _Unwind_Resume(a1);
}

void md::GEOVectorTileResourceFetcher::~GEOVectorTileResourceFetcher(id *this)
{
  md::TiledGEOResourceFetcher::~TiledGEOResourceFetcher(this);
  JUMPOUT(0x1A1AF4E00);
}

void extractCustomImageData(std::string *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD v13[3];
  _QWORD *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (objc_msgSend(v3, "type") == 3)
  {
    v4 = v3;
    objc_msgSend(v4, "customImageKey");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v5
      || (objc_msgSend(v4, "imageProvider"),
          v6 = (void *)objc_claimAutoreleasedReturnValue(),
          v6,
          v5,
          !v6))
    {
      a1->__r_.__value_.__r.__words[0] = 0;
      a1->__r_.__value_.__l.__size_ = 0;
      a1->__r_.__value_.__r.__words[2] = 0;
      a1[2].__r_.__value_.__r.__words[0] = 0;
LABEL_12:

      goto LABEL_13;
    }
    a1->__r_.__value_.__r.__words[0] = 0;
    a1->__r_.__value_.__l.__size_ = 0;
    a1->__r_.__value_.__r.__words[2] = 0;
    a1[2].__r_.__value_.__r.__words[0] = 0;
    objc_msgSend(v4, "imageProvider");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "customImageKey");
    v8 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    std::string::__assign_external(a1, (const std::string::value_type *)objc_msgSend(v8, "UTF8String"));
    v9 = v7;
    v10 = v8;
    v13[0] = &off_1E42C74C0;
    v13[1] = v9;
    v13[2] = v10;
    v14 = v13;
    std::__function::__value_func<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::swap[abi:nn180100](v13, a1[1].__r_.__value_.__r.__words);
    v11 = v14;
    if (v14 == v13)
    {
      v12 = 4;
      v11 = v13;
    }
    else
    {
      if (!v14)
      {
LABEL_11:

        goto LABEL_12;
      }
      v12 = 5;
    }
    (*(void (**)(void))(*v11 + 8 * v12))();
    goto LABEL_11;
  }
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1[2].__r_.__value_.__r.__words[0] = 0;
LABEL_13:

}

void sub_19FD59418(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  md::CustomImageData *v3;
  void *v4;

  md::CustomImageData::~CustomImageData(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<extractCustomImageData(VKRouteWaypointInfo *)::$_0,std::allocator<extractCustomImageData(VKRouteWaypointInfo *)::$_0>,CGImage * ()(gm::Matrix<unsigned int,2,1>,float)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<extractCustomImageData(VKRouteWaypointInfo *)::$_0,std::allocator<extractCustomImageData(VKRouteWaypointInfo *)::$_0>,CGImage * ()(gm::Matrix<unsigned int,2,1>,float)>::~__func(uint64_t a1)
{

  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<extractCustomImageData(VKRouteWaypointInfo *)::$_0,std::allocator<extractCustomImageData(VKRouteWaypointInfo *)::$_0>,CGImage * ()(gm::Matrix<unsigned int,2,1>,float)>::__clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x18uLL);
  *v2 = &off_1E42C74C0;
  v2[1] = *(id *)(a1 + 8);
  v2[2] = *(id *)(a1 + 16);
  return v2;
}

id std::__function::__func<extractCustomImageData(VKRouteWaypointInfo *)::$_0,std::allocator<extractCustomImageData(VKRouteWaypointInfo *)::$_0>,CGImage * ()(gm::Matrix<unsigned int,2,1>,float)>::__clone(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = &off_1E42C74C0;
  a2[1] = *(id *)(a1 + 8);
  result = *(id *)(a1 + 16);
  a2[2] = result;
  return result;
}

void std::__function::__func<extractCustomImageData(VKRouteWaypointInfo *)::$_0,std::allocator<extractCustomImageData(VKRouteWaypointInfo *)::$_0>,CGImage * ()(gm::Matrix<unsigned int,2,1>,float)>::destroy(uint64_t a1)
{

}

void std::__function::__func<extractCustomImageData(VKRouteWaypointInfo *)::$_0,std::allocator<extractCustomImageData(VKRouteWaypointInfo *)::$_0>,CGImage * ()(gm::Matrix<unsigned int,2,1>,float)>::destroy_deallocate(id *a1)
{

  operator delete(a1);
}

uint64_t std::__function::__func<extractCustomImageData(VKRouteWaypointInfo *)::$_0,std::allocator<extractCustomImageData(VKRouteWaypointInfo *)::$_0>,CGImage * ()(gm::Matrix<unsigned int,2,1>,float)>::operator()(uint64_t a1, _DWORD *a2, _DWORD *a3, double a4, double a5, double a6)
{
  LODWORD(a6) = *a3;
  LODWORD(a4) = *a2;
  LODWORD(a5) = a2[1];
  return objc_msgSend(*(id *)(a1 + 8), "imageForCustomImageKey:suggestedSize:contentScale:", *(_QWORD *)(a1 + 16), (double)*(unint64_t *)&a4, (double)*(unint64_t *)&a5, a6);
}

void md::WaypointStore::~WaypointStore(md::WaypointStore *this)
{
  md::WaypointStore::~WaypointStore(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  *(_QWORD *)this = &off_1E428ECD0;
  v2 = *((_QWORD *)this + 31);
  if (v2)
  {
    v3 = *((_QWORD *)this + 32);
    v4 = *((_QWORD *)this + 31);
    if (v3 != v2)
    {
      do
      {
        v5 = *(_QWORD *)(v3 - 8);
        *(_QWORD *)(v3 - 8) = 0;
        if (v5)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 8))(v5, v4);
        v6 = *(_QWORD *)(v3 - 16);
        *(_QWORD *)(v3 - 16) = 0;
        if (v6)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 8))(v6, v4);
        v7 = *(_QWORD *)(v3 - 24);
        *(_QWORD *)(v3 - 24) = 0;
        if (v7)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 8))(v7, v4);

        v3 -= 32;
      }
      while (v3 != v2);
      v4 = *((_QWORD *)this + 31);
    }
    *((_QWORD *)this + 32) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 34) + 40))(*((_QWORD *)this + 34), v4, *((_QWORD *)this + 33) - v4);
  }
  v8 = *((_QWORD *)this + 27);
  if (v8)
  {
    *((_QWORD *)this + 28) = v8;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 30) + 40))(*((_QWORD *)this + 30), v8, *((_QWORD *)this + 29) - v8);
  }
  v9 = *((_QWORD *)this + 23);
  if (v9)
  {
    *((_QWORD *)this + 24) = v9;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 26) + 40))(*((_QWORD *)this + 26), v9, *((_QWORD *)this + 25) - v9);
  }
  v10 = *((_QWORD *)this + 19);
  if (v10)
  {
    *((_QWORD *)this + 20) = v10;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 22) + 40))(*((_QWORD *)this + 22), v10, *((_QWORD *)this + 21) - v10);
  }
  v11 = (_QWORD *)*((_QWORD *)this + 15);
  if (v11)
  {
    v12 = (_QWORD *)*((_QWORD *)this + 16);
    v13 = *((_QWORD *)this + 15);
    if (v12 != v11)
    {
      do
      {
        v15 = *--v12;
        v14 = v15;
        *v12 = 0;
        if (v15)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 8))(v14, v13);
      }
      while (v12 != v11);
      v13 = *((_QWORD *)this + 15);
    }
    *((_QWORD *)this + 16) = v11;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 18) + 40))(*((_QWORD *)this + 18), v13, *((_QWORD *)this + 17) - v13);
  }
  v16 = *((_QWORD *)this + 11);
  if (v16)
  {
    v17 = *((_QWORD *)this + 12);
    v18 = *((_QWORD *)this + 11);
    if (v17 != v16)
    {
      do
      {
        v19 = *(_QWORD *)(v17 - 8);
        *(_QWORD *)(v17 - 8) = 0;
        if (v19)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 8))(v19, v18);
        v20 = *(_QWORD *)(v17 - 16);
        *(_QWORD *)(v17 - 16) = 0;
        if (v20)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 8))(v20, v18);
        v21 = *(_QWORD *)(v17 - 24);
        *(_QWORD *)(v17 - 24) = 0;
        if (v21)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 8))(v21, v18);

        v17 -= 32;
      }
      while (v17 != v16);
      v18 = *((_QWORD *)this + 11);
    }
    *((_QWORD *)this + 12) = v16;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 14) + 40))(*((_QWORD *)this + 14), v18, *((_QWORD *)this + 13) - v18);
  }
  std::__tree<std::__value_type<VKRouteInfo * {__strong},md::PolylineOverlayInfo>,std::__map_value_compare<VKRouteInfo * {__strong},std::__value_type<VKRouteInfo * {__strong},md::PolylineOverlayInfo>,std::less<VKRouteInfo * {__strong}>,true>,geo::StdAllocator<std::__value_type<VKRouteInfo * {__strong},md::PolylineOverlayInfo>,mdm::Allocator>>::destroy((uint64_t)this + 56, *((_QWORD *)this + 8));

  v22 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v22)
    std::__shared_weak_count::__release_weak(v22);
}

void md::ClusterStore::labelMarkerForClusterNode(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void md::WaypointStore::updateWaypointsForSelection(md::WaypointStore *this)
{
  _BOOL8 v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE v10[128];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 48))
    v1 = *((_BYTE *)this + 49) != 0;
  else
    v1 = 0;
  v8 = 0u;
  v9 = 0u;
  v6 = 0u;
  v7 = 0u;
  objc_msgSend(*((id *)this + 3), "waypoints", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
  if (v3)
  {
    v4 = *(_QWORD *)v7;
    do
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v7 != v4)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v6 + 1) + 8 * i), "setIsOnSelectedRoute:", v1);
      }
      v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
    }
    while (v3);
  }

}

void sub_19FD59974(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::vector<md::WaypointStoreWaypointData,geo::StdAllocator<md::WaypointStoreWaypointData,mdm::Allocator>>::__append(uint64_t a1, unint64_t a2)
{
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  char *v21;
  BOOL v22;
  BOOL v23;
  uint64_t v25;
  const double *v26;
  double *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float64x2x4_t v37;

  v4 = *(_OWORD **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  if (a2 <= (v5 - (uint64_t)v4) >> 5)
  {
    if (a2)
    {
      v11 = 32 * a2;
      v12 = &v4[2 * a2];
      do
      {
        if (v4)
        {
          *v4 = 0uLL;
          v4[1] = 0uLL;
        }
        v4 += 2;
        v11 -= 32;
      }
      while (v11);
      v4 = v12;
    }
    *(_QWORD *)(a1 + 8) = v4;
  }
  else
  {
    v6 = (uint64_t)v4 - *(_QWORD *)a1;
    v7 = (v6 >> 5) + a2;
    if (v7 >> 59)
      abort();
    v8 = v5 - *(_QWORD *)a1;
    if (v8 >> 4 > v7)
      v7 = v8 >> 4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
      v9 = 0x7FFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
      v10 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), 32 * v9, 8);
    else
      v10 = 0;
    v13 = v10 + 32 * (v6 >> 5);
    v14 = 32 * a2;
    v15 = v13 + 32 * a2;
    v16 = (_OWORD *)v13;
    do
    {
      if (v16)
      {
        *v16 = 0uLL;
        v16[1] = 0uLL;
      }
      v16 += 2;
      v14 -= 32;
    }
    while (v14);
    v17 = v10 + 32 * v9;
    v18 = *(_QWORD **)a1;
    v19 = *(_QWORD **)(a1 + 8);
    if (v19 == *(_QWORD **)a1)
    {
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v15;
      v33 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v17;
      if (v19)
LABEL_42:
        (*(void (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v19, v33 - (_QWORD)v19);
    }
    else
    {
      v20 = (unint64_t)v19 - *(_QWORD *)a1 - 32;
      if (v20 <= 0xDF)
        goto LABEL_55;
      v21 = (char *)v19 - (v20 & 0xFFFFFFFFFFFFFFE0);
      v22 = (unint64_t)(v21 - 24) >= v13 || v10 + v6 - 24 - (v20 & 0xFFFFFFFFFFFFFFE0) >= (unint64_t)v19;
      v23 = !v22;
      if (v6 - (v20 & 0xFFFFFFFFFFFFFFE0) + v10 - 32 < (unint64_t)(v19 - 3)
        && (unint64_t)(v21 - 32) < v10 + v6 - 24)
      {
        goto LABEL_55;
      }
      if (v23)
        goto LABEL_55;
      v25 = (v20 >> 5) + 1;
      v26 = (const double *)(v19 - 8);
      v27 = (double *)(v13 - 64);
      v28 = v25 & 0xFFFFFFFFFFFFFFELL;
      do
      {
        v37 = vld4q_f64(v26);
        *((_OWORD *)v26 + 2) = 0uLL;
        *((_OWORD *)v26 + 3) = 0uLL;
        *(_OWORD *)v26 = 0uLL;
        *((_OWORD *)v26 + 1) = 0uLL;
        v26 -= 8;
        vst4q_f64(v27, v37);
        v27 -= 8;
        v28 -= 2;
      }
      while (v28);
      v13 -= 32 * (v25 & 0xFFFFFFFFFFFFFFELL);
      v19 -= 4 * (v25 & 0xFFFFFFFFFFFFFFELL);
      if (v25 != (v25 & 0xFFFFFFFFFFFFFFELL))
      {
LABEL_55:
        do
        {
          v29 = *((_OWORD *)v19 - 2);
          v19 -= 4;
          *v19 = 0;
          v19[1] = 0;
          *(_OWORD *)(v13 - 32) = v29;
          v13 -= 32;
          v30 = v19[2];
          v19[2] = 0;
          *(_QWORD *)(v13 + 16) = v30;
          v31 = v19[3];
          v19[3] = 0;
          *(_QWORD *)(v13 + 24) = v31;
        }
        while (v19 != v18);
      }
      v19 = *(_QWORD **)a1;
      v32 = *(_QWORD **)(a1 + 8);
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v15;
      v33 = *(_QWORD *)(a1 + 16);
      for (*(_QWORD *)(a1 + 16) = v17; v32 != v19; v32 -= 4)
      {
        v34 = *(v32 - 1);
        *(v32 - 1) = 0;
        if (v34)
          (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
        v35 = *(v32 - 2);
        *(v32 - 2) = 0;
        if (v35)
          (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
        v36 = *(v32 - 3);
        *(v32 - 3) = 0;
        if (v36)
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);

      }
      if (v19)
        goto LABEL_42;
    }
  }
}

void md::WaypointStore::buildFeatureForWaypoint(uint64_t *a1, uint64_t a2, void *a3, int a4)
{
  id v7;
  _QWORD *v8;
  void *v9;
  int v10;
  void *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  double v18;
  __double2 v19;
  double v20;
  __double2 v21;
  long double v22;
  long double v23;
  float64x2_t v24;
  float v30;
  VKRouteWaypointInfo *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  float64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  std::string __p;
  _BYTE v51[24];
  _BYTE *v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = operator new(0x1D8uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E42DD188;
  *a1 = (uint64_t)md::LabelExternalPointFeature::LabelExternalPointFeature((md::LabelExternalPointFeature *)(v8 + 3));
  a1[1] = (uint64_t)v8;
  v8[26] = objc_msgSend(v7, "muid");
  objc_msgSend(v7, "waypoint");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "hasClientFeatureID");

  if (v10)
  {
    objc_msgSend(v7, "waypoint");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v8[6] = objc_msgSend(v11, "clientFeatureID");

  }
  if (a4 || (objc_msgSend(v7, "coordinate"), objc_msgSend(v7, "routeCoordinate"), GEOCalculateDistance(), v12 > 100.0))
    objc_msgSend(v7, "routeCoordinate");
  else
    objc_msgSend(v7, "coordinate");
  v16 = v15;
  v17 = v8[27];
  if (v8[28] != v17)
  {
    if (fabs(v13) <= 85.0511169)
    {
      v47 = v14;
      v22 = tan(v13 * 0.00872664626 + 0.785398163);
      v23 = log(v22);
      v24.f64[0] = v47;
      v24.f64[1] = v23;
      __asm { FMOV            V1.2D, #0.5 }
      *(float64x2_t *)(v17 + 24) = vmlaq_f64(_Q1, (float64x2_t)xmmword_19FFB32D0, v24);
      *(_WORD *)(v17 + 45) = 257;
    }
    else
    {
      v18 = v14 * 0.0174532925;
      v19 = __sincos_stret(v13 * 0.0174532925);
      v20 = 6378137.0 / sqrt(v19.__sinval * v19.__sinval * -0.00669437999 + 1.0);
      v21 = __sincos_stret(v18);
      *(double *)v17 = v20 * v19.__cosval * v21.__cosval;
      *(double *)(v17 + 8) = v20 * v19.__cosval * v21.__sinval;
      *(double *)(v17 + 16) = v19.__sinval * 0.99330562 * v20;
      *(_BYTE *)(v17 + 44) = 1;
    }
    if (v16 != 1.79769313e308)
    {
      v30 = v16;
      *(float *)(v17 + 40) = v30;
    }
  }
  md::WaypointStore::styleAttributesForWaypoint(&v48, a2, v7, a4);
  v32 = v48;
  v33 = v49;
  v48 = 0;
  v49 = 0;
  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v35 = __ldxr(p_shared_owners);
    while (__stxr(v35 + 1, p_shared_owners));
  }
  v36 = (std::__shared_weak_count *)v8[8];
  v8[7] = v32;
  v8[8] = v33;
  if (v36)
  {
    v37 = (unint64_t *)&v36->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  if (v33)
  {
    v39 = (unint64_t *)&v33->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v41 = v49;
  if (v49)
  {
    v42 = (unint64_t *)&v49->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = *a1;
  md::WaypointStore::updateExternalFeatureText((int64x2_t *)*a1, (md::LabelExternalPointFeature *)v7, v31);
  extractCustomImageData(&__p, v7);
  md::LabelExternalFeature::setCustomImageData(v44, &__p);
  v45 = v52;
  if (v52 == v51)
  {
    v46 = 4;
    v45 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_35;
    v46 = 5;
  }
  (*(void (**)(void))(*v45 + 8 * v46))();
LABEL_35:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);

}

void sub_19FD59FCC(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  void *v3;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

uint64_t md::WaypointStoreFeatureNode::WaypointStoreFeatureNode(uint64_t a1, void *a2, char a3, _QWORD *a4)
{
  id v7;
  __int128 *v8;
  unsigned __int8 v9;
  __int128 v10;
  int v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  unint64_t v22;
  _DWORD *v23;
  unint64_t v24;
  int v25;
  int v26;
  int *v27;
  int v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  int v32;
  int *v33;
  int v34;
  unsigned int v35;
  int v37;

  v7 = a2;
  v8 = *(__int128 **)(*a4 + 192);
  if (*(__int128 **)(*a4 + 200) == v8)
  {
    if ((v9 & 1) != 0)
    {
      v8 = &md::LabelPoint::NullPoint(void)::kNullLabelPoint;
    }
    else
    {
      v8 = &md::LabelPoint::NullPoint(void)::kNullLabelPoint;
      if (v37)
      {
        qword_1ECE2FD68 = 0;
        md::LabelPoint::NullPoint(void)::kNullLabelPoint = 0u;
        *(_OWORD *)&qword_1ECE2FD58 = 0u;
        dword_1ECE2FD70 = 2139095039;
        word_1ECE2FD74 = 256;
        byte_1ECE2FD76 = 1;
        v8 = &md::LabelPoint::NullPoint(void)::kNullLabelPoint;
      }
    }
  }
  *(_QWORD *)a1 = off_1E428BF18;
  *(_QWORD *)(a1 + 8) = 0x437C000000000000;
  v10 = *v8;
  *(_QWORD *)(a1 + 32) = *((_QWORD *)v8 + 2);
  *(_OWORD *)(a1 + 16) = v10;
  *(_OWORD *)(a1 + 40) = *(__int128 *)((char *)v8 + 24);
  v11 = *((_DWORD *)v8 + 10);
  *(_DWORD *)(a1 + 59) = *(_DWORD *)((char *)v8 + 43);
  *(_DWORD *)(a1 + 56) = v11;
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 68) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = 0x7FFFFFFF;
  *(_BYTE *)(a1 + 108) = a3;
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 116) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 124) = 0;
  *(_QWORD *)a1 = &off_1E42A18C8;
  v12 = v7;
  *(_QWORD *)(a1 + 128) = v12;
  v14 = *a4;
  v13 = a4[1];
  if (v13)
  {
    v15 = (unint64_t *)(v13 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = *(std::__shared_weak_count **)(a1 + 96);
  *(_QWORD *)(a1 + 88) = v14;
  *(_QWORD *)(a1 + 96) = v13;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = *a4;
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(*a4 + 84);
  v21 = *(_DWORD **)(v20 + 32);
  if (v21)
  {
    v22 = *((unsigned __int8 *)v21 + 33);
    if (*((_BYTE *)v21 + 33))
    {
      v23 = *(_DWORD **)v21;
      if (**(_DWORD **)v21 == 6)
      {
        v24 = 0;
LABEL_16:
        LOWORD(v26) = v23[2 * v24 + 1];
        v25 = v26 & 0xFF00;
        v26 = v26;
        LODWORD(v22) = 1;
LABEL_24:
        v29 = v25 | v26;
        if (*(unsigned __int8 *)(a1 + 116) == (_DWORD)v22)
        {
          if (*(_BYTE *)(a1 + 116))
          {
            *(_DWORD *)(a1 + 112) = v29;
            v21 = *(_DWORD **)(v20 + 32);
            if (!v21)
              goto LABEL_41;
          }
        }
        else if (*(_BYTE *)(a1 + 116))
        {
          *(_BYTE *)(a1 + 116) = 0;
        }
        else
        {
          *(_DWORD *)(a1 + 112) = v29;
          *(_BYTE *)(a1 + 116) = 1;
        }
        v30 = *((unsigned __int8 *)v21 + 33);
        if (!*((_BYTE *)v21 + 33))
        {
          LODWORD(v21) = 0;
LABEL_42:
          v32 = 0;
LABEL_43:
          v35 = v32 | v21;
          if (*(unsigned __int8 *)(a1 + 124) == (_DWORD)v30)
          {
            if (*(_BYTE *)(a1 + 124))
              *(_DWORD *)(a1 + 120) = v35;
          }
          else if (*(_BYTE *)(a1 + 124))
          {
            *(_BYTE *)(a1 + 124) = 0;
          }
          else
          {
            *(_DWORD *)(a1 + 120) = v35;
            *(_BYTE *)(a1 + 124) = 1;
          }
          goto LABEL_49;
        }
        v21 = *(_DWORD **)v21;
        if (*v21 == 4)
        {
          v31 = 0;
LABEL_33:
          LOWORD(v21) = v21[2 * v31 + 1];
          v32 = (unsigned __int16)v21 & 0xFF00;
          LODWORD(v21) = v21;
          LODWORD(v30) = 1;
          goto LABEL_43;
        }
        v31 = 0;
        v33 = v21 + 2;
        while (v30 - 1 != v31)
        {
          v34 = *v33;
          v33 += 2;
          ++v31;
          if (v34 == 4)
          {
            if (v31 < v30)
              goto LABEL_33;
            break;
          }
        }
        LODWORD(v21) = 0;
LABEL_41:
        LODWORD(v30) = 0;
        goto LABEL_42;
      }
      v24 = 0;
      v27 = v23 + 2;
      while (v22 - 1 != v24)
      {
        v28 = *v27;
        v27 += 2;
        ++v24;
        if (v28 == 6)
        {
          if (v24 < v22)
            goto LABEL_16;
          break;
        }
      }
      v26 = 0;
      LODWORD(v22) = 0;
    }
    else
    {
      v26 = 0;
    }
    v25 = 0;
    goto LABEL_24;
  }
LABEL_49:

  return a1;
}

void md::WaypointStore::styleAttributesForWaypoint(_QWORD *a1, uint64_t a2, void *a3, int a4)
{
  id v7;
  unsigned __int8 v8;
  void *v9;
  void *v10;
  char *v11;
  uint64_t v12;
  unsigned int v13;
  _BOOL4 v14;
  uint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  _OWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  unint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  __int128 v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  _OWORD *v85;
  uint64_t *v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  unint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  _OWORD *v104;
  uint64_t *v105;
  uint64_t v106;
  __int128 v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  unint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t *v123;
  uint64_t *v124;
  uint64_t v125;
  __int128 v126;
  uint64_t v127;
  unint64_t v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t *v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t *v148;
  uint64_t *v149;
  uint64_t v150;
  __int128 v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char v156;
  uint64_t v157;
  uint64_t v158;
  unsigned __int8 v159;
  size_t v160;
  _QWORD *v161;
  uint64_t v162;
  int *v163;
  int v164;
  uint64_t v165;
  int *v166;
  int v167;
  uint64_t v168;
  id v169;
  char *v170;
  uint64_t *v171;
  unint64_t v172;
  uint64_t v173;

  v7 = a3;
  v170 = 0;
  v171 = 0;
  v172 = 0;
  {
    v168 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v168, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v173 = mdm::Allocator::instance(void)::alloc;
  objc_msgSend(v7, "styleAttributes");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if (v9)
  {
    v11 = (char *)objc_msgSend(v9, "v");
    v12 = objc_msgSend(v10, "v");
    v13 = objc_msgSend(v10, "countAttrs");
    std::vector<GeoCodecsFeatureStylePair,geo::StdAllocator<GeoCodecsFeatureStylePair,mdm::Allocator>>::__insert_with_size[abi:nn180100]<GeoCodecsFeatureStylePair*,GeoCodecsFeatureStylePair*>((uint64_t *)&v170, (uint64_t)v171, v11, (char *)(v12 + 8 * v13), (v12 + 8 * v13 - (uint64_t)v11) >> 3);
  }
  if (*(_BYTE *)(a2 + 48))
    v14 = *(_BYTE *)(a2 + 49) != 0;
  else
    v14 = 0;
  v15 = v171;
  v16 = v172;
  if ((unint64_t)v171 < v172)
  {
    if (v171)
    {
      *v171 = 0x300000005;
      v16 = v172;
    }
    v17 = (unint64_t *)(v15 + 1);
    goto LABEL_34;
  }
  v18 = ((char *)v171 - v170) >> 3;
  v19 = v18 + 1;
  if ((unint64_t)(v18 + 1) >> 61)
    abort();
  v20 = v172 - (_QWORD)v170;
  if ((uint64_t)(v172 - (_QWORD)v170) >> 2 > v19)
    v19 = v20 >> 2;
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
    v16 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v16 = v19;
  if (v16)
  {
    v21 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v173 + 16))(v173, 8 * v16, 4);
    v22 = (_QWORD *)(v21 + 8 * v18);
    v16 = v21 + 8 * v16;
    if (v21)
      *v22 = 0x300000005;
  }
  else
  {
    v22 = (_QWORD *)(8 * v18);
  }
  v17 = v22 + 1;
  v24 = (uint64_t)v170;
  v23 = v171;
  if (v171 != (uint64_t *)v170)
  {
    v25 = (char *)v171 - v170 - 8;
    if (v25 < 0x38)
    {
      v27 = v171;
    }
    else if ((unint64_t)((char *)v171 - (char *)v22) < 0x20)
    {
      v27 = v171;
    }
    else
    {
      v26 = (v25 >> 3) + 1;
      v27 = &v171[-(v26 & 0x3FFFFFFFFFFFFFFCLL)];
      v28 = v22 - 2;
      v29 = v171 - 2;
      v30 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v31 = *(_OWORD *)v29;
        *(v28 - 1) = *((_OWORD *)v29 - 1);
        *v28 = v31;
        v28 -= 2;
        v29 -= 4;
        v30 -= 4;
      }
      while (v30);
      v22 -= v26 & 0x3FFFFFFFFFFFFFFCLL;
      if (v26 == (v26 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_31;
    }
    do
    {
      v32 = *--v27;
      *--v22 = v32;
    }
    while (v27 != (uint64_t *)v24);
LABEL_31:
    v23 = (uint64_t *)v170;
  }
  v33 = v172;
  v170 = (char *)v22;
  v172 = v16;
  if (v23)
    (*(void (**)(uint64_t, uint64_t *, unint64_t))(*(_QWORD *)v173 + 40))(v173, v23, v33 - (_QWORD)v23);
LABEL_34:
  v171 = (uint64_t *)v17;
  if ((a4 - 1) >= 3)
    v34 = 0x400010023;
  else
    v34 = ((unint64_t)(a4 - 1) << 32) + 0x500010023;
  if ((unint64_t)v17 < v16)
  {
    *v17 = v34;
    v35 = (uint64_t *)(v17 + 1);
    v36 = v172;
    goto LABEL_62;
  }
  v37 = ((char *)v17 - v170) >> 3;
  v38 = v37 + 1;
  if ((unint64_t)(v37 + 1) >> 61)
    abort();
  v39 = v16 - (_QWORD)v170;
  if ((uint64_t)(v16 - (_QWORD)v170) >> 2 > v38)
    v38 = v39 >> 2;
  if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8)
    v36 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v36 = v38;
  if (v36)
  {
    v40 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v173 + 16))(v173, 8 * v36, 4);
    v41 = (unint64_t *)(v40 + 8 * v37);
    v36 = v40 + 8 * v36;
    if (v40)
      *v41 = v34;
  }
  else
  {
    v41 = (unint64_t *)(8 * v37);
  }
  v35 = (uint64_t *)(v41 + 1);
  v43 = (uint64_t)v170;
  v42 = v171;
  if (v171 != (uint64_t *)v170)
  {
    v44 = (char *)v171 - v170 - 8;
    if (v44 < 0x38)
    {
      v46 = v171;
    }
    else if ((unint64_t)((char *)v171 - (char *)v41) < 0x20)
    {
      v46 = v171;
    }
    else
    {
      v45 = (v44 >> 3) + 1;
      v46 = &v171[-(v45 & 0x3FFFFFFFFFFFFFFCLL)];
      v47 = v41 - 2;
      v48 = v171 - 2;
      v49 = v45 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v50 = *(_OWORD *)v48;
        *((_OWORD *)v47 - 1) = *((_OWORD *)v48 - 1);
        *(_OWORD *)v47 = v50;
        v47 -= 4;
        v48 -= 4;
        v49 -= 4;
      }
      while (v49);
      v41 -= v45 & 0x3FFFFFFFFFFFFFFCLL;
      if (v45 == (v45 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_59;
    }
    do
    {
      v51 = *--v46;
      *--v41 = v51;
    }
    while (v46 != (uint64_t *)v43);
LABEL_59:
    v42 = (uint64_t *)v170;
  }
  v52 = v172;
  v170 = (char *)v41;
  v172 = v36;
  if (v42)
    (*(void (**)(uint64_t, uint64_t *, unint64_t))(*(_QWORD *)v173 + 40))(v173, v42, v52 - (_QWORD)v42);
LABEL_62:
  v171 = v35;
  if ((unint64_t)v35 < v36)
  {
    v53 = 65538;
    if (v14)
      v53 = 0x100010002;
    *v35 = v53;
    v54 = v35 + 1;
    v55 = v172;
    goto LABEL_91;
  }
  v56 = ((char *)v35 - v170) >> 3;
  v57 = v56 + 1;
  if ((unint64_t)(v56 + 1) >> 61)
    abort();
  v58 = v36 - (_QWORD)v170;
  if ((uint64_t)(v36 - (_QWORD)v170) >> 2 > v57)
    v57 = v58 >> 2;
  if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF8)
    v55 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v55 = v57;
  if (v55)
  {
    v59 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v173 + 16))(v173, 8 * v55, 4);
    v60 = (uint64_t *)(v59 + 8 * v56);
    v55 = v59 + 8 * v55;
    if (v59)
    {
      v61 = 65538;
      if (v14)
        v61 = 0x100010002;
      *v60 = v61;
    }
  }
  else
  {
    v60 = (uint64_t *)(8 * v56);
  }
  v54 = v60 + 1;
  v63 = (uint64_t)v170;
  v62 = v171;
  if (v171 != (uint64_t *)v170)
  {
    v64 = (char *)v171 - v170 - 8;
    if (v64 < 0x38)
    {
      v66 = v171;
    }
    else if ((unint64_t)((char *)v171 - (char *)v60) < 0x20)
    {
      v66 = v171;
    }
    else
    {
      v65 = (v64 >> 3) + 1;
      v66 = &v171[-(v65 & 0x3FFFFFFFFFFFFFFCLL)];
      v67 = v60 - 2;
      v68 = v171 - 2;
      v69 = v65 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v70 = *(_OWORD *)v68;
        *((_OWORD *)v67 - 1) = *((_OWORD *)v68 - 1);
        *(_OWORD *)v67 = v70;
        v67 -= 4;
        v68 -= 4;
        v69 -= 4;
      }
      while (v69);
      v60 -= v65 & 0x3FFFFFFFFFFFFFFCLL;
      if (v65 == (v65 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_88;
    }
    do
    {
      v71 = *--v66;
      *--v60 = v71;
    }
    while (v66 != (uint64_t *)v63);
LABEL_88:
    v62 = (uint64_t *)v170;
  }
  v72 = v172;
  v170 = (char *)v60;
  v172 = v55;
  if (v62)
    (*(void (**)(uint64_t, uint64_t *, unint64_t))(*(_QWORD *)v173 + 40))(v173, v62, v72 - (_QWORD)v62);
LABEL_91:
  v171 = v54;
  if ((unint64_t)v54 < v55)
  {
    *v54 = 0x100010024;
    v73 = v54 + 1;
    v74 = v172;
    goto LABEL_116;
  }
  v75 = ((char *)v54 - v170) >> 3;
  v76 = v75 + 1;
  if ((unint64_t)(v75 + 1) >> 61)
    abort();
  v77 = v55 - (_QWORD)v170;
  if ((uint64_t)(v55 - (_QWORD)v170) >> 2 > v76)
    v76 = v77 >> 2;
  if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF8)
    v74 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v74 = v76;
  if (v74)
  {
    v78 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v173 + 16))(v173, 8 * v74, 4);
    v79 = (_QWORD *)(v78 + 8 * v75);
    v74 = v78 + 8 * v74;
    if (v78)
      *v79 = 0x100010024;
  }
  else
  {
    v79 = (_QWORD *)(8 * v75);
  }
  v73 = v79 + 1;
  v81 = (uint64_t)v170;
  v80 = v171;
  if (v171 != (uint64_t *)v170)
  {
    v82 = (char *)v171 - v170 - 8;
    if (v82 < 0x38)
    {
      v84 = v171;
    }
    else if ((unint64_t)((char *)v171 - (char *)v79) < 0x20)
    {
      v84 = v171;
    }
    else
    {
      v83 = (v82 >> 3) + 1;
      v84 = &v171[-(v83 & 0x3FFFFFFFFFFFFFFCLL)];
      v85 = v79 - 2;
      v86 = v171 - 2;
      v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v88 = *(_OWORD *)v86;
        *(v85 - 1) = *((_OWORD *)v86 - 1);
        *v85 = v88;
        v85 -= 2;
        v86 -= 4;
        v87 -= 4;
      }
      while (v87);
      v79 -= v83 & 0x3FFFFFFFFFFFFFFCLL;
      if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_113;
    }
    do
    {
      v89 = *--v84;
      *--v79 = v89;
    }
    while (v84 != (uint64_t *)v81);
LABEL_113:
    v80 = (uint64_t *)v170;
  }
  v90 = v172;
  v170 = (char *)v79;
  v172 = v74;
  if (v80)
    (*(void (**)(uint64_t, uint64_t *, unint64_t))(*(_QWORD *)v173 + 40))(v173, v80, v90 - (_QWORD)v80);
LABEL_116:
  v171 = v73;
  if ((unint64_t)v73 < v74)
  {
    *v73 = 0x20001001FLL;
    v91 = v73 + 1;
    goto LABEL_141;
  }
  v92 = ((char *)v73 - v170) >> 3;
  v93 = v92 + 1;
  if ((unint64_t)(v92 + 1) >> 61)
    abort();
  v94 = v74 - (_QWORD)v170;
  if ((uint64_t)(v74 - (_QWORD)v170) >> 2 > v93)
    v93 = v94 >> 2;
  if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFF8)
    v95 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v95 = v93;
  if (v95)
  {
    v96 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v173 + 16))(v173, 8 * v95, 4);
    v97 = (_QWORD *)(v96 + 8 * v92);
    v98 = v96 + 8 * v95;
    if (v96)
      *v97 = 0x20001001FLL;
  }
  else
  {
    v98 = 0;
    v97 = (_QWORD *)(8 * v92);
  }
  v91 = v97 + 1;
  v100 = (uint64_t)v170;
  v99 = v171;
  if (v171 != (uint64_t *)v170)
  {
    v101 = (char *)v171 - v170 - 8;
    if (v101 < 0x38)
    {
      v103 = v171;
    }
    else if ((unint64_t)((char *)v171 - (char *)v97) < 0x20)
    {
      v103 = v171;
    }
    else
    {
      v102 = (v101 >> 3) + 1;
      v103 = &v171[-(v102 & 0x3FFFFFFFFFFFFFFCLL)];
      v104 = v97 - 2;
      v105 = v171 - 2;
      v106 = v102 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v107 = *(_OWORD *)v105;
        *(v104 - 1) = *((_OWORD *)v105 - 1);
        *v104 = v107;
        v104 -= 2;
        v105 -= 4;
        v106 -= 4;
      }
      while (v106);
      v97 -= v102 & 0x3FFFFFFFFFFFFFFCLL;
      if (v102 == (v102 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_138;
    }
    do
    {
      v108 = *--v103;
      *--v97 = v108;
    }
    while (v103 != (uint64_t *)v100);
LABEL_138:
    v99 = (uint64_t *)v170;
  }
  v109 = v172;
  v170 = (char *)v97;
  v172 = v98;
  if (v99)
    (*(void (**)(uint64_t, uint64_t *, unint64_t))(*(_QWORD *)v173 + 40))(v173, v99, v109 - (_QWORD)v99);
LABEL_141:
  v171 = v91;
  v169 = v7;
  if ((objc_msgSend(v169, "isAtEnd") & 1) != 0)
  {
    v110 = 4;
  }
  else
  {
    if (objc_msgSend(v169, "isAtStart"))
      v110 = 3;
    else
      v110 = 2;
    v91 = v171;
  }

  if ((unint64_t)v91 < v172)
  {
    if (v91)
      *v91 = (v110 << 32) | 0x2C;
    v111 = v91 + 1;
    goto LABEL_174;
  }
  v112 = ((char *)v91 - v170) >> 3;
  if ((unint64_t)(v112 + 1) >> 61)
    abort();
  v113 = (uint64_t)(v172 - (_QWORD)v170) >> 2;
  if (v113 <= v112 + 1)
    v113 = v112 + 1;
  if (v172 - (unint64_t)v170 >= 0x7FFFFFFFFFFFFFF8)
    v114 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v114 = v113;
  if (v114)
  {
    v115 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v173 + 16))(v173, 8 * v114, 4);
    v116 = (uint64_t *)(v115 + 8 * v112);
    v117 = v115 + 8 * v114;
    if (v115)
      *v116 = (v110 << 32) | 0x2C;
  }
  else
  {
    v117 = 0;
    v116 = (uint64_t *)(8 * v112);
  }
  v111 = v116 + 1;
  v119 = (uint64_t)v170;
  v118 = v171;
  if (v171 != (uint64_t *)v170)
  {
    v120 = (char *)v171 - v170 - 8;
    if (v120 < 0x38)
    {
      v122 = v171;
    }
    else if ((unint64_t)((char *)v171 - (char *)v116) < 0x20)
    {
      v122 = v171;
    }
    else
    {
      v121 = (v120 >> 3) + 1;
      v122 = &v171[-(v121 & 0x3FFFFFFFFFFFFFFCLL)];
      v123 = v116 - 2;
      v124 = v171 - 2;
      v125 = v121 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v126 = *(_OWORD *)v124;
        *((_OWORD *)v123 - 1) = *((_OWORD *)v124 - 1);
        *(_OWORD *)v123 = v126;
        v123 -= 4;
        v124 -= 4;
        v125 -= 4;
      }
      while (v125);
      v116 -= v121 & 0x3FFFFFFFFFFFFFFCLL;
      if (v121 == (v121 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_171;
    }
    do
    {
      v127 = *--v122;
      *--v116 = v127;
    }
    while (v122 != (uint64_t *)v119);
LABEL_171:
    v118 = (uint64_t *)v170;
  }
  v128 = v172;
  v170 = (char *)v116;
  v172 = v117;
  if (v118)
    (*(void (**)(uint64_t, uint64_t *, unint64_t))(*(_QWORD *)v173 + 40))(v173, v118, v128 - (_QWORD)v118);
LABEL_174:
  v171 = v111;
  if (objc_msgSend(v169, "type") != 4)
    goto LABEL_207;
  objc_msgSend(v169, "waypoint");
  v129 = (void *)objc_claimAutoreleasedReturnValue();
  v130 = objc_msgSend(v129, "anchorPointType");
  v131 = v130;
  v132 = v171;
  if ((unint64_t)v171 >= v172)
  {
    v135 = ((char *)v171 - v170) >> 3;
    v136 = v135 + 1;
    if ((unint64_t)(v135 + 1) >> 61)
      abort();
    v137 = v172 - (_QWORD)v170;
    if ((uint64_t)(v172 - (_QWORD)v170) >> 2 > v136)
      v136 = v137 >> 2;
    if ((unint64_t)v137 >= 0x7FFFFFFFFFFFFFF8)
      v138 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v138 = v136;
    if (v138)
    {
      v139 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v173 + 16))(v173, 8 * v138, 4);
      v140 = (uint64_t *)(v139 + 8 * v135);
      v141 = v139 + 8 * v138;
      if (v139)
      {
        v142 = 65670;
        if (v131 == 4)
          v142 = 0x100010086;
        *v140 = v142;
      }
    }
    else
    {
      v141 = 0;
      v140 = (uint64_t *)(8 * v135);
    }
    v134 = v140 + 1;
    v144 = (uint64_t)v170;
    v143 = v171;
    if (v171 == (uint64_t *)v170)
      goto LABEL_204;
    v145 = (char *)v171 - v170 - 8;
    if (v145 < 0x38)
    {
      v147 = v171;
    }
    else if ((unint64_t)((char *)v171 - (char *)v140) < 0x20)
    {
      v147 = v171;
    }
    else
    {
      v146 = (v145 >> 3) + 1;
      v147 = &v171[-(v146 & 0x3FFFFFFFFFFFFFFCLL)];
      v148 = v140 - 2;
      v149 = v171 - 2;
      v150 = v146 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v151 = *(_OWORD *)v149;
        *((_OWORD *)v148 - 1) = *((_OWORD *)v149 - 1);
        *(_OWORD *)v148 = v151;
        v148 -= 4;
        v149 -= 4;
        v150 -= 4;
      }
      while (v150);
      v140 -= v146 & 0x3FFFFFFFFFFFFFFCLL;
      if (v146 == (v146 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_203;
    }
    do
    {
      v152 = *--v147;
      *--v140 = v152;
    }
    while (v147 != (uint64_t *)v144);
LABEL_203:
    v143 = (uint64_t *)v170;
LABEL_204:
    v153 = v172;
    v170 = (char *)v140;
    v172 = v141;
    if (v143)
      (*(void (**)(uint64_t, uint64_t *, unint64_t))(*(_QWORD *)v173 + 40))(v173, v143, v153 - (_QWORD)v143);
    goto LABEL_206;
  }
  if (v171)
  {
    v133 = 65670;
    if (v130 == 4)
      v133 = 0x100010086;
    *v171 = v133;
  }
  v134 = v132 + 1;
LABEL_206:
  v171 = v134;

LABEL_207:
  _ZNSt3__111make_sharedB8nn180100I22FeatureStyleAttributesJEvEENS_10shared_ptrIT_EEDpOT0_(a1);
  v154 = (uint64_t)v170;
  if ((((char *)v171 - v170) & 0x7FFFFFFF8) != 0)
  {
    v155 = 0;
    v156 = 0;
    v157 = *a1;
    v158 = ((unint64_t)((char *)v171 - v170) >> 3);
    v159 = *(_BYTE *)(*a1 + 33);
    while (1)
    {
      v160 = v159;
      v161 = *(_QWORD **)v157;
      if (v159)
        break;
LABEL_209:
      v161[v160] = *(_QWORD *)(v154 + 8 * v155);
      v159 = *(_BYTE *)(v157 + 33) + 1;
      *(_BYTE *)(v157 + 33) = v159;
      ++v155;
      v156 = 1;
      if (v155 == v158)
      {
        v161 = *(_QWORD **)v157;
        v160 = v159;
LABEL_226:
        qsort(v161, v160, 8uLL, (int (__cdecl *)(const void *, const void *))FeatureStyleAttributes::compareStylePairs);
        goto LABEL_227;
      }
    }
    if (v159 > 0x1Fu)
    {
      do
      {
        v165 = 0;
        v166 = (int *)v161;
        while (1)
        {
          v167 = *v166;
          v166 += 2;
          if (v167 == *(_DWORD *)(v154 + 8 * v155))
            break;
          if (v159 == ++v165)
            goto LABEL_220;
        }
        HIDWORD(v161[v165]) = *(_DWORD *)(v154 + 8 * v155 + 4);
LABEL_220:
        ++v155;
      }
      while (v155 != v158);
    }
    else
    {
      do
      {
        v162 = 0;
        v163 = (int *)v161;
        while (1)
        {
          v164 = *v163;
          v163 += 2;
          if (v164 == *(_DWORD *)(v154 + 8 * v155))
            break;
          if (v160 == ++v162)
            goto LABEL_209;
        }
        HIDWORD(v161[v162]) = *(_DWORD *)(v154 + 8 * v155++ + 4);
      }
      while (v155 != v158);
    }
    if ((v156 & 1) != 0)
      goto LABEL_226;
  }
LABEL_227:

  if (v170)
    (*(void (**)(uint64_t, char *, unint64_t))(*(_QWORD *)v173 + 40))(v173, v170, v172 - (_QWORD)v170);

}

void sub_19FD5AFF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  void *v14;
  void *v15;
  uint64_t v16;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v16);

  if (a11)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a14 + 40))(a14, a11, a13 - a11);

  _Unwind_Resume(a1);
}

void md::WaypointStoreFeatureNode::~WaypointStoreFeatureNode(id *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *this = off_1E4293E70;
  v2 = (std::__shared_weak_count *)this[12];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *this = off_1E4293E70;
  v2 = (std::__shared_weak_count *)this[12];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::WaypointStoreFeatureNode::populateNodes(uint64_t a1, uint64_t *a2, int a3, int a4)
{
  uint64_t result;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  __int128 *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  if ((result & a3) != 0 && (result & a4) == 0)
  {
    v10 = (_QWORD *)a2[1];
    v11 = a2[2];
    if ((unint64_t)v10 < v11)
    {
      if (v10)
        *v10 = a1;
      v12 = v10 + 1;
LABEL_32:
      a2[1] = (uint64_t)v12;
      return result;
    }
    v13 = ((uint64_t)v10 - *a2) >> 3;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 61)
      abort();
    v15 = v11 - *a2;
    if (v15 >> 2 > v14)
      v14 = v15 >> 2;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    if (v14)
    {
      v16 = 8 * v14;
      result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2[3] + 16))(a2[3], 8 * v14, 8);
      v17 = (_QWORD *)(result + 8 * v13);
      v14 = result + v16;
      if (result)
        *v17 = a1;
    }
    else
    {
      v17 = (_QWORD *)(8 * v13);
    }
    v12 = v17 + 1;
    v19 = *a2;
    v18 = a2[1];
    if (v18 == *a2)
    {
LABEL_30:
      *a2 = (uint64_t)v17;
      a2[1] = (uint64_t)v12;
      v28 = a2[2];
      a2[2] = v14;
      if (v18)
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2[3] + 40))(a2[3], v18, v28 - v18);
      goto LABEL_32;
    }
    v20 = v18 - *a2 - 8;
    if (v20 < 0x38)
    {
      v22 = a2[1];
    }
    else if ((unint64_t)(v18 - (_QWORD)v17) < 0x20)
    {
      v22 = a2[1];
    }
    else
    {
      v21 = (v20 >> 3) + 1;
      v22 = v18 - 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
      v23 = v17 - 2;
      v24 = (__int128 *)(v18 - 16);
      v25 = v21 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v26 = *v24;
        *(v23 - 1) = *(v24 - 1);
        *v23 = v26;
        v23 -= 2;
        v24 -= 2;
        v25 -= 4;
      }
      while (v25);
      v17 -= v21 & 0x3FFFFFFFFFFFFFFCLL;
      if (v21 == (v21 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_29;
    }
    do
    {
      v27 = *(_QWORD *)(v22 - 8);
      v22 -= 8;
      *--v17 = v27;
    }
    while (v22 != v19);
LABEL_29:
    v18 = *a2;
    goto LABEL_30;
  }
  return result;
}

uint64_t md::WaypointStoreFeatureNode::nodeTypeMask(md::WaypointStoreFeatureNode *this)
{
  if (*((_BYTE *)this + 80) == 2)
    return 3;
  else
    return 1;
}

id md::WaypointStoreFeatureNode::waypoint(id *this)
{
  return this[16];
}

uint64_t md::WaypointStoreNode::waypoint(md::WaypointStoreNode *this)
{
  return 0;
}

void md::WaypointStore::updateExternalFeatureText(int64x2_t *this, md::LabelExternalPointFeature *a2, VKRouteWaypointInfo *a3)
{
  uint64_t v4;
  uint64_t i;
  void *v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  md::LabelExternalPointFeature *v11;
  void *v12;
  id v13;
  md::LabelExternalPointFeature *v14;

  v14 = a2;
  v4 = this[3].i64[0];
  for (i = this[3].i64[1]; i != v4; i -= 104)
  {
    if (*(char *)(i - 1) < 0)
    {
      operator delete(*(void **)(i - 24));
      if ((*(char *)(i - 25) & 0x80000000) == 0)
      {
LABEL_7:
        if ((*(char *)(i - 49) & 0x80000000) == 0)
          goto LABEL_11;
        goto LABEL_2;
      }
    }
    else if ((*(char *)(i - 25) & 0x80000000) == 0)
    {
      goto LABEL_7;
    }
    operator delete(*(void **)(i - 48));
    if ((*(char *)(i - 49) & 0x80000000) == 0)
    {
LABEL_11:
      if ((*(char *)(i - 73) & 0x80000000) == 0)
        continue;
      goto LABEL_12;
    }
LABEL_2:
    operator delete(*(void **)(i - 72));
    if ((*(char *)(i - 73) & 0x80000000) == 0)
      continue;
LABEL_12:
    operator delete(*(void **)(i - 96));
  }
  this[3].i64[1] = v4;
  -[md::LabelExternalPointFeature name](v14, "name");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    -[md::LabelExternalPointFeature name](v14, "name");
    v7 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    md::LabelExternalFeature::addTextForZoom(this, 0, 0, (const char *)objc_msgSend(v7, "UTF8String"), 0);

  }
  -[md::LabelExternalPointFeature annotationText](v14, "annotationText");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (v8)
  {
    -[md::LabelExternalPointFeature annotationText](v14, "annotationText");
    v9 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    md::LabelExternalFeature::addTextForZoom(this, 0, 2, (const char *)objc_msgSend(v9, "UTF8String"), 0);

  }
  if (-[md::LabelExternalPointFeature type](v14, "type") == 2)
  {
    -[md::LabelExternalPointFeature annotationText](v14, "annotationText");
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v10)
    {
      v11 = v14;
      -[md::LabelExternalPointFeature chargeTimeText](v11, "chargeTimeText");
      v12 = (void *)objc_claimAutoreleasedReturnValue();

      if (v12)
      {
        -[md::LabelExternalPointFeature chargeTimeText](v11, "chargeTimeText");
        v13 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        md::LabelExternalFeature::addTextForZoom(this, 0, 2, (const char *)objc_msgSend(v13, "UTF8String"), 0);

      }
    }
  }

}

void sub_19FD5B4F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void std::__function::__func<md::WaypointStore::generateClusters(float)::$_0,std::allocator<md::WaypointStore::generateClusters(float)::$_0>,md::ClusterNode * ()(std::pair<md::ClusterNode *,md::ClusterNode *> &,double)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::WaypointStore::generateClusters(float)::$_0,std::allocator<md::WaypointStore::generateClusters(float)::$_0>,md::ClusterNode * ()(std::pair<md::ClusterNode *,md::ClusterNode *> &,double)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CBBA0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::WaypointStore::generateClusters(float)::$_0,std::allocator<md::WaypointStore::generateClusters(float)::$_0>,md::ClusterNode * ()(std::pair<md::ClusterNode *,md::ClusterNode *> &,double)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CBBA0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::WaypointStore::generateClusters(float)::$_0,std::allocator<md::WaypointStore::generateClusters(float)::$_0>,md::ClusterNode * ()(std::pair<md::ClusterNode *,md::ClusterNode *> &,double)>::operator()(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  unint64_t i;
  _DWORD *v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _BYTE *v27;
  _DWORD *v28;
  unint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  char *v32;
  uint64_t v33;
  __int128 v34;
  int v35;
  uint64_t *v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  char *v46;
  char *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  BOOL v52;
  uint64_t v53;
  char *v54;
  uint64_t *v55;
  char *v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *a3;
  v5 = *(_DWORD *)(*a2 + 104);
  v6 = *(_DWORD *)(a2[1] + 104);
  if (v5 <= v6)
    v7 = *a2;
  else
    v7 = a2[1];
  if (v5 <= v6)
    v8 = a2[1];
  else
    v8 = *a2;
  v9 = operator new();
  *(_QWORD *)(v9 + 8) = 0x437C000000000000;
  v10 = *(_QWORD *)(v7 + 32);
  *(_OWORD *)(v9 + 16) = *(_OWORD *)(v7 + 16);
  *(_QWORD *)(v9 + 32) = v10;
  *(_OWORD *)(v9 + 40) = *(_OWORD *)(v7 + 40);
  LODWORD(v10) = *(_DWORD *)(v7 + 56);
  *(_DWORD *)(v9 + 59) = *(_DWORD *)(v7 + 59);
  *(_DWORD *)(v9 + 56) = v10;
  *(_BYTE *)(v9 + 64) = 0;
  *(_BYTE *)(v9 + 68) = 0;
  *(_QWORD *)(v9 + 72) = 0;
  *(_BYTE *)(v9 + 80) = 0;
  *(_QWORD *)(v9 + 88) = 0;
  *(_QWORD *)(v9 + 96) = 0;
  *(_BYTE *)(v9 + 108) = 1;
  *(_BYTE *)(v9 + 112) = 0;
  *(_BYTE *)(v9 + 116) = 0;
  *(_BYTE *)(v9 + 120) = 0;
  *(_BYTE *)(v9 + 124) = 0;
  *(_QWORD *)v9 = &off_1E42A1858;
  *(_OWORD *)(v9 + 144) = 0u;
  v11 = (void **)(v9 + 144);
  *(_OWORD *)(v9 + 160) = 0u;
  *(_OWORD *)(v9 + 173) = 0u;
  *(_QWORD *)(v9 + 128) = v7;
  *(_QWORD *)(v9 + 136) = v8;
  *(_DWORD *)(v9 + 104) = *(_DWORD *)(v7 + 104);
  *(_QWORD *)(v9 + 176) = v4;
  v68 = 0;
  v69 = 0;
  v70 = 0;
  {
    v66 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v66, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v71 = mdm::Allocator::instance(void)::alloc;
  (*(void (**)(uint64_t, uint64_t **, uint64_t, _QWORD))(*(_QWORD *)v9 + 16))(v9, &v68, 1, 0);
  v67 = v3;
  v12 = 126 - 2 * __clz(v69 - v68);
  if (v69 == v68)
    v13 = 0;
  else
    v13 = v12;
  std::__introsort<std::_ClassicAlgPolicy,SortFeatureNodes(std::vector<md::ClusterNode *,geo::StdAllocator<md::ClusterNode *,mdm::Allocator>> &)::$_0 &,md::ClusterNode **,false>((uint64_t)v68, v69, v13, 1);
  v15 = v68;
  v14 = v69;
  if ((unint64_t)((char *)v69 - (char *)v68) >= 9)
  {
    for (i = 1; i < v14 - v15; ++i)
    {
      v18 = v15[i];
      if (*(_BYTE *)(v18 + 116))
      {
        v20 = *(char **)(v9 + 152);
        v19 = *(_QWORD *)(v9 + 160);
        if ((unint64_t)v20 < v19)
        {
          *(_DWORD *)v20 = *(_DWORD *)(v18 + 112);
          v17 = v20 + 4;
        }
        else
        {
          v21 = (char *)*v11;
          v22 = v20 - (_BYTE *)*v11;
          v23 = v22 >> 2;
          v24 = (v22 >> 2) + 1;
          if (v24 >> 62)
            abort();
          v25 = v19 - (_QWORD)v21;
          if (v25 >> 1 > v24)
            v24 = v25 >> 1;
          if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL)
            v26 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v26 = v24;
          if (v26)
          {
            if (v26 >> 62)
              std::__throw_bad_array_new_length[abi:nn180100]();
            v27 = operator new(4 * v26);
          }
          else
          {
            v27 = 0;
          }
          v28 = &v27[4 * v23];
          *v28 = *(_DWORD *)(v18 + 112);
          v17 = v28 + 1;
          if (v20 != v21)
          {
            v29 = v20 - 4 - v21;
            if (v29 < 0x2C)
              goto LABEL_81;
            if ((unint64_t)(v20 - &v27[v22]) < 0x20)
              goto LABEL_81;
            v30 = (v29 >> 2) + 1;
            v31 = &v27[4 * v23 - 16];
            v32 = v20 - 16;
            v33 = v30 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v34 = *(_OWORD *)v32;
              *(v31 - 1) = *((_OWORD *)v32 - 1);
              *v31 = v34;
              v31 -= 2;
              v32 -= 32;
              v33 -= 8;
            }
            while (v33);
            v28 -= v30 & 0x7FFFFFFFFFFFFFF8;
            v20 -= 4 * (v30 & 0x7FFFFFFFFFFFFFF8);
            if (v30 != (v30 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_81:
              do
              {
                v35 = *((_DWORD *)v20 - 1);
                v20 -= 4;
                *--v28 = v35;
              }
              while (v20 != v21);
            }
          }
          *(_QWORD *)(v9 + 144) = v28;
          *(_QWORD *)(v9 + 152) = v17;
          *(_QWORD *)(v9 + 160) = &v27[4 * v26];
          if (v21)
          {
            operator delete(v21);
            v15 = v68;
          }
        }
        *(_QWORD *)(v9 + 152) = v17;
        if ((_DWORD *)((char *)v17 - *(_QWORD *)(v9 + 144)) == (_DWORD *)8)
          break;
        v14 = v69;
      }
    }
  }
  if (v15)
  {
    v69 = v15;
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v71 + 40))(v71, v15, v70 - (_QWORD)v15);
  }
  v36 = *(uint64_t **)(v67 + 128);
  v37 = *(_QWORD *)(v67 + 136);
  if ((unint64_t)v36 < v37)
  {
    if (v36)
      *v36 = v9;
    v38 = v36 + 1;
    goto LABEL_73;
  }
  v39 = *(_QWORD *)(v67 + 120);
  v40 = ((uint64_t)v36 - v39) >> 3;
  v41 = v40 + 1;
  if ((unint64_t)(v40 + 1) >> 61)
    abort();
  v42 = v37 - v39;
  if (v42 >> 2 > v41)
    v41 = v42 >> 2;
  if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
    v41 = 0x1FFFFFFFFFFFFFFFLL;
  if (v41)
  {
    v43 = 8 * v41;
    v44 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v67 + 144) + 16))(*(_QWORD *)(v67 + 144), 8 * v41, 8);
    v45 = (uint64_t *)(v44 + 8 * v40);
    v41 = v44 + v43;
    if (v44)
      *v45 = v9;
  }
  else
  {
    v45 = (uint64_t *)(8 * v40);
  }
  v38 = v45 + 1;
  v46 = *(char **)(v67 + 120);
  v47 = *(char **)(v67 + 128);
  if (v47 == v46)
  {
    *(_QWORD *)(v67 + 120) = v45;
    *(_QWORD *)(v67 + 128) = v38;
    v62 = *(_QWORD *)(v67 + 136);
    *(_QWORD *)(v67 + 136) = v41;
    goto LABEL_71;
  }
  v48 = v47 - v46 - 8;
  if (v48 <= 0x57
    || ((v49 = (v46 - v47 + 7) & 0xFFFFFFFFFFFFFFF8,
         v50 = (unint64_t)&v47[v49],
         v51 = (char *)v45 + v49,
         v50 < (unint64_t)v45)
      ? (v52 = v51 >= v47)
      : (v52 = 1),
        !v52))
  {
    v54 = *(char **)(v67 + 128);
    do
    {
LABEL_65:
      v60 = *((_QWORD *)v54 - 1);
      v54 -= 8;
      *(_QWORD *)v54 = 0;
      *--v45 = v60;
    }
    while (v54 != v46);
    goto LABEL_66;
  }
  v53 = (v48 >> 3) + 1;
  v54 = &v47[-8 * (v53 & 0x3FFFFFFFFFFFFFFCLL)];
  v55 = v45 - 2;
  v56 = v47 - 32;
  v57 = v53 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v59 = *(_OWORD *)v56;
    v58 = *((_OWORD *)v56 + 1);
    *(_OWORD *)v56 = 0uLL;
    *((_OWORD *)v56 + 1) = 0uLL;
    v56 -= 32;
    *((_OWORD *)v55 - 1) = v59;
    *(_OWORD *)v55 = v58;
    v55 -= 4;
    v57 -= 4;
  }
  while (v57);
  v45 -= v53 & 0x3FFFFFFFFFFFFFFCLL;
  if (v53 != (v53 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_65;
LABEL_66:
  v47 = *(char **)(v67 + 120);
  v61 = *(char **)(v67 + 128);
  *(_QWORD *)(v67 + 120) = v45;
  *(_QWORD *)(v67 + 128) = v38;
  v62 = *(_QWORD *)(v67 + 136);
  *(_QWORD *)(v67 + 136) = v41;
  while (v61 != v47)
  {
    v64 = *((_QWORD *)v61 - 1);
    v61 -= 8;
    v63 = v64;
    *(_QWORD *)v61 = 0;
    if (v64)
      (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  }
LABEL_71:
  if (v47)
    (*(void (**)(_QWORD, char *, uint64_t))(**(_QWORD **)(v67 + 144) + 40))(*(_QWORD *)(v67 + 144), v47, v62 - (_QWORD)v47);
LABEL_73:
  *(_QWORD *)(v67 + 128) = v38;
  return v9;
}

void sub_19FD5BAA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _QWORD *v14;
  void **v15;
  void *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;

  if (a11)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a14 + 40))(a14, a11, a13 - a11);
  v17 = *v15;
  if (*v15)
  {
    v14[19] = v17;
    operator delete(v17);
  }
  *v14 = off_1E4293E70;
  v18 = (std::__shared_weak_count *)v14[12];
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  MEMORY[0x1A1AF4E00](v14, 0x10B1C40763AE39BLL);
  _Unwind_Resume(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,SortFeatureNodes(std::vector<md::ClusterNode *,geo::StdAllocator<md::ClusterNode *,mdm::Allocator>> &)::$_0 &,md::ClusterNode **,false>(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  int v83;
  uint64_t v84;
  int v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  int v92;
  int v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t *v96;
  BOOL v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  int64_t v107;
  int64_t v108;
  BOOL v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  int v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t *v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  uint64_t v143;

  v7 = (uint64_t *)result;
LABEL_2:
  v8 = a2 - 1;
  v9 = v7;
  while (2)
  {
    v7 = v9;
    v10 = (char *)a2 - (char *)v9;
    v11 = a2 - v9;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v79 = *v9;
        if (*(_DWORD *)(*v8 + 104) < *(_DWORD *)(*v9 + 104))
        {
          *v9 = *v8;
          *v8 = v79;
        }
        return result;
      case 3:
        v80 = *v9;
        v81 = v9[1];
        v82 = *(_DWORD *)(v81 + 104);
        v83 = *(_DWORD *)(*v9 + 104);
        v84 = *v8;
        v85 = *(_DWORD *)(*v8 + 104);
        if (v82 >= v83)
        {
          if (v85 < v82)
          {
            v9[1] = v84;
            *v8 = v81;
            v136 = *v9;
            v135 = v9[1];
            if (*(_DWORD *)(v135 + 104) < *(_DWORD *)(*v9 + 104))
            {
              *v9 = v135;
              v9[1] = v136;
            }
          }
        }
        else
        {
          if (v85 >= v82)
          {
            *v9 = v81;
            v9[1] = v80;
            if (*(_DWORD *)(*v8 + 104) >= v83)
              return result;
            v9[1] = *v8;
          }
          else
          {
            *v9 = v84;
          }
          *v8 = v80;
        }
        return result;
      case 4:
        v86 = v9 + 1;
        v87 = v9[1];
        v88 = v9 + 2;
        v89 = v9[2];
        v90 = *v9;
        v91 = *(_DWORD *)(v87 + 104);
        v92 = *(_DWORD *)(*v9 + 104);
        v93 = *(_DWORD *)(v89 + 104);
        if (v91 >= v92)
        {
          if (v93 >= v91)
            goto LABEL_166;
          *v86 = v89;
          *v88 = v87;
          v94 = v9;
          v95 = v9 + 1;
          result = v87;
          if (v93 >= v92)
            goto LABEL_167;
        }
        else
        {
          v94 = v9;
          v95 = v9 + 2;
          result = *v9;
          if (v93 >= v91)
          {
            *v9 = v87;
            v9[1] = v90;
            v94 = v9 + 1;
            v95 = v9 + 2;
            result = v90;
            if (v93 >= v92)
            {
LABEL_166:
              v87 = v89;
LABEL_167:
              if (*(_DWORD *)(*v8 + 104) < *(_DWORD *)(v87 + 104))
              {
                *v88 = *v8;
                *v8 = v87;
                v140 = *v88;
                v141 = *v86;
                v142 = *(_DWORD *)(v140 + 104);
                if (v142 < *(_DWORD *)(v141 + 104))
                {
                  v9[1] = v140;
                  v9[2] = v141;
                  v143 = *v9;
                  if (v142 < *(_DWORD *)(*v9 + 104))
                  {
                    *v9 = v140;
                    v9[1] = v143;
                  }
                }
              }
              return result;
            }
          }
        }
        *v94 = v89;
        *v95 = v90;
        v87 = result;
        goto LABEL_167;
      case 5:
        return (uint64_t)std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,SortFeatureNodes(std::vector<md::ClusterNode *,geo::StdAllocator<md::ClusterNode *,mdm::Allocator>> &)::$_0 &,md::ClusterNode **,0>(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1);
      default:
        if (v10 > 191)
        {
          if (!a3)
          {
            if (v9 != a2)
            {
              v107 = (unint64_t)(v11 - 2) >> 1;
              v108 = v107;
              do
              {
                if (v107 >= v108)
                {
                  v110 = (2 * v108) | 1;
                  v111 = &v9[v110];
                  v112 = *v111;
                  if (2 * v108 + 2 < v11)
                  {
                    result = *(unsigned int *)(v112 + 104);
                    if ((int)result < *(_DWORD *)(v111[1] + 104))
                    {
                      v112 = v111[1];
                      ++v111;
                      v110 = 2 * v108 + 2;
                    }
                  }
                  v113 = &v9[v108];
                  v114 = *v113;
                  v115 = *(_DWORD *)(*v113 + 104);
                  if (*(_DWORD *)(v112 + 104) >= v115)
                  {
                    do
                    {
                      v116 = v111;
                      *v113 = v112;
                      if (v107 < v110)
                        break;
                      result = (2 * v110) | 1;
                      v111 = &v9[result];
                      v117 = 2 * v110 + 2;
                      v112 = *v111;
                      if (v117 < v11 && *(_DWORD *)(v112 + 104) < *(_DWORD *)(v111[1] + 104))
                      {
                        v112 = v111[1];
                        ++v111;
                        result = v117;
                      }
                      v113 = v116;
                      v110 = result;
                    }
                    while (*(_DWORD *)(v112 + 104) >= v115);
                    *v116 = v114;
                  }
                }
                v109 = v108-- <= 0;
              }
              while (!v109);
              v118 = (unint64_t)v10 >> 3;
              do
              {
                v119 = 0;
                v120 = *v9;
                v121 = v9;
                do
                {
                  v122 = &v121[v119];
                  v125 = v122[1];
                  v123 = v122 + 1;
                  v124 = v125;
                  v126 = (2 * v119) | 1;
                  v127 = 2 * v119 + 2;
                  if (v127 < v118)
                  {
                    result = *(unsigned int *)(v124 + 104);
                    if ((int)result < *(_DWORD *)(v123[1] + 104))
                    {
                      v124 = v123[1];
                      ++v123;
                      v126 = v127;
                    }
                  }
                  *v121 = v124;
                  v121 = v123;
                  v119 = v126;
                }
                while (v126 <= (uint64_t)((unint64_t)(v118 - 2) >> 1));
                if (v123 == --a2)
                {
                  *v123 = v120;
                }
                else
                {
                  *v123 = *a2;
                  *a2 = v120;
                  v128 = (char *)v123 - (char *)v9 + 8;
                  if (v128 >= 9)
                  {
                    v129 = (((unint64_t)v128 >> 3) - 2) >> 1;
                    v130 = &v9[v129];
                    v131 = *v130;
                    v132 = *v123;
                    v133 = *(_DWORD *)(*v123 + 104);
                    if (*(_DWORD *)(*v130 + 104) < v133)
                    {
                      do
                      {
                        v134 = v130;
                        *v123 = v131;
                        if (!v129)
                          break;
                        v129 = (v129 - 1) >> 1;
                        v130 = &v9[v129];
                        v131 = *v130;
                        v123 = v134;
                      }
                      while (*(_DWORD *)(*v130 + 104) < v133);
                      *v134 = v132;
                    }
                  }
                }
                v109 = v118-- <= 2;
              }
              while (!v109);
            }
            return result;
          }
          v12 = (unint64_t)v11 >> 1;
          v13 = &v9[(unint64_t)v11 >> 1];
          v14 = *v8;
          v15 = *(_DWORD *)(*v8 + 104);
          if ((unint64_t)v10 >= 0x401)
          {
            v16 = *v13;
            v17 = *v9;
            v18 = *(_DWORD *)(*v13 + 104);
            v19 = *(_DWORD *)(*v9 + 104);
            if (v18 >= v19)
            {
              if (v15 < v18)
              {
                *v13 = v14;
                *v8 = v16;
                v24 = *v9;
                if (*(_DWORD *)(*v13 + 104) < *(_DWORD *)(*v9 + 104))
                {
                  *v9 = *v13;
                  *v13 = v24;
                }
              }
            }
            else
            {
              if (v15 < v18)
              {
                *v9 = v14;
                goto LABEL_21;
              }
              *v9 = v16;
              *v13 = v17;
              if (*(_DWORD *)(*v8 + 104) < v19)
              {
                *v13 = *v8;
LABEL_21:
                *v8 = v17;
              }
            }
            v26 = &v9[v12];
            v29 = *(v26 - 1);
            v27 = v26 - 1;
            v28 = v29;
            v30 = v9[1];
            v31 = *(_DWORD *)(v29 + 104);
            v32 = *(_DWORD *)(v30 + 104);
            v33 = *(a2 - 2);
            v34 = *(_DWORD *)(v33 + 104);
            if (v31 >= v32)
            {
              if (v34 < v31)
              {
                *v27 = v33;
                *(a2 - 2) = v28;
                v35 = v9[1];
                if (*(_DWORD *)(*v27 + 104) < *(_DWORD *)(v35 + 104))
                {
                  v9[1] = *v27;
                  *v27 = v35;
                }
              }
            }
            else
            {
              if (v34 < v31)
              {
                v9[1] = v33;
                goto LABEL_33;
              }
              v9[1] = v28;
              *v27 = v30;
              v36 = *(a2 - 2);
              if (*(_DWORD *)(v36 + 104) < v32)
              {
                *v27 = v36;
LABEL_33:
                *(a2 - 2) = v30;
              }
            }
            v37 = &v9[v12];
            v40 = v37[1];
            v38 = v37 + 1;
            v39 = v40;
            v41 = v9[2];
            v42 = *(_DWORD *)(v40 + 104);
            v43 = *(_DWORD *)(v41 + 104);
            v44 = *(a2 - 3);
            v45 = *(_DWORD *)(v44 + 104);
            if (v42 >= v43)
            {
              if (v45 < v42)
              {
                *v38 = v44;
                *(a2 - 3) = v39;
                v46 = v9[2];
                if (*(_DWORD *)(*v38 + 104) < *(_DWORD *)(v46 + 104))
                {
                  v9[2] = *v38;
                  *v38 = v46;
                }
              }
            }
            else
            {
              if (v45 < v42)
              {
                v9[2] = v44;
                goto LABEL_42;
              }
              v9[2] = v39;
              *v38 = v41;
              v47 = *(a2 - 3);
              if (*(_DWORD *)(v47 + 104) < v43)
              {
                *v38 = v47;
LABEL_42:
                *(a2 - 3) = v41;
              }
            }
            v48 = *v13;
            v49 = *v27;
            v50 = *(_DWORD *)(*v13 + 104);
            v51 = *(_DWORD *)(*v27 + 104);
            v52 = *v38;
            v53 = *(_DWORD *)(*v38 + 104);
            if (v50 >= v51)
            {
              if (v53 >= v50)
                goto LABEL_50;
              *v13 = v52;
              *v38 = v48;
              v38 = v13;
              v48 = v49;
              if (v53 >= v51)
              {
                v48 = v52;
                goto LABEL_50;
              }
            }
            else if (v53 >= v50)
            {
              *v27 = v48;
              *v13 = v49;
              v27 = v13;
              v48 = v52;
              if (v53 >= v51)
              {
                v48 = v49;
LABEL_50:
                v54 = *v9;
                *v9 = v48;
                *v13 = v54;
                goto LABEL_51;
              }
            }
            *v27 = v52;
            *v38 = v49;
            goto LABEL_50;
          }
          v20 = *v9;
          v21 = *v13;
          v22 = *(_DWORD *)(*v9 + 104);
          v23 = *(_DWORD *)(*v13 + 104);
          if (v22 >= v23)
          {
            if (v15 < v22)
            {
              *v9 = v14;
              *v8 = v20;
              v25 = *v13;
              if (*(_DWORD *)(*v9 + 104) < *(_DWORD *)(*v13 + 104))
              {
                *v13 = *v9;
                *v9 = v25;
              }
            }
          }
          else
          {
            if (v15 >= v22)
            {
              *v13 = v20;
              *v9 = v21;
              if (*(_DWORD *)(*v8 + 104) >= v23)
                goto LABEL_51;
              *v9 = *v8;
            }
            else
            {
              *v13 = v14;
            }
            *v8 = v21;
          }
LABEL_51:
          --a3;
          v55 = *v9;
          if ((a4 & 1) == 0)
          {
            v56 = *(_DWORD *)(v55 + 104);
            if (*(_DWORD *)(*(v9 - 1) + 104) < v56)
              goto LABEL_54;
            if (v56 >= *(_DWORD *)(*v8 + 104))
            {
              v71 = v9 + 1;
              do
              {
                v9 = v71;
                if (v71 >= a2)
                  break;
                ++v71;
              }
              while (v56 >= *(_DWORD *)(*v9 + 104));
            }
            else
            {
              do
              {
                v70 = v9[1];
                ++v9;
              }
              while (v56 >= *(_DWORD *)(v70 + 104));
            }
            v72 = a2;
            if (v9 < a2)
            {
              v72 = a2;
              do
                v73 = *--v72;
              while (v56 < *(_DWORD *)(v73 + 104));
            }
            if (v9 < v72)
            {
              v74 = *v9;
              v75 = *v72;
              do
              {
                *v9 = v75;
                *v72 = v74;
                do
                {
                  v76 = v9[1];
                  ++v9;
                  v74 = v76;
                }
                while (v56 >= *(_DWORD *)(v76 + 104));
                do
                {
                  v77 = *--v72;
                  v75 = v77;
                }
                while (v56 < *(_DWORD *)(v77 + 104));
              }
              while (v9 < v72);
            }
            v78 = v9 - 1;
            if (v9 - 1 != v7)
              *v7 = *v78;
            a4 = 0;
            *v78 = v55;
            continue;
          }
          v56 = *(_DWORD *)(v55 + 104);
LABEL_54:
          v57 = v9;
          do
          {
            v58 = v57;
            v60 = v57[1];
            ++v57;
            v59 = v60;
          }
          while (*(_DWORD *)(v60 + 104) < v56);
          v61 = a2;
          if (v58 == v9)
          {
            v61 = a2;
            do
            {
              if (v57 >= v61)
                break;
              v63 = *--v61;
            }
            while (*(_DWORD *)(v63 + 104) >= v56);
          }
          else
          {
            do
              v62 = *--v61;
            while (*(_DWORD *)(v62 + 104) >= v56);
          }
          if (v57 < v61)
          {
            v64 = *v61;
            v65 = v57;
            v66 = v61;
            do
            {
              *v65 = v64;
              *v66 = v59;
              do
              {
                v58 = v65;
                v67 = v65[1];
                ++v65;
                v59 = v67;
              }
              while (*(_DWORD *)(v67 + 104) < v56);
              do
              {
                v68 = *--v66;
                v64 = v68;
              }
              while (*(_DWORD *)(v68 + 104) >= v56);
            }
            while (v65 < v66);
          }
          if (v58 != v9)
            *v9 = *v58;
          *v58 = v55;
          if (v57 < v61)
            goto LABEL_73;
          v69 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,SortFeatureNodes(std::vector<md::ClusterNode *,geo::StdAllocator<md::ClusterNode *,mdm::Allocator>> &)::$_0 &,md::ClusterNode **>(v9, v58);
          v9 = v58 + 1;
          result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,SortFeatureNodes(std::vector<md::ClusterNode *,geo::StdAllocator<md::ClusterNode *,mdm::Allocator>> &)::$_0 &,md::ClusterNode **>(v58 + 1, a2);
          if (!(_DWORD)result)
          {
            if (v69)
              continue;
LABEL_73:
            result = std::__introsort<std::_ClassicAlgPolicy,SortFeatureNodes(std::vector<md::ClusterNode *,geo::StdAllocator<md::ClusterNode *,mdm::Allocator>> &)::$_0 &,md::ClusterNode **,false>(v7, v58, a3, a4 & 1);
            a4 = 0;
            v9 = v58 + 1;
            continue;
          }
          a2 = v58;
          if (v69)
            return result;
          goto LABEL_2;
        }
        v96 = v9 + 1;
        v98 = v9 == a2 || v96 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v98)
          {
            v99 = 8;
            v100 = v9;
            do
            {
              v103 = *v100;
              v102 = v100[1];
              v100 = v96;
              v104 = *(_DWORD *)(v102 + 104);
              if (v104 < *(_DWORD *)(v103 + 104))
              {
                v105 = v99;
                do
                {
                  *(uint64_t *)((char *)v9 + v105) = v103;
                  v106 = v105 - 8;
                  if (v105 == 8)
                  {
                    v101 = v9;
                    goto LABEL_116;
                  }
                  v103 = *(uint64_t *)((char *)v9 + v105 - 16);
                  v105 -= 8;
                }
                while (v104 < *(_DWORD *)(v103 + 104));
                v101 = (uint64_t *)((char *)v9 + v106);
LABEL_116:
                *v101 = v102;
              }
              v96 = v100 + 1;
              v99 += 8;
            }
            while (v100 + 1 != a2);
          }
        }
        else if (!v98)
        {
          do
          {
            v138 = *v7;
            v137 = v7[1];
            v7 = v96;
            v139 = *(_DWORD *)(v137 + 104);
            if (v139 < *(_DWORD *)(v138 + 104))
            {
              do
              {
                *v96 = v138;
                v138 = *(v96 - 2);
                --v96;
              }
              while (v139 < *(_DWORD *)(v138 + 104));
              *v96 = v137;
            }
            v96 = v7 + 1;
          }
          while (v7 + 1 != a2);
        }
        return result;
    }
  }
}

uint64_t *std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,SortFeatureNodes(std::vector<md::ClusterNode *,geo::StdAllocator<md::ClusterNode *,mdm::Allocator>> &)::$_0 &,md::ClusterNode **,0>(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *a2;
  v6 = *result;
  v7 = *(_DWORD *)(*a2 + 104);
  v8 = *(_DWORD *)(*result + 104);
  v9 = *a3;
  v10 = *(_DWORD *)(*a3 + 104);
  if (v7 >= v8)
  {
    if (v10 >= v7)
    {
      v5 = *a3;
    }
    else
    {
      *a2 = v9;
      *a3 = v5;
      v11 = *result;
      if (*(_DWORD *)(*a2 + 104) < *(_DWORD *)(*result + 104))
      {
        *result = *a2;
        *a2 = v11;
        v5 = *a3;
      }
    }
  }
  else
  {
    if (v10 < v7)
    {
      *result = v9;
LABEL_9:
      *a3 = v6;
      v5 = v6;
      goto LABEL_11;
    }
    *result = v5;
    *a2 = v6;
    v5 = *a3;
    if (*(_DWORD *)(*a3 + 104) < v8)
    {
      *a2 = v5;
      goto LABEL_9;
    }
  }
LABEL_11:
  if (*(_DWORD *)(*a4 + 104) < *(_DWORD *)(v5 + 104))
  {
    *a3 = *a4;
    *a4 = v5;
    v12 = *a2;
    if (*(_DWORD *)(*a3 + 104) < *(_DWORD *)(*a2 + 104))
    {
      *a2 = *a3;
      *a3 = v12;
      v13 = *result;
      if (*(_DWORD *)(*a2 + 104) < *(_DWORD *)(*result + 104))
      {
        *result = *a2;
        *a2 = v13;
      }
    }
  }
  v14 = *a4;
  if (*(_DWORD *)(*a5 + 104) < *(_DWORD *)(*a4 + 104))
  {
    *a4 = *a5;
    *a5 = v14;
    v15 = *a3;
    if (*(_DWORD *)(*a4 + 104) < *(_DWORD *)(*a3 + 104))
    {
      *a3 = *a4;
      *a4 = v15;
      v16 = *a2;
      if (*(_DWORD *)(*a3 + 104) < *(_DWORD *)(*a2 + 104))
      {
        *a2 = *a3;
        *a3 = v16;
        v17 = *result;
        if (*(_DWORD *)(*a2 + 104) < *(_DWORD *)(*result + 104))
        {
          *result = *a2;
          *a2 = v17;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,SortFeatureNodes(std::vector<md::ClusterNode *,geo::StdAllocator<md::ClusterNode *,mdm::Allocator>> &)::$_0 &,md::ClusterNode **>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  int v32;
  uint64_t i;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;

  v2 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v2;
    case 2:
      v3 = *(a2 - 1);
      v4 = *a1;
      if (*(_DWORD *)(v3 + 104) < *(_DWORD *)(*a1 + 104))
      {
        *a1 = v3;
        *(a2 - 1) = v4;
      }
      return 1;
    case 3:
      v14 = *a1;
      v15 = a1[1];
      v16 = *(_DWORD *)(v15 + 104);
      v17 = *(_DWORD *)(*a1 + 104);
      v18 = *(a2 - 1);
      v19 = *(_DWORD *)(v18 + 104);
      if (v16 >= v17)
      {
        if (v19 < v16)
        {
          a1[1] = v18;
          *(a2 - 1) = v15;
          v41 = *a1;
          v40 = a1[1];
          if (*(_DWORD *)(v40 + 104) < *(_DWORD *)(*a1 + 104))
          {
            *a1 = v40;
            a1[1] = v41;
          }
        }
      }
      else
      {
        if (v19 >= v16)
        {
          *a1 = v15;
          a1[1] = v14;
          v47 = *(a2 - 1);
          if (*(_DWORD *)(v47 + 104) >= v17)
            return 1;
          a1[1] = v47;
        }
        else
        {
          *a1 = v18;
        }
        *(a2 - 1) = v14;
      }
      return 1;
    case 4:
      v20 = a1 + 1;
      v21 = a1[1];
      v22 = a1 + 2;
      v23 = a1[2];
      v24 = *a1;
      v25 = *(_DWORD *)(v21 + 104);
      v26 = *(_DWORD *)(*a1 + 104);
      v27 = *(_DWORD *)(v23 + 104);
      if (v25 < v26)
      {
        v28 = a1;
        v29 = a1 + 2;
        v30 = *a1;
        if (v27 >= v25)
        {
          *a1 = v21;
          a1[1] = v24;
          v28 = a1 + 1;
          v29 = a1 + 2;
          v30 = v24;
          if (v27 >= v26)
            goto LABEL_35;
        }
LABEL_34:
        *v28 = v23;
        *v29 = v24;
        v21 = v30;
        goto LABEL_36;
      }
      if (v27 < v25)
      {
        *v20 = v23;
        *v22 = v21;
        v28 = a1;
        v29 = a1 + 1;
        v30 = v21;
        if (v27 >= v26)
          goto LABEL_36;
        goto LABEL_34;
      }
LABEL_35:
      v21 = v23;
LABEL_36:
      v42 = *(a2 - 1);
      if (*(_DWORD *)(v42 + 104) < *(_DWORD *)(v21 + 104))
      {
        *v22 = v42;
        *(a2 - 1) = v21;
        v43 = *v22;
        v44 = *v20;
        v45 = *(_DWORD *)(v43 + 104);
        if (v45 < *(_DWORD *)(v44 + 104))
        {
          a1[1] = v43;
          a1[2] = v44;
          v46 = *a1;
          if (v45 < *(_DWORD *)(*a1 + 104))
          {
            *a1 = v43;
            a1[1] = v46;
          }
        }
      }
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,SortFeatureNodes(std::vector<md::ClusterNode *,geo::StdAllocator<md::ClusterNode *,mdm::Allocator>> &)::$_0 &,md::ClusterNode **,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v6 = a1 + 2;
      v5 = a1[2];
      v7 = a1[1];
      v8 = *a1;
      v9 = *(_DWORD *)(v7 + 104);
      v10 = *(_DWORD *)(*a1 + 104);
      v11 = *(_DWORD *)(v5 + 104);
      if (v9 >= v10)
      {
        if (v11 >= v9)
          goto LABEL_19;
        a1[1] = v5;
        *v6 = v7;
        v12 = a1;
        v13 = a1 + 1;
      }
      else
      {
        v12 = a1;
        v13 = a1 + 2;
        if (v11 < v9)
          goto LABEL_18;
        *a1 = v7;
        a1[1] = v8;
        v12 = a1 + 1;
        v13 = a1 + 2;
      }
      if (v11 >= v10)
        goto LABEL_19;
LABEL_18:
      *v12 = v5;
      *v13 = v8;
LABEL_19:
      v31 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v32 = 0;
      for (i = 24; ; i += 8)
      {
        v35 = *v31;
        v36 = *v6;
        v37 = *(_DWORD *)(*v31 + 104);
        if (v37 < *(_DWORD *)(v36 + 104))
        {
          v38 = i;
          do
          {
            *(uint64_t *)((char *)a1 + v38) = v36;
            v39 = v38 - 8;
            if (v38 == 8)
            {
              v34 = a1;
              goto LABEL_22;
            }
            v36 = *(uint64_t *)((char *)a1 + v38 - 16);
            v38 -= 8;
          }
          while (v37 < *(_DWORD *)(v36 + 104));
          v34 = (uint64_t *)((char *)a1 + v39);
LABEL_22:
          *v34 = v35;
          if (++v32 == 8)
            break;
        }
        v6 = v31++;
        if (v31 == a2)
          return 1;
      }
      return v31 + 1 == a2;
  }
}

void md::WaypointStoreClusterNode::~WaypointStoreClusterNode(md::WaypointStoreClusterNode *this)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)this = &off_1E42A1858;
  v2 = (void *)*((_QWORD *)this + 18);
  if (v2)
  {
    *((_QWORD *)this + 19) = v2;
    operator delete(v2);
  }
  *(_QWORD *)this = off_1E4293E70;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)this = &off_1E42A1858;
  v2 = (void *)*((_QWORD *)this + 18);
  if (v2)
  {
    *((_QWORD *)this + 19) = v2;
    operator delete(v2);
  }
  *(_QWORD *)this = off_1E4293E70;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::WaypointStoreClusterNode::populateChildNodes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 128) + 24))(*(_QWORD *)(a1 + 128));
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 136) + 24))(*(_QWORD *)(a1 + 136), a2, a3, a4);
}

uint64_t md::WaypointStoreClusterNode::populateNodes(_QWORD **a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  int v8;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  __int128 *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  v8 = ((uint64_t (*)(_QWORD **))(*a1)[4])(a1);
  if ((v8 & a3) != 0 && (v8 & a4) == 0)
  {
    v10 = (_QWORD *)a2[1];
    v11 = a2[2];
    if ((unint64_t)v10 < v11)
    {
      if (v10)
        *v10 = a1;
      v12 = v10 + 1;
LABEL_32:
      a2[1] = (uint64_t)v12;
      goto LABEL_33;
    }
    v13 = ((uint64_t)v10 - *a2) >> 3;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 61)
      abort();
    v15 = v11 - *a2;
    if (v15 >> 2 > v14)
      v14 = v15 >> 2;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    if (v14)
    {
      v16 = 8 * v14;
      v17 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2[3] + 16))(a2[3], 8 * v14, 8);
      v18 = (_QWORD *)(v17 + 8 * v13);
      v14 = v17 + v16;
      if (v17)
        *v18 = a1;
    }
    else
    {
      v18 = (_QWORD *)(8 * v13);
    }
    v12 = v18 + 1;
    v20 = *a2;
    v19 = a2[1];
    if (v19 == *a2)
    {
LABEL_30:
      *a2 = (uint64_t)v18;
      a2[1] = (uint64_t)v12;
      v29 = a2[2];
      a2[2] = v14;
      if (v19)
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2[3] + 40))(a2[3], v19, v29 - v19);
      goto LABEL_32;
    }
    v21 = v19 - *a2 - 8;
    if (v21 < 0x38)
    {
      v23 = a2[1];
    }
    else if ((unint64_t)(v19 - (_QWORD)v18) < 0x20)
    {
      v23 = a2[1];
    }
    else
    {
      v22 = (v21 >> 3) + 1;
      v23 = v19 - 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
      v24 = v18 - 2;
      v25 = (__int128 *)(v19 - 16);
      v26 = v22 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v27 = *v25;
        *(v24 - 1) = *(v25 - 1);
        *v24 = v27;
        v24 -= 2;
        v25 -= 2;
        v26 -= 4;
      }
      while (v26);
      v18 -= v22 & 0x3FFFFFFFFFFFFFFCLL;
      if (v22 == (v22 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_29;
    }
    do
    {
      v28 = *(_QWORD *)(v23 - 8);
      v23 -= 8;
      *--v18 = v28;
    }
    while (v23 != v20);
LABEL_29:
    v19 = *a2;
    goto LABEL_30;
  }
LABEL_33:
  (*(void (**)(_QWORD *, uint64_t *, uint64_t, uint64_t))(*a1[16] + 24))(a1[16], a2, a3, a4);
  return (*(uint64_t (**)(_QWORD *, uint64_t *, uint64_t, uint64_t))(*a1[17] + 24))(a1[17], a2, a3, a4);
}

uint64_t md::WaypointStoreClusterNode::nodeTypeMask(md::WaypointStoreClusterNode *this)
{
  if (*((_BYTE *)this + 80) == 2)
    return 20;
  if (*((_BYTE *)this + 188))
    return 12;
  return 4;
}

double md::WaypointStoreClusterNode::distance(md::WaypointStoreClusterNode *this)
{
  return *((double *)this + 22);
}

uint64_t md::WaypointStoreClusterNode::setupClusterNode(md::WaypointStoreClusterNode *this, char a2, float a3)
{
  *((_BYTE *)this + 80) = 1;
  *((_BYTE *)this + 188) = a2;
  *((float *)this + 3) = a3;
  md::WaypointStoreClusterNode::updateDescendantNode(this, *((md::WaypointStoreNode **)this + 16));
  return md::WaypointStoreClusterNode::updateDescendantNode(this, *((md::WaypointStoreNode **)this + 17));
}

uint64_t md::WaypointStoreClusterNode::waypoint(md::WaypointStoreClusterNode *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 21) + 88))(*((_QWORD *)this + 21));
}

uint64_t md::WaypointStoreClusterNode::updateDescendantNode(md::WaypointStoreClusterNode *this, md::WaypointStoreNode *a2)
{
  int v4;
  char v5;
  int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *((_DWORD *)a2 + 2) = *((_DWORD *)this + 3);
  *((_QWORD *)a2 + 9) = this;
  if (*((_BYTE *)a2 + 80) == 1)
  {
    if (((*(uint64_t (**)(md::WaypointStoreNode *))(*(_QWORD *)a2 + 32))(a2) & 1) == 0)
      *((_DWORD *)this + 46) += *((_DWORD *)a2 + 46);
LABEL_8:
    if (!*((_BYTE *)a2 + 116))
      goto LABEL_15;
    goto LABEL_9;
  }
  if (*((_BYTE *)a2 + 80))
    goto LABEL_8;
  if (((*(uint64_t (**)(md::WaypointStoreNode *))(*(_QWORD *)a2 + 32))(a2) & 1) != 0)
  {
    ++*((_DWORD *)this + 46);
    if (*((_BYTE *)this + 188))
      v5 = 2;
    else
      v5 = 1;
    *((_BYTE *)a2 + 80) = v5;
    if (!*((_BYTE *)a2 + 116))
      goto LABEL_15;
  }
  else
  {
    *((_BYTE *)a2 + 80) = 2;
    md::WaypointStoreClusterNode::updateDescendantNode(this, *((md::WaypointStoreNode **)a2 + 16));
    md::WaypointStoreClusterNode::updateDescendantNode(this, *((md::WaypointStoreNode **)a2 + 17));
    if (!*((_BYTE *)a2 + 116))
      goto LABEL_15;
  }
LABEL_9:
  if (!*((_BYTE *)this + 116))
  {
    v4 = *((_DWORD *)a2 + 28);
    *((_BYTE *)this + 116) = *((_BYTE *)a2 + 116);
    *((_DWORD *)this + 28) = v4;
  }
LABEL_15:
  if (*((_BYTE *)a2 + 124) && !*((_BYTE *)this + 124))
  {
    v6 = *((_DWORD *)a2 + 30);
    *((_BYTE *)this + 124) = *((_BYTE *)a2 + 124);
    *((_DWORD *)this + 30) = v6;
  }
  result = (*(uint64_t (**)(md::WaypointStoreNode *))(*(_QWORD *)a2 + 32))(a2);
  if ((result & 1) != 0)
  {
    v10 = *((_QWORD *)this + 21);
    if (!v10 || *(_DWORD *)(v10 + 104) > *((_DWORD *)a2 + 26))
      *((_QWORD *)this + 21) = a2;
  }
  else
  {
    v8 = *((_QWORD *)a2 + 21);
    v9 = *((_QWORD *)this + 21);
    if (!v9 || v8 && *(_DWORD *)(v9 + 104) > *(_DWORD *)(v8 + 104))
      *((_QWORD *)this + 21) = v8;
  }
  return result;
}

void ggl::DaVinci::RibbonMesh::~RibbonMesh(ggl::DaVinci::RibbonMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::DaVinci::RibbonMesh::~RibbonMesh(ggl::DaVinci::RibbonMesh *this)
{
  ggl::Mesh::~Mesh((ggl::DaVinci::RibbonMesh *)((char *)this - 16));
}

{
  ggl::Mesh::~Mesh((ggl::DaVinci::RibbonMesh *)((char *)this - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::MeshTyped<ggl::DaVinci::RibbonVbo>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::MeshTyped<ggl::DaVinci::RibbonVbo>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A1AF4E00);
}

void md::PolygonSectionRound::~PolygonSectionRound(md::PolygonSectionRound *this)
{
  md::PolygonSectionRound::~PolygonSectionRound(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  *(_QWORD *)this = &off_1E4297930;
  v2 = *((_QWORD *)this + 21);
  if (v2)
  {
    v3 = *((_QWORD *)this + 22);
    v4 = (void *)*((_QWORD *)this + 21);
    if (v3 != v2)
    {
      v5 = *((_QWORD *)this + 22);
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)*((_QWORD *)this + 21);
    }
    *((_QWORD *)this + 22) = v2;
    operator delete(v4);
  }
  v8 = (void *)*((_QWORD *)this + 18);
  if (v8)
  {
    *((_QWORD *)this + 19) = v8;
    operator delete(v8);
  }
  *(_QWORD *)this = &off_1E428FC30;
  v9 = (void *)*((_QWORD *)this + 14);
  if (v9)
  {
    *((_QWORD *)this + 15) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 8);
  if (v10)
    operator delete(v10);
  v11 = (void *)*((_QWORD *)this + 5);
  if (v11)
  {
    *((_QWORD *)this + 6) = v11;
    operator delete(v11);
  }
  v12 = (void *)*((_QWORD *)this + 2);
  if (v12)
  {
    *((_QWORD *)this + 3) = v12;
    operator delete(v12);
  }
}

_QWORD *md::PolygonSectionRound::PolygonSectionRound(uint64_t a1, _QWORD *a2, unint64_t a3, float *a4)
{
  _QWORD *v4;
  _QWORD *v5;
  std::vector<unsigned int>::size_type v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  float *v12;
  float v13;
  float v14;
  uint64_t *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  unint64_t v20;
  char *v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  _OWORD *v33;
  char *v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _BYTE *v42;
  char *v43;
  unint64_t v44;
  char *v45;
  int v46;
  uint64_t v47;
  _OWORD *v48;
  char *v49;
  uint64_t v50;
  __int128 v51;
  unint64_t v52;
  char *v53;
  _QWORD *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  _BYTE *v62;
  _QWORD *v63;
  unint64_t v64;
  uint64_t v65;
  _OWORD *v66;
  char *v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  int v71;
  unint64_t v72;
  _QWORD *v73;
  _DWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  char *v81;
  char *v82;
  _DWORD *v83;
  char *v84;
  char *v85;
  __int128 v86;
  _QWORD *v87;
  _QWORD *v88;
  void *v89;
  void *v90;
  unint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  _QWORD *v96;
  _QWORD *v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  char *v101;
  char *v102;
  char **v103;
  int64_t v104;
  char *v105;
  char *v106;
  char *v107;
  char *v108;
  __int128 v109;
  _QWORD *v110;
  _QWORD *v111;
  void *v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  BOOL v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  BOOL v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void **v128;
  unint64_t v129;
  char *StrokeSpecifications;
  char *v131;
  std::vector<unsigned int>::size_type v132;
  _QWORD *v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t *v138;
  unsigned int v139;
  uint64_t **v140;
  uint64_t **v141;
  uint64_t **v142;
  uint64_t *v143;
  uint64_t *v144;
  uint64_t **v145;
  unsigned int v146;
  unsigned int v147;
  _DWORD *v148;
  uint64_t *v149;
  uint64_t v150;
  unint64_t v151;
  unsigned int v152;
  char *v153;
  unsigned int v154;
  unsigned int *v155;
  unsigned int v156;
  unsigned int v157;
  uint64_t *v158;
  uint64_t **v159;
  uint64_t **v160;
  unsigned int v161;
  uint64_t *v162;
  uint64_t *v163;
  BOOL v164;
  uint64_t v165;
  uint64_t *v166;
  uint64_t v167;
  _BYTE *v168;
  int v169;
  uint64_t v170;
  int v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t *v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  std::vector<unsigned int>::pointer begin;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  char *v183;
  char *v184;
  unint64_t v185;
  void **v186;
  char *v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  unint64_t v191;
  _BYTE *v192;
  _DWORD *v193;
  unint64_t v194;
  char *v195;
  int v196;
  uint64_t v197;
  _OWORD *v198;
  char *v199;
  uint64_t v200;
  __int128 v201;
  std::vector<unsigned int>::pointer v202;
  char *CharacteristicPointsForSection;
  __int128 v204;
  __int128 v205;
  std::vector<unsigned int>::size_type v206;
  int v207;
  std::vector<unsigned int>::pointer v208;
  std::vector<unsigned int>::size_type v209;
  uint64_t v210;
  char *v211;
  std::vector<unsigned int>::pointer v212;
  int v213;
  BOOL v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  unint64_t v218;
  uint64_t v219;
  unint64_t v220;
  uint64_t v221;
  unint64_t v222;
  uint64_t v223;
  int v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  uint64_t v229;
  float32x2_t v230;
  float32x2_t v231;
  unint64_t v232;
  unint64_t v233;
  uint64_t v234;
  float32x2_t *v235;
  float32x2_t *GhostPoint;
  float32x2_t v237;
  NSObject *v238;
  float32x2_t v239;
  _DWORD *v240;
  _DWORD *v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t v244;
  _QWORD *v245;
  unint64_t v246;
  uint64_t v247;
  float32x2_t v248;
  float32x2_t v249;
  float32x2_t v250;
  NSObject *v251;
  float32x2_t v252;
  float32x2_t v253;
  uint64_t v254;
  uint64_t v255;
  NSObject *v256;
  NSObject *v257;
  uint64_t *v259;
  uint64_t **v260;
  uint64_t **v261;
  unsigned int v262;
  _DWORD *v263;
  uint64_t *v264;
  _QWORD *v265;
  uint64_t v268;
  _QWORD *v269;
  int v270;
  uint64_t v271;
  std::vector<unsigned int>::size_type v272;
  uint64_t *v273;
  std::vector<unsigned int>::size_type *v274;
  void **v275;
  _QWORD *v277;
  uint64_t v278;
  _QWORD *v279;
  std::vector<unsigned int>::size_type v280;
  unint64_t v281;
  __int128 v282;
  __int128 v283;
  uint64_t *v284;
  char v285;
  std::vector<unsigned int>::pointer v286;
  std::vector<unsigned int>::pointer v287[3];
  __int128 v288;
  _QWORD *v289;
  void *__p;
  uint64_t *v291;
  uint64_t v292;
  unint64_t v293;
  std::vector<unsigned int> __x;
  uint64_t v295;

  v4 = (_QWORD *)a1;
  v295 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)(a1 + 8) = 0u;
  v265 = (_QWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)a1 = &off_1E4297930;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  v274 = (std::vector<unsigned int>::size_type *)(a1 + 192);
  v275 = (void **)(a1 + 144);
  v5 = geo::codec::multiSectionFeaturePoints(a2, a3, (_QWORD *)(a1 + 192));
  v6 = *v274;
  v289 = v4;
  if (*v274)
  {
    v7 = v5;
    v8 = 0;
    v269 = v5;
    v272 = v6 - 1;
    v280 = *v274;
    do
    {
      v10 = v8 + 1;
      if (v8 + 1 == v6)
        v11 = 0;
      else
        v11 = v8 + 1;
      v12 = (float *)&v7[v8];
      v13 = *v12;
      if (*v12 == 1.0 || v13 == 0.0 || (v14 = v12[1], v14 == 1.0) || v14 == 0.0)
      {
        v53 = (char *)v289[19];
        v52 = v289[20];
        if ((unint64_t)v53 >= v52)
        {
          v55 = (char *)*v275;
          v56 = v53 - (_BYTE *)*v275;
          v57 = v56 >> 3;
          v58 = (v56 >> 3) + 1;
          if (v58 >> 61)
            goto LABEL_374;
          v59 = v10;
          v60 = v52 - (_QWORD)v55;
          if (v60 >> 2 > v58)
            v58 = v60 >> 2;
          if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF8)
            v61 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v61 = v58;
          if (v61)
          {
            if (v61 >> 61)
              goto LABEL_370;
            v62 = operator new(8 * v61);
            v6 = v280;
          }
          else
          {
            v62 = 0;
          }
          v63 = &v62[8 * v57];
          *v63 = *(_QWORD *)v12;
          v54 = v63 + 1;
          if (v53 == v55)
          {
            v55 = v53;
          }
          else
          {
            v64 = v53 - 8 - v55;
            if (v64 < 0x58)
              goto LABEL_380;
            if ((unint64_t)(v53 - &v62[v56]) < 0x20)
              goto LABEL_380;
            v65 = (v64 >> 3) + 1;
            v66 = &v62[8 * v57 - 16];
            v67 = v53 - 16;
            v68 = v65 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v69 = *(_OWORD *)v67;
              *(v66 - 1) = *((_OWORD *)v67 - 1);
              *v66 = v69;
              v66 -= 2;
              v67 -= 32;
              v68 -= 4;
            }
            while (v68);
            v63 -= v65 & 0x3FFFFFFFFFFFFFFCLL;
            v53 -= 8 * (v65 & 0x3FFFFFFFFFFFFFFCLL);
            if (v65 != (v65 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_380:
              do
              {
                v70 = *((_QWORD *)v53 - 1);
                v53 -= 8;
                *--v63 = v70;
              }
              while (v53 != v55);
              v55 = (char *)*v275;
            }
          }
          v289[18] = v63;
          v289[19] = v54;
          v289[20] = &v62[8 * v61];
          if (v55)
            operator delete(v55);
          v10 = v59;
        }
        else
        {
          *(_QWORD *)v53 = *(_QWORD *)v12;
          v54 = v53 + 8;
        }
        v289[19] = v54;
        v71 = (((unint64_t)v54 - v289[18]) >> 3) - 1;
        LODWORD(__x.__begin_) = v71;
        v73 = (_QWORD *)v289[22];
        v72 = v289[23];
        if ((unint64_t)v73 >= v72)
        {
          v76 = v10;
          v77 = (_QWORD *)v289[21];
          v78 = 0xAAAAAAAAAAAAAAABLL * (v73 - v77) + 1;
          if (v78 > 0xAAAAAAAAAAAAAAALL)
LABEL_374:
            abort();
          v79 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v72 - (_QWORD)v77) >> 3);
          if (2 * v79 > v78)
            v78 = 2 * v79;
          if (v79 >= 0x555555555555555)
            v80 = 0xAAAAAAAAAAAAAAALL;
          else
            v80 = v78;
          if (v80)
          {
            if (v80 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_370;
            v81 = (char *)operator new(24 * v80);
          }
          else
          {
            v81 = 0;
          }
          v82 = &v81[8 * (v73 - v77)];
          *(_QWORD *)v82 = 0;
          *((_QWORD *)v82 + 1) = 0;
          *((_QWORD *)v82 + 2) = 0;
          v83 = operator new(4uLL);
          v84 = &v81[24 * v80];
          *(_QWORD *)v82 = v83;
          v75 = v82 + 24;
          *v83 = __x.__begin_;
          *(int64x2_t *)(v82 + 8) = vdupq_n_s64((unint64_t)(v83 + 1));
          if (v73 == v77)
          {
            v289[21] = v82;
            v289[22] = v75;
            v289[23] = v84;
            v6 = v280;
            v10 = v76;
          }
          else
          {
            v6 = v280;
            do
            {
              v85 = v82;
              *((_QWORD *)v82 - 2) = 0;
              *((_QWORD *)v82 - 1) = 0;
              v86 = *(_OWORD *)(v73 - 3);
              v73 -= 3;
              *(_OWORD *)(v82 - 24) = v86;
              v82 -= 24;
              *((_QWORD *)v85 - 1) = v73[2];
              *v73 = 0;
              v73[1] = 0;
              v73[2] = 0;
            }
            while (v73 != v77);
            v73 = (_QWORD *)v289[21];
            v87 = (_QWORD *)v289[22];
            v289[21] = v82;
            v289[22] = v75;
            v289[23] = v84;
            v10 = v76;
            if (v87 != v73)
            {
              v88 = v87;
              do
              {
                v90 = (void *)*(v88 - 3);
                v88 -= 3;
                v89 = v90;
                if (v90)
                {
                  *(v87 - 2) = v89;
                  operator delete(v89);
                }
                v87 = v88;
              }
              while (v88 != v73);
            }
          }
          if (v73)
            operator delete(v73);
          v9 = v289;
        }
        else
        {
          *v73 = 0;
          v73[1] = 0;
          v73[2] = 0;
          v74 = operator new(4uLL);
          *v73 = v74;
          *v74++ = v71;
          v73[1] = v74;
          v73[2] = v74;
          v75 = v73 + 3;
          v9 = v289;
          v289[22] = v73 + 3;
        }
        v9[22] = v75;
        v4 = v9;
      }
      else
      {
        v278 = v8 + 1;
        __x.__begin_ = (std::vector<unsigned int>::pointer)v7[(v272 + v8) % v6];
        __x.__end_ = (std::vector<unsigned int>::pointer)__PAIR64__(LODWORD(v14), LODWORD(v13));
        __x.__end_cap_.__value_ = (unsigned int *)v7[v11];
        md::PolygonRound::smoothTwoSegments((float **)&__p, a4, (float *)&__x);
        v15 = (uint64_t *)__p;
        v284 = v291;
        if (__p != v291)
        {
          v16 = 0;
          v17 = 0;
          v18 = 0;
          v4 = v289;
          while (1)
          {
            v21 = (char *)v4[19];
            v20 = v4[20];
            if ((unint64_t)v21 >= v20)
            {
              v23 = (char *)*v275;
              v24 = v21 - (_BYTE *)*v275;
              v25 = v24 >> 3;
              v26 = (v24 >> 3) + 1;
              if (v26 >> 61)
                abort();
              v27 = v20 - (_QWORD)v23;
              if (v27 >> 2 > v26)
                v26 = v27 >> 2;
              v28 = (unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v26;
              if (v28)
              {
                if (v28 >> 61)
                  goto LABEL_370;
                v29 = operator new(8 * v28);
              }
              else
              {
                v29 = 0;
              }
              v30 = (uint64_t *)&v29[8 * v25];
              *v30 = *v15;
              v22 = v30 + 1;
              if (v21 == v23)
              {
                v23 = v21;
              }
              else
              {
                v31 = v21 - 8 - v23;
                if (v31 < 0x58)
                  goto LABEL_381;
                if ((unint64_t)(v21 - &v29[v24]) < 0x20)
                  goto LABEL_381;
                v32 = (v31 >> 3) + 1;
                v33 = &v29[8 * v25 - 16];
                v34 = v21 - 16;
                v35 = v32 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v36 = *(_OWORD *)v34;
                  *(v33 - 1) = *((_OWORD *)v34 - 1);
                  *v33 = v36;
                  v33 -= 2;
                  v34 -= 32;
                  v35 -= 4;
                }
                while (v35);
                v30 -= v32 & 0x3FFFFFFFFFFFFFFCLL;
                v21 -= 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
                if (v32 != (v32 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_381:
                  do
                  {
                    v37 = *((_QWORD *)v21 - 1);
                    v21 -= 8;
                    *--v30 = v37;
                  }
                  while (v21 != v23);
                  v23 = (char *)*v275;
                }
              }
              v4 = v289;
              v289[18] = v30;
              v289[19] = v22;
              v289[20] = &v29[8 * v28];
              if (v23)
                operator delete(v23);
            }
            else
            {
              *(_QWORD *)v21 = *v15;
              v22 = v21 + 8;
            }
            v4[19] = v22;
            v38 = (((unint64_t)v22 - v4[18]) >> 3) - 1;
            if (v17 >= v18)
              break;
            *(_DWORD *)v17 = v38;
            v19 = v17 + 4;
LABEL_16:
            ++v15;
            v17 = v19;
            if (v15 == v284)
              goto LABEL_113;
          }
          v39 = (v17 - v16) >> 2;
          v40 = v39 + 1;
          if ((unint64_t)(v39 + 1) >> 62)
            abort();
          if ((v18 - v16) >> 1 > v40)
            v40 = (v18 - v16) >> 1;
          if ((unint64_t)(v18 - v16) >= 0x7FFFFFFFFFFFFFFCLL)
            v41 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v41 = v40;
          if (v41)
          {
            if (v41 >> 62)
              goto LABEL_370;
            v42 = operator new(4 * v41);
          }
          else
          {
            v42 = 0;
          }
          v43 = &v42[4 * v39];
          *(_DWORD *)v43 = v38;
          v19 = v43 + 4;
          if (v17 == v16)
          {
            v4 = v289;
            v18 = &v42[4 * v41];
            if (v16)
              goto LABEL_57;
          }
          else
          {
            v44 = v17 - 4 - v16;
            if (v44 < 0x2C || (unint64_t)(v16 - v42) < 0x20)
            {
              v45 = v17;
              v4 = v289;
              goto LABEL_55;
            }
            v47 = (v44 >> 2) + 1;
            v45 = &v17[-4 * (v47 & 0x7FFFFFFFFFFFFFF8)];
            v48 = &v42[4 * v39 - 16];
            v49 = v17 - 16;
            v50 = v47 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v51 = *(_OWORD *)v49;
              *(v48 - 1) = *((_OWORD *)v49 - 1);
              *v48 = v51;
              v48 -= 2;
              v49 -= 32;
              v50 -= 8;
            }
            while (v50);
            v43 -= 4 * (v47 & 0x7FFFFFFFFFFFFFF8);
            v4 = v289;
            if (v47 != (v47 & 0x7FFFFFFFFFFFFFF8))
            {
              do
              {
LABEL_55:
                v46 = *((_DWORD *)v45 - 1);
                v45 -= 4;
                *((_DWORD *)v43 - 1) = v46;
                v43 -= 4;
              }
              while (v45 != v16);
            }
            v18 = &v42[4 * v41];
            if (v16)
LABEL_57:
              operator delete(v16);
          }
          v16 = v43;
          goto LABEL_16;
        }
        v16 = 0;
        v19 = 0;
        v4 = v289;
LABEL_113:
        v92 = (_QWORD *)v4[22];
        v91 = v4[23];
        if ((unint64_t)v92 >= v91)
        {
          v97 = (_QWORD *)v4[21];
          v98 = 0xAAAAAAAAAAAAAAABLL * (v92 - v97) + 1;
          if (v98 > 0xAAAAAAAAAAAAAAALL)
            abort();
          v99 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v91 - (_QWORD)v97) >> 3);
          if (2 * v99 > v98)
            v98 = 2 * v99;
          if (v99 >= 0x555555555555555)
            v100 = 0xAAAAAAAAAAAAAAALL;
          else
            v100 = v98;
          if (v100)
          {
            if (v100 > 0xAAAAAAAAAAAAAAALL)
LABEL_370:
              std::__throw_bad_array_new_length[abi:nn180100]();
            v101 = (char *)operator new(24 * v100);
          }
          else
          {
            v101 = 0;
          }
          v102 = &v101[8 * (v92 - v97)];
          *((_QWORD *)v102 + 1) = 0;
          v103 = (char **)(v102 + 8);
          *((_QWORD *)v102 + 2) = 0;
          *(_QWORD *)v102 = 0;
          v104 = v19 - v16;
          if (v19 != v16)
          {
            if (v104 < 0)
              abort();
            v105 = (char *)operator new(v19 - v16);
            *(_QWORD *)v102 = v105;
            *v103 = v105;
            v106 = &v105[4 * (v104 >> 2)];
            *((_QWORD *)v102 + 2) = v106;
            memcpy(v105, v16, v104);
            *v103 = v106;
          }
          v107 = &v101[24 * v100];
          v96 = v102 + 24;
          if (v92 == v97)
          {
            v4 = v289;
            v289[21] = v102;
            v289[22] = v96;
            v289[23] = v107;
            v7 = v269;
          }
          else
          {
            v7 = v269;
            do
            {
              v108 = v102;
              *((_QWORD *)v102 - 2) = 0;
              *((_QWORD *)v102 - 1) = 0;
              v109 = *(_OWORD *)(v92 - 3);
              v92 -= 3;
              *(_OWORD *)(v102 - 24) = v109;
              v102 -= 24;
              *((_QWORD *)v108 - 1) = v92[2];
              *v92 = 0;
              v92[1] = 0;
              v92[2] = 0;
            }
            while (v92 != v97);
            v4 = v289;
            v92 = (_QWORD *)v289[21];
            v110 = (_QWORD *)v289[22];
            v289[21] = v102;
            v289[22] = v96;
            v289[23] = v107;
            if (v110 != v92)
            {
              v111 = v110;
              do
              {
                v113 = (void *)*(v111 - 3);
                v111 -= 3;
                v112 = v113;
                if (v113)
                {
                  *(v110 - 2) = v112;
                  operator delete(v112);
                }
                v110 = v111;
              }
              while (v111 != v92);
            }
          }
          if (v92)
            operator delete(v92);
        }
        else
        {
          *v92 = 0;
          v92[1] = 0;
          v92[2] = 0;
          v93 = v19 - v16;
          v7 = v269;
          if (v19 != v16)
          {
            if (v93 < 0)
              abort();
            v94 = (char *)operator new(v19 - v16);
            *v92 = v94;
            v92[1] = v94;
            v95 = &v94[4 * (v93 >> 2)];
            v92[2] = v95;
            memcpy(v94, v16, v19 - v16);
            v92[1] = v95;
          }
          v96 = v92 + 3;
          v4[22] = v92 + 3;
        }
        v4[22] = v96;
        if (v16)
          operator delete(v16);
        v10 = v278;
        if (__p)
          operator delete(__p);
        v6 = v280;
      }
      v8 = v10;
    }
    while (v10 != v6);
  }
  v114 = v4[2];
  v4[13] = a2[5];
  v115 = v4[18];
  v116 = v4[19];
  v4[1] = v115;
  v117 = (v116 - v115) >> 3;
  v4[11] = v117;
  v118 = (v4[3] - v114) >> 3;
  v119 = v117 >= v118;
  v120 = v117 - v118;
  v279 = v4 + 2;
  if (v120 != 0 && v119)
  {
    std::vector<gm::Matrix<float,2,1>>::__append((uint64_t)(v4 + 2), v120);
    v117 = v4[11];
  }
  else if (!v119)
  {
    v4[3] = v114 + 8 * v117;
  }
  v121 = v4[5];
  v122 = (v4[6] - v121) >> 3;
  v123 = v117 >= v122;
  v124 = v117 - v122;
  if (v124 != 0 && v123)
  {
    std::vector<gm::Matrix<float,2,1>>::__append((uint64_t)(v4 + 5), v124);
    v117 = v4[11];
  }
  else if (!v123)
  {
    v4[6] = v121 + 8 * v117;
  }
  v273 = v4 + 8;
  std::vector<BOOL>::resize((uint64_t)(v4 + 8), v117);
  v125 = v4[11];
  v126 = v4[14];
  v127 = v4[15];
  v128 = (void **)(v4 + 14);
  v4[12] = v125;
  LODWORD(__x.__begin_) = 0;
  v129 = (v127 - v126) >> 2;
  if (v125 <= v129)
  {
    if (v125 < v129)
      v4[15] = v126 + 4 * v125;
  }
  else
  {
    std::vector<unsigned int>::__append((std::vector<unsigned int> *)(v4 + 14), v125 - v129, (std::vector<unsigned int>::const_reference)&__x);
  }
  v293 = 0;
  StrokeSpecifications = geo::codec::polygonFeatureGetStrokeSpecifications(a2, (uint64_t *)&v293);
  v277 = v4 + 5;
  if (!v293)
    goto LABEL_279;
  v131 = StrokeSpecifications;
  memset(&__x, 0, sizeof(__x));
  v132 = *v274;
  LODWORD(__p) = 0;
  if (v132)
    std::vector<unsigned int>::__append(&__x, v132, (std::vector<unsigned int>::const_reference)&__p);
  v291 = 0;
  v292 = 0;
  __p = &v291;
  v133 = operator new(0x28uLL);
  *v133 = 0;
  v133[1] = 0;
  v133[2] = &v291;
  __p = v133;
  v291 = v133;
  *((_BYTE *)v133 + 24) = 1;
  v292 = 1;
  *((_DWORD *)v133 + 7) = 0;
  *((_DWORD *)v133 + 8) = 0;
  v134 = v293;
  if (!v293)
  {
LABEL_238:
    v177 = *v274;
    goto LABEL_240;
  }
  v135 = 0;
  v136 = 1;
  do
  {
    v138 = v291;
    v139 = *(_DWORD *)&v131[16 * v135 + 12];
    v140 = &v291;
    v141 = &v291;
    if (!v291)
    {
LABEL_185:
      v148 = operator new(0x28uLL);
      v148[7] = v139;
      v148[8] = 0;
      *(_QWORD *)v148 = 0;
      *((_QWORD *)v148 + 1) = 0;
      *((_QWORD *)v148 + 2) = v141;
      *v140 = (uint64_t *)v148;
      v149 = (uint64_t *)v148;
      if (*(_QWORD *)__p)
      {
        __p = *(void **)__p;
        v149 = *v140;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v291, v149);
      v134 = v293;
      v137 = ++v292;
LABEL_167:
      v148[8] = v136;
      v136 = v137;
      goto LABEL_168;
    }
    v142 = &v291;
    v143 = v291;
    do
    {
      v144 = v143;
      v145 = v142;
      v146 = *((_DWORD *)v143 + 7);
      if (v146 >= v139)
        v142 = (uint64_t **)v143;
      else
        ++v143;
      v143 = (uint64_t *)*v143;
    }
    while (v143);
    if (v142 == &v291)
      goto LABEL_182;
    if (v146 < v139)
      v144 = (uint64_t *)v145;
    if (v139 < *((_DWORD *)v144 + 7))
    {
LABEL_182:
      while (1)
      {
        while (1)
        {
          v141 = (uint64_t **)v138;
          v147 = *((_DWORD *)v138 + 7);
          if (v139 >= v147)
            break;
          v138 = *v141;
          v140 = v141;
          if (!*v141)
            goto LABEL_185;
        }
        if (v147 >= v139)
          break;
        v138 = v141[1];
        if (!v138)
        {
          v140 = v141 + 1;
          goto LABEL_185;
        }
      }
      v137 = v136;
      v148 = v141;
      goto LABEL_167;
    }
LABEL_168:
    ++v135;
  }
  while (v135 < v134);
  if (!v134)
    goto LABEL_238;
  v281 = v134;
  v150 = 0;
  LODWORD(v151) = 0;
  v152 = 0;
  v285 = 1;
  do
  {
    v153 = &v131[16 * v150];
    if (*((_DWORD *)v153 + 1) == a3)
    {
      v156 = *((_DWORD *)v153 + 2);
      v155 = (unsigned int *)(v153 + 8);
      v154 = v156;
      if ((v285 & 1) != 0)
      {
        v152 = *(_DWORD *)&v131[16 * v150 + 12];
        LODWORD(v151) = v154;
      }
      else if (v151 < v154)
      {
        v270 = v151;
        v151 = v151;
        do
        {
          v158 = v291;
          v159 = &v291;
          v160 = &v291;
          if (v291)
          {
            while (1)
            {
              while (1)
              {
                v160 = (uint64_t **)v158;
                v161 = *((_DWORD *)v158 + 7);
                if (v152 >= v161)
                  break;
                v158 = *v160;
                v159 = v160;
                if (!*v160)
                  goto LABEL_208;
              }
              if (v161 >= v152)
                break;
              v158 = v160[1];
              if (!v158)
              {
                v159 = v160 + 1;
                goto LABEL_208;
              }
            }
            v157 = *((_DWORD *)v160 + 8);
          }
          else
          {
LABEL_208:
            v162 = (uint64_t *)operator new(0x28uLL);
            *((_DWORD *)v162 + 7) = v152;
            *((_DWORD *)v162 + 8) = 0;
            *v162 = 0;
            v162[1] = 0;
            v162[2] = (uint64_t)v160;
            *v159 = v162;
            if (*(_QWORD *)__p)
            {
              __p = *(void **)__p;
              v162 = *v159;
            }
            v163 = v291;
            v164 = v162 == v291;
            *((_BYTE *)v162 + 24) = v162 == v291;
            if (!v164)
            {
              do
              {
                v165 = v162[2];
                if (*(_BYTE *)(v165 + 24))
                  break;
                v166 = *(uint64_t **)(v165 + 16);
                v167 = *v166;
                if (*v166 == v165)
                {
                  v170 = v166[1];
                  if (!v170 || (v171 = *(unsigned __int8 *)(v170 + 24), v168 = (_BYTE *)(v170 + 24), v171))
                  {
                    if (*(uint64_t **)v165 == v162)
                    {
                      v172 = v162[2];
                    }
                    else
                    {
                      v172 = *(_QWORD *)(v165 + 8);
                      v173 = *(_QWORD *)v172;
                      *(_QWORD *)(v165 + 8) = *(_QWORD *)v172;
                      if (v173)
                      {
                        *(_QWORD *)(v173 + 16) = v165;
                        v166 = *(uint64_t **)(v165 + 16);
                      }
                      *(_QWORD *)(v172 + 16) = v166;
                      *(_QWORD *)(*(_QWORD *)(v165 + 16) + 8 * (**(_QWORD **)(v165 + 16) != v165)) = v172;
                      *(_QWORD *)v172 = v165;
                      *(_QWORD *)(v165 + 16) = v172;
                      v166 = *(uint64_t **)(v172 + 16);
                      v165 = *v166;
                    }
                    *(_BYTE *)(v172 + 24) = 1;
                    *((_BYTE *)v166 + 24) = 0;
                    v176 = *(_QWORD *)(v165 + 8);
                    *v166 = v176;
                    if (v176)
                      *(_QWORD *)(v176 + 16) = v166;
                    *(_QWORD *)(v165 + 16) = v166[2];
                    *(_QWORD *)(v166[2] + 8 * (*(_QWORD *)v166[2] != (_QWORD)v166)) = v165;
                    *(_QWORD *)(v165 + 8) = v166;
                    goto LABEL_198;
                  }
                }
                else if (!v167 || (v169 = *(unsigned __int8 *)(v167 + 24), v168 = (_BYTE *)(v167 + 24), v169))
                {
                  if (*(uint64_t **)v165 == v162)
                  {
                    v174 = v162[1];
                    *(_QWORD *)v165 = v174;
                    if (v174)
                    {
                      *(_QWORD *)(v174 + 16) = v165;
                      v166 = *(uint64_t **)(v165 + 16);
                    }
                    v162[2] = (uint64_t)v166;
                    *(_QWORD *)(*(_QWORD *)(v165 + 16) + 8 * (**(_QWORD **)(v165 + 16) != v165)) = v162;
                    v162[1] = v165;
                    *(_QWORD *)(v165 + 16) = v162;
                    v166 = (uint64_t *)v162[2];
                  }
                  else
                  {
                    v162 = (uint64_t *)v162[2];
                  }
                  *((_BYTE *)v162 + 24) = 1;
                  *((_BYTE *)v166 + 24) = 0;
                  v165 = v166[1];
                  v175 = *(uint64_t **)v165;
                  v166[1] = *(_QWORD *)v165;
                  if (v175)
                    v175[2] = (uint64_t)v166;
                  *(_QWORD *)(v165 + 16) = v166[2];
                  *(_QWORD *)(v166[2] + 8 * (*(_QWORD *)v166[2] != (_QWORD)v166)) = v165;
                  *(_QWORD *)v165 = v166;
LABEL_198:
                  v166[2] = v165;
                  break;
                }
                *(_BYTE *)(v165 + 24) = 1;
                v162 = v166;
                *((_BYTE *)v166 + 24) = v166 == v163;
                *v168 = 1;
              }
              while (v166 != v163);
            }
            v157 = 0;
            v292 = ++v136;
          }
          __x.__begin_[v151++] = v157;
        }
        while (v151 < *v155);
        LODWORD(v151) = v270;
      }
      v285 ^= 1u;
    }
    ++v150;
  }
  while (v150 != v281);
  v177 = *v274;
  v178 = v151;
  if (!(v285 & 1 | (*v274 <= v151)))
  {
    do
    {
      v259 = v291;
      v260 = &v291;
      v261 = &v291;
      if (v291)
      {
        while (1)
        {
          while (1)
          {
            v261 = (uint64_t **)v259;
            v262 = *((_DWORD *)v259 + 7);
            if (v152 >= v262)
              break;
            v259 = *v261;
            v260 = v261;
            if (!*v261)
              goto LABEL_367;
          }
          if (v262 >= v152)
            break;
          v259 = v261[1];
          if (!v259)
          {
            v260 = v261 + 1;
            goto LABEL_367;
          }
        }
        v263 = v261;
      }
      else
      {
LABEL_367:
        v263 = operator new(0x28uLL);
        v263[7] = v152;
        v263[8] = 0;
        *(_QWORD *)v263 = 0;
        *((_QWORD *)v263 + 1) = 0;
        *((_QWORD *)v263 + 2) = v261;
        *v260 = (uint64_t *)v263;
        v264 = (uint64_t *)v263;
        if (*(_QWORD *)__p)
        {
          __p = *(void **)__p;
          v264 = *v260;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v291, v264);
        ++v292;
        v177 = *v274;
      }
      __x.__begin_[v178] = v263[8];
      LODWORD(v151) = v151 + 1;
      v178 = v151;
    }
    while (v177 > v151);
  }
LABEL_240:
  begin = __x.__begin_;
  if (!v177)
  {
    v4 = v289;
    v202 = __x.__begin_;
    goto LABEL_277;
  }
  v180 = 0;
  v4 = v289;
  v181 = v289[21];
  v286 = __x.__begin_;
  while (2)
  {
    if (*(_QWORD *)(v181 + 24 * v180 + 8) != *(_QWORD *)(v181 + 24 * v180))
    {
      v182 = 0;
      v183 = (char *)v4[15];
      while (1)
      {
        v185 = v4[16];
        if ((unint64_t)v183 >= v185)
          break;
        *(_DWORD *)v183 = begin[v180];
        v184 = v183 + 4;
LABEL_247:
        v4[15] = v184;
        ++v182;
        v183 = v184;
        if (v182 >= (uint64_t)(*(_QWORD *)(v181 + 24 * v180 + 8) - *(_QWORD *)(v181 + 24 * v180)) >> 2)
        {
          v177 = *v274;
          goto LABEL_243;
        }
      }
      v186 = v128;
      v187 = (char *)*v128;
      v188 = (v183 - v187) >> 2;
      v189 = v188 + 1;
      if ((unint64_t)(v188 + 1) >> 62)
        abort();
      v190 = v185 - (_QWORD)v187;
      if (v190 >> 1 > v189)
        v189 = v190 >> 1;
      if ((unint64_t)v190 >= 0x7FFFFFFFFFFFFFFCLL)
        v191 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v191 = v189;
      if (v191)
      {
        if (v191 >> 62)
          goto LABEL_370;
        v192 = operator new(4 * v191);
        begin = v286;
      }
      else
      {
        v192 = 0;
      }
      v193 = &v192[4 * v188];
      *v193 = begin[v180];
      v184 = (char *)(v193 + 1);
      if (v183 == v187)
      {
        v4 = v289;
      }
      else
      {
        v194 = v183 - 4 - v187;
        if (v194 < 0xBC
          || &v192[v183 - v187 - 4 - (v194 & 0xFFFFFFFFFFFFFFFCLL)] > &v192[v183 - v187 - 4]
          || &v183[-(v194 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v183 - 4
          || (unint64_t)(v187 - v192) < 0x20)
        {
          v195 = v183;
          v4 = v289;
        }
        else
        {
          v197 = (v194 >> 2) + 1;
          v195 = &v183[-4 * (v197 & 0x7FFFFFFFFFFFFFF8)];
          v198 = &v192[4 * v188 - 16];
          v199 = v183 - 16;
          v200 = v197 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v201 = *(_OWORD *)v199;
            *(v198 - 1) = *((_OWORD *)v199 - 1);
            *v198 = v201;
            v198 -= 2;
            v199 -= 32;
            v200 -= 8;
          }
          while (v200);
          v193 -= v197 & 0x7FFFFFFFFFFFFFF8;
          v4 = v289;
          if (v197 == (v197 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_265;
        }
        do
        {
          v196 = *((_DWORD *)v195 - 1);
          v195 -= 4;
          *--v193 = v196;
        }
        while (v195 != v187);
      }
LABEL_265:
      v4[14] = v193;
      v4[15] = v184;
      v4[16] = &v192[4 * v191];
      if (v187)
      {
        operator delete(v187);
        begin = v286;
        v181 = v4[21];
      }
      v128 = v186;
      goto LABEL_247;
    }
LABEL_243:
    if (++v180 < v177)
      continue;
    break;
  }
  v202 = __x.__begin_;
LABEL_277:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v291);
  if (v202)
    operator delete(v202);
LABEL_279:
  __x.__begin_ = 0;
  CharacteristicPointsForSection = geo::codec::polygonFeatureGetCharacteristicPointsForSection(a2, a3, (uint64_t *)&__x);
  v206 = *v274;
  if (!CharacteristicPointsForSection)
  {
LABEL_299:
    if (!v206)
      return v289;
    v224 = 0;
    v225 = 0;
    v268 = v289[11];
    v271 = v289[12];
LABEL_303:
    v226 = v224;
    v227 = v224 - 1;
    if (v271 == v268)
      goto LABEL_304;
    v232 = v289[11];
    v233 = (v227 + v232) % v232;
    v234 = *(_QWORD *)(*v273 + ((v233 >> 3) & 0x1FFFFFFFFFFFFFF8)) & (1 << v233);
    if ((*(_QWORD *)(*v273 + (((unint64_t)v224 >> 3) & 0x1FFFFFFFFFFFFFF8)) & (1 << v224)) != 0 || !v234)
    {
      if ((*(_QWORD *)(*v273 + (((unint64_t)v224 >> 3) & 0x1FFFFFFFFFFFFFF8)) & (1 << v224)) != 0 && !v234)
      {
        GhostPoint = (float32x2_t *)geo::codec::multiSectionFeatureGetGhostPoint((uint64_t)a2, a3, v225);
        if (GhostPoint)
        {
          *(_QWORD *)&v205 = *(_QWORD *)(*v265 + 8 * v224);
          v230 = vsub_f32(*GhostPoint, *(float32x2_t *)&v205);
          v235 = (float32x2_t *)(*v265 + 8 * v233);
          goto LABEL_314;
        }
      }
    }
    else
    {
      v235 = (float32x2_t *)geo::codec::multiSectionFeatureGetGhostPoint((uint64_t)a2, a3, v225);
      if (v235)
      {
        *(_QWORD *)&v205 = *(_QWORD *)(*v265 + 8 * v224);
        v230 = vsub_f32(*(float32x2_t *)(*v265 + 8 * ((v224 + 1) % v232)), *(float32x2_t *)&v205);
LABEL_314:
        if (*(_QWORD *)(v289[21] + 24 * v225 + 8) == *(_QWORD *)(v289[21] + 24 * v225))
          goto LABEL_302;
        v231 = *v235;
LABEL_316:
        v237 = vsub_f32(*(float32x2_t *)&v205, v231);
        *(float32x2_t *)&v205 = vmul_f32(v230, v230);
        *(float *)&v205 = sqrtf(vaddv_f32(*(float32x2_t *)&v205));
        *(_OWORD *)v287 = v205;
        if (*(float *)&v205 <= 0.00000011921)
        {
          if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
            dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
          v238 = (id)GEOGetVectorKitVKDefaultLog_log;
          if (os_log_type_enabled(v238, OS_LOG_TYPE_ERROR))
          {
            LOWORD(__x.__begin_) = 0;
            _os_log_impl(&dword_19F029000, v238, OS_LOG_TYPE_ERROR, "Zero Length edge on polygon boundary", (uint8_t *)&__x, 2u);
          }

        }
        else
        {
          *(float32x2_t *)(*v279 + 8 * v224) = vdiv_f32(v230, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v205, 0));
        }
        *(float32x2_t *)&v204 = vmul_f32(v237, v237);
        *(float *)&v204 = sqrtf(vaddv_f32(*(float32x2_t *)&v204));
        v282 = v204;
        if (*(float *)&v204 <= 0.00000011921)
        {
          if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
            dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
          v257 = (id)GEOGetVectorKitVKDefaultLog_log;
          if (os_log_type_enabled(v257, OS_LOG_TYPE_ERROR))
          {
            LOWORD(__x.__begin_) = 0;
            _os_log_impl(&dword_19F029000, v257, OS_LOG_TYPE_ERROR, "Zero Length edge on polygon boundary", (uint8_t *)&__x, 2u);
          }

          v239 = (float32x2_t)0x3F80000000000000;
          if (*(float *)v287 > 0.00000011921)
            goto LABEL_326;
        }
        else
        {
          v239 = vdiv_f32(v237, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v204, 0));
          *(float32x2_t *)(*v277 + 8 * v226) = v239;
          *((std::vector<unsigned int>::pointer *)&v205 + 1) = v287[1];
          if (*(float *)v287 > 0.00000011921)
          {
LABEL_326:
            *((_QWORD *)&v204 + 1) = *((_QWORD *)&v282 + 1);
            if (*(float *)&v282 <= 0.00000011921)
            {
              v240 = (_DWORD *)(*v279 + 8 * v226);
              v241 = (_DWORD *)(*v277 + 8 * v226);
              *v241 = *v240;
              v241[1] = v240[1];
            }
            if (*(_QWORD *)(v289[21] + 24 * v225 + 8) - *(_QWORD *)(v289[21] + 24 * v225) < 5uLL)
            {
              v224 = v226 + 1;
              goto LABEL_302;
            }
            v242 = 0;
            v243 = 8 * v226;
            v244 = 1;
            v245 = v289;
            while (1)
            {
              v246 = v245[11];
              v247 = v245[1];
              v248 = *(float32x2_t *)(v247 + v243 + 8 * v244);
              v249 = vsub_f32(*(float32x2_t *)(v247 + 8 * ((v226 + v244 + 1) % v246)), v248);
              v250 = *(float32x2_t *)(v247 + 8 * ((v226 + v244 + v246 - 1) % v246));
              *(float32x2_t *)&v205 = vmul_f32(v249, v249);
              *(float *)&v205 = sqrtf(vaddv_f32(*(float32x2_t *)&v205));
              v288 = v205;
              if (*(float *)&v205 <= 0.00000011921)
              {
                if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
                  dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
                v251 = (id)GEOGetVectorKitVKDefaultLog_log;
                if (os_log_type_enabled(v251, OS_LOG_TYPE_ERROR))
                {
                  LOWORD(__x.__begin_) = 0;
                  _os_log_impl(&dword_19F029000, v251, OS_LOG_TYPE_ERROR, "Zero Length edge on polygon boundary", (uint8_t *)&__x, 2u);
                }

              }
              else
              {
                *(float32x2_t *)(*v279 + v243 + 8 * v244) = vdiv_f32(v249, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v205, 0));
              }
              v252 = vsub_f32(v248, v250);
              *(float32x2_t *)&v205 = vmul_f32(v252, v252);
              *(float *)&v205 = sqrtf(vaddv_f32(*(float32x2_t *)&v205));
              v283 = v205;
              if (*(float *)&v205 <= 0.00000011921)
                break;
              v253 = vdiv_f32(v252, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v205, 0));
              *(float32x2_t *)(*v277 + v243 + 8 * v244) = v253;
              *((_QWORD *)&v205 + 1) = *((_QWORD *)&v288 + 1);
              if (*(float *)&v288 <= 0.00000011921)
                goto LABEL_340;
LABEL_341:
              *((_QWORD *)&v204 + 1) = *((_QWORD *)&v283 + 1);
              if (*(float *)&v283 <= 0.00000011921)
              {
                v254 = *v279 + v243 + v242;
                v255 = *v277 + v243 + v242;
                *(_DWORD *)(v255 + 8) = *(_DWORD *)(v254 + 8);
                *(_DWORD *)(v255 + 12) = *(_DWORD *)(v254 + 12);
              }
              ++v244;
              v245 = v289;
              v242 += 8;
              if (v244 >= (uint64_t)(*(_QWORD *)(v289[21] + 24 * v225 + 8) - *(_QWORD *)(v289[21] + 24 * v225)) >> 2)
              {
                v224 = v226 + v244;
LABEL_302:
                if (++v225 >= *v274)
                  return v289;
                goto LABEL_303;
              }
            }
            if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
              dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
            v256 = (id)GEOGetVectorKitVKDefaultLog_log;
            if (os_log_type_enabled(v256, OS_LOG_TYPE_ERROR))
            {
              LOWORD(__x.__begin_) = 0;
              _os_log_impl(&dword_19F029000, v256, OS_LOG_TYPE_ERROR, "Zero Length edge on polygon boundary", (uint8_t *)&__x, 2u);
            }

            v253 = (float32x2_t)0x3F80000000000000;
            if (*(float *)&v288 > 0.00000011921)
              goto LABEL_341;
LABEL_340:
            *(float32x2_t *)(*v279 + v243 + 8 * v244) = v253;
            goto LABEL_341;
          }
        }
        *(float32x2_t *)(*v279 + 8 * v226) = v239;
        goto LABEL_326;
      }
    }
LABEL_304:
    if (*(_QWORD *)(v289[21] + 24 * v225 + 8) == *(_QWORD *)(v289[21] + 24 * v225))
      goto LABEL_302;
    v228 = v289[11];
    v229 = v289[1];
    *(_QWORD *)&v205 = *(_QWORD *)(v229 + 8 * v224);
    v230 = vsub_f32(*(float32x2_t *)(v229 + 8 * ((v224 + 1) % v228)), *(float32x2_t *)&v205);
    v231 = *(float32x2_t *)(v229 + 8 * ((v227 + v228) % v228));
    goto LABEL_316;
  }
  if (v206)
  {
    v207 = 0;
    v208 = 0;
    v209 = 0;
    v210 = v4[21];
    do
    {
      if (v208 >= __x.__begin_)
      {
LABEL_288:
        v214 = 0;
      }
      else
      {
        v211 = &CharacteristicPointsForSection[100 * (_QWORD)v208 + 12];
        v212 = v208;
        while (1)
        {
          v213 = *(_DWORD *)v211;
          v211 += 100;
          if (v209 == v213)
            break;
          v212 = (std::vector<unsigned int>::pointer)((char *)v212 + 1);
          if (__x.__begin_ == v212)
            goto LABEL_288;
        }
        v214 = CharacteristicPointsForSection[100 * (_QWORD)v212 + 28] != 0;
        v208 = v212;
      }
      v215 = *(_QWORD *)(v210 + 24 * v209 + 8) - *(_QWORD *)(v210 + 24 * v209);
      if (v215)
      {
        v216 = v215 >> 2;
        v217 = *v273;
        v218 = v207;
        if (v216 <= 1)
          v219 = 1;
        else
          v219 = v216;
        if (v214)
        {
          do
          {
            v220 = v218 >> 3;
            v221 = 1 << v218++;
            *(_QWORD *)(v217 + (v220 & 0x1FFFFFFFFFFFFFF8)) |= v221;
            --v219;
          }
          while (v219);
        }
        else
        {
          do
          {
            v222 = v218 >> 3;
            v223 = 1 << v218++;
            *(_QWORD *)(v217 + (v222 & 0x1FFFFFFFFFFFFFF8)) &= ~v223;
            ++v4[12];
            --v219;
          }
          while (v219);
        }
        v207 = v218;
      }
      ++v209;
      v206 = *v274;
    }
    while (v209 < *v274);
    goto LABEL_299;
  }
  return v289;
}

void sub_19FD5E840(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p)
{
  _QWORD *v29;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;

  if (__p)
    operator delete(__p);
  v31 = v29[21];
  if (v31)
  {
    v32 = v29[22];
    v33 = (void *)v29[21];
    if (v32 != v31)
    {
      v34 = v29[22];
      do
      {
        v36 = *(void **)(v34 - 24);
        v34 -= 24;
        v35 = v36;
        if (v36)
        {
          *(_QWORD *)(v32 - 16) = v35;
          operator delete(v35);
        }
        v32 = v34;
      }
      while (v34 != v31);
      v33 = (void *)v29[21];
    }
    v29[22] = v31;
    operator delete(v33);
  }
  v37 = *a16;
  if (*a16)
  {
    v29[19] = v37;
    operator delete(v37);
  }
  *v29 = &off_1E428FC30;
  v38 = (void *)v29[14];
  if (v38)
  {
    v29[15] = v38;
    operator delete(v38);
    v39 = (void *)v29[8];
    if (!v39)
    {
LABEL_15:
      v40 = (void *)v29[5];
      if (!v40)
        goto LABEL_16;
      goto LABEL_20;
    }
  }
  else
  {
    v39 = (void *)v29[8];
    if (!v39)
      goto LABEL_15;
  }
  operator delete(v39);
  v40 = (void *)v29[5];
  if (!v40)
  {
LABEL_16:
    v41 = (void *)v29[2];
    if (!v41)
LABEL_22:
      _Unwind_Resume(exception_object);
LABEL_21:
    v29[3] = v41;
    operator delete(v41);
    _Unwind_Resume(exception_object);
  }
LABEL_20:
  v29[6] = v40;
  operator delete(v40);
  v41 = (void *)v29[2];
  if (!v41)
    goto LABEL_22;
  goto LABEL_21;
}

void md::NotificationObserver::~NotificationObserver(md::NotificationObserver *this)
{
  __CFNotificationCenter *LocalCenter;

  *(_QWORD *)this = &off_1E4299F90;
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterRemoveEveryObserver(LocalCenter, this);
}

{
  __CFNotificationCenter *LocalCenter;

  *(_QWORD *)this = &off_1E4299F90;
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterRemoveEveryObserver(LocalCenter, this);
  JUMPOUT(0x1A1AF4E00);
}

void notificationHandler(__CFNotificationCenter *a1, void *a2, const __CFString *a3, const void *a4, const __CFDictionary *a5)
{
  if (a2)
  {
    if (objc_msgSend((id)*MEMORY[0x1E0C99720], "isEqualToString:", a3, a4, a5))
      (*(void (**)(void *))(*(_QWORD *)a2 + 16))(a2);
  }
}

void ggl::FlyoverMorphNight::MorphPipelineState::~MorphPipelineState(ggl::FlyoverMorphNight::MorphPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::FlyoverMorphNight::MorphPipelineState::MorphPipelineState(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD *a4)
{
  unsigned __int8 v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v10;
  char v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  _OWORD *v17;
  ggl::FlyoverMorphNightShader *v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  _QWORD *v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[28];

  if ((v5 & 1) == 0)
  {
    v17 = a4;
    v25 = a2;
    v26 = a3;
    a2 = v25;
    a3 = v26;
    a4 = v17;
    if ((_DWORD)v18)
    {
      if ((v19 & 1) == 0)
      {
        if ((_DWORD)v18)
        {
          if ((v22 & 1) == 0
          {
            if ((v24 & 1) == 0
            {
              ggl::MeshTyped<ggl::FlyoverMorph::Vertex>::attributesReflection(void)::r = (uint64_t)&ggl::FlyoverMorph::vertexReflection;
            }
            ggl::MeshTyped<ggl::FlyoverMorph::Vertex>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::FlyoverMorph::Vertex>::attributesReflection(void)::r;
            unk_1EE5761A8 = 1;
          }
          ggl::FlyoverMorphNight::MorphPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::FlyoverMorph::Vertex>::typedReflection(void)::r;
          *(_QWORD *)algn_1EE575F78 = &ggl::FlyoverMorphNight::pipelineDataMorphPipelineDeviceStructs(void)::ref;
          qword_1EE575F80 = 0;
          if ((v23 & 1) == 0
          {
            ggl::FlyoverMorphNight::pipelineDataMorphPipelineConstantStructs(void)::ref = (uint64_t)ggl::FlyoverCommon::Shared::reflection(void)::reflection;
            unk_1EE575FB0 = ggl::FlyoverCommon::Transform::reflection(void)::reflection;
            qword_1EE575FB8 = (uint64_t)ggl::FlyoverCommon::Clip::reflection(void)::reflection;
            unk_1EE575FC0 = ggl::FlyoverCommon::Material::reflection(void)::reflection;
            qword_1EE575FC8 = (uint64_t)ggl::FlyoverCommon::Texcoords::reflection(void)::reflection;
            unk_1EE575FD0 = ggl::FlyoverMorph::Morph::reflection(void)::reflection;
          }
          qword_1EE575F88 = (uint64_t)&ggl::FlyoverMorphNight::pipelineDataMorphPipelineConstantStructs(void)::ref;
          unk_1EE575F90 = xmmword_19FFB5830;
        }
      }
      ggl::FlyoverMorphNight::MorphPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::FlyoverMorphNight::MorphPipelineSetup::typedReflection(void)::ref;
      ggl::FlyoverMorphNightShader::typedReflection(v18);
      qword_1EE58B790 = (uint64_t)&ggl::FlyoverMorphNightShader::typedReflection(void)::ref;
      if ((v20 & 1) == 0
      {
        ggl::FlyoverMorphNight::pipelineStateMorphPipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE58B7F0 = 0;
        qword_1EE58B7F8 = (uint64_t)"";
        dword_1EE58B800 = 0;
        qword_1EE58B808 = (uint64_t)&ggl::FlyoverMorphNight::pipelineStateMorphPipelineAttributeBinding_0(void)::attr;
        unk_1EE58B810 = 4;
      }
      qword_1EE58B798 = (uint64_t)&ggl::FlyoverMorphNight::pipelineStateMorphPipelineAttributeStructBinding(void)::attr;
      unk_1EE58B7A0 = 1;
      qword_1EE58B7A8 = 0;
      unk_1EE58B7B0 = 5;
      qword_1EE58B7B8 = (uint64_t)&ggl::FlyoverMorphNight::pipelineStateMorphPipelineDeviceStructBinding(void)::ref;
      unk_1EE58B7C0 = 0;
      if ((v21 & 1) == 0
      {
        ggl::FlyoverMorphNight::pipelineStateMorphPipelineConstantStructBinding(void)::ref = 0;
        unk_1EE58B830 = 0;
        qword_1EE58B838 = (uint64_t)"sharedConstants";
        dword_1EE58B840 = 3;
        qword_1EE58B848 = (uint64_t)&ggl::FlyoverMorphNight::pipelineStateMorphPipelineConstantSharedConstantsBinding(void)::reflection;
        *(_OWORD *)algn_1EE58B850 = xmmword_19FFB3030;
        qword_1EE58B860 = 1;
        unk_1EE58B868 = "transform";
        dword_1EE58B870 = 3;
        qword_1EE58B878 = (uint64_t)&ggl::FlyoverMorphNight::pipelineStateMorphPipelineConstantTransformBinding(void)::reflection;
        unk_1EE58B880 = vdupq_n_s64(2uLL);
        qword_1EE58B890 = 2;
        unk_1EE58B898 = "clip";
        dword_1EE58B8A0 = 3;
        qword_1EE58B8A8 = (uint64_t)&ggl::FlyoverMorphNight::pipelineStateMorphPipelineConstantClipBinding(void)::reflection;
        *(_OWORD *)algn_1EE58B8B0 = xmmword_19FFB3040;
        qword_1EE58B8C0 = 3;
        unk_1EE58B8C8 = "material";
        dword_1EE58B8D0 = 3;
        qword_1EE58B8D8 = (uint64_t)&ggl::FlyoverMorphNight::pipelineStateMorphPipelineConstantMaterialBinding(void)::reflection;
        unk_1EE58B8E0 = xmmword_19FFB3050;
        qword_1EE58B8F0 = 4;
        unk_1EE58B8F8 = "texcoords";
        dword_1EE58B900 = 3;
        qword_1EE58B908 = (uint64_t)&ggl::FlyoverMorphNight::pipelineStateMorphPipelineConstantTexcoordsBinding(void)::reflection;
        *(_OWORD *)algn_1EE58B910 = xmmword_19FFB4860;
        qword_1EE58B920 = 5;
        unk_1EE58B928 = "morph";
        dword_1EE58B930 = 3;
        qword_1EE58B938 = (uint64_t)&ggl::FlyoverMorphNight::pipelineStateMorphPipelineConstantMorphBinding(void)::reflection;
        unk_1EE58B940 = 3;
      }
      qword_1EE58B7C8 = (uint64_t)&ggl::FlyoverMorphNight::pipelineStateMorphPipelineConstantStructBinding(void)::ref;
      unk_1EE58B7D0 = 6;
      a4 = v17;
      a2 = v25;
      a3 = v26;
    }
  }
  v6 = *a2;
  v7 = (std::__shared_weak_count *)a2[1];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  *(_OWORD *)v29 = *(_OWORD *)a3;
  *(_OWORD *)&v29[12] = *(_OWORD *)(a3 + 12);
  v10 = *(_OWORD *)(a3 + 28);
  v11 = *(_BYTE *)(a3 + 44);
  v27 = *a4;
  v28 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &off_1E42B6760;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = &ggl::FlyoverMorphNight::MorphPipelineState::typedReflection(void)::ref;
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = v7;
  if (v7)
  {
    v12 = (unint64_t *)&v7->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_BYTE *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 148) = 0;
  *(_QWORD *)(a1 + 140) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 180) = 0;
  *(_QWORD *)(a1 + 196) = 0;
  *(_QWORD *)(a1 + 188) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 228) = 0;
  *(_QWORD *)(a1 + 244) = 0;
  *(_QWORD *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v27;
  *(_OWORD *)(a1 + 272) = v28;
  *(_BYTE *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0x100000001;
  *(_BYTE *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v29;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v29[12];
  *(_OWORD *)(a1 + 92) = v10;
  *(_BYTE *)(a1 + 108) = v11;
  if (v7)
  {
    v14 = (unint64_t *)&v7->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_QWORD *)a1 = &off_1E42BA0C0;
  return a1;
}

void ggl::FlyoverMorphNight::MorphPipelineSetup::~MorphPipelineSetup(ggl::FlyoverMorphNight::MorphPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::FlyoverMorphNight::MorphPipelineSetup::constantDataIsEnabled(ggl::FlyoverMorphNight::MorphPipelineSetup *this, unint64_t a2)
{
  return a2 < 6;
}

BOOL ggl::FlyoverMorphNight::MorphPipelineSetup::textureIsEnabled(ggl::FlyoverMorphNight::MorphPipelineSetup *this, unint64_t a2)
{
  return a2 < 5;
}

void md::ARRenderEntityGenerationLogic::~ARRenderEntityGenerationLogic(md::ARRenderEntityGenerationLogic *this)
{
  md::ARRenderEntityGenerationLogic::~ARRenderEntityGenerationLogic(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  *(_QWORD *)this = &off_1E42A6418;
  v2 = (void *)*((_QWORD *)this + 29);
  if (v2)
  {
    *((_QWORD *)this + 30) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 26);
  if (v3)
  {
    *((_QWORD *)this + 27) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 23);
  if (v4)
  {
    *((_QWORD *)this + 24) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 20);
  if (v5)
  {
    *((_QWORD *)this + 21) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 17);
  if (v6)
  {
    *((_QWORD *)this + 18) = v6;
    operator delete(v6);
  }
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
}

uint64_t md::ARRenderEntityGenerationLogic::didBecomeInactive(md::ARRenderEntityGenerationLogic *this)
{
  return (*(uint64_t (**)(md::ARRenderEntityGenerationLogic *))(*(_QWORD *)this + 16))(this);
}

uint64_t md::Logic<md::ARRenderEntityGenerationLogic,md::ARRenderEntityGenerationContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::AROcclusionGenerationContext,md::ARProcessMeshComponentsContext,md::LabelsExternalMeshContext,md::ARApplyWorldTransformUpdatesContext>,gdc::TypeList<>>>::_allocateContext@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t result;

  v4 = (_QWORD *)operator new();
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  result = operator new();
  v4[2] = "md::ARRenderEntityGenerationContext]";
  v4[3] = 35;
  v4[4] = result;
  *v4 = &off_1E42B15E0;
  v4[1] = 0x51AAE9259E4A5431;
  *a2 = v4;
  return result;
}

void sub_19FD5F274(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::ARRenderEntityGenerationLogic,md::ARRenderEntityGenerationContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::AROcclusionGenerationContext,md::ARProcessMeshComponentsContext,md::LabelsExternalMeshContext,md::ARApplyWorldTransformUpdatesContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[6];

  if (*(_QWORD *)(a3 + 8) == 0x51AAE9259E4A5431)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::AROcclusionGenerationContext,md::ARProcessMeshComponentsContext,md::LabelsExternalMeshContext,md::ARApplyWorldTransformUpdatesContext>,gdc::TypeList<>>::buildRequiredTuple<md::ARLogicContext,md::AROcclusionGenerationContext,md::ARProcessMeshComponentsContext,md::LabelsExternalMeshContext,md::ARApplyWorldTransformUpdatesContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 128))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::ARRenderEntityGenerationLogic,md::ARRenderEntityGenerationContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::AROcclusionGenerationContext,md::ARProcessMeshComponentsContext,md::LabelsExternalMeshContext,md::ARApplyWorldTransformUpdatesContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[6];

  if (*(_QWORD *)(a3 + 8) == 0x51AAE9259E4A5431)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::AROcclusionGenerationContext,md::ARProcessMeshComponentsContext,md::LabelsExternalMeshContext,md::ARApplyWorldTransformUpdatesContext>,gdc::TypeList<>>::buildRequiredTuple<md::ARLogicContext,md::AROcclusionGenerationContext,md::ARProcessMeshComponentsContext,md::LabelsExternalMeshContext,md::ARApplyWorldTransformUpdatesContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 136))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::ARRenderEntityGenerationLogic,md::ARRenderEntityGenerationContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::AROcclusionGenerationContext,md::ARProcessMeshComponentsContext,md::LabelsExternalMeshContext,md::ARApplyWorldTransformUpdatesContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[6];

  if (*(_QWORD *)(a3 + 8) == 0x51AAE9259E4A5431)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::AROcclusionGenerationContext,md::ARProcessMeshComponentsContext,md::LabelsExternalMeshContext,md::ARApplyWorldTransformUpdatesContext>,gdc::TypeList<>>::buildRequiredTuple<md::ARLogicContext,md::AROcclusionGenerationContext,md::ARProcessMeshComponentsContext,md::LabelsExternalMeshContext,md::ARApplyWorldTransformUpdatesContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 144))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::ARRenderEntityGenerationLogic,md::ARRenderEntityGenerationContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::AROcclusionGenerationContext,md::ARProcessMeshComponentsContext,md::LabelsExternalMeshContext,md::ARApplyWorldTransformUpdatesContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[6];

  if (*(_QWORD *)(a3 + 8) == 0x51AAE9259E4A5431)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::AROcclusionGenerationContext,md::ARProcessMeshComponentsContext,md::LabelsExternalMeshContext,md::ARApplyWorldTransformUpdatesContext>,gdc::TypeList<>>::buildRequiredTuple<md::ARLogicContext,md::AROcclusionGenerationContext,md::ARProcessMeshComponentsContext,md::LabelsExternalMeshContext,md::ARApplyWorldTransformUpdatesContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 152))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::ARRenderEntityGenerationLogic,md::ARRenderEntityGenerationContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::AROcclusionGenerationContext,md::ARProcessMeshComponentsContext,md::LabelsExternalMeshContext,md::ARApplyWorldTransformUpdatesContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[6];

  if (*(_QWORD *)(a3 + 8) == 0x51AAE9259E4A5431 && (v4 = *(_QWORD *)(a3 + 32)) != 0)
  {
    v6 = result;
    md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::AROcclusionGenerationContext,md::ARProcessMeshComponentsContext,md::LabelsExternalMeshContext,md::ARApplyWorldTransformUpdatesContext>,gdc::TypeList<>>::buildRequiredTuple<md::ARLogicContext,md::AROcclusionGenerationContext,md::ARProcessMeshComponentsContext,md::LabelsExternalMeshContext,md::ARApplyWorldTransformUpdatesContext>(v7, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v6 + 160))(v6, a2, v7, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

uint64_t md::Logic<md::ARRenderEntityGenerationLogic,md::ARRenderEntityGenerationContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::AROcclusionGenerationContext,md::ARProcessMeshComponentsContext,md::LabelsExternalMeshContext,md::ARApplyWorldTransformUpdatesContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

uint64_t md::ARRenderEntityGenerationLogic::runBeforeLayout(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 **v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  int *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  __int128 *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  __int128 *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  int *v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  __int128 *v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  __int128 *v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  __int128 *v150;
  int *v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  uint64_t v203;
  __int128 *v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t v207;
  __int128 *v208;
  uint64_t *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  std::__shared_weak_count **v213;
  uint64_t v214;
  uint64_t v215;
  __int128 *v216;
  uint64_t v217;
  uint64_t v218;
  int *v219;
  uint64_t v220;
  uint64_t v221;
  _QWORD *v222;
  _QWORD *v223;
  _QWORD *v224;
  uint64_t v225;
  uint64_t v226;
  _QWORD *v227;
  uint64_t *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  _QWORD *v232;
  _QWORD *v233;
  uint64_t v234;
  uint64_t i;
  uint64_t v236;
  uint64_t v237;
  __int128 *v238;
  int *v239;
  unint64_t v240;
  unint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  unint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v250;
  uint64_t v251;
  unint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v257;
  unint64_t v258;
  uint64_t v259;
  unint64_t v260;
  uint64_t v261;
  uint64_t v262;
  unint64_t v263;
  uint64_t v264;
  uint64_t v266;
  unint64_t v267;
  uint64_t v268;
  unint64_t v269;
  uint64_t v270;
  uint64_t v271;
  unint64_t v272;
  uint64_t v273;
  uint64_t v274;
  unint64_t v275;
  uint64_t v276;
  unint64_t v277;
  uint64_t v278;
  uint64_t v279;
  unint64_t v280;
  uint64_t v281;
  unint64_t v282;
  uint64_t v283;
  unint64_t v284;
  uint64_t v285;
  unint64_t v286;
  uint64_t v287;
  __int128 *v288;
  uint64_t v289;
  unint64_t v290;
  uint64_t v291;
  __int128 *v292;
  uint64_t v293;
  unint64_t v294;
  uint64_t v295;
  int *v296;
  unint64_t v297;
  unint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  unint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v307;
  uint64_t v308;
  unint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v314;
  unint64_t v315;
  uint64_t v316;
  unint64_t v317;
  uint64_t v318;
  uint64_t v319;
  unint64_t v320;
  uint64_t v321;
  uint64_t v323;
  unint64_t v324;
  uint64_t v325;
  unint64_t v326;
  uint64_t v327;
  uint64_t v328;
  unint64_t v329;
  uint64_t v330;
  uint64_t v331;
  unint64_t v332;
  uint64_t v333;
  unint64_t v334;
  uint64_t v335;
  uint64_t v336;
  unint64_t v337;
  uint64_t v338;
  uint64_t *v339;
  unint64_t v340;
  uint64_t v341;
  unint64_t v342;
  uint64_t v343;
  unint64_t v344;
  uint64_t v345;
  __int128 *v346;
  uint64_t v347;
  unint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  unint64_t v352;
  uint64_t v353;
  __int128 *v354;
  unint64_t v355;
  unint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  unint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v365;
  uint64_t v366;
  unint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v372;
  unint64_t v373;
  uint64_t v374;
  unint64_t v375;
  uint64_t v376;
  uint64_t v377;
  unint64_t v378;
  uint64_t v379;
  uint64_t v381;
  unint64_t v382;
  uint64_t v383;
  unint64_t v384;
  uint64_t v385;
  uint64_t v386;
  unint64_t v387;
  uint64_t v388;
  uint64_t v389;
  unint64_t v390;
  uint64_t v391;
  unint64_t v392;
  uint64_t v393;
  uint64_t v394;
  unint64_t v395;
  uint64_t v396;
  unint64_t v397;
  uint64_t v398;
  unint64_t v399;
  uint64_t v400;
  unint64_t v401;
  uint64_t v402;
  __int128 *v403;
  uint64_t v404;
  unint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  unint64_t v409;
  uint64_t v410;
  int *v411;
  unint64_t v412;
  unint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  unint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v422;
  unint64_t v423;
  uint64_t v424;
  unint64_t v425;
  uint64_t v426;
  uint64_t v427;
  unint64_t v428;
  uint64_t v429;
  uint64_t v431;
  unint64_t v432;
  uint64_t v433;
  unint64_t v434;
  uint64_t v435;
  uint64_t v436;
  unint64_t v437;
  uint64_t v438;
  uint64_t v440;
  unint64_t v441;
  uint64_t v442;
  unint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  unint64_t v449;
  uint64_t v450;
  unint64_t v451;
  uint64_t v452;
  uint64_t v453;
  unint64_t v454;
  uint64_t v455;
  unint64_t v456;
  uint64_t v457;
  unint64_t v458;
  uint64_t v459;
  __int128 *v460;
  uint64_t v461;
  unint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  unint64_t v466;
  uint64_t v467;
  __int128 *v468;
  uint64_t v469;
  unint64_t v470;
  uint64_t v471;
  __int128 *v472;
  uint64_t v473;
  unint64_t v474;
  uint64_t v475;
  int *v476;
  unint64_t v477;
  unint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  unint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v487;
  unint64_t v488;
  uint64_t v489;
  unint64_t v490;
  uint64_t v491;
  uint64_t v492;
  unint64_t v493;
  uint64_t v494;
  uint64_t v496;
  unint64_t v497;
  uint64_t v498;
  unint64_t v499;
  uint64_t v500;
  uint64_t v501;
  unint64_t v502;
  uint64_t v503;
  uint64_t v505;
  unint64_t v506;
  uint64_t v507;
  unint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  unint64_t v514;
  uint64_t v515;
  unint64_t v516;
  uint64_t v517;
  uint64_t v518;
  unint64_t v519;
  uint64_t v520;
  unint64_t v521;
  uint64_t v522;
  unint64_t v523;
  uint64_t v524;
  __int128 *v525;
  uint64_t v526;
  unint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  unint64_t v531;
  uint64_t v532;
  __int128 *v533;
  uint64_t v534;
  unint64_t v535;
  uint64_t v536;
  __int128 *v537;
  uint64_t v538;
  unint64_t v539;
  uint64_t v540;
  int *v541;
  unint64_t v542;
  unint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  unint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v552;
  uint64_t v553;
  unint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v559;
  unint64_t v560;
  uint64_t v561;
  unint64_t v562;
  uint64_t v563;
  uint64_t v564;
  unint64_t v565;
  uint64_t v566;
  uint64_t v568;
  unint64_t v569;
  uint64_t v570;
  unint64_t v571;
  uint64_t v572;
  uint64_t v573;
  unint64_t v574;
  uint64_t v575;
  uint64_t v576;
  unint64_t v577;
  uint64_t v578;
  unint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  unint64_t v584;
  uint64_t v585;
  uint64_t v586;
  unint64_t v587;
  uint64_t v588;
  unint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  unint64_t v593;
  uint64_t v594;
  __int128 *v595;
  uint64_t v596;
  unint64_t v597;
  uint64_t v598;
  __int128 *v599;
  uint64_t v600;
  unint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  std::__shared_weak_count **v605;
  int *v606;
  unint64_t v607;
  unint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  unint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v617;
  uint64_t v618;
  unint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v624;
  unint64_t v625;
  uint64_t v626;
  unint64_t v627;
  uint64_t v628;
  uint64_t v629;
  unint64_t v630;
  uint64_t v631;
  uint64_t v633;
  unint64_t v634;
  uint64_t v635;
  unint64_t v636;
  uint64_t v637;
  uint64_t v638;
  unint64_t v639;
  uint64_t v640;
  uint64_t v641;
  unint64_t v642;
  uint64_t v643;
  unint64_t v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  unint64_t v649;
  uint64_t v650;
  uint64_t v651;
  unint64_t v652;
  uint64_t v653;
  unint64_t v654;
  uint64_t v655;
  __int128 *v656;
  uint64_t v657;
  unint64_t v658;
  uint64_t v659;
  __int128 *v660;
  uint64_t v661;
  unint64_t v662;
  uint64_t v663;
  __int128 *v664;
  uint64_t v665;
  unint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  __int128 *v670;
  int *v671;
  unint64_t v672;
  unint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  unint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v682;
  uint64_t v683;
  unint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v689;
  unint64_t v690;
  uint64_t v691;
  unint64_t v692;
  uint64_t v693;
  uint64_t v694;
  unint64_t v695;
  uint64_t v696;
  uint64_t v698;
  unint64_t v699;
  uint64_t v700;
  unint64_t v701;
  uint64_t v702;
  uint64_t v703;
  unint64_t v704;
  uint64_t v705;
  uint64_t v706;
  unint64_t v707;
  uint64_t v708;
  unint64_t v709;
  uint64_t v710;
  uint64_t v711;
  unint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  unint64_t v716;
  unint64_t v717;
  uint64_t v718;
  unint64_t v719;
  uint64_t v720;
  unint64_t v721;
  uint64_t v722;
  __int128 *v723;
  uint64_t v724;
  unint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  unint64_t v729;
  uint64_t v730;
  __int128 *v731;
  uint64_t v732;
  unint64_t v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  __int128 *v737;
  int *v738;
  unint64_t v739;
  unint64_t v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  unint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v749;
  uint64_t v750;
  unint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v756;
  unint64_t v757;
  uint64_t v758;
  unint64_t v759;
  uint64_t v760;
  uint64_t v761;
  unint64_t v762;
  uint64_t v763;
  uint64_t v765;
  unint64_t v766;
  uint64_t v767;
  unint64_t v768;
  uint64_t v769;
  uint64_t v770;
  unint64_t v771;
  uint64_t v772;
  uint64_t v773;
  unint64_t v774;
  uint64_t v775;
  unint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  unint64_t v781;
  uint64_t v782;
  uint64_t v783;
  unint64_t v784;
  uint64_t v785;
  unint64_t v786;
  uint64_t v787;
  __int128 *v788;
  uint64_t v789;
  unint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  unint64_t v794;
  uint64_t v795;
  __int128 *v796;
  uint64_t v797;
  unint64_t v798;
  uint64_t v799;
  __int128 *v800;
  uint64_t *v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  int *v805;
  uint64_t v806;
  uint64_t v807;
  _QWORD *v808;
  _QWORD *v809;
  _QWORD *v810;
  uint64_t v811;
  _QWORD *v812;
  uint64_t *v813;
  _QWORD *v814;
  _QWORD *v815;
  uint64_t v816;
  _QWORD *v817;
  _QWORD *v818;
  _QWORD *v819;
  uint64_t v820;
  uint64_t v821;
  __int128 *v822;
  unint64_t v823;
  unint64_t v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  unint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v833;
  uint64_t v834;
  unint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v840;
  unint64_t v841;
  uint64_t v842;
  unint64_t v843;
  uint64_t v844;
  uint64_t v845;
  unint64_t v846;
  uint64_t v847;
  uint64_t v849;
  unint64_t v850;
  uint64_t v851;
  unint64_t v852;
  uint64_t v853;
  uint64_t v854;
  unint64_t v855;
  uint64_t v856;
  uint64_t v857;
  unint64_t v858;
  uint64_t v859;
  unint64_t v860;
  uint64_t v861;
  uint64_t v862;
  unint64_t v863;
  uint64_t v864;
  uint64_t v865;
  unint64_t v866;
  uint64_t v867;
  unint64_t v868;
  unint64_t v869;
  uint64_t v870;
  unint64_t v871;
  uint64_t v872;
  unint64_t v873;
  uint64_t v874;
  __int128 *v875;
  uint64_t v876;
  unint64_t v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  unint64_t v881;
  uint64_t v882;
  __int128 *v883;
  uint64_t v884;
  unint64_t v885;
  uint64_t v886;
  __int128 *v887;
  unint64_t v888;
  unint64_t v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  unint64_t v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  uint64_t v898;
  unint64_t v899;
  uint64_t v900;
  unint64_t v901;
  uint64_t v902;
  uint64_t v903;
  unint64_t v904;
  uint64_t v905;
  uint64_t v907;
  unint64_t v908;
  uint64_t v909;
  unint64_t v910;
  uint64_t v911;
  uint64_t v912;
  unint64_t v913;
  uint64_t v914;
  uint64_t v916;
  unint64_t v917;
  uint64_t v918;
  unint64_t v919;
  uint64_t v920;
  uint64_t v921;
  uint64_t v922;
  uint64_t v923;
  uint64_t v924;
  uint64_t v925;
  uint64_t v926;
  uint64_t v927;
  unint64_t v928;
  uint64_t v929;
  unint64_t v930;
  unint64_t v931;
  uint64_t v932;
  unint64_t v933;
  uint64_t v934;
  unint64_t v935;
  uint64_t v936;
  unint64_t v937;
  uint64_t v938;
  __int128 *v939;
  uint64_t v940;
  unint64_t v941;
  uint64_t v942;
  uint64_t *v943;
  uint64_t v944;
  unint64_t v945;
  uint64_t v946;
  uint64_t *v947;
  uint64_t v948;
  unint64_t v949;
  uint64_t v950;
  __int128 *v951;
  uint64_t v952;
  unint64_t v953;
  uint64_t v954;
  uint64_t *v955;
  uint64_t v956;
  unint64_t v957;
  uint64_t v958;
  __int128 *v959;
  uint64_t v960;
  unint64_t v961;
  uint64_t v962;
  uint64_t j;
  uint64_t v964;
  __int128 *v965;
  unint64_t v966;
  unint64_t v967;
  uint64_t v968;
  uint64_t v969;
  uint64_t v970;
  unint64_t v971;
  uint64_t v972;
  uint64_t v973;
  uint64_t v974;
  uint64_t v976;
  unint64_t v977;
  uint64_t v978;
  unint64_t v979;
  uint64_t v980;
  uint64_t v981;
  unint64_t v982;
  uint64_t v983;
  uint64_t v985;
  unint64_t v986;
  uint64_t v987;
  unint64_t v988;
  uint64_t v989;
  uint64_t v990;
  unint64_t v991;
  uint64_t v992;
  uint64_t v994;
  unint64_t v995;
  uint64_t v996;
  unint64_t v997;
  uint64_t v998;
  uint64_t v999;
  uint64_t v1000;
  uint64_t v1001;
  uint64_t v1002;
  uint64_t v1003;
  uint64_t v1004;
  uint64_t v1005;
  unint64_t v1006;
  uint64_t v1007;
  unint64_t v1008;
  unint64_t v1009;
  uint64_t v1010;
  unint64_t v1011;
  uint64_t v1012;
  unint64_t v1013;
  uint64_t v1014;
  unint64_t v1015;
  uint64_t v1016;
  __int128 *v1017;
  uint64_t v1018;
  unint64_t v1019;
  uint64_t v1020;
  uint64_t *v1021;
  uint64_t v1022;
  unint64_t v1023;
  uint64_t v1024;
  uint64_t *v1025;
  uint64_t v1026;
  unint64_t v1027;
  uint64_t v1028;
  __int128 *v1029;
  uint64_t v1030;
  unint64_t v1031;
  uint64_t v1032;
  uint64_t *v1033;
  uint64_t v1034;
  unint64_t v1035;
  uint64_t v1036;
  __int128 *v1037;
  uint64_t v1038;
  unint64_t v1039;
  uint64_t v1040;
  uint64_t v1041;
  uint64_t v1042;
  __int128 *v1043;
  __int128 *v1044;
  unint64_t v1045;
  unint64_t v1046;
  uint64_t v1047;
  uint64_t v1048;
  uint64_t v1049;
  unint64_t v1050;
  uint64_t v1051;
  uint64_t v1052;
  uint64_t v1053;
  uint64_t v1055;
  uint64_t v1056;
  unint64_t v1057;
  uint64_t v1058;
  uint64_t v1059;
  uint64_t v1060;
  uint64_t v1062;
  unint64_t v1063;
  uint64_t v1064;
  unint64_t v1065;
  uint64_t v1066;
  uint64_t v1067;
  unint64_t v1068;
  uint64_t v1069;
  uint64_t v1071;
  unint64_t v1072;
  uint64_t v1073;
  unint64_t v1074;
  uint64_t v1075;
  uint64_t v1076;
  unint64_t v1077;
  uint64_t v1078;
  uint64_t v1079;
  uint64_t v1080;
  unint64_t v1081;
  uint64_t v1082;
  uint64_t v1083;
  unint64_t v1084;
  uint64_t v1085;
  uint64_t v1086;
  unint64_t v1087;
  uint64_t v1088;
  uint64_t v1089;
  unint64_t v1090;
  uint64_t v1091;
  uint64_t v1092;
  uint64_t v1093;
  unint64_t v1094;
  uint64_t v1095;
  unint64_t v1096;
  uint64_t v1097;
  unint64_t v1098;
  uint64_t v1099;
  uint64_t *v1100;
  uint64_t v1101;
  unint64_t v1102;
  uint64_t v1103;
  uint64_t *v1104;
  uint64_t v1105;
  unint64_t v1106;
  uint64_t v1107;
  __int128 *v1108;
  uint64_t v1109;
  unint64_t v1110;
  uint64_t v1111;
  uint64_t *v1112;
  uint64_t v1113;
  unint64_t v1114;
  uint64_t v1115;
  __int128 *v1116;
  uint64_t v1117;
  unint64_t v1118;
  uint64_t v1119;
  uint64_t v1120;
  uint64_t v1121;
  uint64_t *v1122;
  __int128 *v1123;
  unint64_t v1124;
  unint64_t v1125;
  uint64_t v1126;
  uint64_t v1127;
  uint64_t v1128;
  unint64_t v1129;
  uint64_t v1130;
  uint64_t v1131;
  uint64_t v1132;
  uint64_t v1134;
  uint64_t v1135;
  unint64_t v1136;
  uint64_t v1137;
  uint64_t v1138;
  uint64_t v1139;
  uint64_t v1141;
  unint64_t v1142;
  uint64_t v1143;
  unint64_t v1144;
  uint64_t v1145;
  uint64_t v1146;
  unint64_t v1147;
  uint64_t v1148;
  uint64_t v1150;
  unint64_t v1151;
  uint64_t v1152;
  unint64_t v1153;
  uint64_t v1154;
  uint64_t v1155;
  unint64_t v1156;
  uint64_t v1157;
  uint64_t v1158;
  unint64_t v1159;
  uint64_t v1160;
  unint64_t v1161;
  uint64_t v1162;
  uint64_t v1163;
  unint64_t v1164;
  uint64_t v1165;
  uint64_t v1166;
  unint64_t v1167;
  uint64_t v1168;
  uint64_t v1169;
  unint64_t v1170;
  uint64_t v1171;
  uint64_t v1172;
  uint64_t v1173;
  unint64_t v1174;
  uint64_t v1175;
  unint64_t v1176;
  uint64_t v1177;
  unint64_t v1178;
  uint64_t v1179;
  __int128 *v1180;
  uint64_t v1181;
  unint64_t v1182;
  uint64_t v1183;
  uint64_t *v1184;
  uint64_t v1185;
  unint64_t v1186;
  uint64_t v1187;
  __int128 *v1188;
  uint64_t v1189;
  unint64_t v1190;
  uint64_t v1191;
  uint64_t *v1192;
  uint64_t v1193;
  unint64_t v1194;
  uint64_t v1195;
  __int128 *v1196;
  uint64_t v1197;
  unint64_t v1198;
  uint64_t v1199;
  uint64_t v1200;
  uint64_t v1201;
  uint64_t *v1202;
  __int128 *v1203;
  unint64_t v1204;
  unint64_t v1205;
  uint64_t v1206;
  uint64_t v1207;
  uint64_t v1208;
  unint64_t v1209;
  uint64_t v1210;
  uint64_t v1211;
  uint64_t v1212;
  uint64_t v1214;
  uint64_t v1215;
  unint64_t v1216;
  uint64_t v1217;
  uint64_t v1218;
  uint64_t v1219;
  uint64_t v1221;
  unint64_t v1222;
  uint64_t v1223;
  unint64_t v1224;
  uint64_t v1225;
  uint64_t v1226;
  unint64_t v1227;
  uint64_t v1228;
  uint64_t v1230;
  unint64_t v1231;
  uint64_t v1232;
  unint64_t v1233;
  uint64_t v1234;
  uint64_t v1235;
  unint64_t v1236;
  uint64_t v1237;
  uint64_t v1238;
  unint64_t v1239;
  uint64_t v1240;
  unint64_t v1241;
  uint64_t v1242;
  uint64_t v1243;
  uint64_t v1244;
  uint64_t v1245;
  uint64_t v1246;
  uint64_t v1247;
  uint64_t v1248;
  uint64_t v1249;
  unint64_t v1250;
  uint64_t v1251;
  uint64_t v1252;
  unint64_t v1253;
  unint64_t v1254;
  uint64_t v1255;
  unint64_t v1256;
  uint64_t v1257;
  __int128 *v1258;
  uint64_t v1259;
  unint64_t v1260;
  uint64_t v1261;
  uint64_t *v1262;
  uint64_t v1263;
  unint64_t v1264;
  uint64_t v1265;
  __int128 *v1266;
  uint64_t v1267;
  unint64_t v1268;
  uint64_t v1269;
  uint64_t *v1270;
  uint64_t v1271;
  unint64_t v1272;
  uint64_t v1273;
  __int128 *v1274;
  uint64_t v1275;
  unint64_t v1276;
  uint64_t v1277;
  uint64_t v1278;
  uint64_t v1279;
  __int128 *v1280;
  uint64_t v1281;
  uint64_t v1282;
  __int128 *v1283;
  uint64_t v1284;
  uint64_t v1285;
  uint64_t *v1286;
  __int128 *v1287;
  unint64_t v1288;
  unint64_t v1289;
  uint64_t v1290;
  uint64_t v1291;
  uint64_t v1292;
  unint64_t v1293;
  uint64_t v1294;
  uint64_t v1295;
  uint64_t v1296;
  uint64_t v1298;
  uint64_t v1299;
  unint64_t v1300;
  uint64_t v1301;
  uint64_t v1302;
  uint64_t v1303;
  uint64_t v1305;
  unint64_t v1306;
  uint64_t v1307;
  unint64_t v1308;
  uint64_t v1309;
  uint64_t v1310;
  unint64_t v1311;
  uint64_t v1312;
  uint64_t v1314;
  unint64_t v1315;
  uint64_t v1316;
  unint64_t v1317;
  uint64_t v1318;
  uint64_t v1319;
  unint64_t v1320;
  uint64_t v1321;
  uint64_t v1322;
  unint64_t v1323;
  uint64_t v1324;
  unint64_t v1325;
  uint64_t v1326;
  uint64_t v1327;
  uint64_t v1328;
  uint64_t v1329;
  uint64_t v1330;
  uint64_t v1331;
  uint64_t v1332;
  uint64_t v1333;
  unint64_t v1334;
  uint64_t v1335;
  uint64_t v1336;
  uint64_t v1337;
  unint64_t v1338;
  unint64_t v1339;
  uint64_t v1340;
  unint64_t v1341;
  uint64_t v1342;
  __int128 *v1343;
  uint64_t v1344;
  unint64_t v1345;
  uint64_t v1346;
  uint64_t *v1347;
  uint64_t v1348;
  unint64_t v1349;
  uint64_t v1350;
  uint64_t *v1351;
  uint64_t v1352;
  unint64_t v1353;
  uint64_t v1354;
  __int128 *v1355;
  uint64_t v1356;
  unint64_t v1357;
  uint64_t v1358;
  uint64_t *v1359;
  uint64_t v1360;
  unint64_t v1361;
  uint64_t v1362;
  __int128 *v1363;
  uint64_t *v1364;
  uint64_t v1365;
  uint64_t v1366;
  uint64_t v1367;
  __int128 *v1368;
  uint64_t v1369;
  uint64_t v1370;
  _QWORD *v1371;
  uint64_t v1372;
  _QWORD *v1373;
  uint64_t *v1374;
  uint64_t v1375;
  uint64_t v1376;
  uint64_t v1377;
  _QWORD *v1378;
  __int128 *v1379;
  uint64_t *v1380;
  uint64_t v1381;
  uint64_t v1382;
  unint64_t v1383;
  uint64_t v1384;
  unint64_t v1385;
  uint64_t v1386;
  unint64_t v1387;
  uint64_t v1388;
  uint64_t v1389;
  unint64_t v1390;
  uint64_t v1391;
  unint64_t v1393;
  unint64_t v1394;
  uint64_t v1395;
  unint64_t v1396;
  uint64_t v1397;
  BOOL v1398;
  uint64_t v1399;
  uint64_t v1400;
  uint64_t v1401;
  unint64_t v1402;
  uint64_t v1403;
  uint64_t v1404;
  unint64_t v1405;
  uint64_t v1406;
  uint64_t v1407;
  uint64_t v1408;
  uint64_t v1410;
  uint64_t v1411;
  _QWORD *v1412;
  unint64_t *v1413;
  unint64_t *v1414;
  unint64_t v1415;
  _QWORD *v1416;
  uint64_t v1417;
  uint64_t v1418;
  unint64_t v1419;
  uint64_t v1420;
  uint64_t v1421;
  uint64_t v1422;
  uint64_t v1423;
  unint64_t v1424;
  _QWORD *v1425;
  uint64_t v1426;
  uint64_t v1427;
  unint64_t v1428;
  uint64_t v1429;
  uint64_t v1430;
  uint64_t v1431;
  uint64_t v1432;
  uint64_t *v1433;
  _QWORD *v1434;
  int8x8_t v1435;
  uint8x8_t v1436;
  unint64_t v1437;
  _QWORD *v1438;
  _QWORD *v1439;
  uint64_t v1440;
  unint64_t v1441;
  uint64_t v1442;
  uint64_t v1443;
  _QWORD *v1444;
  uint64_t v1445;
  uint64_t v1446;
  _QWORD *v1447;
  _QWORD *v1448;
  uint64_t v1449;
  _QWORD *v1450;
  uint64_t v1451;
  uint64_t v1452;
  _QWORD *v1453;
  _QWORD *v1454;
  uint64_t v1456;
  _QWORD *v1457;
  _QWORD *v1458;
  uint64_t v1459;
  _QWORD *v1460;
  uint64_t v1461;
  uint64_t v1462;
  _QWORD *v1463;
  _QWORD *v1464;
  uint64_t v1466;
  _QWORD *v1467;
  _QWORD *v1468;
  uint64_t v1469;
  _QWORD *v1470;
  uint64_t v1471;
  uint64_t v1472;
  _QWORD *v1473;
  _QWORD *v1474;
  uint64_t *v1476;
  __int128 *v1477;
  __int128 *v1478;
  uint64_t *v1479;
  unint64_t v1480;
  unint64_t v1481;
  uint64_t v1482;
  uint64_t v1483;
  unint64_t v1484;
  uint64_t v1485;
  uint64_t v1486;
  uint64_t v1487;
  uint64_t v1489;
  unint64_t v1490;
  uint64_t v1491;
  unint64_t v1492;
  uint64_t v1493;
  uint64_t v1494;
  unint64_t v1495;
  uint64_t v1496;
  unint64_t v1498;
  unint64_t v1499;
  uint64_t v1500;
  unint64_t v1501;
  uint64_t v1502;
  BOOL v1503;
  __int128 *v1504;
  uint64_t v1505;
  uint64_t *v1506;
  _QWORD *v1507;
  uint64_t *v1508;
  unint64_t v1509;
  unint64_t v1510;
  uint64_t v1511;
  uint64_t v1512;
  unint64_t v1513;
  uint64_t v1514;
  uint64_t v1515;
  uint64_t v1516;
  uint64_t v1518;
  unint64_t v1519;
  uint64_t v1520;
  unint64_t v1521;
  uint64_t v1522;
  uint64_t v1523;
  unint64_t v1524;
  uint64_t v1525;
  unint64_t v1527;
  unint64_t v1528;
  uint64_t v1529;
  unint64_t v1530;
  uint64_t v1531;
  BOOL v1532;
  _DWORD *v1533;
  uint64_t v1534;
  uint64_t *v1535;
  _QWORD *v1536;
  uint64_t m;
  uint64_t v1538;
  unint64_t v1539;
  unint64_t v1540;
  uint64_t v1541;
  unint64_t v1542;
  uint64_t v1543;
  unint64_t v1544;
  uint64_t v1545;
  uint64_t v1546;
  unint64_t v1547;
  uint64_t v1548;
  uint64_t v1550;
  unint64_t v1551;
  uint64_t v1552;
  unint64_t v1553;
  uint64_t v1554;
  uint64_t v1555;
  unint64_t v1556;
  uint64_t v1557;
  uint64_t v1559;
  unint64_t v1560;
  uint64_t v1561;
  unint64_t v1562;
  uint64_t v1563;
  BOOL v1564;
  uint64_t *v1565;
  uint64_t v1566;
  unint64_t v1567;
  uint64_t v1568;
  BOOL v1569;
  uint64_t v1570;
  uint64_t v1571;
  uint64_t *v1572;
  _QWORD *v1573;
  uint64_t v1574;
  uint64_t v1575;
  uint64_t v1576;
  unint64_t v1577;
  unint64_t v1578;
  uint64_t v1579;
  unint64_t v1580;
  uint64_t v1581;
  unint64_t v1582;
  uint64_t v1583;
  uint64_t v1584;
  unint64_t v1585;
  uint64_t v1586;
  uint64_t v1588;
  uint64_t v1589;
  unint64_t v1590;
  uint64_t v1591;
  uint64_t v1592;
  uint64_t v1593;
  unint64_t v1595;
  unint64_t v1596;
  uint64_t v1597;
  unint64_t v1598;
  uint64_t v1599;
  BOOL v1600;
  uint64_t *v1601;
  uint64_t v1602;
  uint64_t *v1603;
  _QWORD *v1604;
  uint64_t n;
  uint64_t v1606;
  unint64_t v1607;
  unint64_t v1608;
  uint64_t v1609;
  unint64_t v1610;
  uint64_t v1611;
  unint64_t v1612;
  uint64_t v1613;
  uint64_t v1614;
  unint64_t v1615;
  uint64_t v1616;
  uint64_t v1618;
  unint64_t v1619;
  uint64_t v1620;
  unint64_t v1621;
  uint64_t v1622;
  uint64_t v1623;
  unint64_t v1624;
  uint64_t v1625;
  unint64_t v1627;
  uint64_t v1628;
  unint64_t v1629;
  uint64_t v1630;
  unint64_t v1631;
  uint64_t v1632;
  BOOL v1633;
  uint64_t *v1634;
  uint64_t v1635;
  unint64_t v1636;
  uint64_t v1637;
  BOOL v1638;
  __int128 *v1639;
  uint64_t v1640;
  uint64_t *v1641;
  _QWORD *v1642;
  uint64_t v1643;
  uint64_t v1644;
  __int128 *v1645;
  unint64_t v1646;
  unint64_t v1647;
  uint64_t v1648;
  unint64_t v1649;
  uint64_t v1650;
  unint64_t v1651;
  uint64_t v1652;
  uint64_t v1653;
  unint64_t v1654;
  uint64_t v1655;
  uint64_t v1657;
  uint64_t v1658;
  unint64_t v1659;
  uint64_t v1660;
  uint64_t v1661;
  uint64_t v1662;
  unint64_t v1664;
  unint64_t v1665;
  uint64_t v1666;
  unint64_t v1667;
  uint64_t v1668;
  BOOL v1669;
  uint64_t *v1670;
  uint64_t v1671;
  uint64_t *v1672;
  _QWORD *v1673;
  uint64_t ii;
  uint64_t v1675;
  unint64_t v1676;
  unint64_t v1677;
  uint64_t v1678;
  unint64_t v1679;
  uint64_t v1680;
  unint64_t v1681;
  uint64_t v1682;
  uint64_t v1683;
  unint64_t v1684;
  uint64_t v1685;
  uint64_t v1687;
  unint64_t v1688;
  uint64_t v1689;
  unint64_t v1690;
  uint64_t v1691;
  uint64_t v1692;
  unint64_t v1693;
  uint64_t v1694;
  unint64_t v1696;
  uint64_t v1697;
  unint64_t v1698;
  uint64_t v1699;
  unint64_t v1700;
  uint64_t v1701;
  BOOL v1702;
  uint64_t *v1703;
  uint64_t v1704;
  unint64_t v1705;
  uint64_t v1706;
  BOOL v1707;
  _DWORD *v1708;
  uint64_t v1709;
  uint64_t *v1710;
  _QWORD *v1711;
  uint64_t v1712;
  uint64_t v1713;
  _DWORD *v1714;
  unint64_t v1715;
  unint64_t v1716;
  uint64_t v1717;
  unint64_t v1718;
  uint64_t v1719;
  unint64_t v1720;
  uint64_t v1721;
  uint64_t v1722;
  unint64_t v1723;
  uint64_t v1724;
  uint64_t v1726;
  uint64_t v1727;
  unint64_t v1728;
  uint64_t v1729;
  uint64_t v1730;
  uint64_t v1731;
  unint64_t v1733;
  unint64_t v1734;
  uint64_t v1735;
  unint64_t v1736;
  uint64_t v1737;
  BOOL v1738;
  uint64_t *v1739;
  uint64_t v1740;
  uint64_t *v1741;
  _QWORD *v1742;
  unint64_t v1743;
  unint64_t v1744;
  uint64_t v1745;
  uint64_t v1746;
  unint64_t v1747;
  uint64_t v1748;
  uint64_t v1749;
  uint64_t v1750;
  uint64_t v1752;
  unint64_t v1753;
  uint64_t v1754;
  unint64_t v1755;
  uint64_t v1756;
  uint64_t v1757;
  unint64_t v1758;
  uint64_t v1759;
  uint64_t v1761;
  unint64_t v1762;
  uint64_t v1763;
  BOOL v1764;
  uint64_t v1765;
  uint64_t v1766;
  uint64_t *v1767;
  _QWORD *v1768;
  __int128 *v1769;
  unint64_t v1770;
  unint64_t v1771;
  uint64_t v1772;
  uint64_t v1773;
  uint64_t v1774;
  unint64_t v1775;
  uint64_t v1776;
  uint64_t v1777;
  uint64_t v1778;
  uint64_t v1780;
  uint64_t v1781;
  unint64_t v1782;
  uint64_t v1783;
  uint64_t v1784;
  uint64_t v1785;
  uint64_t v1787;
  unint64_t v1788;
  uint64_t v1789;
  unint64_t v1790;
  uint64_t v1791;
  uint64_t v1792;
  unint64_t v1793;
  uint64_t v1794;
  uint64_t v1796;
  unint64_t v1797;
  uint64_t v1798;
  unint64_t v1799;
  uint64_t v1800;
  uint64_t v1801;
  unint64_t v1802;
  uint64_t v1803;
  uint64_t v1804;
  unint64_t v1805;
  uint64_t v1806;
  unint64_t v1807;
  uint64_t v1808;
  uint64_t v1809;
  unint64_t v1810;
  uint64_t v1811;
  uint64_t v1812;
  uint64_t v1813;
  uint64_t v1814;
  unint64_t v1815;
  uint64_t v1816;
  uint64_t v1817;
  unint64_t v1818;
  uint64_t v1819;
  unint64_t v1820;
  uint64_t v1821;
  unint64_t v1822;
  uint64_t v1823;
  unint64_t v1824;
  uint64_t v1825;
  __int128 *v1826;
  uint64_t v1827;
  unint64_t v1828;
  uint64_t v1829;
  uint64_t *v1830;
  uint64_t v1831;
  unint64_t v1832;
  uint64_t v1833;
  uint64_t *v1834;
  uint64_t v1835;
  unint64_t v1836;
  uint64_t v1837;
  uint64_t *v1838;
  uint64_t v1839;
  unint64_t v1840;
  uint64_t v1841;
  __int128 *v1842;
  uint64_t v1843;
  unint64_t v1844;
  uint64_t v1845;
  __int128 *v1846;
  unint64_t v1847;
  unint64_t v1848;
  uint64_t v1849;
  uint64_t v1850;
  uint64_t v1851;
  unint64_t v1852;
  uint64_t v1853;
  uint64_t v1854;
  uint64_t v1855;
  uint64_t v1857;
  uint64_t v1858;
  unint64_t v1859;
  uint64_t v1860;
  uint64_t v1861;
  uint64_t v1862;
  uint64_t v1864;
  unint64_t v1865;
  uint64_t v1866;
  unint64_t v1867;
  uint64_t v1868;
  uint64_t v1869;
  unint64_t v1870;
  uint64_t v1871;
  uint64_t v1873;
  unint64_t v1874;
  uint64_t v1875;
  unint64_t v1876;
  uint64_t v1877;
  uint64_t v1878;
  unint64_t v1879;
  uint64_t v1880;
  uint64_t v1881;
  unint64_t v1882;
  uint64_t v1883;
  unint64_t v1884;
  uint64_t v1885;
  uint64_t v1886;
  unint64_t v1887;
  uint64_t v1888;
  uint64_t v1889;
  uint64_t v1890;
  uint64_t v1891;
  unint64_t v1892;
  uint64_t v1893;
  uint64_t v1894;
  unint64_t v1895;
  uint64_t v1896;
  unint64_t v1897;
  uint64_t v1898;
  unint64_t v1899;
  uint64_t v1900;
  unint64_t v1901;
  uint64_t v1902;
  __int128 *v1903;
  uint64_t v1904;
  unint64_t v1905;
  uint64_t v1906;
  uint64_t *v1907;
  uint64_t v1908;
  unint64_t v1909;
  uint64_t v1910;
  uint64_t *v1911;
  uint64_t v1912;
  unint64_t v1913;
  uint64_t v1914;
  __int128 *v1915;
  uint64_t v1916;
  unint64_t v1917;
  uint64_t v1918;
  __int128 *v1919;
  uint64_t v1920;
  unint64_t v1921;
  uint64_t v1922;
  __int128 *v1923;
  unint64_t v1924;
  unint64_t v1925;
  uint64_t v1926;
  uint64_t v1927;
  uint64_t v1928;
  unint64_t v1929;
  uint64_t v1930;
  uint64_t v1931;
  uint64_t v1932;
  uint64_t v1934;
  uint64_t v1935;
  unint64_t v1936;
  uint64_t v1937;
  uint64_t v1938;
  uint64_t v1939;
  uint64_t v1941;
  unint64_t v1942;
  uint64_t v1943;
  unint64_t v1944;
  uint64_t v1945;
  uint64_t v1946;
  unint64_t v1947;
  uint64_t v1948;
  uint64_t v1950;
  unint64_t v1951;
  uint64_t v1952;
  unint64_t v1953;
  uint64_t v1954;
  uint64_t v1955;
  unint64_t v1956;
  uint64_t v1957;
  uint64_t v1958;
  unint64_t v1959;
  uint64_t v1960;
  unint64_t v1961;
  uint64_t v1962;
  uint64_t v1963;
  unint64_t v1964;
  uint64_t v1965;
  uint64_t v1966;
  uint64_t v1967;
  uint64_t v1968;
  uint64_t v1969;
  uint64_t v1970;
  unint64_t v1971;
  uint64_t v1972;
  uint64_t v1973;
  uint64_t v1974;
  uint64_t v1975;
  unint64_t v1976;
  uint64_t v1977;
  unint64_t v1978;
  uint64_t v1979;
  __int128 *v1980;
  uint64_t v1981;
  unint64_t v1982;
  uint64_t v1983;
  uint64_t *v1984;
  uint64_t v1985;
  unint64_t v1986;
  uint64_t v1987;
  uint64_t *v1988;
  uint64_t v1989;
  unint64_t v1990;
  uint64_t v1991;
  __int128 *v1992;
  uint64_t v1993;
  unint64_t v1994;
  uint64_t v1995;
  uint64_t *v1996;
  uint64_t v1997;
  unint64_t v1998;
  uint64_t v1999;
  uint64_t v2000;
  uint64_t v2001;
  uint64_t v2002;
  uint64_t v2003;
  uint64_t v2004;
  uint64_t v2005;
  __int128 *v2006;
  unint64_t v2007;
  unint64_t v2008;
  unint64_t v2009;
  uint64_t v2010;
  uint64_t v2011;
  uint64_t v2012;
  unint64_t v2013;
  unint64_t v2014;
  uint64_t *v2015;
  uint64_t v2016;
  uint64_t v2017;
  uint64_t v2018;
  unint64_t v2019;
  unint64_t v2020;
  __int128 *v2021;
  unint64_t v2022;
  _QWORD *v2023;
  unint64_t v2024;
  _QWORD *v2025;
  _QWORD *v2026;
  _QWORD *v2027;
  _QWORD *v2028;
  _QWORD *v2029;
  _QWORD *v2030;
  _QWORD *v2031;
  unint64_t v2032;
  unint64_t v2033;
  unint64_t v2034;
  uint64_t v2035;
  uint64_t v2036;
  unint64_t v2037;
  uint64_t *v2038;
  unint64_t v2039;
  unint64_t v2040;
  uint64_t v2041;
  unint64_t v2042;
  unint64_t v2043;
  uint64_t v2044;
  unint64_t v2045;
  unint64_t v2046;
  uint64_t v2047;
  uint64_t v2048;
  uint64_t v2049;
  uint64_t v2050;
  unint64_t v2051;
  __int128 *v2052;
  uint64_t v2053;
  unint64_t v2054;
  uint64_t v2055;
  uint64_t v2056;
  unint64_t v2057;
  uint64_t v2058;
  uint64_t v2059;
  unint64_t v2060;
  uint64_t v2061;
  uint64_t v2062;
  unint64_t v2063;
  uint64_t v2064;
  unint64_t v2065;
  uint64_t v2066;
  uint64_t v2067;
  unint64_t v2068;
  uint64_t v2069;
  unint64_t v2070;
  unint64_t v2071;
  uint64_t v2072;
  uint64_t v2073;
  unint64_t v2074;
  unint64_t v2075;
  unint64_t v2076;
  uint64_t v2077;
  unint64_t v2078;
  uint64_t v2079;
  unint64_t v2080;
  unint64_t v2081;
  unint64_t v2082;
  uint64_t v2083;
  unint64_t v2084;
  unint64_t v2085;
  unint64_t v2086;
  uint64_t v2087;
  unint64_t v2088;
  unint64_t v2089;
  uint64_t v2090;
  uint64_t v2091;
  unint64_t v2092;
  unint64_t v2093;
  unint64_t v2094;
  unint64_t v2095;
  uint64_t v2096;
  uint64_t v2097;
  uint64_t v2098;
  uint64_t v2099;
  unint64_t v2100;
  uint64_t v2101;
  unint64_t v2102;
  uint64_t v2103;
  unint64_t v2104;
  uint64_t v2105;
  uint64_t v2106;
  uint64_t v2107;
  uint64_t v2108;
  unint64_t v2109;
  uint64_t v2110;
  uint64_t v2111;
  unint64_t v2112;
  uint64_t v2113;
  uint64_t v2114;
  unint64_t v2115;
  unint64_t v2116;
  unint64_t v2117;
  unint64_t v2118;
  unint64_t v2119;
  uint64_t v2120;
  unint64_t v2121;
  uint64_t v2122;
  uint64_t v2123;
  unint64_t v2124;
  uint64_t v2125;
  unint64_t v2126;
  uint64_t v2127;
  uint64_t v2128;
  uint64_t v2129;
  uint64_t v2130;
  uint64_t v2131;
  unint64_t v2132;
  unint64_t v2133;
  unint64_t v2134;
  uint64_t v2135;
  unint64_t v2136;
  uint64_t v2137;
  unint64_t v2138;
  unint64_t v2139;
  uint64_t v2140;
  uint64_t v2141;
  uint64_t v2142;
  uint64_t v2143;
  uint64_t v2144;
  uint64_t v2145;
  uint64_t v2146;
  uint64_t v2147;
  uint64_t v2148;
  unint64_t v2149;
  unint64_t v2150;
  uint64_t v2151;
  uint64_t v2152;
  unint64_t v2153;
  unint64_t v2154;
  uint64_t v2155;
  unint64_t v2156;
  uint64_t v2157;
  unint64_t v2158;
  uint64_t v2159;
  unint64_t v2160;
  unint64_t v2161;
  unint64_t v2162;
  unint64_t v2163;
  uint64_t v2164;
  uint64_t v2165;
  uint64_t v2166;
  uint64_t v2167;
  unint64_t v2168;
  uint64_t v2169;
  unint64_t v2170;
  uint64_t v2171;
  unint64_t v2172;
  unint64_t v2173;
  unint64_t v2174;
  unint64_t v2175;
  uint64_t v2176;
  uint64_t v2177;
  uint64_t v2178;
  uint64_t v2179;
  unint64_t v2180;
  uint64_t v2181;
  unint64_t v2182;
  unint64_t v2183;
  uint64_t v2184;
  uint64_t v2185;
  unint64_t v2186;
  unint64_t v2187;
  unint64_t v2188;
  uint64_t v2189;
  uint64_t v2190;
  uint64_t v2191;
  uint64_t v2192;
  uint64_t v2193;
  unint64_t v2194;
  unint64_t v2195;
  _QWORD *v2196;
  unint64_t v2197;
  unint64_t v2198;
  unint64_t v2199;
  unint64_t v2200;
  uint64_t v2201;
  uint64_t v2202;
  uint64_t v2203;
  unint64_t v2204;
  unint64_t v2205;
  uint64_t v2206;
  uint64_t v2207;
  uint64_t v2208;
  uint64_t v2209;
  unint64_t v2210;
  uint64_t v2211;
  uint64_t v2212;
  unint64_t v2213;
  unint64_t v2214;
  uint64_t v2215;
  uint64_t v2216;
  uint64_t v2217;
  uint64_t v2218;
  uint64_t v2219;
  uint64_t v2220;
  uint64_t v2221;
  _QWORD *v2222;
  unint64_t v2223;
  unint64_t v2224;
  uint64_t v2225;
  unint64_t v2226;
  uint64_t v2227;
  unint64_t v2228;
  uint64_t v2229;
  _QWORD *v2230;
  uint64_t v2231;
  __int128 *v2232;
  unint64_t v2233;
  unint64_t v2234;
  uint64_t *v2235;
  uint64_t *v2236;
  unint64_t v2237;
  _QWORD *v2238;
  unint64_t v2239;
  __int128 *v2240;
  uint64_t v2241;
  uint64_t v2242;
  uint64_t v2243;
  _QWORD *v2244;
  uint64_t v2245;
  unint64_t v2246;
  unint64_t v2247;
  unint64_t v2248;
  unint64_t v2249;
  _QWORD *v2250;
  uint64_t v2251;
  uint64_t v2252;
  uint64_t v2253;
  uint64_t v2254;
  _QWORD *v2255;
  _QWORD *v2256;
  _QWORD *v2257;
  uint64_t v2258;
  uint64_t v2259;
  uint64_t v2260;
  uint64_t *v2261;
  _QWORD *v2262;
  _QWORD *v2263;
  unint64_t *v2264;
  uint64_t v2265;
  uint64_t v2266;
  uint64_t v2267;
  uint64_t v2268;
  __int128 v2269;
  uint64_t *v2270;
  uint64_t v2271;
  uint64_t v2272;
  __int128 *v2273;
  uint64_t *v2274;
  __int128 *k;
  uint64_t *v2276;
  __int128 v2277;
  uint64_t v2278;
  __int128 v2279;
  uint64_t v2280;
  uint64_t v2281;
  __int128 v2282;
  uint64_t v2283;
  uint64_t v2284;

  v1 = a1;
  v2284 = *MEMORY[0x1E0C80C00];
  result = a1[15];
  if (!result || !v1[16])
    return result;
  v3 = gdc::Registry::storage<arComponents::TransitionToRenderRegistry>(result);
  v2261 = v1;
  if (*(_QWORD *)(v3 + 88) != *(_QWORD *)(v3 + 80))
  {
    v4 = v1[15];
    v2271 = v1[16];
    v2272 = v4;
    v2273 = (__int128 *)&off_1E42C8630;
    v2274 = &v2271;
    v2276 = (uint64_t *)&v2273;
    v5 = gdc::Registry::storage<arComponents::TransitionToRenderRegistry>(v4);
    v6 = gdc::Registry::storage<arComponents::StandardPipeline>(v4);
    v7 = gdc::Registry::storage<arComponents::WorldTransform>(v4);
    v8 = gdc::Registry::storage<arComponents::MeshComponent>(v4);
    v9 = gdc::Registry::storage<arComponents::Boundary>(v4);
    v10 = gdc::Registry::storage<arComponents::AlbedoTextureComponent>(v4);
    v11 = gdc::Registry::storage<arComponents::AlbedoTextureUVMapping>(v4);
    v12 = gdc::Registry::storage<arComponents::AlbedoTextureUVScale>(v4);
    v13 = gdc::Registry::storage<arComponents::StyleColor>(v4);
    v14 = gdc::Registry::storage<arComponents::VisibilityAlpha>(v4);
    *(_QWORD *)&v2277 = v5;
    *((_QWORD *)&v2277 + 1) = v6;
    v2278 = v7;
    *(_QWORD *)&v2279 = v8;
    *((_QWORD *)&v2279 + 1) = v9;
    v2280 = v10;
    v2281 = v11;
    *(_QWORD *)&v2282 = v12;
    *((_QWORD *)&v2282 + 1) = v13;
    v2283 = v14;
    *(_QWORD *)&v2269 = &v2273;
    *((_QWORD *)&v2269 + 1) = v2261 + 20;
    v2270 = &v2272;
    gdc::RegistryView<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::StyleColor,arComponents::VisibilityAlpha>::each<void md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::StyleColor,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::WorldTransform&,arComponents::MeshComponent&,arComponents::Boundary&,arComponents::AlbedoTextureComponent&,arComponents::AlbedoTextureUVMapping&,arComponents::AlbedoTextureUVScale&,arComponents::StyleColor&,arComponents::VisibilityAlpha&)#1}>(&v2277, &v2269);
    v15 = (__int128 **)v2276;
    if (v2276 == (uint64_t *)&v2273)
    {
      v17 = 4;
      v15 = &v2273;
      v16 = v2261;
    }
    else
    {
      v16 = v2261;
      if (!v2276)
        goto LABEL_9;
      v17 = 5;
    }
    (*((void (**)(void))*v15 + v17))();
LABEL_9:
    v19 = v16[15];
    v18 = v16[16];
    *(_QWORD *)&v2269 = v19;
    v2272 = v18;
    *(_QWORD *)&v2277 = &off_1E42C86C0;
    *((_QWORD *)&v2277 + 1) = &v2272;
    *(_QWORD *)&v2279 = &v2277;
    v20 = (_QWORD *)gdc::Registry::storage<arComponents::TransitionToRenderRegistry>(v19);
    v21 = (_QWORD *)gdc::Registry::storage<arComponents::OcclusionPipeline>(v19);
    v22 = (_QWORD *)gdc::Registry::storage<arComponents::WorldTransform>(v19);
    v2262 = (_QWORD *)gdc::Registry::storage<arComponents::MeshComponent>(v19);
    v2255 = (_QWORD *)gdc::Registry::storage<arComponents::Boundary>(v19);
    v23 = gdc::Registry::storage<arComponents::VisibilityAlpha>(v19);
    v24 = (_QWORD *)v23;
    v25 = v2261 + 26;
    v26 = v21 + 4;
    v27 = v22 + 4;
    v28 = v23 + 32;
    v29 = v20[7];
    v30 = v20[8];
    if (v21[8] - v21[7] >= (unint64_t)(v30 - v29))
      v31 = v20 + 4;
    else
      v31 = v21 + 4;
    if (v22[8] - v22[7] < v31[4] - v31[3])
      v31 = v22 + 4;
    if (v2262[8] - v2262[7] < v31[4] - v31[3])
      v31 = v2262 + 4;
    if (v2255[8] - v2255[7] < v31[4] - v31[3])
      v31 = v2255 + 4;
    if (*(_QWORD *)(v23 + 64) - *(_QWORD *)(v23 + 56) >= v31[4] - v31[3])
      v32 = v31;
    else
      v32 = (_QWORD *)(v23 + 32);
    if (v20 + 4 == v32)
    {
      v2241 = v23 + 32;
      v2273 = &v2277;
      v2274 = v2261 + 26;
      k = &v2269;
      while (v29 != v30)
      {
        v34 = *(unsigned int *)(v29 + 4);
        v35 = v34 >> 7;
        v36 = v21[4];
        if (v34 >> 7 < (v21[5] - v36) >> 3)
        {
          v37 = *(_QWORD *)(v36 + 8 * v35);
          if (v37)
          {
            v38 = v34 & 0x7F;
            v39 = *(unsigned __int16 *)(v37 + 2 * v38);
            v41 = v21[7];
            v40 = v21[8];
            if (v39 < (v40 - v41) >> 3)
            {
              v42 = v41 + 8 * v39;
              if (v42 != v40 && *(_DWORD *)(v42 + 4) == (_DWORD)v34)
              {
                v44 = v22[4];
                v45 = (v22[5] - v44) >> 3;
                if (v35 < v45)
                {
                  v46 = *(_QWORD *)(v44 + 8 * v35);
                  if (v46)
                  {
                    v47 = *(unsigned __int16 *)(v46 + 2 * v38);
                    v49 = v22[7];
                    v48 = v22[8];
                    v50 = (v48 - v49) >> 3;
                    if (v50 > v47)
                    {
                      v51 = v49 + 8 * v47;
                      if (v51 != v48 && *(_DWORD *)(v51 + 4) == (_DWORD)v34)
                      {
                        v53 = v2262[4];
                        v54 = (v2262[5] - v53) >> 3;
                        if (v35 < v54)
                        {
                          v55 = *(_QWORD *)(v53 + 8 * v35);
                          if (v55)
                          {
                            v56 = *(unsigned __int16 *)(v55 + 2 * v38);
                            v58 = v2262[7];
                            v57 = v2262[8];
                            v59 = (v57 - v58) >> 3;
                            if (v59 > v56)
                            {
                              v60 = v58 + 8 * v56;
                              if (v60 != v57 && *(_DWORD *)(v60 + 4) == (_DWORD)v34)
                              {
                                v62 = v2255[4];
                                v63 = (v2255[5] - v62) >> 3;
                                if (v35 < v63)
                                {
                                  v64 = *(_QWORD *)(v62 + 8 * v35);
                                  if (v64)
                                  {
                                    v65 = *(unsigned __int16 *)(v64 + 2 * v38);
                                    v67 = v2255[7];
                                    v66 = v2255[8];
                                    v2226 = (v66 - v67) >> 3;
                                    if (v2226 > v65)
                                    {
                                      v68 = v67 + 8 * v65;
                                      if (v68 != v66 && *(_DWORD *)(v68 + 4) == (_DWORD)v34)
                                      {
                                        v2220 = v24[4];
                                        if (v35 < (v24[5] - v2220) >> 3)
                                        {
                                          v69 = *(_QWORD *)(v2220 + 8 * v35);
                                          if (v69)
                                          {
                                            v70 = *(unsigned __int16 *)(v69 + 2 * v38);
                                            v71 = v24[7];
                                            v2209 = v24[8];
                                            v2197 = (v2209 - v71) >> 3;
                                            if (v2197 > v70)
                                            {
                                              v72 = v71 + 8 * v70;
                                              if (v72 != v2209 && *(_DWORD *)(v72 + 4) == (_DWORD)v34)
                                              {
                                                v2171 = HIDWORD(*(_QWORD *)v29);
                                                v2188 = *(_QWORD *)v29;
                                                v73 = *(_QWORD *)v29 >> 39;
                                                if (v73 < v45
                                                  && (v74 = *(_QWORD *)(v44 + 8 * v73)) != 0
                                                  && (v75 = *(unsigned __int16 *)(v74 + 2 * (HIDWORD(v2188) & 0x7F)),
                                                      v50 > v75)
                                                  && (v76 = v49 + 8 * v75, v76 != v48)
                                                  && *(_DWORD *)(v76 + 4) == (_DWORD)v2171)
                                                {
                                                  v77 = (__int128 *)(v22[10] + 80 * v75);
                                                }
                                                else
                                                {
                                                  v77 = (__int128 *)v22[11];
                                                }
                                                if (v73 < v54
                                                  && (v78 = *(_QWORD *)(v53 + 8 * v73)) != 0
                                                  && (v79 = *(unsigned __int16 *)(v78 + 2 * (HIDWORD(v2188) & 0x7F)),
                                                      v59 > v79)
                                                  && (v80 = v58 + 8 * v79, v80 != v57)
                                                  && *(_DWORD *)(v80 + 4) == (_DWORD)v2171)
                                                {
                                                  v81 = v2262[10] + 16 * v79;
                                                }
                                                else
                                                {
                                                  v81 = v2262[11];
                                                }
                                                if (v73 < v63
                                                  && (v82 = *(_QWORD *)(v62 + 8 * v73)) != 0
                                                  && (v83 = *(unsigned __int16 *)(v82 + 2 * (HIDWORD(v2188) & 0x7F)),
                                                      v2226 > v83)
                                                  && (v84 = v67 + 8 * v83, v84 != v66)
                                                  && *(_DWORD *)(v84 + 4) == (_DWORD)v2171)
                                                {
                                                  v85 = (__int128 *)(v2255[10] + 24 * v83);
                                                }
                                                else
                                                {
                                                  v85 = (__int128 *)v2255[11];
                                                }
                                                if (v73 < (v24[5] - v2220) >> 3
                                                  && (v86 = *(_QWORD *)(v2220 + 8 * v73)) != 0
                                                  && (v87 = *(unsigned __int16 *)(v86 + 2 * (HIDWORD(v2188) & 0x7F)),
                                                      v2197 > v87)
                                                  && (v88 = v71 + 8 * v87, v88 != v2209)
                                                  && *(_DWORD *)(v88 + 4) == (_DWORD)v2171)
                                                {
                                                  v33 = (int *)(v24[10] + 4 * v87);
                                                }
                                                else
                                                {
                                                  v33 = (int *)v24[11];
                                                }
                                                md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::OcclusionPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::WorldTransform&,arComponents::MeshComponent&,arComponents::Boundary&,arComponents::VisibilityAlpha&)#1}::operator()((uint64_t *)&v2273, v2188, v77, *(_QWORD *)v81, *(std::__shared_weak_count **)(v81 + 8), v85, v33);
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v29 += 8;
      }
      v25 = v2261 + 26;
      v28 = v2241;
      if (v26 != v32)
      {
LABEL_23:
        if (v27 != v32)
          goto LABEL_218;
        goto LABEL_159;
      }
    }
    else if (v26 != v32)
    {
      goto LABEL_23;
    }
    v2242 = v28;
    v2273 = &v2277;
    v2274 = v25;
    v89 = v25;
    k = &v2269;
    v90 = v21[7];
    v91 = v21[8];
    while (v90 != v91)
    {
      v93 = *(unsigned int *)(v90 + 4);
      v94 = v93 >> 7;
      v95 = v20[4];
      if (v93 >> 7 < (v20[5] - v95) >> 3)
      {
        v96 = *(_QWORD *)(v95 + 8 * v94);
        if (v96)
        {
          v97 = v93 & 0x7F;
          v98 = *(unsigned __int16 *)(v96 + 2 * v97);
          v100 = v20[7];
          v99 = v20[8];
          if (v98 < (v99 - v100) >> 3)
          {
            v101 = v100 + 8 * v98;
            if (v101 != v99 && *(_DWORD *)(v101 + 4) == (_DWORD)v93)
            {
              v103 = v22[4];
              v104 = (v22[5] - v103) >> 3;
              if (v94 < v104)
              {
                v105 = *(_QWORD *)(v103 + 8 * v94);
                if (v105)
                {
                  v106 = *(unsigned __int16 *)(v105 + 2 * v97);
                  v108 = v22[7];
                  v107 = v22[8];
                  v109 = (v107 - v108) >> 3;
                  if (v109 > v106)
                  {
                    v110 = v108 + 8 * v106;
                    if (v110 != v107 && *(_DWORD *)(v110 + 4) == (_DWORD)v93)
                    {
                      v112 = v2262[4];
                      v113 = (v2262[5] - v112) >> 3;
                      if (v94 < v113)
                      {
                        v114 = *(_QWORD *)(v112 + 8 * v94);
                        if (v114)
                        {
                          v115 = *(unsigned __int16 *)(v114 + 2 * v97);
                          v117 = v2262[7];
                          v116 = v2262[8];
                          v118 = (v116 - v117) >> 3;
                          if (v118 > v115)
                          {
                            v119 = v117 + 8 * v115;
                            if (v119 != v116 && *(_DWORD *)(v119 + 4) == (_DWORD)v93)
                            {
                              v121 = v2255[4];
                              v122 = (v2255[5] - v121) >> 3;
                              if (v94 < v122)
                              {
                                v123 = *(_QWORD *)(v121 + 8 * v94);
                                if (v123)
                                {
                                  v124 = *(unsigned __int16 *)(v123 + 2 * v97);
                                  v126 = v2255[7];
                                  v125 = v2255[8];
                                  v2234 = (v125 - v126) >> 3;
                                  if (v2234 > v124)
                                  {
                                    v127 = v126 + 8 * v124;
                                    if (v127 != v125 && *(_DWORD *)(v127 + 4) == (_DWORD)v93)
                                    {
                                      v2227 = v24[4];
                                      if (v94 < (v24[5] - v2227) >> 3)
                                      {
                                        v128 = *(_QWORD *)(v2227 + 8 * v94);
                                        if (v128)
                                        {
                                          v129 = *(unsigned __int16 *)(v128 + 2 * v97);
                                          v130 = v24[7];
                                          v2221 = v24[8];
                                          v2210 = (v2221 - v130) >> 3;
                                          if (v2210 > v129)
                                          {
                                            v131 = v130 + 8 * v129;
                                            if (v131 != v2221 && *(_DWORD *)(v131 + 4) == (_DWORD)v93)
                                            {
                                              v2189 = HIDWORD(*(_QWORD *)v90);
                                              v2198 = *(_QWORD *)v90;
                                              v132 = *(_QWORD *)v90 >> 39;
                                              if (v132 < v104
                                                && (v133 = *(_QWORD *)(v103 + 8 * v132)) != 0
                                                && (v134 = *(unsigned __int16 *)(v133 + 2 * (HIDWORD(v2198) & 0x7F)),
                                                    v109 > v134)
                                                && (v135 = v108 + 8 * v134, v135 != v107)
                                                && *(_DWORD *)(v135 + 4) == (_DWORD)v2189)
                                              {
                                                v136 = (__int128 *)(v22[10] + 80 * v134);
                                              }
                                              else
                                              {
                                                v136 = (__int128 *)v22[11];
                                              }
                                              if (v132 < v113
                                                && (v137 = *(_QWORD *)(v112 + 8 * v132)) != 0
                                                && (v138 = *(unsigned __int16 *)(v137 + 2 * (HIDWORD(v2198) & 0x7F)),
                                                    v118 > v138)
                                                && (v139 = v117 + 8 * v138, v139 != v116)
                                                && *(_DWORD *)(v139 + 4) == (_DWORD)v2189)
                                              {
                                                v140 = v2262[10] + 16 * v138;
                                              }
                                              else
                                              {
                                                v140 = v2262[11];
                                              }
                                              if (v132 < v122
                                                && (v141 = *(_QWORD *)(v121 + 8 * v132)) != 0
                                                && (v142 = *(unsigned __int16 *)(v141 + 2 * (HIDWORD(v2198) & 0x7F)),
                                                    v2234 > v142)
                                                && (v143 = v126 + 8 * v142, v143 != v125)
                                                && *(_DWORD *)(v143 + 4) == (_DWORD)v2189)
                                              {
                                                v144 = (__int128 *)(v2255[10] + 24 * v142);
                                              }
                                              else
                                              {
                                                v144 = (__int128 *)v2255[11];
                                              }
                                              if (v132 < (v24[5] - v2227) >> 3
                                                && (v145 = *(_QWORD *)(v2227 + 8 * v132)) != 0
                                                && (v146 = *(unsigned __int16 *)(v145 + 2 * (HIDWORD(v2198) & 0x7F)),
                                                    v2210 > v146)
                                                && (v147 = v130 + 8 * v146, v147 != v2221)
                                                && *(_DWORD *)(v147 + 4) == (_DWORD)v2189)
                                              {
                                                v92 = (int *)(v24[10] + 4 * v146);
                                              }
                                              else
                                              {
                                                v92 = (int *)v24[11];
                                              }
                                              md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::OcclusionPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::WorldTransform&,arComponents::MeshComponent&,arComponents::Boundary&,arComponents::VisibilityAlpha&)#1}::operator()((uint64_t *)&v2273, v2198, v136, *(_QWORD *)v140, *(std::__shared_weak_count **)(v140 + 8), v144, v92);
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v90 += 8;
    }
    v25 = v89;
    v28 = v2242;
    if (v27 != v32)
    {
LABEL_218:
      if (v2262 + 4 == v32)
      {
        v2273 = &v2277;
        v2274 = v25;
        k = &v2269;
        v211 = v2262[7];
        v212 = v2262[8];
        if (v211 != v212)
        {
          v213 = (std::__shared_weak_count **)(v2262[10] + 8);
          do
          {
            v240 = *(unsigned int *)(v211 + 4);
            v241 = v240 >> 7;
            v242 = v20[4];
            if (v240 >> 7 < (v20[5] - v242) >> 3)
            {
              v243 = *(_QWORD *)(v242 + 8 * v241);
              if (v243)
              {
                v244 = v240 & 0x7F;
                v245 = *(unsigned __int16 *)(v243 + 2 * v244);
                v247 = v20[7];
                v246 = v20[8];
                if (v245 < (v246 - v247) >> 3)
                {
                  v248 = v247 + 8 * v245;
                  if (v248 != v246 && *(_DWORD *)(v248 + 4) == (_DWORD)v240)
                  {
                    v250 = v21[4];
                    if (v241 < (v21[5] - v250) >> 3)
                    {
                      v251 = *(_QWORD *)(v250 + 8 * v241);
                      if (v251)
                      {
                        v252 = *(unsigned __int16 *)(v251 + 2 * v244);
                        v254 = v21[7];
                        v253 = v21[8];
                        if (v252 < (v253 - v254) >> 3)
                        {
                          v255 = v254 + 8 * v252;
                          if (v255 != v253 && *(_DWORD *)(v255 + 4) == (_DWORD)v240)
                          {
                            v257 = v22[4];
                            v258 = (v22[5] - v257) >> 3;
                            if (v241 < v258)
                            {
                              v259 = *(_QWORD *)(v257 + 8 * v241);
                              if (v259)
                              {
                                v260 = *(unsigned __int16 *)(v259 + 2 * v244);
                                v262 = v22[7];
                                v261 = v22[8];
                                v263 = (v261 - v262) >> 3;
                                if (v263 > v260)
                                {
                                  v264 = v262 + 8 * v260;
                                  if (v264 != v261 && *(_DWORD *)(v264 + 4) == (_DWORD)v240)
                                  {
                                    v266 = v2255[4];
                                    v267 = (v2255[5] - v266) >> 3;
                                    if (v241 < v267)
                                    {
                                      v268 = *(_QWORD *)(v266 + 8 * v241);
                                      if (v268)
                                      {
                                        v269 = *(unsigned __int16 *)(v268 + 2 * v244);
                                        v271 = v2255[7];
                                        v270 = v2255[8];
                                        v272 = (v270 - v271) >> 3;
                                        if (v272 > v269)
                                        {
                                          v273 = v271 + 8 * v269;
                                          if (v273 != v270 && *(_DWORD *)(v273 + 4) == (_DWORD)v240)
                                          {
                                            v274 = v24[4];
                                            v275 = (v24[5] - v274) >> 3;
                                            if (v241 < v275)
                                            {
                                              v276 = *(_QWORD *)(v274 + 8 * v241);
                                              if (v276)
                                              {
                                                v277 = *(unsigned __int16 *)(v276 + 2 * v244);
                                                v279 = v24[7];
                                                v278 = v24[8];
                                                v280 = (v278 - v279) >> 3;
                                                if (v280 > v277)
                                                {
                                                  v281 = v279 + 8 * v277;
                                                  if (v281 != v278 && *(_DWORD *)(v281 + 4) == (_DWORD)v240)
                                                  {
                                                    v2236 = v25;
                                                    v282 = *(_QWORD *)v211;
                                                    v283 = HIDWORD(*(_QWORD *)v211);
                                                    v284 = *(_QWORD *)v211 >> 39;
                                                    if (v284 < v258
                                                      && (v285 = *(_QWORD *)(v257 + 8 * v284)) != 0
                                                      && (v286 = *(unsigned __int16 *)(v285 + 2 * (HIDWORD(v282) & 0x7F)),
                                                          v263 > v286)
                                                      && (v287 = v262 + 8 * v286, v287 != v261)
                                                      && *(_DWORD *)(v287 + 4) == (_DWORD)v283)
                                                    {
                                                      v288 = (__int128 *)(v22[10] + 80 * v286);
                                                    }
                                                    else
                                                    {
                                                      v288 = (__int128 *)v22[11];
                                                    }
                                                    if (v284 < v267
                                                      && (v289 = *(_QWORD *)(v266 + 8 * v284)) != 0
                                                      && (v290 = *(unsigned __int16 *)(v289 + 2 * (HIDWORD(v282) & 0x7F)),
                                                          v272 > v290)
                                                      && (v291 = v271 + 8 * v290, v291 != v270)
                                                      && *(_DWORD *)(v291 + 4) == (_DWORD)v283)
                                                    {
                                                      v292 = (__int128 *)(v2255[10] + 24 * v290);
                                                    }
                                                    else
                                                    {
                                                      v292 = (__int128 *)v2255[11];
                                                    }
                                                    if (v284 < v275
                                                      && (v293 = *(_QWORD *)(v274 + 8 * v284)) != 0
                                                      && (v294 = *(unsigned __int16 *)(v293 + 2 * (HIDWORD(v282) & 0x7F)),
                                                          v280 > v294)
                                                      && (v295 = v279 + 8 * v294, v295 != v278)
                                                      && *(_DWORD *)(v295 + 4) == (_DWORD)v283)
                                                    {
                                                      v239 = (int *)(v24[10] + 4 * v294);
                                                    }
                                                    else
                                                    {
                                                      v239 = (int *)v24[11];
                                                    }
                                                    md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::OcclusionPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::WorldTransform&,arComponents::MeshComponent&,arComponents::Boundary&,arComponents::VisibilityAlpha&)#1}::operator()((uint64_t *)&v2273, v282, v288, (uint64_t)*(v213 - 1), *v213, v292, v239);
                                                    v25 = v2236;
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            v211 += 8;
            v213 += 2;
          }
          while (v211 != v212);
        }
      }
      if (v2255 + 4 == v32)
      {
        v2273 = &v2277;
        v2274 = v25;
        k = &v2269;
        v214 = v2255[7];
        v215 = v2255[8];
        if (v214 != v215)
        {
          v216 = (__int128 *)v2255[10];
          do
          {
            v297 = *(unsigned int *)(v214 + 4);
            v298 = v297 >> 7;
            v299 = v20[4];
            if (v297 >> 7 < (v20[5] - v299) >> 3)
            {
              v300 = *(_QWORD *)(v299 + 8 * v298);
              if (v300)
              {
                v301 = v297 & 0x7F;
                v302 = *(unsigned __int16 *)(v300 + 2 * v301);
                v304 = v20[7];
                v303 = v20[8];
                if (v302 < (v303 - v304) >> 3)
                {
                  v305 = v304 + 8 * v302;
                  if (v305 != v303 && *(_DWORD *)(v305 + 4) == (_DWORD)v297)
                  {
                    v307 = v21[4];
                    if (v298 < (v21[5] - v307) >> 3)
                    {
                      v308 = *(_QWORD *)(v307 + 8 * v298);
                      if (v308)
                      {
                        v309 = *(unsigned __int16 *)(v308 + 2 * v301);
                        v311 = v21[7];
                        v310 = v21[8];
                        if (v309 < (v310 - v311) >> 3)
                        {
                          v312 = v311 + 8 * v309;
                          if (v312 != v310 && *(_DWORD *)(v312 + 4) == (_DWORD)v297)
                          {
                            v314 = v22[4];
                            v315 = (v22[5] - v314) >> 3;
                            if (v298 < v315)
                            {
                              v316 = *(_QWORD *)(v314 + 8 * v298);
                              if (v316)
                              {
                                v317 = *(unsigned __int16 *)(v316 + 2 * v301);
                                v319 = v22[7];
                                v318 = v22[8];
                                v320 = (v318 - v319) >> 3;
                                if (v320 > v317)
                                {
                                  v321 = v319 + 8 * v317;
                                  if (v321 != v318 && *(_DWORD *)(v321 + 4) == (_DWORD)v297)
                                  {
                                    v323 = v2262[4];
                                    v324 = (v2262[5] - v323) >> 3;
                                    if (v298 < v324)
                                    {
                                      v325 = *(_QWORD *)(v323 + 8 * v298);
                                      if (v325)
                                      {
                                        v326 = *(unsigned __int16 *)(v325 + 2 * v301);
                                        v328 = v2262[7];
                                        v327 = v2262[8];
                                        v329 = (v327 - v328) >> 3;
                                        if (v329 > v326)
                                        {
                                          v330 = v328 + 8 * v326;
                                          if (v330 != v327 && *(_DWORD *)(v330 + 4) == (_DWORD)v297)
                                          {
                                            v331 = v24[4];
                                            v332 = (v24[5] - v331) >> 3;
                                            if (v298 < v332)
                                            {
                                              v333 = *(_QWORD *)(v331 + 8 * v298);
                                              if (v333)
                                              {
                                                v334 = *(unsigned __int16 *)(v333 + 2 * v301);
                                                v336 = v24[7];
                                                v335 = v24[8];
                                                v337 = (v335 - v336) >> 3;
                                                if (v337 > v334)
                                                {
                                                  v338 = v336 + 8 * v334;
                                                  if (v338 != v335 && *(_DWORD *)(v338 + 4) == (_DWORD)v297)
                                                  {
                                                    v339 = v25;
                                                    v340 = *(_QWORD *)v214;
                                                    v341 = HIDWORD(*(_QWORD *)v214);
                                                    v342 = *(_QWORD *)v214 >> 39;
                                                    if (v342 < v315
                                                      && (v343 = *(_QWORD *)(v314 + 8 * v342)) != 0
                                                      && (v344 = *(unsigned __int16 *)(v343 + 2 * (HIDWORD(v340) & 0x7F)),
                                                          v320 > v344)
                                                      && (v345 = v319 + 8 * v344, v345 != v318)
                                                      && *(_DWORD *)(v345 + 4) == (_DWORD)v341)
                                                    {
                                                      v346 = (__int128 *)(v22[10] + 80 * v344);
                                                    }
                                                    else
                                                    {
                                                      v346 = (__int128 *)v22[11];
                                                    }
                                                    if (v342 < v324
                                                      && (v347 = *(_QWORD *)(v323 + 8 * v342)) != 0
                                                      && (v348 = *(unsigned __int16 *)(v347 + 2 * (HIDWORD(v340) & 0x7F)),
                                                          v329 > v348)
                                                      && (v349 = v328 + 8 * v348, v349 != v327)
                                                      && *(_DWORD *)(v349 + 4) == (_DWORD)v341)
                                                    {
                                                      v350 = v2262[10] + 16 * v348;
                                                    }
                                                    else
                                                    {
                                                      v350 = v2262[11];
                                                    }
                                                    if (v342 < v332
                                                      && (v351 = *(_QWORD *)(v331 + 8 * v342)) != 0
                                                      && (v352 = *(unsigned __int16 *)(v351 + 2 * (HIDWORD(v340) & 0x7F)),
                                                          v337 > v352)
                                                      && (v353 = v336 + 8 * v352, v353 != v335)
                                                      && *(_DWORD *)(v353 + 4) == (_DWORD)v341)
                                                    {
                                                      v296 = (int *)(v24[10] + 4 * v352);
                                                    }
                                                    else
                                                    {
                                                      v296 = (int *)v24[11];
                                                    }
                                                    md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::OcclusionPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::WorldTransform&,arComponents::MeshComponent&,arComponents::Boundary&,arComponents::VisibilityAlpha&)#1}::operator()((uint64_t *)&v2273, v340, v346, *(_QWORD *)v350, *(std::__shared_weak_count **)(v350 + 8), v216, v296);
                                                    v25 = v339;
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            v216 = (__int128 *)((char *)v216 + 24);
            v214 += 8;
          }
          while (v214 != v215);
        }
      }
      if ((_QWORD *)v28 == v32)
      {
        v2273 = &v2277;
        v2274 = v25;
        k = &v2269;
        v217 = v24[7];
        v218 = v24[8];
        if (v217 != v218)
        {
          v219 = (int *)v24[10];
          do
          {
            v355 = *(unsigned int *)(v217 + 4);
            v356 = v355 >> 7;
            v357 = v20[4];
            if (v355 >> 7 < (v20[5] - v357) >> 3)
            {
              v358 = *(_QWORD *)(v357 + 8 * v356);
              if (v358)
              {
                v359 = v355 & 0x7F;
                v360 = *(unsigned __int16 *)(v358 + 2 * v359);
                v362 = v20[7];
                v361 = v20[8];
                if (v360 < (v361 - v362) >> 3)
                {
                  v363 = v362 + 8 * v360;
                  if (v363 != v361 && *(_DWORD *)(v363 + 4) == (_DWORD)v355)
                  {
                    v365 = v21[4];
                    if (v356 < (v21[5] - v365) >> 3)
                    {
                      v366 = *(_QWORD *)(v365 + 8 * v356);
                      if (v366)
                      {
                        v367 = *(unsigned __int16 *)(v366 + 2 * v359);
                        v369 = v21[7];
                        v368 = v21[8];
                        if (v367 < (v368 - v369) >> 3)
                        {
                          v370 = v369 + 8 * v367;
                          if (v370 != v368 && *(_DWORD *)(v370 + 4) == (_DWORD)v355)
                          {
                            v372 = v22[4];
                            v373 = (v22[5] - v372) >> 3;
                            if (v356 < v373)
                            {
                              v374 = *(_QWORD *)(v372 + 8 * v356);
                              if (v374)
                              {
                                v375 = *(unsigned __int16 *)(v374 + 2 * v359);
                                v377 = v22[7];
                                v376 = v22[8];
                                v378 = (v376 - v377) >> 3;
                                if (v378 > v375)
                                {
                                  v379 = v377 + 8 * v375;
                                  if (v379 != v376 && *(_DWORD *)(v379 + 4) == (_DWORD)v355)
                                  {
                                    v381 = v2262[4];
                                    v382 = (v2262[5] - v381) >> 3;
                                    if (v356 < v382)
                                    {
                                      v383 = *(_QWORD *)(v381 + 8 * v356);
                                      if (v383)
                                      {
                                        v384 = *(unsigned __int16 *)(v383 + 2 * v359);
                                        v386 = v2262[7];
                                        v385 = v2262[8];
                                        v387 = (v385 - v386) >> 3;
                                        if (v387 > v384)
                                        {
                                          v388 = v386 + 8 * v384;
                                          if (v388 != v385 && *(_DWORD *)(v388 + 4) == (_DWORD)v355)
                                          {
                                            v389 = v2255[4];
                                            v390 = (v2255[5] - v389) >> 3;
                                            if (v356 < v390)
                                            {
                                              v391 = *(_QWORD *)(v389 + 8 * v356);
                                              if (v391)
                                              {
                                                v392 = *(unsigned __int16 *)(v391 + 2 * v359);
                                                v394 = v2255[7];
                                                v393 = v2255[8];
                                                v395 = (v393 - v394) >> 3;
                                                if (v395 > v392)
                                                {
                                                  v396 = v394 + 8 * v392;
                                                  if (v396 != v393 && *(_DWORD *)(v396 + 4) == (_DWORD)v355)
                                                  {
                                                    v397 = *(_QWORD *)v217;
                                                    v398 = HIDWORD(*(_QWORD *)v217);
                                                    v399 = *(_QWORD *)v217 >> 39;
                                                    if (v399 < v373
                                                      && (v400 = *(_QWORD *)(v372 + 8 * v399)) != 0
                                                      && (v401 = *(unsigned __int16 *)(v400 + 2 * (HIDWORD(v397) & 0x7F)),
                                                          v378 > v401)
                                                      && (v402 = v377 + 8 * v401, v402 != v376)
                                                      && *(_DWORD *)(v402 + 4) == (_DWORD)v398)
                                                    {
                                                      v403 = (__int128 *)(v22[10] + 80 * v401);
                                                    }
                                                    else
                                                    {
                                                      v403 = (__int128 *)v22[11];
                                                    }
                                                    if (v399 < v382
                                                      && (v404 = *(_QWORD *)(v381 + 8 * v399)) != 0
                                                      && (v405 = *(unsigned __int16 *)(v404 + 2 * (HIDWORD(v397) & 0x7F)),
                                                          v387 > v405)
                                                      && (v406 = v386 + 8 * v405, v406 != v385)
                                                      && *(_DWORD *)(v406 + 4) == (_DWORD)v398)
                                                    {
                                                      v407 = v2262[10] + 16 * v405;
                                                    }
                                                    else
                                                    {
                                                      v407 = v2262[11];
                                                    }
                                                    if (v399 < v390
                                                      && (v408 = *(_QWORD *)(v389 + 8 * v399)) != 0
                                                      && (v409 = *(unsigned __int16 *)(v408 + 2 * (HIDWORD(v397) & 0x7F)),
                                                          v395 > v409)
                                                      && (v410 = v394 + 8 * v409, v410 != v393)
                                                      && *(_DWORD *)(v410 + 4) == (_DWORD)v398)
                                                    {
                                                      v354 = (__int128 *)(v2255[10] + 24 * v409);
                                                    }
                                                    else
                                                    {
                                                      v354 = (__int128 *)v2255[11];
                                                    }
                                                    md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::OcclusionPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::WorldTransform&,arComponents::MeshComponent&,arComponents::Boundary&,arComponents::VisibilityAlpha&)#1}::operator()((uint64_t *)&v2273, v397, v403, *(_QWORD *)v407, *(std::__shared_weak_count **)(v407 + 8), v354, v219);
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            ++v219;
            v217 += 8;
          }
          while (v217 != v218);
        }
      }
      v208 = (__int128 *)v2279;
      if ((__int128 *)v2279 == &v2277)
      {
        v210 = 4;
        v208 = &v2277;
        v209 = v2261;
      }
      else
      {
        v209 = v2261;
        if (!(_QWORD)v2279)
          goto LABEL_232;
        v210 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v208 + 8 * v210))();
LABEL_232:
      v221 = v209[15];
      v220 = v209[16];
      *(_QWORD *)&v2269 = v221;
      v2272 = v220;
      *(_QWORD *)&v2277 = &off_1E42C85E8;
      *((_QWORD *)&v2277 + 1) = &v2272;
      *(_QWORD *)&v2279 = &v2277;
      v222 = (_QWORD *)gdc::Registry::storage<arComponents::TransitionToRenderRegistry>(v221);
      v223 = (_QWORD *)gdc::Registry::storage<arComponents::ShadowPipeline>(v221);
      v224 = (_QWORD *)gdc::Registry::storage<arComponents::WorldTransform>(v221);
      v225 = gdc::Registry::storage<arComponents::MeshComponent>(v221);
      v2263 = (_QWORD *)gdc::Registry::storage<arComponents::Boundary>(v221);
      v2256 = (_QWORD *)gdc::Registry::storage<arComponents::StyleColor>(v221);
      v226 = gdc::Registry::storage<arComponents::VisibilityAlpha>(v221);
      v227 = (_QWORD *)v226;
      v228 = v2261 + 23;
      v229 = v225 + 32;
      v231 = v222[7];
      v230 = v222[8];
      if (v223[8] - v223[7] >= (unint64_t)(v230 - v231))
        v232 = v222 + 4;
      else
        v232 = v223 + 4;
      if (v224[8] - v224[7] < v232[4] - v232[3])
        v232 = v224 + 4;
      v2222 = (_QWORD *)v225;
      if (*(_QWORD *)(v225 + 64) - *(_QWORD *)(v225 + 56) < v232[4] - v232[3])
        v232 = (_QWORD *)(v225 + 32);
      if (v2263[8] - v2263[7] < v232[4] - v232[3])
        v232 = v2263 + 4;
      v2243 = v226 + 32;
      if (v2256[8] - v2256[7] < v232[4] - v232[3])
        v232 = v2256 + 4;
      if (*(_QWORD *)(v226 + 64) - *(_QWORD *)(v226 + 56) >= v232[4] - v232[3])
        v233 = v232;
      else
        v233 = (_QWORD *)(v226 + 32);
      if (v222 + 4 == v233)
      {
        v2273 = &v2277;
        v2274 = v2261 + 23;
        k = &v2269;
        while (v231 != v230)
        {
          v412 = *(unsigned int *)(v231 + 4);
          v413 = v412 >> 7;
          v414 = v223[4];
          if (v412 >> 7 < (v223[5] - v414) >> 3)
          {
            v415 = *(_QWORD *)(v414 + 8 * v413);
            if (v415)
            {
              v416 = v412 & 0x7F;
              v417 = *(unsigned __int16 *)(v415 + 2 * v416);
              v419 = v223[7];
              v418 = v223[8];
              if (v417 < (v418 - v419) >> 3)
              {
                v420 = v419 + 8 * v417;
                if (v420 != v418 && *(_DWORD *)(v420 + 4) == (_DWORD)v412)
                {
                  v422 = v224[4];
                  v423 = (v224[5] - v422) >> 3;
                  if (v413 < v423)
                  {
                    v424 = *(_QWORD *)(v422 + 8 * v413);
                    if (v424)
                    {
                      v425 = *(unsigned __int16 *)(v424 + 2 * v416);
                      v426 = v224[7];
                      v427 = v224[8];
                      v428 = (v427 - v426) >> 3;
                      if (v428 > v425)
                      {
                        v429 = v426 + 8 * v425;
                        if (v429 != v427 && *(_DWORD *)(v429 + 4) == (_DWORD)v412)
                        {
                          v431 = v2222[4];
                          v432 = (v2222[5] - v431) >> 3;
                          if (v413 < v432)
                          {
                            v433 = *(_QWORD *)(v431 + 8 * v413);
                            if (v433)
                            {
                              v434 = *(unsigned __int16 *)(v433 + 2 * v416);
                              v436 = v2222[7];
                              v435 = v2222[8];
                              v437 = (v435 - v436) >> 3;
                              if (v437 > v434)
                              {
                                v438 = v436 + 8 * v434;
                                if (v438 != v435 && *(_DWORD *)(v438 + 4) == (_DWORD)v412)
                                {
                                  v440 = v2263[4];
                                  v441 = (v2263[5] - v440) >> 3;
                                  if (v413 < v441)
                                  {
                                    v442 = *(_QWORD *)(v440 + 8 * v413);
                                    if (v442)
                                    {
                                      v443 = *(unsigned __int16 *)(v442 + 2 * v416);
                                      v444 = v2263[7];
                                      v2211 = v2263[8];
                                      v228 = v2261 + 23;
                                      v2199 = (v2211 - v444) >> 3;
                                      if (v2199 > v443)
                                      {
                                        v445 = v444 + 8 * v443;
                                        if (v445 != v2211 && *(_DWORD *)(v445 + 4) == (_DWORD)v412)
                                        {
                                          v228 = v2261 + 23;
                                          v2172 = (uint64_t)(v2256[5] - v2256[4]) >> 3;
                                          v2190 = v2256[4];
                                          if (v413 < v2172)
                                          {
                                            v446 = *(_QWORD *)(v2190 + 8 * v413);
                                            if (v446)
                                            {
                                              v2156 = *(unsigned __int16 *)(v446 + 2 * v416);
                                              v2130 = v2256[7];
                                              v2142 = v2256[8];
                                              v2117 = (v2142 - v2130) >> 3;
                                              if (v2117 > v2156)
                                              {
                                                v447 = v2130 + 8 * v2156;
                                                if (v447 != v2142 && *(_DWORD *)(v447 + 4) == (_DWORD)v412)
                                                {
                                                  v448 = v227[5];
                                                  v2157 = v227[4];
                                                  if (v413 < (v448 - v2157) >> 3)
                                                  {
                                                    v449 = (v448 - v2157) >> 3;
                                                    v450 = *(_QWORD *)(v2157 + 8 * v413);
                                                    if (v450)
                                                    {
                                                      v451 = *(unsigned __int16 *)(v450 + 2 * v416);
                                                      v452 = v227[7];
                                                      v2105 = v227[8];
                                                      v2094 = (v2105 - v452) >> 3;
                                                      if (v2094 > v451)
                                                      {
                                                        v453 = v452 + 8 * v451;
                                                        if (v453 != v2105 && *(_DWORD *)(v453 + 4) == (_DWORD)v412)
                                                        {
                                                          v454 = *(_QWORD *)v231;
                                                          v455 = HIDWORD(*(_QWORD *)v231);
                                                          v456 = *(_QWORD *)v231 >> 39;
                                                          if (v456 < v423
                                                            && (v457 = *(_QWORD *)(v422 + 8 * v456)) != 0
                                                            && (v458 = *(unsigned __int16 *)(v457
                                                                                           + 2 * (HIDWORD(v454) & 0x7F)),
                                                                v428 > v458)
                                                            && (v459 = v426 + 8 * v458, v459 != v427)
                                                            && *(_DWORD *)(v459 + 4) == (_DWORD)v455)
                                                          {
                                                            v460 = (__int128 *)(v224[10]
                                                                              + 80
                                                                              * *(unsigned __int16 *)(v457 + 2 * (HIDWORD(v454) & 0x7F)));
                                                          }
                                                          else
                                                          {
                                                            v460 = (__int128 *)v224[11];
                                                          }
                                                          if (v456 < v432
                                                            && (v461 = *(_QWORD *)(v431 + 8 * v456)) != 0
                                                            && (v462 = *(unsigned __int16 *)(v461
                                                                                           + 2 * (HIDWORD(v454) & 0x7F)),
                                                                v437 > v462)
                                                            && (v463 = v436 + 8 * v462, v463 != v435)
                                                            && *(_DWORD *)(v463 + 4) == (_DWORD)v455)
                                                          {
                                                            v464 = v2222[10] + 16 * v462;
                                                          }
                                                          else
                                                          {
                                                            v464 = v2222[11];
                                                          }
                                                          if (v456 < v441
                                                            && (v465 = *(_QWORD *)(v440 + 8 * v456)) != 0
                                                            && (v466 = *(unsigned __int16 *)(v465
                                                                                           + 2 * (HIDWORD(v454) & 0x7F)),
                                                                v2199 > v466)
                                                            && (v467 = v444 + 8 * v466, v467 != v2211)
                                                            && *(_DWORD *)(v467 + 4) == (_DWORD)v455)
                                                          {
                                                            v468 = (__int128 *)(v2263[10] + 24 * v466);
                                                          }
                                                          else
                                                          {
                                                            v468 = (__int128 *)v2263[11];
                                                          }
                                                          if (v456 < v2172
                                                            && (v469 = *(_QWORD *)(v2190 + 8 * v456)) != 0
                                                            && (v470 = *(unsigned __int16 *)(v469
                                                                                           + 2 * (HIDWORD(v454) & 0x7F)),
                                                                v2117 > v470)
                                                            && (v471 = v2130 + 8 * v470, v471 != v2142)
                                                            && *(_DWORD *)(v471 + 4) == (_DWORD)v455)
                                                          {
                                                            v472 = (__int128 *)(v2256[10] + 16 * v470);
                                                          }
                                                          else
                                                          {
                                                            v472 = (__int128 *)v2256[11];
                                                          }
                                                          if (v456 < v449
                                                            && (v473 = *(_QWORD *)(v2157 + 8 * v456)) != 0
                                                            && (v474 = *(unsigned __int16 *)(v473
                                                                                           + 2 * (HIDWORD(v454) & 0x7F)),
                                                                v2094 > v474)
                                                            && (v475 = v452 + 8 * v474, v475 != v2105)
                                                            && *(_DWORD *)(v475 + 4) == (_DWORD)v455)
                                                          {
                                                            v411 = (int *)(v227[10] + 4 * v474);
                                                          }
                                                          else
                                                          {
                                                            v411 = (int *)v227[11];
                                                          }
                                                          md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::ShadowPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::StyleColor,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::WorldTransform&,arComponents::MeshComponent&,arComponents::Boundary&,arComponents::StyleColor&,arComponents::VisibilityAlpha&)#1}::operator()((uint64_t *)&v2273, *(_QWORD *)v231, v460, *(_QWORD *)v464, *(std::__shared_weak_count **)(v464 + 8), v468, v472, v411);
                                                          v228 = v2261 + 23;
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          v231 += 8;
        }
      }
      if (v223 + 4 == v233)
      {
        v2273 = &v2277;
        v2274 = v228;
        k = &v2269;
        v234 = v223[7];
        for (i = v223[8]; v234 != i; v234 += 8)
        {
          v477 = *(unsigned int *)(v234 + 4);
          v478 = v477 >> 7;
          v479 = v222[4];
          if (v477 >> 7 < (v222[5] - v479) >> 3)
          {
            v480 = *(_QWORD *)(v479 + 8 * v478);
            if (v480)
            {
              v481 = v477 & 0x7F;
              v482 = *(unsigned __int16 *)(v480 + 2 * v481);
              v484 = v222[7];
              v483 = v222[8];
              if (v482 < (v483 - v484) >> 3)
              {
                v485 = v484 + 8 * v482;
                if (v485 != v483 && *(_DWORD *)(v485 + 4) == (_DWORD)v477)
                {
                  v487 = v224[4];
                  v488 = (v224[5] - v487) >> 3;
                  if (v478 < v488)
                  {
                    v489 = *(_QWORD *)(v487 + 8 * v478);
                    if (v489)
                    {
                      v490 = *(unsigned __int16 *)(v489 + 2 * v481);
                      v491 = v224[7];
                      v492 = v224[8];
                      v493 = (v492 - v491) >> 3;
                      if (v493 > v490)
                      {
                        v494 = v491 + 8 * v490;
                        if (v494 != v492 && *(_DWORD *)(v494 + 4) == (_DWORD)v477)
                        {
                          v496 = v2222[4];
                          v497 = (v2222[5] - v496) >> 3;
                          if (v478 < v497)
                          {
                            v498 = *(_QWORD *)(v496 + 8 * v478);
                            if (v498)
                            {
                              v499 = *(unsigned __int16 *)(v498 + 2 * v481);
                              v501 = v2222[7];
                              v500 = v2222[8];
                              v502 = (v500 - v501) >> 3;
                              if (v502 > v499)
                              {
                                v503 = v501 + 8 * v499;
                                if (v503 != v500 && *(_DWORD *)(v503 + 4) == (_DWORD)v477)
                                {
                                  v505 = v2263[4];
                                  v506 = (v2263[5] - v505) >> 3;
                                  if (v478 < v506)
                                  {
                                    v507 = *(_QWORD *)(v505 + 8 * v478);
                                    if (v507)
                                    {
                                      v508 = *(unsigned __int16 *)(v507 + 2 * v481);
                                      v509 = v2263[7];
                                      v2212 = v2263[8];
                                      v228 = v2261 + 23;
                                      v2200 = (v2212 - v509) >> 3;
                                      if (v2200 > v508)
                                      {
                                        v510 = v509 + 8 * v508;
                                        if (v510 != v2212 && *(_DWORD *)(v510 + 4) == (_DWORD)v477)
                                        {
                                          v228 = v2261 + 23;
                                          v2173 = (uint64_t)(v2256[5] - v2256[4]) >> 3;
                                          v2191 = v2256[4];
                                          if (v478 < v2173)
                                          {
                                            v511 = *(_QWORD *)(v2191 + 8 * v478);
                                            if (v511)
                                            {
                                              v2158 = *(unsigned __int16 *)(v511 + 2 * v481);
                                              v2131 = v2256[7];
                                              v2143 = v2256[8];
                                              v2118 = (v2143 - v2131) >> 3;
                                              if (v2118 > v2158)
                                              {
                                                v512 = v2131 + 8 * v2158;
                                                if (v512 != v2143 && *(_DWORD *)(v512 + 4) == (_DWORD)v477)
                                                {
                                                  v513 = v227[5];
                                                  v2159 = v227[4];
                                                  if (v478 < (v513 - v2159) >> 3)
                                                  {
                                                    v514 = (v513 - v2159) >> 3;
                                                    v515 = *(_QWORD *)(v2159 + 8 * v478);
                                                    if (v515)
                                                    {
                                                      v516 = *(unsigned __int16 *)(v515 + 2 * v481);
                                                      v517 = v227[7];
                                                      v2106 = v227[8];
                                                      v2095 = (v2106 - v517) >> 3;
                                                      if (v2095 > v516)
                                                      {
                                                        v518 = v517 + 8 * v516;
                                                        if (v518 != v2106 && *(_DWORD *)(v518 + 4) == (_DWORD)v477)
                                                        {
                                                          v519 = *(_QWORD *)v234;
                                                          v520 = HIDWORD(*(_QWORD *)v234);
                                                          v521 = *(_QWORD *)v234 >> 39;
                                                          if (v521 < v488
                                                            && (v522 = *(_QWORD *)(v487 + 8 * v521)) != 0
                                                            && (v523 = *(unsigned __int16 *)(v522
                                                                                           + 2 * (HIDWORD(v519) & 0x7F)),
                                                                v493 > v523)
                                                            && (v524 = v491 + 8 * v523, v524 != v492)
                                                            && *(_DWORD *)(v524 + 4) == (_DWORD)v520)
                                                          {
                                                            v525 = (__int128 *)(v224[10]
                                                                              + 80
                                                                              * *(unsigned __int16 *)(v522 + 2 * (HIDWORD(v519) & 0x7F)));
                                                          }
                                                          else
                                                          {
                                                            v525 = (__int128 *)v224[11];
                                                          }
                                                          if (v521 < v497
                                                            && (v526 = *(_QWORD *)(v496 + 8 * v521)) != 0
                                                            && (v527 = *(unsigned __int16 *)(v526
                                                                                           + 2 * (HIDWORD(v519) & 0x7F)),
                                                                v502 > v527)
                                                            && (v528 = v501 + 8 * v527, v528 != v500)
                                                            && *(_DWORD *)(v528 + 4) == (_DWORD)v520)
                                                          {
                                                            v529 = v2222[10] + 16 * v527;
                                                          }
                                                          else
                                                          {
                                                            v529 = v2222[11];
                                                          }
                                                          if (v521 < v506
                                                            && (v530 = *(_QWORD *)(v505 + 8 * v521)) != 0
                                                            && (v531 = *(unsigned __int16 *)(v530
                                                                                           + 2 * (HIDWORD(v519) & 0x7F)),
                                                                v2200 > v531)
                                                            && (v532 = v509 + 8 * v531, v532 != v2212)
                                                            && *(_DWORD *)(v532 + 4) == (_DWORD)v520)
                                                          {
                                                            v533 = (__int128 *)(v2263[10] + 24 * v531);
                                                          }
                                                          else
                                                          {
                                                            v533 = (__int128 *)v2263[11];
                                                          }
                                                          if (v521 < v2173
                                                            && (v534 = *(_QWORD *)(v2191 + 8 * v521)) != 0
                                                            && (v535 = *(unsigned __int16 *)(v534
                                                                                           + 2 * (HIDWORD(v519) & 0x7F)),
                                                                v2118 > v535)
                                                            && (v536 = v2131 + 8 * v535, v536 != v2143)
                                                            && *(_DWORD *)(v536 + 4) == (_DWORD)v520)
                                                          {
                                                            v537 = (__int128 *)(v2256[10] + 16 * v535);
                                                          }
                                                          else
                                                          {
                                                            v537 = (__int128 *)v2256[11];
                                                          }
                                                          if (v521 < v514
                                                            && (v538 = *(_QWORD *)(v2159 + 8 * v521)) != 0
                                                            && (v539 = *(unsigned __int16 *)(v538
                                                                                           + 2 * (HIDWORD(v519) & 0x7F)),
                                                                v2095 > v539)
                                                            && (v540 = v517 + 8 * v539, v540 != v2106)
                                                            && *(_DWORD *)(v540 + 4) == (_DWORD)v520)
                                                          {
                                                            v476 = (int *)(v227[10] + 4 * v539);
                                                          }
                                                          else
                                                          {
                                                            v476 = (int *)v227[11];
                                                          }
                                                          md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::ShadowPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::StyleColor,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::WorldTransform&,arComponents::MeshComponent&,arComponents::Boundary&,arComponents::StyleColor&,arComponents::VisibilityAlpha&)#1}::operator()((uint64_t *)&v2273, *(_QWORD *)v234, v525, *(_QWORD *)v529, *(std::__shared_weak_count **)(v529 + 8), v533, v537, v476);
                                                          v228 = v2261 + 23;
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (v224 + 4 == v233)
      {
        v2273 = &v2277;
        v2274 = v228;
        k = &v2269;
        v236 = v224[7];
        v237 = v224[8];
        if (v236 != v237)
        {
          v238 = (__int128 *)v224[10];
          do
          {
            v542 = *(unsigned int *)(v236 + 4);
            v543 = v542 >> 7;
            v544 = v222[4];
            if (v542 >> 7 < (v222[5] - v544) >> 3)
            {
              v545 = *(_QWORD *)(v544 + 8 * v543);
              if (v545)
              {
                v546 = v542 & 0x7F;
                v547 = *(unsigned __int16 *)(v545 + 2 * v546);
                v549 = v222[7];
                v548 = v222[8];
                if (v547 < (v548 - v549) >> 3)
                {
                  v550 = v549 + 8 * v547;
                  if (v550 != v548 && *(_DWORD *)(v550 + 4) == (_DWORD)v542)
                  {
                    v552 = v223[4];
                    if (v543 < (v223[5] - v552) >> 3)
                    {
                      v553 = *(_QWORD *)(v552 + 8 * v543);
                      if (v553)
                      {
                        v554 = *(unsigned __int16 *)(v553 + 2 * v546);
                        v556 = v223[7];
                        v555 = v223[8];
                        if (v554 < (v555 - v556) >> 3)
                        {
                          v557 = v556 + 8 * v554;
                          if (v557 != v555 && *(_DWORD *)(v557 + 4) == (_DWORD)v542)
                          {
                            v559 = v2222[4];
                            v560 = (v2222[5] - v559) >> 3;
                            if (v543 < v560)
                            {
                              v561 = *(_QWORD *)(v559 + 8 * v543);
                              if (v561)
                              {
                                v562 = *(unsigned __int16 *)(v561 + 2 * v546);
                                v564 = v2222[7];
                                v563 = v2222[8];
                                v565 = (v563 - v564) >> 3;
                                if (v565 > v562)
                                {
                                  v566 = v564 + 8 * v562;
                                  if (v566 != v563 && *(_DWORD *)(v566 + 4) == (_DWORD)v542)
                                  {
                                    v568 = v2263[4];
                                    v569 = (v2263[5] - v568) >> 3;
                                    if (v543 < v569)
                                    {
                                      v570 = *(_QWORD *)(v568 + 8 * v543);
                                      if (v570)
                                      {
                                        v571 = *(unsigned __int16 *)(v570 + 2 * v546);
                                        v572 = v2263[7];
                                        v573 = v2263[8];
                                        v574 = (v573 - v572) >> 3;
                                        if (v574 > v571)
                                        {
                                          v575 = v572 + 8 * v571;
                                          if (v575 != v573 && *(_DWORD *)(v575 + 4) == (_DWORD)v542)
                                          {
                                            v576 = v2256[4];
                                            v577 = (v2256[5] - v576) >> 3;
                                            if (v543 < v577)
                                            {
                                              v578 = *(_QWORD *)(v576 + 8 * v543);
                                              if (v578)
                                              {
                                                v579 = *(unsigned __int16 *)(v578 + 2 * v546);
                                                v581 = v2256[7];
                                                v580 = v2256[8];
                                                v2213 = (v580 - v581) >> 3;
                                                if (v2213 > v579)
                                                {
                                                  v582 = v581 + 8 * v579;
                                                  if (v582 != v580 && *(_DWORD *)(v582 + 4) == (_DWORD)v542)
                                                  {
                                                    v2201 = v227[4];
                                                    if (v543 < (v227[5] - v2201) >> 3)
                                                    {
                                                      v583 = *(_QWORD *)(v2201 + 8 * v543);
                                                      if (v583)
                                                      {
                                                        v584 = *(unsigned __int16 *)(v583 + 2 * v546);
                                                        v585 = v227[7];
                                                        v2192 = v227[8];
                                                        v2174 = (v2192 - v585) >> 3;
                                                        if (v2174 > v584)
                                                        {
                                                          v586 = v585 + 8 * v584;
                                                          if (v586 != v2192 && *(_DWORD *)(v586 + 4) == (_DWORD)v542)
                                                          {
                                                            v2144 = HIDWORD(*(_QWORD *)v236);
                                                            v2160 = *(_QWORD *)v236;
                                                            v587 = *(_QWORD *)v236 >> 39;
                                                            if (v587 < v560
                                                              && (v588 = *(_QWORD *)(v559 + 8 * v587)) != 0
                                                              && (v589 = *(unsigned __int16 *)(v588
                                                                                             + 2
                                                                                             * (HIDWORD(v2160) & 0x7F)),
                                                                  v565 > v589)
                                                              && (v590 = v564 + 8 * v589, v590 != v563)
                                                              && *(_DWORD *)(v590 + 4) == (_DWORD)v2144)
                                                            {
                                                              v591 = v2222[10] + 16 * v589;
                                                            }
                                                            else
                                                            {
                                                              v591 = v2222[11];
                                                            }
                                                            if (v587 < v569
                                                              && (v592 = *(_QWORD *)(v568 + 8 * v587)) != 0
                                                              && (v593 = *(unsigned __int16 *)(v592
                                                                                             + 2
                                                                                             * (HIDWORD(v2160) & 0x7F)),
                                                                  v574 > v593)
                                                              && (v594 = v572 + 8 * v593, v594 != v573)
                                                              && *(_DWORD *)(v594 + 4) == (_DWORD)v2144)
                                                            {
                                                              v595 = (__int128 *)(v2263[10] + 24 * v593);
                                                            }
                                                            else
                                                            {
                                                              v595 = (__int128 *)v2263[11];
                                                            }
                                                            if (v587 < v577
                                                              && (v596 = *(_QWORD *)(v576 + 8 * v587)) != 0
                                                              && (v597 = *(unsigned __int16 *)(v596
                                                                                             + 2
                                                                                             * (HIDWORD(v2160) & 0x7F)),
                                                                  v2213 > v597)
                                                              && (v598 = v581 + 8 * v597, v598 != v580)
                                                              && *(_DWORD *)(v598 + 4) == (_DWORD)v2144)
                                                            {
                                                              v599 = (__int128 *)(v2256[10] + 16 * v597);
                                                            }
                                                            else
                                                            {
                                                              v599 = (__int128 *)v2256[11];
                                                            }
                                                            if (v587 < (v227[5] - v2201) >> 3
                                                              && (v600 = *(_QWORD *)(v2201 + 8 * v587)) != 0
                                                              && (v601 = *(unsigned __int16 *)(v600
                                                                                             + 2
                                                                                             * (HIDWORD(v2160) & 0x7F)),
                                                                  v2174 > v601)
                                                              && (v602 = v585 + 8 * v601, v602 != v2192)
                                                              && *(_DWORD *)(v602 + 4) == (_DWORD)v2144)
                                                            {
                                                              v541 = (int *)(v227[10] + 4 * v601);
                                                            }
                                                            else
                                                            {
                                                              v541 = (int *)v227[11];
                                                            }
                                                            md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::ShadowPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::StyleColor,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::WorldTransform&,arComponents::MeshComponent&,arComponents::Boundary&,arComponents::StyleColor&,arComponents::VisibilityAlpha&)#1}::operator()((uint64_t *)&v2273, v2160, v238, *(_QWORD *)v591, *(std::__shared_weak_count **)(v591 + 8), v595, v599, v541);
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            v238 += 5;
            v236 += 8;
          }
          while (v236 != v237);
        }
        v228 = v2261 + 23;
        if ((_QWORD *)v229 != v233)
        {
LABEL_722:
          if (v2263 + 4 == v233)
          {
            v2273 = &v2277;
            v2274 = v228;
            k = &v2269;
            v668 = v2263[7];
            v669 = v2263[8];
            if (v668 != v669)
            {
              v670 = (__int128 *)v2263[10];
              do
              {
                v672 = *(unsigned int *)(v668 + 4);
                v673 = v672 >> 7;
                v674 = v222[4];
                if (v672 >> 7 < (v222[5] - v674) >> 3)
                {
                  v675 = *(_QWORD *)(v674 + 8 * v673);
                  if (v675)
                  {
                    v676 = v672 & 0x7F;
                    v677 = *(unsigned __int16 *)(v675 + 2 * v676);
                    v679 = v222[7];
                    v678 = v222[8];
                    if (v677 < (v678 - v679) >> 3)
                    {
                      v680 = v679 + 8 * v677;
                      if (v680 != v678 && *(_DWORD *)(v680 + 4) == (_DWORD)v672)
                      {
                        v682 = v223[4];
                        if (v673 < (v223[5] - v682) >> 3)
                        {
                          v683 = *(_QWORD *)(v682 + 8 * v673);
                          if (v683)
                          {
                            v684 = *(unsigned __int16 *)(v683 + 2 * v676);
                            v686 = v223[7];
                            v685 = v223[8];
                            if (v684 < (v685 - v686) >> 3)
                            {
                              v687 = v686 + 8 * v684;
                              if (v687 != v685 && *(_DWORD *)(v687 + 4) == (_DWORD)v672)
                              {
                                v689 = v224[4];
                                v690 = (v224[5] - v689) >> 3;
                                if (v673 < v690)
                                {
                                  v691 = *(_QWORD *)(v689 + 8 * v673);
                                  if (v691)
                                  {
                                    v692 = *(unsigned __int16 *)(v691 + 2 * v676);
                                    v694 = v224[7];
                                    v693 = v224[8];
                                    v695 = (v693 - v694) >> 3;
                                    if (v695 > v692)
                                    {
                                      v696 = v694 + 8 * v692;
                                      if (v696 != v693 && *(_DWORD *)(v696 + 4) == (_DWORD)v672)
                                      {
                                        v698 = v2222[4];
                                        v699 = (v2222[5] - v698) >> 3;
                                        if (v673 < v699)
                                        {
                                          v700 = *(_QWORD *)(v698 + 8 * v673);
                                          if (v700)
                                          {
                                            v701 = *(unsigned __int16 *)(v700 + 2 * v676);
                                            v702 = v2222[7];
                                            v703 = v2222[8];
                                            v704 = (v703 - v702) >> 3;
                                            if (v704 > v701)
                                            {
                                              v705 = v702 + 8 * v701;
                                              if (v705 != v703 && *(_DWORD *)(v705 + 4) == (_DWORD)v672)
                                              {
                                                v706 = v2256[4];
                                                v707 = (v2256[5] - v706) >> 3;
                                                if (v673 < v707)
                                                {
                                                  v708 = *(_QWORD *)(v706 + 8 * v673);
                                                  if (v708)
                                                  {
                                                    v709 = *(unsigned __int16 *)(v708 + 2 * v676);
                                                    v711 = v2256[7];
                                                    v710 = v2256[8];
                                                    v712 = (v710 - v711) >> 3;
                                                    if (v712 > v709)
                                                    {
                                                      v713 = v711 + 8 * v709;
                                                      if (v713 != v710 && *(_DWORD *)(v713 + 4) == (_DWORD)v672)
                                                      {
                                                        v714 = v227[4];
                                                        v2228 = (v227[5] - v714) >> 3;
                                                        if (v673 < v2228)
                                                        {
                                                          v715 = *(_QWORD *)(v714 + 8 * v673);
                                                          if (v715)
                                                          {
                                                            v716 = *(unsigned __int16 *)(v715 + 2 * v676);
                                                            v2203 = v227[7];
                                                            v2215 = v227[8];
                                                            v717 = (v2215 - v2203) >> 3;
                                                            if (v717 > v716)
                                                            {
                                                              v718 = v2203 + 8 * v716;
                                                              if (v718 != v2215
                                                                && *(_DWORD *)(v718 + 4) == (_DWORD)v672)
                                                              {
                                                                v2176 = HIDWORD(*(_QWORD *)v668);
                                                                v2194 = *(_QWORD *)v668;
                                                                v719 = *(_QWORD *)v668 >> 39;
                                                                if (v719 < v690
                                                                  && (v720 = *(_QWORD *)(v689 + 8 * v719)) != 0
                                                                  && (v721 = *(unsigned __int16 *)(v720
                                                                                                 + 2
                                                                                                 * (HIDWORD(v2194) & 0x7F)),
                                                                      v695 > v721)
                                                                  && (v722 = v694 + 8 * v721, v722 != v693)
                                                                  && *(_DWORD *)(v722 + 4) == (_DWORD)v2176)
                                                                {
                                                                  v723 = (__int128 *)(v224[10]
                                                                                    + 80 * v721);
                                                                }
                                                                else
                                                                {
                                                                  v723 = (__int128 *)v224[11];
                                                                }
                                                                if (v719 < v699
                                                                  && (v724 = *(_QWORD *)(v698 + 8 * v719)) != 0
                                                                  && (v725 = *(unsigned __int16 *)(v724
                                                                                                 + 2
                                                                                                 * (HIDWORD(v2194) & 0x7F)),
                                                                      v704 > v725)
                                                                  && (v726 = v702 + 8 * v725, v726 != v703)
                                                                  && *(_DWORD *)(v726 + 4) == (_DWORD)v2176)
                                                                {
                                                                  v727 = v2222[10] + 16 * v725;
                                                                }
                                                                else
                                                                {
                                                                  v727 = v2222[11];
                                                                }
                                                                if (v719 < v707
                                                                  && (v728 = *(_QWORD *)(v706 + 8 * v719)) != 0
                                                                  && (v729 = *(unsigned __int16 *)(v728
                                                                                                 + 2
                                                                                                 * (HIDWORD(v2194) & 0x7F)),
                                                                      v712 > v729)
                                                                  && (v730 = v711 + 8 * v729, v730 != v710)
                                                                  && *(_DWORD *)(v730 + 4) == (_DWORD)v2176)
                                                                {
                                                                  v731 = (__int128 *)(v2256[10] + 16 * v729);
                                                                }
                                                                else
                                                                {
                                                                  v731 = (__int128 *)v2256[11];
                                                                }
                                                                if (v719 < v2228
                                                                  && (v732 = *(_QWORD *)(v714 + 8 * v719)) != 0
                                                                  && (v733 = *(unsigned __int16 *)(v732
                                                                                                 + 2
                                                                                                 * (HIDWORD(v2194) & 0x7F)),
                                                                      v717 > v733)
                                                                  && (v734 = v2203 + 8 * v733, v734 != v2215)
                                                                  && *(_DWORD *)(v734 + 4) == (_DWORD)v2176)
                                                                {
                                                                  v671 = (int *)(v227[10] + 4 * v733);
                                                                }
                                                                else
                                                                {
                                                                  v671 = (int *)v227[11];
                                                                }
                                                                md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::ShadowPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::StyleColor,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::WorldTransform&,arComponents::MeshComponent&,arComponents::Boundary&,arComponents::StyleColor&,arComponents::VisibilityAlpha&)#1}::operator()((uint64_t *)&v2273, v2194, v723, *(_QWORD *)v727, *(std::__shared_weak_count **)(v727 + 8), v670, v731, v671);
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                v670 = (__int128 *)((char *)v670 + 24);
                v668 += 8;
              }
              while (v668 != v669);
            }
            v228 = v2261 + 23;
          }
          if (v2256 + 4 == v233)
          {
            v2273 = &v2277;
            v2274 = v228;
            k = &v2269;
            v735 = v2256[7];
            v736 = v2256[8];
            if (v735 != v736)
            {
              v737 = (__int128 *)v2256[10];
              do
              {
                v739 = *(unsigned int *)(v735 + 4);
                v740 = v739 >> 7;
                v741 = v222[4];
                if (v739 >> 7 < (v222[5] - v741) >> 3)
                {
                  v742 = *(_QWORD *)(v741 + 8 * v740);
                  if (v742)
                  {
                    v743 = v739 & 0x7F;
                    v744 = *(unsigned __int16 *)(v742 + 2 * v743);
                    v746 = v222[7];
                    v745 = v222[8];
                    if (v744 < (v745 - v746) >> 3)
                    {
                      v747 = v746 + 8 * v744;
                      if (v747 != v745 && *(_DWORD *)(v747 + 4) == (_DWORD)v739)
                      {
                        v749 = v223[4];
                        if (v740 < (v223[5] - v749) >> 3)
                        {
                          v750 = *(_QWORD *)(v749 + 8 * v740);
                          if (v750)
                          {
                            v751 = *(unsigned __int16 *)(v750 + 2 * v743);
                            v753 = v223[7];
                            v752 = v223[8];
                            if (v751 < (v752 - v753) >> 3)
                            {
                              v754 = v753 + 8 * v751;
                              if (v754 != v752 && *(_DWORD *)(v754 + 4) == (_DWORD)v739)
                              {
                                v756 = v224[4];
                                v757 = (v224[5] - v756) >> 3;
                                if (v740 < v757)
                                {
                                  v758 = *(_QWORD *)(v756 + 8 * v740);
                                  if (v758)
                                  {
                                    v759 = *(unsigned __int16 *)(v758 + 2 * v743);
                                    v761 = v224[7];
                                    v760 = v224[8];
                                    v762 = (v760 - v761) >> 3;
                                    if (v762 > v759)
                                    {
                                      v763 = v761 + 8 * v759;
                                      if (v763 != v760 && *(_DWORD *)(v763 + 4) == (_DWORD)v739)
                                      {
                                        v765 = v2222[4];
                                        v766 = (v2222[5] - v765) >> 3;
                                        if (v740 < v766)
                                        {
                                          v767 = *(_QWORD *)(v765 + 8 * v740);
                                          if (v767)
                                          {
                                            v768 = *(unsigned __int16 *)(v767 + 2 * v743);
                                            v769 = v2222[7];
                                            v770 = v2222[8];
                                            v771 = (v770 - v769) >> 3;
                                            if (v771 > v768)
                                            {
                                              v772 = v769 + 8 * v768;
                                              if (v772 != v770 && *(_DWORD *)(v772 + 4) == (_DWORD)v739)
                                              {
                                                v773 = v2263[4];
                                                v774 = (v2263[5] - v773) >> 3;
                                                if (v740 < v774)
                                                {
                                                  v775 = *(_QWORD *)(v773 + 8 * v740);
                                                  if (v775)
                                                  {
                                                    v776 = *(unsigned __int16 *)(v775 + 2 * v743);
                                                    v778 = v2263[7];
                                                    v777 = v2263[8];
                                                    v2237 = (v777 - v778) >> 3;
                                                    if (v2237 > v776)
                                                    {
                                                      v779 = v778 + 8 * v776;
                                                      if (v779 != v777 && *(_DWORD *)(v779 + 4) == (_DWORD)v739)
                                                      {
                                                        v2229 = v227[4];
                                                        if (v740 < (v227[5] - v2229) >> 3)
                                                        {
                                                          v780 = *(_QWORD *)(v2229 + 8 * v740);
                                                          if (v780)
                                                          {
                                                            v781 = *(unsigned __int16 *)(v780 + 2 * v743);
                                                            v782 = v227[7];
                                                            v2216 = v227[8];
                                                            v2204 = (v2216 - v782) >> 3;
                                                            if (v2204 > v781)
                                                            {
                                                              v783 = v782 + 8 * v781;
                                                              if (v783 != v2216
                                                                && *(_DWORD *)(v783 + 4) == (_DWORD)v739)
                                                              {
                                                                v2177 = HIDWORD(*(_QWORD *)v735);
                                                                v2195 = *(_QWORD *)v735;
                                                                v784 = *(_QWORD *)v735 >> 39;
                                                                if (v784 < v757
                                                                  && (v785 = *(_QWORD *)(v756 + 8 * v784)) != 0
                                                                  && (v786 = *(unsigned __int16 *)(v785
                                                                                                 + 2
                                                                                                 * (HIDWORD(v2195) & 0x7F)),
                                                                      v762 > v786)
                                                                  && (v787 = v761 + 8 * v786, v787 != v760)
                                                                  && *(_DWORD *)(v787 + 4) == (_DWORD)v2177)
                                                                {
                                                                  v788 = (__int128 *)(v224[10]
                                                                                    + 80 * v786);
                                                                }
                                                                else
                                                                {
                                                                  v788 = (__int128 *)v224[11];
                                                                }
                                                                if (v784 < v766
                                                                  && (v789 = *(_QWORD *)(v765 + 8 * v784)) != 0
                                                                  && (v790 = *(unsigned __int16 *)(v789
                                                                                                 + 2
                                                                                                 * (HIDWORD(v2195) & 0x7F)),
                                                                      v771 > v790)
                                                                  && (v791 = v769 + 8 * v790, v791 != v770)
                                                                  && *(_DWORD *)(v791 + 4) == (_DWORD)v2177)
                                                                {
                                                                  v792 = v2222[10] + 16 * v790;
                                                                }
                                                                else
                                                                {
                                                                  v792 = v2222[11];
                                                                }
                                                                if (v784 < v774
                                                                  && (v793 = *(_QWORD *)(v773 + 8 * v784)) != 0
                                                                  && (v794 = *(unsigned __int16 *)(v793
                                                                                                 + 2
                                                                                                 * (HIDWORD(v2195) & 0x7F)),
                                                                      v2237 > v794)
                                                                  && (v795 = v778 + 8 * v794, v795 != v777)
                                                                  && *(_DWORD *)(v795 + 4) == (_DWORD)v2177)
                                                                {
                                                                  v796 = (__int128 *)(v2263[10]
                                                                                    + 24 * v794);
                                                                }
                                                                else
                                                                {
                                                                  v796 = (__int128 *)v2263[11];
                                                                }
                                                                if (v784 < (v227[5] - v2229) >> 3
                                                                  && (v797 = *(_QWORD *)(v2229 + 8 * v784)) != 0
                                                                  && (v798 = *(unsigned __int16 *)(v797
                                                                                                 + 2
                                                                                                 * (HIDWORD(v2195) & 0x7F)),
                                                                      v2204 > v798)
                                                                  && (v799 = v782 + 8 * v798, v799 != v2216)
                                                                  && *(_DWORD *)(v799 + 4) == (_DWORD)v2177)
                                                                {
                                                                  v738 = (int *)(v227[10] + 4 * v798);
                                                                }
                                                                else
                                                                {
                                                                  v738 = (int *)v227[11];
                                                                }
                                                                md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::ShadowPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::StyleColor,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::WorldTransform&,arComponents::MeshComponent&,arComponents::Boundary&,arComponents::StyleColor&,arComponents::VisibilityAlpha&)#1}::operator()((uint64_t *)&v2273, v2195, v788, *(_QWORD *)v792, *(std::__shared_weak_count **)(v792 + 8), v796, v737, v738);
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                ++v737;
                v735 += 8;
              }
              while (v735 != v736);
            }
            v228 = v2261 + 23;
          }
          if ((_QWORD *)v2243 == v233)
          {
            v2273 = &v2277;
            v2274 = v228;
            k = &v2269;
            v803 = v227[7];
            v804 = v227[8];
            if (v803 != v804)
            {
              v805 = (int *)v227[10];
              do
              {
                v823 = *(unsigned int *)(v803 + 4);
                v824 = v823 >> 7;
                v825 = v222[4];
                if (v823 >> 7 < (v222[5] - v825) >> 3)
                {
                  v826 = *(_QWORD *)(v825 + 8 * v824);
                  if (v826)
                  {
                    v827 = v823 & 0x7F;
                    v828 = *(unsigned __int16 *)(v826 + 2 * v827);
                    v830 = v222[7];
                    v829 = v222[8];
                    if (v828 < (v829 - v830) >> 3)
                    {
                      v831 = v830 + 8 * v828;
                      if (v831 != v829 && *(_DWORD *)(v831 + 4) == (_DWORD)v823)
                      {
                        v833 = v223[4];
                        if (v824 < (v223[5] - v833) >> 3)
                        {
                          v834 = *(_QWORD *)(v833 + 8 * v824);
                          if (v834)
                          {
                            v835 = *(unsigned __int16 *)(v834 + 2 * v827);
                            v837 = v223[7];
                            v836 = v223[8];
                            if (v835 < (v836 - v837) >> 3)
                            {
                              v838 = v837 + 8 * v835;
                              if (v838 != v836 && *(_DWORD *)(v838 + 4) == (_DWORD)v823)
                              {
                                v840 = v224[4];
                                v841 = (v224[5] - v840) >> 3;
                                if (v824 < v841)
                                {
                                  v842 = *(_QWORD *)(v840 + 8 * v824);
                                  if (v842)
                                  {
                                    v843 = *(unsigned __int16 *)(v842 + 2 * v827);
                                    v845 = v224[7];
                                    v844 = v224[8];
                                    v846 = (v844 - v845) >> 3;
                                    if (v846 > v843)
                                    {
                                      v847 = v845 + 8 * v843;
                                      if (v847 != v844 && *(_DWORD *)(v847 + 4) == (_DWORD)v823)
                                      {
                                        v849 = v2222[4];
                                        v850 = (v2222[5] - v849) >> 3;
                                        if (v824 < v850)
                                        {
                                          v851 = *(_QWORD *)(v849 + 8 * v824);
                                          if (v851)
                                          {
                                            v852 = *(unsigned __int16 *)(v851 + 2 * v827);
                                            v853 = v2222[7];
                                            v854 = v2222[8];
                                            v855 = (v854 - v853) >> 3;
                                            if (v855 > v852)
                                            {
                                              v856 = v853 + 8 * v852;
                                              if (v856 != v854 && *(_DWORD *)(v856 + 4) == (_DWORD)v823)
                                              {
                                                v857 = v2263[4];
                                                v858 = (v2263[5] - v857) >> 3;
                                                if (v824 < v858)
                                                {
                                                  v859 = *(_QWORD *)(v857 + 8 * v824);
                                                  if (v859)
                                                  {
                                                    v860 = *(unsigned __int16 *)(v859 + 2 * v827);
                                                    v862 = v2263[7];
                                                    v861 = v2263[8];
                                                    v863 = (v861 - v862) >> 3;
                                                    if (v863 > v860)
                                                    {
                                                      v864 = v862 + 8 * v860;
                                                      if (v864 != v861 && *(_DWORD *)(v864 + 4) == (_DWORD)v823)
                                                      {
                                                        v865 = v2256[4];
                                                        v866 = (v2256[5] - v865) >> 3;
                                                        if (v824 < v866)
                                                        {
                                                          v867 = *(_QWORD *)(v865 + 8 * v824);
                                                          if (v867)
                                                          {
                                                            v868 = *(unsigned __int16 *)(v867 + 2 * v827);
                                                            v2245 = v2256[7];
                                                            v2251 = v2256[8];
                                                            v869 = (v2251 - v2245) >> 3;
                                                            if (v869 > v868)
                                                            {
                                                              v870 = v2245 + 8 * v868;
                                                              if (v870 != v2251
                                                                && *(_DWORD *)(v870 + 4) == (_DWORD)v823)
                                                              {
                                                                v2231 = HIDWORD(*(_QWORD *)v803);
                                                                v2239 = *(_QWORD *)v803;
                                                                v871 = *(_QWORD *)v803 >> 39;
                                                                if (v871 < v841
                                                                  && (v872 = *(_QWORD *)(v840 + 8 * v871)) != 0
                                                                  && (v873 = *(unsigned __int16 *)(v872
                                                                                                 + 2
                                                                                                 * (HIDWORD(v2239) & 0x7F)),
                                                                      v846 > v873)
                                                                  && (v874 = v845 + 8 * v873, v874 != v844)
                                                                  && *(_DWORD *)(v874 + 4) == (_DWORD)v2231)
                                                                {
                                                                  v875 = (__int128 *)(v224[10]
                                                                                    + 80 * v873);
                                                                }
                                                                else
                                                                {
                                                                  v875 = (__int128 *)v224[11];
                                                                }
                                                                if (v871 < v850
                                                                  && (v876 = *(_QWORD *)(v849 + 8 * v871)) != 0
                                                                  && (v877 = *(unsigned __int16 *)(v876
                                                                                                 + 2
                                                                                                 * (HIDWORD(v2239) & 0x7F)),
                                                                      v855 > v877)
                                                                  && (v878 = v853 + 8 * v877, v878 != v854)
                                                                  && *(_DWORD *)(v878 + 4) == (_DWORD)v2231)
                                                                {
                                                                  v879 = v2222[10] + 16 * v877;
                                                                }
                                                                else
                                                                {
                                                                  v879 = v2222[11];
                                                                }
                                                                if (v871 < v858
                                                                  && (v880 = *(_QWORD *)(v857 + 8 * v871)) != 0
                                                                  && (v881 = *(unsigned __int16 *)(v880
                                                                                                 + 2
                                                                                                 * (HIDWORD(v2239) & 0x7F)),
                                                                      v863 > v881)
                                                                  && (v882 = v862 + 8 * v881, v882 != v861)
                                                                  && *(_DWORD *)(v882 + 4) == (_DWORD)v2231)
                                                                {
                                                                  v883 = (__int128 *)(v2263[10]
                                                                                    + 24 * v881);
                                                                }
                                                                else
                                                                {
                                                                  v883 = (__int128 *)v2263[11];
                                                                }
                                                                if (v871 < v866
                                                                  && (v884 = *(_QWORD *)(v865 + 8 * v871)) != 0
                                                                  && (v885 = *(unsigned __int16 *)(v884
                                                                                                 + 2
                                                                                                 * (HIDWORD(v2239) & 0x7F)),
                                                                      v869 > v885)
                                                                  && (v886 = v2245 + 8 * v885, v886 != v2251)
                                                                  && *(_DWORD *)(v886 + 4) == (_DWORD)v2231)
                                                                {
                                                                  v822 = (__int128 *)(v2256[10] + 16 * v885);
                                                                }
                                                                else
                                                                {
                                                                  v822 = (__int128 *)v2256[11];
                                                                }
                                                                md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::ShadowPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::StyleColor,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::WorldTransform&,arComponents::MeshComponent&,arComponents::Boundary&,arComponents::StyleColor&,arComponents::VisibilityAlpha&)#1}::operator()((uint64_t *)&v2273, v2239, v875, *(_QWORD *)v879, *(std::__shared_weak_count **)(v879 + 8), v883, v822, v805);
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                ++v805;
                v803 += 8;
              }
              while (v803 != v804);
            }
          }
          v800 = (__int128 *)v2279;
          if ((__int128 *)v2279 == &v2277)
          {
            v802 = 4;
            v800 = &v2277;
            v801 = v2261;
          }
          else
          {
            v801 = v2261;
            if (!(_QWORD)v2279)
              goto LABEL_876;
            v802 = 5;
          }
          (*(void (**)(void))(*(_QWORD *)v800 + 8 * v802))();
LABEL_876:
          v807 = v801[15];
          v806 = v801[16];
          *(_QWORD *)&v2269 = v807;
          v2272 = v806;
          *(_QWORD *)&v2277 = &off_1E42C8678;
          *((_QWORD *)&v2277 + 1) = &v2272;
          *(_QWORD *)&v2279 = &v2277;
          v808 = (_QWORD *)gdc::Registry::storage<arComponents::TransitionToRenderRegistry>(v807);
          v809 = (_QWORD *)gdc::Registry::storage<arComponents::StandardPipeline>(v807);
          v810 = (_QWORD *)gdc::Registry::storage<arComponents::WorldTransform>(v807);
          v811 = gdc::Registry::storage<arComponents::MeshDataComponent>(v807);
          v2257 = (_QWORD *)gdc::Registry::storage<arComponents::AlbedoTextureComponent>(v807);
          v2250 = (_QWORD *)gdc::Registry::storage<arComponents::AlbedoTextureUVMapping>(v807);
          v2244 = (_QWORD *)gdc::Registry::storage<arComponents::AlbedoTextureUVScale>(v807);
          v2238 = (_QWORD *)gdc::Registry::storage<arComponents::Boundary>(v807);
          v812 = (_QWORD *)gdc::Registry::storage<arComponents::StyleColor>(v807);
          v813 = v2261 + 17;
          v814 = v809 + 4;
          v815 = v810 + 4;
          v816 = v811 + 32;
          v817 = v2257 + 4;
          if (v809[8] - v809[7] >= v808[8] - v808[7])
            v818 = v808 + 4;
          else
            v818 = v809 + 4;
          if (v810[8] - v810[7] < v818[4] - v818[3])
            v818 = v810 + 4;
          v2196 = (_QWORD *)v811;
          if (*(_QWORD *)(v811 + 64) - *(_QWORD *)(v811 + 56) < v818[4] - v818[3])
            v818 = (_QWORD *)(v811 + 32);
          if (v2257[8] - v2257[7] < v818[4] - v818[3])
            v818 = v2257 + 4;
          if (v2250[8] - v2250[7] < v818[4] - v818[3])
            v818 = v2250 + 4;
          if (v2244[8] - v2244[7] < v818[4] - v818[3])
            v818 = v2244 + 4;
          v2230 = v812 + 4;
          if (v2238[8] - v2238[7] < v818[4] - v818[3])
            v818 = v2238 + 4;
          if (v812[8] - v812[7] >= v818[4] - v818[3])
            v819 = v818;
          else
            v819 = v812 + 4;
          if (v808 + 4 == v819)
          {
            v2273 = &v2277;
            v2274 = v2261 + 17;
            k = &v2269;
            v821 = v808[7];
            v820 = v808[8];
            while (v821 != v820)
            {
              v888 = *(unsigned int *)(v821 + 4);
              v889 = v888 >> 7;
              v890 = v809[4];
              if (v888 >> 7 < (v809[5] - v890) >> 3)
              {
                v891 = *(_QWORD *)(v890 + 8 * v889);
                if (v891)
                {
                  v892 = v888 & 0x7F;
                  v893 = *(unsigned __int16 *)(v891 + 2 * v892);
                  v895 = v809[7];
                  v894 = v809[8];
                  if (v893 < (v894 - v895) >> 3)
                  {
                    v896 = v895 + 8 * v893;
                    if (v896 != v894 && *(_DWORD *)(v896 + 4) == (_DWORD)v888)
                    {
                      v898 = v810[4];
                      v899 = (v810[5] - v898) >> 3;
                      if (v889 < v899)
                      {
                        v900 = *(_QWORD *)(v898 + 8 * v889);
                        if (v900)
                        {
                          v901 = *(unsigned __int16 *)(v900 + 2 * v892);
                          v902 = v810[7];
                          v903 = v810[8];
                          v904 = (v903 - v902) >> 3;
                          if (v904 > v901)
                          {
                            v905 = v902 + 8 * v901;
                            if (v905 != v903 && *(_DWORD *)(v905 + 4) == (_DWORD)v888)
                            {
                              v907 = v2196[4];
                              v908 = (v2196[5] - v907) >> 3;
                              if (v889 < v908)
                              {
                                v909 = *(_QWORD *)(v907 + 8 * v889);
                                if (v909)
                                {
                                  v910 = *(unsigned __int16 *)(v909 + 2 * v892);
                                  v912 = v2196[7];
                                  v911 = v2196[8];
                                  v913 = (v911 - v912) >> 3;
                                  if (v913 > v910)
                                  {
                                    v914 = v912 + 8 * v910;
                                    if (v914 != v911 && *(_DWORD *)(v914 + 4) == (_DWORD)v888)
                                    {
                                      v916 = v2257[4];
                                      v917 = (v2257[5] - v916) >> 3;
                                      if (v889 < v917)
                                      {
                                        v918 = *(_QWORD *)(v916 + 8 * v889);
                                        if (v918)
                                        {
                                          v919 = *(unsigned __int16 *)(v918 + 2 * v892);
                                          v920 = v2257[7];
                                          v2178 = v2257[8];
                                          v2162 = (v2178 - v920) >> 3;
                                          if (v2162 > v919)
                                          {
                                            v921 = v920 + 8 * v919;
                                            if (v921 != v2178 && *(_DWORD *)(v921 + 4) == (_DWORD)v888)
                                            {
                                              v2132 = (uint64_t)(v2250[5] - v2250[4]) >> 3;
                                              v2146 = v2250[4];
                                              if (v889 < v2132)
                                              {
                                                v922 = *(_QWORD *)(v2146 + 8 * v889);
                                                if (v922)
                                                {
                                                  v2119 = *(unsigned __int16 *)(v922 + 2 * v892);
                                                  v2096 = v2250[7];
                                                  v2107 = v2250[8];
                                                  v2085 = (v2107 - v2096) >> 3;
                                                  if (v2085 > v2119)
                                                  {
                                                    v923 = v2096 + 8 * v2119;
                                                    if (v923 != v2107 && *(_DWORD *)(v923 + 4) == (_DWORD)v888)
                                                    {
                                                      v2120 = v2244[4];
                                                      v2074 = (v2244[5] - v2120) >> 3;
                                                      if (v889 < v2074)
                                                      {
                                                        v924 = *(_QWORD *)(v2120 + 8 * v889);
                                                        if (v924)
                                                        {
                                                          v2063 = *(unsigned __int16 *)(v924 + 2 * v892);
                                                          v2047 = v2244[7];
                                                          v2055 = v2244[8];
                                                          v2039 = (v2055 - v2047) >> 3;
                                                          if (v2039 > v2063)
                                                          {
                                                            v925 = v2047 + 8 * v2063;
                                                            if (v925 != v2055 && *(_DWORD *)(v925 + 4) == (_DWORD)v888)
                                                            {
                                                              v2064 = v2238[4];
                                                              v2032 = (v2238[5] - v2064) >> 3;
                                                              if (v889 < v2032)
                                                              {
                                                                v926 = *(_QWORD *)(v2064 + 8 * v889);
                                                                if (v926)
                                                                {
                                                                  v2022 = *(unsigned __int16 *)(v926 + 2 * v892);
                                                                  v2011 = v2238[7];
                                                                  v2016 = v2238[8];
                                                                  v2007 = (v2016 - v2011) >> 3;
                                                                  if (v2007 > v2022)
                                                                  {
                                                                    v927 = v2011 + 8 * v2022;
                                                                    if (v927 != v2016
                                                                      && *(_DWORD *)(v927 + 4) == (_DWORD)v888)
                                                                    {
                                                                      v2004 = v812[4];
                                                                      if (v889 < (v812[5] - v2004) >> 3)
                                                                      {
                                                                        v928 = (v812[5] - v2004) >> 3;
                                                                        v929 = *(_QWORD *)(v2004 + 8 * v889);
                                                                        if (v929)
                                                                        {
                                                                          v930 = *(unsigned __int16 *)(v929 + 2 * v892);
                                                                          v2000 = v812[7];
                                                                          v2002 = v812[8];
                                                                          v931 = (v2002 - v2000) >> 3;
                                                                          if (v931 > v930)
                                                                          {
                                                                            v932 = v2000 + 8 * v930;
                                                                            if (v932 != v2002
                                                                              && *(_DWORD *)(v932 + 4) == (_DWORD)v888)
                                                                            {
                                                                              v2023 = v812;
                                                                              v933 = *(_QWORD *)v821;
                                                                              v934 = HIDWORD(*(_QWORD *)v821);
                                                                              v935 = *(_QWORD *)v821 >> 39;
                                                                              if (v935 < v899
                                                                                && (v936 = *(_QWORD *)(v898 + 8 * v935)) != 0
                                                                                && (v937 = *(unsigned __int16 *)(v936 + 2 * (HIDWORD(v933) & 0x7F)),
                                                                                    v904 > v937)
                                                                                && (v938 = v902 + 8 * v937, v938 != v903)
                                                                                && *(_DWORD *)(v938 + 4) == (_DWORD)v934)
                                                                              {
                                                                                v939 = (__int128 *)(v810[10]
                                                                                                  + 80 * v937);
                                                                              }
                                                                              else
                                                                              {
                                                                                v939 = (__int128 *)v810[11];
                                                                              }
                                                                              if (v935 < v908
                                                                                && (v940 = *(_QWORD *)(v907 + 8 * v935)) != 0
                                                                                && (v941 = *(unsigned __int16 *)(v940 + 2 * (HIDWORD(v933) & 0x7F)),
                                                                                    v913 > v941)
                                                                                && (v942 = v912 + 8 * v941, v942 != v911)
                                                                                && *(_DWORD *)(v942 + 4) == (_DWORD)v934)
                                                                              {
                                                                                v943 = (uint64_t *)(v2196[10] + 8 * v941);
                                                                              }
                                                                              else
                                                                              {
                                                                                v943 = (uint64_t *)v2196[11];
                                                                              }
                                                                              if (v935 < v917
                                                                                && (v944 = *(_QWORD *)(v916 + 8 * v935)) != 0
                                                                                && (v945 = *(unsigned __int16 *)(v944 + 2 * (HIDWORD(v933) & 0x7F)),
                                                                                    v2162 > v945)
                                                                                && (v946 = v920 + 8 * v945, v946 != v2178)
                                                                                && *(_DWORD *)(v946 + 4) == (_DWORD)v934)
                                                                              {
                                                                                v947 = (uint64_t *)(v2257[10]
                                                                                                 + 48
                                                                                                 * v945);
                                                                              }
                                                                              else
                                                                              {
                                                                                v947 = (uint64_t *)v2257[11];
                                                                              }
                                                                              if (v935 < v2132
                                                                                && (v948 = *(_QWORD *)(v2146 + 8 * v935)) != 0
                                                                                && (v949 = *(unsigned __int16 *)(v948 + 2 * (HIDWORD(v933) & 0x7F)),
                                                                                    v2085 > v949)
                                                                                && (v950 = v2096 + 8 * v949,
                                                                                    v950 != v2107)
                                                                                && *(_DWORD *)(v950 + 4) == (_DWORD)v934)
                                                                              {
                                                                                v951 = (__int128 *)(v2250[10] + 16 * v949);
                                                                              }
                                                                              else
                                                                              {
                                                                                v951 = (__int128 *)v2250[11];
                                                                              }
                                                                              if (v935 < v2074
                                                                                && (v952 = *(_QWORD *)(v2120 + 8 * v935)) != 0
                                                                                && (v953 = *(unsigned __int16 *)(v952 + 2 * (HIDWORD(v933) & 0x7F)),
                                                                                    v2039 > v953)
                                                                                && (v954 = v2047 + 8 * v953,
                                                                                    v954 != v2055)
                                                                                && *(_DWORD *)(v954 + 4) == (_DWORD)v934)
                                                                              {
                                                                                v955 = (uint64_t *)(v2244[10] + 8 * v953);
                                                                              }
                                                                              else
                                                                              {
                                                                                v955 = (uint64_t *)v2244[11];
                                                                              }
                                                                              if (v935 < v2032
                                                                                && (v956 = *(_QWORD *)(v2064 + 8 * v935)) != 0
                                                                                && (v957 = *(unsigned __int16 *)(v956 + 2 * (HIDWORD(v933) & 0x7F)),
                                                                                    v2007 > v957)
                                                                                && (v958 = v2011 + 8 * v957,
                                                                                    v958 != v2016)
                                                                                && *(_DWORD *)(v958 + 4) == (_DWORD)v934)
                                                                              {
                                                                                v959 = (__int128 *)(v2238[10]
                                                                                                  + 24 * v957);
                                                                              }
                                                                              else
                                                                              {
                                                                                v959 = (__int128 *)v2238[11];
                                                                              }
                                                                              if (v935 < v928
                                                                                && (v960 = *(_QWORD *)(v2004 + 8 * v935)) != 0
                                                                                && (v961 = *(unsigned __int16 *)(v960 + 2 * (HIDWORD(v933) & 0x7F)),
                                                                                    v931 > v961)
                                                                                && (v962 = v2000 + 8 * v961,
                                                                                    v962 != v2002)
                                                                                && *(_DWORD *)(v962 + 4) == (_DWORD)v934)
                                                                              {
                                                                                v887 = (__int128 *)(v2023[10] + 16 * v961);
                                                                              }
                                                                              else
                                                                              {
                                                                                v887 = (__int128 *)v2023[11];
                                                                              }
                                                                              md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshDataComponent,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::Boundary,arComponents::StyleColor>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::WorldTransform&,arComponents::MeshDataComponent&,arComponents::AlbedoTextureComponent&,arComponents::AlbedoTextureUVMapping&,arComponents::AlbedoTextureUVScale&,arComponents::Boundary&,arComponents::StyleColor&)#1}::operator()((uint64_t *)&v2273, v933, v939, *v943, v947, v951, v955, v959, v887);
                                                                              v812 = v2023;
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              v821 += 8;
            }
            v813 = v2261 + 17;
            if (v814 != v819)
            {
LABEL_896:
              if (v815 != v819)
                goto LABEL_1268;
              goto LABEL_1173;
            }
          }
          else if (v814 != v819)
          {
            goto LABEL_896;
          }
          v2273 = &v2277;
          v2274 = v813;
          k = &v2269;
          v964 = v809[7];
          for (j = v809[8]; v964 != j; v964 += 8)
          {
            v966 = *(unsigned int *)(v964 + 4);
            v967 = v966 >> 7;
            v968 = v808[4];
            if (v966 >> 7 < (v808[5] - v968) >> 3)
            {
              v969 = *(_QWORD *)(v968 + 8 * v967);
              if (v969)
              {
                v970 = v966 & 0x7F;
                v971 = *(unsigned __int16 *)(v969 + 2 * v970);
                v973 = v808[7];
                v972 = v808[8];
                if (v971 < (v972 - v973) >> 3)
                {
                  v974 = v973 + 8 * v971;
                  if (v974 != v972 && *(_DWORD *)(v974 + 4) == (_DWORD)v966)
                  {
                    v976 = v810[4];
                    v977 = (v810[5] - v976) >> 3;
                    if (v967 < v977)
                    {
                      v978 = *(_QWORD *)(v976 + 8 * v967);
                      if (v978)
                      {
                        v979 = *(unsigned __int16 *)(v978 + 2 * v970);
                        v980 = v810[7];
                        v981 = v810[8];
                        v982 = (v981 - v980) >> 3;
                        if (v982 > v979)
                        {
                          v983 = v980 + 8 * v979;
                          if (v983 != v981 && *(_DWORD *)(v983 + 4) == (_DWORD)v966)
                          {
                            v985 = v2196[4];
                            v986 = (v2196[5] - v985) >> 3;
                            if (v967 < v986)
                            {
                              v987 = *(_QWORD *)(v985 + 8 * v967);
                              if (v987)
                              {
                                v988 = *(unsigned __int16 *)(v987 + 2 * v970);
                                v990 = v2196[7];
                                v989 = v2196[8];
                                v991 = (v989 - v990) >> 3;
                                if (v991 > v988)
                                {
                                  v992 = v990 + 8 * v988;
                                  if (v992 != v989 && *(_DWORD *)(v992 + 4) == (_DWORD)v966)
                                  {
                                    v994 = v2257[4];
                                    v995 = (v2257[5] - v994) >> 3;
                                    if (v967 < v995)
                                    {
                                      v996 = *(_QWORD *)(v994 + 8 * v967);
                                      if (v996)
                                      {
                                        v997 = *(unsigned __int16 *)(v996 + 2 * v970);
                                        v998 = v2257[7];
                                        v2179 = v2257[8];
                                        v2163 = (v2179 - v998) >> 3;
                                        if (v2163 > v997)
                                        {
                                          v999 = v998 + 8 * v997;
                                          if (v999 != v2179 && *(_DWORD *)(v999 + 4) == (_DWORD)v966)
                                          {
                                            v2133 = (uint64_t)(v2250[5] - v2250[4]) >> 3;
                                            v2147 = v2250[4];
                                            if (v967 < v2133)
                                            {
                                              v1000 = *(_QWORD *)(v2147 + 8 * v967);
                                              if (v1000)
                                              {
                                                v2121 = *(unsigned __int16 *)(v1000 + 2 * v970);
                                                v2097 = v2250[7];
                                                v2108 = v2250[8];
                                                v2086 = (v2108 - v2097) >> 3;
                                                if (v2086 > v2121)
                                                {
                                                  v1001 = v2097 + 8 * v2121;
                                                  if (v1001 != v2108 && *(_DWORD *)(v1001 + 4) == (_DWORD)v966)
                                                  {
                                                    v2122 = v2244[4];
                                                    v2075 = (v2244[5] - v2122) >> 3;
                                                    if (v967 < v2075)
                                                    {
                                                      v1002 = *(_QWORD *)(v2122 + 8 * v967);
                                                      if (v1002)
                                                      {
                                                        v2065 = *(unsigned __int16 *)(v1002 + 2 * v970);
                                                        v2048 = v2244[7];
                                                        v2056 = v2244[8];
                                                        v2040 = (v2056 - v2048) >> 3;
                                                        if (v2040 > v2065)
                                                        {
                                                          v1003 = v2048 + 8 * v2065;
                                                          if (v1003 != v2056 && *(_DWORD *)(v1003 + 4) == (_DWORD)v966)
                                                          {
                                                            v2066 = v2238[4];
                                                            v2033 = (v2238[5] - v2066) >> 3;
                                                            if (v967 < v2033)
                                                            {
                                                              v1004 = *(_QWORD *)(v2066 + 8 * v967);
                                                              if (v1004)
                                                              {
                                                                v2024 = *(unsigned __int16 *)(v1004 + 2 * v970);
                                                                v2012 = v2238[7];
                                                                v2017 = v2238[8];
                                                                v2008 = (v2017 - v2012) >> 3;
                                                                if (v2008 > v2024)
                                                                {
                                                                  v1005 = v2012 + 8 * v2024;
                                                                  if (v1005 != v2017
                                                                    && *(_DWORD *)(v1005 + 4) == (_DWORD)v966)
                                                                  {
                                                                    v2005 = v812[4];
                                                                    if (v967 < (v812[5] - v2005) >> 3)
                                                                    {
                                                                      v1006 = (v812[5] - v2005) >> 3;
                                                                      v1007 = *(_QWORD *)(v2005 + 8 * v967);
                                                                      if (v1007)
                                                                      {
                                                                        v1008 = *(unsigned __int16 *)(v1007 + 2 * v970);
                                                                        v2001 = v812[7];
                                                                        v2003 = v812[8];
                                                                        v1009 = (v2003 - v2001) >> 3;
                                                                        if (v1009 > v1008)
                                                                        {
                                                                          v1010 = v2001 + 8 * v1008;
                                                                          if (v1010 != v2003
                                                                            && *(_DWORD *)(v1010 + 4) == (_DWORD)v966)
                                                                          {
                                                                            v2025 = v812;
                                                                            v1011 = *(_QWORD *)v964;
                                                                            v1012 = HIDWORD(*(_QWORD *)v964);
                                                                            v1013 = *(_QWORD *)v964 >> 39;
                                                                            if (v1013 < v977
                                                                              && (v1014 = *(_QWORD *)(v976 + 8 * v1013)) != 0
                                                                              && (v1015 = *(unsigned __int16 *)(v1014 + 2 * (HIDWORD(v1011) & 0x7F)),
                                                                                  v982 > v1015)
                                                                              && (v1016 = v980 + 8 * v1015, v1016 != v981)
                                                                              && *(_DWORD *)(v1016 + 4) == (_DWORD)v1012)
                                                                            {
                                                                              v1017 = (__int128 *)(v810[10]
                                                                                                 + 80
                                                                                                 * v1015);
                                                                            }
                                                                            else
                                                                            {
                                                                              v1017 = (__int128 *)v810[11];
                                                                            }
                                                                            if (v1013 < v986
                                                                              && (v1018 = *(_QWORD *)(v985 + 8 * v1013)) != 0
                                                                              && (v1019 = *(unsigned __int16 *)(v1018 + 2 * (HIDWORD(v1011) & 0x7F)),
                                                                                  v991 > v1019)
                                                                              && (v1020 = v990 + 8 * v1019, v1020 != v989)
                                                                              && *(_DWORD *)(v1020 + 4) == (_DWORD)v1012)
                                                                            {
                                                                              v1021 = (uint64_t *)(v2196[10] + 8 * v1019);
                                                                            }
                                                                            else
                                                                            {
                                                                              v1021 = (uint64_t *)v2196[11];
                                                                            }
                                                                            if (v1013 < v995
                                                                              && (v1022 = *(_QWORD *)(v994 + 8 * v1013)) != 0
                                                                              && (v1023 = *(unsigned __int16 *)(v1022 + 2 * (HIDWORD(v1011) & 0x7F)),
                                                                                  v2163 > v1023)
                                                                              && (v1024 = v998 + 8 * v1023,
                                                                                  v1024 != v2179)
                                                                              && *(_DWORD *)(v1024 + 4) == (_DWORD)v1012)
                                                                            {
                                                                              v1025 = (uint64_t *)(v2257[10]
                                                                                                + 48
                                                                                                * v1023);
                                                                            }
                                                                            else
                                                                            {
                                                                              v1025 = (uint64_t *)v2257[11];
                                                                            }
                                                                            if (v1013 < v2133
                                                                              && (v1026 = *(_QWORD *)(v2147 + 8 * v1013)) != 0
                                                                              && (v1027 = *(unsigned __int16 *)(v1026 + 2 * (HIDWORD(v1011) & 0x7F)),
                                                                                  v2086 > v1027)
                                                                              && (v1028 = v2097 + 8 * v1027,
                                                                                  v1028 != v2108)
                                                                              && *(_DWORD *)(v1028 + 4) == (_DWORD)v1012)
                                                                            {
                                                                              v1029 = (__int128 *)(v2250[10] + 16 * v1027);
                                                                            }
                                                                            else
                                                                            {
                                                                              v1029 = (__int128 *)v2250[11];
                                                                            }
                                                                            if (v1013 < v2075
                                                                              && (v1030 = *(_QWORD *)(v2122 + 8 * v1013)) != 0
                                                                              && (v1031 = *(unsigned __int16 *)(v1030 + 2 * (HIDWORD(v1011) & 0x7F)),
                                                                                  v2040 > v1031)
                                                                              && (v1032 = v2048 + 8 * v1031,
                                                                                  v1032 != v2056)
                                                                              && *(_DWORD *)(v1032 + 4) == (_DWORD)v1012)
                                                                            {
                                                                              v1033 = (uint64_t *)(v2244[10] + 8 * v1031);
                                                                            }
                                                                            else
                                                                            {
                                                                              v1033 = (uint64_t *)v2244[11];
                                                                            }
                                                                            if (v1013 < v2033
                                                                              && (v1034 = *(_QWORD *)(v2066 + 8 * v1013)) != 0
                                                                              && (v1035 = *(unsigned __int16 *)(v1034 + 2 * (HIDWORD(v1011) & 0x7F)),
                                                                                  v2008 > v1035)
                                                                              && (v1036 = v2012 + 8 * v1035,
                                                                                  v1036 != v2017)
                                                                              && *(_DWORD *)(v1036 + 4) == (_DWORD)v1012)
                                                                            {
                                                                              v1037 = (__int128 *)(v2238[10]
                                                                                                 + 24
                                                                                                 * v1035);
                                                                            }
                                                                            else
                                                                            {
                                                                              v1037 = (__int128 *)v2238[11];
                                                                            }
                                                                            if (v1013 < v1006
                                                                              && (v1038 = *(_QWORD *)(v2005 + 8 * v1013)) != 0
                                                                              && (v1039 = *(unsigned __int16 *)(v1038 + 2 * (HIDWORD(v1011) & 0x7F)),
                                                                                  v1009 > v1039)
                                                                              && (v1040 = v2001 + 8 * v1039,
                                                                                  v1040 != v2003)
                                                                              && *(_DWORD *)(v1040 + 4) == (_DWORD)v1012)
                                                                            {
                                                                              v965 = (__int128 *)(v2025[10] + 16 * v1039);
                                                                            }
                                                                            else
                                                                            {
                                                                              v965 = (__int128 *)v2025[11];
                                                                            }
                                                                            md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshDataComponent,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::Boundary,arComponents::StyleColor>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::WorldTransform&,arComponents::MeshDataComponent&,arComponents::AlbedoTextureComponent&,arComponents::AlbedoTextureUVMapping&,arComponents::AlbedoTextureUVScale&,arComponents::Boundary&,arComponents::StyleColor&)#1}::operator()((uint64_t *)&v2273, v1011, v1017, *v1021, v1025, v1029, v1033, v1037, v965);
                                                                            v812 = v2025;
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          v813 = v2261 + 17;
          if (v815 != v819)
          {
LABEL_1268:
            if ((_QWORD *)v816 == v819)
            {
              v2273 = &v2277;
              v2274 = v813;
              k = &v2269;
              v1120 = v2196[7];
              v1121 = v2196[8];
              if (v1120 != v1121)
              {
                v1122 = (uint64_t *)v2196[10];
                do
                {
                  v1124 = *(unsigned int *)(v1120 + 4);
                  v1125 = v1124 >> 7;
                  v1126 = v808[4];
                  if (v1124 >> 7 < (v808[5] - v1126) >> 3)
                  {
                    v1127 = *(_QWORD *)(v1126 + 8 * v1125);
                    if (v1127)
                    {
                      v1128 = v1124 & 0x7F;
                      v1129 = *(unsigned __int16 *)(v1127 + 2 * v1128);
                      v1131 = v808[7];
                      v1130 = v808[8];
                      if (v1129 < (v1130 - v1131) >> 3)
                      {
                        v1132 = v1131 + 8 * v1129;
                        if (v1132 != v1130 && *(_DWORD *)(v1132 + 4) == (_DWORD)v1124)
                        {
                          v1134 = v809[4];
                          if (v1125 < (v809[5] - v1134) >> 3)
                          {
                            v1135 = *(_QWORD *)(v1134 + 8 * v1125);
                            if (v1135)
                            {
                              v1136 = *(unsigned __int16 *)(v1135 + 2 * v1128);
                              v1138 = v809[7];
                              v1137 = v809[8];
                              if (v1136 < (v1137 - v1138) >> 3)
                              {
                                v1139 = v1138 + 8 * v1136;
                                if (v1139 != v1137 && *(_DWORD *)(v1139 + 4) == (_DWORD)v1124)
                                {
                                  v1141 = v810[4];
                                  v1142 = (v810[5] - v1141) >> 3;
                                  if (v1125 < v1142)
                                  {
                                    v1143 = *(_QWORD *)(v1141 + 8 * v1125);
                                    if (v1143)
                                    {
                                      v1144 = *(unsigned __int16 *)(v1143 + 2 * v1128);
                                      v1146 = v810[7];
                                      v1145 = v810[8];
                                      v1147 = (v1145 - v1146) >> 3;
                                      if (v1147 > v1144)
                                      {
                                        v1148 = v1146 + 8 * v1144;
                                        if (v1148 != v1145 && *(_DWORD *)(v1148 + 4) == (_DWORD)v1124)
                                        {
                                          v1150 = v2257[4];
                                          v1151 = (v2257[5] - v1150) >> 3;
                                          if (v1125 < v1151)
                                          {
                                            v1152 = *(_QWORD *)(v1150 + 8 * v1125);
                                            if (v1152)
                                            {
                                              v1153 = *(unsigned __int16 *)(v1152 + 2 * v1128);
                                              v1155 = v2257[7];
                                              v1154 = v2257[8];
                                              v1156 = (v1154 - v1155) >> 3;
                                              if (v1156 > v1153)
                                              {
                                                v1157 = v1155 + 8 * v1153;
                                                if (v1157 != v1154 && *(_DWORD *)(v1157 + 4) == (_DWORD)v1124)
                                                {
                                                  v1158 = v2250[4];
                                                  v1159 = (v2250[5] - v1158) >> 3;
                                                  if (v1125 < v1159)
                                                  {
                                                    v1160 = *(_QWORD *)(v1158 + 8 * v1125);
                                                    if (v1160)
                                                    {
                                                      v1161 = *(unsigned __int16 *)(v1160 + 2 * v1128);
                                                      v2165 = v2250[7];
                                                      v2181 = v2250[8];
                                                      v2149 = (v2181 - v2165) >> 3;
                                                      if (v2149 > v1161)
                                                      {
                                                        v1162 = v2165 + 8 * v1161;
                                                        if (v1162 != v2181 && *(_DWORD *)(v1162 + 4) == (_DWORD)v1124)
                                                        {
                                                          v2124 = (uint64_t)(v2244[5] - v2244[4]) >> 3;
                                                          v2135 = v2244[4];
                                                          if (v1125 < v2124)
                                                          {
                                                            v1163 = *(_QWORD *)(v2135 + 8 * v1125);
                                                            if (v1163)
                                                            {
                                                              v1164 = *(unsigned __int16 *)(v1163 + 2 * v1128);
                                                              v2099 = v2244[7];
                                                              v2110 = v2244[8];
                                                              v2088 = (v2110 - v2099) >> 3;
                                                              if (v2088 > v1164)
                                                              {
                                                                v1165 = v2099 + 8 * v1164;
                                                                if (v1165 != v2110
                                                                  && *(_DWORD *)(v1165 + 4) == (_DWORD)v1124)
                                                                {
                                                                  v2068 = (uint64_t)(v2238[5] - v2238[4]) >> 3;
                                                                  v2077 = v2238[4];
                                                                  if (v1125 < v2068)
                                                                  {
                                                                    v1166 = *(_QWORD *)(v2077 + 8 * v1125);
                                                                    if (v1166)
                                                                    {
                                                                      v1167 = *(unsigned __int16 *)(v1166 + 2 * v1128);
                                                                      v2050 = v2238[7];
                                                                      v2058 = v2238[8];
                                                                      v2042 = (v2058 - v2050) >> 3;
                                                                      if (v2042 > v1167)
                                                                      {
                                                                        v1168 = v2050 + 8 * v1167;
                                                                        if (v1168 != v2058
                                                                          && *(_DWORD *)(v1168 + 4) == (_DWORD)v1124)
                                                                        {
                                                                          v2035 = v812[4];
                                                                          v2019 = (v812[5] - v2035) >> 3;
                                                                          if (v1125 < v2019)
                                                                          {
                                                                            v1169 = *(_QWORD *)(v2035 + 8 * v1125);
                                                                            if (v1169)
                                                                            {
                                                                              v1170 = *(unsigned __int16 *)(v1169 + 2 * v1128);
                                                                              v1172 = v812[7];
                                                                              v1171 = v812[8];
                                                                              v2014 = (v1171 - v1172) >> 3;
                                                                              if (v2014 > v1170)
                                                                              {
                                                                                v1173 = v1172 + 8 * v1170;
                                                                                if (v1173 != v1171
                                                                                  && *(_DWORD *)(v1173 + 4) == (_DWORD)v1124)
                                                                                {
                                                                                  v2027 = v812;
                                                                                  v1174 = *(_QWORD *)v1120;
                                                                                  v1175 = HIDWORD(*(_QWORD *)v1120);
                                                                                  v1176 = *(_QWORD *)v1120 >> 39;
                                                                                  if (v1176 < v1142
                                                                                    && (v1177 = *(_QWORD *)(v1141 + 8 * v1176)) != 0
                                                                                    && (v1178 = *(unsigned __int16 *)(v1177 + 2 * (HIDWORD(v1174) & 0x7F)),
                                                                                        v1147 > v1178)
                                                                                    && (v1179 = v1146 + 8 * v1178,
                                                                                        v1179 != v1145)
                                                                                    && *(_DWORD *)(v1179 + 4) == (_DWORD)v1175)
                                                                                  {
                                                                                    v1180 = (__int128 *)(v810[10] + 80 * v1178);
                                                                                  }
                                                                                  else
                                                                                  {
                                                                                    v1180 = (__int128 *)v810[11];
                                                                                  }
                                                                                  if (v1176 < v1151
                                                                                    && (v1181 = *(_QWORD *)(v1150 + 8 * v1176)) != 0
                                                                                    && (v1182 = *(unsigned __int16 *)(v1181 + 2 * (HIDWORD(v1174) & 0x7F)),
                                                                                        v1156 > v1182)
                                                                                    && (v1183 = v1155 + 8 * v1182,
                                                                                        v1183 != v1154)
                                                                                    && *(_DWORD *)(v1183 + 4) == (_DWORD)v1175)
                                                                                  {
                                                                                    v1184 = (uint64_t *)(v2257[10] + 48 * *(unsigned __int16 *)(v1181 + 2 * (HIDWORD(v1174) & 0x7F)));
                                                                                  }
                                                                                  else
                                                                                  {
                                                                                    v1184 = (uint64_t *)v2257[11];
                                                                                  }
                                                                                  if (v1176 < v1159
                                                                                    && (v1185 = *(_QWORD *)(v1158 + 8 * v1176)) != 0
                                                                                    && (v1186 = *(unsigned __int16 *)(v1185 + 2 * (HIDWORD(v1174) & 0x7F)),
                                                                                        v2149 > v1186)
                                                                                    && (v1187 = v2165 + 8 * v1186,
                                                                                        v1187 != v2181)
                                                                                    && *(_DWORD *)(v1187 + 4) == (_DWORD)v1175)
                                                                                  {
                                                                                    v1188 = (__int128 *)(v2250[10] + 16 * v1186);
                                                                                  }
                                                                                  else
                                                                                  {
                                                                                    v1188 = (__int128 *)v2250[11];
                                                                                  }
                                                                                  if (v1176 < v2124
                                                                                    && (v1189 = *(_QWORD *)(v2135 + 8 * v1176)) != 0
                                                                                    && (v1190 = *(unsigned __int16 *)(v1189 + 2 * (HIDWORD(v1174) & 0x7F)),
                                                                                        v2088 > v1190)
                                                                                    && (v1191 = v2099 + 8 * v1190,
                                                                                        v1191 != v2110)
                                                                                    && *(_DWORD *)(v1191 + 4) == (_DWORD)v1175)
                                                                                  {
                                                                                    v1192 = (uint64_t *)(v2244[10] + 8 * v1190);
                                                                                  }
                                                                                  else
                                                                                  {
                                                                                    v1192 = (uint64_t *)v2244[11];
                                                                                  }
                                                                                  if (v1176 < v2068
                                                                                    && (v1193 = *(_QWORD *)(v2077 + 8 * v1176)) != 0
                                                                                    && (v1194 = *(unsigned __int16 *)(v1193 + 2 * (HIDWORD(v1174) & 0x7F)),
                                                                                        v2042 > v1194)
                                                                                    && (v1195 = v2050 + 8 * v1194,
                                                                                        v1195 != v2058)
                                                                                    && *(_DWORD *)(v1195 + 4) == (_DWORD)v1175)
                                                                                  {
                                                                                    v1196 = (__int128 *)(v2238[10] + 24 * v1194);
                                                                                  }
                                                                                  else
                                                                                  {
                                                                                    v1196 = (__int128 *)v2238[11];
                                                                                  }
                                                                                  if (v1176 < v2019
                                                                                    && (v1197 = *(_QWORD *)(v2035 + 8 * v1176)) != 0
                                                                                    && (v1198 = *(unsigned __int16 *)(v1197 + 2 * (HIDWORD(v1174) & 0x7F)),
                                                                                        v2014 > v1198)
                                                                                    && (v1199 = v1172 + 8 * v1198,
                                                                                        v1199 != v1171)
                                                                                    && *(_DWORD *)(v1199 + 4) == (_DWORD)v1175)
                                                                                  {
                                                                                    v1123 = (__int128 *)(v2027[10] + 16 * v1198);
                                                                                  }
                                                                                  else
                                                                                  {
                                                                                    v1123 = (__int128 *)v2027[11];
                                                                                  }
                                                                                  md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshDataComponent,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::Boundary,arComponents::StyleColor>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::WorldTransform&,arComponents::MeshDataComponent&,arComponents::AlbedoTextureComponent&,arComponents::AlbedoTextureUVMapping&,arComponents::AlbedoTextureUVScale&,arComponents::Boundary&,arComponents::StyleColor&)#1}::operator()((uint64_t *)&v2273, v1174, v1180, *v1122, v1184, v1188, v1192, v1196, v1123);
                                                                                  v812 = v2027;
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  ++v1122;
                  v1120 += 8;
                }
                while (v1120 != v1121);
              }
              v813 = v2261 + 17;
              if (v817 != v819)
              {
LABEL_1463:
                if (v2250 + 4 == v819)
                {
                  v2273 = &v2277;
                  v2274 = v813;
                  k = &v2269;
                  v1281 = v2250[7];
                  v1282 = v2250[8];
                  if (v1281 != v1282)
                  {
                    v1283 = (__int128 *)v2250[10];
                    do
                    {
                      v1770 = *(unsigned int *)(v1281 + 4);
                      v1771 = v1770 >> 7;
                      v1772 = v808[4];
                      if (v1770 >> 7 < (v808[5] - v1772) >> 3)
                      {
                        v1773 = *(_QWORD *)(v1772 + 8 * v1771);
                        if (v1773)
                        {
                          v1774 = v1770 & 0x7F;
                          v1775 = *(unsigned __int16 *)(v1773 + 2 * v1774);
                          v1777 = v808[7];
                          v1776 = v808[8];
                          if (v1775 < (v1776 - v1777) >> 3)
                          {
                            v1778 = v1777 + 8 * v1775;
                            if (v1778 != v1776 && *(_DWORD *)(v1778 + 4) == (_DWORD)v1770)
                            {
                              v1780 = v809[4];
                              if (v1771 < (v809[5] - v1780) >> 3)
                              {
                                v1781 = *(_QWORD *)(v1780 + 8 * v1771);
                                if (v1781)
                                {
                                  v1782 = *(unsigned __int16 *)(v1781 + 2 * v1774);
                                  v1784 = v809[7];
                                  v1783 = v809[8];
                                  if (v1782 < (v1783 - v1784) >> 3)
                                  {
                                    v1785 = v1784 + 8 * v1782;
                                    if (v1785 != v1783 && *(_DWORD *)(v1785 + 4) == (_DWORD)v1770)
                                    {
                                      v1787 = v810[4];
                                      v1788 = (v810[5] - v1787) >> 3;
                                      if (v1771 < v1788)
                                      {
                                        v1789 = *(_QWORD *)(v1787 + 8 * v1771);
                                        if (v1789)
                                        {
                                          v1790 = *(unsigned __int16 *)(v1789 + 2 * v1774);
                                          v1792 = v810[7];
                                          v1791 = v810[8];
                                          v1793 = (v1791 - v1792) >> 3;
                                          if (v1793 > v1790)
                                          {
                                            v1794 = v1792 + 8 * v1790;
                                            if (v1794 != v1791 && *(_DWORD *)(v1794 + 4) == (_DWORD)v1770)
                                            {
                                              v1796 = v2196[4];
                                              v1797 = (v2196[5] - v1796) >> 3;
                                              if (v1771 < v1797)
                                              {
                                                v1798 = *(_QWORD *)(v1796 + 8 * v1771);
                                                if (v1798)
                                                {
                                                  v1799 = *(unsigned __int16 *)(v1798 + 2 * v1774);
                                                  v1801 = v2196[7];
                                                  v1800 = v2196[8];
                                                  v1802 = (v1800 - v1801) >> 3;
                                                  if (v1802 > v1799)
                                                  {
                                                    v1803 = v1801 + 8 * v1799;
                                                    if (v1803 != v1800 && *(_DWORD *)(v1803 + 4) == (_DWORD)v1770)
                                                    {
                                                      v1804 = v2257[4];
                                                      v1805 = (v2257[5] - v1804) >> 3;
                                                      if (v1771 < v1805)
                                                      {
                                                        v1806 = *(_QWORD *)(v1804 + 8 * v1771);
                                                        if (v1806)
                                                        {
                                                          v1807 = *(unsigned __int16 *)(v1806 + 2 * v1774);
                                                          v2206 = v2257[8];
                                                          v2185 = v2257[7];
                                                          v813 = v2261 + 17;
                                                          v2168 = (v2206 - v2185) >> 3;
                                                          if (v2168 > v1807)
                                                          {
                                                            v1808 = v2185 + 8 * v1807;
                                                            if (v1808 != v2206
                                                              && *(_DWORD *)(v1808 + 4) == (_DWORD)v1770)
                                                            {
                                                              v813 = v2261 + 17;
                                                              v2139 = (uint64_t)(v2244[5] - v2244[4]) >> 3;
                                                              v2152 = v2244[4];
                                                              if (v1771 < v2139)
                                                              {
                                                                v1809 = *(_QWORD *)(v2152 + 8 * v1771);
                                                                if (v1809)
                                                                {
                                                                  v1810 = *(unsigned __int16 *)(v1809 + 2 * v1774);
                                                                  v2114 = v2244[7];
                                                                  v2127 = v2244[8];
                                                                  v813 = v2261 + 17;
                                                                  v2102 = (v2127 - v2114) >> 3;
                                                                  if (v2102 > v1810)
                                                                  {
                                                                    v1811 = v2114 + 8 * v1810;
                                                                    if (v1811 != v2127
                                                                      && *(_DWORD *)(v1811 + 4) == (_DWORD)v1770)
                                                                    {
                                                                      v813 = v2261 + 17;
                                                                      v2091 = v2238[4];
                                                                      v2081 = (v2238[5] - v2091) >> 3;
                                                                      if (v1771 < v2081)
                                                                      {
                                                                        v1812 = *(_QWORD *)(v2091 + 8 * v1771);
                                                                        if (v1812)
                                                                        {
                                                                          v2071 = *(unsigned __int16 *)(v1812 + 2 * v1774);
                                                                          v2053 = v2238[8];
                                                                          v2061 = v2238[7];
                                                                          v813 = v2261 + 17;
                                                                          v2045 = (v2053 - v2061) >> 3;
                                                                          if (v2045 > v2071)
                                                                          {
                                                                            v1813 = v2061 + 8 * v2071;
                                                                            if (v1813 != v2053
                                                                              && *(_DWORD *)(v1813 + 4) == (_DWORD)v1770)
                                                                            {
                                                                              v2072 = v812[4];
                                                                              v2037 = (v812[5] - v2072) >> 3;
                                                                              if (v1771 < v2037)
                                                                              {
                                                                                v1814 = *(_QWORD *)(v2072 + 8 * v1771);
                                                                                if (v1814)
                                                                                {
                                                                                  v1815 = *(unsigned __int16 *)(v1814 + 2 * v1774);
                                                                                  v1817 = v812[7];
                                                                                  v1816 = v812[8];
                                                                                  v1818 = (v1816 - v1817) >> 3;
                                                                                  v813 = v2261 + 17;
                                                                                  if (v1818 > v1815)
                                                                                  {
                                                                                    v1819 = v1817 + 8 * v1815;
                                                                                    if (v1819 != v1816
                                                                                      && *(_DWORD *)(v1819 + 4) == (_DWORD)v1770)
                                                                                    {
                                                                                      v2021 = v1283;
                                                                                      v2030 = v812;
                                                                                      v1820 = *(_QWORD *)v1281;
                                                                                      v1821 = HIDWORD(*(_QWORD *)v1281);
                                                                                      v1822 = *(_QWORD *)v1281 >> 39;
                                                                                      if (v1822 < v1788
                                                                                        && (v1823 = *(_QWORD *)(v1787 + 8 * v1822)) != 0
                                                                                        && (v1824 = *(unsigned __int16 *)(v1823 + 2 * (HIDWORD(v1820) & 0x7F)),
                                                                                            v1793 > v1824)
                                                                                        && (v1825 = v1792 + 8 * v1824,
                                                                                            v1825 != v1791)
                                                                                        && *(_DWORD *)(v1825 + 4) == (_DWORD)v1821)
                                                                                      {
                                                                                        v1826 = (__int128 *)(v810[10] + 80 * v1824);
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        v1826 = (__int128 *)v810[11];
                                                                                      }
                                                                                      if (v1822 < v1797
                                                                                        && (v1827 = *(_QWORD *)(v1796 + 8 * v1822)) != 0
                                                                                        && (v1828 = *(unsigned __int16 *)(v1827 + 2 * (HIDWORD(v1820) & 0x7F)),
                                                                                            v1802 > v1828)
                                                                                        && (v1829 = v1801 + 8 * v1828,
                                                                                            v1829 != v1800)
                                                                                        && *(_DWORD *)(v1829 + 4) == (_DWORD)v1821)
                                                                                      {
                                                                                        v1830 = (uint64_t *)(v2196[10] + 8 * v1828);
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        v1830 = (uint64_t *)v2196[11];
                                                                                      }
                                                                                      if (v1822 < v1805
                                                                                        && (v1831 = *(_QWORD *)(v1804 + 8 * v1822)) != 0
                                                                                        && (v1832 = *(unsigned __int16 *)(v1831 + 2 * (HIDWORD(v1820) & 0x7F)),
                                                                                            v2168 > v1832)
                                                                                        && (v1833 = v2185 + 8 * v1832,
                                                                                            v1833 != v2206)
                                                                                        && *(_DWORD *)(v1833 + 4) == (_DWORD)v1821)
                                                                                      {
                                                                                        v1834 = (uint64_t *)(v2257[10] + 48 * v1832);
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        v1834 = (uint64_t *)v2257[11];
                                                                                      }
                                                                                      if (v1822 < v2139
                                                                                        && (v1835 = *(_QWORD *)(v2152 + 8 * v1822)) != 0
                                                                                        && (v1836 = *(unsigned __int16 *)(v1835 + 2 * (HIDWORD(v1820) & 0x7F)),
                                                                                            v2102 > v1836)
                                                                                        && (v1837 = v2114 + 8 * v1836,
                                                                                            v1837 != v2127)
                                                                                        && *(_DWORD *)(v1837 + 4) == (_DWORD)v1821)
                                                                                      {
                                                                                        v1838 = (uint64_t *)(v2244[10] + 8 * v1836);
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        v1838 = (uint64_t *)v2244[11];
                                                                                      }
                                                                                      if (v1822 < v2081
                                                                                        && (v1839 = *(_QWORD *)(v2091 + 8 * v1822)) != 0
                                                                                        && (v1840 = *(unsigned __int16 *)(v1839 + 2 * (HIDWORD(v1820) & 0x7F)),
                                                                                            v2045 > v1840)
                                                                                        && (v1841 = v2061 + 8 * v1840,
                                                                                            v1841 != v2053)
                                                                                        && *(_DWORD *)(v1841 + 4) == (_DWORD)v1821)
                                                                                      {
                                                                                        v1842 = (__int128 *)(v2238[10] + 24 * v1840);
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        v1842 = (__int128 *)v2238[11];
                                                                                      }
                                                                                      if (v1822 < v2037
                                                                                        && (v1843 = *(_QWORD *)(v2072 + 8 * v1822)) != 0
                                                                                        && (v1844 = *(unsigned __int16 *)(v1843 + 2 * (HIDWORD(v1820) & 0x7F)),
                                                                                            v1818 > v1844)
                                                                                        && (v1845 = v1817 + 8 * v1844,
                                                                                            v1845 != v1816)
                                                                                        && *(_DWORD *)(v1845 + 4) == (_DWORD)v1821)
                                                                                      {
                                                                                        v1769 = (__int128 *)(v2030[10] + 16 * v1844);
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        v1769 = (__int128 *)v2030[11];
                                                                                      }
                                                                                      md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshDataComponent,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::Boundary,arComponents::StyleColor>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::WorldTransform&,arComponents::MeshDataComponent&,arComponents::AlbedoTextureComponent&,arComponents::AlbedoTextureUVMapping&,arComponents::AlbedoTextureUVScale&,arComponents::Boundary&,arComponents::StyleColor&)#1}::operator()((uint64_t *)&v2273, v1820, v1826, *v1830, v1834, v2021, v1838, v1842, v1769);
                                                                                      v1283 = v2021;
                                                                                      v812 = v2030;
                                                                                      v813 = v2261 + 17;
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                      ++v1283;
                      v1281 += 8;
                    }
                    while (v1281 != v1282);
                  }
                }
                if (v2244 + 4 == v819)
                {
                  v2273 = &v2277;
                  v2274 = v813;
                  k = &v2269;
                  v1284 = v2244[7];
                  v1285 = v2244[8];
                  if (v1284 != v1285)
                  {
                    v1286 = (uint64_t *)v2244[10];
                    do
                    {
                      v1847 = *(unsigned int *)(v1284 + 4);
                      v1848 = v1847 >> 7;
                      v1849 = v808[4];
                      if (v1847 >> 7 < (v808[5] - v1849) >> 3)
                      {
                        v1850 = *(_QWORD *)(v1849 + 8 * v1848);
                        if (v1850)
                        {
                          v1851 = v1847 & 0x7F;
                          v1852 = *(unsigned __int16 *)(v1850 + 2 * v1851);
                          v1854 = v808[7];
                          v1853 = v808[8];
                          if (v1852 < (v1853 - v1854) >> 3)
                          {
                            v1855 = v1854 + 8 * v1852;
                            if (v1855 != v1853 && *(_DWORD *)(v1855 + 4) == (_DWORD)v1847)
                            {
                              v1857 = v809[4];
                              if (v1848 < (v809[5] - v1857) >> 3)
                              {
                                v1858 = *(_QWORD *)(v1857 + 8 * v1848);
                                if (v1858)
                                {
                                  v1859 = *(unsigned __int16 *)(v1858 + 2 * v1851);
                                  v1861 = v809[7];
                                  v1860 = v809[8];
                                  if (v1859 < (v1860 - v1861) >> 3)
                                  {
                                    v1862 = v1861 + 8 * v1859;
                                    if (v1862 != v1860 && *(_DWORD *)(v1862 + 4) == (_DWORD)v1847)
                                    {
                                      v1864 = v810[4];
                                      v1865 = (v810[5] - v1864) >> 3;
                                      if (v1848 < v1865)
                                      {
                                        v1866 = *(_QWORD *)(v1864 + 8 * v1848);
                                        if (v1866)
                                        {
                                          v1867 = *(unsigned __int16 *)(v1866 + 2 * v1851);
                                          v1869 = v810[7];
                                          v1868 = v810[8];
                                          v1870 = (v1868 - v1869) >> 3;
                                          if (v1870 > v1867)
                                          {
                                            v1871 = v1869 + 8 * v1867;
                                            if (v1871 != v1868 && *(_DWORD *)(v1871 + 4) == (_DWORD)v1847)
                                            {
                                              v1873 = v2196[4];
                                              v1874 = (v2196[5] - v1873) >> 3;
                                              if (v1848 < v1874)
                                              {
                                                v1875 = *(_QWORD *)(v1873 + 8 * v1848);
                                                if (v1875)
                                                {
                                                  v1876 = *(unsigned __int16 *)(v1875 + 2 * v1851);
                                                  v1878 = v2196[7];
                                                  v1877 = v2196[8];
                                                  v1879 = (v1877 - v1878) >> 3;
                                                  if (v1879 > v1876)
                                                  {
                                                    v1880 = v1878 + 8 * v1876;
                                                    if (v1880 != v1877 && *(_DWORD *)(v1880 + 4) == (_DWORD)v1847)
                                                    {
                                                      v1881 = v2257[4];
                                                      v1882 = (v2257[5] - v1881) >> 3;
                                                      if (v1848 < v1882)
                                                      {
                                                        v1883 = *(_QWORD *)(v1881 + 8 * v1848);
                                                        if (v1883)
                                                        {
                                                          v1884 = *(unsigned __int16 *)(v1883 + 2 * v1851);
                                                          v2207 = v2257[7];
                                                          v2218 = v2257[8];
                                                          v813 = v2261 + 17;
                                                          v2186 = (v2218 - v2207) >> 3;
                                                          if (v2186 > v1884)
                                                          {
                                                            v1885 = v2207 + 8 * v1884;
                                                            if (v1885 != v2218
                                                              && *(_DWORD *)(v1885 + 4) == (_DWORD)v1847)
                                                            {
                                                              v813 = v2261 + 17;
                                                              v2153 = (uint64_t)(v2250[5] - v2250[4]) >> 3;
                                                              v2169 = v2250[4];
                                                              if (v1848 < v2153)
                                                              {
                                                                v1886 = *(_QWORD *)(v2169 + 8 * v1848);
                                                                if (v1886)
                                                                {
                                                                  v1887 = *(unsigned __int16 *)(v1886 + 2 * v1851);
                                                                  v2128 = v2250[7];
                                                                  v2140 = v2250[8];
                                                                  v813 = v2261 + 17;
                                                                  v2115 = (v2140 - v2128) >> 3;
                                                                  if (v2115 > v1887)
                                                                  {
                                                                    v1888 = v2128 + 8 * v1887;
                                                                    if (v1888 != v2140
                                                                      && *(_DWORD *)(v1888 + 4) == (_DWORD)v1847)
                                                                    {
                                                                      v813 = v2261 + 17;
                                                                      v2103 = v2238[4];
                                                                      v2092 = (v2238[5] - v2103) >> 3;
                                                                      if (v1848 < v2092)
                                                                      {
                                                                        v1889 = *(_QWORD *)(v2103 + 8 * v1848);
                                                                        if (v1889)
                                                                        {
                                                                          v2082 = *(unsigned __int16 *)(v1889 + 2 * v1851);
                                                                          v2062 = v2238[8];
                                                                          v2073 = v2238[7];
                                                                          v813 = v2261 + 17;
                                                                          v2054 = (v2062 - v2073) >> 3;
                                                                          if (v2054 > v2082)
                                                                          {
                                                                            v1890 = v2073 + 8 * v2082;
                                                                            if (v1890 != v2062
                                                                              && *(_DWORD *)(v1890 + 4) == (_DWORD)v1847)
                                                                            {
                                                                              v2083 = v812[4];
                                                                              v2046 = (v812[5] - v2083) >> 3;
                                                                              if (v1848 < v2046)
                                                                              {
                                                                                v1891 = *(_QWORD *)(v2083 + 8 * v1848);
                                                                                if (v1891)
                                                                                {
                                                                                  v1892 = *(unsigned __int16 *)(v1891 + 2 * v1851);
                                                                                  v1894 = v812[7];
                                                                                  v1893 = v812[8];
                                                                                  v1895 = (v1893 - v1894) >> 3;
                                                                                  v813 = v2261 + 17;
                                                                                  if (v1895 > v1892)
                                                                                  {
                                                                                    v1896 = v1894 + 8 * v1892;
                                                                                    if (v1896 != v1893
                                                                                      && *(_DWORD *)(v1896 + 4) == (_DWORD)v1847)
                                                                                    {
                                                                                      v2031 = v812;
                                                                                      v2038 = v1286;
                                                                                      v1897 = *(_QWORD *)v1284;
                                                                                      v1898 = HIDWORD(*(_QWORD *)v1284);
                                                                                      v1899 = *(_QWORD *)v1284 >> 39;
                                                                                      if (v1899 < v1865
                                                                                        && (v1900 = *(_QWORD *)(v1864 + 8 * v1899)) != 0
                                                                                        && (v1901 = *(unsigned __int16 *)(v1900 + 2 * (HIDWORD(v1897) & 0x7F)),
                                                                                            v1870 > v1901)
                                                                                        && (v1902 = v1869 + 8 * v1901,
                                                                                            v1902 != v1868)
                                                                                        && *(_DWORD *)(v1902 + 4) == (_DWORD)v1898)
                                                                                      {
                                                                                        v1903 = (__int128 *)(v810[10] + 80 * v1901);
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        v1903 = (__int128 *)v810[11];
                                                                                      }
                                                                                      if (v1899 < v1874
                                                                                        && (v1904 = *(_QWORD *)(v1873 + 8 * v1899)) != 0
                                                                                        && (v1905 = *(unsigned __int16 *)(v1904 + 2 * (HIDWORD(v1897) & 0x7F)),
                                                                                            v1879 > v1905)
                                                                                        && (v1906 = v1878 + 8 * v1905,
                                                                                            v1906 != v1877)
                                                                                        && *(_DWORD *)(v1906 + 4) == (_DWORD)v1898)
                                                                                      {
                                                                                        v1907 = (uint64_t *)(v2196[10] + 8 * v1905);
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        v1907 = (uint64_t *)v2196[11];
                                                                                      }
                                                                                      if (v1899 < v1882
                                                                                        && (v1908 = *(_QWORD *)(v1881 + 8 * v1899)) != 0
                                                                                        && (v1909 = *(unsigned __int16 *)(v1908 + 2 * (HIDWORD(v1897) & 0x7F)),
                                                                                            v2186 > v1909)
                                                                                        && (v1910 = v2207 + 8 * v1909,
                                                                                            v1910 != v2218)
                                                                                        && *(_DWORD *)(v1910 + 4) == (_DWORD)v1898)
                                                                                      {
                                                                                        v1911 = (uint64_t *)(v2257[10] + 48 * v1909);
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        v1911 = (uint64_t *)v2257[11];
                                                                                      }
                                                                                      if (v1899 < v2153
                                                                                        && (v1912 = *(_QWORD *)(v2169 + 8 * v1899)) != 0
                                                                                        && (v1913 = *(unsigned __int16 *)(v1912 + 2 * (HIDWORD(v1897) & 0x7F)),
                                                                                            v2115 > v1913)
                                                                                        && (v1914 = v2128 + 8 * v1913,
                                                                                            v1914 != v2140)
                                                                                        && *(_DWORD *)(v1914 + 4) == (_DWORD)v1898)
                                                                                      {
                                                                                        v1915 = (__int128 *)(v2250[10] + 16 * v1913);
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        v1915 = (__int128 *)v2250[11];
                                                                                      }
                                                                                      if (v1899 < v2092
                                                                                        && (v1916 = *(_QWORD *)(v2103 + 8 * v1899)) != 0
                                                                                        && (v1917 = *(unsigned __int16 *)(v1916 + 2 * (HIDWORD(v1897) & 0x7F)),
                                                                                            v2054 > v1917)
                                                                                        && (v1918 = v2073 + 8 * v1917,
                                                                                            v1918 != v2062)
                                                                                        && *(_DWORD *)(v1918 + 4) == (_DWORD)v1898)
                                                                                      {
                                                                                        v1919 = (__int128 *)(v2238[10] + 24 * v1917);
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        v1919 = (__int128 *)v2238[11];
                                                                                      }
                                                                                      if (v1899 < v2046
                                                                                        && (v1920 = *(_QWORD *)(v2083 + 8 * v1899)) != 0
                                                                                        && (v1921 = *(unsigned __int16 *)(v1920 + 2 * (HIDWORD(v1897) & 0x7F)),
                                                                                            v1895 > v1921)
                                                                                        && (v1922 = v1894 + 8 * v1921,
                                                                                            v1922 != v1893)
                                                                                        && *(_DWORD *)(v1922 + 4) == (_DWORD)v1898)
                                                                                      {
                                                                                        v1846 = (__int128 *)(v2031[10] + 16 * v1921);
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        v1846 = (__int128 *)v2031[11];
                                                                                      }
                                                                                      md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshDataComponent,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::Boundary,arComponents::StyleColor>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::WorldTransform&,arComponents::MeshDataComponent&,arComponents::AlbedoTextureComponent&,arComponents::AlbedoTextureUVMapping&,arComponents::AlbedoTextureUVScale&,arComponents::Boundary&,arComponents::StyleColor&)#1}::operator()((uint64_t *)&v2273, v1897, v1903, *v1907, v1911, v1915, v2038, v1919, v1846);
                                                                                      v1286 = v2038;
                                                                                      v812 = v2031;
                                                                                      v813 = v2261 + 17;
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                      ++v1286;
                      v1284 += 8;
                    }
                    while (v1284 != v1285);
                  }
                }
                if (v2238 + 4 == v819)
                {
                  v2273 = &v2277;
                  v2274 = v813;
                  k = &v2269;
                  v1278 = v2238[7];
                  v1279 = v2238[8];
                  if (v1278 != v1279)
                  {
                    v1280 = (__int128 *)v2238[10];
                    do
                    {
                      v1288 = *(unsigned int *)(v1278 + 4);
                      v1289 = v1288 >> 7;
                      v1290 = v808[4];
                      if (v1288 >> 7 < (v808[5] - v1290) >> 3)
                      {
                        v1291 = *(_QWORD *)(v1290 + 8 * v1289);
                        if (v1291)
                        {
                          v1292 = v1288 & 0x7F;
                          v1293 = *(unsigned __int16 *)(v1291 + 2 * v1292);
                          v1295 = v808[7];
                          v1294 = v808[8];
                          if (v1293 < (v1294 - v1295) >> 3)
                          {
                            v1296 = v1295 + 8 * v1293;
                            if (v1296 != v1294 && *(_DWORD *)(v1296 + 4) == (_DWORD)v1288)
                            {
                              v1298 = v809[4];
                              if (v1289 < (v809[5] - v1298) >> 3)
                              {
                                v1299 = *(_QWORD *)(v1298 + 8 * v1289);
                                if (v1299)
                                {
                                  v1300 = *(unsigned __int16 *)(v1299 + 2 * v1292);
                                  v1302 = v809[7];
                                  v1301 = v809[8];
                                  if (v1300 < (v1301 - v1302) >> 3)
                                  {
                                    v1303 = v1302 + 8 * v1300;
                                    if (v1303 != v1301 && *(_DWORD *)(v1303 + 4) == (_DWORD)v1288)
                                    {
                                      v1305 = v810[4];
                                      v1306 = (v810[5] - v1305) >> 3;
                                      if (v1289 < v1306)
                                      {
                                        v1307 = *(_QWORD *)(v1305 + 8 * v1289);
                                        if (v1307)
                                        {
                                          v1308 = *(unsigned __int16 *)(v1307 + 2 * v1292);
                                          v1309 = v810[7];
                                          v1310 = v810[8];
                                          v1311 = (v1310 - v1309) >> 3;
                                          if (v1311 > v1308)
                                          {
                                            v1312 = v1309 + 8 * v1308;
                                            if (v1312 != v1310 && *(_DWORD *)(v1312 + 4) == (_DWORD)v1288)
                                            {
                                              v1314 = v2196[4];
                                              v1315 = (v2196[5] - v1314) >> 3;
                                              if (v1289 < v1315)
                                              {
                                                v1316 = *(_QWORD *)(v1314 + 8 * v1289);
                                                if (v1316)
                                                {
                                                  v1317 = *(unsigned __int16 *)(v1316 + 2 * v1292);
                                                  v1318 = v2196[7];
                                                  v1319 = v2196[8];
                                                  v1320 = (v1319 - v1318) >> 3;
                                                  if (v1320 > v1317)
                                                  {
                                                    v1321 = v1318 + 8 * v1317;
                                                    if (v1321 != v1319 && *(_DWORD *)(v1321 + 4) == (_DWORD)v1288)
                                                    {
                                                      v1322 = v2257[4];
                                                      v1323 = (v2257[5] - v1322) >> 3;
                                                      if (v1289 < v1323)
                                                      {
                                                        v1324 = *(_QWORD *)(v1322 + 8 * v1289);
                                                        if (v1324)
                                                        {
                                                          v1325 = *(unsigned __int16 *)(v1324 + 2 * v1292);
                                                          v1326 = v2257[7];
                                                          v1327 = v2257[8];
                                                          v2223 = (v1327 - v1326) >> 3;
                                                          if (v2223 > v1325)
                                                          {
                                                            v1328 = v1326 + 8 * v1325;
                                                            if (v1328 != v1327
                                                              && *(_DWORD *)(v1328 + 4) == (_DWORD)v1288)
                                                            {
                                                              v2217 = v2250[4];
                                                              v2205 = (v2250[5] - v2217) >> 3;
                                                              if (v1289 < v2205)
                                                              {
                                                                v1329 = *(_QWORD *)(v2217 + 8 * v1289);
                                                                if (v1329)
                                                                {
                                                                  v2183 = *(unsigned __int16 *)(v1329 + 2 * v1292);
                                                                  v2151 = v2250[7];
                                                                  v2167 = v2250[8];
                                                                  v2138 = (v2167 - v2151) >> 3;
                                                                  if (v2138 > v2183)
                                                                  {
                                                                    v1330 = v2151 + 8 * v2183;
                                                                    if (v1330 != v2167
                                                                      && *(_DWORD *)(v1330 + 4) == (_DWORD)v1288)
                                                                    {
                                                                      v2184 = v2244[4];
                                                                      v2126 = (v2244[5] - v2184) >> 3;
                                                                      if (v1289 < v2126)
                                                                      {
                                                                        v1331 = *(_QWORD *)(v2184 + 8 * v1289);
                                                                        if (v1331)
                                                                        {
                                                                          v2112 = *(unsigned __int16 *)(v1331 + 2 * v1292);
                                                                          v2090 = v2244[7];
                                                                          v2101 = v2244[8];
                                                                          v2080 = (v2101 - v2090) >> 3;
                                                                          if (v2080 > v2112)
                                                                          {
                                                                            v1332 = v2090 + 8 * v2112;
                                                                            if (v1332 != v2101
                                                                              && *(_DWORD *)(v1332 + 4) == (_DWORD)v1288)
                                                                            {
                                                                              v2113 = v812[4];
                                                                              v2070 = (v812[5] - v2113) >> 3;
                                                                              if (v1289 < v2070)
                                                                              {
                                                                                v1333 = *(_QWORD *)(v2113 + 8 * v1289);
                                                                                if (v1333)
                                                                                {
                                                                                  v1334 = *(unsigned __int16 *)(v1333 + 2 * v1292);
                                                                                  v1335 = v812[7];
                                                                                  v1336 = v812[8];
                                                                                  v2060 = (v1336 - v1335) >> 3;
                                                                                  if (v2060 > v1334)
                                                                                  {
                                                                                    v1337 = v1335 + 8 * v1334;
                                                                                    if (v1337 != v1336
                                                                                      && *(_DWORD *)(v1337 + 4) == (_DWORD)v1288)
                                                                                    {
                                                                                      v2052 = v1280;
                                                                                      v2029 = v812;
                                                                                      v1338 = *(_QWORD *)v1278;
                                                                                      v2044 = HIDWORD(*(_QWORD *)v1278);
                                                                                      v1339 = *(_QWORD *)v1278 >> 39;
                                                                                      if (v1339 < v1306
                                                                                        && (v1340 = *(_QWORD *)(v1305 + 8 * v1339)) != 0
                                                                                        && (v1341 = *(unsigned __int16 *)(v1340 + 2 * (HIDWORD(v1338) & 0x7F)),
                                                                                            v1311 > v1341)
                                                                                        && (v1342 = v1309 + 8 * v1341,
                                                                                            v1342 != v1310)
                                                                                        && *(_DWORD *)(v1342 + 4) == (_DWORD)v2044)
                                                                                      {
                                                                                        v1343 = (__int128 *)(v810[10] + 80 * v1341);
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        v1343 = (__int128 *)v810[11];
                                                                                      }
                                                                                      if (v1339 < v1315
                                                                                        && (v1344 = *(_QWORD *)(v1314 + 8 * v1339)) != 0
                                                                                        && (v1345 = *(unsigned __int16 *)(v1344 + 2 * (HIDWORD(v1338) & 0x7F)),
                                                                                            v1320 > v1345)
                                                                                        && (v1346 = v1318 + 8 * v1345,
                                                                                            v1346 != v1319)
                                                                                        && *(_DWORD *)(v1346 + 4) == (_DWORD)v2044)
                                                                                      {
                                                                                        v1347 = (uint64_t *)(v2196[10] + 8 * v1345);
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        v1347 = (uint64_t *)v2196[11];
                                                                                      }
                                                                                      if (v1339 < v1323
                                                                                        && (v1348 = *(_QWORD *)(v1322 + 8 * v1339)) != 0
                                                                                        && (v1349 = *(unsigned __int16 *)(v1348 + 2 * (HIDWORD(v1338) & 0x7F)),
                                                                                            v2223 > v1349)
                                                                                        && (v1350 = v1326 + 8 * v1349,
                                                                                            v1350 != v1327)
                                                                                        && *(_DWORD *)(v1350 + 4) == (_DWORD)v2044)
                                                                                      {
                                                                                        v1351 = (uint64_t *)(v2257[10] + 48 * v1349);
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        v1351 = (uint64_t *)v2257[11];
                                                                                      }
                                                                                      if (v1339 < v2205
                                                                                        && (v1352 = *(_QWORD *)(v2217 + 8 * v1339)) != 0
                                                                                        && (v1353 = *(unsigned __int16 *)(v1352 + 2 * (HIDWORD(v1338) & 0x7F)),
                                                                                            v2138 > v1353)
                                                                                        && (v1354 = v2151 + 8 * v1353,
                                                                                            v1354 != v2167)
                                                                                        && *(_DWORD *)(v1354 + 4) == (_DWORD)v2044)
                                                                                      {
                                                                                        v1355 = (__int128 *)(v2250[10] + 16 * v1353);
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        v1355 = (__int128 *)v2250[11];
                                                                                      }
                                                                                      if (v1339 < v2126
                                                                                        && (v1356 = *(_QWORD *)(v2184 + 8 * v1339)) != 0
                                                                                        && (v1357 = *(unsigned __int16 *)(v1356 + 2 * (HIDWORD(v1338) & 0x7F)),
                                                                                            v2080 > v1357)
                                                                                        && (v1358 = v2090 + 8 * v1357,
                                                                                            v1358 != v2101)
                                                                                        && *(_DWORD *)(v1358 + 4) == (_DWORD)v2044)
                                                                                      {
                                                                                        v1359 = (uint64_t *)(v2244[10] + 8 * v1357);
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        v1359 = (uint64_t *)v2244[11];
                                                                                      }
                                                                                      if (v1339 < v2070
                                                                                        && (v1360 = *(_QWORD *)(v2113 + 8 * v1339)) != 0
                                                                                        && (v1361 = *(unsigned __int16 *)(v1360 + 2 * (HIDWORD(v1338) & 0x7F)),
                                                                                            v2060 > v1361)
                                                                                        && (v1362 = v1335 + 8 * v1361,
                                                                                            v1362 != v1336)
                                                                                        && *(_DWORD *)(v1362 + 4) == (_DWORD)v2044)
                                                                                      {
                                                                                        v1287 = (__int128 *)(v2029[10] + 16 * v1361);
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        v1287 = (__int128 *)v2029[11];
                                                                                      }
                                                                                      md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshDataComponent,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::Boundary,arComponents::StyleColor>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::WorldTransform&,arComponents::MeshDataComponent&,arComponents::AlbedoTextureComponent&,arComponents::AlbedoTextureUVMapping&,arComponents::AlbedoTextureUVScale&,arComponents::Boundary&,arComponents::StyleColor&)#1}::operator()((uint64_t *)&v2273, v1338, v1343, *v1347, v1351, v1355, v1359, v2052, v1287);
                                                                                      v1280 = v2052;
                                                                                      v812 = v2029;
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                      v1280 = (__int128 *)((char *)v1280 + 24);
                      v1278 += 8;
                    }
                    while (v1278 != v1279);
                  }
                  v813 = v2261 + 17;
                }
                if (v2230 == v819)
                {
                  v2273 = &v2277;
                  v2274 = v813;
                  k = &v2269;
                  v1366 = v812[7];
                  v1367 = v812[8];
                  if (v1366 != v1367)
                  {
                    v1368 = (__int128 *)v812[10];
                    do
                    {
                      v1924 = *(unsigned int *)(v1366 + 4);
                      v1925 = v1924 >> 7;
                      v1926 = v808[4];
                      if (v1924 >> 7 < (v808[5] - v1926) >> 3)
                      {
                        v1927 = *(_QWORD *)(v1926 + 8 * v1925);
                        if (v1927)
                        {
                          v1928 = v1924 & 0x7F;
                          v1929 = *(unsigned __int16 *)(v1927 + 2 * v1928);
                          v1931 = v808[7];
                          v1930 = v808[8];
                          if (v1929 < (v1930 - v1931) >> 3)
                          {
                            v1932 = v1931 + 8 * v1929;
                            if (v1932 != v1930 && *(_DWORD *)(v1932 + 4) == (_DWORD)v1924)
                            {
                              v1934 = v809[4];
                              if (v1925 < (v809[5] - v1934) >> 3)
                              {
                                v1935 = *(_QWORD *)(v1934 + 8 * v1925);
                                if (v1935)
                                {
                                  v1936 = *(unsigned __int16 *)(v1935 + 2 * v1928);
                                  v1938 = v809[7];
                                  v1937 = v809[8];
                                  if (v1936 < (v1937 - v1938) >> 3)
                                  {
                                    v1939 = v1938 + 8 * v1936;
                                    if (v1939 != v1937 && *(_DWORD *)(v1939 + 4) == (_DWORD)v1924)
                                    {
                                      v1941 = v810[4];
                                      v1942 = (v810[5] - v1941) >> 3;
                                      if (v1925 < v1942)
                                      {
                                        v1943 = *(_QWORD *)(v1941 + 8 * v1925);
                                        if (v1943)
                                        {
                                          v1944 = *(unsigned __int16 *)(v1943 + 2 * v1928);
                                          v1945 = v810[7];
                                          v1946 = v810[8];
                                          v1947 = (v1946 - v1945) >> 3;
                                          if (v1947 > v1944)
                                          {
                                            v1948 = v1945 + 8 * v1944;
                                            if (v1948 != v1946 && *(_DWORD *)(v1948 + 4) == (_DWORD)v1924)
                                            {
                                              v1950 = v2196[4];
                                              v1951 = (v2196[5] - v1950) >> 3;
                                              if (v1925 < v1951)
                                              {
                                                v1952 = *(_QWORD *)(v1950 + 8 * v1925);
                                                if (v1952)
                                                {
                                                  v1953 = *(unsigned __int16 *)(v1952 + 2 * v1928);
                                                  v1954 = v2196[7];
                                                  v1955 = v2196[8];
                                                  v1956 = (v1955 - v1954) >> 3;
                                                  if (v1956 > v1953)
                                                  {
                                                    v1957 = v1954 + 8 * v1953;
                                                    if (v1957 != v1955 && *(_DWORD *)(v1957 + 4) == (_DWORD)v1924)
                                                    {
                                                      v1958 = v2257[4];
                                                      v1959 = (v2257[5] - v1958) >> 3;
                                                      if (v1925 < v1959)
                                                      {
                                                        v1960 = *(_QWORD *)(v1958 + 8 * v1925);
                                                        if (v1960)
                                                        {
                                                          v1961 = *(unsigned __int16 *)(v1960 + 2 * v1928);
                                                          v1963 = v2257[7];
                                                          v1962 = v2257[8];
                                                          v1964 = (v1962 - v1963) >> 3;
                                                          if (v1964 > v1961)
                                                          {
                                                            v1965 = v1963 + 8 * v1961;
                                                            if (v1965 != v1962
                                                              && *(_DWORD *)(v1965 + 4) == (_DWORD)v1924)
                                                            {
                                                              v2268 = v2250[4];
                                                              v2233 = (v2250[5] - v2268) >> 3;
                                                              if (v1925 < v2233)
                                                              {
                                                                v1966 = *(_QWORD *)(v2268 + 8 * v1925);
                                                                if (v1966)
                                                                {
                                                                  v2224 = *(unsigned __int16 *)(v1966 + 2 * v1928);
                                                                  v2208 = v2250[7];
                                                                  v2219 = v2250[8];
                                                                  v2187 = (v2219 - v2208) >> 3;
                                                                  if (v2187 > v2224)
                                                                  {
                                                                    v1967 = v2208 + 8 * v2224;
                                                                    if (v1967 != v2219
                                                                      && *(_DWORD *)(v1967 + 4) == (_DWORD)v1924)
                                                                    {
                                                                      v2225 = v2244[4];
                                                                      v2170 = (v2244[5] - v2225) >> 3;
                                                                      if (v1925 < v2170)
                                                                      {
                                                                        v1968 = *(_QWORD *)(v2225 + 8 * v1925);
                                                                        if (v1968)
                                                                        {
                                                                          v2154 = *(unsigned __int16 *)(v1968 + 2 * v1928);
                                                                          v2129 = v2244[7];
                                                                          v2141 = v2244[8];
                                                                          v2116 = (v2141 - v2129) >> 3;
                                                                          if (v2116 > v2154)
                                                                          {
                                                                            v1969 = v2129 + 8 * v2154;
                                                                            if (v1969 != v2141
                                                                              && *(_DWORD *)(v1969 + 4) == (_DWORD)v1924)
                                                                            {
                                                                              v2155 = v2238[4];
                                                                              v2104 = (v2238[5] - v2155) >> 3;
                                                                              if (v1925 < v2104)
                                                                              {
                                                                                v1970 = *(_QWORD *)(v2155 + 8 * v1925);
                                                                                if (v1970)
                                                                                {
                                                                                  v1971 = *(unsigned __int16 *)(v1970 + 2 * v1928);
                                                                                  v1973 = v2238[7];
                                                                                  v1972 = v2238[8];
                                                                                  v2093 = (v1972 - v1973) >> 3;
                                                                                  if (v2093 > v1971)
                                                                                  {
                                                                                    v1974 = v1973 + 8 * v1971;
                                                                                    if (v1974 != v1972
                                                                                      && *(_DWORD *)(v1974 + 4) == (_DWORD)v1924)
                                                                                    {
                                                                                      v1975 = HIDWORD(*(_QWORD *)v1366);
                                                                                      v2084 = *(_QWORD *)v1366;
                                                                                      v1976 = *(_QWORD *)v1366 >> 39;
                                                                                      if (v1976 < v1942
                                                                                        && (v1977 = *(_QWORD *)(v1941 + 8 * v1976)) != 0
                                                                                        && (v1978 = *(unsigned __int16 *)(v1977 + 2 * (HIDWORD(v2084) & 0x7F)),
                                                                                            v1947 > v1978)
                                                                                        && (v1979 = v1945 + 8 * v1978,
                                                                                            v1979 != v1946)
                                                                                        && *(_DWORD *)(v1979 + 4) == (_DWORD)v1975)
                                                                                      {
                                                                                        v1980 = (__int128 *)(v810[10] + 80 * v1978);
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        v1980 = (__int128 *)v810[11];
                                                                                      }
                                                                                      if (v1976 < v1951
                                                                                        && (v1981 = *(_QWORD *)(v1950 + 8 * v1976)) != 0
                                                                                        && (v1982 = *(unsigned __int16 *)(v1981 + 2 * (HIDWORD(v2084) & 0x7F)),
                                                                                            v1956 > v1982)
                                                                                        && (v1983 = v1954 + 8 * v1982,
                                                                                            v1983 != v1955)
                                                                                        && *(_DWORD *)(v1983 + 4) == (_DWORD)v1975)
                                                                                      {
                                                                                        v1984 = (uint64_t *)(v2196[10] + 8 * v1982);
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        v1984 = (uint64_t *)v2196[11];
                                                                                      }
                                                                                      if (v1976 < v1959
                                                                                        && (v1985 = *(_QWORD *)(v1958 + 8 * v1976)) != 0
                                                                                        && (v1986 = *(unsigned __int16 *)(v1985 + 2 * (HIDWORD(v2084) & 0x7F)),
                                                                                            v1964 > v1986)
                                                                                        && (v1987 = v1963 + 8 * v1986,
                                                                                            v1987 != v1962)
                                                                                        && *(_DWORD *)(v1987 + 4) == (_DWORD)v1975)
                                                                                      {
                                                                                        v1988 = (uint64_t *)(v2257[10] + 48 * v1986);
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        v1988 = (uint64_t *)v2257[11];
                                                                                      }
                                                                                      if (v1976 < v2233
                                                                                        && (v1989 = *(_QWORD *)(v2268 + 8 * v1976)) != 0
                                                                                        && (v1990 = *(unsigned __int16 *)(v1989 + 2 * (HIDWORD(v2084) & 0x7F)),
                                                                                            v2187 > v1990)
                                                                                        && (v1991 = v2208 + 8 * v1990,
                                                                                            v1991 != v2219)
                                                                                        && *(_DWORD *)(v1991 + 4) == (_DWORD)v1975)
                                                                                      {
                                                                                        v1992 = (__int128 *)(v2250[10] + 16 * v1990);
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        v1992 = (__int128 *)v2250[11];
                                                                                      }
                                                                                      if (v1976 < v2170
                                                                                        && (v1993 = *(_QWORD *)(v2225 + 8 * v1976)) != 0
                                                                                        && (v1994 = *(unsigned __int16 *)(v1993 + 2 * (HIDWORD(v2084) & 0x7F)),
                                                                                            v2116 > v1994)
                                                                                        && (v1995 = v2129 + 8 * v1994,
                                                                                            v1995 != v2141)
                                                                                        && *(_DWORD *)(v1995 + 4) == (_DWORD)v1975)
                                                                                      {
                                                                                        v1996 = (uint64_t *)(v2244[10] + 8 * v1994);
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        v1996 = (uint64_t *)v2244[11];
                                                                                      }
                                                                                      if (v1976 < v2104
                                                                                        && (v1997 = *(_QWORD *)(v2155 + 8 * v1976)) != 0
                                                                                        && (v1998 = *(unsigned __int16 *)(v1997 + 2 * (HIDWORD(v2084) & 0x7F)),
                                                                                            v2093 > v1998)
                                                                                        && (v1999 = v1973 + 8 * v1998,
                                                                                            v1999 != v1972)
                                                                                        && *(_DWORD *)(v1999 + 4) == (_DWORD)v1975)
                                                                                      {
                                                                                        v1923 = (__int128 *)(v2238[10] + 24 * v1998);
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        v1923 = (__int128 *)v2238[11];
                                                                                      }
                                                                                      md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshDataComponent,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::Boundary,arComponents::StyleColor>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::WorldTransform&,arComponents::MeshDataComponent&,arComponents::AlbedoTextureComponent&,arComponents::AlbedoTextureUVMapping&,arComponents::AlbedoTextureUVScale&,arComponents::Boundary&,arComponents::StyleColor&)#1}::operator()((uint64_t *)&v2273, v2084, v1980, *v1984, v1988, v1992, v1996, v1923, v1368);
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                      ++v1368;
                      v1366 += 8;
                    }
                    while (v1366 != v1367);
                  }
                }
                v1363 = (__int128 *)v2279;
                if ((__int128 *)v2279 == &v2277)
                {
                  v1365 = 4;
                  v1363 = &v2277;
                  v1364 = v2261;
                }
                else
                {
                  v1364 = v2261;
                  if (!(_QWORD)v2279)
                    goto LABEL_1574;
                  v1365 = 5;
                }
                (*(void (**)(void))(*(_QWORD *)v1363 + 8 * v1365))();
LABEL_1574:
                v1370 = v1364[15];
                v1369 = v1364[16];
                *(_QWORD *)&v2269 = v1370;
                v2272 = v1369;
                *(_QWORD *)&v2277 = &off_1E42C8708;
                *((_QWORD *)&v2277 + 1) = &v2272;
                *(_QWORD *)&v2279 = &v2277;
                v1371 = (_QWORD *)gdc::Registry::storage<arComponents::TransitionToRenderRegistry>(v1370);
                v1372 = gdc::Registry::storage<arComponents::AREnvironmentProbeTexture>(v1370);
                v1373 = (_QWORD *)v1372;
                v1374 = v1364 + 29;
                v1375 = v1372 + 32;
                v1377 = v1371[7];
                v1376 = v1371[8];
                if (*(_QWORD *)(v1372 + 64) - *(_QWORD *)(v1372 + 56) >= (unint64_t)(v1376 - v1377))
                  v1378 = v1371 + 4;
                else
                  v1378 = (_QWORD *)(v1372 + 32);
                if (v1371 + 4 == v1378)
                {
                  v2273 = &v2277;
                  v2274 = v1374;
                  for (k = &v2269; v1377 != v1376; v1377 += 8)
                  {
                    v1383 = *(unsigned int *)(v1377 + 4);
                    v1384 = v1373[4];
                    v1385 = (v1373[5] - v1384) >> 3;
                    if (v1383 >> 7 < v1385)
                    {
                      v1386 = *(_QWORD *)(v1384 + 8 * (v1383 >> 7));
                      if (v1386)
                      {
                        v1387 = *(unsigned __int16 *)(v1386 + 2 * (v1383 & 0x7F));
                        v1389 = v1373[7];
                        v1388 = v1373[8];
                        v1390 = (v1388 - v1389) >> 3;
                        if (v1390 > v1387)
                        {
                          v1391 = v1389 + 8 * v1387;
                          if (v1391 != v1388 && *(_DWORD *)(v1391 + 4) == (_DWORD)v1383)
                          {
                            v1393 = *(_QWORD *)v1377;
                            v1394 = *(_QWORD *)v1377 >> 39;
                            if (v1394 < v1385
                              && (v1395 = *(_QWORD *)(v1384 + 8 * v1394)) != 0
                              && (v1396 = *(unsigned __int16 *)(v1395 + 2 * (HIDWORD(v1393) & 0x7F)), v1390 > v1396)
                              && ((v1397 = v1389 + 8 * v1396, v1397 != v1388)
                                ? (v1398 = *(_DWORD *)(v1397 + 4) == HIDWORD(v1393))
                                : (v1398 = 0),
                                  v1398))
                            {
                              v1382 = v1373[10] + 24 * v1396;
                            }
                            else
                            {
                              v1382 = v1373[11];
                            }
                            md::ECSHelpers::copyComponentsWithoutPipeline<arComponents::TransitionToRenderRegistry,arComponents::AREnvironmentProbeTexture>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::AREnvironmentProbeTexture&)#1}::operator()((uint64_t *)&v2273, v1393, v1382);
                          }
                        }
                      }
                    }
                  }
                }
                if ((_QWORD *)v1375 == v1378)
                {
                  v2273 = &v2277;
                  v2274 = v1374;
                  k = &v2269;
                  v1399 = v1373[7];
                  v1400 = v1373[8];
                  if (v1399 != v1400)
                  {
                    v1401 = v1373[10];
                    do
                    {
                      v1402 = *(unsigned int *)(v1399 + 4);
                      v1403 = v1371[4];
                      if (v1402 >> 7 < (v1371[5] - v1403) >> 3)
                      {
                        v1404 = *(_QWORD *)(v1403 + 8 * (v1402 >> 7));
                        if (v1404)
                        {
                          v1405 = *(unsigned __int16 *)(v1404 + 2 * (v1402 & 0x7F));
                          v1407 = v1371[7];
                          v1406 = v1371[8];
                          if (v1405 < (v1406 - v1407) >> 3)
                          {
                            v1408 = v1407 + 8 * v1405;
                            if (v1408 != v1406 && *(_DWORD *)(v1408 + 4) == (_DWORD)v1402)
                              md::ECSHelpers::copyComponentsWithoutPipeline<arComponents::TransitionToRenderRegistry,arComponents::AREnvironmentProbeTexture>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::AREnvironmentProbeTexture&)#1}::operator()((uint64_t *)&v2273, *(_QWORD *)v1399, v1401);
                          }
                        }
                      }
                      v1401 += 24;
                      v1399 += 8;
                    }
                    while (v1399 != v1400);
                  }
                }
                v1379 = (__int128 *)v2279;
                if ((__int128 *)v2279 == &v2277)
                {
                  v1381 = 4;
                  v1379 = &v2277;
                  v1380 = v2261;
                }
                else
                {
                  v1380 = v2261;
                  if (!(_QWORD)v2279)
                  {
LABEL_1618:
                    md::ECSHelpers::updateTagComponent<arComponents::IsVisible>(v1380[15], v1380[16], 1);
                    v1 = v2261;
                    goto LABEL_1619;
                  }
                  v1381 = 5;
                }
                (*(void (**)(void))(*(_QWORD *)v1379 + 8 * v1381))();
                goto LABEL_1618;
              }
            }
            else if (v817 != v819)
            {
              goto LABEL_1463;
            }
            v2273 = &v2277;
            v2274 = v813;
            k = &v2269;
            v1200 = v2257[7];
            v1201 = v2257[8];
            if (v1200 != v1201)
            {
              v1202 = (uint64_t *)v2257[10];
              do
              {
                v1204 = *(unsigned int *)(v1200 + 4);
                v1205 = v1204 >> 7;
                v1206 = v808[4];
                if (v1204 >> 7 < (v808[5] - v1206) >> 3)
                {
                  v1207 = *(_QWORD *)(v1206 + 8 * v1205);
                  if (v1207)
                  {
                    v1208 = v1204 & 0x7F;
                    v1209 = *(unsigned __int16 *)(v1207 + 2 * v1208);
                    v1211 = v808[7];
                    v1210 = v808[8];
                    if (v1209 < (v1210 - v1211) >> 3)
                    {
                      v1212 = v1211 + 8 * v1209;
                      if (v1212 != v1210 && *(_DWORD *)(v1212 + 4) == (_DWORD)v1204)
                      {
                        v1214 = v809[4];
                        if (v1205 < (v809[5] - v1214) >> 3)
                        {
                          v1215 = *(_QWORD *)(v1214 + 8 * v1205);
                          if (v1215)
                          {
                            v1216 = *(unsigned __int16 *)(v1215 + 2 * v1208);
                            v1218 = v809[7];
                            v1217 = v809[8];
                            if (v1216 < (v1217 - v1218) >> 3)
                            {
                              v1219 = v1218 + 8 * v1216;
                              if (v1219 != v1217 && *(_DWORD *)(v1219 + 4) == (_DWORD)v1204)
                              {
                                v1221 = v810[4];
                                v1222 = (v810[5] - v1221) >> 3;
                                if (v1205 < v1222)
                                {
                                  v1223 = *(_QWORD *)(v1221 + 8 * v1205);
                                  if (v1223)
                                  {
                                    v1224 = *(unsigned __int16 *)(v1223 + 2 * v1208);
                                    v1225 = v810[7];
                                    v1226 = v810[8];
                                    v1227 = (v1226 - v1225) >> 3;
                                    if (v1227 > v1224)
                                    {
                                      v1228 = v1225 + 8 * v1224;
                                      if (v1228 != v1226 && *(_DWORD *)(v1228 + 4) == (_DWORD)v1204)
                                      {
                                        v1230 = v2196[4];
                                        v1231 = (v2196[5] - v1230) >> 3;
                                        if (v1205 < v1231)
                                        {
                                          v1232 = *(_QWORD *)(v1230 + 8 * v1205);
                                          if (v1232)
                                          {
                                            v1233 = *(unsigned __int16 *)(v1232 + 2 * v1208);
                                            v1234 = v2196[7];
                                            v1235 = v2196[8];
                                            v1236 = (v1235 - v1234) >> 3;
                                            if (v1236 > v1233)
                                            {
                                              v1237 = v1234 + 8 * v1233;
                                              if (v1237 != v1235 && *(_DWORD *)(v1237 + 4) == (_DWORD)v1204)
                                              {
                                                v1238 = v2250[4];
                                                v1239 = (v2250[5] - v1238) >> 3;
                                                if (v1205 < v1239)
                                                {
                                                  v1240 = *(_QWORD *)(v1238 + 8 * v1205);
                                                  if (v1240)
                                                  {
                                                    v1241 = *(unsigned __int16 *)(v1240 + 2 * v1208);
                                                    v1243 = v2250[7];
                                                    v1242 = v2250[8];
                                                    v2182 = (v1242 - v1243) >> 3;
                                                    if (v2182 > v1241)
                                                    {
                                                      v1244 = v1243 + 8 * v1241;
                                                      if (v1244 != v1242 && *(_DWORD *)(v1244 + 4) == (_DWORD)v1204)
                                                      {
                                                        v2166 = v2244[4];
                                                        v2150 = (v2244[5] - v2166) >> 3;
                                                        if (v1205 < v2150)
                                                        {
                                                          v1245 = *(_QWORD *)(v2166 + 8 * v1205);
                                                          if (v1245)
                                                          {
                                                            v2136 = *(unsigned __int16 *)(v1245 + 2 * v1208);
                                                            v2111 = v2244[7];
                                                            v2125 = v2244[8];
                                                            v2100 = (v2125 - v2111) >> 3;
                                                            if (v2100 > v2136)
                                                            {
                                                              v1246 = v2111 + 8 * v2136;
                                                              if (v1246 != v2125
                                                                && *(_DWORD *)(v1246 + 4) == (_DWORD)v1204)
                                                              {
                                                                v2137 = v2238[4];
                                                                v2089 = (v2238[5] - v2137) >> 3;
                                                                if (v1205 < v2089)
                                                                {
                                                                  v1247 = *(_QWORD *)(v2137 + 8 * v1205);
                                                                  if (v1247)
                                                                  {
                                                                    v2078 = *(unsigned __int16 *)(v1247 + 2 * v1208);
                                                                    v2059 = v2238[7];
                                                                    v2069 = v2238[8];
                                                                    v2051 = (v2069 - v2059) >> 3;
                                                                    if (v2051 > v2078)
                                                                    {
                                                                      v1248 = v2059 + 8 * v2078;
                                                                      if (v1248 != v2069
                                                                        && *(_DWORD *)(v1248 + 4) == (_DWORD)v1204)
                                                                      {
                                                                        v2079 = v812[4];
                                                                        v2043 = (v812[5] - v2079) >> 3;
                                                                        if (v1205 < v2043)
                                                                        {
                                                                          v1249 = *(_QWORD *)(v2079 + 8 * v1205);
                                                                          if (v1249)
                                                                          {
                                                                            v1250 = *(unsigned __int16 *)(v1249 + 2 * v1208);
                                                                            v1251 = v812[7];
                                                                            v2036 = v812[8];
                                                                            v2020 = (v2036 - v1251) >> 3;
                                                                            if (v2020 > v1250)
                                                                            {
                                                                              v1252 = v1251 + 8 * v1250;
                                                                              if (v1252 != v2036
                                                                                && *(_DWORD *)(v1252 + 4) == (_DWORD)v1204)
                                                                              {
                                                                                v2015 = v1202;
                                                                                v2028 = v812;
                                                                                v1253 = *(_QWORD *)v1200;
                                                                                v2010 = HIDWORD(*(_QWORD *)v1200);
                                                                                v1254 = *(_QWORD *)v1200 >> 39;
                                                                                if (v1254 < v1222
                                                                                  && (v1255 = *(_QWORD *)(v1221 + 8 * v1254)) != 0
                                                                                  && (v1256 = *(unsigned __int16 *)(v1255 + 2 * (HIDWORD(v1253) & 0x7F)),
                                                                                      v1227 > v1256)
                                                                                  && (v1257 = v1225 + 8 * v1256,
                                                                                      v1257 != v1226)
                                                                                  && *(_DWORD *)(v1257 + 4) == (_DWORD)v2010)
                                                                                {
                                                                                  v1258 = (__int128 *)(v810[10] + 80 * v1256);
                                                                                }
                                                                                else
                                                                                {
                                                                                  v1258 = (__int128 *)v810[11];
                                                                                }
                                                                                if (v1254 < v1231
                                                                                  && (v1259 = *(_QWORD *)(v1230 + 8 * v1254)) != 0
                                                                                  && (v1260 = *(unsigned __int16 *)(v1259 + 2 * (HIDWORD(v1253) & 0x7F)),
                                                                                      v1236 > v1260)
                                                                                  && (v1261 = v1234 + 8 * v1260,
                                                                                      v1261 != v1235)
                                                                                  && *(_DWORD *)(v1261 + 4) == (_DWORD)v2010)
                                                                                {
                                                                                  v1262 = (uint64_t *)(v2196[10] + 8 * v1260);
                                                                                }
                                                                                else
                                                                                {
                                                                                  v1262 = (uint64_t *)v2196[11];
                                                                                }
                                                                                if (v1254 < v1239
                                                                                  && (v1263 = *(_QWORD *)(v1238 + 8 * v1254)) != 0
                                                                                  && (v1264 = *(unsigned __int16 *)(v1263 + 2 * (HIDWORD(v1253) & 0x7F)),
                                                                                      v2182 > v1264)
                                                                                  && (v1265 = v1243 + 8 * v1264,
                                                                                      v1265 != v1242)
                                                                                  && *(_DWORD *)(v1265 + 4) == (_DWORD)v2010)
                                                                                {
                                                                                  v1266 = (__int128 *)(v2250[10] + 16 * v1264);
                                                                                }
                                                                                else
                                                                                {
                                                                                  v1266 = (__int128 *)v2250[11];
                                                                                }
                                                                                if (v1254 < v2150
                                                                                  && (v1267 = *(_QWORD *)(v2166 + 8 * v1254)) != 0
                                                                                  && (v1268 = *(unsigned __int16 *)(v1267 + 2 * (HIDWORD(v1253) & 0x7F)),
                                                                                      v2100 > v1268)
                                                                                  && (v1269 = v2111 + 8 * v1268,
                                                                                      v1269 != v2125)
                                                                                  && *(_DWORD *)(v1269 + 4) == (_DWORD)v2010)
                                                                                {
                                                                                  v1270 = (uint64_t *)(v2244[10] + 8 * v1268);
                                                                                }
                                                                                else
                                                                                {
                                                                                  v1270 = (uint64_t *)v2244[11];
                                                                                }
                                                                                if (v1254 < v2089
                                                                                  && (v1271 = *(_QWORD *)(v2137 + 8 * v1254)) != 0
                                                                                  && (v1272 = *(unsigned __int16 *)(v1271 + 2 * (HIDWORD(v1253) & 0x7F)),
                                                                                      v2051 > v1272)
                                                                                  && (v1273 = v2059 + 8 * v1272,
                                                                                      v1273 != v2069)
                                                                                  && *(_DWORD *)(v1273 + 4) == (_DWORD)v2010)
                                                                                {
                                                                                  v1274 = (__int128 *)(v2238[10] + 24 * v1272);
                                                                                }
                                                                                else
                                                                                {
                                                                                  v1274 = (__int128 *)v2238[11];
                                                                                }
                                                                                if (v1254 < v2043
                                                                                  && (v1275 = *(_QWORD *)(v2079 + 8 * v1254)) != 0
                                                                                  && (v1276 = *(unsigned __int16 *)(v1275 + 2 * (HIDWORD(v1253) & 0x7F)),
                                                                                      v2020 > v1276)
                                                                                  && (v1277 = v1251 + 8 * v1276,
                                                                                      v1277 != v2036)
                                                                                  && *(_DWORD *)(v1277 + 4) == (_DWORD)v2010)
                                                                                {
                                                                                  v1203 = (__int128 *)(v2028[10] + 16 * v1276);
                                                                                }
                                                                                else
                                                                                {
                                                                                  v1203 = (__int128 *)v2028[11];
                                                                                }
                                                                                md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshDataComponent,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::Boundary,arComponents::StyleColor>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::WorldTransform&,arComponents::MeshDataComponent&,arComponents::AlbedoTextureComponent&,arComponents::AlbedoTextureUVMapping&,arComponents::AlbedoTextureUVScale&,arComponents::Boundary&,arComponents::StyleColor&)#1}::operator()((uint64_t *)&v2273, v1253, v1258, *v1262, v2015, v1266, v1270, v1274, v1203);
                                                                                v1202 = v2015;
                                                                                v812 = v2028;
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                v1202 += 6;
                v1200 += 8;
              }
              while (v1200 != v1201);
            }
            v813 = v2261 + 17;
            goto LABEL_1463;
          }
LABEL_1173:
          v2273 = &v2277;
          v2274 = v813;
          k = &v2269;
          v1041 = v810[7];
          v1042 = v810[8];
          if (v1041 != v1042)
          {
            v1043 = (__int128 *)v810[10];
            do
            {
              v1045 = *(unsigned int *)(v1041 + 4);
              v1046 = v1045 >> 7;
              v1047 = v808[4];
              if (v1045 >> 7 < (v808[5] - v1047) >> 3)
              {
                v1048 = *(_QWORD *)(v1047 + 8 * v1046);
                if (v1048)
                {
                  v1049 = v1045 & 0x7F;
                  v1050 = *(unsigned __int16 *)(v1048 + 2 * v1049);
                  v1052 = v808[7];
                  v1051 = v808[8];
                  if (v1050 < (v1051 - v1052) >> 3)
                  {
                    v1053 = v1052 + 8 * v1050;
                    if (v1053 != v1051 && *(_DWORD *)(v1053 + 4) == (_DWORD)v1045)
                    {
                      v1055 = v809[4];
                      if (v1046 < (v809[5] - v1055) >> 3)
                      {
                        v1056 = *(_QWORD *)(v1055 + 8 * v1046);
                        if (v1056)
                        {
                          v1057 = *(unsigned __int16 *)(v1056 + 2 * v1049);
                          v1059 = v809[7];
                          v1058 = v809[8];
                          if (v1057 < (v1058 - v1059) >> 3)
                          {
                            v1060 = v1059 + 8 * v1057;
                            if (v1060 != v1058 && *(_DWORD *)(v1060 + 4) == (_DWORD)v1045)
                            {
                              v1062 = v2196[4];
                              v1063 = (v2196[5] - v1062) >> 3;
                              if (v1046 < v1063)
                              {
                                v1064 = *(_QWORD *)(v1062 + 8 * v1046);
                                if (v1064)
                                {
                                  v1065 = *(unsigned __int16 *)(v1064 + 2 * v1049);
                                  v1066 = v2196[7];
                                  v1067 = v2196[8];
                                  v1068 = (v1067 - v1066) >> 3;
                                  if (v1068 > v1065)
                                  {
                                    v1069 = v1066 + 8 * v1065;
                                    if (v1069 != v1067 && *(_DWORD *)(v1069 + 4) == (_DWORD)v1045)
                                    {
                                      v1071 = v2257[4];
                                      v1072 = (v2257[5] - v1071) >> 3;
                                      if (v1046 < v1072)
                                      {
                                        v1073 = *(_QWORD *)(v1071 + 8 * v1046);
                                        if (v1073)
                                        {
                                          v1074 = *(unsigned __int16 *)(v1073 + 2 * v1049);
                                          v1075 = v2257[7];
                                          v1076 = v2257[8];
                                          v1077 = (v1076 - v1075) >> 3;
                                          if (v1077 > v1074)
                                          {
                                            v1078 = v1075 + 8 * v1074;
                                            if (v1078 != v1076 && *(_DWORD *)(v1078 + 4) == (_DWORD)v1045)
                                            {
                                              v1079 = v2250[4];
                                              v2180 = (v2250[5] - v1079) >> 3;
                                              if (v1046 < v2180)
                                              {
                                                v1080 = *(_QWORD *)(v1079 + 8 * v1046);
                                                if (v1080)
                                                {
                                                  v1081 = *(unsigned __int16 *)(v1080 + 2 * v1049);
                                                  v2148 = v2250[7];
                                                  v2164 = v2250[8];
                                                  v813 = v2261 + 17;
                                                  v2134 = (v2164 - v2148) >> 3;
                                                  if (v2134 > v1081)
                                                  {
                                                    v1082 = v2148 + 8 * v1081;
                                                    if (v1082 != v2164 && *(_DWORD *)(v1082 + 4) == (_DWORD)v1045)
                                                    {
                                                      v813 = v2261 + 17;
                                                      v2123 = v2244[4];
                                                      v2109 = (v2244[5] - v2123) >> 3;
                                                      if (v1046 < v2109)
                                                      {
                                                        v1083 = *(_QWORD *)(v2123 + 8 * v1046);
                                                        if (v1083)
                                                        {
                                                          v1084 = *(unsigned __int16 *)(v1083 + 2 * v1049);
                                                          v2087 = v2244[7];
                                                          v2098 = v2244[8];
                                                          v813 = v2261 + 17;
                                                          v2076 = (v2098 - v2087) >> 3;
                                                          if (v2076 > v1084)
                                                          {
                                                            v1085 = v2087 + 8 * v1084;
                                                            if (v1085 != v2098
                                                              && *(_DWORD *)(v1085 + 4) == (_DWORD)v1045)
                                                            {
                                                              v813 = v2261 + 17;
                                                              v2067 = v2238[4];
                                                              v2057 = (v2238[5] - v2067) >> 3;
                                                              if (v1046 < v2057)
                                                              {
                                                                v1086 = *(_QWORD *)(v2067 + 8 * v1046);
                                                                if (v1086)
                                                                {
                                                                  v1087 = *(unsigned __int16 *)(v1086 + 2 * v1049);
                                                                  v2041 = v2238[7];
                                                                  v2049 = v2238[8];
                                                                  v813 = v2261 + 17;
                                                                  v2034 = (v2049 - v2041) >> 3;
                                                                  if (v2034 > v1087)
                                                                  {
                                                                    v1088 = v2041 + 8 * v1087;
                                                                    if (v1088 != v2049
                                                                      && *(_DWORD *)(v1088 + 4) == (_DWORD)v1045)
                                                                    {
                                                                      v2018 = v812[4];
                                                                      v2013 = (v812[5] - v2018) >> 3;
                                                                      if (v1046 < v2013)
                                                                      {
                                                                        v1089 = *(_QWORD *)(v2018 + 8 * v1046);
                                                                        if (v1089)
                                                                        {
                                                                          v1090 = *(unsigned __int16 *)(v1089 + 2 * v1049);
                                                                          v1092 = v812[7];
                                                                          v1091 = v812[8];
                                                                          v813 = v2261 + 17;
                                                                          v2009 = (v1091 - v1092) >> 3;
                                                                          if (v2009 > v1090)
                                                                          {
                                                                            v1093 = v1092 + 8 * v1090;
                                                                            if (v1093 != v1091
                                                                              && *(_DWORD *)(v1093 + 4) == (_DWORD)v1045)
                                                                            {
                                                                              v2026 = v812;
                                                                              v1094 = *(_QWORD *)v1041;
                                                                              v1095 = HIDWORD(*(_QWORD *)v1041);
                                                                              v1096 = *(_QWORD *)v1041 >> 39;
                                                                              if (v1096 < v1063
                                                                                && (v1097 = *(_QWORD *)(v1062 + 8 * v1096)) != 0
                                                                                && (v1098 = *(unsigned __int16 *)(v1097 + 2 * (HIDWORD(v1094) & 0x7F)),
                                                                                    v1068 > v1098)
                                                                                && (v1099 = v1066 + 8 * v1098,
                                                                                    v1099 != v1067)
                                                                                && *(_DWORD *)(v1099 + 4) == (_DWORD)v1095)
                                                                              {
                                                                                v1100 = (uint64_t *)(v2196[10] + 8 * v1098);
                                                                              }
                                                                              else
                                                                              {
                                                                                v1100 = (uint64_t *)v2196[11];
                                                                              }
                                                                              if (v1096 < v1072
                                                                                && (v1101 = *(_QWORD *)(v1071 + 8 * v1096)) != 0
                                                                                && (v1102 = *(unsigned __int16 *)(v1101 + 2 * (HIDWORD(v1094) & 0x7F)),
                                                                                    v1077 > v1102)
                                                                                && (v1103 = v1075 + 8 * v1102,
                                                                                    v1103 != v1076)
                                                                                && *(_DWORD *)(v1103 + 4) == (_DWORD)v1095)
                                                                              {
                                                                                v1104 = (uint64_t *)(v2257[10]
                                                                                                  + 48 * v1102);
                                                                              }
                                                                              else
                                                                              {
                                                                                v1104 = (uint64_t *)v2257[11];
                                                                              }
                                                                              if (v1096 < v2180
                                                                                && (v1105 = *(_QWORD *)(v1079 + 8 * v1096)) != 0
                                                                                && (v1106 = *(unsigned __int16 *)(v1105 + 2 * (HIDWORD(v1094) & 0x7F)),
                                                                                    v2134 > v1106)
                                                                                && (v1107 = v2148 + 8 * v1106,
                                                                                    v1107 != v2164)
                                                                                && *(_DWORD *)(v1107 + 4) == (_DWORD)v1095)
                                                                              {
                                                                                v1108 = (__int128 *)(v2250[10] + 16 * v1106);
                                                                              }
                                                                              else
                                                                              {
                                                                                v1108 = (__int128 *)v2250[11];
                                                                              }
                                                                              if (v1096 < v2109
                                                                                && (v1109 = *(_QWORD *)(v2123 + 8 * v1096)) != 0
                                                                                && (v1110 = *(unsigned __int16 *)(v1109 + 2 * (HIDWORD(v1094) & 0x7F)),
                                                                                    v2076 > v1110)
                                                                                && (v1111 = v2087 + 8 * v1110,
                                                                                    v1111 != v2098)
                                                                                && *(_DWORD *)(v1111 + 4) == (_DWORD)v1095)
                                                                              {
                                                                                v1112 = (uint64_t *)(v2244[10] + 8 * v1110);
                                                                              }
                                                                              else
                                                                              {
                                                                                v1112 = (uint64_t *)v2244[11];
                                                                              }
                                                                              if (v1096 < v2057
                                                                                && (v1113 = *(_QWORD *)(v2067 + 8 * v1096)) != 0
                                                                                && (v1114 = *(unsigned __int16 *)(v1113 + 2 * (HIDWORD(v1094) & 0x7F)),
                                                                                    v2034 > v1114)
                                                                                && (v1115 = v2041 + 8 * v1114,
                                                                                    v1115 != v2049)
                                                                                && *(_DWORD *)(v1115 + 4) == (_DWORD)v1095)
                                                                              {
                                                                                v1116 = (__int128 *)(v2238[10] + 24 * v1114);
                                                                              }
                                                                              else
                                                                              {
                                                                                v1116 = (__int128 *)v2238[11];
                                                                              }
                                                                              if (v1096 < v2013
                                                                                && (v1117 = *(_QWORD *)(v2018 + 8 * v1096)) != 0
                                                                                && (v1118 = *(unsigned __int16 *)(v1117 + 2 * (HIDWORD(v1094) & 0x7F)),
                                                                                    v2009 > v1118)
                                                                                && (v1119 = v1092 + 8 * v1118,
                                                                                    v1119 != v1091)
                                                                                && *(_DWORD *)(v1119 + 4) == (_DWORD)v1095)
                                                                              {
                                                                                v1044 = (__int128 *)(v2026[10] + 16 * v1118);
                                                                              }
                                                                              else
                                                                              {
                                                                                v1044 = (__int128 *)v2026[11];
                                                                              }
                                                                              v2006 = v1043;
                                                                              md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshDataComponent,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::Boundary,arComponents::StyleColor>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::WorldTransform&,arComponents::MeshDataComponent&,arComponents::AlbedoTextureComponent&,arComponents::AlbedoTextureUVMapping&,arComponents::AlbedoTextureUVScale&,arComponents::Boundary&,arComponents::StyleColor&)#1}::operator()((uint64_t *)&v2273, v1094, v1043, *v1100, v1104, v1108, v1112, v1116, v1044);
                                                                              v1043 = v2006;
                                                                              v812 = v2026;
                                                                              v813 = v2261 + 17;
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              v1043 += 5;
              v1041 += 8;
            }
            while (v1041 != v1042);
          }
          goto LABEL_1268;
        }
      }
      else if ((_QWORD *)v229 != v233)
      {
        goto LABEL_722;
      }
      v2273 = &v2277;
      v2274 = v228;
      k = &v2269;
      v603 = v2222[7];
      v604 = v2222[8];
      if (v603 != v604)
      {
        v605 = (std::__shared_weak_count **)(v2222[10] + 8);
        do
        {
          v607 = *(unsigned int *)(v603 + 4);
          v608 = v607 >> 7;
          v609 = v222[4];
          if (v607 >> 7 < (v222[5] - v609) >> 3)
          {
            v610 = *(_QWORD *)(v609 + 8 * v608);
            if (v610)
            {
              v611 = v607 & 0x7F;
              v612 = *(unsigned __int16 *)(v610 + 2 * v611);
              v614 = v222[7];
              v613 = v222[8];
              if (v612 < (v613 - v614) >> 3)
              {
                v615 = v614 + 8 * v612;
                if (v615 != v613 && *(_DWORD *)(v615 + 4) == (_DWORD)v607)
                {
                  v617 = v223[4];
                  if (v608 < (v223[5] - v617) >> 3)
                  {
                    v618 = *(_QWORD *)(v617 + 8 * v608);
                    if (v618)
                    {
                      v619 = *(unsigned __int16 *)(v618 + 2 * v611);
                      v621 = v223[7];
                      v620 = v223[8];
                      if (v619 < (v620 - v621) >> 3)
                      {
                        v622 = v621 + 8 * v619;
                        if (v622 != v620 && *(_DWORD *)(v622 + 4) == (_DWORD)v607)
                        {
                          v624 = v224[4];
                          v625 = (v224[5] - v624) >> 3;
                          if (v608 < v625)
                          {
                            v626 = *(_QWORD *)(v624 + 8 * v608);
                            if (v626)
                            {
                              v627 = *(unsigned __int16 *)(v626 + 2 * v611);
                              v629 = v224[7];
                              v628 = v224[8];
                              v630 = (v628 - v629) >> 3;
                              if (v630 > v627)
                              {
                                v631 = v629 + 8 * v627;
                                if (v631 != v628 && *(_DWORD *)(v631 + 4) == (_DWORD)v607)
                                {
                                  v633 = v2263[4];
                                  v634 = (v2263[5] - v633) >> 3;
                                  if (v608 < v634)
                                  {
                                    v635 = *(_QWORD *)(v633 + 8 * v608);
                                    if (v635)
                                    {
                                      v636 = *(unsigned __int16 *)(v635 + 2 * v611);
                                      v637 = v2263[7];
                                      v638 = v2263[8];
                                      v639 = (v638 - v637) >> 3;
                                      if (v639 > v636)
                                      {
                                        v640 = v637 + 8 * v636;
                                        if (v640 != v638 && *(_DWORD *)(v640 + 4) == (_DWORD)v607)
                                        {
                                          v641 = v2256[4];
                                          v642 = (v2256[5] - v641) >> 3;
                                          if (v608 < v642)
                                          {
                                            v643 = *(_QWORD *)(v641 + 8 * v608);
                                            if (v643)
                                            {
                                              v644 = *(unsigned __int16 *)(v643 + 2 * v611);
                                              v646 = v2256[7];
                                              v645 = v2256[8];
                                              v2214 = (v645 - v646) >> 3;
                                              if (v2214 > v644)
                                              {
                                                v647 = v646 + 8 * v644;
                                                if (v647 != v645 && *(_DWORD *)(v647 + 4) == (_DWORD)v607)
                                                {
                                                  v2202 = v227[4];
                                                  if (v608 < (v227[5] - v2202) >> 3)
                                                  {
                                                    v648 = *(_QWORD *)(v2202 + 8 * v608);
                                                    if (v648)
                                                    {
                                                      v649 = *(unsigned __int16 *)(v648 + 2 * v611);
                                                      v650 = v227[7];
                                                      v2193 = v227[8];
                                                      v2175 = (v2193 - v650) >> 3;
                                                      if (v2175 > v649)
                                                      {
                                                        v651 = v650 + 8 * v649;
                                                        if (v651 != v2193 && *(_DWORD *)(v651 + 4) == (_DWORD)v607)
                                                        {
                                                          v2145 = HIDWORD(*(_QWORD *)v603);
                                                          v2161 = *(_QWORD *)v603;
                                                          v652 = *(_QWORD *)v603 >> 39;
                                                          if (v652 < v625
                                                            && (v653 = *(_QWORD *)(v624 + 8 * v652)) != 0
                                                            && (v654 = *(unsigned __int16 *)(v653
                                                                                           + 2 * (HIDWORD(v2161) & 0x7F)),
                                                                v630 > v654)
                                                            && (v655 = v629 + 8 * v654, v655 != v628)
                                                            && *(_DWORD *)(v655 + 4) == (_DWORD)v2145)
                                                          {
                                                            v656 = (__int128 *)(v224[10] + 80 * v654);
                                                          }
                                                          else
                                                          {
                                                            v656 = (__int128 *)v224[11];
                                                          }
                                                          if (v652 < v634
                                                            && (v657 = *(_QWORD *)(v633 + 8 * v652)) != 0
                                                            && (v658 = *(unsigned __int16 *)(v657
                                                                                           + 2 * (HIDWORD(v2161) & 0x7F)),
                                                                v639 > v658)
                                                            && (v659 = v637 + 8 * v658, v659 != v638)
                                                            && *(_DWORD *)(v659 + 4) == (_DWORD)v2145)
                                                          {
                                                            v660 = (__int128 *)(v2263[10] + 24 * v658);
                                                          }
                                                          else
                                                          {
                                                            v660 = (__int128 *)v2263[11];
                                                          }
                                                          if (v652 < v642
                                                            && (v661 = *(_QWORD *)(v641 + 8 * v652)) != 0
                                                            && (v662 = *(unsigned __int16 *)(v661
                                                                                           + 2 * (HIDWORD(v2161) & 0x7F)),
                                                                v2214 > v662)
                                                            && (v663 = v646 + 8 * v662, v663 != v645)
                                                            && *(_DWORD *)(v663 + 4) == (_DWORD)v2145)
                                                          {
                                                            v664 = (__int128 *)(v2256[10] + 16 * v662);
                                                          }
                                                          else
                                                          {
                                                            v664 = (__int128 *)v2256[11];
                                                          }
                                                          if (v652 < (v227[5] - v2202) >> 3
                                                            && (v665 = *(_QWORD *)(v2202 + 8 * v652)) != 0
                                                            && (v666 = *(unsigned __int16 *)(v665
                                                                                           + 2 * (HIDWORD(v2161) & 0x7F)),
                                                                v2175 > v666)
                                                            && (v667 = v650 + 8 * v666, v667 != v2193)
                                                            && *(_DWORD *)(v667 + 4) == (_DWORD)v2145)
                                                          {
                                                            v606 = (int *)(v227[10] + 4 * v666);
                                                          }
                                                          else
                                                          {
                                                            v606 = (int *)v227[11];
                                                          }
                                                          md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::ShadowPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::StyleColor,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::WorldTransform&,arComponents::MeshComponent&,arComponents::Boundary&,arComponents::StyleColor&,arComponents::VisibilityAlpha&)#1}::operator()((uint64_t *)&v2273, v2161, v656, (uint64_t)*(v605 - 1), *v605, v660, v664, v606);
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          v603 += 8;
          v605 += 2;
        }
        while (v603 != v604);
      }
      v228 = v2261 + 23;
      goto LABEL_722;
    }
LABEL_159:
    v2273 = &v2277;
    v2274 = v25;
    k = &v2269;
    v148 = v22[7];
    v149 = v22[8];
    if (v148 != v149)
    {
      v150 = (__int128 *)v22[10];
      do
      {
        v152 = *(unsigned int *)(v148 + 4);
        v153 = v152 >> 7;
        v154 = v20[4];
        if (v152 >> 7 < (v20[5] - v154) >> 3)
        {
          v155 = *(_QWORD *)(v154 + 8 * v153);
          if (v155)
          {
            v156 = v152 & 0x7F;
            v157 = *(unsigned __int16 *)(v155 + 2 * v156);
            v159 = v20[7];
            v158 = v20[8];
            if (v157 < (v158 - v159) >> 3)
            {
              v160 = v159 + 8 * v157;
              if (v160 != v158 && *(_DWORD *)(v160 + 4) == (_DWORD)v152)
              {
                v162 = v21[4];
                if (v153 < (v21[5] - v162) >> 3)
                {
                  v163 = *(_QWORD *)(v162 + 8 * v153);
                  if (v163)
                  {
                    v164 = *(unsigned __int16 *)(v163 + 2 * v156);
                    v166 = v21[7];
                    v165 = v21[8];
                    if (v164 < (v165 - v166) >> 3)
                    {
                      v167 = v166 + 8 * v164;
                      if (v167 != v165 && *(_DWORD *)(v167 + 4) == (_DWORD)v152)
                      {
                        v169 = v2262[4];
                        v170 = (v2262[5] - v169) >> 3;
                        if (v153 < v170)
                        {
                          v171 = *(_QWORD *)(v169 + 8 * v153);
                          if (v171)
                          {
                            v172 = *(unsigned __int16 *)(v171 + 2 * v156);
                            v174 = v2262[7];
                            v173 = v2262[8];
                            v175 = (v173 - v174) >> 3;
                            if (v175 > v172)
                            {
                              v176 = v174 + 8 * v172;
                              if (v176 != v173 && *(_DWORD *)(v176 + 4) == (_DWORD)v152)
                              {
                                v178 = v2255[4];
                                v179 = (v2255[5] - v178) >> 3;
                                if (v153 < v179)
                                {
                                  v180 = *(_QWORD *)(v178 + 8 * v153);
                                  if (v180)
                                  {
                                    v181 = *(unsigned __int16 *)(v180 + 2 * v156);
                                    v183 = v2255[7];
                                    v182 = v2255[8];
                                    v184 = (v182 - v183) >> 3;
                                    if (v184 > v181)
                                    {
                                      v185 = v183 + 8 * v181;
                                      if (v185 != v182 && *(_DWORD *)(v185 + 4) == (_DWORD)v152)
                                      {
                                        v186 = v24[4];
                                        v187 = (v24[5] - v186) >> 3;
                                        if (v153 < v187)
                                        {
                                          v188 = *(_QWORD *)(v186 + 8 * v153);
                                          if (v188)
                                          {
                                            v189 = *(unsigned __int16 *)(v188 + 2 * v156);
                                            v191 = v24[7];
                                            v190 = v24[8];
                                            v192 = (v190 - v191) >> 3;
                                            if (v192 > v189)
                                            {
                                              v193 = v191 + 8 * v189;
                                              if (v193 != v190 && *(_DWORD *)(v193 + 4) == (_DWORD)v152)
                                              {
                                                v2235 = v25;
                                                v194 = *(_QWORD *)v148;
                                                v195 = HIDWORD(*(_QWORD *)v148);
                                                v196 = *(_QWORD *)v148 >> 39;
                                                if (v196 < v170
                                                  && (v197 = *(_QWORD *)(v169 + 8 * v196)) != 0
                                                  && (v198 = *(unsigned __int16 *)(v197 + 2 * (HIDWORD(v194) & 0x7F)),
                                                      v175 > v198)
                                                  && (v199 = v174 + 8 * v198, v199 != v173)
                                                  && *(_DWORD *)(v199 + 4) == (_DWORD)v195)
                                                {
                                                  v200 = v2262[10] + 16 * v198;
                                                }
                                                else
                                                {
                                                  v200 = v2262[11];
                                                }
                                                if (v196 < v179
                                                  && (v201 = *(_QWORD *)(v178 + 8 * v196)) != 0
                                                  && (v202 = *(unsigned __int16 *)(v201 + 2 * (HIDWORD(v194) & 0x7F)),
                                                      v184 > v202)
                                                  && (v203 = v183 + 8 * v202, v203 != v182)
                                                  && *(_DWORD *)(v203 + 4) == (_DWORD)v195)
                                                {
                                                  v204 = (__int128 *)(v2255[10] + 24 * v202);
                                                }
                                                else
                                                {
                                                  v204 = (__int128 *)v2255[11];
                                                }
                                                if (v196 < v187
                                                  && (v205 = *(_QWORD *)(v186 + 8 * v196)) != 0
                                                  && (v206 = *(unsigned __int16 *)(v205 + 2 * (HIDWORD(v194) & 0x7F)),
                                                      v192 > v206)
                                                  && (v207 = v191 + 8 * v206, v207 != v190)
                                                  && *(_DWORD *)(v207 + 4) == (_DWORD)v195)
                                                {
                                                  v151 = (int *)(v24[10] + 4 * v206);
                                                }
                                                else
                                                {
                                                  v151 = (int *)v24[11];
                                                }
                                                md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::OcclusionPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::WorldTransform&,arComponents::MeshComponent&,arComponents::Boundary&,arComponents::VisibilityAlpha&)#1}::operator()((uint64_t *)&v2273, v194, v150, *(_QWORD *)v200, *(std::__shared_weak_count **)(v200 + 8), v204, v151);
                                                v25 = v2235;
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v150 += 5;
        v148 += 8;
      }
      while (v148 != v149);
    }
    goto LABEL_218;
  }
LABEL_1619:
  v1410 = v1[15];
  v1411 = v1[16];
  v1412 = (_QWORD *)gdc::Registry::storage<arComponents::CopiedEntity>(v1410);
  v1413 = (unint64_t *)v1412[7];
  v2264 = (unint64_t *)v1412[8];
  if (v1413 != v2264)
  {
    v1414 = (unint64_t *)v1412[10];
    while (1)
    {
      v1415 = *v1413;
      v1416 = (_QWORD *)gdc::Registry::storage<arComponents::QueuedForDeletionAfterLayout>(v1410);
      v1417 = v1416[4];
      if (v1415 >> 39 >= (v1416[5] - v1417) >> 3)
        break;
      v1418 = *(_QWORD *)(v1417 + 8 * (v1415 >> 39));
      if (!v1418)
        break;
      v1419 = *(unsigned __int16 *)(v1418 + 2 * (HIDWORD(v1415) & 0x7F));
      v1420 = v1416[7];
      v1421 = v1416[8];
      if (v1419 >= (v1421 - v1420) >> 3)
        goto LABEL_1628;
      v1422 = v1420 + 8 * v1419;
      if (*(_DWORD *)(v1422 + 4) == HIDWORD(v1415))
        v1423 = v1422;
      else
        v1423 = v1416[8];
LABEL_1629:
      v1424 = *v1414;
      v1425 = (_QWORD *)gdc::Registry::storage<arComponents::QueuedForDeletionAfterLayout>(v1411);
      v1426 = v1425[4];
      if (v1424 >> 39 >= (v1425[5] - v1426) >> 3 || (v1427 = *(_QWORD *)(v1426 + 8 * (v1424 >> 39))) == 0)
      {
        v1429 = v1425[8];
LABEL_1637:
        v1431 = v1429;
        if (v1423 == v1421)
          goto LABEL_1640;
        goto LABEL_1638;
      }
      v1428 = *(unsigned __int16 *)(v1427 + 2 * (HIDWORD(v1424) & 0x7F));
      v1430 = v1425[7];
      v1429 = v1425[8];
      if (v1428 >= (v1429 - v1430) >> 3)
        goto LABEL_1637;
      v1431 = v1430 + 8 * v1428;
      if (*(_DWORD *)(v1431 + 4) != HIDWORD(v1424))
        v1431 = v1425[8];
      if (v1423 == v1421)
      {
LABEL_1640:
        if (v1423 == v1421 && v1431 != v1429)
        {
          v1434 = (_QWORD *)gdc::Registry::storage<arComponents::QueuedForDeletionAfterLayout>(v1411);
          gdc::ComponentStorageWrapper<arComponents::QueuedForDeletionAfterLayout>::remove(v1434, *v1414);
        }
        goto LABEL_1643;
      }
LABEL_1638:
      if (v1431 != v1429)
        goto LABEL_1640;
      v1432 = *v1414;
      v1433 = (uint64_t *)gdc::Registry::storage<arComponents::QueuedForDeletionAfterLayout>(v1411);
      gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v1433, v1432);
LABEL_1643:
      v2273 = (__int128 *)0xA9FA4AB2A6BA1C58;
      v1435 = *(int8x8_t *)(v1410 + 128);
      if (v1435)
      {
        v1436 = (uint8x8_t)vcnt_s8(v1435);
        v1436.i16[0] = vaddlv_u8(v1436);
        if (v1436.u32[0] > 1uLL)
        {
          v1437 = 0xA9FA4AB2A6BA1C58;
          if (*(_QWORD *)&v1435 <= 0xA9FA4AB2A6BA1C58)
            v1437 = 0xA9FA4AB2A6BA1C58 % *(_QWORD *)&v1435;
        }
        else
        {
          v1437 = (*(_QWORD *)&v1435 - 1) & 0xA9FA4AB2A6BA1C58;
        }
        v1438 = *(_QWORD **)(*(_QWORD *)(v1410 + 120) + 8 * v1437);
        if (v1438)
        {
          v1439 = (_QWORD *)*v1438;
          if (v1439)
          {
            if (v1436.u32[0] < 2uLL)
            {
              v1440 = *(_QWORD *)&v1435 - 1;
              while (1)
              {
                v1442 = v1439[1];
                if (v1442 == 0xA9FA4AB2A6BA1C58)
                {
                  if (v1439[2] == 0xA9FA4AB2A6BA1C58)
                    goto LABEL_1668;
                }
                else if ((v1442 & v1440) != v1437)
                {
                  goto LABEL_1663;
                }
                v1439 = (_QWORD *)*v1439;
                if (!v1439)
                  goto LABEL_1663;
              }
            }
            do
            {
              v1441 = v1439[1];
              if (v1441 == 0xA9FA4AB2A6BA1C58)
              {
                if (v1439[2] == 0xA9FA4AB2A6BA1C58)
                {
LABEL_1668:
                  v1443 = v1439[3];
                  goto LABEL_1666;
                }
              }
              else
              {
                if (v1441 >= *(_QWORD *)&v1435)
                  v1441 %= *(_QWORD *)&v1435;
                if (v1441 != v1437)
                  break;
              }
              v1439 = (_QWORD *)*v1439;
            }
            while (v1439);
          }
        }
      }
LABEL_1663:
      v1443 = operator new();
      *(_QWORD *)(v1443 + 16) = "arComponents::RequiresUpdateInRenderLayer<arComponents::QueuedForDeletionAfterLayout>]";
      *(_QWORD *)(v1443 + 24) = 85;
      *(_OWORD *)(v1443 + 32) = 0u;
      *(_OWORD *)(v1443 + 48) = 0u;
      *(_OWORD *)(v1443 + 64) = 0u;
      *(_OWORD *)(v1443 + 80) = 0u;
      *(_OWORD *)(v1443 + 96) = 0u;
      *(_OWORD *)(v1443 + 112) = 0u;
      *(_OWORD *)(v1443 + 128) = 0u;
      *(_DWORD *)(v1443 + 144) = 1065353216;
      *(_OWORD *)(v1443 + 152) = 0u;
      *(_OWORD *)(v1443 + 168) = 0u;
      *(_QWORD *)(v1443 + 184) = 0;
      *(_DWORD *)(v1443 + 192) = 1065353216;
      *(_OWORD *)(v1443 + 200) = 0u;
      *(_OWORD *)(v1443 + 216) = 0u;
      *(_QWORD *)(v1443 + 232) = 0;
      *(_DWORD *)(v1443 + 240) = 1065353216;
      *(_QWORD *)v1443 = &off_1E42B24A8;
      *(_QWORD *)(v1443 + 8) = 0xA9FA4AB2A6BA1C58;
      *(_QWORD *)(v1443 + 248) = v1410;
      v1444 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t *)(v1410 + 120), 0xA9FA4AB2A6BA1C58, &v2273);
      v1445 = v1444[3];
      v1444[3] = v1443;
      if (v1445)
        (*(void (**)(uint64_t))(*(_QWORD *)v1445 + 8))(v1445);
      *(_QWORD *)&v2277 = 0xA9FA4AB2A6BA1C58;
      *((_QWORD *)&v2277 + 1) = "arComponents::RequiresUpdateInRenderLayer<arComponents::QueuedForDeletionAfterLayout>]";
      v2278 = 85;
      gdc::Registry::_registerStorageDataSignals(v1410, 0xA9FA4AB2A6BA1C58, (uint64_t)&v2277, (uint64_t *)(v1443 + 104));
LABEL_1666:
      gdc::ComponentStorageWrapper<arComponents::RequiresUpdateInRenderLayer<arComponents::QueuedForDeletionAfterLayout>>::remove((_QWORD *)v1443, v1415);
      ++v1414;
      if (++v1413 == v2264)
        goto LABEL_1669;
    }
    v1421 = v1416[8];
LABEL_1628:
    v1423 = v1421;
    goto LABEL_1629;
  }
LABEL_1669:
  v1446 = v2261[15];
  v2258 = v2261[16];
  v1447 = (_QWORD *)gdc::Registry::storage<arComponents::CopiedEntity>(v1446);
  v1448 = (_QWORD *)gdc::Registry::storage<arComponents::RequiresUpdateInRenderLayer<arComponents::WorldTransform>>(v1446);
  v1449 = gdc::Registry::storage<arComponents::WorldTransform>(v1446);
  v1450 = (_QWORD *)v1449;
  v2252 = v1446;
  v1452 = v1447[7];
  v1451 = v1447[8];
  if (v1448[8] - v1448[7] >= (unint64_t)(v1451 - v1452))
    v1453 = v1447 + 4;
  else
    v1453 = v1448 + 4;
  v2265 = v1449 + 32;
  if (*(_QWORD *)(v1449 + 64) - *(_QWORD *)(v1449 + 56) >= v1453[4] - v1453[3])
    v1454 = v1453;
  else
    v1454 = (_QWORD *)(v1449 + 32);
  if (v1451 != v1452 && v1447 + 4 == v1454)
  {
    v1476 = (uint64_t *)v1447[10];
    v1477 = &v2279;
    v1478 = &v2282;
    do
    {
      v1743 = *(unsigned int *)(v1452 + 4);
      v1744 = v1743 >> 7;
      v1745 = v1448[4];
      if (v1743 >> 7 < (v1448[5] - v1745) >> 3)
      {
        v1746 = *(_QWORD *)(v1745 + 8 * v1744);
        if (v1746)
        {
          v1747 = *(unsigned __int16 *)(v1746 + 2 * (v1743 & 0x7F));
          v1749 = v1448[7];
          v1748 = v1448[8];
          if (v1747 < (v1748 - v1749) >> 3)
          {
            v1750 = v1749 + 8 * v1747;
            if (v1750 != v1748 && *(_DWORD *)(v1750 + 4) == (_DWORD)v1743)
            {
              v1752 = v1450[4];
              v1753 = (v1450[5] - v1752) >> 3;
              if (v1744 < v1753)
              {
                v1754 = *(_QWORD *)(v1752 + 8 * v1744);
                if (v1754)
                {
                  v1755 = *(unsigned __int16 *)(v1754 + 2 * (v1743 & 0x7F));
                  v1757 = v1450[7];
                  v1756 = v1450[8];
                  v1758 = (v1756 - v1757) >> 3;
                  if (v1758 > v1755)
                  {
                    v1759 = v1757 + 8 * v1755;
                    if (v1759 != v1756 && *(_DWORD *)(v1759 + 4) == (_DWORD)v1743)
                    {
                      v2249 = *(_QWORD *)v1452;
                      if (*(_QWORD *)v1452 >> 39 < v1753
                        && (v1761 = *(_QWORD *)(v1752 + 8 * (v2249 >> 39))) != 0
                        && (v1762 = *(unsigned __int16 *)(v1761 + 2 * (HIDWORD(v2249) & 0x7F)), v1758 > v1762)
                        && ((v1763 = v1757 + 8 * v1762, v1763 != v1756)
                          ? (v1764 = *(_DWORD *)(v1763 + 4) == HIDWORD(v2249))
                          : (v1764 = 0),
                            v1764))
                      {
                        v1765 = v1450[10] + 80 * v1762;
                      }
                      else
                      {
                        v1765 = v1450[11];
                      }
                      v1766 = *v1476;
                      v2277 = *(_OWORD *)v1765;
                      v2278 = *(_QWORD *)(v1765 + 16);
                      *v1477 = *(_OWORD *)(v1765 + 24);
                      v2232 = v1478;
                      v2240 = v1477;
                      *((_QWORD *)v1477 + 2) = *(_QWORD *)(v1765 + 40);
                      v2281 = *(_QWORD *)(v1765 + 48);
                      *v1478 = *(_OWORD *)(v1765 + 56);
                      *((_QWORD *)v1478 + 2) = *(_QWORD *)(v1765 + 72);
                      v1767 = (uint64_t *)gdc::Registry::storage<arComponents::WorldTransform>(v2258);
                      gdc::ComponentStorageWrapper<arComponents::WorldTransform>::emplace(v1767, v1766, &v2277);
                      v1768 = (_QWORD *)gdc::Registry::storage<arComponents::RequiresUpdateInRenderLayer<arComponents::WorldTransform>>(v2252);
                      gdc::ComponentStorageWrapper<arComponents::RequiresUpdateInRenderLayer<arComponents::WorldTransform>>::remove(v1768, v2249);
                      v1478 = v2232;
                      v1477 = v2240;
                    }
                  }
                }
              }
            }
          }
        }
      }
      ++v1476;
      v1452 += 8;
    }
    while (v1452 != v1451);
  }
  if (v1448 + 4 == v1454)
  {
    v1538 = v1448[7];
    for (m = v1448[8]; v1538 != m; v1538 += 8)
    {
      v1539 = *(unsigned int *)(v1538 + 4);
      v1540 = v1539 >> 7;
      v1541 = v1447[4];
      v1542 = (v1447[5] - v1541) >> 3;
      if (v1539 >> 7 >= v1542)
        continue;
      v1543 = *(_QWORD *)(v1541 + 8 * v1540);
      if (!v1543)
        continue;
      v1544 = *(unsigned __int16 *)(v1543 + 2 * (v1539 & 0x7F));
      v1546 = v1447[7];
      v1545 = v1447[8];
      v1547 = (v1545 - v1546) >> 3;
      if (v1547 <= v1544)
        continue;
      v1548 = v1546 + 8 * v1544;
      if (v1548 == v1545 || *(_DWORD *)(v1548 + 4) != (_DWORD)v1539)
        continue;
      v1550 = v1450[4];
      v1551 = (v1450[5] - v1550) >> 3;
      if (v1540 >= v1551)
        continue;
      v1552 = *(_QWORD *)(v1550 + 8 * v1540);
      if (!v1552)
        continue;
      v1553 = *(unsigned __int16 *)(v1552 + 2 * (v1539 & 0x7F));
      v1555 = v1450[7];
      v1554 = v1450[8];
      v1556 = (v1554 - v1555) >> 3;
      if (v1556 <= v1553)
        continue;
      v1557 = v1555 + 8 * v1553;
      if (v1557 == v1554 || *(_DWORD *)(v1557 + 4) != (_DWORD)v1539)
        continue;
      v1559 = HIDWORD(*(_QWORD *)v1538);
      v2248 = *(_QWORD *)v1538;
      v1560 = *(_QWORD *)v1538 >> 39;
      if (v1560 < v1542
        && (v1561 = *(_QWORD *)(v1541 + 8 * v1560)) != 0
        && (v1562 = *(unsigned __int16 *)(v1561 + 2 * (HIDWORD(v2248) & 0x7F)), v1547 > v1562)
        && ((v1563 = v1546 + 8 * v1562, v1563 != v1545)
          ? (v1564 = *(_DWORD *)(v1563 + 4) == (_DWORD)v1559)
          : (v1564 = 0),
            v1564))
      {
        v1565 = (uint64_t *)(v1447[10] + 8 * v1562);
        if (v1560 >= v1551)
          goto LABEL_1800;
      }
      else
      {
        v1565 = (uint64_t *)v1447[11];
        if (v1560 >= v1551)
          goto LABEL_1800;
      }
      v1566 = *(_QWORD *)(v1550 + 8 * v1560);
      if (!v1566
        || (v1567 = *(unsigned __int16 *)(v1566 + 2 * (HIDWORD(v2248) & 0x7F)), v1556 <= v1567)
        || ((v1568 = v1555 + 8 * v1567, v1568 != v1554)
          ? (v1569 = *(_DWORD *)(v1568 + 4) == (_DWORD)v1559)
          : (v1569 = 0),
            !v1569))
      {
LABEL_1800:
        v1570 = v1450[11];
        goto LABEL_1801;
      }
      v1570 = v1450[10] + 80 * v1567;
LABEL_1801:
      v1571 = *v1565;
      v2277 = *(_OWORD *)v1570;
      v2278 = *(_QWORD *)(v1570 + 16);
      v2279 = *(_OWORD *)(v1570 + 24);
      v2280 = *(_QWORD *)(v1570 + 40);
      v2281 = *(_QWORD *)(v1570 + 48);
      v2282 = *(_OWORD *)(v1570 + 56);
      v2283 = *(_QWORD *)(v1570 + 72);
      v1572 = (uint64_t *)gdc::Registry::storage<arComponents::WorldTransform>(v2258);
      gdc::ComponentStorageWrapper<arComponents::WorldTransform>::emplace(v1572, v1571, &v2277);
      v1573 = (_QWORD *)gdc::Registry::storage<arComponents::RequiresUpdateInRenderLayer<arComponents::WorldTransform>>(v2252);
      gdc::ComponentStorageWrapper<arComponents::RequiresUpdateInRenderLayer<arComponents::WorldTransform>>::remove(v1573, v2248);
    }
  }
  if ((_QWORD *)v2265 == v1454)
  {
    v1574 = v1450[7];
    v1575 = v1450[8];
    if (v1574 != v1575)
    {
      v1576 = v1450[10] + 56;
      do
      {
        v1577 = *(unsigned int *)(v1574 + 4);
        v1578 = v1577 >> 7;
        v1579 = v1447[4];
        v1580 = (v1447[5] - v1579) >> 3;
        if (v1577 >> 7 < v1580)
        {
          v1581 = *(_QWORD *)(v1579 + 8 * v1578);
          if (v1581)
          {
            v1582 = *(unsigned __int16 *)(v1581 + 2 * (v1577 & 0x7F));
            v1584 = v1447[7];
            v1583 = v1447[8];
            v1585 = (v1583 - v1584) >> 3;
            if (v1585 > v1582)
            {
              v1586 = v1584 + 8 * v1582;
              if (v1586 != v1583 && *(_DWORD *)(v1586 + 4) == (_DWORD)v1577)
              {
                v1588 = v1448[4];
                if (v1578 < (v1448[5] - v1588) >> 3)
                {
                  v1589 = *(_QWORD *)(v1588 + 8 * v1578);
                  if (v1589)
                  {
                    v1590 = *(unsigned __int16 *)(v1589 + 2 * (v1577 & 0x7F));
                    v1592 = v1448[7];
                    v1591 = v1448[8];
                    if (v1590 < (v1591 - v1592) >> 3)
                    {
                      v1593 = v1592 + 8 * v1590;
                      if (v1593 != v1591 && *(_DWORD *)(v1593 + 4) == (_DWORD)v1577)
                      {
                        v1595 = *(_QWORD *)v1574;
                        v1596 = *(_QWORD *)v1574 >> 39;
                        if (v1596 < v1580
                          && (v1597 = *(_QWORD *)(v1579 + 8 * v1596)) != 0
                          && (v1598 = *(unsigned __int16 *)(v1597 + 2 * (HIDWORD(v1595) & 0x7F)), v1585 > v1598)
                          && ((v1599 = v1584 + 8 * v1598, v1599 != v1583)
                            ? (v1600 = *(_DWORD *)(v1599 + 4) == HIDWORD(v1595))
                            : (v1600 = 0),
                              v1600))
                        {
                          v1601 = (uint64_t *)(v1447[10] + 8 * v1598);
                        }
                        else
                        {
                          v1601 = (uint64_t *)v1447[11];
                        }
                        v1602 = *v1601;
                        v2277 = *(_OWORD *)(v1576 - 56);
                        v2278 = *(_QWORD *)(v1576 - 40);
                        v2279 = *(_OWORD *)(v1576 - 32);
                        v2280 = *(_QWORD *)(v1576 - 16);
                        v2281 = *(_QWORD *)(v1576 - 8);
                        v2282 = *(_OWORD *)v1576;
                        v2283 = *(_QWORD *)(v1576 + 16);
                        v1603 = (uint64_t *)gdc::Registry::storage<arComponents::WorldTransform>(v2258);
                        gdc::ComponentStorageWrapper<arComponents::WorldTransform>::emplace(v1603, v1602, &v2277);
                        v1604 = (_QWORD *)gdc::Registry::storage<arComponents::RequiresUpdateInRenderLayer<arComponents::WorldTransform>>(v2252);
                        gdc::ComponentStorageWrapper<arComponents::RequiresUpdateInRenderLayer<arComponents::WorldTransform>>::remove(v1604, v1595);
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v1574 += 8;
        v1576 += 80;
      }
      while (v1574 != v1575);
    }
  }
  v1456 = v2261[15];
  v2259 = v2261[16];
  v1457 = (_QWORD *)gdc::Registry::storage<arComponents::CopiedEntity>(v1456);
  v1458 = (_QWORD *)gdc::Registry::storage<arComponents::RequiresUpdateInRenderLayer<arComponents::StyleColor>>(v1456);
  v1459 = gdc::Registry::storage<arComponents::StyleColor>(v1456);
  v1460 = (_QWORD *)v1459;
  v2253 = v1456;
  v1462 = v1457[7];
  v1461 = v1457[8];
  if (v1458[8] - v1458[7] >= (unint64_t)(v1461 - v1462))
    v1463 = v1457 + 4;
  else
    v1463 = v1458 + 4;
  v2266 = v1459 + 32;
  if (*(_QWORD *)(v1459 + 64) - *(_QWORD *)(v1459 + 56) >= v1463[4] - v1463[3])
    v1464 = v1463;
  else
    v1464 = (_QWORD *)(v1459 + 32);
  if (v1461 != v1462 && v1457 + 4 == v1464)
  {
    v1479 = (uint64_t *)v1457[10];
    do
    {
      v1480 = *(unsigned int *)(v1462 + 4);
      v1481 = v1480 >> 7;
      v1482 = v1458[4];
      if (v1480 >> 7 < (v1458[5] - v1482) >> 3)
      {
        v1483 = *(_QWORD *)(v1482 + 8 * v1481);
        if (v1483)
        {
          v1484 = *(unsigned __int16 *)(v1483 + 2 * (v1480 & 0x7F));
          v1486 = v1458[7];
          v1485 = v1458[8];
          if (v1484 < (v1485 - v1486) >> 3)
          {
            v1487 = v1486 + 8 * v1484;
            if (v1487 != v1485 && *(_DWORD *)(v1487 + 4) == (_DWORD)v1480)
            {
              v1489 = v1460[4];
              v1490 = (v1460[5] - v1489) >> 3;
              if (v1481 < v1490)
              {
                v1491 = *(_QWORD *)(v1489 + 8 * v1481);
                if (v1491)
                {
                  v1492 = *(unsigned __int16 *)(v1491 + 2 * (v1480 & 0x7F));
                  v1494 = v1460[7];
                  v1493 = v1460[8];
                  v1495 = (v1493 - v1494) >> 3;
                  if (v1495 > v1492)
                  {
                    v1496 = v1494 + 8 * v1492;
                    if (v1496 != v1493 && *(_DWORD *)(v1496 + 4) == (_DWORD)v1480)
                    {
                      v1498 = *(_QWORD *)v1462;
                      v1499 = *(_QWORD *)v1462 >> 39;
                      v2246 = *(_QWORD *)v1462;
                      if (v1499 < v1490
                        && (v1500 = *(_QWORD *)(v1489 + 8 * v1499)) != 0
                        && (v1501 = *(unsigned __int16 *)(v1500 + 2 * (HIDWORD(v1498) & 0x7F)), v1495 > v1501)
                        && ((v1502 = v1494 + 8 * v1501, v1502 != v1493)
                          ? (v1503 = *(_DWORD *)(v1502 + 4) == HIDWORD(v1498))
                          : (v1503 = 0),
                            v1503))
                      {
                        v1504 = (__int128 *)(v1460[10] + 16 * v1501);
                      }
                      else
                      {
                        v1504 = (__int128 *)v1460[11];
                      }
                      v1505 = *v1479;
                      v2277 = *v1504;
                      v1506 = (uint64_t *)gdc::Registry::storage<arComponents::StyleColor>(v2259);
                      gdc::ComponentStorageWrapper<md::components::AlbedoTint>::emplace(v1506, v1505, (uint64_t)&v2277);
                      v1507 = (_QWORD *)gdc::Registry::storage<arComponents::RequiresUpdateInRenderLayer<arComponents::StyleColor>>(v2253);
                      gdc::ComponentStorageWrapper<arComponents::RequiresUpdateInRenderLayer<arComponents::StyleColor>>::remove(v1507, v2246);
                    }
                  }
                }
              }
            }
          }
        }
      }
      ++v1479;
      v1462 += 8;
    }
    while (v1462 != v1461);
  }
  if (v1458 + 4 == v1464)
  {
    v1606 = v1458[7];
    for (n = v1458[8]; v1606 != n; v1606 += 8)
    {
      v1607 = *(unsigned int *)(v1606 + 4);
      v1608 = v1607 >> 7;
      v1609 = v1457[4];
      v1610 = (v1457[5] - v1609) >> 3;
      if (v1607 >> 7 >= v1610)
        continue;
      v1611 = *(_QWORD *)(v1609 + 8 * v1608);
      if (!v1611)
        continue;
      v1612 = *(unsigned __int16 *)(v1611 + 2 * (v1607 & 0x7F));
      v1614 = v1457[7];
      v1613 = v1457[8];
      v1615 = (v1613 - v1614) >> 3;
      if (v1615 <= v1612)
        continue;
      v1616 = v1614 + 8 * v1612;
      if (v1616 == v1613 || *(_DWORD *)(v1616 + 4) != (_DWORD)v1607)
        continue;
      v1618 = v1460[4];
      v1619 = (v1460[5] - v1618) >> 3;
      if (v1608 >= v1619)
        continue;
      v1620 = *(_QWORD *)(v1618 + 8 * v1608);
      if (!v1620)
        continue;
      v1621 = *(unsigned __int16 *)(v1620 + 2 * (v1607 & 0x7F));
      v1623 = v1460[7];
      v1622 = v1460[8];
      v1624 = (v1622 - v1623) >> 3;
      if (v1624 <= v1621)
        continue;
      v1625 = v1623 + 8 * v1621;
      if (v1625 == v1622 || *(_DWORD *)(v1625 + 4) != (_DWORD)v1607)
        continue;
      v1627 = *(_QWORD *)v1606;
      v1628 = HIDWORD(*(_QWORD *)v1606);
      v1629 = *(_QWORD *)v1606 >> 39;
      if (v1629 < v1610
        && (v1630 = *(_QWORD *)(v1609 + 8 * v1629)) != 0
        && (v1631 = *(unsigned __int16 *)(v1630 + 2 * (HIDWORD(v1627) & 0x7F)), v1615 > v1631)
        && ((v1632 = v1614 + 8 * v1631, v1632 != v1613)
          ? (v1633 = *(_DWORD *)(v1632 + 4) == (_DWORD)v1628)
          : (v1633 = 0),
            v1633))
      {
        v1634 = (uint64_t *)(v1457[10] + 8 * v1631);
        if (v1629 >= v1619)
          goto LABEL_1867;
      }
      else
      {
        v1634 = (uint64_t *)v1457[11];
        if (v1629 >= v1619)
          goto LABEL_1867;
      }
      v1635 = *(_QWORD *)(v1618 + 8 * v1629);
      if (!v1635
        || (v1636 = *(unsigned __int16 *)(v1635 + 2 * (HIDWORD(v1627) & 0x7F)), v1624 <= v1636)
        || ((v1637 = v1623 + 8 * v1636, v1637 != v1622)
          ? (v1638 = *(_DWORD *)(v1637 + 4) == (_DWORD)v1628)
          : (v1638 = 0),
            !v1638))
      {
LABEL_1867:
        v1639 = (__int128 *)v1460[11];
        goto LABEL_1868;
      }
      v1639 = (__int128 *)(v1460[10] + 16 * v1636);
LABEL_1868:
      v1640 = *v1634;
      v2277 = *v1639;
      v1641 = (uint64_t *)gdc::Registry::storage<arComponents::StyleColor>(v2259);
      gdc::ComponentStorageWrapper<md::components::AlbedoTint>::emplace(v1641, v1640, (uint64_t)&v2277);
      v1642 = (_QWORD *)gdc::Registry::storage<arComponents::RequiresUpdateInRenderLayer<arComponents::StyleColor>>(v2253);
      gdc::ComponentStorageWrapper<arComponents::RequiresUpdateInRenderLayer<arComponents::StyleColor>>::remove(v1642, v1627);
    }
  }
  if ((_QWORD *)v2266 == v1464)
  {
    v1643 = v1460[7];
    v1644 = v1460[8];
    if (v1643 != v1644)
    {
      v1645 = (__int128 *)v1460[10];
      do
      {
        v1646 = *(unsigned int *)(v1643 + 4);
        v1647 = v1646 >> 7;
        v1648 = v1457[4];
        v1649 = (v1457[5] - v1648) >> 3;
        if (v1646 >> 7 < v1649)
        {
          v1650 = *(_QWORD *)(v1648 + 8 * v1647);
          if (v1650)
          {
            v1651 = *(unsigned __int16 *)(v1650 + 2 * (v1646 & 0x7F));
            v1653 = v1457[7];
            v1652 = v1457[8];
            v1654 = (v1652 - v1653) >> 3;
            if (v1654 > v1651)
            {
              v1655 = v1653 + 8 * v1651;
              if (v1655 != v1652 && *(_DWORD *)(v1655 + 4) == (_DWORD)v1646)
              {
                v1657 = v1458[4];
                if (v1647 < (v1458[5] - v1657) >> 3)
                {
                  v1658 = *(_QWORD *)(v1657 + 8 * v1647);
                  if (v1658)
                  {
                    v1659 = *(unsigned __int16 *)(v1658 + 2 * (v1646 & 0x7F));
                    v1661 = v1458[7];
                    v1660 = v1458[8];
                    if (v1659 < (v1660 - v1661) >> 3)
                    {
                      v1662 = v1661 + 8 * v1659;
                      if (v1662 != v1660 && *(_DWORD *)(v1662 + 4) == (_DWORD)v1646)
                      {
                        v1664 = *(_QWORD *)v1643;
                        v1665 = *(_QWORD *)v1643 >> 39;
                        if (v1665 < v1649
                          && (v1666 = *(_QWORD *)(v1648 + 8 * v1665)) != 0
                          && (v1667 = *(unsigned __int16 *)(v1666 + 2 * (HIDWORD(v1664) & 0x7F)), v1654 > v1667)
                          && ((v1668 = v1653 + 8 * v1667, v1668 != v1652)
                            ? (v1669 = *(_DWORD *)(v1668 + 4) == HIDWORD(v1664))
                            : (v1669 = 0),
                              v1669))
                        {
                          v1670 = (uint64_t *)(v1457[10] + 8 * v1667);
                        }
                        else
                        {
                          v1670 = (uint64_t *)v1457[11];
                        }
                        v1671 = *v1670;
                        v2277 = *v1645;
                        v1672 = (uint64_t *)gdc::Registry::storage<arComponents::StyleColor>(v2259);
                        gdc::ComponentStorageWrapper<md::components::AlbedoTint>::emplace(v1672, v1671, (uint64_t)&v2277);
                        v1673 = (_QWORD *)gdc::Registry::storage<arComponents::RequiresUpdateInRenderLayer<arComponents::StyleColor>>(v2253);
                        gdc::ComponentStorageWrapper<arComponents::RequiresUpdateInRenderLayer<arComponents::StyleColor>>::remove(v1673, v1664);
                      }
                    }
                  }
                }
              }
            }
          }
        }
        ++v1645;
        v1643 += 8;
      }
      while (v1643 != v1644);
    }
  }
  v1466 = v2261[15];
  v2260 = v2261[16];
  v1467 = (_QWORD *)gdc::Registry::storage<arComponents::CopiedEntity>(v1466);
  v1468 = (_QWORD *)gdc::Registry::storage<arComponents::RequiresUpdateInRenderLayer<arComponents::VisibilityAlpha>>(v1466);
  v1469 = gdc::Registry::storage<arComponents::VisibilityAlpha>(v1466);
  v1470 = (_QWORD *)v1469;
  v2254 = v1466;
  v1472 = v1467[7];
  v1471 = v1467[8];
  if (v1468[8] - v1468[7] >= (unint64_t)(v1471 - v1472))
    v1473 = v1467 + 4;
  else
    v1473 = v1468 + 4;
  v2267 = v1469 + 32;
  if (*(_QWORD *)(v1469 + 64) - *(_QWORD *)(v1469 + 56) >= v1473[4] - v1473[3])
    v1474 = v1473;
  else
    v1474 = (_QWORD *)(v1469 + 32);
  if (v1471 != v1472 && v1467 + 4 == v1474)
  {
    v1508 = (uint64_t *)v1467[10];
    do
    {
      v1509 = *(unsigned int *)(v1472 + 4);
      v1510 = v1509 >> 7;
      v1511 = v1468[4];
      if (v1509 >> 7 < (v1468[5] - v1511) >> 3)
      {
        v1512 = *(_QWORD *)(v1511 + 8 * v1510);
        if (v1512)
        {
          v1513 = *(unsigned __int16 *)(v1512 + 2 * (v1509 & 0x7F));
          v1515 = v1468[7];
          v1514 = v1468[8];
          if (v1513 < (v1514 - v1515) >> 3)
          {
            v1516 = v1515 + 8 * v1513;
            if (v1516 != v1514 && *(_DWORD *)(v1516 + 4) == (_DWORD)v1509)
            {
              v1518 = v1470[4];
              v1519 = (v1470[5] - v1518) >> 3;
              if (v1510 < v1519)
              {
                v1520 = *(_QWORD *)(v1518 + 8 * v1510);
                if (v1520)
                {
                  v1521 = *(unsigned __int16 *)(v1520 + 2 * (v1509 & 0x7F));
                  v1523 = v1470[7];
                  v1522 = v1470[8];
                  v1524 = (v1522 - v1523) >> 3;
                  if (v1524 > v1521)
                  {
                    v1525 = v1523 + 8 * v1521;
                    if (v1525 != v1522 && *(_DWORD *)(v1525 + 4) == (_DWORD)v1509)
                    {
                      v1527 = *(_QWORD *)v1472;
                      v1528 = *(_QWORD *)v1472 >> 39;
                      v2247 = *(_QWORD *)v1472;
                      if (v1528 < v1519
                        && (v1529 = *(_QWORD *)(v1518 + 8 * v1528)) != 0
                        && (v1530 = *(unsigned __int16 *)(v1529 + 2 * (HIDWORD(v1527) & 0x7F)), v1524 > v1530)
                        && ((v1531 = v1523 + 8 * v1530, v1531 != v1522)
                          ? (v1532 = *(_DWORD *)(v1531 + 4) == HIDWORD(v1527))
                          : (v1532 = 0),
                            v1532))
                      {
                        v1533 = (_DWORD *)(v1470[10] + 4 * v1530);
                      }
                      else
                      {
                        v1533 = (_DWORD *)v1470[11];
                      }
                      v1534 = *v1508;
                      LODWORD(v2277) = *v1533;
                      v1535 = (uint64_t *)gdc::Registry::storage<arComponents::VisibilityAlpha>(v2260);
                      gdc::ComponentStorageWrapper<md::ls::BoundsWidth>::emplace(v1535, v1534, &v2277);
                      v1536 = (_QWORD *)gdc::Registry::storage<arComponents::RequiresUpdateInRenderLayer<arComponents::VisibilityAlpha>>(v2254);
                      gdc::ComponentStorageWrapper<arComponents::RequiresUpdateInRenderLayer<arComponents::VisibilityAlpha>>::remove(v1536, v2247);
                    }
                  }
                }
              }
            }
          }
        }
      }
      ++v1508;
      v1472 += 8;
    }
    while (v1472 != v1471);
  }
  if (v1468 + 4 == v1474)
  {
    v1675 = v1468[7];
    for (ii = v1468[8]; v1675 != ii; v1675 += 8)
    {
      v1676 = *(unsigned int *)(v1675 + 4);
      v1677 = v1676 >> 7;
      v1678 = v1467[4];
      v1679 = (v1467[5] - v1678) >> 3;
      if (v1676 >> 7 >= v1679)
        continue;
      v1680 = *(_QWORD *)(v1678 + 8 * v1677);
      if (!v1680)
        continue;
      v1681 = *(unsigned __int16 *)(v1680 + 2 * (v1676 & 0x7F));
      v1683 = v1467[7];
      v1682 = v1467[8];
      v1684 = (v1682 - v1683) >> 3;
      if (v1684 <= v1681)
        continue;
      v1685 = v1683 + 8 * v1681;
      if (v1685 == v1682 || *(_DWORD *)(v1685 + 4) != (_DWORD)v1676)
        continue;
      v1687 = v1470[4];
      v1688 = (v1470[5] - v1687) >> 3;
      if (v1677 >= v1688)
        continue;
      v1689 = *(_QWORD *)(v1687 + 8 * v1677);
      if (!v1689)
        continue;
      v1690 = *(unsigned __int16 *)(v1689 + 2 * (v1676 & 0x7F));
      v1692 = v1470[7];
      v1691 = v1470[8];
      v1693 = (v1691 - v1692) >> 3;
      if (v1693 <= v1690)
        continue;
      v1694 = v1692 + 8 * v1690;
      if (v1694 == v1691 || *(_DWORD *)(v1694 + 4) != (_DWORD)v1676)
        continue;
      v1696 = *(_QWORD *)v1675;
      v1697 = HIDWORD(*(_QWORD *)v1675);
      v1698 = *(_QWORD *)v1675 >> 39;
      if (v1698 < v1679
        && (v1699 = *(_QWORD *)(v1678 + 8 * v1698)) != 0
        && (v1700 = *(unsigned __int16 *)(v1699 + 2 * (HIDWORD(v1696) & 0x7F)), v1684 > v1700)
        && ((v1701 = v1683 + 8 * v1700, v1701 != v1682)
          ? (v1702 = *(_DWORD *)(v1701 + 4) == (_DWORD)v1697)
          : (v1702 = 0),
            v1702))
      {
        v1703 = (uint64_t *)(v1467[10] + 8 * v1700);
        if (v1698 >= v1688)
          goto LABEL_1934;
      }
      else
      {
        v1703 = (uint64_t *)v1467[11];
        if (v1698 >= v1688)
          goto LABEL_1934;
      }
      v1704 = *(_QWORD *)(v1687 + 8 * v1698);
      if (!v1704
        || (v1705 = *(unsigned __int16 *)(v1704 + 2 * (HIDWORD(v1696) & 0x7F)), v1693 <= v1705)
        || ((v1706 = v1692 + 8 * v1705, v1706 != v1691)
          ? (v1707 = *(_DWORD *)(v1706 + 4) == (_DWORD)v1697)
          : (v1707 = 0),
            !v1707))
      {
LABEL_1934:
        v1708 = (_DWORD *)v1470[11];
        goto LABEL_1935;
      }
      v1708 = (_DWORD *)(v1470[10] + 4 * v1705);
LABEL_1935:
      v1709 = *v1703;
      LODWORD(v2277) = *v1708;
      v1710 = (uint64_t *)gdc::Registry::storage<arComponents::VisibilityAlpha>(v2260);
      gdc::ComponentStorageWrapper<md::ls::BoundsWidth>::emplace(v1710, v1709, &v2277);
      v1711 = (_QWORD *)gdc::Registry::storage<arComponents::RequiresUpdateInRenderLayer<arComponents::VisibilityAlpha>>(v2254);
      gdc::ComponentStorageWrapper<arComponents::RequiresUpdateInRenderLayer<arComponents::VisibilityAlpha>>::remove(v1711, v1696);
    }
  }
  if ((_QWORD *)v2267 == v1474)
  {
    v1712 = v1470[7];
    v1713 = v1470[8];
    if (v1712 != v1713)
    {
      v1714 = (_DWORD *)v1470[10];
      do
      {
        v1715 = *(unsigned int *)(v1712 + 4);
        v1716 = v1715 >> 7;
        v1717 = v1467[4];
        v1718 = (v1467[5] - v1717) >> 3;
        if (v1715 >> 7 < v1718)
        {
          v1719 = *(_QWORD *)(v1717 + 8 * v1716);
          if (v1719)
          {
            v1720 = *(unsigned __int16 *)(v1719 + 2 * (v1715 & 0x7F));
            v1722 = v1467[7];
            v1721 = v1467[8];
            v1723 = (v1721 - v1722) >> 3;
            if (v1723 > v1720)
            {
              v1724 = v1722 + 8 * v1720;
              if (v1724 != v1721 && *(_DWORD *)(v1724 + 4) == (_DWORD)v1715)
              {
                v1726 = v1468[4];
                if (v1716 < (v1468[5] - v1726) >> 3)
                {
                  v1727 = *(_QWORD *)(v1726 + 8 * v1716);
                  if (v1727)
                  {
                    v1728 = *(unsigned __int16 *)(v1727 + 2 * (v1715 & 0x7F));
                    v1730 = v1468[7];
                    v1729 = v1468[8];
                    if (v1728 < (v1729 - v1730) >> 3)
                    {
                      v1731 = v1730 + 8 * v1728;
                      if (v1731 != v1729 && *(_DWORD *)(v1731 + 4) == (_DWORD)v1715)
                      {
                        v1733 = *(_QWORD *)v1712;
                        v1734 = *(_QWORD *)v1712 >> 39;
                        if (v1734 < v1718
                          && (v1735 = *(_QWORD *)(v1717 + 8 * v1734)) != 0
                          && (v1736 = *(unsigned __int16 *)(v1735 + 2 * (HIDWORD(v1733) & 0x7F)), v1723 > v1736)
                          && ((v1737 = v1722 + 8 * v1736, v1737 != v1721)
                            ? (v1738 = *(_DWORD *)(v1737 + 4) == HIDWORD(v1733))
                            : (v1738 = 0),
                              v1738))
                        {
                          v1739 = (uint64_t *)(v1467[10] + 8 * v1736);
                        }
                        else
                        {
                          v1739 = (uint64_t *)v1467[11];
                        }
                        v1740 = *v1739;
                        LODWORD(v2277) = *v1714;
                        v1741 = (uint64_t *)gdc::Registry::storage<arComponents::VisibilityAlpha>(v2260);
                        gdc::ComponentStorageWrapper<md::ls::BoundsWidth>::emplace(v1741, v1740, &v2277);
                        v1742 = (_QWORD *)gdc::Registry::storage<arComponents::RequiresUpdateInRenderLayer<arComponents::VisibilityAlpha>>(v2254);
                        gdc::ComponentStorageWrapper<arComponents::RequiresUpdateInRenderLayer<arComponents::VisibilityAlpha>>::remove(v1742, v1733);
                      }
                    }
                  }
                }
              }
            }
          }
        }
        ++v1714;
        v1712 += 8;
      }
      while (v1712 != v1713);
    }
  }
  return md::ECSHelpers::updateTagComponent<arComponents::IsVisible>(v2261[15], v2261[16], 0);
}

