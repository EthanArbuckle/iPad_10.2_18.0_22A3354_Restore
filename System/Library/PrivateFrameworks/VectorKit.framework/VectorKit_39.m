void gdc::DebugTreeNode::addChildNode(_QWORD *a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  void **v19;
  void **v20;
  __int128 v21;
  __int128 v22;
  void **v23;
  void *v24;
  uint64_t v25;
  void *v26;
  void **v27;

  v4 = *((unsigned __int8 *)a2 + 23);
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v4)
    goto LABEL_9;
  v5 = *((unsigned __int8 *)a2 + 47);
  if ((v5 & 0x80u) != 0)
    v5 = *((_QWORD *)a2 + 4);
  if (v5 || *((_QWORD *)a2 + 6) != *((_QWORD *)a2 + 7) || *((_QWORD *)a2 + 9) != *((_QWORD *)a2 + 10))
  {
LABEL_9:
    v6 = a1[7];
    v7 = a1[8];
    if (v6 >= v7)
    {
      v11 = a1[6];
      v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v11) >> 5);
      v13 = v12 + 1;
      if (v12 + 1 > 0x2AAAAAAAAAAAAAALL)
        abort();
      v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - v11) >> 5);
      if (2 * v14 > v13)
        v13 = 2 * v14;
      if (v14 >= 0x155555555555555)
        v13 = 0x2AAAAAAAAAAAAAALL;
      if (v13 > 0x2AAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v15 = 96 * v13;
      v16 = (char *)operator new(96 * v13);
      v17 = &v16[96 * v12];
      *(_OWORD *)v17 = *a2;
      v18 = &v16[v15];
      *((_QWORD *)v17 + 2) = *((_QWORD *)a2 + 2);
      *(_QWORD *)a2 = 0;
      *((_QWORD *)a2 + 1) = 0;
      *(_OWORD *)(v17 + 24) = *(__int128 *)((char *)a2 + 24);
      *((_QWORD *)v17 + 5) = *((_QWORD *)a2 + 5);
      *((_QWORD *)a2 + 2) = 0;
      *((_QWORD *)a2 + 3) = 0;
      *((_QWORD *)a2 + 4) = 0;
      *((_QWORD *)a2 + 5) = 0;
      *((_OWORD *)v17 + 3) = a2[3];
      *((_QWORD *)v17 + 8) = *((_QWORD *)a2 + 8);
      *((_QWORD *)a2 + 6) = 0;
      *((_QWORD *)a2 + 7) = 0;
      *((_QWORD *)v17 + 11) = 0;
      *(_OWORD *)(v17 + 72) = *(__int128 *)((char *)a2 + 72);
      *((_QWORD *)v17 + 11) = *((_QWORD *)a2 + 11);
      *((_QWORD *)a2 + 8) = 0;
      *((_QWORD *)a2 + 9) = 0;
      *((_QWORD *)a2 + 10) = 0;
      *((_QWORD *)a2 + 11) = 0;
      v10 = v17 + 96;
      v19 = (void **)a1[6];
      v20 = (void **)a1[7];
      if (v20 == v19)
      {
        a1[6] = v17;
        a1[7] = v10;
        a1[8] = v18;
      }
      else
      {
        do
        {
          v21 = *((_OWORD *)v20 - 6);
          *((_QWORD *)v17 - 10) = *(v20 - 10);
          *((_OWORD *)v17 - 6) = v21;
          *(v20 - 11) = 0;
          *(v20 - 10) = 0;
          *(v20 - 12) = 0;
          v22 = *(_OWORD *)(v20 - 9);
          *((_QWORD *)v17 - 7) = *(v20 - 7);
          *(_OWORD *)(v17 - 72) = v22;
          *(v20 - 8) = 0;
          *(v20 - 7) = 0;
          *(v20 - 9) = 0;
          *((_OWORD *)v17 - 3) = *((_OWORD *)v20 - 3);
          *((_QWORD *)v17 - 4) = *(v20 - 4);
          *(v20 - 6) = 0;
          *(v20 - 5) = 0;
          *(v20 - 4) = 0;
          *(_OWORD *)(v17 - 24) = *(_OWORD *)(v20 - 3);
          *((_QWORD *)v17 - 1) = *(v20 - 1);
          v17 -= 96;
          *(v20 - 3) = 0;
          *(v20 - 2) = 0;
          *(v20 - 1) = 0;
          v20 -= 12;
        }
        while (v20 != v19);
        v20 = (void **)a1[6];
        v23 = (void **)a1[7];
        a1[6] = v17;
        a1[7] = v10;
        a1[8] = v18;
        if (v23 != v20)
        {
          do
          {
            v24 = *(v23 - 3);
            if (v24)
            {
              v25 = (uint64_t)*(v23 - 2);
              v26 = *(v23 - 3);
              if ((void *)v25 != v24)
              {
                do
                {
                  v25 -= 80;
                  std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v25);
                }
                while ((void *)v25 != v24);
                v26 = *(v23 - 3);
              }
              *(v23 - 2) = v24;
              operator delete(v26);
            }
            std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)v23 - 6);
            if (*((char *)v23 - 49) < 0)
              operator delete(*(v23 - 9));
            v27 = v23 - 12;
            if (*((char *)v23 - 73) < 0)
              operator delete(*v27);
            v23 -= 12;
          }
          while (v27 != v20);
        }
      }
      if (v20)
        operator delete(v20);
    }
    else
    {
      v8 = *a2;
      *(_QWORD *)(v6 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v6 = v8;
      *((_QWORD *)a2 + 1) = 0;
      *((_QWORD *)a2 + 2) = 0;
      *(_QWORD *)a2 = 0;
      v9 = *(__int128 *)((char *)a2 + 24);
      *(_QWORD *)(v6 + 40) = *((_QWORD *)a2 + 5);
      *(_OWORD *)(v6 + 24) = v9;
      *((_QWORD *)a2 + 4) = 0;
      *((_QWORD *)a2 + 5) = 0;
      *((_QWORD *)a2 + 3) = 0;
      *(_QWORD *)(v6 + 48) = 0;
      *(_QWORD *)(v6 + 56) = 0;
      *(_QWORD *)(v6 + 64) = 0;
      *(_OWORD *)(v6 + 48) = a2[3];
      *(_QWORD *)(v6 + 64) = *((_QWORD *)a2 + 8);
      *((_QWORD *)a2 + 6) = 0;
      *((_QWORD *)a2 + 7) = 0;
      *((_QWORD *)a2 + 8) = 0;
      *(_QWORD *)(v6 + 72) = 0;
      *(_QWORD *)(v6 + 80) = 0;
      *(_QWORD *)(v6 + 88) = 0;
      *(_OWORD *)(v6 + 72) = *(__int128 *)((char *)a2 + 72);
      *(_QWORD *)(v6 + 88) = *((_QWORD *)a2 + 11);
      *((_QWORD *)a2 + 9) = 0;
      *((_QWORD *)a2 + 10) = 0;
      *((_QWORD *)a2 + 11) = 0;
      v10 = (char *)(v6 + 96);
    }
    a1[7] = v10;
  }
}

uint64_t gdc::DebugTreeNode::toString(gdc::DebugTreeNode *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  std::ios_base *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  size_t v14;
  unint64_t v15;
  const void **v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  gdc::DebugTreeNode *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v25;
  _QWORD v26[2];
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];
  uint64_t v30;
  unint64_t v31;
  void *__p[2];
  __int128 v33;
  int v34;
  uint64_t v35[19];
  size_t v36;
  _BYTE v37[24];
  _BYTE *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v4 = MEMORY[0x1E0DE4FD0];
  v5 = MEMORY[0x1E0DE4FD0] + 104;
  v35[0] = MEMORY[0x1E0DE4FD0] + 104;
  v6 = MEMORY[0x1E0DE4FD0] + 64;
  v7 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  v27 = MEMORY[0x1E0DE4FD0] + 64;
  v26[0] = v8;
  *(_QWORD *)((char *)v26 + *(_QWORD *)(v8 - 24)) = v9;
  v26[1] = 0;
  v10 = (std::ios_base *)((char *)v26 + *(_QWORD *)(v26[0] - 24));
  std::ios_base::init(v10, &v28);
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  v11 = v7[5];
  v27 = v7[4];
  *(uint64_t *)((char *)&v27 + *(_QWORD *)(v27 - 24)) = v11;
  v26[0] = v7[1];
  *(_QWORD *)((char *)v26 + *(_QWORD *)(v26[0] - 24)) = v7[6];
  v35[0] = v5;
  v26[0] = v4 + 24;
  v27 = v6;
  std::streambuf::basic_streambuf();
  v12 = MEMORY[0x1E0DE4FB8];
  v28 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v33 = 0u;
  v34 = 24;
  v25 = v26;
  v38 = 0;
  v13 = operator new(0x20uLL);
  *v13 = &off_1E42D93F8;
  v13[1] = v37;
  v13[2] = &v25;
  v13[3] = v26;
  v38 = v13;
  v36 = 0;
  std::__function::__func<gdc::DebugTreeNode::toString(void)::$_1,std::allocator<gdc::DebugTreeNode::toString(void)::$_1>,void ()(gdc::DebugTreeNode const&,unsigned long)>::operator()((uint64_t)v13, a2, &v36);
  if ((v34 & 0x10) != 0)
  {
    v15 = *((_QWORD *)&v33 + 1);
    if (*((_QWORD *)&v33 + 1) < v31)
    {
      *((_QWORD *)&v33 + 1) = v31;
      v15 = v31;
    }
    v16 = (const void **)&v30;
  }
  else
  {
    if ((v34 & 8) == 0)
    {
      v14 = 0;
      *((_BYTE *)this + 23) = 0;
      goto LABEL_16;
    }
    v16 = (const void **)v29;
    v15 = v29[2];
  }
  v17 = *v16;
  v14 = v15 - (_QWORD)*v16;
  if (v14 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v14 >= 0x17)
  {
    v18 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v18 = v14 | 7;
    v19 = v18 + 1;
    v20 = (gdc::DebugTreeNode *)operator new(v18 + 1);
    *((_QWORD *)this + 1) = v14;
    *((_QWORD *)this + 2) = v19 | 0x8000000000000000;
    *(_QWORD *)this = v20;
    this = v20;
    goto LABEL_15;
  }
  *((_BYTE *)this + 23) = v14;
  if (v14)
LABEL_15:
    memmove(this, v17, v14);
LABEL_16:
  *((_BYTE *)this + v14) = 0;
  v21 = v38;
  if (v38 == v37)
  {
    v22 = 4;
    v21 = v37;
  }
  else
  {
    if (!v38)
      goto LABEL_21;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_21:
  v26[0] = *v7;
  v23 = v7[9];
  *(_QWORD *)((char *)v26 + *(_QWORD *)(v26[0] - 24)) = v7[8];
  v27 = v23;
  v28 = v12 + 16;
  if (SBYTE7(v33) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1A1AF4D64](v35);
}

void std::__function::__func<gdc::DebugTreeNode::toString(void)::$_1,std::allocator<gdc::DebugTreeNode::toString(void)::$_1>,void ()(gdc::DebugTreeNode const&,unsigned long)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<gdc::DebugTreeNode::toString(void)::$_1,std::allocator<gdc::DebugTreeNode::toString(void)::$_1>,void ()(gdc::DebugTreeNode const&,unsigned long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E42D93F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<gdc::DebugTreeNode::toString(void)::$_1,std::allocator<gdc::DebugTreeNode::toString(void)::$_1>,void ()(gdc::DebugTreeNode const&,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42D93F8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<gdc::DebugTreeNode::toString(void)::$_1,std::allocator<gdc::DebugTreeNode::toString(void)::$_1>,void ()(gdc::DebugTreeNode const&,unsigned long)>::operator()(uint64_t a1, uint64_t a2, size_t *a3)
{
  size_t v3;
  uint64_t v5;
  _QWORD *v6;
  std::locale::__imp *p_b;
  uint64_t v8;
  uint64_t v9;
  std::locale::__imp *locale;
  uint64_t v11;
  std::string::size_type v12;
  std::string *v13;
  std::string::size_type size;
  _QWORD *v15;
  __int128 *v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  std::locale::__imp *v20;
  std::locale::__imp *v21;
  uint64_t v22;
  __int128 v23;
  std::string::size_type v24;
  std::string *v25;
  std::string::size_type v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  std::string *v30;
  _QWORD *v31;
  int64_t v32;
  std::string::size_type v33;
  std::string *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  std::string *v38;
  int v39;
  _QWORD *v40;
  int64_t v41;
  std::string::size_type v42;
  std::string *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  std::string *v47;
  int v48;
  _QWORD *v49;
  int64_t v50;
  std::string::size_type v51;
  std::string *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  std::string *v56;
  int v57;
  _QWORD *v58;
  int64_t v59;
  std::string::size_type v60;
  std::string *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  std::string *v65;
  int v66;
  _QWORD *v67;
  int64_t v68;
  std::string::size_type v69;
  std::string *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  std::string *v74;
  int v75;
  const std::locale::facet *v76;
  int64_t v77;
  BOOL v78;
  size_t v79;
  size_t v80;
  std::locale::__imp *v81;
  const std::locale::facet *v82;
  int64_t v83;
  size_t v84;
  size_t v85;
  std::locale::__imp *v86;
  const std::locale::facet *v87;
  int64_t v88;
  size_t v89;
  size_t v90;
  std::locale::__imp *v91;
  const std::locale::facet *v92;
  int64_t v93;
  size_t v94;
  size_t v95;
  std::locale::__imp *v96;
  const std::locale::facet *v97;
  int64_t v98;
  size_t v99;
  size_t v100;
  std::locale::__imp *v101;
  uint64_t v102;
  uint64_t v103;
  std::locale::__imp *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  std::locale::__imp *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  std::locale::__imp *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  std::locale::__imp *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  std::locale::__imp *v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  const char *v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  const char *v132;
  const char *v133;
  int v134;
  const std::locale::facet *v135;
  uint64_t v136;
  size_t v137;
  size_t v138;
  std::locale::__imp *v139;
  uint64_t v140;
  uint64_t v141;
  std::locale::__imp *v142;
  uint64_t v143;
  uint64_t v144;
  __int128 v145;
  int64_t v146;
  std::string::size_type v147;
  std::string *v148;
  char *v149;
  uint64_t v150;
  char *v151;
  std::string *v152;
  int v153;
  const std::locale::facet *v154;
  int64_t v155;
  size_t v156;
  size_t v157;
  std::locale::__imp *v158;
  uint64_t v159;
  uint64_t v160;
  std::locale::__imp *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  size_t __sz;
  size_t v170;
  uint64_t v171;
  size_t v172;
  uint64_t v173;
  __int128 *v174;
  __int128 *v175;
  uint64_t *v176;
  uint64_t v177;
  std::string v178;
  std::string v179;
  _BYTE v180[16];
  std::locale __b;
  size_t v182;
  int64_t v183;

  v3 = *a3;
  if (*a3 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_337;
  v5 = a1;
  v6 = (_QWORD *)(*(_QWORD *)(a1 + 24) + 16);
  if (v3 >= 0x17)
  {
    v8 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v8 = v3 | 7;
    v9 = v8 + 1;
    p_b = (std::locale::__imp *)operator new(v8 + 1);
    v182 = v3;
    v183 = v9 | 0x8000000000000000;
    __b.__locale_ = p_b;
    goto LABEL_8;
  }
  HIBYTE(v183) = *a3;
  p_b = (std::locale::__imp *)&__b;
  if (v3)
LABEL_8:
    memset(p_b, 9, v3);
  *((_BYTE *)p_b + v3) = 0;
  if (v183 >= 0)
    locale = (std::locale::__imp *)&__b;
  else
    locale = __b.__locale_;
  if (v183 >= 0)
    v11 = HIBYTE(v183);
  else
    v11 = v182;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v6, (uint64_t)locale, v11);
  if (*(char *)(a2 + 23) < 0)
  {
    v12 = *(_QWORD *)(a2 + 8);
    if (v12)
    {
      std::string::__init_copy_ctor_external(&v179, *(const std::string::value_type **)a2, v12);
      goto LABEL_21;
    }
  }
  else if (*(_BYTE *)(a2 + 23))
  {
    v179 = *(std::string *)a2;
    goto LABEL_21;
  }
  *((_BYTE *)&v179.__r_.__value_.__s + 23) = 9;
  strcpy((char *)&v179, "<Unknown>");
LABEL_21:
  if ((v179.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = &v179;
  else
    v13 = (std::string *)v179.__r_.__value_.__r.__words[0];
  if ((v179.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v179.__r_.__value_.__r.__words[2]);
  else
    size = v179.__r_.__value_.__l.__size_;
  v15 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v6, (uint64_t)v13, size);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v15, (uint64_t)":\n", 2);
  if (SHIBYTE(v179.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v179.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v183) & 0x80000000) == 0)
      goto LABEL_29;
  }
  else if ((SHIBYTE(v183) & 0x80000000) == 0)
  {
    goto LABEL_29;
  }
  operator delete(__b.__locale_);
LABEL_29:
  v16 = *(__int128 **)(a2 + 72);
  v174 = *(__int128 **)(a2 + 80);
  if (v16 != v174)
  {
    v17 = v3 + 1;
    v18 = ((v3 + 1) & 0xFFFFFFFFFFFFFFF8) + 8;
    if (((v3 + 1) | 7) != 0x17)
      v18 = (v3 + 1) | 7;
    if (v3 <= 0x7FFFFFFFFFFFFFF6)
    {
      __sz = v18 + 1;
      v170 = v3 + 1;
      v168 = (v18 + 1) | 0x8000000000000000;
      v172 = v3;
      v173 = v5;
      v171 = a2;
      while (1)
      {
        v176 = *(uint64_t **)(v5 + 16);
        v19 = *v176;
        if (v3 >= 0x16)
        {
          v20 = (std::locale::__imp *)operator new(__sz);
          v182 = v17;
          v183 = v168;
          __b.__locale_ = v20;
        }
        else
        {
          HIBYTE(v183) = v17;
          v20 = (std::locale::__imp *)&__b;
        }
        memset(v20, 9, v17);
        *((_BYTE *)v20 + v17) = 0;
        if (v183 >= 0)
          v21 = (std::locale::__imp *)&__b;
        else
          v21 = __b.__locale_;
        if (v183 >= 0)
          v22 = HIBYTE(v183);
        else
          v22 = v182;
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>((_QWORD *)(v19 + 16), (uint64_t)v21, v22);
        if (*((char *)v16 + 23) < 0)
        {
          v24 = *((_QWORD *)v16 + 1);
          if (v24)
          {
            std::string::__init_copy_ctor_external(&v179, *(const std::string::value_type **)v16, v24);
            goto LABEL_52;
          }
        }
        else if (*((_BYTE *)v16 + 23))
        {
          v23 = *v16;
          v179.__r_.__value_.__r.__words[2] = *((_QWORD *)v16 + 2);
          *(_OWORD *)&v179.__r_.__value_.__l.__data_ = v23;
          goto LABEL_52;
        }
        *((_BYTE *)&v179.__r_.__value_.__s + 23) = 9;
        strcpy((char *)&v179, "<Unknown>");
LABEL_52:
        if ((v179.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v25 = &v179;
        else
          v25 = (std::string *)v179.__r_.__value_.__r.__words[0];
        if ((v179.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v26 = HIBYTE(v179.__r_.__value_.__r.__words[2]);
        else
          v26 = v179.__r_.__value_.__l.__size_;
        v27 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>((_QWORD *)(v19 + 16), (uint64_t)v25, v26);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v27, (uint64_t)": ", 2);
        if (SHIBYTE(v179.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v179.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v183) & 0x80000000) == 0)
            goto LABEL_60;
        }
        else if ((SHIBYTE(v183) & 0x80000000) == 0)
        {
          goto LABEL_60;
        }
        operator delete(__b.__locale_);
LABEL_60:
        *((_BYTE *)&v179.__r_.__value_.__s + 23) = 0;
        v179.__r_.__value_.__s.__data_[0] = 0;
        v29 = *((_QWORD *)v16 + 4);
        v28 = *((_QWORD *)v16 + 5);
        v175 = v16;
        v177 = v28;
        while (v29 != v28)
        {
          switch(*(_DWORD *)(v29 + 56))
          {
            case 0:
              v31 = (_QWORD *)(*v176 + 16);
              v32 = HIBYTE(v179.__r_.__value_.__r.__words[2]);
              v33 = v179.__r_.__value_.__l.__size_;
              if ((v179.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v34 = &v179;
              else
                v34 = (std::string *)v179.__r_.__value_.__r.__words[0];
              MEMORY[0x1A1AF49E0](&v178, *v176 + 16);
              if (!v178.__r_.__value_.__s.__data_[0])
                goto LABEL_229;
              if ((v32 & 0x80u) != 0)
                v32 = v33;
              v35 = (char *)v31 + *(_QWORD *)(*v31 - 24);
              v36 = *((_QWORD *)v35 + 5);
              v37 = (char *)v34 + v32;
              if ((*((_DWORD *)v35 + 2) & 0xB0) == 0x20)
                v38 = (std::string *)((char *)v34 + v32);
              else
                v38 = v34;
              v39 = *((_DWORD *)v35 + 36);
              if (v39 == -1)
              {
                std::ios_base::getloc((const std::ios_base *)((char *)v31 + *(_QWORD *)(*v31 - 24)));
                v76 = std::locale::use_facet(&__b, MEMORY[0x1E0DE4A90]);
                v39 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v76->__vftable[2].~facet_0)(v76, 32);
                std::locale::~locale(&__b);
                *((_DWORD *)v35 + 36) = v39;
                if (!v36)
                  goto LABEL_228;
              }
              else if (!v36)
              {
                goto LABEL_228;
              }
              v77 = *((_QWORD *)v35 + 3);
              v78 = v77 <= v32;
              v79 = v77 - v32;
              if (v78)
                v80 = 0;
              else
                v80 = v79;
              if ((char *)v38 - (char *)v34 >= 1
                && (*(uint64_t (**)(uint64_t, std::string *, int64_t))(*(_QWORD *)v36 + 96))(v36, v34, (char *)v38 - (char *)v34) != (char *)v38 - (char *)v34)
              {
                goto LABEL_228;
              }
              if ((uint64_t)v80 < 1)
                goto LABEL_225;
              if (v80 > 0x7FFFFFFFFFFFFFF7)
                goto LABEL_337;
              if (v80 >= 0x17)
              {
                v102 = (v80 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v80 | 7) != 0x17)
                  v102 = v80 | 7;
                v103 = v102 + 1;
                v81 = (std::locale::__imp *)operator new(v102 + 1);
                v182 = v80;
                v183 = v103 | 0x8000000000000000;
                __b.__locale_ = v81;
              }
              else
              {
                HIBYTE(v183) = v80;
                v81 = (std::locale::__imp *)&__b;
              }
              memset(v81, v39, v80);
              *((_BYTE *)v81 + v80) = 0;
              if (v183 >= 0)
                v104 = (std::locale::__imp *)&__b;
              else
                v104 = __b.__locale_;
              v105 = (*(uint64_t (**)(uint64_t, std::locale::__imp *, size_t))(*(_QWORD *)v36 + 96))(v36, v104, v80);
              v106 = v105;
              if (SHIBYTE(v183) < 0)
              {
                operator delete(__b.__locale_);
                if (v106 != v80)
                  goto LABEL_228;
              }
              else if (v105 != v80)
              {
                goto LABEL_228;
              }
LABEL_225:
              if (v37 - (char *)v38 < 1
                || (*(uint64_t (**)(uint64_t, std::string *, int64_t))(*(_QWORD *)v36 + 96))(v36, v38, v37 - (char *)v38) == v37 - (char *)v38)
              {
                *((_QWORD *)v35 + 3) = 0;
                goto LABEL_229;
              }
LABEL_228:
              std::ios_base::clear((std::ios_base *)((char *)v31 + *(_QWORD *)(*v31 - 24)), *(_DWORD *)((char *)v31 + *(_QWORD *)(*v31 - 24) + 32) | 5);
LABEL_229:
              MEMORY[0x1A1AF49EC](&v178);
              std::ostream::operator<<();
              goto LABEL_63;
            case 1:
              v40 = (_QWORD *)(*v176 + 16);
              v41 = HIBYTE(v179.__r_.__value_.__r.__words[2]);
              v42 = v179.__r_.__value_.__l.__size_;
              if ((v179.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v43 = &v179;
              else
                v43 = (std::string *)v179.__r_.__value_.__r.__words[0];
              MEMORY[0x1A1AF49E0](&v178, *v176 + 16);
              if (!v178.__r_.__value_.__s.__data_[0])
                goto LABEL_235;
              if ((v41 & 0x80u) != 0)
                v41 = v42;
              v44 = (char *)v40 + *(_QWORD *)(*v40 - 24);
              v45 = *((_QWORD *)v44 + 5);
              v46 = (char *)v43 + v41;
              if ((*((_DWORD *)v44 + 2) & 0xB0) == 0x20)
                v47 = (std::string *)((char *)v43 + v41);
              else
                v47 = v43;
              v48 = *((_DWORD *)v44 + 36);
              if (v48 == -1)
              {
                std::ios_base::getloc((const std::ios_base *)((char *)v40 + *(_QWORD *)(*v40 - 24)));
                v82 = std::locale::use_facet(&__b, MEMORY[0x1E0DE4A90]);
                v48 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v82->__vftable[2].~facet_0)(v82, 32);
                std::locale::~locale(&__b);
                *((_DWORD *)v44 + 36) = v48;
                if (!v45)
                  goto LABEL_234;
              }
              else if (!v45)
              {
                goto LABEL_234;
              }
              v83 = *((_QWORD *)v44 + 3);
              v78 = v83 <= v41;
              v84 = v83 - v41;
              if (v78)
                v85 = 0;
              else
                v85 = v84;
              if ((char *)v47 - (char *)v43 >= 1
                && (*(uint64_t (**)(uint64_t, std::string *, int64_t))(*(_QWORD *)v45 + 96))(v45, v43, (char *)v47 - (char *)v43) != (char *)v47 - (char *)v43)
              {
                goto LABEL_234;
              }
              if ((uint64_t)v85 < 1)
                goto LABEL_231;
              if (v85 > 0x7FFFFFFFFFFFFFF7)
                goto LABEL_337;
              if (v85 >= 0x17)
              {
                v107 = (v85 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v85 | 7) != 0x17)
                  v107 = v85 | 7;
                v108 = v107 + 1;
                v86 = (std::locale::__imp *)operator new(v107 + 1);
                v182 = v85;
                v183 = v108 | 0x8000000000000000;
                __b.__locale_ = v86;
              }
              else
              {
                HIBYTE(v183) = v85;
                v86 = (std::locale::__imp *)&__b;
              }
              memset(v86, v48, v85);
              *((_BYTE *)v86 + v85) = 0;
              if (v183 >= 0)
                v109 = (std::locale::__imp *)&__b;
              else
                v109 = __b.__locale_;
              v110 = (*(uint64_t (**)(uint64_t, std::locale::__imp *, size_t))(*(_QWORD *)v45 + 96))(v45, v109, v85);
              v111 = v110;
              if (SHIBYTE(v183) < 0)
              {
                operator delete(__b.__locale_);
                if (v111 != v85)
                  goto LABEL_234;
              }
              else if (v110 != v85)
              {
                goto LABEL_234;
              }
LABEL_231:
              if (v46 - (char *)v47 < 1
                || (*(uint64_t (**)(uint64_t, std::string *, int64_t))(*(_QWORD *)v45 + 96))(v45, v47, v46 - (char *)v47) == v46 - (char *)v47)
              {
                *((_QWORD *)v44 + 3) = 0;
                goto LABEL_235;
              }
LABEL_234:
              std::ios_base::clear((std::ios_base *)((char *)v40 + *(_QWORD *)(*v40 - 24)), *(_DWORD *)((char *)v40 + *(_QWORD *)(*v40 - 24) + 32) | 5);
LABEL_235:
              MEMORY[0x1A1AF49EC](&v178);
              std::ostream::operator<<();
              goto LABEL_63;
            case 2:
              v49 = (_QWORD *)(*v176 + 16);
              v50 = HIBYTE(v179.__r_.__value_.__r.__words[2]);
              v51 = v179.__r_.__value_.__l.__size_;
              if ((v179.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v52 = &v179;
              else
                v52 = (std::string *)v179.__r_.__value_.__r.__words[0];
              MEMORY[0x1A1AF49E0](&v178, *v176 + 16);
              if (!v178.__r_.__value_.__s.__data_[0])
                goto LABEL_62;
              if ((v50 & 0x80u) != 0)
                v50 = v51;
              v53 = (char *)v49 + *(_QWORD *)(*v49 - 24);
              v54 = *((_QWORD *)v53 + 5);
              v55 = (char *)v52 + v50;
              if ((*((_DWORD *)v53 + 2) & 0xB0) == 0x20)
                v56 = (std::string *)((char *)v52 + v50);
              else
                v56 = v52;
              v57 = *((_DWORD *)v53 + 36);
              if (v57 == -1)
              {
                std::ios_base::getloc((const std::ios_base *)((char *)v49 + *(_QWORD *)(*v49 - 24)));
                v87 = std::locale::use_facet(&__b, MEMORY[0x1E0DE4A90]);
                v57 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v87->__vftable[2].~facet_0)(v87, 32);
                std::locale::~locale(&__b);
                *((_DWORD *)v53 + 36) = v57;
                if (!v54)
                  goto LABEL_61;
              }
              else if (!v54)
              {
                goto LABEL_61;
              }
              v88 = *((_QWORD *)v53 + 3);
              v78 = v88 <= v50;
              v89 = v88 - v50;
              if (v78)
                v90 = 0;
              else
                v90 = v89;
              if ((char *)v56 - (char *)v52 >= 1
                && (*(uint64_t (**)(uint64_t, std::string *, int64_t))(*(_QWORD *)v54 + 96))(v54, v52, (char *)v56 - (char *)v52) != (char *)v56 - (char *)v52)
              {
                goto LABEL_61;
              }
              if ((uint64_t)v90 < 1)
                goto LABEL_237;
              if (v90 > 0x7FFFFFFFFFFFFFF7)
                goto LABEL_337;
              if (v90 >= 0x17)
              {
                v112 = (v90 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v90 | 7) != 0x17)
                  v112 = v90 | 7;
                v113 = v112 + 1;
                v91 = (std::locale::__imp *)operator new(v112 + 1);
                v182 = v90;
                v183 = v113 | 0x8000000000000000;
                __b.__locale_ = v91;
              }
              else
              {
                HIBYTE(v183) = v90;
                v91 = (std::locale::__imp *)&__b;
              }
              memset(v91, v57, v90);
              *((_BYTE *)v91 + v90) = 0;
              if (v183 >= 0)
                v114 = (std::locale::__imp *)&__b;
              else
                v114 = __b.__locale_;
              v115 = (*(uint64_t (**)(uint64_t, std::locale::__imp *, size_t))(*(_QWORD *)v54 + 96))(v54, v114, v90);
              v116 = v115;
              if (SHIBYTE(v183) < 0)
              {
                operator delete(__b.__locale_);
                if (v116 != v90)
                  goto LABEL_61;
              }
              else if (v115 != v90)
              {
                goto LABEL_61;
              }
LABEL_237:
              if (v55 - (char *)v56 >= 1
                && (*(uint64_t (**)(uint64_t, std::string *, int64_t))(*(_QWORD *)v54 + 96))(v54, v56, v55 - (char *)v56) != v55 - (char *)v56)
              {
LABEL_61:
                std::ios_base::clear((std::ios_base *)((char *)v49 + *(_QWORD *)(*v49 - 24)), *(_DWORD *)((char *)v49 + *(_QWORD *)(*v49 - 24) + 32) | 5);
                goto LABEL_62;
              }
              *((_QWORD *)v53 + 3) = 0;
LABEL_62:
              MEMORY[0x1A1AF49EC](&v178);
              std::ostream::operator<<();
              goto LABEL_63;
            case 3:
              v58 = (_QWORD *)(*v176 + 16);
              v59 = HIBYTE(v179.__r_.__value_.__r.__words[2]);
              v60 = v179.__r_.__value_.__l.__size_;
              if ((v179.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v61 = &v179;
              else
                v61 = (std::string *)v179.__r_.__value_.__r.__words[0];
              MEMORY[0x1A1AF49E0](&v178, *v176 + 16);
              if (!v178.__r_.__value_.__s.__data_[0])
                goto LABEL_245;
              if ((v59 & 0x80u) != 0)
                v59 = v60;
              v62 = (char *)v58 + *(_QWORD *)(*v58 - 24);
              v63 = *((_QWORD *)v62 + 5);
              v64 = (char *)v61 + v59;
              if ((*((_DWORD *)v62 + 2) & 0xB0) == 0x20)
                v65 = (std::string *)((char *)v61 + v59);
              else
                v65 = v61;
              v66 = *((_DWORD *)v62 + 36);
              if (v66 == -1)
              {
                std::ios_base::getloc((const std::ios_base *)((char *)v58 + *(_QWORD *)(*v58 - 24)));
                v92 = std::locale::use_facet(&__b, MEMORY[0x1E0DE4A90]);
                v66 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v92->__vftable[2].~facet_0)(v92, 32);
                std::locale::~locale(&__b);
                *((_DWORD *)v62 + 36) = v66;
                if (!v63)
                  goto LABEL_244;
              }
              else if (!v63)
              {
                goto LABEL_244;
              }
              v93 = *((_QWORD *)v62 + 3);
              v78 = v93 <= v59;
              v94 = v93 - v59;
              if (v78)
                v95 = 0;
              else
                v95 = v94;
              if ((char *)v65 - (char *)v61 >= 1
                && (*(uint64_t (**)(uint64_t, std::string *, int64_t))(*(_QWORD *)v63 + 96))(v63, v61, (char *)v65 - (char *)v61) != (char *)v65 - (char *)v61)
              {
                goto LABEL_244;
              }
              if ((uint64_t)v95 < 1)
                goto LABEL_241;
              if (v95 > 0x7FFFFFFFFFFFFFF7)
                goto LABEL_337;
              if (v95 >= 0x17)
              {
                v117 = (v95 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v95 | 7) != 0x17)
                  v117 = v95 | 7;
                v118 = v117 + 1;
                v96 = (std::locale::__imp *)operator new(v117 + 1);
                v182 = v95;
                v183 = v118 | 0x8000000000000000;
                __b.__locale_ = v96;
              }
              else
              {
                HIBYTE(v183) = v95;
                v96 = (std::locale::__imp *)&__b;
              }
              memset(v96, v66, v95);
              *((_BYTE *)v96 + v95) = 0;
              if (v183 >= 0)
                v119 = (std::locale::__imp *)&__b;
              else
                v119 = __b.__locale_;
              v120 = (*(uint64_t (**)(uint64_t, std::locale::__imp *, size_t))(*(_QWORD *)v63 + 96))(v63, v119, v95);
              v121 = v120;
              if (SHIBYTE(v183) < 0)
              {
                operator delete(__b.__locale_);
                if (v121 != v95)
                  goto LABEL_244;
              }
              else if (v120 != v95)
              {
                goto LABEL_244;
              }
LABEL_241:
              if (v64 - (char *)v65 < 1
                || (*(uint64_t (**)(uint64_t, std::string *, int64_t))(*(_QWORD *)v63 + 96))(v63, v65, v64 - (char *)v65) == v64 - (char *)v65)
              {
                *((_QWORD *)v62 + 3) = 0;
                goto LABEL_245;
              }
LABEL_244:
              std::ios_base::clear((std::ios_base *)((char *)v58 + *(_QWORD *)(*v58 - 24)), *(_DWORD *)((char *)v58 + *(_QWORD *)(*v58 - 24) + 32) | 5);
LABEL_245:
              MEMORY[0x1A1AF49EC](&v178);
              v127 = *(unsigned __int8 *)(v29 + 24);
              if (*(_BYTE *)(v29 + 24))
                v128 = "True";
              else
                v128 = "False";
              MEMORY[0x1A1AF49E0](&v178, v58);
              if (!v178.__r_.__value_.__s.__data_[0])
                goto LABEL_321;
              if (v127)
                v129 = 4;
              else
                v129 = 5;
              v130 = (char *)v58 + *(_QWORD *)(*v58 - 24);
              v131 = *((_QWORD *)v130 + 5);
              v132 = &v128[v129];
              if ((*((_DWORD *)v130 + 2) & 0xB0) == 0x20)
                v133 = &v128[v129];
              else
                v133 = v128;
              v134 = *((_DWORD *)v130 + 36);
              if (v134 == -1)
              {
                std::ios_base::getloc((const std::ios_base *)((char *)v58 + *(_QWORD *)(*v58 - 24)));
                v135 = std::locale::use_facet(&__b, MEMORY[0x1E0DE4A90]);
                v134 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v135->__vftable[2].~facet_0)(v135, 32);
                std::locale::~locale(&__b);
                *((_DWORD *)v130 + 36) = v134;
                if (!v131)
                  goto LABEL_320;
              }
              else if (!v131)
              {
                goto LABEL_320;
              }
              v136 = *((_QWORD *)v130 + 3);
              v78 = v136 <= v129;
              v137 = v136 - v129;
              if (v78)
                v138 = 0;
              else
                v138 = v137;
              if (v133 - v128 >= 1
                && (*(uint64_t (**)(uint64_t, const char *, int64_t))(*(_QWORD *)v131 + 96))(v131, v128, v133 - v128) != v133 - v128)
              {
                goto LABEL_320;
              }
              if ((uint64_t)v138 < 1)
                goto LABEL_317;
              if (v138 > 0x7FFFFFFFFFFFFFF7)
                goto LABEL_337;
              if (v138 >= 0x17)
              {
                v140 = (v138 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v138 | 7) != 0x17)
                  v140 = v138 | 7;
                v141 = v140 + 1;
                v139 = (std::locale::__imp *)operator new(v140 + 1);
                v182 = v138;
                v183 = v141 | 0x8000000000000000;
                __b.__locale_ = v139;
              }
              else
              {
                HIBYTE(v183) = v138;
                v139 = (std::locale::__imp *)&__b;
              }
              memset(v139, v134, v138);
              *((_BYTE *)v139 + v138) = 0;
              if (v183 >= 0)
                v142 = (std::locale::__imp *)&__b;
              else
                v142 = __b.__locale_;
              v143 = (*(uint64_t (**)(uint64_t, std::locale::__imp *, size_t))(*(_QWORD *)v131 + 96))(v131, v142, v138);
              v144 = v143;
              if (SHIBYTE(v183) < 0)
              {
                operator delete(__b.__locale_);
                if (v144 != v138)
                  goto LABEL_320;
              }
              else if (v143 != v138)
              {
                goto LABEL_320;
              }
LABEL_317:
              if (v132 - v133 < 1
                || (*(uint64_t (**)(uint64_t, const char *, int64_t))(*(_QWORD *)v131 + 96))(v131, v133, v132 - v133) == v132 - v133)
              {
                *((_QWORD *)v130 + 3) = 0;
                goto LABEL_321;
              }
LABEL_320:
              std::ios_base::clear((std::ios_base *)((char *)v58 + *(_QWORD *)(*v58 - 24)), *(_DWORD *)((char *)v58 + *(_QWORD *)(*v58 - 24) + 32) | 5);
LABEL_321:
              MEMORY[0x1A1AF49EC](&v178);
              goto LABEL_63;
            case 4:
              v67 = (_QWORD *)(*v176 + 16);
              v68 = HIBYTE(v179.__r_.__value_.__r.__words[2]);
              v69 = v179.__r_.__value_.__l.__size_;
              if ((v179.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v70 = &v179;
              else
                v70 = (std::string *)v179.__r_.__value_.__r.__words[0];
              MEMORY[0x1A1AF49E0](&v178, *v176 + 16);
              if (!v178.__r_.__value_.__s.__data_[0])
                goto LABEL_282;
              if ((v68 & 0x80u) != 0)
                v68 = v69;
              v71 = (char *)v67 + *(_QWORD *)(*v67 - 24);
              v72 = *((_QWORD *)v71 + 5);
              v73 = (char *)v70 + v68;
              if ((*((_DWORD *)v71 + 2) & 0xB0) == 0x20)
                v74 = (std::string *)((char *)v70 + v68);
              else
                v74 = v70;
              v75 = *((_DWORD *)v71 + 36);
              if (v75 == -1)
              {
                std::ios_base::getloc((const std::ios_base *)((char *)v67 + *(_QWORD *)(*v67 - 24)));
                v97 = std::locale::use_facet(&__b, MEMORY[0x1E0DE4A90]);
                v75 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v97->__vftable[2].~facet_0)(v97, 32);
                std::locale::~locale(&__b);
                *((_DWORD *)v71 + 36) = v75;
                if (!v72)
                  goto LABEL_281;
              }
              else if (!v72)
              {
                goto LABEL_281;
              }
              v98 = *((_QWORD *)v71 + 3);
              v78 = v98 <= v68;
              v99 = v98 - v68;
              if (v78)
                v100 = 0;
              else
                v100 = v99;
              if ((char *)v74 - (char *)v70 >= 1
                && (*(uint64_t (**)(uint64_t, std::string *, int64_t))(*(_QWORD *)v72 + 96))(v72, v70, (char *)v74 - (char *)v70) != (char *)v74 - (char *)v70)
              {
                goto LABEL_281;
              }
              if ((uint64_t)v100 < 1)
                goto LABEL_278;
              if (v100 > 0x7FFFFFFFFFFFFFF7)
                goto LABEL_337;
              if (v100 >= 0x17)
              {
                v122 = (v100 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v100 | 7) != 0x17)
                  v122 = v100 | 7;
                v123 = v122 + 1;
                v101 = (std::locale::__imp *)operator new(v122 + 1);
                v182 = v100;
                v183 = v123 | 0x8000000000000000;
                __b.__locale_ = v101;
              }
              else
              {
                HIBYTE(v183) = v100;
                v101 = (std::locale::__imp *)&__b;
              }
              memset(v101, v75, v100);
              *((_BYTE *)v101 + v100) = 0;
              if (v183 >= 0)
                v124 = (std::locale::__imp *)&__b;
              else
                v124 = __b.__locale_;
              v125 = (*(uint64_t (**)(uint64_t, std::locale::__imp *, size_t))(*(_QWORD *)v72 + 96))(v72, v124, v100);
              v126 = v125;
              if (SHIBYTE(v183) < 0)
              {
                operator delete(__b.__locale_);
                if (v126 != v100)
                  goto LABEL_281;
              }
              else if (v125 != v100)
              {
                goto LABEL_281;
              }
LABEL_278:
              if (v73 - (char *)v74 < 1
                || (*(uint64_t (**)(uint64_t, std::string *, int64_t))(*(_QWORD *)v72 + 96))(v72, v74, v73 - (char *)v74) == v73 - (char *)v74)
              {
                *((_QWORD *)v71 + 3) = 0;
                goto LABEL_282;
              }
LABEL_281:
              std::ios_base::clear((std::ios_base *)((char *)v67 + *(_QWORD *)(*v67 - 24)), *(_DWORD *)((char *)v67 + *(_QWORD *)(*v67 - 24) + 32) | 5);
LABEL_282:
              MEMORY[0x1A1AF49EC](&v178);
              if (*(char *)(v29 + 55) < 0)
              {
                std::string::__init_copy_ctor_external(&v178, *(const std::string::value_type **)(v29 + 32), *(_QWORD *)(v29 + 40));
              }
              else
              {
                v145 = *(_OWORD *)(v29 + 32);
                v178.__r_.__value_.__r.__words[2] = *(_QWORD *)(v29 + 48);
                *(_OWORD *)&v178.__r_.__value_.__l.__data_ = v145;
              }
              v146 = HIBYTE(v178.__r_.__value_.__r.__words[2]);
              v147 = v178.__r_.__value_.__l.__size_;
              if ((v178.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v148 = &v178;
              else
                v148 = (std::string *)v178.__r_.__value_.__r.__words[0];
              MEMORY[0x1A1AF49E0](v180, v67);
              if (!v180[0])
                goto LABEL_327;
              if ((v146 & 0x80u) != 0)
                v146 = v147;
              v149 = (char *)v67 + *(_QWORD *)(*v67 - 24);
              v150 = *((_QWORD *)v149 + 5);
              v151 = (char *)v148 + v146;
              if ((*((_DWORD *)v149 + 2) & 0xB0) == 0x20)
                v152 = (std::string *)((char *)v148 + v146);
              else
                v152 = v148;
              v153 = *((_DWORD *)v149 + 36);
              if (v153 == -1)
              {
                std::ios_base::getloc((const std::ios_base *)((char *)v67 + *(_QWORD *)(*v67 - 24)));
                v154 = std::locale::use_facet(&__b, MEMORY[0x1E0DE4A90]);
                v153 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v154->__vftable[2].~facet_0)(v154, 32);
                std::locale::~locale(&__b);
                *((_DWORD *)v149 + 36) = v153;
                if (!v150)
                  goto LABEL_326;
              }
              else if (!v150)
              {
                goto LABEL_326;
              }
              v155 = *((_QWORD *)v149 + 3);
              v78 = v155 <= v146;
              v156 = v155 - v146;
              if (v78)
                v157 = 0;
              else
                v157 = v156;
              if ((char *)v152 - (char *)v148 >= 1
                && (*(uint64_t (**)(uint64_t, std::string *, int64_t))(*(_QWORD *)v150 + 96))(v150, v148, (char *)v152 - (char *)v148) != (char *)v152 - (char *)v148)
              {
                goto LABEL_326;
              }
              if ((uint64_t)v157 < 1)
                goto LABEL_323;
              if (v157 > 0x7FFFFFFFFFFFFFF7)
                goto LABEL_337;
              if (v157 >= 0x17)
              {
                v159 = (v157 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v157 | 7) != 0x17)
                  v159 = v157 | 7;
                v160 = v159 + 1;
                v158 = (std::locale::__imp *)operator new(v159 + 1);
                v182 = v157;
                v183 = v160 | 0x8000000000000000;
                __b.__locale_ = v158;
              }
              else
              {
                HIBYTE(v183) = v157;
                v158 = (std::locale::__imp *)&__b;
              }
              memset(v158, v153, v157);
              *((_BYTE *)v158 + v157) = 0;
              if (v183 >= 0)
                v161 = (std::locale::__imp *)&__b;
              else
                v161 = __b.__locale_;
              v162 = (*(uint64_t (**)(uint64_t, std::locale::__imp *, size_t))(*(_QWORD *)v150 + 96))(v150, v161, v157);
              v163 = v162;
              if (SHIBYTE(v183) < 0)
              {
                operator delete(__b.__locale_);
                if (v163 != v157)
                  goto LABEL_326;
              }
              else if (v162 != v157)
              {
                goto LABEL_326;
              }
LABEL_323:
              if (v151 - (char *)v152 < 1
                || (*(uint64_t (**)(uint64_t, std::string *, int64_t))(*(_QWORD *)v150 + 96))(v150, v152, v151 - (char *)v152) == v151 - (char *)v152)
              {
                *((_QWORD *)v149 + 3) = 0;
                goto LABEL_327;
              }
LABEL_326:
              std::ios_base::clear((std::ios_base *)((char *)v67 + *(_QWORD *)(*v67 - 24)), *(_DWORD *)((char *)v67 + *(_QWORD *)(*v67 - 24) + 32) | 5);
LABEL_327:
              MEMORY[0x1A1AF49EC](v180);
              if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v178.__r_.__value_.__l.__data_);
LABEL_63:
              if (SHIBYTE(v179.__r_.__value_.__r.__words[2]) < 0)
              {
                v179.__r_.__value_.__l.__size_ = 2;
                v30 = (std::string *)v179.__r_.__value_.__r.__words[0];
              }
              else
              {
                *((_BYTE *)&v179.__r_.__value_.__s + 23) = 2;
                v30 = &v179;
              }
              strcpy((char *)v30, ", ");
              v29 += 64;
              v28 = v177;
              break;
            default:
              goto LABEL_63;
          }
        }
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>((_QWORD *)(*v176 + 16), (uint64_t)"\n", 1);
        if (SHIBYTE(v179.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v179.__r_.__value_.__l.__data_);
        v16 = v175 + 5;
        v3 = v172;
        v5 = v173;
        v17 = v170;
        a2 = v171;
        if (v175 + 5 == v174)
          goto LABEL_331;
      }
    }
LABEL_337:
    abort();
  }
LABEL_331:
  v165 = *(_QWORD *)(a2 + 48);
  v164 = *(_QWORD *)(a2 + 56);
  if (v165 != v164)
  {
    while (1)
    {
      v166 = *(_QWORD *)(v5 + 8);
      __b.__locale_ = (std::locale::__imp *)(v3 + 1);
      v167 = *(_QWORD *)(v166 + 24);
      if (!v167)
        break;
      (*(void (**)(uint64_t, uint64_t, std::locale *))(*(_QWORD *)v167 + 48))(v167, v165, &__b);
      v165 += 96;
      if (v165 == v164)
        return;
    }
    std::__throw_bad_function_call[abi:nn180100]();
    gdc::DebugTreeNode::findChildWithName();
  }
}

uint64_t gdc::DebugTreeNode::findChildWithName(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t ChildWithName;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  if (v2 == v3)
    return 0;
  v5 = *((_BYTE *)a2 + 23);
  if (v5 >= 0)
    v6 = (unsigned __int8 *)*((unsigned __int8 *)a2 + 23);
  else
    v6 = a2[1];
  if (v5 >= 0)
    v7 = (unsigned __int8 *)a2;
  else
    v7 = *a2;
  while (1)
  {
    v8 = *(unsigned __int8 *)(v2 + 23);
    if ((v8 & 0x80u) == 0)
      v9 = (unsigned __int8 *)*(unsigned __int8 *)(v2 + 23);
    else
      v9 = *(unsigned __int8 **)(v2 + 8);
    if (v9 == v6)
    {
      if ((v8 & 0x80) != 0)
      {
        if (!memcmp(*(const void **)v2, v7, *(_QWORD *)(v2 + 8)))
          return v2;
      }
      else
      {
        if (!*(_BYTE *)(v2 + 23))
          return v2;
        v10 = 0;
        while (*(unsigned __int8 *)(v2 + v10) == v7[v10])
        {
          if (v8 == ++v10)
            return v2;
        }
      }
    }
    ChildWithName = gdc::DebugTreeNode::findChildWithName(v2, a2);
    if (ChildWithName)
      break;
    v2 += 96;
    if (v2 == v3)
      return 0;
  }
  return ChildWithName;
}

char *std::vector<gdc::DebugTreeProperty>::__emplace_back_slow_path<std::string const&,gdc::DebugTreeProperty::VisualizerType>(char **a1, uint64_t a2, int a3)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  char *v20;
  uint64_t v21;

  v3 = *a1;
  v4 = a1[1];
  v5 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - *a1) >> 4);
  v6 = v5 + 1;
  if (v5 + 1 > 0x333333333333333)
    abort();
  if (0x999999999999999ALL * ((a1[2] - v3) >> 4) > v6)
    v6 = 0x999999999999999ALL * ((a1[2] - v3) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 4) >= 0x199999999999999)
    v10 = 0x333333333333333;
  else
    v10 = v6;
  if (v10)
  {
    if (v10 > 0x333333333333333)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v11 = (char *)operator new(80 * v10);
  }
  else
  {
    v11 = 0;
  }
  v12 = &v11[80 * v5];
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v11[80 * v5], *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    v3 = *a1;
    v4 = a1[1];
  }
  else
  {
    *(_OWORD *)v12 = *(_OWORD *)a2;
    *((_QWORD *)v12 + 2) = *(_QWORD *)(a2 + 16);
  }
  v13 = &v11[80 * v10];
  v14 = &v11[80 * v5];
  *((_DWORD *)v14 + 6) = a3;
  *((_OWORD *)v14 + 2) = 0u;
  *((_OWORD *)v14 + 3) = 0u;
  *((_OWORD *)v14 + 4) = 0u;
  v15 = v12 + 80;
  if (v4 == v3)
  {
    *a1 = v12;
    a1[1] = v15;
    a1[2] = v13;
    if (!v3)
      return v15;
    goto LABEL_20;
  }
  v16 = 0;
  do
  {
    v17 = &v12[v16];
    v18 = &v4[v16];
    v19 = *(_OWORD *)&v4[v16 - 80];
    *((_QWORD *)v17 - 8) = *(_QWORD *)&v4[v16 - 64];
    *((_OWORD *)v17 - 5) = v19;
    *((_QWORD *)v18 - 9) = 0;
    *((_QWORD *)v18 - 8) = 0;
    *((_QWORD *)v18 - 10) = 0;
    *((_DWORD *)v17 - 14) = *(_DWORD *)&v4[v16 - 56];
    *((_QWORD *)v17 - 5) = 0;
    *((_QWORD *)v17 - 4) = 0;
    *((_QWORD *)v17 - 6) = 0;
    *((_OWORD *)v17 - 3) = *(_OWORD *)&v4[v16 - 48];
    *((_QWORD *)v17 - 4) = *(_QWORD *)&v4[v16 - 32];
    *((_QWORD *)v18 - 6) = 0;
    *((_QWORD *)v18 - 5) = 0;
    *((_QWORD *)v18 - 4) = 0;
    *((_QWORD *)v17 - 3) = 0;
    *((_QWORD *)v17 - 2) = 0;
    *((_QWORD *)v17 - 1) = 0;
    *(_OWORD *)(v17 - 24) = *(_OWORD *)&v4[v16 - 24];
    *((_QWORD *)v17 - 1) = *(_QWORD *)&v4[v16 - 8];
    *((_QWORD *)v18 - 3) = 0;
    *((_QWORD *)v18 - 2) = 0;
    *((_QWORD *)v18 - 1) = 0;
    v16 -= 80;
  }
  while (&v4[v16] != v3);
  v20 = &v12[v16];
  v3 = *a1;
  v21 = (uint64_t)a1[1];
  *a1 = v20;
  a1[1] = v15;
  a1[2] = v13;
  while ((char *)v21 != v3)
  {
    v21 -= 80;
    std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v21);
  }
  if (v3)
LABEL_20:
    operator delete(v3);
  return v15;
}

void gdc::DebugTreeNode::addProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  __int128 v6;
  char *v7;
  gdc::DebugTreeProperty *v8;
  DebugTreeValue v9;

  v5 = *(_QWORD *)(a1 + 80);
  if (v5 >= *(_QWORD *)(a1 + 88))
  {
    v7 = std::vector<gdc::DebugTreeProperty>::__emplace_back_slow_path<std::string const&,gdc::DebugTreeProperty::VisualizerType>((char **)(a1 + 72), a2, 0);
  }
  else
  {
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(*(std::string **)(a1 + 80), *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      v6 = *(_OWORD *)a2;
      *(_QWORD *)(v5 + 16) = *(_QWORD *)(a2 + 16);
      *(_OWORD *)v5 = v6;
    }
    *(_DWORD *)(v5 + 24) = 0;
    *(_OWORD *)(v5 + 32) = 0u;
    *(_OWORD *)(v5 + 48) = 0u;
    *(_OWORD *)(v5 + 64) = 0u;
    v7 = (char *)(v5 + 80);
  }
  *(_QWORD *)(a1 + 80) = v7;
  v8 = (gdc::DebugTreeProperty *)(v7 - 80);
  *(_OWORD *)&v9.var0.var0 = *(_OWORD *)a3;
  *(_OWORD *)((char *)&v9.var0.var1 + 1) = *(_OWORD *)(a3 + 9);
  if (*(char *)(a3 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v9.var0.var4, *(const std::string::value_type **)(a3 + 32), *(_QWORD *)(a3 + 40));
  }
  else
  {
    *(_OWORD *)v9.var0.var4.__r_.__value_.var0.__s.__data_ = *(_OWORD *)(a3 + 32);
    *((_QWORD *)&v9.var0.var4.__r_.__value_.var0.__l + 2) = *(_QWORD *)(a3 + 48);
  }
  v9.var0.var4.__r_.var0 = *(_DWORD *)(a3 + 56);
  gdc::DebugTreeProperty::addValue(v8, &v9);
  if (*((char *)&v9.var0.var4.__r_.__value_.var0.__l + 23) < 0)
    operator delete(v9.var0.var4.__r_.__value_.var0.__l.__data_);
}

{
  unint64_t v5;
  __int128 v6;
  char *v7;
  gdc::DebugTreeProperty *v8;
  DebugTreeValue v9;

  v5 = *(_QWORD *)(a1 + 80);
  if (v5 >= *(_QWORD *)(a1 + 88))
  {
    v7 = std::vector<gdc::DebugTreeProperty>::__emplace_back_slow_path<std::string const&,gdc::DebugTreeProperty::VisualizerType>((char **)(a1 + 72), a2, 1);
  }
  else
  {
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(*(std::string **)(a1 + 80), *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      v6 = *(_OWORD *)a2;
      *(_QWORD *)(v5 + 16) = *(_QWORD *)(a2 + 16);
      *(_OWORD *)v5 = v6;
    }
    *(_DWORD *)(v5 + 24) = 1;
    *(_OWORD *)(v5 + 32) = 0u;
    *(_OWORD *)(v5 + 48) = 0u;
    *(_OWORD *)(v5 + 64) = 0u;
    v7 = (char *)(v5 + 80);
  }
  *(_QWORD *)(a1 + 80) = v7;
  v8 = (gdc::DebugTreeProperty *)(v7 - 80);
  *(_OWORD *)&v9.var0.var0 = *(_OWORD *)a3;
  *(_OWORD *)((char *)&v9.var0.var1 + 1) = *(_OWORD *)(a3 + 9);
  if (*(char *)(a3 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v9.var0.var4, *(const std::string::value_type **)(a3 + 32), *(_QWORD *)(a3 + 40));
  }
  else
  {
    *(_OWORD *)v9.var0.var4.__r_.__value_.var0.__s.__data_ = *(_OWORD *)(a3 + 32);
    *((_QWORD *)&v9.var0.var4.__r_.__value_.var0.__l + 2) = *(_QWORD *)(a3 + 48);
  }
  v9.var0.var4.__r_.var0 = *(_DWORD *)(a3 + 56);
  gdc::DebugTreeProperty::addValue(v8, &v9);
  if (*((char *)&v9.var0.var4.__r_.__value_.var0.__l + 23) < 0)
    operator delete(v9.var0.var4.__r_.__value_.var0.__l.__data_);
}

void gdc::DebugTreeNode::addProperty(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v5;
  __int128 v6;
  char *v7;
  uint64_t v8;
  __int128 *v9;
  gdc::DebugTreeProperty *v10;
  __int128 *v11;
  __int128 v12;
  __int128 v13;
  __int128 *v14;
  int v15;
  _OWORD v16[2];
  std::string __p;
  int v18;
  _OWORD v19[2];
  std::string v20;
  int v21;

  v5 = *(_QWORD *)(a1 + 80);
  if (v5 >= *(_QWORD *)(a1 + 88))
  {
    v7 = std::vector<gdc::DebugTreeProperty>::__emplace_back_slow_path<std::string const&,gdc::DebugTreeProperty::VisualizerType>((char **)(a1 + 72), a2, 0);
  }
  else
  {
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(*(std::string **)(a1 + 80), *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      v6 = *(_OWORD *)a2;
      *(_QWORD *)(v5 + 16) = *(_QWORD *)(a2 + 16);
      *(_OWORD *)v5 = v6;
    }
    *(_DWORD *)(v5 + 24) = 0;
    *(_OWORD *)(v5 + 32) = 0u;
    *(_OWORD *)(v5 + 48) = 0u;
    *(_OWORD *)(v5 + 64) = 0u;
    v7 = (char *)(v5 + 80);
  }
  *(_QWORD *)(a1 + 80) = v7;
  v8 = *a3;
  v9 = (__int128 *)a3[1];
  if ((__int128 *)*a3 != v9)
  {
    v10 = (gdc::DebugTreeProperty *)(v7 - 80);
    v11 = (__int128 *)(v8 + 32);
    do
    {
      v12 = *(v11 - 2);
      *(_OWORD *)((char *)v19 + 9) = *(__int128 *)((char *)v11 - 23);
      v19[0] = v12;
      if (*((char *)v11 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)v11, *((_QWORD *)v11 + 1));
      }
      else
      {
        v13 = *v11;
        v20.__r_.__value_.__r.__words[2] = *((_QWORD *)v11 + 2);
        *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v13;
      }
      v14 = v11 - 2;
      v15 = *((_DWORD *)v11 + 6);
      v21 = v15;
      v16[0] = v19[0];
      *(_OWORD *)((char *)v16 + 9) = *(_OWORD *)((char *)v19 + 9);
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, v20.__r_.__value_.__l.__data_, v20.__r_.__value_.__l.__size_);
        v15 = v21;
      }
      else
      {
        __p = v20;
      }
      v18 = v15;
      gdc::DebugTreeProperty::addValue(v10, (DebugTreeValue *)v16);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
LABEL_20:
          operator delete(v20.__r_.__value_.__l.__data_);
      }
      else if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      {
        goto LABEL_20;
      }
      v11 += 4;
    }
    while (v14 + 4 != v9);
  }
}

{
  unint64_t v5;
  __int128 v6;
  char *v7;
  uint64_t v8;
  __int128 *v9;
  gdc::DebugTreeProperty *v10;
  __int128 *v11;
  __int128 v12;
  __int128 v13;
  __int128 *v14;
  int v15;
  _OWORD v16[2];
  std::string __p;
  int v18;
  _OWORD v19[2];
  std::string v20;
  int v21;

  v5 = *(_QWORD *)(a1 + 80);
  if (v5 >= *(_QWORD *)(a1 + 88))
  {
    v7 = std::vector<gdc::DebugTreeProperty>::__emplace_back_slow_path<std::string const&,gdc::DebugTreeProperty::VisualizerType>((char **)(a1 + 72), a2, 2);
  }
  else
  {
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(*(std::string **)(a1 + 80), *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      v6 = *(_OWORD *)a2;
      *(_QWORD *)(v5 + 16) = *(_QWORD *)(a2 + 16);
      *(_OWORD *)v5 = v6;
    }
    *(_DWORD *)(v5 + 24) = 2;
    *(_OWORD *)(v5 + 32) = 0u;
    *(_OWORD *)(v5 + 48) = 0u;
    *(_OWORD *)(v5 + 64) = 0u;
    v7 = (char *)(v5 + 80);
  }
  *(_QWORD *)(a1 + 80) = v7;
  v8 = *a3;
  v9 = (__int128 *)a3[1];
  if ((__int128 *)*a3 != v9)
  {
    v10 = (gdc::DebugTreeProperty *)(v7 - 80);
    v11 = (__int128 *)(v8 + 32);
    do
    {
      v12 = *(v11 - 2);
      *(_OWORD *)((char *)v19 + 9) = *(__int128 *)((char *)v11 - 23);
      v19[0] = v12;
      if (*((char *)v11 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)v11, *((_QWORD *)v11 + 1));
      }
      else
      {
        v13 = *v11;
        v20.__r_.__value_.__r.__words[2] = *((_QWORD *)v11 + 2);
        *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v13;
      }
      v14 = v11 - 2;
      v15 = *((_DWORD *)v11 + 6);
      v21 = v15;
      v16[0] = v19[0];
      *(_OWORD *)((char *)v16 + 9) = *(_OWORD *)((char *)v19 + 9);
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, v20.__r_.__value_.__l.__data_, v20.__r_.__value_.__l.__size_);
        v15 = v21;
      }
      else
      {
        __p = v20;
      }
      v18 = v15;
      gdc::DebugTreeProperty::addValue(v10, (DebugTreeValue *)v16);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
LABEL_20:
          operator delete(v20.__r_.__value_.__l.__data_);
      }
      else if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      {
        goto LABEL_20;
      }
      v11 += 4;
    }
    while (v14 + 4 != v9);
  }
}

uint64_t gdc::DataKeyRequester::setResourceManifestInformer(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 8) = a2;
  return result;
}

void gdc::DataKeyRequester::visibleZoomRange(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[8] = 0;
}

double gdc::DataKeyRequester::createDebugNode@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

void gdc::DataKeyRequester::downloadTileSize(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t **std::vector<unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>>::__destroy_vector::operator()[abi:ne180100](uint64_t **result)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = *result;
  v2 = **result;
  if (v2)
  {
    v1[1] = v2;
    return (uint64_t **)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1[3] + 40))(v1[3], v2, v1[2] - v2);
  }
  return result;
}

uint64_t gss::uint32Decoder<gss::ScenePropertyID>(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  return gss::uintDecoder<gss::ScenePropertyID>(a1, a2, a3, 0x20u, a4, a6);
}

uint64_t **std::vector<float,geo::StdAllocator<float,gss::Allocator>>::__destroy_vector::operator()[abi:ne180100](uint64_t **result)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = *result;
  v2 = **result;
  if (v2)
  {
    v1[1] = v2;
    return (uint64_t **)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1[3] + 40))(v1[3], v2, v1[2] - v2);
  }
  return result;
}

uint64_t std::vector<std::pair<gss::StylePropertyIndex,gss::PropertyID>,geo::StdAllocator<std::pair<gss::StylePropertyIndex,gss::PropertyID>,gss::Allocator>>::__destroy_vector::operator()[abi:ne180100](uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    *(_QWORD *)(result + 8) = v1;
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(result + 24) + 40))(*(_QWORD *)(result + 24), v1, *(_QWORD *)(result + 16) - v1);
  }
  return result;
}

_QWORD *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _BYTE v13[16];
  std::locale v14;

  MEMORY[0x1A1AF49E0](v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x1E0DE4A90]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x1A1AF49EC](v13);
  return a1;
}

void sub_19FF5CE84(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x1A1AF49EC](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x19FF5CE64);
}

void sub_19FF5CECC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  int64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v18;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if (v12 >= 1)
    {
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      v13 = v18 >= 0 ? __p : (void **)__p[0];
      v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v6 + 96))(v6, v13, v12);
      if (v18 < 0)
        operator delete(__p[0]);
      if (v14 != v12)
        return 0;
    }
    v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v15) == v15)
      *(_QWORD *)(a5 + 24) = 0;
    else
      return 0;
  }
  return v6;
}

void sub_19FF5D000(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

std::vector<unsigned int> *__cdecl std::vector<unsigned int>::vector(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  std::vector<unsigned int>::pointer end;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<unsigned int>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    bzero(end, 4 * __n);
    this->__end_ = &end[__n];
  }
  return this;
}

void sub_19FF5D11C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned int>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

unsigned int *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(unsigned int *result, unsigned int *a2, uint64_t **a3)
{
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;

  if (result != a2)
  {
    v3 = result + 1;
    if (result + 1 != a2)
    {
      v4 = **a3;
      v5 = 4;
      v6 = result;
      do
      {
        v8 = *v6;
        v7 = v6[1];
        v6 = v3;
        v9 = *(unsigned __int16 *)(v4 + 2 * v7);
        if (v9 < *(unsigned __int16 *)(v4 + 2 * v8))
        {
          v10 = v5;
          while (1)
          {
            *(unsigned int *)((char *)result + v10) = v8;
            v11 = v10 - 4;
            if (v10 == 4)
              break;
            v8 = *(unsigned int *)((char *)result + v10 - 8);
            v10 -= 4;
            if (v9 >= *(unsigned __int16 *)(v4 + 2 * v8))
            {
              v12 = (unsigned int *)((char *)result + v11);
              goto LABEL_10;
            }
          }
          v12 = result;
LABEL_10:
          *v12 = v7;
        }
        v3 = v6 + 1;
        v5 += 4;
      }
      while (v6 + 1 != a2);
    }
  }
  return result;
}

unsigned int *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(unsigned int *result, unsigned int *a2, uint64_t **a3)
{
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int *v8;

  if (result != a2)
  {
    v3 = result + 1;
    if (result + 1 != a2)
    {
      v4 = **a3;
      do
      {
        v6 = *result;
        v5 = result[1];
        result = v3;
        v7 = *(unsigned __int16 *)(v4 + 2 * v5);
        if (v7 < *(unsigned __int16 *)(v4 + 2 * v6))
        {
          v8 = result;
          do
          {
            *v8 = v6;
            v6 = *(v8 - 2);
            --v8;
          }
          while (v7 < *(unsigned __int16 *)(v4 + 2 * v6));
          *v8 = v5;
        }
        v3 = result + 1;
      }
      while (result + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(_DWORD *a1, _DWORD *a2, _DWORD *a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *a2;
  v5 = *a1;
  v6 = **a4;
  v7 = *(unsigned __int16 *)(v6 + 2 * v4);
  v8 = *(unsigned __int16 *)(v6 + 2 * v5);
  v9 = *a3;
  v10 = *(unsigned __int16 *)(v6 + 2 * v9);
  if (v7 < v8)
  {
    if (v10 < v7)
    {
      *a1 = v9;
      *a3 = v5;
      return 1;
    }
    *a1 = v4;
    *a2 = v5;
    v13 = *a3;
    if (*(unsigned __int16 *)(v6 + 2 * v13) >= v8)
      return 1;
    *a2 = v13;
    *a3 = v5;
    return 2;
  }
  if (v10 < v7)
  {
    *a2 = v9;
    *a3 = v4;
    v11 = *a2;
    v12 = *a1;
    if (*(unsigned __int16 *)(v6 + 2 * v11) >= *(unsigned __int16 *)(v6 + 2 * v12))
      return 1;
    *a1 = v11;
    *a2 = v12;
    return 2;
  }
  return 0;
}

unsigned int *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &>(unsigned int *a1, unsigned int *a2, uint64_t **a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;

  v3 = *a1;
  v4 = **a3;
  v5 = *(unsigned __int16 *)(v4 + 2 * v3);
  if (v5 >= *(unsigned __int16 *)(v4 + 2 * *(a2 - 1)))
  {
    v8 = a1 + 1;
    do
    {
      v6 = v8;
      if (v8 >= a2)
        break;
      ++v8;
    }
    while (v5 >= *(unsigned __int16 *)(v4 + 2 * *v6));
  }
  else
  {
    v6 = a1;
    do
    {
      v7 = v6[1];
      ++v6;
    }
    while (v5 >= *(unsigned __int16 *)(v4 + 2 * v7));
  }
  if (v6 < a2)
  {
    do
      v9 = *--a2;
    while (v5 < *(unsigned __int16 *)(v4 + 2 * v9));
  }
  if (v6 < a2)
  {
    v10 = *v6;
    v11 = *a2;
    do
    {
      *v6 = v11;
      *a2 = v10;
      do
      {
        v12 = v6[1];
        ++v6;
        v10 = v12;
      }
      while (v5 >= *(unsigned __int16 *)(v4 + 2 * v12));
      do
      {
        v13 = *--a2;
        v11 = v13;
      }
      while (v5 < *(unsigned __int16 *)(v4 + 2 * v13));
    }
    while (v6 < a2);
  }
  if (v6 - 1 != a1)
    *a1 = *(v6 - 1);
  *(v6 - 1) = v3;
  return v6;
}

unsigned int *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &>(unsigned int *a1, unsigned int *a2, uint64_t **a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;

  v3 = 0;
  v4 = *a1;
  v5 = **a3;
  v6 = *(unsigned __int16 *)(v5 + 2 * v4);
  do
    v7 = a1[++v3];
  while (*(unsigned __int16 *)(v5 + 2 * v7) < v6);
  v8 = &a1[v3];
  v9 = &a1[v3 - 1];
  if (v3 == 1)
  {
    do
    {
      if (v8 >= a2)
        break;
      v11 = *--a2;
    }
    while (*(unsigned __int16 *)(v5 + 2 * v11) >= v6);
  }
  else
  {
    do
      v10 = *--a2;
    while (*(unsigned __int16 *)(v5 + 2 * v10) >= v6);
  }
  if (v8 < a2)
  {
    v12 = *a2;
    v13 = v7;
    v14 = v8;
    v15 = a2;
    do
    {
      *v14 = v12;
      *v15 = v13;
      do
      {
        v16 = v14[1];
        ++v14;
        v13 = v16;
      }
      while (*(unsigned __int16 *)(v5 + 2 * v16) < v6);
      do
      {
        v17 = *--v15;
        v12 = v17;
      }
      while (*(unsigned __int16 *)(v5 + 2 * v17) >= v6);
    }
    while (v14 < v15);
    v9 = v14 - 1;
  }
  if (v9 != a1)
    *a1 = *v9;
  *v9 = v4;
  return v9;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(unsigned int *a1, unsigned int *a2, uint64_t **a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      if (*(unsigned __int16 *)(**a3 + 2 * v8) < *(unsigned __int16 *)(**a3 + 2 * v9))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(a1, a1 + 1, a1 + 2, a3);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = **a3;
      v14 = 12;
      break;
  }
  while (1)
  {
    v15 = *v11;
    v16 = *v10;
    v17 = *(unsigned __int16 *)(v13 + 2 * v15);
    if (v17 < *(unsigned __int16 *)(v13 + 2 * v16))
    {
      v18 = v14;
      while (1)
      {
        *(unsigned int *)((char *)a1 + v18) = v16;
        v19 = v18 - 4;
        if (v18 == 4)
          break;
        v16 = *(unsigned int *)((char *)a1 + v18 - 8);
        v18 -= 4;
        if (v17 >= *(unsigned __int16 *)(v13 + 2 * v16))
        {
          v20 = (unsigned int *)((char *)a1 + v19);
          goto LABEL_12;
        }
      }
      v20 = a1;
LABEL_12:
      *v20 = v15;
      if (++v12 == 8)
        return v11 + 1 == a2;
    }
    v10 = v11;
    v14 += 4;
    if (++v11 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(_DWORD *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, uint64_t **a5)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(a1, a2, a3, a5);
  v11 = *a4;
  v12 = *a3;
  v13 = **a5;
  if (*(unsigned __int16 *)(v13 + 2 * v11) < *(unsigned __int16 *)(v13 + 2 * v12))
  {
    *a3 = v11;
    *a4 = v12;
    v14 = *a3;
    v15 = *a2;
    if (*(unsigned __int16 *)(v13 + 2 * v14) < *(unsigned __int16 *)(v13 + 2 * v15))
    {
      *a2 = v14;
      *a3 = v15;
      v16 = *a2;
      v17 = *a1;
      if (*(unsigned __int16 *)(v13 + 2 * v16) < *(unsigned __int16 *)(v13 + 2 * v17))
      {
        *a1 = v16;
        *a2 = v17;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(_DWORD *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, uint64_t **a6)
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(a1, a2, a3, a4, a6);
  v13 = *a5;
  v14 = *a4;
  v15 = **a6;
  if (*(unsigned __int16 *)(v15 + 2 * v13) < *(unsigned __int16 *)(v15 + 2 * v14))
  {
    *a4 = v13;
    *a5 = v14;
    v16 = *a4;
    v17 = *a3;
    if (*(unsigned __int16 *)(v15 + 2 * v16) < *(unsigned __int16 *)(v15 + 2 * v17))
    {
      *a3 = v16;
      *a4 = v17;
      v18 = *a3;
      v19 = *a2;
      if (*(unsigned __int16 *)(v15 + 2 * v18) < *(unsigned __int16 *)(v15 + 2 * v19))
      {
        *a2 = v18;
        *a3 = v19;
        v20 = *a2;
        v21 = *a1;
        if (*(unsigned __int16 *)(v15 + 2 * v20) < *(unsigned __int16 *)(v15 + 2 * v21))
        {
          *a1 = v20;
          *a2 = v21;
        }
      }
    }
  }
  return result;
}

unsigned int *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *,unsigned int *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, uint64_t **a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;

  if (a1 != a2)
  {
    v8 = (char *)a2 - (char *)a1;
    v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 5)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        v15 = *v14;
        v16 = *a1;
        if (*(unsigned __int16 *)(**a4 + 2 * v15) < *(unsigned __int16 *)(**a4 + 2 * v16))
        {
          *v14 = v16;
          *a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 5)
    {
      v17 = (unint64_t)v8 >> 2;
      v18 = a2 - 1;
      do
      {
        v19 = *a1;
        v20 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(a1, a4, v17);
        if (v18 == v20)
        {
          *v20 = v19;
        }
        else
        {
          *v20 = *v18;
          *v18 = v19;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>((uint64_t)a1, (uint64_t)(v20 + 1), a4, v20 + 1 - a1);
        }
        --v18;
      }
      while (v17-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(uint64_t result, uint64_t **a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  _DWORD *v14;
  uint64_t v15;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 2)
    {
      v6 = v4 >> 1;
      v7 = (v4 >> 1) + 1;
      v8 = (unsigned int *)(result + 4 * v7);
      v9 = v6 + 2;
      v10 = *v8;
      if (v6 + 2 >= a3)
      {
        v11 = **a2;
      }
      else
      {
        v11 = **a2;
        if (*(unsigned __int16 *)(v11 + 2 * v10) < *(unsigned __int16 *)(v11 + 2 * v8[1]))
        {
          LODWORD(v10) = v8[1];
          ++v8;
          v7 = v9;
        }
      }
      v12 = *a4;
      v13 = *(unsigned __int16 *)(v11 + 2 * v12);
      if (*(unsigned __int16 *)(v11 + 2 * v10) >= v13)
      {
        do
        {
          v14 = v8;
          *a4 = v10;
          if (v5 < v7)
            break;
          v15 = (2 * v7) | 1;
          v8 = (unsigned int *)(result + 4 * v15);
          v7 = 2 * v7 + 2;
          v10 = *v8;
          if (v7 >= a3)
          {
            v7 = v15;
          }
          else if (*(unsigned __int16 *)(v11 + 2 * v10) >= *(unsigned __int16 *)(v11 + 2 * v8[1]))
          {
            v7 = v15;
          }
          else
          {
            LODWORD(v10) = v8[1];
            ++v8;
          }
          a4 = v14;
        }
        while (*(unsigned __int16 *)(v11 + 2 * v10) >= v13);
        *v14 = v12;
      }
    }
  }
  return result;
}

_DWORD *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(_DWORD *a1, _QWORD **a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  v3 = 0;
  v4 = a3 - 2;
  if (a3 < 2)
    v4 = a3 - 1;
  v5 = v4 >> 1;
  v6 = *a2;
  do
  {
    v7 = &a1[v3];
    v10 = v7[1];
    v8 = v7 + 1;
    v9 = v10;
    v11 = (2 * v3) | 1;
    v3 = 2 * v3 + 2;
    if (v3 >= a3)
    {
      v3 = v11;
    }
    else if (*(unsigned __int16 *)(*v6 + 2 * v9) >= *(unsigned __int16 *)(*v6 + 2 * v8[1]))
    {
      v3 = v11;
    }
    else
    {
      LODWORD(v9) = v8[1];
      ++v8;
    }
    *a1 = v9;
    a1 = v8;
  }
  while (v3 <= v5);
  return v8;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(uint64_t result, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  unint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int *v12;

  if (a4 >= 2)
  {
    v4 = (unint64_t)(a4 - 2) >> 1;
    v5 = (unsigned int *)(result + 4 * v4);
    v6 = *v5;
    v9 = *(_DWORD *)(a2 - 4);
    v7 = (unsigned int *)(a2 - 4);
    v8 = v9;
    v10 = **a3;
    v11 = *(unsigned __int16 *)(v10 + 2 * v9);
    if (*(unsigned __int16 *)(v10 + 2 * v6) < v11)
    {
      do
      {
        v12 = v5;
        *v7 = v6;
        if (!v4)
          break;
        v4 = (v4 - 1) >> 1;
        v5 = (unsigned int *)(result + 4 * v4);
        v6 = *v5;
        v7 = v12;
      }
      while (*(unsigned __int16 *)(v10 + 2 * v6) < v11);
      *v12 = v8;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned int *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(unsigned int *a1, unsigned int *a2, uint64_t **a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      if (*(unsigned __int16 *)(**a3 + 2 * v8) < *(unsigned __int16 *)(**a3 + 2 * v9))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(a1, a1 + 1, a1 + 2, a3);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = **a3;
      v14 = 12;
      break;
  }
  while (1)
  {
    v15 = *v11;
    v16 = *v10;
    v17 = *(unsigned __int16 *)(v13 + 2 * v15);
    if (v17 < *(unsigned __int16 *)(v13 + 2 * v16))
    {
      v18 = v14;
      while (1)
      {
        *(unsigned int *)((char *)a1 + v18) = v16;
        v19 = v18 - 4;
        if (v18 == 4)
          break;
        v16 = *(unsigned int *)((char *)a1 + v18 - 8);
        v18 -= 4;
        if (v17 >= *(unsigned __int16 *)(v13 + 2 * v16))
        {
          v20 = (unsigned int *)((char *)a1 + v19);
          goto LABEL_12;
        }
      }
      v20 = a1;
LABEL_12:
      *v20 = v15;
      if (++v12 == 8)
        return v11 + 1 == a2;
    }
    v10 = v11;
    v14 += 4;
    if (++v11 == a2)
      return 1;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned long long *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(unsigned int *a1, unsigned int *a2, uint64_t **a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      if (*(unsigned __int16 *)(**a3 + 2 * v8) < *(unsigned __int16 *)(**a3 + 2 * v9))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(a1, a1 + 1, a1 + 2, a3);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = **a3;
      v14 = 12;
      break;
  }
  while (1)
  {
    v15 = *v11;
    v16 = *v10;
    v17 = *(unsigned __int16 *)(v13 + 2 * v15);
    if (v17 < *(unsigned __int16 *)(v13 + 2 * v16))
    {
      v18 = v14;
      while (1)
      {
        *(unsigned int *)((char *)a1 + v18) = v16;
        v19 = v18 - 4;
        if (v18 == 4)
          break;
        v16 = *(unsigned int *)((char *)a1 + v18 - 8);
        v18 -= 4;
        if (v17 >= *(unsigned __int16 *)(v13 + 2 * v16))
        {
          v20 = (unsigned int *)((char *)a1 + v19);
          goto LABEL_12;
        }
      }
      v20 = a1;
LABEL_12:
      *v20 = v15;
      if (++v12 == 8)
        return v11 + 1 == a2;
    }
    v10 = v11;
    v14 += 4;
    if (++v11 == a2)
      return 1;
  }
}

void geo::intern_linear_map<gss::PropertyID,gss::StylePropertySetInternObject,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(uint64_t a1, _WORD *__dst, _OWORD *a3, int a4)
{
  std::vector<unsigned int>::size_type v5;
  std::vector<unsigned int>::pointer begin;
  unsigned int *end;
  unsigned int v10;
  std::vector<unsigned int>::pointer v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::vector<unsigned int> __p;
  uint64_t *v19;

  v5 = *(unsigned __int16 *)(a1 + 10);
  if (*(_WORD *)(a1 + 10))
  {
    if (a4)
    {
      std::vector<unsigned int>::vector(&__p, v5);
      begin = __p.__begin_;
      end = __p.__end_;
      if (__p.__begin_ != __p.__end_)
      {
        v10 = 0;
        v11 = __p.__begin_;
        do
          *v11++ = v10++;
        while (v11 != end);
      }
      v12 = 126 - 2 * __clz(end - begin);
      v19 = (uint64_t *)a1;
      if (end == begin)
        v13 = 0;
      else
        v13 = v12;
      std::__introsort<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,gss::StylePropertySetInternObject,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,gss::StylePropertySetInternObject*,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *,false>((uint64_t)begin, end, &v19, v13, 1);
      v14 = __p.__begin_;
      if (*(_WORD *)(a1 + 10))
      {
        v15 = 0;
        do
        {
          v16 = v14[v15];
          v17 = *(_QWORD *)a1;
          __dst[v15] = *(_WORD *)(*(_QWORD *)a1 + 2 * v16);
          *a3++ = *(_OWORD *)(v17 + *(unsigned __int16 *)(a1 + 8) + 16 * v16);
          ++v15;
        }
        while (v15 < *(unsigned __int16 *)(a1 + 10));
        *(_BYTE *)(a1 + 15) = 1;
      }
      else
      {
        *(_BYTE *)(a1 + 15) = 1;
        if (!v14)
          return;
      }
      __p.__end_ = v14;
      operator delete(v14);
    }
    else
    {
      memmove(__dst, *(const void **)a1, 2 * v5);
      if (*(_WORD *)(a1 + 10))
        memmove(a3, (const void *)(*(_QWORD *)a1 + *(unsigned __int16 *)(a1 + 8)), 16 * *(unsigned __int16 *)(a1 + 10));
    }
  }
}

void sub_19FF5DF50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,gss::StylePropertySetInternObject,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,gss::StylePropertySetInternObject*,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(unsigned int *a1, unsigned int *a2, uint64_t **a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      if (*(unsigned __int16 *)(**a3 + 2 * v8) < *(unsigned __int16 *)(**a3 + 2 * v9))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(a1, a1 + 1, a1 + 2, a3);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = **a3;
      v14 = 12;
      break;
  }
  while (1)
  {
    v15 = *v11;
    v16 = *v10;
    v17 = *(unsigned __int16 *)(v13 + 2 * v15);
    if (v17 < *(unsigned __int16 *)(v13 + 2 * v16))
    {
      v18 = v14;
      while (1)
      {
        *(unsigned int *)((char *)a1 + v18) = v16;
        v19 = v18 - 4;
        if (v18 == 4)
          break;
        v16 = *(unsigned int *)((char *)a1 + v18 - 8);
        v18 -= 4;
        if (v17 >= *(unsigned __int16 *)(v13 + 2 * v16))
        {
          v20 = (unsigned int *)((char *)a1 + v19);
          goto LABEL_12;
        }
      }
      v20 = a1;
LABEL_12:
      *v20 = v15;
      if (++v12 == 8)
        return v11 + 1 == a2;
    }
    v10 = v11;
    v14 += 4;
    if (++v11 == a2)
      return 1;
  }
}

void std::__shared_ptr_emplace<std::vector<gss::DashPattern,geo::StdAllocator<gss::DashPattern,gss::Allocator>>,geo::StdAllocator<gss::DashPattern,gss::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E6728;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<gss::DashPattern,geo::StdAllocator<gss::DashPattern,gss::Allocator>>,geo::StdAllocator<gss::DashPattern,gss::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E6728;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<std::vector<gss::DashPattern,geo::StdAllocator<gss::DashPattern,gss::Allocator>>,geo::StdAllocator<gss::DashPattern,gss::Allocator>>::__on_zero_shared(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;

  v1 = *(uint64_t **)(result + 32);
  if (v1)
  {
    v2 = result;
    v3 = *(uint64_t **)(result + 40);
    v4 = *(_QWORD *)(result + 32);
    if (v3 != v1)
    {
      do
      {
        v3 -= 5;
        v5 = v3;
        std::vector<float,geo::StdAllocator<float,gss::Allocator>>::__destroy_vector::operator()[abi:ne180100](&v5);
      }
      while (v3 != v1);
      v4 = *(_QWORD *)(v2 + 32);
    }
    *(_QWORD *)(v2 + 40) = v1;
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v2 + 56) + 40))(*(_QWORD *)(v2 + 56), v4, *(_QWORD *)(v2 + 48) - v4);
  }
  return result;
}

uint64_t std::__shared_ptr_emplace<std::vector<gss::DashPattern,geo::StdAllocator<gss::DashPattern,gss::Allocator>>,geo::StdAllocator<gss::DashPattern,gss::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a1, 64);
}

void std::__shared_ptr_emplace<std::vector<std::string,geo::StdAllocator<std::string,gss::Allocator>>,geo::StdAllocator<std::string,gss::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E6798;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<std::string,geo::StdAllocator<std::string,gss::Allocator>>,geo::StdAllocator<std::string,gss::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E6798;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<std::vector<std::string,geo::StdAllocator<std::string,gss::Allocator>>,geo::StdAllocator<std::string,gss::Allocator>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(result + 32);
  if (v1)
  {
    v2 = result;
    v3 = *(_QWORD *)(result + 40);
    v4 = *(_QWORD *)(result + 32);
    if (v3 != v1)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v1);
      v4 = *(_QWORD *)(v2 + 32);
    }
    *(_QWORD *)(v2 + 40) = v1;
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v2 + 56) + 40))(*(_QWORD *)(v2 + 56), v4, *(_QWORD *)(v2 + 48) - v4);
  }
  return result;
}

uint64_t std::__shared_ptr_emplace<std::vector<std::string,geo::StdAllocator<std::string,gss::Allocator>>,geo::StdAllocator<std::string,gss::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a1, 64);
}

const char *gss::to_string(int a1)
{
  const char *result;

  result = "None";
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      result = "LineType";
      break;
    case 2:
      result = "BorderType";
      break;
    case 3:
      result = "AoiType";
      break;
    case 4:
      result = "Country";
      break;
    case 5:
      result = "FeatureType";
      break;
    case 6:
      result = "PoiType";
      break;
    case 7:
      result = "LandcoverType";
      break;
    case 8:
      result = "MinzoomRank";
      break;
    case 9:
    case 13:
    case 15:
    case 48:
    case 96:
    case 97:
    case 98:
    case 99:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 152:
LABEL_157:
      result = "Unknown";
      break;
    case 10:
      result = "Significance";
      break;
    case 11:
      result = "FerryType";
      break;
    case 12:
      result = "RailwayType";
      break;
    case 14:
      result = "BrunnelType";
      break;
    case 16:
      result = "PoiIconType";
      break;
    case 17:
      result = "DetailedLandcoverType";
      break;
    case 18:
      result = "NetworkClass";
      break;
    case 19:
      result = "RoofType";
      break;
    case 20:
      result = "LabelType";
      break;
    case 21:
      result = "RampType";
      break;
    case 22:
      result = "DisputedType";
      break;
    case 23:
      result = "RuralUrbanType";
      break;
    case 24:
      result = "DrivingSide";
      break;
    case 25:
      result = "WalkableType";
      break;
    case 26:
      result = "DrivableType";
      break;
    case 27:
      result = "DataSource";
      break;
    case 28:
      result = "BackgroundType";
      break;
    case 29:
      result = "PoiCompany";
      break;
    case 30:
      result = "TransitAgency";
      break;
    case 31:
      result = "RoadHierarchyClass";
      break;
    case 32:
      result = "TollType";
      break;
    case 33:
      result = "RampDirection";
      break;
    case 34:
      result = "ParentChildRelationship";
      break;
    case 35:
      result = "StrokeType";
      break;
    case 36:
      result = "RoadSurface";
      break;
    case 37:
      result = "TransitType";
      break;
    case 38:
      result = "VenueCategory";
      break;
    case 39:
      result = "VenueCategoryDetailed";
      break;
    case 40:
      result = "DebugShape";
      break;
    case 41:
      result = "LocalNorthRegion";
      break;
    case 42:
      result = "TransitNodeType";
      break;
    case 43:
      result = "Status";
      break;
    case 44:
      result = "RouteSignificance";
      break;
    case 45:
      result = "AccessPointType";
      break;
    case 46:
      result = "Polity";
      break;
    case 47:
      result = "PoiLandmark";
      break;
    case 49:
      result = "TransitSystemType";
      break;
    case 50:
      result = "TransitLineType";
      break;
    case 51:
      result = "TransitNodeId";
      break;
    case 52:
      result = "BrowseCategory";
      break;
    case 53:
      result = "TransitDisplayGroup";
      break;
    case 54:
      result = "TransitSystemSignificance";
      break;
    case 55:
      result = "CategoryType";
      break;
    case 56:
      result = "PolygonEdgeType";
      break;
    case 57:
      result = "TransitLineLabelConstraint";
      break;
    case 58:
      result = "TransitNodeLabelAnnotationConstraint";
      break;
    case 59:
      result = "TransitTransferStation";
      break;
    case 60:
      result = "AoiZoomRange";
      break;
    case 61:
      result = "RoadAccessType";
      break;
    case 62:
      result = "TransitAccessPointAccessType";
      break;
    case 63:
      result = "TransitAccessPointHasCuratedName";
      break;
    case 64:
      result = "VenueNodeType";
      break;
    case 65:
      result = "VenueType";
      break;
    case 66:
      result = "DisplaySection";
      break;
    case 67:
      result = "VenueGoInside";
      break;
    case 68:
      result = "LineInTransitData";
      break;
    case 69:
      result = "VenueLevelType";
      break;
    case 70:
      result = "CulDeSac";
      break;
    case 71:
      result = "Landcover";
      break;
    case 72:
      result = "AoiBoundary";
      break;
    case 73:
      result = "SbsmOverride";
      break;
    case 74:
      result = "MuninCoverage";
      break;
    case 75:
      result = "RoadSegmentRoadwayIsPedestrianNavigable";
      break;
    case 76:
      result = "RoadSegmentSideSidewalk";
      break;
    case 77:
      result = "RoadSegmentSideWalkable";
      break;
    case 78:
      result = "HasAssociation";
      break;
    case 79:
      result = "PointFeatureType";
      break;
    case 80:
      result = "TransportPolygonType";
      break;
    case 81:
      result = "CartographicMarkingType";
      break;
    case 82:
      result = "PoiClass";
      break;
    case 83:
      result = "SummaryType";
      break;
    case 84:
      result = "PoiContent";
      break;
    case 85:
      result = "LabelMinZoom";
      break;
    case 86:
      result = "RoadSegmentSideBikeable";
      break;
    case 87:
      result = "HasBikeLane";
      break;
    case 88:
      result = "TollProhibitedAreaPersistence";
      break;
    case 89:
      result = "Relevance";
      break;
    case 90:
      result = "RouteAnnotationType";
      break;
    case 91:
      result = "SpecialRoadSegmentType";
      break;
    case 92:
      result = "PhysicalFeature";
      break;
    case 93:
      result = "Currency";
      break;
    case 94:
      result = "Seasonality";
      break;
    case 95:
      result = "TransitSystemEnabled";
      break;
    case 100:
      result = "MeshType";
      break;
    case 101:
      result = "MarkingColor";
      break;
    case 102:
      result = "LaneMarkingType";
      break;
    case 103:
      result = "LaneMarkingStyle";
      break;
    case 104:
      result = "SurfaceMarkingType";
      break;
    case 105:
      result = "VegetationType";
      break;
    case 106:
      result = "VegetationTreePart";
      break;
    case 107:
      result = "RoadSurfaceClass";
      break;
    case 108:
      result = "TrafficSignType";
      break;
    case 109:
      result = "TrafficDevicePart";
      break;
    case 110:
      result = "PavementPatternStyle";
      break;
    case 150:
      result = "DebugOnly";
      break;
    case 151:
      result = "IsLuxoRegion";
      break;
    case 153:
      result = "ClimateTemperature";
      break;
    case 154:
      result = "ClimatePrecipitation";
      break;
    case 155:
      result = "FeatureRank";
      break;
    case 156:
      result = "HasDisplayElevationAnnotation";
      break;
    case 157:
      result = "LabelAnnotationType";
      break;
    case 158:
      result = "BuiltUpAreaType";
      break;
    case 159:
      result = "RelationshipToStructure";
      break;
    case 160:
      result = "ConsolidationType";
      break;
    case 161:
      result = "GeographicLineType";
      break;
    case 162:
      result = "ZoomPromotion";
      break;
    case 163:
      result = "TransitLineSignificance";
      break;
    case 164:
      result = "InMiniPoiMarket";
      break;
    case 165:
      result = "IslandType";
      break;
    case 166:
      result = "LabelModifier";
      break;
    case 167:
      result = "WaterDisplayType";
      break;
    case 168:
      result = "SubterraneanWater";
      break;
    case 169:
      result = "TransitNodeStationLmz";
      break;
    case 170:
      result = "SuppressInSpr";
      break;
    case 171:
      result = "IndoorVisibility";
      break;
    case 172:
      result = "IndigenousLandType";
      break;
    case 173:
      result = "IndigenousLandRecognition";
      break;
    case 174:
      result = "TerminalTransitNode";
      break;
    case 175:
      result = "HillShading";
      break;
    case 176:
      result = "TintBand";
      break;
    case 177:
      result = "ContourLine";
      break;
    case 178:
      result = "FormOfWay";
      break;
    case 179:
      result = "HillShadingGradual";
      break;
    case 180:
      result = "InHikingRegion";
      break;
    case 181:
      result = "MaskingType";
      break;
    case 182:
      result = "FeatureMinZoom";
      break;
    case 183:
      result = "FeatureMaxZoom";
      break;
    case 184:
      result = "InKittyhawkRegion";
      break;
    case 185:
      result = "HikingConveyance";
      break;
    case 186:
      result = "SuppressInHiking";
      break;
    case 187:
      result = "MasksFeatureType";
      break;
    case 188:
      result = "DisplayClass";
      break;
    case 189:
      result = "HasSupplementalData";
      break;
    case 190:
      result = "ContourLineType";
      break;
    case 191:
      result = "TravelDirectionType";
      break;
    case 192:
      result = "TemporalEvent";
      break;
    case 193:
      result = "PoiTierType";
      break;
    default:
      switch(a1)
      {
        case 65536:
          result = "MapMode";
          break;
        case 65537:
          result = "TimePeriod";
          break;
        case 65538:
          result = "SelectionState";
          break;
        case 65539:
          result = "AnnotationType";
          break;
        case 65540:
          result = "IconTappable";
          break;
        case 65541:
          result = "TargetDisplay";
          break;
        case 65542:
          result = "LanguageLocale";
          break;
        case 65543:
          result = "RouteProximity";
          break;
        case 65544:
          result = "TrafficIncidentType";
          break;
        case 65545:
          result = "When";
          break;
        case 65549:
          result = "OverlayType";
          break;
        case 65550:
          result = "ApplicationState";
          break;
        case 65552:
          result = "TransportType";
          break;
        case 65553:
          result = "FlyoverPlace";
          break;
        case 65554:
          result = "TransitOperationalState";
          break;
        case 65555:
          result = "TransitRoutesMerged";
          break;
        case 65556:
          result = "RouteSegmentWhen";
          break;
        case 65557:
          result = "TransitLineMergeType";
          break;
        case 65558:
          result = "TransitNodeImageType";
          break;
        case 65559:
          result = "ViewProximity";
          break;
        case 65560:
          result = "ViewportMinSize";
          break;
        case 65561:
          result = "VehicleIsParked";
          break;
        case 65562:
          result = "TransitLinkVisibleLineCount";
          break;
        case 65563:
          result = "TransitLineMultipleSystems";
          break;
        case 65564:
          result = "TransitLineMultipleLines";
          break;
        case 65565:
          result = "NavigationState";
          break;
        case 65566:
          result = "DistanceToCurrentManeuver";
          break;
        case 65567:
          result = "CustomFeatureType";
          break;
        case 65568:
          result = "Favorite";
          break;
        case 65569:
          result = "Event";
          break;
        case 65570:
          result = "SearchResult";
          break;
        case 65571:
          result = "RouteFeatureType";
          break;
        case 65572:
          result = "CustomFeature";
          break;
        case 65573:
          result = "PickingState";
          break;
        case 65574:
          result = "CurrentManeuverType";
          break;
        case 65575:
          result = "NextStepLength";
          break;
        case 65576:
          result = "CurrentIncidentType";
          break;
        case 65577:
          result = "CurrentManeuverComplexity";
          break;
        case 65578:
          result = "CurrentGroupedManeuverCount";
          break;
        case 65579:
          result = "TransitNodeVisibleLineCount";
          break;
        case 65580:
          result = "EventType";
          break;
        case 65581:
          result = "Cluster";
          break;
        case 65582:
          result = "ClusterHasMultipleCategories";
          break;
        case 65583:
          result = "ClusterIsOpen";
          break;
        case 65584:
          result = "OpenClusterElement";
          break;
        case 65585:
          result = "SearchAlongTheRoute";
          break;
        case 65586:
          result = "VehicleSpeed";
          break;
        case 65587:
          result = "SearchResultsType";
          break;
        case 65588:
          result = "CameraMode";
          break;
        case 65589:
          result = "NavLabelType";
          break;
        case 65590:
          result = "MapZoomLevel";
          break;
        case 65591:
          result = "TransitLinkMultipleSystems";
          break;
        case 65592:
          result = "NavCameraDetached";
          break;
        case 65593:
          result = "RoadSpeed";
          break;
        case 65594:
          result = "Occluded";
          break;
        case 65595:
          result = "NextManeuverRampType";
          break;
        case 65596:
          result = "MapHasLabels";
          break;
        case 65597:
          result = "ApplicationUILayout";
          break;
        case 65598:
          result = "CurrentStepLength";
          break;
        case 65599:
          result = "CategoryIconPresentation";
          break;
        case 65600:
          result = "NavigationDestination";
          break;
        case 65601:
          result = "VenueFeature";
          break;
        case 65602:
          result = "TrafficCameraType";
          break;
        case 65603:
          result = "DraggingState";
          break;
        case 65604:
          result = "VenueFeatureState";
          break;
        case 65605:
          result = "Emphasis";
          break;
        case 65606:
          result = "JetpackMode";
          break;
        case 65607:
          result = "EtaComparison";
          break;
        case 65608:
          result = "VenuesEnabled";
          break;
        case 65609:
          result = "VenuesFloorSwitcherActive";
          break;
        case 65610:
          result = "TransitNodeImageTypeDark";
          break;
        case 65611:
          result = "SettingsCategory";
          break;
        case 65612:
          result = "LabelComponent";
          break;
        case 65613:
          result = "FocusState";
          break;
        case 65614:
          result = "TrafficSignalType";
          break;
        case 65615:
          result = "RoadSignType";
          break;
        case 65616:
          result = "CollectionsType";
          break;
        case 65617:
          result = "GroundMode";
          break;
        case 65618:
          result = "EtaAdvisoryType";
          break;
        case 65619:
          result = "RouteTransportType";
          break;
        case 65620:
          result = "RouteLegWhen";
          break;
        case 65621:
          result = "RoadComplexity";
          break;
        case 65622:
          result = "PreviouslySelected";
          break;
        case 65623:
          result = "AlternateStyle";
          break;
        case 65624:
          result = "FlexPoint";
          break;
        case 65625:
          result = "FlexSelectionZone";
          break;
        case 65626:
          result = "Tier";
          break;
        case 65627:
          result = "IncidentDataSource";
          break;
        case 65628:
          result = "ClusterSize";
          break;
        case 65629:
          result = "DistanceToCurrentTrafficSection";
          break;
        case 65630:
          result = "CurrentTrafficState";
          break;
        case 65631:
          result = "Draped";
          break;
        case 65632:
          result = "ArLabelType";
          break;
        case 65633:
          result = "NextRoadComplexity";
          break;
        case 65634:
          result = "TransitCurrentManeuverType";
          break;
        case 65635:
          result = "RouteSinuosity";
          break;
        case 65636:
          result = "WindshieldMode";
          break;
        case 65637:
          result = "BifurcationType";
          break;
        case 65638:
          result = "Bridge";
          break;
        case 65639:
          result = "Tunnel";
          break;
        case 65640:
          result = "UrbanCanyon";
          break;
        case 65641:
          result = "ComplexOverpass";
          break;
        case 65642:
          result = "ComplexIntersection";
          break;
        case 65643:
          result = "LaneCount";
          break;
        case 65644:
          result = "TrafficCameraMode";
          break;
        case 65645:
          result = "ArLabelLayoutType";
          break;
        case 65646:
          result = "ArArrivalType";
          break;
        case 65647:
          result = "IsCovered";
          break;
        case 65648:
          result = "CameraPitch";
          break;
        case 65649:
          result = "Usage";
          break;
        case 65650:
          result = "MapkitUsage";
          break;
        case 65651:
          result = "PoiFiltering";
          break;
        case 65652:
          result = "NavCameraTransitionComplete";
          break;
        case 65653:
          result = "MapkitIconUsage";
          break;
        case 65654:
          result = "ClientSymbol";
          break;
        case 65655:
          result = "CarDisplayType";
          break;
        case 65656:
          result = "CarDisplayConfig";
          break;
        case 65657:
          result = "ScreenFeatureType";
          break;
        case 65659:
          result = "HikingEnabled";
          break;
        case 65660:
          result = "HikingFeatureState";
          break;
        case 65661:
          result = "RtEvChargingAnnotationType";
          break;
        case 65662:
          result = "MapkitClientMode";
          break;
        case 65663:
          result = "PlatterFocus";
          break;
        case 65664:
          result = "OfflineRegionSelector";
          break;
        case 65666:
          result = "MapPurpose";
          break;
        case 65667:
          result = "OfflineMode";
          break;
        case 65668:
          result = "ApplicationSubState";
          break;
        case 65669:
          result = "RouteSource";
          break;
        case 65670:
          result = "RoutePointManeuverType";
          break;
        default:
          goto LABEL_157;
      }
      break;
  }
  return result;
}

{
  const char *v1;

  v1 = "Unknown";
  if (a1 == 1)
    v1 = "FacePerpendicular";
  if (a1)
    return v1;
  else
    return "FaceAligned";
}

{
  if ((a1 - 1) > 0x35)
    return "Unknown";
  else
    return off_1E42FCD18[(char)(a1 - 1)];
}

{
  if ((a1 - 1) > 0x17)
    return "Unknown";
  else
    return off_1E42FCF68[(char)(a1 - 1)];
}

{
  const char *v1;

  v1 = "Unknown";
  if (a1 == 1)
    v1 = "Wind";
  if (a1)
    return v1;
  else
    return "Standard";
}

{
  const char *v1;

  v1 = "Unknown";
  if (a1 == 1)
    v1 = "True";
  if (a1)
    return v1;
  else
    return "False";
}

{
  if ((a1 - 1) > 0xC)
    return "Unknown";
  else
    return off_1E42FDC08[(char)(a1 - 1)];
}

{
  if ((a1 - 1) > 0x41)
    return "Unknown";
  else
    return off_1E43018C8[(char)(a1 - 1)];
}

{
  if ((a1 - 1) > 0x28)
    return "Unknown";
  else
    return off_1E4301AD8[(char)(a1 - 1)];
}

{
  if ((a1 - 1) > 0x4D)
    return "Unknown";
  else
    return off_1E4301C20[(char)(a1 - 1)];
}

{
  if ((a1 - 1) > 0xE62)
    return "Unknown";
  else
    return off_1E430B598[(__int16)(a1 - 1)];
}

{
  const char *result;

  if (a1 <= 999)
  {
    if (a1 <= 299)
    {
      result = "LightRail";
      switch(a1)
      {
        case 0:
          return result;
        case 1:
          result = "Subway";
          break;
        case 2:
          result = "Rail";
          break;
        case 3:
          result = "Bus";
          break;
        case 4:
          result = "Ferry";
          break;
        case 5:
          result = "CableCar";
          break;
        case 6:
          result = "AerialTramway";
          break;
        case 7:
          result = "Funicular";
          break;
        case 8:
          result = "HighSpeedRail";
          break;
        case 9:
        case 10:
        case 11:
          return "Unknown";
        case 12:
          result = "Monorail";
          break;
        default:
          switch(a1)
          {
            case 200:
              result = "CoachService";
              break;
            case 201:
              result = "InternationalCoachService";
              break;
            case 202:
              result = "NationalCoachService";
              break;
            case 203:
              result = "ShuttleCoachService";
              break;
            case 204:
              result = "RegionalCoachService";
              break;
            case 205:
              result = "SpecialCoachService";
              break;
            case 206:
              result = "SightseeingCoachService";
              break;
            case 207:
              result = "TouristCoachService";
              break;
            case 208:
              result = "CommuterCoachService";
              break;
            case 209:
              result = "AllCoachServices";
              break;
            default:
              return "Unknown";
          }
          break;
      }
      return result;
    }
    if (a1 > 699)
    {
      switch(a1)
      {
        case 700:
          result = "BusService";
          break;
        case 701:
          result = "RegionalBusService";
          break;
        case 702:
          result = "ExpressBusService";
          break;
        case 703:
          result = "StoppingBusService";
          break;
        case 704:
          result = "LocalBusService";
          break;
        case 705:
          result = "NightBusService";
          break;
        case 706:
          result = "PostBusService";
          break;
        case 707:
          result = "SpecialNeedsBus";
          break;
        case 708:
          result = "MobilityBusService";
          break;
        case 709:
          result = "MobilityBusForRegisteredDisabled";
          break;
        case 710:
          result = "SightseeingBus";
          break;
        case 711:
          result = "ShuttleBus";
          break;
        case 712:
          result = "SchoolBus";
          break;
        case 713:
          result = "SchoolAndPublicServiceBus";
          break;
        case 714:
          result = "RailReplacementBusService";
          break;
        case 715:
          result = "DemandAndResponseBusService";
          break;
        case 716:
          result = "AllBusServices";
          break;
        default:
          switch(a1)
          {
            case 900:
              result = "TramService";
              break;
            case 901:
              result = "CityTramService";
              break;
            case 902:
              result = "LocalTramService";
              break;
            case 903:
              result = "RegionalTramService";
              break;
            case 904:
              result = "SightseeingTramService";
              break;
            case 905:
              result = "ShuttleTramService";
              break;
            case 906:
              result = "AllTramServices";
              break;
            default:
              if (a1 != 800)
                return "Unknown";
              result = "TrolleybusService";
              break;
          }
          break;
      }
      return result;
    }
    if (a1 <= 499)
    {
      switch(a1)
      {
        case 400:
          result = "UrbanRailwayService";
          break;
        case 401:
          result = "MetroService";
          break;
        case 402:
          result = "UndergroundService";
          break;
        case 403:
          result = "UrbanRailwayServiceMinor";
          break;
        case 404:
          result = "AllUrbanRailwayServices";
          break;
        case 405:
          result = "MonorailService";
          break;
        default:
          if (a1 != 300)
            return "Unknown";
          result = "SuburbanRailwayService";
          break;
      }
      return result;
    }
    if (a1 == 500)
      return "MetroServiceMajor";
    if (a1 == 600)
      return "UndergroundServiceMajor";
    return "Unknown";
  }
  if (a1 > 1299)
  {
    if (a1 <= 1499)
    {
      if (a1 > 1399)
      {
        switch(a1)
        {
          case 1400:
            return "FunicularService";
          case 1401:
            return "FunicularServiceMinor";
          case 1402:
            return "AllFunicularService";
        }
        return "Unknown";
      }
      switch(a1)
      {
        case 1300:
          result = "TelecabinService";
          break;
        case 1301:
          result = "TelecabinServiceMinor";
          break;
        case 1302:
          result = "CableCarService";
          break;
        case 1303:
          result = "ElevatorService";
          break;
        case 1304:
          result = "ChairLiftService";
          break;
        case 1305:
          result = "DragLiftService";
          break;
        case 1306:
          result = "SmallTelecabinService";
          break;
        case 1307:
          result = "AllTelecabinServices";
          break;
        default:
          return "Unknown";
      }
    }
    else if (a1 > 1599)
    {
      if (a1 > 1699)
      {
        switch(a1)
        {
          case 1700:
            return "MiscellaneousService";
          case 1701:
            return "HorseDrawnCarriage";
          case 1800:
            return "BRTService";
        }
        return "Unknown";
      }
      switch(a1)
      {
        case 1600:
          result = "SelfDrive";
          break;
        case 1601:
          result = "HireCar";
          break;
        case 1602:
          result = "HireVan";
          break;
        case 1603:
          result = "HireMotorbike";
          break;
        case 1604:
          result = "HireCycle";
          break;
        default:
          return "Unknown";
      }
    }
    else
    {
      switch(a1)
      {
        case 1500:
          result = "TaxiService";
          break;
        case 1501:
          result = "CommunalTaxiService";
          break;
        case 1502:
          result = "WaterTaxiService";
          break;
        case 1503:
          result = "RailTaxiService";
          break;
        case 1504:
          result = "BikeTaxiService";
          break;
        case 1505:
          result = "LicensedTaxiService";
          break;
        case 1506:
          result = "PrivateHireServiceVehicle";
          break;
        case 1507:
          result = "AllTaxiServices";
          break;
        default:
          return "Unknown";
      }
    }
  }
  else
  {
    switch(a1)
    {
      case 1000:
        result = "WaterTransportService";
        break;
      case 1001:
        result = "InternationalCarFerryService";
        break;
      case 1002:
        result = "NationalCarFerryService";
        break;
      case 1003:
        result = "RegionalCarFerryService";
        break;
      case 1004:
        result = "LocalCarFerryService";
        break;
      case 1005:
        result = "InternationalPassengerFerryService";
        break;
      case 1006:
        result = "NationalPassengerFerryService";
        break;
      case 1007:
        result = "RegionalPassengerFerryService";
        break;
      case 1008:
        result = "LocalPassengerFerryService";
        break;
      case 1009:
        result = "PostBoatService";
        break;
      case 1010:
        result = "TrainFerryService";
        break;
      case 1011:
        result = "RoadLinkFerryService";
        break;
      case 1012:
        result = "AirportLinkFerryService";
        break;
      case 1013:
        result = "CarHighSpeedFerryService";
        break;
      case 1014:
        result = "PassengerHighSpeedFerryService";
        break;
      case 1015:
        result = "SightseeingBoatService";
        break;
      case 1016:
        result = "SchoolBoat";
        break;
      case 1017:
        result = "CableDrawnBoatService";
        break;
      case 1018:
        result = "RiverBusService";
        break;
      case 1019:
        result = "ScheduledFerryService";
        break;
      case 1020:
        result = "ShuttleFerryService";
        break;
      case 1021:
        result = "AllWaterTransportServices";
        break;
      default:
        switch(a1)
        {
          case 1100:
            result = "AirService";
            break;
          case 1101:
            result = "InternationalAirService";
            break;
          case 1102:
            result = "DomesticAirService";
            break;
          case 1103:
            result = "IntercontinentalAirService";
            break;
          case 1104:
            result = "DomesticScheduledAirService";
            break;
          case 1105:
            result = "ShuttleAirService";
            break;
          case 1106:
            result = "IntercontinentalCharterAirService";
            break;
          case 1107:
            result = "InternationalCharterAirService";
            break;
          case 1108:
            result = "RoundTripCharterAirService";
            break;
          case 1109:
            result = "SightseeingAirService";
            break;
          case 1110:
            result = "HelicopterAirService";
            break;
          case 1111:
            result = "DomesticCharterAirService";
            break;
          case 1112:
            result = "SchengenAreaAirService";
            break;
          case 1113:
            result = "AirshipService";
            break;
          case 1114:
            result = "AllAirServices";
            break;
          default:
            if (a1 != 1200)
              return "Unknown";
            result = "FerryService";
            break;
        }
        break;
    }
  }
  return result;
}

const char *gss::to_string(unsigned int a1)
{
  if (a1 > 0xB)
    return "Unknown";
  else
    return off_1E42FB390[(char)a1];
}

{
  if (a1 > 0x76)
    return "Unknown";
  else
    return off_1E42FB3F0[(char)a1];
}

{
  if (a1 > 2)
    return "Unknown";
  else
    return off_1E43135D0[(char)a1];
}

{
  if (a1 > 0xA)
    return "Unknown";
  else
    return off_1E42FB7A8[(char)a1];
}

{
  if (a1 > 0x15)
    return "Unknown";
  else
    return off_1E42FB800[(char)a1];
}

{
  if (a1 > 2)
    return "Unknown";
  else
    return off_1E4313950[(char)a1];
}

{
  if (a1 > 2)
    return "Unknown";
  else
    return off_1E4313938[(char)a1];
}

{
  if (a1 > 0xC)
    return "Unknown";
  else
    return off_1E42FB8B0[(char)a1];
}

{
  if (a1 > 0x102)
    return "Unknown";
  else
    return off_1E42FB918[(__int16)a1];
}

{
  if (a1 > 0x12E)
    return "Unknown";
  else
    return off_1E42FC130[(__int16)a1];
}

{
  if (a1 > 0xF)
    return "Unknown";
  else
    return off_1E42FCAA8[(char)a1];
}

{
  if (a1 > 0xB)
    return "Unknown";
  else
    return off_1E42FCB28[(char)a1];
}

{
  if (a1 > 0x20)
    return "Unknown";
  else
    return off_1E42FCB88[(char)a1];
}

{
  if (a1 > 0x10)
    return "Unknown";
  else
    return off_1E42FCC90[(char)a1];
}

{
  if (a1 > 2)
    return "Unknown";
  else
    return off_1E4313638[(char)a1];
}

{
  if (a1 > 0x14)
    return "Unknown";
  else
    return off_1E430B4F0[(char)a1];
}

{
  if (a1 > 0x13)
    return "Unknown";
  else
    return off_1E42FCEC8[(char)a1];
}

{
  if (a1 > 3)
    return "Unknown";
  else
    return off_1E4313740[(char)a1];
}

{
  if (a1 > 0x32)
    return "Unknown";
  else
    return off_1E42FD028[(char)a1];
}

{
  if (a1 > 0xC)
    return "Unknown";
  else
    return off_1E42FD1C0[(char)a1];
}

{
  if (a1 > 0x27)
    return "Unknown";
  else
    return off_1E42FD228[(char)a1];
}

{
  if (a1 > 0x27)
    return "Unknown";
  else
    return off_1E42FD368[(char)a1];
}

{
  if (a1 > 0x1D)
    return "Unknown";
  else
    return off_1E42FD4A8[(char)a1];
}

{
  if (a1 > 0x7E)
    return "Unknown";
  else
    return off_1E42FD598[(char)a1];
}

{
  if (a1 > 0x12)
    return "Unknown";
  else
    return off_1E42FDA90[(char)a1];
}

{
  if (a1 > 2)
    return "Unknown";
  else
    return off_1E43138F0[(char)a1];
}

{
  if (a1 > 0x1B)
    return "Unknown";
  else
    return off_1E42FDB28[(char)a1];
}

{
  if (a1 > 0x37)
    return "Unknown";
  else
    return off_1E42FDC70[(char)a1];
}

{
  if (a1 > 0xE)
    return "Unknown";
  else
    return off_1E42FDE30[(char)a1];
}

{
  if (a1 > 0x315)
    return "Unknown";
  else
    return off_1E42FE6A8[(__int16)a1];
}

{
  if (a1 > 0x1E9)
    return "Unknown";
  else
    return off_1E42FFF58[(__int16)a1];
}

{
  if (a1 > 0x10)
    return "Unknown";
  else
    return off_1E43016A8[(char)a1];
}

{
  if (a1 > 0x14)
    return "Unknown";
  else
    return off_1E4301730[(char)a1];
}

{
  if (a1 > 2)
    return "Unknown";
  else
    return off_1E4313710[(char)a1];
}

{
  if (a1 > 2)
    return "Unknown";
  else
    return off_1E4313968[(char)a1];
}

{
  if (a1 > 0xC)
    return "Unknown";
  else
    return off_1E43017D8[(char)a1];
}

{
  if (a1 > 0x10)
    return "Unknown";
  else
    return off_1E4301840[(char)a1];
}

{
  if (a1 > 2)
    return "Unknown";
  else
    return off_1E4313260[(char)a1];
}

{
  if (a1 > 0xA)
    return "Unknown";
  else
    return off_1E4301E90[(char)a1];
}

{
  if (a1 > 0x7A)
    return "Unknown";
  else
    return off_1E4301EE8[(char)a1];
}

{
  if (a1 > 0x14)
    return "Unknown";
  else
    return off_1E43128B0[(char)a1];
}

{
  if (a1 > 0xA)
    return "Unknown";
  else
    return off_1E4312958[(char)a1];
}

{
  if (a1 > 0x11)
    return "Unknown";
  else
    return off_1E43129B0[(char)a1];
}

{
  if (a1 > 0x12)
    return "Unknown";
  else
    return off_1E4312A40[(char)a1];
}

{
  if (a1 > 4)
    return "Unknown";
  else
    return off_1E4313290[(char)a1];
}

const char *gss::to_string(char a1)
{
  if ((a1 - 1) > 0x1Fu)
    return "Unknown";
  else
    return off_1E42FD990[(char)(a1 - 1)];
}

char *gss::to_string(int a1)
{
  return off_1E42FDEA8[a1 ^ 0x80u];
}

{
  return off_1E4300EA8[a1 ^ 0x80u];
}

{
  return off_1E430ACF0[a1 ^ 0x80u];
}

const char *gss::to_string(__int16 a1)
{
  if ((unsigned __int16)((unsigned __int16)(a1 - 5) >> 1) > 0x8A2u)
    return "Unknown";
  else
    return off_1E43022C0[(__int16)(a1 - 5)];
}

const char *gss::to_string(int a1, __int16 a2)
{
  const char *result;
  uint64_t v4;
  char **v5;
  const char *v6;
  BOOL v7;
  const char *v8;
  uint64_t v9;
  char **v10;
  int v11;
  const char *v12;
  const char *v13;
  const char *v14;
  BOOL v15;
  int v16;

  result = "";
  switch(a1)
  {
    case 1:
      return gss::to_string(a2);
    case 2:
      return gss::to_string(a2);
    case 3:
      return gss::to_string(a2);
    case 4:
      return gss::to_string(a2);
    case 5:
      return gss::to_string(a2);
    case 6:
      return gss::to_string(a2);
    case 7:
      return gss::to_string(a2);
    case 8:
    case 9:
    case 13:
    case 15:
    case 18:
    case 48:
    case 96:
    case 97:
    case 98:
    case 99:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 152:
      return result;
    case 10:
      return gss::to_string(a2);
    case 11:
      v6 = "Unknown";
      v8 = "Ferry";
      goto LABEL_214;
    case 12:
      return gss::to_string(a2);
    case 14:
      if (a2 >= 4u)
        return "Unknown";
      v4 = (char)a2;
      v5 = off_1E4312AD8;
      return v5[v4];
    case 16:
      v11 = a2;
      v12 = "Unknown";
      v13 = "Custom";
      goto LABEL_162;
    case 17:
      return gss::to_string(a2);
    case 19:
      if (a2 >= 3u)
        return "Unknown";
      v4 = (char)a2;
      v5 = off_1E4312AF8;
      return v5[v4];
    case 20:
      v6 = "Unknown";
      v8 = "Polygon";
      goto LABEL_214;
    case 21:
      if (a2 >= 3u)
        return "Unknown";
      v4 = (char)a2;
      v5 = off_1E43135B8;
      return v5[v4];
    case 22:
      v6 = "Unknown";
      if (a2 == 1)
        v6 = "Disputed";
      v7 = a2 == 0;
      v8 = "NonDisputed";
      goto LABEL_8;
    case 23:
      v6 = "Unknown";
      if (a2 == 1)
        v6 = "Urban";
      v7 = a2 == 0;
      v8 = "Rural";
      goto LABEL_8;
    case 24:
      v6 = "Unknown";
      if (a2 == 1)
        v6 = "Left";
      v7 = a2 == 0;
      v8 = "Right";
      goto LABEL_8;
    case 25:
      v6 = "Unknown";
      if (a2 == 1)
        v6 = "Walkable";
      v7 = a2 == 0;
      v8 = "NonWalkable";
      goto LABEL_8;
    case 26:
      v6 = "Unknown";
      if (a2 == 1)
        v6 = "Drivable";
      v7 = a2 == 0;
      v8 = "NonDrivable";
      goto LABEL_8;
    case 27:
      if (a2 >= 8u)
        return "Unknown";
      v4 = (char)a2;
      v5 = off_1E4312B10;
      return v5[v4];
    case 28:
      v11 = a2;
      v12 = "Unknown";
      v13 = "Water";
      goto LABEL_162;
    case 29:
      return gss::to_string(a2);
    case 30:
      return gss::to_string(a2);
    case 31:
      LOBYTE(v4) = a2 - 1;
      if ((a2 - 1) >= 5u)
        return "Unknown";
      v4 = (char)v4;
      v5 = off_1E4312B50;
      return v5[v4];
    case 32:
      v6 = "Unknown";
      if (a2 == 1)
        v6 = "Toll";
      v7 = a2 == 0;
      v8 = "NonToll";
      goto LABEL_8;
    case 33:
      LOBYTE(v4) = a2 - 1;
      if ((a2 - 1) >= 3u)
        return "Unknown";
      v4 = (char)v4;
      v5 = off_1E4312B78;
      return v5[v4];
    case 34:
      if (a2 >= 3u)
        return "Unknown";
      v4 = (char)a2;
      v5 = off_1E4312B90;
      return v5[v4];
    case 35:
      v6 = "Unknown";
      v14 = "Normal";
      goto LABEL_393;
    case 36:
      v6 = "Unknown";
      if (a2 == 1)
        v6 = "Unpaved";
      v7 = a2 == 0;
      v8 = "Paved";
      goto LABEL_8;
    case 37:
      return gss::to_string(a2);
    case 38:
      return gss::to_string(a2);
    case 39:
      return gss::to_string(a2);
    case 40:
      return gss::to_string(a2);
    case 41:
      return gss::to_string(a2);
    case 42:
      if (a2 >= 4u)
        return "Unknown";
      v4 = (char)a2;
      v5 = off_1E4312BA8;
      return v5[v4];
    case 43:
      if (a2 >= 0xAu)
        return "Unknown";
      v4 = (char)a2;
      v5 = off_1E4312BC8;
      return v5[v4];
    case 44:
      if (a2 >= 6u)
        return "Unknown";
      v4 = (char)a2;
      v5 = off_1E4312C18;
      return v5[v4];
    case 45:
      return gss::to_string(a2);
    case 46:
      if (a2 >= 4u)
        return "Unknown";
      v4 = (char)a2;
      v5 = off_1E4312C48;
      return v5[v4];
    case 47:
      return gss::to_string(a2);
    case 49:
      return gss::to_string(a2);
    case 50:
      return gss::to_string(a2);
    case 51:
      return gss::to_string(a2);
    case 52:
      return gss::to_string(a2);
    case 53:
      return gss::to_string(a2);
    case 54:
      if (a2 >= 5u)
        return "Unknown";
      v4 = (char)a2;
      v5 = off_1E4312C68;
      return v5[v4];
    case 55:
      if (a2 >= 5u)
        return "Unknown";
      v4 = (char)a2;
      v5 = off_1E4312C90;
      return v5[v4];
    case 56:
      if (a2 >= 5u)
        return "Unknown";
      v4 = (char)a2;
      v5 = off_1E4312CB8;
      return v5[v4];
    case 57:
      LOBYTE(v4) = a2 - 1;
      if ((a2 - 1) >= 4u)
        return "Unknown";
      v4 = (char)v4;
      v5 = off_1E4312CE0;
      return v5[v4];
    case 58:
      LOBYTE(v4) = a2 - 1;
      if ((a2 - 1) >= 3u)
        return "Unknown";
      v4 = (char)v4;
      v5 = off_1E4312D00;
      return v5[v4];
    case 59:
    case 63:
    case 66:
    case 67:
    case 68:
    case 70:
    case 72:
    case 73:
    case 75:
    case 95:
    case 150:
    case 151:
    case 156:
    case 164:
    case 168:
    case 170:
    case 174:
    case 176:
    case 180:
    case 184:
    case 186:
    case 189:
LABEL_5:
      v6 = "Unknown";
      if (a2 == 1)
        v6 = "True";
      v7 = a2 == 0;
      v8 = "False";
      goto LABEL_8;
    case 60:
      if (a2 >= 3u)
        return "Unknown";
      v4 = (char)a2;
      v5 = off_1E4312D18;
      return v5[v4];
    case 61:
      v6 = "Unknown";
      if (a2 == 1)
        v6 = "AuthorizedVehicles";
      v7 = a2 == 0;
      v8 = "NoRestrictions";
      goto LABEL_8;
    case 62:
      v6 = "Unknown";
      if (a2 == 1)
        v6 = "ToUndergroundLevel";
      v7 = a2 == 0;
      v8 = "ToGroundLevel";
      goto LABEL_8;
    case 64:
      if (a2 >= 8u)
        return "Unknown";
      v4 = (char)a2;
      v5 = off_1E4312D30;
      return v5[v4];
    case 65:
      return gss::to_string(a2);
    case 69:
      v6 = "Unknown";
      if (a2 == 1)
        v6 = "Outdoor";
      v7 = a2 == 0;
      v8 = "Indoor";
      goto LABEL_8;
    case 71:
      return gss::to_string(a2);
    case 74:
      v6 = "Unknown";
      v8 = "Available";
      goto LABEL_214;
    case 76:
    case 77:
    case 86:
    case 87:
      if (a2 >= 4u)
        return "Unknown";
      v4 = (char)a2;
      v5 = off_1E4312DD8;
      return v5[v4];
    case 78:
      v6 = "Unknown";
      if (a2 == 1)
        v6 = "VenueAmenity";
      v7 = a2 == 0;
      v8 = "TransitAccessPoint";
      goto LABEL_8;
    case 79:
      if (a2 >= 4u)
        return "Unknown";
      v4 = (char)a2;
      v5 = off_1E4312D70;
      return v5[v4];
    case 80:
      return gss::to_string(a2);
    case 81:
      return gss::to_string(a2);
    case 82:
      return gss::to_string(a2);
    case 83:
      if (a2 >= 9u)
        return "Unknown";
      v4 = (char)a2;
      v5 = off_1E4312D90;
      return v5[v4];
    case 84:
      v6 = "Unknown";
      v14 = "Summary";
      goto LABEL_393;
    case 85:
    case 169:
    case 182:
    case 183:
      return gss::to_string(a2);
    case 88:
      if (a2 >= 3u)
        return "Unknown";
      v4 = (char)a2;
      v5 = off_1E4312DF8;
      return v5[v4];
    case 89:
      if (a2 >= 7u)
        return "Unknown";
      v4 = (char)a2;
      v5 = off_1E4312E10;
      return v5[v4];
    case 90:
      return gss::to_string(a2);
    case 91:
      v6 = "Unknown";
      v14 = "IntersectionInternal";
      goto LABEL_393;
    case 92:
      return gss::to_string(a2);
    case 93:
      return gss::to_string(a2);
    case 94:
      v6 = "Unknown";
      if (a2 == 1)
        v6 = "PeriodicOrIrregular";
      v7 = a2 == 0;
      v8 = "Perennial";
      goto LABEL_8;
    case 100:
      return gss::to_string(a2);
    case 101:
      LOBYTE(v4) = a2 - 1;
      if ((a2 - 1) >= 5u)
        return "Unknown";
      v4 = (char)v4;
      v5 = off_1E4312E48;
      return v5[v4];
    case 102:
      LOBYTE(v4) = a2 - 1;
      if ((a2 - 1) >= 0xAu)
        return "Unknown";
      v4 = (char)v4;
      v5 = off_1E4312E70;
      return v5[v4];
    case 103:
      LOBYTE(v4) = a2 - 1;
      if ((a2 - 1) >= 3u)
        return "Unknown";
      v4 = (char)v4;
      v5 = off_1E4312EC0;
      return v5[v4];
    case 104:
      return gss::to_string(a2);
    case 105:
      LOBYTE(v4) = a2 - 1;
      if ((a2 - 1) >= 4u)
        return "Unknown";
      v4 = (char)v4;
      v5 = off_1E4312ED8;
      return v5[v4];
    case 106:
      v11 = a2;
      v12 = "Unknown";
      if (a2 == 2)
        v12 = "Trunk";
      v13 = "Leaves";
      goto LABEL_162;
    case 107:
      LOBYTE(v4) = a2 - 1;
      if ((a2 - 1) >= 7u)
        return "Unknown";
      v4 = (char)v4;
      v5 = off_1E4312EF8;
      return v5[v4];
    case 108:
      v11 = a2;
      v12 = "Unknown";
      if (a2 == 2)
        v12 = "Yield";
      v13 = "Stop";
      goto LABEL_162;
    case 109:
      v11 = a2;
      v12 = "Unknown";
      if (a2 == 2)
        v12 = "Support";
      v13 = "Main";
LABEL_162:
      v15 = v11 == 1;
LABEL_319:
      if (v15)
        return v13;
      else
        return v12;
    case 110:
      return gss::to_string(a2);
    case 153:
      if (a2 >= 7u)
        return "Unknown";
      v4 = (char)a2;
      v5 = off_1E4312F30;
      return v5[v4];
    case 154:
      if (a2 >= 6u)
        return "Unknown";
      v4 = (char)a2;
      v5 = off_1E4312F68;
      return v5[v4];
    case 155:
      return gss::to_string(a2);
    case 157:
      if (a2 >= 5u)
        return "Unknown";
      v9 = (char)a2;
      v10 = off_1E4312F98;
      return v10[v9];
    case 158:
      if (a2 >= 3u)
        return "Unknown";
      v9 = (char)a2;
      v10 = off_1E4312FC0;
      return v10[v9];
    case 159:
      if (a2 >= 3u)
        return "Unknown";
      v9 = (char)a2;
      v10 = off_1E4312FD8;
      return v10[v9];
    case 160:
      if (a2 >= 3u)
        return "Unknown";
      v9 = (char)a2;
      v10 = off_1E4312FF0;
      return v10[v9];
    case 161:
      if (a2 >= 6u)
        return "Unknown";
      v9 = (char)a2;
      v10 = off_1E4313008;
      return v10[v9];
    case 162:
      if (a2 >= 7u)
        return "Unknown";
      v9 = (char)a2;
      v10 = off_1E4313038;
      return v10[v9];
    case 163:
      if (a2 >= 7u)
        return "Unknown";
      v9 = (char)a2;
      v10 = off_1E4313070;
      return v10[v9];
    case 165:
      if (a2 >= 4u)
        return "Unknown";
      v9 = (char)a2;
      v10 = off_1E43130A8;
      return v10[v9];
    case 166:
      v6 = "Unknown";
      v14 = "HideLabel";
LABEL_393:
      if (a2 == 1)
        v6 = v14;
      v7 = a2 == 0;
      v8 = "None";
      goto LABEL_8;
    case 167:
      v6 = "Unknown";
      if (a2 == 1)
        v6 = "Oceanic";
      v7 = a2 == 0;
      v8 = "Inland";
      goto LABEL_8;
    case 171:
      if (a2 >= 5u)
        return "Unknown";
      v9 = (char)a2;
      v10 = off_1E43130C8;
      return v10[v9];
    case 172:
      if (a2 >= 7u)
        return "Unknown";
      v9 = (char)a2;
      v10 = off_1E43130F0;
      return v10[v9];
    case 173:
      if (a2 >= 3u)
        return "Unknown";
      v9 = (char)a2;
      v10 = off_1E4313128;
      return v10[v9];
    case 175:
      if (a2 >= 3u)
        return "Unknown";
      v9 = (char)a2;
      v10 = off_1E4313140;
      return v10[v9];
    case 177:
      v6 = "Unknown";
      if (a2 == 1)
        v6 = "Major";
      v7 = a2 == 0;
      v8 = "Minor";
      goto LABEL_8;
    case 178:
      return gss::to_string(a2);
    case 179:
      if (a2 >= 9u)
        return "Unknown";
      v9 = (char)a2;
      v10 = off_1E4313158;
      return v10[v9];
    case 181:
      v6 = "Unknown";
      v8 = "Offline";
      goto LABEL_214;
    case 185:
      if (a2 >= 3u)
        return "Unknown";
      v9 = (char)a2;
      v10 = off_1E43131A0;
      return v10[v9];
    case 187:
      v6 = "Unknown";
      v8 = "Hillshading";
      goto LABEL_214;
    case 188:
      return gss::to_string(a2);
    case 190:
      if (a2 >= 5u)
        return "Unknown";
      v9 = (char)a2;
      v10 = off_1E43131B8;
      return v10[v9];
    case 191:
      v6 = "Unknown";
      if (a2 == 1)
        v6 = "TwoWay";
      v7 = a2 == 0;
      v8 = "OneWay";
      goto LABEL_8;
    case 192:
      v6 = "Unknown";
      v8 = "Olympics";
LABEL_214:
      v7 = a2 == 0;
LABEL_8:
      if (v7)
        return v8;
      else
        return v6;
    case 193:
      if (a2 >= 4u)
        return "Unknown";
      v9 = (char)a2;
      v10 = off_1E43131E0;
      return v10[v9];
    default:
      switch(a1)
      {
        case 65536:
          if (a2 >= 8u)
            return "Unknown";
          v9 = (char)a2;
          v10 = off_1E4313200;
          return v10[v9];
        case 65537:
          v6 = "Unknown";
          if (a2 == 1)
            v6 = "Night";
          v7 = a2 == 0;
          v8 = "Day";
          goto LABEL_8;
        case 65538:
          if (a2 >= 4u)
            return "Unknown";
          v9 = (char)a2;
          v10 = off_1E4313240;
          return v10[v9];
        case 65539:
          v6 = "Unknown";
          if (a2 == 1)
            v6 = "LocationGem";
          v7 = a2 == 0;
          v8 = "Pin";
          goto LABEL_8;
        case 65540:
        case 65624:
          v6 = "Unknown";
          if (a2 == 1)
            v6 = "False";
          v7 = a2 == 0;
          v8 = "True";
          goto LABEL_8;
        case 65541:
          if (a2 >= 3u)
            return "Unknown";
          v9 = (char)a2;
          v10 = off_1E4313260;
          return v10[v9];
        case 65542:
          return gss::to_string(a2);
        case 65543:
          if (a2 >= 3u)
            return "Unknown";
          v9 = (char)a2;
          v10 = off_1E4313278;
          return v10[v9];
        case 65544:
          return gss::to_string(a2);
        case 65545:
          if (a2 >= 5u)
            return "Unknown";
          v9 = (char)a2;
          v10 = off_1E4313290;
          return v10[v9];
        case 65549:
          if (a2 >= 3u)
            return "Unknown";
          v9 = (char)a2;
          v10 = off_1E43132B8;
          return v10[v9];
        case 65550:
          if (a2 >= 9u)
            return "Unknown";
          v9 = (char)a2;
          v10 = off_1E43132D0;
          return v10[v9];
        case 65552:
          if (a2 >= 6u)
            return "Unknown";
          goto LABEL_331;
        case 65553:
        case 65555:
        case 65561:
        case 65563:
        case 65564:
        case 65568:
        case 65569:
        case 65570:
        case 65572:
        case 65581:
        case 65582:
        case 65583:
        case 65584:
        case 65585:
        case 65591:
        case 65592:
        case 65594:
        case 65596:
        case 65601:
        case 65606:
        case 65608:
        case 65609:
        case 65622:
        case 65631:
        case 65636:
        case 65638:
        case 65639:
        case 65640:
        case 65641:
        case 65642:
        case 65644:
        case 65647:
        case 65651:
        case 65652:
        case 65659:
        case 65663:
        case 65664:
        case 65667:
          goto LABEL_5;
        case 65554:
          v6 = "Unknown";
          if (a2 == 1)
            v6 = "Closed";
          v7 = a2 == 0;
          v8 = "Open";
          goto LABEL_8;
        case 65556:
          if (a2 >= 3u)
            return "Unknown";
          goto LABEL_333;
        case 65557:
          if (a2 >= 4u)
            return "Unknown";
          v9 = (char)a2;
          v10 = off_1E4313318;
          return v10[v9];
        case 65558:
          if (a2 >= 4u)
            return "Unknown";
          goto LABEL_309;
        case 65559:
          if (a2 >= 3u)
            return "Unknown";
          v9 = (char)a2;
          v10 = off_1E4313338;
          return v10[v9];
        case 65560:
          if (a2 >= 4u)
            return "Unknown";
          v9 = (char)a2;
          v10 = off_1E4313350;
          return v10[v9];
        case 65562:
          if (a2 >= 4u)
            return "Unknown";
          v9 = (char)a2;
          v10 = off_1E4313370;
          return v10[v9];
        case 65565:
          if (a2 >= 8u)
            return "Unknown";
          v9 = (char)a2;
          v10 = off_1E4313390;
          return v10[v9];
        case 65566:
        case 65575:
          LOBYTE(v9) = a2 - 1;
          if ((a2 - 1) >= 8u)
            return "Unknown";
          goto LABEL_17;
        case 65567:
          LOBYTE(v9) = a2 - 1;
          if ((a2 - 1) >= 3u)
            return "Unknown";
          v9 = (char)v9;
          v10 = off_1E43133D0;
          return v10[v9];
        case 65571:
          LOBYTE(v9) = a2 - 1;
          if ((a2 - 1) >= 7u)
            return "Unknown";
          v9 = (char)v9;
          v10 = off_1E43133E8;
          return v10[v9];
        case 65573:
          if (a2 >= 3u)
            return "Unknown";
          v9 = (char)a2;
          v10 = off_1E4313420;
          return v10[v9];
        case 65574:
          return gss::to_string(a2);
        case 65576:
          if (a2 >= 5u)
            return "Unknown";
          v9 = (char)a2;
          v10 = off_1E4313438;
          return v10[v9];
        case 65577:
          v6 = "Unknown";
          if (a2 == 1)
            v6 = "Complex";
          v7 = a2 == 0;
          v8 = "Simple";
          goto LABEL_8;
        case 65578:
          if (a2 >= 6u)
            return "Unknown";
          v9 = (char)a2;
          v10 = off_1E4313460;
          return v10[v9];
        case 65579:
          if (a2 >= 6u)
            return "Unknown";
          v9 = (char)a2;
          v10 = off_1E4313490;
          return v10[v9];
        case 65580:
          LOBYTE(v9) = a2 - 1;
          if ((a2 - 1) >= 4u)
            return "Unknown";
          v9 = (char)v9;
          v10 = off_1E43134C0;
          return v10[v9];
        case 65586:
          LOBYTE(v9) = a2 - 1;
          if ((a2 - 1) >= 9u)
            return "Unknown";
          v9 = (char)v9;
          v10 = off_1E43134E0;
          return v10[v9];
        case 65587:
          if (a2 >= 5u)
            return "Unknown";
          v9 = (char)a2;
          v10 = off_1E4313528;
          return v10[v9];
        case 65588:
          if (a2 >= 4u)
            return "Unknown";
          v9 = (char)a2;
          v10 = off_1E4313550;
          return v10[v9];
        case 65589:
          if (a2 >= 9u)
            return "Unknown";
          v9 = (char)a2;
          v10 = off_1E4313570;
          return v10[v9];
        case 65590:
          v6 = "Unknown";
          if (a2 == 1)
            v6 = "HighZoom";
          v7 = a2 == 0;
          v8 = "LowZoom";
          goto LABEL_8;
        case 65593:
          return gss::to_string(a2);
        case 65595:
          if (a2 >= 3u)
            return "Unknown";
          v9 = (char)a2;
          v10 = off_1E43135B8;
          return v10[v9];
        case 65597:
          if (a2 >= 3u)
            return "Unknown";
          v9 = (char)a2;
          v10 = off_1E43135D0;
          return v10[v9];
        case 65598:
        case 65629:
          LOBYTE(v9) = a2 - 1;
          if ((a2 - 1) >= 8u)
            goto LABEL_399;
LABEL_17:
          v9 = (char)v9;
          v10 = off_1E43137E0;
          return v10[v9];
        case 65599:
          if (a2 >= 3u)
            goto LABEL_399;
          v9 = (char)a2;
          v10 = off_1E43135E8;
          return v10[v9];
        case 65600:
          v16 = a2;
          v12 = "Unknown";
          if (a2 == 1)
            v12 = "Confirmed";
          v13 = "Unconfirmed";
          goto LABEL_318;
        case 65602:
          LOBYTE(v9) = a2 - 1;
          if ((a2 - 1) >= 7u)
            goto LABEL_399;
          v9 = (char)v9;
          v10 = off_1E4313600;
          return v10[v9];
        case 65603:
          v6 = "Unknown";
          v14 = "Dragging";
          goto LABEL_393;
        case 65604:
          v6 = "Unknown";
          if (a2 == 1)
            v6 = "PlaceholderForMissingFloor";
          v7 = a2 == 0;
          v8 = "OnCorrectFloor";
          goto LABEL_8;
        case 65605:
          if (a2 >= 3u)
            goto LABEL_399;
          v9 = (char)a2;
          v10 = off_1E4313638;
          return v10[v9];
        case 65607:
          if (a2 >= 4u)
            goto LABEL_399;
          v9 = (char)a2;
          v10 = off_1E4313650;
          return v10[v9];
        case 65610:
          if (a2 >= 4u)
            goto LABEL_399;
LABEL_309:
          v9 = (char)a2;
          v10 = off_1E4313670;
          return v10[v9];
        case 65611:
          return gss::to_string(a2);
        case 65612:
          return gss::to_string(a2);
        case 65613:
          v6 = "Unknown";
          if (a2 == 1)
            v6 = "Focused";
          v7 = a2 == 0;
          v8 = "Unfocused";
          goto LABEL_8;
        case 65614:
          v16 = a2;
          v12 = "Unknown";
          if (a2 == 1)
            v12 = "StopSign";
          v13 = "StopLight";
LABEL_318:
          v15 = v16 == 2;
          goto LABEL_319;
        case 65615:
          if (a2 >= 3u)
            goto LABEL_399;
          v9 = (char)a2;
          v10 = off_1E4313690;
          return v10[v9];
        case 65616:
          if (a2 >= 7u)
            goto LABEL_399;
          v9 = (char)a2;
          v10 = off_1E43136A8;
          return v10[v9];
        case 65617:
          v6 = "Unknown";
          if (a2 == 1)
            v6 = "Elevated";
          v7 = a2 == 0;
          v8 = "Flat";
          goto LABEL_8;
        case 65618:
          return gss::to_string(a2);
        case 65619:
          if (a2 >= 6u)
            goto LABEL_399;
LABEL_331:
          v9 = (char)a2;
          v10 = off_1E43136E0;
          return v10[v9];
        case 65620:
          if (a2 >= 3u)
            goto LABEL_399;
LABEL_333:
          v9 = (char)a2;
          v10 = off_1E4313710;
          return v10[v9];
        case 65621:
        case 65633:
          if (a2 >= 0xAu)
            goto LABEL_399;
          v9 = (char)a2;
          v10 = off_1E4313860;
          return v10[v9];
        case 65623:
          if (a2 >= 3u)
            goto LABEL_399;
          v9 = (char)a2;
          v10 = off_1E4313728;
          return v10[v9];
        case 65625:
          if (a2 >= 4u)
            goto LABEL_399;
          v9 = (char)a2;
          v10 = off_1E4313740;
          return v10[v9];
        case 65626:
          if (a2 >= 5u)
            goto LABEL_399;
          v9 = (char)a2;
          v10 = off_1E4313760;
          return v10[v9];
        case 65627:
          LOBYTE(v9) = a2 - 1;
          if ((a2 - 1) >= 3u)
            goto LABEL_399;
          v9 = (char)v9;
          v10 = off_1E4313788;
          return v10[v9];
        case 65628:
          if (a2 >= 8u)
            goto LABEL_399;
          v9 = (char)a2;
          v10 = off_1E43137A0;
          return v10[v9];
        case 65630:
          if (a2 >= 5u)
            goto LABEL_399;
          v9 = (char)a2;
          v10 = off_1E4313820;
          return v10[v9];
        case 65632:
          if (a2 >= 3u)
            goto LABEL_399;
          v9 = (char)a2;
          v10 = off_1E4313848;
          return v10[v9];
        case 65634:
          return gss::to_string(a2);
        case 65635:
          if (a2 >= 5u)
            goto LABEL_399;
          v9 = (char)a2;
          v10 = off_1E43138B0;
          return v10[v9];
        case 65637:
          if (a2 >= 3u)
            goto LABEL_399;
          v9 = (char)a2;
          v10 = off_1E43138D8;
          return v10[v9];
        case 65643:
          return gss::to_string(a2);
        case 65645:
          v6 = "Unknown";
          if (a2 == 1)
            v6 = "FacePerpendicular";
          v7 = a2 == 0;
          v8 = "FaceAligned";
          goto LABEL_8;
        case 65646:
          v6 = "Unknown";
          if (a2 == 1)
            v6 = "Address";
          v7 = a2 == 0;
          v8 = "Storefront";
          goto LABEL_8;
        case 65648:
          v6 = "Unknown";
          if (a2 == 1)
            v6 = "TopDown";
          v7 = a2 == 0;
          v8 = "Pitched";
          goto LABEL_8;
        case 65649:
          v6 = "Unknown";
          if (a2 == 1)
            v6 = "MapKit";
          v7 = a2 == 0;
          v8 = "Maps";
          goto LABEL_8;
        case 65650:
          if (a2 >= 3u)
            goto LABEL_399;
          v9 = (char)a2;
          v10 = off_1E43138F0;
          return v10[v9];
        case 65653:
          if (a2 >= 3u)
            goto LABEL_399;
          v9 = (char)a2;
          v10 = off_1E4313908;
          return v10[v9];
        case 65654:
          if (a2 >= 3u)
            goto LABEL_399;
          v9 = (char)a2;
          v10 = off_1E4313920;
          return v10[v9];
        case 65655:
          if (a2 >= 3u)
            goto LABEL_399;
          v9 = (char)a2;
          v10 = off_1E4313938;
          return v10[v9];
        case 65656:
          if (a2 >= 3u)
            goto LABEL_399;
          v9 = (char)a2;
          v10 = off_1E4313950;
          return v10[v9];
        case 65657:
          if (a2 >= 3u)
            goto LABEL_399;
          v9 = (char)a2;
          v10 = off_1E4313968;
          return v10[v9];
        case 65660:
          if (a2 >= 5u)
            goto LABEL_399;
          v9 = (char)a2;
          v10 = off_1E4313980;
          return v10[v9];
        case 65661:
          if (a2 >= 4u)
            goto LABEL_399;
          v9 = (char)a2;
          v10 = off_1E43139A8;
          return v10[v9];
        case 65662:
          v6 = "Unknown";
          if (a2 == 1)
            v6 = "Wind";
          v7 = a2 == 0;
          v8 = "Standard";
          goto LABEL_8;
        case 65666:
          v6 = "Unknown";
          if (a2 == 1)
            v6 = "NonInteractive";
          v7 = a2 == 0;
          v8 = "Interactive";
          goto LABEL_8;
        case 65668:
          v6 = "Unknown";
          if (a2 == 1)
            v6 = "RouteCreation";
          v7 = a2 == 0;
          v8 = "Default";
          goto LABEL_8;
        case 65669:
          LOBYTE(v4) = a2 - 1;
          if ((a2 - 1) < 4u)
          {
            v4 = (char)v4;
            v5 = off_1E43139C8;
            return v5[v4];
          }
LABEL_399:
          result = "Unknown";
          break;
        case 65670:
          v6 = "Unknown";
          v14 = "TurnAround";
          goto LABEL_393;
        default:
          return result;
      }
      return result;
  }
}

void *gss::defaultValueForKey<gss::ScenePropertyID,BOOL>()
{
  return &gss::defaultValueForKey<gss::ScenePropertyID,BOOL>(gss::ScenePropertyID)::_defaultValue;
}

void *gss::defaultValueForKey<gss::ScenePropertyID,float>(int a1)
{
  if ((a1 - 57) > 4)
    return &gss::defaultValueForKey<gss::ScenePropertyID,float>(gss::ScenePropertyID)::_defaultValue;
  else
    return *(&off_1E43139E8 + (char)(a1 - 57));
}

void *gss::defaultValueForKey<gss::ScenePropertyID,unsigned char>()
{
  return &gss::defaultValueForKey<gss::ScenePropertyID,unsigned char>(gss::ScenePropertyID)::_defaultValue;
}

void *gss::defaultValueForKey<gss::ScenePropertyID,int>(int a1)
{
  void *v1;

  v1 = &gss::defaultValueForKey<gss::ScenePropertyID,int>(gss::ScenePropertyID)::_defaultValue;
  if (a1 == 66)
    v1 = &gss::defaultValueForKey<gss::ScenePropertyID,int>(gss::ScenePropertyID)::kDefaultCurrentRoadSignOffset;
  if (a1 == 10)
    return &gss::defaultValueForKey<gss::ScenePropertyID,int>(gss::ScenePropertyID)::kDefaultSecondaryLightAngleAltitude;
  else
    return v1;
}

void *gss::defaultValueForKey<gss::ScenePropertyID,unsigned int>(unsigned int a1)
{
  if (a1 > 8)
    return &gss::defaultValueForKey<gss::ScenePropertyID,unsigned int>(gss::ScenePropertyID)::_defaultValue;
  else
    return *(&off_1E4313A10 + (char)a1);
}

uint64_t *gss::defaultValueForKey<gss::ScenePropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>()
{
  unsigned __int8 v0;
  float32x4_t v2;
  uint64_t v3;

  v0 = atomic_load((unsigned __int8 *)&qword_1ECE659A8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_1ECE659A8))
  {
    v2 = (float32x4_t)xmmword_19FFB34C0;
    geo::_wordColor<float,4,(geo::ColorSpace)0>(&v2, (int16x4_t *)&v3);
    _MergedGlobals_1 = v3;
    __cxa_guard_release(&qword_1ECE659A8);
  }
  return &_MergedGlobals_1;
}

void sub_19FF61B7C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1ECE659A8);
  _Unwind_Resume(a1);
}

void *gss::defaultValueForKey<gss::ScenePropertyID,gm::Matrix<float,2,1>>()
{
  return &gss::defaultValueForKey<gss::ScenePropertyID,gm::Matrix<float,2,1>>(gss::ScenePropertyID)::_defaultValue;
}

void *gss::defaultValueForKey<gss::ScenePropertyID,std::string>()
{
  return &gss::defaultValueForKey<gss::ScenePropertyID,std::string>(gss::ScenePropertyID)::_defaultValue;
}

uint64_t gss::attributesToString@<X0>(uint64_t *a1@<X0>, int a2@<W1>, char *a3@<X2>, unint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  const char *v16;
  size_t v17;
  _QWORD *v18;
  _QWORD *v19;
  const char *v20;
  size_t v21;
  _QWORD *v22;
  _BOOL4 v24;
  void *v25;
  uint64_t v26;
  void *v27;
  void **v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *__dst[2];
  unint64_t v37;
  void *v38;
  uint64_t v39;
  unsigned __int8 v40;
  void *v41[2];
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[8];
  __int128 __p;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[10];
  char v50;
  uint64_t v51;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v48);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v43);
  v41[0] = 0;
  v41[1] = 0;
  v42 = 0;
  if (a3)
    v9 = a3;
  else
    v9 = "";
  std::string::basic_string[abi:ne180100]<0>(&v38, v9);
  v11 = *a1;
  v10 = a1[1];
  if (v10 != *a1)
  {
    v12 = 0;
    v13 = ((v10 - *a1) >> 3) - 1;
    while (1)
    {
      std::string::basic_string[abi:ne180100]<0>(__dst, "");
      if (SHIBYTE(v46) < 0)
        operator delete((void *)__p);
      __p = *(_OWORD *)__dst;
      v46 = v37;
      HIBYTE(v37) = 0;
      LOBYTE(__dst[0]) = 0;
      std::stringbuf::__init_buf_ptrs[abi:ne180100]((uint64_t)v44);
      if (SHIBYTE(v37) < 0)
        operator delete(__dst[0]);
      v14 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"=", 1);
      std::ostream::operator<<();
      if (a2)
      {
        v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v43, (uint64_t)" (", 2);
        v16 = gss::to_string(*(_DWORD *)v11);
        v17 = strlen(v16);
        v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
        v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"=", 1);
        v20 = gss::to_string(*(_DWORD *)v11, *(_WORD *)(v11 + 4));
        v21 = strlen(v20);
        v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, v21);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)")", 1);
      }
      v24 = v13-- != 0;
      if (a4 && v24)
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v43, (uint64_t)",", 1);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>(__dst, (uint64_t)v44);
      if (SHIBYTE(v42) < 0)
        operator delete(v41[0]);
      v42 = v37;
      *(_OWORD *)v41 = *(_OWORD *)__dst;
      v25 = (void *)HIBYTE(v37);
      if ((v37 & 0x8000000000000000) != 0)
        v25 = __dst[1];
      if ((unint64_t)v25 + v12 >= a4)
        break;
      if (!v12)
        goto LABEL_26;
LABEL_37:
      if (v42 >= 0)
        v28 = v41;
      else
        v28 = (void **)v41[0];
      if (v42 >= 0)
        v29 = HIBYTE(v42);
      else
        v29 = (uint64_t)v41[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v48, (uint64_t)v28, v29);
      v30 = HIBYTE(v42);
      if (v42 < 0)
        v30 = (unint64_t)v41[1];
      v12 += v30;
      v11 += 8;
      if (v11 == v10)
        goto LABEL_46;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v48, (uint64_t)"\n", 1);
LABEL_26:
    if ((v40 & 0x80u) == 0)
      v26 = v40;
    else
      v26 = v39;
    if (v26)
    {
      if ((v40 & 0x80u) == 0)
        v27 = &v38;
      else
        v27 = v38;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v48, (uint64_t)v27, v26);
      if ((char)v40 < 0)
        v12 = v39;
      else
        v12 = v40;
    }
    else
    {
      v12 = 0;
    }
    goto LABEL_37;
  }
LABEL_46:
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a5, (uint64_t)v49);
  if ((char)v40 < 0)
    operator delete(v38);
  if (SHIBYTE(v42) < 0)
    operator delete(v41[0]);
  v31 = *MEMORY[0x1E0DE4F60];
  v43 = v31;
  v32 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *(_QWORD *)((char *)&v44[-1] + *(_QWORD *)(v31 - 24)) = v32;
  v33 = MEMORY[0x1E0DE4FB8] + 16;
  v44[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v46) < 0)
    operator delete((void *)__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1A1AF4D64](&v47);
  v48 = v31;
  *(_QWORD *)((char *)&v49[-1] + *(_QWORD *)(v31 - 24)) = v32;
  v49[0] = v33;
  if (v50 < 0)
    operator delete((void *)v49[8]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AF4D64](&v51);
}

void sub_19FF61F48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  if (a22 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  std::ostringstream::~ostringstream((uint64_t)&a29);
  std::ostringstream::~ostringstream((uint64_t)&a62);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;

  v2 = MEMORY[0x1E0DE4FE0];
  v3 = MEMORY[0x1E0DE4FE0] + 64;
  *(_QWORD *)(a1 + 112) = MEMORY[0x1E0DE4FE0] + 64;
  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + *(_QWORD *)(v4 - 24)) = v5;
  v6 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 8));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 112) = v3;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_19FF62080(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1A1AF4D64](v1);
  _Unwind_Resume(a1);
}

uint64_t **gss::attributesToString@<X0>(gss::Allocator *a1@<X0>, int a2@<W1>, char *a3@<X2>, unint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  char v19;

  v9 = *(_QWORD *)a1;
  v10 = *((_QWORD *)a1 + 1);
  v15 = 0;
  v16 = 0;
  v14 = 0;
  v17 = gss::Allocator::instance(a1);
  v18 = &v14;
  v19 = 0;
  if (v10 != v9)
  {
    std::vector<std::pair<gss::StyleAttribute,unsigned short>,geo::StdAllocator<std::pair<gss::StyleAttribute,unsigned short>,gss::Allocator>>::__vallocate[abi:ne180100]((uint64_t)&v14, (v10 - v9) >> 3);
    v11 = 0;
    v12 = v15;
    do
    {
      if (v12 + v11)
        *(_QWORD *)(v12 + v11) = *(_QWORD *)(v9 + v11);
      v11 += 8;
    }
    while (v9 + v11 != v10);
    v15 = v12 + v11;
  }
  gss::attributesToString(&v14, a2, a3, a4, a5);
  v18 = &v14;
  return std::vector<std::pair<gss::StyleAttribute,unsigned short>,geo::StdAllocator<std::pair<gss::StyleAttribute,unsigned short>,gss::Allocator>>::__destroy_vector::operator()[abi:ne180100](&v18);
}

void sub_19FF62170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::vector<std::pair<gss::StyleAttribute,unsigned short>,geo::StdAllocator<std::pair<gss::StyleAttribute,unsigned short>,gss::Allocator>>::__destroy_vector::operator()[abi:ne180100]((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t **gss::attributesToString@<X0>(unsigned __int16 *a1@<X0>, int a2@<W1>, char *a3@<X2>, unint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  int v10;
  unint64_t v11;
  int v12;
  _WORD *v13;
  uint64_t v14;
  _DWORD *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  char v26;

  v10 = a1[5];
  v22 = 0;
  v23 = 0;
  v21 = 0;
  v24 = gss::Allocator::instance((gss::Allocator *)a1);
  if (v10)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      ++v11;
      if (v12 + 1 < a1[5])
        ++v12;
      else
        v12 = a1[5];
    }
    while (v12 != v10);
    v25 = &v21;
    v26 = 0;
    std::vector<std::pair<gss::StyleAttribute,unsigned short>,geo::StdAllocator<std::pair<gss::StyleAttribute,unsigned short>,gss::Allocator>>::__vallocate[abi:ne180100]((uint64_t)&v21, v11);
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = v22;
    v18 = a1[5];
    do
    {
      if (v16 < v18)
      {
        v15 = (_DWORD *)(*(_QWORD *)a1 + 4 * v16);
        v13 = (_WORD *)(*(_QWORD *)a1 + a1[4] + 2 * v16);
      }
      v19 = v17 + v14;
      if (v17 + v14)
      {
        *(_DWORD *)v19 = *v15;
        *(_WORD *)(v19 + 4) = *v13;
      }
      if (v16 + 1 < v18)
        ++v16;
      else
        v16 = v18;
      v14 += 8;
    }
    while (v16 != v10);
    v22 = v17 + v14;
  }
  gss::attributesToString(&v21, a2, a3, a4, a5);
  v25 = &v21;
  return std::vector<std::pair<gss::StyleAttribute,unsigned short>,geo::StdAllocator<std::pair<gss::StyleAttribute,unsigned short>,gss::Allocator>>::__destroy_vector::operator()[abi:ne180100](&v25);
}

void sub_19FF622BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::vector<std::pair<gss::StyleAttribute,unsigned short>,geo::StdAllocator<std::pair<gss::StyleAttribute,unsigned short>,gss::Allocator>>::__destroy_vector::operator()[abi:ne180100]((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<gss::StyleAttribute,unsigned short>,geo::StdAllocator<std::pair<gss::StyleAttribute,unsigned short>,gss::Allocator>>::__vallocate[abi:ne180100](uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 61)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  result = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), 8 * a2, 4);
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = result;
  *(_QWORD *)(a1 + 16) = result + 8 * a2;
  return result;
}

uint64_t **std::vector<std::pair<gss::StyleAttribute,unsigned short>,geo::StdAllocator<std::pair<gss::StyleAttribute,unsigned short>,gss::Allocator>>::__destroy_vector::operator()[abi:ne180100](uint64_t **result)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = *result;
  v2 = **result;
  if (v2)
  {
    v1[1] = v2;
    return (uint64_t **)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1[3] + 40))(v1[3], v2, v1[2] - v2);
  }
  return result;
}

_QWORD *std::stringbuf::str[abi:ne180100]<std::allocator<char>>(_QWORD *__dst, uint64_t a2)
{
  _QWORD *v2;
  int v3;
  size_t v4;
  unint64_t v5;
  unint64_t v6;
  const void **v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v2 = __dst;
  v3 = *(_DWORD *)(a2 + 96);
  if ((v3 & 0x10) != 0)
  {
    v5 = *(_QWORD *)(a2 + 88);
    v6 = *(_QWORD *)(a2 + 48);
    if (v5 < v6)
    {
      *(_QWORD *)(a2 + 88) = v6;
      v5 = v6;
    }
    v7 = (const void **)(a2 + 40);
  }
  else
  {
    if ((v3 & 8) == 0)
    {
      v4 = 0;
      *((_BYTE *)__dst + 23) = 0;
      goto LABEL_16;
    }
    v7 = (const void **)(a2 + 16);
    v5 = *(_QWORD *)(a2 + 32);
  }
  v8 = *v7;
  v4 = v5 - (_QWORD)*v7;
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v4 >= 0x17)
  {
    v9 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v9 = v4 | 7;
    v10 = v9 + 1;
    v11 = operator new(v9 + 1);
    v2[1] = v4;
    v2[2] = v10 | 0x8000000000000000;
    *v2 = v11;
    v2 = v11;
  }
  else
  {
    *((_BYTE *)__dst + 23) = v4;
    if (!v4)
      goto LABEL_16;
  }
  __dst = memmove(v2, v8, v4);
LABEL_16:
  *((_BYTE *)v2 + v4) = 0;
  return __dst;
}

unsigned int *std::__stable_sort<std::_ClassicAlgPolicy,gss::ResolveMultiAttributeVectorToMap(std::vector<std::pair<gss::StyleAttribute,unsigned short>> &)::$_1 &,std::__wrap_iter<std::pair<gss::StyleAttribute,unsigned short>*>>(unsigned int *result, unsigned int *a2, unint64_t a3, unsigned int *a4, uint64_t a5)
{
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  __int16 v9;
  char *v12;
  unint64_t v13;
  unsigned int *v14;
  unint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unsigned int *v24;
  char *v25;
  unsigned int *v26;
  unsigned int v27;
  char *v28;
  __int16 v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int *v32;
  unint64_t v33;
  char *v34;
  unsigned int *v35;

  if (a3 >= 2)
  {
    v6 = result;
    if (a3 == 2)
    {
      v7 = *(a2 - 2);
      v8 = *result;
      if (v7 < *result)
      {
        *result = v7;
        *(a2 - 2) = v8;
        v9 = *((_WORD *)result + 2);
        *((_WORD *)result + 2) = *((_WORD *)a2 - 2);
        *((_WORD *)a2 - 2) = v9;
      }
    }
    else if ((uint64_t)a3 <= 0)
    {
      if (result != a2)
      {
        v16 = result + 2;
        if (result + 2 != a2)
        {
          v17 = 0;
          v18 = result;
          do
          {
            v19 = *v18;
            v18 = v16;
            if (*v16 < v19)
            {
              v20 = *(_QWORD *)v16;
              v21 = v17;
              while (1)
              {
                v22 = (char *)result + v21;
                *((_DWORD *)v22 + 2) = v19;
                *((_WORD *)v22 + 6) = *(_WORD *)((char *)result + v21 + 4);
                if (!v21)
                  break;
                v19 = *((_DWORD *)v22 - 2);
                v21 -= 8;
                if (v19 <= v20)
                {
                  v23 = (uint64_t)result + v21 + 8;
                  goto LABEL_18;
                }
              }
              v23 = (uint64_t)result;
LABEL_18:
              *(_DWORD *)v23 = v20;
              *(_WORD *)(v23 + 4) = WORD2(v20);
            }
            v16 = v18 + 2;
            v17 += 8;
          }
          while (v18 + 2 != a2);
        }
      }
    }
    else
    {
      v12 = (char *)a4;
      v13 = a3 >> 1;
      v14 = &result[2 * (a3 >> 1)];
      v15 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,gss::ResolveMultiAttributeVectorToMap(std::vector<std::pair<gss::StyleAttribute,unsigned short>> &)::$_1 &,std::__wrap_iter<std::pair<gss::StyleAttribute,unsigned short>*>>(result, v14, v15, a4);
        v24 = (unsigned int *)&v12[8 * v13];
        result = std::__stable_sort_move<std::_ClassicAlgPolicy,gss::ResolveMultiAttributeVectorToMap(std::vector<std::pair<gss::StyleAttribute,unsigned short>> &)::$_1 &,std::__wrap_iter<std::pair<gss::StyleAttribute,unsigned short>*>>(&v6[2 * (a3 >> 1)], a2, a3 - (a3 >> 1), v24);
        v25 = &v12[8 * a3];
        v26 = v24;
        while (v26 != (unsigned int *)v25)
        {
          v27 = *v26;
          if (*v26 < *(_DWORD *)v12)
          {
            v28 = (char *)v26;
          }
          else
          {
            v27 = *(_DWORD *)v12;
            v28 = v12;
          }
          v29 = *((_WORD *)v28 + 2);
          if (*v26 < *(_DWORD *)v12)
            v26 += 2;
          else
            v12 += 8;
          *v6 = v27;
          *((_WORD *)v6 + 2) = v29;
          v6 += 2;
          if (v12 == (char *)v24)
          {
            if (v26 != (unsigned int *)v25)
            {
              v30 = 0;
              do
              {
                v31 = &v26[v30];
                v32 = &v6[v30];
                *v32 = v26[v30];
                *((_WORD *)v32 + 2) = v26[v30 + 1];
                v30 += 2;
              }
              while (v31 + 2 != (unsigned int *)v25);
            }
            return result;
          }
        }
        if (v12 != (char *)v24)
        {
          v33 = 0;
          do
          {
            v34 = &v12[v33];
            v35 = &v6[v33 / 4];
            *v35 = *(_DWORD *)&v12[v33];
            *((_WORD *)v35 + 2) = *(_WORD *)&v12[v33 + 4];
            v33 += 8;
          }
          while (v34 + 8 != (char *)v24);
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,gss::ResolveMultiAttributeVectorToMap(std::vector<std::pair<gss::StyleAttribute,unsigned short>> &)::$_1 &,std::__wrap_iter<std::pair<gss::StyleAttribute,unsigned short>*>>(result, v14, v15, a4, a5);
        std::__stable_sort<std::_ClassicAlgPolicy,gss::ResolveMultiAttributeVectorToMap(std::vector<std::pair<gss::StyleAttribute,unsigned short>> &)::$_1 &,std::__wrap_iter<std::pair<gss::StyleAttribute,unsigned short>*>>(&v6[2 * (a3 >> 1)], a2, a3 - (a3 >> 1), v12, a5);
        return (unsigned int *)std::__inplace_merge<std::_ClassicAlgPolicy,gss::ResolveMultiAttributeVectorToMap(std::vector<std::pair<gss::StyleAttribute,unsigned short>> &)::$_1 &,std::__wrap_iter<std::pair<gss::StyleAttribute,unsigned short>*>>((char *)v6, (char *)&v6[2 * (a3 >> 1)], (char *)a2, a3 >> 1, a3 - (a3 >> 1), v12, a5);
      }
    }
  }
  return result;
}

unsigned int *std::__stable_sort_move<std::_ClassicAlgPolicy,gss::ResolveMultiAttributeVectorToMap(std::vector<std::pair<gss::StyleAttribute,unsigned short>> &)::$_1 &,std::__wrap_iter<std::pair<gss::StyleAttribute,unsigned short>*>>(unsigned int *result, unsigned int *a2, unint64_t a3, unsigned int *a4)
{
  unsigned int *v4;
  unsigned int *v6;
  unsigned int v8;
  BOOL v9;
  unsigned int *v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  char *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  _BOOL4 v25;
  _BOOL4 v26;
  unsigned int *v27;
  unint64_t v28;
  unsigned int *v29;
  unint64_t v30;

  if (a3)
  {
    v4 = a4;
    v6 = result;
    if (a3 == 1)
    {
LABEL_10:
      *(_QWORD *)v4 = *(_QWORD *)v6;
      return result;
    }
    if (a3 == 2)
    {
      v8 = *(a2 - 2);
      v9 = v8 >= *result;
      if (v8 >= *result)
        v10 = result;
      else
        v10 = a2 - 2;
      *(_QWORD *)a4 = *(_QWORD *)v10;
      v4 = a4 + 2;
      if (v9)
        v6 = a2 - 2;
      goto LABEL_10;
    }
    if ((uint64_t)a3 > 8)
    {
      v20 = &result[2 * (a3 >> 1)];
      std::__stable_sort<std::_ClassicAlgPolicy,gss::ResolveMultiAttributeVectorToMap(std::vector<std::pair<gss::StyleAttribute,unsigned short>> &)::$_1 &,std::__wrap_iter<std::pair<gss::StyleAttribute,unsigned short>*>>(result, v20, a3 >> 1, a4, a3 >> 1);
      result = (unsigned int *)std::__stable_sort<std::_ClassicAlgPolicy,gss::ResolveMultiAttributeVectorToMap(std::vector<std::pair<gss::StyleAttribute,unsigned short>> &)::$_1 &,std::__wrap_iter<std::pair<gss::StyleAttribute,unsigned short>*>>(&v6[2 * (a3 >> 1)], a2, a3 - (a3 >> 1), &v4[2 * (a3 >> 1)], a3 - (a3 >> 1));
      v21 = &v6[2 * (a3 >> 1)];
      while (v21 != a2)
      {
        v22 = v21;
        v23 = *v21;
        v24 = *v6;
        v25 = *v21 >= *v6;
        v26 = *v21 < *v6;
        if (v23 >= *v6)
          v27 = v6;
        else
          v27 = v22;
        v21 = &v22[2 * v26];
        v6 += 2 * v25;
        *(_QWORD *)v4 = *(_QWORD *)v27;
        v4 += 2;
        if (v6 == v20)
        {
          if (v21 != a2)
          {
            v28 = 0;
            v29 = &v22[2 * (v23 < v24)];
            do
            {
              *(_QWORD *)&v4[v28] = *(_QWORD *)&v29[v28];
              v28 += 2;
            }
            while (&v29[v28] != a2);
          }
          return result;
        }
      }
      if (v6 != v20)
      {
        v30 = 0;
        do
        {
          *(_QWORD *)&v4[v30] = *(_QWORD *)&v6[v30];
          v30 += 2;
        }
        while (&v6[v30] != v20);
      }
    }
    else if (result != a2)
    {
      v11 = result + 2;
      *(_QWORD *)a4 = *(_QWORD *)result;
      if (result + 2 != a2)
      {
        v12 = 0;
        v13 = a4;
        v14 = a4;
        do
        {
          v15 = v11;
          v16 = *v14;
          v14 += 2;
          if (*v11 >= v16)
          {
            *(_QWORD *)v14 = *(_QWORD *)v11;
          }
          else
          {
            *((_QWORD *)v13 + 1) = *(_QWORD *)v13;
            v17 = (char *)a4;
            if (v13 != a4)
            {
              v18 = v12;
              while (1)
              {
                v17 = (char *)a4 + v18;
                v19 = *(unsigned int *)((char *)a4 + v18 - 8);
                if (*v15 >= v19)
                  break;
                *(_DWORD *)v17 = v19;
                *((_WORD *)v17 + 2) = *((_WORD *)v17 - 2);
                v18 -= 8;
                if (!v18)
                {
                  v17 = (char *)a4;
                  break;
                }
              }
            }
            *(_DWORD *)v17 = *v15;
            *((_WORD *)v17 + 2) = *((_WORD *)v6 + 6);
          }
          v11 = v15 + 2;
          v12 += 8;
          v13 = v14;
          v6 = v15;
        }
        while (v15 + 2 != a2);
      }
    }
  }
  return result;
}

char *std::__inplace_merge<std::_ClassicAlgPolicy,gss::ResolveMultiAttributeVectorToMap(std::vector<std::pair<gss::StyleAttribute,unsigned short>> &)::$_1 &,std::__wrap_iter<std::pair<gss::StyleAttribute,unsigned short>*>>(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  _DWORD *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  unsigned int v29;
  int v30;
  __int16 v31;
  char *v32;
  char *i;
  int v34;
  char *v35;
  char *v36;
  int v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  unsigned int v46;
  unsigned int v47;
  BOOL v48;
  char *v49;
  __int16 v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  unsigned int v54;
  BOOL v55;
  char *v56;
  __int16 v57;
  uint64_t v58;
  __int16 v59;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;

  if (a5)
  {
    while (a4 > a7 && a5 > a7)
    {
      if (!a4)
        return result;
      v10 = 0;
      v11 = *(_DWORD *)a2;
      v12 = -a4;
      while (1)
      {
        v13 = *(_DWORD *)((char *)v10 + (_QWORD)result);
        if (v11 < v13)
          break;
        v10 += 2;
        v48 = __CFADD__(v12++, 1);
        if (v48)
          return result;
      }
      if (-v12 >= a5)
      {
        if (v12 == -1)
        {
          v58 = (uint64_t)v10 + (_QWORD)result;
          *(_DWORD *)v58 = v11;
          *(_DWORD *)a2 = v13;
          v59 = *(_WORD *)(v58 + 4);
          *(_WORD *)(v58 + 4) = *((_WORD *)a2 + 2);
          *((_WORD *)a2 + 2) = v59;
          return result;
        }
        if (v12 <= 0)
          v24 = -v12;
        else
          v24 = 1 - v12;
        v23 = v24 >> 1;
        v17 = &result[8 * (v24 >> 1) + (_QWORD)v10];
        v16 = a2;
        if (a2 != a3)
        {
          v25 = (a3 - a2) >> 3;
          v16 = a2;
          do
          {
            v26 = v25 >> 1;
            v27 = &v16[8 * (v25 >> 1)];
            v29 = *(_DWORD *)v27;
            v28 = v27 + 8;
            v25 += ~(v25 >> 1);
            if (v29 < *(_DWORD *)v17)
              v16 = v28;
            else
              v25 = v26;
          }
          while (v25);
        }
        v15 = (v16 - a2) >> 3;
      }
      else
      {
        if (a5 >= 0)
          v14 = a5;
        else
          v14 = a5 + 1;
        v15 = v14 >> 1;
        v16 = &a2[8 * (v14 >> 1)];
        v17 = a2;
        if ((_DWORD *)(a2 - result) != v10)
        {
          v18 = (a2 - result - (uint64_t)v10) >> 3;
          v17 = (char *)v10 + (_QWORD)result;
          do
          {
            v19 = v18 >> 1;
            v20 = &v17[8 * (v18 >> 1)];
            v22 = *(_DWORD *)v20;
            v21 = v20 + 8;
            v18 += ~(v18 >> 1);
            if (*(_DWORD *)v16 < v22)
              v18 = v19;
            else
              v17 = v21;
          }
          while (v18);
        }
        v23 = (v17 - result - (uint64_t)v10) >> 3;
      }
      if (v17 == a2)
      {
        v32 = v16;
      }
      else if (v16 == a2)
      {
        v32 = v17;
      }
      else
      {
        v30 = *(_DWORD *)v17;
        *(_DWORD *)v17 = v11;
        *(_DWORD *)a2 = v30;
        v31 = *((_WORD *)v17 + 2);
        *((_WORD *)v17 + 2) = *((_WORD *)a2 + 2);
        *((_WORD *)a2 + 2) = v31;
        v32 = v17 + 8;
        for (i = a2 + 8; i != v16; i += 8)
        {
          if (v32 == a2)
            a2 = i;
          v34 = *(_DWORD *)v32;
          *(_DWORD *)v32 = *(_DWORD *)i;
          *(_DWORD *)i = v34;
          LOWORD(v34) = *((_WORD *)v32 + 2);
          *((_WORD *)v32 + 2) = *((_WORD *)i + 2);
          *((_WORD *)i + 2) = v34;
          v32 += 8;
        }
        if (v32 != a2)
        {
          v35 = v32;
          v36 = a2;
          do
          {
            while (1)
            {
              v37 = *(_DWORD *)v35;
              *(_DWORD *)v35 = *(_DWORD *)v36;
              *(_DWORD *)v36 = v37;
              LOWORD(v37) = *((_WORD *)v35 + 2);
              *((_WORD *)v35 + 2) = *((_WORD *)v36 + 2);
              *((_WORD *)v36 + 2) = v37;
              v35 += 8;
              v36 += 8;
              if (v36 == v16)
                break;
              if (v35 == a2)
                a2 = v36;
            }
            v36 = a2;
          }
          while (v35 != a2);
        }
      }
      a4 = -(v23 + v12);
      v38 = a5 - v15;
      if (v23 + v15 >= a5 - (v23 + v15) - v12)
      {
        v41 = v16;
        v42 = (char *)v10 + (_QWORD)result;
        std::__inplace_merge<std::_ClassicAlgPolicy,gss::ResolveMultiAttributeVectorToMap(std::vector<std::pair<gss::StyleAttribute,unsigned short>> &)::$_1 &,std::__wrap_iter<std::pair<gss::StyleAttribute,unsigned short>*>>(v32, v41, a3, a4, a5 - v15, a6, a7);
        result = v42;
        a2 = v17;
        v38 = v15;
        a4 = v23;
        a3 = v32;
      }
      else
      {
        v39 = v17;
        v40 = a3;
        std::__inplace_merge<std::_ClassicAlgPolicy,gss::ResolveMultiAttributeVectorToMap(std::vector<std::pair<gss::StyleAttribute,unsigned short>> &)::$_1 &,std::__wrap_iter<std::pair<gss::StyleAttribute,unsigned short>*>>((char *)v10 + (_QWORD)result, v39, v32, v23, v15, a6, a7);
        a3 = v40;
        result = v32;
        a2 = v16;
      }
      a5 = v38;
      if (!v38)
        return result;
    }
    if (a4 <= a5)
    {
      if (result != a2)
      {
        v51 = 0;
        do
        {
          *(_QWORD *)&a6[v51] = *(_QWORD *)&result[v51];
          v51 += 8;
        }
        while (&result[v51] != a2);
        if (v51)
        {
          v52 = &a6[v51];
          v53 = (uint64_t)&a6[v51 - 8];
          while (a2 != a3)
          {
            v54 = *(_DWORD *)a2;
            v55 = *(_DWORD *)a2 >= *(_DWORD *)a6;
            if (*(_DWORD *)a2 < *(_DWORD *)a6)
            {
              v56 = a2;
            }
            else
            {
              v54 = *(_DWORD *)a6;
              v56 = a6;
            }
            if (*(_DWORD *)a2 < *(_DWORD *)a6)
              a2 += 8;
            v57 = *((_WORD *)v56 + 2);
            if (v55)
              a6 += 8;
            *(_DWORD *)result = v54;
            *((_WORD *)result + 2) = v57;
            result += 8;
            if (v52 == a6)
              return result;
          }
          v62 = 0;
          do
          {
            v63 = &result[v62];
            v64 = &a6[v62];
            *(_DWORD *)v63 = *(_DWORD *)&a6[v62];
            *((_WORD *)v63 + 2) = *(_WORD *)&a6[v62 + 4];
            v62 += 8;
          }
          while ((char *)v53 != v64);
        }
      }
    }
    else if (a3 != a2)
    {
      v43 = 0;
      do
      {
        *(_QWORD *)&a6[v43] = *(_QWORD *)&a2[v43];
        v43 += 8;
      }
      while (&a2[v43] != a3);
      if (v43)
      {
        v44 = &a6[v43];
        v45 = a3 - 4;
        while (a2 != result)
        {
          v46 = *((_DWORD *)a2 - 2);
          v47 = *((_DWORD *)v44 - 2);
          v48 = v47 >= v46;
          if (v47 < v46)
          {
            v49 = a2;
          }
          else
          {
            v46 = *((_DWORD *)v44 - 2);
            v49 = v44;
          }
          if (!v48)
            a2 -= 8;
          v50 = *((_WORD *)v49 - 2);
          if (v48)
            v44 -= 8;
          *((_DWORD *)v45 - 1) = v46;
          *(_WORD *)v45 = v50;
          v45 -= 8;
          if (v44 == a6)
            return result;
        }
        v60 = 0;
        do
        {
          v61 = &v45[v60];
          *((_DWORD *)v61 - 1) = *(_DWORD *)&v44[v60 - 8];
          *(_WORD *)v61 = *(_WORD *)&v44[v60 - 4];
          v60 -= 8;
        }
        while (&v44[v60] != a6);
      }
    }
  }
  return result;
}

void sub_19FF62D90(_Unwind_Exception *a1)
{
  pthread_rwlock_t *v1;

  geo::read_write_lock::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19FF62EC8(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_19FF63158(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void geo::BasicAllocationTracker::debugInfo(geo::BasicAllocationTracker *this, os_log_t oslog)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (os_log_type_enabled(oslog, OS_LOG_TYPE_INFO))
  {
    v4 = *(_QWORD *)this;
    v6 = 136315138;
    v7 = v4;
    _os_log_impl(&dword_19F029000, oslog, OS_LOG_TYPE_INFO, "BasicAllocationTracker(%s)", (uint8_t *)&v6, 0xCu);
  }
  if (os_log_type_enabled(oslog, OS_LOG_TYPE_INFO))
  {
    v5 = atomic_load((unint64_t *)this + 2);
    v6 = 134217984;
    v7 = v5;
    _os_log_impl(&dword_19F029000, oslog, OS_LOG_TYPE_INFO, "\tCount: %zu", (uint8_t *)&v6, 0xCu);
  }
}

void *gss::defaultValueForKey<gss::PropertyID,unsigned char>(int a1)
{
  void *v1;

  v1 = &gss::defaultValueForKey<gss::PropertyID,unsigned char>(gss::PropertyID)::_defaultValue;
  if (a1 == 474)
    v1 = &gss::defaultValueForKey<gss::PropertyID,unsigned char>(gss::PropertyID)::kDefaultLabelClusterElementCount;
  if (a1 == 469)
    return &gss::defaultValueForKey<gss::PropertyID,unsigned char>(gss::PropertyID)::kDefaultLabelCollisionGroup;
  else
    return v1;
}

void *gss::defaultValueForKey<gss::PropertyID,int>(int a1)
{
  void *v1;

  v1 = &gss::defaultValueForKey<gss::PropertyID,int>(gss::PropertyID)::_defaultValue;
  if (a1 == 235)
    v1 = &gss::defaultValueForKey<gss::PropertyID,int>(gss::PropertyID)::kDefaultLabelShieldDisplayThreshold;
  if (a1 == 219)
    return &gss::defaultValueForKey<gss::PropertyID,int>(gss::PropertyID)::kDefaultLabelRoadCrossingThreshold;
  else
    return v1;
}

void *gss::defaultValueForKey<gss::PropertyID,gm::Matrix<float,2,1>>()
{
  return &gss::defaultValueForKey<gss::PropertyID,gm::Matrix<float,2,1>>(gss::PropertyID)::_defaultValue;
}

uint64_t gss::MaskToLabelPosition(int a1)
{
  uint64_t v1;

  v1 = 0;
  while (word_1A01991E2[v1] != a1)
  {
    if (++v1 == 10)
    {
      LOBYTE(v1) = 9;
      return v1;
    }
  }
  return v1;
}

uint64_t gss::LabelPositionToMask(int a1)
{
  return word_1A01991E2[a1];
}

uint64_t gss::animationCurveDecoder<gss::PropertyID>(uint64_t a1, unint64_t a2, unsigned __int8 a3, unsigned int a4, uint64_t a5, _QWORD *a6)
{
  return gss::enumDecoder<gss::PropertyID>(a1, a2, a3, 4u, a4, a6);
}

uint64_t gss::polygonTypeDecoder<gss::PropertyID>(uint64_t a1, unint64_t a2, unsigned __int8 a3, unsigned int a4, uint64_t a5, _QWORD *a6)
{
  return gss::enumDecoder<gss::PropertyID>(a1, a2, a3, 3u, a4, a6);
}

uint64_t gss::railroadPatternDecoder<gss::PropertyID>(uint64_t a1, unint64_t a2, unsigned __int8 a3, unsigned int a4, uint64_t a5, _QWORD *a6)
{
  return gss::enumDecoder<gss::PropertyID>(a1, a2, a3, 1u, a4, a6);
}

uint64_t gss::lineDrawStyleDecoder<gss::PropertyID>(uint64_t a1, unint64_t a2, unsigned __int8 a3, unsigned int a4, uint64_t a5, _QWORD *a6)
{
  return gss::enumDecoder<gss::PropertyID>(a1, a2, a3, 1u, a4, a6);
}

uint64_t gss::blendModeDecoder<gss::PropertyID>(uint64_t a1, unint64_t a2, unsigned __int8 a3, unsigned int a4, uint64_t a5, _QWORD *a6)
{
  return gss::enumDecoder<gss::PropertyID>(a1, a2, a3, 0x1Bu, a4, a6);
}

uint64_t gss::labelEasingFunctionDecoder<gss::PropertyID>(uint64_t a1, unint64_t a2, unsigned __int8 a3, unsigned int a4, uint64_t a5, _QWORD *a6)
{
  return gss::enumDecoder<gss::PropertyID>(a1, a2, a3, 5u, a4, a6);
}

uint64_t gss::labelSizingModeDecoder<gss::PropertyID>(uint64_t a1, unint64_t a2, unsigned __int8 a3, unsigned int a4, uint64_t a5, _QWORD *a6)
{
  return gss::enumDecoder<gss::PropertyID>(a1, a2, a3, 1u, a4, a6);
}

uint64_t gss::transitPlacementDecoder<gss::PropertyID>(uint64_t a1, unint64_t a2, unsigned __int8 a3, unsigned int a4, uint64_t a5, _QWORD *a6)
{
  return gss::enumDecoder<gss::PropertyID>(a1, a2, a3, 1u, a4, a6);
}

uint64_t gss::grlIconSizeGroupDecoder<gss::PropertyID>(uint64_t a1, unint64_t a2, unsigned __int8 a3, unsigned int a4, uint64_t a5, _QWORD *a6)
{
  return gss::enumDecoder<gss::PropertyID>(a1, a2, a3, 9u, a4, a6);
}

uint64_t gss::labelUnitStyleDecoder<gss::PropertyID>(uint64_t a1, unint64_t a2, unsigned __int8 a3, unsigned int a4, uint64_t a5, _QWORD *a6)
{
  return gss::enumDecoder<gss::PropertyID>(a1, a2, a3, 4u, a4, a6);
}

uint64_t gss::maskTargetDecoder<gss::PropertyID>(uint64_t a1, unint64_t a2, unsigned __int8 a3, unsigned int a4, uint64_t a5, _QWORD *a6)
{
  return gss::enumDecoder<gss::PropertyID>(a1, a2, a3, 1u, a4, a6);
}

uint64_t gss::maneuverDisplayModeDecoder<gss::PropertyID>(uint64_t a1, unint64_t a2, unsigned __int8 a3, unsigned int a4, uint64_t a5, _QWORD *a6)
{
  return gss::enumDecoder<gss::PropertyID>(a1, a2, a3, 2u, a4, a6);
}

uint64_t gss::unknownPropertyDecoder<gss::PropertyID>()
{
  return 1;
}

void std::__function::__func<BOOL (*)(geo::ibitstream &,gss::StylePropertySet<gss::PropertyID> &,unsigned long long,gss::StylePropertyIndex,gss::DecodingContext const&,std::ostringstream &),std::allocator<BOOL (*)(geo::ibitstream &,gss::StylePropertySet<gss::PropertyID> &,unsigned long long,gss::StylePropertyIndex,gss::DecodingContext const&,std::ostringstream &)>,BOOL ()(geo::ibitstream &,gss::StylePropertySet<gss::PropertyID> &,unsigned long long,gss::StylePropertyIndex,gss::DecodingContext const&,std::ostringstream &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<BOOL (*)(geo::ibitstream &,gss::StylePropertySet<gss::PropertyID> &,unsigned long long,gss::StylePropertyIndex,gss::DecodingContext const&,std::ostringstream &),std::allocator<BOOL (*)(geo::ibitstream &,gss::StylePropertySet<gss::PropertyID> &,unsigned long long,gss::StylePropertyIndex,gss::DecodingContext const&,std::ostringstream &)>,BOOL ()(geo::ibitstream &,gss::StylePropertySet<gss::PropertyID> &,unsigned long long,gss::StylePropertyIndex,gss::DecodingContext const&,std::ostringstream &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42C6FD8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BOOL (*)(geo::ibitstream &,gss::StylePropertySet<gss::PropertyID> &,unsigned long long,gss::StylePropertyIndex,gss::DecodingContext const&,std::ostringstream &),std::allocator<BOOL (*)(geo::ibitstream &,gss::StylePropertySet<gss::PropertyID> &,unsigned long long,gss::StylePropertyIndex,gss::DecodingContext const&,std::ostringstream &)>,BOOL ()(geo::ibitstream &,gss::StylePropertySet<gss::PropertyID> &,unsigned long long,gss::StylePropertyIndex,gss::DecodingContext const&,std::ostringstream &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42C6FD8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<BOOL (*)(geo::ibitstream &,gss::StylePropertySet<gss::PropertyID> &,unsigned long long,gss::StylePropertyIndex,gss::DecodingContext const&,std::ostringstream &),std::allocator<BOOL (*)(geo::ibitstream &,gss::StylePropertySet<gss::PropertyID> &,unsigned long long,gss::StylePropertyIndex,gss::DecodingContext const&,std::ostringstream &)>,BOOL ()(geo::ibitstream &,gss::StylePropertySet<gss::PropertyID> &,unsigned long long,gss::StylePropertyIndex,gss::DecodingContext const&,std::ostringstream &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<BOOL (*)(geo::ibitstream &,gss::StylePropertySet<gss::PropertyID> &,unsigned long long,gss::StylePropertyIndex,gss::DecodingContext const&,std::ostringstream &),std::allocator<BOOL (*)(geo::ibitstream &,gss::StylePropertySet<gss::PropertyID> &,unsigned long long,gss::StylePropertyIndex,gss::DecodingContext const&,std::ostringstream &)>,BOOL ()(geo::ibitstream &,gss::StylePropertySet<gss::PropertyID> &,unsigned long long,gss::StylePropertyIndex,gss::DecodingContext const&,std::ostringstream &)>::target_type()
{
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2 == v3)
    return 1;
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3))
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  return 0;
}

uint64_t **gss::FeatureAttributeSet::setByReplacingAttributes@<X0>(gss::Allocator *a1@<X0>, unsigned int **a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned int *v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64x2_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _WORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _WORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  int64x2_t v71;
  unint64_t v72;
  uint64_t v73;
  int64x2_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int *v77;
  unsigned int *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t *v82;
  int64x2_t v83;
  unint64_t v84;
  _QWORD v85[2];
  int64x2_t *v86;
  int64x2_t v87;
  uint64_t v88;
  _QWORD *v89;

  v5 = *a2;
  v6 = a2[1];
  v8 = *(_QWORD *)a1;
  v7 = *((_QWORD *)a1 + 1);
  v83 = 0uLL;
  v84 = 0;
  v9 = gss::Allocator::instance(a1);
  v10 = (v7 - v8) >> 3;
  if (v6 == v5)
    v11 = 0;
  else
    v11 = ((unint64_t)((char *)v6 - (char *)v5 - 8) >> 3) + 1;
  v82 = a3;
  v85[0] = v9;
  v12 = v10 + v11;
  if (v10 + v11)
  {
    if (v12 >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v89 = v85;
    v13 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, 8 * v12, 4);
    v14 = v83.i64[1];
    v15 = v83.i64[0];
    if (v83.i64[1] == v83.i64[0])
    {
      v18 = vdupq_n_s64(v83.u64[1]);
      v16 = v13;
    }
    else
    {
      v16 = v13;
      do
      {
        v17 = *(_QWORD *)(v14 - 8);
        v14 -= 8;
        *(_QWORD *)(v16 - 8) = v17;
        v16 -= 8;
      }
      while (v14 != v15);
      v18 = v83;
    }
    v83.i64[0] = v16;
    v83.i64[1] = v13;
    v87 = v18;
    v21 = v84;
    v84 = v13 + 8 * v12;
    v88 = v21;
    v86 = (int64x2_t *)v18.i64[0];
    std::__split_buffer<std::pair<gss::StyleAttribute,unsigned short>,geo::StdAllocator<std::pair<gss::StyleAttribute,unsigned short>,gss::Allocator> &>::~__split_buffer((uint64_t)&v86);
    v20 = (_QWORD *)v83.i64[1];
    v19 = v83.i64[0];
  }
  else
  {
    v19 = 0;
    v20 = 0;
  }
  v23 = *(_QWORD *)a1;
  v22 = (_QWORD *)*((_QWORD *)a1 + 1);
  v24 = (uint64_t)v22 - *(_QWORD *)a1;
  if (v24 >= 1)
  {
    v25 = v24 >> 3;
    v26 = (uint64_t)v20 - v19;
    v27 = v19 + (((unint64_t)v20 - v19) & 0xFFFFFFFFFFFFFFF8);
    if (v24 >> 3 > (uint64_t)(v84 - (_QWORD)v20) >> 3)
    {
      v28 = v26 >> 3;
      v29 = v25 + (v26 >> 3);
      if (v29 >> 61)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v30 = v84 - v19;
      if (v30 >> 2 > v29)
        v29 = v30 >> 2;
      if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
        v31 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v31 = v29;
      v89 = v85;
      if (v31)
        v32 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v85[0] + 16))(v85[0], 8 * v31, 4);
      else
        v32 = 0;
      v43 = (_QWORD *)(v32 + 8 * v28);
      v88 = v32 + 8 * v31;
      v44 = 8 * v25;
      v45 = v43;
      v46 = &v43[v25];
      do
      {
        if (v45)
          *v45 = *(_QWORD *)v23;
        ++v45;
        v23 += 8;
        v44 -= 8;
      }
      while (v44);
      v87.i64[1] = (uint64_t)&v43[v25];
      v47 = v83.i64[0];
      if (v83.i64[0] != v27)
      {
        v48 = v27;
        do
        {
          v49 = *(_QWORD *)(v48 - 8);
          v48 -= 8;
          *--v43 = v49;
        }
        while (v48 != v47);
        v46 = (_QWORD *)v87.i64[1];
      }
      v50 = v83.i64[1];
      if (v83.i64[1] != v27)
      {
        do
        {
          if (v46)
            *v46 = *(_QWORD *)v27;
          v27 += 8;
          ++v46;
        }
        while (v27 != v50);
        v27 = v83.i64[1];
      }
      v51 = (uint64_t *)v83.i64[0];
      v52 = v84;
      v83.i64[0] = (uint64_t)v43;
      v83.i64[1] = (uint64_t)v46;
      v84 = v88;
      v87.i64[1] = v27;
      v88 = v52;
      v86 = (int64x2_t *)v51;
      v87.i64[0] = (uint64_t)v51;
      std::__split_buffer<std::pair<gss::StyleAttribute,unsigned short>,geo::StdAllocator<std::pair<gss::StyleAttribute,unsigned short>,gss::Allocator> &>::~__split_buffer((uint64_t)&v86);
      goto LABEL_58;
    }
    v33 = ((uint64_t)v20 - v27) >> 3;
    if (v33 >= v25)
    {
      v34 = (_QWORD *)(v23 + 8 * v25);
      v35 = v20;
    }
    else
    {
      v34 = (_QWORD *)(v23 + 8 * v33);
      v35 = v20;
      if (v34 != v22)
      {
        v36 = v34;
        v37 = v20;
        do
        {
          if (v37)
            *v37 = *v36;
          ++v36;
          ++v37;
          ++v35;
        }
        while (v36 != v22);
      }
      v83.i64[1] = (uint64_t)v35;
      if ((uint64_t)v20 - v27 < 1)
        goto LABEL_58;
    }
    v38 = (_QWORD *)(v27 + 8 * v25);
    v39 = &v35[-v25];
    v40 = v35;
    if (v39 < v20)
    {
      v40 = v35;
      do
      {
        if (v40)
          *v40 = *v39;
        ++v39;
        ++v40;
      }
      while (v39 < v20);
    }
    v83.i64[1] = (uint64_t)v40;
    if (v35 != v38)
    {
      v41 = (_WORD *)v35 - 2;
      v42 = 8 * (v35 - v38);
      do
      {
        *((_DWORD *)v41 - 1) = *(_DWORD *)(v27 + v42 - 8);
        *v41 = *(_WORD *)(v27 + v42 - 4);
        v41 -= 4;
        v42 -= 8;
      }
      while (v42);
    }
    for (; (_QWORD *)v23 != v34; v27 += 8)
    {
      *(_DWORD *)v27 = *(_DWORD *)v23;
      *(_WORD *)(v27 + 4) = *(_WORD *)(v23 + 4);
      v23 += 8;
    }
  }
LABEL_58:
  if (v5 != v6)
  {
    if (v10 <= 1)
      v53 = 1;
    else
      v53 = (v7 - v8) >> 3;
    do
    {
      v54 = *v5;
      if (v7 == v8)
      {
LABEL_66:
        v57 = *((unsigned __int16 *)v5 + 2);
        v58 = v83.i64[1];
        if (v83.i64[1] >= v84)
        {
          v60 = (v83.i64[1] - v83.i64[0]) >> 3;
          v61 = v60 + 1;
          if ((unint64_t)(v60 + 1) >> 61)
            std::vector<double>::__throw_length_error[abi:ne180100]();
          v62 = v84 - v83.i64[0];
          if ((uint64_t)(v84 - v83.i64[0]) >> 2 > v61)
            v61 = v62 >> 2;
          if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8)
            v63 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v63 = v61;
          v89 = v85;
          if (v63)
          {
            v64 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v85[0] + 16))(v85[0], 8 * v63, 4);
            v65 = (uint64_t *)(v64 + 8 * v60);
            v66 = v64 + 8 * v63;
            if (v64)
              *v65 = v54 | (v57 << 32);
          }
          else
          {
            v66 = 0;
            v65 = (uint64_t *)(8 * v60);
          }
          v67 = v83.i64[1];
          v68 = v83.i64[0];
          if (v83.i64[1] == v83.i64[0])
          {
            v71 = vdupq_n_s64(v83.u64[1]);
            v69 = v65;
          }
          else
          {
            v69 = v65;
            do
            {
              v70 = *(_QWORD *)(v67 - 8);
              v67 -= 8;
              *--v69 = v70;
            }
            while (v67 != v68);
            v71 = v83;
          }
          v59 = v65 + 1;
          v83.i64[0] = (uint64_t)v69;
          v83.i64[1] = (uint64_t)(v65 + 1);
          v87 = v71;
          v72 = v84;
          v84 = v66;
          v88 = v72;
          v86 = (int64x2_t *)v71.i64[0];
          std::__split_buffer<std::pair<gss::StyleAttribute,unsigned short>,geo::StdAllocator<std::pair<gss::StyleAttribute,unsigned short>,gss::Allocator> &>::~__split_buffer((uint64_t)&v86);
        }
        else
        {
          if (v83.i64[1])
            *(_QWORD *)v83.i64[1] = v54 | (v57 << 32);
          v59 = (_QWORD *)(v58 + 8);
        }
        v83.i64[1] = (uint64_t)v59;
      }
      else
      {
        v55 = (_WORD *)(v83.i64[0] + 4);
        v56 = v53;
        while (*((_DWORD *)v55 - 1) != (_DWORD)v54)
        {
          v55 += 4;
          if (!--v56)
            goto LABEL_66;
        }
        *v55 = *((_WORD *)v5 + 2);
      }
      v5 += 2;
    }
    while (v5 != v6);
  }
  *v82 = 0;
  v82[1] = 0;
  v73 = v85[0];
  v82[2] = 0;
  v82[3] = v73;
  v74 = v83;
  v86 = (int64x2_t *)v82;
  v87.i8[0] = 0;
  if (v83.i64[1] == v83.i64[0])
  {
    v77 = 0;
    v78 = 0;
  }
  else
  {
    std::vector<std::pair<gss::StyleAttribute,unsigned short>,geo::StdAllocator<std::pair<gss::StyleAttribute,unsigned short>,gss::Allocator>>::__vallocate[abi:ne180100]((uint64_t)v82, (v83.i64[1] - v83.i64[0]) >> 3);
    v75 = 0;
    v76 = v82[1];
    do
    {
      if (v76 + v75)
        *(_QWORD *)(v76 + v75) = *(_QWORD *)(v74.i64[0] + v75);
      v75 += 8;
    }
    while (v74.i64[0] + v75 != v74.i64[1]);
    v77 = (unsigned int *)(v76 + v75);
    v82[1] = v76 + v75;
    v78 = (unsigned int *)*v82;
  }
  v79 = 126 - 2 * __clz(((char *)v77 - (char *)v78) >> 3);
  if (v77 == v78)
    v80 = 0;
  else
    v80 = v79;
  std::__introsort<std::_ClassicAlgPolicy,gss::FeatureAttributeSet::sort(void)::$_0 &,std::pair<gss::StyleAttribute,unsigned short> *,false>(v78, v77, v80, 1);
  v86 = &v83;
  return std::vector<std::pair<gss::StyleAttribute,unsigned short>,geo::StdAllocator<std::pair<gss::StyleAttribute,unsigned short>,gss::Allocator>>::__destroy_vector::operator()[abi:ne180100]((uint64_t **)&v86);
}

void sub_19FF63A18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char *a15)
{
  a15 = &a11;
  std::vector<std::pair<gss::StyleAttribute,unsigned short>,geo::StdAllocator<std::pair<gss::StyleAttribute,unsigned short>,gss::Allocator>>::__destroy_vector::operator()[abi:ne180100]((uint64_t **)&a15);
  _Unwind_Resume(a1);
}

uint64_t gss::FeatureAttributeSet::isSuperset(gss::FeatureAttributeSet *this, const FeatureAttributeSet *a2)
{
  uint64_t v2;
  char *var1;
  char *var0;
  uint64_t result;
  int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;

  v2 = *(_QWORD *)this;
  var0 = (char *)a2->var0.var0;
  var1 = (char *)a2->var0.var1;
  if (*((_QWORD *)this + 1) - *(_QWORD *)this < (unint64_t)(var1 - (char *)a2->var0.var0))
    return 0;
  if (var0 != var1)
  {
    v6 = 0;
    result = 1;
    while (1)
    {
      v7 = *(_DWORD *)var0;
      v8 = v6;
      v9 = *(_DWORD *)(v2 + 8 * v6);
      if (v9 > *(_DWORD *)var0)
        return 0;
      if (v9 != v7)
      {
        do
        {
          v8 = ++v6;
          v10 = *(_DWORD *)(v2 + 8 * v6);
          if (v10 > v7)
            return 0;
        }
        while (v10 != v7);
      }
      if (*((unsigned __int16 *)var0 + 2) != *(unsigned __int16 *)(v2 + 8 * v8 + 4))
        return 0;
      ++v6;
      var0 += 8;
      if (var0 == var1)
        return result;
    }
  }
  return 1;
}

uint64_t gss::FeatureAttributeSet::getValueForAttributeKey(uint64_t *a1, int a2, _WORD *a3)
{
  uint64_t i;

  for (i = *a1; ; i += 8)
  {
    if (i == a1[1])
      return 0;
    if (*(_DWORD *)i == a2)
      break;
  }
  *a3 = *(_WORD *)(i + 4);
  return 1;
}

uint64_t gss::FeatureAttributeSet::eraseKeyValuePair(uint64_t *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v3 = *a1;
  v2 = a1[1];
  if (*a1 == v2)
    return 0;
  v4 = 0;
  while (*(_DWORD *)(v3 + v4) != a2)
  {
    v4 += 8;
    if (v3 + v4 == v2)
      return 0;
  }
  v6 = v3 + v4;
  v7 = v6 + 8;
  if (v6 + 8 != v2)
  {
    do
    {
      *(_DWORD *)(v7 - 8) = *(_DWORD *)v7;
      *(_WORD *)(v7 - 4) = *(_WORD *)(v7 + 4);
      v7 += 8;
    }
    while (v7 != v2);
    v6 = v7 - 8;
  }
  a1[1] = v6;
  return 1;
}

unsigned int *gss::FeatureAttributeSet::sort(gss::FeatureAttributeSet *this)
{
  unsigned int *v1;
  unint64_t v2;
  uint64_t v3;

  v1 = (unsigned int *)*((_QWORD *)this + 1);
  v2 = 126 - 2 * __clz(((uint64_t)v1 - *(_QWORD *)this) >> 3);
  if (v1 == *(unsigned int **)this)
    v3 = 0;
  else
    v3 = v2;
  return std::__introsort<std::_ClassicAlgPolicy,gss::FeatureAttributeSet::sort(void)::$_0 &,std::pair<gss::StyleAttribute,unsigned short> *,false>(*(unsigned int **)this, v1, v3, 1);
}

unsigned int *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,gss::FeatureAttributeSet::sort(void)::$_0 &,std::pair<gss::StyleAttribute,unsigned short> *>(unsigned int *result, unsigned int *a2, unsigned int *a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  __int16 v6;
  __int16 v7;
  unsigned int v8;
  __int16 v9;
  __int16 v10;

  v3 = *a2;
  v4 = *result;
  v5 = *a3;
  if (*a2 >= *result)
  {
    if (v5 < v3)
    {
      *a2 = v5;
      *a3 = v3;
      v7 = *((_WORD *)a2 + 2);
      *((_WORD *)a2 + 2) = *((_WORD *)a3 + 2);
      *((_WORD *)a3 + 2) = v7;
      v8 = *result;
      if (*a2 < *result)
      {
        *result = *a2;
        *a2 = v8;
        v9 = *((_WORD *)result + 2);
        *((_WORD *)result + 2) = *((_WORD *)a2 + 2);
        *((_WORD *)a2 + 2) = v9;
      }
    }
  }
  else if (v5 >= v3)
  {
    *result = v3;
    *a2 = v4;
    v10 = *((_WORD *)result + 2);
    *((_WORD *)result + 2) = *((_WORD *)a2 + 2);
    *((_WORD *)a2 + 2) = v10;
    if (*a3 < v4)
    {
      *a2 = *a3;
      *a3 = v4;
      *((_WORD *)a2 + 2) = *((_WORD *)a3 + 2);
      *((_WORD *)a3 + 2) = v10;
    }
  }
  else
  {
    *result = v5;
    *a3 = v4;
    v6 = *((_WORD *)result + 2);
    *((_WORD *)result + 2) = *((_WORD *)a3 + 2);
    *((_WORD *)a3 + 2) = v6;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,gss::FeatureAttributeSet::sort(void)::$_0 &,std::pair<gss::StyleAttribute,unsigned short> *>(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unsigned int v6;
  unsigned int v7;
  __int16 v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  __int16 v20;
  unsigned int v21;
  unsigned int v22;
  __int16 v23;
  __int16 v24;
  unsigned int v25;
  __int16 v26;
  unsigned int v27;
  __int16 v28;

  v4 = ((uint64_t)a2 - a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 2);
      v7 = *(_DWORD *)a1;
      if (v6 < *(_DWORD *)a1)
      {
        *(_DWORD *)a1 = v6;
        *(a2 - 2) = v7;
        v8 = *(_WORD *)(a1 + 4);
        *(_WORD *)(a1 + 4) = *((_WORD *)a2 - 2);
        *((_WORD *)a2 - 2) = v8;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,gss::FeatureAttributeSet::sort(void)::$_0 &,std::pair<gss::StyleAttribute,unsigned short> *>((unsigned int *)a1, (unsigned int *)(a1 + 8), a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,gss::FeatureAttributeSet::sort(void)::$_0 &,std::pair<gss::StyleAttribute,unsigned short> *>(a1, a1 + 8, a1 + 16, (uint64_t)(a2 - 2));
      return 1;
    case 5:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,gss::FeatureAttributeSet::sort(void)::$_0 &,std::pair<gss::StyleAttribute,unsigned short> *>(a1, a1 + 8, a1 + 16, a1 + 24);
      v18 = *(a2 - 2);
      v19 = *(_DWORD *)(a1 + 24);
      if (v18 < v19)
      {
        *(_DWORD *)(a1 + 24) = v18;
        *(a2 - 2) = v19;
        v20 = *(_WORD *)(a1 + 28);
        *(_WORD *)(a1 + 28) = *((_WORD *)a2 - 2);
        *((_WORD *)a2 - 2) = v20;
        v21 = *(_DWORD *)(a1 + 24);
        v22 = *(_DWORD *)(a1 + 16);
        if (v21 < v22)
        {
          *(_DWORD *)(a1 + 16) = v21;
          *(_DWORD *)(a1 + 24) = v22;
          v23 = *(_WORD *)(a1 + 20);
          v24 = *(_WORD *)(a1 + 28);
          *(_WORD *)(a1 + 20) = v24;
          *(_WORD *)(a1 + 28) = v23;
          v25 = *(_DWORD *)(a1 + 8);
          if (v21 < v25)
          {
            *(_DWORD *)(a1 + 8) = v21;
            *(_DWORD *)(a1 + 16) = v25;
            v26 = *(_WORD *)(a1 + 12);
            *(_WORD *)(a1 + 12) = v24;
            *(_WORD *)(a1 + 20) = v26;
            v27 = *(_DWORD *)a1;
            if (v21 < *(_DWORD *)a1)
            {
              *(_DWORD *)a1 = v21;
              *(_DWORD *)(a1 + 8) = v27;
              v28 = *(_WORD *)(a1 + 4);
              *(_WORD *)(a1 + 4) = v24;
              *(_WORD *)(a1 + 12) = v28;
            }
          }
        }
      }
      return 1;
    default:
      v9 = (unsigned int *)(a1 + 16);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,gss::FeatureAttributeSet::sort(void)::$_0 &,std::pair<gss::StyleAttribute,unsigned short> *>((unsigned int *)a1, (unsigned int *)(a1 + 8), (unsigned int *)(a1 + 16));
      v10 = (unsigned int *)(a1 + 24);
      if ((unsigned int *)(a1 + 24) == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *v9;
    if (*v10 < *v9)
    {
      v14 = *(_QWORD *)v10;
      v15 = v11;
      while (1)
      {
        v16 = a1 + v15;
        *(_DWORD *)(v16 + 24) = v13;
        *(_WORD *)(v16 + 28) = *(_WORD *)(a1 + v15 + 20);
        if (v15 == -16)
          break;
        v13 = *(_DWORD *)(v16 + 8);
        v15 -= 8;
        if (v13 <= v14)
        {
          v17 = a1 + v15 + 24;
          goto LABEL_13;
        }
      }
      v17 = a1;
LABEL_13:
      *(_DWORD *)v17 = v14;
      *(_WORD *)(v17 + 4) = WORD2(v14);
      if (++v12 == 8)
        return v10 + 2 == a2;
    }
    v9 = v10;
    v11 += 8;
    v10 += 2;
    if (v10 == a2)
      return 1;
  }
}

unsigned int *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,gss::FeatureAttributeSet::sort(void)::$_0 &,std::pair<gss::StyleAttribute,unsigned short> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int *result;
  unsigned int v9;
  __int16 v10;
  unsigned int v11;
  __int16 v12;
  unsigned int v13;
  __int16 v14;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,gss::FeatureAttributeSet::sort(void)::$_0 &,std::pair<gss::StyleAttribute,unsigned short> *>((unsigned int *)a1, (unsigned int *)a2, (unsigned int *)a3);
  v9 = *(_DWORD *)a3;
  if (*(_DWORD *)a4 < *(_DWORD *)a3)
  {
    *(_DWORD *)a3 = *(_DWORD *)a4;
    *(_DWORD *)a4 = v9;
    v10 = *(_WORD *)(a3 + 4);
    *(_WORD *)(a3 + 4) = *(_WORD *)(a4 + 4);
    *(_WORD *)(a4 + 4) = v10;
    v11 = *(_DWORD *)a2;
    if (*(_DWORD *)a3 < *(_DWORD *)a2)
    {
      *(_DWORD *)a2 = *(_DWORD *)a3;
      *(_DWORD *)a3 = v11;
      v12 = *(_WORD *)(a2 + 4);
      *(_WORD *)(a2 + 4) = *(_WORD *)(a3 + 4);
      *(_WORD *)(a3 + 4) = v12;
      v13 = *(_DWORD *)a1;
      if (*(_DWORD *)a2 < *(_DWORD *)a1)
      {
        *(_DWORD *)a1 = *(_DWORD *)a2;
        *(_DWORD *)a2 = v13;
        v14 = *(_WORD *)(a1 + 4);
        *(_WORD *)(a1 + 4) = *(_WORD *)(a2 + 4);
        *(_WORD *)(a2 + 4) = v14;
      }
    }
  }
  return result;
}

uint64_t gss::unknownPropertyDecoder<gss::ScenePropertyID>()
{
  return 1;
}

void std::__function::__func<BOOL (*)(geo::ibitstream &,gss::StylePropertySet<gss::ScenePropertyID> &,unsigned long long,gss::SceneConfigPropertyIndex,gss::DecodingContext const&,std::ostringstream &),std::allocator<BOOL (*)(geo::ibitstream &,gss::StylePropertySet<gss::ScenePropertyID> &,unsigned long long,gss::SceneConfigPropertyIndex,gss::DecodingContext const&,std::ostringstream &)>,BOOL ()(geo::ibitstream &,gss::StylePropertySet<gss::ScenePropertyID> &,unsigned long long,gss::SceneConfigPropertyIndex,gss::DecodingContext const&,std::ostringstream &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<BOOL (*)(geo::ibitstream &,gss::StylePropertySet<gss::ScenePropertyID> &,unsigned long long,gss::SceneConfigPropertyIndex,gss::DecodingContext const&,std::ostringstream &),std::allocator<BOOL (*)(geo::ibitstream &,gss::StylePropertySet<gss::ScenePropertyID> &,unsigned long long,gss::SceneConfigPropertyIndex,gss::DecodingContext const&,std::ostringstream &)>,BOOL ()(geo::ibitstream &,gss::StylePropertySet<gss::ScenePropertyID> &,unsigned long long,gss::SceneConfigPropertyIndex,gss::DecodingContext const&,std::ostringstream &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42C7030;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BOOL (*)(geo::ibitstream &,gss::StylePropertySet<gss::ScenePropertyID> &,unsigned long long,gss::SceneConfigPropertyIndex,gss::DecodingContext const&,std::ostringstream &),std::allocator<BOOL (*)(geo::ibitstream &,gss::StylePropertySet<gss::ScenePropertyID> &,unsigned long long,gss::SceneConfigPropertyIndex,gss::DecodingContext const&,std::ostringstream &)>,BOOL ()(geo::ibitstream &,gss::StylePropertySet<gss::ScenePropertyID> &,unsigned long long,gss::SceneConfigPropertyIndex,gss::DecodingContext const&,std::ostringstream &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42C7030;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<BOOL (*)(geo::ibitstream &,gss::StylePropertySet<gss::ScenePropertyID> &,unsigned long long,gss::SceneConfigPropertyIndex,gss::DecodingContext const&,std::ostringstream &),std::allocator<BOOL (*)(geo::ibitstream &,gss::StylePropertySet<gss::ScenePropertyID> &,unsigned long long,gss::SceneConfigPropertyIndex,gss::DecodingContext const&,std::ostringstream &)>,BOOL ()(geo::ibitstream &,gss::StylePropertySet<gss::ScenePropertyID> &,unsigned long long,gss::SceneConfigPropertyIndex,gss::DecodingContext const&,std::ostringstream &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<BOOL (*)(geo::ibitstream &,gss::StylePropertySet<gss::ScenePropertyID> &,unsigned long long,gss::SceneConfigPropertyIndex,gss::DecodingContext const&,std::ostringstream &),std::allocator<BOOL (*)(geo::ibitstream &,gss::StylePropertySet<gss::ScenePropertyID> &,unsigned long long,gss::SceneConfigPropertyIndex,gss::DecodingContext const&,std::ostringstream &)>,BOOL ()(geo::ibitstream &,gss::StylePropertySet<gss::ScenePropertyID> &,unsigned long long,gss::SceneConfigPropertyIndex,gss::DecodingContext const&,std::ostringstream &)>::target_type()
{
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void grl::getSize(float *a1, _QWORD *a2)
{
  float v4;
  float v5;
  NSObject *v6;
  uint8_t v7[16];

  if (*a2 && ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2) & 1) != 0)
  {
    v4 = (float)(*(unsigned int (**)(_QWORD))(*(_QWORD *)*a2 + 24))(*a2);
    v5 = (float)(*(unsigned int (**)(_QWORD))(*(_QWORD *)*a2 + 32))(*a2);
  }
  else
  {
    if (GEOGetGeoResourceLibEaselLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_22_0);
    v6 = GEOGetGeoResourceLibEaselLog::log;
    v4 = 0.0;
    if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_19F029000, v6, OS_LOG_TYPE_ERROR, "Input image must be a non-nullptr to get a size.", v7, 2u);
    }
    v5 = 0.0;
  }
  *a1 = v4;
  a1[1] = v5;
}

void grl::createColorizedImage(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v8;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  float v26;
  unsigned int v27;
  NSObject *v28;
  const char *v29;
  NSObject *v30;
  NSObject *v31;
  NSObject *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  NSObject *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint8_t v41[16];
  __int128 v42;
  uint8_t v43[8];
  float v44;
  float v45;
  _QWORD v46[2];
  CFTypeRef cf;
  uint8_t buf[8];
  uint64_t (**v49)();
  CFTypeRef v50;
  uint64_t v51;
  std::__shared_weak_count *v52;

  v8 = *a1;
  if (!v8 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8) & 1) == 0)
  {
    if (GEOGetGeoResourceLibEaselLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_22_0);
    v28 = GEOGetGeoResourceLibEaselLog::log;
    if (!os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
      goto LABEL_30;
    *(_WORD *)buf = 0;
    v29 = "Input image must be a non-nullptr to create a colorized image.";
    goto LABEL_29;
  }
  if (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)*a1 + 24))(*a1)
    || !(*(unsigned int (**)(_QWORD))(*(_QWORD *)*a1 + 32))(*a1))
  {
    if (GEOGetGeoResourceLibEaselLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_22_0);
    v28 = GEOGetGeoResourceLibEaselLog::log;
    if (!os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
      goto LABEL_30;
    *(_WORD *)buf = 0;
    v29 = "Input image must have a non-zero size to create a colorized image.";
LABEL_29:
    _os_log_impl(&dword_19F029000, v28, OS_LOG_TYPE_ERROR, v29, buf, 2u);
LABEL_30:
    *a6 = 0;
    a6[1] = 0;
    return;
  }
  (*(void (**)(uint8_t *__return_ptr))(*(_QWORD *)*a1 + 48))(buf);
  v51 = *(_QWORD *)buf;
  v52 = (std::__shared_weak_count *)v49;
  if (v49)
  {
    v13 = (unint64_t *)(v49 + 1);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    v15 = (std::__shared_weak_count *)v49;
    if (v49)
    {
      v16 = (unint64_t *)(v49 + 1);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
  if (v51 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v51 + 40))(v51) & 1) != 0)
  {
    v18 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 24))(*a1);
    v19 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 32))(*a1);
    v20 = (std::__shared_weak_count *)operator new(0x28uLL);
    v20->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    v20->__shared_weak_owners_ = 0;
    v20->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE0D8;
    v22 = &v20[1].__vftable;
    v23 = v18;
    v24 = v20;
    v25 = esl::QuartzContext::QuartzContext(&v20[1], 3, v23, v19);
    if ((((uint64_t (*)(uint64_t))v24[1].__get_deleter)(v25) & 1) != 0)
    {
      esl::QuartzColor::QuartzColor(buf, a2);
      esl::QuartzColor::QuartzColor(v46, a3);
      if (esl::QuartzColor::isValid((esl::QuartzColor *)buf) && esl::QuartzColor::isValid((esl::QuartzColor *)v46))
      {
        v26 = (float)(*(unsigned int (**)(_QWORD))(*(_QWORD *)*a1 + 24))(*a1);
        v27 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 32))(*a1);
        *(_QWORD *)v43 = 0;
        v44 = v26;
        v45 = (float)v27;
        (*(void (**)(_QWORD *, uint8_t *, uint64_t *, _QWORD))(*v22 + 280))(v22, v43, &v51, 0);
        (*(void (**)(_QWORD *, uint8_t *, uint64_t, _QWORD *, uint64_t))(*v22 + 352))(v22, buf, a4, v46, a5);
        (*(void (**)(__int128 *__return_ptr, _QWORD *))(*v22 + 392))(&v42, v22);
        if ((_QWORD)v42 && ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v42 + 40))(v42) & 1) != 0)
        {
          *(_OWORD *)a6 = v42;
        }
        else
        {
          if (GEOGetGeoResourceLibEaselLog::onceToken != -1)
            dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_22_0);
          v37 = GEOGetGeoResourceLibEaselLog::log;
          if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)v41 = 0;
            _os_log_impl(&dword_19F029000, v37, OS_LOG_TYPE_ERROR, "Failed to generate an image from a colorized context.", v41, 2u);
          }
          *a6 = 0;
          a6[1] = 0;
          v38 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
          if (*((_QWORD *)&v42 + 1))
          {
            v39 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
            do
              v40 = __ldaxr(v39);
            while (__stlxr(v40 - 1, v39));
            if (!v40)
            {
              ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
              std::__shared_weak_count::__release_weak(v38);
            }
          }
        }
      }
      else
      {
        if (GEOGetGeoResourceLibEaselLog::onceToken != -1)
          dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_22_0);
        v32 = GEOGetGeoResourceLibEaselLog::log;
        if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)v43 = 0;
          _os_log_impl(&dword_19F029000, v32, OS_LOG_TYPE_ERROR, "Failed to create gradient color to create colorized image.", v43, 2u);
        }
        *a6 = 0;
        a6[1] = 0;
      }
      v46[0] = &off_1E42B02E0;
      v46[1] = &off_1E42B4850;
      if (cf)
        CFRelease(cf);
      *(_QWORD *)buf = &off_1E42B02E0;
      v49 = &off_1E42B4850;
      if (v50)
        CFRelease(v50);
    }
    else
    {
      if (GEOGetGeoResourceLibEaselLog::onceToken != -1)
        dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_22_0);
      v31 = GEOGetGeoResourceLibEaselLog::log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19F029000, v31, OS_LOG_TYPE_ERROR, "Failed to create a context to draw a colorized image into.", buf, 2u);
      }
      *a6 = 0;
      a6[1] = 0;
    }
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  else
  {
    if (GEOGetGeoResourceLibEaselLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_22_0);
    v30 = GEOGetGeoResourceLibEaselLog::log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19F029000, v30, OS_LOG_TYPE_ERROR, "Failed to create a grayscale version of an image, to be used to colorize an image.", buf, 2u);
    }
    *a6 = 0;
    a6[1] = 0;
  }
  v34 = v52;
  if (v52)
  {
    v35 = (unint64_t *)&v52->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
}

void grl::createHaloImage(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>, float a4@<S0>)
{
  uint64_t v6;
  grl::HaloGenerator *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  float v22;
  unsigned int v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  NSObject *v27;
  const char *v28;
  NSObject *v29;
  NSObject *v30;
  NSObject *v31;
  NSObject *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  float v43;
  float v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  uint8_t v49[4];
  const char *v50;
  __int16 v51;
  const char *v52;
  __int16 v53;
  int v54;
  _BYTE buf[24];
  int v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v6 = *a1;
  if (!v6 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6) & 1) == 0)
  {
    if (GEOGetGeoResourceLibEaselLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_22_0);
    v27 = GEOGetGeoResourceLibEaselLog::log;
    if (!os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
      goto LABEL_33;
    *(_WORD *)buf = 0;
    v28 = "Input image must be a non-nullptr to create a halo image.";
LABEL_32:
    _os_log_impl(&dword_19F029000, v27, OS_LOG_TYPE_ERROR, v28, buf, 2u);
    goto LABEL_33;
  }
  if (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)*a1 + 24))(*a1)
    || (v9 = (grl::HaloGenerator *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 32))(*a1), !(_DWORD)v9))
  {
    if (GEOGetGeoResourceLibEaselLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_22_0);
    v27 = GEOGetGeoResourceLibEaselLog::log;
    if (!os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
      goto LABEL_33;
    *(_WORD *)buf = 0;
    v28 = "Input image must have a non-zero size to create a halo image.";
    goto LABEL_32;
  }
  if (a4 <= 0.0)
  {
LABEL_33:
    *a3 = 0;
    a3[1] = 0;
    return;
  }
  grl::HaloGenerator::sharedHaloGenerator(v9);
  v10 = (std::__shared_weak_count *)a1[1];
  v45 = *a1;
  v46 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  grl::HaloGenerator::generateHalo(&v45, &v47, a4);
  v13 = v46;
  if (v46)
  {
    v14 = (unint64_t *)&v46->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (v47 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 40))(v47) & 1) != 0)
  {
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 24))(v47);
    v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 32))(v47);
    v18 = (std::__shared_weak_count *)operator new(0x28uLL);
    v18->__shared_owners_ = 0;
    v19 = (unint64_t *)&v18->__shared_owners_;
    v18->__shared_weak_owners_ = 0;
    v18->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE0D8;
    v20 = v18 + 1;
    v21 = esl::QuartzContext::QuartzContext(&v18[1], 3, v16, v17);
    if ((((uint64_t (*)(uint64_t))v18[1].__get_deleter)(v21) & 1) != 0)
    {
      v22 = (float)((unsigned int (*)(std::__shared_weak_count *))v20->__vftable[2].__on_zero_shared_weak)(v20);
      v23 = ((uint64_t (*)(std::__shared_weak_count *))v20->__vftable[3].~__shared_weak_count)(v20);
      v42 = 0;
      v43 = v22;
      v44 = (float)v23;
      esl::QuartzColor::QuartzColor(buf, a2);
      if (esl::QuartzColor::isValid((esl::QuartzColor *)buf))
      {
        ((void (*)(std::__shared_weak_count *))v20->__vftable[10].~__shared_weak_count_0)(v20);
        ((void (*)(std::__shared_weak_count *, uint64_t *, uint64_t *, _QWORD))v20->__vftable[7].~__shared_weak_count)(v20, &v42, &v47, 0);
        ((void (*)(std::__shared_weak_count *, _BYTE *))v20->__vftable[5].__on_zero_shared_weak)(v20, buf);
        ((void (*)(std::__shared_weak_count *, uint64_t *, _QWORD))v20->__vftable[6].__on_zero_shared)(v20, &v42, 0);
        ((void (*)(std::__shared_weak_count *))v20->__vftable[10].~__shared_weak_count)(v20);
        ((void (*)(uint64_t *__return_ptr, std::__shared_weak_count *))v20->__vftable[9].__on_zero_shared_weak)(&v40, v20);
        if (v40 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 40))(v40) & 1) != 0)
        {
          v24 = v41;
          *a3 = v40;
          a3[1] = v24;
          if (v24)
          {
            v25 = (unint64_t *)&v24->__shared_owners_;
            do
              v26 = __ldxr(v25);
            while (__stxr(v26 + 1, v25));
          }
        }
        else
        {
          if (GEOGetGeoResourceLibEaselLog::onceToken != -1)
            dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_22_0);
          v32 = GEOGetGeoResourceLibEaselLog::log;
          if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v49 = 136315650;
            v50 = "!GRL_UNIQUE_NAME(didTriggerAssert)";
            v51 = 2080;
            v52 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/EaselUtilities.cpp";
            v53 = 1024;
            v54 = 180;
            _os_log_impl(&dword_19F029000, v32, OS_LOG_TYPE_ERROR, "Failed to create final image with halo from halo context.: Assertion with expression - %s : Failed in file - %s line - %i", v49, 0x1Cu);
          }
          *a3 = 0;
          a3[1] = 0;
        }
        v33 = v41;
        if (v41)
        {
          v34 = (unint64_t *)&v41->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
      }
      else
      {
        if (GEOGetGeoResourceLibEaselLog::onceToken != -1)
          dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_22_0);
        v31 = GEOGetGeoResourceLibEaselLog::log;
        if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)v49 = 0;
          _os_log_impl(&dword_19F029000, v31, OS_LOG_TYPE_ERROR, "Failed to create the halo color used for an image.", v49, 2u);
        }
        *a3 = 0;
        a3[1] = 0;
      }
      *(_QWORD *)buf = &off_1E42B02E0;
      *(_QWORD *)&buf[8] = &off_1E42B4850;
      if (*(_QWORD *)&buf[16])
        CFRelease(*(CFTypeRef *)&buf[16]);
    }
    else
    {
      if (GEOGetGeoResourceLibEaselLog::onceToken != -1)
        dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_22_0);
      v30 = GEOGetGeoResourceLibEaselLog::log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/EaselUtilities.cpp";
        *(_WORD *)&buf[22] = 1024;
        v56 = 154;
        _os_log_impl(&dword_19F029000, v30, OS_LOG_TYPE_ERROR, "Failed to create a context to render the final image with a halo in.: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
      }
      *a3 = 0;
      a3[1] = 0;
    }
    do
      v36 = __ldaxr(v19);
    while (__stlxr(v36 - 1, v19));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  else
  {
    if (GEOGetGeoResourceLibEaselLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_22_0);
    v29 = GEOGetGeoResourceLibEaselLog::log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/EaselUtilities.cpp";
      *(_WORD *)&buf[22] = 1024;
      v56 = 148;
      _os_log_impl(&dword_19F029000, v29, OS_LOG_TYPE_ERROR, "Generating the halo of an image has failed.: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
    }
    *a3 = 0;
    a3[1] = 0;
  }
  v37 = v48;
  if (v48)
  {
    v38 = (unint64_t *)&v48->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
}

void grl::createThreePartHorizontalStretchedImage(_QWORD *a1@<X0>, _QWORD *a2@<X8>, float a3@<S0>, float a4@<S1>, float a5@<S2>)
{
  uint64_t v7;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  NSObject *v15;
  const char *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  std::__shared_weak_count *v34;
  float v35;
  uint64_t v36;
  NSObject *v37;
  float v38;
  float v39;
  double v40;
  const char *v41;
  float v42;
  float v43;
  double v44;
  float v45;
  float v46;
  double v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  NSObject *v57;
  NSObject *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  uint8_t v63[8];
  uint64_t v64;
  std::__shared_weak_count *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  float v70[4];
  _DWORD v71[4];
  uint64_t v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  uint64_t v83;
  float v84;
  float v85;
  _QWORD v86[2];
  float v87;
  float v88;
  _BYTE buf[22];
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  v7 = *a1;
  if (!v7 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7) & 1) == 0)
  {
    if (GEOGetGeoResourceLibEaselLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_22_0);
    v15 = GEOGetGeoResourceLibEaselLog::log;
    if (!os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
      goto LABEL_27;
    *(_WORD *)buf = 0;
    v16 = "Input image must be a non-nullptr to create a stretched image.";
    goto LABEL_26;
  }
  if (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)*a1 + 24))(*a1)
    || !(*(unsigned int (**)(_QWORD))(*(_QWORD *)*a1 + 32))(*a1))
  {
    if (GEOGetGeoResourceLibEaselLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_22_0);
    v15 = GEOGetGeoResourceLibEaselLog::log;
    if (!os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
      goto LABEL_27;
    *(_WORD *)buf = 0;
    v16 = "Input image must have a non-zero size to create a stretched image.";
    goto LABEL_26;
  }
  if (a4 <= 0.0 || a5 <= 0.0)
  {
    if (GEOGetGeoResourceLibRendererLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_10_0);
    v15 = GEOGetGeoResourceLibRendererLog::log;
    if (!os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR))
      goto LABEL_27;
    *(_WORD *)buf = 0;
    v16 = "A positive left and right padding is required to create a stretched image.";
LABEL_26:
    _os_log_impl(&dword_19F029000, v15, OS_LOG_TYPE_ERROR, v16, buf, 2u);
LABEL_27:
    *a2 = 0;
    a2[1] = 0;
    return;
  }
  v11 = (std::__shared_weak_count *)a1[1];
  v86[0] = *a1;
  v86[1] = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    grl::getSize(&v87, v86);
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    grl::getSize(&v87, v86);
  }
  v83 = 0;
  v84 = a4;
  v85 = v88;
  v74 = v88;
  v75 = v87 - a5;
  v76 = 0.0;
  v77 = v87;
  v78 = v88;
  v79 = a4;
  v80 = 0.0;
  v81 = v87 - a5;
  v82 = v88;
  v72 = 0;
  v73 = a4;
  v70[0] = a3 - a5;
  v70[1] = 0.0;
  v70[2] = a3;
  v70[3] = v88;
  *(float *)v71 = a4;
  v71[1] = 0;
  *(float *)&v71[2] = a3 - a5;
  *(float *)&v71[3] = v88;
  (*(void (**)(_BYTE *__return_ptr, _QWORD, uint64_t *))(*(_QWORD *)*a1 + 56))(buf, *a1, &v83);
  v68 = *(_QWORD *)buf;
  v69 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v17 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    v19 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v20 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
  (*(void (**)(_BYTE *__return_ptr, _QWORD, float *))(*(_QWORD *)*a1 + 56))(buf, *a1, &v79);
  v66 = *(_QWORD *)buf;
  v67 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v22 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
    v24 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v25 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
  (*(void (**)(_BYTE *__return_ptr, _QWORD, float *))(*(_QWORD *)*a1 + 56))(buf, *a1, &v75);
  v64 = *(_QWORD *)buf;
  v65 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v27 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
    v29 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v30 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
  }
  if (!v68 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v68 + 40))(v68) & 1) == 0)
  {
    if (GEOGetGeoResourceLibEaselLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_22_0);
    v37 = GEOGetGeoResourceLibEaselLog::log;
    if (!os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
      goto LABEL_89;
    v38 = v84 - *(float *)&v83;
    v39 = v85 - *((float *)&v83 + 1);
    if ((float)(v84 - *(float *)&v83) < 0.0)
      v38 = 0.0;
    v40 = v38;
    if (v39 < 0.0)
      v39 = 0.0;
    *(_DWORD *)buf = 134218240;
    *(double *)&buf[4] = v40;
    *(_WORD *)&buf[12] = 2048;
    *(double *)&buf[14] = v39;
    v41 = "Failed to create the left part of a horizontally stretched image with size (x:%.3f, y:%.3f).";
    goto LABEL_88;
  }
  if (!v66 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v66 + 40))(v66) & 1) == 0)
  {
    if (GEOGetGeoResourceLibEaselLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_22_0);
    v37 = GEOGetGeoResourceLibEaselLog::log;
    if (!os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
      goto LABEL_89;
    v42 = v81 - v79;
    v43 = v82 - v80;
    if ((float)(v81 - v79) < 0.0)
      v42 = 0.0;
    v44 = v42;
    if (v43 < 0.0)
      v43 = 0.0;
    *(_DWORD *)buf = 134218240;
    *(double *)&buf[4] = v44;
    *(_WORD *)&buf[12] = 2048;
    *(double *)&buf[14] = v43;
    v41 = "Failed to create the center part of a horizontally stretched image with size (x:%.3f, y:%.3f).";
    goto LABEL_88;
  }
  if (v64 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 40))(v64) & 1) != 0)
  {
    v32 = (std::__shared_weak_count *)operator new(0x28uLL);
    v32->__shared_owners_ = 0;
    v33 = (unint64_t *)&v32->__shared_owners_;
    v32->__shared_weak_owners_ = 0;
    v32->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE0D8;
    v34 = v32 + 1;
    v35 = v88;
    v36 = esl::QuartzContext::QuartzContext(&v32[1], 3, a3, v88);
    if ((((uint64_t (*)(uint64_t))v32[1].__get_deleter)(v36) & 1) != 0)
    {
      ((void (*)(std::__shared_weak_count *, uint64_t *, uint64_t *, uint64_t))v34->__vftable[9].__on_zero_shared)(v34, &v72, &v68, 1);
      ((void (*)(std::__shared_weak_count *, _DWORD *, uint64_t *, uint64_t))v34->__vftable[9].__on_zero_shared)(v34, v71, &v66, 1);
      ((void (*)(std::__shared_weak_count *, float *, uint64_t *, uint64_t))v34->__vftable[9].__on_zero_shared)(v34, v70, &v64, 1);
      ((void (*)(_BYTE *__return_ptr, std::__shared_weak_count *))v34->__vftable[9].__on_zero_shared_weak)(buf, v34);
      if (*(_QWORD *)buf && ((*(uint64_t (**)(_QWORD))(**(_QWORD **)buf + 40))(*(_QWORD *)buf) & 1) != 0)
      {
        *(_OWORD *)a2 = *(_OWORD *)buf;
      }
      else
      {
        if (GEOGetGeoResourceLibEaselLog::onceToken != -1)
          dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_22_0);
        v58 = GEOGetGeoResourceLibEaselLog::log;
        if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)v63 = 0;
          _os_log_impl(&dword_19F029000, v58, OS_LOG_TYPE_ERROR, "Failed to create the horizontally stretched image from a context.", v63, 2u);
        }
        *a2 = 0;
        a2[1] = 0;
        v59 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
          v60 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v61 = __ldaxr(v60);
          while (__stlxr(v61 - 1, v60));
          if (!v61)
          {
            ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
            std::__shared_weak_count::__release_weak(v59);
          }
        }
      }
    }
    else
    {
      if (GEOGetGeoResourceLibEaselLog::onceToken != -1)
        dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_22_0);
      v57 = GEOGetGeoResourceLibEaselLog::log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218240;
        *(double *)&buf[4] = a3;
        *(_WORD *)&buf[12] = 2048;
        *(double *)&buf[14] = v35;
        _os_log_impl(&dword_19F029000, v57, OS_LOG_TYPE_ERROR, "Failed to create a context to draw the horizontally stretched image with size (x:%.3f, y:%.3f).", buf, 0x16u);
      }
      *a2 = 0;
      a2[1] = 0;
    }
    do
      v62 = __ldaxr(v33);
    while (__stlxr(v62 - 1, v33));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
    goto LABEL_90;
  }
  if (GEOGetGeoResourceLibEaselLog::onceToken != -1)
    dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_22_0);
  v37 = GEOGetGeoResourceLibEaselLog::log;
  if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
  {
    v45 = v77 - v75;
    v46 = v78 - v76;
    if ((float)(v77 - v75) < 0.0)
      v45 = 0.0;
    v47 = v45;
    if (v46 < 0.0)
      v46 = 0.0;
    *(_DWORD *)buf = 134218240;
    *(double *)&buf[4] = v47;
    *(_WORD *)&buf[12] = 2048;
    *(double *)&buf[14] = v46;
    v41 = "Failed to create the right part of a horizontally stretched image with size (x:%.3f, y:%.3f).";
LABEL_88:
    _os_log_impl(&dword_19F029000, v37, OS_LOG_TYPE_ERROR, v41, buf, 0x16u);
  }
LABEL_89:
  *a2 = 0;
  a2[1] = 0;
LABEL_90:
  v48 = v65;
  if (v65)
  {
    v49 = (unint64_t *)&v65->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v51 = v67;
  if (v67)
  {
    v52 = (unint64_t *)&v67->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  v54 = v69;
  if (v69)
  {
    v55 = (unint64_t *)&v69->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
}

void grl::drawStrokeToContext(_QWORD *a1, _QWORD *a2, uint64_t a3, float a4)
{
  uint64_t v5;
  uint64_t v9;
  const char *v10;
  NSObject *v11;
  uint32_t v12;
  uint64_t v13;
  NSObject *v14;
  uint8_t v15[16];
  _BYTE buf[24];
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v5 = *a1;
  if (v5 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5) & 1) != 0)
  {
    if (*a2 && ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2) & 1) != 0)
    {
      if (*(_BYTE *)(a3 + 3))
      {
        if (a4 > 0.0)
        {
          if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a2 + 24))(*a2))
          {
            if (GEOGetGeoResourceLibRendererLog::onceToken != -1)
              dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_10_0);
            v13 = GEOGetGeoResourceLibRendererLog::log;
            if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              v10 = "Receieved empty path for drawStrokeToContext().";
              v11 = v13;
              v12 = 2;
              goto LABEL_20;
            }
          }
          else
          {
            esl::QuartzColor::QuartzColor(buf, a3);
            if (esl::QuartzColor::isValid((esl::QuartzColor *)buf))
            {
              (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 408))(*a1);
              (*(void (**)(_QWORD, _BYTE *))(*(_QWORD *)*a1 + 160))(*a1, buf);
              (*(void (**)(_QWORD, float))(*(_QWORD *)*a1 + 168))(*a1, a4 + a4);
              (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 288))(*a1, a2);
              (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 304))(*a1);
              (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 400))(*a1);
            }
            else
            {
              if (GEOGetGeoResourceLibEaselLog::onceToken != -1)
                dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_22_0);
              v14 = GEOGetGeoResourceLibEaselLog::log;
              if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)v15 = 0;
                _os_log_impl(&dword_19F029000, v14, OS_LOG_TYPE_ERROR, "Failed to create the stroke color for a path.", v15, 2u);
              }
            }
            *(_QWORD *)buf = &off_1E42B02E0;
            *(_QWORD *)&buf[8] = &off_1E42B4850;
            if (*(_QWORD *)&buf[16])
              CFRelease(*(CFTypeRef *)&buf[16]);
          }
        }
        else
        {
          if (GEOGetGeoResourceLibRendererLog::onceToken != -1)
            dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_10_0);
          v9 = GEOGetGeoResourceLibRendererLog::log;
          if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/EaselUtilities.cpp";
            *(_WORD *)&buf[22] = 1024;
            v17 = 410;
            v10 = "A positive weight is required to draw for drawStrokeToContext().: Assertion with expression - %s : Fai"
                  "led in file - %s line - %i";
LABEL_19:
            v11 = v9;
            v12 = 28;
LABEL_20:
            _os_log_impl(&dword_19F029000, v11, OS_LOG_TYPE_ERROR, v10, buf, v12);
          }
        }
      }
      else
      {
        if (GEOGetGeoResourceLibRendererLog::onceToken != -1)
          dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_10_0);
        v9 = GEOGetGeoResourceLibRendererLog::log;
        if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/EaselUtilities.cpp";
          *(_WORD *)&buf[22] = 1024;
          v17 = 407;
          v10 = "A non-zero alpha color is required to draw for drawStrokeToContext().: Assertion with expression - %s : "
                "Failed in file - %s line - %i";
          goto LABEL_19;
        }
      }
    }
    else
    {
      if (GEOGetGeoResourceLibEaselLog::onceToken != -1)
        dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_22_0);
      v9 = GEOGetGeoResourceLibEaselLog::log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/EaselUtilities.cpp";
        *(_WORD *)&buf[22] = 1024;
        v17 = 404;
        v10 = "A non-nullptr path is required for drawStrokeToContext().: Assertion with expression - %s : Failed in file - %s line - %i";
        goto LABEL_19;
      }
    }
  }
  else
  {
    if (GEOGetGeoResourceLibEaselLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_22_0);
    v9 = GEOGetGeoResourceLibEaselLog::log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/EaselUtilities.cpp";
      *(_WORD *)&buf[22] = 1024;
      v17 = 401;
      v10 = "A non-nullptr context is required for drawStrokeToContext().: Assertion with expression - %s : Failed in fil"
            "e - %s line - %i";
      goto LABEL_19;
    }
  }
}

void grl::drawLinearGradientToContext(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, float a8, float a9)
{
  uint64_t v10;
  uint64_t v19;
  const char *v20;
  NSObject *v21;
  uint32_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  char *v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  const void *v34;
  float *v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  _BYTE buf[24];
  int v41;
  _QWORD v42[6];

  v42[5] = *MEMORY[0x1E0C80C00];
  v10 = *a1;
  if (!v10 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10) & 1) == 0)
  {
    if (GEOGetGeoResourceLibEaselLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_22_0);
    v23 = GEOGetGeoResourceLibEaselLog::log;
    if (!os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
      return;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/EaselUtilities.cpp";
    *(_WORD *)&buf[22] = 1024;
    v41 = 469;
    v20 = "A non-nullptr context is required to draw a linear gradient.: Assertion with expression - %s : Failed in file - %s line - %i";
LABEL_18:
    v21 = v23;
    v22 = 28;
    goto LABEL_19;
  }
  if (!*a2 || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2) & 1) == 0)
  {
    if (GEOGetGeoResourceLibEaselLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_22_0);
    v23 = GEOGetGeoResourceLibEaselLog::log;
    if (!os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
      return;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/EaselUtilities.cpp";
    *(_WORD *)&buf[22] = 1024;
    v41 = 472;
    v20 = "A non-nullptr path is required to draw a linear gradient.: Assertion with expression - %s : Failed in file - %s line - %i";
    goto LABEL_18;
  }
  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a2 + 24))(*a2))
  {
    if (GEOGetGeoResourceLibRendererLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_10_0);
    v19 = GEOGetGeoResourceLibRendererLog::log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      v20 = "Receieved empty path for drawLinearGradientToContext().";
      v21 = v19;
      v22 = 2;
LABEL_19:
      _os_log_impl(&dword_19F029000, v21, OS_LOG_TYPE_ERROR, v20, buf, v22);
    }
  }
  else
  {
    v36 = a7;
    v37 = a4;
    v38 = a6;
    esl::QuartzColor::QuartzColor(buf, a3);
    esl::QuartzColor::QuartzColor(v42, a5);
    v24 = (char *)operator new(0x40uLL);
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v39[0] = v24;
    v39[2] = v24 + 64;
    do
    {
      v28 = v26;
      v29 = &v24[v25];
      *(_QWORD *)v29 = &off_1E42B02E0;
      *((_QWORD *)v29 + 1) = &off_1E42B4850;
      v30 = &buf[32 * v27];
      v31 = *((_QWORD *)v30 + 2);
      if (v31)
        CFRetain(*((CFTypeRef *)v30 + 2));
      *((_QWORD *)v29 + 2) = v31;
      v25 += 32;
      v26 = 1;
      v27 = 1;
    }
    while ((v28 & 1) == 0);
    v32 = 0;
    v39[1] = &v24[v25];
    do
    {
      v33 = &buf[v32 * 8];
      *((_QWORD *)v33 + 4) = &off_1E42B02E0;
      *((_QWORD *)v33 + 5) = &off_1E42B4850;
      v34 = (const void *)v42[v32 + 2];
      if (v34)
        CFRelease(v34);
      v32 -= 4;
    }
    while (v32 != -8);
    v35 = (float *)operator new(8uLL);
    *(_QWORD *)&buf[8] = v35 + 2;
    *(_QWORD *)&buf[16] = v35 + 2;
    *v35 = a8;
    v35[1] = a9;
    *(_QWORD *)buf = v35;
    (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 408))(*a1);
    (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 288))(*a1, a2);
    (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 264))(*a1);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 224))(*a1, v36);
    (*(void (**)(_QWORD, _QWORD *, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)*a1 + 360))(*a1, v39, buf, v37, v38);
    (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 400))(*a1);
    if (*(_QWORD *)buf)
    {
      *(_QWORD *)&buf[8] = *(_QWORD *)buf;
      operator delete(*(void **)buf);
    }
    *(_QWORD *)buf = v39;
    std::vector<esl::QuartzColor>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  }
}

void grl::drawRadialGradientToContext(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7, float a8)
{
  uint64_t v9;
  uint64_t v17;
  const char *v18;
  NSObject *v19;
  uint32_t v20;
  uint64_t v21;
  NSObject *v22;
  uint8_t v23[16];
  _QWORD v24[2];
  CFTypeRef cf;
  _BYTE buf[24];
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v9 = *a1;
  if (!v9 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9) & 1) == 0)
  {
    if (GEOGetGeoResourceLibEaselLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_22_0);
    v21 = GEOGetGeoResourceLibEaselLog::log;
    if (!os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
      return;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/EaselUtilities.cpp";
    *(_WORD *)&buf[22] = 1024;
    v27 = 495;
    v18 = "A non-nullptr context is required to draw a linear gradient.: Assertion with expression - %s : Failed in file - %s line - %i";
LABEL_18:
    v19 = v21;
    v20 = 28;
    goto LABEL_19;
  }
  if (!*a2 || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2) & 1) == 0)
  {
    if (GEOGetGeoResourceLibEaselLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_22_0);
    v21 = GEOGetGeoResourceLibEaselLog::log;
    if (!os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
      return;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/EaselUtilities.cpp";
    *(_WORD *)&buf[22] = 1024;
    v27 = 498;
    v18 = "A non-nullptr path is required to draw a linear gradient.: Assertion with expression - %s : Failed in file - %s line - %i";
    goto LABEL_18;
  }
  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a2 + 24))(*a2))
  {
    if (GEOGetGeoResourceLibRendererLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_10_0);
    v17 = GEOGetGeoResourceLibRendererLog::log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      v18 = "Receieved empty path for drawRadialGradientToContext().";
      v19 = v17;
      v20 = 2;
LABEL_19:
      _os_log_impl(&dword_19F029000, v19, OS_LOG_TYPE_ERROR, v18, buf, v20);
    }
  }
  else
  {
    esl::QuartzColor::QuartzColor(buf, a3);
    esl::QuartzColor::QuartzColor(v24, a5);
    if (esl::QuartzColor::isValid((esl::QuartzColor *)buf) && esl::QuartzColor::isValid((esl::QuartzColor *)v24))
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 408))(*a1);
      (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 288))(*a1, a2);
      (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 264))(*a1);
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 224))(*a1, a6);
      (*(void (**)(_QWORD, _BYTE *, uint64_t, _QWORD *, uint64_t, float, float))(*(_QWORD *)*a1 + 368))(*a1, buf, a4, v24, a4, a7, a8);
      (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 400))(*a1);
    }
    else
    {
      if (GEOGetGeoResourceLibEaselLog::onceToken != -1)
        dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_22_0);
      v22 = GEOGetGeoResourceLibEaselLog::log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v23 = 0;
        _os_log_impl(&dword_19F029000, v22, OS_LOG_TYPE_ERROR, "Failed to create the gradient colors for a path.", v23, 2u);
      }
    }
    v24[0] = &off_1E42B02E0;
    v24[1] = &off_1E42B4850;
    if (cf)
      CFRelease(cf);
    *(_QWORD *)buf = &off_1E42B02E0;
    *(_QWORD *)&buf[8] = &off_1E42B4850;
    if (*(_QWORD *)&buf[16])
      CFRelease(*(CFTypeRef *)&buf[16]);
  }
}

void grl::drawReflectedGradientToContext(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, float a8, float a9)
{
  uint64_t v10;
  uint64_t v19;
  const char *v20;
  NSObject *v21;
  uint32_t v22;
  uint64_t v23;
  CFTypeRef v24;
  CFTypeRef v25;
  CFTypeRef v26;
  NSObject *v27;
  CFTypeRef v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  const void *v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float *v41;
  uint64_t v42;
  _QWORD v43[3];
  _QWORD v44[2];
  CFTypeRef v45;
  _QWORD v46[2];
  CFTypeRef cf;
  _BYTE buf[24];
  int v49;
  void (**v50)(esl::QuartzColor *__hidden);
  uint64_t (**v51)();
  CFTypeRef v52;
  void (**v53)(esl::QuartzColor *__hidden);
  uint64_t (**v54)();
  CFTypeRef v55;
  void (**v56)(esl::QuartzColor *__hidden);
  uint64_t (**v57)();
  _QWORD v58[4];

  v58[2] = *MEMORY[0x1E0C80C00];
  v10 = *a1;
  if (!v10 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10) & 1) == 0)
  {
    if (GEOGetGeoResourceLibEaselLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_22_0);
    v23 = GEOGetGeoResourceLibEaselLog::log;
    if (!os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
      return;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/EaselUtilities.cpp";
    *(_WORD *)&buf[22] = 1024;
    v49 = 524;
    v20 = "A non-nullptr context is required to draw a linear gradient.: Assertion with expression - %s : Failed in file - %s line - %i";
LABEL_18:
    v21 = v23;
    v22 = 28;
    goto LABEL_19;
  }
  if (!*a2 || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2) & 1) == 0)
  {
    if (GEOGetGeoResourceLibEaselLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_22_0);
    v23 = GEOGetGeoResourceLibEaselLog::log;
    if (!os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
      return;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/EaselUtilities.cpp";
    *(_WORD *)&buf[22] = 1024;
    v49 = 527;
    v20 = "A non-nullptr path is required to draw a linear gradient.: Assertion with expression - %s : Failed in file - %s line - %i";
    goto LABEL_18;
  }
  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a2 + 24))(*a2))
  {
    if (GEOGetGeoResourceLibRendererLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_10_0);
    v19 = GEOGetGeoResourceLibRendererLog::log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      v20 = "Receieved empty path for drawReflectedGradientToContext().";
      v21 = v19;
      v22 = 2;
LABEL_19:
      _os_log_impl(&dword_19F029000, v21, OS_LOG_TYPE_ERROR, v20, buf, v22);
    }
  }
  else
  {
    esl::QuartzColor::QuartzColor(v46, a3);
    esl::QuartzColor::QuartzColor(v44, a5);
    if (esl::QuartzColor::isValid((esl::QuartzColor *)v46) && esl::QuartzColor::isValid((esl::QuartzColor *)v44))
    {
      v42 = a6;
      *(_QWORD *)buf = &off_1E42B02E0;
      *(_QWORD *)&buf[8] = &off_1E42B4850;
      v24 = cf;
      if (cf)
        CFRetain(cf);
      *(_QWORD *)&buf[16] = v24;
      v50 = &off_1E42B02E0;
      v51 = &off_1E42B4850;
      v25 = v45;
      if (v45)
      {
        CFRetain(v45);
        v26 = v45;
        v52 = v25;
        v53 = &off_1E42B02E0;
        v54 = &off_1E42B4850;
        if (v45)
          CFRetain(v45);
      }
      else
      {
        v26 = 0;
        v52 = 0;
        v53 = &off_1E42B02E0;
        v54 = &off_1E42B4850;
      }
      v55 = v26;
      v56 = &off_1E42B02E0;
      v57 = &off_1E42B4850;
      v28 = cf;
      if (cf)
        CFRetain(cf);
      v58[0] = v28;
      v29 = (char *)operator new(0x80uLL);
      v30 = 0;
      v43[0] = v29;
      v43[2] = v29 + 128;
      do
      {
        v31 = &v29[v30];
        *(_QWORD *)v31 = &off_1E42B02E0;
        *((_QWORD *)v31 + 1) = &off_1E42B4850;
        v32 = *(_QWORD *)&buf[v30 + 16];
        if (v32)
          CFRetain(*(CFTypeRef *)&buf[v30 + 16]);
        *((_QWORD *)v31 + 2) = v32;
        v30 += 32;
      }
      while (v30 != 128);
      v33 = 0;
      v43[1] = v29 + 128;
      do
      {
        v34 = &buf[v33 * 8];
        *((_QWORD *)v34 + 12) = &off_1E42B02E0;
        *((_QWORD *)v34 + 13) = &off_1E42B4850;
        v35 = (const void *)v58[v33];
        if (v35)
          CFRelease(v35);
        v33 -= 4;
      }
      while (v33 != -16);
      v36 = 0.5;
      v37 = (float)(a8 * 0.5) + 0.5;
      v38 = (float)(a9 * 0.5) + 0.5;
      v39 = v36 - (float)(a9 * v36);
      v40 = v36 - (float)(a8 * v36);
      v41 = (float *)operator new(0x10uLL);
      *(_QWORD *)&buf[8] = v41 + 4;
      *(_QWORD *)&buf[16] = v41 + 4;
      *v41 = v37;
      v41[1] = v38;
      v41[2] = v39;
      v41[3] = v40;
      *(_QWORD *)buf = v41;
      (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 408))(*a1);
      (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 288))(*a1, a2);
      (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 264))(*a1);
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 224))(*a1, a7);
      (*(void (**)(_QWORD, _QWORD *, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)*a1 + 360))(*a1, v43, buf, a4, v42);
      (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 400))(*a1);
      if (*(_QWORD *)buf)
      {
        *(_QWORD *)&buf[8] = *(_QWORD *)buf;
        operator delete(*(void **)buf);
      }
      *(_QWORD *)buf = v43;
      std::vector<esl::QuartzColor>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    }
    else
    {
      if (GEOGetGeoResourceLibEaselLog::onceToken != -1)
        dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_22_0);
      v27 = GEOGetGeoResourceLibEaselLog::log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19F029000, v27, OS_LOG_TYPE_ERROR, "Failed to create the gradient colors for a path.", buf, 2u);
      }
    }
    v44[0] = &off_1E42B02E0;
    v44[1] = &off_1E42B4850;
    if (v45)
      CFRelease(v45);
    v46[0] = &off_1E42B02E0;
    v46[1] = &off_1E42B4850;
    if (cf)
      CFRelease(cf);
  }
}

void grl::drawShadowToContext(_QWORD *a1, _QWORD *a2, uint64_t a3, float *a4, float a5)
{
  uint64_t v6;
  uint64_t v11;
  const char *v12;
  NSObject *v13;
  uint32_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  float v23;
  float v24;
  NSObject *v25;
  NSObject *v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  float v30;
  float v31;
  _QWORD v32[2];
  CFTypeRef cf;
  uint64_t v34;
  std::__shared_weak_count *v35;
  _BYTE v36[24];
  int v37;
  uint8_t buf[4];
  const char *v39;
  __int16 v40;
  const char *v41;
  __int16 v42;
  int v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v6 = *a1;
  if (!v6 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6) & 1) == 0)
  {
    if (GEOGetGeoResourceLibEaselLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_22_0);
    v15 = GEOGetGeoResourceLibEaselLog::log;
    if (!os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
      return;
    *(_DWORD *)buf = 136315650;
    v39 = "!GRL_UNIQUE_NAME(didTriggerAssert)";
    v40 = 2080;
    v41 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/EaselUtilities.cpp";
    v42 = 1024;
    v43 = 556;
    v12 = "A non-nullptr context is required for drawShadowToContext().: Assertion with expression - %s : Failed in file - %s line - %i";
LABEL_18:
    v13 = v15;
    v14 = 28;
    goto LABEL_19;
  }
  if (!*a2 || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2) & 1) == 0)
  {
    if (GEOGetGeoResourceLibEaselLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_22_0);
    v15 = GEOGetGeoResourceLibEaselLog::log;
    if (!os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
      return;
    *(_DWORD *)buf = 136315650;
    v39 = "!GRL_UNIQUE_NAME(didTriggerAssert)";
    v40 = 2080;
    v41 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/EaselUtilities.cpp";
    v42 = 1024;
    v43 = 559;
    v12 = "A non-nullptr path is required for drawShadowToContext().: Assertion with expression - %s : Failed in file - %s line - %i";
    goto LABEL_18;
  }
  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a2 + 24))(*a2))
  {
    if (GEOGetGeoResourceLibRendererLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_10_0);
    v11 = GEOGetGeoResourceLibRendererLog::log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      v12 = "Receieved empty path for drawShadowToContext().";
      v13 = v11;
      v14 = 2;
LABEL_19:
      _os_log_impl(&dword_19F029000, v13, OS_LOG_TYPE_ERROR, v12, buf, v14);
    }
  }
  else
  {
    v16 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 120))(*a1);
    esl::AffineTransformMakeTranslation(0.0, -(float)v16, (uint64_t)buf);
    (*(void (**)(_BYTE *__return_ptr, _QWORD, uint8_t *))(*(_QWORD *)*a2 + 120))(v36, *a2, buf);
    v34 = *(_QWORD *)v36;
    v35 = *(std::__shared_weak_count **)&v36[8];
    if (*(_QWORD *)&v36[8])
    {
      v17 = (unint64_t *)(*(_QWORD *)&v36[8] + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
      v19 = *(std::__shared_weak_count **)&v36[8];
      if (*(_QWORD *)&v36[8])
      {
        v20 = (unint64_t *)(*(_QWORD *)&v36[8] + 8);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
    }
    if (v34 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 16))(v34) & 1) != 0)
    {
      esl::QuartzColor::QuartzColor(v36, a3);
      esl::QuartzColor::QuartzColor((esl::QuartzColor *)v32, 0.0, 0.0, 0.0, 1.0);
      if (esl::QuartzColor::isValid((esl::QuartzColor *)v36) && esl::QuartzColor::isValid((esl::QuartzColor *)v32))
      {
        (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 408))(*a1);
        v22 = *a1;
        v23 = a4[1];
        v24 = v23 + (float)(*(unsigned int (**)(_QWORD))(*(_QWORD *)*a1 + 120))(*a1);
        v30 = *a4;
        v31 = v24;
        if (v30 < 0.0)
          v30 = 0.0;
        if (v24 < 0.0)
          v31 = 0.0;
        (*(void (**)(uint64_t, float *, _BYTE *, float))(*(_QWORD *)v22 + 344))(v22, &v30, v36, a5);
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 232))(*a1, v32);
        (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 296))(*a1);
        (*(void (**)(_QWORD, uint64_t *))(*(_QWORD *)*a1 + 288))(*a1, &v34);
        (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 312))(*a1);
        (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 400))(*a1);
      }
      else
      {
        if (GEOGetGeoResourceLibEaselLog::onceToken != -1)
          dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_22_0);
        v26 = GEOGetGeoResourceLibEaselLog::log;
        if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
        {
          LOWORD(v30) = 0;
          _os_log_impl(&dword_19F029000, v26, OS_LOG_TYPE_ERROR, "Failed to create the shadow color for a path.", (uint8_t *)&v30, 2u);
        }
      }
      v32[0] = &off_1E42B02E0;
      v32[1] = &off_1E42B4850;
      if (cf)
        CFRelease(cf);
      *(_QWORD *)v36 = &off_1E42B02E0;
      *(_QWORD *)&v36[8] = &off_1E42B4850;
      if (*(_QWORD *)&v36[16])
        CFRelease(*(CFTypeRef *)&v36[16]);
    }
    else
    {
      if (GEOGetGeoResourceLibEaselLog::onceToken != -1)
        dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_22_0);
      v25 = GEOGetGeoResourceLibEaselLog::log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v36 = 136315650;
        *(_QWORD *)&v36[4] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
        *(_WORD *)&v36[12] = 2080;
        *(_QWORD *)&v36[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/EaselUtilities.cpp";
        *(_WORD *)&v36[22] = 1024;
        v37 = 568;
        _os_log_impl(&dword_19F029000, v25, OS_LOG_TYPE_ERROR, "Failed to create a path for drawShadowToContext().: Assertion with expression - %s : Failed in file - %s line - %i", v36, 0x1Cu);
      }
    }
    v27 = v35;
    if (v35)
    {
      p_shared_owners = (unint64_t *)&v35->__shared_owners_;
      do
        v29 = __ldaxr(p_shared_owners);
      while (__stlxr(v29 - 1, p_shared_owners));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
  }
}

void grl::drawShadowToContext(_QWORD *a1, _QWORD *a2, uint64_t a3, float *a4, uint64_t a5, float a6)
{
  uint64_t v7;
  uint64_t v13;
  float v14;
  NSObject *v15;
  const char *v16;
  NSObject *v17;
  float v18;
  float v19;
  _QWORD v20[2];
  CFTypeRef cf;
  _BYTE buf[24];
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v7 = *a1;
  if (v7 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7) & 1) != 0)
  {
    if (*a2 && ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2) & 1) != 0)
    {
      esl::QuartzColor::QuartzColor(buf, a3);
      esl::QuartzColor::QuartzColor((esl::QuartzColor *)v20, 1.0, 1.0, 1.0, 1.0);
      if (esl::QuartzColor::isValid((esl::QuartzColor *)buf) && esl::QuartzColor::isValid((esl::QuartzColor *)v20))
      {
        (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 408))(*a1);
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 232))(*a1, v20);
        v13 = *a1;
        v14 = a4[1];
        v18 = *a4;
        v19 = v14;
        if (v18 < 0.0)
          v18 = 0.0;
        if (v14 < 0.0)
          v19 = 0.0;
        (*(void (**)(uint64_t, float *, _BYTE *, float))(*(_QWORD *)v13 + 344))(v13, &v18, buf, a6);
        (*(void (**)(_QWORD, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)*a1 + 376))(*a1, a5, a2, 1);
        (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 400))(*a1);
      }
      else
      {
        if (GEOGetGeoResourceLibEaselLog::onceToken != -1)
          dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_22_0);
        v17 = GEOGetGeoResourceLibEaselLog::log;
        if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
        {
          LOWORD(v18) = 0;
          _os_log_impl(&dword_19F029000, v17, OS_LOG_TYPE_ERROR, "Failed to create the shadow color for an image.", (uint8_t *)&v18, 2u);
        }
      }
      v20[0] = &off_1E42B02E0;
      v20[1] = &off_1E42B4850;
      if (cf)
        CFRelease(cf);
      *(_QWORD *)buf = &off_1E42B02E0;
      *(_QWORD *)&buf[8] = &off_1E42B4850;
      if (*(_QWORD *)&buf[16])
        CFRelease(*(CFTypeRef *)&buf[16]);
      return;
    }
    if (GEOGetGeoResourceLibEaselLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_22_0);
    v15 = GEOGetGeoResourceLibEaselLog::log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/EaselUtilities.cpp";
      *(_WORD *)&buf[22] = 1024;
      v23 = 596;
      v16 = "A non-nullptr image is required for drawShadowToContext().: Assertion with expression - %s : Failed in file - %s line - %i";
      goto LABEL_20;
    }
  }
  else
  {
    if (GEOGetGeoResourceLibEaselLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_22_0);
    v15 = GEOGetGeoResourceLibEaselLog::log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/EaselUtilities.cpp";
      *(_WORD *)&buf[22] = 1024;
      v23 = 593;
      v16 = "A non-nullptr context is required for drawShadowToContext().: Assertion with expression - %s : Failed in fil"
            "e - %s line - %i";
LABEL_20:
      _os_log_impl(&dword_19F029000, v15, OS_LOG_TYPE_ERROR, v16, buf, 0x1Cu);
    }
  }
}

void grl::drawDebugSquareToContext(_QWORD *a1, uint64_t a2, float *a3, float *a4)
{
  uint64_t v5;
  float v9;
  float v10;
  float v11;
  NSObject *v12;
  const char *v13;
  NSObject *v14;
  uint8_t v15[16];
  _DWORD v16[4];
  _BYTE buf[24];
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v5 = *a1;
  if (!v5 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5) & 1) == 0)
  {
    if (GEOGetGeoResourceLibEaselLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_22_0);
    v12 = GEOGetGeoResourceLibEaselLog::log;
    if (!os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
      return;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/EaselUtilities.cpp";
    *(_WORD *)&buf[22] = 1024;
    v18 = 663;
    v13 = "A non-nullptr context is required for drawDebugSquareToContext().: Assertion with expression - %s : Failed in "
          "file - %s line - %i";
LABEL_11:
    _os_log_impl(&dword_19F029000, v12, OS_LOG_TYPE_ERROR, v13, buf, 0x1Cu);
    return;
  }
  if (!*(_BYTE *)(a2 + 3))
  {
    if (GEOGetGeoResourceLibRendererLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_10_0);
    v12 = GEOGetGeoResourceLibRendererLog::log;
    if (!os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR))
      return;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/EaselUtilities.cpp";
    *(_WORD *)&buf[22] = 1024;
    v18 = 666;
    v13 = "A non-zero alpha color is required to draw for drawDebugSquareToContext().: Assertion with expression - %s : F"
          "ailed in file - %s line - %i";
    goto LABEL_11;
  }
  v9 = a4[1];
  if ((float)(*a4 * v9) > 0.0)
  {
    v10 = a3[1];
    v11 = *a4 + *a3;
    *(float *)v16 = *a3;
    *(float *)&v16[1] = v10;
    *(float *)&v16[2] = v11;
    *(float *)&v16[3] = v9 + v10;
    esl::QuartzColor::QuartzColor(buf, a2);
    if (esl::QuartzColor::isValid((esl::QuartzColor *)buf))
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 408))(*a1);
      (*(void (**)(_QWORD, _BYTE *))(*(_QWORD *)*a1 + 232))(*a1, buf);
      (*(void (**)(_QWORD, _DWORD *, _QWORD))(*(_QWORD *)*a1 + 256))(*a1, v16, 0);
      (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 400))(*a1);
    }
    else
    {
      if (GEOGetGeoResourceLibEaselLog::onceToken != -1)
        dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_22_0);
      v14 = GEOGetGeoResourceLibEaselLog::log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v15 = 0;
        _os_log_impl(&dword_19F029000, v14, OS_LOG_TYPE_ERROR, "Failed to create the fill color for a debug square.", v15, 2u);
      }
    }
    *(_QWORD *)buf = &off_1E42B02E0;
    *(_QWORD *)&buf[8] = &off_1E42B4850;
    if (*(_QWORD *)&buf[16])
      CFRelease(*(CFTypeRef *)&buf[16]);
    return;
  }
  if (GEOGetGeoResourceLibRendererLog::onceToken != -1)
    dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_10_0);
  v12 = GEOGetGeoResourceLibRendererLog::log;
  if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/EaselUtilities.cpp";
    *(_WORD *)&buf[22] = 1024;
    v18 = 669;
    v13 = "A positive size is required for drawDebugSquareToContext().: Assertion with expression - %s : Failed in file - %s line - %i";
    goto LABEL_11;
  }
}

BOOL grl::drawDebugLine(_QWORD *a1, uint64_t a2, float32x2_t *a3, float a4)
{
  uint64_t v5;
  NSObject *v9;
  _BOOL8 result;
  const char *v11;
  float32x2_t v17[2];

  v5 = *a1;
  if (v5 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5) & 1) != 0)
  {
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2) & 1) != 0)
    {
      if (a4 >= 0.0)
      {
        __asm { FMOV            V2.2S, #1.0 }
        _D2.i32[0] = fmaxf(a4, 1.0);
        v17[0] = vrnda_f32(*a3);
        v17[1] = vadd_f32(_D2, v17[0]);
        (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 408))(*a1);
        (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 232))(*a1, a2);
        (*(void (**)(_QWORD, float32x2_t *, _QWORD))(*(_QWORD *)*a1 + 256))(*a1, v17, 0);
        (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 400))(*a1);
        return 1;
      }
      if (GEOGetGeoResourceLibEaselLog::onceToken != -1)
        dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_22_0);
      v9 = GEOGetGeoResourceLibEaselLog::log;
      result = os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR);
      if (result)
      {
        v17[0].i16[0] = 0;
        v11 = "A positive width is required.";
LABEL_13:
        _os_log_impl(&dword_19F029000, v9, OS_LOG_TYPE_ERROR, v11, (uint8_t *)v17, 2u);
        return 0;
      }
    }
    else
    {
      if (GEOGetGeoResourceLibEaselLog::onceToken != -1)
        dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_22_0);
      v9 = GEOGetGeoResourceLibEaselLog::log;
      result = os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR);
      if (result)
      {
        v17[0].i16[0] = 0;
        v11 = "A non-nullptr color is required.";
        goto LABEL_13;
      }
    }
  }
  else
  {
    if (GEOGetGeoResourceLibEaselLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_22_0);
    v9 = GEOGetGeoResourceLibEaselLog::log;
    result = os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR);
    if (result)
    {
      v17[0].i16[0] = 0;
      v11 = "A non-nullptr context is required.";
      goto LABEL_13;
    }
  }
  return result;
}

uint64_t grl::make_shared<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>@<X0>(grl::Allocator *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  grl::Allocator *v4;
  uint64_t result;

  v3 = grl::Allocator::instance(a1);
  v4 = (grl::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3 + 16))(v3, 64, 8);
  *(_QWORD *)v4 = &off_1E42E6648;
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *((_QWORD *)v4 + 3) = v3;
  *((_QWORD *)v4 + 5) = 0;
  result = grl::Allocator::instance(v4);
  *((_QWORD *)v4 + 6) = result;
  *((_QWORD *)v4 + 7) = 0;
  *((_QWORD *)v4 + 4) = (char *)v4 + 40;
  *a2 = (char *)v4 + 32;
  a2[1] = v4;
  return result;
}

uint64_t grl::codec::IconConfigPack::packLog(grl::codec::IconConfigPack *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  void **v11;
  uint64_t v12;
  _QWORD *v13;
  const std::locale::facet *v14;
  _QWORD *v15;
  std::locale::id *v16;
  const std::locale::facet *v17;
  unsigned int *v18;
  _QWORD *v19;
  unsigned int *v20;
  _QWORD *v21;
  _QWORD *v22;
  const std::locale::facet *v23;
  uint64_t v24;
  void *__p[2];
  unsigned __int8 v27;
  _QWORD v28[2];
  _QWORD v29[11];
  char v30;
  uint64_t v31;
  std::locale v32;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v28);
  std::mutex::lock((std::mutex *)((char *)this + 232));
  v2 = (_QWORD *)*((_QWORD *)this + 16);
  if (v2 != (_QWORD *)((char *)this + 120))
  {
    v3 = 0;
    do
    {
      v4 = v2[3];
      v5 = (std::__shared_weak_count *)v2[4];
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
        v8 = *(_QWORD *)(v4 + 24);
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      else
      {
        v8 = *(_QWORD *)(v4 + 24);
      }
      v3 += v8;
      v2 = (_QWORD *)v2[1];
    }
    while (v2 != (_QWORD *)((char *)this + 120));
  }
  std::mutex::unlock((std::mutex *)((char *)this + 232));
  v10 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v29, (uint64_t)"IconConfigPack: ", 16);
  grl::codec::ResourcePack::fileName(this, (uint64_t)__p);
  if ((v27 & 0x80u) == 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  if ((v27 & 0x80u) == 0)
    v12 = v27;
  else
    v12 = (uint64_t)__p[1];
  v13 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, v12);
  std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(_QWORD *)(*v13 - 24)));
  v14 = std::locale::use_facet(&v32, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
  std::locale::~locale(&v32);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v27 < 0)
    operator delete(__p[0]);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v29, (uint64_t)"Number of Icons: ", 17);
  v15 = (_QWORD *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(_QWORD *)(*v15 - 24)));
  v16 = (std::locale::id *)MEMORY[0x1E0DE4A90];
  v17 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v29, (uint64_t)"Cache| hits: ", 13);
  v18 = (unsigned int *)((char *)this + 144);
  atomic_load((unsigned int *)this + 36);
  v19 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)" misses:", 8);
  v20 = (unsigned int *)((char *)this + 148);
  atomic_load(v20);
  v21 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v21, (uint64_t)" hitRate: ", 10);
  atomic_load(v18);
  atomic_load(v18);
  atomic_load(v20);
  v22 = (_QWORD *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v22 + *(_QWORD *)(*v22 - 24)));
  v23 = std::locale::use_facet((const std::locale *)__p, v16);
  ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  std::stringbuf::str();
  v28[0] = *MEMORY[0x1E0DE4F50];
  v24 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v28 + *(_QWORD *)(v28[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v29[0] = v24;
  v29[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v30 < 0)
    operator delete((void *)v29[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1A1AF4D64](&v31);
}

void grl::codec::IconConfigPack::encode(grl::codec::IconConfigPack *this@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  grl::Allocator *v5;
  void *v6;
  size_t v7;
  char *v8;
  char *v9;
  int64_t v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t **v13;
  uint64_t *v14;
  uint64_t **v15;
  size_t v16;
  grl::Allocator *v17;
  grl::Allocator *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t **v26;
  uint64_t **v27;
  uint64_t *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  char *v51;
  uint64_t *v52;
  __int128 v53;
  uint64_t *v54;
  uint64_t *v55;
  _QWORD *v56;
  _QWORD *v57;
  BOOL v58;
  uint64_t *v59;
  grl::codec::IconData **v60;
  grl::codec::IconData **v61;
  _BYTE *v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t **v65;
  char *v66;
  char *v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  char *v74;
  __int16 v75;
  uint64_t *v76;
  void *v77;
  uint64_t *v78;
  uint64_t **v79;
  _OWORD *v80;
  int v81;
  int v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t *v85;
  __int16 v86;
  void *v87;
  uint64_t *v88;
  _QWORD *v89;
  _OWORD *v90;
  const void *v91;
  size_t v92;
  char *v93;
  uint64_t *v94;
  uint64_t **v95;
  uint64_t *v96;
  uint64_t **v97;
  uint64_t *v98;
  uint64_t **v99;
  void *v100;
  size_t v101;
  char *v102;
  uint64_t *v103;
  uint64_t **v104;
  uint64_t *v105;
  __int128 v107;
  uint64_t **v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  void *v112[2];
  uint64_t *v113;
  void *v114[2];
  uint64_t *v115;
  uint64_t *v116;
  _QWORD *v117[3];
  void *v118;
  char *v119;
  char *v120;
  void *v121;
  _BYTE *v122;
  uint64_t v123;
  char v124;
  void *__p;
  _BYTE *v126;
  unsigned __int8 v127[16];
  uint64_t v128;
  unsigned __int8 v129[8];
  _BYTE *v130;
  uint64_t v131;
  char v132;
  __int128 v133;
  uint64_t v134;
  uint64_t v135;
  unsigned __int8 v136[8];
  uint64_t *v137;
  grl::Allocator *v138;
  uint64_t v139;
  unsigned __int8 v140[4];
  unsigned __int8 v141[8];
  void *v142;
  uint64_t v143;
  char v144;

  v121 = 0;
  v122 = 0;
  v124 = 0;
  v123 = 0;
  v141[0] = 73;
  geo::obitstream::appendBytes((geo::obitstream *)&v121, (char *)v141, 1);
  v141[0] = 67;
  geo::obitstream::appendBytes((geo::obitstream *)&v121, (char *)v141, 1);
  v141[0] = 79;
  geo::obitstream::appendBytes((geo::obitstream *)&v121, (char *)v141, 1);
  v141[0] = 78;
  geo::obitstream::appendBytes((geo::obitstream *)&v121, (char *)v141, 1);
  v141[0] = 67;
  geo::obitstream::appendBytes((geo::obitstream *)&v121, (char *)v141, 1);
  v141[0] = 79;
  geo::obitstream::appendBytes((geo::obitstream *)&v121, (char *)v141, 1);
  v141[0] = 78;
  geo::obitstream::appendBytes((geo::obitstream *)&v121, (char *)v141, 1);
  v141[0] = 70;
  geo::obitstream::appendBytes((geo::obitstream *)&v121, (char *)v141, 1);
  v141[0] = 73;
  geo::obitstream::appendBytes((geo::obitstream *)&v121, (char *)v141, 1);
  v141[0] = 71;
  geo::obitstream::appendBytes((geo::obitstream *)&v121, (char *)v141, 1);
  v141[0] = 80;
  geo::obitstream::appendBytes((geo::obitstream *)&v121, (char *)v141, 1);
  v141[0] = 65;
  geo::obitstream::appendBytes((geo::obitstream *)&v121, (char *)v141, 1);
  v141[0] = 67;
  geo::obitstream::appendBytes((geo::obitstream *)&v121, (char *)v141, 1);
  v141[0] = 75;
  geo::obitstream::appendBytes((geo::obitstream *)&v121, (char *)v141, 1);
  v118 = 0;
  v119 = 0;
  v120 = 0;
  v6 = v121;
  v7 = v122 - (_BYTE *)v121;
  if (v122 == v121)
  {
    v8 = 0;
    v9 = 0;
  }
  else
  {
    if (v122 - (_BYTE *)v121 < 0)
      goto LABEL_143;
    v8 = (char *)operator new(v122 - (_BYTE *)v121);
    v9 = &v8[v7];
    v118 = v8;
    v120 = &v8[v7];
    v5 = (grl::Allocator *)memmove(v8, v6, v7);
    v119 = &v8[v7];
  }
  v10 = v9 - v8;
  if ((unint64_t)(v9 - v8) > 0x3F)
  {
    if (v10 != 64)
      v119 = v8 + 64;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)&v118, 64 - v10);
  }
  v117[0] = 0;
  v117[1] = (_QWORD *)grl::Allocator::instance(v5);
  v117[2] = 0;
  v116 = (uint64_t *)v117;
  grl::codec::ResourcePack::encodePackInfo(this, a2, v114);
  *(_WORD *)v136 = 1;
  *(_QWORD *)v141 = v136;
  v11 = std::__tree<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,grl::Allocator>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>(&v116, (unsigned __int16 *)v136, (uint64_t)&std::piecewise_construct, (_WORD **)v141);
  v12 = v11[5];
  if (v12)
  {
    v11[6] = v12;
    operator delete(v12);
  }
  *(_OWORD *)(v11 + 5) = *(_OWORD *)v114;
  v11[7] = v115;
  v114[1] = 0;
  v115 = 0;
  v114[0] = 0;
  *(_WORD *)v136 = 1;
  *(_QWORD *)v141 = v136;
  *((_BYTE *)std::__tree<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,grl::Allocator>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>(&v116, (unsigned __int16 *)v136, (uint64_t)&std::piecewise_construct, (_WORD **)v141)+ 64) = 1;
  grl::PropertySet::encodePropertyContext(v112);
  strcpy((char *)v136, "\v");
  *(_QWORD *)v141 = v136;
  v13 = std::__tree<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,grl::Allocator>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>(&v116, (unsigned __int16 *)v136, (uint64_t)&std::piecewise_construct, (_WORD **)v141);
  v14 = v13[5];
  if (v14)
  {
    v13[6] = v14;
    operator delete(v14);
  }
  *(_OWORD *)(v13 + 5) = *(_OWORD *)v112;
  v13[7] = v113;
  v112[1] = 0;
  v113 = 0;
  v112[0] = 0;
  strcpy((char *)v136, "\v");
  *(_QWORD *)v141 = v136;
  v15 = std::__tree<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,grl::Allocator>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>(&v116, (unsigned __int16 *)v136, (uint64_t)&std::piecewise_construct, (_WORD **)v141);
  *((_BYTE *)v15 + 64) = 1;
  v109 = 0;
  v110 = grl::Allocator::instance((grl::Allocator *)v15);
  v111 = 0;
  v108 = &v109;
  v16 = 72960 * *(_QWORD *)(*((_QWORD *)this + 19) + 24);
  *(_QWORD *)v141 = 0;
  v142 = 0;
  v144 = 0;
  v143 = 0;
  std::vector<unsigned char>::reserve((unint64_t *)v141, v16);
  v137 = 0;
  v18 = (grl::Allocator *)grl::Allocator::instance(v17);
  v138 = v18;
  v139 = 0;
  *(_QWORD *)v136 = &v137;
  v19 = (_QWORD *)*((_QWORD *)this + 19);
  v22 = (_QWORD *)*v19;
  v21 = v19 + 1;
  v20 = v22;
  if (v22 != v21)
  {
    do
    {
      v23 = *((unsigned __int16 *)v20 + 26);
      v24 = *((unsigned __int16 *)v20 + 27);
      v25 = *((unsigned __int8 *)v20 + 56);
      v26 = &v137;
      v27 = &v137;
      v28 = v137;
      if (v137)
      {
        while (1)
        {
          while (1)
          {
            v26 = (uint64_t **)v28;
            v29 = *((unsigned __int8 *)v28 + 32);
            if (v25 == v29)
              break;
            if (v25 >= v29)
            {
              if (v29 >= v25)
                goto LABEL_32;
              goto LABEL_27;
            }
LABEL_24:
            v28 = *v26;
            v27 = v26;
            if (!*v26)
              goto LABEL_29;
          }
          v30 = *((unsigned __int16 *)v26 + 18);
          if (v24 != v30)
          {
            if (v24 >= v30)
            {
              if (v30 >= v24)
                goto LABEL_32;
              goto LABEL_27;
            }
            goto LABEL_24;
          }
          v31 = *((unsigned __int16 *)v26 + 17);
          if (v23 < v31)
            goto LABEL_24;
          if (v31 >= v23)
            goto LABEL_32;
LABEL_27:
          v28 = v26[1];
          if (!v28)
          {
            v27 = v26 + 1;
            break;
          }
        }
      }
LABEL_29:
      v32 = (uint64_t *)v26;
      v26 = (uint64_t **)(*(uint64_t (**)(grl::Allocator *, uint64_t, uint64_t))(*(_QWORD *)v138 + 16))(v138, 64, 8);
      *((_BYTE *)v26 + 32) = v25;
      *((_WORD *)v26 + 17) = v23;
      *((_WORD *)v26 + 18) = v24;
      v26[6] = 0;
      v26[7] = 0;
      v26[5] = 0;
      *v26 = 0;
      v26[1] = 0;
      v26[2] = v32;
      *v27 = (uint64_t *)v26;
      v33 = (uint64_t *)v26;
      if (**(_QWORD **)v136)
      {
        *(_QWORD *)v136 = **(_QWORD **)v136;
        v33 = *v27;
      }
      v18 = (grl::Allocator *)std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v137, v33);
      ++v139;
LABEL_32:
      v133 = *(_OWORD *)(v20 + 5);
      LOBYTE(v134) = *((_BYTE *)v20 + 56);
      v35 = v20[8];
      v34 = v20[9];
      if (v34)
      {
        v36 = (unint64_t *)(v34 + 8);
        do
          v37 = __ldxr(v36);
        while (__stxr(v37 + 1, v36));
      }
      v38 = v26[6];
      v39 = v26[7];
      if (v38 >= v39)
      {
        v41 = v26[5];
        v42 = 0xAAAAAAAAAAAAAAABLL * (((char *)v38 - (char *)v41) >> 4);
        v43 = v42 + 1;
        if (v42 + 1 > 0x555555555555555)
          goto LABEL_143;
        v44 = 0xAAAAAAAAAAAAAAABLL * (((char *)v39 - (char *)v41) >> 4);
        if (2 * v44 > v43)
          v43 = 2 * v44;
        if (v44 >= 0x2AAAAAAAAAAAAAALL)
          v43 = 0x555555555555555;
        if (v43 > 0x555555555555555)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v45 = 3 * v43;
        v18 = (grl::Allocator *)operator new(48 * v43);
        v46 = (char *)v18 + 48 * v42;
        v47 = (uint64_t *)((char *)v18 + 16 * v45);
        *(_QWORD *)v46 = &off_1E42C2848;
        *(_OWORD *)(v46 + 8) = v133;
        v46[24] = v134;
        *((_QWORD *)v46 + 4) = v35;
        *((_QWORD *)v46 + 5) = v34;
        v40 = (uint64_t *)(v46 + 48);
        v48 = v26[5];
        v49 = v26[6];
        if (v49 == v48)
        {
          v26[5] = (uint64_t *)v46;
          v26[6] = v40;
          v26[7] = v47;
          if (!v49)
            goto LABEL_50;
        }
        else
        {
          v50 = 0;
          do
          {
            v51 = &v46[v50 * 8];
            *((_QWORD *)v51 - 6) = &off_1E42C2848;
            v52 = &v49[v50];
            v53 = *(_OWORD *)&v49[v50 - 5];
            *(v51 - 24) = v49[v50 - 3];
            *(_OWORD *)(v51 - 40) = v53;
            *((_OWORD *)v51 - 1) = *(_OWORD *)&v49[v50 - 2];
            *(v52 - 2) = 0;
            *(v52 - 1) = 0;
            v50 -= 6;
          }
          while (&v49[v50] != v48);
          v49 = v26[5];
          v54 = v26[6];
          v26[5] = (uint64_t *)&v46[v50 * 8];
          v26[6] = v40;
          v26[7] = v47;
          if (v54 != v49)
          {
            do
            {
              v55 = v54 - 6;
              v18 = (grl::Allocator *)std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)(v54 - 2));
              v54 = v55;
            }
            while (v55 != v49);
          }
          if (!v49)
            goto LABEL_50;
        }
        operator delete(v49);
      }
      else
      {
        *v38 = (uint64_t)&off_1E42C2848;
        *(_OWORD *)(v38 + 1) = v133;
        *((_BYTE *)v38 + 24) = v134;
        v38[4] = v35;
        v38[5] = v34;
        v40 = v38 + 6;
      }
LABEL_50:
      v26[6] = v40;
      v56 = (_QWORD *)v20[1];
      if (v56)
      {
        do
        {
          v57 = v56;
          v56 = (_QWORD *)*v56;
        }
        while (v56);
      }
      else
      {
        do
        {
          v57 = (_QWORD *)v20[2];
          v58 = *v57 == (_QWORD)v20;
          v20 = v57;
        }
        while (!v58);
      }
      v20 = v57;
    }
    while (v57 != v21);
  }
  *((_QWORD *)&v133 + 1) = 0;
  v134 = grl::Allocator::instance(v18);
  v135 = 0;
  *(_QWORD *)&v133 = (char *)&v133 + 8;
  v59 = *(uint64_t **)v136;
  if (*(uint64_t ***)v136 == &v137)
    goto LABEL_109;
  do
  {
    *(_QWORD *)v129 = 0;
    v130 = 0;
    v132 = 0;
    v131 = 0;
    std::vector<unsigned char>::reserve((unint64_t *)v129, 0x5555555555555AF8 * ((v59[6] - v59[5]) >> 4));
    *(_DWORD *)v127 = -1431655765 * ((unint64_t)(v59[6] - v59[5]) >> 4);
    geo::obitstream::appendBytes((geo::obitstream *)v129, (char *)v127, 4);
    v61 = (grl::codec::IconData **)v59[5];
    v60 = (grl::codec::IconData **)v59[6];
    while (v61 != v60)
    {
      grl::IconKey::encode((grl::IconKey *)v61, a2, v127);
      LODWORD(__p) = *(_DWORD *)&v127[8] - *(_DWORD *)v127;
      geo::obitstream::appendBytes((geo::obitstream *)v129, (char *)&__p, 4);
      geo::obitstream::appendBytes((geo::obitstream *)v129, *(char **)v127, *(_QWORD *)&v127[8] - *(_QWORD *)v127);
      grl::codec::IconData::encode(v61[4], &__p);
      *(_DWORD *)v140 = (_DWORD)v126 - (_DWORD)__p;
      geo::obitstream::appendBytes((geo::obitstream *)v129, (char *)v140, 4);
      geo::obitstream::appendBytes((geo::obitstream *)v129, (char *)__p, v126 - (_BYTE *)__p);
      if (__p)
      {
        v126 = __p;
        operator delete(__p);
      }
      if (*(_QWORD *)v127)
      {
        *(_QWORD *)&v127[8] = *(_QWORD *)v127;
        operator delete(*(void **)v127);
      }
      v61 += 6;
    }
    v63 = *(_BYTE **)v129;
    v62 = v130;
    grl::codec::ResourcePack::compressData((uint64_t)v129, (unint64_t *)v127);
    v107 = *(_OWORD *)v127;
    v64 = v128;
    v128 = 0;
    memset(v127, 0, sizeof(v127));
    v65 = (uint64_t **)&v133 + 1;
    v66 = (char *)&v133 + 8;
    v67 = (char *)*((_QWORD *)&v133 + 1);
    if (!*((_QWORD *)&v133 + 1))
      goto LABEL_83;
    v68 = *((unsigned __int8 *)v59 + 32);
    v69 = *((unsigned __int16 *)v59 + 18);
    v70 = *((unsigned __int16 *)v59 + 17);
    do
    {
      while (1)
      {
        v66 = v67;
        v71 = v67[32];
        if (v68 != v71)
          break;
        v72 = *((unsigned __int16 *)v66 + 18);
        if (v69 != v72)
        {
          if (v69 < v72)
            goto LABEL_78;
          if (v72 >= v69)
            goto LABEL_86;
          goto LABEL_81;
        }
        v73 = *((unsigned __int16 *)v66 + 17);
        if (v70 >= v73)
        {
          if (v73 >= v70)
            goto LABEL_86;
          goto LABEL_81;
        }
LABEL_78:
        v67 = *(char **)v66;
        v65 = (uint64_t **)v66;
        if (!*(_QWORD *)v66)
          goto LABEL_83;
      }
      if (v68 < v71)
        goto LABEL_78;
      if (v71 >= v68)
        goto LABEL_86;
LABEL_81:
      v67 = (char *)*((_QWORD *)v66 + 1);
    }
    while (v67);
    v65 = (uint64_t **)(v66 + 8);
LABEL_83:
    v74 = v66;
    v66 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v134 + 16))(v134, 72, 8);
    v75 = *((_WORD *)v59 + 18);
    *((_DWORD *)v66 + 8) = *((_DWORD *)v59 + 8);
    *((_WORD *)v66 + 18) = v75;
    *(_OWORD *)(v66 + 40) = 0u;
    *(_OWORD *)(v66 + 56) = 0u;
    *(_QWORD *)v66 = 0;
    *((_QWORD *)v66 + 1) = 0;
    *((_QWORD *)v66 + 2) = v74;
    *v65 = (uint64_t *)v66;
    v76 = (uint64_t *)v66;
    if (*(_QWORD *)v133)
    {
      *(_QWORD *)&v133 = *(_QWORD *)v133;
      v76 = *v65;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)&v133 + 1), v76);
    ++v135;
LABEL_86:
    *((_QWORD *)v66 + 5) = v62 - v63;
    v77 = (void *)*((_QWORD *)v66 + 6);
    if (v77)
    {
      *((_QWORD *)v66 + 7) = v77;
      operator delete(v77);
    }
    *((_OWORD *)v66 + 3) = v107;
    *((_QWORD *)v66 + 8) = v64;
    if (*(_QWORD *)v127)
    {
      *(_QWORD *)&v127[8] = *(_QWORD *)v127;
      operator delete(*(void **)v127);
    }
    if (*(_QWORD *)v129)
    {
      v130 = *(_BYTE **)v129;
      operator delete(*(void **)v129);
    }
    v78 = (uint64_t *)v59[1];
    if (v78)
    {
      do
      {
        v79 = (uint64_t **)v78;
        v78 = (uint64_t *)*v78;
      }
      while (v78);
    }
    else
    {
      do
      {
        v79 = (uint64_t **)v59[2];
        v58 = *v79 == v59;
        v59 = (uint64_t *)v79;
      }
      while (!v58);
    }
    v59 = (uint64_t *)v79;
  }
  while (v79 != &v137);
  v80 = (_OWORD *)v133;
  if ((__int128 *)v133 != (__int128 *)((char *)&v133 + 8))
  {
    do
    {
      v81 = (int)v142;
      v82 = *(_DWORD *)v141;
      v83 = std::__tree<std::__value_type<grl::codec::IconConfigPack::IconLocationIndex,unsigned int>,std::__map_value_compare<grl::codec::IconConfigPack::IconLocationIndex,std::__value_type<grl::codec::IconConfigPack::IconLocationIndex,unsigned int>,std::less<grl::codec::IconConfigPack::IconLocationIndex>,true>,geo::StdAllocator<std::__value_type<grl::codec::IconConfigPack::IconLocationIndex,unsigned int>,grl::Allocator>>::__find_equal<grl::codec::IconConfigPack::IconLocationIndex>((uint64_t)&v108, v129, (unsigned __int8 *)v80 + 32);
      v84 = *v83;
      if (!*v83)
      {
        v85 = v83;
        v84 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v110 + 16))(v110, 40, 8);
        v86 = *((_WORD *)v80 + 18);
        *(_DWORD *)(v84 + 28) = *((_DWORD *)v80 + 8);
        *(_WORD *)(v84 + 32) = v86;
        *(_DWORD *)(v84 + 36) = 0;
        v87 = *(void **)v129;
        *(_QWORD *)v84 = 0;
        *(_QWORD *)(v84 + 8) = 0;
        *(_QWORD *)(v84 + 16) = v87;
        *v85 = v84;
        v88 = (uint64_t *)v84;
        if (*v108)
        {
          v108 = (uint64_t **)*v108;
          v88 = (uint64_t *)*v85;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v109, v88);
        ++v111;
      }
      *(_DWORD *)(v84 + 36) = v81 - v82;
      *(_QWORD *)v129 = *((_QWORD *)v80 + 5);
      geo::obitstream::appendBytes((geo::obitstream *)v141, (char *)v129, 8);
      *(_QWORD *)v129 = *((_QWORD *)v80 + 7) - *((_QWORD *)v80 + 6);
      geo::obitstream::appendBytes((geo::obitstream *)v141, (char *)v129, 8);
      geo::obitstream::appendBytes((geo::obitstream *)v141, *((char **)v80 + 6), *((_QWORD *)v80 + 7) - *((_QWORD *)v80 + 6));
      v89 = (_QWORD *)*((_QWORD *)v80 + 1);
      if (v89)
      {
        do
        {
          v90 = v89;
          v89 = (_QWORD *)*v89;
        }
        while (v89);
      }
      else
      {
        do
        {
          v90 = (_OWORD *)*((_QWORD *)v80 + 2);
          v58 = *(_QWORD *)v90 == (_QWORD)v80;
          v80 = v90;
        }
        while (!v58);
      }
      v80 = v90;
    }
    while (v90 != (__int128 *)((char *)&v133 + 8));
  }
LABEL_109:
  v91 = *(const void **)v141;
  v92 = (size_t)v142 - *(_QWORD *)v141;
  if (v142 != *(void **)v141)
  {
    if ((uint64_t)v142 - *(_QWORD *)v141 >= 0)
    {
      v93 = (char *)operator new((size_t)v142 - *(_QWORD *)v141);
      v94 = (uint64_t *)&v93[v92];
      memmove(v93, v91, v92);
      goto LABEL_113;
    }
LABEL_143:
    abort();
  }
  v93 = 0;
  v94 = 0;
LABEL_113:
  std::__tree<std::__value_type<grl::codec::IconConfigPack::IconLocationIndex,std::pair<unsigned long long,std::vector<unsigned char>>>,std::__map_value_compare<grl::codec::IconConfigPack::IconLocationIndex,std::__value_type<grl::codec::IconConfigPack::IconLocationIndex,std::pair<unsigned long long,std::vector<unsigned char>>>,std::less<grl::codec::IconConfigPack::IconLocationIndex>,true>,geo::StdAllocator<std::__value_type<grl::codec::IconConfigPack::IconLocationIndex,std::pair<unsigned long long,std::vector<unsigned char>>>,grl::Allocator>>::destroy((uint64_t)&v133, *((_QWORD **)&v133 + 1));
  std::__tree<std::__value_type<grl::codec::IconConfigPack::IconLocationIndex,std::vector<std::pair<grl::IconKey,std::shared_ptr<grl::codec::IconData>>>>,std::__map_value_compare<grl::codec::IconConfigPack::IconLocationIndex,std::__value_type<grl::codec::IconConfigPack::IconLocationIndex,std::vector<std::pair<grl::IconKey,std::shared_ptr<grl::codec::IconData>>>>,std::less<grl::codec::IconConfigPack::IconLocationIndex>,true>,geo::StdAllocator<std::__value_type<grl::codec::IconConfigPack::IconLocationIndex,std::vector<std::pair<grl::IconKey,std::shared_ptr<grl::codec::IconData>>>>,grl::Allocator>>::destroy((uint64_t)v136, v137);
  if (*(_QWORD *)v141)
  {
    v142 = *(void **)v141;
    operator delete(*(void **)v141);
  }
  *(_WORD *)v136 = 16;
  *(_QWORD *)v141 = v136;
  v95 = std::__tree<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,grl::Allocator>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>(&v116, (unsigned __int16 *)v136, (uint64_t)&std::piecewise_construct, (_WORD **)v141);
  v96 = v95[5];
  if (v96)
  {
    v95[6] = v96;
    operator delete(v96);
  }
  v95[5] = (uint64_t *)v93;
  v95[6] = v94;
  v95[7] = v94;
  *(_WORD *)v136 = 16;
  *(_QWORD *)v141 = v136;
  *((_BYTE *)std::__tree<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,grl::Allocator>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>(&v116, (unsigned __int16 *)v136, (uint64_t)&std::piecewise_construct, (_WORD **)v141)+ 64) = 0;
  *(_QWORD *)v141 = 0;
  v142 = 0;
  v144 = 0;
  v143 = 0;
  std::vector<unsigned char>::reserve((unint64_t *)v141, 14 * v111);
  *(_DWORD *)v136 = v111;
  geo::obitstream::appendBytes((geo::obitstream *)v141, (char *)v136, 4);
  v97 = v108;
  if (v108 != &v109)
  {
    do
    {
      v136[0] = *((_BYTE *)v97 + 28);
      geo::obitstream::appendBytes((geo::obitstream *)v141, (char *)v136, 1);
      if (a2 >= 3)
      {
        *(_WORD *)v136 = *((_WORD *)v97 + 15);
        geo::obitstream::appendBytes((geo::obitstream *)v141, (char *)v136, 2);
      }
      *(_WORD *)v136 = *((_WORD *)v97 + 16);
      geo::obitstream::appendBytes((geo::obitstream *)v141, (char *)v136, 2);
      *(_DWORD *)v136 = *((_DWORD *)v97 + 9);
      geo::obitstream::appendBytes((geo::obitstream *)v141, (char *)v136, 4);
      v98 = v97[1];
      if (v98)
      {
        do
        {
          v99 = (uint64_t **)v98;
          v98 = (uint64_t *)*v98;
        }
        while (v98);
      }
      else
      {
        do
        {
          v99 = (uint64_t **)v97[2];
          v58 = *v99 == (uint64_t *)v97;
          v97 = v99;
        }
        while (!v58);
      }
      v97 = v99;
    }
    while (v99 != &v109);
  }
  v100 = *(void **)v141;
  v101 = (size_t)v142 - *(_QWORD *)v141;
  if (v142 == *(void **)v141)
  {
    v102 = 0;
    v103 = 0;
    if (*(_QWORD *)v141)
      goto LABEL_129;
  }
  else
  {
    if ((uint64_t)v142 - *(_QWORD *)v141 < 0)
      goto LABEL_143;
    v102 = (char *)operator new((size_t)v142 - *(_QWORD *)v141);
    v103 = (uint64_t *)&v102[v101];
    memmove(v102, v100, v101);
    if (v100)
    {
LABEL_129:
      v142 = v100;
      operator delete(v100);
    }
  }
  *(_WORD *)v136 = 15;
  *(_QWORD *)v141 = v136;
  v104 = std::__tree<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,grl::Allocator>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>(&v116, (unsigned __int16 *)v136, (uint64_t)&std::piecewise_construct, (_WORD **)v141);
  v105 = v104[5];
  if (v105)
  {
    v104[6] = v105;
    operator delete(v105);
  }
  v104[5] = (uint64_t *)v102;
  v104[6] = v103;
  v104[7] = v103;
  *(_WORD *)v136 = 15;
  *(_QWORD *)v141 = v136;
  *((_BYTE *)std::__tree<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,grl::Allocator>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>(&v116, (unsigned __int16 *)v136, (uint64_t)&std::piecewise_construct, (_WORD **)v141)+ 64) = 1;
  grl::codec::ResourcePack::encodeHeaderAndData((uint64_t)&v118, (unsigned __int16 **)&v116, a3);
  std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)&v108, v109);
  if (v112[0])
  {
    v112[1] = v112[0];
    operator delete(v112[0]);
  }
  if (v114[0])
  {
    v114[1] = v114[0];
    operator delete(v114[0]);
  }
  std::__tree<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,grl::Allocator>>::destroy((uint64_t)&v116, v117[0]);
  if (v118)
  {
    v119 = (char *)v118;
    operator delete(v118);
  }
  if (v121)
  {
    v122 = v121;
    operator delete(v121);
  }
}

_QWORD *std::shared_ptr<grl::codec::IconData>::operator=[abi:nn180100](_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  v3 = a2[1];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

void grl::codec::IconConfigPack::~IconConfigPack(grl::codec::IconConfigPack *this)
{
  grl::codec::IconConfigPack::~IconConfigPack(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  uint64_t v2;
  grl::codec::IconConfigPack *v3;
  uint64_t v4;
  grl::codec::IconConfigPack *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;

  *(_QWORD *)this = &off_1E42C27E8;
  std::mutex::~mutex((std::mutex *)((char *)this + 232));
  std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)this + 200, *((_QWORD **)this + 26));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 168);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 152);
  if (*((_QWORD *)this + 17))
  {
    v2 = *((_QWORD *)this + 15);
    v3 = (grl::codec::IconConfigPack *)*((_QWORD *)this + 16);
    v4 = *(_QWORD *)v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(v2 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    *((_QWORD *)this + 17) = 0;
    if (v3 != (grl::codec::IconConfigPack *)((char *)this + 120))
    {
      do
      {
        v5 = (grl::codec::IconConfigPack *)*((_QWORD *)v3 + 1);
        std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)v3 + 24);
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != (grl::codec::IconConfigPack *)((char *)this + 120));
    }
  }
  v6 = (_QWORD *)*((_QWORD *)this + 12);
  if (v6)
  {
    do
    {
      v7 = (_QWORD *)*v6;
      operator delete(v6);
      v6 = v7;
    }
    while (v7);
  }
  v8 = (void *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v8)
    operator delete(v8);
  std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)this + 40, *((_QWORD **)this + 6));
  *(_QWORD *)this = off_1E42C27A8;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

uint64_t grl::codec::IconConfigPack::resourceType(grl::codec::IconConfigPack *this)
{
  return 0;
}

_QWORD *grl::codec::ResourcePack::packLog@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "");
}

void geo::obitstream::appendBytes(geo::obitstream *this, char *a2, int64_t a3)
{
  char *v4;
  const unsigned __int8 *v6;
  _BYTE *v7;
  unsigned int v8;
  int v9;
  unint64_t v10;
  _BYTE *v11;
  unint64_t v12;
  _BYTE *v13;
  unint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  _BYTE *v19;
  _BYTE *v20;
  char v21;

  v4 = a2;
  if (*((_BYTE *)this + 24))
  {
    if (a3 >= 1)
    {
      v6 = (const unsigned __int8 *)&a2[a3];
      v7 = (_BYTE *)*((_QWORD *)this + 1);
      do
      {
        v8 = *v4;
        *(v7 - 1) |= v8 >> *((_BYTE *)this + 24);
        v9 = v8 << (8 - *((_BYTE *)this + 24));
        v11 = (_BYTE *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
        if ((unint64_t)v11 >= v10)
        {
          v12 = *(_QWORD *)this;
          v13 = &v11[-*(_QWORD *)this];
          v14 = (unint64_t)(v13 + 1);
          if ((uint64_t)(v13 + 1) < 0)
            abort();
          v15 = v10 - v12;
          if (2 * v15 > v14)
            v14 = 2 * v15;
          if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
            v16 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v16 = v14;
          if (v16)
            v17 = (char *)operator new(v16);
          else
            v17 = 0;
          v18 = &v13[(_QWORD)v17];
          v19 = &v13[(_QWORD)v17];
          *v19 = v9;
          v7 = v19 + 1;
          if (v11 != (_BYTE *)v12)
          {
            v20 = &v11[~v12];
            do
            {
              v21 = *--v11;
              (v20--)[(_QWORD)v17] = v21;
            }
            while (v11 != (_BYTE *)v12);
            v11 = *(_BYTE **)this;
            v18 = v17;
          }
          *(_QWORD *)this = v18;
          *((_QWORD *)this + 1) = v7;
          *((_QWORD *)this + 2) = &v17[v16];
          if (v11)
            operator delete(v11);
        }
        else
        {
          *v11 = v9;
          v7 = v11 + 1;
        }
        *((_QWORD *)this + 1) = v7;
        ++v4;
      }
      while (v4 < (char *)v6);
    }
  }
  else
  {
    std::vector<unsigned char>::reserve((unint64_t *)this, *((_QWORD *)this + 1) + a3 - *(_QWORD *)this);
    std::vector<unsigned char>::__insert_with_size[abi:nn180100]<unsigned char const*,unsigned char const*>((uint64_t)this, *((char **)this + 1), v4, &v4[a3], a3);
  }
}

void std::vector<unsigned char>::reserve(unint64_t *a1, size_t __sz)
{
  unint64_t v2;
  char *v5;
  _BYTE *v6;
  char *v7;
  _BYTE *v8;
  char *v9;
  char v10;

  v2 = *a1;
  if (a1[2] - *a1 < __sz)
  {
    if ((__sz & 0x8000000000000000) != 0)
      abort();
    v5 = (char *)a1[1];
    v6 = operator new(__sz);
    v7 = &v5[(_QWORD)v6 - v2];
    v8 = v7;
    if (v5 != (char *)v2)
    {
      v9 = &v5[~v2];
      do
      {
        v10 = *--v5;
        (v9--)[(_QWORD)v6] = v10;
      }
      while (v5 != (char *)v2);
      v8 = v6;
    }
    *a1 = (unint64_t)v8;
    a1[1] = (unint64_t)v7;
    a1[2] = (unint64_t)&v6[__sz];
    if (v2)
      operator delete((void *)v2);
  }
}

char *std::vector<unsigned char>::__insert_with_size[abi:nn180100]<unsigned char const*,unsigned char const*>(uint64_t a1, char *__dst, char *__src, char *a4, int64_t a5)
{
  char *v5;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  size_t v15;
  size_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  int64_t v25;
  char v26;
  char *v27;
  char *v28;
  size_t v29;
  char *v30;
  char *v31;
  char *v32;

  v5 = __dst;
  if (a5 < 1)
    return v5;
  v10 = *(char **)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  if (v9 - (uint64_t)v10 < a5)
  {
    v11 = *(char **)a1;
    v12 = (uint64_t)&v10[a5 - *(_QWORD *)a1];
    if (v12 < 0)
      abort();
    v13 = (char *)(__dst - v11);
    v14 = v9 - (_QWORD)v11;
    if (2 * v14 > v12)
      v12 = 2 * v14;
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
      v15 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v15 = v12;
    if (v15)
    {
      v16 = v15;
      v17 = (char *)operator new(v15);
    }
    else
    {
      v16 = 0;
      v17 = 0;
    }
    v27 = &v13[(_QWORD)v17];
    memcpy(&v13[(_QWORD)v17], __src, a5);
    v28 = &v13[(_QWORD)v17];
    v29 = v16;
    if (v11 != v5)
    {
      do
      {
        v13[(_QWORD)v17 - 1] = v13[(_QWORD)(v11 - 1)];
        --v13;
      }
      while (v13);
      v10 = *(char **)(a1 + 8);
      v28 = v17;
    }
    v30 = &v27[a5];
    v31 = &v17[v29];
    if (v10 != v5)
      memmove(v30, v5, v10 - v5);
    v32 = *(char **)a1;
    *(_QWORD *)a1 = v28;
    *(_QWORD *)(a1 + 8) = &v30[v10 - v5];
    *(_QWORD *)(a1 + 16) = v31;
    if (v32)
      operator delete(v32);
    return v27;
  }
  v18 = v10 - __dst;
  if (v10 - __dst >= a5)
  {
    v19 = &__src[a5];
    v21 = *(char **)(a1 + 8);
LABEL_17:
    v22 = &v5[a5];
    v23 = &v21[-a5];
    v24 = v21;
    if (&v21[-a5] < v10)
    {
      v25 = &v10[a5] - v21;
      v24 = v21;
      do
      {
        v26 = *v23++;
        *v24++ = v26;
        --v25;
      }
      while (v25);
    }
    *(_QWORD *)(a1 + 8) = v24;
    if (v21 != v22)
      memmove(&v5[a5], v5, v21 - v22);
    if (v19 != __src)
      memmove(v5, __src, v19 - __src);
    return v5;
  }
  v19 = &__src[v18];
  v20 = a4 - &__src[v18];
  if (a4 != &__src[v18])
    memmove(*(void **)(a1 + 8), &__src[v18], a4 - &__src[v18]);
  v21 = &v10[v20];
  *(_QWORD *)(a1 + 8) = &v10[v20];
  if (v18 >= 1)
    goto LABEL_17;
  return v5;
}

_QWORD *std::string::basic_string[abi:nn180100](_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

char *std::vector<unsigned char>::__vallocate[abi:nn180100](_QWORD *a1, size_t __sz)
{
  char *result;

  if ((__sz & 0x8000000000000000) != 0)
    abort();
  result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

void std::__shared_ptr_emplace<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>,geo::StdAllocator<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>,grl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E6648;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>,geo::StdAllocator<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>,grl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E6648;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>,geo::StdAllocator<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>,grl::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return std::__tree<std::__value_type<grl::IconKey,std::shared_ptr<grl::codec::IconData>>,std::__map_value_compare<grl::IconKey,std::__value_type<grl::IconKey,std::shared_ptr<grl::codec::IconData>>,std::less<grl::IconKey>,true>,geo::StdAllocator<std::__value_type<grl::IconKey,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>::destroy(a1 + 32, *(_QWORD **)(a1 + 40));
}

uint64_t std::__shared_ptr_emplace<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>,geo::StdAllocator<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>,grl::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a1, 64);
}

uint64_t std::__tree<std::__value_type<grl::IconKey,std::shared_ptr<grl::codec::IconData>>,std::__map_value_compare<grl::IconKey,std::__value_type<grl::IconKey,std::shared_ptr<grl::codec::IconData>>,std::less<grl::IconKey>,true>,geo::StdAllocator<std::__value_type<grl::IconKey,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>::destroy(uint64_t result, _QWORD *a2)
{
  uint64_t v3;

  if (a2)
  {
    v3 = result;
    std::__tree<std::__value_type<grl::IconKey,std::shared_ptr<grl::codec::IconData>>,std::__map_value_compare<grl::IconKey,std::__value_type<grl::IconKey,std::shared_ptr<grl::codec::IconData>>,std::less<grl::IconKey>,true>,geo::StdAllocator<std::__value_type<grl::IconKey,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>::destroy(result, *a2);
    std::__tree<std::__value_type<grl::IconKey,std::shared_ptr<grl::codec::IconData>>,std::__map_value_compare<grl::IconKey,std::__value_type<grl::IconKey,std::shared_ptr<grl::codec::IconData>>,std::less<grl::IconKey>,true>,geo::StdAllocator<std::__value_type<grl::IconKey,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>::destroy(v3, a2[1]);
    std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)(a2 + 8));
    return (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(v3 + 16) + 40))(*(_QWORD *)(v3 + 16), a2, 80);
  }
  return result;
}

void geo::Cache<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>,grl::codec::IconConfigPack::IconLocationIndexHash,geo::LRUPolicy>::_pop(uint64_t a1)
{
  uint64_t **v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  int v10;
  __int16 v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v3 = *(_QWORD *)(a1 + 48);
  v2 = (uint64_t **)(a1 + 48);
  v10 = *(_DWORD *)(v3 + 16);
  v11 = *(_WORD *)(v3 + 20);
  v4 = *(std::__shared_weak_count **)(v3 + 32);
  v12 = *(_QWORD *)(v3 + 24);
  v13 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  std::list<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>>::pop_back(v2);
  std::__hash_table<std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>,std::__unordered_map_hasher<grl::codec::IconConfigPack::IconLocationIndex,std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>,grl::codec::IconConfigPack::IconLocationIndexHash,std::equal_to<grl::codec::IconConfigPack::IconLocationIndex>,true>,std::__unordered_map_equal<grl::codec::IconConfigPack::IconLocationIndex,std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>,std::equal_to<grl::codec::IconConfigPack::IconLocationIndex>,grl::codec::IconConfigPack::IconLocationIndexHash,true>,std::allocator<std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>>>::__erase_unique<grl::codec::IconConfigPack::IconLocationIndex>((_QWORD *)(a1 + 8), (unsigned __int8 *)&v10);
  v7 = v13;
  if (v13)
  {
    v8 = (unint64_t *)&v13->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void std::list<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>>::pop_back(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = *a1;
  v2 = **a1;
  *(_QWORD *)(v2 + 8) = (*a1)[1];
  *(_QWORD *)v1[1] = v2;
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 3));
  operator delete(v1);
}

uint64_t *std::__hash_table<std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>,std::__unordered_map_hasher<grl::codec::IconConfigPack::IconLocationIndex,std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>,grl::codec::IconConfigPack::IconLocationIndexHash,std::equal_to<grl::codec::IconConfigPack::IconLocationIndex>,true>,std::__unordered_map_equal<grl::codec::IconConfigPack::IconLocationIndex,std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>,std::equal_to<grl::codec::IconConfigPack::IconLocationIndex>,grl::codec::IconConfigPack::IconLocationIndexHash,true>,std::allocator<std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>>>::__erase_unique<grl::codec::IconConfigPack::IconLocationIndex>(_QWORD *a1, unsigned __int8 *a2)
{
  uint64_t *result;

  result = (uint64_t *)std::__hash_table<std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>,std::__unordered_map_hasher<grl::codec::IconConfigPack::IconLocationIndex,std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>,grl::codec::IconConfigPack::IconLocationIndexHash,std::equal_to<grl::codec::IconConfigPack::IconLocationIndex>,true>,std::__unordered_map_equal<grl::codec::IconConfigPack::IconLocationIndex,std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>,std::equal_to<grl::codec::IconConfigPack::IconLocationIndex>,grl::codec::IconConfigPack::IconLocationIndexHash,true>,std::allocator<std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>>>::find<grl::codec::IconConfigPack::IconLocationIndex>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>,std::__unordered_map_hasher<grl::codec::IconConfigPack::IconLocationIndex,std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>,grl::codec::IconConfigPack::IconLocationIndexHash,std::equal_to<grl::codec::IconConfigPack::IconLocationIndex>,true>,std::__unordered_map_equal<grl::codec::IconConfigPack::IconLocationIndex,std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>,std::equal_to<grl::codec::IconConfigPack::IconLocationIndex>,grl::codec::IconConfigPack::IconLocationIndexHash,true>,std::allocator<std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>,std::__unordered_map_hasher<grl::codec::IconConfigPack::IconLocationIndex,std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>,grl::codec::IconConfigPack::IconLocationIndexHash,std::equal_to<grl::codec::IconConfigPack::IconLocationIndex>,true>,std::__unordered_map_equal<grl::codec::IconConfigPack::IconLocationIndex,std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>,std::equal_to<grl::codec::IconConfigPack::IconLocationIndex>,grl::codec::IconConfigPack::IconLocationIndexHash,true>,std::allocator<std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>>>::erase(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  void *v3;
  void *__p;

  v2 = *a2;
  std::__hash_table<std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>,std::__unordered_map_hasher<grl::codec::IconConfigPack::IconLocationIndex,std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>,grl::codec::IconConfigPack::IconLocationIndexHash,std::equal_to<grl::codec::IconConfigPack::IconLocationIndex>,true>,std::__unordered_map_equal<grl::codec::IconConfigPack::IconLocationIndex,std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>,std::equal_to<grl::codec::IconConfigPack::IconLocationIndex>,grl::codec::IconConfigPack::IconLocationIndexHash,true>,std::allocator<std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>>>::remove(a1, a2, (uint64_t)&__p);
  v3 = __p;
  __p = 0;
  if (v3)
    operator delete(v3);
  return v2;
}

_QWORD *std::__hash_table<std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>,std::__unordered_map_hasher<grl::codec::IconConfigPack::IconLocationIndex,std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>,grl::codec::IconConfigPack::IconLocationIndexHash,std::equal_to<grl::codec::IconConfigPack::IconLocationIndex>,true>,std::__unordered_map_equal<grl::codec::IconConfigPack::IconLocationIndex,std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>,std::equal_to<grl::codec::IconConfigPack::IconLocationIndex>,grl::codec::IconConfigPack::IconLocationIndexHash,true>,std::allocator<std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>>>::remove@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  v6 = *(_QWORD **)(*result + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (_QWORD *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2)
    goto LABEL_18;
  v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v3)
      v8 %= *(_QWORD *)&v3;
  }
  else
  {
    v8 &= *(_QWORD *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2)
      goto LABEL_19;
    v9 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    if (v9 != v4)
LABEL_19:
      *(_QWORD *)(*result + 8 * v4) = 0;
  }
  v10 = *a2;
  if (*a2)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v3)
        v11 %= *(_QWORD *)&v3;
    }
    else
    {
      v11 &= *(_QWORD *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(_QWORD *)(*result + 8 * v11) = v7;
      v10 = *a2;
    }
  }
  *v7 = v10;
  *a2 = 0;
  --result[3];
  *(_QWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = result + 2;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

uint64_t std::__tree<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,grl::Allocator>>::destroy(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  void *v4;

  if (a2)
  {
    v3 = result;
    std::__tree<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,grl::Allocator>>::destroy(result, *a2);
    std::__tree<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,grl::Allocator>>::destroy(v3, a2[1]);
    v4 = (void *)a2[5];
    if (v4)
    {
      a2[6] = v4;
      operator delete(v4);
    }
    return (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(v3 + 16) + 40))(*(_QWORD *)(v3 + 16), a2, 72);
  }
  return result;
}

uint64_t **std::__tree<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,grl::Allocator>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>(uint64_t **a1, unsigned __int16 *a2, uint64_t a3, _WORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  uint64_t v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((unsigned __int16 *)v6 + 16);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a1[2] + 16))(a1[2], 72, 8);
    *(_WORD *)(v11 + 32) = **a4;
    *(_OWORD *)(v11 + 56) = 0u;
    *(_OWORD *)(v11 + 40) = 0u;
    *(_BYTE *)(v11 + 64) = 1;
    std::__tree<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,grl::Allocator>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t std::__tree<std::__value_type<grl::codec::IconConfigPack::IconLocationIndex,std::vector<std::pair<grl::IconKey,std::shared_ptr<grl::codec::IconData>>>>,std::__map_value_compare<grl::codec::IconConfigPack::IconLocationIndex,std::__value_type<grl::codec::IconConfigPack::IconLocationIndex,std::vector<std::pair<grl::IconKey,std::shared_ptr<grl::codec::IconData>>>>,std::less<grl::codec::IconConfigPack::IconLocationIndex>,true>,geo::StdAllocator<std::__value_type<grl::codec::IconConfigPack::IconLocationIndex,std::vector<std::pair<grl::IconKey,std::shared_ptr<grl::codec::IconData>>>>,grl::Allocator>>::destroy(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;

  if (a2)
  {
    v3 = result;
    std::__tree<std::__value_type<grl::codec::IconConfigPack::IconLocationIndex,std::vector<std::pair<grl::IconKey,std::shared_ptr<grl::codec::IconData>>>>,std::__map_value_compare<grl::codec::IconConfigPack::IconLocationIndex,std::__value_type<grl::codec::IconConfigPack::IconLocationIndex,std::vector<std::pair<grl::IconKey,std::shared_ptr<grl::codec::IconData>>>>,std::less<grl::codec::IconConfigPack::IconLocationIndex>,true>,geo::StdAllocator<std::__value_type<grl::codec::IconConfigPack::IconLocationIndex,std::vector<std::pair<grl::IconKey,std::shared_ptr<grl::codec::IconData>>>>,grl::Allocator>>::destroy(result, *a2);
    std::__tree<std::__value_type<grl::codec::IconConfigPack::IconLocationIndex,std::vector<std::pair<grl::IconKey,std::shared_ptr<grl::codec::IconData>>>>,std::__map_value_compare<grl::codec::IconConfigPack::IconLocationIndex,std::__value_type<grl::codec::IconConfigPack::IconLocationIndex,std::vector<std::pair<grl::IconKey,std::shared_ptr<grl::codec::IconData>>>>,std::less<grl::codec::IconConfigPack::IconLocationIndex>,true>,geo::StdAllocator<std::__value_type<grl::codec::IconConfigPack::IconLocationIndex,std::vector<std::pair<grl::IconKey,std::shared_ptr<grl::codec::IconData>>>>,grl::Allocator>>::destroy(v3, a2[1]);
    v4 = a2[5];
    if (v4)
    {
      v5 = a2[6];
      v6 = (void *)a2[5];
      if (v5 != v4)
      {
        do
        {
          v7 = v5 - 48;
          std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v5 - 16);
          v5 = v7;
        }
        while (v7 != v4);
        v6 = (void *)a2[5];
      }
      a2[6] = v4;
      operator delete(v6);
    }
    return (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(v3 + 16) + 40))(*(_QWORD *)(v3 + 16), a2, 64);
  }
  return result;
}

uint64_t std::__tree<std::__value_type<grl::codec::IconConfigPack::IconLocationIndex,std::pair<unsigned long long,std::vector<unsigned char>>>,std::__map_value_compare<grl::codec::IconConfigPack::IconLocationIndex,std::__value_type<grl::codec::IconConfigPack::IconLocationIndex,std::pair<unsigned long long,std::vector<unsigned char>>>,std::less<grl::codec::IconConfigPack::IconLocationIndex>,true>,geo::StdAllocator<std::__value_type<grl::codec::IconConfigPack::IconLocationIndex,std::pair<unsigned long long,std::vector<unsigned char>>>,grl::Allocator>>::destroy(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  void *v4;

  if (a2)
  {
    v3 = result;
    std::__tree<std::__value_type<grl::codec::IconConfigPack::IconLocationIndex,std::pair<unsigned long long,std::vector<unsigned char>>>,std::__map_value_compare<grl::codec::IconConfigPack::IconLocationIndex,std::__value_type<grl::codec::IconConfigPack::IconLocationIndex,std::pair<unsigned long long,std::vector<unsigned char>>>,std::less<grl::codec::IconConfigPack::IconLocationIndex>,true>,geo::StdAllocator<std::__value_type<grl::codec::IconConfigPack::IconLocationIndex,std::pair<unsigned long long,std::vector<unsigned char>>>,grl::Allocator>>::destroy(result, *a2);
    std::__tree<std::__value_type<grl::codec::IconConfigPack::IconLocationIndex,std::pair<unsigned long long,std::vector<unsigned char>>>,std::__map_value_compare<grl::codec::IconConfigPack::IconLocationIndex,std::__value_type<grl::codec::IconConfigPack::IconLocationIndex,std::pair<unsigned long long,std::vector<unsigned char>>>,std::less<grl::codec::IconConfigPack::IconLocationIndex>,true>,geo::StdAllocator<std::__value_type<grl::codec::IconConfigPack::IconLocationIndex,std::pair<unsigned long long,std::vector<unsigned char>>>,grl::Allocator>>::destroy(v3, a2[1]);
    v4 = (void *)a2[6];
    if (v4)
    {
      a2[7] = v4;
      operator delete(v4);
    }
    return (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(v3 + 16) + 40))(*(_QWORD *)(v3 + 16), a2, 72);
  }
  return result;
}

void std::__shared_ptr_emplace<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E6680;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E6680;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>::__on_zero_shared(uint64_t a1)
{
  return std::__tree<std::__value_type<grl::IconKey,std::shared_ptr<grl::codec::IconData>>,std::__map_value_compare<grl::IconKey,std::__value_type<grl::IconKey,std::shared_ptr<grl::codec::IconData>>,std::less<grl::IconKey>,true>,geo::StdAllocator<std::__value_type<grl::IconKey,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>::destroy(a1 + 24, *(_QWORD **)(a1 + 32));
}

void std::__shared_ptr_emplace<grl::codec::IconData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5880;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<grl::codec::IconData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5880;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<grl::codec::IconData>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2;

  if (*(_BYTE *)(a1 + 208))
    *(_BYTE *)(a1 + 208) = 0;
  std::__tree<std::__value_type<unsigned short,grl::codec::PathLayerData>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::PathLayerData>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::PathLayerData>,grl::Allocator>>::destroy(a1 + 176, *(_QWORD *)(a1 + 184));
  std::__tree<std::__value_type<unsigned short,grl::codec::ImageLayerData>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ImageLayerData>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ImageLayerData>,grl::Allocator>>::destroy(a1 + 144, *(_QWORD *)(a1 + 152));
  std::__tree<std::__value_type<unsigned short,grl::codec::TextLayerData>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::TextLayerData>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::TextLayerData>,grl::Allocator>>::destroy(a1 + 112, *(_QWORD *)(a1 + 120));
  if (*(_BYTE *)(a1 + 56))
  {
    v2 = *(_QWORD *)(a1 + 64);
    if (v2)
    {
      *(_QWORD *)(a1 + 72) = v2;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 88) + 40))(*(_QWORD *)(a1 + 88), v2, *(_QWORD *)(a1 + 80) - v2);
    }
    *(_BYTE *)(a1 + 56) = 0;
  }
  return std::__tree<std::__value_type<VKTrafficFeatureType,unsigned long>,std::__map_value_compare<VKTrafficFeatureType,std::__value_type<VKTrafficFeatureType,unsigned long>,std::less<VKTrafficFeatureType>,true>,geo::StdAllocator<std::__value_type<VKTrafficFeatureType,unsigned long>,mdm::Allocator>>::destroy(a1 + 24, *(_QWORD **)(a1 + 32));
}

uint64_t std::__tree<std::__value_type<unsigned short,grl::codec::PathLayerData>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::PathLayerData>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::PathLayerData>,grl::Allocator>>::destroy(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  if (a2)
  {
    v3 = result;
    std::__tree<std::__value_type<unsigned short,grl::codec::PathLayerData>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::PathLayerData>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::PathLayerData>,grl::Allocator>>::destroy(result, *(_QWORD *)a2);
    std::__tree<std::__value_type<unsigned short,grl::codec::PathLayerData>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::PathLayerData>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::PathLayerData>,grl::Allocator>>::destroy(v3, *(_QWORD *)(a2 + 8));
    v4 = *(_QWORD *)(a2 + 40);
    if (v4)
    {
      *(_QWORD *)(a2 + 48) = v4;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 64) + 40))(*(_QWORD *)(a2 + 64), v4, *(_QWORD *)(a2 + 56) - v4);
    }
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 16) + 40))(*(_QWORD *)(v3 + 16), a2, 176);
  }
  return result;
}

uint64_t std::__tree<std::__value_type<unsigned short,grl::codec::ImageLayerData>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ImageLayerData>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ImageLayerData>,grl::Allocator>>::destroy(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  if (a2)
  {
    v3 = result;
    std::__tree<std::__value_type<unsigned short,grl::codec::ImageLayerData>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ImageLayerData>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ImageLayerData>,grl::Allocator>>::destroy(result, *(_QWORD *)a2);
    std::__tree<std::__value_type<unsigned short,grl::codec::ImageLayerData>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ImageLayerData>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ImageLayerData>,grl::Allocator>>::destroy(v3, *(_QWORD *)(a2 + 8));
    v4 = *(_QWORD *)(a2 + 40);
    if (v4)
    {
      *(_QWORD *)(a2 + 48) = v4;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 64) + 40))(*(_QWORD *)(a2 + 64), v4, *(_QWORD *)(a2 + 56) - v4);
    }
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 16) + 40))(*(_QWORD *)(v3 + 16), a2, 192);
  }
  return result;
}

uint64_t std::__tree<std::__value_type<unsigned short,grl::codec::TextLayerData>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::TextLayerData>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::TextLayerData>,grl::Allocator>>::destroy(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  if (a2)
  {
    v3 = result;
    std::__tree<std::__value_type<unsigned short,grl::codec::TextLayerData>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::TextLayerData>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::TextLayerData>,grl::Allocator>>::destroy(result, *(_QWORD *)a2);
    std::__tree<std::__value_type<unsigned short,grl::codec::TextLayerData>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::TextLayerData>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::TextLayerData>,grl::Allocator>>::destroy(v3, *(_QWORD *)(a2 + 8));
    if (*(char *)(a2 + 207) < 0)
      operator delete(*(void **)(a2 + 184));
    if (*(char *)(a2 + 151) < 0)
      operator delete(*(void **)(a2 + 128));
    if (*(char *)(a2 + 103) < 0)
      operator delete(*(void **)(a2 + 80));
    v4 = *(_QWORD *)(a2 + 40);
    if (v4)
    {
      *(_QWORD *)(a2 + 48) = v4;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 64) + 40))(*(_QWORD *)(a2 + 64), v4, *(_QWORD *)(a2 + 56) - v4);
    }
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 16) + 40))(*(_QWORD *)(v3 + 16), a2, 224);
  }
  return result;
}

uint64_t std::vector<grl::LayerStyle,geo::StdAllocator<grl::LayerStyle,grl::Allocator>>::__assign_with_size[abi:nn180100]<grl::LayerStyle const*,grl::LayerStyle const*>(uint64_t result, char *__src, char *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _BYTE *v13;
  size_t v14;
  char *v15;
  char *v16;
  size_t v17;

  v6 = __src;
  v7 = (_QWORD *)result;
  v8 = *(_QWORD *)(result + 16);
  v9 = *(char **)result;
  if (v8 - *(_QWORD *)result >= a4)
  {
    v13 = *(_BYTE **)(result + 8);
    v14 = v13 - v9;
    if (v13 - v9 >= a4)
    {
      v17 = a3 - __src;
      if (v17)
        result = (uint64_t)memmove(*(void **)result, __src, v17);
      v12 = &v9[v17];
    }
    else
    {
      v15 = &__src[v14];
      if (v13 != v9)
      {
        result = (uint64_t)memmove(*(void **)result, __src, v14);
        v9 = (char *)v7[1];
      }
      v12 = v9;
      if (v15 != a3)
      {
        v12 = v9;
        v16 = v9;
        do
        {
          if (v16)
            *v16 = *v15;
          ++v15;
          ++v16;
          ++v12;
        }
        while (v15 != a3);
      }
    }
  }
  else
  {
    if (v9)
    {
      *(_QWORD *)(result + 8) = v9;
      (*(void (**)(_QWORD, char *))(**(_QWORD **)(result + 24) + 40))(*(_QWORD *)(result + 24), v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0)
      abort();
    v10 = 2 * v8;
    if (2 * v8 <= a4)
      v10 = a4;
    if (v8 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<grl::LayerStyle,geo::StdAllocator<grl::LayerStyle,grl::Allocator>>::__vallocate[abi:nn180100]((uint64_t)v7, v11);
    v12 = (char *)v7[1];
    while (v6 != a3)
    {
      if (v12)
        *v12 = *v6;
      ++v6;
      ++v12;
    }
  }
  v7[1] = v12;
  return result;
}

uint64_t std::vector<grl::LayerStyle,geo::StdAllocator<grl::LayerStyle,grl::Allocator>>::__vallocate[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 < 0)
    abort();
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = result;
  *(_QWORD *)(a1 + 16) = result + a2;
  return result;
}

_QWORD *grl::toString<esl::BlendMode>@<X0>(unsigned int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;

  if (a1 > 0x1B)
    v2 = (char *)&str_31;
  else
    v2 = off_1E4314C90[(char)a1];
  return std::string::basic_string[abi:nn180100]<0>(a2, v2);
}

void grl::IconKey::encode(grl::IconKey *this@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  void *v6;
  size_t v7;
  char *v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  char v12;
  unsigned __int8 v13[4];

  v9 = 0;
  v10 = 0;
  v12 = 0;
  v11 = 0;
  *(_DWORD *)v13 = *((_DWORD *)this + 4);
  geo::obitstream::appendBytes((geo::obitstream *)&v9, (char *)v13, 4);
  if (a2 >= 3)
  {
    *(_WORD *)v13 = *((_WORD *)this + 10);
    geo::obitstream::appendBytes((geo::obitstream *)&v9, (char *)v13, 2);
  }
  *(_WORD *)v13 = *((_WORD *)this + 11);
  geo::obitstream::appendBytes((geo::obitstream *)&v9, (char *)v13, 2);
  v13[0] = *((_BYTE *)this + 24);
  geo::obitstream::appendBytes((geo::obitstream *)&v9, (char *)v13, 1);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = v9;
  v7 = v10 - v9;
  if (v10 != v9)
  {
    std::vector<unsigned char>::__vallocate[abi:nn180100](a3, v10 - v9);
    v8 = (char *)a3[1];
    memmove(v8, v6, v7);
    a3[1] = &v8[v7];
    v6 = v9;
  }
  if (v6)
  {
    v10 = v6;
    operator delete(v6);
  }
}

void grl::IconKey::~IconKey(grl::IconKey *this)
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t grl::IconKey::hash(grl::IconKey *this)
{
  return *((_QWORD *)this + 1);
}

float *grl::IconRequestOptions::setContentScale(float *this, float a2)
{
  *this = a2;
  return this;
}

uint64_t grl::IconRequestOptions::setSizeGroup(uint64_t result, char a2)
{
  *(_BYTE *)(result + 4) = a2;
  return result;
}

uint64_t grl::IconRequestOptions::setVariant(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + 8) = a2;
  return this;
}

uint64_t grl::IconRequestOptions::setDataVariant(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + 6) = a2;
  return this;
}

uint64_t grl::IconRequestOptions::setCountryCode(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + 10) = a2;
  return this;
}

uint64_t std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>>::__vallocate[abi:nn180100](uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    abort();
  v3 = 3 * a2;
  result = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), 24 * a2, 8);
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = result;
  *(_QWORD *)(a1 + 16) = result + 8 * v3;
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:nn180100]<geo::StdAllocator<std::string,grl::Allocator>,std::string const*,std::string const*,std::string*>(int a1, __int128 *a2, __int128 *a3, std::string *this)
{
  __int128 *v6;
  __int128 v7;

  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (this)
      {
        if (*((char *)v6 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        }
        else
        {
          v7 = *v6;
          this->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
          *(_OWORD *)&this->__r_.__value_.__l.__data_ = v7;
        }
      }
      v6 = (__int128 *)((char *)v6 + 24);
      ++this;
    }
    while (v6 != a3);
  }
  return this;
}

uint64_t *std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>>::__destroy_vector::operator()[abi:nn180100](uint64_t **a1)
{
  uint64_t *result;

  result = *a1;
  if (*result)
  {
    std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>>::__clear[abi:nn180100](result);
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*a1)[3] + 40))((*a1)[3], **a1, (*a1)[2] - **a1);
  }
  return result;
}

void std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>>::__clear[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

void grl::ResourceProvider::notifyObserversOfTileGroupChange(grl::ResourceProvider *this)
{
  std::mutex *v2;
  uint64_t **i;

  v2 = (std::mutex *)((char *)this + 48);
  std::mutex::lock((std::mutex *)((char *)this + 48));
  for (i = (uint64_t **)*((_QWORD *)this + 3); i; i = (uint64_t **)*i)
    (*(void (**)(uint64_t *))(*i[2] + 16))(i[2]);
  std::mutex::unlock(v2);
}

void grl::ResourceProvider::removeObserver(uint64_t a1, uint64_t a2)
{
  std::mutex *v3;
  uint64_t v4;

  v4 = a2;
  v3 = (std::mutex *)(a1 + 48);
  std::mutex::lock((std::mutex *)(a1 + 48));
  std::__hash_table<grl::ResourceObserver *,std::hash<grl::ResourceObserver *>,std::equal_to<grl::ResourceObserver *>,std::allocator<grl::ResourceObserver *>>::__erase_unique<grl::ResourceObserver *>((_QWORD *)(a1 + 8), &v4);
  std::mutex::unlock(v3);
}

os_log_t ___ZL39GEOGetGeoResourceLibResourceProviderLogv_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.VectorKit.GeoResourceLib", "ResourceProvider");
  _MergedGlobals_3 = (uint64_t)result;
  return result;
}

void std::__shared_ptr_emplace<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>> const,std::allocator<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>> const>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DABB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>> const,std::allocator<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>> const>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DABB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t *std::__shared_ptr_emplace<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>> const,std::allocator<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>> const>>::__on_zero_shared(uint64_t a1)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 24);
  return std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>>::__destroy_vector::operator()[abi:nn180100](&v2);
}

unint64_t **std::back_insert_iterator<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>>>::operator=[abi:nn180100](unint64_t **a1, __int128 *a2)
{
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  __int128 v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  __int128 v14;
  std::string *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD v23[5];

  v4 = *a1;
  v6 = (*a1)[1];
  v5 = (*a1)[2];
  if (v6 >= v5)
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *v4) >> 3);
    if (v8 + 1 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *v4) >> 3);
    v10 = 2 * v9;
    if (2 * v9 <= v8 + 1)
      v10 = v8 + 1;
    if (v9 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    v23[4] = v4 + 3;
    if (v11)
    {
      v12 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)v4[3] + 16))(v4[3], 24 * v11, 8);
      v13 = v12 + 24 * v8;
      if (v12)
      {
        if (*((char *)a2 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v13, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
        }
        else
        {
          v14 = *a2;
          *(_QWORD *)(v13 + 16) = *((_QWORD *)a2 + 2);
          *(_OWORD *)v13 = v14;
        }
      }
    }
    else
    {
      v12 = 0;
      v13 = 24 * v8;
    }
    v17 = *v4;
    v16 = v4[1];
    if (v16 == *v4)
    {
      v20 = v4[1];
      v18 = v13;
    }
    else
    {
      v18 = v13;
      do
      {
        v19 = *(_OWORD *)(v16 - 24);
        *(_QWORD *)(v18 - 8) = *(_QWORD *)(v16 - 8);
        *(_OWORD *)(v18 - 24) = v19;
        v18 -= 24;
        *(_QWORD *)(v16 - 16) = 0;
        *(_QWORD *)(v16 - 8) = 0;
        *(_QWORD *)(v16 - 24) = 0;
        v16 -= 24;
      }
      while (v16 != v17);
      v20 = *v4;
      v16 = v4[1];
    }
    v15 = (std::string *)(v13 + 24);
    *v4 = v18;
    v23[0] = v20;
    v23[1] = v20;
    v4[1] = (unint64_t)v15;
    v23[2] = v16;
    v21 = v4[2];
    v4[2] = v12 + 24 * v11;
    v23[3] = v21;
    std::__split_buffer<std::string,geo::StdAllocator<std::string,grl::Allocator> &>::~__split_buffer((uint64_t)v23);
  }
  else
  {
    if (v6)
    {
      if (*((char *)a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(*a1)[1], *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
      }
      else
      {
        v7 = *a2;
        *(_QWORD *)(v6 + 16) = *((_QWORD *)a2 + 2);
        *(_OWORD *)v6 = v7;
      }
    }
    v15 = (std::string *)(v6 + 24);
  }
  v4[1] = (unint64_t)v15;
  return a1;
}

void std::__split_buffer<std::string,geo::StdAllocator<std::string,grl::Allocator> &>::__destruct_at_end[abi:nn180100](uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t *std::__hash_table<grl::ResourceObserver *,std::hash<grl::ResourceObserver *>,std::equal_to<grl::ResourceObserver *>,std::allocator<grl::ResourceObserver *>>::__erase_unique<grl::ResourceObserver *>(_QWORD *a1, _QWORD *a2)
{
  uint64_t *result;

  result = std::__hash_table<grl::ResourceObserver *,std::hash<grl::ResourceObserver *>,std::equal_to<grl::ResourceObserver *>,std::allocator<grl::ResourceObserver *>>::find<grl::ResourceObserver *>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>,std::__unordered_map_hasher<grl::codec::IconConfigPack::IconLocationIndex,std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>,grl::codec::IconConfigPack::IconLocationIndexHash,std::equal_to<grl::codec::IconConfigPack::IconLocationIndex>,true>,std::__unordered_map_equal<grl::codec::IconConfigPack::IconLocationIndex,std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>,std::equal_to<grl::codec::IconConfigPack::IconLocationIndex>,grl::codec::IconConfigPack::IconLocationIndexHash,true>,std::allocator<std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

_QWORD *std::__hash_table<grl::ResourceObserver *,std::hash<grl::ResourceObserver *>,std::equal_to<grl::ResourceObserver *>,std::allocator<grl::ResourceObserver *>>::find<grl::ResourceObserver *>(_QWORD *a1, _QWORD *a2)
{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  unint64_t v10;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v4 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v3 >> 47) ^ v3);
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v5;
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = v5 & (*(_QWORD *)&v2 - 1);
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  result = (_QWORD *)*v8;
  if (*v8)
  {
    do
    {
      v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == *a2)
          return result;
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(_QWORD *)&v2)
            v10 %= *(_QWORD *)&v2;
        }
        else
        {
          v10 &= *(_QWORD *)&v2 - 1;
        }
        if (v10 != v7)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t std::ostringstream::basic_ostringstream[abi:nn180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;

  v2 = MEMORY[0x1E0DE4FE0];
  v3 = MEMORY[0x1E0DE4FE0] + 64;
  *(_QWORD *)(a1 + 112) = MEMORY[0x1E0DE4FE0] + 64;
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + *(_QWORD *)(v5 - 24)) = v4;
  v6 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 8));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 112) = v3;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

uint64_t grl::ContentScaleToIntegralString(grl *this, float a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD v5[11];
  char v6;
  uint64_t v7;

  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v5);
  v2 = v5[0];
  *(_QWORD *)((char *)&v5[2] + *(_QWORD *)(v5[0] - 24)) = 0;
  *(_DWORD *)((char *)&v5[1] + *(_QWORD *)(v2 - 24)) = *(_DWORD *)((_BYTE *)&v5[1] + *(_QWORD *)(v2 - 24)) & 0xFFFFFEFB | 4;
  v3 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v3, (uint64_t)"x", 1);
  std::stringbuf::str();
  v5[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v5[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v6 < 0)
    operator delete((void *)v5[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AF4D64](&v7);
}

uint64_t grl::IconRenderer::description(grl::IconRenderer *this)
{
  _QWORD *v2;
  _QWORD *v3;
  grl::IconRenderer *v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  grl::IconRenderer *v8;
  grl::IconRenderer *v9;
  BOOL v10;
  _QWORD *v11;
  void **v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *__p;
  uint64_t v18;
  unsigned __int8 v19;
  _QWORD v20[2];
  _QWORD v21[11];
  char v22;
  uint64_t v23;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v20);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v21, (uint64_t)", size: (", 9);
  v2 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v2, (uint64_t)", ", 2);
  v3 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v3, (uint64_t)")", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v21, (uint64_t)", isStretched: ", 15);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v21, (uint64_t)", contentScale: ", 16);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v21, (uint64_t)", layer count: ", 15);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v21, (uint64_t)", layers: [", 11);
  v4 = (grl::IconRenderer *)*((_QWORD *)this + 4);
  if (v4 != (grl::IconRenderer *)((char *)this + 40))
  {
    do
    {
      v5 = *((_QWORD *)v4 + 5);
      if (v5)
      {
        (*(void (**)(void **__return_ptr))(*(_QWORD *)v5 + 32))(&__p);
        v6 = (v19 & 0x80u) == 0 ? &__p : (void **)__p;
        v7 = (v19 & 0x80u) == 0 ? v19 : v18;
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v21, (uint64_t)v6, v7);
        if ((char)v19 < 0)
          operator delete(__p);
      }
      v8 = (grl::IconRenderer *)*((_QWORD *)v4 + 1);
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = *(grl::IconRenderer **)v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (grl::IconRenderer *)*((_QWORD *)v4 + 2);
          v10 = *(_QWORD *)v9 == (_QWORD)v4;
          v4 = v9;
        }
        while (!v10);
      }
      v4 = v9;
    }
    while (v9 != (grl::IconRenderer *)((char *)this + 40));
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v21, (uint64_t)"]", 1);
  if (*((_BYTE *)this + 72))
  {
    v11 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v21, (uint64_t)", infoLayerData: [", 18);
    grl::codec::InfoLayerData::toString((uint64_t *)&__p, (grl::IconRenderer *)((char *)this + 76));
    v12 = (v19 & 0x80u) == 0 ? &__p : (void **)__p;
    v13 = (v19 & 0x80u) == 0 ? v19 : v18;
    v14 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, v13);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)"]", 1);
    if ((char)v19 < 0)
      operator delete(__p);
  }
  std::stringbuf::str();
  v20[0] = *MEMORY[0x1E0DE4F50];
  v15 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v20 + *(_QWORD *)(v20[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v21[0] = v15;
  v21[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v22 < 0)
    operator delete((void *)v21[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1A1AF4D64](&v23);
}

uint64_t grl::IconRenderer::layerCount(uint64_t a1, int a2)
{
  _QWORD *v2;
  _QWORD *v3;
  unsigned __int16 v5;
  NSObject *v6;
  int v7;
  int v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  int v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD **)(a1 + 32);
  v3 = (_QWORD *)(a1 + 40);
  if (v2 == (_QWORD *)(a1 + 40))
  {
    return 0;
  }
  else
  {
    v5 = 0;
    do
    {
      if (v2[5])
      {
        if (*((unsigned __int16 *)v2 + 16) == a2)
          ++v5;
      }
      else
      {
        if (GEOGetGeoResourceLibRendererLog::onceToken != -1)
          dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_10_0);
        v6 = GEOGetGeoResourceLibRendererLog::log;
        if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR))
        {
          v7 = *((unsigned __int16 *)v2 + 16);
          v8 = *((unsigned __int16 *)v2 + 17);
          *(_DWORD *)buf = 67110146;
          v14 = v7;
          v15 = 1024;
          v16 = v8;
          v17 = 2080;
          v18 = "!GRL_UNIQUE_NAME(didTriggerAssert)";
          v19 = 2080;
          v20 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/IconRenderer.cpp";
          v21 = 1024;
          v22 = 172;
          _os_log_impl(&dword_19F029000, v6, OS_LOG_TYPE_ERROR, "Nullptr LayerRenderer found in IconRenderer. This should never occur. LayerType: %hu, LayerIndex: %d: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x28u);
        }
      }
      v9 = (_QWORD *)v2[1];
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (_QWORD *)v2[2];
          v11 = *v10 == (_QWORD)v2;
          v2 = v10;
        }
        while (!v11);
      }
      v2 = v10;
    }
    while (v10 != v3);
  }
  return v5;
}

_DWORD *std::list<grl::IconLayerMapKey>::push_back(uint64_t *a1, uint64_t a2)
{
  _DWORD *result;
  uint64_t v5;

  result = operator new(0x18uLL);
  result[4] = *(_DWORD *)a2;
  *((_BYTE *)result + 20) = 0;
  if (*(_BYTE *)(a2 + 4))
  {
    *((_BYTE *)result + 21) = *(_BYTE *)(a2 + 5);
    *((_BYTE *)result + 20) = 1;
  }
  v5 = *a1;
  *(_QWORD *)result = *a1;
  *((_QWORD *)result + 1) = a1;
  *(_QWORD *)(v5 + 8) = result;
  *a1 = (uint64_t)result;
  ++a1[2];
  return result;
}

uint64_t std::__function::__value_func<std::shared_ptr<esl::QuartzImage> ()(void)>::__value_func[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  return a1;
}

_QWORD *std::__tree<std::__value_type<grl::IconLayerMapKey,std::shared_ptr<esl::QuartzImage>>,std::__map_value_compare<grl::IconLayerMapKey,std::__value_type<grl::IconLayerMapKey,std::shared_ptr<esl::QuartzImage>>,grl::IconLayerMapKey,false>,geo::StdAllocator<std::__value_type<grl::IconLayerMapKey,std::shared_ptr<esl::QuartzImage>>,grl::Allocator>>::__find_equal<grl::IconLayerMapKey>(uint64_t a1, _QWORD *a2, __int16 *a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  __int16 *v9;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 32;
    do
    {
      while (1)
      {
        v8 = (_QWORD *)v4;
        v9 = (__int16 *)(v4 + 32);
        if (!grl::IconLayerMapKey::operator()(v7, a3, (__int16 *)(v4 + 32)))
          break;
        v4 = *v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!grl::IconLayerMapKey::operator()(v7, v9, a3))
        break;
      v5 = v8 + 1;
      v4 = v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

uint64_t std::string::basic_string[abi:nn180100](uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (a2 > 0x16)
  {
    v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v4 = a2 | 7;
    v5 = v4 + 1;
    v6 = operator new(v4 + 1);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v5 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 23) = a2;
  }
  return a1;
}

void std::__function::__func<grl::IconRenderer::setupPathLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&)::$_0,std::allocator<grl::IconRenderer::setupPathLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&)::$_0>,void ()(unsigned short,grl::codec::PathLayerData const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<grl::IconRenderer::setupPathLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&)::$_0,std::allocator<grl::IconRenderer::setupPathLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&)::$_0>,void ()(unsigned short,grl::codec::PathLayerData const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E42D80D8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<grl::IconRenderer::setupPathLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&)::$_0,std::allocator<grl::IconRenderer::setupPathLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&)::$_0>,void ()(unsigned short,grl::codec::PathLayerData const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42D80D8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::vector<grl::LayerStyle,geo::StdAllocator<grl::LayerStyle,grl::Allocator>>::__init_with_size[abi:nn180100]<grl::LayerStyle*,grl::LayerStyle*>(uint64_t result, _BYTE *a2, _BYTE *a3, uint64_t a4)
{
  uint64_t v6;
  _BYTE *v7;

  if (a4)
  {
    v6 = result;
    result = std::vector<grl::LayerStyle,geo::StdAllocator<grl::LayerStyle,grl::Allocator>>::__vallocate[abi:nn180100](result, a4);
    v7 = *(_BYTE **)(v6 + 8);
    while (a2 != a3)
    {
      if (v7)
        *v7 = *a2;
      ++a2;
      ++v7;
    }
    *(_QWORD *)(v6 + 8) = v7;
  }
  return result;
}

void std::__function::__func<grl::IconRenderer::setupImageLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<unsigned short,grl::ImageData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::ImageData>,grl::Allocator>> const&)::$_0,std::allocator<grl::IconRenderer::setupImageLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<unsigned short,grl::ImageData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::ImageData>,grl::Allocator>> const&)::$_0>,void ()(unsigned short,grl::codec::ImageLayerData const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<grl::IconRenderer::setupImageLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<unsigned short,grl::ImageData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::ImageData>,grl::Allocator>> const&)::$_0,std::allocator<grl::IconRenderer::setupImageLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<unsigned short,grl::ImageData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::ImageData>,grl::Allocator>> const&)::$_0>,void ()(unsigned short,grl::codec::ImageLayerData const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_1E42D8168;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<grl::IconRenderer::setupImageLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<unsigned short,grl::ImageData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::ImageData>,grl::Allocator>> const&)::$_0,std::allocator<grl::IconRenderer::setupImageLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<unsigned short,grl::ImageData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::ImageData>,grl::Allocator>> const&)::$_0>,void ()(unsigned short,grl::codec::ImageLayerData const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E42D8168;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

grl *std::__function::__func<grl::IconRenderer::setupImageLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<unsigned short,grl::ImageData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::ImageData>,grl::Allocator>> const&)::$_0,std::allocator<grl::IconRenderer::setupImageLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<unsigned short,grl::ImageData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::ImageData>,grl::Allocator>> const&)::$_0>,void ()(unsigned short,grl::codec::ImageLayerData const&)>::operator()(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  unsigned int v5;
  uint64_t v6;
  grl *result;
  int v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  BOOL v17;
  uint64_t *v18;
  float v19;
  unsigned int v20;
  std::__shared_weak_count *v21;
  void (**v22)(_QWORD, _QWORD);
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  NSObject *v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  NSObject *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _BYTE *v58;
  uint64_t *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int16 v68;
  int v69;
  __int128 v70;
  __int16 v71;
  int v72;
  int v73;
  int v74;
  int v75;
  char v76;
  int v77;
  _BYTE v78[32];
  uint64_t v79;
  int v80;
  _BYTE v81[26];
  void (**v82)(_QWORD, _QWORD);
  std::__shared_weak_count *v83;
  _QWORD *v84;
  _BYTE *v85;
  _QWORD v86[3];
  _QWORD *v87;
  _QWORD v88[3];
  _QWORD *v89;
  _BYTE *v90;
  _QWORD v91[3];
  grl *v92;
  _BYTE buf[24];
  _BYTE *v94;
  _BYTE *v95;
  _QWORD v96[3];
  _QWORD *v97;
  _QWORD v98[3];
  _QWORD *v99;
  uint64_t v100;

  v100 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  v64 = 0;
  v65 = 0;
  v6 = *(_QWORD *)(a3 + 24);
  v66 = 0;
  v67 = v6;
  result = (grl *)std::vector<grl::LayerStyle,geo::StdAllocator<grl::LayerStyle,grl::Allocator>>::__init_with_size[abi:nn180100]<grl::LayerStyle*,grl::LayerStyle*>((uint64_t)&v64, *(_BYTE **)a3, *(_BYTE **)(a3 + 8), *(_QWORD *)(a3 + 8) - *(_QWORD *)a3);
  v68 = *(_WORD *)(a3 + 32);
  v69 = *(_DWORD *)(a3 + 34);
  v70 = *(_OWORD *)(a3 + 38);
  v71 = *(_WORD *)(a3 + 54);
  v72 = *(_DWORD *)(a3 + 56);
  v73 = *(_DWORD *)(a3 + 60);
  v8 = *(_DWORD *)(a3 + 68);
  v74 = *(_DWORD *)(a3 + 64);
  v75 = v8;
  v76 = *(_BYTE *)(a3 + 72);
  v77 = *(_DWORD *)(a3 + 73);
  v9 = *(_OWORD *)(a3 + 96);
  *(_OWORD *)v78 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)&v78[16] = v9;
  v79 = *(_QWORD *)(a3 + 112);
  v80 = *(_DWORD *)(a3 + 120);
  *(_OWORD *)&v81[10] = *(_OWORD *)(a3 + 134);
  *(_OWORD *)v81 = *(_OWORD *)(a3 + 124);
  if (!v81[24])
    goto LABEL_143;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  v14 = *(_QWORD *)(v10 + 8);
  v12 = v10 + 8;
  v13 = v14;
  if (!v14)
    goto LABEL_13;
  v15 = v12;
  do
  {
    v16 = *(unsigned __int16 *)(v13 + 32);
    v17 = v16 >= v5;
    if (v16 >= v5)
      v18 = (uint64_t *)v13;
    else
      v18 = (uint64_t *)(v13 + 8);
    if (v17)
      v15 = v13;
    v13 = *v18;
  }
  while (*v18);
  if (v15 != v12 && *(unsigned __int16 *)(v15 + 32) <= v5)
  {
    v90 = 0;
    v92 = 0;
    if (*(_QWORD *)(v15 + 72))
    {
      v90 = *(_BYTE **)(v15 + 40);
      v31 = (_QWORD *)std::__function::__value_func<std::shared_ptr<esl::QuartzImage> ()(void)>::__value_func[abi:nn180100]((uint64_t)buf, v15 + 48);
      std::__function::__value_func<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::swap[abi:nn180100](v31, v91);
      v32 = v94;
      if (v94 == buf)
      {
        v33 = 4;
        v32 = buf;
      }
      else
      {
        if (!v94)
          goto LABEL_42;
        v33 = 5;
      }
      (*(void (**)(void))(*v32 + 8 * v33))();
      if (v5)
        goto LABEL_43;
LABEL_52:
      v39 = *(_QWORD *)(a1 + 24);
      if (!*(_BYTE *)v39)
        *(_BYTE *)v39 = 1;
      *(_QWORD *)(v39 + 4) = v90;
      v40 = *(_QWORD *)(a1 + 32);
      v41 = *(_QWORD *)&v78[12];
      if (!*(_BYTE *)v40)
        *(_BYTE *)v40 = 1;
      *(_QWORD *)(v40 + 4) = v41;
      **(_BYTE **)(a1 + 40) = v79 == 1;
      goto LABEL_57;
    }
  }
  else
  {
LABEL_13:
    v90 = 0;
    v92 = 0;
  }
  if (!*(_BYTE *)(v11 + 280))
    goto LABEL_138;
  grl::createPlaceholderGlyph(result);
  if (!v82)
  {
    if (GEOGetGeoResourceLibRendererLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_10_0);
    v27 = GEOGetGeoResourceLibRendererLog::log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/IconRenderer.cpp";
      *(_WORD *)&buf[22] = 1024;
      LODWORD(v94) = 394;
      _os_log_impl(&dword_19F029000, v27, OS_LOG_TYPE_ERROR, "Failed to generate placeholder glyph.: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
    }
    v28 = v83;
    if (v83)
    {
      p_shared_owners = (unint64_t *)&v83->__shared_owners_;
      do
        v30 = __ldaxr(p_shared_owners);
      while (__stlxr(v30 - 1, p_shared_owners));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    goto LABEL_138;
  }
  v19 = (float)(*((unsigned int (**)(void (**)(_QWORD, _QWORD)))*v82 + 3))(v82);
  v20 = (*((uint64_t (**)(void (**)(_QWORD, _QWORD)))*v82 + 4))(v82);
  *(float *)&v90 = v19;
  *((float *)&v90 + 1) = (float)v20;
  v22 = v82;
  v21 = v83;
  if (v83)
  {
    v23 = (unint64_t *)&v83->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  *(_QWORD *)buf = &off_1E42DA370;
  *(_QWORD *)&buf[8] = v22;
  *(_QWORD *)&buf[16] = v21;
  v94 = buf;
  std::__function::__value_func<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::swap[abi:nn180100](buf, v91);
  v25 = v94;
  if (v94 == buf)
  {
    v26 = 4;
    v25 = buf;
    goto LABEL_36;
  }
  if (v94)
  {
    v26 = 5;
LABEL_36:
    (*(void (**)(void))(*v25 + 8 * v26))();
  }
  v34 = v83;
  if (v83)
  {
    v35 = (unint64_t *)&v83->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
LABEL_42:
  if (!v5)
    goto LABEL_52;
LABEL_43:
  if (**(_BYTE **)(a1 + 40))
  {
    v37 = *(_QWORD *)(a1 + 24);
    if (!*(_BYTE *)v37 || *(_BYTE **)(v37 + 4) != v90)
    {
      if (GEOGetGeoResourceLibRendererLog::onceToken != -1)
        dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_10_0);
      v38 = GEOGetGeoResourceLibRendererLog::log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19F029000, v38, OS_LOG_TYPE_ERROR, "All image layers must be the same size in a stretched icon.", buf, 2u);
      }
      goto LABEL_138;
    }
  }
LABEL_57:
  std::__function::__value_func<std::shared_ptr<esl::QuartzImage> ()(void)>::__value_func[abi:nn180100]((uint64_t)v88, *(_QWORD *)(a1 + 48) + 168);
  if (v78[20] != 1 || !v89)
    goto LABEL_112;
  if (v89 == v88)
  {
    v84 = &v82;
    (*(void (**)(_QWORD *, _QWORD))(v88[0] + 24))(v88, &v82);
  }
  else
  {
    v84 = (_QWORD *)(*(uint64_t (**)(void))(*v89 + 16))();
  }
  v85 = v90;
  v42 = v86;
  if (v92)
  {
    if (v92 == (grl *)v91)
    {
      v87 = v86;
      (*(void (**)(_QWORD *, _QWORD *))(v91[0] + 24))(v91, v86);
    }
    else
    {
      v87 = (_QWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v92 + 16))();
    }
  }
  else
  {
    v87 = 0;
  }
  if (v84)
  {
    if (v84 == &v82)
    {
      v94 = buf;
      ((void (**)(_QWORD, _BYTE *))v82)[3](&v82, buf);
    }
    else
    {
      v94 = v84;
      v84 = 0;
    }
  }
  else
  {
    v94 = 0;
  }
  v95 = v85;
  v43 = v96;
  if (v87)
  {
    if (v87 == v86)
    {
      v97 = v96;
      (*(void (**)(_QWORD *, _QWORD *))(v86[0] + 24))(v86, v96);
    }
    else
    {
      v97 = v87;
      v87 = 0;
    }
  }
  else
  {
    v97 = 0;
  }
  v44 = operator new(0x50uLL);
  v45 = v44;
  *v44 = &off_1E42DA328;
  if (v94)
  {
    if (v94 == buf)
    {
      v44[4] = v44 + 1;
      (*(void (**)(_BYTE *))(*(_QWORD *)buf + 24))(buf);
    }
    else
    {
      v44[4] = v94;
      v94 = 0;
    }
  }
  else
  {
    v44[4] = 0;
  }
  v46 = v97;
  v45[5] = v95;
  if (v46)
  {
    if (v46 == v96)
    {
      v45[9] = v45 + 6;
      (*(void (**)(_QWORD *))(v96[0] + 24))(v96);
    }
    else
    {
      v45[9] = v46;
      v97 = 0;
    }
  }
  else
  {
    v45[9] = 0;
  }
  v99 = v45;
  std::__function::__value_func<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::swap[abi:nn180100](v98, v91);
  v47 = v99;
  if (v99 == v98)
  {
    v48 = 4;
    v47 = v98;
  }
  else
  {
    if (!v99)
      goto LABEL_92;
    v48 = 5;
  }
  (*(void (**)(void))(*v47 + 8 * v48))();
LABEL_92:
  if (v97 == v96)
  {
    v49 = 4;
  }
  else
  {
    if (!v97)
      goto LABEL_97;
    v49 = 5;
    v43 = v97;
  }
  (*(void (**)(_QWORD *))(*v43 + 8 * v49))(v43);
LABEL_97:
  v50 = v94;
  if (v94 == buf)
  {
    v51 = 4;
    v50 = buf;
  }
  else
  {
    if (!v94)
      goto LABEL_102;
    v51 = 5;
  }
  (*(void (**)(void))(*v50 + 8 * v51))();
LABEL_102:
  if (v87 == v86)
  {
    v52 = 4;
  }
  else
  {
    if (!v87)
      goto LABEL_107;
    v52 = 5;
    v42 = v87;
  }
  (*(void (**)(_QWORD *))(*v42 + 8 * v52))(v42);
LABEL_107:
  v53 = v84;
  if (v84 == &v82)
  {
    v54 = 4;
    v53 = &v82;
  }
  else
  {
    if (!v84)
      goto LABEL_112;
    v54 = 5;
  }
  (*(void (**)(void))(*v53 + 8 * v54))();
LABEL_112:
  v55 = operator new();
  *(_QWORD *)buf = v90;
  v56 = &buf[8];
  if (v92)
  {
    if (v92 == (grl *)v91)
    {
      v95 = &buf[8];
      (*(void (**)(_QWORD *, _BYTE *))(v91[0] + 24))(v91, &buf[8]);
    }
    else
    {
      v95 = (_BYTE *)(*(uint64_t (**)(void))(*(_QWORD *)v92 + 16))();
    }
  }
  else
  {
    v95 = 0;
  }
  grl::ImageLayerRenderer::ImageLayerRenderer(v55, (uint64_t)&v64, buf);
  if (v95 == &buf[8])
  {
    v57 = 4;
    goto LABEL_121;
  }
  if (v95)
  {
    v57 = 5;
    v56 = v95;
LABEL_121:
    (*(void (**)(_QWORD *))(*v56 + 8 * v57))(v56);
  }
  v58 = *(_BYTE **)(a1 + 48);
  if (!v5 && v58[1])
  {
    *(_BYTE *)(v55 + 10) = 0;
    goto LABEL_125;
  }
  if (!v5 || !v58[2])
  {
LABEL_125:
    if (v5 || v58[24] != 4)
      goto LABEL_131;
  }
  *(_BYTE *)(v55 + 10) = 0;
LABEL_131:
  LOWORD(v82) = 2;
  WORD1(v82) = v5;
  BYTE4(v82) = 0;
  *(_QWORD *)buf = &v82;
  v59 = std::__tree<std::__value_type<grl::IconLayerMapKey,std::unique_ptr<grl::LayerRenderer>>,std::__map_value_compare<grl::IconLayerMapKey,std::__value_type<grl::IconLayerMapKey,std::unique_ptr<grl::LayerRenderer>>,grl::IconLayerMapKey,false>,geo::StdAllocator<std::__value_type<grl::IconLayerMapKey,std::unique_ptr<grl::LayerRenderer>>,grl::Allocator>>::__emplace_unique_key_args<grl::IconLayerMapKey,std::piecewise_construct_t const&,std::tuple<grl::IconLayerMapKey&&>,std::tuple<>>((uint64_t **)(v11 + 32), (__int16 *)&v82, (_DWORD **)buf);
  v60 = v59[5];
  v59[5] = v55;
  if (v60)
    (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
  v61 = v89;
  if (v89 == v88)
  {
    v62 = 4;
    v61 = v88;
  }
  else
  {
    if (!v89)
      goto LABEL_138;
    v62 = 5;
  }
  (*(void (**)(void))(*v61 + 8 * v62))();
LABEL_138:
  result = v92;
  if (v92 == (grl *)v91)
  {
    v63 = 4;
    result = (grl *)v91;
  }
  else
  {
    if (!v92)
      goto LABEL_143;
    v63 = 5;
  }
  result = (grl *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v63))();
LABEL_143:
  if (v64)
  {
    v65 = v64;
    return (grl *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v67 + 40))(v67, v64, v66 - v64);
  }
  return result;
}

_QWORD *std::__function::__func<grl::IconRenderer::setupImageLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<unsigned short,grl::ImageData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::ImageData>,grl::Allocator>> const&)::$_0::operator() const(unsigned short,grl::codec::ImageLayerData)::{lambda(void)#1},std::allocator<grl::IconRenderer::setupImageLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<unsigned short,grl::ImageData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::ImageData>,grl::Allocator>> const&)::$_0::operator() const(unsigned short,grl::codec::ImageLayerData)::{lambda(void)#1}>,std::shared_ptr<esl::QuartzImage> ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E42DA370;
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<grl::IconRenderer::setupImageLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<unsigned short,grl::ImageData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::ImageData>,grl::Allocator>> const&)::$_0::operator() const(unsigned short,grl::codec::ImageLayerData)::{lambda(void)#1},std::allocator<grl::IconRenderer::setupImageLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<unsigned short,grl::ImageData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::ImageData>,grl::Allocator>> const&)::$_0::operator() const(unsigned short,grl::codec::ImageLayerData)::{lambda(void)#1}>,std::shared_ptr<esl::QuartzImage> ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E42DA370;
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<grl::IconRenderer::setupImageLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<unsigned short,grl::ImageData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::ImageData>,grl::Allocator>> const&)::$_0::operator() const(unsigned short,grl::codec::ImageLayerData)::{lambda(void)#1},std::allocator<grl::IconRenderer::setupImageLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<unsigned short,grl::ImageData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::ImageData>,grl::Allocator>> const&)::$_0::operator() const(unsigned short,grl::codec::ImageLayerData)::{lambda(void)#1}>,std::shared_ptr<esl::QuartzImage> ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E42DA370;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<grl::IconRenderer::setupImageLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<unsigned short,grl::ImageData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::ImageData>,grl::Allocator>> const&)::$_0::operator() const(unsigned short,grl::codec::ImageLayerData)::{lambda(void)#1},std::allocator<grl::IconRenderer::setupImageLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<unsigned short,grl::ImageData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::ImageData>,grl::Allocator>> const&)::$_0::operator() const(unsigned short,grl::codec::ImageLayerData)::{lambda(void)#1}>,std::shared_ptr<esl::QuartzImage> ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E42DA370;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<grl::IconRenderer::setupImageLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<unsigned short,grl::ImageData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::ImageData>,grl::Allocator>> const&)::$_0::operator() const(unsigned short,grl::codec::ImageLayerData)::{lambda(void)#1},std::allocator<grl::IconRenderer::setupImageLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<unsigned short,grl::ImageData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::ImageData>,grl::Allocator>> const&)::$_0::operator() const(unsigned short,grl::codec::ImageLayerData)::{lambda(void)#1}>,std::shared_ptr<esl::QuartzImage> ()(void)>::destroy(uint64_t a1)
{
  return std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<grl::IconRenderer::setupImageLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<unsigned short,grl::ImageData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::ImageData>,grl::Allocator>> const&)::$_0::operator() const(unsigned short,grl::codec::ImageLayerData)::{lambda(void)#1},std::allocator<grl::IconRenderer::setupImageLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<unsigned short,grl::ImageData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::ImageData>,grl::Allocator>> const&)::$_0::operator() const(unsigned short,grl::codec::ImageLayerData)::{lambda(void)#1}>,std::shared_ptr<esl::QuartzImage> ()(void)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<grl::IconRenderer::setupImageLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<unsigned short,grl::ImageData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::ImageData>,grl::Allocator>> const&)::$_0::operator() const(unsigned short,grl::codec::ImageLayerData)::{lambda(void)#1},std::allocator<grl::IconRenderer::setupImageLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<unsigned short,grl::ImageData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::ImageData>,grl::Allocator>> const&)::$_0::operator() const(unsigned short,grl::codec::ImageLayerData)::{lambda(void)#1}>,std::shared_ptr<esl::QuartzImage> ()(void)>::operator()@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(result + 16);
  *a2 = *(_QWORD *)(result + 8);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

_QWORD *std::__function::__func<grl::IconRenderer::setupImageLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<unsigned short,grl::ImageData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::ImageData>,grl::Allocator>> const&)::$_0::operator() const(unsigned short,grl::codec::ImageLayerData)::{lambda(void)#2},std::allocator<grl::IconRenderer::setupImageLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<unsigned short,grl::ImageData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::ImageData>,grl::Allocator>> const&)::$_0::operator() const(unsigned short,grl::codec::ImageLayerData)::{lambda(void)#2}>,std::shared_ptr<esl::QuartzImage> ()(void)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = &off_1E42DA328;
  v2 = a1 + 1;
  v3 = a1 + 6;
  v4 = (_QWORD *)a1[9];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = (_QWORD *)a1[4];
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
    goto LABEL_10;
  }
  if (v6)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return a1;
}

void std::__function::__func<grl::IconRenderer::setupImageLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<unsigned short,grl::ImageData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::ImageData>,grl::Allocator>> const&)::$_0::operator() const(unsigned short,grl::codec::ImageLayerData)::{lambda(void)#2},std::allocator<grl::IconRenderer::setupImageLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<unsigned short,grl::ImageData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::ImageData>,grl::Allocator>> const&)::$_0::operator() const(unsigned short,grl::codec::ImageLayerData)::{lambda(void)#2}>,std::shared_ptr<esl::QuartzImage> ()(void)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = &off_1E42DA328;
  v2 = a1 + 1;
  v3 = a1 + 6;
  v4 = (_QWORD *)a1[9];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = (_QWORD *)a1[4];
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
  }
  else
  {
    if (!v6)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<grl::IconRenderer::setupImageLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<unsigned short,grl::ImageData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::ImageData>,grl::Allocator>> const&)::$_0::operator() const(unsigned short,grl::codec::ImageLayerData)::{lambda(void)#2},std::allocator<grl::IconRenderer::setupImageLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<unsigned short,grl::ImageData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::ImageData>,grl::Allocator>> const&)::$_0::operator() const(unsigned short,grl::codec::ImageLayerData)::{lambda(void)#2}>,std::shared_ptr<esl::QuartzImage> ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x50uLL);
  *v3 = &off_1E42DA328;
  std::__function::__value_func<std::shared_ptr<esl::QuartzImage> ()(void)>::__value_func[abi:nn180100]((uint64_t)(v3 + 1), v2);
  v3[5] = *(_QWORD *)(a1 + 40);
  std::__function::__value_func<std::shared_ptr<esl::QuartzImage> ()(void)>::__value_func[abi:nn180100]((uint64_t)(v3 + 6), a1 + 48);
  return v3;
}

uint64_t std::__function::__func<grl::IconRenderer::setupImageLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<unsigned short,grl::ImageData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::ImageData>,grl::Allocator>> const&)::$_0::operator() const(unsigned short,grl::codec::ImageLayerData)::{lambda(void)#2},std::allocator<grl::IconRenderer::setupImageLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<unsigned short,grl::ImageData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::ImageData>,grl::Allocator>> const&)::$_0::operator() const(unsigned short,grl::codec::ImageLayerData)::{lambda(void)#2}>,std::shared_ptr<esl::QuartzImage> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42DA328;
  std::__function::__value_func<std::shared_ptr<esl::QuartzImage> ()(void)>::__value_func[abi:nn180100]((uint64_t)(a2 + 1), a1 + 8);
  a2[5] = *(_QWORD *)(a1 + 40);
  return std::__function::__value_func<std::shared_ptr<esl::QuartzImage> ()(void)>::__value_func[abi:nn180100]((uint64_t)(a2 + 6), a1 + 48);
}

_QWORD *std::__function::__func<grl::IconRenderer::setupImageLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<unsigned short,grl::ImageData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::ImageData>,grl::Allocator>> const&)::$_0::operator() const(unsigned short,grl::codec::ImageLayerData)::{lambda(void)#2},std::allocator<grl::IconRenderer::setupImageLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<unsigned short,grl::ImageData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::ImageData>,grl::Allocator>> const&)::$_0::operator() const(unsigned short,grl::codec::ImageLayerData)::{lambda(void)#2}>,std::shared_ptr<esl::QuartzImage> ()(void)>::destroy(uint64_t a1)
{
  return std::__function::__alloc_func<grl::IconRenderer::setupImageLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<unsigned short,grl::ImageData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::ImageData>,grl::Allocator>> const&)::$_0::operator() const(unsigned short,grl::codec::ImageLayerData)::{lambda(void)#2},std::allocator<grl::IconRenderer::setupImageLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<unsigned short,grl::ImageData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::ImageData>,grl::Allocator>> const&)::$_0::operator() const(unsigned short,grl::codec::ImageLayerData)::{lambda(void)#2}>,std::shared_ptr<esl::QuartzImage> ()(void)>::destroy[abi:nn180100]((_QWORD *)(a1 + 8));
}

void std::__function::__func<grl::IconRenderer::setupImageLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<unsigned short,grl::ImageData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::ImageData>,grl::Allocator>> const&)::$_0::operator() const(unsigned short,grl::codec::ImageLayerData)::{lambda(void)#2},std::allocator<grl::IconRenderer::setupImageLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<unsigned short,grl::ImageData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::ImageData>,grl::Allocator>> const&)::$_0::operator() const(unsigned short,grl::codec::ImageLayerData)::{lambda(void)#2}>,std::shared_ptr<esl::QuartzImage> ()(void)>::destroy_deallocate(_QWORD *a1)
{
  std::__function::__alloc_func<grl::IconRenderer::setupImageLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<unsigned short,grl::ImageData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::ImageData>,grl::Allocator>> const&)::$_0::operator() const(unsigned short,grl::codec::ImageLayerData)::{lambda(void)#2},std::allocator<grl::IconRenderer::setupImageLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<unsigned short,grl::ImageData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::ImageData>,grl::Allocator>> const&)::$_0::operator() const(unsigned short,grl::codec::ImageLayerData)::{lambda(void)#2}>,std::shared_ptr<esl::QuartzImage> ()(void)>::destroy[abi:nn180100](a1 + 1);
  operator delete(a1);
}

esl::QuartzImage *std::__function::__func<grl::IconRenderer::setupImageLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<unsigned short,grl::ImageData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::ImageData>,grl::Allocator>> const&)::$_0::operator() const(unsigned short,grl::codec::ImageLayerData)::{lambda(void)#2},std::allocator<grl::IconRenderer::setupImageLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<unsigned short,grl::ImageData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::ImageData>,grl::Allocator>> const&)::$_0::operator() const(unsigned short,grl::codec::ImageLayerData)::{lambda(void)#2}>,std::shared_ptr<esl::QuartzImage> ()(void)>::operator()@<X0>(uint64_t a1@<X0>, esl::QuartzImage **a2@<X8>)
{
  float v3;
  float v4;
  uint64_t v5;
  grl::Allocator *v6;
  uint64_t v7;
  _QWORD *v8;
  esl::QuartzImage *result;
  _QWORD *v10;
  int v11;
  unint64_t v12;

  v3 = *(float *)(a1 + 40);
  v4 = *(float *)(a1 + 44);
  v5 = *(_QWORD *)(a1 + 32);
  v12 = v3 | ((unint64_t)v4 << 32);
  v11 = 1065353216;
  if (v5)
  {
    v6 = (grl::Allocator *)(*(uint64_t (**)(uint64_t, unint64_t *, int *))(*(_QWORD *)v5 + 48))(v5, &v12, &v11);
    v7 = grl::Allocator::instance(v6);
    v8 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, 72, 8);
    *v8 = &off_1E42DE068;
    v8[1] = 0;
    v8[2] = 0;
    v8[3] = v7;
    result = esl::QuartzImage::QuartzImage((esl::QuartzImage *)(v8 + 4), v6);
    *a2 = result;
    a2[1] = (esl::QuartzImage *)v8;
  }
  else
  {
    std::__throw_bad_function_call[abi:nn180100]();
    return (esl::QuartzImage *)std::__function::__alloc_func<grl::IconRenderer::setupImageLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<unsigned short,grl::ImageData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::ImageData>,grl::Allocator>> const&)::$_0::operator() const(unsigned short,grl::codec::ImageLayerData)::{lambda(void)#2},std::allocator<grl::IconRenderer::setupImageLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<unsigned short,grl::ImageData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::ImageData>,grl::Allocator>> const&)::$_0::operator() const(unsigned short,grl::codec::ImageLayerData)::{lambda(void)#2}>,std::shared_ptr<esl::QuartzImage> ()(void)>::destroy[abi:nn180100](v10);
  }
  return result;
}

_QWORD *std::__function::__alloc_func<grl::IconRenderer::setupImageLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<unsigned short,grl::ImageData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::ImageData>,grl::Allocator>> const&)::$_0::operator() const(unsigned short,grl::codec::ImageLayerData)::{lambda(void)#2},std::allocator<grl::IconRenderer::setupImageLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<unsigned short,grl::ImageData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::ImageData>,grl::Allocator>> const&)::$_0::operator() const(unsigned short,grl::codec::ImageLayerData)::{lambda(void)#2}>,std::shared_ptr<esl::QuartzImage> ()(void)>::destroy[abi:nn180100](_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *result;
  uint64_t v4;
  _QWORD *v5;

  v2 = a1 + 5;
  result = (_QWORD *)a1[8];
  if (result == v2)
  {
    v4 = 4;
    result = v2;
  }
  else
  {
    if (!result)
      goto LABEL_6;
    v4 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[3];
  if (v5 == a1)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*a1 + 32))(a1);
  if (v5)
    return (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[3] + 40))(a1[3]);
  return result;
}

void std::__shared_ptr_emplace<esl::QuartzImage,geo::StdAllocator<esl::QuartzImage,grl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE068;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<esl::QuartzImage,geo::StdAllocator<esl::QuartzImage,grl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE068;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<esl::QuartzImage,geo::StdAllocator<esl::QuartzImage,grl::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 32))(a1 + 32);
}

uint64_t std::__shared_ptr_emplace<esl::QuartzImage,geo::StdAllocator<esl::QuartzImage,grl::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a1, 72);
}

void std::__function::__func<grl::IconRenderer::setupTextLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<std::string,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>,std::less<std::string>,geo::StdAllocator<std::pair<std::string const,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,grl::Allocator>> const&,grl::IconMetricsData &)::$_0,std::allocator<grl::IconRenderer::setupTextLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<std::string,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>,std::less<std::string>,geo::StdAllocator<std::pair<std::string const,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,grl::Allocator>> const&,grl::IconMetricsData &)::$_0>,void ()(unsigned short,grl::codec::TextLayerData const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<grl::IconRenderer::setupTextLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<std::string,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>,std::less<std::string>,geo::StdAllocator<std::pair<std::string const,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,grl::Allocator>> const&,grl::IconMetricsData &)::$_0,std::allocator<grl::IconRenderer::setupTextLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<std::string,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>,std::less<std::string>,geo::StdAllocator<std::pair<std::string const,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,grl::Allocator>> const&,grl::IconMetricsData &)::$_0>,void ()(unsigned short,grl::codec::TextLayerData const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E42D8120;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<grl::IconRenderer::setupTextLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<std::string,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>,std::less<std::string>,geo::StdAllocator<std::pair<std::string const,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,grl::Allocator>> const&,grl::IconMetricsData &)::$_0,std::allocator<grl::IconRenderer::setupTextLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<std::string,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>,std::less<std::string>,geo::StdAllocator<std::pair<std::string const,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,grl::Allocator>> const&,grl::IconMetricsData &)::$_0>,void ()(unsigned short,grl::codec::TextLayerData const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42D8120;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<grl::IconRenderer::setupTextLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<std::string,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>,std::less<std::string>,geo::StdAllocator<std::pair<std::string const,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,grl::Allocator>> const&,grl::IconMetricsData &)::$_0,std::allocator<grl::IconRenderer::setupTextLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&,std::map<std::string,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>,std::less<std::string>,geo::StdAllocator<std::pair<std::string const,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,grl::Allocator>> const&,grl::IconMetricsData &)::$_0>,void ()(unsigned short,grl::codec::TextLayerData const&)>::operator()(_QWORD *a1, unsigned __int16 *a2, grl::codec::TextLayerData *a3)
{
  unsigned __int16 v4;
  uint64_t v5;
  std::string::size_type size;
  std::string::size_type v7;
  _BYTE *v8;
  uint64_t v9;
  int v10;
  float v11;
  int *v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  const __CTFont *v17;
  CTFontRef CopyWithAttributes;
  const __CTFont *v19;
  char v20;
  uint64_t v21;
  std::string::size_type v22;
  CTFontRef v23;
  double v24;
  const __CTFont *v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  _QWORD v35[3];
  uint64_t v36;
  std::string v37;
  float v38;
  std::string v39;
  float v40;
  std::string __p;
  char v42;
  __int16 v43[2];
  char v44;
  __int16 *v45;
  std::string v46;
  int v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  grl::codec::TextLayerData::TextLayerData((grl::codec::TextLayerData *)v35, a3);
  if (!v42)
    goto LABEL_80;
  v5 = a1[2];
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v46, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v46 = __p;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
  {
    size = v46.__r_.__value_.__l.__size_;
    operator delete(v46.__r_.__value_.__l.__data_);
    if (!size)
      goto LABEL_80;
  }
  else if (!*((_BYTE *)&v46.__r_.__value_.__s + 23))
  {
    goto LABEL_80;
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v46, v37.__r_.__value_.__l.__data_, v37.__r_.__value_.__l.__size_);
  else
    v46 = v37;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
  {
    v7 = v46.__r_.__value_.__l.__size_;
    operator delete(v46.__r_.__value_.__l.__data_);
    if (!v7)
      goto LABEL_80;
  }
  else if (!*((_BYTE *)&v46.__r_.__value_.__s + 23))
  {
    goto LABEL_80;
  }
  v8 = (_BYTE *)a1[1];
  if (*v8 && v38 == 0.0)
  {
    v9 = 0;
    v10 = v8[6];
    v11 = ceilf(*(float *)(v5 + 260));
    v12 = grl::codec::textBalloonMetrics;
    while (*(float *)&grl::codec::textBalloonMetrics[v9] != v11)
    {
      v9 += 2;
      if (v9 == 8)
        goto LABEL_23;
    }
    v12 = &grl::codec::textBalloonMetrics[v9];
LABEL_23:
    v13 = *((float *)v12 + 1);
    if (v10)
      v13 = v13 + v13;
    v38 = v13;
  }
  v14 = a1[3];
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v46, v37.__r_.__value_.__l.__data_, v37.__r_.__value_.__l.__size_);
  else
    v46 = v37;
  v15 = std::__tree<std::__value_type<std::string,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,std::__map_value_compare<std::string,std::__value_type<std::string,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,std::less<std::string>,true>,geo::StdAllocator<std::__value_type<std::string,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,grl::Allocator>>::find<std::string>(v14, (const void **)&v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (a1[3] + 8 == v15 || !*(_QWORD *)(v15 + 64))
  {
    if (GEOGetGeoResourceLibRendererLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_10_0);
    v16 = GEOGetGeoResourceLibRendererLog::log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v46.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)v46.__r_.__value_.__r.__words + 4) = (std::string::size_type)"fontIt != fontMap.end() && fontIt->second.get()";
      WORD2(v46.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v46.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/IconRenderer.cpp";
      HIWORD(v46.__r_.__value_.__r.__words[2]) = 1024;
      v47 = 525;
      _os_log_impl(&dword_19F029000, v16, OS_LOG_TYPE_ERROR, "TextLayerRender: Digit font not given.: Assertion with expression - %s : Failed in file - %s line - %i", (uint8_t *)&v46, 0x1Cu);
    }
  }
  if (a1[3] + 8 == v15 || (v17 = *(const __CTFont **)(v15 + 64)) == 0)
  {
    v19 = 0;
  }
  else
  {
    CopyWithAttributes = CTFontCreateCopyWithAttributes(v17, v38, 0, 0);
    v19 = CopyWithAttributes;
    if (CopyWithAttributes)
    {
      CFRetain(CopyWithAttributes);
      v20 = 0;
      goto LABEL_43;
    }
  }
  v20 = 1;
LABEL_43:
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v46, v39.__r_.__value_.__l.__data_, v39.__r_.__value_.__l.__size_);
  else
    v46 = v39;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
  {
    v22 = v46.__r_.__value_.__l.__size_;
    operator delete(v46.__r_.__value_.__l.__data_);
    if (v22)
      goto LABEL_48;
  }
  else if (*((_BYTE *)&v46.__r_.__value_.__s + 23))
  {
LABEL_48:
    v21 = a1[3];
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v46, v39.__r_.__value_.__l.__data_, v39.__r_.__value_.__l.__size_);
    else
      v46 = v39;
    v26 = std::__tree<std::__value_type<std::string,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,std::__map_value_compare<std::string,std::__value_type<std::string,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,std::less<std::string>,true>,geo::StdAllocator<std::__value_type<std::string,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,grl::Allocator>>::find<std::string>(v21, (const void **)&v46.__r_.__value_.__l.__data_);
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v46.__r_.__value_.__l.__data_);
    if (a1[3] + 8 == v26 || !*(_QWORD *)(v26 + 64))
    {
      if (GEOGetGeoResourceLibRendererLog::onceToken != -1)
        dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_10_0);
      v27 = GEOGetGeoResourceLibRendererLog::log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v46.__r_.__value_.__l.__data_) = 136315650;
        *(std::string::size_type *)((char *)v46.__r_.__value_.__r.__words + 4) = (std::string::size_type)"nonDigitFontIt != fontMap.end() && nonDigitFontIt->second.get()";
        WORD2(v46.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&v46.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/IconRenderer.cpp";
        HIWORD(v46.__r_.__value_.__r.__words[2]) = 1024;
        v47 = 541;
        _os_log_impl(&dword_19F029000, v27, OS_LOG_TYPE_ERROR, "TextLayerRender: Non-digit font not given.: Assertion with expression - %s : Failed in file - %s line - %i", (uint8_t *)&v46, 0x1Cu);
      }
    }
    v23 = v19;
    if (a1[3] + 8 == v26)
      goto LABEL_67;
    v25 = *(const __CTFont **)(v26 + 64);
    v23 = v19;
    if (!v25)
      goto LABEL_67;
    v24 = v40;
    goto LABEL_65;
  }
  v23 = v19;
  if (v38 != v40)
  {
    v24 = v40;
    v25 = v19;
LABEL_65:
    v23 = CTFontCreateCopyWithAttributes(v25, v24, 0, 0);
    if ((v20 & 1) == 0)
      CFRelease(v19);
  }
LABEL_67:
  v28 = a1[1];
  if (*(_BYTE *)(v28 + 56))
  {
    if (*(char *)(v28 + 87) < 0)
      std::string::__init_copy_ctor_external(&v46, *(const std::string::value_type **)(v28 + 64), *(_QWORD *)(v28 + 72));
    else
      v46 = *(std::string *)(v28 + 64);
  }
  else
  {
    std::string::basic_string[abi:nn180100]<0>(&v46, "");
  }
  v30 = a1[3];
  v29 = a1[4];
  v31 = operator new();
  grl::TextLayerRenderer::TextLayerRenderer(v31, (uint64_t)v35, v32, v30, v29, v4);
  v43[0] = 3;
  v43[1] = v4;
  v44 = 0;
  v45 = v43;
  v33 = std::__tree<std::__value_type<grl::IconLayerMapKey,std::unique_ptr<grl::LayerRenderer>>,std::__map_value_compare<grl::IconLayerMapKey,std::__value_type<grl::IconLayerMapKey,std::unique_ptr<grl::LayerRenderer>>,grl::IconLayerMapKey,false>,geo::StdAllocator<std::__value_type<grl::IconLayerMapKey,std::unique_ptr<grl::LayerRenderer>>,grl::Allocator>>::__emplace_unique_key_args<grl::IconLayerMapKey,std::piecewise_construct_t const&,std::tuple<grl::IconLayerMapKey&&>,std::tuple<>>((uint64_t **)(v5 + 32), v43, (_DWORD **)&v45);
  v34 = v33[5];
  v33[5] = v31;
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (v23)
    CFRelease(v23);
  if ((v20 & 1) == 0)
    CFRelease(v19);
LABEL_80:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  if (v35[0])
  {
    v35[1] = v35[0];
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v36 + 40))(v36, v35[0], v35[2] - v35[0]);
  }
}

BOOL std::less<std::string>::operator()[abi:nn180100](uint64_t a1, const void **a2, const void **a3)
{
  int v3;
  int v4;
  size_t v5;
  const void *v6;
  size_t v7;
  const void *v8;
  size_t v9;
  int v10;

  v3 = *((char *)a3 + 23);
  v4 = *((char *)a2 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = (size_t)a2[1];
  if (v4 >= 0)
    v6 = a2;
  else
    v6 = *a2;
  if (v3 >= 0)
    v7 = *((unsigned __int8 *)a3 + 23);
  else
    v7 = (size_t)a3[1];
  if (v3 >= 0)
    v8 = a3;
  else
    v8 = *a3;
  if (v7 >= v5)
    v9 = v5;
  else
    v9 = v7;
  v10 = memcmp(v6, v8, v9);
  if (v10)
    return v10 < 0;
  else
    return v5 < v7;
}

void grl::createPlaceholderGlyph(grl *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  __int128 v4;
  _QWORD v5[2];
  CFTypeRef cf;

  v1 = (std::__shared_weak_count *)operator new(0x28uLL);
  v1->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  v1->__shared_weak_owners_ = 0;
  v1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE0D8;
  esl::QuartzContext::QuartzContext(&v1[1], 3, 64, 64);
  esl::QuartzColor::QuartzColor((esl::QuartzColor *)v5, 1.0, 0.8, 0.8, 1.0);
  ((void (*)(std::__shared_weak_count *, _QWORD *))v1[1].__vftable[5].__on_zero_shared_weak)(&v1[1], v5);
  v4 = xmmword_1A0086EE0;
  ((void (*)(std::__shared_weak_count *, __int128 *, _QWORD))v1[1].__vftable[6].__on_zero_shared)(&v1[1], &v4, 0);
  v4 = xmmword_1A0086EF0;
  ((void (*)(std::__shared_weak_count *, __int128 *, _QWORD))v1[1].__vftable[6].__on_zero_shared)(&v1[1], &v4, 0);
  ((void (*)(std::__shared_weak_count *))v1[1].__vftable[9].__on_zero_shared_weak)(&v1[1]);
  v5[0] = &off_1E42B02E0;
  v5[1] = &off_1E42B4850;
  if (cf)
    CFRelease(cf);
  do
    v3 = __ldaxr(p_shared_owners);
  while (__stlxr(v3 - 1, p_shared_owners));
  if (!v3)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t grl::codec::TextLayerData::toString(grl::codec::TextLayerData *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  const char *v11;
  char *v12;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v15;
  _QWORD *v16;
  int v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  std::string *v22;
  std::string::size_type v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  std::string *v33;
  std::string::size_type v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  int v47;
  char *v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  std::string *v52;
  std::string::size_type v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  std::string *v63;
  std::string::size_type v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  std::string *v76;
  std::string::size_type v77;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  std::string *v90;
  std::string::size_type v91;
  uint64_t v92;
  std::string __p;
  _QWORD v95[2];
  _QWORD v96[11];
  char v97;
  uint64_t v98;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v95);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v96, (uint64_t)"{ ", 2);
  v2 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v96, (uint64_t)"fillColor: ", 11);
  v3 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v2, (uint64_t)"(", 1);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 32);
  v4 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v3, (uint64_t)&__p, 1);
  v5 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v4, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 33);
  v6 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v5, (uint64_t)&__p, 1);
  v7 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v6, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 34);
  v8 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v7, (uint64_t)&__p, 1);
  v9 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v8, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 35);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v9, (uint64_t)&__p, 1);
  v10 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v96, (uint64_t)", fillColorSource: ", 19);
  v11 = (const char *)&str_10_1;
  if (*((_BYTE *)this + 36) == 1)
    v11 = "TransitLine";
  if (*((_BYTE *)this + 36))
    v12 = (char *)v11;
  else
    v12 = "IconPack";
  std::string::basic_string[abi:nn180100]<0>(&__p, v12);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v10, (uint64_t)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v15 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v96, (uint64_t)", fontName: ", 12);
  v16 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v15, (uint64_t)"\"", 1);
  v17 = *((char *)this + 63);
  if (v17 >= 0)
    v18 = (char *)this + 40;
  else
    v18 = (char *)*((_QWORD *)this + 5);
  if (v17 >= 0)
    v19 = *((unsigned __int8 *)this + 63);
  else
    v19 = *((_QWORD *)this + 6);
  v20 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v16, (uint64_t)v18, v19);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v20, (uint64_t)"\"", 1);
  v21 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v96, (uint64_t)", fontSize: ", 12);
  std::to_string(&__p, *((float *)this + 16));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = &__p;
  else
    v22 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v23 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v23 = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v24 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v96, (uint64_t)", haloColor: ", 13);
  v25 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v24, (uint64_t)"(", 1);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 68);
  v26 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v25, (uint64_t)&__p, 1);
  v27 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v26, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 69);
  v28 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v27, (uint64_t)&__p, 1);
  v29 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v28, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 70);
  v30 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v29, (uint64_t)&__p, 1);
  v31 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v30, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 71);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v31, (uint64_t)&__p, 1);
  v32 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v96, (uint64_t)", haloWeight: ", 14);
  std::to_string(&__p, *((float *)this + 18));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v33 = &__p;
  else
    v33 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v34 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v34 = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v32, (uint64_t)v33, v34);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v35 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v96, (uint64_t)", horizontalPadding: ", 21);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v35, (uint64_t)"(", 1);
  v36 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v36, (uint64_t)", ", 2);
  std::ostream::operator<<();
  v37 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v96, (uint64_t)", nonDigitTextColor: ", 21);
  v38 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v37, (uint64_t)"(", 1);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 84);
  v39 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v38, (uint64_t)&__p, 1);
  v40 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v39, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 85);
  v41 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v40, (uint64_t)&__p, 1);
  v42 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v41, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 86);
  v43 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v42, (uint64_t)&__p, 1);
  v44 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v43, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 87);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v44, (uint64_t)&__p, 1);
  v45 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v96, (uint64_t)", nonDigitTextFontName: ", 24);
  v46 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v45, (uint64_t)"\"", 1);
  v47 = *((char *)this + 111);
  if (v47 >= 0)
    v48 = (char *)this + 88;
  else
    v48 = (char *)*((_QWORD *)this + 11);
  if (v47 >= 0)
    v49 = *((unsigned __int8 *)this + 111);
  else
    v49 = *((_QWORD *)this + 12);
  v50 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v46, (uint64_t)v48, v49);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v50, (uint64_t)"\"", 1);
  v51 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v96, (uint64_t)", nonDigitTextFontSize: ", 24);
  std::to_string(&__p, *((float *)this + 28));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v52 = &__p;
  else
    v52 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v53 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v53 = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v51, (uint64_t)v52, v53);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v54 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v96, (uint64_t)", nonDigitTextHaloColor: ", 25);
  v55 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v54, (uint64_t)"(", 1);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 116);
  v56 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v55, (uint64_t)&__p, 1);
  v57 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v56, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 117);
  v58 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v57, (uint64_t)&__p, 1);
  v59 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v58, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 118);
  v60 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v59, (uint64_t)&__p, 1);
  v61 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v60, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 119);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v61, (uint64_t)&__p, 1);
  v62 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v96, (uint64_t)", nonDigitTextHaloWeight: ", 26);
  std::to_string(&__p, *((float *)this + 30));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v63 = &__p;
  else
    v63 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v64 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v64 = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v62, (uint64_t)v63, v64);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v65 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v96, (uint64_t)", shadowColor: ", 15);
  v66 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v65, (uint64_t)"(", 1);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 124);
  v67 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v66, (uint64_t)&__p, 1);
  v68 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v67, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 125);
  v69 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v68, (uint64_t)&__p, 1);
  v70 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v69, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 126);
  v71 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v70, (uint64_t)&__p, 1);
  v72 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v71, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 127);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v72, (uint64_t)&__p, 1);
  v73 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v96, (uint64_t)", shadowOffset: ", 16);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v73, (uint64_t)"(", 1);
  v74 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v74, (uint64_t)", ", 2);
  std::ostream::operator<<();
  v75 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v96, (uint64_t)", shadowWeight: ", 16);
  std::to_string(&__p, *((float *)this + 34));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v76 = &__p;
  else
    v76 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v77 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v77 = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v75, (uint64_t)v76, v77);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v78 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v96, (uint64_t)", text: ", 8);
  v79 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v78, (uint64_t)"\"", 1);
  v82 = *((_QWORD *)this + 18);
  v81 = (char *)this + 144;
  v80 = v82;
  v83 = v81[23];
  if (v83 >= 0)
    v84 = (uint64_t)v81;
  else
    v84 = v80;
  if (v83 >= 0)
    v85 = v81[23];
  else
    v85 = *((_QWORD *)v81 + 1);
  v86 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v79, v84, v85);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v86, (uint64_t)"\"", 1);
  v87 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v96, (uint64_t)", textPosition: ", 16);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v87, (uint64_t)"(", 1);
  v88 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v88, (uint64_t)", ", 2);
  std::ostream::operator<<();
  v89 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v96, (uint64_t)", visible: ", 11);
  std::to_string(&__p, v81[32]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v90 = &__p;
  else
    v90 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v91 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v91 = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v89, (uint64_t)v90, v91);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v96, (uint64_t)" }", 2);
  std::stringbuf::str();
  v95[0] = *MEMORY[0x1E0DE4F50];
  v92 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v95 + *(_QWORD *)(v95[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v96[0] = v92;
  v96[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v97 < 0)
    operator delete((void *)v96[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1A1AF4D64](&v98);
}

uint64_t grl::codec::TextLayerData::encode@<X0>(grl::codec::TextLayerData *this@<X0>, _QWORD *a2@<X8>)
{
  unsigned __int16 v4;
  uint64_t v5;
  unsigned __int16 v6;
  uint64_t v7;
  unsigned __int16 v8;
  uint64_t v9;
  int v10;
  uint64_t *v12;
  _QWORD *v13;
  grl::Allocator *v14;
  uint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  grl::Allocator *v18;
  uint64_t v19;
  uint64_t *v20;
  _QWORD *v21;
  grl::Allocator *v22;
  uint64_t v23;
  uint64_t *v24;
  _QWORD *v25;
  grl::Allocator *v26;
  uint64_t v27;
  _QWORD **v28;
  _QWORD *v29;
  grl::Allocator *v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  grl::Allocator *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37[3];
  _BYTE v38[24];
  uint64_t v39;

  v13 = 0;
  v14 = (grl::Allocator *)grl::Allocator::instance(this);
  v15 = 0;
  v12 = (uint64_t *)&v13;
  v17 = 0;
  v18 = (grl::Allocator *)grl::Allocator::instance(v14);
  v19 = 0;
  v16 = (uint64_t *)&v17;
  v21 = 0;
  v22 = (grl::Allocator *)grl::Allocator::instance(v18);
  v23 = 0;
  v20 = (uint64_t *)&v21;
  v25 = 0;
  v26 = (grl::Allocator *)grl::Allocator::instance(v22);
  v27 = 0;
  v24 = (uint64_t *)&v25;
  v29 = 0;
  v30 = (grl::Allocator *)grl::Allocator::instance(v26);
  v31 = 0;
  v28 = &v29;
  v33 = 0;
  v34 = (grl::Allocator *)grl::Allocator::instance(v30);
  v35 = 0;
  v32 = (uint64_t *)&v33;
  v37[0] = 0;
  v37[1] = grl::Allocator::instance(v34);
  v37[2] = 0;
  v36 = v37;
  *(_WORD *)v38 = 5;
  *(_DWORD *)&v38[2] = *((_DWORD *)this + 8);
  std::__tree<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>>(&v32, (unsigned __int16 *)v38, (uint64_t)v38);
  *(_QWORD *)v38 = ((unint64_t)*((unsigned __int8 *)this + 36) << 32) | 0x23;
  std::__tree<std::__value_type<grl::PropertyID,int>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,int>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,int>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,int>>(&v16, (unsigned __int16 *)v38, (uint64_t)v38);
  *(_WORD *)v38 = 24;
  if (*((char *)this + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v38[8], *((const std::string::value_type **)this + 5), *((_QWORD *)this + 6));
    v4 = *(_WORD *)v38;
  }
  else
  {
    *(_OWORD *)&v38[8] = *(_OWORD *)((char *)this + 40);
    v39 = *((_QWORD *)this + 7);
    v4 = 24;
  }
  std::__tree<std::__value_type<grl::PropertyID,std::string>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,std::string>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,std::string>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,std::string>>((uint64_t *)&v36, v4, (uint64_t)v38);
  if (SHIBYTE(v39) < 0)
    operator delete(*(void **)&v38[8]);
  *(_QWORD *)v38 = ((unint64_t)*((unsigned int *)this + 16) << 32) | 0x16;
  std::__tree<std::__value_type<grl::PropertyID,float>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,float>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,float>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,float>>(&v20, (unsigned __int16 *)v38, (uint64_t)v38);
  *(_WORD *)v38 = 6;
  *(_DWORD *)&v38[2] = *((_DWORD *)this + 17);
  std::__tree<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>>(&v32, (unsigned __int16 *)v38, (uint64_t)v38);
  *(_QWORD *)v38 = ((unint64_t)*((unsigned int *)this + 18) << 32) | 2;
  std::__tree<std::__value_type<grl::PropertyID,float>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,float>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,float>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,float>>(&v20, (unsigned __int16 *)v38, (uint64_t)v38);
  strcpy(v38, "\n");
  v5 = *(_QWORD *)((char *)this + 76);
  *(_QWORD *)&v38[4] = v5;
  std::__tree<std::__value_type<grl::PropertyID,gm::Matrix<float,2,1>>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,gm::Matrix<float,2,1>>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,gm::Matrix<float,2,1>>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,gm::Matrix<float,2,1>>>(&v24, (unsigned __int16 *)v38, (uint64_t)v38);
  *(_WORD *)v38 = 26;
  *(_DWORD *)&v38[2] = *((_DWORD *)this + 21);
  std::__tree<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>>(&v32, (unsigned __int16 *)v38, (uint64_t)v38);
  *(_WORD *)v38 = 25;
  if (*((char *)this + 111) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v38[8], *((const std::string::value_type **)this + 11), *((_QWORD *)this + 12));
    v6 = *(_WORD *)v38;
  }
  else
  {
    *(_OWORD *)&v38[8] = *(_OWORD *)((char *)this + 88);
    v39 = *((_QWORD *)this + 13);
    v6 = 25;
  }
  std::__tree<std::__value_type<grl::PropertyID,std::string>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,std::string>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,std::string>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,std::string>>((uint64_t *)&v36, v6, (uint64_t)v38);
  if (SHIBYTE(v39) < 0)
    operator delete(*(void **)&v38[8]);
  *(_QWORD *)v38 = ((unint64_t)*((unsigned int *)this + 28) << 32) | 0x17;
  std::__tree<std::__value_type<grl::PropertyID,float>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,float>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,float>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,float>>(&v20, (unsigned __int16 *)v38, (uint64_t)v38);
  *(_WORD *)v38 = 30;
  *(_DWORD *)&v38[2] = *((_DWORD *)this + 29);
  std::__tree<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>>(&v32, (unsigned __int16 *)v38, (uint64_t)v38);
  *(_QWORD *)v38 = ((unint64_t)*((unsigned int *)this + 30) << 32) | 0x1D;
  std::__tree<std::__value_type<grl::PropertyID,float>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,float>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,float>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,float>>(&v20, (unsigned __int16 *)v38, (uint64_t)v38);
  strcpy(v38, "\a");
  *(_DWORD *)&v38[2] = *((_DWORD *)this + 31);
  std::__tree<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>>(&v32, (unsigned __int16 *)v38, (uint64_t)v38);
  *(_WORD *)v38 = 4;
  v7 = *((_QWORD *)this + 16);
  *(_QWORD *)&v38[4] = v7;
  std::__tree<std::__value_type<grl::PropertyID,gm::Matrix<float,2,1>>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,gm::Matrix<float,2,1>>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,gm::Matrix<float,2,1>>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,gm::Matrix<float,2,1>>>(&v24, (unsigned __int16 *)v38, (uint64_t)v38);
  *(_QWORD *)v38 = ((unint64_t)*((unsigned int *)this + 34) << 32) | 3;
  std::__tree<std::__value_type<grl::PropertyID,float>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,float>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,float>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,float>>(&v20, (unsigned __int16 *)v38, (uint64_t)v38);
  *(_WORD *)v38 = 28;
  if (*((char *)this + 167) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v38[8], *((const std::string::value_type **)this + 18), *((_QWORD *)this + 19));
    v8 = *(_WORD *)v38;
  }
  else
  {
    *(_OWORD *)&v38[8] = *((_OWORD *)this + 9);
    v39 = *((_QWORD *)this + 20);
    v8 = 28;
  }
  std::__tree<std::__value_type<grl::PropertyID,std::string>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,std::string>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,std::string>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,std::string>>((uint64_t *)&v36, v8, (uint64_t)v38);
  if (SHIBYTE(v39) < 0)
    operator delete(*(void **)&v38[8]);
  if (*((_BYTE *)this + 177))
  {
    *(_WORD *)v38 = 31;
    v9 = *((_QWORD *)this + 21);
    *(_QWORD *)&v38[4] = v9;
    std::__tree<std::__value_type<grl::PropertyID,gm::Matrix<float,2,1>>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,gm::Matrix<float,2,1>>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,gm::Matrix<float,2,1>>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,gm::Matrix<float,2,1>>>(&v24, (unsigned __int16 *)v38, (uint64_t)v38);
  }
  if (*((_BYTE *)this + 176))
    v10 = 65551;
  else
    v10 = 15;
  *(_DWORD *)v38 = v10;
  std::__tree<std::__value_type<grl::PropertyID,BOOL>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,BOOL>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,BOOL>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,BOOL>>(&v12, (unsigned __int16 *)v38, (uint64_t)v38);
  grl::PropertySet::encode((grl::PropertySet *)&v12, a2);
  std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,std::string>,grl::Allocator>>::destroy((uint64_t)&v36, v37[0]);
  std::__tree<unsigned int,std::less<unsigned int>,geo::StdAllocator<unsigned int,mdm::Allocator>>::destroy((uint64_t)&v32, v33);
  std::__tree<std::__value_type<VKTrafficFeatureType,unsigned long>,std::__map_value_compare<VKTrafficFeatureType,std::__value_type<VKTrafficFeatureType,unsigned long>,std::less<VKTrafficFeatureType>,true>,geo::StdAllocator<std::__value_type<VKTrafficFeatureType,unsigned long>,mdm::Allocator>>::destroy((uint64_t)&v28, v29);
  std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)&v24, v25);
  std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)&v20, v21);
  std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)&v16, v17);
  return std::__tree<unsigned int,std::less<unsigned int>,geo::StdAllocator<unsigned int,mdm::Allocator>>::destroy((uint64_t)&v12, v13);
}

uint64_t **std::__tree<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>>(uint64_t **a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unsigned int v7;
  uint64_t **v8;
  unsigned int v9;
  uint64_t v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((unsigned __int16 *)v5 + 13);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a1[2] + 16))(a1[2], 32, 8);
    *(_WORD *)(v10 + 26) = *(_WORD *)a3;
    *(_DWORD *)(v10 + 28) = *(_DWORD *)(a3 + 2);
    std::__tree<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,grl::Allocator>>::__insert_node_at(a1, (uint64_t)v8, v6, (uint64_t *)v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t **std::__tree<std::__value_type<grl::PropertyID,int>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,int>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,int>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,int>>(uint64_t **a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unsigned int v7;
  uint64_t **v8;
  unsigned int v9;
  uint64_t v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((unsigned __int16 *)v5 + 14);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a1[2] + 16))(a1[2], 40, 8);
    *(_WORD *)(v10 + 28) = *(_WORD *)a3;
    *(_DWORD *)(v10 + 32) = *(_DWORD *)(a3 + 4);
    std::__tree<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,grl::Allocator>>::__insert_node_at(a1, (uint64_t)v8, v6, (uint64_t *)v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t *std::__tree<std::__value_type<grl::PropertyID,std::string>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,std::string>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,std::string>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,std::string>>(uint64_t *result, unsigned __int16 a2, uint64_t a3)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t v9;
  __int128 v10;

  v4 = (uint64_t **)result;
  v6 = (uint64_t **)(result + 1);
  v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((unsigned __int16 *)v5 + 16);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = (uint64_t **)(result + 1);
LABEL_9:
    v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)result[2] + 16))(result[2], 64, 8);
    *(_WORD *)(v9 + 32) = *(_WORD *)a3;
    v10 = *(_OWORD *)(a3 + 8);
    *(_QWORD *)(v9 + 56) = *(_QWORD *)(a3 + 24);
    *(_OWORD *)(v9 + 40) = v10;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 8) = 0;
    return std::__tree<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,grl::Allocator>>::__insert_node_at(v4, (uint64_t)v7, v6, (uint64_t *)v9);
  }
  return result;
}

uint64_t **std::__tree<std::__value_type<grl::PropertyID,float>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,float>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,float>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,float>>(uint64_t **a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unsigned int v7;
  uint64_t **v8;
  unsigned int v9;
  uint64_t v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((unsigned __int16 *)v5 + 14);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a1[2] + 16))(a1[2], 40, 8);
    *(_WORD *)(v10 + 28) = *(_WORD *)a3;
    *(_DWORD *)(v10 + 32) = *(_DWORD *)(a3 + 4);
    std::__tree<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,grl::Allocator>>::__insert_node_at(a1, (uint64_t)v8, v6, (uint64_t *)v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t **std::__tree<std::__value_type<grl::PropertyID,gm::Matrix<float,2,1>>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,gm::Matrix<float,2,1>>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,gm::Matrix<float,2,1>>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,gm::Matrix<float,2,1>>>(uint64_t **a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unsigned int v7;
  uint64_t **v8;
  unsigned int v9;
  uint64_t v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((unsigned __int16 *)v5 + 14);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a1[2] + 16))(a1[2], 40, 8);
    *(_WORD *)(v10 + 28) = *(_WORD *)a3;
    *(_QWORD *)(v10 + 32) = *(_QWORD *)(a3 + 4);
    std::__tree<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,grl::Allocator>>::__insert_node_at(a1, (uint64_t)v8, v6, (uint64_t *)v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t **std::__tree<std::__value_type<grl::PropertyID,BOOL>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,BOOL>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,BOOL>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,BOOL>>(uint64_t **a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unsigned int v7;
  uint64_t **v8;
  unsigned int v9;
  uint64_t v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((unsigned __int16 *)v5 + 13);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a1[2] + 16))(a1[2], 32, 8);
    *(_WORD *)(v10 + 26) = *(_WORD *)a3;
    *(_BYTE *)(v10 + 28) = *(_BYTE *)(a3 + 2);
    std::__tree<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,grl::Allocator>>::__insert_node_at(a1, (uint64_t)v8, v6, (uint64_t *)v10);
    return (uint64_t **)v10;
  }
  return v8;
}

void grl::codec::ResourcePack::compressData(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  int v4;
  unint64_t v5;
  size_t v6;
  unint64_t v7;
  size_t v8;
  uLong total_out;
  unint64_t v10;
  unint64_t v11;
  uLong v12;
  uLong v13;
  uLong v14;
  z_stream v15;

  v15.next_in = *(Bytef **)a1;
  v15.avail_in = *(_DWORD *)(a1 + 8) - LODWORD(v15.next_in);
  v15.total_out = 0;
  memset(&v15.zalloc, 0, 24);
  v4 = deflateInit_(&v15, -1, "1.2.12", 112);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  if (!v4)
  {
    v5 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
    if (v5 >> 3 <= 0x200)
      v6 = 512;
    else
      v6 = v5 >> 3;
    v7 = v5 >> 1;
    if (v7 <= 0x200)
      v8 = 512;
    else
      v8 = v7;
    std::vector<unsigned char>::__append(a2, v8);
    do
    {
      total_out = v15.total_out;
      v10 = *a2;
      v11 = a2[1];
      v12 = v11 - *a2;
      if (v15.total_out >= v12)
      {
        v13 = v12 + v6;
        if (v12 >= v12 + v6)
        {
          if (v12 > v12 + v6)
          {
            LODWORD(v11) = v10 + v13;
            a2[1] = v10 + v13;
          }
        }
        else
        {
          std::vector<unsigned char>::__append(a2, v6);
          total_out = v15.total_out;
          v10 = *a2;
          v11 = a2[1];
        }
      }
      v15.next_out = (Bytef *)(v10 + total_out);
      v15.avail_out = v11 - (v10 + total_out);
      deflate(&v15, 4);
    }
    while (!v15.avail_out);
    deflateEnd(&v15);
    v14 = a2[1] - *a2;
    if (v15.total_out <= v14)
    {
      if (v15.total_out < v14)
        a2[1] = *a2 + v15.total_out;
    }
    else
    {
      std::vector<unsigned char>::__append(a2, v15.total_out - v14);
    }
  }
}

uint64_t grl::codec::ResourcePack::fileName@<X0>(grl::codec::ResourcePack *this@<X0>, uint64_t a2@<X8>)
{
  int v4;
  char *v5;
  uint64_t v6;
  grl *v7;
  void **v8;
  void *v9;
  uint64_t v10;
  _BYTE *v11;
  void *__p[2];
  unsigned __int8 v14;
  _QWORD v15[11];
  char v16;
  uint64_t v17;

  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v15);
  v4 = *((char *)this + 31);
  if (v4 >= 0)
    v5 = (char *)this + 8;
  else
    v5 = (char *)*((_QWORD *)this + 1);
  if (v4 >= 0)
    v6 = *((unsigned __int8 *)this + 31);
  else
    v6 = *((_QWORD *)this + 2);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v15, (uint64_t)v5, v6);
  if (*((float *)this + 8) != 1.0)
  {
    v7 = (grl *)std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v15, (uint64_t)"@", 1);
    grl::ContentScaleToIntegralString((uint64_t *)__p, v7, *((float *)this + 8));
    v8 = (v14 & 0x80u) == 0 ? __p : (void **)__p[0];
    v9 = (v14 & 0x80u) == 0 ? (void *)v14 : __p[1];
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v15, (uint64_t)v8, (uint64_t)v9);
    if ((char)v14 < 0)
      operator delete(__p[0]);
  }
  std::stringbuf::str();
  v10 = *(unsigned __int8 *)(a2 + 23);
  if ((v10 & 0x80u) == 0)
    v11 = (_BYTE *)a2;
  else
    v11 = *(_BYTE **)a2;
  if ((v10 & 0x80u) != 0)
    v10 = *(_QWORD *)(a2 + 8);
  for (; v10; --v10)
  {
    if (*v11 == 32)
      *v11 = 95;
    ++v11;
  }
  v15[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v15 + *(_QWORD *)(v15[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v15[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v16 < 0)
    operator delete((void *)v15[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AF4D64](&v17);
}

void grl::codec::ResourcePack::encodeHeaderAndData(uint64_t a1@<X1>, unsigned __int16 **a2@<X2>, _QWORD *a3@<X8>)
{
  unsigned __int16 *v5;
  grl::Allocator *v6;
  unsigned __int16 *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  unsigned __int16 *v11;
  unsigned __int16 **v12;
  BOOL v13;
  _QWORD **v14;
  _QWORD *v15;
  _QWORD **v16;
  unsigned __int8 v17;
  char *v18;
  int v19;
  void *v20;
  size_t v21;
  char *v22;
  void *__p;
  _BYTE *v24;
  void *v25;
  _BYTE *v26;
  uint64_t v27;
  char v28;
  unsigned __int8 v29[8];
  _QWORD *v30[3];
  void *v31;
  _BYTE *v32;
  uint64_t v33;
  unsigned __int8 v34;
  unsigned __int8 v35[8];

  v31 = 0;
  v32 = 0;
  v34 = 0;
  v33 = 0;
  geo::obitstream::appendBytes((geo::obitstream *)&v31, *(char **)a1, *(_QWORD *)(a1 + 8) - *(_QWORD *)a1);
  *(_WORD *)v29 = (unsigned __int16)a2[3];
  geo::obitstream::appendBytes((geo::obitstream *)&v31, (char *)v29, 2);
  v5 = a2[3];
  v30[0] = 0;
  v30[1] = (_QWORD *)grl::Allocator::instance(v6);
  v30[2] = 0;
  *(_QWORD *)v29 = v30;
  v25 = 0;
  v26 = 0;
  v28 = 0;
  v27 = 0;
  v7 = *a2;
  if (*a2 != (unsigned __int16 *)(a2 + 1))
  {
    v8 = 10 * (_QWORD)v5 + 66;
    do
    {
      if (*((_BYTE *)v7 + 64))
      {
        grl::codec::ResourcePack::compressData((uint64_t)(v7 + 20), (unint64_t *)&__p);
        if (v28)
          v9 = (uint64_t *)(&v26[v8] - (_BYTE *)v25 + 1);
        else
          v9 = (uint64_t *)(&v26[v8] - (_BYTE *)v25);
        *(_QWORD *)v35 = v7 + 16;
        std::__tree<std::__value_type<unsigned short,unsigned long long>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,unsigned long long>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,unsigned long long>,grl::Allocator>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>((uint64_t **)v29, v7 + 16, (uint64_t)&std::piecewise_construct, (_WORD **)v35)[5] = v9;
        *(_QWORD *)v35 = *((_QWORD *)v7 + 6) - *((_QWORD *)v7 + 5);
        geo::obitstream::appendBytes((geo::obitstream *)&v25, (char *)v35, 8);
        *(_QWORD *)v35 = v24 - (_BYTE *)__p;
        geo::obitstream::appendBytes((geo::obitstream *)&v25, (char *)v35, 8);
        geo::obitstream::appendBytes((geo::obitstream *)&v25, (char *)__p, v24 - (_BYTE *)__p);
        if (__p)
        {
          v24 = __p;
          operator delete(__p);
        }
      }
      else
      {
        if (v28)
          v10 = (uint64_t *)(&v26[v8] - (_BYTE *)v25 + 1);
        else
          v10 = (uint64_t *)(&v26[v8] - (_BYTE *)v25);
        __p = v7 + 16;
        std::__tree<std::__value_type<unsigned short,unsigned long long>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,unsigned long long>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,unsigned long long>,grl::Allocator>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>((uint64_t **)v29, v7 + 16, (uint64_t)&std::piecewise_construct, (_WORD **)&__p)[5] = v10;
        __p = (void *)(*((_QWORD *)v7 + 6) - *((_QWORD *)v7 + 5));
        geo::obitstream::appendBytes((geo::obitstream *)&v25, (char *)&__p, 8);
        __p = 0;
        geo::obitstream::appendBytes((geo::obitstream *)&v25, (char *)&__p, 8);
        geo::obitstream::appendBytes((geo::obitstream *)&v25, *((char **)v7 + 5), *((_QWORD *)v7 + 6) - *((_QWORD *)v7 + 5));
      }
      v11 = (unsigned __int16 *)*((_QWORD *)v7 + 1);
      if (v11)
      {
        do
        {
          v12 = (unsigned __int16 **)v11;
          v11 = *(unsigned __int16 **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (unsigned __int16 **)*((_QWORD *)v7 + 2);
          v13 = *v12 == v7;
          v7 = (unsigned __int16 *)v12;
        }
        while (!v13);
      }
      v7 = (unsigned __int16 *)v12;
    }
    while (v12 != a2 + 1);
    v14 = *(_QWORD ***)v29;
    if (*(_QWORD ***)v29 != v30)
    {
      do
      {
        LOWORD(__p) = *((_WORD *)v14 + 16);
        geo::obitstream::appendBytes((geo::obitstream *)&v31, (char *)&__p, 2);
        __p = v14[5];
        geo::obitstream::appendBytes((geo::obitstream *)&v31, (char *)&__p, 8);
        v15 = v14[1];
        if (v15)
        {
          do
          {
            v16 = (_QWORD **)v15;
            v15 = (_QWORD *)*v15;
          }
          while (v15);
        }
        else
        {
          do
          {
            v16 = (_QWORD **)v14[2];
            v13 = *v16 == v14;
            v14 = v16;
          }
          while (!v13);
        }
        v14 = v16;
      }
      while (v16 != v30);
    }
  }
  geo::obitstream::appendBytes((geo::obitstream *)&v31, (char *)v25, v26 - (_BYTE *)v25);
  v17 = v34;
  if (v34)
  {
    v18 = (char *)operator new(1uLL);
    *v18 = 0;
    geo::obitstream::appendBytes((geo::obitstream *)&v31, v18, 1);
    v19 = v34 & 7;
    v34 = (v34 - v17) & 7;
    if (v19 - 1 < v34 - 1)
      --v32;
    operator delete(v18);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v20 = v31;
  v21 = v32 - (_BYTE *)v31;
  if (v32 != v31)
  {
    std::vector<unsigned char>::__vallocate[abi:nn180100](a3, v32 - (_BYTE *)v31);
    v22 = (char *)a3[1];
    memmove(v22, v20, v21);
    a3[1] = &v22[v21];
  }
  if (v25)
  {
    v26 = v25;
    operator delete(v25);
  }
  std::__tree<std::__value_type<VKTrafficFeatureType,unsigned long>,std::__map_value_compare<VKTrafficFeatureType,std::__value_type<VKTrafficFeatureType,unsigned long>,std::less<VKTrafficFeatureType>,true>,geo::StdAllocator<std::__value_type<VKTrafficFeatureType,unsigned long>,mdm::Allocator>>::destroy((uint64_t)v29, v30[0]);
  if (v31)
  {
    v32 = v31;
    operator delete(v31);
  }
}

void grl::codec::ResourcePack::encodePackInfo(grl::codec::ResourcePack *this@<X0>, __int16 a2@<W1>, _QWORD *a3@<X8>)
{
  std::string *p_p;
  size_t v6;
  void *v7;
  size_t v8;
  char *v9;
  std::string __p;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  char v14;

  v11 = 0;
  v12 = 0;
  v14 = 0;
  v13 = 0;
  LOWORD(__p.__r_.__value_.__l.__data_) = a2;
  geo::obitstream::appendBytes((geo::obitstream *)&v11, (char *)&__p, 2);
  if (*((char *)this + 31) < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
  else
    __p = *(std::string *)((char *)this + 8);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v6 = strlen((const char *)p_p);
  geo::obitstream::appendBytes((geo::obitstream *)&v11, (char *)p_p, v6 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  LODWORD(__p.__r_.__value_.__l.__data_) = *((_DWORD *)this + 8);
  geo::obitstream::appendBytes((geo::obitstream *)&v11, (char *)&__p, 4);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v7 = v11;
  v8 = v12 - v11;
  if (v12 != v11)
  {
    std::vector<unsigned char>::__vallocate[abi:nn180100](a3, v12 - v11);
    v9 = (char *)a3[1];
    memmove(v9, v7, v8);
    a3[1] = &v9[v8];
    v7 = v11;
  }
  if (v7)
  {
    v12 = v7;
    operator delete(v7);
  }
}

void grl::PathGenerator::createRectalloonBodyPath(float32x2_t *a1@<X0>, _QWORD *a2@<X8>, float a3@<S0>)
{
  float v6;
  float v7;
  float v8;
  float v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  esl::QuartzPath *v19;
  std::__shared_weak_count *v20;
  _BYTE v21[56];

  v6 = a1->f32[1];
  v7 = a1[1].f32[0] - a1->f32[0];
  v8 = a1[1].f32[1] - v6;
  if (v7 >= v8)
    v9 = a1[1].f32[0] - a1->f32[0];
  else
    v9 = a1[1].f32[1] - v6;
  if (v8 < v7)
    v7 = a1[1].f32[1] - v6;
  if ((float)(v9 / v7) <= 1.5)
  {
    esl::QuartzAffineTransform::QuartzAffineTransform((esl::QuartzAffineTransform *)v21);
    esl::QuartzAffineTransform::translate((esl::QuartzAffineTransform *)v21, a1->f32[0], a1->f32[1]);
    esl::QuartzAffineTransform::scale((esl::QuartzAffineTransform *)v21, a1[1].f32[0] - a1->f32[0], a1[1].f32[1] - a1->f32[1]);
    esl::QuartzAffineTransform::translate((esl::QuartzAffineTransform *)v21, 0.5, 0.5);
    esl::QuartzAffineTransform::rotate((esl::QuartzAffineTransform *)v21, a3 + -1.5708);
    pathFromParameters((uint64_t)&unk_1E4314E10, &v19);
    v10 = v20;
    (*(void (**)(esl::QuartzPath **__return_ptr, esl::QuartzPath *, _BYTE *))(*(_QWORD *)v19 + 120))(&v19, v19, v21);
    v11 = v20;
    *a2 = v19;
    a2[1] = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      v14 = v20;
      if (v20)
      {
        v15 = (unint64_t *)&v20->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
    }
    if (v10)
    {
      v17 = (unint64_t *)&v10->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  else
  {
    grl::PathGenerator::createLegacyRectalloonBodyPath(a1, a2);
  }
}

uint64_t grl::PathGenerator::createLegacyRectalloonBodyPath@<X0>(float32x2_t *a1@<X0>, _QWORD *a2@<X8>)
{
  float32x2_t v4;
  int8x8_t v5;
  float v6;
  float v7;
  _QWORD *v8;
  _QWORD *v9;
  float v10;
  __n128 v11;
  float v12;
  __n128 v13;
  __n128 v14;
  __n128 v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  __n128 v19;
  float v20;
  _BYTE v22[56];

  v4 = vsub_f32(a1[1], *a1);
  v5 = vbic_s8((int8x8_t)v4, (int8x8_t)vcltz_f32(v4));
  if (*(float *)&v5.i32[1] < *(float *)v5.i32)
    v5.i32[0] = v5.i32[1];
  v6 = *(float *)v5.i32 * 0.085;
  v7 = v6 + v6;
  v8 = operator new(0x28uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E42DE030;
  v9 = v8 + 3;
  esl::QuartzPath::QuartzPath((esl::QuartzPath *)(v8 + 3));
  *a2 = v8 + 3;
  a2[1] = v8;
  esl::AffineTransformMakeTranslation(a1->f32[0], a1->f32[1], (uint64_t)v22);
  v10 = a1[1].f32[1] - a1->f32[1];
  if (v10 < 0.0)
    v10 = 0.0;
  (*(void (**)(_QWORD *, _BYTE *, float, float))(v8[3] + 32))(v9, v22, 0.0, v10 - v7);
  v12 = a1->f32[1];
  if ((float)(a1[1].f32[1] - v12) >= 0.0)
    v11.n128_f32[0] = a1[1].f32[1] - v12;
  else
    v11.n128_f32[0] = 0.0;
  (*(void (**)(_QWORD *, _BYTE *, float, float, float, __n128, float, float))(v8[3] + 48))(v9, v22, 0.0, v11.n128_f32[0] - v6, v6, v11, v6 + v6, v11.n128_f32[0]);
  v13.n128_f32[0] = a1[1].f32[0] - a1->f32[0];
  v14.n128_f32[0] = a1[1].f32[1] - a1->f32[1];
  if (v13.n128_f32[0] < 0.0)
    v13.n128_f32[0] = 0.0;
  v13.n128_f32[0] = v13.n128_f32[0] - v7;
  if (v14.n128_f32[0] < 0.0)
    v14.n128_f32[0] = 0.0;
  (*(void (**)(_QWORD *, _BYTE *, __n128, __n128))(v8[3] + 40))(v9, v22, v13, v14);
  v17.n128_f32[0] = a1[1].f32[1] - a1->f32[1];
  if ((float)(a1[1].f32[0] - a1->f32[0]) >= 0.0)
    v16.n128_f32[0] = a1[1].f32[0] - a1->f32[0];
  else
    v16.n128_f32[0] = 0.0;
  if (v17.n128_f32[0] < 0.0)
    v17.n128_f32[0] = 0.0;
  v15.n128_f32[0] = v16.n128_f32[0] - v6;
  (*(void (**)(_QWORD *, _BYTE *, __n128, __n128, __n128, float, float, float))(v8[3] + 48))(v9, v22, v15, v17, v16, v17.n128_f32[0] - v6, v16.n128_f32[0], v17.n128_f32[0] - v7);
  v18.n128_f32[0] = a1[1].f32[0] - a1->f32[0];
  if (v18.n128_f32[0] < 0.0)
    v18.n128_f32[0] = 0.0;
  (*(void (**)(_QWORD *, _BYTE *, __n128, float))(v8[3] + 40))(v9, v22, v18, v6 + v6);
  v19.n128_f32[0] = a1[1].f32[0] - a1->f32[0];
  if (v19.n128_f32[0] < 0.0)
    v19.n128_f32[0] = 0.0;
  (*(void (**)(_QWORD *, _BYTE *, __n128, float, float, float, float, float))(v8[3] + 48))(v9, v22, v19, v6, v19.n128_f32[0] - v6, 0.0, v19.n128_f32[0] - v7, 0.0);
  (*(void (**)(_QWORD *, _BYTE *, float, float))(v8[3] + 40))(v9, v22, v6 + v6, 0.0);
  (*(void (**)(_QWORD *, _BYTE *, float, float, float, float, float, float))(v8[3] + 48))(v9, v22, v6, 0.0, 0.0, v6, 0.0, v6 + v6);
  v20 = a1[1].f32[1] - a1->f32[1];
  if (v20 < 0.0)
    v20 = 0.0;
  (*(void (**)(_QWORD *, _BYTE *, float, float))(v8[3] + 40))(v9, v22, 0.0, v20 - v7);
  return (*(uint64_t (**)(_QWORD *))(v8[3] + 112))(v9);
}

void pathFromParameters(uint64_t a1@<X0>, esl::QuartzPath **a2@<X8>)
{
  CGFloat v4;
  esl::QuartzPath *v5;
  esl::QuartzPath *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  esl::QuartzPath *v15;
  std::__shared_weak_count *v16;
  void *__p[2];
  char v18;
  char *v19[3];

  std::string::basic_string[abi:nn180100]<0>(__p, *(char **)(a1 + 8));
  grl::parseCommandList((char *)__p, v19);
  if (v18 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, *(char **)(a1 + 8));
  grl::pathFromSVGDescription((char *)__p, a2);
  if (v18 < 0)
    operator delete(__p[0]);
  esl::QuartzAffineTransform::QuartzAffineTransform((esl::QuartzAffineTransform *)__p);
  esl::QuartzAffineTransform::scale((esl::QuartzAffineTransform *)__p, *(float *)(a1 + 24), *(float *)(a1 + 28));
  v4 = esl::QuartzAffineTransform::translate((esl::QuartzAffineTransform *)__p, *(float *)(a1 + 16), *(float *)(a1 + 20));
  (*(void (**)(esl::QuartzPath **__return_ptr, esl::QuartzPath *, void **, CGFloat))(*(_QWORD *)*a2 + 120))(&v15, *a2, __p, v4);
  v6 = v15;
  v5 = (esl::QuartzPath *)v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = (std::__shared_weak_count *)a2[1];
  *a2 = v6;
  a2[1] = v5;
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  __p[0] = v19;
  std::vector<grl::PathCommand>::__destroy_vector::operator()[abi:nn180100]((void ***)__p);
}

void grl::PathGenerator::createBalloonTailPath(grl::PathGenerator *this@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  esl::QuartzPath *v13;
  std::__shared_weak_count *v14;
  _BYTE v15[56];

  transformFromMetrics(this, (esl::QuartzAffineTransform *)v15);
  pathFromParameters((uint64_t)&balloonComponentPathDefinitions, &v13);
  v4 = v14;
  (*(void (**)(esl::QuartzPath **__return_ptr, esl::QuartzPath *, _BYTE *))(*(_QWORD *)v13 + 120))(&v13, v13, v15);
  v5 = v14;
  *a2 = v13;
  a2[1] = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = v14;
    if (v14)
    {
      v9 = (unint64_t *)&v14->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  if (v4)
  {
    v11 = (unint64_t *)&v4->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

CGFloat transformFromMetrics@<D0>(const grl::PathLayerMetrics *a1@<X0>, esl::QuartzAffineTransform *a2@<X8>)
{
  esl::QuartzAffineTransform::QuartzAffineTransform(a2);
  esl::QuartzAffineTransform::translate(a2, *((float *)a1 + 13), *((float *)a1 + 14));
  esl::QuartzAffineTransform::translate(a2, *((float *)a1 + 27), *((float *)a1 + 28));
  esl::QuartzAffineTransform::rotate(a2, *((float *)a1 + 24) + -1.5708);
  return esl::QuartzAffineTransform::scale(a2, *((float *)a1 + 26), *((float *)a1 + 26));
}

void grl::PathGenerator::createRectalloonTailPath(grl::PathGenerator *this@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  esl::QuartzPath *v13;
  std::__shared_weak_count *v14;
  _BYTE v15[56];

  transformFromMetrics(this, (esl::QuartzAffineTransform *)v15);
  pathFromParameters((uint64_t)&unk_1E4314DF0, &v13);
  v4 = v14;
  (*(void (**)(esl::QuartzPath **__return_ptr, esl::QuartzPath *, _BYTE *))(*(_QWORD *)v13 + 120))(&v13, v13, v15);
  v5 = v14;
  *a2 = v13;
  a2[1] = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = v14;
    if (v14)
    {
      v9 = (unint64_t *)&v14->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  if (v4)
  {
    v11 = (unint64_t *)&v4->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void grl::PathGenerator::createBalloonDotPath(grl::PathGenerator *this@<X0>, float a2@<S0>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v9;
  esl::QuartzPath *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  const esl::QuartzAffineTransform *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  esl::QuartzPath *v37;
  std::__shared_weak_count *v38;
  _BYTE v39[8];
  __int128 v40;
  __int128 v41;
  __int128 v42;

  v7 = (std::__shared_weak_count *)operator new(0x28uLL);
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE030;
  esl::QuartzPath::QuartzPath((esl::QuartzPath *)&v7[1]);
  transformFromMetrics(this, (esl::QuartzAffineTransform *)v39);
  pathFromParameters((uint64_t)&unk_1E4314DD0, &v37);
  v10 = v37;
  v9 = v38;
  v37 = 0;
  v38 = 0;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  v12 = v38;
  if (v38)
  {
    v13 = (unint64_t *)&v38->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = (*(float (**)(esl::QuartzPath *))(*(_QWORD *)v10 + 104))(v10);
  v17 = v16;
  v19 = v18;
  v21 = v20;
  esl::QuartzAffineTransform::QuartzAffineTransform((esl::QuartzAffineTransform *)&v37);
  v22 = v15 + (float)((float)(v19 - v15) * 0.5);
  v23 = v17 + (float)((float)(v21 - v17) * 0.5);
  esl::QuartzAffineTransform::translate((esl::QuartzAffineTransform *)&v37, v22, v23);
  esl::QuartzAffineTransform::scale((esl::QuartzAffineTransform *)&v37, a2, a2);
  esl::QuartzAffineTransform::translate((esl::QuartzAffineTransform *)&v37, -v22, -v23);
  esl::AffineTransformConcat((esl *)&v37, (const esl::QuartzAffineTransform *)v39, v24, (uint64_t)&v33);
  v40 = v34;
  v41 = v35;
  v42 = v36;
  (*(void (**)(uint64_t *__return_ptr, esl::QuartzPath *, _BYTE *))(*(_QWORD *)v10 + 120))(&v33, v10, v39);
  v25 = v34;
  *a3 = v33;
  a3[1] = v25;
  if (v25)
  {
    v26 = (unint64_t *)(v25 + 8);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
    v28 = (std::__shared_weak_count *)v34;
    if ((_QWORD)v34)
    {
      v29 = (unint64_t *)(v34 + 8);
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
  }
  if (v9)
  {
    v31 = (unint64_t *)&v9->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void grl::PathGenerator::createRectalloonDotPath(grl::PathGenerator *this@<X0>, float a2@<S0>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v9;
  esl::QuartzPath *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  const esl::QuartzAffineTransform *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  esl::QuartzPath *v37;
  std::__shared_weak_count *v38;
  _BYTE v39[8];
  __int128 v40;
  __int128 v41;
  __int128 v42;

  v7 = (std::__shared_weak_count *)operator new(0x28uLL);
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE030;
  esl::QuartzPath::QuartzPath((esl::QuartzPath *)&v7[1]);
  transformFromMetrics(this, (esl::QuartzAffineTransform *)v39);
  pathFromParameters((uint64_t)&unk_1E4314E30, &v37);
  v10 = v37;
  v9 = v38;
  v37 = 0;
  v38 = 0;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  v12 = v38;
  if (v38)
  {
    v13 = (unint64_t *)&v38->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = (*(float (**)(esl::QuartzPath *))(*(_QWORD *)v10 + 104))(v10);
  v17 = v16;
  v19 = v18;
  v21 = v20;
  esl::QuartzAffineTransform::QuartzAffineTransform((esl::QuartzAffineTransform *)&v37);
  v22 = v15 + (float)((float)(v19 - v15) * 0.5);
  v23 = v17 + (float)((float)(v21 - v17) * 0.5);
  esl::QuartzAffineTransform::translate((esl::QuartzAffineTransform *)&v37, v22, v23);
  esl::QuartzAffineTransform::scale((esl::QuartzAffineTransform *)&v37, a2, a2);
  esl::QuartzAffineTransform::translate((esl::QuartzAffineTransform *)&v37, -v22, -v23);
  esl::AffineTransformConcat((esl *)&v37, (const esl::QuartzAffineTransform *)v39, v24, (uint64_t)&v33);
  v40 = v34;
  v41 = v35;
  v42 = v36;
  (*(void (**)(uint64_t *__return_ptr, esl::QuartzPath *, _BYTE *))(*(_QWORD *)v10 + 120))(&v33, v10, v39);
  v25 = v34;
  *a3 = v33;
  a3[1] = v25;
  if (v25)
  {
    v26 = (unint64_t *)(v25 + 8);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
    v28 = (std::__shared_weak_count *)v34;
    if ((_QWORD)v34)
    {
      v29 = (unint64_t *)(v34 + 8);
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
  }
  if (v9)
  {
    v31 = (unint64_t *)&v9->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void std::vector<grl::PathCommand>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<grl::PathCommand>::__clear[abi:nn180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<grl::PathCommand>::__clear[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 32)
  {
    v4 = *(void **)(i - 24);
    if (v4)
    {
      *(_QWORD *)(i - 16) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

_QWORD *grl::SizeGroupToString@<X0>(unsigned int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;

  if (a1 > 9)
    v2 = "";
  else
    v2 = (&off_1E4314E50)[(char)a1];
  return std::string::basic_string[abi:nn180100]<0>(a2, v2);
}

uint64_t grl::SizeGroupMin(grl *this)
{
  return 0;
}

uint64_t grl::SizeGroupMax(grl *this)
{
  return 9;
}

void grl::PathGenerator::createRectanglePath(float *a1@<X0>, _QWORD *a2@<X8>, float a3@<S0>)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  esl::QuartzPath *v8;
  NSObject *v9;
  unint64_t v10;
  int v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v6 = (std::__shared_weak_count *)operator new(0x28uLL);
  v6->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE030;
  v8 = esl::QuartzPath::QuartzPath((esl::QuartzPath *)&v6[1]);
  ((void (*)(esl::QuartzPath *, _QWORD, float, float))v6[1].__on_zero_shared_weak)(v8, 0, *a1 + a3, a1[1]);
  ((void (*)(std::__shared_weak_count *, _QWORD, _QWORD, float, float, float, float, float))v6[1].__vftable[1].__on_zero_shared_weak)(&v6[1], 0, 0, a1[2] - a3, a1[1] + a3, a3, 4.7124, 0.0);
  ((void (*)(std::__shared_weak_count *, _QWORD, _QWORD, float, float, float, float, float))v6[1].__vftable[1].__on_zero_shared_weak)(&v6[1], 0, 0, a1[2] - a3, a1[3] - a3, a3, 0.0, 1.5708);
  ((void (*)(std::__shared_weak_count *, _QWORD, _QWORD, float, float, float, float, float))v6[1].__vftable[1].__on_zero_shared_weak)(&v6[1], 0, 0, *a1 + a3, a1[3] - a3, a3, 1.5708, 3.1416);
  ((void (*)(std::__shared_weak_count *, _QWORD, _QWORD, float, float, float, float, float))v6[1].__vftable[1].__on_zero_shared_weak)(&v6[1], 0, 0, *a1 + a3, a1[1] + a3, a3, 3.1416, 4.7124);
  ((void (*)(std::__shared_weak_count *))v6[1].__vftable[2].__on_zero_shared_weak)(&v6[1]);
  if ((((uint64_t (*)(std::__shared_weak_count *))v6[1].__on_zero_shared)(&v6[1]) & 1) != 0)
  {
    *a2 = v6 + 1;
    a2[1] = v6;
  }
  else
  {
    if (GEOGetGeoResourceLibEaselLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_22_0);
    v9 = GEOGetGeoResourceLibEaselLog::log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
    {
      v11 = 136315650;
      v12 = "!GRL_UNIQUE_NAME(didTriggerAssert)";
      v13 = 2080;
      v14 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/PathGenerator.cpp";
      v15 = 1024;
      v16 = 43;
      _os_log_impl(&dword_19F029000, v9, OS_LOG_TYPE_ERROR, "Failed to create rectangular path.: Assertion with expression - %s : Failed in file - %s line - %i", (uint8_t *)&v11, 0x1Cu);
    }
    *a2 = 0;
    a2[1] = 0;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void grl::PathGenerator::createCirclePath(float *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  esl::QuartzPath *v8;
  NSObject *v9;
  unint64_t v10;
  int v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v6 = (std::__shared_weak_count *)operator new(0x28uLL);
  v6->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE030;
  v8 = esl::QuartzPath::QuartzPath((esl::QuartzPath *)&v6[1]);
  ((void (*)(esl::QuartzPath *, _QWORD, uint64_t, float, float, float, float))v6[1].__vftable[1].__get_deleter)(v8, 0, a2, *a1, a1[1], a1[2], a1[3]);
  ((void (*)(std::__shared_weak_count *))v6[1].__vftable[2].__on_zero_shared_weak)(&v6[1]);
  if ((((uint64_t (*)(std::__shared_weak_count *))v6[1].__on_zero_shared)(&v6[1]) & 1) != 0)
  {
    *a3 = v6 + 1;
    a3[1] = v6;
  }
  else
  {
    if (GEOGetGeoResourceLibEaselLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_22_0);
    v9 = GEOGetGeoResourceLibEaselLog::log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
    {
      v11 = 136315650;
      v12 = "!GRL_UNIQUE_NAME(didTriggerAssert)";
      v13 = 2080;
      v14 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/PathGenerator.cpp";
      v15 = 1024;
      v16 = 56;
      _os_log_impl(&dword_19F029000, v9, OS_LOG_TYPE_ERROR, "Failed to create circular path.: Assertion with expression - %s : Failed in file - %s line - %i", (uint8_t *)&v11, 0x1Cu);
    }
    *a3 = 0;
    a3[1] = 0;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

uint64_t grl::SkipStreamBytes(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  size_t v7;
  void *__p;
  char v10;

  v4 = a1[1];
  v3 = a1[2];
  if (a2)
  {
    v5 = v3 + a2;
    if (v5 >= v4)
      v5 = a1[1];
    a1[2] = v5;
  }
  else
  {
    v6 = v4 - v3;
    if (v6)
    {
      v7 = 0;
      while (*(_BYTE *)(*a1 + v3 + v7))
      {
        if (v6 == ++v7)
          return 1;
      }
      std::string::basic_string[abi:nn180100](&__p, (void *)(*a1 + v3), v7);
      a1[2] += v7 + 1;
      if (v10 < 0)
        operator delete(__p);
    }
  }
  return 1;
}

_QWORD *grl::toString<grl::LayerType>@<X0>(unsigned int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;

  if (a1 > 4)
    v2 = (char *)&str_10_1;
  else
    v2 = (&off_1E4314EA0)[(__int16)a1];
  return std::string::basic_string[abi:nn180100]<0>(a2, v2);
}

_QWORD *grl::toString<grl::ShapeType>@<X0>(unsigned int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;

  if (a1 > 9)
    v2 = (char *)&str_10_1;
  else
    v2 = (&off_1E4314EC8)[(char)a1];
  return std::string::basic_string[abi:nn180100]<0>(a2, v2);
}

uint64_t grl::IconMetrics::size(grl::IconMetrics *this)
{
  return (uint64_t)this + 32;
}

uint64_t grl::IconMetrics::anchor(grl::IconMetrics *this)
{
  return (uint64_t)this + 56;
}

uint64_t grl::IconMetrics::labelingPoint(grl::IconMetrics *this)
{
  return (uint64_t)this + 64;
}

void grl::IconMetrics::setupStretchedIcon(uint64_t a1, grl::IconRenderer *a2, uint64_t a3)
{
  unsigned __int16 v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t LayerRenderer;
  __n128 v10;
  uint64_t v11;
  _QWORD *v12;
  unsigned int v13;
  BOOL v14;
  uint64_t *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unsigned int v20;
  BOOL v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  NSObject *v26;
  const char *v27;
  NSObject *v28;
  NSObject *v29;
  _BYTE *v30;
  unsigned __int16 v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  __n128 v38;
  int v39;
  int v40;
  int v41;
  unsigned int v42;
  unsigned __int16 v43;
  uint64_t v44;
  float32x2_t *v45;
  uint64_t v46;
  float32x2_t v47;
  float32x2_t v48;
  float32x2_t v49;
  unsigned int v50;
  NSObject *v51;
  float v52;
  float v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __n128 v57;
  __int128 v58;
  uint64_t v59;
  unint64_t v60;
  _BYTE v61[12];
  _BYTE buf[12];
  __int16 v63;
  const char *v64;
  __int16 v65;
  int v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v60 = 0;
  if (*((_BYTE *)a2 + 232))
  {
    v5 = 0;
    v6 = 0;
    v59 = 0;
    v7 = (_QWORD *)(a3 + 40);
    v8 = (_QWORD *)(a3 + 72);
    while (1)
    {
      LayerRenderer = grl::IconRenderer::findLayerRenderer((uint64_t)a2, 3, v5);
      if (!LayerRenderer || *(_WORD *)(LayerRenderer + 8) != 3)
      {
LABEL_38:
        v59 = v6;
        goto LABEL_52;
      }
      v11 = *v7;
      if (!*v7)
        goto LABEL_16;
      v12 = v7;
      do
      {
        v13 = *(unsigned __int16 *)(v11 + 28);
        v14 = v13 >= v5;
        if (v13 >= v5)
          v15 = (uint64_t *)v11;
        else
          v15 = (uint64_t *)(v11 + 8);
        if (v14)
          v12 = (_QWORD *)v11;
        v11 = *v15;
      }
      while (*v15);
      if (v12 != v7 && *((unsigned __int16 *)v12 + 14) <= v5)
      {
        v16 = 0;
        v58 = *((_OWORD *)v12 + 2);
      }
      else
      {
LABEL_16:
        v16 = 1;
      }
      v17 = *v8;
      if (!*v8)
        break;
      v18 = LayerRenderer + 16;
      v19 = v8;
      do
      {
        v20 = *(unsigned __int16 *)(v17 + 28);
        v21 = v20 >= v5;
        if (v20 >= v5)
          v22 = (uint64_t *)v17;
        else
          v22 = (uint64_t *)(v17 + 8);
        if (v21)
          v19 = (_QWORD *)v17;
        v17 = *v22;
      }
      while (*v22);
      if (v19 == v8 || ((*((unsigned __int16 *)v19 + 14) <= v5) & ~v16) == 0)
        break;
      v23 = operator new();
      v24 = grl::TextLayerMetrics::TextLayerMetrics(v23, v18, (float32x2_t *)&v58);
      v6 = *(_QWORD *)(v24 + 44);
      if (!v6)
      {
        v59 = *(_QWORD *)(v24 + 44);
        if (GEOGetGeoResourceLibMetricsLog::onceToken != -1)
          dispatch_once(&GEOGetGeoResourceLibMetricsLog::onceToken, &__block_literal_global_16_0);
        v29 = GEOGetGeoResourceLibMetricsLog::log;
        if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibMetricsLog::log, OS_LOG_TYPE_ERROR))
        {
          grl::IconRenderer::description((uint64_t *)buf, a2);
          v30 = v65 >= 0 ? buf : *(_BYTE **)buf;
          *(_DWORD *)v61 = 136315138;
          *(_QWORD *)&v61[4] = v30;
          _os_log_impl(&dword_19F029000, v29, OS_LOG_TYPE_ERROR, "A TextLayer size of 0 was generated. %s", v61, 0xCu);
          if (SHIBYTE(v65) < 0)
            operator delete(*(void **)buf);
        }
        v10 = ((__n128 (*)(uint64_t))*(_QWORD *)(*(_QWORD *)v23 + 8))(v23);
        goto LABEL_52;
      }
      *(_QWORD *)buf = v23;
      v25 = v5;
      grl::IconMetrics::cacheLayerMetrics(a1, 3u, v5, (uint64_t *)buf);
      if (*(_QWORD *)buf)
        (*(void (**)(_QWORD))(**(_QWORD **)buf + 8))(*(_QWORD *)buf);
      ++v5;
      if (v25 >= 4)
        goto LABEL_38;
    }
    v59 = v6;
    if (GEOGetGeoResourceLibMetricsLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibMetricsLog::onceToken, &__block_literal_global_16_0);
    v28 = GEOGetGeoResourceLibMetricsLog::log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibMetricsLog::log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
      v63 = 2080;
      v64 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/IconMetrics.cpp";
      v65 = 1024;
      v66 = 427;
      _os_log_impl(&dword_19F029000, v28, OS_LOG_TYPE_ERROR, "Failed to get text bounds and text baseline for text layer.: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
    }
LABEL_52:
    v31 = 0;
    v32 = 0.0;
    v10.n128_u64[0] = 0;
    v57 = v10;
    do
    {
      v33 = grl::IconRenderer::findLayerRenderer((uint64_t)a2, 2, v31);
      if (v33)
      {
        if (*(_WORD *)(v33 + 8) == 2)
          v34 = v33 + 16;
        else
          v34 = 0;
      }
      else
      {
        v34 = 0;
      }
      v35 = grl::IconRenderer::findLayerRenderer((uint64_t)a2, 2, v31);
      if (!v35)
        break;
      if (*(_WORD *)(v35 + 8) != 2)
        break;
      *(_QWORD *)&v58 = *(_QWORD *)(v35 + 272);
      if (!v34)
        break;
      v36 = operator new();
      *(_QWORD *)v61 = grl::LayerMetrics::LayerMetrics(v36, v34, (float *)&v58, (float *)&v59);
      if (v60 && *(_QWORD *)(v36 + 44) != v60)
      {
        if (GEOGetGeoResourceLibRendererLog::onceToken != -1)
          dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_10_0);
        v37 = GEOGetGeoResourceLibRendererLog::log;
        if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "iconSize == gm::Vector2f::zero() || layerMetrics->size() == iconSize";
          v63 = 2080;
          v64 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/IconMetrics.cpp";
          v65 = 1024;
          v66 = 455;
          _os_log_impl(&dword_19F029000, v37, OS_LOG_TYPE_ERROR, "Found images of different sizes, all images must be the same size for stretched icons.: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
        }
      }
      if (v32 < *(float *)(v36 + 44))
        v32 = *(float *)(v36 + 44);
      v38 = v57;
      if (v57.n128_f32[0] < *(float *)(v36 + 48))
        v38.n128_u32[0] = *(_DWORD *)(v36 + 48);
      v60 = __PAIR64__(v38.n128_u32[0], LODWORD(v32));
      v57 = v38;
      *(float *)(a1 + 16) = gm::Box<float,2>::operator+((float *)(v36 + 12), (float *)(v36 + 52));
      *(_DWORD *)(a1 + 20) = v39;
      *(_DWORD *)(a1 + 24) = v40;
      *(_DWORD *)(a1 + 28) = v41;
      v42 = v31;
      grl::IconMetrics::cacheLayerMetrics(a1, 2u, v31, (uint64_t *)v61);
      if (*(_QWORD *)v61)
        (*(void (**)(_QWORD))(**(_QWORD **)v61 + 8))(*(_QWORD *)v61);
      ++v31;
    }
    while (v42 < 4);
    v43 = 0;
    do
    {
      v44 = grl::IconRenderer::findLayerRenderer((uint64_t)a2, 3, v43);
      if (!v44)
        break;
      v45 = (float32x2_t *)v44;
      if (*(_WORD *)(v44 + 8) != 3)
        break;
      v46 = grl::IconMetrics::privateLayerMetrics(a1, 3, v43);
      if (!v46)
      {
        if (GEOGetGeoResourceLibMetricsLog::onceToken != -1)
          dispatch_once(&GEOGetGeoResourceLibMetricsLog::onceToken, &__block_literal_global_16_0);
        v51 = GEOGetGeoResourceLibMetricsLog::log;
        if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibMetricsLog::log, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
          v63 = 2080;
          v64 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/IconMetrics.cpp";
          v65 = 1024;
          v66 = 473;
          _os_log_impl(&dword_19F029000, v51, OS_LOG_TYPE_ERROR, "Failed to find TextLayerMetrics for a stretched icon.: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
        }
        break;
      }
      v47 = vsub_f32(vadd_f32(*(float32x2_t *)(a1 + 16), vmul_f32(vsub_f32(*(float32x2_t *)(a1 + 24), *(float32x2_t *)(a1 + 16)), (float32x2_t)0x3F0000003F000000)), vmul_f32(*(float32x2_t *)(v46 + 44), (float32x2_t)0x3F0000003F000000));
      if (v45[24].i8[1])
      {
        v48 = v45[23];
        v49 = (float32x2_t)__PAIR64__(v57.n128_u32[0], v47.u32[0]);
        v47.i32[0] = vadd_f32(v47, v48).u32[0];
        v47.i32[1] = vsub_f32(v49, v48).i32[1];
      }
      *(float32x2_t *)(v46 + 52) = v47;
      v50 = v43++;
    }
    while (v50 < 4);
    v52 = ceilf(v32);
    v53 = ceilf(v57.n128_f32[0]);
    v60 = __PAIR64__(LODWORD(v53), LODWORD(v52));
    v54 = grl::IconRenderer::findLayerRenderer((uint64_t)a2, 0, 0);
    if (v54)
    {
      if (!*(_WORD *)(v54 + 8))
      {
        v55 = v54 + 16;
        v56 = operator new();
        *(_QWORD *)buf = grl::LayerMetrics::LayerMetrics(v56, v55, &v60);
        grl::IconMetrics::cacheLayerMetrics(a1, 0, 0, (uint64_t *)buf);
        if (*(_QWORD *)buf)
          (*(void (**)(_QWORD))(**(_QWORD **)buf + 8))(*(_QWORD *)buf);
      }
    }
    if (v60)
    {
      *(float *)(a1 + 32) = v52;
      *(float *)(a1 + 36) = v53;
      *(_QWORD *)(a1 + 40) = 0;
      *(float *)(a1 + 48) = v52 * 0.5;
      *(float *)(a1 + 52) = v53 * 0.5;
      *(_OWORD *)a1 = *(_OWORD *)(a1 + 16);
      *(float *)(a1 + 56) = v52 * 0.5;
      *(float *)(a1 + 60) = v53 * 0.5;
      return;
    }
    if (GEOGetGeoResourceLibMetricsLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibMetricsLog::onceToken, &__block_literal_global_16_0);
    v26 = GEOGetGeoResourceLibMetricsLog::log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibMetricsLog::log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
      v63 = 2080;
      v64 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/IconMetrics.cpp";
      v65 = 1024;
      v66 = 513;
      v27 = "An icon with a size of 0 was generated.: Assertion with expression - %s : Failed in file - %s line - %i";
      goto LABEL_96;
    }
  }
  else
  {
    if (GEOGetGeoResourceLibMetricsLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibMetricsLog::onceToken, &__block_literal_global_16_0);
    v26 = GEOGetGeoResourceLibMetricsLog::log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibMetricsLog::log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
      v63 = 2080;
      v64 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/IconMetrics.cpp";
      v65 = 1024;
      v66 = 411;
      v27 = "No common image size found for images used in stretched icon.: Assertion with expression - %s : Failed in fi"
            "le - %s line - %i";
LABEL_96:
      _os_log_impl(&dword_19F029000, v26, OS_LOG_TYPE_ERROR, v27, buf, 0x1Cu);
    }
  }
}

float gm::Box<float,2>::create(uint64_t a1)
{
  uint64_t v1;
  char v2;
  float v3;
  char v4;
  uint64_t v6;
  uint64_t v7;

  v1 = 0;
  v2 = 1;
  do
  {
    v3 = *(float *)(a1 + 4 * v1) * 0.5;
    *((float *)&v7 + v1) = *((float *)&v7 + v1) - v3;
    v4 = v2;
    *((float *)&v6 + v1) = v3 + *((float *)&v6 + v1);
    v1 = 1;
    v2 = 0;
  }
  while ((v4 & 1) != 0);
  return *(float *)&v7;
}

uint64_t grl::codec::InfoLayerData::toString(grl::codec::InfoLayerData *this)
{
  _QWORD *v2;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v5;
  std::string *v6;
  std::string::size_type v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  const char *v25;
  char *v26;
  std::string *v27;
  std::string::size_type v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  std::string *v54;
  std::string::size_type v55;
  uint64_t v56;
  std::string __p;
  _QWORD v59[2];
  _QWORD v60[11];
  char v61;
  uint64_t v62;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v59);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v60, (uint64_t)"{ ", 2);
  v2 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v60, (uint64_t)"alternateImageFamily: ", 22);
  std::to_string(&__p, *(_DWORD *)this);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v2, (uint64_t)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v5 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v60, (uint64_t)", alternateImageTextLimit: ", 27);
  std::to_string(&__p, *((_DWORD *)this + 1));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = &__p;
  else
    v6 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v7 = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, v7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v8 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v60, (uint64_t)", calloutFillColor: ", 20);
  v9 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v8, (uint64_t)"(", 1);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 8);
  v10 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v9, (uint64_t)&__p, 1);
  v11 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v10, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 9);
  v12 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v11, (uint64_t)&__p, 1);
  v13 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v12, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 10);
  v14 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)&__p, 1);
  v15 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 11);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v15, (uint64_t)&__p, 1);
  v16 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v60, (uint64_t)", calloutHaloColor: ", 20);
  v17 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v16, (uint64_t)"(", 1);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 12);
  v18 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v17, (uint64_t)&__p, 1);
  v19 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 13);
  v20 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)&__p, 1);
  v21 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v20, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 14);
  v22 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v21, (uint64_t)&__p, 1);
  v23 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v22, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 15);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v23, (uint64_t)&__p, 1);
  v24 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v60, (uint64_t)", calloutShape: ", 16);
  v25 = (const char *)&str_10_1;
  if (*((_BYTE *)this + 16) == 1)
    v25 = "Square";
  if (*((_BYTE *)this + 16))
    v26 = (char *)v25;
  else
    v26 = "Circle";
  std::string::basic_string[abi:nn180100]<0>(&__p, v26);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v27 = &__p;
  else
    v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v28 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v28 = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v24, (uint64_t)v27, v28);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v29 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v60, (uint64_t)", calloutTextColor: ", 20);
  v30 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v29, (uint64_t)"(", 1);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 17);
  v31 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v30, (uint64_t)&__p, 1);
  v32 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v31, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 18);
  v33 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v32, (uint64_t)&__p, 1);
  v34 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v33, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 19);
  v35 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v34, (uint64_t)&__p, 1);
  v36 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v35, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 20);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v36, (uint64_t)&__p, 1);
  v37 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v60, (uint64_t)", labelAnnotationIconColor: ", 28);
  v38 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v37, (uint64_t)"(", 1);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 21);
  v39 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v38, (uint64_t)&__p, 1);
  v40 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v39, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 22);
  v41 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v40, (uint64_t)&__p, 1);
  v42 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v41, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 23);
  v43 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v42, (uint64_t)&__p, 1);
  v44 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v43, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 24);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v44, (uint64_t)&__p, 1);
  v45 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v60, (uint64_t)", labelTextColor: ", 18);
  v46 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v45, (uint64_t)"(", 1);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 25);
  v47 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v46, (uint64_t)&__p, 1);
  v48 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v47, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 26);
  v49 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v48, (uint64_t)&__p, 1);
  v50 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v49, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 27);
  v51 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v50, (uint64_t)&__p, 1);
  v52 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v51, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 28);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v52, (uint64_t)&__p, 1);
  v53 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v60, (uint64_t)", scale: ", 9);
  std::to_string(&__p, *((float *)this + 8));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v54 = &__p;
  else
    v54 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v55 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v55 = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v53, (uint64_t)v54, v55);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v60, (uint64_t)" }", 2);
  std::stringbuf::str();
  v59[0] = *MEMORY[0x1E0DE4F50];
  v56 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v59 + *(_QWORD *)(v59[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v60[0] = v56;
  v60[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v61 < 0)
    operator delete((void *)v60[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1A1AF4D64](&v62);
}

uint64_t grl::codec::InfoLayerData::encode@<X0>(grl::codec::InfoLayerData *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD **v5;
  _QWORD *v6;
  grl::Allocator *v7;
  uint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  grl::Allocator *v11;
  uint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  grl::Allocator *v15;
  uint64_t v16;
  _QWORD **v17;
  _QWORD *v18;
  grl::Allocator *v19;
  uint64_t v20;
  _QWORD **v21;
  _QWORD *v22;
  grl::Allocator *v23;
  uint64_t v24;
  uint64_t *v25;
  _QWORD *v26;
  grl::Allocator *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30[3];
  unsigned __int16 v31[8];

  v6 = 0;
  v7 = (grl::Allocator *)grl::Allocator::instance(this);
  v8 = 0;
  v5 = &v6;
  v10 = 0;
  v11 = (grl::Allocator *)grl::Allocator::instance(v7);
  v12 = 0;
  v9 = (uint64_t *)&v10;
  v14 = 0;
  v15 = (grl::Allocator *)grl::Allocator::instance(v11);
  v16 = 0;
  v13 = (uint64_t *)&v14;
  v18 = 0;
  v19 = (grl::Allocator *)grl::Allocator::instance(v15);
  v20 = 0;
  v17 = &v18;
  v22 = 0;
  v23 = (grl::Allocator *)grl::Allocator::instance(v19);
  v24 = 0;
  v21 = &v22;
  v26 = 0;
  v27 = (grl::Allocator *)grl::Allocator::instance(v23);
  v28 = 0;
  v25 = (uint64_t *)&v26;
  v30[0] = 0;
  v30[1] = grl::Allocator::instance(v27);
  v30[2] = 0;
  v29 = v30;
  *(_QWORD *)v31 = ((unint64_t)*(unsigned int *)this << 32) | 0x14;
  std::__tree<std::__value_type<grl::PropertyID,int>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,int>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,int>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,int>>(&v9, v31, (uint64_t)v31);
  *(_QWORD *)v31 = ((unint64_t)*((unsigned int *)this + 1) << 32) | 0x13;
  std::__tree<std::__value_type<grl::PropertyID,int>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,int>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,int>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,int>>(&v9, v31, (uint64_t)v31);
  v31[0] = 34;
  *(_DWORD *)&v31[1] = *((_DWORD *)this + 2);
  std::__tree<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>>(&v25, v31, (uint64_t)v31);
  if (*((_BYTE *)this + 36))
  {
    v31[0] = 27;
    *(_DWORD *)&v31[1] = *((_DWORD *)this + 3);
    std::__tree<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>>(&v25, v31, (uint64_t)v31);
  }
  *(_QWORD *)v31 = ((unint64_t)*((unsigned __int8 *)this + 16) << 32) | 0x25;
  std::__tree<std::__value_type<grl::PropertyID,int>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,int>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,int>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,int>>(&v9, v31, (uint64_t)v31);
  if (*((_BYTE *)this + 37))
  {
    v31[0] = 41;
    *(_DWORD *)&v31[1] = *(_DWORD *)((char *)this + 17);
    std::__tree<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>>(&v25, v31, (uint64_t)v31);
  }
  v31[0] = 44;
  *(_DWORD *)&v31[1] = *(_DWORD *)((char *)this + 21);
  std::__tree<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>>(&v25, v31, (uint64_t)v31);
  v31[0] = 38;
  *(_DWORD *)&v31[1] = *(_DWORD *)((char *)this + 25);
  std::__tree<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>>(&v25, v31, (uint64_t)v31);
  *(_QWORD *)v31 = (unint64_t)*((unsigned int *)this + 8) << 32;
  std::__tree<std::__value_type<grl::PropertyID,float>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,float>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,float>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,float>>(&v13, v31, (uint64_t)v31);
  grl::PropertySet::encode((grl::PropertySet *)&v5, a2);
  std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,std::string>,grl::Allocator>>::destroy((uint64_t)&v29, v30[0]);
  std::__tree<unsigned int,std::less<unsigned int>,geo::StdAllocator<unsigned int,mdm::Allocator>>::destroy((uint64_t)&v25, v26);
  std::__tree<std::__value_type<VKTrafficFeatureType,unsigned long>,std::__map_value_compare<VKTrafficFeatureType,std::__value_type<VKTrafficFeatureType,unsigned long>,std::less<VKTrafficFeatureType>,true>,geo::StdAllocator<std::__value_type<VKTrafficFeatureType,unsigned long>,mdm::Allocator>>::destroy((uint64_t)&v21, v22);
  std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)&v17, v18);
  std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)&v13, v14);
  std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)&v9, v10);
  return std::__tree<unsigned int,std::less<unsigned int>,geo::StdAllocator<unsigned int,mdm::Allocator>>::destroy((uint64_t)&v5, v6);
}

_QWORD *geo::_retain_ptr<__CFDictionary const*,geo::_retain_cf<__CFDictionary const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(_QWORD *a1)
{
  const void *v2;

  *a1 = &off_1E42B4910;
  v2 = (const void *)a1[1];
  if (v2)
    CFRelease(v2);
  return a1;
}

_QWORD *geo::_retain_ptr<__CFDictionary *,geo::_retain_cf<__CFDictionary *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(_QWORD *a1)
{
  const void *v2;

  *a1 = &off_1E42B4810;
  v2 = (const void *)a1[1];
  if (v2)
    CFRelease(v2);
  return a1;
}

void grl::createCFString(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const char *v3;
  CFStringRef v4;
  NSObject *v5;
  uint8_t v6[16];

  if (*(char *)(a1 + 23) >= 0)
    v3 = (const char *)a1;
  else
    v3 = *(const char **)a1;
  v4 = CFStringCreateWithCString(0, v3, 0x8000100u);
  if (!v4)
  {
    if (GEOGetGeoResourceLibCoreFoundationLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibCoreFoundationLog::onceToken, &__block_literal_global_25_0);
    v5 = GEOGetGeoResourceLibCoreFoundationLog::log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibCoreFoundationLog::log, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_19F029000, v5, OS_LOG_TYPE_ERROR, "Failed to create CFString.", v6, 2u);
    }
  }
  *a2 = &off_1E42B48F0;
  a2[1] = v4;
}

void geo::_retain_ptr<__CFDictionary const*,geo::_retain_cf<__CFDictionary const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(_QWORD *a1)
{
  const void *v1;

  *a1 = &off_1E42B4910;
  v1 = (const void *)a1[1];
  if (v1)
    CFRelease(v1);
  JUMPOUT(0x1A1AF4E00);
}

void geo::_retain_ptr<__CFDictionary *,geo::_retain_cf<__CFDictionary *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(_QWORD *a1)
{
  const void *v1;

  *a1 = &off_1E42B4810;
  v1 = (const void *)a1[1];
  if (v1)
    CFRelease(v1);
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *geo::_retain_ptr<__CFNumber const*,geo::_retain_cf<__CFNumber const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(_QWORD *a1)
{
  const void *v2;

  *a1 = &off_1E42B48D0;
  v2 = (const void *)a1[1];
  if (v2)
    CFRelease(v2);
  return a1;
}

void grl::FontKey::createDescriptor(void)const::$_0::operator()(uint64_t a1, grl *a2, grl *a3)
{
  uint64_t (**v6)();
  CFTypeRef cf;
  uint64_t (**v8)();
  void *value;
  uint64_t (**v10)();
  CFMutableDictionaryRef theDict;

  grl::createCFMutableDictionary(&v10);
  grl::createCFNumber(a2, &v8);
  CFDictionarySetValue(theDict, (const void *)*MEMORY[0x1E0CA8328], value);
  grl::createCFNumber(a3, &v6);
  CFDictionarySetValue(theDict, (const void *)*MEMORY[0x1E0CA8318], cf);
  CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)a1 + 8), theDict);
  v6 = &off_1E42B48D0;
  if (cf)
    CFRelease(cf);
  v8 = &off_1E42B48D0;
  if (value)
    CFRelease(value);
  v10 = &off_1E42B4810;
  if (theDict)
    CFRelease(theDict);
}

_QWORD *geo::_retain_ptr<__CTFontDescriptor const*,geo::_retain_cf<__CTFontDescriptor const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(_QWORD *a1)
{
  const void *v2;

  *a1 = &off_1E42B4930;
  v2 = (const void *)a1[1];
  if (v2)
    CFRelease(v2);
  return a1;
}

void geo::_retain_ptr<__CTFontDescriptor const*,geo::_retain_cf<__CTFontDescriptor const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(_QWORD *a1)
{
  const void *v1;

  *a1 = &off_1E42B4930;
  v1 = (const void *)a1[1];
  if (v1)
    CFRelease(v1);
  JUMPOUT(0x1A1AF4E00);
}

void geo::_retain_ptr<__CFNumber const*,geo::_retain_cf<__CFNumber const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(_QWORD *a1)
{
  const void *v1;

  *a1 = &off_1E42B48D0;
  v1 = (const void *)a1[1];
  if (v1)
    CFRelease(v1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t grl::codec::PathLayerData::toString(grl::codec::PathLayerData *this)
{
  _QWORD *v2;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v5;
  std::string *v6;
  std::string::size_type v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  std::string *v17;
  std::string::size_type v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  const char *v28;
  char *v29;
  std::string *v30;
  std::string::size_type v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  char *v36;
  std::string *v37;
  std::string::size_type v38;
  _QWORD *v39;
  std::string *v40;
  std::string::size_type v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  std::string *v51;
  std::string::size_type v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  std::string *v62;
  std::string::size_type v63;
  _QWORD *v64;
  unint64_t v65;
  char *v66;
  std::string *v67;
  std::string::size_type v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  std::string *v78;
  std::string::size_type v79;
  _QWORD *v80;
  std::string *v81;
  std::string::size_type v82;
  _QWORD *v83;
  std::string *v84;
  std::string::size_type v85;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  _QWORD *v92;
  _QWORD *v93;
  _QWORD *v94;
  _QWORD *v95;
  _QWORD *v96;
  std::string *v97;
  std::string::size_type v98;
  _QWORD *v99;
  std::string *v100;
  std::string::size_type v101;
  _QWORD *v102;
  std::string *v103;
  std::string::size_type v104;
  _QWORD *v105;
  std::string *v106;
  std::string::size_type v107;
  uint64_t v108;
  std::string __p;
  _QWORD v111[2];
  _QWORD v112[11];
  char v113;
  uint64_t v114;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v111);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v112, (uint64_t)"{ ", 2);
  v2 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v112, (uint64_t)"blendMode: ", 11);
  grl::toString<esl::BlendMode>(*((unsigned __int8 *)this + 32), &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v2, (uint64_t)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v5 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v112, (uint64_t)", changeHaloAndShadowOrder: ", 28);
  std::to_string(&__p, *((unsigned __int8 *)this + 33));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = &__p;
  else
    v6 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v7 = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, v7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v8 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v112, (uint64_t)", clusterElementHaloColor: ", 27);
  v9 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v8, (uint64_t)"(", 1);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 34);
  v10 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v9, (uint64_t)&__p, 1);
  v11 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v10, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 35);
  v12 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v11, (uint64_t)&__p, 1);
  v13 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v12, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 36);
  v14 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)&__p, 1);
  v15 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 37);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v15, (uint64_t)&__p, 1);
  v16 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v112, (uint64_t)", cornerRadius: ", 16);
  std::to_string(&__p, *((float *)this + 10));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = &__p;
  else
    v17 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v18 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v18 = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v19 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v112, (uint64_t)", fillColor: ", 13);
  v20 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)"(", 1);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 44);
  v21 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v20, (uint64_t)&__p, 1);
  v22 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v21, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 45);
  v23 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v22, (uint64_t)&__p, 1);
  v24 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v23, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 46);
  v25 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v24, (uint64_t)&__p, 1);
  v26 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v25, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 47);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v26, (uint64_t)&__p, 1);
  v27 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v112, (uint64_t)", fillColorSource: ", 19);
  v28 = (const char *)&str_10_1;
  if (*((_BYTE *)this + 48) == 1)
    v28 = "TransitLine";
  if (*((_BYTE *)this + 48))
    v29 = (char *)v28;
  else
    v29 = "IconPack";
  std::string::basic_string[abi:nn180100]<0>(&__p, v29);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v30 = &__p;
  else
    v30 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v31 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v31 = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v27, (uint64_t)v30, v31);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v32 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v112, (uint64_t)", fillSize: ", 12);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v32, (uint64_t)"(", 1);
  v33 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v33, (uint64_t)", ", 2);
  std::ostream::operator<<();
  v34 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v112, (uint64_t)", fillType: ", 12);
  v35 = *((char *)this + 60);
  if (v35 > 2)
    v36 = (char *)&str_10_1;
  else
    v36 = (&off_1E4314F18)[v35];
  std::string::basic_string[abi:nn180100]<0>(&__p, v36);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v37 = &__p;
  else
    v37 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v38 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v38 = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v34, (uint64_t)v37, v38);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v39 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v112, (uint64_t)", gradientAngle: ", 17);
  std::to_string(&__p, *((float *)this + 16));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v40 = &__p;
  else
    v40 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v41 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v41 = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v39, (uint64_t)v40, v41);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v42 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v112, (uint64_t)", gradientEndColor: ", 20);
  v43 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v42, (uint64_t)"(", 1);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 68);
  v44 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v43, (uint64_t)&__p, 1);
  v45 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v44, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 69);
  v46 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v45, (uint64_t)&__p, 1);
  v47 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v46, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 70);
  v48 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v47, (uint64_t)&__p, 1);
  v49 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v48, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 71);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v49, (uint64_t)&__p, 1);
  v50 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v112, (uint64_t)", gradientEndLocation: ", 23);
  std::to_string(&__p, *((float *)this + 18));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v51 = &__p;
  else
    v51 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v52 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v52 = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v50, (uint64_t)v51, v52);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v53 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v112, (uint64_t)", gradientStartColor: ", 22);
  v54 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v53, (uint64_t)"(", 1);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 76);
  v55 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v54, (uint64_t)&__p, 1);
  v56 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v55, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 77);
  v57 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v56, (uint64_t)&__p, 1);
  v58 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v57, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 78);
  v59 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v58, (uint64_t)&__p, 1);
  v60 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v59, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 79);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v60, (uint64_t)&__p, 1);
  v61 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v112, (uint64_t)", gradientStartLocation: ", 25);
  std::to_string(&__p, *((float *)this + 20));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v62 = &__p;
  else
    v62 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v63 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v63 = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v61, (uint64_t)v62, v63);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v64 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v112, (uint64_t)", gradientType: ", 16);
  v65 = *((char *)this + 84);
  if (v65 > 3)
    v66 = (char *)&str_10_1;
  else
    v66 = (&off_1E4314F30)[v65];
  std::string::basic_string[abi:nn180100]<0>(&__p, v66);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v67 = &__p;
  else
    v67 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v68 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v68 = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v64, (uint64_t)v67, v68);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v69 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v112, (uint64_t)", haloColor: ", 13);
  v70 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v69, (uint64_t)"(", 1);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 85);
  v71 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v70, (uint64_t)&__p, 1);
  v72 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v71, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 86);
  v73 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v72, (uint64_t)&__p, 1);
  v74 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v73, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 87);
  v75 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v74, (uint64_t)&__p, 1);
  v76 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v75, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 88);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v76, (uint64_t)&__p, 1);
  v77 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v112, (uint64_t)", haloWeight: ", 14);
  std::to_string(&__p, *((float *)this + 23));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v78 = &__p;
  else
    v78 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v79 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v79 = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v77, (uint64_t)v78, v79);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v80 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v112, (uint64_t)", isClipPath: ", 14);
  std::to_string(&__p, *((unsigned __int8 *)this + 96));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v81 = &__p;
  else
    v81 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v82 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v82 = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v80, (uint64_t)v81, v82);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v83 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v112, (uint64_t)", scale: ", 9);
  std::to_string(&__p, *((float *)this + 25));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v84 = &__p;
  else
    v84 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v85 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v85 = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v83, (uint64_t)v84, v85);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v86 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v112, (uint64_t)", shadowColor: ", 15);
  v87 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v86, (uint64_t)"(", 1);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 104);
  v88 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v87, (uint64_t)&__p, 1);
  v89 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v88, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 105);
  v90 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v89, (uint64_t)&__p, 1);
  v91 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v90, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 106);
  v92 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v91, (uint64_t)&__p, 1);
  v93 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v92, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 107);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v93, (uint64_t)&__p, 1);
  v94 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v112, (uint64_t)", shadowOffset: ", 16);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v94, (uint64_t)"(", 1);
  v95 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v95, (uint64_t)", ", 2);
  std::ostream::operator<<();
  v96 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v112, (uint64_t)", shadowWeight: ", 16);
  std::to_string(&__p, *((float *)this + 29));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v97 = &__p;
  else
    v97 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v98 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v98 = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v96, (uint64_t)v97, v98);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v99 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v112, (uint64_t)", shapeType: ", 13);
  grl::toString<grl::ShapeType>(*((unsigned __int8 *)this + 120), &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v100 = &__p;
  else
    v100 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v101 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v101 = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v99, (uint64_t)v100, v101);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v102 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v112, (uint64_t)", tailDirection: ", 17);
  std::to_string(&__p, *((float *)this + 31));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v103 = &__p;
  else
    v103 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v104 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v104 = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v102, (uint64_t)v103, v104);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v105 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v112, (uint64_t)", visible: ", 11);
  std::to_string(&__p, *((unsigned __int8 *)this + 128));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v106 = &__p;
  else
    v106 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v107 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v107 = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v105, (uint64_t)v106, v107);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v112, (uint64_t)" }", 2);
  std::stringbuf::str();
  v111[0] = *MEMORY[0x1E0DE4F50];
  v108 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v111 + *(_QWORD *)(v111[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v112[0] = v108;
  v112[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v113 < 0)
    operator delete((void *)v112[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1A1AF4D64](&v114);
}

uint64_t grl::codec::PathLayerData::encode@<X0>(grl::codec::PathLayerData *this@<X0>, _QWORD *a2@<X8>)
{
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t *v10;
  _QWORD *v11;
  grl::Allocator *v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  grl::Allocator *v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  grl::Allocator *v20;
  uint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  grl::Allocator *v24;
  uint64_t v25;
  _QWORD **v26;
  _QWORD *v27;
  grl::Allocator *v28;
  uint64_t v29;
  uint64_t *v30;
  _QWORD *v31;
  grl::Allocator *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35[3];
  _BYTE v36[24];

  v11 = 0;
  v12 = (grl::Allocator *)grl::Allocator::instance(this);
  v13 = 0;
  v10 = (uint64_t *)&v11;
  v15 = 0;
  v16 = (grl::Allocator *)grl::Allocator::instance(v12);
  v17 = 0;
  v14 = (uint64_t *)&v15;
  v19 = 0;
  v20 = (grl::Allocator *)grl::Allocator::instance(v16);
  v21 = 0;
  v18 = (uint64_t *)&v19;
  v23 = 0;
  v24 = (grl::Allocator *)grl::Allocator::instance(v20);
  v25 = 0;
  v22 = (uint64_t *)&v23;
  v27 = 0;
  v28 = (grl::Allocator *)grl::Allocator::instance(v24);
  v29 = 0;
  v26 = &v27;
  v31 = 0;
  v32 = (grl::Allocator *)grl::Allocator::instance(v28);
  v33 = 0;
  v30 = (uint64_t *)&v31;
  v35[0] = 0;
  v35[1] = grl::Allocator::instance(v32);
  v35[2] = 0;
  v34 = v35;
  *(_QWORD *)v36 = ((unint64_t)*((unsigned __int8 *)this + 32) << 32) | 8;
  std::__tree<std::__value_type<grl::PropertyID,int>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,int>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,int>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,int>>(&v14, (unsigned __int16 *)v36, (uint64_t)v36);
  if (*((_BYTE *)this + 33))
    v4 = 65548;
  else
    v4 = 12;
  *(_DWORD *)v36 = v4;
  std::__tree<std::__value_type<grl::PropertyID,BOOL>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,BOOL>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,BOOL>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,BOOL>>(&v10, (unsigned __int16 *)v36, (uint64_t)v36);
  strcpy(v36, "/");
  *(_DWORD *)&v36[2] = *(_DWORD *)((char *)this + 34);
  std::__tree<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>>(&v30, (unsigned __int16 *)v36, (uint64_t)v36);
  *(_QWORD *)v36 = ((unint64_t)*((unsigned int *)this + 10) << 32) | 0xD;
  std::__tree<std::__value_type<grl::PropertyID,float>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,float>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,float>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,float>>(&v18, (unsigned __int16 *)v36, (uint64_t)v36);
  *(_WORD *)v36 = 5;
  *(_DWORD *)&v36[2] = *((_DWORD *)this + 11);
  std::__tree<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>>(&v30, (unsigned __int16 *)v36, (uint64_t)v36);
  *(_QWORD *)v36 = ((unint64_t)*((unsigned __int8 *)this + 48) << 32) | 0x23;
  std::__tree<std::__value_type<grl::PropertyID,int>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,int>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,int>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,int>>(&v14, (unsigned __int16 *)v36, (uint64_t)v36);
  *(_WORD *)v36 = 1;
  v5 = *(_QWORD *)((char *)this + 52);
  *(_QWORD *)&v36[4] = v5;
  std::__tree<std::__value_type<grl::PropertyID,gm::Matrix<float,2,1>>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,gm::Matrix<float,2,1>>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,gm::Matrix<float,2,1>>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,gm::Matrix<float,2,1>>>(&v22, (unsigned __int16 *)v36, (uint64_t)v36);
  *(_QWORD *)v36 = ((unint64_t)*((unsigned __int8 *)this + 60) << 32) | 0x12;
  std::__tree<std::__value_type<grl::PropertyID,int>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,int>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,int>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,int>>(&v14, (unsigned __int16 *)v36, (uint64_t)v36);
  *(_QWORD *)v36 = ((unint64_t)*((unsigned int *)this + 16) << 32) | 0x27;
  std::__tree<std::__value_type<grl::PropertyID,float>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,float>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,float>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,float>>(&v18, (unsigned __int16 *)v36, (uint64_t)v36);
  *(_WORD *)v36 = 17;
  *(_DWORD *)&v36[2] = *((_DWORD *)this + 17);
  std::__tree<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>>(&v30, (unsigned __int16 *)v36, (uint64_t)v36);
  *(_QWORD *)v36 = ((unint64_t)*((unsigned int *)this + 18) << 32) | 0x21;
  std::__tree<std::__value_type<grl::PropertyID,float>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,float>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,float>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,float>>(&v18, (unsigned __int16 *)v36, (uint64_t)v36);
  *(_WORD *)v36 = 16;
  *(_DWORD *)&v36[2] = *((_DWORD *)this + 19);
  std::__tree<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>>(&v30, (unsigned __int16 *)v36, (uint64_t)v36);
  *(_QWORD *)v36 = ((unint64_t)*((unsigned int *)this + 20) << 32) | 0x20;
  std::__tree<std::__value_type<grl::PropertyID,float>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,float>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,float>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,float>>(&v18, (unsigned __int16 *)v36, (uint64_t)v36);
  *(_QWORD *)v36 = ((unint64_t)*((unsigned __int8 *)this + 84) << 32) | 0x28;
  std::__tree<std::__value_type<grl::PropertyID,int>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,int>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,int>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,int>>(&v14, (unsigned __int16 *)v36, (uint64_t)v36);
  *(_WORD *)v36 = 6;
  *(_DWORD *)&v36[2] = *(_DWORD *)((char *)this + 85);
  std::__tree<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>>(&v30, (unsigned __int16 *)v36, (uint64_t)v36);
  *(_QWORD *)v36 = ((unint64_t)*((unsigned int *)this + 23) << 32) | 2;
  std::__tree<std::__value_type<grl::PropertyID,float>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,float>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,float>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,float>>(&v18, (unsigned __int16 *)v36, (uint64_t)v36);
  if (*((_BYTE *)this + 96))
    v6 = 65579;
  else
    v6 = 43;
  *(_DWORD *)v36 = v6;
  std::__tree<std::__value_type<grl::PropertyID,BOOL>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,BOOL>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,BOOL>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,BOOL>>(&v10, (unsigned __int16 *)v36, (uint64_t)v36);
  *(_QWORD *)v36 = (unint64_t)*((unsigned int *)this + 25) << 32;
  std::__tree<std::__value_type<grl::PropertyID,float>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,float>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,float>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,float>>(&v18, (unsigned __int16 *)v36, (uint64_t)v36);
  strcpy(v36, "\a");
  *(_DWORD *)&v36[2] = *((_DWORD *)this + 26);
  std::__tree<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>>(&v30, (unsigned __int16 *)v36, (uint64_t)v36);
  *(_WORD *)v36 = 4;
  v7 = *(_QWORD *)((char *)this + 108);
  *(_QWORD *)&v36[4] = v7;
  std::__tree<std::__value_type<grl::PropertyID,gm::Matrix<float,2,1>>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,gm::Matrix<float,2,1>>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,gm::Matrix<float,2,1>>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,gm::Matrix<float,2,1>>>(&v22, (unsigned __int16 *)v36, (uint64_t)v36);
  *(_QWORD *)v36 = ((unint64_t)*((unsigned int *)this + 29) << 32) | 3;
  std::__tree<std::__value_type<grl::PropertyID,float>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,float>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,float>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,float>>(&v18, (unsigned __int16 *)v36, (uint64_t)v36);
  *(_QWORD *)v36 = ((unint64_t)*((unsigned __int8 *)this + 120) << 32) | 0x15;
  std::__tree<std::__value_type<grl::PropertyID,int>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,int>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,int>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,int>>(&v14, (unsigned __int16 *)v36, (uint64_t)v36);
  *(_QWORD *)v36 = ((unint64_t)*((unsigned int *)this + 31) << 32) | 0xE;
  std::__tree<std::__value_type<grl::PropertyID,float>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,float>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,float>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,float>>(&v18, (unsigned __int16 *)v36, (uint64_t)v36);
  if (*((_BYTE *)this + 128))
    v8 = 65551;
  else
    v8 = 15;
  *(_DWORD *)v36 = v8;
  std::__tree<std::__value_type<grl::PropertyID,BOOL>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,BOOL>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,BOOL>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,BOOL>>(&v10, (unsigned __int16 *)v36, (uint64_t)v36);
  grl::PropertySet::encode((grl::PropertySet *)&v10, a2);
  std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,std::string>,grl::Allocator>>::destroy((uint64_t)&v34, v35[0]);
  std::__tree<unsigned int,std::less<unsigned int>,geo::StdAllocator<unsigned int,mdm::Allocator>>::destroy((uint64_t)&v30, v31);
  std::__tree<std::__value_type<VKTrafficFeatureType,unsigned long>,std::__map_value_compare<VKTrafficFeatureType,std::__value_type<VKTrafficFeatureType,unsigned long>,std::less<VKTrafficFeatureType>,true>,geo::StdAllocator<std::__value_type<VKTrafficFeatureType,unsigned long>,mdm::Allocator>>::destroy((uint64_t)&v26, v27);
  std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)&v22, v23);
  std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)&v18, v19);
  std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)&v14, v15);
  return std::__tree<unsigned int,std::less<unsigned int>,geo::StdAllocator<unsigned int,mdm::Allocator>>::destroy((uint64_t)&v10, v11);
}

void grl::PropertySet::encode(grl::PropertySet *this@<X0>, _QWORD *a2@<X8>)
{
  __int16 v4;
  grl::PropertySet *v5;
  grl::PropertySet *v6;
  grl::PropertySet *v7;
  BOOL v8;
  grl::PropertySet *v9;
  grl::PropertySet *v10;
  grl::PropertySet *v11;
  grl::PropertySet *v12;
  grl::PropertySet *v13;
  grl::PropertySet *v14;
  grl::PropertySet *v15;
  grl::PropertySet *v16;
  grl::PropertySet *v17;
  grl::PropertySet *v18;
  grl::PropertySet *v19;
  grl::PropertySet *v20;
  grl::PropertySet *v21;
  grl::PropertySet *v22;
  grl::PropertySet *v23;
  _QWORD *v24;
  char *v25;
  char *v26;
  size_t v27;
  char *v28;
  char *v29;
  void *v30;
  size_t v31;
  char *v32;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  char v36;
  unsigned __int8 v37[4];

  v33 = 0;
  v34 = 0;
  v36 = 0;
  v35 = 0;
  std::vector<unsigned char>::reserve((unint64_t *)&v33, 0x3E8uLL);
  v4 = *((_QWORD *)this + 3) != 0;
  if (*((_QWORD *)this + 7))
    ++v4;
  if (*((_QWORD *)this + 11))
    ++v4;
  if (*((_QWORD *)this + 15))
    ++v4;
  if (*((_QWORD *)this + 19))
    ++v4;
  if (*((_QWORD *)this + 23))
    ++v4;
  if (*((_QWORD *)this + 27))
    ++v4;
  *(_WORD *)v37 = v4;
  geo::obitstream::appendBytes((geo::obitstream *)&v33, (char *)v37, 2);
  if (*((_QWORD *)this + 3))
  {
    *(_WORD *)v37 = 0;
    geo::obitstream::appendBytes((geo::obitstream *)&v33, (char *)v37, 2);
    *(_WORD *)v37 = *((_QWORD *)this + 3);
    geo::obitstream::appendBytes((geo::obitstream *)&v33, (char *)v37, 2);
    v5 = *(grl::PropertySet **)this;
    if (*(grl::PropertySet **)this != (grl::PropertySet *)((char *)this + 8))
    {
      do
      {
        *(_WORD *)v37 = *((_WORD *)v5 + 13);
        geo::obitstream::appendBytes((geo::obitstream *)&v33, (char *)v37, 2);
        v37[0] = *((_BYTE *)v5 + 28);
        geo::obitstream::appendBytes((geo::obitstream *)&v33, (char *)v37, 1);
        v6 = (grl::PropertySet *)*((_QWORD *)v5 + 1);
        if (v6)
        {
          do
          {
            v7 = v6;
            v6 = *(grl::PropertySet **)v6;
          }
          while (v6);
        }
        else
        {
          do
          {
            v7 = (grl::PropertySet *)*((_QWORD *)v5 + 2);
            v8 = *(_QWORD *)v7 == (_QWORD)v5;
            v5 = v7;
          }
          while (!v8);
        }
        v5 = v7;
      }
      while (v7 != (grl::PropertySet *)((char *)this + 8));
    }
  }
  if (*((_QWORD *)this + 7))
  {
    *(_WORD *)v37 = 2;
    geo::obitstream::appendBytes((geo::obitstream *)&v33, (char *)v37, 2);
    *(_WORD *)v37 = *((_QWORD *)this + 7);
    geo::obitstream::appendBytes((geo::obitstream *)&v33, (char *)v37, 2);
    v9 = (grl::PropertySet *)*((_QWORD *)this + 4);
    if (v9 != (grl::PropertySet *)((char *)this + 40))
    {
      do
      {
        *(_WORD *)v37 = *((_WORD *)v9 + 14);
        geo::obitstream::appendBytes((geo::obitstream *)&v33, (char *)v37, 2);
        *(_DWORD *)v37 = *((_DWORD *)v9 + 8);
        geo::obitstream::appendBytes((geo::obitstream *)&v33, (char *)v37, 4);
        v10 = (grl::PropertySet *)*((_QWORD *)v9 + 1);
        if (v10)
        {
          do
          {
            v11 = v10;
            v10 = *(grl::PropertySet **)v10;
          }
          while (v10);
        }
        else
        {
          do
          {
            v11 = (grl::PropertySet *)*((_QWORD *)v9 + 2);
            v8 = *(_QWORD *)v11 == (_QWORD)v9;
            v9 = v11;
          }
          while (!v8);
        }
        v9 = v11;
      }
      while (v11 != (grl::PropertySet *)((char *)this + 40));
    }
  }
  if (*((_QWORD *)this + 11))
  {
    *(_WORD *)v37 = 1;
    geo::obitstream::appendBytes((geo::obitstream *)&v33, (char *)v37, 2);
    *(_WORD *)v37 = *((_QWORD *)this + 11);
    geo::obitstream::appendBytes((geo::obitstream *)&v33, (char *)v37, 2);
    v12 = (grl::PropertySet *)*((_QWORD *)this + 8);
    if (v12 != (grl::PropertySet *)((char *)this + 72))
    {
      do
      {
        *(_WORD *)v37 = *((_WORD *)v12 + 14);
        geo::obitstream::appendBytes((geo::obitstream *)&v33, (char *)v37, 2);
        *(_DWORD *)v37 = *((_DWORD *)v12 + 8);
        geo::obitstream::appendBytes((geo::obitstream *)&v33, (char *)v37, 4);
        v13 = (grl::PropertySet *)*((_QWORD *)v12 + 1);
        if (v13)
        {
          do
          {
            v14 = v13;
            v13 = *(grl::PropertySet **)v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            v14 = (grl::PropertySet *)*((_QWORD *)v12 + 2);
            v8 = *(_QWORD *)v14 == (_QWORD)v12;
            v12 = v14;
          }
          while (!v8);
        }
        v12 = v14;
      }
      while (v14 != (grl::PropertySet *)((char *)this + 72));
    }
  }
  if (*((_QWORD *)this + 15))
  {
    *(_WORD *)v37 = 3;
    geo::obitstream::appendBytes((geo::obitstream *)&v33, (char *)v37, 2);
    *(_WORD *)v37 = *((_QWORD *)this + 15);
    geo::obitstream::appendBytes((geo::obitstream *)&v33, (char *)v37, 2);
    v15 = (grl::PropertySet *)*((_QWORD *)this + 12);
    if (v15 != (grl::PropertySet *)((char *)this + 104))
    {
      do
      {
        *(_WORD *)v37 = *((_WORD *)v15 + 14);
        geo::obitstream::appendBytes((geo::obitstream *)&v33, (char *)v37, 2);
        *(_DWORD *)v37 = *((_DWORD *)v15 + 8);
        geo::obitstream::appendBytes((geo::obitstream *)&v33, (char *)v37, 4);
        *(_DWORD *)v37 = *((_DWORD *)v15 + 9);
        geo::obitstream::appendBytes((geo::obitstream *)&v33, (char *)v37, 4);
        v16 = (grl::PropertySet *)*((_QWORD *)v15 + 1);
        if (v16)
        {
          do
          {
            v17 = v16;
            v16 = *(grl::PropertySet **)v16;
          }
          while (v16);
        }
        else
        {
          do
          {
            v17 = (grl::PropertySet *)*((_QWORD *)v15 + 2);
            v8 = *(_QWORD *)v17 == (_QWORD)v15;
            v15 = v17;
          }
          while (!v8);
        }
        v15 = v17;
      }
      while (v17 != (grl::PropertySet *)((char *)this + 104));
    }
  }
  if (*((_QWORD *)this + 19))
  {
    *(_WORD *)v37 = 4;
    geo::obitstream::appendBytes((geo::obitstream *)&v33, (char *)v37, 2);
    *(_WORD *)v37 = *((_QWORD *)this + 19);
    geo::obitstream::appendBytes((geo::obitstream *)&v33, (char *)v37, 2);
    v18 = (grl::PropertySet *)*((_QWORD *)this + 16);
    if (v18 != (grl::PropertySet *)((char *)this + 136))
    {
      do
      {
        *(_WORD *)v37 = *((_WORD *)v18 + 14);
        geo::obitstream::appendBytes((geo::obitstream *)&v33, (char *)v37, 2);
        *(_DWORD *)v37 = *((_DWORD *)v18 + 8);
        geo::obitstream::appendBytes((geo::obitstream *)&v33, (char *)v37, 4);
        *(_DWORD *)v37 = *((_DWORD *)v18 + 9);
        geo::obitstream::appendBytes((geo::obitstream *)&v33, (char *)v37, 4);
        *(_DWORD *)v37 = *((_DWORD *)v18 + 10);
        geo::obitstream::appendBytes((geo::obitstream *)&v33, (char *)v37, 4);
        *(_DWORD *)v37 = *((_DWORD *)v18 + 11);
        geo::obitstream::appendBytes((geo::obitstream *)&v33, (char *)v37, 4);
        v19 = (grl::PropertySet *)*((_QWORD *)v18 + 1);
        if (v19)
        {
          do
          {
            v20 = v19;
            v19 = *(grl::PropertySet **)v19;
          }
          while (v19);
        }
        else
        {
          do
          {
            v20 = (grl::PropertySet *)*((_QWORD *)v18 + 2);
            v8 = *(_QWORD *)v20 == (_QWORD)v18;
            v18 = v20;
          }
          while (!v8);
        }
        v18 = v20;
      }
      while (v20 != (grl::PropertySet *)((char *)this + 136));
    }
  }
  if (*((_QWORD *)this + 23))
  {
    *(_WORD *)v37 = 5;
    geo::obitstream::appendBytes((geo::obitstream *)&v33, (char *)v37, 2);
    *(_WORD *)v37 = *((_QWORD *)this + 23);
    geo::obitstream::appendBytes((geo::obitstream *)&v33, (char *)v37, 2);
    v21 = (grl::PropertySet *)*((_QWORD *)this + 20);
    if (v21 != (grl::PropertySet *)((char *)this + 168))
    {
      do
      {
        *(_WORD *)v37 = *((_WORD *)v21 + 13);
        geo::obitstream::appendBytes((geo::obitstream *)&v33, (char *)v37, 2);
        v37[0] = *((_BYTE *)v21 + 28);
        geo::obitstream::appendBytes((geo::obitstream *)&v33, (char *)v37, 1);
        v37[0] = *((_BYTE *)v21 + 29);
        geo::obitstream::appendBytes((geo::obitstream *)&v33, (char *)v37, 1);
        v37[0] = *((_BYTE *)v21 + 30);
        geo::obitstream::appendBytes((geo::obitstream *)&v33, (char *)v37, 1);
        v37[0] = *((_BYTE *)v21 + 31);
        geo::obitstream::appendBytes((geo::obitstream *)&v33, (char *)v37, 1);
        v22 = (grl::PropertySet *)*((_QWORD *)v21 + 1);
        if (v22)
        {
          do
          {
            v23 = v22;
            v22 = *(grl::PropertySet **)v22;
          }
          while (v22);
        }
        else
        {
          do
          {
            v23 = (grl::PropertySet *)*((_QWORD *)v21 + 2);
            v8 = *(_QWORD *)v23 == (_QWORD)v21;
            v21 = v23;
          }
          while (!v8);
        }
        v21 = v23;
      }
      while (v23 != (grl::PropertySet *)((char *)this + 168));
    }
  }
  if (*((_QWORD *)this + 27))
  {
    *(_WORD *)v37 = 6;
    geo::obitstream::appendBytes((geo::obitstream *)&v33, (char *)v37, 2);
    *(_WORD *)v37 = *((_QWORD *)this + 27);
    geo::obitstream::appendBytes((geo::obitstream *)&v33, (char *)v37, 2);
    v24 = (_QWORD *)*((_QWORD *)this + 24);
    v25 = (char *)this + 200;
    if (v24 != (_QWORD *)((char *)this + 200))
    {
      do
      {
        *(_WORD *)v37 = *((_WORD *)v24 + 16);
        geo::obitstream::appendBytes((geo::obitstream *)&v33, (char *)v37, 2);
        if (*((char *)v24 + 63) >= 0)
          v26 = (char *)(v24 + 5);
        else
          v26 = (char *)v24[5];
        v27 = strlen(v26);
        geo::obitstream::appendBytes((geo::obitstream *)&v33, v26, v27 + 1);
        v28 = (char *)v24[1];
        if (v28)
        {
          do
          {
            v29 = v28;
            v28 = *(char **)v28;
          }
          while (v28);
        }
        else
        {
          do
          {
            v29 = (char *)v24[2];
            v8 = *(_QWORD *)v29 == (_QWORD)v24;
            v24 = v29;
          }
          while (!v8);
        }
        v24 = v29;
      }
      while (v29 != v25);
    }
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v30 = v33;
  v31 = v34 - v33;
  if (v34 != v33)
  {
    std::vector<unsigned char>::__vallocate[abi:nn180100](a2, v34 - v33);
    v32 = (char *)a2[1];
    memmove(v32, v30, v31);
    a2[1] = &v32[v31];
    v30 = v33;
  }
  if (v30)
  {
    v34 = v30;
    operator delete(v30);
  }
}

void grl::PropertySet::encodePropertyContext(_QWORD *a1@<X8>)
{
  unsigned int v3;
  unint64_t v4;
  void *v6;
  size_t v7;
  char *v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  char v12;
  unsigned __int8 v13;

  v9 = 0;
  v10 = 0;
  v12 = 0;
  v11 = 0;
  v13 = 7;
  geo::obitstream::appendBytes((geo::obitstream *)&v9, (char *)&v13, 1);
  v3 = 0;
  do
  {
    v13 = v3;
    geo::obitstream::appendBytes((geo::obitstream *)&v9, (char *)&v13, 1);
    v4 = 0x41008040401uLL >> (8 * v3);
    if (v3 >= 7)
      LOBYTE(v4) = 0;
    v13 = v4;
    geo::obitstream::appendBytes((geo::obitstream *)&v9, (char *)&v13, 1);
  }
  while (v3++ < 6);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v6 = v9;
  v7 = v10 - v9;
  if (v10 != v9)
  {
    std::vector<unsigned char>::__vallocate[abi:nn180100](a1, v10 - v9);
    v8 = (char *)a1[1];
    memmove(v8, v6, v7);
    a1[1] = &v8[v7];
    v6 = v9;
  }
  if (v6)
  {
    v10 = v6;
    operator delete(v6);
  }
}

_BYTE *grl::IconModifiers::setClusterIcon(_BYTE *this, char a2)
{
  *this = a2;
  return this;
}

uint64_t grl::IconModifiers::setGlyphHidden(uint64_t this, char a2)
{
  *(_BYTE *)(this + 1) = a2;
  return this;
}

uint64_t grl::IconModifiers::setGlyphOnly(uint64_t this, char a2)
{
  *(_BYTE *)(this + 2) = a2;
  return this;
}

uint64_t grl::IconModifiers::setLandmark(uint64_t this, char a2)
{
  *(_BYTE *)(this + 5) = a2;
  return this;
}

uint64_t grl::IconModifiers::setSelected(uint64_t this, char a2)
{
  *(_BYTE *)(this + 6) = a2;
  return this;
}

uint64_t grl::IconModifiers::setUseBalloonShape(uint64_t this, char a2)
{
  *(_BYTE *)(this + 7) = a2;
  return this;
}

float grl::IconModifiers::setOpacity(grl::IconModifiers *this, float a2)
{
  float result;

  result = fminf(fmaxf(a2, 0.0), 1.0);
  *((float *)this + 2) = result;
  return result;
}

uint64_t grl::IconModifiers::setPathScale(uint64_t this, float a2)
{
  if (!*(_BYTE *)(this + 16))
    *(_BYTE *)(this + 16) = 1;
  *(float *)(this + 20) = a2;
  return this;
}

float grl::IconModifiers::setScale(grl::IconModifiers *this, float a2)
{
  float result;

  result = fmaxf(a2, 0.0);
  *((float *)this + 3) = result;
  return result;
}

uint64_t grl::IconModifiers::setTailDirection(uint64_t this, float a2)
{
  if (!*(_BYTE *)(this + 44))
    *(_BYTE *)(this + 44) = 1;
  *(float *)(this + 48) = a2;
  return this;
}

uint64_t grl::IconModifiers::setTransitLineColor(uint64_t result, _DWORD *a2)
{
  if (!*(_BYTE *)(result + 25))
    *(_BYTE *)(result + 25) = 1;
  *(_DWORD *)(result + 26) = *a2;
  return result;
}

uint64_t grl::IconModifiers::setComponent(uint64_t result, char a2)
{
  *(_BYTE *)(result + 24) = a2;
  return result;
}

char *grl::IconModifiers::setClusterIconValues(uint64_t a1, uint64_t a2)
{
  char *result;

  result = (char *)(a1 + 120);
  if (result != (char *)a2)
    return std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>(result, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  return result;
}

_QWORD *grl::IconModifiers::setImageDataProvider(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *result;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)(a1 + 168);
  std::__function::__value_func<std::shared_ptr<esl::QuartzImage> ()(void)>::__value_func[abi:nn180100]((uint64_t)v5, a2);
  std::__function::__value_func<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::swap[abi:nn180100](v5, v2);
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;

  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      v11 = v7 + v9;
      v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      v14 = v4 + v7 + v8 + a3;
      v15 = v14 + v5;
      v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v8 + a3 + v5 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      v18 = v6 + v9 + v17;
      v19 = __ROR8__(v18, 44);
      v20 = v18 + v10;
      v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      v23 = *a2;
      v22 = a2 + 4;
      v24 = v23 - 0x4B6D499041670D8DLL * v5;
      v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v26 = *(v22 - 3);
        v27 = v24 + v15 + v11 + v26;
        v28 = v22[2];
        v29 = v22[3];
        v30 = v22[1];
        v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        v31 = v13 + v20;
        v32 = *(v22 - 2);
        v33 = *(v22 - 1);
        v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        v35 = v34 + v20 + v33;
        v36 = v34 + v26 + v32;
        v15 = v36 + v33;
        v37 = __ROR8__(v36, 44) + v34;
        v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        v16 = v37 + __ROR8__(v35 + v38, 21);
        v39 = v24 + v21 + *v22;
        v20 = v30 + v28 + v39 + v29;
        v21 = __ROR8__(v30 + v28 + v39, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        v13 = v38;
        v25 += 64;
      }
      while (v25);
      v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:nn180100](a2, a3);
  }
  else
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](a2, a3);
  }
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:nn180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = a1[1];
  v3 = 0xB492B66FBE98F273 * *a1;
  v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8);
  v6 = 0x9DDFEA08EB382D69 * ((v4 - 0x3C5A37A36834CED9 * *(_QWORD *)((char *)a1 + a2 - 16)) ^ v5);
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

char *std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 2)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62)
      abort();
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<unsigned int>::__vallocate[abi:nn180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 2;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

char *std::vector<unsigned int>::__vallocate[abi:nn180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    abort();
  result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(4 * a2);
}

char *std::vector<geo::Color<unsigned char,4,(geo::ColorSpace)2>>::__assign_with_size[abi:nn180100]<geo::Color<unsigned char,4,(geo::ColorSpace)2>*,geo::Color<unsigned char,4,(geo::ColorSpace)2>*>(_QWORD *a1, int *a2, int *a3, unint64_t a4)
{
  int *v6;
  uint64_t v8;
  char *result;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  char *v14;
  int v15;
  int64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  int *v20;
  uint64_t j;
  char *v22;
  _DWORD *v23;
  int v24;
  uint64_t i;

  v6 = a2;
  v8 = a1[2];
  result = (char *)*a1;
  if (a4 > (v8 - (uint64_t)result) >> 2)
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 62)
      abort();
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    std::vector<unsigned int>::__vallocate[abi:nn180100](a1, v11);
    v13 = (char *)a1[1];
    v12 = (void **)(a1 + 1);
    result = v13;
    v14 = v13;
    if (v6 != a3)
    {
      v14 = result;
      do
      {
        v15 = *v6++;
        *(_DWORD *)v14 = v15;
        v14 += 4;
      }
      while (v6 != a3);
    }
    goto LABEL_13;
  }
  v18 = (char *)a1[1];
  v12 = (void **)(a1 + 1);
  v17 = v18;
  v19 = (v18 - result) >> 2;
  if (v19 >= a4)
  {
    v14 = result;
    while (v6 != a3)
    {
      for (i = 0; i != 4; ++i)
        v14[i] = *((_BYTE *)v6 + i);
      ++v6;
      v14 += 4;
    }
LABEL_13:
    v16 = v14 - result;
    goto LABEL_24;
  }
  v20 = &a2[v19];
  if (v17 != result)
  {
    do
    {
      for (j = 0; j != 4; ++j)
        result[j] = *((_BYTE *)v6 + j);
      ++v6;
      result += 4;
    }
    while (v6 != v20);
    result = (char *)*v12;
  }
  v22 = result;
  if (v20 != a3)
  {
    v22 = result;
    v23 = result;
    do
    {
      v24 = *v20++;
      *v23++ = v24;
      v22 += 4;
    }
    while (v20 != a3);
  }
  v16 = v22 - result;
LABEL_24:
  *v12 = &result[v16];
  return result;
}

uint64_t grl::PathCommand::expectedFloatCount(int a1)
{
  uint64_t result;

  result = 0;
  switch(a1)
  {
    case 'A':
LABEL_7:
      result = 7;
      break;
    case 'B':
    case 'D':
    case 'E':
    case 'F':
    case 'G':
    case 'I':
    case 'J':
    case 'K':
    case 'N':
    case 'O':
    case 'P':
    case 'R':
    case 'U':
      return result;
    case 'C':
LABEL_8:
      result = 6;
      break;
    case 'H':
    case 'V':
LABEL_5:
      result = 1;
      break;
    case 'L':
    case 'M':
    case 'T':
LABEL_4:
      result = 2;
      break;
    case 'Q':
    case 'S':
LABEL_6:
      result = 4;
      break;
    default:
      switch(a1)
      {
        case 'a':
          goto LABEL_7;
        case 'c':
          goto LABEL_8;
        case 'h':
        case 'v':
          goto LABEL_5;
        case 'l':
        case 'm':
        case 't':
          goto LABEL_4;
        case 'q':
        case 's':
          goto LABEL_6;
        default:
          return result;
      }
  }
  return result;
}

BOOL grl::isSeparatorCharacter(grl *this)
{
  int v2;

  if ((_DWORD)this == 44)
    return 1;
  if ((this & 0x80000000) != 0)
    v2 = __maskrune((__darwin_ct_rune_t)this, 0x4000uLL);
  else
    v2 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * this + 60) & 0x4000;
  return v2 != 0;
}

void grl::parseCommandList(char *a1@<X0>, char **a2@<X8>)
{
  char v3;
  unsigned __int8 *v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  char *v8;
  unsigned int v9;
  _BOOL4 isSeparatorCharacter;
  uint64_t v11;
  int v13;
  int v14;
  char *v15;
  char *v16;
  unint64_t v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  unsigned int v22;
  BOOL v23;
  uint64_t v24;
  unint64_t v26;
  _BYTE *p_str;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  float *v37;
  int v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  NSObject *v47;
  char v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char **v56;
  char *v57;
  void *v58;
  NSObject *v59;
  char v60;
  char **v61;
  int v62;
  uint64_t v63;
  uint8_t buf[8];
  float *v65;
  char *v66;
  unint64_t v67;
  size_t __idx;
  std::string __str;
  uint64_t v70;

  v60 = 0;
  v70 = *MEMORY[0x1E0C80C00];
  v3 = a1[23];
  if (v3 >= 0)
    v4 = (unsigned __int8 *)a1;
  else
    v4 = *(unsigned __int8 **)a1;
  if (v3 >= 0)
    v5 = a1[23];
  else
    v5 = *((_QWORD *)a1 + 1);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v61 = a2;
  while (2)
  {
    v6 = &v4[v5];
    v7 = -v5;
    v8 = (char *)v4;
    do
    {
      v9 = (char)*v4++;
      isSeparatorCharacter = grl::isSeparatorCharacter((grl *)v9);
      v11 = v7 + 1;
      ++v8;
    }
    while (isSeparatorCharacter && v7++ != 0);
    if (v11 == 1)
      return;
    v13 = (char)*(v4 - 1);
    if (v13 <= 96)
    {
      v14 = 77;
      switch(*(v4 - 1))
      {
        case 'A':
          v14 = 65;
          goto LABEL_39;
        case 'B':
        case 'D':
        case 'E':
        case 'F':
        case 'G':
        case 'I':
        case 'J':
        case 'K':
        case 'N':
        case 'O':
        case 'P':
        case 'R':
        case 'U':
          goto LABEL_123;
        case 'C':
          v14 = 67;
          goto LABEL_39;
        case 'H':
          v14 = 72;
          goto LABEL_39;
        case 'L':
          v14 = 76;
          goto LABEL_39;
        case 'M':
          goto LABEL_39;
        case 'Q':
          v14 = 81;
          goto LABEL_39;
        case 'S':
          v14 = 83;
          goto LABEL_39;
        case 'T':
          v14 = 84;
          goto LABEL_39;
        case 'V':
          v14 = 86;
          goto LABEL_39;
        default:
          if (v13 != 90)
            goto LABEL_123;
          goto LABEL_23;
      }
    }
    switch(*(v4 - 1))
    {
      case 'a':
        v14 = 97;
        goto LABEL_39;
      case 'b':
      case 'd':
      case 'e':
      case 'f':
      case 'g':
      case 'i':
      case 'j':
      case 'k':
      case 'n':
      case 'o':
      case 'p':
      case 'r':
      case 'u':
        goto LABEL_123;
      case 'c':
        v14 = 99;
        goto LABEL_39;
      case 'h':
        v14 = 104;
        goto LABEL_39;
      case 'l':
        v14 = 108;
        goto LABEL_39;
      case 'm':
        v14 = 109;
        goto LABEL_39;
      case 'q':
        v14 = 113;
        goto LABEL_39;
      case 's':
        v14 = 115;
        goto LABEL_39;
      case 't':
        v14 = 116;
        goto LABEL_39;
      case 'v':
        v14 = 118;
        goto LABEL_39;
      default:
        if (v13 == 122)
        {
LABEL_23:
          v14 = 90;
LABEL_39:
          v63 = -v11;
          v65 = 0;
          v66 = 0;
          v67 = 0;
          buf[0] = v14;
          if (grl::PathCommand::expectedFloatCount(v14))
          {
            v62 = v14;
            v15 = 0;
            v16 = 0;
            v17 = 0;
            v18 = v4;
            while (1)
            {
              v19 = v18 - 1;
              v20 = v18 - 1;
              do
              {
                v21 = v18;
                v22 = (char)*++v20;
                v23 = grl::isSeparatorCharacter((grl *)v22);
                v18 = v21 + 1;
                ++v19;
              }
              while (v23);
              if (v20 == v6)
              {
                v21 = v6;
                goto LABEL_82;
              }
              v24 = *v20;
              if (v24 > 0x2E || ((1 << v24) & 0x680000000000) == 0)
              {
                if ((v24 & 0x80) != 0)
                  goto LABEL_82;
                if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v24 + 60) & 0x400) == 0)
                  break;
              }
              __idx = 0;
              v26 = v6 - v19;
              if ((unint64_t)(v6 - v19) >= 0x7FFFFFFFFFFFFFF8)
                goto LABEL_127;
              if (v26 > 0x16)
              {
                v28 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v26 | 7) != 0x17)
                  v28 = v26 | 7;
                v29 = v28 + 1;
                p_str = operator new(v28 + 1);
                __str.__r_.__value_.__l.__size_ = v6 - v19;
                __str.__r_.__value_.__r.__words[2] = v29 | 0x8000000000000000;
                __str.__r_.__value_.__r.__words[0] = (std::string::size_type)p_str;
              }
              else
              {
                *((_BYTE *)&__str.__r_.__value_.__s + 23) = (_BYTE)v6 - (_BYTE)v19;
                p_str = &__str;
              }
              v30 = 0;
              do
              {
                p_str[v30] = v20[v30];
                ++v30;
              }
              while (&v20[v30] != v6);
              p_str[v30] = 0;
              v31 = std::stof(&__str, &__idx);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              if (!__idx)
                goto LABEL_83;
              if ((unint64_t)v15 >= v17)
              {
                v33 = (v15 - v16) >> 2;
                v34 = v33 + 1;
                if ((unint64_t)(v33 + 1) >> 62)
                  goto LABEL_127;
                if ((uint64_t)(v17 - (_QWORD)v16) >> 1 > v34)
                  v34 = (uint64_t)(v17 - (_QWORD)v16) >> 1;
                if (v17 - (unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
                  v35 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v35 = v34;
                if (v35)
                  v35 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(v35);
                else
                  v36 = 0;
                v37 = (float *)(v35 + 4 * v33);
                *v37 = v31;
                v32 = (char *)(v37 + 1);
                while (v15 != v16)
                {
                  v38 = *((_DWORD *)v15 - 1);
                  v15 -= 4;
                  *((_DWORD *)v37-- - 1) = v38;
                }
                v17 = v35 + 4 * v36;
                v65 = v37;
                v66 = v32;
                v67 = v17;
                if (v16)
                  operator delete(v16);
                v16 = (char *)v37;
              }
              else
              {
                *(float *)v15 = v31;
                v32 = v15 + 4;
              }
              v66 = v32;
              v18 = &v20[__idx];
              v15 = v32;
            }
            v21 = v20;
LABEL_82:
            v19 = v21;
LABEL_83:
            v4 += v19 - (unsigned __int8 *)v8;
            v5 = v63 - (v19 - (unsigned __int8 *)v8);
            if (v65 == (float *)v15)
            {
              a2 = v61;
              if (qword_1ECE65BC8 != -1)
                dispatch_once(&qword_1ECE65BC8, &__block_literal_global_3);
              v47 = _MergedGlobals_4;
              if (os_log_type_enabled((os_log_t)_MergedGlobals_4, OS_LOG_TYPE_ERROR))
              {
                LODWORD(__str.__r_.__value_.__l.__data_) = 67109120;
                HIDWORD(__str.__r_.__value_.__r.__words[0]) = v62;
                _os_log_impl(&dword_19F029000, v47, OS_LOG_TYPE_ERROR, "Error reading arguments for command: %c", (uint8_t *)&__str, 8u);
              }
              v48 = 0;
              v60 = 1;
              if (!v15)
                goto LABEL_115;
LABEL_114:
              v66 = v15;
              operator delete(v15);
              goto LABEL_115;
            }
            a2 = v61;
            LOBYTE(v14) = v62;
          }
          else
          {
            v5 = v63;
          }
          v40 = (unint64_t)a2[1];
          v39 = (unint64_t)a2[2];
          if (v40 < v39)
          {
            *(_BYTE *)v40 = v14;
            v41 = (char *)(v40 + 32);
            std::vector<float>::vector((_QWORD *)(v40 + 8), (uint64_t)&v65);
            goto LABEL_113;
          }
          v42 = (uint64_t)(v40 - (_QWORD)*a2) >> 5;
          v43 = v42 + 1;
          if ((unint64_t)(v42 + 1) >> 59)
LABEL_127:
            abort();
          v44 = v39 - (_QWORD)*a2;
          if (v44 >> 4 > v43)
            v43 = v44 >> 4;
          if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFE0)
            v45 = 0x7FFFFFFFFFFFFFFLL;
          else
            v45 = v43;
          if (v45)
          {
            if (v45 >> 59)
              std::__throw_bad_array_new_length[abi:nn180100]();
            v46 = (char *)operator new(32 * v45);
          }
          else
          {
            v46 = 0;
          }
          v50 = &v46[32 * v45];
          v49 = &v46[32 * v42];
          *v49 = v14;
          v41 = v49 + 32;
          std::vector<float>::vector((_QWORD *)v49 + 1, (uint64_t)&v65);
          v51 = *a2;
          v52 = a2[1];
          if (v52 == *a2)
          {
            *a2 = v49;
            a2[2] = v50;
            if (v52)
              goto LABEL_112;
          }
          else
          {
            v53 = 0;
            do
            {
              v54 = &v49[v53];
              v55 = &v52[v53];
              *(v54 - 32) = v52[v53 - 32];
              *((_QWORD *)v54 - 2) = 0;
              *((_QWORD *)v54 - 1) = 0;
              *((_QWORD *)v54 - 3) = 0;
              *(_OWORD *)(v54 - 24) = *(_OWORD *)&v52[v53 - 24];
              *((_QWORD *)v54 - 1) = *(_QWORD *)&v52[v53 - 8];
              *((_QWORD *)v55 - 3) = 0;
              *((_QWORD *)v55 - 2) = 0;
              *((_QWORD *)v55 - 1) = 0;
              v53 -= 32;
            }
            while (&v52[v53] != v51);
            v56 = a2;
            v52 = *a2;
            v57 = a2[1];
            *v56 = &v49[v53];
            v56[2] = v50;
            while (v57 != v52)
            {
              v58 = (void *)*((_QWORD *)v57 - 3);
              if (v58)
              {
                *((_QWORD *)v57 - 2) = v58;
                operator delete(v58);
              }
              v57 -= 32;
            }
            a2 = v61;
            if (v52)
LABEL_112:
              operator delete(v52);
          }
LABEL_113:
          a2[1] = v41;
          v48 = 1;
          v15 = (char *)v65;
          if (v65)
            goto LABEL_114;
LABEL_115:
          if ((v48 & 1) == 0)
          {
            if ((v60 & 1) == 0)
            {
              *(_QWORD *)buf = a2;
              std::vector<grl::PathCommand>::__destroy_vector::operator()[abi:nn180100]((void ***)buf);
            }
            return;
          }
          continue;
        }
LABEL_123:
        if (qword_1ECE65BC8 != -1)
          dispatch_once(&qword_1ECE65BC8, &__block_literal_global_3);
        v59 = _MergedGlobals_4;
        if (os_log_type_enabled((os_log_t)_MergedGlobals_4, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_19F029000, v59, OS_LOG_TYPE_ERROR, "Unrecognized character while parsing command type", buf, 2u);
        }
        return;
    }
  }
}

void grl::pathFromSVGDescription(char *a1@<X0>, esl::QuartzPath **a2@<X8>)
{
  grl::Allocator *v3;
  char *v4;
  char *v5;
  float v6;
  float v7;
  float v8;
  float v9;
  int v10;
  std::__shared_weak_count *v11;
  esl::QuartzPath *v12;
  unint64_t *v13;
  unint64_t v14;
  char v15;
  _BOOL4 v16;
  float *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  unsigned int v22;
  float v23;
  float v24;
  float v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  esl::QuartzPath *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  __n128 v35;
  __n128 v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  esl::QuartzPath *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  float *v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  int v55;
  int v56;
  float v57;
  float v58;
  __float2 v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  unint64_t v81;
  unint64_t *v82;
  esl::QuartzPath *v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  unint64_t v98;
  unint64_t *v99;
  esl::QuartzPath *v100;
  unint64_t *v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  float v107;
  float v108;
  float v109;
  float v110;
  unint64_t v111;
  unint64_t *v112;
  esl::QuartzPath *v113;
  unint64_t *v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  unint64_t v126;
  unint64_t *v127;
  esl::QuartzPath *v128;
  unint64_t *v129;
  unint64_t v130;
  unsigned int v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  float v135;
  float v136;
  unint64_t v137;
  unint64_t *v138;
  unint64_t v139;
  char v140;
  unint64_t v141;
  NSObject *v142;
  BOOL v143;
  float v144;
  NSObject *v145;
  unsigned __int8 v146;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  float v155;
  float v156;
  float v157;
  float v158;
  float v159;
  char v160[8];
  void *__p;
  _BYTE *v162;
  char *v163;
  char *v164;
  uint8_t buf[8];
  uint64_t v166;

  v166 = *MEMORY[0x1E0C80C00];
  grl::parseCommandList(a1, &v163);
  grl::make_shared<esl::QuartzPath>(v3, a2);
  v4 = v163;
  v5 = v164;
  if (v163 != v164)
  {
    v146 = 0;
    v6 = 0.0;
    v7 = 0.0;
    v8 = 0.0;
    v9 = 0.0;
    do
    {
      v160[0] = *v4;
      std::vector<float>::vector(&__p, (uint64_t)(v4 + 8));
      v10 = v160[0];
      switch(v160[0])
      {
        case 'A':
LABEL_37:
          v40 = *a2;
          v11 = (std::__shared_weak_count *)a2[1];
          if (v11)
          {
            p_shared_owners = (unint64_t *)&v11->__shared_owners_;
            do
              v42 = __ldxr(p_shared_owners);
            while (__stxr(v42 + 1, p_shared_owners));
          }
          v43 = (char *)__p;
          v44 = v162 - (_BYTE *)__p;
          v45 = grl::PathCommand::expectedFloatCount((char)v10);
          if (v45 <= v44 >> 2)
          {
            v46 = 0;
            v147 = v9;
            v153 = v8;
            do
            {
              v47 = (float *)&v43[4 * v45 * v46];
              v48 = *v47;
              v49 = v47[1];
              v50 = v47[2];
              v51 = v47[3];
              v52 = v47[4];
              grl::pointAtIndex((uint64_t)v160, v45 * v46 + 5);
              if (v48 == 0.0 || v49 == 0.0)
              {
                (*(void (**)(esl::QuartzPath *, _QWORD))(*(_QWORD *)v40 + 40))(v40, 0);
                v8 = v153;
              }
              else
              {
                v150 = v52;
                v55 = v52 > 0.0;
                v156 = fabsf(v48);
                v158 = fabsf(v49);
                v56 = v51 <= 0.0;
                v57 = v53;
                v58 = v54;
                v149 = (float)(v50 / 180.0) * 3.1416;
                v59 = __sincosf_stret(v149);
                v151 = v58;
                v152 = v57;
                v60 = (float)((float)(v59.__cosval * (float)(v57 - v7)) * 0.5)
                    + (float)((float)(v59.__sinval * (float)(v58 - v6)) * 0.5);
                v61 = (float)((float)(v59.__cosval * (float)(v58 - v7)) * 0.5)
                    - (float)((float)((float)(v57 - v7) * v59.__sinval) * 0.5);
                v62 = (float)((float)(v61 * v61) / (float)(v49 * v49))
                    + (float)((float)(v60 * v60) / (float)(v48 * v48));
                v63 = sqrtf(v62);
                if (v62 <= 1.0)
                  v64 = 1.0;
                else
                  v64 = v63;
                v65 = v158 * v64;
                v66 = v156 * v64;
                v67 = sqrtf((float)((float)((float)((float)(v48 * v48) * (float)(v49 * v49))- (float)((float)(v48 * v48) * (float)(v61 * v61)))- (float)((float)(v49 * v49) * (float)(v60 * v60)))/ (float)((float)((float)(v49 * v49) * (float)(v60 * v60))+ (float)((float)(v48 * v48) * (float)(v61 * v61))));
                if (v56 != v55)
                  v67 = -v67;
                v155 = (float)((float)(v61 * v66) / v65) * v67;
                v157 = v156 * v64;
                v68 = (float)(v60 - v155) / v66;
                v154 = (float)((float)(v60 * v65) / v66) * v67;
                v159 = v158 * v64;
                v69 = (float)(v61 - v154) / v65;
                v70 = sqrtf((float)((float)(v68 * v68) + 0.0) + (float)(v69 * v69));
                v71 = (float)((float)(v68 + 0.0) + (float)(v69 * 0.0)) / v70;
                v72 = -1.0;
                v73 = -1.0;
                if (v71 >= -1.0)
                {
                  v73 = (float)((float)(v68 + 0.0) + (float)(v69 * 0.0)) / v70;
                  if (v71 > 1.0)
                    v73 = 1.0;
                }
                v74 = fabsf(acosf(v73));
                if ((float)(v69 - (float)(v68 * 0.0)) < 0.0)
                  v74 = -v74;
                v148 = v74;
                v75 = (float)((float)-v60 - v155) / v157;
                v76 = (float)((float)-v61 - v154) / v159;
                v77 = (float)((float)((float)(v68 * v75) + 0.0) + (float)(v69 * v76))
                    / (float)(v70 * sqrtf((float)((float)(v75 * v75) + 0.0) + (float)(v76 * v76)));
                if (v77 >= -1.0)
                {
                  v72 = v77;
                  if (v77 > 1.0)
                    v72 = 1.0;
                }
                v78 = fabsf(acosf(v72));
                if ((float)((float)(v68 * v76) - (float)(v69 * v75)) < 0.0)
                  v78 = -v78;
                v9 = v147;
                if (v150 <= 0.0 || v78 >= 0.0)
                {
                  if (v78 > 0.0 && v150 <= 0.0)
                    v79 = v78 + -6.2832;
                  else
                    v79 = v78;
                }
                else
                {
                  v79 = v78 + 6.2832;
                }
                v8 = v153;
                esl::QuartzAffineTransform::QuartzAffineTransform((esl::QuartzAffineTransform *)buf);
                esl::QuartzAffineTransform::translate((esl::QuartzAffineTransform *)buf, (float)((float)(v7 + v152) * 0.5)+ (float)((float)(v59.__cosval * v155) - (float)(v59.__sinval * v154)), (float)((float)(v6 + v151) * 0.5)+ (float)((float)(v59.__cosval * v154) + (float)(v59.__sinval * v155)));
                esl::QuartzAffineTransform::rotate((esl::QuartzAffineTransform *)buf, v149);
                esl::QuartzAffineTransform::scale((esl::QuartzAffineTransform *)buf, v157, v159);
                (*(void (**)(esl::QuartzPath *, BOOL, uint8_t *, float, float, float, float, float))(*(_QWORD *)v40 + 72))(v40, v150 > 0.0, buf, 0.0, 0.0, 1.0, v148, v148 + v79);
                v6 = v151;
                v7 = v152;
              }
              ++v46;
              v43 = (char *)__p;
              v81 = (v162 - (_BYTE *)__p) >> 2;
              v45 = grl::PathCommand::expectedFloatCount(v160[0]);
            }
            while (v46 < v81 / v45);
          }
          if (v11)
          {
            v82 = (unint64_t *)&v11->__shared_owners_;
            do
              v28 = __ldaxr(v82);
            while (__stlxr(v28 - 1, v82));
            goto LABEL_119;
          }
          break;
        case 'B':
        case 'D':
        case 'E':
        case 'F':
        case 'G':
        case 'I':
        case 'J':
        case 'K':
        case 'N':
        case 'O':
        case 'P':
        case 'R':
        case 'U':
LABEL_137:
          if (qword_1ECE65BC8 != -1)
            dispatch_once(&qword_1ECE65BC8, &__block_literal_global_3);
          v145 = _MergedGlobals_4;
          if (os_log_type_enabled((os_log_t)_MergedGlobals_4, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_19F029000, v145, OS_LOG_TYPE_ERROR, "Unhandled path command", buf, 2u);
          }
          break;
        case 'C':
LABEL_75:
          v83 = *a2;
          v11 = (std::__shared_weak_count *)a2[1];
          if (v11)
          {
            v84 = (unint64_t *)&v11->__shared_owners_;
            do
              v85 = __ldxr(v84);
            while (__stxr(v85 + 1, v84));
          }
          v86 = v162 - (_BYTE *)__p;
          v87 = grl::PathCommand::expectedFloatCount((char)v10);
          if (v87 <= v86 >> 2)
          {
            v88 = 0;
            do
            {
              v89 = v87 * v88;
              grl::pointAtIndex((uint64_t)v160, v87 * v88);
              v91 = v90;
              v93 = v92;
              grl::pointAtIndex((uint64_t)v160, v89 + 2);
              v9 = v94;
              v8 = v95;
              grl::pointAtIndex((uint64_t)v160, v89 + 4);
              v7 = v96;
              v6 = v97;
              (*(void (**)(esl::QuartzPath *, _QWORD, float, float, float, float, float, float))(*(_QWORD *)v83 + 48))(v83, 0, v91, v93, v9, v8, v96, v97);
              ++v88;
              v98 = (v162 - (_BYTE *)__p) >> 2;
              v87 = grl::PathCommand::expectedFloatCount(v160[0]);
            }
            while (v88 < v98 / v87);
          }
          if (v11)
          {
            v99 = (unint64_t *)&v11->__shared_owners_;
            do
              v28 = __ldaxr(v99);
            while (__stlxr(v28 - 1, v99));
            goto LABEL_119;
          }
          break;
        case 'H':
        case 'V':
LABEL_6:
          v12 = *a2;
          v11 = (std::__shared_weak_count *)a2[1];
          if (v11)
          {
            v13 = (unint64_t *)&v11->__shared_owners_;
            do
              v14 = __ldxr(v13);
            while (__stxr(v14 + 1, v13));
          }
          v15 = v10 - 97;
          v16 = (v10 - 97) < 0x16;
          v17 = (float *)__p;
          v18 = v162 - (_BYTE *)__p;
          v19 = grl::PathCommand::expectedFloatCount((char)v10);
          if (v19 <= v18 >> 2)
          {
            v20 = 0;
            v21 = v10 & 0xDF;
            v22 = v16 & (0x2D1885u >> v15);
            do
            {
              v23 = v17[v19 * v20];
              if (v22)
              {
                v24 = v6 + v23;
                v25 = v7 + v23;
                if (v21 == 72)
                  v7 = v25;
                else
                  v6 = v24;
              }
              else if (v21 == 72)
              {
                v7 = v17[v19 * v20];
              }
              else
              {
                v6 = v17[v19 * v20];
              }
              (*(void (**)(esl::QuartzPath *, _QWORD, float, float))(*(_QWORD *)v12 + 40))(v12, 0, v7, v6);
              ++v20;
              v17 = (float *)__p;
              v26 = (v162 - (_BYTE *)__p) >> 2;
              v19 = grl::PathCommand::expectedFloatCount(v160[0]);
            }
            while (v20 < v26 / v19);
          }
          if (v11)
          {
            v27 = (unint64_t *)&v11->__shared_owners_;
            do
              v28 = __ldaxr(v27);
            while (__stlxr(v28 - 1, v27));
            goto LABEL_119;
          }
          break;
        case 'L':
        case 'M':
LABEL_23:
          v29 = *a2;
          v11 = (std::__shared_weak_count *)a2[1];
          if (v11)
          {
            v30 = (unint64_t *)&v11->__shared_owners_;
            do
              v31 = __ldxr(v30);
            while (__stxr(v31 + 1, v30));
          }
          v32 = v162 - (_BYTE *)__p;
          v33 = grl::PathCommand::expectedFloatCount((char)v10);
          if (v33 <= v32 >> 2)
          {
            v34 = 0;
            do
            {
              grl::pointAtIndex((uint64_t)v160, v33 * v34);
              v7 = v35.n128_f32[0];
              v6 = v36.n128_f32[0];
              if (v34)
              {
                v37 = 5;
              }
              else
              {
                v37 = 4;
                if (((v160[0] - 77) & 0xDF) != 0)
                  v37 = 5;
              }
              (*(void (**)(esl::QuartzPath *, _QWORD, __n128, __n128))(*(_QWORD *)v29 + 8 * v37))(v29, 0, v35, v36);
              ++v34;
              v38 = (v162 - (_BYTE *)__p) >> 2;
              v33 = grl::PathCommand::expectedFloatCount(v160[0]);
            }
            while (v34 < v38 / v33);
          }
          if (v11)
          {
            v39 = (unint64_t *)&v11->__shared_owners_;
            do
              v28 = __ldaxr(v39);
            while (__stlxr(v28 - 1, v39));
            goto LABEL_119;
          }
          break;
        case 'Q':
LABEL_85:
          v100 = *a2;
          v11 = (std::__shared_weak_count *)a2[1];
          if (v11)
          {
            v101 = (unint64_t *)&v11->__shared_owners_;
            do
              v102 = __ldxr(v101);
            while (__stxr(v102 + 1, v101));
          }
          v103 = v162 - (_BYTE *)__p;
          v104 = grl::PathCommand::expectedFloatCount((char)v10);
          if (v104 <= v103 >> 2)
          {
            v105 = 0;
            do
            {
              v106 = v104 * v105;
              grl::pointAtIndex((uint64_t)v160, v104 * v105);
              v9 = v107;
              v8 = v108;
              grl::pointAtIndex((uint64_t)v160, v106 + 2);
              v7 = v109;
              v6 = v110;
              (*(void (**)(esl::QuartzPath *, _QWORD))(*(_QWORD *)v100 + 56))(v100, 0);
              ++v105;
              v111 = (v162 - (_BYTE *)__p) >> 2;
              v104 = grl::PathCommand::expectedFloatCount(v160[0]);
            }
            while (v105 < v111 / v104);
          }
          if (v11)
          {
            v112 = (unint64_t *)&v11->__shared_owners_;
            do
              v28 = __ldaxr(v112);
            while (__stlxr(v28 - 1, v112));
            goto LABEL_119;
          }
          break;
        case 'S':
LABEL_95:
          v113 = *a2;
          v11 = (std::__shared_weak_count *)a2[1];
          if (v11)
          {
            v114 = (unint64_t *)&v11->__shared_owners_;
            do
              v115 = __ldxr(v114);
            while (__stxr(v115 + 1, v114));
          }
          if (((v146 - 67) >> 4) & 0xFC | (16 * (v146 - 67)))
          {
            v9 = v7;
            v8 = v6;
          }
          v116 = v162 - (_BYTE *)__p;
          v117 = grl::PathCommand::expectedFloatCount((char)v10);
          if (v117 <= v116 >> 2)
          {
            v118 = 0;
            do
            {
              v119 = v117 * v118;
              v120 = v7 + (float)(v7 - v9);
              v121 = v6 + (float)(v6 - v8);
              grl::pointAtIndex((uint64_t)v160, v117 * v118);
              v9 = v122;
              v8 = v123;
              grl::pointAtIndex((uint64_t)v160, v119 + 2);
              v7 = v124;
              v6 = v125;
              (*(void (**)(esl::QuartzPath *, _QWORD, float, float, float, float, float, float))(*(_QWORD *)v113 + 48))(v113, 0, v120, v121, v9, v8, v124, v125);
              ++v118;
              v126 = (v162 - (_BYTE *)__p) >> 2;
              v117 = grl::PathCommand::expectedFloatCount(v160[0]);
            }
            while (v118 < v126 / v117);
          }
          if (v11)
          {
            v127 = (unint64_t *)&v11->__shared_owners_;
            do
              v28 = __ldaxr(v127);
            while (__stlxr(v28 - 1, v127));
            goto LABEL_119;
          }
          break;
        case 'T':
LABEL_107:
          v128 = *a2;
          v11 = (std::__shared_weak_count *)a2[1];
          if (v11)
          {
            v129 = (unint64_t *)&v11->__shared_owners_;
            do
              v130 = __ldxr(v129);
            while (__stxr(v130 + 1, v129));
          }
          v131 = v146 - 81;
          if (v131 > 0x23 || ((1 << v131) & 0x900000009) == 0)
          {
            v9 = v7;
            v8 = v6;
          }
          v132 = v162 - (_BYTE *)__p;
          v133 = grl::PathCommand::expectedFloatCount((char)v10);
          if (v133 <= v132 >> 2)
          {
            v134 = 0;
            do
            {
              v9 = v7 + (float)(v7 - v9);
              v8 = v6 + (float)(v6 - v8);
              grl::pointAtIndex((uint64_t)v160, v133 * v134);
              v7 = v135;
              v6 = v136;
              (*(void (**)(esl::QuartzPath *, _QWORD, float, float, float, float))(*(_QWORD *)v128 + 56))(v128, 0, v9, v8, v135, v136);
              ++v134;
              v137 = (v162 - (_BYTE *)__p) >> 2;
              v133 = grl::PathCommand::expectedFloatCount(v160[0]);
            }
            while (v134 < v137 / v133);
          }
          if (v11)
          {
            v138 = (unint64_t *)&v11->__shared_owners_;
            do
              v28 = __ldaxr(v138);
            while (__stlxr(v28 - 1, v138));
LABEL_119:
            if (!v28)
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v11);
            }
          }
          break;
        default:
          switch(v160[0])
          {
            case 'a':
              goto LABEL_37;
            case 'b':
            case 'd':
            case 'e':
            case 'f':
            case 'g':
            case 'i':
            case 'j':
            case 'k':
            case 'n':
            case 'o':
            case 'p':
            case 'r':
            case 'u':
              goto LABEL_137;
            case 'c':
              goto LABEL_75;
            case 'h':
            case 'v':
              goto LABEL_6;
            case 'l':
            case 'm':
              goto LABEL_23;
            case 'q':
              goto LABEL_85;
            case 's':
              goto LABEL_95;
            case 't':
              goto LABEL_107;
            default:
              if (v160[0] != 90)
                goto LABEL_137;
              (*(void (**)(esl::QuartzPath *))(*(_QWORD *)*a2 + 112))(*a2);
              v7 = (*(float (**)(esl::QuartzPath *))(*(_QWORD *)*a2 + 96))(*a2);
              v6 = v144;
              v9 = v7;
              v8 = v144;
              break;
          }
          break;
      }
      v139 = (v162 - (_BYTE *)__p) >> 2;
      v140 = v160[0];
      v141 = v139 % grl::PathCommand::expectedFloatCount(v160[0]);
      if (v141)
      {
        if (qword_1ECE65BC8 != -1)
          dispatch_once(&qword_1ECE65BC8, &__block_literal_global_3);
        v142 = _MergedGlobals_4;
        if (os_log_type_enabled((os_log_t)_MergedGlobals_4, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v160[0];
          _os_log_impl(&dword_19F029000, v142, OS_LOG_TYPE_ERROR, "Incorrect number of arguments for command: %c", buf, 8u);
        }
      }
      else
      {
        v146 = v140;
      }
      if (__p)
      {
        v162 = __p;
        operator delete(__p);
      }
      v4 += 32;
      if (v141)
        v143 = 1;
      else
        v143 = v4 == v5;
    }
    while (!v143);
  }
  *(_QWORD *)buf = &v163;
  std::vector<grl::PathCommand>::__destroy_vector::operator()[abi:nn180100]((void ***)buf);
}

esl::QuartzPath *grl::make_shared<esl::QuartzPath>@<X0>(grl::Allocator *a1@<X0>, esl::QuartzPath **a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  esl::QuartzPath *result;

  v3 = grl::Allocator::instance(a1);
  v4 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3 + 16))(v3, 48, 8);
  *v4 = &off_1E428A140;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = v3;
  result = esl::QuartzPath::QuartzPath((esl::QuartzPath *)(v4 + 4));
  *a2 = result;
  a2[1] = (esl::QuartzPath *)v4;
  return result;
}

os_log_t ___ZL26GEOGetGeoResourceLibSVGLogv_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.VectorKit.GeoResourceLib", "SVG");
  _MergedGlobals_4 = (uint64_t)result;
  return result;
}

_QWORD *std::vector<float>::vector(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  size_t v5;
  char *v6;
  uint64_t v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(const void **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v5 = v3 - *(_QWORD *)a2;
  if (v3 != *(_QWORD *)a2)
  {
    if (v3 - *(_QWORD *)a2 < 0)
      abort();
    v6 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(v5 >> 2);
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[4 * v7];
    memmove(v6, v4, v5);
    a1[1] = &v6[v5];
  }
  return a1;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(unint64_t a1)
{
  if (a1 >> 62)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(4 * a1);
}

void grl::pointAtIndex(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  int v3;
  const char *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (a2 + 1 >= (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 2))
  {
    if (qword_1ECE65BC8 != -1)
      dispatch_once(&qword_1ECE65BC8, &__block_literal_global_3);
    v2 = _MergedGlobals_4;
    if (os_log_type_enabled((os_log_t)_MergedGlobals_4, OS_LOG_TYPE_ERROR))
    {
      v3 = 136315650;
      v4 = "!GRL_UNIQUE_NAME(didTriggerAssert)";
      v5 = 2080;
      v6 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/SVGParser.cpp";
      v7 = 1024;
      v8 = 208;
      _os_log_impl(&dword_19F029000, v2, OS_LOG_TYPE_ERROR, "Invalid float index: Assertion with expression - %s : Failed in file - %s line - %i", (uint8_t *)&v3, 0x1Cu);
    }
  }
}

void std::__shared_ptr_emplace<esl::QuartzPath,geo::StdAllocator<esl::QuartzPath,grl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E428A140;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<esl::QuartzPath,geo::StdAllocator<esl::QuartzPath,grl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E428A140;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<esl::QuartzPath,geo::StdAllocator<esl::QuartzPath,grl::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 32))(a1 + 32);
}

uint64_t std::__shared_ptr_emplace<esl::QuartzPath,geo::StdAllocator<esl::QuartzPath,grl::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a1, 48);
}

void grl::codec::IconData::encode(grl::codec::IconData *this@<X0>, _QWORD *a2@<X8>)
{
  grl::codec::IconData *v4;
  grl::codec::IconData *v5;
  grl::codec::IconData *v6;
  BOOL v7;
  grl::codec::IconData *v8;
  grl::codec::IconData *v9;
  grl::codec::IconData *v10;
  grl::codec::IconData *v11;
  grl::codec::IconData *v12;
  grl::codec::IconData *v13;
  grl::codec::IconData *v14;
  grl::codec::IconData *v15;
  grl::codec::IconData *v16;
  void *v17;
  size_t v18;
  char *v19;
  void *__p;
  _BYTE *v21;
  _BYTE *v22;
  _BYTE *v23;
  uint64_t v24;
  char v25;
  unsigned __int8 v26[4];

  v22 = 0;
  v23 = 0;
  v25 = 0;
  v24 = 0;
  std::vector<unsigned char>::reserve((unint64_t *)&v22, 0x3E8uLL);
  LOBYTE(__p) = *((_QWORD *)this + 3);
  geo::obitstream::appendBytes((geo::obitstream *)&v22, (char *)&__p, 1);
  v4 = *(grl::codec::IconData **)this;
  if (*(grl::codec::IconData **)this != (grl::codec::IconData *)((char *)this + 8))
  {
    do
    {
      LOWORD(__p) = *((_WORD *)v4 + 14);
      geo::obitstream::appendBytes((geo::obitstream *)&v22, (char *)&__p, 2);
      LODWORD(__p) = *((_DWORD *)v4 + 8);
      geo::obitstream::appendBytes((geo::obitstream *)&v22, (char *)&__p, 4);
      LODWORD(__p) = *((_DWORD *)v4 + 9);
      geo::obitstream::appendBytes((geo::obitstream *)&v22, (char *)&__p, 4);
      LODWORD(__p) = *((_DWORD *)v4 + 10);
      geo::obitstream::appendBytes((geo::obitstream *)&v22, (char *)&__p, 4);
      v5 = (grl::codec::IconData *)*((_QWORD *)v4 + 1);
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = *(grl::codec::IconData **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (grl::codec::IconData *)*((_QWORD *)v4 + 2);
          v7 = *(_QWORD *)v6 == (_QWORD)v4;
          v4 = v6;
        }
        while (!v7);
      }
      v4 = v6;
    }
    while (v6 != (grl::codec::IconData *)((char *)this + 8));
  }
  LOBYTE(__p) = *((_BYTE *)this + 184)
              + *((_BYTE *)this + 176)
              + *((_BYTE *)this + 32)
              + *((_BYTE *)this + 112)
              + *((_DWORD *)this + 36);
  geo::obitstream::appendBytes((geo::obitstream *)&v22, (char *)&__p, 1);
  v8 = (grl::codec::IconData *)*((_QWORD *)this + 19);
  if (v8 != (grl::codec::IconData *)((char *)this + 160))
  {
    do
    {
      LOWORD(__p) = 1;
      geo::obitstream::appendBytes((geo::obitstream *)&v22, (char *)&__p, 2);
      LOWORD(__p) = *((_WORD *)v8 + 16);
      geo::obitstream::appendBytes((geo::obitstream *)&v22, (char *)&__p, 2);
      grl::codec::PathLayerData::encode((grl::codec::IconData *)((char *)v8 + 40), &__p);
      *(_DWORD *)v26 = (_DWORD)v21 - (_DWORD)__p;
      geo::obitstream::appendBytes((geo::obitstream *)&v22, (char *)v26, 4);
      geo::obitstream::appendBytes((geo::obitstream *)&v22, (char *)__p, v21 - (_BYTE *)__p);
      if (__p)
      {
        v21 = __p;
        operator delete(__p);
      }
      v9 = (grl::codec::IconData *)*((_QWORD *)v8 + 1);
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = *(grl::codec::IconData **)v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (grl::codec::IconData *)*((_QWORD *)v8 + 2);
          v7 = *(_QWORD *)v10 == (_QWORD)v8;
          v8 = v10;
        }
        while (!v7);
      }
      v8 = v10;
    }
    while (v10 != (grl::codec::IconData *)((char *)this + 160));
  }
  if (*((_BYTE *)this + 32))
  {
    LOWORD(__p) = 0;
    geo::obitstream::appendBytes((geo::obitstream *)&v22, (char *)&__p, 2);
    LOWORD(__p) = 0;
    geo::obitstream::appendBytes((geo::obitstream *)&v22, (char *)&__p, 2);
    grl::codec::ColorLayerData::encode((grl::codec::IconData *)((char *)this + 40), &__p);
    *(_DWORD *)v26 = (_DWORD)v21 - (_DWORD)__p;
    geo::obitstream::appendBytes((geo::obitstream *)&v22, (char *)v26, 4);
    geo::obitstream::appendBytes((geo::obitstream *)&v22, (char *)__p, v21 - (_BYTE *)__p);
    if (__p)
    {
      v21 = __p;
      operator delete(__p);
    }
  }
  v11 = (grl::codec::IconData *)*((_QWORD *)this + 15);
  if (v11 != (grl::codec::IconData *)((char *)this + 128))
  {
    do
    {
      LOWORD(__p) = 2;
      geo::obitstream::appendBytes((geo::obitstream *)&v22, (char *)&__p, 2);
      LOWORD(__p) = *((_WORD *)v11 + 16);
      geo::obitstream::appendBytes((geo::obitstream *)&v22, (char *)&__p, 2);
      grl::codec::ImageLayerData::encode((grl::codec::IconData *)((char *)v11 + 40), &__p);
      *(_DWORD *)v26 = (_DWORD)v21 - (_DWORD)__p;
      geo::obitstream::appendBytes((geo::obitstream *)&v22, (char *)v26, 4);
      geo::obitstream::appendBytes((geo::obitstream *)&v22, (char *)__p, v21 - (_BYTE *)__p);
      if (__p)
      {
        v21 = __p;
        operator delete(__p);
      }
      v12 = (grl::codec::IconData *)*((_QWORD *)v11 + 1);
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = *(grl::codec::IconData **)v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (grl::codec::IconData *)*((_QWORD *)v11 + 2);
          v7 = *(_QWORD *)v13 == (_QWORD)v11;
          v11 = v13;
        }
        while (!v7);
      }
      v11 = v13;
    }
    while (v13 != (grl::codec::IconData *)((char *)this + 128));
  }
  v14 = (grl::codec::IconData *)*((_QWORD *)this + 11);
  if (v14 != (grl::codec::IconData *)((char *)this + 96))
  {
    do
    {
      LOWORD(__p) = 3;
      geo::obitstream::appendBytes((geo::obitstream *)&v22, (char *)&__p, 2);
      LOWORD(__p) = *((_WORD *)v14 + 16);
      geo::obitstream::appendBytes((geo::obitstream *)&v22, (char *)&__p, 2);
      grl::codec::TextLayerData::encode((grl::codec::IconData *)((char *)v14 + 40), &__p);
      *(_DWORD *)v26 = (_DWORD)v21 - (_DWORD)__p;
      geo::obitstream::appendBytes((geo::obitstream *)&v22, (char *)v26, 4);
      geo::obitstream::appendBytes((geo::obitstream *)&v22, (char *)__p, v21 - (_BYTE *)__p);
      if (__p)
      {
        v21 = __p;
        operator delete(__p);
      }
      v15 = (grl::codec::IconData *)*((_QWORD *)v14 + 1);
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = *(grl::codec::IconData **)v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (grl::codec::IconData *)*((_QWORD *)v14 + 2);
          v7 = *(_QWORD *)v16 == (_QWORD)v14;
          v14 = v16;
        }
        while (!v7);
      }
      v14 = v16;
    }
    while (v16 != (grl::codec::IconData *)((char *)this + 96));
  }
  if (*((_BYTE *)this + 184))
  {
    LOWORD(__p) = 4;
    geo::obitstream::appendBytes((geo::obitstream *)&v22, (char *)&__p, 2);
    LOWORD(__p) = 0;
    geo::obitstream::appendBytes((geo::obitstream *)&v22, (char *)&__p, 2);
    grl::codec::InfoLayerData::encode((grl::codec::IconData *)((char *)this + 188), &__p);
    *(_DWORD *)v26 = (_DWORD)v21 - (_DWORD)__p;
    geo::obitstream::appendBytes((geo::obitstream *)&v22, (char *)v26, 4);
    geo::obitstream::appendBytes((geo::obitstream *)&v22, (char *)__p, v21 - (_BYTE *)__p);
    if (__p)
    {
      v21 = __p;
      operator delete(__p);
    }
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v17 = v22;
  v18 = v23 - v22;
  if (v23 != v22)
  {
    std::vector<unsigned char>::__vallocate[abi:nn180100](a2, v23 - v22);
    v19 = (char *)a2[1];
    memmove(v19, v17, v18);
    a2[1] = &v19[v18];
    v17 = v22;
  }
  if (v17)
  {
    v23 = v17;
    operator delete(v17);
  }
}

BOOL grl::codec::IconData::requiresFonts(uint64_t a1, uint64_t a2, grl::IconModifiers *a3)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v7[0] = &off_1E42D9440;
  v7[1] = a2;
  v8 = v7;
  grl::codec::IconData::forEachTextLayer(a1, a3, (uint64_t)v7);
  v4 = v8;
  if (v8 == v7)
  {
    v5 = 4;
    v4 = v7;
    goto LABEL_5;
  }
  if (v8)
  {
    v5 = 5;
LABEL_5:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  return *(_QWORD *)(a2 + 24) != 0;
}

grl::codec::ColorLayerData *grl::codec::IconData::colorLayer@<X0>(grl::codec::IconData *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5;
  grl::codec::ColorLayerData *result;

  if (!*((_BYTE *)this + 32))
    return grl::codec::ColorLayerData::ColorLayerData((grl::codec::ColorLayerData *)a2);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *((_QWORD *)this + 8);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = v5;
  result = (grl::codec::ColorLayerData *)std::vector<grl::LayerStyle,geo::StdAllocator<grl::LayerStyle,grl::Allocator>>::__init_with_size[abi:nn180100]<grl::LayerStyle*,grl::LayerStyle*>(a2, *((_BYTE **)this + 5), *((_BYTE **)this + 6), *((_QWORD *)this + 6) - *((_QWORD *)this + 5));
  *(_BYTE *)(a2 + 32) = *((_BYTE *)this + 72);
  *(_DWORD *)(a2 + 33) = *(_DWORD *)((char *)this + 73);
  *(_DWORD *)(a2 + 40) = *((_DWORD *)this + 20);
  *(_WORD *)(a2 + 44) = *((_WORD *)this + 42);
  return result;
}

_QWORD *std::__function::__value_func<std::shared_ptr<esl::QuartzImage> ()(void)>::operator=[abi:nn180100](_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (_QWORD *)a1[3];
  a1[3] = 0;
  if (v4 == a1)
  {
    v5 = 4;
    v4 = a1;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = *(_QWORD *)(a2 + 24);
  if (v6)
  {
    if (v6 == a2)
    {
      a1[3] = a1;
      (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v6;
      *(_QWORD *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

grl::IconRenderer *std::unique_ptr<grl::IconRenderer>::reset[abi:nn180100](grl::IconRenderer **a1, grl::IconRenderer *a2)
{
  grl::IconRenderer *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    grl::IconRenderer::~IconRenderer(result);
    JUMPOUT(0x1A1AF4E00);
  }
  return result;
}

void std::__shared_ptr_emplace<grl::IconImage>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E58B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<grl::IconImage>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E58B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__function::__func<grl::codec::IconData::requiresFonts(std::set<std::string,std::less<std::string>,geo::StdAllocator<std::string,grl::Allocator>> &,grl::IconModifiers const&)::$_0,std::allocator<grl::codec::IconData::requiresFonts(std::set<std::string,std::less<std::string>,geo::StdAllocator<std::string,grl::Allocator>> &,grl::IconModifiers const&)::$_0>,void ()(unsigned short,grl::codec::TextLayerData const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<grl::codec::IconData::requiresFonts(std::set<std::string,std::less<std::string>,geo::StdAllocator<std::string,grl::Allocator>> &,grl::IconModifiers const&)::$_0,std::allocator<grl::codec::IconData::requiresFonts(std::set<std::string,std::less<std::string>,geo::StdAllocator<std::string,grl::Allocator>> &,grl::IconModifiers const&)::$_0>,void ()(unsigned short,grl::codec::TextLayerData const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D9440;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<grl::codec::IconData::requiresFonts(std::set<std::string,std::less<std::string>,geo::StdAllocator<std::string,grl::Allocator>> &,grl::IconModifiers const&)::$_0,std::allocator<grl::codec::IconData::requiresFonts(std::set<std::string,std::less<std::string>,geo::StdAllocator<std::string,grl::Allocator>> &,grl::IconModifiers const&)::$_0>,void ()(unsigned short,grl::codec::TextLayerData const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D9440;
  a2[1] = v2;
  return result;
}

uint64_t grl::codec::ColorLayerData::toString(grl::codec::ColorLayerData *this)
{
  _QWORD *v2;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  std::string *v14;
  std::string::size_type v15;
  _QWORD *v16;
  unint64_t v17;
  char *v18;
  std::string *v19;
  std::string::size_type v20;
  _QWORD *v21;
  std::string *v22;
  std::string::size_type v23;
  uint64_t v24;
  std::string __p;
  _QWORD v27[2];
  _QWORD v28[11];
  char v29;
  uint64_t v30;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v27);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v28, (uint64_t)"{ ", 2);
  v2 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v28, (uint64_t)"blendMode: ", 11);
  grl::toString<esl::BlendMode>(*((unsigned __int8 *)this + 32), &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v2, (uint64_t)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v5 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v28, (uint64_t)", fillColor: ", 13);
  v6 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v5, (uint64_t)"(", 1);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 33);
  v7 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v6, (uint64_t)&__p, 1);
  v8 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v7, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 34);
  v9 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v8, (uint64_t)&__p, 1);
  v10 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v9, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 35);
  v11 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v10, (uint64_t)&__p, 1);
  v12 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v11, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 36);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v12, (uint64_t)&__p, 1);
  v13 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v28, (uint64_t)", gradientAngle: ", 17);
  std::to_string(&__p, *((float *)this + 10));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = &__p;
  else
    v14 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v15 = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)v14, v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v16 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v28, (uint64_t)", gradientType: ", 16);
  v17 = *((char *)this + 44);
  if (v17 > 3)
    v18 = (char *)&str_10_1;
  else
    v18 = (&off_1E4314F50)[v17];
  std::string::basic_string[abi:nn180100]<0>(&__p, v18);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v19 = &__p;
  else
    v19 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v20 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v20 = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v16, (uint64_t)v19, v20);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v21 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v28, (uint64_t)", visible: ", 11);
  std::to_string(&__p, *((unsigned __int8 *)this + 45));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = &__p;
  else
    v22 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v23 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v23 = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v28, (uint64_t)" }", 2);
  std::stringbuf::str();
  v27[0] = *MEMORY[0x1E0DE4F50];
  v24 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v27 + *(_QWORD *)(v27[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v28[0] = v24;
  v28[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v29 < 0)
    operator delete((void *)v28[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1A1AF4D64](&v30);
}

uint64_t grl::codec::ColorLayerData::encode@<X0>(grl::codec::ColorLayerData *this@<X0>, _QWORD *a2@<X8>)
{
  int v4;
  uint64_t *v6;
  _QWORD *v7;
  grl::Allocator *v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  grl::Allocator *v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  grl::Allocator *v16;
  uint64_t v17;
  _QWORD **v18;
  _QWORD *v19;
  grl::Allocator *v20;
  uint64_t v21;
  _QWORD **v22;
  _QWORD *v23;
  grl::Allocator *v24;
  uint64_t v25;
  uint64_t *v26;
  _QWORD *v27;
  grl::Allocator *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31[3];
  unint64_t v32;

  v7 = 0;
  v8 = (grl::Allocator *)grl::Allocator::instance(this);
  v9 = 0;
  v6 = (uint64_t *)&v7;
  v11 = 0;
  v12 = (grl::Allocator *)grl::Allocator::instance(v8);
  v13 = 0;
  v10 = (uint64_t *)&v11;
  v15 = 0;
  v16 = (grl::Allocator *)grl::Allocator::instance(v12);
  v17 = 0;
  v14 = (uint64_t *)&v15;
  v19 = 0;
  v20 = (grl::Allocator *)grl::Allocator::instance(v16);
  v21 = 0;
  v18 = &v19;
  v23 = 0;
  v24 = (grl::Allocator *)grl::Allocator::instance(v20);
  v25 = 0;
  v22 = &v23;
  v27 = 0;
  v28 = (grl::Allocator *)grl::Allocator::instance(v24);
  v29 = 0;
  v26 = (uint64_t *)&v27;
  v31[0] = 0;
  v31[1] = grl::Allocator::instance(v28);
  v31[2] = 0;
  v30 = v31;
  v32 = ((unint64_t)*((unsigned __int8 *)this + 32) << 32) | 8;
  std::__tree<std::__value_type<grl::PropertyID,int>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,int>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,int>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,int>>(&v10, (unsigned __int16 *)&v32, (uint64_t)&v32);
  LOWORD(v32) = 5;
  *(_DWORD *)((char *)&v32 + 2) = *(_DWORD *)((char *)this + 33);
  std::__tree<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>>(&v26, (unsigned __int16 *)&v32, (uint64_t)&v32);
  v32 = ((unint64_t)*((unsigned int *)this + 10) << 32) | 0x27;
  std::__tree<std::__value_type<grl::PropertyID,float>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,float>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,float>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,float>>(&v14, (unsigned __int16 *)&v32, (uint64_t)&v32);
  v32 = ((unint64_t)*((unsigned __int8 *)this + 44) << 32) | 0x28;
  std::__tree<std::__value_type<grl::PropertyID,int>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,int>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,int>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,int>>(&v10, (unsigned __int16 *)&v32, (uint64_t)&v32);
  if (*((_BYTE *)this + 45))
    v4 = 65551;
  else
    v4 = 15;
  LODWORD(v32) = v4;
  std::__tree<std::__value_type<grl::PropertyID,BOOL>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,BOOL>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,BOOL>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,BOOL>>(&v6, (unsigned __int16 *)&v32, (uint64_t)&v32);
  grl::PropertySet::encode((grl::PropertySet *)&v6, a2);
  std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,std::string>,grl::Allocator>>::destroy((uint64_t)&v30, v31[0]);
  std::__tree<unsigned int,std::less<unsigned int>,geo::StdAllocator<unsigned int,mdm::Allocator>>::destroy((uint64_t)&v26, v27);
  std::__tree<std::__value_type<VKTrafficFeatureType,unsigned long>,std::__map_value_compare<VKTrafficFeatureType,std::__value_type<VKTrafficFeatureType,unsigned long>,std::less<VKTrafficFeatureType>,true>,geo::StdAllocator<std::__value_type<VKTrafficFeatureType,unsigned long>,mdm::Allocator>>::destroy((uint64_t)&v22, v23);
  std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)&v18, v19);
  std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)&v14, v15);
  std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)&v10, v11);
  return std::__tree<unsigned int,std::less<unsigned int>,geo::StdAllocator<unsigned int,mdm::Allocator>>::destroy((uint64_t)&v6, v7);
}

void grl::FontManager::clearFontCache(grl::FontManager *this)
{
  std::mutex *v2;

  v2 = (std::mutex *)((char *)this + 168);
  std::mutex::lock((std::mutex *)((char *)this + 168));
  std::__hash_table<std::__hash_value_type<grl::FontKey,std::__list_iterator<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>,std::__unordered_map_hasher<grl::FontKey,std::__hash_value_type<grl::FontKey,std::__list_iterator<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>,std::hash<grl::FontKey>,std::equal_to<grl::FontKey>,true>,std::__unordered_map_equal<grl::FontKey,std::__hash_value_type<grl::FontKey,std::__list_iterator<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>,std::equal_to<grl::FontKey>,std::hash<grl::FontKey>,true>,std::allocator<std::__hash_value_type<grl::FontKey,std::__list_iterator<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>>>::clear((uint64_t)this + 104);
  std::__list_imp<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>>::clear((uint64_t *)this + 18);
  CGFontDBGetLocal();
  CGFontDBPurgeAllFonts();
  std::mutex::unlock(v2);
}

BOOL grl::FontManager::fontHasSmallCaps(uint64_t a1)
{
  const void *v1;
  _BOOL8 HasFeature;

  v1 = *(const void **)(a1 + 8);
  if (!v1)
    return grl::FontManager::fontHasFeature(0);
  CFRetain(*(CFTypeRef *)(a1 + 8));
  HasFeature = grl::FontManager::fontHasFeature(v1);
  CFRelease(v1);
  return HasFeature;
}

BOOL grl::FontManager::fontHasFeature(CFTypeRef cf)
{
  const __CFDictionary *v1;
  CFTypeRef v2;
  const __CFArray *v3;
  const __CFArray *v4;
  CFIndex Count;
  CFIndex v6;
  CFIndex v7;
  const void *v8;
  void *v9;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v11;
  const void *Value;
  const void *v13;
  const __CFArray *v14;
  const __CFArray *v15;
  CFIndex v16;
  CFIndex v17;
  CFIndex v18;
  const __CFDictionary *v19;
  const __CFDictionary *v20;
  const void *v21;
  const void *v22;
  int v23;
  NSObject *v24;
  NSObject *v25;
  NSObject *v26;
  const char *v27;
  NSObject *v28;
  NSObject *v29;
  NSObject *v30;
  NSObject *v31;
  int v32;
  NSObject *v33;
  NSObject *v34;
  NSObject *v35;
  const __CFArray *v37;
  CFTypeRef v38;
  void *key;
  const void *v40;
  CFIndex v41;
  void *v42;
  uint8_t buf[12];
  int valuePtr;
  uint8_t v45[4];
  const char *v46;
  __int16 v47;
  const char *v48;
  __int16 v49;
  int v50;
  uint64_t v51;

  v2 = cf;
  v51 = *MEMORY[0x1E0C80C00];
  if (cf)
    CFRetain(cf);
  v3 = (const __CFArray *)CTFontCopyFeaturesInternal();
  if (!v3)
  {
    if (GEOGetGeoResourceLibCoreFoundationLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibCoreFoundationLog::onceToken, &__block_literal_global_25_0);
    v33 = GEOGetGeoResourceLibCoreFoundationLog::log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibCoreFoundationLog::log, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v45 = 0;
      _os_log_impl(&dword_19F029000, v33, OS_LOG_TYPE_ERROR, "Failed to get feature information for font.", v45, 2u);
    }
    goto LABEL_79;
  }
  v4 = v3;
  Count = CFArrayGetCount(v3);
  if (Count < 1)
    goto LABEL_78;
  v6 = Count;
  v7 = 0;
  v8 = (const void *)*MEMORY[0x1E0CA8328];
  key = (void *)*MEMORY[0x1E0CA8330];
  v42 = (void *)*MEMORY[0x1E0CA8318];
  v9 = &unk_1EE575000;
  v40 = (const void *)*MEMORY[0x1E0CA8328];
  v41 = Count;
  while (1)
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v4, v7);
    if (!ValueAtIndex)
      break;
    v11 = ValueAtIndex;
    CFRetain(ValueAtIndex);
    Value = CFDictionaryGetValue(v11, v8);
    if (!Value)
    {
      CFRelease(v11);
      goto LABEL_62;
    }
    v13 = Value;
    CFRetain(Value);
    if (CFNumberIsFloatType((CFNumberRef)v13))
    {
      if (GEOGetGeoResourceLibCoreFoundationLog::onceToken != -1)
        dispatch_once(&GEOGetGeoResourceLibCoreFoundationLog::onceToken, &__block_literal_global_25_0);
      v35 = *((_QWORD *)v9 + 413);
      if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v45 = 0;
        _os_log_impl(&dword_19F029000, v35, OS_LOG_TYPE_ERROR, "Font feature type is not int, can't read feature.", v45, 2u);
      }
      CFRelease(v13);
      CFRelease(v11);
      goto LABEL_78;
    }
    valuePtr = 0;
    if (!CFNumberGetValue((CFNumberRef)v13, kCFNumberSInt32Type, &valuePtr))
    {
      if (GEOGetGeoResourceLibCoreFoundationLog::onceToken != -1)
        dispatch_once(&GEOGetGeoResourceLibCoreFoundationLog::onceToken, &__block_literal_global_25_0);
      v25 = *((_QWORD *)v9 + 413);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v45 = 0;
        v26 = v25;
        v27 = "Failed to get value from feature type for font.";
        goto LABEL_38;
      }
LABEL_39:
      v1 = 0;
      v32 = 1;
      goto LABEL_60;
    }
    if (valuePtr == 38)
    {
      v14 = (const __CFArray *)CFDictionaryGetValue(v11, key);
      if (!v14)
      {
        if (GEOGetGeoResourceLibCoreFoundationLog::onceToken != -1)
          dispatch_once(&GEOGetGeoResourceLibCoreFoundationLog::onceToken, &__block_literal_global_25_0);
        v8 = v40;
        v6 = v41;
        v28 = *((_QWORD *)v9 + 413);
        if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)v45 = 0;
          v26 = v28;
          v27 = "Failed to get feature selectors array for font.";
LABEL_38:
          _os_log_impl(&dword_19F029000, v26, OS_LOG_TYPE_ERROR, v27, v45, 2u);
        }
        goto LABEL_39;
      }
      v15 = v14;
      CFRetain(v14);
      v16 = CFArrayGetCount(v15);
      if (v16 < 1)
      {
        v32 = 0;
      }
      else
      {
        v17 = v16;
        v37 = v4;
        v38 = v2;
        v18 = 0;
        while (1)
        {
          v19 = (const __CFDictionary *)CFArrayGetValueAtIndex(v15, v18);
          if (!v19)
            break;
          v20 = v19;
          CFRetain(v19);
          v21 = CFDictionaryGetValue(v20, v42);
          if (!v21)
          {
            if (GEOGetGeoResourceLibCoreFoundationLog::onceToken != -1)
              dispatch_once(&GEOGetGeoResourceLibCoreFoundationLog::onceToken, &__block_literal_global_25_0);
            v4 = v37;
            v2 = v38;
            v30 = GEOGetGeoResourceLibCoreFoundationLog::log;
            if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibCoreFoundationLog::log, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)v45 = 0;
              _os_log_impl(&dword_19F029000, v30, OS_LOG_TYPE_ERROR, "Failed to get feature selector id for font.", v45, 2u);
            }
            goto LABEL_55;
          }
          v22 = v21;
          CFRetain(v21);
          if (CFNumberIsFloatType((CFNumberRef)v22))
          {
            v4 = v37;
            v2 = v38;
            if (GEOGetGeoResourceLibCoreFoundationLog::onceToken != -1)
              dispatch_once(&GEOGetGeoResourceLibCoreFoundationLog::onceToken, &__block_literal_global_25_0);
            v31 = GEOGetGeoResourceLibCoreFoundationLog::log;
            if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibCoreFoundationLog::log, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)v45 = 0;
              _os_log_impl(&dword_19F029000, v31, OS_LOG_TYPE_ERROR, "Font feature selector is not int, can't read feature.", v45, 2u);
            }
            CFRelease(v22);
LABEL_55:
            CFRelease(v20);
            v1 = 0;
            v32 = 1;
            goto LABEL_58;
          }
          *(_DWORD *)v45 = 0;
          v23 = CFNumberGetValue((CFNumberRef)v22, kCFNumberSInt32Type, v45);
          if (v23)
          {
            if (*(_DWORD *)v45 == 1)
            {
              CFRelease(v22);
              v32 = 1;
              v1 = v20;
              goto LABEL_57;
            }
          }
          else
          {
            if (GEOGetGeoResourceLibCoreFoundationLog::onceToken != -1)
              dispatch_once(&GEOGetGeoResourceLibCoreFoundationLog::onceToken, &__block_literal_global_25_0);
            v24 = GEOGetGeoResourceLibCoreFoundationLog::log;
            if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibCoreFoundationLog::log, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_19F029000, v24, OS_LOG_TYPE_ERROR, "Failed to get value from feature type for font.", buf, 2u);
            }
            v1 = 0;
          }
          CFRelease(v22);
          CFRelease(v20);
          if (!v23)
          {
            v32 = 1;
LABEL_57:
            v4 = v37;
            v2 = v38;
LABEL_58:
            v9 = &unk_1EE575000;
            goto LABEL_59;
          }
          if (v17 == ++v18)
          {
            v32 = 0;
            goto LABEL_57;
          }
        }
        if (GEOGetGeoResourceLibCoreFoundationLog::onceToken != -1)
          dispatch_once(&GEOGetGeoResourceLibCoreFoundationLog::onceToken, &__block_literal_global_25_0);
        v4 = v37;
        v2 = v38;
        v9 = &unk_1EE575000;
        v29 = GEOGetGeoResourceLibCoreFoundationLog::log;
        if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibCoreFoundationLog::log, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v45 = 136315650;
          v46 = "!GRL_UNIQUE_NAME(didTriggerAssert)";
          v47 = 2080;
          v48 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/FontManager.cpp";
          v49 = 1024;
          v50 = 132;
          _os_log_impl(&dword_19F029000, v29, OS_LOG_TYPE_ERROR, "Failed to get features selector array value for font.: Assertion with expression - %s : Failed in file - %s line - %i", v45, 0x1Cu);
        }
        v1 = 0;
        v32 = 1;
      }
LABEL_59:
      CFRelease(v15);
      v8 = v40;
      v6 = v41;
    }
    else
    {
      v32 = 4;
    }
LABEL_60:
    CFRelease(v13);
    CFRelease(v11);
    if (v32 && v32 != 4)
    {
      CFRelease(v4);
      if (v1)
        CFRelease(v1);
      goto LABEL_80;
    }
LABEL_62:
    if (++v7 == v6)
      goto LABEL_78;
  }
  if (GEOGetGeoResourceLibCoreFoundationLog::onceToken != -1)
    dispatch_once(&GEOGetGeoResourceLibCoreFoundationLog::onceToken, &__block_literal_global_25_0);
  v34 = *((_QWORD *)v9 + 413);
  if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v45 = 0;
    _os_log_impl(&dword_19F029000, v34, OS_LOG_TYPE_ERROR, "Failed to get feature dictionary for font.", v45, 2u);
  }
LABEL_78:
  CFRelease(v4);
LABEL_79:
  v1 = 0;
LABEL_80:
  if (v2)
    CFRelease(v2);
  return v1 != 0;
}

void grl::FontManager::~FontManager(grl::FontManager *this)
{
  grl::FontManager::~FontManager(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  void *v2;

  *(_QWORD *)this = &off_1E42C2508;
  std::mutex::~mutex((std::mutex *)((char *)this + 168));
  std::__list_imp<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>>::clear((uint64_t *)this + 18);
  std::__hash_table<std::__hash_value_type<grl::FontKey,std::__list_iterator<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>,std::__unordered_map_hasher<grl::FontKey,std::__hash_value_type<grl::FontKey,std::__list_iterator<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>,std::hash<grl::FontKey>,std::equal_to<grl::FontKey>,true>,std::__unordered_map_equal<grl::FontKey,std::__hash_value_type<grl::FontKey,std::__list_iterator<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>,std::equal_to<grl::FontKey>,std::hash<grl::FontKey>,true>,std::allocator<std::__hash_value_type<grl::FontKey,std::__list_iterator<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>>>::__deallocate_node((uint64_t)this + 104, *((_QWORD **)this + 15));
  v2 = (void *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v2)
    operator delete(v2);
  *(_QWORD *)this = &unk_1E42C2580;
  std::mutex::~mutex((std::mutex *)((char *)this + 24));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

void std::__list_imp<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>>::clear(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (uint64_t *)v3[1];
        std::__destroy_at[abi:nn180100]<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,0>((esl::FontKey *)(v3 + 2));
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void std::__destroy_at[abi:nn180100]<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,0>(esl::FontKey *this)
{
  const void *v2;

  *((_QWORD *)this + 16) = &off_1E42B4970;
  v2 = (const void *)*((_QWORD *)this + 17);
  if (v2)
    CFRelease(v2);
  esl::FontKey::~FontKey(this);
}

void std::__hash_table<std::__hash_value_type<grl::FontKey,std::__list_iterator<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>,std::__unordered_map_hasher<grl::FontKey,std::__hash_value_type<grl::FontKey,std::__list_iterator<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>,std::hash<grl::FontKey>,std::equal_to<grl::FontKey>,true>,std::__unordered_map_equal<grl::FontKey,std::__hash_value_type<grl::FontKey,std::__list_iterator<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>,std::equal_to<grl::FontKey>,std::hash<grl::FontKey>,true>,std::allocator<std::__hash_value_type<grl::FontKey,std::__list_iterator<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      esl::FontKey::~FontKey((esl::FontKey *)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<grl::FontKey,std::__list_iterator<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<grl::FontKey,std::__list_iterator<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>,void *>>>>::reset[abi:nn180100](uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  *a1 = 0;
  if (v1)
  {
    if (*((_BYTE *)a1 + 16))
      esl::FontKey::~FontKey((esl::FontKey *)(v1 + 16));
    operator delete((void *)v1);
  }
}

void std::__hash_table<std::__hash_value_type<grl::FontKey,std::__list_iterator<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>,std::__unordered_map_hasher<grl::FontKey,std::__hash_value_type<grl::FontKey,std::__list_iterator<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>,std::hash<grl::FontKey>,std::equal_to<grl::FontKey>,true>,std::__unordered_map_equal<grl::FontKey,std::__hash_value_type<grl::FontKey,std::__list_iterator<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>,std::equal_to<grl::FontKey>,std::hash<grl::FontKey>,true>,std::allocator<std::__hash_value_type<grl::FontKey,std::__list_iterator<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<grl::FontKey,std::__list_iterator<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>,std::__unordered_map_hasher<grl::FontKey,std::__hash_value_type<grl::FontKey,std::__list_iterator<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>,std::hash<grl::FontKey>,std::equal_to<grl::FontKey>,true>,std::__unordered_map_equal<grl::FontKey,std::__hash_value_type<grl::FontKey,std::__list_iterator<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>,std::equal_to<grl::FontKey>,std::hash<grl::FontKey>,true>,std::allocator<std::__hash_value_type<grl::FontKey,std::__list_iterator<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

uint64_t grl::LayerMetrics::LayerMetrics(uint64_t a1, uint64_t a2, float *a3, float *a4)
{
  float *v6;
  float v7;
  float v8;
  float v9;
  int v10;
  float v11;
  float v12;
  int v13;

  *(_QWORD *)a1 = &off_1E42C2558;
  *(_WORD *)(a1 + 8) = 2;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_OWORD *)(a1 + 60) = 0u;
  *(_OWORD *)(a1 + 76) = 0u;
  *(_OWORD *)(a1 + 12) = 0u;
  v6 = (float *)(a1 + 12);
  v7 = *a3;
  v8 = a3[1];
  v9 = roundf(*a4);
  if (*a3 < v9)
    v7 = v9;
  *(float *)(a1 + 44) = v7;
  *(float *)(a1 + 48) = v8;
  *(_DWORD *)(a1 + 16) = 0;
  *v6 = 0.0;
  *(float *)(a1 + 20) = v7 + 0.0;
  *(float *)(a1 + 24) = v8 + 0.0;
  *(float *)(a1 + 76) = grl::LayerMetrics::findGradientStartPoint(2u, v6, *(float *)(a2 + 52));
  *(_DWORD *)(a1 + 80) = v10;
  v11 = fmodf((float)(*(float *)(a2 + 52) + -3.1416) + 3.1416, 6.2832);
  v12 = fmodf(v11 + 6.2832, 6.2832);
  *(float *)(a1 + 84) = grl::LayerMetrics::findGradientStartPoint(2u, v6, v12 + -3.1416);
  *(_DWORD *)(a1 + 88) = v13;
  return a1;
}

uint64_t grl::LayerMetrics::LayerMetrics(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  float *v5;
  int v6;
  float v7;
  float v8;
  int v9;

  *(_QWORD *)a1 = &off_1E42C2558;
  *(_WORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_OWORD *)(a1 + 60) = 0u;
  *(_OWORD *)(a1 + 76) = 0u;
  *(_OWORD *)(a1 + 12) = 0u;
  v5 = (float *)(a1 + 12);
  *(_DWORD *)(a1 + 44) = *a3;
  *(_DWORD *)(a1 + 48) = a3[1];
  *(_DWORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 20) = *a3;
  *(_DWORD *)(a1 + 24) = a3[1];
  *(_QWORD *)(a1 + 28) = 0;
  *(_QWORD *)(a1 + 36) = 0;
  *(float *)(a1 + 76) = grl::LayerMetrics::findGradientStartPoint(2u, (float *)(a1 + 12), *(float *)(a2 + 40));
  *(_DWORD *)(a1 + 80) = v6;
  v7 = fmodf((float)(*(float *)(a2 + 40) + -3.1416) + 3.1416, 6.2832);
  v8 = fmodf(v7 + 6.2832, 6.2832);
  *(float *)(a1 + 84) = grl::LayerMetrics::findGradientStartPoint(2u, v5, v8 + -3.1416);
  *(_DWORD *)(a1 + 88) = v9;
  return a1;
}

_QWORD *geo::_retain_ptr<__CTLine const*,geo::_retain_cf<__CTLine const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(_QWORD *a1)
{
  const void *v2;

  *a1 = &off_1E42B4990;
  v2 = (const void *)a1[1];
  if (v2)
    CFRelease(v2);
  return a1;
}

void geo::_retain_ptr<__CTLine const*,geo::_retain_cf<__CTLine const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(_QWORD *a1)
{
  const void *v1;

  *a1 = &off_1E42B4990;
  v1 = (const void *)a1[1];
  if (v1)
    CFRelease(v1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_pointer<esl::QuartzImage *,std::shared_ptr<esl::QuartzImage>::__shared_ptr_default_delete<esl::QuartzImage,esl::QuartzImage>,std::allocator<esl::QuartzImage>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<esl::QuartzImage *,std::shared_ptr<esl::QuartzImage>::__shared_ptr_default_delete<esl::QuartzImage,esl::QuartzImage>,std::allocator<esl::QuartzImage>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t grl::codec::IconMapPack::packLog(grl::codec::IconMapPack *this)
{
  _QWORD *v1;
  std::locale::id *v2;
  const std::locale::facet *v3;
  _QWORD *v4;
  const std::locale::facet *v5;
  _QWORD *v6;
  const std::locale::facet *v7;
  _QWORD *v8;
  const std::locale::facet *v9;
  uint64_t v10;
  _QWORD v12[2];
  _QWORD v13[11];
  char v14;
  uint64_t v15;
  std::locale v16;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v12);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)"Number of Key Value Pairs: ", 27);
  v1 = (_QWORD *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v1 + *(_QWORD *)(*v1 - 24)));
  v2 = (std::locale::id *)MEMORY[0x1E0DE4A90];
  v3 = std::locale::use_facet(&v16, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 10);
  std::locale::~locale(&v16);
  std::ostream::put();
  std::ostream::flush();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)"Number of Names: ", 17);
  v4 = (_QWORD *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(_QWORD *)(*v4 - 24)));
  v5 = std::locale::use_facet(&v16, v2);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v16);
  std::ostream::put();
  std::ostream::flush();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)"Number of Data Identifiers: ", 28);
  v6 = (_QWORD *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(_QWORD *)(*v6 - 24)));
  v7 = std::locale::use_facet(&v16, v2);
  ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
  std::locale::~locale(&v16);
  std::ostream::put();
  std::ostream::flush();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)"Number of Data Text Values: ", 28);
  v8 = (_QWORD *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(_QWORD *)(*v8 - 24)));
  v9 = std::locale::use_facet(&v16, v2);
  ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
  std::locale::~locale(&v16);
  std::ostream::put();
  std::ostream::flush();
  std::stringbuf::str();
  v12[0] = *MEMORY[0x1E0DE4F50];
  v10 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v12 + *(_QWORD *)(v12[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v13[0] = v10;
  v13[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v14 < 0)
    operator delete((void *)v13[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1A1AF4D64](&v15);
}

uint64_t grl::codec::IconMapPack::dataIDFallback(grl::codec::IconMapPack *this, unsigned int *a2)
{
  char *v2;
  char *v3;
  unsigned int v4;
  char *v6;
  char *v7;
  BOOL v8;

  v2 = (char *)*((_QWORD *)this + 56);
  v3 = (char *)this + 456;
  if (v2 != (char *)this + 456)
  {
    v4 = *a2;
    while (v4 < *((_DWORD *)v2 + 7) || v4 > *((_DWORD *)v2 + 8))
    {
      v6 = (char *)*((_QWORD *)v2 + 1);
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = *(char **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (char *)*((_QWORD *)v2 + 2);
          v8 = *(_QWORD *)v7 == (_QWORD)v2;
          v2 = v7;
        }
        while (!v8);
      }
      v2 = v7;
      if (v7 == v3)
        return 0;
    }
  }
  if (v2 == v3)
    return 0;
  else
    return *((unsigned int *)v2 + 9);
}

void grl::codec::IconMapPack::encode(grl::codec::IconMapPack **this@<X0>, __int16 a2@<W1>, _QWORD *a3@<X8>)
{
  grl::Allocator *v6;
  void *v7;
  size_t v8;
  char *v9;
  char *v10;
  int64_t v11;
  uint64_t **v12;
  uint64_t *v13;
  grl::codec::IconMapPack *i;
  grl::codec::IconMapPack *j;
  std::string::value_type *v16;
  std::string::size_type v17;
  std::string::value_type *v18;
  std::string *p_p;
  uint64_t v20;
  uint64_t v21;
  std::string::value_type v22;
  std::string *v23;
  size_t v24;
  grl::codec::IconMapPack *k;
  grl::codec::IconMapPack *v26;
  uint64_t *v27;
  const void *v28;
  std::string::size_type v29;
  std::string *v30;
  uint64_t v31;
  uint64_t v32;
  std::string *v33;
  size_t v34;
  void *v35;
  size_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t **v39;
  uint64_t *v40;
  grl::codec::IconMapPack *m;
  grl::codec::IconMapPack *v42;
  grl::codec::IconMapPack *v43;
  grl::codec::IconMapPack *v44;
  BOOL v45;
  void *v46;
  size_t v47;
  char *v48;
  uint64_t *v49;
  uint64_t **v50;
  uint64_t *v51;
  grl::codec::IconMapPack *v52;
  grl::codec::IconMapPack *v53;
  grl::codec::IconMapPack *v54;
  grl::codec::IconMapPack *v55;
  int *v56;
  int *v57;
  int v58;
  grl::codec::IconMapPack *v59;
  grl::codec::IconMapPack *v60;
  grl::codec::IconMapPack *v61;
  int *v62;
  int *v63;
  int v64;
  grl::codec::IconMapPack *v65;
  grl::codec::IconMapPack *v66;
  grl::codec::IconMapPack *v67;
  std::string *v68;
  size_t v69;
  grl::codec::IconMapPack *v70;
  grl::codec::IconMapPack *v71;
  void *v72;
  size_t v73;
  char *v74;
  uint64_t *v75;
  uint64_t **v76;
  uint64_t *v77;
  void *v78[2];
  uint64_t *v79;
  uint64_t *v80;
  _QWORD *v81[3];
  void *v82;
  char *v83;
  char *v84;
  void *v85;
  _BYTE *v86;
  uint64_t v87;
  char v88;
  unsigned __int8 v89[4];
  std::string __p;
  unsigned __int8 v91[8];
  void *v92;
  uint64_t v93;
  char v94;

  v85 = 0;
  v86 = 0;
  v88 = 0;
  v87 = 0;
  v91[0] = 73;
  geo::obitstream::appendBytes((geo::obitstream *)&v85, (char *)v91, 1);
  v91[0] = 67;
  geo::obitstream::appendBytes((geo::obitstream *)&v85, (char *)v91, 1);
  v91[0] = 79;
  geo::obitstream::appendBytes((geo::obitstream *)&v85, (char *)v91, 1);
  v91[0] = 78;
  geo::obitstream::appendBytes((geo::obitstream *)&v85, (char *)v91, 1);
  v91[0] = 77;
  geo::obitstream::appendBytes((geo::obitstream *)&v85, (char *)v91, 1);
  v91[0] = 65;
  geo::obitstream::appendBytes((geo::obitstream *)&v85, (char *)v91, 1);
  v91[0] = 80;
  geo::obitstream::appendBytes((geo::obitstream *)&v85, (char *)v91, 1);
  v91[0] = 80;
  geo::obitstream::appendBytes((geo::obitstream *)&v85, (char *)v91, 1);
  v91[0] = 65;
  geo::obitstream::appendBytes((geo::obitstream *)&v85, (char *)v91, 1);
  v91[0] = 67;
  geo::obitstream::appendBytes((geo::obitstream *)&v85, (char *)v91, 1);
  v91[0] = 75;
  geo::obitstream::appendBytes((geo::obitstream *)&v85, (char *)v91, 1);
  v82 = 0;
  v83 = 0;
  v84 = 0;
  v7 = v85;
  v8 = v86 - (_BYTE *)v85;
  if (v86 == v85)
  {
    v9 = 0;
    v10 = 0;
  }
  else
  {
    if (v86 - (_BYTE *)v85 < 0)
      goto LABEL_135;
    v9 = (char *)operator new(v86 - (_BYTE *)v85);
    v10 = &v9[v8];
    v82 = v9;
    v84 = &v9[v8];
    v6 = (grl::Allocator *)memmove(v9, v7, v8);
    v83 = &v9[v8];
  }
  v11 = v10 - v9;
  if ((unint64_t)(v10 - v9) > 0x3F)
  {
    if (v11 != 64)
      v83 = v9 + 64;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)&v82, 64 - v11);
  }
  v81[0] = 0;
  v81[1] = (_QWORD *)grl::Allocator::instance(v6);
  v81[2] = 0;
  v80 = (uint64_t *)v81;
  grl::codec::ResourcePack::encodePackInfo((grl::codec::ResourcePack *)this, a2, v78);
  LOWORD(__p.__r_.__value_.__l.__data_) = 1;
  *(_QWORD *)v91 = &__p;
  v12 = std::__tree<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,grl::Allocator>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>(&v80, (unsigned __int16 *)&__p, (uint64_t)&std::piecewise_construct, (_WORD **)v91);
  v13 = v12[5];
  if (v13)
  {
    v12[6] = v13;
    operator delete(v13);
  }
  *(_OWORD *)(v12 + 5) = *(_OWORD *)v78;
  v12[7] = v79;
  v78[1] = 0;
  v79 = 0;
  v78[0] = 0;
  *(_QWORD *)v91 = 0;
  v92 = 0;
  v94 = 0;
  v93 = 0;
  std::vector<unsigned char>::reserve((unint64_t *)v91, ((_QWORD)this[17] << 6) + 16 * (_QWORD)this[10]);
  LODWORD(__p.__r_.__value_.__l.__data_) = this[10];
  geo::obitstream::appendBytes((geo::obitstream *)v91, (char *)&__p, 4);
  for (i = this[8]; i; i = *(grl::codec::IconMapPack **)i)
  {
    LODWORD(__p.__r_.__value_.__l.__data_) = *((_DWORD *)i + 4);
    geo::obitstream::appendBytes((geo::obitstream *)v91, (char *)&__p, 4);
    LODWORD(__p.__r_.__value_.__l.__data_) = *((_DWORD *)i + 5);
    geo::obitstream::appendBytes((geo::obitstream *)v91, (char *)&__p, 4);
    LODWORD(__p.__r_.__value_.__l.__data_) = *((_DWORD *)i + 6);
    geo::obitstream::appendBytes((geo::obitstream *)v91, (char *)&__p, 4);
  }
  LODWORD(__p.__r_.__value_.__l.__data_) = this[17];
  geo::obitstream::appendBytes((geo::obitstream *)v91, (char *)&__p, 4);
  for (j = this[15]; j; j = *(grl::codec::IconMapPack **)j)
  {
    if (*((char *)j + 39) < 0)
    {
      v17 = *((_QWORD *)j + 3);
      if (v17 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_135;
      v16 = (std::string::value_type *)*((_QWORD *)j + 2);
    }
    else
    {
      v16 = (char *)j + 16;
      v17 = *((unsigned __int8 *)j + 39);
    }
    v18 = &v16[v17];
    if (v17 > 0x16)
    {
      v20 = (v17 & 0x7FFFFFFFFFFFFFF8) + 8;
      if ((v17 | 7) != 0x17)
        v20 = v17 | 7;
      v21 = v20 + 1;
      p_p = (std::string *)operator new(v20 + 1);
      __p.__r_.__value_.__l.__size_ = v17;
      __p.__r_.__value_.__r.__words[2] = v21 | 0x8000000000000000;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
    }
    else
    {
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = v17;
      p_p = &__p;
    }
    while (v16 != v18)
    {
      v22 = *v16++;
      p_p->__r_.__value_.__s.__data_[0] = v22;
      p_p = (std::string *)((char *)p_p + 1);
    }
    p_p->__r_.__value_.__s.__data_[0] = 0;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v23 = &__p;
    else
      v23 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v24 = strlen((const char *)v23);
    geo::obitstream::appendBytes((geo::obitstream *)v91, (char *)v23, v24 + 1);
    *(_DWORD *)v89 = *((_DWORD *)j + 12);
    geo::obitstream::appendBytes((geo::obitstream *)v91, (char *)v89, 4);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  LODWORD(__p.__r_.__value_.__l.__data_) = this[24];
  geo::obitstream::appendBytes((geo::obitstream *)v91, (char *)&__p, 4);
  for (k = this[22]; k; k = *(grl::codec::IconMapPack **)k)
  {
    LODWORD(__p.__r_.__value_.__l.__data_) = *((_DWORD *)k + 4);
    geo::obitstream::appendBytes((geo::obitstream *)v91, (char *)&__p, 4);
    LODWORD(__p.__r_.__value_.__l.__data_) = *((_DWORD *)k + 5);
    geo::obitstream::appendBytes((geo::obitstream *)v91, (char *)&__p, 4);
  }
  LODWORD(__p.__r_.__value_.__l.__data_) = this[31];
  geo::obitstream::appendBytes((geo::obitstream *)v91, (char *)&__p, 4);
  v26 = this[29];
  if (v26)
  {
    while (1)
    {
      LODWORD(__p.__r_.__value_.__l.__data_) = *((_DWORD *)v26 + 4);
      geo::obitstream::appendBytes((geo::obitstream *)v91, (char *)&__p, 4);
      LODWORD(__p.__r_.__value_.__l.__data_) = *((_QWORD *)v26 + 8);
      geo::obitstream::appendBytes((geo::obitstream *)v91, (char *)&__p, 4);
      v27 = (uint64_t *)*((_QWORD *)v26 + 6);
      if (v27)
        break;
LABEL_52:
      v26 = *(grl::codec::IconMapPack **)v26;
      if (!v26)
        goto LABEL_53;
    }
    while (1)
    {
      if (*((char *)v27 + 39) < 0)
      {
        v29 = v27[3];
        if (v29 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_135;
        v28 = (const void *)v27[2];
      }
      else
      {
        v28 = v27 + 2;
        v29 = *((unsigned __int8 *)v27 + 39);
      }
      if (v29 >= 0x17)
      {
        v31 = (v29 & 0x7FFFFFFFFFFFFFF8) + 8;
        if ((v29 | 7) != 0x17)
          v31 = v29 | 7;
        v32 = v31 + 1;
        v30 = (std::string *)operator new(v31 + 1);
        __p.__r_.__value_.__l.__size_ = v29;
        __p.__r_.__value_.__r.__words[2] = v32 | 0x8000000000000000;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
      }
      else
      {
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = v29;
        v30 = &__p;
        if (!v29)
          goto LABEL_46;
      }
      memmove(v30, v28, v29);
LABEL_46:
      v30->__r_.__value_.__s.__data_[v29] = 0;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v33 = &__p;
      else
        v33 = (std::string *)__p.__r_.__value_.__r.__words[0];
      v34 = strlen((const char *)v33);
      geo::obitstream::appendBytes((geo::obitstream *)v91, (char *)v33, v34 + 1);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      LODWORD(__p.__r_.__value_.__l.__data_) = *((_DWORD *)v27 + 12);
      geo::obitstream::appendBytes((geo::obitstream *)v91, (char *)&__p, 4);
      v27 = (uint64_t *)*v27;
      if (!v27)
        goto LABEL_52;
    }
  }
LABEL_53:
  v35 = *(void **)v91;
  v36 = (size_t)v92 - *(_QWORD *)v91;
  if (v92 == *(void **)v91)
  {
    v37 = 0;
    v38 = 0;
    if (*(_QWORD *)v91)
    {
LABEL_56:
      v92 = v35;
      operator delete(v35);
    }
  }
  else
  {
    if ((uint64_t)v92 - *(_QWORD *)v91 < 0)
      goto LABEL_135;
    v37 = (char *)operator new((size_t)v92 - *(_QWORD *)v91);
    v38 = (uint64_t *)&v37[v36];
    memmove(v37, v35, v36);
    if (v35)
      goto LABEL_56;
  }
  LOWORD(__p.__r_.__value_.__l.__data_) = 11;
  *(_QWORD *)v91 = &__p;
  v39 = std::__tree<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,grl::Allocator>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>(&v80, (unsigned __int16 *)&__p, (uint64_t)&std::piecewise_construct, (_WORD **)v91);
  v40 = v39[5];
  if (v40)
  {
    v39[6] = v40;
    operator delete(v40);
  }
  v39[5] = (uint64_t *)v37;
  v39[6] = v38;
  v39[7] = v38;
  *(_QWORD *)v91 = 0;
  v92 = 0;
  v94 = 0;
  v93 = 0;
  std::vector<unsigned char>::reserve((unint64_t *)v91, ((_QWORD)this[54] * (_QWORD)this[59]) << 9);
  LODWORD(__p.__r_.__value_.__l.__data_) = this[54];
  geo::obitstream::appendBytes((geo::obitstream *)v91, (char *)&__p, 4);
  for (m = this[52]; m; m = *(grl::codec::IconMapPack **)m)
  {
    LODWORD(__p.__r_.__value_.__l.__data_) = *((_DWORD *)m + 4);
    geo::obitstream::appendBytes((geo::obitstream *)v91, (char *)&__p, 4);
    LODWORD(__p.__r_.__value_.__l.__data_) = *((_DWORD *)m + 5);
    geo::obitstream::appendBytes((geo::obitstream *)v91, (char *)&__p, 4);
  }
  LODWORD(__p.__r_.__value_.__l.__data_) = this[59];
  geo::obitstream::appendBytes((geo::obitstream *)v91, (char *)&__p, 4);
  v42 = this[56];
  if (v42 != (grl::codec::IconMapPack *)(this + 57))
  {
    do
    {
      LODWORD(__p.__r_.__value_.__l.__data_) = *((_DWORD *)v42 + 7);
      geo::obitstream::appendBytes((geo::obitstream *)v91, (char *)&__p, 4);
      LODWORD(__p.__r_.__value_.__l.__data_) = *((_DWORD *)v42 + 8);
      geo::obitstream::appendBytes((geo::obitstream *)v91, (char *)&__p, 4);
      LODWORD(__p.__r_.__value_.__l.__data_) = *((_DWORD *)v42 + 9);
      geo::obitstream::appendBytes((geo::obitstream *)v91, (char *)&__p, 4);
      v43 = (grl::codec::IconMapPack *)*((_QWORD *)v42 + 1);
      if (v43)
      {
        do
        {
          v44 = v43;
          v43 = *(grl::codec::IconMapPack **)v43;
        }
        while (v43);
      }
      else
      {
        do
        {
          v44 = (grl::codec::IconMapPack *)*((_QWORD *)v42 + 2);
          v45 = *(_QWORD *)v44 == (_QWORD)v42;
          v42 = v44;
        }
        while (!v45);
      }
      v42 = v44;
    }
    while (v44 != (grl::codec::IconMapPack *)(this + 57));
  }
  v46 = *(void **)v91;
  v47 = (size_t)v92 - *(_QWORD *)v91;
  if (v92 != *(void **)v91)
  {
    if ((uint64_t)v92 - *(_QWORD *)v91 < 0)
      goto LABEL_135;
    v48 = (char *)operator new((size_t)v92 - *(_QWORD *)v91);
    v49 = (uint64_t *)&v48[v47];
    memmove(v48, v46, v47);
    if (!v46)
      goto LABEL_72;
    goto LABEL_71;
  }
  v48 = 0;
  v49 = 0;
  if (*(_QWORD *)v91)
  {
LABEL_71:
    v92 = v46;
    operator delete(v46);
  }
LABEL_72:
  LOWORD(__p.__r_.__value_.__l.__data_) = 13;
  *(_QWORD *)v91 = &__p;
  v50 = std::__tree<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,grl::Allocator>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>(&v80, (unsigned __int16 *)&__p, (uint64_t)&std::piecewise_construct, (_WORD **)v91);
  v51 = v50[5];
  if (v51)
  {
    v50[6] = v51;
    operator delete(v51);
  }
  v50[5] = (uint64_t *)v48;
  v50[6] = v49;
  v50[7] = v49;
  *(_QWORD *)v91 = 0;
  v92 = 0;
  v94 = 0;
  v93 = 0;
  std::vector<unsigned char>::reserve((unint64_t *)v91, 1536 * ((uint64_t)this[36] + (_QWORD)this[44] + (unint64_t)this[40] + (_QWORD)this[48]));
  LODWORD(__p.__r_.__value_.__l.__data_) = this[36];
  geo::obitstream::appendBytes((geo::obitstream *)v91, (char *)&__p, 4);
  v52 = this[33];
  if (v52 != (grl::codec::IconMapPack *)(this + 34))
  {
    do
    {
      LODWORD(__p.__r_.__value_.__l.__data_) = *((_DWORD *)v52 + 7);
      geo::obitstream::appendBytes((geo::obitstream *)v91, (char *)&__p, 4);
      v53 = (grl::codec::IconMapPack *)*((_QWORD *)v52 + 1);
      if (v53)
      {
        do
        {
          v54 = v53;
          v53 = *(grl::codec::IconMapPack **)v53;
        }
        while (v53);
      }
      else
      {
        do
        {
          v54 = (grl::codec::IconMapPack *)*((_QWORD *)v52 + 2);
          v45 = *(_QWORD *)v54 == (_QWORD)v52;
          v52 = v54;
        }
        while (!v45);
      }
      v52 = v54;
    }
    while (v54 != (grl::codec::IconMapPack *)(this + 34));
  }
  LODWORD(__p.__r_.__value_.__l.__data_) = this[44];
  geo::obitstream::appendBytes((geo::obitstream *)v91, (char *)&__p, 4);
  v55 = this[41];
  if (v55 != (grl::codec::IconMapPack *)(this + 42))
  {
    do
    {
      LODWORD(__p.__r_.__value_.__l.__data_) = *((_DWORD *)v55 + 8);
      geo::obitstream::appendBytes((geo::obitstream *)v91, (char *)&__p, 4);
      LODWORD(__p.__r_.__value_.__l.__data_) = (*((_QWORD *)v55 + 6) - *((_QWORD *)v55 + 5)) >> 2;
      geo::obitstream::appendBytes((geo::obitstream *)v91, (char *)&__p, 4);
      v56 = (int *)*((_QWORD *)v55 + 5);
      v57 = (int *)*((_QWORD *)v55 + 6);
      while (v56 != v57)
      {
        v58 = *v56++;
        LODWORD(__p.__r_.__value_.__l.__data_) = v58;
        geo::obitstream::appendBytes((geo::obitstream *)v91, (char *)&__p, 4);
      }
      v59 = (grl::codec::IconMapPack *)*((_QWORD *)v55 + 1);
      if (v59)
      {
        do
        {
          v60 = v59;
          v59 = *(grl::codec::IconMapPack **)v59;
        }
        while (v59);
      }
      else
      {
        do
        {
          v60 = (grl::codec::IconMapPack *)*((_QWORD *)v55 + 2);
          v45 = *(_QWORD *)v60 == (_QWORD)v55;
          v55 = v60;
        }
        while (!v45);
      }
      v55 = v60;
    }
    while (v60 != (grl::codec::IconMapPack *)(this + 42));
  }
  LODWORD(__p.__r_.__value_.__l.__data_) = this[48];
  geo::obitstream::appendBytes((geo::obitstream *)v91, (char *)&__p, 4);
  v61 = this[45];
  if (v61 != (grl::codec::IconMapPack *)(this + 46))
  {
    do
    {
      LODWORD(__p.__r_.__value_.__l.__data_) = *((_DWORD *)v61 + 8);
      geo::obitstream::appendBytes((geo::obitstream *)v91, (char *)&__p, 4);
      LODWORD(__p.__r_.__value_.__l.__data_) = (*((_QWORD *)v61 + 6) - *((_QWORD *)v61 + 5)) >> 2;
      geo::obitstream::appendBytes((geo::obitstream *)v91, (char *)&__p, 4);
      v62 = (int *)*((_QWORD *)v61 + 5);
      v63 = (int *)*((_QWORD *)v61 + 6);
      while (v62 != v63)
      {
        v64 = *v62++;
        LODWORD(__p.__r_.__value_.__l.__data_) = v64;
        geo::obitstream::appendBytes((geo::obitstream *)v91, (char *)&__p, 4);
      }
      v65 = (grl::codec::IconMapPack *)*((_QWORD *)v61 + 1);
      if (v65)
      {
        do
        {
          v66 = v65;
          v65 = *(grl::codec::IconMapPack **)v65;
        }
        while (v65);
      }
      else
      {
        do
        {
          v66 = (grl::codec::IconMapPack *)*((_QWORD *)v61 + 2);
          v45 = *(_QWORD *)v66 == (_QWORD)v61;
          v61 = v66;
        }
        while (!v45);
      }
      v61 = v66;
    }
    while (v66 != (grl::codec::IconMapPack *)(this + 46));
  }
  LODWORD(__p.__r_.__value_.__l.__data_) = this[40];
  geo::obitstream::appendBytes((geo::obitstream *)v91, (char *)&__p, 4);
  v67 = this[37];
  if (v67 != (grl::codec::IconMapPack *)(this + 38))
  {
    do
    {
      LODWORD(__p.__r_.__value_.__l.__data_) = *((_DWORD *)v67 + 8);
      geo::obitstream::appendBytes((geo::obitstream *)v91, (char *)&__p, 4);
      if (*((char *)v67 + 63) < 0)
        std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v67 + 5), *((_QWORD *)v67 + 6));
      else
        __p = *(std::string *)((char *)v67 + 40);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v68 = &__p;
      else
        v68 = (std::string *)__p.__r_.__value_.__r.__words[0];
      v69 = strlen((const char *)v68);
      geo::obitstream::appendBytes((geo::obitstream *)v91, (char *)v68, v69 + 1);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v70 = (grl::codec::IconMapPack *)*((_QWORD *)v67 + 1);
      if (v70)
      {
        do
        {
          v71 = v70;
          v70 = *(grl::codec::IconMapPack **)v70;
        }
        while (v70);
      }
      else
      {
        do
        {
          v71 = (grl::codec::IconMapPack *)*((_QWORD *)v67 + 2);
          v45 = *(_QWORD *)v71 == (_QWORD)v67;
          v67 = v71;
        }
        while (!v45);
      }
      v67 = v71;
    }
    while (v71 != (grl::codec::IconMapPack *)(this + 38));
  }
  v72 = *(void **)v91;
  v73 = (size_t)v92 - *(_QWORD *)v91;
  if (v92 != *(void **)v91)
  {
    if ((uint64_t)v92 - *(_QWORD *)v91 >= 0)
    {
      v74 = (char *)operator new((size_t)v92 - *(_QWORD *)v91);
      v75 = (uint64_t *)&v74[v73];
      memmove(v74, v72, v73);
      if (!v72)
        goto LABEL_120;
      goto LABEL_119;
    }
LABEL_135:
    abort();
  }
  v74 = 0;
  v75 = 0;
  if (*(_QWORD *)v91)
  {
LABEL_119:
    v92 = v72;
    operator delete(v72);
  }
LABEL_120:
  LOWORD(__p.__r_.__value_.__l.__data_) = 14;
  *(_QWORD *)v91 = &__p;
  v76 = std::__tree<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,grl::Allocator>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>(&v80, (unsigned __int16 *)&__p, (uint64_t)&std::piecewise_construct, (_WORD **)v91);
  v77 = v76[5];
  if (v77)
  {
    v76[6] = v77;
    operator delete(v77);
  }
  v76[5] = (uint64_t *)v74;
  v76[6] = v75;
  v76[7] = v75;
  grl::codec::ResourcePack::encodeHeaderAndData((uint64_t)&v82, (unsigned __int16 **)&v80, a3);
  if (v78[0])
  {
    v78[1] = v78[0];
    operator delete(v78[0]);
  }
  std::__tree<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,grl::Allocator>>::destroy((uint64_t)&v80, v81[0]);
  if (v82)
  {
    v83 = (char *)v82;
    operator delete(v82);
  }
  if (v85)
  {
    v86 = v85;
    operator delete(v85);
  }
}

void grl::codec::IconMapPack::~IconMapPack(grl::codec::IconMapPack *this)
{
  grl::codec::IconMapPack::~IconMapPack(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  *(_QWORD *)this = &off_1E42C2728;
  std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)this + 448, *((_QWORD **)this + 57));
  std::unordered_set<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,geo::StdAllocator<unsigned long long,mdm::Allocator>>::~unordered_set[abi:nn180100]((uint64_t *)this + 49);
  std::__tree<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::destroy((uint64_t)this + 360, *((_QWORD *)this + 46));
  std::__tree<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::destroy((uint64_t)this + 328, *((_QWORD *)this + 42));
  std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,std::string>,grl::Allocator>>::destroy((uint64_t)this + 296, *((_QWORD *)this + 38));
  std::__tree<unsigned int,std::less<unsigned int>,geo::StdAllocator<unsigned int,mdm::Allocator>>::destroy((uint64_t)this + 264, *((_QWORD **)this + 34));
  v2 = (_QWORD *)*((_QWORD *)this + 29);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__hash_table<std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,unsigned int>,std::__unordered_map_hasher<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,unsigned int>,std::hash<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>,std::equal_to<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>,true>,std::__unordered_map_equal<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,unsigned int>,std::equal_to<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>,std::hash<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>,true>,geo::StdAllocator<std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,unsigned int>,grl::Allocator>>::~__hash_table((uint64_t)(v2 + 3));
      (*(void (**)(_QWORD, _QWORD *, uint64_t))(**((_QWORD **)this + 30) + 40))(*((_QWORD *)this + 30), v2, 80);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v4)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 28) + 40))(*((_QWORD *)this + 28), v4, 8 * *((_QWORD *)this + 27));
  std::unordered_set<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,geo::StdAllocator<unsigned long long,mdm::Allocator>>::~unordered_set[abi:nn180100]((uint64_t *)this + 19);
  std::__hash_table<std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,unsigned int>,std::__unordered_map_hasher<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,unsigned int>,std::hash<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>,std::equal_to<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>,true>,std::__unordered_map_equal<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,unsigned int>,std::equal_to<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>,std::hash<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>,true>,geo::StdAllocator<std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,unsigned int>,grl::Allocator>>::~__hash_table((uint64_t)this + 96);
  v5 = (_QWORD *)*((_QWORD *)this + 8);
  if (v5)
  {
    do
    {
      v6 = (_QWORD *)*v5;
      (*(void (**)(_QWORD))(**((_QWORD **)this + 9) + 40))(*((_QWORD *)this + 9));
      v5 = v6;
    }
    while (v6);
  }
  v7 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v7)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 7) + 40))(*((_QWORD *)this + 7), v7, 8 * *((_QWORD *)this + 6));
  *(_QWORD *)this = off_1E42C27A8;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

uint64_t grl::codec::IconMapPack::resourceType(grl::codec::IconMapPack *this)
{
  return 0;
}

uint64_t std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>::__init_with_size[abi:nn180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(uint64_t result, char *a2, char *a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v7 = (_QWORD *)result;
  if (a4 > 0x16)
  {
    v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v8 = a4 | 7;
    v9 = v8 + 1;
    result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(result + 24) + 16))(*(_QWORD *)(result + 24), v8 + 1, 1);
    v7[1] = a4;
    v7[2] = v9 | 0x8000000000000000;
    *v7 = result;
    v7 = (_QWORD *)result;
  }
  else
  {
    *(_BYTE *)(result + 23) = a4;
  }
  while (a2 != a3)
  {
    v10 = *a2++;
    *(_BYTE *)v7 = v10;
    v7 = (_QWORD *)((char *)v7 + 1);
  }
  *(_BYTE *)v7 = 0;
  return result;
}

uint64_t std::equal_to<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>::operator()[abi:nn180100](uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v14;
  uint64_t result;

  v3 = a3;
  v4 = a2[23];
  if ((v4 & 0x80u) == 0)
    v5 = a2[23];
  else
    v5 = *((_QWORD *)a2 + 1);
  v6 = a3[23];
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *((_QWORD *)a3 + 1);
  if (v5 != v6)
    return 0;
  if (v7 < 0)
    v3 = *(unsigned __int8 **)a3;
  if ((v4 & 0x80) != 0)
    return memcmp(*(const void **)a2, v3, *((_QWORD *)a2 + 1)) == 0;
  if (!a2[23])
    return 1;
  v8 = v4 - 1;
  do
  {
    v10 = *a2++;
    v9 = v10;
    v12 = *v3++;
    v11 = v12;
    v14 = v8-- != 0;
    result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

uint64_t std::vector<unsigned int,geo::StdAllocator<unsigned int,grl::Allocator>>::__init_with_size[abi:nn180100]<unsigned int *,unsigned int *>(uint64_t result, _DWORD *a2, _DWORD *a3, unint64_t a4)
{
  uint64_t v6;
  _DWORD *v7;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned int,geo::StdAllocator<unsigned int,grl::Allocator>>::__vallocate[abi:nn180100](result, a4);
    v7 = *(_DWORD **)(v6 + 8);
    while (a2 != a3)
    {
      if (v7)
        *v7 = *a2;
      ++a2;
      ++v7;
    }
    *(_QWORD *)(v6 + 8) = v7;
  }
  return result;
}

uint64_t std::vector<unsigned int,geo::StdAllocator<unsigned int,grl::Allocator>>::__vallocate[abi:nn180100](uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62)
    abort();
  result = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), 4 * a2, 4);
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = result;
  *(_QWORD *)(a1 + 16) = result + 4 * a2;
  return result;
}

__n128 std::vector<unsigned int,geo::StdAllocator<unsigned int,grl::Allocator>>::__move_assign(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;
  __n128 result;

  v4 = *a1;
  if (*a1)
  {
    a1[1] = v4;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v4, a1[2] - v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  result = *a2;
  *(__n128 *)a1 = *a2;
  a1[2] = a2[1].n128_i64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

uint64_t grl::HaloGenerator::sharedHaloGenerator(grl::HaloGenerator *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&grl::HaloGenerator::sharedHaloGenerator(void)::flag);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&grl::HaloGenerator::sharedHaloGenerator(void)::flag, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<grl::HaloGenerator::sharedHaloGenerator(void)::$_0 &&>>);
  }
  return grl::HaloGenerator::sharedHaloGenerator(void)::sharedHaloGenerator;
}

void grl::HaloGenerator::generateHalo(_QWORD *a1@<X1>, _QWORD *a2@<X8>, float a3@<S0>)
{
  _QWORD *v5;
  float v6;
  float v7;
  float v8;
  float v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  uint64_t v22;
  unint64_t v23;
  float v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  unsigned int v34;
  float v35;
  float v36;
  unsigned int v37;
  float v39;
  NSObject *v40;
  unint64_t v41;
  uint64_t *v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint8_t buf[4];
  const char *v58;
  __int16 v59;
  const char *v60;
  __int16 v61;
  int v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  if (*a1 && (v5 = a1, ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 40))(*a1) & 1) != 0) && a3 > 0.0)
  {
    v6 = 0.0;
    if (a3 >= 0.0)
      v6 = a3;
    if (v6 <= 7.0)
      v7 = v6;
    else
      v7 = 7.0;
    v8 = (float)(*(unsigned int (**)(_QWORD))(*(_QWORD *)*v5 + 24))(*v5) + (float)(v7 * 2.0);
    v9 = (float)(*(unsigned int (**)(_QWORD))(*(_QWORD *)*v5 + 32))(*v5) + (float)(v7 * 2.0);
    v10 = (std::__shared_weak_count *)operator new(0x28uLL);
    v10->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    v10->__shared_weak_owners_ = 0;
    v10->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE0D8;
    v12 = v10 + 1;
    LODWORD(v13) = vcvtps_u32_f32(v8);
    LODWORD(v14) = vcvtps_u32_f32(v9);
    v15 = esl::QuartzContext::QuartzContext(&v10[1], 1, v13, v14);
    if ((((uint64_t (*)(uint64_t))v10[1].__get_deleter)(v15) & 1) != 0)
    {
      v42 = &v10->__shared_owners_;
      v43 = v10;
      if (((CGImageGetAlphaInfo(*(CGImageRef *)(*v5 + 16)) - 1) & 0xFFFFFFFD) != 0)
        v16 = 0;
      else
        v16 = 3;
      v48 = ((uint64_t (*)(std::__shared_weak_count *))v12->__vftable[10].__on_zero_shared_weak)(v12);
      v17 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v5 + 120))(*v5);
      if (((unsigned int (*)(std::__shared_weak_count *))v12->__vftable[3].~__shared_weak_count)(v12))
      {
        v18 = 0;
        v19 = vcvtps_s32_f32(v7);
        v20 = v7 * 0.9;
        v21 = v7 * 1.1;
        v51 = -v19;
        if (v19 >= 0)
          v22 = v19;
        else
          v22 = -v19;
        v55 = v22;
        v56 = v22 + 1;
        v46 = &grl::HaloGenerator::_circularFilterDistances[-16 * v19 + 112];
        v44 = v17 + v16 - 8 * v19;
        v45 = -2 * v19;
        v47 = -2 * v19;
        v54 = v5;
        v49 = v19;
        do
        {
          if (((unsigned int (*)(std::__shared_weak_count *))v12->__vftable[2].__on_zero_shared_weak)(v12))
          {
            v23 = 0;
            v52 = v44;
            v53 = v45;
            v50 = v18;
            do
            {
              v24 = 0.0;
              if ((v19 & 0x8000000000000000) == 0)
              {
                v25 = v46;
                v26 = v47;
                v27 = v51;
                while (1)
                {
                  v28 = v27 + v18;
                  if ((uint64_t)(v27 + v18) >= 0
                    && v28 < ((unsigned int (*)(std::__shared_weak_count *))v12->__vftable[3].~__shared_weak_count)(v12))
                  {
                    v29 = v28 - v19;
                    if (v29 >= 0
                      && v29 < (unint64_t)(*(unsigned int (**)(_QWORD))(*(_QWORD *)*v5 + 32))(*v5))
                    {
                      break;
                    }
                  }
LABEL_37:
                  ++v25;
                  ++v26;
                  if (v27++ == v55)
                    goto LABEL_42;
                }
                v30 = v52;
                v31 = v53;
                v32 = v25;
                v33 = v51;
                do
                {
                  if ((uint64_t)(v23 + v33) >= 0
                    && v23 + v33 < ((unsigned int (*)(std::__shared_weak_count *))v12->__vftable[2].__on_zero_shared_weak)(v12)
                    && (v31 & 0x8000000000000000) == 0
                    && v31 < (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v54 + 24))(*v54))
                  {
                    LOBYTE(v34) = *v32;
                    v35 = (float)v34 / 3.1;
                    v36 = 1.0;
                    if (v35 > v20)
                    {
                      v36 = 0.0;
                      if (v35 < v21)
                        v36 = 1.0 - (float)((float)(v35 - v20) / (float)(v21 - v20));
                    }
                    LOBYTE(v37) = *(_BYTE *)(v30
                                           + v26 * (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v54 + 136))(*v54));
                    v24 = v24 + (float)(v36 * (float)v37);
                    if (v24 >= 255.0)
                    {
                      v24 = 255.0;
                      v5 = v54;
                      v19 = v49;
                      v18 = v50;
                      goto LABEL_42;
                    }
                  }
                  ++v33;
                  v32 += 15;
                  v30 += 4;
                  ++v31;
                }
                while (v56 != v33);
                v5 = v54;
                v19 = v49;
                v18 = v50;
                if (v24 != 255.0)
                  goto LABEL_37;
                v24 = 255.0;
              }
LABEL_42:
              if (v24 >= 0.0)
                v39 = v24;
              else
                v39 = 0.0;
              if (v39 > 255.0)
                v39 = 255.0;
              *(_BYTE *)(v48
                       + v23
                       + ((uint64_t (*)(std::__shared_weak_count *))v12->__vftable[2].__on_zero_shared)(v12)
                       * v18) = llroundf(v39);
              ++v23;
              v52 += 4;
              ++v53;
            }
            while (v23 < ((unsigned int (*)(std::__shared_weak_count *))v12->__vftable[2].__on_zero_shared_weak)(v12));
          }
          ++v18;
          ++v47;
        }
        while (v18 < ((unsigned int (*)(std::__shared_weak_count *))v12->__vftable[3].~__shared_weak_count)(v12));
      }
      ((void (*)(std::__shared_weak_count *))v12->__vftable[9].__on_zero_shared_weak)(v12);
      p_shared_owners = (unint64_t *)v42;
      v10 = v43;
    }
    else
    {
      if (GEOGetGeoResourceLibEaselLog::onceToken != -1)
        dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_22_0);
      v40 = GEOGetGeoResourceLibEaselLog::log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v58 = "!GRL_UNIQUE_NAME(didTriggerAssert)";
        v59 = 2080;
        v60 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/HaloGenerator.cpp";
        v61 = 1024;
        v62 = 103;
        _os_log_impl(&dword_19F029000, v40, OS_LOG_TYPE_ERROR, "Failed to create grayscale context for holding stroke image.: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
      }
      *a2 = 0;
      a2[1] = 0;
    }
    do
      v41 = __ldaxr(p_shared_owners);
    while (__stlxr(v41 - 1, p_shared_owners));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

uint64_t std::__call_once_proxy[abi:nn180100]<std::tuple<grl::HaloGenerator::sharedHaloGenerator(void)::$_0 &&>>()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v0 = 1;
  result = operator new();
  byte_1EE5773D8 = 0;
  v2 = 0x60u;
  v3 = 0x7Eu;
  v4 = 0x62u;
  v5 = 0x80u;
  do
  {
    v6 = -7;
    v7 = v5;
    v8 = v4;
    v9 = v3;
    v10 = v2;
    do
    {
      v11 = llroundf(sqrtf((float)((float)(v6 + 8) * (float)(v6 + 8)) + (float)((float)(int)v0 * (float)(int)v0)) * 3.1);
      grl::HaloGenerator::_circularFilterDistances[v7++] = v11;
      grl::HaloGenerator::_circularFilterDistances[v9] = v11;
      grl::HaloGenerator::_circularFilterDistances[v8] = v11;
      grl::HaloGenerator::_circularFilterDistances[v10--] = v11;
      --v9;
      ++v8;
    }
    while (!__CFADD__(v6++, 1));
    ++v0;
    v2 -= 15;
    v3 += 15;
    v4 -= 15;
    v5 += 15;
  }
  while (v0 != 8);
  grl::HaloGenerator::sharedHaloGenerator(void)::sharedHaloGenerator = result;
  return result;
}

void grl::codec::IconDataPack::packLog(grl::codec::IconDataPack *this)
{
  std::mutex *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  const std::locale::facet *v7;
  _QWORD *v8;
  std::locale::id *v9;
  const std::locale::facet *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  const std::locale::facet *v14;
  uint64_t v15;
  void *__p[2];
  unsigned __int8 v17;
  _QWORD v18[2];
  _QWORD v19[11];
  char v20;
  uint64_t v21;
  std::locale v22;

  v2 = (std::mutex *)((char *)this + 336);
  std::mutex::lock((std::mutex *)((char *)this + 336));
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v18);
  v3 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)"IconDataPack: ", 14);
  grl::codec::ResourcePack::fileName(this, (uint64_t)__p);
  if ((v17 & 0x80u) == 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if ((v17 & 0x80u) == 0)
    v5 = v17;
  else
    v5 = (uint64_t)__p[1];
  v6 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
  std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(_QWORD *)(*v6 - 24)));
  v7 = std::locale::use_facet(&v22, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
  std::locale::~locale(&v22);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v17 < 0)
    operator delete(__p[0]);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)"Number of Atlas Images: ", 24);
  v8 = (_QWORD *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(_QWORD *)(*v8 - 24)));
  v9 = (std::locale::id *)MEMORY[0x1E0DE4A90];
  v10 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)"Cache| hits: ", 13);
  v11 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v11, (uint64_t)" misses: ", 9);
  v12 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v12, (uint64_t)" hitRate: ", 10);
  v13 = (_QWORD *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(_QWORD *)(*v13 - 24)));
  v14 = std::locale::use_facet((const std::locale *)__p, v9);
  ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  std::stringbuf::str();
  v18[0] = *MEMORY[0x1E0DE4F50];
  v15 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v18 + *(_QWORD *)(v18[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v19[0] = v15;
  v19[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v20 < 0)
    operator delete((void *)v19[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1A1AF4D64](&v21);
  std::mutex::unlock(v2);
}

void grl::codec::IconDataPack::encode(grl::codec::IconDataPack **this@<X0>, __int16 a2@<W1>, _QWORD *a3@<X8>)
{
  grl::Allocator *v6;
  void *v7;
  size_t v8;
  char *v9;
  char *v10;
  int64_t v11;
  uint64_t **v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t **v15;
  uint64_t *v16;
  _QWORD *v17;
  size_t v18;
  grl::codec::IconDataPack *v19;
  grl::codec::IconDataPack *v20;
  grl::codec::IconDataPack *v21;
  BOOL v22;
  _QWORD **v23;
  _QWORD *v24;
  _QWORD **v25;
  void *v26;
  size_t v27;
  char *v28;
  uint64_t *v29;
  uint64_t **v30;
  uint64_t *v31;
  _QWORD **v32;
  _QWORD *v33[2];
  uint64_t v34;
  void *__p[2];
  uint64_t *v36;
  uint64_t *v37;
  _QWORD *v38[3];
  void *v39;
  char *v40;
  char *v41;
  void *v42;
  _BYTE *v43;
  uint64_t v44;
  char v45;
  unsigned __int8 v46[8];
  void *v47;
  uint64_t v48;
  char v49;
  unsigned __int8 v50[4];

  v42 = 0;
  v43 = 0;
  v45 = 0;
  v44 = 0;
  v46[0] = 73;
  geo::obitstream::appendBytes((geo::obitstream *)&v42, (char *)v46, 1);
  v46[0] = 67;
  geo::obitstream::appendBytes((geo::obitstream *)&v42, (char *)v46, 1);
  v46[0] = 79;
  geo::obitstream::appendBytes((geo::obitstream *)&v42, (char *)v46, 1);
  v46[0] = 78;
  geo::obitstream::appendBytes((geo::obitstream *)&v42, (char *)v46, 1);
  v46[0] = 68;
  geo::obitstream::appendBytes((geo::obitstream *)&v42, (char *)v46, 1);
  v46[0] = 65;
  geo::obitstream::appendBytes((geo::obitstream *)&v42, (char *)v46, 1);
  v46[0] = 84;
  geo::obitstream::appendBytes((geo::obitstream *)&v42, (char *)v46, 1);
  v46[0] = 65;
  geo::obitstream::appendBytes((geo::obitstream *)&v42, (char *)v46, 1);
  v46[0] = 80;
  geo::obitstream::appendBytes((geo::obitstream *)&v42, (char *)v46, 1);
  v46[0] = 65;
  geo::obitstream::appendBytes((geo::obitstream *)&v42, (char *)v46, 1);
  v46[0] = 67;
  geo::obitstream::appendBytes((geo::obitstream *)&v42, (char *)v46, 1);
  v46[0] = 75;
  geo::obitstream::appendBytes((geo::obitstream *)&v42, (char *)v46, 1);
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v7 = v42;
  v8 = v43 - (_BYTE *)v42;
  if (v43 == v42)
  {
    v9 = 0;
    v10 = 0;
  }
  else
  {
    if (v43 - (_BYTE *)v42 < 0)
      goto LABEL_42;
    v9 = (char *)operator new(v43 - (_BYTE *)v42);
    v10 = &v9[v8];
    v39 = v9;
    v41 = &v9[v8];
    v6 = (grl::Allocator *)memmove(v9, v7, v8);
    v40 = &v9[v8];
  }
  v11 = v10 - v9;
  if ((unint64_t)(v10 - v9) > 0x3F)
  {
    if (v11 != 64)
      v40 = v9 + 64;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)&v39, 64 - v11);
  }
  v38[0] = 0;
  v38[1] = (_QWORD *)grl::Allocator::instance(v6);
  v38[2] = 0;
  v37 = (uint64_t *)v38;
  grl::codec::ResourcePack::encodePackInfo((grl::codec::ResourcePack *)this, a2, __p);
  LOWORD(v32) = 1;
  *(_QWORD *)v46 = &v32;
  v12 = std::__tree<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,grl::Allocator>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>(&v37, (unsigned __int16 *)&v32, (uint64_t)&std::piecewise_construct, (_WORD **)v46);
  v13 = v12[5];
  if (v13)
  {
    v12[6] = v13;
    operator delete(v13);
  }
  *(_OWORD *)(v12 + 5) = *(_OWORD *)__p;
  v12[7] = v36;
  __p[1] = 0;
  v36 = 0;
  __p[0] = 0;
  LOWORD(v32) = 1;
  *(_QWORD *)v46 = &v32;
  v14 = std::__tree<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,grl::Allocator>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>(&v37, (unsigned __int16 *)&v32, (uint64_t)&std::piecewise_construct, (_WORD **)v46);
  *((_BYTE *)v14 + 64) = 1;
  v33[0] = 0;
  v33[1] = (_QWORD *)grl::Allocator::instance((grl::Allocator *)v14);
  v34 = 0;
  v32 = v33;
  *(_WORD *)v50 = 14;
  *(_QWORD *)v46 = v50;
  v15 = std::__tree<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,grl::Allocator>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>(&v37, (unsigned __int16 *)v50, (uint64_t)&std::piecewise_construct, (_WORD **)v46);
  v17 = v15 + 5;
  v16 = v15[5];
  if (v16)
  {
    v15[6] = v16;
    operator delete(v16);
  }
  *v17 = 0;
  v17[1] = 0;
  v17[2] = 0;
  *(_WORD *)v50 = 14;
  *(_QWORD *)v46 = v50;
  *((_BYTE *)std::__tree<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,grl::Allocator>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>(&v37, (unsigned __int16 *)v50, (uint64_t)&std::piecewise_construct, (_WORD **)v46)+ 64) = 0;
  v18 = 20 * (_QWORD)this[8];
  *(_QWORD *)v46 = 0;
  v47 = 0;
  v49 = 0;
  v48 = 0;
  std::vector<unsigned char>::reserve((unint64_t *)v46, v18);
  *(_DWORD *)v50 = this[8];
  geo::obitstream::appendBytes((geo::obitstream *)v46, (char *)v50, 4);
  v19 = this[5];
  if (v19 != (grl::codec::IconDataPack *)(this + 6))
  {
    do
    {
      *(_DWORD *)v50 = *((_DWORD *)v19 + 7);
      geo::obitstream::appendBytes((geo::obitstream *)v46, (char *)v50, 4);
      *(_WORD *)v50 = *((_WORD *)v19 + 16);
      geo::obitstream::appendBytes((geo::obitstream *)v46, (char *)v50, 2);
      *(_DWORD *)v50 = *((_DWORD *)v19 + 9);
      geo::obitstream::appendBytes((geo::obitstream *)v46, (char *)v50, 4);
      *(_DWORD *)v50 = *((_DWORD *)v19 + 10);
      geo::obitstream::appendBytes((geo::obitstream *)v46, (char *)v50, 4);
      *(_DWORD *)v50 = *((_DWORD *)v19 + 11);
      geo::obitstream::appendBytes((geo::obitstream *)v46, (char *)v50, 4);
      *(_DWORD *)v50 = *((_DWORD *)v19 + 12);
      geo::obitstream::appendBytes((geo::obitstream *)v46, (char *)v50, 4);
      v20 = (grl::codec::IconDataPack *)*((_QWORD *)v19 + 1);
      if (v20)
      {
        do
        {
          v21 = v20;
          v20 = *(grl::codec::IconDataPack **)v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          v21 = (grl::codec::IconDataPack *)*((_QWORD *)v19 + 2);
          v22 = *(_QWORD *)v21 == (_QWORD)v19;
          v19 = v21;
        }
        while (!v22);
      }
      v19 = v21;
    }
    while (v21 != (grl::codec::IconDataPack *)(this + 6));
  }
  *(_WORD *)v50 = v34;
  geo::obitstream::appendBytes((geo::obitstream *)v46, (char *)v50, 2);
  v23 = v32;
  if (v32 != v33)
  {
    do
    {
      *(_WORD *)v50 = *((_WORD *)v23 + 14);
      geo::obitstream::appendBytes((geo::obitstream *)v46, (char *)v50, 2);
      *(_DWORD *)v50 = *((_DWORD *)v23 + 8);
      geo::obitstream::appendBytes((geo::obitstream *)v46, (char *)v50, 4);
      *(_DWORD *)v50 = *((_DWORD *)v23 + 9);
      geo::obitstream::appendBytes((geo::obitstream *)v46, (char *)v50, 4);
      v24 = v23[1];
      if (v24)
      {
        do
        {
          v25 = (_QWORD **)v24;
          v24 = (_QWORD *)*v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          v25 = (_QWORD **)v23[2];
          v22 = *v25 == v23;
          v23 = v25;
        }
        while (!v22);
      }
      v23 = v25;
    }
    while (v25 != v33);
  }
  v26 = *(void **)v46;
  v27 = (size_t)v47 - *(_QWORD *)v46;
  if (v47 != *(void **)v46)
  {
    if ((uint64_t)v47 - *(_QWORD *)v46 >= 0)
    {
      v28 = (char *)operator new((size_t)v47 - *(_QWORD *)v46);
      v29 = (uint64_t *)&v28[v27];
      memmove(v28, v26, v27);
      if (!v26)
        goto LABEL_31;
      goto LABEL_30;
    }
LABEL_42:
    abort();
  }
  v28 = 0;
  v29 = 0;
  if (*(_QWORD *)v46)
  {
LABEL_30:
    v47 = v26;
    operator delete(v26);
  }
LABEL_31:
  strcpy((char *)v50, "\r");
  *(_QWORD *)v46 = v50;
  v30 = std::__tree<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,grl::Allocator>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>(&v37, (unsigned __int16 *)v50, (uint64_t)&std::piecewise_construct, (_WORD **)v46);
  v31 = v30[5];
  if (v31)
  {
    v30[6] = v31;
    operator delete(v31);
  }
  v30[5] = (uint64_t *)v28;
  v30[6] = v29;
  v30[7] = v29;
  strcpy((char *)v50, "\r");
  *(_QWORD *)v46 = v50;
  *((_BYTE *)std::__tree<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,grl::Allocator>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>(&v37, (unsigned __int16 *)v50, (uint64_t)&std::piecewise_construct, (_WORD **)v46)+ 64) = 1;
  grl::codec::ResourcePack::encodeHeaderAndData((uint64_t)&v39, (unsigned __int16 **)&v37, a3);
  std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)&v32, v33[0]);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  std::__tree<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,grl::Allocator>>::destroy((uint64_t)&v37, v38[0]);
  if (v39)
  {
    v40 = (char *)v39;
    operator delete(v39);
  }
  if (v42)
  {
    v43 = v42;
    operator delete(v42);
  }
}

void grl::codec::IconDataPack::~IconDataPack(grl::codec::IconDataPack *this)
{
  grl::codec::IconDataPack::~IconDataPack(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  uint64_t v2;
  grl::codec::IconDataPack *v3;
  uint64_t v4;
  grl::codec::IconDataPack *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;

  *(_QWORD *)this = &off_1E42C2768;
  std::mutex::~mutex((std::mutex *)((char *)this + 336));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 184);
  std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)this + 152, *((_QWORD **)this + 20));
  if (*((_QWORD *)this + 17))
  {
    v2 = *((_QWORD *)this + 15);
    v3 = (grl::codec::IconDataPack *)*((_QWORD *)this + 16);
    v4 = *(_QWORD *)v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(v2 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    *((_QWORD *)this + 17) = 0;
    if (v3 != (grl::codec::IconDataPack *)((char *)this + 120))
    {
      do
      {
        v5 = (grl::codec::IconDataPack *)*((_QWORD *)v3 + 1);
        std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)v3 + 24);
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != (grl::codec::IconDataPack *)((char *)this + 120));
    }
  }
  v6 = (_QWORD *)*((_QWORD *)this + 12);
  if (v6)
  {
    do
    {
      v7 = (_QWORD *)*v6;
      operator delete(v6);
      v6 = v7;
    }
    while (v7);
  }
  v8 = (void *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v8)
    operator delete(v8);
  std::__tree<std::__value_type<unsigned int,grl::codec::IconDataPack::ImageIndex>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,grl::codec::IconDataPack::ImageIndex>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,grl::codec::IconDataPack::ImageIndex>,grl::Allocator>>::destroy((uint64_t)this + 40, *((_QWORD **)this + 6));
  *(_QWORD *)this = off_1E42C27A8;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

uint64_t grl::codec::IconDataPack::resourceType(grl::codec::IconDataPack *this)
{
  return 0;
}

uint64_t std::__tree<std::__value_type<unsigned int,grl::codec::IconDataPack::ImageIndex>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,grl::codec::IconDataPack::ImageIndex>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,grl::codec::IconDataPack::ImageIndex>,grl::Allocator>>::destroy(uint64_t result, _QWORD *a2)
{
  uint64_t v3;

  if (a2)
  {
    v3 = result;
    std::__tree<std::__value_type<unsigned int,grl::codec::IconDataPack::ImageIndex>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,grl::codec::IconDataPack::ImageIndex>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,grl::codec::IconDataPack::ImageIndex>,grl::Allocator>>::destroy(result, *a2);
    std::__tree<std::__value_type<unsigned int,grl::codec::IconDataPack::ImageIndex>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,grl::codec::IconDataPack::ImageIndex>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,grl::codec::IconDataPack::ImageIndex>,grl::Allocator>>::destroy(v3, a2[1]);
    return (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(v3 + 16) + 40))(*(_QWORD *)(v3 + 16), a2, 56);
  }
  return result;
}

void geo::Cache<unsigned short,std::shared_ptr<esl::QuartzImage>,std::hash<unsigned short>,geo::LRUPolicy>::_pop(uint64_t a1)
{
  uint64_t **v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned __int16 v10;
  uint64_t v11;
  std::__shared_weak_count *v12;

  v3 = *(_QWORD *)(a1 + 48);
  v2 = (uint64_t **)(a1 + 48);
  v10 = *(_WORD *)(v3 + 16);
  v4 = *(std::__shared_weak_count **)(v3 + 32);
  v11 = *(_QWORD *)(v3 + 24);
  v12 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  std::list<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>>::pop_back(v2);
  std::__hash_table<std::__hash_value_type<unsigned short,std::__list_iterator<std::pair<unsigned short,std::shared_ptr<esl::QuartzImage>>,void *>>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,std::__list_iterator<std::pair<unsigned short,std::shared_ptr<esl::QuartzImage>>,void *>>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,std::__list_iterator<std::pair<unsigned short,std::shared_ptr<esl::QuartzImage>>,void *>>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,std::__list_iterator<std::pair<unsigned short,std::shared_ptr<esl::QuartzImage>>,void *>>>>::__erase_unique<unsigned short>((_QWORD *)(a1 + 8), &v10);
  v7 = v12;
  if (v12)
  {
    v8 = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned short,std::__list_iterator<std::pair<unsigned short,std::shared_ptr<esl::QuartzImage>>,void *>>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,std::__list_iterator<std::pair<unsigned short,std::shared_ptr<esl::QuartzImage>>,void *>>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,std::__list_iterator<std::pair<unsigned short,std::shared_ptr<esl::QuartzImage>>,void *>>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,std::__list_iterator<std::pair<unsigned short,std::shared_ptr<esl::QuartzImage>>,void *>>>>::__erase_unique<unsigned short>(_QWORD *a1, unsigned __int16 *a2)
{
  uint64_t *result;

  result = (uint64_t *)std::__hash_table<std::__hash_value_type<unsigned short,std::__list_iterator<std::pair<unsigned short,std::shared_ptr<esl::QuartzImage>>,void *>>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,std::__list_iterator<std::pair<unsigned short,std::shared_ptr<esl::QuartzImage>>,void *>>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,std::__list_iterator<std::pair<unsigned short,std::shared_ptr<esl::QuartzImage>>,void *>>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,std::__list_iterator<std::pair<unsigned short,std::shared_ptr<esl::QuartzImage>>,void *>>>>::find<unsigned short>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>,std::__unordered_map_hasher<grl::codec::IconConfigPack::IconLocationIndex,std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>,grl::codec::IconConfigPack::IconLocationIndexHash,std::equal_to<grl::codec::IconConfigPack::IconLocationIndex>,true>,std::__unordered_map_equal<grl::codec::IconConfigPack::IconLocationIndex,std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>,std::equal_to<grl::codec::IconConfigPack::IconLocationIndex>,grl::codec::IconConfigPack::IconLocationIndexHash,true>,std::allocator<std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

_QWORD *std::__function::__func<grl::codec::IconDataPack::imageForID(unsigned int)::$_0,std::allocator<grl::codec::IconDataPack::imageForID(unsigned int)::$_0>,std::shared_ptr<esl::QuartzImage> ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E42D81B0;
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<grl::codec::IconDataPack::imageForID(unsigned int)::$_0,std::allocator<grl::codec::IconDataPack::imageForID(unsigned int)::$_0>,std::shared_ptr<esl::QuartzImage> ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E42D81B0;
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<grl::codec::IconDataPack::imageForID(unsigned int)::$_0,std::allocator<grl::codec::IconDataPack::imageForID(unsigned int)::$_0>,std::shared_ptr<esl::QuartzImage> ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E42D81B0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

void std::__function::__func<grl::codec::IconDataPack::imageForID(unsigned int)::$_0,std::allocator<grl::codec::IconDataPack::imageForID(unsigned int)::$_0>,std::shared_ptr<esl::QuartzImage> ()(void)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t grl::codec::ImageLayerData::toString(grl::codec::ImageLayerData *this)
{
  _QWORD *v2;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v5;
  std::string *v6;
  std::string::size_type v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const char *v17;
  char *v18;
  std::string *v19;
  std::string::size_type v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  char *v25;
  std::string *v26;
  std::string::size_type v27;
  _QWORD *v28;
  std::string *v29;
  std::string::size_type v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  std::string *v40;
  std::string::size_type v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  std::string *v51;
  std::string::size_type v52;
  _QWORD *v53;
  unint64_t v54;
  char *v55;
  std::string *v56;
  std::string::size_type v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  std::string *v67;
  std::string::size_type v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  const char *v74;
  char *v75;
  std::string *v76;
  std::string::size_type v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  unint64_t v81;
  char *v82;
  std::string *v83;
  std::string::size_type v84;
  _QWORD *v85;
  std::string *v86;
  std::string::size_type v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  _QWORD *v92;
  _QWORD *v93;
  _QWORD *v94;
  _QWORD *v95;
  _QWORD *v96;
  _QWORD *v97;
  _QWORD *v98;
  std::string *v99;
  std::string::size_type v100;
  _QWORD *v101;
  std::string *v102;
  std::string::size_type v103;
  _QWORD *v104;
  _QWORD *v105;
  _QWORD *v106;
  std::string *v107;
  std::string::size_type v108;
  uint64_t v109;
  std::string __p;
  _QWORD v112[2];
  _QWORD v113[11];
  char v114;
  uint64_t v115;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v112);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v113, (uint64_t)"{ ", 2);
  v2 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v113, (uint64_t)"blendMode: ", 11);
  grl::toString<esl::BlendMode>(*((unsigned __int8 *)this + 32), &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v2, (uint64_t)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v5 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v113, (uint64_t)", changeHaloAndShadowOrder: ", 28);
  std::to_string(&__p, *((unsigned __int8 *)this + 33));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = &__p;
  else
    v6 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v7 = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, v7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v8 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v113, (uint64_t)", fillColor: ", 13);
  v9 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v8, (uint64_t)"(", 1);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 34);
  v10 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v9, (uint64_t)&__p, 1);
  v11 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v10, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 35);
  v12 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v11, (uint64_t)&__p, 1);
  v13 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v12, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 36);
  v14 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)&__p, 1);
  v15 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 37);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v15, (uint64_t)&__p, 1);
  v16 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v113, (uint64_t)", fillColorSource: ", 19);
  v17 = (const char *)&str_10_1;
  if (*((_BYTE *)this + 38) == 1)
    v17 = "TransitLine";
  if (*((_BYTE *)this + 38))
    v18 = (char *)v17;
  else
    v18 = "IconPack";
  std::string::basic_string[abi:nn180100]<0>(&__p, v18);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v19 = &__p;
  else
    v19 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v20 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v20 = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v16, (uint64_t)v19, v20);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v21 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v113, (uint64_t)", fillSize: ", 12);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v21, (uint64_t)"(", 1);
  v22 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v22, (uint64_t)", ", 2);
  std::ostream::operator<<();
  v23 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v113, (uint64_t)", fillType: ", 12);
  v24 = *((char *)this + 48);
  if (v24 > 2)
    v25 = (char *)&str_10_1;
  else
    v25 = (&off_1E4314F88)[v24];
  std::string::basic_string[abi:nn180100]<0>(&__p, v25);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v26 = &__p;
  else
    v26 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v27 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v27 = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v23, (uint64_t)v26, v27);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v28 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v113, (uint64_t)", gradientAngle: ", 17);
  std::to_string(&__p, *((float *)this + 13));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v29 = &__p;
  else
    v29 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v30 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v30 = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v28, (uint64_t)v29, v30);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v31 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v113, (uint64_t)", gradientEndColor: ", 20);
  v32 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v31, (uint64_t)"(", 1);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 56);
  v33 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v32, (uint64_t)&__p, 1);
  v34 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v33, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 57);
  v35 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v34, (uint64_t)&__p, 1);
  v36 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v35, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 58);
  v37 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v36, (uint64_t)&__p, 1);
  v38 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v37, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 59);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v38, (uint64_t)&__p, 1);
  v39 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v113, (uint64_t)", gradientEndLocation: ", 23);
  std::to_string(&__p, *((float *)this + 15));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v40 = &__p;
  else
    v40 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v41 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v41 = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v39, (uint64_t)v40, v41);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v42 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v113, (uint64_t)", gradientStartColor: ", 22);
  v43 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v42, (uint64_t)"(", 1);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 64);
  v44 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v43, (uint64_t)&__p, 1);
  v45 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v44, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 65);
  v46 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v45, (uint64_t)&__p, 1);
  v47 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v46, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 66);
  v48 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v47, (uint64_t)&__p, 1);
  v49 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v48, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 67);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v49, (uint64_t)&__p, 1);
  v50 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v113, (uint64_t)", gradientStartLocation: ", 25);
  std::to_string(&__p, *((float *)this + 17));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v51 = &__p;
  else
    v51 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v52 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v52 = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v50, (uint64_t)v51, v52);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v53 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v113, (uint64_t)", gradientType: ", 16);
  v54 = *((char *)this + 72);
  v55 = (char *)&str_10_1;
  if (v54 <= 3)
    v55 = (&off_1E4314FA0)[v54];
  std::string::basic_string[abi:nn180100]<0>(&__p, v55);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v56 = &__p;
  else
    v56 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v57 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v57 = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v53, (uint64_t)v56, v57);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v58 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v113, (uint64_t)", haloColor: ", 13);
  v59 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v58, (uint64_t)"(", 1);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 73);
  v60 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v59, (uint64_t)&__p, 1);
  v61 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v60, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 74);
  v62 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v61, (uint64_t)&__p, 1);
  v63 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v62, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 75);
  v64 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v63, (uint64_t)&__p, 1);
  v65 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v64, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 76);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v65, (uint64_t)&__p, 1);
  v66 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v113, (uint64_t)", haloWeight: ", 14);
  std::to_string(&__p, *((float *)this + 20));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v67 = &__p;
  else
    v67 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v68 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v68 = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v66, (uint64_t)v67, v68);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v69 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v113, (uint64_t)", horizontalPadding: ", 21);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v69, (uint64_t)"(", 1);
  v70 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v70, (uint64_t)", ", 2);
  std::ostream::operator<<();
  v71 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v113, (uint64_t)", horizontalStretchPadding: ", 28);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v71, (uint64_t)"(", 1);
  v72 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v72, (uint64_t)", ", 2);
  std::ostream::operator<<();
  v73 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v113, (uint64_t)", imageDataSource: ", 19);
  v74 = "External";
  if (*((_BYTE *)this + 100) != 1)
    v74 = (const char *)&str_10_1;
  if (*((_BYTE *)this + 100))
    v75 = (char *)v74;
  else
    v75 = "IconPack";
  std::string::basic_string[abi:nn180100]<0>(&__p, v75);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v76 = &__p;
  else
    v76 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v77 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v77 = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v73, (uint64_t)v76, v77);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v78 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v113, (uint64_t)", imageOffset: ", 15);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v78, (uint64_t)"(", 1);
  v79 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v79, (uint64_t)", ", 2);
  std::ostream::operator<<();
  v80 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v113, (uint64_t)", imageStretchType: ", 20);
  v81 = *((char *)this + 112);
  if (v81 > 2)
    v82 = (char *)&str_10_1;
  else
    v82 = (&off_1E4314FC0)[v81];
  std::string::basic_string[abi:nn180100]<0>(&__p, v82);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v83 = &__p;
  else
    v83 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v84 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v84 = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v80, (uint64_t)v83, v84);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v85 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v113, (uint64_t)", opacity: ", 11);
  std::to_string(&__p, *((float *)this + 29));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v86 = &__p;
  else
    v86 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v87 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v87 = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v85, (uint64_t)v86, v87);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v88 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v113, (uint64_t)", shadowColor: ", 15);
  v89 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v88, (uint64_t)"(", 1);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 120);
  v90 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v89, (uint64_t)&__p, 1);
  v91 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v90, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 121);
  v92 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v91, (uint64_t)&__p, 1);
  v93 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v92, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 122);
  v94 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v93, (uint64_t)&__p, 1);
  v95 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v94, (uint64_t)", ", 2);
  __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 123);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v95, (uint64_t)&__p, 1);
  v96 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v113, (uint64_t)", shadowOffset: ", 16);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v96, (uint64_t)"(", 1);
  v97 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v97, (uint64_t)", ", 2);
  std::ostream::operator<<();
  v98 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v113, (uint64_t)", shadowWeight: ", 16);
  std::to_string(&__p, *((float *)this + 33));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v99 = &__p;
  else
    v99 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v100 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v100 = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v98, (uint64_t)v99, v100);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v101 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v113, (uint64_t)", useShapeRect: ", 16);
  std::to_string(&__p, *((unsigned __int8 *)this + 136));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v102 = &__p;
  else
    v102 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v103 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v103 = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v101, (uint64_t)v102, v103);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v104 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v113, (uint64_t)", verticalPadding: ", 19);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v104, (uint64_t)"(", 1);
  v105 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v105, (uint64_t)", ", 2);
  std::ostream::operator<<();
  v106 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v113, (uint64_t)", visible: ", 11);
  std::to_string(&__p, *((unsigned __int8 *)this + 148));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v107 = &__p;
  else
    v107 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v108 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v108 = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v106, (uint64_t)v107, v108);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v113, (uint64_t)" }", 2);
  std::stringbuf::str();
  v112[0] = *MEMORY[0x1E0DE4F50];
  v109 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v112 + *(_QWORD *)(v112[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v113[0] = v109;
  v113[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v114 < 0)
    operator delete((void *)v113[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1A1AF4D64](&v115);
}

uint64_t grl::codec::ImageLayerData::encode@<X0>(grl::codec::ImageLayerData *this@<X0>, _QWORD *a2@<X8>)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t *v14;
  _QWORD *v15;
  grl::Allocator *v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  grl::Allocator *v20;
  uint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  grl::Allocator *v24;
  uint64_t v25;
  uint64_t *v26;
  _QWORD *v27;
  grl::Allocator *v28;
  uint64_t v29;
  _QWORD **v30;
  _QWORD *v31;
  grl::Allocator *v32;
  uint64_t v33;
  uint64_t *v34;
  _QWORD *v35;
  grl::Allocator *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39[3];
  _BYTE v40[24];

  v15 = 0;
  v16 = (grl::Allocator *)grl::Allocator::instance(this);
  v17 = 0;
  v14 = (uint64_t *)&v15;
  v19 = 0;
  v20 = (grl::Allocator *)grl::Allocator::instance(v16);
  v21 = 0;
  v18 = (uint64_t *)&v19;
  v23 = 0;
  v24 = (grl::Allocator *)grl::Allocator::instance(v20);
  v25 = 0;
  v22 = (uint64_t *)&v23;
  v27 = 0;
  v28 = (grl::Allocator *)grl::Allocator::instance(v24);
  v29 = 0;
  v26 = (uint64_t *)&v27;
  v31 = 0;
  v32 = (grl::Allocator *)grl::Allocator::instance(v28);
  v33 = 0;
  v30 = &v31;
  v35 = 0;
  v36 = (grl::Allocator *)grl::Allocator::instance(v32);
  v37 = 0;
  v34 = (uint64_t *)&v35;
  v39[0] = 0;
  v39[1] = grl::Allocator::instance(v36);
  v39[2] = 0;
  v38 = v39;
  *(_QWORD *)v40 = ((unint64_t)*((unsigned __int8 *)this + 32) << 32) | 8;
  std::__tree<std::__value_type<grl::PropertyID,int>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,int>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,int>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,int>>(&v18, (unsigned __int16 *)v40, (uint64_t)v40);
  if (*((_BYTE *)this + 33))
    v3 = 65548;
  else
    v3 = 12;
  *(_DWORD *)v40 = v3;
  std::__tree<std::__value_type<grl::PropertyID,BOOL>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,BOOL>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,BOOL>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,BOOL>>(&v14, (unsigned __int16 *)v40, (uint64_t)v40);
  *(_WORD *)v40 = 5;
  *(_DWORD *)&v40[2] = *(_DWORD *)((char *)this + 34);
  std::__tree<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>>(&v34, (unsigned __int16 *)v40, (uint64_t)v40);
  *(_QWORD *)v40 = ((unint64_t)*((unsigned __int8 *)this + 38) << 32) | 0x23;
  std::__tree<std::__value_type<grl::PropertyID,int>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,int>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,int>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,int>>(&v18, (unsigned __int16 *)v40, (uint64_t)v40);
  *(_WORD *)v40 = 1;
  v4 = *((_QWORD *)this + 5);
  *(_QWORD *)&v40[4] = v4;
  std::__tree<std::__value_type<grl::PropertyID,gm::Matrix<float,2,1>>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,gm::Matrix<float,2,1>>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,gm::Matrix<float,2,1>>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,gm::Matrix<float,2,1>>>(&v26, (unsigned __int16 *)v40, (uint64_t)v40);
  *(_QWORD *)v40 = ((unint64_t)*((unsigned __int8 *)this + 48) << 32) | 0x12;
  std::__tree<std::__value_type<grl::PropertyID,int>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,int>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,int>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,int>>(&v18, (unsigned __int16 *)v40, (uint64_t)v40);
  *(_QWORD *)v40 = ((unint64_t)*((unsigned int *)this + 13) << 32) | 0x27;
  std::__tree<std::__value_type<grl::PropertyID,float>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,float>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,float>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,float>>(&v22, (unsigned __int16 *)v40, (uint64_t)v40);
  *(_WORD *)v40 = 17;
  *(_DWORD *)&v40[2] = *((_DWORD *)this + 14);
  std::__tree<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>>(&v34, (unsigned __int16 *)v40, (uint64_t)v40);
  *(_QWORD *)v40 = ((unint64_t)*((unsigned int *)this + 15) << 32) | 0x21;
  std::__tree<std::__value_type<grl::PropertyID,float>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,float>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,float>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,float>>(&v22, (unsigned __int16 *)v40, (uint64_t)v40);
  *(_WORD *)v40 = 16;
  *(_DWORD *)&v40[2] = *((_DWORD *)this + 16);
  std::__tree<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>>(&v34, (unsigned __int16 *)v40, (uint64_t)v40);
  *(_QWORD *)v40 = ((unint64_t)*((unsigned int *)this + 17) << 32) | 0x20;
  std::__tree<std::__value_type<grl::PropertyID,float>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,float>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,float>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,float>>(&v22, (unsigned __int16 *)v40, (uint64_t)v40);
  *(_QWORD *)v40 = ((unint64_t)*((unsigned __int8 *)this + 72) << 32) | 0x28;
  std::__tree<std::__value_type<grl::PropertyID,int>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,int>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,int>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,int>>(&v18, (unsigned __int16 *)v40, (uint64_t)v40);
  *(_WORD *)v40 = 6;
  *(_DWORD *)&v40[2] = *(_DWORD *)((char *)this + 73);
  std::__tree<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>>(&v34, (unsigned __int16 *)v40, (uint64_t)v40);
  *(_QWORD *)v40 = ((unint64_t)*((unsigned int *)this + 20) << 32) | 2;
  std::__tree<std::__value_type<grl::PropertyID,float>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,float>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,float>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,float>>(&v22, (unsigned __int16 *)v40, (uint64_t)v40);
  strcpy(v40, "\n");
  v5 = *(_QWORD *)((char *)this + 84);
  *(_QWORD *)&v40[4] = v5;
  std::__tree<std::__value_type<grl::PropertyID,gm::Matrix<float,2,1>>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,gm::Matrix<float,2,1>>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,gm::Matrix<float,2,1>>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,gm::Matrix<float,2,1>>>(&v26, (unsigned __int16 *)v40, (uint64_t)v40);
  strcpy(v40, "$");
  v6 = *(_QWORD *)((char *)this + 92);
  *(_QWORD *)&v40[4] = v6;
  std::__tree<std::__value_type<grl::PropertyID,gm::Matrix<float,2,1>>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,gm::Matrix<float,2,1>>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,gm::Matrix<float,2,1>>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,gm::Matrix<float,2,1>>>(&v26, (unsigned __int16 *)v40, (uint64_t)v40);
  *(_QWORD *)v40 = ((unint64_t)*((unsigned __int8 *)this + 100) << 32) | 0x30;
  std::__tree<std::__value_type<grl::PropertyID,int>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,int>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,int>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,int>>(&v18, (unsigned __int16 *)v40, (uint64_t)v40);
  if (*((_BYTE *)this + 149))
  {
    strcpy(v40, "*");
    v7 = *((_QWORD *)this + 13);
    *(_QWORD *)&v40[4] = v7;
    std::__tree<std::__value_type<grl::PropertyID,gm::Matrix<float,2,1>>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,gm::Matrix<float,2,1>>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,gm::Matrix<float,2,1>>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,gm::Matrix<float,2,1>>>(&v26, (unsigned __int16 *)v40, (uint64_t)v40);
  }
  *(_QWORD *)v40 = ((unint64_t)*((unsigned __int8 *)this + 112) << 32) | 9;
  std::__tree<std::__value_type<grl::PropertyID,int>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,int>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,int>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,int>>(&v18, (unsigned __int16 *)v40, (uint64_t)v40);
  *(_QWORD *)v40 = ((unint64_t)*((unsigned int *)this + 29) << 32) | 0x2E;
  std::__tree<std::__value_type<grl::PropertyID,float>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,float>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,float>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,float>>(&v22, (unsigned __int16 *)v40, (uint64_t)v40);
  strcpy(v40, "\a");
  *(_DWORD *)&v40[2] = *((_DWORD *)this + 30);
  std::__tree<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,geo::Color<unsigned char,4,(geo::ColorSpace)2>>>(&v34, (unsigned __int16 *)v40, (uint64_t)v40);
  *(_WORD *)v40 = 4;
  v8 = *(_QWORD *)((char *)this + 124);
  *(_QWORD *)&v40[4] = v8;
  std::__tree<std::__value_type<grl::PropertyID,gm::Matrix<float,2,1>>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,gm::Matrix<float,2,1>>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,gm::Matrix<float,2,1>>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,gm::Matrix<float,2,1>>>(&v26, (unsigned __int16 *)v40, (uint64_t)v40);
  *(_QWORD *)v40 = ((unint64_t)*((unsigned int *)this + 33) << 32) | 3;
  std::__tree<std::__value_type<grl::PropertyID,float>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,float>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,float>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,float>>(&v22, (unsigned __int16 *)v40, (uint64_t)v40);
  if (*((_BYTE *)this + 136))
    v9 = 65581;
  else
    v9 = 45;
  *(_DWORD *)v40 = v9;
  std::__tree<std::__value_type<grl::PropertyID,BOOL>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,BOOL>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,BOOL>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,BOOL>>(&v14, (unsigned __int16 *)v40, (uint64_t)v40);
  strcpy(v40, "\v");
  v10 = *(_QWORD *)((char *)this + 140);
  *(_QWORD *)&v40[4] = v10;
  std::__tree<std::__value_type<grl::PropertyID,gm::Matrix<float,2,1>>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,gm::Matrix<float,2,1>>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,gm::Matrix<float,2,1>>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,gm::Matrix<float,2,1>>>(&v26, (unsigned __int16 *)v40, (uint64_t)v40);
  if (*((_BYTE *)this + 148))
    v11 = 65551;
  else
    v11 = 15;
  *(_DWORD *)v40 = v11;
  std::__tree<std::__value_type<grl::PropertyID,BOOL>,std::__map_value_compare<grl::PropertyID,std::__value_type<grl::PropertyID,BOOL>,std::less<grl::PropertyID>,true>,geo::StdAllocator<std::__value_type<grl::PropertyID,BOOL>,grl::Allocator>>::__emplace_unique_key_args<grl::PropertyID,std::pair<grl::PropertyID,BOOL>>(&v14, (unsigned __int16 *)v40, (uint64_t)v40);
  grl::PropertySet::encode((grl::PropertySet *)&v14, a2);
  std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,std::string>,grl::Allocator>>::destroy((uint64_t)&v38, v39[0]);
  std::__tree<unsigned int,std::less<unsigned int>,geo::StdAllocator<unsigned int,mdm::Allocator>>::destroy((uint64_t)&v34, v35);
  std::__tree<std::__value_type<VKTrafficFeatureType,unsigned long>,std::__map_value_compare<VKTrafficFeatureType,std::__value_type<VKTrafficFeatureType,unsigned long>,std::less<VKTrafficFeatureType>,true>,geo::StdAllocator<std::__value_type<VKTrafficFeatureType,unsigned long>,mdm::Allocator>>::destroy((uint64_t)&v30, v31);
  std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)&v26, v27);
  std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)&v22, v23);
  std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)&v18, v19);
  return std::__tree<unsigned int,std::less<unsigned int>,geo::StdAllocator<unsigned int,mdm::Allocator>>::destroy((uint64_t)&v14, v15);
}

_QWORD *grl::buildStringFromResourceNames@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[11];
  char v11;
  uint64_t v12;

  if (!a1 || !a2)
    return std::string::basic_string[abi:nn180100]<0>(a3, "nullptr");
  v4 = a1;
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v10);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v10, (uint64_t)"[", 1);
  v5 = 0;
  do
  {
    v6 = *(char *)(v4 + 23);
    if (v6 >= 0)
      v7 = v4;
    else
      v7 = *(_QWORD *)v4;
    if (v6 >= 0)
      v8 = *(unsigned __int8 *)(v4 + 23);
    else
      v8 = *(_QWORD *)(v4 + 8);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v10, v7, v8);
    if (v5 < a2 - 1)
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v10, (uint64_t)", ", 2);
    ++v5;
    v4 += 24;
  }
  while (a2 != v5);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::stringbuf::str();
  v10[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v10[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v11 < 0)
    operator delete((void *)v10[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (_QWORD *)MEMORY[0x1A1AF4D64](&v12);
}

uint64_t grl::IconManager::IconManager(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  grl::IconManager::PackInfo *v9;
  grl::Allocator *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  v6 = *a2;
  v5 = a2[1];
  *(_QWORD *)a1 = &unk_1E42C2580;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *(_QWORD *)(a1 + 24) = 850045863;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 73) = 0u;
  *(_QWORD *)a1 = &off_1E42C2530;
  v9 = (grl::IconManager::PackInfo *)operator new();
  *(_QWORD *)(a1 + 96) = grl::IconManager::PackInfo::PackInfo(v9, -1);
  std::__shared_mutex_base::__shared_mutex_base((std::__shared_mutex_base *)(a1 + 104));
  v10 = (grl::Allocator *)std::__shared_mutex_base::__shared_mutex_base((std::__shared_mutex_base *)(a1 + 272));
  *(_QWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 456) = grl::Allocator::instance(v10);
  *(_QWORD *)(a1 + 464) = 0;
  *(_QWORD *)(a1 + 440) = a1 + 448;
  *(_QWORD *)(a1 + 472) = -1;
  *(_QWORD *)(a1 + 480) = -1;
  *(_QWORD *)(a1 + 488) = -1;
  v11 = a3[1];
  *(_QWORD *)(a1 + 496) = *a3;
  *(_QWORD *)(a1 + 504) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  grl::ResourceProvider::addObserver(*(_QWORD *)(a1 + 8), a1);
  return a1;
}

void grl::IconManager::~IconManager(grl::IconManager *this)
{
  char *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E42C2530;
  v2 = (char *)this + 8;
  grl::ResourceProvider::removeObserver(*((_QWORD *)this + 1), (uint64_t)this);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 63);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  std::__tree<std::__value_type<std::pair<std::string,float>,std::mutex>,std::__map_value_compare<std::pair<std::string,float>,std::__value_type<std::pair<std::string,float>,std::mutex>,std::less<std::pair<std::string,float>>,true>,geo::StdAllocator<std::__value_type<std::pair<std::string,float>,std::mutex>,grl::Allocator>>::destroy((uint64_t)this + 440, *((_QWORD *)this + 56));
  std::condition_variable::~condition_variable((std::condition_variable *)this + 8);
  std::condition_variable::~condition_variable((std::condition_variable *)this + 7);
  std::mutex::~mutex((std::mutex *)((char *)this + 272));
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 216));
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 168));
  std::mutex::~mutex((std::mutex *)((char *)this + 104));
  v6 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v6)
    std::default_delete<grl::IconManager::PackInfo>::operator()[abi:nn180100](v6);
  *(_QWORD *)this = &unk_1E42C2580;
  std::mutex::~mutex((std::mutex *)((char *)this + 24));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)v2);
}

{
  grl::IconManager::~IconManager(this);
  JUMPOUT(0x1A1AF4E00);
}

void grl::IconManager::imageForDataID(uint64_t a1@<X0>, unsigned int a2@<W1>, IconModifiers *a3@<X2>, float *a4@<X3>, unsigned int *a5@<X4>, _QWORD *a6@<X8>)
{
  float v12;
  grl::codec::IconMapPack *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t GlobalResourcePack;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unsigned int v27;
  NSObject *v28;
  unint64_t *v29;
  unint64_t v30;
  NSObject *v31;
  unsigned int v32;
  uint8_t buf[8];
  _QWORD v34[3];
  void *__p;
  _QWORD *v36;
  uint64_t v37;
  float v38[4];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v12 = ceilf(*a4);
  v32 = a2;
  std::string::basic_string[abi:nn180100]<0>(&__p, "Default");
  v38[0] = v12;
  grl::IconManager::retrieveResourcePack(buf, a1, (const void **)&__p, 2);
  v13 = *(grl::codec::IconMapPack **)buf;
  v14 = (std::__shared_weak_count *)v34[0];
  if (!v34[0])
    goto LABEL_6;
  v15 = (unint64_t *)(v34[0] + 8);
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if (v13)
      goto LABEL_7;
  }
  else
  {
LABEL_6:
    if (v13)
    {
LABEL_7:
      v18 = v14;
      goto LABEL_22;
    }
  }
  GlobalResourcePack = (uint64_t)grl::IconManager::loadGlobalResourcePack(buf, a1, (uint64_t)&__p);
  v13 = *(grl::codec::IconMapPack **)buf;
  v18 = (std::__shared_weak_count *)v34[0];
  if (v34[0])
  {
    v20 = (unint64_t *)(v34[0] + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v24 = (std::__shared_weak_count *)v34[0];
  if (!v34[0])
    goto LABEL_21;
  v25 = (unint64_t *)(v34[0] + 8);
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
    if (!v13)
      goto LABEL_33;
  }
  else
  {
LABEL_21:
    if (!v13)
      goto LABEL_33;
  }
LABEL_22:
  GlobalResourcePack = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,geo::StdAllocator<std::__hash_value_type<unsigned int,unsigned int>,grl::Allocator>>::find<unsigned int>((_QWORD *)v13 + 19, &v32);
  if (GlobalResourcePack)
  {
    v27 = *(_DWORD *)(GlobalResourcePack + 20);
    if (v27)
    {
LABEL_26:
      if (!v18)
        goto LABEL_38;
      goto LABEL_34;
    }
  }
  GlobalResourcePack = grl::codec::IconMapPack::dataIDFallback(v13, &v32);
  if ((_DWORD)GlobalResourcePack)
  {
    v27 = GlobalResourcePack;
    goto LABEL_26;
  }
  if (GEOGetGeoResourceLibIconManagerLog::onceToken != -1)
    dispatch_once(&GEOGetGeoResourceLibIconManagerLog::onceToken, &__block_literal_global_1);
  v28 = GEOGetGeoResourceLibIconManagerLog::log;
  GlobalResourcePack = os_log_type_enabled((os_log_t)GEOGetGeoResourceLibIconManagerLog::log, OS_LOG_TYPE_ERROR);
  if ((_DWORD)GlobalResourcePack)
  {
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = v32;
    LOWORD(v34[0]) = 2048;
    *(double *)((char *)v34 + 2) = v12;
    _os_log_impl(&dword_19F029000, v28, OS_LOG_TYPE_ERROR, "Failed to find ID for Data Identifier\nData Identifier: %i - Content Scale: %f", buf, 0x12u);
  }
LABEL_33:
  v27 = 0;
  if (!v18)
    goto LABEL_38;
LABEL_34:
  v29 = (unint64_t *)&v18->__shared_owners_;
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
LABEL_38:
  if (SHIBYTE(v37) < 0)
    operator delete(__p);
  if (a5)
    *a5 = v27;
  if (v27)
  {
    v36 = 0;
    v37 = grl::Allocator::instance((grl::Allocator *)GlobalResourcePack);
    *(_QWORD *)v38 = 0;
    __p = &v36;
    grl::IconManager::imageForIconID(a1, v27, a3, (uint64_t)a4, &__p, (uint64_t)a5, a6);
    std::__tree<std::__value_type<unsigned short,grl::ImageData>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::ImageData>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::ImageData>,grl::Allocator>>::destroy((uint64_t)&__p, v36);
  }
  else
  {
    if (GEOGetGeoResourceLibIconManagerLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibIconManagerLog::onceToken, &__block_literal_global_1);
    v31 = GEOGetGeoResourceLibIconManagerLog::log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibIconManagerLog::log, OS_LOG_TYPE_ERROR))
    {
      LODWORD(__p) = 67109120;
      HIDWORD(__p) = a2;
      _os_log_impl(&dword_19F029000, v31, OS_LOG_TYPE_ERROR, "Failed to find Icon ID for Data ID: %i", (uint8_t *)&__p, 8u);
    }
    *a6 = 0;
    a6[1] = 0;
  }
}

uint64_t grl::IconManager::multiPOIBalloonContent@<X0>(grl::Allocator *a1@<X0>, uint64_t **a2@<X1>, unsigned int a3@<W2>, const grl::IconModifiers *a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t *v8;
  uint64_t *v9;
  unsigned int v10;
  unsigned int v11;
  BOOL v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  float v17;
  float v18;
  float v19;
  float v20;
  uint64_t v21;
  float *v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned __int8 *v29;
  unint64_t *v30;
  unint64_t v31;
  CGColorSpace *DeviceRGB;
  CGContext *v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  std::__shared_weak_count *v37;
  float *v38;
  unint64_t *v39;
  unint64_t v40;
  float v41;
  double v42;
  float v43;
  double v44;
  float v45;
  float v46;
  float v47;
  float v48;
  double v49;
  float v50;
  CGFloat v51;
  float v52;
  float v53;
  unint64_t *v54;
  unint64_t v55;
  CGImage *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  float v59;
  unsigned int v60;
  unint64_t v61;
  CGImageRef *v62;
  uint64_t (***v63)();
  uint64_t v64;
  uint64_t v65;
  CGImageRef *v66;
  _QWORD *v67;
  uint64_t *v68;
  uint64_t **v69;
  uint64_t **v70;
  unsigned int v71;
  unsigned int v72;
  uint64_t v73;
  unint64_t v74;
  _QWORD *v76;
  uint64_t v77;
  uint64_t *v78;
  char v83;
  int v84;
  uint64_t **v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t (**v89)();
  CGImageRef image[3];
  CGImageRef *v91;
  IconModifiers v92;
  uint64_t (**v93)();
  unint64_t v94;
  std::__shared_weak_count *v95;
  uint64_t (***v96)();
  uint64_t v97;
  CGRect v98;

  v97 = *MEMORY[0x1E0C80C00];
  v86 = 0;
  v87 = grl::Allocator::instance(a1);
  v88 = 0;
  v85 = &v86;
  grl::IconModifiers::IconModifiers((grl::IconModifiers *)&v92, a4);
  v83 = 0;
  v8 = *a2;
  v9 = a2[1];
  v78 = (uint64_t *)a2;
  if (*a2 == v9)
  {
    v11 = 0;
    v10 = 0;
LABEL_33:
    v84 = -11250604;
    v83 = 1;
    goto LABEL_34;
  }
  v10 = 0;
  v11 = 0;
  v12 = 0;
  do
  {
    v14 = *v8;
    v13 = (std::__shared_weak_count *)v8[1];
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
    }
    v18 = *(float *)(v14 + 48);
    v17 = *(float *)(v14 + 52);
    v20 = *(float *)(v14 + 40);
    v19 = *(float *)(v14 + 44);
    LODWORD(v89) = 1;
    BYTE4(v89) = 0;
    v21 = std::__tree<std::__value_type<grl::IconLayerMapKey,std::unique_ptr<grl::LayerMetrics>>,std::__map_value_compare<grl::IconLayerMapKey,std::__value_type<grl::IconLayerMapKey,std::unique_ptr<grl::LayerMetrics>>,grl::IconLayerMapKey,false>,geo::StdAllocator<std::__value_type<grl::IconLayerMapKey,std::unique_ptr<grl::LayerMetrics>>,grl::Allocator>>::find<grl::IconLayerMapKey>(v14 + 96, (__int16 *)&v89);
    if (v14 + 104 == v21)
      v22 = 0;
    else
      v22 = *(float **)(v21 + 40);
    if (*(_BYTE *)(v14 + 163))
    {
      LODWORD(v89) = gm::Box<float,2>::operator+(v22 + 3, v22 + 13);
      HIDWORD(v89) = v23;
      image[0] = (CGImageRef)__PAIR64__(v25, v24);
      LODWORD(v93) = gm::Box<float,2>::operator+(v22 + 7, v22 + 13);
      HIDWORD(v93) = v26;
      v94 = __PAIR64__(v28, v27);
      if (!gm::Box<float,2>::operator==(&v89, &v93))
      {
        if (v83)
        {
          v29 = (unsigned __int8 *)(v14 + 163);
LABEL_16:
          v12 = geo::optional<geo::Color<unsigned char,4,(geo::ColorSpace)2>>::operator==((uint64_t)&v83, v29);
          goto LABEL_21;
        }
        v12 = 1;
        if (!*(_BYTE *)(v14 + 163))
          goto LABEL_21;
        v84 = *(_DWORD *)(v14 + 164);
LABEL_20:
        v83 = 1;
        goto LABEL_21;
      }
    }
    v29 = (unsigned __int8 *)(v14 + 153);
    if (*(_BYTE *)(v14 + 153))
    {
      if (v83)
        goto LABEL_16;
      v84 = *(_DWORD *)(v14 + 154);
      v12 = 1;
      goto LABEL_20;
    }
LABEL_21:
    if (v13)
    {
      v30 = (unint64_t *)&v13->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *, unsigned __int8 *))v13->__on_zero_shared)(v13, v29);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v11 += (float)(v18 - v20);
    v10 = fmax((double)v10, (float)(v17 - v19));
    v8 += 2;
  }
  while (v8 != v9);
  if (v12)
  {
    if (!v83)
      goto LABEL_37;
    goto LABEL_34;
  }
  if (!v83)
    goto LABEL_33;
  v84 = -11250604;
LABEL_34:
  if (!v92._pathScale._value.data[6])
    v92._pathScale._value.data[6] = 1;
  *(_DWORD *)((char *)&v92._pathScale._value.type + 7) = v84;
LABEL_37:
  DeviceRGB = CGColorSpaceCreateDeviceRGB();
  v33 = CGBitmapContextCreate(0, v11, v10, 8uLL, 4 * v11, DeviceRGB, 2u);
  v34 = *v78;
  v35 = v78[1];
  if (*v78 != v35)
  {
    v36 = 0.0;
    do
    {
      v38 = *(float **)v34;
      v37 = *(std::__shared_weak_count **)(v34 + 8);
      if (v37)
      {
        v39 = (unint64_t *)&v37->__shared_owners_;
        do
          v40 = __ldxr(v39);
        while (__stxr(v40 + 1, v39));
      }
      v89 = (uint64_t (**)())__PAIR64__((float)((float)(v38[11] - v38[13]) + (float)v10) * 0.5, LODWORD(v36));
      v41 = gm::Box<float,2>::operator+(v38 + 10, (float *)&v89);
      v42 = v41;
      v44 = v43;
      v46 = v45 - v41;
      v48 = v47 - v43;
      if (v46 < 0.0)
        v46 = 0.0;
      v49 = v46;
      if (v48 >= 0.0)
        v50 = v48;
      else
        v50 = 0.0;
      v51 = v50;
      grl::IconImage::image((grl::IconImage *)v38, &v89);
      v98.origin.x = v42;
      v98.origin.y = v44;
      v98.size.width = v49;
      v98.size.height = v51;
      CGContextDrawImage(v33, v98, image[0]);
      v89 = &off_1E42B4870;
      if (image[0])
        CFRelease(image[0]);
      v52 = v38[10];
      if ((float)(v38[12] - v52) >= 0.0)
        v53 = v38[12] - v52;
      else
        v53 = 0.0;
      if (v37)
      {
        v54 = (unint64_t *)&v37->__shared_owners_;
        do
          v55 = __ldaxr(v54);
        while (__stlxr(v55 - 1, v54));
        if (!v55)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      v36 = v36 + v53;
      v34 += 16;
    }
    while (v34 != v35);
  }
  v56 = CGBitmapContextCreateImage(v33);
  CFRelease(DeviceRGB);
  CFRelease(v33);
  v57 = (std::__shared_weak_count *)operator new(0x40uLL);
  v57->__shared_owners_ = 0;
  v58 = (unint64_t *)&v57->__shared_owners_;
  v57->__shared_weak_owners_ = 0;
  v57->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE0A0;
  esl::QuartzImage::QuartzImage((esl::QuartzImage *)&v57[1], v56);
  CFRelease(v56);
  v91 = 0;
  v59 = (float)((unsigned int (*)(std::__shared_weak_count *))v57[1].__get_deleter)(&v57[1]);
  v60 = ((uint64_t (*)(std::__shared_weak_count *))v57[1].__on_zero_shared_weak)(&v57[1]);
  *(float *)&v89 = v59;
  *((float *)&v89 + 1) = (float)v60;
  do
    v61 = __ldxr(v58);
  while (__stxr(v61 + 1, v58));
  v62 = image;
  v93 = &off_1E42D8090;
  v94 = (unint64_t)&v57[1];
  v95 = v57;
  v96 = &v93;
  std::__function::__value_func<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::swap[abi:nn180100](&v93, image);
  v63 = v96;
  if (v96 == &v93)
  {
    v64 = 4;
    v63 = &v93;
LABEL_64:
    (*v63)[v64]();
  }
  else if (v96)
  {
    v64 = 5;
    goto LABEL_64;
  }
  v65 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v87 + 16))(v87, 80, 8);
  *(_WORD *)(v65 + 32) = 0;
  v66 = v91;
  *(_QWORD *)(v65 + 40) = v89;
  v67 = (_QWORD *)(v65 + 48);
  if (v66)
  {
    if (v66 == image)
    {
      *(_QWORD *)(v65 + 72) = v67;
      (*((void (**)(CGImageRef *, uint64_t))image[0] + 3))(image, v65 + 48);
    }
    else
    {
      *(_QWORD *)(v65 + 72) = (*((uint64_t (**)(CGImageRef *))*v66 + 2))(v66);
    }
  }
  else
  {
    *(_QWORD *)(v65 + 72) = 0;
  }
  v68 = v86;
  v69 = &v86;
  v70 = &v86;
  if (v86)
  {
    v71 = *(unsigned __int16 *)(v65 + 32);
    while (1)
    {
      while (1)
      {
        v70 = (uint64_t **)v68;
        v72 = *((unsigned __int16 *)v68 + 16);
        if (v71 >= v72)
          break;
        v68 = *v70;
        v69 = v70;
        if (!*v70)
          goto LABEL_78;
      }
      if (v72 >= v71)
        break;
      v68 = v70[1];
      if (!v68)
      {
        v69 = v70 + 1;
        goto LABEL_78;
      }
    }
    if (v65)
    {
      v76 = *(_QWORD **)(v65 + 72);
      if (v76 == v67)
      {
        v77 = 4;
LABEL_96:
        (*(void (**)(_QWORD *))(*v67 + 8 * v77))(v67);
      }
      else if (v76)
      {
        v77 = 5;
        v67 = *(_QWORD **)(v65 + 72);
        goto LABEL_96;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v87 + 40))(v87, v65, 80);
    }
  }
  else
  {
LABEL_78:
    *(_QWORD *)v65 = 0;
    *(_QWORD *)(v65 + 8) = 0;
    *(_QWORD *)(v65 + 16) = v70;
    *v69 = (uint64_t *)v65;
    if (*v85)
    {
      v85 = (uint64_t **)*v85;
      v65 = (uint64_t)*v69;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v86, (uint64_t *)v65);
    ++v88;
  }
  grl::IconManager::imageForIconID((uint64_t)a1, a3, &v92, a5, &v85, 0, a6);
  if (v91 == image)
  {
    v73 = 4;
LABEL_85:
    (*((void (**)(CGImageRef *))*v62 + v73))(v62);
  }
  else if (v91)
  {
    v73 = 5;
    v62 = v91;
    goto LABEL_85;
  }
  grl::IconModifiers::~IconModifiers((grl::IconModifiers *)&v92);
  do
    v74 = __ldaxr(v58);
  while (__stlxr(v74 - 1, v58));
  if (!v74)
  {
    ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
    std::__shared_weak_count::__release_weak(v57);
  }
  return std::__tree<std::__value_type<unsigned short,grl::ImageData>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::ImageData>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::ImageData>,grl::Allocator>>::destroy((uint64_t)&v85, v86);
}

BOOL geo::optional<geo::Color<unsigned char,4,(geo::ColorSpace)2>>::operator==(uint64_t a1, unsigned __int8 *a2)
{
  int v2;
  BOOL v3;

  v2 = *a2;
  if (*(_BYTE *)a1)
    v3 = v2 == 0;
  else
    v3 = 1;
  if (v3)
    return (*(_BYTE *)a1 != 0) ^ (v2 == 0);
  else
    return *(_DWORD *)(a1 + 1) == *(_DWORD *)(a2 + 1);
}

void grl::IconManager::removeAllPacks(grl::IconManager *this)
{
  std::__shared_mutex_base *v2;
  grl::IconManager::PackInfo *v3;
  uint64_t v4;

  v2 = (std::__shared_mutex_base *)((char *)this + 104);
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)((char *)this + 104));
  v3 = (grl::IconManager::PackInfo *)operator new();
  grl::IconManager::PackInfo::PackInfo(v3, *((_QWORD *)this + 61));
  v4 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = v3;
  if (v4)
    std::default_delete<grl::IconManager::PackInfo>::operator()[abi:nn180100](v4);
  std::__shared_mutex_base::unlock(v2);
}

void grl::IconManager::clearFontCache(grl::IconManager *this)
{
  grl::FontManager *v1;

  v1 = (grl::FontManager *)*((_QWORD *)this + 62);
  if (v1)
    grl::FontManager::clearFontCache(v1);
}

void grl::IconManager::packLogs(grl::IconManager *this@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_mutex_base *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  std::locale::id *v9;
  const std::locale::facet *v10;
  _QWORD *v11;
  const std::locale::facet *v12;
  _QWORD *v13;
  const std::locale::facet *v14;
  _QWORD *v15;
  const std::locale::facet *v16;
  const std::locale::facet *v17;
  _QWORD *v18;
  const std::locale::facet *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::locale::id *v23;
  _QWORD *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  const std::locale::facet *v30;
  void *locale;
  uint64_t v32;
  std::locale::id *v33;
  const std::locale::facet *v34;
  _QWORD *v35;
  const std::locale::facet *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  std::locale::id *v40;
  _QWORD *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  const std::locale::facet *v47;
  void *v48;
  uint64_t v49;
  std::locale::id *v50;
  const std::locale::facet *v51;
  _QWORD *v52;
  const std::locale::facet *v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  std::locale::id *v58;
  _QWORD *v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  const std::locale::facet *v65;
  void *v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  BOOL v70;
  uint64_t v71;
  std::__shared_mutex_base *v72;
  grl::IconManager *v73;
  std::locale v74;
  uint64_t v75;
  unsigned __int8 v76;
  _QWORD v77[2];
  _QWORD v78[11];
  char v79;
  uint64_t v80;

  v4 = (std::__shared_mutex_base *)((char *)this + 104);
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)((char *)this + 104));
  if (*((_QWORD *)this + 12))
  {
    v72 = v4;
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v77);
    v5 = v78[0];
    *(_DWORD *)((char *)&v78[1] + *(_QWORD *)(v78[0] - 24)) = *(_DWORD *)((_BYTE *)&v78[1] + *(_QWORD *)(v78[0] - 24)) & 0xFFFFFEFB | 4;
    *(_QWORD *)((char *)&v78[2] + *(_QWORD *)(v5 - 24)) = 1;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v78, (uint64_t)"hits=", 5);
    v6 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v6, (uint64_t)" misses=", 8);
    v7 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v7, (uint64_t)"hit%=", 5);
    v8 = (_QWORD *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(_QWORD *)(*v8 - 24)));
    v9 = (std::locale::id *)MEMORY[0x1E0DE4A90];
    v10 = std::locale::use_facet(&v74, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
    std::locale::~locale(&v74);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v78, (uint64_t)"Number of Config Packs: ", 24);
    v11 = (_QWORD *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(_QWORD *)(*v11 - 24)));
    v12 = std::locale::use_facet(&v74, v9);
    ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
    std::locale::~locale(&v74);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v78, (uint64_t)"Number of Image Packs: ", 23);
    v13 = (_QWORD *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(_QWORD *)(*v13 - 24)));
    v14 = std::locale::use_facet(&v74, v9);
    ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
    std::locale::~locale(&v74);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v78, (uint64_t)"Number of Map Packs: ", 21);
    v15 = (_QWORD *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(_QWORD *)(*v15 - 24)));
    v16 = std::locale::use_facet(&v74, v9);
    ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
    std::locale::~locale(&v74);
    std::ostream::put();
    std::ostream::flush();
    std::ios_base::getloc((const std::ios_base *)((char *)v78 + *(_QWORD *)(v78[0] - 24)));
    v17 = std::locale::use_facet(&v74, v9);
    ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
    std::locale::~locale(&v74);
    std::ostream::put();
    std::ostream::flush();
    v18 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v78, (uint64_t)"Config Packs: ", 14);
    std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(_QWORD *)(*v18 - 24)));
    v19 = std::locale::use_facet(&v74, v9);
    ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
    std::locale::~locale(&v74);
    std::ostream::put();
    std::ostream::flush();
    v73 = this;
    v20 = *((_QWORD *)this + 12);
    v21 = v20 + 152;
    v22 = *(_QWORD *)(v20 + 160);
    if (v22 != v20 + 152)
    {
      v23 = (std::locale::id *)MEMORY[0x1E0DE4A90];
      do
      {
        v24 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v78, (uint64_t)"Pack Key: ", 10);
        v25 = *(char *)(v22 + 39);
        if (v25 >= 0)
          v26 = v22 + 16;
        else
          v26 = *(_QWORD *)(v22 + 16);
        if (v25 >= 0)
          v27 = *(unsigned __int8 *)(v22 + 39);
        else
          v27 = *(_QWORD *)(v22 + 24);
        v28 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v24, v26, v27);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v28, (uint64_t)" - ", 3);
        v29 = (_QWORD *)std::ostream::operator<<();
        std::ios_base::getloc((const std::ios_base *)((char *)v29 + *(_QWORD *)(*v29 - 24)));
        v30 = std::locale::use_facet(&v74, v23);
        ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
        std::locale::~locale(&v74);
        std::ostream::put();
        std::ostream::flush();
        (*(void (**)(std::locale *__return_ptr))(**(_QWORD **)(v22 + 48) + 40))(&v74);
        if ((v76 & 0x80u) == 0)
          locale = &v74;
        else
          locale = v74.__locale_;
        if ((v76 & 0x80u) == 0)
          v32 = v76;
        else
          v32 = v75;
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v78, (uint64_t)locale, v32);
        if ((char)v76 < 0)
          operator delete(v74.__locale_);
        v22 = *(_QWORD *)(v22 + 8);
      }
      while (v22 != v21);
    }
    std::ios_base::getloc((const std::ios_base *)((char *)v78 + *(_QWORD *)(v78[0] - 24)));
    v33 = (std::locale::id *)MEMORY[0x1E0DE4A90];
    v34 = std::locale::use_facet(&v74, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v34->__vftable[2].~facet_0)(v34, 10);
    std::locale::~locale(&v74);
    std::ostream::put();
    std::ostream::flush();
    v35 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v78, (uint64_t)"Image Packs: ", 13);
    std::ios_base::getloc((const std::ios_base *)((char *)v35 + *(_QWORD *)(*v35 - 24)));
    v36 = std::locale::use_facet(&v74, v33);
    ((void (*)(const std::locale::facet *, uint64_t))v36->__vftable[2].~facet_0)(v36, 10);
    std::locale::~locale(&v74);
    std::ostream::put();
    std::ostream::flush();
    v37 = *((_QWORD *)v73 + 12);
    v38 = v37 + 80;
    v39 = *(_QWORD *)(v37 + 88);
    if (v39 != v37 + 80)
    {
      v40 = (std::locale::id *)MEMORY[0x1E0DE4A90];
      do
      {
        v41 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v78, (uint64_t)"Pack Key: ", 10);
        v42 = *(char *)(v39 + 39);
        if (v42 >= 0)
          v43 = v39 + 16;
        else
          v43 = *(_QWORD *)(v39 + 16);
        if (v42 >= 0)
          v44 = *(unsigned __int8 *)(v39 + 39);
        else
          v44 = *(_QWORD *)(v39 + 24);
        v45 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v41, v43, v44);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v45, (uint64_t)" - ", 3);
        v46 = (_QWORD *)std::ostream::operator<<();
        std::ios_base::getloc((const std::ios_base *)((char *)v46 + *(_QWORD *)(*v46 - 24)));
        v47 = std::locale::use_facet(&v74, v40);
        ((void (*)(const std::locale::facet *, uint64_t))v47->__vftable[2].~facet_0)(v47, 10);
        std::locale::~locale(&v74);
        std::ostream::put();
        std::ostream::flush();
        (*(void (**)(std::locale *__return_ptr))(**(_QWORD **)(v39 + 48) + 40))(&v74);
        if ((v76 & 0x80u) == 0)
          v48 = &v74;
        else
          v48 = v74.__locale_;
        if ((v76 & 0x80u) == 0)
          v49 = v76;
        else
          v49 = v75;
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v78, (uint64_t)v48, v49);
        if ((char)v76 < 0)
          operator delete(v74.__locale_);
        v39 = *(_QWORD *)(v39 + 8);
      }
      while (v39 != v38);
    }
    std::ios_base::getloc((const std::ios_base *)((char *)v78 + *(_QWORD *)(v78[0] - 24)));
    v50 = (std::locale::id *)MEMORY[0x1E0DE4A90];
    v51 = std::locale::use_facet(&v74, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v51->__vftable[2].~facet_0)(v51, 10);
    std::locale::~locale(&v74);
    std::ostream::put();
    std::ostream::flush();
    v52 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v78, (uint64_t)"Map Packs: ", 11);
    std::ios_base::getloc((const std::ios_base *)((char *)v52 + *(_QWORD *)(*v52 - 24)));
    v53 = std::locale::use_facet(&v74, v50);
    ((void (*)(const std::locale::facet *, uint64_t))v53->__vftable[2].~facet_0)(v53, 10);
    std::locale::~locale(&v74);
    std::ostream::put();
    std::ostream::flush();
    v54 = (_QWORD *)*((_QWORD *)v73 + 12);
    v57 = (_QWORD *)*v54;
    v56 = v54 + 1;
    v55 = v57;
    if (v57 != v56)
    {
      v58 = (std::locale::id *)MEMORY[0x1E0DE4A90];
      do
      {
        v59 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v78, (uint64_t)"Pack Key: ", 10);
        v60 = *((char *)v55 + 55);
        if (v60 >= 0)
          v61 = (uint64_t)(v55 + 4);
        else
          v61 = v55[4];
        if (v60 >= 0)
          v62 = *((unsigned __int8 *)v55 + 55);
        else
          v62 = v55[5];
        v63 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v59, v61, v62);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v63, (uint64_t)" - ", 3);
        v64 = (_QWORD *)std::ostream::operator<<();
        std::ios_base::getloc((const std::ios_base *)((char *)v64 + *(_QWORD *)(*v64 - 24)));
        v65 = std::locale::use_facet(&v74, v58);
        ((void (*)(const std::locale::facet *, uint64_t))v65->__vftable[2].~facet_0)(v65, 10);
        std::locale::~locale(&v74);
        std::ostream::put();
        std::ostream::flush();
        (*(void (**)(std::locale *__return_ptr))(*(_QWORD *)v55[8] + 40))(&v74);
        if ((v76 & 0x80u) == 0)
          v66 = &v74;
        else
          v66 = v74.__locale_;
        if ((v76 & 0x80u) == 0)
          v67 = v76;
        else
          v67 = v75;
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v78, (uint64_t)v66, v67);
        if ((char)v76 < 0)
          operator delete(v74.__locale_);
        v68 = (_QWORD *)v55[1];
        if (v68)
        {
          do
          {
            v69 = v68;
            v68 = (_QWORD *)*v68;
          }
          while (v68);
        }
        else
        {
          do
          {
            v69 = (_QWORD *)v55[2];
            v70 = *v69 == (_QWORD)v55;
            v55 = v69;
          }
          while (!v70);
        }
        v55 = v69;
      }
      while (v69 != v56);
    }
    std::stringbuf::str();
    v77[0] = *MEMORY[0x1E0DE4F50];
    v71 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
    *(_QWORD *)((char *)v77 + *(_QWORD *)(v77[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
    v78[0] = v71;
    v78[1] = MEMORY[0x1E0DE4FB8] + 16;
    if (v79 < 0)
      operator delete((void *)v78[9]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1A1AF4D64](&v80);
    v4 = v72;
  }
  else
  {
    std::string::basic_string[abi:nn180100]<0>(a2, "Pack Info Is Null");
  }
  std::__shared_mutex_base::unlock_shared(v4);
}

grl::IconModifiers *grl::IconModifiers::IconModifiers(grl::IconModifiers *this, const grl::IconModifiers *a2)
{
  uint64_t v4;
  uint64_t **v5;
  const grl::IconModifiers *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  char *v10;
  BOOL v11;
  unsigned int v12;
  uint64_t **v13;
  uint64_t **v14;
  unsigned int v15;
  uint64_t v16;
  std::string *v17;
  __int128 v18;
  const grl::IconModifiers *v19;
  const grl::IconModifiers *v20;
  _BYTE *v21;
  _BYTE *v22;
  int64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  *(_OWORD *)this = *(_OWORD *)a2;
  *((_BYTE *)this + 16) = 0;
  if (*((_BYTE *)a2 + 16))
  {
    *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
    *((_BYTE *)this + 16) = 1;
  }
  *((_BYTE *)this + 24) = *((_BYTE *)a2 + 24);
  *((_BYTE *)this + 25) = 0;
  if (*((_BYTE *)a2 + 25))
  {
    *(_DWORD *)((char *)this + 26) = *(_DWORD *)((char *)a2 + 26);
    *((_BYTE *)this + 25) = 1;
  }
  *((_BYTE *)this + 30) = 0;
  if (*((_BYTE *)a2 + 30))
  {
    *(_DWORD *)((char *)this + 31) = *(_DWORD *)((char *)a2 + 31);
    *((_BYTE *)this + 30) = 1;
  }
  *((_BYTE *)this + 36) = 0;
  if (*((_BYTE *)a2 + 36))
  {
    *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
    *((_BYTE *)this + 36) = 1;
  }
  *((_BYTE *)this + 44) = 0;
  if (*((_BYTE *)a2 + 44))
  {
    *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
    *((_BYTE *)this + 44) = 1;
  }
  geo::optional<std::string>::optional((_BYTE *)this + 56, (uint64_t)a2 + 56);
  *((_QWORD *)this + 11) = 0;
  v4 = *((_QWORD *)a2 + 13);
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = v4;
  v5 = (uint64_t **)((char *)this + 96);
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 11) = (char *)this + 96;
  v6 = (const grl::IconModifiers *)*((_QWORD *)a2 + 11);
  if (v6 != (const grl::IconModifiers *)((char *)a2 + 96))
  {
    do
    {
      v7 = *v5;
      v8 = (uint64_t **)((char *)this + 96);
      if (*((uint64_t ***)this + 11) == v5)
        goto LABEL_18;
      v9 = *v5;
      v10 = (char *)this + 96;
      if (v7)
      {
        do
        {
          v8 = (uint64_t **)v9;
          v9 = (uint64_t *)v9[1];
        }
        while (v9);
      }
      else
      {
        do
        {
          v8 = (uint64_t **)*((_QWORD *)v10 + 2);
          v11 = *v8 == (uint64_t *)v10;
          v10 = (char *)v8;
        }
        while (v11);
      }
      v12 = *((unsigned __int16 *)v6 + 16);
      if (*((unsigned __int16 *)v8 + 16) < v12)
      {
LABEL_18:
        if (v7)
          v13 = v8;
        else
          v13 = (uint64_t **)((char *)this + 96);
        if (v7)
          v14 = v8 + 1;
        else
          v14 = (uint64_t **)((char *)this + 96);
        if (*v14)
          goto LABEL_37;
      }
      else
      {
        v14 = (uint64_t **)((char *)this + 96);
        v13 = (uint64_t **)((char *)this + 96);
        if (v7)
        {
          while (1)
          {
            while (1)
            {
              v13 = (uint64_t **)v7;
              v15 = *((unsigned __int16 *)v7 + 16);
              if (v15 <= v12)
                break;
              v7 = *v13;
              v14 = v13;
              if (!*v13)
                goto LABEL_33;
            }
            if (v15 >= v12)
              goto LABEL_37;
            v7 = v13[1];
            if (!v7)
            {
              v14 = v13 + 1;
              break;
            }
          }
        }
      }
LABEL_33:
      v16 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 13) + 16))(*((_QWORD *)this + 13), 64, 8);
      *(_WORD *)(v16 + 32) = *((_WORD *)v6 + 16);
      v17 = (std::string *)(v16 + 40);
      if (*((char *)v6 + 63) < 0)
      {
        std::string::__init_copy_ctor_external(v17, *((const std::string::value_type **)v6 + 5), *((_QWORD *)v6 + 6));
      }
      else
      {
        v18 = *(_OWORD *)((char *)v6 + 40);
        *(_QWORD *)(v16 + 56) = *((_QWORD *)v6 + 7);
        *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
      }
      std::__tree<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,grl::Allocator>>::__insert_node_at((uint64_t **)this + 11, (uint64_t)v13, v14, (uint64_t *)v16);
LABEL_37:
      v19 = (const grl::IconModifiers *)*((_QWORD *)v6 + 1);
      if (v19)
      {
        do
        {
          v20 = v19;
          v19 = *(const grl::IconModifiers **)v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          v20 = (const grl::IconModifiers *)*((_QWORD *)v6 + 2);
          v11 = *(_QWORD *)v20 == (_QWORD)v6;
          v6 = v20;
        }
        while (!v11);
      }
      v6 = v20;
    }
    while (v20 != (const grl::IconModifiers *)((char *)a2 + 96));
  }
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  v22 = (_BYTE *)*((_QWORD *)a2 + 15);
  v21 = (_BYTE *)*((_QWORD *)a2 + 16);
  v23 = v21 - v22;
  if (v21 != v22)
  {
    std::vector<unsigned int>::__vallocate[abi:nn180100]((_QWORD *)this + 15, v23 >> 2);
    v24 = (char *)*((_QWORD *)this + 16);
    memmove(v24, v22, v23);
    *((_QWORD *)this + 16) = &v24[v23];
  }
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 0;
  v25 = *((_QWORD *)a2 + 18);
  v26 = *((_QWORD *)a2 + 19);
  if (v26 != v25)
  {
    std::vector<unsigned int>::__vallocate[abi:nn180100]((_QWORD *)this + 18, (v26 - v25) >> 2);
    v27 = 0;
    v28 = *((_QWORD *)this + 19);
    do
    {
      *(_DWORD *)(v28 + v27) = *(_DWORD *)(v25 + v27);
      v27 += 4;
    }
    while (v25 + v27 != v26);
    *((_QWORD *)this + 19) = v28 + v27;
  }
  std::__function::__value_func<std::shared_ptr<esl::QuartzImage> ()(void)>::__value_func[abi:nn180100]((uint64_t)this + 168, (uint64_t)a2 + 168);
  return this;
}

uint64_t std::__tree<std::__value_type<std::pair<std::string,float>,std::mutex>,std::__map_value_compare<std::pair<std::string,float>,std::__value_type<std::pair<std::string,float>,std::mutex>,std::less<std::pair<std::string,float>>,true>,geo::StdAllocator<std::__value_type<std::pair<std::string,float>,std::mutex>,grl::Allocator>>::destroy(uint64_t result, uint64_t a2)
{
  uint64_t v3;

  if (a2)
  {
    v3 = result;
    std::__tree<std::__value_type<std::pair<std::string,float>,std::mutex>,std::__map_value_compare<std::pair<std::string,float>,std::__value_type<std::pair<std::string,float>,std::mutex>,std::less<std::pair<std::string,float>>,true>,geo::StdAllocator<std::__value_type<std::pair<std::string,float>,std::mutex>,grl::Allocator>>::destroy(result, *(_QWORD *)a2);
    std::__tree<std::__value_type<std::pair<std::string,float>,std::mutex>,std::__map_value_compare<std::pair<std::string,float>,std::__value_type<std::pair<std::string,float>,std::mutex>,std::less<std::pair<std::string,float>>,true>,geo::StdAllocator<std::__value_type<std::pair<std::string,float>,std::mutex>,grl::Allocator>>::destroy(v3, *(_QWORD *)(a2 + 8));
    std::mutex::~mutex((std::mutex *)(a2 + 64));
    if (*(char *)(a2 + 55) < 0)
      operator delete(*(void **)(a2 + 32));
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 16) + 40))(*(_QWORD *)(v3 + 16), a2, 128);
  }
  return result;
}

void geo::Cache<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconDataPack>,grl::codec::PackKeyHash,geo::LRUPolicy>::_pop(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  unsigned __int8 *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::string __p;
  int v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  v2 = a1[6];
  if (*(char *)(v2 + 39) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v2 + 16), *(_QWORD *)(v2 + 24));
  else
    __p = *(std::string *)(v2 + 16);
  v14 = *(_DWORD *)(v2 + 40);
  v3 = *(std::__shared_weak_count **)(v2 + 56);
  v15 = *(_QWORD *)(v2 + 48);
  v16 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v6 = (uint64_t *)a1[6];
  v7 = *v6;
  *(_QWORD *)(v7 + 8) = v6[1];
  *(_QWORD *)v6[1] = v7;
  --a1[8];
  std::__destroy_at[abi:nn180100]<std::pair<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconDataPack>>,0>((uint64_t)(v6 + 2));
  operator delete(v6);
  v8 = a1 + 1;
  v9 = std::__hash_table<std::__hash_value_type<std::pair<std::string,float>,std::__list_iterator<std::pair<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconDataPack>>,void *>>,std::__unordered_map_hasher<std::pair<std::string,float>,std::__hash_value_type<std::pair<std::string,float>,std::__list_iterator<std::pair<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconDataPack>>,void *>>,grl::codec::PackKeyHash,std::equal_to<std::pair<std::string,float>>,true>,std::__unordered_map_equal<std::pair<std::string,float>,std::__hash_value_type<std::pair<std::string,float>,std::__list_iterator<std::pair<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconDataPack>>,void *>>,std::equal_to<std::pair<std::string,float>>,grl::codec::PackKeyHash,true>,std::allocator<std::__hash_value_type<std::pair<std::string,float>,std::__list_iterator<std::pair<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconDataPack>>,void *>>>>::find<std::pair<std::string,float>>(v8, (float *)&__p);
  if (v9)
    std::__hash_table<std::__hash_value_type<std::pair<std::string,float>,std::__list_iterator<std::pair<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconDataPack>>,void *>>,std::__unordered_map_hasher<std::pair<std::string,float>,std::__hash_value_type<std::pair<std::string,float>,std::__list_iterator<std::pair<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconDataPack>>,void *>>,grl::codec::PackKeyHash,std::equal_to<std::pair<std::string,float>>,true>,std::__unordered_map_equal<std::pair<std::string,float>,std::__hash_value_type<std::pair<std::string,float>,std::__list_iterator<std::pair<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconDataPack>>,void *>>,std::equal_to<std::pair<std::string,float>>,grl::codec::PackKeyHash,true>,std::allocator<std::__hash_value_type<std::pair<std::string,float>,std::__list_iterator<std::pair<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconDataPack>>,void *>>>>::erase(v8, (char *)v9);
  v10 = v16;
  if (v16)
  {
    v11 = (unint64_t *)&v16->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void std::__destroy_at[abi:nn180100]<std::pair<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconDataPack>>,0>(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__hash_table<std::__hash_value_type<std::pair<std::string,float>,std::__list_iterator<std::pair<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconDataPack>>,void *>>,std::__unordered_map_hasher<std::pair<std::string,float>,std::__hash_value_type<std::pair<std::string,float>,std::__list_iterator<std::pair<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconDataPack>>,void *>>,grl::codec::PackKeyHash,std::equal_to<std::pair<std::string,float>>,true>,std::__unordered_map_equal<std::pair<std::string,float>,std::__hash_value_type<std::pair<std::string,float>,std::__list_iterator<std::pair<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconDataPack>>,void *>>,std::equal_to<std::pair<std::string,float>>,grl::codec::PackKeyHash,true>,std::allocator<std::__hash_value_type<std::pair<std::string,float>,std::__list_iterator<std::pair<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconDataPack>>,void *>>>>::erase(_QWORD *a1, char *__p)
{
  int8x8_t v3;
  uint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  char *v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = (int8x8_t)a1[1];
  v4 = *(_QWORD *)__p;
  v5 = *((_QWORD *)__p + 1);
  v6 = (uint8x8_t)vcnt_s8(v3);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    if (v5 >= *(_QWORD *)&v3)
      v5 %= *(_QWORD *)&v3;
  }
  else
  {
    v5 &= *(_QWORD *)&v3 - 1;
  }
  v7 = *(char **)(*a1 + 8 * v5);
  do
  {
    v8 = v7;
    v7 = *(char **)v7;
  }
  while (v7 != __p);
  if (v8 != (char *)(a1 + 2))
  {
    v9 = *((_QWORD *)v8 + 1);
    if (v6.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    if (v9 == v5)
    {
LABEL_20:
      if (!v4)
        goto LABEL_27;
      goto LABEL_21;
    }
  }
  if (!v4)
    goto LABEL_19;
  v10 = *(_QWORD *)(v4 + 8);
  if (v6.u32[0] > 1uLL)
  {
    if (v10 >= *(_QWORD *)&v3)
      v10 %= *(_QWORD *)&v3;
  }
  else
  {
    v10 &= *(_QWORD *)&v3 - 1;
  }
  if (v10 != v5)
  {
LABEL_19:
    *(_QWORD *)(*a1 + 8 * v5) = 0;
    v4 = *(_QWORD *)__p;
    goto LABEL_20;
  }
LABEL_21:
  v11 = *(_QWORD *)(v4 + 8);
  if (v6.u32[0] > 1uLL)
  {
    if (v11 >= *(_QWORD *)&v3)
      v11 %= *(_QWORD *)&v3;
  }
  else
  {
    v11 &= *(_QWORD *)&v3 - 1;
  }
  if (v11 != v5)
  {
    *(_QWORD *)(*a1 + 8 * v11) = v8;
    v4 = *(_QWORD *)__p;
  }
LABEL_27:
  *(_QWORD *)v8 = v4;
  *(_QWORD *)__p = 0;
  --a1[3];
  if (__p[39] < 0)
    operator delete(*((void **)__p + 2));
  operator delete(__p);
}

BOOL std::equal_to<std::pair<std::string,float>>::operator()[abi:nn180100](unsigned __int8 *a1, float *a2)
{
  float *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  BOOL v15;
  BOOL v16;
  _BOOL4 v17;

  v2 = a2;
  v4 = a1[23];
  if ((v4 & 0x80u) == 0)
    v5 = a1[23];
  else
    v5 = *((_QWORD *)a1 + 1);
  v6 = *((unsigned __int8 *)a2 + 23);
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *((_QWORD *)a2 + 1);
  if (v5 == v6)
  {
    if (v7 < 0)
      a2 = *(float **)a2;
    if ((v4 & 0x80) != 0)
    {
      v17 = memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)) == 0;
    }
    else if (a1[23])
    {
      v8 = v4 - 1;
      v9 = a1;
      do
      {
        v11 = *v9++;
        v10 = v11;
        v13 = *(unsigned __int8 *)a2;
        a2 = (float *)((char *)a2 + 1);
        v12 = v13;
        v15 = v8-- != 0;
        v16 = v10 == v12;
        v17 = v10 == v12;
      }
      while (v16 && v15);
    }
    else
    {
      v17 = 1;
    }
  }
  else
  {
    v17 = 0;
  }
  return *((float *)a1 + 6) == v2[6] && v17;
}

uint64_t **std::unique_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>>>::reset[abi:nn180100](uint64_t **result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = v2;
    std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>>::__destroy_vector::operator()[abi:nn180100](&v3);
    return (uint64_t **)MEMORY[0x1A1AF4E00](v2, 0x20C40DC1BFBCFLL);
  }
  return result;
}

uint64_t **std::vector<std::pair<std::string,float>,geo::StdAllocator<std::pair<std::string,float>,grl::Allocator>>::__destroy_vector::operator()[abi:nn180100](uint64_t **result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t **v6;

  v1 = *result;
  v2 = **result;
  if (v2)
  {
    v3 = v1[1];
    v4 = **result;
    v5 = *result;
    if (v3 != v2)
    {
      v6 = result;
      do
      {
        if (*(char *)(v3 - 9) < 0)
          operator delete(*(void **)(v3 - 32));
        v3 -= 32;
      }
      while (v3 != v2);
      v5 = *v6;
      v4 = **v6;
    }
    v1[1] = v2;
    return (uint64_t **)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[3] + 40))(v5[3], v4, v5[2] - v4);
  }
  return result;
}

_QWORD *std::__function::__func<grl::IconManager::multiPOIBalloonContent(std::vector<std::shared_ptr<grl::IconImage>> const&,unsigned int,grl::IconModifiers const&,grl::IconRequestOptions const&)::$_0,std::allocator<grl::IconManager::multiPOIBalloonContent(std::vector<std::shared_ptr<grl::IconImage>> const&,unsigned int,grl::IconModifiers const&,grl::IconRequestOptions const&)::$_0>,std::shared_ptr<esl::QuartzImage> ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E42D8090;
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<grl::IconManager::multiPOIBalloonContent(std::vector<std::shared_ptr<grl::IconImage>> const&,unsigned int,grl::IconModifiers const&,grl::IconRequestOptions const&)::$_0,std::allocator<grl::IconManager::multiPOIBalloonContent(std::vector<std::shared_ptr<grl::IconImage>> const&,unsigned int,grl::IconModifiers const&,grl::IconRequestOptions const&)::$_0>,std::shared_ptr<esl::QuartzImage> ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E42D8090;
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<grl::IconManager::multiPOIBalloonContent(std::vector<std::shared_ptr<grl::IconImage>> const&,unsigned int,grl::IconModifiers const&,grl::IconRequestOptions const&)::$_0,std::allocator<grl::IconManager::multiPOIBalloonContent(std::vector<std::shared_ptr<grl::IconImage>> const&,unsigned int,grl::IconModifiers const&,grl::IconRequestOptions const&)::$_0>,std::shared_ptr<esl::QuartzImage> ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E42D8090;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<grl::IconManager::multiPOIBalloonContent(std::vector<std::shared_ptr<grl::IconImage>> const&,unsigned int,grl::IconModifiers const&,grl::IconRequestOptions const&)::$_0,std::allocator<grl::IconManager::multiPOIBalloonContent(std::vector<std::shared_ptr<grl::IconImage>> const&,unsigned int,grl::IconModifiers const&,grl::IconRequestOptions const&)::$_0>,std::shared_ptr<esl::QuartzImage> ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E42D8090;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<grl::IconManager::multiPOIBalloonContent(std::vector<std::shared_ptr<grl::IconImage>> const&,unsigned int,grl::IconModifiers const&,grl::IconRequestOptions const&)::$_0,std::allocator<grl::IconManager::multiPOIBalloonContent(std::vector<std::shared_ptr<grl::IconImage>> const&,unsigned int,grl::IconModifiers const&,grl::IconRequestOptions const&)::$_0>,std::shared_ptr<esl::QuartzImage> ()(void)>::destroy(uint64_t a1)
{
  return std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<grl::IconManager::multiPOIBalloonContent(std::vector<std::shared_ptr<grl::IconImage>> const&,unsigned int,grl::IconModifiers const&,grl::IconRequestOptions const&)::$_0,std::allocator<grl::IconManager::multiPOIBalloonContent(std::vector<std::shared_ptr<grl::IconImage>> const&,unsigned int,grl::IconModifiers const&,grl::IconRequestOptions const&)::$_0>,std::shared_ptr<esl::QuartzImage> ()(void)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<grl::IconManager::multiPOIBalloonContent(std::vector<std::shared_ptr<grl::IconImage>> const&,unsigned int,grl::IconModifiers const&,grl::IconRequestOptions const&)::$_0,std::allocator<grl::IconManager::multiPOIBalloonContent(std::vector<std::shared_ptr<grl::IconImage>> const&,unsigned int,grl::IconModifiers const&,grl::IconRequestOptions const&)::$_0>,std::shared_ptr<esl::QuartzImage> ()(void)>::operator()@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(result + 16);
  *a2 = *(_QWORD *)(result + 8);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

float std::vector<std::pair<std::string,float>,geo::StdAllocator<std::pair<std::string,float>,grl::Allocator>>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  __int128 *v6;
  uint64_t v7;
  __int128 v8;
  float result;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  __int128 *v13;
  __int128 v14;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = a2 + v4 - a4;
  if (v5 >= a3)
  {
    v7 = *(_QWORD *)(a1 + 8);
  }
  else
  {
    v6 = (__int128 *)(a2 + v4 - a4);
    v7 = *(_QWORD *)(a1 + 8);
    do
    {
      if (v7)
      {
        v8 = *v6;
        *(_QWORD *)(v7 + 16) = *((_QWORD *)v6 + 2);
        *(_OWORD *)v7 = v8;
        *((_QWORD *)v6 + 1) = 0;
        *((_QWORD *)v6 + 2) = 0;
        *(_QWORD *)v6 = 0;
        result = *((float *)v6 + 6);
        *(float *)(v7 + 24) = result;
      }
      v6 += 2;
      v7 += 32;
    }
    while ((unint64_t)v6 < a3);
  }
  *(_QWORD *)(a1 + 8) = v7;
  if (v4 != a4)
  {
    v10 = 0;
    v11 = -32 * ((v4 - a4) >> 5);
    do
    {
      v12 = (void **)(v4 + v10 - 32);
      if (*(char *)(v4 + v10 - 9) < 0)
        operator delete(*v12);
      v13 = (__int128 *)(v5 + v10 - 32);
      v14 = *v13;
      *(_QWORD *)(v4 + v10 - 16) = *(_QWORD *)(v5 + v10 - 16);
      *(_OWORD *)v12 = v14;
      *(_BYTE *)(v5 + v10 - 9) = 0;
      *(_BYTE *)v13 = 0;
      result = *(float *)(v5 + v10 - 8);
      *(float *)(v4 + v10 - 8) = result;
      v10 -= 32;
    }
    while (v11 != v10);
  }
  return result;
}

float geo::StdAllocator<std::pair<std::string,float>,grl::Allocator>::construct<std::pair<std::string,float>,std::pair<std::string,float>&>(std::string *this, __int128 *a2)
{
  __int128 v4;
  float result;

  if (this)
  {
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v4 = *a2;
      this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
    }
    result = *((float *)a2 + 6);
    *(float *)&this[1].__r_.__value_.__l.__data_ = result;
  }
  return result;
}

void std::default_delete<grl::IconManager::PackInfo>::operator()[abi:nn180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  void **v6;
  void **v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  void **v13;
  void **v14;
  void *v15;

  std::mutex::~mutex((std::mutex *)(a1 + 304));
  std::mutex::~mutex((std::mutex *)(a1 + 240));
  std::mutex::~mutex((std::mutex *)(a1 + 176));
  if (*(_QWORD *)(a1 + 168))
  {
    v2 = *(_QWORD *)(a1 + 152);
    v3 = *(uint64_t **)(a1 + 160);
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(v2 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    *(_QWORD *)(a1 + 168) = 0;
    if (v3 != (uint64_t *)(a1 + 152))
    {
      do
      {
        v5 = (uint64_t *)v3[1];
        std::__destroy_at[abi:nn180100]<std::pair<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconDataPack>>,0>((uint64_t)(v3 + 2));
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != (uint64_t *)(a1 + 152));
    }
  }
  v6 = *(void ***)(a1 + 128);
  if (v6)
  {
    do
    {
      v7 = (void **)*v6;
      if (*((char *)v6 + 39) < 0)
        operator delete(v6[2]);
      operator delete(v6);
      v6 = v7;
    }
    while (v7);
  }
  v8 = *(void **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = 0;
  if (v8)
    operator delete(v8);
  if (*(_QWORD *)(a1 + 96))
  {
    v9 = *(_QWORD *)(a1 + 80);
    v10 = *(uint64_t **)(a1 + 88);
    v11 = *v10;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v9 + 8);
    **(_QWORD **)(v9 + 8) = v11;
    *(_QWORD *)(a1 + 96) = 0;
    if (v10 != (uint64_t *)(a1 + 80))
    {
      do
      {
        v12 = (uint64_t *)v10[1];
        std::__destroy_at[abi:nn180100]<std::pair<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconDataPack>>,0>((uint64_t)(v10 + 2));
        operator delete(v10);
        v10 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 80));
    }
  }
  v13 = *(void ***)(a1 + 56);
  if (v13)
  {
    do
    {
      v14 = (void **)*v13;
      if (*((char *)v13 + 39) < 0)
        operator delete(v13[2]);
      operator delete(v13);
      v13 = v14;
    }
    while (v14);
  }
  v15 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v15)
    operator delete(v15);
  std::__tree<std::__value_type<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconMapPack>>,std::__map_value_compare<std::pair<std::string,float>,std::__value_type<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconMapPack>>,std::less<std::pair<std::string,float>>,true>,geo::StdAllocator<std::__value_type<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconMapPack>>,grl::Allocator>>::destroy(a1, *(_QWORD *)(a1 + 8));
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__tree<std::__value_type<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconMapPack>>,std::__map_value_compare<std::pair<std::string,float>,std::__value_type<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconMapPack>>,std::less<std::pair<std::string,float>>,true>,geo::StdAllocator<std::__value_type<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconMapPack>>,grl::Allocator>>::destroy(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  if (a2)
  {
    v3 = result;
    std::__tree<std::__value_type<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconMapPack>>,std::__map_value_compare<std::pair<std::string,float>,std::__value_type<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconMapPack>>,std::less<std::pair<std::string,float>>,true>,geo::StdAllocator<std::__value_type<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconMapPack>>,grl::Allocator>>::destroy(result, *(_QWORD *)a2);
    std::__tree<std::__value_type<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconMapPack>>,std::__map_value_compare<std::pair<std::string,float>,std::__value_type<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconMapPack>>,std::less<std::pair<std::string,float>>,true>,geo::StdAllocator<std::__value_type<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconMapPack>>,grl::Allocator>>::destroy(v3, *(_QWORD *)(a2 + 8));
    v4 = *(std::__shared_weak_count **)(a2 + 72);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    if (*(char *)(a2 + 55) < 0)
      operator delete(*(void **)(a2 + 32));
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 16) + 40))(*(_QWORD *)(v3 + 16), a2, 80);
  }
  return result;
}

BOOL std::less<std::pair<std::string,float>>::operator()[abi:nn180100](const void **a1, const void **a2)
{
  int v4;
  int v5;
  size_t v6;
  const void *v7;
  size_t v8;
  const void *v9;
  size_t v10;
  int v11;
  BOOL v12;
  int v14;
  BOOL v15;

  v4 = *((char *)a2 + 23);
  v5 = *((char *)a1 + 23);
  if (v5 >= 0)
    v6 = *((unsigned __int8 *)a1 + 23);
  else
    v6 = (size_t)a1[1];
  if (v5 >= 0)
    v7 = a1;
  else
    v7 = *a1;
  if (v4 >= 0)
    v8 = *((unsigned __int8 *)a2 + 23);
  else
    v8 = (size_t)a2[1];
  if (v4 >= 0)
    v9 = a2;
  else
    v9 = *a2;
  if (v8 >= v6)
    v10 = v6;
  else
    v10 = v8;
  v11 = memcmp(v7, v9, v10);
  v12 = v6 < v8;
  if (v11)
    v12 = v11 < 0;
  if (v12)
    return 1;
  v14 = memcmp(v9, v7, v10);
  v15 = v8 < v6;
  if (v14)
    v15 = v14 < 0;
  return !v15 && *((float *)a1 + 6) < *((float *)a2 + 6);
}

void std::__shared_ptr_emplace<grl::codec::IconDataPack>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5810;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<grl::codec::IconDataPack>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5810;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<grl::codec::IconDataPack>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<grl::codec::IconConfigPack>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5848;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<grl::codec::IconConfigPack>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5848;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<grl::codec::IconConfigPack>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<grl::codec::IconMapPack>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E57D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<grl::codec::IconMapPack>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E57D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<grl::codec::IconMapPack>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t grl::ShapeLayerRenderer::description(grl::ShapeLayerRenderer *this)
{
  return grl::codec::PathLayerData::toString((grl::ShapeLayerRenderer *)((char *)this + 16));
}

void grl::ShapeLayerRenderer::renderBalloonToContext(grl::IconRenderer const&,std::shared_ptr<esl::QuartzContext>,std::list<std::shared_ptr<esl::QuartzImage>> &)const::$_0::operator()(grl::Allocator *a1, grl::PathGenerator **a2, int a3, unsigned int a4, int a5)
{
  float *v8;
  float *v9;
  __int32 v10;
  int v11;
  int v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float32x2_t v23;
  int v24;
  int v25;

  if (a3 == 3)
  {
    if (a4 > 9 || ((1 << a4) & 0x350) == 0)
      goto LABEL_11;
    v13 = 1.0;
    if (a5 == 2 && (a4 & 0xFE) == 8)
    {
      v14 = gm::Box<float,2>::operator+((float *)*a2 + 7, (float *)*a2 + 13);
      v18 = sqrtf((float)((float)((float)(v15 - v14) * (float)(v15 - v14)) + 0.0)+ (float)((float)(v17 - v16) * (float)(v17 - v16)))* 0.5;
      v19 = gm::Box<float,2>::operator+((float *)*a2 + 3, (float *)*a2 + 13);
      v13 = (float)((float)(*((float *)*a2 + 26) * 0.088235)
                  + (float)((float)(v18
                                  - (float)(sqrtf((float)((float)((float)(v20 - v19) * (float)(v20 - v19)) + 0.0)+ (float)((float)(v22 - v21) * (float)(v22 - v21)))* 0.5))* 0.7))/ (float)(*((float *)*a2 + 26) * 0.088235);
      if (v13 < 1.0)
        v13 = 1.0;
      if (v13 > 2.0)
        v13 = 2.0;
    }
    if (a4 == 8 || a4 == 4)
      grl::PathGenerator::createBalloonDotPath(*a2, v13, a1);
    else
      grl::PathGenerator::createRectalloonDotPath(*a2, v13, a1);
  }
  else
  {
    if (a3 != 2)
    {
      if (a3 == 1)
      {
        v8 = (float *)((char *)*a2 + 52);
        if (a5 == 1)
          v9 = (float *)((char *)*a2 + 12);
        else
          v9 = (float *)((char *)*a2 + 28);
        v23.i32[0] = gm::Box<float,2>::operator+(v9, v8);
        v23.i32[1] = v10;
        v24 = v11;
        v25 = v12;
        if (a4 <= 8 && ((1 << a4) & 0x118) != 0)
          grl::PathGenerator::createBalloonFillPath((float *)&v23, a1);
        else
          grl::PathGenerator::createRectalloonBodyPath(&v23, a1, *((float *)*a2 + 24));
      }
      else
      {
        grl::make_shared<esl::QuartzPath>(a1, (esl::QuartzPath **)a1);
        (*(void (**)(_QWORD, _QWORD, float, float))(**(_QWORD **)a1 + 32))(*(_QWORD *)a1, 0, 0.0, 0.0);
      }
      return;
    }
    if (a5 == 1)
    {
LABEL_11:
      *(_QWORD *)a1 = 0;
      *((_QWORD *)a1 + 1) = 0;
      return;
    }
    if (a4 <= 8 && ((1 << a4) & 0x118) != 0)
      grl::PathGenerator::createBalloonTailPath(*a2, a1);
    else
      grl::PathGenerator::createRectalloonTailPath(*a2, a1);
  }
}

uint64_t grl::ImageLayerRenderer::description(grl::ImageLayerRenderer *this)
{
  return grl::codec::ImageLayerData::toString((grl::ImageLayerRenderer *)((char *)this + 16));
}

uint64_t grl::TextLayerRenderer::description(grl::TextLayerRenderer *this)
{
  return grl::codec::TextLayerData::toString((grl::TextLayerRenderer *)((char *)this + 16));
}

BOOL grl::ColorLayerRenderer::renderToContext(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4)
{
  NSObject *v8;
  _BYTE *v9;
  _BYTE *i;
  NSObject *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  float v14;
  unsigned int v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _OWORD *v26;
  uint64_t v27;
  unint64_t v28;
  _BOOL8 result;
  NSObject *v30;
  const char *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  _BYTE buf[22];
  __int16 v37;
  int v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 64))
  {
    *(_QWORD *)buf = 0;
    if (*(_QWORD *)(a1 + 116))
    {
      if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a1 + 24))
      {
        if (GEOGetGeoResourceLibRendererLog::onceToken != -1)
          dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_10_0);
        v8 = GEOGetGeoResourceLibRendererLog::log;
        if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "_data.hasLayerStyles()";
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/LayerRenderer.cpp";
          v37 = 1024;
          v38 = 736;
          _os_log_impl(&dword_19F029000, v8, OS_LOG_TYPE_ERROR, "No LayerStyles given for color layer rendering.: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
        }
      }
      v9 = *(_BYTE **)(a1 + 16);
      for (i = *(_BYTE **)(a1 + 24); v9 != i; ++v9)
      {
        if (*v9 == 1)
        {
          v12 = (std::__shared_weak_count *)operator new(0x28uLL);
          v12->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v12->__shared_owners_;
          v12->__shared_weak_owners_ = 0;
          v12->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE030;
          esl::QuartzPath::QuartzPath((esl::QuartzPath *)&v12[1]);
          v14 = (float)(*(unsigned int (**)(_QWORD))(*(_QWORD *)*a3 + 112))(*a3);
          (*(void (**)(_QWORD))(*(_QWORD *)*a3 + 120))(*a3);
          ((void (*)(std::__shared_weak_count *, _QWORD, float, float, float, float))v12[1].__vftable[2].~__shared_weak_count_0)(&v12[1], 0, 0.0, 0.0, v14, (float)v15);
          v16 = (std::__shared_weak_count *)a3[1];
          v34 = *a3;
          v35 = v16;
          if (v16)
          {
            v17 = (unint64_t *)&v16->__shared_owners_;
            do
              v18 = __ldxr(v17);
            while (__stxr(v18 + 1, v17));
          }
          v32 = v12 + 1;
          v33 = v12;
          do
            v19 = __ldxr(p_shared_owners);
          while (__stxr(v19 + 1, p_shared_owners));
          *(_DWORD *)buf = *(_DWORD *)(a1 + 49);
          grl::drawFillToContext(&v34, &v32, (uint64_t)buf, *(unsigned __int8 *)(a1 + 48));
          v20 = v33;
          if (v33)
          {
            v21 = (unint64_t *)&v33->__shared_owners_;
            do
              v22 = __ldaxr(v21);
            while (__stlxr(v22 - 1, v21));
            if (!v22)
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
          }
          v23 = v35;
          if (v35)
          {
            v24 = (unint64_t *)&v35->__shared_owners_;
            do
              v25 = __ldaxr(v24);
            while (__stlxr(v25 - 1, v24));
            if (!v25)
            {
              ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
              std::__shared_weak_count::__release_weak(v23);
            }
          }
          if (*(_BYTE *)(a2 + 282))
          {
            (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)*a3 + 392))(buf);
            v26 = operator new(0x20uLL);
            v26[1] = *(_OWORD *)buf;
            v27 = *a4;
            *(_QWORD *)v26 = *a4;
            *((_QWORD *)v26 + 1) = a4;
            *(_QWORD *)(v27 + 8) = v26;
            *a4 = (uint64_t)v26;
            ++a4[2];
          }
          do
            v28 = __ldaxr(p_shared_owners);
          while (__stlxr(v28 - 1, p_shared_owners));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        else if (!*v9)
        {
          if (GEOGetGeoResourceLibRendererLog::onceToken != -1)
            dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_10_0);
          v11 = GEOGetGeoResourceLibRendererLog::log;
          if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "iconLayer != LayerStyle::None";
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/LayerRenderer.cpp";
            v37 = 1024;
            v38 = 740;
            _os_log_impl(&dword_19F029000, v11, OS_LOG_TYPE_ERROR, "Invalid LayerStyle enum used.: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
          }
        }
      }
      return 1;
    }
    if (GEOGetGeoResourceLibRendererLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_10_0);
    v30 = GEOGetGeoResourceLibRendererLog::log;
    result = os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR);
    if (result)
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/LayerRenderer.cpp";
      v37 = 1024;
      v38 = 731;
      v31 = "Metrics must contain a size to draw into a context.: Assertion with expression - %s : Failed in file - %s line - %i";
      goto LABEL_45;
    }
  }
  else
  {
    if (GEOGetGeoResourceLibRendererLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_10_0);
    v30 = GEOGetGeoResourceLibRendererLog::log;
    result = os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR);
    if (result)
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/LayerRenderer.cpp";
      v37 = 1024;
      v38 = 728;
      v31 = "Nullptr for LayerMetrics being used to render layer.: Assertion with expression - %s : Failed in file - %s line - %i";
LABEL_45:
      _os_log_impl(&dword_19F029000, v30, OS_LOG_TYPE_ERROR, v31, buf, 0x1Cu);
      return 0;
    }
  }
  return result;
}

__n128 grl::ColorLayerRenderer::setLayerMetrics(grl::ColorLayerRenderer *this, const grl::LayerMetrics *a2)
{
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  if (*((_BYTE *)this + 64))
    (**((void (***)(char *))this + 9))((char *)this + 72);
  else
    *((_BYTE *)this + 64) = 1;
  *((_QWORD *)this + 9) = &off_1E42C2558;
  v4 = *(_OWORD *)((char *)a2 + 24);
  *((_OWORD *)this + 5) = *(_OWORD *)((char *)a2 + 8);
  *((_OWORD *)this + 6) = v4;
  result = *(__n128 *)((char *)a2 + 40);
  v6 = *(_OWORD *)((char *)a2 + 56);
  v7 = *(_OWORD *)((char *)a2 + 72);
  *((_DWORD *)this + 40) = *((_DWORD *)a2 + 22);
  *((_OWORD *)this + 8) = v6;
  *((_OWORD *)this + 9) = v7;
  *((__n128 *)this + 7) = result;
  return result;
}

uint64_t grl::ColorLayerRenderer::description(grl::ColorLayerRenderer *this)
{
  return grl::codec::ColorLayerData::toString((grl::ColorLayerRenderer *)((char *)this + 16));
}

void grl::ColorLayerRenderer::~ColorLayerRenderer(grl::ColorLayerRenderer *this)
{
  grl::ColorLayerRenderer::~ColorLayerRenderer(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E42C2680;
  if (*((_BYTE *)this + 64))
  {
    (**((void (***)(char *))this + 9))((char *)this + 72);
    *((_BYTE *)this + 64) = 0;
  }
  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    *((_QWORD *)this + 3) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 5) + 40))(*((_QWORD *)this + 5), v2, *((_QWORD *)this + 4) - v2);
  }
}

_QWORD *std::vector<grl::IconComponent>::__assign_with_size[abi:nn180100]<grl::IconComponent const*,grl::IconComponent const*>(_QWORD *result, char *__src, char *a3, unint64_t a4)
{
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  size_t v11;
  size_t v12;
  _BYTE *v13;
  size_t v14;
  char *v15;
  char *v16;

  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    v10 = 2 * v8;
    if (2 * v8 <= a4)
      v10 = a4;
    if (v8 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if ((v11 & 0x8000000000000000) != 0)
      abort();
    result = operator new(v11);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v11;
    v12 = a3 - __src;
    if (v12)
      result = memcpy(result, __src, v12);
LABEL_20:
    v16 = &v9[v12];
    goto LABEL_21;
  }
  v13 = (_BYTE *)result[1];
  v14 = v13 - v9;
  if (v13 - v9 >= a4)
  {
    v12 = a3 - __src;
    if (v12)
      result = memmove((void *)*result, __src, v12);
    goto LABEL_20;
  }
  v15 = &__src[v14];
  if (v13 != v9)
  {
    result = memmove((void *)*result, __src, v14);
    v9 = (char *)v7[1];
  }
  if (a3 != v15)
    result = memmove(v9, v15, a3 - v15);
  v16 = &v9[a3 - v15];
LABEL_21:
  v7[1] = v16;
  return result;
}

unint64_t geo::codec::VectorTile::totalBuildingFootprintsCount(geo::codec::VectorTile *this)
{
  return 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*((_QWORD *)this + 36) - *((_QWORD *)this + 35)) >> 3)
       - 0xF0F0F0F0F0F0F0FLL * ((uint64_t)(*((_QWORD *)this + 48) - *((_QWORD *)this + 47)) >> 3);
}

uint64_t geo::codec::VectorTile::totalThreeDBuildingsCount(geo::codec::VectorTile *this)
{
  return 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)this + 56) - *((_QWORD *)this + 55)) >> 4)
       + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)this + 60) - *((_QWORD *)this + 59)) >> 4);
}

uint64_t geo::codec::VectorTile::transitSystemInfoForFeatureID(geo::codec::VectorTile *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unsigned int *i;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v2 = *((_QWORD *)this + 160);
  v3 = *((_QWORD *)this + 161) - v2;
  if (!v3)
    return 0;
  v4 = v3 / 104;
  if (v4 <= 1)
    v4 = 1;
  for (i = (unsigned int *)(v2 + 84); *(_QWORD *)(i - 11) != a2; i += 26)
  {
    if (!--v4)
      return 0;
  }
  v7 = *i;
  v8 = *((_QWORD *)this + 164);
  v9 = 0x8E38E38E38E38E39 * ((*((_QWORD *)this + 165) - v8) >> 3);
  v10 = v8 + 72 * v7;
  if (v9 <= v7)
    return 0;
  else
    return v10;
}

uint64_t geo::codec::VectorTile::transitLineForFeatureID(geo::codec::VectorTile *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;

  v2 = *((_QWORD *)this + 161);
  result = *((_QWORD *)this + 160);
  v4 = v2 - result;
  if (!v4)
    return 0;
  v5 = v4 / 104;
  if (v5 <= 1)
    v5 = 1;
  while (*(_QWORD *)(result + 40) != a2)
  {
    result += 104;
    if (!--v5)
      return 0;
  }
  return result;
}

uint64_t geo::codec::VectorTile::transitNodeForFeatureID(geo::codec::VectorTile *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;

  v2 = *((_QWORD *)this + 177);
  result = *((_QWORD *)this + 176);
  v4 = v2 - result;
  if (!v4)
    return 0;
  v5 = v4 / 344;
  if (v5 <= 1)
    v5 = 1;
  while (*(_QWORD *)(result + 40) != a2)
  {
    result += 344;
    if (!--v5)
      return 0;
  }
  return result;
}

uint64_t geo::codec::VectorTile::transitAccessPointForFeatureID(geo::codec::VectorTile *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;

  v2 = *((_QWORD *)this + 196);
  result = *((_QWORD *)this + 195);
  v4 = v2 - result;
  if (!v4)
    return 0;
  v5 = v4 / 248;
  if (v5 <= 1)
    v5 = 1;
  while (*(_QWORD *)(result + 40) != a2)
  {
    result += 248;
    if (!--v5)
      return 0;
  }
  return result;
}

uint64_t geo::codec::VectorTile::key(geo::codec::VectorTile *this)
{
  return (uint64_t)this + 4;
}

uint64_t geo::codec::VectorTile::attributes(geo::codec::VectorTile *this)
{
  return (uint64_t)this + 16;
}

uint64_t geo::codec::VectorTile::lines(geo::codec::VectorTile *this)
{
  return *((_QWORD *)this + 4);
}

unint64_t geo::codec::VectorTile::linesCount(geo::codec::VectorTile *this)
{
  return 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*((_QWORD *)this + 5) - *((_QWORD *)this + 4)) >> 3);
}

uint64_t geo::codec::VectorTile::coastlines(geo::codec::VectorTile *this)
{
  return *((_QWORD *)this + 8);
}

uint64_t geo::codec::VectorTile::coastlinesCount(geo::codec::VectorTile *this)
{
  return 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 3);
}

uint64_t geo::codec::VectorTile::polygons(geo::codec::VectorTile *this)
{
  return *((_QWORD *)this + 12);
}

uint64_t geo::codec::VectorTile::polygonsCount(geo::codec::VectorTile *this)
{
  return (uint64_t)(*((_QWORD *)this + 13) - *((_QWORD *)this + 12)) >> 7;
}

uint64_t geo::codec::VectorTile::physicalFeatures(geo::codec::VectorTile *this)
{
  return *((_QWORD *)this + 19);
}

uint64_t geo::codec::VectorTile::physicalFeaturesCount(geo::codec::VectorTile *this)
{
  return 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((_QWORD *)this + 20) - *((_QWORD *)this + 19)) >> 4);
}

unint64_t geo::codec::VectorTile::venuesCount(geo::codec::VectorTile *this)
{
  return 0x8E38E38E38E38E39 * ((uint64_t)(*((_QWORD *)this + 24) - *((_QWORD *)this + 23)) >> 4);
}

uint64_t geo::codec::VectorTile::venues(geo::codec::VectorTile *this)
{
  return *((_QWORD *)this + 23);
}

unint64_t geo::codec::VectorTile::venueBuildingsCount(geo::codec::VectorTile *this)
{
  return 0x86BCA1AF286BCA1BLL * ((uint64_t)(*((_QWORD *)this + 28) - *((_QWORD *)this + 27)) >> 3);
}

uint64_t geo::codec::VectorTile::venueBuildings(geo::codec::VectorTile *this)
{
  return *((_QWORD *)this + 27);
}

uint64_t geo::codec::VectorTile::venueLevelsCount(geo::codec::VectorTile *this)
{
  return *((_QWORD *)this + 31);
}

uint64_t geo::codec::VectorTile::venueLevels(geo::codec::VectorTile *this)
{
  return *((_QWORD *)this + 32);
}

uint64_t geo::codec::VectorTile::venueComponentsCount(geo::codec::VectorTile *this)
{
  return *((_QWORD *)this + 33);
}

uint64_t geo::codec::VectorTile::venueComponents(geo::codec::VectorTile *this)
{
  return *((_QWORD *)this + 34);
}

unint64_t geo::codec::VectorTile::nonOverlappingBuildingFootprintsCount(geo::codec::VectorTile *this)
{
  return 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*((_QWORD *)this + 36) - *((_QWORD *)this + 35)) >> 3);
}

uint64_t geo::codec::VectorTile::nonOverlappingThreeDBuildingsCount(geo::codec::VectorTile *this)
{
  return 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)this + 56) - *((_QWORD *)this + 55)) >> 4);
}

uint64_t geo::codec::VectorTile::pois(geo::codec::VectorTile *this)
{
  return *((_QWORD *)this + 63);
}

uint64_t geo::codec::VectorTile::poisCount(geo::codec::VectorTile *this)
{
  return 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)this + 64) - *((_QWORD *)this + 63)) >> 5);
}

uint64_t geo::codec::VectorTile::annotations(geo::codec::VectorTile *this)
{
  return *((_QWORD *)this + 67);
}

uint64_t geo::codec::VectorTile::annotationValues(geo::codec::VectorTile *this)
{
  return *((_QWORD *)this + 71);
}

uint64_t geo::codec::VectorTile::labelTextPlacements(geo::codec::VectorTile *this)
{
  return *((_QWORD *)this + 83);
}

uint64_t geo::codec::VectorTile::overpasses(geo::codec::VectorTile *this)
{
  return *((_QWORD *)this + 85);
}

uint64_t geo::codec::VectorTile::junctions(geo::codec::VectorTile *this)
{
  return *((_QWORD *)this + 86);
}

uint64_t geo::codec::VectorTile::junctionsCount(geo::codec::VectorTile *this)
{
  return *((_QWORD *)this + 87);
}

uint64_t geo::codec::VectorTile::hasComputedJunctions(geo::codec::VectorTile *this)
{
  return *((unsigned __int8 *)this + 704);
}

uint64_t geo::codec::VectorTile::pointsOnRoad(geo::codec::VectorTile *this)
{
  return *((_QWORD *)this + 89);
}

uint64_t geo::codec::VectorTile::sortedPointsOnRoad(geo::codec::VectorTile *this)
{
  return *((_QWORD *)this + 91);
}

uint64_t geo::codec::VectorTile::lineCrossingsCount(geo::codec::VectorTile *this)
{
  return *((_QWORD *)this + 92);
}

uint64_t geo::codec::VectorTile::lineCrossings(geo::codec::VectorTile *this)
{
  return *((_QWORD *)this + 93);
}

uint64_t geo::codec::VectorTile::curveLineVertices(geo::codec::VectorTile *this)
{
  return *((_QWORD *)this + 96);
}

uint64_t geo::codec::VectorTile::lineVertices(geo::codec::VectorTile *this)
{
  return *((_QWORD *)this + 99);
}

uint64_t geo::codec::VectorTile::transitLines(geo::codec::VectorTile *this)
{
  return *((_QWORD *)this + 160);
}

uint64_t geo::codec::VectorTile::transitLineCount(geo::codec::VectorTile *this)
{
  return 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*((_QWORD *)this + 161) - *((_QWORD *)this + 160)) >> 3);
}

uint64_t geo::codec::VectorTile::transitSystems(geo::codec::VectorTile *this)
{
  return *((_QWORD *)this + 164);
}

uint64_t geo::codec::VectorTile::transitLinks(geo::codec::VectorTile *this)
{
  return *((_QWORD *)this + 168);
}

unint64_t geo::codec::VectorTile::transitLinkCount(geo::codec::VectorTile *this)
{
  return 0xD37A6F4DE9BD37A7 * ((uint64_t)(*((_QWORD *)this + 169) - *((_QWORD *)this + 168)) >> 3);
}

uint64_t geo::codec::VectorTile::transitVertices(geo::codec::VectorTile *this)
{
  return *((_QWORD *)this + 175);
}

uint64_t geo::codec::VectorTile::transitNodes(geo::codec::VectorTile *this)
{
  return *((_QWORD *)this + 176);
}

unint64_t geo::codec::VectorTile::transitNodeCount(geo::codec::VectorTile *this)
{
  return 0x82FA0BE82FA0BE83 * ((uint64_t)(*((_QWORD *)this + 177) - *((_QWORD *)this + 176)) >> 3);
}

uint64_t geo::codec::VectorTile::transitStationTransfers(geo::codec::VectorTile *this)
{
  return *((_QWORD *)this + 183);
}

uint64_t geo::codec::VectorTile::transitStationTransferCount(geo::codec::VectorTile *this)
{
  return 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*((_QWORD *)this + 184) - *((_QWORD *)this + 183)) >> 3);
}

uint64_t geo::codec::VectorTile::transitPointsOnRoad(geo::codec::VectorTile *this)
{
  return *((_QWORD *)this + 189);
}

uint64_t geo::codec::VectorTile::transitPointsOnRoadCount(geo::codec::VectorTile *this)
{
  return *((_QWORD *)this + 190);
}

uint64_t geo::codec::VectorTile::transitLinkLineMinZoomOverrides(geo::codec::VectorTile *this)
{
  return *((_QWORD *)this + 192);
}

uint64_t geo::codec::VectorTile::transitAccessPoints(geo::codec::VectorTile *this)
{
  return *((_QWORD *)this + 195);
}

unint64_t geo::codec::VectorTile::transitAccessPointCount(geo::codec::VectorTile *this)
{
  return 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*((_QWORD *)this + 196) - *((_QWORD *)this + 195)) >> 3);
}

uint64_t geo::codec::VectorTile::transitNodeLineIndices(geo::codec::VectorTile *this)
{
  return *((_QWORD *)this + 200);
}

uint64_t geo::codec::VectorTile::transitLinkSections(geo::codec::VectorTile *this)
{
  return *((_QWORD *)this + 212);
}

uint64_t geo::codec::VectorTile::transitNodeCollapseIndices(geo::codec::VectorTile *this)
{
  return *((_QWORD *)this + 222);
}

uint64_t geo::codec::VectorTile::transitNodeCollapseIDs(geo::codec::VectorTile *this)
{
  return *((_QWORD *)this + 224);
}

uint64_t geo::codec::VectorTile::transitNodeCollapseIDCount(geo::codec::VectorTile *this)
{
  return *((_QWORD *)this + 225);
}

uint64_t geo::codec::VectorTile::tileLabelLinesCount(geo::codec::VectorTile *this)
{
  return *((unsigned int *)this + 454);
}

uint64_t geo::codec::VectorTile::tileLabelLines(geo::codec::VectorTile *this)
{
  return *((_QWORD *)this + 228);
}

uint64_t geo::codec::VectorTile::labelLineFeatureSections(geo::codec::VectorTile *this)
{
  return *((_QWORD *)this + 230);
}

uint64_t geo::codec::VectorTile::labelLineAttributes(geo::codec::VectorTile *this)
{
  return *((_QWORD *)this + 232);
}

uint64_t geo::codec::VectorTile::poiStorefrontBundleIDs(geo::codec::VectorTile *this)
{
  return *((_QWORD *)this + 234);
}

uint64_t geo::codec::VectorTile::labelSummaryIcons(geo::codec::VectorTile *this)
{
  return *((_QWORD *)this + 236);
}

uint64_t geo::codec::VectorTile::debugByteCount(geo::codec::VectorTile *this)
{
  return *((_QWORD *)this + 237);
}

void geo::codec::VectorTile::debugInfoPerChapterAndChapterDetails(geo::codec::VectorTile *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint8x8_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  __int128 v23;
  float v24;
  float v25;
  _BOOL8 v26;
  unint64_t v27;
  unint64_t v28;
  size_t v29;
  unint64_t v30;
  uint8x8_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 486);
  prime = *((_QWORD *)this + 240);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a2, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*((_QWORD *)this + 240));
    v5 = *(int8x8_t *)(a2 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a2 + 24) / *(float *)(a2 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  v10 = (_QWORD *)*((_QWORD *)this + 241);
  if (v10)
  {
    v11 = (_QWORD *)(a2 + 16);
    v12 = *(_QWORD *)(a2 + 8);
    while (1)
    {
      v13 = v10[2];
      v14 = 0x9DDFEA08EB382D69 * (((8 * v13) + 8) ^ HIDWORD(v13));
      v15 = 0x9DDFEA08EB382D69 * (HIDWORD(v13) ^ (v14 >> 47) ^ v14);
      v16 = 0x9DDFEA08EB382D69 * (v15 ^ (v15 >> 47));
      if (v12)
      {
        v17 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
        v17.i16[0] = vaddlv_u8(v17);
        if (v17.u32[0] > 1uLL)
        {
          prime = 0x9DDFEA08EB382D69 * (v15 ^ (v15 >> 47));
          if (v16 >= v12)
            prime = v16 % v12;
        }
        else
        {
          prime = v16 & (v12 - 1);
        }
        v18 = *(_QWORD **)(*(_QWORD *)a2 + 8 * prime);
        if (v18)
        {
          v19 = (_QWORD *)*v18;
          if (v19)
          {
            if (v17.u32[0] < 2uLL)
            {
              while (1)
              {
                v21 = v19[1];
                if (v21 == v16)
                {
                  if (v19[2] == v13)
                    goto LABEL_79;
                }
                else if ((v21 & (v12 - 1)) != prime)
                {
                  goto LABEL_40;
                }
                v19 = (_QWORD *)*v19;
                if (!v19)
                  goto LABEL_40;
              }
            }
            do
            {
              v20 = v19[1];
              if (v20 == v16)
              {
                if (v19[2] == v13)
                  goto LABEL_79;
              }
              else
              {
                if (v20 >= v12)
                  v20 %= v12;
                if (v20 != prime)
                  break;
              }
              v19 = (_QWORD *)*v19;
            }
            while (v19);
          }
        }
      }
LABEL_40:
      v22 = operator new(0x28uLL);
      *v22 = 0;
      v22[1] = v16;
      v23 = *((_OWORD *)v10 + 1);
      v22[4] = v10[4];
      *((_OWORD *)v22 + 1) = v23;
      v24 = (float)(unint64_t)(*(_QWORD *)(a2 + 24) + 1);
      v25 = *(float *)(a2 + 32);
      if (v12 && (float)(v25 * (float)v12) >= v24)
        goto LABEL_68;
      v26 = (v12 & (v12 - 1)) != 0;
      if (v12 < 3)
        v26 = 1;
      v27 = v26 | (2 * v12);
      v28 = vcvtps_u32_f32(v24 / v25);
      if (v27 <= v28)
        v29 = v28;
      else
        v29 = v27;
      if (v29 == 1)
      {
        v29 = 2;
      }
      else if ((v29 & (v29 - 1)) != 0)
      {
        v29 = std::__next_prime(v29);
        v12 = *(_QWORD *)(a2 + 8);
      }
      if (v29 > v12)
        goto LABEL_52;
      if (v29 < v12)
      {
        v30 = vcvtps_u32_f32((float)*(unint64_t *)(a2 + 24) / *(float *)(a2 + 32));
        if (v12 < 3 || (v31 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
        {
          v30 = std::__next_prime(v30);
        }
        else
        {
          v32 = 1 << -(char)__clz(v30 - 1);
          if (v30 >= 2)
            v30 = v32;
        }
        if (v29 <= v30)
          v29 = v30;
        if (v29 < v12)
LABEL_52:
          std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a2, v29);
      }
      v12 = *(_QWORD *)(a2 + 8);
      v33 = v12 - 1;
      if ((v12 & (v12 - 1)) == 0)
      {
        prime = v33 & v16;
        v34 = *(_QWORD *)a2;
        v35 = *(_QWORD **)(*(_QWORD *)a2 + 8 * (v33 & v16));
        if (v35)
          goto LABEL_69;
        goto LABEL_71;
      }
      if (v16 < v12)
        break;
      prime = v16 % v12;
      v34 = *(_QWORD *)a2;
      v35 = *(_QWORD **)(*(_QWORD *)a2 + 8 * (v16 % v12));
      if (v35)
      {
LABEL_69:
        *v22 = *v35;
        goto LABEL_77;
      }
LABEL_71:
      *v22 = *v11;
      *v11 = v22;
      *(_QWORD *)(v34 + 8 * prime) = v11;
      if (!*v22)
        goto LABEL_78;
      v36 = *(_QWORD *)(*v22 + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v36 >= v12)
          v36 %= v12;
      }
      else
      {
        v36 &= v12 - 1;
      }
      v35 = (_QWORD *)(*(_QWORD *)a2 + 8 * v36);
LABEL_77:
      *v35 = v22;
LABEL_78:
      ++*(_QWORD *)(a2 + 24);
LABEL_79:
      v10 = (_QWORD *)*v10;
      if (!v10)
        return;
    }
    prime = v16;
LABEL_68:
    v34 = *(_QWORD *)a2;
    v35 = *(_QWORD **)(*(_QWORD *)a2 + 8 * prime);
    if (v35)
      goto LABEL_69;
    goto LABEL_71;
  }
}

void sub_19FF7C530(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;

  v3 = *(_QWORD **)(v1 + 16);
  if (v3)
  {
    do
    {
      v4 = (_QWORD *)*v3;
      operator delete(v3);
      v3 = v4;
    }
    while (v4);
  }
  v5 = *(void **)v1;
  *(_QWORD *)v1 = 0;
  if (v5)
    operator delete(v5);
  _Unwind_Resume(exception_object);
}

uint64_t geo::codec::VectorTile::daVinciVertexCount(geo::codec::VectorTile *this)
{
  return *((unsigned int *)this + 490);
}

uint64_t geo::codec::VectorTile::daVinciVertices(geo::codec::VectorTile *this)
{
  return *((_QWORD *)this + 246);
}

uint64_t geo::codec::VectorTile::explicitTextureDataCount(geo::codec::VectorTile *this)
{
  return *((unsigned __int16 *)this + 1000);
}

uint64_t geo::codec::VectorTile::explicitTextureData(geo::codec::VectorTile *this)
{
  return *((_QWORD *)this + 251);
}

uint64_t geo::codec::VectorTile::directionalXYTextureDataCount(geo::codec::VectorTile *this)
{
  return *((unsigned __int16 *)this + 1008);
}

uint64_t geo::codec::VectorTile::directionalXYTextureData(geo::codec::VectorTile *this)
{
  return *((_QWORD *)this + 253);
}

uint64_t geo::codec::VectorTile::daVinciIndexCount(geo::codec::VectorTile *this)
{
  return *((unsigned int *)this + 508);
}

uint64_t geo::codec::VectorTile::daVinciIndices(geo::codec::VectorTile *this)
{
  return *((_QWORD *)this + 255);
}

uint64_t geo::codec::VectorTile::daVinciMeshCount(geo::codec::VectorTile *this)
{
  return *((unsigned __int16 *)this + 1024);
}

uint64_t geo::codec::VectorTile::daVinciMeshes(geo::codec::VectorTile *this)
{
  return *((_QWORD *)this + 257);
}

uint64_t geo::codec::VectorTile::daVinciAssetCount(geo::codec::VectorTile *this)
{
  return (unsigned __int16)(-13107 * ((*((_DWORD *)this + 520) - *((_DWORD *)this + 518)) >> 3));
}

uint64_t geo::codec::VectorTile::daVinciAssets(geo::codec::VectorTile *this)
{
  return *((_QWORD *)this + 259);
}

uint64_t geo::codec::VectorTile::daVinciRenderableCount(geo::codec::VectorTile *this)
{
  return *((unsigned __int16 *)this + 1084);
}

uint64_t geo::codec::VectorTile::daVinciRenderables(geo::codec::VectorTile *this)
{
  return *((_QWORD *)this + 272);
}

uint64_t geo::codec::VectorTile::daVinciLandmarkCount(geo::codec::VectorTile *this)
{
  return *((unsigned __int16 *)this + 1092);
}

uint64_t geo::codec::VectorTile::daVinciLandmarks(geo::codec::VectorTile *this)
{
  return *((_QWORD *)this + 274);
}

uint64_t geo::codec::VectorTile::daVinciDecalCount(geo::codec::VectorTile *this)
{
  return (unsigned __int16)(-29127 * ((*((_DWORD *)this + 552) - *((_DWORD *)this + 550)) >> 3));
}

uint64_t geo::codec::VectorTile::daVinciDecals(geo::codec::VectorTile *this)
{
  return *((_QWORD *)this + 275);
}

uint64_t geo::codec::VectorTile::daVinciMetaData(geo::codec::VectorTile *this)
{
  return *((_QWORD *)this + 279);
}

uint64_t geo::codec::VectorTile::daVinciBuildingVertexOffset(geo::codec::VectorTile *this)
{
  return *((unsigned int *)this + 562);
}

uint64_t geo::codec::VectorTile::daVinciBuildingVertices(geo::codec::VectorTile *this)
{
  return *((_QWORD *)this + 282);
}

uint64_t geo::codec::VectorTile::daVinciLineLoops(geo::codec::VectorTile *this)
{
  return *((_QWORD *)this + 287);
}

uint64_t geo::codec::VectorTile::daVinciBuildingSections(geo::codec::VectorTile *this)
{
  return *((_QWORD *)this + 289);
}

uint64_t geo::codec::VectorTile::daVinciBuildings(geo::codec::VectorTile *this)
{
  return *((_QWORD *)this + 290);
}

uint64_t geo::codec::VectorTile::daVinciBuildingColors(geo::codec::VectorTile *this)
{
  return *((_QWORD *)this + 294);
}

BOOL geo::codec::VectorTile::daVinciBuildingColorsArePresent(geo::codec::VectorTile *this)
{
  return *((_QWORD *)this + 294) != *((_QWORD *)this + 295);
}

uint64_t geo::codec::VectorTile::daVinciBuildingsSupportTerrainElevation(geo::codec::VectorTile *this)
{
  return *((unsigned __int8 *)this + 2496);
}

uint64_t geo::codec::VectorTile::buildingToModifierMap(geo::codec::VectorTile *this)
{
  return (uint64_t)this + 2384;
}

uint64_t geo::codec::VectorTile::daVinciBuildingTileBound(geo::codec::VectorTile *this)
{
  return (uint64_t)this + 2480;
}

uint64_t geo::codec::VectorTile::materialModifiers(geo::codec::VectorTile *this)
{
  return (uint64_t)this + 2104;
}

uint64_t geo::codec::VectorTile::maxElevationInMeters(geo::codec::VectorTile *this)
{
  return *((__int16 *)this + 1432);
}

uint64_t geo::codec::VectorTile::minElevationInMeters(geo::codec::VectorTile *this)
{
  return *((__int16 *)this + 1433);
}

float geo::codec::VectorTile::tileSizeInMeters(geo::codec::VectorTile *this)
{
  return *((float *)this + 717);
}

uint64_t geo::codec::VectorTile::zResolutionBits(geo::codec::VectorTile *this)
{
  return *((unsigned __int16 *)this + 1436);
}

uint64_t geo::codec::VectorTile::elevationRasterByteCount(geo::codec::VectorTile *this)
{
  return *((unsigned int *)this + 719);
}

uint64_t geo::codec::VectorTile::elevationRasterPng(geo::codec::VectorTile *this)
{
  return *((_QWORD *)this + 360);
}

uint64_t geo::codec::VectorTile::daVinciExternalMaterialCount(geo::codec::VectorTile *this)
{
  return *((unsigned __int16 *)this + 1400);
}

uint64_t geo::codec::VectorTile::daVinciExternalAssetIDs(geo::codec::VectorTile *this)
{
  return *((_QWORD *)this + 351);
}

uint64_t geo::codec::VectorTile::daVinciLandmarkAssetIDs(geo::codec::VectorTile *this)
{
  return *((_QWORD *)this + 352);
}

uint64_t geo::codec::VectorTile::daVinciExternalMaterialIDs(geo::codec::VectorTile *this)
{
  return *((_QWORD *)this + 353);
}

uint64_t geo::codec::VectorTile::daVinciStyleAttributeRasters(geo::codec::VectorTile *this)
{
  return *((_QWORD *)this + 354);
}

uint64_t geo::codec::VectorTile::daVinciStyleAttributeRasterCount(geo::codec::VectorTile *this)
{
  return *((unsigned __int16 *)this + 1420);
}

uint64_t geo::codec::VectorTile::daVinciMaterialRasters(geo::codec::VectorTile *this)
{
  return *((_QWORD *)this + 356);
}

uint64_t geo::codec::VectorTile::dtmRasterInfo(geo::codec::VectorTile *this)
{
  return *((_QWORD *)this + 364);
}

uint64_t geo::codec::VectorTile::dtmRasterBlob(geo::codec::VectorTile *this)
{
  return (uint64_t)this + 2888;
}

uint64_t geo::codec::VectorTile::daVinciMaterialRasterCount(geo::codec::VectorTile *this)
{
  return *((unsigned __int16 *)this + 1428);
}

uint64_t geo::codec::VectorTile::hillshadeRasterCount(geo::codec::VectorTile *this)
{
  return *((unsigned int *)this + 748);
}

uint64_t geo::codec::VectorTile::hillshadeRasterData(geo::codec::VectorTile *this)
{
  return *((_QWORD *)this + 373);
}

uint64_t geo::codec::VectorTile::hillshadeRasterFormat(geo::codec::VectorTile *this)
{
  return *((unsigned __int8 *)this + 3016);
}

_QWORD *geo::codec::VectorTile::liveMetadataForID(int8x8_t *this, unint64_t a2)
{
  int8x8_t v2;
  uint8x8_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v2 = this[78];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (*(_QWORD *)&v2 <= a2)
      v4 = a2 % *(_QWORD *)&v2;
  }
  else
  {
    v4 = (*(_QWORD *)&v2 - 1) & a2;
  }
  v5 = *(_QWORD **)(*(_QWORD *)&this[77] + 8 * v4);
  if (!v5)
    return 0;
  v6 = (_QWORD *)*v5;
  if (!v6)
    return 0;
  if (v3.u32[0] < 2uLL)
  {
    v7 = *(_QWORD *)&v2 - 1;
    while (1)
    {
      v9 = v6[1];
      if (v9 == a2)
      {
        if (v6[2] == a2)
          return v6 + 3;
      }
      else if ((v9 & v7) != v4)
      {
        return 0;
      }
      v6 = (_QWORD *)*v6;
      if (!v6)
        return 0;
    }
  }
  while (1)
  {
    v8 = v6[1];
    if (v8 == a2)
      break;
    if (v8 >= *(_QWORD *)&v2)
      v8 %= *(_QWORD *)&v2;
    if (v8 != v4)
      return 0;
LABEL_11:
    v6 = (_QWORD *)*v6;
    if (!v6)
      return 0;
  }
  if (v6[2] != a2)
    goto LABEL_11;
  return v6 + 3;
}

uint64_t geo::codec::VectorTile::liveVariants(geo::codec::VectorTile *this)
{
  return *((_QWORD *)this + 82);
}

uint64_t geo::codec::VectorTile::regionFeatures(geo::codec::VectorTile *this)
{
  return (uint64_t)this + 3488;
}

uint64_t geo::codec::VectorTile::removedFeatureIDs(geo::codec::VectorTile *this)
{
  return (uint64_t)this + 3776;
}

void std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,4,(geo::ColorSpace)2>>>::push_back[abi:ne180100](void **a1, uint64_t a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  __int16 v14;

  v5 = (char *)a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 < v4)
  {
    *(_WORD *)v5 = *(_WORD *)a2;
    *(_OWORD *)(v5 + 4) = *(_OWORD *)(a2 + 4);
    v6 = v5 + 20;
LABEL_3:
    a1[1] = v6;
    return;
  }
  v7 = (char *)*a1;
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - (_BYTE *)*a1) >> 2);
  v9 = v8 + 1;
  if (v8 + 1 > 0xCCCCCCCCCCCCCCCLL)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v4 - (_QWORD)v7) >> 2);
  if (2 * v10 > v9)
    v9 = 2 * v10;
  if (v10 >= 0x666666666666666)
    v11 = 0xCCCCCCCCCCCCCCCLL;
  else
    v11 = v9;
  if (v11)
  {
    if (v11 > 0xCCCCCCCCCCCCCCCLL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v12 = (char *)operator new(20 * v11);
  }
  else
  {
    v12 = 0;
  }
  v13 = &v12[20 * v8];
  *(_WORD *)v13 = *(_WORD *)a2;
  *(_OWORD *)(v13 + 4) = *(_OWORD *)(a2 + 4);
  v6 = v13 + 20;
  if (v5 != v7)
  {
    do
    {
      v14 = *((_WORD *)v5 - 10);
      v5 -= 20;
      *((_WORD *)v13 - 10) = v14;
      v13 -= 20;
      *(_OWORD *)(v13 + 4) = *(_OWORD *)(v5 + 4);
    }
    while (v5 != v7);
    v5 = (char *)*a1;
  }
  *a1 = v13;
  a1[1] = v6;
  a1[2] = &v12[20 * v11];
  if (!v5)
    goto LABEL_3;
  operator delete(v5);
  a1[1] = v6;
}

void std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,3,(geo::ColorSpace)2>>>::push_back[abi:ne180100](void **a1, uint64_t a2)
{
  unint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  __int16 v15;
  uint64_t v16;

  v5 = (char *)a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 < v4)
  {
    *(_WORD *)v5 = *(_WORD *)a2;
    v6 = *(_QWORD *)(a2 + 4);
    *((_DWORD *)v5 + 3) = *(_DWORD *)(a2 + 12);
    *(_QWORD *)(v5 + 4) = v6;
    v7 = v5 + 16;
LABEL_3:
    a1[1] = v7;
    return;
  }
  v8 = (char *)*a1;
  v9 = (v5 - (_BYTE *)*a1) >> 4;
  v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 60)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  v11 = v4 - (_QWORD)v8;
  if (v11 >> 3 > v10)
    v10 = v11 >> 3;
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
    v12 = 0xFFFFFFFFFFFFFFFLL;
  else
    v12 = v10;
  if (v12)
  {
    if (v12 >> 60)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v13 = (char *)operator new(16 * v12);
  }
  else
  {
    v13 = 0;
  }
  v14 = &v13[16 * v9];
  *(_WORD *)v14 = *(_WORD *)a2;
  *(_QWORD *)(v14 + 4) = *(_QWORD *)(a2 + 4);
  *((_DWORD *)v14 + 3) = *(_DWORD *)(a2 + 12);
  v7 = v14 + 16;
  if (v5 != v8)
  {
    do
    {
      v15 = *((_WORD *)v5 - 8);
      v5 -= 16;
      *((_WORD *)v14 - 8) = v15;
      v14 -= 16;
      v16 = *(_QWORD *)(v5 + 4);
      *((_DWORD *)v14 + 3) = *((_DWORD *)v5 + 3);
      *(_QWORD *)(v14 + 4) = v16;
    }
    while (v5 != v8);
    v5 = (char *)*a1;
  }
  *a1 = v14;
  a1[1] = v7;
  a1[2] = &v13[16 * v12];
  if (!v5)
    goto LABEL_3;
  operator delete(v5);
  a1[1] = v7;
}

char *std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>>>::__push_back_slow_path<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>>>(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  _QWORD *v32;
  _QWORD *v33;
  void *v34;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v5 = 0x555555555555555;
  else
    v5 = v4;
  if (v5 > 0x555555555555555)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v7 = 48 * v5;
  v8 = (char *)operator new(48 * v5);
  v9 = &v8[48 * v3];
  *(_WORD *)v9 = *(_WORD *)a2;
  v10 = *(_QWORD *)(a2 + 8);
  v11 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *((_QWORD *)v9 + 1) = v10;
  *((_QWORD *)v9 + 2) = v11;
  v12 = *(_QWORD *)(a2 + 24);
  *((_QWORD *)v9 + 3) = v12;
  v13 = *(_QWORD *)(a2 + 32);
  *((_QWORD *)v9 + 4) = v13;
  *((_DWORD *)v9 + 10) = *(_DWORD *)(a2 + 40);
  if (v13)
  {
    v14 = *(_QWORD *)(v12 + 8);
    v15 = v11 - 1;
    v16 = v14 % v11;
    if (v14 < v11)
      v16 = v14;
    v17 = v14 & v15;
    if ((v11 & v15) != 0)
      v18 = v16;
    else
      v18 = v17;
    *(_QWORD *)(v10 + 8 * v18) = v9 + 24;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
  }
  v19 = &v8[v7];
  v20 = v9 + 48;
  v21 = (char *)*a1;
  v22 = (char *)a1[1];
  if (v22 == *a1)
  {
    *a1 = v9;
    a1[1] = v20;
    a1[2] = v19;
  }
  else
  {
    v23 = 0;
    do
    {
      v25 = &v9[v23];
      v26 = &v22[v23];
      *((_WORD *)v25 - 24) = *(_WORD *)&v22[v23 - 48];
      v27 = *(_QWORD *)&v22[v23 - 40];
      *((_QWORD *)v26 - 5) = 0;
      *((_QWORD *)v25 - 5) = v27;
      *((_QWORD *)v25 - 4) = *(_QWORD *)&v22[v23 - 32];
      *((_QWORD *)v26 - 4) = 0;
      v28 = *(_QWORD *)&v22[v23 - 24];
      *(_QWORD *)&v9[v23 - 24] = v28;
      v29 = *(_QWORD *)&v22[v23 - 16];
      *((_QWORD *)v25 - 2) = v29;
      *((_DWORD *)v25 - 2) = *(_DWORD *)&v22[v23 - 8];
      if (v29)
      {
        v24 = *(_QWORD *)(v28 + 8);
        v30 = *((_QWORD *)v25 - 4);
        if ((v30 & (v30 - 1)) != 0)
        {
          if (v24 >= v30)
            v24 %= v30;
        }
        else
        {
          v24 &= v30 - 1;
        }
        *(_QWORD *)(v27 + 8 * v24) = &v9[v23 - 24];
        *(_QWORD *)&v22[v23 - 24] = 0;
        *(_QWORD *)&v22[v23 - 16] = 0;
      }
      v23 -= 48;
    }
    while (&v22[v23] != v21);
    v22 = (char *)*a1;
    v31 = (char *)a1[1];
    *a1 = &v9[v23];
    a1[1] = v20;
    a1[2] = v19;
    while (v31 != v22)
    {
      v32 = (_QWORD *)*((_QWORD *)v31 - 3);
      if (v32)
      {
        do
        {
          v33 = (_QWORD *)*v32;
          operator delete(v32);
          v32 = v33;
        }
        while (v33);
      }
      v34 = (void *)*((_QWORD *)v31 - 5);
      *((_QWORD *)v31 - 5) = 0;
      if (v34)
        operator delete(v34);
      v31 -= 48;
    }
  }
  if (v22)
    operator delete(v22);
  return v20;
}

char *std::vector<geo::codec::MaterialSheet::Material>::__push_back_slow_path<geo::codec::MaterialSheet::Material const&>(geo::codec::MaterialSheet::Material **a1, const geo::codec::MaterialSheet::Material *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  geo::codec::MaterialSheet::Material *v8;
  geo::codec::MaterialSheet::Material *v9;
  geo::codec::MaterialSheet::Material *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  unint64_t *v18;
  _QWORD *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  unint64_t *v39;
  _QWORD *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  unint64_t *v60;
  _QWORD *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  geo::codec::MaterialSheet::Material *v111;
  geo::codec::MaterialSheet::Material *v113;
  geo::codec::MaterialSheet::Material *v114;

  v3 = 0x823EE08FB823EE09 * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x8FB823EE08FB82)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  if (0x47DC11F7047DC12 * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0x47DC11F7047DC12 * ((a1[2] - *a1) >> 3);
  if (0x823EE08FB823EE09 * ((a1[2] - *a1) >> 3) >= 0x47DC11F7047DC1)
    v6 = 0x8FB823EE08FB82;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x8FB823EE08FB82)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(456 * v6);
  }
  else
  {
    v7 = 0;
  }
  v113 = (geo::codec::MaterialSheet::Material *)&v7[456 * v3];
  v114 = (geo::codec::MaterialSheet::Material *)&v7[456 * v6];
  geo::codec::MaterialSheet::Material::Material(v113, a2);
  v8 = (geo::codec::MaterialSheet::Material *)((char *)v113 + 456);
  v9 = *a1;
  v10 = a1[1];
  if (v10 == *a1)
  {
    *a1 = v113;
    a1[1] = v8;
    a1[2] = v114;
    if (!v10)
      return (char *)v113 + 456;
    goto LABEL_83;
  }
  v11 = 0;
  do
  {
    v13 = (char *)v113 + v11;
    v14 = (char *)v10 + v11;
    v15 = (char *)v10 + v11 - 456;
    v16 = *(_QWORD *)v15;
    *(_QWORD *)v15 = 0;
    v17 = (char *)v10 + v11 - 448;
    *(_QWORD *)((char *)v113 + v11 - 456) = v16;
    v18 = (unint64_t *)((char *)v113 + v11 - 448);
    *v18 = *(_QWORD *)v17;
    *(_QWORD *)v17 = 0;
    v19 = (_QWORD *)((char *)v113 + v11 - 440);
    v20 = (char *)v10 + v11 - 440;
    v21 = *(_QWORD *)v20;
    *v19 = *(_QWORD *)v20;
    v22 = *(_QWORD *)((char *)v10 + v11 - 432);
    *(_QWORD *)((char *)v113 + v11 - 432) = v22;
    *(_DWORD *)((char *)v113 + v11 - 424) = *(_DWORD *)((char *)v10 + v11 - 424);
    if (v22)
    {
      v23 = *(_QWORD *)(v21 + 8);
      v24 = *v18;
      if ((v24 & (v24 - 1)) != 0)
      {
        if (v23 >= v24)
          v23 %= v24;
      }
      else
      {
        v23 &= v24 - 1;
      }
      *(_QWORD *)(v16 + 8 * v23) = v19;
      *(_QWORD *)v20 = 0;
      *(_QWORD *)((char *)v10 + v11 - 432) = 0;
    }
    v25 = *((_QWORD *)v14 - 52);
    *((_QWORD *)v14 - 52) = 0;
    *((_QWORD *)v13 - 52) = v25;
    v26 = v13 - 408;
    *((_QWORD *)v13 - 51) = *((_QWORD *)v14 - 51);
    *((_QWORD *)v14 - 51) = 0;
    v27 = v13 - 400;
    v28 = v14 - 400;
    v29 = *((_QWORD *)v14 - 50);
    *((_QWORD *)v13 - 50) = v29;
    v30 = *((_QWORD *)v14 - 49);
    *((_QWORD *)v13 - 49) = v30;
    *((_DWORD *)v13 - 96) = *((_DWORD *)v14 - 96);
    if (v30)
    {
      v31 = *(_QWORD *)(v29 + 8);
      v32 = *(_QWORD *)v26;
      v33 = *(_QWORD *)v26 - 1;
      if ((v32 & v33) != 0)
      {
        if (v31 >= v32)
          v31 %= v32;
      }
      else
      {
        v31 &= v33;
      }
      *(_QWORD *)(v25 + 8 * v31) = v27;
      *(_QWORD *)v28 = 0;
      *((_QWORD *)v28 + 1) = 0;
    }
    v34 = (char *)v113 + v11;
    v35 = (char *)v10 + v11;
    v36 = (char *)v10 + v11 - 376;
    v37 = *(_QWORD *)v36;
    *(_QWORD *)v36 = 0;
    v38 = (char *)v10 + v11 - 368;
    *(_QWORD *)((char *)v113 + v11 - 376) = v37;
    v39 = (unint64_t *)((char *)v113 + v11 - 368);
    *v39 = *(_QWORD *)v38;
    *(_QWORD *)v38 = 0;
    v40 = (_QWORD *)((char *)v113 + v11 - 360);
    v41 = (char *)v10 + v11 - 360;
    v42 = *(_QWORD *)v41;
    *v40 = *(_QWORD *)v41;
    v43 = *(_QWORD *)((char *)v10 + v11 - 352);
    *(_QWORD *)((char *)v113 + v11 - 352) = v43;
    *(_DWORD *)((char *)v113 + v11 - 344) = *(_DWORD *)((char *)v10 + v11 - 344);
    if (v43)
    {
      v44 = *(_QWORD *)(v42 + 8);
      v45 = *v39;
      if ((v45 & (v45 - 1)) != 0)
      {
        if (v44 >= v45)
          v44 %= v45;
      }
      else
      {
        v44 &= v45 - 1;
      }
      *(_QWORD *)(v37 + 8 * v44) = v40;
      *(_QWORD *)v41 = 0;
      *(_QWORD *)((char *)v10 + v11 - 352) = 0;
    }
    v46 = *((_QWORD *)v35 - 42);
    *((_QWORD *)v35 - 42) = 0;
    *((_QWORD *)v34 - 42) = v46;
    v47 = v34 - 328;
    *((_QWORD *)v34 - 41) = *((_QWORD *)v35 - 41);
    *((_QWORD *)v35 - 41) = 0;
    v48 = v34 - 320;
    v49 = v35 - 320;
    v50 = *((_QWORD *)v35 - 40);
    *((_QWORD *)v34 - 40) = v50;
    v51 = *((_QWORD *)v35 - 39);
    *((_QWORD *)v34 - 39) = v51;
    *((_DWORD *)v34 - 76) = *((_DWORD *)v35 - 76);
    if (v51)
    {
      v52 = *(_QWORD *)(v50 + 8);
      v53 = *(_QWORD *)v47;
      v54 = *(_QWORD *)v47 - 1;
      if ((v53 & v54) != 0)
      {
        if (v52 >= v53)
          v52 %= v53;
      }
      else
      {
        v52 &= v54;
      }
      *(_QWORD *)(v46 + 8 * v52) = v48;
      *(_QWORD *)v49 = 0;
      *((_QWORD *)v49 + 1) = 0;
    }
    v55 = (char *)v113 + v11;
    v56 = (char *)v10 + v11;
    v57 = (char *)v10 + v11 - 296;
    v58 = *(_QWORD *)v57;
    *(_QWORD *)v57 = 0;
    v59 = (char *)v10 + v11 - 288;
    *(_QWORD *)((char *)v113 + v11 - 296) = v58;
    v60 = (unint64_t *)((char *)v113 + v11 - 288);
    *v60 = *(_QWORD *)v59;
    *(_QWORD *)v59 = 0;
    v61 = (_QWORD *)((char *)v113 + v11 - 280);
    v62 = (char *)v10 + v11 - 280;
    v63 = *(_QWORD *)v62;
    *v61 = *(_QWORD *)v62;
    v64 = *(_QWORD *)((char *)v10 + v11 - 272);
    *(_QWORD *)((char *)v113 + v11 - 272) = v64;
    *(_DWORD *)((char *)v113 + v11 - 264) = *(_DWORD *)((char *)v10 + v11 - 264);
    if (v64)
    {
      v65 = *(_QWORD *)(v63 + 8);
      v66 = *v60;
      if ((v66 & (v66 - 1)) != 0)
      {
        if (v65 >= v66)
          v65 %= v66;
      }
      else
      {
        v65 &= v66 - 1;
      }
      *(_QWORD *)(v58 + 8 * v65) = v61;
      *(_QWORD *)v62 = 0;
      *(_QWORD *)((char *)v10 + v11 - 272) = 0;
    }
    v67 = *((_QWORD *)v56 - 32);
    *((_QWORD *)v56 - 32) = 0;
    *((_QWORD *)v55 - 32) = v67;
    *((_QWORD *)v55 - 31) = *((_QWORD *)v56 - 31);
    *((_QWORD *)v56 - 31) = 0;
    v70 = *((_QWORD *)v56 - 30);
    v68 = v56 - 240;
    v69 = v70;
    *((_QWORD *)v55 - 30) = v70;
    v71 = v55 - 240;
    v72 = *((_QWORD *)v68 + 1);
    *((_QWORD *)v55 - 29) = v72;
    *((_DWORD *)v55 - 56) = *((_DWORD *)v68 + 4);
    if (v72)
    {
      v73 = *(_QWORD *)(v69 + 8);
      v74 = *((_QWORD *)v55 - 31);
      if ((v74 & (v74 - 1)) != 0)
      {
        if (v73 >= v74)
          v73 %= v74;
      }
      else
      {
        v73 &= v74 - 1;
      }
      *(_QWORD *)(v67 + 8 * v73) = v71;
      *(_QWORD *)v68 = 0;
      *((_QWORD *)v68 + 1) = 0;
    }
    v75 = (char *)v113 + v11;
    v76 = (char *)v10 + v11;
    v77 = *(_QWORD *)((char *)v10 + v11 - 216);
    *((_QWORD *)v76 - 27) = 0;
    *((_QWORD *)v75 - 27) = v77;
    *((_QWORD *)v75 - 26) = *(_QWORD *)((char *)v10 + v11 - 208);
    *((_QWORD *)v76 - 26) = 0;
    v78 = *(_QWORD *)((char *)v10 + v11 - 200);
    *(_QWORD *)((char *)v113 + v11 - 200) = v78;
    v79 = *(_QWORD *)((char *)v10 + v11 - 192);
    *((_QWORD *)v75 - 24) = v79;
    *((_DWORD *)v75 - 46) = *(_DWORD *)((char *)v10 + v11 - 184);
    if (v79)
    {
      v80 = *(_QWORD *)(v78 + 8);
      v81 = *((_QWORD *)v75 - 26);
      if ((v81 & (v81 - 1)) != 0)
      {
        if (v80 >= v81)
          v80 %= v81;
      }
      else
      {
        v80 &= v81 - 1;
      }
      *(_QWORD *)(v77 + 8 * v80) = (char *)v113 + v11 - 200;
      *(_QWORD *)((char *)v10 + v11 - 200) = 0;
      *(_QWORD *)((char *)v10 + v11 - 192) = 0;
    }
    v82 = *((_QWORD *)v76 - 22);
    *((_QWORD *)v76 - 22) = 0;
    *((_QWORD *)v75 - 22) = v82;
    *((_QWORD *)v75 - 21) = *((_QWORD *)v76 - 21);
    *((_QWORD *)v76 - 21) = 0;
    v85 = *((_QWORD *)v76 - 20);
    v83 = v76 - 160;
    v84 = v85;
    *((_QWORD *)v75 - 20) = v85;
    v86 = v75 - 160;
    v87 = *((_QWORD *)v83 + 1);
    *((_QWORD *)v75 - 19) = v87;
    *((_DWORD *)v75 - 36) = *((_DWORD *)v83 + 4);
    if (v87)
    {
      v88 = *(_QWORD *)(v84 + 8);
      v89 = *((_QWORD *)v75 - 21);
      if ((v89 & (v89 - 1)) != 0)
      {
        if (v88 >= v89)
          v88 %= v89;
      }
      else
      {
        v88 &= v89 - 1;
      }
      *(_QWORD *)(v82 + 8 * v88) = v86;
      *(_QWORD *)v83 = 0;
      *((_QWORD *)v83 + 1) = 0;
    }
    v90 = (char *)v113 + v11;
    v91 = (char *)v10 + v11;
    v92 = *(_QWORD *)((char *)v10 + v11 - 136);
    *((_QWORD *)v91 - 17) = 0;
    *((_QWORD *)v90 - 17) = v92;
    *((_QWORD *)v90 - 16) = *(_QWORD *)((char *)v10 + v11 - 128);
    *((_QWORD *)v91 - 16) = 0;
    v93 = *(_QWORD *)((char *)v10 + v11 - 120);
    *(_QWORD *)((char *)v113 + v11 - 120) = v93;
    v94 = *(_QWORD *)((char *)v10 + v11 - 112);
    *((_QWORD *)v90 - 14) = v94;
    *((_DWORD *)v90 - 26) = *(_DWORD *)((char *)v10 + v11 - 104);
    if (v94)
    {
      v95 = *(_QWORD *)(v93 + 8);
      v96 = *((_QWORD *)v90 - 16);
      if ((v96 & (v96 - 1)) != 0)
      {
        if (v95 >= v96)
          v95 %= v96;
      }
      else
      {
        v95 &= v96 - 1;
      }
      *(_QWORD *)(v92 + 8 * v95) = (char *)v113 + v11 - 120;
      *(_QWORD *)((char *)v10 + v11 - 120) = 0;
      *(_QWORD *)((char *)v10 + v11 - 112) = 0;
    }
    v97 = *((_QWORD *)v91 - 12);
    *((_QWORD *)v91 - 12) = 0;
    *((_QWORD *)v90 - 12) = v97;
    *((_QWORD *)v90 - 11) = *((_QWORD *)v91 - 11);
    *((_QWORD *)v91 - 11) = 0;
    v100 = *((_QWORD *)v91 - 10);
    v98 = v91 - 80;
    v99 = v100;
    *((_QWORD *)v90 - 10) = v100;
    v101 = v90 - 80;
    v102 = *((_QWORD *)v98 + 1);
    *((_QWORD *)v90 - 9) = v102;
    *((_DWORD *)v90 - 16) = *((_DWORD *)v98 + 4);
    if (v102)
    {
      v103 = *(_QWORD *)(v99 + 8);
      v104 = *((_QWORD *)v90 - 11);
      if ((v104 & (v104 - 1)) != 0)
      {
        if (v103 >= v104)
          v103 %= v104;
      }
      else
      {
        v103 &= v104 - 1;
      }
      *(_QWORD *)(v97 + 8 * v103) = v101;
      *(_QWORD *)v98 = 0;
      *((_QWORD *)v98 + 1) = 0;
    }
    v105 = (char *)v113 + v11;
    v106 = (char *)v10 + v11;
    *((_QWORD *)v105 - 7) = *(_QWORD *)((char *)v10 + v11 - 56);
    v107 = *(_QWORD *)((char *)v10 + v11 - 48);
    *((_QWORD *)v106 - 6) = 0;
    *((_QWORD *)v105 - 6) = v107;
    *((_QWORD *)v105 - 5) = *(_QWORD *)((char *)v10 + v11 - 40);
    *((_QWORD *)v106 - 5) = 0;
    v108 = *(_QWORD *)((char *)v10 + v11 - 32);
    *(_QWORD *)((char *)v113 + v11 - 32) = v108;
    v109 = *(_QWORD *)((char *)v10 + v11 - 24);
    *((_QWORD *)v105 - 3) = v109;
    *((_DWORD *)v105 - 4) = *(_DWORD *)((char *)v10 + v11 - 16);
    if (v109)
    {
      v12 = *(_QWORD *)(v108 + 8);
      v110 = *((_QWORD *)v105 - 5);
      if ((v110 & (v110 - 1)) != 0)
      {
        if (v12 >= v110)
          v12 %= v110;
      }
      else
      {
        v12 &= v110 - 1;
      }
      *(_QWORD *)(v107 + 8 * v12) = (char *)v113 + v11 - 32;
      *(_QWORD *)((char *)v10 + v11 - 32) = 0;
      *(_QWORD *)((char *)v10 + v11 - 24) = 0;
    }
    *((_WORD *)v105 - 4) = *((_WORD *)v106 - 4);
    v11 -= 456;
  }
  while ((geo::codec::MaterialSheet::Material *)((char *)v10 + v11) != v9);
  v10 = *a1;
  v111 = a1[1];
  *a1 = (geo::codec::MaterialSheet::Material *)((char *)v113 + v11);
  a1[1] = v8;
  a1[2] = v114;
  while (v111 != v10)
    geo::codec::MaterialSheet::Material::~Material((geo::codec::MaterialSheet::Material *)((char *)v111 - 456));
  if (v10)
LABEL_83:
    operator delete(v10);
  return (char *)v113 + 456;
}

void sub_19FF7D410(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<geo::codec::MaterialSheet::Material>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>>>::__init_with_size[abi:ne180100]<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>>*,std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>>*>(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;

  if (a4)
  {
    v5 = (_QWORD *)result;
    if (a4 >= 0x555555555555556)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    result = (uint64_t)operator new(48 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = result + 48 * a4;
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        *(_WORD *)(v8 + v9) = *(_WORD *)(a2 + v9);
        result = std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>::unordered_map(v8 + v9 + 8, a2 + v9 + 8);
        v9 += 48;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_19FF7D4EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::__exception_guard_exceptions<std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>>>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_19FF7D500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;

  if (v12)
  {
    do
    {
      v14 = *(_QWORD **)(v11 - 24);
      if (v14)
      {
        do
        {
          v15 = (_QWORD *)*v14;
          operator delete(v14);
          v14 = v15;
        }
        while (v15);
      }
      v16 = *(void **)(v11 - 40);
      *(_QWORD *)(v11 - 40) = 0;
      if (v16)
        operator delete(v16);
      v11 -= 48;
    }
    while (v11 != v10);
  }
  *(_QWORD *)(v9 + 8) = v10;
  std::__exception_guard_exceptions<std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>>>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void ***std::__exception_guard_exceptions<std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>>>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](void ***result)
{
  void ***v1;
  void **v2;
  char *v3;
  char *v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (char *)**result;
    if (v3)
    {
      v4 = (char *)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          v6 = (_QWORD *)*((_QWORD *)v4 - 3);
          if (v6)
          {
            do
            {
              v7 = (_QWORD *)*v6;
              operator delete(v6);
              v6 = v7;
            }
            while (v7);
          }
          v8 = (void *)*((_QWORD *)v4 - 5);
          *((_QWORD *)v4 - 5) = 0;
          if (v8)
            operator delete(v8);
          v4 -= 48;
        }
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>::__init_with_size[abi:ne180100]<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>*,std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>*>(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;

  if (a4)
  {
    v5 = (_QWORD *)result;
    if (a4 >= 0x555555555555556)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    result = (uint64_t)operator new(48 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = result + 48 * a4;
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        *(_WORD *)(v8 + v9) = *(_WORD *)(a2 + v9);
        result = std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>::unordered_map(v8 + v9 + 8, a2 + v9 + 8);
        v9 += 48;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_19FF7D6D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::__exception_guard_exceptions<std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>>>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_19FF7D6E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;

  if (v12)
  {
    do
    {
      v14 = *(_QWORD **)(v11 - 24);
      if (v14)
      {
        do
        {
          v15 = (_QWORD *)*v14;
          operator delete(v14);
          v14 = v15;
        }
        while (v15);
      }
      v16 = *(void **)(v11 - 40);
      *(_QWORD *)(v11 - 40) = 0;
      if (v16)
        operator delete(v16);
      v11 -= 48;
    }
    while (v11 != v10);
  }
  *(_QWORD *)(v9 + 8) = v10;
  std::__exception_guard_exceptions<std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>>>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<geo::codec::MaterialSheet::Material>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 456;
    geo::codec::MaterialSheet::Material::~Material((geo::codec::MaterialSheet::Material *)(i - 456));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

char *std::vector<std::vector<std::pair<unsigned short,unsigned int>>>::__push_back_slow_path<std::vector<std::pair<unsigned short,unsigned int>> const&>(char **a1, const void *a2, uint64_t a3)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  int64_t v14;
  char *v15;
  size_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  char *v20;
  char *v21;
  void *v22;
  void *v23;
  __int128 v25;

  v5 = *a1;
  v4 = a1[1];
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * ((a1[2] - v5) >> 3) > v7)
    v7 = 0x5555555555555556 * ((a1[2] - v5) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v5) >> 3) >= 0x555555555555555)
    v10 = 0xAAAAAAAAAAAAAAALL;
  else
    v10 = v7;
  if (v10)
  {
    if (v10 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v11 = (char *)operator new(24 * v10);
  }
  else
  {
    v11 = 0;
  }
  v12 = &v11[24 * v6];
  v13 = &v11[24 * v10];
  *((_QWORD *)v12 + 1) = 0;
  *((_QWORD *)&v25 + 1) = v13;
  *((_QWORD *)v12 + 2) = 0;
  *(_QWORD *)v12 = 0;
  v14 = a3 - (_QWORD)a2;
  if (v14)
  {
    if (v14 < 0)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v15 = (char *)operator new(v14);
    *(_QWORD *)v12 = v15;
    *((_QWORD *)v12 + 2) = &v15[8 * (v14 >> 3)];
    v16 = v14 & 0xFFFFFFFFFFFFFFF8;
    memcpy(v15, a2, v16);
    *((_QWORD *)v12 + 1) = &v15[v16];
  }
  v17 = v12 + 24;
  *(_QWORD *)&v25 = v12 + 24;
  if (v4 == v5)
  {
    *a1 = v12;
    a1[1] = v17;
    a1[2] = v13;
  }
  else
  {
    do
    {
      v18 = v12;
      *((_QWORD *)v12 - 2) = 0;
      *((_QWORD *)v12 - 1) = 0;
      v19 = *(_OWORD *)(v4 - 24);
      v4 -= 24;
      *(_OWORD *)(v12 - 24) = v19;
      v12 -= 24;
      *((_QWORD *)v18 - 1) = *((_QWORD *)v4 + 2);
      *(_QWORD *)v4 = 0;
      *((_QWORD *)v4 + 1) = 0;
      *((_QWORD *)v4 + 2) = 0;
    }
    while (v4 != v5);
    v4 = *a1;
    v20 = a1[1];
    *a1 = v12;
    *(_OWORD *)(a1 + 1) = v25;
    v17 = (char *)v25;
    if (v20 != v4)
    {
      v21 = v20;
      do
      {
        v23 = (void *)*((_QWORD *)v21 - 3);
        v21 -= 24;
        v22 = v23;
        if (v23)
        {
          *((_QWORD *)v20 - 2) = v22;
          operator delete(v22);
        }
        v20 = v21;
      }
      while (v21 != v4);
    }
  }
  if (v4)
    operator delete(v4);
  return v17;
}

void sub_19FF7D96C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v2;
  _QWORD *v3;
  void *v5;
  va_list va;

  va_start(va, a2);
  v5 = *v2;
  if (*v2)
  {
    *v3 = v5;
    operator delete(v5);
  }
  std::__split_buffer<std::vector<std::pair<unsigned short,unsigned int>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::vector<std::pair<unsigned short,unsigned int>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        v5 = v2 - 24;
        v4 = *(void **)(v2 - 24);
        *(_QWORD *)(a1 + 16) = v2 - 24;
        if (!v4)
          break;
        *(_QWORD *)(v2 - 16) = v4;
        operator delete(v4);
        v2 = *(_QWORD *)(a1 + 16);
        if (v2 == v3)
          goto LABEL_6;
      }
      v2 -= 24;
    }
    while (v5 != v3);
  }
LABEL_6:
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

unint64_t *std::vector<unsigned char,geo::StdAllocator<unsigned char,geo::codec::Allocator>>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(unint64_t *result, char *__src, char *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  unint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  size_t v13;
  char *v14;
  _BYTE *v15;
  char *v16;
  size_t v17;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (_BYTE *)*result;
  if (v8 - *result >= a4)
  {
    v12 = (_BYTE *)result[1];
    v13 = v12 - v9;
    if (v12 - v9 >= a4)
    {
      v17 = a3 - __src;
      if (v17)
        result = (unint64_t *)memmove((void *)*result, __src, v17);
      v7[1] = &v9[v17];
    }
    else
    {
      v14 = &__src[v13];
      if (v12 != v9)
      {
        result = (unint64_t *)memmove((void *)*result, __src, v13);
        v9 = (_BYTE *)v7[1];
      }
      v15 = v9;
      if (v14 != a3)
      {
        v15 = v9;
        v16 = v9;
        do
        {
          if (v16)
            *v16 = *v14;
          ++v14;
          ++v16;
          ++v15;
        }
        while (v14 != a3);
      }
      v7[1] = v15;
    }
  }
  else
  {
    if (v9)
    {
      result[1] = (unint64_t)v9;
      (*(void (**)(unint64_t, _BYTE *))(*(_QWORD *)result[3] + 40))(result[3], v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0)
      goto LABEL_29;
    v10 = 2 * v8;
    if (2 * v8 <= a4)
      v10 = a4;
    v11 = v8 >= 0x3FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v10;
    if (v11 < 0)
LABEL_29:
      std::vector<double>::__throw_length_error[abi:ne180100]();
    result = (unint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v7[3] + 16))(v7[3], v11, 1);
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v11;
    while (v6 != a3)
    {
      if (result)
        *(_BYTE *)result = *v6;
      ++v6;
      result = (unint64_t *)((char *)result + 1);
    }
    v7[1] = result;
  }
  return result;
}

_QWORD *std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(_QWORD *result, char *__src, char *a3, unint64_t a4)
{
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  size_t v11;
  size_t v12;
  _BYTE *v13;
  size_t v14;
  char *v15;

  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0)
      goto LABEL_22;
    v10 = 2 * v8;
    if (2 * v8 <= a4)
      v10 = a4;
    v11 = v8 >= 0x3FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v10;
    if ((v11 & 0x8000000000000000) != 0)
LABEL_22:
      std::vector<double>::__throw_length_error[abi:ne180100]();
    result = operator new(v11);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v11;
    v12 = a3 - __src;
    if (v12)
      result = memcpy(result, __src, v12);
LABEL_21:
    v7[1] = &v9[v12];
    return result;
  }
  v13 = (_BYTE *)result[1];
  v14 = v13 - v9;
  if (v13 - v9 >= a4)
  {
    v12 = a3 - __src;
    if (v12)
      result = memmove((void *)*result, __src, v12);
    goto LABEL_21;
  }
  v15 = &__src[v14];
  if (v13 != v9)
  {
    result = memmove((void *)*result, __src, v14);
    v9 = (char *)v7[1];
  }
  if (a3 != v15)
    result = memmove(v9, v15, a3 - v15);
  v7[1] = &v9[a3 - v15];
  return result;
}

void geo::codec::copyFeatureStyleAttributes(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  const void *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  void *v13;

  v3 = *a1;
  if (*a1)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = (char *)operator new(0x40uLL);
      v6 = v5;
      v7 = *(const void **)(v3 + 24);
      *((_QWORD *)v5 + 1) = 0;
      *((_QWORD *)v5 + 2) = 0;
      *(_QWORD *)v5 = &off_1E42DAB78;
      v8 = *(unsigned __int8 *)(v3 + 32);
      *((_QWORD *)v5 + 3) = *(_QWORD *)v4;
      v9 = v5 + 24;
      v10 = *(_QWORD *)(v3 + 16);
      *((_QWORD *)v5 + 4) = v4;
      *((_QWORD *)v5 + 5) = v10;
      if (v10)
      {
        v11 = (unint64_t *)(v10 + 8);
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
        v4 = *(_QWORD *)(v3 + 8);
      }
      *((_QWORD *)v5 + 6) = 0;
      v5[56] = 0;
      *(_WORD *)(v5 + 57) = *(unsigned __int8 *)(v4 + 33);
      if (v7 && (_DWORD)v8)
      {
        v13 = malloc_type_malloc(12 * v8, 0x10000403E1C8BA9uLL);
        *((_QWORD *)v6 + 6) = v13;
        if (v13)
        {
          v6[56] = v8;
          memcpy(v13, v7, 12 * v8);
        }
      }
    }
    else
    {
      v6 = (char *)operator new(0x40uLL);
      *((_QWORD *)v6 + 1) = 0;
      *((_QWORD *)v6 + 2) = 0;
      *(_QWORD *)v6 = &off_1E42DAB78;
      v9 = v6 + 24;
      FeatureStyleAttributes::FeatureStyleAttributes((FeatureStyleAttributes *)(v6 + 24), (const FeatureStyleAttributes *)v3);
    }
    *a2 = v9;
    a2[1] = v6;
    v6[58] = 0;
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

void sub_19FF7DE30(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void *v6;
  void *v7;

  shared_weak_owners = (std::__shared_weak_count *)v1[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    p_shared_owners = (unint64_t *)&shared_weak_owners->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
      std::__shared_weak_count::__release_weak(shared_weak_owners);
      std::__shared_weak_count::~__shared_weak_count(v1);
      operator delete(v6);
      _Unwind_Resume(a1);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v7);
  _Unwind_Resume(a1);
}

uint64_t geo::codec::transitLinkFirstPoint(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  if (!*(_DWORD *)(a1 + 20))
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v2)
    return 0;
  v3 = 0;
LABEL_4:
  v4 = std::__shared_weak_count::lock(v2);
  if (!v4)
    goto LABEL_21;
  v5 = v4;
  if (*(_QWORD *)a1 && (v6 = *(_QWORD *)(*(_QWORD *)a1 + 1400)) != 0)
  {
    v7 = (_QWORD *)(*(_QWORD *)(v6 + 32) + 16 * *(unsigned int *)(a1 + 16) + 16 * v3);
    v8 = v7[1];
    v9 = *(_QWORD *)(v6 + 8) + 8 * *v7;
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  if (!v8)
  {
LABEL_21:
    while (++v3 < (unint64_t)*(unsigned int *)(a1 + 20))
    {
      v2 = *(std::__shared_weak_count **)(a1 + 8);
      if (v2)
        goto LABEL_4;
    }
    return 0;
  }
  return v9;
}

uint64_t geo::codec::transitLinkPoints(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v15;

  if (*(_DWORD *)(a1 + 20))
  {
    v5 = *(std::__shared_weak_count **)(a1 + 8);
    if (v5 && (v7 = std::__shared_weak_count::lock(v5)) != 0)
    {
      v8 = v7;
      if (*(_QWORD *)a1)
      {
        v9 = *(_QWORD *)(*(_QWORD *)a1 + 1400);
        if (v9)
        {
          v10 = (_QWORD *)(*(_QWORD *)(v9 + 32) + 16 * *(unsigned int *)(a1 + 16) + 16 * a2);
          v11 = *(_QWORD *)(v9 + 8);
          v9 = v10[1];
          v12 = v11 + 8 * *v10;
        }
        else
        {
          v12 = 0;
        }
        *a3 = v9;
      }
      else
      {
        v12 = 0;
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v8);
      }
      return v12;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    *a3 = 0;
    return 0;
  }
}

uint64_t std::shared_ptr<geo::codec::VectorTile>::~shared_ptr[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void geo::codec::transitNodeFeatureGetSystem(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (a3)
    *a3 = 0;
  if (a1)
  {
    if (a1[29] > a2)
    {
      v6 = (std::__shared_weak_count *)a1[1];
      if (v6)
      {
        v7 = std::__shared_weak_count::lock(v6);
        if (v7)
        {
          v8 = v7;
          v9 = (_QWORD *)*a1;
          if (*a1)
          {
            if (a3)
            {
              v10 = *(_QWORD *)(v9[180] + 8 * (a1[28] + a2));
              v11 = v9[165];
              v12 = v9[164];
              if (v10 < 0x8E38E38E38E38E39 * ((v11 - v12) >> 3))
                *a3 = v12 + 72 * v10;
            }
          }
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v14 = __ldaxr(p_shared_owners);
          while (__stlxr(v14 - 1, p_shared_owners));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
      }
    }
  }
}

_QWORD *geo::codec::multiSectionFeaturePointsWithElevation(_QWORD *result, unint64_t a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v6;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (!result)
  {
    v8 = 0;
    goto LABEL_13;
  }
  v6 = result;
  if (*((unsigned int *)result + 25) <= a2)
    goto LABEL_11;
  result = geo::codec::vertexPoolForFeature((uint64_t)result);
  v8 = result;
  if (!result)
  {
LABEL_13:
    *a4 = v8;
    return result;
  }
  v9 = result[4];
  if (!v9)
    return 0;
  v10 = *((unsigned int *)v6 + 24) + a2;
  if (result[5] <= v10 || (v11 = *(_QWORD *)(v9 + 16 * v10), v11 >= result[2]))
  {
LABEL_11:
    result = 0;
    *a4 = 0;
    return result;
  }
  result = (_QWORD *)(result[1] + 8 * v11);
  if (a3)
  {
    v12 = v8[3];
    if (v12)
    {
      *a3 = v12 + 4 * v11;
      v9 = v8[4];
    }
  }
  *a4 = *(_QWORD *)(v9 + 16 * v10 + 8);
  return result;
}

void geo::codec::featureGetNativeLabel(uint64_t a1, unint64_t a2, _QWORD *a3, _QWORD *a4)
{
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (a1)
  {
    v7 = *(std::__shared_weak_count **)(a1 + 8);
    if (v7)
    {
      v9 = std::__shared_weak_count::lock(v7);
      if (v9 && *(unsigned __int8 *)(a1 + 73) > a2 && *(_QWORD *)a1)
      {
        v10 = *(unsigned int *)(a1 + 56) + a2;
        v11 = *(_QWORD *)(*(_QWORD *)a1 + 1048);
        if (a3)
          *a3 = *(_QWORD *)(v11 + 24 * v10);
        if (!a4)
        {
LABEL_17:
          p_shared_owners = (unint64_t *)&v9->__shared_owners_;
          do
            v14 = __ldaxr(p_shared_owners);
          while (__stlxr(v14 - 1, p_shared_owners));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          return;
        }
        v12 = *(_QWORD *)(v11 + 24 * v10 + 8);
        goto LABEL_15;
      }
    }
    else
    {
      v9 = 0;
    }
    if (a3)
      *a3 = 0;
    if (!a4)
    {
LABEL_16:
      if (!v9)
        return;
      goto LABEL_17;
    }
    v12 = 0;
LABEL_15:
    *a4 = v12;
    goto LABEL_16;
  }
}

uint64_t geo::codec::tileGetNativeLabel(uint64_t result, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;

  if (*(_QWORD *)result)
  {
    v4 = *(_QWORD *)(*(_QWORD *)result + 1048);
    if (a3)
      *a3 = *(_QWORD *)(v4 + 24 * a2);
    if (a4)
    {
      v5 = *(_QWORD *)(v4 + 24 * a2 + 8);
LABEL_10:
      *a4 = v5;
    }
  }
  else
  {
    if (a3)
      *a3 = 0;
    if (a4)
    {
      v5 = 0;
      goto LABEL_10;
    }
  }
  return result;
}

uint64_t *geo::codec::transitSystemInfoGetNativeLabel(uint64_t *result, uint64_t a2, unint64_t a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (a2)
  {
    v5 = *result;
    if (*(_QWORD *)(a2 + 40) <= a3 || v5 == 0)
    {
      if (a4)
        *a4 = 0;
      if (a5)
      {
        v7 = 0;
LABEL_15:
        *a5 = v7;
      }
    }
    else
    {
      v8 = *(_QWORD *)(a2 + 48) + a3;
      v9 = *(_QWORD *)(v5 + 1048);
      if (a4)
        *a4 = *(_QWORD *)(v9 + 24 * v8);
      if (a5)
      {
        v7 = *(_QWORD *)(v9 + 24 * v8 + 8);
        goto LABEL_15;
      }
    }
  }
  return result;
}

void geo::codec::transitLineGetSubtitleNativeLabel(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;

  if (a1)
  {
    v6 = *(_DWORD *)(a1 + 92);
    v7 = *(std::__shared_weak_count **)(a1 + 8);
    if (v6 != -1)
    {
      if (v7)
      {
        v8 = std::__shared_weak_count::lock(v7);
        if (v8 && *(_QWORD *)a1)
        {
          v9 = *(_DWORD *)(a1 + 92);
          v10 = *(_QWORD *)(*(_QWORD *)a1 + 1048);
          if (a2)
            *a2 = *(_QWORD *)(v10 + 24 * v9);
          if (!a3)
          {
LABEL_25:
            p_shared_owners = (unint64_t *)&v8->__shared_owners_;
            do
              v14 = __ldaxr(p_shared_owners);
            while (__stlxr(v14 - 1, p_shared_owners));
LABEL_36:
            if (!v14)
            {
              ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
              std::__shared_weak_count::__release_weak(v8);
            }
            return;
          }
          v11 = *(_QWORD *)(v10 + 24 * v9 + 8);
          goto LABEL_23;
        }
      }
      else
      {
        v8 = 0;
      }
      if (a2)
        *a2 = 0;
      if (!a3)
      {
LABEL_24:
        if (!v8)
          return;
        goto LABEL_25;
      }
      v11 = 0;
LABEL_23:
      *a3 = v11;
      goto LABEL_24;
    }
    if (v7)
    {
      v8 = std::__shared_weak_count::lock(v7);
      if (v8 && *(_BYTE *)(a1 + 72) && *(_QWORD *)a1)
      {
        v12 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 1064) + 32 * *(unsigned int *)(a1 + 60));
        if (a2)
          *a2 = *v12;
        if (a3)
          *a3 = v12[1];
LABEL_34:
        v15 = (unint64_t *)&v8->__shared_owners_;
        do
          v14 = __ldaxr(v15);
        while (__stlxr(v14 - 1, v15));
        goto LABEL_36;
      }
    }
    else
    {
      v8 = 0;
    }
    if (a2)
      *a2 = 0;
    if (a3)
      *a3 = 0;
    if (v8)
      goto LABEL_34;
  }
}

void geo::codec::featureGetLocalizedLabelForNativeLabel(uint64_t *a1, unint64_t a2, _QWORD *a3, _QWORD *a4)
{
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  if (a1)
  {
    v12 = 0;
    v13 = 0;
    v8 = (std::__shared_weak_count *)a1[1];
    if (v8)
    {
      v9 = std::__shared_weak_count::lock(v8);
      v13 = v9;
      if (v9)
        v12 = *a1;
    }
    else
    {
      v9 = 0;
    }
    geo::codec::vectorTileGetLocalizedLabelForNativeLabel(&v12, a2, a3, a4);
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_19FF7E68C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<geo::codec::VectorTile>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *geo::codec::tileGetLocalizedLabel(_QWORD **a1, uint64_t a2, unint64_t *a3, unint64_t *a4)
{
  return geo::codec::vectorTileGetLocalizedLabel(*a1, 1uLL, a2, 0, a3, a4);
}

void geo::codec::featureGetLocalizedLabel(uint64_t a1, unint64_t a2, unint64_t *a3, unint64_t *a4)
{
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  if (a1)
  {
    v8 = *(std::__shared_weak_count **)(a1 + 8);
    if (v8)
    {
      v8 = std::__shared_weak_count::lock(v8);
      v9 = v8;
      if (v8)
        v8 = *(std::__shared_weak_count **)a1;
    }
    else
    {
      v9 = 0;
    }
    geo::codec::vectorTileGetLocalizedLabel(v8, *(unsigned __int8 *)(a1 + 73), *(unsigned int *)(a1 + 56), a2, a3, a4);
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_19FF7E790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<geo::codec::VectorTile>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *geo::codec::transitSystemInfoGetLocalizedLabel(_QWORD **a1, uint64_t a2, unint64_t a3, unint64_t *a4, unint64_t *a5)
{
  return geo::codec::vectorTileGetLocalizedLabel(*a1, *(_QWORD *)(a2 + 40), *(_QWORD *)(a2 + 48), a3, a4, a5);
}

uint64_t geo::codec::roadFeatureCrossings(geo::codec *this, const GeoCodecsRoadFeature *a2, _QWORD *a3, unint64_t *a4)
{
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unsigned int v15;
  BOOL v16;
  unint64_t *p_shared_owners;
  unint64_t v19;

  if (!this || !*((_WORD *)this + 73) || *((unsigned int *)this + 25) <= (unint64_t)a2)
  {
    v11 = 0;
    *a3 = 0;
    return v11;
  }
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (!v7)
    return 0;
  v8 = std::__shared_weak_count::lock(v7);
  if (!v8)
    return 0;
  v9 = v8;
  if (*(_QWORD *)this)
  {
    v10 = *((unsigned __int16 *)this + 73);
    if (*((_WORD *)this + 73))
    {
      v11 = 0;
      v12 = 0;
      v13 = *(_QWORD *)(*(_QWORD *)this + 744) + 12 * *((unsigned int *)this + 34);
      v14 = (unsigned __int16 *)v13;
      do
      {
        v15 = *v14;
        v14 += 6;
        v16 = v15 == (_QWORD)a2;
        if ((const GeoCodecsRoadFeature *)v15 == a2)
          ++v12;
        if (v16 && v11 == 0)
          v11 = v13;
        v13 = (uint64_t)v14;
        --v10;
      }
      while (v10);
    }
    else
    {
      v12 = 0;
      v11 = 0;
    }
    *a3 = v12;
  }
  else
  {
    v11 = 0;
  }
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (v19)
    return v11;
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v9);
  return v11;
}

uint64_t geo::codec::transitLinkGetLineCount(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 32);
  return result;
}

uint64_t geo::codec::transitLinkGetLineDirection(_QWORD *a1, unint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v11;

  if (!a1)
    return 0;
  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3)
    return 0;
  v5 = std::__shared_weak_count::lock(v3);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = 0;
  if (a1[4] > a2 && *a1)
  {
    v8 = *(_QWORD *)(*a1 + 1656);
    if (v8)
      v7 = *(unsigned __int8 *)(v8 + a1[3] + a2);
    else
      v7 = 0;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v7;
}

_QWORD *geo::codec::transitLinkGetFromNodeID(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = (_QWORD *)a1;
  if (!a1)
    return v2;
  v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v3)
    return 0;
  v5 = std::__shared_weak_count::lock(v3);
  if (!v5)
    return 0;
  v6 = v5;
  if (*v2 && v2[14] > (unint64_t)(2 * a2))
    v2 = **(_QWORD ***)(*(_QWORD *)(*v2 + 1680) + 8 * (v2[13] + 2 * a2));
  else
    v2 = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v2;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v6);
  return v2;
}

_QWORD *geo::codec::transitLinkGetToNodeID(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = (_QWORD *)a1;
  if (!a1)
    return v2;
  v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v3)
    return 0;
  v5 = std::__shared_weak_count::lock(v3);
  if (!v5)
    return 0;
  v6 = v5;
  if (*v2 && (v7 = (2 * a2) | 1, v2[14] > v7))
    v2 = **(_QWORD ***)(*(_QWORD *)(*v2 + 1680) + 8 * (v2[13] + v7));
  else
    v2 = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (v10)
    return v2;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v6);
  return v2;
}

BOOL geo::codec::transitLinkGetShouldDrawFromEndPoint(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  _BOOL8 v7;
  unint64_t *p_shared_owners;
  unint64_t v10;

  if (!a1)
    return 0;
  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3)
    return 0;
  v5 = std::__shared_weak_count::lock(v3);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = *a1
    && 2 * a2 < (unint64_t)(2 * a1[4])
    && *(unsigned __int8 *)(*(_QWORD *)(*a1 + 1768) + 2 * (a1[3] + a2)) != 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v7;
}

unint64_t geo::codec::transitLinkGetShouldDrawToEndPoint(unint64_t a1, uint64_t a2)
{
  unint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = a1;
  if (!a1)
    return v2;
  v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v3)
    return 0;
  v5 = std::__shared_weak_count::lock(v3);
  if (!v5)
    return 0;
  v6 = v5;
  v2 = *(_QWORD *)v2
    && (v7 = (2 * a2) | 1, v7 < 2 * *(_QWORD *)(v2 + 32))
    && *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v2 + 1768) + v7 + 2 * *(_QWORD *)(v2 + 24)) != 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (v10)
    return v2;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v6);
  return v2;
}

uint64_t geo::codec::featureGetNativeLabelCount(uint64_t result)
{
  if (result)
    return *(unsigned __int8 *)(result + 73);
  return result;
}

uint64_t geo::codec::featureGetNativeShieldCount(uint64_t result)
{
  if (result)
    return *(unsigned __int8 *)(result + 72);
  return result;
}

uint64_t geo::codec::featureStyleAttributesCompare(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  uint64_t result;
  uint64_t v8;
  unsigned int v9;

  v2 = *a1;
  v3 = *a2;
  if (*a1 == *a2)
    return 0;
  if (!v2)
    return 0xFFFFFFFFLL;
  if (!v3)
    return 1;
  v4 = *(unsigned __int8 *)(v2 + 33);
  v5 = *(unsigned __int8 *)(v3 + 33);
  v6 = v4 >= v5;
  if ((_DWORD)v4 != v5)
  {
LABEL_13:
    if (v6)
      return 1;
    else
      return 0xFFFFFFFFLL;
  }
  if (!*(_BYTE *)(v2 + 33) || (result = memcmp(*(const void **)v2, *(const void **)v3, 8 * v4), !(_DWORD)result))
  {
    v8 = *(unsigned __int8 *)(v2 + 32);
    v9 = *(unsigned __int8 *)(v3 + 32);
    v6 = v8 >= v9;
    if ((_DWORD)v8 == v9)
    {
      if (*(_BYTE *)(v2 + 32))
        return memcmp(*(const void **)(v2 + 24), *(const void **)(v3 + 24), 12 * v8);
      else
        return 0;
    }
    goto LABEL_13;
  }
  return result;
}

uint64_t geo::codec::roadFeatureCompareShields(geo::codec *this, const GeoCodecsRoadFeature *a2, const GeoCodecsRoadFeature *a3)
{
  uint64_t result;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  std::__shared_weak_count *v14;
  unint64_t v15;
  const char *v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  const char *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;

  result = 0;
  if (this && a2)
  {
    v6 = *((unsigned __int8 *)this + 72);
    v7 = *((unsigned __int8 *)a2 + 72);
    result = v6 < v7 ? 0xFFFFFFFFLL : 1;
    if ((_DWORD)v6 == v7)
    {
      if (!*((_BYTE *)this + 72))
        return 0;
      v8 = 0;
      while (1)
      {
        v9 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
        if (v9 && (v10 = std::__shared_weak_count::lock(v9)) != 0)
        {
          v11 = v10;
          v12 = *(_QWORD *)this;
          if (v8 >= *((unsigned __int8 *)this + 72) || v12 == 0)
          {
            v16 = 0;
            v17 = 0;
          }
          else
          {
            v15 = *(_QWORD *)(v12 + 1064) + 32 * (v8 + *((unsigned int *)this + 15));
            v16 = *(const char **)v15;
            v17 = *(_QWORD *)(v15 + 24);
          }
          p_shared_owners = (unint64_t *)&v10->__shared_owners_;
          do
            v19 = __ldaxr(p_shared_owners);
          while (__stlxr(v19 - 1, p_shared_owners));
          if (v19)
          {
            v14 = (std::__shared_weak_count *)*((_QWORD *)a2 + 1);
            if (!v14)
              goto LABEL_29;
          }
          else
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v11);
            v14 = (std::__shared_weak_count *)*((_QWORD *)a2 + 1);
            if (!v14)
            {
LABEL_29:
              v22 = 0;
              v23 = 0;
              goto LABEL_35;
            }
          }
        }
        else
        {
          v16 = 0;
          v17 = 0;
          v14 = (std::__shared_weak_count *)*((_QWORD *)a2 + 1);
          if (!v14)
            goto LABEL_29;
        }
        v20 = std::__shared_weak_count::lock(v14);
        if (!v20)
          goto LABEL_29;
        v21 = v20;
        v22 = 0;
        if (v8 >= *((unsigned __int8 *)a2 + 72))
        {
          v23 = 0;
        }
        else
        {
          v23 = 0;
          if (*(_QWORD *)a2)
          {
            v24 = *(_QWORD *)(*(_QWORD *)a2 + 1064) + 32 * (v8 + *((unsigned int *)a2 + 15));
            v22 = *(const char **)v24;
            v23 = *(_QWORD *)(v24 + 24);
          }
        }
        v25 = (unint64_t *)&v20->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v21);
        }
LABEL_35:
        if (v17 != v23)
        {
          if (v17 < v23)
            return 0xFFFFFFFFLL;
          else
            return 1;
        }
        if ((unint64_t)v16 | (unint64_t)v22)
        {
          if (!v16 || !v22)
          {
            if (v16)
              return 1;
            else
              return 0xFFFFFFFFLL;
          }
          result = strcmp(v16, v22);
          if ((_DWORD)result)
            return result;
        }
        if (++v8 == v6)
          return 0;
      }
    }
  }
  return result;
}

uint64_t geo::codec::roadFeatureCompareRoadNames(geo::codec *this, const GeoCodecsRoadFeature *a2, const GeoCodecsRoadFeature *a3)
{
  uint64_t result;
  uint64_t v6;
  unsigned int v7;
  unint64_t i;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  std::__shared_weak_count *v14;
  const char *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  const char *v20;
  unint64_t *v21;
  unint64_t v22;

  result = 0;
  if (this && a2)
  {
    v6 = *((unsigned __int8 *)this + 73);
    v7 = *((unsigned __int8 *)a2 + 73);
    result = v6 < v7 ? 0xFFFFFFFFLL : 1;
    if ((_DWORD)v6 == v7)
    {
      if (*((_BYTE *)this + 73))
      {
        for (i = 0; i != v6; ++i)
        {
          v9 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
          if (v9 && (v10 = std::__shared_weak_count::lock(v9)) != 0)
          {
            v11 = v10;
            v12 = *(_QWORD *)this;
            if (i >= *((unsigned __int8 *)this + 73) || v12 == 0)
              v15 = 0;
            else
              v15 = *(const char **)(*(_QWORD *)(v12 + 1048) + 24 * (i + *((unsigned int *)this + 14)));
            p_shared_owners = (unint64_t *)&v10->__shared_owners_;
            do
              v17 = __ldaxr(p_shared_owners);
            while (__stlxr(v17 - 1, p_shared_owners));
            if (v17)
            {
              v14 = (std::__shared_weak_count *)*((_QWORD *)a2 + 1);
              if (!v14)
                continue;
            }
            else
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v11);
              v14 = (std::__shared_weak_count *)*((_QWORD *)a2 + 1);
              if (!v14)
                continue;
            }
          }
          else
          {
            v15 = 0;
            v14 = (std::__shared_weak_count *)*((_QWORD *)a2 + 1);
            if (!v14)
              continue;
          }
          v18 = std::__shared_weak_count::lock(v14);
          if (v18)
          {
            v19 = v18;
            v20 = 0;
            if (i < *((unsigned __int8 *)a2 + 73) && *(_QWORD *)a2)
              v20 = *(const char **)(*(_QWORD *)(*(_QWORD *)a2 + 1048) + 24 * (i + *((unsigned int *)a2 + 14)));
            v21 = (unint64_t *)&v18->__shared_owners_;
            do
              v22 = __ldaxr(v21);
            while (__stlxr(v22 - 1, v21));
            if (!v22)
            {
              ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
              std::__shared_weak_count::__release_weak(v19);
            }
            if (v15)
            {
              if (v20)
              {
                result = strcmp(v15, v20);
                if ((_DWORD)result)
                  return result;
              }
            }
          }
        }
      }
      return 0;
    }
  }
  return result;
}

uint64_t geo::codec::vectorTransitLineAlongLink(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v18;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3)
    return 0;
  v5 = std::__shared_weak_count::lock(v3);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = (_QWORD *)*a1;
  if (!*a1
    || ((v8 = v7[160], v9 = v7[173], v8) ? (v10 = v9 == 0) : (v10 = 1), v10 || (v11 = a1[3] + a2, v11 >= v7[174])))
  {
    v15 = 0;
  }
  else
  {
    v12 = *(_QWORD *)(v9 + 8 * v11);
    v13 = 0x4EC4EC4EC4EC4EC5 * ((v7[161] - v8) >> 3);
    v14 = v8 + 104 * v12;
    if (v12 >= v13)
      v15 = 0;
    else
      v15 = v14;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v18 = __ldaxr(p_shared_owners);
  while (__stlxr(v18 - 1, p_shared_owners));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v15;
}

uint64_t geo::codec::multiSectionFeatureElevations(uint64_t result, unint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  if (result)
  {
    v5 = result;
    if (*(unsigned int *)(result + 100) <= a2)
    {
      result = 0;
      *a3 = 0;
    }
    else
    {
      v6 = geo::codec::vertexPoolForFeature(result);
      v7 = *(unsigned int *)(v5 + 96);
      *a3 = 0;
      v8 = v6[3];
      if (v8)
      {
        v9 = (_QWORD *)(v6[4] + 16 * (v7 + a2));
        result = v8 + 4 * *v9;
        *a3 = v9[1];
      }
      else
      {
        return 0;
      }
    }
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

uint64_t *std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::~vector[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v2, a1[2] - v2);
  }
  return a1;
}

char *geo::codec::polygonFeatureGetStrokeSpecifications(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  _QWORD *v7;
  size_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t __key;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3)
    return 0;
  v5 = std::__shared_weak_count::lock(v3);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = (_QWORD *)*a1;
  if (*a1
    && (v8 = v7[157],
        v9 = (char *)v7[156],
        __key = ((uint64_t)a1 - v7[12]) >> 7,
        v10 = (char *)bsearch(&__key, v9, v8, 0x10uLL, (int (__cdecl *)(const void *, const void *))geo::codec::compareStrokeSpecifications), a2))
  {
    if (v10)
    {
      v11 = v10;
      do
      {
        v12 = v10;
        v13 = v11;
        if (v10 <= v9)
          break;
        v10 -= 16;
        v11 -= 16;
      }
      while (__key == *((_DWORD *)v12 - 4));
      v14 = &v9[16 * v8];
      v15 = v12;
      if (v12 < v14)
      {
        v15 = v12;
        do
        {
          if (__key != *(_DWORD *)v15)
            break;
          v15 += 16;
        }
        while (v15 < v14);
      }
      *a2 = (v15 - v13) >> 4;
    }
    else
    {
      v12 = 0;
      *a2 = 0;
    }
  }
  else
  {
    v12 = 0;
  }
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v12;
}

void sub_19FF7F58C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<geo::codec::VectorTile>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *geo::codec::multiSectionFeatureGetGhostPoint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = geo::codec::vertexPoolForFeature(a1);
  if (result)
  {
    v7 = result[8];
    if (v7 && (v8 = *(unsigned int *)(a1 + 96) + a2, (v9 = *(_QWORD *)(v7 + 16 * v8 + 8)) != 0))
    {
      for (result = (_QWORD *)(result[7] + 32 * *(_QWORD *)(v7 + 16 * v8)); result[3] != a3; result += 4)
      {
        if (!--v9)
          return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

char *geo::codec::polygonFeatureGetCharacteristicPointsForSection(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  size_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  _QWORD __key[3];

  __key[2] = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)a1[1];
  if (!v4)
    return 0;
  v7 = std::__shared_weak_count::lock(v4);
  if (!v7)
    return 0;
  v8 = v7;
  v9 = (_QWORD *)*a1;
  if (*a1)
  {
    v10 = v9[153];
    v11 = (char *)v9[152];
    v12 = ((uint64_t)a1 - v9[12]) >> 7;
    __key[0] = v12;
    __key[1] = a2;
    v13 = (char *)bsearch(__key, v11, v10, 0x64uLL, (int (__cdecl *)(const void *, const void *))geo::codec::_searchForCharacteristicPointsInSection(GeoCodecsCharacteristicPoint const*,unsigned long,unsigned long,unsigned long,unsigned long *)::$_0::__invoke);
    if (a3)
    {
      v14 = v13;
      if (v13)
      {
        if (v13 > v11)
        {
          do
          {
            if (v12 != *((_DWORD *)v14 - 24))
              break;
            if (*((_DWORD *)v14 - 23) != a2)
              break;
            v14 -= 100;
          }
          while (v14 > v11);
        }
        *a3 = 0;
        v15 = &v11[100 * v10];
        if (v14 < v15)
        {
          v16 = 1;
          v17 = v14;
          do
          {
            if (v12 != *((_DWORD *)v17 + 1))
              break;
            if (*((_DWORD *)v17 + 2) != a2)
              break;
            *a3 = v16;
            v17 += 100;
            ++v16;
          }
          while (v17 < v15);
        }
        goto LABEL_19;
      }
      *a3 = 0;
    }
  }
  v14 = 0;
LABEL_19:
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  return v14;
}

void sub_19FF7F7AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<geo::codec::VectorTile>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

char *geo::codec::polygonFeatureGetCharacteristicPoints(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  _QWORD *v7;
  size_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t __key;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3)
    return 0;
  v5 = std::__shared_weak_count::lock(v3);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = (_QWORD *)*a1;
  if (*a1)
  {
    v8 = v7[153];
    v9 = (char *)v7[152];
    __key = ((uint64_t)a1 - v7[12]) >> 7;
    v10 = (char *)bsearch(&__key, v9, v8, 0x64uLL, (int (__cdecl *)(const void *, const void *))geo::codec::_searchForCharacteristicPoints(GeoCodecsCharacteristicPoint const*,unsigned long,unsigned long,unsigned long *)::$_0::__invoke);
    if (a2)
    {
      v11 = v10;
      if (v10)
      {
        if (v10 > v9)
        {
          do
          {
            if (__key != *((_DWORD *)v11 - 24))
              break;
            v11 -= 100;
          }
          while (v11 > v9);
        }
        *a2 = 0;
        v12 = &v9[100 * v8];
        if (v11 < v12)
        {
          v13 = __key;
          v14 = 1;
          v15 = v11;
          do
          {
            if (v13 != *((_DWORD *)v15 + 1))
              break;
            *a2 = v14;
            v15 += 100;
            ++v14;
          }
          while (v15 < v12);
        }
        goto LABEL_17;
      }
      *a2 = 0;
    }
  }
  v11 = 0;
LABEL_17:
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v11;
}

void sub_19FF7F908(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<geo::codec::VectorTile>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *geo::codec::multiSectionFeaturePrecision(uint64_t a1)
{
  _QWORD *result;

  result = geo::codec::vertexPoolForFeature(a1);
  if (result)
    return (_QWORD *)*(unsigned __int8 *)result;
  return result;
}

float geo::codec::buildingFootprintExtrusionHeight(uint64_t a1, unint64_t a2)
{
  float v2;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = 0.0;
  if (*(unsigned int *)(a1 + 100) <= a2)
    return v2;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v4)
    return v2;
  v6 = std::__shared_weak_count::lock(v4);
  if (!v6)
    return v2;
  v7 = v6;
  if (*(_QWORD *)a1)
    v2 = *(float *)(*(_QWORD *)(*(_QWORD *)a1 + 312) + 4 * (*(_QWORD *)(a1 + 112) + a2));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v2;
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v7);
  return v2;
}

float geo::codec::buildingFootprintBaseHeight(uint64_t a1, unint64_t a2)
{
  float v2;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = 0.0;
  if (*(unsigned int *)(a1 + 100) <= a2)
    return v2;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v4)
    return v2;
  v6 = std::__shared_weak_count::lock(v4);
  if (!v6)
    return v2;
  v7 = v6;
  if (*(_QWORD *)a1)
  {
    v8 = *(_QWORD *)(*(_QWORD *)a1 + 344);
    if (v8)
      v2 = *(float *)(v8 + 4 * (*(_QWORD *)(a1 + 120) + a2));
  }
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (v10)
    return v2;
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v7);
  return v2;
}

BOOL geo::codec::TileKeyEquals(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && *(_QWORD *)((char *)a1 + 3) == *(_QWORD *)((char *)a2 + 3);
}

geo::codec *geo::codec::multiSectionFeatureCharacteristicPoints(std::__shared_weak_count **this, GeoCodecsRoadFeature *a2, unint64_t *a3)
{
  geo::codec *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  size_t v9;
  geo::codec *v10;
  geo::codec *v11;
  geo::codec *v12;
  unint64_t v13;
  uint64_t v14;
  geo::codec *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t __key;

  v3 = (geo::codec *)this;
  if (!this)
    return v3;
  v4 = this[1];
  if (!v4)
    return 0;
  v6 = std::__shared_weak_count::lock(v4);
  if (!v6)
    return 0;
  v7 = v6;
  v8 = *(_QWORD **)v3;
  if (*(_QWORD *)v3)
  {
    v9 = v8[151];
    v10 = (geo::codec *)v8[150];
    __key = 0xCF3CF3CF3CF3CF3DLL * (((uint64_t)v3 - v8[4]) >> 3);
    v11 = (geo::codec *)bsearch(&__key, v10, v9, 0x64uLL, (int (__cdecl *)(const void *, const void *))geo::codec::_searchForCharacteristicPoints(GeoCodecsCharacteristicPoint const*,unsigned long,unsigned long,unsigned long *)::$_0::__invoke);
    if (a2)
    {
      v3 = v11;
      if (v11)
      {
        if (v11 > v10)
        {
          do
          {
            if (__key != *((_DWORD *)v3 - 24))
              break;
            v3 = (geo::codec *)((char *)v3 - 100);
          }
          while (v3 > v10);
        }
        *(_QWORD *)a2 = 0;
        v12 = (geo::codec *)((char *)v10 + 100 * v9);
        if (v3 < v12)
        {
          v13 = __key;
          v14 = 1;
          v15 = v3;
          do
          {
            if (v13 != *((_DWORD *)v15 + 1))
              break;
            *(_QWORD *)a2 = v14;
            v15 = (geo::codec *)((char *)v15 + 100);
            ++v14;
          }
          while (v15 < v12);
        }
        goto LABEL_18;
      }
      *(_QWORD *)a2 = 0;
    }
  }
  v3 = 0;
LABEL_18:
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  return v3;
}

void sub_19FF7FC2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<geo::codec::VectorTile>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t geo::codec::buildingFootprintFeatureAtIndex(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  BOOL v5;
  unint64_t v6;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 280);
  v3 = 0xF0F0F0F0F0F0F0F1 * ((*(_QWORD *)(*(_QWORD *)a1 + 288) - v2) >> 3);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 376);
  if (v3 - 0xF0F0F0F0F0F0F0FLL * ((*(_QWORD *)(*(_QWORD *)a1 + 384) - v4) >> 3) <= a2)
    return 0;
  v5 = a2 >= v3;
  v6 = a2 - v3;
  if (v5)
    return v4 + 136 * v6;
  else
    return v2 + 136 * a2;
}

uint64_t geo::codec::threeDBuildingFeatureAtIndex(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  BOOL v5;
  unint64_t v6;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 440);
  v3 = 0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(*(_QWORD *)a1 + 448) - v2) >> 4);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 472);
  if (v3 + 0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(*(_QWORD *)a1 + 480) - v4) >> 4) <= a2)
    return 0;
  v5 = a2 >= v3;
  v6 = a2 - v3;
  if (v5)
    return v4 + 112 * v6;
  else
    return v2 + 112 * a2;
}

uint64_t geo::codec::pBTransitStationTransferGetPoints(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  if (a3)
    *a3 = 0;
  if (!a1)
    return 0;
  v6 = (std::__shared_weak_count *)a1[1];
  if (!v6)
    return 0;
  v7 = std::__shared_weak_count::lock(v6);
  if (!v7)
    return 0;
  v8 = v7;
  if (*a1
    && a1[11] > a2
    && (v9 = *(_QWORD **)(*a1 + 1456)) != 0
    && (v10 = v9[1]) != 0
    && (v11 = v9[4]) != 0
    && (v12 = a1[10] + a2, v12 <= v9[5]))
  {
    if (a3)
      *a3 = *(_QWORD *)(v11 + 16 * v12 + 8);
    v13 = v10 + 8 * *(_QWORD *)(v11 + 16 * v12);
  }
  else
  {
    v13 = 0;
  }
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
  return v13;
}

float geo::codec::roadFeatureMapOriginalToEvaluatedIndex(std::__shared_weak_count **this, const GeoCodecsRoadFeature *a2, float a3)
{
  float v3;
  std::__shared_weak_count *v7;
  uint64_t shared_owners;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  int8x16_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float32x2_t v25;
  unint64_t v26;
  uint64_t v27;
  float v28;
  unint64_t v29;
  float32x2_t v30;
  int8x16_t v31;
  int32x4_t *v32;
  float32x4_t v33;
  unint64_t v34;
  float32x4_t v35;
  const float *i32;
  int32x4_t v37;
  int32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  uint64_t v45;
  float32x2_t *v46;
  float32x2_t v47;
  float32x2_t v48;
  float v49;
  float32x2_t v50;
  float32x2_t v51;
  float v52;
  float v53;
  uint64_t v54;
  float32x2_t v55;
  float32x2_t v56;
  float v57;
  unint64_t *p_shared_owners;
  unint64_t v59;
  float32x4x2_t v61;

  v3 = -1.0;
  if (*((unsigned int *)this + 25) <= (unint64_t)a2)
    return v3;
  v7 = std::__shared_weak_count::lock(this[1]);
  shared_owners = (*this)[32].__shared_owners_;
  if (shared_owners)
  {
    v9 = (unint64_t)a3;
    v10 = (unint64_t)a3 + 1;
    v11 = (_QWORD *)((char *)(*this)[32].__on_zero_shared_weak + 16 * ((_QWORD)a2 + *((unsigned int *)this + 24)));
    v12 = v11[1];
    if (v10 >= v12 && v12 <= v9)
      goto LABEL_31;
    v14 = *v11 + v9;
    v15 = v10 >= v12 ? v14 : v14 + 1;
    if (*((unsigned int *)this + 25) <= (unint64_t)a2)
      goto LABEL_31;
    v16 = *(unsigned int *)(shared_owners + 4 * v14);
    v17 = *(unsigned int *)(shared_owners + 4 * v15);
    v18 = geo::codec::vertexPoolForFeature((uint64_t)this);
    if (!v18)
      goto LABEL_31;
    v20 = v18[4];
    if (!v20)
      goto LABEL_31;
    v21 = (unint64_t)a2 + *((unsigned int *)this + 24);
    if (v18[5] <= v21)
      goto LABEL_31;
    v22 = *(_QWORD *)(v20 + 16 * v21);
    if (v22 >= v18[2])
      goto LABEL_31;
    v23 = v18[1];
    if (!v23)
      goto LABEL_31;
    if (v16 >= v17)
      goto LABEL_36;
    v24 = v23 + 8 * v22;
    v25 = *(float32x2_t *)(v24 + 8 * v16);
    v26 = v16 + 1;
    v27 = v17 - v16;
    v28 = 0.0;
    v29 = v16 + 1;
    v30 = v25;
    if (v17 - v16 >= 8)
    {
      v29 = v26 + (v27 & 0xFFFFFFFFFFFFFFF8);
      v19.i64[1] = *(_QWORD *)(v24 + 8 * v16);
      v31 = (int8x16_t)vdupq_lane_s32((int32x2_t)v25, 0);
      v32 = (int32x4_t *)(8 * v22 + 8 * v16 + v23 + 40);
      v33 = 0uLL;
      v34 = v27 & 0xFFFFFFFFFFFFFFF8;
      v35 = 0uLL;
      do
      {
        i32 = (const float *)v32[-2].i32;
        v61 = vld2q_f32(i32);
        v38 = *v32;
        v37 = v32[1];
        v32 += 4;
        v39 = (float32x4_t)vuzp1q_s32(v38, v37);
        v40 = (float32x4_t)vuzp2q_s32(v38, v37);
        v41 = vsubq_f32(v61.val[0], (float32x4_t)vextq_s8(v31, (int8x16_t)v61.val[0], 0xCuLL));
        v42 = vsubq_f32(v39, (float32x4_t)vextq_s8((int8x16_t)v61.val[0], (int8x16_t)v39, 0xCuLL));
        v43 = vsubq_f32(v61.val[1], (float32x4_t)vextq_s8(v19, (int8x16_t)v61.val[1], 0xCuLL));
        v61.val[0] = vsubq_f32(v40, (float32x4_t)vextq_s8((int8x16_t)v61.val[1], (int8x16_t)v40, 0xCuLL));
        v33 = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(v41, v41), v43, v43)), v33);
        v35 = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(v42, v42), v61.val[0], v61.val[0])), v35);
        v19 = (int8x16_t)v40;
        v31 = (int8x16_t)v39;
        v34 -= 8;
      }
      while (v34);
      v44 = vaddq_f32(v35, v33);
      v28 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v44, v44));
      if (v27 == (v27 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_25;
      v30 = (float32x2_t)vextq_s8((int8x16_t)v37, (int8x16_t)v37, 8uLL).u64[0];
    }
    v45 = v17 - v29 + 1;
    v46 = (float32x2_t *)(v23 + 8 * v29 + 8 * v22);
    do
    {
      v47 = *v46++;
      v48 = vsub_f32(v47, v30);
      v28 = sqrtf(vaddv_f32(vmul_f32(v48, v48))) + v28;
      v30 = v47;
      --v45;
    }
    while (v45);
LABEL_25:
    v49 = v28 * (float)(a3 - floorf(a3));
    v50 = *(float32x2_t *)(v24 + 8 * v26);
    v51 = vsub_f32(v50, v25);
    v52 = sqrtf(vaddv_f32(vmul_f32(v51, v51)));
    v53 = 0.0;
    if (v52 > v49)
    {
      v57 = v52;
LABEL_38:
      v3 = (float)((float)(v49 - v53) / v57) + (float)v16;
      goto LABEL_31;
    }
    v54 = v23 + 8 * v22 + 16;
    while (v17 - 1 != v16)
    {
      v53 = v52;
      v55 = *(float32x2_t *)(v54 + 8 * v16);
      v56 = vsub_f32(v55, v50);
      v57 = sqrtf(vaddv_f32(vmul_f32(v56, v56)));
      v52 = v57 + v52;
      ++v16;
      v50 = v55;
      if (v52 > v49)
        goto LABEL_38;
    }
LABEL_36:
    v3 = (float)v17;
    goto LABEL_31;
  }
  v3 = a3;
LABEL_31:
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v59 = __ldaxr(p_shared_owners);
  while (__stlxr(v59 - 1, p_shared_owners));
  if (!v59)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  return v3;
}

void geo::codec::transitLinkExtractLineInfo(_QWORD *a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;

  v7 = (std::__shared_weak_count *)a1[1];
  if (v7 && (v9 = std::__shared_weak_count::lock(v7)) != 0)
  {
    v10 = v9;
    v11 = (_QWORD *)*a1;
    if (!*a1
      || ((v12 = v11[160], v13 = v11[173], v12) ? (v14 = v13 == 0) : (v14 = 1),
          v14 || (v15 = a1[3] + a2, v15 >= v11[174])))
    {
      v19 = 0;
    }
    else
    {
      v16 = *(_QWORD *)(v13 + 8 * v15);
      v17 = 0x4EC4EC4EC4EC4EC5 * ((v11[161] - v12) >> 3);
      v18 = v12 + 104 * v16;
      if (v16 >= v17)
        v19 = 0;
      else
        v19 = v18;
    }
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (v22)
    {
      *a3 = v19;
      *a4 = 0;
      v20 = *a3;
      if (!*a3)
        return;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
      *a3 = v19;
      *a4 = 0;
      v20 = *a3;
      if (!*a3)
        return;
    }
  }
  else
  {
    *a3 = 0;
    *a4 = 0;
    v20 = *a3;
    if (!*a3)
      return;
  }
  v23 = (std::__shared_weak_count *)a1[1];
  if (v23)
  {
    v24 = *(unsigned int *)(v20 + 84);
    v25 = std::__shared_weak_count::lock(v23);
    if (v25)
    {
      v26 = v25;
      v27 = (_QWORD *)*a1;
      if (*a1)
      {
        v28 = v27[165];
        v29 = v27[164];
        if (0x8E38E38E38E38E39 * ((v28 - v29) >> 3) > v24)
          *a4 = v29 + 72 * v24;
      }
      v30 = (unint64_t *)&v25->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
  }
}

uint64_t geo::codec::vectorTransitLineForTransitNodeSubtitleIndex(uint64_t a1, unsigned int a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (!a1)
    return 0;
  v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v3)
    return 0;
  v5 = std::__shared_weak_count::lock(v3);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = *(_QWORD **)a1;
  if (!*(_QWORD *)a1
    || *(unsigned __int8 *)(a1 + 274) <= a2
    || (v8 = *(_DWORD *)(a1 + 292) + a2, v7[204] <= v8)
    || (v9 = *(_QWORD *)(v7[203] + 8 * v8), v9 == -1))
  {
    v10 = 0;
  }
  else
  {
    v10 = v7[160] + 104 * v9;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v10;
}

void geo::codec::transitNodeFeatureGetStyleAttributes(_QWORD *a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v7;
  __int128 v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  if (!a1)
  {
    *a3 = 0;
    a3[1] = 0;
    return;
  }
  v5 = (std::__shared_weak_count *)a1[1];
  if (v5)
  {
    v7 = std::__shared_weak_count::lock(v5);
    if (v7 && *a1 && a1[39] > a2)
    {
      v8 = *(_OWORD *)(*(_QWORD *)(*a1 + 1720) + 16 * (a1[38] + a2));
      *(_OWORD *)a3 = v8;
      if (*((_QWORD *)&v8 + 1))
      {
        v9 = (unint64_t *)(*((_QWORD *)&v8 + 1) + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
LABEL_18:
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
      return;
    }
  }
  else
  {
    v7 = 0;
  }
  if (a1[39])
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    v11 = a1[4];
    *a3 = a1[3];
    a3[1] = v11;
    if (v11)
    {
      v12 = (unint64_t *)(v11 + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
  }
  if (v7)
    goto LABEL_18;
}

void geo::codec::transitNodeFeatureGetNativeParentheticalLabels(uint64_t *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;

  if (a1)
  {
    v6 = (std::__shared_weak_count *)a1[1];
    if (v6)
    {
      v11 = std::__shared_weak_count::lock(v6);
      if (v11)
      {
        v12 = v11;
        v13 = *a1;
        if (*a1)
        {
          v14 = a1[35];
          if (v14 == -1)
          {
            if (a2)
              *a2 = 0;
            if (a3)
              *a3 = 0;
            if (!a4)
              goto LABEL_21;
            v16 = 0;
          }
          else
          {
            v15 = *(_QWORD *)(v13 + 1048);
            if (a2)
              *a2 = *(_QWORD *)(v15 + 24 * v14);
            if (a5)
              *a5 = *(_QWORD *)(v15 + 24 * v14 + 8);
            if (a3)
              *a3 = *(_QWORD *)(*(_QWORD *)(v13 + 1048) + 24 * v14 + 24);
            if (!a4)
              goto LABEL_21;
            v16 = *(_QWORD *)(*(_QWORD *)(v13 + 1048) + 24 * v14 + 48);
          }
          *a4 = v16;
        }
LABEL_21:
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
  }
}

void geo::codec::transitNodeFeatureGetLocalizedParentheticalLabels(_QWORD *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, _QWORD *a5)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  _QWORD *v24;
  unint64_t v25;
  const void *v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;
  std::__shared_weak_count *v39;
  _QWORD *v40;
  unint64_t v41;
  const void *v43;
  uint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  std::__shared_weak_count *v54;
  std::__shared_weak_count *v55;
  unint64_t v56;
  const void *v58;
  uint64_t v59;
  _QWORD *v60;
  unint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  unint64_t __key;

  if (a1)
  {
    v10 = (std::__shared_weak_count *)a1[1];
    if (v10)
    {
      v11 = std::__shared_weak_count::lock(v10);
      if (v11)
      {
        v12 = v11;
        if (!*a1 || (v13 = a1[35], v13 == -1))
        {
          v15 = 0;
          v17 = 0;
          v18 = 0;
          v16 = 0;
        }
        else
        {
          v14 = (unint64_t *)(*(_QWORD *)(*a1 + 1048) + 24 * v13);
          v15 = *v14;
          v16 = (_QWORD *)v14[1];
          v17 = v14[3];
          v18 = v14[6];
        }
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v12);
        }
        if (v15 && v17 && v18)
        {
          v21 = (std::__shared_weak_count *)a1[1];
          v68 = v18;
          v69 = v16;
          if (v21)
          {
            v22 = std::__shared_weak_count::lock(v21);
            if (v22)
            {
              v23 = v22;
              v24 = (_QWORD *)*a1;
              if (*a1)
              {
                v25 = v24[107];
                if (v25 > v15)
                  goto LABEL_39;
                if (v24[108] <= v15)
                  goto LABEL_39;
                v26 = (const void *)v24[135];
                v27 = v24[136];
                __key = v15 - v25;
                v28 = bsearch(&__key, v26, (v27 - (uint64_t)v26) >> 5, 0x20uLL, (int (__cdecl *)(const void *, const void *))geo::codec::compareSearchingLocalizationTableEntries);
                if (!v28)
                  goto LABEL_39;
                v29 = v28[1];
                if (v29 == -1)
                  goto LABEL_39;
                v30 = v24 + 127;
                v31 = 127;
                if ((v28[3] & 1) == 0)
                {
                  v31 = 113;
                  v30 = v24 + 113;
                }
                v32 = v24[v31];
                if (v29 < v30[1] - v32 && v32)
                {
                  v24 = (_QWORD *)v28[2];
                  v33 = v32 + v29;
                }
                else
                {
LABEL_39:
                  v33 = 0;
                  v24 = 0;
                }
              }
              else
              {
                v33 = 0;
              }
              v35 = (unint64_t *)&v23->__shared_owners_;
              do
                v36 = __ldaxr(v35);
              while (__stlxr(v36 - 1, v35));
              v67 = v33;
              if (!v36)
              {
                ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
                std::__shared_weak_count::__release_weak(v23);
              }
            }
            else
            {
              v24 = 0;
              v67 = 0;
            }
            v37 = (std::__shared_weak_count *)a1[1];
            if (v37)
            {
              v38 = std::__shared_weak_count::lock(v37);
              if (v38)
              {
                v39 = v38;
                v40 = (_QWORD *)*a1;
                if (*a1)
                {
                  v41 = v40[107];
                  if (v41 > v17 || v40[108] <= v17)
                    goto LABEL_63;
                  v43 = (const void *)v40[135];
                  v44 = v40[136];
                  __key = v17 - v41;
                  v45 = bsearch(&__key, v43, (v44 - (uint64_t)v43) >> 5, 0x20uLL, (int (__cdecl *)(const void *, const void *))geo::codec::compareSearchingLocalizationTableEntries);
                  if (!v45)
                    goto LABEL_63;
                  v46 = v45[1];
                  if (v46 == -1)
                    goto LABEL_63;
                  v47 = v40 + 127;
                  v48 = 127;
                  if ((v45[3] & 1) == 0)
                  {
                    v48 = 113;
                    v47 = v40 + 113;
                  }
                  v49 = v40[v48];
                  if (v46 < v47[1] - v49 && v49)
                    v40 = (_QWORD *)(v49 + v46);
                  else
LABEL_63:
                    v40 = 0;
                }
                v51 = (unint64_t *)&v39->__shared_owners_;
                do
                  v52 = __ldaxr(v51);
                while (__stlxr(v52 - 1, v51));
                if (!v52)
                {
                  ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
                  std::__shared_weak_count::__release_weak(v39);
                }
              }
              else
              {
                v40 = 0;
              }
              v53 = (std::__shared_weak_count *)a1[1];
              if (!v53 || (v54 = std::__shared_weak_count::lock(v53)) == 0)
              {
                v50 = 0;
                goto LABEL_84;
              }
              v55 = v54;
              v50 = (_QWORD *)*a1;
              v34 = v67;
              if (v50)
              {
                v56 = v50[107];
                if (v56 <= v68 && v50[108] > v68)
                {
                  v58 = (const void *)v50[135];
                  v59 = v50[136];
                  __key = v68 - v56;
                  v60 = bsearch(&__key, v58, (v59 - (uint64_t)v58) >> 5, 0x20uLL, (int (__cdecl *)(const void *, const void *))geo::codec::compareSearchingLocalizationTableEntries);
                  if (!v60)
                    goto LABEL_85;
                  v61 = v60[1];
                  if (v61 == -1)
                    goto LABEL_85;
                  v62 = v50 + 127;
                  v63 = 127;
                  if ((v60[3] & 1) == 0)
                  {
                    v63 = 113;
                    v62 = v50 + 113;
                  }
                  v64 = v50[v63];
                  if (v61 >= v62[1] - v64)
                  {
LABEL_85:
                    v34 = v67;
                  }
                  else
                  {
                    v34 = v67;
                    if (v64)
                    {
                      v50 = (_QWORD *)(v64 + v61);
                      goto LABEL_87;
                    }
                  }
                }
                v50 = 0;
              }
LABEL_87:
              v65 = (unint64_t *)&v55->__shared_owners_;
              do
                v66 = __ldaxr(v65);
              while (__stlxr(v66 - 1, v65));
              if (v66)
              {
LABEL_90:
                if (v34 && v40 && v50 && v24)
                {
                  if (a2)
                    *a2 = v34;
                  if (a3)
                    *a3 = (unint64_t)v40;
                  if (a4)
                    *a4 = (unint64_t)v50;
                }
                else
                {
                  if (a2)
                    *a2 = v15;
                  v24 = v69;
                  if (a3)
                    *a3 = v17;
                  if (a4)
                    *a4 = v68;
                }
                if (!a5)
                  return;
LABEL_35:
                *a5 = v24;
                return;
              }
              ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
              std::__shared_weak_count::__release_weak(v55);
LABEL_84:
              v34 = v67;
              goto LABEL_90;
            }
            v34 = v67;
          }
          else
          {
            v34 = 0;
            v24 = 0;
          }
          v40 = 0;
          v50 = 0;
          goto LABEL_90;
        }
      }
    }
  }
  if (a2)
    *a2 = 0;
  if (a3)
    *a3 = 0;
  if (a4)
    *a4 = 0;
  if (a5)
  {
    v24 = 0;
    goto LABEL_35;
  }
}

void sub_19FF80A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::shared_ptr<geo::codec::VectorTile>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19FF80A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::shared_ptr<geo::codec::VectorTile>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19FF80A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::shared_ptr<geo::codec::VectorTile>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *geo::codec::forEachRoad(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *result;
  if (*result)
  {
    if (*(_QWORD *)(a2 + 24))
    {
      v4 = *(_QWORD *)(v2 + 32);
      v5 = *(_QWORD *)(v2 + 40) - v4;
      if (v5)
      {
        v6 = v5 / 168;
        do
        {
          if (*(_BYTE *)(v4 + 154) == 1)
          {
            v8 = v4;
            v7 = *(_QWORD *)(a2 + 24);
            if (!v7)
              std::__throw_bad_function_call[abi:ne180100]();
            result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v7 + 48))(v7, &v8);
          }
          v4 += 168;
          --v6;
        }
        while (v6);
      }
    }
  }
  return result;
}

uint64_t *geo::codec::forEachEdgeOnJunction(uint64_t *result, unsigned int *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  _QWORD v12[3];
  uint64_t *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v11 = a2;
  if (a2)
  {
    v3 = result;
    v4 = *result;
    if (*result)
    {
      if (*(_QWORD *)(a3 + 24) && *a2)
      {
        v6 = 0;
        v7 = *(_QWORD *)(v4 + 712);
        v8 = *(_QWORD *)(v4 + 32);
        do
        {
          v10 = v8 + 168 * *(unsigned int *)(v7 + 16 * (v6 + a2[1]) + 4);
          v12[0] = &off_1E42D5E30;
          v12[1] = &v11;
          v12[2] = a3;
          v13 = v12;
          geo::codec::forEachEdgeInRoad(v3, v10, 1, (uint64_t)v12);
          result = v13;
          if (v13 == v12)
          {
            result = v12;
            v9 = 4;
          }
          else
          {
            if (!v13)
              goto LABEL_8;
            v9 = 5;
          }
          result = (uint64_t *)(*(uint64_t (**)(void))(*result + 8 * v9))();
LABEL_8:
          ++v6;
          a2 = v11;
        }
        while (v6 < *v11);
      }
    }
  }
  return result;
}

void sub_19FF80C78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t *geo::codec::forEachEdgeInRoad(uint64_t *result, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  uint64_t *v35;

  if (a2)
  {
    v4 = *result;
    if (*result)
    {
      if (*(_QWORD *)(a4 + 24))
      {
        v8 = *(_QWORD *)(v4 + 688);
        v9 = *(_QWORD *)(v4 + 728);
        if (*(_DWORD *)(a2 + 100)
          && (result = geo::codec::vertexPoolForFeature(a2)) != 0
          && (v10 = result[4]) != 0
          && (v11 = *(unsigned int *)(a2 + 96), result[5] > v11)
          && *(_QWORD *)(v10 + 16 * v11) < (unint64_t)result[2])
        {
          v12 = *(_QWORD *)(v10 + 16 * v11 + 8) - 1;
        }
        else
        {
          v12 = -1;
        }
        v13 = *(unsigned int *)(a2 + 132);
        v14 = *(unsigned __int16 *)(a2 + 144);
        v31 = a2;
        v32 = 0u;
        v33 = 0u;
        v34 = 0u;
        v15 = 0;
        if ((a3 & 1) != 0)
        {
          v16 = 0;
          v17 = v9 + 8 * v13;
          while (1)
          {
            if (v16 >= v14)
            {
              v20 = 0;
              v21 = 0;
              v19 = v12;
              v32.i64[1] = v12;
              v33.i64[1] = 0;
              v34.i64[1] = 0;
              if (v15 >= v12)
                goto LABEL_13;
            }
            else
            {
              v18 = *(unsigned int **)(v17 + 8 * v16);
              v19 = v18[3];
              v20 = *v18;
              v21 = v8 + 32 * v20;
              v32.i64[1] = v19;
              v33.i64[1] = v20;
              v34.i64[1] = v21;
              if (v15 >= v19)
                goto LABEL_13;
            }
            v35 = &v31;
            v22 = *(_QWORD *)(a4 + 24);
            if (!v22)
              goto LABEL_30;
            (*(void (**)(uint64_t, uint64_t **))(*(_QWORD *)v22 + 48))(v22, &v35);
            v32 = vextq_s8(v32, v32, 8uLL);
            v33 = vextq_s8(v33, v33, 8uLL);
            v34 = vextq_s8(v34, v34, 8uLL);
            v35 = &v31;
            v23 = *(_QWORD *)(a4 + 24);
            if (!v23)
              goto LABEL_30;
            result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t **))(*(_QWORD *)v23 + 48))(v23, &v35);
            v19 = v32.i64[0];
            v20 = v33.i64[0];
            v32.i64[1] = v32.i64[0];
            v33.i64[1] = v33.i64[0];
            v21 = v34.i64[0];
            v34.i64[1] = v34.i64[0];
LABEL_13:
            v32.i64[0] = v19;
            v33.i64[0] = v20;
            v34.i64[0] = v21;
            ++v16;
            v15 = v19;
            if (v14 + 1 == v16)
              return result;
          }
        }
        v24 = 0;
        v25 = v9 + 8 * v13;
        do
        {
          if (v24 >= v14)
          {
            v28 = 0;
            v29 = 0;
            v27 = v12;
            v32.i64[1] = v12;
            v33.i64[1] = 0;
            v34.i64[1] = 0;
            if (v15 < v12)
            {
LABEL_27:
              v35 = &v31;
              v30 = *(_QWORD *)(a4 + 24);
              if (!v30)
LABEL_30:
                std::__throw_bad_function_call[abi:ne180100]();
              result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t **))(*(_QWORD *)v30 + 48))(v30, &v35);
              v27 = v32.u64[1];
              v28 = v33.i64[1];
              v29 = v34.i64[1];
            }
          }
          else
          {
            v26 = *(unsigned int **)(v25 + 8 * v24);
            v27 = v26[3];
            v28 = *v26;
            v29 = v8 + 32 * v28;
            v32.i64[1] = v27;
            v33.i64[1] = v28;
            v34.i64[1] = v29;
            if (v15 < v27)
              goto LABEL_27;
          }
          v32.i64[0] = v27;
          v33.i64[0] = v28;
          v34.i64[0] = v29;
          ++v24;
          v15 = v27;
        }
        while (v14 + 1 != v24);
      }
    }
  }
  return result;
}

uint64_t geo::codec::compareStrokeSpecifications(geo::codec *this, unsigned int *a2, const void *a3)
{
  unint64_t v3;
  BOOL v4;
  _BOOL4 v5;

  v3 = *a2;
  v4 = *(_QWORD *)this >= v3;
  v5 = *(_QWORD *)this > v3;
  if (v4)
    return v5;
  else
    return 0xFFFFFFFFLL;
}

uint64_t geo::codec::_searchForCharacteristicPointsInSection(GeoCodecsCharacteristicPoint const*,unsigned long,unsigned long,unsigned long,unsigned long *)::$_0::__invoke(unint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  BOOL v7;
  unsigned int v8;

  v2 = *a1;
  v3 = a1[1];
  v4 = *(unsigned int *)(a2 + 4);
  v5 = *(unsigned int *)(a2 + 8);
  v7 = v3 >= v5;
  v6 = v3 > v5;
  if (!v7)
    v6 = -1;
  v7 = v2 >= v4;
  if (v2 <= v4)
    v8 = v6;
  else
    v8 = 1;
  if (v7)
    return v8;
  else
    return 0xFFFFFFFFLL;
}

uint64_t geo::codec::_searchForCharacteristicPoints(GeoCodecsCharacteristicPoint const*,unsigned long,unsigned long,unsigned long *)::$_0::__invoke(unint64_t *a1, uint64_t a2)
{
  unint64_t v2;

  v2 = *(unsigned int *)(a2 + 4);
  if (*a1 < v2)
    return 0xFFFFFFFFLL;
  else
    return *a1 > v2;
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::vector<unsigned char,geo::StdAllocator<unsigned char,geo::codec::Allocator>>::__append(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  _BYTE *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _OWORD *v18;
  __int128 *v19;
  unint64_t v20;
  __int128 v21;
  char v22;
  uint64_t v23;

  v2 = a2;
  v3 = result;
  v5 = *(_BYTE **)(result + 8);
  v4 = *(_QWORD *)(result + 16);
  if (v4 - (uint64_t)v5 >= a2)
  {
    if (a2)
    {
      v11 = &v5[a2];
      do
      {
        if (v5)
          *v5 = 0;
        ++v5;
        --v2;
      }
      while (v2);
      v5 = v11;
    }
    *(_QWORD *)(result + 8) = v5;
  }
  else
  {
    v6 = *(_QWORD *)result;
    v7 = &v5[-*(_QWORD *)result];
    v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v9 = v4 - v6;
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(result + 24) + 16))(*(_QWORD *)(result + 24), v10, 1);
    else
      result = 0;
    v12 = &v7[result];
    v13 = &v7[result + v2];
    v14 = &v7[result];
    do
    {
      if (v14)
        *v14 = 0;
      ++v14;
      --v2;
    }
    while (v2);
    v16 = *(_QWORD *)v3;
    v15 = *(_QWORD *)(v3 + 8);
    v17 = v15 - *(_QWORD *)v3;
    if (v15 != *(_QWORD *)v3)
    {
      if (v17 < 0x20)
        goto LABEL_36;
      if ((unint64_t)(v6 - (_QWORD)&v5[result] + v15) < 0x20)
        goto LABEL_36;
      v12 -= v17 & 0xFFFFFFFFFFFFFFE0;
      v18 = &v7[result - 16];
      v19 = (__int128 *)(v15 - 16);
      v20 = v17 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v21 = *v19;
        *(v18 - 1) = *(v19 - 1);
        *v18 = v21;
        v18 -= 2;
        v19 -= 2;
        v20 -= 32;
      }
      while (v20);
      v15 -= v17 & 0xFFFFFFFFFFFFFFE0;
      if (v17 != (v17 & 0xFFFFFFFFFFFFFFE0))
      {
LABEL_36:
        do
        {
          v22 = *(_BYTE *)--v15;
          *--v12 = v22;
        }
        while (v15 != v16);
      }
      v15 = *(_QWORD *)v3;
    }
    *(_QWORD *)v3 = v12;
    *(_QWORD *)(v3 + 8) = v13;
    v23 = *(_QWORD *)(v3 + 16);
    *(_QWORD *)(v3 + 16) = result + v10;
    if (v15)
      return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 24) + 40))(*(_QWORD *)(v3 + 24), v15, v23 - v15);
  }
  return result;
}

float32x4_t gm::operator*<float,4,4,4>@<Q0>(float32x4_t *a1@<X0>, uint64_t a2@<X1>, float32x4_t *a3@<X8>)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t result;

  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 36);
  v6 = *(_OWORD *)(a2 + 40);
  v7 = *(_OWORD *)(a2 + 44);
  v8 = *(_QWORD *)(a2 + 52);
  v9 = *(_QWORD *)(a2 + 56);
  v10 = *(float *)(a2 + 60);
  v11 = *a1;
  v12 = a1[1];
  v13 = a1[2];
  v14 = a1[3];
  v15 = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(*a1, COERCE_FLOAT(*(_OWORD *)(a2 + 16))), v12, COERCE_FLOAT(*(_OWORD *)(a2 + 20))), v13, COERCE_FLOAT(*(_OWORD *)(a2 + 24))), v14, COERCE_FLOAT(*(_OWORD *)(a2 + 28)));
  *a3 = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(*a1, COERCE_FLOAT(*(_OWORD *)a2)), v12, COERCE_FLOAT(*(_OWORD *)(a2 + 4))), v13, COERCE_FLOAT(*(_OWORD *)(a2 + 8))), v14, COERCE_FLOAT(*(_OWORD *)(a2 + 12)));
  a3[1] = v15;
  result = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v11, *(float *)&v3), v12, *(float *)&v5), v13, *(float *)&v6), v14, *(float *)&v7);
  a3[2] = result;
  a3[3] = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v11, *(float *)&v4), v12, *(float *)&v8), v13, *(float *)&v9), v14, v10);
  return result;
}

void std::__function::__func<geo::codec::forEachEdgeOnJunction(std::shared_ptr<geo::codec::VectorTile> const&,GeoCodecsConnectivityJunction const*,std::function<void ()(GeoCodecsRoadEdge *)>)::$_0,std::allocator<geo::codec::forEachEdgeOnJunction(std::shared_ptr<geo::codec::VectorTile> const&,GeoCodecsConnectivityJunction const*,std::function<void ()(GeoCodecsRoadEdge *)>)::$_0>,void ()(GeoCodecsRoadEdge *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<geo::codec::forEachEdgeOnJunction(std::shared_ptr<geo::codec::VectorTile> const&,GeoCodecsConnectivityJunction const*,std::function<void ()(GeoCodecsRoadEdge *)>)::$_0,std::allocator<geo::codec::forEachEdgeOnJunction(std::shared_ptr<geo::codec::VectorTile> const&,GeoCodecsConnectivityJunction const*,std::function<void ()(GeoCodecsRoadEdge *)>)::$_0>,void ()(GeoCodecsRoadEdge *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42D5E30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<geo::codec::forEachEdgeOnJunction(std::shared_ptr<geo::codec::VectorTile> const&,GeoCodecsConnectivityJunction const*,std::function<void ()(GeoCodecsRoadEdge *)>)::$_0,std::allocator<geo::codec::forEachEdgeOnJunction(std::shared_ptr<geo::codec::VectorTile> const&,GeoCodecsConnectivityJunction const*,std::function<void ()(GeoCodecsRoadEdge *)>)::$_0>,void ()(GeoCodecsRoadEdge *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42D5E30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<geo::codec::forEachEdgeOnJunction(std::shared_ptr<geo::codec::VectorTile> const&,GeoCodecsConnectivityJunction const*,std::function<void ()(GeoCodecsRoadEdge *)>)::$_0,std::allocator<geo::codec::forEachEdgeOnJunction(std::shared_ptr<geo::codec::VectorTile> const&,GeoCodecsConnectivityJunction const*,std::function<void ()(GeoCodecsRoadEdge *)>)::$_0>,void ()(GeoCodecsRoadEdge *)>::operator()(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (*(_QWORD *)(*a2 + 40) == **(_QWORD **)(result + 8))
  {
    v2 = *(_QWORD *)(result + 16);
    v4 = *a2;
    v3 = *(_QWORD *)(v2 + 24);
    if (!v3)
      std::__throw_bad_function_call[abi:ne180100]();
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v4);
  }
  return result;
}

uint64_t std::__function::__func<geo::codec::forEachEdgeOnJunction(std::shared_ptr<geo::codec::VectorTile> const&,GeoCodecsConnectivityJunction const*,std::function<void ()(GeoCodecsRoadEdge *)>)::$_0,std::allocator<geo::codec::forEachEdgeOnJunction(std::shared_ptr<geo::codec::VectorTile> const&,GeoCodecsConnectivityJunction const*,std::function<void ()(GeoCodecsRoadEdge *)>)::$_0>,void ()(GeoCodecsRoadEdge *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3geo5codec21forEachEdgeOnJunctionERKNSt3__110shared_ptrINS0_10VectorTileEEEPK29GeoCodecsConnectiv"
                     "ityJunctionNS1_8functionIFvP17GeoCodecsRoadEdgeEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN3geo5codec21forEachEdgeOnJunctionERKNSt3__110shared_ptrINS0_10VectorTileEEEPK29GeoCode"
                                "csConnectivityJunctionNS1_8functionIFvP17GeoCodecsRoadEdgeEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3geo5codec21forEachEdgeOnJunctionERKNSt3__110shared_ptrINS0_10VectorTileEEEPK29GeoCodecsConnectivityJunctionNS1_8functionIFvP17GeoCodecsRoadEdgeEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3geo5codec21forEachEdgeOnJunctionERKNSt3__110shared_ptrINS0_10VectorTileEEEPK29GeoCodecsConnectivityJunctionNS1_8functionIFvP17GeoCodecsRoadEdgeEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<geo::codec::forEachEdgeOnJunction(std::shared_ptr<geo::codec::VectorTile> const&,GeoCodecsConnectivityJunction const*,std::function<void ()(GeoCodecsRoadEdge *)>)::$_0,std::allocator<geo::codec::forEachEdgeOnJunction(std::shared_ptr<geo::codec::VectorTile> const&,GeoCodecsConnectivityJunction const*,std::function<void ()(GeoCodecsRoadEdge *)>)::$_0>,void ()(GeoCodecsRoadEdge *)>::target_type()
{
}

geo::codec::Asset *geo::codec::AssetDecoder::decodeAssetDeprecated(geo::codec::AssetDecoder *this, geo::ibitstream *a2, unsigned int *a3)
{
  geo::codec::Asset *v6;
  geo::codec::Asset *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  FILE *v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  __int16 v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  FILE *v45;
  geo::codec::Asset *result;
  unint64_t v47;
  unsigned int v48;
  int v49;
  geo::codec::AssetLodInstance **v50;
  geo::codec::AssetLodInstance **v51;
  int v52;
  char *v53;
  geo::codec::AssetLodInstance *v59;
  uint64_t v60;
  unint64_t v61;
  unsigned int i;
  uint64_t v63;
  unsigned int v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  geo::codec::AssetLodInstance *v72;
  geo::codec::AssetLodInstance *v73;
  geo::codec::AssetLodInstance *v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  geo::codec::AssetLodInstance *v95;
  geo::codec::AssetLodInstance *v96;
  geo::codec::AssetLodInstance *v97;
  int v98;
  unsigned int v99;
  int v100;
  unint64_t v101;
  unint64_t v102;
  char v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int v108;
  unsigned int v109;
  __int16 v110;
  unsigned int v111;
  __int16 v112;
  _QWORD *v113;
  unint64_t v114;
  int v115;
  uint64_t v116;
  int v117;
  _DWORD *v118;
  unsigned int v119;
  int v120;
  _BOOL8 v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  char v125;
  int v126;
  int v127;
  int v128;
  unsigned int v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  int v133;
  unint64_t v134;
  int v135;
  int v136;
  uint64_t v137;
  unint64_t prime;
  uint64_t v139;
  void *v140;
  uint64_t v141;
  unint64_t v142;
  unsigned int v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  int v147;
  _BOOL8 v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  int v153;
  int v154;
  int v155;
  int v156;
  unint64_t v157;
  uint64_t v158;
  int v159;
  unint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint8x8_t v163;
  uint64_t ***v164;
  uint64_t **v165;
  unint64_t v166;
  uint64_t *v167;
  unint64_t v168;
  float v169;
  float v170;
  _BOOL8 v171;
  unint64_t v172;
  unint64_t v173;
  size_t v174;
  uint8x8_t v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t *v178;
  unint64_t v179;
  int v180;
  unsigned int v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  unsigned int v185;
  int v186;
  unsigned int v187;
  int v188;
  uint64_t v189;
  _DWORD *v190;
  _DWORD *v191;
  uint64_t v192;
  _QWORD *v193;
  unsigned __int16 *v194;
  unsigned __int16 *v195;
  unsigned int v196;
  _QWORD *v197;
  uint64_t v198;
  uint64_t v199;
  int v200;
  FILE *v201;
  int v202;
  FILE *v203;
  int v204;
  FILE *v205;
  int v206;
  uint64_t v207;
  unsigned int v208;
  int v209;
  uint64_t v210;
  uint64_t v211;
  int v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  unsigned int v216;
  uint64_t v217;
  unsigned int v218;
  unsigned int v219;
  unint64_t *v220;
  unsigned int v221;
  unsigned int v222;
  geo::codec::Asset *v223;
  geo::codec::AssetDecoder *v224;
  geo::codec::AssetLodInstance *v225;
  geo::codec::AssetLodInstance *v226;
  uint64_t v227;
  uint64_t v228;
  int v229;
  int v230;
  uint64_t *v231[7];
  __int16 v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  geo::codec::Allocator *v240;
  geo::codec::Asset *v241;

  v6 = (geo::codec::Asset *)operator new();
  v7 = geo::codec::Asset::Asset(v6);
  v241 = v7;
  *((_WORD *)v7 + 151) = *a3;
  v237 = 0;
  v238 = 0;
  v239 = 0;
  v240 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v7);
  v233 = 0;
  v234 = 0;
  v235 = 0;
  v236 = geo::codec::Allocator::instance(v240);
  v9 = *((_QWORD *)a2 + 1);
  v8 = *((_QWORD *)a2 + 2);
  v10 = v8 + 2;
  if (!*((_BYTE *)a2 + 24))
    v10 = v8 + 1;
  if (v9 < v10)
  {
    v11 = (FILE *)*MEMORY[0x1E0C80C10];
LABEL_5:
    fprintf(v11, "%s:%d Asset Parse: Read error\n");
    goto LABEL_6;
  }
  v13 = v8 + 1;
  v14 = *(unsigned __int8 *)(*(_QWORD *)a2 + v8);
  if (*((_BYTE *)a2 + 24))
  {
    if (v13 >= v9)
      v15 = 0;
    else
      v15 = *(unsigned __int8 *)(*(_QWORD *)a2 + v13);
    v14 = (((v15 & (0xFFFF << (8 - *((_BYTE *)a2 + 24)))) >> (8 - *((_BYTE *)a2 + 24))) | ((((1 << (8 - *((_BYTE *)a2 + 24))) - 1) & v14) << *((_BYTE *)a2 + 24)));
  }
  *((_QWORD *)a2 + 2) = v13;
  v16 = v14;
  v17 = (v238 - v237) >> 2;
  if (v14 <= v17)
  {
    if (v14 < v17)
      v238 = v237 + 4 * v14;
  }
  else
  {
    std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>::__append((uint64_t)&v237, v14 - v17);
  }
  v18 = (v234 - v233) >> 2;
  if (v16 <= v18)
  {
    if (v16 < v18)
      v234 = v233 + 4 * v16;
  }
  else
  {
    std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>::__append((uint64_t)&v233, v16 - v18);
  }
  v19 = *((_QWORD *)v6 + 11);
  v20 = (*((_QWORD *)v6 + 12) - v19) >> 2;
  if (v16 <= v20)
  {
    if (v16 < v20)
      *((_QWORD *)v6 + 12) = v19 + 4 * v16;
  }
  else
  {
    std::vector<geo::codec::Asset::LodInfo,geo::StdAllocator<geo::codec::Asset::LodInfo,geo::codec::Allocator>>::__append((uint64_t)v6 + 88, v16 - v20);
  }
  std::vector<std::shared_ptr<geo::codec::AssetLodInstance>,geo::StdAllocator<std::shared_ptr<geo::codec::AssetLodInstance>,geo::codec::Allocator>>::reserve((uint64_t)v6 + 120, v16);
  v224 = this;
  if ((_DWORD)v16)
  {
    v21 = 0;
    while (1)
    {
      v25 = *((_QWORD *)a2 + 1);
      v24 = *((_QWORD *)a2 + 2);
      v26 = v24 + 2;
      if (!*((_BYTE *)a2 + 24))
        v26 = v24 + 1;
      if (v25 < v26)
      {
        v45 = (FILE *)*MEMORY[0x1E0C80C10];
        goto LABEL_63;
      }
      v27 = v24 + 1;
      v28 = *(unsigned __int8 *)(*(_QWORD *)a2 + v24);
      if (*((_BYTE *)a2 + 24))
      {
        if (v27 >= v25)
          v29 = 0;
        else
          v29 = *(unsigned __int8 *)(*(_QWORD *)a2 + v27);
        v28 = (((v29 & (0xFFFF << (8 - *((_BYTE *)a2 + 24)))) >> (8 - *((_BYTE *)a2 + 24))) | ((((1 << (8 - *((_BYTE *)a2 + 24))) - 1) & v28) << *((_BYTE *)a2 + 24)));
      }
      v30 = *((_QWORD *)v6 + 11);
      *((_QWORD *)a2 + 2) = v27;
      *(_BYTE *)(v30 + v21) = v28;
      if (v28 > *((unsigned __int8 *)v6 + 300))
        *((_BYTE *)v6 + 300) = v28;
      geo::ibitstream::readUInt32((uint64_t *)a2, (uint64_t)&v225);
      if (!(_BYTE)v225)
      {
        v45 = (FILE *)*MEMORY[0x1E0C80C10];
        goto LABEL_63;
      }
      *(_DWORD *)(v237 + v21) = HIDWORD(v225);
      geo::ibitstream::readUInt32((uint64_t *)a2, (uint64_t)&v225);
      if (!(_BYTE)v225)
      {
        v45 = (FILE *)*MEMORY[0x1E0C80C10];
        goto LABEL_63;
      }
      *(_DWORD *)(v233 + v21) = HIDWORD(v225);
      v32 = *((_QWORD *)a2 + 1);
      v31 = *((_QWORD *)a2 + 2);
      v33 = v31 + 2;
      v34 = *((_BYTE *)a2 + 24);
      v35 = v31 + 3;
      if (!v34)
        v35 = v31 + 2;
      if (v32 < v35)
      {
        v45 = (FILE *)*MEMORY[0x1E0C80C10];
        goto LABEL_63;
      }
      v36 = *(_QWORD *)a2;
      if (*((_BYTE *)a2 + 24))
        break;
      v22 = *(_WORD *)(v36 + v31);
      v23 = HIBYTE(*(unsigned __int16 *)(v36 + v31));
LABEL_28:
      *((_QWORD *)a2 + 2) = v33;
      *(_WORD *)(v30 + v21 + 2) = v22 | ((_WORD)v23 << 8);
      v21 += 4;
      if (4 * v16 == v21)
        goto LABEL_51;
    }
    v37 = v31 + 1;
    if (v31 + 1 >= v32)
    {
      v38 = 0;
      v39 = *(unsigned __int8 *)(v36 + v31);
      *((_QWORD *)a2 + 2) = v37;
      if (v33 >= v32)
        goto LABEL_47;
    }
    else
    {
      v38 = *(unsigned __int8 *)(v36 + v37);
      v39 = *(unsigned __int8 *)(v36 + v31);
      *((_QWORD *)a2 + 2) = v37;
      if (v33 >= v32)
      {
LABEL_47:
        v40 = 0;
LABEL_50:
        v41 = 0xFFFF << (8 - v34);
        v22 = (((v38 & v41) >> (8 - v34)) | ((((1 << (8 - v34)) + 255) & v39) << v34));
        LOWORD(v23) = (((v40 & v41) >> (8 - v34)) | ((((1 << (8 - v34)) - 1) & *(_BYTE *)(v36 + v37)) << v34));
        goto LABEL_28;
      }
    }
    v40 = *(unsigned __int8 *)(v36 + v33);
    goto LABEL_50;
  }
LABEL_51:
  geo::ibitstream::readFloat((uint64_t *)a2, (uint64_t)&v225);
  this = v224;
  if (!(_BYTE)v225)
  {
    v11 = (FILE *)*MEMORY[0x1E0C80C10];
    goto LABEL_5;
  }
  *((_DWORD *)v6 + 66) = HIDWORD(v225);
  geo::ibitstream::readFloat((uint64_t *)a2, (uint64_t)&v225);
  if (!(_BYTE)v225)
  {
    v11 = (FILE *)*MEMORY[0x1E0C80C10];
    goto LABEL_5;
  }
  *((_DWORD *)v6 + 67) = HIDWORD(v225);
  geo::ibitstream::readFloat((uint64_t *)a2, (uint64_t)&v225);
  if (!(_BYTE)v225)
  {
    v11 = (FILE *)*MEMORY[0x1E0C80C10];
    goto LABEL_5;
  }
  *((_DWORD *)v6 + 68) = HIDWORD(v225);
  v43 = *((_QWORD *)a2 + 1);
  v42 = *((_QWORD *)a2 + 2);
  v44 = v42 + 2;
  if (!*((_BYTE *)a2 + 24))
    v44 = v42 + 1;
  if (v43 < v44)
  {
    v11 = (FILE *)*MEMORY[0x1E0C80C10];
    goto LABEL_5;
  }
  v47 = v42 + 1;
  v48 = *(unsigned __int8 *)(*(_QWORD *)a2 + v42);
  if (*((_BYTE *)a2 + 24))
  {
    if (v47 >= v43)
      v49 = 0;
    else
      v49 = *(unsigned __int8 *)(*(_QWORD *)a2 + v47);
    v48 = ((v49 & (0xFFFF << (8 - *((_BYTE *)a2 + 24)))) >> (8 - *((_BYTE *)a2 + 24))) | ((((1 << (8 - *((_BYTE *)a2 + 24))) - 1) & v48) << *((_BYTE *)a2 + 24));
  }
  *((_QWORD *)a2 + 2) = v47;
  std::vector<unsigned long long,geo::StdAllocator<unsigned long long,geo::codec::Allocator>>::resize((uint64_t)v6 + 56, v48);
  v50 = (geo::codec::AssetLodInstance **)*((_QWORD *)v6 + 7);
  v51 = (geo::codec::AssetLodInstance **)*((_QWORD *)v6 + 8);
  if (v50 != v51)
  {
    while (1)
    {
      geo::ibitstream::readUInt64((uint64_t *)a2, (uint64_t)&v225);
      if (!(_BYTE)v225)
        break;
      *v50++ = v226;
      if (v50 == v51)
        goto LABEL_81;
    }
    v11 = (FILE *)*MEMORY[0x1E0C80C10];
    goto LABEL_5;
  }
LABEL_81:
  *(_OWORD *)((char *)v6 + 276) = xmmword_19FFB3470;
  *(_QWORD *)((char *)v6 + 292) = 0xFF7FFFFFFF7FFFFFLL;
  if (!(_DWORD)v16)
  {
LABEL_307:
    v199 = *((_QWORD *)v6 + 11);
    v198 = *((_QWORD *)v6 + 12);
    if (v198 == v199)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d Asset Parse: should have at least one LOD\n");
LABEL_6:
      *(_QWORD *)this = 0;
      v12 = v233;
      if (!v233)
        goto LABEL_66;
      goto LABEL_65;
    }
    v200 = 0xFFFF;
    do
    {
      LODWORD(v225) = *(unsigned __int16 *)(v199 + 2) | (v200 << 16);
      BYTE4(v225) = *(_BYTE *)v199;
      geo::range_map<unsigned short,unsigned char,std::less<unsigned short>,std::allocator<std::pair<gm::Range<unsigned short> const,unsigned char>>>::insert((uint64_t ***)v6 + 30, (unsigned __int16 *)&v225);
      v200 = *(unsigned __int16 *)(v199 + 2);
      v199 += 4;
    }
    while (v199 != v198);
    v241 = 0;
    *(_QWORD *)this = v6;
    v12 = v233;
    if (!v233)
      goto LABEL_66;
LABEL_65:
    v234 = v12;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v236 + 40))(v236, v12, v235 - v12);
    goto LABEL_66;
  }
  v52 = 0;
  v53 = (char *)&v225 + 4;
  __asm { FMOV            V8.2S, #1.0 }
  while (1)
  {
    v59 = (geo::codec::AssetLodInstance *)operator new();
    v225 = geo::codec::AssetLodInstance::AssetLodInstance(v59);
    std::vector<std::shared_ptr<geo::codec::AssetLodInstance>,geo::StdAllocator<std::shared_ptr<geo::codec::AssetLodInstance>,geo::codec::Allocator>>::emplace_back<std::unique_ptr<geo::codec::AssetLodInstance>>((uint64_t **)v6 + 15, (uint64_t *)&v225);
    std::unique_ptr<geo::codec::AssetLodInstance>::~unique_ptr[abi:ne180100](&v225);
    v223 = v241;
    v60 = *((_QWORD *)v241 + 16);
    geo::ibitstream::readUInt32((uint64_t *)a2, (uint64_t)&v225);
    if (!(_BYTE)v225)
    {
      v45 = (FILE *)*MEMORY[0x1E0C80C10];
      goto LABEL_63;
    }
    std::vector<gm::Matrix<float,3,1>,geo::StdAllocator<gm::Matrix<float,3,1>,geo::codec::Allocator>>::resize(*(_QWORD *)(v60 - 16) + 192, HIDWORD(v225));
    geo::ibitstream::readUInt32((uint64_t *)a2, (uint64_t)&v225);
    if (!(_BYTE)v225)
    {
      v45 = (FILE *)*MEMORY[0x1E0C80C10];
      goto LABEL_63;
    }
    v221 = HIDWORD(v225);
    std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::resize((_QWORD *)(*(_QWORD *)(v60 - 16) + 224), HIDWORD(v225));
    geo::ibitstream::readUInt16((uint64_t)&v225, (uint64_t *)a2);
    if (!(_BYTE)v225)
    {
      v45 = (FILE *)*MEMORY[0x1E0C80C10];
      goto LABEL_63;
    }
    v213 = v53;
    v212 = v52;
    v61 = WORD1(v225);
    std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>::reserve(*(_QWORD *)(v60 - 16) + 384, WORD1(v225));
    geo::ibitstream::readUInt16((uint64_t)&v225, (uint64_t *)a2);
    if (!(_BYTE)v225)
    {
      v45 = (FILE *)*MEMORY[0x1E0C80C10];
      goto LABEL_63;
    }
    i = WORD1(v225);
    geo::ibitstream::readUInt16((uint64_t)&v225, (uint64_t *)a2);
    if (!(_BYTE)v225)
    {
      v45 = (FILE *)*MEMORY[0x1E0C80C10];
      goto LABEL_63;
    }
    v218 = WORD1(v225);
    std::vector<std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>,geo::StdAllocator<std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>,geo::codec::Allocator>>::resize((_QWORD *)(*(_QWORD *)(v60 - 16) + 352), WORD1(v225));
    geo::ibitstream::readUInt16((uint64_t)&v225, (uint64_t *)a2);
    if (!(_BYTE)v225)
    {
      v45 = (FILE *)*MEMORY[0x1E0C80C10];
      goto LABEL_63;
    }
    v211 = WORD1(v225);
    std::vector<geo::codec::ModelNode,geo::StdAllocator<geo::codec::ModelNode,geo::codec::Allocator>>::resize((geo::codec::Allocator *)(*(_QWORD *)(v60 - 16) + 128), WORD1(v225));
    geo::ibitstream::readByte((uint64_t)a2, &v225);
    if (!(_BYTE)v225)
    {
      v45 = (FILE *)*MEMORY[0x1E0C80C10];
      goto LABEL_63;
    }
    v210 = BYTE1(v225);
    std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::resize((_QWORD *)(*(_QWORD *)(v60 - 16) + 160), BYTE1(v225));
    std::vector<geo::codec::Mesh,geo::StdAllocator<geo::codec::Mesh,geo::codec::Allocator>>::resize((uint64_t *)(*(_QWORD *)(v60 - 16) + 256), v61);
    v63 = *(_QWORD *)(*(_QWORD *)(v60 - 16) + 264);
    if (v63 != *(_QWORD *)(*(_QWORD *)(v60 - 16) + 256))
    {
      v214 = 0;
      v216 = 0;
      v64 = 0;
      v209 = 0;
      v63 = *(_QWORD *)(*(_QWORD *)(v60 - 16) + 256);
      v208 = i;
      do
      {
        geo::ibitstream::readByte((uint64_t)a2, &v225);
        if (!(_BYTE)v225)
        {
          v45 = (FILE *)*MEMORY[0x1E0C80C10];
          goto LABEL_63;
        }
        v65 = BYTE1(v225);
        geo::ibitstream::readUInt16((uint64_t)&v225, (uint64_t *)a2);
        if (!(_BYTE)v225)
        {
          v45 = (FILE *)*MEMORY[0x1E0C80C10];
          goto LABEL_63;
        }
        v219 = v64;
        v66 = WORD1(v225);
        if (WORD1(v225))
        {
          if (v221 >= v64)
            v67 = v221 - v64;
          else
            v67 = 0;
          v68 = 12 * v64;
          v69 = WORD1(v225);
          while (v67)
          {
            v70 = *(_QWORD *)(*(_QWORD *)(v60 - 16) + 192);
            geo::ibitstream::readFloat((uint64_t *)a2, (uint64_t)&v225);
            if (!(_BYTE)v225)
            {
              v45 = (FILE *)*MEMORY[0x1E0C80C10];
              goto LABEL_63;
            }
            *(_DWORD *)(v70 + v68) = HIDWORD(v225);
            geo::ibitstream::readFloat((uint64_t *)a2, (uint64_t)&v225);
            if (!(_BYTE)v225)
            {
              v45 = (FILE *)*MEMORY[0x1E0C80C10];
              goto LABEL_63;
            }
            *(_DWORD *)(v70 + v68 + 4) = HIDWORD(v225);
            geo::ibitstream::readFloat((uint64_t *)a2, (uint64_t)&v225);
            if (!(_BYTE)v225)
            {
              v45 = (FILE *)*MEMORY[0x1E0C80C10];
              goto LABEL_63;
            }
            *(_DWORD *)(v70 + v68 + 8) = HIDWORD(v225);
            v68 += 12;
            --v67;
            if (!--v69)
              goto LABEL_104;
          }
          fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d Asset Parse: Read in vertexCount is larger than totalIndexCount\n");
          goto LABEL_64;
        }
LABEL_104:
        v207 = v66;
        if ((v65 & 1) != 0)
        {
          std::vector<gm::Matrix<float,3,1>,geo::StdAllocator<gm::Matrix<float,3,1>,geo::codec::Allocator>>::vector((uint64_t *)&v225, v66);
          if ((_DWORD)v66)
          {
            v71 = 0;
            while (1)
            {
              v72 = v225;
              geo::ibitstream::readFloat((uint64_t *)a2, (uint64_t)v231);
              if (!LOBYTE(v231[0]))
              {
                v205 = (FILE *)*MEMORY[0x1E0C80C10];
                v206 = 720;
                goto LABEL_340;
              }
              *(_DWORD *)((char *)v72 + v71) = HIDWORD(v231[0]);
              geo::ibitstream::readFloat((uint64_t *)a2, (uint64_t)v231);
              if (!LOBYTE(v231[0]))
              {
                v205 = (FILE *)*MEMORY[0x1E0C80C10];
                v206 = 721;
                goto LABEL_340;
              }
              *(_DWORD *)((char *)v72 + v71 + 4) = HIDWORD(v231[0]);
              geo::ibitstream::readFloat((uint64_t *)a2, (uint64_t)v231);
              if (!LOBYTE(v231[0]))
                break;
              *(_DWORD *)((char *)v72 + v71 + 8) = HIDWORD(v231[0]);
              v71 += 12;
              if (12 * v66 == v71)
                goto LABEL_111;
            }
            v205 = (FILE *)*MEMORY[0x1E0C80C10];
            v206 = 722;
LABEL_340:
            fprintf(v205, "%s:%d Asset Parse: Read error\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/AssetDecoder.cpp", v206);
            std::vector<gm::Matrix<float,3,1>,geo::StdAllocator<gm::Matrix<float,3,1>,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&v225);
            *(_QWORD *)v224 = 0;
            v12 = v233;
            if (v233)
              goto LABEL_65;
            goto LABEL_66;
          }
LABEL_111:
          v74 = v225;
          v73 = v226;
          if (v225 != v226)
          {
            v75 = *(_QWORD *)(v60 - 16);
            v76 = *(_QWORD *)(v75 + 296);
            do
            {
              v77 = *(_QWORD *)(v75 + 304);
              if (v76 >= v77)
              {
                v79 = *(_QWORD *)(v75 + 288);
                v80 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v76 - v79) >> 2);
                v81 = v80 + 1;
                if (v80 + 1 > 0x1555555555555555)
                  std::vector<double>::__throw_length_error[abi:ne180100]();
                v82 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v77 - v79) >> 2);
                if (2 * v82 > v81)
                  v81 = 2 * v82;
                if (v82 >= 0xAAAAAAAAAAAAAAALL)
                  v83 = 0x1555555555555555;
                else
                  v83 = v81;
                if (v83)
                {
                  v84 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v75 + 312) + 16))(*(_QWORD *)(v75 + 312), 12 * v83, 4);
                  v85 = v84 + 12 * v80;
                  v86 = v84 + 12 * v83;
                  if (v84)
                  {
                    v87 = *(_QWORD *)v74;
                    *(_DWORD *)(v85 + 8) = *((_DWORD *)v74 + 2);
                    *(_QWORD *)v85 = v87;
                  }
                }
                else
                {
                  v86 = 0;
                  v85 = 12 * v80;
                }
                v89 = *(_QWORD *)(v75 + 288);
                v88 = *(_QWORD *)(v75 + 296);
                v90 = v85;
                if (v88 != v89)
                {
                  do
                  {
                    v91 = *(_QWORD *)(v88 - 12);
                    v88 -= 12;
                    v92 = *(_DWORD *)(v88 + 8);
                    *(_QWORD *)(v90 - 12) = v91;
                    v90 -= 12;
                    *(_DWORD *)(v90 + 8) = v92;
                  }
                  while (v88 != v89);
                  v88 = *(_QWORD *)(v75 + 288);
                }
                v76 = v85 + 12;
                *(_QWORD *)(v75 + 288) = v90;
                *(_QWORD *)(v75 + 296) = v85 + 12;
                v93 = *(_QWORD *)(v75 + 304);
                *(_QWORD *)(v75 + 304) = v86;
                if (v88)
                  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v75 + 312) + 40))(*(_QWORD *)(v75 + 312), v88, v93 - v88);
              }
              else
              {
                if (v76)
                {
                  v78 = *(_QWORD *)v74;
                  *(_DWORD *)(v76 + 8) = *((_DWORD *)v74 + 2);
                  *(_QWORD *)v76 = v78;
                }
                v76 += 12;
              }
              *(_QWORD *)(v75 + 296) = v76;
              v74 = (geo::codec::AssetLodInstance *)((char *)v74 + 12);
            }
            while (v74 != v73);
          }
          std::vector<gm::Matrix<float,3,1>,geo::StdAllocator<gm::Matrix<float,3,1>,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&v225);
        }
        if ((v65 & 2) != 0)
        {
          *(_DWORD *)(v63 + 152 * v214 + 140) = (*(_QWORD *)(*(_QWORD *)(v60 - 16) + 328)
                                               - *(_QWORD *)(*(_QWORD *)(v60 - 16) + 320)) >> 3;
          std::vector<gm::Matrix<float,2,1>,geo::StdAllocator<gm::Matrix<float,2,1>,geo::codec::Allocator>>::vector((uint64_t *)&v225, v207);
          if ((_DWORD)v207)
          {
            v94 = 0;
            while (1)
            {
              v95 = v225;
              geo::ibitstream::readFloat((uint64_t *)a2, (uint64_t)v231);
              if (!LOBYTE(v231[0]))
              {
                v203 = (FILE *)*MEMORY[0x1E0C80C10];
                v204 = 733;
                goto LABEL_336;
              }
              *(_DWORD *)((char *)v95 + v94) = HIDWORD(v231[0]);
              geo::ibitstream::readFloat((uint64_t *)a2, (uint64_t)v231);
              if (!LOBYTE(v231[0]))
                break;
              *(_DWORD *)((char *)v95 + v94 + 4) = HIDWORD(v231[0]);
              v94 += 8;
              if (8 * v207 == v94)
                goto LABEL_141;
            }
            v203 = (FILE *)*MEMORY[0x1E0C80C10];
            v204 = 734;
LABEL_336:
            fprintf(v203, "%s:%d Asset Parse: Read error\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/AssetDecoder.cpp", v204);
            std::vector<gm::Matrix<float,2,1>,geo::StdAllocator<gm::Matrix<float,2,1>,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&v225);
            *(_QWORD *)v224 = 0;
            v12 = v233;
            if (v233)
              goto LABEL_65;
            goto LABEL_66;
          }
LABEL_141:
          v97 = v225;
          v96 = v226;
          v231[0] = (uint64_t *)(*(_QWORD *)(v60 - 16) + 320);
          for (i = v208; v97 != v96; v97 = (geo::codec::AssetLodInstance *)((char *)v97 + 8))
            std::back_insert_iterator<std::vector<gm::Matrix<float,2,1>,geo::StdAllocator<gm::Matrix<float,2,1>,geo::codec::Allocator>>>::operator=[abi:ne180100](v231, v97);
          std::vector<gm::Matrix<float,2,1>,geo::StdAllocator<gm::Matrix<float,2,1>,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&v225);
        }
        else
        {
          *(_DWORD *)(v63 + 152 * v214 + 140) = -1;
          i = v208;
        }
        geo::ibitstream::readUInt32((uint64_t *)a2, (uint64_t)&v225);
        if (!(_BYTE)v225)
        {
          v45 = (FILE *)*MEMORY[0x1E0C80C10];
          goto LABEL_63;
        }
        v98 = HIDWORD(v225);
        v99 = HIDWORD(v225) + v216;
        if (HIDWORD(v225) + v216 > v221)
        {
          fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d Asset Parse: Index count out of total index range\n");
          goto LABEL_64;
        }
        if (HIDWORD(v225))
        {
          v100 = *((unsigned __int8 *)a2 + 24);
          v102 = *((_QWORD *)a2 + 1);
          v101 = *((_QWORD *)a2 + 2);
          v103 = 8 - v100;
          v104 = *(_QWORD *)a2;
          v105 = 0xFFFF << (8 - v100);
          v106 = (*((_BYTE *)a2 + 24) != 0) | 2;
          v107 = HIDWORD(v225);
          v108 = v216;
          do
          {
            if (v102 < v106 + v101)
            {
              v45 = (FILE *)*MEMORY[0x1E0C80C10];
              goto LABEL_63;
            }
            v114 = v101 + 2;
            if (v100)
            {
              if (v101 + 1 >= v102)
                v111 = 0;
              else
                v111 = *(unsigned __int8 *)(v104 + v101 + 1);
              v115 = *(unsigned __int8 *)(v104 + v101);
              *((_QWORD *)a2 + 2) = v101 + 1;
              v116 = v104 + v101;
              if (v114 >= v102)
                v117 = 0;
              else
                v117 = *(unsigned __int8 *)(v116 + 2);
              v110 = (((v111 & v105) >> v103) | ((((1 << (8 - v100)) + 255) & v115) << v100));
              LOWORD(v111) = (((v117 & v105) >> v103) | ((((1 << (8 - v100)) - 1) & *(_BYTE *)(v116 + 1)) << v100));
            }
            else
            {
              v109 = *(unsigned __int16 *)(v104 + v101);
              v110 = *(_WORD *)(v104 + v101);
              v111 = v109 >> 8;
            }
            *((_QWORD *)a2 + 2) = v114;
            v112 = v110 + v219 + ((_WORD)v111 << 8);
            v113 = *(_QWORD **)(v60 - 16);
            *(_WORD *)(v113[28] + 2 * v108++) = v112;
            v101 = v114;
            --v107;
          }
          while (v107);
        }
        else
        {
          v113 = *(_QWORD **)(v60 - 16);
        }
        v118 = (_DWORD *)(v63 + 152 * v214);
        v118[36] = v216;
        v118[37] = v98;
        v118[33] = v219;
        v118[34] = v207;
        v64 = v219 + v207;
        ++v209;
        v63 = v113[32];
        v216 = v99;
        v214 = (unsigned __int16)v209;
      }
      while (0x86BCA1AF286BCA1BLL * ((v113[33] - v63) >> 3) > (unsigned __int16)v209);
    }
    if (i)
    {
      v119 = 0;
      v120 = *((unsigned __int8 *)a2 + 24);
      v121 = *((_BYTE *)a2 + 24) != 0;
      v123 = *((_QWORD *)a2 + 1);
      v122 = *((_QWORD *)a2 + 2);
      v124 = *(_QWORD *)a2;
      v125 = 8 - v120;
      v126 = (1 << (8 - v120)) + 255;
      v127 = 0xFFFF << (8 - v120);
      do
      {
        v132 = v122 + 1;
        if (v123 < v122 + 1 + v121)
        {
          v45 = (FILE *)*MEMORY[0x1E0C80C10];
          goto LABEL_63;
        }
        v129 = *(unsigned __int8 *)(v124 + v122);
        if (v120)
        {
          if (v132 >= v123)
            v133 = 0;
          else
            v133 = *(unsigned __int8 *)(v124 + v132);
          *((_QWORD *)a2 + 2) = v132;
          v134 = v122 + 3;
          if (v123 < v122 + 3 + v121)
          {
LABEL_319:
            v45 = (FILE *)*MEMORY[0x1E0C80C10];
            goto LABEL_63;
          }
          v131 = v122 + 2;
          if (v131 >= v123)
            v135 = 0;
          else
            v135 = *(unsigned __int8 *)(v124 + v131);
          v136 = *(unsigned __int8 *)(v124 + v132);
          *((_QWORD *)a2 + 2) = v131;
          if (v134 < v123)
            v128 = *(unsigned __int8 *)(v124 + v134);
          else
            v128 = 0;
          v129 = ((v133 & v127) >> v125) | ((v126 & v129) << v120);
          LODWORD(v130) = ((v135 & v127) >> v125) | ((v126 & v136) << v120);
          LODWORD(v131) = ((v128 & v127) >> v125) | ((((1 << (8 - v120)) - 1) & *(_BYTE *)(v124 + v131)) << v120);
        }
        else
        {
          *((_QWORD *)a2 + 2) = v132;
          v134 = v122 + 3;
          if (v123 < v122 + 3 + v121)
            goto LABEL_319;
          v130 = *(unsigned __int16 *)(v124 + v132);
          v131 = v130 >> 8;
        }
        *((_QWORD *)a2 + 2) = v134;
        *(_BYTE *)(v63 + 152 * (v130 | (v131 << 8)) + 128) = v129;
        ++v119;
        v122 = v134;
      }
      while (v119 < i);
    }
    geo::ibitstream::readUInt16((uint64_t)&v225, (uint64_t *)a2);
    if (!(_BYTE)v225)
    {
      v45 = (FILE *)*MEMORY[0x1E0C80C10];
      goto LABEL_63;
    }
    v137 = WORD1(v225);
    std::vector<std::unordered_map<unsigned short,unsigned long long>>::resize((void **)v223, WORD1(v225));
    if ((_DWORD)v137)
      break;
LABEL_264:
    if (v218)
    {
      v180 = 0;
      while (1)
      {
        v225 = 0;
        v226 = 0;
        v227 = 0;
        v228 = geo::codec::Allocator::instance((geo::codec::Allocator *)prime);
        geo::ibitstream::readUInt16((uint64_t)v231, (uint64_t *)a2);
        if (!LOBYTE(v231[0]))
        {
          v201 = (FILE *)*MEMORY[0x1E0C80C10];
          v202 = 788;
          goto LABEL_324;
        }
        v181 = WORD1(v231[0]);
        std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::resize(&v225, WORD1(v231[0]));
        if (v181)
          break;
LABEL_271:
        std::vector<std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>,geo::StdAllocator<std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>,geo::codec::Allocator>>::push_back[abi:ne180100]((uint64_t *)(*(_QWORD *)(v60 - 16) + 352), (uint64_t *)&v225);
        prime = (unint64_t)std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&v225);
        if (++v180 >= v218)
          goto LABEL_272;
      }
      v182 = 0;
      while (1)
      {
        v232 = 0;
        geo::ibitstream::readUInt16((uint64_t)v231, (uint64_t *)a2);
        if (!LOBYTE(v231[0]))
          break;
        v232 = WORD1(v231[0]);
        std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::push_back[abi:ne180100]((uint64_t)&v225, &v232);
        if (++v182 >= v181)
          goto LABEL_271;
      }
      v201 = (FILE *)*MEMORY[0x1E0C80C10];
      v202 = 792;
LABEL_324:
      fprintf(v201, "%s:%d Asset Parse: Read error\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/AssetDecoder.cpp", v202);
      std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&v225);
      *(_QWORD *)v224 = 0;
      v12 = v233;
      if (!v233)
        goto LABEL_66;
      goto LABEL_65;
    }
LABEL_272:
    if ((_DWORD)v211)
    {
      v183 = 0;
      while (1)
      {
        v184 = *(_QWORD *)(*(_QWORD *)(v60 - 16) + 128);
        geo::ibitstream::readUInt16((uint64_t)&v225, (uint64_t *)a2);
        if (!(_BYTE)v225)
        {
          v45 = (FILE *)*MEMORY[0x1E0C80C10];
          goto LABEL_63;
        }
        v185 = WORD1(v225);
        std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::reserve(v184 + 144 * v183, WORD1(v225));
        if (v185)
          break;
LABEL_279:
        geo::ibitstream::readUInt16((uint64_t)&v225, (uint64_t *)a2);
        if (!(_BYTE)v225)
        {
          v45 = (FILE *)*MEMORY[0x1E0C80C10];
          goto LABEL_63;
        }
        v187 = WORD1(v225);
        std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::reserve(v184 + 144 * v183 + 64, WORD1(v225));
        if (v187)
        {
          v188 = 0;
          while (1)
          {
            LOWORD(v231[0]) = 0;
            geo::ibitstream::readUInt16((uint64_t)&v225, (uint64_t *)a2);
            if (!(_BYTE)v225)
              break;
            LOWORD(v231[0]) = WORD1(v225);
            std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::push_back[abi:ne180100](v184 + 144 * v183 + 64, v231);
            if (++v188 >= v187)
              goto LABEL_284;
          }
          v45 = (FILE *)*MEMORY[0x1E0C80C10];
          goto LABEL_63;
        }
LABEL_284:
        geo::ibitstream::readByte((uint64_t)a2, &v225);
        if (!(_BYTE)v225)
        {
          v45 = (FILE *)*MEMORY[0x1E0C80C10];
          goto LABEL_63;
        }
        v189 = v184 + 144 * v183;
        *(_WORD *)(v189 + 136) = BYTE1(v225);
        v190 = (_DWORD *)(v189 + 96);
        v191 = (_DWORD *)(v189 + 124);
        if (*(_WORD *)(v189 + 136))
        {
          geo::ibitstream::readFloat((uint64_t *)a2, (uint64_t)&v225);
          if (!(_BYTE)v225)
          {
            v45 = (FILE *)*MEMORY[0x1E0C80C10];
            goto LABEL_63;
          }
          *v190 = HIDWORD(v225);
          geo::ibitstream::readFloat((uint64_t *)a2, (uint64_t)&v225);
          if (!(_BYTE)v225)
          {
            v45 = (FILE *)*MEMORY[0x1E0C80C10];
            goto LABEL_63;
          }
          v190[1] = HIDWORD(v225);
          geo::ibitstream::readFloat((uint64_t *)a2, (uint64_t)&v225);
          if (!(_BYTE)v225)
          {
            v45 = (FILE *)*MEMORY[0x1E0C80C10];
            goto LABEL_63;
          }
          v190[2] = HIDWORD(v225);
          geo::ibitstream::readFloat((uint64_t *)a2, (uint64_t)&v225);
          if (!(_BYTE)v225)
          {
            v45 = (FILE *)*MEMORY[0x1E0C80C10];
            goto LABEL_63;
          }
          *v191 = HIDWORD(v225);
          geo::ibitstream::readFloat((uint64_t *)a2, (uint64_t)&v225);
          if (!(_BYTE)v225)
          {
            v45 = (FILE *)*MEMORY[0x1E0C80C10];
            goto LABEL_63;
          }
          v191[1] = HIDWORD(v225);
          geo::ibitstream::readFloat((uint64_t *)a2, (uint64_t)&v225);
          if (!(_BYTE)v225)
          {
            v45 = (FILE *)*MEMORY[0x1E0C80C10];
            goto LABEL_63;
          }
          v191[2] = HIDWORD(v225);
          geo::ibitstream::readFloat((uint64_t *)a2, (uint64_t)&v225);
          if (!(_BYTE)v225)
          {
            v45 = (FILE *)*MEMORY[0x1E0C80C10];
            goto LABEL_63;
          }
          v190[3] = HIDWORD(v225);
          geo::ibitstream::readFloat((uint64_t *)a2, (uint64_t)&v225);
          if (!(_BYTE)v225)
          {
            v45 = (FILE *)*MEMORY[0x1E0C80C10];
            goto LABEL_63;
          }
          v190[4] = HIDWORD(v225);
          geo::ibitstream::readFloat((uint64_t *)a2, (uint64_t)&v225);
          if (!(_BYTE)v225)
          {
            v45 = (FILE *)*MEMORY[0x1E0C80C10];
            goto LABEL_63;
          }
          v190[5] = HIDWORD(v225);
          geo::ibitstream::readFloat((uint64_t *)a2, (uint64_t)&v225);
          if (!(_BYTE)v225)
          {
            v45 = (FILE *)*MEMORY[0x1E0C80C10];
            goto LABEL_63;
          }
          v190[6] = HIDWORD(v225);
        }
        else
        {
          *(_QWORD *)(v189 + 128) = _D8;
          *(_QWORD *)v190 = 0;
          *(_QWORD *)(v189 + 104) = 0;
          *(_OWORD *)(v189 + 112) = xmmword_19FFB3480;
        }
        if (++v183 == v211)
          goto LABEL_299;
      }
      v186 = 0;
      while (1)
      {
        LOWORD(v231[0]) = 0;
        geo::ibitstream::readUInt16((uint64_t)&v225, (uint64_t *)a2);
        if (!(_BYTE)v225)
          break;
        LOWORD(v231[0]) = WORD1(v225);
        std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::push_back[abi:ne180100](v184 + 144 * v183, v231);
        if (++v186 >= v185)
          goto LABEL_279;
      }
      v45 = (FILE *)*MEMORY[0x1E0C80C10];
      goto LABEL_63;
    }
LABEL_299:
    if ((_DWORD)v210)
    {
      v192 = 0;
      while (1)
      {
        geo::ibitstream::readUInt16((uint64_t)&v225, (uint64_t *)a2);
        if (!(_BYTE)v225)
          break;
        *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v60 - 16) + 160) + v192) = WORD1(v225);
        v192 += 2;
        if (2 * v210 == v192)
          goto LABEL_303;
      }
      v45 = (FILE *)*MEMORY[0x1E0C80C10];
      goto LABEL_63;
    }
LABEL_303:
    std::unordered_map<unsigned short,gm::Matrix<float,4,4>,std::hash<unsigned short>,std::equal_to<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,gm::Matrix<float,4,4>>,geo::codec::Allocator>>::unordered_map[abi:ne180100]((uint64_t)v231);
    v6 = v241;
    v193 = *(_QWORD **)(v60 - 16);
    v194 = (unsigned __int16 *)v193[20];
    v195 = (unsigned __int16 *)v193[21];
    if (v194 != v195)
    {
      do
      {
        v196 = *v194;
        v197 = *(_QWORD **)(v60 - 16);
        *((_QWORD *)v213 + 6) = 0;
        *((_OWORD *)v213 + 1) = 0u;
        *((_OWORD *)v213 + 2) = 0u;
        *(_OWORD *)v213 = 0u;
        LODWORD(v225) = 1065353216;
        HIDWORD(v227) = 1065353216;
        v229 = 1065353216;
        v230 = 1065353216;
        buildLocalTransformMatrix((unint64_t)v231, (uint64_t *)v6 + 19, v196, v197 + 16, v197, (uint64_t)&v225, 1);
        ++v194;
      }
      while (v194 != v195);
      v193 = *(_QWORD **)(v60 - 16);
    }
    geo::codec::AssetDecoder::applyTransforms((uint64_t)(v193 + 32), v193 + 28, v193 + 24, v231);
    std::unordered_map<unsigned short,gm::Matrix<float,4,4>,std::hash<unsigned short>,std::equal_to<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,gm::Matrix<float,4,4>>,geo::codec::Allocator>>::~unordered_map[abi:ne180100]((uint64_t *)v231);
    v52 = v212 + 1;
    this = v224;
    v53 = v213;
    if (v212 + 1 >= v16)
      goto LABEL_307;
  }
  v139 = 0;
  v215 = v137;
  while (1)
  {
    v140 = *(void **)v223;
    geo::ibitstream::readByte((uint64_t)a2, &v225);
    if (!(_BYTE)v225)
      break;
    v217 = v139;
    v141 = (uint64_t)v140 + 40 * v139;
    v142 = BYTE1(v225);
    std::unordered_map<unsigned short,unsigned long long>::reserve[abi:ne180100](v141, BYTE1(v225));
    if ((_DWORD)v142)
    {
      v143 = 0;
      v220 = (unint64_t *)(v141 + 16);
      v222 = v142;
      do
      {
        v144 = *((_QWORD *)a2 + 1);
        v145 = *((_QWORD *)a2 + 2);
        v146 = v145 + 2;
        v147 = *((unsigned __int8 *)a2 + 24);
        v148 = *((_BYTE *)a2 + 24) != 0;
        v149 = v145 + 3;
        if (!*((_BYTE *)a2 + 24))
          v149 = v145 + 2;
        if (v144 < v149)
        {
          v45 = (FILE *)*MEMORY[0x1E0C80C10];
          goto LABEL_63;
        }
        v150 = *(_QWORD *)a2;
        if (*((_BYTE *)a2 + 24))
        {
          v151 = v145 + 1;
          if (v145 + 1 >= v144)
            v152 = 0;
          else
            v152 = *(unsigned __int8 *)(v150 + v151);
          v155 = *(unsigned __int8 *)(v150 + v145);
          *((_QWORD *)a2 + 2) = v151;
          if (v146 >= v144)
            v156 = 0;
          else
            v156 = *(unsigned __int8 *)(v150 + v146);
          prime = (0xFFFF << (8 - v147));
          v153 = (((v152 & prime) >> (8 - v147)) | ((((1 << (8 - v147)) + 255) & v155) << v147));
          v154 = (((v156 & prime) >> (8 - v147)) | ((((1 << (8 - v147)) - 1) & *(_BYTE *)(v150 + v151)) << v147));
        }
        else
        {
          v153 = *(_WORD *)(v150 + v145);
          v154 = HIBYTE(*(unsigned __int16 *)(v150 + v145));
        }
        *((_QWORD *)a2 + 2) = v146;
        v157 = v145 + 3;
        if (v144 < v157 + v148)
        {
          v45 = (FILE *)*MEMORY[0x1E0C80C10];
          goto LABEL_63;
        }
        v158 = *(unsigned __int8 *)(v150 + v146);
        if (v147)
        {
          if (v157 >= v144)
            v159 = 0;
          else
            v159 = *(unsigned __int8 *)(v150 + v157);
          v158 = (((v159 & (0xFFFF << (8 - v147))) >> (8 - v147)) | ((((1 << (8 - v147)) - 1) & v158) << v147));
        }
        v160 = v153 | (v154 << 8);
        *((_QWORD *)a2 + 2) = v157;
        v161 = *(_QWORD *)(*((_QWORD *)v223 + 7) + 8 * v158);
        v162 = *(_QWORD *)(v141 + 8);
        if (v162)
        {
          v163 = (uint8x8_t)vcnt_s8((int8x8_t)v162);
          v163.i16[0] = vaddlv_u8(v163);
          if (v163.u32[0] > 1uLL)
          {
            v142 = v153 | (v154 << 8);
            if (v162 <= v160)
              v142 = v160 % v162;
          }
          else
          {
            v142 = ((_DWORD)v162 - 1) & v160;
          }
          v164 = *(uint64_t ****)(*(_QWORD *)v141 + 8 * v142);
          if (v164)
          {
            v165 = *v164;
            if (v165)
            {
              if (v163.u32[0] < 2uLL)
              {
                while (1)
                {
                  v167 = v165[1];
                  if (v167 == (uint64_t *)v160)
                  {
                    if (*((unsigned __int16 *)v165 + 8) == (_DWORD)v160)
                      goto LABEL_262;
                  }
                  else if (((unint64_t)v167 & (v162 - 1)) != v142)
                  {
                    goto LABEL_224;
                  }
                  v165 = (uint64_t **)*v165;
                  if (!v165)
                    goto LABEL_224;
                }
              }
              do
              {
                v166 = (unint64_t)v165[1];
                if (v166 == v160)
                {
                  if (*((unsigned __int16 *)v165 + 8) == (_DWORD)v160)
                    goto LABEL_262;
                }
                else
                {
                  if (v166 >= v162)
                    v166 %= v162;
                  if (v166 != v142)
                    break;
                }
                v165 = (uint64_t **)*v165;
              }
              while (v165);
            }
          }
        }
LABEL_224:
        prime = (unint64_t)operator new(0x20uLL);
        v168 = prime;
        *(_QWORD *)prime = 0;
        *(_QWORD *)(prime + 8) = v160;
        *(_WORD *)(prime + 16) = v160;
        *(_QWORD *)(prime + 24) = v161;
        v169 = (float)(unint64_t)(*(_QWORD *)(v141 + 24) + 1);
        v170 = *(float *)(v141 + 32);
        if (v162 && (float)(v170 * (float)v162) >= v169)
        {
          v160 = v142;
        }
        else
        {
          v171 = (v162 & (v162 - 1)) != 0;
          if (v162 < 3)
            v171 = 1;
          v172 = v171 | (2 * v162);
          v173 = vcvtps_u32_f32(v169 / v170);
          if (v172 <= v173)
            v174 = v173;
          else
            v174 = v172;
          if (v174 == 1)
          {
            v174 = 2;
          }
          else if ((v174 & (v174 - 1)) != 0)
          {
            prime = std::__next_prime(v174);
            v174 = prime;
            v162 = *(_QWORD *)(v141 + 8);
          }
          if (v174 > v162)
            goto LABEL_237;
          if (v174 < v162)
          {
            prime = vcvtps_u32_f32((float)*(unint64_t *)(v141 + 24) / *(float *)(v141 + 32));
            if (v162 < 3
              || (v175 = (uint8x8_t)vcnt_s8((int8x8_t)v162), v175.i16[0] = vaddlv_u8(v175), v175.u32[0] > 1uLL))
            {
              prime = std::__next_prime(prime);
            }
            else
            {
              v176 = 1 << -(char)__clz(prime - 1);
              if (prime >= 2)
                prime = v176;
            }
            if (v174 <= prime)
              v174 = prime;
            if (v174 < v162)
LABEL_237:
              std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(v141, v174);
          }
          v162 = *(_QWORD *)(v141 + 8);
          if ((v162 & (v162 - 1)) != 0)
          {
            if (v162 <= v160)
              v160 %= v162;
          }
          else
          {
            v160 = ((_DWORD)v162 - 1) & v160;
          }
        }
        v177 = *(_QWORD *)v141;
        v178 = *(unint64_t **)(*(_QWORD *)v141 + 8 * v160);
        if (v178)
        {
          *(_QWORD *)v168 = *v178;
        }
        else
        {
          *(_QWORD *)v168 = *v220;
          *v220 = v168;
          *(_QWORD *)(v177 + 8 * v160) = v220;
          if (!*(_QWORD *)v168)
            goto LABEL_261;
          v179 = *(_QWORD *)(*(_QWORD *)v168 + 8);
          if ((v162 & (v162 - 1)) != 0)
          {
            if (v179 >= v162)
              v179 %= v162;
          }
          else
          {
            v179 &= v162 - 1;
          }
          v178 = (unint64_t *)(*(_QWORD *)v141 + 8 * v179);
        }
        *v178 = v168;
LABEL_261:
        ++*(_QWORD *)(v141 + 24);
LABEL_262:
        ++v143;
      }
      while (v143 < v222);
    }
    v139 = v217 + 1;
    if (v217 + 1 == v215)
      goto LABEL_264;
  }
  v45 = (FILE *)*MEMORY[0x1E0C80C10];
LABEL_63:
  fprintf(v45, "%s:%d Asset Parse: Read error\n");
LABEL_64:
  *(_QWORD *)v224 = 0;
  v12 = v233;
  if (v233)
    goto LABEL_65;
LABEL_66:
  if (v237)
  {
    v238 = v237;
    (*(void (**)(geo::codec::Allocator *, uint64_t, uint64_t))(*(_QWORD *)v240 + 40))(v240, v237, v239 - v237);
  }
  result = v241;
  if (v241)
  {
    geo::codec::Asset::~Asset(v241);
    return (geo::codec::Asset *)MEMORY[0x1A1AF4E00]();
  }
  return result;
}

void sub_19FF82F08(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)(v1 - 176));
  std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)(v1 - 144));
  std::unique_ptr<geo::codec::Asset>::~unique_ptr[abi:ne180100]((geo::codec::Asset **)(v1 - 112));
  _Unwind_Resume(a1);
}

geo::codec::MaterialSheet *geo::codec::MaterialSheet::MaterialSheet(geo::codec::MaterialSheet *this)
{
  *(_WORD *)this = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_DWORD *)this + 22) = 1065353216;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 1065353216;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 42) = 1065353216;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_DWORD *)this + 52) = 1065353216;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *((_DWORD *)this + 62) = 1065353216;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_DWORD *)this + 72) = 1065353216;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *((_DWORD *)this + 82) = 1065353216;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_DWORD *)this + 92) = 1065353216;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *((_DWORD *)this + 102) = 1065353216;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_DWORD *)this + 112) = 1065353216;
  *((_WORD *)this + 228) = 0;
  *(_OWORD *)((char *)this + 460) = 0u;
  *(_OWORD *)((char *)this + 476) = 0u;
  *((_DWORD *)this + 123) = 0;
  *((_DWORD *)this + 124) = 1065353216;
  *((_QWORD *)this + 66) = 0;
  *((_OWORD *)this + 32) = 0u;
  *((_QWORD *)this + 67) = geo::codec::Allocator::instance(this);
  return this;
}

void std::vector<std::pair<unsigned long long,geo::codec::MaterialSheet>,geo::StdAllocator<std::pair<unsigned long long,geo::codec::MaterialSheet>,geo::codec::Allocator>>::emplace_back<std::pair<unsigned long long,geo::codec::MaterialSheet>>(uint64_t *a1, geo::codec::MaterialSheet *a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;

  v5 = (_QWORD *)a1[1];
  v4 = a1[2];
  if ((unint64_t)v5 >= v4)
  {
    v7 = 0xF128CFC4A33F128DLL * (((uint64_t)v5 - *a1) >> 3);
    if (v7 + 1 > 0x76B981DAE6076BLL)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v8 = 0xF128CFC4A33F128DLL * ((uint64_t)(v4 - *a1) >> 3);
    v9 = 2 * v8;
    if (2 * v8 <= v7 + 1)
      v9 = v7 + 1;
    if (v8 >= 0x3B5CC0ED7303B5)
      v10 = 0x76B981DAE6076BLL;
    else
      v10 = v9;
    v20 = a1 + 3;
    if (v10)
    {
      v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 16))(a1[3], 552 * v10, 8);
      v12 = (_QWORD *)(v11 + 552 * v7);
      v19 = v11 + 552 * v10;
      if (v11)
      {
        *v12 = *(_QWORD *)a2;
        geo::codec::MaterialSheet::MaterialSheet((geo::codec::MaterialSheet *)(v11 + 552 * v7 + 8), (geo::codec::MaterialSheet *)((char *)a2 + 8));
        v6 = v12 + 69;
        v18 = v12 + 69;
        v13 = *a1;
        v14 = a1[1];
        if (v14 != *a1)
          goto LABEL_14;
        goto LABEL_19;
      }
    }
    else
    {
      v12 = (_QWORD *)(8 * (((uint64_t)v5 - *a1) >> 3));
      v19 = 0;
    }
    v6 = v12 + 69;
    v18 = v12 + 69;
    v13 = *a1;
    v14 = a1[1];
    if (v14 != *a1)
    {
LABEL_14:
      v15 = 0;
      do
      {
        v12[v15 / 8 - 69] = *(_QWORD *)(v14 + v15 - 552);
        geo::codec::MaterialSheet::MaterialSheet((geo::codec::MaterialSheet *)&v12[v15 / 8 - 68], (const geo::codec::MaterialSheet *)(v14 + v15 - 544));
        v15 -= 552;
      }
      while (v14 + v15 != v13);
      v16 = *a1;
      v14 = a1[1];
      v12 = (_QWORD *)((char *)v12 + v15);
      v6 = v18;
LABEL_20:
      *a1 = (uint64_t)v12;
      a1[1] = (uint64_t)v6;
      v17 = a1[2];
      a1[2] = v19;
      if (v14 == v16)
      {
        v16 = v14;
        if (!v14)
          goto LABEL_26;
      }
      else
      {
        do
        {
          geo::codec::MaterialSheet::~MaterialSheet((geo::codec::MaterialSheet *)(v14 - 544));
          v14 -= 552;
        }
        while (v14 != v16);
        if (!v16)
          goto LABEL_26;
      }
      (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v20 + 40))(*v20, v16, v17 - v16);
      goto LABEL_26;
    }
LABEL_19:
    v16 = v14;
    goto LABEL_20;
  }
  if (v5)
  {
    *v5 = *(_QWORD *)a2;
    geo::codec::MaterialSheet::MaterialSheet((geo::codec::MaterialSheet *)(v5 + 1), (geo::codec::MaterialSheet *)((char *)a2 + 8));
  }
  v6 = v5 + 69;
  a1[1] = (uint64_t)(v5 + 69);
LABEL_26:
  a1[1] = (uint64_t)v6;
}

void sub_19FF8336C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<unsigned long long,geo::codec::MaterialSheet>,geo::StdAllocator<std::pair<unsigned long long,geo::codec::MaterialSheet>,geo::codec::Allocator> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19FF83380(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_19FF83388(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  for (; v3; v3 += 552)
    geo::codec::MaterialSheet::~MaterialSheet((geo::codec::MaterialSheet *)(v2 + 8 + v3));
  std::__split_buffer<std::pair<unsigned long long,geo::codec::MaterialSheet>,geo::StdAllocator<std::pair<unsigned long long,geo::codec::MaterialSheet>,geo::codec::Allocator> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

geo::codec::AssetLodInstance *_ZNSt3__111make_sharedB8ne180100IN3geo5codec16AssetLodInstanceEJEvEENS_10shared_ptrIT_EEDpOT0_(geo::codec::AssetLodInstance **a1)
{
  char *v2;
  geo::codec::AssetLodInstance *result;

  v2 = (char *)operator new(0x1B8uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_1E42DE420;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 232) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 248) = 0u;
  *(_OWORD *)(v2 + 264) = 0u;
  *(_OWORD *)(v2 + 280) = 0u;
  *(_OWORD *)(v2 + 296) = 0u;
  *(_OWORD *)(v2 + 312) = 0u;
  *(_OWORD *)(v2 + 328) = 0u;
  *(_OWORD *)(v2 + 344) = 0u;
  *(_OWORD *)(v2 + 360) = 0u;
  *(_OWORD *)(v2 + 376) = 0u;
  *(_OWORD *)(v2 + 392) = 0u;
  *(_OWORD *)(v2 + 408) = 0u;
  *(_OWORD *)(v2 + 424) = 0u;
  result = geo::codec::AssetLodInstance::AssetLodInstance((geo::codec::AssetLodInstance *)(v2 + 24));
  *a1 = result;
  a1[1] = (geo::codec::AssetLodInstance *)v2;
  return result;
}

uint64_t std::unordered_map<unsigned short,gm::Matrix<float,4,4>,std::hash<unsigned short>,std::equal_to<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,gm::Matrix<float,4,4>>,geo::codec::Allocator>>::unordered_map[abi:ne180100](uint64_t a1)
{
  geo::codec::Allocator *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v2 = (geo::codec::Allocator *)geo::codec::Allocator::instance((geo::codec::Allocator *)a1);
  *(_QWORD *)(a1 + 16) = v2;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = geo::codec::Allocator::instance(v2);
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 1065353216;
  return a1;
}

uint64_t *std::unordered_map<unsigned short,gm::Matrix<float,4,4>,std::hash<unsigned short>,std::equal_to<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,gm::Matrix<float,4,4>>,geo::codec::Allocator>>::~unordered_map[abi:ne180100](uint64_t *a1)
{
  _QWORD *i;
  _QWORD *v3;
  uint64_t v4;

  for (i = (_QWORD *)a1[3]; i; i = v3)
  {
    v3 = (_QWORD *)*i;
    (*(void (**)(uint64_t))(*(_QWORD *)a1[4] + 40))(a1[4]);
  }
  v4 = *a1;
  *a1 = 0;
  if (v4)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[2] + 40))(a1[2], v4, 8 * a1[1]);
  return a1;
}

uint64_t *std::vector<unsigned long long,geo::StdAllocator<unsigned long long,geo::codec::Allocator>>::~vector[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v2, a1[2] - v2);
  }
  return a1;
}

uint64_t *std::vector<VertexFormat,geo::StdAllocator<VertexFormat,geo::codec::Allocator>>::~vector[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v2, a1[2] - v2);
  }
  return a1;
}

geo::codec::Asset **std::unique_ptr<geo::codec::Asset>::~unique_ptr[abi:ne180100](geo::codec::Asset **a1)
{
  geo::codec::Asset *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    geo::codec::Asset::~Asset(v2);
    MEMORY[0x1A1AF4E00]();
  }
  return a1;
}

BOOL geo::codec::AssetDecoder::decodeAssetOcclusionMeshes(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _BOOL8 v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  int v15;
  int v16;
  _BYTE *v17;
  FILE *v18;
  int v19;
  int v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  __int16 v25;
  int v26;
  int v27;
  _BYTE *v28;
  unint64_t v29;
  int v30;
  int v31;
  unint64_t v32;
  char v33;
  char v34;
  unint64_t v35;
  int v36;
  char v37;
  BOOL v38;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  FILE *v44;
  int v45;
  char v46;
  unsigned __int8 v47;
  unsigned __int16 v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  if (!a3)
    return 0;
  v50 = 0;
  v51 = 0;
  v52 = 0;
  v53 = geo::codec::Allocator::instance((geo::codec::Allocator *)a1);
  geo::ibitstream::readUInt32((uint64_t *)a1, (uint64_t)&v46);
  if (!v46)
  {
    v18 = (FILE *)*MEMORY[0x1E0C80C10];
    v19 = 570;
LABEL_50:
    fprintf(v18, "%s:%d Asset Parse: Read error\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/AssetDecoder.cpp", v19);
    return 0;
  }
  v6 = v49;
  *a2 = v49;
  if (!v6)
    return 0;
  geo::ibitstream::readFloat((uint64_t *)a1, (uint64_t)&v46);
  if (!v46)
  {
    v18 = (FILE *)*MEMORY[0x1E0C80C10];
    v19 = 575;
    goto LABEL_50;
  }
  geo::ibitstream::readFloat((uint64_t *)a1, (uint64_t)&v46);
  if (!v46)
  {
    v18 = (FILE *)*MEMORY[0x1E0C80C10];
    v19 = 576;
    goto LABEL_50;
  }
  geo::ibitstream::readFloat((uint64_t *)a1, (uint64_t)&v46);
  if (!v46)
  {
    v18 = (FILE *)*MEMORY[0x1E0C80C10];
    v19 = 577;
    goto LABEL_50;
  }
  geo::ibitstream::readFloat((uint64_t *)a1, (uint64_t)&v46);
  if (!v46)
  {
    v18 = (FILE *)*MEMORY[0x1E0C80C10];
    v19 = 579;
    goto LABEL_50;
  }
  geo::ibitstream::readFloat((uint64_t *)a1, (uint64_t)&v46);
  if (!v46)
  {
    v18 = (FILE *)*MEMORY[0x1E0C80C10];
    v19 = 580;
    goto LABEL_50;
  }
  geo::ibitstream::readFloat((uint64_t *)a1, (uint64_t)&v46);
  if (!v46)
  {
    v18 = (FILE *)*MEMORY[0x1E0C80C10];
    v19 = 581;
    goto LABEL_50;
  }
  geo::ibitstream::readByte(a1, &v46);
  if (!v46)
  {
    v18 = (FILE *)*MEMORY[0x1E0C80C10];
    v19 = 583;
    goto LABEL_50;
  }
  if (v47)
  {
    std::vector<VertexFormat,geo::StdAllocator<VertexFormat,geo::codec::Allocator>>::resize((uint64_t)&v50, v47);
    v7 = v50;
    v8 = v51;
    if (v50 != v51)
    {
      v9 = *(unsigned __int8 *)(a1 + 24);
      v10 = *(_BYTE *)(a1 + 24) != 0;
      v12 = *(_QWORD *)(a1 + 8);
      v11 = *(_QWORD *)(a1 + 16);
      v13 = *(_QWORD *)a1;
      v14 = 8 - v9;
      v15 = (1 << (8 - v9)) + 255;
      v16 = 0xFFFF << (8 - v9);
      v17 = (_BYTE *)(v50 + 3);
      while (1)
      {
        while (1)
        {
          v22 = v11 + 2;
          if (v12 < v11 + 2 + v10)
          {
            v44 = (FILE *)*MEMORY[0x1E0C80C10];
            v45 = 590;
            goto LABEL_66;
          }
          if (v9)
          {
            v23 = v11 + 1;
            if (v11 + 1 >= v12)
              v24 = 0;
            else
              v24 = *(unsigned __int8 *)(v13 + v23);
            v27 = *(unsigned __int8 *)(v13 + v11);
            *(_QWORD *)(a1 + 16) = v23;
            if (v22 >= v12)
              v26 = 0;
            else
              v26 = *(unsigned __int8 *)(v13 + v22);
            v25 = (((v24 & v16) >> v14) | ((v15 & v27) << v9));
            LOWORD(v26) = (((v26 & v16) >> v14) | ((((1 << (8 - v9)) - 1) & *(_BYTE *)(v13 + v23)) << v9));
          }
          else
          {
            v25 = *(_WORD *)(v13 + v11);
            v26 = HIBYTE(*(unsigned __int16 *)(v13 + v11));
          }
          v28 = v17 - 3;
          *(_QWORD *)(a1 + 16) = v22;
          *(_WORD *)(v17 - 3) = v25 | ((_WORD)v26 << 8);
          v29 = v11 + 3;
          if (v12 < v11 + 3 + v10)
          {
            v44 = (FILE *)*MEMORY[0x1E0C80C10];
            v45 = 591;
            goto LABEL_66;
          }
          v30 = *(unsigned __int8 *)(v13 + v22);
          if (v9)
            break;
          *(_QWORD *)(a1 + 16) = v29;
          *(v17 - 1) = v30;
          v32 = v11 + 4;
          if (v12 < v11 + 4 + v10)
            goto LABEL_64;
          v33 = *(_BYTE *)(v13 + v29);
          *(_QWORD *)(a1 + 16) = v32;
          *v17 = v33;
          v11 += 5;
          if (v12 < v11 + v10)
            goto LABEL_65;
          v34 = *(_BYTE *)(v13 + v32);
          *(_QWORD *)(a1 + 16) = v11;
          v17[1] = v34;
          v17 += 8;
          if (v28 + 8 == (_BYTE *)v8)
            goto LABEL_54;
        }
        if (v29 >= v12)
          v31 = 0;
        else
          v31 = *(unsigned __int8 *)(v13 + v29);
        *(_QWORD *)(a1 + 16) = v29;
        *(v17 - 1) = ((v31 & v16) >> v14) | ((v15 & v30) << v9);
        v35 = v11 + 4;
        if (v12 < v11 + 4 + v10)
        {
LABEL_64:
          v44 = (FILE *)*MEMORY[0x1E0C80C10];
          v45 = 592;
          goto LABEL_66;
        }
        v36 = v35 >= v12 ? 0 : *(unsigned __int8 *)(v13 + v35);
        v37 = ((v36 & v16) >> v14) | ((((1 << (8 - v9)) - 1) & *(_BYTE *)(v13 + v29)) << v9);
        *(_QWORD *)(a1 + 16) = v35;
        *v17 = v37;
        v11 += 5;
        if (v12 < v11 + v10)
          break;
        if (v11 < v12)
          v20 = *(unsigned __int8 *)(v13 + v11);
        else
          v20 = 0;
        v21 = ((v20 & v16) >> v14) | ((((1 << (8 - v9)) - 1) & *(_BYTE *)(v13 + v35)) << v9);
        *(_QWORD *)(a1 + 16) = v11;
        v17[1] = v21;
        v17 += 8;
        if (v28 + 8 == (_BYTE *)v8)
          goto LABEL_54;
      }
LABEL_65:
      v44 = (FILE *)*MEMORY[0x1E0C80C10];
      v45 = 593;
      goto LABEL_66;
    }
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
LABEL_54:
  geo::ibitstream::readUInt16((uint64_t)&v46, (uint64_t *)a1);
  if (v46)
  {
    v40 = v48;
    v41 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3);
    std::vector<geo::codec::Mesh>::resize((char **)a3, v41 + v48);
    if ((_DWORD)v40)
    {
      v38 = 0;
      v42 = 0;
      v43 = 152 * v41;
      while ((buildAssetMesh((geo::ibitstream *)a1, 0, *(_QWORD *)a3 + v43, v7, v8) & 1) != 0)
      {
        v38 = ++v42 >= v40;
        v43 += 152;
        if (v40 == v42)
          goto LABEL_59;
      }
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d Asset Parse: Failed to decode asset mesh\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/AssetDecoder.cpp", 601);
    }
    else
    {
LABEL_59:
      v38 = 1;
    }
    goto LABEL_67;
  }
  v44 = (FILE *)*MEMORY[0x1E0C80C10];
  v45 = 596;
LABEL_66:
  fprintf(v44, "%s:%d Asset Parse: Read error\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/AssetDecoder.cpp", v45);
  v38 = 0;
LABEL_67:
  if (v7)
  {
    v51 = v7;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v53 + 40))(v53, v7, v52 - v7);
  }
  return v38;
}

void sub_19FF83B24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::vector<VertexFormat,geo::StdAllocator<VertexFormat,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19FF83B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::vector<VertexFormat,geo::StdAllocator<VertexFormat,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19FF83B4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::vector<VertexFormat,geo::StdAllocator<VertexFormat,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19FF83B60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::vector<VertexFormat,geo::StdAllocator<VertexFormat,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19FF83B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::vector<VertexFormat,geo::StdAllocator<VertexFormat,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19FF83B88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::vector<VertexFormat,geo::StdAllocator<VertexFormat,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19FF83B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::vector<VertexFormat,geo::StdAllocator<VertexFormat,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19FF83BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::vector<VertexFormat,geo::StdAllocator<VertexFormat,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19FF83BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::vector<VertexFormat,geo::StdAllocator<VertexFormat,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19FF83BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::vector<VertexFormat,geo::StdAllocator<VertexFormat,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::vector<geo::codec::Mesh>::resize(char **a1, unint64_t a2)
{
  char *v4;
  geo::codec::Mesh *v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  char *v25;
  geo::codec::Mesh *v26;
  char *v27;
  uint64_t v28;

  v4 = *a1;
  v5 = (geo::codec::Mesh *)a1[1];
  v6 = 0x86BCA1AF286BCA1BLL * ((v5 - (geo::codec::Mesh *)*a1) >> 3);
  v7 = a2 - v6;
  if (a2 > v6)
  {
    v8 = a1[2];
    if (0x86BCA1AF286BCA1BLL * ((v8 - (char *)v5) >> 3) >= v7)
    {
      v27 = (char *)v5 + 152 * v7;
      v28 = 152 * a2 - 8 * ((v5 - (geo::codec::Mesh *)*a1) >> 3);
      do
      {
        std::allocator<geo::codec::Mesh>::construct[abi:ne180100]<geo::codec::Mesh>((uint64_t)v5);
        v5 = (geo::codec::Mesh *)((char *)v5 + 152);
        v28 -= 152;
      }
      while (v28);
      a1[1] = v27;
      return;
    }
    if (a2 > 0x1AF286BCA1AF286)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v9 = 0x86BCA1AF286BCA1BLL * ((v8 - v4) >> 3);
    v10 = 2 * v9;
    if (2 * v9 <= a2)
      v10 = a2;
    if (v9 >= 0xD79435E50D7943)
      v11 = 0x1AF286BCA1AF286;
    else
      v11 = v10;
    if (v11 > 0x1AF286BCA1AF286)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v12 = (char *)operator new(152 * v11);
    v13 = 152 * v6;
    v14 = &v12[152 * v6];
    v15 = &v12[152 * a2];
    v16 = 152 * a2 - v13;
    v17 = (uint64_t)v14;
    do
    {
      std::allocator<geo::codec::Mesh>::construct[abi:ne180100]<geo::codec::Mesh>(v17);
      v17 += 152;
      v16 -= 152;
    }
    while (v16);
    v18 = &v12[152 * v11];
    v19 = *a1;
    v20 = a1[1];
    if (v20 == *a1)
    {
      *a1 = v14;
      a1[1] = v15;
      a1[2] = v18;
      if (!v20)
        return;
    }
    else
    {
      v21 = 0;
      do
      {
        v22 = &v14[v21];
        v23 = &v20[v21];
        *((_QWORD *)v22 - 19) = 0;
        *((_QWORD *)v22 - 18) = 0;
        *((_QWORD *)v22 - 17) = 0;
        *((_QWORD *)v22 - 16) = *(_QWORD *)&v20[v21 - 128];
        *(_OWORD *)(v22 - 152) = *(_OWORD *)&v20[v21 - 152];
        *((_QWORD *)v22 - 17) = *(_QWORD *)&v20[v21 - 136];
        *((_QWORD *)v23 - 19) = 0;
        *((_QWORD *)v23 - 18) = 0;
        *((_QWORD *)v23 - 17) = 0;
        *((_QWORD *)v22 - 15) = 0;
        *((_QWORD *)v22 - 14) = 0;
        *((_QWORD *)v22 - 13) = 0;
        *((_QWORD *)v22 - 12) = *(_QWORD *)&v20[v21 - 96];
        *(_OWORD *)(v22 - 120) = *(_OWORD *)&v20[v21 - 120];
        *((_QWORD *)v22 - 13) = *(_QWORD *)&v20[v21 - 104];
        *((_QWORD *)v23 - 15) = 0;
        *((_QWORD *)v23 - 14) = 0;
        *((_QWORD *)v23 - 13) = 0;
        *((_QWORD *)v22 - 11) = 0;
        *((_QWORD *)v22 - 10) = 0;
        *((_QWORD *)v22 - 9) = 0;
        *((_QWORD *)v22 - 8) = *(_QWORD *)&v20[v21 - 64];
        *(_OWORD *)(v22 - 88) = *(_OWORD *)&v20[v21 - 88];
        *((_QWORD *)v22 - 9) = *(_QWORD *)&v20[v21 - 72];
        *((_QWORD *)v23 - 11) = 0;
        *((_QWORD *)v23 - 10) = 0;
        *((_QWORD *)v23 - 9) = 0;
        *((_QWORD *)v22 - 7) = 0;
        *((_QWORD *)v22 - 6) = 0;
        *((_QWORD *)v22 - 5) = 0;
        *((_QWORD *)v22 - 4) = *(_QWORD *)&v20[v21 - 32];
        *(_OWORD *)(v22 - 56) = *(_OWORD *)&v20[v21 - 56];
        *((_QWORD *)v22 - 5) = *(_QWORD *)&v20[v21 - 40];
        *((_QWORD *)v23 - 7) = 0;
        *((_QWORD *)v23 - 6) = 0;
        *((_QWORD *)v23 - 5) = 0;
        v24 = *(_OWORD *)&v20[v21 - 24];
        *((_QWORD *)v22 - 1) = *(_QWORD *)&v20[v21 - 8];
        *(_OWORD *)(v22 - 24) = v24;
        v21 -= 152;
      }
      while (&v20[v21] != v19);
      v20 = *a1;
      v25 = a1[1];
      *a1 = &v14[v21];
      a1[1] = v15;
      a1[2] = v18;
      while (v25 != v20)
        geo::codec::Mesh::~Mesh((geo::codec::Mesh *)(v25 - 152));
      if (!v20)
        return;
    }
    operator delete(v20);
    return;
  }
  if (a2 < v6)
  {
    v26 = (geo::codec::Mesh *)&v4[152 * a2];
    while (v5 != v26)
    {
      v5 = (geo::codec::Mesh *)((char *)v5 - 152);
      geo::codec::Mesh::~Mesh(v5);
    }
    a1[1] = (char *)v26;
  }
}

void std::vector<std::shared_ptr<geo::codec::AssetLodInstance>,geo::StdAllocator<std::shared_ptr<geo::codec::AssetLodInstance>,geo::codec::Allocator>>::emplace_back<std::unique_ptr<geo::codec::AssetLodInstance>>(uint64_t **a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  __int128 v25;
  uint64_t *v26;
  uint64_t *v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  _QWORD *v33;

  v5 = a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 < v4)
  {
    if (v5)
    {
      v6 = *a2;
      *v5 = *a2;
      if (v6)
      {
        v7 = (_QWORD *)operator new();
        v8 = *a2;
        *v7 = &off_1E42E7608;
        v7[1] = 0;
        v7[2] = 0;
        v7[3] = v8;
      }
      else
      {
        v7 = 0;
      }
      v5[1] = (uint64_t)v7;
      *a2 = 0;
    }
    v22 = v5 + 2;
    a1[1] = v22;
    goto LABEL_36;
  }
  v9 = ((char *)v5 - (char *)*a1) >> 4;
  if ((unint64_t)(v9 + 1) >> 60)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  v10 = v4 - (_QWORD)*a1;
  v11 = v10 >> 3;
  if (v10 >> 3 <= (unint64_t)(v9 + 1))
    v11 = v9 + 1;
  v12 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0;
  v13 = 0xFFFFFFFFFFFFFFFLL;
  if (!v12)
    v13 = v11;
  v33 = a1 + 3;
  if (v13)
  {
    v14 = 16 * v13;
    v15 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a1[3] + 16))(a1[3], 16 * v13, 8);
    v16 = (uint64_t *)(v15 + 16 * v9);
    v17 = v15 + v14;
    if (v15)
    {
      v18 = v15;
      v19 = *a2;
      *v16 = *a2;
      if (v19)
      {
        v20 = (_QWORD *)operator new();
        v21 = *a2;
        *v20 = &off_1E42E7608;
        v20[1] = 0;
        v20[2] = 0;
        v20[3] = v21;
      }
      else
      {
        v20 = 0;
      }
      *(_QWORD *)(v18 + 16 * v9 + 8) = v20;
      *a2 = 0;
      v22 = v16 + 2;
      v24 = *a1;
      v23 = a1[1];
      if (v23 != *a1)
        goto LABEL_22;
LABEL_24:
      v26 = v23;
      goto LABEL_25;
    }
  }
  else
  {
    v17 = 0;
    v16 = (uint64_t *)(16 * v9);
  }
  v22 = v16 + 2;
  v24 = *a1;
  v23 = a1[1];
  if (v23 == *a1)
    goto LABEL_24;
  do
  {
LABEL_22:
    v25 = *((_OWORD *)v23 - 1);
    v23 -= 2;
    *((_OWORD *)v16 - 1) = v25;
    v16 -= 2;
    *v23 = 0;
    v23[1] = 0;
  }
  while (v23 != v24);
  v26 = *a1;
  v23 = a1[1];
LABEL_25:
  *a1 = v16;
  a1[1] = v22;
  v27 = a1[2];
  a1[2] = (uint64_t *)v17;
  v32 = v27;
  if (v23 == v26)
  {
    if (!v23)
      goto LABEL_36;
    goto LABEL_35;
  }
  do
  {
    v31 = v23 - 2;
    v28 = (std::__shared_weak_count *)*(v23 - 1);
    if (v28)
    {
      p_shared_owners = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldaxr(p_shared_owners);
      while (__stlxr(v30 - 1, p_shared_owners));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    v23 = v31;
  }
  while (v31 != v26);
  v23 = v26;
  if (v26)
LABEL_35:
    (*(void (**)(_QWORD, uint64_t *, int64_t))(*(_QWORD *)*v33 + 40))(*v33, v23, (char *)v32 - (char *)v23);
LABEL_36:
  a1[1] = v22;
}

void sub_19FF84118(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<geo::codec::AssetLodInstance>,geo::StdAllocator<std::shared_ptr<geo::codec::AssetLodInstance>,geo::codec::Allocator> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19FF8412C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

geo::codec::AssetLodInstance **std::unique_ptr<geo::codec::AssetLodInstance>::~unique_ptr[abi:ne180100](geo::codec::AssetLodInstance **a1)
{
  geo::codec::AssetLodInstance *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    geo::codec::AssetLodInstance::~AssetLodInstance(v2);
    MEMORY[0x1A1AF4E00]();
  }
  return a1;
}

uint64_t std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>::reserve(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  __int128 *v14;
  uint64_t v15;
  __int128 v16;
  int v17;
  uint64_t v18;

  if (a2 > (uint64_t)(*(_QWORD *)(result + 16) - *(_QWORD *)result) >> 2)
  {
    v2 = result;
    v3 = *(_QWORD *)(result + 8) - *(_QWORD *)result;
    v4 = 4 * a2;
    result = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(result + 24) + 16))(*(_QWORD *)(result + 24), 4 * a2, 4);
    v5 = result + (v3 & 0xFFFFFFFFFFFFFFFCLL);
    v6 = *(_QWORD *)v2;
    v7 = *(_QWORD *)(v2 + 8);
    v8 = v5;
    if (v7 != *(_QWORD *)v2)
    {
      v9 = v7 - *(_QWORD *)v2 - 4;
      if (v9 >= 0x2C)
      {
        v8 = result + (v3 & 0xFFFFFFFFFFFFFFFCLL);
        if (v7 - v8 >= 0x20)
        {
          v10 = (v9 >> 2) + 1;
          v11 = 4 * (v10 & 0x7FFFFFFFFFFFFFF8);
          v12 = v7 - v11;
          v8 = v5 - v11;
          v13 = (_OWORD *)(result + 4 * (v3 >> 2) - 16);
          v14 = (__int128 *)(v7 - 16);
          v15 = v10 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v16 = *v14;
            *(v13 - 1) = *(v14 - 1);
            *v13 = v16;
            v13 -= 2;
            v14 -= 2;
            v15 -= 8;
          }
          while (v15);
          v7 = v12;
          if (v10 == (v10 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_10;
        }
      }
      else
      {
        v8 = result + (v3 & 0xFFFFFFFFFFFFFFFCLL);
      }
      do
      {
        v17 = *(_DWORD *)(v7 - 4);
        v7 -= 4;
        *(_DWORD *)(v8 - 4) = v17;
        v8 -= 4;
      }
      while (v7 != v6);
    }
LABEL_10:
    *(_QWORD *)v2 = v8;
    *(_QWORD *)(v2 + 8) = v5;
    v18 = *(_QWORD *)(v2 + 16);
    *(_QWORD *)(v2 + 16) = result + v4;
    if (v6)
      return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v2 + 24) + 40))(*(_QWORD *)(v2 + 24), v6, v18 - v6);
  }
  return result;
}

uint64_t *std::vector<gm::Matrix<float,3,1>,geo::StdAllocator<gm::Matrix<float,3,1>,geo::codec::Allocator>>::vector(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = geo::codec::Allocator::instance((geo::codec::Allocator *)a1);
  a1[3] = v4;
  if (a2)
  {
    v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, 12 * a2, 4);
    *a1 = v5;
    a1[1] = v5 + 12 * a2;
    a1[2] = v5 + 12 * a2;
  }
  return a1;
}

void sub_19FF84318(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  if (*v1)
  {
    v1[1] = v3;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1[3] + 40))(v1[3], v3, v1[2] - v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<gm::Matrix<float,3,1>,geo::StdAllocator<gm::Matrix<float,3,1>,geo::codec::Allocator>>::~vector[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v2, a1[2] - v2);
  }
  return a1;
}

uint64_t *std::vector<gm::Matrix<float,2,1>,geo::StdAllocator<gm::Matrix<float,2,1>,geo::codec::Allocator>>::vector(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = geo::codec::Allocator::instance((geo::codec::Allocator *)a1);
  a1[3] = v4;
  if (a2)
  {
    v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, 8 * a2, 4);
    *a1 = v5;
    a1[1] = v5 + 8 * a2;
    a1[2] = v5 + 8 * a2;
  }
  return a1;
}

void sub_19FF843F8(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  if (*v1)
  {
    v1[1] = v3;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1[3] + 40))(v1[3], v3, v1[2] - v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<gm::Matrix<float,2,1>,geo::StdAllocator<gm::Matrix<float,2,1>,geo::codec::Allocator>>::~vector[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v2, a1[2] - v2);
  }
  return a1;
}

void std::vector<std::unordered_map<unsigned short,unsigned long long>>::resize(void **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;
  void *v30;
  char *v31;
  char *v32;
  _QWORD *v33;
  _QWORD *v34;
  void *v35;
  void *v36;

  v5 = (char *)*a1;
  v4 = (char *)a1[1];
  v6 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - (_BYTE *)*a1) >> 3);
  v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 < v6)
    {
      v26 = &v5[40 * a2];
      while (v4 != v26)
      {
        v27 = (_QWORD *)*((_QWORD *)v4 - 3);
        if (v27)
        {
          do
          {
            v28 = (_QWORD *)*v27;
            operator delete(v27);
            v27 = v28;
          }
          while (v28);
        }
        v30 = (void *)*((_QWORD *)v4 - 5);
        v4 -= 40;
        v29 = v30;
        *(_QWORD *)v4 = 0;
        if (v30)
          operator delete(v29);
      }
      a1[1] = v26;
    }
  }
  else
  {
    v8 = a1[2];
    if (0xCCCCCCCCCCCCCCCDLL * ((v8 - v4) >> 3) >= v7)
    {
      v31 = &v4[40 * v7];
      do
      {
        *(_OWORD *)v4 = 0uLL;
        *((_OWORD *)v4 + 1) = 0uLL;
        *((_DWORD *)v4 + 8) = 1065353216;
        v4 += 40;
      }
      while (v4 != v31);
      a1[1] = v31;
    }
    else
    {
      if (a2 > 0x666666666666666)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v9 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - v5) >> 3);
      v10 = 2 * v9;
      if (2 * v9 <= a2)
        v10 = a2;
      if (v9 >= 0x333333333333333)
        v11 = 0x666666666666666;
      else
        v11 = v10;
      if (v11 > 0x666666666666666)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v12 = (char *)operator new(40 * v11);
      v13 = &v12[40 * v6];
      v14 = &v12[40 * a2];
      v15 = v13;
      do
      {
        *(_OWORD *)v15 = 0uLL;
        *((_OWORD *)v15 + 1) = 0uLL;
        *((_DWORD *)v15 + 8) = 1065353216;
        v15 += 40;
      }
      while (v15 != v14);
      v16 = &v12[40 * v11];
      if (v4 == v5)
      {
        *a1 = v13;
        a1[1] = v14;
        a1[2] = v16;
      }
      else
      {
        v17 = 0;
        do
        {
          v19 = &v13[v17];
          v20 = &v4[v17];
          v21 = *(_QWORD *)&v4[v17 - 40];
          *((_QWORD *)v20 - 5) = 0;
          *((_QWORD *)v19 - 5) = v21;
          v22 = *(_QWORD *)&v4[v17 - 32];
          *((_QWORD *)v19 - 4) = v22;
          *((_QWORD *)v20 - 4) = 0;
          v23 = *(_QWORD *)&v4[v17 - 24];
          *((_QWORD *)v19 - 3) = v23;
          v24 = (uint64_t)&v13[v17 - 24];
          v25 = *(_QWORD *)&v4[v17 - 16];
          *(_QWORD *)(v24 + 8) = v25;
          *(_DWORD *)(v24 + 16) = *(_DWORD *)&v4[v17 - 8];
          if (v25)
          {
            v18 = *(_QWORD *)(v23 + 8);
            if ((v22 & (v22 - 1)) != 0)
            {
              if (v18 >= v22)
                v18 %= v22;
            }
            else
            {
              v18 &= v22 - 1;
            }
            *(_QWORD *)(v21 + 8 * v18) = v24;
            *(_QWORD *)&v4[v17 - 24] = 0;
            *(_QWORD *)&v4[v17 - 16] = 0;
          }
          v17 -= 40;
        }
        while (&v4[v17] != v5);
        v4 = (char *)*a1;
        v32 = (char *)a1[1];
        *a1 = &v13[v17];
        a1[1] = v14;
        a1[2] = v16;
        while (v32 != v4)
        {
          v33 = (_QWORD *)*((_QWORD *)v32 - 3);
          if (v33)
          {
            do
            {
              v34 = (_QWORD *)*v33;
              operator delete(v33);
              v33 = v34;
            }
            while (v34);
          }
          v36 = (void *)*((_QWORD *)v32 - 5);
          v32 -= 40;
          v35 = v36;
          *(_QWORD *)v32 = 0;
          if (v36)
            operator delete(v35);
        }
      }
      if (v4)
        operator delete(v4);
    }
  }
}

void std::unordered_map<unsigned short,unsigned long long>::reserve[abi:ne180100](uint64_t a1, unint64_t a2)
{
  unint64_t prime;
  int8x8_t v4;
  size_t v5;
  uint8x8_t v6;
  uint64_t v7;
  size_t v8;

  prime = vcvtps_u32_f32((float)a2 / *(float *)(a1 + 32));
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_18;
  if (prime >= *(_QWORD *)&v4)
    return;
  v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
  if (*(_QWORD *)&v4 >= 3uLL)
  {
    v6 = (uint8x8_t)vcnt_s8(v4);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] <= 1uLL)
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
      if (prime <= v5)
        prime = v5;
      if (prime >= *(_QWORD *)&v4)
        return;
LABEL_18:
      std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a1, prime);
      return;
    }
  }
  v8 = std::__next_prime(v5);
  if (prime <= v8)
    prime = v8;
  if (prime < *(_QWORD *)&v4)
    goto LABEL_18;
}

uint64_t std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::push_back[abi:ne180100](uint64_t result, _WORD *a2)
{
  uint64_t v3;
  _WORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _WORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _WORD *v20;
  _OWORD *v21;
  __int128 *v22;
  unint64_t v23;
  __int128 v24;
  __int16 v25;
  uint64_t v26;

  v3 = result;
  v4 = *(_WORD **)(result + 8);
  v5 = *(_QWORD *)(result + 16);
  if ((unint64_t)v4 < v5)
  {
    if (v4)
      *v4 = *a2;
    *(_QWORD *)(result + 8) = v4 + 1;
    return result;
  }
  v6 = (uint64_t)v4 - *(_QWORD *)result;
  if (v6 <= -3)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  v7 = v6 >> 1;
  v8 = v5 - *(_QWORD *)result;
  if (v8 <= (v6 >> 1) + 1)
    v9 = v7 + 1;
  else
    v9 = v8;
  if (v8 >= 0x7FFFFFFFFFFFFFFELL)
    v9 = 0x7FFFFFFFFFFFFFFFLL;
  if (v9)
  {
    v10 = 2 * v9;
    result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(result + 24) + 16))(*(_QWORD *)(result + 24), 2 * v9, 2);
    v11 = (_WORD *)(result + 2 * v7);
    v9 = result + v10;
    if (result)
      *v11 = *a2;
    v12 = (uint64_t)(v11 + 1);
    v13 = *(_QWORD *)v3;
    v14 = *(_QWORD *)(v3 + 8);
    v15 = v14 - *(_QWORD *)v3;
    if (v14 != *(_QWORD *)v3)
      goto LABEL_15;
LABEL_22:
    v20 = v11;
    goto LABEL_25;
  }
  v11 = (_WORD *)(2 * v7);
  v12 = 2 * v7 + 2;
  v13 = *(_QWORD *)result;
  v14 = *(_QWORD *)(result + 8);
  v15 = v14 - *(_QWORD *)result;
  if (v14 == *(_QWORD *)result)
    goto LABEL_22;
LABEL_15:
  v16 = v15 - 2;
  if (v16 < 0x1E || (unint64_t)(v14 - (_QWORD)v11) < 0x20)
  {
    v19 = v14;
    v20 = v11;
  }
  else
  {
    v17 = (v16 >> 1) + 1;
    v18 = 2 * (v17 & 0xFFFFFFFFFFFFFFF0);
    v19 = v14 - v18;
    v20 = &v11[v18 / 0xFFFFFFFFFFFFFFFELL];
    v21 = v11 - 8;
    v22 = (__int128 *)(v14 - 16);
    v23 = v17 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v24 = *v22;
      *(v21 - 1) = *(v22 - 1);
      *v21 = v24;
      v21 -= 2;
      v22 -= 2;
      v23 -= 16;
    }
    while (v23);
    if (v17 == (v17 & 0xFFFFFFFFFFFFFFF0))
      goto LABEL_25;
  }
  do
  {
    v25 = *(_WORD *)(v19 - 2);
    v19 -= 2;
    *--v20 = v25;
  }
  while (v19 != v13);
LABEL_25:
  *(_QWORD *)v3 = v20;
  *(_QWORD *)(v3 + 8) = v12;
  v26 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = v9;
  if (v13)
    result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 24) + 40))(*(_QWORD *)(v3 + 24), v13, v26 - v13);
  *(_QWORD *)(v3 + 8) = v12;
  return result;
}

uint64_t *std::vector<std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>,geo::StdAllocator<std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>,geo::codec::Allocator>>::push_back[abi:ne180100](uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  BOOL v24;
  uint64_t v25;

  v3 = result;
  v5 = result[1];
  v4 = result[2];
  if (v5 < v4)
  {
    if (v5)
      result = std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::vector((uint64_t *)result[1], a2);
    v6 = v5 + 32;
    v3[1] = v5 + 32;
    goto LABEL_27;
  }
  v7 = result + 3;
  v8 = (uint64_t)(v5 - *result) >> 5;
  if ((unint64_t)(v8 + 1) >> 59)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  v9 = v4 - *result;
  v10 = v9 >> 4;
  if (v9 >> 4 <= (unint64_t)(v8 + 1))
    v10 = v8 + 1;
  v11 = (unint64_t)v9 >= 0x7FFFFFFFFFFFFFE0;
  v12 = 0x7FFFFFFFFFFFFFFLL;
  if (!v11)
    v12 = v10;
  if (v12)
  {
    v13 = 32 * v12;
    v14 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v7 + 16))(*v7, 32 * v12, 8);
    result = (uint64_t *)(v14 + 32 * v8);
    v15 = v14 + v13;
    if (v14)
      result = std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::vector(result, a2);
    v6 = (uint64_t)(result + 4);
    v17 = (uint64_t *)*v3;
    v16 = (uint64_t *)v3[1];
    if (v16 != (uint64_t *)*v3)
      goto LABEL_14;
  }
  else
  {
    v15 = 0;
    result = (uint64_t *)(32 * v8);
    v6 = 32 * v8 + 32;
    v17 = (uint64_t *)*v3;
    v16 = (uint64_t *)v3[1];
    if (v16 != (uint64_t *)*v3)
    {
LABEL_14:
      v18 = 0;
      do
      {
        v19 = &result[v18];
        v20 = &v16[v18];
        *(v19 - 4) = 0;
        *(v19 - 3) = 0;
        *(v19 - 2) = 0;
        *(v19 - 1) = v16[v18 - 1];
        *((_OWORD *)v19 - 2) = *(_OWORD *)&v16[v18 - 4];
        *(v19 - 2) = v16[v18 - 2];
        *(v20 - 4) = 0;
        *(v20 - 3) = 0;
        *(v20 - 2) = 0;
        v18 -= 4;
      }
      while (&v16[v18] != v17);
      v21 = (uint64_t *)*v3;
      v16 = (uint64_t *)v3[1];
      result = (uint64_t *)((char *)result + v18 * 8);
      goto LABEL_19;
    }
  }
  v21 = v16;
LABEL_19:
  *v3 = (uint64_t)result;
  v3[1] = v6;
  v22 = v3[2];
  v3[2] = v15;
  if (v16 != v21)
  {
    v23 = v16 - 4;
    do
    {
      v25 = *v23;
      if (*v23)
      {
        v23[1] = v25;
        result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v23[3] + 40))(v23[3], v25, v23[2] - v25);
      }
      v24 = v23 == v21;
      v23 -= 4;
    }
    while (!v24);
    v16 = v21;
  }
  if (v16)
    result = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t *, uint64_t))(*(_QWORD *)*v7 + 40))(*v7, v16, v22 - (_QWORD)v16);
LABEL_27:
  v3[1] = v6;
  return result;
}

void sub_19FF84B58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>,geo::StdAllocator<std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>,geo::codec::Allocator> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19FF84B70(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t *std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::~vector[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v2, a1[2] - v2);
  }
  return a1;
}

uint64_t std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::reserve(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  __int128 *v14;
  unint64_t v15;
  __int128 v16;
  __int16 v17;
  uint64_t v18;

  if (a2 > (uint64_t)(*(_QWORD *)(result + 16) - *(_QWORD *)result) >> 1)
  {
    v2 = result;
    if ((a2 & 0x8000000000000000) != 0)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v3 = *(_QWORD *)(result + 8) - *(_QWORD *)result;
    v4 = 2 * a2;
    result = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(result + 24) + 16))(*(_QWORD *)(result + 24), 2 * a2, 2);
    v5 = result + (v3 & 0xFFFFFFFFFFFFFFFELL);
    v6 = *(_QWORD *)v2;
    v7 = *(_QWORD *)(v2 + 8);
    v8 = v5;
    if (v7 == *(_QWORD *)v2)
      goto LABEL_11;
    v9 = v7 - *(_QWORD *)v2 - 2;
    if (v9 >= 0x1E)
    {
      v8 = result + (v3 & 0xFFFFFFFFFFFFFFFELL);
      if (v7 - (v3 & 0xFFFFFFFFFFFFFFFELL) - result >= 0x20)
      {
        v10 = (v9 >> 1) + 1;
        v11 = 2 * (v10 & 0xFFFFFFFFFFFFFFF0);
        v12 = v7 - v11;
        v8 = v5 - v11;
        v13 = (_OWORD *)(result + 2 * (v3 >> 1) - 16);
        v14 = (__int128 *)(v7 - 16);
        v15 = v10 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v16 = *v14;
          *(v13 - 1) = *(v14 - 1);
          *v13 = v16;
          v13 -= 2;
          v14 -= 2;
          v15 -= 16;
        }
        while (v15);
        v7 = v12;
        if (v10 == (v10 & 0xFFFFFFFFFFFFFFF0))
          goto LABEL_11;
      }
    }
    else
    {
      v8 = result + (v3 & 0xFFFFFFFFFFFFFFFELL);
    }
    do
    {
      v17 = *(_WORD *)(v7 - 2);
      v7 -= 2;
      *(_WORD *)(v8 - 2) = v17;
      v8 -= 2;
    }
    while (v7 != v6);
LABEL_11:
    *(_QWORD *)v2 = v8;
    *(_QWORD *)(v2 + 8) = v5;
    v18 = *(_QWORD *)(v2 + 16);
    *(_QWORD *)(v2 + 16) = result + v4;
    if (v6)
      return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v2 + 24) + 40))(*(_QWORD *)(v2 + 24), v6, v18 - v6);
  }
  return result;
}

uint64_t geo::codec::AssetDecoder::applyTransforms(uint64_t result, uint64_t *a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  uint64_t ***v14;
  uint64_t **v15;
  unint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  float *v42;
  float v43;
  float v44;
  float v45;
  unint64_t v46;
  uint64_t *v48;

  v5 = *(_QWORD *)result;
  v4 = *(_QWORD *)(result + 8);
  if (v4 != *(_QWORD *)result)
  {
    v7 = a4[1];
    if (v7)
    {
      v8 = a3;
      v9 = a2;
      v10 = (uint64_t *)result;
      v11 = 0;
      v48 = (uint64_t *)result;
LABEL_4:
      v12 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
      v12.i16[0] = vaddlv_u8(v12);
      if (v12.u32[0] > 1uLL)
      {
        v13 = (unsigned __int16)v11;
        if (v7 <= (unsigned __int16)v11)
          v13 = (unsigned __int16)v11 % v7;
      }
      else
      {
        v13 = (unsigned __int16)v11 & (v7 + 0xFFFF);
      }
      v14 = *(uint64_t ****)(*a4 + 8 * v13);
      if (v14)
      {
        v15 = *v14;
        if (*v14)
        {
          v16 = v7 - 1;
          if (v12.u32[0] < 2uLL)
          {
            while (1)
            {
              v17 = v15[1];
              if (v17 == (uint64_t *)(unsigned __int16)v11)
              {
                if (*((unsigned __int16 *)v15 + 8) == (unsigned __int16)v11)
                  goto LABEL_24;
              }
              else if (((unint64_t)v17 & v16) != v13)
              {
                goto LABEL_64;
              }
              v15 = (uint64_t **)*v15;
              if (!v15)
                goto LABEL_64;
            }
          }
          do
          {
            v18 = (unint64_t)v15[1];
            if (v18 == (unsigned __int16)v11)
            {
              if (*((unsigned __int16 *)v15 + 8) == (unsigned __int16)v11)
              {
LABEL_24:
                if (v12.u32[0] > 1uLL)
                {
                  v19 = (unsigned __int16)v11;
                  if (v7 <= (unsigned __int16)v11)
                    v19 = (unsigned __int16)v11 % v7;
                }
                else
                {
                  v19 = (unsigned __int16)v11 & (v7 + 0xFFFF);
                }
                v20 = *(uint64_t ***)(*a4 + 8 * v19);
                if (!v20 || (v21 = *v20) == 0)
LABEL_68:
                  std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
                if (v12.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v22 = v21[1];
                    if (v22 == (unsigned __int16)v11)
                    {
                      if (*((unsigned __int16 *)v21 + 8) == (unsigned __int16)v11)
                        goto LABEL_36;
                    }
                    else if ((v22 & v16) != v19)
                    {
                      goto LABEL_68;
                    }
                    v21 = (uint64_t *)*v21;
                    if (!v21)
                      goto LABEL_68;
                  }
                }
                while (1)
                {
                  v34 = v21[1];
                  if (v34 == (unsigned __int16)v11)
                  {
                    if (*((unsigned __int16 *)v21 + 8) == (unsigned __int16)v11)
                    {
LABEL_36:
                      v24 = *v8;
                      v23 = v8[1];
                      result = geo::codec::Allocator::instance((geo::codec::Allocator *)result);
                      v25 = result;
                      if (v23 == v24)
                      {
                        v32 = *(unsigned int *)(v5 + 152 * v11 + 148);
                        if ((_DWORD)v32)
                        {
                          v30 = 0;
                          v33 = 0;
                          goto LABEL_56;
                        }
                      }
                      else
                      {
                        if (v23 - v24 < 0)
                          std::vector<double>::__throw_length_error[abi:ne180100]();
                        v26 = 0xAAAAAAAAAAAAAAABLL * ((v23 - v24) >> 2);
                        v27 = (v26 - 1) >> 6;
                        v28 = 8 * (v27 + 1);
                        v29 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v28, 8);
                        v30 = v29;
                        v46 = v27 + 1;
                        if (v26 >= 0x41)
                          v31 = (v26 - 1) >> 6;
                        else
                          v31 = 0;
                        v29[v31] = 0;
                        if (v26 >= 0x40)
                          bzero(v29, 8 * (v26 >> 6));
                        if ((v26 & 0x3F) != 0)
                          v30[v26 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v26 & 0x3F));
                        v32 = *(unsigned int *)(v5 + 152 * v11 + 148);
                        v9 = a2;
                        if ((_DWORD)v32)
                        {
                          v10 = v48;
                          v8 = a3;
                          v33 = v46;
LABEL_56:
                          v35 = *(_DWORD *)(v5 + 152 * v11 + 144);
                          v36 = *v9;
                          v37 = *v8;
                          do
                          {
                            v38 = *(unsigned __int16 *)(v36 + 2 * v35);
                            v39 = v38 >> 6;
                            v40 = 1 << v38;
                            v41 = v30[v38 >> 6];
                            if (((1 << v38) & v41) == 0)
                            {
                              v42 = (float *)(v37 + 12 * *(unsigned __int16 *)(v36 + 2 * v35));
                              v43 = v42[1];
                              v44 = v42[2];
                              v45 = (float)((float)((float)(*((float *)v21 + 7) * *v42)
                                                  + (float)(*((float *)v21 + 11) * v43))
                                          + (float)(*((float *)v21 + 15) * v44))
                                  + *((float *)v21 + 19);
                              *(float32x2_t *)v42 = vadd_f32(vmla_n_f32(vmla_n_f32(vmul_n_f32(*(float32x2_t *)((char *)v21 + 20), *v42), *(float32x2_t *)((char *)v21 + 36), v43), *(float32x2_t *)((char *)v21 + 52), v44), *(float32x2_t *)((char *)v21 + 68));
                              v42[2] = v45;
                              v30[v39] = v40 | v41;
                            }
                            ++v35;
                            --v32;
                          }
                          while (v32);
                          v28 = 8 * v33;
                        }
                        else
                        {
                          v10 = v48;
                          v8 = a3;
                        }
                        result = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v25 + 40))(v25, v30, v28);
                      }
                      v5 = *v10;
                      v4 = v10[1];
                      goto LABEL_64;
                    }
                  }
                  else
                  {
                    if (v34 >= v7)
                      v34 %= v7;
                    if (v34 != v19)
                      goto LABEL_68;
                  }
                  v21 = (uint64_t *)*v21;
                  if (!v21)
                    goto LABEL_68;
                }
              }
            }
            else
            {
              if (v18 >= v7)
              {
                result = v18 / v7;
                v18 %= v7;
              }
              if (v18 != v13)
                break;
            }
            v15 = (uint64_t **)*v15;
          }
          while (v15);
        }
      }
LABEL_64:
      while (0x86BCA1AF286BCA1BLL * ((v4 - v5) >> 3) > ++v11)
      {
        v7 = a4[1];
        if (v7)
          goto LABEL_4;
      }
    }
  }
  return result;
}

uint64_t *std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>::~vector[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v2, a1[2] - v2);
  }
  return a1;
}

void geo::codec::Mesh::~Mesh(geo::codec::Mesh *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *((_QWORD *)this + 12);
  if (v2)
  {
    *((_QWORD *)this + 13) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 15) + 40))(*((_QWORD *)this + 15), v2, *((_QWORD *)this + 14) - v2);
  }
  v3 = *((_QWORD *)this + 8);
  if (v3)
  {
    *((_QWORD *)this + 9) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 11) + 40))(*((_QWORD *)this + 11), v3, *((_QWORD *)this + 10) - v3);
  }
  v4 = *((_QWORD *)this + 4);
  if (v4)
  {
    *((_QWORD *)this + 5) = v4;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 7) + 40))(*((_QWORD *)this + 7), v4, *((_QWORD *)this + 6) - v4);
  }
  v5 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v5;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 3) + 40))(*((_QWORD *)this + 3), v5, *((_QWORD *)this + 2) - v5);
  }
}

uint64_t *std::vector<gm::Matrix<int,3,1>,geo::StdAllocator<gm::Matrix<int,3,1>,geo::codec::Allocator>>::~vector[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v2, a1[2] - v2);
  }
  return a1;
}

uint64_t **std::vector<GeoCodecsVertexAttributesData,geo::StdAllocator<GeoCodecsVertexAttributesData,geo::codec::Allocator>>::__destroy_vector::operator()[abi:ne180100](uint64_t **result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *result;
  v2 = **result;
  if (v2)
  {
    v3 = v1[1];
    v4 = **result;
    v5 = *result;
    if (v3 != v2)
    {
      v6 = result;
      do
      {
        v7 = *(_QWORD *)(v3 - 32);
        if (v7)
        {
          *(_QWORD *)(v3 - 24) = v7;
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 - 8) + 40))(*(_QWORD *)(v3 - 8), v7, *(_QWORD *)(v3 - 16) - v7);
        }
        v8 = *(_QWORD *)(v3 - 64);
        if (v8)
        {
          *(_QWORD *)(v3 - 56) = v8;
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 - 40) + 40))(*(_QWORD *)(v3 - 40), v8, *(_QWORD *)(v3 - 48) - v8);
        }
        v3 -= 72;
      }
      while (v3 != v2);
      v5 = *v6;
      v4 = **v6;
    }
    v1[1] = v2;
    return (uint64_t **)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[3] + 40))(v5[3], v4, v5[2] - v4);
  }
  return result;
}

geo::codec::MaterialSheet *geo::codec::MaterialSheet::MaterialSheet(geo::codec::MaterialSheet *this, const geo::codec::MaterialSheet *a2)
{
  geo::codec::MaterialSheet *v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  size_t v18;
  char *v19;
  uint64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _BYTE *v31;
  _BYTE *v32;
  unint64_t v33;
  uint64_t v34;

  v3 = this;
  *(_WORD *)this = *(_WORD *)a2;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  v4 = *((_QWORD *)a2 + 1);
  v5 = *((_QWORD *)a2 + 2);
  v6 = v5 - v4;
  if (v5 != v4)
  {
    v7 = 0x823EE08FB823EE09 * (v6 >> 3);
    if (v7 >= 0x8FB823EE08FB83)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v8 = (char *)operator new(v6);
    v9 = 0;
    *((_QWORD *)this + 1) = v8;
    *((_QWORD *)this + 2) = v8;
    *((_QWORD *)this + 3) = &v8[456 * v7];
    do
    {
      geo::codec::MaterialSheet::Material::Material((geo::codec::MaterialSheet::Material *)&v8[v9], (const geo::codec::MaterialSheet::Material *)(v4 + v9));
      v9 += 456;
    }
    while (v4 + v9 != v5);
    v10 = &v8[v9];
    v3 = this;
    *((_QWORD *)this + 2) = v10;
  }
  *((_QWORD *)v3 + 4) = 0;
  *((_QWORD *)v3 + 6) = 0;
  *((_QWORD *)v3 + 5) = 0;
  v11 = *((_QWORD *)a2 + 4);
  v12 = *((_QWORD *)a2 + 5);
  v13 = v12 - v11;
  if (v12 != v11)
  {
    v14 = 0xAAAAAAAAAAAAAAABLL * (v13 >> 3);
    if (v14 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v15 = (char *)operator new(v13);
    v16 = 0;
    *((_QWORD *)v3 + 4) = v15;
    *((_QWORD *)v3 + 5) = v15;
    *((_QWORD *)v3 + 6) = &v15[24 * v14];
    do
    {
      v19 = &v15[v16];
      v20 = v11 + v16;
      *(_QWORD *)v19 = 0;
      *((_QWORD *)v19 + 1) = 0;
      *((_QWORD *)v19 + 2) = 0;
      v22 = *(_BYTE **)(v11 + v16);
      v21 = *(_BYTE **)(v11 + v16 + 8);
      v23 = v21 - v22;
      if (v21 != v22)
      {
        if (v23 < 0)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v17 = (char *)operator new(v21 - v22);
        *(_QWORD *)v19 = v17;
        *((_QWORD *)v19 + 1) = v17;
        *((_QWORD *)v19 + 2) = &v17[8 * (v23 >> 3)];
        v18 = v23 & 0xFFFFFFFFFFFFFFF8;
        memcpy(v17, v22, v18);
        *((_QWORD *)v19 + 1) = &v17[v18];
      }
      v16 += 24;
    }
    while (v20 + 24 != v12);
    v3 = this;
    *((_QWORD *)this + 5) = &v15[v16];
  }
  geo::codec::MaterialSheet::Material::Material((geo::codec::MaterialSheet *)((char *)v3 + 56), (const geo::codec::MaterialSheet *)((char *)a2 + 56));
  *((_OWORD *)v3 + 32) = 0u;
  v24 = *((_QWORD *)a2 + 67);
  *((_QWORD *)v3 + 66) = 0;
  *((_QWORD *)v3 + 67) = v24;
  v25 = *((_QWORD *)a2 + 64);
  v26 = *((_QWORD *)a2 + 65);
  if (v26 != v25)
  {
    if (0xCCCCCCCCCCCCCCCDLL * ((v26 - v25) >> 3) >= 0x666666666666667)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 16))(v24);
    v28 = 0;
    *((_QWORD *)this + 64) = v27;
    *((_QWORD *)this + 65) = v27;
    *((_QWORD *)this + 66) = v27 + 8 * ((v26 - v25) >> 3);
    v29 = (_QWORD *)v27;
    do
    {
      if (v29)
      {
        *v29 = 0;
        v29[1] = 0;
        v30 = *(_QWORD *)(v25 + 24);
        v29[2] = 0;
        v29[3] = v30;
        v31 = *(_BYTE **)v25;
        v32 = *(_BYTE **)(v25 + 8);
        v33 = (unint64_t)&v32[-*(_QWORD *)v25];
        if (v32 != *(_BYTE **)v25)
        {
          if ((v33 & 0x8000000000000000) != 0)
            std::vector<double>::__throw_length_error[abi:ne180100]();
          v34 = (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)v30 + 16))(v30, &v32[-*(_QWORD *)v25], 1);
          *v29 = v34;
          v29[1] = v34;
          v29[2] = v34 + v33;
          do
          {
            if (v34)
              *(_BYTE *)v34 = *v31;
            ++v31;
            ++v34;
          }
          while (v31 != v32);
          v29[1] = v34;
        }
        v29[4] = *(_QWORD *)(v25 + 32);
      }
      v25 += 40;
      v29 += 5;
      v28 += 40;
    }
    while (v25 != v26);
    v3 = this;
    *((_QWORD *)this + 65) = v29;
  }
  return v3;
}

void sub_19FF8565C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11)
{
  std::vector<std::vector<unsigned long>>::~vector[abi:nn180100](a11);
  std::vector<geo::codec::MaterialSheet::Material>::~vector[abi:nn180100](a10);
  _Unwind_Resume(a1);
}

void sub_19FF85720(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<unsigned short,unsigned int>>>,std::vector<std::pair<unsigned short,unsigned int>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)va);
  *(_QWORD *)(a4 + 40) = v4;
  JUMPOUT(0x19FF8574CLL);
}

void sub_19FF857B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v6;
  va_list va;

  va_start(va, a5);
  for (; v6; v6 -= 456)
    geo::codec::MaterialSheet::Material::~Material((geo::codec::MaterialSheet::Material *)(v5 - 456 + v6));
  *(_QWORD *)(a5 + 16) = v5;
  std::__exception_guard_exceptions<std::vector<geo::codec::MaterialSheet::Material>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void ***std::__exception_guard_exceptions<std::vector<geo::codec::MaterialSheet::Material>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](void ***result)
{
  void ***v1;
  void **v2;
  char *v3;
  char *v4;
  void *v5;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (char *)**result;
    if (v3)
    {
      v4 = (char *)v2[1];
      v5 = **v1;
      if (v4 != v3)
      {
        do
          geo::codec::MaterialSheet::Material::~Material((geo::codec::MaterialSheet::Material *)(v4 - 456));
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<unsigned short,unsigned int>>>,std::vector<std::pair<unsigned short,unsigned int>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    if (v3 != v4)
    {
      v5 = **(_QWORD **)(a1 + 16);
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v4);
    }
  }
  return a1;
}

uint64_t **std::__exception_guard_exceptions<std::vector<geo::codec::MaterialTexture,geo::StdAllocator<geo::codec::MaterialTexture,geo::codec::Allocator>>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!*((_BYTE *)a1 + 8))
  {
    v2 = *a1;
    v3 = **a1;
    if (v3)
    {
      v4 = v2[1];
      v5 = **a1;
      v6 = *a1;
      if (v4 != v3)
      {
        v7 = v2[1];
        do
        {
          v9 = *(_QWORD *)(v7 - 40);
          v7 -= 40;
          v8 = v9;
          if (v9)
          {
            *(_QWORD *)(v4 - 32) = v8;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v4 - 16) + 40))(*(_QWORD *)(v4 - 16), v8, *(_QWORD *)(v4 - 24) - v8);
          }
          v4 = v7;
        }
        while (v7 != v3);
        v6 = *a1;
        v5 = **a1;
      }
      v2[1] = v3;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[3] + 40))(v6[3], v5, v6[2] - v5);
    }
  }
  return a1;
}

unint64_t std::__hash_table<std::__hash_value_type<unsigned short,gm::Matrix<float,4,4>>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,gm::Matrix<float,4,4>>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,gm::Matrix<float,4,4>>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,geo::StdAllocator<std::__hash_value_type<unsigned short,gm::Matrix<float,4,4>>,geo::codec::Allocator>>::__emplace_unique_key_args<unsigned short,std::pair<unsigned short const,gm::Matrix<float,4,4>>>(unint64_t result, unsigned __int16 a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t ***v9;
  uint64_t **v10;
  unint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  float v17;
  float v18;
  unint64_t *v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  size_t v28;
  size_t v29;
  size_t v30;
  _QWORD *i;
  size_t v32;
  uint64_t v33;
  uint8x8_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  size_t v38;
  uint64_t v39;
  unint64_t v40;

  v5 = result;
  v6 = a2;
  v7 = *(_QWORD *)(result + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(uint64_t ****)(*(_QWORD *)result + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (v10)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == (uint64_t *)a2)
            {
              if (*((unsigned __int16 *)v10 + 8) == a2)
                return result;
            }
            else if (((unint64_t)v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (uint64_t **)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = (unint64_t)v10[1];
          if (v11 == a2)
          {
            if (*((unsigned __int16 *)v10 + 8) == a2)
              return result;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (uint64_t **)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(result + 32) + 16))(*(_QWORD *)(result + 32), 88, 8);
  v13 = result;
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = v6;
  *(_OWORD *)(result + 16) = *(_OWORD *)a3;
  v14 = *(_OWORD *)(a3 + 16);
  v15 = *(_OWORD *)(a3 + 32);
  v16 = *(_OWORD *)(a3 + 48);
  *(_DWORD *)(result + 80) = *(_DWORD *)(a3 + 64);
  *(_OWORD *)(result + 48) = v15;
  *(_OWORD *)(result + 64) = v16;
  *(_OWORD *)(result + 32) = v14;
  v17 = (float)(unint64_t)(*(_QWORD *)(v5 + 40) + 1);
  v18 = *(float *)(v5 + 48);
  if (!v7 || (float)(v18 * (float)v7) < v17)
  {
    v20 = 1;
    if (v7 >= 3)
      v20 = (v7 & (v7 - 1)) != 0;
    v21 = v20 | (2 * v7);
    v22 = vcvtps_u32_f32(v17 / v18);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    if (v23 == 1)
    {
      v23 = 2;
    }
    else if ((v23 & (v23 - 1)) != 0)
    {
      result = std::__next_prime(v23);
      v23 = result;
    }
    v7 = *(_QWORD *)(v5 + 8);
    if (v23 > v7)
    {
LABEL_36:
      result = (*(uint64_t (**)(_QWORD, size_t, uint64_t))(**(_QWORD **)(v5 + 16) + 16))(*(_QWORD *)(v5 + 16), 8 * v23, 8);
      v24 = *(_QWORD *)v5;
      *(_QWORD *)v5 = result;
      if (v24)
        result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v5 + 16) + 40))(*(_QWORD *)(v5 + 16), v24, 8 * *(_QWORD *)(v5 + 8));
      v25 = 0;
      *(_QWORD *)(v5 + 8) = v23;
      do
        *(_QWORD *)(*(_QWORD *)v5 + 8 * v25++) = 0;
      while (v23 != v25);
      v27 = v5 + 24;
      v26 = *(_QWORD **)(v5 + 24);
      if (!v26)
        goto LABEL_67;
      v28 = v26[1];
      v29 = v23 - 1;
      if ((v23 & (v23 - 1)) == 0)
      {
        v30 = v28 & v29;
        *(_QWORD *)(*(_QWORD *)v5 + 8 * v30) = v27;
        for (i = (_QWORD *)*v26; *v26; i = (_QWORD *)*v26)
        {
          v32 = i[1] & v29;
          if (v32 == v30)
          {
            v26 = i;
          }
          else if (*(_QWORD *)(*(_QWORD *)v5 + 8 * v32))
          {
            *v26 = *i;
            v33 = 8 * v32;
            *i = **(_QWORD **)(*(_QWORD *)v5 + v33);
            **(_QWORD **)(*(_QWORD *)v5 + v33) = i;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)v5 + 8 * v32) = v26;
            v26 = i;
            v30 = v32;
          }
        }
        goto LABEL_67;
      }
      if (v28 >= v23)
        v28 %= v23;
      *(_QWORD *)(*(_QWORD *)v5 + 8 * v28) = v27;
      v36 = (_QWORD *)*v26;
      if (!*v26)
      {
LABEL_67:
        v7 = v23;
        if ((v23 & (v23 - 1)) != 0)
          goto LABEL_68;
        goto LABEL_83;
      }
      while (1)
      {
        v38 = v36[1];
        if (v38 >= v23)
          v38 %= v23;
        if (v38 == v28)
          goto LABEL_61;
        if (*(_QWORD *)(*(_QWORD *)v5 + 8 * v38))
        {
          *v26 = *v36;
          v37 = 8 * v38;
          *v36 = **(_QWORD **)(*(_QWORD *)v5 + v37);
          **(_QWORD **)(*(_QWORD *)v5 + v37) = v36;
          v36 = v26;
LABEL_61:
          v26 = v36;
          v36 = (_QWORD *)*v36;
          if (!v36)
            goto LABEL_67;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)v5 + 8 * v38) = v26;
          v26 = v36;
          v36 = (_QWORD *)*v36;
          v28 = v38;
          if (!v36)
            goto LABEL_67;
        }
      }
    }
    if (v23 < v7)
    {
      result = vcvtps_u32_f32((float)*(unint64_t *)(v5 + 40) / *(float *)(v5 + 48));
      if (v7 < 3 || (v34 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
      {
        result = std::__next_prime(result);
      }
      else
      {
        v35 = 1 << -(char)__clz(result - 1);
        if (result >= 2)
          result = v35;
      }
      if (v23 <= result)
        v23 = result;
      if (v23 < v7)
      {
        if (!v23)
        {
          v39 = *(_QWORD *)v5;
          *(_QWORD *)v5 = 0;
          if (v39)
            result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v5 + 16) + 40))(*(_QWORD *)(v5 + 16), v39, 8 * *(_QWORD *)(v5 + 8));
          v7 = 0;
          *(_QWORD *)(v5 + 8) = 0;
          goto LABEL_83;
        }
        goto LABEL_36;
      }
      v7 = *(_QWORD *)(v5 + 8);
    }
    if ((v7 & (v7 - 1)) != 0)
    {
LABEL_68:
      if (v7 <= v6)
      {
        v3 = v6 % v7;
        v19 = *(unint64_t **)(*(_QWORD *)v5 + 8 * (v6 % v7));
        if (v19)
          goto LABEL_25;
      }
      else
      {
        v3 = v6;
        v19 = *(unint64_t **)(*(_QWORD *)v5 + 8 * v6);
        if (v19)
          goto LABEL_25;
      }
      goto LABEL_84;
    }
LABEL_83:
    v3 = ((_DWORD)v7 - 1) & v6;
    v19 = *(unint64_t **)(*(_QWORD *)v5 + 8 * v3);
    if (v19)
      goto LABEL_25;
    goto LABEL_84;
  }
  v19 = *(unint64_t **)(*(_QWORD *)v5 + 8 * v3);
  if (v19)
  {
LABEL_25:
    *(_QWORD *)v13 = *v19;
LABEL_90:
    *v19 = v13;
    goto LABEL_91;
  }
LABEL_84:
  *(_QWORD *)v13 = *(_QWORD *)(v5 + 24);
  *(_QWORD *)(v5 + 24) = v13;
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v3) = v5 + 24;
  if (*(_QWORD *)v13)
  {
    v40 = *(_QWORD *)(*(_QWORD *)v13 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v40 >= v7)
        v40 %= v7;
    }
    else
    {
      v40 &= v7 - 1;
    }
    v19 = (unint64_t *)(*(_QWORD *)v5 + 8 * v40);
    goto LABEL_90;
  }
LABEL_91:
  ++*(_QWORD *)(v5 + 40);
  return result;
}

void sub_19FF85E8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned short,gm::Matrix<float,4,4>>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::__hash_value_type<unsigned short,gm::Matrix<float,4,4>>,void *>,geo::codec::Allocator>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned short,gm::Matrix<float,4,4>>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::__hash_value_type<unsigned short,gm::Matrix<float,4,4>>,void *>,geo::codec::Allocator>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)a1[1] + 40))(*(_QWORD *)a1[1], v2, 88);
  return a1;
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned short,std::vector<geo::codec::DynamicTransform,geo::StdAllocator<geo::codec::DynamicTransform,geo::codec::Allocator>>>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::__hash_value_type<unsigned short,std::vector<geo::codec::DynamicTransform,geo::StdAllocator<geo::codec::DynamicTransform,geo::codec::Allocator>>>,void *>,geo::codec::Allocator>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(_QWORD *)(v2 + 24);
      if (v3)
      {
        *(_QWORD *)(v2 + 32) = v3;
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v2 + 48) + 40))(*(_QWORD *)(v2 + 48), v3, *(_QWORD *)(v2 + 40) - v3);
      }
    }
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)a1[1] + 40))(*(_QWORD *)a1[1], v2, 56);
  }
  return a1;
}

uint64_t std::__split_buffer<std::shared_ptr<geo::codec::AssetLodInstance>,geo::StdAllocator<std::shared_ptr<geo::codec::AssetLodInstance>,geo::codec::Allocator> &>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  if (*(_QWORD *)a1)
    (*(void (**)(_QWORD, _QWORD, _QWORD))(***(_QWORD ***)(a1 + 32) + 40))(**(_QWORD **)(a1 + 32), *(_QWORD *)a1, *(_QWORD *)(a1 + 24) - *(_QWORD *)a1);
  return a1;
}

uint64_t std::__split_buffer<std::pair<unsigned long long,geo::codec::MaterialSheet>,geo::StdAllocator<std::pair<unsigned long long,geo::codec::MaterialSheet>,geo::codec::Allocator> &>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 552;
    geo::codec::MaterialSheet::~MaterialSheet((geo::codec::MaterialSheet *)(i - 544));
  }
  if (*(_QWORD *)a1)
    (*(void (**)(_QWORD, _QWORD, _QWORD))(***(_QWORD ***)(a1 + 32) + 40))(**(_QWORD **)(a1 + 32), *(_QWORD *)a1, *(_QWORD *)(a1 + 24) - *(_QWORD *)a1);
  return a1;
}

void std::__shared_ptr_emplace<geo::codec::AssetLodInstance>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE420;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<geo::codec::AssetLodInstance>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE420;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<geo::codec::AssetLodInstance>::__on_zero_shared(uint64_t a1)
{
  geo::codec::AssetLodInstance::~AssetLodInstance((geo::codec::AssetLodInstance *)(a1 + 24));
}

void geo::codec::AssetLodInstance::~AssetLodInstance(geo::codec::AssetLodInstance *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;

  v2 = *((_QWORD *)this + 48);
  if (v2)
  {
    *((_QWORD *)this + 49) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 51) + 40))(*((_QWORD *)this + 51), v2, *((_QWORD *)this + 50) - v2);
  }
  v3 = *((_QWORD *)this + 44);
  if (v3)
  {
    v4 = *((_QWORD *)this + 45);
    v5 = *((_QWORD *)this + 44);
    if (v4 != v3)
    {
      v6 = *((_QWORD *)this + 45);
      do
      {
        v8 = *(_QWORD *)(v6 - 32);
        v6 -= 32;
        v7 = v8;
        if (v8)
        {
          *(_QWORD *)(v4 - 24) = v7;
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v4 - 8) + 40))(*(_QWORD *)(v4 - 8), v7, *(_QWORD *)(v4 - 16) - v7);
        }
        v4 = v6;
      }
      while (v6 != v3);
      v5 = *((_QWORD *)this + 44);
    }
    *((_QWORD *)this + 45) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 47) + 40))(*((_QWORD *)this + 47), v5, *((_QWORD *)this + 46) - v5);
  }
  v9 = *((_QWORD *)this + 40);
  if (v9)
  {
    *((_QWORD *)this + 41) = v9;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 43) + 40))(*((_QWORD *)this + 43), v9, *((_QWORD *)this + 42) - v9);
  }
  v10 = *((_QWORD *)this + 36);
  if (v10)
  {
    *((_QWORD *)this + 37) = v10;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 39) + 40))(*((_QWORD *)this + 39), v10, *((_QWORD *)this + 38) - v10);
  }
  v11 = *((_QWORD *)this + 32);
  if (v11)
  {
    v12 = *((_QWORD *)this + 33);
    v13 = *((_QWORD *)this + 32);
    if (v12 != v11)
    {
      do
        geo::codec::Mesh::~Mesh((geo::codec::Mesh *)(v12 - 152));
      while (v12 != v11);
      v13 = *((_QWORD *)this + 32);
    }
    *((_QWORD *)this + 33) = v11;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 35) + 40))(*((_QWORD *)this + 35), v13, *((_QWORD *)this + 34) - v13);
  }
  v14 = *((_QWORD *)this + 28);
  if (v14)
  {
    *((_QWORD *)this + 29) = v14;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 31) + 40))(*((_QWORD *)this + 31), v14, *((_QWORD *)this + 30) - v14);
  }
  v15 = *((_QWORD *)this + 24);
  if (v15)
  {
    *((_QWORD *)this + 25) = v15;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 27) + 40))(*((_QWORD *)this + 27), v15, *((_QWORD *)this + 26) - v15);
  }
  v16 = *((_QWORD *)this + 20);
  if (v16)
  {
    *((_QWORD *)this + 21) = v16;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 23) + 40))(*((_QWORD *)this + 23), v16, *((_QWORD *)this + 22) - v16);
  }
  v17 = *((_QWORD *)this + 16);
  if (v17)
  {
    v18 = *((_QWORD *)this + 17);
    v19 = *((_QWORD *)this + 16);
    if (v18 != v17)
    {
      do
      {
        v18 -= 144;
        geo::StdAllocator<geo::codec::ModelNode,geo::codec::Allocator>::destroy(v18);
      }
      while (v18 != v17);
      v19 = *((_QWORD *)this + 16);
    }
    *((_QWORD *)this + 17) = v17;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 19) + 40))(*((_QWORD *)this + 19), v19, *((_QWORD *)this + 18) - v19);
  }
  std::__hash_table<std::__hash_value_type<unsigned short,std::vector<geo::codec::DynamicTransform,geo::StdAllocator<geo::codec::DynamicTransform,geo::codec::Allocator>>>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,std::vector<geo::codec::DynamicTransform,geo::StdAllocator<geo::codec::DynamicTransform,geo::codec::Allocator>>>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,std::vector<geo::codec::DynamicTransform,geo::StdAllocator<geo::codec::DynamicTransform,geo::codec::Allocator>>>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,geo::StdAllocator<std::__hash_value_type<unsigned short,std::vector<geo::codec::DynamicTransform,geo::StdAllocator<geo::codec::DynamicTransform,geo::codec::Allocator>>>,geo::codec::Allocator>>::~__hash_table((uint64_t *)this + 9);
  v20 = (_QWORD *)*((_QWORD *)this + 6);
  if (v20)
  {
    do
    {
      v26 = (_QWORD *)*v20;
      v27 = (_QWORD *)v20[5];
      if (v27)
      {
        do
        {
          v28 = (_QWORD *)*v27;
          operator delete(v27);
          v27 = v28;
        }
        while (v28);
      }
      v29 = (void *)v20[3];
      v20[3] = 0;
      if (v29)
        operator delete(v29);
      operator delete(v20);
      v20 = v26;
    }
    while (v26);
  }
  v21 = (void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v21)
    operator delete(v21);
  v22 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v23 = *((_QWORD *)this + 1);
    v24 = *(_QWORD *)this;
    if (v23 != v22)
    {
      v25 = *((_QWORD *)this + 1);
      do
      {
        v31 = *(_QWORD *)(v25 - 32);
        v25 -= 32;
        v30 = v31;
        if (v31)
        {
          *(_QWORD *)(v23 - 24) = v30;
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v23 - 8) + 40))(*(_QWORD *)(v23 - 8), v30, *(_QWORD *)(v23 - 16) - v30);
        }
        v23 = v25;
      }
      while (v25 != v22);
      v24 = *(_QWORD *)this;
    }
    *((_QWORD *)this + 1) = v22;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 3) + 40))(*((_QWORD *)this + 3), v24, *((_QWORD *)this + 2) - v24);
  }
}

uint64_t geo::StdAllocator<geo::codec::ModelNode,geo::codec::Allocator>::destroy(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    v1 = result;
    v2 = *(_QWORD *)(result + 64);
    if (v2)
    {
      *(_QWORD *)(result + 72) = v2;
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(result + 88) + 40))(*(_QWORD *)(result + 88), v2, *(_QWORD *)(result + 80) - v2);
    }
    v3 = *(_QWORD *)(v1 + 32);
    if (v3)
    {
      *(_QWORD *)(v1 + 40) = v3;
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1 + 56) + 40))(*(_QWORD *)(v1 + 56), v3, *(_QWORD *)(v1 + 48) - v3);
    }
    v4 = *(_QWORD *)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v4;
      return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1 + 24) + 40))(*(_QWORD *)(v1 + 24), v4, *(_QWORD *)(v1 + 16) - v4);
    }
  }
  return result;
}

uint64_t std::__split_buffer<std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>,geo::StdAllocator<std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>,geo::codec::Allocator> &>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    while (1)
    {
      v5 = i - 32;
      v4 = *(_QWORD *)(i - 32);
      *(_QWORD *)(a1 + 16) = i - 32;
      if (v4)
        break;
      i -= 32;
      if (v5 == v3)
        goto LABEL_6;
    }
    *(_QWORD *)(i - 24) = v4;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(i - 8) + 40))(*(_QWORD *)(i - 8), v4, *(_QWORD *)(i - 16) - v4);
  }
LABEL_6:
  if (*(_QWORD *)a1)
    (*(void (**)(_QWORD, _QWORD, _QWORD))(***(_QWORD ***)(a1 + 32) + 40))(**(_QWORD **)(a1 + 32), *(_QWORD *)a1, *(_QWORD *)(a1 + 24) - *(_QWORD *)a1);
  return a1;
}

void std::vector<unsigned long long,geo::StdAllocator<unsigned long long,geo::codec::Allocator>>::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("vector");
}

uint64_t std::__split_buffer<geo::codec::ModelNode,geo::StdAllocator<geo::codec::ModelNode,geo::codec::Allocator> &>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 144;
    geo::StdAllocator<geo::codec::ModelNode,geo::codec::Allocator>::destroy(i - 144);
  }
  if (*(_QWORD *)a1)
    (*(void (**)(_QWORD, _QWORD, _QWORD))(***(_QWORD ***)(a1 + 32) + 40))(**(_QWORD **)(a1 + 32), *(_QWORD *)a1, *(_QWORD *)(a1 + 24) - *(_QWORD *)a1);
  return a1;
}

uint64_t *std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::vector(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  v3 = a2[3];
  a1[2] = 0;
  a1[3] = v3;
  v4 = *a2;
  v5 = a2[1];
  v6 = v5 - *a2;
  if (v5 != *a2)
  {
    if (v6 < 0)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3 + 16))(v3, v5 - *a2, 2);
    v8 = 0;
    *a1 = v7;
    a1[1] = v7;
    a1[2] = v7 + 2 * (v6 >> 1);
    do
    {
      if (v7 + v8)
        *(_WORD *)(v7 + v8) = *(_WORD *)(v4 + v8);
      v8 += 2;
    }
    while (v4 + v8 != v5);
    a1[1] = v7 + v8;
  }
  return a1;
}

void sub_19FF865E0(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  if (*v1)
  {
    v1[1] = v3;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1[3] + 40))(v1[3], v3, v1[2] - v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::allocator<geo::codec::Mesh>::construct[abi:ne180100]<geo::codec::Mesh>(uint64_t a1)
{
  geo::codec::Allocator *v2;
  geo::codec::Allocator *v3;
  geo::codec::Allocator *v4;
  uint64_t result;

  *(_QWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v2 = (geo::codec::Allocator *)geo::codec::Allocator::instance((geo::codec::Allocator *)a1);
  *(_QWORD *)(a1 + 24) = v2;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v3 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v2);
  *(_QWORD *)(a1 + 56) = v3;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  v4 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v3);
  *(_QWORD *)(a1 + 88) = v4;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  result = geo::codec::Allocator::instance(v4);
  *(_QWORD *)(a1 + 120) = result;
  return result;
}

uint64_t std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>::__append(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  __int128 *v24;
  uint64_t v25;
  __int128 v26;
  int v27;
  uint64_t v28;

  v3 = result;
  v4 = *(_DWORD **)(result + 8);
  v5 = *(_QWORD *)(result + 16);
  if (a2 <= (v5 - (uint64_t)v4) >> 2)
  {
    if (a2)
    {
      v11 = 4 * a2;
      v12 = &v4[a2];
      do
      {
        if (v4)
          *v4 = 0;
        ++v4;
        v11 -= 4;
      }
      while (v11);
      v4 = v12;
    }
    *(_QWORD *)(result + 8) = v4;
  }
  else
  {
    v6 = (uint64_t)v4 - *(_QWORD *)result;
    v7 = v6 >> 2;
    v8 = (v6 >> 2) + a2;
    if (v8 >> 62)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v9 = v5 - *(_QWORD *)result;
    if (v9 >> 1 > v8)
      v8 = v9 >> 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL)
      v10 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(result + 24) + 16))(*(_QWORD *)(result + 24), 4 * v10, 4);
    else
      result = 0;
    v13 = (_DWORD *)(result + 4 * v7);
    v14 = 4 * a2;
    v15 = &v13[a2];
    v16 = v13;
    do
    {
      if (v16)
        *v16 = 0;
      ++v16;
      v14 -= 4;
    }
    while (v14);
    v17 = *(_QWORD *)v3;
    v18 = *(_QWORD *)(v3 + 8);
    if (v18 != *(_QWORD *)v3)
    {
      v19 = v18 - *(_QWORD *)v3 - 4;
      if (v19 < 0x2C)
        goto LABEL_35;
      if ((unint64_t)(v18 - (v6 + result)) < 0x20)
        goto LABEL_35;
      v20 = (v19 >> 2) + 1;
      v21 = 4 * (v20 & 0x7FFFFFFFFFFFFFF8);
      v22 = v18 - v21;
      v13 = (_DWORD *)((char *)v13 - v21);
      v23 = (_OWORD *)(result + 4 * v7 - 16);
      v24 = (__int128 *)(v18 - 16);
      v25 = v20 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v26 = *v24;
        *(v23 - 1) = *(v24 - 1);
        *v23 = v26;
        v23 -= 2;
        v24 -= 2;
        v25 -= 8;
      }
      while (v25);
      v18 = v22;
      if (v20 != (v20 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_35:
        do
        {
          v27 = *(_DWORD *)(v18 - 4);
          v18 -= 4;
          *--v13 = v27;
        }
        while (v18 != v17);
      }
    }
    *(_QWORD *)v3 = v13;
    *(_QWORD *)(v3 + 8) = v15;
    v28 = *(_QWORD *)(v3 + 16);
    *(_QWORD *)(v3 + 16) = result + 4 * v10;
    if (v17)
      return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 24) + 40))(*(_QWORD *)(v3 + 24), v17, v28 - v17);
  }
  return result;
}

void std::__shared_ptr_pointer<geo::codec::AssetLodInstance  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

geo::codec::AssetLodInstance *std::__shared_ptr_pointer<geo::codec::AssetLodInstance  *>::__on_zero_shared(uint64_t a1)
{
  geo::codec::AssetLodInstance *result;

  result = *(geo::codec::AssetLodInstance **)(a1 + 24);
  if (result)
  {
    geo::codec::AssetLodInstance::~AssetLodInstance(result);
    JUMPOUT(0x1A1AF4E00);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<geo::codec::AssetLodInstance  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN3geo5codec16AssetLodInstanceEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN3geo5codec16AssetLodInstanceEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN3geo5codec16AssetLodInstanceEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN3geo5codec16AssetLodInstanceEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t **std::back_insert_iterator<std::vector<gm::Matrix<float,2,1>,geo::StdAllocator<gm::Matrix<float,2,1>,geo::codec::Allocator>>>::operator=[abi:ne180100](uint64_t **a1, _QWORD *a2)
{
  uint64_t *v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _OWORD *v23;
  __int128 *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;

  v4 = *a1;
  v5 = (_QWORD *)(*a1)[1];
  v6 = (*a1)[2];
  if ((unint64_t)v5 >= v6)
  {
    v8 = ((uint64_t)v5 - *v4) >> 3;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v10 = v6 - *v4;
    if (v10 >> 2 > v9)
      v9 = v10 >> 2;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    if (v9)
    {
      v11 = 8 * v9;
      v12 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v4[3] + 16))(v4[3], 8 * v9, 4);
      v13 = (_QWORD *)(v12 + 8 * v8);
      v9 = v12 + v11;
      if (v12)
        *v13 = *a2;
      v7 = (uint64_t)(v13 + 1);
      v15 = *v4;
      v14 = v4[1];
      v16 = v14 - *v4;
      if (v14 == *v4)
      {
LABEL_14:
        *v4 = (uint64_t)v13;
        v4[1] = v7;
        v17 = v4[2];
        v4[2] = v9;
        if (!v14)
          goto LABEL_27;
        goto LABEL_26;
      }
    }
    else
    {
      v13 = (_QWORD *)(8 * v8);
      v7 = 8 * v8 + 8;
      v15 = *v4;
      v14 = v4[1];
      v16 = v14 - *v4;
      if (v14 == *v4)
        goto LABEL_14;
    }
    v18 = v16 - 8;
    if (v18 < 0x38 || (unint64_t)(v14 - (_QWORD)v13) < 0x20)
    {
      v21 = v14;
      v22 = v13;
    }
    else
    {
      v19 = (v18 >> 3) + 1;
      v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      v21 = v14 - v20;
      v22 = &v13[v20 / 0xFFFFFFFFFFFFFFF8];
      v23 = v13 - 2;
      v24 = (__int128 *)(v14 - 16);
      v25 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v26 = *v24;
        *(v23 - 1) = *(v24 - 1);
        *v23 = v26;
        v23 -= 2;
        v24 -= 2;
        v25 -= 4;
      }
      while (v25);
      if (v19 == (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_25:
        v14 = *v4;
        *v4 = (uint64_t)v22;
        v4[1] = v7;
        v17 = v4[2];
        v4[2] = v9;
        if (!v14)
          goto LABEL_27;
LABEL_26:
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4[3] + 40))(v4[3], v14, v17 - v14);
        goto LABEL_27;
      }
    }
    do
    {
      v27 = *(_QWORD *)(v21 - 8);
      v21 -= 8;
      *--v22 = v27;
    }
    while (v21 != v15);
    goto LABEL_25;
  }
  if (v5)
    *v5 = *a2;
  v7 = (uint64_t)(v5 + 1);
LABEL_27:
  v4[1] = v7;
  return a1;
}

void mgcl::tmesh::Decoder::~Decoder(gcl::tmesh::DecoderImpl ***this)
{
  gcl::tmesh::DecoderImpl **v1;
  gcl::tmesh::DecoderImpl *v2;

  v1 = *this;
  *this = 0;
  if (v1)
  {
    v2 = *v1;
    *v1 = 0;
    if (v2)
    {
      gcl::tmesh::DecoderImpl::~DecoderImpl(v2);
      MEMORY[0x1A1AF4E00]();
    }
    MEMORY[0x1A1AF4E00](v1, 0x20C4093837F09);
  }
}

void gcl::tmesh::DecoderImpl::decompress(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  int *v15;
  int v16;
  int v17;
  _BOOL4 v18;
  _BOOL4 v19;
  _BOOL4 v20;
  int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  unint64_t v27;
  unsigned int v28;
  _WORD *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  BOOL v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int *v44;
  int v45;
  int v46;
  _BOOL4 v47;
  _BOOL4 v48;
  _BOOL4 v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  int v54;
  uint64_t v55;
  unint64_t v56;
  int v57;
  unint64_t v58;
  int v59;
  int v60;
  int v61;

  v60 = 0;
  if (*(int *)(a1 + 3788) >= 1)
  {
    v6 = 0;
    v7 = 0;
    LODWORD(v8) = 0;
    LODWORD(v9) = -1;
    while (1)
    {
      while (v7 != v6)
      {
        if (++v7 >= *(int *)(a1 + 3788))
          return;
      }
      v10 = v6 + 1;
      v61 = v6 + 1;
      v11 = *(_BYTE *)(a1 + 3820) ? -1 : v9;
      *(_DWORD *)(*(_QWORD *)(a1 + 176) + 12 * v7) = v11;
      gcl::tmesh::DecoderImpl::decompressGeometry(a1, v7, a2);
      if ((int)v8 <= v6)
        break;
LABEL_73:
      ++v7;
      v6 = v10;
      if (v7 >= *(int *)(a1 + 3788))
        return;
    }
    v8 = (int)v8;
    v12 = *(_QWORD *)(a1 + 152);
    v13 = *(_DWORD *)(a1 + 2732);
    v14 = *(_DWORD *)(a1 + 2736);
    while (1)
    {
LABEL_9:
      v9 = v8;
      v15 = (int *)(v12 + 16 * v8);
      v17 = *v15;
      v16 = v15[1];
      v18 = v16 != -1;
      v19 = v17 != -1;
      v20 = v16 == v17 && v17 != -1;
      if (v13 < 0x40000001)
      {
        v21 = *(_DWORD *)(a1 + 2744);
        while (1)
        {
          v14 *= 2;
          *(_DWORD *)(a1 + 2744) = --v21;
          if (v21)
            goto LABEL_16;
          v24 = *(_QWORD *)(a1 + 2720);
          *(_QWORD *)(a1 + 2720) = v24 + 1;
          v25 = *(unsigned int *)(a1 + 2704);
          if (v24 + 1 >= v25)
          {
            v26 = 65280;
            v27 = v24 + 2;
            *(_QWORD *)(a1 + 2720) = v27;
            if (v27 >= v25)
            {
LABEL_22:
              v22 = 255;
              goto LABEL_15;
            }
          }
          else
          {
            v26 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v24 + 1) << 8;
            v27 = v24 + 2;
            *(_QWORD *)(a1 + 2720) = v27;
            if (v27 >= v25)
              goto LABEL_22;
          }
          v22 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v27);
LABEL_15:
          v14 |= v26 | v22;
          v21 = 16;
          *(_DWORD *)(a1 + 2744) = 16;
LABEL_16:
          v23 = 2 * v13;
          v33 = v13 >= 0x20000001;
          v13 *= 2;
          if (v33)
            goto LABEL_24;
        }
      }
      v23 = v13;
LABEL_24:
      v28 = (v19 | (2 * v18)) + v20;
      v29 = (_WORD *)(a1 + 2 * v28 + 2048);
      v30 = (unsigned __int16)*v29;
      v13 = (HIWORD(v23) * v30) & 0xFFFF0000;
      v31 = v14 < v13 ? 0 : (HIWORD(v23) * v30) & 0xFFFF0000;
      v32 = v14 - v31;
      *(_DWORD *)(a1 + 2736) = v32;
      v33 = v14 >= v13;
      *v29 = *(_WORD *)(a1 + 2 * ((v30 >> 7) & 0x1FE | (v14 >= v13)) + 2752) + v30;
      v34 = v14 < v13 ? (HIWORD(v23) * v30) & 0xFFFF0000 : v23 - v13;
      *(_DWORD *)(a1 + 2732) = v34;
      if (v33)
        break;
      v14 = v32;
      ++v8;
      if (v9 + 1 >= v10)
        goto LABEL_73;
    }
    while (1)
    {
      v59 = 0;
      v38 = gcl::tmesh::DecoderImpl::decompressTFanConnectivity((gcl::tmesh::DecoderImpl *)a1, v8, v28, a3, &v59, &v61, &v60);
      if ((v38 & 0x80000000) != 0 || (int)v38 > *(_DWORD *)(a1 + 3792) + 1)
        break;
      if (v59 == 3 || v59 == 5)
      {
        if (v38)
        {
          v40 = v38 + 1;
          do
          {
            v41 = (v40 - 2);
            if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + v41))
              gcl::tmesh::DecoderImpl::decompressGeometry(a1, *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v41), a2);
            --v40;
          }
          while (v40 > 1);
        }
      }
      else if (v38)
      {
        v42 = 0;
        v43 = v38;
        do
        {
          if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + v42))
            gcl::tmesh::DecoderImpl::decompressGeometry(a1, *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v42), a2);
          ++v42;
        }
        while (v43 != v42);
      }
      v12 = *(_QWORD *)(a1 + 152);
      v44 = (int *)(v12 + 16 * v8);
      v46 = *v44;
      v45 = v44[1];
      v47 = v45 != -1;
      v48 = v46 != -1;
      v49 = v45 == v46 && v46 != -1;
      v50 = *(unsigned __int16 *)(a1 + 2058);
      v51 = *(_DWORD *)(a1 + 2732);
      v52 = *(_DWORD *)(a1 + 2736);
      if (v51 < 0x40000001)
      {
        v53 = *(_DWORD *)(a1 + 2744);
        while (2)
        {
          v52 *= 2;
          *(_DWORD *)(a1 + 2744) = --v53;
          if (v53)
            goto LABEL_65;
          v55 = *(_QWORD *)(a1 + 2720);
          *(_QWORD *)(a1 + 2720) = v55 + 1;
          v56 = *(unsigned int *)(a1 + 2704);
          if (v55 + 1 >= v56)
          {
            v57 = 65280;
            v58 = v55 + 2;
            *(_QWORD *)(a1 + 2720) = v58;
            if (v58 >= v56)
              goto LABEL_71;
          }
          else
          {
            v57 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v55 + 1) << 8;
            v58 = v55 + 2;
            *(_QWORD *)(a1 + 2720) = v58;
            if (v58 >= v56)
            {
LABEL_71:
              v54 = 255;
LABEL_64:
              v52 |= v57 | v54;
              v53 = 16;
              *(_DWORD *)(a1 + 2744) = 16;
LABEL_65:
              v35 = 2 * v51;
              v33 = v51 >= 0x20000001;
              v51 *= 2;
              if (v33)
                goto LABEL_34;
              continue;
            }
          }
          break;
        }
        v54 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v58);
        goto LABEL_64;
      }
      v35 = *(_DWORD *)(a1 + 2732);
LABEL_34:
      v28 = (v48 | (2 * v47)) + v49;
      v13 = (HIWORD(v35) * v50) & 0xFFFF0000;
      if (v52 < v13)
        v36 = 0;
      else
        v36 = (HIWORD(v35) * v50) & 0xFFFF0000;
      v14 = v52 - v36;
      *(_DWORD *)(a1 + 2736) = v14;
      *(_WORD *)(a1 + 2058) = *(_WORD *)(a1 + 2 * ((v50 >> 7) & 0x1FE | (v52 >= v13)) + 2752) + v50;
      if (v52 < v13)
        v37 = (HIWORD(v35) * v50) & 0xFFFF0000;
      else
        v37 = v35 - v13;
      *(_DWORD *)(a1 + 2732) = v37;
      if (v52 < v13)
      {
        v10 = v61;
        ++v8;
        if (v9 + 1 >= v61)
          goto LABEL_73;
        goto LABEL_9;
      }
    }
    *(_DWORD *)(a1 + 3872) = 3;
  }
}

void gcl::tmesh::DecoderImpl::decompressTriangleOrder(gcl::tmesh::DecoderImpl *this, int *a2)
{
  int *v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  BOOL v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  unint64_t v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  int v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  unint64_t v45;
  unsigned int v46;
  unsigned int v47;
  _BOOL4 v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  int v54;
  int v55;
  unsigned int v56;
  uint64_t v57;
  unint64_t v58;
  int v59;
  unint64_t v60;
  int v61;
  unsigned int v62;
  _BOOL4 v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int v69;
  int v70;
  int v71;
  unsigned int v72;
  uint64_t v73;
  unint64_t v74;
  int v75;
  unint64_t v76;
  unsigned int v77;
  _BOOL4 v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  uint64_t v83;
  unsigned int v84;
  int v85;
  int v86;
  unsigned int v87;
  uint64_t v88;
  unint64_t v89;
  int v90;
  unint64_t v91;
  unsigned int v92;
  _BOOL4 v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int v99;
  int v100;
  int v101;
  unsigned int v102;
  uint64_t v103;
  unint64_t v104;
  int v105;
  unint64_t v106;
  unsigned int v107;
  _BOOL4 v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int v112;
  uint64_t v113;
  unsigned int v114;
  int v115;
  int v116;
  unsigned int v117;
  uint64_t v118;
  unint64_t v119;
  int v120;
  unint64_t v121;
  unsigned int v122;
  unsigned int v123;
  _BOOL4 v124;
  unsigned int v125;
  unsigned int v126;
  int v127;
  uint64_t v128;
  int v129;
  unsigned int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int *v135;
  uint64_t v136;
  int v137;
  unsigned int v138;
  unsigned int v139;
  unsigned int v140;
  int v141;
  unsigned int v142;
  unsigned int v143;
  int v144;
  int v145;
  unsigned int v146;
  uint64_t v147;
  unint64_t v148;
  int v149;
  unint64_t v150;
  unsigned int v151;
  unsigned int v152;
  unsigned int v153;
  BOOL v154;
  unsigned int v155;
  unsigned int v156;
  int v157;
  int v158;
  int v159;
  unsigned int v160;
  uint64_t v161;
  unint64_t v162;
  int v163;
  unint64_t v164;
  unsigned int v165;
  int v166;
  unsigned int v167;
  unsigned int v168;
  unsigned int v169;
  int v170;
  int v171;
  unsigned int v172;
  uint64_t v173;
  unint64_t v174;
  int v175;
  unint64_t v176;
  unsigned int v177;
  unsigned int v178;
  _BOOL4 v179;
  int v180;
  unsigned int v181;
  unsigned int v182;
  uint64_t v183;
  unsigned int v184;
  unsigned int v185;
  int v186;
  int v187;
  unsigned int v188;
  uint64_t v189;
  unint64_t v190;
  int v191;
  unint64_t v192;
  unsigned int v193;
  unsigned int v194;
  _BOOL4 v195;
  unsigned int v196;
  unsigned int v197;
  unsigned int v198;
  int v199;
  uint64_t v200;
  unsigned int v201;
  int v202;
  int v203;
  unsigned int v204;
  uint64_t v205;
  unint64_t v206;
  int v207;
  unint64_t v208;
  unsigned int v209;
  unsigned int v210;
  _BOOL4 v211;
  unsigned int v212;
  unsigned int v213;
  unsigned int v214;
  int v215;
  uint64_t v216;
  unsigned int v217;
  int v218;
  int v219;
  unsigned int v220;
  uint64_t v221;
  unint64_t v222;
  int v223;
  unint64_t v224;
  unsigned int v225;
  unsigned int v226;
  _BOOL4 v227;
  unsigned int v228;
  unsigned int v229;
  unsigned int v230;
  int v231;
  uint64_t v232;
  unsigned int v233;
  int v234;
  int v235;
  unsigned int v236;
  uint64_t v237;
  unint64_t v238;
  int v239;
  unint64_t v240;
  unsigned int v241;
  unsigned int v242;
  _BOOL4 v243;
  unsigned int v244;
  unsigned int v245;
  unsigned int v246;
  int v247;
  uint64_t v248;
  unsigned int v249;
  int v250;
  int v251;
  unsigned int v252;
  uint64_t v253;
  unint64_t v254;
  int v255;
  unint64_t v256;
  unsigned int v257;
  unsigned int v258;
  _BOOL4 v259;
  unsigned int v260;
  unsigned int v261;
  int v262;
  unsigned int v263;
  int v264;
  unsigned int v265;
  int v266;
  int v267;
  int v268;
  int v269;
  unsigned int v270;
  unsigned int v271;
  uint64_t v272;
  __int16 v274;
  _WORD __b[64];
  uint64_t v276;

  v276 = *MEMORY[0x1E0C80C00];
  if (!*((_DWORD *)this + 952))
  {
    memset_pattern16(__b, &memset_pattern_26, 0x80uLL);
    v274 = 0x8000;
    v135 = a2;
    if (*((int *)this + 948) < 1)
      return;
    v136 = 0;
    v137 = 0;
    v138 = __b[0];
    v139 = 0x8000;
    v140 = 0x8000;
    while (1)
    {
      v142 = *((_DWORD *)this + 683);
      v143 = *((_DWORD *)this + 684);
      if (v142 < 0x40000001)
      {
        v144 = *((_DWORD *)this + 686);
        while (1)
        {
          v143 *= 2;
          *((_DWORD *)this + 686) = --v144;
          if (v144)
            goto LABEL_167;
          v147 = *((_QWORD *)this + 340);
          *((_QWORD *)this + 340) = v147 + 1;
          v148 = *((unsigned int *)this + 676);
          if (v147 + 1 >= v148)
          {
            v149 = 65280;
            v150 = v147 + 2;
            *((_QWORD *)this + 340) = v150;
            if (v150 >= v148)
            {
LABEL_173:
              v145 = 255;
              goto LABEL_166;
            }
          }
          else
          {
            v149 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v147 + 1) << 8;
            v150 = v147 + 2;
            *((_QWORD *)this + 340) = v150;
            if (v150 >= v148)
              goto LABEL_173;
          }
          v145 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v150);
LABEL_166:
          v143 |= v149 | v145;
          v144 = 16;
          *((_DWORD *)this + 686) = 16;
LABEL_167:
          v146 = 2 * v142;
          v23 = v142 >= 0x20000001;
          v142 *= 2;
          if (v23)
            goto LABEL_175;
        }
      }
      v146 = *((_DWORD *)this + 683);
LABEL_175:
      v151 = (HIWORD(v146) * (unsigned __int16)v140) & 0xFFFF0000;
      if (v143 < v151)
        v152 = 0;
      else
        v152 = (HIWORD(v146) * (unsigned __int16)v140) & 0xFFFF0000;
      v153 = v143 - v152;
      *((_DWORD *)this + 684) = v143 - v152;
      v154 = v143 >= v151;
      v155 = (v140 >> 7) & 0x1FE | (v143 >= v151);
      v156 = v146 - v151;
      v157 = *((unsigned __int16 *)this + v155 + 1376);
      if (v154)
        v151 = v146 - v151;
      *((_DWORD *)this + 683) = v151;
      if (v154)
        break;
      v141 = 0;
LABEL_162:
      v140 += v157;
      v137 += v141;
      v135[v136++] = v137;
      if (v136 >= *((int *)this + 948))
        return;
    }
    if (v156 < 0x40000001)
    {
      v158 = *((_DWORD *)this + 686);
      while (1)
      {
        v153 *= 2;
        *((_DWORD *)this + 686) = --v158;
        if (v158)
          goto LABEL_186;
        v161 = *((_QWORD *)this + 340);
        *((_QWORD *)this + 340) = v161 + 1;
        v162 = *((unsigned int *)this + 676);
        if (v161 + 1 >= v162)
        {
          v163 = 65280;
          v164 = v161 + 2;
          *((_QWORD *)this + 340) = v164;
          if (v164 >= v162)
          {
LABEL_192:
            v159 = 255;
            goto LABEL_185;
          }
        }
        else
        {
          v163 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v161 + 1) << 8;
          v164 = v161 + 2;
          *((_QWORD *)this + 340) = v164;
          if (v164 >= v162)
            goto LABEL_192;
        }
        v159 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v164);
LABEL_185:
        v153 |= v163 | v159;
        v158 = 16;
        *((_DWORD *)this + 686) = 16;
LABEL_186:
        v160 = 2 * v156;
        v23 = v156 >= 0x20000001;
        v156 *= 2;
        if (v23)
          goto LABEL_194;
      }
    }
    v160 = v156;
LABEL_194:
    v165 = (HIWORD(v160) * (unsigned __int16)v139) & 0xFFFF0000;
    v166 = *((unsigned __int16 *)this + ((v139 >> 7) & 0x1FE | (v153 >= v165)) + 1376);
    if (v153 < v165)
      v167 = (HIWORD(v160) * (unsigned __int16)v139) & 0xFFFF0000;
    else
      v167 = v160 - v165;
    if (v153 < v165)
      v168 = 0;
    else
      v168 = (HIWORD(v160) * (unsigned __int16)v139) & 0xFFFF0000;
    v169 = v153 - v168;
    *((_DWORD *)this + 683) = v167;
    *((_DWORD *)this + 684) = v169;
    if (v167 < 0x40000001)
    {
      v170 = *((_DWORD *)this + 686);
      while (1)
      {
        v169 *= 2;
        *((_DWORD *)this + 686) = --v170;
        if (v170)
          goto LABEL_204;
        v173 = *((_QWORD *)this + 340);
        *((_QWORD *)this + 340) = v173 + 1;
        v174 = *((unsigned int *)this + 676);
        if (v173 + 1 >= v174)
        {
          v175 = 65280;
          v176 = v173 + 2;
          *((_QWORD *)this + 340) = v176;
          if (v176 >= v174)
          {
LABEL_210:
            v171 = 255;
            goto LABEL_203;
          }
        }
        else
        {
          v175 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v173 + 1) << 8;
          v176 = v173 + 2;
          *((_QWORD *)this + 340) = v176;
          if (v176 >= v174)
            goto LABEL_210;
        }
        v171 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v176);
LABEL_203:
        v169 |= v175 | v171;
        v170 = 16;
        *((_DWORD *)this + 686) = 16;
LABEL_204:
        v172 = 2 * v167;
        v23 = v167 >= 0x20000001;
        v167 *= 2;
        if (v23)
          goto LABEL_212;
      }
    }
    v172 = v167;
LABEL_212:
    v177 = (HIWORD(v172) * (unsigned __int16)v138) & 0xFFFF0000;
    v178 = v172 - v177;
    v179 = v169 >= v177;
    v180 = *((unsigned __int16 *)this + ((v138 >> 7) & 0x1FE | v179) + 1376);
    if (v169 < v177)
      v181 = v177;
    else
      v181 = v178;
    if (v169 < v177)
      v182 = 0;
    else
      v182 = v177;
    if (v169 < v177)
      v183 = 1;
    else
      v183 = 2;
    v184 = v169 - v182;
    *((_DWORD *)this + 683) = v181;
    *((_DWORD *)this + 684) = v184;
    v185 = (unsigned __int16)__b[v183];
    if (v181 < 0x40000001)
    {
      v186 = *((_DWORD *)this + 686);
      while (1)
      {
        v184 *= 2;
        *((_DWORD *)this + 686) = --v186;
        if (v186)
          goto LABEL_225;
        v189 = *((_QWORD *)this + 340);
        *((_QWORD *)this + 340) = v189 + 1;
        v190 = *((unsigned int *)this + 676);
        if (v189 + 1 >= v190)
        {
          v191 = 65280;
          v192 = v189 + 2;
          *((_QWORD *)this + 340) = v192;
          if (v192 >= v190)
          {
LABEL_231:
            v187 = 255;
            goto LABEL_224;
          }
        }
        else
        {
          v191 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v189 + 1) << 8;
          v192 = v189 + 2;
          *((_QWORD *)this + 340) = v192;
          if (v192 >= v190)
            goto LABEL_231;
        }
        v187 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v192);
LABEL_224:
        v184 |= v191 | v187;
        v186 = 16;
        *((_DWORD *)this + 686) = 16;
LABEL_225:
        v188 = 2 * v181;
        v23 = v181 >= 0x20000001;
        v181 *= 2;
        if (v23)
          goto LABEL_233;
      }
    }
    v188 = v181;
LABEL_233:
    v193 = (HIWORD(v188) * v185) & 0xFFFF0000;
    v194 = v188 - v193;
    v195 = v184 >= v193;
    __b[v183] = *((_WORD *)this + ((v185 >> 7) & 0x1FE | v195) + 1376) + v185;
    if (v184 < v193)
      v196 = v193;
    else
      v196 = v194;
    if (v184 < v193)
      v197 = 0;
    else
      v197 = v193;
    v198 = v184 - v197;
    *((_DWORD *)this + 683) = v196;
    *((_DWORD *)this + 684) = v198;
    v199 = v179 | (2 * v195);
    v200 = (v199 + 3);
    v201 = (unsigned __int16)__b[v200];
    if (v196 < 0x40000001)
    {
      v202 = *((_DWORD *)this + 686);
      while (1)
      {
        v198 *= 2;
        *((_DWORD *)this + 686) = --v202;
        if (v202)
          goto LABEL_243;
        v205 = *((_QWORD *)this + 340);
        *((_QWORD *)this + 340) = v205 + 1;
        v206 = *((unsigned int *)this + 676);
        if (v205 + 1 >= v206)
        {
          v207 = 65280;
          v208 = v205 + 2;
          *((_QWORD *)this + 340) = v208;
          if (v208 >= v206)
          {
LABEL_249:
            v203 = 255;
            goto LABEL_242;
          }
        }
        else
        {
          v207 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v205 + 1) << 8;
          v208 = v205 + 2;
          *((_QWORD *)this + 340) = v208;
          if (v208 >= v206)
            goto LABEL_249;
        }
        v203 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v208);
LABEL_242:
        v198 |= v207 | v203;
        v202 = 16;
        *((_DWORD *)this + 686) = 16;
LABEL_243:
        v204 = 2 * v196;
        v23 = v196 >= 0x20000001;
        v196 *= 2;
        if (v23)
          goto LABEL_251;
      }
    }
    v204 = v196;
LABEL_251:
    v209 = (HIWORD(v204) * v201) & 0xFFFF0000;
    v210 = v204 - v209;
    v211 = v198 >= v209;
    __b[v200] = *((_WORD *)this + ((v201 >> 7) & 0x1FE | v211) + 1376) + v201;
    if (v198 < v209)
      v212 = v209;
    else
      v212 = v210;
    if (v198 < v209)
      v213 = 0;
    else
      v213 = v209;
    v214 = v198 - v213;
    *((_DWORD *)this + 683) = v212;
    *((_DWORD *)this + 684) = v214;
    v215 = v199 | (4 * v211);
    v216 = (v215 + 7);
    v217 = (unsigned __int16)__b[v216];
    if (v212 < 0x40000001)
    {
      v218 = *((_DWORD *)this + 686);
      while (1)
      {
        v214 *= 2;
        *((_DWORD *)this + 686) = --v218;
        if (v218)
          goto LABEL_261;
        v221 = *((_QWORD *)this + 340);
        *((_QWORD *)this + 340) = v221 + 1;
        v222 = *((unsigned int *)this + 676);
        if (v221 + 1 >= v222)
        {
          v223 = 65280;
          v224 = v221 + 2;
          *((_QWORD *)this + 340) = v224;
          if (v224 >= v222)
          {
LABEL_267:
            v219 = 255;
            goto LABEL_260;
          }
        }
        else
        {
          v223 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v221 + 1) << 8;
          v224 = v221 + 2;
          *((_QWORD *)this + 340) = v224;
          if (v224 >= v222)
            goto LABEL_267;
        }
        v219 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v224);
LABEL_260:
        v214 |= v223 | v219;
        v218 = 16;
        *((_DWORD *)this + 686) = 16;
LABEL_261:
        v220 = 2 * v212;
        v23 = v212 >= 0x20000001;
        v212 *= 2;
        if (v23)
          goto LABEL_269;
      }
    }
    v220 = v212;
LABEL_269:
    v225 = (HIWORD(v220) * v217) & 0xFFFF0000;
    v226 = v220 - v225;
    v227 = v214 >= v225;
    __b[v216] = *((_WORD *)this + ((v217 >> 7) & 0x1FE | v227) + 1376) + v217;
    if (v214 < v225)
      v228 = v225;
    else
      v228 = v226;
    if (v214 < v225)
      v229 = 0;
    else
      v229 = v225;
    v230 = v214 - v229;
    *((_DWORD *)this + 683) = v228;
    *((_DWORD *)this + 684) = v230;
    v231 = v215 | (8 * v227);
    v232 = (v231 + 15);
    v233 = (unsigned __int16)__b[v232];
    if (v228 < 0x40000001)
    {
      v234 = *((_DWORD *)this + 686);
      while (1)
      {
        v230 *= 2;
        *((_DWORD *)this + 686) = --v234;
        if (v234)
          goto LABEL_279;
        v237 = *((_QWORD *)this + 340);
        *((_QWORD *)this + 340) = v237 + 1;
        v238 = *((unsigned int *)this + 676);
        if (v237 + 1 >= v238)
        {
          v239 = 65280;
          v240 = v237 + 2;
          *((_QWORD *)this + 340) = v240;
          if (v240 >= v238)
          {
LABEL_285:
            v235 = 255;
            goto LABEL_278;
          }
        }
        else
        {
          v239 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v237 + 1) << 8;
          v240 = v237 + 2;
          *((_QWORD *)this + 340) = v240;
          if (v240 >= v238)
            goto LABEL_285;
        }
        v235 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v240);
LABEL_278:
        v230 |= v239 | v235;
        v234 = 16;
        *((_DWORD *)this + 686) = 16;
LABEL_279:
        v236 = 2 * v228;
        v23 = v228 >= 0x20000001;
        v228 *= 2;
        if (v23)
          goto LABEL_287;
      }
    }
    v236 = v228;
LABEL_287:
    v241 = (HIWORD(v236) * v233) & 0xFFFF0000;
    v242 = v236 - v241;
    v243 = v230 >= v241;
    __b[v232] = *((_WORD *)this + ((v233 >> 7) & 0x1FE | v243) + 1376) + v233;
    if (v230 < v241)
      v244 = v241;
    else
      v244 = v242;
    if (v230 < v241)
      v245 = 0;
    else
      v245 = v241;
    v246 = v230 - v245;
    *((_DWORD *)this + 683) = v244;
    *((_DWORD *)this + 684) = v246;
    v247 = v231 | (16 * v243);
    v248 = (v247 + 31);
    v249 = (unsigned __int16)__b[v248];
    if (v244 >= 0x40000001)
    {
      v252 = v244;
LABEL_305:
      v257 = (HIWORD(v252) * v249) & 0xFFFF0000;
      v258 = v252 - v257;
      v259 = v246 >= v257;
      __b[v248] = *((_WORD *)this + ((v249 >> 7) & 0x1FE | v259) + 1376) + v249;
      if (v246 < v257)
        v260 = v257;
      else
        v260 = v258;
      if (v246 < v257)
        v261 = 0;
      else
        v261 = v257;
      *((_DWORD *)this + 683) = v260;
      *((_DWORD *)this + 684) = v246 - v261;
      v262 = v247 | (32 * v259);
      if (v262 == 63)
      {
        v272 = v136;
        v263 = v139;
        v270 = v138;
        v264 = v157;
        v265 = v165;
        v266 = v137;
        v267 = gcl::ArithmeticDecoder::decodeExpGolomb((unsigned int *)this + 676, 6, &v274);
        v137 = v266;
        v165 = v265;
        v157 = v264;
        v139 = v263;
        v136 = v272;
        v135 = a2;
        v262 = v267 + 63;
        v138 = v270;
      }
      v139 += v166;
      v138 += v180;
      v141 = ~v262;
      if (v153 >= v165)
        v141 = v262 + 1;
      goto LABEL_162;
    }
    v250 = *((_DWORD *)this + 686);
    while (1)
    {
      v246 *= 2;
      *((_DWORD *)this + 686) = --v250;
      if (v250)
        goto LABEL_297;
      v253 = *((_QWORD *)this + 340);
      *((_QWORD *)this + 340) = v253 + 1;
      v254 = *((unsigned int *)this + 676);
      if (v253 + 1 >= v254)
      {
        v255 = 65280;
        v256 = v253 + 2;
        *((_QWORD *)this + 340) = v256;
        if (v256 >= v254)
        {
LABEL_303:
          v251 = 255;
          goto LABEL_296;
        }
      }
      else
      {
        v255 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v253 + 1) << 8;
        v256 = v253 + 2;
        *((_QWORD *)this + 340) = v256;
        if (v256 >= v254)
          goto LABEL_303;
      }
      v251 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v256);
LABEL_296:
      v246 |= v255 | v251;
      v250 = 16;
      *((_DWORD *)this + 686) = 16;
LABEL_297:
      v252 = 2 * v244;
      v23 = v244 >= 0x20000001;
      v244 *= 2;
      if (v23)
        goto LABEL_305;
    }
  }
  memset_pattern16(__b, &memset_pattern_26, 0x80uLL);
  v274 = 0x8000;
  v3 = a2;
  if (*((int *)this + 948) >= 1)
  {
    v4 = 0;
    v5 = 0;
    v6 = __b[0];
    v7 = 0x8000;
    v8 = 6;
    v9 = 0x8000;
    while (1)
    {
      v11 = *((_DWORD *)this + 683);
      v12 = *((_DWORD *)this + 684);
      if (v11 < 0x40000001)
      {
        v13 = *((_DWORD *)this + 686);
        while (1)
        {
          v12 *= 2;
          *((_DWORD *)this + 686) = --v13;
          if (v13)
            goto LABEL_9;
          v16 = *((_QWORD *)this + 340);
          *((_QWORD *)this + 340) = v16 + 1;
          v17 = *((unsigned int *)this + 676);
          if (v16 + 1 >= v17)
          {
            v18 = 65280;
            v19 = v16 + 2;
            *((_QWORD *)this + 340) = v19;
            if (v19 >= v17)
            {
LABEL_15:
              v14 = 255;
              goto LABEL_8;
            }
          }
          else
          {
            v18 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v16 + 1) << 8;
            v19 = v16 + 2;
            *((_QWORD *)this + 340) = v19;
            if (v19 >= v17)
              goto LABEL_15;
          }
          v14 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v19);
LABEL_8:
          v12 |= v18 | v14;
          v13 = 16;
          *((_DWORD *)this + 686) = 16;
LABEL_9:
          v15 = 2 * v11;
          v23 = v11 >= 0x20000001;
          v11 *= 2;
          if (v23)
            goto LABEL_17;
        }
      }
      v15 = *((_DWORD *)this + 683);
LABEL_17:
      v20 = (HIWORD(v15) * (unsigned __int16)v9) & 0xFFFF0000;
      if (v12 < v20)
        v21 = 0;
      else
        v21 = (HIWORD(v15) * (unsigned __int16)v9) & 0xFFFF0000;
      v22 = v12 - v21;
      *((_DWORD *)this + 684) = v12 - v21;
      v23 = v12 >= v20;
      v24 = (v9 >> 7) & 0x1FE | (v12 >= v20);
      v25 = v15 - v20;
      v26 = *((unsigned __int16 *)this + v24 + 1376);
      if (v23)
        v20 = v15 - v20;
      *((_DWORD *)this + 683) = v20;
      if (v23)
        break;
      v10 = 0;
LABEL_4:
      v9 += v26;
      v5 += v10;
      v3[v4++] = v5;
      if (v4 >= *((int *)this + 948))
        return;
    }
    if (v25 < 0x40000001)
    {
      v27 = *((_DWORD *)this + 686);
      while (1)
      {
        v22 *= 2;
        *((_DWORD *)this + 686) = --v27;
        if (v27)
          goto LABEL_28;
        v30 = *((_QWORD *)this + 340);
        *((_QWORD *)this + 340) = v30 + 1;
        v31 = *((unsigned int *)this + 676);
        if (v30 + 1 >= v31)
        {
          v32 = 65280;
          v33 = v30 + 2;
          *((_QWORD *)this + 340) = v33;
          if (v33 >= v31)
          {
LABEL_34:
            v28 = 255;
            goto LABEL_27;
          }
        }
        else
        {
          v32 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v30 + 1) << 8;
          v33 = v30 + 2;
          *((_QWORD *)this + 340) = v33;
          if (v33 >= v31)
            goto LABEL_34;
        }
        v28 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v33);
LABEL_27:
        v22 |= v32 | v28;
        v27 = 16;
        *((_DWORD *)this + 686) = 16;
LABEL_28:
        v29 = 2 * v25;
        v23 = v25 >= 0x20000001;
        v25 *= 2;
        if (v23)
          goto LABEL_36;
      }
    }
    v29 = v25;
LABEL_36:
    v34 = (HIWORD(v29) * (unsigned __int16)v7) & 0xFFFF0000;
    v35 = v29 - v34;
    v36 = *((unsigned __int16 *)this + ((v7 >> 7) & 0x1FE | (v22 >= v34)) + 1376);
    if (v22 >= v34)
    {
      v37 = (HIWORD(v29) * (unsigned __int16)v7) & 0xFFFF0000;
    }
    else
    {
      v35 = (HIWORD(v29) * (unsigned __int16)v7) & 0xFFFF0000;
      v37 = 0;
    }
    v38 = v22 - v37;
    *((_DWORD *)this + 683) = v35;
    *((_DWORD *)this + 684) = v38;
    if (v35 < 0x40000001)
    {
      v39 = *((_DWORD *)this + 686);
      while (1)
      {
        v38 *= 2;
        *((_DWORD *)this + 686) = --v39;
        if (v39)
          goto LABEL_43;
        v42 = *((_QWORD *)this + 340);
        *((_QWORD *)this + 340) = v42 + 1;
        v43 = *((unsigned int *)this + 676);
        if (v42 + 1 >= v43)
        {
          v44 = 65280;
          v45 = v42 + 2;
          *((_QWORD *)this + 340) = v45;
          if (v45 >= v43)
          {
LABEL_49:
            v40 = 255;
            goto LABEL_42;
          }
        }
        else
        {
          v44 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v42 + 1) << 8;
          v45 = v42 + 2;
          *((_QWORD *)this + 340) = v45;
          if (v45 >= v43)
            goto LABEL_49;
        }
        v40 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v45);
LABEL_42:
        v38 |= v44 | v40;
        v39 = 16;
        *((_DWORD *)this + 686) = 16;
LABEL_43:
        v41 = 2 * v35;
        v23 = v35 >= 0x20000001;
        v35 *= 2;
        if (v23)
          goto LABEL_51;
      }
    }
    v41 = v35;
LABEL_51:
    v46 = (HIWORD(v41) * (unsigned __int16)v6) & 0xFFFF0000;
    v47 = v41 - v46;
    v48 = v38 >= v46;
    v49 = *((unsigned __int16 *)this + ((v6 >> 7) & 0x1FE | v48) + 1376);
    if (v38 < v46)
      v50 = v46;
    else
      v50 = v47;
    if (v38 < v46)
      v46 = 0;
    v51 = v38 - v46;
    *((_DWORD *)this + 683) = v50;
    *((_DWORD *)this + 684) = v51;
    v52 = (v48 & 0x7FFFFFFu) + 1;
    v53 = (unsigned __int16)__b[v52];
    if (v50 < 0x40000001)
    {
      v54 = *((_DWORD *)this + 686);
      while (1)
      {
        v51 *= 2;
        *((_DWORD *)this + 686) = --v54;
        if (v54)
          goto LABEL_60;
        v57 = *((_QWORD *)this + 340);
        *((_QWORD *)this + 340) = v57 + 1;
        v58 = *((unsigned int *)this + 676);
        if (v57 + 1 >= v58)
        {
          v59 = 65280;
          v60 = v57 + 2;
          *((_QWORD *)this + 340) = v60;
          if (v60 >= v58)
          {
LABEL_66:
            v55 = 255;
            goto LABEL_59;
          }
        }
        else
        {
          v59 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v57 + 1) << 8;
          v60 = v57 + 2;
          *((_QWORD *)this + 340) = v60;
          if (v60 >= v58)
            goto LABEL_66;
        }
        v55 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v60);
LABEL_59:
        v51 |= v59 | v55;
        v54 = 16;
        *((_DWORD *)this + 686) = 16;
LABEL_60:
        v56 = 2 * v50;
        v23 = v50 >= 0x20000001;
        v50 *= 2;
        if (v23)
          goto LABEL_68;
      }
    }
    v56 = v50;
LABEL_68:
    v61 = 32 * v48;
    v62 = (HIWORD(v56) * v53) & 0xFFFF0000;
    v63 = v51 >= v62;
    __b[v52] = *((_WORD *)this + ((v53 >> 7) & 0x1FE | v63) + 1376) + v53;
    if (v51 < v62)
      v64 = (HIWORD(v56) * v53) & 0xFFFF0000;
    else
      v64 = v56 - v62;
    if (v51 < v62)
      v65 = 0;
    else
      v65 = (HIWORD(v56) * v53) & 0xFFFF0000;
    v66 = v51 - v65;
    *((_DWORD *)this + 683) = v64;
    *((_DWORD *)this + 684) = v66;
    v67 = v61 | (16 * v63);
    v68 = (v67 >> 4) + 3;
    v69 = (unsigned __int16)__b[v68];
    if (v64 < 0x40000001)
    {
      v70 = *((_DWORD *)this + 686);
      while (1)
      {
        v66 *= 2;
        *((_DWORD *)this + 686) = --v70;
        if (v70)
          goto LABEL_78;
        v73 = *((_QWORD *)this + 340);
        *((_QWORD *)this + 340) = v73 + 1;
        v74 = *((unsigned int *)this + 676);
        if (v73 + 1 >= v74)
        {
          v75 = 65280;
          v76 = v73 + 2;
          *((_QWORD *)this + 340) = v76;
          if (v76 >= v74)
          {
LABEL_84:
            v71 = 255;
            goto LABEL_77;
          }
        }
        else
        {
          v75 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v73 + 1) << 8;
          v76 = v73 + 2;
          *((_QWORD *)this + 340) = v76;
          if (v76 >= v74)
            goto LABEL_84;
        }
        v71 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v76);
LABEL_77:
        v66 |= v75 | v71;
        v70 = 16;
        *((_DWORD *)this + 686) = 16;
LABEL_78:
        v72 = 2 * v64;
        v23 = v64 >= 0x20000001;
        v64 *= 2;
        if (v23)
          goto LABEL_86;
      }
    }
    v72 = v64;
LABEL_86:
    v77 = (HIWORD(v72) * v69) & 0xFFFF0000;
    v78 = v66 >= v77;
    __b[v68] = *((_WORD *)this + ((v69 >> 7) & 0x1FE | v78) + 1376) + v69;
    if (v66 < v77)
      v79 = (HIWORD(v72) * v69) & 0xFFFF0000;
    else
      v79 = v72 - v77;
    if (v66 < v77)
      v80 = 0;
    else
      v80 = (HIWORD(v72) * v69) & 0xFFFF0000;
    v81 = v66 - v80;
    *((_DWORD *)this + 683) = v79;
    *((_DWORD *)this + 684) = v81;
    v82 = v67 | (8 * v78);
    v83 = (v82 >> 3) + 7;
    v84 = (unsigned __int16)__b[v83];
    if (v79 < 0x40000001)
    {
      v85 = *((_DWORD *)this + 686);
      while (1)
      {
        v81 *= 2;
        *((_DWORD *)this + 686) = --v85;
        if (v85)
          goto LABEL_96;
        v88 = *((_QWORD *)this + 340);
        *((_QWORD *)this + 340) = v88 + 1;
        v89 = *((unsigned int *)this + 676);
        if (v88 + 1 >= v89)
        {
          v90 = 65280;
          v91 = v88 + 2;
          *((_QWORD *)this + 340) = v91;
          if (v91 >= v89)
          {
LABEL_102:
            v86 = 255;
            goto LABEL_95;
          }
        }
        else
        {
          v90 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v88 + 1) << 8;
          v91 = v88 + 2;
          *((_QWORD *)this + 340) = v91;
          if (v91 >= v89)
            goto LABEL_102;
        }
        v86 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v91);
LABEL_95:
        v81 |= v90 | v86;
        v85 = 16;
        *((_DWORD *)this + 686) = 16;
LABEL_96:
        v87 = 2 * v79;
        v23 = v79 >= 0x20000001;
        v79 *= 2;
        if (v23)
          goto LABEL_104;
      }
    }
    v87 = v79;
LABEL_104:
    v92 = (HIWORD(v87) * v84) & 0xFFFF0000;
    v93 = v81 >= v92;
    __b[v83] = *((_WORD *)this + ((v84 >> 7) & 0x1FE | v93) + 1376) + v84;
    if (v81 < v92)
      v94 = (HIWORD(v87) * v84) & 0xFFFF0000;
    else
      v94 = v87 - v92;
    if (v81 < v92)
      v95 = 0;
    else
      v95 = (HIWORD(v87) * v84) & 0xFFFF0000;
    v96 = v81 - v95;
    *((_DWORD *)this + 683) = v94;
    *((_DWORD *)this + 684) = v96;
    v97 = v82 | (4 * v93);
    v98 = (v97 >> 2) + 15;
    v99 = (unsigned __int16)__b[v98];
    if (v94 < 0x40000001)
    {
      v100 = *((_DWORD *)this + 686);
      while (1)
      {
        v96 *= 2;
        *((_DWORD *)this + 686) = --v100;
        if (v100)
          goto LABEL_114;
        v103 = *((_QWORD *)this + 340);
        *((_QWORD *)this + 340) = v103 + 1;
        v104 = *((unsigned int *)this + 676);
        if (v103 + 1 >= v104)
        {
          v105 = 65280;
          v106 = v103 + 2;
          *((_QWORD *)this + 340) = v106;
          if (v106 >= v104)
          {
LABEL_120:
            v101 = 255;
            goto LABEL_113;
          }
        }
        else
        {
          v105 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v103 + 1) << 8;
          v106 = v103 + 2;
          *((_QWORD *)this + 340) = v106;
          if (v106 >= v104)
            goto LABEL_120;
        }
        v101 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v106);
LABEL_113:
        v96 |= v105 | v101;
        v100 = 16;
        *((_DWORD *)this + 686) = 16;
LABEL_114:
        v102 = 2 * v94;
        v23 = v94 >= 0x20000001;
        v94 *= 2;
        if (v23)
          goto LABEL_122;
      }
    }
    v102 = v94;
LABEL_122:
    v107 = (HIWORD(v102) * v99) & 0xFFFF0000;
    v108 = v96 >= v107;
    __b[v98] = *((_WORD *)this + ((v99 >> 7) & 0x1FE | v108) + 1376) + v99;
    if (v96 < v107)
      v109 = (HIWORD(v102) * v99) & 0xFFFF0000;
    else
      v109 = v102 - v107;
    if (v96 < v107)
      v110 = 0;
    else
      v110 = (HIWORD(v102) * v99) & 0xFFFF0000;
    v111 = v96 - v110;
    *((_DWORD *)this + 683) = v109;
    *((_DWORD *)this + 684) = v111;
    v112 = v97 | (2 * v108);
    v113 = (v112 >> 1) + 31;
    v114 = (unsigned __int16)__b[v113];
    if (v109 >= 0x40000001)
    {
      v117 = v109;
LABEL_140:
      v122 = (HIWORD(v117) * v114) & 0xFFFF0000;
      v123 = v117 - v122;
      v124 = v111 >= v122;
      __b[v113] = *((_WORD *)this + ((v114 >> 7) & 0x1FE | v124) + 1376) + v114;
      if (v111 < v122)
        v125 = v122;
      else
        v125 = v123;
      if (v111 < v122)
        v126 = 0;
      else
        v126 = v122;
      *((_DWORD *)this + 683) = v125;
      *((_DWORD *)this + 684) = v111 - v126;
      v127 = v112 | v124;
      if (v127 == 63)
      {
        v268 = v49;
        v269 = v36;
        v271 = v9;
        v128 = v4;
        v129 = v26;
        v130 = v7;
        v131 = v8;
        v132 = gcl::ArithmeticDecoder::decodeExpGolomb((unsigned int *)this + 676, v8, &v274);
        v127 = v132 + 63;
        v133 = -63 - v132;
        if (v132 >= -63)
          v133 = v132 + 63;
        v134 = v133 >> v131;
        if (!v131 || v134)
        {
          if (v134 <= 1)
            v8 = v131;
          else
            v8 = v131 + 1;
        }
        else
        {
          v8 = v131 - 1;
        }
        v3 = a2;
        v7 = v130;
        v26 = v129;
        v4 = v128;
        v36 = v269;
        v9 = v271;
        v49 = v268;
      }
      v7 += v36;
      v6 += v49;
      v10 = ~v127;
      if (v22 >= v34)
        v10 = v127 + 1;
      goto LABEL_4;
    }
    v115 = *((_DWORD *)this + 686);
    while (1)
    {
      v111 *= 2;
      *((_DWORD *)this + 686) = --v115;
      if (v115)
        goto LABEL_132;
      v118 = *((_QWORD *)this + 340);
      *((_QWORD *)this + 340) = v118 + 1;
      v119 = *((unsigned int *)this + 676);
      if (v118 + 1 >= v119)
      {
        v120 = 65280;
        v121 = v118 + 2;
        *((_QWORD *)this + 340) = v121;
        if (v121 >= v119)
        {
LABEL_138:
          v116 = 255;
          goto LABEL_131;
        }
      }
      else
      {
        v120 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v118 + 1) << 8;
        v121 = v118 + 2;
        *((_QWORD *)this + 340) = v121;
        if (v121 >= v119)
          goto LABEL_138;
      }
      v116 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v121);
LABEL_131:
      v111 |= v120 | v116;
      v115 = 16;
      *((_DWORD *)this + 686) = 16;
LABEL_132:
      v117 = 2 * v109;
      v23 = v109 >= 0x20000001;
      v109 *= 2;
      if (v23)
        goto LABEL_140;
    }
  }
}

void gcl::tmesh::DecoderImpl::updateMappingInformation(std::vector<int> *this, int *a2, uint64_t a3)
{
  int begin;
  int *v7;
  int *v8;
  int v9;
  int v10;
  int *v11;
  int v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int *end;
  std::vector<int>::pointer *p_end;
  int *value;
  unint64_t v24;
  uint64_t v25;
  std::vector<int>::pointer v26;
  uint64_t v27;
  std::vector<int>::pointer v28;
  uint64_t v29;
  _DWORD *v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  std::vector<int>::pointer v36;
  uint64_t v37;
  int v38;
  int *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  std::vector<int>::pointer v43;
  int v44;
  unsigned int v45;
  unint64_t v46;
  unint64_t v47;
  int32x4_t v48;
  int32x4_t *v49;
  unint64_t v50;
  unint64_t v51;
  unsigned int *v52;

  begin = (int)this[158].__begin_;
  if (!begin)
    return;
  v7 = a2;
  v8 = a2;
  if (begin != 1)
  {
    v8 = a2 + 1;
    v9 = a2[1];
    v10 = *a2;
    if (v9 >= *a2)
      v7 = a2;
    else
      v7 = a2 + 1;
    if (v9 < v10)
      v8 = a2;
    if (begin != 2)
    {
      v11 = a2 + 2;
      if (v9 <= v10)
        v12 = *a2;
      else
        v12 = a2[1];
      if (v9 < v10)
        v10 = a2[1];
      v13 = 4 * begin - 12;
      while (v13)
      {
        v16 = *v11;
        v15 = v11[1];
        if (v15 >= *v11)
        {
          if (v16 < v10)
          {
            v10 = *v11;
            v7 = v11;
          }
          v14 = v15 < v12;
          if (v15 > v12)
            v12 = v11[1];
          if (!v14)
            v8 = v11 + 1;
          v11 += 2;
          v13 -= 8;
          if (v13 == -4)
            goto LABEL_35;
        }
        else
        {
          v10 = *v7;
          if (v15 < *v7)
          {
            v10 = v11[1];
            v7 = v11 + 1;
          }
          v12 = *v8;
          if (v16 > *v8)
            v12 = *v11;
          if (v16 >= *v8)
            v8 = v11;
          v11 += 2;
          v13 -= 8;
          if (v13 == -4)
            goto LABEL_35;
        }
      }
      v17 = *v11;
      if (*v11 < *v7)
        goto LABEL_36;
      if (v17 >= *v8)
        v8 = v11;
    }
  }
LABEL_35:
  v17 = *v7;
LABEL_36:
  if (v17 < 0 || (v18 = *v8, v19 = v18 - v17, v18 - v17 > begin))
  {
    LODWORD(this[161].__end_) = 3;
  }
  else
  {
    v20 = v19 + 2;
    LODWORD(this->__begin_) = v18;
    HIDWORD(this->__begin_) = v17;
    p_end = &this[2].__end_;
    end = this[2].__end_;
    value = this[2].__end_cap_.__value_;
    if (value != end)
    {
      this[2].__end_cap_.__value_ = end;
      value = end;
    }
    v24 = value - end;
    if (v20 <= v24)
    {
      if (v20 < v24)
        this[2].__end_cap_.__value_ = &end[v20];
    }
    else
    {
      std::vector<int>::__append((std::vector<int> *)((char *)this + 56), v20 - v24);
      begin = (int)this[158].__begin_;
    }
    if (begin >= 1)
    {
      v25 = 0;
      v26 = *p_end;
      do
      {
        v27 = a2[v25] - v17 + 1;
        ++v26[v27];
        ++v25;
      }
      while (v25 < SLODWORD(this[158].__begin_));
      begin = (int)this[158].__begin_;
    }
    if ((v19 & 0x80000000) == 0)
    {
      v28 = *p_end;
      if (v20 <= 2)
        v29 = 2;
      else
        v29 = v20;
      v32 = *v28;
      v30 = v28 + 1;
      v31 = v32;
      v33 = v29 - 1;
      do
      {
        v31 += *v30;
        *v30++ = v31;
        --v33;
      }
      while (v33);
      begin = (int)this[158].__begin_;
    }
    if (begin >= 1)
    {
      v34 = 0;
      v35 = 0;
      do
      {
        v36 = this[2].__end_;
        v37 = a2[v35] - v17;
        v38 = v36[v37];
        v36[v37] = v38 + 1;
        v39 = &this[5].__end_[v34];
        LODWORD(v36) = v39[2];
        v40 = a3 + 12 * v38;
        *(_QWORD *)v40 = *(_QWORD *)v39;
        *(_DWORD *)(v40 + 8) = (_DWORD)v36;
        ++v35;
        v34 += 3;
      }
      while (v35 < SLODWORD(this[158].__begin_));
    }
    if ((v19 & 0x80000000) == 0)
    {
      v41 = 0;
      v42 = 0;
      v43 = *p_end;
      do
      {
        v44 = v43[v41];
        if (v42 < v44)
        {
          v45 = v17 + v41;
          v46 = v44 - (uint64_t)v42;
          v47 = v42;
          if (v46 < 8)
            goto LABEL_68;
          v47 = (v46 & 0xFFFFFFFFFFFFFFF8) + v42;
          v48 = vdupq_n_s32(v45);
          v49 = (int32x4_t *)&a2[v42 + 4];
          v50 = v46 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v49[-1] = v48;
            *v49 = v48;
            v49 += 2;
            v50 -= 8;
          }
          while (v50);
          if (v46 != (v46 & 0xFFFFFFFFFFFFFFF8))
          {
LABEL_68:
            v51 = v44 - v47;
            v52 = (unsigned int *)&a2[v47];
            do
            {
              *v52++ = v45;
              --v51;
            }
            while (v51);
          }
        }
        v43[v41++] = v42;
        v42 = v44;
      }
      while (v41 != v19 + 1);
    }
  }
}

void gcl::tmesh::EstimateQuantizedNormals(uint64_t *a1, _QWORD *a2, uint64_t a3, signed int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float *v10;
  uint64_t v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  unint64_t v19;
  uint64_t v20;
  int *v21;
  float *v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  int *v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  float *v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  char v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  float *v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char v71;
  char v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  float *v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char v89;
  char v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  float *v94;
  unint64_t v95;
  int8x8_t v96;
  unint64_t v97;
  float *v98;
  int64x2_t v99;
  int64x2_t v100;
  int64x2_t v101;
  int64x2_t v102;
  int64x2_t v103;
  int64x2_t v104;
  int8x8_t v105;
  uint64_t v106;
  unint64_t v107;
  signed int *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  float32x2x3_t v118;
  float32x2x3_t v119;

  v7 = (a1[1] - *a1) / 12;
  v8 = *a2;
  v9 = a2[1];
  v10 = *(float **)a3;
  *(_QWORD *)(a3 + 8) = *(_QWORD *)a3;
  v11 = v7 << 32;
  if (!(v7 << 32))
  {
    v18 = 0;
    v19 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v8) >> 2);
    if ((int)v19 < 1)
      goto LABEL_81;
    goto LABEL_16;
  }
  v12 = (int)v7;
  v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 16) - (_QWORD)v10) >> 2);
  v116 = v7;
  if (v13 >= (int)v7)
  {
    bzero(v10, 12 * ((12 * (int)v7 - 12) / 0xCuLL) + 12);
    *(_QWORD *)(a3 + 8) = &v10[3 * (int)v7];
    if (v11 < 0)
      std::vector<double>::__throw_length_error[abi:ne180100]();
  }
  else
  {
    if (v11 < 0)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v14 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a3 + 16) - (_QWORD)v10) >> 2);
    if (v14 <= (int)v7)
      v14 = (int)v7;
    if (v13 >= 0xAAAAAAAAAAAAAAALL)
      v15 = 0x1555555555555555;
    else
      v15 = v14;
    if (v15 > 0x1555555555555555)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v16 = 12 * v15;
    v17 = (char *)operator new(12 * v15);
    bzero(v17, 12 * ((12 * v12 - 12) / 0xC) + 12);
    *(_QWORD *)a3 = v17;
    *(_QWORD *)(a3 + 8) = &v17[12 * v12];
    *(_QWORD *)(a3 + 16) = &v17[v16];
    if (v10)
      operator delete(v10);
  }
  v18 = operator new(v12);
  bzero(v18, v12);
  LODWORD(v7) = v116;
  v19 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v8) >> 2);
  if ((int)v19 >= 1)
  {
LABEL_16:
    v19 = v19;
    v20 = *a1;
    v21 = (int *)(*a2 + 8);
    v22 = *(float **)a3;
    do
    {
      v24 = *(v21 - 2);
      v25 = (int *)(v20 + 12 * v24);
      v26 = (int *)(v20 + 12 * *(v21 - 1));
      v27 = (int *)(v20 + 12 * *v21);
      v28 = *v25;
      v29 = v25[1];
      v30 = *v26 - v28;
      v31 = *v27 - v28;
      v32 = v26[1] - v29;
      v33 = v25[2];
      v34 = v26[2] - v33;
      v35 = v27[1] - v29;
      v36 = v27[2] - v33;
      v37 = v36 * v32 - v35 * v34;
      v38 = v31 * v34 - v36 * v30;
      v39 = v35 * v30 - v31 * v32;
      v40 = &v22[3 * v24];
      v41 = *((_BYTE *)v18 + v24);
      if (v41)
      {
        v42 = 1 << (v41 - 1);
        v43 = (v42 + v37) >> v41;
        if (v37 < 0)
          v43 = -((v42 - v37) >> v41);
        if (v38 < 0)
          v44 = -((v42 - v38) >> v41);
        else
          v44 = (v42 + v38) >> v41;
        v45 = v44 + *((int *)v40 + 1);
        v46 = (v42 - v39) >> v41;
        v47 = (v42 + v39) >> v41;
        if (v39 < 0)
          v47 = -v46;
        v48 = v47 + *((int *)v40 + 2);
      }
      else
      {
        v45 = v38 + *((int *)v40 + 1);
        v48 = v39 + *((int *)v40 + 2);
        v43 = v37;
      }
      v49 = v43 + *(int *)v40;
      v50 = (uint64_t)fmax(fmax(fabs((double)v49), fabs((double)v45)), fabs((double)v48)) + 1;
      if (v50 >> 30)
      {
        v51 = __clz(v50);
        v52 = 34 - v51;
        *((_BYTE *)v18 + v24) = v41 + 34 - v51;
        v53 = 1 << (33 - v51);
        v54 = (unint64_t)(v53 - v49) >> (34 - v51);
        v55 = (unint64_t)(v53 + v49) >> (34 - v51);
        if (v49 < 0)
          v49 = -(uint64_t)v54;
        else
          LODWORD(v49) = v55;
        if (v45 < 0)
          v45 = -(uint64_t)((unint64_t)(v53 - v45) >> v52);
        else
          v45 = (unint64_t)(v53 + v45) >> v52;
        v56 = (unint64_t)(v53 - v48) >> v52;
        v57 = (unint64_t)(v53 + v48) >> v52;
        if (v48 < 0)
          v48 = -(uint64_t)v56;
        else
          LODWORD(v48) = v57;
      }
      *(_DWORD *)v40 = v49;
      *((_DWORD *)v40 + 1) = v45;
      *((_DWORD *)v40 + 2) = v48;
      v58 = *(v21 - 1);
      v59 = &v22[3 * (int)v58];
      v60 = *((_BYTE *)v18 + v58);
      if (v60)
      {
        v61 = 1 << (v60 - 1);
        if (v37 < 0)
          v62 = -((v61 - v37) >> v60);
        else
          v62 = (v61 + v37) >> v60;
        v63 = (v61 + v38) >> v60;
        if (v38 < 0)
          v63 = -((v61 - v38) >> v60);
        v64 = v63 + *((int *)v59 + 1);
        v65 = (v61 + v39) >> v60;
        v66 = (v61 - v39) >> v60;
        if (v39 < 0)
          v67 = -v66;
        else
          v67 = v65;
        v68 = v67 + *((int *)v59 + 2);
      }
      else
      {
        v64 = v38 + *((int *)v59 + 1);
        v68 = v39 + *((int *)v59 + 2);
        v62 = v37;
      }
      v69 = v62 + *(int *)v59;
      v70 = (uint64_t)fmax(fmax(fabs((double)v69), fabs((double)v64)), fabs((double)v68)) + 1;
      if (v70 >> 30)
      {
        v71 = __clz(v70);
        v72 = 34 - v71;
        *((_BYTE *)v18 + v58) = v60 + 34 - v71;
        v73 = 1 << (33 - v71);
        v74 = (unint64_t)(v73 + v69) >> (34 - v71);
        v75 = (unint64_t)(v73 - v69) >> (34 - v71);
        if (v69 < 0)
          v69 = -(uint64_t)v75;
        else
          LODWORD(v69) = v74;
        if (v64 < 0)
          v64 = -(uint64_t)((unint64_t)(v73 - v64) >> v72);
        else
          v64 = (unint64_t)(v73 + v64) >> v72;
        v76 = (unint64_t)(v73 + v68) >> v72;
        v77 = (unint64_t)(v73 - v68) >> v72;
        if (v68 < 0)
          v68 = -(uint64_t)v77;
        else
          LODWORD(v68) = v76;
      }
      *(_DWORD *)v59 = v69;
      *((_DWORD *)v59 + 1) = v64;
      *((_DWORD *)v59 + 2) = v68;
      v78 = *v21;
      v79 = &v22[3 * (int)v78];
      v80 = *((_BYTE *)v18 + v78);
      if (v80)
      {
        v81 = 1 << (v80 - 1);
        if (v37 < 0)
          v37 = -((v81 - v37) >> v80);
        else
          v37 = (v81 + v37) >> v80;
        if (v38 < 0)
          v82 = -((v81 - v38) >> v80);
        else
          v82 = (v81 + v38) >> v80;
        v83 = v82 + *((int *)v79 + 1);
        v84 = (v81 + v39) >> v80;
        v85 = (v81 - v39) >> v80;
        if (v39 < 0)
          v86 = -v85;
        else
          v86 = v84;
        v23 = v86 + *((int *)v79 + 2);
      }
      else
      {
        v83 = v38 + *((int *)v79 + 1);
        v23 = v39 + *((int *)v79 + 2);
      }
      v87 = v37 + *(int *)v79;
      v88 = (uint64_t)fmax(fmax(fabs((double)v87), fabs((double)v83)), fabs((double)v23)) + 1;
      if (v88 >> 30)
      {
        v89 = __clz(v88);
        v90 = 34 - v89;
        *((_BYTE *)v18 + v78) = v80 + 34 - v89;
        v91 = 1 << (33 - v89);
        v92 = (unint64_t)(v91 + v87) >> (34 - v89);
        v93 = (unint64_t)(v91 - v87) >> (34 - v89);
        if (v87 < 0)
          v87 = -(uint64_t)v93;
        else
          LODWORD(v87) = v92;
        if (v83 < 0)
          v83 = -(uint64_t)((unint64_t)(v91 - v83) >> v90);
        else
          v83 = (unint64_t)(v91 + v83) >> v90;
        if (v23 < 0)
          v23 = -(uint64_t)((unint64_t)(v91 - v23) >> v90);
        else
          v23 = (unint64_t)(v91 + v23) >> v90;
      }
      *(_DWORD *)v79 = v87;
      *((_DWORD *)v79 + 1) = v83;
      v21 += 3;
      *((_DWORD *)v79 + 2) = v23;
      --v19;
    }
    while (v19);
  }
LABEL_81:
  if ((int)v7 < 1)
    goto LABEL_113;
  v94 = *(float **)a3;
  if (v7 >= 2uLL)
  {
    v95 = v7 - (unint64_t)(v7 & 1);
    v96 = (int8x8_t)vdup_n_s32(a4);
    v97 = v95;
    v98 = *(float **)a3;
    while (1)
    {
      v118 = vld3_f32(v98);
      v99.i64[0] = v118.val[0].i32[0];
      v99.i64[1] = v118.val[0].i32[1];
      v100 = v99;
      v99.i64[0] = v118.val[1].i32[0];
      v99.i64[1] = v118.val[1].i32[1];
      v101 = v99;
      v99.i64[0] = v118.val[2].i32[0];
      v99.i64[1] = v118.val[2].i32[1];
      v102 = v99;
      v103 = vabsq_s64(v99);
      v104 = vaddq_s64(vaddq_s64(vabsq_s64(v101), vabsq_s64(v100)), v103);
      v105 = (int8x8_t)vmovn_s64(vtstq_s64(v104, v104));
      if ((v105.i8[0] & 1) != 0)
      {
        v103.i64[0] = v100.i32[0] * (uint64_t)a4 / v104.i64[0];
        v106 = v104.i64[1];
        if ((v105.i8[4] & 1) == 0)
        {
LABEL_88:
          if ((v105.i8[0] & 1) == 0)
            goto LABEL_89;
          goto LABEL_95;
        }
      }
      else
      {
        v106 = v104.i64[1];
        if ((v105.i8[4] & 1) == 0)
          goto LABEL_88;
      }
      v103.i64[1] = v100.i32[2] * (uint64_t)a4 / v106;
      if ((v105.i8[0] & 1) == 0)
      {
LABEL_89:
        if ((v105.i8[4] & 1) == 0)
          goto LABEL_90;
        goto LABEL_96;
      }
LABEL_95:
      v100.i64[0] = v101.i32[0] * (uint64_t)a4 / v104.i64[0];
      if ((v105.i8[4] & 1) == 0)
      {
LABEL_90:
        if ((v105.i8[0] & 1) == 0)
          goto LABEL_91;
        goto LABEL_97;
      }
LABEL_96:
      v100.i64[1] = v101.i32[2] * (uint64_t)a4 / v106;
      if ((v105.i8[0] & 1) == 0)
      {
LABEL_91:
        if ((v105.i8[4] & 1) != 0)
          goto LABEL_98;
        goto LABEL_85;
      }
LABEL_97:
      v101.i64[0] = v102.i32[0] * (uint64_t)a4 / v104.i64[0];
      if ((v105.i8[4] & 1) != 0)
LABEL_98:
        v101.i64[1] = v102.i32[2] * (uint64_t)a4 / v106;
LABEL_85:
      v119.val[0] = (float32x2_t)vand_s8((int8x8_t)vmovn_s64(v103), v105);
      v119.val[1] = (float32x2_t)vand_s8((int8x8_t)vmovn_s64(v100), v105);
      v119.val[2] = (float32x2_t)vorr_s8((int8x8_t)vmovn_s64((int64x2_t)vbicq_s8((int8x16_t)v101, (int8x16_t)vceqzq_s64(v104))), vbic_s8(v96, v105));
      vst3_f32(v98, v119);
      v98 += 6;
      v97 -= 2;
      if (!v97)
      {
        if ((v7 & 1) != 0)
          goto LABEL_100;
        goto LABEL_113;
      }
    }
  }
  v95 = 0;
LABEL_100:
  v107 = v7 - v95;
  v108 = (signed int *)&v94[3 * v95 + 2];
  do
  {
    while (1)
    {
      v110 = *(v108 - 2);
      v109 = *(v108 - 1);
      v111 = *v108;
      v112 = v110 >= 0 ? *(v108 - 2) : -v110;
      v113 = v109 >= 0 ? *(v108 - 1) : -v109;
      v114 = v111 >= 0 ? *v108 : -v111;
      v115 = v113 + v112 + v114;
      if (!v115)
        break;
      *(v108 - 2) = (int)v110 * (uint64_t)a4 / v115;
      *(v108 - 1) = (int)v109 * (uint64_t)a4 / v115;
      *v108 = (int)v111 * (uint64_t)a4 / v115;
      v108 += 3;
      if (!--v107)
        goto LABEL_113;
    }
    *(v108 - 2) = 0;
    *(v108 - 1) = 0;
    *v108 = a4;
    v108 += 3;
    --v107;
  }
  while (v107);
LABEL_113:
  if (v18)
    operator delete(v18);
}

void gcl::tmesh::ACContext::~ACContext(gcl::tmesh::ACContext *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (void *)*((_QWORD *)this + 12);
  if (v2)
  {
    *((_QWORD *)this + 13) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 9);
  if (v3)
  {
    *((_QWORD *)this + 10) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 6);
  if (v4)
  {
    *((_QWORD *)this + 7) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 3);
  if (v5)
  {
    *((_QWORD *)this + 4) = v5;
    operator delete(v5);
  }
  v6 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v6;
    operator delete(v6);
  }
}

int32x4_t *gcl::tmesh::ComputeGeneralizedParallelogramPrediction(int32x4_t *result, int32x4_t *a2, int32x4_t *a3, int a4, int *a5, int *a6, int *a7, int *a8, int32x4_t *a9)
{
  int32x4_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int32 *v29;
  int *v30;
  int *v31;
  int *v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int32x4_t *v45;
  int32x4_t *v46;
  int32x4_t *v47;
  int32x4_t *v48;
  uint64_t v49;
  int32x4_t v50;
  int32x4_t v51;
  char v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int32x4_t *v69;
  int32x4_t *v70;
  int32x4_t *v71;
  int32x4_t *v72;
  uint64_t v73;
  int32x4_t v74;
  int32x4_t v75;
  uint64_t v76;
  uint64_t v77;
  __int32 *v78;
  int *v79;
  int *v80;
  int *v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;

  v9 = a9;
  v10 = *a7;
  v11 = a7[1];
  v12 = *a5 - v10;
  v13 = a5[1] - v11;
  v14 = a7[2];
  v15 = a5[2] - v14;
  v16 = *a6 - v10;
  v17 = a6[1] - v11;
  v18 = a6[2] - v14;
  v19 = *a8 - v10;
  v20 = a8[1] - v11;
  v21 = a8[2] - v14;
  v22 = v12 * v12 + v13 * v13 + v15 * v15;
  v23 = v16 * v16 + v17 * v17 + v18 * v18;
  if (v22 >> 30)
    v24 = 0;
  else
    v24 = v23 >> 30 == 0;
  if (v24 && (unint64_t)(v19 * v19 + v20 * v20 + v21 * v21) >> 30 == 0)
  {
    v38 = v16 * v12 + v17 * v13 + v18 * v15;
    v39 = v23 * v22 - v38 * v38;
    if (!v39)
    {
      if (a4 < 1)
        return result;
      if (a4 >= 8)
      {
        v44 = 0;
        if ((unint64_t)((char *)a9 - (char *)result) >= 0x20
          && (unint64_t)((char *)a9 - (char *)a2) >= 0x20
          && (unint64_t)((char *)a9 - (char *)a3) >= 0x20)
        {
          v44 = a4 & 0x7FFFFFF8;
          v69 = result + 1;
          v70 = a9 + 1;
          v71 = a2 + 1;
          v72 = a3 + 1;
          v73 = a4 & 0xFFFFFFF8;
          do
          {
            v74 = vsubq_s32(vaddq_s32(v71[-1], v69[-1]), v72[-1]);
            v75 = vsubq_s32(vaddq_s32(*v71, *v69), *v72);
            v69 += 2;
            v70[-1] = v74;
            *v70 = v75;
            v70 += 2;
            v71 += 2;
            v72 += 2;
            v73 -= 8;
          }
          while (v73);
          if (v44 == a4)
            return result;
        }
      }
      else
      {
        v44 = 0;
      }
      v76 = a4 - v44;
      v77 = v44;
      v78 = &a9->i32[v44];
      v79 = &a3->i32[v44];
      v80 = &a2->i32[v77];
      v81 = &result->i32[v77];
      do
      {
        v83 = *v81++;
        v82 = v83;
        v85 = *v80++;
        v84 = v85;
        v86 = *v79++;
        *v78++ = v84 + v82 - v86;
        --v76;
      }
      while (v76);
      return result;
    }
    v40 = v19 * v12 + v20 * v13 + v21 * v15;
    v41 = v19 * v16 + v20 * v17 + v21 * v18;
    if (v39 >= 0x80)
    {
      v52 = __clz(v39);
      v53 = 57 - v52;
      v54 = 1 << (56 - v52);
      v39 = (uint64_t)(v54 + v39) >> v53;
      v55 = v40 * v23 - v41 * v38;
      if (v55 < 0)
        v42 = -(uint64_t)((unint64_t)(v54 - v55) >> v53);
      else
        v42 = (unint64_t)(v54 + v55) >> v53;
      if (v42 >= 0x3FFFFFFFFFFFLL)
        v42 = 0x3FFFFFFFFFFFLL;
      if (v42 <= (uint64_t)0xFFFFC00000000001)
        v42 = 0xFFFFC00000000001;
      v56 = v41 * v22 - v40 * v38;
      if (v56 < 0)
        v43 = -(uint64_t)((unint64_t)(v54 - v56) >> v53);
      else
        v43 = (unint64_t)(v54 + v56) >> v53;
    }
    else
    {
      v42 = v40 * v23 - v41 * v38;
      if (v42 >= 0x3FFFFFFFFFFFLL)
        v42 = 0x3FFFFFFFFFFFLL;
      if (v42 <= (uint64_t)0xFFFFC00000000001)
        v42 = 0xFFFFC00000000001;
      v43 = v41 * v22 - v40 * v38;
    }
    if (v43 >= 0x3FFFFFFFFFFFLL)
      v43 = 0x3FFFFFFFFFFFLL;
    v57 = 0xFFFFC00000000001;
    if (v43 > (uint64_t)0xFFFFC00000000001)
      v57 = v43;
    v58 = gcl::tmesh::approximateInverseLut[v39 - 1];
    if (v42 * v58 >= 0x3FFFFFFF)
      v59 = 0x3FFFFFFFLL;
    else
      v59 = v42 * v58;
    if (v59 <= -1073741823)
      v59 = -1073741823;
    v60 = v57 * v58;
    if (v60 >= 0x3FFFFFFF)
      v60 = 0x3FFFFFFFLL;
    if (v60 <= -1073741823)
      v60 = -1073741823;
    if (a4 >= 1)
    {
      v61 = a4;
      do
      {
        v63 = result->i32[0];
        result = (int32x4_t *)((char *)result + 4);
        v64 = v59 * v63;
        v65 = a2->i32[0];
        a2 = (int32x4_t *)((char *)a2 + 4);
        v66 = v60 * v65 + v64;
        v67 = a3->i32[0];
        a3 = (int32x4_t *)((char *)a3 + 4);
        v68 = v66 + (0x10000 - (v59 + v60)) * v67;
        if (v68 < 0)
          v62 = -(uint64_t)((unint64_t)(0x8000 - v68) >> 16);
        else
          v62 = (unint64_t)(v68 + 0x8000) >> 16;
        if (v62 >= 0x3FFFFFFF)
          v62 = 0x3FFFFFFFLL;
        if (v62 <= -1073741823)
          LODWORD(v62) = -1073741823;
        v9->i32[0] = v62;
        v9 = (int32x4_t *)((char *)v9 + 4);
        --v61;
      }
      while (v61);
    }
  }
  else
  {
    if (a4 < 1)
      return result;
    if (a4 < 8)
    {
      v26 = 0;
LABEL_11:
      v27 = a4 - v26;
      v28 = v26;
      v29 = &a9->i32[v26];
      v30 = &a3->i32[v26];
      v31 = &a2->i32[v28];
      v32 = &result->i32[v28];
      do
      {
        v34 = *v32++;
        v33 = v34;
        v36 = *v31++;
        v35 = v36;
        v37 = *v30++;
        *v29++ = v35 + v33 - v37;
        --v27;
      }
      while (v27);
      return result;
    }
    v26 = 0;
    if ((unint64_t)((char *)a9 - (char *)result) < 0x20)
      goto LABEL_11;
    if ((unint64_t)((char *)a9 - (char *)a2) < 0x20)
      goto LABEL_11;
    if ((unint64_t)((char *)a9 - (char *)a3) < 0x20)
      goto LABEL_11;
    v26 = a4 & 0xFFFFFFF8;
    v45 = result + 1;
    v46 = a9 + 1;
    v47 = a2 + 1;
    v48 = a3 + 1;
    v49 = v26;
    do
    {
      v50 = vsubq_s32(vaddq_s32(v47[-1], v45[-1]), v48[-1]);
      v51 = vsubq_s32(vaddq_s32(*v47, *v45), *v48);
      v45 += 2;
      v46[-1] = v50;
      *v46 = v51;
      v46 += 2;
      v47 += 2;
      v48 += 2;
      v49 -= 8;
    }
    while (v49);
    if (v26 != a4)
      goto LABEL_11;
  }
  return result;
}

int *gcl::tmesh::ComputeTexCoordinatesPrediction(int *result, int *a2, _DWORD *a3, _DWORD *a4, int *a5, int a6, int *a7)
{
  int v7;
  int v8;
  int v9;
  int v10;
  unint64_t v11;
  int v12;
  int v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  BOOL v17;
  int v20;
  int v21;
  int v22;
  BOOL v23;
  int v24;
  char v25;
  char v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v7 = a4[1];
  v8 = a3[1];
  v9 = a4[2];
  v10 = a3[2];
  v11 = (v7 - v8) * (uint64_t)(v7 - v8) + (*a4 - *a3) * (uint64_t)(*a4 - *a3) + (v9 - v10) * (uint64_t)(v9 - v10);
  v12 = *a5;
  v13 = a5[1];
  v14 = a5[2];
  v15 = (v13 - v8) * (uint64_t)(v13 - v8) + (v12 - *a3) * (uint64_t)(v12 - *a3) + (v14 - v10) * (uint64_t)(v14 - v10);
  v16 = (v13 - v7) * (uint64_t)(v13 - v7) + (v12 - *a4) * (uint64_t)(v12 - *a4) + (v14 - v9) * (uint64_t)(v14 - v9);
  if (v11 >> 28)
    v17 = 0;
  else
    v17 = v15 >> 28 == 0;
  if (!v17 || v16 >> 28 != 0 || v11 == 0)
  {
    v20 = *a2 + *result;
    if (v20 < 0 != __OFADD__(*a2, *result))
      ++v20;
    *a7 = v20 >> 1;
    v21 = result[1];
    v22 = a2[1];
    v23 = __OFADD__(v22, v21);
    v24 = v22 + v21;
    if (v24 < 0 != v23)
      ++v24;
    a7[1] = v24 >> 1;
  }
  else
  {
    v25 = __clz(v11);
    v26 = 57 - v25;
    v27 = 1 << (56 - v25);
    v28 = (v27 + v11) >> v26;
    v29 = (v27 + v15) >> v26;
    v30 = (v27 + v16) >> v26;
    if (v11 >= 0x80)
    {
      v16 = v30;
      v15 = v29;
      v11 = v28;
    }
    v31 = gcl::tmesh::approximateInverseLut[v11 - 1];
    v32 = (v15 - v16) * v31;
    v33 = 1073676288;
    if (v32 < 1073676288)
      v33 = v32;
    v34 = v33 + 0x10000;
    v35 = v32 < -1073807360;
    v36 = -1073741824;
    if (!v35)
      v36 = v34;
    v37 = ((v15 * v31) << 18) - v36 * v36;
    if (v37 >= 0xFFFFFFFFLL)
      v37 = 0xFFFFFFFFLL;
    LODWORD(v37) = v37 & ~(v37 >> 63);
    v38 = *result;
    v39 = result[1];
    v40 = *a2 - v38;
    v41 = a2[1] - v39;
    v42 = __clz(v37);
    if (v37 >= 2)
      v37 = ((v37 >> ((32 - v42) >> 1)) + (1 << ((32 - v42) >> 1))) >> 1;
    else
      v37 = v37;
    v43 = v37 * *((int *)&qword_19FFB2608 + a6);
    v44 = v36 * v40 + v43 * v41;
    if (v44 >= 0)
      v45 = (unint64_t)(v44 + 0x10000) >> 17;
    else
      v45 = -(uint64_t)((unint64_t)(0x10000 - v44) >> 17);
    v46 = v45 + v38;
    v47 = v36 * v41 - v43 * v40;
    if (v47 >= 0)
      v48 = (unint64_t)(v47 + 0x10000) >> 17;
    else
      v48 = -(uint64_t)((unint64_t)(0x10000 - v47) >> 17);
    v49 = v48 + v39;
    if (v46 >= 0x3FFFFFFF)
      v50 = 0x3FFFFFFFLL;
    else
      v50 = v46;
    if (v50 <= -1073741823)
      LODWORD(v50) = -1073741823;
    if (v49 >= 0x3FFFFFFF)
      v49 = 0x3FFFFFFFLL;
    if (v49 <= -1073741823)
      LODWORD(v49) = -1073741823;
    *a7 = v50;
    a7[1] = v49;
  }
  return result;
}

unint64_t gcl::tmesh::ComputeTexCoordinatesPrediction(unint64_t result, int *a2, int *a3, _DWORD *a4, _DWORD *a5, int *a6, int *a7)
{
  int v7;
  int v8;
  int v9;
  int v10;
  unint64_t v11;
  int v12;
  int v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  BOOL v17;
  int v20;
  int v21;
  int v22;
  BOOL v23;
  int v24;
  char v25;
  char v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v7 = a5[1];
  v8 = a4[1];
  v9 = a5[2];
  v10 = a4[2];
  v11 = (v7 - v8) * (uint64_t)(v7 - v8) + (*a5 - *a4) * (uint64_t)(*a5 - *a4) + (v9 - v10) * (uint64_t)(v9 - v10);
  v12 = *a6;
  v13 = a6[1];
  v14 = a6[2];
  v15 = (v13 - v8) * (uint64_t)(v13 - v8) + (v12 - *a4) * (uint64_t)(v12 - *a4) + (v14 - v10) * (uint64_t)(v14 - v10);
  v16 = (v13 - v7) * (uint64_t)(v13 - v7) + (v12 - *a5) * (uint64_t)(v12 - *a5) + (v14 - v9) * (uint64_t)(v14 - v9);
  if (v11 >> 28)
    v17 = 0;
  else
    v17 = v15 >> 28 == 0;
  if (!v17 || v16 >> 28 != 0 || v11 == 0)
  {
    v20 = *a2 + *(_DWORD *)result;
    if (v20 < 0 != __OFADD__(*a2, *(_DWORD *)result))
      ++v20;
    *a7 = v20 >> 1;
    v21 = *(_DWORD *)(result + 4);
    v22 = a2[1];
    v23 = __OFADD__(v22, v21);
    v24 = v22 + v21;
    if (v24 < 0 != v23)
      ++v24;
    a7[1] = v24 >> 1;
  }
  else
  {
    v25 = __clz(v11);
    v26 = 57 - v25;
    v27 = 1 << (56 - v25);
    v28 = (v27 + v11) >> v26;
    v29 = (v27 + v15) >> v26;
    v30 = (v27 + v16) >> v26;
    if (v11 >= 0x80)
    {
      v16 = v30;
      v15 = v29;
      v11 = v28;
    }
    v31 = gcl::tmesh::approximateInverseLut[v11 - 1];
    v32 = (v15 - v16) * v31;
    v33 = 1073676288;
    if (v32 < 1073676288)
      v33 = v32;
    v34 = v33 + 0x10000;
    v35 = v32 < -1073807360;
    v36 = -1073741824;
    if (!v35)
      v36 = v34;
    v37 = ((v15 * v31) << 18) - v36 * v36;
    if (v37 >= 0xFFFFFFFFLL)
      v37 = 0xFFFFFFFFLL;
    LODWORD(v37) = v37 & ~(v37 >> 63);
    v38 = *(int *)result;
    v39 = *(int *)(result + 4);
    v40 = *a2 - v38;
    v41 = a2[1] - v39;
    v42 = (32 - __clz(v37)) >> 1;
    result = v37 >> v42;
    if (v37 >= 2)
      v37 = (result + (1 << v42)) >> 1;
    else
      v37 = v37;
    if ((v39 - a3[1]) * v40 < (v38 - *a3) * v41)
      v37 = -v37;
    v43 = v36 * v40 - v37 * v41;
    if (v43 >= 0)
      v44 = (unint64_t)(v43 + 0x10000) >> 17;
    else
      v44 = -(uint64_t)((unint64_t)(0x10000 - v43) >> 17);
    v45 = v44 + v38;
    v46 = v36 * v41 + v37 * v40;
    if (v46 >= 0)
      v47 = (unint64_t)(v46 + 0x10000) >> 17;
    else
      v47 = -(uint64_t)((unint64_t)(0x10000 - v46) >> 17);
    v48 = v47 + v39;
    if (v45 >= 0x3FFFFFFF)
      v49 = 0x3FFFFFFFLL;
    else
      v49 = v45;
    if (v49 <= -1073741823)
      LODWORD(v49) = -1073741823;
    if (v48 >= 0x3FFFFFFF)
      v48 = 0x3FFFFFFFLL;
    if (v48 <= -1073741823)
      LODWORD(v48) = -1073741823;
    *a7 = v49;
    a7[1] = v48;
  }
  return result;
}

uint64_t mc_split(uint64_t a1, int a2, float a3)
{
  uint64_t v6;
  int v7;
  char *v8;
  char *v9;
  char *v10;
  unint64_t v11;
  _DWORD *v12;
  int *v13;
  int v14;
  unint64_t v15;
  float v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  int v25;
  int v26;
  int v27;
  BOOL v29;
  char *v31;
  float *v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float *v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float *v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  int v57;
  int v58;
  float v59;
  float v60;
  float *v61;
  float *v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  int v70;
  int v71;
  float *v72;
  float v73;
  float v74;
  float v75;
  float v76;
  _BOOL4 v77;
  BOOL v78;
  int v79;
  int v80;
  uint64_t v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  char *v87;
  char *v88;
  unsigned int v89;
  float *v90;
  uint64_t v91;
  unsigned int v92;
  int32x2_t *v93;
  int v94;
  float32x2_t *v95;
  float v96;
  float v97;
  float32x2_t v98;
  float32x2_t v99;
  float32x2_t v100;
  float v101;
  float v102;
  float64x2_t v103;
  double v108;
  double v109;
  float v110;
  float v112;
  float v113;
  float *v114;
  float *v115;
  float *v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float32x2_t v127;
  float32x2_t v128;
  float v129;
  float v130;
  float v131;
  BOOL v132;
  float v133;
  char *v134;
  float v135;
  float v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  char *v140;
  char *v141;
  char *v142;
  char *v143;
  char *v144;
  int v145;
  unsigned int v146;
  char *v147;
  int v148;
  char *v149;
  int v150;
  int v151;
  int v152;
  int v153;
  int v154;
  int v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  int v162;
  int v163;
  int v164;
  uint64_t v165;
  int v166;
  uint64_t v167;
  int v168;
  uint64_t v169;
  int v170;
  int v171;
  int v172;
  int v173;
  char *v174;
  uint64_t v175;
  unint64_t v176;
  unsigned int v177;
  uint64_t v178;
  uint64_t v179;
  int v180;
  int v181;
  int v182;
  int v187;
  unsigned int v188;
  int v189;
  unsigned int v190;
  int v191;
  int v192;
  uint64_t v193;
  uint64_t v194;

  v6 = *(unsigned int *)(a1 + 160);
  v7 = *(_DWORD *)(a1 + 136);
  v8 = (char *)malloc_type_malloc(12 * (_DWORD)v6, 0x100004052888210uLL);
  v9 = (char *)malloc_type_malloc(4 * (3 * *(_DWORD *)(a1 + 160)), 0x100004052888210uLL);
  v10 = v9;
  if (*(_DWORD *)(a1 + 160))
  {
    v11 = 0;
    v12 = v9 + 8;
    v13 = (int *)(*(_QWORD *)(a1 + 168) + 8);
    do
    {
      *(v12 - 2) = *(v13 - 2);
      *(v12 - 1) = *(v13 - 1);
      v14 = *v13;
      v13 += 4;
      *v12 = v14;
      v12 += 3;
      ++v11;
      v15 = *(unsigned int *)(a1 + 160);
    }
    while (v11 < v15);
  }
  else
  {
    LODWORD(v15) = 0;
  }
  v16 = a3 * a3;
  mc_create_corner_table(v15, *(_DWORD *)(a1 + 136), v10, v8, 0);
  free(v10);
  v17 = 0;
  v18 = 10;
  v189 = a2;
  do
  {
    v19 = *(_DWORD *)(a1 + 160);
    if (v17 >= (int)v19)
      goto LABEL_149;
    v20 = 0;
    v188 = v18;
    v187 = v18 - 1;
    v21 = v17;
    v22 = *(char **)(a1 + 168);
    v23 = v22;
    v190 = *(_DWORD *)(a1 + 160);
    do
    {
      while (1)
      {
        v24 = &v23[16 * v21];
        v25 = *(_DWORD *)v24;
        if (*(_DWORD *)v24 == -1)
          goto LABEL_9;
        v26 = *((_DWORD *)v24 + 1);
        if (v26 == -1)
          goto LABEL_9;
        v27 = *((_DWORD *)v24 + 2);
        _ZF = v26 == v27 || v25 == v27;
        v29 = _ZF || v25 == v26;
        if (v29 || v27 == -1)
          goto LABEL_9;
        v31 = *(char **)(a1 + 144);
        if (a2)
        {
          v32 = (float *)&v31[12 * v25];
          v33 = v32[1];
          v34 = v32[2];
          v35 = sqrt((float)((float)((float)(*v32 * *v32) + (float)(v33 * v33)) + (float)(v34 * v34))) + 0.000001;
          v36 = 1.0 / v35;
          v37 = *v32 * v36;
          v38 = v33 * v36;
          v39 = v34 * v36;
          v40 = (float *)&v31[12 * v26];
          v41 = v40[1];
          v42 = v40[2];
          v43 = sqrt((float)((float)((float)(*v40 * *v40) + (float)(v41 * v41)) + (float)(v42 * v42))) + 0.000001;
          v44 = 1.0 / v43;
          v45 = *v40 * v44;
          v46 = v41 * v44;
          v47 = v42 * v44;
          v48 = (float *)&v31[12 * v27];
          v49 = v48[1];
          v50 = v48[2];
          v51 = sqrt((float)((float)((float)(*v48 * *v48) + (float)(v49 * v49)) + (float)(v50 * v50))) + 0.000001;
          v52 = 1.0 / v51;
          v53 = *v48 * v52;
          v54 = v49 * v52;
          v55 = v50 * v52;
          v56 = (float)((float)((float)(v45 - v53) * (float)(v45 - v53))
                      + (float)((float)(v46 - v54) * (float)(v46 - v54)))
              + (float)((float)(v47 - v55) * (float)(v47 - v55));
          v57 = v56 <= v16;
          if (v56 <= 0.0)
            v57 = 1;
          if (v57)
            v56 = 0.0;
          v58 = v57 << 31 >> 31;
          v59 = (float)((float)((float)(v53 - v37) * (float)(v53 - v37))
                      + (float)((float)(v54 - v38) * (float)(v54 - v38)))
              + (float)((float)(v55 - v39) * (float)(v55 - v39));
          if (v59 > v16 && v59 > v56)
            v58 = 1;
          else
            v59 = v56;
          v60 = (float)((float)((float)(v37 - v45) * (float)(v37 - v45))
                      + (float)((float)(v38 - v46) * (float)(v38 - v46)))
              + (float)((float)(v39 - v47) * (float)(v39 - v47));
          if (v60 <= v16)
            goto LABEL_45;
        }
        else
        {
          v61 = (float *)&v31[12 * v26];
          v62 = (float *)&v31[12 * v27];
          v63 = *v61;
          v64 = v61[1];
          v65 = *v62;
          v66 = v62[1];
          v67 = v61[2];
          v68 = v62[2];
          v69 = (float)((float)((float)(*v61 - *v62) * (float)(*v61 - *v62))
                      + (float)((float)(v64 - v66) * (float)(v64 - v66)))
              + (float)((float)(v67 - v68) * (float)(v67 - v68));
          v70 = v69 <= v16;
          if (v69 <= 0.0)
            v70 = 1;
          v71 = v70 << 31 >> 31;
          if (v70)
            v69 = 0.0;
          v72 = (float *)&v31[12 * v25];
          v73 = *v72;
          v74 = v72[1];
          v75 = (float)((float)(v65 - *v72) * (float)(v65 - *v72)) + (float)((float)(v66 - v74) * (float)(v66 - v74));
          v76 = v72[2];
          v59 = v75 + (float)((float)(v68 - v76) * (float)(v68 - v76));
          LODWORD(v72) = v59 > v16;
          v77 = v59 > v69;
          v78 = (v72 & v77) == 0;
          if ((v72 & v77) != 0)
            v58 = 1;
          else
            v58 = v71;
          if (v78)
            v59 = v69;
          v60 = (float)((float)((float)(v73 - v63) * (float)(v73 - v63))
                      + (float)((float)(v74 - v64) * (float)(v74 - v64)))
              + (float)((float)(v76 - v67) * (float)(v76 - v67));
          if (v60 <= v16)
            goto LABEL_45;
        }
        if (v60 > v59)
        {
          v58 = 2;
          break;
        }
LABEL_45:
        if ((v58 & 0x80000000) == 0)
          break;
LABEL_9:
        if (v19 == (_DWORD)++v21)
          goto LABEL_146;
      }
      v79 = v58 + 3 * v21;
      v80 = *(_DWORD *)&v8[4 * v79];
      if (v80 < 0)
        v81 = 0xFFFFFFFFLL;
      else
        v81 = (v80 / 3);
      if (v80 < 0)
        v82 = -1;
      else
        v82 = v80 % 3;
      if ((int)v81 >= 0)
        v83 = 4;
      else
        v83 = 2;
      v191 = v82;
      if (v83 + *(_DWORD *)(a1 + 160) > v6)
      {
        v6 = (int)fmax((double)(int)v6 * 1.5, 100000.0);
        v8 = (char *)malloc_type_realloc(v8, 12 * (_DWORD)v6, 0x100004052888210uLL);
        v22 = (char *)malloc_type_realloc(*(void **)(a1 + 168), 16 * (int)v6, 0x1000040451B5BE8uLL);
        *(_QWORD *)(a1 + 168) = v22;
        v31 = *(char **)(a1 + 144);
      }
      v84 = *(_DWORD *)(a1 + 136);
      v194 = v6;
      if (v84 + 1 <= v7)
      {
        v192 = v7;
      }
      else
      {
        v192 = (int)fmax((double)v7 * 1.5, 100000.0);
        v31 = (char *)malloc_type_realloc(v31, 12 * v192, 0x10000403E1C8BA9uLL);
        *(_QWORD *)(a1 + 144) = v31;
        v22 = *(char **)(a1 + 168);
        v84 = *(_DWORD *)(a1 + 136);
      }
      v85 = v79 / 3;
      v86 = v79 % 3;
      v87 = &v22[16 * (v79 / 3)];
      if ((int)v81 < 0)
        v88 = 0;
      else
        v88 = &v22[16 * v81];
      v89 = *(_DWORD *)&v87[4
                          * (char)(v86
                                 + 1
                                 - 3
                                 * ((((86 * (char)(v86 + 1)) & 0x8000) != 0)
                                  + ((unsigned __int16)(86 * (char)(v86 + 1)) >> 8)))];
      v90 = (float *)&v31[12 * v89];
      if ((v86 + 2) >= 3)
        v91 = (v86 - 1);
      else
        v91 = (v86 + 2);
      v92 = *(_DWORD *)&v87[4 * v91];
      v93 = (int32x2_t *)&v31[12 * v92];
      v94 = v84;
      v95 = (float32x2_t *)&v31[12 * v84];
      v193 = v91;
      if (a2)
      {
        v96 = *(float *)&v31[12 * v89 + 8];
        v97 = *(float *)&v31[12 * v92 + 8];
        v98 = (float32x2_t)vzip1_s32(*v93, *(int32x2_t *)v90);
        v99 = (float32x2_t)vzip2_s32(*v93, *(int32x2_t *)v90);
        v100 = vsqrt_f32(vmla_f32(vmla_f32(vmul_f32(v98, v98), v99, v99), (float32x2_t)__PAIR64__(LODWORD(v96), LODWORD(v97)), (float32x2_t)__PAIR64__(LODWORD(v96), LODWORD(v97))));
        LODWORD(v101) = vsub_f32((float32x2_t)vdup_lane_s32((int32x2_t)v100, 1), v100).u32[0];
        v102 = 0.5;
        if (fabsf(v101) > 0.001)
        {
          v103 = vcvtq_f64_f32(v100);
          __asm { FMOV            V16.2D, #1.0 }
          v103.f64[0] = (float)(vaddv_f32(vcvt_f32_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)vdupq_n_s64(0x3E112E0BE826D695uLL), v103), (int8x16_t)vdupq_n_s64(0x41CDCD64FFFFFFFFuLL), (int8x16_t)vdivq_f64(_Q16, v103))))* 0.5);
          v108 = 1.0 / v103.f64[0];
          _NF = v103.f64[0] < 0.000000001;
          v109 = 1000000000.0;
          if (!_NF)
            v109 = v108;
          v110 = v109;
          v102 = (float)(v110 - v100.f32[0]) / v101;
        }
        if (v102 > 0.9 || v102 < 0.1)
          v112 = 0.5;
        else
          v112 = v102;
        *v95 = vmla_n_f32(vmul_n_f32(*(float32x2_t *)v90, v112), (float32x2_t)*v93, 1.0 - v112);
        v113 = (float)(v112 * v96) + (float)((float)(1.0 - v112) * v97);
        goto LABEL_96;
      }
      v114 = (float *)&v31[12 * *(unsigned int *)v87];
      v115 = (float *)&v31[12 * *((unsigned int *)v87 + 1)];
      v116 = (float *)&v31[12 * *((unsigned int *)v87 + 2)];
      v117 = v114[1];
      v118 = v115[1];
      v119 = v114[2];
      v120 = v115[2];
      v121 = (float)((float)((float)(*v114 - *v115) * (float)(*v114 - *v115))
                   + (float)((float)(v117 - v118) * (float)(v117 - v118)))
           + (float)((float)(v119 - v120) * (float)(v119 - v120));
      v122 = v116[1];
      v123 = (float)((float)(*v114 - *v116) * (float)(*v114 - *v116))
           + (float)((float)(v117 - v122) * (float)(v117 - v122));
      v124 = v116[2];
      v125 = v123 + (float)((float)(v119 - v124) * (float)(v119 - v124));
      v126 = fminf(fminf(v121, v125), (float)((float)((float)(*v115 - *v116) * (float)(*v115 - *v116))+ (float)((float)(v118 - v122) * (float)(v118 - v122)))+ (float)((float)(v120 - v124) * (float)(v120 - v124)));
      v127 = *(float32x2_t *)v90;
      v128 = vsub_f32(*(float32x2_t *)v90, (float32x2_t)*v93);
      v129 = vaddv_f32(vmul_f32(v128, v128));
      v130 = *(float *)&v31[12 * v89 + 8];
      v131 = *(float *)&v31[12 * v92 + 8];
      if ((float)(v126 / (float)(v129 + (float)((float)(v130 - v131) * (float)(v130 - v131)))) >= 0.01)
      {
        *v95 = vmul_f32(vadd_f32((float32x2_t)*v93, v127), (float32x2_t)0x3F0000003F000000);
        v113 = (float)(v131 + v130) * 0.5;
        goto LABEL_96;
      }
      if (v121 == v126)
      {
        v116 = (float *)&v31[12 * *((unsigned int *)v87 + 1)];
LABEL_83:
        v115 = (float *)&v31[12 * *(unsigned int *)v87];
        goto LABEL_84;
      }
      if (v125 == v126)
        goto LABEL_83;
LABEL_84:
      v132 = v116 == v90 || v115 == v90;
      if (v132)
        LODWORD(v133) = *(_QWORD *)v90;
      else
        LODWORD(v133) = *v93;
      if (v132)
        v134 = &v31[12 * v89];
      else
        v134 = &v31[12 * v92];
      if (v132)
      {
        v127.i32[0] = (__int32)*v93;
        v90 = (float *)&v31[12 * v92];
      }
      v95->f32[0] = v133 + (float)((float)(v127.f32[0] - v133) * 0.25);
      v135 = *((float *)v134 + 2);
      v136 = v90[2];
      *(float *)&v31[12 * v94 + 4] = *((float *)v134 + 1) + (float)((float)(v90[1] - *((float *)v134 + 1)) * 0.25);
      v113 = v135 + (float)((float)(v136 - v135) * 0.25);
LABEL_96:
      v137 = v85;
      *(float *)&v31[12 * v94 + 8] = v113;
      bzero(&v22[16 * *(unsigned int *)(a1 + 160)], (16 * v83));
      v138 = *(char **)(a1 + 168);
      v139 = 4 * v86;
      v140 = &v138[16 * *(unsigned int *)(a1 + 160)];
      *(_DWORD *)v140 = *(_DWORD *)&v87[v139];
      *((_DWORD *)v140 + 1) = *(_DWORD *)&v87[4
                                            * (char)(v86
                                                   + 1
                                                   - 3
                                                   * ((((86 * (char)(v86 + 1)) & 0x8000) != 0)
                                                    + ((unsigned __int16)(86 * (char)(v86 + 1)) >> 8)))];
      *((_DWORD *)v140 + 2) = *(_DWORD *)(a1 + 136);
      v141 = &v22[16 * v137];
      *((_DWORD *)v140 + 3) = *((_DWORD *)v141 + 3);
      v142 = &v138[16 * (*(_DWORD *)(a1 + 160) + 1)];
      *(_DWORD *)v142 = *(_DWORD *)&v87[4 * v193];
      *((_DWORD *)v142 + 1) = *(_DWORD *)&v87[v139];
      *((_DWORD *)v142 + 2) = *(_DWORD *)(a1 + 136);
      *((_DWORD *)v142 + 3) = *((_DWORD *)v141 + 3);
      if (v88)
      {
        v143 = &v138[16 * (*(_DWORD *)(a1 + 160) + 2)];
        *(_DWORD *)v143 = *(_DWORD *)&v88[4 * v191];
        *((_DWORD *)v143 + 1) = *(_DWORD *)&v88[4
                                              * (char)(v191
                                                     + 1
                                                     - 3
                                                     * ((((86 * (char)(v191 + 1)) & 0x8000) != 0)
                                                      + ((unsigned __int16)(86 * (char)(v191 + 1)) >> 8)))];
        *((_DWORD *)v143 + 2) = *(_DWORD *)(a1 + 136);
        *((_DWORD *)v143 + 3) = *((_DWORD *)v88 + 3);
        v144 = &v138[16 * (*(_DWORD *)(a1 + 160) + 3)];
        v145 = v191 + 2;
        if ((v191 + 2) >= 3)
          v145 = v191 - 1;
        *(_DWORD *)v144 = *(_DWORD *)&v88[4 * v145];
        *((_DWORD *)v144 + 1) = *(_DWORD *)&v88[4 * v191];
        *((_DWORD *)v144 + 2) = *(_DWORD *)(a1 + 136);
        *((_DWORD *)v144 + 3) = *((_DWORD *)v88 + 3);
      }
      v146 = *(_DWORD *)(a1 + 160);
      v6 = v194;
      v19 = v190;
      if (v146 < v146 + v83)
      {
        v147 = &v8[12 * v146 + 8];
        do
        {
          *((_QWORD *)v147 - 1) = -1;
          *(_DWORD *)v147 = -1;
          v147 += 12;
          ++v146;
        }
        while (*(_DWORD *)(a1 + 160) + v83 > v146);
        v146 = *(_DWORD *)(a1 + 160);
      }
      v148 = *(_DWORD *)&v138[16 * v146];
      v149 = &v138[16 * v137];
      if (v148 == *(_DWORD *)v149)
      {
        v150 = 0;
        if ((v81 & 0x80000000) != 0)
          goto LABEL_106;
      }
      else
      {
        if (v148 == *((_DWORD *)v149 + 1))
          v150 = 1;
        else
          v150 = 2;
        if ((v81 & 0x80000000) != 0)
        {
LABEL_106:
          v151 = 0;
          v152 = 3 * v146;
          v153 = -1;
          v154 = 3 * v146;
          goto LABEL_117;
        }
      }
      v155 = *(_DWORD *)&v138[16 * v146 + 32];
      v156 = &v138[16 * v81];
      if (v155 == *(_DWORD *)v156)
      {
        v151 = 0;
      }
      else if (v155 == *((_DWORD *)v156 + 1))
      {
        v151 = 1;
      }
      else
      {
        v151 = 2;
      }
      v153 = 3 * v146;
      v152 = 3 * v146 + 10;
      *(_DWORD *)&v8[12 * v146] = v152;
      v154 = 3 * v146;
LABEL_117:
      *(_DWORD *)&v8[4 * v152] = v153;
      v157 = v154 + 1;
      *(_DWORD *)&v8[4 * v157] = v154 + 3;
      *(_DWORD *)&v8[4 * v154 + 12] = v157;
      v158 = 3 * v137;
      v159 = v150 - 1;
      if (!v150)
        v159 = 2;
      v160 = 4 * (v159 + (int)v158);
      v161 = v154 + 2;
      *(_DWORD *)&v8[4 * v161] = *(_DWORD *)&v8[v160];
      v162 = *(_DWORD *)&v8[v160];
      if ((v162 & 0x80000000) == 0)
        *(_DWORD *)&v8[4 * v162] = v161;
      if ((int)v81 < 0)
        v163 = -1;
      else
        v163 = v154 + 6;
      *(_DWORD *)&v8[4 * v154 + 16] = v163;
      a2 = v189;
      if ((v81 & 0x80000000) == 0)
        *(_DWORD *)&v8[4 * v154 + 24] = v154 + 4;
      if (v150 == 2)
        v164 = 0;
      else
        v164 = v150 + 1;
      v165 = 4 * (v164 + (int)v158);
      *(_DWORD *)&v8[4 * v154 + 20] = *(_DWORD *)&v8[v165];
      v166 = *(_DWORD *)&v8[v165];
      if ((v166 & 0x80000000) == 0)
        *(_DWORD *)&v8[4 * v166] = v154 + 5;
      if ((v81 & 0x80000000) != 0)
      {
        *(_DWORD *)&v8[4 * v158 + 8] = -1;
        v167 = (int)v158;
        *(_DWORD *)&v8[4 * (int)v158 + 4] = -1;
      }
      else
      {
        *(_DWORD *)&v8[4 * v154 + 28] = v154 + 9;
        *(_DWORD *)&v8[4 * v154 + 36] = v154 + 7;
        v167 = (3 * v81);
        v168 = v151 + 2;
        if ((v151 + 2) >= 3)
          v168 = v151 - 1;
        v169 = 4 * (v168 + (int)v167);
        *(_DWORD *)&v8[4 * v154 + 32] = *(_DWORD *)&v8[v169];
        v170 = *(_DWORD *)&v8[v169];
        if ((v170 & 0x80000000) == 0)
          *(_DWORD *)&v8[4 * v170] = v154 + 8;
        if (v151 == 2)
          v171 = 0;
        else
          v171 = v151 + 1;
        v172 = *(_DWORD *)&v8[4 * v171 + 4 * (int)v167];
        if ((v172 & 0x80000000) == 0)
        {
          v173 = v154 + 11;
          *(_DWORD *)&v8[4 * v173] = v172;
          *(_DWORD *)&v8[4 * v172] = v173;
        }
        v174 = &v8[4 * (int)v158];
        *((_DWORD *)v174 + 2) = -1;
        *(_QWORD *)v174 = -1;
        *(_DWORD *)&v8[4 * (int)v167 + 8] = -1;
        *(_DWORD *)&v8[4 * (v167 + 1)] = -1;
      }
      *(_DWORD *)&v8[4 * v167] = -1;
      *(_DWORD *)(a1 + 160) += v83;
      ++*(_DWORD *)(a1 + 136);
      *((_DWORD *)v87 + 2) = -1;
      *(_QWORD *)v87 = -1;
      if (v88)
      {
        *((_DWORD *)v88 + 2) = -1;
        *(_QWORD *)v88 = -1;
      }
      v20 = 1;
      v23 = v138;
      v7 = v192;
      ++v21;
      v22 = v138;
    }
    while (v190 != (_DWORD)v21);
LABEL_146:
    if (!v20)
      break;
    v17 = v19;
    v18 = v187;
  }
  while (v188 >= 2);
  v19 = *(_DWORD *)(a1 + 160);
LABEL_149:
  if (v19)
  {
    v175 = 0;
    v176 = 0;
    v177 = 0;
    do
    {
      v178 = *(_QWORD *)(a1 + 168);
      v179 = v178 + v175;
      v180 = *(_DWORD *)(v178 + v175);
      if (v180 != -1)
      {
        v181 = *(_DWORD *)(v179 + 4);
        if (v181 != -1)
        {
          v182 = *(_DWORD *)(v178 + v175 + 8);
          if (v181 != v182 && v180 != v182 && v180 != v181 && v182 != -1)
          {
            *(_OWORD *)(v178 + 16 * (int)v177++) = *(_OWORD *)v179;
            v19 = *(_DWORD *)(a1 + 160);
          }
        }
      }
      ++v176;
      v175 += 16;
    }
    while (v176 < v19);
  }
  else
  {
    v177 = 0;
  }
  *(_DWORD *)(a1 + 160) = v177;
  *(_QWORD *)(a1 + 168) = malloc_type_realloc(*(void **)(a1 + 168), 16 * v177, 0x1000040451B5BE8uLL);
  *(_QWORD *)(a1 + 144) = malloc_type_realloc(*(void **)(a1 + 144), 12 * *(unsigned int *)(a1 + 136), 0x10000403E1C8BA9uLL);
  *(_QWORD *)(a1 + 152) = malloc_type_realloc(*(void **)(a1 + 152), 12 * *(unsigned int *)(a1 + 136), 0x10000403E1C8BA9uLL);
  free(v8);
  return 1;
}

BOOL mc_edgebreaker_decompress(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  void *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  _BOOL8 v15;
  int *v16;
  _BYTE *v17;
  void *v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unsigned int *v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  char *v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  unsigned int v47;
  char *v48;
  int v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  unsigned int v56;
  int v57;
  int v58;
  int v59;
  unsigned int v60;
  char *v61;
  int v62;
  int v63;
  int v64;
  unsigned int v65;
  char *v66;
  int v67;
  int v68;
  int v69;
  int v71;
  int v72;
  int v73;
  int v74;
  unsigned int i;
  unsigned int v76;
  uint64_t v77;
  int v78;
  int v79;
  int v80;
  int v81;
  unsigned int j;
  unsigned int v83;

  v2 = *(_QWORD *)(a1 + 72);
  if (!*(_DWORD *)v2)
    goto LABEL_4;
  v3 = *(_QWORD *)(v2 + 32);
  if ((unint64_t)(v3 + 4) > *(_QWORD *)(v2 + 24))
  {
    *(_DWORD *)v2 = 0;
LABEL_4:
    v4 = 0;
    *(_DWORD *)(a1 + 24) = 0;
    goto LABEL_6;
  }
  v4 = *(_DWORD *)(*(_QWORD *)(v2 + 8) + v3);
  *(_QWORD *)(v2 + 32) = v3 + 4;
  *(_DWORD *)(a1 + 24) = v4;
  if (v4 < 0)
    return 0;
LABEL_6:
  v5 = malloc_type_malloc(4 * (3 * v4), 0x100004052888210uLL);
  *(_QWORD *)(a1 + 32) = v5;
  v6 = (char *)malloc_type_malloc(4 * (3 * *(_DWORD *)(a1 + 24)), 0x100004052888210uLL);
  *(_QWORD *)(a1 + 40) = v6;
  memset(v6, 255, 12 * v4);
  memset(v5, 255, 12 * v4);
  v7 = *(_QWORD *)(a1 + 72);
  v8 = *(_QWORD *)(v7 + 24);
  v9 = *(_QWORD *)(v7 + 32);
  v10 = v8 - v9;
  if (v8 - v9 >= 0x10)
  {
    while (*(_DWORD *)v7)
    {
      if (v9 + 4 > v8)
        goto LABEL_10;
      v23 = *(unsigned int *)(*(_QWORD *)(v7 + 8) + v9);
      *(_QWORD *)(v7 + 32) = v9 + 4;
      v11 = v9 + 8;
      if (v9 + 8 > v8)
        goto LABEL_10;
      v24 = *(unsigned int *)(*(_QWORD *)(v7 + 8) + v9 + 4);
      *(_QWORD *)(v7 + 32) = v11;
      if ((v23 & 0x80000000) == 0)
        *(_DWORD *)&v6[4 * v23] = v24;
      if ((v24 & 0x80000000) == 0)
        *(_DWORD *)&v6[4 * v24] = v23;
      v10 -= 8;
      v9 = v11;
      if (v10 <= 0xF)
        goto LABEL_8;
    }
    goto LABEL_11;
  }
  v11 = *(_QWORD *)(v7 + 32);
LABEL_8:
  if (!*(_DWORD *)v7)
  {
LABEL_11:
    v13 = 0;
    v14 = 0;
    *(_DWORD *)(a1 + 28) = 0;
    goto LABEL_12;
  }
  v12 = v11 + 4;
  if (v11 + 4 > v8)
  {
LABEL_10:
    *(_DWORD *)v7 = 0;
    goto LABEL_11;
  }
  v13 = *(_DWORD *)(*(_QWORD *)(v7 + 8) + v11);
  *(_QWORD *)(v7 + 32) = v12;
  *(_DWORD *)(a1 + 28) = v13;
  v32 = v11 + 8;
  if (v32 <= v8)
  {
    v14 = *(_DWORD *)(*(_QWORD *)(v7 + 8) + v12);
    *(_QWORD *)(v7 + 32) = v32;
  }
  else
  {
    v14 = 0;
    *(_DWORD *)v7 = 0;
  }
LABEL_12:
  v15 = 0;
  if ((v13 & 0x80000000) == 0 && (v14 & 0x80000000) == 0)
  {
    v16 = (int *)malloc_type_calloc(v4, 4uLL, 0x100004052888210uLL);
    v17 = malloc_type_malloc(3 * v4, 0x100004077774924uLL);
    v18 = v17;
    LODWORD(v19) = 0;
    if (v4 >= 1 && !v14)
    {
      *v17 = 80;
      LODWORD(v19) = 1;
    }
    if ((int)v19 < v4)
    {
      v20 = 0;
      v21 = 0;
      v22 = v19;
      while (1)
      {
        v25 = *(_QWORD *)(a1 + 64);
        if (*(_DWORD *)v25)
        {
          v26 = *(_QWORD *)(v25 + 32);
          v27 = v26 + 1;
          if ((unint64_t)(v26 + 1) <= *(_QWORD *)(v25 + 24))
          {
            v28 = *(unsigned __int8 *)(*(_QWORD *)(v25 + 8) + v26);
            *(_QWORD *)(v25 + 32) = v27;
            v19 = v22 + 1;
            v17[v22] = v28;
            if (v28 == 69)
            {
              if (v20 < 1)
              {
                ++v21;
                if ((int)v19 < v4)
                {
                  if (v21 >= v14)
                  {
                    v17[v19] = 80;
                    LODWORD(v19) = v22 + 2;
                  }
                  else
                  {
                    v16[v21] = v19;
                  }
                }
              }
              else
              {
                --v20;
              }
            }
            else if (v28 == 83 && *(_DWORD *)&v6[12 * v22 + 4 * ((3 * v22 + 2) % 3)] == -1)
            {
              ++v20;
            }
            goto LABEL_29;
          }
          *(_DWORD *)v25 = 0;
        }
        LODWORD(v19) = v22 + 1;
        v17[v22] = 0;
LABEL_29:
        v22 = v19;
        if ((int)v19 >= v4)
          goto LABEL_44;
      }
    }
    v21 = 0;
LABEL_44:
    LODWORD(v29) = v19 - 1;
    if ((int)v19 < 1)
    {
      v30 = 0;
      v31 = v13 - 1;
      if (v21 < 1)
      {
LABEL_160:
        free(v30);
        v15 = v31 == -1;
        free(v16);
        free(v18);
        return v15;
      }
    }
    else
    {
      v30 = (unsigned int *)malloc_type_calloc(3 * (int)v19, 4uLL, 0x100004052888210uLL);
      v31 = v13 - 1;
      if (v21 < 1)
        goto LABEL_160;
    }
    LODWORD(v33) = 0;
    do
    {
      --v21;
      v29 = (int)v29;
      v34 = -1;
      while (v21 >= v14 || (v21 & 0x80000000) == 0 && v29 >= v16[v21])
      {
        switch(*((_BYTE *)v18 + v29))
        {
          case 'C':
            v35 = 3 * v29;
            v36 = 3 * v29 + 1;
            if ((v34 & 0x80000000) == 0)
              *(_DWORD *)&v6[4 * v34] = v36;
            if ((v29 & 0x8000000000000000) == 0)
              *(_DWORD *)&v6[4 * v36] = v34;
            v37 = v35 + 2;
            v38 = 3 * ((v35 + 2) / 3);
            v39 = v38 + (v35 + 4) % 3;
            v40 = &v6[4 * v39];
            if ((*(_DWORD *)v40 & 0x80000000) != 0 || *(_DWORD *)v40 == v37)
            {
              v41 = v37;
            }
            else
            {
              v41 = v37;
              do
              {
                *((_DWORD *)v5 + (v41 + 1) % 3 + v38) = v31;
                v41 = *(_DWORD *)v40;
                v38 = 3 * (*(_DWORD *)v40 / 3);
                v39 = v38 + (*(_DWORD *)v40 + 2) % 3;
                v40 = &v6[4 * v39];
              }
              while ((*(_DWORD *)v40 & 0x80000000) == 0 && *(_DWORD *)v40 != v37);
            }
            *((_DWORD *)v5 + (v41 + 1) % 3 + v38) = v31;
            if ((v39 & 0x80000000) == 0)
              *(_DWORD *)&v6[4 * v39] = v37;
            --v31;
            if ((v29 & 0x8000000000000000) == 0)
              *(_DWORD *)&v6[4 * v37] = v39;
            goto LABEL_55;
          case 'E':
            if ((int)v34 >= 1 && v30)
            {
              v30[(int)v33] = v34;
              LODWORD(v33) = v33 + 1;
            }
            goto LABEL_55;
          case 'L':
            v42 = 3 * v29 + 1;
            if ((v34 & 0x80000000) != 0)
              goto LABEL_75;
            goto LABEL_74;
          case 'P':
            v43 = 3 * v29;
            if ((v34 & 0x80000000) == 0)
              *(_DWORD *)&v6[4 * v34] = v43;
            if ((v29 & 0x8000000000000000) == 0)
              *(_DWORD *)&v6[4 * v43] = v34;
            v44 = v31 - 2;
            v45 = v43 + 1;
            v46 = 3 * ((v43 + 1) / 3);
            v47 = v46 + (v43 + 3) % 3;
            v48 = &v6[4 * v47];
            if ((*(_DWORD *)v48 & 0x80000000) != 0 || *(_DWORD *)v48 == v45)
            {
              v50 = v43 + 1;
              v49 = 3 * (v45 / 3);
            }
            else
            {
              v49 = 3 * (v45 / 3);
              v50 = v43 + 1;
              do
              {
                *((_DWORD *)v5 + (v50 + 1) % 3 + v49) = v44;
                v50 = *(_DWORD *)v48;
                v49 = 3 * (*(_DWORD *)v48 / 3);
                v47 = v49 + (*(_DWORD *)v48 + 2) % 3;
                v48 = &v6[4 * v47];
              }
              while ((*(_DWORD *)v48 & 0x80000000) == 0 && *(_DWORD *)v48 != v45);
            }
            *((_DWORD *)v5 + (v50 + 1) % 3 + v49) = v44;
            if ((v47 & 0x80000000) == 0)
              *(_DWORD *)&v6[4 * v47] = v45;
            if ((v29 & 0x8000000000000000) == 0)
              *(_DWORD *)&v6[4 * v45] = v47;
            v57 = v31 - 1;
            v58 = v43 + 2;
            v59 = 3 * ((v43 + 2) / 3);
            v60 = v59 + (v43 + 4) % 3;
            v61 = &v6[4 * v60];
            if ((*(_DWORD *)v61 & 0x80000000) != 0 || *(_DWORD *)v61 == v58)
            {
              v63 = v43 + 2;
              v62 = 3 * (v58 / 3);
            }
            else
            {
              v62 = 3 * (v58 / 3);
              v63 = v43 + 2;
              do
              {
                *((_DWORD *)v5 + (v63 + 1) % 3 + v62) = v57;
                v63 = *(_DWORD *)v61;
                v62 = 3 * (*(_DWORD *)v61 / 3);
                v60 = v62 + (*(_DWORD *)v61 + 2) % 3;
                v61 = &v6[4 * v60];
              }
              while ((*(_DWORD *)v61 & 0x80000000) == 0 && *(_DWORD *)v61 != v58);
            }
            *((_DWORD *)v5 + (v63 + 1) % 3 + v62) = v57;
            if ((v60 & 0x80000000) == 0)
              *(_DWORD *)&v6[4 * v60] = v58;
            if ((v29 & 0x8000000000000000) == 0)
              *(_DWORD *)&v6[4 * v58] = v60;
            v64 = v45 - v46;
            v65 = v58 - v59 + v43;
            v66 = &v6[4 * v65];
            if ((*(_DWORD *)v66 & 0x80000000) != 0)
            {
              *((_DWORD *)v5 + v43 + v64) = v31;
              if ((v65 & 0x80000000) == 0)
                goto LABEL_127;
            }
            else
            {
              v67 = 3 * v29;
              if (*(_DWORD *)v66 != v43)
              {
                v67 = 3 * v29;
                v68 = 3 * v29;
                do
                {
                  *((_DWORD *)v5 + (v68 + 1) % 3 + v67) = v31;
                  v68 = *(_DWORD *)v66;
                  v67 = 3 * (*(_DWORD *)v66 / 3);
                  v65 = v67 + (*(_DWORD *)v66 + 2) % 3;
                  v66 = &v6[4 * v65];
                }
                while ((*(_DWORD *)v66 & 0x80000000) == 0 && *(_DWORD *)v66 != v43);
                v64 = (v68 + 1) % 3;
              }
              *((_DWORD *)v5 + v67 + v64) = v31;
              if ((v65 & 0x80000000) == 0)
LABEL_127:
                *(_DWORD *)&v6[4 * v65] = v43;
            }
            if ((v29 & 0x8000000000000000) == 0)
              *(_DWORD *)&v6[4 * v43] = v65;
            v31 -= 3;
            --v21;
            goto LABEL_55;
          case 'R':
            v42 = 3 * v29 + 2;
            if ((v34 & 0x80000000) == 0)
LABEL_74:
              *(_DWORD *)&v6[4 * v34] = v42;
LABEL_75:
            if ((v29 & 0x8000000000000000) == 0)
              *(_DWORD *)&v6[4 * v42] = v34;
            goto LABEL_55;
          case 'S':
            v51 = 3 * v29;
            v52 = 3 * v29 + 1;
            if ((v34 & 0x80000000) == 0)
              *(_DWORD *)&v6[4 * v34] = v52;
            if (v29 < 0)
            {
              v53 = v51 + 2;
              v69 = *(_DWORD *)&v6[4 * v53];
              if (v69 == -1 && v30 != 0)
              {
                v33 = (int)v33 - 1;
                v77 = v30[v33];
                if ((v77 & 0x80000000) != 0)
                  goto LABEL_55;
                goto LABEL_151;
              }
              if (v69 > -2)
                goto LABEL_55;
              v56 = -v69;
            }
            else
            {
              *(_DWORD *)&v6[4 * v52] = v34;
              v53 = v51 + 2;
              v54 = *(_DWORD *)&v6[4 * v53];
              if (v54 == -1 && v30 != 0)
              {
                v33 = (int)v33 - 1;
                v77 = v30[v33];
                *(_DWORD *)&v6[4 * v53] = v77;
                if ((v77 & 0x80000000) != 0)
                  goto LABEL_55;
LABEL_151:
                *(_DWORD *)&v6[4 * v77] = v53;
                goto LABEL_55;
              }
              if (v54 >= -1)
                goto LABEL_55;
              v56 = -v54;
              *(_DWORD *)&v6[4 * v53] = v56;
            }
            *(_DWORD *)&v6[4 * v56] = v53;
            do
            {
              v71 = 3 * ((int)v53 / 3) + ((int)v53 + 1) % 3;
              LODWORD(v53) = *(_DWORD *)&v6[4 * v71];
            }
            while ((v53 & 0x80000000) == 0);
            v72 = 3 * (v71 / 3) + (v71 + 1) % 3;
            do
            {
              v73 = 3 * (v72 / 3) + (v72 + 1) % 3;
              v72 = *(_DWORD *)&v6[4 * v73];
            }
            while ((v72 & 0x80000000) == 0);
            do
            {
              v74 = 3 * (v73 / 3);
              *((_DWORD *)v5 + v74 + (v73 + 1) % 3) = v31;
              v73 = v74 + (v73 + 2) % 3;
              for (i = *(_DWORD *)&v6[4 * v73]; (i & 0x80000000) == 0; i = *(_DWORD *)&v6[4 * v73])
              {
                v76 = 3 * (i / 3);
                *((_DWORD *)v5 + v76 + (i + 1) % 3) = v31;
                v73 = v76 + (i + 2) % 3;
              }
              --v31;
            }
            while (*((_DWORD *)v5 + 3 * (v73 / 3) + (v73 + 1) % 3) == -1);
LABEL_55:
            v34 = 3 * v29--;
            break;
          default:
            goto LABEL_55;
        }
      }
      if (v14)
      {
        v78 = 3 * v16[v21];
        v79 = 3 * ((v78 + 1) / 3) + (v78 + 2) % 3;
        do
        {
          v80 = 3 * (v79 / 3) + (v79 + 1) % 3;
          v79 = *(_DWORD *)&v6[4 * v80];
        }
        while ((v79 & 0x80000000) == 0);
        do
        {
          v81 = 3 * (v80 / 3);
          *((_DWORD *)v5 + v81 + (v80 + 1) % 3) = v31;
          v80 = v81 + (v80 + 2) % 3;
          for (j = *(_DWORD *)&v6[4 * v80]; (j & 0x80000000) == 0; j = *(_DWORD *)&v6[4 * v80])
          {
            v83 = 3 * (j / 3);
            *((_DWORD *)v5 + v83 + (j + 1) % 3) = v31;
            v80 = v83 + (j + 2) % 3;
          }
          --v31;
        }
        while (*((_DWORD *)v5 + 3 * (v80 / 3) + (v80 + 1) % 3) == -1);
        --v14;
      }
    }
    while (v21 > 0);
    goto LABEL_160;
  }
  return v15;
}

BOOL mc_edgebreaker_decompress_and_update_mesh(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _BOOL8 v14;
  void *v15;
  unint64_t v16;
  _DWORD *v17;
  int *v18;
  int v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  _DWORD v25[2];
  void *v26;
  void *v27[2];
  void *v28[2];
  void *v29;
  void *v30;
  void *v31;
  void *v32;

  v10 = *(int *)(a1 + 160);
  v11 = *(int *)(a1 + 136);
  *(_OWORD *)v27 = 0u;
  *(_OWORD *)v28 = 0u;
  v25[0] = v10;
  v25[1] = v11;
  v26 = malloc_type_calloc(3 * v10, 4uLL, 0x100004052888210uLL);
  v29 = malloc_type_malloc(4 * v10, 0x100004052888210uLL);
  v30 = malloc_type_malloc(4 * v11, 0x100004052888210uLL);
  memset(v30, 255, 4 * v11);
  v12 = malloc_type_calloc(1uLL, 0x28uLL, 0x1050040E984C859uLL);
  *(_DWORD *)v12 = 1;
  v12[1] = a4;
  v12[3] = a5;
  if (a5)
    *(_DWORD *)v12 = a4 != 0;
  v32 = v12;
  v13 = malloc_type_calloc(1uLL, 0x28uLL, 0x1050040E984C859uLL);
  *(_DWORD *)v13 = 1;
  v13[1] = a2;
  v13[3] = a3;
  if (a3)
    *(_DWORD *)v13 = a2 != 0;
  v31 = v13;
  v14 = mc_edgebreaker_decompress((uint64_t)v25);
  v15 = v28[0];
  if (v14 && *(_DWORD *)(a1 + 160))
  {
    v16 = 0;
    v17 = (_DWORD *)(*(_QWORD *)(a1 + 168) + 8);
    v18 = (int *)((char *)v28[0] + 8);
    do
    {
      *(v17 - 2) = *(v18 - 2);
      *(v17 - 1) = *(v18 - 1);
      v19 = *v18;
      v18 += 3;
      *v17 = v19;
      v17 += 4;
      ++v16;
    }
    while (v16 < *(unsigned int *)(a1 + 160));
  }
  v20 = v31;
  if (v31)
  {
    v21 = (void *)*((_QWORD *)v31 + 2);
    if (v21)
      free(v21);
    free(v20);
  }
  v22 = v32;
  if (v32)
  {
    v23 = (void *)*((_QWORD *)v32 + 2);
    if (v23)
      free(v23);
    free(v22);
  }
  free(v27[0]);
  free(v26);
  free(v28[1]);
  free(v15);
  free(v29);
  free(v30);
  return v14;
}

uint64_t mc_decode_vert_cube(uint64_t a1, const float *a2, float a3, float a4, float a5, double a6, float a7, double a8, double a9, double a10)
{
  float32x2_t *v17;
  long double v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float *v23;
  float *v24;
  int *v25;
  double v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  float *v33;
  int *v34;
  double v35;
  double v36;
  BOOL v37;
  double v38;
  double v39;
  double v40;
  double v41;
  float32x4_t v42;
  float32x4_t v43;
  uint64_t v49;
  float32x4_t *v50;
  const float *v51;
  float *v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  int8x16_t v58;
  uint64_t v59;
  float32x4_t *v60;
  const float *v61;
  int8x16_t v62;
  float *v63;
  int8x16_t v64;
  int8x16_t v65;
  float64x2_t v66;
  float64x2_t v67;
  double v68;
  double v72;
  float32x4x3_t v73;
  float32x4x3_t v74;
  float32x4x4_t v75;
  float32x4x4_t v76;

  v17 = (float32x2_t *)malloc_type_malloc(4 * *(unsigned int *)(a1 + 136), 0x100004052888210uLL);
  v68 = a5;
  v72 = 1.0 / a4;
  v18 = cbrt(v72 * (v68 + v68));
  v19 = *(unsigned int *)(a1 + 136);
  if (!(_DWORD)v19)
    goto LABEL_9;
  v20 = *(_QWORD *)(a1 + 144);
  if (a5 != 0.0)
  {
    v27 = v72 / (v18 * v18) + v18 / v68;
    v28 = -v18;
    *(double *)&v29 = a7;
    if (v19 >= 4
      && (v20 >= (unint64_t)v17 + 4 * v19 || (unint64_t)v17 >= v20 + 12 * v19))
    {
      v30 = v19 & 0xFFFFFFFC;
      v53 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v28, 0);
      v54 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v18, 0);
      v55 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v27, 0);
      v56 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v72, 0);
      v57 = (float64x2_t)vdupq_lane_s64(v29, 0);
      v58 = (int8x16_t)vdupq_n_s64(0x7FF0000000000000uLL);
      v59 = v30;
      v60 = (float32x4_t *)v17;
      v61 = a2;
      v62 = (int8x16_t)vdupq_n_s64(0xFFF0000000000000);
      v63 = *(float **)(a1 + 144);
      do
      {
        v76 = vld4q_f32(v61);
        v61 += 16;
        v74.val[0] = vmulq_n_f32(vcvtq_f32_s32((int32x4_t)v76.val[0]), a3);
        v74.val[1] = vmulq_n_f32(vcvtq_f32_s32((int32x4_t)v76.val[1]), a3);
        v74.val[2] = vmulq_n_f32(vcvtq_f32_s32((int32x4_t)v76.val[2]), a3);
        v76.val[0] = vcvtq_f32_s32((int32x4_t)v76.val[3]);
        v76.val[1] = (float32x4_t)vcvtq_f64_f32(*(float32x2_t *)v76.val[0].f32);
        vst3q_f32(v63, v74);
        v63 += 12;
        v76.val[0] = (float32x4_t)vcvt_hight_f64_f32(v76.val[0]);
        v76.val[2] = (float32x4_t)vmulq_n_f64((float64x2_t)v76.val[0], v68);
        v76.val[3] = (float32x4_t)vmulq_n_f64((float64x2_t)v76.val[1], v68);
        v64 = (int8x16_t)vcgeq_f64((float64x2_t)v76.val[3], v53);
        v65 = (int8x16_t)vcgeq_f64((float64x2_t)v76.val[2], v53);
        v66 = vdivq_f64(v56, vsubq_f64(v55, (float64x2_t)v76.val[0]));
        v67 = vdivq_f64(v56, vsubq_f64(v55, (float64x2_t)v76.val[1]));
        v76.val[0] = (float32x4_t)vdivq_f64(v56, vaddq_f64(v55, (float64x2_t)v76.val[0]));
        v76.val[1] = (float32x4_t)vdivq_f64(v56, vaddq_f64(v55, (float64x2_t)v76.val[1]));
        v76.val[1] = (float32x4_t)vminnmq_f64((float64x2_t)vbslq_s8(vandq_s8(v64, (int8x16_t)vcgeq_f64(v54, (float64x2_t)v76.val[3])), (int8x16_t)v76.val[3], vbslq_s8(vandq_s8(v64, (int8x16_t)vcgtq_f64((float64x2_t)v76.val[3], v54)), vbslq_s8((int8x16_t)vcgtzq_f64(v67), (int8x16_t)vsqrtq_f64(v67), v58), vbslq_s8((int8x16_t)vcgtzq_f64((float64x2_t)v76.val[1]), (int8x16_t)vnegq_f64(vsqrtq_f64((float64x2_t)v76.val[1])), v62))), v57);
        v76.val[0] = (float32x4_t)vminnmq_f64((float64x2_t)vbslq_s8(vandq_s8(v65, (int8x16_t)vcgeq_f64(v54, (float64x2_t)v76.val[2])), (int8x16_t)v76.val[2], vbslq_s8(vandq_s8(v65, (int8x16_t)vcgtq_f64((float64x2_t)v76.val[2], v54)), vbslq_s8((int8x16_t)vcgtzq_f64(v66), (int8x16_t)vsqrtq_f64(v66), v58), vbslq_s8((int8x16_t)vcgtzq_f64((float64x2_t)v76.val[0]), (int8x16_t)vnegq_f64(vsqrtq_f64((float64x2_t)v76.val[0])), v62))), v57);
        *v60++ = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64((float64x2_t)v76.val[1], (float64x2_t)v76.val[1])), vmulq_f64((float64x2_t)v76.val[0], (float64x2_t)v76.val[0]));
        v59 -= 4;
      }
      while (v59);
      if (v30 == v19)
        goto LABEL_9;
    }
    else
    {
      v30 = 0;
    }
    v31 = v19 - v30;
    v32 = (_DWORD *)v17 + v30;
    v33 = (float *)(v20 + 12 * v30 + 8);
    v34 = (int *)&a2[4 * v30 + 2];
    while (1)
    {
      *((float32x2_t *)v33 - 1) = vmul_n_f32(vcvt_f32_s32(*(int32x2_t *)(v34 - 2)), a3);
      *v33 = (float)*v34 * a3;
      v40 = (float)v34[1];
      v38 = v40 * v68;
      if (v40 * v68 < v28)
        break;
      if (v38 > v18)
      {
        v41 = v72 / (v27 - v40);
        v36 = sqrt(v41);
        v37 = v41 <= 0.0;
        v38 = INFINITY;
LABEL_16:
        if (!v37)
          v38 = v36;
      }
      v39 = fmin(v38, *(double *)&v29);
      *(float *)&v39 = v39 * v39;
      *v32++ = LODWORD(v39);
      v33 += 3;
      v34 += 4;
      if (!--v31)
        goto LABEL_9;
    }
    v35 = v72 / (v27 + v40);
    v36 = -sqrt(v35);
    v37 = v35 <= 0.0;
    v38 = -INFINITY;
    goto LABEL_16;
  }
  *(float *)&v18 = 1.0 / (float)-(float)(*(float *)&a6 - (float)(a7 * a7));
  if (v19 < 4
    || v20 < (unint64_t)v17 + 4 * v19 && (unint64_t)v17 < v20 + 12 * v19)
  {
    v21 = 0;
LABEL_7:
    v22 = v19 - v21;
    v23 = (float *)v17 + v21;
    v24 = (float *)(v20 + 12 * v21 + 8);
    v25 = (int *)&a2[4 * v21 + 2];
    do
    {
      *((float32x2_t *)v24 - 1) = vmul_n_f32(vcvt_f32_s32(*(int32x2_t *)(v25 - 2)), a3);
      *v24 = (float)*v25 * a3;
      v24 += 3;
      *v23++ = (float)(1.0 / fmaxf((float)v25[1] * a4, *(float *)&v18)) - *(float *)&a6;
      v25 += 4;
      --v22;
    }
    while (v22);
    goto LABEL_9;
  }
  v42 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v18, 0);
  v43 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a6, 0);
  v21 = v19 & 0xFFFFFFFC;
  __asm { FMOV            V3.4S, #1.0 }
  v49 = v21;
  v50 = (float32x4_t *)v17;
  v51 = a2;
  v52 = *(float **)(a1 + 144);
  do
  {
    v75 = vld4q_f32(v51);
    v51 += 16;
    v73.val[0] = vmulq_n_f32(vcvtq_f32_s32((int32x4_t)v75.val[0]), a3);
    v73.val[1] = vmulq_n_f32(vcvtq_f32_s32((int32x4_t)v75.val[1]), a3);
    v73.val[2] = vmulq_n_f32(vcvtq_f32_s32((int32x4_t)v75.val[2]), a3);
    vst3q_f32(v52, v73);
    v52 += 12;
    *v50++ = vsubq_f32(vdivq_f32(_Q3, vmaxnmq_f32(vmulq_n_f32(vcvtq_f32_s32((int32x4_t)v75.val[3]), a4), v42)), v43);
    v49 -= 4;
  }
  while (v49);
  if (v21 != v19)
    goto LABEL_7;
LABEL_9:
  mc_mesh_cube_distance_unproject(a1, v17, a8, a9, a10);
  free(v17);
  return 1;
}

uint64_t mc_encode_decode_vert(uint64_t a1, uint64_t a2, char *a3, int a4)
{
  char *v8;
  char *v9;
  char *v10;
  unint64_t v11;
  _DWORD *v12;
  int *v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float64x2_t v18;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  uint64_t v30;
  float *v31;
  const float *v32;
  float64x2_t v33;
  uint64_t v34;
  uint64_t v35;
  float *v36;
  int32x2_t *v37;
  double v38;
  float v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  float64x2_t v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  const float *v47;
  float *v48;
  int64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  uint64_t v53;
  uint64_t v54;
  float32x2_t *v55;
  char *v56;
  uint64_t v57;
  int64x2_t v58;
  int v59;
  float32x2x3_t v61;
  float32x2x3_t v62;
  float32x4x3_t v63;
  float32x4x3_t v64;

  v8 = (char *)malloc_type_malloc(12 * *(unsigned int *)(a1 + 136), 0x8CA9B5EDuLL);
  v9 = (char *)malloc_type_malloc(4 * (3 * *(_DWORD *)(a1 + 160)), 0x100004052888210uLL);
  v10 = v9;
  if (*(_DWORD *)(a1 + 160))
  {
    v11 = 0;
    v12 = v9 + 8;
    v13 = (int *)(*(_QWORD *)(a1 + 168) + 8);
    do
    {
      *(v12 - 2) = *(v13 - 2);
      *(v12 - 1) = *(v13 - 1);
      v14 = *v13;
      v13 += 4;
      *v12 = v14;
      v12 += 3;
      ++v11;
      v15 = *(unsigned int *)(a1 + 160);
    }
    while (v11 < v15);
    v16 = *(unsigned int *)(a1 + 136);
    if (!a4)
    {
LABEL_7:
      if ((int)v16 <= 0)
      {
        v26 = mc_encode_decode_predictive(v15, v16, v10, v8, 3u, a3, a4);
        goto LABEL_27;
      }
      v17 = *(_QWORD *)(a1 + 144);
      v18 = *(float64x2_t *)a2;
      __asm { FMOV            V2.2D, #1.0 }
      v24 = *(uint64_t *)(a2 + 16);
      if ((_DWORD)v16 == 1)
      {
        v25 = 0;
      }
      else
      {
        v25 = v16 & 0xFFFFFFFE;
        v27 = vdivq_f64(_Q2, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v18.f64[0], 0));
        v28 = vdivq_f64(_Q2, (float64x2_t)vdupq_laneq_s64((int64x2_t)v18, 1));
        v29 = vdivq_f64(_Q2, (float64x2_t)vdupq_lane_s64(v24, 0));
        v30 = v25;
        v31 = (float *)v8;
        v32 = *(const float **)(a1 + 144);
        do
        {
          v61 = vld3_f32(v32);
          v32 += 6;
          v62.val[0] = (float32x2_t)vmovn_s64(vcvtq_s64_f64(vrndaq_f64(vmulq_f64(vcvtq_f64_f32(v61.val[0]), v27))));
          v62.val[1] = (float32x2_t)vmovn_s64(vcvtq_s64_f64(vrndaq_f64(vmulq_f64(vcvtq_f64_f32(v61.val[1]), v28))));
          v62.val[2] = (float32x2_t)vmovn_s64(vcvtq_s64_f64(vrndaq_f64(vmulq_f64(vcvtq_f64_f32(v61.val[2]), v29))));
          vst3_f32(v31, v62);
          v31 += 6;
          v30 -= 2;
        }
        while (v30);
        if (v25 == v16)
          goto LABEL_16;
      }
      v33 = vdivq_f64(_Q2, v18);
      v34 = v16 - v25;
      v35 = 12 * v25 + 8;
      v36 = (float *)(v17 + v35);
      v37 = (int32x2_t *)&v8[v35];
      v38 = 1.0 / *(double *)&v24;
      do
      {
        v37[-1] = vmovn_s64(vcvtq_s64_f64(vrndaq_f64(vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)(v36 - 2)), v33))));
        v39 = *v36;
        v36 += 3;
        v37->i32[0] = llround(v39 * v38);
        v37 = (int32x2_t *)((char *)v37 + 12);
        --v34;
      }
      while (v34);
LABEL_16:
      LODWORD(v15) = *(_DWORD *)(a1 + 160);
      LODWORD(v16) = *(_DWORD *)(a1 + 136);
    }
  }
  else
  {
    LODWORD(v15) = 0;
    v16 = *(unsigned int *)(a1 + 136);
    if (!a4)
      goto LABEL_7;
  }
  v40 = mc_encode_decode_predictive(v15, v16, v10, v8, 3u, a3, a4);
  v26 = v40;
  if (a4)
  {
    if ((_DWORD)v40)
    {
      v41 = *(unsigned int *)(a1 + 136);
      if ((int)v41 >= 1)
      {
        v42 = *(_QWORD *)(a1 + 144);
        v43 = *(float64x2_t *)a2;
        v44 = *(double *)(a2 + 16);
        if (v41 < 4)
        {
          v45 = 0;
LABEL_25:
          v53 = v41 - v45;
          v54 = 12 * v45 + 8;
          v55 = (float32x2_t *)(v42 + v54);
          v56 = &v8[v54];
          do
          {
            v57 = *((_QWORD *)v56 - 1);
            v58.i64[0] = (int)v57;
            v58.i64[1] = SHIDWORD(v57);
            v55[-1] = vcvt_f32_f64(vmulq_f64(v43, vcvtq_f64_s64(v58)));
            v59 = *(_DWORD *)v56;
            v56 += 12;
            *(float *)&v57 = v44 * (double)v59;
            v55->i32[0] = v57;
            v55 = (float32x2_t *)((char *)v55 + 12);
            --v53;
          }
          while (v53);
          goto LABEL_27;
        }
        v45 = v41 & 0x7FFFFFFC;
        v46 = v41 & 0xFFFFFFFC;
        v47 = (const float *)v8;
        v48 = *(float **)(a1 + 144);
        do
        {
          v63 = vld3q_f32(v47);
          v47 += 12;
          v49.i64[0] = v63.val[0].i32[0];
          v49.i64[1] = v63.val[0].i32[1];
          v50 = vcvtq_f64_s64(v49);
          v49.i64[0] = v63.val[0].i32[2];
          v49.i64[1] = v63.val[0].i32[3];
          v64.val[0] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v50, v43.f64[0])), vmulq_n_f64(vcvtq_f64_s64(v49), v43.f64[0]));
          v49.i64[0] = v63.val[1].i32[0];
          v49.i64[1] = v63.val[1].i32[1];
          v51 = vcvtq_f64_s64(v49);
          v49.i64[0] = v63.val[1].i32[2];
          v49.i64[1] = v63.val[1].i32[3];
          v64.val[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_laneq_f64(v51, v43, 1)), vmulq_laneq_f64(vcvtq_f64_s64(v49), v43, 1));
          v49.i64[0] = v63.val[2].i32[0];
          v49.i64[1] = v63.val[2].i32[1];
          v52 = vcvtq_f64_s64(v49);
          v49.i64[0] = v63.val[2].i32[2];
          v49.i64[1] = v63.val[2].i32[3];
          v64.val[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v52, v44)), vmulq_n_f64(vcvtq_f64_s64(v49), v44));
          vst3q_f32(v48, v64);
          v48 += 12;
          v46 -= 4;
        }
        while (v46);
        if (v45 != v41)
          goto LABEL_25;
      }
    }
  }
LABEL_27:
  free(v10);
  free(v8);
  return v26;
}

void mc_io_r_vertices_cam(uint64_t a1, uint64_t a2)
{
  float v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  float v15;
  float v16;
  float32x4_t *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  float32x4_t *v21;
  char *v22;
  char *v23;
  BOOL v25;
  BOOL v27;
  uint64_t v29;
  float32x4_t *v30;
  float *v31;
  __int32 *v32;
  __int32 *v33;
  uint64_t v34;
  char *v35;
  int v36;
  char *v37;
  char *v38;
  unint64_t v39;
  _DWORD *v40;
  int *v41;
  int v42;
  unint64_t v43;
  int v44;
  int32x2_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  float32x4_t v49;
  uint64_t v50;
  const float *v51;
  float *v52;
  uint64_t v53;
  uint64_t v54;
  float *v55;
  int *v56;
  int v57;
  uint64_t v58;
  int *v59;
  int v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  __int128 *v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  float v86;
  float v87;
  float v88;
  float v89;
  int v90;
  _OWORD v91[8];
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  float32x4x3_t v95;
  float32x4x3_t v96;
  float32x4x3_t v97;

  v94 = 0;
  v92 = 0u;
  v93 = 0u;
  memset(v91, 0, sizeof(v91));
  v90 = 0;
  v4 = 0.0;
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  if (v6 == v5)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
LABEL_14:
    v15 = 0.0;
LABEL_15:
    v16 = 0.0;
    goto LABEL_16;
  }
  if (!*(_DWORD *)a1 || (v10 = v6 + 4, v6 + 4 > v5))
  {
LABEL_13:
    v7 = 0;
    v9 = 0;
    *(_DWORD *)a1 = 0;
    v8 = v6;
    goto LABEL_14;
  }
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(_DWORD *)(v11 + v6);
  *(_QWORD *)(a1 + 32) = v10;
  v8 = v6 + 6;
  if (v6 + 6 > v5)
  {
    v6 += 4;
    goto LABEL_13;
  }
  v13 = *(unsigned __int16 *)(v11 + v10);
  *(_QWORD *)(a1 + 32) = v8;
  if (v12 != 1263421507 || v13 >= 2)
  {
    v6 += 6;
    goto LABEL_13;
  }
  v58 = v6 + 10;
  if (v6 + 10 > v5)
  {
    *(_DWORD *)a1 = 0;
    v59 = &v90;
LABEL_69:
    v61 = 0;
    v7 = 0;
    *v59 = 0;
    v60 = v90;
    goto LABEL_70;
  }
  v60 = *(_DWORD *)(v11 + v8);
  *(_QWORD *)(a1 + 32) = v58;
  v90 = v60;
  v8 = v6 + 12;
  if (v6 + 12 > v5)
  {
    v8 = v6 + 10;
    v59 = (int *)a1;
    goto LABEL_69;
  }
  v61 = *(unsigned __int16 *)(v11 + v58);
  *(_QWORD *)(a1 + 32) = v8;
  v63 = v6 + 14;
  if (v6 + 14 <= v5)
  {
    *(_QWORD *)(a1 + 32) = v63;
    v8 = v6 + 22;
    if (v6 + 22 <= v5)
    {
      v7 = *(_QWORD *)(v11 + v63);
      *(_QWORD *)(a1 + 32) = v8;
    }
    else
    {
      v7 = 0;
      *(_DWORD *)a1 = 0;
      v8 = v6 + 14;
    }
  }
  else
  {
    v7 = 0;
    *(_DWORD *)a1 = 0;
  }
LABEL_70:
  v9 = 0;
  if (v60 != 9 || v61 > 1)
    goto LABEL_14;
  if (!*(_DWORD *)a1 || (v62 = v8 + 4, v8 + 4 > v5))
  {
    v9 = 0;
    goto LABEL_14;
  }
  v64 = *(_QWORD *)(a1 + 8);
  v9 = *(_DWORD *)(v64 + v8);
  *(_QWORD *)(a1 + 32) = v62;
  v65 = v8 + 8;
  if (v8 + 8 > v5)
    goto LABEL_14;
  v15 = *(float *)(v64 + v62);
  *(_QWORD *)(a1 + 32) = v65;
  v66 = v8 + 12;
  if (v8 + 12 > v5)
    goto LABEL_15;
  v67 = *(_QWORD *)(a1 + 8);
  v16 = *(float *)(v67 + v65);
  *(_QWORD *)(a1 + 32) = v66;
  v68 = v8 + 16;
  if (v8 + 16 > v5
    || (v4 = *(float *)(v67 + v66), *(_QWORD *)(a1 + 32) = v68, v8 + 18 > v5)
    || (v69 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 8) + v68), *(_QWORD *)(a1 + 32) = v8 + 18, v69))
  {
LABEL_16:
    *(_DWORD *)a1 = 0;
    if (v9 == *(_DWORD *)(a2 + 136))
      goto LABEL_17;
LABEL_86:
    v17 = 0;
LABEL_87:
    *(_DWORD *)a1 = 0;
    goto LABEL_88;
  }
  v87 = v16;
  v89 = v15;
  mc_read_mat4(a1, (double *)v91);
  if (*(_DWORD *)a1)
  {
    v71 = *(_QWORD *)(a1 + 24);
    v70 = *(_QWORD *)(a1 + 32);
    v72 = v70 + 2;
    if (v70 + 2 <= v71)
    {
      v73 = *(_QWORD *)(a1 + 8);
      v74 = *(unsigned __int16 *)(v73 + v70);
      *(_QWORD *)(a1 + 32) = v72;
      if (!v74)
      {
        v75 = v70 + 4;
        if (v70 + 4 <= v71)
        {
          v77 = *(unsigned __int16 *)(v73 + v72);
          *(_QWORD *)(a1 + 32) = v75;
          LODWORD(v92) = v77;
          v78 = v70 + 12;
          v76 = (__int128 *)a1;
          if (v70 + 12 <= v71)
          {
            v79 = *(_QWORD *)(v73 + v75);
            *(_QWORD *)(a1 + 32) = v78;
            *((_QWORD *)&v92 + 1) = v79;
            v80 = v70 + 20;
            if (v70 + 20 <= v71)
            {
              v81 = *(_QWORD *)(v73 + v78);
              *(_QWORD *)(a1 + 32) = v80;
              *(_QWORD *)&v93 = v81;
              v82 = v70 + 28;
              if (v70 + 28 <= v71)
              {
                v83 = *(_QWORD *)(v73 + v80);
                *(_QWORD *)(a1 + 32) = v82;
                *((_QWORD *)&v93 + 1) = v83;
                v84 = v70 + 36;
                if (v84 <= v71)
                {
                  v85 = *(_QWORD *)(v73 + v82);
                  *(_QWORD *)(a1 + 32) = v84;
                  v94 = v85;
                  v16 = v87;
                  v15 = v89;
                  if (v9 != *(_DWORD *)(a2 + 136))
                    goto LABEL_86;
                  goto LABEL_17;
                }
                *(_DWORD *)a1 = 0;
              }
              else
              {
                *(_DWORD *)a1 = 0;
                *((_QWORD *)&v93 + 1) = 0;
              }
              goto LABEL_97;
            }
            *(_DWORD *)a1 = 0;
LABEL_96:
            v93 = 0uLL;
LABEL_97:
            v94 = 0;
            v16 = v87;
            v15 = v89;
            if (v9 != *(_DWORD *)(a2 + 136))
              goto LABEL_86;
            goto LABEL_17;
          }
        }
        else
        {
          v76 = &v92;
          *(_DWORD *)a1 = 0;
        }
        *(_DWORD *)v76 = 0;
        *((_QWORD *)&v92 + 1) = 0;
        goto LABEL_96;
      }
    }
  }
  *(_DWORD *)a1 = 0;
  v16 = v87;
  v15 = v89;
  if (v9 != *(_DWORD *)(a2 + 136))
    goto LABEL_86;
LABEL_17:
  if (!*(_DWORD *)a1)
  {
    v17 = 0;
    goto LABEL_88;
  }
  v86 = v16;
  v88 = v15;
  v17 = (float32x4_t *)malloc_type_malloc(4 * (int)(3 * v9), 0x100004052888210uLL);
  mc_read_tiny_big(a1, 3 * v9, v17);
  if (*(_DWORD *)a1 && *(_QWORD *)(a1 + 24) >= (unint64_t)(v7 + v8))
    *(_QWORD *)(a1 + 32) = v7 + v8;
  v18 = (char *)malloc_type_malloc(4 * (int)(3 * v9), 0x100004052888210uLL);
  v19 = v18;
  if ((int)v9 >= 1)
  {
    if (v9 < 8)
    {
      v20 = 0;
LABEL_47:
      v32 = &v17->i32[v20];
      v33 = &v17->i32[v20 + v9];
      v34 = v9 - v20;
      v35 = &v18[12 * v20 + 8];
      do
      {
        *((_DWORD *)v35 - 2) = *v32;
        v36 = *v33++;
        *((_DWORD *)v35 - 1) = v36;
        *(_DWORD *)v35 = v32[2 * v9];
        v35 += 12;
        ++v32;
        --v34;
      }
      while (v34);
      goto LABEL_49;
    }
    v20 = 0;
    v21 = (float32x4_t *)&v18[12 * v9];
    v22 = (char *)v17 + 8 * v9;
    v23 = &v17->i8[4 * v9];
    v25 = v18 < v22 && v23 < (char *)v21;
    v27 = v18 < v23 && v17 < v21;
    if (v22 < (char *)v21 && v18 < (char *)v17 + 12 * v9)
      goto LABEL_47;
    if (v25)
      goto LABEL_47;
    if (v27)
      goto LABEL_47;
    v20 = v9 & 0xFFFFFFFC;
    v29 = v20;
    v30 = v17;
    v31 = (float *)v18;
    do
    {
      v95.val[0] = *v30;
      v95.val[1] = *(float32x4_t *)((char *)v30 + 4 * v9);
      v95.val[2] = *(float32x4_t *)((char *)v30 + 8 * v9);
      vst3q_f32(v31, v95);
      v31 += 12;
      ++v30;
      v29 -= 4;
    }
    while (v29);
    if (v20 != v9)
      goto LABEL_47;
  }
LABEL_49:
  memcpy(v17, v18, 4 * (int)(3 * v9));
  free(v19);
  v37 = (char *)malloc_type_malloc(4 * (3 * *(_DWORD *)(a2 + 160)), 0x100004052888210uLL);
  v38 = v37;
  if (*(_DWORD *)(a2 + 160))
  {
    v39 = 0;
    v40 = v37 + 8;
    v41 = (int *)(*(_QWORD *)(a2 + 168) + 8);
    do
    {
      *(v40 - 2) = *(v41 - 2);
      *(v40 - 1) = *(v41 - 1);
      v42 = *v41;
      v41 += 4;
      *v40 = v42;
      v40 += 3;
      ++v39;
      v43 = *(unsigned int *)(a2 + 160);
    }
    while (v39 < v43);
  }
  else
  {
    LODWORD(v43) = 0;
  }
  v44 = mc_encode_decode_predictive(v43, *(_DWORD *)(a2 + 136), v38, (char *)v17, 3u, (char *)v17, 1);
  free(v38);
  if (!v44)
    goto LABEL_87;
  v46 = *(unsigned int *)(a2 + 136);
  if ((_DWORD)v46)
  {
    v47 = *(_QWORD *)(a2 + 144);
    *(float *)v45.i32 = 1.0 / v4;
    if (v46 < 4)
    {
      v48 = 0;
LABEL_61:
      v53 = v46 - v48;
      v54 = 12 * v48 + 8;
      v55 = (float *)(v47 + v54);
      v56 = (int *)((char *)v17 + v54);
      do
      {
        *((float32x2_t *)v55 - 1) = vmul_n_f32(vcvt_f32_s32(*(int32x2_t *)(v56 - 2)), v88);
        v57 = *v56;
        v56 += 3;
        *v55 = fmaxf(v86 * (float)v57, *(float *)v45.i32);
        v55 += 3;
        --v53;
      }
      while (v53);
      goto LABEL_63;
    }
    v48 = v46 & 0xFFFFFFFC;
    v49 = (float32x4_t)vdupq_lane_s32(v45, 0);
    v50 = v48;
    v51 = (const float *)v17;
    v52 = *(float **)(a2 + 144);
    do
    {
      v96 = vld3q_f32(v51);
      v51 += 12;
      v97.val[0] = vmulq_n_f32(vcvtq_f32_s32((int32x4_t)v96.val[0]), v88);
      v97.val[1] = vmulq_n_f32(vcvtq_f32_s32((int32x4_t)v96.val[1]), v88);
      v97.val[2] = vmaxnmq_f32(vmulq_n_f32(vcvtq_f32_s32((int32x4_t)v96.val[2]), v86), v49);
      vst3q_f32(v52, v97);
      v52 += 12;
      v50 -= 4;
    }
    while (v50);
    if (v48 != v46)
      goto LABEL_61;
  }
LABEL_63:
  if (!mc_mesh_cam_unproject(a2, 0, (uint64_t)v91))
    goto LABEL_87;
LABEL_88:
  free(v17);
}

void mc_io_r_vertices_predictive(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  BOOL v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  uint64_t v14;
  int *v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  char *v29;
  char *v30;
  unint64_t v31;
  _DWORD *v32;
  int v33;
  uint64_t v34;
  int v35;
  _QWORD v36[4];

  v36[3] = *MEMORY[0x1E0C80C00];
  v35 = 0;
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 == v3)
  {
LABEL_2:
    v5 = 0;
LABEL_9:
    *(_DWORD *)a1 = 0;
    goto LABEL_10;
  }
  v6 = v4 + 4;
  if (*(_DWORD *)a1)
    v7 = v6 > v3;
  else
    v7 = 1;
  if (v7
    || (v8 = *(_QWORD *)(a1 + 8), v9 = *(_DWORD *)(v8 + v4), *(_QWORD *)(a1 + 32) = v6, v10 = v4 + 6, v4 + 6 > v3)
    || ((v11 = *(unsigned __int16 *)(v8 + v6), *(_QWORD *)(a1 + 32) = v10, v9 == 1263421507)
      ? (v12 = v11 >= 2)
      : (v12 = 1),
        v12))
  {
    v5 = 0;
    *(_DWORD *)a1 = 0;
    goto LABEL_9;
  }
  v14 = v4 + 10;
  if (v4 + 10 > v3)
  {
    *(_DWORD *)a1 = 0;
    v15 = &v35;
LABEL_20:
    v17 = 0;
    v18 = 0;
    *v15 = 0;
    v16 = v35;
    goto LABEL_21;
  }
  v16 = *(_DWORD *)(v8 + v10);
  *(_QWORD *)(a1 + 32) = v14;
  v35 = v16;
  v10 = v4 + 12;
  if (v4 + 12 > v3)
  {
    v10 = v4 + 10;
    v15 = (int *)a1;
    goto LABEL_20;
  }
  v17 = *(unsigned __int16 *)(v8 + v14);
  *(_QWORD *)(a1 + 32) = v10;
  v34 = v4 + 14;
  if (v4 + 14 <= v3)
  {
    *(_QWORD *)(a1 + 32) = v34;
    v10 = v4 + 22;
    if (v4 + 22 <= v3)
    {
      v18 = *(_QWORD *)(v8 + v34);
      *(_QWORD *)(a1 + 32) = v10;
    }
    else
    {
      v18 = 0;
      *(_DWORD *)a1 = 0;
      v10 = v4 + 14;
    }
  }
  else
  {
    v18 = 0;
    *(_DWORD *)a1 = 0;
  }
LABEL_21:
  v5 = 0;
  if (v16 != 6 || v17 > 1)
    goto LABEL_9;
  if (!*(_DWORD *)a1)
    goto LABEL_2;
  v19 = v10 + 4;
  if (v10 + 4 > v3)
    goto LABEL_2;
  v20 = *(_QWORD *)(a1 + 8);
  v21 = *(_DWORD *)(v20 + v10);
  *(_QWORD *)(a1 + 32) = v19;
  v22 = v10 + 12;
  if (v10 + 12 > v3)
    goto LABEL_2;
  v23 = *(_QWORD *)(v20 + v19);
  *(_QWORD *)(a1 + 32) = v22;
  v36[0] = v23;
  v24 = v10 + 20;
  if (v10 + 20 > v3)
    goto LABEL_2;
  v25 = *(_QWORD *)(a1 + 8);
  v26 = *(_QWORD *)(v25 + v22);
  *(_QWORD *)(a1 + 32) = v24;
  v36[1] = v26;
  if (v10 + 28 > v3)
    goto LABEL_2;
  v27 = *(_QWORD *)(v25 + v24);
  *(_QWORD *)(a1 + 32) = v10 + 28;
  v36[2] = v27;
  if (v21 != *(_DWORD *)(a2 + 136))
    goto LABEL_2;
  v28 = 3 * v21;
  v29 = (char *)malloc_type_malloc(12 * v21, 0x100004052888210uLL);
  mc_read_tiny_big(a1, v28, v29);
  if (!*(_DWORD *)a1)
  {
    v5 = v29;
    goto LABEL_9;
  }
  if (*(_QWORD *)(a1 + 24) >= (unint64_t)(v18 + v10))
    *(_QWORD *)(a1 + 32) = v18 + v10;
  v30 = (char *)malloc_type_malloc(4 * v28, 0x100004052888210uLL);
  v5 = v30;
  if (*(_DWORD *)(a2 + 136))
  {
    v31 = 0;
    v32 = v30 + 8;
    do
    {
      *(v32 - 2) = *(_DWORD *)&v29[4 * v31];
      *(v32 - 1) = *(_DWORD *)&v29[4 * (v31 + *(_DWORD *)(a2 + 136))];
      v33 = v31++ + 2 * *(_DWORD *)(a2 + 136);
      *v32 = *(_DWORD *)&v29[4 * v33];
      v32 += 3;
    }
    while (v31 < *(unsigned int *)(a2 + 136));
  }
  free(v29);
  if (!mc_encode_decode_vert(a2, (uint64_t)v36, v5, 1))
    goto LABEL_9;
LABEL_10:
  free(v5);
}

void mc_io_r_vertices_cube(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  float32x4_t *v11;
  uint64_t v13;
  int *v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  float v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  unint64_t v33;
  double v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  size_t v38;
  float v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  float *v44;
  float *v45;
  uint64_t v46;
  float *v47;
  uint64_t v48;
  uint64_t v49;
  float *v50;
  __int32 *v51;
  int v52;
  char *v53;
  char *v54;
  unint64_t v55;
  _DWORD *v56;
  int *v57;
  int v58;
  unint64_t v59;
  int v60;
  double v61;
  float32x4_t *v62;
  float *v63;
  float *v64;
  float *v65;
  BOOL v67;
  BOOL v69;
  BOOL v71;
  uint64_t v73;
  float32x4_t *v74;
  float v75;
  double v76;
  int v77;
  float32x4x4_t v78;

  v77 = 0;
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 == v3)
    goto LABEL_10;
  if (!*(_DWORD *)a1)
    goto LABEL_10;
  v5 = v4 + 4;
  if (v4 + 4 > v3)
    goto LABEL_10;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_DWORD *)(v6 + v4);
  *(_QWORD *)(a1 + 32) = v5;
  v8 = v4 + 6;
  if (v4 + 6 > v3)
    goto LABEL_10;
  v9 = *(unsigned __int16 *)(v6 + v5);
  *(_QWORD *)(a1 + 32) = v8;
  if (v7 != 1263421507 || v9 > 1)
    goto LABEL_10;
  v13 = v4 + 10;
  if (v4 + 10 > v3)
  {
    *(_DWORD *)a1 = 0;
    v14 = &v77;
LABEL_17:
    v16 = 0;
    v17 = 0;
    *v14 = 0;
    v15 = v77;
    goto LABEL_18;
  }
  v15 = *(_DWORD *)(v6 + v8);
  *(_QWORD *)(a1 + 32) = v13;
  v77 = v15;
  v8 = v4 + 12;
  if (v4 + 12 > v3)
  {
    v8 = v4 + 10;
    v14 = (int *)a1;
    goto LABEL_17;
  }
  v16 = *(unsigned __int16 *)(v6 + v13);
  *(_QWORD *)(a1 + 32) = v8;
  v43 = v4 + 14;
  if (v4 + 14 <= v3)
  {
    *(_QWORD *)(a1 + 32) = v43;
    v8 = v4 + 22;
    if (v4 + 22 <= v3)
    {
      v17 = *(_QWORD *)(v6 + v43);
      *(_QWORD *)(a1 + 32) = v8;
    }
    else
    {
      v17 = 0;
      *(_DWORD *)a1 = 0;
      v8 = v4 + 14;
    }
  }
  else
  {
    v17 = 0;
    *(_DWORD *)a1 = 0;
  }
LABEL_18:
  v11 = 0;
  if (v15 != 8 || v16 > 1)
    goto LABEL_11;
  if (!*(_DWORD *)a1)
  {
    v11 = 0;
    goto LABEL_12;
  }
  v18 = v8 + 4;
  if (v8 + 4 > v3)
    goto LABEL_10;
  v19 = *(_QWORD *)(a1 + 8);
  v20 = *(int *)(v19 + v8);
  *(_QWORD *)(a1 + 32) = v18;
  v21 = v8 + 8;
  if (v8 + 8 > v3)
    goto LABEL_10;
  v22 = *(float *)(v19 + v18);
  *(_QWORD *)(a1 + 32) = v21;
  v23 = v8 + 12;
  if (v8 + 12 > v3)
    goto LABEL_10;
  v24 = *(_QWORD *)(a1 + 8);
  v25 = *(float *)(v24 + v21);
  *(_QWORD *)(a1 + 32) = v23;
  v26 = v8 + 16;
  if (v8 + 16 > v3)
    goto LABEL_10;
  v27 = *(float *)(v24 + v23);
  *(_QWORD *)(a1 + 32) = v26;
  v28 = v8 + 24;
  if (v8 + 24 > v3)
    goto LABEL_10;
  v29 = *(double *)(*(_QWORD *)(a1 + 8) + v26);
  *(_QWORD *)(a1 + 32) = v28;
  v30 = v8 + 32;
  if (v8 + 32 > v3
    || (v76 = v29,
        v75 = v27,
        v31 = *(double *)(*(_QWORD *)(a1 + 8) + v28),
        *(_QWORD *)(a1 + 32) = v30,
        v32 = v8,
        v33 = v8 + 40,
        v33 > v3))
  {
LABEL_10:
    v11 = 0;
LABEL_11:
    *(_DWORD *)a1 = 0;
    goto LABEL_12;
  }
  v34 = *(double *)(*(_QWORD *)(a1 + 8) + v30);
  v35 = v20;
  *(_QWORD *)(a1 + 32) = v33;
  v36 = 4 * v20;
  v37 = v20;
  v38 = 16 * v20;
  v11 = (float32x4_t *)malloc_type_malloc(16 * v20, 0x100004052888210uLL);
  mc_read_tiny_big(a1, v36, v11);
  v39 = 0.0;
  if (*(_DWORD *)a1)
  {
    v41 = *(_QWORD *)(a1 + 24);
    v40 = *(_QWORD *)(a1 + 32);
    v42 = v40 + 4;
    if (v40 + 4 <= v41)
    {
      v39 = *(float *)(*(_QWORD *)(a1 + 8) + v40);
      if (v41 >= v17 + v32)
        v42 = v17 + v32;
      *(_QWORD *)(a1 + 32) = v42;
    }
    else
    {
      *(_DWORD *)a1 = 0;
    }
  }
  v44 = (float *)malloc_type_malloc(v38, 0x100004052888210uLL);
  v45 = v44;
  if ((int)v35 >= 1)
  {
    if (v37 < 8)
    {
      v46 = 0;
LABEL_43:
      v47 = &v11->f32[v46];
      v48 = v46 + v35;
      v49 = v35 - v46;
      v50 = &v45[4 * v46 + 2];
      v51 = &v11->i32[v48];
      do
      {
        *(v50 - 2) = *v47;
        v52 = *v51++;
        *((_DWORD *)v50 - 1) = v52;
        *v50 = v47[2 * v35];
        v50[1] = v47[3 * v35];
        ++v47;
        v50 += 4;
        --v49;
      }
      while (v49);
      goto LABEL_45;
    }
    v46 = 0;
    v62 = (float32x4_t *)&v44[4 * v35];
    v63 = &v11->f32[3 * v35];
    v64 = &v11->f32[2 * v35];
    v65 = &v11->f32[v35];
    v67 = v44 < v63 && v64 < (float *)v62;
    v69 = v44 < v64 && v65 < (float *)v62;
    v71 = v44 < v65 && v11 < v62;
    if (v63 < (float *)v62 && v44 < v11[v35].f32)
      goto LABEL_43;
    if (v67)
      goto LABEL_43;
    if (v69)
      goto LABEL_43;
    if (v71)
      goto LABEL_43;
    v46 = v35 & 0x7FFFFFFC;
    v73 = v35 & 0xFFFFFFFC;
    v74 = v11;
    do
    {
      v78.val[0] = *v74;
      v78.val[1] = *(float32x4_t *)((char *)v74 + 4 * v35);
      v78.val[2] = *(float32x4_t *)((char *)v74 + 8 * v35);
      v78.val[3] = *(float32x4_t *)((char *)v74 + 12 * v35);
      vst4q_f32(v45, v78);
      v45 += 16;
      ++v74;
      v73 -= 4;
    }
    while (v73);
    v45 = v44;
    if (v46 != v35)
      goto LABEL_43;
  }
LABEL_45:
  memcpy(v11, v45, v38);
  free(v45);
  v53 = (char *)malloc_type_malloc(4 * (3 * *(_DWORD *)(a2 + 160)), 0x100004052888210uLL);
  v54 = v53;
  if (*(_DWORD *)(a2 + 160))
  {
    v55 = 0;
    v56 = v53 + 8;
    v57 = (int *)(*(_QWORD *)(a2 + 168) + 8);
    do
    {
      *(v56 - 2) = *(v57 - 2);
      *(v56 - 1) = *(v57 - 1);
      v58 = *v57;
      v57 += 4;
      *v56 = v58;
      v56 += 3;
      ++v55;
      v59 = *(unsigned int *)(a2 + 160);
    }
    while (v55 < v59);
  }
  else
  {
    LODWORD(v59) = 0;
  }
  v60 = mc_encode_decode_predictive(v59, *(_DWORD *)(a2 + 136), v54, (char *)v11, 4u, (char *)v11, 1);
  free(v54);
  LODWORD(v61) = 0;
  mc_decode_vert_cube(a2, v11->f32, v22, v25, v39, v61, v75, v76, v31, v34);
  if (!v60)
    goto LABEL_11;
LABEL_12:
  free(v11);
}

double mc_io_r_uv_model(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  double result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  _DWORD *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;

  if (!*(_DWORD *)a2)
    goto LABEL_4;
  v3 = *(_QWORD *)(a2 + 32);
  v4 = v3 + 2;
  if ((unint64_t)(v3 + 2) > *(_QWORD *)(a2 + 24))
    goto LABEL_4;
  v5 = *(unsigned __int16 *)(*(_QWORD *)(a2 + 8) + v3);
  *(_QWORD *)(a2 + 32) = v4;
  if (v5)
    goto LABEL_4;
  result = 0.0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  if (!*(_DWORD *)a2)
  {
LABEL_9:
    *(_QWORD *)a1 = 0;
    return result;
  }
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 + 2;
  if (v9 + 2 > v8)
  {
    *(_DWORD *)a2 = 0;
    goto LABEL_9;
  }
  v11 = *(_QWORD *)(a2 + 8);
  v12 = *(unsigned __int16 *)(v11 + v9);
  *(_QWORD *)(a2 + 32) = v10;
  *(_DWORD *)a1 = v12;
  v13 = v9 + 4;
  if (v13 <= v8)
  {
    v14 = *(__int16 *)(v11 + v10);
    *(_QWORD *)(a2 + 32) = v13;
  }
  else
  {
    v14 = 0;
    *(_DWORD *)a2 = 0;
  }
  *(_DWORD *)(a1 + 4) = v14;
  if (v12)
  {
    if (v12 != 1)
      goto LABEL_4;
    if (v13 > v8)
      goto LABEL_4;
    v15 = *(_QWORD *)(a2 + 32);
    v16 = v15 + 2;
    if ((unint64_t)(v15 + 2) > *(_QWORD *)(a2 + 24))
      goto LABEL_4;
    v17 = *(unsigned __int16 *)(*(_QWORD *)(a2 + 8) + v15);
    *(_QWORD *)(a2 + 32) = v16;
    if (v17
      || (result = mc_read_mat4(a2, (double *)(a1 + 8)), !*(_DWORD *)a2)
      || (v19 = *(_QWORD *)(a2 + 24), v18 = *(_QWORD *)(a2 + 32), v20 = v18 + 2, v18 + 2 > v19)
      || (v21 = *(_QWORD *)(a2 + 8), v22 = *(unsigned __int16 *)(v21 + v18), *(_QWORD *)(a2 + 32) = v20, v22))
    {
LABEL_4:
      *(_DWORD *)a2 = 0;
      return result;
    }
    v23 = (_DWORD *)(a1 + 136);
    v24 = v18 + 4;
    if (v18 + 4 > v19)
    {
      *(_DWORD *)a2 = 0;
LABEL_25:
      *v23 = 0;
      *(_QWORD *)(a1 + 144) = 0;
      *(_QWORD *)(a1 + 152) = 0;
      *(_QWORD *)(a1 + 160) = 0;
      result = 0.0;
      *(_QWORD *)(a1 + 168) = 0;
      return result;
    }
    v25 = *(unsigned __int16 *)(v21 + v20);
    *(_QWORD *)(a2 + 32) = v24;
    *v23 = v25;
    v26 = v18 + 12;
    if (v18 + 12 > v19)
    {
      v23 = (_DWORD *)a2;
      goto LABEL_25;
    }
    v27 = *(_QWORD *)(v21 + v24);
    *(_QWORD *)(a2 + 32) = v26;
    *(_QWORD *)(a1 + 144) = v27;
    v28 = v18 + 20;
    if (v18 + 20 <= v19)
    {
      v29 = *(_QWORD *)(v21 + v26);
      *(_QWORD *)(a2 + 32) = v28;
      *(_QWORD *)(a1 + 152) = v29;
      v30 = v18 + 28;
      if (v18 + 28 <= v19)
      {
        v31 = *(_QWORD *)(v21 + v28);
        *(_QWORD *)(a2 + 32) = v30;
        *(_QWORD *)(a1 + 160) = v31;
        v32 = v18 + 36;
        if (v32 <= v19)
        {
          result = *(double *)(v21 + v30);
          *(_QWORD *)(a2 + 32) = v32;
          *(double *)(a1 + 168) = result;
        }
        else
        {
          *(_DWORD *)a2 = 0;
          result = 0.0;
          *(_QWORD *)(a1 + 168) = 0;
        }
      }
      else
      {
        *(_DWORD *)a2 = 0;
        *(_QWORD *)(a1 + 160) = 0;
        result = 0.0;
        *(_QWORD *)(a1 + 168) = 0;
      }
    }
    else
    {
      *(_DWORD *)a2 = 0;
      *(_QWORD *)(a1 + 152) = 0;
      *(_QWORD *)(a1 + 160) = 0;
      result = 0.0;
      *(_QWORD *)(a1 + 168) = 0;
    }
  }
  return result;
}

uint64_t mc_mesh_uv_encode_decode(uint64_t a1, int a2, __int128 *a3, uint64_t a4, char *a5, int a6)
{
  char *v12;
  char *v13;
  float *v14;
  char v15;
  unint64_t v16;
  _DWORD *v17;
  int *v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  float *v24;
  float64x2_t v25;
  double v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float64x2_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const float *v37;
  float *v38;
  int64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  uint64_t v43;
  uint64_t v44;
  float32x2_t *v45;
  char *v46;
  uint64_t v47;
  int64x2_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  float *v53;
  float *v54;
  float v55;
  uint64_t v56;
  float32x4_t v61;
  uint64_t v62;
  float *v63;
  uint64_t v64;
  float *v65;
  uint64_t v68;
  unint64_t v69;
  float *v70;
  uint64_t v71;
  BOOL v73;
  BOOL v75;
  uint64_t v77;
  const float *v78;
  float *v79;
  uint64_t v80;
  char *v81;
  unint64_t v82;
  uint64_t v83;
  BOOL v85;
  BOOL v87;
  uint64_t v89;
  const float *v90;
  float *v91;
  uint64_t v92;
  uint64_t v93;
  float *v94;
  float *v95;
  float v96;
  float64x2_t v97;
  uint64_t v98;
  uint64_t v100;
  uint64_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  const float *v105;
  float *v106;
  float64x2_t v107;
  uint64_t v108;
  uint64_t v109;
  double v110;
  int32x2_t *v111;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  uint64_t v116;
  float *v117;
  const float *v118;
  float64x2_t v120;
  uint64_t v121;
  uint64_t v122;
  float *v123;
  int32x2_t *v124;
  double v125;
  float v126;
  float32x2x3_t v127;
  float32x2x3_t v128;
  float32x2x3_t v129;
  float32x2x3_t v130;
  float32x4x3_t v131;
  float32x4x3_t v132;
  float32x4x3_t v133;
  float32x4x3_t v134;
  float32x4x3_t v135;
  float32x4x3_t v136;
  float32x4x3_t v137;
  float32x4x3_t v138;
  float32x4x3_t v139;
  float32x4x3_t v140;

  v12 = (char *)malloc_type_malloc(12 * *(unsigned int *)(a1 + 136), 0x9AAC9FB8uLL);
  v13 = (char *)malloc_type_malloc(4 * (3 * *(_DWORD *)(a1 + 160)), 0x100004052888210uLL);
  if (a2)
  {
    v14 = (float *)malloc_type_malloc(12 * *(unsigned int *)(a1 + 136), 0x10000403E1C8BA9uLL);
    if (!mc_uv_predictor_apply_hints(a1, a2, a3, (uint64_t)v14))
    {
      v21 = 0;
      goto LABEL_43;
    }
    if (a6)
    {
      v15 = 1;
      if (*(_DWORD *)(a1 + 160))
        goto LABEL_5;
LABEL_10:
      LODWORD(v20) = 0;
      goto LABEL_11;
    }
    v28 = *(unsigned int *)(a1 + 136);
    if (!(_DWORD)v28)
      goto LABEL_98;
    v29 = *(_QWORD *)(a1 + 152);
    if (v28 >= 8)
    {
      v30 = 0;
      v80 = 12 * v28 - 8;
      v81 = (char *)v14 + v80;
      v82 = v29 + v80;
      v83 = 12 * v28 - 4;
      v85 = (unint64_t)(v14 + 1) < v29 + v83 && v29 + 4 < (unint64_t)v14 + v83;
      v87 = (unint64_t)(v14 + 2) < v29 + 12 * v28 && v29 + 8 < (unint64_t)&v14[3 * v28];
      if ((v29 >= (unint64_t)v81 || (unint64_t)v14 >= v82) && !v85 && !v87)
      {
        v30 = v28 & 0xFFFFFFFC;
        v89 = v30;
        v90 = *(const float **)(a1 + 152);
        v91 = v14;
        do
        {
          v132 = vld3q_f32(v90);
          v90 += 12;
          v136 = vld3q_f32(v91);
          v140.val[0] = vsubq_f32(v132.val[0], v136.val[0]);
          v140.val[1] = vsubq_f32(v132.val[1], v136.val[1]);
          v140.val[2] = vsubq_f32(v132.val[2], v136.val[2]);
          vst3q_f32(v91, v140);
          v91 += 12;
          v89 -= 4;
        }
        while (v89);
        if (v30 == v28)
        {
LABEL_91:
          v97 = *(float64x2_t *)a4;
          v98 = *(uint64_t *)(a4 + 16);
          __asm { FMOV            V2.2D, #1.0 }
          if (v28 >= 2)
          {
            v101 = 0;
            v100 = v28 & 0xFFFFFFFE;
            v102 = vdivq_f64(_Q2, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v97.f64[0], 0));
            v103 = vdivq_f64(_Q2, (float64x2_t)vdupq_laneq_s64((int64x2_t)v97, 1));
            v104 = vdivq_f64(_Q2, (float64x2_t)vdupq_lane_s64(v98, 0));
            do
            {
              v105 = &v14[v101];
              v128 = vld3_f32(v105);
              v130.val[0] = (float32x2_t)vmovn_s64(vcvtq_s64_f64(vrndaq_f64(vmulq_f64(vcvtq_f64_f32(v128.val[0]), v102))));
              v130.val[1] = (float32x2_t)vmovn_s64(vcvtq_s64_f64(vrndaq_f64(vmulq_f64(vcvtq_f64_f32(v128.val[1]), v103))));
              v130.val[2] = (float32x2_t)vmovn_s64(vcvtq_s64_f64(vrndaq_f64(vmulq_f64(vcvtq_f64_f32(v128.val[2]), v104))));
              v106 = (float *)&v12[v101 * 4];
              vst3_f32(v106, v130);
              v101 += 6;
            }
            while (6 * (v28 >> 1) != v101);
            if (v100 == v28)
            {
LABEL_98:
              v15 = 0;
              if (!*(_DWORD *)(a1 + 160))
                goto LABEL_10;
              goto LABEL_5;
            }
          }
          else
          {
            v100 = 0;
          }
          v107 = vdivq_f64(_Q2, v97);
          v108 = v28 - v100;
          v109 = 3 * v100;
          v110 = 1.0 / *(double *)&v98;
          do
          {
            v111 = (int32x2_t *)&v12[v109 * 4];
            *v111 = vmovn_s64(vcvtq_s64_f64(vrndaq_f64(vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)&v14[v109]), v107))));
            v111[1].i32[0] = llround(v14[v109 + 2] * v110);
            v109 += 3;
            --v108;
          }
          while (v108);
          goto LABEL_98;
        }
      }
    }
    else
    {
      v30 = 0;
    }
    v92 = v28 - v30;
    v93 = 12 * v30 + 8;
    v94 = (float *)((char *)v14 + v93);
    v95 = (float *)(v29 + v93);
    do
    {
      *((float32x2_t *)v94 - 1) = vsub_f32(*(float32x2_t *)(v95 - 2), *(float32x2_t *)(v94 - 2));
      v96 = *v95;
      v95 += 3;
      *v94 = v96 - *v94;
      v94 += 3;
      --v92;
    }
    while (v92);
    goto LABEL_91;
  }
  if (!a6)
  {
    v31 = *(unsigned int *)(a1 + 136);
    if (!(_DWORD)v31)
      goto LABEL_105;
    v32 = *(_QWORD *)(a1 + 152);
    v33 = *(float64x2_t *)a4;
    v34 = *(uint64_t *)(a4 + 16);
    if ((_DWORD)v31 == 1)
    {
      v35 = 0;
    }
    else
    {
      v35 = v31 & 0xFFFFFFFE;
      __asm { FMOV            V5.2D, #1.0 }
      v113 = vdivq_f64(_Q5, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v33.f64[0], 0));
      v114 = vdivq_f64(_Q5, (float64x2_t)vdupq_laneq_s64((int64x2_t)v33, 1));
      v115 = vdivq_f64(_Q5, (float64x2_t)vdupq_lane_s64(v34, 0));
      v116 = v35;
      v117 = (float *)v12;
      v118 = *(const float **)(a1 + 152);
      do
      {
        v127 = vld3_f32(v118);
        v118 += 6;
        v129.val[0] = (float32x2_t)vmovn_s64(vcvtq_s64_f64(vrndaq_f64(vmulq_f64(vcvtq_f64_f32(v127.val[0]), v113))));
        v129.val[1] = (float32x2_t)vmovn_s64(vcvtq_s64_f64(vrndaq_f64(vmulq_f64(vcvtq_f64_f32(v127.val[1]), v114))));
        v129.val[2] = (float32x2_t)vmovn_s64(vcvtq_s64_f64(vrndaq_f64(vmulq_f64(vcvtq_f64_f32(v127.val[2]), v115))));
        vst3_f32(v117, v129);
        v117 += 6;
        v116 -= 2;
      }
      while (v116);
      if (v35 == v31)
      {
LABEL_105:
        v15 = 0;
        v14 = 0;
        if (!*(_DWORD *)(a1 + 160))
          goto LABEL_10;
        goto LABEL_5;
      }
    }
    __asm { FMOV            V2.2D, #1.0 }
    v120 = vdivq_f64(_Q2, v33);
    v121 = v31 - v35;
    v122 = 12 * v35 + 8;
    v123 = (float *)(v32 + v122);
    v124 = (int32x2_t *)&v12[v122];
    v125 = 1.0 / *(double *)&v34;
    do
    {
      v124[-1] = vmovn_s64(vcvtq_s64_f64(vrndaq_f64(vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)(v123 - 2)), v120))));
      v126 = *v123;
      v123 += 3;
      v124->i32[0] = llround(v126 * v125);
      v124 = (int32x2_t *)((char *)v124 + 12);
      --v121;
    }
    while (v121);
    goto LABEL_105;
  }
  v14 = 0;
  v15 = 1;
  if (!*(_DWORD *)(a1 + 160))
    goto LABEL_10;
LABEL_5:
  v16 = 0;
  v17 = v13 + 8;
  v18 = (int *)(*(_QWORD *)(a1 + 168) + 8);
  do
  {
    *(v17 - 2) = *(v18 - 2);
    *(v17 - 1) = *(v18 - 1);
    v19 = *v18;
    v18 += 4;
    *v17 = v19;
    v17 += 3;
    ++v16;
    v20 = *(unsigned int *)(a1 + 160);
  }
  while (v16 < v20);
LABEL_11:
  v21 = mc_encode_decode_predictive(v20, *(_DWORD *)(a1 + 136), v13, v12, 3u, a5, a6);
  v22 = v15 ^ 1;
  if (!(_DWORD)v21)
    v22 = 1;
  if ((v22 & 1) != 0)
    goto LABEL_43;
  v23 = *(unsigned int *)(a1 + 136);
  v24 = *(float **)(a1 + 152);
  if ((int)v23 >= 1)
  {
    v25 = *(float64x2_t *)a4;
    v26 = *(double *)(a4 + 16);
    if (v23 < 4)
    {
      v27 = 0;
LABEL_27:
      v43 = v23 - v27;
      v44 = 12 * v27 + 8;
      v45 = (float32x2_t *)((char *)v24 + v44);
      v46 = &v12[v44];
      do
      {
        v47 = *((_QWORD *)v46 - 1);
        v48.i64[0] = (int)v47;
        v48.i64[1] = SHIDWORD(v47);
        v45[-1] = vcvt_f32_f64(vmulq_f64(v25, vcvtq_f64_s64(v48)));
        v49 = *(_DWORD *)v46;
        v46 += 12;
        *(float *)&v47 = v26 * (double)v49;
        v45->i32[0] = v47;
        v45 = (float32x2_t *)((char *)v45 + 12);
        --v43;
      }
      while (v43);
      goto LABEL_29;
    }
    v27 = v23 & 0x7FFFFFFC;
    v36 = v23 & 0xFFFFFFFC;
    v37 = (const float *)v12;
    v38 = *(float **)(a1 + 152);
    do
    {
      v133 = vld3q_f32(v37);
      v37 += 12;
      v39.i64[0] = v133.val[0].i32[0];
      v39.i64[1] = v133.val[0].i32[1];
      v40 = vcvtq_f64_s64(v39);
      v39.i64[0] = v133.val[0].i32[2];
      v39.i64[1] = v133.val[0].i32[3];
      v137.val[0] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v40, v25.f64[0])), vmulq_n_f64(vcvtq_f64_s64(v39), v25.f64[0]));
      v39.i64[0] = v133.val[1].i32[0];
      v39.i64[1] = v133.val[1].i32[1];
      v41 = vcvtq_f64_s64(v39);
      v39.i64[0] = v133.val[1].i32[2];
      v39.i64[1] = v133.val[1].i32[3];
      v137.val[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_laneq_f64(v41, v25, 1)), vmulq_laneq_f64(vcvtq_f64_s64(v39), v25, 1));
      v39.i64[0] = v133.val[2].i32[0];
      v39.i64[1] = v133.val[2].i32[1];
      v42 = vcvtq_f64_s64(v39);
      v39.i64[0] = v133.val[2].i32[2];
      v39.i64[1] = v133.val[2].i32[3];
      v137.val[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v42, v26)), vmulq_n_f64(vcvtq_f64_s64(v39), v26));
      vst3q_f32(v38, v137);
      v38 += 12;
      v36 -= 4;
    }
    while (v36);
    if (v27 != v23)
      goto LABEL_27;
  }
LABEL_29:
  if (a2)
  {
    if (!(_DWORD)v23)
      goto LABEL_43;
    if (v23 >= 8)
    {
      v50 = 0;
      v68 = 12 * v23 - 8;
      v69 = (unint64_t)v24 + v68;
      v70 = (float *)((char *)v14 + v68);
      v71 = 12 * v23 - 4;
      v73 = v24 + 1 < (float *)((char *)v14 + v71) && v14 + 1 < (float *)((char *)v24 + v71);
      v75 = v24 + 2 < &v14[3 * v23] && v14 + 2 < &v24[3 * v23];
      if (((unint64_t)v14 >= v69 || v24 >= v70) && !v73 && !v75)
      {
        v50 = v23 & 0xFFFFFFFC;
        v77 = v50;
        v78 = v14;
        v79 = v24;
        do
        {
          v131 = vld3q_f32(v79);
          v135 = vld3q_f32(v78);
          v78 += 12;
          v139.val[0] = vaddq_f32(v135.val[0], v131.val[0]);
          v139.val[1] = vaddq_f32(v135.val[1], v131.val[1]);
          v139.val[2] = vaddq_f32(v135.val[2], v131.val[2]);
          vst3q_f32(v79, v139);
          v79 += 12;
          v77 -= 4;
        }
        while (v77);
        if (v50 == v23)
          goto LABEL_35;
      }
    }
    else
    {
      v50 = 0;
    }
    v51 = v23 - v50;
    v52 = 12 * v50 + 8;
    v53 = (float *)((char *)v14 + v52);
    v54 = (float *)((char *)v24 + v52);
    do
    {
      *((float32x2_t *)v54 - 1) = vadd_f32(*(float32x2_t *)(v53 - 2), *(float32x2_t *)(v54 - 2));
      v55 = *v53;
      v53 += 3;
      *v54 = v55 + *v54;
      v54 += 3;
      --v51;
    }
    while (v51);
  }
LABEL_35:
  if (!(_DWORD)v23)
    goto LABEL_43;
  if (v23 < 4)
  {
    v56 = 0;
LABEL_41:
    v64 = v23 - v56;
    v65 = &v24[3 * v56 + 2];
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *((float32x2_t *)v65 - 1) = vmaxnm_f32(vminnm_f32(*(float32x2_t *)(v65 - 2), _D0), 0);
      *v65 = fmaxf(fminf(*v65, 10000.0), 0.0);
      v65 += 3;
      --v64;
    }
    while (v64);
    goto LABEL_43;
  }
  v56 = v23 & 0xFFFFFFFC;
  __asm { FMOV            V0.4S, #1.0 }
  v61 = (float32x4_t)vdupq_n_s32(0x461C4000u);
  v62 = v56;
  v63 = v24;
  do
  {
    v134 = vld3q_f32(v63);
    v138.val[0] = vmaxnmq_f32(vminnmq_f32(v134.val[0], _Q0), (float32x4_t)0);
    v138.val[1] = vmaxnmq_f32(vminnmq_f32(v134.val[1], _Q0), (float32x4_t)0);
    v138.val[2] = vmaxnmq_f32(vminnmq_f32(v134.val[2], v61), (float32x4_t)0);
    vst3q_f32(v63, v138);
    v63 += 12;
    v62 -= 4;
  }
  while (v62);
  if (v56 != v23)
    goto LABEL_41;
LABEL_43:
  free(v14);
  free(v13);
  free(v12);
  return v21;
}

void mc_io_r_uv_predictive(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v16;
  int *v17;
  int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  size_t v25;
  float32x4_t *v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  float32x4_t *v32;
  float32x4_t *v33;
  uint64_t v34;
  __int32 *v35;
  __int32 *v36;
  uint64_t v37;
  __int32 *v38;
  __int32 v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  __int32 *v44;
  __int32 *v45;
  uint64_t v46;
  char *v47;
  int v48;
  uint64_t v49;
  __int128 *v50;
  float32x4_t *v51;
  char *v52;
  char *v53;
  BOOL v55;
  BOOL v57;
  uint64_t v59;
  float32x4_t *v60;
  float *v61;
  size_t v62;
  __int128 *v63;
  uint64_t v64;
  size_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  float32x4_t *v69;
  float32x4_t *v70;
  BOOL v72;
  const float *f32;
  uint64_t v75;
  float32x4_t *v76;
  const float *v77;
  float32x4_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  _DWORD *v87;
  uint64_t v88;
  uint64_t v89;
  _DWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  float32x4x2_t v100;
  float32x4x2_t v101;
  float32x4x3_t v102;

  v99 = *MEMORY[0x1E0C80C00];
  v95 = 0;
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  if (v5 == v4)
  {
    v5 = 0;
LABEL_5:
    v8 = 0;
    v9 = 0;
    v6 = 0;
    v10 = 0;
    goto LABEL_26;
  }
  v6 = *(_DWORD *)a1;
  if (!*(_DWORD *)a1)
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
    goto LABEL_26;
  }
  v7 = v5 + 4;
  if (v5 + 4 > v4)
    goto LABEL_5;
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(_DWORD *)(v11 + v5);
  *(_QWORD *)(a1 + 32) = v7;
  v13 = v5 + 6;
  if (v5 + 6 > v4)
  {
    v8 = 0;
    v9 = 0;
    v6 = 0;
    v10 = 0;
    v5 += 4;
    goto LABEL_26;
  }
  v14 = *(unsigned __int16 *)(v11 + v7);
  *(_QWORD *)(a1 + 32) = v13;
  if (v12 != 1263421507 || v14 > 1)
  {
    v8 = 0;
    v9 = 0;
    v6 = 0;
    v10 = 0;
    v5 += 6;
    goto LABEL_26;
  }
  v16 = v5 + 10;
  if (v5 + 10 > v4)
  {
    *(_DWORD *)a1 = 0;
    v17 = &v95;
LABEL_19:
    v19 = 0;
    v8 = 0;
    *v17 = 0;
    v18 = v95;
    goto LABEL_20;
  }
  v18 = *(_DWORD *)(v11 + v13);
  *(_QWORD *)(a1 + 32) = v16;
  v95 = v18;
  v13 = v5 + 12;
  if (v5 + 12 > v4)
  {
    v13 = v5 + 10;
    v17 = (int *)a1;
    goto LABEL_19;
  }
  v19 = *(unsigned __int16 *)(v11 + v16);
  *(_QWORD *)(a1 + 32) = v13;
  v79 = v5 + 14;
  if (v5 + 14 <= v4)
  {
    *(_QWORD *)(a1 + 32) = v79;
    v13 = v5 + 22;
    if (v5 + 22 <= v4)
    {
      v8 = *(_QWORD *)(v11 + v79);
      *(_QWORD *)(a1 + 32) = v13;
    }
    else
    {
      v8 = 0;
      *(_DWORD *)a1 = 0;
      v13 = v5 + 14;
    }
  }
  else
  {
    v8 = 0;
    *(_DWORD *)a1 = 0;
  }
LABEL_20:
  v9 = 0;
  if (v18 != 7 || v19 > 2)
  {
    v5 = v13;
    v6 = 0;
    v10 = 0;
    goto LABEL_26;
  }
  v20 = *(_DWORD *)a1;
  if (*(_DWORD *)a1)
  {
    v21 = v13 + 4;
    if (v13 + 4 <= v4)
    {
      v6 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + v13);
      *(_QWORD *)(a1 + 32) = v21;
      if (v13 + 8 <= v4)
      {
        v10 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + v21);
        *(_QWORD *)(a1 + 32) = v13 + 8;
        v21 = v13 + 8;
      }
      else
      {
        v20 = 0;
        v10 = 0;
        *(_DWORD *)a1 = 0;
      }
    }
    else
    {
      v6 = 0;
      v20 = 0;
      v10 = 0;
      *(_DWORD *)a1 = 0;
      v21 = v13;
    }
  }
  else
  {
    v6 = 0;
    v10 = 0;
    v21 = v13;
  }
  if (v19 < 2)
  {
    if (!v20)
      goto LABEL_27;
    v81 = v21 + 8;
    if (v21 + 8 <= v4)
    {
      v84 = *(_QWORD *)(a1 + 8);
      v85 = *(_QWORD *)(v84 + v21);
      *(_QWORD *)(a1 + 32) = v81;
      v96 = v85;
      v86 = v21 + 16;
      if (v86 <= v4)
      {
        v22 = *(_QWORD *)(v84 + v81);
        *(_QWORD *)(a1 + 32) = v86;
        goto LABEL_29;
      }
      v20 = 0;
      *(_DWORD *)a1 = 0;
LABEL_28:
      v22 = 0;
LABEL_29:
      v23 = 0;
      v97 = v22;
      v24 = 0x3F847AE147AE147BLL;
      goto LABEL_30;
    }
    v5 = v13;
    v9 = v19;
LABEL_26:
    *(_DWORD *)a1 = 0;
    v13 = v5;
    v19 = v9;
LABEL_27:
    v20 = 0;
    v96 = 0;
    goto LABEL_28;
  }
  if (!v20)
    goto LABEL_120;
  v80 = v21 + 1;
  if (v21 + 1 > v4)
  {
    *(_DWORD *)a1 = 0;
LABEL_120:
    v23 = 0;
LABEL_121:
    v96 = 0;
LABEL_122:
    v20 = 0;
    v97 = 0;
LABEL_123:
    v24 = 0;
    v19 = 2;
    goto LABEL_30;
  }
  v82 = *(_QWORD *)(a1 + 8);
  v23 = *(unsigned __int8 *)(v82 + v21);
  *(_QWORD *)(a1 + 32) = v80;
  v83 = v21 + 9;
  if (v21 + 9 > v4)
  {
    *(_DWORD *)a1 = 0;
    goto LABEL_121;
  }
  v91 = *(_QWORD *)(v82 + v80);
  *(_QWORD *)(a1 + 32) = v83;
  v96 = v91;
  v92 = v21 + 17;
  if (v21 + 17 > v4)
  {
    *(_DWORD *)a1 = 0;
    goto LABEL_122;
  }
  v93 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + v83);
  *(_QWORD *)(a1 + 32) = v92;
  v97 = v93;
  v94 = v21 + 25;
  if (v94 > v4)
  {
    v20 = 0;
    *(_DWORD *)a1 = 0;
    goto LABEL_123;
  }
  v24 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + v92);
  *(_QWORD *)(a1 + 32) = v94;
  v20 = 1;
  v19 = 2;
LABEL_30:
  v98 = v24;
  v25 = *(unsigned int *)(a2 + 136);
  if ((_DWORD)v25 != v10)
  {
    v50 = 0;
    v26 = 0;
    *(_DWORD *)a1 = 0;
    if (v6 == *(_DWORD *)(a2 + 160))
      goto LABEL_55;
    goto LABEL_54;
  }
  if (v6 != *(_DWORD *)(a2 + 160))
  {
    v50 = 0;
    v26 = 0;
    goto LABEL_54;
  }
  if (!v20)
  {
    v50 = 0;
    v26 = 0;
    goto LABEL_55;
  }
  v26 = (float32x4_t *)malloc_type_calloc(v25, 0xCuLL, 0x100004052888210uLL);
  v27 = *(_DWORD *)(a2 + 136);
  v28 = 2 * v27;
  v29 = 3 * v27;
  if (v23)
    v30 = v29;
  else
    v30 = v28;
  mc_read_tiny_big(a1, v30, v26);
  if (v19 <= 1)
  {
    v31 = *(int *)(a2 + 136);
    v32 = (float32x4_t *)malloc_type_malloc(8 * v31, 0x100004052888210uLL);
    v33 = v32;
    if ((int)v31 >= 1)
    {
      if (v31 >= 8)
      {
        v34 = 0;
        v69 = (float32x4_t *)((char *)v32 + 4 * v31);
        v70 = (float32x4_t *)((char *)v26 + 8 * v31);
        v72 = v32 < v70 && v26 < v69;
        if ((v26 >= (float32x4_t *)((char *)v32 + 8 * v31) || v69 >= v70) && !v72)
        {
          v34 = v31 & 0x7FFFFFF8;
          f32 = v26[2].f32;
          v75 = v31 & 0xFFFFFFF8;
          v76 = v32;
          do
          {
            v77 = f32 - 8;
            v100 = vld2q_f32(v77);
            v101 = vld2q_f32(f32);
            *v76 = v100.val[0];
            v76[1] = v101.val[0];
            v78 = (float32x4_t *)((char *)v76 + 4 * v31);
            *v78 = v100.val[1];
            v78[1] = v101.val[1];
            f32 += 16;
            v76 += 2;
            v75 -= 8;
          }
          while (v75);
          if (v34 == v31)
            goto LABEL_42;
        }
      }
      else
      {
        v34 = 0;
      }
      v35 = &v32->i32[v34];
      v36 = &v32->i32[v34 + v31];
      v37 = v31 - v34;
      v38 = &v26->i32[2 * v34 + 1];
      do
      {
        *v35++ = *(v38 - 1);
        v39 = *v38;
        v38 += 2;
        *v36++ = v39;
        --v37;
      }
      while (v37);
    }
LABEL_42:
    memcpy(v26, v32, 8 * v31);
    free(v33);
  }
  v40 = *(unsigned int *)(a2 + 136);
  v41 = (char *)malloc_type_malloc(12 * (_DWORD)v40, 0x100004052888210uLL);
  v42 = v41;
  if ((int)v40 < 1)
    goto LABEL_48;
  if (v40 < 8)
  {
    v43 = 0;
LABEL_46:
    v44 = &v26->i32[v43];
    v45 = &v26->i32[v43 + v40];
    v46 = v40 - v43;
    v47 = &v41[12 * v43 + 8];
    do
    {
      *((_DWORD *)v47 - 2) = *v44;
      v48 = *v45++;
      *((_DWORD *)v47 - 1) = v48;
      *(_DWORD *)v47 = v44[2 * v40];
      v47 += 12;
      ++v44;
      --v46;
    }
    while (v46);
    goto LABEL_48;
  }
  v43 = 0;
  v51 = (float32x4_t *)&v41[12 * v40];
  v52 = (char *)v26 + 8 * v40;
  v53 = &v26->i8[4 * v40];
  v55 = v41 < v52 && v53 < (char *)v51;
  v57 = v41 < v53 && v26 < v51;
  if (v52 < (char *)v51 && v41 < (char *)v26 + 12 * v40)
    goto LABEL_46;
  if (v55)
    goto LABEL_46;
  if (v57)
    goto LABEL_46;
  v43 = v40 & 0x7FFFFFFC;
  v59 = v40 & 0xFFFFFFFC;
  v60 = v26;
  v61 = (float *)v41;
  do
  {
    v102.val[0] = *v60;
    v102.val[1] = *(float32x4_t *)((char *)v60 + 4 * v40);
    v102.val[2] = *(float32x4_t *)((char *)v60 + 8 * v40);
    vst3q_f32(v61, v102);
    v61 += 12;
    ++v60;
    v59 -= 4;
  }
  while (v59);
  if (v43 != v40)
    goto LABEL_46;
LABEL_48:
  memcpy(v26, v41, 12 * (_DWORD)v40);
  free(v42);
  if (!*(_DWORD *)a1)
  {
    v50 = 0;
    goto LABEL_55;
  }
  v49 = *(_QWORD *)(a1 + 32);
  if ((unint64_t)(v49 + 2) > *(_QWORD *)(a1 + 24))
  {
    v50 = 0;
LABEL_54:
    *(_DWORD *)a1 = 0;
    goto LABEL_55;
  }
  v62 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 8) + v49);
  *(_QWORD *)(a1 + 32) = v49 + 2;
  v63 = (__int128 *)malloc_type_calloc(v62, 0xB0uLL, 0x1000040D737CE88uLL);
  v50 = v63;
  if (v62)
  {
    v64 = (uint64_t)v63;
    v65 = v62;
    do
    {
      mc_io_r_uv_model(v64, a1);
      v64 += 176;
      --v65;
    }
    while (v65);
  }
  if (*(_DWORD *)a1)
  {
    if (*(_QWORD *)(a1 + 24) >= (unint64_t)(v13 + v8))
      *(_QWORD *)(a1 + 32) = v13 + v8;
    if (!mc_mesh_uv_encode_decode(a2, v62, v50, (uint64_t)&v96, (char *)v26, 1))
      goto LABEL_54;
    if (!v23)
    {
      v66 = *(unsigned int *)(a2 + 136);
      if ((_DWORD)v66)
      {
        v67 = *(_QWORD *)(a2 + 152);
        if ((_DWORD)v66 == 1)
        {
          v68 = 0;
LABEL_135:
          v89 = v66 - v68;
          v90 = (_DWORD *)(v67 + 12 * v68 + 8);
          do
          {
            *v90 = 1065353216;
            v90 += 3;
            --v89;
          }
          while (v89);
          goto LABEL_55;
        }
        v68 = v66 & 0xFFFFFFFE;
        v87 = (_DWORD *)(v67 + 20);
        v88 = v68;
        do
        {
          *(v87 - 3) = 1065353216;
          *v87 = 1065353216;
          v87 += 6;
          v88 -= 2;
        }
        while (v88);
        if (v68 != v66)
          goto LABEL_135;
      }
    }
  }
LABEL_55:
  free(v50);
  free(v26);
}

void mc_io_r_uv_model_chunk(uint64_t a1, _DWORD *a2, void **a3)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v14;
  int *v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;

  if (*a3)
  {
    *(_DWORD *)a1 = 0;
    return;
  }
  v23 = 0;
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  if (v5 == v4)
    goto LABEL_10;
  v6 = v5 + 4;
  if (!*(_DWORD *)a1 || v6 > v4)
    goto LABEL_10;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_DWORD *)(v8 + v5);
  *(_QWORD *)(a1 + 32) = v6;
  v10 = v5 + 6;
  if (v5 + 6 > v4)
    goto LABEL_10;
  v11 = *(unsigned __int16 *)(v8 + v6);
  *(_QWORD *)(a1 + 32) = v10;
  if (v9 != 1263421507 || v11 > 1)
    goto LABEL_10;
  v14 = v5 + 10;
  if (v5 + 10 <= v4)
  {
    v16 = *(_DWORD *)(v8 + v10);
    *(_QWORD *)(a1 + 32) = v14;
    v23 = v16;
    v10 = v5 + 12;
    if (v5 + 12 <= v4)
    {
      v17 = *(unsigned __int16 *)(v8 + v14);
      *(_QWORD *)(a1 + 32) = v10;
      v22 = v5 + 14;
      if (v5 + 14 <= v4)
      {
        *(_QWORD *)(a1 + 32) = v22;
        v10 = v5 + 22;
        if (v5 + 22 <= v4)
        {
          v18 = *(_QWORD *)(v8 + v22);
          *(_QWORD *)(a1 + 32) = v10;
        }
        else
        {
          v18 = 0;
          *(_DWORD *)a1 = 0;
          v10 = v5 + 14;
        }
      }
      else
      {
        v18 = 0;
        *(_DWORD *)a1 = 0;
      }
      goto LABEL_21;
    }
    v10 = v5 + 10;
    v15 = (int *)a1;
  }
  else
  {
    *(_DWORD *)a1 = 0;
    v15 = &v23;
  }
  v17 = 0;
  v18 = 0;
  *v15 = 0;
  v16 = v23;
LABEL_21:
  if (v16 != 10 || v17 >= 2)
    goto LABEL_10;
  if (!*(_DWORD *)a1)
    return;
  if (v10 + 2 > v4)
  {
LABEL_10:
    *(_DWORD *)a1 = 0;
    return;
  }
  v19 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 8) + v10);
  *(_QWORD *)(a1 + 32) = v10 + 2;
  *a2 = v19;
  *a3 = malloc_type_calloc(v19, 0xB0uLL, 0x1000040D737CE88uLL);
  if (v19)
  {
    v20 = 0;
    v21 = 176 * v19;
    do
    {
      mc_io_r_uv_model((uint64_t)*a3 + v20, a1);
      v20 += 176;
    }
    while (v21 != v20);
  }
  if (*(_DWORD *)a1)
  {
    if (*(_QWORD *)(a1 + 24) >= (unint64_t)(v10 + v18))
      *(_QWORD *)(a1 + 32) = v10 + v18;
  }
}

void mc_io_r_vi_connectivity_eb(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  void *v11;
  void *v12;
  uint64_t v14;
  int *v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  size_t v27;
  uint64_t v28;
  size_t v29;
  char v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;

  v35 = 0;
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 == v3)
    goto LABEL_10;
  if (!*(_DWORD *)a1)
    goto LABEL_10;
  v5 = v4 + 4;
  if (v4 + 4 > v3)
    goto LABEL_10;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_DWORD *)(v6 + v4);
  *(_QWORD *)(a1 + 32) = v5;
  v8 = v4 + 6;
  if (v4 + 6 > v3)
    goto LABEL_10;
  v9 = *(unsigned __int16 *)(v6 + v5);
  *(_QWORD *)(a1 + 32) = v8;
  if (v7 != 1263421507 || v9 > 1)
  {
LABEL_10:
    v11 = 0;
    v12 = 0;
    goto LABEL_11;
  }
  v14 = v4 + 10;
  if (v4 + 10 > v3)
  {
    *(_DWORD *)a1 = 0;
    v15 = &v35;
LABEL_17:
    v17 = 0;
    v18 = 0;
    *v15 = 0;
    v16 = v35;
    goto LABEL_18;
  }
  v16 = *(_DWORD *)(v6 + v8);
  *(_QWORD *)(a1 + 32) = v14;
  v35 = v16;
  v8 = v4 + 12;
  if (v4 + 12 > v3)
  {
    v8 = v4 + 10;
    v15 = (int *)a1;
    goto LABEL_17;
  }
  v17 = *(unsigned __int16 *)(v6 + v14);
  *(_QWORD *)(a1 + 32) = v8;
  v32 = v4 + 14;
  if (v4 + 14 <= v3)
  {
    *(_QWORD *)(a1 + 32) = v32;
    v8 = v4 + 22;
    if (v4 + 22 <= v3)
    {
      v18 = *(_QWORD *)(v6 + v32);
      *(_QWORD *)(a1 + 32) = v8;
    }
    else
    {
      v18 = 0;
      *(_DWORD *)a1 = 0;
      v8 = v4 + 14;
    }
  }
  else
  {
    v18 = 0;
    *(_DWORD *)a1 = 0;
  }
LABEL_18:
  v11 = 0;
  v12 = 0;
  if (v16 != 4 || v17 > 1)
    goto LABEL_11;
  if (!*(_DWORD *)a1)
  {
    v11 = 0;
    v12 = 0;
    goto LABEL_12;
  }
  v19 = v8 + 4;
  if (v8 + 4 > v3)
    goto LABEL_10;
  v20 = *(_QWORD *)(a1 + 8);
  v21 = *(_DWORD *)(v20 + v8);
  *(_QWORD *)(a1 + 32) = v19;
  v22 = v8 + 8;
  if (v8 + 8 > v3)
    goto LABEL_10;
  v23 = *(_DWORD *)(v20 + v19);
  *(_QWORD *)(a1 + 32) = v22;
  v24 = v8 + 16;
  if (v8 + 16 > v3)
    goto LABEL_10;
  v25 = *(_QWORD *)(a1 + 8);
  v26 = *(_QWORD *)(v25 + v22);
  *(_QWORD *)(a1 + 32) = v24;
  if (v8 + 24 > v3)
    goto LABEL_10;
  v27 = *(_QWORD *)(v25 + v24);
  *(_QWORD *)(a1 + 32) = v8 + 24;
  v11 = malloc_type_malloc(v26, 0xFAECDBABuLL);
  v12 = malloc_type_malloc(v27, 0x1B0038D8uLL);
  if (!*(_DWORD *)a1)
    goto LABEL_41;
  v28 = *(_QWORD *)(a1 + 32);
  if (v28 + v26 > *(_QWORD *)(a1 + 24))
    goto LABEL_29;
  memcpy(v11, (const void *)(*(_QWORD *)(a1 + 8) + v28), v26);
  v29 = *(_QWORD *)(a1 + 32) + v26;
  *(_QWORD *)(a1 + 32) = v29;
  if (!*(_DWORD *)a1)
    goto LABEL_41;
  if (v29 + v27 > *(_QWORD *)(a1 + 24))
  {
LABEL_29:
    *(_DWORD *)a1 = 0;
    v30 = 1;
    v31 = *(_DWORD *)(a2 + 160);
    if (!v31)
      goto LABEL_47;
    goto LABEL_42;
  }
  memcpy(v12, (const void *)(*(_QWORD *)(a1 + 8) + v29), v27);
  *(_QWORD *)(a1 + 32) += v27;
  if (!*(_DWORD *)a1)
  {
LABEL_41:
    v30 = 1;
    v31 = *(_DWORD *)(a2 + 160);
    if (!v31)
      goto LABEL_47;
    goto LABEL_42;
  }
  if (*(_QWORD *)(a1 + 24) >= (unint64_t)(v18 + v8))
  {
    v30 = 0;
    *(_QWORD *)(a1 + 32) = v18 + v8;
    v31 = *(_DWORD *)(a2 + 160);
    if (!v31)
      goto LABEL_47;
    goto LABEL_42;
  }
  v30 = 0;
  v31 = *(_DWORD *)(a2 + 160);
  if (v31)
  {
LABEL_42:
    if (v31 == v21)
      goto LABEL_47;
    *(_DWORD *)a1 = 0;
    v33 = *(_DWORD *)(a2 + 136);
    if (!v33 || v33 == v23)
      goto LABEL_12;
LABEL_11:
    *(_DWORD *)a1 = 0;
    goto LABEL_12;
  }
LABEL_47:
  v34 = *(_DWORD *)(a2 + 136);
  if (v34 && v34 != v23
    || (v30 & 1) == 0
    && (v31 != v21 || v34 != v23 || !mc_edgebreaker_decompress_and_update_mesh(a2, (uint64_t)v11, v26, (uint64_t)v12, v27)))
  {
    goto LABEL_11;
  }
LABEL_12:
  free(v11);
  free(v12);
}

void mc_io_r_material_id(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v13;
  int *v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  _DWORD *v21;
  int *v22;
  int v23;
  uint64_t v24;
  int v25;

  v25 = 0;
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 == v3)
    goto LABEL_7;
  v5 = v4 + 4;
  if (!*(_DWORD *)a1 || v5 > v3)
    goto LABEL_7;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_DWORD *)(v7 + v4);
  *(_QWORD *)(a1 + 32) = v5;
  v9 = v4 + 6;
  if (v4 + 6 > v3)
    goto LABEL_7;
  v10 = *(unsigned __int16 *)(v7 + v5);
  *(_QWORD *)(a1 + 32) = v9;
  if (v8 != 1263421507 || v10 > 1)
    goto LABEL_7;
  v13 = v4 + 10;
  if (v4 + 10 > v3)
  {
    *(_DWORD *)a1 = 0;
    v14 = &v25;
LABEL_17:
    v16 = 0;
    v17 = 0;
    *v14 = 0;
    v15 = v25;
    goto LABEL_18;
  }
  v15 = *(_DWORD *)(v7 + v9);
  *(_QWORD *)(a1 + 32) = v13;
  v25 = v15;
  v9 = v4 + 12;
  if (v4 + 12 > v3)
  {
    v9 = v4 + 10;
    v14 = (int *)a1;
    goto LABEL_17;
  }
  v16 = *(unsigned __int16 *)(v7 + v13);
  *(_QWORD *)(a1 + 32) = v9;
  v24 = v4 + 14;
  if (v4 + 14 <= v3)
  {
    *(_QWORD *)(a1 + 32) = v24;
    v9 = v4 + 22;
    if (v4 + 22 <= v3)
    {
      v17 = *(_QWORD *)(v7 + v24);
      *(_QWORD *)(a1 + 32) = v9;
    }
    else
    {
      v17 = 0;
      *(_DWORD *)a1 = 0;
      v9 = v4 + 14;
    }
  }
  else
  {
    v17 = 0;
    *(_DWORD *)a1 = 0;
  }
LABEL_18:
  if (v15 != 5
    || v16 > 1
    || !*(_DWORD *)a1
    || v9 + 4 > v3
    || (v18 = *(int *)(*(_QWORD *)(a1 + 8) + v9), *(_QWORD *)(a1 + 32) = v9 + 4, (_DWORD)v18 != *(_DWORD *)(a2 + 160)))
  {
LABEL_7:
    *(_DWORD *)a1 = 0;
    return;
  }
  v19 = v18;
  v20 = (int *)malloc_type_malloc(4 * v18, 0x100004052888210uLL);
  mc_read_tiny_big(a1, v18, v20);
  if ((int)v18 >= 1)
  {
    v21 = (_DWORD *)(*(_QWORD *)(a2 + 168) + 12);
    v22 = v20;
    do
    {
      v23 = *v22++;
      *v21 = v23;
      v21 += 4;
      --v19;
    }
    while (v19);
  }
  if (*(_DWORD *)a1)
  {
    if (*(_QWORD *)(a1 + 24) >= (unint64_t)(v9 + v17))
      *(_QWORD *)(a1 + 32) = v9 + v17;
  }
  free(v20);
}

uint64_t mc_io_r_postprocess(uint64_t result, _DWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v11;
  int *v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  int v24;

  v24 = 0;
  v2 = *(_QWORD *)(result + 24);
  v3 = *(_QWORD *)(result + 32);
  if (v3 == v2)
    goto LABEL_7;
  v4 = v3 + 4;
  if (!*(_DWORD *)result || v4 > v2)
    goto LABEL_7;
  v6 = *(_QWORD *)(result + 8);
  v7 = *(_DWORD *)(v6 + v3);
  *(_QWORD *)(result + 32) = v4;
  v8 = v3 + 6;
  if (v3 + 6 > v2)
    goto LABEL_7;
  v9 = *(unsigned __int16 *)(v6 + v4);
  *(_QWORD *)(result + 32) = v8;
  if (v7 != 1263421507 || v9 > 1)
    goto LABEL_7;
  v11 = v3 + 10;
  if (v3 + 10 <= v2)
  {
    v13 = *(_DWORD *)(v6 + v8);
    *(_QWORD *)(result + 32) = v11;
    v24 = v13;
    v8 = v3 + 12;
    if (v3 + 12 <= v2)
    {
      v14 = *(unsigned __int16 *)(v6 + v11);
      *(_QWORD *)(result + 32) = v8;
      v18 = v3 + 14;
      if (v3 + 14 <= v2)
      {
        *(_QWORD *)(result + 32) = v18;
        v8 = v3 + 22;
        if (v3 + 22 <= v2)
        {
          v15 = *(_QWORD *)(v6 + v18);
          *(_QWORD *)(result + 32) = v8;
        }
        else
        {
          v15 = 0;
          *(_DWORD *)result = 0;
          v8 = v18;
        }
      }
      else
      {
        v15 = 0;
        *(_DWORD *)result = 0;
      }
      goto LABEL_19;
    }
    v8 = v3 + 10;
    v12 = (int *)result;
  }
  else
  {
    *(_DWORD *)result = 0;
    v12 = &v24;
  }
  v14 = 0;
  v15 = 0;
  *v12 = 0;
  v13 = v24;
LABEL_19:
  if (v13 != 11 || v14 >= 2)
    goto LABEL_7;
  if (!*(_DWORD *)result)
    goto LABEL_8;
  if (v8 + 1 > v2)
  {
LABEL_7:
    *(_DWORD *)result = 0;
LABEL_8:
    *a2 = 0;
    a2[2] = 0;
    return result;
  }
  v16 = *(unsigned __int8 *)(*(_QWORD *)(result + 8) + v8);
  *(_QWORD *)(result + 32) = v8 + 1;
  *a2 = v16;
  if (v16)
  {
    v17 = *(_QWORD *)(result + 32);
    if (v17 + 4 > v2)
    {
      *(_DWORD *)result = 0;
      a2[1] = 0;
      a2[2] = 0;
      return result;
    }
    v19 = *(_DWORD *)(*(_QWORD *)(result + 8) + v17);
    *(_QWORD *)(result + 32) = v17 + 4;
    a2[1] = v19;
  }
  v20 = *(_QWORD *)(result + 32);
  v21 = v20 + 1;
  if (v20 + 1 <= v2)
  {
    v22 = *(unsigned __int8 *)(*(_QWORD *)(result + 8) + v20);
    *(_QWORD *)(result + 32) = v21;
    a2[2] = v22;
    v23 = v15 + v8;
    if (v2 >= v23)
      *(_QWORD *)(result + 32) = v23;
  }
  else
  {
    *(_DWORD *)result = 0;
    a2[2] = 0;
  }
  return result;
}

uint64_t mc_mesh_recompute_uv(uint64_t a1, int a2, uint64_t a3)
{
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  float32x2_t *v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float64x2_t v28;
  double v29;
  float *v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  float64x2_t v37;
  float32x2_t *v38;
  float v39;
  float64x2_t v40;
  double v41;
  float *v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  float64x2_t v49;
  float32x2_t *v50;
  float v51;
  float64x2_t v52;
  double v53;
  float *v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  float64x2_t v61;
  uint64_t v62;
  void *v63;
  float64x2_t v65;
  float64x2_t v66;
  double v67;
  _QWORD v68[258];

  v68[256] = *MEMORY[0x1E0C80C00];
  v6 = malloc_type_calloc(*(unsigned int *)(a1 + 136), 1uLL, 0x100004077774924uLL);
  bzero(v68, 0x800uLL);
  if (a2 >= 1)
  {
    v7 = a2;
    do
    {
      v8 = *(unsigned int *)(a3 + 4);
      if (v8 > 0xFF)
        goto LABEL_36;
      v68[v8] = a3;
      a3 += 176;
    }
    while (--v7);
  }
  if (!*(_QWORD *)(a1 + 152))
  {
    v62 = *(unsigned int *)(a1 + 136);
    if (!(_DWORD)v62
      || (v63 = malloc_type_malloc(12 * v62, 0x10000403E1C8BA9uLL), (*(_QWORD *)(a1 + 152) = v63) == 0))
    {
LABEL_36:
      v10 = 0;
      goto LABEL_37;
    }
  }
  v9 = *(unsigned int *)(a1 + 160);
  v10 = 1;
  if ((_DWORD)v9)
  {
    v11 = 0;
    v12 = 0;
    __asm { FMOV            V0.2D, #0.5 }
    v65 = _Q0;
    __asm { FMOV            V8.2S, #1.0 }
    while (1)
    {
      v21 = *(_QWORD *)(a1 + 168);
      v22 = *(unsigned int *)(v21 + v11 + 12);
      if (v22 > 0xFF)
        goto LABEL_36;
      v23 = v68[v22];
      if (v23)
        break;
LABEL_10:
      ++v12;
      v11 += 16;
      if (v12 >= v9)
      {
        v10 = 1;
        goto LABEL_37;
      }
    }
    v24 = *(int *)(v21 + v11);
    v66 = 0uLL;
    v67 = 0.0;
    if (v6[v24])
    {
      v25 = v21 + v11;
      v26 = *(int *)(v25 + 4);
      v66 = 0uLL;
      v67 = 0.0;
      if (v6[v26])
        goto LABEL_15;
    }
    else
    {
      v6[v24] = 1;
      if (*(_DWORD *)v23 == 1)
      {
        v30 = (float *)(*(_QWORD *)(a1 + 144) + 12 * (int)v24);
        v31 = v30[1];
        v32 = *v30;
        v33 = v30[2];
        v34 = *(double *)(a1 + 80) * v31
            + *(double *)(a1 + 72) * v32
            + *(double *)(a1 + 96)
            + *(double *)(a1 + 88) * v33;
        v35 = *(double *)(a1 + 48) * v31
            + *(double *)(a1 + 40) * v32
            + *(double *)(a1 + 56) * v33
            + *(double *)(a1 + 64);
        v36 = *(double *)(a1 + 16) * v31 + *(double *)(a1 + 8) * v32 + *(double *)(a1 + 24) * v33 + *(double *)(a1 + 32);
        if (!mc_projection_project((double *)(v23 + 136), (long double *)v66.f64, v36 * *(double *)(v23 + 8)+ *(double *)(v23 + 16) * v35+ *(double *)(v23 + 24) * v34+ *(double *)(v23 + 32), *(double *)(v23 + 40) * v36+ *(double *)(v23 + 48) * v35+ *(double *)(v23 + 56) * v34+ *(double *)(v23 + 64), *(double *)(v23 + 72) * v36+ *(double *)(v23 + 80) * v35+ *(double *)(v23 + 88) * v34+ *(double *)(v23 + 96)))goto LABEL_36;
        v37 = vmulq_f64(v66, v65);
        *(_QWORD *)&v28.f64[0] = *(_OWORD *)&vaddq_f64(v37, v65);
        v28.f64[1] = vsubq_f64(v65, v37).f64[1];
        v29 = v67;
      }
      else
      {
        v28 = 0uLL;
        v29 = 0.0;
        if (!*(_DWORD *)v23)
          v29 = 1.0;
      }
      v38 = (float32x2_t *)(*(_QWORD *)(a1 + 152) + 12 * (int)v24);
      *v38 = vmaxnm_f32(vminnm_f32(vcvt_f32_f64(v28), _D8), 0);
      v39 = v29;
      v38[1].f32[0] = fmaxf(fminf(v39, 10000.0), 0.0);
      v25 = v21 + v11;
      v26 = *(int *)(v25 + 4);
      v66 = 0uLL;
      v67 = 0.0;
      if (v6[v26])
      {
LABEL_15:
        v27 = *(int *)(v25 + 8);
        v66 = 0uLL;
        v67 = 0.0;
        if (!v6[v27])
        {
LABEL_29:
          v6[v27] = 1;
          if (*(_DWORD *)v23 == 1)
          {
            v54 = (float *)(*(_QWORD *)(a1 + 144) + 12 * (int)v27);
            v55 = v54[1];
            v56 = *v54;
            v57 = v54[2];
            v58 = *(double *)(a1 + 80) * v55
                + *(double *)(a1 + 72) * v56
                + *(double *)(a1 + 96)
                + *(double *)(a1 + 88) * v57;
            v59 = *(double *)(a1 + 48) * v55
                + *(double *)(a1 + 40) * v56
                + *(double *)(a1 + 56) * v57
                + *(double *)(a1 + 64);
            v60 = *(double *)(a1 + 16) * v55
                + *(double *)(a1 + 8) * v56
                + *(double *)(a1 + 24) * v57
                + *(double *)(a1 + 32);
            if (!mc_projection_project((double *)(v23 + 136), (long double *)v66.f64, v60 * *(double *)(v23 + 8)+ *(double *)(v23 + 16) * v59+ *(double *)(v23 + 24) * v58+ *(double *)(v23 + 32), *(double *)(v23 + 40) * v60+ *(double *)(v23 + 48) * v59+ *(double *)(v23 + 56) * v58+ *(double *)(v23 + 64), *(double *)(v23 + 72) * v60+ *(double *)(v23 + 80) * v59+ *(double *)(v23 + 88) * v58+ *(double *)(v23 + 96)))goto LABEL_36;
            v61 = vmulq_f64(v66, v65);
            *(_QWORD *)&v52.f64[0] = *(_OWORD *)&vaddq_f64(v61, v65);
            v52.f64[1] = vsubq_f64(v65, v61).f64[1];
            v53 = v67;
          }
          else
          {
            v52 = 0uLL;
            v53 = 0.0;
            if (!*(_DWORD *)v23)
              v53 = 1.0;
          }
          v19 = (float32x2_t *)(*(_QWORD *)(a1 + 152) + 12 * (int)v27);
          *v19 = vmaxnm_f32(vminnm_f32(vcvt_f32_f64(v52), _D8), 0);
          v20 = v53;
          v19[1].f32[0] = fmaxf(fminf(v20, 10000.0), 0.0);
        }
LABEL_9:
        v9 = *(unsigned int *)(a1 + 160);
        goto LABEL_10;
      }
    }
    v6[v26] = 1;
    if (*(_DWORD *)v23 == 1)
    {
      v42 = (float *)(*(_QWORD *)(a1 + 144) + 12 * (int)v26);
      v43 = v42[1];
      v44 = *v42;
      v45 = v42[2];
      v46 = *(double *)(a1 + 80) * v43 + *(double *)(a1 + 72) * v44 + *(double *)(a1 + 96) + *(double *)(a1 + 88) * v45;
      v47 = *(double *)(a1 + 48) * v43 + *(double *)(a1 + 40) * v44 + *(double *)(a1 + 56) * v45 + *(double *)(a1 + 64);
      v48 = *(double *)(a1 + 16) * v43 + *(double *)(a1 + 8) * v44 + *(double *)(a1 + 24) * v45 + *(double *)(a1 + 32);
      if (!mc_projection_project((double *)(v23 + 136), (long double *)v66.f64, v48 * *(double *)(v23 + 8)+ *(double *)(v23 + 16) * v47+ *(double *)(v23 + 24) * v46+ *(double *)(v23 + 32), *(double *)(v23 + 40) * v48+ *(double *)(v23 + 48) * v47+ *(double *)(v23 + 56) * v46+ *(double *)(v23 + 64), *(double *)(v23 + 72) * v48+ *(double *)(v23 + 80) * v47+ *(double *)(v23 + 88) * v46+ *(double *)(v23 + 96)))goto LABEL_36;
      v49 = vmulq_f64(v66, v65);
      *(_QWORD *)&v40.f64[0] = *(_OWORD *)&vaddq_f64(v49, v65);
      v40.f64[1] = vsubq_f64(v65, v49).f64[1];
      v41 = v67;
    }
    else
    {
      v40 = 0uLL;
      v41 = 0.0;
      if (!*(_DWORD *)v23)
        v41 = 1.0;
    }
    v50 = (float32x2_t *)(*(_QWORD *)(a1 + 152) + 12 * (int)v26);
    *v50 = vmaxnm_f32(vminnm_f32(vcvt_f32_f64(v40), _D8), 0);
    v51 = v41;
    v50[1].f32[0] = fmaxf(fminf(v51, 10000.0), 0.0);
    v27 = *(int *)(v25 + 8);
    v66 = 0uLL;
    v67 = 0.0;
    if (!v6[v27])
      goto LABEL_29;
    goto LABEL_9;
  }
LABEL_37:
  free(v6);
  return v10;
}

void mc_la_data_decode(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  _DWORD v25[180];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  bzero(a1, 0x2F0uLL);
  if (!*(_DWORD *)a2)
    goto LABEL_4;
  v5 = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 32);
  v6 = v4 + 1;
  if (v4 + 1 > v5)
    goto LABEL_3;
  v8 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 8) + v4);
  *(_QWORD *)(a2 + 32) = v6;
  if (v8)
    goto LABEL_26;
  v9 = v4 + 9;
  if (v4 + 9 > v5)
  {
LABEL_3:
    *(_DWORD *)a2 = 0;
LABEL_4:
    *a1 = 0;
    goto LABEL_5;
  }
  v10 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + v6);
  *(_QWORD *)(a2 + 32) = v9;
  *a1 = v10;
  v11 = v4 + 17;
  if (v11 > *(_QWORD *)(a2 + 24))
  {
    *(_DWORD *)a2 = 0;
LABEL_5:
    a1[1] = 0;
    if (!*(_DWORD *)a2)
      goto LABEL_8;
    goto LABEL_6;
  }
  v24 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + v9);
  *(_QWORD *)(a2 + 32) = v11;
  a1[1] = v24;
  if (!*(_DWORD *)a2)
  {
LABEL_8:
    a1[2] = 0;
    if (!*(_DWORD *)a2)
      goto LABEL_9;
    goto LABEL_16;
  }
LABEL_6:
  v7 = *(_QWORD *)(a2 + 32);
  if ((unint64_t)(v7 + 8) > *(_QWORD *)(a2 + 24))
  {
    *(_DWORD *)a2 = 0;
    goto LABEL_8;
  }
  v12 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + v7);
  *(_QWORD *)(a2 + 32) = v7 + 8;
  a1[2] = v12;
  if (*(_DWORD *)a2)
  {
LABEL_16:
    v13 = *(_QWORD *)(a2 + 32);
    if ((unint64_t)(v13 + 8) > *(_QWORD *)(a2 + 24))
    {
      *(_DWORD *)a2 = 0;
      a1[3] = 0;
      if (!*(_DWORD *)a2)
        goto LABEL_26;
      goto LABEL_20;
    }
    v14 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + v13);
    *(_QWORD *)(a2 + 32) = v13 + 8;
    a1[3] = v14;
    if (*(_DWORD *)a2)
      goto LABEL_20;
LABEL_26:
    *(_DWORD *)a2 = 0;
    return;
  }
LABEL_9:
  a1[3] = 0;
  if (!*(_DWORD *)a2)
    goto LABEL_26;
LABEL_20:
  v16 = *(_QWORD *)(a2 + 24);
  v15 = *(_QWORD *)(a2 + 32);
  v17 = v15 + 4;
  if (v15 + 4 > v16)
    goto LABEL_26;
  v18 = *(_QWORD *)(a2 + 8);
  v19 = *(float *)(v18 + v15);
  *(_QWORD *)(a2 + 32) = v17;
  v20 = v15 + 6;
  if (v20 > v16)
    goto LABEL_26;
  v21 = *(unsigned __int16 *)(v18 + v17);
  *(_QWORD *)(a2 + 32) = v20;
  if (v21 != 180)
    goto LABEL_26;
  mc_read_tiny_big(a2, 180, v25);
  v22 = 0;
  v23 = v25[0];
  *((float *)a1 + 8) = v19 * (float)v25[0];
  do
  {
    v23 += v25[v22 + 1];
    v25[v22 + 1] = v23;
    *(float *)((char *)a1 + v22 * 4 + 36) = v19 * (float)v23;
    ++v22;
  }
  while (v22 != 179);
}

uint64_t mc_container_decode_la_data_chapter(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unsigned __int16 *v3;
  int v4;
  int v5;
  _QWORD *chapter_data;
  _QWORD *v9;
  uint64_t v10;
  void *v11;

  if (*(_QWORD *)(a1 + 16) <= a2)
    return 0;
  v3 = (unsigned __int16 *)(*(_QWORD *)(a1 + 8) + 40 * a2);
  v4 = *v3;
  v5 = v3[4];
  if (v4 != 5 || v5 != 0)
    return 0;
  chapter_data = mc_container_get_chapter_data(a1, a2, 0);
  if (!chapter_data)
    return 0;
  v9 = chapter_data;
  mc_la_data_decode(a3, (uint64_t)chapter_data);
  v10 = *(unsigned int *)v9;
  v11 = (void *)v9[2];
  if (v11)
    free(v11);
  free(v9);
  return v10;
}

uint64_t mc_mesh_face_walker_next(uint64_t a1)
{
  _DWORD *v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v17;
  unsigned int v18;
  _BYTE *i;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int *v22;
  _DWORD *v23;
  _DWORD *v24;

  v1 = *(_DWORD **)(a1 + 48);
  if (v1 == *(_DWORD **)(a1 + 40))
  {
    v17 = *(_DWORD *)(a1 + 16);
    v18 = *(_DWORD *)(a1 + 20);
    if (v18 >= v17)
      return 0;
    for (i = (_BYTE *)(*(_QWORD *)(a1 + 24) + (int)v18); *i; ++i)
    {
      *(_DWORD *)(a1 + 20) = ++v18;
      if (v17 <= v18)
        return 0;
    }
    *i = 1;
    v24 = *(_DWORD **)(a1 + 40);
    v23 = *(_DWORD **)(a1 + 48);
    *v23 = 3 * *(_DWORD *)(a1 + 20);
    v1 = v23 + 1;
    *(_QWORD *)(a1 + 48) = v1;
    if (v1 == v24)
      return 0;
  }
  v2 = (int)*(v1 - 1);
  *(_QWORD *)(a1 + 48) = v1 - 1;
  *(_DWORD *)(a1 + 8) = v2;
  v3 = (int)v2 / 3;
  *(_DWORD *)a1 = (int)v2 / 3;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_DWORD *)(v4 + 4 * v2);
  *(_DWORD *)(a1 + 12) = v5;
  if ((v5 & 0x80000000) == 0 && !*(_BYTE *)(*(_QWORD *)(a1 + 24) + v5 / 3uLL))
    *(_DWORD *)(a1 + 12) = -1;
  *(_DWORD *)(a1 + 4) = -1;
  v6 = 3 * v3;
  v7 = *(_DWORD *)(v4 + 4 * v6);
  if ((v7 & 0x80000000) != 0 || (v8 = *(_QWORD *)(a1 + 24), v9 = v7 / 3uLL, *(_BYTE *)(v8 + v9)))
  {
    v10 = *(_DWORD *)(v4 + 4 * (v6 + 1));
    if ((v10 & 0x80000000) != 0)
      goto LABEL_9;
  }
  else
  {
    *(_BYTE *)(v8 + v9) = 1;
    v20 = *(unsigned int **)(a1 + 48);
    *v20 = v7;
    *(_QWORD *)(a1 + 48) = v20 + 1;
    v4 = *(_QWORD *)(a1 + 32);
    v6 = 3 * *(_DWORD *)a1;
    v10 = *(_DWORD *)(v4 + 4 * (v6 + 1));
    if ((v10 & 0x80000000) != 0)
      goto LABEL_9;
  }
  v11 = *(_QWORD *)(a1 + 24);
  v12 = v10 / 3uLL;
  if (!*(_BYTE *)(v11 + v12))
  {
    *(_BYTE *)(v11 + v12) = 1;
    v21 = *(unsigned int **)(a1 + 48);
    *v21 = v10;
    *(_QWORD *)(a1 + 48) = v21 + 1;
    v13 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 4 * (3 * *(_DWORD *)a1 + 2));
    if ((v13 & 0x80000000) == 0)
      goto LABEL_10;
    return 1;
  }
LABEL_9:
  v13 = *(_DWORD *)(v4 + 4 * (v6 + 2));
  if ((v13 & 0x80000000) != 0)
    return 1;
LABEL_10:
  v14 = *(_QWORD *)(a1 + 24);
  v15 = v13 / 3uLL;
  if (!*(_BYTE *)(v14 + v15))
  {
    *(_BYTE *)(v14 + v15) = 1;
    v22 = *(unsigned int **)(a1 + 48);
    *v22 = v13;
    *(_QWORD *)(a1 + 48) = v22 + 1;
  }
  return 1;
}

void *mc_mesh_face_walker_create(unsigned int a1, int a2, char *a3)
{
  void *v6;
  void *v7;
  uint64_t v8;

  v6 = malloc_type_calloc(1uLL, 0x38uLL, 0x1010040D707D299uLL);
  *((_QWORD *)v6 + 4) = malloc_type_malloc(12 * a1, 0x100004052888210uLL);
  *((_QWORD *)v6 + 5) = malloc_type_malloc(12 * a1, 0x100004052888210uLL);
  v7 = malloc_type_malloc(a1, 0x100004077774924uLL);
  *((_QWORD *)v6 + 3) = v7;
  v8 = *((_QWORD *)v6 + 5);
  *((_DWORD *)v6 + 4) = a1;
  *((_QWORD *)v6 + 6) = v8;
  bzero(v7, a1);
  *((_DWORD *)v6 + 5) = 0;
  if (mc_create_corner_table(a1, a2, a3, *((void **)v6 + 4), 1))
    return v6;
  free(*((void **)v6 + 3));
  free(*((void **)v6 + 4));
  free(*((void **)v6 + 5));
  free(v6);
  return 0;
}

uint64_t mc_log_message(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char *__format, ...)
{
  uint64_t (*v8)(char *, uint64_t, uint64_t, uint64_t);
  char __str[1024];
  uint64_t v10;
  va_list va;

  va_start(va, __format);
  v10 = *MEMORY[0x1E0C80C00];
  if (!(_DWORD)result)
  {
    v8 = (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))error_log_callback;
    if (!error_log_callback)
      return result;
    goto LABEL_6;
  }
  if ((_DWORD)result == 1)
  {
    v8 = (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))debug_log_callback;
    if (debug_log_callback)
    {
LABEL_6:
      vsnprintf(__str, 0x400uLL, __format, va);
      return v8(__str, a2, a3, a4);
    }
  }
  return result;
}

void mc_mesh_cube_distance_unproject(uint64_t a1, float32x2_t *a2, double a3, double a4, double a5)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float *v21;
  float *v22;
  double v23;
  double v24;
  double v25;
  float v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  uint64_t v37;
  float32x2_t *v38;
  float *v39;
  float64x2_t v40;
  float64x2_t v41;
  float32x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  _OWORD v46[8];
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  float32x2x3_t v63;

  *(_QWORD *)&v48 = 0;
  v51 = 0uLL;
  v53 = 0uLL;
  v47 = 0x3FF0000000000000uLL;
  *((double *)&v48 + 1) = -a3;
  v49 = xmmword_19FFB33A0;
  *(_QWORD *)&v50 = 0;
  *((double *)&v50 + 1) = -a4;
  *(_QWORD *)&v52 = 0x3FF0000000000000;
  *((double *)&v52 + 1) = -a5;
  *(_QWORD *)&v54 = 0;
  *((_QWORD *)&v54 + 1) = 0x3FF0000000000000;
  v7 = *(_OWORD *)(a1 + 88);
  v46[4] = *(_OWORD *)(a1 + 72);
  v46[5] = v7;
  v8 = *(_OWORD *)(a1 + 120);
  v46[6] = *(_OWORD *)(a1 + 104);
  v46[7] = v8;
  v9 = *(_OWORD *)(a1 + 24);
  v46[0] = *(_OWORD *)(a1 + 8);
  v46[1] = v9;
  v10 = *(_OWORD *)(a1 + 56);
  v46[2] = *(_OWORD *)(a1 + 40);
  v46[3] = v10;
  mc_mat_4x4_mul_mm((double *)&v47, (double *)v46, (double *)&v55);
  v53 = v61;
  v54 = v62;
  v47 = v55;
  v48 = v56;
  v49 = v57;
  v50 = v58;
  v51 = v59;
  v52 = v60;
  mc_mat_4x4_invert((double *)&v47, (double *)&v55);
  v11 = *(unsigned int *)(a1 + 136);
  if ((_DWORD)v11)
  {
    v12 = v55;
    v13 = v56;
    v14 = v57;
    v15 = v58;
    v16 = v59;
    v17 = v60;
    v18 = *(_QWORD *)(a1 + 144);
    if ((_DWORD)v11 == 1
      || v18 < (unint64_t)a2 + 4 * v11 && v18 + 12 * v11 > (unint64_t)a2)
    {
      v19 = 0;
LABEL_6:
      v20 = v11 - v19;
      v21 = (float *)a2 + v19;
      v22 = (float *)(v18 + 12 * v19 + 8);
      do
      {
        v23 = *(v22 - 2);
        v24 = *(v22 - 1);
        v25 = *v22;
        v26 = *v21++;
        v27 = sqrt(v26 / (v23 * v23 + v24 * v24 + v25 * v25));
        v28 = v27 * v23;
        v29 = v27 * v24;
        v30 = v27 * v25;
        v31 = *((double *)&v13 + 1) + v28 * *(double *)&v12 + v29 * *((double *)&v12 + 1) + v30 * *(double *)&v13;
        v32 = *((double *)&v15 + 1) + v28 * *(double *)&v14 + v29 * *((double *)&v14 + 1) + v30 * *(double *)&v15;
        v33 = *((double *)&v17 + 1) + v28 * *(double *)&v16 + v29 * *((double *)&v16 + 1) + v30 * *(double *)&v17;
        *(float *)&v29 = v31;
        *(float *)&v30 = v32;
        *(v22 - 2) = *(float *)&v29;
        *(v22 - 1) = *(float *)&v30;
        *(float *)&v33 = v33;
        *v22 = *(float *)&v33;
        v22 += 3;
        --v20;
      }
      while (v20);
      return;
    }
    v34 = (float64x2_t)vdupq_lane_s64(*((uint64_t *)&v56 + 1), 0);
    v35 = (float64x2_t)vdupq_lane_s64(*((uint64_t *)&v58 + 1), 0);
    v19 = v11 & 0xFFFFFFFE;
    v36 = (float64x2_t)vdupq_lane_s64(*((uint64_t *)&v60 + 1), 0);
    v37 = v19;
    v38 = a2;
    v39 = *(float **)(a1 + 144);
    do
    {
      v63 = vld3_f32(v39);
      v40 = vcvtq_f64_f32(v63.val[0]);
      v41 = vcvtq_f64_f32(v63.val[1]);
      *(float64x2_t *)v63.val[0].f32 = vcvtq_f64_f32(v63.val[2]);
      v42 = *v38++;
      *(float64x2_t *)v63.val[1].f32 = vsqrtq_f64(vdivq_f64(vcvtq_f64_f32(v42), vmlaq_f64(vmlaq_f64(vmulq_f64(v40, v40), v41, v41), *(float64x2_t *)v63.val[0].f32, *(float64x2_t *)v63.val[0].f32)));
      *(float64x2_t *)v63.val[2].f32 = vmulq_f64(*(float64x2_t *)v63.val[1].f32, v40);
      v43 = vmulq_f64(*(float64x2_t *)v63.val[1].f32, v41);
      *(float64x2_t *)v63.val[0].f32 = vmulq_f64(*(float64x2_t *)v63.val[1].f32, *(float64x2_t *)v63.val[0].f32);
      v44 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v35, *(float64x2_t *)v63.val[2].f32, *(double *)&v14), v43, *((double *)&v14 + 1)), *(float64x2_t *)v63.val[0].f32, *(double *)&v15);
      v45 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v36, *(float64x2_t *)v63.val[2].f32, *(double *)&v16), v43, *((double *)&v16 + 1)), *(float64x2_t *)v63.val[0].f32, *(double *)&v17);
      v63.val[0] = vcvt_f32_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v34, *(float64x2_t *)v63.val[2].f32, *(double *)&v12), v43, *((double *)&v12 + 1)), *(float64x2_t *)v63.val[0].f32, *(double *)&v13));
      v63.val[1] = vcvt_f32_f64(v44);
      v63.val[2] = vcvt_f32_f64(v45);
      vst3_f32(v39, v63);
      v39 += 6;
      v37 -= 2;
    }
    while (v37);
    if (v19 != v11)
      goto LABEL_6;
  }
}

uint64_t mc_mesh_cam_unproject(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  float64x2_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t result;
  float v21;
  float *v22;
  float v23;
  float v24;
  _OWORD v25[8];
  float64x2_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _OWORD v34[2];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  v5 = *(_OWORD *)(a3 + 144);
  v41 = *(_OWORD *)(a3 + 128);
  v42 = v5;
  v6 = *(_OWORD *)(a3 + 80);
  v7 = *(_OWORD *)(a3 + 48);
  v37 = *(_OWORD *)(a3 + 64);
  v38 = v6;
  v8 = *(_OWORD *)(a3 + 112);
  v9 = *(_OWORD *)(a3 + 80);
  v39 = *(_OWORD *)(a3 + 96);
  v40 = v8;
  v10 = *(_OWORD *)(a3 + 16);
  v34[0] = *(_OWORD *)a3;
  v34[1] = v10;
  v11 = *(_OWORD *)(a3 + 48);
  v13 = *(float64x2_t *)a3;
  v12 = *(_OWORD *)(a3 + 16);
  v35 = *(_OWORD *)(a3 + 32);
  v36 = v11;
  v30 = v37;
  v31 = v9;
  v32 = v39;
  v33 = v8;
  v26 = v13;
  v27 = v12;
  v43 = *(_QWORD *)(a3 + 160);
  v28 = v35;
  v29 = v7;
  v14 = *(_OWORD *)(a1 + 88);
  v25[4] = *(_OWORD *)(a1 + 72);
  v25[5] = v14;
  v15 = *(_OWORD *)(a1 + 120);
  v25[6] = *(_OWORD *)(a1 + 104);
  v25[7] = v15;
  v16 = *(_OWORD *)(a1 + 24);
  v25[0] = *(_OWORD *)(a1 + 8);
  v25[1] = v16;
  v17 = *(_OWORD *)(a1 + 56);
  v25[2] = *(_OWORD *)(a1 + 40);
  v25[3] = v17;
  mc_mat_4x4_mul_mm(v26.f64, (double *)v25, (double *)v34);
  if (a2)
  {
    if (!*(_DWORD *)(a1 + 136))
      return 1;
  }
  else
  {
    a2 = *(_QWORD *)(a1 + 144);
    if (!*(_DWORD *)(a1 + 136))
      return 1;
  }
  v18 = 0;
  v19 = 0;
  while (1)
  {
    v26 = 0uLL;
    *(_QWORD *)&v27 = 0;
    result = mc_camera_unproject((uint64_t)v34, &v26, *(float *)(*(_QWORD *)(a1 + 144) + v18), *(float *)(*(_QWORD *)(a1 + 144) + v18 + 4), *(float *)(*(_QWORD *)(a1 + 144) + v18 + 8));
    if (!(_DWORD)result)
      break;
    v21 = v26.f64[0];
    v22 = (float *)(a2 + v18);
    *v22 = v21;
    v23 = v26.f64[1];
    v22[1] = v23;
    v24 = *(double *)&v27;
    v22[2] = v24;
    ++v19;
    v18 += 12;
    if (v19 >= *(unsigned int *)(a1 + 136))
      return 1;
  }
  return result;
}

uint64_t mc_material_attach_alpha_data(uint64_t a1, const void *a2, size_t a3, int a4)
{
  uint64_t result;
  int v9;
  uint64_t v12;
  void *v13;
  uint64_t v14;

  if (HIDWORD(a3))
    return 0;
  result = *(_QWORD *)(a1 + 16);
  if (result
    || (result = (uint64_t)malloc_type_calloc(1uLL, 0x20uLL, 0x10800403AF1B36BuLL), (*(_QWORD *)(a1 + 16) = result) != 0))
  {
    v9 = *(_DWORD *)(a1 + 8);
    if (v9 != 2 && a4 != 0 && v9 != 4)
      return 0;
    free(*(void **)(result + 24));
    v12 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(v12 + 24) = 0;
    *(_DWORD *)(v12 + 20) = 0;
    if (a4)
    {
      result = (uint64_t)malloc_type_malloc(a3, 0x505EE921uLL);
      if (!result)
      {
        *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24) = 0;
        return result;
      }
      v13 = (void *)result;
      memcpy((void *)result, a2, a3);
      v14 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(v14 + 24) = v13;
      *(_DWORD *)(v14 + 16) = a4;
      *(_DWORD *)(v14 + 20) = a3;
      memcpy(v13, a2, a3);
    }
    return 1;
  }
  return result;
}

void mc_scene_free(void **a1)
{
  void **v2;
  char *v3;
  void **v4;
  void *v5;
  void **v6;
  char *v7;
  void **v8;
  void *v9;
  _QWORD **v10;
  char *v11;
  _QWORD **v12;
  _QWORD *v13;
  void *v14;
  void *v15;

  if (a1)
  {
    v2 = (void **)*a1;
    if (*a1)
    {
      v3 = (char *)a1[1];
      if (v3)
      {
        v4 = v2 + 23;
        do
        {
          free(*(v4 - 5));
          free(*(v4 - 4));
          free(*(v4 - 2));
          v5 = *v4;
          v4 += 24;
          free(v5);
          --v3;
        }
        while (v3);
      }
      free(v2);
    }
    v6 = (void **)a1[2];
    if (v6)
    {
      v7 = (char *)a1[3];
      if (v7)
      {
        v8 = v6 + 23;
        do
        {
          free(*(v8 - 5));
          free(*(v8 - 4));
          free(*(v8 - 2));
          v9 = *v8;
          v8 += 24;
          free(v9);
          --v7;
        }
        while (v7);
      }
      free(v6);
    }
    v10 = (_QWORD **)a1[4];
    if (v10)
    {
      v11 = (char *)a1[5];
      if (v11)
      {
        v12 = v10 + 2;
        do
        {
          v13 = *v12;
          if (*v12)
          {
            v14 = (void *)v13[1];
            if (v14)
              free(v14);
            v15 = (void *)v13[3];
            if (v15)
              free(v15);
            free(v13);
          }
          v12 += 3;
          --v11;
        }
        while (v11);
      }
      free(v10);
    }
  }
  free(a1);
}

uint64_t mc_create_corner_table(int a1, int a2, char *a3, void *a4, int a5)
{
  void **v10;
  uint64_t v11;
  size_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  int *v22;
  int v23;
  _DWORD *v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  int v34;
  _DWORD *v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  int v47;
  _DWORD *v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  uint64_t v57;

  v10 = (void **)malloc_type_calloc(1uLL, 0x18uLL, 0x100402FEFCB83uLL);
  v11 = a2;
  v12 = 4 * a2;
  v13 = (3 * a1);
  v14 = (char *)malloc_type_malloc(4 * (v11 + v13), 0x6967BA73uLL);
  *v10 = v14;
  v10[1] = &v14[v12];
  v10[2] = a3;
  memset(v14, 255, v12);
  if (a1)
  {
    if (v13 <= 1)
      v15 = 1;
    else
      v15 = (3 * a1);
    memset(a4, 255, 4 * v15);
    v16 = 0;
    v17 = *v10;
    v18 = v10[1];
    while (1)
    {
      v19 = 3 * v16;
      v20 = &a3[12 * v16];
      v21 = *(int *)v20;
      v22 = &v17[*((int *)v20 + 1)];
      v23 = *v22;
      if (*v22 == -1)
        goto LABEL_25;
      v24 = v10[2];
      v25 = v23 % 3;
      v26 = v23 % 3 == 2 ? -2 : 1;
      if (v24[v26 + v23] != (_DWORD)v21)
        break;
LABEL_18:
      *v22 = v18[v23];
      if (v25)
        v29 = -1;
      else
        v29 = 2;
      v30 = v29 + v23;
      if (!a5 && *((_DWORD *)a4 + v30) != -1)
      {
LABEL_69:
        v57 = 0;
        goto LABEL_70;
      }
      *((_DWORD *)a4 + (int)v19 + 2) = v30;
      *((_DWORD *)a4 + v30) = v19 + 2;
      v31 = *((int *)v20 + 1);
      v32 = v19 + 1;
      v33 = &v17[*((int *)v20 + 2)];
      v34 = *v33;
      if (*v33 == -1)
        goto LABEL_45;
LABEL_26:
      v35 = v10[2];
      v36 = v34 % 3;
      if (v34 % 3 == 2)
        v37 = -2;
      else
        v37 = 1;
      if (v35[v37 + v34] == (_DWORD)v31)
      {
LABEL_36:
        *v33 = v18[v34];
        if ((-1431655765 * v32) >= 0x55555556)
          v40 = -1;
        else
          v40 = 2;
        if (v36)
          v41 = -1;
        else
          v41 = 2;
        v42 = v41 + v34;
        if (!a5 && *((_DWORD *)a4 + v42) != -1)
          goto LABEL_69;
        v43 = v40 + v32;
        *((_DWORD *)a4 + v43) = v42;
        *((_DWORD *)a4 + v42) = v43;
        goto LABEL_46;
      }
      while (1)
      {
        v38 = v34;
        v34 = v18[v34];
        if (v34 == -1)
          break;
        v36 = v34 % 3;
        if (v34 % 3 == 2)
          v39 = -2;
        else
          v39 = 1;
        if (v35[v39 + v34] == (_DWORD)v31)
        {
          v33 = &v18[v38];
          goto LABEL_36;
        }
      }
LABEL_45:
      v18[v32] = v17[v31];
      v17[v31] = v32;
LABEL_46:
      v44 = *((int *)v20 + 2);
      v45 = v19 + 2;
      v46 = &v17[*(int *)v20];
      v47 = *v46;
      if (*v46 == -1)
      {
LABEL_6:
        v18[v45] = v17[v44];
        v17[v44] = v45;
        if (++v16 == a1)
          goto LABEL_68;
      }
      else
      {
        v48 = v10[2];
        v49 = v47 % 3;
        if (v47 % 3 == 2)
          v50 = -2;
        else
          v50 = 1;
        if (v48[v50 + v47] != (_DWORD)v44)
        {
          while (1)
          {
            v51 = v47;
            v47 = v18[v47];
            if (v47 == -1)
              goto LABEL_6;
            v49 = v47 % 3;
            if (v47 % 3 == 2)
              v52 = -2;
            else
              v52 = 1;
            if (v48[v52 + v47] == (_DWORD)v44)
            {
              v46 = &v18[v51];
              break;
            }
          }
        }
        *v46 = v18[v47];
        if ((-1431655765 * v45) >= 0x55555556)
          v53 = -1;
        else
          v53 = 2;
        if (v49)
          v54 = -1;
        else
          v54 = 2;
        v55 = v54 + v47;
        if (!a5 && *((_DWORD *)a4 + v55) != -1)
          goto LABEL_69;
        v56 = v53 + v45;
        *((_DWORD *)a4 + v56) = v55;
        *((_DWORD *)a4 + v55) = v56;
        if (++v16 == a1)
          goto LABEL_68;
      }
    }
    while (1)
    {
      v27 = v23;
      v23 = v18[v23];
      if (v23 == -1)
        break;
      v25 = v23 % 3;
      if (v23 % 3 == 2)
        v28 = -2;
      else
        v28 = 1;
      if (v24[v28 + v23] == (_DWORD)v21)
      {
        v22 = &v18[v27];
        goto LABEL_18;
      }
    }
LABEL_25:
    v18[3 * v16] = v17[v21];
    v17[v21] = v19;
    v31 = *((int *)v20 + 1);
    v32 = v19 + 1;
    v33 = &v17[*((int *)v20 + 2)];
    v34 = *v33;
    if (*v33 == -1)
      goto LABEL_45;
    goto LABEL_26;
  }
  v17 = *v10;
LABEL_68:
  v57 = 1;
LABEL_70:
  free(v17);
  free(v10);
  return v57;
}

uint64_t mc_encode_decode_predictive(unsigned int a1, int a2, char *a3, char *a4, unsigned int a5, char *a6, int a7)
{
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  char *v14;
  unsigned __int8 *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  int32x4_t *v54;
  int32x4_t *v55;
  int32x4_t *v56;
  uint64_t v57;
  int32x4_t *v58;
  int32x4_t v59;
  int32x4_t v60;
  uint64_t v61;
  uint64_t v62;
  _DWORD *v63;
  char *v64;
  char *v65;
  char *v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  int v80;
  int v81;
  int v82;
  int32x4_t *v83;
  int32x4_t *v84;
  int32x4_t *v85;
  uint64_t v86;
  int32x4_t *v87;
  int32x4_t v88;
  int32x4_t v89;
  uint64_t v90;
  uint64_t v91;
  _DWORD *v92;
  char *v93;
  char *v94;
  char *v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int *v105;
  uint64_t v106;
  char *v107;
  char *v108;
  int v109;
  int v110;
  int v111;
  int32x4_t *v112;
  int32x4_t *v113;
  int32x4_t *v114;
  uint64_t v115;
  int32x4_t *v116;
  int32x4_t v117;
  int32x4_t v118;
  uint64_t v119;
  uint64_t v120;
  _DWORD *v121;
  char *v122;
  char *v123;
  char *v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int *v134;
  uint64_t v135;
  char *v136;
  char *v137;
  int v138;
  int v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  int *v144;
  uint64_t v145;
  char *v146;
  char *v147;
  int v148;
  int v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  int *v154;
  uint64_t v155;
  char *v156;
  char *v157;
  int v158;
  int v159;
  int v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  int *v164;
  uint64_t v165;
  char *v166;
  char *v167;
  int v168;
  int v169;
  int v170;
  uint64_t v171;
  int32x4_t *v172;
  int32x4_t *v173;
  int32x4_t *v174;
  int32x4_t v175;
  uint64_t v176;
  int32x4_t *v177;
  int32x4_t *v178;
  int32x4_t *v179;
  int32x4_t v180;
  uint64_t v181;
  int32x4_t *v182;
  int32x4_t *v183;
  int32x4_t *v184;
  int32x4_t v185;
  int32x4_t *v186;
  uint64_t v187;
  int32x4_t *v188;
  int32x4_t *v189;
  int32x4_t v190;
  int32x4_t *v191;
  uint64_t v192;
  int32x4_t *v193;
  int32x4_t *v194;
  int32x4_t v195;
  int32x4_t *v196;
  uint64_t v197;
  int32x4_t *v198;
  int32x4_t *v199;
  int32x4_t v200;
  uint64_t v201;
  unsigned __int8 *v202;
  uint64_t v204;
  unsigned __int8 *v205;
  void *v207;
  char *v208;
  char *v209;
  uint64_t v210;
  uint64_t __n;
  _BYTE v213[16];
  _QWORD v214[50];

  v214[48] = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    LODWORD(v11) = a2;
    result = (uint64_t)mc_mesh_face_walker_create(a1, a2, a3);
    if (!result)
      return result;
    v13 = result;
    if (a4 == a6)
    {
      v14 = (char *)malloc_type_malloc(4 * a5 * v11, 0x100004052888210uLL);
      memcpy(v14, a4, 4 * a5 * v11);
      if (a7)
        a6 = v14;
      else
        a6 = a4;
      v207 = v14;
      if (!a7)
        a4 = v14;
    }
    else
    {
      v207 = 0;
    }
    v11 = v11;
    v15 = (unsigned __int8 *)malloc_type_calloc(v11, 1uLL, 0x100004077774924uLL);
    __n = 4 * (int)a5;
    if (mc_mesh_face_walker_next(v13))
    {
      v209 = a4 + 16;
      v210 = a5 & 0xFFFFFFF8;
      v208 = a6 + 16;
      while (1)
      {
        v18 = *(int *)(v13 + 8);
        v19 = *(int *)&a3[4 * v18];
        if (v15[v19])
          goto LABEL_16;
        v15[v19] = 1;
        v31 = *(int *)(v13 + 12);
        if ((_DWORD)v31 == -1)
        {
          v48 = 4 * (int)(v19 * a5);
          if (a7)
          {
            v49 = &a4[v48];
            v50 = &a6[v48];
          }
          else
          {
            v49 = &a6[v48];
            v50 = &a4[v48];
          }
          memcpy(v49, v50, __n);
          goto LABEL_16;
        }
        if ((int)a5 < 1)
          goto LABEL_16;
        v32 = 3 * ((int)v31 / 3);
        v33 = *(_DWORD *)&a3[4 * v32 + 4 * (((int)v31 + 1) % 3)];
        v34 = *(_DWORD *)&a3[4 * v32 + 4 * (((int)v31 + 2) % 3)];
        v35 = (int)(*(_DWORD *)&a3[4 * v31] * a5);
        v36 = (int)(v33 * a5);
        v37 = (int)(v34 * a5);
        if (a5 < 8)
          break;
        v83 = (int32x4_t *)v214;
        v84 = (int32x4_t *)&v209[4 * v36];
        v85 = (int32x4_t *)&v209[4 * v37];
        v86 = a5 & 0xFFFFFFF8;
        v87 = (int32x4_t *)&v209[4 * v35];
        do
        {
          v88 = vsubq_s32(vaddq_s32(v85[-1], v84[-1]), v87[-1]);
          v89 = vsubq_s32(vaddq_s32(*v85, *v84), *v87);
          v84 += 2;
          v83[-1] = v88;
          *v83 = v89;
          v83 += 2;
          v85 += 2;
          v87 += 2;
          v86 -= 8;
        }
        while (v86);
        v38 = a5 & 0xFFFFFFF8;
        if (v210 != a5)
          goto LABEL_51;
LABEL_53:
        v101 = (int)(v19 * a5);
        if (a7)
        {
          if (a5 >= 8 && (v102 = 4 * v101, (unint64_t)(&a4[4 * v101] - &a6[4 * v101]) >= 0x20))
          {
            v176 = a5 & 0xFFFFFFF8;
            v177 = (int32x4_t *)&v209[v102];
            v178 = (int32x4_t *)&v208[v102];
            v179 = (int32x4_t *)v214;
            do
            {
              v180 = vaddq_s32(*v179, *v178);
              v177[-1] = vaddq_s32(v179[-1], v178[-1]);
              *v177 = v180;
              v177 += 2;
              v179 += 2;
              v178 += 2;
              v176 -= 8;
            }
            while (v176);
            v103 = a5 & 0xFFFFFFF8;
            if (v210 == a5)
              goto LABEL_16;
          }
          else
          {
            v103 = 0;
          }
          v104 = a5 - v103;
          v105 = (int *)&v213[4 * v103];
          v106 = 4 * (v103 + v101);
          v107 = &a4[v106];
          v108 = &a6[v106];
          do
          {
            v110 = *(_DWORD *)v108;
            v108 += 4;
            v109 = v110;
            v111 = *v105++;
            *(_DWORD *)v107 = v111 + v109;
            v107 += 4;
            --v104;
          }
          while (v104);
        }
        else
        {
          if (a5 >= 8 && (v151 = 4 * v101, (unint64_t)(&a6[4 * v101] - &a4[4 * v101]) >= 0x20))
          {
            v191 = (int32x4_t *)&v208[v151];
            v192 = a5 & 0xFFFFFFF8;
            v193 = (int32x4_t *)&v209[v151];
            v194 = (int32x4_t *)v214;
            do
            {
              v195 = vsubq_s32(*v193, *v194);
              v191[-1] = vsubq_s32(v193[-1], v194[-1]);
              *v191 = v195;
              v191 += 2;
              v194 += 2;
              v193 += 2;
              v192 -= 8;
            }
            while (v192);
            v152 = a5 & 0xFFFFFFF8;
            if (v210 == a5)
              goto LABEL_16;
          }
          else
          {
            v152 = 0;
          }
          v153 = a5 - v152;
          v154 = (int *)&v213[4 * v152];
          v155 = 4 * (v152 + v101);
          v156 = &a6[v155];
          v157 = &a4[v155];
          do
          {
            v159 = *(_DWORD *)v157;
            v157 += 4;
            v158 = v159;
            v160 = *v154++;
            *(_DWORD *)v156 = v158 - v160;
            v156 += 4;
            --v153;
          }
          while (v153);
        }
LABEL_16:
        v20 = 3 * ((int)v18 / 3) + ((int)v18 + 1) % 3;
        v21 = *(int *)&a3[4 * v20];
        if (v15[v21])
          goto LABEL_17;
        v15[v21] = 1;
        v39 = *(int *)(v13 + 12);
        if ((_DWORD)v39 == -1)
        {
          v51 = 4 * (int)(v21 * a5);
          if (a7)
          {
            v52 = &a4[v51];
            v53 = &a6[v51];
          }
          else
          {
            v52 = &a6[v51];
            v53 = &a4[v51];
          }
          memcpy(v52, v53, __n);
          goto LABEL_17;
        }
        if ((int)a5 < 1)
          goto LABEL_17;
        v40 = 3 * ((int)v39 / 3);
        v41 = *(_DWORD *)&a3[4 * v40 + 4 * (((int)v39 + 1) % 3)];
        v42 = *(_DWORD *)&a3[4 * v40 + 4 * (((int)v39 + 2) % 3)];
        v43 = (int)(*(_DWORD *)&a3[4 * v39] * a5);
        v44 = (int)(v41 * a5);
        v45 = (int)(v42 * a5);
        if (a5 < 8)
        {
          v46 = 0;
LABEL_63:
          v119 = 4 * v46;
          v120 = a5 - v46;
          v121 = &v213[v119];
          v122 = &a4[4 * v43 + v119];
          v123 = &a4[4 * v45 + v119];
          v124 = &a4[4 * v44 + v119];
          do
          {
            v126 = *(_DWORD *)v124;
            v124 += 4;
            v125 = v126;
            v127 = *(_DWORD *)v123;
            v123 += 4;
            v128 = v127 + v125;
            v129 = *(_DWORD *)v122;
            v122 += 4;
            *v121++ = v128 - v129;
            --v120;
          }
          while (v120);
          goto LABEL_65;
        }
        v112 = (int32x4_t *)v214;
        v113 = (int32x4_t *)&v209[4 * v44];
        v114 = (int32x4_t *)&v209[4 * v45];
        v115 = a5 & 0xFFFFFFF8;
        v116 = (int32x4_t *)&v209[4 * v43];
        do
        {
          v117 = vsubq_s32(vaddq_s32(v114[-1], v113[-1]), v116[-1]);
          v118 = vsubq_s32(vaddq_s32(*v114, *v113), *v116);
          v113 += 2;
          v112[-1] = v117;
          *v112 = v118;
          v112 += 2;
          v114 += 2;
          v116 += 2;
          v115 -= 8;
        }
        while (v115);
        v46 = a5 & 0xFFFFFFF8;
        if (v210 != a5)
          goto LABEL_63;
LABEL_65:
        v130 = (int)v21 * (uint64_t)(int)a5;
        if (a7)
        {
          if (a5 >= 8 && (v131 = 4 * v130, (unint64_t)(&a4[4 * v130] - &a6[4 * v130]) >= 0x20))
          {
            v181 = a5 & 0xFFFFFFF8;
            v182 = (int32x4_t *)&v209[v131];
            v183 = (int32x4_t *)&v208[v131];
            v184 = (int32x4_t *)v214;
            do
            {
              v185 = vaddq_s32(*v184, *v183);
              v182[-1] = vaddq_s32(v184[-1], v183[-1]);
              *v182 = v185;
              v182 += 2;
              v184 += 2;
              v183 += 2;
              v181 -= 8;
            }
            while (v181);
            v132 = a5 & 0xFFFFFFF8;
            if (v210 == a5)
              goto LABEL_17;
          }
          else
          {
            v132 = 0;
          }
          v133 = a5 - v132;
          v134 = (int *)&v213[4 * v132];
          v135 = 4 * (v132 + v130);
          v136 = &a4[v135];
          v137 = &a6[v135];
          do
          {
            v139 = *(_DWORD *)v137;
            v137 += 4;
            v138 = v139;
            v140 = *v134++;
            *(_DWORD *)v136 = v140 + v138;
            v136 += 4;
            --v133;
          }
          while (v133);
        }
        else
        {
          if (a5 >= 8 && (v161 = 4 * v130, (unint64_t)(&a6[4 * v130] - &a4[4 * v130]) >= 0x20))
          {
            v196 = (int32x4_t *)&v208[v161];
            v197 = a5 & 0xFFFFFFF8;
            v198 = (int32x4_t *)&v209[v161];
            v199 = (int32x4_t *)v214;
            do
            {
              v200 = vsubq_s32(*v198, *v199);
              v196[-1] = vsubq_s32(v198[-1], v199[-1]);
              *v196 = v200;
              v196 += 2;
              v199 += 2;
              v198 += 2;
              v197 -= 8;
            }
            while (v197);
            v162 = a5 & 0xFFFFFFF8;
            if (v210 == a5)
              goto LABEL_17;
          }
          else
          {
            v162 = 0;
          }
          v163 = a5 - v162;
          v164 = (int *)&v213[4 * v162];
          v165 = 4 * (v162 + v130);
          v166 = &a6[v165];
          v167 = &a4[v165];
          do
          {
            v169 = *(_DWORD *)v167;
            v167 += 4;
            v168 = v169;
            v170 = *v164++;
            *(_DWORD *)v166 = v168 - v170;
            v166 += 4;
            --v163;
          }
          while (v163);
        }
LABEL_17:
        v22 = *(int *)&a3[12 * (v20 / 3) + 4 * ((v20 + 1) % 3)];
        if (v15[v22])
          goto LABEL_14;
        v15[v22] = 1;
        v23 = *(int *)(v13 + 12);
        if ((_DWORD)v23 == -1)
        {
          v47 = 4 * (int)(v22 * a5);
          if (a7)
          {
            v16 = &a4[v47];
            v17 = &a6[v47];
          }
          else
          {
            v16 = &a6[v47];
            v17 = &a4[v47];
          }
          memcpy(v16, v17, __n);
          goto LABEL_14;
        }
        if ((int)a5 < 1)
          goto LABEL_14;
        v24 = 3 * ((int)v23 / 3);
        v25 = *(_DWORD *)&a3[4 * v24 + 4 * (((int)v23 + 1) % 3)];
        v26 = *(_DWORD *)&a3[4 * v24 + 4 * (((int)v23 + 2) % 3)];
        v27 = (int)(*(_DWORD *)&a3[4 * v23] * a5);
        v28 = (int)(v25 * a5);
        v29 = (int)(v26 * a5);
        if (a5 < 8)
        {
          v30 = 0;
LABEL_39:
          v61 = 4 * v30;
          v62 = a5 - v30;
          v63 = &v213[v61];
          v64 = &a4[4 * v27 + v61];
          v65 = &a4[4 * v29 + v61];
          v66 = &a4[4 * v28 + v61];
          do
          {
            v68 = *(_DWORD *)v66;
            v66 += 4;
            v67 = v68;
            v69 = *(_DWORD *)v65;
            v65 += 4;
            v70 = v69 + v67;
            v71 = *(_DWORD *)v64;
            v64 += 4;
            *v63++ = v70 - v71;
            --v62;
          }
          while (v62);
          goto LABEL_41;
        }
        v54 = (int32x4_t *)v214;
        v55 = (int32x4_t *)&v209[4 * v28];
        v56 = (int32x4_t *)&v209[4 * v29];
        v57 = a5 & 0xFFFFFFF8;
        v58 = (int32x4_t *)&v209[4 * v27];
        do
        {
          v59 = vsubq_s32(vaddq_s32(v56[-1], v55[-1]), v58[-1]);
          v60 = vsubq_s32(vaddq_s32(*v56, *v55), *v58);
          v55 += 2;
          v54[-1] = v59;
          *v54 = v60;
          v54 += 2;
          v56 += 2;
          v58 += 2;
          v57 -= 8;
        }
        while (v57);
        v30 = a5 & 0xFFFFFFF8;
        if (v210 != a5)
          goto LABEL_39;
LABEL_41:
        v72 = (int)v22 * (uint64_t)(int)a5;
        if (a7)
        {
          if (a5 >= 8 && (v73 = 4 * v72, (unint64_t)(&a4[4 * v72] - &a6[4 * v72]) >= 0x20))
          {
            v171 = a5 & 0xFFFFFFF8;
            v172 = (int32x4_t *)&v209[v73];
            v173 = (int32x4_t *)&v208[v73];
            v174 = (int32x4_t *)v214;
            do
            {
              v175 = vaddq_s32(*v174, *v173);
              v172[-1] = vaddq_s32(v174[-1], v173[-1]);
              *v172 = v175;
              v172 += 2;
              v174 += 2;
              v173 += 2;
              v171 -= 8;
            }
            while (v171);
            v74 = a5 & 0xFFFFFFF8;
            if (v210 == a5)
              goto LABEL_14;
          }
          else
          {
            v74 = 0;
          }
          v75 = a5 - v74;
          v76 = (int *)&v213[4 * v74];
          v77 = 4 * (v74 + v72);
          v78 = &a4[v77];
          v79 = &a6[v77];
          do
          {
            v81 = *(_DWORD *)v79;
            v79 += 4;
            v80 = v81;
            v82 = *v76++;
            *(_DWORD *)v78 = v82 + v80;
            v78 += 4;
            --v75;
          }
          while (v75);
        }
        else
        {
          if (a5 >= 8 && (v141 = 4 * v72, (unint64_t)(&a6[4 * v72] - &a4[4 * v72]) >= 0x20))
          {
            v186 = (int32x4_t *)&v208[v141];
            v187 = a5 & 0xFFFFFFF8;
            v188 = (int32x4_t *)&v209[v141];
            v189 = (int32x4_t *)v214;
            do
            {
              v190 = vsubq_s32(*v188, *v189);
              v186[-1] = vsubq_s32(v188[-1], v189[-1]);
              *v186 = v190;
              v186 += 2;
              v189 += 2;
              v188 += 2;
              v187 -= 8;
            }
            while (v187);
            v142 = a5 & 0xFFFFFFF8;
            if (v210 == a5)
              goto LABEL_14;
          }
          else
          {
            v142 = 0;
          }
          v143 = a5 - v142;
          v144 = (int *)&v213[4 * v142];
          v145 = 4 * (v142 + v72);
          v146 = &a6[v145];
          v147 = &a4[v145];
          do
          {
            v149 = *(_DWORD *)v147;
            v147 += 4;
            v148 = v149;
            v150 = *v144++;
            *(_DWORD *)v146 = v148 - v150;
            v146 += 4;
            --v143;
          }
          while (v143);
        }
LABEL_14:
        if (!mc_mesh_face_walker_next(v13))
          goto LABEL_118;
      }
      v38 = 0;
LABEL_51:
      v90 = 4 * v38;
      v91 = a5 - v38;
      v92 = &v213[v90];
      v93 = &a4[4 * v35 + v90];
      v94 = &a4[4 * v37 + v90];
      v95 = &a4[4 * v36 + v90];
      do
      {
        v97 = *(_DWORD *)v95;
        v95 += 4;
        v96 = v97;
        v98 = *(_DWORD *)v94;
        v94 += 4;
        v99 = v98 + v96;
        v100 = *(_DWORD *)v93;
        v93 += 4;
        *v92++ = v99 - v100;
        --v91;
      }
      while (v91);
      goto LABEL_53;
    }
LABEL_118:
    if ((_DWORD)v11)
    {
      if (a7)
      {
        v201 = 0;
        v202 = v15;
        do
        {
          if (!*v202++)
            memcpy(&a4[v201], &a6[v201], __n);
          v201 += 4 * (int)a5;
          --v11;
        }
        while (v11);
      }
      else
      {
        v204 = 0;
        v205 = v15;
        do
        {
          if (!*v205++)
            memcpy(&a6[v204], &a4[v204], __n);
          v204 += 4 * (int)a5;
          --v11;
        }
        while (v11);
      }
    }
    free(*(void **)(v13 + 24));
    free(*(void **)(v13 + 32));
    free(*(void **)(v13 + 40));
    free((void *)v13);
    free(v15);
    free(v207);
  }
  return 1;
}

double mc_mat_4x4_mul_mm@<D0>(double *a1@<X0>, double *a2@<X1>, double *a3@<X8>)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double result;

  v4 = *a2;
  v3 = a2[1];
  v6 = a2[4];
  v5 = a2[5];
  v8 = a2[8];
  v7 = a2[9];
  v10 = a2[12];
  v9 = a2[13];
  v12 = a2[2];
  v11 = a2[3];
  v14 = a2[6];
  v13 = a2[7];
  v16 = a2[10];
  v15 = a2[11];
  v18 = a2[14];
  v17 = a2[15];
  v19 = *a1;
  v20 = a1[1];
  v21 = a1[2];
  v22 = a1[3];
  v23 = *a1 * v3 + v20 * v5 + v21 * v7 + v22 * v9;
  *a3 = *a1 * *a2 + v20 * v6 + v21 * v8 + v22 * v10;
  a3[1] = v23;
  a3[2] = v19 * v12 + v20 * v14 + v21 * v16 + v22 * v18;
  a3[3] = v19 * v11 + v20 * v13 + v21 * v15 + v22 * v17;
  v24 = a1[4];
  v25 = a1[5];
  v26 = a1[6];
  v27 = a1[7];
  a3[4] = v24 * v4 + v25 * v6 + v26 * v8 + v27 * v10;
  a3[5] = v24 * v3 + v25 * v5 + v26 * v7 + v27 * v9;
  a3[6] = v24 * v12 + v25 * v14 + v26 * v16 + v27 * v18;
  a3[7] = v24 * v11 + v25 * v13 + v26 * v15 + v27 * v17;
  v28 = a1[8];
  v29 = a1[9];
  v30 = a1[10];
  v31 = a1[11];
  a3[8] = v28 * v4 + v29 * v6 + v30 * v8 + v31 * v10;
  a3[9] = v28 * v3 + v29 * v5 + v30 * v7 + v31 * v9;
  a3[10] = v28 * v12 + v29 * v14 + v30 * v16 + v31 * v18;
  a3[11] = v28 * v11 + v29 * v13 + v30 * v15 + v31 * v17;
  v32 = a1[12];
  v33 = a1[13];
  v34 = v32 * v4 + v33 * v6;
  v35 = a1[14];
  v36 = a1[15];
  a3[12] = v34 + v35 * v8 + v36 * v10;
  a3[13] = v32 * v3 + v33 * v5 + v35 * v7 + v36 * v9;
  result = v32 * v11 + v33 * v13 + v35 * v15 + v36 * v17;
  a3[14] = v32 * v12 + v33 * v14 + v35 * v16 + v36 * v18;
  a3[15] = result;
  return result;
}

double mc_mat_4x4_invert@<D0>(double *a1@<X0>, double *a2@<X8>)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double result;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;

  v2 = a1[10];
  v3 = a1[11];
  v5 = a1[4];
  v4 = a1[5];
  v7 = a1[14];
  v6 = a1[15];
  v9 = a1[8];
  v8 = a1[9];
  v11 = a1[6];
  v10 = a1[7];
  v13 = a1[12];
  v12 = a1[13];
  v69 = v7 * v3 * v4 + v8 * v6 * v11 + v12 * v2 * v10;
  v70 = v8 * v7;
  v68 = v2 * v4 * v6 + v10 * (v8 * v7) + v11 * v3 * v12;
  v67 = v9 * v10 * v7 + v13 * v11 * v3;
  v66 = v5 * v3 * v7 + v9 * v11 * v6 + (v13 * v10 - v5 * v6) * v2;
  v65 = v5 * v3 * v12 + v9 * v4 * v6 + v13 * v10 * v8;
  v64 = v5 * (v8 * v6) + v9 * v10 * v12 + v13 * v4 * v3;
  v63 = v9 * v11 * v12 + v13 * v4 * v2;
  v62 = v5 * (v12 * v2) + v13 * v11 * v8 + (v9 * v4 - v5 * v8) * v7;
  v14 = a1[1];
  v15 = a1[2];
  v16 = a1[3];
  v60 = v15 * v8;
  v61 = v14 * (v7 * v3) + v15 * v8 * v6 + (v16 * v12 - v14 * v6) * v2;
  v56 = v15 * v9;
  v59 = v15 * v9 * v6 + v16 * v13 * v2 + *a1 * v3 * v7;
  v17 = v16 * v9;
  v18 = v14 * v9;
  v19 = v14 * v13;
  v20 = (*a1 * v3 - v16 * v9) * v12 - (v14 * v13 * v3 - v14 * v9 * v6);
  v21 = v15 * v13;
  v22 = v14 * v10 * v7 + v15 * v4 * v6 + v16 * v12 * v11;
  v23 = v16 * v13 - *a1 * v6;
  v57 = v15 * v13 * v3 + v17 * v7 + *a1 * v2 * v6;
  v58 = v20 + v23 * v8;
  v24 = v15 * v5;
  v25 = v16 * v5;
  v26 = *a1 * v10 - v16 * v5;
  v54 = v26 * v7 - (v15 * v13 * v10 - v15 * v5 * v6) + v23 * v11;
  v55 = v18 * v7 + v15 * v13 * v8 + *a1 * v2 * v12;
  v27 = v14 * v5;
  v28 = v27 * v6 + v16 * v13 * v4;
  v29 = -(v19 * v11 - v21 * v4);
  v30 = v15 * v12 * v3 + v16 * v8 * v7;
  v31 = v16 * v4;
  v32 = v14 * v6 * v11 + v15 * v12 * v10 + v16 * v4 * v7;
  v33 = *a1 * v4;
  v34 = v27 - v33;
  v35 = v29 + (v27 - v33) * v7;
  v36 = v14 * v10 * v2 + v16 * v8 * v11 + (v15 * v4 - v14 * v11) * v3;
  v37 = v24 * v3 + v17 * v11;
  v38 = -(v18 * v10 - v17 * v4);
  v39 = v27 * v2 + v56 * v4;
  v40 = v19 * v2 + v56 * v12;
  v41 = v19 * v10 + v25 * v12;
  v42 = v38 + v34 * v3;
  v43 = v56 * v10 + v25 * v2 + *a1 * v11 * v3;
  v44 = v42 + v26 * v8;
  v45 = v39 + *a1 * v11 * v8;
  v46 = v18 * v11 + v24 * v8;
  v47 = v35 + (*a1 * v11 - v24) * v12;
  v48 = v28 + *a1 * v10 * v12;
  v49 = v37 + *a1 * v10 * v2;
  v50 = v40 + *a1 * v70 - v55;
  v51 = v36 - (v60 * v10 + v31 * v2);
  v52 = 1.0 / ((v66 - v67) * v14 + v15 * (v64 - v65) + v16 * (v62 - v63) + *a1 * (v68 - v69));
  *a2 = (v68 - v69) * v52;
  a2[1] = (v61 - v30) * v52;
  a2[2] = (v32 - v22) * v52;
  a2[3] = v51 * v52;
  a2[4] = (v66 - v67) * v52;
  a2[5] = (v57 - v59) * v52;
  a2[6] = v54 * v52;
  a2[7] = (v43 - v49) * v52;
  a2[8] = (v64 - v65) * v52;
  a2[9] = v58 * v52;
  a2[10] = (v41 + v33 * v6 - v48) * v52;
  a2[11] = v44 * v52;
  a2[12] = (v62 - v63) * v52;
  a2[13] = v50 * v52;
  result = (v46 + v33 * v2 - v45) * v52;
  a2[14] = v47 * v52;
  a2[15] = result;
  return result;
}

uint64_t mc_mesh_decode(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _BOOL4 v6;
  int *v7;
  unsigned int *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  int *v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  int v20;
  unsigned int v21;
  unint64_t v22;
  int *v23;
  void *v24;
  int v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  unint64_t v40;
  int v41;
  unint64_t v42;
  int v43;
  unint64_t v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  unsigned int v48;
  unint64_t v50;
  int *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  int v60;
  unsigned int v61;
  unint64_t v63;
  int *v64;
  unint64_t v65;
  uint64_t v66;
  int v67;
  unsigned int v68;
  unint64_t v70;
  int *v71;
  unsigned int v72;
  int *v73;
  int v74;
  int v75;
  uint64_t v76;
  int v77;
  unint64_t v78;
  int v79;
  uint64_t v80;
  unint64_t v81;
  int v82;
  __int16 v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  int v89;
  int v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t i;
  int v95;
  int v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t j;
  const char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  void *v123;
  uint64_t v124;
  void *v125;
  void *v126;
  void *v127;
  int v128;
  uint64_t v129;
  int v130;
  unint64_t v131;
  int v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  int v136;
  int v137;

  v3 = a3;
  if (a3)
  {
    v6 = 1;
    v7 = (int *)malloc_type_calloc(1uLL, 0x28uLL, 0x1050040E984C859uLL);
    v8 = (unsigned int *)v7;
    *v7 = 1;
    *((_QWORD *)v7 + 1) = a1;
    *((_QWORD *)v7 + 3) = a2;
    if (a2)
    {
      v6 = a1 != 0;
      *v7 = v6;
    }
    v136 = 0;
    v137 = 0;
    v135 = 0;
    v134 = 0;
    v133 = 0;
    v9 = *((_QWORD *)v7 + 4);
    if (v9 == a2)
    {
      v137 = -1;
      v10 = a2;
      if (!v6)
        goto LABEL_32;
    }
    else
    {
      if (!v6)
        goto LABEL_32;
      v12 = v9 + 4;
      if (v9 + 4 > a2)
        goto LABEL_32;
      v13 = *(_DWORD *)(a1 + v9);
      *((_QWORD *)v7 + 4) = v12;
      v10 = v9 + 6;
      if (v9 + 6 > a2)
        goto LABEL_32;
      v14 = *(unsigned __int16 *)(a1 + v12);
      *((_QWORD *)v7 + 4) = v10;
      if (v13 != 1263421507 || v14 > 1)
        goto LABEL_32;
      if (v9 + 10 <= a2)
      {
        v20 = *(_DWORD *)(a1 + v10);
        *((_QWORD *)v7 + 4) = v9 + 10;
        v137 = v20;
        v10 = v9 + 10;
        v16 = v7;
        if (v9 + 12 <= a2)
        {
          *((_QWORD *)v7 + 4) = v9 + 12;
          if (v9 + 14 > a2)
            goto LABEL_32;
          *((_QWORD *)v7 + 4) = v9 + 14;
          v10 = v9 + 22;
          if (v9 + 22 > a2)
            goto LABEL_32;
          *((_QWORD *)v7 + 4) = v10;
          if (v9 > a2)
            goto LABEL_8;
LABEL_7:
          *((_QWORD *)v7 + 4) = v9;
          v10 = v9;
LABEL_8:
          if (!v137)
          {
            v137 = 0;
            v11 = *((_QWORD *)v7 + 3);
            if (v10 == v11)
            {
              v137 = -1;
              goto LABEL_39;
            }
            v17 = v10 + 4;
            if (v10 + 4 <= v11)
            {
              v18 = *(_DWORD *)(a1 + v10);
              *((_QWORD *)v7 + 4) = v17;
              v19 = v10 + 6;
              if (v10 + 6 <= v11)
              {
                v21 = *(unsigned __int16 *)(a1 + v17);
                *((_QWORD *)v7 + 4) = v19;
                if (v18 == 1263421507 && v21 < 2)
                {
                  v22 = v10 + 10;
                  if (v10 + 10 <= v11)
                  {
                    v26 = *(_DWORD *)(a1 + v19);
                    *((_QWORD *)v7 + 4) = v22;
                    v137 = v26;
                    v19 = v10 + 12;
                    if (v10 + 12 <= v11)
                    {
                      v27 = *(unsigned __int16 *)(a1 + v22);
                      *((_QWORD *)v7 + 4) = v19;
                      v131 = v10 + 14;
                      if (v10 + 14 <= v11)
                      {
                        *((_QWORD *)v7 + 4) = v131;
                        v19 = v10 + 22;
                        if (v10 + 22 <= v11)
                        {
                          v28 = *(_QWORD *)(a1 + v131);
                          *((_QWORD *)v7 + 4) = v19;
                        }
                        else
                        {
                          v28 = 0;
                          *v7 = 0;
                          v19 = v10 + 14;
                        }
                      }
                      else
                      {
                        v28 = 0;
                        *v7 = 0;
                      }
                      goto LABEL_38;
                    }
                    v19 = v10 + 10;
                    v23 = v7;
                  }
                  else
                  {
                    *v7 = 0;
                    v23 = &v137;
                  }
                  v27 = 0;
                  v28 = 0;
                  *v23 = 0;
                  v26 = v137;
LABEL_38:
                  if (!(v26 | v27))
                  {
                    if (!*v7)
                      goto LABEL_40;
                    if (v19 + 8 <= v11)
                    {
                      v114 = *(_QWORD *)(a1 + v19);
                      *((_QWORD *)v7 + 4) = v19 + 8;
                    }
                    else
                    {
                      v114 = 0;
                      *v7 = 0;
                    }
                    *(_QWORD *)v3 = v114;
                    mc_read_mat4((uint64_t)v7, (double *)(v3 + 8));
                    if (!*v8)
                      goto LABEL_40;
                    v116 = *((_QWORD *)v8 + 3);
                    v115 = *((_QWORD *)v8 + 4);
                    v117 = v115 + 4;
                    if (v115 + 4 <= v116)
                    {
                      v118 = *((_QWORD *)v8 + 1);
                      v119 = *(unsigned int *)(v118 + v115);
                      *((_QWORD *)v8 + 4) = v117;
                      v120 = v115 + 8;
                      if (v120 <= v116)
                      {
                        v121 = *(unsigned int *)(v118 + v117);
                        v122 = v19 + v28;
                        if (*((_QWORD *)v8 + 3) < v19 + v28)
                          v122 = v120;
                        *((_QWORD *)v8 + 4) = v122;
                        if (!*(_QWORD *)(v3 + 144) && !*(_DWORD *)(v3 + 136))
                        {
                          *(_DWORD *)(v3 + 136) = v119;
                          v123 = malloc_type_malloc(12 * v119, 0x10000403E1C8BA9uLL);
                          *(_QWORD *)(v3 + 144) = v123;
                          if (v123)
                          {
                            if (!*(_QWORD *)(v3 + 152))
                            {
                              v124 = *(unsigned int *)(v3 + 136);
                              if ((_DWORD)v124)
                              {
                                v125 = malloc_type_malloc(12 * v124, 0x10000403E1C8BA9uLL);
                                *(_QWORD *)(v3 + 152) = v125;
                                if (v125)
                                {
                                  if (!*(_QWORD *)(v3 + 168) && !*(_DWORD *)(v3 + 160))
                                  {
                                    if (!(_DWORD)v121)
                                      goto LABEL_40;
                                    v126 = malloc_type_realloc(0, 16 * v121, 0x6209F6ECuLL);
                                    if (v126)
                                    {
                                      v127 = v126;
                                      bzero(v126, 16 * v121);
                                      *(_QWORD *)(v3 + 168) = v127;
                                      *(_DWORD *)(v3 + 160) = v121;
                                      goto LABEL_40;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
LABEL_39:
                  *v8 = 0;
LABEL_40:
                  v132 = 0;
                  while (2)
                  {
                    v137 = 0;
                    v29 = *((_QWORD *)v8 + 3);
                    v30 = *((_QWORD *)v8 + 4);
                    if (v30 == v29)
                    {
                      v31 = 0;
                      v32 = 0;
                      v137 = -1;
                      v33 = v30;
                      if (!*v8)
                        goto LABEL_229;
LABEL_63:
                      if (v29 >= v30)
                      {
                        *((_QWORD *)v8 + 4) = v30;
                        v33 = v30;
                      }
                      v43 = v137;
                      switch(v137)
                      {
                        case -1:
                        case 0:
                          if (v132)
                          {
                            v128 = v136;
                            v129 = v135;
                            if ((_DWORD)v133)
                            {
                              if ((_DWORD)v133 == 1)
                              {
                                v130 = 0;
                              }
                              else
                              {
                                if ((_DWORD)v133 != 2)
                                  goto LABEL_228;
                                v130 = 1;
                              }
                              if (!mc_split(v3, v130, *((float *)&v133 + 1)))
                                goto LABEL_228;
                            }
                            if (v134 && !mc_mesh_recompute_uv(v3, v128, v129))
                              goto LABEL_228;
                          }
                          goto LABEL_229;
                        case 1:
                          v137 = 0;
                          if (v33 == v29)
                            goto LABEL_149;
                          v44 = v33 + 4;
                          if (v33 + 4 > v29)
                            goto LABEL_149;
                          v45 = *((_QWORD *)v8 + 1);
                          v46 = *(_DWORD *)(v45 + v33);
                          *((_QWORD *)v8 + 4) = v44;
                          v47 = v33 + 6;
                          if (v33 + 6 > v29)
                            goto LABEL_149;
                          v48 = *(unsigned __int16 *)(v45 + v44);
                          *((_QWORD *)v8 + 4) = v47;
                          if (v46 != 1263421507 || v48 > 1)
                            goto LABEL_149;
                          v50 = v33 + 10;
                          if (v33 + 10 <= v29)
                          {
                            v74 = *(_DWORD *)(v45 + v47);
                            *((_QWORD *)v8 + 4) = v50;
                            v137 = v74;
                            v47 = v33 + 12;
                            if (v33 + 12 <= v29)
                            {
                              v75 = *(unsigned __int16 *)(v45 + v50);
                              *((_QWORD *)v8 + 4) = v47;
                              v110 = v33 + 14;
                              if (v33 + 14 <= v29)
                              {
                                *((_QWORD *)v8 + 4) = v110;
                                v47 = v33 + 22;
                                if (v33 + 22 <= v29)
                                {
                                  v76 = *(_QWORD *)(v45 + v110);
                                  *((_QWORD *)v8 + 4) = v47;
                                }
                                else
                                {
                                  v76 = 0;
                                  *v8 = 0;
                                  v47 = v110;
                                }
                              }
                              else
                              {
                                v76 = 0;
                                *v8 = 0;
                              }
LABEL_113:
                              if (v74 != 1 || v75)
                                goto LABEL_149;
                              v77 = *v8;
                              if (!*v8)
                                goto LABEL_150;
                              v78 = v47 + 4;
                              if (v47 + 4 > v29)
                                goto LABEL_149;
                              v79 = *(_DWORD *)(*((_QWORD *)v8 + 1) + v47);
                              *((_QWORD *)v8 + 4) = v78;
                              if (v79 != *(_DWORD *)(v3 + 160))
                                goto LABEL_149;
                              if (!v79)
                                goto LABEL_188;
                              v80 = 0;
                              v81 = 0;
                              v82 = 1;
                              while (1)
                              {
                                v84 = *(_QWORD *)(v3 + 168) + v80;
                                if (v82)
                                {
                                  if (v78 + 12 > *((_QWORD *)v8 + 3))
                                    goto LABEL_120;
                                  v85 = (uint64_t *)(*((_QWORD *)v8 + 1) + v78);
                                  v86 = *v85;
                                  *(_DWORD *)(v84 + 8) = *((_DWORD *)v85 + 2);
                                  *(_QWORD *)v84 = v86;
                                  v87 = *((_QWORD *)v8 + 4);
                                  v78 = v87 + 12;
                                  *((_QWORD *)v8 + 4) = v87 + 12;
                                  v77 = *v8;
                                  if (!*v8)
                                  {
                                    v82 = 0;
                                    v83 = 0;
                                    goto LABEL_121;
                                  }
                                  v88 = v87 + 14;
                                  if (v88 > *((_QWORD *)v8 + 3))
                                  {
LABEL_120:
                                    v77 = 0;
                                    v82 = 0;
                                    v83 = 0;
                                    *v8 = 0;
                                  }
                                  else
                                  {
                                    v83 = *(_WORD *)(*((_QWORD *)v8 + 1) + v78);
                                    *((_QWORD *)v8 + 4) = v88;
                                    v78 = v88;
                                    v82 = v77;
                                  }
                                }
                                else
                                {
                                  v83 = 0;
                                }
LABEL_121:
                                *(_DWORD *)(v84 + 12) = v83;
                                ++v81;
                                v80 += 16;
                                if (v81 >= *(unsigned int *)(v3 + 160))
                                {
                                  if (!v77)
                                    goto LABEL_150;
                                  goto LABEL_188;
                                }
                              }
                            }
                            v47 = v33 + 10;
                            v51 = (int *)v8;
                          }
                          else
                          {
                            *v8 = 0;
                            v51 = &v137;
                          }
                          v75 = 0;
                          v76 = 0;
                          *v51 = 0;
                          v74 = v137;
                          goto LABEL_113;
                        case 2:
                          v137 = 0;
                          if (v33 == v29)
                            goto LABEL_149;
                          v58 = v33 + 4;
                          if (v33 + 4 > v29)
                            goto LABEL_149;
                          v59 = *((_QWORD *)v8 + 1);
                          v60 = *(_DWORD *)(v59 + v33);
                          *((_QWORD *)v8 + 4) = v58;
                          v47 = v33 + 6;
                          if (v33 + 6 > v29)
                            goto LABEL_149;
                          v61 = *(unsigned __int16 *)(v59 + v58);
                          *((_QWORD *)v8 + 4) = v47;
                          if (v60 != 1263421507 || v61 > 1)
                            goto LABEL_149;
                          v63 = v33 + 10;
                          if (v33 + 10 > v29)
                          {
                            *v8 = 0;
                            v64 = &v137;
LABEL_131:
                            v90 = 0;
                            v76 = 0;
                            *v64 = 0;
                            v89 = v137;
                            goto LABEL_132;
                          }
                          v89 = *(_DWORD *)(v59 + v47);
                          *((_QWORD *)v8 + 4) = v63;
                          v137 = v89;
                          v47 = v33 + 12;
                          if (v33 + 12 > v29)
                          {
                            v47 = v33 + 10;
                            v64 = (int *)v8;
                            goto LABEL_131;
                          }
                          v90 = *(unsigned __int16 *)(v59 + v63);
                          *((_QWORD *)v8 + 4) = v47;
                          v111 = v33 + 14;
                          if (v33 + 14 <= v29)
                          {
                            *((_QWORD *)v8 + 4) = v111;
                            v47 = v33 + 22;
                            if (v33 + 22 <= v29)
                            {
                              v76 = *(_QWORD *)(v59 + v111);
                              *((_QWORD *)v8 + 4) = v47;
                            }
                            else
                            {
                              v76 = 0;
                              *v8 = 0;
                              v47 = v111;
                            }
                          }
                          else
                          {
                            v76 = 0;
                            *v8 = 0;
                          }
LABEL_132:
                          if (v89 != 2 || v90)
                            goto LABEL_149;
                          if (*v8)
                          {
                            v91 = v47 + 4;
                            if (v47 + 4 <= v29
                              && (v92 = *(unsigned int *)(*((_QWORD *)v8 + 1) + v47),
                                  *((_QWORD *)v8 + 4) = v91,
                                  *(_DWORD *)(v3 + 136) == v92))
                            {
                              if (!v92)
                                goto LABEL_188;
                              v93 = 0;
                              for (i = 0; i < v92; ++i)
                              {
                                if (*v8)
                                {
                                  if ((unint64_t)(v91 + 12) <= *((_QWORD *)v8 + 3))
                                  {
                                    v102 = *(_QWORD *)(v3 + 144) + v93;
                                    v103 = *((_QWORD *)v8 + 1) + v91;
                                    v104 = *(_QWORD *)v103;
                                    *(_DWORD *)(v102 + 8) = *(_DWORD *)(v103 + 8);
                                    *(_QWORD *)v102 = v104;
                                    v91 = *((_QWORD *)v8 + 4) + 12;
                                    *((_QWORD *)v8 + 4) = v91;
                                    v92 = *(unsigned int *)(v3 + 136);
                                  }
                                  else
                                  {
                                    *v8 = 0;
                                  }
                                }
                                v93 += 12;
                              }
LABEL_182:
                              if (*v8)
                              {
LABEL_188:
                                if (*((_QWORD *)v8 + 3) >= v47 + v76)
                                  *((_QWORD *)v8 + 4) = v47 + v76;
                              }
                            }
                            else
                            {
LABEL_149:
                              *v8 = 0;
                            }
                          }
LABEL_150:
                          if (!*v8)
                          {
LABEL_151:
                            v101 = "UNKNOWN CHUNK TYPE";
                            if ((v43 + 1) <= 0xC)
                              v101 = (&off_1E4315008)[v43 + 1];
                            mc_log_message(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/mcodec/mesh/mc_mesh_codec.c", 372, (uint64_t)"mc_io_r_mc_mesh", "Failed when parsing chunk of type %s (%d, v%d.%d)", v101, v43, v31, v32);
                          }
                          continue;
                        case 3:
                          v137 = 0;
                          if (v33 == v29)
                            goto LABEL_149;
                          v65 = v33 + 4;
                          if (v33 + 4 > v29)
                            goto LABEL_149;
                          v66 = *((_QWORD *)v8 + 1);
                          v67 = *(_DWORD *)(v66 + v33);
                          *((_QWORD *)v8 + 4) = v65;
                          v47 = v33 + 6;
                          if (v33 + 6 > v29)
                            goto LABEL_149;
                          v68 = *(unsigned __int16 *)(v66 + v65);
                          *((_QWORD *)v8 + 4) = v47;
                          if (v67 != 1263421507 || v68 > 1)
                            goto LABEL_149;
                          v70 = v33 + 10;
                          if (v33 + 10 > v29)
                          {
                            *v8 = 0;
                            v71 = &v137;
LABEL_141:
                            v96 = 0;
                            v76 = 0;
                            *v71 = 0;
                            v95 = v137;
                            goto LABEL_142;
                          }
                          v95 = *(_DWORD *)(v66 + v47);
                          *((_QWORD *)v8 + 4) = v70;
                          v137 = v95;
                          v47 = v33 + 12;
                          if (v33 + 12 > v29)
                          {
                            v47 = v33 + 10;
                            v71 = (int *)v8;
                            goto LABEL_141;
                          }
                          v96 = *(unsigned __int16 *)(v66 + v70);
                          *((_QWORD *)v8 + 4) = v47;
                          v112 = v33 + 14;
                          if (v33 + 14 <= v29)
                          {
                            *((_QWORD *)v8 + 4) = v112;
                            v47 = v33 + 22;
                            if (v33 + 22 <= v29)
                            {
                              v76 = *(_QWORD *)(v66 + v112);
                              *((_QWORD *)v8 + 4) = v47;
                            }
                            else
                            {
                              v76 = 0;
                              *v8 = 0;
                              v47 = v112;
                            }
                          }
                          else
                          {
                            v76 = 0;
                            *v8 = 0;
                          }
LABEL_142:
                          if (v95 != 3 || v96)
                            goto LABEL_149;
                          if (!*v8)
                            goto LABEL_150;
                          v97 = v47 + 4;
                          if (v47 + 4 > v29)
                            goto LABEL_149;
                          v98 = *(unsigned int *)(*((_QWORD *)v8 + 1) + v47);
                          *((_QWORD *)v8 + 4) = v97;
                          if (*(_DWORD *)(v3 + 136) != v98)
                            goto LABEL_149;
                          if (!v98)
                            goto LABEL_188;
                          v99 = 0;
                          for (j = 0; j < v98; ++j)
                          {
                            if (*v8)
                            {
                              if ((unint64_t)(v97 + 12) <= *((_QWORD *)v8 + 3))
                              {
                                v105 = *(_QWORD *)(v3 + 152) + v99;
                                v106 = *((_QWORD *)v8 + 1) + v97;
                                v107 = *(_QWORD *)v106;
                                *(_DWORD *)(v105 + 8) = *(_DWORD *)(v106 + 8);
                                *(_QWORD *)v105 = v107;
                                v97 = *((_QWORD *)v8 + 4) + 12;
                                *((_QWORD *)v8 + 4) = v97;
                                v98 = *(unsigned int *)(v3 + 136);
                              }
                              else
                              {
                                *v8 = 0;
                              }
                            }
                            v99 += 12;
                          }
                          goto LABEL_182;
                        case 4:
                          mc_io_r_vi_connectivity_eb((uint64_t)v8, v3);
                          goto LABEL_150;
                        case 5:
                          mc_io_r_material_id((uint64_t)v8, v3);
                          goto LABEL_150;
                        case 6:
                          mc_io_r_vertices_predictive((uint64_t)v8, v3);
                          goto LABEL_150;
                        case 7:
                          mc_io_r_uv_predictive((uint64_t)v8, v3);
                          goto LABEL_150;
                        case 8:
                          mc_io_r_vertices_cube((uint64_t)v8, v3);
                          goto LABEL_150;
                        case 9:
                          mc_io_r_vertices_cam((uint64_t)v8, v3);
                          goto LABEL_150;
                        case 10:
                          mc_io_r_uv_model_chunk((uint64_t)v8, &v136, (void **)&v135);
                          goto LABEL_150;
                        case 11:
                          mc_io_r_postprocess((uint64_t)v8, &v133);
                          v132 = 1;
                          goto LABEL_150;
                        default:
                          mc_log_message(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/mcodec/mesh/mc_mesh_codec.c", 364, (uint64_t)"mc_io_r_mc_mesh", "Found unknown chunk %d, v%d.%d", v137, v31, v32);
                          v52 = *((_QWORD *)v8 + 3);
                          v53 = *((_QWORD *)v8 + 4);
                          if (v53 == v52)
                            goto LABEL_79;
                          if (!*v8)
                            goto LABEL_79;
                          v54 = v53 + 4;
                          if (v53 + 4 > v52)
                            goto LABEL_79;
                          v55 = *((_QWORD *)v8 + 1);
                          v56 = *(_DWORD *)(v55 + v53);
                          *((_QWORD *)v8 + 4) = v54;
                          v57 = v53 + 6;
                          if (v53 + 6 > v52)
                            goto LABEL_79;
                          v72 = *(unsigned __int16 *)(v55 + v54);
                          *((_QWORD *)v8 + 4) = v57;
                          if (v56 != 1263421507 || v72 > 1)
                            goto LABEL_79;
                          if (v53 + 10 <= v52)
                          {
                            *((_QWORD *)v8 + 4) = v53 + 10;
                            v57 = v53 + 10;
                            v73 = (int *)v8;
                            if (v53 + 12 <= v52)
                            {
                              *((_QWORD *)v8 + 4) = v53 + 12;
                              v113 = v53 + 14;
                              if (v53 + 14 > v52 || (*((_QWORD *)v8 + 4) = v113, v57 = v53 + 22, v53 + 22 > v52))
                              {
LABEL_79:
                                *v8 = 0;
                                goto LABEL_151;
                              }
                              v108 = *(_QWORD *)(v55 + v113);
                              *((_QWORD *)v8 + 4) = v57;
                              goto LABEL_165;
                            }
                          }
                          else
                          {
                            *v8 = 0;
                            v73 = &v137;
                          }
                          v108 = 0;
                          *v73 = 0;
                          if (!*v8)
                            goto LABEL_150;
LABEL_165:
                          v109 = v108 + v57;
                          if (v52 >= v109)
                            *((_QWORD *)v8 + 4) = v109;
                          goto LABEL_150;
                      }
                    }
                    break;
                  }
                  v34 = v30 + 4;
                  if (*v8)
                    v35 = v34 > v29;
                  else
                    v35 = 1;
                  if (!v35)
                  {
                    v36 = *((_QWORD *)v8 + 1);
                    v37 = *(_DWORD *)(v36 + v30);
                    *((_QWORD *)v8 + 4) = v34;
                    v33 = v30 + 6;
                    if (v30 + 6 <= v29)
                    {
                      v38 = *(unsigned __int16 *)(v36 + v34);
                      *((_QWORD *)v8 + 4) = v33;
                      if (v37 == 1263421507 && v38 <= 1)
                      {
                        v40 = v30 + 10;
                        if (v30 + 10 <= v29)
                        {
                          v41 = *(_DWORD *)(v36 + v33);
                          *((_QWORD *)v8 + 4) = v40;
                          v137 = v41;
                          v42 = v30 + 12;
                          if (v30 + 12 <= v29)
                          {
                            v31 = *(unsigned __int16 *)(v36 + v40);
                            *((_QWORD *)v8 + 4) = v42;
                            if (v30 + 14 > v29)
                              goto LABEL_228;
                            v32 = *(unsigned __int16 *)(v36 + v42);
                            *((_QWORD *)v8 + 4) = v30 + 14;
                            v33 = v30 + 22;
                            if (v30 + 22 > v29)
                              goto LABEL_228;
                            *((_QWORD *)v8 + 4) = v33;
                            if (!*v8)
                              goto LABEL_229;
                          }
                          else
                          {
                            v33 = v30 + 10;
                            v31 = 0;
                            v32 = 0;
                            *v8 = 0;
                            if (!*v8)
                              goto LABEL_229;
                          }
                        }
                        else
                        {
                          *v8 = 0;
                          v31 = 0;
                          v32 = 0;
                          v137 = 0;
                          if (!*v8)
                            goto LABEL_229;
                        }
                        goto LABEL_63;
                      }
                    }
                  }
LABEL_228:
                  *v8 = 0;
LABEL_229:
                  *(_DWORD *)(v3 + 176) = v136;
                  *(_QWORD *)(v3 + 184) = v135;
                  v3 = *v8;
                  v24 = (void *)*((_QWORD *)v8 + 2);
                  if (!v24)
                    goto LABEL_34;
                  goto LABEL_33;
                }
                v10 += 6;
              }
              else
              {
                v10 += 4;
              }
            }
            v26 = 0;
            v27 = 0;
            v28 = 0;
            *v7 = 0;
            v19 = v10;
            goto LABEL_38;
          }
LABEL_32:
          v3 = 0;
          *v7 = 0;
          v24 = (void *)*((_QWORD *)v7 + 2);
          if (!v24)
          {
LABEL_34:
            free(v8);
            return v3;
          }
LABEL_33:
          free(v24);
          goto LABEL_34;
        }
      }
      else
      {
        *v7 = 0;
        v16 = &v137;
      }
      *v16 = 0;
      if (!*v7)
        goto LABEL_32;
    }
    if (v9 > a2)
      goto LABEL_8;
    goto LABEL_7;
  }
  return v3;
}

void **mc_scene_decode(uint64_t a1, unint64_t a2)
{
  char *v2;
  uint64_t v3;
  unint64_t v4;
  size_t v5;
  size_t v6;
  size_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  size_t v10;
  int v11;
  int v12;
  size_t v13;
  void **v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  void **v19;
  char *v20;
  size_t v21;
  char *v22;
  void *v23;
  char *v24;
  char *v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  void *v32;
  _QWORD *v33;
  _QWORD *v34;
  void *v35;
  void *v36;
  _QWORD *v37;
  _QWORD *v38;
  void *v39;
  uint64_t v40;
  _DWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  _DWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void *v54;
  int v55;
  _DWORD *v56;
  _DWORD *v57;
  unint64_t v58;
  int v59;
  _DWORD *v60;
  void **v61;
  void **v62;
  void **v63;
  void *v64;
  uint64_t v65;
  int v66;
  void *v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  int v72;
  unint64_t v73;
  _DWORD *v74;
  _DWORD *v75;
  void ***v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  void **v80;
  size_t v81;
  const void *v82;
  int v83;
  void **v84;
  void *v85;
  void *v86;
  void **v87;
  void *chapter_data;
  void *v89;
  _DWORD *v90;
  unint64_t v91;
  void **v92;
  uint64_t v93;
  uint64_t v94;

  v2 = _mc_container_create_read("MCP4", a1, a2, 1);
  if (!v2)
    return 0;
  v3 = (uint64_t)v2;
  v4 = *((_QWORD *)v2 + 2);
  if (!v4)
  {
    v14 = 0;
    v15 = 1;
    goto LABEL_20;
  }
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = (unsigned __int16 *)*((_QWORD *)v2 + 1);
  v9 = *((_QWORD *)v2 + 2);
  do
  {
    v10 = v7;
    v12 = *v8;
    v8 += 20;
    v11 = v12;
    if (v12 == 1)
      ++v7;
    if (v11 == 7)
      v13 = v6 + 1;
    else
      v13 = v6;
    if (v11 == 2)
      ++v5;
    else
      v6 = v13;
    --v9;
  }
  while (v9);
  if (v7 | v6)
  {
    v19 = (void **)malloc_type_calloc(1uLL, 0x30uLL, 0x1020040FA093B57uLL);
    v14 = v19;
    if (!*v19 && !v19[1])
    {
      v20 = (char *)malloc_type_calloc(v7, 0xC0uLL, 0x1020040D1D670B0uLL);
      if (v7 && v20)
      {
        if (v11 == 1)
          v21 = v10 + 1;
        else
          v21 = v10;
        v22 = v20 + 88;
        do
        {
          *((_QWORD *)v22 - 10) = 0x3FF0000000000000;
          *(_OWORD *)(v22 - 72) = 0uLL;
          *(_OWORD *)(v22 - 56) = 0uLL;
          *((_QWORD *)v22 - 5) = 0x3FF0000000000000;
          *((_OWORD *)v22 - 2) = 0uLL;
          *((_OWORD *)v22 - 1) = 0uLL;
          *(_QWORD *)v22 = 0x3FF0000000000000;
          *(_OWORD *)(v22 + 8) = 0uLL;
          *(_OWORD *)(v22 + 24) = 0uLL;
          *((_QWORD *)v22 + 5) = 0x3FF0000000000000;
          v22 += 192;
          --v21;
        }
        while (v21);
        *v14 = v20;
        goto LABEL_35;
      }
      *v14 = v20;
      if (v20)
LABEL_35:
        v14[1] = (void *)v7;
    }
    if (!v14[4] && !v14[5])
    {
      v23 = malloc_type_calloc(v5, 0x18uLL, 0x10200406E52F545uLL);
      v14[4] = v23;
      if (v23)
        v14[5] = (void *)v5;
    }
    if (v14[2] || v14[3])
      goto LABEL_49;
    v24 = (char *)malloc_type_calloc(v6, 0xC0uLL, 0x1020040D1D670B0uLL);
    if (v6 && v24)
    {
      v25 = v24 + 88;
      v26 = v6;
      do
      {
        *((_QWORD *)v25 - 10) = 0x3FF0000000000000;
        *(_OWORD *)(v25 - 72) = 0uLL;
        *(_OWORD *)(v25 - 56) = 0uLL;
        *((_QWORD *)v25 - 5) = 0x3FF0000000000000;
        *((_OWORD *)v25 - 2) = 0uLL;
        *((_OWORD *)v25 - 1) = 0uLL;
        *(_QWORD *)v25 = 0x3FF0000000000000;
        *(_OWORD *)(v25 + 8) = 0uLL;
        *(_OWORD *)(v25 + 24) = 0uLL;
        *((_QWORD *)v25 + 5) = 0x3FF0000000000000;
        v25 += 192;
        --v26;
      }
      while (v26);
      v14[2] = v24;
    }
    else
    {
      v14[2] = v24;
      if (!v24)
      {
LABEL_49:
        v27 = 0;
        v28 = 0;
        v29 = 0;
        v94 = 0;
        v30 = 0;
        v15 = 1;
        v91 = v4;
        v92 = v14;
        while (1)
        {
          if (*(_QWORD *)(v3 + 16) <= v30)
          {
            v15 = 0;
LABEL_110:
            v68 = 0;
            v69 = 0;
            if (v4 <= 1)
              v4 = 1;
            while (2)
            {
              v70 = *(_QWORD *)(v3 + 16);
              if (v70 <= v69)
              {
                v15 = 0;
                if (v70)
                  goto LABEL_16;
                goto LABEL_20;
              }
              v71 = *(_QWORD *)(v3 + 8);
              v72 = *(unsigned __int16 *)(v71 + v68);
              if ((v72 - 5) < 0xFFFFFFFE)
                goto LABEL_114;
              v73 = *(unsigned int *)(v71 + v68 + 4);
              if ((unint64_t)v14[5] <= v73)
                goto LABEL_114;
              v74 = v14[4];
              v75 = &v74[6 * v73];
              v77 = *((_QWORD *)v75 + 2);
              v76 = (void ***)(v75 + 4);
              if (!v77)
              {
                v14 = v92;
                goto LABEL_114;
              }
              if (v72 == 4)
              {
                chapter_data = mc_container_get_chapter_data(v3, v69, 0);
                if (!chapter_data)
                {
LABEL_141:
                  v15 = 0;
                  v14 = v92;
                  if (*(_QWORD *)(v3 + 16))
                    goto LABEL_16;
                  goto LABEL_20;
                }
                v79 = chapter_data;
                if (*v76)
                {
                  v15 = mc_material_attach_alpha_data((uint64_t)&v74[6 * v73], *((const void **)chapter_data + 1), *((_QWORD *)chapter_data + 3), *((_DWORD *)*v76 + 4));
                  goto LABEL_132;
                }
              }
              else
              {
                if (v72 != 3)
                  goto LABEL_135;
                v78 = mc_container_get_chapter_data(v3, v69, 0);
                if (!v78)
                  goto LABEL_141;
                v79 = v78;
                v80 = *v76;
                if (*v76)
                {
                  v81 = v78[3];
                  if (!HIDWORD(v81))
                  {
                    if (v74[6 * v73 + 2])
                    {
                      v82 = (const void *)v78[1];
                      v83 = *(_DWORD *)v80;
                      free(v80[1]);
                      v84 = *v76;
                      v84[1] = 0;
                      *((_DWORD *)v84 + 1) = 0;
                      if (v83)
                      {
                        v85 = malloc_type_malloc(v81, 0x505EE921uLL);
                        if (v85)
                        {
                          v86 = v85;
                          memcpy(v85, v82, v81);
                          v87 = *v76;
                          v87[1] = v86;
                          *(_DWORD *)v87 = v83;
                          *((_DWORD *)v87 + 1) = v81;
                          v15 = 1;
                        }
                        else
                        {
                          v15 = 0;
                          (*v76)[1] = 0;
                        }
                      }
                      else
                      {
                        v15 = 1;
                      }
LABEL_132:
                      v89 = (void *)v79[2];
                      if (v89)
                        free(v89);
                      free(v79);
LABEL_135:
                      v14 = v92;
                      if (!v15)
                        goto LABEL_15;
LABEL_114:
                      ++v69;
                      v68 += 40;
                      if (v4 == v69)
                        goto LABEL_15;
                      continue;
                    }
                  }
                }
              }
              break;
            }
            v15 = 0;
            goto LABEL_132;
          }
          v31 = *(unsigned __int16 *)(*(_QWORD *)(v3 + 8) + v27);
          if (v31 == 7)
          {
            v36 = v14[2];
            v37 = mc_container_get_chapter_data(v3, v30, 0);
            if (v37)
            {
              v38 = v37;
              v15 = mc_mesh_decode(v37[1], v37[3], (uint64_t)v36 + 192 * v29);
              v39 = (void *)v38[2];
              if (v39)
                free(v39);
              free(v38);
              ++v29;
            }
            else
            {
              v15 = 0;
              ++v29;
            }
LABEL_52:
            if (!v15)
              goto LABEL_15;
            goto LABEL_53;
          }
          if (v31 == 2)
            break;
          if (v31 == 1)
          {
            v32 = *v14;
            v33 = mc_container_get_chapter_data(v3, v30, 0);
            if (v33)
            {
              v34 = v33;
              v15 = mc_mesh_decode(v33[1], v33[3], (uint64_t)v32 + 192 * v94);
              v35 = (void *)v34[2];
              if (v35)
                free(v35);
              free(v34);
            }
            else
            {
              v15 = 0;
            }
            ++v94;
            goto LABEL_52;
          }
LABEL_53:
          ++v30;
          v27 += 40;
          if (v4 == v30)
            goto LABEL_110;
        }
        v40 = v29;
        v41 = v14[4];
        v42 = mc_container_get_chapter_data(v3, v30, 0);
        if (!v42)
        {
          v15 = 0;
          v29 = v40;
LABEL_51:
          ++v28;
          goto LABEL_52;
        }
        v43 = v42;
        v93 = v28;
        v44 = &v41[6 * v28];
        v45 = v42[1];
        v46 = v42[3];
        v47 = malloc_type_calloc(1uLL, 0x28uLL, 0x1050040E984C859uLL);
        v48 = v47;
        *v47 = 1;
        *((_QWORD *)v47 + 1) = v45;
        *((_QWORD *)v47 + 3) = v46;
        if (!v46 || (*v47 = v45 != 0, v45))
        {
          v49 = *((_QWORD *)v47 + 4);
          v50 = v49 + 8;
          if (v49 + 8 <= v46)
          {
            v51 = *(_QWORD *)(v45 + v49);
            *((_QWORD *)v47 + 4) = v50;
            *v44 = v51;
            v52 = v49 + 9;
            if (v49 + 9 <= v46)
            {
              v55 = *(unsigned __int8 *)(v45 + v50);
              *((_QWORD *)v47 + 4) = v52;
              v14 = v92;
              v56 = &v41[6 * v93];
              v56[2] = v55;
              v57 = v56 + 2;
              if (v55)
              {
                v58 = v49 + 10;
                if (v58 <= v46)
                {
                  v90 = v57;
                  v59 = *(unsigned __int8 *)(v45 + v52);
                  *((_QWORD *)v47 + 4) = v58;
                  v60 = &v41[6 * v93];
                  v63 = (void **)*((_QWORD *)v60 + 2);
                  v62 = (void **)(v60 + 4);
                  v61 = v63;
                  if (v63
                    || (v61 = (void **)malloc_type_calloc(1uLL, 0x20uLL, 0x10800403AF1B36BuLL), (*v62 = v61) != 0)
                    && *v90)
                  {
                    free(v61[1]);
                    v61 = (void **)*v62;
                    v61[1] = 0;
                    *((_DWORD *)v61 + 1) = 0;
                    if (v59)
                    {
                      v64 = malloc_type_malloc(0, 0x505EE921uLL);
                      v61 = (void **)*v62;
                      if (v64)
                      {
                        v61[1] = v64;
                        *(_DWORD *)v61 = v59;
                        *((_DWORD *)v61 + 1) = 0;
                      }
                      else
                      {
                        v61[1] = 0;
                      }
                    }
                  }
                  v4 = v91;
                  v29 = v40;
                  if (!*(_DWORD *)v48)
                  {
                    v15 = 0;
                    goto LABEL_80;
                  }
                  v65 = v48[4];
                  if ((unint64_t)(v65 + 1) > v48[3])
                  {
                    v15 = 0;
                    *(_DWORD *)v48 = 0;
                    goto LABEL_80;
                  }
                  v66 = *(unsigned __int8 *)(v48[1] + v65);
                  v48[4] = v65 + 1;
                  if (!v61)
                  {
                    v61 = (void **)malloc_type_calloc(1uLL, 0x20uLL, 0x10800403AF1B36BuLL);
                    *v62 = v61;
                  }
                  if (*v90)
                  {
                    free(v61[1]);
                    v61 = (void **)*v62;
                    v61[1] = 0;
                    *((_DWORD *)v61 + 1) = 0;
                    if (v66)
                    {
                      v67 = malloc_type_malloc(0, 0x505EE921uLL);
                      v61 = (void **)*v62;
                      if (v67)
                      {
                        v61[1] = v67;
                        *(_DWORD *)v61 = v66;
                        *((_DWORD *)v61 + 1) = 0;
                      }
                      else
                      {
                        v61[1] = 0;
                      }
                    }
                  }
                  *((_DWORD *)v61 + 4) = v66;
                  v15 = *(_DWORD *)v48;
LABEL_79:
                  v29 = v40;
LABEL_80:
                  v53 = (void *)v48[2];
                  if (v53)
                    free(v53);
                  free(v48);
                  v54 = (void *)v43[2];
                  if (v54)
                    free(v54);
                  free(v43);
                  v28 = v93;
                  goto LABEL_51;
                }
                v15 = 0;
                *v47 = 0;
              }
              else
              {
                v15 = 1;
              }
LABEL_78:
              v4 = v91;
              goto LABEL_79;
            }
            v15 = 0;
            *v47 = 0;
LABEL_77:
            v14 = v92;
            v41[6 * v93 + 2] = 0;
            goto LABEL_78;
          }
          *v47 = 0;
        }
        v15 = 0;
        *v44 = 0;
        goto LABEL_77;
      }
    }
    v14[3] = (void *)v6;
    goto LABEL_49;
  }
  v14 = 0;
  v15 = 1;
LABEL_15:
  if (*(_QWORD *)(v3 + 16))
  {
LABEL_16:
    v16 = 0;
    v17 = 24;
    do
    {
      free(*(void **)(*(_QWORD *)(v3 + 8) + v17));
      ++v16;
      v17 += 40;
    }
    while (*(_QWORD *)(v3 + 16) > v16);
  }
LABEL_20:
  free(*(void **)(v3 + 8));
  free((void *)v3);
  if (!v15)
  {
    mc_scene_free(v14);
    return 0;
  }
  return v14;
}

double mc_read_mat4(uint64_t a1, double *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  double result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;

  if (!*(_DWORD *)a1)
    goto LABEL_4;
  v3 = *(_QWORD *)(a1 + 24);
  v2 = *(_QWORD *)(a1 + 32);
  v4 = v2 + 8;
  if (v2 + 8 > v3)
  {
    *(_DWORD *)a1 = 0;
LABEL_4:
    *a2 = 0.0;
    a2[1] = 0.0;
LABEL_5:
    a2[2] = 0.0;
    a2[3] = 0.0;
LABEL_6:
    a2[4] = 0.0;
    a2[5] = 0.0;
LABEL_7:
    a2[6] = 0.0;
    a2[7] = 0.0;
LABEL_8:
    a2[8] = 0.0;
    a2[9] = 0.0;
    a2[10] = 0.0;
    a2[11] = 0.0;
    a2[12] = 0.0;
    a2[13] = 0.0;
    a2[14] = 0.0;
    result = 0.0;
    a2[15] = 0.0;
    return result;
  }
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(v6 + v2);
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)a2 = v7;
  v8 = v2 + 16;
  if (v2 + 16 > v3)
  {
    *(_DWORD *)a1 = 0;
    a2[1] = 0.0;
    a2[2] = 0.0;
LABEL_15:
    a2[3] = 0.0;
    a2[4] = 0.0;
LABEL_16:
    a2[5] = 0.0;
    a2[6] = 0.0;
LABEL_17:
    a2[7] = 0.0;
    a2[8] = 0.0;
    a2[9] = 0.0;
    a2[10] = 0.0;
    a2[11] = 0.0;
    a2[12] = 0.0;
    a2[13] = 0.0;
    a2[14] = 0.0;
    result = 0.0;
    a2[15] = 0.0;
    return result;
  }
  v9 = *(_QWORD *)(v6 + v4);
  *(_QWORD *)(a1 + 32) = v8;
  *((_QWORD *)a2 + 1) = v9;
  v10 = v2 + 24;
  if (v2 + 24 > v3)
  {
    *(_DWORD *)a1 = 0;
    goto LABEL_5;
  }
  v11 = *(_QWORD *)(v6 + v8);
  *(_QWORD *)(a1 + 32) = v10;
  *((_QWORD *)a2 + 2) = v11;
  v12 = v2 + 32;
  if (v2 + 32 > v3)
  {
    *(_DWORD *)a1 = 0;
    goto LABEL_15;
  }
  v13 = *(_QWORD *)(v6 + v10);
  *(_QWORD *)(a1 + 32) = v12;
  *((_QWORD *)a2 + 3) = v13;
  v14 = v2 + 40;
  if (v2 + 40 > v3)
  {
    *(_DWORD *)a1 = 0;
    goto LABEL_6;
  }
  v15 = *(_QWORD *)(v6 + v12);
  *(_QWORD *)(a1 + 32) = v14;
  *((_QWORD *)a2 + 4) = v15;
  v16 = v2 + 48;
  if (v2 + 48 > v3)
  {
    *(_DWORD *)a1 = 0;
    goto LABEL_16;
  }
  v17 = *(_QWORD *)(v6 + v14);
  *(_QWORD *)(a1 + 32) = v16;
  *((_QWORD *)a2 + 5) = v17;
  v18 = v2 + 56;
  if (v2 + 56 > v3)
  {
    *(_DWORD *)a1 = 0;
    goto LABEL_7;
  }
  v19 = *(_QWORD *)(v6 + v16);
  *(_QWORD *)(a1 + 32) = v18;
  *((_QWORD *)a2 + 6) = v19;
  v20 = v2 + 64;
  if (v2 + 64 > v3)
  {
    *(_DWORD *)a1 = 0;
    goto LABEL_17;
  }
  v21 = *(_QWORD *)(v6 + v18);
  *(_QWORD *)(a1 + 32) = v20;
  *((_QWORD *)a2 + 7) = v21;
  v22 = v2 + 72;
  if (v2 + 72 > v3)
  {
    *(_DWORD *)a1 = 0;
    goto LABEL_8;
  }
  v23 = *(_QWORD *)(v6 + v20);
  *(_QWORD *)(a1 + 32) = v22;
  *((_QWORD *)a2 + 8) = v23;
  v24 = v2 + 80;
  if (v2 + 80 <= v3)
  {
    v25 = *(_QWORD *)(v6 + v22);
    *(_QWORD *)(a1 + 32) = v24;
    *((_QWORD *)a2 + 9) = v25;
    v26 = v2 + 88;
    if (v2 + 88 <= v3)
    {
      v27 = *(_QWORD *)(v6 + v24);
      *(_QWORD *)(a1 + 32) = v26;
      *((_QWORD *)a2 + 10) = v27;
      v28 = v2 + 96;
      if (v2 + 96 <= v3)
      {
        v29 = *(_QWORD *)(v6 + v26);
        *(_QWORD *)(a1 + 32) = v28;
        *((_QWORD *)a2 + 11) = v29;
        v30 = v2 + 104;
        if (v2 + 104 <= v3)
        {
          v31 = *(_QWORD *)(v6 + v28);
          *(_QWORD *)(a1 + 32) = v30;
          *((_QWORD *)a2 + 12) = v31;
          v32 = v2 + 112;
          if (v2 + 112 <= v3)
          {
            v33 = *(_QWORD *)(v6 + v30);
            *(_QWORD *)(a1 + 32) = v32;
            *((_QWORD *)a2 + 13) = v33;
            v34 = v2 + 120;
            if (v2 + 120 <= v3)
            {
              v35 = *(_QWORD *)(v6 + v32);
              *(_QWORD *)(a1 + 32) = v34;
              *((_QWORD *)a2 + 14) = v35;
              v36 = v2 + 128;
              if (v36 <= v3)
              {
                result = *(double *)(v6 + v34);
                *(_QWORD *)(a1 + 32) = v36;
                a2[15] = result;
              }
              else
              {
                *(_DWORD *)a1 = 0;
                result = 0.0;
                a2[15] = 0.0;
              }
            }
            else
            {
              *(_DWORD *)a1 = 0;
              a2[14] = 0.0;
              result = 0.0;
              a2[15] = 0.0;
            }
          }
          else
          {
            *(_DWORD *)a1 = 0;
            a2[13] = 0.0;
            a2[14] = 0.0;
            result = 0.0;
            a2[15] = 0.0;
          }
        }
        else
        {
          *(_DWORD *)a1 = 0;
          a2[12] = 0.0;
          a2[13] = 0.0;
          a2[14] = 0.0;
          result = 0.0;
          a2[15] = 0.0;
        }
      }
      else
      {
        *(_DWORD *)a1 = 0;
        a2[11] = 0.0;
        a2[12] = 0.0;
        a2[13] = 0.0;
        a2[14] = 0.0;
        result = 0.0;
        a2[15] = 0.0;
      }
    }
    else
    {
      *(_DWORD *)a1 = 0;
      a2[10] = 0.0;
      a2[11] = 0.0;
      a2[12] = 0.0;
      a2[13] = 0.0;
      a2[14] = 0.0;
      result = 0.0;
      a2[15] = 0.0;
    }
  }
  else
  {
    *(_DWORD *)a1 = 0;
    a2[9] = 0.0;
    a2[10] = 0.0;
    a2[11] = 0.0;
    a2[12] = 0.0;
    a2[13] = 0.0;
    a2[14] = 0.0;
    result = 0.0;
    a2[15] = 0.0;
  }
  return result;
}

void mc_read_tiny_big(uint64_t a1, int a2, _DWORD *a3)
{
  size_t v6;
  int8x16_t *v7;
  int8x16_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _DWORD *v14;
  uint64_t v15;
  unsigned int v16;
  size_t v17;
  int32x4_t v18;
  int8x16_t v19;
  int8x16_t *v20;
  int8x16_t v21;
  uint64_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  uint8x16_t v30;
  uint16x8_t v31;
  uint16x8_t v32;
  uint8x16_t v33;
  uint16x8_t v34;
  uint16x8_t v35;
  uint64_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int8x8_t *v39;
  uint64_t v40;
  int8x16_t v41;
  int8x8_t v42;
  uint16x8_t v43;
  uint64_t v44;
  unsigned __int8 *v45;
  int v46;
  _DWORD *v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int8x16_t *v51;
  int v52;
  int v53;
  int v54;

  v6 = a2;
  v7 = (int8x16_t *)malloc_type_malloc(a2, 0x100004077774924uLL);
  v8 = v7;
  if (!*(_DWORD *)a1)
    goto LABEL_10;
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = v10 + 4;
  if (v10 + 4 > v9
    || (v12 = *(_QWORD *)(a1 + 8), v13 = *(_DWORD *)(v12 + v10), *(_QWORD *)(a1 + 32) = v11, v11 + v6 > v9))
  {
    v14 = 0;
LABEL_5:
    *(_DWORD *)a1 = 0;
    goto LABEL_11;
  }
  memcpy(v7, (const void *)(v12 + v11), v6);
  *(_QWORD *)(a1 + 32) += v6;
  if (!*(_DWORD *)a1)
  {
LABEL_10:
    v14 = 0;
    goto LABEL_11;
  }
  if (a2 < 1)
  {
    v17 = 0;
    goto LABEL_27;
  }
  if (a2 < 8)
  {
    v15 = 0;
    v16 = 0;
    goto LABEL_22;
  }
  if (a2 >= 0x20)
  {
    v18 = 0uLL;
    v15 = a2 & 0xFFFFFFE0;
    v19.i64[0] = -1;
    v19.i64[1] = -1;
    v20 = v8 + 1;
    v21.i64[0] = 0x100000001;
    v21.i64[1] = 0x100000001;
    v22 = v15;
    v23 = 0uLL;
    v24 = 0uLL;
    v25 = 0uLL;
    v26 = 0uLL;
    v27 = 0uLL;
    v28 = 0uLL;
    v29 = 0uLL;
    do
    {
      v30 = (uint8x16_t)vceqq_s8(v20[-1], v19);
      v31 = vmovl_u8(*(uint8x8_t *)v30.i8);
      v32 = vmovl_high_u8(v30);
      v33 = (uint8x16_t)vceqq_s8(*v20, v19);
      v34 = vmovl_u8(*(uint8x8_t *)v33.i8);
      v35 = vmovl_high_u8(v33);
      v25 = vaddq_s32(v25, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v32), v21));
      v24 = vaddq_s32(v24, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v32.i8), v21));
      v23 = vaddq_s32(v23, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v31), v21));
      v18 = vaddq_s32(v18, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v31.i8), v21));
      v29 = vaddq_s32(v29, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v35), v21));
      v28 = vaddq_s32(v28, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v35.i8), v21));
      v27 = vaddq_s32(v27, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v34), v21));
      v26 = vaddq_s32(v26, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v34.i8), v21));
      v20 += 2;
      v22 -= 32;
    }
    while (v22);
    v16 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v26, v18), vaddq_s32(v28, v24)), vaddq_s32(vaddq_s32(v27, v23), vaddq_s32(v29, v25))));
    if (v15 == a2)
      goto LABEL_26;
    if ((a2 & 0x18) == 0)
      goto LABEL_22;
  }
  else
  {
    v16 = 0;
    v15 = 0;
  }
  v36 = v15;
  v15 = a2 & 0xFFFFFFF8;
  v37 = 0uLL;
  v38 = (int32x4_t)v16;
  v39 = (int8x8_t *)&v8->i8[v36];
  v40 = v36 - v15;
  v41.i64[0] = 0x100000001;
  v41.i64[1] = 0x100000001;
  do
  {
    v42 = *v39++;
    v43 = vmovl_u8((uint8x8_t)vceq_s8(v42, (int8x8_t)-1));
    v37 = vaddq_s32(v37, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v43), v41));
    v38 = vaddq_s32(v38, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v43.i8), v41));
    v40 += 8;
  }
  while (v40);
  v16 = vaddvq_s32(vaddq_s32(v38, v37));
  if (v15 != a2)
  {
LABEL_22:
    v44 = a2 - v15;
    v45 = &v8->u8[v15];
    do
    {
      v46 = *v45++;
      if (v46 == 255)
        ++v16;
      --v44;
    }
    while (v44);
  }
LABEL_26:
  v17 = 4 * v16;
LABEL_27:
  v47 = malloc_type_malloc(v17, 0x100004052888210uLL);
  v14 = v47;
  if (!*(_DWORD *)a1)
    goto LABEL_11;
  v48 = *(_QWORD *)(a1 + 32);
  if (v48 + v17 > *(_QWORD *)(a1 + 24))
    goto LABEL_5;
  memcpy(v47, (const void *)(*(_QWORD *)(a1 + 8) + v48), v17);
  *(_QWORD *)(a1 + 32) += v17;
  if (a2 >= 1 && *(_DWORD *)a1)
  {
    v49 = 0;
    v50 = a2;
    v51 = v8;
    do
    {
      while (1)
      {
        v54 = v51->u8[0];
        v51 = (int8x16_t *)((char *)v51 + 1);
        v53 = v54;
        if (v54 != 255)
          break;
        v52 = v14[v49++];
        *a3++ = v52;
        if (!--v50)
          goto LABEL_11;
      }
      *a3++ = v53 - v13;
      --v50;
    }
    while (v50);
  }
LABEL_11:
  free(v8);
  free(v14);
}

char *_mc_container_create_read(const char *a1, uint64_t a2, unint64_t a3, int a4)
{
  char *v8;
  char *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL4 v15;
  void *v16;
  unint64_t v17;
  uint64_t v18;
  int v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  char *v24;
  int v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  size_t v47;
  int64x2_t *v48;
  uint64_t v49;
  void *v50;
  unint64_t v51;
  void *v52;
  unint64_t v53;
  unsigned __int16 *v54;
  int v55;
  int *chapter_data;
  int *v57;
  int v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t i;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  unint64_t v67;
  __int16 v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  int v72;

  v8 = (char *)malloc_type_calloc(1uLL, 0x28uLL, 0x10E004059713692uLL);
  v9 = v8;
  if (a1)
    strncpy(v8, a1, 4uLL);
  v10 = malloc_type_calloc(1uLL, 0x28uLL, 0x1050040E984C859uLL);
  v11 = v10;
  *(_DWORD *)v10 = 1;
  v10[1] = a2;
  v10[3] = a3;
  if (a3)
  {
    *(_DWORD *)v10 = a2 != 0;
    if (!a2)
      goto LABEL_7;
  }
  v12 = v10[4];
  v13 = v12 + 4;
  if (v12 + 4 > a3
    || (v72 = *(_DWORD *)(a2 + v12), v10[4] = v13, v14 = v12 + 6, v12 + 6 > a3)
    || (v20 = *(unsigned __int16 *)(a2 + v13), v10[4] = v14, v72 != *(_DWORD *)v9)
    || v20)
  {
LABEL_7:
    *(_DWORD *)v10 = 0;
    v15 = 1;
    v16 = (void *)v10[2];
    if (!v16)
      goto LABEL_9;
    goto LABEL_8;
  }
  v21 = v12 + 8;
  if (v21 <= a3)
  {
    v22 = *(unsigned __int16 *)(a2 + v14);
    v10[4] = v21;
  }
  else
  {
    v22 = 0;
    *(_DWORD *)v10 = 0;
  }
  v23 = v22;
  v24 = (char *)malloc_type_calloc(v22, 0x28uLL, 0x10C00403928CA3CuLL);
  *((_QWORD *)v9 + 1) = v24;
  *((_QWORD *)v9 + 2) = v22;
  if (v22)
  {
    if (a4)
    {
      v25 = *(_DWORD *)v11;
      v26 = v24 + 16;
      v27 = v22;
      while (v25)
      {
        v29 = v11[3];
        v28 = v11[4];
        v30 = v28 + 2;
        if (v28 + 2 > v29)
          break;
        v31 = v11[1];
        v32 = *(_WORD *)(v31 + v28);
        v11[4] = v30;
        v33 = v28 + 6;
        if (v28 + 6 > v29)
          break;
        v34 = *(unsigned int *)(v31 + v30);
        v11[4] = v33;
        v35 = v28 + 10;
        if (v35 > v11[3])
          break;
        v36 = *(_DWORD *)(v11[1] + v33);
        v11[4] = v35;
        if (!v36)
          break;
        *((_WORD *)v26 - 8) = v32;
        *((_DWORD *)v26 + 4) = v36;
        *(_QWORD *)v26 = v11[1] + v34;
        *((_QWORD *)v26 + 1) = 0;
        *((_DWORD *)v26 - 3) = -404232217;
        *((_WORD *)v26 - 4) = 0;
        v26 += 40;
        if (!--v27)
          goto LABEL_46;
      }
    }
    else
    {
      v37 = 0;
      v71 = 40 * v22;
      while (*(_DWORD *)v11)
      {
        v39 = v11[3];
        v38 = v11[4];
        v40 = v38 + 2;
        if (v38 + 2 > v39)
          break;
        v41 = *((_QWORD *)v9 + 1);
        v42 = v11[1];
        v43 = *(_WORD *)(v42 + v38);
        v11[4] = v40;
        v44 = v38 + 6;
        if (v38 + 6 > v39)
          break;
        v45 = *(unsigned int *)(v42 + v40);
        v11[4] = v44;
        v46 = v38 + 10;
        if (v46 > v11[3])
          break;
        v47 = *(unsigned int *)(v11[1] + v44);
        v11[4] = v46;
        if (!(_DWORD)v47)
          break;
        v48 = (int64x2_t *)(v41 + v37);
        v48->i16[0] = v43;
        v48[2].i32[0] = v47;
        v49 = v11[1];
        v50 = malloc_type_malloc(v47, 0x505EE921uLL);
        v51 = (unint64_t)v50;
        if (v50)
          memcpy(v50, (const void *)(v49 + v45), v47);
        v48[1] = vdupq_n_s64(v51);
        v48->i32[1] = -404232217;
        v48->i16[4] = 0;
        v37 += 40;
        if (v71 == v37)
        {
          v23 = *((_QWORD *)v9 + 2);
LABEL_46:
          if (v23)
          {
            v53 = 0;
            v54 = (unsigned __int16 *)*((_QWORD *)v9 + 1);
            while (1)
            {
              v55 = *v54;
              v54 += 20;
              if (!v55)
                break;
              if (v23 == ++v53)
                goto LABEL_68;
            }
            chapter_data = (int *)mc_container_get_chapter_data((uint64_t)v9, v53, 0);
            if (chapter_data)
            {
              v57 = chapter_data;
              v58 = *chapter_data;
              if (*chapter_data)
              {
                v59 = *((_QWORD *)chapter_data + 4) + 2;
                if (v59 <= *((_QWORD *)chapter_data + 3))
                {
                  *((_QWORD *)chapter_data + 4) = v59;
                }
                else
                {
                  v58 = 0;
                  *chapter_data = 0;
                }
              }
              v60 = *((_QWORD *)v9 + 2);
              if (v60)
              {
                v61 = 0;
                for (i = 0; i < v60; ++i)
                {
                  if (v53 != i)
                  {
                    if (!v58)
                      break;
                    v63 = *((_QWORD *)chapter_data + 4);
                    v64 = v63 + 4;
                    if ((unint64_t)(v63 + 4) > *((_QWORD *)chapter_data + 3)
                      || (v65 = *((_QWORD *)v9 + 1),
                          v66 = *(_DWORD *)(*((_QWORD *)chapter_data + 1) + v63),
                          *((_QWORD *)chapter_data + 4) = v64,
                          v67 = v63 + 6,
                          v67 > *((_QWORD *)chapter_data + 3)))
                    {
                      *chapter_data = 0;
                      break;
                    }
                    v68 = *(_WORD *)(*((_QWORD *)chapter_data + 1) + v64);
                    *((_QWORD *)chapter_data + 4) = v67;
                    v69 = v65 + v61;
                    *(_DWORD *)(v69 + 4) = v66;
                    *(_WORD *)(v69 + 8) = v68;
                  }
                  v61 += 40;
                }
              }
              v70 = (void *)*((_QWORD *)chapter_data + 2);
              if (v70)
                free(v70);
              free(v57);
            }
          }
          goto LABEL_68;
        }
      }
    }
    *(_DWORD *)v11 = 0;
    v52 = (void *)v11[2];
    if (v52)
      free(v52);
    free(v11);
    if (!*((_QWORD *)v9 + 2))
      goto LABEL_14;
    goto LABEL_12;
  }
LABEL_68:
  v15 = *(_DWORD *)v11 == 0;
  v16 = (void *)v11[2];
  if (v16)
LABEL_8:
    free(v16);
LABEL_9:
  free(v11);
  if (!v15)
  {
    *((_QWORD *)v9 + 3) = a2;
    *((_QWORD *)v9 + 4) = a3;
    return v9;
  }
  if (v9)
  {
    if (!*((_QWORD *)v9 + 2))
    {
LABEL_14:
      free(*((void **)v9 + 1));
      free(v9);
      return 0;
    }
LABEL_12:
    v17 = 0;
    v18 = 24;
    do
    {
      free(*(void **)(*((_QWORD *)v9 + 1) + v18));
      ++v17;
      v18 += 40;
    }
    while (*((_QWORD *)v9 + 2) > v17);
    goto LABEL_14;
  }
  return v9;
}

char *mc_container_create_read_no_copy(const char *a1, uint64_t a2, unint64_t a3)
{
  return _mc_container_create_read(a1, a2, a3, 1);
}

void mc_container_free(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;

  if (a1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      v2 = 0;
      v3 = 24;
      do
      {
        free(*(void **)(*(_QWORD *)(a1 + 8) + v3));
        ++v2;
        v3 += 40;
      }
      while (*(_QWORD *)(a1 + 16) > v2);
    }
    free(*(void **)(a1 + 8));
    free((void *)a1);
  }
}

uint64_t mc_container_chapter_count(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t mc_container_get_chapter_info(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  if (*(_QWORD *)(a1 + 16) <= a2)
    return 0;
  v3 = *(_QWORD *)(a1 + 8) + 40 * a2;
  v4 = *(_QWORD *)v3;
  *(_DWORD *)(a3 + 8) = *(_DWORD *)(v3 + 8);
  *(_QWORD *)a3 = v4;
  return 1;
}

void *mc_container_get_chapter_data(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unsigned int *v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  size_t v18;
  size_t v19;
  size_t v20;
  unint64_t v21;
  void *v22;
  void *v23;
  int v24;
  uLong v25;
  unint64_t v26;
  size_t v27;
  size_t v28;
  size_t v29;
  unint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  Bytef *v35;
  const Bytef *v36;
  size_t v37;
  uint8_t *v38;
  size_t v39;
  const uint8_t *v40;
  size_t v41;
  compression_algorithm v42;
  void *v43;
  uLongf destLen;

  if (*(_QWORD *)(a1 + 16) <= a2)
    return 0;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = a3;
  if (!a3)
  {
    v6 = malloc_type_calloc(1uLL, 0x28uLL, 0x1050040E984C859uLL);
    *(_DWORD *)v6 = 1;
  }
  v7 = v5 + 40 * a2;
  v10 = *(_DWORD *)(v7 + 32);
  v8 = (unsigned int *)(v7 + 32);
  v9 = v10;
  v11 = *((_QWORD *)v8 - 2);
  v12 = malloc_type_calloc(1uLL, 0x28uLL, 0x1050040E984C859uLL);
  v13 = v12;
  *(_DWORD *)v12 = 1;
  v12[1] = v11;
  v12[3] = v10;
  if (v10)
  {
    *(_DWORD *)v12 = v11 != 0;
    if (!v11)
      goto LABEL_8;
  }
  v14 = v12[4];
  v15 = v14 + 1;
  if (v14 + 1 > v9)
  {
    *(_DWORD *)v12 = 0;
LABEL_8:
    v16 = *v8;
LABEL_9:
    v17 = v16 - 1;
    if (!*(_DWORD *)v6)
      goto LABEL_29;
    *((_QWORD *)v6 + 4) = 0;
    v18 = *((_QWORD *)v6 + 3);
    if (v18 >= v17)
      goto LABEL_29;
    v19 = v18 + (v18 >> 1);
    if (v19 <= v17)
      v19 = v16 - 1;
    v20 = v19 + 1023;
    v21 = v20 & 0xFFFFFFFFFFFFFC00;
    v22 = (void *)*((_QWORD *)v6 + 2);
    if (v22)
    {
      v23 = malloc_type_realloc(v22, v20 & 0xFFFFFFFFFFFFFC00, 0xD2411D13uLL);
      if (v23)
      {
LABEL_15:
        *((_QWORD *)v6 + 1) = v23;
        *((_QWORD *)v6 + 2) = v23;
        *((_QWORD *)v6 + 3) = v21;
LABEL_29:
        memcpy(*((void **)v6 + 2), (const void *)(v13[1] + v13[4]), v17);
        goto LABEL_30;
      }
    }
    else
    {
      v23 = malloc_type_malloc(v20 & 0xFFFFFFFFFFFFFC00, 0x79F51818uLL);
      if (v23)
        goto LABEL_15;
    }
    *(_DWORD *)v6 = 0;
    goto LABEL_29;
  }
  v24 = *(unsigned __int8 *)(v11 + v14);
  v12[4] = v15;
  v16 = *v8;
  if (!v24)
    goto LABEL_9;
  v25 = v16 - 5;
  v26 = v14 + 5;
  if (v26 <= v9)
  {
    v17 = *(unsigned int *)(v11 + v15);
    v12[4] = v26;
    if (v25 > v17)
      goto LABEL_52;
  }
  else
  {
    v17 = 0;
    *(_DWORD *)v12 = 0;
    if (v16 != 5)
    {
LABEL_52:
      v43 = (void *)v13[2];
      if (v43)
        free(v43);
      free(v13);
      if (v6 != a3)
      {
        v34 = 0;
        v33 = (void *)*((_QWORD *)v6 + 2);
        v13 = v6;
        v6 = 0;
        if (!v33)
          goto LABEL_35;
        goto LABEL_34;
      }
      return 0;
    }
  }
  if (*(_DWORD *)v6)
  {
    *((_QWORD *)v6 + 4) = 0;
    v27 = *((_QWORD *)v6 + 3);
    if (v27 < v17)
    {
      v28 = v27 + (v27 >> 1);
      if (v28 <= v17)
        v28 = v17;
      v29 = v28 + 1023;
      v30 = v29 & 0xFFFFFFFFFFFFFC00;
      v31 = (void *)*((_QWORD *)v6 + 2);
      if (v31)
        v32 = malloc_type_realloc(v31, v29 & 0xFFFFFFFFFFFFFC00, 0xD2411D13uLL);
      else
        v32 = malloc_type_malloc(v29 & 0xFFFFFFFFFFFFFC00, 0x79F51818uLL);
      if (v32)
      {
        *((_QWORD *)v6 + 1) = v32;
        *((_QWORD *)v6 + 2) = v32;
        *((_QWORD *)v6 + 3) = v30;
      }
      else
      {
        *(_DWORD *)v6 = 0;
      }
    }
  }
  if (v24 == 3)
  {
    v38 = (uint8_t *)*((_QWORD *)v6 + 2);
    v39 = *((_QWORD *)v6 + 3);
    v40 = (const uint8_t *)(v13[1] + v13[4]);
    v41 = v25;
    v42 = COMPRESSION_LZFSE;
LABEL_50:
    v37 = compression_decode_buffer(v38, v39, v40, v41, 0, v42);
    goto LABEL_51;
  }
  if (v24 == 2)
  {
    v38 = (uint8_t *)*((_QWORD *)v6 + 2);
    v39 = *((_QWORD *)v6 + 3);
    v40 = (const uint8_t *)(v13[1] + v13[4]);
    v41 = v25;
    v42 = COMPRESSION_LZMA;
    goto LABEL_50;
  }
  if (v24 != 1)
    goto LABEL_52;
  v35 = (Bytef *)*((_QWORD *)v6 + 2);
  v36 = (const Bytef *)(v13[1] + v13[4]);
  destLen = *((_QWORD *)v6 + 3);
  if (uncompress(v35, &destLen, v36, v25))
    v37 = 0;
  else
    v37 = destLen;
LABEL_51:
  if (v37 != v17)
    goto LABEL_52;
LABEL_30:
  if (*(_DWORD *)v6)
  {
    if (*((_QWORD *)v6 + 3) < v17)
      v17 = *((_QWORD *)v6 + 4);
    *((_QWORD *)v6 + 3) = v17;
    *((_QWORD *)v6 + 4) = 0;
    v33 = (void *)v13[2];
    v34 = v6;
    if (!v33)
      goto LABEL_35;
  }
  else
  {
    *((_QWORD *)v6 + 3) = *((_QWORD *)v6 + 4);
    v33 = (void *)v13[2];
    v34 = v6;
    if (!v33)
      goto LABEL_35;
  }
LABEL_34:
  free(v33);
  v6 = v34;
LABEL_35:
  free(v13);
  return v6;
}

uint64_t mc_uv_predictor_apply_hints(uint64_t a1, int a2, __int128 *a3, uint64_t a4)
{
  __int128 *v5;
  uint64_t v8;
  int v9;
  int *v10;
  uint64_t v11;
  int v12;
  int v13;
  _QWORD *v14;
  _BYTE *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  unint64_t v24;
  float32x2_t *v30;
  float32_t v31;
  uint64_t v32;
  uint64_t v33;
  double *v34;
  uint64_t v35;
  float64x2_t v36;
  double v37;
  float *v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  float64x2_t v45;
  float32x2_t *v46;
  float32_t v47;
  uint64_t v48;
  uint64_t v49;
  float64x2_t v50;
  double v51;
  float *v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  float64x2_t v59;
  float32x2_t *v60;
  float32_t v61;
  uint64_t v62;
  float64x2_t v63;
  double v64;
  float *v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  float64x2_t v72;
  unint64_t v73;
  unint64_t v74;
  _DWORD *v75;
  float64x2_t v77;
  float64x2_t v78;
  double v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;

  v5 = a3;
  v89 = 0u;
  v90 = 0u;
  v87 = 0u;
  v88 = 0u;
  v85 = 0u;
  v86 = 0u;
  v83 = 0u;
  v84 = 0u;
  v81 = 0u;
  v82 = 0u;
  v8 = a2;
  v80 = 0u;
  if (a2 < 1)
  {
    v9 = 0;
  }
  else
  {
    v9 = 0;
    v10 = (int *)a3 + 1;
    v11 = a2;
    do
    {
      v13 = *v10;
      v10 += 44;
      v12 = v13;
      if (v13 >= v9)
        v9 = v12 + 1;
      --v11;
    }
    while (v11);
  }
  v14 = malloc_type_calloc(v9, 8uLL, 0x2004093837F09uLL);
  v15 = malloc_type_calloc(*(unsigned int *)(a1 + 136), 1uLL, 0x100004077774924uLL);
  if (a4)
  {
    if (a2 < 1)
      goto LABEL_18;
  }
  else
  {
    a4 = *(_QWORD *)(a1 + 152);
    if (a2 < 1)
      goto LABEL_18;
  }
  if (*((_DWORD *)v5 + 1) != -1)
  {
    while (1)
    {
      v16 = *((unsigned int *)v5 + 1);
      if ((v16 & 0x80000000) != 0 || (int)v16 >= v9)
        goto LABEL_50;
      v14[v16] = v5;
      v5 += 11;
      if (!--v8)
        goto LABEL_18;
    }
  }
  do
  {
    v17 = v5[9];
    v88 = v5[8];
    v89 = v17;
    v90 = v5[10];
    v18 = v5[5];
    v84 = v5[4];
    v85 = v18;
    v19 = v5[7];
    v86 = v5[6];
    v87 = v19;
    v20 = v5[1];
    v80 = *v5;
    v81 = v20;
    v22 = v5[2];
    v21 = v5[3];
    v5 += 11;
    v82 = v22;
    v83 = v21;
    --v8;
  }
  while (v8);
LABEL_18:
  if (*(_DWORD *)(a1 + 160))
  {
    v23 = 0;
    v24 = 0;
    __asm { FMOV            V0.2D, #0.5 }
    v77 = _Q0;
    do
    {
      v32 = *(_QWORD *)(a1 + 168);
      v33 = *(unsigned int *)(v32 + v23 + 12);
      v34 = (double *)&v80;
      if ((v33 & 0x80000000) == 0 && (int)v33 < v9)
        v34 = (double *)v14[v33];
      v35 = *(int *)(v32 + v23);
      v78 = 0uLL;
      v79 = 0.0;
      if (!v15[v35])
      {
        v15[v35] = 1;
        if (*(_DWORD *)v34 == 1)
        {
          v38 = (float *)(*(_QWORD *)(a1 + 144) + 12 * (int)v35);
          v39 = v38[1];
          v40 = *v38;
          v41 = v38[2];
          v42 = *(double *)(a1 + 80) * v39
              + *(double *)(a1 + 72) * v40
              + *(double *)(a1 + 96)
              + *(double *)(a1 + 88) * v41;
          v43 = *(double *)(a1 + 48) * v39
              + *(double *)(a1 + 40) * v40
              + *(double *)(a1 + 56) * v41
              + *(double *)(a1 + 64);
          v44 = *(double *)(a1 + 16) * v39
              + *(double *)(a1 + 8) * v40
              + *(double *)(a1 + 24) * v41
              + *(double *)(a1 + 32);
          if (!mc_projection_project(v34 + 17, (long double *)v78.f64, v44 * v34[1] + v34[2] * v43 + v34[3] * v42 + v34[4], v34[5] * v44 + v34[6] * v43 + v34[7] * v42 + v34[8], v34[9] * v44 + v34[10] * v43 + v34[11] * v42 + v34[12]))goto LABEL_32;
          v45 = vmulq_f64(v78, v77);
          *(_QWORD *)&v36.f64[0] = *(_OWORD *)&vaddq_f64(v45, v77);
          v36.f64[1] = vsubq_f64(v77, v45).f64[1];
          v37 = v79;
        }
        else
        {
          v36 = 0uLL;
          v37 = 0.0;
          if (!*(_DWORD *)v34)
            v37 = 1.0;
        }
        v46 = (float32x2_t *)(a4 + 12 * (int)v35);
        *v46 = vcvt_f32_f64(v36);
        v47 = v37;
        v46[1].f32[0] = v47;
      }
LABEL_32:
      v48 = v32 + v23;
      v49 = *(int *)(v48 + 4);
      v78 = 0uLL;
      v79 = 0.0;
      if (v15[v49])
        goto LABEL_39;
      v15[v49] = 1;
      if (*(_DWORD *)v34 == 1)
      {
        v52 = (float *)(*(_QWORD *)(a1 + 144) + 12 * (int)v49);
        v53 = v52[1];
        v54 = *v52;
        v55 = v52[2];
        v56 = *(double *)(a1 + 80) * v53
            + *(double *)(a1 + 72) * v54
            + *(double *)(a1 + 96)
            + *(double *)(a1 + 88) * v55;
        v57 = *(double *)(a1 + 48) * v53
            + *(double *)(a1 + 40) * v54
            + *(double *)(a1 + 56) * v55
            + *(double *)(a1 + 64);
        v58 = *(double *)(a1 + 16) * v53 + *(double *)(a1 + 8) * v54 + *(double *)(a1 + 24) * v55 + *(double *)(a1 + 32);
        if (!mc_projection_project(v34 + 17, (long double *)v78.f64, v58 * v34[1] + v34[2] * v57 + v34[3] * v56 + v34[4], v34[5] * v58 + v34[6] * v57 + v34[7] * v56 + v34[8], v34[9] * v58 + v34[10] * v57 + v34[11] * v56 + v34[12]))goto LABEL_39;
        v59 = vmulq_f64(v78, v77);
        *(_QWORD *)&v50.f64[0] = *(_OWORD *)&vaddq_f64(v59, v77);
        v50.f64[1] = vsubq_f64(v77, v59).f64[1];
        v51 = v79;
      }
      else
      {
        v50 = 0uLL;
        v51 = 0.0;
        if (!*(_DWORD *)v34)
          v51 = 1.0;
      }
      v60 = (float32x2_t *)(a4 + 12 * (int)v49);
      *v60 = vcvt_f32_f64(v50);
      v61 = v51;
      v60[1].f32[0] = v61;
LABEL_39:
      v62 = *(int *)(v48 + 8);
      v78 = 0uLL;
      v79 = 0.0;
      if (!v15[v62])
      {
        v15[v62] = 1;
        if (*(_DWORD *)v34 == 1)
        {
          v65 = (float *)(*(_QWORD *)(a1 + 144) + 12 * (int)v62);
          v66 = v65[1];
          v67 = *v65;
          v68 = v65[2];
          v69 = *(double *)(a1 + 80) * v66
              + *(double *)(a1 + 72) * v67
              + *(double *)(a1 + 96)
              + *(double *)(a1 + 88) * v68;
          v70 = *(double *)(a1 + 48) * v66
              + *(double *)(a1 + 40) * v67
              + *(double *)(a1 + 56) * v68
              + *(double *)(a1 + 64);
          v71 = *(double *)(a1 + 16) * v66
              + *(double *)(a1 + 8) * v67
              + *(double *)(a1 + 24) * v68
              + *(double *)(a1 + 32);
          if (!mc_projection_project(v34 + 17, (long double *)v78.f64, v71 * v34[1] + v34[2] * v70 + v34[3] * v69 + v34[4], v34[5] * v71 + v34[6] * v70 + v34[7] * v69 + v34[8], v34[9] * v71 + v34[10] * v70 + v34[11] * v69 + v34[12]))goto LABEL_21;
          v72 = vmulq_f64(v78, v77);
          *(_QWORD *)&v63.f64[0] = *(_OWORD *)&vaddq_f64(v72, v77);
          v63.f64[1] = vsubq_f64(v77, v72).f64[1];
          v64 = v79;
        }
        else
        {
          v63 = 0uLL;
          v64 = 0.0;
          if (!*(_DWORD *)v34)
            v64 = 1.0;
        }
        v30 = (float32x2_t *)(a4 + 12 * (int)v62);
        *v30 = vcvt_f32_f64(v63);
        v31 = v64;
        v30[1].f32[0] = v31;
      }
LABEL_21:
      ++v24;
      v23 += 16;
    }
    while (v24 < *(unsigned int *)(a1 + 160));
  }
  v73 = *(unsigned int *)(a1 + 136);
  if ((_DWORD)v73)
  {
    v74 = 0;
    v75 = (_DWORD *)(a4 + 8);
    do
    {
      if (!v15[v74])
      {
        v15[v74] = 1;
        *((_QWORD *)v75 - 1) = 0;
        *v75 = 1065353216;
        v73 = *(unsigned int *)(a1 + 136);
      }
      ++v74;
      v75 += 3;
    }
    while (v74 < v73);
  }
LABEL_50:
  free(v15);
  free(v14);
  return 1;
}

BOOL mc_projection_project(double *a1, long double *a2, long double a3, long double a4, long double a5)
{
  int v8;
  _BOOL8 result;
  double v10;
  double v11;
  long double v12;

  v8 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 == 3)
  {
    result = a5 > 0.0;
    *a2 = a1[1] * a3;
    v10 = a1[2] * a4;
    goto LABEL_6;
  }
  if (v8 == 1)
  {
    v11 = a5 * a5 + a3 * a3;
    v12 = a1[3] + a1[1] * atan2(a3, a5);
    *a2 = v12;
    *a2 = v12 - floor((v12 + a1[1] * 3.14159265) / (a1[1] * 6.28318531)) * (a1[1] * 6.28318531);
    a2[1] = a1[4] + a1[2] * atan2(a4, sqrt(v11));
    a5 = sqrt(v11 + a4 * a4);
    result = 1;
    goto LABEL_8;
  }
  if (!v8)
  {
    result = a5 > 0.0;
    *a2 = a1[1] * a3 / a5;
    v10 = a1[2] * a4 / a5;
LABEL_6:
    a2[1] = v10;
LABEL_8:
    a2[2] = 1.0 / a5;
    return result;
  }
  return 0;
}

uint64_t mc_camera_unproject(uint64_t a1, float64x2_t *a2, double a3, double a4, double a5)
{
  int v7;
  double v8;
  double v9;
  double v10;
  double v12;
  double v13;
  __double2 v14;
  double v15;
  __double2 v16;
  double v17;
  double v18;
  double v19;
  double v20;

  v7 = *(_DWORD *)(a1 + 128);
  if (v7 == 3)
  {
    v9 = a3 / *(double *)(a1 + 136);
    v10 = a4 / *(double *)(a1 + 144);
    v8 = 1.0 / a5;
    if (a5 <= 0.0)
      return 0;
  }
  else
  {
    if (v7 != 1)
    {
      if (!v7)
      {
        v8 = 1.0 / a5;
        v9 = 1.0 / a5 * a3 / *(double *)(a1 + 136);
        v10 = 1.0 / a5 * a4 / *(double *)(a1 + 144);
        if (a5 > 0.0)
          goto LABEL_9;
      }
      return 0;
    }
    v12 = 1.0 / a5;
    v13 = (a3 - *(double *)(a1 + 152)) / *(double *)(a1 + 136);
    v14 = __sincos_stret((a4 - *(double *)(a1 + 160)) / *(double *)(a1 + 144));
    v10 = v14.__sinval * v12;
    v15 = v14.__cosval * v12;
    v16 = __sincos_stret(v13);
    v9 = v15 * v16.__sinval;
    v8 = v15 * v16.__cosval;
  }
LABEL_9:
  v17 = v9 - *(double *)(a1 + 24);
  v18 = v10 - *(double *)(a1 + 56);
  v19 = v8 - *(double *)(a1 + 88);
  v20 = v17 * *(double *)(a1 + 16) + v18 * *(double *)(a1 + 48) + v19 * *(double *)(a1 + 80);
  *a2 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)a1, v17), *(float64x2_t *)(a1 + 32), v18), *(float64x2_t *)(a1 + 64), v19);
  a2[1].f64[0] = v20;
  return 1;
}

BOOL lzma_decompress_bytes()
{
  _BOOL8 v0;

  v0 = 0;
  if (!lzma_auto_decoder())
  {
    v0 = lzma_code() < 2;
    lzma_end();
  }
  return v0;
}

char *m3d_eb_calc_decode_table_portable(uint64_t a1)
{
  char *result;
  char *v3;
  _QWORD *v4;

  result = calcHuffmanEncodeTableInt(*(_DWORD *)a1, *(_DWORD *)(a1 + 4), *(_DWORD *)(a1 + 8), *(unsigned __int16 *)(a1 + 12));
  if (result)
  {
    v3 = result;
    v4 = calcHuffmanDecodeTable((uint64_t)result, *(unsigned __int16 *)(a1 + 12));
    free(v3);
    return (char *)v4;
  }
  return result;
}

void m3d_eb_free_decode_table_portable(void **a1)
{
  void *v2;
  void **v3;
  void *v4;

  v2 = *a1;
  if (v2)
  {
    v3 = a1 + 1;
    do
    {
      free(v2);
      v4 = *v3++;
      v2 = v4;
    }
    while (v4);
  }
  free(a1);
}

uint64_t m3d_eb_submesh_info_portable(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  if (a3)
    *a3 = *(_BYTE *)a1;
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 1);
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(a1 + 5);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + 9);
  *(_WORD *)(a2 + 12) = *(_WORD *)(a1 + 13);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(a1 + 15);
  *(_DWORD *)(a2 + 20) = *(_DWORD *)(a1 + 19);
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(a1 + 23);
  *(_WORD *)(a2 + 28) = *(_WORD *)(a1 + 27);
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 29);
  *(_DWORD *)(a2 + 36) = *(_DWORD *)(a1 + 33);
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a1 + 37);
  *(_DWORD *)(a2 + 44) = *(_DWORD *)(a1 + 41);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 45);
  return 1;
}

uint64_t m3d_eb_decompress_portable(uint64_t a1, _DWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _DWORD *a7, int *a8, int32x4_t *a9, uint64_t a10, uint64_t a11, unsigned __int8 a12)
{
  uint64_t v17;
  unsigned int *v18;
  float *v19;
  float *v20;
  _DWORD *v21;
  int *v22;
  int *v23;
  int *v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  int *v33;
  _DWORD *v34;
  uint64_t v35;
  int v36;
  BOOL v37;
  int v38;
  uint64_t v39;
  int v40;
  float *v41;
  uint64_t v42;
  _DWORD *v43;
  unsigned int *v44;
  int *v45;
  _WORD *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  __int32 *v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  unsigned int *v59;
  int *v60;
  _WORD *v61;
  _WORD *v62;
  int v63;
  unsigned int v64;
  int v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v71;
  unint64_t v72;
  __int32 *v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  int v79;
  uint64_t v80;
  unsigned int *v81;
  int *v82;
  _WORD *v83;
  int v84;
  unsigned int v85;
  int v86;
  uint64_t v87;
  __int32 *v88;
  int v89;
  _DWORD *v90;
  uint64_t v91;
  int *v92;
  void *v93;
  void *v94;
  unsigned int *v95;
  int *v96;
  void *v97;
  int v98;
  uint64_t v99;
  float *v100;
  float *v101;
  void *v102[2];
  void *v103[2];
  void *v104[2];
  void *v105[2];
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;

  v110 = 0;
  v108 = 0u;
  v109 = 0u;
  v106 = 0u;
  v107 = 0u;
  *(_OWORD *)v104 = 0u;
  *(_OWORD *)v105 = 0u;
  *(_OWORD *)v102 = 0u;
  *(_OWORD *)v103 = 0u;
  v100 = 0;
  v101 = 0;
  v99 = 0;
  v98 = 0;
  v96 = 0;
  v97 = 0;
  v94 = 0;
  v95 = 0;
  v93 = 0;
  if (!m3d_eb_decompress_ppred_buf_portable(a1, a2[11], a3, a4, (uint64_t)v102, a12)
    || ppred_decompress(&v101, (unsigned int *)&v99 + 1, &v100, (unsigned int *)&v99, (uint64_t *)&v97, &v96, &v95, &v94, &v93, &v98, (uint64_t)v102))
  {
    goto LABEL_46;
  }
  v17 = v99;
  if ((_DWORD)v99 != a2[8] || (v18 = a2 + 9, v98 != a2[9]))
  {
    ppred_decompress_free(v101, v100, v97, v96, v95, v94, v93);
LABEL_46:
    free(v102[0]);
    free(v102[1]);
    free(v103[0]);
    free(v103[1]);
    free(v104[0]);
    free(v104[1]);
    free(v105[0]);
    free(v105[1]);
    free((void *)v106);
    free(*((void **)&v106 + 1));
    free((void *)v107);
    return 0;
  }
  v90 = a7;
  v91 = (uint64_t)a2;
  v92 = a8;
  v19 = v100;
  v20 = v101;
  v21 = v93;
  v23 = v96;
  v22 = (int *)v97;
  v88 = (__int32 *)v18;
  v89 = v98;
  v24 = (int *)malloc_type_malloc(4 * (int)v99, 0x100004052888210uLL);
  v25 = malloc_type_malloc(4 * (int)v17, 0x100004052888210uLL);
  bzero(v24, 4 * (int)v17);
  LODWORD(v26) = 3 * v89;
  if (v89 >= 1)
  {
    if ((int)v26 <= 1)
      v27 = 1;
    else
      v27 = v26;
    v28 = v23;
    do
    {
      v30 = *v22++;
      v29 = v30;
      v31 = *v28++;
      v24[v31] = v29;
      --v27;
    }
    while (v27);
  }
  if ((int)v17 >= 1)
  {
    v32 = 0;
    v33 = v24;
    v34 = v25;
    v35 = v17;
    do
    {
      v36 = v21[*v33];
      v37 = v36 == 0;
      if (v36)
        v38 = v17 - 1;
      else
        v38 = v32;
      if (v37)
        ++v32;
      else
        LODWORD(v17) = v17 - 1;
      *v34++ = v38;
      v39 = a5 + 32 * v38;
      v40 = *v33++;
      v41 = &v20[3 * v40];
      *(_QWORD *)v39 = *(_QWORD *)v41;
      *(float *)(v39 + 8) = v41[2];
      *(_DWORD *)(v39 + 12) = 1065353216;
      v42 = *(_QWORD *)v19;
      v19 += 2;
      *(_QWORD *)(v39 + 16) = v42;
      --v35;
    }
    while (v35);
  }
  *v90 = v17;
  if (v89 >= 1)
  {
    if ((int)v26 <= 1)
      v26 = 1;
    else
      v26 = v26;
    do
    {
      *v23 = v25[*v23];
      ++v23;
      --v26;
    }
    while (v26);
  }
  free(v24);
  free(v25);
  v44 = v95;
  v43 = v96;
  v45 = (int *)v94;
  v46 = (_WORD *)v107;
  if (fill_index_ptr_material(a9, v92, v91, (uint64_t)v95))
  {
    LODWORD(v47) = *(_DWORD *)(v91 + 40);
    if ((_DWORD)v47)
    {
      if (a11 && v46)
      {
        v48 = 0;
        LODWORD(v49) = *(_DWORD *)(v91 + 40);
        do
        {
          v50 = v48 + 1;
          if (v48 >= (v49 - 1))
            v51 = v88;
          else
            v51 = &a9->i32[v48 + 1];
          v52 = 3 * *v51;
          v53 = *v88;
          if ((_DWORD)v53)
          {
            v54 = 0;
            v55 = 0;
            v56 = 3 * a9->i32[v48];
            v57 = v92[v48];
            v58 = 3 * v53;
            v59 = v44;
            v60 = v45;
            v61 = v46;
            do
            {
              v66 = *v59++;
              if (v57 == v66)
              {
                v67 = *v60;
                if (*v60)
                {
                  v68 = a6 + 2 * v52;
                  *(_WORD *)(v68 - 2) = v43[(v54 + 2)];
                  *(_WORD *)(v68 - 4) = v43[(v54 + 1)];
                  v63 = v52 - 3;
                  v64 = v54;
                  v52 -= 3;
                }
                else
                {
                  v62 = (_WORD *)(a6 + 2 * v56);
                  *v62 = v43[v54];
                  v63 = v56 + 2;
                  v62[1] = v43[(v54 + 1)];
                  v64 = 3 * v55 + 2;
                  v56 += 3;
                }
                *(_WORD *)(a6 + 2 * v63) = v43[v64];
                if (v67)
                  v65 = v52;
                else
                  v65 = v56 - 1;
                *(_WORD *)(a11 + 2 * (v65 / 3)) = *v61;
              }
              ++v55;
              v54 += 3;
              ++v61;
              ++v60;
            }
            while (v58 != v54);
          }
          *(_DWORD *)(a10 + 4 * v48) = v52 / 3;
          v49 = *(unsigned int *)(v91 + 40);
          ++v48;
        }
        while (v50 < v49);
      }
      else
      {
        v71 = 0;
        do
        {
          v72 = v71 + 1;
          if (v71 >= (v47 - 1))
            v73 = v88;
          else
            v73 = &a9->i32[v71 + 1];
          v74 = 3 * *v73;
          v75 = *v88;
          if ((_DWORD)v75)
          {
            v76 = 0;
            v77 = 0;
            v78 = 3 * a9->i32[v71];
            v79 = v92[v71];
            v80 = 3 * v75;
            v81 = v44;
            v82 = v45;
            do
            {
              v86 = *v81++;
              if (v79 == v86)
              {
                if (*v82)
                {
                  v87 = a6 + 2 * v74;
                  *(_WORD *)(v87 - 2) = v43[(v76 + 2)];
                  *(_WORD *)(v87 - 4) = v43[(v76 + 1)];
                  v84 = v74 - 3;
                  v85 = v76;
                  v74 -= 3;
                }
                else
                {
                  v83 = (_WORD *)(a6 + 2 * v78);
                  *v83 = v43[v76];
                  v84 = v78 + 2;
                  v83[1] = v43[(v76 + 1)];
                  v85 = 3 * v77 + 2;
                  v78 += 3;
                }
                *(_WORD *)(a6 + 2 * v84) = v43[v85];
              }
              ++v77;
              v76 += 3;
              ++v82;
            }
            while (v80 != v76);
          }
          *(_DWORD *)(a10 + 4 * v71) = v74 / 3;
          v47 = *(unsigned int *)(v91 + 40);
          ++v71;
        }
        while (v72 < v47);
      }
    }
    v69 = 1;
  }
  else
  {
    v69 = 0;
  }
  ppred_decompress_free(v101, v100, v97, v43, v44, v45, v93);
  free(v102[0]);
  free(v102[1]);
  free(v103[0]);
  free(v103[1]);
  free(v104[0]);
  free(v104[1]);
  free(v105[0]);
  free(v105[1]);
  free((void *)v106);
  free(*((void **)&v106 + 1));
  free((void *)v107);
  return v69;
}

uint64_t m3d_eb_decompress_ppred_buf_portable(uint64_t a1, unsigned int a2, uint64_t *a3, uint64_t *a4, uint64_t a5, int a6)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned int v13;
  size_t v14;
  int v15;
  void *v16;
  unsigned int v17;
  uint64_t *v18;
  void *v19;

  v7 = 0;
  if (a6 == 3)
    v8 = 11;
  else
    v8 = 10;
  v9 = a1 + a2;
  v10 = 12 * v8;
  v11 = 8 * v8;
  v12 = (unsigned __int8 *)(v9 + 8);
  do
  {
    v13 = *((_DWORD *)v12 - 2);
    v14 = *((unsigned int *)v12 - 1);
    v15 = *v12;
    v16 = malloc_type_malloc(v13 + 3, 0x3DEBD094uLL);
    *(_QWORD *)(a5 + v7) = v16;
    if (v15 == 3)
    {
      if (v7 == 56)
        v18 = a4;
      else
        v18 = a3;
      if (!v18)
        return 0;
      v19 = malloc_type_malloc((v14 + 3), 0x3FD9726uLL);
      memcpy(v19, (const void *)(v9 + v10), v14);
      huffmanDecode((unsigned int *)v19, v14, *(_WORD **)(a5 + v7), v13 >> 1, v18);
      free(v19);
    }
    else if (v15 == 1)
    {
      if (lzma_auto_decoder())
        return 0;
      v17 = lzma_code();
      lzma_end();
      if (v17 >= 2)
        return 0;
    }
    else
    {
      if (v15)
        return 0;
      memcpy(v16, (const void *)(v9 + v10), v14);
    }
    v12 += 12;
    v10 += v14;
    v7 += 8;
  }
  while (v11 != v7);
  return 1;
}

uint64_t m3d_eb_decompress_portable2(uint64_t a1, _DWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, int *a6, int32x4_t *a7, int a8)
{
  void *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  int *v18;
  int v19;
  uint64_t v20;
  int v21;
  const void *v22;
  size_t v23;
  void *v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  unsigned int *v28;
  unint64_t v29;
  unsigned int v30;
  void *v31;
  uint64_t v32;
  float *v34;
  float *v35;
  char *v36;
  char *v37;
  unsigned int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  unsigned int *v46;
  int *v47;
  int v48;
  float v49;
  uint64_t v50;
  uint64_t v51;
  float *v52;
  uint64_t v53;
  float *v54;
  uint64_t v55;
  float *v56;
  uint64_t v57;
  unsigned int v58;
  void *v59;
  void *v60;
  unsigned int *v61;
  char *v62;
  char *v63;
  unsigned int v64;
  uint64_t v65;
  float *v66;
  float *v67;
  void *v68[2];
  void *v69[2];
  void *v70[2];
  void *v71[2];
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;

  v76 = 0;
  v74 = 0u;
  v75 = 0u;
  v72 = 0u;
  v73 = 0u;
  *(_OWORD *)v70 = 0u;
  *(_OWORD *)v71 = 0u;
  *(_OWORD *)v68 = 0u;
  *(_OWORD *)v69 = 0u;
  v66 = 0;
  v67 = 0;
  v65 = 0;
  v64 = 0;
  v62 = 0;
  v63 = 0;
  v60 = 0;
  v61 = 0;
  v59 = 0;
  if (!m3d_eb_decompress_ppred_buf_portable(a1, a2[11], a3, a4, (uint64_t)v68, a8)
    || ppred_decompress(&v67, (unsigned int *)&v65 + 1, &v66, (unsigned int *)&v65, (uint64_t *)&v63, &v62, &v61, &v60, &v59, (int *)&v64, (uint64_t)v68))
  {
    goto LABEL_20;
  }
  if ((_DWORD)v65 != a2[8] || v64 != a2[9])
  {
    ppred_decompress_free(v67, v66, v63, v62, v61, v60, v59);
LABEL_20:
    free(v68[0]);
    free(v68[1]);
    free(v69[0]);
    free(v69[1]);
    free(v70[0]);
    free(v70[1]);
    free(v71[0]);
    free(v71[1]);
    free((void *)v72);
    free(*((void **)&v72 + 1));
    v31 = (void *)v73;
LABEL_21:
    free(v31);
    return 0;
  }
  v14 = malloc_type_malloc(4 * v64, 0x100004052888210uLL);
  if (a8 == 3)
    v15 = 11;
  else
    v15 = 10;
  v16 = 12 * v15;
  v17 = a1 + a2[11];
  v18 = (int *)(v17 + 4);
  do
  {
    v19 = *v18;
    v18 += 3;
    v16 += v19;
    --v15;
  }
  while (v15);
  if (v16 >= a2[12] || (v20 = v17 + v16, *(_BYTE *)v20 != 69) || *(_BYTE *)(v20 + 1) != 66 || *(_BYTE *)(v20 + 2) != 70)
  {
    ppred_decompress_free(v67, v66, v63, v62, v61, v60, v59);
    free(v68[0]);
    free(v68[1]);
    free(v69[0]);
    free(v69[1]);
    free(v70[0]);
    free(v70[1]);
    free(v71[0]);
    free(v71[1]);
    free((void *)v72);
    free(*((void **)&v72 + 1));
    free((void *)v73);
    v31 = v14;
    goto LABEL_21;
  }
  v58 = *(unsigned __int16 *)(v20 + 3);
  v21 = *(unsigned __int8 *)(v20 + 5);
  v22 = (const void *)(v20 + 6);
  v23 = (a2[9] * v21 + 7) >> 3;
  v24 = malloc_type_malloc(v23 + 3, 0xE2804C07uLL);
  memcpy(v24, v22, v23);
  if (a2[9])
  {
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = (unsigned int *)v24;
    do
    {
      if (v27 < v21)
      {
        v30 = *v28++;
        v26 |= (unint64_t)bswap32(v30) << (32 - v27);
        v27 += 32;
      }
      v29 = v26 >> (64 - v21);
      v27 -= v21;
      v26 <<= v21;
      *((_DWORD *)v14 + v25++) = v29;
    }
    while (v25 < a2[9]);
  }
  free(v24);
  v35 = v66;
  v34 = v67;
  v37 = v62;
  v36 = v63;
  v38 = v61;
  if (fill_index_ptr_material(a7, a6, (uint64_t)a2, (uint64_t)v61))
  {
    v39 = a2[10];
    if ((_DWORD)v39)
    {
      v40 = a2[9];
      if ((_DWORD)v40)
      {
        v41 = 0;
        v42 = 0;
        v43 = 3 * v40;
        do
        {
          v44 = 0;
          v45 = a6[v41];
          v46 = v38;
          v47 = (int *)v14;
          do
          {
            v48 = *v46++;
            if (v45 == v48)
            {
              v49 = (float)((float)*v47 + 0.5) * (float)(1.0 / (float)v58);
              v50 = 4 * v44;
              v51 = *(int *)&v37[v50];
              v52 = &v34[3 * *(int *)&v36[v50]];
              v53 = a5 + 32 * v42;
              *(_QWORD *)v53 = *(_QWORD *)v52;
              *(float *)(v53 + 8) = v52[2];
              *(_DWORD *)(v53 + 12) = 1065353216;
              *(_QWORD *)(v53 + 16) = *(_QWORD *)&v35[2 * v51];
              *(float *)(v53 + 24) = v49;
              v54 = &v34[3 * *(int *)&v36[v50 + 4]];
              v55 = *(int *)&v37[v50 + 4];
              *(_QWORD *)(v53 + 32) = *(_QWORD *)v54;
              *(float *)(v53 + 40) = v54[2];
              *(_DWORD *)(v53 + 44) = 1065353216;
              *(_QWORD *)(v53 + 48) = *(_QWORD *)&v35[2 * v55];
              *(float *)(v53 + 56) = v49;
              v50 += 8;
              v56 = &v34[3 * *(int *)&v36[v50]];
              v57 = *(int *)&v37[v50];
              v42 += 3;
              *(_QWORD *)(v53 + 64) = *(_QWORD *)v56;
              *(float *)(v53 + 72) = v56[2];
              *(_DWORD *)(v53 + 76) = 1065353216;
              *(_QWORD *)(v53 + 80) = *(_QWORD *)&v35[2 * v57];
              *(float *)(v53 + 88) = v49;
            }
            ++v47;
            v44 += 3;
          }
          while (v43 != v44);
          ++v41;
        }
        while (v41 != v39);
      }
    }
    v32 = 1;
  }
  else
  {
    v32 = 0;
  }
  ppred_decompress_free(v34, v35, v36, v37, v38, v60, v59);
  free(v68[0]);
  free(v68[1]);
  free(v69[0]);
  free(v69[1]);
  free(v70[0]);
  free(v70[1]);
  free(v71[0]);
  free(v71[1]);
  free((void *)v72);
  free(*((void **)&v72 + 1));
  free((void *)v73);
  free(v14);
  return v32;
}

BOOL fill_index_ptr_material(int32x4_t *a1, int *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  int v9;
  uint64_t v10;
  int *v11;
  int32x4_t *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v18;
  int v19;
  int32x4_t v20;
  unint64_t v21;
  int32x4_t *v22;
  int32x4_t v23;

  bzero(a1, 4 * *(unsigned int *)(a3 + 40));
  if (!*(_DWORD *)(a3 + 36))
    return *(_DWORD *)(a3 + 40) == 0;
  v8 = 0;
  v9 = 0;
  do
  {
    while (v9 < 1)
    {
LABEL_3:
      v10 = v9;
      ++a1->i32[v10];
      ++v9;
      a2[v10] = *(_DWORD *)(a4 + 4 * v8++);
      if (v8 >= *(unsigned int *)(a3 + 36))
        goto LABEL_10;
    }
    v11 = a2;
    v12 = a1;
    v13 = v9;
    while (1)
    {
      v14 = *v11++;
      if (*(_DWORD *)(a4 + 4 * v8) == v14)
        break;
      v12 = (int32x4_t *)((char *)v12 + 4);
      if (!--v13)
        goto LABEL_3;
    }
    ++v12->i32[0];
    ++v8;
  }
  while (v8 < *(unsigned int *)(a3 + 36));
LABEL_10:
  if (v9 != *(_DWORD *)(a3 + 40))
    return 0;
  if (v9 < 1)
    return 1;
  v15 = v9 - 1;
  v16 = (v9 - 1);
  if ((_DWORD)v16)
  {
    do
    {
      if (v16 < 8)
      {
        v18 = 0;
        v19 = 0;
        goto LABEL_21;
      }
      v18 = v16 & 0xFFFFFFFFFFFFFFF8;
      v20 = 0uLL;
      v21 = v16 & 0xFFFFFFFFFFFFFFF8;
      v22 = a1 + 1;
      v23 = 0uLL;
      do
      {
        v20 = vaddq_s32(v22[-1], v20);
        v23 = vaddq_s32(*v22, v23);
        v22 += 2;
        v21 -= 8;
      }
      while (v21);
      v19 = vaddvq_s32(vaddq_s32(v23, v20));
      while (v16 != v18)
LABEL_21:
        v19 += a1->i32[v18++];
      a1->i32[v15] = v19;
      --v16;
    }
    while (v15-- > 1);
    v15 = 0;
  }
  a1->i32[v15] = 0;
  return 1;
}

void geo::c3m::EdgebreakerDecodeTable::~EdgebreakerDecodeTable(void ***this)
{
  void **v2;
  void *v3;
  void **v4;
  void *v5;

  v2 = *this;
  if (*this)
  {
    v3 = *v2;
    if (*v2)
    {
      v4 = v2 + 1;
      do
      {
        free(v3);
        v5 = *v4++;
        v3 = v5;
      }
      while (v5);
    }
    free(v2);
    *this = 0;
  }
}

uint64_t geo::c3m::EdgebreakerDecodeCache::getOrCreateTable(uint64_t *a1, int *a2)
{
  uint64_t v2;
  std::mutex *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int8x8_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint8x8_t v14;
  unint64_t v15;
  void **v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  void **v23;
  int v24;
  unint64_t v25;
  unsigned int v26;
  unint64_t v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  uint8x8_t v31;
  void **v32;
  unint64_t v33;
  uint64_t v34;
  void *v35;
  void **v36;
  void *v37;
  _QWORD *v38;
  float v39;
  float v40;
  uint64_t v41;
  _QWORD *v42;
  _BOOL8 v43;
  unint64_t v44;
  unint64_t v45;
  size_t prime;
  void *v47;
  void *v48;
  uint64_t v49;
  _QWORD *v50;
  size_t v51;
  size_t v52;
  size_t v53;
  _QWORD *i;
  size_t v55;
  uint64_t v56;
  unint64_t v57;
  uint8x8_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  size_t v62;
  uint64_t v63;
  void *v64;
  unint64_t v65;
  uint64_t v66;
  __int128 v68;

  v5 = (std::mutex *)(a1 + 5);
  std::mutex::lock((std::mutex *)(a1 + 5));
  v6 = *a2;
  v7 = a2[1];
  v8 = a2[2];
  v9 = *((unsigned __int16 *)a2 + 6);
  v10 = (int8x8_t)a1[1];
  if (v10)
  {
    v11 = ((v6 << 6) + (v6 >> 2) + v7 - 0x61C8864680B583EBLL) ^ v6;
    v12 = (v8 + (v11 << 6) + (v11 >> 2) - 0x61C8864680B583EBLL) ^ v11;
    v13 = (v9 + (v12 << 6) + (v12 >> 2) - 0x61C8864680B583EBLL) ^ v12;
    v14 = (uint8x8_t)vcnt_s8(v10);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] > 1uLL)
    {
      v15 = v13;
      if (v13 >= *(_QWORD *)&v10)
        v15 = v13 % *(_QWORD *)&v10;
    }
    else
    {
      v15 = v13 & (*(_QWORD *)&v10 - 1);
    }
    v16 = *(void ***)(*a1 + 8 * v15);
    if (v16)
    {
      v17 = *v16;
      if (*v16)
      {
        if (v14.u32[0] >= 2uLL)
        {
          while (1)
          {
            v19 = v17[1];
            if (v19 == v13)
            {
              if (v17[2] == __PAIR64__(v7, v6)
                && __PAIR64__(*((unsigned __int16 *)v17 + 14), *((_DWORD *)v17 + 6)) == __PAIR64__(v9, v8))
              {
                goto LABEL_128;
              }
            }
            else
            {
              if (v19 >= *(_QWORD *)&v10)
                v19 %= *(_QWORD *)&v10;
              if (v19 != v15)
                goto LABEL_24;
            }
            v17 = (_QWORD *)*v17;
            if (!v17)
              goto LABEL_24;
          }
        }
        v18 = *(_QWORD *)&v10 - 1;
        do
        {
          v20 = v17[1];
          if (v20 == v13)
          {
            if (v17[2] == __PAIR64__(v7, v6)
              && __PAIR64__(*((unsigned __int16 *)v17 + 14), *((_DWORD *)v17 + 6)) == __PAIR64__(v9, v8))
            {
              goto LABEL_128;
            }
          }
          else if ((v20 & v18) != v15)
          {
            break;
          }
          v17 = (_QWORD *)*v17;
        }
        while (v17);
      }
    }
  }
LABEL_24:
  v21 = calcHuffmanEncodeTableInt(v6, v7, v8, v9);
  if (v21)
  {
    v22 = v21;
    v23 = (void **)calcHuffmanDecodeTable((uint64_t)v21, *((unsigned __int16 *)a2 + 6));
    free(v22);
  }
  else
  {
    v23 = 0;
  }
  v68 = *(_OWORD *)a2;
  v24 = *(_OWORD *)a2;
  v25 = (((uint64_t)(int)v68 << 6) - 0x61C8864680B583EBLL + ((unint64_t)(int)v68 >> 2) + SDWORD1(v68)) ^ (int)v68;
  v26 = *((_QWORD *)a2 + 1);
  v27 = ((int)v26 - 0x61C8864680B583EBLL + (v25 << 6) + (v25 >> 2)) ^ v25;
  v28 = (unsigned __int16)WORD6(*(_OWORD *)a2);
  v29 = ((unsigned __int16)WORD6(*(_OWORD *)a2) - 0x61C8864680B583EBLL + (v27 << 6) + (v27 >> 2)) ^ v27;
  v30 = a1[1];
  if (!v30)
    goto LABEL_57;
  v31 = (uint8x8_t)vcnt_s8((int8x8_t)v30);
  v31.i16[0] = vaddlv_u8(v31);
  if (v31.u32[0] > 1uLL)
  {
    v2 = ((unsigned __int16)WORD6(*(_OWORD *)a2) - 0x61C8864680B583EBLL + (v27 << 6) + (v27 >> 2)) ^ v27;
    if (v29 >= v30)
      v2 = v29 % v30;
  }
  else
  {
    v2 = v29 & (v30 - 1);
  }
  v32 = *(void ***)(*a1 + 8 * v2);
  if (!v32 || (v17 = *v32) == 0)
  {
LABEL_57:
    v17 = operator new(0x28uLL);
    v38 = a1 + 2;
    *v17 = 0;
    v17[1] = v29;
    *((_OWORD *)v17 + 1) = *(_OWORD *)a2;
    v17[4] = v23;
    v39 = (float)(unint64_t)(a1[3] + 1);
    v40 = *((float *)a1 + 8);
    if (v30 && (float)(v40 * (float)v30) >= v39)
    {
      v41 = *a1;
      v42 = *(_QWORD **)(*a1 + 8 * v2);
      if (v42)
      {
LABEL_60:
        *v17 = *v42;
        goto LABEL_126;
      }
LABEL_120:
      *v17 = *v38;
      *v38 = v17;
      *(_QWORD *)(v41 + 8 * v2) = v38;
      if (!*v17)
      {
LABEL_127:
        ++a1[3];
        goto LABEL_128;
      }
      v65 = *(_QWORD *)(*v17 + 8);
      if ((v30 & (v30 - 1)) != 0)
      {
        if (v65 >= v30)
          v65 %= v30;
      }
      else
      {
        v65 &= v30 - 1;
      }
      v42 = (_QWORD *)(*a1 + 8 * v65);
LABEL_126:
      *v42 = v17;
      goto LABEL_127;
    }
    v43 = 1;
    if (v30 >= 3)
      v43 = (v30 & (v30 - 1)) != 0;
    v44 = v43 | (2 * v30);
    v45 = vcvtps_u32_f32(v39 / v40);
    if (v44 <= v45)
      prime = v45;
    else
      prime = v44;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v30 = a1[1];
    }
    if (prime > v30)
    {
LABEL_71:
      if (prime >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v47 = operator new(8 * prime);
      v48 = (void *)*a1;
      *a1 = (uint64_t)v47;
      if (v48)
        operator delete(v48);
      v49 = 0;
      a1[1] = prime;
      do
        *(_QWORD *)(*a1 + 8 * v49++) = 0;
      while (prime != v49);
      v50 = (_QWORD *)*v38;
      if (!*v38)
        goto LABEL_103;
      v51 = v50[1];
      v52 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v53 = v51 & v52;
        *(_QWORD *)(*a1 + 8 * v53) = v38;
        for (i = (_QWORD *)*v50; *v50; i = (_QWORD *)*v50)
        {
          v55 = i[1] & v52;
          if (v55 == v53)
          {
            v50 = i;
          }
          else if (*(_QWORD *)(*a1 + 8 * v55))
          {
            *v50 = *i;
            v56 = 8 * v55;
            *i = **(_QWORD **)(*a1 + v56);
            **(_QWORD **)(*a1 + v56) = i;
          }
          else
          {
            *(_QWORD *)(*a1 + 8 * v55) = v50;
            v50 = i;
            v53 = v55;
          }
        }
        goto LABEL_103;
      }
      if (v51 >= prime)
        v51 %= prime;
      *(_QWORD *)(*a1 + 8 * v51) = v38;
      v60 = (_QWORD *)*v50;
      if (!*v50)
      {
LABEL_103:
        v30 = prime;
        v63 = prime - 1;
        if ((prime & (prime - 1)) != 0)
          goto LABEL_104;
        goto LABEL_119;
      }
      while (1)
      {
        v62 = v60[1];
        if (v62 >= prime)
          v62 %= prime;
        if (v62 == v51)
          goto LABEL_97;
        if (*(_QWORD *)(*a1 + 8 * v62))
        {
          *v50 = *v60;
          v61 = 8 * v62;
          *v60 = **(_QWORD **)(*a1 + v61);
          **(_QWORD **)(*a1 + v61) = v60;
          v60 = v50;
LABEL_97:
          v50 = v60;
          v60 = (_QWORD *)*v60;
          if (!v60)
            goto LABEL_103;
        }
        else
        {
          *(_QWORD *)(*a1 + 8 * v62) = v50;
          v50 = v60;
          v60 = (_QWORD *)*v60;
          v51 = v62;
          if (!v60)
            goto LABEL_103;
        }
      }
    }
    if (prime < v30)
    {
      v57 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v30 < 3 || (v58 = (uint8x8_t)vcnt_s8((int8x8_t)v30), v58.i16[0] = vaddlv_u8(v58), v58.u32[0] > 1uLL))
      {
        v57 = std::__next_prime(v57);
      }
      else
      {
        v59 = 1 << -(char)__clz(v57 - 1);
        if (v57 >= 2)
          v57 = v59;
      }
      if (prime <= v57)
        prime = v57;
      if (prime < v30)
      {
        if (!prime)
        {
          v64 = (void *)*a1;
          *a1 = 0;
          if (v64)
            operator delete(v64);
          v30 = 0;
          a1[1] = 0;
          v63 = -1;
          goto LABEL_119;
        }
        goto LABEL_71;
      }
      v30 = a1[1];
    }
    v63 = v30 - 1;
    if ((v30 & (v30 - 1)) != 0)
    {
LABEL_104:
      if (v29 >= v30)
      {
        v2 = v29 % v30;
        v41 = *a1;
        v42 = *(_QWORD **)(*a1 + 8 * (v29 % v30));
        if (v42)
          goto LABEL_60;
      }
      else
      {
        v2 = v29;
        v41 = *a1;
        v42 = *(_QWORD **)(*a1 + 8 * v29);
        if (v42)
          goto LABEL_60;
      }
      goto LABEL_120;
    }
LABEL_119:
    v2 = v63 & v29;
    v41 = *a1;
    v42 = *(_QWORD **)(*a1 + 8 * (v63 & v29));
    if (v42)
      goto LABEL_60;
    goto LABEL_120;
  }
  if (v31.u32[0] < 2uLL)
  {
    while (1)
    {
      v34 = v17[1];
      if (v34 == v29)
      {
        if (*((_DWORD *)v17 + 4) == v24
          && *(_QWORD *)((char *)v17 + 20) == __PAIR64__(v26, DWORD1(v68))
          && *((unsigned __int16 *)v17 + 14) == v28)
        {
          goto LABEL_52;
        }
      }
      else if ((v34 & (v30 - 1)) != v2)
      {
        goto LABEL_57;
      }
      v17 = (_QWORD *)*v17;
      if (!v17)
        goto LABEL_57;
    }
  }
  while (1)
  {
    v33 = v17[1];
    if (v33 == v29)
      break;
    if (v33 >= v30)
      v33 %= v30;
    if (v33 != v2)
      goto LABEL_57;
LABEL_38:
    v17 = (_QWORD *)*v17;
    if (!v17)
      goto LABEL_57;
  }
  if (*((_DWORD *)v17 + 4) != v24
    || *(_QWORD *)((char *)v17 + 20) != __PAIR64__(v26, DWORD1(v68))
    || *((unsigned __int16 *)v17 + 14) != v28)
  {
    goto LABEL_38;
  }
LABEL_52:
  if (v23)
  {
    v35 = *v23;
    if (*v23)
    {
      v36 = v23 + 1;
      do
      {
        free(v35);
        v37 = *v36++;
        v35 = v37;
      }
      while (v37);
    }
    free(v23);
  }
LABEL_128:
  v66 = v17[4];
  std::mutex::unlock(v5);
  return v66;
}

void sub_19FF94860(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::mutex *v2;
  void **v4;
  va_list va;
  uint64_t v6;
  va_list va1;
  uint64_t v8;
  uint64_t v9;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, void **);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  v8 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<huffman_params_t,geo::c3m::EdgebreakerDecodeTable>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<huffman_params_t,geo::c3m::EdgebreakerDecodeTable>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va2);
  std::pair<huffman_params_t,geo::c3m::EdgebreakerDecodeTable>::~pair((uint64_t)va1);
  geo::c3m::EdgebreakerDecodeTable::~EdgebreakerDecodeTable((void ***)va);
  std::mutex::unlock(v2);
  _Unwind_Resume(a1);
}

uint64_t std::pair<huffman_params_t,geo::c3m::EdgebreakerDecodeTable>::~pair(uint64_t a1)
{
  void **v2;
  void *v3;
  void **v4;
  void *v5;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    v3 = *v2;
    if (*v2)
    {
      v4 = v2 + 1;
      do
      {
        free(v3);
        v5 = *v4++;
        v3 = v5;
      }
      while (v5);
    }
    free(v2);
    *(_QWORD *)(a1 + 16) = 0;
  }
  return a1;
}

void geo::c3m::loadFromChunk(uint64_t *a1@<X0>, _BYTE *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D1>, double a6@<D2>)
{
  uint64_t *v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  int v35;
  int v36;
  char v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  __n128 v42;
  const char *v43;
  unsigned int v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  int *v48;
  double v49;
  int *v50;
  int *v51;
  int *v52;
  int *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  unint64_t v58;
  unint64_t v59;
  unsigned int v60;
  uint64_t v61;
  unsigned int v62;
  int *v63;
  int *v64;
  int *v65;
  int *v66;
  int *v67;
  int *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  unint64_t v73;
  const char *v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  int v78;
  __int16 v79;
  unsigned int v80;
  unsigned int v81;
  int v82;
  __int16 v83;
  int v84;
  int v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  int v89;
  void *v90;
  int v91;
  int v92;
  unsigned __int16 *v93;
  unint64_t v94;
  std::vector<int>::pointer begin;
  std::vector<int>::pointer v96;
  uint64_t v97;
  _DWORD *v98;
  uint64_t v99;
  unint64_t v100;
  const char *v101;
  _QWORD *v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int v111;
  char TextureData;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  BOOL v123;
  uint64_t v124;
  _QWORD *v125;
  _QWORD *v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  _QWORD *v132;
  std::__shared_weak_count *v133;
  unint64_t *p_shared_owners;
  unint64_t v135;
  double v136;
  uint64_t v137;
  uint64_t *v138;
  __int128 v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t i;
  uint64_t v152;
  const char *v153;
  int *v154;
  int *v155;
  unsigned __int16 *v156;
  unsigned __int16 *v157;
  char v158;
  char *v159;
  char *v160;
  int v161;
  int v162;
  unsigned int v163;
  _OWORD v164[3];
  double v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  _BYTE v171[184];
  __int128 v172;
  __int128 v173;
  _BYTE v174[312];
  _BYTE *v175;
  unint64_t v176;
  uint64_t v177;
  void *v178[2];
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  char v189;
  char v190;
  int v191;
  unsigned __int16 *v192;
  char *v193;
  uint64_t v194;
  unsigned __int16 *v195;
  char *v196;
  uint64_t v197;
  void *v198;
  void *v199;
  unint64_t v200;
  int v201;
  __int16 v202;
  int v203;
  int v204;
  int v205;
  int v206;
  int v207;
  unsigned __int16 *v208;
  char *v209;
  uint64_t v210;
  std::vector<int> v211;
  std::vector<int> v212;

  v175 = a2;
  v176 = a3;
  if (a3 < 5 || *a2 != 67 || a2[1] != 51 || a2[2] != 77)
  {
    *(_BYTE *)a4 = 0;
    return;
  }
  memset(v164, 0, sizeof(v164));
  v8 = (uint64_t *)v171;
  v165 = 1.0;
  *(_QWORD *)&v169 = v171;
  *((_QWORD *)&v169 + 1) = v171;
  *(_QWORD *)&v170 = v171;
  *((_QWORD *)&v170 + 1) = 1;
  *(_QWORD *)&v172 = v174;
  *((_QWORD *)&v172 + 1) = v174;
  *(_QWORD *)&v173 = v174;
  *((_QWORD *)&v173 + 1) = 3;
  if (a2[3] != 3 || a2[4] <= 2u)
  {
LABEL_10:
    *(_BYTE *)a4 = 0;
    goto LABEL_11;
  }
  if (a3 < 6)
  {
LABEL_9:
    printf("Failed to read C3m file - %s");
    goto LABEL_10;
  }
  v177 = 6;
  v163 = a2[5];
  if (!a2[5])
  {
    v136 = 1.0;
    v138 = (uint64_t *)v171;
    v137 = 1;
    goto LABEL_225;
  }
  v9 = 0;
  do
  {
    v10 = v176;
    if (v177 + 1 > v176)
      goto LABEL_9;
    v11 = v177 + 5;
    if (v176 < v177 + 5)
      goto LABEL_9;
    v12 = *(unsigned int *)&v175[v11 - 4];
    if (v176 - (v177 + 5) < v12)
    {
      printf("C3m Block size too large");
      goto LABEL_10;
    }
    switch(v175[v177])
    {
      case 0:
        if (v177 + 6 > v176)
        {
          v153 = "Header type";
        }
        else if (v175[v11])
        {
          v153 = "C3m - Invalid header type";
        }
        else
        {
          v13 = v177 + 7;
          if (v177 + 7 >= v176)
            v13 = v176;
          if (v13 + 1 < v176)
            v14 = v13 + 1;
          else
            v14 = v176;
          if (v14 + 1 < v176)
            v15 = v14 + 1;
          else
            v15 = v176;
          if (v15 + 8 > v176 || v15 + 16 > v176 || v15 + 24 > v176 || v15 + 32 > v176)
          {
            v153 = "Rotation quaternion value";
          }
          else
          {
            v16 = v15 + 40;
            if (v15 + 40 > v176)
              goto LABEL_250;
            v17 = *(_QWORD *)&v175[v15];
            a6 = *(double *)&v175[v15 + 8];
            v18 = *(_QWORD *)&v175[v15 + 16];
            a5 = *(double *)&v175[v15 + 24];
            v19 = v15 + 48;
            v20 = *(_QWORD *)&v175[v15 + 32];
            v177 = v15 + 40;
            if (v15 + 48 > v176 || (v21 = v15 + 56, v15 + 56 > v176))
            {
LABEL_250:
              v153 = "Translation vector value";
            }
            else
            {
              v22 = v15 + 64;
              if (v15 + 64 <= v176)
              {
                v23 = v15 + 72;
                if (v15 + 72 <= v176)
                {
                  v24 = v15 + 80;
                  if (v15 + 80 <= v176)
                  {
                    v25 = v15 + 88;
                    if (v15 + 88 <= v176 && v15 + 96 <= v176)
                    {
                      v26 = v15 + 104;
                      if (v26 <= v176)
                      {
                        v27 = *(_QWORD *)&v175[v16];
                        v28 = *(_QWORD *)&v175[v19];
                        v29 = *(_QWORD *)&v175[v21];
                        v30 = *(_QWORD *)&v175[v22];
                        v31 = *(_QWORD *)&v175[v23];
                        v32 = *(_QWORD *)&v175[v24];
                        v177 = v26;
                        v33 = *(_OWORD *)&v175[v25];
                        *(double *)&v164[2] = a6;
                        *((_QWORD *)&v164[2] + 1) = v18;
                        *(_QWORD *)&v164[0] = v20;
                        *((_QWORD *)&v164[0] + 1) = v27;
                        *(_QWORD *)&v164[1] = v28;
                        *((_QWORD *)&v164[1] + 1) = v17;
                        v165 = a5;
                        *(_QWORD *)&v166 = v29;
                        *((_QWORD *)&v166 + 1) = v30;
                        *(_QWORD *)&v167 = v31;
                        *((_QWORD *)&v167 + 1) = v32;
                        v168 = v33;
                        goto LABEL_222;
                      }
                    }
                  }
                }
              }
              v153 = "Bounding box value";
            }
          }
        }
        goto LABEL_241;
      case 1:
        v107 = v177 + 9;
        if (v177 + 9 > v176)
          goto LABEL_257;
        v177 += 9;
        v162 = *(_DWORD *)&v175[v107 - 4];
        if (!v162)
          goto LABEL_222;
        v108 = 0;
        v158 = 1;
        while (2)
        {
          v109 = v177;
          if (v177 + 1 > v176)
            goto LABEL_257;
          v110 = v177 + 3;
          if (v177 + 3 > v176)
            goto LABEL_257;
          v111 = v175[v177];
          v177 += 3;
          if (v111 >= 0xE)
            goto LABEL_257;
          if (v111 >= 8)
          {
            if (v111 - 11 >= 2)
            {
              if (v111 - 8 < 3)
              {
                printf("C3m - reserved material type");
                goto LABEL_9;
              }
              if (v111 == 13)
              {
                printf("C3m - unsupported material type");
                goto LABEL_9;
              }
LABEL_218:
              if (++v108 == v162)
                goto LABEL_219;
              continue;
            }
            v117 = v109 + 4;
            if (v117 > v176 || (v177 = v117, v175[v110] != 2))
            {
LABEL_257:
              printf("Failed to read C3m file - %s");
              goto LABEL_9;
            }
            *(_QWORD *)&v179 = &v180;
            *((_QWORD *)&v179 + 1) = 2;
            v180 = 0u;
            v181 = 0u;
            v182 = 0u;
            v183 = 0u;
            v178[0] = &v180;
            v178[1] = &v184;
            {
              v118 = *((_QWORD *)&v172 + 1);
              v119 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*((_QWORD *)&v172 + 1) - v172) >> 3) + 1;
              if (*((_QWORD *)&v173 + 1) < v119)
              {
                geo::small_vector_base<std::pair<geo::c3m::MaterialType,geo::small_vector<geo::c3m::TextureData,2ul>>>::grow((uint64_t)&v172, v119);
                v118 = *((_QWORD *)&v172 + 1);
              }
              *(_BYTE *)v118 = v111;
              v120 = v118 + 40;
              *(_QWORD *)(v118 + 8) = v118 + 40;
              *(_QWORD *)(v118 + 16) = v118 + 40;
              *(_QWORD *)(v118 + 24) = v118 + 40;
              *(_QWORD *)(v118 + 32) = *((_QWORD *)&v179 + 1);
              v121 = v178[0];
              if (v178[0] == (void *)v179)
              {
                v130 = v178[1];
                v123 = v178[1] == v178[0];
                *(_QWORD *)(v118 + 16) = v120 + (char *)v178[1] - (char *)v178[0];
                if (!v123)
                {
                  do
                  {
                    *(_OWORD *)v120 = *(_OWORD *)v121;
                    *v121 = 0;
                    v121[1] = 0;
                    v131 = v121[2];
                    *(_BYTE *)(v120 + 24) = *((_BYTE *)v121 + 24);
                    *(_QWORD *)(v120 + 16) = v131;
                    v121 += 4;
                    v120 += 32;
                  }
                  while (v121 != v130);
                  v118 = *((_QWORD *)&v172 + 1);
                }
              }
              else
              {
                *(void **)(v118 + 8) = v178[0];
                *(void **)(v118 + 16) = v178[1];
                *(_OWORD *)v178 = 0u;
                v179 = 0u;
              }
              *((_QWORD *)&v172 + 1) = v118 + 104;
              TextureData = 1;
            }
            else
            {
              printf("Failed to read C3m file - %s", "Failed to read texture data");
              TextureData = 0;
              v158 = 0;
            }
            v125 = v178[0];
            v132 = v178[1];
            if (v178[0] == v178[1])
            {
LABEL_215:
              if (v125 != (_QWORD *)v179)
                free(v125);
              if ((TextureData & 1) == 0)
              {
LABEL_219:
                if ((v158 & 1) != 0)
                  goto LABEL_222;
                goto LABEL_9;
              }
              goto LABEL_218;
            }
            do
            {
              v133 = (std::__shared_weak_count *)v125[1];
              if (v133)
              {
                p_shared_owners = (unint64_t *)&v133->__shared_owners_;
                do
                  v135 = __ldaxr(p_shared_owners);
                while (__stlxr(v135 - 1, p_shared_owners));
                if (!v135)
                {
                  ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
                  std::__shared_weak_count::__release_weak(v133);
                }
              }
              v125 += 4;
            }
            while (v125 != v132);
          }
          else
          {
            *(_QWORD *)&v179 = &v180;
            *((_QWORD *)&v179 + 1) = 2;
            v180 = 0u;
            v181 = 0u;
            v178[0] = &v180;
            v178[1] = &v182;
            if ((TextureData & 1) != 0)
            {
              v113 = *((_QWORD *)&v172 + 1);
              v114 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*((_QWORD *)&v172 + 1) - v172) >> 3) + 1;
              if (*((_QWORD *)&v173 + 1) < v114)
              {
                geo::small_vector_base<std::pair<geo::c3m::MaterialType,geo::small_vector<geo::c3m::TextureData,2ul>>>::grow((uint64_t)&v172, v114);
                v113 = *((_QWORD *)&v172 + 1);
              }
              *(_BYTE *)v113 = v111;
              v115 = v113 + 40;
              *(_QWORD *)(v113 + 8) = v113 + 40;
              *(_QWORD *)(v113 + 16) = v113 + 40;
              *(_QWORD *)(v113 + 24) = v113 + 40;
              *(_QWORD *)(v113 + 32) = *((_QWORD *)&v179 + 1);
              v116 = v178[0];
              if (v178[0] == (void *)v179)
              {
                v122 = v178[1];
                v123 = v178[1] == v178[0];
                *(_QWORD *)(v113 + 16) = v115 + (char *)v178[1] - (char *)v178[0];
                if (!v123)
                {
                  do
                  {
                    *(_OWORD *)v115 = *(_OWORD *)v116;
                    *v116 = 0;
                    v116[1] = 0;
                    v124 = v116[2];
                    *(_BYTE *)(v115 + 24) = *((_BYTE *)v116 + 24);
                    *(_QWORD *)(v115 + 16) = v124;
                    v116 += 4;
                    v115 += 32;
                  }
                  while (v116 != v122);
                  v113 = *((_QWORD *)&v172 + 1);
                }
              }
              else
              {
                *(void **)(v113 + 8) = v178[0];
                *(void **)(v113 + 16) = v178[1];
                *(_OWORD *)v178 = 0u;
                v179 = 0u;
              }
              *((_QWORD *)&v172 + 1) = v113 + 104;
            }
            else
            {
              printf("Failed to read C3m file - %s", "Failed to read texture data");
              v158 = 0;
            }
            v125 = v178[0];
            v126 = v178[1];
            if (v178[0] == v178[1])
              goto LABEL_215;
            do
            {
              v127 = (std::__shared_weak_count *)v125[1];
              if (v127)
              {
                v128 = (unint64_t *)&v127->__shared_owners_;
                do
                  v129 = __ldaxr(v128);
                while (__stlxr(v129 - 1, v128));
                if (!v129)
                {
                  ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
                  std::__shared_weak_count::__release_weak(v127);
                }
              }
              v125 += 4;
            }
            while (v125 != v126);
          }
          break;
        }
        v125 = v178[0];
        goto LABEL_215;
      case 2:
        v34 = v177 + 9;
        if (v177 + 9 > v176)
        {
          v153 = "Num submeshes";
          goto LABEL_241;
        }
        v177 += 9;
        v35 = *(_DWORD *)&v175[v34 - 4];
        if (!v35)
          goto LABEL_222;
        v36 = 0;
        v37 = 1;
        break;
      case 3:
        v105 = (v12 - 5);
        printf("This decoder does not currently support scene graphs.");
        v106 = v11 + v105;
        if (v11 + v105 >= v10)
          v106 = v10;
        v177 = v106;
        goto LABEL_222;
      default:
        printf("C3m invalid block type");
        goto LABEL_10;
    }
    do
    {
      v39 = v177;
      if (v177 + 1 > v176)
      {
        v153 = "Mesh type";
LABEL_241:
        printf("Failed to read C3m file - %s", v153);
        goto LABEL_9;
      }
      v40 = v177 + 3;
      if (v177 + 3 > v176)
      {
        v153 = "Mesh length";
        goto LABEL_241;
      }
      v41 = v175[v177];
      v177 += 3;
      if (v41 >= 4)
      {
        v153 = "Invalid mesh type";
        goto LABEL_241;
      }
      v178[0] = &v180;
      v178[1] = &v180;
      *(_QWORD *)&v179 = &v180;
      *((_QWORD *)&v179 + 1) = 2;
      v42.n128_u64[1] = 0;
      v183 = 0u;
      v184 = 0u;
      v185 = 0u;
      v186 = 0u;
      v187 = 0u;
      v188 = 0u;
      v191 = -1;
      v189 = v36;
      if (v41 == 1)
      {
        v43 = "Feature classification";
        if (v39 + 4 <= v176)
        {
          v177 = v39 + 4;
          v43 = "Index of first drape face";
          if (v39 + 6 <= v176)
          {
            v177 = v39 + 6;
            v43 = "Layer classification";
            if (v39 + 7 <= v176)
            {
              v177 = v39 + 7;
              v60 = v175[v39 + 6];
              v43 = "Invalid layer class";
              if (v60 <= 8)
              {
                v61 = v39 + 11;
                v43 = "Material index";
                if (v39 + 11 <= v176)
                {
                  v177 = v39 + 11;
                  v43 = "Mesh type";
                  if (v39 + 12 <= v176)
                  {
                    v46 = *(_DWORD *)&v175[v61 - 4];
                    v177 = v39 + 12;
                    v62 = v175[v61];
                    v43 = "Invalid mesh chunk type";
                    if (v62 <= 2)
                    {
                      v43 = "Scale factor value";
                      if (v39 + 20 <= v176)
                      {
                        v63 = *(int **)&v175[v39 + 12];
                        v177 = v39 + 20;
                        if (v39 + 28 <= v176)
                        {
                          v64 = *(int **)&v175[v39 + 20];
                          v177 = v39 + 28;
                          if (v39 + 36 <= v176)
                          {
                            v65 = *(int **)&v175[v39 + 28];
                            v177 = v39 + 36;
                            v43 = "Translation factor value";
                            if (v39 + 44 <= v176)
                            {
                              v66 = *(int **)&v175[v39 + 36];
                              v177 = v39 + 44;
                              if (v39 + 52 <= v176)
                              {
                                v67 = *(int **)&v175[v39 + 44];
                                v177 = v39 + 52;
                                if (v39 + 60 <= v176)
                                {
                                  v68 = *(int **)&v175[v39 + 52];
                                  v177 = v39 + 60;
                                  v43 = "Mesh chunk offset";
                                  if (v39 + 64 <= v176)
                                  {
                                    v177 = v39 + 64;
                                    v69 = v39 + 68;
                                    v43 = "Compressed mesh chunk size";
                                    if (v39 + 68 <= v176)
                                    {
                                      v70 = *(unsigned int *)&v175[v39 + 60];
                                      v177 = v39 + 68;
                                      v71 = v39 + 72;
                                      v43 = "Uncompressed mesh chunk size";
                                      if (v71 <= v176)
                                      {
                                        v72 = (char *)*(unsigned int *)&v175[v69 - 4];
                                        v177 = v71;
                                        v160 = v72;
                                        v73 = ((_DWORD)v72 + v70);
                                        v43 = "Invalid mesh chunk data";
                                        if (v176 >= v73)
                                        {
                                          v155 = v63;
                                          v100 = *(unsigned int *)&v175[v71 - 4];
                                          v190 = v60;
                                          v199 = 0;
                                          v198 = 0;
                                          v200 = 0;
                                          v157 = (unsigned __int16 *)&v175[v70];
                                          if ((_DWORD)v160 != (_DWORD)v100)
                                          {
                                            std::vector<unsigned char>::resize((uint64_t)&v198, v100);
                                            if (!lzma_decompress_bytes())
                                              goto LABEL_145;
                                            v157 = 0;
                                            v160 = 0;
                                          }
                                          v42.n128_u64[0] = (unint64_t)v155;
                                          v212.__begin_ = v155;
                                          v212.__end_ = v64;
                                          v212.__end_cap_.__value_ = v65;
                                          v211.__begin_ = v66;
                                          v211.__end_ = v67;
                                          v211.__end_cap_.__value_ = v68;
                                          if (v62 == 1)
                                          {
                                            v195 = v157;
                                            v196 = v160;
                                            v197 = 0;
                                          }
                                          else if (v62)
                                          {
                                            v192 = v157;
                                            v193 = v160;
                                            v194 = 0;
                                          }
                                          else
                                          {
                                            v208 = v157;
                                            v209 = v160;
                                            v210 = 0;
                                            {
LABEL_135:
                                              v101 = "Couldn't read mesh chunk type 0";
LABEL_155:
                                              printf("Failed to read C3m file - %s", v101);
                                              v104 = 0;
LABEL_156:
                                              if (v198)
                                              {
                                                v199 = v198;
                                                operator delete(v198);
                                              }
                                              if ((v104 & 1) == 0)
                                                goto LABEL_111;
                                              goto LABEL_159;
                                            }
                                          }
LABEL_153:
                                          geo::small_vector_base<geo::c3m::SubMesh>::resize((char **)v178, 1uLL);
                                          v102 = v178[1];
                                          *((_DWORD *)v178[1] - 2) = v46;
                                          v103 = (uint64_t)(*((_QWORD *)&v186 + 1) - v186) >> 1;
                                          *(v102 - 3) = 0;
                                          *(v102 - 2) = v103;
                                          v104 = 1;
                                          goto LABEL_156;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
LABEL_94:
        printf("Failed to read C3m file - %s", v43);
LABEL_111:
        printf("Failed to read C3m file - %s", "Invalid mesh");
        v37 = 0;
        v89 = 1;
        v90 = (void *)*((_QWORD *)&v187 + 1);
        if (!*((_QWORD *)&v187 + 1))
          goto LABEL_113;
LABEL_112:
        *(_QWORD *)&v188 = v90;
        operator delete(v90);
        goto LABEL_113;
      }
      if (!v41)
      {
        v43 = "Feature classification";
        if (v39 + 4 > v176)
          goto LABEL_94;
        v177 = v39 + 4;
        v43 = "Layer classification";
        if (v39 + 5 > v176)
          goto LABEL_94;
        v177 = v39 + 5;
        v44 = v175[v39 + 4];
        v43 = "Invalid layer class";
        if (v44 > 8)
          goto LABEL_94;
        v45 = v39 + 9;
        v43 = "Material index";
        if (v39 + 9 > v176)
          goto LABEL_94;
        v177 = v39 + 9;
        v43 = "Mesh type";
        if (v39 + 10 > v176)
          goto LABEL_94;
        v46 = *(_DWORD *)&v175[v45 - 4];
        v177 = v39 + 10;
        v47 = v175[v45];
        v43 = "Invalid mesh chunk type";
        if (v47 > 2)
          goto LABEL_94;
        v43 = "Scale factor value";
        if (v39 + 18 > v176)
          goto LABEL_94;
        v48 = *(int **)&v175[v39 + 10];
        v177 = v39 + 18;
        if (v39 + 26 > v176)
          goto LABEL_94;
        v49 = *(double *)&v175[v39 + 18];
        v177 = v39 + 26;
        if (v39 + 34 > v176)
          goto LABEL_94;
        v50 = *(int **)&v175[v39 + 26];
        v177 = v39 + 34;
        v43 = "Translation factor value";
        if (v39 + 42 > v176)
          goto LABEL_94;
        v51 = *(int **)&v175[v39 + 34];
        v177 = v39 + 42;
        if (v39 + 50 > v176)
          goto LABEL_94;
        v52 = *(int **)&v175[v39 + 42];
        v177 = v39 + 50;
        if (v39 + 58 > v176)
          goto LABEL_94;
        v53 = *(int **)&v175[v39 + 50];
        v177 = v39 + 58;
        v43 = "Mesh chunk offset";
        if (v39 + 62 > v176)
          goto LABEL_94;
        v177 = v39 + 62;
        v54 = v39 + 66;
        v43 = "Compressed mesh chunk size";
        if (v39 + 66 > v176)
          goto LABEL_94;
        v55 = *(unsigned int *)&v175[v39 + 58];
        v177 = v39 + 66;
        v56 = v39 + 70;
        v43 = "Uncompressed mesh chunk size";
        if (v56 > v176)
          goto LABEL_94;
        v57 = (char *)*(unsigned int *)&v175[v54 - 4];
        v177 = v56;
        v159 = v57;
        v58 = ((_DWORD)v57 + v55);
        v43 = "Invalid mesh chunk data";
        if (v176 < v58)
          goto LABEL_94;
        v154 = *(int **)&v49;
        v59 = *(unsigned int *)&v175[v56 - 4];
        v190 = v44;
        v199 = 0;
        v198 = 0;
        v200 = 0;
        v156 = (unsigned __int16 *)&v175[v55];
        if ((_DWORD)v159 == (_DWORD)v59)
          goto LABEL_73;
        std::vector<unsigned char>::resize((uint64_t)&v198, v59);
        if (lzma_decompress_bytes())
        {
          v156 = 0;
          v159 = 0;
LABEL_73:
          v42.n128_u64[0] = (unint64_t)v154;
          v212.__begin_ = v48;
          v212.__end_ = v154;
          v212.__end_cap_.__value_ = v50;
          v211.__begin_ = v51;
          v211.__end_ = v52;
          v211.__end_cap_.__value_ = v53;
          if (v47 != 1)
          {
            if (!v47)
            {
              v208 = v156;
              v209 = v159;
              v210 = 0;
              goto LABEL_135;
            }
            v192 = v156;
            v193 = v159;
            v194 = 0;
              goto LABEL_153;
LABEL_154:
            v101 = "Couldn't read mesh chunk type 2";
            goto LABEL_155;
          }
          v195 = v156;
          v196 = v159;
          v197 = 0;
LABEL_151:
          v101 = "Couldn't read mesh chunk type 1";
          goto LABEL_155;
        }
LABEL_145:
        v101 = "Failed to decompress mesh chunk";
        goto LABEL_155;
      }
      v74 = "Layer classification";
      if (v39 + 4 > v176)
        goto LABEL_110;
      v177 = v39 + 4;
      v75 = v175[v40];
      v74 = "Invalid feature class";
      if (v75 > 8)
        goto LABEL_110;
      v74 = "Huffman parameter c1 for texture coordinates";
      if (v39 + 8 > v176)
        goto LABEL_110;
      v177 = v39 + 8;
      v74 = "Huffman parameter c2 for texture coordinates";
      if (v39 + 12 > v176)
        goto LABEL_110;
      v76 = *(_DWORD *)&v175[v39 + 4];
      v177 = v39 + 12;
      v74 = "Huffman parameter c3 for texture coordinates";
      if (v39 + 16 > v176)
        goto LABEL_110;
      v77 = *(_DWORD *)&v175[v39 + 8];
      v177 = v39 + 16;
      v74 = "Huffman parameter range for texture coordinates";
      if (v39 + 18 > v176)
        goto LABEL_110;
      v78 = *(_DWORD *)&v175[v39 + 12];
      v177 = v39 + 18;
      v74 = "Huffman parameter c1 for vertex coordinates";
      if (v39 + 22 > v176)
        goto LABEL_110;
      v79 = *(_WORD *)&v175[v39 + 16];
      v177 = v39 + 22;
      v74 = "Huffman parameter c2 for vertex coordinates";
      if (v39 + 26 > v176)
        goto LABEL_110;
      v80 = *(_DWORD *)&v175[v39 + 18];
      v177 = v39 + 26;
      v74 = "Huffman parameter c3 for vertex coordinates";
      if (v39 + 30 > v176)
        goto LABEL_110;
      v81 = *(_DWORD *)&v175[v39 + 22];
      v177 = v39 + 30;
      v74 = "Huffman parameter range for vertex coordinates";
      if (v39 + 32 > v176)
        goto LABEL_110;
      v82 = *(_DWORD *)&v175[v39 + 26];
      v177 = v39 + 32;
      v74 = "Number of texture coordinates";
      if (v39 + 36 > v176)
        goto LABEL_110;
      v83 = *(_WORD *)&v175[v39 + 30];
      v177 = v39 + 36;
      v74 = "Number of faces";
      if (v39 + 40 > v176)
        goto LABEL_110;
      v84 = *(_DWORD *)&v175[v39 + 32];
      v177 = v39 + 40;
      v74 = "Number of material indices";
      if (v39 + 44 > v176)
        goto LABEL_110;
      v85 = *(_DWORD *)&v175[v39 + 36];
      v177 = v39 + 44;
      v86 = v39 + 48;
      v74 = "Mesh chunk offset";
      if (v39 + 48 > v176
        || (v87 = *(unsigned int *)&v175[v39 + 40],
            v177 = v39 + 48,
            v88 = v39 + 52,
            v74 = "Compressed mesh chunk size",
            v88 > v176))
      {
LABEL_110:
        printf("Failed to read C3m file - %s", v74);
        goto LABEL_111;
      }
      v91 = *(_DWORD *)&v175[v86 - 4];
      v177 = v88;
      v92 = *(_DWORD *)&v175[v88 - 4];
      v190 = v75;
      if (v75 != 6 && !(_DWORD)v87)
        goto LABEL_159;
      memset(&v212, 0, sizeof(v212));
      memset(&v211, 0, sizeof(v211));
      v208 = 0;
      v209 = 0;
      v210 = 0;
      v198 = (void *)__PAIR64__(v77, v76);
      LODWORD(v199) = v78;
      WORD2(v199) = v79;
      v200 = __PAIR64__(v81, v80);
      v201 = v82;
      v202 = v83;
      v203 = v84;
      v204 = v85;
      v205 = v87;
      v206 = v91;
      v207 = v92;
      if ((v161 & 1) == 0)
      {
        printf("Failed to read C3m file - %s", "Failed to decode edgebreaker mesh");
        v93 = v208;
LABEL_137:
        if (!v93)
          goto LABEL_139;
        goto LABEL_138;
      }
      geo::small_vector_base<geo::c3m::SubMesh>::resize((char **)v178, v87);
      v190 = v75;
      v93 = v208;
      if (!(_DWORD)v87)
        goto LABEL_137;
      v94 = 0;
      begin = v211.__begin_;
      v96 = v212.__begin_;
      v97 = (uint64_t)(*((_QWORD *)&v186 + 1) - v186) >> 1;
      v98 = (char *)v178[0] + 16;
      do
      {
        *v98 = begin[v94 / 4];
        v98[1] = *(_DWORD *)&v93[v94 / 2];
        v99 = v97;
        if (4 * (v87 - 1) != v94)
          v99 = 3 * v96[v94 / 4 + 1];
        *((_QWORD *)v98 - 2) = 3 * v96[v94 / 4];
        *((_QWORD *)v98 - 1) = v99;
        v94 += 4;
        v98 += 6;
      }
      while (4 * v87 != v94);
LABEL_138:
      v209 = (char *)v93;
      operator delete(v93);
LABEL_139:
      if (v211.__begin_)
      {
        v211.__end_ = v211.__begin_;
        operator delete(v211.__begin_);
      }
      if (v212.__begin_)
      {
        v212.__end_ = v212.__begin_;
        operator delete(v212.__begin_);
      }
      if (!v161)
        goto LABEL_111;
LABEL_159:
      geo::small_vector_base<geo::c3m::Mesh>::push_back(&v169, (uint64_t *)v178);
      v89 = 0;
      v90 = (void *)*((_QWORD *)&v187 + 1);
      if (*((_QWORD *)&v187 + 1))
        goto LABEL_112;
LABEL_113:
      if ((_QWORD)v186)
      {
        *((_QWORD *)&v186 + 1) = v186;
        operator delete((void *)v186);
      }
      if (*((_QWORD *)&v184 + 1))
      {
        *(_QWORD *)&v185 = *((_QWORD *)&v184 + 1);
        operator delete(*((void **)&v184 + 1));
      }
      if ((_QWORD)v183)
      {
        *((_QWORD *)&v183 + 1) = v183;
        operator delete((void *)v183);
      }
      if (v178[0] != (void *)v179)
        free(v178[0]);
      if (++v36 == v35)
        v38 = 1;
      else
        v38 = v89;
    }
    while (v38 != 1);
    if ((v37 & 1) == 0)
      goto LABEL_9;
LABEL_222:
    ++v9;
  }
  while (v9 < v163);
  v136 = v165;
  v137 = *((_QWORD *)&v170 + 1);
  v8 = (uint64_t *)v170;
  v138 = (uint64_t *)v169;
LABEL_225:
  *(_BYTE *)a4 = 1;
  *(_OWORD *)(a4 + 8) = v164[0];
  *(_QWORD *)(a4 + 24) = *(_QWORD *)&v164[1];
  *(_OWORD *)(a4 + 32) = *(_OWORD *)((char *)&v164[1] + 8);
  *(_QWORD *)(a4 + 48) = *((_QWORD *)&v164[2] + 1);
  *(double *)(a4 + 56) = v136;
  v139 = v167;
  *(_OWORD *)(a4 + 64) = v166;
  *(_OWORD *)(a4 + 80) = v139;
  *(_OWORD *)(a4 + 96) = v168;
  v140 = (_QWORD *)(a4 + 144);
  *(_QWORD *)(a4 + 112) = a4 + 144;
  *(_QWORD *)(a4 + 120) = a4 + 144;
  *(_QWORD *)(a4 + 128) = a4 + 144;
  *(_QWORD *)(a4 + 136) = v137;
  if (v138 == v8)
  {
    v142 = (uint64_t *)*((_QWORD *)&v169 + 1);
    *(_QWORD *)(a4 + 120) = (char *)v140 + *((_QWORD *)&v169 + 1) - (_QWORD)v8;
    geo::uninitialized_move<geo::c3m::Mesh *,geo::c3m::Mesh *>(v8, v142, v140);
  }
  else
  {
    v141 = *((_QWORD *)&v169 + 1);
    *(_QWORD *)(a4 + 112) = v138;
    *(_QWORD *)(a4 + 120) = v141;
    v169 = 0u;
    v170 = 0u;
  }
  v143 = a4 + 360;
  *(_QWORD *)(a4 + 328) = a4 + 360;
  *(_QWORD *)(a4 + 336) = a4 + 360;
  v144 = *((_QWORD *)&v173 + 1);
  v145 = v173;
  *(_QWORD *)(a4 + 344) = a4 + 360;
  *(_QWORD *)(a4 + 352) = v144;
  v146 = v172;
  if ((_QWORD)v172 == v145)
  {
    v148 = *((_QWORD *)&v172 + 1);
    v123 = *((_QWORD *)&v172 + 1) == (_QWORD)v172;
    *(_QWORD *)(a4 + 336) = v143 + *((_QWORD *)&v172 + 1) - v172;
    if (!v123)
    {
      do
      {
        *(_BYTE *)v143 = *(_BYTE *)v146;
        v149 = v143 + 40;
        *(_QWORD *)(v143 + 8) = v143 + 40;
        v150 = *(_QWORD *)(v146 + 8);
        *(_QWORD *)(v143 + 16) = v143 + 40;
        *(_QWORD *)(v143 + 24) = v143 + 40;
        *(_QWORD *)(v143 + 32) = *(_QWORD *)(v146 + 32);
        if (v150 == *(_QWORD *)(v146 + 24))
        {
          *(_QWORD *)(v143 + 16) = v149 + *(_QWORD *)(v146 + 16) - v150;
          for (i = *(_QWORD *)(v146 + 16); v150 != i; v149 += 32)
          {
            *(_OWORD *)v149 = *(_OWORD *)v150;
            *(_QWORD *)v150 = 0;
            *(_QWORD *)(v150 + 8) = 0;
            v152 = *(_QWORD *)(v150 + 16);
            *(_BYTE *)(v149 + 24) = *(_BYTE *)(v150 + 24);
            *(_QWORD *)(v149 + 16) = v152;
            v150 += 32;
          }
        }
        else
        {
          *(_QWORD *)(v143 + 8) = v150;
          *(_QWORD *)(v143 + 16) = *(_QWORD *)(v146 + 16);
          *(_OWORD *)(v146 + 8) = 0uLL;
          *(_OWORD *)(v146 + 24) = 0uLL;
        }
        v143 += 104;
        v146 += 104;
      }
      while (v146 != v148);
    }
  }
  else
  {
    v147 = *((_QWORD *)&v172 + 1);
    *(_QWORD *)(a4 + 328) = v172;
    *(_QWORD *)(a4 + 336) = v147;
    v172 = 0u;
    v173 = 0u;
  }
LABEL_11:
  geo::c3m::Model::~Model((geo::c3m::Model *)v164);
}

void sub_19FF95D68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  geo::c3m::Mesh::~Mesh((geo::c3m::Mesh *)&STACK[0x340]);
  geo::c3m::Model::~Model((geo::c3m::Model *)&a27);
  _Unwind_Resume(a1);
}

void sub_19FF95D84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  void *v28;

  v28 = (void *)STACK[0x428];
  if (STACK[0x428])
  {
    STACK[0x430] = (unint64_t)v28;
    operator delete(v28);
  }
  geo::c3m::Mesh::~Mesh((geo::c3m::Mesh *)&STACK[0x340]);
  geo::c3m::Model::~Model((geo::c3m::Model *)&a27);
  _Unwind_Resume(a1);
}

void sub_19FF95E00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  geo::small_vector<geo::c3m::TextureData,2ul>::~small_vector((uint64_t)&STACK[0x340]);
  geo::c3m::Model::~Model((geo::c3m::Model *)&a27);
  _Unwind_Resume(a1);
}

void geo::small_vector_base<geo::c3m::Mesh>::runDestructors(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  if (a2 != a3)
  {
    v4 = a2;
    do
    {
      v5 = *(void **)(v4 + 152);
      if (v5)
      {
        *(_QWORD *)(v4 + 160) = v5;
        operator delete(v5);
      }
      v6 = *(void **)(v4 + 128);
      if (v6)
      {
        *(_QWORD *)(v4 + 136) = v6;
        operator delete(v6);
      }
      v7 = *(void **)(v4 + 104);
      if (v7)
      {
        *(_QWORD *)(v4 + 112) = v7;
        operator delete(v7);
      }
      v8 = *(void **)(v4 + 80);
      if (v8)
      {
        *(_QWORD *)(v4 + 88) = v8;
        operator delete(v8);
      }
      if (*(_QWORD *)v4 != *(_QWORD *)(v4 + 16))
        free(*(void **)v4);
      v4 += 184;
    }
    while (v4 != a3);
  }
}

void geo::c3m::Mesh::~Mesh(geo::c3m::Mesh *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = (void *)*((_QWORD *)this + 19);
  if (v2)
  {
    *((_QWORD *)this + 20) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 16);
  if (v3)
  {
    *((_QWORD *)this + 17) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 13);
  if (v4)
  {
    *((_QWORD *)this + 14) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 10);
  if (v5)
  {
    *((_QWORD *)this + 11) = v5;
    operator delete(v5);
  }
  if (*(_QWORD *)this != *((_QWORD *)this + 2))
    free(*(void **)this);
}

uint64_t `anonymous namespace'::readTextureData(uint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  char v20;

  v2 = a1[1];
  v3 = a1[2];
  if (v3 + 1 > v2)
  {
    v4 = "Texture data type";
LABEL_17:
    printf("Failed to read C3m file - %s", v4);
    return 0;
  }
  a1[2] = v3 + 1;
  v5 = v3 + 5;
  if (v3 + 5 > v2)
  {
    v4 = "Texture data offset";
    goto LABEL_17;
  }
  v6 = *a1;
  v7 = *(unsigned __int8 *)(*a1 + v3);
  a1[2] = v5;
  v8 = v3 + 9;
  if (v3 + 9 > v2)
  {
    v4 = "Texture compressed data size";
    goto LABEL_17;
  }
  v9 = *(unsigned int *)(v6 + v5 - 4);
  a1[2] = v8;
  v10 = v3 + 13;
  if (v10 > v2)
  {
    v4 = "Texture uncompressed data size";
    goto LABEL_17;
  }
  v11 = *(unsigned int *)(v6 + v8 - 4);
  a1[2] = v10;
  if (v2 < (v11 + v9))
  {
    v4 = "Invalid file data offset";
    goto LABEL_17;
  }
  if (v7 >= 0xE)
  {
    v4 = "Invalid texture data type";
    goto LABEL_17;
  }
  v13 = *(unsigned int *)(v6 + v10 - 4);
  std::allocate_shared[abi:ne180100]<std::vector<unsigned char>,std::allocator<std::vector<unsigned char>>,unsigned char const*&,unsigned char const*&,void>(&v17, (const void *)(v6 + v9), v6 + v9 + v11);
  v18 = v17;
  if (*((_QWORD *)&v17 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v19 = v13;
  v20 = v7;
  geo::c3m::TextureData::operator=(a2, &v18);
  std::shared_ptr<geo::codec::VectorTile>::~shared_ptr[abi:ne180100]((uint64_t)&v18);
  std::shared_ptr<geo::codec::VectorTile>::~shared_ptr[abi:ne180100]((uint64_t)&v17);
  return 1;
}

uint64_t geo::small_vector<geo::c3m::TextureData,2ul>::~small_vector(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(_QWORD **)a1;
  v3 = *(_QWORD **)(a1 + 8);
  if (*(_QWORD **)a1 == v3)
  {
    if (v2 != *(_QWORD **)(a1 + 16))
LABEL_3:
      free(v2);
  }
  else
  {
    do
    {
      v5 = (std::__shared_weak_count *)v2[1];
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      v2 += 4;
    }
    while (v2 != v3);
    v2 = *(_QWORD **)a1;
    if (*(_QWORD *)a1 != *(_QWORD *)(a1 + 16))
      goto LABEL_3;
  }
  return a1;
}

uint64_t geo::c3m::TextureData::operator=(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;

  v4 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v5 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v4;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = *((_QWORD *)a2 + 2);
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  *(_QWORD *)(a1 + 16) = v8;
  return a1;
}

_QWORD *std::allocate_shared[abi:ne180100]<std::vector<unsigned char>,std::allocator<std::vector<unsigned char>>,unsigned char const*&,unsigned char const*&,void>(_QWORD *a1, const void *a2, uint64_t a3)
{
  _QWORD *result;
  _QWORD *v7;
  _QWORD *v8;
  size_t v9;
  char *v10;
  char *v11;

  result = operator new(0x30uLL);
  v7 = result;
  result[3] = 0;
  v8 = result + 3;
  result[1] = 0;
  result[2] = 0;
  *result = &off_1E42E6840;
  result[4] = 0;
  result[5] = 0;
  v9 = a3 - (_QWORD)a2;
  if (v9)
  {
    if ((v9 & 0x8000000000000000) != 0)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v10 = (char *)operator new(v9);
    v7[3] = v10;
    v11 = &v10[v9];
    v7[5] = &v10[v9];
    result = memcpy(v10, a2, v9);
    v7[4] = v11;
  }
  *a1 = v8;
  a1[1] = v7;
  return result;
}

void sub_19FF96264(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = *v2;
  if (*v2)
  {
    v1[1].__shared_owners_ = (uint64_t)v4;
    operator delete(v4);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<std::vector<unsigned char>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E6840;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<unsigned char>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E6840;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<std::vector<unsigned char>>::__on_zero_shared(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void geo::small_vector_base<std::pair<geo::c3m::MaterialType,geo::small_vector<geo::c3m::TextureData,2ul>>>::grow(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  uint64_t v29;

  v3 = *(_QWORD **)a1;
  v29 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD **)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v6 = (1 << -(char)__clz(v4 + 1));
  if (v4 >= 0xFFFFFFFFFFFFFFFELL)
    v7 = 1;
  else
    v7 = v6;
  if (v7 <= a2)
    v8 = a2;
  else
    v8 = v7;
  v9 = (char *)malloc_type_malloc(104 * v8, 0x10200409A70330CuLL);
  v10 = v9;
  v11 = *(_QWORD **)a1;
  v12 = *(_QWORD **)(a1 + 8);
  if (*(_QWORD **)a1 != v12)
  {
    v13 = v9;
    do
    {
      *(_BYTE *)v13 = *(_BYTE *)v11;
      v13[1] = v13 + 5;
      v15 = (_QWORD *)v11[1];
      v13[2] = v13 + 5;
      v13[3] = v13 + 5;
      v16 = (_QWORD *)v11[3];
      v13[4] = v11[4];
      if (v15 == v16)
      {
        v13[2] = (char *)v13 + v11[2] - (_QWORD)v15 + 40;
        v17 = (_QWORD *)v11[2];
        if (v15 != v17)
        {
          v18 = 0;
          do
          {
            v19 = (char *)&v13[v18];
            v20 = &v15[v18];
            *(_OWORD *)(v19 + 40) = *(_OWORD *)&v15[v18];
            *v20 = 0;
            v20[1] = 0;
            v21 = v15[v18 + 2];
            v19[64] = v15[v18 + 3];
            *((_QWORD *)v19 + 7) = v21;
            v18 += 4;
          }
          while (v20 + 4 != v17);
        }
      }
      else
      {
        v14 = v11[2];
        v13[1] = v15;
        v13[2] = v14;
        *(_OWORD *)(v11 + 1) = 0uLL;
        *(_OWORD *)(v11 + 3) = 0uLL;
      }
      v13 += 13;
      v11 += 13;
    }
    while (v11 != v12);
    v22 = *(_QWORD **)a1;
    v23 = *(_QWORD **)(a1 + 8);
    while (v22 != v23)
    {
      v24 = (_QWORD *)v22[1];
      v25 = (_QWORD *)v22[2];
      if (v24 == v25)
      {
        if (v24 != (_QWORD *)v22[3])
          goto LABEL_29;
      }
      else
      {
        do
        {
          v26 = (std::__shared_weak_count *)v24[1];
          if (v26)
          {
            p_shared_owners = (unint64_t *)&v26->__shared_owners_;
            do
              v28 = __ldaxr(p_shared_owners);
            while (__stlxr(v28 - 1, p_shared_owners));
            if (!v28)
            {
              ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
              std::__shared_weak_count::__release_weak(v26);
            }
          }
          v24 += 4;
        }
        while (v24 != v25);
        v24 = (_QWORD *)v22[1];
        if (v24 != (_QWORD *)v22[3])
LABEL_29:
          free(v24);
      }
      v22 += 13;
    }
  }
  if (v3 != v5)
    free(*(void **)a1);
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + 8) = &v10[v29 - (_QWORD)v3];
  *(_QWORD *)(a1 + 24) = v8;
}

__n128 geo::small_vector_base<geo::c3m::Mesh>::push_back(_QWORD *a1, uint64_t *a2)
{
  __int128 **v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  __int128 *v8;
  __int128 *v9;
  __n128 result;
  __int128 *i;
  __int128 v12;

  v4 = (__int128 **)a1[1];
  v5 = 0xD37A6F4DE9BD37A7 * (((uint64_t)v4 - *a1) >> 3) + 1;
  if (a1[3] < v5)
  {
    geo::small_vector_base<geo::c3m::Mesh>::grow((uint64_t)a1, v5);
    v4 = (__int128 **)a1[1];
  }
  v6 = v4 + 4;
  *v4 = (__int128 *)(v4 + 4);
  v4[1] = (__int128 *)(v4 + 4);
  v4[2] = (__int128 *)(v4 + 4);
  v7 = a2[2];
  v4[3] = (__int128 *)a2[3];
  v8 = (__int128 *)*a2;
  if (*a2 == v7)
  {
    v4[1] = (__int128 *)((char *)v6 + a2[1] - (_QWORD)v8);
    for (i = (__int128 *)a2[1]; v8 != i; v8 = (__int128 *)((char *)v8 + 24))
    {
      v12 = *v8;
      v6[2] = *((_QWORD *)v8 + 2);
      *(_OWORD *)v6 = v12;
      v6 += 3;
    }
  }
  else
  {
    v9 = (__int128 *)a2[1];
    *v4 = v8;
    v4[1] = v9;
    *(_OWORD *)a2 = 0u;
    *((_OWORD *)a2 + 1) = 0u;
  }
  v4[10] = 0;
  v4[11] = 0;
  v4[12] = 0;
  *((_OWORD *)v4 + 5) = *((_OWORD *)a2 + 5);
  v4[12] = (__int128 *)a2[12];
  a2[10] = 0;
  a2[11] = 0;
  a2[12] = 0;
  v4[13] = 0;
  v4[14] = 0;
  v4[15] = 0;
  *(_OWORD *)(v4 + 13) = *(_OWORD *)(a2 + 13);
  v4[15] = (__int128 *)a2[15];
  a2[13] = 0;
  a2[14] = 0;
  a2[15] = 0;
  v4[16] = 0;
  v4[17] = 0;
  v4[18] = 0;
  *((_OWORD *)v4 + 8) = *((_OWORD *)a2 + 8);
  v4[18] = (__int128 *)a2[18];
  a2[16] = 0;
  a2[17] = 0;
  a2[18] = 0;
  v4[19] = 0;
  v4[20] = 0;
  v4[21] = 0;
  result = *(__n128 *)(a2 + 19);
  *(__n128 *)(v4 + 19) = result;
  v4[21] = (__int128 *)a2[21];
  a2[19] = 0;
  a2[20] = 0;
  a2[21] = 0;
  v4[22] = (__int128 *)a2[22];
  a1[1] += 184;
  return result;
}

uint64_t `anonymous namespace'::readMeshChunkType0(uint64_t *a1, uint64_t a2, double *a3, _QWORD *a4, __n128 a5)
{
  uint64_t v5;
  unint64_t v6;
  const char *v7;
  uint64_t v9;
  uint64_t result;
  uint64_t v14;
  int64_t v15;
  char *v16;
  int64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  int v24;
  unsigned int i;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  float v34;
  float v35;
  float v36;
  unint64_t v37;
  float *v38;
  float *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  float *v44;
  float *v45;
  uint64_t v46;
  int v47;
  char *v48;
  float *v49;
  char *v50;
  float **v51;
  _BYTE *v52;
  _BYTE *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  __n128 *v62;
  __n128 *v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  float v74;
  float v75;
  unint64_t v76;
  float *v77;
  float *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  _BYTE *v84;
  float *v85;
  char *v86;
  char *v87;
  float *v88;
  char *v89;
  float *v90;
  uint64_t v91;
  uint64_t v92;
  float *v93;
  __n128 *v94;
  __n128 *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  _BYTE *v99;
  int v100;
  _BYTE *v101;
  char *v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  char *v109;
  char *v110;
  __int128 *v111;
  unint64_t v112;
  __int128 v113;
  __int16 v114;
  int v115;
  int v116;
  unint64_t v117;
  unsigned int v118;
  unint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  _BYTE *v126;
  _WORD *v127;
  uint64_t v128;
  int64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  char *v134;
  _OWORD *v135;
  char *v136;
  unint64_t v137;
  __int128 v138;
  __int16 v139;
  void **v140;
  unint64_t v141;
  int64_t v142;

  v6 = a1[1];
  v5 = a1[2];
  if (v5 + 2 > v6)
  {
    v7 = "Number of vertices";
    goto LABEL_5;
  }
  a1[2] = v5 + 2;
  v9 = v5 + 6;
  if (v5 + 6 > v6)
  {
    v7 = "Number of indices";
    goto LABEL_5;
  }
  v14 = *a1;
  v15 = *(unsigned __int16 *)(*a1 + v5);
  a1[2] = v9;
  v141 = *(unsigned int *)(v14 + v9 - 4);
  v142 = v15;
  v16 = (char *)a4[10];
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a4[12] - (_QWORD)v16) >> 2) < v15)
  {
    v17 = v15;
    v18 = (char *)a4[11];
    v19 = 12 * v17;
    v20 = (char *)operator new(12 * v17);
    v21 = &v20[12 * ((v18 - v16) / 12)];
    v22 = v21;
    if (v18 != v16)
    {
      v22 = &v20[12 * ((v18 - v16) / 12)];
      do
      {
        v23 = *(_QWORD *)(v18 - 12);
        v18 -= 12;
        v24 = *((_DWORD *)v18 + 2);
        *(_QWORD *)(v22 - 12) = v23;
        v22 -= 12;
        *((_DWORD *)v22 + 2) = v24;
      }
      while (v18 != v16);
    }
    a4[10] = v22;
    a4[11] = v21;
    a4[12] = &v20[v19];
    v15 = v142;
    if (v16)
      operator delete(v16);
  }
  if ((_DWORD)v15)
  {
    for (i = 0; i < v15; ++i)
    {
      while (1)
      {
        v26 = a1[1];
        v27 = a1[2];
        if (v27 + 2 > v26)
        {
          v7 = "Vertex x value";
          goto LABEL_5;
        }
        a1[2] = v27 + 2;
        v28 = v27 + 4;
        if (v27 + 4 > v26)
        {
          v7 = "Vertex y value";
          goto LABEL_5;
        }
        v29 = *a1;
        v30 = *(unsigned __int16 *)(*a1 + v27);
        a1[2] = v28;
        v31 = v27 + 6;
        if (v31 > v26)
        {
          v7 = "Vertex z value";
          goto LABEL_5;
        }
        a1[2] = v31;
        v32 = *(_QWORD *)a2;
        *(double *)&v33 = *a3 + *(double *)a2 * (double)v30;
        v34 = *(double *)&v33;
        LOWORD(v33) = *(_WORD *)(v29 + v28 - 2);
        v35 = a3[1] + *(double *)(a2 + 8) * (double)v33;
        LOWORD(v32) = *(_WORD *)(v29 + v31 - 2);
        a5.n128_f64[0] = a3[2] + *(double *)(a2 + 16) * (double)v32;
        v36 = a5.n128_f64[0];
        v38 = (float *)a4[11];
        v37 = a4[12];
        if ((unint64_t)v38 >= v37)
          break;
        *v38 = v34;
        v38[1] = v35;
        v38[2] = v36;
        a4[11] = v38 + 3;
        if (++i >= v15)
          goto LABEL_39;
      }
      v39 = (float *)a4[10];
      v40 = 0xAAAAAAAAAAAAAAABLL * (v38 - v39) + 1;
      if (v40 > 0x1555555555555555)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v37 - (_QWORD)v39) >> 2);
      if (2 * v41 > v40)
        v40 = 2 * v41;
      if (v41 >= 0xAAAAAAAAAAAAAAALL)
        v42 = 0x1555555555555555;
      else
        v42 = v40;
      if (v42)
      {
        if (v42 > 0x1555555555555555)
LABEL_126:
          std::__throw_bad_array_new_length[abi:ne180100]();
        v43 = (char *)operator new(12 * v42);
      }
      else
      {
        v43 = 0;
      }
      v44 = (float *)&v43[4 * (v38 - v39)];
      *v44 = v34;
      v44[1] = v35;
      v44[2] = v36;
      v45 = v44;
      if (v38 == v39)
      {
        v15 = v142;
        v50 = &v43[12 * v42];
        v49 = v44 + 3;
        a4[10] = v44;
        a4[11] = v44 + 3;
        a4[12] = v50;
        if (!v38)
          goto LABEL_35;
      }
      else
      {
        v15 = v142;
        do
        {
          v46 = *(_QWORD *)(v38 - 3);
          v38 -= 3;
          v47 = *((_DWORD *)v38 + 2);
          *(_QWORD *)(v45 - 3) = v46;
          v45 -= 3;
          *((_DWORD *)v45 + 2) = v47;
        }
        while (v38 != v39);
        v38 = (float *)a4[10];
        v48 = &v43[12 * v42];
        v49 = v44 + 3;
        a4[10] = v45;
        a4[11] = v44 + 3;
        a4[12] = v48;
        if (!v38)
          goto LABEL_35;
      }
      operator delete(v38);
LABEL_35:
      a4[11] = v49;
    }
  }
LABEL_39:
  v51 = (float **)(a4 + 13);
  v52 = (_BYTE *)a4[13];
  if (v15 > (unint64_t)((uint64_t)(a4[15] - (_QWORD)v52) >> 3))
  {
    v53 = (_BYTE *)a4[14];
    v54 = (char *)operator new(8 * v15);
    v55 = v53 - v52;
    v56 = &v54[(v53 - v52) & 0xFFFFFFFFFFFFFFF8];
    v57 = v56;
    if (v53 == v52)
      goto LABEL_51;
    if ((unint64_t)(v55 - 8) >= 0x58)
    {
      v57 = &v54[(v53 - v52) & 0xFFFFFFFFFFFFFFF8];
      if ((unint64_t)(v53 - &v54[v55 & 0xFFFFFFFFFFFFFFF8]) >= 0x20)
      {
        v58 = v55 >> 3;
        v59 = ((unint64_t)(v55 - 8) >> 3) + 1;
        v60 = 8 * (v59 & 0x3FFFFFFFFFFFFFFCLL);
        v61 = &v53[-v60];
        v57 = &v56[-v60];
        v62 = (__n128 *)&v54[8 * v58 - 16];
        v63 = (__n128 *)(v53 - 16);
        v64 = v59 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          a5 = *v63;
          v62[-1] = v63[-1];
          *v62 = a5;
          v62 -= 2;
          v63 -= 2;
          v64 -= 4;
        }
        while (v64);
        v53 = v61;
        if (v59 == (v59 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_51:
          a4[13] = v57;
          a4[14] = v56;
          a4[15] = &v54[8 * v15];
          if (v52)
            operator delete(v52);
          goto LABEL_53;
        }
      }
    }
    else
    {
      v57 = &v54[(v53 - v52) & 0xFFFFFFFFFFFFFFF8];
    }
    do
    {
      v65 = *((_QWORD *)v53 - 1);
      v53 -= 8;
      *((_QWORD *)v57 - 1) = v65;
      v57 -= 8;
    }
    while (v53 != v52);
    goto LABEL_51;
  }
LABEL_53:
  if ((_DWORD)v15)
  {
    v66 = 0;
    while (1)
    {
      while (1)
      {
        v67 = a1[1];
        v68 = a1[2];
        v69 = v68 + 2;
        if (v68 + 2 > v67)
        {
          v7 = "Texture u value";
          goto LABEL_5;
        }
        a1[2] = v69;
        v70 = v68 + 4;
        if (v70 > v67)
        {
          v7 = "Texture v value";
          goto LABEL_5;
        }
        v71 = *a1;
        v72 = *a1 + v69;
        a1[2] = v70;
        a5.n128_u16[0] = *(_WORD *)(v72 - 2);
        *(float *)&v73 = (float)a5.n128_u32[0];
        v74 = *(float *)&v73 * 0.000015259;
        LOWORD(v73) = *(_WORD *)(v71 + v70 - 2);
        a5.n128_f32[0] = (float)v73;
        v75 = a5.n128_f32[0] * 0.000015259;
        v77 = (float *)a4[14];
        v76 = a4[15];
        if ((unint64_t)v77 >= v76)
          break;
        *v77 = v74;
        v77[1] = v75;
        a4[14] = v77 + 2;
        if (++v66 >= v15)
          goto LABEL_81;
      }
      v78 = *v51;
      v79 = (char *)v77 - (char *)*v51;
      v80 = v79 >> 3;
      v81 = (v79 >> 3) + 1;
      if (v81 >> 61)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v82 = v76 - (_QWORD)v78;
      if (v82 >> 2 > v81)
        v81 = v82 >> 2;
      v83 = (unint64_t)v82 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v81;
      if (v83)
      {
        if (v83 >> 61)
          goto LABEL_126;
        v84 = operator new(8 * v83);
        v85 = (float *)&v84[8 * v80];
        *v85 = v74;
        v85[1] = v75;
        v86 = (char *)((char *)v77 - (char *)v78);
        if (v77 == v78)
        {
LABEL_71:
          v89 = &v84[8 * v83];
          v90 = v85 + 2;
          a4[13] = v85;
          a4[14] = v85 + 2;
          a4[15] = v89;
          if (!v77)
            goto LABEL_80;
LABEL_79:
          operator delete(v77);
          goto LABEL_80;
        }
      }
      else
      {
        v84 = 0;
        v85 = (float *)(8 * v80);
        *v85 = v74;
        v85[1] = v75;
        v86 = (char *)((char *)v77 - (char *)v78);
        if (v77 == v78)
          goto LABEL_71;
      }
      v87 = v86 - 8;
      if ((unint64_t)(v86 - 8) < 0x58)
        break;
      v88 = v85;
      if ((unint64_t)((char *)v77 - &v84[v79]) < 0x20)
        goto LABEL_77;
      v91 = ((unint64_t)v87 >> 3) + 1;
      v92 = 8 * (v91 & 0x3FFFFFFFFFFFFFFCLL);
      v93 = &v77[v92 / 0xFFFFFFFFFFFFFFFCLL];
      v88 = &v85[v92 / 0xFFFFFFFFFFFFFFFCLL];
      v94 = (__n128 *)&v84[8 * v80 - 16];
      v95 = (__n128 *)(v77 - 4);
      v96 = v91 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        a5 = *v95;
        v94[-1] = v95[-1];
        *v94 = a5;
        v94 -= 2;
        v95 -= 2;
        v96 -= 4;
      }
      while (v96);
      v77 = v93;
      if (v91 != (v91 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_77;
LABEL_78:
      v77 = *v51;
      v98 = &v84[8 * v83];
      v90 = v85 + 2;
      a4[13] = v88;
      a4[14] = v85 + 2;
      a4[15] = v98;
      if (v77)
        goto LABEL_79;
LABEL_80:
      a4[14] = v90;
      if (++v66 >= v15)
        goto LABEL_81;
    }
    v88 = v85;
    do
    {
LABEL_77:
      v97 = *((_QWORD *)v77 - 1);
      v77 -= 2;
      *((_QWORD *)v88 - 1) = v97;
      v88 -= 2;
    }
    while (v77 != v78);
    goto LABEL_78;
  }
LABEL_81:
  v99 = (_BYTE *)a4[16];
  v140 = (void **)(a4 + 16);
  v100 = v141;
  if (v141 <= (uint64_t)(a4[18] - (_QWORD)v99) >> 1)
    goto LABEL_94;
  v101 = (_BYTE *)a4[17];
  v102 = (char *)operator new(2 * v141);
  v103 = v101 - v99;
  v104 = &v102[(v101 - v99) & 0xFFFFFFFFFFFFFFFELL];
  v105 = v104;
  if (v101 != v99)
  {
    if ((unint64_t)(v103 - 2) < 0x1E)
    {
      v105 = &v102[(v101 - v99) & 0xFFFFFFFFFFFFFFFELL];
      do
      {
LABEL_91:
        v114 = *((_WORD *)v101 - 1);
        v101 -= 2;
        *((_WORD *)v105 - 1) = v114;
        v105 -= 2;
      }
      while (v101 != v99);
      goto LABEL_92;
    }
    v105 = &v102[(v101 - v99) & 0xFFFFFFFFFFFFFFFELL];
    if ((unint64_t)(v101 - &v102[v103 & 0xFFFFFFFFFFFFFFFELL]) < 0x20)
      goto LABEL_91;
    v106 = v103 >> 1;
    v107 = ((unint64_t)(v103 - 2) >> 1) + 1;
    v108 = 2 * (v107 & 0xFFFFFFFFFFFFFFF0);
    v109 = &v101[-v108];
    v105 = &v104[-v108];
    v110 = &v102[2 * v106 - 16];
    v111 = (__int128 *)(v101 - 16);
    v112 = v107 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v113 = *v111;
      *((_OWORD *)v110 - 1) = *(v111 - 1);
      *(_OWORD *)v110 = v113;
      v110 -= 32;
      v111 -= 2;
      v112 -= 16;
    }
    while (v112);
    v101 = v109;
    if (v107 != (v107 & 0xFFFFFFFFFFFFFFF0))
      goto LABEL_91;
  }
LABEL_92:
  a4[16] = v105;
  a4[17] = v104;
  a4[18] = &v102[2 * v141];
  v100 = v141;
  if (v99)
    operator delete(v99);
LABEL_94:
  v115 = v100;
  if (!v100)
    return 1;
  v116 = 0;
  while (1)
  {
    v117 = a1[2] + 2;
    if (v117 > a1[1])
    {
      v7 = "Index value";
      goto LABEL_5;
    }
    a1[2] = v117;
    v118 = *(unsigned __int16 *)(*a1 + v117 - 2);
    if (v118 >= v15)
      break;
    v120 = (char *)a4[17];
    v119 = a4[18];
    if ((unint64_t)v120 < v119)
    {
      *(_WORD *)v120 = v118;
      a4[17] = v120 + 2;
      ++v116;
      result = 1;
      if (v116 == v115)
        return result;
    }
    else
    {
      v121 = (char *)*v140;
      v15 = v120 - (_BYTE *)*v140;
      if (v15 <= -3)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v122 = v15 >> 1;
      v123 = v119 - (_QWORD)v121;
      if (v123 <= (v15 >> 1) + 1)
        v124 = v122 + 1;
      else
        v124 = v123;
      if (v123 >= 0x7FFFFFFFFFFFFFFELL)
        v125 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v125 = v124;
      if (v125)
      {
        if (v125 < 0)
          goto LABEL_126;
        v126 = operator new(2 * v125);
        v127 = &v126[2 * v122];
        *v127 = v118;
        v128 = (uint64_t)(v127 + 1);
        v129 = v120 - v121;
        if (v120 == v121)
        {
LABEL_113:
          LODWORD(v15) = v142;
          goto LABEL_119;
        }
      }
      else
      {
        v126 = 0;
        v127 = (_WORD *)(2 * v122);
        *(_WORD *)(2 * v122) = v118;
        v128 = 2 * v122 + 2;
        v129 = v120 - v121;
        if (v120 == v121)
          goto LABEL_113;
      }
      v130 = v129 - 2;
      if (v130 < 0x1E)
      {
        LODWORD(v15) = v142;
        do
        {
LABEL_118:
          v139 = *((_WORD *)v120 - 1);
          v120 -= 2;
          *--v127 = v139;
        }
        while (v120 != v121);
        goto LABEL_119;
      }
      v131 = v120 - v126 - (v15 & 0xFFFFFFFFFFFFFFFELL);
      LODWORD(v15) = v142;
      if (v131 < 0x20)
        goto LABEL_118;
      v132 = (v130 >> 1) + 1;
      v133 = 2 * (v132 & 0xFFFFFFFFFFFFFFF0);
      v134 = &v120[-v133];
      v127 = (_WORD *)((char *)v127 - v133);
      v135 = &v126[2 * v122 - 16];
      v136 = v120 - 16;
      v137 = v132 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v138 = *(_OWORD *)v136;
        *(v135 - 1) = *((_OWORD *)v136 - 1);
        *v135 = v138;
        v135 -= 2;
        v136 -= 32;
        v137 -= 16;
      }
      while (v137);
      v120 = v134;
      if (v132 != (v132 & 0xFFFFFFFFFFFFFFF0))
        goto LABEL_118;
LABEL_119:
      a4[16] = v127;
      a4[17] = v128;
      a4[18] = &v126[2 * v125];
      if (v121)
        operator delete(v121);
      v115 = v141;
      a4[17] = v128;
      ++v116;
      result = 1;
      if (v116 == (_DWORD)v141)
        return result;
    }
  }
  v7 = "Invalid index";
LABEL_5:
  printf("Failed to read C3m file - %s", v7);
  return 0;
}

uint64_t `anonymous namespace'::readMeshChunkType1(uint64_t *a1, uint64_t a2, double *a3, _QWORD *a4, __n128 a5, double a6, double a7)
{
  uint64_t v7;
  unint64_t v8;
  const char *v9;
  uint64_t v11;
  uint64_t result;
  uint64_t v16;
  int64_t v17;
  char *v18;
  int64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  int v26;
  unsigned int i;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unint64_t v34;
  unint64_t v35;
  double v36;
  double v37;
  double v38;
  float v39;
  float v40;
  float v41;
  unint64_t v42;
  float *v43;
  float *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  float *v49;
  float *v50;
  uint64_t v51;
  int v52;
  char *v53;
  float *v54;
  char *v55;
  float **v56;
  _BYTE *v57;
  _BYTE *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char *v66;
  __n128 *v67;
  __n128 *v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  float v76;
  float v77;
  unint64_t v78;
  float *v79;
  float *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  _BYTE *v86;
  float *v87;
  char *v88;
  char *v89;
  float *v90;
  char *v91;
  float *v92;
  uint64_t v93;
  uint64_t v94;
  float *v95;
  __n128 *v96;
  __n128 *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  _BYTE *v101;
  int v102;
  _BYTE *v103;
  char *v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  char *v111;
  char *v112;
  __int128 *v113;
  unint64_t v114;
  __int128 v115;
  __int16 v116;
  int v117;
  int v118;
  unint64_t v119;
  unsigned int v120;
  unint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  _BYTE *v128;
  _WORD *v129;
  uint64_t v130;
  int64_t v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  char *v136;
  _OWORD *v137;
  char *v138;
  unint64_t v139;
  __int128 v140;
  __int16 v141;
  void **v142;
  unint64_t v143;
  int64_t v144;

  v8 = a1[1];
  v7 = a1[2];
  if (v7 + 2 > v8)
  {
    v9 = "Number of vertices";
    goto LABEL_5;
  }
  a1[2] = v7 + 2;
  v11 = v7 + 6;
  if (v7 + 6 > v8)
  {
    v9 = "Number of indices";
    goto LABEL_5;
  }
  v16 = *a1;
  v17 = *(unsigned __int16 *)(*a1 + v7);
  a1[2] = v11;
  v143 = *(unsigned int *)(v16 + v11 - 4);
  v144 = v17;
  v18 = (char *)a4[10];
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a4[12] - (_QWORD)v18) >> 2) < v17)
  {
    v19 = v17;
    v20 = (char *)a4[11];
    v21 = 12 * v19;
    v22 = (char *)operator new(12 * v19);
    v23 = &v22[12 * ((v20 - v18) / 12)];
    v24 = v23;
    if (v20 != v18)
    {
      v24 = &v22[12 * ((v20 - v18) / 12)];
      do
      {
        v25 = *(_QWORD *)(v20 - 12);
        v20 -= 12;
        v26 = *((_DWORD *)v20 + 2);
        *(_QWORD *)(v24 - 12) = v25;
        v24 -= 12;
        *((_DWORD *)v24 + 2) = v26;
      }
      while (v20 != v18);
    }
    a4[10] = v24;
    a4[11] = v23;
    a4[12] = &v22[v21];
    v17 = v144;
    if (v18)
      operator delete(v18);
  }
  if ((_DWORD)v17)
  {
    for (i = 0; i < v17; ++i)
    {
      while (1)
      {
        v28 = a1[1];
        v29 = a1[2];
        v30 = v29 + 1;
        if (v29 + 1 > v28)
        {
          v9 = "Vertex x value";
          goto LABEL_5;
        }
        a1[2] = v30;
        v31 = v29 + 2;
        if (v29 + 2 > v28)
        {
          v9 = "Vertex y value";
          goto LABEL_5;
        }
        v32 = *a1;
        v33 = *(unsigned __int8 *)(*a1 + v29);
        a1[2] = v31;
        v34 = v29 + 3;
        if (v34 > v28)
        {
          v9 = "Vertex z value";
          goto LABEL_5;
        }
        v35 = *(_QWORD *)a2;
        v36 = *(double *)(a2 + 8);
        v37 = a3[1];
        v38 = *a3 + *(double *)a2 * (double)v33;
        LOBYTE(v35) = *(_BYTE *)(v32 + v30);
        a1[2] = v34;
        v39 = v38;
        v40 = v37 + v36 * (double)v35;
        LOBYTE(v35) = *(_BYTE *)(v32 + v31);
        a7 = a3[2];
        a5.n128_f64[0] = a7 + *(double *)(a2 + 16) * (double)v35;
        v41 = a5.n128_f64[0];
        v43 = (float *)a4[11];
        v42 = a4[12];
        if ((unint64_t)v43 >= v42)
          break;
        *v43 = v39;
        v43[1] = v40;
        v43[2] = v41;
        a4[11] = v43 + 3;
        if (++i >= v17)
          goto LABEL_39;
      }
      v44 = (float *)a4[10];
      v45 = 0xAAAAAAAAAAAAAAABLL * (v43 - v44) + 1;
      if (v45 > 0x1555555555555555)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v46 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v42 - (_QWORD)v44) >> 2);
      if (2 * v46 > v45)
        v45 = 2 * v46;
      if (v46 >= 0xAAAAAAAAAAAAAAALL)
        v47 = 0x1555555555555555;
      else
        v47 = v45;
      if (v47)
      {
        if (v47 > 0x1555555555555555)
LABEL_126:
          std::__throw_bad_array_new_length[abi:ne180100]();
        v48 = (char *)operator new(12 * v47);
      }
      else
      {
        v48 = 0;
      }
      v49 = (float *)&v48[4 * (v43 - v44)];
      *v49 = v39;
      v49[1] = v40;
      v49[2] = v41;
      v50 = v49;
      if (v43 == v44)
      {
        v17 = v144;
        v55 = &v48[12 * v47];
        v54 = v49 + 3;
        a4[10] = v49;
        a4[11] = v49 + 3;
        a4[12] = v55;
        if (!v43)
          goto LABEL_35;
      }
      else
      {
        v17 = v144;
        do
        {
          v51 = *(_QWORD *)(v43 - 3);
          v43 -= 3;
          v52 = *((_DWORD *)v43 + 2);
          *(_QWORD *)(v50 - 3) = v51;
          v50 -= 3;
          *((_DWORD *)v50 + 2) = v52;
        }
        while (v43 != v44);
        v43 = (float *)a4[10];
        v53 = &v48[12 * v47];
        v54 = v49 + 3;
        a4[10] = v50;
        a4[11] = v49 + 3;
        a4[12] = v53;
        if (!v43)
          goto LABEL_35;
      }
      operator delete(v43);
LABEL_35:
      a4[11] = v54;
    }
  }
LABEL_39:
  v56 = (float **)(a4 + 13);
  v57 = (_BYTE *)a4[13];
  if (v17 > (unint64_t)((uint64_t)(a4[15] - (_QWORD)v57) >> 3))
  {
    v58 = (_BYTE *)a4[14];
    v59 = (char *)operator new(8 * v17);
    v60 = v58 - v57;
    v61 = &v59[(v58 - v57) & 0xFFFFFFFFFFFFFFF8];
    v62 = v61;
    if (v58 == v57)
      goto LABEL_51;
    if ((unint64_t)(v60 - 8) >= 0x58)
    {
      v62 = &v59[(v58 - v57) & 0xFFFFFFFFFFFFFFF8];
      if ((unint64_t)(v58 - &v59[v60 & 0xFFFFFFFFFFFFFFF8]) >= 0x20)
      {
        v63 = v60 >> 3;
        v64 = ((unint64_t)(v60 - 8) >> 3) + 1;
        v65 = 8 * (v64 & 0x3FFFFFFFFFFFFFFCLL);
        v66 = &v58[-v65];
        v62 = &v61[-v65];
        v67 = (__n128 *)&v59[8 * v63 - 16];
        v68 = (__n128 *)(v58 - 16);
        v69 = v64 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          a5 = *v68;
          v67[-1] = v68[-1];
          *v67 = a5;
          v67 -= 2;
          v68 -= 2;
          v69 -= 4;
        }
        while (v69);
        v58 = v66;
        if (v64 == (v64 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_51:
          a4[13] = v62;
          a4[14] = v61;
          a4[15] = &v59[8 * v17];
          if (v57)
            operator delete(v57);
          goto LABEL_53;
        }
      }
    }
    else
    {
      v62 = &v59[(v58 - v57) & 0xFFFFFFFFFFFFFFF8];
    }
    do
    {
      v70 = *((_QWORD *)v58 - 1);
      v58 -= 8;
      *((_QWORD *)v62 - 1) = v70;
      v62 -= 8;
    }
    while (v58 != v57);
    goto LABEL_51;
  }
LABEL_53:
  if ((_DWORD)v17)
  {
    v71 = 0;
    while (1)
    {
      while (1)
      {
        v73 = a1[1];
        v72 = a1[2];
        v74 = v72 + 1;
        if (v72 + 1 > v73)
        {
          v9 = "Texture u value";
          goto LABEL_5;
        }
        a1[2] = v74;
        if (v72 + 2 > v73)
        {
          v9 = "Texture v value";
          goto LABEL_5;
        }
        v75 = *a1;
        a5.n128_u8[0] = *(_BYTE *)(*a1 + v72);
        a1[2] = v72 + 2;
        LOBYTE(a7) = *(_BYTE *)(v75 + v74);
        v76 = (float)a5.n128_u32[0] * 0.0039216;
        a5.n128_f32[0] = (float)LODWORD(a7);
        v77 = (float)LODWORD(a7) * 0.0039216;
        v79 = (float *)a4[14];
        v78 = a4[15];
        if ((unint64_t)v79 >= v78)
          break;
        *v79 = v76;
        v79[1] = v77;
        a4[14] = v79 + 2;
        if (++v71 >= v17)
          goto LABEL_81;
      }
      v80 = *v56;
      v81 = (char *)v79 - (char *)*v56;
      v82 = v81 >> 3;
      v83 = (v81 >> 3) + 1;
      if (v83 >> 61)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v84 = v78 - (_QWORD)v80;
      if (v84 >> 2 > v83)
        v83 = v84 >> 2;
      v85 = (unint64_t)v84 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v83;
      if (v85)
      {
        if (v85 >> 61)
          goto LABEL_126;
        v86 = operator new(8 * v85);
        v87 = (float *)&v86[8 * v82];
        *v87 = v76;
        v87[1] = v77;
        v88 = (char *)((char *)v79 - (char *)v80);
        if (v79 == v80)
        {
LABEL_71:
          v91 = &v86[8 * v85];
          v92 = v87 + 2;
          a4[13] = v87;
          a4[14] = v87 + 2;
          a4[15] = v91;
          if (!v79)
            goto LABEL_80;
LABEL_79:
          operator delete(v79);
          goto LABEL_80;
        }
      }
      else
      {
        v86 = 0;
        v87 = (float *)(8 * v82);
        *v87 = v76;
        v87[1] = v77;
        v88 = (char *)((char *)v79 - (char *)v80);
        if (v79 == v80)
          goto LABEL_71;
      }
      v89 = v88 - 8;
      if ((unint64_t)(v88 - 8) < 0x58)
        break;
      v90 = v87;
      if ((unint64_t)((char *)v79 - &v86[v81]) < 0x20)
        goto LABEL_77;
      v93 = ((unint64_t)v89 >> 3) + 1;
      v94 = 8 * (v93 & 0x3FFFFFFFFFFFFFFCLL);
      v95 = &v79[v94 / 0xFFFFFFFFFFFFFFFCLL];
      v90 = &v87[v94 / 0xFFFFFFFFFFFFFFFCLL];
      v96 = (__n128 *)&v86[8 * v82 - 16];
      v97 = (__n128 *)(v79 - 4);
      v98 = v93 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        a5 = *v97;
        v96[-1] = v97[-1];
        *v96 = a5;
        v96 -= 2;
        v97 -= 2;
        v98 -= 4;
      }
      while (v98);
      v79 = v95;
      if (v93 != (v93 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_77;
LABEL_78:
      v79 = *v56;
      v100 = &v86[8 * v85];
      v92 = v87 + 2;
      a4[13] = v90;
      a4[14] = v87 + 2;
      a4[15] = v100;
      if (v79)
        goto LABEL_79;
LABEL_80:
      a4[14] = v92;
      if (++v71 >= v17)
        goto LABEL_81;
    }
    v90 = v87;
    do
    {
LABEL_77:
      v99 = *((_QWORD *)v79 - 1);
      v79 -= 2;
      *((_QWORD *)v90 - 1) = v99;
      v90 -= 2;
    }
    while (v79 != v80);
    goto LABEL_78;
  }
LABEL_81:
  v101 = (_BYTE *)a4[16];
  v142 = (void **)(a4 + 16);
  v102 = v143;
  if (v143 <= (uint64_t)(a4[18] - (_QWORD)v101) >> 1)
    goto LABEL_94;
  v103 = (_BYTE *)a4[17];
  v104 = (char *)operator new(2 * v143);
  v105 = v103 - v101;
  v106 = &v104[(v103 - v101) & 0xFFFFFFFFFFFFFFFELL];
  v107 = v106;
  if (v103 != v101)
  {
    if ((unint64_t)(v105 - 2) < 0x1E)
    {
      v107 = &v104[(v103 - v101) & 0xFFFFFFFFFFFFFFFELL];
      do
      {
LABEL_91:
        v116 = *((_WORD *)v103 - 1);
        v103 -= 2;
        *((_WORD *)v107 - 1) = v116;
        v107 -= 2;
      }
      while (v103 != v101);
      goto LABEL_92;
    }
    v107 = &v104[(v103 - v101) & 0xFFFFFFFFFFFFFFFELL];
    if ((unint64_t)(v103 - &v104[v105 & 0xFFFFFFFFFFFFFFFELL]) < 0x20)
      goto LABEL_91;
    v108 = v105 >> 1;
    v109 = ((unint64_t)(v105 - 2) >> 1) + 1;
    v110 = 2 * (v109 & 0xFFFFFFFFFFFFFFF0);
    v111 = &v103[-v110];
    v107 = &v106[-v110];
    v112 = &v104[2 * v108 - 16];
    v113 = (__int128 *)(v103 - 16);
    v114 = v109 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v115 = *v113;
      *((_OWORD *)v112 - 1) = *(v113 - 1);
      *(_OWORD *)v112 = v115;
      v112 -= 32;
      v113 -= 2;
      v114 -= 16;
    }
    while (v114);
    v103 = v111;
    if (v109 != (v109 & 0xFFFFFFFFFFFFFFF0))
      goto LABEL_91;
  }
LABEL_92:
  a4[16] = v107;
  a4[17] = v106;
  a4[18] = &v104[2 * v143];
  v102 = v143;
  if (v101)
    operator delete(v101);
LABEL_94:
  v117 = v102;
  if (!v102)
    return 1;
  v118 = 0;
  while (1)
  {
    v119 = a1[2] + 2;
    if (v119 > a1[1])
    {
      v9 = "Index value";
      goto LABEL_5;
    }
    a1[2] = v119;
    v120 = *(unsigned __int16 *)(*a1 + v119 - 2);
    if (v120 >= v17)
      break;
    v122 = (char *)a4[17];
    v121 = a4[18];
    if ((unint64_t)v122 < v121)
    {
      *(_WORD *)v122 = v120;
      a4[17] = v122 + 2;
      ++v118;
      result = 1;
      if (v118 == v117)
        return result;
    }
    else
    {
      v123 = (char *)*v142;
      v17 = v122 - (_BYTE *)*v142;
      if (v17 <= -3)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v124 = v17 >> 1;
      v125 = v121 - (_QWORD)v123;
      if (v125 <= (v17 >> 1) + 1)
        v126 = v124 + 1;
      else
        v126 = v125;
      if (v125 >= 0x7FFFFFFFFFFFFFFELL)
        v127 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v127 = v126;
      if (v127)
      {
        if (v127 < 0)
          goto LABEL_126;
        v128 = operator new(2 * v127);
        v129 = &v128[2 * v124];
        *v129 = v120;
        v130 = (uint64_t)(v129 + 1);
        v131 = v122 - v123;
        if (v122 == v123)
        {
LABEL_113:
          LODWORD(v17) = v144;
          goto LABEL_119;
        }
      }
      else
      {
        v128 = 0;
        v129 = (_WORD *)(2 * v124);
        *(_WORD *)(2 * v124) = v120;
        v130 = 2 * v124 + 2;
        v131 = v122 - v123;
        if (v122 == v123)
          goto LABEL_113;
      }
      v132 = v131 - 2;
      if (v132 < 0x1E)
      {
        LODWORD(v17) = v144;
        do
        {
LABEL_118:
          v141 = *((_WORD *)v122 - 1);
          v122 -= 2;
          *--v129 = v141;
        }
        while (v122 != v123);
        goto LABEL_119;
      }
      v133 = v122 - v128 - (v17 & 0xFFFFFFFFFFFFFFFELL);
      LODWORD(v17) = v144;
      if (v133 < 0x20)
        goto LABEL_118;
      v134 = (v132 >> 1) + 1;
      v135 = 2 * (v134 & 0xFFFFFFFFFFFFFFF0);
      v136 = &v122[-v135];
      v129 = (_WORD *)((char *)v129 - v135);
      v137 = &v128[2 * v124 - 16];
      v138 = v122 - 16;
      v139 = v134 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v140 = *(_OWORD *)v138;
        *(v137 - 1) = *((_OWORD *)v138 - 1);
        *v137 = v140;
        v137 -= 2;
        v138 -= 32;
        v139 -= 16;
      }
      while (v139);
      v122 = v136;
      if (v134 != (v134 & 0xFFFFFFFFFFFFFFF0))
        goto LABEL_118;
LABEL_119:
      a4[16] = v129;
      a4[17] = v130;
      a4[18] = &v128[2 * v127];
      if (v123)
        operator delete(v123);
      v117 = v143;
      a4[17] = v130;
      ++v118;
      result = 1;
      if (v118 == (_DWORD)v143)
        return result;
    }
  }
  v9 = "Invalid index";
LABEL_5:
  printf("Failed to read C3m file - %s", v9);
  return 0;
}

uint64_t `anonymous namespace'::readMeshChunkType2(unsigned __int16 **a1, float64x2_t *a2, float64x2_t *a3, _QWORD *a4)
{
  unsigned __int16 *v4;
  unint64_t v5;
  const char *v6;
  uint64_t result;
  int64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  int v18;
  _BYTE *v19;
  _BYTE *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  __int128 *v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint64x2_t v40;
  float32x2_t v41;
  float v42;
  unint64_t v43;
  float32x2_t *v44;
  _DWORD *v45;
  float32x2_t *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  float32x2_t *v51;
  float32x2_t *v52;
  float32x2_t v53;
  __int32 v54;
  float v55;
  float v56;
  unint64_t v57;
  float *v58;
  float *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  _BYTE *v65;
  float *v66;
  char *v67;
  char *v68;
  float *v69;
  uint64_t v70;
  uint64_t v71;
  float *v72;
  _OWORD *v73;
  float *v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  _BYTE *v78;
  int v79;
  _BYTE *v80;
  char *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  char *v88;
  char *v89;
  __int128 *v90;
  unint64_t v91;
  __int128 v92;
  __int16 v93;
  int v94;
  int v95;
  unint64_t v96;
  unsigned int v97;
  unint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  _BYTE *v105;
  _WORD *v106;
  uint64_t v107;
  int64_t v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  char *v113;
  _OWORD *v114;
  char *v115;
  unint64_t v116;
  __int128 v117;
  __int16 v118;
  size_t __sz;
  float **v120;
  unsigned int v121;
  void **v123;
  _BYTE v124[4];
  unsigned int v125;
  _QWORD v126[3];
  char v127;

  v4 = *a1;
  v5 = (unint64_t)a1[1];
  v126[0] = *a1;
  v126[1] = v5;
  v127 = 0;
  if (v5 <= 1)
  {
    v6 = "Number of vertices";
    goto LABEL_5;
  }
  if (v5 <= 5)
  {
    v6 = "Number of indices";
    goto LABEL_5;
  }
  v11 = *v4;
  __sz = *(unsigned int *)(v4 + 1);
  v126[2] = 6;
  v12 = (char *)a4[10];
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a4[12] - (_QWORD)v12) >> 2) < v11)
  {
    v13 = (char *)a4[11];
    v14 = (char *)operator new(12 * v11);
    v15 = &v14[12 * ((v13 - v12) / 12)];
    v16 = v15;
    if (v13 != v12)
    {
      v16 = &v14[12 * ((v13 - v12) / 12)];
      do
      {
        v17 = *(_QWORD *)(v13 - 12);
        v13 -= 12;
        v18 = *((_DWORD *)v13 + 2);
        *(_QWORD *)(v16 - 12) = v17;
        v16 -= 12;
        *((_DWORD *)v16 + 2) = v18;
      }
      while (v13 != v12);
    }
    a4[10] = v16;
    a4[11] = v15;
    a4[12] = &v14[12 * v11];
    if (v12)
      operator delete(v12);
  }
  v19 = (_BYTE *)a4[13];
  v120 = (float **)(a4 + 13);
  if (v11 > (unint64_t)((uint64_t)(a4[15] - (_QWORD)v19) >> 3))
  {
    v20 = (_BYTE *)a4[14];
    v21 = (char *)operator new(8 * v11);
    v22 = v20 - v19;
    v23 = &v21[(v20 - v19) & 0xFFFFFFFFFFFFFFF8];
    v24 = v23;
    if (v20 == v19)
      goto LABEL_22;
    if ((unint64_t)(v22 - 8) >= 0x58)
    {
      v24 = &v21[(v20 - v19) & 0xFFFFFFFFFFFFFFF8];
      if (v20 - v21 - (v22 & 0xFFFFFFFFFFFFFFF8) >= 0x20)
      {
        v25 = v22 >> 3;
        v26 = ((unint64_t)(v22 - 8) >> 3) + 1;
        v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
        v28 = &v20[-v27];
        v24 = &v23[-v27];
        v29 = &v21[8 * v25 - 16];
        v30 = (__int128 *)(v20 - 16);
        v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v32 = *v30;
          *((_OWORD *)v29 - 1) = *(v30 - 1);
          *(_OWORD *)v29 = v32;
          v29 -= 32;
          v30 -= 2;
          v31 -= 4;
        }
        while (v31);
        v20 = v28;
        if (v26 == (v26 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_22:
          a4[13] = v24;
          a4[14] = v23;
          a4[15] = &v21[8 * v11];
          if (v19)
            operator delete(v19);
          goto LABEL_24;
        }
      }
    }
    else
    {
      v24 = &v21[(v20 - v19) & 0xFFFFFFFFFFFFFFF8];
    }
    do
    {
      v33 = *((_QWORD *)v20 - 1);
      v20 -= 8;
      *((_QWORD *)v24 - 1) = v33;
      v24 -= 8;
    }
    while (v20 != v19);
    goto LABEL_22;
  }
LABEL_24:
  v121 = v11;
  if ((_DWORD)v11)
  {
    v34 = 0;
    while (1)
    {
      geo::ibitstream::readUIntBits((uint64_t)v126, 0xAu, (uint64_t)v124);
      if (!v124[0])
      {
        v6 = "Vertex x value";
        goto LABEL_5;
      }
      v35 = v125;
      geo::ibitstream::readUIntBits((uint64_t)v126, 0xAu, (uint64_t)v124);
      if (!v124[0])
      {
        v6 = "Vertex y value";
        goto LABEL_5;
      }
      v36 = v125;
      geo::ibitstream::readUIntBits((uint64_t)v126, 0xAu, (uint64_t)v124);
      if (!v124[0])
      {
        v6 = "Vertex z value";
        goto LABEL_5;
      }
      v37 = v125;
      geo::ibitstream::readUIntBits((uint64_t)v126, 9u, (uint64_t)v124);
      if (!v124[0])
      {
        v6 = "Texture u value";
        goto LABEL_5;
      }
      v38 = v125;
      geo::ibitstream::readUIntBits((uint64_t)v126, 9u, (uint64_t)v124);
      if (!v124[0])
      {
        v6 = "Texture v value";
        goto LABEL_5;
      }
      v39 = v125;
      v40.i64[0] = v35;
      v40.i64[1] = v36;
      v41 = vcvt_f32_f64(vmlaq_f64(*a3, *a2, vcvtq_f64_u64(v40)));
      v42 = a3[1].f64[0] + a2[1].f64[0] * (double)v37;
      v44 = (float32x2_t *)a4[11];
      v43 = a4[12];
      if ((unint64_t)v44 >= v43)
      {
        v46 = (float32x2_t *)a4[10];
        v47 = 0xAAAAAAAAAAAAAAABLL * (((char *)v44 - (char *)v46) >> 2) + 1;
        if (v47 > 0x1555555555555555)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v48 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v43 - (_QWORD)v46) >> 2);
        if (2 * v48 > v47)
          v47 = 2 * v48;
        if (v48 >= 0xAAAAAAAAAAAAAAALL)
          v49 = 0x1555555555555555;
        else
          v49 = v47;
        if (v49)
        {
          if (v49 > 0x1555555555555555)
            goto LABEL_120;
          v50 = (char *)operator new(12 * v49);
        }
        else
        {
          v50 = 0;
        }
        v51 = (float32x2_t *)&v50[4 * (((char *)v44 - (char *)v46) >> 2)];
        *v51 = v41;
        v51[1].f32[0] = v42;
        v52 = v51;
        if (v44 != v46)
        {
          do
          {
            v53 = *(float32x2_t *)((char *)v44 - 12);
            v44 = (float32x2_t *)((char *)v44 - 12);
            v54 = v44[1].i32[0];
            *(float32x2_t *)((char *)v52 - 12) = v53;
            v52 = (float32x2_t *)((char *)v52 - 12);
            v52[1].i32[0] = v54;
          }
          while (v44 != v46);
          v44 = (float32x2_t *)a4[10];
        }
        v45 = (_DWORD *)&v51[1] + 1;
        a4[10] = v52;
        a4[11] = (char *)v51 + 12;
        a4[12] = &v50[12 * v49];
        if (v44)
          operator delete(v44);
      }
      else
      {
        *v44 = v41;
        v44[1].f32[0] = v42;
        v45 = (_DWORD *)&v44[1] + 1;
      }
      a4[11] = v45;
      v55 = (float)v38 * 0.0019569;
      v56 = (float)v39 * 0.0019569;
      v58 = (float *)a4[14];
      v57 = a4[15];
      if ((unint64_t)v58 < v57)
      {
        *v58 = v55;
        v58[1] = v56;
        v11 = (int64_t)(v58 + 2);
        goto LABEL_27;
      }
      v59 = *v120;
      v60 = (char *)v58 - (char *)*v120;
      v61 = v60 >> 3;
      v62 = (v60 >> 3) + 1;
      if (v62 >> 61)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v63 = v57 - (_QWORD)v59;
      if (v63 >> 2 > v62)
        v62 = v63 >> 2;
      v64 = (unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v62;
      if (v64)
      {
        if (v64 >> 61)
LABEL_120:
          std::__throw_bad_array_new_length[abi:ne180100]();
        v65 = operator new(8 * v64);
        v66 = (float *)&v65[8 * v61];
        *v66 = v55;
        v66[1] = v56;
        v67 = (char *)((char *)v58 - (char *)v59);
        if (v58 == v59)
        {
LABEL_63:
          v11 = (int64_t)(v66 + 2);
          a4[13] = v66;
          a4[14] = v66 + 2;
          a4[15] = &v65[8 * v64];
          if (!v58)
            goto LABEL_27;
LABEL_71:
          operator delete(v58);
          goto LABEL_27;
        }
      }
      else
      {
        v65 = 0;
        v66 = (float *)(8 * v61);
        *v66 = v55;
        v66[1] = v56;
        v67 = (char *)((char *)v58 - (char *)v59);
        if (v58 == v59)
          goto LABEL_63;
      }
      v68 = v67 - 8;
      if ((unint64_t)(v67 - 8) < 0x58)
        break;
      v69 = v66;
      if ((unint64_t)((char *)v58 - v65 - v60) < 0x20)
        goto LABEL_69;
      v70 = ((unint64_t)v68 >> 3) + 1;
      v71 = 8 * (v70 & 0x3FFFFFFFFFFFFFFCLL);
      v72 = &v58[v71 / 0xFFFFFFFFFFFFFFFCLL];
      v69 = &v66[v71 / 0xFFFFFFFFFFFFFFFCLL];
      v73 = &v65[8 * v61 - 16];
      v74 = v58 - 4;
      v75 = v70 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v76 = *(_OWORD *)v74;
        *(v73 - 1) = *((_OWORD *)v74 - 1);
        *v73 = v76;
        v73 -= 2;
        v74 -= 8;
        v75 -= 4;
      }
      while (v75);
      v58 = v72;
      if (v70 != (v70 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_69;
LABEL_70:
      v58 = *v120;
      v11 = (int64_t)(v66 + 2);
      a4[13] = v69;
      a4[14] = v66 + 2;
      a4[15] = &v65[8 * v64];
      if (v58)
        goto LABEL_71;
LABEL_27:
      a4[14] = v11;
      ++v34;
      LODWORD(v11) = v121;
      if (v34 >= v121)
        goto LABEL_72;
    }
    v69 = v66;
    do
    {
LABEL_69:
      v77 = *((_QWORD *)v58 - 1);
      v58 -= 2;
      *((_QWORD *)v69 - 1) = v77;
      v69 -= 2;
    }
    while (v58 != v59);
    goto LABEL_70;
  }
LABEL_72:
  v78 = (_BYTE *)a4[16];
  v123 = (void **)(a4 + 16);
  v79 = __sz;
  if (__sz <= (uint64_t)(a4[18] - (_QWORD)v78) >> 1)
    goto LABEL_88;
  v80 = (_BYTE *)a4[17];
  v81 = (char *)operator new(2 * __sz);
  v82 = v80 - v78;
  v83 = &v81[(v80 - v78) & 0xFFFFFFFFFFFFFFFELL];
  v84 = v83;
  if (v80 != v78)
  {
    if ((unint64_t)(v82 - 2) < 0x1E)
    {
      v84 = &v81[(v80 - v78) & 0xFFFFFFFFFFFFFFFELL];
      do
      {
LABEL_85:
        v93 = *((_WORD *)v80 - 1);
        v80 -= 2;
        *((_WORD *)v84 - 1) = v93;
        v84 -= 2;
      }
      while (v80 != v78);
      goto LABEL_86;
    }
    v84 = &v81[(v80 - v78) & 0xFFFFFFFFFFFFFFFELL];
    if ((unint64_t)(v80 - &v81[v82 & 0xFFFFFFFFFFFFFFFELL]) < 0x20)
      goto LABEL_85;
    v85 = v82 >> 1;
    v86 = ((unint64_t)(v82 - 2) >> 1) + 1;
    v87 = 2 * (v86 & 0xFFFFFFFFFFFFFFF0);
    v88 = &v80[-v87];
    v84 = &v83[-v87];
    v89 = &v81[2 * v85 - 16];
    v90 = (__int128 *)(v80 - 16);
    v91 = v86 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v92 = *v90;
      *((_OWORD *)v89 - 1) = *(v90 - 1);
      *(_OWORD *)v89 = v92;
      v89 -= 32;
      v90 -= 2;
      v91 -= 16;
    }
    while (v91);
    v80 = v88;
    if (v86 != (v86 & 0xFFFFFFFFFFFFFFF0))
      goto LABEL_85;
  }
LABEL_86:
  a4[16] = v84;
  a4[17] = v83;
  a4[18] = &v81[2 * __sz];
  v79 = __sz;
  if (v78)
    operator delete(v78);
LABEL_88:
  v94 = v79;
  if (!v79)
    return 1;
  v95 = 0;
  while (1)
  {
    v96 = (unint64_t)(a1[2] + 1);
    if (v96 > (unint64_t)a1[1])
    {
      v6 = "Index value";
      goto LABEL_5;
    }
    a1[2] = (unsigned __int16 *)v96;
    v97 = *(unsigned __int16 *)((char *)*a1 + v96 - 2);
    if (v97 >= v11)
      break;
    v99 = (char *)a4[17];
    v98 = a4[18];
    if ((unint64_t)v99 < v98)
    {
      *(_WORD *)v99 = v97;
      a4[17] = v99 + 2;
      ++v95;
      result = 1;
      if (v95 == v94)
        return result;
    }
    else
    {
      v100 = (char *)*v123;
      v11 = v99 - (_BYTE *)*v123;
      if (v11 <= -3)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v101 = v11 >> 1;
      v102 = v98 - (_QWORD)v100;
      if (v102 <= (v11 >> 1) + 1)
        v103 = v101 + 1;
      else
        v103 = v102;
      if (v102 >= 0x7FFFFFFFFFFFFFFELL)
        v104 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v104 = v103;
      if (v104)
      {
        if (v104 < 0)
          goto LABEL_120;
        v105 = operator new(2 * v104);
        v106 = &v105[2 * v101];
        *v106 = v97;
        v107 = (uint64_t)(v106 + 1);
        v108 = v99 - v100;
        if (v99 == v100)
        {
LABEL_107:
          LODWORD(v11) = v121;
          goto LABEL_113;
        }
      }
      else
      {
        v105 = 0;
        v106 = (_WORD *)(2 * v101);
        *(_WORD *)(2 * v101) = v97;
        v107 = 2 * v101 + 2;
        v108 = v99 - v100;
        if (v99 == v100)
          goto LABEL_107;
      }
      v109 = v108 - 2;
      if (v109 < 0x1E)
      {
        LODWORD(v11) = v121;
        do
        {
LABEL_112:
          v118 = *((_WORD *)v99 - 1);
          v99 -= 2;
          *--v106 = v118;
        }
        while (v99 != v100);
        goto LABEL_113;
      }
      v110 = v99 - v105 - (v11 & 0xFFFFFFFFFFFFFFFELL);
      LODWORD(v11) = v121;
      if (v110 < 0x20)
        goto LABEL_112;
      v111 = (v109 >> 1) + 1;
      v112 = 2 * (v111 & 0xFFFFFFFFFFFFFFF0);
      v113 = &v99[-v112];
      v106 = (_WORD *)((char *)v106 - v112);
      v114 = &v105[2 * v101 - 16];
      v115 = v99 - 16;
      v116 = v111 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v117 = *(_OWORD *)v115;
        *(v114 - 1) = *((_OWORD *)v115 - 1);
        *v114 = v117;
        v114 -= 2;
        v115 -= 32;
        v116 -= 16;
      }
      while (v116);
      v99 = v113;
      if (v111 != (v111 & 0xFFFFFFFFFFFFFFF0))
        goto LABEL_112;
LABEL_113:
      a4[16] = v106;
      a4[17] = v107;
      a4[18] = &v105[2 * v104];
      if (v100)
        operator delete(v100);
      v94 = __sz;
      a4[17] = v107;
      ++v95;
      result = 1;
      if (v95 == (_DWORD)__sz)
        return result;
    }
  }
  v6 = "Invalid index";
LABEL_5:
  printf("Failed to read C3m file - %s", v6);
  return 0;
}

void geo::small_vector_base<geo::c3m::SubMesh>::resize(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;
  char *v17;

  v5 = *a1;
  v4 = a1[1];
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  if (v6 <= a2)
  {
    if (v6 >= a2)
      return;
    v7 = (unint64_t)a1[3];
    if (v7 >= a2)
    {
      v17 = &v5[24 * a2];
      if (v4 == v17)
        goto LABEL_18;
    }
    else
    {
      v8 = a1[2];
      v9 = (1 << -(char)__clz(v7 + 1));
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      v11 = (char *)malloc_type_malloc(24 * v10, 0x1000040504FFAC1uLL);
      v12 = v11;
      v13 = *a1;
      v14 = a1[1];
      if (*a1 != v14)
      {
        v15 = v11;
        do
        {
          v16 = *(_OWORD *)v13;
          *((_QWORD *)v15 + 2) = *((_QWORD *)v13 + 2);
          *(_OWORD *)v15 = v16;
          v15 += 24;
          v13 += 24;
        }
        while (v13 != v14);
      }
      if (v5 != v8)
        free(*a1);
      *a1 = v12;
      v4 = &v12[24 * v6];
      a1[3] = (char *)v10;
      v17 = &v12[24 * a2];
      if (v4 == v17)
        goto LABEL_18;
    }
    do
    {
      *((_QWORD *)v4 + 1) = 0;
      *((_QWORD *)v4 + 2) = 0;
      *(_QWORD *)v4 = 0;
      *((_DWORD *)v4 + 5) = -1;
      v4 += 24;
    }
    while (v4 != v17);
    v4 = v17;
    goto LABEL_18;
  }
  v4 = &v5[24 * a2];
LABEL_18:
  a1[1] = v4;
}

uint64_t `anonymous namespace'::decodeEdgebreakerMesh(uint64_t *a1, uint64_t a2, int a3, int *a4, uint64_t a5, uint64_t *a6, uint64_t *a7, std::vector<int> *a8, std::vector<int> *a9, uint64_t *a10, uint64_t *a11, _DWORD *a12, unsigned __int8 a13)
{
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int32x4_t **v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  int32x4_t **v44;
  int *v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  _OWORD *v51;
  char *v52;
  uint64_t v53;
  __int128 v54;
  int v55;
  uint64_t *Table;
  uint64_t *v57;
  unint64_t v58;
  char *v59;
  float *v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  float *v66;
  unint64_t v67;
  uint64_t v68;
  char *v69;
  unint64_t v70;
  unint64_t v71;
  BOOL v73;
  BOOL v75;
  BOOL v76;
  uint64_t v77;
  __int32 *v78;
  unint64_t v79;
  char *v80;
  float *v81;
  unint64_t v82;
  char *v83;
  float *v84;
  float *v85;
  char *v86;
  unint64_t v87;
  unint64_t v88;
  BOOL v90;
  BOOL v92;
  BOOL v93;
  uint64_t v94;
  __int32 *v95;
  unint64_t v96;
  char *v97;
  float *v98;
  unint64_t v99;
  char *v100;
  float *v101;
  float *v102;
  unint64_t v104;
  float **v105;
  uint64_t *v106;
  int *v107;
  float32x2x3_t v111;
  float32x2x3_t v112;

  if (a3 == 8)
  {
    v18 = 3 * a4[9];
    v19 = v18;
  }
  else
  {
    v19 = a4[8];
    v18 = 3 * a4[9];
  }
  v20 = a4[10];
  v21 = v19;
  v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2);
  if (v19 <= v22)
  {
    if (v19 < v22)
      *(_QWORD *)(a5 + 8) = *(_QWORD *)a5 + 12 * v19;
  }
  else
  {
    std::vector<gm::Matrix<float,3,1>>::__append((char **)a5, v19 - v22);
  }
  v23 = (a6[1] - *a6) >> 3;
  if (v21 <= v23)
  {
    if (v21 < v23)
      a6[1] = *a6 + 8 * v21;
  }
  else
  {
    std::vector<gm::Matrix<float,2,1>>::__append(a6, v21 - v23);
  }
  v24 = (a7[1] - *a7) >> 1;
  if (v18 <= v24)
  {
    if (v18 < v24)
      a7[1] = *a7 + 2 * v18;
  }
  else
  {
    std::vector<unsigned short>::__append((uint64_t)a7, v18 - v24);
  }
  v25 = a8->__end_ - a8->__begin_;
  if (v20 <= v25)
  {
    if (v20 < v25)
      a8->__end_ = &a8->__begin_[v20];
  }
  else
  {
    std::vector<int>::__append(a8, v20 - v25);
  }
  v106 = a7;
  v107 = a4;
  v26 = a9->__end_ - a9->__begin_;
  v27 = (int32x4_t **)a8;
  if (v20 <= v26)
  {
    if (v20 < v26)
      a9->__end_ = &a9->__begin_[v20];
  }
  else
  {
    std::vector<int>::__append(a9, v20 - v26);
  }
  v29 = (char *)*a11;
  v28 = (char *)a11[1];
  v30 = (uint64_t)&v28[-*a11];
  v31 = v30 >> 2;
  v32 = v20 >= v30 >> 2;
  v33 = v20 - (v30 >> 2);
  v105 = (float **)a6;
  if (v20 > v30 >> 2)
  {
    v34 = a11[2];
    if (v33 <= (v34 - (uint64_t)v28) >> 2)
    {
      v46 = &v28[4 * v33];
      memset(v28, 255, ((4 * v20 - v30 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
      a11[1] = (uint64_t)v46;
      v44 = v27;
      v45 = v107;
      goto LABEL_45;
    }
    v104 = v21;
    v35 = v34 - (_QWORD)v29;
    v36 = (v34 - (uint64_t)v29) >> 1;
    if (v36 <= v20)
      v36 = v20;
    v32 = v35 >= 0x7FFFFFFFFFFFFFFCLL;
    v37 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v32)
      v37 = v36;
    if (v37 >> 62)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v38 = 4 * v37;
    v39 = operator new(4 * v37);
    v40 = &v39[4 * v31];
    v41 = 4 * v20;
    memset(v40, 255, ((v41 - v30 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
    v42 = &v39[v38];
    if (v28 == v29)
    {
      v21 = v104;
      v44 = v27;
      v45 = v107;
      goto LABEL_43;
    }
    v43 = v28 - v29 - 4;
    v21 = v104;
    if (v43 >= 0x2C)
    {
      v47 = &v28[-v30] - v39;
      v44 = v27;
      v45 = v107;
      if (v47 >= 0x20)
      {
        v48 = (v43 >> 2) + 1;
        v49 = 4 * (v48 & 0x7FFFFFFFFFFFFFF8);
        v50 = &v28[-v49];
        v40 -= v49;
        v51 = &v39[4 * v31 - 16];
        v52 = v28 - 16;
        v53 = v48 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v54 = *(_OWORD *)v52;
          *(v51 - 1) = *((_OWORD *)v52 - 1);
          *v51 = v54;
          v51 -= 2;
          v52 -= 32;
          v53 -= 8;
        }
        while (v53);
        v28 = v50;
        if (v48 == (v48 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_43:
          *a11 = (uint64_t)v40;
          a11[1] = (uint64_t)&v39[v41];
          a11[2] = (uint64_t)v42;
          if (v29)
            operator delete(v29);
          goto LABEL_45;
        }
      }
    }
    else
    {
      v44 = v27;
      v45 = v107;
    }
    do
    {
      v55 = *((_DWORD *)v28 - 1);
      v28 -= 4;
      *((_DWORD *)v40 - 1) = v55;
      v40 -= 4;
    }
    while (v28 != v29);
    goto LABEL_43;
  }
  v44 = v27;
  v45 = v107;
  if (!v32)
    a11[1] = (uint64_t)&v29[4 * v20];
LABEL_45:
  Table = (uint64_t *)geo::c3m::EdgebreakerDecodeCache::getOrCreateTable(a1, v45);
  v57 = (uint64_t *)geo::c3m::EdgebreakerDecodeCache::getOrCreateTable(a1, v45 + 4);
  v58 = operator new[]();
  if (a3 == 8)
  {
    if (m3d_eb_decompress_portable2(a2, v45, Table, v57, v58, a9->__begin_, *v44, a13) == 1)
    {
      if ((_DWORD)v21)
      {
        v59 = *(char **)a5;
        v60 = *v105;
        if (v21 >= 0x11)
        {
          v61 = 0;
          v69 = &v59[12 * v21];
          v70 = (unint64_t)&v60[2 * v21];
          v71 = v58 + 32 * v21 - 8;
          v73 = (unint64_t)v59 < v71 && v58 < (unint64_t)v69;
          v75 = (unint64_t)v60 < v71 && v58 < v70;
          v76 = v60 >= (float *)v69 || (unint64_t)v59 >= v70;
          if (v76 && !v73 && !v75)
          {
            v77 = v21 & 1;
            if ((v21 & 1) == 0)
              v77 = 2;
            v61 = v21 - v77;
            v78 = (__int32 *)(v58 + 32);
            v79 = v61;
            v80 = *(char **)a5;
            v81 = *v105;
            do
            {
              v111.val[0].i32[0] = *(v78 - 8);
              v111.val[0].i32[1] = *v78;
              v111.val[1].i32[0] = *(v78 - 7);
              v111.val[1].i32[1] = v78[1];
              v111.val[2].i32[0] = *(v78 - 6);
              v111.val[2].i32[1] = v78[2];
              vst3_f32((float *)v80, v111);
              v80 += 24;
              v111.val[0].i32[0] = *(v78 - 4);
              v111.val[0].i32[1] = v78[4];
              v111.val[1].i32[0] = *(v78 - 3);
              v111.val[1].i32[1] = v78[5];
              vst2_f32(v81, *(float32x2x2_t *)v111.val[0].f32);
              v81 += 4;
              v78 += 16;
              v79 -= 2;
            }
            while (v79);
          }
        }
        else
        {
          v61 = 0;
        }
        v82 = v21 - v61;
        v83 = &v59[12 * v61 + 8];
        v84 = (float *)(v58 + 32 * v61 + 16);
        v85 = &v60[2 * v61 + 1];
        do
        {
          *((float *)v83 - 2) = *(v84 - 4);
          *((float *)v83 - 1) = *(v84 - 3);
          *(float *)v83 = *(v84 - 2);
          v83 += 12;
          *(v85 - 1) = *v84;
          *v85 = v84[1];
          v85 += 2;
          v84 += 8;
          --v82;
        }
        while (v82);
      }
LABEL_112:
      v68 = 1;
      goto LABEL_113;
    }
  }
  else
  {
    if (a13 == 3)
    {
      v62 = v45[9];
      v63 = *a10;
      v64 = (a10[1] - *a10) >> 1;
      if (v62 <= v64)
      {
        if (v62 < v64)
          a10[1] = v63 + 2 * v62;
      }
      else
      {
        std::vector<unsigned short>::__append((uint64_t)a10, v62 - v64);
        v63 = *a10;
      }
    }
    else
    {
      v63 = 0;
    }
    if (m3d_eb_decompress_portable(a2, v45, Table, v57, v58, *v106, a12, a9->__begin_, *v44, *a11, v63, a13) == 1)
    {
      if ((_DWORD)v21)
      {
        v65 = *(char **)a5;
        v66 = *v105;
        if (v21 >= 0x11)
        {
          v67 = 0;
          v86 = &v65[12 * v21];
          v87 = (unint64_t)&v66[2 * v21];
          v88 = v58 + 32 * v21 - 8;
          v90 = (unint64_t)v65 < v88 && v58 < (unint64_t)v86;
          v92 = (unint64_t)v66 < v88 && v58 < v87;
          v93 = v66 >= (float *)v86 || (unint64_t)v65 >= v87;
          if (v93 && !v90 && !v92)
          {
            v94 = v21 & 1;
            if ((v21 & 1) == 0)
              v94 = 2;
            v67 = v21 - v94;
            v95 = (__int32 *)(v58 + 32);
            v96 = v67;
            v97 = *(char **)a5;
            v98 = *v105;
            do
            {
              v112.val[0].i32[0] = *(v95 - 8);
              v112.val[0].i32[1] = *v95;
              v112.val[1].i32[0] = *(v95 - 7);
              v112.val[1].i32[1] = v95[1];
              v112.val[2].i32[0] = *(v95 - 6);
              v112.val[2].i32[1] = v95[2];
              vst3_f32((float *)v97, v112);
              v97 += 24;
              v112.val[0].i32[0] = *(v95 - 4);
              v112.val[0].i32[1] = v95[4];
              v112.val[1].i32[0] = *(v95 - 3);
              v112.val[1].i32[1] = v95[5];
              vst2_f32(v98, *(float32x2x2_t *)v112.val[0].f32);
              v98 += 4;
              v95 += 16;
              v96 -= 2;
            }
            while (v96);
          }
        }
        else
        {
          v67 = 0;
        }
        v99 = v21 - v67;
        v100 = &v65[12 * v67 + 8];
        v101 = (float *)(v58 + 32 * v67 + 16);
        v102 = &v66[2 * v67 + 1];
        do
        {
          *((float *)v100 - 2) = *(v101 - 4);
          *((float *)v100 - 1) = *(v101 - 3);
          *(float *)v100 = *(v101 - 2);
          v100 += 12;
          *(v102 - 1) = *v101;
          *v102 = v101[1];
          v102 += 2;
          v101 += 8;
          --v99;
        }
        while (v99);
      }
      goto LABEL_112;
    }
  }
  printf("Failed to read C3m file - %s", "Unable to run edgebreaker decoder on mesh");
  v68 = 0;
LABEL_113:
  MEMORY[0x1A1AF4DE8](v58, 0x1000C80E0EAB150);
  return v68;
}

void std::vector<gm::Matrix<float,2,1>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v5 = (char *)a1[1];
  v4 = a1[2];
  if (a2 <= (v4 - (uint64_t)v5) >> 3)
  {
    a1[1] = (uint64_t)&v5[8 * a2];
    return;
  }
  v6 = (_BYTE *)*a1;
  v7 = (uint64_t)&v5[-*a1];
  v8 = v7 >> 3;
  v9 = (v7 >> 3) + a2;
  if (v9 >> 61)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  v10 = v4 - (_QWORD)v6;
  if (v10 >> 2 > v9)
    v9 = v10 >> 2;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
    v11 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v11 = v9;
  if (v11)
  {
    if (v11 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v12 = operator new(8 * v11);
    v13 = (uint64_t)&v12[8 * v8];
    v14 = &v12[8 * v11];
    v15 = v13 + 8 * a2;
    v16 = (char *)(v5 - v6);
    if (v5 == v6)
    {
LABEL_11:
      *a1 = v13;
      a1[1] = v15;
      a1[2] = (uint64_t)v14;
      if (!v5)
        return;
LABEL_22:
      operator delete(v5);
      return;
    }
  }
  else
  {
    v12 = 0;
    v13 = 8 * v8;
    v14 = 0;
    v15 = 8 * v8 + 8 * a2;
    v16 = (char *)(v5 - v6);
    if (v5 == v6)
      goto LABEL_11;
  }
  v17 = (unint64_t)(v16 - 8);
  if (v17 < 0x58)
    goto LABEL_27;
  if ((unint64_t)(v5 - &v12[v7]) < 0x20)
    goto LABEL_27;
  v18 = (v17 >> 3) + 1;
  v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
  v20 = &v5[-v19];
  v13 -= v19;
  v21 = &v12[8 * v8 - 16];
  v22 = v5 - 16;
  v23 = v18 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v24 = *(_OWORD *)v22;
    *(v21 - 1) = *((_OWORD *)v22 - 1);
    *v21 = v24;
    v21 -= 2;
    v22 -= 32;
    v23 -= 4;
  }
  while (v23);
  v5 = v20;
  if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_27:
    do
    {
      v25 = *((_QWORD *)v5 - 1);
      v5 -= 8;
      *(_QWORD *)(v13 - 8) = v25;
      v13 -= 8;
    }
    while (v5 != v6);
  }
  v5 = (char *)*a1;
  *a1 = v13;
  a1[1] = v15;
  a1[2] = (uint64_t)v14;
  if (v5)
    goto LABEL_22;
}

void geo::small_vector_base<geo::c3m::Mesh>::grow(uint64_t a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;

  v3 = *(uint64_t **)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v6 = *(uint64_t **)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v7 = (1 << -(char)__clz(v5 + 1));
  if (v5 >= 0xFFFFFFFFFFFFFFFELL)
    v8 = 1;
  else
    v8 = v7;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  v10 = malloc_type_malloc(184 * v9, 0x1030040E47C81F6uLL);
  geo::uninitialized_move<geo::c3m::Mesh *,geo::c3m::Mesh *>(*(uint64_t **)a1, *(uint64_t **)(a1 + 8), v10);
  geo::small_vector_base<geo::c3m::Mesh>::runDestructors(a1, *(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  if (v3 != v6)
    free(*(void **)a1);
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + 8) = (char *)v10 + v4 - (_QWORD)v3;
  *(_QWORD *)(a1 + 24) = v9;
}

uint64_t *geo::uninitialized_move<geo::c3m::Mesh *,geo::c3m::Mesh *>(uint64_t *result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  __int128 v9;

  if (result != a2)
  {
    do
    {
      *a3 = a3 + 4;
      a3[1] = a3 + 4;
      a3[2] = a3 + 4;
      v4 = result[2];
      a3[3] = result[3];
      v5 = *result;
      if (*result == v4)
      {
        a3[1] = (char *)a3 + result[1] - v5 + 32;
        v6 = result[1];
        if (v5 != v6)
        {
          v7 = 0;
          do
          {
            v8 = &a3[v7 / 8];
            v9 = *(_OWORD *)(v5 + v7);
            v8[6] = *(_QWORD *)(v5 + v7 + 16);
            *((_OWORD *)v8 + 2) = v9;
            v7 += 24;
          }
          while (v5 + v7 != v6);
        }
      }
      else
      {
        v3 = result[1];
        *a3 = v5;
        a3[1] = v3;
        *(_OWORD *)result = 0uLL;
        *((_OWORD *)result + 1) = 0uLL;
      }
      a3[10] = 0;
      a3[11] = 0;
      a3[12] = 0;
      *((_OWORD *)a3 + 5) = *((_OWORD *)result + 5);
      a3[12] = result[12];
      result[10] = 0;
      result[11] = 0;
      result[12] = 0;
      a3[13] = 0;
      a3[14] = 0;
      a3[15] = 0;
      *(_OWORD *)(a3 + 13) = *(_OWORD *)(result + 13);
      a3[15] = result[15];
      result[13] = 0;
      result[14] = 0;
      result[15] = 0;
      a3[16] = 0;
      a3[17] = 0;
      a3[18] = 0;
      *((_OWORD *)a3 + 8) = *((_OWORD *)result + 8);
      a3[18] = result[18];
      result[16] = 0;
      result[17] = 0;
      result[18] = 0;
      a3[19] = 0;
      a3[20] = 0;
      a3[21] = 0;
      *(_OWORD *)(a3 + 19) = *(_OWORD *)(result + 19);
      a3[21] = result[21];
      result[19] = 0;
      result[20] = 0;
      result[21] = 0;
      a3[22] = result[22];
      a3 += 23;
      result += 23;
    }
    while (result != a2);
    return a2;
  }
  return result;
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<huffman_params_t,geo::c3m::EdgebreakerDecodeTable>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<huffman_params_t,geo::c3m::EdgebreakerDecodeTable>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  void **v3;
  void *v4;
  void **v5;
  void *v6;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (void **)v2[4];
      if (v3)
      {
        v4 = *v3;
        if (*v3)
        {
          v5 = v3 + 1;
          do
          {
            free(v4);
            v6 = *v5++;
            v4 = v6;
          }
          while (v6);
        }
        free(v3);
      }
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t geo::c3mm::C3mmEntry::childMeshType(uint64_t a1, uint64_t a2)
{
  return dword_1A0087AA0[(*(unsigned __int16 *)(a1 + 20) >> (2
                                                           * ((2 * (*(_BYTE *)(a2 + 4) & 1)) & 0xFA | (4 * (*(_BYTE *)(a2 + 12) & 1)) | *(_DWORD *)(a2 + 8) & 1))) & 3];
}

uint64_t geo::c3mm::C3mmArea::getMeshTypeForKeyOrParent(unsigned __int16 *a1, unsigned int *a2, _DWORD *a3, uint64_t *a4)
{
  uint64_t v4;
  unsigned __int16 *v5;
  _DWORD *v6;
  unsigned int v7;
  BOOL v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  _QWORD *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  std::__shared_weak_count *v27;
  char v28;
  int v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  _DWORD *v35;
  _DWORD *v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  int8x16_t v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v48;
  unsigned int v49;
  unsigned int v52;
  _DWORD *v54;
  unsigned int *v55;
  std::recursive_mutex *v56;
  _QWORD *v57;

  *a3 = 3;
  *a4 = 0;
  a4[1] = 0;
  if ((*a1 | 2) != 2)
    return 0xFFFFFFFFLL;
  v5 = a1;
  v6 = (_DWORD *)*((_QWORD *)a1 + 15);
  v54 = (_DWORD *)*((_QWORD *)a1 + 16);
  if (v6 == v54)
    return 0xFFFFFFFFLL;
  v56 = (std::recursive_mutex *)(a1 + 88);
  v57 = a1 + 80;
  v55 = a2;
  while (2)
  {
    v7 = v6[1];
    v8 = *a2 >= v7;
    v9 = *a2 - v7;
    if (!v8)
      goto LABEL_79;
    if (*a2 >= v9)
      v10 = v9;
    else
      v10 = *a2;
    v11 = *a2 - v10;
    v12 = a2[1] >> v10;
    v13 = (unsigned int *)*((_QWORD *)v5 + 15);
    v14 = (unsigned int *)*((_QWORD *)v5 + 16);
    if (v13 == v14)
    {
      v15 = a2[2] >> v10;
      v16 = 0;
      v17 = 0;
      v18 = 0;
      v19 = a2[3];
      std::recursive_mutex::lock(v56);
      v20 = (uint64_t *)*v57;
      if (!*v57)
        goto LABEL_34;
    }
    else
    {
      do
      {
        if (v11 <= v13[2])
        {
          v18 = *v13;
          v17 = v12 >> (*(_BYTE *)a2 - v10 - *v13);
          v15 = a2[2] >> v10;
          v16 = a2[2] >> v10 >> (*(_BYTE *)a2 - v10 - *v13);
          v19 = a2[3];
          std::recursive_mutex::lock(v56);
          v20 = (uint64_t *)*v57;
          if (!*v57)
            goto LABEL_34;
          goto LABEL_17;
        }
        v13 += 3;
      }
      while (v13 != v14);
      v15 = a2[2] >> v10;
      v16 = 0;
      v17 = 0;
      v18 = -1;
      v19 = a2[3];
      std::recursive_mutex::lock(v56);
      v20 = (uint64_t *)*v57;
      if (!*v57)
        goto LABEL_34;
    }
LABEL_17:
    v21 = v19 >> v10;
    v22 = v57;
    do
    {
      v23 = *((_DWORD *)v20 + 8);
      if (v23 < v18)
      {
LABEL_18:
        ++v20;
        goto LABEL_19;
      }
      if (v18 < v23)
        goto LABEL_22;
      v24 = *((_DWORD *)v20 + 9);
      if (v24 < v17)
        goto LABEL_18;
      if (v17 < v24)
      {
LABEL_22:
        v22 = v20;
      }
      else if (*((_DWORD *)v20 + 10) < v16)
      {
        ++v20;
      }
      else
      {
        v22 = v20;
      }
LABEL_19:
      v20 = (uint64_t *)*v20;
    }
    while (v20);
    if (v22 == v57
      || (v25 = *((_DWORD *)v22 + 8), v18 < v25)
      || v25 >= v18
      && ((v26 = *((_DWORD *)v22 + 9), v17 < v26)
       || v26 >= v17 && v16 < *((_DWORD *)v22 + 10)))
    {
LABEL_34:
      std::recursive_mutex::unlock(v56);
      v27 = 0;
      goto LABEL_35;
    }
    v48 = v15 | (v21 << 32);
    v49 = v15;
    v32 = v22[6];
    v27 = (std::__shared_weak_count *)v22[7];
    if (v27)
    {
      p_shared_owners = (unint64_t *)&v27->__shared_owners_;
      do
        v34 = __ldxr(p_shared_owners);
      while (__stxr(v34 + 1, p_shared_owners));
    }
    std::recursive_mutex::unlock(v56);
    if (v32)
    {
      v36 = *(_DWORD **)v32;
      v35 = *(_DWORD **)(v32 + 8);
      if (*(_DWORD **)v32 == v35)
      {
        v5 = a1;
        a2 = v55;
        v37 = v49;
      }
      else
      {
        v5 = a1;
        a2 = v55;
        v37 = v49;
        while (*v36 != (_DWORD)v11 || v36[1] != (_DWORD)v12 || v36[2] != v49 || v36[3] != (_DWORD)v21)
        {
          v36 += 6;
          if (v36 == v35)
            goto LABEL_68;
        }
      }
      if (v36 == v35)
      {
LABEL_68:
        v28 = 0;
        v29 = 1;
        v16 = v52;
      }
      else
      {
        v38 = *(_QWORD *)(v32 + 32);
        v39 = v36[4];
        *a3 = 0;
        *a4 = (v12 << 32) | v11;
        a4[1] = v48;
        v40 = (int8x16_t)vdupq_n_s32(*(unsigned __int16 *)(v38 + 16 * v36[4]));
        if ((vmaxv_u8((uint8x8_t)vmovn_s16(vuzp1q_s16((int16x8_t)vceqq_s32((int32x4_t)vandq_s8(v40, (int8x16_t)xmmword_1A0087A80), (int32x4_t)xmmword_1A0087A80), (int16x8_t)vceqq_s32((int32x4_t)vandq_s8(v40, (int8x16_t)xmmword_1A0087A90), (int32x4_t)xmmword_1A0087A90)))) & 1) != 0)*a3 = 2;
        if ((_DWORD)v11 == *a2 && (_DWORD)v12 == a2[1])
        {
          v41 = a2[2];
          if (v37 >= v41 && v41 >= v37)
          {
            v45 = a2[3];
            if (v21 >= v45 && v45 >= v21)
            {
              v28 = 0;
              v29 = 0;
              v16 = 0;
              v4 = 0xFFFFFFFFLL;
              goto LABEL_36;
            }
          }
        }
        if (*v5 != 2 || *((_DWORD *)v5 + 1) || *v6 == *(_DWORD *)(*((_QWORD *)v5 + 16) - 12))
        {
          v42 = v6[1];
          v43 = v52;
          v44 = v4;
          if (v42 + 1 > (v6[2] + 1))
            goto LABEL_67;
LABEL_74:
          v46 = ~v42 + *a2;
          if (*a2 < v46)
            LOBYTE(v46) = *a2;
          __asm { BR              X5 }
        }
        v42 = v6[1];
        v43 = v52;
        v44 = v4;
        if ((v42 + 1) <= v6[2])
          goto LABEL_74;
LABEL_67:
        v29 = 0;
        v28 = 1;
        v4 = v44;
        v16 = v43;
      }
    }
    else
    {
LABEL_35:
      v28 = 0;
      v29 = 0;
      v4 = v18 | (unint64_t)(v17 << 32);
      v5 = a1;
      a2 = v55;
    }
LABEL_36:
    if (v27)
    {
      v30 = (unint64_t *)&v27->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *, unsigned int *))v27->__on_zero_shared)(v27, a2);
        std::__shared_weak_count::__release_weak(v27);
        a2 = v55;
      }
    }
    if ((v28 & 1) != 0)
    {
      v6 += 3;
      v52 = v16;
      if (v6 == v54)
      {
LABEL_79:
        *a3 = 1;
        *(_OWORD *)a4 = *(_OWORD *)a2;
        return 0xFFFFFFFFLL;
      }
      continue;
    }
    break;
  }
  if (v29)
    goto LABEL_79;
  return v4;
}

unint64_t geo::c3mm::C3mmArea::getFileIndexToLoadForKey(uint64_t a1, int *a2)
{
  uint64_t v2;
  std::recursive_mutex *v5;
  _QWORD *v6;
  int v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  _QWORD *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::recursive_mutex *v26;
  int v27;
  unint64_t *v28;
  unint64_t v29;
  unsigned int v30;
  unint64_t v32;
  uint64_t v33;

  v2 = *(_QWORD *)(a1 + 120);
  v33 = *(_QWORD *)(a1 + 128);
  if (v2 == v33)
  {
LABEL_49:
    v14 = 0;
    v30 = -1;
    return v30 | v14;
  }
  v5 = (std::recursive_mutex *)(a1 + 176);
  v6 = (_QWORD *)(a1 + 160);
  while (2)
  {
    if (*a2 >= (*a2 - *(_DWORD *)(v2 + 4)))
      v7 = *a2 - *(_DWORD *)(v2 + 4);
    else
      v7 = *a2;
    v8 = *(unsigned int **)(a1 + 120);
    v9 = *(unsigned int **)(a1 + 128);
    if (v8 == v9)
    {
      v13 = 0;
      v14 = 0;
      v15 = 0;
      std::recursive_mutex::lock(v5);
      v16 = (uint64_t *)*v6;
      if (!*v6)
        goto LABEL_47;
    }
    else
    {
      v10 = HIDWORD(*(_QWORD *)a2) >> v7;
      v11 = a2[2] >> v7;
      v12 = *(_QWORD *)a2 - v7;
      while (v12 > v8[2])
      {
        v8 += 3;
        if (v8 == v9)
        {
          v13 = 0;
          v14 = 0;
          v15 = -1;
          std::recursive_mutex::lock(v5);
          v16 = (uint64_t *)*v6;
          if (!*v6)
            goto LABEL_47;
          goto LABEL_15;
        }
      }
      v15 = *v8;
      v13 = v11 >> (v12 - *v8);
      v14 = (unint64_t)(v10 >> (v12 - *v8)) << 32;
      std::recursive_mutex::lock(v5);
      v16 = (uint64_t *)*v6;
      if (!*v6)
      {
LABEL_47:
        v30 = v15 | v14;
        std::recursive_mutex::unlock(v5);
        return v30 | v14;
      }
    }
LABEL_15:
    v17 = v6;
    do
    {
      v18 = *((_DWORD *)v16 + 8);
      if (v18 < v15)
      {
LABEL_16:
        ++v16;
        goto LABEL_17;
      }
      if (v18 > v15)
        goto LABEL_22;
      v19 = *((_DWORD *)v16 + 9);
      if (v19 < HIDWORD(v14))
        goto LABEL_16;
      if (v19 <= HIDWORD(v14))
      {
        if (*((_DWORD *)v16 + 10) < v13)
          ++v16;
        else
          v17 = v16;
      }
      else
      {
LABEL_22:
        v17 = v16;
      }
LABEL_17:
      v16 = (uint64_t *)*v16;
    }
    while (v16);
    if (v17 == v6)
      goto LABEL_47;
    v20 = *((_DWORD *)v17 + 8);
    if (v20 > v15)
      goto LABEL_47;
    if (v20 >= v15)
    {
      v21 = *((_DWORD *)v17 + 9);
      if (v21 > HIDWORD(v14) || v21 >= HIDWORD(v14) && *((_DWORD *)v17 + 10) > v13)
        goto LABEL_47;
    }
    v32 = v14;
    v22 = v17[6];
    v23 = (std::__shared_weak_count *)v17[7];
    if (v23)
    {
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldxr(p_shared_owners);
      while (__stxr(v25 + 1, p_shared_owners));
    }
    v26 = v5;
    std::recursive_mutex::unlock(v5);
    if (v22)
    {
      LODWORD(v22) = *(_DWORD *)(v2 + 8) < *a2;
      v27 = 2 * (*(_DWORD *)(v2 + 8) >= *a2);
      if (!v23)
        break;
    }
    else
    {
      v27 = 1;
      if (!v23)
        break;
    }
    v28 = (unint64_t *)&v23->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
      if ((v22 & 1) == 0)
        goto LABEL_48;
LABEL_45:
      v2 += 12;
      v5 = v26;
      if (v2 == v33)
        goto LABEL_49;
      continue;
    }
    break;
  }
  if ((_DWORD)v22)
    goto LABEL_45;
LABEL_48:
  if (v27 == 2)
    goto LABEL_49;
  v14 = v32;
  v30 = v15 | v32;
  return v30 | v14;
}

unint64_t geo::c3mm::C3mmArea::getEntry(_WORD *a1, _DWORD *a2, uint64_t a3)
{
  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(_WORD *)(a3 + 20) = 0;
  if (*a1 == 2)
    return geo::c3mm::C3mmArea::getEntryV2((uint64_t)a1, a2, a3);
  else
    return 0;
}

unint64_t geo::c3mm::C3mmArea::getEntryV2(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  unsigned int v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t EntryV2;
  uint64_t *v15;
  uint64_t *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  int v33;
  uint64_t v34;
  char *v35;
  unint64_t v36;
  void *v37;
  char *v38;
  unint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  __int128 *v44;
  _OWORD *v45;
  uint64_t v46;
  __int128 v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int32x2_t *v53;
  _WORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  unsigned int v60;
  unint64_t v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  char v65;
  unsigned int v66;
  unsigned int v68;
  unsigned __int32 v69;
  int8x16_t v70;
  __int16 *v71;
  __int16 v72;
  _BOOL4 v73;
  int32x4_t v74;
  int32x4_t v75;
  int v76;
  uint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  int v80;
  int v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  int32x2_t v88;
  int v89;
  uint64_t v90;
  _WORD *v91;
  int32x2_t *v92;
  std::__shared_weak_count *v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  __int16 v98;
  int32x4_t v99;
  void *v100;
  char *v101;
  char *v102;
  uint64_t v103;
  _QWORD v104[5];

  v6 = *a2;
  v7 = *(_DWORD **)(a1 + 120);
  v8 = *(_DWORD **)(a1 + 128);
  if (v7 == v8)
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    LODWORD(EntryV2) = 0;
    if (!v6)
      goto LABEL_14;
    goto LABEL_7;
  }
  v9 = *(_DWORD **)(a1 + 120);
  while (1)
  {
    v10 = v9[2];
    if (v10 >= v6)
      break;
    v9 += 3;
    if (v9 == v8)
    {
      v10 = 0;
      v11 = 0;
      goto LABEL_9;
    }
  }
  v11 = *(_QWORD *)v9;
  do
  {
LABEL_9:
    if (v6 <= v7[2])
    {
      LODWORD(EntryV2) = *v7;
      v13 = (a2[1] >> (v6 - *v7));
      v12 = a2[2] >> (v6 - *v7);
      if (v6 <= v10)
        goto LABEL_14;
LABEL_7:
      v13 = 0;
      LODWORD(EntryV2) = -1;
      return EntryV2 | (v13 << 32);
    }
    v7 += 3;
  }
  while (v7 != v8);
  v12 = 0;
  v13 = 0;
  LODWORD(EntryV2) = -1;
  if (v6 > v10)
    goto LABEL_7;
LABEL_14:
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 176));
  v15 = *(uint64_t **)(a1 + 160);
  if (!v15)
  {
LABEL_28:
    std::recursive_mutex::unlock((std::recursive_mutex *)(a1 + 176));
    return EntryV2 | (v13 << 32);
  }
  v16 = (uint64_t *)(a1 + 160);
  while (2)
  {
    v17 = *((_DWORD *)v15 + 8);
    if (v17 < EntryV2)
      goto LABEL_16;
    if (EntryV2 < v17)
      goto LABEL_20;
    v18 = *((_DWORD *)v15 + 9);
    if (v18 < v13)
    {
LABEL_16:
      ++v15;
    }
    else if (v13 < v18)
    {
LABEL_20:
      v16 = v15;
    }
    else if (*((_DWORD *)v15 + 10) < v12)
    {
      ++v15;
    }
    else
    {
      v16 = v15;
    }
    v15 = (uint64_t *)*v15;
    if (v15)
      continue;
    break;
  }
  if (v16 == (uint64_t *)(a1 + 160))
    goto LABEL_28;
  v19 = *((_DWORD *)v16 + 8);
  if (EntryV2 < v19)
    goto LABEL_28;
  if (v19 >= EntryV2)
  {
    v21 = *((_DWORD *)v16 + 9);
    if (v13 < v21 || v21 >= v13 && v12 < *((_DWORD *)v16 + 10))
      goto LABEL_28;
  }
  v22 = (std::__shared_weak_count *)v16[7];
  v94 = (uint64_t *)v16[6];
  v104[2] = v94;
  v104[3] = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldxr(p_shared_owners);
    while (__stxr(v24 + 1, p_shared_owners));
  }
  std::recursive_mutex::unlock((std::recursive_mutex *)(a1 + 176));
  if (v94)
  {
    if (v94[4] == v94[5])
    {
      v13 = 0;
      LODWORD(EntryV2) = -1;
    }
    else
    {
      v90 = a3;
      v91 = (_WORD *)a1;
      v92 = (int32x2_t *)a2;
      v93 = v22;
      v26 = *(_QWORD *)a2;
      v25 = *((_QWORD *)a2 + 1);
      v27 = HIDWORD(*(_QWORD *)a2);
      v28 = (char *)v104;
      v100 = v104;
      v101 = (char *)v104;
      v102 = (char *)v104;
      v103 = 4;
      v89 = v11;
      v29 = HIDWORD(v11);
      if (v26 <= HIDWORD(v11))
      {
        v33 = v26;
        v32 = (char *)v104;
        v31 = (char *)v104;
      }
      else
      {
        v30 = 4;
        v31 = (char *)v104;
        do
        {
          v34 = (v31 - v28) >> 2;
          if (v30 >= v34 + 1)
          {
            v32 = v28;
          }
          else
          {
            v35 = v102;
            v36 = (1 << -(char)__clz(v30 + 1));
            if (v30 >= 0xFFFFFFFFFFFFFFFELL)
              v36 = 1;
            if (v36 <= v34 + 1)
              v30 = v34 + 1;
            else
              v30 = v36;
            v32 = (char *)malloc_type_malloc(4 * v30, 0x100004052888210uLL);
            v37 = v100;
            v38 = v101;
            if (v100 != v101)
            {
              v39 = v101 - (_BYTE *)v100 - 4;
              v40 = v32;
              v41 = (char *)v100;
              if (v39 < 0x1C)
                goto LABEL_154;
              v40 = v32;
              v41 = (char *)v100;
              if ((unint64_t)(v32 - (_BYTE *)v100) < 0x20)
                goto LABEL_154;
              v42 = (v39 >> 2) + 1;
              v43 = 4 * (v42 & 0x7FFFFFFFFFFFFFF8);
              v40 = &v32[v43];
              v41 = (char *)v100 + v43;
              v44 = (__int128 *)((char *)v100 + 16);
              v45 = v32 + 16;
              v46 = v42 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v47 = *v44;
                *(v45 - 1) = *(v44 - 1);
                *v45 = v47;
                v44 += 2;
                v45 += 2;
                v46 -= 8;
              }
              while (v46);
              if (v42 != (v42 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_154:
                do
                {
                  v48 = *(_DWORD *)v41;
                  v41 += 4;
                  *(_DWORD *)v40 = v48;
                  v40 += 4;
                }
                while (v41 != v38);
              }
            }
            if (v28 != v35)
              free(v37);
            v31 = &v32[4 * v34];
            v100 = v32;
            v103 = v30;
            v28 = v32;
          }
          *(_DWORD *)v31 = v25 & 1 | (2 * (v27 & 1)) | (v25 >> 30) & 4;
          v31 += 4;
          v101 = v31;
          LODWORD(v27) = v27 >> 1;
          v25 = (v25 >> 1) & 0x7FFFFFFF7FFFFFFFLL;
          LODWORD(v26) = v26 - 1;
          v33 = v26;
        }
        while (v26 > v29);
      }
      v50 = *v94;
      v49 = v94[1];
      if (*v94 == v49)
      {
        v51 = v89;
        v52 = v90;
        v53 = v92;
        v22 = v93;
        v54 = v91;
      }
      else
      {
        v51 = v89;
        v52 = v90;
        v53 = v92;
        v22 = v93;
        v54 = v91;
        while (*(_DWORD *)v50 != v33 || *(_DWORD *)(v50 + 4) != (_DWORD)v27 || *(_QWORD *)(v50 + 8) != v25)
        {
          v50 += 24;
          if (v50 == v49)
            goto LABEL_103;
        }
      }
      if (v50 == v49)
        goto LABEL_103;
      v55 = v94[4];
      v56 = *(unsigned int *)(v50 + 16);
      v57 = v31 - v32;
      if (v31 != v32)
      {
        v58 = 0;
        v59 = 0;
        v60 = 0;
        v61 = v57 >> 2;
        v62 = v56;
        while (1)
        {
          v63 = *(_DWORD *)&v32[4 * v61 + 4 * ~v58];
          v64 = *(unsigned __int16 *)(v55 + 16 * v56);
          if (((v64 >> (2 * v63)) & 1) == 0)
            goto LABEL_103;
          v65 = 0;
          v66 = 0;
          do
          {
            if (((v64 >> v65) & 1) != 0)
              __asm { BR              X4 }
            ++v66;
            v65 += 2;
          }
          while (v66 <= v63);
          v58 = ++v60;
          if (v61 <= v60)
            goto LABEL_79;
        }
      }
      v59 = 0;
      v62 = v56;
LABEL_79:
      if (v53->i32[0] == v33 && v53->i32[1] == (_DWORD)v27)
      {
        v68 = v53[1].u32[0];
        if (v68 >= v25 && v68 <= v25)
        {
          v69 = v53[1].u32[1];
          if (v69 >= HIDWORD(v25) && v69 <= HIDWORD(v25))
          {
            v70 = (int8x16_t)vdupq_n_s32(*(unsigned __int16 *)(v55 + 16 * v56));
            v59 = 2
                * (vmaxv_u8((uint8x8_t)vmovn_s16(vuzp1q_s16((int16x8_t)vceqq_s32((int32x4_t)vandq_s8(v70, (int8x16_t)xmmword_1A0087A80), (int32x4_t)xmmword_1A0087A80), (int16x8_t)vceqq_s32((int32x4_t)vandq_s8(v70, (int8x16_t)xmmword_1A0087A90), (int32x4_t)xmmword_1A0087A90)))) & 1);
          }
        }
      }
      v71 = (__int16 *)(v55 + 16 * v62);
      *(_QWORD *)v52 = *(_QWORD *)(v71 + 2);
      v72 = *v71;
      v73 = *v71 == 0;
      *(_WORD *)(v52 + 20) = *v71;
      *(_DWORD *)(v52 + 12) = v73;
      *(_DWORD *)(v52 + 16) = v59;
      if (*v54 != 2)
      {
LABEL_103:
        v13 = 0;
        LODWORD(EntryV2) = -1;
      }
      else
      {
        LODWORD(EntryV2) = -1;
        if (*((_DWORD *)v54 + 1))
        {
          v13 = 0;
        }
        else
        {
          v13 = 0;
          if (v53->i32[0] != v10)
            goto LABEL_104;
          LODWORD(EntryV2) = -1;
          v13 = 0;
          if (*(_DWORD *)(*((_QWORD *)v54 + 16) - 12) == v51 || v59 != 2)
            goto LABEL_104;
          *(_WORD *)(v52 + 20) = 0;
          if ((v72 & 3) == 0)
            goto LABEL_99;
          v74.i64[0] = 0x100000001;
          v74.i64[1] = 0x100000001;
          v75 = vaddq_s32(*(int32x4_t *)v53->i8, *(int32x4_t *)v53->i8);
          v75.i32[0] = vaddq_s32(*(int32x4_t *)v53->i8, v74).u32[0];
          v99 = v75;
          v97 = 1;
          v95 = 0;
          v96 = 0;
          v98 = 0;
          EntryV2 = geo::c3mm::C3mmArea::getEntryV2(v54, &v99, &v95);
          if ((_DWORD)EntryV2 == -1)
          {
            if (v97 <= 2)
              *(_WORD *)(v52 + 20) |= (_WORD)v97 + 1;
            v72 = *v71;
LABEL_99:
            if ((v72 & 0xC) == 0)
              goto LABEL_115;
            v13 = 0;
            LODWORD(EntryV2) = 0;
            v76 = 2 * v53[1].i32[1];
            v99.i32[2] = (2 * v53[1].i32[0]) | 1;
            v99.i32[3] = v76;
            LODWORD(v77) = vadd_s32(*v53, (int32x2_t)0x100000001).u32[0];
            HIDWORD(v77) = vadd_s32(*v53, *v53).i32[1];
            v99.i64[0] = v77;
            v97 = 1;
            v95 = 0;
            v96 = 0;
            v98 = 0;
            if (*v54 == 2)
            {
              EntryV2 = geo::c3mm::C3mmArea::getEntryV2(v54, &v99, &v95);
              if ((_DWORD)EntryV2 != -1)
                goto LABEL_102;
              if (v97 <= 2)
                *(_WORD *)(v90 + 20) |= 4 * v97 + 4;
              v72 = *v71;
              v53 = v92;
              v22 = v93;
              v54 = v91;
LABEL_115:
              if ((v72 & 0x30) == 0)
              {
LABEL_121:
                if ((v72 & 0xC0) != 0)
                {
                  v13 = 0;
                  LODWORD(EntryV2) = 0;
                  v99.i32[0] = v53->i32[0] + 1;
                  v81 = 2 * v53[1].i32[1];
                  *(uint64_t *)((char *)v99.i64 + 4) = *(_QWORD *)&vadd_s32(*(int32x2_t *)((char *)v53 + 4), *(int32x2_t *)((char *)v53 + 4)) | 0x100000001;
                  v99.i32[3] = v81;
                  v97 = 1;
                  v95 = 0;
                  v96 = 0;
                  v98 = 0;
                  if (*v54 != 2)
                    goto LABEL_104;
                  EntryV2 = geo::c3mm::C3mmArea::getEntryV2(v54, &v99, &v95);
                  if ((_DWORD)EntryV2 != -1)
                    goto LABEL_148;
                  if (v97 <= 2)
                    *(_WORD *)(v90 + 20) |= ((_WORD)v97 << 6) + 64;
                  v72 = *v71;
                }
                if ((v72 & 0x300) != 0)
                {
                  v13 = 0;
                  LODWORD(EntryV2) = 0;
                  v82 = (2 * v92[1].i32[1]) | 1;
                  v99.i32[2] = 2 * v92[1].i32[0];
                  v99.i32[3] = v82;
                  LODWORD(v83) = vadd_s32(*v92, (int32x2_t)0x100000001).u32[0];
                  HIDWORD(v83) = vadd_s32(*v92, *v92).i32[1];
                  v99.i64[0] = v83;
                  v97 = 1;
                  v95 = 0;
                  v96 = 0;
                  v98 = 0;
                  v22 = v93;
                  if (*v91 != 2)
                    goto LABEL_104;
                  EntryV2 = geo::c3mm::C3mmArea::getEntryV2(v91, &v99, &v95);
                  if ((_DWORD)EntryV2 != -1)
                    goto LABEL_148;
                  if (v97 <= 2)
                    *(_WORD *)(v90 + 20) |= ((_WORD)v97 << 8) + 256;
                  v72 = *v71;
                }
                if ((v72 & 0xC00) != 0)
                {
                  v13 = 0;
                  LODWORD(EntryV2) = 0;
                  LODWORD(v84) = vadd_s32(*v92, (int32x2_t)0x100000001).u32[0];
                  HIDWORD(v84) = vadd_s32(*v92, *v92).i32[1];
                  v85 = *(_QWORD *)&vadd_s32(v92[1], v92[1]) | 0x100000001;
                  v99.i64[0] = v84;
                  v99.i64[1] = v85;
                  v97 = 1;
                  v95 = 0;
                  v96 = 0;
                  v98 = 0;
                  v22 = v93;
                  if (*v91 != 2)
                    goto LABEL_104;
                  EntryV2 = geo::c3mm::C3mmArea::getEntryV2(v91, &v99, &v95);
                  if ((_DWORD)EntryV2 != -1)
                    goto LABEL_148;
                  if (v97 <= 2)
                    *(_WORD *)(v90 + 20) |= ((_WORD)v97 << 10) + 1024;
                  v72 = *v71;
                }
                if ((v72 & 0x3000) != 0)
                {
                  v13 = 0;
                  LODWORD(EntryV2) = 0;
                  v86 = (2 * v92->i32[1]) | 1;
                  v99.i32[0] = v92->i32[0] + 1;
                  v99.i32[1] = v86;
                  v87 = (2 * v92[1].i32[1]) | 1;
                  v99.i32[2] = 2 * v92[1].i32[0];
                  v99.i32[3] = v87;
                  v97 = 1;
                  v95 = 0;
                  v96 = 0;
                  v98 = 0;
                  v22 = v93;
                  if (*v91 != 2)
                    goto LABEL_104;
                  EntryV2 = geo::c3mm::C3mmArea::getEntryV2(v91, &v99, &v95);
                  if ((_DWORD)EntryV2 != -1)
                    goto LABEL_148;
                  if (v97 <= 2)
                    *(_WORD *)(v90 + 20) |= ((_WORD)v97 << 12) + 4096;
                  v72 = *v71;
                }
                if ((v72 & 0xC000) != 0)
                {
                  v13 = 0;
                  LODWORD(EntryV2) = 0;
                  v99.i32[0] = v92->i32[0] + 1;
                  v88 = *(int32x2_t *)((char *)v92 + 4);
                  v99.i32[3] = (2 * v92[1].i32[1]) | 1;
                  *(uint64_t *)((char *)v99.i64 + 4) = *(_QWORD *)&vadd_s32(v88, v88) | 0x100000001;
                  v97 = 1;
                  v95 = 0;
                  v96 = 0;
                  v98 = 0;
                  v22 = v93;
                  if (*v91 != 2)
                    goto LABEL_104;
                  EntryV2 = geo::c3mm::C3mmArea::getEntryV2(v91, &v99, &v95);
                  if ((_DWORD)EntryV2 != -1)
                    goto LABEL_148;
                  if (v97 <= 2)
                    *(_WORD *)(v90 + 20) |= ((_WORD)v97 << 14) + 0x4000;
                }
                v13 = 0;
                LODWORD(EntryV2) = -1;
                v22 = v93;
                goto LABEL_104;
              }
              v13 = 0;
              LODWORD(EntryV2) = 0;
              v80 = (2 * v53->i32[1]) | 1;
              v99.i32[0] = v53->i32[0] + 1;
              v99.i32[1] = v80;
              v99.u64[1] = (unint64_t)vadd_s32(v53[1], v53[1]);
              v97 = 1;
              v95 = 0;
              v96 = 0;
              v98 = 0;
              if (*v54 == 2)
              {
                EntryV2 = geo::c3mm::C3mmArea::getEntryV2(v54, &v99, &v95);
                if ((_DWORD)EntryV2 == -1)
                {
                  if (v97 <= 2)
                    *(_WORD *)(v90 + 20) |= 16 * v97 + 16;
                  v72 = *v71;
                  v53 = v92;
                  v22 = v93;
                  v54 = v91;
                  goto LABEL_121;
                }
LABEL_148:
                v22 = v93;
                v13 = HIDWORD(EntryV2);
              }
            }
          }
          else
          {
LABEL_102:
            v13 = HIDWORD(EntryV2);
          }
        }
      }
LABEL_104:
      if (v100 != v102)
        free(v100);
    }
  }
  if (v22)
  {
    v78 = (unint64_t *)&v22->__shared_owners_;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  return EntryV2 | (v13 << 32);
}

void sub_19FF9A268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,void *a24)
{
  uint64_t v24;

  if (a22 != a24)
    free(a22);
  std::shared_ptr<geo::codec::VectorTile>::~shared_ptr[abi:ne180100](v24 - 104);
  _Unwind_Resume(a1);
}

uint64_t geo::c3mm::C3mmArea::getHeightIndices(uint64_t a1, unsigned int *a2, std::vector<unsigned int> *a3)
{
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  std::recursive_mutex *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  int v31;
  unsigned int v32;
  __int128 *v33;
  __int128 *v34;
  int64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  __int128 *v41;
  __int128 *v42;
  char *v43;
  __int128 v45;
  unsigned int v46;
  unint64_t v47;
  unint64_t v48;
  std::vector<unsigned int> *v49;
  char *end;
  uint64_t v51;
  unint64_t value;
  char *begin;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  _BYTE *v59;
  unsigned int *v60;
  int64_t v61;
  unint64_t v62;
  char *v63;
  unsigned int v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _OWORD *v68;
  char *v69;
  uint64_t v70;
  __int128 v71;
  unint64_t *v72;
  unint64_t *v73;
  unint64_t *v74;
  unint64_t v75;
  int64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  char *v81;
  unint64_t *v82;
  unint64_t *v83;
  int64_t v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  unint64_t *v93;
  uint64_t v94;
  __int128 v95;
  unsigned int v96;
  int v97;
  uint64_t v98;
  unint64_t *v99;
  unsigned int *v100;
  unint64_t *v101;
  unint64_t *v102;
  int v103;
  int v104;
  unsigned int v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int v108;
  unsigned __int16 *v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  unint64_t v113;
  int64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t *v118;
  _BYTE *v119;
  unint64_t *v120;
  uint64_t v121;
  int64_t v122;
  unint64_t v123;
  unint64_t *v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _OWORD *v129;
  unint64_t *v130;
  uint64_t v131;
  __int128 v132;
  unint64_t *v133;
  std::vector<unsigned int> *v134;
  unint64_t *v135;
  unint64_t *v136;
  char *v137;
  unint64_t *v138;
  unint64_t *v139;
  uint64_t v140;
  unint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  _BYTE *v148;
  unsigned int *v149;
  int64_t v150;
  unint64_t v151;
  char *v152;
  unsigned int v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  _OWORD *v157;
  char *v158;
  uint64_t v159;
  __int128 v160;
  unsigned int v161;
  unsigned int v162;
  unsigned int *v163;
  std::vector<unsigned int> *v164;
  unsigned int *__p;
  unint64_t v166;
  int v167;
  unint64_t *v168;
  unsigned int *v169;
  uint64_t v170;
  int v171;
  unsigned int v172;
  int v173;
  char v174;
  int v175;
  unsigned int v176;
  unsigned int v177;
  char *v178;
  char *v179;
  char *v180;
  _QWORD *v181;
  std::__shared_weak_count *v182;

  if (*(_WORD *)a1 != 2)
    return 0xFFFFFFFFLL;
  v6 = *a2;
  v7 = *(unsigned int **)(a1 + 120);
  v8 = *(unsigned int **)(a1 + 128);
  if (v7 == v8)
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    if (!v6)
      goto LABEL_16;
    return 0xFFFFFFFFLL;
  }
  v9 = *(unsigned int **)(a1 + 120);
  while (1)
  {
    v10 = v9[2];
    if (v10 >= v6)
      break;
    v9 += 3;
    if (v9 == v8)
    {
      v10 = 0;
      v11 = 0;
      goto LABEL_11;
    }
  }
  v11 = *(_QWORD *)v9;
  do
  {
LABEL_11:
    if (v6 <= v7[2])
    {
      v14 = *v7;
      v13 = a2[1] >> (v6 - *v7);
      v12 = a2[2] >> (v6 - *v7);
      if (v6 <= v10)
        goto LABEL_16;
      return 0xFFFFFFFFLL;
    }
    v7 += 3;
  }
  while (v7 != v8);
  v12 = 0;
  v13 = 0;
  v14 = -1;
  if (v6 > v10)
    return 0xFFFFFFFFLL;
LABEL_16:
  v17 = (std::recursive_mutex *)(a1 + 176);
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 176));
  v20 = *(uint64_t **)(a1 + 160);
  v19 = (uint64_t *)(a1 + 160);
  v18 = v20;
  if (!v20)
  {
LABEL_30:
    v181 = 0;
    v182 = 0;
    std::recursive_mutex::unlock(v17);
    v25 = 0;
    goto LABEL_31;
  }
  v21 = v19;
  while (2)
  {
    v22 = *((_DWORD *)v18 + 8);
    if (v22 < v14)
      goto LABEL_18;
    if (v14 < v22)
      goto LABEL_22;
    v23 = *((_DWORD *)v18 + 9);
    if (v23 < v13)
    {
LABEL_18:
      ++v18;
    }
    else if (v13 < v23)
    {
LABEL_22:
      v21 = v18;
    }
    else if (*((_DWORD *)v18 + 10) < v12)
    {
      ++v18;
    }
    else
    {
      v21 = v18;
    }
    v18 = (uint64_t *)*v18;
    if (v18)
      continue;
    break;
  }
  if (v21 == v19)
    goto LABEL_30;
  v24 = *((_DWORD *)v21 + 8);
  if (v14 < v24)
    goto LABEL_30;
  if (v24 >= v14)
  {
    v46 = *((_DWORD *)v21 + 9);
    if (v13 < v46 || v46 >= v13 && *((_DWORD *)v21 + 10) > v12)
      goto LABEL_30;
  }
  v28 = (_QWORD *)v21[6];
  v25 = (std::__shared_weak_count *)v21[7];
  v181 = v28;
  v182 = v25;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v30 = __ldxr(p_shared_owners);
    while (__stxr(v30 + 1, p_shared_owners));
  }
  std::recursive_mutex::unlock(v17);
  if (!v28)
  {
LABEL_31:
    v15 = v14 | (unint64_t)(v13 << 32);
    if (!v25)
      return v15;
    goto LABEL_32;
  }
  if (v28[4] == v28[5])
    goto LABEL_207;
  v163 = a2;
  v164 = a3;
  v31 = *a2 - HIDWORD(v11);
  v176 = a2[1] >> (*(_BYTE *)a2 - BYTE4(v11));
  v32 = a2[2] >> (*(_BYTE *)a2 - BYTE4(v11));
  v34 = (__int128 *)*v28;
  v33 = (__int128 *)v28[1];
  v179 = 0;
  v180 = 0;
  v178 = 0;
  v35 = (char *)v33 - (char *)v34;
  if (v33 == v34)
  {
    v38 = 0;
    v39 = 0;
    v43 = 0;
  }
  else
  {
    v36 = 0xAAAAAAAAAAAAAAABLL * (v35 >> 3);
    if (v36 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v37 = (char *)operator new(v35);
    v38 = v37;
    v39 = &v37[24 * v36];
    v178 = v37;
    v180 = v39;
    v40 = v37;
    do
    {
      *(_QWORD *)v40 = 0;
      *((_QWORD *)v40 + 1) = 0;
      *((_QWORD *)v40 + 2) = 0x200000000;
      v40 += 24;
    }
    while (v40 != v39);
    v179 = &v37[24 * v36];
    v41 = (__int128 *)*v28;
    v42 = (__int128 *)v28[1];
    v43 = v37;
    if ((__int128 *)*v28 != v42)
    {
      do
      {
        if (*((_DWORD *)v41 + 1) == v176 && *((_DWORD *)v41 + 2) == v32)
        {
          v45 = *v41;
          *((_QWORD *)v43 + 2) = *((_QWORD *)v41 + 2);
          *(_OWORD *)v43 = v45;
          v43 += 24;
        }
        v41 = (__int128 *)((char *)v41 + 24);
      }
      while (v41 != v42);
    }
  }
  v47 = 0xAAAAAAAAAAAAAAABLL * ((v43 - v38) >> 3);
  v48 = 0xAAAAAAAAAAAAAAABLL * ((v39 - v38) >> 3);
  if (v47 <= v48)
  {
    if (v47 < v48)
    {
      v39 = &v38[24 * v47];
      v179 = v39;
    }
  }
  else
  {
    std::vector<geo::c3mm::C3mmRoot>::__append(&v178, v47 - v48);
    v38 = v178;
    v39 = v179;
  }
  if (v38 == v39)
    goto LABEL_204;
  if (*a2 == HIDWORD(v11))
  {
    v49 = v164;
    end = (char *)v164->__end_;
    while (1)
    {
      value = (unint64_t)v49->__end_cap_.__value_;
      if ((unint64_t)end < value)
      {
        *(_DWORD *)end = *((_DWORD *)v38 + 3);
        v51 = (uint64_t)(end + 4);
      }
      else
      {
        begin = (char *)v49->__begin_;
        v54 = end - (char *)v49->__begin_;
        v55 = v54 >> 2;
        v56 = (v54 >> 2) + 1;
        if (v56 >> 62)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v57 = value - (_QWORD)begin;
        if (v57 >> 1 > v56)
          v56 = v57 >> 1;
        if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL)
          v58 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v58 = v56;
        if (v58)
        {
          if (v58 >> 62)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v59 = operator new(4 * v58);
          v60 = (unsigned int *)&v59[4 * v55];
          *v60 = *((_DWORD *)v38 + 3);
          v51 = (uint64_t)(v60 + 1);
          v61 = end - begin;
          if (end != begin)
          {
LABEL_80:
            v62 = v61 - 4;
            if (v62 < 0xBC
              || (v65 = (end - 4 - begin) & 0xFFFFFFFFFFFFFFFCLL, &v59[v54 - 4 - v65] > &v59[v54 - 4])
              || &end[-v65 - 4] > end - 4
              || (unint64_t)(end - v59 - v54) < 0x20)
            {
              v63 = end;
              v49 = v164;
            }
            else
            {
              v66 = (v62 >> 2) + 1;
              v67 = 4 * (v66 & 0x7FFFFFFFFFFFFFF8);
              v63 = &end[-v67];
              v60 = (unsigned int *)((char *)v60 - v67);
              v68 = &v59[4 * v55 - 16];
              v69 = end - 16;
              v70 = v66 & 0x7FFFFFFFFFFFFFF8;
              v49 = v164;
              do
              {
                v71 = *(_OWORD *)v69;
                *(v68 - 1) = *((_OWORD *)v69 - 1);
                *v68 = v71;
                v68 -= 2;
                v69 -= 32;
                v70 -= 8;
              }
              while (v70);
              if (v66 == (v66 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_83:
                v49->__begin_ = v60;
                v49->__end_ = (std::vector<unsigned int>::pointer)v51;
                v49->__end_cap_.__value_ = (unsigned int *)&v59[4 * v58];
                if (!begin)
                  goto LABEL_69;
LABEL_87:
                operator delete(begin);
                goto LABEL_69;
              }
            }
            do
            {
              v64 = *((_DWORD *)v63 - 1);
              v63 -= 4;
              *--v60 = v64;
            }
            while (v63 != begin);
            goto LABEL_83;
          }
        }
        else
        {
          v59 = 0;
          v60 = (unsigned int *)(4 * v55);
          *(_DWORD *)(4 * v55) = *((_DWORD *)v38 + 3);
          v51 = 4 * v55 + 4;
          v61 = end - begin;
          if (end != begin)
            goto LABEL_80;
        }
        v49 = v164;
        v164->__begin_ = v60;
        v164->__end_ = (std::vector<unsigned int>::pointer)v51;
        v164->__end_cap_.__value_ = (unsigned int *)&v59[4 * v58];
        if (begin)
          goto LABEL_87;
      }
LABEL_69:
      v49->__end_ = (std::vector<unsigned int>::pointer)v51;
      v38 += 24;
      end = (char *)v51;
      if (v38 == v39)
        goto LABEL_203;
    }
  }
  v172 = v32;
  v174 = v31;
  v166 = HIDWORD(v11);
  v72 = 0;
  v73 = 0;
  v74 = 0;
  while (2)
  {
    while (1)
    {
      v75 = *((unsigned int *)v38 + 4) | ((unint64_t)*((unsigned int *)v38 + 3) << 32);
      if (v74 >= v73)
        break;
      *v74++ = v75;
      v38 += 24;
      if (v38 == v39)
        goto LABEL_126;
    }
    v76 = (char *)v74 - (char *)v72;
    v77 = v74 - v72;
    v78 = v77 + 1;
    if ((unint64_t)(v77 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v79 = v74;
    if (((char *)v73 - (char *)v72) >> 2 > v78)
      v78 = ((char *)v73 - (char *)v72) >> 2;
    if ((unint64_t)((char *)v73 - (char *)v72) >= 0x7FFFFFFFFFFFFFF8)
      v80 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v80 = v78;
    if (!v80)
    {
      v81 = 0;
      v82 = v74;
      v83 = (unint64_t *)(8 * v77);
      *(_QWORD *)(8 * v77) = v75;
      v74 = (unint64_t *)(8 * v77 + 8);
      v84 = (char *)v79 - (char *)v72;
      if (v79 == v72)
        goto LABEL_112;
LABEL_109:
      v85 = v84 - 8;
      if (v85 >= 0x168)
      {
        v88 = v82 - 1;
        v89 = ((char *)v88 - (char *)v72) & 0xFFFFFFFFFFFFFFF8;
        if (&v81[v76 - 8 - v89] > &v81[v76 - 8])
        {
          v86 = v79;
        }
        else if ((unint64_t *)((char *)v88 - v89) > v88)
        {
          v86 = v79;
        }
        else if ((unint64_t)((char *)v79 - &v81[v76]) >= 0x20)
        {
          v90 = (v85 >> 3) + 1;
          v91 = 8 * (v90 & 0x3FFFFFFFFFFFFFFCLL);
          v86 = &v79[v91 / 0xFFFFFFFFFFFFFFF8];
          v83 = (unint64_t *)((char *)v83 - v91);
          v92 = &v81[8 * v77 - 16];
          v93 = v79 - 2;
          v94 = v90 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v95 = *(_OWORD *)v93;
            *((_OWORD *)v92 - 1) = *((_OWORD *)v93 - 1);
            *(_OWORD *)v92 = v95;
            v92 -= 32;
            v93 -= 4;
            v94 -= 4;
          }
          while (v94);
          if (v90 == (v90 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_112;
        }
        else
        {
          v86 = v79;
        }
      }
      else
      {
        v86 = v82;
      }
      do
      {
        v87 = *--v86;
        *--v83 = v87;
      }
      while (v86 != v72);
      goto LABEL_112;
    }
    if (v80 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v81 = (char *)operator new(8 * v80);
    v82 = v74;
    v83 = (unint64_t *)&v81[8 * v77];
    *v83 = v75;
    v74 = v83 + 1;
    v84 = (char *)v79 - (char *)v72;
    if (v79 != v72)
      goto LABEL_109;
LABEL_112:
    v73 = (unint64_t *)&v81[8 * v80];
    if (v72)
      operator delete(v72);
    v72 = v83;
    v38 += 24;
    if (v38 != v39)
      continue;
    break;
  }
LABEL_126:
  v96 = *v163;
  v97 = v166;
  if (*v163 > v166)
  {
    v162 = v163[1] - (v176 << v174);
    v98 = v181[4];
    v161 = v163[2] - (v172 << v174);
    v99 = v74;
    v100 = (unsigned int *)v72;
    v170 = v98;
    while (1)
    {
      __p = v100;
      v167 = v97;
      if (v100 != (unsigned int *)v99)
        break;
      v102 = 0;
      v72 = 0;
LABEL_169:
      if (__p)
      {
        v133 = v102;
        operator delete(__p);
        v102 = v133;
      }
      v97 = v167 + 1;
      v96 = *v163;
      v100 = (unsigned int *)v72;
      v99 = v102;
      if (v167 + 1 >= *v163)
        goto LABEL_172;
    }
    v72 = 0;
    v101 = 0;
    v102 = 0;
    v103 = (v161 >> (v96 + ~(_BYTE)v97)) & 1 | (2 * ((v162 >> (v96 + ~(_BYTE)v97)) & 1));
    v104 = v103 + 5;
    v171 = v103 + 5;
    v173 = v103;
    v168 = v99;
    while (2)
    {
      v105 = 0;
      v106 = 0;
      v107 = *v100;
      v108 = v100[1];
      v169 = v100;
      v109 = (unsigned __int16 *)(v98 + 16 * v107);
      v110 = (v107 + 1);
      v111 = 2 * v108;
      v175 = 2 * v108;
      v177 = v107 + 1;
LABEL_135:
      if (((*v109 >> (2 * v105)) & 1) == 0)
      {
        v112 = v106;
        goto LABEL_134;
      }
      v112 = v110;
      if ((_DWORD)v106)
        v112 = *(unsigned int *)(v98 + 16 * v106 + 12);
      if ((v105 & 3) == v103)
      {
        v113 = v112 | ((unint64_t)(v111 + (v105 >> 2)) << 32);
        if (v102 < v101)
        {
          *v102++ = v113;
          goto LABEL_134;
        }
        v114 = (char *)v102 - (char *)v72;
        v115 = v102 - v72;
        v116 = v115 + 1;
        if ((unint64_t)(v115 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        if (((char *)v101 - (char *)v72) >> 2 > v116)
          v116 = ((char *)v101 - (char *)v72) >> 2;
        if ((unint64_t)((char *)v101 - (char *)v72) >= 0x7FFFFFFFFFFFFFF8)
          v117 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v117 = v116;
        if (v117)
        {
          if (v117 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v118 = v102;
          v119 = operator new(8 * v117);
          v102 = v118;
          v120 = (unint64_t *)&v119[8 * v115];
          *v120 = v113;
          v121 = (uint64_t)(v120 + 1);
          v122 = (char *)v102 - (char *)v72;
          if (v102 == v72)
          {
LABEL_155:
            v101 = (unint64_t *)&v119[8 * v117];
            if (v72)
              operator delete(v72);
            v72 = v120;
            v102 = (unint64_t *)v121;
            v98 = v170;
            v104 = v171;
            v103 = v173;
            v111 = v175;
            v110 = v177;
            goto LABEL_134;
          }
        }
        else
        {
          v119 = 0;
          v120 = (unint64_t *)(8 * v115);
          *(_QWORD *)(8 * v115) = v113;
          v121 = 8 * v115 + 8;
          v122 = (char *)v102 - (char *)v72;
          if (v102 == v72)
            goto LABEL_155;
        }
        v123 = v122 - 8;
        if (v123 >= 0x168)
        {
          v126 = ((char *)(v102 - 1) - (char *)v72) & 0xFFFFFFFFFFFFFFF8;
          if (&v119[v114 - 8 - v126] > &v119[v114 - 8])
          {
            v124 = v102;
          }
          else if ((unint64_t *)((char *)v102 - v126 - 8) > v102 - 1)
          {
            v124 = v102;
          }
          else if ((unint64_t)((char *)v102 - v119 - v114) >= 0x20)
          {
            v127 = (v123 >> 3) + 1;
            v128 = 8 * (v127 & 0x3FFFFFFFFFFFFFFCLL);
            v124 = &v102[v128 / 0xFFFFFFFFFFFFFFF8];
            v120 = (unint64_t *)((char *)v120 - v128);
            v129 = &v119[8 * v115 - 16];
            v130 = v102 - 2;
            v131 = v127 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v132 = *(_OWORD *)v130;
              *(v129 - 1) = *((_OWORD *)v130 - 1);
              *v129 = v132;
              v129 -= 2;
              v130 -= 4;
              v131 -= 4;
            }
            while (v131);
            if (v127 == (v127 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_155;
          }
          else
          {
            v124 = v102;
          }
        }
        else
        {
          v124 = v102;
        }
        do
        {
          v125 = *--v124;
          *--v120 = v125;
        }
        while (v124 != v72);
        goto LABEL_155;
      }
LABEL_134:
      ++v105;
      v106 = v112;
      if (v105 == v104)
      {
        v100 = v169 + 2;
        if (v169 + 2 == (unsigned int *)v168)
          goto LABEL_169;
        continue;
      }
      goto LABEL_135;
    }
  }
  v102 = v74;
LABEL_172:
  v134 = v164;
  v135 = v102;
  std::vector<unsigned int>::reserve(v164, v102 - v72);
  if (v72 != v135)
  {
    v136 = v135;
    v137 = (char *)v164->__end_;
    v138 = v72;
    v139 = v135;
    while (1)
    {
      v141 = (unint64_t)v134->__end_cap_.__value_;
      if ((unint64_t)v137 >= v141)
        break;
      *(_DWORD *)v137 = *((_DWORD *)v138 + 1);
      v140 = (uint64_t)(v137 + 4);
LABEL_175:
      v134->__end_ = (std::vector<unsigned int>::pointer)v140;
      ++v138;
      v137 = (char *)v140;
      if (v138 == v136)
        goto LABEL_201;
    }
    v142 = (char *)v134->__begin_;
    v143 = v137 - (char *)v134->__begin_;
    v144 = v143 >> 2;
    v145 = (v143 >> 2) + 1;
    if (v145 >> 62)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v146 = v141 - (_QWORD)v142;
    if (v146 >> 1 > v145)
      v145 = v146 >> 1;
    if ((unint64_t)v146 >= 0x7FFFFFFFFFFFFFFCLL)
      v147 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v147 = v145;
    if (v147)
    {
      if (v147 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v148 = operator new(4 * v147);
      v136 = v139;
      v149 = (unsigned int *)&v148[4 * v144];
      *v149 = *((_DWORD *)v138 + 1);
      v140 = (uint64_t)(v149 + 1);
      v150 = v137 - v142;
      if (v137 != v142)
      {
LABEL_186:
        v151 = v150 - 4;
        if (v151 < 0xBC
          || (v154 = (v137 - 4 - v142) & 0xFFFFFFFFFFFFFFFCLL, &v148[v143 - 4 - v154] > &v148[v143 - 4])
          || &v137[-v154 - 4] > v137 - 4
          || (unint64_t)(v137 - v148 - v143) < 0x20)
        {
          v152 = v137;
          v134 = v164;
        }
        else
        {
          v155 = (v151 >> 2) + 1;
          v156 = 4 * (v155 & 0x7FFFFFFFFFFFFFF8);
          v152 = &v137[-v156];
          v149 = (unsigned int *)((char *)v149 - v156);
          v157 = &v148[4 * v144 - 16];
          v158 = v137 - 16;
          v159 = v155 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v160 = *(_OWORD *)v158;
            *(v157 - 1) = *((_OWORD *)v158 - 1);
            *v157 = v160;
            v157 -= 2;
            v158 -= 32;
            v159 -= 8;
          }
          while (v159);
          v134 = v164;
          if (v155 == (v155 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_192:
            v134->__begin_ = v149;
            v134->__end_ = (std::vector<unsigned int>::pointer)v140;
            v134->__end_cap_.__value_ = (unsigned int *)&v148[4 * v147];
            if (v142)
            {
              operator delete(v142);
              v136 = v139;
            }
            goto LABEL_175;
          }
        }
        do
        {
          v153 = *((_DWORD *)v152 - 1);
          v152 -= 4;
          *--v149 = v153;
        }
        while (v152 != v142);
        goto LABEL_192;
      }
    }
    else
    {
      v148 = 0;
      v149 = (unsigned int *)(4 * v144);
      *(_DWORD *)(4 * v144) = *((_DWORD *)v138 + 1);
      v140 = 4 * v144 + 4;
      v150 = v137 - v142;
      if (v137 != v142)
        goto LABEL_186;
    }
    v134 = v164;
    goto LABEL_192;
  }
LABEL_201:
  if (v72)
    operator delete(v72);
LABEL_203:
  v39 = v178;
LABEL_204:
  if (v39)
    operator delete(v39);
  v25 = v182;
LABEL_207:
  v15 = 0xFFFFFFFFLL;
  if (v25)
  {
LABEL_32:
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  return v15;
}

void sub_19FF9AE70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p)
{
  void *v20;
  uint64_t v21;
  void *v23;

  if (v20)
  {
    operator delete(v20);
    v23 = __p;
    if (!__p)
    {
LABEL_3:
      std::shared_ptr<geo::codec::VectorTile>::~shared_ptr[abi:ne180100](v21 - 96);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v23 = __p;
    if (!__p)
      goto LABEL_3;
  }
  operator delete(v23);
  std::shared_ptr<geo::codec::VectorTile>::~shared_ptr[abi:ne180100](v21 - 96);
  _Unwind_Resume(a1);
}

void geo::c3mm::C3mmArea::insertFile(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  std::recursive_mutex *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;

  v6 = (std::recursive_mutex *)(a1 + 176);
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 176));
  v21 = *a2;
  v22 = *((_DWORD *)a2 + 2);
  v8 = *a3;
  v7 = (std::__shared_weak_count *)a3[1];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v12 = (_QWORD *)(a1 + 160);
  v11 = *(uint64_t **)(a1 + 160);
  if (!v11)
  {
    v13 = (uint64_t *)(a1 + 160);
    goto LABEL_16;
  }
  do
  {
    while (1)
    {
      v13 = v11;
      v14 = *((_DWORD *)v11 + 8);
      if (v21 >= v14)
      {
        if (v14 < v21)
          goto LABEL_13;
        v15 = *((_DWORD *)v13 + 9);
        if (HIDWORD(v21) >= v15)
        {
          if (v15 < HIDWORD(v21))
            goto LABEL_13;
          v16 = *((_DWORD *)v13 + 10);
          if (v22 >= v16)
            break;
        }
      }
      v11 = (uint64_t *)*v13;
      v12 = v13;
      if (!*v13)
        goto LABEL_16;
    }
    if (v16 >= v22)
      goto LABEL_19;
LABEL_13:
    v11 = (uint64_t *)v13[1];
  }
  while (v11);
  v12 = v13 + 1;
LABEL_16:
  v17 = operator new(0x40uLL);
  v17[4] = v21;
  *((_DWORD *)v17 + 10) = v22;
  v17[6] = v8;
  v17[7] = v7;
  *v17 = 0;
  v17[1] = 0;
  v17[2] = v13;
  *v12 = v17;
  v18 = **(_QWORD **)(a1 + 152);
  if (v18)
  {
    *(_QWORD *)(a1 + 152) = v18;
    v17 = (_QWORD *)*v12;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 160), v17);
  ++*(_QWORD *)(a1 + 168);
  v7 = 0;
LABEL_19:
  if (v7)
  {
    v19 = (unint64_t *)&v7->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  std::recursive_mutex::unlock(v6);
}

void sub_19FF9B094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::recursive_mutex *v9;

  std::pair<geo::c3mm::C3mmFileIndex,std::shared_ptr<geo::c3mm::C3mmFile>>::~pair((uint64_t)&a9);
  std::recursive_mutex::unlock(v9);
  _Unwind_Resume(a1);
}

uint64_t std::pair<geo::c3mm::C3mmFileIndex,std::shared_ptr<geo::c3mm::C3mmFile>>::~pair(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 24);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t geo::c3mm::loadFromChunk(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, int a5, int8x16_t a6, int8x16_t a7, double a8, double a9, double a10, int8x16_t a11, double a12, int8x16_t a13)
{
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  const char *v19;
  uint64_t v20;
  int v22;
  int v23;
  _DWORD *v24;
  _DWORD *v25;
  char *v26;
  double v27;
  double v28;
  double v29;
  float v30;
  double v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  unint64_t v40;
  unsigned __int8 *v41;
  unint64_t *v42;
  unint64_t v43;
  char RootIndex;
  unint64_t *v45;
  unint64_t v46;
  char ChildInfo;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  char Bounds;
  uint64_t *v52;
  unint64_t *v53;
  unint64_t v54;
  char RootBounds;
  uint64_t *v56;
  unint64_t *v57;
  unint64_t v58;
  BOOL ChildBounds;
  int HighPrecisionBounds;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  const char *v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  int v68;
  _QWORD v69[2];
  _QWORD v70[2];
  _QWORD v71[2];
  _QWORD v72[2];
  int **v73[2];
  char **v74[2];
  unsigned __int8 *v75;
  std::__shared_weak_count *v76;
  uint64_t v77;
  char **v78;
  char **v79;

  v67 = a4;
  v68 = a5;
  if (!a2)
  {
    v16 = (std::__shared_weak_count *)operator new(0x50uLL);
    v16->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    v16->__shared_weak_owners_ = 0;
    v16->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE3E8;
    *(_OWORD *)&v16[1].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v16[2].__shared_owners_ = 0u;
    v16[3].__vftable = 0;
    v16[1].std::__shared_count = 0u;
    v75 = (unsigned __int8 *)&v16[1];
    v76 = v16;
    geo::c3mm::C3mmArea::insertFile(a3, &v67, (uint64_t *)&v75);
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    goto LABEL_14;
  }
  if (a2 < 6 || *(_BYTE *)a1 != 67 || *(_BYTE *)(a1 + 1) != 51 || *(_BYTE *)(a1 + 2) != 77 || *(_BYTE *)(a1 + 3) != 77)
  {
LABEL_14:
    v19 = "Invalid c3mm file!";
LABEL_15:
    puts(v19);
    return 0;
  }
  if (*(_WORD *)(a1 + 4) != 2)
  {
    printf("Unsupported C3MM version: %i\n");
    return 0;
  }
  if (a2 <= 0xB)
  {
    printf("Invalid c3mm file, size (%zu) is less than header size (%i)\n, ");
    return 0;
  }
  v22 = a4;
  v23 = *(unsigned __int16 *)(a1 + 6);
  v66 = *(_DWORD *)(a1 + 8);
  *(_WORD *)a3 = 2;
  *(_DWORD *)(a3 + 4) = v23;
  v25 = *(_DWORD **)(a3 + 120);
  v24 = *(_DWORD **)(a3 + 128);
  if (v25 != v24)
    goto LABEL_23;
  {
    v19 = "Meta levels are not defined";
    goto LABEL_15;
  }
  v25 = *(_DWORD **)(a3 + 120);
  v24 = *(_DWORD **)(a3 + 128);
LABEL_23:
  if (v25 == v24)
  {
LABEL_26:
    puts("No meta level for file index");
    v25 = 0;
  }
  else
  {
    while (*v25 != v22)
    {
      v25 += 3;
      if (v25 == v24)
        goto LABEL_26;
    }
  }
  v26 = (char *)operator new(0x50uLL);
  *((_QWORD *)v26 + 1) = 0;
  *((_QWORD *)v26 + 2) = 0;
  *(_QWORD *)v26 = &off_1E42DE3E8;
  v31 = 0.0;
  *(_OWORD *)(v26 + 40) = 0u;
  *(_OWORD *)(v26 + 56) = 0u;
  *((_QWORD *)v26 + 9) = 0;
  v79 = (char **)v26;
  *(_OWORD *)(v26 + 24) = 0u;
  v78 = (char **)(v26 + 24);
  if (!v25)
    goto LABEL_86;
  if (!v66)
  {
LABEL_79:
    geo::c3mm::C3mmArea::insertFile(a3, &v67, (uint64_t *)&v78);
    v20 = 1;
    goto LABEL_87;
  }
  v32 = 0;
  v65 = a1 - 4;
  v33 = 12;
  while (1)
  {
    if (v33 >= a2)
      v34 = a2;
    else
      v34 = v33;
    if (v34 + 1 > a2)
    {
      v64 = "type";
      goto LABEL_85;
    }
    v35 = v34 + 5;
    if (v34 + 5 > a2)
    {
      v64 = "length";
      goto LABEL_85;
    }
    if (v34 + 6 > a2)
    {
      v64 = "compression";
      goto LABEL_85;
    }
    v36 = v34 + 10;
    if (v34 + 10 > a2)
      break;
    v37 = *(unsigned __int8 *)(a1 + v34);
    v38 = *(unsigned int *)(v65 + v35);
    v39 = *(unsigned __int8 *)(a1 + v35);
    v40 = *(unsigned int *)(v65 + v36);
    v41 = (unsigned __int8 *)(a1 + v36);
    v75 = 0;
    v76 = 0;
    v77 = 0;
    if (v39 == 1)
    {
      std::vector<unsigned char>::resize((uint64_t)&v75, v40);
      if (!lzma_decompress_bytes())
      {
LABEL_66:
        LOBYTE(HighPrecisionBounds) = 0;
        goto LABEL_75;
      }
      v41 = v75;
    }
    switch(v37)
    {
      case 0:
        v74[0] = v78;
        v74[1] = v79;
        if (v79)
        {
          v42 = (unint64_t *)(v79 + 1);
          do
            v43 = __ldxr(v42);
          while (__stxr(v43 + 1, v42));
        }
        std::shared_ptr<geo::codec::VectorTile>::~shared_ptr[abi:ne180100]((uint64_t)v74);
        if ((RootIndex & 1) == 0)
          goto LABEL_66;
        goto LABEL_71;
      case 1:
        v73[0] = (int **)v78;
        v73[1] = (int **)v79;
        if (v79)
        {
          v45 = (unint64_t *)(v79 + 1);
          do
            v46 = __ldxr(v45);
          while (__stxr(v46 + 1, v45));
        }
        std::shared_ptr<geo::codec::VectorTile>::~shared_ptr[abi:ne180100]((uint64_t)v73);
        if ((ChildInfo & 1) == 0)
          goto LABEL_66;
        goto LABEL_71;
      case 2:
        v48 = (uint64_t)v78;
        v72[0] = v78;
        v72[1] = v79;
        if (v79)
        {
          v49 = (unint64_t *)(v79 + 1);
          do
            v50 = __ldxr(v49);
          while (__stxr(v50 + 1, v49));
        }
        std::shared_ptr<geo::codec::VectorTile>::~shared_ptr[abi:ne180100]((uint64_t)v72);
        if ((Bounds & 1) == 0)
          goto LABEL_66;
        goto LABEL_71;
      case 3:
        goto LABEL_71;
      case 5:
        v52 = (uint64_t *)v78;
        v71[0] = v78;
        v71[1] = v79;
        if (v79)
        {
          v53 = (unint64_t *)(v79 + 1);
          do
            v54 = __ldxr(v53);
          while (__stxr(v54 + 1, v53));
        }
        std::shared_ptr<geo::codec::VectorTile>::~shared_ptr[abi:ne180100]((uint64_t)v71);
        if ((RootBounds & 1) == 0)
          goto LABEL_66;
        goto LABEL_71;
      case 6:
        v56 = (uint64_t *)v78;
        v70[0] = v78;
        v70[1] = v79;
        if (v79)
        {
          v57 = (unint64_t *)(v79 + 1);
          do
            v58 = __ldxr(v57);
          while (__stxr(v58 + 1, v57));
        }
        std::shared_ptr<geo::codec::VectorTile>::~shared_ptr[abi:ne180100]((uint64_t)v70);
        if (!ChildBounds)
          goto LABEL_66;
        goto LABEL_71;
      case 7:
        v61 = (uint64_t)v78;
        v69[0] = v78;
        v69[1] = v79;
        if (v79)
        {
          v62 = (unint64_t *)(v79 + 1);
          do
            v63 = __ldxr(v62);
          while (__stxr(v63 + 1, v62));
        }
        std::shared_ptr<geo::codec::VectorTile>::~shared_ptr[abi:ne180100]((uint64_t)v69);
        if (HighPrecisionBounds)
          goto LABEL_71;
        break;
      default:
LABEL_71:
        if (v33 + v38 >= a2)
          v33 = a2;
        else
          v33 += v38;
        LOBYTE(HighPrecisionBounds) = 1;
        break;
    }
LABEL_75:
    if (v75)
    {
      v76 = (std::__shared_weak_count *)v75;
      operator delete(v75);
    }
    if ((HighPrecisionBounds & 1) == 0)
      goto LABEL_86;
    if (++v32 == v66)
      goto LABEL_79;
  }
  v64 = "uncomressedLength";
LABEL_85:
  printf("Failed to read C3mm file - %s", v64);
LABEL_86:
  v20 = 0;
LABEL_87:
  std::shared_ptr<geo::codec::VectorTile>::~shared_ptr[abi:ne180100]((uint64_t)&v78);
  return v20;
}

void sub_19FF9B628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  void *v17;
  va_list va;

  va_start(va, a15);
  std::shared_ptr<geo::codec::VectorTile>::~shared_ptr[abi:ne180100]((uint64_t)va);
  v17 = *(void **)(v15 - 128);
  if (v17)
  {
    *(_QWORD *)(v15 - 120) = v17;
    operator delete(v17);
  }
  std::shared_ptr<geo::codec::VectorTile>::~shared_ptr[abi:ne180100](v15 - 104);
  _Unwind_Resume(a1);
}

void sub_19FF9B680(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<geo::codec::VectorTile>::~shared_ptr[abi:ne180100](v1 - 128);
  _Unwind_Resume(a1);
}

BOOL `anonymous namespace'::readMetaLevels(uint64_t a1, unint64_t a2, _QWORD *a3, int8x16_t a4, int8x16_t a5, double a6, double a7, double a8, int8x16_t a9, double a10, int8x16_t a11)
{
  _QWORD *v11;
  int v12;
  uint64_t v14;
  int v15;
  float32x4_t v16;
  int8x16_t v17;
  int8x16_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  int v24;
  size_t v25;
  _QWORD *v26;
  uint64_t v27;
  unsigned __int8 *v28;
  void *v29;
  unint64_t v30;
  _QWORD *v31;
  _DWORD *v32;
  _DWORD *v33;
  unint64_t v34;
  BOOL v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  unint64_t v42;
  uint64_t v43;
  int v44;
  _QWORD *v45;
  char v46;
  uint64_t v47;
  unsigned __int8 *v48;
  unsigned int v49;
  BOOL v50;
  const char *v51;
  size_t v52;
  uint64_t v53;
  unint64_t v54;
  size_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  const char *v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  float *v69;
  float *v70;
  float *v71;
  _DWORD *v72;
  unint64_t v73;
  size_t v74;
  uint64_t v75;
  unsigned __int8 *v76;
  unsigned int v77;
  const char *v79;
  char *v80;
  unint64_t v81;
  unint64_t v82;
  size_t v83;
  uint64_t v84;
  unint64_t v85;
  int v87;
  void *__p;
  uint64_t v90;
  __n128 v91;
  __n128 v92;
  float32x4_t v93;
  float32x4_t v94;
  __n128 v95;
  __n128 v96;
  float32x4x3_t v97;

  v11 = a3;
  v12 = *(_DWORD *)(a1 + 8);
  if (!v12)
    return v11[16] != v11[15];
  v14 = a1;
  v15 = 0;
  v90 = a1 - 4;
  v16 = 0uLL;
  v17 = (int8x16_t)xmmword_19FFB3780;
  v18 = (int8x16_t)xmmword_19FFB3790;
  v19 = 12;
  v87 = *(_DWORD *)(a1 + 8);
  while (1)
  {
    if (v19 + 1 > a2)
    {
      v79 = "type";
      goto LABEL_83;
    }
    v20 = v19 + 5;
    if (v19 + 5 > a2)
    {
      v79 = "length";
      goto LABEL_83;
    }
    if (v19 + 6 > a2)
    {
      v79 = "compression";
      goto LABEL_83;
    }
    v21 = v19 + 10;
    if (v19 + 10 > a2)
      break;
    v22 = (unsigned __int8 *)(v14 + v19);
    v23 = *(unsigned int *)(v90 + v20);
    v24 = *v22;
    v25 = *(unsigned int *)(v90 + v21);
    if (*(_BYTE *)(v14 + v20) == 1)
    {
      v26 = v11;
      v27 = *(unsigned int *)(v90 + v20);
      v91 = (__n128)a9;
      v93 = v16;
      v95 = (__n128)a11;
      if ((_DWORD)v25)
      {
        v28 = (unsigned __int8 *)operator new(v25);
        bzero(v28, v25);
      }
      else
      {
        v28 = 0;
      }
      if (lzma_auto_decoder())
      {
        v46 = 0;
        v19 = v21;
        v14 = a1;
        v29 = v28;
        v11 = v26;
        v12 = v87;
        goto LABEL_74;
      }
      v47 = v27;
      v48 = v28;
      v49 = lzma_code();
      lzma_end();
      v23 = v47;
      v29 = v48;
      v22 = v48;
      v50 = v49 > 1;
      v11 = a3;
      v14 = a1;
      v12 = v87;
      a9 = (int8x16_t)v91;
      v16 = v93;
      a11 = (int8x16_t)v95;
      v18 = (int8x16_t)xmmword_19FFB3790;
      v17 = (int8x16_t)xmmword_19FFB3780;
      if (v50)
      {
        v46 = 0;
        v19 = v21;
        goto LABEL_74;
      }
    }
    else
    {
      v29 = 0;
    }
    __p = v29;
    if (v24 != 4)
    {
LABEL_66:
      v91 = (__n128)a9;
      v93 = v16;
      v95 = (__n128)a11;
      if (v21 + v23 >= a2)
        v19 = a2;
      else
        v19 = v21 + v23;
      v46 = 1;
      goto LABEL_73;
    }
    if ((_DWORD)v25)
    {
      v30 = *v22;
      v31 = v11;
      v32 = (_DWORD *)v11[16];
      v33 = (_DWORD *)v31[15];
      v34 = 0xAAAAAAAAAAAAAAABLL * (v32 - v33);
      v35 = v30 >= v34;
      v36 = v30 - v34;
      if (v30 <= v34)
      {
        v14 = a1;
        if (!v35)
          a3[16] = &v33[3 * *v22];
      }
      else
      {
        v37 = v31[17];
        v92 = (__n128)a9;
        v94 = v16;
        v96 = (__n128)a11;
        v85 = *v22;
        if (0xAAAAAAAAAAAAAAABLL * ((v37 - (uint64_t)v32) >> 2) >= v36)
        {
          v52 = 12 * ((12 * v36 - 12) / 0xC) + 12;
          v53 = v23;
          bzero(v32, v52);
          v30 = v85;
          v23 = v53;
          v18 = (int8x16_t)xmmword_19FFB3790;
          v17 = (int8x16_t)xmmword_19FFB3780;
          a9 = (int8x16_t)v92;
          v16 = v94;
          a11 = (int8x16_t)v96;
          v31[16] = (char *)v32 + v52;
          v14 = a1;
        }
        else
        {
          v82 = v30 - v34;
          v84 = v23;
          v38 = 0xAAAAAAAAAAAAAAABLL * ((v37 - (uint64_t)v33) >> 2);
          v39 = 2 * v38;
          if (2 * v38 <= v30)
            v39 = *v22;
          if (v38 >= 0xAAAAAAAAAAAAAAALL)
            v39 = 0x1555555555555555;
          if (v39 > 0x1555555555555555)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v81 = v39;
          v80 = (char *)operator new(12 * v39);
          v40 = &v80[4 * (v32 - v33)];
          v83 = 12 * ((12 * v82 - 12) / 0xC) + 12;
          bzero(v40, v83);
          v41 = v40;
          if (v32 == v33)
          {
            v30 = v85;
            v45 = a3;
            v14 = a1;
            a9 = (int8x16_t)v92;
            v16 = v94;
            a11 = (int8x16_t)v96;
            v18 = (int8x16_t)xmmword_19FFB3790;
            v17 = (int8x16_t)xmmword_19FFB3780;
            v23 = v84;
            v42 = v81;
          }
          else
          {
            v14 = a1;
            a9 = (int8x16_t)v92;
            v16 = v94;
            a11 = (int8x16_t)v96;
            v18 = (int8x16_t)xmmword_19FFB3790;
            v17 = (int8x16_t)xmmword_19FFB3780;
            v23 = v84;
            v30 = v85;
            v42 = v81;
            do
            {
              v43 = *(_QWORD *)(v32 - 3);
              v32 -= 3;
              v44 = v32[2];
              *(_QWORD *)(v41 - 12) = v43;
              v41 -= 12;
              *((_DWORD *)v41 + 2) = v44;
            }
            while (v32 != v33);
            v45 = a3;
            v32 = (_DWORD *)a3[15];
          }
          v45[15] = v41;
          v45[16] = &v40[v83];
          v45[17] = &v80[12 * v42];
          if (v32)
          {
            operator delete(v32);
            v23 = v84;
            v30 = v85;
            v18 = (int8x16_t)xmmword_19FFB3790;
            v17 = (int8x16_t)xmmword_19FFB3780;
            a9 = (int8x16_t)v92;
            v16 = v94;
            a11 = (int8x16_t)v96;
          }
        }
      }
      v11 = a3;
      if (!(_DWORD)v30)
        goto LABEL_66;
      v54 = a3[15];
      v55 = v25 >> 1;
      if (v25 <= 2)
        v56 = 2;
      else
        v56 = v25;
      v57 = (unint64_t)(v56 - 1) >> 1;
      if (v57 >= v55)
        v58 = v25 >> 1;
      else
        v58 = v57;
      v59 = v30 - 1;
      if (v58 >= v30 - 1)
        v60 = v30 - 1;
      else
        v60 = v58;
      if (v60 < 0x10)
        goto LABEL_57;
      if (v25 <= 2)
        v61 = 2;
      else
        v61 = v25;
      v62 = (unint64_t)(v61 - 1) >> 1;
      if (v62 >= v55)
        v62 = v25 >> 1;
      if (v62 < v59)
        v59 = v62;
      v63 = (const char *)(v22 + 1);
      if (v54 >= (unint64_t)&v22[2 * v59 + 3] || (unint64_t)v63 >= v54 + 12 * v59 + 12)
      {
        v66 = v60 + 1;
        v67 = 8;
        if (((v60 + 1) & 7) != 0)
          v67 = (v60 + 1) & 7;
        v64 = v66 - v67;
        v65 = (2 * (v66 - v67)) | 1;
        v68 = ~v60 + v67;
        v69 = (float *)a3[15];
        do
        {
          a4 = (int8x16_t)vld2_s8(v63);
          v63 += 16;
          a9 = vqtbl1q_s8(a4, v18);
          a11 = vqtbl1q_s8(a5, v18);
          v70 = v69 + 24;
          vst3q_f32(v69, *(float32x4x3_t *)a9.i8);
          v71 = v69 + 12;
          v97.val[0] = (float32x4_t)vqtbl1q_s8(a4, v17);
          v97.val[2] = (float32x4_t)vqtbl1q_s8(a5, v17);
          v97.val[1] = v16;
          vst3q_f32(v71, v97);
          v69 = v70;
          v68 += 8;
        }
        while (v68);
      }
      else
      {
LABEL_57:
        v64 = 0;
        v65 = 1;
      }
      v72 = (_DWORD *)(v54 + 12 * v64 + 8);
      v73 = v30 - v64;
      v74 = v55 - v64;
      while (1)
      {
        if (!v74)
        {
          v91 = (__n128)a9;
          v93 = v16;
          v95 = (__n128)a11;
          v51 = "level";
          goto LABEL_72;
        }
        v75 = v65 + 2;
        if (v65 + 2 > v25)
          break;
        v76 = &v22[v65];
        v77 = *v76;
        LODWORD(v76) = v76[1];
        *((_QWORD *)v72 - 1) = v77;
        *v72 = (_DWORD)v76;
        v72 += 3;
        --v74;
        v65 = v75;
        if (!--v73)
          goto LABEL_66;
      }
      v91 = (__n128)a9;
      v93 = v16;
      v95 = (__n128)a11;
      v51 = "maxLevel";
    }
    else
    {
      v91 = (__n128)a9;
      v93 = v16;
      v95 = (__n128)a11;
      v51 = "numLevels";
    }
LABEL_72:
    printf("Failed to read C3mm file - %s", v51);
    v46 = 0;
    v19 = v21;
LABEL_73:
    v29 = __p;
LABEL_74:
    if (v29)
      operator delete(v29);
    if ((v46 & 1) == 0)
      return 0;
    ++v15;
    a9 = (int8x16_t)v91;
    v16 = v93;
    a11 = (int8x16_t)v95;
    v18 = (int8x16_t)xmmword_19FFB3790;
    v17 = (int8x16_t)xmmword_19FFB3780;
    if (v15 == v12)
      return v11[16] != v11[15];
  }
  v79 = "uncomressedLength";
LABEL_83:
  printf("Failed to read C3mm file - %s", v79);
  return 0;
}

void sub_19FF9BC70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t `anonymous namespace'::readRootIndex(unsigned __int8 *a1, unint64_t a2, uint64_t a3, char ***a4)
{
  _BOOL8 v5;
  const char *v6;
  int v9;
  int v10;
  int v11;
  int v12;
  unint64_t v13;
  char **v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  unsigned int v21;
  char *v22;
  char *v23;
  unint64_t v24;

  if (a2)
  {
    if (a2 >= 5)
    {
      if (a2 >= 9)
      {
        if (a2 == 9)
        {
          v5 = 0;
          v6 = "maxLevel";
        }
        else
        {
          if (a2 >= 0xC)
          {
            v9 = *a1;
            v10 = *(_DWORD *)(a1 + 1);
            v11 = *(_DWORD *)(a1 + 5);
            v12 = a1[9];
            v13 = *((unsigned __int16 *)a1 + 5);
            *(_DWORD *)(a3 + 4) = v9;
            *(_DWORD *)(a3 + 8) = v12;
            v14 = *a4;
            v15 = **a4;
            v16 = 0xAAAAAAAAAAAAAAABLL * (((*a4)[1] - v15) >> 3);
            if (v13 <= v16)
            {
              if (v13 < v16)
                v14[1] = &v15[24 * v13];
            }
            else
            {
              std::vector<geo::c3mm::C3mmRoot>::__append(v14, v13 - v16);
            }
            if ((_DWORD)v13)
            {
              if (a2 < 0x10)
              {
                v5 = 0;
LABEL_22:
                v6 = "rootKey";
                goto LABEL_23;
              }
              v17 = 0;
              v18 = 0;
              v19 = **a4;
              v20 = 12;
              while (1)
              {
                v21 = *(_DWORD *)&a1[v20];
                v22 = &v19[v17];
                *(_QWORD *)v22 = 0;
                *((_QWORD *)v22 + 1) = 0;
                *((_QWORD *)v22 + 2) = 0x200000000;
                v19 = **a4;
                v23 = &v19[v17];
                *(_DWORD *)v23 = v9;
                *((_DWORD *)v23 + 1) = v10 + (v21 >> 20);
                *((_DWORD *)v23 + 2) = ((v21 >> 8) & 0xFFF) + v11;
                *((_DWORD *)v23 + 3) = v21;
                if (24 * v13 - 24 == v17)
                  break;
                v24 = v20 + 8;
                v20 += 4;
                v17 += 24;
                ++v18;
                if (v24 > a2)
                {
                  v5 = v18 >= v13;
                  goto LABEL_22;
                }
              }
            }
            return 1;
          }
          v5 = 0;
          v6 = "numRoots";
        }
      }
      else
      {
        v5 = 0;
        v6 = "originY";
      }
    }
    else
    {
      v5 = 0;
      v6 = "originX";
    }
  }
  else
  {
    v5 = 0;
    v6 = "originLevel";
  }
LABEL_23:
  printf("Failed to read C3mm file - %s", v6);
  return v5;
}

uint64_t `anonymous namespace'::readChildInfo(unsigned int *a1, unint64_t a2, uint64_t a3, int ***a4)
{
  const char *v4;
  unint64_t v10;
  int **v11;
  char *v12;
  int *v13;
  unint64_t v14;
  unint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  unint64_t v20;
  char *v21;
  char *v22;
  size_t v23;
  char *v24;
  char *v25;
  char *v26;
  int **v27;
  uint64_t v28;
  uint64_t v29;
  _WORD *v30;
  int *v31;
  int *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  char *v36;

  if (a2 < 4)
  {
    v4 = "numTiles";
LABEL_3:
    printf("Failed to read C3mm file - %s", v4);
    return 0;
  }
  v10 = *a1;
  v11 = *a4;
  v12 = (char *)(*a4)[4];
  v13 = (*a4)[5];
  v14 = ((char *)v13 - v12) >> 4;
  v15 = v10 - v14;
  if (v10 <= v14)
  {
    if (v10 >= v14)
      goto LABEL_21;
    v26 = &v12[16 * v10];
    goto LABEL_18;
  }
  v16 = v11[6];
  if (v15 <= ((char *)v16 - (char *)v13) >> 4)
  {
    bzero((*a4)[5], 16 * v15);
    v26 = (char *)&v13[4 * v15];
LABEL_18:
    v11[5] = (int *)v26;
    goto LABEL_21;
  }
  v17 = (char *)v16 - v12;
  v18 = v17 >> 3;
  if (v17 >> 3 <= v10)
    v18 = *a1;
  v19 = (unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0;
  v20 = 0xFFFFFFFFFFFFFFFLL;
  if (!v19)
    v20 = v18;
  if (v20 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v35 = 16 * v20;
  v21 = (char *)operator new(16 * v20);
  v22 = &v21[16 * v14];
  v36 = &v21[v35];
  v23 = 16 * v15;
  bzero(v22, v23);
  v24 = &v22[v23];
  if (v13 == (int *)v12)
  {
    v11[4] = (int *)v22;
    v11[5] = (int *)v24;
    v11[6] = (int *)v36;
    if (!v12)
      goto LABEL_21;
    goto LABEL_20;
  }
  do
  {
    v25 = v22 - 16;
    *((_OWORD *)v22 - 1) = *((_OWORD *)v13 - 1);
    v13 -= 4;
    v22 -= 16;
  }
  while (v13 != (int *)v12);
  v11[4] = (int *)v25;
  v11[5] = (int *)v24;
  v11[6] = (int *)v36;
  if (v12)
LABEL_20:
    operator delete(v12);
LABEL_21:
  v27 = *a4;
  v28 = (uint64_t)(*a4)[4];
  if ((_DWORD)v10)
  {
    v29 = 0;
    v30 = (_WORD *)v28;
    v4 = "childMask";
    while (v29 + 6 <= a2)
    {
      *v30 = *(_WORD *)((char *)a1 + v29 + 4);
      v30 += 8;
      v29 += 2;
      if (2 * v10 == v29)
        goto LABEL_25;
    }
    goto LABEL_3;
  }
LABEL_25:
  v31 = *v27;
  v32 = v27[1];
  if (*v27 != v32)
  {
    v33 = 0;
    do
    {
      v31[4] = v33;
      v34 = *v31;
      v31 += 6;
    }
    while (v31 != v32);
  }
  return 1;
}

uint64_t `anonymous namespace'::readBounds(uint64_t a1, unint64_t a2, uint64_t a3, double a4, double a5, double a6, float a7)
{
  const char *v7;
  uint64_t v8;
  float v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;

  if (a2 >= 4)
  {
    if (a2 >= 8)
    {
      if (a2 >= 0xC)
      {
        v10 = *(float *)a1;
        v11 = *(float *)(a1 + 4);
        v12 = *(unsigned int *)(a1 + 8);
        *(_DWORD *)(a3 + 24) = *(_DWORD *)a1;
        *(float *)(a3 + 28) = v11;
        if (!(_DWORD)v12)
          return 1;
        v13 = 0;
        v14 = 3 * v12;
        v15 = (_DWORD *)(*(_QWORD *)(a3 + 32) + 8);
        v7 = "extentAlt";
        while (v13 + 12 < a2)
        {
          if (v13 + 15 > a2)
          {
            v7 = "minAlt";
            break;
          }
          LOWORD(a6) = *(_WORD *)(a1 + v13 + 13);
          *(_QWORD *)&a6 = vmovl_s16(*(int16x4_t *)&a6).u64[0];
          *(float *)&a6 = v10 * (float)SLODWORD(a6);
          LOBYTE(a7) = *(_BYTE *)(a1 + v13 + 12);
          *(v15 - 1) = LODWORD(a6);
          a7 = (float)LODWORD(a7);
          *(float *)&a6 = *(float *)&a6 + (float)(v11 * a7);
          *v15 = LODWORD(a6);
          v15 += 4;
          v13 += 3;
          v8 = 1;
          if (v14 == v13)
            return v8;
        }
      }
      else
      {
        v7 = "numTiles";
      }
    }
    else
    {
      v7 = "extentAltScale";
    }
  }
  else
  {
    v7 = "minAltScale";
  }
  printf("Failed to read C3mm file - %s", v7);
  return 0;
}

uint64_t `anonymous namespace'::loadObjectTree(uint64_t a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count_vtbl *v19;
  int v20;
  int v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  std::__shared_weak_count *v24;
  unint64_t v25;
  char **v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char **v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  _QWORD *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  char *v72;
  size_t v73;
  char *v74;
  char *v75;
  _QWORD *v76;
  unint64_t v77;
  char **v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char **v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  char *v104;
  char *v105;
  void *v106;
  void *v107;
  unint64_t v108;
  char *v109;
  void *v110;
  char *v111;
  char *v112;
  unint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  unint64_t v122;
  _BYTE *v123;
  unint64_t v124;
  char *v125;
  BOOL v126;
  int64_t v127;
  unint64_t v128;
  char *v129;
  char *v130;
  void *v131;
  unint64_t v132;
  char *v133;
  char *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  char *v139;
  size_t v140;
  char *v141;
  unint64_t v142;
  char *v143;
  unint64_t v144;
  int64_t v145;
  unint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  __int128 *v152;
  char *v153;
  uint64_t v154;
  __int128 v155;
  uint64_t v156;
  unint64_t v157;
  char *v158;
  unint64_t v159;
  char *v160;
  char *v161;
  char *v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  __int128 *v166;
  char *v167;
  uint64_t v168;
  __int128 v169;
  uint64_t v170;
  char *v171;
  char *v172;
  uint64_t v173;
  void *v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  __int128 *v184;
  _OWORD *v185;
  uint64_t v186;
  __int128 v187;
  uint64_t v188;
  unint64_t v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  unint64_t *v193;
  unint64_t v194;
  unint64_t v195;
  _BYTE *v196;
  unint64_t v197;
  char *v198;
  int64_t v199;
  unint64_t v200;
  char *v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  __int128 *v207;
  _OWORD *v208;
  uint64_t v209;
  __int128 v210;
  uint64_t v211;
  const char *v212;
  char *__src;
  uint64_t v215;
  int v216;
  uint64_t v217;
  unint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t v224;
  uint64_t v225;
  char *v226;
  std::__shared_weak_count *v227;
  __int16 v228;
  std::__shared_weak_count *v229;
  std::__shared_weak_count *v230;
  int v231;
  std::__shared_weak_count *v232;
  std::__shared_weak_count *v233;
  void *__p[2];
  __int128 v235;
  __int128 v236;

  v235 = 0u;
  v236 = 0u;
  *(_OWORD *)__p = 0u;
  v6 = (_QWORD *)operator new();
  *v6 = 0;
  v6[1] = 0;
  v6[2] = 0;
  v7 = (_QWORD *)operator new();
  *v7 = &off_1E42E75D0;
  v7[1] = 0;
  v7[2] = 0;
  v7[3] = v6;
  v8 = *(std::__shared_weak_count **)(a3 + 248);
  *(_QWORD *)(a3 + 240) = v6;
  *(_QWORD *)(a3 + 248) = v7;
  if (!v8)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (a2 < 3)
      return std::deque<std::pair<std::shared_ptr<geo::c3mm::C3mmObjectTree::Group>,int>>::~deque[abi:ne180100]((uint64_t)__p);
  }
  else
  {
LABEL_5:
    if (a2 < 3)
      return std::deque<std::pair<std::shared_ptr<geo::c3mm::C3mmObjectTree::Group>,int>>::~deque[abi:ne180100]((uint64_t)__p);
  }
  v11 = 0;
  v12 = a1 - 2;
  v221 = a1 - 4;
  v222 = a3;
  v217 = a1 + 36;
  v224 = a2;
  v225 = a1;
  v223 = a1 - 2;
  while (1)
  {
    if (v11 + 1 > a2)
    {
      v212 = "entryType";
      goto LABEL_247;
    }
    v13 = v11 + 3;
    if (a2 < v11 + 3)
    {
      v212 = "entryLength";
      goto LABEL_247;
    }
    if (a2 - (v11 + 3) < (unint64_t)*(unsigned __int16 *)(v12 + v13) - 3)
    {
      puts("ObjectTree entry is outside specified data section");
      return std::deque<std::pair<std::shared_ptr<geo::c3mm::C3mmObjectTree::Group>,int>>::~deque[abi:ne180100]((uint64_t)__p);
    }
    if (*(_BYTE *)(a1 + v11) == 1)
      break;
    if (!*(_BYTE *)(a1 + v11))
    {
      v14 = v11 + 11;
      if (v11 + 11 > a2)
        goto LABEL_240;
      v15 = v11 + 19;
      if (v11 + 19 > a2)
      {
LABEL_241:
        v212 = "longitude";
      }
      else
      {
        v16 = v11 + 27;
        if (v11 + 27 > a2)
          goto LABEL_242;
        if (v11 + 31 > a2)
        {
LABEL_243:
          v212 = "radius";
        }
        else
        {
          v11 += 33;
          if (v11 <= a2)
          {
            v17 = *(_QWORD *)(a1 + v13);
            v18 = *(_QWORD *)(a1 + v14);
            v19 = *(std::__shared_weak_count_vtbl **)(a1 + v15);
            v20 = *(_DWORD *)(a1 + v16);
            v21 = *(unsigned __int16 *)(v12 + v11);
            v22 = (std::__shared_weak_count *)operator new(0x58uLL);
            v22->__shared_owners_ = 0;
            v23 = (unint64_t *)&v22->__shared_owners_;
            v22->__shared_weak_owners_ = 0;
            v22->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE340;
            LODWORD(v22[1].__vftable) = 0;
            v24 = v22 + 1;
            v22[3].__vftable = 0;
            v22[3].__shared_owners_ = 0;
            v22[2].__shared_weak_owners_ = 0;
            v232 = v22 + 1;
            v233 = v22;
            v22[1].__shared_owners_ = v17;
            v22[1].__shared_weak_owners_ = v18;
            v22[2].__vftable = v19;
            LODWORD(v22[2].__shared_owners_) = v20;
            if (*((_QWORD *)&v236 + 1))
            {
              v25 = *((_QWORD *)__p[1] + (*((_QWORD *)&v236 + 1) + (_QWORD)v236 - 1) / 0xAAuLL)
                  + 24 * ((*((_QWORD *)&v236 + 1) + (_QWORD)v236 - 1) % 0xAAuLL);
              --*(_DWORD *)(v25 + 16);
              v26 = (char **)(*(_QWORD *)v25 + 40);
              v229 = v22 + 1;
              v230 = v22;
              do
                v27 = __ldxr(v23);
              while (__stxr(v27 + 1, v23));
              std::vector<std::shared_ptr<geo::c3mm::C3mmObjectTree::Node>>::push_back[abi:ne180100](v26, (uint64_t)&v229);
              a1 = v225;
              v28 = v230;
              if (!v230)
                goto LABEL_26;
              v29 = (unint64_t *)&v230->__shared_owners_;
              do
                v30 = __ldaxr(v29);
              while (__stlxr(v30 - 1, v29));
              if (!v30)
              {
                ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
                std::__shared_weak_count::__release_weak(v28);
                v31 = *((_QWORD *)&v236 + 1);
                if (*((_QWORD *)&v236 + 1))
                  goto LABEL_27;
              }
              else
              {
LABEL_26:
                v31 = *((_QWORD *)&v236 + 1);
                if (*((_QWORD *)&v236 + 1))
                {
LABEL_27:
                  v32 = v236;
                  v33 = __p[1];
                  do
                  {
                    v34 = v31 + v32 - 1;
                    v35 = v33[v34 / 0xAA];
                    v36 = v34 % 0xAA;
                    if (*(_DWORD *)(v35 + 24 * v36 + 16))
                      break;
                    v37 = *(std::__shared_weak_count **)(v35 + 24 * v36 + 8);
                    if (v37)
                    {
                      v38 = (unint64_t *)&v37->__shared_owners_;
                      do
                        v39 = __ldaxr(v38);
                      while (__stlxr(v39 - 1, v38));
                      if (!v39)
                      {
                        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
                        std::__shared_weak_count::__release_weak(v37);
                      }
                    }
                    v33 = __p[1];
                    v40 = v235;
                    v41 = 170 * ((uint64_t)(v235 - (unint64_t)__p[1]) >> 3) - 1;
                    if ((void *)v235 == __p[1])
                      v41 = 0;
                    v42 = *((_QWORD *)&v236 + 1);
                    v32 = v236;
                    v31 = --*((_QWORD *)&v236 + 1);
                    if ((unint64_t)(v41 - (v42 + v236) + 1) >= 0x154)
                    {
                      operator delete(*(void **)(v235 - 8));
                      *(_QWORD *)&v235 = v40 - 8;
                    }
                  }
                  while (v31);
                  v22 = v233;
                  if (!v233)
                    goto LABEL_218;
                }
              }
LABEL_214:
              v193 = (unint64_t *)&v22->__shared_owners_;
              do
                v194 = __ldaxr(v193);
              while (__stlxr(v194 - 1, v193));
              if (!v194)
              {
                ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
                std::__shared_weak_count::__release_weak(v22);
              }
LABEL_218:
              v12 = v223;
              a2 = v224;
              goto LABEL_8;
            }
            v54 = *(char ***)(a3 + 240);
            v229 = v22 + 1;
            v230 = v22;
            do
              v55 = __ldxr(v23);
            while (__stxr(v55 + 1, v23));
            std::vector<std::shared_ptr<geo::c3mm::C3mmObjectTree::Node>>::push_back[abi:ne180100](v54, (uint64_t)&v229);
            v56 = v230;
            if (v230)
            {
              v57 = (unint64_t *)&v230->__shared_owners_;
              do
                v58 = __ldaxr(v57);
              while (__stlxr(v58 - 1, v57));
              if (!v58)
              {
                ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                std::__shared_weak_count::__release_weak(v56);
              }
            }
            do
              v59 = __ldxr(v23);
            while (__stxr(v59 + 1, v23));
            v60 = __p[1];
            v61 = (char *)v235;
            v62 = v235 - (unint64_t)__p[1];
            v63 = (uint64_t)(v235 - (unint64_t)__p[1]) >> 3;
            v228 = v21;
            v229 = v22 + 1;
            v230 = v22;
            v226 = 0;
            v227 = 0;
            v231 = v21;
            if ((void *)v235 == __p[1])
              v64 = 0;
            else
              v64 = 170 * v63 - 1;
            v65 = *((_QWORD *)&v236 + 1);
            v218 = *((_QWORD *)&v236 + 1) + v236;
            if (v64 != *((_QWORD *)&v236 + 1) + (_QWORD)v236)
            {
              v103 = v22;
              a3 = v222;
LABEL_209:
              v189 = v60[v218 / 0xAA] + 24 * (v218 % 0xAA);
              *(_QWORD *)v189 = v24;
              *(_QWORD *)(v189 + 8) = v103;
              v229 = 0;
              v230 = 0;
              *(_DWORD *)(v189 + 16) = v21;
              *((_QWORD *)&v236 + 1) = v65 + 1;
              v190 = v227;
              a1 = v225;
              if (v227)
              {
                v191 = (unint64_t *)&v227->__shared_owners_;
                do
                  v192 = __ldaxr(v191);
                while (__stlxr(v192 - 1, v191));
                if (!v192)
                {
                  ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
                  std::__shared_weak_count::__release_weak(v190);
                }
              }
              goto LABEL_214;
            }
            __src = (char *)__p[1];
            v215 = *((_QWORD *)&v236 + 1);
            v66 = v236 - 170;
            v216 = v21;
            if ((unint64_t)v236 >= 0xAA)
            {
              *(_QWORD *)&v236 = v236 - 170;
              v68 = (char *)__p[1] + 8;
              v67 = *(_QWORD *)__p[1];
              __p[1] = (char *)__p[1] + 8;
              if ((_QWORD)v235 != *((_QWORD *)&v235 + 1))
              {
                a3 = v222;
                v65 = *((_QWORD *)&v236 + 1);
LABEL_207:
                *(_QWORD *)v61 = v67;
                *(_QWORD *)&v235 = v235 + 8;
                v218 = v65 + v66;
                goto LABEL_208;
              }
              v114 = __p[0];
              if (v68 > __p[0])
              {
                v115 = (v68 - (char *)__p[0]) >> 3;
                if (v115 >= -1)
                  v116 = v115 + 1;
                else
                  v116 = v115 + 2;
                v117 = v116 >> 1;
                v118 = &v68[-8 * (v116 >> 1)];
                v119 = v235 - (_QWORD)v68;
                a3 = v222;
                if ((char *)v235 != v68)
                {
                  v120 = v67;
                  memmove(&v68[-8 * (v116 >> 1)], __src + 8, v235 - (_QWORD)v68);
                  v67 = v120;
                  v61 = v68;
                }
                v121 = &v61[-8 * v117];
                v61 = &v118[v119];
                __p[1] = v121;
                *(_QWORD *)&v235 = &v118[v119];
                v21 = v216;
                v65 = v215;
                goto LABEL_207;
              }
              v220 = v67;
              if ((void *)v235 == __p[0])
                v122 = 1;
              else
                v122 = (uint64_t)(v235 - (unint64_t)__p[0]) >> 2;
              if (v122 >> 61)
                goto LABEL_251;
              v123 = operator new(8 * v122);
              v124 = v122 >> 2;
              v125 = &v123[8 * (v122 >> 2)];
              v127 = v61 - v68;
              v126 = v61 == v68;
              v61 = v125;
              a3 = v222;
              v65 = v215;
              if (!v126)
              {
                v61 = &v125[v127 & 0xFFFFFFFFFFFFFFF8];
                v128 = v127 - 8;
                if (v128 >= 0x38)
                {
                  v180 = 8 * v124;
                  v181 = &v123[8 * v124] - v68;
                  v129 = &v123[8 * (v122 >> 2)];
                  if (v181 >= 0x20)
                  {
                    v182 = (v128 >> 3) + 1;
                    v183 = 8 * (v182 & 0x3FFFFFFFFFFFFFFCLL);
                    v129 = &v125[v183];
                    v68 += v183;
                    v184 = (__int128 *)(__src + 24);
                    v185 = &v123[v180 + 16];
                    v186 = v182 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v187 = *v184;
                      *(v185 - 1) = *(v184 - 1);
                      *v185 = v187;
                      v184 += 2;
                      v185 += 2;
                      v186 -= 4;
                    }
                    while (v186);
                    if (v182 == (v182 & 0x3FFFFFFFFFFFFFFCLL))
                      goto LABEL_204;
                  }
                }
                else
                {
                  v129 = &v123[8 * (v122 >> 2)];
                }
                do
                {
                  v188 = *(_QWORD *)v68;
                  v68 += 8;
                  *(_QWORD *)v129 = v188;
                  v129 += 8;
                }
                while (v129 != v61);
              }
LABEL_204:
              __p[0] = v123;
              __p[1] = &v123[8 * (v122 >> 2)];
              *(_QWORD *)&v235 = v61;
              *((_QWORD *)&v235 + 1) = &v123[8 * v122];
              if (v114)
                operator delete(v114);
              v67 = v220;
              goto LABEL_207;
            }
            v104 = (char *)*((_QWORD *)&v235 + 1);
            v105 = (char *)__p[0];
            if (v63 >= (unint64_t)((uint64_t)(*((_QWORD *)&v235 + 1) - (unint64_t)__p[0]) >> 3))
            {
              if (*((void **)&v235 + 1) == __p[0])
                v108 = 1;
              else
                v108 = (uint64_t)(*((_QWORD *)&v235 + 1) - (unint64_t)__p[0]) >> 2;
              if (v108 >> 61)
LABEL_251:
                std::__throw_bad_array_new_length[abi:ne180100]();
              v109 = (char *)operator new(8 * v108);
              v110 = operator new(0xFF0uLL);
              v111 = &v109[8 * v63];
              v112 = &v109[8 * v108];
              v21 = v216;
              if (v63 == v108)
              {
                if (v62 < 1)
                {
                  v131 = v110;
                  if (v61 == __src)
                    v132 = 1;
                  else
                    v132 = v62 >> 2;
                  if (v132 >> 61)
                    std::__throw_bad_array_new_length[abi:ne180100]();
                  a3 = v222;
                  v111 = (char *)operator new(8 * v132);
                  operator delete(v109);
                  v112 = &v111[8 * v132];
                  v109 = v111;
                  v110 = v131;
                }
                else
                {
                  v113 = v63 + 2;
                  if (v63 >= -1)
                    v113 = v63 + 1;
                  v111 -= 8 * (v113 >> 1);
                  a3 = v222;
                }
              }
              else
              {
                a3 = v222;
              }
              *(_QWORD *)v111 = v110;
              v133 = v111 + 8;
              if (v61 == __src)
              {
                v134 = v105;
              }
              else
              {
                do
                {
                  if (v111 == v109)
                  {
                    if (v133 >= v112)
                    {
                      if (v112 == v111)
                        v142 = 1;
                      else
                        v142 = (v112 - v111) >> 2;
                      if (v142 >> 61)
                        std::__throw_bad_array_new_length[abi:ne180100]();
                      v143 = (char *)operator new(8 * v142);
                      v109 = v143;
                      v144 = (v142 + 3) >> 2;
                      v135 = &v143[8 * v144];
                      v145 = v133 - v111;
                      v126 = v133 == v111;
                      v133 = v135;
                      if (!v126)
                      {
                        v133 = &v135[v145 & 0xFFFFFFFFFFFFFFF8];
                        v146 = v145 - 8;
                        v147 = &v143[8 * v144];
                        v148 = v111;
                        if (v146 < 0x38)
                          goto LABEL_255;
                        v149 = 8 * v144;
                        v147 = &v143[8 * v144];
                        v148 = v111;
                        if ((unint64_t)(v147 - v111) < 0x20)
                          goto LABEL_255;
                        v150 = (v146 >> 3) + 1;
                        v151 = 8 * (v150 & 0x3FFFFFFFFFFFFFFCLL);
                        v147 = &v135[v151];
                        v148 = &v111[v151];
                        v152 = (__int128 *)(v111 + 16);
                        v153 = &v143[v149 + 16];
                        v154 = v150 & 0x3FFFFFFFFFFFFFFCLL;
                        do
                        {
                          v155 = *v152;
                          *((_OWORD *)v153 - 1) = *(v152 - 1);
                          *(_OWORD *)v153 = v155;
                          v152 += 2;
                          v153 += 32;
                          v154 -= 4;
                        }
                        while (v154);
                        if (v150 != (v150 & 0x3FFFFFFFFFFFFFFCLL))
                        {
LABEL_255:
                          do
                          {
                            v156 = *(_QWORD *)v148;
                            v148 += 8;
                            *(_QWORD *)v147 = v156;
                            v147 += 8;
                          }
                          while (v147 != v133);
                        }
                      }
                      operator delete(v111);
                      v112 = &v109[8 * v142];
                      a3 = v222;
                    }
                    else
                    {
                      v137 = (v112 - v133) >> 3;
                      if (v137 >= -1)
                        v138 = v137 + 1;
                      else
                        v138 = v137 + 2;
                      v139 = &v133[8 * (v138 >> 1)];
                      v135 = &v111[8 * (v138 >> 1)];
                      v140 = v133 - v111;
                      if (v133 == v111)
                      {
                        v109 = v133;
                      }
                      else
                      {
                        v141 = v112;
                        memmove(&v111[8 * (v138 >> 1)], v111, v140);
                        v112 = v141;
                        v109 = v111;
                      }
                      v133 = v139;
                      v21 = v216;
                    }
                  }
                  else
                  {
                    v135 = v111;
                  }
                  v136 = *((_QWORD *)v61 - 1);
                  v61 -= 8;
                  *((_QWORD *)v135 - 1) = v136;
                  v111 = v135 - 8;
                }
                while (v61 != __p[1]);
                v134 = (char *)__p[0];
              }
              __p[0] = v109;
              __p[1] = v111;
              *(_QWORD *)&v235 = v133;
              *((_QWORD *)&v235 + 1) = v112;
              v65 = v215;
              if (v134)
                operator delete(v134);
              goto LABEL_208;
            }
            v106 = operator new(0xFF0uLL);
            v107 = v106;
            if (v104 != v61)
            {
              *(_QWORD *)v61 = v106;
              *(_QWORD *)&v235 = v235 + 8;
              a3 = v222;
              v21 = v216;
              v65 = v215;
LABEL_208:
              v60 = __p[1];
              v24 = v229;
              v103 = v230;
              goto LABEL_209;
            }
            v130 = __src;
            if (__src == v105)
            {
              if (v61 == __src)
                v157 = 1;
              else
                v157 = (v104 - __src) >> 2;
              if (v157 >> 61)
                goto LABEL_251;
              v158 = (char *)operator new(8 * v157);
              v159 = (v157 + 3) >> 2;
              v130 = &v158[8 * v159];
              v160 = v130;
              v161 = __src;
              v21 = v216;
              if (v61 != __src)
              {
                v160 = &v130[8 * v63];
                v162 = &v158[8 * v159];
                if ((unint64_t)(v62 - 8) < 0x38)
                  goto LABEL_256;
                v163 = 8 * v159;
                v161 = __src;
                v162 = &v158[8 * v159];
                if ((unint64_t)(v162 - __src) < 0x20)
                  goto LABEL_256;
                v164 = ((unint64_t)(v62 - 8) >> 3) + 1;
                v165 = 8 * (v164 & 0x3FFFFFFFFFFFFFFCLL);
                v162 = &v130[v165];
                v161 = &__src[v165];
                v166 = (__int128 *)(__src + 16);
                v167 = &v158[v163 + 16];
                v168 = v164 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v169 = *v166;
                  *((_OWORD *)v167 - 1) = *(v166 - 1);
                  *(_OWORD *)v167 = v169;
                  v166 += 2;
                  v167 += 32;
                  v168 -= 4;
                }
                while (v168);
                if (v164 != (v164 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_256:
                  do
                  {
                    v170 = *(_QWORD *)v161;
                    v161 += 8;
                    *(_QWORD *)v162 = v170;
                    v162 += 8;
                  }
                  while (v162 != v160);
                }
                v161 = __src;
              }
              __p[0] = v158;
              __p[1] = v130;
              *(_QWORD *)&v235 = v160;
              *((_QWORD *)&v235 + 1) = &v158[8 * v157];
              if (v161)
                operator delete(v161);
              a3 = v222;
            }
            else
            {
              a3 = v222;
              v21 = v216;
            }
            *((_QWORD *)v130 - 1) = v107;
            v171 = (char *)__p[1];
            v172 = (char *)v235;
            __p[1] = (char *)__p[1] - 8;
            v173 = *(_QWORD *)__p[1];
            __p[1] = v171;
            if ((_QWORD)v235 != *((_QWORD *)&v235 + 1))
            {
LABEL_233:
              *(_QWORD *)v172 = v173;
              *(_QWORD *)&v235 = v235 + 8;
              v65 = v215;
              goto LABEL_208;
            }
            v174 = __p[0];
            if (v171 > __p[0])
            {
              v175 = (v171 - (char *)__p[0]) >> 3;
              if (v175 >= -1)
                v176 = v175 + 1;
              else
                v176 = v175 + 2;
              v177 = v176 >> 1;
              v178 = &v171[-8 * v177];
              v179 = v235 - (_QWORD)v171;
              if ((_QWORD)v235 != (_QWORD)v171)
                memmove(&v171[-8 * v177], v171, v235 - (_QWORD)v171);
              v172 = &v178[v179];
              __p[1] = v178;
              *(_QWORD *)&v235 = v172;
              goto LABEL_233;
            }
            if ((void *)v235 == __p[0])
              v195 = 1;
            else
              v195 = (uint64_t)(v235 - (unint64_t)__p[0]) >> 2;
            if (v195 >> 61)
              goto LABEL_251;
            v196 = operator new(8 * v195);
            v197 = v195 >> 2;
            v198 = &v196[8 * (v195 >> 2)];
            v199 = v172 - v171;
            v126 = v172 == v171;
            v172 = v198;
            a3 = v222;
            v21 = v216;
            if (!v126)
            {
              v172 = &v198[v199 & 0xFFFFFFFFFFFFFFF8];
              v200 = v199 - 8;
              if (v200 < 0x38)
              {
                v201 = &v196[8 * (v195 >> 2)];
                do
                {
LABEL_230:
                  v211 = *(_QWORD *)v171;
                  v171 += 8;
                  *(_QWORD *)v201 = v211;
                  v201 += 8;
                }
                while (v201 != v172);
                goto LABEL_231;
              }
              v202 = 8 * v197;
              v203 = &v196[8 * v197] - v171;
              v201 = &v196[8 * (v195 >> 2)];
              if (v203 < 0x20)
                goto LABEL_230;
              v204 = (v200 >> 3) + 1;
              v205 = 8 * (v204 & 0x3FFFFFFFFFFFFFFCLL);
              v201 = &v198[v205];
              v206 = &v171[v205];
              v207 = (__int128 *)(v171 + 16);
              v208 = &v196[v202 + 16];
              v209 = v204 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v210 = *v207;
                *(v208 - 1) = *(v207 - 1);
                *v208 = v210;
                v207 += 2;
                v208 += 2;
                v209 -= 4;
              }
              while (v209);
              v171 = v206;
              if (v204 != (v204 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_230;
            }
LABEL_231:
            __p[0] = v196;
            __p[1] = &v196[8 * (v195 >> 2)];
            *(_QWORD *)&v235 = v172;
            *((_QWORD *)&v235 + 1) = &v196[8 * v195];
            if (v174)
              operator delete(v174);
            goto LABEL_233;
          }
          v212 = "numChildren";
        }
      }
LABEL_247:
      printf("Failed to read C3mm file - %s", v212);
      return std::deque<std::pair<std::shared_ptr<geo::c3mm::C3mmObjectTree::Group>,int>>::~deque[abi:ne180100]((uint64_t)__p);
    }
    v11 += 3;
LABEL_8:
    if (a2 - v11 <= 2)
      return std::deque<std::pair<std::shared_ptr<geo::c3mm::C3mmObjectTree::Group>,int>>::~deque[abi:ne180100]((uint64_t)__p);
  }
  v43 = v11 + 7;
  if (v11 + 7 > a2)
  {
    v212 = "entityId";
    goto LABEL_247;
  }
  if (v11 + 15 > a2)
  {
LABEL_240:
    v212 = "latitude";
    goto LABEL_247;
  }
  if (v11 + 23 > a2)
    goto LABEL_241;
  if (v11 + 31 > a2)
  {
LABEL_242:
    v212 = "altitude";
    goto LABEL_247;
  }
  v44 = v11 + 35;
  if (v11 + 35 > a2)
    goto LABEL_243;
  if (v11 + 36 > a2)
  {
    v212 = "numLodLevels";
    goto LABEL_247;
  }
  v45 = *(_DWORD *)(v221 + v43);
  v46 = *(_QWORD *)(a1 + v43);
  v47 = *(_QWORD *)(a1 + v11 + 15);
  v48 = *(_QWORD *)(a1 + v11 + 23);
  v49 = *(_DWORD *)(a1 + v11 + 31);
  v50 = *(unsigned __int8 *)(a1 + v44);
  if (!*(_BYTE *)(a1 + v44))
  {
    v53 = 0;
    v51 = 0;
    v11 += 36;
LABEL_68:
    v69 = operator new(0x58uLL);
    v70 = (std::__shared_weak_count *)v69;
    v69[1] = 0;
    v71 = v69 + 1;
    v69[2] = 0;
    *v69 = &off_1E42DE378;
    *((_DWORD *)v69 + 6) = 1;
    v72 = (char *)(v69 + 3);
    v69[9] = 0;
    v69[10] = 0;
    v69[8] = 0;
    v229 = (std::__shared_weak_count *)(v69 + 3);
    v230 = (std::__shared_weak_count *)v69;
    *((_DWORD *)v69 + 15) = v45;
    v69[4] = v46;
    v69[5] = v47;
    v69[6] = v48;
    *((_DWORD *)v69 + 14) = v49;
    v73 = v53 - v51;
    v219 = (v53 - v51) >> 2;
    if (v53 == v51)
    {
      v76 = v69 + 9;
      if ((_DWORD)v50)
        memcpy(0, v51, v53 - v51);
      v75 = 0;
    }
    else
    {
      if ((v73 & 0x8000000000000000) != 0)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v74 = (char *)operator new(v53 - v51);
      v75 = v74;
      v70[3].__vftable = (std::__shared_weak_count_vtbl *)v74;
      v76 = &v70[3].__vftable;
      v70[2].__shared_weak_owners_ = (uint64_t)v74;
      v70[3].__shared_owners_ = (uint64_t)&v74[4 * v219];
      if ((_DWORD)v50)
        memcpy(v74, v51, v73);
    }
    *v76 = &v75[4 * v219];
    a3 = v222;
    if (*((_QWORD *)&v236 + 1))
    {
      v77 = *((_QWORD *)__p[1] + (*((_QWORD *)&v236 + 1) + (_QWORD)v236 - 1) / 0xAAuLL)
          + 24 * ((*((_QWORD *)&v236 + 1) + (_QWORD)v236 - 1) % 0xAAuLL);
      --*(_DWORD *)(v77 + 16);
      v78 = (char **)(*(_QWORD *)v77 + 40);
      v226 = v72;
      v227 = v70;
      a1 = v225;
      do
        v79 = __ldxr(v71);
      while (__stxr(v79 + 1, v71));
      std::vector<std::shared_ptr<geo::c3mm::C3mmObjectTree::Node>>::push_back[abi:ne180100](v78, (uint64_t)&v226);
      v80 = v227;
      if (v227)
      {
        v81 = (unint64_t *)&v227->__shared_owners_;
        do
          v82 = __ldaxr(v81);
        while (__stlxr(v82 - 1, v81));
        if (!v82)
        {
          ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
          std::__shared_weak_count::__release_weak(v80);
        }
      }
      v83 = *((_QWORD *)&v236 + 1);
      if (*((_QWORD *)&v236 + 1))
      {
        v84 = v236;
        v85 = __p[1];
        do
        {
          v86 = v83 + v84 - 1;
          v87 = v85[v86 / 0xAA];
          v88 = v86 % 0xAA;
          if (*(_DWORD *)(v87 + 24 * v88 + 16))
            break;
          v89 = *(std::__shared_weak_count **)(v87 + 24 * v88 + 8);
          if (v89)
          {
            v90 = (unint64_t *)&v89->__shared_owners_;
            do
              v91 = __ldaxr(v90);
            while (__stlxr(v91 - 1, v90));
            if (!v91)
            {
              ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
              std::__shared_weak_count::__release_weak(v89);
            }
          }
          v85 = __p[1];
          v92 = v235;
          v93 = 170 * ((uint64_t)(v235 - (unint64_t)__p[1]) >> 3) - 1;
          if ((void *)v235 == __p[1])
            v93 = 0;
          v94 = *((_QWORD *)&v236 + 1);
          v84 = v236;
          v83 = --*((_QWORD *)&v236 + 1);
          if ((unint64_t)(v93 - (v94 + v236) + 1) >= 0x154)
          {
            operator delete(*(void **)(v235 - 8));
            *(_QWORD *)&v235 = v92 - 8;
          }
        }
        while (v83);
      }
    }
    else
    {
      v95 = *(char ***)(v222 + 240);
      v226 = v72;
      v227 = v70;
      a1 = v225;
      do
        v96 = __ldxr(v71);
      while (__stxr(v96 + 1, v71));
      std::vector<std::shared_ptr<geo::c3mm::C3mmObjectTree::Node>>::push_back[abi:ne180100](v95, (uint64_t)&v226);
      v97 = v227;
      if (v227)
      {
        v98 = (unint64_t *)&v227->__shared_owners_;
        do
          v99 = __ldaxr(v98);
        while (__stlxr(v99 - 1, v98));
        if (!v99)
        {
          ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
          std::__shared_weak_count::__release_weak(v97);
        }
      }
    }
    v100 = v230;
    a2 = v224;
    if (v230)
    {
      v101 = (unint64_t *)&v230->__shared_owners_;
      do
        v102 = __ldaxr(v101);
      while (__stlxr(v102 - 1, v101));
      if (!v102)
      {
        ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
        std::__shared_weak_count::__release_weak(v100);
      }
    }
    if (v51)
      operator delete(v51);
    v12 = v223;
    goto LABEL_8;
  }
  v51 = (char *)operator new(4 * v50);
  bzero(v51, 4 * v50);
  v52 = 0;
  v53 = &v51[4 * v50];
  while (v11 + v52 + 40 <= a2)
  {
    *(_DWORD *)&v51[v52] = *(_DWORD *)(v217 + v11 + v52);
    v52 += 4;
    if (4 * v50 == v52)
    {
      v11 += v52 + 36;
      goto LABEL_68;
    }
  }
  printf("Failed to read C3mm file - %s", "pixelSize");
  operator delete(v51);
  return std::deque<std::pair<std::shared_ptr<geo::c3mm::C3mmObjectTree::Group>,int>>::~deque[abi:ne180100]((uint64_t)__p);
}

void sub_19FF9D19C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,char a29)
{
  void *v29;
  void *v30;

  operator delete(v29);
  operator delete(v30);
  std::shared_ptr<geo::codec::VectorTile>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  std::shared_ptr<geo::codec::VectorTile>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  std::shared_ptr<geo::codec::VectorTile>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  std::deque<std::pair<std::shared_ptr<geo::c3mm::C3mmObjectTree::Group>,int>>::~deque[abi:ne180100]((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_19FF9D200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  void *v29;

  std::shared_ptr<geo::codec::VectorTile>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  std::shared_ptr<geo::codec::VectorTile>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  if (v29)
  {
    operator delete(v29);
    std::deque<std::pair<std::shared_ptr<geo::c3mm::C3mmObjectTree::Group>,int>>::~deque[abi:ne180100]((uint64_t)&a29);
    _Unwind_Resume(a1);
  }
  std::deque<std::pair<std::shared_ptr<geo::c3mm::C3mmObjectTree::Group>,int>>::~deque[abi:ne180100]((uint64_t)&a29);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::readRootBounds(uint64_t a1, unint64_t a2, uint64_t *a3, double a4, double a5, double a6, double a7, float a8)
{
  const char *v8;
  uint64_t v9;
  float v11;
  float v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v21;
  float v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  uint64_t v28;

  if (a2 >= 4)
  {
    if (a2 >= 8)
    {
      if (a2 == 8)
      {
        v8 = "numBits";
      }
      else
      {
        v11 = *(float *)a1;
        v12 = *(float *)(a1 + 4);
        v13 = *(_BYTE *)(a1 + 8);
        v9 = 1;
        v14 = *a3;
        v15 = -1431655765 * ((unint64_t)(a3[1] - *a3) >> 3);
        __asm { FMOV            V2.2S, #1.0 }
        a3[3] = _D2;
        if (!(_DWORD)v15)
          return v9;
        v21 = 0;
        v22 = (float)(1 << v13);
        v23 = (float)(v12 - v11) / v22;
        v24 = a3[4];
        v25 = 4 * v15;
        v26 = (unsigned int *)(v14 + 16);
        v8 = "bottomOffset";
        while (v21 + 11 <= a2)
        {
          if (v21 + 13 > a2)
          {
            v8 = "topOffset";
            break;
          }
          v27 = *v26;
          v26 += 6;
          LOWORD(v22) = *(_WORD *)(a1 + v21 + 9);
          v22 = v11 + (float)(v23 * (float)LODWORD(v22));
          v28 = v24 + 16 * v27;
          LOWORD(a8) = *(_WORD *)(a1 + v21 + 11);
          a8 = v12 - (float)(v23 * (float)LODWORD(a8));
          *(float *)(v28 + 4) = v22;
          *(float *)(v28 + 8) = a8;
          v21 += 4;
          v9 = 1;
          if (v25 == v21)
            return v9;
        }
      }
    }
    else
    {
      v8 = "maxAlt";
    }
  }
  else
  {
    v8 = "minAlt";
  }
  printf("Failed to read C3mm file - %s", v8);
  return 0;
}

BOOL `anonymous namespace'::readChildBounds(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  double v10;
  float v11;
  uint64_t v12;

  if (a2)
  {
    v5 = *a4;
    v6 = a4[1];
    if (*a4 != v6)
    {
      v8 = 0;
      v9 = (uint64_t)(a1 + 1);
      v10 = 1.0;
      v11 = 1.0 / (double)(1 << *a1);
      v12 = a4[4];
      do
      {
        v5 += 24;
      }
      while (v5 != v6);
    }
  }
  else
  {
    printf("Failed to read C3mm file - %s", "numBits");
  }
  return a2 != 0;
}

uint64_t `anonymous namespace'::readHighPrecisionBounds(unsigned int *a1, unint64_t a2, uint64_t a3)
{
  const char *v3;
  uint64_t v5;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  if (a2 < 4)
  {
    v3 = "numTiles";
LABEL_3:
    printf("Failed to read C3mm file - %s", v3);
    return 0;
  }
  v5 = *a1;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(a3 + 24) = _D0;
  if ((_DWORD)v5)
  {
    v11 = 0;
    v12 = 8 * v5;
    v13 = (_QWORD *)(*(_QWORD *)(a3 + 32) + 4);
    v3 = "minAlt";
    while (v11 + 8 <= a2)
    {
      if (v11 + 12 > a2)
      {
        v3 = "maxAlt";
        goto LABEL_3;
      }
      *v13 = *(_QWORD *)&a1[v11 / 4 + 1];
      v13 += 2;
      v11 += 8;
      if (v12 == v11)
        return 1;
    }
    goto LABEL_3;
  }
  return 1;
}

uint64_t `anonymous namespace'::buildSubTree(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  __int16 *v6;
  uint64_t v7;
  __int16 v8;
  BOOL i;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v5 = (a4 + 1);
  v6 = (__int16 *)(a2 + 16 * a4);
  v7 = (a3 + 1);
  v8 = *v6;
  for (i = (*v6 & 1) == 0; (_DWORD)a1 != (_DWORD)v7; i = (*v6 & 1) == 0)
  {
    v11 = a2 + 16 * v5;
    v12 = v5;
    if (i)
    {
      if ((v8 & 4) == 0)
        goto LABEL_4;
    }
    else
    {
      *(_DWORD *)(v11 + 12) = 0;
      v8 = *v6;
      if ((*v6 & 4) == 0)
      {
LABEL_4:
        v13 = v12;
        LODWORD(v12) = v5;
        if ((v8 & 0x10) != 0)
          goto LABEL_5;
        goto LABEL_13;
      }
    }
    *(_DWORD *)(v11 + 12) = v12;
    *(_DWORD *)(a2 + 16 * v12 + 12) = 0;
    v8 = *v6;
    if ((*v6 & 0x10) != 0)
    {
LABEL_5:
      *(_DWORD *)(a2 + 16 * v12 + 12) = v13;
      *(_DWORD *)(a2 + 16 * v13 + 12) = 0;
      v8 = *v6;
      if ((*v6 & 0x40) != 0)
        goto LABEL_6;
      goto LABEL_14;
    }
LABEL_13:
    v14 = v13;
    LODWORD(v13) = v12;
    if ((v8 & 0x40) != 0)
    {
LABEL_6:
      *(_DWORD *)(a2 + 16 * v13 + 12) = v14;
      *(_DWORD *)(a2 + 16 * v14 + 12) = 0;
      v8 = *v6;
      if ((*v6 & 0x100) != 0)
        goto LABEL_7;
      goto LABEL_15;
    }
LABEL_14:
    v15 = v14;
    LODWORD(v14) = v13;
    if ((v8 & 0x100) != 0)
    {
LABEL_7:
      *(_DWORD *)(a2 + 16 * v14 + 12) = v15;
      *(_DWORD *)(a2 + 16 * v15 + 12) = 0;
      v8 = *v6;
      if ((*v6 & 0x400) != 0)
        goto LABEL_8;
      goto LABEL_16;
    }
LABEL_15:
    v16 = v15;
    LODWORD(v15) = v14;
    if ((v8 & 0x400) != 0)
    {
LABEL_8:
      *(_DWORD *)(a2 + 16 * v15 + 12) = v16;
      *(_DWORD *)(a2 + 16 * v16 + 12) = 0;
      v8 = *v6;
      if ((*v6 & 0x1000) == 0)
        goto LABEL_17;
      goto LABEL_9;
    }
LABEL_16:
    v17 = v16;
    LODWORD(v16) = v15;
    if ((v8 & 0x1000) == 0)
    {
LABEL_17:
      a4 = v17;
      LODWORD(v17) = v16;
      if ((v8 & 0x4000) == 0)
        return a4;
      goto LABEL_18;
    }
LABEL_9:
    *(_DWORD *)(a2 + 16 * v16 + 12) = v17;
    *(_DWORD *)(a2 + 16 * v17 + 12) = 0;
    if ((*v6 & 0x4000) == 0)
      return a4;
LABEL_18:
    *(_DWORD *)(a2 + 16 * v17 + 12) = a4;
    v6 = (__int16 *)(a2 + 16 * a4);
    *((_DWORD *)v6 + 3) = 0;
    v5 = (a4 + 1);
    v7 = (v7 + 1);
    v8 = *v6;
  }
  v18 = a2 + 16 * v5;
  v19 = v5;
  if (!i)
  {
    *(_DWORD *)(v18 + 12) = 0;
    v19 = (a4 + 2);
  }
  if ((v8 & 4) != 0)
  {
    *(_DWORD *)(v18 + 12) = v19;
    *(_DWORD *)(a2 + 16 * v19 + 12) = 0;
    v20 = (v19 + 1);
    if ((v8 & 0x10) != 0)
    {
LABEL_23:
      *(_DWORD *)(a2 + 16 * v19 + 12) = v20;
      *(_DWORD *)(a2 + 16 * v20 + 12) = 0;
      v21 = (v20 + 1);
      if ((v8 & 0x40) != 0)
        goto LABEL_24;
      goto LABEL_31;
    }
  }
  else
  {
    v20 = v19;
    LODWORD(v19) = v5;
    if ((v8 & 0x10) != 0)
      goto LABEL_23;
  }
  v21 = v20;
  LODWORD(v20) = v19;
  if ((v8 & 0x40) != 0)
  {
LABEL_24:
    *(_DWORD *)(a2 + 16 * v20 + 12) = v21;
    *(_DWORD *)(a2 + 16 * v21 + 12) = 0;
    v22 = (v21 + 1);
    if ((v8 & 0x100) != 0)
      goto LABEL_25;
    goto LABEL_32;
  }
LABEL_31:
  v22 = v21;
  LODWORD(v21) = v20;
  if ((v8 & 0x100) != 0)
  {
LABEL_25:
    *(_DWORD *)(a2 + 16 * v21 + 12) = v22;
    *(_DWORD *)(a2 + 16 * v22 + 12) = 0;
    v23 = (v22 + 1);
    if ((v8 & 0x400) != 0)
      goto LABEL_26;
    goto LABEL_33;
  }
LABEL_32:
  v23 = v22;
  LODWORD(v22) = v21;
  if ((v8 & 0x400) != 0)
  {
LABEL_26:
    *(_DWORD *)(a2 + 16 * v22 + 12) = v23;
    *(_DWORD *)(a2 + 16 * v23 + 12) = 0;
    v24 = (v23 + 1);
    if ((v8 & 0x1000) != 0)
      goto LABEL_27;
    goto LABEL_34;
  }
LABEL_33:
  v24 = v23;
  LODWORD(v23) = v22;
  if ((v8 & 0x1000) != 0)
  {
LABEL_27:
    *(_DWORD *)(a2 + 16 * v23 + 12) = v24;
    *(_DWORD *)(a2 + 16 * v24 + 12) = 0;
    a4 = (v24 + 1);
    if ((v8 & 0x4000) == 0)
      return a4;
    goto LABEL_35;
  }
LABEL_34:
  a4 = v24;
  LODWORD(v24) = v23;
  if ((v8 & 0x4000) != 0)
  {
LABEL_35:
    *(_DWORD *)(a2 + 16 * v24 + 12) = a4;
    *(_DWORD *)(a2 + 16 * a4 + 12) = 0;
    return (a4 + 1);
  }
  return a4;
}

void std::vector<std::shared_ptr<geo::c3mm::C3mmObjectTree::Node>>::push_back[abi:ne180100](char **a1, uint64_t a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  char *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;

  v5 = a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 < v4)
  {
    *(_OWORD *)v5 = *(_OWORD *)a2;
    v6 = v5 + 16;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
LABEL_3:
    a1[1] = v6;
    return;
  }
  v7 = (v5 - *a1) >> 4;
  if ((unint64_t)(v7 + 1) >> 60)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  v8 = v4 - (_QWORD)*a1;
  v9 = v8 >> 3;
  if (v8 >> 3 <= (unint64_t)(v7 + 1))
    v9 = v7 + 1;
  v10 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
  v11 = 0xFFFFFFFFFFFFFFFLL;
  if (!v10)
    v11 = v9;
  if (v11 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v12 = 16 * v11;
  v13 = (char *)operator new(16 * v11);
  v14 = &v13[16 * v7];
  *(_OWORD *)v14 = *(_OWORD *)a2;
  v6 = v14 + 16;
  v15 = &v13[v12];
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v16 = *a1;
  v17 = a1[1];
  if (v17 == *a1)
  {
    *a1 = v14;
    a1[1] = v6;
    a1[2] = v15;
  }
  else
  {
    do
    {
      v18 = *((_OWORD *)v17 - 1);
      v17 -= 16;
      *((_OWORD *)v14 - 1) = v18;
      v14 -= 16;
      *(_QWORD *)v17 = 0;
      *((_QWORD *)v17 + 1) = 0;
    }
    while (v17 != v16);
    v17 = *a1;
    v19 = a1[1];
    *a1 = v14;
    a1[1] = v6;
    a1[2] = v15;
    while (v19 != v17)
    {
      v20 = (std::__shared_weak_count *)*((_QWORD *)v19 - 1);
      if (v20)
      {
        p_shared_owners = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      v19 -= 16;
    }
  }
  if (!v17)
    goto LABEL_3;
  operator delete(v17);
  a1[1] = v6;
}

void std::__shared_ptr_pointer<geo::c3mm::C3mmObjectTree *,std::shared_ptr<geo::c3mm::C3mmObjectTree>::__shared_ptr_default_delete<geo::c3mm::C3mmObjectTree,geo::c3mm::C3mmObjectTree>,std::allocator<geo::c3mm::C3mmObjectTree>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<geo::c3mm::C3mmObjectTree *,std::shared_ptr<geo::c3mm::C3mmObjectTree>::__shared_ptr_default_delete<geo::c3mm::C3mmObjectTree,geo::c3mm::C3mmObjectTree>,std::allocator<geo::c3mm::C3mmObjectTree>>::__on_zero_shared(uint64_t result)
{
  void **v1;
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v1 = *(void ***)(result + 24);
  if (v1)
  {
    v2 = (char *)*v1;
    if (*v1)
    {
      v3 = (char *)v1[1];
      v4 = *v1;
      if (v3 != v2)
      {
        do
        {
          v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 1);
          if (v5)
          {
            p_shared_owners = (unint64_t *)&v5->__shared_owners_;
            do
              v7 = __ldaxr(p_shared_owners);
            while (__stlxr(v7 - 1, p_shared_owners));
            if (!v7)
            {
              ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
              std::__shared_weak_count::__release_weak(v5);
            }
          }
          v3 -= 16;
        }
        while (v3 != v2);
        v4 = *v1;
      }
      v1[1] = v2;
      operator delete(v4);
    }
    JUMPOUT(0x1A1AF4E00);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<geo::c3mm::C3mmObjectTree *,std::shared_ptr<geo::c3mm::C3mmObjectTree>::__shared_ptr_default_delete<geo::c3mm::C3mmObjectTree,geo::c3mm::C3mmObjectTree>,std::allocator<geo::c3mm::C3mmObjectTree>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN3geo4c3mm14C3mmObjectTreeEE27__shared_ptr_default_deleteIS3_S3_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN3geo4c3mm14C3mmObjectTreeEE27__shared_ptr_default_deleteIS3_S3_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN3geo4c3mm14C3mmObjectTreeEE27__shared_ptr_default_deleteIS3_S3_EE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN3geo4c3mm14C3mmObjectTreeEE27__shared_ptr_default_deleteIS3_S3_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void std::__shared_ptr_emplace<geo::c3mm::C3mmObjectTree::Group>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE340;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<geo::c3mm::C3mmObjectTree::Group>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE340;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<geo::c3mm::C3mmObjectTree::Group>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v3 = *(_QWORD *)(a1 + 72);
    v4 = *(void **)(a1 + 64);
    if (v3 == v1)
    {
      *(_QWORD *)(a1 + 72) = v1;
      operator delete(v4);
    }
    else
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v1);
      v8 = *(void **)(a1 + 64);
      *(_QWORD *)(a1 + 72) = v1;
      operator delete(v8);
    }
  }
}

void std::__shared_ptr_emplace<geo::c3mm::C3mmObjectTree::Model>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE378;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<geo::c3mm::C3mmObjectTree::Model>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE378;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<geo::c3mm::C3mmObjectTree::Model>::__on_zero_shared(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(_QWORD *)(a1 + 72) = v2;
    operator delete(v2);
  }
}

uint64_t std::deque<std::pair<std::shared_ptr<geo::c3mm::C3mmObjectTree::Group>,int>>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  void **v5;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v3 = *(void ***)(a1 + 8);
    *(_QWORD *)(a1 + 40) = 0;
    v12 = 0;
    goto LABEL_16;
  }
  v4 = *(_QWORD *)(a1 + 32);
  v5 = &v2[v4 / 0xAA];
  v6 = (unint64_t)*v5 + 24 * (v4 % 0xAA);
  v7 = (unint64_t)v2[(*(_QWORD *)(a1 + 40) + v4) / 0xAA] + 24 * ((*(_QWORD *)(a1 + 40) + v4) % 0xAA);
  if (v6 == v7)
    goto LABEL_14;
  do
  {
    v8 = *(std::__shared_weak_count **)(v6 + 8);
    if (!v8)
      goto LABEL_9;
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (v10)
    {
LABEL_9:
      v6 += 24;
      if (v6 - (_QWORD)*v5 != 4080)
        continue;
LABEL_10:
      v11 = (unint64_t)v5[1];
      ++v5;
      v6 = v11;
      continue;
    }
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v6 += 24;
    if (v6 - (_QWORD)*v5 == 4080)
      goto LABEL_10;
  }
  while (v6 != v7);
  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
LABEL_14:
  *(_QWORD *)(a1 + 40) = 0;
  v12 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v12 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
LABEL_16:
  v13 = v12 >> 3;
  if (v13 == 1)
  {
    v14 = 85;
LABEL_21:
    *(_QWORD *)(a1 + 32) = v14;
  }
  else if (v13 == 2)
  {
    v14 = 170;
    goto LABEL_21;
  }
  if (v2 != v3)
  {
    do
    {
      v15 = *v2++;
      operator delete(v15);
    }
    while (v2 != v3);
    v17 = *(_QWORD *)(a1 + 8);
    v16 = *(_QWORD *)(a1 + 16);
    if (v16 != v17)
      *(_QWORD *)(a1 + 16) = v16 + ((v17 - v16 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t `anonymous namespace'::propagateBounds(uint64_t a1, uint64_t a2, int a3, unsigned int a4, uint64_t a5, uint64_t a6, float a7, float a8)
{
  float *v11;
  float v12;
  float v13;
  float v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  __int16 v18;
  BOOL v19;
  unsigned int v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;

  v11 = (float *)(a2 + 16 * a4);
  v13 = v11[1];
  v12 = v11[2];
  v14 = v12 - v13;
  v15 = a4 + 1;
  v16 = (float)(v12 - v13) * a7;
  v17 = (a3 + 1);
  v18 = *(_WORD *)v11;
  v19 = (*(_WORD *)v11 & 1) == 0;
  if (v17 < a1)
  {
    do
    {
      if (v19)
      {
        if ((v18 & 4) == 0)
        {
          if ((v18 & 0x10) == 0)
          {
            if ((v18 & 0x40) == 0)
            {
              if ((v18 & 0x100) == 0)
              {
                if ((v18 & 0x400) == 0)
                {
                  if ((v18 & 0x1000) == 0)
                  {
                    if ((v18 & 0x4000) == 0)
                      return a6;
                    goto LABEL_4;
                  }
                  goto LABEL_44;
                }
                goto LABEL_40;
              }
              goto LABEL_36;
            }
            goto LABEL_32;
          }
          goto LABEL_28;
        }
        v24 = v15;
      }
      else
      {
        LOBYTE(v14) = *(_BYTE *)(a5 + a6);
        LOBYTE(a8) = *(_BYTE *)(a5 + (a6 + 1));
        v22 = a2 + 16 * v15;
        *(float *)(v22 + 4) = v13 + (float)(v16 * (float)LODWORD(v14));
        *(float *)(v22 + 8) = v12 - (float)(v16 * (float)LODWORD(a8));
        v23 = *(_WORD *)v11;
        if ((*(_WORD *)v11 & 4) == 0)
        {
          LODWORD(v24) = v15;
          if ((v23 & 0x10) == 0)
            goto LABEL_15;
          goto LABEL_26;
        }
        if ((_DWORD)v15)
          v24 = *(unsigned int *)(a2 + 16 * v15 + 12);
        else
          v24 = 0;
      }
      LOBYTE(v14) = *(_BYTE *)(a5 + a6);
      LOBYTE(a8) = *(_BYTE *)(a5 + (a6 + 1));
      v25 = a2 + 16 * v24;
      *(float *)(v25 + 4) = v13 + (float)(v16 * (float)LODWORD(v14));
      *(float *)(v25 + 8) = v12 - (float)(v16 * (float)LODWORD(a8));
      v23 = *(_WORD *)v11;
      if ((*(_WORD *)v11 & 0x10) == 0)
      {
LABEL_15:
        if ((v23 & 0x40) == 0)
          goto LABEL_16;
        goto LABEL_30;
      }
LABEL_26:
      if ((_DWORD)v24)
      {
        v24 = *(unsigned int *)(a2 + 16 * v24 + 12);
        goto LABEL_29;
      }
LABEL_28:
      v24 = v15;
LABEL_29:
      LOBYTE(v14) = *(_BYTE *)(a5 + a6);
      LOBYTE(a8) = *(_BYTE *)(a5 + (a6 + 1));
      v26 = a2 + 16 * v24;
      *(float *)(v26 + 4) = v13 + (float)(v16 * (float)LODWORD(v14));
      *(float *)(v26 + 8) = v12 - (float)(v16 * (float)LODWORD(a8));
      v23 = *(_WORD *)v11;
      if ((*(_WORD *)v11 & 0x40) == 0)
      {
LABEL_16:
        if ((v23 & 0x100) == 0)
          goto LABEL_17;
        goto LABEL_34;
      }
LABEL_30:
      if ((_DWORD)v24)
      {
        v24 = *(unsigned int *)(a2 + 16 * v24 + 12);
        goto LABEL_33;
      }
LABEL_32:
      v24 = v15;
LABEL_33:
      LOBYTE(v14) = *(_BYTE *)(a5 + a6);
      LOBYTE(a8) = *(_BYTE *)(a5 + (a6 + 1));
      v27 = a2 + 16 * v24;
      *(float *)(v27 + 4) = v13 + (float)(v16 * (float)LODWORD(v14));
      *(float *)(v27 + 8) = v12 - (float)(v16 * (float)LODWORD(a8));
      v23 = *(_WORD *)v11;
      if ((*(_WORD *)v11 & 0x100) == 0)
      {
LABEL_17:
        if ((v23 & 0x400) == 0)
          goto LABEL_18;
        goto LABEL_38;
      }
LABEL_34:
      if ((_DWORD)v24)
      {
        v24 = *(unsigned int *)(a2 + 16 * v24 + 12);
        goto LABEL_37;
      }
LABEL_36:
      v24 = v15;
LABEL_37:
      LOBYTE(v14) = *(_BYTE *)(a5 + a6);
      LOBYTE(a8) = *(_BYTE *)(a5 + (a6 + 1));
      v28 = a2 + 16 * v24;
      *(float *)(v28 + 4) = v13 + (float)(v16 * (float)LODWORD(v14));
      *(float *)(v28 + 8) = v12 - (float)(v16 * (float)LODWORD(a8));
      v23 = *(_WORD *)v11;
      if ((*(_WORD *)v11 & 0x400) == 0)
      {
LABEL_18:
        if ((v23 & 0x1000) != 0)
          goto LABEL_42;
        goto LABEL_19;
      }
LABEL_38:
      if ((_DWORD)v24)
      {
        v24 = *(unsigned int *)(a2 + 16 * v24 + 12);
        goto LABEL_41;
      }
LABEL_40:
      v24 = v15;
LABEL_41:
      LOBYTE(v14) = *(_BYTE *)(a5 + a6);
      LOBYTE(a8) = *(_BYTE *)(a5 + (a6 + 1));
      v29 = a2 + 16 * v24;
      *(float *)(v29 + 4) = v13 + (float)(v16 * (float)LODWORD(v14));
      *(float *)(v29 + 8) = v12 - (float)(v16 * (float)LODWORD(a8));
      v23 = *(_WORD *)v11;
      if ((*(_WORD *)v11 & 0x1000) != 0)
      {
LABEL_42:
        if ((_DWORD)v24)
        {
          v24 = *(unsigned int *)(a2 + 16 * v24 + 12);
          goto LABEL_45;
        }
LABEL_44:
        v24 = v15;
LABEL_45:
        LOBYTE(v14) = *(_BYTE *)(a5 + a6);
        LOBYTE(a8) = *(_BYTE *)(a5 + (a6 + 1));
        v30 = a2 + 16 * v24;
        *(float *)(v30 + 4) = v13 + (float)(v16 * (float)LODWORD(v14));
        *(float *)(v30 + 8) = v12 - (float)(v16 * (float)LODWORD(a8));
        if ((*(_WORD *)v11 & 0x4000) == 0)
          return a6;
        goto LABEL_46;
      }
LABEL_19:
      if ((v23 & 0x4000) == 0)
        return a6;
LABEL_46:
      if ((_DWORD)v24)
        LODWORD(v15) = *(_DWORD *)(a2 + 16 * v24 + 12);
LABEL_4:
      v21 = a6 + 1;
      LOBYTE(v14) = *(_BYTE *)(a5 + a6);
      a6 = (a6 + 2);
      LOBYTE(a8) = *(_BYTE *)(a5 + v21);
      a8 = (float)LODWORD(a8);
      v13 = v13 + (float)(v16 * (float)LODWORD(v14));
      v12 = v12 - (float)(v16 * a8);
      v11 = (float *)(a2 + 16 * v15);
      v11[1] = v13;
      v11[2] = v12;
      v14 = v12 - v13;
      v15 = (v15 + 1);
      v16 = (float)(v12 - v13) * a7;
      v17 = (v17 + 1);
      v18 = *(_WORD *)v11;
      v19 = (*(_WORD *)v11 & 1) == 0;
    }
    while ((_DWORD)a1 != (_DWORD)v17);
  }
  if (v19)
  {
    if ((v18 & 4) == 0)
    {
      if ((v18 & 0x10) == 0)
      {
        if ((v18 & 0x40) == 0)
        {
          if ((v18 & 0x100) == 0)
          {
            if ((v18 & 0x400) == 0)
            {
              if ((v18 & 0x1000) == 0)
              {
                if ((v18 & 0x4000) == 0)
                  return a6;
                goto LABEL_92;
              }
              goto LABEL_88;
            }
            goto LABEL_84;
          }
          goto LABEL_80;
        }
        goto LABEL_76;
      }
      goto LABEL_72;
    }
    v33 = v15;
  }
  else
  {
    v31 = a6 + 1;
    LOBYTE(v14) = *(_BYTE *)(a5 + a6);
    a6 = (a6 + 2);
    LOBYTE(a8) = *(_BYTE *)(a5 + v31);
    v14 = v13 + (float)(v16 * (float)LODWORD(v14));
    a8 = v12 - (float)(v16 * (float)LODWORD(a8));
    v32 = a2 + 16 * v15;
    *(float *)(v32 + 4) = v14;
    *(float *)(v32 + 8) = a8;
    if ((v18 & 4) == 0)
    {
      v33 = v15;
      if ((v18 & 0x10) != 0)
        goto LABEL_70;
LABEL_59:
      if ((v18 & 0x40) != 0)
        goto LABEL_74;
LABEL_60:
      if ((v18 & 0x100) != 0)
        goto LABEL_78;
LABEL_61:
      if ((v18 & 0x400) != 0)
        goto LABEL_82;
LABEL_62:
      if ((v18 & 0x1000) != 0)
        goto LABEL_86;
LABEL_63:
      if ((v18 & 0x4000) == 0)
        return a6;
      goto LABEL_90;
    }
    if ((_DWORD)v15)
      v33 = *(_DWORD *)(a2 + 16 * v15 + 12);
    else
      v33 = 0;
  }
  v34 = a6 + 1;
  LOBYTE(v14) = *(_BYTE *)(a5 + a6);
  a6 = (a6 + 2);
  LOBYTE(a8) = *(_BYTE *)(a5 + v34);
  v14 = v13 + (float)(v16 * (float)LODWORD(v14));
  a8 = v12 - (float)(v16 * (float)LODWORD(a8));
  v35 = a2 + 16 * v33;
  *(float *)(v35 + 4) = v14;
  *(float *)(v35 + 8) = a8;
  if ((v18 & 0x10) == 0)
    goto LABEL_59;
LABEL_70:
  if (v33)
  {
    v33 = *(_DWORD *)(a2 + 16 * v33 + 12);
    goto LABEL_73;
  }
LABEL_72:
  v33 = v15;
LABEL_73:
  v36 = a6 + 1;
  LOBYTE(v14) = *(_BYTE *)(a5 + a6);
  a6 = (a6 + 2);
  LOBYTE(a8) = *(_BYTE *)(a5 + v36);
  v14 = v13 + (float)(v16 * (float)LODWORD(v14));
  a8 = v12 - (float)(v16 * (float)LODWORD(a8));
  v37 = a2 + 16 * v33;
  *(float *)(v37 + 4) = v14;
  *(float *)(v37 + 8) = a8;
  if ((v18 & 0x40) == 0)
    goto LABEL_60;
LABEL_74:
  if (v33)
  {
    v33 = *(_DWORD *)(a2 + 16 * v33 + 12);
    goto LABEL_77;
  }
LABEL_76:
  v33 = v15;
LABEL_77:
  v38 = a6 + 1;
  LOBYTE(v14) = *(_BYTE *)(a5 + a6);
  a6 = (a6 + 2);
  LOBYTE(a8) = *(_BYTE *)(a5 + v38);
  v14 = v13 + (float)(v16 * (float)LODWORD(v14));
  a8 = v12 - (float)(v16 * (float)LODWORD(a8));
  v39 = a2 + 16 * v33;
  *(float *)(v39 + 4) = v14;
  *(float *)(v39 + 8) = a8;
  if ((v18 & 0x100) == 0)
    goto LABEL_61;
LABEL_78:
  if (v33)
  {
    v33 = *(_DWORD *)(a2 + 16 * v33 + 12);
    goto LABEL_81;
  }
LABEL_80:
  v33 = v15;
LABEL_81:
  v40 = a6 + 1;
  LOBYTE(v14) = *(_BYTE *)(a5 + a6);
  a6 = (a6 + 2);
  LOBYTE(a8) = *(_BYTE *)(a5 + v40);
  v14 = v13 + (float)(v16 * (float)LODWORD(v14));
  a8 = v12 - (float)(v16 * (float)LODWORD(a8));
  v41 = a2 + 16 * v33;
  *(float *)(v41 + 4) = v14;
  *(float *)(v41 + 8) = a8;
  if ((v18 & 0x400) == 0)
    goto LABEL_62;
LABEL_82:
  if (v33)
  {
    v33 = *(_DWORD *)(a2 + 16 * v33 + 12);
    goto LABEL_85;
  }
LABEL_84:
  v33 = v15;
LABEL_85:
  v42 = a6 + 1;
  LOBYTE(v14) = *(_BYTE *)(a5 + a6);
  a6 = (a6 + 2);
  LOBYTE(a8) = *(_BYTE *)(a5 + v42);
  v14 = v13 + (float)(v16 * (float)LODWORD(v14));
  a8 = v12 - (float)(v16 * (float)LODWORD(a8));
  v43 = a2 + 16 * v33;
  *(float *)(v43 + 4) = v14;
  *(float *)(v43 + 8) = a8;
  if ((v18 & 0x1000) == 0)
    goto LABEL_63;
LABEL_86:
  if (v33)
  {
    v33 = *(_DWORD *)(a2 + 16 * v33 + 12);
    goto LABEL_89;
  }
LABEL_88:
  v33 = v15;
LABEL_89:
  v44 = a6 + 1;
  LOBYTE(v14) = *(_BYTE *)(a5 + a6);
  a6 = (a6 + 2);
  LOBYTE(a8) = *(_BYTE *)(a5 + v44);
  v14 = v13 + (float)(v16 * (float)LODWORD(v14));
  a8 = v12 - (float)(v16 * (float)LODWORD(a8));
  v45 = a2 + 16 * v33;
  *(float *)(v45 + 4) = v14;
  *(float *)(v45 + 8) = a8;
  if ((v18 & 0x4000) != 0)
  {
LABEL_90:
    if (v33)
      LODWORD(v15) = *(_DWORD *)(a2 + 16 * v33 + 12);
LABEL_92:
    v46 = a6 + 1;
    LOBYTE(v14) = *(_BYTE *)(a5 + a6);
    a6 = (a6 + 2);
    LOBYTE(a8) = *(_BYTE *)(a5 + v46);
    v47 = a2 + 16 * v15;
    *(float *)(v47 + 4) = v13 + (float)(v16 * (float)LODWORD(v14));
    *(float *)(v47 + 8) = v12 - (float)(v16 * (float)LODWORD(a8));
  }
  return a6;
}

void std::vector<geo::c3mm::C3mmRoot>::__append(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;

  v5 = a1[1];
  v4 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 3) >= a2)
  {
    if (a2)
    {
      v11 = &v5[24 * a2];
      do
      {
        *(_QWORD *)v5 = 0;
        *((_QWORD *)v5 + 1) = 0;
        *((_QWORD *)v5 + 2) = 0x200000000;
        v5 += 24;
      }
      while (v5 != v11);
      v5 = v11;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    v7 = v6 + a2;
    if (v6 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0x555555555555555)
      v9 = 0xAAAAAAAAAAAAAAALL;
    else
      v9 = v7;
    if (v9)
    {
      if (v9 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v10 = (char *)operator new(24 * v9);
    }
    else
    {
      v10 = 0;
    }
    v12 = &v10[24 * v6];
    v13 = &v12[24 * a2];
    v14 = v12;
    do
    {
      *(_QWORD *)v14 = 0;
      *((_QWORD *)v14 + 1) = 0;
      *((_QWORD *)v14 + 2) = 0x200000000;
      v14 += 24;
    }
    while (v14 != v13);
    v15 = *a1;
    if (v5 != *a1)
    {
      do
      {
        v16 = *(_OWORD *)(v5 - 24);
        *((_QWORD *)v12 - 1) = *((_QWORD *)v5 - 1);
        *(_OWORD *)(v12 - 24) = v16;
        v12 -= 24;
        v5 -= 24;
      }
      while (v5 != v15);
      v5 = *a1;
    }
    *a1 = v12;
    a1[1] = v13;
    a1[2] = &v10[24 * v9];
    if (v5)
      operator delete(v5);
  }
}

void std::__shared_ptr_emplace<geo::c3mm::C3mmFile>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE3E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<geo::c3mm::C3mmFile>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE3E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<geo::c3mm::C3mmFile>::__on_zero_shared(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
}

_QWORD *geo::A3DFileCreate(geo *this, const unsigned __int8 *a2)
{
  FILE *v3;
  const char *v4;
  size_t v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  unint64_t v34;
  unsigned int v35;
  unint64_t v36;
  unsigned int *v37;

  if (!this)
  {
    v3 = (FILE *)*MEMORY[0x1E0C80C10];
    v4 = "No A3D data provided\n";
    v5 = 21;
    goto LABEL_12;
  }
  if ((unint64_t)a2 <= 0xD)
  {
    v3 = (FILE *)*MEMORY[0x1E0C80C10];
    v4 = "A3D appears to be malformed, there's not enough room for a header\n";
    v5 = 66;
LABEL_12:
    fwrite(v4, v5, 1uLL, v3);
    return 0;
  }
  if (strncmp((const char *)this, "A3D", 3uLL))
  {
    v3 = (FILE *)*MEMORY[0x1E0C80C10];
    v4 = "Data does not appear to be A3D format.\n";
    v5 = 39;
    goto LABEL_12;
  }
  if (*((_BYTE *)this + 3) != 1)
  {
    v3 = (FILE *)*MEMORY[0x1E0C80C10];
    v4 = "A3D contains incorrect version for parser.\n";
    v5 = 43;
    goto LABEL_12;
  }
  v7 = *((unsigned int *)this + 1);
  v8 = *((unsigned int *)this + 2);
  if (__CFADD__((_DWORD)v8, (_DWORD)v7))
  {
    v3 = (FILE *)*MEMORY[0x1E0C80C10];
    v4 = "A3D appears to be malformed, it claims its vertices end after more than SIZE_MAX bytes.\n";
    v5 = 88;
    goto LABEL_12;
  }
  if (v8 + v7 > (unint64_t)a2)
  {
    v3 = (FILE *)*MEMORY[0x1E0C80C10];
    v4 = "A3D appears to be malformed, there aren't enough bytes for all its vertices.\n";
    v5 = 77;
    goto LABEL_12;
  }
  v10 = *((unsigned __int16 *)this + 6);
  if (145 * v10 + 14 > (unint64_t)a2)
  {
    v3 = (FILE *)*MEMORY[0x1E0C80C10];
    v4 = "A3D appears to be malformed, there aren't enough bytes for the sub-mesh headers.\n";
LABEL_18:
    v5 = 81;
    goto LABEL_12;
  }
  if (!(_DWORD)v10)
  {
    v17 = v8 + 14;
    v18 = v8 + 14;
    goto LABEL_46;
  }
  v11 = (unsigned int *)((char *)this + 27);
  v12 = *((unsigned __int16 *)this + 6);
  do
  {
    v13 = *(unsigned int *)((char *)v11 - 13);
    v14 = *(unsigned int *)((char *)v11 - 9);
    if (__CFADD__((_DWORD)v14, (_DWORD)v13))
    {
      v3 = (FILE *)*MEMORY[0x1E0C80C10];
      v4 = "A3D appears to be malformed, it claims one of its mesh index sets ends after more than SIZE_MAX bytes.\n";
      v5 = 103;
      goto LABEL_12;
    }
    if (v14 + v13 > (unint64_t)a2)
    {
      v3 = (FILE *)*MEMORY[0x1E0C80C10];
      v4 = "A3D appears to be malformed, there aren't enough bytes for all its sub mesh indices.\n";
      v5 = 85;
      goto LABEL_12;
    }
    v15 = *v11;
    if ((_DWORD)v15)
    {
      v16 = *(v11 - 1);
      if (__CFADD__((_DWORD)v15, (_DWORD)v16))
      {
        v3 = (FILE *)*MEMORY[0x1E0C80C10];
        v4 = "A3D appears to be malformed, it claims one of its textures ends after more than SIZE_MAX bytes.\n";
        v5 = 96;
        goto LABEL_12;
      }
      if (v16 + v15 > (unint64_t)a2)
      {
        v3 = (FILE *)*MEMORY[0x1E0C80C10];
        v4 = "A3D appears to be malformed, there aren't enough bytes for one of its textures.\n";
        v5 = 80;
        goto LABEL_12;
      }
    }
    v11 = (unsigned int *)((char *)v11 + 145);
    --v12;
  }
  while (v12);
  v18 = v8 + 14;
  if (v10 < 2)
  {
    v19 = 0;
    v17 = v18;
LABEL_37:
    v24 = v10 - v19;
    v25 = (unsigned int *)((char *)this + 145 * v19 + 27);
    do
    {
      v26 = v17 + *(unsigned int *)((char *)v25 - 9);
      v27 = *v25;
      v25 = (unsigned int *)((char *)v25 + 145);
      v17 = v26 + v27 + 145;
      --v24;
    }
    while (v24);
    goto LABEL_39;
  }
  v20 = 0;
  v19 = (unsigned __int16)v10 & 0xFFFE;
  v21 = (unsigned int *)((char *)this + 163);
  v22 = v19;
  v23 = v18;
  do
  {
    v23 += *(unsigned int *)((char *)v21 - 145) + (unint64_t)*(v21 - 34) + 145;
    v20 += *v21 + (unint64_t)*(unsigned int *)((char *)v21 + 9) + 145;
    v21 = (unsigned int *)((char *)v21 + 290);
    v22 -= 2;
  }
  while (v22);
  v17 = v20 + v23;
  if (v19 != v10)
    goto LABEL_37;
LABEL_39:
  if (v10 < 2)
  {
    v28 = 0;
LABEL_44:
    v32 = v10 - v28;
    v33 = (unsigned int *)((char *)this + 145 * v28 + 27);
    do
    {
      v34 = v18 + *(unsigned int *)((char *)v33 - 9);
      v35 = *v33;
      v33 = (unsigned int *)((char *)v33 + 145);
      v18 = v34 + v35 + 145;
      --v32;
    }
    while (v32);
    goto LABEL_46;
  }
  v29 = 0;
  v28 = (unsigned __int16)v10 & 0xFFFE;
  v30 = (unsigned int *)((char *)this + 163);
  v31 = v28;
  do
  {
    v18 += *(unsigned int *)((char *)v30 - 145) + (unint64_t)*(v30 - 34) + 145;
    v29 += *v30 + (unint64_t)*(unsigned int *)((char *)v30 + 9) + 145;
    v30 = (unsigned int *)((char *)v30 + 290);
    v31 -= 2;
  }
  while (v31);
  v18 += v29;
  if (v28 != v10)
    goto LABEL_44;
LABEL_46:
  if (v18 < (unint64_t)a2)
  {
    v36 = *((unsigned __int8 *)this + v18);
    if (*((_BYTE *)this + v18))
    {
      if (v36 > (-2 - v17) / 0x11uLL)
      {
        v3 = (FILE *)*MEMORY[0x1E0C80C10];
        v4 = "A3D appears to be malformed, it claims its metadata headers end after more than SIZE_MAX bytes.\n";
        v5 = 96;
        goto LABEL_12;
      }
      if (v17 + 17 * v36 + 1 <= (unint64_t)a2)
      {
        v37 = (unsigned int *)((char *)this + v17 + 6);
        while (*v37 + (unint64_t)*(v37 - 1) <= (unint64_t)a2)
        {
          v37 = (unsigned int *)((char *)v37 + 17);
          if (!--v36)
            goto LABEL_55;
        }
        v3 = (FILE *)*MEMORY[0x1E0C80C10];
        v4 = "A3D appears to be malformed, there aren't enough bytes for its metadata.\n";
        v5 = 73;
        goto LABEL_12;
      }
      v3 = (FILE *)*MEMORY[0x1E0C80C10];
      v4 = "A3D appears to be malformed, there aren't enough bytes for its metadata headers.\n";
      goto LABEL_18;
    }
  }
LABEL_55:
  result = malloc_type_malloc(0x20uLL, 0x1070040A47808ACuLL);
  if (result)
  {
    *result = this;
    result[1] = a2;
    result[2] = 0;
    result[3] = 0;
  }
  return result;
}

void geo::A3DFileDelete(geo *this, void *a2)
{
  void *v3;

  if (this)
  {
    v3 = (void *)*((_QWORD *)this + 3);
    if (v3)
      free(v3);
    free(this);
  }
}

unsigned int *geo::A3DGetShadows(unsigned int *result, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  unsigned int v26;
  unint64_t v27;
  BOOL v28;
  char *v29;
  unint64_t v30;
  unint64_t *v31;
  unsigned int *v32;
  unint64_t v33;

  if (!result)
    return result;
  v5 = result;
  v6 = result[2] + 14;
  v7 = *((unsigned __int16 *)result + 6);
  v8 = v6;
  if (*((_WORD *)result + 6))
  {
    if ((_DWORD)v7 == 1)
    {
      v9 = 0;
      v8 = result[2] + 14;
LABEL_8:
      v14 = v7 - v9;
      v15 = (unsigned int *)((char *)result + 145 * v9 + 27);
      do
      {
        v16 = v8 + *(unsigned int *)((char *)v15 - 9);
        v17 = *v15;
        v15 = (unsigned int *)((char *)v15 + 145);
        v8 = v16 + v17 + 145;
        --v14;
      }
      while (v14);
      goto LABEL_10;
    }
    v10 = 0;
    v9 = (unsigned __int16)v7 & 0xFFFE;
    v11 = (unsigned int *)((char *)result + 163);
    v12 = v9;
    v13 = result[2] + 14;
    do
    {
      v13 += *(unsigned int *)((char *)v11 - 145) + (unint64_t)*(v11 - 34) + 145;
      v10 += *v11 + (unint64_t)*(unsigned int *)((char *)v11 + 9) + 145;
      v11 = (unsigned int *)((char *)v11 + 290);
      v12 -= 2;
    }
    while (v12);
    v8 = v10 + v13;
    if (v9 != v7)
      goto LABEL_8;
  }
LABEL_10:
  if (v8 >= a2)
    return result;
  v18 = *((unsigned __int8 *)result + v8);
  if (!*((_BYTE *)result + v8))
    return result;
  if (!*((_WORD *)result + 6))
    goto LABEL_20;
  if ((_DWORD)v7 == 1)
  {
    v19 = 0;
  }
  else
  {
    v20 = 0;
    v19 = (unsigned __int16)v7 & 0xFFFE;
    v21 = (unsigned int *)((char *)result + 163);
    v22 = v19;
    do
    {
      v6 += *(unsigned int *)((char *)v21 - 145) + (unint64_t)*(v21 - 34) + 145;
      v20 += *v21 + (unint64_t)*(unsigned int *)((char *)v21 + 9) + 145;
      v21 = (unsigned int *)((char *)v21 + 290);
      v22 -= 2;
    }
    while (v22);
    v6 += v20;
    if (v19 == v7)
      goto LABEL_20;
  }
  v23 = v7 - v19;
  v24 = (unsigned int *)((char *)result + 145 * v19 + 27);
  do
  {
    v25 = v6 + *(unsigned int *)((char *)v24 - 9);
    v26 = *v24;
    v24 = (unsigned int *)((char *)v24 + 145);
    v6 = v25 + v26 + 145;
    --v23;
  }
  while (v23);
LABEL_20:
  v27 = v6 + 1;
  v28 = v27 >= a2;
  if (v27 >= a2)
    v29 = 0;
  else
    v29 = (char *)result + v27;
  if (!v28)
  {
    v30 = 0;
    v31 = (unint64_t *)(a4 + 8);
    v32 = (unsigned int *)(v29 + 5);
    do
    {
      if (!*((_BYTE *)v32 - 5))
      {
        result = (unsigned int *)memcpy((void *)(a3 + 8 * v30), (char *)v5 + *(v32 - 1), *v32);
        v33 = (unint64_t)*v32 >> 3;
        *(v31 - 1) = v30;
        *v31 = v33;
        v30 += v33;
      }
      v31 += 2;
      v32 = (unsigned int *)((char *)v32 + 17);
      --v18;
    }
    while (v18);
  }
  return result;
}

uint64_t geo::prepareAlignedVertices(geo *this, void *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  uint64_t v6;

  v2 = *(_QWORD *)this;
  v3 = *(unsigned int *)(*(_QWORD *)this + 8);
  *((_QWORD *)this + 2) = v3 >> 5;
  if (v3 < 0x20)
    return 0;
  v6 = *(unsigned int *)(v2 + 4);
  result = (uint64_t)malloc_type_malloc(32 * (v3 >> 5), 0x1000040E0EAB150uLL);
  *((_QWORD *)this + 3) = result;
  if (result)
  {
    memcpy((void *)result, (const void *)(v2 + v6), 32 * *((_QWORD *)this + 2));
    return 1;
  }
  return result;
}

uint64_t geo::A3DGetMetadataHeaderCount(geo *this, const unsigned __int8 *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unint64_t v10;
  unsigned int v11;

  v2 = *((unsigned int *)this + 2) + 14;
  v3 = *((unsigned __int16 *)this + 6);
  if (!*((_WORD *)this + 6))
    goto LABEL_9;
  if ((_DWORD)v3 == 1)
  {
    v4 = 0;
  }
  else
  {
    v5 = 0;
    v4 = (unsigned __int16)v3 & 0xFFFE;
    v6 = (unsigned int *)((char *)this + 163);
    v7 = v4;
    do
    {
      v2 += *(unsigned int *)((char *)v6 - 145) + (unint64_t)*(v6 - 34) + 145;
      v5 += *v6 + (unint64_t)*(unsigned int *)((char *)v6 + 9) + 145;
      v6 = (unsigned int *)((char *)v6 + 290);
      v7 -= 2;
    }
    while (v7);
    v2 += v5;
    if (v4 == v3)
      goto LABEL_9;
  }
  v8 = v3 - v4;
  v9 = (unsigned int *)((char *)this + 145 * v4 + 27);
  do
  {
    v10 = v2 + *(unsigned int *)((char *)v9 - 9);
    v11 = *v9;
    v9 = (unsigned int *)((char *)v9 + 145);
    v2 = v10 + v11 + 145;
    --v8;
  }
  while (v8);
LABEL_9:
  if (v2 >= (unint64_t)a2)
    return 0;
  else
    return *((unsigned __int8 *)this + v2);
}

uint64_t geo::A3DGetMetadataHeaders(geo *this, const unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;

  v2 = *((unsigned int *)this + 2) + 14;
  v3 = *((unsigned __int16 *)this + 6);
  if (!*((_WORD *)this + 6))
    goto LABEL_9;
  if ((_DWORD)v3 == 1)
  {
    v4 = 0;
  }
  else
  {
    v5 = 0;
    v4 = (unsigned __int16)v3 & 0xFFFE;
    v6 = (unsigned int *)((char *)this + 163);
    v7 = v4;
    do
    {
      v2 += *(unsigned int *)((char *)v6 - 145) + (unint64_t)*(v6 - 34) + 145;
      v5 += *v6 + (unint64_t)*(unsigned int *)((char *)v6 + 9) + 145;
      v6 = (unsigned int *)((char *)v6 + 290);
      v7 -= 2;
    }
    while (v7);
    v2 += v5;
    if (v4 == v3)
      goto LABEL_9;
  }
  v8 = v3 - v4;
  v9 = (unsigned int *)((char *)this + 145 * v4 + 27);
  do
  {
    v10 = v2 + *(unsigned int *)((char *)v9 - 9);
    v11 = *v9;
    v9 = (unsigned int *)((char *)v9 + 145);
    v2 = v10 + v11 + 145;
    --v8;
  }
  while (v8);
LABEL_9:
  v12 = v2 + 1;
  if (v12 >= (unint64_t)a2)
    return 0;
  else
    return (uint64_t)this + v12;
}

CFTimeInterval CACurrentMediaTime(void)
{
  CFTimeInterval result;

  MEMORY[0x1E0CD2388]();
  return result;
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  CFAbsoluteTime result;

  MEMORY[0x1E0C97C58]();
  return result;
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
  MEMORY[0x1E0C97CF8](theArray, value);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x1E0C97D38](allocator, capacity, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1E0C97D60](theArray);
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1E0C97D98](theArray, idx);
}

CFAttributedStringRef CFAttributedStringCreate(CFAllocatorRef alloc, CFStringRef str, CFDictionaryRef attributes)
{
  return (CFAttributedStringRef)MEMORY[0x1E0C97DF0](alloc, str, attributes);
}

CFMutableAttributedStringRef CFAttributedStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength)
{
  return (CFMutableAttributedStringRef)MEMORY[0x1E0C97E00](alloc, maxLength);
}

CFMutableAttributedStringRef CFAttributedStringCreateMutableCopy(CFAllocatorRef alloc, CFIndex maxLength, CFAttributedStringRef aStr)
{
  return (CFMutableAttributedStringRef)MEMORY[0x1E0C97E08](alloc, maxLength, aStr);
}

CFIndex CFAttributedStringGetLength(CFAttributedStringRef aStr)
{
  return MEMORY[0x1E0C97E48](aStr);
}

CFStringRef CFAttributedStringGetString(CFAttributedStringRef aStr)
{
  return (CFStringRef)MEMORY[0x1E0C97E50](aStr);
}

void CFAttributedStringReplaceString(CFMutableAttributedStringRef aStr, CFRange range, CFStringRef replacement)
{
  MEMORY[0x1E0C97E70](aStr, range.location, range.length, replacement);
}

void CFAttributedStringSetAttribute(CFMutableAttributedStringRef aStr, CFRange range, CFStringRef attrName, CFTypeRef value)
{
  MEMORY[0x1E0C97E78](aStr, range.location, range.length, attrName, value);
}

void CFAttributedStringSetAttributes(CFMutableAttributedStringRef aStr, CFRange range, CFDictionaryRef replacement, Boolean clearOtherAttributes)
{
  MEMORY[0x1E0C97E80](aStr, range.location, range.length, replacement, clearOtherAttributes);
}

CFCharacterSetRef CFCharacterSetGetPredefined(CFCharacterSetPredefinedSet theSetIdentifier)
{
  return (CFCharacterSetRef)MEMORY[0x1E0C982F0](theSetIdentifier);
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x1E0C983A0](allocator, bytes, length);
}

void CFDataGetBytes(CFDataRef theData, CFRange range, UInt8 *buffer)
{
  MEMORY[0x1E0C983F0](theData, range.location, range.length, buffer);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x1E0C983F8](theData);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x1E0C98530](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0C98550](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x1E0C985A8]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1E0C985B8](theDict, key);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98610](theDict, key, value);
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x1E0C98620](cf1, cf2);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1E0C98738](cf);
}

CFHashCode CFHash(CFTypeRef cf)
{
  return MEMORY[0x1E0C98758](cf);
}

CFLocaleRef CFLocaleCreate(CFAllocatorRef allocator, CFLocaleIdentifier localeIdentifier)
{
  return (CFLocaleRef)MEMORY[0x1E0C98798](allocator, localeIdentifier);
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
  MEMORY[0x1E0C988B0](center, observer, callBack, name, object, suspensionBehavior);
}

CFNotificationCenterRef CFNotificationCenterGetLocalCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1E0C988D0]();
}

void CFNotificationCenterRemoveEveryObserver(CFNotificationCenterRef center, const void *observer)
{
  MEMORY[0x1E0C988F0](center, observer);
}

CFComparisonResult CFNumberCompare(CFNumberRef number, CFNumberRef otherNumber, void *context)
{
  return MEMORY[0x1E0C98910](number, otherNumber, context);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1E0C98928](allocator, theType, valuePtr);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x1E0C989B8]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x1E0C989C0](number, theType, valuePtr);
}

Boolean CFNumberIsFloatType(CFNumberRef number)
{
  return MEMORY[0x1E0C989D0](number);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x1E0C98BC0](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1E0C98BD0](cf);
}

void CFRunLoopAddSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
  MEMORY[0x1E0C98BF8](rl, source, mode);
}

CFRunLoopRef CFRunLoopGetMain(void)
{
  return (CFRunLoopRef)MEMORY[0x1E0C98C40]();
}

void CFSetAddValue(CFMutableSetRef theSet, const void *value)
{
  MEMORY[0x1E0C98D70](theSet, value);
}

CFMutableSetRef CFSetCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFSetCallBacks *callBacks)
{
  return (CFMutableSetRef)MEMORY[0x1E0C98D98](allocator, capacity, callBacks);
}

void CFSetRemoveValue(CFMutableSetRef theSet, const void *value)
{
  MEMORY[0x1E0C98DE0](theSet, value);
}

void CFStringCapitalize(CFMutableStringRef theString, CFLocaleRef locale)
{
  MEMORY[0x1E0C98F00](theString, locale);
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1E0C98F10](theString1, theString2, compareOptions);
}

CFMutableStringRef CFStringCreateMutableCopy(CFAllocatorRef alloc, CFIndex maxLength, CFStringRef theString)
{
  return (CFMutableStringRef)MEMORY[0x1E0C98F98](alloc, maxLength, theString);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1E0C98FD0](alloc, cStr, *(_QWORD *)&encoding);
}

CFStringRef CFStringCreateWithSubstring(CFAllocatorRef alloc, CFStringRef str, CFRange range)
{
  return (CFStringRef)MEMORY[0x1E0C99030](alloc, str, range.location, range.length);
}

CFIndex CFStringFindAndReplace(CFMutableStringRef theString, CFStringRef stringToFind, CFStringRef replacementString, CFRange rangeToSearch, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1E0C99058](theString, stringToFind, replacementString, rangeToSearch.location, rangeToSearch.length, compareOptions);
}

Boolean CFStringFindCharacterFromSet(CFStringRef theString, CFCharacterSetRef theSet, CFRange rangeToSearch, CFStringCompareFlags searchOptions, CFRange *result)
{
  return MEMORY[0x1E0C99060](theString, theSet, rangeToSearch.location, rangeToSearch.length, searchOptions, result);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x1E0C99098](theString, buffer, bufferSize, *(_QWORD *)&encoding);
}

UniChar CFStringGetCharacterAtIndex(CFStringRef theString, CFIndex idx)
{
  return MEMORY[0x1E0C990B0](theString, idx);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x1E0C99100](theString);
}

CFRange CFStringGetRangeOfComposedCharactersAtIndex(CFStringRef theString, CFIndex theIndex)
{
  CFIndex v2;
  CFIndex v3;
  CFRange result;

  v2 = MEMORY[0x1E0C99160](theString, theIndex);
  result.length = v3;
  result.location = v2;
  return result;
}

void CFStringLowercase(CFMutableStringRef theString, CFLocaleRef locale)
{
  MEMORY[0x1E0C991D0](theString, locale);
}

void CFStringUppercase(CFMutableStringRef theString, CFLocaleRef locale)
{
  MEMORY[0x1E0C99260](theString, locale);
}

CFURLRef CFURLCreateWithFileSystemPath(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1E0C99420](allocator, filePath, pathStyle, isDirectory);
}

BOOL CGAffineTransformEqualToTransform(CGAffineTransform *t1, CGAffineTransform *t2)
{
  return MEMORY[0x1E0C9BAA0](t1, t2);
}

CGAffineTransform *__cdecl CGAffineTransformInvert(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BAB0](retstr, t);
}

CGAffineTransform *__cdecl CGAffineTransformMakeScale(CGAffineTransform *__return_ptr retstr, CGFloat sx, CGFloat sy)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BAD8](retstr, sx, sy);
}

CGAffineTransform *__cdecl CGAffineTransformRotate(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t, CGFloat angle)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BAF0](retstr, t, angle);
}

CGAffineTransform *__cdecl CGAffineTransformScale(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t, CGFloat sx, CGFloat sy)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BAF8](retstr, t, sx, sy);
}

CGAffineTransform *__cdecl CGAffineTransformTranslate(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t, CGFloat tx, CGFloat ty)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BB00](retstr, t, tx, ty);
}

CGContextRef CGBitmapContextCreate(void *data, size_t width, size_t height, size_t bitsPerComponent, size_t bytesPerRow, CGColorSpaceRef space, uint32_t bitmapInfo)
{
  return (CGContextRef)MEMORY[0x1E0C9BB10](data, width, height, bitsPerComponent, bytesPerRow, space, *(_QWORD *)&bitmapInfo);
}

CGImageRef CGBitmapContextCreateImage(CGContextRef context)
{
  return (CGImageRef)MEMORY[0x1E0C9BB20](context);
}

size_t CGBitmapContextGetBytesPerRow(CGContextRef context)
{
  return MEMORY[0x1E0C9BB60](context);
}

void *__cdecl CGBitmapContextGetData(CGContextRef context)
{
  return (void *)MEMORY[0x1E0C9BB70](context);
}

size_t CGBitmapContextGetHeight(CGContextRef context)
{
  return MEMORY[0x1E0C9BB78](context);
}

size_t CGBitmapContextGetWidth(CGContextRef context)
{
  return MEMORY[0x1E0C9BB80](context);
}

uint64_t CGBitmapGetAlignedBytesPerRow()
{
  return MEMORY[0x1E0C9BB98]();
}

CGColorRef CGColorCreate(CGColorSpaceRef space, const CGFloat *components)
{
  return (CGColorRef)MEMORY[0x1E0C9BC78](space, components);
}

CGColorRef CGColorCreateCopyByMatchingToColorSpace(CGColorSpaceRef a1, CGColorRenderingIntent intent, CGColorRef color, CFDictionaryRef options)
{
  return (CGColorRef)MEMORY[0x1E0C9BC88](a1, *(_QWORD *)&intent, color, options);
}

BOOL CGColorEqualToColor(CGColorRef color1, CGColorRef color2)
{
  return MEMORY[0x1E0C9BCD8](color1, color2);
}

CGFloat CGColorGetAlpha(CGColorRef color)
{
  CGFloat result;

  MEMORY[0x1E0C9BCF8](color);
  return result;
}

CGColorSpaceRef CGColorGetColorSpace(CGColorRef color)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BD00](color);
}

const CGFloat *__cdecl CGColorGetComponents(CGColorRef color)
{
  return (const CGFloat *)MEMORY[0x1E0C9BD08](color);
}

size_t CGColorGetNumberOfComponents(CGColorRef color)
{
  return MEMORY[0x1E0C9BD20](color);
}

void CGColorRelease(CGColorRef color)
{
  MEMORY[0x1E0C9BD60](color);
}

CGColorRef CGColorRetain(CGColorRef color)
{
  return (CGColorRef)MEMORY[0x1E0C9BD68](color);
}

CGColorSpaceRef CGColorSpaceCreateDeviceGray(void)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BDE8]();
}

CGColorSpaceRef CGColorSpaceCreateDeviceRGB(void)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BDF0]();
}

CGColorSpaceRef CGColorSpaceCreateWithName(CFStringRef name)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BE50](name);
}

CGColorSpaceRef CGColorSpaceGetBaseColorSpace(CGColorSpaceRef space)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BE80](space);
}

void CGColorSpaceGetColorTable(CGColorSpaceRef space, uint8_t *table)
{
  MEMORY[0x1E0C9BEA0](space, table);
}

size_t CGColorSpaceGetColorTableCount(CGColorSpaceRef space)
{
  return MEMORY[0x1E0C9BEA8](space);
}

CGColorSpaceModel CGColorSpaceGetModel(CGColorSpaceRef space)
{
  return MEMORY[0x1E0C9BEC8](space);
}

CFStringRef CGColorSpaceGetName(CGColorSpaceRef space)
{
  return (CFStringRef)MEMORY[0x1E0C9BED0](space);
}

size_t CGColorSpaceGetNumberOfComponents(CGColorSpaceRef space)
{
  return MEMORY[0x1E0C9BED8](space);
}

void CGColorSpaceRelease(CGColorSpaceRef space)
{
  MEMORY[0x1E0C9BF30](space);
}

CGColorSpaceRef CGColorSpaceRetain(CGColorSpaceRef space)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BF38](space);
}

void CGContextAddArc(CGContextRef c, CGFloat x, CGFloat y, CGFloat radius, CGFloat startAngle, CGFloat endAngle, int clockwise)
{
  MEMORY[0x1E0C9BFB0](c, *(_QWORD *)&clockwise, x, y, radius, startAngle, endAngle);
}

void CGContextAddArcToPoint(CGContextRef c, CGFloat x1, CGFloat y1, CGFloat x2, CGFloat y2, CGFloat radius)
{
  MEMORY[0x1E0C9BFB8](c, x1, y1, x2, y2, radius);
}

void CGContextAddEllipseInRect(CGContextRef c, CGRect rect)
{
  MEMORY[0x1E0C9BFC8](c, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGContextAddLineToPoint(CGContextRef c, CGFloat x, CGFloat y)
{
  MEMORY[0x1E0C9BFD0](c, x, y);
}

void CGContextAddPath(CGContextRef c, CGPathRef path)
{
  MEMORY[0x1E0C9BFD8](c, path);
}

void CGContextBeginPath(CGContextRef c)
{
  MEMORY[0x1E0C9C000](c);
}

void CGContextBeginTransparencyLayer(CGContextRef c, CFDictionaryRef auxiliaryInfo)
{
  MEMORY[0x1E0C9C008](c, auxiliaryInfo);
}

uint64_t CGContextClear()
{
  return MEMORY[0x1E0C9C018]();
}

void CGContextClearRect(CGContextRef c, CGRect rect)
{
  MEMORY[0x1E0C9C020](c, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGContextClip(CGContextRef c)
{
  MEMORY[0x1E0C9C028](c);
}

void CGContextClipToMask(CGContextRef c, CGRect rect, CGImageRef mask)
{
  MEMORY[0x1E0C9C030](c, mask, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGContextClosePath(CGContextRef c)
{
  MEMORY[0x1E0C9C048](c);
}

void CGContextConcatCTM(CGContextRef c, CGAffineTransform *transform)
{
  MEMORY[0x1E0C9C050](c, transform);
}

void CGContextDrawImage(CGContextRef c, CGRect rect, CGImageRef image)
{
  MEMORY[0x1E0C9C170](c, image, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGContextDrawLinearGradient(CGContextRef c, CGGradientRef gradient, CGPoint startPoint, CGPoint endPoint, CGGradientDrawingOptions options)
{
  MEMORY[0x1E0C9C198](c, gradient, *(_QWORD *)&options, (__n128)startPoint, *(__n128 *)&startPoint.y, (__n128)endPoint, *(__n128 *)&endPoint.y);
}

void CGContextDrawRadialGradient(CGContextRef c, CGGradientRef gradient, CGPoint startCenter, CGFloat startRadius, CGPoint endCenter, CGFloat endRadius, CGGradientDrawingOptions options)
{
  MEMORY[0x1E0C9C1D0](c, gradient, *(_QWORD *)&options, (__n128)startCenter, *(__n128 *)&startCenter.y, startRadius, (__n128)endCenter, *(__n128 *)&endCenter.y, endRadius);
}

void CGContextEOClip(CGContextRef c)
{
  MEMORY[0x1E0C9C1E8](c);
}

void CGContextEOFillPath(CGContextRef c)
{
  MEMORY[0x1E0C9C1F0](c);
}

void CGContextEndTransparencyLayer(CGContextRef c)
{
  MEMORY[0x1E0C9C200](c);
}

void CGContextFillEllipseInRect(CGContextRef c, CGRect rect)
{
  MEMORY[0x1E0C9C210](c, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGContextFillPath(CGContextRef c)
{
  MEMORY[0x1E0C9C218](c);
}

void CGContextFillRect(CGContextRef c, CGRect rect)
{
  MEMORY[0x1E0C9C220](c, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

uint64_t CGContextGetBaseCTM()
{
  return MEMORY[0x1E0C9C240]();
}

CGRect CGContextGetPathBoundingBox(CGContextRef c)
{
  double v1;
  double v2;
  double v3;
  double v4;
  CGRect result;

  MEMORY[0x1E0C9C2D0](c);
  result.size.height = v4;
  result.size.width = v3;
  result.origin.y = v2;
  result.origin.x = v1;
  return result;
}

void CGContextMoveToPoint(CGContextRef c, CGFloat x, CGFloat y)
{
  MEMORY[0x1E0C9C330](c, x, y);
}

void CGContextRelease(CGContextRef c)
{
  MEMORY[0x1E0C9C340](c);
}

void CGContextReplacePathWithStrokedPath(CGContextRef c)
{
  MEMORY[0x1E0C9C350](c);
}

void CGContextResetClip(CGContextRef c)
{
  MEMORY[0x1E0C9C360](c);
}

void CGContextRestoreGState(CGContextRef c)
{
  MEMORY[0x1E0C9C370](c);
}

CGContextRef CGContextRetain(CGContextRef c)
{
  return (CGContextRef)MEMORY[0x1E0C9C378](c);
}

void CGContextRotateCTM(CGContextRef c, CGFloat angle)
{
  MEMORY[0x1E0C9C380](c, angle);
}

void CGContextSaveGState(CGContextRef c)
{
  MEMORY[0x1E0C9C388](c);
}

void CGContextScaleCTM(CGContextRef c, CGFloat sx, CGFloat sy)
{
  MEMORY[0x1E0C9C390](c, sx, sy);
}

void CGContextSetAllowsAntialiasing(CGContextRef c, BOOL allowsAntialiasing)
{
  MEMORY[0x1E0C9C398](c, allowsAntialiasing);
}

void CGContextSetAlpha(CGContextRef c, CGFloat alpha)
{
  MEMORY[0x1E0C9C3B8](c, alpha);
}

uint64_t CGContextSetBaseCTM()
{
  return MEMORY[0x1E0C9C3C0]();
}

void CGContextSetBlendMode(CGContextRef c, CGBlendMode mode)
{
  MEMORY[0x1E0C9C3C8](c, *(_QWORD *)&mode);
}

void CGContextSetFillColorWithColor(CGContextRef c, CGColorRef color)
{
  MEMORY[0x1E0C9C408](c, color);
}

void CGContextSetFont(CGContextRef c, CGFontRef font)
{
  MEMORY[0x1E0C9C420](c, font);
}

void CGContextSetFontSize(CGContextRef c, CGFloat size)
{
  MEMORY[0x1E0C9C438](c, size);
}

void CGContextSetLineCap(CGContextRef c, CGLineCap cap)
{
  MEMORY[0x1E0C9C468](c, *(_QWORD *)&cap);
}

void CGContextSetLineJoin(CGContextRef c, CGLineJoin join)
{
  MEMORY[0x1E0C9C478](c, *(_QWORD *)&join);
}

void CGContextSetLineWidth(CGContextRef c, CGFloat width)
{
  MEMORY[0x1E0C9C480](c, width);
}

void CGContextSetRGBFillColor(CGContextRef c, CGFloat red, CGFloat green, CGFloat blue, CGFloat alpha)
{
  MEMORY[0x1E0C9C4A0](c, red, green, blue, alpha);
}

void CGContextSetRGBStrokeColor(CGContextRef c, CGFloat red, CGFloat green, CGFloat blue, CGFloat alpha)
{
  MEMORY[0x1E0C9C4A8](c, red, green, blue, alpha);
}

void CGContextSetShadowWithColor(CGContextRef c, CGSize offset, CGFloat blur, CGColorRef color)
{
  MEMORY[0x1E0C9C4C0](c, color, (__n128)offset, *(__n128 *)&offset.height, blur);
}

void CGContextSetStrokeColorWithColor(CGContextRef c, CGColorRef color)
{
  MEMORY[0x1E0C9C508](c, color);
}

void CGContextSetTextDrawingMode(CGContextRef c, CGTextDrawingMode mode)
{
  MEMORY[0x1E0C9C520](c, *(_QWORD *)&mode);
}

void CGContextSetTextPosition(CGContextRef c, CGFloat x, CGFloat y)
{
  MEMORY[0x1E0C9C538](c, x, y);
}

void CGContextShowGlyphsAtPositions(CGContextRef c, const CGGlyph *glyphs, const CGPoint *Lpositions, size_t count)
{
  MEMORY[0x1E0C9C548](c, glyphs, Lpositions, count);
}

void CGContextStrokeEllipseInRect(CGContextRef c, CGRect rect)
{
  MEMORY[0x1E0C9C560](c, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGContextStrokePath(CGContextRef c)
{
  MEMORY[0x1E0C9C570](c);
}

void CGContextStrokeRect(CGContextRef c, CGRect rect)
{
  MEMORY[0x1E0C9C578](c, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGContextTranslateCTM(CGContextRef c, CGFloat tx, CGFloat ty)
{
  MEMORY[0x1E0C9C588](c, tx, ty);
}

CFDataRef CGDataProviderCopyData(CGDataProviderRef provider)
{
  return (CFDataRef)MEMORY[0x1E0C9C5D8](provider);
}

CGDataProviderRef CGDataProviderCreateDirect(void *info, off_t size, const CGDataProviderDirectCallbacks *callbacks)
{
  return (CGDataProviderRef)MEMORY[0x1E0C9C5E0](info, size, callbacks);
}

CGDataProviderRef CGDataProviderCreateWithCFData(CFDataRef data)
{
  return (CGDataProviderRef)MEMORY[0x1E0C9C5F0](data);
}

CGDataProviderRef CGDataProviderCreateWithData(void *info, const void *data, size_t size, CGDataProviderReleaseDataCallback releaseData)
{
  return (CGDataProviderRef)MEMORY[0x1E0C9C600](info, data, size, releaseData);
}

void CGDataProviderRelease(CGDataProviderRef provider)
{
  MEMORY[0x1E0C9C638](provider);
}

uint64_t CGFontCacheGetLocalCache()
{
  return MEMORY[0x1E0C9C6C0]();
}

uint64_t CGFontCacheReset()
{
  return MEMORY[0x1E0C9C6C8]();
}

CFStringRef CGFontCopyFullName(CGFontRef font)
{
  return (CFStringRef)MEMORY[0x1E0C9C6E0](font);
}

CFStringRef CGFontCopyGlyphNameForGlyph(CGFontRef font, CGGlyph glyph)
{
  return (CFStringRef)MEMORY[0x1E0C9C6E8](font, glyph);
}

CGFontRef CGFontCreateWithDataProvider(CGDataProviderRef provider)
{
  return (CGFontRef)MEMORY[0x1E0C9C748](provider);
}

uint64_t CGFontDBGetLocal()
{
  return MEMORY[0x1E0C9C790]();
}

uint64_t CGFontDBPurgeAllFonts()
{
  return MEMORY[0x1E0C9C798]();
}

int CGFontGetAscent(CGFontRef font)
{
  return MEMORY[0x1E0C9C7C0](font);
}

int CGFontGetCapHeight(CGFontRef font)
{
  return MEMORY[0x1E0C9C7C8](font);
}

int CGFontGetDescent(CGFontRef font)
{
  return MEMORY[0x1E0C9C7D0](font);
}

BOOL CGFontGetGlyphBBoxes(CGFontRef font, const CGGlyph *glyphs, size_t count, CGRect *bboxes)
{
  return MEMORY[0x1E0C9C7E8](font, glyphs, count, bboxes);
}

uint64_t CGFontGetGlyphsForUnichars()
{
  return MEMORY[0x1E0C9C820]();
}

int CGFontGetUnitsPerEm(CGFontRef font)
{
  return MEMORY[0x1E0C9C878](font);
}

int CGFontGetXHeight(CGFontRef font)
{
  return MEMORY[0x1E0C9C898](font);
}

void CGFontRelease(CGFontRef font)
{
  MEMORY[0x1E0C9C8E0](font);
}

CGFontRef CGFontRetain(CGFontRef font)
{
  return (CGFontRef)MEMORY[0x1E0C9C8E8](font);
}

CGGradientRef CGGradientCreateWithColorComponents(CGColorSpaceRef space, const CGFloat *components, const CGFloat *locations, size_t count)
{
  return (CGGradientRef)MEMORY[0x1E0C9CA80](space, components, locations, count);
}

CGGradientRef CGGradientCreateWithColors(CGColorSpaceRef space, CFArrayRef colors, const CGFloat *locations)
{
  return (CGGradientRef)MEMORY[0x1E0C9CA90](space, colors, locations);
}

uint64_t CGImageBlockGetBytesPerRow()
{
  return MEMORY[0x1E0C9CB08]();
}

uint64_t CGImageBlockGetData()
{
  return MEMORY[0x1E0C9CB10]();
}

uint64_t CGImageBlockSetGetCount()
{
  return MEMORY[0x1E0C9CB40]();
}

uint64_t CGImageBlockSetGetImageBlock()
{
  return MEMORY[0x1E0C9CB48]();
}

uint64_t CGImageBlockSetGetPixelSize()
{
  return MEMORY[0x1E0C9CB50]();
}

uint64_t CGImageBlockSetRelease()
{
  return MEMORY[0x1E0C9CB68]();
}

CGImageRef CGImageCreate(size_t width, size_t height, size_t bitsPerComponent, size_t bitsPerPixel, size_t bytesPerRow, CGColorSpaceRef space, CGBitmapInfo bitmapInfo, CGDataProviderRef provider, const CGFloat *decode, BOOL shouldInterpolate, CGColorRenderingIntent intent)
{
  return (CGImageRef)MEMORY[0x1E0C9CB80](width, height, bitsPerComponent, bitsPerPixel, bytesPerRow, space, *(_QWORD *)&bitmapInfo, provider);
}

CGImageRef CGImageCreateWithImageInRect(CGImageRef image, CGRect rect)
{
  return (CGImageRef)MEMORY[0x1E0C9CBA8](image, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

CGImageRef CGImageCreateWithPNGDataProvider(CGDataProviderRef source, const CGFloat *decode, BOOL shouldInterpolate, CGColorRenderingIntent intent)
{
  return (CGImageRef)MEMORY[0x1E0C9CBD0](source, decode, shouldInterpolate, *(_QWORD *)&intent);
}

void CGImageDestinationAddImage(CGImageDestinationRef idst, CGImageRef image, CFDictionaryRef properties)
{
  MEMORY[0x1E0CBC308](idst, image, properties);
}

CGImageDestinationRef CGImageDestinationCreateWithData(CFMutableDataRef data, CFStringRef type, size_t count, CFDictionaryRef options)
{
  return (CGImageDestinationRef)MEMORY[0x1E0CBC338](data, type, count, options);
}

CGImageDestinationRef CGImageDestinationCreateWithURL(CFURLRef url, CFStringRef type, size_t count, CFDictionaryRef options)
{
  return (CGImageDestinationRef)MEMORY[0x1E0CBC348](url, type, count, options);
}

BOOL CGImageDestinationFinalize(CGImageDestinationRef idst)
{
  return MEMORY[0x1E0CBC358](idst);
}

CGImageAlphaInfo CGImageGetAlphaInfo(CGImageRef image)
{
  return MEMORY[0x1E0C9CBE8](image);
}

CGBitmapInfo CGImageGetBitmapInfo(CGImageRef image)
{
  return MEMORY[0x1E0C9CBF0](image);
}

size_t CGImageGetBitsPerComponent(CGImageRef image)
{
  return MEMORY[0x1E0C9CBF8](image);
}

size_t CGImageGetBitsPerPixel(CGImageRef image)
{
  return MEMORY[0x1E0C9CC00](image);
}

size_t CGImageGetBytesPerRow(CGImageRef image)
{
  return MEMORY[0x1E0C9CC08](image);
}

CGColorSpaceRef CGImageGetColorSpace(CGImageRef image)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9CC20](image);
}

CGDataProviderRef CGImageGetDataProvider(CGImageRef image)
{
  return (CGDataProviderRef)MEMORY[0x1E0C9CC38](image);
}

size_t CGImageGetHeight(CGImageRef image)
{
  return MEMORY[0x1E0C9CC60](image);
}

uint64_t CGImageGetImageProvider()
{
  return MEMORY[0x1E0C9CC70]();
}

uint64_t CGImageGetProperty()
{
  return MEMORY[0x1E0C9CC98]();
}

size_t CGImageGetWidth(CGImageRef image)
{
  return MEMORY[0x1E0C9CCD0](image);
}

uint64_t CGImageProviderCopyImageBlockSetWithOptions()
{
  return MEMORY[0x1E0C9CD20]();
}

void CGImageRelease(CGImageRef image)
{
  MEMORY[0x1E0C9CDA0](image);
}

CGImageRef CGImageRetain(CGImageRef image)
{
  return (CGImageRef)MEMORY[0x1E0C9CDA8](image);
}

uint64_t CGImageSetProperty()
{
  return MEMORY[0x1E0C9CDC0]();
}

CGImageRef CGImageSourceCreateImageAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CGImageRef)MEMORY[0x1E0CBC568](isrc, index, options);
}

CGImageSourceRef CGImageSourceCreateWithData(CFDataRef data, CFDictionaryRef options)
{
  return (CGImageSourceRef)MEMORY[0x1E0CBC590](data, options);
}

CGImageSourceRef CGImageSourceCreateWithDataProvider(CGDataProviderRef provider, CFDictionaryRef options)
{
  return (CGImageSourceRef)MEMORY[0x1E0CBC5A0](provider, options);
}

CGImageSourceRef CGImageSourceCreateWithURL(CFURLRef url, CFDictionaryRef options)
{
  return (CGImageSourceRef)MEMORY[0x1E0CBC5C0](url, options);
}

size_t CGImageSourceGetCount(CGImageSourceRef isrc)
{
  return MEMORY[0x1E0CBC5F0](isrc);
}

CGImageSourceStatus CGImageSourceGetStatus(CGImageSourceRef isrc)
{
  return MEMORY[0x1E0CBC600](isrc);
}

void CGPathAddArc(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y, CGFloat radius, CGFloat startAngle, CGFloat endAngle, BOOL clockwise)
{
  MEMORY[0x1E0C9D280](path, m, clockwise, x, y, radius, startAngle, endAngle);
}

void CGPathAddCurveToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat cp1x, CGFloat cp1y, CGFloat cp2x, CGFloat cp2y, CGFloat x, CGFloat y)
{
  MEMORY[0x1E0C9D298](path, m, cp1x, cp1y, cp2x, cp2y, x, y);
}

void CGPathAddEllipseInRect(CGMutablePathRef path, const CGAffineTransform *m, CGRect rect)
{
  MEMORY[0x1E0C9D2A0](path, m, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGPathAddLineToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y)
{
  MEMORY[0x1E0C9D2A8](path, m, x, y);
}

void CGPathAddPath(CGMutablePathRef path1, const CGAffineTransform *m, CGPathRef path2)
{
  MEMORY[0x1E0C9D2B8](path1, m, path2);
}

void CGPathAddQuadCurveToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat cpx, CGFloat cpy, CGFloat x, CGFloat y)
{
  MEMORY[0x1E0C9D2C0](path, m, cpx, cpy, x, y);
}

void CGPathAddRect(CGMutablePathRef path, const CGAffineTransform *m, CGRect rect)
{
  MEMORY[0x1E0C9D2C8](path, m, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGPathCloseSubpath(CGMutablePathRef path)
{
  MEMORY[0x1E0C9D310](path);
}

CGMutablePathRef CGPathCreateMutable(void)
{
  return (CGMutablePathRef)MEMORY[0x1E0C9D388]();
}

CGMutablePathRef CGPathCreateMutableCopyByTransformingPath(CGPathRef path, const CGAffineTransform *transform)
{
  return (CGMutablePathRef)MEMORY[0x1E0C9D398](path, transform);
}

CGRect CGPathGetBoundingBox(CGPathRef path)
{
  double v1;
  double v2;
  double v3;
  double v4;
  CGRect result;

  MEMORY[0x1E0C9D3F0](path);
  result.size.height = v4;
  result.size.width = v3;
  result.origin.y = v2;
  result.origin.x = v1;
  return result;
}

CGPoint CGPathGetCurrentPoint(CGPathRef path)
{
  double v1;
  double v2;
  CGPoint result;

  MEMORY[0x1E0C9D3F8](path);
  result.y = v2;
  result.x = v1;
  return result;
}

void CGPathMoveToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y)
{
  MEMORY[0x1E0C9D490](path, m, x, y);
}

void CGPathRelease(CGPathRef path)
{
  MEMORY[0x1E0C9D498](path);
}

CGRect CGRectApplyAffineTransform(CGRect rect, CGAffineTransform *t)
{
  double v2;
  double v3;
  double v4;
  double v5;
  CGRect result;

  MEMORY[0x1E0C9D548](t, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

BOOL CGRectContainsPoint(CGRect rect, CGPoint point)
{
  return MEMORY[0x1E0C9D550]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, (__n128)point, *(__n128 *)&point.y);
}

BOOL CGRectEqualToRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x1E0C9D570]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

CGFloat CGRectGetMaxX(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D588]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxY(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5A0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidX(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5A8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidY(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5B0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinX(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5C0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinY(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5C8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGRect CGRectIntegral(CGRect rect)
{
  double v1;
  double v2;
  double v3;
  double v4;
  CGRect result;

  MEMORY[0x1E0C9D5F0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.height = v4;
  result.size.width = v3;
  result.origin.y = v2;
  result.origin.x = v1;
  return result;
}

BOOL CGRectIsNull(CGRect rect)
{
  return MEMORY[0x1E0C9D618]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

CGRect CGRectOffset(CGRect rect, CGFloat dx, CGFloat dy)
{
  double v3;
  double v4;
  double v5;
  double v6;
  CGRect result;

  MEMORY[0x1E0C9D630]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, dx, dy);
  result.size.height = v6;
  result.size.width = v5;
  result.origin.y = v4;
  result.origin.x = v3;
  return result;
}

uint64_t CMPhotoDecompressionContainerCancelAsyncRequest()
{
  return MEMORY[0x1E0D08D98]();
}

uint64_t CMPhotoDecompressionContainerCopyCGColorSpaceForIndex()
{
  return MEMORY[0x1E0D08DE0]();
}

uint64_t CMPhotoDecompressionContainerCreateImageForIndex()
{
  return MEMORY[0x1E0D08E58]();
}

uint64_t CMPhotoDecompressionContainerDecodeImageForIndexAsync()
{
  return MEMORY[0x1E0D08EB0]();
}

uint64_t CMPhotoDecompressionContainerGetImageCount()
{
  return MEMORY[0x1E0D08F20]();
}

uint64_t CMPhotoDecompressionDetectContainerFormat()
{
  return MEMORY[0x1E0D08FB8]();
}

uint64_t CMPhotoDecompressionDiscardCaches()
{
  return MEMORY[0x1E0D08FC8]();
}

uint64_t CMPhotoDecompressionSessionCreate()
{
  return MEMORY[0x1E0D08FE0]();
}

uint64_t CMPhotoDecompressionSessionCreateContainer()
{
  return MEMORY[0x1E0D08FE8]();
}

uint64_t CMPhotoDecompressionSessionFlushCachedBuffers()
{
  return MEMORY[0x1E0D09000]();
}

uint64_t CMPhotoDecompressionSessionReleaseHardwareResources()
{
  return MEMORY[0x1E0D09010]();
}

uint64_t CMPhotoSurfacePoolCreate()
{
  return MEMORY[0x1E0D09208]();
}

CFCharacterSetRef CTFontCopyCharacterSet(CTFontRef font)
{
  return (CFCharacterSetRef)MEMORY[0x1E0CA7978](font);
}

uint64_t CTFontCopyFeaturesInternal()
{
  return MEMORY[0x1E0CA79A8]();
}

CTFontDescriptorRef CTFontCopyFontDescriptor(CTFontRef font)
{
  return (CTFontDescriptorRef)MEMORY[0x1E0CA79B0](font);
}

CGFontRef CTFontCopyGraphicsFont(CTFontRef font, CTFontDescriptorRef *attributes)
{
  return (CGFontRef)MEMORY[0x1E0CA79C8](font, attributes);
}

CFArrayRef CTFontCopyVariationAxes(CTFontRef font)
{
  return (CFArrayRef)MEMORY[0x1E0CA7A18](font);
}

CTFontRef CTFontCreateCopyWithAttributes(CTFontRef font, CGFloat size, const CGAffineTransform *matrix, CTFontDescriptorRef attributes)
{
  return (CTFontRef)MEMORY[0x1E0CA7A30](font, matrix, attributes, size);
}

CTFontRef CTFontCreateWithFontDescriptor(CTFontDescriptorRef descriptor, CGFloat size, const CGAffineTransform *matrix)
{
  return (CTFontRef)MEMORY[0x1E0CA7A70](descriptor, matrix, size);
}

CTFontRef CTFontCreateWithGraphicsFont(CGFontRef graphicsFont, CGFloat size, const CGAffineTransform *matrix, CTFontDescriptorRef attributes)
{
  return (CTFontRef)MEMORY[0x1E0CA7A80](graphicsFont, matrix, attributes, size);
}

CTFontDescriptorRef CTFontDescriptorCreateCopyWithAttributes(CTFontDescriptorRef original, CFDictionaryRef attributes)
{
  return (CTFontDescriptorRef)MEMORY[0x1E0CA7AB8](original, attributes);
}

CTFontDescriptorRef CTFontDescriptorCreateCopyWithFeature(CTFontDescriptorRef original, CFNumberRef featureTypeIdentifier, CFNumberRef featureSelectorIdentifier)
{
  return (CTFontDescriptorRef)MEMORY[0x1E0CA7AC0](original, featureTypeIdentifier, featureSelectorIdentifier);
}

CTFontDescriptorRef CTFontDescriptorCreateWithAttributes(CFDictionaryRef attributes)
{
  return (CTFontDescriptorRef)MEMORY[0x1E0CA7B00](attributes);
}

CTFontDescriptorRef CTFontDescriptorCreateWithNameAndSize(CFStringRef name, CGFloat size)
{
  return (CTFontDescriptorRef)MEMORY[0x1E0CA7B10](name, size);
}

void CTFontDrawGlyphs(CTFontRef font, const CGGlyph *glyphs, const CGPoint *positions, size_t count, CGContextRef context)
{
  MEMORY[0x1E0CA7B70](font, glyphs, positions, count, context);
}

double CTFontGetAdvancesForGlyphs(CTFontRef font, CTFontOrientation orientation, const CGGlyph *glyphs, CGSize *advances, CFIndex count)
{
  double result;

  MEMORY[0x1E0CA7B98](font, *(_QWORD *)&orientation, glyphs, advances, count);
  return result;
}

CGRect CTFontGetOpticalBoundsForGlyphs(CTFontRef font, const CGGlyph *glyphs, CGRect *boundingRects, CFIndex count, CFOptionFlags options)
{
  double v5;
  double v6;
  double v7;
  double v8;
  CGRect result;

  MEMORY[0x1E0CA7C38](font, glyphs, boundingRects, count, options);
  result.size.height = v8;
  result.size.width = v7;
  result.origin.y = v6;
  result.origin.x = v5;
  return result;
}

CGFloat CTFontGetSize(CTFontRef font)
{
  CGFloat result;

  MEMORY[0x1E0CA7C50](font);
  return result;
}

CTFontSymbolicTraits CTFontGetSymbolicTraits(CTFontRef font)
{
  return MEMORY[0x1E0CA7C60](font);
}

uint64_t CTFontRemoveFromCaches()
{
  return MEMORY[0x1E0CA7D58]();
}

uint64_t CTFontTransformGlyphs()
{
  return MEMORY[0x1E0CA7D88]();
}

void CTFrameDraw(CTFrameRef frame, CGContextRef context)
{
  MEMORY[0x1E0CA7DA0](frame, context);
}

void CTFrameGetLineOrigins(CTFrameRef frame, CFRange range, CGPoint *origins)
{
  MEMORY[0x1E0CA7DA8](frame, range.location, range.length, origins);
}

CFArrayRef CTFrameGetLines(CTFrameRef frame)
{
  return (CFArrayRef)MEMORY[0x1E0CA7DB0](frame);
}

CTFrameRef CTFramesetterCreateFrame(CTFramesetterRef framesetter, CFRange stringRange, CGPathRef path, CFDictionaryRef frameAttributes)
{
  return (CTFrameRef)MEMORY[0x1E0CA7DD8](framesetter, stringRange.location, stringRange.length, path, frameAttributes);
}

CTFramesetterRef CTFramesetterCreateWithAttributedString(CFAttributedStringRef attrString)
{
  return (CTFramesetterRef)MEMORY[0x1E0CA7DE0](attrString);
}

CGSize CTFramesetterSuggestFrameSizeWithConstraints(CTFramesetterRef framesetter, CFRange stringRange, CFDictionaryRef frameAttributes, CGSize constraints, CFRange *fitRange)
{
  double v5;
  double v6;
  CGSize result;

  MEMORY[0x1E0CA7DF8](framesetter, stringRange.location, stringRange.length, frameAttributes, fitRange, (__n128)constraints, *(__n128 *)&constraints.height);
  result.height = v6;
  result.width = v5;
  return result;
}

CTLineRef CTLineCreateJustifiedLine(CTLineRef line, CGFloat justificationFactor, double justificationWidth)
{
  return (CTLineRef)MEMORY[0x1E0CA7E60](line, justificationFactor, justificationWidth);
}

CTLineRef CTLineCreateWithAttributedString(CFAttributedStringRef attrString)
{
  return (CTLineRef)MEMORY[0x1E0CA7E88](attrString);
}

void CTLineDraw(CTLineRef line, CGContextRef context)
{
  MEMORY[0x1E0CA7EA8](line, context);
}

CGRect CTLineGetBoundsWithOptions(CTLineRef line, CTLineBoundsOptions options)
{
  double v2;
  double v3;
  double v4;
  double v5;
  CGRect result;

  MEMORY[0x1E0CA7EC0](line, options);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

CFIndex CTLineGetGlyphCount(CTLineRef line)
{
  return MEMORY[0x1E0CA7ED0](line);
}

CFArrayRef CTLineGetGlyphRuns(CTLineRef line)
{
  return (CFArrayRef)MEMORY[0x1E0CA7ED8](line);
}

CGRect CTLineGetImageBounds(CTLineRef line, CGContextRef context)
{
  double v2;
  double v3;
  double v4;
  double v5;
  CGRect result;

  MEMORY[0x1E0CA7EE0](line, context);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

CFIndex CTLineGetStringIndexForPosition(CTLineRef line, CGPoint position)
{
  return MEMORY[0x1E0CA7EF8](line, (__n128)position, *(__n128 *)&position.y);
}

CFRange CTLineGetStringRange(CTLineRef line)
{
  CFIndex v1;
  CFIndex v2;
  CFRange result;

  v1 = MEMORY[0x1E0CA7F08](line);
  result.length = v2;
  result.location = v1;
  return result;
}

double CTLineGetTypographicBounds(CTLineRef line, CGFloat *ascent, CGFloat *descent, CGFloat *leading)
{
  double result;

  MEMORY[0x1E0CA7F18](line, ascent, descent, leading);
  return result;
}

CFDictionaryRef CTRunGetAttributes(CTRunRef run)
{
  return (CFDictionaryRef)MEMORY[0x1E0CA7FB0](run);
}

CFIndex CTRunGetGlyphCount(CTRunRef run)
{
  return MEMORY[0x1E0CA7FD0](run);
}

void CTRunGetGlyphs(CTRunRef run, CFRange range, CGGlyph *buffer)
{
  MEMORY[0x1E0CA7FE0](run, range.location, range.length, buffer);
}

const CGGlyph *__cdecl CTRunGetGlyphsPtr(CTRunRef run)
{
  return (const CGGlyph *)MEMORY[0x1E0CA7FE8](run);
}

void CTRunGetPositions(CTRunRef run, CFRange range, CGPoint *buffer)
{
  MEMORY[0x1E0CA8008](run, range.location, range.length, buffer);
}

const CGPoint *__cdecl CTRunGetPositionsPtr(CTRunRef run)
{
  return (const CGPoint *)MEMORY[0x1E0CA8010](run);
}

CTRunStatus CTRunGetStatus(CTRunRef run)
{
  return MEMORY[0x1E0CA8020](run);
}

void CTRunGetStringIndices(CTRunRef run, CFRange range, CFIndex *buffer)
{
  MEMORY[0x1E0CA8030](run, range.location, range.length, buffer);
}

void *__cdecl CVPixelBufferGetBaseAddress(CVPixelBufferRef pixelBuffer)
{
  return (void *)MEMORY[0x1E0CA8AE0](pixelBuffer);
}

size_t CVPixelBufferGetBytesPerRow(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1E0CA8AF8](pixelBuffer);
}

size_t CVPixelBufferGetHeight(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1E0CA8B20](pixelBuffer);
}

IOSurfaceRef CVPixelBufferGetIOSurface(CVPixelBufferRef pixelBuffer)
{
  return (IOSurfaceRef)MEMORY[0x1E0CA8B30](pixelBuffer);
}

OSType CVPixelBufferGetPixelFormatType(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1E0CA8B38](pixelBuffer);
}

size_t CVPixelBufferGetPlaneCount(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1E0CA8B40](pixelBuffer);
}

size_t CVPixelBufferGetWidth(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1E0CA8B50](pixelBuffer);
}

CVReturn CVPixelBufferLockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags lockFlags)
{
  return MEMORY[0x1E0CA8B70](pixelBuffer, lockFlags);
}

void CVPixelBufferRelease(CVPixelBufferRef texture)
{
  MEMORY[0x1E0CA8BF0](texture);
}

CVPixelBufferRef CVPixelBufferRetain(CVPixelBufferRef texture)
{
  return (CVPixelBufferRef)MEMORY[0x1E0CA8BF8](texture);
}

CVReturn CVPixelBufferUnlockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags unlockFlags)
{
  return MEMORY[0x1E0CA8C00](pixelBuffer, unlockFlags);
}

uint64_t GEOBearingFromCoordinateToCoordinate()
{
  return MEMORY[0x1E0D26450]();
}

uint64_t GEOCalculateDistance()
{
  return MEMORY[0x1E0D26458]();
}

uint64_t GEOCalculateDistanceHighPrecision()
{
  return MEMORY[0x1E0D26460]();
}

uint64_t GEOConfigGetArray()
{
  return MEMORY[0x1E0D26490]();
}

uint64_t GEOConfigGetBOOL()
{
  return MEMORY[0x1E0D26498]();
}

uint64_t GEOConfigGetDictionary()
{
  return MEMORY[0x1E0D264A8]();
}

uint64_t GEOConfigGetDouble()
{
  return MEMORY[0x1E0D264B0]();
}

uint64_t GEOConfigGetInteger()
{
  return MEMORY[0x1E0D264B8]();
}

uint64_t GEOConfigGetString()
{
  return MEMORY[0x1E0D264C8]();
}

uint64_t GEOConfigGetUInteger()
{
  return MEMORY[0x1E0D264D0]();
}

uint64_t GEOConfigGetUint64()
{
  return MEMORY[0x1E0D264D8]();
}

uint64_t GEOConfigRemoveBlockListener()
{
  return MEMORY[0x1E0D264F0]();
}

uint64_t GEOContourLinesTileKeyMake()
{
  return MEMORY[0x1E0D26528]();
}

uint64_t GEOCoordinate2DForMapPoint()
{
  return MEMORY[0x1E0D26530]();
}

uint64_t GEOCoordinate3DForMapPoint()
{
  return MEMORY[0x1E0D26538]();
}

uint64_t GEOErrorDomain()
{
  return MEMORY[0x1E0D26578]();
}

uint64_t GEOLiveTileKeyMake()
{
  return MEMORY[0x1E0D26618]();
}

uint64_t GEOLocationCoordinate3DLerp()
{
  return MEMORY[0x1E0D26620]();
}

uint64_t GEOMapPoint3DForCoordinate()
{
  return MEMORY[0x1E0D26668]();
}

uint64_t GEOMapPointForCoordinate()
{
  return MEMORY[0x1E0D26670]();
}

uint64_t GEOMapPointsPerMeterAtLatitude()
{
  return MEMORY[0x1E0D26680]();
}

uint64_t GEOMapRectForGEOTileKey()
{
  return MEMORY[0x1E0D266A0]();
}

uint64_t GEOMapRectForMapRegion()
{
  return MEMORY[0x1E0D266A8]();
}

uint64_t GEOMapRectInset()
{
  return MEMORY[0x1E0D266B0]();
}

uint64_t GEOMapRectIntersectsRect()
{
  return MEMORY[0x1E0D266B8]();
}

uint64_t GEOMapRectIsNull()
{
  return MEMORY[0x1E0D266C8]();
}

uint64_t GEOMapRectMakeWithRadialDistance()
{
  return MEMORY[0x1E0D266D0]();
}

uint64_t GEOMetersPerDegreeAtLatitude()
{
  return MEMORY[0x1E0D26708]();
}

uint64_t GEOMuninFrustumFromLensModel()
{
  return MEMORY[0x1E0D26718]();
}

uint64_t GEOMuninMeshTileKeyMake()
{
  return MEMORY[0x1E0D26720]();
}

uint64_t GEOMuninMetadataTileCreate()
{
  return MEMORY[0x1E0D26728]();
}

uint64_t GEOMuninMetadataTileDestroy()
{
  return MEMORY[0x1E0D26730]();
}

uint64_t GEOPolygonSelectionTileKeyMake()
{
  return MEMORY[0x1E0D269F8]();
}

uint64_t GEOPolylineCoordinateAsFullString()
{
  return MEMORY[0x1E0D26A00]();
}

uint64_t GEOPolylineCoordinateAsShortString()
{
  return MEMORY[0x1E0D26A08]();
}

uint64_t GEOPolylineCoordinateCompare()
{
  return MEMORY[0x1E0D26A18]();
}

uint64_t GEOPolylineCoordinateEqualEps()
{
  return MEMORY[0x1E0D26A28]();
}

uint64_t GEOPolylineCoordinateIsInvalid()
{
  return MEMORY[0x1E0D26A50]();
}

uint64_t GEOPolylineCoordinateIsValid()
{
  return MEMORY[0x1E0D26A58]();
}

uint64_t GEOPolylineCoordinateWithinRange()
{
  return MEMORY[0x1E0D26AA0]();
}

uint64_t GEORegionalResourceTileKeyMake()
{
  return MEMORY[0x1E0D26AC0]();
}

uint64_t GEOResetGeoCodecsAllocator()
{
  return MEMORY[0x1E0D26AE0]();
}

uint64_t GEOResourceDevResourcesPath()
{
  return MEMORY[0x1E0D26AE8]();
}

uint64_t GEOResourceFilterScaleForScale()
{
  return MEMORY[0x1E0D26AF0]();
}

uint64_t GEORoadSelectionTileKeyMake()
{
  return MEMORY[0x1E0D26B00]();
}

uint64_t GEOS2TileKeyMake()
{
  return MEMORY[0x1E0D26B10]();
}

uint64_t GEOStringFromTileKey()
{
  return MEMORY[0x1E0D26BB0]();
}

uint64_t GEOTileKeyAssertIsStandard()
{
  return MEMORY[0x1E0D26BC0]();
}

uint64_t GEOTileKeyEquals()
{
  return MEMORY[0x1E0D26BC8]();
}

uint64_t GEOTileKeyHash()
{
  return MEMORY[0x1E0D26BD0]();
}

uint64_t GEOTileKeyMake()
{
  return MEMORY[0x1E0D26BD8]();
}

uint64_t GEOTileKeyMakeEmpty()
{
  return MEMORY[0x1E0D26BE0]();
}

uint64_t GEOTileLoaderClientIdentifier()
{
  return MEMORY[0x1E0D26C00]();
}

uint64_t GEOTransitLineSelectionAdditionalInfoMake()
{
  return MEMORY[0x1E0D26C20]();
}

uint64_t GEOTransitLineSelectionTileKeyMake()
{
  return MEMORY[0x1E0D26C28]();
}

uint64_t GeoCodecsFeatureStyleAttributesCompare()
{
  return MEMORY[0x1E0D26C58]();
}

uint64_t IOSurfaceAcceleratorCreate()
{
  return MEMORY[0x1E0D3A1D0]();
}

uint64_t IOSurfaceAcceleratorGetRunLoopSource()
{
  return MEMORY[0x1E0D3A1E0]();
}

uint64_t IOSurfaceAcceleratorSetCustomFilter()
{
  return MEMORY[0x1E0D3A1F0]();
}

uint64_t IOSurfaceAcceleratorTransformSurface()
{
  return MEMORY[0x1E0D3A200]();
}

IOSurfaceRef IOSurfaceCreate(CFDictionaryRef properties)
{
  return (IOSurfaceRef)MEMORY[0x1E0CBBAF0](properties);
}

void IOSurfaceDecrementUseCount(IOSurfaceRef buffer)
{
  MEMORY[0x1E0CBBB18](buffer);
}

size_t IOSurfaceGetAllocSize(IOSurfaceRef buffer)
{
  return MEMORY[0x1E0CBBB38](buffer);
}

void *__cdecl IOSurfaceGetBaseAddress(IOSurfaceRef buffer)
{
  return (void *)MEMORY[0x1E0CBBB40](buffer);
}

size_t IOSurfaceGetBytesPerElement(IOSurfaceRef buffer)
{
  return MEMORY[0x1E0CBBB80](buffer);
}

size_t IOSurfaceGetBytesPerRow(IOSurfaceRef buffer)
{
  return MEMORY[0x1E0CBBB90](buffer);
}

size_t IOSurfaceGetHeight(IOSurfaceRef buffer)
{
  return MEMORY[0x1E0CBBC28](buffer);
}

OSType IOSurfaceGetPixelFormat(IOSurfaceRef buffer)
{
  return MEMORY[0x1E0CBBC68](buffer);
}

size_t IOSurfaceGetWidth(IOSurfaceRef buffer)
{
  return MEMORY[0x1E0CBBCE0](buffer);
}

void IOSurfaceIncrementUseCount(IOSurfaceRef buffer)
{
  MEMORY[0x1E0CBBD00](buffer);
}

kern_return_t IOSurfaceLock(IOSurfaceRef buffer, IOSurfaceLockOptions options, uint32_t *seed)
{
  return MEMORY[0x1E0CBBD28](buffer, *(_QWORD *)&options, seed);
}

uint64_t IOSurfaceSetOwnership()
{
  return MEMORY[0x1E0CBBE20]();
}

kern_return_t IOSurfaceUnlock(IOSurfaceRef buffer, IOSurfaceLockOptions options, uint32_t *seed)
{
  return MEMORY[0x1E0CBBE88](buffer, *(_QWORD *)&options, seed);
}

uint64_t MGCopyAnswer()
{
  return MEMORY[0x1E0DE2B20]();
}

uint64_t MGGetBoolAnswer()
{
  return MEMORY[0x1E0DE2B50]();
}

id MTLCreateSystemDefaultDevice(void)
{
  return (id)MEMORY[0x1E0CC6980]();
}

uint64_t MapsFeature_AddBlockListener()
{
  return MEMORY[0x1E0D26D18]();
}

uint64_t MapsFeature_IsAvailable_ElevatedPolygons()
{
  return MEMORY[0x1E0D26D20]();
}

uint64_t MapsFeature_IsAvailable_Maps298()
{
  return MEMORY[0x1E0D26D28]();
}

uint64_t MapsFeature_IsAvailable_SSAO()
{
  return MEMORY[0x1E0D26D30]();
}

uint64_t MapsFeature_IsAvailable_ShelbyvilleGlobe()
{
  return MEMORY[0x1E0D26D38]();
}

uint64_t MapsFeature_IsAvailable_ShelbyvilleTerrain()
{
  return MEMORY[0x1E0D26D40]();
}

uint64_t MapsFeature_IsEnabled_ElevatedPolygons()
{
  return MEMORY[0x1E0D26D58]();
}

uint64_t MapsFeature_IsEnabled_HikingiOS()
{
  return MEMORY[0x1E0D26D60]();
}

uint64_t MapsFeature_IsEnabled_Maps298()
{
  return MEMORY[0x1E0D26D80]();
}

uint64_t MapsFeature_IsEnabled_RealTimeEVCharger()
{
  return MEMORY[0x1E0D26DB0]();
}

uint64_t MapsFeature_IsEnabled_ShelbyvilleAdvancedLighting()
{
  return MEMORY[0x1E0D26DC0]();
}

uint64_t MapsFeature_IsEnabled_ShelbyvilleAdvancedWater()
{
  return MEMORY[0x1E0D26DC8]();
}

uint64_t MapsFeature_IsEnabled_ShelbyvilleBuildingHeights()
{
  return MEMORY[0x1E0D26DD0]();
}

uint64_t MapsFeature_IsEnabled_ShelbyvilleColorizedBuildings()
{
  return MEMORY[0x1E0D26DD8]();
}

uint64_t MapsFeature_IsEnabled_ShelbyvilleGlobe()
{
  return MEMORY[0x1E0D26DE0]();
}

uint64_t MapsFeature_IsEnabled_ShelbyvilleRoundedBuildings()
{
  return MEMORY[0x1E0D26DF0]();
}

uint64_t MapsFeature_IsEnabled_ShelbyvilleTerrain()
{
  return MEMORY[0x1E0D26DF8]();
}

uint64_t MapsFeature_IsEnabled_VKMLayout_Flyover()
{
  return MEMORY[0x1E0D26E08]();
}

uint64_t MapsFeature_IsEnabled_VKMLayout_Navigation()
{
  return MEMORY[0x1E0D26E10]();
}

uint64_t MapsFeature_IsEnabled_VKMLayout_SPR()
{
  return MEMORY[0x1E0D26E18]();
}

uint64_t MapsFeature_RemoveBlockListener()
{
  return MEMORY[0x1E0D26E20]();
}

void NSLog(NSString *format, ...)
{
  MEMORY[0x1E0CB2D88](format);
}

SEL NSSelectorFromString(NSString *aSelectorName)
{
  return (SEL)MEMORY[0x1E0CB3190](aSelectorName);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x1E0CB3200](aClass);
}

uint64_t _AXSReduceMotionEnabled()
{
  return MEMORY[0x1E0DDDB20]();
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x1E0C80948](a1, *(_QWORD *)&a2);
}

uint64_t _CFXPCCreateCFObjectFromXPCMessage()
{
  return MEMORY[0x1E0C9A7F0]();
}

uint64_t _CFXPCCreateXPCMessageWithCFObject()
{
  return MEMORY[0x1E0C9A808]();
}

uint64_t _GEOConfigAddBlockListenerForKey()
{
  return MEMORY[0x1E0D277B0]();
}

uint64_t _GEOConfigRegisterStateCaptureFunctions()
{
  return MEMORY[0x1E0D277C8]();
}

uint64_t _GEOMurmurHash3_128()
{
  return MEMORY[0x1E0D277D8]();
}

uint64_t _GEOStateCaptureLog()
{
  return MEMORY[0x1E0D277E8]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x1E0C80A20](exception_object);
}

uint64_t zilch::ReadBitstream::ReadBitstream(zilch::ReadBitstream *this, const unsigned __int8 *a2)
{
  return MEMORY[0x1E0D277F0](this, a2);
}

uint64_t zilch::TrafficDynamicTile::Flow::Flow(zilch::TrafficDynamicTile::Flow *this)
{
  return MEMORY[0x1E0D277F8](this);
}

uint64_t zilch::TrafficDynamicTile::decode(zilch::TrafficDynamicTile *this, zilch::ReadBitstream *a2)
{
  return MEMORY[0x1E0D27800](this, a2);
}

uint64_t zilch::TrafficDynamicTile::TrafficDynamicTile(zilch::TrafficDynamicTile *this)
{
  return MEMORY[0x1E0D27808](this);
}

void zilch::TrafficDynamicTile::~TrafficDynamicTile(zilch::TrafficDynamicTile *this)
{
  MEMORY[0x1E0D27810](this);
}

uint64_t zilch::TrafficSkeletonTile::decode(zilch::TrafficSkeletonTile *this, zilch::ReadBitstream *a2)
{
  return MEMORY[0x1E0D27818](this, a2);
}

uint64_t zilch::TrafficSkeletonTile::TrafficSkeletonTile(zilch::TrafficSkeletonTile *this)
{
  return MEMORY[0x1E0D27820](this);
}

uint64_t geo::MapNode::tile(geo::MapNode *this)
{
  return MEMORY[0x1E0D27828](this);
}

uint64_t geo::MapNode::junction(geo::MapNode *this)
{
  return MEMORY[0x1E0D27830](this);
}

uint64_t zilch::GeoCoordinates::has_elevation(zilch::GeoCoordinates *this)
{
  return MEMORY[0x1E0D27838](this);
}

uint64_t zilch::GeoCoordinates::x(zilch::GeoCoordinates *this)
{
  return MEMORY[0x1E0D27840](this);
}

uint64_t zilch::GeoCoordinates::y(zilch::GeoCoordinates *this)
{
  return MEMORY[0x1E0D27848](this);
}

zilch *zilch::GeoCoordinates::z(zilch::GeoCoordinates *this)
{
  return (zilch *)MEMORY[0x1E0D27850](this);
}

uint64_t zilch::TrafficDynamicTile::incidentCount(zilch::TrafficDynamicTile *this)
{
  return MEMORY[0x1E0D27858](this);
}

uint64_t zilch::TrafficDynamicTile::feedUpdateTimeSeconds(zilch::TrafficDynamicTile *this)
{
  return MEMORY[0x1E0D27860](this);
}

uint64_t zilch::TrafficDynamicTile::flow(zilch::TrafficDynamicTile *this)
{
  return MEMORY[0x1E0D27868](this);
}

uint64_t zilch::TrafficDynamicTile::incident(zilch::TrafficDynamicTile *this)
{
  return MEMORY[0x1E0D27870](this);
}

uint64_t zilch::TrafficDynamicTile::flowCount(zilch::TrafficDynamicTile *this)
{
  return MEMORY[0x1E0D27878](this);
}

uint64_t zilch::TrafficSkeletonTile::size(zilch::TrafficSkeletonTile *this)
{
  return MEMORY[0x1E0D27880](this);
}

uint64_t zilch::TrafficSkeletonTile::operator[]()
{
  return MEMORY[0x1E0D27888]();
}

uint64_t zilch::Latitude::toDegrees(zilch::Latitude *this)
{
  return MEMORY[0x1E0D27890](this);
}

uint64_t zilch::Longitude::toDegrees(zilch::Longitude *this)
{
  return MEMORY[0x1E0D27898](this);
}

const char *__cdecl std::runtime_error::what(const std::runtime_error *this)
{
  return (const char *)MEMORY[0x1E0DE4190](this);
}

std::string::size_type std::string::find(const std::string *this, std::string::value_type __c, std::string::size_type __pos)
{
  return MEMORY[0x1E0DE41C8](this, __c, __pos);
}

std::string::size_type std::string::rfind(const std::string *this, std::string::value_type __c, std::string::size_type __pos)
{
  return MEMORY[0x1E0DE41D0](this, __c, __pos);
}

int std::string::compare(const std::string *this, const std::string::value_type *__s)
{
  return MEMORY[0x1E0DE41D8](this, __s);
}

uint64_t std::stringbuf::str()
{
  return MEMORY[0x1E0DE41F0]();
}

std::string *__cdecl std::locale::name(std::string *__return_ptr retstr, const std::locale *this)
{
  return (std::string *)MEMORY[0x1E0DE4240](retstr, this);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x1E0DE4248](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x1E0DE4258](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x1E0DE4288](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return (std::runtime_error *)MEMORY[0x1E0DE4308](this, a2);
}

void std::runtime_error::~runtime_error(std::runtime_error *this)
{
  MEMORY[0x1E0DE4338](this);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x1E0DE4388](this);
}

void std::__call_once(std::once_flag::_State_type *a1, void *a2, void (__cdecl *a3)(void *))
{
  MEMORY[0x1E0DE43A8](a1, a2, a3);
}

std::__sp_mut *__cdecl std::__get_sp_mut(const void *a1)
{
  return (std::__sp_mut *)MEMORY[0x1E0DE43E0](a1);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x1E0DE43E8](__n);
}

void std::string::__grow_by_and_replace(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add, const std::string::value_type *__p_new_stuff)
{
  MEMORY[0x1E0DE43F8](this, __old_cap, __delta_cap, __old_sz, __n_copy, __n_del, __n_add, __p_new_stuff);
}

std::string *__cdecl std::string::erase(std::string *this, std::string::size_type __pos, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1E0DE4408](this, __pos, __n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1E0DE4420](this, __s);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1E0DE4428](this, __s, __n);
}

std::string *__cdecl std::string::append(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  return (std::string *)MEMORY[0x1E0DE4438](this, __n, __c);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1E0DE4470](this, __pos, __s, __n);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  MEMORY[0x1E0DE4480](this, __n, __c);
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
  MEMORY[0x1E0DE44B8](this, __c);
}

std::string *__cdecl std::string::basic_string(std::string *this, const std::string *__str, std::string::size_type __pos, std::string::size_type __n, std::allocator<char> *__a)
{
  return (std::string *)MEMORY[0x1E0DE44C8](this, __str, __pos, __n, __a);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x1E0DE44D8](this, __str);
}

uint64_t std::filebuf::open()
{
  return MEMORY[0x1E0DE4590]();
}

uint64_t std::filebuf::basic_filebuf()
{
  return MEMORY[0x1E0DE45A8]();
}

uint64_t std::filebuf::~filebuf()
{
  return MEMORY[0x1E0DE45B0]();
}

uint64_t std::istream::get()
{
  return MEMORY[0x1E0DE45C0]();
}

uint64_t std::istream::peek()
{
  return MEMORY[0x1E0DE45C8]();
}

uint64_t std::istream::read()
{
  return MEMORY[0x1E0DE45D0]();
}

uint64_t std::istream::seekg()
{
  return MEMORY[0x1E0DE45E0]();
}

uint64_t std::istream::tellg()
{
  return MEMORY[0x1E0DE45F0]();
}

uint64_t std::istream::sentry::sentry()
{
  return MEMORY[0x1E0DE4608]();
}

uint64_t std::istream::~istream()
{
  return MEMORY[0x1E0DE4628]();
}

uint64_t std::istream::operator>>()
{
  return MEMORY[0x1E0DE4638]();
}

{
  return MEMORY[0x1E0DE4640]();
}

{
  return MEMORY[0x1E0DE4650]();
}

{
  return MEMORY[0x1E0DE4678]();
}

uint64_t std::ostream::put()
{
  return MEMORY[0x1E0DE4698]();
}

uint64_t std::ostream::flush()
{
  return MEMORY[0x1E0DE46A0]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x1E0DE46B0]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x1E0DE46B8]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x1E0DE46C8]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x1E0DE46D0]();
}

{
  return MEMORY[0x1E0DE46E0]();
}

{
  return MEMORY[0x1E0DE46E8]();
}

{
  return MEMORY[0x1E0DE46F8]();
}

{
  return MEMORY[0x1E0DE4700]();
}

{
  return MEMORY[0x1E0DE4708]();
}

{
  return MEMORY[0x1E0DE4710]();
}

{
  return MEMORY[0x1E0DE4718]();
}

{
  return MEMORY[0x1E0DE4720]();
}

{
  return MEMORY[0x1E0DE4728]();
}

{
  return MEMORY[0x1E0DE4730]();
}

{
  return MEMORY[0x1E0DE4738]();
}

std::random_device *__cdecl std::random_device::random_device(std::random_device *this, const std::string *__token)
{
  return (std::random_device *)MEMORY[0x1E0DE4770](this, __token);
}

std::random_device::result_type std::random_device::operator()(std::random_device *this)
{
  return MEMORY[0x1E0DE4780](this);
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x1E0DE47A8]();
}

std::regex_traits<char>::char_class_type std::__get_classname(const char *__s, BOOL __icase)
{
  return MEMORY[0x1E0DE47C8](__s, __icase);
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x1E0DE47E0]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x1E0DE47E8]();
}

void std::recursive_mutex::lock(std::recursive_mutex *this)
{
  MEMORY[0x1E0DE4820](this);
}

void std::recursive_mutex::unlock(std::recursive_mutex *this)
{
  MEMORY[0x1E0DE4828](this);
}

BOOL std::recursive_mutex::try_lock(std::recursive_mutex *this)
{
  return MEMORY[0x1E0DE4830](this);
}

std::recursive_mutex *__cdecl std::recursive_mutex::recursive_mutex(std::recursive_mutex *this)
{
  return (std::recursive_mutex *)MEMORY[0x1E0DE4838](this);
}

void std::recursive_mutex::~recursive_mutex(std::recursive_mutex *this)
{
  MEMORY[0x1E0DE4840](this);
}

void std::__assoc_sub_state::wait(std::__assoc_sub_state *this)
{
  MEMORY[0x1E0DE4870](this);
}

void std::condition_variable::notify_all(std::condition_variable *this)
{
  MEMORY[0x1E0DE4890](this);
}

void std::condition_variable::notify_one(std::condition_variable *this)
{
  MEMORY[0x1E0DE4898](this);
}

void std::condition_variable::wait(std::condition_variable *this, std::unique_lock<std::mutex> *__lk)
{
  MEMORY[0x1E0DE48A8](this, __lk);
}

void std::condition_variable::~condition_variable(std::condition_variable *this)
{
  MEMORY[0x1E0DE48B0](this);
}

void std::__shared_mutex_base::lock_shared(std::__shared_mutex_base *this)
{
  MEMORY[0x1E0DE48B8](this);
}

void std::__shared_mutex_base::unlock_shared(std::__shared_mutex_base *this)
{
  MEMORY[0x1E0DE48C0](this);
}

void std::__shared_mutex_base::lock(std::__shared_mutex_base *this)
{
  MEMORY[0x1E0DE48D0](this);
}

void std::__shared_mutex_base::unlock(std::__shared_mutex_base *this)
{
  MEMORY[0x1E0DE48D8](this);
}

std::__shared_mutex_base *__cdecl std::__shared_mutex_base::__shared_mutex_base(std::__shared_mutex_base *this)
{
  return (std::__shared_mutex_base *)MEMORY[0x1E0DE48E8](this);
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
  MEMORY[0x1E0DE48F0](this);
}

std::__shared_weak_count *__cdecl std::__shared_weak_count::lock(std::__shared_weak_count *this)
{
  return (std::__shared_weak_count *)MEMORY[0x1E0DE48F8](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
  MEMORY[0x1E0DE4900](this);
}

std::string *__cdecl std::__get_collation_name(std::string *__return_ptr retstr, const char *__s)
{
  return (std::string *)MEMORY[0x1E0DE4910](retstr, __s);
}

void std::__throw_system_error(int __ev, const char *__what_arg)
{
  MEMORY[0x1E0DE4920](*(_QWORD *)&__ev, __what_arg);
}

void std::__libcpp_verbose_abort(const char *__format, ...)
{
  MEMORY[0x1E0DE4930](__format);
}

float std::stof(const std::string *__str, size_t *__idx)
{
  float result;

  MEMORY[0x1E0DE4A70](__str, __idx);
  return result;
}

void std::mutex::lock(std::mutex *this)
{
  MEMORY[0x1E0DE4AA0](this);
}

void std::mutex::unlock(std::mutex *this)
{
  MEMORY[0x1E0DE4AA8](this);
}

BOOL std::mutex::try_lock(std::mutex *this)
{
  return MEMORY[0x1E0DE4AB0](this);
}

void std::mutex::~mutex(std::mutex *this)
{
  MEMORY[0x1E0DE4AB8](this);
}

uint64_t std::__sort<std::__less<unsigned char,unsigned char> &,unsigned char *>()
{
  return MEMORY[0x1E0DE4AF0]();
}

uint64_t std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>()
{
  return MEMORY[0x1E0DE4B00]();
}

uint64_t std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>()
{
  return MEMORY[0x1E0DE4B10]();
}

std::chrono::steady_clock::time_point std::chrono::steady_clock::now(void)
{
  return (std::chrono::steady_clock::time_point)MEMORY[0x1E0DE4B38]();
}

void std::future<void>::~future(std::future<void> *this)
{
  MEMORY[0x1E0DE4B60](this);
}

std::locale *__cdecl std::locale::locale(std::locale *this, const std::locale *a2)
{
  return (std::locale *)MEMORY[0x1E0DE4B88](this, a2);
}

std::locale *__cdecl std::locale::locale(std::locale *this)
{
  return (std::locale *)MEMORY[0x1E0DE4B90](this);
}

void std::locale::~locale(std::locale *this)
{
  MEMORY[0x1E0DE4B98](this);
}

const std::locale *__cdecl std::locale::operator=(std::locale *this, const std::locale *a2)
{
  return (const std::locale *)MEMORY[0x1E0DE4BA0](this, a2);
}

void std::codecvt<char16_t,char,__mbstate_t>::~codecvt(std::codecvt<char16_t, char, mbstate_t> *this)
{
  MEMORY[0x1E0DE4BE0](this);
}

std::future<void> std::promise<void>::get_future(std::promise<void> *this)
{
  return (std::future<void>)MEMORY[0x1E0DE4C18](this);
}

void std::promise<void>::set_value(std::promise<void> *this)
{
  MEMORY[0x1E0DE4C20](this);
}

std::promise<void> *__cdecl std::promise<void>::promise(std::promise<void> *this)
{
  return (std::promise<void> *)MEMORY[0x1E0DE4C28](this);
}

void std::promise<void>::~promise(std::promise<void> *this)
{
  MEMORY[0x1E0DE4C30](this);
}

void std::__sp_mut::lock(std::__sp_mut *this)
{
  MEMORY[0x1E0DE4C38](this);
}

void std::__sp_mut::unlock(std::__sp_mut *this)
{
  MEMORY[0x1E0DE4C40](this);
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
  MEMORY[0x1E0DE4C50](this);
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
  MEMORY[0x1E0DE4C68](this, __sb);
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
  MEMORY[0x1E0DE4C80](this, *(_QWORD *)&__state);
}

uint64_t std::to_chars(std::__1 *this, char *a2, char *a3, double a4)
{
  return MEMORY[0x1E0DE4CD8](this, a2, a3, a4);
}

{
  return MEMORY[0x1E0DE4CF0](this, a2, a3, a4);
}

uint64_t std::to_chars()
{
  return MEMORY[0x1E0DE4CE0]();
}

{
  return MEMORY[0x1E0DE4CE8]();
}

{
  return MEMORY[0x1E0DE4CF8]();
}

{
  return MEMORY[0x1E0DE4D00]();
}

{
  return MEMORY[0x1E0DE4D10]();
}

{
  return MEMORY[0x1E0DE4D18]();
}

uint64_t std::to_chars(std::__1 *this, char *a2, char *a3, float a4)
{
  return MEMORY[0x1E0DE4D08](this, a2, a3, a4);
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x1E0DE4D28]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, double __val)
{
  return (std::string *)MEMORY[0x1E0DE4D40](retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, float __val)
{
  return (std::string *)MEMORY[0x1E0DE4D50](retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  return (std::string *)MEMORY[0x1E0DE4D58](retstr, *(_QWORD *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unsigned int __val)
{
  return (std::string *)MEMORY[0x1E0DE4D60](retstr, *(_QWORD *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return (std::string *)MEMORY[0x1E0DE4D70](retstr, __val);
}

{
  return (std::string *)MEMORY[0x1E0DE4D80](retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, uint64_t __val)
{
  return (std::string *)MEMORY[0x1E0DE4D78](retstr, __val);
}

uint64_t std::operator+<char>()
{
  return MEMORY[0x1E0DE4D88]();
}

void std::exception::~exception(std::exception *this)
{
  MEMORY[0x1E0DE4DD8](this);
}

void std::terminate(void)
{
  MEMORY[0x1E0DE4E18]();
}

uint64_t operator delete[]()
{
  return off_1E426DBC8();
}

void operator delete(void *__p)
{
  off_1E426DBD0(__p);
}

uint64_t operator delete()
{
  return off_1E426DBD8();
}

uint64_t operator new[]()
{
  return off_1E426DBE0();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_1E426DBE8(__sz);
}

void *__cdecl operator new(size_t __sz, const std::nothrow_t *a2)
{
  return (void *)off_1E426DBF0(__sz, a2);
}

uint64_t operator new()
{
  return off_1E426DBF8();
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
  MEMORY[0x1E0C80A58](a1, a2, *(_QWORD *)&a3, a4);
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x1E0DE5068](thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x1E0C80A98](lpfunc, obj, lpdso_handle);
}

void __cxa_bad_cast(void)
{
  MEMORY[0x1E0DE5070]();
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1E0DE5080](a1);
}

void __cxa_end_catch(void)
{
  MEMORY[0x1E0DE5098]();
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x1E0DE50A0](a1);
}

void __cxa_guard_abort(__guard *a1)
{
  MEMORY[0x1E0DE50B0](a1);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x1E0DE50B8](a1);
}

void __cxa_guard_release(__guard *a1)
{
  MEMORY[0x1E0DE50C0](a1);
}

void __cxa_rethrow(void)
{
  MEMORY[0x1E0DE50D0]();
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x1E0DE50D8](a1, lptinfo, a3);
}

void *__dynamic_cast(const void *lpsrc, const struct __class_type_info *lpstype, const struct __class_type_info *lpdtype, ptrdiff_t s2d)
{
  return (void *)MEMORY[0x1E0DE50E0](lpsrc, lpstype, lpdtype, s2d);
}

double __exp10(double a1)
{
  double result;

  MEMORY[0x1E0C80AC8](a1);
  return result;
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x1E0C80B50](*(_QWORD *)&a1, a2);
}

uint64_t __powidf2()
{
  return MEMORY[0x1E0C80B98]();
}

__double2 __sincos_stret(double a1)
{
  double v1;
  double v2;
  __double2 result;

  MEMORY[0x1E0C80BC8](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

__float2 __sincosf_stret(float a1)
{
  float v1;
  float v2;
  __float2 result;

  MEMORY[0x1E0C80BD0](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1E0C80C70](*(_QWORD *)&a1);
}

uint64_t __udivti3()
{
  return MEMORY[0x1E0C80C80]();
}

uint64_t __umodti3()
{
  return MEMORY[0x1E0C80C98]();
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81038](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81040](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81048](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C810D0](dso, log, type, spid, name, format, buf, *(_QWORD *)&size);
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x1E0DA88F0]();
}

void abort(void)
{
  MEMORY[0x1E0C813A8]();
}

uint64_t abort_report_np()
{
  return MEMORY[0x1E0C813B0]();
}

uint64_t abort_with_reason()
{
  return MEMORY[0x1E0C813C0]();
}

long double acos(long double __x)
{
  long double result;

  MEMORY[0x1E0C81500](__x);
  return result;
}

float acosf(float a1)
{
  float result;

  MEMORY[0x1E0C81508](a1);
  return result;
}

long double asin(long double __x)
{
  long double result;

  MEMORY[0x1E0C81598](__x);
  return result;
}

float asinf(float a1)
{
  float result;

  MEMORY[0x1E0C815A0](a1);
  return result;
}

long double atan(long double __x)
{
  long double result;

  MEMORY[0x1E0C81618](__x);
  return result;
}

long double atan2(long double __y, long double __x)
{
  long double result;

  MEMORY[0x1E0C81620](__y, __x);
  return result;
}

float atan2f(float a1, float a2)
{
  float result;

  MEMORY[0x1E0C81628](a1, a2);
  return result;
}

float atanf(float a1)
{
  float result;

  MEMORY[0x1E0C81630](a1);
  return result;
}

double atof(const char *a1)
{
  double result;

  MEMORY[0x1E0C81658](a1);
  return result;
}

int atoi(const char *a1)
{
  return MEMORY[0x1E0C81668](a1);
}

void *__cdecl bsearch(const void *__key, const void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
  return (void *)MEMORY[0x1E0C81738](__key, __base, __nel, __width, __compar);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

long double cbrt(long double __x)
{
  long double result;

  MEMORY[0x1E0C81850](__x);
  return result;
}

float cbrtf(float a1)
{
  float result;

  MEMORY[0x1E0C81858](a1);
  return result;
}

size_t compression_decode_buffer(uint8_t *dst_buffer, size_t dst_size, const uint8_t *src_buffer, size_t src_size, void *scratch_buffer, compression_algorithm algorithm)
{
  return MEMORY[0x1E0DE5270](dst_buffer, dst_size, src_buffer, src_size, scratch_buffer, *(_QWORD *)&algorithm);
}

long double cos(long double __x)
{
  long double result;

  MEMORY[0x1E0C82B40](__x);
  return result;
}

float cosf(float a1)
{
  float result;

  MEMORY[0x1E0C82B48](a1);
  return result;
}

long double cosh(long double __x)
{
  long double result;

  MEMORY[0x1E0C82B50](__x);
  return result;
}

int deflate(z_streamp strm, int flush)
{
  return MEMORY[0x1E0DE92C0](strm, *(_QWORD *)&flush);
}

int deflateEnd(z_streamp strm)
{
  return MEMORY[0x1E0DE92D0](strm);
}

int deflateInit_(z_streamp strm, int level, const char *version, int stream_size)
{
  return MEMORY[0x1E0DE92E0](strm, *(_QWORD *)&level, version, *(_QWORD *)&stream_size);
}

void dispatch_activate(dispatch_object_t object)
{
  MEMORY[0x1E0C82BC0](object);
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82BC8](when, queue, block);
}

void dispatch_apply(size_t iterations, dispatch_queue_t queue, void *block)
{
  MEMORY[0x1E0C82BD8](iterations, queue, block);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C00](queue, block);
}

void dispatch_async_and_wait(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C08](queue, block);
}

void dispatch_barrier_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C28](queue, block);
}

void dispatch_barrier_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C48](queue, block);
}

void dispatch_block_cancel(dispatch_block_t block)
{
  MEMORY[0x1E0C82C58](block);
}

dispatch_block_t dispatch_block_create(dispatch_block_flags_t flags, dispatch_block_t block)
{
  return (dispatch_block_t)MEMORY[0x1E0C82C60](flags, block);
}

intptr_t dispatch_block_testcancel(dispatch_block_t block)
{
  return MEMORY[0x1E0C82C90](block);
}

intptr_t dispatch_block_wait(dispatch_block_t block, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82C98](block, timeout);
}

dispatch_data_t dispatch_data_create(const void *buffer, size_t size, dispatch_queue_t queue, dispatch_block_t destructor)
{
  return (dispatch_data_t)MEMORY[0x1E0C82CB0](buffer, size, queue, destructor);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1E0C82D00](identifier, flags);
}

void dispatch_group_async(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82D10](group, queue, block);
}

void dispatch_group_enter(dispatch_group_t group)
{
  MEMORY[0x1E0C82D28](group);
}

void dispatch_group_leave(dispatch_group_t group)
{
  MEMORY[0x1E0C82D30](group);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x1E0C82E08](predicate, block);
}

dispatch_queue_attr_t dispatch_queue_attr_make_initially_inactive(dispatch_queue_attr_t attr)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E20](attr);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E28](attr, frequency);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E38](attr, *(_QWORD *)&qos_class, *(_QWORD *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E48](label, attr);
}

void dispatch_release(dispatch_object_t object)
{
  MEMORY[0x1E0C82E98](object);
}

void dispatch_resume(dispatch_object_t object)
{
  MEMORY[0x1E0C82EA0](object);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1E0C82EB8](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1E0C82EC8](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82ED8](dsema, timeout);
}

void dispatch_set_qos_class_floor(dispatch_object_t object, dispatch_qos_class_t qos_class, int relative_priority)
{
  MEMORY[0x1E0C82F00](object, *(_QWORD *)&qos_class, *(_QWORD *)&relative_priority);
}

void dispatch_set_target_queue(dispatch_object_t object, dispatch_queue_t queue)
{
  MEMORY[0x1E0C82F08](object, queue);
}

void dispatch_source_cancel(dispatch_source_t source)
{
  MEMORY[0x1E0C82F10](source);
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1E0C82F20](type, handle, mask, queue);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
  MEMORY[0x1E0C82F58](source, handler);
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
  MEMORY[0x1E0C82F78](source, start, interval, leeway);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82F90](queue, block);
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1E0C82FB8](when, delta);
}

dispatch_workloop_t dispatch_workloop_create_inactive(const char *label)
{
  return (dispatch_workloop_t)MEMORY[0x1E0C82FE0](label);
}

uint64_t dispatch_workloop_set_qos_class_floor()
{
  return MEMORY[0x1E0C83008]();
}

char *dlerror(void)
{
  return (char *)MEMORY[0x1E0C83038]();
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x1E0C83040](__path, *(_QWORD *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1E0C83050](__handle, __symbol);
}

long double exp(long double __x)
{
  long double result;

  MEMORY[0x1E0C83280](__x);
  return result;
}

long double exp2(long double __x)
{
  long double result;

  MEMORY[0x1E0C83288](__x);
  return result;
}

float exp2f(float a1)
{
  float result;

  MEMORY[0x1E0C83290](a1);
  return result;
}

float expf(float a1)
{
  float result;

  MEMORY[0x1E0C83298](a1);
  return result;
}

uint64_t featureStyleAttributesHash()
{
  return MEMORY[0x1E0D278B8]();
}

int feclearexcept(int a1)
{
  return MEMORY[0x1E0C83328](*(_QWORD *)&a1);
}

int fetestexcept(int a1)
{
  return MEMORY[0x1E0C83360](*(_QWORD *)&a1);
}

long double fmod(long double __x, long double __y)
{
  long double result;

  MEMORY[0x1E0C83440](__x, __y);
  return result;
}

float fmodf(float a1, float a2)
{
  float result;

  MEMORY[0x1E0C83448](a1, a2);
  return result;
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C83478](a1, a2);
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1E0C835E0](__ptr, __size, __nitems, __stream);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x1E0C83660](a1);
}

pid_t getpid(void)
{
  return MEMORY[0x1E0C83760]();
}

int gettimeofday(timeval *a1, void *a2)
{
  return MEMORY[0x1E0C83820](a1, a2);
}

long double hypot(long double __x, long double __y)
{
  long double result;

  MEMORY[0x1E0C838E8](__x, __y);
  return result;
}

float hypotf(float a1, float a2)
{
  float result;

  MEMORY[0x1E0C838F0](a1, a2);
  return result;
}

int inflate(z_streamp strm, int flush)
{
  return MEMORY[0x1E0DE93A0](strm, *(_QWORD *)&flush);
}

int inflateEnd(z_streamp strm)
{
  return MEMORY[0x1E0DE93B8](strm);
}

int inflateInit2_(z_streamp strm, int windowBits, const char *version, int stream_size)
{
  return MEMORY[0x1E0DE93C8](strm, *(_QWORD *)&windowBits, version, *(_QWORD *)&stream_size);
}

int inflateInit_(z_streamp strm, const char *version, int stream_size)
{
  return MEMORY[0x1E0DE93D0](strm, version, *(_QWORD *)&stream_size);
}

long double ldexp(long double __x, int __e)
{
  long double result;

  MEMORY[0x1E0C83B40](*(_QWORD *)&__e, __x);
  return result;
}

float ldexpf(float a1, int a2)
{
  float result;

  MEMORY[0x1E0C83B48](*(_QWORD *)&a2, a1);
  return result;
}

lconv *localeconv(void)
{
  return (lconv *)MEMORY[0x1E0C83B98]();
}

long double log(long double __x)
{
  long double result;

  MEMORY[0x1E0C83BB8](__x);
  return result;
}

long double log10(long double __x)
{
  long double result;

  MEMORY[0x1E0C83BC0](__x);
  return result;
}

long double log2(long double __x)
{
  long double result;

  MEMORY[0x1E0C83BE8](__x);
  return result;
}

float log2f(float a1)
{
  float result;

  MEMORY[0x1E0C83BF0](a1);
  return result;
}

float logf(float a1)
{
  float result;

  MEMORY[0x1E0C83C00](a1);
  return result;
}

uint64_t lzma_auto_decoder()
{
  return MEMORY[0x1E0DE6CC8]();
}

uint64_t lzma_code()
{
  return MEMORY[0x1E0DE6CD0]();
}

uint64_t lzma_end()
{
  return MEMORY[0x1E0DE6CF0]();
}

uint64_t mach_absolute_time(void)
{
  return MEMORY[0x1E0C83C50]();
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x1E0C83DB8](info);
}

malloc_zone_t *__cdecl malloc_create_zone(vm_size_t start_size, unsigned int flags)
{
  return (malloc_zone_t *)MEMORY[0x1E0C83E78](start_size, *(_QWORD *)&flags);
}

void malloc_destroy_zone(malloc_zone_t *zone)
{
  MEMORY[0x1E0C83E90](zone);
}

uint64_t malloc_get_all_zones()
{
  return MEMORY[0x1E0C83EA0]();
}

const char *__cdecl malloc_get_zone_name(malloc_zone_t *zone)
{
  return (const char *)MEMORY[0x1E0C83EA8](zone);
}

void malloc_set_zone_name(malloc_zone_t *zone, const char *name)
{
  MEMORY[0x1E0C83ED8](zone, name);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83EF8](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F00](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F10](ptr, size, type_id);
}

void *__cdecl malloc_type_zone_calloc(malloc_zone_t *zone, size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F20](zone, count, size, type_id);
}

void *__cdecl malloc_type_zone_malloc(malloc_zone_t *zone, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F28](zone, size, type_id);
}

void *__cdecl malloc_type_zone_realloc(malloc_zone_t *zone, void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F40](zone, ptr, size, type_id);
}

void malloc_zone_free(malloc_zone_t *zone, void *ptr)
{
  MEMORY[0x1E0C83F70](zone, ptr);
}

void malloc_zone_statistics(malloc_zone_t *zone, malloc_statistics_t *stats)
{
  MEMORY[0x1E0C83FA8](zone, stats);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x1E0C84070](__s, *(_QWORD *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1E0C84078](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C84098](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1E0C840B0](__b, *(_QWORD *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
  MEMORY[0x1E0C840B8](__b, __pattern16, __len);
}

long double modf(long double __x, long double *__y)
{
  long double result;

  MEMORY[0x1E0C841E0](__y, __x);
  return result;
}

float modff(float a1, float *a2)
{
  float result;

  MEMORY[0x1E0C841E8](a2, a1);
  return result;
}

uint32_t notify_cancel(int token)
{
  return MEMORY[0x1E0C843D8](*(_QWORD *)&token);
}

uint32_t notify_get_state(int token, uint64_t *state64)
{
  return MEMORY[0x1E0C843E8](*(_QWORD *)&token, state64);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return MEMORY[0x1E0C84408](name, out_token, queue, handler);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1E0DE7BA8](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1E0DE7BB8]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7BD0](a1);
}

void objc_autoreleasePoolPop(void *context)
{
  MEMORY[0x1E0DE7BD8](context);
}

void *objc_autoreleasePoolPush(void)
{
  return (void *)MEMORY[0x1E0DE7BE0]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7BE8](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1E0DE7BF8]();
}

void objc_copyCppObjectAtomic(void *dest, const void *src, void (__cdecl *copyHelper)(void *, const void *))
{
  MEMORY[0x1E0DE7C20](dest, src, copyHelper);
}

void objc_copyStruct(void *dest, const void *src, ptrdiff_t size, BOOL atomic, BOOL hasStrong)
{
  MEMORY[0x1E0DE7C30](dest, src, size, atomic, hasStrong);
}

void objc_copyWeak(id *to, id *from)
{
  MEMORY[0x1E0DE7C38](to, from);
}

void objc_destroyWeak(id *location)
{
  MEMORY[0x1E0DE7C60](location);
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x1E0DE7C90](obj);
}

id objc_getAssociatedObject(id object, const void *key)
{
  return (id)MEMORY[0x1E0DE7CA8](object, key);
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1E0DE7CB0](name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x1E0DE7CD0](self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1E0DE7CE0](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1E0DE7D08](location);
}

void objc_moveWeak(id *to, id *from)
{
  MEMORY[0x1E0DE7D18](to, from);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D30](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1E0DE7D38]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1E0DE7D40]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1E0DE7D48]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1E0DE7D50]();
}

void objc_release(id a1)
{
  MEMORY[0x1E0DE7D78](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1E0DE7E50](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7E58](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E60](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E68](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1E0DE7E70](a1);
}

void objc_setAssociatedObject(id object, const void *key, id value, void *policy)
{
  MEMORY[0x1E0DE7F40](object, key, value, policy);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7F88](self, _cmd, newValue, offset);
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7F90](self, _cmd, newValue, offset);
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7FA0](self, _cmd, newValue, offset);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x1E0DE7FB0](location, obj);
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x1E0DE7FB8](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x1E0DE7FC8](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x1E0DE7FD0](obj);
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7FE0](a1);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1E0C84728](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1E0C84780](oslog, type);
}

void os_release(void *object)
{
  MEMORY[0x1E0C84910](object);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x1E0C84920](log);
}

os_signpost_id_t os_signpost_id_generate(os_log_t log)
{
  return MEMORY[0x1E0C84928](log);
}

os_signpost_id_t os_signpost_id_make_with_pointer(os_log_t log, const void *ptr)
{
  return MEMORY[0x1E0C84930](log, ptr);
}

uint64_t os_state_add_handler()
{
  return MEMORY[0x1E0C84940]();
}

uint64_t os_state_remove_handler()
{
  return MEMORY[0x1E0C84948]();
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C84998](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C849B0](lock);
}

uint64_t os_variant_has_internal_ui()
{
  return MEMORY[0x1E0C84A00]();
}

long double pow(long double __x, long double __y)
{
  long double result;

  MEMORY[0x1E0C84BB8](__x, __y);
  return result;
}

float powf(float a1, float a2)
{
  float result;

  MEMORY[0x1E0C84BC0](a1, a2);
  return result;
}

int printf(const char *a1, ...)
{
  return MEMORY[0x1E0C84BD0](a1);
}

int pthread_attr_destroy(pthread_attr_t *a1)
{
  return MEMORY[0x1E0C84CB0](a1);
}

int pthread_attr_init(pthread_attr_t *a1)
{
  return MEMORY[0x1E0C84CC8](a1);
}

int pthread_cond_broadcast(pthread_cond_t *a1)
{
  return MEMORY[0x1E0C84D18](a1);
}

int pthread_cond_destroy(pthread_cond_t *a1)
{
  return MEMORY[0x1E0C84D20](a1);
}

int pthread_cond_init(pthread_cond_t *a1, const pthread_condattr_t *a2)
{
  return MEMORY[0x1E0C84D28](a1, a2);
}

int pthread_cond_signal(pthread_cond_t *a1)
{
  return MEMORY[0x1E0C84D30](a1);
}

int pthread_cond_timedwait_relative_np(pthread_cond_t *a1, pthread_mutex_t *a2, const timespec *a3)
{
  return MEMORY[0x1E0C84D40](a1, a2, a3);
}

int pthread_cond_wait(pthread_cond_t *a1, pthread_mutex_t *a2)
{
  return MEMORY[0x1E0C84D48](a1, a2);
}

int pthread_create(pthread_t *a1, const pthread_attr_t *a2, void *(__cdecl *a3)(void *), void *a4)
{
  return MEMORY[0x1E0C84D50](a1, a2, a3, a4);
}

void pthread_exit(void *a1)
{
  MEMORY[0x1E0C84D88](a1);
}

int pthread_join(pthread_t a1, void **a2)
{
  return MEMORY[0x1E0C84DD8](a1, a2);
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E18](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x1E0C84E20](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E28](a1);
}

int pthread_mutex_trylock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E30](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E38](a1);
}

int pthread_mutexattr_destroy(pthread_mutexattr_t *a1)
{
  return MEMORY[0x1E0C84E40](a1);
}

int pthread_mutexattr_init(pthread_mutexattr_t *a1)
{
  return MEMORY[0x1E0C84E48](a1);
}

int pthread_mutexattr_settype(pthread_mutexattr_t *a1, int a2)
{
  return MEMORY[0x1E0C84E60](a1, *(_QWORD *)&a2);
}

int pthread_rwlock_destroy(pthread_rwlock_t *a1)
{
  return MEMORY[0x1E0C84E90](a1);
}

int pthread_rwlock_init(pthread_rwlock_t *a1, const pthread_rwlockattr_t *a2)
{
  return MEMORY[0x1E0C84E98](a1, a2);
}

int pthread_rwlock_rdlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x1E0C84EA0](a1);
}

int pthread_rwlock_unlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x1E0C84EB8](a1);
}

int pthread_rwlock_wrlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x1E0C84EC0](a1);
}

uint64_t pthread_set_fixedpriority_self()
{
  return MEMORY[0x1E0C84EE8]();
}

int pthread_set_qos_class_self_np(qos_class_t __qos_class, int __relative_priority)
{
  return MEMORY[0x1E0C84EF0](*(_QWORD *)&__qos_class, *(_QWORD *)&__relative_priority);
}

int pthread_setname_np(const char *a1)
{
  return MEMORY[0x1E0C84F08](a1);
}

int puts(const char *a1)
{
  return MEMORY[0x1E0C84F60](a1);
}

qos_class_t qos_class_self(void)
{
  return MEMORY[0x1E0C84F80]();
}

void qsort(void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
  MEMORY[0x1E0C84F88](__base, __nel, __width, __compar);
}

long double remainder(long double __x, long double __y)
{
  long double result;

  MEMORY[0x1E0C850A8](__x, __y);
  return result;
}

long double sin(long double __x)
{
  long double result;

  MEMORY[0x1E0C85418](__x);
  return result;
}

float sinf(float a1)
{
  float result;

  MEMORY[0x1E0C85420](a1);
  return result;
}

long double sinh(long double __x)
{
  long double result;

  MEMORY[0x1E0C85428](__x);
  return result;
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1E0C85440](__str, __size, __format);
}

int sscanf(const char *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C85498](a1, a2);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1E0C85520](__s1, __s2);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1E0C85578](__s);
}

int strncasecmp(const char *a1, const char *a2, size_t a3)
{
  return MEMORY[0x1E0C85590](a1, a2, a3);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1E0C855A8](__s1, __s2, __n);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x1E0C855B0](__dst, __src, __n);
}

float strtof(const char *a1, char **a2)
{
  float result;

  MEMORY[0x1E0C85628](a1, a2);
  return result;
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1E0C85658](__str, __endptr, *(_QWORD *)&__base);
}

int sysctl(int *a1, u_int a2, void *a3, size_t *a4, void *a5, size_t a6)
{
  return MEMORY[0x1E0C85798](a1, *(_QWORD *)&a2, a3, a4, a5, a6);
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return MEMORY[0x1E0C857A0](a1, a2, a3, a4, a5);
}

long double tan(long double __x)
{
  long double result;

  MEMORY[0x1E0C857E8](__x);
  return result;
}

float tanf(float a1)
{
  float result;

  MEMORY[0x1E0C857F0](a1);
  return result;
}

kern_return_t task_info(task_name_t target_task, task_flavor_t flavor, task_info_t task_info_out, mach_msg_type_number_t *task_info_outCnt)
{
  return MEMORY[0x1E0C85838](*(_QWORD *)&target_task, *(_QWORD *)&flavor, task_info_out, task_info_outCnt);
}

int uncompress(Bytef *dest, uLongf *destLen, const Bytef *source, uLong sourceLen)
{
  return MEMORY[0x1E0DE93F8](dest, destLen, source, sourceLen);
}

int usleep(useconds_t a1)
{
  return MEMORY[0x1E0C859E0](*(_QWORD *)&a1);
}

vImage_Error vImageBuffer_InitWithCGImage(vImage_Buffer *buf, vImage_CGImageFormat *format, const CGFloat *backgroundColor, CGImageRef image, vImage_Flags flags)
{
  return MEMORY[0x1E0C8DBF0](buf, format, backgroundColor, image, *(_QWORD *)&flags);
}

vImage_Error vImageConvolve_Planar8(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImagePixelCount srcOffsetToROI_X, vImagePixelCount srcOffsetToROI_Y, const int16_t *kernel, uint32_t kernel_height, uint32_t kernel_width, int32_t divisor, Pixel_8 backgroundColor, vImage_Flags flags)
{
  return MEMORY[0x1E0C8DC00](src, dest, tempBuffer, srcOffsetToROI_X, srcOffsetToROI_Y, kernel, *(_QWORD *)&kernel_height, *(_QWORD *)&kernel_width);
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  return MEMORY[0x1E0C85B98](__str, __size, __format, a4);
}

__int32 *__cdecl wmemchr(__int32 *__s, __int32 __c, size_t __n)
{
  return (__int32 *)MEMORY[0x1E0C85CB8](__s, *(_QWORD *)&__c, __n);
}

xmlNodePtr xmlDocGetRootElement(const xmlDoc *doc)
{
  return (xmlNodePtr)MEMORY[0x1E0DE8D18](doc);
}

void xmlFreeDoc(xmlDocPtr cur)
{
  MEMORY[0x1E0DE8D38](cur);
}

xmlChar *__cdecl xmlGetProp(const xmlNode *node, const xmlChar *name)
{
  return (xmlChar *)MEMORY[0x1E0DE8DA0](node, name);
}

xmlDocPtr xmlParseMemory(const char *buffer, int size)
{
  return (xmlDocPtr)MEMORY[0x1E0DE8EC8](buffer, *(_QWORD *)&size);
}

int xmlStrncmp(const xmlChar *str1, const xmlChar *str2, int len)
{
  return MEMORY[0x1E0DE9018](str1, str2, *(_QWORD *)&len);
}

void xpc_connection_cancel(xpc_connection_t connection)
{
  MEMORY[0x1E0C85F68](connection);
}

xpc_connection_t xpc_connection_create_mach_service(const char *name, dispatch_queue_t targetq, uint64_t flags)
{
  return (xpc_connection_t)MEMORY[0x1E0C85FB0](name, targetq, flags);
}

void xpc_connection_resume(xpc_connection_t connection)
{
  MEMORY[0x1E0C86018](connection);
}

void xpc_connection_send_message(xpc_connection_t connection, xpc_object_t message)
{
  MEMORY[0x1E0C86030](connection, message);
}

void xpc_connection_set_event_handler(xpc_connection_t connection, xpc_handler_t handler)
{
  MEMORY[0x1E0C86080](connection, handler);
}

char *__cdecl xpc_copy_description(xpc_object_t object)
{
  return (char *)MEMORY[0x1E0C86108](object);
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return (xpc_type_t)MEMORY[0x1E0C86520](object);
}

