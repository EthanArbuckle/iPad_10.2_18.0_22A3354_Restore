void altitude::FlyoverRenderable::setup(altitude::FlyoverRenderable *this, altitude::View *a2, uint64_t a3, float a4)
{
  ggl::PipelineSetup *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  uint64_t v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  _QWORD *v58;
  unint64_t v59;
  float32x4_t *v60;
  float32x4_t v61;
  float32x4_t v62;
  uint64_t v63;
  uint64_t v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  uint64_t v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  float32x4_t v83;
  float32x4_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  unint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  double v98[16];
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107[7];
  float64x2_t v108;
  double v109;
  double v110;
  double v111;
  uint64_t v112;
  double v113;
  double v114;
  double v115;
  uint64_t v116;
  double v117;
  double v118;
  double v119;
  uint64_t v120;
  __int128 v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  uint64_t v132;

  if (*((_BYTE *)this + 312))
  {
    v8 = (ggl::PipelineSetup *)*((_QWORD *)this + 24);
    v9 = *((_QWORD *)this + 37);
    v10 = (std::__shared_weak_count *)*((_QWORD *)this + 38);
LABEL_3:
    ggl::Flyover::FlyoverPipelineSetup::setState(v8, v9, v10);
    goto LABEL_4;
  }
  if (a4 < 1.0)
  {
    v8 = (ggl::PipelineSetup *)*((_QWORD *)this + 24);
    v9 = *((_QWORD *)this + 37);
    if (*((_QWORD *)v8 + 2) != v9)
    {
      v10 = (std::__shared_weak_count *)*((_QWORD *)this + 38);
      goto LABEL_3;
    }
  }
  if (a4 >= 1.0)
  {
    v8 = (ggl::PipelineSetup *)*((_QWORD *)this + 24);
    v9 = *((_QWORD *)this + 35);
    if (*((_QWORD *)v8 + 2) != v9)
    {
      v10 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
      goto LABEL_3;
    }
  }
LABEL_4:
  v11 = *((double *)a2 + 10);
  v12 = *((double *)a2 + 11);
  v13 = *((double *)a2 + 12);
  v15 = *((double *)a2 + 8);
  v14 = *((double *)a2 + 9);
  v17 = *((double *)a2 + 6);
  v16 = *((double *)a2 + 7);
  v18 = -(v15 * v11 - v16 * v12) - (v15 * v11 - v16 * v12);
  v19 = -(v17 * v12 - v15 * v14) - (v17 * v12 - v15 * v14);
  v20 = -(v16 * v14 - v17 * v11) - (v16 * v14 - v17 * v11);
  v21 = -(v20 * v14 - (-(v16 - v18 * v12) - v19 * v13));
  v22 = -(v17 + v18 * v13 + v19 * v12 - v20 * v11);
  v23 = -(v15 + v18 * v11 + v20 * v13 - v19 * v14);
  v24 = v11 * -2.0;
  v25 = -(v11 * (v11 * -2.0));
  v26 = 1.0 - (v25 - v12 * (v12 * -2.0));
  v27 = v14 * -2.0;
  v28 = -(v11 * (v14 * -2.0));
  v29 = v12 * -2.0 * v13;
  v30 = v28 - v29;
  v31 = -(v12 * (v14 * -2.0));
  v32 = v13 * v24 - v12 * (v14 * -2.0);
  v33 = v29 + v28;
  v34 = v14 * -2.0 * v14 + 1.0;
  v35 = v34 - -(v12 * (v12 * -2.0));
  v36 = -(v12 * v24);
  v99.f64[0] = v26;
  v99.f64[1] = v33;
  v101.f64[0] = v30;
  v101.f64[1] = v35;
  v103.f64[0] = v32;
  v103.f64[1] = v36 - v13 * v27;
  v100.f64[0] = v31 - v13 * v24;
  v102 = (float64x2_t)COERCE_UNSIGNED_INT64(v13 * v27 + v36);
  v104.f64[0] = v34 - v25;
  v100.f64[1] = 0.0;
  v104.f64[1] = 0.0;
  v105.f64[0] = v22;
  v105.f64[1] = v21;
  v106.f64[0] = v23;
  v106.f64[1] = 1.0;
  v37 = (*(uint64_t (**)(altitude::FlyoverRenderable *))(*(_QWORD *)this + 24))(this);
  v127 = 0u;
  v129 = 0u;
  v131 = 0u;
  v130 = 0u;
  v128 = 0u;
  v126 = 0u;
  v125 = 0u;
  v132 = 0x3FF0000000000000;
  v38 = *((_QWORD *)this + 30);
  v124 = *((_QWORD *)this + 29);
  *(_QWORD *)&v127 = v38;
  *((_QWORD *)&v129 + 1) = *((_QWORD *)this + 31);
  v39 = *(double *)(v37 + 32);
  v40 = *(double *)(v37 + 40);
  v41 = *(double *)(v37 + 48);
  v42 = v39 + v39;
  v43 = (v39 + v39) * v39;
  v44 = (v40 + v40) * v40;
  v46 = *(_QWORD *)(v37 + 16);
  v45 = *(double *)(v37 + 24);
  v47 = v45 + v45;
  v48 = (v45 + v45) * v39;
  v49 = (v40 + v40) * v41;
  v50 = v48 - v49;
  v51 = v40 * (v45 + v45);
  v52 = v41 * v42;
  v53 = v49 + v48;
  v54 = v41 * v42 + v51;
  v55 = 1.0 - (v45 + v45) * v45;
  v56 = v42 * v40;
  v57 = v41 * v47;
  v109 = 1.0 - (v43 + v44);
  v110 = v53;
  v113 = v50;
  v114 = v55 - v44;
  v117 = v54;
  v118 = v56 - v57;
  v111 = v51 - v52;
  v115 = v57 + v56;
  v119 = v55 - v43;
  v112 = 0;
  v116 = 0;
  v120 = 0;
  v121 = *(_OWORD *)v37;
  v122 = v46;
  v123 = 0x3FF0000000000000;
  gm::operator*<double,4,4,4>(v98, &v109, (double *)&v124);
  gm::operator*<double,4,4,4>(v107[0].f64, v99.f64, v98);
  if (*((_BYTE *)this + 312) || a4 < 1.0)
    *(_QWORD *)(*((_QWORD *)this + 23) + 48) = (unint64_t)((v108.f64[0] + *((double *)a2 + 118) * -0.1)
                                                                  * 1.84467441e19
                                                                  / (*((double *)a2 + 118)
                                                                   * 1.6)
                                                                  + 1.84467441e19);
  v58 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)this + 24) + 64) + 16);
  v59 = v58[1];
  if (v59)
    v60 = (float32x4_t *)v58[9];
  else
    v60 = 0;
  v61 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v107[2]), v107[3]);
  *v60 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v107[0]), v107[1]);
  v60[1] = v61;
  v62 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v107[6]), v108);
  v60[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v107[4]), v107[5]);
  v60[3] = v62;
  v63 = (*(uint64_t (**)(altitude::FlyoverRenderable *))(*(_QWORD *)this + 24))(this);
  v127 = 0u;
  v129 = 0u;
  v131 = 0u;
  v130 = 0u;
  v128 = 0u;
  v126 = 0u;
  v125 = 0u;
  v132 = 0x3FF0000000000000;
  v64 = *((_QWORD *)this + 30);
  v124 = *((_QWORD *)this + 29);
  *(_QWORD *)&v127 = v64;
  *((_QWORD *)&v129 + 1) = *((_QWORD *)this + 31);
  v65 = *(double *)(v63 + 32);
  v66 = *(double *)(v63 + 40);
  v67 = *(double *)(v63 + 48);
  v68 = v65 + v65;
  v69 = (v65 + v65) * v65;
  v70 = (v66 + v66) * v66;
  v72 = *(_QWORD *)(v63 + 16);
  v71 = *(double *)(v63 + 24);
  v73 = (v71 + v71) * v65;
  v74 = (v66 + v66) * v67;
  v75 = v73 - v74;
  v76 = v66 * (v71 + v71);
  v77 = v67 * v68;
  v78 = v74 + v73;
  v79 = v67 * v68 + v76;
  v80 = 1.0 - (v71 + v71) * v71;
  v81 = v68 * v66;
  v82 = v67 * (v71 + v71);
  v109 = 1.0 - (v69 + v70);
  v110 = v78;
  v113 = v75;
  v114 = v80 - v70;
  v117 = v79;
  v118 = v81 - v82;
  v111 = v76 - v77;
  v115 = v82 + v81;
  v119 = v80 - v69;
  v112 = 0;
  v116 = 0;
  v120 = 0;
  v121 = *(_OWORD *)v63;
  v122 = v72;
  v123 = 0x3FF0000000000000;
  gm::operator*<double,4,4,4>(v99.f64, &v109, (double *)&v124);
  v83 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v101), v102);
  v60[4] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v99), v100);
  v60[5] = v83;
  v84 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v105), v106);
  v60[6] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v103), v104);
  v60[7] = v84;
  if (v59)
  {
    v85 = v58[8];
    if (v85 <= v59)
      v85 = v59;
    v58[7] = 0;
    v58[8] = v85;
  }
  v86 = *((_QWORD *)this + 24);
  v87 = *(_QWORD *)(*(_QWORD *)(v86 + 64) + 48);
  v88 = *(_QWORD *)(v87 + 8);
  **(float **)(v87 + 72) = a4;
  if (*(_QWORD *)(v87 + 64) > v88)
    v88 = *(_QWORD *)(v87 + 64);
  *(_QWORD *)(v87 + 56) = 0;
  *(_QWORD *)(v87 + 64) = v88;
  v89 = (char *)*((_QWORD *)this + 32);
  v90 = (char *)*((_QWORD *)this + 33);
  if (v89 != v90)
  {
    v91 = v90 - v89 - 8;
    v92 = (char *)*((_QWORD *)this + 32);
    if (v91 < 8)
      goto LABEL_25;
    v93 = (v91 >> 3) + 1;
    v94 = (uint64_t *)(v89 + 8);
    v95 = v93 & 0x3FFFFFFFFFFFFFFELL;
    do
    {
      v96 = *v94;
      *(_QWORD *)(*(v94 - 1) + 88) = a3;
      *(_QWORD *)(v96 + 88) = a3;
      v94 += 2;
      v95 -= 2;
    }
    while (v95);
    if (v93 != (v93 & 0x3FFFFFFFFFFFFFFELL))
    {
      v92 = &v89[8 * (v93 & 0x3FFFFFFFFFFFFFFELL)];
      do
      {
LABEL_25:
        v97 = *(_QWORD *)v92;
        v92 += 8;
        *(_QWORD *)(v97 + 88) = a3;
      }
      while (v92 != v90);
    }
  }
  *(_QWORD *)(*(_QWORD *)(v86 + 96) + 8) = *(_QWORD *)(*(_QWORD *)v89 + 16);
}

void std::__function::__func<md::ita::CollectFlyoverMeshRenderables::operator()(ecs2::Query<md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::FlyoverRenderable> const&,md::ls::MapDataTypeV const&,md::ls::AssociationTileHandle const&,md::ls::GlobeMatrixData const&,md::ls::TileMatrix const&,md::ls::FlyoverOctileKey const&>)::$_0,std::allocator<md::ita::CollectFlyoverMeshRenderables::operator()(ecs2::Query<md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::FlyoverRenderable> const&,md::ls::MapDataTypeV const&,md::ls::AssociationTileHandle const&,md::ls::GlobeMatrixData const&,md::ls::TileMatrix const&,md::ls::FlyoverOctileKey const&>)::$_0>,void ()(md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::FlyoverRenderable> const&,md::ls::MapDataTypeV const&,md::ls::AssociationTileHandle const&,md::ls::GlobeMatrixData const&,md::ls::TileMatrix const&,md::ls::FlyoverOctileKey const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::ita::CollectFlyoverMeshRenderables::operator()(ecs2::Query<md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::FlyoverRenderable> const&,md::ls::MapDataTypeV const&,md::ls::AssociationTileHandle const&,md::ls::GlobeMatrixData const&,md::ls::TileMatrix const&,md::ls::FlyoverOctileKey const&>)::$_0,std::allocator<md::ita::CollectFlyoverMeshRenderables::operator()(ecs2::Query<md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::FlyoverRenderable> const&,md::ls::MapDataTypeV const&,md::ls::AssociationTileHandle const&,md::ls::GlobeMatrixData const&,md::ls::TileMatrix const&,md::ls::FlyoverOctileKey const&>)::$_0>,void ()(md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::FlyoverRenderable> const&,md::ls::MapDataTypeV const&,md::ls::AssociationTileHandle const&,md::ls::GlobeMatrixData const&,md::ls::TileMatrix const&,md::ls::FlyoverOctileKey const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E42F2A40;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<md::ita::CollectFlyoverMeshRenderables::operator()(ecs2::Query<md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::FlyoverRenderable> const&,md::ls::MapDataTypeV const&,md::ls::AssociationTileHandle const&,md::ls::GlobeMatrixData const&,md::ls::TileMatrix const&,md::ls::FlyoverOctileKey const&>)::$_0,std::allocator<md::ita::CollectFlyoverMeshRenderables::operator()(ecs2::Query<md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::FlyoverRenderable> const&,md::ls::MapDataTypeV const&,md::ls::AssociationTileHandle const&,md::ls::GlobeMatrixData const&,md::ls::TileMatrix const&,md::ls::FlyoverOctileKey const&>)::$_0>,void ()(md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::FlyoverRenderable> const&,md::ls::MapDataTypeV const&,md::ls::AssociationTileHandle const&,md::ls::GlobeMatrixData const&,md::ls::TileMatrix const&,md::ls::FlyoverOctileKey const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E42F2A40;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::ita::CollectFlyoverMeshRenderables::operator()(ecs2::Query<md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::FlyoverRenderable> const&,md::ls::MapDataTypeV const&,md::ls::AssociationTileHandle const&,md::ls::GlobeMatrixData const&,md::ls::TileMatrix const&,md::ls::FlyoverOctileKey const&>)::$_0,std::allocator<md::ita::CollectFlyoverMeshRenderables::operator()(ecs2::Query<md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::FlyoverRenderable> const&,md::ls::MapDataTypeV const&,md::ls::AssociationTileHandle const&,md::ls::GlobeMatrixData const&,md::ls::TileMatrix const&,md::ls::FlyoverOctileKey const&>)::$_0>,void ()(md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::FlyoverRenderable> const&,md::ls::MapDataTypeV const&,md::ls::AssociationTileHandle const&,md::ls::GlobeMatrixData const&,md::ls::TileMatrix const&,md::ls::FlyoverOctileKey const&)>::operator()(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, unint64_t *a7, _OWORD *a8, uint64_t *a9, char *a10)
{
  md::ita::CollectFlyoverMeshRenderables::operator()(ecs2::Query<md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::FlyoverRenderable> const&,md::ls::MapDataTypeV const&,md::ls::AssociationTileHandle const&,md::ls::GlobeMatrixData const&,md::ls::TileMatrix const&,md::ls::FlyoverOctileKey const&>)::$_0::operator()((uint64_t **)(a1 + 8), a2, *a4, a7, a8, a9, a10);
}

void md::ita::CollectFlyoverMeshRenderables::operator()(ecs2::Query<md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::FlyoverRenderable> const&,md::ls::MapDataTypeV const&,md::ls::AssociationTileHandle const&,md::ls::GlobeMatrixData const&,md::ls::TileMatrix const&,md::ls::FlyoverOctileKey const&>)::$_0::operator()(uint64_t **a1, _QWORD *a2, uint64_t a3, unint64_t *a4, _OWORD *a5, uint64_t *a6, char *a7)
{
  uint64_t v7;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  _QWORD *v42;
  uint64_t *v43;
  char *v44;
  unint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t *v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  char *v52;
  unint64_t v53;
  _OWORD *v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  __int128 v61;
  char *v62;
  char *v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  char *v74;
  unint64_t v75;
  _QWORD *v76;
  char *v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  _BYTE *v81;
  _QWORD *v82;
  char *v83;
  unint64_t v84;
  uint64_t v85;
  _OWORD *v86;
  char *v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  uint64_t *v91;
  unint64_t v92;
  uint8x8_t v93;
  _QWORD *v94;
  _QWORD *v95;
  unint64_t v96;
  uint64_t v97;
  char *v98;
  float v99;
  float v100;
  _BOOL8 v101;
  unint64_t v102;
  unint64_t v103;
  size_t prime;
  unint64_t v105;
  uint8x8_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  _QWORD *v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t *v120;
  uint64_t v121;
  uint64_t *v122;
  unint64_t v123;
  _QWORD *v124;
  char *v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  char *v129;
  uint64_t *v130;
  char *v131;
  unint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t *v135;
  uint64_t v136;
  __int128 v137;
  uint64_t v138;
  _QWORD *v139;
  unint64_t v140;
  _QWORD *v141;
  _QWORD *v142;
  unint64_t v143;
  unint64_t v144;
  char *v145;
  char *v146;
  char *v147;
  __int128 v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  char *v152;
  unint64_t v153;
  _QWORD *v154;
  char *v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;
  _BYTE *v159;
  _QWORD *v160;
  char *v161;
  unint64_t v162;
  uint64_t v163;
  _OWORD *v164;
  char *v165;
  uint64_t v166;
  __int128 v167;
  uint64_t v168;
  uint64_t *v169;
  unint64_t v170;
  uint8x8_t v171;
  _QWORD *v172;
  _QWORD *v173;
  unint64_t v174;
  uint64_t v175;
  char *v176;
  float v177;
  float v178;
  _BOOL8 v179;
  unint64_t v180;
  unint64_t v181;
  size_t v182;
  BOOL v183;
  unint64_t v184;
  uint8x8_t v185;
  uint64_t v186;
  uint64_t v187;
  _QWORD *v188;
  unint64_t v189;
  uint64_t v190;
  _QWORD *v191;
  _QWORD *v192;
  uint64_t v193;
  _QWORD *v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t *v198;
  uint64_t v199;
  uint64_t *v200;
  BOOL v201;
  void *v202;
  _OWORD *v203;
  char *v204;
  uint64_t *v205;
  uint64_t v206;
  _QWORD *v207;
  char v208;
  char v209;
  uint64_t v210;
  char *v211;
  char v212;
  char v213;
  uint64_t v214;
  _OWORD *v215;
  unsigned __int8 *v216;
  _OWORD *v217;
  uint64_t v218;
  unsigned __int8 *v219;
  uint64_t *v220;
  uint64_t v221;
  uint64_t v222;
  _QWORD *v223;
  uint64_t v224;
  unint64_t v225;
  _QWORD *v226;
  _QWORD *v227;
  uint64_t v228;
  uint64_t v229;
  _QWORD *v230;
  _QWORD *v231;
  uint64_t v232;
  _QWORD *v233;
  _QWORD *v234;
  uint64_t v235;
  __int128 v236;
  _QWORD *v237;
  char *v238;
  __int128 v239;
  _QWORD *v240;
  uint64_t v241;
  uint64_t v242;
  _QWORD *v243;
  _QWORD *v244;
  uint64_t v245;
  _QWORD *v246;
  _QWORD *v247;
  uint64_t v248;
  _QWORD *v249;
  _QWORD *v250;
  uint64_t v251;
  uint64_t v252;
  _QWORD *v253;
  _QWORD *v254;
  uint64_t v255;
  _QWORD *v256;
  _QWORD *v257;
  uint64_t v258;
  _QWORD *v259;
  _QWORD *v260;
  uint64_t v261;
  _QWORD *v262;
  _QWORD *v263;
  uint64_t v264;
  uint64_t v265;
  _QWORD *v266;
  char *v267;
  _QWORD *v268;
  uint64_t v269;
  _QWORD *v270;
  _QWORD *v271;
  uint64_t v272;
  _QWORD *v273;
  _QWORD *v274;
  uint64_t v275;
  __int128 v276;
  _QWORD *v277;
  char *v278;
  __int128 v279;
  __int128 *v280;
  uint64_t v281;
  int v282;
  char v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  _QWORD *v290;
  char *v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  _QWORD *v298;
  uint64_t v299;
  _QWORD *v300;
  uint64_t v301;
  _QWORD *v302;
  uint64_t v303;
  _QWORD *v304;
  _QWORD *v305;
  uint64_t v306;
  unint64_t v307;
  uint64_t v308;
  _QWORD *v309;
  _QWORD *v310;
  _QWORD *v311;
  uint64_t v312;
  uint64_t v313;
  _QWORD *v314;
  _QWORD *v315;
  uint64_t v316;
  _QWORD *AssociationItemStorage;
  _QWORD *v318;
  unint64_t v319;
  unint64_t *v320;
  _QWORD *v321;
  char *v322;
  uint64_t v323;
  unint64_t v324;
  uint64_t v325;
  unint64_t v326;
  char *v327;
  unint64_t *v328;
  unint64_t v329;
  uint64_t v330;
  char *v331;
  unint64_t *v332;
  uint64_t v333;
  __int128 v334;
  unint64_t v335;
  _QWORD *v336;
  _QWORD *v337;
  uint64_t v338;
  uint64_t FlyoverSharedConstantDataHandle;
  _QWORD *v340;
  _QWORD *v341;
  uint64_t v342;
  uint64_t *v343;
  uint64_t v344;
  uint64_t v345;
  std::__shared_mutex_base *v346;
  unint64_t v347;
  unint64_t v348;
  float *v349;
  unint64_t v350;
  uint64_t v351;
  uint64_t v352;
  _QWORD *v353;
  _QWORD *v354;
  _QWORD *v355;
  _QWORD *v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  std::__shared_mutex_base *v360;
  unint64_t v361;
  unint64_t v362;
  float *v363;
  unint64_t v364;
  uint64_t v365;
  uint64_t v366;
  _QWORD *v367;
  _QWORD *v368;
  _QWORD *v369;
  _QWORD *v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  unint64_t v375;
  uint64_t v376;
  uint64_t *v377;
  unint64_t v378;
  _QWORD *v379;
  char *v380;
  uint64_t v381;
  unint64_t v382;
  uint64_t v383;
  unint64_t v384;
  char *v385;
  uint64_t *v386;
  unint64_t v387;
  uint64_t v388;
  char *v389;
  uint64_t *v390;
  uint64_t v391;
  __int128 v392;
  uint64_t v393;
  _QWORD *v394;
  unint64_t v395;
  _QWORD *v396;
  _QWORD *v397;
  unint64_t v398;
  unint64_t v399;
  unint64_t v400;
  char *v401;
  char *v402;
  char *v403;
  __int128 v404;
  _QWORD *v405;
  std::__shared_weak_count *v406;
  unint64_t *v407;
  unint64_t v408;
  unint64_t v409;
  unint64_t v410;
  _QWORD *v411;
  _BYTE *v412;
  uint64_t v413;
  unint64_t v414;
  uint64_t v415;
  unint64_t v416;
  _BYTE *v417;
  _QWORD *v418;
  unint64_t v419;
  uint64_t v420;
  _OWORD *v421;
  __int128 *v422;
  uint64_t v423;
  __int128 v424;
  uint64_t v425;
  uint64_t *v426;
  unint64_t v427;
  uint8x8_t v428;
  _QWORD *v429;
  _QWORD *v430;
  unint64_t v431;
  uint64_t v432;
  char *v433;
  float v434;
  float v435;
  _BOOL8 v436;
  unint64_t v437;
  unint64_t v438;
  size_t v439;
  unint64_t v440;
  uint8x8_t v441;
  uint64_t v442;
  uint64_t v443;
  _QWORD *v444;
  unint64_t v445;
  _QWORD *v446;
  _QWORD *v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  unint64_t v452;
  uint64_t v453;
  uint64_t *v454;
  unint64_t v455;
  _QWORD *v456;
  char *v457;
  uint64_t v458;
  unint64_t v459;
  uint64_t v460;
  unint64_t v461;
  char *v462;
  uint64_t *v463;
  unint64_t v464;
  uint64_t v465;
  char *v466;
  uint64_t *v467;
  uint64_t v468;
  __int128 v469;
  uint64_t v470;
  _QWORD *v471;
  unint64_t v472;
  _QWORD *v473;
  _QWORD *v474;
  unint64_t v475;
  unint64_t v476;
  unint64_t v477;
  char *v478;
  char *v479;
  char *v480;
  __int128 v481;
  _QWORD *v482;
  std::__shared_weak_count *v483;
  unint64_t *v484;
  unint64_t v485;
  unint64_t v486;
  unint64_t v487;
  _QWORD *v488;
  _BYTE *v489;
  uint64_t v490;
  unint64_t v491;
  uint64_t v492;
  unint64_t v493;
  _BYTE *v494;
  _QWORD *v495;
  unint64_t v496;
  uint64_t v497;
  _OWORD *v498;
  __int128 *v499;
  uint64_t v500;
  __int128 v501;
  uint64_t v502;
  uint64_t *v503;
  unint64_t v504;
  uint8x8_t v505;
  _QWORD *v506;
  _QWORD *v507;
  unint64_t v508;
  uint64_t v509;
  char *v510;
  float v511;
  float v512;
  _BOOL8 v513;
  unint64_t v514;
  unint64_t v515;
  size_t v516;
  unint64_t v517;
  uint8x8_t v518;
  uint64_t v519;
  uint64_t v520;
  _QWORD *v521;
  unint64_t v522;
  _QWORD *v523;
  _QWORD *v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  unint64_t v529;
  uint64_t v530;
  uint64_t *v531;
  unint64_t v532;
  _QWORD *v533;
  char *v534;
  uint64_t v535;
  unint64_t v536;
  uint64_t v537;
  unint64_t v538;
  char *v539;
  uint64_t *v540;
  unint64_t v541;
  uint64_t v542;
  char *v543;
  uint64_t *v544;
  uint64_t v545;
  __int128 v546;
  uint64_t v547;
  _QWORD *v548;
  unint64_t v549;
  _QWORD *v550;
  _QWORD *v551;
  unint64_t v552;
  unint64_t v553;
  unint64_t v554;
  char *v555;
  char *v556;
  char *v557;
  __int128 v558;
  _QWORD *v559;
  std::__shared_weak_count *v560;
  unint64_t *v561;
  unint64_t v562;
  size_t v563;
  size_t v564;
  size_t v565;
  _BYTE *v566;
  uint64_t v567;
  unint64_t v568;
  uint64_t v569;
  unint64_t v570;
  _BYTE *v571;
  _QWORD *v572;
  unint64_t v573;
  uint64_t v574;
  _OWORD *v575;
  __int128 *v576;
  uint64_t v577;
  __int128 v578;
  uint64_t v579;
  uint64_t *v580;
  unint64_t v581;
  uint8x8_t v582;
  _QWORD *v583;
  _QWORD *v584;
  unint64_t v585;
  uint64_t v586;
  char *v587;
  float v588;
  float v589;
  _BOOL8 v590;
  unint64_t v591;
  unint64_t v592;
  unint64_t v593;
  uint8x8_t v594;
  uint64_t v595;
  uint64_t v596;
  _QWORD *v597;
  unint64_t v598;
  uint64_t v599;
  uint64_t v600;
  unsigned int v601;
  uint64_t v602;
  uint64_t v603;
  _QWORD *v604;
  unint64_t v605;
  uint8x8_t v606;
  _QWORD **v607;
  _QWORD *v608;
  unint64_t v609;
  uint64_t v610;
  _QWORD *v611;
  float v612;
  float v613;
  _BOOL8 v614;
  unint64_t v615;
  unint64_t v616;
  size_t v617;
  void *v618;
  void *v619;
  uint64_t v620;
  _QWORD *v621;
  size_t v622;
  size_t v623;
  size_t v624;
  _QWORD *v625;
  size_t v626;
  uint64_t v627;
  uint64_t v628;
  unint64_t v629;
  uint8x8_t v630;
  uint64_t v631;
  _QWORD *v632;
  uint64_t v633;
  size_t v634;
  uint64_t v635;
  void *v636;
  uint64_t v637;
  _QWORD *v638;
  unint64_t v639;
  uint64_t v640;
  _QWORD *v641;
  unint64_t v642;
  _QWORD *v643;
  _QWORD *v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  unint64_t v649;
  uint64_t v650;
  uint64_t *v651;
  unint64_t v652;
  _QWORD *v653;
  char *v654;
  uint64_t v655;
  unint64_t v656;
  uint64_t v657;
  unint64_t v658;
  char *v659;
  uint64_t *v660;
  unint64_t v661;
  uint64_t v662;
  char *v663;
  uint64_t *v664;
  uint64_t v665;
  __int128 v666;
  uint64_t v667;
  _QWORD *v668;
  unint64_t v669;
  _QWORD *v670;
  _QWORD *v671;
  unint64_t v672;
  unint64_t v673;
  unint64_t v674;
  char *v675;
  char *v676;
  char *v677;
  __int128 v678;
  _QWORD *v679;
  std::__shared_weak_count *v680;
  unint64_t *v681;
  unint64_t v682;
  size_t v683;
  size_t v684;
  size_t v685;
  _BYTE *v686;
  uint64_t v687;
  unint64_t v688;
  uint64_t v689;
  unint64_t v690;
  _BYTE *v691;
  _QWORD *v692;
  unint64_t v693;
  uint64_t v694;
  _OWORD *v695;
  __int128 *v696;
  uint64_t v697;
  __int128 v698;
  uint64_t v699;
  uint64_t *v700;
  unint64_t v701;
  uint8x8_t v702;
  _QWORD *v703;
  _QWORD *v704;
  unint64_t v705;
  uint64_t v706;
  char *v707;
  float v708;
  float v709;
  _BOOL8 v710;
  unint64_t v711;
  unint64_t v712;
  unint64_t v713;
  uint8x8_t v714;
  uint64_t v715;
  uint64_t v716;
  _QWORD *v717;
  unint64_t v718;
  uint64_t v719;
  uint64_t v720;
  unsigned int v721;
  uint64_t v722;
  _QWORD *v723;
  _QWORD *v724;
  unint64_t v725;
  uint8x8_t v726;
  _QWORD **v727;
  _QWORD *v728;
  unint64_t v729;
  uint64_t v730;
  _QWORD *v731;
  float v732;
  float v733;
  _BOOL8 v734;
  unint64_t v735;
  unint64_t v736;
  size_t v737;
  void *v738;
  void *v739;
  uint64_t v740;
  _QWORD *v741;
  size_t v742;
  size_t v743;
  size_t v744;
  _QWORD *v745;
  size_t v746;
  uint64_t v747;
  uint64_t v748;
  unint64_t v749;
  uint8x8_t v750;
  uint64_t v751;
  _QWORD *v752;
  uint64_t v753;
  size_t v754;
  uint64_t v755;
  void *v756;
  uint64_t v757;
  _QWORD *v758;
  unint64_t v759;
  uint64_t v760;
  _QWORD *v761;
  unint64_t v762;
  _QWORD *v763;
  _QWORD *v764;
  uint64_t v765;
  _QWORD *v766;
  _QWORD *v767;
  uint64_t v768;
  int v769;
  _QWORD *v770;
  uint64_t v771;
  _QWORD *v772;
  uint64_t v773;
  uint64_t v774;
  _QWORD *v775;
  _QWORD *v776;
  _QWORD *v777;
  md::VKMRenderResourcesStore *v778;
  _QWORD *v779;
  _QWORD *v780;
  uint64_t v781;
  BOOL v782;
  _QWORD *v783;
  unint64_t v784;
  ggl::DeviceData *v785;
  std::__shared_weak_count *v786;
  unint64_t *v787;
  unint64_t v788;
  unint64_t DeviceDataHandle;
  _QWORD *v790;
  uint64_t v791;
  unint64_t *v792;
  unint64_t v793;
  _QWORD *v794;
  _QWORD *v795;
  unint64_t v796;
  BOOL v797;
  _QWORD *v798;
  unint64_t v799;
  _QWORD *v800;
  unint64_t *v801;
  ggl::DeviceData *v802;
  std::__shared_weak_count *v803;
  unint64_t *v804;
  unint64_t v805;
  unint64_t v806;
  _QWORD *v807;
  uint64_t v808;
  unint64_t *v809;
  unint64_t v810;
  _QWORD *v811;
  _QWORD *v812;
  unint64_t *v813;
  ggl::DeviceData *v814;
  std::__shared_weak_count *v815;
  unint64_t *v816;
  unint64_t v817;
  unint64_t v818;
  _QWORD *v819;
  uint64_t v820;
  unint64_t *v821;
  unint64_t v822;
  _QWORD *v823;
  char *v824;
  _QWORD *v825;
  uint64_t v826;
  uint64_t v827;
  _QWORD *v828;
  _QWORD *v829;
  uint64_t v830;
  uint64_t v831;
  _QWORD *v832;
  _QWORD *v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  unint64_t *v837;
  unint64_t v838;
  _QWORD *v839;
  _QWORD *v840;
  _QWORD *v841;
  uint64_t v842;
  _QWORD *v843;
  uint64_t v844;
  _QWORD *v845;
  uint64_t v846;
  _QWORD *v847;
  uint64_t v848;
  _QWORD *v849;
  uint64_t v850;
  _QWORD *v851;
  uint64_t v852;
  _QWORD *v853;
  uint64_t v854;
  unsigned int v855;
  _QWORD *v856;
  _QWORD *v857;
  uint64_t v858;
  uint64_t v859;
  _QWORD *v860;
  unint64_t *v861;
  unint64_t v862;
  std::__shared_weak_count *v863;
  uint64_t v864;
  char *v866;
  unint64_t v867;
  _OWORD *v868;
  char *v869;
  char *v870;
  _QWORD *v871;
  __int128 *v872;
  int v873;
  unint64_t v874;
  unint64_t v875;
  unint64_t v878;
  unint64_t *v879;
  _QWORD *v880;
  uint64_t *v881;
  char *v882;
  uint64_t v883;
  uint64_t *v885;
  uint64_t v886;
  unint64_t v887;
  uint64_t v888;
  unsigned __int8 *v889;
  unint64_t v890;
  _QWORD *v891;
  void *__p;
  char *v893;
  _BYTE v894[135];
  _BYTE v895[24];
  _BYTE *v896;
  __int128 v897;
  __int128 v898;
  int v899;
  _BYTE v900[32];
  __int128 v901;
  __int128 v902;
  uint64_t v903;
  _BYTE v904[23];
  uint64_t v905;

  v905 = *MEMORY[0x1E0C80C00];
  v885 = a1[1];
  v10 = (_QWORD *)**a1;
  v11 = v10[1254];
  if (a3 < (unint64_t)((v10[1255] - v11) >> 3)
    && (v12 = *(_QWORD *)(v11 + 8 * a3)) != 0
    && HIDWORD(a3) == HIDWORD(v12)
    && ((v13 = v10[1257], v14 = (_QWORD *)(v13 + 8 * v12), v14 != (_QWORD *)v10[1258])
      ? (v15 = v13 == 0)
      : (v15 = 1),
        !v15))
  {
    v42 = (_QWORD *)*v14;
  }
  else
  {
    v42 = 0;
  }
  v16 = v42[29];
  v863 = (std::__shared_weak_count *)v42[30];
  if (v863)
  {
    p_shared_owners = (unint64_t *)&v863->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
    v10 = (_QWORD *)**a1;
  }
  v19 = v42[27];
  *(_QWORD *)&v900[8] = 0;
  *(_QWORD *)&v900[16] = 0;
  *(_QWORD *)v900 = v19;
  v20 = geo::packed_array<md::ConstantDataStorage<ggl::Tile::View>,geo::handle<md::ConstantDataResource<ggl::Tile::View>>>::push_back(v10 + 436, (uint64_t)v900);
  *(int64x2_t *)v894 = vdupq_n_s64(1uLL);
  v894[16] = 0;
  std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::View>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::Tile::View>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::View>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::Tile::View>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::Tile::View>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::Tile::View>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::View>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::Tile::View>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::Tile::View>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::View>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::Tile::View>>,geo::handle<md::ConstantDataResource<ggl::Tile::View>> const&,md::Counter>((uint64_t)(v10 + 431), v20, v20, (uint64_t)v894);
  v21 = *(std::__shared_weak_count **)&v900[16];
  if (*(_QWORD *)&v900[16])
  {
    v22 = (unint64_t *)(*(_QWORD *)&v900[16] + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v875 = v20;
  v24 = **a1;
  v25 = a5[5];
  *(_OWORD *)&v894[64] = a5[4];
  *(_OWORD *)&v894[80] = v25;
  v26 = a5[7];
  *(_OWORD *)&v894[96] = a5[6];
  *(_OWORD *)&v894[112] = v26;
  v27 = a5[1];
  *(_OWORD *)v894 = *a5;
  *(_OWORD *)&v894[16] = v27;
  v28 = a5[3];
  *(_OWORD *)&v894[32] = a5[2];
  *(_OWORD *)&v894[48] = v28;
  v29 = *(_QWORD *)(v24 + 9136);
  v880 = v42;
  v891 = a2;
  if (*(_QWORD *)(v24 + 9128) == v29)
  {
    v32 = ((*(_QWORD *)(v24 + 9184) - *(_QWORD *)(v24 + 9176)) >> 7) | 0x100000000;
    v33 = *(uint64_t **)(v24 + 9160);
    v34 = *(_QWORD *)(v24 + 9168);
    if ((unint64_t)v33 >= v34)
    {
      v36 = *(char **)(v24 + 9152);
      v37 = ((char *)v33 - v36) >> 3;
      v38 = v37 + 1;
      if ((unint64_t)(v37 + 1) >> 61)
        goto LABEL_1422;
      v39 = v34 - (_QWORD)v36;
      if (v39 >> 2 > v38)
        v38 = v39 >> 2;
      if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8)
        v40 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v40 = v38;
      if (v40)
      {
        if (v40 >> 61)
          goto LABEL_1416;
        v41 = (char *)operator new(8 * v40);
      }
      else
      {
        v41 = 0;
      }
      v43 = (uint64_t *)&v41[8 * v37];
      v44 = &v41[8 * v40];
      *v43 = v32;
      v35 = v43 + 1;
      if (v33 != (uint64_t *)v36)
      {
        v45 = (char *)v33 - v36 - 8;
        if (v45 < 0x58)
          goto LABEL_1426;
        if ((unint64_t)(v36 - v41) < 0x20)
          goto LABEL_1426;
        v46 = (v45 >> 3) + 1;
        v47 = &v41[8 * v37 - 16];
        v48 = v33 - 2;
        v49 = v46 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v50 = *(_OWORD *)v48;
          *((_OWORD *)v47 - 1) = *((_OWORD *)v48 - 1);
          *(_OWORD *)v47 = v50;
          v47 -= 32;
          v48 -= 4;
          v49 -= 4;
        }
        while (v49);
        v43 -= v46 & 0x3FFFFFFFFFFFFFFCLL;
        v33 -= v46 & 0x3FFFFFFFFFFFFFFCLL;
        if (v46 != (v46 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_1426:
          do
          {
            v51 = *--v33;
            *--v43 = v51;
          }
          while (v33 != (uint64_t *)v36);
        }
        v33 = *(uint64_t **)(v24 + 9152);
      }
      *(_QWORD *)(v24 + 9152) = v43;
      *(_QWORD *)(v24 + 9160) = v35;
      *(_QWORD *)(v24 + 9168) = v44;
      if (v33)
        operator delete(v33);
    }
    else
    {
      *v33 = v32;
      v35 = v33 + 1;
    }
    *(_QWORD *)(v24 + 9160) = v35;
    v31 = *(v35 - 1);
  }
  else
  {
    v30 = *(_QWORD *)(v29 - 8);
    *(_QWORD *)(v24 + 9136) = v29 - 8;
    *(_DWORD *)(*(_QWORD *)(v24 + 9152) + 8 * v30) = (*(_QWORD *)(v24 + 9184) - *(_QWORD *)(v24 + 9176)) >> 7;
    *(_DWORD *)(*(_QWORD *)(v24 + 9152) + 8 * v30 + 4) = (((unint64_t)*(unsigned int *)(*(_QWORD *)(v24 + 9152)
                                                                                             + 8 * v30
                                                                                             + 4) << 32)
                                                        + 0x100000000) >> 32;
    v31 = v30 | ((unint64_t)*(unsigned int *)(*(_QWORD *)(v24 + 9152) + 8 * v30 + 4) << 32);
  }
  v52 = *(char **)(v24 + 9184);
  v53 = *(_QWORD *)(v24 + 9192);
  v878 = v31;
  if ((unint64_t)v52 >= v53)
  {
    v55 = *(char **)(v24 + 9176);
    v56 = (v52 - v55) >> 7;
    v57 = v56 + 1;
    if ((unint64_t)(v56 + 1) >> 57)
      goto LABEL_1422;
    v58 = v53 - (_QWORD)v55;
    if (v58 >> 6 > v57)
      v57 = v58 >> 6;
    if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFF80)
      v59 = 0x1FFFFFFFFFFFFFFLL;
    else
      v59 = v57;
    if (v59)
    {
      if (v59 >> 57)
        goto LABEL_1416;
      v60 = (char *)operator new(v59 << 7);
    }
    else
    {
      v60 = 0;
    }
    v61 = *(_OWORD *)&v894[80];
    v62 = &v60[128 * v56];
    *((_OWORD *)v62 + 4) = *(_OWORD *)&v894[64];
    *((_OWORD *)v62 + 5) = v61;
    v63 = &v60[128 * v59];
    v64 = *(_OWORD *)&v894[112];
    *((_OWORD *)v62 + 6) = *(_OWORD *)&v894[96];
    *((_OWORD *)v62 + 7) = v64;
    v65 = *(_OWORD *)&v894[16];
    *(_OWORD *)v62 = *(_OWORD *)v894;
    *((_OWORD *)v62 + 1) = v65;
    v66 = *(_OWORD *)&v894[48];
    v54 = v62 + 128;
    *((_OWORD *)v62 + 2) = *(_OWORD *)&v894[32];
    *((_OWORD *)v62 + 3) = v66;
    v31 = v878;
    if (v52 != v55)
    {
      do
      {
        v67 = *((_OWORD *)v52 - 8);
        v68 = *((_OWORD *)v52 - 7);
        v69 = *((_OWORD *)v52 - 5);
        *((_OWORD *)v62 - 6) = *((_OWORD *)v52 - 6);
        *((_OWORD *)v62 - 5) = v69;
        *((_OWORD *)v62 - 8) = v67;
        *((_OWORD *)v62 - 7) = v68;
        v70 = *((_OWORD *)v52 - 4);
        v71 = *((_OWORD *)v52 - 3);
        v72 = *((_OWORD *)v52 - 1);
        *((_OWORD *)v62 - 2) = *((_OWORD *)v52 - 2);
        *((_OWORD *)v62 - 1) = v72;
        *((_OWORD *)v62 - 4) = v70;
        *((_OWORD *)v62 - 3) = v71;
        v62 -= 128;
        v52 -= 128;
      }
      while (v52 != v55);
      v52 = *(char **)(v24 + 9176);
    }
    *(_QWORD *)(v24 + 9176) = v62;
    *(_QWORD *)(v24 + 9184) = v54;
    *(_QWORD *)(v24 + 9192) = v63;
    if (v52)
      operator delete(v52);
  }
  else
  {
    *((_OWORD *)v52 + 4) = *(_OWORD *)&v894[64];
    *((_OWORD *)v52 + 5) = *(_OWORD *)&v894[80];
    *((_OWORD *)v52 + 6) = *(_OWORD *)&v894[96];
    *((_OWORD *)v52 + 7) = *(_OWORD *)&v894[112];
    *(_OWORD *)v52 = *(_OWORD *)v894;
    *((_OWORD *)v52 + 1) = *(_OWORD *)&v894[16];
    *((_OWORD *)v52 + 2) = *(_OWORD *)&v894[32];
    *((_OWORD *)v52 + 3) = *(_OWORD *)&v894[48];
    v54 = v52 + 128;
  }
  *(_QWORD *)(v24 + 9184) = v54;
  v73 = v31;
  v74 = *(char **)(v24 + 9208);
  v75 = *(_QWORD *)(v24 + 9216);
  if ((unint64_t)v74 < v75)
  {
    *(_QWORD *)v74 = v31;
    v76 = v74 + 8;
    goto LABEL_82;
  }
  v77 = *(char **)(v24 + 9200);
  v31 = (v74 - v77) >> 3;
  v78 = v31 + 1;
  if ((v31 + 1) >> 61)
LABEL_1422:
    abort();
  v79 = v75 - (_QWORD)v77;
  if (v79 >> 2 > v78)
    v78 = v79 >> 2;
  if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFF8)
    v80 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v80 = v78;
  if (v80)
  {
    if (v80 >> 61)
      goto LABEL_1416;
    v81 = operator new(8 * v80);
  }
  else
  {
    v81 = 0;
  }
  v82 = &v81[8 * v31];
  v83 = &v81[8 * v80];
  *v82 = v73;
  v76 = v82 + 1;
  if (v74 != v77)
  {
    v84 = v74 - v77 - 8;
    if (v84 < 0x58)
      goto LABEL_1427;
    if ((unint64_t)(v77 - v81) < 0x20)
      goto LABEL_1427;
    v85 = (v84 >> 3) + 1;
    v86 = &v81[8 * v31 - 16];
    v87 = v74 - 16;
    v88 = v85 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v89 = *(_OWORD *)v87;
      *(v86 - 1) = *((_OWORD *)v87 - 1);
      *v86 = v89;
      v86 -= 2;
      v87 -= 32;
      v88 -= 4;
    }
    while (v88);
    v82 -= v85 & 0x3FFFFFFFFFFFFFFCLL;
    v74 -= 8 * (v85 & 0x3FFFFFFFFFFFFFFCLL);
    if (v85 != (v85 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_1427:
      do
      {
        v90 = *((_QWORD *)v74 - 1);
        v74 -= 8;
        *--v82 = v90;
      }
      while (v74 != v77);
    }
  }
  *(_QWORD *)(v24 + 9200) = v82;
  *(_QWORD *)(v24 + 9208) = v76;
  *(_QWORD *)(v24 + 9216) = v83;
  if (v77)
    operator delete(v77);
LABEL_82:
  v91 = (uint64_t *)(v24 + 9048);
  *(_QWORD *)(v24 + 9208) = v76;
  v92 = *(_QWORD *)(v24 + 9056);
  if (v92)
  {
    v93 = (uint8x8_t)vcnt_s8((int8x8_t)v92);
    v93.i16[0] = vaddlv_u8(v93);
    if (v93.u32[0] > 1uLL)
    {
      v31 = v878;
      if (v878 >= v92)
        v31 = v878 % v92;
    }
    else
    {
      v31 = (v92 - 1) & v878;
    }
    v94 = *(_QWORD **)(*v91 + 8 * v31);
    if (v94)
    {
      v95 = (_QWORD *)*v94;
      if (v95)
      {
        if (v93.u32[0] < 2uLL)
        {
          while (1)
          {
            v97 = v95[1];
            if (v97 == v878)
            {
              if (v95[2] == v878)
                goto LABEL_140;
            }
            else if ((v97 & (v92 - 1)) != v31)
            {
              goto LABEL_103;
            }
            v95 = (_QWORD *)*v95;
            if (!v95)
              goto LABEL_103;
          }
        }
        do
        {
          v96 = v95[1];
          if (v96 == v878)
          {
            if (v95[2] == v878)
              goto LABEL_140;
          }
          else
          {
            if (v96 >= v92)
              v96 %= v92;
            if (v96 != v31)
              break;
          }
          v95 = (_QWORD *)*v95;
        }
        while (v95);
      }
    }
  }
LABEL_103:
  v98 = (char *)operator new(0x30uLL);
  *(_QWORD *)v98 = 0;
  *((_QWORD *)v98 + 1) = v878;
  *((_QWORD *)v98 + 2) = v878;
  *(_OWORD *)(v98 + 24) = xmmword_19FFB3350;
  v98[40] = 0;
  v99 = (float)(unint64_t)(*(_QWORD *)(v24 + 9072) + 1);
  v100 = *(float *)(v24 + 9080);
  if (!v92 || (float)(v100 * (float)v92) < v99)
  {
    v101 = 1;
    if (v92 >= 3)
      v101 = (v92 & (v92 - 1)) != 0;
    v102 = v101 | (2 * v92);
    v103 = vcvtps_u32_f32(v99 / v100);
    if (v102 <= v103)
      prime = v103;
    else
      prime = v102;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v92 = *(_QWORD *)(v24 + 9056);
    }
    if (prime > v92)
      goto LABEL_115;
    if (prime < v92)
    {
      v105 = vcvtps_u32_f32((float)*(unint64_t *)(v24 + 9072) / *(float *)(v24 + 9080));
      if (v92 < 3 || (v106 = (uint8x8_t)vcnt_s8((int8x8_t)v92), v106.i16[0] = vaddlv_u8(v106), v106.u32[0] > 1uLL))
      {
        v105 = std::__next_prime(v105);
      }
      else
      {
        v107 = 1 << -(char)__clz(v105 - 1);
        if (v105 >= 2)
          v105 = v107;
      }
      if (prime <= v105)
        prime = v105;
      if (prime < v92)
LABEL_115:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(v24 + 9048, prime);
    }
    v92 = *(_QWORD *)(v24 + 9056);
    if ((v92 & (v92 - 1)) != 0)
    {
      v31 = v878;
      if (v878 >= v92)
        v31 = v878 % v92;
    }
    else
    {
      v31 = (v92 - 1) & v878;
    }
  }
  v108 = *v91;
  v109 = *(_QWORD **)(*v91 + 8 * v31);
  if (v109)
  {
    *(_QWORD *)v98 = *v109;
LABEL_138:
    *v109 = v98;
    goto LABEL_139;
  }
  *(_QWORD *)v98 = *(_QWORD *)(v24 + 9064);
  *(_QWORD *)(v24 + 9064) = v98;
  *(_QWORD *)(v108 + 8 * v31) = v24 + 9064;
  if (*(_QWORD *)v98)
  {
    v110 = *(_QWORD *)(*(_QWORD *)v98 + 8);
    if ((v92 & (v92 - 1)) != 0)
    {
      if (v110 >= v92)
        v110 %= v92;
    }
    else
    {
      v110 &= v92 - 1;
    }
    v109 = (_QWORD *)(*v91 + 8 * v110);
    goto LABEL_138;
  }
LABEL_139:
  ++*(_QWORD *)(v24 + 9072);
LABEL_140:
  v111 = **a1;
  *(_QWORD *)&v900[8] = 0;
  *(_QWORD *)&v900[16] = 0;
  *(_QWORD *)v900 = v16;
  v112 = geo::packed_array<md::ConstantDataStorage<ggl::Tile::View>,geo::handle<md::ConstantDataResource<ggl::Tile::View>>>::push_back((_QWORD *)(v111 + 3312), (uint64_t)v900);
  *(int64x2_t *)v894 = vdupq_n_s64(1uLL);
  v894[16] = 0;
  std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,geo::handle<md::ConstantDataResource<ggl::Tile::Transform>> const&,md::Counter>(v111 + 3272, v112, v112, (uint64_t)v894);
  v874 = v112;
  v113 = v880;
  v114 = *a1;
  v873 = *((unsigned __int8 *)v880 + 24);
  if (v873 != 255)
  {
    v115 = *v114;
    v116 = *(_QWORD *)(*v114 + 4840);
    v117 = *(_QWORD *)(*v114 + 4848);
    if (v116 == v117)
    {
      v121 = (-1431655765 * ((*(_QWORD *)(v115 + 4896) - *(_QWORD *)(v115 + 4888)) >> 3)) | 0x100000000;
      v122 = *(uint64_t **)(v115 + 4872);
      v123 = *(_QWORD *)(v115 + 4880);
      if ((unint64_t)v122 >= v123)
      {
        v125 = *(char **)(v115 + 4864);
        v31 = ((char *)v122 - v125) >> 3;
        v126 = v31 + 1;
        if ((v31 + 1) >> 61)
          goto LABEL_1423;
        v127 = v123 - (_QWORD)v125;
        if (v127 >> 2 > v126)
          v126 = v127 >> 2;
        if ((unint64_t)v127 >= 0x7FFFFFFFFFFFFFF8)
          v128 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v128 = v126;
        if (v128)
        {
          if (v128 >> 61)
            goto LABEL_1416;
          v129 = (char *)operator new(8 * v128);
        }
        else
        {
          v129 = 0;
        }
        v130 = (uint64_t *)&v129[8 * v31];
        v131 = &v129[8 * v128];
        *v130 = v121;
        v124 = v130 + 1;
        if (v122 != (uint64_t *)v125)
        {
          v132 = (char *)v122 - v125 - 8;
          if (v132 < 0x58)
            goto LABEL_1428;
          if ((unint64_t)(v125 - v129) < 0x20)
            goto LABEL_1428;
          v133 = (v132 >> 3) + 1;
          v134 = &v129[8 * v31 - 16];
          v135 = v122 - 2;
          v136 = v133 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v137 = *(_OWORD *)v135;
            *((_OWORD *)v134 - 1) = *((_OWORD *)v135 - 1);
            *(_OWORD *)v134 = v137;
            v134 -= 32;
            v135 -= 4;
            v136 -= 4;
          }
          while (v136);
          v130 -= v133 & 0x3FFFFFFFFFFFFFFCLL;
          v122 -= v133 & 0x3FFFFFFFFFFFFFFCLL;
          if (v133 != (v133 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_1428:
            do
            {
              v138 = *--v122;
              *--v130 = v138;
            }
            while (v122 != (uint64_t *)v125);
          }
          v122 = *(uint64_t **)(v115 + 4864);
        }
        *(_QWORD *)(v115 + 4864) = v130;
        *(_QWORD *)(v115 + 4872) = v124;
        *(_QWORD *)(v115 + 4880) = v131;
        if (v122)
          operator delete(v122);
      }
      else
      {
        *v122 = v121;
        v124 = v122 + 1;
      }
      *(_QWORD *)(v115 + 4872) = v124;
      v119 = *(v124 - 1);
    }
    else
    {
      v118 = *(_QWORD *)(v117 - 8);
      *(_QWORD *)(v115 + 4848) = v117 - 8;
      *(_DWORD *)(*(_QWORD *)(v115 + 4864) + 8 * v118) = -1431655765
                                                       * ((*(_QWORD *)(v115 + 4896) - *(_QWORD *)(v115 + 4888)) >> 3);
      *(_DWORD *)(*(_QWORD *)(v115 + 4864) + 8 * v118 + 4) = (((unint64_t)*(unsigned int *)(*(_QWORD *)(v115 + 4864)
                                                                                                 + 8 * v118
                                                                                                 + 4) << 32)
                                                            + 0x100000000) >> 32;
      v119 = v118 | ((unint64_t)*(unsigned int *)(*(_QWORD *)(v115 + 4864) + 8 * v118 + 4) << 32);
    }
    v139 = *(_QWORD **)(v115 + 4896);
    v140 = *(_QWORD *)(v115 + 4904);
    if ((unint64_t)v139 >= v140)
    {
      v142 = *(_QWORD **)(v115 + 4888);
      v143 = 0xAAAAAAAAAAAAAAABLL * (v139 - v142) + 1;
      if (v143 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_1423;
      v144 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v140 - (_QWORD)v142) >> 3);
      if (2 * v144 > v143)
        v143 = 2 * v144;
      if (v144 >= 0x555555555555555)
        v31 = 0xAAAAAAAAAAAAAAALL;
      else
        v31 = v143;
      if (v31 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_1416;
      v145 = (char *)operator new(24 * v31);
      v146 = &v145[8 * (v139 - v142)];
      v147 = &v145[24 * v31];
      *(_QWORD *)v146 = 0;
      *((_QWORD *)v146 + 1) = 0;
      *((_QWORD *)v146 + 2) = 0;
      v141 = v146 + 24;
      if (v139 == v142)
      {
        *(_QWORD *)(v115 + 4888) = v146;
        *(_QWORD *)(v115 + 4896) = v141;
        *(_QWORD *)(v115 + 4904) = v147;
      }
      else
      {
        do
        {
          v148 = *(_OWORD *)(v139 - 3);
          v139 -= 3;
          *(_OWORD *)(v146 - 24) = v148;
          v146 -= 24;
          *((_QWORD *)v146 + 2) = v139[2];
          v139[1] = 0;
          v139[2] = 0;
        }
        while (v139 != v142);
        v139 = *(_QWORD **)(v115 + 4888);
        v31 = *(_QWORD *)(v115 + 4896);
        *(_QWORD *)(v115 + 4888) = v146;
        *(_QWORD *)(v115 + 4896) = v141;
        *(_QWORD *)(v115 + 4904) = v147;
        while ((_QWORD *)v31 != v139)
        {
          v149 = *(std::__shared_weak_count **)(v31 - 8);
          if (v149)
          {
            v150 = (unint64_t *)&v149->__shared_owners_;
            do
              v151 = __ldaxr(v150);
            while (__stlxr(v151 - 1, v150));
            if (!v151)
            {
              ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
              std::__shared_weak_count::__release_weak(v149);
            }
          }
          v31 -= 24;
        }
      }
      if (v139)
        operator delete(v139);
    }
    else
    {
      *v139 = 0;
      v139[1] = 0;
      v141 = v139 + 3;
      v139[2] = 0;
    }
    *(_QWORD *)(v115 + 4896) = v141;
    v152 = *(char **)(v115 + 4920);
    v153 = *(_QWORD *)(v115 + 4928);
    if ((unint64_t)v152 < v153)
    {
      *(_QWORD *)v152 = v119;
      v154 = v152 + 8;
      v113 = v880;
      goto LABEL_212;
    }
    v155 = *(char **)(v115 + 4912);
    v31 = (v152 - v155) >> 3;
    v156 = v31 + 1;
    if (!((v31 + 1) >> 61))
    {
      v157 = v153 - (_QWORD)v155;
      if (v157 >> 2 > v156)
        v156 = v157 >> 2;
      if ((unint64_t)v157 >= 0x7FFFFFFFFFFFFFF8)
        v158 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v158 = v156;
      if (v158)
      {
        if (v158 >> 61)
          goto LABEL_1416;
        v159 = operator new(8 * v158);
      }
      else
      {
        v159 = 0;
      }
      v160 = &v159[8 * v31];
      v161 = &v159[8 * v158];
      *v160 = v119;
      v154 = v160 + 1;
      if (v152 == v155)
      {
        v113 = v880;
      }
      else
      {
        v162 = v152 - v155 - 8;
        v113 = v880;
        if (v162 < 0x58)
          goto LABEL_1429;
        if ((unint64_t)(v155 - v159) < 0x20)
          goto LABEL_1429;
        v163 = (v162 >> 3) + 1;
        v164 = &v159[8 * v31 - 16];
        v165 = v152 - 16;
        v166 = v163 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v167 = *(_OWORD *)v165;
          *(v164 - 1) = *((_OWORD *)v165 - 1);
          *v164 = v167;
          v164 -= 2;
          v165 -= 32;
          v166 -= 4;
        }
        while (v166);
        v160 -= v163 & 0x3FFFFFFFFFFFFFFCLL;
        v152 -= 8 * (v163 & 0x3FFFFFFFFFFFFFFCLL);
        if (v163 != (v163 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_1429:
          do
          {
            v168 = *((_QWORD *)v152 - 1);
            v152 -= 8;
            *--v160 = v168;
          }
          while (v152 != v155);
        }
      }
      *(_QWORD *)(v115 + 4912) = v160;
      *(_QWORD *)(v115 + 4920) = v154;
      *(_QWORD *)(v115 + 4928) = v161;
      if (v155)
        operator delete(v155);
LABEL_212:
      *(_QWORD *)(v115 + 4920) = v154;
      v169 = (uint64_t *)(v115 + 4760);
      v170 = *(_QWORD *)(v115 + 4768);
      if (v170)
      {
        v171 = (uint8x8_t)vcnt_s8((int8x8_t)v170);
        v171.i16[0] = vaddlv_u8(v171);
        if (v171.u32[0] > 1uLL)
        {
          v31 = v119;
          if (v119 >= v170)
            v31 = v119 % v170;
        }
        else
        {
          v31 = (v170 - 1) & v119;
        }
        v172 = *(_QWORD **)(*v169 + 8 * v31);
        if (v172)
        {
          v173 = (_QWORD *)*v172;
          if (v173)
          {
            if (v171.u32[0] < 2uLL)
            {
              while (1)
              {
                v175 = v173[1];
                if (v175 == v119)
                {
                  if (v173[2] == v119)
                    goto LABEL_272;
                }
                else if ((v175 & (v170 - 1)) != v31)
                {
                  goto LABEL_233;
                }
                v173 = (_QWORD *)*v173;
                if (!v173)
                  goto LABEL_233;
              }
            }
            do
            {
              v174 = v173[1];
              if (v174 == v119)
              {
                if (v173[2] == v119)
                  goto LABEL_272;
              }
              else
              {
                if (v174 >= v170)
                  v174 %= v170;
                if (v174 != v31)
                  break;
              }
              v173 = (_QWORD *)*v173;
            }
            while (v173);
          }
        }
      }
LABEL_233:
      v176 = (char *)operator new(0x30uLL);
      *(_QWORD *)v176 = 0;
      *((_QWORD *)v176 + 1) = v119;
      *((_QWORD *)v176 + 2) = v119;
      *(_OWORD *)(v176 + 24) = xmmword_19FFB3350;
      v176[40] = 0;
      v177 = (float)(unint64_t)(*(_QWORD *)(v115 + 4784) + 1);
      v178 = *(float *)(v115 + 4792);
      if (v170 && (float)(v178 * (float)v170) >= v177)
      {
        v113 = v880;
        goto LABEL_262;
      }
      v179 = 1;
      if (v170 >= 3)
        v179 = (v170 & (v170 - 1)) != 0;
      v180 = v179 | (2 * v170);
      v181 = vcvtps_u32_f32(v177 / v178);
      if (v180 <= v181)
        v182 = v181;
      else
        v182 = v180;
      if (v182 == 1)
      {
        v182 = 2;
      }
      else if ((v182 & (v182 - 1)) != 0)
      {
        v113 = v880;
        v182 = std::__next_prime(v182);
        v170 = *(_QWORD *)(v115 + 4768);
        v183 = v182 >= v170;
        if (v182 > v170)
        {
LABEL_257:
          std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(v115 + 4760, v182);
LABEL_258:
          v170 = *(_QWORD *)(v115 + 4768);
          if ((v170 & (v170 - 1)) != 0)
          {
            v31 = v119;
            if (v119 >= v170)
              v31 = v119 % v170;
          }
          else
          {
            v31 = (v170 - 1) & v119;
          }
LABEL_262:
          v187 = *v169;
          v188 = *(_QWORD **)(*v169 + 8 * v31);
          if (v188)
          {
            *(_QWORD *)v176 = *v188;
          }
          else
          {
            *(_QWORD *)v176 = *(_QWORD *)(v115 + 4776);
            *(_QWORD *)(v115 + 4776) = v176;
            *(_QWORD *)(v187 + 8 * v31) = v115 + 4776;
            if (!*(_QWORD *)v176)
            {
LABEL_271:
              ++*(_QWORD *)(v115 + 4784);
LABEL_272:
              v190 = *(_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
              *(_QWORD *)v900 = &off_1E4281718;
              *(_QWORD *)&v900[8] = v119;
              *(_QWORD *)&v900[16] = v190;
              *(_QWORD *)&v900[24] = v900;
              *(_QWORD *)&v894[24] = v894;
              *(_QWORD *)v894 = &off_1E4281718;
              *(_OWORD *)&v894[8] = *(_OWORD *)&v900[8];
              *(_DWORD *)&v894[32] = 0;
              ecs2::Runtime::queueCommand(v191, (uint64_t)v894);
              if (*(_DWORD *)&v894[32] != -1)
                ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v894[32]])(&v897, v894);
              *(_DWORD *)&v894[32] = -1;
              v192 = *(_QWORD **)&v900[24];
              v120 = a4;
              if (*(_BYTE **)&v900[24] == v900)
              {
                v193 = 4;
                v192 = v900;
              }
              else
              {
                if (!*(_QWORD *)&v900[24])
                {
LABEL_279:
                  v114 = *a1;
                  goto LABEL_280;
                }
                v193 = 5;
              }
              (*(void (**)(void))(*v192 + 8 * v193))();
              goto LABEL_279;
            }
            v189 = *(_QWORD *)(*(_QWORD *)v176 + 8);
            if ((v170 & (v170 - 1)) != 0)
            {
              if (v189 >= v170)
                v189 %= v170;
            }
            else
            {
              v189 &= v170 - 1;
            }
            v188 = (_QWORD *)(*v169 + 8 * v189);
          }
          *v188 = v176;
          goto LABEL_271;
        }
LABEL_247:
        if (v183)
          goto LABEL_258;
        v184 = vcvtps_u32_f32((float)*(unint64_t *)(v115 + 4784) / *(float *)(v115 + 4792));
        if (v170 < 3 || (v185 = (uint8x8_t)vcnt_s8((int8x8_t)v170), v185.i16[0] = vaddlv_u8(v185), v185.u32[0] > 1uLL))
        {
          v184 = std::__next_prime(v184);
        }
        else
        {
          v186 = 1 << -(char)__clz(v184 - 1);
          if (v184 >= 2)
            v184 = v186;
        }
        if (v182 <= v184)
          v182 = v184;
        if (v182 >= v170)
          goto LABEL_258;
        goto LABEL_257;
      }
      v113 = v880;
      v183 = v182 >= v170;
      if (v182 > v170)
        goto LABEL_257;
      goto LABEL_247;
    }
LABEL_1423:
    abort();
  }
  v120 = a4;
  v119 = 0;
LABEL_280:
  v194 = (_QWORD *)*v114;
  v195 = *v891;
  v196 = v194[1232];
  if (v195 >= (v194[1233] - v196) >> 3)
  {
    v864 = 0;
    v198 = v885;
  }
  else
  {
    v197 = *(_QWORD *)(v196 + 8 * v195);
    v198 = v885;
    if (v197
      && HIDWORD(*v891) == HIDWORD(v197)
      && ((v199 = v194[1235], v200 = (uint64_t *)(v199 + 8 * v197), v200 != (uint64_t *)v194[1236])
        ? (v201 = v199 == 0)
        : (v201 = 1),
          !v201))
    {
      v864 = *v200;
    }
    else
    {
      v864 = 0;
    }
  }
  md::FlyoverCompleteTileDataContext::getOctileInstances((int64_t *)&__p, (int64_t *)*a1[2], (__int16 *)a7, *((_BYTE *)v113 + 48));
  v202 = __p;
  v866 = v893;
  if (__p == v893)
    goto LABEL_1407;
  v867 = v119;
  v203 = a7 + 24;
  v872 = (__int128 *)(v113 + 7);
  v879 = v120;
  v204 = (char *)__p;
  do
  {
    v882 = v204;
    if (v204[152])
    {
      v205 = a1[2];
      v206 = *v205;
      v207 = *(_QWORD **)(*v205 + 16);
      if (v207)
      {
        v208 = a7[1];
        v209 = *a7;
        v894[0] = *a7;
        v894[1] = v208;
        v210 = *(_QWORD *)(a7 + 4);
        *(_QWORD *)&v894[4] = v210;
        *(_OWORD *)&v894[24] = *v203;
        v211 = v204;
        v212 = v204[1];
        v213 = *v211;
        v894[40] = *v211;
        v894[41] = v212;
        v214 = *(_QWORD *)(v211 + 4);
        *(_QWORD *)&v894[44] = v214;
        *(_OWORD *)&v894[64] = *(_OWORD *)(v211 + 24);
        v215 = v203;
        v216 = std::__hash_table<std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__list_iterator<geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::CacheEntry,void *>>,std::__unordered_map_hasher<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__list_iterator<geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::CacheEntry,void *>>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>,true>,std::__unordered_map_equal<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__list_iterator<geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::CacheEntry,void *>>,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>,md::FlyoverOctilePairHash,true>,std::allocator<std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__list_iterator<geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::CacheEntry,void *>>>>::find<std::pair<md::FlyoverOctile,md::FlyoverOctile>>(v207, v894);
        if (v216)
        {
          v889 = v216;
          v217 = v211 + 24;
          v218 = *(_QWORD *)(v206 + 8);
          v894[0] = v209;
          v894[1] = v208;
          *(_QWORD *)&v894[4] = v210;
          *(_OWORD *)&v894[24] = *v215;
          v894[40] = v213;
          v894[41] = v212;
          *(_QWORD *)&v894[44] = v214;
          *(_OWORD *)&v894[64] = *v217;
          v219 = std::__hash_table<std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__list_iterator<geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::CacheEntry,void *>>,std::__unordered_map_hasher<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__list_iterator<geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::CacheEntry,void *>>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>,true>,std::__unordered_map_equal<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__list_iterator<geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::CacheEntry,void *>>,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>,md::FlyoverOctilePairHash,true>,std::allocator<std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__list_iterator<geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::CacheEntry,void *>>>>::find<std::pair<md::FlyoverOctile,md::FlyoverOctile>>((_QWORD *)(v218 + 24), v894);
          v198 = v885;
          v120 = v879;
          v113 = v880;
          if (v219)
            *((_QWORD *)v219 + 12) = geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::_elementAccessed((char *)v218, *((char **)v219 + 12));
          v220 = (uint64_t *)(v889 + 96);
          v204 = v882;
        }
        else
        {
          v220 = &md::FlyoverCompleteTileDataContext::getDynamicRenderables(md::FlyoverOctile const&,md::FlyoverOctile const&)const::kEmpty;
          v198 = v885;
          v120 = v879;
          v113 = v880;
          v204 = v211;
        }
      }
      else
      {
        v220 = &md::FlyoverCompleteTileDataContext::getDynamicRenderables(md::FlyoverOctile const&,md::FlyoverOctile const&)const::kEmpty;
        v198 = v885;
      }
    }
    else
    {
      v220 = md::MeshRenderableContext::renderablesForRegistry((_QWORD *)*a1[3], v864);
    }
    v221 = *v220;
    if (v220[1] != *v220)
    {
      v222 = 0;
      v869 = v204 + 64;
      v870 = v204 + 41;
      v868 = v204 + 96;
      v881 = v220;
      do
      {
        v883 = v222;
        v888 = *(_QWORD *)(v221 + 8 * v222);
        v225 = gdc::Registry::create(*(gdc::Registry **)(*v198 + 8));
        v226 = (_QWORD *)*v198;
        v890 = v225;
        *(_QWORD *)v900 = &off_1E427EA60;
        *(_QWORD *)&v900[8] = v225 << 32;
        v886 = v225 << 32;
        v887 = HIDWORD(v225);
        *(_DWORD *)&v900[16] = HIDWORD(v225);
        *(_QWORD *)&v900[24] = v900;
        *(_QWORD *)&v894[24] = v894;
        *(_QWORD *)v894 = &off_1E427EA60;
        *(_QWORD *)&v894[8] = v225 << 32;
        *(_DWORD *)&v894[16] = HIDWORD(v225);
        *(_DWORD *)&v894[32] = 0;
        ecs2::Runtime::queueCommand(v226, (uint64_t)v894);
        if (*(_DWORD *)&v894[32] != -1)
          ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v894[32]])(&v897, v894);
        *(_DWORD *)&v894[32] = -1;
        v227 = *(_QWORD **)&v900[24];
        if (*(_BYTE **)&v900[24] == v900)
        {
          v227 = v900;
          v228 = 4;
        }
        else
        {
          if (!*(_QWORD *)&v900[24])
            goto LABEL_314;
          v228 = 5;
        }
        (*(void (**)(void))(*v227 + 8 * v228))();
LABEL_314:
        v229 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v220 + 8 * v883) + 24))(*(_QWORD *)(*v220 + 8 * v883));
        v230 = (_QWORD *)*v198;
        *(_QWORD *)v900 = &off_1E427E3E8;
        *(_QWORD *)&v900[8] = v229;
        *(_QWORD *)&v900[16] = v890;
        *(_QWORD *)&v900[24] = v900;
        *(_QWORD *)&v894[24] = v894;
        *(_QWORD *)v894 = &off_1E427E3E8;
        *(_OWORD *)&v894[8] = *(_OWORD *)&v900[8];
        *(_DWORD *)&v894[32] = 0;
        ecs2::Runtime::queueCommand(v230, (uint64_t)v894);
        if (*(_DWORD *)&v894[32] != -1)
          ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v894[32]])(&v897, v894);
        *(_DWORD *)&v894[32] = -1;
        v231 = *(_QWORD **)&v900[24];
        if (*(_BYTE **)&v900[24] == v900)
        {
          v231 = v900;
          v232 = 4;
        }
        else
        {
          if (!*(_QWORD *)&v900[24])
            goto LABEL_321;
          v232 = 5;
        }
        (*(void (**)(void))(*v231 + 8 * v232))();
LABEL_321:
        v233 = (_QWORD *)*v198;
        *(_QWORD *)v900 = &off_1E42808C0;
        *(_QWORD *)&v900[8] = v886;
        *(_DWORD *)&v900[16] = v887;
        *(_QWORD *)&v900[24] = v900;
        *(_QWORD *)&v894[24] = v894;
        *(_QWORD *)v894 = &off_1E42808C0;
        *(_QWORD *)&v894[8] = v886;
        *(_DWORD *)&v894[16] = v887;
        *(_DWORD *)&v894[32] = 0;
        ecs2::Runtime::queueCommand(v233, (uint64_t)v894);
        if (*(_DWORD *)&v894[32] != -1)
          ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v894[32]])(&v897, v894);
        *(_DWORD *)&v894[32] = -1;
        v234 = *(_QWORD **)&v900[24];
        if (*(_BYTE **)&v900[24] == v900)
        {
          v234 = v900;
          v235 = 4;
        }
        else
        {
          if (!*(_QWORD *)&v900[24])
            goto LABEL_328;
          v235 = 5;
        }
        (*(void (**)(void))(*v234 + 8 * v235))();
LABEL_328:
        v236 = v872[1];
        v897 = *v872;
        v898 = v236;
        v237 = (_QWORD *)*v198;
        v238 = (char *)operator new(0x30uLL);
        *(_QWORD *)v238 = &off_1E427D6F8;
        v239 = v898;
        *(_OWORD *)(v238 + 8) = v897;
        *(_OWORD *)(v238 + 24) = v239;
        *((_QWORD *)v238 + 5) = v890;
        *(_QWORD *)&v894[24] = v238;
        *(_QWORD *)&v900[24] = 0;
        *(_DWORD *)&v894[32] = 0;
        ecs2::Runtime::queueCommand(v237, (uint64_t)v894);
        if (*(_DWORD *)&v894[32] != -1)
          ((void (*)(_BYTE *, _BYTE *))off_1E42FB340[*(unsigned int *)&v894[32]])(v895, v894);
        *(_DWORD *)&v894[32] = -1;
        v240 = *(_QWORD **)&v900[24];
        if (*(_BYTE **)&v900[24] == v900)
        {
          v240 = v900;
          v241 = 4;
        }
        else
        {
          if (!*(_QWORD *)&v900[24])
            goto LABEL_335;
          v241 = 5;
        }
        (*(void (**)(void))(*v240 + 8 * v241))();
LABEL_335:
        v242 = *a6;
        v243 = (_QWORD *)*v198;
        *(_QWORD *)v900 = &off_1E427E5E0;
        *(_QWORD *)&v900[8] = v242;
        *(_QWORD *)&v900[16] = v890;
        *(_QWORD *)&v900[24] = v900;
        *(_QWORD *)&v894[24] = v894;
        *(_QWORD *)v894 = &off_1E427E5E0;
        *(_OWORD *)&v894[8] = *(_OWORD *)&v900[8];
        *(_DWORD *)&v894[32] = 0;
        ecs2::Runtime::queueCommand(v243, (uint64_t)v894);
        if (*(_DWORD *)&v894[32] != -1)
          ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v894[32]])(&v897, v894);
        *(_DWORD *)&v894[32] = -1;
        v244 = *(_QWORD **)&v900[24];
        if (*(_BYTE **)&v900[24] == v900)
        {
          v244 = v900;
          v245 = 4;
        }
        else
        {
          if (!*(_QWORD *)&v900[24])
            goto LABEL_342;
          v245 = 5;
        }
        (*(void (**)(void))(*v244 + 8 * v245))();
LABEL_342:
        v246 = (_QWORD *)*v198;
        *(_QWORD *)v900 = &off_1E427FA68;
        *(_QWORD *)&v900[8] = v875;
        *(_QWORD *)&v900[16] = v890;
        *(_QWORD *)&v900[24] = v900;
        *(_QWORD *)&v894[24] = v894;
        *(_QWORD *)v894 = &off_1E427FA68;
        *(_OWORD *)&v894[8] = *(_OWORD *)&v900[8];
        *(_DWORD *)&v894[32] = 0;
        ecs2::Runtime::queueCommand(v246, (uint64_t)v894);
        if (*(_DWORD *)&v894[32] != -1)
          ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v894[32]])(&v897, v894);
        *(_DWORD *)&v894[32] = -1;
        v247 = *(_QWORD **)&v900[24];
        if (*(_BYTE **)&v900[24] == v900)
        {
          v247 = v900;
          v248 = 4;
        }
        else
        {
          if (!*(_QWORD *)&v900[24])
            goto LABEL_349;
          v248 = 5;
        }
        (*(void (**)(void))(*v247 + 8 * v248))();
LABEL_349:
        v249 = (_QWORD *)*v198;
        *(_QWORD *)v900 = &off_1E4280998;
        *(_QWORD *)&v900[8] = v874;
        *(_QWORD *)&v900[16] = v890;
        *(_QWORD *)&v900[24] = v900;
        *(_QWORD *)&v894[24] = v894;
        *(_QWORD *)v894 = &off_1E4280998;
        *(_OWORD *)&v894[8] = *(_OWORD *)&v900[8];
        *(_DWORD *)&v894[32] = 0;
        ecs2::Runtime::queueCommand(v249, (uint64_t)v894);
        if (*(_DWORD *)&v894[32] != -1)
          ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v894[32]])(&v897, v894);
        *(_DWORD *)&v894[32] = -1;
        v250 = *(_QWORD **)&v900[24];
        if (*(_BYTE **)&v900[24] == v900)
        {
          v250 = v900;
          v251 = 4;
        }
        else
        {
          if (!*(_QWORD *)&v900[24])
            goto LABEL_356;
          v251 = 5;
        }
        (*(void (**)(void))(*v250 + 8 * v251))();
LABEL_356:
        v252 = *((unsigned __int8 *)v113 + 24);
        v253 = (_QWORD *)*v198;
        *(_QWORD *)v900 = &off_1E4281EB0;
        *(_QWORD *)&v900[8] = v886 | v252;
        *(_DWORD *)&v900[16] = v887;
        *(_QWORD *)&v900[24] = v900;
        *(_QWORD *)&v894[24] = v894;
        *(_QWORD *)v894 = &off_1E4281EB0;
        *(_QWORD *)&v894[8] = v886 | v252;
        *(_DWORD *)&v894[16] = v887;
        *(_DWORD *)&v894[32] = 0;
        ecs2::Runtime::queueCommand(v253, (uint64_t)v894);
        if (*(_DWORD *)&v894[32] != -1)
          ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v894[32]])(&v897, v894);
        *(_DWORD *)&v894[32] = -1;
        v254 = *(_QWORD **)&v900[24];
        if (*(_BYTE **)&v900[24] == v900)
        {
          v254 = v900;
          v255 = 4;
        }
        else
        {
          if (!*(_QWORD *)&v900[24])
            goto LABEL_363;
          v255 = 5;
        }
        (*(void (**)(void))(*v254 + 8 * v255))();
LABEL_363:
        v256 = (_QWORD *)*v198;
        *(_QWORD *)v900 = &off_1E427D860;
        *(_QWORD *)&v900[8] = v878;
        *(_QWORD *)&v900[16] = v890;
        *(_QWORD *)&v900[24] = v900;
        *(_QWORD *)&v894[24] = v894;
        *(_QWORD *)v894 = &off_1E427D860;
        *(_OWORD *)&v894[8] = *(_OWORD *)&v900[8];
        *(_DWORD *)&v894[32] = 0;
        ecs2::Runtime::queueCommand(v256, (uint64_t)v894);
        if (*(_DWORD *)&v894[32] != -1)
          ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v894[32]])(&v897, v894);
        *(_DWORD *)&v894[32] = -1;
        v257 = *(_QWORD **)&v900[24];
        if (*(_BYTE **)&v900[24] == v900)
        {
          v257 = v900;
          v258 = 4;
        }
        else
        {
          if (!*(_QWORD *)&v900[24])
            goto LABEL_370;
          v258 = 5;
        }
        (*(void (**)(void))(*v257 + 8 * v258))();
LABEL_370:
        v259 = (_QWORD *)*v198;
        *(_QWORD *)v900 = &off_1E427E160;
        *(_QWORD *)&v900[8] = v886;
        *(_DWORD *)&v900[16] = v887;
        *(_QWORD *)&v900[24] = v900;
        *(_QWORD *)&v894[24] = v894;
        *(_QWORD *)v894 = &off_1E427E160;
        *(_QWORD *)&v894[8] = v886;
        *(_DWORD *)&v894[16] = v887;
        *(_DWORD *)&v894[32] = 0;
        ecs2::Runtime::queueCommand(v259, (uint64_t)v894);
        if (*(_DWORD *)&v894[32] != -1)
          ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v894[32]])(&v897, v894);
        *(_DWORD *)&v894[32] = -1;
        v260 = *(_QWORD **)&v900[24];
        if (*(_BYTE **)&v900[24] == v900)
        {
          v260 = v900;
          v261 = 4;
        }
        else
        {
          if (!*(_QWORD *)&v900[24])
            goto LABEL_377;
          v261 = 5;
        }
        (*(void (**)(void))(*v260 + 8 * v261))();
LABEL_377:
        v262 = (_QWORD *)*v198;
        *(_QWORD *)v900 = &off_1E427EE50;
        *(_QWORD *)&v900[8] = v886;
        *(_DWORD *)&v900[16] = v887;
        *(_QWORD *)&v900[24] = v900;
        *(_QWORD *)&v894[24] = v894;
        *(_QWORD *)v894 = &off_1E427EE50;
        *(_QWORD *)&v894[8] = v886;
        *(_DWORD *)&v894[16] = v887;
        *(_DWORD *)&v894[32] = 0;
        ecs2::Runtime::queueCommand(v262, (uint64_t)v894);
        if (*(_DWORD *)&v894[32] != -1)
          ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v894[32]])(&v897, v894);
        *(_DWORD *)&v894[32] = -1;
        v263 = *(_QWORD **)&v900[24];
        if (*(_BYTE **)&v900[24] == v900)
        {
          v263 = v900;
          v264 = 4;
        }
        else
        {
          if (!*(_QWORD *)&v900[24])
            goto LABEL_384;
          v264 = 5;
        }
        (*(void (**)(void))(*v263 + 8 * v264))();
LABEL_384:
        v265 = *(_QWORD *)(v888 + 216);
        v897 = *(_OWORD *)(v265 + 36);
        *(_QWORD *)&v898 = *(_QWORD *)(v265 + 52);
        v266 = (_QWORD *)*v198;
        v267 = (char *)operator new(0x28uLL);
        *(_QWORD *)v267 = &off_1E4282060;
        *(_OWORD *)(v267 + 8) = v897;
        *((_QWORD *)v267 + 3) = v898;
        *((_QWORD *)v267 + 4) = v890;
        *(_QWORD *)&v894[24] = v267;
        *(_QWORD *)&v900[24] = 0;
        *(_DWORD *)&v894[32] = 0;
        ecs2::Runtime::queueCommand(v266, (uint64_t)v894);
        if (*(_DWORD *)&v894[32] != -1)
          ((void (*)(_BYTE *, _BYTE *))off_1E42FB340[*(unsigned int *)&v894[32]])(v895, v894);
        *(_DWORD *)&v894[32] = -1;
        v268 = *(_QWORD **)&v900[24];
        if (*(_BYTE **)&v900[24] == v900)
        {
          v268 = v900;
          v269 = 4;
        }
        else
        {
          if (!*(_QWORD *)&v900[24])
            goto LABEL_391;
          v269 = 5;
        }
        (*(void (**)(void))(*v268 + 8 * v269))();
LABEL_391:
        v270 = (_QWORD *)*v198;
        *(_QWORD *)v900 = &off_1E427DF20;
        *(_QWORD *)&v900[8] = v886 | 4;
        *(_DWORD *)&v900[16] = v887;
        *(_QWORD *)&v900[24] = v900;
        *(_QWORD *)&v894[24] = v894;
        *(_QWORD *)v894 = &off_1E427DF20;
        *(_QWORD *)&v894[8] = v886 | 4;
        *(_DWORD *)&v894[16] = v887;
        *(_DWORD *)&v894[32] = 0;
        ecs2::Runtime::queueCommand(v270, (uint64_t)v894);
        if (*(_DWORD *)&v894[32] != -1)
          ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v894[32]])(&v897, v894);
        *(_DWORD *)&v894[32] = -1;
        v271 = *(_QWORD **)&v900[24];
        if (*(_BYTE **)&v900[24] == v900)
        {
          v271 = v900;
          v272 = 4;
        }
        else
        {
          if (!*(_QWORD *)&v900[24])
            goto LABEL_398;
          v272 = 5;
        }
        (*(void (**)(void))(*v271 + 8 * v272))();
LABEL_398:
        v273 = (_QWORD *)*v198;
        *(_QWORD *)v900 = &off_1E427DBC0;
        *(_QWORD *)&v900[8] = v886;
        *(_DWORD *)&v900[16] = v887;
        *(_QWORD *)&v900[24] = v900;
        *(_QWORD *)&v894[24] = v894;
        *(_QWORD *)v894 = &off_1E427DBC0;
        *(_QWORD *)&v894[8] = v886;
        *(_DWORD *)&v894[16] = v887;
        *(_DWORD *)&v894[32] = 0;
        ecs2::Runtime::queueCommand(v273, (uint64_t)v894);
        if (*(_DWORD *)&v894[32] != -1)
          ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v894[32]])(&v897, v894);
        *(_DWORD *)&v894[32] = -1;
        v274 = *(_QWORD **)&v900[24];
        if (*(_BYTE **)&v900[24] == v900)
        {
          v274 = v900;
          v275 = 4;
        }
        else
        {
          if (!*(_QWORD *)&v900[24])
            goto LABEL_405;
          v275 = 5;
        }
        (*(void (**)(void))(*v274 + 8 * v275))();
LABEL_405:
        v276 = *(_OWORD *)(v888 + 280);
        *(_OWORD *)v894 = *(_OWORD *)(v888 + 264);
        *(_OWORD *)&v894[16] = v276;
        *(_OWORD *)&v894[32] = *(_OWORD *)(v888 + 296);
        v277 = (_QWORD *)*v198;
        v278 = (char *)operator new(0x40uLL);
        *(_QWORD *)v278 = &off_1E427EC58;
        v279 = *(_OWORD *)&v894[16];
        *(_OWORD *)(v278 + 8) = *(_OWORD *)v894;
        *(_OWORD *)(v278 + 24) = v279;
        *(_OWORD *)(v278 + 40) = *(_OWORD *)&v894[32];
        *((_QWORD *)v278 + 7) = v890;
        *(_QWORD *)&v900[24] = v278;
        *((_QWORD *)&v898 + 1) = 0;
        LODWORD(v901) = 0;
        ecs2::Runtime::queueCommand(v277, (uint64_t)v900);
        if ((_DWORD)v901 != -1)
          ((void (*)(_BYTE *, _BYTE *))off_1E42FB340[v901])(v895, v900);
        LODWORD(v901) = -1;
        v280 = (__int128 *)*((_QWORD *)&v898 + 1);
        if (*((__int128 **)&v898 + 1) == &v897)
        {
          v280 = &v897;
          v281 = 4;
        }
        else
        {
          if (!*((_QWORD *)&v898 + 1))
            goto LABEL_412;
          v281 = 5;
        }
        (*(void (**)(void))(*(_QWORD *)v280 + 8 * v281))();
LABEL_412:
        v282 = v882[144];
        if (v882[144])
        {
          v283 = v882[40];
          *(_OWORD *)v904 = *(_OWORD *)v870;
          *(_QWORD *)&v904[15] = *(_QWORD *)(v870 + 15);
          v284 = *(_OWORD *)v869;
          v903 = *((_QWORD *)v869 + 2);
          v7 = *((_QWORD *)v882 + 11);
          v285 = v868[1];
          *(_OWORD *)v900 = *v868;
          *(_OWORD *)&v900[16] = v285;
          v901 = v868[2];
          v902 = v284;
        }
        else
        {
          v283 = 0;
        }
        v286 = a5[5];
        *(_OWORD *)&v894[71] = a5[4];
        *(_OWORD *)&v894[87] = v286;
        v287 = a5[7];
        *(_OWORD *)&v894[103] = a5[6];
        *(_OWORD *)&v894[119] = v287;
        v288 = a5[1];
        *(_OWORD *)&v894[7] = *a5;
        *(_OWORD *)&v894[23] = v288;
        v289 = a5[3];
        *(_OWORD *)&v894[39] = a5[2];
        *(_OWORD *)&v894[55] = v289;
        v290 = (_QWORD *)*v885;
        v291 = (char *)operator new(0x100uLL);
        *(_QWORD *)v291 = &off_1E427F000;
        v291[8] = 0;
        v291[112] = 0;
        if (v282)
        {
          *(_OWORD *)(v291 + 9) = *(_OWORD *)v904;
          v292 = v901;
          *((_OWORD *)v291 + 2) = v902;
          v293 = *(_OWORD *)&v900[16];
          *((_OWORD *)v291 + 4) = *(_OWORD *)v900;
          *((_OWORD *)v291 + 5) = v293;
          v291[8] = v283;
          *((_QWORD *)v291 + 3) = *(_QWORD *)&v904[15];
          *((_QWORD *)v291 + 6) = v903;
          *((_QWORD *)v291 + 7) = v7;
          *((_OWORD *)v291 + 6) = v292;
          v291[112] = 1;
        }
        v294 = *(_OWORD *)&v894[87];
        *(_OWORD *)(v291 + 184) = *(_OWORD *)&v894[71];
        *(_OWORD *)(v291 + 200) = v294;
        v295 = *(_OWORD *)&v894[119];
        *(_OWORD *)(v291 + 216) = *(_OWORD *)&v894[103];
        *(_OWORD *)(v291 + 232) = v295;
        v296 = *(_OWORD *)&v894[23];
        *(_OWORD *)(v291 + 120) = *(_OWORD *)&v894[7];
        *(_OWORD *)(v291 + 136) = v296;
        v297 = *(_OWORD *)&v894[55];
        *(_OWORD *)(v291 + 152) = *(_OWORD *)&v894[39];
        *(_OWORD *)(v291 + 168) = v297;
        *((_QWORD *)v291 + 31) = v890;
        *((_QWORD *)&v898 + 1) = v291;
        v896 = 0;
        v899 = 0;
        ecs2::Runtime::queueCommand(v290, (uint64_t)&v897);
        if (v899 != -1)
          ((void (*)(_BYTE *, __int128 *))off_1E42FB340[v899])(v900, &v897);
        v899 = -1;
        v298 = v896;
        if (v896 == v895)
        {
          v298 = v895;
          v299 = 4;
        }
        else
        {
          if (!v896)
            goto LABEL_424;
          v299 = 5;
        }
        (*(void (**)(void))(*v298 + 8 * v299))();
LABEL_424:
        v300 = (_QWORD *)*v885;
        v301 = v886 | *((unsigned __int8 *)v113 + 48);
        *(_QWORD *)v900 = &off_1E427D788;
        *(_QWORD *)&v900[8] = v301;
        *(_DWORD *)&v900[16] = v887;
        *(_QWORD *)&v900[24] = v900;
        *(_QWORD *)&v894[24] = v894;
        *(_QWORD *)v894 = &off_1E427D788;
        *(_QWORD *)&v894[8] = v301;
        *(_DWORD *)&v894[16] = v887;
        *(_DWORD *)&v894[32] = 0;
        ecs2::Runtime::queueCommand(v300, (uint64_t)v894);
        if (*(_DWORD *)&v894[32] != -1)
          ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v894[32]])(&v897, v894);
        *(_DWORD *)&v894[32] = -1;
        v302 = *(_QWORD **)&v900[24];
        if (*(_BYTE **)&v900[24] == v900)
        {
          v302 = v900;
          v303 = 4;
        }
        else
        {
          if (!*(_QWORD *)&v900[24])
            goto LABEL_431;
          v303 = 5;
        }
        (*(void (**)(void))(*v302 + 8 * v303))();
LABEL_431:
        v304 = (_QWORD *)*v885;
        *(_QWORD *)v900 = &off_1E427F4C8;
        *(_QWORD *)&v900[8] = v886;
        *(_DWORD *)&v900[16] = v887;
        *(_QWORD *)&v900[24] = v900;
        *(_QWORD *)&v894[24] = v894;
        *(_QWORD *)v894 = &off_1E427F4C8;
        *(_QWORD *)&v894[8] = v886;
        *(_DWORD *)&v894[16] = v887;
        *(_DWORD *)&v894[32] = 0;
        ecs2::Runtime::queueCommand(v304, (uint64_t)v894);
        if (*(_DWORD *)&v894[32] != -1)
          ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v894[32]])(&v897, v894);
        *(_DWORD *)&v894[32] = -1;
        v305 = *(_QWORD **)&v900[24];
        if (*(_BYTE **)&v900[24] == v900)
        {
          v305 = v900;
          v306 = 4;
        }
        else
        {
          if (!*(_QWORD *)&v900[24])
            goto LABEL_438;
          v306 = 5;
        }
        (*(void (**)(void))(*v305 + 8 * v306))();
LABEL_438:
        v307 = *v120;
        v308 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v881 + 8 * v883) + 24))(*(_QWORD *)(*v881 + 8 * v883));
        v309 = (_QWORD *)*v885;
        v310 = operator new(0x20uLL);
        *v310 = &off_1E427E8F8;
        v310[1] = v307;
        v310[2] = v308;
        v310[3] = v890;
        *(_QWORD *)&v894[24] = v310;
        *(_QWORD *)&v900[24] = 0;
        *(_DWORD *)&v894[32] = 0;
        ecs2::Runtime::queueCommand(v309, (uint64_t)v894);
        if (*(_DWORD *)&v894[32] != -1)
          ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v894[32]])(&v897, v894);
        *(_DWORD *)&v894[32] = -1;
        v311 = *(_QWORD **)&v900[24];
        if (*(_BYTE **)&v900[24] == v900)
        {
          v311 = v900;
          v312 = 4;
        }
        else
        {
          if (!*(_QWORD *)&v900[24])
            goto LABEL_445;
          v312 = 5;
        }
        (*(void (**)(void))(*v311 + 8 * v312))();
LABEL_445:
        v313 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v881 + 8 * v883) + 24))(*(_QWORD *)(*v881 + 8 * v883));
        v314 = (_QWORD *)*v885;
        *(_QWORD *)v900 = &off_1E427EB38;
        *(_QWORD *)&v900[8] = v313;
        *(_QWORD *)&v900[16] = v890;
        *(_QWORD *)&v900[24] = v900;
        *(_QWORD *)&v894[24] = v894;
        *(_QWORD *)v894 = &off_1E427EB38;
        *(_OWORD *)&v894[8] = *(_OWORD *)&v900[8];
        *(_DWORD *)&v894[32] = 0;
        ecs2::Runtime::queueCommand(v314, (uint64_t)v894);
        if (*(_DWORD *)&v894[32] != -1)
          ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v894[32]])(&v897, v894);
        *(_DWORD *)&v894[32] = -1;
        v315 = *(_QWORD **)&v900[24];
        if (*(_BYTE **)&v900[24] == v900)
        {
          v315 = v900;
          v316 = 4;
        }
        else
        {
          if (!*(_QWORD *)&v900[24])
            goto LABEL_452;
          v316 = 5;
        }
        (*(void (**)(void))(*v315 + 8 * v316))();
LABEL_452:
        AssociationItemStorage = (_QWORD *)md::VKMRenderResourcesStore::getAssociationItemStorage(**a1, *v120, 1);
        v318 = AssociationItemStorage;
        v320 = (unint64_t *)AssociationItemStorage[5];
        v319 = AssociationItemStorage[6];
        if ((unint64_t)v320 >= v319)
        {
          v322 = (char *)AssociationItemStorage[4];
          v323 = ((char *)v320 - v322) >> 3;
          v324 = v323 + 1;
          if ((unint64_t)(v323 + 1) >> 61)
            abort();
          v325 = v319 - (_QWORD)v322;
          if (v325 >> 2 > v324)
            v324 = v325 >> 2;
          if ((unint64_t)v325 >= 0x7FFFFFFFFFFFFFF8)
            v326 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v326 = v324;
          if (v326)
          {
            if (v326 >> 61)
              goto LABEL_1416;
            v327 = (char *)operator new(8 * v326);
          }
          else
          {
            v327 = 0;
          }
          v328 = (unint64_t *)&v327[8 * v323];
          *v328 = v890;
          v321 = v328 + 1;
          if (v320 != (unint64_t *)v322)
          {
            v329 = (char *)(v320 - 1) - v322;
            if (v329 < 0x58)
              goto LABEL_1430;
            if ((unint64_t)(v322 - v327) < 0x20)
              goto LABEL_1430;
            v330 = (v329 >> 3) + 1;
            v331 = &v327[8 * v323 - 16];
            v332 = v320 - 2;
            v333 = v330 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v334 = *(_OWORD *)v332;
              *((_OWORD *)v331 - 1) = *((_OWORD *)v332 - 1);
              *(_OWORD *)v331 = v334;
              v331 -= 32;
              v332 -= 4;
              v333 -= 4;
            }
            while (v333);
            v328 -= v330 & 0x3FFFFFFFFFFFFFFCLL;
            v320 -= v330 & 0x3FFFFFFFFFFFFFFCLL;
            if (v330 != (v330 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_1430:
              do
              {
                v335 = *--v320;
                *--v328 = v335;
              }
              while (v320 != (unint64_t *)v322);
            }
            v320 = (unint64_t *)v318[4];
          }
          v318[4] = v328;
          v318[5] = v321;
          v318[6] = &v327[8 * v326];
          if (v320)
            operator delete(v320);
        }
        else
        {
          *v320 = v890;
          v321 = v320 + 1;
        }
        v318[5] = v321;
        if ((_DWORD)v252 == 255)
        {
          v336 = (_QWORD *)*v885;
          *(_QWORD *)v900 = &off_1E427D5D8;
          *(_QWORD *)&v900[8] = v886;
          *(_DWORD *)&v900[16] = v887;
          *(_QWORD *)&v900[24] = v900;
          *(_QWORD *)&v894[24] = v894;
          *(_QWORD *)v894 = &off_1E427D5D8;
          *(_QWORD *)&v894[8] = v886;
          *(_DWORD *)&v894[16] = v887;
          *(_DWORD *)&v894[32] = 0;
          ecs2::Runtime::queueCommand(v336, (uint64_t)v894);
          if (*(_DWORD *)&v894[32] != -1)
            ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v894[32]])(&v897, v894);
          *(_DWORD *)&v894[32] = -1;
          v337 = *(_QWORD **)&v900[24];
          if (*(_BYTE **)&v900[24] == v900)
          {
            v337 = v900;
            v338 = 4;
          }
          else
          {
            if (!*(_QWORD *)&v900[24])
              goto LABEL_482;
            v338 = 5;
          }
          (*(void (**)(void))(*v337 + 8 * v338))();
        }
LABEL_482:
        FlyoverSharedConstantDataHandle = md::VKMRenderResourcesStore::getFlyoverSharedConstantDataHandle((md::VKMRenderResourcesStore *)**a1);
        v340 = (_QWORD *)*v885;
        *(_QWORD *)v900 = &off_1E427F708;
        *(_QWORD *)&v900[8] = FlyoverSharedConstantDataHandle;
        *(_QWORD *)&v900[16] = v890;
        *(_QWORD *)&v900[24] = v900;
        *(_QWORD *)&v894[24] = v894;
        *(_QWORD *)v894 = &off_1E427F708;
        *(_OWORD *)&v894[8] = *(_OWORD *)&v900[8];
        *(_DWORD *)&v894[32] = 0;
        ecs2::Runtime::queueCommand(v340, (uint64_t)v894);
        if (*(_DWORD *)&v894[32] != -1)
          ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v894[32]])(&v897, v894);
        *(_DWORD *)&v894[32] = -1;
        v341 = *(_QWORD **)&v900[24];
        if (*(_BYTE **)&v900[24] == v900)
        {
          v341 = v900;
          v342 = 4;
        }
        else
        {
          if (!*(_QWORD *)&v900[24])
            goto LABEL_489;
          v342 = 5;
        }
        (*(void (**)(void))(*v341 + 8 * v342))();
LABEL_489:
        v343 = *(uint64_t **)(v888 + 240);
        if (*(uint64_t **)(v888 + 248) == v343)
          goto LABEL_500;
        v344 = *v343;
        v345 = *a1[4];
        v346 = (std::__shared_mutex_base *)(v345 + 104);
        std::__shared_mutex_base::lock((std::__shared_mutex_base *)(v345 + 104));
        if (v344)
        {
          *(_QWORD *)v894 = v344;
          *(_QWORD *)&v894[8] = v344;
          v347 = *(unsigned int *)(v344 + 68) | ((unint64_t)*(unsigned int *)(v344 + 64) << 32);
          *(_QWORD *)&v894[16] = *(_QWORD *)(v344 + 80);
          *(_QWORD *)&v894[24] = v347;
        }
        else
        {
          memset(v894, 0, 32);
        }
        v894[32] = 1;
        v348 = geo::packed_array<mre::TextureStorage,geo::handle<mre::Texture>>::push_back((_QWORD *)(v345 + 480), (__int128 *)v894);
        std::__shared_mutex_base::unlock(v346);
        v349 = (float *)*a1[4];
        v350 = *(_QWORD *)(v888 + 208);
        v351 = (v350 << 6) - 0x61C8864680B583EBLL + (v350 >> 2);
        *(_QWORD *)&v897 = v348;
        v352 = v351 ^ v350;
        *(_OWORD *)v894 = (unint64_t)v351 ^ (unsigned __int128)v350;
        *(_QWORD *)v900 = v348;
        v353 = std::__hash_table<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::__unordered_map_hasher<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::hash<geo::handle<mre::Texture>>,std::equal_to<geo::handle<mre::Texture>>,true>,std::__unordered_map_equal<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::equal_to<geo::handle<mre::Texture>>,std::hash<geo::handle<mre::Texture>>,true>,std::allocator<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>>>::__emplace_unique_key_args<geo::handle<mre::Texture>,std::piecewise_construct_t const&,std::tuple<geo::handle<mre::Texture> const&>,std::tuple<>>(v349 + 110, v348, v900);
        *(int64x2_t *)(v353 + 3) = vdupq_n_s64(1uLL);
        *((_WORD *)v353 + 20) = 256;
        v354 = std::__hash_table<std::__hash_value_type<geo::handle<mre::Texture>,mre::TextureKey>,std::__unordered_map_hasher<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::TextureKey>,std::hash<geo::handle<mre::Texture>>,std::equal_to<geo::handle<mre::Texture>>,true>,std::__unordered_map_equal<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::TextureKey>,std::equal_to<geo::handle<mre::Texture>>,std::hash<geo::handle<mre::Texture>>,true>,std::allocator<std::__hash_value_type<geo::handle<mre::Texture>,mre::TextureKey>>>::__emplace_unique_key_args<geo::handle<mre::Texture>,std::piecewise_construct_t const&,std::tuple<geo::handle<mre::Texture> const&>,std::tuple<>>(v349 + 16, v348, (uint64_t *)&v897);
        v354[3] = *(_QWORD *)v894;
        *((_BYTE *)v354 + 32) = v894[8];
        std::__hash_table<std::__hash_value_type<mre::TextureKey,geo::handle<mre::Texture>>,std::__unordered_map_hasher<mre::TextureKey,std::__hash_value_type<mre::TextureKey,geo::handle<mre::Texture>>,mre::TextureKeyHasher,std::equal_to<mre::TextureKey>,true>,std::__unordered_map_equal<mre::TextureKey,std::__hash_value_type<mre::TextureKey,geo::handle<mre::Texture>>,std::equal_to<mre::TextureKey>,mre::TextureKeyHasher,true>,std::allocator<std::__hash_value_type<mre::TextureKey,geo::handle<mre::Texture>>>>::__emplace_unique_key_args<mre::TextureKey,std::piecewise_construct_t const&,std::tuple<mre::TextureKey const&>,std::tuple<>>(v349 + 6, v352, 0, v894)[4] = v348;
        v355 = (_QWORD *)*v885;
        *(_QWORD *)v900 = &off_1E427F3A8;
        *(_QWORD *)&v900[8] = v348;
        *(_QWORD *)&v900[16] = v890;
        *(_QWORD *)&v900[24] = v900;
        *(_QWORD *)&v894[24] = v894;
        *(_QWORD *)v894 = &off_1E427F3A8;
        *(_OWORD *)&v894[8] = *(_OWORD *)&v900[8];
        *(_DWORD *)&v894[32] = 0;
        ecs2::Runtime::queueCommand(v355, (uint64_t)v894);
        if (*(_DWORD *)&v894[32] != -1)
          ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v894[32]])(&v897, v894);
        *(_DWORD *)&v894[32] = -1;
        v356 = *(_QWORD **)&v900[24];
        if (*(_BYTE **)&v900[24] == v900)
        {
          v356 = v900;
          v357 = 4;
        }
        else
        {
          if (!*(_QWORD *)&v900[24])
            goto LABEL_500;
          v357 = 5;
        }
        (*(void (**)(void))(*v356 + 8 * v357))();
LABEL_500:
        v358 = *(_QWORD *)(v888 + 224);
        v359 = *a1[4];
        v360 = (std::__shared_mutex_base *)(v359 + 104);
        std::__shared_mutex_base::lock((std::__shared_mutex_base *)(v359 + 104));
        if (v358)
        {
          *(_QWORD *)v894 = v358;
          *(_QWORD *)&v894[8] = v358;
          v361 = *(unsigned int *)(v358 + 68) | ((unint64_t)*(unsigned int *)(v358 + 64) << 32);
          *(_QWORD *)&v894[16] = *(_QWORD *)(v358 + 80);
          *(_QWORD *)&v894[24] = v361;
        }
        else
        {
          memset(v894, 0, 32);
        }
        v894[32] = 1;
        v362 = geo::packed_array<mre::TextureStorage,geo::handle<mre::Texture>>::push_back((_QWORD *)(v359 + 480), (__int128 *)v894);
        std::__shared_mutex_base::unlock(v360);
        v363 = (float *)*a1[4];
        v364 = *(_QWORD *)(v888 + 208);
        v365 = (v364 << 6) - 0x61C8864680B583EBLL + (v364 >> 2) + 1;
        *(_QWORD *)&v897 = v362;
        v366 = v365 ^ v364;
        *(_OWORD *)v894 = (unint64_t)v365 ^ (unsigned __int128)v364;
        *(_QWORD *)v900 = v362;
        v367 = std::__hash_table<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::__unordered_map_hasher<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::hash<geo::handle<mre::Texture>>,std::equal_to<geo::handle<mre::Texture>>,true>,std::__unordered_map_equal<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::equal_to<geo::handle<mre::Texture>>,std::hash<geo::handle<mre::Texture>>,true>,std::allocator<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>>>::__emplace_unique_key_args<geo::handle<mre::Texture>,std::piecewise_construct_t const&,std::tuple<geo::handle<mre::Texture> const&>,std::tuple<>>(v363 + 110, v362, v900);
        *(int64x2_t *)(v367 + 3) = vdupq_n_s64(1uLL);
        *((_WORD *)v367 + 20) = 256;
        v368 = std::__hash_table<std::__hash_value_type<geo::handle<mre::Texture>,mre::TextureKey>,std::__unordered_map_hasher<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::TextureKey>,std::hash<geo::handle<mre::Texture>>,std::equal_to<geo::handle<mre::Texture>>,true>,std::__unordered_map_equal<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::TextureKey>,std::equal_to<geo::handle<mre::Texture>>,std::hash<geo::handle<mre::Texture>>,true>,std::allocator<std::__hash_value_type<geo::handle<mre::Texture>,mre::TextureKey>>>::__emplace_unique_key_args<geo::handle<mre::Texture>,std::piecewise_construct_t const&,std::tuple<geo::handle<mre::Texture> const&>,std::tuple<>>(v363 + 16, v362, (uint64_t *)&v897);
        v368[3] = *(_QWORD *)v894;
        *((_BYTE *)v368 + 32) = v894[8];
        std::__hash_table<std::__hash_value_type<mre::TextureKey,geo::handle<mre::Texture>>,std::__unordered_map_hasher<mre::TextureKey,std::__hash_value_type<mre::TextureKey,geo::handle<mre::Texture>>,mre::TextureKeyHasher,std::equal_to<mre::TextureKey>,true>,std::__unordered_map_equal<mre::TextureKey,std::__hash_value_type<mre::TextureKey,geo::handle<mre::Texture>>,std::equal_to<mre::TextureKey>,mre::TextureKeyHasher,true>,std::allocator<std::__hash_value_type<mre::TextureKey,geo::handle<mre::Texture>>>>::__emplace_unique_key_args<mre::TextureKey,std::piecewise_construct_t const&,std::tuple<mre::TextureKey const&>,std::tuple<>>(v363 + 6, v366, 0, v894)[4] = v362;
        v369 = (_QWORD *)*v885;
        *(_QWORD *)v900 = &off_1E427F3F0;
        *(_QWORD *)&v900[8] = v362;
        *(_QWORD *)&v900[16] = v890;
        *(_QWORD *)&v900[24] = v900;
        *(_QWORD *)&v894[24] = v894;
        *(_QWORD *)v894 = &off_1E427F3F0;
        *(_OWORD *)&v894[8] = *(_OWORD *)&v900[8];
        *(_DWORD *)&v894[32] = 0;
        ecs2::Runtime::queueCommand(v369, (uint64_t)v894);
        if (*(_DWORD *)&v894[32] != -1)
          ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v894[32]])(&v897, v894);
        *(_DWORD *)&v894[32] = -1;
        v370 = *(_QWORD **)&v900[24];
        if (*(_BYTE **)&v900[24] == v900)
        {
          v370 = v900;
          v371 = 4;
        }
        else
        {
          if (!*(_QWORD *)&v900[24])
            goto LABEL_510;
          v371 = 5;
        }
        (*(void (**)(void))(*v370 + 8 * v371))();
LABEL_510:
        v372 = **a1;
        v373 = *(_QWORD *)(v372 + 4632);
        if (*(_QWORD *)(v372 + 4624) == v373)
        {
          v376 = (-1431655765 * ((*(_QWORD *)(v372 + 4680) - *(_QWORD *)(v372 + 4672)) >> 3)) | 0x100000000;
          v377 = *(uint64_t **)(v372 + 4656);
          v378 = *(_QWORD *)(v372 + 4664);
          if ((unint64_t)v377 >= v378)
          {
            v380 = *(char **)(v372 + 4648);
            v381 = ((char *)v377 - v380) >> 3;
            v382 = v381 + 1;
            if ((unint64_t)(v381 + 1) >> 61)
              goto LABEL_1418;
            v383 = v378 - (_QWORD)v380;
            if (v383 >> 2 > v382)
              v382 = v383 >> 2;
            if ((unint64_t)v383 >= 0x7FFFFFFFFFFFFFF8)
              v384 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v384 = v382;
            if (v384)
            {
              if (v384 >> 61)
                goto LABEL_1416;
              v385 = (char *)operator new(8 * v384);
            }
            else
            {
              v385 = 0;
            }
            v386 = (uint64_t *)&v385[8 * v381];
            *v386 = v376;
            v379 = v386 + 1;
            if (v377 != (uint64_t *)v380)
            {
              v387 = (char *)v377 - v380 - 8;
              if (v387 < 0x58)
                goto LABEL_1431;
              if ((unint64_t)(v380 - v385) < 0x20)
                goto LABEL_1431;
              v388 = (v387 >> 3) + 1;
              v389 = &v385[8 * v381 - 16];
              v390 = v377 - 2;
              v391 = v388 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v392 = *(_OWORD *)v390;
                *((_OWORD *)v389 - 1) = *((_OWORD *)v390 - 1);
                *(_OWORD *)v389 = v392;
                v389 -= 32;
                v390 -= 4;
                v391 -= 4;
              }
              while (v391);
              v386 -= v388 & 0x3FFFFFFFFFFFFFFCLL;
              v377 -= v388 & 0x3FFFFFFFFFFFFFFCLL;
              if (v388 != (v388 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_1431:
                do
                {
                  v393 = *--v377;
                  *--v386 = v393;
                }
                while (v377 != (uint64_t *)v380);
              }
              v377 = *(uint64_t **)(v372 + 4648);
            }
            *(_QWORD *)(v372 + 4648) = v386;
            *(_QWORD *)(v372 + 4656) = v379;
            *(_QWORD *)(v372 + 4664) = &v385[8 * v384];
            if (v377)
              operator delete(v377);
          }
          else
          {
            *v377 = v376;
            v379 = v377 + 1;
          }
          *(_QWORD *)(v372 + 4656) = v379;
          v375 = *(v379 - 1);
        }
        else
        {
          v374 = *(_QWORD *)(v373 - 8);
          *(_QWORD *)(v372 + 4632) = v373 - 8;
          *(_DWORD *)(*(_QWORD *)(v372 + 4648) + 8 * v374) = -1431655765
                                                           * ((*(_QWORD *)(v372 + 4680) - *(_QWORD *)(v372 + 4672)) >> 3);
          *(_DWORD *)(*(_QWORD *)(v372 + 4648) + 8 * v374 + 4) = (((unint64_t)*(unsigned int *)(*(_QWORD *)(v372 + 4648) + 8 * v374 + 4) << 32)
                                                                + 0x100000000) >> 32;
          v375 = v374 | ((unint64_t)*(unsigned int *)(*(_QWORD *)(v372 + 4648) + 8 * v374 + 4) << 32);
        }
        v394 = *(_QWORD **)(v372 + 4680);
        v395 = *(_QWORD *)(v372 + 4688);
        if ((unint64_t)v394 >= v395)
        {
          v397 = *(_QWORD **)(v372 + 4672);
          v398 = 0xAAAAAAAAAAAAAAABLL * (v394 - v397) + 1;
          if (v398 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_1418;
          v399 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v395 - (_QWORD)v397) >> 3);
          if (2 * v399 > v398)
            v398 = 2 * v399;
          if (v399 >= 0x555555555555555)
            v400 = 0xAAAAAAAAAAAAAAALL;
          else
            v400 = v398;
          if (v400 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_1416;
          v401 = (char *)operator new(24 * v400);
          v402 = &v401[8 * (v394 - v397)];
          v403 = &v401[24 * v400];
          *(_QWORD *)v402 = 0;
          *((_QWORD *)v402 + 1) = 0;
          *((_QWORD *)v402 + 2) = 0;
          v396 = v402 + 24;
          if (v394 == v397)
          {
            *(_QWORD *)(v372 + 4672) = v402;
            *(_QWORD *)(v372 + 4680) = v396;
            *(_QWORD *)(v372 + 4688) = v403;
          }
          else
          {
            do
            {
              v404 = *(_OWORD *)(v394 - 3);
              v394 -= 3;
              *(_OWORD *)(v402 - 24) = v404;
              v402 -= 24;
              *((_QWORD *)v402 + 2) = v394[2];
              v394[1] = 0;
              v394[2] = 0;
            }
            while (v394 != v397);
            v394 = *(_QWORD **)(v372 + 4672);
            v405 = *(_QWORD **)(v372 + 4680);
            *(_QWORD *)(v372 + 4672) = v402;
            *(_QWORD *)(v372 + 4680) = v396;
            *(_QWORD *)(v372 + 4688) = v403;
            while (v405 != v394)
            {
              v406 = (std::__shared_weak_count *)*(v405 - 1);
              if (v406)
              {
                v407 = (unint64_t *)&v406->__shared_owners_;
                do
                  v408 = __ldaxr(v407);
                while (__stlxr(v408 - 1, v407));
                if (!v408)
                {
                  ((void (*)(std::__shared_weak_count *))v406->__on_zero_shared)(v406);
                  std::__shared_weak_count::__release_weak(v406);
                }
              }
              v405 -= 3;
            }
          }
          if (v394)
            operator delete(v394);
        }
        else
        {
          *v394 = 0;
          v394[1] = 0;
          v396 = v394 + 3;
          v394[2] = 0;
        }
        *(_QWORD *)(v372 + 4680) = v396;
        v409 = *(_QWORD *)(v372 + 4704);
        v410 = *(_QWORD *)(v372 + 4712);
        if (v409 >= v410)
        {
          v412 = *(_BYTE **)(v372 + 4696);
          v413 = (uint64_t)(v409 - (_QWORD)v412) >> 3;
          v414 = v413 + 1;
          if ((unint64_t)(v413 + 1) >> 61)
LABEL_1418:
            abort();
          v415 = v410 - (_QWORD)v412;
          if (v415 >> 2 > v414)
            v414 = v415 >> 2;
          if ((unint64_t)v415 >= 0x7FFFFFFFFFFFFFF8)
            v416 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v416 = v414;
          if (v416)
          {
            if (v416 >> 61)
              goto LABEL_1416;
            v417 = operator new(8 * v416);
          }
          else
          {
            v417 = 0;
          }
          v418 = &v417[8 * v413];
          *v418 = v375;
          v411 = v418 + 1;
          if ((_BYTE *)v409 != v412)
          {
            v419 = v409 - (_QWORD)v412 - 8;
            if (v419 < 0x58)
              goto LABEL_1432;
            if ((unint64_t)(v412 - v417) < 0x20)
              goto LABEL_1432;
            v420 = (v419 >> 3) + 1;
            v421 = &v417[8 * v413 - 16];
            v422 = (__int128 *)(v409 - 16);
            v423 = v420 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v424 = *v422;
              *(v421 - 1) = *(v422 - 1);
              *v421 = v424;
              v421 -= 2;
              v422 -= 2;
              v423 -= 4;
            }
            while (v423);
            v418 -= v420 & 0x3FFFFFFFFFFFFFFCLL;
            v409 -= 8 * (v420 & 0x3FFFFFFFFFFFFFFCLL);
            if (v420 != (v420 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_1432:
              do
              {
                v425 = *(_QWORD *)(v409 - 8);
                v409 -= 8;
                *--v418 = v425;
              }
              while ((_BYTE *)v409 != v412);
            }
          }
          *(_QWORD *)(v372 + 4696) = v418;
          *(_QWORD *)(v372 + 4704) = v411;
          *(_QWORD *)(v372 + 4712) = &v417[8 * v416];
          if (v412)
            operator delete(v412);
        }
        else
        {
          *(_QWORD *)v409 = v375;
          v409 += 8;
          v411 = (_QWORD *)v409;
        }
        *(_QWORD *)(v372 + 4704) = v411;
        v426 = (uint64_t *)(v372 + 4544);
        v427 = *(_QWORD *)(v372 + 4552);
        if (v427)
        {
          v428 = (uint8x8_t)vcnt_s8((int8x8_t)v427);
          v428.i16[0] = vaddlv_u8(v428);
          if (v428.u32[0] > 1uLL)
          {
            v409 = v375;
            if (v375 >= v427)
              v409 = v375 % v427;
          }
          else
          {
            v409 = (v427 - 1) & v375;
          }
          v429 = *(_QWORD **)(*v426 + 8 * v409);
          if (v429)
          {
            v430 = (_QWORD *)*v429;
            if (v430)
            {
              if (v428.u32[0] < 2uLL)
              {
                while (1)
                {
                  v432 = v430[1];
                  if (v432 == v375)
                  {
                    if (v430[2] == v375)
                      goto LABEL_637;
                  }
                  else if ((v432 & (v427 - 1)) != v409)
                  {
                    goto LABEL_598;
                  }
                  v430 = (_QWORD *)*v430;
                  if (!v430)
                    goto LABEL_598;
                }
              }
              do
              {
                v431 = v430[1];
                if (v431 == v375)
                {
                  if (v430[2] == v375)
                    goto LABEL_637;
                }
                else
                {
                  if (v431 >= v427)
                    v431 %= v427;
                  if (v431 != v409)
                    break;
                }
                v430 = (_QWORD *)*v430;
              }
              while (v430);
            }
          }
        }
LABEL_598:
        v433 = (char *)operator new(0x30uLL);
        *(_QWORD *)v433 = 0;
        *((_QWORD *)v433 + 1) = v375;
        *((_QWORD *)v433 + 2) = v375;
        *(_OWORD *)(v433 + 24) = xmmword_19FFB3350;
        v433[40] = 0;
        v434 = (float)(unint64_t)(*(_QWORD *)(v372 + 4568) + 1);
        v435 = *(float *)(v372 + 4576);
        if (!v427 || (float)(v435 * (float)v427) < v434)
        {
          v436 = v427 < 3 || (v427 & (v427 - 1)) != 0;
          v437 = v436 | (2 * v427);
          v438 = vcvtps_u32_f32(v434 / v435);
          if (v437 <= v438)
            v439 = v438;
          else
            v439 = v437;
          if (v439 == 1)
          {
            v439 = 2;
          }
          else if ((v439 & (v439 - 1)) != 0)
          {
            v439 = std::__next_prime(v439);
            v427 = *(_QWORD *)(v372 + 4552);
          }
          if (v439 > v427)
            goto LABEL_611;
          if (v439 < v427)
          {
            v440 = vcvtps_u32_f32((float)*(unint64_t *)(v372 + 4568) / *(float *)(v372 + 4576));
            if (v427 < 3
              || (v441 = (uint8x8_t)vcnt_s8((int8x8_t)v427), v441.i16[0] = vaddlv_u8(v441), v441.u32[0] > 1uLL))
            {
              v440 = std::__next_prime(v440);
            }
            else
            {
              v442 = 1 << -(char)__clz(v440 - 1);
              if (v440 >= 2)
                v440 = v442;
            }
            if (v439 <= v440)
              v439 = v440;
            if (v439 < v427)
LABEL_611:
              std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(v372 + 4544, v439);
          }
          v427 = *(_QWORD *)(v372 + 4552);
          if ((v427 & (v427 - 1)) != 0)
          {
            if (v375 >= v427)
              v409 = v375 % v427;
            else
              v409 = v375;
          }
          else
          {
            v409 = (v427 - 1) & v375;
          }
        }
        v443 = *v426;
        v444 = *(_QWORD **)(*v426 + 8 * v409);
        if (v444)
        {
          *(_QWORD *)v433 = *v444;
LABEL_635:
          *v444 = v433;
          goto LABEL_636;
        }
        *(_QWORD *)v433 = *(_QWORD *)(v372 + 4560);
        *(_QWORD *)(v372 + 4560) = v433;
        *(_QWORD *)(v443 + 8 * v409) = v372 + 4560;
        if (*(_QWORD *)v433)
        {
          v445 = *(_QWORD *)(*(_QWORD *)v433 + 8);
          if ((v427 & (v427 - 1)) != 0)
          {
            if (v445 >= v427)
              v445 %= v427;
          }
          else
          {
            v445 &= v427 - 1;
          }
          v444 = (_QWORD *)(*v426 + 8 * v445);
          goto LABEL_635;
        }
LABEL_636:
        ++*(_QWORD *)(v372 + 4568);
LABEL_637:
        v446 = (_QWORD *)*v885;
        *(_QWORD *)v900 = &off_1E4281CB8;
        *(_QWORD *)&v900[8] = v375;
        *(_QWORD *)&v900[16] = v890;
        *(_QWORD *)&v900[24] = v900;
        *(_QWORD *)&v894[24] = v894;
        *(_QWORD *)v894 = &off_1E4281CB8;
        *(_OWORD *)&v894[8] = *(_OWORD *)&v900[8];
        *(_DWORD *)&v894[32] = 0;
        ecs2::Runtime::queueCommand(v446, (uint64_t)v894);
        if (*(_DWORD *)&v894[32] != -1)
          ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v894[32]])(&v897, v894);
        *(_DWORD *)&v894[32] = -1;
        v447 = *(_QWORD **)&v900[24];
        if (*(_BYTE **)&v900[24] == v900)
        {
          v447 = v900;
          v448 = 4;
        }
        else
        {
          if (!*(_QWORD *)&v900[24])
            goto LABEL_644;
          v448 = 5;
        }
        (*(void (**)(void))(*v447 + 8 * v448))();
LABEL_644:
        v449 = **a1;
        v450 = *(_QWORD *)(v449 + 4416);
        if (*(_QWORD *)(v449 + 4408) == v450)
        {
          v453 = (-1431655765 * ((*(_QWORD *)(v449 + 4464) - *(_QWORD *)(v449 + 4456)) >> 3)) | 0x100000000;
          v454 = *(uint64_t **)(v449 + 4440);
          v455 = *(_QWORD *)(v449 + 4448);
          if ((unint64_t)v454 >= v455)
          {
            v457 = *(char **)(v449 + 4432);
            v458 = ((char *)v454 - v457) >> 3;
            v459 = v458 + 1;
            if ((unint64_t)(v458 + 1) >> 61)
              goto LABEL_1420;
            v460 = v455 - (_QWORD)v457;
            if (v460 >> 2 > v459)
              v459 = v460 >> 2;
            if ((unint64_t)v460 >= 0x7FFFFFFFFFFFFFF8)
              v461 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v461 = v459;
            if (v461)
            {
              if (v461 >> 61)
                goto LABEL_1416;
              v462 = (char *)operator new(8 * v461);
            }
            else
            {
              v462 = 0;
            }
            v463 = (uint64_t *)&v462[8 * v458];
            *v463 = v453;
            v456 = v463 + 1;
            if (v454 != (uint64_t *)v457)
            {
              v464 = (char *)v454 - v457 - 8;
              if (v464 < 0x58)
                goto LABEL_1433;
              if ((unint64_t)(v457 - v462) < 0x20)
                goto LABEL_1433;
              v465 = (v464 >> 3) + 1;
              v466 = &v462[8 * v458 - 16];
              v467 = v454 - 2;
              v468 = v465 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v469 = *(_OWORD *)v467;
                *((_OWORD *)v466 - 1) = *((_OWORD *)v467 - 1);
                *(_OWORD *)v466 = v469;
                v466 -= 32;
                v467 -= 4;
                v468 -= 4;
              }
              while (v468);
              v463 -= v465 & 0x3FFFFFFFFFFFFFFCLL;
              v454 -= v465 & 0x3FFFFFFFFFFFFFFCLL;
              if (v465 != (v465 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_1433:
                do
                {
                  v470 = *--v454;
                  *--v463 = v470;
                }
                while (v454 != (uint64_t *)v457);
              }
              v454 = *(uint64_t **)(v449 + 4432);
            }
            *(_QWORD *)(v449 + 4432) = v463;
            *(_QWORD *)(v449 + 4440) = v456;
            *(_QWORD *)(v449 + 4448) = &v462[8 * v461];
            if (v454)
              operator delete(v454);
          }
          else
          {
            *v454 = v453;
            v456 = v454 + 1;
          }
          *(_QWORD *)(v449 + 4440) = v456;
          v452 = *(v456 - 1);
        }
        else
        {
          v451 = *(_QWORD *)(v450 - 8);
          *(_QWORD *)(v449 + 4416) = v450 - 8;
          *(_DWORD *)(*(_QWORD *)(v449 + 4432) + 8 * v451) = -1431655765
                                                           * ((*(_QWORD *)(v449 + 4464) - *(_QWORD *)(v449 + 4456)) >> 3);
          *(_DWORD *)(*(_QWORD *)(v449 + 4432) + 8 * v451 + 4) = (((unint64_t)*(unsigned int *)(*(_QWORD *)(v449 + 4432) + 8 * v451 + 4) << 32)
                                                                + 0x100000000) >> 32;
          v452 = v451 | ((unint64_t)*(unsigned int *)(*(_QWORD *)(v449 + 4432) + 8 * v451 + 4) << 32);
        }
        v471 = *(_QWORD **)(v449 + 4464);
        v472 = *(_QWORD *)(v449 + 4472);
        if ((unint64_t)v471 >= v472)
        {
          v474 = *(_QWORD **)(v449 + 4456);
          v475 = 0xAAAAAAAAAAAAAAABLL * (v471 - v474) + 1;
          if (v475 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_1420;
          v476 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v472 - (_QWORD)v474) >> 3);
          if (2 * v476 > v475)
            v475 = 2 * v476;
          if (v476 >= 0x555555555555555)
            v477 = 0xAAAAAAAAAAAAAAALL;
          else
            v477 = v475;
          if (v477 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_1416;
          v478 = (char *)operator new(24 * v477);
          v479 = &v478[8 * (v471 - v474)];
          v480 = &v478[24 * v477];
          *(_QWORD *)v479 = 0;
          *((_QWORD *)v479 + 1) = 0;
          *((_QWORD *)v479 + 2) = 0;
          v473 = v479 + 24;
          if (v471 == v474)
          {
            *(_QWORD *)(v449 + 4456) = v479;
            *(_QWORD *)(v449 + 4464) = v473;
            *(_QWORD *)(v449 + 4472) = v480;
          }
          else
          {
            do
            {
              v481 = *(_OWORD *)(v471 - 3);
              v471 -= 3;
              *(_OWORD *)(v479 - 24) = v481;
              v479 -= 24;
              *((_QWORD *)v479 + 2) = v471[2];
              v471[1] = 0;
              v471[2] = 0;
            }
            while (v471 != v474);
            v471 = *(_QWORD **)(v449 + 4456);
            v482 = *(_QWORD **)(v449 + 4464);
            *(_QWORD *)(v449 + 4456) = v479;
            *(_QWORD *)(v449 + 4464) = v473;
            *(_QWORD *)(v449 + 4472) = v480;
            while (v482 != v471)
            {
              v483 = (std::__shared_weak_count *)*(v482 - 1);
              if (v483)
              {
                v484 = (unint64_t *)&v483->__shared_owners_;
                do
                  v485 = __ldaxr(v484);
                while (__stlxr(v485 - 1, v484));
                if (!v485)
                {
                  ((void (*)(std::__shared_weak_count *))v483->__on_zero_shared)(v483);
                  std::__shared_weak_count::__release_weak(v483);
                }
              }
              v482 -= 3;
            }
          }
          if (v471)
            operator delete(v471);
        }
        else
        {
          *v471 = 0;
          v471[1] = 0;
          v473 = v471 + 3;
          v471[2] = 0;
        }
        *(_QWORD *)(v449 + 4464) = v473;
        v486 = *(_QWORD *)(v449 + 4488);
        v487 = *(_QWORD *)(v449 + 4496);
        if (v486 >= v487)
        {
          v489 = *(_BYTE **)(v449 + 4480);
          v490 = (uint64_t)(v486 - (_QWORD)v489) >> 3;
          v491 = v490 + 1;
          if ((unint64_t)(v490 + 1) >> 61)
LABEL_1420:
            abort();
          v492 = v487 - (_QWORD)v489;
          if (v492 >> 2 > v491)
            v491 = v492 >> 2;
          if ((unint64_t)v492 >= 0x7FFFFFFFFFFFFFF8)
            v493 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v493 = v491;
          if (v493)
          {
            if (v493 >> 61)
              goto LABEL_1416;
            v494 = operator new(8 * v493);
          }
          else
          {
            v494 = 0;
          }
          v495 = &v494[8 * v490];
          *v495 = v452;
          v488 = v495 + 1;
          if ((_BYTE *)v486 != v489)
          {
            v496 = v486 - (_QWORD)v489 - 8;
            if (v496 < 0x58)
              goto LABEL_1434;
            if ((unint64_t)(v489 - v494) < 0x20)
              goto LABEL_1434;
            v497 = (v496 >> 3) + 1;
            v498 = &v494[8 * v490 - 16];
            v499 = (__int128 *)(v486 - 16);
            v500 = v497 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v501 = *v499;
              *(v498 - 1) = *(v499 - 1);
              *v498 = v501;
              v498 -= 2;
              v499 -= 2;
              v500 -= 4;
            }
            while (v500);
            v495 -= v497 & 0x3FFFFFFFFFFFFFFCLL;
            v486 -= 8 * (v497 & 0x3FFFFFFFFFFFFFFCLL);
            if (v497 != (v497 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_1434:
              do
              {
                v502 = *(_QWORD *)(v486 - 8);
                v486 -= 8;
                *--v495 = v502;
              }
              while ((_BYTE *)v486 != v489);
            }
          }
          *(_QWORD *)(v449 + 4480) = v495;
          *(_QWORD *)(v449 + 4488) = v488;
          *(_QWORD *)(v449 + 4496) = &v494[8 * v493];
          if (v489)
            operator delete(v489);
        }
        else
        {
          *(_QWORD *)v486 = v452;
          v486 += 8;
          v488 = (_QWORD *)v486;
        }
        *(_QWORD *)(v449 + 4488) = v488;
        v503 = (uint64_t *)(v449 + 4328);
        v504 = *(_QWORD *)(v449 + 4336);
        if (v504)
        {
          v505 = (uint8x8_t)vcnt_s8((int8x8_t)v504);
          v505.i16[0] = vaddlv_u8(v505);
          if (v505.u32[0] > 1uLL)
          {
            v486 = v452;
            if (v452 >= v504)
              v486 = v452 % v504;
          }
          else
          {
            v486 = (v504 - 1) & v452;
          }
          v506 = *(_QWORD **)(*v503 + 8 * v486);
          if (v506)
          {
            v507 = (_QWORD *)*v506;
            if (v507)
            {
              if (v505.u32[0] < 2uLL)
              {
                while (1)
                {
                  v509 = v507[1];
                  if (v509 == v452)
                  {
                    if (v507[2] == v452)
                      goto LABEL_771;
                  }
                  else if ((v509 & (v504 - 1)) != v486)
                  {
                    goto LABEL_732;
                  }
                  v507 = (_QWORD *)*v507;
                  if (!v507)
                    goto LABEL_732;
                }
              }
              do
              {
                v508 = v507[1];
                if (v508 == v452)
                {
                  if (v507[2] == v452)
                    goto LABEL_771;
                }
                else
                {
                  if (v508 >= v504)
                    v508 %= v504;
                  if (v508 != v486)
                    break;
                }
                v507 = (_QWORD *)*v507;
              }
              while (v507);
            }
          }
        }
LABEL_732:
        v510 = (char *)operator new(0x30uLL);
        *(_QWORD *)v510 = 0;
        *((_QWORD *)v510 + 1) = v452;
        *((_QWORD *)v510 + 2) = v452;
        *(_OWORD *)(v510 + 24) = xmmword_19FFB3350;
        v510[40] = 0;
        v511 = (float)(unint64_t)(*(_QWORD *)(v449 + 4352) + 1);
        v512 = *(float *)(v449 + 4360);
        if (!v504 || (float)(v512 * (float)v504) < v511)
        {
          v513 = v504 < 3 || (v504 & (v504 - 1)) != 0;
          v514 = v513 | (2 * v504);
          v515 = vcvtps_u32_f32(v511 / v512);
          if (v514 <= v515)
            v516 = v515;
          else
            v516 = v514;
          if (v516 == 1)
          {
            v516 = 2;
          }
          else if ((v516 & (v516 - 1)) != 0)
          {
            v516 = std::__next_prime(v516);
            v504 = *(_QWORD *)(v449 + 4336);
          }
          if (v516 > v504)
            goto LABEL_745;
          if (v516 < v504)
          {
            v517 = vcvtps_u32_f32((float)*(unint64_t *)(v449 + 4352) / *(float *)(v449 + 4360));
            if (v504 < 3
              || (v518 = (uint8x8_t)vcnt_s8((int8x8_t)v504), v518.i16[0] = vaddlv_u8(v518), v518.u32[0] > 1uLL))
            {
              v517 = std::__next_prime(v517);
            }
            else
            {
              v519 = 1 << -(char)__clz(v517 - 1);
              if (v517 >= 2)
                v517 = v519;
            }
            if (v516 <= v517)
              v516 = v517;
            if (v516 < v504)
LABEL_745:
              std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(v449 + 4328, v516);
          }
          v504 = *(_QWORD *)(v449 + 4336);
          if ((v504 & (v504 - 1)) != 0)
          {
            if (v452 >= v504)
              v486 = v452 % v504;
            else
              v486 = v452;
          }
          else
          {
            v486 = (v504 - 1) & v452;
          }
        }
        v520 = *v503;
        v521 = *(_QWORD **)(*v503 + 8 * v486);
        if (v521)
        {
          *(_QWORD *)v510 = *v521;
LABEL_769:
          *v521 = v510;
          goto LABEL_770;
        }
        *(_QWORD *)v510 = *(_QWORD *)(v449 + 4344);
        *(_QWORD *)(v449 + 4344) = v510;
        *(_QWORD *)(v520 + 8 * v486) = v449 + 4344;
        if (*(_QWORD *)v510)
        {
          v522 = *(_QWORD *)(*(_QWORD *)v510 + 8);
          if ((v504 & (v504 - 1)) != 0)
          {
            if (v522 >= v504)
              v522 %= v504;
          }
          else
          {
            v522 &= v504 - 1;
          }
          v521 = (_QWORD *)(*v503 + 8 * v522);
          goto LABEL_769;
        }
LABEL_770:
        ++*(_QWORD *)(v449 + 4352);
LABEL_771:
        v523 = (_QWORD *)*v885;
        *(_QWORD *)v900 = &off_1E4281568;
        *(_QWORD *)&v900[8] = v452;
        *(_QWORD *)&v900[16] = v890;
        *(_QWORD *)&v900[24] = v900;
        *(_QWORD *)&v894[24] = v894;
        *(_QWORD *)v894 = &off_1E4281568;
        *(_OWORD *)&v894[8] = *(_OWORD *)&v900[8];
        *(_DWORD *)&v894[32] = 0;
        ecs2::Runtime::queueCommand(v523, (uint64_t)v894);
        if (*(_DWORD *)&v894[32] != -1)
          ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v894[32]])(&v897, v894);
        *(_DWORD *)&v894[32] = -1;
        v524 = *(_QWORD **)&v900[24];
        if (*(_BYTE **)&v900[24] == v900)
        {
          v524 = v900;
          v525 = 4;
        }
        else
        {
          if (!*(_QWORD *)&v900[24])
            goto LABEL_778;
          v525 = 5;
        }
        (*(void (**)(void))(*v524 + 8 * v525))();
LABEL_778:
        v526 = **a1;
        v527 = *(_QWORD *)(v526 + 5280);
        if (*(_QWORD *)(v526 + 5272) == v527)
        {
          v530 = (-1431655765 * ((*(_QWORD *)(v526 + 5328) - *(_QWORD *)(v526 + 5320)) >> 3)) | 0x100000000;
          v531 = *(uint64_t **)(v526 + 5304);
          v532 = *(_QWORD *)(v526 + 5312);
          if ((unint64_t)v531 >= v532)
          {
            v534 = *(char **)(v526 + 5296);
            v535 = ((char *)v531 - v534) >> 3;
            v536 = v535 + 1;
            if ((unint64_t)(v535 + 1) >> 61)
              goto LABEL_1417;
            v537 = v532 - (_QWORD)v534;
            if (v537 >> 2 > v536)
              v536 = v537 >> 2;
            if ((unint64_t)v537 >= 0x7FFFFFFFFFFFFFF8)
              v538 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v538 = v536;
            if (v538)
            {
              if (v538 >> 61)
                goto LABEL_1416;
              v539 = (char *)operator new(8 * v538);
            }
            else
            {
              v539 = 0;
            }
            v540 = (uint64_t *)&v539[8 * v535];
            *v540 = v530;
            v533 = v540 + 1;
            if (v531 != (uint64_t *)v534)
            {
              v541 = (char *)v531 - v534 - 8;
              if (v541 < 0x58)
                goto LABEL_1435;
              if ((unint64_t)(v534 - v539) < 0x20)
                goto LABEL_1435;
              v542 = (v541 >> 3) + 1;
              v543 = &v539[8 * v535 - 16];
              v544 = v531 - 2;
              v545 = v542 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v546 = *(_OWORD *)v544;
                *((_OWORD *)v543 - 1) = *((_OWORD *)v544 - 1);
                *(_OWORD *)v543 = v546;
                v543 -= 32;
                v544 -= 4;
                v545 -= 4;
              }
              while (v545);
              v540 -= v542 & 0x3FFFFFFFFFFFFFFCLL;
              v531 -= v542 & 0x3FFFFFFFFFFFFFFCLL;
              if (v542 != (v542 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_1435:
                do
                {
                  v547 = *--v531;
                  *--v540 = v547;
                }
                while (v531 != (uint64_t *)v534);
              }
              v531 = *(uint64_t **)(v526 + 5296);
            }
            *(_QWORD *)(v526 + 5296) = v540;
            *(_QWORD *)(v526 + 5304) = v533;
            *(_QWORD *)(v526 + 5312) = &v539[8 * v538];
            if (v531)
              operator delete(v531);
          }
          else
          {
            *v531 = v530;
            v533 = v531 + 1;
          }
          *(_QWORD *)(v526 + 5304) = v533;
          v529 = *(v533 - 1);
        }
        else
        {
          v528 = *(_QWORD *)(v527 - 8);
          *(_QWORD *)(v526 + 5280) = v527 - 8;
          *(_DWORD *)(*(_QWORD *)(v526 + 5296) + 8 * v528) = -1431655765
                                                           * ((*(_QWORD *)(v526 + 5328) - *(_QWORD *)(v526 + 5320)) >> 3);
          *(_DWORD *)(*(_QWORD *)(v526 + 5296) + 8 * v528 + 4) = (((unint64_t)*(unsigned int *)(*(_QWORD *)(v526 + 5296) + 8 * v528 + 4) << 32)
                                                                + 0x100000000) >> 32;
          v529 = v528 | ((unint64_t)*(unsigned int *)(*(_QWORD *)(v526 + 5296) + 8 * v528 + 4) << 32);
        }
        v548 = *(_QWORD **)(v526 + 5328);
        v549 = *(_QWORD *)(v526 + 5336);
        if ((unint64_t)v548 >= v549)
        {
          v551 = *(_QWORD **)(v526 + 5320);
          v552 = 0xAAAAAAAAAAAAAAABLL * (v548 - v551) + 1;
          if (v552 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_1417;
          v553 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v549 - (_QWORD)v551) >> 3);
          if (2 * v553 > v552)
            v552 = 2 * v553;
          if (v553 >= 0x555555555555555)
            v554 = 0xAAAAAAAAAAAAAAALL;
          else
            v554 = v552;
          if (v554 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_1416;
          v555 = (char *)operator new(24 * v554);
          v556 = &v555[8 * (v548 - v551)];
          v557 = &v555[24 * v554];
          *(_QWORD *)v556 = 0;
          *((_QWORD *)v556 + 1) = 0;
          *((_QWORD *)v556 + 2) = 0;
          v550 = v556 + 24;
          if (v548 == v551)
          {
            *(_QWORD *)(v526 + 5320) = v556;
            *(_QWORD *)(v526 + 5328) = v550;
            *(_QWORD *)(v526 + 5336) = v557;
          }
          else
          {
            do
            {
              v558 = *(_OWORD *)(v548 - 3);
              v548 -= 3;
              *(_OWORD *)(v556 - 24) = v558;
              v556 -= 24;
              *((_QWORD *)v556 + 2) = v548[2];
              v548[1] = 0;
              v548[2] = 0;
            }
            while (v548 != v551);
            v548 = *(_QWORD **)(v526 + 5320);
            v559 = *(_QWORD **)(v526 + 5328);
            *(_QWORD *)(v526 + 5320) = v556;
            *(_QWORD *)(v526 + 5328) = v550;
            *(_QWORD *)(v526 + 5336) = v557;
            while (v559 != v548)
            {
              v560 = (std::__shared_weak_count *)*(v559 - 1);
              if (v560)
              {
                v561 = (unint64_t *)&v560->__shared_owners_;
                do
                  v562 = __ldaxr(v561);
                while (__stlxr(v562 - 1, v561));
                if (!v562)
                {
                  ((void (*)(std::__shared_weak_count *))v560->__on_zero_shared)(v560);
                  std::__shared_weak_count::__release_weak(v560);
                }
              }
              v559 -= 3;
            }
          }
          if (v548)
            operator delete(v548);
        }
        else
        {
          *v548 = 0;
          v548[1] = 0;
          v550 = v548 + 3;
          v548[2] = 0;
        }
        *(_QWORD *)(v526 + 5328) = v550;
        v563 = *(_QWORD *)(v526 + 5352);
        v564 = *(_QWORD *)(v526 + 5360);
        if (v563 >= v564)
        {
          v566 = *(_BYTE **)(v526 + 5344);
          v567 = (uint64_t)(v563 - (_QWORD)v566) >> 3;
          v568 = v567 + 1;
          if ((unint64_t)(v567 + 1) >> 61)
LABEL_1417:
            abort();
          v569 = v564 - (_QWORD)v566;
          if (v569 >> 2 > v568)
            v568 = v569 >> 2;
          if ((unint64_t)v569 >= 0x7FFFFFFFFFFFFFF8)
            v570 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v570 = v568;
          if (v570)
          {
            if (v570 >> 61)
              goto LABEL_1416;
            v571 = operator new(8 * v570);
          }
          else
          {
            v571 = 0;
          }
          v572 = &v571[8 * v567];
          *v572 = v529;
          v565 = (size_t)(v572 + 1);
          if ((_BYTE *)v563 != v566)
          {
            v573 = v563 - (_QWORD)v566 - 8;
            if (v573 < 0x58)
              goto LABEL_1436;
            if ((unint64_t)(v566 - v571) < 0x20)
              goto LABEL_1436;
            v574 = (v573 >> 3) + 1;
            v575 = &v571[8 * v567 - 16];
            v576 = (__int128 *)(v563 - 16);
            v577 = v574 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v578 = *v576;
              *(v575 - 1) = *(v576 - 1);
              *v575 = v578;
              v575 -= 2;
              v576 -= 2;
              v577 -= 4;
            }
            while (v577);
            v572 -= v574 & 0x3FFFFFFFFFFFFFFCLL;
            v563 -= 8 * (v574 & 0x3FFFFFFFFFFFFFFCLL);
            if (v574 != (v574 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_1436:
              do
              {
                v579 = *(_QWORD *)(v563 - 8);
                v563 -= 8;
                *--v572 = v579;
              }
              while ((_BYTE *)v563 != v566);
            }
          }
          *(_QWORD *)(v526 + 5344) = v572;
          *(_QWORD *)(v526 + 5352) = v565;
          *(_QWORD *)(v526 + 5360) = &v571[8 * v570];
          if (v566)
            operator delete(v566);
        }
        else
        {
          *(_QWORD *)v563 = v529;
          v563 += 8;
          v565 = v563;
        }
        *(_QWORD *)(v526 + 5352) = v565;
        v580 = (uint64_t *)(v526 + 5192);
        v581 = *(_QWORD *)(v526 + 5200);
        if (v581)
        {
          v582 = (uint8x8_t)vcnt_s8((int8x8_t)v581);
          v582.i16[0] = vaddlv_u8(v582);
          if (v582.u32[0] > 1uLL)
          {
            v565 = v529;
            if (v529 >= v581)
              v565 = v529 % v581;
          }
          else
          {
            v565 = (v581 - 1) & v529;
          }
          v583 = *(_QWORD **)(*v580 + 8 * v565);
          if (v583)
          {
            v584 = (_QWORD *)*v583;
            if (v584)
            {
              if (v582.u32[0] < 2uLL)
              {
                while (1)
                {
                  v586 = v584[1];
                  if (v586 == v529)
                  {
                    if (v584[2] == v529)
                      goto LABEL_905;
                  }
                  else if ((v586 & (v581 - 1)) != v565)
                  {
                    goto LABEL_866;
                  }
                  v584 = (_QWORD *)*v584;
                  if (!v584)
                    goto LABEL_866;
                }
              }
              do
              {
                v585 = v584[1];
                if (v585 == v529)
                {
                  if (v584[2] == v529)
                    goto LABEL_905;
                }
                else
                {
                  if (v585 >= v581)
                    v585 %= v581;
                  if (v585 != v565)
                    break;
                }
                v584 = (_QWORD *)*v584;
              }
              while (v584);
            }
          }
        }
LABEL_866:
        v587 = (char *)operator new(0x30uLL);
        *(_QWORD *)v587 = 0;
        *((_QWORD *)v587 + 1) = v529;
        *((_QWORD *)v587 + 2) = v529;
        *(_OWORD *)(v587 + 24) = xmmword_19FFB3350;
        v587[40] = 0;
        v588 = (float)(unint64_t)(*(_QWORD *)(v526 + 5216) + 1);
        v589 = *(float *)(v526 + 5224);
        if (!v581 || (float)(v589 * (float)v581) < v588)
        {
          v590 = v581 < 3 || (v581 & (v581 - 1)) != 0;
          v591 = v590 | (2 * v581);
          v592 = vcvtps_u32_f32(v588 / v589);
          if (v591 <= v592)
            v563 = v592;
          else
            v563 = v591;
          if (v563 == 1)
          {
            v563 = 2;
          }
          else if ((v563 & (v563 - 1)) != 0)
          {
            v563 = std::__next_prime(v563);
            v581 = *(_QWORD *)(v526 + 5200);
          }
          if (v563 > v581)
            goto LABEL_879;
          if (v563 < v581)
          {
            v593 = vcvtps_u32_f32((float)*(unint64_t *)(v526 + 5216) / *(float *)(v526 + 5224));
            if (v581 < 3
              || (v594 = (uint8x8_t)vcnt_s8((int8x8_t)v581), v594.i16[0] = vaddlv_u8(v594), v594.u32[0] > 1uLL))
            {
              v593 = std::__next_prime(v593);
            }
            else
            {
              v595 = 1 << -(char)__clz(v593 - 1);
              if (v593 >= 2)
                v593 = v595;
            }
            if (v563 <= v593)
              v563 = v593;
            if (v563 < v581)
LABEL_879:
              std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(v526 + 5192, v563);
          }
          v581 = *(_QWORD *)(v526 + 5200);
          if ((v581 & (v581 - 1)) != 0)
          {
            if (v529 >= v581)
              v565 = v529 % v581;
            else
              v565 = v529;
          }
          else
          {
            v565 = (v581 - 1) & v529;
          }
        }
        v596 = *v580;
        v597 = *(_QWORD **)(*v580 + 8 * v565);
        if (v597)
        {
          *(_QWORD *)v587 = *v597;
LABEL_903:
          *v597 = v587;
          goto LABEL_904;
        }
        *(_QWORD *)v587 = *(_QWORD *)(v526 + 5208);
        *(_QWORD *)(v526 + 5208) = v587;
        *(_QWORD *)(v596 + 8 * v565) = v526 + 5208;
        if (*(_QWORD *)v587)
        {
          v598 = *(_QWORD *)(*(_QWORD *)v587 + 8);
          if ((v581 & (v581 - 1)) != 0)
          {
            if (v598 >= v581)
              v598 %= v581;
          }
          else
          {
            v598 &= v581 - 1;
          }
          v597 = (_QWORD *)(*v580 + 8 * v598);
          goto LABEL_903;
        }
LABEL_904:
        ++*(_QWORD *)(v526 + 5216);
LABEL_905:
        v599 = **a1;
        v600 = *(_QWORD *)(v599 + 5296);
        *(_QWORD *)v894 = v529;
        v601 = *(_DWORD *)(v600 + 8 * v529);
        v602 = *(_QWORD *)(v599 + 5320);
        v603 = operator new();
        v604 = (_QWORD *)ggl::BufferData::BufferData(v603, qword_1EE550B78, 2, 0, 6, 1);
        v604[25] = ggl::FlyoverCommon::Material::reflection(void)::reflection;
        *v604 = &off_1E42B8E70;
        v605 = *(_QWORD *)(v599 + 5376);
        if (v605)
        {
          v606 = (uint8x8_t)vcnt_s8((int8x8_t)v605);
          v606.i16[0] = vaddlv_u8(v606);
          if (v606.u32[0] > 1uLL)
          {
            v563 = v529;
            if (v529 >= v605)
              v563 = v529 % v605;
          }
          else
          {
            v563 = (v605 - 1) & v529;
          }
          v607 = *(_QWORD ***)(*(_QWORD *)(v599 + 5368) + 8 * v563);
          if (v607)
          {
            v608 = *v607;
            if (*v607)
            {
              if (v606.u32[0] < 2uLL)
              {
                while (1)
                {
                  v610 = v608[1];
                  if (v610 == v529)
                  {
                    if (v608[2] == v529)
                      goto LABEL_992;
                  }
                  else if ((v610 & (v605 - 1)) != v563)
                  {
                    goto LABEL_925;
                  }
                  v608 = (_QWORD *)*v608;
                  if (!v608)
                    goto LABEL_925;
                }
              }
              do
              {
                v609 = v608[1];
                if (v609 == v529)
                {
                  if (v608[2] == v529)
                    goto LABEL_992;
                }
                else
                {
                  if (v609 >= v605)
                    v609 %= v605;
                  if (v609 != v563)
                    break;
                }
                v608 = (_QWORD *)*v608;
              }
              while (v608);
            }
          }
        }
LABEL_925:
        v608 = operator new(0x20uLL);
        v611 = (_QWORD *)(v599 + 5384);
        *v608 = 0;
        v608[1] = v529;
        v608[2] = v529;
        v608[3] = 0;
        v612 = (float)(unint64_t)(*(_QWORD *)(v599 + 5392) + 1);
        v613 = *(float *)(v599 + 5400);
        if (!v605 || (float)(v613 * (float)v605) < v612)
        {
          v614 = (v605 & (v605 - 1)) != 0;
          if (v605 < 3)
            v614 = 1;
          v615 = v614 | (2 * v605);
          v616 = vcvtps_u32_f32(v612 / v613);
          if (v615 <= v616)
            v617 = v616;
          else
            v617 = v615;
          if (v617 == 1)
          {
            v617 = 2;
          }
          else if ((v617 & (v617 - 1)) != 0)
          {
            v617 = std::__next_prime(v617);
            v605 = *(_QWORD *)(v599 + 5376);
          }
          if (v617 <= v605)
          {
            if (v617 < v605)
            {
              v629 = vcvtps_u32_f32((float)*(unint64_t *)(v599 + 5392) / *(float *)(v599 + 5400));
              if (v605 < 3
                || (v630 = (uint8x8_t)vcnt_s8((int8x8_t)v605), v630.i16[0] = vaddlv_u8(v630), v630.u32[0] > 1uLL))
              {
                v629 = std::__next_prime(v629);
              }
              else
              {
                v631 = 1 << -(char)__clz(v629 - 1);
                if (v629 >= 2)
                  v629 = v631;
              }
              if (v617 <= v629)
                v617 = v629;
              if (v617 < v605)
              {
                if (v617)
                  goto LABEL_937;
                v636 = *(void **)(v599 + 5368);
                *(_QWORD *)(v599 + 5368) = 0;
                if (v636)
                  operator delete(v636);
                *(_QWORD *)(v599 + 5376) = 0;
              }
            }
LABEL_977:
            v605 = *(_QWORD *)(v599 + 5376);
            if ((v605 & (v605 - 1)) != 0)
            {
              if (v529 >= v605)
                v563 = v529 % v605;
              else
                v563 = v529;
            }
            else
            {
              v563 = (v605 - 1) & v529;
            }
            goto LABEL_982;
          }
LABEL_937:
          if (v617 >> 61)
            goto LABEL_1416;
          v618 = operator new(8 * v617);
          v619 = *(void **)(v599 + 5368);
          *(_QWORD *)(v599 + 5368) = v618;
          if (v619)
            operator delete(v619);
          v620 = 0;
          *(_QWORD *)(v599 + 5376) = v617;
          do
            *(_QWORD *)(*(_QWORD *)(v599 + 5368) + 8 * v620++) = 0;
          while (v617 != v620);
          v621 = (_QWORD *)*v611;
          if (!*v611)
            goto LABEL_977;
          v622 = v621[1];
          v623 = v617 - 1;
          if ((v617 & (v617 - 1)) == 0)
          {
            v624 = v622 & v623;
            *(_QWORD *)(*(_QWORD *)(v599 + 5368) + 8 * v624) = v611;
            while (1)
            {
              v625 = (_QWORD *)*v621;
              if (!*v621)
                break;
              v626 = v625[1] & v623;
              if (v626 == v624)
              {
                v621 = (_QWORD *)*v621;
              }
              else
              {
                v627 = *(_QWORD *)(v599 + 5368);
                if (*(_QWORD *)(v627 + 8 * v626))
                {
                  *v621 = *v625;
                  v628 = 8 * v626;
                  *v625 = **(_QWORD **)(*(_QWORD *)(v599 + 5368) + v628);
                  **(_QWORD **)(*(_QWORD *)(v599 + 5368) + v628) = v625;
                }
                else
                {
                  *(_QWORD *)(v627 + 8 * v626) = v621;
                  v621 = v625;
                  v624 = v626;
                }
              }
            }
            goto LABEL_977;
          }
          if (v622 >= v617)
            v622 %= v617;
          *(_QWORD *)(*(_QWORD *)(v599 + 5368) + 8 * v622) = v611;
          v632 = (_QWORD *)*v621;
          if (!*v621)
            goto LABEL_977;
          while (2)
          {
            v634 = v632[1];
            if (v634 >= v617)
              v634 %= v617;
            if (v634 != v622)
            {
              v635 = *(_QWORD *)(v599 + 5368);
              if (!*(_QWORD *)(v635 + 8 * v634))
              {
                *(_QWORD *)(v635 + 8 * v634) = v621;
LABEL_963:
                v621 = v632;
                v632 = (_QWORD *)*v632;
                v622 = v634;
                if (!v632)
                  goto LABEL_977;
                continue;
              }
              *v621 = *v632;
              v633 = 8 * v634;
              *v632 = **(_QWORD **)(*(_QWORD *)(v599 + 5368) + v633);
              **(_QWORD **)(*(_QWORD *)(v599 + 5368) + v633) = v632;
              v632 = v621;
            }
            break;
          }
          v634 = v622;
          goto LABEL_963;
        }
LABEL_982:
        v637 = *(_QWORD *)(v599 + 5368);
        v638 = *(_QWORD **)(v637 + 8 * v563);
        if (v638)
        {
          *v608 = *v638;
LABEL_990:
          *v638 = v608;
          goto LABEL_991;
        }
        *v608 = *v611;
        *v611 = v608;
        *(_QWORD *)(v637 + 8 * v563) = v611;
        if (*v608)
        {
          v639 = *(_QWORD *)(*v608 + 8);
          if ((v605 & (v605 - 1)) != 0)
          {
            if (v639 >= v605)
              v639 %= v605;
          }
          else
          {
            v639 &= v605 - 1;
          }
          v638 = (_QWORD *)(*(_QWORD *)(v599 + 5368) + 8 * v639);
          goto LABEL_990;
        }
LABEL_991:
        ++*(_QWORD *)(v599 + 5392);
LABEL_992:
        v640 = v608[3];
        v608[3] = v603;
        if (v640)
          (*(void (**)(uint64_t))(*(_QWORD *)v640 + 8))(v640);
        v641 = std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Material>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Material>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Material>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Material>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Material>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Material>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Material>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Material>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Material>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Material>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Material>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Material>> const&>,std::tuple<>>(v599 + 5192, *(unint64_t *)v894, v894);
        ++v641[3];
        *(_QWORD *)(v602 + 24 * v601) = v603;
        v642 = *(_QWORD *)(v603 + 8);
        **(_DWORD **)(v603 + 72) = *((_DWORD *)v882 + 39);
        if (*(_QWORD *)(v603 + 64) > v642)
          v642 = *(_QWORD *)(v603 + 64);
        *(_QWORD *)(v603 + 56) = 0;
        *(_QWORD *)(v603 + 64) = v642;
        v643 = (_QWORD *)*v885;
        *(_QWORD *)v900 = &off_1E42807A0;
        *(_QWORD *)&v900[8] = v529;
        *(_QWORD *)&v900[16] = v890;
        *(_QWORD *)&v900[24] = v900;
        *(_QWORD *)&v894[24] = v894;
        *(_QWORD *)v894 = &off_1E42807A0;
        *(_OWORD *)&v894[8] = *(_OWORD *)&v900[8];
        *(_DWORD *)&v894[32] = 0;
        ecs2::Runtime::queueCommand(v643, (uint64_t)v894);
        if (*(_DWORD *)&v894[32] != -1)
          ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v894[32]])(&v897, v894);
        *(_DWORD *)&v894[32] = -1;
        v644 = *(_QWORD **)&v900[24];
        if (*(_BYTE **)&v900[24] == v900)
        {
          v644 = v900;
          v645 = 4;
        }
        else
        {
          if (!*(_QWORD *)&v900[24])
            goto LABEL_1003;
          v645 = 5;
        }
        (*(void (**)(void))(*v644 + 8 * v645))();
LABEL_1003:
        v646 = **a1;
        v647 = *(_QWORD *)(v646 + 5064);
        if (*(_QWORD *)(v646 + 5056) == v647)
        {
          v650 = (-1431655765 * ((*(_QWORD *)(v646 + 5112) - *(_QWORD *)(v646 + 5104)) >> 3)) | 0x100000000;
          v651 = *(uint64_t **)(v646 + 5088);
          v652 = *(_QWORD *)(v646 + 5096);
          if ((unint64_t)v651 >= v652)
          {
            v654 = *(char **)(v646 + 5080);
            v655 = ((char *)v651 - v654) >> 3;
            v656 = v655 + 1;
            if ((unint64_t)(v655 + 1) >> 61)
              goto LABEL_1419;
            v657 = v652 - (_QWORD)v654;
            if (v657 >> 2 > v656)
              v656 = v657 >> 2;
            if ((unint64_t)v657 >= 0x7FFFFFFFFFFFFFF8)
              v658 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v658 = v656;
            if (v658)
            {
              if (v658 >> 61)
                goto LABEL_1416;
              v659 = (char *)operator new(8 * v658);
            }
            else
            {
              v659 = 0;
            }
            v660 = (uint64_t *)&v659[8 * v655];
            *v660 = v650;
            v653 = v660 + 1;
            if (v651 != (uint64_t *)v654)
            {
              v661 = (char *)v651 - v654 - 8;
              if (v661 < 0x58)
                goto LABEL_1437;
              if ((unint64_t)(v654 - v659) < 0x20)
                goto LABEL_1437;
              v662 = (v661 >> 3) + 1;
              v663 = &v659[8 * v655 - 16];
              v664 = v651 - 2;
              v665 = v662 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v666 = *(_OWORD *)v664;
                *((_OWORD *)v663 - 1) = *((_OWORD *)v664 - 1);
                *(_OWORD *)v663 = v666;
                v663 -= 32;
                v664 -= 4;
                v665 -= 4;
              }
              while (v665);
              v660 -= v662 & 0x3FFFFFFFFFFFFFFCLL;
              v651 -= v662 & 0x3FFFFFFFFFFFFFFCLL;
              if (v662 != (v662 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_1437:
                do
                {
                  v667 = *--v651;
                  *--v660 = v667;
                }
                while (v651 != (uint64_t *)v654);
              }
              v651 = *(uint64_t **)(v646 + 5080);
            }
            *(_QWORD *)(v646 + 5080) = v660;
            *(_QWORD *)(v646 + 5088) = v653;
            *(_QWORD *)(v646 + 5096) = &v659[8 * v658];
            if (v651)
              operator delete(v651);
          }
          else
          {
            *v651 = v650;
            v653 = v651 + 1;
          }
          *(_QWORD *)(v646 + 5088) = v653;
          v649 = *(v653 - 1);
        }
        else
        {
          v648 = *(_QWORD *)(v647 - 8);
          *(_QWORD *)(v646 + 5064) = v647 - 8;
          *(_DWORD *)(*(_QWORD *)(v646 + 5080) + 8 * v648) = -1431655765
                                                           * ((*(_QWORD *)(v646 + 5112) - *(_QWORD *)(v646 + 5104)) >> 3);
          *(_DWORD *)(*(_QWORD *)(v646 + 5080) + 8 * v648 + 4) = (((unint64_t)*(unsigned int *)(*(_QWORD *)(v646 + 5080) + 8 * v648 + 4) << 32)
                                                                + 0x100000000) >> 32;
          v649 = v648 | ((unint64_t)*(unsigned int *)(*(_QWORD *)(v646 + 5080) + 8 * v648 + 4) << 32);
        }
        v668 = *(_QWORD **)(v646 + 5112);
        v669 = *(_QWORD *)(v646 + 5120);
        if ((unint64_t)v668 < v669)
        {
          *v668 = 0;
          v668[1] = 0;
          v670 = v668 + 3;
          v668[2] = 0;
          goto LABEL_1050;
        }
        v671 = *(_QWORD **)(v646 + 5104);
        v672 = 0xAAAAAAAAAAAAAAABLL * (v668 - v671) + 1;
        if (v672 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_1419;
        v673 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v669 - (_QWORD)v671) >> 3);
        if (2 * v673 > v672)
          v672 = 2 * v673;
        if (v673 >= 0x555555555555555)
          v674 = 0xAAAAAAAAAAAAAAALL;
        else
          v674 = v672;
        if (v674 > 0xAAAAAAAAAAAAAAALL)
LABEL_1416:
          std::__throw_bad_array_new_length[abi:nn180100]();
        v675 = (char *)operator new(24 * v674);
        v676 = &v675[8 * (v668 - v671)];
        v677 = &v675[24 * v674];
        *(_QWORD *)v676 = 0;
        *((_QWORD *)v676 + 1) = 0;
        *((_QWORD *)v676 + 2) = 0;
        v670 = v676 + 24;
        if (v668 == v671)
        {
          *(_QWORD *)(v646 + 5104) = v676;
          *(_QWORD *)(v646 + 5112) = v670;
          *(_QWORD *)(v646 + 5120) = v677;
        }
        else
        {
          do
          {
            v678 = *(_OWORD *)(v668 - 3);
            v668 -= 3;
            *(_OWORD *)(v676 - 24) = v678;
            v676 -= 24;
            *((_QWORD *)v676 + 2) = v668[2];
            v668[1] = 0;
            v668[2] = 0;
          }
          while (v668 != v671);
          v668 = *(_QWORD **)(v646 + 5104);
          v679 = *(_QWORD **)(v646 + 5112);
          *(_QWORD *)(v646 + 5104) = v676;
          *(_QWORD *)(v646 + 5112) = v670;
          *(_QWORD *)(v646 + 5120) = v677;
          while (v679 != v668)
          {
            v680 = (std::__shared_weak_count *)*(v679 - 1);
            if (v680)
            {
              v681 = (unint64_t *)&v680->__shared_owners_;
              do
                v682 = __ldaxr(v681);
              while (__stlxr(v682 - 1, v681));
              if (!v682)
              {
                ((void (*)(std::__shared_weak_count *))v680->__on_zero_shared)(v680);
                std::__shared_weak_count::__release_weak(v680);
              }
            }
            v679 -= 3;
          }
        }
        if (v668)
          operator delete(v668);
LABEL_1050:
        *(_QWORD *)(v646 + 5112) = v670;
        v683 = *(_QWORD *)(v646 + 5136);
        v684 = *(_QWORD *)(v646 + 5144);
        if (v683 >= v684)
        {
          v686 = *(_BYTE **)(v646 + 5128);
          v687 = (uint64_t)(v683 - (_QWORD)v686) >> 3;
          v688 = v687 + 1;
          if ((unint64_t)(v687 + 1) >> 61)
LABEL_1419:
            abort();
          v689 = v684 - (_QWORD)v686;
          if (v689 >> 2 > v688)
            v688 = v689 >> 2;
          if ((unint64_t)v689 >= 0x7FFFFFFFFFFFFFF8)
            v690 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v690 = v688;
          if (v690)
          {
            if (v690 >> 61)
              goto LABEL_1416;
            v691 = operator new(8 * v690);
          }
          else
          {
            v691 = 0;
          }
          v692 = &v691[8 * v687];
          *v692 = v649;
          v685 = (size_t)(v692 + 1);
          if ((_BYTE *)v683 != v686)
          {
            v693 = v683 - (_QWORD)v686 - 8;
            if (v693 < 0x58)
              goto LABEL_1438;
            if ((unint64_t)(v686 - v691) < 0x20)
              goto LABEL_1438;
            v694 = (v693 >> 3) + 1;
            v695 = &v691[8 * v687 - 16];
            v696 = (__int128 *)(v683 - 16);
            v697 = v694 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v698 = *v696;
              *(v695 - 1) = *(v696 - 1);
              *v695 = v698;
              v695 -= 2;
              v696 -= 2;
              v697 -= 4;
            }
            while (v697);
            v692 -= v694 & 0x3FFFFFFFFFFFFFFCLL;
            v683 -= 8 * (v694 & 0x3FFFFFFFFFFFFFFCLL);
            if (v694 != (v694 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_1438:
              do
              {
                v699 = *(_QWORD *)(v683 - 8);
                v683 -= 8;
                *--v692 = v699;
              }
              while ((_BYTE *)v683 != v686);
            }
          }
          *(_QWORD *)(v646 + 5128) = v692;
          *(_QWORD *)(v646 + 5136) = v685;
          *(_QWORD *)(v646 + 5144) = &v691[8 * v690];
          if (v686)
            operator delete(v686);
        }
        else
        {
          *(_QWORD *)v683 = v649;
          v683 += 8;
          v685 = v683;
        }
        *(_QWORD *)(v646 + 5136) = v685;
        v700 = (uint64_t *)(v646 + 4976);
        v701 = *(_QWORD *)(v646 + 4984);
        if (v701)
        {
          v702 = (uint8x8_t)vcnt_s8((int8x8_t)v701);
          v702.i16[0] = vaddlv_u8(v702);
          if (v702.u32[0] > 1uLL)
          {
            v685 = v649;
            if (v649 >= v701)
              v685 = v649 % v701;
          }
          else
          {
            v685 = (v701 - 1) & v649;
          }
          v703 = *(_QWORD **)(*v700 + 8 * v685);
          if (v703)
          {
            v704 = (_QWORD *)*v703;
            if (v704)
            {
              if (v702.u32[0] < 2uLL)
              {
                while (1)
                {
                  v706 = v704[1];
                  if (v706 == v649)
                  {
                    if (v704[2] == v649)
                      goto LABEL_1130;
                  }
                  else if ((v706 & (v701 - 1)) != v685)
                  {
                    goto LABEL_1091;
                  }
                  v704 = (_QWORD *)*v704;
                  if (!v704)
                    goto LABEL_1091;
                }
              }
              do
              {
                v705 = v704[1];
                if (v705 == v649)
                {
                  if (v704[2] == v649)
                    goto LABEL_1130;
                }
                else
                {
                  if (v705 >= v701)
                    v705 %= v701;
                  if (v705 != v685)
                    break;
                }
                v704 = (_QWORD *)*v704;
              }
              while (v704);
            }
          }
        }
LABEL_1091:
        v707 = (char *)operator new(0x30uLL);
        *(_QWORD *)v707 = 0;
        *((_QWORD *)v707 + 1) = v649;
        *((_QWORD *)v707 + 2) = v649;
        *(_OWORD *)(v707 + 24) = xmmword_19FFB3350;
        v707[40] = 0;
        v708 = (float)(unint64_t)(*(_QWORD *)(v646 + 5000) + 1);
        v709 = *(float *)(v646 + 5008);
        if (!v701 || (float)(v709 * (float)v701) < v708)
        {
          v710 = v701 < 3 || (v701 & (v701 - 1)) != 0;
          v711 = v710 | (2 * v701);
          v712 = vcvtps_u32_f32(v708 / v709);
          if (v711 <= v712)
            v683 = v712;
          else
            v683 = v711;
          if (v683 == 1)
          {
            v683 = 2;
          }
          else if ((v683 & (v683 - 1)) != 0)
          {
            v683 = std::__next_prime(v683);
            v701 = *(_QWORD *)(v646 + 4984);
          }
          if (v683 > v701)
            goto LABEL_1104;
          if (v683 < v701)
          {
            v713 = vcvtps_u32_f32((float)*(unint64_t *)(v646 + 5000) / *(float *)(v646 + 5008));
            if (v701 < 3
              || (v714 = (uint8x8_t)vcnt_s8((int8x8_t)v701), v714.i16[0] = vaddlv_u8(v714), v714.u32[0] > 1uLL))
            {
              v713 = std::__next_prime(v713);
            }
            else
            {
              v715 = 1 << -(char)__clz(v713 - 1);
              if (v713 >= 2)
                v713 = v715;
            }
            if (v683 <= v713)
              v683 = v713;
            if (v683 < v701)
LABEL_1104:
              std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(v646 + 4976, v683);
          }
          v701 = *(_QWORD *)(v646 + 4984);
          if ((v701 & (v701 - 1)) != 0)
          {
            if (v649 >= v701)
              v685 = v649 % v701;
            else
              v685 = v649;
          }
          else
          {
            v685 = (v701 - 1) & v649;
          }
        }
        v716 = *v700;
        v717 = *(_QWORD **)(*v700 + 8 * v685);
        if (v717)
        {
          *(_QWORD *)v707 = *v717;
LABEL_1128:
          *v717 = v707;
          goto LABEL_1129;
        }
        *(_QWORD *)v707 = *(_QWORD *)(v646 + 4992);
        *(_QWORD *)(v646 + 4992) = v707;
        *(_QWORD *)(v716 + 8 * v685) = v646 + 4992;
        if (*(_QWORD *)v707)
        {
          v718 = *(_QWORD *)(*(_QWORD *)v707 + 8);
          if ((v701 & (v701 - 1)) != 0)
          {
            if (v718 >= v701)
              v718 %= v701;
          }
          else
          {
            v718 &= v701 - 1;
          }
          v717 = (_QWORD *)(*v700 + 8 * v718);
          goto LABEL_1128;
        }
LABEL_1129:
        ++*(_QWORD *)(v646 + 5000);
LABEL_1130:
        v719 = **a1;
        v720 = *(_QWORD *)(v719 + 5080);
        *(_QWORD *)v894 = v649;
        v721 = *(_DWORD *)(v720 + 8 * v649);
        v722 = *(_QWORD *)(v719 + 5104);
        v113 = v880;
        v723 = (_QWORD *)operator new();
        v724 = (_QWORD *)ggl::BufferData::BufferData((uint64_t)v723, qword_1EE550BD8, 2, 0, 6, 1);
        v724[25] = ggl::FlyoverCommon::Texcoords::reflection(void)::reflection;
        *v724 = &off_1E42B8E90;
        v725 = *(_QWORD *)(v719 + 5160);
        if (v725)
        {
          v726 = (uint8x8_t)vcnt_s8((int8x8_t)v725);
          v726.i16[0] = vaddlv_u8(v726);
          if (v726.u32[0] > 1uLL)
          {
            v683 = v649;
            if (v649 >= v725)
              v683 = v649 % v725;
          }
          else
          {
            v683 = (v725 - 1) & v649;
          }
          v727 = *(_QWORD ***)(*(_QWORD *)(v719 + 5152) + 8 * v683);
          if (v727)
          {
            v728 = *v727;
            if (*v727)
            {
              if (v726.u32[0] < 2uLL)
              {
                while (1)
                {
                  v730 = v728[1];
                  if (v730 == v649)
                  {
                    if (v728[2] == v649)
                      goto LABEL_1217;
                  }
                  else if ((v730 & (v725 - 1)) != v683)
                  {
                    goto LABEL_1150;
                  }
                  v728 = (_QWORD *)*v728;
                  if (!v728)
                    goto LABEL_1150;
                }
              }
              do
              {
                v729 = v728[1];
                if (v729 == v649)
                {
                  if (v728[2] == v649)
                    goto LABEL_1217;
                }
                else
                {
                  if (v729 >= v725)
                    v729 %= v725;
                  if (v729 != v683)
                    break;
                }
                v728 = (_QWORD *)*v728;
              }
              while (v728);
            }
          }
        }
LABEL_1150:
        v728 = operator new(0x20uLL);
        v731 = (_QWORD *)(v719 + 5168);
        *v728 = 0;
        v728[1] = v649;
        v728[2] = v649;
        v728[3] = 0;
        v732 = (float)(unint64_t)(*(_QWORD *)(v719 + 5176) + 1);
        v733 = *(float *)(v719 + 5184);
        if (!v725 || (float)(v733 * (float)v725) < v732)
        {
          v734 = (v725 & (v725 - 1)) != 0;
          if (v725 < 3)
            v734 = 1;
          v735 = v734 | (2 * v725);
          v736 = vcvtps_u32_f32(v732 / v733);
          if (v735 <= v736)
            v737 = v736;
          else
            v737 = v735;
          if (v737 == 1)
          {
            v737 = 2;
          }
          else if ((v737 & (v737 - 1)) != 0)
          {
            v737 = std::__next_prime(v737);
            v725 = *(_QWORD *)(v719 + 5160);
          }
          if (v737 <= v725)
          {
            if (v737 >= v725)
              goto LABEL_1202;
            v749 = vcvtps_u32_f32((float)*(unint64_t *)(v719 + 5176) / *(float *)(v719 + 5184));
            if (v725 < 3
              || (v750 = (uint8x8_t)vcnt_s8((int8x8_t)v725), v750.i16[0] = vaddlv_u8(v750), v750.u32[0] > 1uLL))
            {
              v749 = std::__next_prime(v749);
            }
            else
            {
              v751 = 1 << -(char)__clz(v749 - 1);
              if (v749 >= 2)
                v749 = v751;
            }
            if (v737 <= v749)
              v737 = v749;
            if (v737 >= v725)
              goto LABEL_1202;
            if (!v737)
            {
              v756 = *(void **)(v719 + 5152);
              *(_QWORD *)(v719 + 5152) = 0;
              if (v756)
                operator delete(v756);
              *(_QWORD *)(v719 + 5160) = 0;
              goto LABEL_1202;
            }
          }
          if (v737 >> 61)
            goto LABEL_1416;
          v738 = operator new(8 * v737);
          v739 = *(void **)(v719 + 5152);
          *(_QWORD *)(v719 + 5152) = v738;
          if (v739)
            operator delete(v739);
          v740 = 0;
          *(_QWORD *)(v719 + 5160) = v737;
          do
            *(_QWORD *)(*(_QWORD *)(v719 + 5152) + 8 * v740++) = 0;
          while (v737 != v740);
          v741 = (_QWORD *)*v731;
          if (!*v731)
            goto LABEL_1202;
          v742 = v741[1];
          v743 = v737 - 1;
          if ((v737 & (v737 - 1)) == 0)
          {
            v744 = v742 & v743;
            *(_QWORD *)(*(_QWORD *)(v719 + 5152) + 8 * v744) = v731;
            while (1)
            {
              v745 = (_QWORD *)*v741;
              if (!*v741)
                break;
              v746 = v745[1] & v743;
              if (v746 == v744)
              {
                v741 = (_QWORD *)*v741;
              }
              else
              {
                v747 = *(_QWORD *)(v719 + 5152);
                if (*(_QWORD *)(v747 + 8 * v746))
                {
                  *v741 = *v745;
                  v748 = 8 * v746;
                  *v745 = **(_QWORD **)(*(_QWORD *)(v719 + 5152) + v748);
                  **(_QWORD **)(*(_QWORD *)(v719 + 5152) + v748) = v745;
                }
                else
                {
                  *(_QWORD *)(v747 + 8 * v746) = v741;
                  v741 = v745;
                  v744 = v746;
                }
              }
            }
LABEL_1202:
            v725 = *(_QWORD *)(v719 + 5160);
            if ((v725 & (v725 - 1)) != 0)
            {
              if (v649 >= v725)
                v683 = v649 % v725;
              else
                v683 = v649;
            }
            else
            {
              v683 = (v725 - 1) & v649;
            }
            goto LABEL_1207;
          }
          if (v742 >= v737)
            v742 %= v737;
          *(_QWORD *)(*(_QWORD *)(v719 + 5152) + 8 * v742) = v731;
          v752 = (_QWORD *)*v741;
          if (!*v741)
            goto LABEL_1202;
          while (1)
          {
            v754 = v752[1];
            if (v754 >= v737)
              v754 %= v737;
            if (v754 != v742)
            {
              v755 = *(_QWORD *)(v719 + 5152);
              if (!*(_QWORD *)(v755 + 8 * v754))
              {
                *(_QWORD *)(v755 + 8 * v754) = v741;
                goto LABEL_1188;
              }
              *v741 = *v752;
              v753 = 8 * v754;
              *v752 = **(_QWORD **)(*(_QWORD *)(v719 + 5152) + v753);
              **(_QWORD **)(*(_QWORD *)(v719 + 5152) + v753) = v752;
              v752 = v741;
            }
            v754 = v742;
LABEL_1188:
            v741 = v752;
            v752 = (_QWORD *)*v752;
            v742 = v754;
            if (!v752)
              goto LABEL_1202;
          }
        }
LABEL_1207:
        v757 = *(_QWORD *)(v719 + 5152);
        v758 = *(_QWORD **)(v757 + 8 * v683);
        if (v758)
        {
          *v728 = *v758;
          v113 = v880;
LABEL_1215:
          *v758 = v728;
          goto LABEL_1216;
        }
        *v728 = *v731;
        *v731 = v728;
        *(_QWORD *)(v757 + 8 * v683) = v731;
        v113 = v880;
        if (*v728)
        {
          v759 = *(_QWORD *)(*v728 + 8);
          if ((v725 & (v725 - 1)) != 0)
          {
            if (v759 >= v725)
              v759 %= v725;
          }
          else
          {
            v759 &= v725 - 1;
          }
          v758 = (_QWORD *)(*(_QWORD *)(v719 + 5152) + 8 * v759);
          goto LABEL_1215;
        }
LABEL_1216:
        ++*(_QWORD *)(v719 + 5176);
LABEL_1217:
        v760 = v728[3];
        v728[3] = v723;
        if (v760)
          (*(void (**)(uint64_t))(*(_QWORD *)v760 + 8))(v760);
        v761 = std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Texcoords>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Texcoords>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Texcoords>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Texcoords>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Texcoords>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Texcoords>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Texcoords>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Texcoords>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Texcoords>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Texcoords>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Texcoords>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Texcoords>> const&>,std::tuple<>>(v719 + 4976, *(unint64_t *)v894, v894);
        ++v761[3];
        *(_QWORD *)(v722 + 24 * v721) = v723;
        v762 = v723[1];
        *(_OWORD *)v723[9] = xmmword_19FFB3480;
        if (v723[8] > v762)
          v762 = v723[8];
        v723[7] = 0;
        v723[8] = v762;
        v763 = (_QWORD *)*v885;
        *(_QWORD *)v900 = &off_1E4280A28;
        *(_QWORD *)&v900[8] = v649;
        *(_QWORD *)&v900[16] = v890;
        *(_QWORD *)&v900[24] = v900;
        *(_QWORD *)&v894[24] = v894;
        *(_QWORD *)v894 = &off_1E4280A28;
        *(_OWORD *)&v894[8] = *(_OWORD *)&v900[8];
        *(_DWORD *)&v894[32] = 0;
        ecs2::Runtime::queueCommand(v763, (uint64_t)v894);
        if (*(_DWORD *)&v894[32] != -1)
          ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v894[32]])(&v897, v894);
        *(_DWORD *)&v894[32] = -1;
        v764 = *(_QWORD **)&v900[24];
        v120 = v879;
        v204 = v882;
        if (*(_BYTE **)&v900[24] == v900)
        {
          v764 = v900;
          v765 = 4;
        }
        else
        {
          if (!*(_QWORD *)&v900[24])
            goto LABEL_1228;
          v765 = 5;
        }
        (*(void (**)(void))(*v764 + 8 * v765))();
LABEL_1228:
        if (v873 == 255)
          goto LABEL_1236;
        v766 = (_QWORD *)*v885;
        *(_QWORD *)v900 = &off_1E4281718;
        *(_QWORD *)&v900[8] = v867;
        *(_QWORD *)&v900[16] = v890;
        *(_QWORD *)&v900[24] = v900;
        *(_QWORD *)&v894[24] = v894;
        *(_QWORD *)v894 = &off_1E4281718;
        *(_OWORD *)&v894[8] = *(_OWORD *)&v900[8];
        *(_DWORD *)&v894[32] = 0;
        ecs2::Runtime::queueCommand(v766, (uint64_t)v894);
        if (*(_DWORD *)&v894[32] != -1)
          ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v894[32]])(&v897, v894);
        *(_DWORD *)&v894[32] = -1;
        v767 = *(_QWORD **)&v900[24];
        if (*(_BYTE **)&v900[24] == v900)
        {
          v767 = v900;
          v768 = 4;
        }
        else
        {
          if (!*(_QWORD *)&v900[24])
            goto LABEL_1236;
          v768 = 5;
        }
        (*(void (**)(void))(*v767 + 8 * v768))();
LABEL_1236:
        v769 = v882[160];
        if (v769 == 1)
        {
          v770 = (_QWORD *)*v885;
          v771 = v886 | 1;
        }
        else if (v769 == 3)
        {
          v770 = (_QWORD *)*v885;
          v771 = v886 | 3;
        }
        else
        {
          v770 = (_QWORD *)*v885;
          if (v769 == 2)
            v771 = v886 | 2;
          else
            v771 = v886;
        }
        *(_QWORD *)v900 = &off_1E427F5A0;
        *(_QWORD *)&v900[8] = v771;
        *(_DWORD *)&v900[16] = v887;
        *(_QWORD *)&v900[24] = v900;
        *(_QWORD *)&v894[24] = v894;
        *(_QWORD *)v894 = &off_1E427F5A0;
        *(_QWORD *)&v894[8] = v771;
        *(_DWORD *)&v894[16] = v887;
        *(_DWORD *)&v894[32] = 0;
        ecs2::Runtime::queueCommand(v770, (uint64_t)v894);
        if (*(_DWORD *)&v894[32] != -1)
          ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v894[32]])(&v897, v894);
        *(_DWORD *)&v894[32] = -1;
        v772 = *(_QWORD **)&v900[24];
        if (*(_BYTE **)&v900[24] == v900)
        {
          v772 = v900;
          v773 = 4;
        }
        else
        {
          if (!*(_QWORD *)&v900[24])
            goto LABEL_1250;
          v773 = 5;
        }
        (*(void (**)(void))(*v772 + 8 * v773))();
LABEL_1250:
        v774 = **(_QWORD **)(v888 + 216);
        v777 = *(_QWORD **)(v774 + 120);
        v776 = (_QWORD *)(v774 + 120);
        v775 = v777;
        if (!v777)
          goto LABEL_1339;
        v778 = (md::VKMRenderResourcesStore *)**a1;
        v871 = (_QWORD *)*v885;
        v779 = v776;
        v780 = v775;
        do
        {
          v781 = v780[4];
          v782 = v781 == 0;
          if (v781)
            v783 = v780;
          else
            v783 = v780 + 1;
          if (!v782)
            v779 = v780;
          v780 = (_QWORD *)*v783;
        }
        while (*v783);
        if (v779 == v776 || v779[4] > 1uLL)
        {
          if (!v775)
            goto LABEL_1339;
          goto LABEL_1283;
        }
        while (1)
        {
          while (1)
          {
            v784 = v775[4];
            if (v784 < 2)
              break;
            v775 = (_QWORD *)*v775;
            if (!v775)
              goto LABEL_1415;
          }
          if (v784)
            break;
          v775 = (_QWORD *)v775[1];
          if (!v775)
LABEL_1415:
            abort();
        }
        v785 = (ggl::DeviceData *)v775[5];
        v786 = (std::__shared_weak_count *)v775[6];
        *(_QWORD *)&v897 = v785;
        *((_QWORD *)&v897 + 1) = v786;
        if (v786)
        {
          v787 = (unint64_t *)&v786->__shared_owners_;
          do
            v788 = __ldxr(v787);
          while (__stxr(v788 + 1, v787));
        }
        DeviceDataHandle = md::VKMRenderResourcesStore::createDeviceDataHandle(v778, v785);
        *(_QWORD *)v900 = &off_1E427DD70;
        *(_QWORD *)&v900[8] = DeviceDataHandle;
        *(_QWORD *)&v900[16] = v890;
        *(_QWORD *)&v900[24] = v900;
        *(_QWORD *)&v894[24] = v894;
        *(_QWORD *)v894 = &off_1E427DD70;
        *(_OWORD *)&v894[8] = *(_OWORD *)&v900[8];
        *(_DWORD *)&v894[32] = 0;
        ecs2::Runtime::queueCommand(v871, (uint64_t)v894);
        if (*(_DWORD *)&v894[32] != -1)
          ((void (*)(_BYTE *, _BYTE *))off_1E42FB340[*(unsigned int *)&v894[32]])(v895, v894);
        *(_DWORD *)&v894[32] = -1;
        v790 = *(_QWORD **)&v900[24];
        if (*(_BYTE **)&v900[24] == v900)
        {
          v790 = v900;
          v791 = 4;
          goto LABEL_1276;
        }
        if (*(_QWORD *)&v900[24])
        {
          v791 = 5;
LABEL_1276:
          (*(void (**)(void))(*v790 + 8 * v791))();
        }
        if (v786)
        {
          v792 = (unint64_t *)&v786->__shared_owners_;
          do
            v793 = __ldaxr(v792);
          while (__stlxr(v793 - 1, v792));
          if (!v793)
          {
            ((void (*)(std::__shared_weak_count *))v786->__on_zero_shared)(v786);
            std::__shared_weak_count::__release_weak(v786);
          }
        }
        v775 = (_QWORD *)*v776;
        v120 = v879;
        if (!*v776)
          goto LABEL_1339;
LABEL_1283:
        v794 = v776;
        v795 = v775;
        do
        {
          v796 = v795[4];
          v797 = v796 >= 2;
          if (v796 >= 2)
            v798 = v795;
          else
            v798 = v795 + 1;
          if (v797)
            v794 = v795;
          v795 = (_QWORD *)*v798;
        }
        while (*v798);
        if (v794 == v776 || v794[4] > 2uLL)
        {
          if (!v775)
            goto LABEL_1339;
LABEL_1316:
          v811 = v775;
          do
          {
            v812 = v811;
            v811 = (_QWORD *)*v811;
          }
          while (v811);
          if (v812 == v776 || v812[4])
            goto LABEL_1339;
          while (v775[4])
          {
            v775 = (_QWORD *)*v775;
            if (!v775)
              goto LABEL_1415;
          }
          v813 = v120;
          v814 = (ggl::DeviceData *)v775[5];
          v815 = (std::__shared_weak_count *)v775[6];
          *(_QWORD *)&v897 = v814;
          *((_QWORD *)&v897 + 1) = v815;
          if (v815)
          {
            v816 = (unint64_t *)&v815->__shared_owners_;
            do
              v817 = __ldxr(v816);
            while (__stxr(v817 + 1, v816));
          }
          v818 = md::VKMRenderResourcesStore::createDeviceDataHandle(v778, v814);
          *(_QWORD *)v900 = &off_1E4281F40;
          *(_QWORD *)&v900[8] = v818;
          *(_QWORD *)&v900[16] = v890;
          *(_QWORD *)&v900[24] = v900;
          *(_QWORD *)&v894[24] = v894;
          *(_QWORD *)v894 = &off_1E4281F40;
          *(_OWORD *)&v894[8] = *(_OWORD *)&v900[8];
          *(_DWORD *)&v894[32] = 0;
          ecs2::Runtime::queueCommand(v871, (uint64_t)v894);
          if (*(_DWORD *)&v894[32] != -1)
            ((void (*)(_BYTE *, _BYTE *))off_1E42FB340[*(unsigned int *)&v894[32]])(v895, v894);
          *(_DWORD *)&v894[32] = -1;
          v819 = *(_QWORD **)&v900[24];
          if (*(_BYTE **)&v900[24] == v900)
          {
            v819 = v900;
            v820 = 4;
          }
          else
          {
            if (!*(_QWORD *)&v900[24])
              goto LABEL_1333;
            v820 = 5;
          }
          (*(void (**)(void))(*v819 + 8 * v820))();
LABEL_1333:
          if (v815)
          {
            v821 = (unint64_t *)&v815->__shared_owners_;
            do
              v822 = __ldaxr(v821);
            while (__stlxr(v822 - 1, v821));
            if (!v822)
            {
              ((void (*)(std::__shared_weak_count *))v815->__on_zero_shared)(v815);
              std::__shared_weak_count::__release_weak(v815);
            }
          }
          v120 = v813;
          goto LABEL_1339;
        }
        while (1)
        {
          while (1)
          {
            v799 = v775[4];
            if (v799 < 3)
              break;
            v775 = (_QWORD *)*v775;
            if (!v775)
              goto LABEL_1415;
          }
          if (v799 == 2)
            break;
          v775 = (_QWORD *)v775[1];
          if (!v775)
            goto LABEL_1415;
        }
        v800 = v113;
        v801 = v120;
        v802 = (ggl::DeviceData *)v775[5];
        v803 = (std::__shared_weak_count *)v775[6];
        *(_QWORD *)&v897 = v802;
        *((_QWORD *)&v897 + 1) = v803;
        if (v803)
        {
          v804 = (unint64_t *)&v803->__shared_owners_;
          do
            v805 = __ldxr(v804);
          while (__stxr(v805 + 1, v804));
        }
        v806 = md::VKMRenderResourcesStore::createDeviceDataHandle(v778, v802);
        *(_QWORD *)v900 = &off_1E427E118;
        *(_QWORD *)&v900[8] = v806;
        *(_QWORD *)&v900[16] = v890;
        *(_QWORD *)&v900[24] = v900;
        *(_QWORD *)&v894[24] = v894;
        *(_QWORD *)v894 = &off_1E427E118;
        *(_OWORD *)&v894[8] = *(_OWORD *)&v900[8];
        *(_DWORD *)&v894[32] = 0;
        ecs2::Runtime::queueCommand(v871, (uint64_t)v894);
        if (*(_DWORD *)&v894[32] != -1)
          ((void (*)(_BYTE *, _BYTE *))off_1E42FB340[*(unsigned int *)&v894[32]])(v895, v894);
        *(_DWORD *)&v894[32] = -1;
        v807 = *(_QWORD **)&v900[24];
        if (*(_BYTE **)&v900[24] == v900)
        {
          v807 = v900;
          v808 = 4;
          goto LABEL_1309;
        }
        if (*(_QWORD *)&v900[24])
        {
          v808 = 5;
LABEL_1309:
          (*(void (**)(void))(*v807 + 8 * v808))();
        }
        if (v803)
        {
          v809 = (unint64_t *)&v803->__shared_owners_;
          do
            v810 = __ldaxr(v809);
          while (__stlxr(v810 - 1, v809));
          if (!v810)
          {
            ((void (*)(std::__shared_weak_count *))v803->__on_zero_shared)(v803);
            std::__shared_weak_count::__release_weak(v803);
          }
        }
        v775 = (_QWORD *)*v776;
        v120 = v801;
        v113 = v800;
        if (*v776)
          goto LABEL_1316;
LABEL_1339:
        v897 = *(_OWORD *)(v888 + 16);
        v823 = (_QWORD *)*v885;
        v824 = (char *)operator new(0x20uLL);
        *(_QWORD *)v824 = &off_1E427D500;
        *(_OWORD *)(v824 + 8) = v897;
        *((_QWORD *)v824 + 3) = v890;
        *(_QWORD *)&v894[24] = v824;
        *(_QWORD *)&v900[24] = 0;
        *(_DWORD *)&v894[32] = 0;
        ecs2::Runtime::queueCommand(v823, (uint64_t)v894);
        if (*(_DWORD *)&v894[32] != -1)
          ((void (*)(_BYTE *, _BYTE *))off_1E42FB340[*(unsigned int *)&v894[32]])(v895, v894);
        *(_DWORD *)&v894[32] = -1;
        v825 = *(_QWORD **)&v900[24];
        if (*(_BYTE **)&v900[24] == v900)
        {
          v825 = v900;
          v826 = 4;
        }
        else
        {
          if (!*(_QWORD *)&v900[24])
            goto LABEL_1346;
          v826 = 5;
        }
        (*(void (**)(void))(*v825 + 8 * v826))();
LABEL_1346:
        v827 = 3;
        if (v882[160] != 3)
          v827 = 1;
        v828 = (_QWORD *)*v885;
        *(_QWORD *)v900 = &off_1E427EC10;
        *(_QWORD *)&v900[8] = v827 | v886;
        *(_DWORD *)&v900[16] = v887;
        *(_QWORD *)&v900[24] = v900;
        *(_QWORD *)&v894[24] = v894;
        *(_QWORD *)v894 = &off_1E427EC10;
        *(_QWORD *)&v894[8] = v827 | v886;
        *(_DWORD *)&v894[16] = v887;
        *(_DWORD *)&v894[32] = 0;
        ecs2::Runtime::queueCommand(v828, (uint64_t)v894);
        if (*(_DWORD *)&v894[32] != -1)
          ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v894[32]])(&v897, v894);
        *(_DWORD *)&v894[32] = -1;
        v829 = *(_QWORD **)&v900[24];
        if (*(_BYTE **)&v900[24] == v900)
        {
          v829 = v900;
          v830 = 4;
        }
        else
        {
          if (!*(_QWORD *)&v900[24])
            goto LABEL_1355;
          v830 = 5;
        }
        (*(void (**)(void))(*v829 + 8 * v830))();
LABEL_1355:
        v831 = *(unsigned int *)(*(_QWORD *)(v888 + 32) + 16);
        v832 = (_QWORD *)*v885;
        *(_QWORD *)v900 = &off_1E427DC08;
        *(_QWORD *)&v900[8] = v831;
        *(_QWORD *)&v900[16] = v890;
        *(_QWORD *)&v900[24] = v900;
        *(_QWORD *)&v894[24] = v894;
        *(_QWORD *)v894 = &off_1E427DC08;
        *(_OWORD *)&v894[8] = *(_OWORD *)&v900[8];
        *(_DWORD *)&v894[32] = 0;
        ecs2::Runtime::queueCommand(v832, (uint64_t)v894);
        if (*(_DWORD *)&v894[32] != -1)
          ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v894[32]])(&v897, v894);
        *(_DWORD *)&v894[32] = -1;
        v833 = *(_QWORD **)&v900[24];
        if (*(_BYTE **)&v900[24] == v900)
        {
          v833 = v900;
          v834 = 4;
        }
        else
        {
          if (!*(_QWORD *)&v900[24])
            goto LABEL_1362;
          v834 = 5;
        }
        (*(void (**)(void))(*v833 + 8 * v834))();
LABEL_1362:
        v835 = *(_QWORD *)(v888 + 32);
        v836 = *(_QWORD *)(v888 + 40);
        if (v836)
        {
          v837 = (unint64_t *)(v836 + 8);
          do
            v838 = __ldxr(v837);
          while (__stxr(v838 + 1, v837));
        }
        v839 = (_QWORD *)*v885;
        v897 = 0uLL;
        *(_QWORD *)&v900[24] = 0;
        v840 = operator new(0x20uLL);
        *v840 = &off_1E427DC50;
        v840[1] = v835;
        v840[2] = v836;
        v840[3] = v890;
        *(_QWORD *)&v894[24] = v840;
        *(_QWORD *)&v900[24] = 0;
        *(_DWORD *)&v894[32] = 0;
        ecs2::Runtime::queueCommand(v839, (uint64_t)v894);
        if (*(_DWORD *)&v894[32] != -1)
          ((void (*)(_BYTE *, _BYTE *))off_1E42FB340[*(unsigned int *)&v894[32]])(v895, v894);
        *(_DWORD *)&v894[32] = -1;
        v841 = *(_QWORD **)&v900[24];
        v198 = v885;
        v220 = v881;
        if (*(_BYTE **)&v900[24] == v900)
        {
          v841 = v900;
          v842 = 4;
        }
        else
        {
          if (!*(_QWORD *)&v900[24])
            goto LABEL_1372;
          v842 = 5;
        }
        (*(void (**)(void))(*v841 + 8 * v842))();
LABEL_1372:
        v843 = (_QWORD *)*v885;
        v844 = v886 | *(unsigned __int8 *)(v888 + 8);
        *(_QWORD *)v900 = &off_1E427ECE8;
        *(_QWORD *)&v900[8] = v844;
        *(_DWORD *)&v900[16] = v887;
        *(_QWORD *)&v900[24] = v900;
        *(_QWORD *)&v894[24] = v894;
        *(_QWORD *)v894 = &off_1E427ECE8;
        *(_QWORD *)&v894[8] = v844;
        *(_DWORD *)&v894[16] = v887;
        *(_DWORD *)&v894[32] = 0;
        ecs2::Runtime::queueCommand(v843, (uint64_t)v894);
        if (*(_DWORD *)&v894[32] != -1)
          ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v894[32]])(&v897, v894);
        *(_DWORD *)&v894[32] = -1;
        v845 = *(_QWORD **)&v900[24];
        if (*(_BYTE **)&v900[24] == v900)
        {
          v845 = v900;
          v846 = 4;
        }
        else
        {
          if (!*(_QWORD *)&v900[24])
            goto LABEL_1379;
          v846 = 5;
        }
        (*(void (**)(void))(*v845 + 8 * v846))();
LABEL_1379:
        v847 = (_QWORD *)*v885;
        v848 = v886 | *(unsigned __int8 *)(*(_QWORD *)(v888 + 216) + 61);
        *(_QWORD *)v900 = &off_1E4280518;
        *(_QWORD *)&v900[8] = v848;
        *(_DWORD *)&v900[16] = v887;
        *(_QWORD *)&v900[24] = v900;
        *(_QWORD *)&v894[24] = v894;
        *(_QWORD *)v894 = &off_1E4280518;
        *(_QWORD *)&v894[8] = v848;
        *(_DWORD *)&v894[16] = v887;
        *(_DWORD *)&v894[32] = 0;
        ecs2::Runtime::queueCommand(v847, (uint64_t)v894);
        if (*(_DWORD *)&v894[32] != -1)
          ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v894[32]])(&v897, v894);
        *(_DWORD *)&v894[32] = -1;
        v849 = *(_QWORD **)&v900[24];
        if (*(_BYTE **)&v900[24] == v900)
        {
          v849 = v900;
          v850 = 4;
        }
        else
        {
          if (!*(_QWORD *)&v900[24])
            goto LABEL_1386;
          v850 = 5;
        }
        (*(void (**)(void))(*v849 + 8 * v850))();
LABEL_1386:
        v851 = (_QWORD *)*v885;
        v852 = v886 | *(unsigned __int8 *)(*(_QWORD *)(v888 + 216) + 32);
        *(_QWORD *)v900 = &off_1E427DE48;
        *(_QWORD *)&v900[8] = v852;
        *(_DWORD *)&v900[16] = v887;
        *(_QWORD *)&v900[24] = v900;
        *(_QWORD *)&v894[24] = v894;
        *(_QWORD *)v894 = &off_1E427DE48;
        *(_QWORD *)&v894[8] = v852;
        *(_DWORD *)&v894[16] = v887;
        *(_DWORD *)&v894[32] = 0;
        ecs2::Runtime::queueCommand(v851, (uint64_t)v894);
        if (*(_DWORD *)&v894[32] != -1)
          ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v894[32]])(&v897, v894);
        *(_DWORD *)&v894[32] = -1;
        v853 = *(_QWORD **)&v900[24];
        if (*(_BYTE **)&v900[24] == v900)
        {
          v853 = v900;
          v854 = 4;
        }
        else
        {
          if (!*(_QWORD *)&v900[24])
            goto LABEL_1393;
          v854 = 5;
        }
        (*(void (**)(void))(*v853 + 8 * v854))();
LABEL_1393:
        *(float *)&v855 = *(float *)(v888 + 88) - *(float *)(v888 + 76);
        v856 = (_QWORD *)*v885;
        *(_QWORD *)v900 = &off_1E427D818;
        *(_QWORD *)&v900[8] = v886 | v855;
        *(_DWORD *)&v900[16] = v887;
        *(_QWORD *)&v900[24] = v900;
        *(_QWORD *)&v894[24] = v894;
        *(_QWORD *)v894 = &off_1E427D818;
        *(_QWORD *)&v894[8] = *(_QWORD *)&v900[8];
        *(_DWORD *)&v894[16] = v887;
        *(_DWORD *)&v894[32] = 0;
        ecs2::Runtime::queueCommand(v856, (uint64_t)v894);
        if (*(_DWORD *)&v894[32] != -1)
          ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v894[32]])(&v897, v894);
        *(_DWORD *)&v894[32] = -1;
        v857 = *(_QWORD **)&v900[24];
        if (*(_BYTE **)&v900[24] == v900)
        {
          v857 = v900;
          v858 = 4;
        }
        else
        {
          if (!*(_QWORD *)&v900[24])
            goto LABEL_1400;
          v858 = 5;
        }
        (*(void (**)(void))(*v857 + 8 * v858))();
LABEL_1400:
        v859 = **(_QWORD **)(v888 + 216);
        if (v859)
        {
          v860 = (_QWORD *)*v885;
          *(_QWORD *)v900 = &off_1E427DB78;
          *(_QWORD *)&v900[8] = v859;
          *(_QWORD *)&v900[16] = v890;
          *(_QWORD *)&v900[24] = v900;
          *(_QWORD *)&v894[24] = v894;
          *(_QWORD *)v894 = &off_1E427DB78;
          *(_OWORD *)&v894[8] = *(_OWORD *)&v900[8];
          *(_DWORD *)&v894[32] = 0;
          ecs2::Runtime::queueCommand(v860, (uint64_t)v894);
          if (*(_DWORD *)&v894[32] != -1)
            ((void (*)(__int128 *, _BYTE *))off_1E42FB340[*(unsigned int *)&v894[32]])(&v897, v894);
          *(_DWORD *)&v894[32] = -1;
          v223 = *(_QWORD **)&v900[24];
          if (*(_BYTE **)&v900[24] == v900)
          {
            v223 = v900;
            v224 = 4;
          }
          else
          {
            if (!*(_QWORD *)&v900[24])
              goto LABEL_306;
            v224 = 5;
          }
          (*(void (**)(void))(*v223 + 8 * v224))();
        }
LABEL_306:
        v222 = v883 + 1;
        v221 = *v881;
      }
      while (v883 + 1 < (unint64_t)((v881[1] - *v881) >> 3));
    }
    v204 += 168;
    v203 = a7 + 24;
  }
  while (v204 != v866);
  v202 = __p;
LABEL_1407:
  if (v202)
    operator delete(v202);
  if (v863)
  {
    v861 = (unint64_t *)&v863->__shared_owners_;
    do
      v862 = __ldaxr(v861);
    while (__stlxr(v862 - 1, v861));
    if (!v862)
    {
      ((void (*)(std::__shared_weak_count *))v863->__on_zero_shared)(v863);
      std::__shared_weak_count::__release_weak(v863);
    }
  }
}

void sub_19FA295B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  void *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  operator delete(v10);
  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<geo::handle<mre::Texture>,mre::TextureKey>,std::__unordered_map_hasher<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::TextureKey>,std::hash<geo::handle<mre::Texture>>,std::equal_to<geo::handle<mre::Texture>>,true>,std::__unordered_map_equal<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::TextureKey>,std::equal_to<geo::handle<mre::Texture>>,std::hash<geo::handle<mre::Texture>>,true>,std::allocator<std::__hash_value_type<geo::handle<mre::Texture>,mre::TextureKey>>>::__emplace_unique_key_args<geo::handle<mre::Texture>,std::piecewise_construct_t const&,std::tuple<geo::handle<mre::Texture> const&>,std::tuple<>>(float *a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  size_t v25;
  size_t v26;
  size_t v27;
  _QWORD *i;
  size_t v29;
  uint64_t v30;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  size_t v36;
  _QWORD *v37;
  _QWORD *v38;
  unint64_t v39;
  _QWORD *v41;

  v5 = a2;
  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v10 = operator new(0x28uLL);
  *v10 = 0;
  v10[1] = v5;
  v13 = *a3;
  v10[3] = 0;
  v10[4] = 0;
  v10[2] = v13;
  v14 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v15 = a1[8];
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    v5 = v3;
    goto LABEL_72;
  }
  v16 = 1;
  if (v7 >= 3)
    v16 = (v7 & (v7 - 1)) != 0;
  v17 = v16 | (2 * v7);
  v18 = vcvtps_u32_f32(v14 / v15);
  if (v17 <= v18)
    prime = v18;
  else
    prime = v17;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v7 = *((_QWORD *)a1 + 1);
  }
  if (prime > v7)
  {
LABEL_35:
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v20 = operator new(8 * prime);
    v21 = *(_QWORD **)a1;
    *(_QWORD *)a1 = v20;
    if (v21)
      operator delete(v21);
    v22 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22++) = 0;
    while (prime != v22);
    v24 = (uint64_t *)(a1 + 4);
    v23 = (_QWORD *)*((_QWORD *)a1 + 2);
    if (!v23)
      goto LABEL_59;
    v25 = v23[1];
    v26 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v27 = v25 & v26;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v27) = v24;
      for (i = (_QWORD *)*v23; *v23; i = (_QWORD *)*v23)
      {
        v29 = i[1] & v26;
        if (v29 == v27)
        {
          v23 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v29))
        {
          *v23 = *i;
          v30 = 8 * v29;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v30);
          **(_QWORD **)(*(_QWORD *)a1 + v30) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v29) = v23;
          v23 = i;
          v27 = v29;
        }
      }
LABEL_59:
      v7 = prime;
      goto LABEL_60;
    }
    if (v25 >= prime)
      v25 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = v24;
    v34 = (_QWORD *)*v23;
    if (!*v23)
      goto LABEL_59;
    while (1)
    {
      v36 = v34[1];
      if (v36 >= prime)
        v36 %= prime;
      if (v36 != v25)
      {
        if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v36))
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v36) = v23;
          goto LABEL_64;
        }
        *v23 = *v34;
        v35 = 8 * v36;
        *v34 = **(_QWORD **)(*(_QWORD *)a1 + v35);
        **(_QWORD **)(*(_QWORD *)a1 + v35) = v34;
        v34 = v23;
      }
      v36 = v25;
LABEL_64:
      v23 = v34;
      v34 = (_QWORD *)*v34;
      v25 = v36;
      if (!v34)
        goto LABEL_59;
    }
  }
  if (prime >= v7)
    goto LABEL_60;
  v31 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
  if (v7 < 3 || (v32 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
  {
    v31 = std::__next_prime(v31);
  }
  else
  {
    v33 = 1 << -(char)__clz(v31 - 1);
    if (v31 >= 2)
      v31 = v33;
  }
  if (prime <= v31)
    prime = v31;
  if (prime < v7)
  {
    if (!prime)
    {
      v41 = *(_QWORD **)a1;
      *(_QWORD *)a1 = 0;
      if (v41)
        operator delete(v41);
      v7 = 0;
      *((_QWORD *)a1 + 1) = 0;
      goto LABEL_60;
    }
    goto LABEL_35;
  }
  v7 = *((_QWORD *)a1 + 1);
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5)
      v5 %= v7;
  }
  else
  {
    v5 &= v7 - 1;
  }
LABEL_72:
  v37 = *(_QWORD **)a1;
  v38 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v38)
  {
    *v10 = *v38;
LABEL_80:
    *v38 = v10;
    goto LABEL_81;
  }
  *v10 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v10;
  v37[v5] = a1 + 4;
  if (*v10)
  {
    v39 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v39 >= v7)
        v39 %= v7;
    }
    else
    {
      v39 &= v7 - 1;
    }
    v38 = (_QWORD *)(*(_QWORD *)a1 + 8 * v39);
    goto LABEL_80;
  }
LABEL_81:
  ++*((_QWORD *)a1 + 3);
  return v10;
}

void sub_19FA29BBC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<mre::TextureKey,geo::handle<mre::Texture>>,std::__unordered_map_hasher<mre::TextureKey,std::__hash_value_type<mre::TextureKey,geo::handle<mre::Texture>>,mre::TextureKeyHasher,std::equal_to<mre::TextureKey>,true>,std::__unordered_map_equal<mre::TextureKey,std::__hash_value_type<mre::TextureKey,geo::handle<mre::Texture>>,std::equal_to<mre::TextureKey>,mre::TextureKeyHasher,true>,std::allocator<std::__hash_value_type<mre::TextureKey,geo::handle<mre::Texture>>>>::__emplace_unique_key_args<mre::TextureKey,std::piecewise_construct_t const&,std::tuple<mre::TextureKey const&>,std::tuple<>>(float *a1, uint64_t a2, unsigned __int8 a3, _OWORD *a4)
{
  uint64_t v4;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  void **v11;
  _QWORD *v12;
  unint64_t v14;
  uint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  void *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  size_t v28;
  size_t v29;
  size_t v30;
  _QWORD *i;
  size_t v32;
  uint64_t v33;
  unint64_t v34;
  uint8x8_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  size_t v39;
  _QWORD *v40;
  _QWORD *v41;
  unint64_t v42;
  _QWORD *v44;

  v7 = a3 - 0x61C8864680B583EBLL;
  v8 = (a2 + (v7 << 6) - 0x3A3AA7D820E2E4E6) ^ v7;
  v9 = *((_QWORD *)a1 + 1);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = (a2 + (v7 << 6) - 0x3A3AA7D820E2E4E6) ^ v7;
      if (v8 >= v9)
        v4 = v8 % v9;
    }
    else
    {
      v4 = v8 & (v9 - 1);
    }
    v11 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v16 = v12[1];
            if (v16 == v8)
            {
              if (v12[2] == a2 && *((unsigned __int8 *)v12 + 24) == a3)
                return v12;
            }
            else if ((v16 & (v9 - 1)) != v4)
            {
              goto LABEL_28;
            }
            v12 = (_QWORD *)*v12;
            if (!v12)
              goto LABEL_28;
          }
        }
        do
        {
          v14 = v12[1];
          if (v14 == v8)
          {
            if (v12[2] == a2 && *((unsigned __int8 *)v12 + 24) == a3)
              return v12;
          }
          else
          {
            if (v14 >= v9)
              v14 %= v9;
            if (v14 != v4)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_28:
  v12 = operator new(0x28uLL);
  *v12 = 0;
  v12[1] = v8;
  *((_OWORD *)v12 + 1) = *a4;
  v12[4] = 0;
  v17 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v18 = a1[8];
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    v19 = 1;
    if (v9 >= 3)
      v19 = (v9 & (v9 - 1)) != 0;
    v20 = v19 | (2 * v9);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      prime = v21;
    else
      prime = v20;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v9 = *((_QWORD *)a1 + 1);
    }
    if (prime <= v9)
    {
      if (prime >= v9)
        goto LABEL_65;
      v34 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v9 < 3 || (v35 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v35.i16[0] = vaddlv_u8(v35), v35.u32[0] > 1uLL))
      {
        v34 = std::__next_prime(v34);
      }
      else
      {
        v36 = 1 << -(char)__clz(v34 - 1);
        if (v34 >= 2)
          v34 = v36;
      }
      if (prime <= v34)
        prime = v34;
      if (prime >= v9)
      {
        v9 = *((_QWORD *)a1 + 1);
LABEL_65:
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v8 >= v9)
            v4 = v8 % v9;
          else
            v4 = v8;
        }
        else
        {
          v4 = (v9 - 1) & v8;
        }
        goto LABEL_78;
      }
      if (!prime)
      {
        v44 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v44)
          operator delete(v44);
        v9 = 0;
        *((_QWORD *)a1 + 1) = 0;
        goto LABEL_65;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v23 = operator new(8 * prime);
    v24 = *(_QWORD **)a1;
    *(_QWORD *)a1 = v23;
    if (v24)
      operator delete(v24);
    v25 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v25++) = 0;
    while (prime != v25);
    v27 = (uint64_t *)(a1 + 4);
    v26 = (_QWORD *)*((_QWORD *)a1 + 2);
    if (!v26)
    {
LABEL_64:
      v9 = prime;
      goto LABEL_65;
    }
    v28 = v26[1];
    v29 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v30 = v28 & v29;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v27;
      for (i = (_QWORD *)*v26; *v26; i = (_QWORD *)*v26)
      {
        v32 = i[1] & v29;
        if (v32 == v30)
        {
          v26 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v32))
        {
          *v26 = *i;
          v33 = 8 * v32;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v33);
          **(_QWORD **)(*(_QWORD *)a1 + v33) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v32) = v26;
          v26 = i;
          v30 = v32;
        }
      }
      goto LABEL_64;
    }
    if (v28 >= prime)
      v28 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v27;
    v37 = (_QWORD *)*v26;
    if (!*v26)
      goto LABEL_64;
    while (1)
    {
      v39 = v37[1];
      if (v39 >= prime)
        v39 %= prime;
      if (v39 != v28)
      {
        if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v39))
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v39) = v26;
          goto LABEL_69;
        }
        *v26 = *v37;
        v38 = 8 * v39;
        *v37 = **(_QWORD **)(*(_QWORD *)a1 + v38);
        **(_QWORD **)(*(_QWORD *)a1 + v38) = v37;
        v37 = v26;
      }
      v39 = v28;
LABEL_69:
      v26 = v37;
      v37 = (_QWORD *)*v37;
      v28 = v39;
      if (!v37)
        goto LABEL_64;
    }
  }
LABEL_78:
  v40 = *(_QWORD **)a1;
  v41 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v41)
  {
    *v12 = *v41;
LABEL_86:
    *v41 = v12;
    goto LABEL_87;
  }
  *v12 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v12;
  v40[v4] = a1 + 4;
  if (*v12)
  {
    v42 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v42 >= v9)
        v42 %= v9;
    }
    else
    {
      v42 &= v9 - 1;
    }
    v41 = (_QWORD *)(*(_QWORD *)a1 + 8 * v42);
    goto LABEL_86;
  }
LABEL_87:
  ++*((_QWORD *)a1 + 3);
  return v12;
}

void sub_19FA2A05C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::HasMeshHandle>(gdc::Entity,md::ls::HasMeshHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::HasMeshHandle>(gdc::Entity,md::ls::HasMeshHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427DB78;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::HasMeshHandle>(gdc::Entity,md::ls::HasMeshHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427DB78;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::HasMeshHandle>(gdc::Entity,md::ls::HasMeshHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *HasMesh;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  HasMesh = (uint64_t *)gdc::Registry::storage<md::ls::HasMeshHandle>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(HasMesh + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)HasMesh[11];
    v12 = HasMesh[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)HasMesh[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_36;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 == v15)
      {
        v15 = v13;
      }
      else
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_40;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_40;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
          v15 = (char *)HasMesh[10];
        }
      }
      HasMesh[10] = (uint64_t)v21;
      HasMesh[11] = (uint64_t)v14;
      HasMesh[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    HasMesh[11] = (uint64_t)v14;
    v9 = HasMesh[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + HasMesh[10] - HasMesh[7]);
    *v8 = v5;
    v9 = HasMesh[31];
    if (v8 != (_QWORD *)HasMesh[11])
    {
      v10 = (_QWORD *)HasMesh[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)HasMesh[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_35;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::BoundsWidth>(gdc::Entity,md::ls::BoundsWidth &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::BoundsWidth>(gdc::Entity,md::ls::BoundsWidth &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427D818;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::BoundsWidth>(gdc::Entity,md::ls::BoundsWidth &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427D818;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::BoundsWidth>(gdc::Entity,md::ls::BoundsWidth &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  int v5;

  v3 = *(_QWORD *)(a1 + 12);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::BoundsWidth>(a2);
  v5 = *(_DWORD *)(a1 + 8);
  gdc::ComponentStorageWrapper<md::ls::BoundsWidth>::emplace(v4, v3, &v5);
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PrimitiveType>(gdc::Entity,md::ls::PrimitiveType &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PrimitiveType>(gdc::Entity,md::ls::PrimitiveType &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427DE48;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PrimitiveType>(gdc::Entity,md::ls::PrimitiveType &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427DE48;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PrimitiveType>(gdc::Entity,md::ls::PrimitiveType &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  char v5;
  _QWORD *v6;
  char v7;
  _BYTE *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  size_t v19;
  char *v20;
  char *v21;
  char *v22;
  unint64_t v23;
  __int128 *v24;
  char *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t v28;
  char *v29;
  int64_t v30;
  uint64_t v31;
  char *v32;
  char v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;

  v3 = *(_QWORD *)(a1 + 12);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::PrimitiveType>(a2);
  v5 = *(_BYTE *)(a1 + 8);
  v36 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v36);
  if ((v7 & 1) != 0)
  {
    v13 = (_BYTE *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 < v12)
    {
      *v13 = v5;
      v14 = (uint64_t)(v13 + 1);
LABEL_37:
      v4[11] = v14;
      v9 = v4[31];
      goto LABEL_38;
    }
    v15 = (_BYTE *)v4[10];
    v16 = v13 - v15;
    v17 = v13 - v15 + 1;
    if (v17 < 0)
      goto LABEL_43;
    v18 = v12 - (_QWORD)v15;
    if (2 * v18 > v17)
      v17 = 2 * v18;
    if (v18 >= 0x3FFFFFFFFFFFFFFFLL)
      v19 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v19 = v17;
    if (v19)
      v20 = (char *)operator new(v19);
    else
      v20 = 0;
    v21 = &v20[v16];
    v22 = &v20[v19];
    v20[v16] = v5;
    v14 = (uint64_t)&v20[v16 + 1];
    if (v13 == v15)
    {
LABEL_35:
      v4[10] = (uint64_t)v21;
      v4[11] = v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
      goto LABEL_37;
    }
    if (v16 < 8 || (unint64_t)(v15 - v20) < 0x20)
      goto LABEL_32;
    if (v16 >= 0x20)
    {
      v23 = v16 & 0xFFFFFFFFFFFFFFE0;
      v24 = (__int128 *)(v13 - 16);
      v25 = &v20[v13 - 16 - v15];
      v26 = v16 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v27 = *v24;
        *((_OWORD *)v25 - 1) = *(v24 - 1);
        *(_OWORD *)v25 = v27;
        v25 -= 32;
        v24 -= 2;
        v26 -= 32;
      }
      while (v26);
      if (v16 == v23)
        goto LABEL_34;
      if ((v16 & 0x18) == 0)
      {
        v21 -= v23;
        v13 -= v23;
        goto LABEL_32;
      }
    }
    else
    {
      v23 = 0;
    }
    v28 = v23 - (v16 & 0xFFFFFFFFFFFFFFF8);
    v29 = &v13[-v23 - 8];
    v30 = v29 - v15;
    do
    {
      v31 = *(_QWORD *)v29;
      v29 -= 8;
      *(_QWORD *)&v20[v30] = v31;
      v30 -= 8;
      v28 += 8;
    }
    while (v28);
    if (v16 == (v16 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_34;
    v21 -= v16 & 0xFFFFFFFFFFFFFFF8;
    v13 -= v16 & 0xFFFFFFFFFFFFFFF8;
LABEL_32:
    v32 = v21 - 1;
    do
    {
      v33 = *--v13;
      *v32-- = v33;
    }
    while (v13 != v15);
LABEL_34:
    v21 = v20;
    goto LABEL_35;
  }
  v8 = (_BYTE *)(v4[10] + (((uint64_t)v6 - v4[7]) >> 3));
  *v8 = v5;
  v9 = v4[31];
  if (v8 != (_BYTE *)v4[11])
  {
    v10 = (_QWORD *)v4[16];
    if (v10)
    {
      while (1)
      {
        v38 = &v36;
        v39 = 1;
        v37 = v9;
        v11 = v10[6];
        if (!v11)
          break;
        (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v37, &v38);
        v10 = (_QWORD *)*v10;
        if (!v10)
          return;
      }
LABEL_42:
      std::__throw_bad_function_call[abi:nn180100]();
LABEL_43:
      abort();
    }
    return;
  }
LABEL_38:
  v34 = (_QWORD *)v4[22];
  if (v34)
  {
    while (1)
    {
      v38 = &v36;
      v39 = 1;
      v37 = v9;
      v35 = v34[6];
      if (!v35)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v35 + 48))(v35, &v37, &v38);
      v34 = (_QWORD *)*v34;
      if (!v34)
        return;
    }
    goto LABEL_42;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderableMeshVertexFormat>(gdc::Entity,md::ls::RenderableMeshVertexFormat &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderableMeshVertexFormat>(gdc::Entity,md::ls::RenderableMeshVertexFormat &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4280518;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderableMeshVertexFormat>(gdc::Entity,md::ls::RenderableMeshVertexFormat &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E4280518;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderableMeshVertexFormat>(gdc::Entity,md::ls::RenderableMeshVertexFormat &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  char v5;
  _QWORD *v6;
  char v7;
  _BYTE *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  size_t v19;
  char *v20;
  char *v21;
  char *v22;
  unint64_t v23;
  __int128 *v24;
  char *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t v28;
  char *v29;
  int64_t v30;
  uint64_t v31;
  char *v32;
  char v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;

  v3 = *(_QWORD *)(a1 + 12);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::RenderableMeshVertexFormat>(a2);
  v5 = *(_BYTE *)(a1 + 8);
  v36 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v36);
  if ((v7 & 1) != 0)
  {
    v13 = (_BYTE *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 < v12)
    {
      *v13 = v5;
      v14 = (uint64_t)(v13 + 1);
LABEL_37:
      v4[11] = v14;
      v9 = v4[31];
      goto LABEL_38;
    }
    v15 = (_BYTE *)v4[10];
    v16 = v13 - v15;
    v17 = v13 - v15 + 1;
    if (v17 < 0)
      goto LABEL_43;
    v18 = v12 - (_QWORD)v15;
    if (2 * v18 > v17)
      v17 = 2 * v18;
    if (v18 >= 0x3FFFFFFFFFFFFFFFLL)
      v19 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v19 = v17;
    if (v19)
      v20 = (char *)operator new(v19);
    else
      v20 = 0;
    v21 = &v20[v16];
    v22 = &v20[v19];
    v20[v16] = v5;
    v14 = (uint64_t)&v20[v16 + 1];
    if (v13 == v15)
    {
LABEL_35:
      v4[10] = (uint64_t)v21;
      v4[11] = v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
      goto LABEL_37;
    }
    if (v16 < 8 || (unint64_t)(v15 - v20) < 0x20)
      goto LABEL_32;
    if (v16 >= 0x20)
    {
      v23 = v16 & 0xFFFFFFFFFFFFFFE0;
      v24 = (__int128 *)(v13 - 16);
      v25 = &v20[v13 - 16 - v15];
      v26 = v16 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v27 = *v24;
        *((_OWORD *)v25 - 1) = *(v24 - 1);
        *(_OWORD *)v25 = v27;
        v25 -= 32;
        v24 -= 2;
        v26 -= 32;
      }
      while (v26);
      if (v16 == v23)
        goto LABEL_34;
      if ((v16 & 0x18) == 0)
      {
        v21 -= v23;
        v13 -= v23;
        goto LABEL_32;
      }
    }
    else
    {
      v23 = 0;
    }
    v28 = v23 - (v16 & 0xFFFFFFFFFFFFFFF8);
    v29 = &v13[-v23 - 8];
    v30 = v29 - v15;
    do
    {
      v31 = *(_QWORD *)v29;
      v29 -= 8;
      *(_QWORD *)&v20[v30] = v31;
      v30 -= 8;
      v28 += 8;
    }
    while (v28);
    if (v16 == (v16 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_34;
    v21 -= v16 & 0xFFFFFFFFFFFFFFF8;
    v13 -= v16 & 0xFFFFFFFFFFFFFFF8;
LABEL_32:
    v32 = v21 - 1;
    do
    {
      v33 = *--v13;
      *v32-- = v33;
    }
    while (v13 != v15);
LABEL_34:
    v21 = v20;
    goto LABEL_35;
  }
  v8 = (_BYTE *)(v4[10] + (((uint64_t)v6 - v4[7]) >> 3));
  *v8 = v5;
  v9 = v4[31];
  if (v8 != (_BYTE *)v4[11])
  {
    v10 = (_QWORD *)v4[16];
    if (v10)
    {
      while (1)
      {
        v38 = &v36;
        v39 = 1;
        v37 = v9;
        v11 = v10[6];
        if (!v11)
          break;
        (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v37, &v38);
        v10 = (_QWORD *)*v10;
        if (!v10)
          return;
      }
LABEL_42:
      std::__throw_bad_function_call[abi:nn180100]();
LABEL_43:
      abort();
    }
    return;
  }
LABEL_38:
  v34 = (_QWORD *)v4[22];
  if (v34)
  {
    while (1)
    {
      v38 = &v36;
      v39 = 1;
      v37 = v9;
      v35 = v34[6];
      if (!v35)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v35 + 48))(v35, &v37, &v38);
      v34 = (_QWORD *)*v34;
      if (!v34)
        return;
    }
    goto LABEL_42;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderableMeshType>(gdc::Entity,md::ls::RenderableMeshType &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderableMeshType>(gdc::Entity,md::ls::RenderableMeshType &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427ECE8;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderableMeshType>(gdc::Entity,md::ls::RenderableMeshType &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427ECE8;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderableMeshType>(gdc::Entity,md::ls::RenderableMeshType &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  int8x8_t v6;
  uint8x8_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char v17;
  _QWORD *v18;
  char v19;
  _BYTE *v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  _BYTE *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  size_t v31;
  char *v32;
  char *v33;
  char *v34;
  unint64_t v35;
  __int128 *v36;
  char *v37;
  unint64_t v38;
  __int128 v39;
  unint64_t v40;
  char *v41;
  int64_t v42;
  uint64_t v43;
  char *v44;
  char v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;

  v4 = *(_QWORD *)(a1 + 12);
  v52 = 0xDF7A13395BE275BCLL;
  v5 = (uint64_t *)(a2 + 120);
  v6 = *(int8x8_t *)(a2 + 128);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8(v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v8 = 0xDF7A13395BE275BCLL;
      if (*(_QWORD *)&v6 <= 0xDF7A13395BE275BCLL)
        v8 = 0xDF7A13395BE275BCLL % *(_QWORD *)&v6;
    }
    else
    {
      v8 = (*(_QWORD *)&v6 - 1) & 0xDF7A13395BE275BCLL;
    }
    v9 = *(_QWORD **)(*v5 + 8 * v8);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (v10)
      {
        if (v7.u32[0] < 2uLL)
        {
          v11 = *(_QWORD *)&v6 - 1;
          while (1)
          {
            v13 = v10[1];
            if (v13 == 0xDF7A13395BE275BCLL)
            {
              if (v10[2] == 0xDF7A13395BE275BCLL)
                goto LABEL_46;
            }
            else if ((v13 & v11) != v8)
            {
              goto LABEL_21;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_21;
          }
        }
        do
        {
          v12 = v10[1];
          if (v12 == 0xDF7A13395BE275BCLL)
          {
            if (v10[2] == 0xDF7A13395BE275BCLL)
            {
LABEL_46:
              v14 = v10[3];
              goto LABEL_24;
            }
          }
          else
          {
            if (v12 >= *(_QWORD *)&v6)
              v12 %= *(_QWORD *)&v6;
            if (v12 != v8)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_21:
  v14 = operator new();
  *(_QWORD *)(v14 + 16) = "md::ls::RenderableMeshType]";
  *(_QWORD *)(v14 + 24) = 26;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_OWORD *)(v14 + 48) = 0u;
  *(_OWORD *)(v14 + 64) = 0u;
  *(_OWORD *)(v14 + 80) = 0u;
  *(_OWORD *)(v14 + 96) = 0u;
  *(_OWORD *)(v14 + 112) = 0u;
  *(_OWORD *)(v14 + 128) = 0u;
  *(_DWORD *)(v14 + 144) = 1065353216;
  *(_OWORD *)(v14 + 152) = 0u;
  *(_OWORD *)(v14 + 168) = 0u;
  *(_QWORD *)(v14 + 184) = 0;
  *(_DWORD *)(v14 + 192) = 1065353216;
  *(_OWORD *)(v14 + 200) = 0u;
  *(_OWORD *)(v14 + 216) = 0u;
  *(_QWORD *)(v14 + 232) = 0;
  *(_DWORD *)(v14 + 240) = 1065353216;
  *(_QWORD *)v14 = &off_1E42721F8;
  *(_QWORD *)(v14 + 8) = 0xDF7A13395BE275BCLL;
  *(_QWORD *)(v14 + 248) = a2;
  v15 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v5, 0xDF7A13395BE275BCLL, &v52);
  v16 = v15[3];
  v15[3] = v14;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v48 = (uint64_t *)0xDF7A13395BE275BCLL;
  v49 = (uint64_t)"md::ls::RenderableMeshType]";
  v50 = 26;
  gdc::Registry::_registerStorageDataSignals(a2, 0xDF7A13395BE275BCLL, (uint64_t)&v48, (uint64_t *)(v14 + 104));
LABEL_24:
  v17 = *(_BYTE *)(a1 + 8);
  v51 = v4;
  v18 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v14 + 32), (uint64_t)&v51);
  if ((v19 & 1) != 0)
  {
    v25 = *(_BYTE **)(v14 + 88);
    v24 = *(_QWORD *)(v14 + 96);
    if ((unint64_t)v25 < v24)
    {
      *v25 = v17;
      v26 = (uint64_t)(v25 + 1);
LABEL_61:
      *(_QWORD *)(v14 + 88) = v26;
      v21 = *(_QWORD *)(v14 + 248);
      goto LABEL_62;
    }
    v27 = *(_BYTE **)(v14 + 80);
    v28 = v25 - v27;
    v29 = v25 - v27 + 1;
    if (v29 < 0)
      goto LABEL_67;
    v30 = v24 - (_QWORD)v27;
    if (2 * v30 > v29)
      v29 = 2 * v30;
    if (v30 >= 0x3FFFFFFFFFFFFFFFLL)
      v31 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v31 = v29;
    if (v31)
      v32 = (char *)operator new(v31);
    else
      v32 = 0;
    v33 = &v32[v28];
    v34 = &v32[v31];
    v32[v28] = v17;
    v26 = (uint64_t)&v32[v28 + 1];
    if (v25 == v27)
    {
LABEL_59:
      *(_QWORD *)(v14 + 80) = v33;
      *(_QWORD *)(v14 + 88) = v26;
      *(_QWORD *)(v14 + 96) = v34;
      if (v27)
        operator delete(v27);
      goto LABEL_61;
    }
    if (v28 < 8 || (unint64_t)(v27 - v32) < 0x20)
      goto LABEL_56;
    if (v28 >= 0x20)
    {
      v35 = v28 & 0xFFFFFFFFFFFFFFE0;
      v36 = (__int128 *)(v25 - 16);
      v37 = &v32[v25 - 16 - v27];
      v38 = v28 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v39 = *v36;
        *((_OWORD *)v37 - 1) = *(v36 - 1);
        *(_OWORD *)v37 = v39;
        v37 -= 32;
        v36 -= 2;
        v38 -= 32;
      }
      while (v38);
      if (v28 == v35)
        goto LABEL_58;
      if ((v28 & 0x18) == 0)
      {
        v33 -= v35;
        v25 -= v35;
        goto LABEL_56;
      }
    }
    else
    {
      v35 = 0;
    }
    v40 = v35 - (v28 & 0xFFFFFFFFFFFFFFF8);
    v41 = &v25[-v35 - 8];
    v42 = v41 - v27;
    do
    {
      v43 = *(_QWORD *)v41;
      v41 -= 8;
      *(_QWORD *)&v32[v42] = v43;
      v42 -= 8;
      v40 += 8;
    }
    while (v40);
    if (v28 == (v28 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_58;
    v33 -= v28 & 0xFFFFFFFFFFFFFFF8;
    v25 -= v28 & 0xFFFFFFFFFFFFFFF8;
LABEL_56:
    v44 = v33 - 1;
    do
    {
      v45 = *--v25;
      *v44-- = v45;
    }
    while (v25 != v27);
LABEL_58:
    v33 = v32;
    goto LABEL_59;
  }
  v20 = (_BYTE *)(*(_QWORD *)(v14 + 80) + (((uint64_t)v18 - *(_QWORD *)(v14 + 56)) >> 3));
  *v20 = v17;
  v21 = *(_QWORD *)(v14 + 248);
  if (v20 != *(_BYTE **)(v14 + 88))
  {
    v22 = *(_QWORD **)(v14 + 128);
    if (v22)
    {
      while (1)
      {
        v48 = &v51;
        v49 = 1;
        v52 = v21;
        v23 = v22[6];
        if (!v23)
          break;
        (*(void (**)(uint64_t, unint64_t *, uint64_t **))(*(_QWORD *)v23 + 48))(v23, &v52, &v48);
        v22 = (_QWORD *)*v22;
        if (!v22)
          return;
      }
LABEL_66:
      std::__throw_bad_function_call[abi:nn180100]();
LABEL_67:
      abort();
    }
    return;
  }
LABEL_62:
  v46 = *(_QWORD **)(v14 + 176);
  if (v46)
  {
    while (1)
    {
      v48 = &v51;
      v49 = 1;
      v52 = v21;
      v47 = v46[6];
      if (!v47)
        break;
      (*(void (**)(uint64_t, unint64_t *, uint64_t **))(*(_QWORD *)v47 + 48))(v47, &v52, &v48);
      v46 = (_QWORD *)*v46;
      if (!v46)
        return;
    }
    goto LABEL_66;
  }
}

void sub_19FA2AE40(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::RenderableMeshType>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RenderableMeshType>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_BYTE *)(v14 + v7) = *(_BYTE *)(v15 - 1);
  a1[11] = v15 - 1;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RenderableMeshType>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RenderableMeshType>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::InstanceDataV>(gdc::Entity,md::ls::InstanceDataV &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_1E427DC50;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::InstanceDataV>(gdc::Entity,md::ls::InstanceDataV &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_1E427DC50;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::InstanceDataV>(gdc::Entity,md::ls::InstanceDataV &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_1E427DC50;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::InstanceDataV>(gdc::Entity,md::ls::InstanceDataV &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_1E427DC50;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::InstanceDataV>(gdc::Entity,md::ls::InstanceDataV &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::InstanceDataV>(gdc::Entity,md::ls::InstanceDataV &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(__p);
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::InstanceDataV>(gdc::Entity,md::ls::InstanceDataV &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  __int128 v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  unint64_t *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  unint64_t *v27;
  unint64_t v28;
  char *v29;
  __int128 v30;
  char *v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *i;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;

  v3 = *(_QWORD *)(a1 + 24);
  v4 = gdc::Registry::storage<md::ls::InstanceDataV>(a2);
  v5 = (_QWORD *)v4;
  v6 = *(_OWORD *)(a1 + 8);
  v42 = v6;
  v7 = *(_QWORD *)(a1 + 16);
  if (*((_QWORD *)&v6 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v43 = v3;
  v10 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v4 + 32), (uint64_t)&v43);
  if ((v11 & 1) != 0)
  {
    v17 = (char *)v5[11];
    v16 = v5[12];
    if ((unint64_t)v17 >= v16)
    {
      v20 = (char *)v5[10];
      v21 = (v17 - v20) >> 4;
      v22 = v21 + 1;
      if ((unint64_t)(v21 + 1) >> 60)
        abort();
      v23 = v16 - (_QWORD)v20;
      if (v23 >> 3 > v22)
        v22 = v23 >> 3;
      if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0)
        v24 = 0xFFFFFFFFFFFFFFFLL;
      else
        v24 = v22;
      if (v24)
      {
        if (v24 >> 60)
          goto LABEL_59;
        v25 = (char *)operator new(16 * v24);
      }
      else
      {
        v25 = 0;
      }
      v26 = &v25[16 * v21];
      *(_OWORD *)v26 = v42;
      if (v7)
      {
        v27 = (unint64_t *)(v7 + 8);
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
        v20 = (char *)v5[10];
        v17 = (char *)v5[11];
      }
      v29 = &v25[16 * v24];
      v12 = (uint64_t)(v26 + 16);
      if (v17 == v20)
      {
        v5[10] = v26;
        v5[11] = v12;
        v5[12] = v29;
      }
      else
      {
        do
        {
          v30 = *((_OWORD *)v17 - 1);
          v17 -= 16;
          *((_OWORD *)v26 - 1) = v30;
          v26 -= 16;
          *(_QWORD *)v17 = 0;
          *((_QWORD *)v17 + 1) = 0;
        }
        while (v17 != v20);
        v20 = (char *)v5[10];
        v31 = (char *)v5[11];
        v5[10] = v26;
        v5[11] = v12;
        v5[12] = v29;
        while (v31 != v20)
        {
          v32 = (std::__shared_weak_count *)*((_QWORD *)v31 - 1);
          if (v32)
          {
            p_shared_owners = (unint64_t *)&v32->__shared_owners_;
            do
              v34 = __ldaxr(p_shared_owners);
            while (__stlxr(v34 - 1, p_shared_owners));
            if (!v34)
            {
              ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
              std::__shared_weak_count::__release_weak(v32);
            }
          }
          v31 -= 16;
        }
      }
      if (v20)
        operator delete(v20);
    }
    else
    {
      *(_OWORD *)v17 = v42;
      if (v7)
      {
        v18 = (unint64_t *)(v7 + 8);
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      v12 = (uint64_t)(v17 + 16);
    }
    v5[11] = v12;
  }
  else
  {
    v12 = v5[10] + 2 * ((_QWORD)v10 - v5[7]);
    v13 = *(std::__shared_weak_count **)(v12 + 8);
    *(_OWORD *)v12 = v42;
    v42 = 0u;
    if (v13)
    {
      v14 = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  v35 = v5[31];
  if (v12 == v5[11])
  {
    for (i = (_QWORD *)v5[22]; i; i = (_QWORD *)*i)
    {
      v45 = &v43;
      v46 = 1;
      v44 = v35;
      v39 = i[6];
      if (!v39)
        goto LABEL_57;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v39 + 48))(v39, &v44, &v45);
    }
  }
  else
  {
    v36 = (_QWORD *)v5[16];
    if (v36)
    {
      while (1)
      {
        v45 = &v43;
        v46 = 1;
        v44 = v35;
        v37 = v36[6];
        if (!v37)
          break;
        (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v37 + 48))(v37, &v44, &v45);
        v36 = (_QWORD *)*v36;
        if (!v36)
          goto LABEL_51;
      }
LABEL_57:
      std::__throw_bad_function_call[abi:nn180100]();
      __break(1u);
LABEL_59:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
  }
LABEL_51:
  if (*((_QWORD *)&v42 + 1))
  {
    v40 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v42 + 1) + 16))(*((_QWORD *)&v42 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v42 + 1));
    }
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::InstanceCount>(gdc::Entity,md::ls::InstanceCount &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::InstanceCount>(gdc::Entity,md::ls::InstanceCount &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427DC08;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::InstanceCount>(gdc::Entity,md::ls::InstanceCount &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427DC08;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::InstanceCount>(gdc::Entity,md::ls::InstanceCount &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::InstanceCount>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_34;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 != v15)
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_38;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_38;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_38:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + v4[10] - v4[7]);
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_QWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_33:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_34:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_33;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IntendedSceneLayer>(gdc::Entity,md::ls::IntendedSceneLayer &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IntendedSceneLayer>(gdc::Entity,md::ls::IntendedSceneLayer &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427EC10;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IntendedSceneLayer>(gdc::Entity,md::ls::IntendedSceneLayer &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427EC10;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IntendedSceneLayer>(gdc::Entity,md::ls::IntendedSceneLayer &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  char v5;
  _QWORD *v6;
  char v7;
  _BYTE *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  size_t v19;
  char *v20;
  char *v21;
  char *v22;
  unint64_t v23;
  __int128 *v24;
  char *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t v28;
  char *v29;
  int64_t v30;
  uint64_t v31;
  char *v32;
  char v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;

  v3 = *(_QWORD *)(a1 + 12);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::IntendedSceneLayer>(a2);
  v5 = *(_BYTE *)(a1 + 8);
  v36 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v36);
  if ((v7 & 1) != 0)
  {
    v13 = (_BYTE *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 < v12)
    {
      *v13 = v5;
      v14 = (uint64_t)(v13 + 1);
LABEL_37:
      v4[11] = v14;
      v9 = v4[31];
      goto LABEL_38;
    }
    v15 = (_BYTE *)v4[10];
    v16 = v13 - v15;
    v17 = v13 - v15 + 1;
    if (v17 < 0)
      goto LABEL_43;
    v18 = v12 - (_QWORD)v15;
    if (2 * v18 > v17)
      v17 = 2 * v18;
    if (v18 >= 0x3FFFFFFFFFFFFFFFLL)
      v19 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v19 = v17;
    if (v19)
      v20 = (char *)operator new(v19);
    else
      v20 = 0;
    v21 = &v20[v16];
    v22 = &v20[v19];
    v20[v16] = v5;
    v14 = (uint64_t)&v20[v16 + 1];
    if (v13 == v15)
    {
LABEL_35:
      v4[10] = (uint64_t)v21;
      v4[11] = v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
      goto LABEL_37;
    }
    if (v16 < 8 || (unint64_t)(v15 - v20) < 0x20)
      goto LABEL_32;
    if (v16 >= 0x20)
    {
      v23 = v16 & 0xFFFFFFFFFFFFFFE0;
      v24 = (__int128 *)(v13 - 16);
      v25 = &v20[v13 - 16 - v15];
      v26 = v16 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v27 = *v24;
        *((_OWORD *)v25 - 1) = *(v24 - 1);
        *(_OWORD *)v25 = v27;
        v25 -= 32;
        v24 -= 2;
        v26 -= 32;
      }
      while (v26);
      if (v16 == v23)
        goto LABEL_34;
      if ((v16 & 0x18) == 0)
      {
        v21 -= v23;
        v13 -= v23;
        goto LABEL_32;
      }
    }
    else
    {
      v23 = 0;
    }
    v28 = v23 - (v16 & 0xFFFFFFFFFFFFFFF8);
    v29 = &v13[-v23 - 8];
    v30 = v29 - v15;
    do
    {
      v31 = *(_QWORD *)v29;
      v29 -= 8;
      *(_QWORD *)&v20[v30] = v31;
      v30 -= 8;
      v28 += 8;
    }
    while (v28);
    if (v16 == (v16 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_34;
    v21 -= v16 & 0xFFFFFFFFFFFFFFF8;
    v13 -= v16 & 0xFFFFFFFFFFFFFFF8;
LABEL_32:
    v32 = v21 - 1;
    do
    {
      v33 = *--v13;
      *v32-- = v33;
    }
    while (v13 != v15);
LABEL_34:
    v21 = v20;
    goto LABEL_35;
  }
  v8 = (_BYTE *)(v4[10] + (((uint64_t)v6 - v4[7]) >> 3));
  *v8 = v5;
  v9 = v4[31];
  if (v8 != (_BYTE *)v4[11])
  {
    v10 = (_QWORD *)v4[16];
    if (v10)
    {
      while (1)
      {
        v38 = &v36;
        v39 = 1;
        v37 = v9;
        v11 = v10[6];
        if (!v11)
          break;
        (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v37, &v38);
        v10 = (_QWORD *)*v10;
        if (!v10)
          return;
      }
LABEL_42:
      std::__throw_bad_function_call[abi:nn180100]();
LABEL_43:
      abort();
    }
    return;
  }
LABEL_38:
  v34 = (_QWORD *)v4[22];
  if (v34)
  {
    while (1)
    {
      v38 = &v36;
      v39 = 1;
      v37 = v9;
      v35 = v34[6];
      if (!v35)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v35 + 48))(v35, &v37, &v38);
      v34 = (_QWORD *)*v34;
      if (!v34)
        return;
    }
    goto LABEL_42;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IndexRange>(gdc::Entity,md::ls::IndexRange &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IndexRange>(gdc::Entity,md::ls::IndexRange &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E427D500;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IndexRange>(gdc::Entity,md::ls::IndexRange &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427D500;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IndexRange>(gdc::Entity,md::ls::IndexRange &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  char v6;
  _OWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  _QWORD *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;

  v3 = *(_QWORD *)(a1 + 24);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::IndexRange>(a2);
  v23 = *(_OWORD *)(a1 + 8);
  v24 = v3;
  v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v24);
  if ((v6 & 1) != 0)
  {
    v12 = (_OWORD *)v4[11];
    v11 = v4[12];
    if ((unint64_t)v12 >= v11)
    {
      v14 = (_OWORD *)v4[10];
      v15 = v12 - v14;
      v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 60)
        goto LABEL_30;
      v17 = v11 - (_QWORD)v14;
      if (v17 >> 3 > v16)
        v16 = v17 >> 3;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
        v18 = 0xFFFFFFFFFFFFFFFLL;
      else
        v18 = v16;
      if (v18)
      {
        if (v18 >> 60)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v19 = (char *)operator new(16 * v18);
      }
      else
      {
        v19 = 0;
      }
      v20 = &v19[16 * v15];
      *(_OWORD *)v20 = v23;
      v13 = v20 + 16;
      if (v12 != v14)
      {
        do
        {
          *((_OWORD *)v20 - 1) = *(v12 - 1);
          v20 -= 16;
          --v12;
        }
        while (v12 != v14);
        v12 = (_OWORD *)v4[10];
      }
      v4[10] = (uint64_t)v20;
      v4[11] = (uint64_t)v13;
      v4[12] = (uint64_t)&v19[16 * v18];
      if (v12)
        operator delete(v12);
    }
    else
    {
      *v12 = v23;
      v13 = v12 + 1;
    }
    v4[11] = (uint64_t)v13;
    v8 = v4[31];
  }
  else
  {
    v7 = (_OWORD *)(v4[10] + 2 * ((_QWORD)v5 - v4[7]));
    *v7 = v23;
    v8 = v4[31];
    if (v7 != (_OWORD *)v4[11])
    {
      v9 = (_QWORD *)v4[16];
      if (v9)
      {
        while (1)
        {
          v26 = &v24;
          v27 = 1;
          v25 = v8;
          v10 = v9[6];
          if (!v10)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v10 + 48))(v10, &v25, &v26);
          v9 = (_QWORD *)*v9;
          if (!v9)
            return;
        }
LABEL_29:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_30:
        abort();
      }
      return;
    }
  }
  v21 = (_QWORD *)v4[22];
  if (v21)
  {
    while (1)
    {
      v26 = &v24;
      v27 = 1;
      v25 = v8;
      v22 = v21[6];
      if (!v22)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v22 + 48))(v22, &v25, &v26);
      v21 = (_QWORD *)*v21;
      if (!v21)
        return;
    }
    goto LABEL_29;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UVsHandle>(gdc::Entity,md::ls::UVsHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UVsHandle>(gdc::Entity,md::ls::UVsHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E4281F40;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UVsHandle>(gdc::Entity,md::ls::UVsHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E4281F40;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UVsHandle>(gdc::Entity,md::ls::UVsHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::UVsHandle>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_36;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 == v15)
      {
        v15 = v13;
      }
      else
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_40;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_40;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
          v15 = (char *)v4[10];
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + v4[10] - v4[7]);
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_QWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_35;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ElevationHandle>(gdc::Entity,md::ls::ElevationHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ElevationHandle>(gdc::Entity,md::ls::ElevationHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427E118;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ElevationHandle>(gdc::Entity,md::ls::ElevationHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427E118;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ElevationHandle>(gdc::Entity,md::ls::ElevationHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::ElevationHandle>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_36;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 == v15)
      {
        v15 = v13;
      }
      else
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_40;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_40;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
          v15 = (char *)v4[10];
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + v4[10] - v4[7]);
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_QWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_35;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::NormalsHandle>(gdc::Entity,md::ls::NormalsHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::NormalsHandle>(gdc::Entity,md::ls::NormalsHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427DD70;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::NormalsHandle>(gdc::Entity,md::ls::NormalsHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427DD70;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::NormalsHandle>(gdc::Entity,md::ls::NormalsHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::NormalsHandle>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_36;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 == v15)
      {
        v15 = v13;
      }
      else
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_40;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_40;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
          v15 = (char *)v4[10];
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + v4[10] - v4[7]);
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_QWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_35;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PredefinedRenderState>(gdc::Entity,md::ls::PredefinedRenderState &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PredefinedRenderState>(gdc::Entity,md::ls::PredefinedRenderState &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427F5A0;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PredefinedRenderState>(gdc::Entity,md::ls::PredefinedRenderState &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427F5A0;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PredefinedRenderState>(gdc::Entity,md::ls::PredefinedRenderState &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  char v5;
  _QWORD *v6;
  char v7;
  _BYTE *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  size_t v19;
  char *v20;
  char *v21;
  char *v22;
  unint64_t v23;
  __int128 *v24;
  char *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t v28;
  char *v29;
  int64_t v30;
  uint64_t v31;
  char *v32;
  char v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;

  v3 = *(_QWORD *)(a1 + 12);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::PredefinedRenderState>(a2);
  v5 = *(_BYTE *)(a1 + 8);
  v36 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v36);
  if ((v7 & 1) != 0)
  {
    v13 = (_BYTE *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 < v12)
    {
      *v13 = v5;
      v14 = (uint64_t)(v13 + 1);
LABEL_37:
      v4[11] = v14;
      v9 = v4[31];
      goto LABEL_38;
    }
    v15 = (_BYTE *)v4[10];
    v16 = v13 - v15;
    v17 = v13 - v15 + 1;
    if (v17 < 0)
      goto LABEL_43;
    v18 = v12 - (_QWORD)v15;
    if (2 * v18 > v17)
      v17 = 2 * v18;
    if (v18 >= 0x3FFFFFFFFFFFFFFFLL)
      v19 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v19 = v17;
    if (v19)
      v20 = (char *)operator new(v19);
    else
      v20 = 0;
    v21 = &v20[v16];
    v22 = &v20[v19];
    v20[v16] = v5;
    v14 = (uint64_t)&v20[v16 + 1];
    if (v13 == v15)
    {
LABEL_35:
      v4[10] = (uint64_t)v21;
      v4[11] = v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
      goto LABEL_37;
    }
    if (v16 < 8 || (unint64_t)(v15 - v20) < 0x20)
      goto LABEL_32;
    if (v16 >= 0x20)
    {
      v23 = v16 & 0xFFFFFFFFFFFFFFE0;
      v24 = (__int128 *)(v13 - 16);
      v25 = &v20[v13 - 16 - v15];
      v26 = v16 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v27 = *v24;
        *((_OWORD *)v25 - 1) = *(v24 - 1);
        *(_OWORD *)v25 = v27;
        v25 -= 32;
        v24 -= 2;
        v26 -= 32;
      }
      while (v26);
      if (v16 == v23)
        goto LABEL_34;
      if ((v16 & 0x18) == 0)
      {
        v21 -= v23;
        v13 -= v23;
        goto LABEL_32;
      }
    }
    else
    {
      v23 = 0;
    }
    v28 = v23 - (v16 & 0xFFFFFFFFFFFFFFF8);
    v29 = &v13[-v23 - 8];
    v30 = v29 - v15;
    do
    {
      v31 = *(_QWORD *)v29;
      v29 -= 8;
      *(_QWORD *)&v20[v30] = v31;
      v30 -= 8;
      v28 += 8;
    }
    while (v28);
    if (v16 == (v16 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_34;
    v21 -= v16 & 0xFFFFFFFFFFFFFFF8;
    v13 -= v16 & 0xFFFFFFFFFFFFFFF8;
LABEL_32:
    v32 = v21 - 1;
    do
    {
      v33 = *--v13;
      *v32-- = v33;
    }
    while (v13 != v15);
LABEL_34:
    v21 = v20;
    goto LABEL_35;
  }
  v8 = (_BYTE *)(v4[10] + (((uint64_t)v6 - v4[7]) >> 3));
  *v8 = v5;
  v9 = v4[31];
  if (v8 != (_BYTE *)v4[11])
  {
    v10 = (_QWORD *)v4[16];
    if (v10)
    {
      while (1)
      {
        v38 = &v36;
        v39 = 1;
        v37 = v9;
        v11 = v10[6];
        if (!v11)
          break;
        (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v37, &v38);
        v10 = (_QWORD *)*v10;
        if (!v10)
          return;
      }
LABEL_42:
      std::__throw_bad_function_call[abi:nn180100]();
LABEL_43:
      abort();
    }
    return;
  }
LABEL_38:
  v34 = (_QWORD *)v4[22];
  if (v34)
  {
    while (1)
    {
      v38 = &v36;
      v39 = 1;
      v37 = v9;
      v35 = v34[6];
      if (!v35)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v35 + 48))(v35, &v37, &v38);
      v34 = (_QWORD *)*v34;
      if (!v34)
        return;
    }
    goto LABEL_42;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FlyoverCommonS2TransformHandle>(gdc::Entity,md::ls::FlyoverCommonS2TransformHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FlyoverCommonS2TransformHandle>(gdc::Entity,md::ls::FlyoverCommonS2TransformHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E4281718;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FlyoverCommonS2TransformHandle>(gdc::Entity,md::ls::FlyoverCommonS2TransformHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E4281718;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FlyoverCommonS2TransformHandle>(gdc::Entity,md::ls::FlyoverCommonS2TransformHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::FlyoverCommonS2TransformHandle>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_36;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 == v15)
      {
        v15 = v13;
      }
      else
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_40;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_40;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
          v15 = (char *)v4[10];
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + v4[10] - v4[7]);
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_QWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_35;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FlyoverCommonTexcoordsHandle>(gdc::Entity,md::ls::FlyoverCommonTexcoordsHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FlyoverCommonTexcoordsHandle>(gdc::Entity,md::ls::FlyoverCommonTexcoordsHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E4280A28;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FlyoverCommonTexcoordsHandle>(gdc::Entity,md::ls::FlyoverCommonTexcoordsHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E4280A28;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FlyoverCommonTexcoordsHandle>(gdc::Entity,md::ls::FlyoverCommonTexcoordsHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::FlyoverCommonTexcoordsHandle>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_36;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 == v15)
      {
        v15 = v13;
      }
      else
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_40;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_40;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
          v15 = (char *)v4[10];
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + v4[10] - v4[7]);
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_QWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_35;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FlyoverCommonMaterialHandle>(gdc::Entity,md::ls::FlyoverCommonMaterialHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FlyoverCommonMaterialHandle>(gdc::Entity,md::ls::FlyoverCommonMaterialHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42807A0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FlyoverCommonMaterialHandle>(gdc::Entity,md::ls::FlyoverCommonMaterialHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42807A0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FlyoverCommonMaterialHandle>(gdc::Entity,md::ls::FlyoverCommonMaterialHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::FlyoverCommonMaterialHandle>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_36;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 == v15)
      {
        v15 = v13;
      }
      else
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_40;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_40;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
          v15 = (char *)v4[10];
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + v4[10] - v4[7]);
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_QWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_35;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FlyoverClipConstantDataHandle>(gdc::Entity,md::ls::FlyoverClipConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FlyoverClipConstantDataHandle>(gdc::Entity,md::ls::FlyoverClipConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E4281568;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FlyoverClipConstantDataHandle>(gdc::Entity,md::ls::FlyoverClipConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E4281568;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FlyoverClipConstantDataHandle>(gdc::Entity,md::ls::FlyoverClipConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::FlyoverClipConstantDataHandle>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_36;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 == v15)
      {
        v15 = v13;
      }
      else
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_40;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_40;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
          v15 = (char *)v4[10];
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + v4[10] - v4[7]);
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_QWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_35;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FlyoverCommonTransformConstantDataHandle>(gdc::Entity,md::ls::FlyoverCommonTransformConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FlyoverCommonTransformConstantDataHandle>(gdc::Entity,md::ls::FlyoverCommonTransformConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E4281CB8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FlyoverCommonTransformConstantDataHandle>(gdc::Entity,md::ls::FlyoverCommonTransformConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E4281CB8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FlyoverCommonTransformConstantDataHandle>(gdc::Entity,md::ls::FlyoverCommonTransformConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::FlyoverCommonTransformConstantDataHandle>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_36;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 == v15)
      {
        v15 = v13;
      }
      else
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_40;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_40;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
          v15 = (char *)v4[10];
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + v4[10] - v4[7]);
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_QWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_35;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::TextureHandleForType<Flyover::DiffuseTexture>>(gdc::Entity,md::ls::TextureHandleForType<Flyover::DiffuseTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::TextureHandleForType<Flyover::DiffuseTexture>>(gdc::Entity,md::ls::TextureHandleForType<Flyover::DiffuseTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427F3F0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::TextureHandleForType<Flyover::DiffuseTexture>>(gdc::Entity,md::ls::TextureHandleForType<Flyover::DiffuseTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427F3F0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::TextureHandleForType<Flyover::DiffuseTexture>>(gdc::Entity,md::ls::TextureHandleForType<Flyover::DiffuseTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::TextureHandleForType<Flyover::DiffuseTexture>>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_36;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 == v15)
      {
        v15 = v13;
      }
      else
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_40;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_40;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
          v15 = (char *)v4[10];
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + v4[10] - v4[7]);
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_QWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_35;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::TextureHandleForType<Flyover::NightTexture>>(gdc::Entity,md::ls::TextureHandleForType<Flyover::NightTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::TextureHandleForType<Flyover::NightTexture>>(gdc::Entity,md::ls::TextureHandleForType<Flyover::NightTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427F3A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::TextureHandleForType<Flyover::NightTexture>>(gdc::Entity,md::ls::TextureHandleForType<Flyover::NightTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427F3A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::TextureHandleForType<Flyover::NightTexture>>(gdc::Entity,md::ls::TextureHandleForType<Flyover::NightTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::TextureHandleForType<Flyover::NightTexture>>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_36;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 == v15)
      {
        v15 = v13;
      }
      else
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_40;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_40;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
          v15 = (char *)v4[10];
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + v4[10] - v4[7]);
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_QWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_35;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FlyoverSharedConstants>(gdc::Entity,md::ls::FlyoverSharedConstants &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FlyoverSharedConstants>(gdc::Entity,md::ls::FlyoverSharedConstants &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427F708;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FlyoverSharedConstants>(gdc::Entity,md::ls::FlyoverSharedConstants &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427F708;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FlyoverSharedConstants>(gdc::Entity,md::ls::FlyoverSharedConstants &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::FlyoverSharedConstants>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_36;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 == v15)
      {
        v15 = v13;
      }
      else
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_40;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_40;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
          v15 = (char *)v4[10];
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + v4[10] - v4[7]);
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_QWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_35;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IsMercator>(gdc::Entity,md::ls::IsMercator &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IsMercator>(gdc::Entity,md::ls::IsMercator &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427D5D8;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IsMercator>(gdc::Entity,md::ls::IsMercator &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427D5D8;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IsMercator>(gdc::Entity,md::ls::IsMercator &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::IsMercator>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::VisibilityGroupID>(gdc::Entity,md::ls::VisibilityGroupID &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::VisibilityGroupID>(gdc::Entity,md::ls::VisibilityGroupID &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427EB38;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::VisibilityGroupID>(gdc::Entity,md::ls::VisibilityGroupID &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427EB38;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::VisibilityGroupID>(gdc::Entity,md::ls::VisibilityGroupID &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::VisibilityGroupID>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_34;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 != v15)
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_38;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_38;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_38:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + v4[10] - v4[7]);
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_QWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_33:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_34:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_33;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::AssociationHandle>(gdc::Entity,md::ls::AssociationHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::AssociationHandle>(gdc::Entity,md::ls::AssociationHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E427E8F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::AssociationHandle>(gdc::Entity,md::ls::AssociationHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427E8F8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::AssociationHandle>(gdc::Entity,md::ls::AssociationHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  char v6;
  _OWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  _QWORD *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;

  v3 = *(_QWORD *)(a1 + 24);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::AssociationHandle>(a2);
  v23 = *(_OWORD *)(a1 + 8);
  v24 = v3;
  v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v24);
  if ((v6 & 1) != 0)
  {
    v12 = (_OWORD *)v4[11];
    v11 = v4[12];
    if ((unint64_t)v12 >= v11)
    {
      v14 = (_OWORD *)v4[10];
      v15 = v12 - v14;
      v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 60)
        goto LABEL_30;
      v17 = v11 - (_QWORD)v14;
      if (v17 >> 3 > v16)
        v16 = v17 >> 3;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
        v18 = 0xFFFFFFFFFFFFFFFLL;
      else
        v18 = v16;
      if (v18)
      {
        if (v18 >> 60)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v19 = (char *)operator new(16 * v18);
      }
      else
      {
        v19 = 0;
      }
      v20 = &v19[16 * v15];
      *(_OWORD *)v20 = v23;
      v13 = v20 + 16;
      if (v12 != v14)
      {
        do
        {
          *((_OWORD *)v20 - 1) = *(v12 - 1);
          v20 -= 16;
          --v12;
        }
        while (v12 != v14);
        v12 = (_OWORD *)v4[10];
      }
      v4[10] = (uint64_t)v20;
      v4[11] = (uint64_t)v13;
      v4[12] = (uint64_t)&v19[16 * v18];
      if (v12)
        operator delete(v12);
    }
    else
    {
      *v12 = v23;
      v13 = v12 + 1;
    }
    v4[11] = (uint64_t)v13;
    v8 = v4[31];
  }
  else
  {
    v7 = (_OWORD *)(v4[10] + 2 * ((_QWORD)v5 - v4[7]));
    *v7 = v23;
    v8 = v4[31];
    if (v7 != (_OWORD *)v4[11])
    {
      v9 = (_QWORD *)v4[16];
      if (v9)
      {
        while (1)
        {
          v26 = &v24;
          v27 = 1;
          v25 = v8;
          v10 = v9[6];
          if (!v10)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v10 + 48))(v10, &v25, &v26);
          v9 = (_QWORD *)*v9;
          if (!v9)
            return;
        }
LABEL_29:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_30:
        abort();
      }
      return;
    }
  }
  v21 = (_QWORD *)v4[22];
  if (v21)
  {
    while (1)
    {
      v26 = &v24;
      v27 = 1;
      v25 = v8;
      v22 = v21[6];
      if (!v22)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v22 + 48))(v22, &v25, &v26);
      v21 = (_QWORD *)*v21;
      if (!v21)
        return;
    }
    goto LABEL_29;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::CheckIfTileWasDeleted>(gdc::Entity,md::ls::CheckIfTileWasDeleted &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::CheckIfTileWasDeleted>(gdc::Entity,md::ls::CheckIfTileWasDeleted &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427F4C8;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::CheckIfTileWasDeleted>(gdc::Entity,md::ls::CheckIfTileWasDeleted &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427F4C8;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::CheckIfTileWasDeleted>(gdc::Entity,md::ls::CheckIfTileWasDeleted &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  int8x8_t v5;
  uint8x8_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  size_t v28;
  char *v29;
  char *v30;
  char *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v3 = *(_QWORD *)(a1 + 12);
  v38 = 0x4458C393FA29B062;
  v4 = (uint64_t *)(a2 + 120);
  v5 = *(int8x8_t *)(a2 + 128);
  if (v5)
  {
    v6 = (uint8x8_t)vcnt_s8(v5);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      v7 = 0x4458C393FA29B062;
      if (*(_QWORD *)&v5 <= 0x4458C393FA29B062uLL)
        v7 = 0x4458C393FA29B062uLL % *(_QWORD *)&v5;
    }
    else
    {
      v7 = (*(_QWORD *)&v5 - 1) & 0x4458C393FA29B062;
    }
    v8 = *(_QWORD **)(*v4 + 8 * v7);
    if (v8)
    {
      v9 = (_QWORD *)*v8;
      if (v9)
      {
        if (v6.u32[0] < 2uLL)
        {
          v10 = *(_QWORD *)&v5 - 1;
          while (1)
          {
            v12 = v9[1];
            if (v12 == 0x4458C393FA29B062)
            {
              if (v9[2] == 0x4458C393FA29B062)
                goto LABEL_50;
            }
            else if ((v12 & v10) != v7)
            {
              goto LABEL_21;
            }
            v9 = (_QWORD *)*v9;
            if (!v9)
              goto LABEL_21;
          }
        }
        do
        {
          v11 = v9[1];
          if (v11 == 0x4458C393FA29B062)
          {
            if (v9[2] == 0x4458C393FA29B062)
            {
LABEL_50:
              v13 = v9[3];
              goto LABEL_24;
            }
          }
          else
          {
            if (v11 >= *(_QWORD *)&v5)
              v11 %= *(_QWORD *)&v5;
            if (v11 != v7)
              break;
          }
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
    }
  }
LABEL_21:
  v13 = operator new();
  *(_QWORD *)(v13 + 16) = "md::ls::CheckIfTileWasDeleted]";
  *(_QWORD *)(v13 + 24) = 29;
  *(_OWORD *)(v13 + 32) = 0u;
  *(_OWORD *)(v13 + 48) = 0u;
  *(_OWORD *)(v13 + 64) = 0u;
  *(_OWORD *)(v13 + 80) = 0u;
  *(_OWORD *)(v13 + 96) = 0u;
  *(_OWORD *)(v13 + 112) = 0u;
  *(_OWORD *)(v13 + 128) = 0u;
  *(_DWORD *)(v13 + 144) = 1065353216;
  *(_OWORD *)(v13 + 152) = 0u;
  *(_OWORD *)(v13 + 168) = 0u;
  *(_QWORD *)(v13 + 184) = 0;
  *(_DWORD *)(v13 + 192) = 1065353216;
  *(_OWORD *)(v13 + 200) = 0u;
  *(_OWORD *)(v13 + 216) = 0u;
  *(_QWORD *)(v13 + 232) = 0;
  *(_DWORD *)(v13 + 240) = 1065353216;
  *(_QWORD *)v13 = &off_1E4272828;
  *(_QWORD *)(v13 + 8) = 0x4458C393FA29B062;
  *(_QWORD *)(v13 + 248) = a2;
  v14 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v4, 0x4458C393FA29B062uLL, &v38);
  v15 = v14[3];
  v14[3] = v13;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v34 = 0x4458C393FA29B062;
  v35 = (uint64_t)"md::ls::CheckIfTileWasDeleted]";
  v36 = 29;
  gdc::Registry::_registerStorageDataSignals(a2, 0x4458C393FA29B062, (uint64_t)&v34, (uint64_t *)(v13 + 104));
LABEL_24:
  v37 = v3;
  v16 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v13 + 32), (uint64_t)&v37);
  if ((v17 & 1) != 0)
  {
    v22 = *(_BYTE **)(v13 + 88);
    v21 = *(_QWORD *)(v13 + 96);
    if ((unint64_t)v22 >= v21)
    {
      v24 = *(char **)(v13 + 80);
      v25 = v22 - v24;
      v26 = v22 - v24 + 1;
      if (v26 < 0)
        goto LABEL_52;
      v27 = v21 - (_QWORD)v24;
      if (2 * v27 > v26)
        v26 = 2 * v27;
      if (v27 >= 0x3FFFFFFFFFFFFFFFLL)
        v28 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v28 = v26;
      if (v28)
        v29 = (char *)operator new(v28);
      else
        v29 = 0;
      v30 = &v29[v28];
      v23 = (uint64_t)&v29[v25 + 1];
      v31 = (char *)(v24 - v22);
      if (v24 == v22)
        v31 = 0;
      *(_QWORD *)(v13 + 80) = &v29[v25 + (_QWORD)v31];
      *(_QWORD *)(v13 + 88) = v23;
      *(_QWORD *)(v13 + 96) = v30;
      if (v24)
        operator delete(v24);
    }
    else
    {
      v23 = (uint64_t)(v22 + 1);
    }
    *(_QWORD *)(v13 + 88) = v23;
    v18 = *(_QWORD *)(v13 + 248);
  }
  else
  {
    v18 = *(_QWORD *)(v13 + 248);
    if (*(_QWORD *)(v13 + 80) + (((uint64_t)v16 - *(_QWORD *)(v13 + 56)) >> 3) != *(_QWORD *)(v13 + 88))
    {
      v19 = *(_QWORD **)(v13 + 128);
      if (v19)
      {
        while (1)
        {
          v34 = (uint64_t)&v37;
          v35 = 1;
          v38 = v18;
          v20 = v19[6];
          if (!v20)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v20 + 48))(v20, &v38, &v34);
          v19 = (_QWORD *)*v19;
          if (!v19)
            return;
        }
LABEL_51:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_52:
        abort();
      }
      return;
    }
  }
  v32 = *(_QWORD **)(v13 + 176);
  if (v32)
  {
    while (1)
    {
      v34 = (uint64_t)&v37;
      v35 = 1;
      v38 = v18;
      v33 = v32[6];
      if (!v33)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v33 + 48))(v33, &v38, &v34);
      v32 = (_QWORD *)*v32;
      if (!v32)
        return;
    }
    goto LABEL_51;
  }
}

void sub_19FA2E7C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::CheckIfTileWasDeleted>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::CheckIfTileWasDeleted>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::CheckIfTileWasDeleted>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::CheckIfTileWasDeleted>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::WorldIndex>(gdc::Entity,md::ls::WorldIndex &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::WorldIndex>(gdc::Entity,md::ls::WorldIndex &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427D788;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::WorldIndex>(gdc::Entity,md::ls::WorldIndex &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427D788;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::WorldIndex>(gdc::Entity,md::ls::WorldIndex &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  int8x8_t v6;
  uint8x8_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char v17;
  _QWORD *v18;
  char v19;
  _BYTE *v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  _BYTE *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  size_t v31;
  _BYTE *v32;
  char *v33;
  char *v34;
  unint64_t v35;
  __int128 *v36;
  _OWORD *v37;
  unint64_t v38;
  __int128 v39;
  unint64_t v40;
  char *v41;
  _QWORD *v42;
  uint64_t v43;
  char *v44;
  char v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;

  v4 = *(_QWORD *)(a1 + 12);
  v52 = 0x9804EDBEDDBCBFF9;
  v5 = (uint64_t *)(a2 + 120);
  v6 = *(int8x8_t *)(a2 + 128);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8(v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v8 = 0x9804EDBEDDBCBFF9;
      if (*(_QWORD *)&v6 <= 0x9804EDBEDDBCBFF9)
        v8 = 0x9804EDBEDDBCBFF9 % *(_QWORD *)&v6;
    }
    else
    {
      v8 = (*(_QWORD *)&v6 - 1) & 0x9804EDBEDDBCBFF9;
    }
    v9 = *(_QWORD **)(*v5 + 8 * v8);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (v10)
      {
        if (v7.u32[0] < 2uLL)
        {
          v11 = *(_QWORD *)&v6 - 1;
          while (1)
          {
            v13 = v10[1];
            if (v13 == 0x9804EDBEDDBCBFF9)
            {
              if (v10[2] == 0x9804EDBEDDBCBFF9)
                goto LABEL_47;
            }
            else if ((v13 & v11) != v8)
            {
              goto LABEL_21;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_21;
          }
        }
        do
        {
          v12 = v10[1];
          if (v12 == 0x9804EDBEDDBCBFF9)
          {
            if (v10[2] == 0x9804EDBEDDBCBFF9)
            {
LABEL_47:
              v14 = v10[3];
              goto LABEL_24;
            }
          }
          else
          {
            if (v12 >= *(_QWORD *)&v6)
              v12 %= *(_QWORD *)&v6;
            if (v12 != v8)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_21:
  v14 = operator new();
  *(_QWORD *)(v14 + 16) = "md::ls::WorldIndex]";
  *(_QWORD *)(v14 + 24) = 18;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_OWORD *)(v14 + 48) = 0u;
  *(_OWORD *)(v14 + 64) = 0u;
  *(_OWORD *)(v14 + 80) = 0u;
  *(_OWORD *)(v14 + 96) = 0u;
  *(_OWORD *)(v14 + 112) = 0u;
  *(_OWORD *)(v14 + 128) = 0u;
  *(_DWORD *)(v14 + 144) = 1065353216;
  *(_OWORD *)(v14 + 152) = 0u;
  *(_OWORD *)(v14 + 168) = 0u;
  *(_QWORD *)(v14 + 184) = 0;
  *(_DWORD *)(v14 + 192) = 1065353216;
  *(_OWORD *)(v14 + 200) = 0u;
  *(_OWORD *)(v14 + 216) = 0u;
  *(_QWORD *)(v14 + 232) = 0;
  *(_DWORD *)(v14 + 240) = 1065353216;
  *(_QWORD *)v14 = &off_1E4271058;
  *(_QWORD *)(v14 + 8) = 0x9804EDBEDDBCBFF9;
  *(_QWORD *)(v14 + 248) = a2;
  v15 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v5, 0x9804EDBEDDBCBFF9, &v52);
  v16 = v15[3];
  v15[3] = v14;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v48 = (uint64_t *)0x9804EDBEDDBCBFF9;
  v49 = (uint64_t)"md::ls::WorldIndex]";
  v50 = 18;
  gdc::Registry::_registerStorageDataSignals(a2, 0x9804EDBEDDBCBFF9, (uint64_t)&v48, (uint64_t *)(v14 + 104));
LABEL_24:
  v17 = *(_BYTE *)(a1 + 8);
  v51 = v4;
  v18 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v14 + 32), (uint64_t)&v51);
  if ((v19 & 1) != 0)
  {
    v25 = *(_BYTE **)(v14 + 88);
    v24 = *(_QWORD *)(v14 + 96);
    if ((unint64_t)v25 < v24)
    {
      *v25 = v17;
      v26 = (uint64_t)(v25 + 1);
LABEL_62:
      *(_QWORD *)(v14 + 88) = v26;
      v21 = *(_QWORD *)(v14 + 248);
      goto LABEL_63;
    }
    v27 = *(_BYTE **)(v14 + 80);
    v28 = v25 - v27;
    v29 = v25 - v27 + 1;
    if (v29 < 0)
      goto LABEL_68;
    v30 = v24 - (_QWORD)v27;
    if (2 * v30 > v29)
      v29 = 2 * v30;
    if (v30 >= 0x3FFFFFFFFFFFFFFFLL)
      v31 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v31 = v29;
    if (v31)
      v32 = operator new(v31);
    else
      v32 = 0;
    v33 = &v32[v28];
    v34 = &v32[v31];
    v32[v28] = v17;
    v26 = (uint64_t)&v32[v28 + 1];
    if (v25 == v27)
    {
      v32 += v28;
      goto LABEL_60;
    }
    if (v28 < 8 || (unint64_t)(v27 - v32) < 0x20)
      goto LABEL_57;
    if (v28 >= 0x20)
    {
      v35 = v28 & 0xFFFFFFFFFFFFFFE0;
      v36 = (__int128 *)(v25 - 16);
      v37 = &v32[v25 - 16 - v27];
      v38 = v28 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v39 = *v36;
        *(v37 - 1) = *(v36 - 1);
        *v37 = v39;
        v36 -= 2;
        v37 -= 2;
        v38 -= 32;
      }
      while (v38);
      if (v28 == v35)
        goto LABEL_59;
      if ((v28 & 0x18) == 0)
      {
        v33 -= v35;
        v25 -= v35;
        goto LABEL_57;
      }
    }
    else
    {
      v35 = 0;
    }
    v40 = v35 - (v28 & 0xFFFFFFFFFFFFFFF8);
    v41 = &v25[-v35 - 8];
    v42 = &v32[v41 - v27];
    do
    {
      v43 = *(_QWORD *)v41;
      v41 -= 8;
      *v42-- = v43;
      v40 += 8;
    }
    while (v40);
    if (v28 == (v28 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_59;
    v33 -= v28 & 0xFFFFFFFFFFFFFFF8;
    v25 -= v28 & 0xFFFFFFFFFFFFFFF8;
LABEL_57:
    v44 = v33 - 1;
    do
    {
      v45 = *--v25;
      *v44-- = v45;
    }
    while (v25 != v27);
LABEL_59:
    v25 = *(_BYTE **)(v14 + 80);
LABEL_60:
    *(_QWORD *)(v14 + 80) = v32;
    *(_QWORD *)(v14 + 88) = v26;
    *(_QWORD *)(v14 + 96) = v34;
    if (v25)
      operator delete(v25);
    goto LABEL_62;
  }
  v20 = (_BYTE *)(*(_QWORD *)(v14 + 80) + (((uint64_t)v18 - *(_QWORD *)(v14 + 56)) >> 3));
  *v20 = v17;
  v21 = *(_QWORD *)(v14 + 248);
  if (v20 != *(_BYTE **)(v14 + 88))
  {
    v22 = *(_QWORD **)(v14 + 128);
    if (v22)
    {
      while (1)
      {
        v48 = &v51;
        v49 = 1;
        v52 = v21;
        v23 = v22[6];
        if (!v23)
          break;
        (*(void (**)(uint64_t, unint64_t *, uint64_t **))(*(_QWORD *)v23 + 48))(v23, &v52, &v48);
        v22 = (_QWORD *)*v22;
        if (!v22)
          return;
      }
LABEL_67:
      std::__throw_bad_function_call[abi:nn180100]();
LABEL_68:
      abort();
    }
    return;
  }
LABEL_63:
  v46 = *(_QWORD **)(v14 + 176);
  if (v46)
  {
    while (1)
    {
      v48 = &v51;
      v49 = 1;
      v52 = v21;
      v47 = v46[6];
      if (!v47)
        break;
      (*(void (**)(uint64_t, unint64_t *, uint64_t **))(*(_QWORD *)v47 + 48))(v47, &v52, &v48);
      v46 = (_QWORD *)*v46;
      if (!v46)
        return;
    }
    goto LABEL_67;
  }
}

void sub_19FA2EDFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::WorldIndex>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::WorldIndex>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_BYTE *)(v14 + v7) = *(_BYTE *)--a1[11];
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::WorldIndex>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::WorldIndex>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FlyoverClipPlaneData>(gdc::Entity,md::ls::FlyoverClipPlaneData &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func(_QWORD *result)
{
  *result = &off_1E427F000;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FlyoverClipPlaneData>(gdc::Entity,md::ls::FlyoverClipPlaneData &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E427F000;
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FlyoverClipPlaneData>(gdc::Entity,md::ls::FlyoverClipPlaneData &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __int128 v3;
  __n128 result;

  v2 = (char *)operator new(0x100uLL);
  *(_QWORD *)v2 = &off_1E427F000;
  v2[8] = 0;
  v2[112] = 0;
  if (*(_BYTE *)(a1 + 112))
  {
    *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
    *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
    *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
    *((_QWORD *)v2 + 6) = *(_QWORD *)(a1 + 48);
    *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
    v3 = *(_OWORD *)(a1 + 80);
    *((_OWORD *)v2 + 4) = *(_OWORD *)(a1 + 64);
    *((_OWORD *)v2 + 5) = v3;
    *((_OWORD *)v2 + 6) = *(_OWORD *)(a1 + 96);
    v2[112] = 1;
  }
  *(_OWORD *)(v2 + 184) = *(_OWORD *)(a1 + 184);
  *(_OWORD *)(v2 + 200) = *(_OWORD *)(a1 + 200);
  *(_OWORD *)(v2 + 216) = *(_OWORD *)(a1 + 216);
  *(_OWORD *)(v2 + 232) = *(_OWORD *)(a1 + 232);
  *(_OWORD *)(v2 + 120) = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(v2 + 136) = *(_OWORD *)(a1 + 136);
  *(_OWORD *)(v2 + 152) = *(_OWORD *)(a1 + 152);
  result = *(__n128 *)(a1 + 168);
  *(__n128 *)(v2 + 168) = result;
  *((_QWORD *)v2 + 31) = *(_QWORD *)(a1 + 248);
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FlyoverClipPlaneData>(gdc::Entity,md::ls::FlyoverClipPlaneData &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __n128 result;
  __int128 v10;
  __int128 v11;

  *(_QWORD *)a2 = &off_1E427F000;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  if (*(_BYTE *)(a1 + 112))
  {
    v2 = *(_OWORD *)(a1 + 8);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
    *(_OWORD *)(a2 + 8) = v2;
    v3 = *(_OWORD *)(a1 + 32);
    *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 48);
    *(_OWORD *)(a2 + 32) = v3;
    *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
    v4 = *(_OWORD *)(a1 + 64);
    v5 = *(_OWORD *)(a1 + 96);
    *(_OWORD *)(a2 + 80) = *(_OWORD *)(a1 + 80);
    *(_OWORD *)(a2 + 96) = v5;
    *(_OWORD *)(a2 + 64) = v4;
    *(_BYTE *)(a2 + 112) = 1;
  }
  v6 = *(_OWORD *)(a1 + 120);
  v7 = *(_OWORD *)(a1 + 136);
  v8 = *(_OWORD *)(a1 + 152);
  *(_OWORD *)(a2 + 168) = *(_OWORD *)(a1 + 168);
  *(_OWORD *)(a2 + 152) = v8;
  *(_OWORD *)(a2 + 136) = v7;
  *(_OWORD *)(a2 + 120) = v6;
  result = *(__n128 *)(a1 + 184);
  v10 = *(_OWORD *)(a1 + 200);
  v11 = *(_OWORD *)(a1 + 216);
  *(_OWORD *)(a2 + 232) = *(_OWORD *)(a1 + 232);
  *(_OWORD *)(a2 + 216) = v11;
  *(_OWORD *)(a2 + 200) = v10;
  *(__n128 *)(a2 + 184) = result;
  *(_QWORD *)(a2 + 248) = *(_QWORD *)(a1 + 248);
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FlyoverClipPlaneData>(gdc::Entity,md::ls::FlyoverClipPlaneData &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  _BYTE *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  char *v42;
  _BYTE *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;

  v3 = *(_QWORD *)(a1 + 248);
  v4 = gdc::Registry::storage<md::ls::FlyoverClipPlaneData>(a2);
  v5 = (_QWORD *)v4;
  v6 = *(unsigned __int8 *)(a1 + 112);
  if (*(_BYTE *)(a1 + 112))
  {
    v62 = *(_QWORD *)(a1 + 8);
    v50 = *(_QWORD *)(a1 + 16);
    v51 = *(_QWORD *)(a1 + 24);
    v52 = *(_QWORD *)(a1 + 40);
    v53 = *(_QWORD *)(a1 + 32);
    v54 = *(_QWORD *)(a1 + 48);
    v55 = *(_QWORD *)(a1 + 56);
    v56 = *(_QWORD *)(a1 + 64);
    v57 = *(_QWORD *)(a1 + 72);
    v58 = *(_QWORD *)(a1 + 80);
    v59 = *(_QWORD *)(a1 + 88);
    v7 = 1;
    v60 = *(_QWORD *)(a1 + 96);
    v61 = *(_QWORD *)(a1 + 104);
  }
  else
  {
    v7 = 0;
    v62 = 0;
  }
  v8 = *(_QWORD *)(a1 + 120);
  v9 = *(_QWORD *)(a1 + 128);
  v11 = *(_QWORD *)(a1 + 136);
  v10 = *(_QWORD *)(a1 + 144);
  v13 = *(_QWORD *)(a1 + 152);
  v12 = *(_QWORD *)(a1 + 160);
  v15 = *(_QWORD *)(a1 + 168);
  v14 = *(_QWORD *)(a1 + 176);
  v63 = *(_QWORD *)(a1 + 184);
  v64 = *(_QWORD *)(a1 + 192);
  v65 = *(_QWORD *)(a1 + 200);
  v66 = *(_QWORD *)(a1 + 208);
  v67 = *(_QWORD *)(a1 + 216);
  v68 = *(_QWORD *)(a1 + 224);
  v69 = *(_QWORD *)(a1 + 232);
  v70 = *(_QWORD *)(a1 + 240);
  v71 = v3;
  v16 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v4 + 32), (uint64_t)&v71);
  if ((v17 & 1) != 0)
  {
    v22 = (_BYTE *)v5[11];
    v21 = v5[12];
    if ((unint64_t)v22 >= v21)
    {
      v24 = (_BYTE *)v5[10];
      v25 = 0xEEEEEEEEEEEEEEEFLL * ((v22 - v24) >> 4) + 1;
      if (v25 > 0x111111111111111)
        goto LABEL_46;
      v26 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v21 - (_QWORD)v24) >> 4);
      if (2 * v26 > v25)
        v25 = 2 * v26;
      if (v26 >= 0x88888888888888)
        v27 = 0x111111111111111;
      else
        v27 = v25;
      if (v27)
      {
        if (v27 > 0x111111111111111)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v28 = (char *)operator new(240 * v27);
      }
      else
      {
        v28 = 0;
      }
      v33 = &v28[16 * ((v22 - v24) >> 4)];
      *v33 = 0;
      v33[104] = 0;
      if (v6)
      {
        *(_QWORD *)v33 = v62;
        *((_QWORD *)v33 + 1) = v50;
        *((_QWORD *)v33 + 2) = v51;
        *((_QWORD *)v33 + 3) = v53;
        *((_QWORD *)v33 + 4) = v52;
        *((_QWORD *)v33 + 5) = v54;
        *((_QWORD *)v33 + 6) = v55;
        *((_QWORD *)v33 + 7) = v56;
        *((_QWORD *)v33 + 8) = v57;
        *((_QWORD *)v33 + 9) = v58;
        *((_QWORD *)v33 + 10) = v59;
        *((_QWORD *)v33 + 11) = v60;
        *((_QWORD *)v33 + 12) = v61;
        v33[104] = 1;
      }
      v34 = &v28[16 * ((v22 - v24) >> 4)];
      *((_QWORD *)v34 + 14) = v8;
      *((_QWORD *)v34 + 15) = v9;
      *((_QWORD *)v34 + 16) = v11;
      *((_QWORD *)v34 + 17) = v10;
      *((_QWORD *)v34 + 18) = v13;
      *((_QWORD *)v34 + 19) = v12;
      *((_QWORD *)v34 + 20) = v15;
      *((_QWORD *)v34 + 21) = v14;
      *((_QWORD *)v34 + 22) = v63;
      *((_QWORD *)v34 + 23) = v64;
      *((_QWORD *)v34 + 24) = v65;
      *((_QWORD *)v34 + 25) = v66;
      *((_QWORD *)v34 + 26) = v67;
      *((_QWORD *)v34 + 27) = v68;
      v23 = v33 + 240;
      *((_QWORD *)v34 + 28) = v69;
      *((_QWORD *)v34 + 29) = v70;
      if (v22 != v24)
      {
        v35 = 0;
        do
        {
          v42 = &v33[v35];
          v33[v35 - 240] = 0;
          v43 = &v22[v35];
          v33[v35 - 136] = 0;
          if (v22[v35 - 136])
          {
            v44 = *((_OWORD *)v43 - 15);
            *(_QWORD *)&v33[v35 - 224] = *((_QWORD *)v43 - 28);
            *(_OWORD *)&v33[v35 - 240] = v44;
            v45 = *(_OWORD *)(v43 - 216);
            *((_QWORD *)v42 - 25) = *((_QWORD *)v43 - 25);
            *(_OWORD *)(v42 - 216) = v45;
            *((_QWORD *)v42 - 24) = *((_QWORD *)v43 - 24);
            v46 = *(_OWORD *)(v43 - 184);
            v47 = *(_OWORD *)(v43 - 168);
            *(_OWORD *)(v42 - 152) = *(_OWORD *)(v43 - 152);
            *(_OWORD *)(v42 - 168) = v47;
            *(_OWORD *)(v42 - 184) = v46;
            *(v42 - 136) = 1;
          }
          v36 = *((_OWORD *)v43 - 8);
          v37 = *((_OWORD *)v43 - 7);
          v38 = *((_OWORD *)v43 - 5);
          *((_OWORD *)v42 - 6) = *((_OWORD *)v43 - 6);
          *((_OWORD *)v42 - 5) = v38;
          *((_OWORD *)v42 - 8) = v36;
          *((_OWORD *)v42 - 7) = v37;
          v39 = *((_OWORD *)v43 - 4);
          v40 = *((_OWORD *)v43 - 3);
          v41 = *((_OWORD *)v43 - 1);
          *((_OWORD *)v42 - 2) = *((_OWORD *)v43 - 2);
          *((_OWORD *)v42 - 1) = v41;
          *((_OWORD *)v42 - 4) = v39;
          *((_OWORD *)v42 - 3) = v40;
          v35 -= 240;
        }
        while (&v22[v35] != v24);
        v33 += v35;
        v22 = (_BYTE *)v5[10];
      }
      v5[10] = v33;
      v5[11] = v23;
      v5[12] = &v28[240 * v27];
      if (v22)
        operator delete(v22);
    }
    else
    {
      *v22 = 0;
      v22[104] = 0;
      if (v6)
      {
        *(_QWORD *)v22 = v62;
        *((_QWORD *)v22 + 1) = v50;
        *((_QWORD *)v22 + 2) = v51;
        *((_QWORD *)v22 + 3) = v53;
        *((_QWORD *)v22 + 4) = v52;
        *((_QWORD *)v22 + 5) = v54;
        *((_QWORD *)v22 + 6) = v55;
        *((_QWORD *)v22 + 7) = v56;
        *((_QWORD *)v22 + 8) = v57;
        *((_QWORD *)v22 + 9) = v58;
        *((_QWORD *)v22 + 10) = v59;
        *((_QWORD *)v22 + 11) = v60;
        *((_QWORD *)v22 + 12) = v61;
        v22[104] = 1;
      }
      *((_QWORD *)v22 + 14) = v8;
      *((_QWORD *)v22 + 15) = v9;
      *((_QWORD *)v22 + 16) = v11;
      *((_QWORD *)v22 + 17) = v10;
      *((_QWORD *)v22 + 18) = v13;
      *((_QWORD *)v22 + 19) = v12;
      *((_QWORD *)v22 + 20) = v15;
      *((_QWORD *)v22 + 21) = v14;
      *((_QWORD *)v22 + 22) = v63;
      *((_QWORD *)v22 + 23) = v64;
      *((_QWORD *)v22 + 24) = v65;
      *((_QWORD *)v22 + 25) = v66;
      *((_QWORD *)v22 + 26) = v67;
      *((_QWORD *)v22 + 27) = v68;
      *((_QWORD *)v22 + 28) = v69;
      *((_QWORD *)v22 + 29) = v70;
      v23 = v22 + 240;
    }
    v5[11] = v23;
    v30 = v5[31];
  }
  else
  {
    v18 = v5[10];
    v19 = ((uint64_t)v16 - v5[7]) >> 3;
    v20 = v18 + 240 * v19;
    if (*(unsigned __int8 *)(v20 + 104) == v7)
    {
      if (*(_BYTE *)(v20 + 104))
      {
        *(_QWORD *)(v20 + 32) = v52;
        *(_QWORD *)(v20 + 40) = v54;
        *(_QWORD *)v20 = v62;
        *(_QWORD *)(v20 + 8) = v50;
        *(_QWORD *)(v20 + 16) = v51;
        *(_QWORD *)(v20 + 24) = v53;
        *(_QWORD *)(v20 + 48) = v55;
        *(_QWORD *)(v20 + 56) = v56;
        *(_QWORD *)(v20 + 64) = v57;
        *(_QWORD *)(v20 + 72) = v58;
        *(_QWORD *)(v20 + 80) = v59;
        *(_QWORD *)(v20 + 88) = v60;
        *(_QWORD *)(v20 + 96) = v61;
      }
    }
    else if (*(_BYTE *)(v20 + 104))
    {
      *(_BYTE *)(v20 + 104) = 0;
    }
    else
    {
      *(_QWORD *)v20 = v62;
      *(_QWORD *)(v20 + 8) = v50;
      *(_QWORD *)(v20 + 16) = v51;
      *(_QWORD *)(v20 + 24) = v53;
      *(_QWORD *)(v20 + 32) = v52;
      *(_QWORD *)(v20 + 40) = v54;
      *(_QWORD *)(v20 + 48) = v55;
      *(_QWORD *)(v20 + 56) = v56;
      *(_QWORD *)(v20 + 64) = v57;
      *(_QWORD *)(v20 + 72) = v58;
      *(_QWORD *)(v20 + 80) = v59;
      *(_QWORD *)(v20 + 88) = v60;
      *(_QWORD *)(v20 + 96) = v61;
      *(_BYTE *)(v20 + 104) = 1;
    }
    v29 = (_QWORD *)(v18 + 240 * v19);
    v29[14] = v8;
    v29[15] = v9;
    v29[16] = v11;
    v29[17] = v10;
    v29[18] = v13;
    v29[19] = v12;
    v29[20] = v15;
    v29[21] = v14;
    v29[22] = v63;
    v29[23] = v64;
    v29[24] = v65;
    v29[25] = v66;
    v29[26] = v67;
    v29[27] = v68;
    v29[28] = v69;
    v29[29] = v70;
    v30 = v5[31];
    if (v20 != v5[11])
    {
      v31 = (_QWORD *)v5[16];
      if (v31)
      {
        while (1)
        {
          v73 = &v71;
          v74 = 1;
          v72 = v30;
          v32 = v31[6];
          if (!v32)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v32 + 48))(v32, &v72, &v73);
          v31 = (_QWORD *)*v31;
          if (!v31)
            return;
        }
LABEL_45:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_46:
        abort();
      }
      return;
    }
  }
  v48 = (_QWORD *)v5[22];
  if (v48)
  {
    while (1)
    {
      v73 = &v71;
      v74 = 1;
      v72 = v30;
      v49 = v48[6];
      if (!v49)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v49 + 48))(v49, &v72, &v73);
      v48 = (_QWORD *)*v48;
      if (!v48)
        return;
    }
    goto LABEL_45;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ModelTransformData>(gdc::Entity,md::ls::ModelTransformData &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ModelTransformData>(gdc::Entity,md::ls::ModelTransformData &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &off_1E427EC58;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ModelTransformData>(gdc::Entity,md::ls::ModelTransformData &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_1E427EC58;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ModelTransformData>(gdc::Entity,md::ls::ModelTransformData &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  _QWORD *v13;
  char v14;
  _DWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  _DWORD *v21;
  char *v22;
  unint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  _QWORD *v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;

  v3 = *(_QWORD *)(a1 + 56);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::ModelTransformData>(a2);
  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  v7 = *(_DWORD *)(a1 + 24);
  v36 = *(_DWORD *)(a1 + 20);
  v37 = *(_DWORD *)(a1 + 28);
  v8 = *(_DWORD *)(a1 + 32);
  v38 = *(_DWORD *)(a1 + 36);
  v39 = *(_DWORD *)(a1 + 12);
  v10 = *(_DWORD *)(a1 + 40);
  v9 = *(_DWORD *)(a1 + 44);
  v12 = *(_DWORD *)(a1 + 48);
  v11 = *(_DWORD *)(a1 + 52);
  v40 = v3;
  v13 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v40);
  if ((v14 & 1) != 0)
  {
    v20 = (char *)v4[11];
    v19 = v4[12];
    if ((unint64_t)v20 >= v19)
    {
      v22 = (char *)v4[10];
      v23 = 0xAAAAAAAAAAAAAAABLL * ((v20 - v22) >> 4) + 1;
      v25 = v6;
      v24 = v11;
      v26 = v39;
      v27 = v5;
      if (v23 > 0x555555555555555)
        goto LABEL_30;
      v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - (_QWORD)v22) >> 4);
      if (2 * v28 > v23)
        v23 = 2 * v28;
      if (v28 >= 0x2AAAAAAAAAAAAAALL)
        v29 = 0x555555555555555;
      else
        v29 = v23;
      if (v29)
      {
        if (v29 > 0x555555555555555)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v30 = (char *)operator new(48 * v29);
        v25 = v6;
        v24 = v11;
        v26 = v39;
        v27 = v5;
      }
      else
      {
        v30 = 0;
      }
      v31 = &v30[16 * ((v20 - v22) >> 4)];
      *(_DWORD *)v31 = v27;
      *((_DWORD *)v31 + 1) = v26;
      *((_DWORD *)v31 + 2) = v25;
      *((_DWORD *)v31 + 3) = v36;
      *((_DWORD *)v31 + 4) = v7;
      *((_DWORD *)v31 + 5) = v37;
      *((_DWORD *)v31 + 6) = v8;
      *((_DWORD *)v31 + 7) = v38;
      *((_DWORD *)v31 + 8) = v10;
      *((_DWORD *)v31 + 9) = v9;
      *((_DWORD *)v31 + 10) = v12;
      *((_DWORD *)v31 + 11) = v24;
      v21 = v31 + 48;
      if (v20 != v22)
      {
        do
        {
          v32 = *((_OWORD *)v20 - 3);
          v33 = *((_OWORD *)v20 - 1);
          *((_OWORD *)v31 - 2) = *((_OWORD *)v20 - 2);
          *((_OWORD *)v31 - 1) = v33;
          *((_OWORD *)v31 - 3) = v32;
          v31 -= 48;
          v20 -= 48;
        }
        while (v20 != v22);
        v20 = (char *)v4[10];
      }
      v4[10] = (uint64_t)v31;
      v4[11] = (uint64_t)v21;
      v4[12] = (uint64_t)&v30[48 * v29];
      if (v20)
        operator delete(v20);
    }
    else
    {
      *(_DWORD *)v20 = v5;
      *((_DWORD *)v20 + 1) = v39;
      *((_DWORD *)v20 + 2) = v6;
      *((_DWORD *)v20 + 3) = v36;
      *((_DWORD *)v20 + 4) = v7;
      *((_DWORD *)v20 + 5) = v37;
      *((_DWORD *)v20 + 6) = v8;
      *((_DWORD *)v20 + 7) = v38;
      *((_DWORD *)v20 + 8) = v10;
      *((_DWORD *)v20 + 9) = v9;
      v21 = v20 + 48;
      *((_DWORD *)v20 + 10) = v12;
      *((_DWORD *)v20 + 11) = v11;
    }
    v4[11] = (uint64_t)v21;
    v16 = v4[31];
  }
  else
  {
    v15 = (_DWORD *)(v4[10] + 48 * (((uint64_t)v13 - v4[7]) >> 3));
    *v15 = v5;
    v15[1] = v39;
    v15[2] = v6;
    v15[3] = v36;
    v15[4] = v7;
    v15[5] = v37;
    v15[6] = v8;
    v15[7] = v38;
    v15[8] = v10;
    v15[9] = v9;
    v15[10] = v12;
    v15[11] = v11;
    v16 = v4[31];
    if (v15 != (_DWORD *)v4[11])
    {
      v17 = (_QWORD *)v4[16];
      if (v17)
      {
        while (1)
        {
          v42 = &v40;
          v43 = 1;
          v41 = v16;
          v18 = v17[6];
          if (!v18)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v18 + 48))(v18, &v41, &v42);
          v17 = (_QWORD *)*v17;
          if (!v17)
            return;
        }
LABEL_29:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_30:
        abort();
      }
      return;
    }
  }
  v34 = (_QWORD *)v4[22];
  if (v34)
  {
    while (1)
    {
      v42 = &v40;
      v43 = 1;
      v41 = v16;
      v35 = v34[6];
      if (!v35)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v35 + 48))(v35, &v41, &v42);
      v34 = (_QWORD *)*v34;
      if (!v34)
        return;
    }
    goto LABEL_29;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IgnoreCulling>(gdc::Entity,md::ls::IgnoreCulling &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IgnoreCulling>(gdc::Entity,md::ls::IgnoreCulling &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427DBC0;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IgnoreCulling>(gdc::Entity,md::ls::IgnoreCulling &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427DBC0;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IgnoreCulling>(gdc::Entity,md::ls::IgnoreCulling &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::IgnoreCulling>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MeshLayerTypeV>(gdc::Entity,md::ls::MeshLayerTypeV &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MeshLayerTypeV>(gdc::Entity,md::ls::MeshLayerTypeV &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427DF20;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MeshLayerTypeV>(gdc::Entity,md::ls::MeshLayerTypeV &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427DF20;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MeshLayerTypeV>(gdc::Entity,md::ls::MeshLayerTypeV &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  char v5;
  _QWORD *v6;
  char v7;
  _BYTE *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  size_t v19;
  char *v20;
  char *v21;
  char *v22;
  unint64_t v23;
  __int128 *v24;
  char *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t v28;
  char *v29;
  int64_t v30;
  uint64_t v31;
  char *v32;
  char v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;

  v3 = *(_QWORD *)(a1 + 12);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::MeshLayerTypeV>(a2);
  v5 = *(_BYTE *)(a1 + 8);
  v36 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v36);
  if ((v7 & 1) != 0)
  {
    v13 = (_BYTE *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 < v12)
    {
      *v13 = v5;
      v14 = (uint64_t)(v13 + 1);
LABEL_37:
      v4[11] = v14;
      v9 = v4[31];
      goto LABEL_38;
    }
    v15 = (_BYTE *)v4[10];
    v16 = v13 - v15;
    v17 = v13 - v15 + 1;
    if (v17 < 0)
      goto LABEL_43;
    v18 = v12 - (_QWORD)v15;
    if (2 * v18 > v17)
      v17 = 2 * v18;
    if (v18 >= 0x3FFFFFFFFFFFFFFFLL)
      v19 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v19 = v17;
    if (v19)
      v20 = (char *)operator new(v19);
    else
      v20 = 0;
    v21 = &v20[v16];
    v22 = &v20[v19];
    v20[v16] = v5;
    v14 = (uint64_t)&v20[v16 + 1];
    if (v13 == v15)
    {
LABEL_35:
      v4[10] = (uint64_t)v21;
      v4[11] = v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
      goto LABEL_37;
    }
    if (v16 < 8 || (unint64_t)(v15 - v20) < 0x20)
      goto LABEL_32;
    if (v16 >= 0x20)
    {
      v23 = v16 & 0xFFFFFFFFFFFFFFE0;
      v24 = (__int128 *)(v13 - 16);
      v25 = &v20[v13 - 16 - v15];
      v26 = v16 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v27 = *v24;
        *((_OWORD *)v25 - 1) = *(v24 - 1);
        *(_OWORD *)v25 = v27;
        v25 -= 32;
        v24 -= 2;
        v26 -= 32;
      }
      while (v26);
      if (v16 == v23)
        goto LABEL_34;
      if ((v16 & 0x18) == 0)
      {
        v21 -= v23;
        v13 -= v23;
        goto LABEL_32;
      }
    }
    else
    {
      v23 = 0;
    }
    v28 = v23 - (v16 & 0xFFFFFFFFFFFFFFF8);
    v29 = &v13[-v23 - 8];
    v30 = v29 - v15;
    do
    {
      v31 = *(_QWORD *)v29;
      v29 -= 8;
      *(_QWORD *)&v20[v30] = v31;
      v30 -= 8;
      v28 += 8;
    }
    while (v28);
    if (v16 == (v16 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_34;
    v21 -= v16 & 0xFFFFFFFFFFFFFFF8;
    v13 -= v16 & 0xFFFFFFFFFFFFFFF8;
LABEL_32:
    v32 = v21 - 1;
    do
    {
      v33 = *--v13;
      *v32-- = v33;
    }
    while (v13 != v15);
LABEL_34:
    v21 = v20;
    goto LABEL_35;
  }
  v8 = (_BYTE *)(v4[10] + (((uint64_t)v6 - v4[7]) >> 3));
  *v8 = v5;
  v9 = v4[31];
  if (v8 != (_BYTE *)v4[11])
  {
    v10 = (_QWORD *)v4[16];
    if (v10)
    {
      while (1)
      {
        v38 = &v36;
        v39 = 1;
        v37 = v9;
        v11 = v10[6];
        if (!v11)
          break;
        (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v37, &v38);
        v10 = (_QWORD *)*v10;
        if (!v10)
          return;
      }
LABEL_42:
      std::__throw_bad_function_call[abi:nn180100]();
LABEL_43:
      abort();
    }
    return;
  }
LABEL_38:
  v34 = (_QWORD *)v4[22];
  if (v34)
  {
    while (1)
    {
      v38 = &v36;
      v39 = 1;
      v37 = v9;
      v35 = v34[6];
      if (!v35)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v35 + 48))(v35, &v37, &v38);
      v34 = (_QWORD *)*v34;
      if (!v34)
        return;
    }
    goto LABEL_42;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::BoundData>(gdc::Entity,md::BoundData &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::BoundData>(gdc::Entity,md::BoundData &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E4282060;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::BoundData>(gdc::Entity,md::BoundData &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E4282060;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::BoundData>(gdc::Entity,md::BoundData &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  _QWORD *v11;
  char v12;
  _DWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  _DWORD *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  __int128 v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = (uint64_t *)gdc::Registry::storage<md::BoundData>(a2);
  v6 = *(_DWORD *)(a1 + 8);
  v5 = *(_DWORD *)(a1 + 12);
  v8 = *(_DWORD *)(a1 + 16);
  v7 = *(_DWORD *)(a1 + 20);
  v10 = *(_DWORD *)(a1 + 24);
  v9 = *(_DWORD *)(a1 + 28);
  v29 = v3;
  v11 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v29);
  if ((v12 & 1) != 0)
  {
    v18 = (char *)v4[11];
    v17 = v4[12];
    if ((unint64_t)v18 >= v17)
    {
      v20 = (char *)v4[10];
      v21 = 0xAAAAAAAAAAAAAAABLL * ((v18 - v20) >> 3) + 1;
      if (v21 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_30;
      v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - (_QWORD)v20) >> 3);
      if (2 * v22 > v21)
        v21 = 2 * v22;
      if (v22 >= 0x555555555555555)
        v23 = 0xAAAAAAAAAAAAAAALL;
      else
        v23 = v21;
      if (v23)
      {
        if (v23 > 0xAAAAAAAAAAAAAAALL)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v24 = (char *)operator new(24 * v23);
      }
      else
      {
        v24 = 0;
      }
      v25 = &v24[8 * ((v18 - v20) >> 3)];
      *(_DWORD *)v25 = v6;
      *((_DWORD *)v25 + 1) = v5;
      *((_DWORD *)v25 + 2) = v8;
      *((_DWORD *)v25 + 3) = v7;
      *((_DWORD *)v25 + 4) = v10;
      *((_DWORD *)v25 + 5) = v9;
      v19 = v25 + 24;
      if (v18 != v20)
      {
        do
        {
          v26 = *(_OWORD *)(v18 - 24);
          *((_QWORD *)v25 - 1) = *((_QWORD *)v18 - 1);
          *(_OWORD *)(v25 - 24) = v26;
          v25 -= 24;
          v18 -= 24;
        }
        while (v18 != v20);
        v18 = (char *)v4[10];
      }
      v4[10] = (uint64_t)v25;
      v4[11] = (uint64_t)v19;
      v4[12] = (uint64_t)&v24[24 * v23];
      if (v18)
        operator delete(v18);
    }
    else
    {
      *(_DWORD *)v18 = v6;
      *((_DWORD *)v18 + 1) = v5;
      *((_DWORD *)v18 + 2) = v8;
      *((_DWORD *)v18 + 3) = v7;
      v19 = v18 + 24;
      *((_DWORD *)v18 + 4) = v10;
      *((_DWORD *)v18 + 5) = v9;
    }
    v4[11] = (uint64_t)v19;
    v14 = v4[31];
  }
  else
  {
    v13 = (_DWORD *)(v4[10] + 24 * (((uint64_t)v11 - v4[7]) >> 3));
    *v13 = v6;
    v13[1] = v5;
    v13[2] = v8;
    v13[3] = v7;
    v13[4] = v10;
    v13[5] = v9;
    v14 = v4[31];
    if (v13 != (_DWORD *)v4[11])
    {
      v15 = (_QWORD *)v4[16];
      if (v15)
      {
        while (1)
        {
          v31 = &v29;
          v32 = 1;
          v30 = v14;
          v16 = v15[6];
          if (!v16)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v16 + 48))(v16, &v30, &v31);
          v15 = (_QWORD *)*v15;
          if (!v15)
            return;
        }
LABEL_29:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_30:
        abort();
      }
      return;
    }
  }
  v27 = (_QWORD *)v4[22];
  if (v27)
  {
    while (1)
    {
      v31 = &v29;
      v32 = 1;
      v30 = v14;
      v28 = v27[6];
      if (!v28)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v28 + 48))(v28, &v30, &v31);
      v27 = (_QWORD *)*v27;
      if (!v27)
        return;
    }
    goto LABEL_29;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IsFlyoverRenderable>(gdc::Entity,md::ls::IsFlyoverRenderable &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IsFlyoverRenderable>(gdc::Entity,md::ls::IsFlyoverRenderable &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427EE50;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IsFlyoverRenderable>(gdc::Entity,md::ls::IsFlyoverRenderable &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427EE50;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IsFlyoverRenderable>(gdc::Entity,md::ls::IsFlyoverRenderable &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  int8x8_t v5;
  uint8x8_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  size_t v28;
  char *v29;
  char *v30;
  char *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v3 = *(_QWORD *)(a1 + 12);
  v38 = 0x515C13B9881C7608;
  v4 = (uint64_t *)(a2 + 120);
  v5 = *(int8x8_t *)(a2 + 128);
  if (v5)
  {
    v6 = (uint8x8_t)vcnt_s8(v5);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      v7 = 0x515C13B9881C7608;
      if (*(_QWORD *)&v5 <= 0x515C13B9881C7608uLL)
        v7 = 0x515C13B9881C7608uLL % *(_QWORD *)&v5;
    }
    else
    {
      v7 = (*(_QWORD *)&v5 - 1) & 0x515C13B9881C7608;
    }
    v8 = *(_QWORD **)(*v4 + 8 * v7);
    if (v8)
    {
      v9 = (_QWORD *)*v8;
      if (v9)
      {
        if (v6.u32[0] < 2uLL)
        {
          v10 = *(_QWORD *)&v5 - 1;
          while (1)
          {
            v12 = v9[1];
            if (v12 == 0x515C13B9881C7608)
            {
              if (v9[2] == 0x515C13B9881C7608)
                goto LABEL_50;
            }
            else if ((v12 & v10) != v7)
            {
              goto LABEL_21;
            }
            v9 = (_QWORD *)*v9;
            if (!v9)
              goto LABEL_21;
          }
        }
        do
        {
          v11 = v9[1];
          if (v11 == 0x515C13B9881C7608)
          {
            if (v9[2] == 0x515C13B9881C7608)
            {
LABEL_50:
              v13 = v9[3];
              goto LABEL_24;
            }
          }
          else
          {
            if (v11 >= *(_QWORD *)&v5)
              v11 %= *(_QWORD *)&v5;
            if (v11 != v7)
              break;
          }
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
    }
  }
LABEL_21:
  v13 = operator new();
  *(_QWORD *)(v13 + 16) = "md::ls::IsFlyoverRenderable]";
  *(_QWORD *)(v13 + 24) = 27;
  *(_OWORD *)(v13 + 32) = 0u;
  *(_OWORD *)(v13 + 48) = 0u;
  *(_OWORD *)(v13 + 64) = 0u;
  *(_OWORD *)(v13 + 80) = 0u;
  *(_OWORD *)(v13 + 96) = 0u;
  *(_OWORD *)(v13 + 112) = 0u;
  *(_OWORD *)(v13 + 128) = 0u;
  *(_DWORD *)(v13 + 144) = 1065353216;
  *(_OWORD *)(v13 + 152) = 0u;
  *(_OWORD *)(v13 + 168) = 0u;
  *(_QWORD *)(v13 + 184) = 0;
  *(_DWORD *)(v13 + 192) = 1065353216;
  *(_OWORD *)(v13 + 200) = 0u;
  *(_OWORD *)(v13 + 216) = 0u;
  *(_QWORD *)(v13 + 232) = 0;
  *(_DWORD *)(v13 + 240) = 1065353216;
  *(_QWORD *)v13 = &off_1E42722E8;
  *(_QWORD *)(v13 + 8) = 0x515C13B9881C7608;
  *(_QWORD *)(v13 + 248) = a2;
  v14 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v4, 0x515C13B9881C7608uLL, &v38);
  v15 = v14[3];
  v14[3] = v13;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v34 = 0x515C13B9881C7608;
  v35 = (uint64_t)"md::ls::IsFlyoverRenderable]";
  v36 = 27;
  gdc::Registry::_registerStorageDataSignals(a2, 0x515C13B9881C7608, (uint64_t)&v34, (uint64_t *)(v13 + 104));
LABEL_24:
  v37 = v3;
  v16 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v13 + 32), (uint64_t)&v37);
  if ((v17 & 1) != 0)
  {
    v22 = *(_BYTE **)(v13 + 88);
    v21 = *(_QWORD *)(v13 + 96);
    if ((unint64_t)v22 >= v21)
    {
      v24 = *(char **)(v13 + 80);
      v25 = v22 - v24;
      v26 = v22 - v24 + 1;
      if (v26 < 0)
        goto LABEL_52;
      v27 = v21 - (_QWORD)v24;
      if (2 * v27 > v26)
        v26 = 2 * v27;
      if (v27 >= 0x3FFFFFFFFFFFFFFFLL)
        v28 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v28 = v26;
      if (v28)
        v29 = (char *)operator new(v28);
      else
        v29 = 0;
      v30 = &v29[v28];
      v23 = (uint64_t)&v29[v25 + 1];
      v31 = (char *)(v24 - v22);
      if (v24 == v22)
        v31 = 0;
      *(_QWORD *)(v13 + 80) = &v29[v25 + (_QWORD)v31];
      *(_QWORD *)(v13 + 88) = v23;
      *(_QWORD *)(v13 + 96) = v30;
      if (v24)
        operator delete(v24);
    }
    else
    {
      v23 = (uint64_t)(v22 + 1);
    }
    *(_QWORD *)(v13 + 88) = v23;
    v18 = *(_QWORD *)(v13 + 248);
  }
  else
  {
    v18 = *(_QWORD *)(v13 + 248);
    if (*(_QWORD *)(v13 + 80) + (((uint64_t)v16 - *(_QWORD *)(v13 + 56)) >> 3) != *(_QWORD *)(v13 + 88))
    {
      v19 = *(_QWORD **)(v13 + 128);
      if (v19)
      {
        while (1)
        {
          v34 = (uint64_t)&v37;
          v35 = 1;
          v38 = v18;
          v20 = v19[6];
          if (!v20)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v20 + 48))(v20, &v38, &v34);
          v19 = (_QWORD *)*v19;
          if (!v19)
            return;
        }
LABEL_51:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_52:
        abort();
      }
      return;
    }
  }
  v32 = *(_QWORD **)(v13 + 176);
  if (v32)
  {
    while (1)
    {
      v34 = (uint64_t)&v37;
      v35 = 1;
      v38 = v18;
      v33 = v32[6];
      if (!v33)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v33 + 48))(v33, &v38, &v34);
      v32 = (_QWORD *)*v32;
      if (!v32)
        return;
    }
    goto LABEL_51;
  }
}

void sub_19FA305B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::IsFlyoverRenderable>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::IsFlyoverRenderable>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::IsFlyoverRenderable>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::IsFlyoverRenderable>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FlyoverInstance>(gdc::Entity,md::ls::FlyoverInstance &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FlyoverInstance>(gdc::Entity,md::ls::FlyoverInstance &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427E160;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FlyoverInstance>(gdc::Entity,md::ls::FlyoverInstance &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427E160;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FlyoverInstance>(gdc::Entity,md::ls::FlyoverInstance &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::FlyoverInstance>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::GlobeMatrix>(gdc::Entity,md::ls::GlobeMatrix &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::GlobeMatrix>(gdc::Entity,md::ls::GlobeMatrix &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427D860;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::GlobeMatrix>(gdc::Entity,md::ls::GlobeMatrix &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427D860;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::GlobeMatrix>(gdc::Entity,md::ls::GlobeMatrix &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::GlobeMatrix>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_36;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 == v15)
      {
        v15 = v13;
      }
      else
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_40;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_40;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
          v15 = (char *)v4[10];
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + v4[10] - v4[7]);
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_QWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_35;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::TileType>(gdc::Entity,md::ls::TileType &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::TileType>(gdc::Entity,md::ls::TileType &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4281EB0;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::TileType>(gdc::Entity,md::ls::TileType &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E4281EB0;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::TileType>(gdc::Entity,md::ls::TileType &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  char v5;

  v3 = *(_QWORD *)(a1 + 12);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::TileType>(a2);
  v5 = *(_BYTE *)(a1 + 8);
  gdc::ComponentStorageWrapper<md::components::Visibility>::emplace(v4, v3, &v5);
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::TransformConstantDataHandle>(gdc::Entity,md::ls::TransformConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::TransformConstantDataHandle>(gdc::Entity,md::ls::TransformConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E4280998;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::TransformConstantDataHandle>(gdc::Entity,md::ls::TransformConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E4280998;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::TransformConstantDataHandle>(gdc::Entity,md::ls::TransformConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::TransformConstantDataHandle>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_36;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 == v15)
      {
        v15 = v13;
      }
      else
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_40;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_40;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
          v15 = (char *)v4[10];
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + v4[10] - v4[7]);
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_QWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_35;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ViewConstantDataHandle>(gdc::Entity,md::ls::ViewConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ViewConstantDataHandle>(gdc::Entity,md::ls::ViewConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427FA68;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ViewConstantDataHandle>(gdc::Entity,md::ls::ViewConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427FA68;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ViewConstantDataHandle>(gdc::Entity,md::ls::ViewConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::ViewConstantDataHandle>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_36;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 == v15)
      {
        v15 = v13;
      }
      else
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_40;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_40;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
          v15 = (char *)v4[10];
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + v4[10] - v4[7]);
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_QWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_35;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SharedTileMatrix>(gdc::Entity,md::ls::SharedTileMatrix &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SharedTileMatrix>(gdc::Entity,md::ls::SharedTileMatrix &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427E5E0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SharedTileMatrix>(gdc::Entity,md::ls::SharedTileMatrix &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427E5E0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SharedTileMatrix>(gdc::Entity,md::ls::SharedTileMatrix &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::SharedTileMatrix>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_36;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 == v15)
      {
        v15 = v13;
      }
      else
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_40;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_40;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
          v15 = (char *)v4[10];
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + v4[10] - v4[7]);
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_QWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_35;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::TileBounds>(gdc::Entity,md::ls::TileBounds &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::TileBounds>(gdc::Entity,md::ls::TileBounds &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E427D6F8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::TileBounds>(gdc::Entity,md::ls::TileBounds &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E427D6F8;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::TileBounds>(gdc::Entity,md::ls::TileBounds &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  __int128 v5;
  _OWORD v6[2];

  v3 = *(_QWORD *)(a1 + 40);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::TileBounds>(a2);
  v5 = *(_OWORD *)(a1 + 24);
  v6[0] = *(_OWORD *)(a1 + 8);
  v6[1] = v5;
  gdc::ComponentStorageWrapper<md::ls::TileBounds>::emplace(v4, v3, (uint64_t)v6);
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderablePendingProcessing>(gdc::Entity,md::ls::RenderablePendingProcessing &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderablePendingProcessing>(gdc::Entity,md::ls::RenderablePendingProcessing &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42808C0;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderablePendingProcessing>(gdc::Entity,md::ls::RenderablePendingProcessing &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E42808C0;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderablePendingProcessing>(gdc::Entity,md::ls::RenderablePendingProcessing &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  char v5;
  _QWORD *v6;
  char v7;
  _BYTE *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  size_t v19;
  char *v20;
  char *v21;
  char *v22;
  unint64_t v23;
  __int128 *v24;
  char *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t v28;
  char *v29;
  int64_t v30;
  uint64_t v31;
  char *v32;
  char v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;

  v3 = *(_QWORD *)(a1 + 12);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::RenderablePendingProcessing>(a2);
  v5 = *(_BYTE *)(a1 + 8);
  v36 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v36);
  if ((v7 & 1) != 0)
  {
    v13 = (_BYTE *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 < v12)
    {
      *v13 = v5;
      v14 = (uint64_t)(v13 + 1);
LABEL_37:
      v4[11] = v14;
      v9 = v4[31];
      goto LABEL_38;
    }
    v15 = (_BYTE *)v4[10];
    v16 = v13 - v15;
    v17 = v13 - v15 + 1;
    if (v17 < 0)
      goto LABEL_43;
    v18 = v12 - (_QWORD)v15;
    if (2 * v18 > v17)
      v17 = 2 * v18;
    if (v18 >= 0x3FFFFFFFFFFFFFFFLL)
      v19 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v19 = v17;
    if (v19)
      v20 = (char *)operator new(v19);
    else
      v20 = 0;
    v21 = &v20[v16];
    v22 = &v20[v19];
    v20[v16] = v5;
    v14 = (uint64_t)&v20[v16 + 1];
    if (v13 == v15)
    {
LABEL_35:
      v4[10] = (uint64_t)v21;
      v4[11] = v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
      goto LABEL_37;
    }
    if (v16 < 8 || (unint64_t)(v15 - v20) < 0x20)
      goto LABEL_32;
    if (v16 >= 0x20)
    {
      v23 = v16 & 0xFFFFFFFFFFFFFFE0;
      v24 = (__int128 *)(v13 - 16);
      v25 = &v20[v13 - 16 - v15];
      v26 = v16 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v27 = *v24;
        *((_OWORD *)v25 - 1) = *(v24 - 1);
        *(_OWORD *)v25 = v27;
        v25 -= 32;
        v24 -= 2;
        v26 -= 32;
      }
      while (v26);
      if (v16 == v23)
        goto LABEL_34;
      if ((v16 & 0x18) == 0)
      {
        v21 -= v23;
        v13 -= v23;
        goto LABEL_32;
      }
    }
    else
    {
      v23 = 0;
    }
    v28 = v23 - (v16 & 0xFFFFFFFFFFFFFFF8);
    v29 = &v13[-v23 - 8];
    v30 = v29 - v15;
    do
    {
      v31 = *(_QWORD *)v29;
      v29 -= 8;
      *(_QWORD *)&v20[v30] = v31;
      v30 -= 8;
      v28 += 8;
    }
    while (v28);
    if (v16 == (v16 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_34;
    v21 -= v16 & 0xFFFFFFFFFFFFFFF8;
    v13 -= v16 & 0xFFFFFFFFFFFFFFF8;
LABEL_32:
    v32 = v21 - 1;
    do
    {
      v33 = *--v13;
      *v32-- = v33;
    }
    while (v13 != v15);
LABEL_34:
    v21 = v20;
    goto LABEL_35;
  }
  v8 = (_BYTE *)(v4[10] + (((uint64_t)v6 - v4[7]) >> 3));
  *v8 = v5;
  v9 = v4[31];
  if (v8 != (_BYTE *)v4[11])
  {
    v10 = (_QWORD *)v4[16];
    if (v10)
    {
      while (1)
      {
        v38 = &v36;
        v39 = 1;
        v37 = v9;
        v11 = v10[6];
        if (!v11)
          break;
        (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v37, &v38);
        v10 = (_QWORD *)*v10;
        if (!v10)
          return;
      }
LABEL_42:
      std::__throw_bad_function_call[abi:nn180100]();
LABEL_43:
      abort();
    }
    return;
  }
LABEL_38:
  v34 = (_QWORD *)v4[22];
  if (v34)
  {
    while (1)
    {
      v38 = &v36;
      v39 = 1;
      v37 = v9;
      v35 = v34[6];
      if (!v35)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v35 + 48))(v35, &v37, &v38);
      v34 = (_QWORD *)*v34;
      if (!v34)
        return;
    }
    goto LABEL_42;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MeshRenderableID>(gdc::Entity,md::ls::MeshRenderableID &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MeshRenderableID>(gdc::Entity,md::ls::MeshRenderableID &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427E3E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MeshRenderableID>(gdc::Entity,md::ls::MeshRenderableID &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427E3E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MeshRenderableID>(gdc::Entity,md::ls::MeshRenderableID &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::MeshRenderableID>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_34;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 != v15)
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_38;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_38;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_38:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + v4[10] - v4[7]);
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_QWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_33:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_34:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_33;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PendingProcessing>(gdc::Entity,md::ls::PendingProcessing &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PendingProcessing>(gdc::Entity,md::ls::PendingProcessing &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427EA60;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PendingProcessing>(gdc::Entity,md::ls::PendingProcessing &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427EA60;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PendingProcessing>(gdc::Entity,md::ls::PendingProcessing &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  char v5;
  _QWORD *v6;
  char v7;
  _BYTE *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  size_t v19;
  char *v20;
  char *v21;
  char *v22;
  unint64_t v23;
  __int128 *v24;
  char *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t v28;
  char *v29;
  int64_t v30;
  uint64_t v31;
  char *v32;
  char v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;

  v3 = *(_QWORD *)(a1 + 12);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::PendingProcessing>(a2);
  v5 = *(_BYTE *)(a1 + 8);
  v36 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v36);
  if ((v7 & 1) != 0)
  {
    v13 = (_BYTE *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 < v12)
    {
      *v13 = v5;
      v14 = (uint64_t)(v13 + 1);
LABEL_37:
      v4[11] = v14;
      v9 = v4[31];
      goto LABEL_38;
    }
    v15 = (_BYTE *)v4[10];
    v16 = v13 - v15;
    v17 = v13 - v15 + 1;
    if (v17 < 0)
      goto LABEL_43;
    v18 = v12 - (_QWORD)v15;
    if (2 * v18 > v17)
      v17 = 2 * v18;
    if (v18 >= 0x3FFFFFFFFFFFFFFFLL)
      v19 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v19 = v17;
    if (v19)
      v20 = (char *)operator new(v19);
    else
      v20 = 0;
    v21 = &v20[v16];
    v22 = &v20[v19];
    v20[v16] = v5;
    v14 = (uint64_t)&v20[v16 + 1];
    if (v13 == v15)
    {
LABEL_35:
      v4[10] = (uint64_t)v21;
      v4[11] = v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
      goto LABEL_37;
    }
    if (v16 < 8 || (unint64_t)(v15 - v20) < 0x20)
      goto LABEL_32;
    if (v16 >= 0x20)
    {
      v23 = v16 & 0xFFFFFFFFFFFFFFE0;
      v24 = (__int128 *)(v13 - 16);
      v25 = &v20[v13 - 16 - v15];
      v26 = v16 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v27 = *v24;
        *((_OWORD *)v25 - 1) = *(v24 - 1);
        *(_OWORD *)v25 = v27;
        v25 -= 32;
        v24 -= 2;
        v26 -= 32;
      }
      while (v26);
      if (v16 == v23)
        goto LABEL_34;
      if ((v16 & 0x18) == 0)
      {
        v21 -= v23;
        v13 -= v23;
        goto LABEL_32;
      }
    }
    else
    {
      v23 = 0;
    }
    v28 = v23 - (v16 & 0xFFFFFFFFFFFFFFF8);
    v29 = &v13[-v23 - 8];
    v30 = v29 - v15;
    do
    {
      v31 = *(_QWORD *)v29;
      v29 -= 8;
      *(_QWORD *)&v20[v30] = v31;
      v30 -= 8;
      v28 += 8;
    }
    while (v28);
    if (v16 == (v16 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_34;
    v21 -= v16 & 0xFFFFFFFFFFFFFFF8;
    v13 -= v16 & 0xFFFFFFFFFFFFFFF8;
LABEL_32:
    v32 = v21 - 1;
    do
    {
      v33 = *--v13;
      *v32-- = v33;
    }
    while (v13 != v15);
LABEL_34:
    v21 = v20;
    goto LABEL_35;
  }
  v8 = (_BYTE *)(v4[10] + (((uint64_t)v6 - v4[7]) >> 3));
  *v8 = v5;
  v9 = v4[31];
  if (v8 != (_BYTE *)v4[11])
  {
    v10 = (_QWORD *)v4[16];
    if (v10)
    {
      while (1)
      {
        v38 = &v36;
        v39 = 1;
        v37 = v9;
        v11 = v10[6];
        if (!v11)
          break;
        (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v37, &v38);
        v10 = (_QWORD *)*v10;
        if (!v10)
          return;
      }
LABEL_42:
      std::__throw_bad_function_call[abi:nn180100]();
LABEL_43:
      abort();
    }
    return;
  }
LABEL_38:
  v34 = (_QWORD *)v4[22];
  if (v34)
  {
    while (1)
    {
      v38 = &v36;
      v39 = 1;
      v37 = v9;
      v35 = v34[6];
      if (!v35)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v35 + 48))(v35, &v37, &v38);
      v34 = (_QWORD *)*v34;
      if (!v34)
        return;
    }
    goto LABEL_42;
  }
}

void std::__function::__func<md::ita::PrepareFlyoverTransformConstantDataHandle::operator()(ecs2::Query<md::ls::FlyoverCommonTransformConstantDataHandle &,md::ls::ModelTransformData const&,md::ls::GlobeMatrix const&>)::$_0,std::allocator<md::ita::PrepareFlyoverTransformConstantDataHandle::operator()(ecs2::Query<md::ls::FlyoverCommonTransformConstantDataHandle &,md::ls::ModelTransformData const&,md::ls::GlobeMatrix const&>)::$_0>,void ()(md::ls::FlyoverCommonTransformConstantDataHandle &,md::ls::ModelTransformData const&,md::ls::GlobeMatrix const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::ita::PrepareFlyoverTransformConstantDataHandle::operator()(ecs2::Query<md::ls::FlyoverCommonTransformConstantDataHandle &,md::ls::ModelTransformData const&,md::ls::GlobeMatrix const&>)::$_0,std::allocator<md::ita::PrepareFlyoverTransformConstantDataHandle::operator()(ecs2::Query<md::ls::FlyoverCommonTransformConstantDataHandle &,md::ls::ModelTransformData const&,md::ls::GlobeMatrix const&>)::$_0>,void ()(md::ls::FlyoverCommonTransformConstantDataHandle &,md::ls::ModelTransformData const&,md::ls::GlobeMatrix const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427C8E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::ita::PrepareFlyoverTransformConstantDataHandle::operator()(ecs2::Query<md::ls::FlyoverCommonTransformConstantDataHandle &,md::ls::ModelTransformData const&,md::ls::GlobeMatrix const&>)::$_0,std::allocator<md::ita::PrepareFlyoverTransformConstantDataHandle::operator()(ecs2::Query<md::ls::FlyoverCommonTransformConstantDataHandle &,md::ls::ModelTransformData const&,md::ls::GlobeMatrix const&>)::$_0>,void ()(md::ls::FlyoverCommonTransformConstantDataHandle &,md::ls::ModelTransformData const&,md::ls::GlobeMatrix const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427C8E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::ita::PrepareFlyoverTransformConstantDataHandle::operator()(ecs2::Query<md::ls::FlyoverCommonTransformConstantDataHandle &,md::ls::ModelTransformData const&,md::ls::GlobeMatrix const&>)::$_0,std::allocator<md::ita::PrepareFlyoverTransformConstantDataHandle::operator()(ecs2::Query<md::ls::FlyoverCommonTransformConstantDataHandle &,md::ls::ModelTransformData const&,md::ls::GlobeMatrix const&>)::$_0>,void ()(md::ls::FlyoverCommonTransformConstantDataHandle &,md::ls::ModelTransformData const&,md::ls::GlobeMatrix const&)>::operator()(uint64_t a1, double *a2, uint64_t a3, unint64_t *a4)
{
  float64_t v4;
  _OWORD *GlobeMatrix;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  float64_t v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  uint8x8_t v20;
  float64_t **v21;
  float64_t *v22;
  unint64_t v23;
  uint64_t v24;
  float64_t **v25;
  float v26;
  float v27;
  _BOOL8 v28;
  unint64_t v29;
  unint64_t v30;
  size_t prime;
  void *v32;
  void *v33;
  uint64_t v34;
  float64_t *v35;
  size_t v36;
  size_t v37;
  size_t v38;
  float64_t *i;
  size_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint8x8_t v44;
  uint64_t v45;
  float64_t *v46;
  uint64_t v47;
  size_t v48;
  uint64_t v49;
  uint64_t v50;
  float64_t **v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  unint64_t v55;
  float32x4_t *v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float32x4_t v61;
  float32x4_t v62;
  float v63;
  float v64;
  float v65;
  float32x4_t v66;
  float32x4_t v67;
  unint64_t v68;
  void *v69;
  float64x2_t v70;
  double v71;
  uint64_t v72;
  float64x2_t v73;
  double v74;
  uint64_t v75;
  float64x2_t v76;
  double v77;
  uint64_t v78;
  float64x2_t v79;
  double v80;
  uint64_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  double v90[16];
  _OWORD v91[9];

  GlobeMatrix = (_OWORD *)md::VKMRenderResourcesStore::getGlobeMatrix(**(_QWORD **)(a1 + 8), *a4);
  v9 = GlobeMatrix[5];
  v91[4] = GlobeMatrix[4];
  v91[5] = v9;
  v10 = GlobeMatrix[7];
  v91[6] = GlobeMatrix[6];
  v91[7] = v10;
  v11 = GlobeMatrix[1];
  v91[0] = *GlobeMatrix;
  v91[1] = v11;
  v12 = GlobeMatrix[3];
  v91[2] = GlobeMatrix[2];
  v91[3] = v12;
  gm::operator*<double,4,4,4>(v90, *(double **)(a1 + 16), (double *)v91);
  v13 = **(_QWORD **)(a1 + 8);
  v14 = *a2;
  v82.f64[0] = v14;
  v15 = *(_DWORD *)(*(_QWORD *)(v13 + 4648) + 8 * LODWORD(v14));
  v16 = *(_QWORD *)(v13 + 4672);
  v17 = (_QWORD *)operator new();
  v18 = (_QWORD *)ggl::BufferData::BufferData((uint64_t)v17, qword_1EE550AB8, 2, 0, 6, 1);
  v18[25] = ggl::FlyoverCommon::Transform::reflection(void)::reflection;
  *v18 = &off_1E42B8EB0;
  v19 = *(_QWORD *)(v13 + 4728);
  if (v19)
  {
    v20 = (uint8x8_t)vcnt_s8((int8x8_t)v19);
    v20.i16[0] = vaddlv_u8(v20);
    if (v20.u32[0] > 1uLL)
    {
      v4 = v14;
      if (*(_QWORD *)&v14 >= v19)
        *(_QWORD *)&v4 = *(_QWORD *)&v14 % v19;
    }
    else
    {
      *(_QWORD *)&v4 = (v19 - 1) & *(_QWORD *)&v14;
    }
    v21 = *(float64_t ***)(*(_QWORD *)(v13 + 4720) + 8 * *(_QWORD *)&v4);
    if (v21)
    {
      v22 = *v21;
      if (*v21)
      {
        if (v20.u32[0] < 2uLL)
        {
          while (1)
          {
            v24 = *((_QWORD *)v22 + 1);
            if (v24 == *(_QWORD *)&v14)
            {
              if (*((_QWORD *)v22 + 2) == *(_QWORD *)&v14)
                goto LABEL_82;
            }
            else if ((v24 & (v19 - 1)) != *(_QWORD *)&v4)
            {
              goto LABEL_22;
            }
            v22 = *(float64_t **)v22;
            if (!v22)
              goto LABEL_22;
          }
        }
        do
        {
          v23 = *((_QWORD *)v22 + 1);
          if (v23 == *(_QWORD *)&v14)
          {
            if (*((_QWORD *)v22 + 2) == *(_QWORD *)&v14)
              goto LABEL_82;
          }
          else
          {
            if (v23 >= v19)
              v23 %= v19;
            if (v23 != *(_QWORD *)&v4)
              break;
          }
          v22 = *(float64_t **)v22;
        }
        while (v22);
      }
    }
  }
LABEL_22:
  v25 = (float64_t **)(v13 + 4736);
  v22 = (float64_t *)operator new(0x20uLL);
  *v22 = 0.0;
  v22[1] = v14;
  v22[2] = v14;
  v22[3] = 0.0;
  v26 = (float)(unint64_t)(*(_QWORD *)(v13 + 4744) + 1);
  v27 = *(float *)(v13 + 4752);
  if (!v19 || (float)(v27 * (float)v19) < v26)
  {
    v28 = 1;
    if (v19 >= 3)
      v28 = (v19 & (v19 - 1)) != 0;
    v29 = v28 | (2 * v19);
    v30 = vcvtps_u32_f32(v26 / v27);
    if (v29 <= v30)
      prime = v30;
    else
      prime = v29;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v19 = *(_QWORD *)(v13 + 4728);
    }
    if (prime <= v19)
    {
      if (prime >= v19)
        goto LABEL_59;
      v43 = vcvtps_u32_f32((float)*(unint64_t *)(v13 + 4744) / *(float *)(v13 + 4752));
      if (v19 < 3 || (v44 = (uint8x8_t)vcnt_s8((int8x8_t)v19), v44.i16[0] = vaddlv_u8(v44), v44.u32[0] > 1uLL))
      {
        v43 = std::__next_prime(v43);
      }
      else
      {
        v45 = 1 << -(char)__clz(v43 - 1);
        if (v43 >= 2)
          v43 = v45;
      }
      if (prime <= v43)
        prime = v43;
      if (prime >= v19)
      {
        v19 = *(_QWORD *)(v13 + 4728);
LABEL_59:
        if ((v19 & (v19 - 1)) != 0)
        {
          if (*(_QWORD *)&v14 >= v19)
            *(_QWORD *)&v4 = *(_QWORD *)&v14 % v19;
          else
            v4 = v14;
        }
        else
        {
          *(_QWORD *)&v4 = (v19 - 1) & *(_QWORD *)&v14;
        }
        goto LABEL_72;
      }
      if (!prime)
      {
        v69 = *(void **)(v13 + 4720);
        *(_QWORD *)(v13 + 4720) = 0;
        if (v69)
          operator delete(v69);
        v19 = 0;
        *(_QWORD *)(v13 + 4728) = 0;
        goto LABEL_59;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v32 = operator new(8 * prime);
    v33 = *(void **)(v13 + 4720);
    *(_QWORD *)(v13 + 4720) = v32;
    if (v33)
      operator delete(v33);
    v34 = 0;
    *(_QWORD *)(v13 + 4728) = prime;
    do
      *(_QWORD *)(*(_QWORD *)(v13 + 4720) + 8 * v34++) = 0;
    while (prime != v34);
    v35 = *v25;
    if (!*v25)
    {
LABEL_58:
      v19 = prime;
      goto LABEL_59;
    }
    v36 = *((_QWORD *)v35 + 1);
    v37 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v38 = v36 & v37;
      *(_QWORD *)(*(_QWORD *)(v13 + 4720) + 8 * v38) = v25;
      for (i = *(float64_t **)v35; *(_QWORD *)v35; i = *(float64_t **)v35)
      {
        v40 = (_QWORD)i[1] & v37;
        if (v40 == v38)
        {
          v35 = i;
        }
        else
        {
          v41 = *(_QWORD *)(v13 + 4720);
          if (*(_QWORD *)(v41 + 8 * v40))
          {
            *v35 = *i;
            v42 = 8 * v40;
            *i = **(float64_t **)(*(_QWORD *)(v13 + 4720) + v42);
            **(_QWORD **)(*(_QWORD *)(v13 + 4720) + v42) = i;
          }
          else
          {
            *(_QWORD *)(v41 + 8 * v40) = v35;
            v35 = i;
            v38 = v40;
          }
        }
      }
      goto LABEL_58;
    }
    if (v36 >= prime)
      v36 %= prime;
    *(_QWORD *)(*(_QWORD *)(v13 + 4720) + 8 * v36) = v25;
    v46 = *(float64_t **)v35;
    if (!*(_QWORD *)v35)
      goto LABEL_58;
    while (1)
    {
      v48 = *((_QWORD *)v46 + 1);
      if (v48 >= prime)
        v48 %= prime;
      if (v48 != v36)
      {
        v49 = *(_QWORD *)(v13 + 4720);
        if (!*(_QWORD *)(v49 + 8 * v48))
        {
          *(_QWORD *)(v49 + 8 * v48) = v35;
          goto LABEL_63;
        }
        *v35 = *v46;
        v47 = 8 * v48;
        *v46 = **(float64_t **)(*(_QWORD *)(v13 + 4720) + v47);
        **(_QWORD **)(*(_QWORD *)(v13 + 4720) + v47) = v46;
        v46 = v35;
      }
      v48 = v36;
LABEL_63:
      v35 = v46;
      v46 = *(float64_t **)v46;
      v36 = v48;
      if (!v46)
        goto LABEL_58;
    }
  }
LABEL_72:
  v50 = *(_QWORD *)(v13 + 4720);
  v51 = *(float64_t ***)(v50 + 8 * *(_QWORD *)&v4);
  if (v51)
  {
    *(_QWORD *)v22 = *v51;
LABEL_80:
    *v51 = v22;
    goto LABEL_81;
  }
  *(_QWORD *)v22 = *v25;
  *v25 = v22;
  *(_QWORD *)(v50 + 8 * *(_QWORD *)&v4) = v25;
  if (*(_QWORD *)v22)
  {
    v52 = *(_QWORD *)(*(_QWORD *)v22 + 8);
    if ((v19 & (v19 - 1)) != 0)
    {
      if (v52 >= v19)
        v52 %= v19;
    }
    else
    {
      v52 &= v19 - 1;
    }
    v51 = (float64_t **)(*(_QWORD *)(v13 + 4720) + 8 * v52);
    goto LABEL_80;
  }
LABEL_81:
  ++*(_QWORD *)(v13 + 4744);
LABEL_82:
  v53 = *((_QWORD *)v22 + 3);
  *((_QWORD *)v22 + 3) = v17;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  v54 = std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Transform>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Transform>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Transform>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Transform>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Transform>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Transform>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Transform>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Transform>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Transform>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Transform>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Transform>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Transform>> const&>,std::tuple<>>(v13 + 4544, *(unint64_t *)&v82.f64[0], &v82);
  ++v54[3];
  *(_QWORD *)(v16 + 24 * v15) = v17;
  v55 = v17[1];
  v56 = (float32x4_t *)v17[9];
  v57 = *(float *)(a3 + 8);
  v58 = *(float *)(a3 + 20);
  v59 = *(float *)(a3 + 32);
  v60 = *(float *)(a3 + 44);
  v70 = vcvtq_f64_f32(*(float32x2_t *)a3);
  v71 = v57;
  v72 = 0;
  v73 = vcvtq_f64_f32(*(float32x2_t *)(a3 + 12));
  v74 = v58;
  v75 = 0;
  v76 = vcvtq_f64_f32(*(float32x2_t *)(a3 + 24));
  v77 = v59;
  v78 = 0;
  v79 = vcvtq_f64_f32(*(float32x2_t *)(a3 + 36));
  v80 = v60;
  v81 = 0x3FF0000000000000;
  gm::operator*<double,4,4,4>(v82.f64, (double *)v91, v70.f64);
  v61 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v84), v85);
  v56[4] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v82), v83);
  v56[5] = v61;
  v62 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v88), v89);
  v56[6] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v86), v87);
  v56[7] = v62;
  v63 = *(float *)(a3 + 8);
  v64 = *(float *)(a3 + 20);
  v62.i32[0] = *(_DWORD *)(a3 + 32);
  v65 = *(float *)(a3 + 44);
  v70 = vcvtq_f64_f32(*(float32x2_t *)a3);
  v71 = v63;
  v72 = 0;
  v73 = vcvtq_f64_f32(*(float32x2_t *)(a3 + 12));
  v74 = v64;
  v75 = 0;
  v76 = vcvtq_f64_f32(*(float32x2_t *)(a3 + 24));
  v77 = v62.f32[0];
  v78 = 0;
  v79 = vcvtq_f64_f32(*(float32x2_t *)(a3 + 36));
  v80 = v65;
  v81 = 0x3FF0000000000000;
  gm::operator*<double,4,4,4>(v82.f64, v90, v70.f64);
  v66 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v84), v85);
  *v56 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v82), v83);
  v56[1] = v66;
  v67 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v88), v89);
  v56[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v86), v87);
  v56[3] = v67;
  v68 = v17[8];
  if (v68 <= v55)
    v68 = v55;
  v17[7] = 0;
  v17[8] = v68;
}

void sub_19FA32504(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = v1[3];
  v1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::ita::PrepareFlyoverS2TransformConstantDataHandle::operator()(ecs2::Query<md::ls::FlyoverCommonS2TransformHandle &,md::ls::BaseMapTileHandle const&>)::$_0,std::allocator<md::ita::PrepareFlyoverS2TransformConstantDataHandle::operator()(ecs2::Query<md::ls::FlyoverCommonS2TransformHandle &,md::ls::BaseMapTileHandle const&>)::$_0>,void ()(md::ls::FlyoverCommonS2TransformHandle &,md::ls::BaseMapTileHandle const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::ita::PrepareFlyoverS2TransformConstantDataHandle::operator()(ecs2::Query<md::ls::FlyoverCommonS2TransformHandle &,md::ls::BaseMapTileHandle const&>)::$_0,std::allocator<md::ita::PrepareFlyoverS2TransformConstantDataHandle::operator()(ecs2::Query<md::ls::FlyoverCommonS2TransformHandle &,md::ls::BaseMapTileHandle const&>)::$_0>,void ()(md::ls::FlyoverCommonS2TransformHandle &,md::ls::BaseMapTileHandle const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427C930;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::ita::PrepareFlyoverS2TransformConstantDataHandle::operator()(ecs2::Query<md::ls::FlyoverCommonS2TransformHandle &,md::ls::BaseMapTileHandle const&>)::$_0,std::allocator<md::ita::PrepareFlyoverS2TransformConstantDataHandle::operator()(ecs2::Query<md::ls::FlyoverCommonS2TransformHandle &,md::ls::BaseMapTileHandle const&>)::$_0>,void ()(md::ls::FlyoverCommonS2TransformHandle &,md::ls::BaseMapTileHandle const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427C930;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *std::__function::__func<md::ita::PrepareFlyoverS2TransformConstantDataHandle::operator()(ecs2::Query<md::ls::FlyoverCommonS2TransformHandle &,md::ls::BaseMapTileHandle const&>)::$_0,std::allocator<md::ita::PrepareFlyoverS2TransformConstantDataHandle::operator()(ecs2::Query<md::ls::FlyoverCommonS2TransformHandle &,md::ls::BaseMapTileHandle const&>)::$_0>,void ()(md::ls::FlyoverCommonS2TransformHandle &,md::ls::BaseMapTileHandle const&)>::operator()(uint64_t a1, unint64_t *a2, unsigned int *a3)
{
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint8x8_t v12;
  _QWORD **v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t prime;
  void *v24;
  void *v25;
  uint64_t v26;
  _QWORD *v27;
  size_t v28;
  size_t v29;
  size_t v30;
  _QWORD *i;
  size_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint8x8_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  size_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *result;
  unint64_t v47;
  __int32 *v48;
  uint64_t v49;
  float32x2_t *v50;
  unint64_t v51;
  char v52;
  int32x2_t v53;
  uint64x2_t v54;
  float64x2_t v60;
  float64x2_t v61;
  int32x2_t v62;
  float64x2_t v63;
  void *v64;
  unint64_t v65;
  unint64_t v66;

  v5 = *a2;
  v6 = **(_QWORD **)(a1 + 8);
  v66 = v5;
  v7 = *(_DWORD *)(*(_QWORD *)(v6 + 4864) + 8 * v5);
  v8 = *(_QWORD *)(v6 + 4888);
  v9 = (_QWORD *)operator new();
  v10 = (_QWORD *)ggl::BufferData::BufferData((uint64_t)v9, qword_1EE550B38, 2, 0, 6, 1);
  v10[25] = ggl::FlyoverCommon::S2Transform::reflection(void)::reflection;
  *v10 = &off_1E4274788;
  v11 = *(_QWORD *)(v6 + 4944);
  v65 = v8;
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v8 = v5;
      if (v5 >= v11)
        v8 = v5 % v11;
    }
    else
    {
      v8 = (v11 - 1) & v5;
    }
    v13 = *(_QWORD ***)(*(_QWORD *)(v6 + 4936) + 8 * v8);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v16 = v14[1];
            if (v16 == v5)
            {
              if (v14[2] == v5)
                goto LABEL_82;
            }
            else if ((v16 & (v11 - 1)) != v8)
            {
              goto LABEL_22;
            }
            v14 = (_QWORD *)*v14;
            if (!v14)
              goto LABEL_22;
          }
        }
        do
        {
          v15 = v14[1];
          if (v15 == v5)
          {
            if (v14[2] == v5)
              goto LABEL_82;
          }
          else
          {
            if (v15 >= v11)
              v15 %= v11;
            if (v15 != v8)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_22:
  v17 = (_QWORD *)(v6 + 4952);
  v14 = operator new(0x20uLL);
  *v14 = 0;
  v14[1] = v5;
  v14[2] = v5;
  v14[3] = 0;
  v18 = (float)(unint64_t)(*(_QWORD *)(v6 + 4960) + 1);
  v19 = *(float *)(v6 + 4968);
  if (!v11 || (float)(v19 * (float)v11) < v18)
  {
    v20 = 1;
    if (v11 >= 3)
      v20 = (v11 & (v11 - 1)) != 0;
    v21 = v20 | (2 * v11);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      prime = v22;
    else
      prime = v21;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v11 = *(_QWORD *)(v6 + 4944);
    }
    if (prime <= v11)
    {
      if (prime >= v11)
        goto LABEL_59;
      v35 = vcvtps_u32_f32((float)*(unint64_t *)(v6 + 4960) / *(float *)(v6 + 4968));
      if (v11 < 3 || (v36 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
      {
        v35 = std::__next_prime(v35);
      }
      else
      {
        v37 = 1 << -(char)__clz(v35 - 1);
        if (v35 >= 2)
          v35 = v37;
      }
      if (prime <= v35)
        prime = v35;
      if (prime >= v11)
      {
        v11 = *(_QWORD *)(v6 + 4944);
LABEL_59:
        if ((v11 & (v11 - 1)) != 0)
        {
          if (v5 >= v11)
            v8 = v5 % v11;
          else
            v8 = v5;
        }
        else
        {
          v8 = (v11 - 1) & v5;
        }
        goto LABEL_72;
      }
      if (!prime)
      {
        v64 = *(void **)(v6 + 4936);
        *(_QWORD *)(v6 + 4936) = 0;
        if (v64)
          operator delete(v64);
        v11 = 0;
        *(_QWORD *)(v6 + 4944) = 0;
        goto LABEL_59;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v24 = operator new(8 * prime);
    v25 = *(void **)(v6 + 4936);
    *(_QWORD *)(v6 + 4936) = v24;
    if (v25)
      operator delete(v25);
    v26 = 0;
    *(_QWORD *)(v6 + 4944) = prime;
    do
      *(_QWORD *)(*(_QWORD *)(v6 + 4936) + 8 * v26++) = 0;
    while (prime != v26);
    v27 = (_QWORD *)*v17;
    if (!*v17)
    {
LABEL_58:
      v11 = prime;
      goto LABEL_59;
    }
    v28 = v27[1];
    v29 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v30 = v28 & v29;
      *(_QWORD *)(*(_QWORD *)(v6 + 4936) + 8 * v30) = v17;
      for (i = (_QWORD *)*v27; *v27; i = (_QWORD *)*v27)
      {
        v32 = i[1] & v29;
        if (v32 == v30)
        {
          v27 = i;
        }
        else
        {
          v33 = *(_QWORD *)(v6 + 4936);
          if (*(_QWORD *)(v33 + 8 * v32))
          {
            *v27 = *i;
            v34 = 8 * v32;
            *i = **(_QWORD **)(*(_QWORD *)(v6 + 4936) + v34);
            **(_QWORD **)(*(_QWORD *)(v6 + 4936) + v34) = i;
          }
          else
          {
            *(_QWORD *)(v33 + 8 * v32) = v27;
            v27 = i;
            v30 = v32;
          }
        }
      }
      goto LABEL_58;
    }
    if (v28 >= prime)
      v28 %= prime;
    *(_QWORD *)(*(_QWORD *)(v6 + 4936) + 8 * v28) = v17;
    v38 = (_QWORD *)*v27;
    if (!*v27)
      goto LABEL_58;
    while (1)
    {
      v40 = v38[1];
      if (v40 >= prime)
        v40 %= prime;
      if (v40 != v28)
      {
        v41 = *(_QWORD *)(v6 + 4936);
        if (!*(_QWORD *)(v41 + 8 * v40))
        {
          *(_QWORD *)(v41 + 8 * v40) = v27;
          goto LABEL_63;
        }
        *v27 = *v38;
        v39 = 8 * v40;
        *v38 = **(_QWORD **)(*(_QWORD *)(v6 + 4936) + v39);
        **(_QWORD **)(*(_QWORD *)(v6 + 4936) + v39) = v38;
        v38 = v27;
      }
      v40 = v28;
LABEL_63:
      v27 = v38;
      v38 = (_QWORD *)*v38;
      v28 = v40;
      if (!v38)
        goto LABEL_58;
    }
  }
LABEL_72:
  v42 = *(_QWORD *)(v6 + 4936);
  v43 = *(_QWORD **)(v42 + 8 * v8);
  if (v43)
  {
    *v14 = *v43;
LABEL_80:
    *v43 = v14;
    goto LABEL_81;
  }
  *v14 = *v17;
  *v17 = v14;
  *(_QWORD *)(v42 + 8 * v8) = v17;
  if (*v14)
  {
    v44 = *(_QWORD *)(*v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v44 >= v11)
        v44 %= v11;
    }
    else
    {
      v44 &= v11 - 1;
    }
    v43 = (_QWORD *)(*(_QWORD *)(v6 + 4936) + 8 * v44);
    goto LABEL_80;
  }
LABEL_81:
  ++*(_QWORD *)(v6 + 4960);
LABEL_82:
  v45 = v14[3];
  v14[3] = v9;
  if (v45)
    (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
  result = std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::S2Transform>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::S2Transform>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::S2Transform>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::S2Transform>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::S2Transform>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::S2Transform>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::S2Transform>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::S2Transform>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::S2Transform>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::S2Transform>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::S2Transform>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::S2Transform>> const&>,std::tuple<>>(v6 + 4760, v66, &v66);
  ++result[3];
  *(_QWORD *)(v65 + 24 * v7) = v9;
  v47 = v9[1];
  v48 = *(__int32 **)(a1 + 16);
  v49 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a1 + 8) + 10056)
                  + 8 * *(unsigned int *)(*(_QWORD *)(**(_QWORD **)(a1 + 8) + 10032) + 8 * *a3));
  v51 = v9[8];
  v50 = (float32x2_t *)v9[9];
  v50[10].i32[0] = *(unsigned __int8 *)(v49 + 24);
  v52 = *(_BYTE *)(v49 + 25);
  v50->i32[0] = *v48;
  v50->i32[1] = v48[1];
  v50[1].i32[0] = v48[2];
  v50[1].i32[1] = v48[3];
  v50[2].i32[0] = v48[4];
  v50[2].i32[1] = v48[5];
  v50[3].i32[0] = v48[6];
  v50[3].i32[1] = v48[7];
  v50[4].i32[0] = v48[8];
  v50[4].i32[1] = v48[9];
  v50[5].i32[0] = v48[10];
  v50[5].i32[1] = v48[11];
  v50[6].i32[0] = v48[12];
  v50[6].i32[1] = v48[13];
  v50[7].i32[0] = v48[14];
  v50[7].i32[1] = v48[15];
  v53 = vrev64_s32(*(int32x2_t *)(v49 + 28));
  v54.i64[0] = v53.u32[0];
  v54.i64[1] = v53.u32[1];
  __asm { FMOV            V3.2D, #1.0 }
  v60 = vdivq_f64(_Q3, (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)(1 << v52)), 0));
  v61 = vmulq_f64(vcvtq_f64_u64(v54), v60);
  v62 = vadd_s32(v53, (int32x2_t)0x100000001);
  v54.i64[0] = v62.u32[0];
  v54.i64[1] = v62.u32[1];
  v63 = vmulq_f64(vcvtq_f64_u64(v54), v60);
  *(float32x2_t *)&v60.f64[0] = vcvt_f32_f64(v61);
  v50[8] = vsub_f32(vcvt_f32_f64(v63), *(float32x2_t *)&v60.f64[0]);
  v50[9] = *(float32x2_t *)&v60.f64[0];
  if (v51 > v47)
    v47 = v51;
  v9[7] = 0;
  v9[8] = v47;
  return result;
}

void sub_19FA32BC0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = v1[3];
  v1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<md::GlobeAdapterData *,std::shared_ptr<md::GlobeAdapterData>::__shared_ptr_default_delete<md::GlobeAdapterData,md::GlobeAdapterData>,std::allocator<md::GlobeAdapterData>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<md::GlobeAdapterData *,std::shared_ptr<md::GlobeAdapterData>::__shared_ptr_default_delete<md::GlobeAdapterData,md::GlobeAdapterData>,std::allocator<md::GlobeAdapterData>>::__on_zero_shared(uint64_t result)
{
  char **v1;
  char *v2;
  char *v3;
  char *v4;
  std::__shared_weak_count *v5;

  v1 = *(char ***)(result + 24);
  if (v1)
  {
    std::__tree<std::__value_type<karo::media::C3mmFileIndex,std::shared_ptr<karo::media::C3mmFile>>,std::__map_value_compare<karo::media::C3mmFileIndex,std::__value_type<karo::media::C3mmFileIndex,std::shared_ptr<karo::media::C3mmFile>>,std::less<karo::media::C3mmFileIndex>,true>,std::allocator<std::__value_type<karo::media::C3mmFileIndex,std::shared_ptr<karo::media::C3mmFile>>>>::destroy(v1[4]);
    v2 = *v1;
    if (*v1)
    {
      v3 = v1[1];
      v4 = *v1;
      if (v3 != v2)
      {
        do
        {
          v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 1);
          if (v5)
            std::__shared_weak_count::__release_weak(v5);
          v3 -= 16;
        }
        while (v3 != v2);
        v4 = *v1;
      }
      v1[1] = v2;
      operator delete(v4);
    }
    JUMPOUT(0x1A1AF4E00);
  }
  return result;
}

uint64_t md::GlobeAdapter::GlobeAdapter(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v12;
  geo::read_write_lock *v13;
  const char *v14;
  malloc_zone_t *zone;
  uint64_t v16;
  geo::read_write_lock *v17;
  const char *v18;
  malloc_zone_t *v19;

  v4 = operator new();
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = v4 + 32;
  *(_BYTE *)(v4 + 48) = 0;
  *(_QWORD *)a1 = v4;
  v5 = (_QWORD *)operator new();
  *v5 = &off_1E42E6DF0;
  v5[1] = 0;
  v5[2] = 0;
  v5[3] = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  {
    v12 = operator new();
    *(_QWORD *)(v12 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v12 + 24) = "VectorKitLabels";
    *(_OWORD *)(v12 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v12 = &off_1E42B5668;
    *(_QWORD *)(v12 + 8) = "VectorKitLabels";
    *(_OWORD *)(v12 + 72) = 0u;
    *(_OWORD *)(v12 + 88) = 0u;
    *(_OWORD *)(v12 + 104) = 0u;
    *(_OWORD *)(v12 + 120) = 0u;
    *(_OWORD *)(v12 + 136) = 0u;
    *(_OWORD *)(v12 + 152) = 0u;
    *(_OWORD *)(v12 + 168) = 0u;
    *(_OWORD *)(v12 + 184) = 0u;
    *(_OWORD *)(v12 + 200) = 0u;
    *(_OWORD *)(v12 + 216) = 0u;
    *(_OWORD *)(v12 + 232) = 0u;
    *(_QWORD *)(v12 + 248) = 0;
    *(_OWORD *)(v12 + 56) = 0u;
    v13 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v12 + 56), 0);
    if ((_DWORD)v13)
      geo::read_write_lock::logFailure(v13, (uint64_t)"initialization", v14);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v12 + 48) = zone;
    malloc_set_zone_name(zone, "VectorKitLabels");
    *(_QWORD *)(v12 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v12;
  }
  *(_QWORD *)(a1 + 40) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(a1 + 48) = 0;
  {
    v16 = operator new();
    *(_QWORD *)(v16 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v16 + 24) = "VectorKitLabels";
    *(_OWORD *)(v16 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v16 = &off_1E42B5668;
    *(_QWORD *)(v16 + 8) = "VectorKitLabels";
    *(_OWORD *)(v16 + 72) = 0u;
    *(_OWORD *)(v16 + 88) = 0u;
    *(_OWORD *)(v16 + 104) = 0u;
    *(_OWORD *)(v16 + 120) = 0u;
    *(_OWORD *)(v16 + 136) = 0u;
    *(_OWORD *)(v16 + 152) = 0u;
    *(_OWORD *)(v16 + 168) = 0u;
    *(_OWORD *)(v16 + 184) = 0u;
    *(_OWORD *)(v16 + 200) = 0u;
    *(_OWORD *)(v16 + 216) = 0u;
    *(_OWORD *)(v16 + 232) = 0u;
    *(_QWORD *)(v16 + 248) = 0;
    *(_OWORD *)(v16 + 56) = 0u;
    v17 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v16 + 56), 0);
    if ((_DWORD)v17)
      geo::read_write_lock::logFailure(v17, (uint64_t)"initialization", v18);
    v19 = malloc_create_zone(0, 0);
    *(_QWORD *)(v16 + 48) = v19;
    malloc_set_zone_name(v19, "VectorKitLabels");
    *(_QWORD *)(v16 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v16;
  }
  *(_QWORD *)(a1 + 56) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 1065353216;
  v8 = a2[1];
  *(_QWORD *)(a1 + 80) = *a2;
  *(_QWORD *)(a1 + 88) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  return a1;
}

void sub_19FA32F90(_Unwind_Exception *a1)
{
  char **v1;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;

  std::__tree<std::__value_type<karo::media::C3mmFileIndex,std::shared_ptr<karo::media::C3mmFile>>,std::__map_value_compare<karo::media::C3mmFileIndex,std::__value_type<karo::media::C3mmFileIndex,std::shared_ptr<karo::media::C3mmFile>>,std::less<karo::media::C3mmFileIndex>,true>,std::allocator<std::__value_type<karo::media::C3mmFileIndex,std::shared_ptr<karo::media::C3mmFile>>>>::destroy(v1[4]);
  v3 = *v1;
  if (*v1)
  {
    v4 = v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      do
      {
        v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
        if (v6)
          std::__shared_weak_count::__release_weak(v6);
        v4 -= 16;
      }
      while (v4 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  MEMORY[0x1A1AF4E00](v1, 0x1020C4014147F4ALL);
  _Unwind_Resume(a1);
}

void md::GlobeAdapter::~GlobeAdapter(md::GlobeAdapter *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  _BYTE v25[24];
  _BYTE *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *((_QWORD *)this + 2);
    if (!v5)
      goto LABEL_18;
  }
  else
  {
LABEL_5:
    v5 = *((_QWORD *)this + 2);
    if (!v5)
      goto LABEL_18;
  }
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  v26 = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v6 + 24))(v6, v25);
  v7 = v26;
  if (v26 == v25)
  {
    v8 = 4;
    v7 = v25;
    goto LABEL_12;
  }
  if (v26)
  {
    v8 = 5;
LABEL_12:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  v24 = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v6 + 16))(v6, v23);
  v9 = v24;
  if (v24 == v23)
  {
    v10 = 4;
    v9 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v10 = 5;
LABEL_17:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
LABEL_18:
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = (_QWORD *)*((_QWORD *)this + 6);
  while (v14)
  {
    v19 = v14;
    v14 = (_QWORD *)*v14;
    v20 = (std::__shared_weak_count *)v19[3];
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    (*(void (**)(_QWORD, _QWORD *, uint64_t))(**((_QWORD **)this + 7) + 40))(*((_QWORD *)this + 7), v19, 32);
  }
  v15 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v15)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 5) + 40))(*((_QWORD *)this + 5), v15, 8 * *((_QWORD *)this + 4));
  v16 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_19FA33248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;
  char *v18;
  char *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;

  v20 = a13;
  if (a13 == v18)
  {
    v21 = 4;
    v20 = &a10;
  }
  else
  {
    if (!a13)
    {
LABEL_6:
      v22 = *(std::__shared_weak_count **)(v17 + 88);
      if (v22)
      {
        p_shared_owners = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldaxr(p_shared_owners);
        while (__stlxr(v24 - 1, p_shared_owners));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      v25 = *(_QWORD **)(v17 + 48);
      while (v25)
      {
        v30 = v25;
        v25 = (_QWORD *)*v25;
        v31 = (std::__shared_weak_count *)v30[3];
        if (v31)
        {
          v32 = (unint64_t *)&v31->__shared_owners_;
          do
            v33 = __ldaxr(v32);
          while (__stlxr(v33 - 1, v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
        (*(void (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(v17 + 56) + 40))(*(_QWORD *)(v17 + 56), v30, 32);
      }
      v26 = *(_QWORD *)(v17 + 24);
      *(_QWORD *)(v17 + 24) = 0;
      if (v26)
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v17 + 40) + 40))(*(_QWORD *)(v17 + 40), v26, 8 * *(_QWORD *)(v17 + 32));
      v27 = *(std::__shared_weak_count **)(v17 + 8);
      if (v27)
      {
        v28 = (unint64_t *)&v27->__shared_owners_;
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      _Unwind_Resume(exception_object);
    }
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
  goto LABEL_6;
}

void md::GlobeAdapter::setGlobeView(md::GlobeAdapter *this, altitude::GlobeView *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD v27[3];
  _QWORD *v28;
  _BYTE v29[24];
  _BYTE *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  *((_QWORD *)this + 2) = a2;
  if (!a2)
    return;
  v3 = (*(uint64_t (**)(altitude::GlobeView *))(*(_QWORD *)a2 + 16))(a2);
  v5 = *(_QWORD *)this;
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v9 = *((_QWORD *)this + 10);
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
  if (v8)
  {
    v10 = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  if (v4)
  {
    v12 = (unint64_t *)&v4->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  if (v8)
  {
    v14 = (unint64_t *)&v8->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = operator new(0x28uLL);
  *v16 = &off_1E42C9200;
  v16[1] = v5;
  v16[2] = v4;
  v16[3] = v9;
  v16[4] = v8;
  v30 = v16;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v3 + 24))(v3, v29);
  v17 = v30;
  if (v30 == v29)
  {
    v18 = 4;
    v17 = v29;
  }
  else
  {
    if (!v30)
      goto LABEL_19;
    v18 = 5;
  }
  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_19:
  if (v8)
  {
    v19 = (unint64_t *)&v8->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v27[0] = &off_1E42C9248;
  v27[1] = v9;
  v27[2] = v8;
  v28 = v27;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v3 + 16))(v3, v27);
  v21 = v28;
  if (v28 == v27)
  {
    v22 = 4;
    v21 = v27;
  }
  else
  {
    if (!v28)
      goto LABEL_27;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_27:
  if (v8)
  {
    v23 = (unint64_t *)&v8->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v4)
  {
    v25 = (unint64_t *)&v4->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_19FA335BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  char *v19;
  char *v21;
  uint64_t v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;

  v21 = a13;
  if (a13 == v19)
  {
    v22 = 4;
    v21 = &a10;
  }
  else
  {
    if (!a13)
    {
LABEL_6:
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v24 = __ldaxr(p_shared_owners);
        while (__stlxr(v24 - 1, p_shared_owners));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (v17)
      {
        v25 = (unint64_t *)&v17->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      _Unwind_Resume(exception_object);
    }
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
  goto LABEL_6;
}

_QWORD *std::__function::__func<md::GlobeAdapter::_updateLabelDataManagerCallbacks(void)::$_1,std::allocator<md::GlobeAdapter::_updateLabelDataManagerCallbacks(void)::$_1>,std::shared_ptr<md::LabelTile> ()(void *,altitude::LabelData::TileType)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_1E42C9248;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void std::__function::__func<md::GlobeAdapter::_updateLabelDataManagerCallbacks(void)::$_1,std::allocator<md::GlobeAdapter::_updateLabelDataManagerCallbacks(void)::$_1>,std::shared_ptr<md::LabelTile> ()(void *,altitude::LabelData::TileType)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_1E42C9248;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::GlobeAdapter::_updateLabelDataManagerCallbacks(void)::$_1,std::allocator<md::GlobeAdapter::_updateLabelDataManagerCallbacks(void)::$_1>,std::shared_ptr<md::LabelTile> ()(void *,altitude::LabelData::TileType)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E42C9248;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<md::GlobeAdapter::_updateLabelDataManagerCallbacks(void)::$_1,std::allocator<md::GlobeAdapter::_updateLabelDataManagerCallbacks(void)::$_1>,std::shared_ptr<md::LabelTile> ()(void *,altitude::LabelData::TileType)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E42C9248;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void std::__function::__func<md::GlobeAdapter::_updateLabelDataManagerCallbacks(void)::$_1,std::allocator<md::GlobeAdapter::_updateLabelDataManagerCallbacks(void)::$_1>,std::shared_ptr<md::LabelTile> ()(void *,altitude::LabelData::TileType)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__function::__func<md::GlobeAdapter::_updateLabelDataManagerCallbacks(void)::$_1,std::allocator<md::GlobeAdapter::_updateLabelDataManagerCallbacks(void)::$_1>,std::shared_ptr<md::LabelTile> ()(void *,altitude::LabelData::TileType)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(__p);
}

void std::__function::__func<md::GlobeAdapter::_updateLabelDataManagerCallbacks(void)::$_1,std::allocator<md::GlobeAdapter::_updateLabelDataManagerCallbacks(void)::$_1>,std::shared_ptr<md::LabelTile> ()(void *,altitude::LabelData::TileType)>::operator()(uint64_t a1@<X0>, void **a2@<X1>, unsigned int *a3@<X2>, _QWORD *a4@<X8>)
{
  void *v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  char v10;
  unint64_t v11;
  char *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _BYTE v17[4];
  uint64_t v18;
  void *v19;
  std::__shared_weak_count *v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v6 = *a2;
  v7 = *a3;
  if (*a2)
  {
    objc_msgSend(v6, "vectorTilePtr");
    v6 = v19;
  }
  else
  {
    v19 = 0;
    v20 = 0;
  }
  geo::codec::VectorTile::key((geo::codec::VectorTile *)v6);
  *(_QWORD *)&v22 = GEOTileKeyMake();
  *((_QWORD *)&v22 + 1) = v8;
  v17[0] = -1;
  v17[1] = BYTE6(v22) & 0x3F;
  *((_QWORD *)&v9 + 1) = (v8 >> 8) | ((unint64_t)((unsigned __int16)(HIDWORD(v8) >> 8) | (HIBYTE(v8) << 16)) << 32);
  *(_QWORD *)&v9 = *(_QWORD *)((char *)&v22 + 1);
  v18 = *(_QWORD *)&vzip1_s32((int32x2_t)(*((_QWORD *)&v9 + 1) >> 8), (int32x2_t)(v9 >> 46)) & 0x3FFFFFF03FFFFFFLL;
  v10 = v7 - 1;
  if ((v7 - 1) < 8 && ((0x8Bu >> v10) & 1) != 0)
  {
    v11 = 0x400000003000200uLL >> (8 * v10);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("VKLabelTileTypeFromAltitudeLabelDataTileTypeInvalid"), CFSTR("Unknown value for altitude::LabelData::TileType: %d"), v7);
    LOBYTE(v11) = 0;
  }
  v12 = (char *)operator new(0x170uLL);
  *(_OWORD *)(v12 + 8) = 0u;
  *(_QWORD *)v12 = &off_1E42DDF88;
  v21 = 0u;
  md::LabelTile::LabelTile((unsigned __int8 *)v12 + 24, (uint64_t)v17, (uint64_t)&v19, v11, (_QWORD *)(a1 + 8), 0, &v21, 0);
  v13 = v20;
  *a4 = v14;
  a4[1] = v12;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_19FA33AC8(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19FA33AD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  unint64_t *p_shared_owners;
  unint64_t v17;

  if (a15)
  {
    p_shared_owners = (unint64_t *)&a15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))a15->__on_zero_shared)(a15);
      std::__shared_weak_count::__release_weak(a15);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::__function::__func<md::GlobeAdapter::_updateLabelDataManagerCallbacks(void)::$_0,std::allocator<md::GlobeAdapter::_updateLabelDataManagerCallbacks(void)::$_0>,void ()(std::shared_ptr<altitude::LabelData>)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *a1 = &off_1E42C9200;
  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      return a1;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      return a1;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return a1;
}

void std::__function::__func<md::GlobeAdapter::_updateLabelDataManagerCallbacks(void)::$_0,std::allocator<md::GlobeAdapter::_updateLabelDataManagerCallbacks(void)::$_0>,void ()(std::shared_ptr<altitude::LabelData>)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *a1 = &off_1E42C9200;
  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::GlobeAdapter::_updateLabelDataManagerCallbacks(void)::$_0,std::allocator<md::GlobeAdapter::_updateLabelDataManagerCallbacks(void)::$_0>,void ()(std::shared_ptr<altitude::LabelData>)>::__clone(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x28uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_1E42C9200;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *std::__function::__func<md::GlobeAdapter::_updateLabelDataManagerCallbacks(void)::$_0,std::allocator<md::GlobeAdapter::_updateLabelDataManagerCallbacks(void)::$_0>,void ()(std::shared_ptr<altitude::LabelData>)>::__clone(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_1E42C9200;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void std::__function::__func<md::GlobeAdapter::_updateLabelDataManagerCallbacks(void)::$_0,std::allocator<md::GlobeAdapter::_updateLabelDataManagerCallbacks(void)::$_0>,void ()(std::shared_ptr<altitude::LabelData>)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void std::__function::__func<md::GlobeAdapter::_updateLabelDataManagerCallbacks(void)::$_0,std::allocator<md::GlobeAdapter::_updateLabelDataManagerCallbacks(void)::$_0>,void ()(std::shared_ptr<altitude::LabelData>)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = (std::__shared_weak_count *)__p[4];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)__p[2];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[2];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  operator delete(__p);
}

void std::__function::__func<md::GlobeAdapter::_updateLabelDataManagerCallbacks(void)::$_0,std::allocator<md::GlobeAdapter::_updateLabelDataManagerCallbacks(void)::$_0>,void ()(std::shared_ptr<altitude::LabelData>)>::operator()(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  char **v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  char *v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t **v27;
  _QWORD *v28;
  int v29;
  int v30;
  int v31;
  void *v32;
  uint64_t v33;
  uint64_t *v34;
  md::LabelMapTile *v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  char v43;
  unint64_t *p_shared_weak_owners;
  unint64_t v45;
  std::__shared_weak_count *shared_owners;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t **v62;
  _QWORD *v63;
  int v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  NSArray *v74;
  id v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t i;
  void *v80;
  void *v81;
  void *v82;
  uint64_t v83;
  unsigned __int8 v84;
  unsigned __int8 v85;
  char *v86;
  double v87;
  double v88;
  double v89;
  id v90;
  id v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t j;
  id v95;
  char *v96;
  void *v97;
  _QWORD *v98;
  unint64_t v99;
  __int128 v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  __int128 v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  __int128 v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  char v124;
  __int128 v125;
  unint64_t *v126;
  unint64_t v127;
  uint64_t *v128;
  uint64_t *v129;
  std::__shared_weak_count *v130;
  std::__shared_weak_count *v131;
  uint64_t v132;
  BOOL v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  uint64_t v144;
  char *v145;
  int v146;
  int v147;
  int v148;
  double v149;
  double v150;
  double v151;
  unsigned __int8 v152;
  unsigned __int8 v153;
  uint64_t v154;
  _QWORD *v155;
  _QWORD *k;
  VKTrafficIncidentFeature *v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  uint64_t v160;
  uint64_t *v161;
  unint64_t v162;
  unint64_t v163;
  _OWORD *v164;
  unint64_t v165;
  float *v166;
  float *v167;
  float v168;
  float v169;
  uint64_t v170;
  unint64_t *v171;
  unint64_t v172;
  _QWORD *v173;
  __int128 v174;
  _OWORD *v175;
  unint64_t *v176;
  unint64_t v177;
  unint64_t *v178;
  unint64_t v179;
  unint64_t *v180;
  unint64_t v181;
  void *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t *v187;
  uint64_t v188;
  uint64_t v189;
  std::__shared_weak_count *v190;
  std::__shared_weak_count *v191;
  __int128 v192;
  void *v193;
  uint64_t v194;
  md::LabelMapTile *v195;
  uint64_t v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  void *__p[2];
  __int128 v203;
  __int128 v204;
  __int128 v205;
  _BYTE v206[32];
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  unsigned int v216;
  unsigned int v217;
  float v218;
  float v219;
  uint64_t v220;

  v220 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(char ***)(a1 + 8);
  v190 = (std::__shared_weak_count *)*((_QWORD *)&v3 + 1);
  if (*((_QWORD *)&v3 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v3 + 1) + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v8 = v4[1];
  v7 = (unint64_t)v4[2];
  v192 = v3;
  if ((unint64_t)v8 >= v7)
  {
    v10 = *v4;
    v11 = (v8 - *v4) >> 4;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 60)
      abort();
    v13 = v7 - (_QWORD)v10;
    if (v13 >> 3 > v12)
      v12 = v13 >> 3;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14 >> 60)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v15 = (char *)operator new(16 * v14);
    v16 = &v15[16 * v11];
    v17 = &v15[16 * v14];
    *(_QWORD *)&v3 = v192;
    *(_OWORD *)v16 = v192;
    v9 = v16 + 16;
    if (v8 == v10)
    {
      *v4 = v16;
      v4[1] = v9;
      v4[2] = v17;
    }
    else
    {
      do
      {
        v18 = *((_OWORD *)v8 - 1);
        v8 -= 16;
        *((_OWORD *)v16 - 1) = v18;
        v16 -= 16;
        *(_QWORD *)v8 = 0;
        *((_QWORD *)v8 + 1) = 0;
      }
      while (v8 != v10);
      v8 = *v4;
      v19 = v4[1];
      *v4 = v16;
      v4[1] = v9;
      v4[2] = v17;
      while (v19 != v8)
      {
        v20 = (std::__shared_weak_count *)*((_QWORD *)v19 - 1);
        if (v20)
        {
          std::__shared_weak_count::__release_weak(v20);
          *(_QWORD *)&v3 = v192;
        }
        v19 -= 16;
      }
    }
    if (v8)
    {
      operator delete(v8);
      *(_QWORD *)&v3 = v192;
    }
  }
  else
  {
    *(_OWORD *)v8 = v3;
    v9 = v8 + 16;
  }
  v4[1] = v9;
  v21 = *(_QWORD *)(a1 + 8);
  v196 = v3;
  v22 = (*(uint64_t (**)(void))(*(_QWORD *)v3 + 72))();
  v24 = v22;
  v25 = v23;
  v27 = (uint64_t **)(v21 + 32);
  v26 = *(_QWORD *)(v21 + 32);
  if (v26)
  {
    while (1)
    {
      while (1)
      {
        v28 = (_QWORD *)v26;
        v29 = *(_DWORD *)(v26 + 32);
        if (v29 == (_DWORD)v22)
          break;
        if (v29 > (int)v22)
          goto LABEL_25;
        if (v29 >= (int)v22)
          goto LABEL_42;
LABEL_36:
        v26 = v28[1];
        if (!v26)
        {
          v27 = (uint64_t **)(v28 + 1);
          goto LABEL_39;
        }
      }
      v30 = *((_DWORD *)v28 + 9);
      if (v30 != HIDWORD(v22))
      {
        if (v30 > SHIDWORD(v22))
          goto LABEL_25;
        if (v30 >= SHIDWORD(v22))
        {
LABEL_42:
          v32 = v28;
          goto LABEL_43;
        }
        goto LABEL_36;
      }
      v31 = *((_DWORD *)v28 + 10);
      if (v31 <= v23)
      {
        if (v31 >= v23)
          goto LABEL_42;
        goto LABEL_36;
      }
LABEL_25:
      v26 = *v28;
      v27 = (uint64_t **)v28;
      if (!*v28)
        goto LABEL_39;
    }
  }
  v28 = (_QWORD *)(v21 + 32);
LABEL_39:
  v32 = operator new(0x40uLL);
  *((_QWORD *)v32 + 4) = v24;
  *((_DWORD *)v32 + 10) = v25;
  *((_QWORD *)v32 + 6) = 0;
  *((_QWORD *)v32 + 7) = 0;
  *(_QWORD *)v32 = 0;
  *((_QWORD *)v32 + 1) = 0;
  *((_QWORD *)v32 + 2) = v28;
  *v27 = (uint64_t *)v32;
  v33 = **(_QWORD **)(v21 + 24);
  v34 = (uint64_t *)v32;
  if (v33)
  {
    *(_QWORD *)(v21 + 24) = v33;
    v34 = *v27;
  }
  std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v21 + 32), v34);
  ++*(_QWORD *)(v21 + 40);
LABEL_43:
  v35 = (md::LabelMapTile *)*((_QWORD *)v32 + 6);
  v36 = (std::__shared_weak_count *)*((_QWORD *)v32 + 7);
  v195 = v35;
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v38 = __ldxr(p_shared_owners);
    while (__stxr(v38 + 1, p_shared_owners));
  }
  if (v195)
  {
    v191 = v36;
    goto LABEL_95;
  }
  v39 = (std::__shared_weak_count *)operator new(0x220uLL);
  v39->__shared_owners_ = 0;
  v40 = (unint64_t *)&v39->__shared_owners_;
  v39->__shared_weak_owners_ = 0;
  v41 = v39;
  v39->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DBCC0;
  v42 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v196 + 72))(v196);
  v206[0] = -1;
  v206[1] = v43;
  *(_DWORD *)&v206[4] = ~(-1 << v43) - HIDWORD(v42);
  *(_DWORD *)&v206[8] = v42;
  v195 = (md::LabelMapTile *)&v41[1];
  md::LabelMapTile::LabelMapTile((md::LabelMapTile *)&v41[1], (const QuadTile *)v206);
  v191 = v41;
  v41[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42948C0;
  *(_OWORD *)&v41[21].__shared_weak_owners_ = v192;
  if (v190)
  {
    p_shared_weak_owners = (unint64_t *)&v190->__shared_weak_owners_;
    do
      v45 = __ldxr(p_shared_weak_owners);
    while (__stxr(v45 + 1, p_shared_weak_owners));
  }
  LOBYTE(v41[22].__shared_owners_) = 0;
  shared_owners = (std::__shared_weak_count *)v41[4].__shared_owners_;
  if (shared_owners)
  {
    if (shared_owners->__shared_owners_ != -1)
      goto LABEL_64;
    do
      v47 = __ldxr(v40);
    while (__stxr(v47 + 1, v40));
    v48 = (unint64_t *)&v41->__shared_weak_owners_;
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 1, v48));
    v41[4].__vftable = (std::__shared_weak_count_vtbl *)v195;
    v41[4].__shared_owners_ = (uint64_t)v41;
    std::__shared_weak_count::__release_weak(shared_owners);
  }
  else
  {
    do
      v50 = __ldxr(v40);
    while (__stxr(v50 + 1, v40));
    v51 = (unint64_t *)&v41->__shared_weak_owners_;
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 1, v51));
    v41[4].__vftable = (std::__shared_weak_count_vtbl *)v195;
    v41[4].__shared_owners_ = (uint64_t)v41;
  }
  do
    v53 = __ldaxr(v40);
  while (__stlxr(v53 - 1, v40));
  if (!v53)
  {
    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
    std::__shared_weak_count::__release_weak(v41);
  }
LABEL_64:
  if (v36)
  {
    v54 = (unint64_t *)&v36->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v56 = *(_QWORD *)(a1 + 8);
  v57 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v196 + 72))(v196);
  v59 = v57;
  v60 = v58;
  v62 = (uint64_t **)(v56 + 32);
  v61 = *(_QWORD *)(v56 + 32);
  if (v61)
  {
    while (1)
    {
      v63 = (_QWORD *)v61;
      v64 = *(_DWORD *)(v61 + 32);
      if (v64 != (_DWORD)v57)
        break;
      v65 = *((_DWORD *)v63 + 9);
      if (v65 == HIDWORD(v57))
      {
        v66 = *((_DWORD *)v63 + 10);
        if (v66 <= v58)
        {
          if (v66 >= v58)
          {
            v182 = v63;
            goto LABEL_88;
          }
          goto LABEL_82;
        }
LABEL_71:
        v61 = *v63;
        v62 = (uint64_t **)v63;
        if (!*v63)
          goto LABEL_85;
      }
      else
      {
        if (v65 > SHIDWORD(v57))
          goto LABEL_71;
        if (v65 >= SHIDWORD(v57))
        {
          v182 = v63;
          goto LABEL_88;
        }
LABEL_82:
        v61 = v63[1];
        if (!v61)
        {
          v62 = (uint64_t **)(v63 + 1);
          goto LABEL_85;
        }
      }
    }
    if (v64 <= (int)v57)
    {
      if (v64 >= (int)v57)
      {
        v182 = v63;
        goto LABEL_88;
      }
      goto LABEL_82;
    }
    goto LABEL_71;
  }
  v63 = (_QWORD *)(v56 + 32);
LABEL_85:
  v182 = operator new(0x40uLL);
  *((_QWORD *)v182 + 4) = v59;
  *((_DWORD *)v182 + 10) = v60;
  *((_QWORD *)v182 + 6) = 0;
  *((_QWORD *)v182 + 7) = 0;
  *(_QWORD *)v182 = 0;
  *((_QWORD *)v182 + 1) = 0;
  *((_QWORD *)v182 + 2) = v63;
  *v62 = (uint64_t *)v182;
  v67 = **(_QWORD **)(v56 + 24);
  v68 = (uint64_t *)v182;
  if (v67)
  {
    *(_QWORD *)(v56 + 24) = v67;
    v68 = *v62;
  }
  std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v56 + 32), v68);
  ++*(_QWORD *)(v56 + 40);
  do
LABEL_88:
    v69 = __ldxr(v40);
  while (__stxr(v69 + 1, v40));
  v70 = (std::__shared_weak_count *)*((_QWORD *)v182 + 7);
  *((_QWORD *)v182 + 6) = v195;
  *((_QWORD *)v182 + 7) = v191;
  if (v70)
  {
    v71 = (unint64_t *)&v70->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  *(_BYTE *)(*(_QWORD *)(a1 + 8) + 48) = 1;
LABEL_95:
  v73 = *(_QWORD *)(a1 + 24);
  if (!*((_BYTE *)v195 + 512))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v196 + 40))(v196);
    v193 = (void *)objc_claimAutoreleasedReturnValue();
    if (v193)
    {
      v74 = (NSArray *)objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v75 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v200 = 0u;
      v201 = 0u;
      v198 = 0u;
      v199 = 0u;
      v76 = v193;
      v77 = objc_msgSend(v76, "countByEnumeratingWithState:objects:count:", &v198, &v215, 16);
      if (v77)
      {
        v78 = *(_QWORD *)v199;
        do
        {
          for (i = 0; i != v77; ++i)
          {
            if (*(_QWORD *)v199 != v78)
              objc_enumerationMutation(v76);
            v80 = *(void **)(*((_QWORD *)&v198 + 1) + 8 * i);
            if (objc_msgSend(v80, "iconsCount"))
            {
              objc_msgSend(v80, "icons");
              v81 = (void *)objc_claimAutoreleasedReturnValue();
              -[NSArray addObjectsFromArray:](v74, "addObjectsFromArray:", v81);

            }
            if (objc_msgSend(v80, "attributionsCount"))
            {
              objc_msgSend(v80, "attributions");
              v82 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v75, "addObjectsFromArray:", v82);

            }
          }
          v77 = objc_msgSend(v76, "countByEnumeratingWithState:objects:count:", &v198, &v215, 16);
        }
        while (v77);
      }

      v83 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v196 + 72))(v196);
      v85 = v84;
      v86 = (char *)operator new(0x70uLL);
      v87 = 1.0 / (double)(1 << v85);
      v88 = v87 * (double)((-1 << v85) + HIDWORD(v83) + (1 << v85));
      *((_QWORD *)v86 + 1) = 0;
      v89 = v87 * (double)(int)v83;
      *((_QWORD *)v86 + 2) = 0;
      *(_QWORD *)v86 = &off_1E42DAE88;
      *(_OWORD *)(v86 + 24) = 0u;
      *(_OWORD *)(v86 + 40) = 0u;
      *(_OWORD *)(v86 + 56) = 0u;
      *((_DWORD *)v86 + 18) = v85;
      *((double *)v86 + 10) = v89;
      *((double *)v86 + 11) = v88;
      *((double *)v86 + 12) = v89 + v87;
      *((double *)v86 + 13) = v88 + v87;
      md::ResourceInfo::setResourceNames((md::ResourceInfo *)(v86 + 24), v74);
      v187 = (unint64_t *)(v86 + 8);
      v189 = v73;
      v90 = v75;
      *(_OWORD *)__p = 0u;
      v203 = 0u;
      v204 = 0u;
      v205 = 0u;
      v91 = v90;
      v92 = objc_msgSend(v91, "countByEnumeratingWithState:objects:count:", __p, v206, 16);
      if (v92)
      {
        v93 = *(_QWORD *)v203;
        do
        {
          for (j = 0; j != v92; ++j)
          {
            if (*(_QWORD *)v203 != v93)
              objc_enumerationMutation(v91);
            v97 = (void *)*((_QWORD *)__p[1] + j);
            v98 = (_QWORD *)*((_QWORD *)v86 + 7);
            if ((unint64_t)v98 < *((_QWORD *)v86 + 8))
            {
              v95 = v97;
              *v98 = &off_1E42B4B30;
              v98[1] = v95;
              v96 = (char *)(v98 + 3);
            }
            else
            {
              v96 = std::vector<geo::_retain_ptr<GEOAttribution * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::__emplace_back_slow_path<GEOAttribution * const {__strong}&,geo::memory_management_mode const&>((void **)v86 + 6, v97);
            }
            *((_QWORD *)v86 + 7) = v96;
          }
          v92 = objc_msgSend(v91, "countByEnumeratingWithState:objects:count:", __p, v206, 16);
        }
        while (v92);
      }

      v73 = v189;
      md::LabelMapTile::loadResourcesTile((uint64_t)v195, (uint64_t)(v86 + 24), (std::__shared_weak_count *)v86);
      *((_BYTE *)v195 + 512) = 1;
      do
        v99 = __ldaxr(v187);
      while (__stlxr(v99 - 1, v187));
      if (!v99)
      {
        (*(void (**)(char *))(*(_QWORD *)v86 + 16))(v86);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v86);
      }

    }
  }
  v213 = 0u;
  v214 = 0u;
  v211 = 0u;
  v212 = 0u;
  v209 = 0u;
  v210 = 0u;
  v207 = 0u;
  v208 = 0u;
  memset(v206, 0, sizeof(v206));
  (**(void (***)(__int128 *__return_ptr, uint64_t, uint64_t))v196)(&v215, v196, 2);
  v100 = v215;
  v215 = 0uLL;
  v101 = (std::__shared_weak_count *)*((_QWORD *)&v207 + 1);
  v207 = v100;
  if (v101)
  {
    v102 = (unint64_t *)&v101->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = (std::__shared_weak_count *)*((_QWORD *)&v215 + 1);
  if (*((_QWORD *)&v215 + 1))
  {
    v105 = (unint64_t *)(*((_QWORD *)&v215 + 1) + 8);
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  (**(void (***)(__int128 *__return_ptr, uint64_t, uint64_t))v196)(&v215, v196, 4);
  v107 = v215;
  v215 = 0uLL;
  v108 = *(std::__shared_weak_count **)&v206[24];
  *(_OWORD *)&v206[16] = v107;
  if (v108)
  {
    v109 = (unint64_t *)&v108->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = (std::__shared_weak_count *)*((_QWORD *)&v215 + 1);
  if (*((_QWORD *)&v215 + 1))
  {
    v112 = (unint64_t *)(*((_QWORD *)&v215 + 1) + 8);
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  (**(void (***)(__int128 *__return_ptr, uint64_t, uint64_t))v196)(&v215, v196, 1);
  v114 = v215;
  v215 = 0uLL;
  v115 = *(std::__shared_weak_count **)&v206[8];
  *(_OWORD *)v206 = v114;
  if (v115)
  {
    v116 = (unint64_t *)&v115->__shared_owners_;
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  v118 = (std::__shared_weak_count *)*((_QWORD *)&v215 + 1);
  if (*((_QWORD *)&v215 + 1))
  {
    v119 = (unint64_t *)(*((_QWORD *)&v215 + 1) + 8);
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
    }
  }
  md::LabelMapTile::loadLabelTiles(v195, (const md::LabelTileSet *)v206);
  if (!*(_BYTE *)(v73 + 3568) && !*(_BYTE *)(v73 + 3569)
    || (v121 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v73 + 168) + 64) + 40))(*(_QWORD *)(*(_QWORD *)(v73 + 168) + 64))) == 0)
  {
    v143 = 0;
    v144 = 0;
    goto LABEL_228;
  }
  v122 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v196 + 72))(v196);
  v124 = v123;
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v196 + 8))(&v215);
  v125 = v215;
  if (*((_QWORD *)&v215 + 1))
  {
    v126 = (unint64_t *)(*((_QWORD *)&v215 + 1) + 8);
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
    if (!v127)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v125 + 1) + 16))(*((_QWORD *)&v125 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v125 + 1));
      if ((_QWORD)v125)
        goto LABEL_162;
LABEL_226:
      v174 = 0uLL;
      goto LABEL_227;
    }
  }
  if (!(_QWORD)v125)
    goto LABEL_226;
LABEL_162:
  std::mutex::lock((std::mutex *)v121);
  v128 = *(uint64_t **)(v121 + 64);
  v188 = v121 + 64;
  v129 = *(uint64_t **)(v121 + 72);
  while (v128 != v129)
  {
    v130 = (std::__shared_weak_count *)v128[1];
    if (v130)
    {
      v131 = std::__shared_weak_count::lock(v130);
      *((_QWORD *)&v197 + 1) = v131;
      if (v131)
      {
        v132 = *v128;
        *(_QWORD *)&v197 = *v128;
        if (!*v128)
        {
          v137 = v131;
LABEL_179:
          v138 = (unint64_t *)&v137->__shared_owners_;
          do
            v139 = __ldaxr(v138);
          while (__stlxr(v139 - 1, v138));
          if (!v139)
          {
            ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
            std::__shared_weak_count::__release_weak(v137);
          }
          goto LABEL_163;
        }
        (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v196 + 8))(&v215);
        if (*(_QWORD *)(v132 + 112) == (_QWORD)v215)
        {
          (*(void (**)(void **__return_ptr))(*(_QWORD *)v196 + 16))(__p);
          v140 = (std::__shared_weak_count *)__p[1];
          v133 = *(void **)(v132 + 128) == __p[0];
          if (__p[1])
          {
            v141 = (unint64_t *)((char *)__p[1] + 8);
            do
              v142 = __ldaxr(v141);
            while (__stlxr(v142 - 1, v141));
            if (!v142)
            {
              ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
              std::__shared_weak_count::__release_weak(v140);
            }
          }
        }
        else
        {
          v133 = 0;
        }
        v134 = (std::__shared_weak_count *)*((_QWORD *)&v215 + 1);
        if (*((_QWORD *)&v215 + 1))
        {
          v135 = (unint64_t *)(*((_QWORD *)&v215 + 1) + 8);
          do
            v136 = __ldaxr(v135);
          while (__stlxr(v136 - 1, v135));
          if (!v136)
          {
            ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
            std::__shared_weak_count::__release_weak(v134);
          }
        }
        if (v133)
          goto LABEL_222;
        v137 = (std::__shared_weak_count *)*((_QWORD *)&v197 + 1);
        if (*((_QWORD *)&v197 + 1))
          goto LABEL_179;
      }
    }
LABEL_163:
    v128 += 2;
  }
  v194 = v121;
  v145 = (char *)operator new(0x100uLL);
  *((_QWORD *)v145 + 1) = 0;
  *((_QWORD *)v145 + 2) = 0;
  *(_QWORD *)v145 = &off_1E42DB710;
  *((_QWORD *)v145 + 3) = &off_1E4291C18;
  v146 = 1 << v124;
  v147 = ((~(-1 << v124) - HIDWORD(v122)) % v146 + v146) % v146;
  v148 = ((int)v122 % v146 + v146) % v146;
  v145[32] = -1;
  v145[33] = v124;
  *((_DWORD *)v145 + 9) = v147;
  *((_DWORD *)v145 + 10) = v148;
  *((_DWORD *)v145 + 14) = vcvtmd_s64_f64((double)(int)v122 / (double)(1 << v124));
  v149 = 1.0 / (double)(1 << v124);
  v150 = v149 * (double)v148;
  v151 = v149 * (double)((1 << v124) + ~v147);
  *((double *)v145 + 8) = v150;
  *((double *)v145 + 9) = v151;
  *((double *)v145 + 10) = v150 + v149;
  *((double *)v145 + 11) = v151 + v149;
  v145[96] = 0;
  *((_QWORD *)v145 + 13) = 0;
  *((_QWORD *)v145 + 14) = 0;
  *((_QWORD *)v145 + 15) = 0;
  {
    v183 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v183, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  *((_QWORD *)v145 + 16) = mdm::Allocator::instance(void)::alloc;
  (*(void (**)(uint64_t))(*(_QWORD *)v196 + 8))(v196);
  (*(void (**)(uint64_t))(*(_QWORD *)v196 + 16))(v196);
  *((_QWORD *)v145 + 21) = 0;
  *((_QWORD *)v145 + 22) = 0;
  {
    v184 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v184, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  *((_QWORD *)v145 + 23) = mdm::Allocator::instance(void)::alloc;
  *((_QWORD *)v145 + 24) = 0;
  {
    v185 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v185, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v154 = mdm::Allocator::instance(void)::alloc;
  *((_QWORD *)v145 + 28) = 0;
  *((_QWORD *)v145 + 25) = v154;
  *((_QWORD *)v145 + 26) = 0;
  *((_DWORD *)v145 + 54) = 1065353216;
  *((_QWORD *)v145 + 29) = 0;
  *((_QWORD *)v145 + 30) = 0;
  {
    v186 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v186, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  *((_QWORD *)v145 + 31) = mdm::Allocator::instance(void)::alloc;
  (*(void (**)(void **__return_ptr))(*(_QWORD *)v196 + 32))(__p);
  v155 = __p[0];
  for (k = __p[1]; v155 != k; ++v155)
  {
    if (*v155)
    {
      v157 = -[VKTrafficIncidentFeature initWithIncidentData:]([VKTrafficIncidentFeature alloc], "initWithIncidentData:", *v155);
      v158 = (std::__shared_weak_count *)operator new(0x1A0uLL);
      *(_OWORD *)&v158->__shared_owners_ = 0u;
      v159 = (unint64_t *)&v158->__shared_owners_;
      v158->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD700;
      v215 = 0u;
      v160 = md::TrafficIncidentLabelFeature::TrafficIncidentLabelFeature((uint64_t)&v158[1], v157, &v215);
      v161 = (uint64_t *)*((_QWORD *)v145 + 29);
      v162 = *((_QWORD *)v145 + 30);
      *(_QWORD *)&v198 = v160;
      *((_QWORD *)&v198 + 1) = v158;
      if ((unint64_t)v161 >= v162)
      {
        v164 = std::vector<std::shared_ptr<md::LabelMarker>,geo::StdAllocator<std::shared_ptr<md::LabelMarker>,mdm::Allocator>>::__push_back_slow_path<std::shared_ptr<md::LabelMarker> const&>((uint64_t)(v145 + 224), &v198);
      }
      else
      {
        if (v161)
        {
          *v161 = v160;
          v161[1] = (uint64_t)v158;
          do
            v163 = __ldxr(v159);
          while (__stxr(v163 + 1, v159));
        }
        v164 = v161 + 2;
      }
      *((_QWORD *)v145 + 29) = v164;
      do
        v165 = __ldaxr(v159);
      while (__stlxr(v165 - 1, v159));
      if (!v165)
      {
        ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
        std::__shared_weak_count::__release_weak(v158);
      }

    }
  }
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v196 + 24))(&v198);
  v166 = (float *)*((_QWORD *)&v198 + 1);
  v167 = (float *)v198;
  if (*((_QWORD *)&v198 + 1) != (_QWORD)v198)
  {
    do
    {
      v168 = v167[4];
      v169 = v167[5] + v168;
      v170 = *((_QWORD *)v167 + 1);
      *(_QWORD *)&v215 = *(_QWORD *)v167;
      *((_QWORD *)&v215 + 1) = v170;
      v216 = vcvtms_s32_f32(v168);
      v217 = vcvtms_s32_f32(v169);
      v218 = v168 - floorf(v168);
      v219 = v169 - floorf(v169);
      md::TrafficRoads::addRoadPiece((float *)v145 + 42, (unint64_t *)&v215);
      v167 += 6;
    }
    while (v167 != v166);
    v166 = (float *)v198;
  }
  v121 = v194;
  if (v166)
  {
    *((_QWORD *)&v198 + 1) = v166;
    operator delete(v166);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  *(_QWORD *)&v197 = v145 + 24;
  *((_QWORD *)&v197 + 1) = v145;
  v171 = (unint64_t *)(v145 + 16);
  *(_QWORD *)&v215 = v145 + 24;
  *((_QWORD *)&v215 + 1) = v145;
  do
    v172 = __ldxr(v171);
  while (__stxr(v172 + 1, v171));
  v173 = *(_QWORD **)(v194 + 72);
  if ((unint64_t)v173 >= *(_QWORD *)(v194 + 80))
  {
    v175 = std::vector<std::weak_ptr<md::LabelTrafficTile>,geo::StdAllocator<std::weak_ptr<md::LabelTrafficTile>,mdm::Allocator>>::__push_back_slow_path<std::weak_ptr<md::LabelTrafficTile>>(v188, (uint64_t)&v215);
    v145 = (char *)*((_QWORD *)&v215 + 1);
    *(_QWORD *)(v194 + 72) = v175;
    if (v145)
      goto LABEL_221;
  }
  else
  {
    if (v173)
    {
      *v173 = v145 + 24;
      v173[1] = v145;
      v215 = 0uLL;
      v145 = 0;
    }
    *(_QWORD *)(v194 + 72) = v173 + 2;
    if (v145)
LABEL_221:
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v145);
  }
LABEL_222:
  std::mutex::unlock((std::mutex *)v121);
  v174 = v197;
LABEL_227:
  v143 = (std::__shared_weak_count *)*((_QWORD *)&v174 + 1);
  v144 = v174;
LABEL_228:
  md::LabelMapTile::loadTrafficTile((uint64_t)v195, v144, v143);
  if (v143)
  {
    v176 = (unint64_t *)&v143->__shared_owners_;
    do
      v177 = __ldaxr(v176);
    while (__stlxr(v177 - 1, v176));
    if (!v177)
    {
      ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
      std::__shared_weak_count::__release_weak(v143);
    }
  }
  md::LabelTileSet::~LabelTileSet((md::LabelTileSet *)v206);
  if (v191)
  {
    v178 = (unint64_t *)&v191->__shared_owners_;
    do
      v179 = __ldaxr(v178);
    while (__stlxr(v179 - 1, v178));
    if (!v179)
    {
      ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
      std::__shared_weak_count::__release_weak(v191);
    }
  }
  if (v190)
  {
    v180 = (unint64_t *)&v190->__shared_owners_;
    do
      v181 = __ldaxr(v180);
    while (__stlxr(v181 - 1, v180));
    if (!v181)
    {
      ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
      std::__shared_weak_count::__release_weak(v190);
    }
  }
}

void sub_19FA35144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, std::__shared_weak_count *a16, std::mutex *a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  uint64_t v41;
  std::__shared_weak_count *v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  uint64_t *v46;
  unint64_t v47;

  v43 = *(std::__shared_weak_count **)(v41 - 216);
  if (v43)
    std::__shared_weak_count::__release_weak(v43);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  std::mutex::unlock(a17);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  md::LabelTileSet::~LabelTileSet((md::LabelTileSet *)&a41);
  if (a16)
  {
    p_shared_owners = (unint64_t *)&a16->__shared_owners_;
    do
      v45 = __ldaxr(p_shared_owners);
    while (__stlxr(v45 - 1, p_shared_owners));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))a16->__on_zero_shared)(a16);
      std::__shared_weak_count::__release_weak(a16);
    }
  }
  if (a15)
  {
    v46 = &a15->__shared_owners_;
    do
      v47 = __ldaxr((unint64_t *)v46);
    while (__stlxr(v47 - 1, (unint64_t *)v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))a15->__on_zero_shared)(a15);
      std::__shared_weak_count::__release_weak(a15);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<md::HybridLabelMapTile>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DBCC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::HybridLabelMapTile>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DBCC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::HybridLabelMapTile>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

int32x2_t md::OcclusionManager::worldTraitsDidChange(md::OcclusionManager *this)
{
  uint64_t v1;
  int32x2_t result;

  v1 = *(_QWORD *)(*((_QWORD *)this + 1) + 232);
  *((_BYTE *)this + 156) = *(_BYTE *)(v1 + 17) ^ 1;
  *((_BYTE *)this + 128) = *(_BYTE *)(v1 + 16);
  *((_BYTE *)this + 157) = *(_BYTE *)(v1 + 31);
  *((_DWORD *)this + 36) = *(_DWORD *)(v1 + 40);
  result = vrev64_s32(*(int32x2_t *)(v1 + 44));
  *(int32x2_t *)((char *)this + 148) = result;
  return result;
}

void md::OcclusionContext::~OcclusionContext(md::OcclusionContext *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  v2 = *((_QWORD *)this + 16);
  if (v2)
  {
    *((_QWORD *)this + 17) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 19) + 40))(*((_QWORD *)this + 19), v2, *((_QWORD *)this + 18) - v2);
  }
  v3 = *((_QWORD *)this + 12);
  if (v3)
  {
    v4 = *((_QWORD *)this + 13);
    v5 = *((_QWORD *)this + 12);
    if (v4 != v3)
    {
      do
      {
        v6 = *(_QWORD *)(v4 - 8);
        *(_QWORD *)(v4 - 8) = 0;
        if (v6)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 8))(v6, v5);
        v7 = *(std::__shared_weak_count **)(v4 - 16);
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v9 = __ldaxr(p_shared_owners);
          while (__stlxr(v9 - 1, p_shared_owners));
          if (!v9)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v7->__on_zero_shared)(v7, v5);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
        v4 -= 24;
      }
      while (v4 != v3);
      v5 = *((_QWORD *)this + 12);
    }
    *((_QWORD *)this + 13) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 15) + 40))(*((_QWORD *)this + 15), v5, *((_QWORD *)this + 14) - v5);
  }
  v10 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (std::__shared_weak_count *)*((_QWORD *)this + 9);
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

uint64_t std::deque<std::shared_ptr<md::OcclusionQuery>>::~deque[abi:nn180100](uint64_t a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v4 = (_QWORD *)(a1 + 40);
    v3 = *(void ***)(a1 + 8);
  }
  else
  {
    v4 = (_QWORD *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 32);
    v6 = &v2[v5 >> 8];
    v7 = (uint64_t)*v6 + 16 * v5;
    v8 = *(uint64_t *)((char *)v2 + (((*(_QWORD *)(a1 + 40) + v5) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (*(_BYTE *)(a1 + 40) + v5);
    if (v7 != v8)
    {
      do
      {
        v9 = *(std::__shared_weak_count **)(v7 + 8);
        if (v9)
        {
          p_shared_owners = (unint64_t *)&v9->__shared_owners_;
          do
            v11 = __ldaxr(p_shared_owners);
          while (__stlxr(v11 - 1, p_shared_owners));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        v7 += 16;
        if (v7 - (_QWORD)*v6 == 4096)
        {
          v12 = (uint64_t)v6[1];
          ++v6;
          v7 = v12;
        }
      }
      while (v7 != v8);
      v2 = *(void ***)(a1 + 8);
      v3 = *(void ***)(a1 + 16);
    }
  }
  *v4 = 0;
  v13 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v13 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v14 = v13 >> 3;
  if (v14 == 1)
  {
    v15 = 128;
    goto LABEL_20;
  }
  if (v14 == 2)
  {
    v15 = 256;
LABEL_20:
    *(_QWORD *)(a1 + 32) = v15;
  }
  if (v2 != v3)
  {
    do
    {
      v16 = *v2++;
      operator delete(v16);
    }
    while (v2 != v3);
    v18 = *(_QWORD *)(a1 + 8);
    v17 = *(_QWORD *)(a1 + 16);
    if (v17 != v18)
      *(_QWORD *)(a1 + 16) = v17 + ((v18 - v17 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__shared_ptr_emplace<ggl::OcclusionLine::OcclusionLinePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEF10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::OcclusionLine::OcclusionLinePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEF10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::OcclusionLine::OcclusionLinePipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ggl::ConstantDataTyped<ggl::OcclusionLine::View>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::OcclusionLine::View>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::OcclusionLine::View>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1408;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::OcclusionLine::View>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1408;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::OcclusionLine::View>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void md::OcclusionManager::~OcclusionManager(md::OcclusionManager *this)
{
  md::OcclusionManager ***v2;
  md::OcclusionManager **v3;
  md::OcclusionManager **v4;
  md::OcclusionManager **v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;

  v2 = *(md::OcclusionManager ****)(*((_QWORD *)this + 1) + 168);
  v3 = v2[1];
  v4 = *v2;
  if (*v2 != v3)
  {
    while (*v4 != this)
    {
      if (++v4 == v3)
      {
        v4 = v2[1];
        break;
      }
    }
  }
  v5 = v4 + 1;
  if (v4 == v3 || v5 == v3)
  {
    if (v4 != v3)
LABEL_16:
      v2[1] = v4;
  }
  else
  {
    do
    {
      if (*v5 != this)
        *v4++ = *v5;
      ++v5;
    }
    while (v5 != v3);
    if (v4 != v2[1])
      goto LABEL_16;
  }
  md::OcclusionContext::~OcclusionContext((md::OcclusionManager *)((char *)this + 128));
  v7 = *((_QWORD *)this + 12);
  if (v7)
  {
    v8 = *((_QWORD *)this + 13);
    v9 = *((_QWORD *)this + 12);
    if (v8 != v7)
    {
      do
      {
        v10 = *(std::__shared_weak_count **)(v8 - 8);
        if (v10)
        {
          p_shared_owners = (unint64_t *)&v10->__shared_owners_;
          do
            v12 = __ldaxr(p_shared_owners);
          while (__stlxr(v12 - 1, p_shared_owners));
          if (!v12)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v10->__on_zero_shared)(v10, v9);
            std::__shared_weak_count::__release_weak(v10);
          }
        }
        v8 -= 16;
      }
      while (v8 != v7);
      v9 = *((_QWORD *)this + 12);
    }
    *((_QWORD *)this + 13) = v7;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 15) + 40))(*((_QWORD *)this + 15), v9, *((_QWORD *)this + 14) - v9);
  }
  std::deque<std::shared_ptr<md::OcclusionQuery>>::~deque[abi:nn180100]((uint64_t)this + 48);
  v13 = *((_QWORD *)this + 2);
  if (v13)
  {
    v14 = *((_QWORD *)this + 3);
    v15 = *((_QWORD *)this + 2);
    if (v14 != v13)
    {
      do
      {
        v16 = *(std::__shared_weak_count **)(v14 - 8);
        if (v16)
        {
          v17 = (unint64_t *)&v16->__shared_owners_;
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v16->__on_zero_shared)(v16, v15);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
        v14 -= 16;
      }
      while (v14 != v13);
      v15 = *((_QWORD *)this + 2);
    }
    *((_QWORD *)this + 3) = v13;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 5) + 40))(*((_QWORD *)this + 5), v15, *((_QWORD *)this + 4) - v15);
  }
}

void md::OcclusionManager::addQuery(uint64_t a1, __int128 *a2)
{
  char *v2;
  char *v3;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 v13;
  char **v14;
  char **v15;
  char ***v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  __int128 v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  __int128 v34;
  _QWORD *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;

  v2 = **(char ***)a2;
  v3 = *(char **)(*(_QWORD *)a2 + 8);
  if (v2 == v3)
    return;
  v6 = v3 - v2 - 248;
  if (v6 < 0xF8)
  {
    v7 = 0;
    goto LABEL_8;
  }
  v8 = 0;
  v9 = 0;
  v10 = v6 / 0xF8 + 1;
  v11 = v2 + 264;
  v12 = v10 & 0x3FFFFFFFFFFFFFELL;
  do
  {
    v8 += (uint64_t)(*(v11 - 31) - *(v11 - 32)) >> 3;
    v9 += (uint64_t)(*v11 - *(v11 - 1)) >> 3;
    v11 += 62;
    v12 -= 2;
  }
  while (v12);
  v7 = v9 + v8;
  if (v10 != (v10 & 0x3FFFFFFFFFFFFFELL))
  {
    v2 += 248 * (v10 & 0x3FFFFFFFFFFFFFELL);
    do
    {
LABEL_8:
      v7 += (uint64_t)(*((_QWORD *)v2 + 2) - *((_QWORD *)v2 + 1)) >> 3;
      v2 += 248;
    }
    while (v2 != v3);
  }
  if (v7)
  {
    v13 = atomic_load((unsigned __int8 *)(*(_QWORD *)a2 + 286));
    if ((v13 & 1) != 0)
    {
      v14 = *(char ***)a2;
      if (!*(_BYTE *)(*(_QWORD *)a2 + 282))
      {
        *((_BYTE *)v14 + 282) = 1;
        atomic_store(0, (unsigned __int8 *)v14 + 286);
        v15 = *(char ***)a2;
        *(_BYTE *)(*(_QWORD *)a2 + 285) = 0;
        v16 = *(char ****)(a1 + 24);
        v17 = *(_QWORD *)(a1 + 32);
        if ((unint64_t)v16 >= v17)
        {
          v22 = *(_QWORD *)(a1 + 16);
          v23 = ((uint64_t)v16 - v22) >> 4;
          v24 = v23 + 1;
          if ((unint64_t)(v23 + 1) >> 60)
            abort();
          v25 = v17 - v22;
          if (v25 >> 3 > v24)
            v24 = v25 >> 3;
          if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF0)
            v24 = 0xFFFFFFFFFFFFFFFLL;
          if (v24)
          {
            v26 = 16 * v24;
            v27 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 16 * v24, 8);
            v28 = (_OWORD *)(v27 + 16 * v23);
            v24 = v27 + v26;
            if (v27)
            {
              v29 = *a2;
              *v28 = *a2;
              if (*((_QWORD *)&v29 + 1))
              {
                v30 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
                do
                  v31 = __ldxr(v30);
                while (__stxr(v31 + 1, v30));
              }
            }
          }
          else
          {
            v28 = (_OWORD *)(16 * v23);
          }
          v21 = v28 + 1;
          v32 = *(_QWORD **)(a1 + 16);
          v33 = *(_QWORD **)(a1 + 24);
          if (v33 == v32)
          {
            *(_QWORD *)(a1 + 16) = v28;
            *(_QWORD *)(a1 + 24) = v21;
            v36 = *(_QWORD *)(a1 + 32);
            *(_QWORD *)(a1 + 32) = v24;
          }
          else
          {
            do
            {
              v34 = *((_OWORD *)v33 - 1);
              v33 -= 2;
              *--v28 = v34;
              *v33 = 0;
              v33[1] = 0;
            }
            while (v33 != v32);
            v33 = *(_QWORD **)(a1 + 16);
            v35 = *(_QWORD **)(a1 + 24);
            *(_QWORD *)(a1 + 16) = v28;
            *(_QWORD *)(a1 + 24) = v21;
            v36 = *(_QWORD *)(a1 + 32);
            *(_QWORD *)(a1 + 32) = v24;
            while (v35 != v33)
            {
              v37 = (std::__shared_weak_count *)*(v35 - 1);
              if (v37)
              {
                p_shared_owners = (unint64_t *)&v37->__shared_owners_;
                do
                  v39 = __ldaxr(p_shared_owners);
                while (__stlxr(v39 - 1, p_shared_owners));
                if (!v39)
                {
                  ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
                  std::__shared_weak_count::__release_weak(v37);
                }
              }
              v35 -= 2;
            }
          }
          if (v33)
            (*(void (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(a1 + 40) + 40))(*(_QWORD *)(a1 + 40), v33, v36 - (_QWORD)v33);
        }
        else
        {
          if (v16)
          {
            v18 = *((_QWORD *)a2 + 1);
            *v16 = v15;
            v16[1] = (char **)v18;
            if (v18)
            {
              v19 = (unint64_t *)(v18 + 8);
              do
                v20 = __ldxr(v19);
              while (__stxr(v20 + 1, v19));
            }
          }
          v21 = v16 + 2;
        }
        *(_QWORD *)(a1 + 24) = v21;
      }
    }
  }
}

void md::OcclusionQueryResource::initialize(md::OcclusionQueryResource *this)
{
  ggl::CommonMesh::Pos4Mesh *v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;

  if (!*((_QWORD *)this + 2))
  {
    v2 = (ggl::CommonMesh::Pos4Mesh *)operator new();
    ggl::CommonMesh::Pos4Mesh::Pos4Mesh(v2, "LabelQueryMesh");
    v3 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v2;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    {
      v10 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v10, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v5 = mdm::Allocator::instance(void)::alloc;
    v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc, 176, 8);
    *(_QWORD *)v6 = &off_1E42E5260;
    *(_QWORD *)(v6 + 8) = 0;
    *(_QWORD *)(v6 + 16) = 0;
    *(_QWORD *)(v6 + 24) = v5;
    *(_OWORD *)(v6 + 40) = 0u;
    *(_OWORD *)(v6 + 56) = 0u;
    *(_OWORD *)(v6 + 72) = 0u;
    *(_OWORD *)(v6 + 88) = 0u;
    *(_OWORD *)(v6 + 104) = 0u;
    *(_OWORD *)(v6 + 120) = 0u;
    *(_OWORD *)(v6 + 136) = 0u;
    *(_OWORD *)(v6 + 152) = 0u;
    *(_QWORD *)(v6 + 168) = 0;
    *(_QWORD *)(v6 + 48) = "";
    *(_QWORD *)(v6 + 56) = 0;
    *(_QWORD *)(v6 + 64) = 0;
    *(_DWORD *)(v6 + 72) = 0;
    *(_OWORD *)(v6 + 96) = 0u;
    *(_OWORD *)(v6 + 112) = 0u;
    *(_DWORD *)(v6 + 88) = 1065353216;
    *(int64x2_t *)(v6 + 128) = vdupq_n_s64(1uLL);
    *(_BYTE *)(v6 + 168) = 0;
    *(_QWORD *)(v6 + 144) = 0;
    *(_QWORD *)(v6 + 152) = 0;
    *(_WORD *)(v6 + 160) = 0;
    v7 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v6;
    *(_QWORD *)(v6 + 32) = &off_1E42B59B0;
    *(_QWORD *)this = v6 + 32;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    *(_QWORD *)(*(_QWORD *)this + 64) = *((_QWORD *)this + 2);
  }
}

void std::__shared_ptr_emplace<ggl::QueryItem,geo::StdAllocator<ggl::QueryItem,mdm::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5260;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::QueryItem,geo::StdAllocator<ggl::QueryItem,mdm::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5260;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::QueryItem,geo::StdAllocator<ggl::QueryItem,mdm::Allocator>>::__on_zero_shared(uint64_t result)
{
  *(_QWORD *)(result + 32) = &off_1E42B59B0;
  *(_QWORD *)(result + 48) = 3131955885;
  return result;
}

uint64_t std::__shared_ptr_emplace<ggl::QueryItem,geo::StdAllocator<ggl::QueryItem,mdm::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a1, 176);
}

double md::OcclusionQuery::OcclusionQuery(uint64_t a1, char a2, char a3)
{
  double result;

  *(_BYTE *)(a1 + 32) = 0;
  *(_QWORD *)a1 = a1 + 32;
  *(_QWORD *)(a1 + 8) = a1 + 32;
  *(_QWORD *)(a1 + 24) = 1;
  *(_WORD *)(a1 + 280) = 0;
  *(_BYTE *)(a1 + 282) = 0;
  *(_BYTE *)(a1 + 283) = a2;
  *(_BYTE *)(a1 + 284) = a3;
  *(_WORD *)(a1 + 285) = 256;
  *(_QWORD *)(a1 + 40) = a1 + 72;
  *(_QWORD *)(a1 + 48) = a1 + 72;
  *(_QWORD *)(a1 + 56) = a1 + 72;
  *(_QWORD *)(a1 + 64) = 5;
  *(_QWORD *)(a1 + 112) = a1 + 144;
  *(_QWORD *)(a1 + 120) = a1 + 144;
  *(_QWORD *)(a1 + 128) = a1 + 144;
  *(_QWORD *)(a1 + 136) = 3;
  result = 1.40444743e306;
  *(_OWORD *)(a1 + 232) = xmmword_19FFB2E30;
  *(_BYTE *)(a1 + 248) = 0;
  *(_BYTE *)(a1 + 260) = 0;
  *(_QWORD *)(a1 + 269) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 8) = a1 + 280;
  *(_QWORD *)(a1 + 16) = a1 + 32;
  return result;
}

uint64_t altitude::Intersector::intersectElement(_QWORD *a1, _QWORD *a2, double *a3, double *a4, double *a5, int *a6, char a7)
{
  char v7;
  double *v8;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  double v13;
  uint64_t v14;
  double *v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  float v34;
  float v35;
  float v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  float v44;
  float v45;
  float v46;
  _OWORD *v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  float32x4_t v60;
  float32x4_t v61;
  uint64_t *v62;
  uint64_t v63;
  const char **v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  float64x2_t v76;
  float64x2_t v77;
  const char *v78;
  float32x2_t v79;
  float32x2_t v80;
  int v81;
  unsigned int v82;
  uint64_t v83;
  const char *v84;
  const char *v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float *v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float32x4_t v103;
  float32x4_t v104;
  float v105;
  BOOL v106;
  float32x4_t v107;
  float v108;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  double v115;
  double v116;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  double *v131;
  const char **v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  int v140;
  float64x2_t v141;
  double v142;
  float64x2_t v143;
  double v144;
  _OWORD v145[3];
  float64x2_t v146;
  float64x2_t v147;
  uint64_t v148;
  double v149[2];

  if (a1 == a2)
  {
    LOBYTE(v12) = 0;
  }
  else
  {
    v7 = a7;
    v8 = a4;
    v10 = a2;
    v11 = a1;
    v12 = 0;
    v13 = 1.79769313e308;
    do
    {
      v15 = (double *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v11 + 24))(*v11);
      v16 = v15[4];
      v17 = v15[5];
      v18 = v15[6];
      v20 = v15[2];
      v19 = v15[3];
      v21 = v15[1];
      v22 = -(*v15 * v17 - v20 * v19);
      v23 = -(v21 * v19 - *v15 * v16);
      v24 = -(v20 * v16 - v21 * v17) - (v20 * v16 - v21 * v17);
      v25 = v22 + v22;
      v26 = v23 + v23;
      v28 = a3[1];
      v27 = a3[2];
      v29 = -(*a3 * v17 - v27 * v19);
      v30 = -(v28 * v19 - *a3 * v16);
      v31 = -(v27 * v16 - v28 * v17) - (v27 * v16 - v28 * v17);
      v32 = v29 + v29;
      v33 = v30 + v30;
      v34 = *a3 - *v15 + v26 * v16 + v31 * v18 + v32 * v17 - (v24 * v18 + v25 * v17 + v33 * v16);
      v35 = v28 - v21 + v24 * v17 + v32 * v18 + v33 * v19 - (v26 * v19 + v25 * v18 + v31 * v17);
      v36 = v27 - v20 + v25 * v19 + v31 * v16 + v33 * v18 - (v24 * v16 + v26 * v18 + v32 * v19);
      v38 = v8[1];
      v37 = v8[2];
      v39 = -(*v8 * v17 - v37 * v19);
      v40 = -(v38 * v19 - *v8 * v16);
      v41 = -(v37 * v16 - v38 * v17) - (v37 * v16 - v38 * v17);
      v42 = v39 + v39;
      v43 = v40 + v40;
      v44 = *v8 + v41 * v18 + v42 * v17 - v43 * v16;
      v45 = v38 - v41 * v17 + v42 * v18 + v43 * v19;
      v46 = v37 + v41 * v16 + v43 * v18 - v42 * v19;
      if ((v7 & 1) != 0)
        goto LABEL_8;
      v143.f64[0] = v34;
      v143.f64[1] = v35;
      v144 = v36;
      v141.f64[0] = v44;
      v141.f64[1] = v45;
      v142 = v46;
      v47 = (_OWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v11 + 56))(*v11);
      v148 = 0x7FEFFFFFFFFFFFFFLL;
      v149[0] = 0.0;
      v48 = v47[1];
      v145[0] = *v47;
      v145[1] = v48;
      v145[2] = v47[2];
      if ((karo::AxisAlignedBounding<double,3>::ray((double *)v145, &v143, &v141, &v147, &v146, v149, (double *)&v148) & 1) != 0)
      {
LABEL_8:
        v14 = *v11;
        if (*v11)
        {
          v49 = *(_QWORD *)(v14 + 216);
          v50 = *(_QWORD *)(v49 + 96);
          if (*(_QWORD *)(v50 + 8) != 2)
            goto LABEL_3;
          v51 = *(uint64_t **)(v49 + 64);
          v53 = *(_QWORD *)(v50 + 40);
          v52 = *(_QWORD *)(v50 + 48);
          if ((*(_BYTE *)(v50 + 16) & 2) == 0)
          {
            v54 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
            if (v54 != -1)
            {
              *(_QWORD *)&v145[0] = &v146;
              *(_QWORD *)&v147.f64[0] = v145;
              std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v147, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
            }
          }
          v55 = (unint64_t)(v52 - v53) >= 2 ? *(_QWORD *)(v50 + 72) : 0;
          v56 = *(_QWORD **)(v49 + 96);
          v57 = v56[6];
          v137 = v56[5];
          v58 = v56[1];
          v59 = *v51;
          v131 = (double *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v11 + 24))(*v11);
          v62 = *(uint64_t **)(v59 + 216);
          v63 = *v62;
          v64 = *(const char ***)(*v62 + 8);
          v65 = *(_QWORD *)(*v62 + 16);
          v140 = v12;
          v138 = v57;
          v139 = v58;
          v136 = v64;
          if (v65)
          {
            v66 = 0;
            v67 = -1;
            do
            {
              v68 = *v64;
              v64 += 4;
              if (!strcmp("position", v68))
                v67 = v66;
              ++v66;
            }
            while (v65 != v66);
          }
          else
          {
            v67 = -1;
          }
          v69 = *(_QWORD *)(v63 + 24);
          v71 = *(_QWORD *)(v59 + 40);
          v70 = *(_QWORD *)(v59 + 48);
          v72 = *(_QWORD *)(v59 + 8);
          v8 = a4;
          if ((*(_BYTE *)(v59 + 16) & 2) == 0)
          {
            v73 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
            if (v73 != -1)
            {
              *(_QWORD *)&v145[0] = &v146;
              *(_QWORD *)&v147.f64[0] = v145;
              std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v147, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
            }
          }
          v74 = v70 - v71 == (v70 - v71) % v72 ? 0 : *(_QWORD *)(v59 + 72);
          v7 = a7;
          v10 = a2;
          v12 = v140;
          if (v67 == -1 || v139 > v138 - v137)
          {
LABEL_3:
            LODWORD(v14) = 0;
          }
          else
          {
            v75 = 0;
            LODWORD(v14) = 0;
            v76.f64[0] = v34;
            v76.f64[1] = v35;
            v77.f64[0] = v44;
            v77.f64[1] = v45;
            v78 = &v136[4 * v67 + 3][v74];
            v79 = vcvt_f32_f64(v76);
            v80 = vcvt_f32_f64(v77);
            v81 = *a6 + 1;
            v82 = 3;
            do
            {
              v83 = *(unsigned __int16 *)(v55 + 2 * v75);
              v84 = &v78[v69 * *(unsigned __int16 *)(v55 + 2 * (v82 - 2))];
              v85 = &v78[v69 * *(unsigned __int16 *)(v55 + 2 * (v82 - 1))];
              *a6 = v81;
              v86 = *((float *)v84 + 2);
              v60.i64[0] = *(_QWORD *)v84;
              LODWORD(v87) = HIDWORD(*(_QWORD *)v84);
              v88 = *((float *)v85 + 2);
              v61.i64[0] = *(_QWORD *)v85;
              LODWORD(v89) = HIDWORD(*(_QWORD *)v85);
              v90 = COERCE_FLOAT(*(_QWORD *)v84) - v79.f32[0];
              v91 = COERCE_FLOAT(*(_QWORD *)v85) - v79.f32[0];
              v92 = (float)((float)((float)-(float)((float)((float)(v89 - v79.f32[1]) * v46)
                                                  - (float)((float)(v88 - v36) * v80.f32[1]))
                                  * v90)
                          + (float)((float)-(float)((float)(v80.f32[0] * (float)(v88 - v36)) - (float)(v91 * v46))
                                  * (float)(v87 - v79.f32[1])))
                  + (float)((float)-(float)((float)(v80.f32[1] * v91) - (float)(v80.f32[0] * (float)(v89 - v79.f32[1])))
                          * (float)(v86 - v36));
              if (v92 >= 0.0)
              {
                v93 = (float *)&v78[v69 * v83];
                v94 = *v93;
                v95 = v93[1];
                v96 = *v93 - v79.f32[0];
                v97 = v93[2];
                v98 = (float)((float)((float)-(float)((float)((float)(v95 - v79.f32[1]) * v46)
                                                    - (float)(v80.f32[1] * (float)(v97 - v36)))
                                    * v91)
                            + (float)((float)-(float)((float)(v80.f32[0] * (float)(v97 - v36)) - (float)(v96 * v46))
                                    * (float)(v89 - v79.f32[1])))
                    + (float)((float)-(float)((float)(v80.f32[1] * v96) - (float)(v80.f32[0] * (float)(v95 - v79.f32[1])))
                            * (float)(v88 - v36));
                if (v98 >= 0.0)
                {
                  v99 = (float)((float)((float)-(float)((float)((float)(v87 - v79.f32[1]) * v46)
                                                      - (float)(v80.f32[1] * (float)(v86 - v36)))
                                      * v96)
                              + (float)((float)-(float)((float)(v80.f32[0] * (float)(v86 - v36)) - (float)(v90 * v46))
                                      * (float)(v95 - v79.f32[1])))
                      + (float)((float)-(float)((float)(v80.f32[1] * v90)
                                              - (float)(v80.f32[0] * (float)(v87 - v79.f32[1])))
                              * (float)(v97 - v36));
                  if (v99 >= 0.0)
                  {
                    v100 = (float)(v92 + v98) + v99;
                    if (v100 > 0.0)
                    {
                      v101 = v93[3];
                      v102 = *((float *)v84 + 3);
                      if ((float)((float)((float)((float)((float)(v94 - v60.f32[0]) * (float)(v94 - v60.f32[0]))
                                                 + (float)((float)(v95 - v87) * (float)(v95 - v87)))
                                         + (float)((float)(v97 - v86) * (float)(v97 - v86)))
                                 + (float)((float)(v101 - v102) * (float)(v101 - v102))) >= 0.0001)
                      {
                        v103 = v60;
                        v103.i32[2] = *((_DWORD *)v84 + 2);
                        v104 = v61;
                        v104.i32[2] = *((_DWORD *)v85 + 2);
                        v105 = *((float *)v85 + 3);
                        v106 = (float)((float)((float)((float)((float)(v94 - v61.f32[0]) * (float)(v94 - v61.f32[0]))
                                                     + (float)((float)(v95 - v89) * (float)(v95 - v89)))
                                             + (float)((float)(v97 - v88) * (float)(v97 - v88)))
                                     + (float)((float)(v101 - v105) * (float)(v101 - v105))) < 0.0001;
                        v107 = vsubq_f32(v103, v104);
                        v108 = (float)((float)(vmulq_f32(v107, v107).f32[0]
                                             + (float)((float)(v87 - v89) * (float)(v87 - v89)))
                                     + (float)((float)(v86 - v88) * (float)(v86 - v88)))
                             + (float)((float)(v102 - v105) * (float)(v102 - v105));
                        if (!v106 && v108 >= 0.0001)
                        {
                          v110 = 1.0 / v100;
                          v111 = v110 * v92;
                          v112 = v110 * v98;
                          v113 = v110 * v99;
                          v114 = (float)((float)(v111 * v97) + (float)(v112 * v86)) + (float)(v113 * v88);
                          v115 = (float)((float)((float)(v111 * v94) + (float)(v112 * v60.f32[0]))
                                       + (float)(v113 * v61.f32[0]));
                          v116 = (float)((float)((float)(v111 * v95) + (float)(v112 * v87)) + (float)(v113 * v89));
                          v117 = v114;
                          v118 = v131[4];
                          v119 = v131[5];
                          v120 = v131[6];
                          v121 = v131[3];
                          v122 = -(v119 * v116 - v118 * v117) - (v119 * v116 - v118 * v117);
                          v123 = -(v121 * v117 - v119 * v115) - (v121 * v117 - v119 * v115);
                          v124 = -(v118 * v115 - v121 * v116) - (v118 * v115 - v121 * v116);
                          v125 = *v131 + v115 + v124 * v118 + v122 * v120 - v123 * v119;
                          v126 = v131[1] + v116 - v124 * v121 + v122 * v119 + v123 * v120;
                          v127 = v117 + v124 * v120 + v131[2] + v123 * v121 - v122 * v118;
                          v128 = (v125 - *a3) * (v125 - *a3)
                               + (v126 - a3[1]) * (v126 - a3[1])
                               + (v127 - a3[2]) * (v127 - a3[2]);
                          if (v128 < v13)
                          {
                            *a5 = v125;
                            a5[1] = v126;
                            LODWORD(v14) = 1;
                            v13 = v128;
                            a5[2] = v127;
                          }
                        }
                      }
                    }
                  }
                }
              }
              v75 = v82;
              ++v81;
              v82 += 3;
            }
            while ((v138 - v137) / v139 > v75);
          }
        }
        v12 |= v14;
      }
      ++v11;
    }
    while (v11 != v10);
  }
  return v12 & 1;
}

uint64_t karo::AxisAlignedBounding<double,3>::ray(double *a1, float64x2_t *a2, float64x2_t *a3, float64x2_t *a4, float64x2_t *a5, double *a6, double *a7)
{
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  uint64_t result;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v21;
  double v22;
  double v23;
  double v24;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  float64_t v41;
  float64_t v42;

  v7 = *a6;
  v8 = *a7;
  v9 = a2[1].f64[0];
  v10 = a3[1].f64[0];
  v11 = a1[2];
  v12 = a1[5];
  if (fabs(v10) >= 0.00000001)
  {
    v15 = 1.0 / v10;
    v16 = (v11 - v9) * v15;
    v17 = (v12 - v9) * v15;
    v18 = fmax(v16, v17);
    v19 = fmin(v16, v17);
    if (v19 > v8 || v18 < v7)
      return 0;
    v7 = fmax(v19, v7);
    if (v18 < v8)
      v8 = v18;
  }
  else if (v9 < v11 || v9 > v12)
  {
    return 0;
  }
  v21 = a2->f64[1];
  v22 = a3->f64[1];
  v23 = a1[1];
  v24 = a1[4];
  if (fabs(v22) >= 0.00000001)
  {
    v26 = 1.0 / v22;
    v27 = (v23 - v21) * v26;
    v28 = (v24 - v21) * v26;
    v29 = fmax(v27, v28);
    v30 = fmin(v27, v28);
    if (v30 > v8 || v29 < v7)
      return 0;
    v7 = fmax(v30, v7);
    if (v29 < v8)
      v8 = v29;
  }
  else if (v21 < v23 || v21 > v24)
  {
    return 0;
  }
  v32 = a2->f64[0];
  v33 = a3->f64[0];
  v34 = *a1;
  v35 = a1[3];
  if (fabs(a3->f64[0]) >= 0.00000001)
  {
    v36 = (v34 - v32) * (1.0 / v33);
    v37 = (v35 - v32) * (1.0 / v33);
    v38 = fmax(v36, v37);
    v39 = fmin(v36, v37);
    if (v39 > v8 || v38 < v7)
      return 0;
    v7 = fmax(v39, v7);
    if (v38 < v8)
      v8 = v38;
    goto LABEL_41;
  }
  result = 0;
  if (v32 >= v34 && v32 <= v35)
  {
LABEL_41:
    *a6 = v7;
    *a7 = v8;
    v41 = a2[1].f64[0] + a3[1].f64[0] * *a6;
    *a4 = vmlaq_n_f64(*a2, *a3, *a6);
    a4[1].f64[0] = v41;
    v42 = a2[1].f64[0] + a3[1].f64[0] * *a7;
    *a5 = vmlaq_n_f64(*a2, *a3, *a7);
    a5[1].f64[0] = v42;
    return 1;
  }
  return result;
}

void altitude::Intersector::collectAlongRay(_QWORD *a1, float64x2_t *a2, float64x2_t *a3, _QWORD *a4)
{
  _OWORD *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  void **v20;
  void **v21;
  void **v22;
  _QWORD *v23;
  unint64_t v24;
  void **v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _BYTE *v31;
  void **v32;
  unint64_t v33;
  void **v34;
  uint64_t v35;
  _OWORD *v36;
  void **v37;
  uint64_t v38;
  __int128 v39;
  void *v40;
  unint64_t v41;
  _QWORD *v42;
  _BYTE *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _BYTE *v48;
  _QWORD *v49;
  char *v50;
  unint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _OWORD *v54;
  __int128 *v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  _OWORD v59[3];
  float64x2_t v60;
  float64x2_t v61;
  uint64_t v62;
  uint64_t v63;

  if (a1)
  {
    if (*(_BYTE *)(a1[36] + 166))
    {
      v8 = (_OWORD *)(*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1);
      v63 = 0;
      v62 = 0x7FEFFFFFFFFFFFFFLL;
      v9 = v8[1];
      v59[0] = *v8;
      v59[1] = v9;
      v59[2] = v8[2];
      if (karo::AxisAlignedBounding<double,3>::ray((double *)v59, a2, a3, &v61, &v60, (double *)&v63, (double *)&v62))
      {
        v10 = a1[38];
        v11 = a1[39];
        v12 = v11 - v10 == 128;
        if (v11 != v10)
        {
          v13 = 0;
          v14 = 1;
          do
          {
            v15 = 32 * v13;
            altitude::Intersector::collectAlongRay(*(_QWORD *)(v10 + 32 * v13), a2, a3, a4);
            v10 = a1[38];
            v16 = *(_QWORD *)(v10 + v15);
            if (!v16 || (v17 = *(_QWORD *)(v16 + 328)) == 0 || !*(_QWORD *)(v17 + 120))
              v12 = 0;
            v13 = v14++;
          }
          while (v13 != (a1[39] - v10) >> 5);
        }
        if (!v12)
        {
          v18 = (_QWORD *)a1[41];
          if (v18)
          {
            if (v18[15] || v18[26] || v18[17])
            {
              v19 = *a4;
              if (*a4 <= 0x7FuLL)
              {
                *a4 = v19 + 1;
                a4[v19 + 1] = a1;
                return;
              }
              if (v19 == 128)
              {
                v20 = (void **)(a4 + 1);
                v21 = (void **)(a4 + 129);
                v22 = (void **)a4[130];
                while (1)
                {
                  v24 = a4[131];
                  if ((unint64_t)v22 >= v24)
                    break;
                  *v22 = *v20;
                  v23 = v22 + 1;
LABEL_22:
                  a4[130] = v23;
                  ++v20;
                  v22 = (void **)v23;
                  if (v20 == v21)
                    goto LABEL_48;
                }
                v25 = (void **)*v21;
                v26 = (char *)v22 - (_BYTE *)*v21;
                v27 = v26 >> 3;
                v28 = (v26 >> 3) + 1;
                if (v28 >> 61)
                  goto LABEL_75;
                v29 = v24 - (_QWORD)v25;
                if (v29 >> 2 > v28)
                  v28 = v29 >> 2;
                if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
                  v30 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v30 = v28;
                if (v30)
                {
                  if (v30 >> 61)
                    goto LABEL_76;
                  v31 = operator new(8 * v30);
                }
                else
                {
                  v31 = 0;
                }
                v32 = (void **)&v31[8 * v27];
                *v32 = *v20;
                v23 = v32 + 1;
                if (v22 == v25)
                {
                  v25 = v22;
                  goto LABEL_45;
                }
                v33 = (char *)v22 - (char *)v25 - 8;
                if (v33 >= 0x58)
                {
                  if ((unint64_t)((char *)v22 - v31 - v26) >= 0x20)
                  {
                    v35 = (v33 >> 3) + 1;
                    v34 = &v22[-(v35 & 0x3FFFFFFFFFFFFFFCLL)];
                    v36 = &v31[8 * v27 - 16];
                    v37 = v22 - 2;
                    v38 = v35 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v39 = *(_OWORD *)v37;
                      *(v36 - 1) = *((_OWORD *)v37 - 1);
                      *v36 = v39;
                      v36 -= 2;
                      v37 -= 4;
                      v38 -= 4;
                    }
                    while (v38);
                    v32 -= v35 & 0x3FFFFFFFFFFFFFFCLL;
                    if (v35 == (v35 & 0x3FFFFFFFFFFFFFFCLL))
                      goto LABEL_45;
                  }
                  else
                  {
                    v34 = v22;
                  }
                }
                else
                {
                  v34 = v22;
                }
                do
                {
                  v40 = *--v34;
                  *--v32 = v40;
                }
                while (v34 != v25);
                v25 = (void **)*v21;
LABEL_45:
                a4[129] = v32;
                a4[130] = v23;
                a4[131] = &v31[8 * v30];
                if (v25)
                  operator delete(v25);
                goto LABEL_22;
              }
              v23 = (_QWORD *)a4[130];
LABEL_48:
              v41 = a4[131];
              if ((unint64_t)v23 < v41)
              {
                *v23 = a1;
                v42 = v23 + 1;
LABEL_73:
                a4[130] = v42;
                ++*a4;
                return;
              }
              v43 = (_BYTE *)a4[129];
              v44 = ((char *)v23 - v43) >> 3;
              v45 = v44 + 1;
              if ((unint64_t)(v44 + 1) >> 61)
LABEL_75:
                abort();
              v46 = v41 - (_QWORD)v43;
              if (v46 >> 2 > v45)
                v45 = v46 >> 2;
              if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8)
                v47 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v47 = v45;
              if (v47)
              {
                if (v47 >> 61)
LABEL_76:
                  std::__throw_bad_array_new_length[abi:nn180100]();
                v48 = operator new(8 * v47);
              }
              else
              {
                v48 = 0;
              }
              v49 = &v48[8 * v44];
              v50 = &v48[8 * v47];
              *v49 = a1;
              v42 = v49 + 1;
              if (v23 == (_QWORD *)v43)
              {
                v43 = v23;
              }
              else
              {
                v51 = (char *)v23 - v43 - 8;
                if (v51 < 0x58)
                {
                  v52 = v23;
                  goto LABEL_69;
                }
                if ((unint64_t)(v43 - v48) < 0x20)
                {
                  v52 = v23;
                  goto LABEL_69;
                }
                v53 = (v51 >> 3) + 1;
                v52 = &v23[-(v53 & 0x3FFFFFFFFFFFFFFCLL)];
                v54 = &v48[8 * v44 - 16];
                v55 = (__int128 *)(v23 - 2);
                v56 = v53 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v57 = *v55;
                  *(v54 - 1) = *(v55 - 1);
                  *v54 = v57;
                  v54 -= 2;
                  v55 -= 2;
                  v56 -= 4;
                }
                while (v56);
                v49 -= v53 & 0x3FFFFFFFFFFFFFFCLL;
                if (v53 != (v53 & 0x3FFFFFFFFFFFFFFCLL))
                {
                  do
                  {
LABEL_69:
                    v58 = *--v52;
                    *--v49 = v58;
                  }
                  while (v52 != (_QWORD *)v43);
                  v43 = (_BYTE *)a4[129];
                }
              }
              a4[129] = v49;
              a4[130] = v42;
              a4[131] = v50;
              if (v43)
                operator delete(v43);
              goto LABEL_73;
            }
          }
        }
      }
    }
  }
}

uint64_t altitude::Intersector::intersectAtPosition(uint64_t a1, float64x2_t *a2, float64x2_t *a3)
{
  double v3;
  double v4;
  double v5;
  float64x2_t v6;
  double v7;
  float64x2_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  void *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  _BYTE *v23;
  uint64_t *v24;
  const std::nothrow_t *v25;
  unint64_t v26;
  char *v27;
  BOOL v28;
  float64x2_t v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _BYTE *v34;
  int v35;
  double v36;
  char *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  float64x2_t v42;
  double v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  double v47;
  uint64_t v48;
  unint64_t v49;
  _BYTE v50[1024];
  void *__p;
  void *v52;
  uint64_t v53;
  float64x2_t v54;
  double v55;
  float64x2_t v56;
  double v57;
  int v58;

  v58 = 0;
  v4 = a2[1].f64[0];
  v5 = 1.0 / sqrt(vaddvq_f64(vmulq_f64(*a2, *a2)) + v4 * v4);
  v6 = vmulq_n_f64(*a2, v5);
  v56 = vnegq_f64(v6);
  v57 = -(v5 * v4);
  v7 = v4 + v5 * v4 * 10000.0;
  v8 = vmlaq_f64(*a2, (float64x2_t)vdupq_n_s64(0x40C3880000000000uLL), v6);
  v54 = v8;
  v55 = v7;
  v9 = *(_QWORD *)(*(_QWORD *)a1 + 688);
  v10 = *(_QWORD *)(v9 + 96);
  v11 = *(_QWORD *)(v9 + 104);
  if (v10 == v11)
    return 0;
  v14 = v10;
  while (!*(_BYTE *)(*(_QWORD *)v14 + 164) || !*(_QWORD *)(*(_QWORD *)v14 + 32))
  {
    v14 += 8;
    if (v14 == v11)
      return 0;
  }
  v45 = v8;
  v15 = 0;
  v49 = 0;
  __p = 0;
  v53 = 0;
  v52 = 0;
  while (1)
  {
    v16 = v15;
    if (v15 >= (unint64_t)((v11 - v10) >> 3))
      break;
    altitude::Intersector::collectAlongRay(*(_QWORD **)(*(_QWORD *)(v10 + 8 * v15) + 32), &v54, &v56, &v49);
    v15 = v16 + 1;
    v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 688) + 96);
    v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 688) + 104);
  }
  v19 = __p;
  if (!v49)
  {
    v17 = 0;
    if (!__p)
      return v17;
    goto LABEL_53;
  }
  v20 = 8 * v49 - 8;
  v21 = (uint64_t *)((char *)__p + v20);
  v22 = (uint64_t *)&v50[v20];
  if (v49 <= 0x80)
    v23 = v50;
  else
    v23 = __p;
  if (v49 <= 0x80)
    v24 = v22;
  else
    v24 = v21;
  *(_QWORD *)&v46.f64[0] = &__block_literal_global_14738;
  if ((char *)v24 - v23 < 1025)
  {
LABEL_22:
    std::__stable_sort<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(altitude::Tile *,altitude::Tile *),altitude::Tile **>((uint64_t)v23, v24, (uint64_t *)&v46, ((char *)v24 - v23) >> 3, 0, 0);
  }
  else
  {
    v25 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
    v26 = ((char *)v24 - v23) >> 3;
    while (1)
    {
      v27 = (char *)operator new(8 * v26, v25);
      if (v27)
        break;
      v28 = v26 > 1;
      v26 >>= 1;
      if (!v28)
        goto LABEL_22;
    }
    v30 = v27;
    std::__stable_sort<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(altitude::Tile *,altitude::Tile *),altitude::Tile **>((uint64_t)v23, v24, (uint64_t *)&v46, ((char *)v24 - v23) >> 3, v27, v26);
    operator delete(v30);
  }
  v31 = v49;
  v19 = __p;
  if (v49)
  {
    v32 = 0;
    v17 = 0;
    v33 = 0;
    if (v49 <= 0x80)
      v34 = v50;
    else
      v34 = __p;
    v35 = *(_DWORD *)(*(_QWORD *)v34 + 392);
    v36 = 1.79769313e308;
    do
    {
      v19 = __p;
      if (v31 <= 0x80)
        v37 = &v50[v32];
      else
        v37 = (char *)__p + v32;
      v38 = *(_QWORD *)v37;
      v39 = *(_DWORD *)(*(_QWORD *)v37 + 392);
      if (v17)
      {
        if (v35 != v39)
          goto LABEL_50;
      }
      else
      {
        v35 = v39;
      }
      v48 = 0;
      v40 = *(_QWORD *)(v38 + 328);
      if (v40)
      {
        v41 = *(_QWORD *)(v40 + 120);
        if ((v41 || (v41 = *(_QWORD *)(v40 + 208)) != 0 || (v41 = *(_QWORD *)(v40 + 136)) != 0)
          && ((altitude::Intersector::intersectElement(*(_QWORD **)(v41 + 48), *(_QWORD **)(v41 + 56), v54.f64, v56.f64, v46.f64, &v58, *(_BYTE *)(v40 + 296)) & 1) != 0|| (v38 = v48) != 0)&& (!v17 || *(_DWORD *)(v17 + 392) <= *(_DWORD *)(v38 + 392)))
        {
          v42 = vsubq_f64(v45, v46);
          v43 = vaddvq_f64(vmulq_f64(v42, v42)) + (v7 - v47) * (v7 - v47);
          if (v43 < v36 * v36)
          {
            v17 = v38;
            v3 = v47;
            v44 = v46;
            v36 = sqrt(v43);
          }
        }
      }
      ++v33;
      v31 = v49;
      v32 += 8;
    }
    while (v33 < v49);
    v19 = __p;
LABEL_50:
    v29 = v44;
  }
  else
  {
    v17 = 0;
  }
  *a3 = v29;
  a3[1].f64[0] = v3;
  if (v19)
  {
LABEL_53:
    v52 = v19;
    operator delete(v19);
  }
  return v17;
}

uint64_t std::__stable_sort<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(altitude::Tile *,altitude::Tile *),altitude::Tile **>(uint64_t result, uint64_t *a2, uint64_t *a3, unint64_t a4, char *a5, uint64_t a6)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  __int128 v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  __int128 v47;
  uint64_t v48;

  if (a4 >= 2)
  {
    v8 = (uint64_t *)result;
    if (a4 == 2)
    {
      result = (*(uint64_t (**)(void))(*a3 + 16))();
      if ((_DWORD)result)
      {
        v9 = *v8;
        *v8 = *(a2 - 1);
        *(a2 - 1) = v9;
      }
      return result;
    }
    if ((uint64_t)a4 > 128)
    {
      v19 = a4 >> 1;
      v20 = (char *)(result + 8 * (a4 >> 1));
      v21 = a4 >> 1;
      if ((uint64_t)a4 > a6)
      {
        std::__stable_sort<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(altitude::Tile *,altitude::Tile *),altitude::Tile **>(result, v20, a3, v21, a5, a6);
        std::__stable_sort<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(altitude::Tile *,altitude::Tile *),altitude::Tile **>(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), a5, a6);
        return std::__inplace_merge<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(altitude::Tile *,altitude::Tile *),altitude::Tile **>((uint64_t)v8, &v8[a4 >> 1], a2, a3, a4 >> 1, a4 - (a4 >> 1), a5, a6);
      }
      std::__stable_sort_move<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(altitude::Tile *,altitude::Tile *),altitude::Tile **>(result, v20, (uint64_t)a3, v21, a5);
      v22 = &a5[8 * v19];
      result = std::__stable_sort_move<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(altitude::Tile *,altitude::Tile *),altitude::Tile **>((uint64_t)&v8[a4 >> 1], (char *)a2, (uint64_t)a3, a4 - (a4 >> 1), v22);
      v23 = -1;
      v24 = v8;
      v25 = v22;
      v26 = a5;
      v27 = &a5[8 * a4];
      do
      {
        ++v23;
        if (v25 == v27)
        {
          if (v26 == v22)
            return result;
          v40 = &a5[8 * (a4 >> 1)] - v26 - 8;
          if (v40 >= 0x38)
          {
            if ((unint64_t)((char *)&v8[v23] - v26) >= 0x20)
            {
              v42 = 0;
              v43 = (v40 >> 3) + 1;
              v44 = v43 & 0x3FFFFFFFFFFFFFFCLL;
              v41 = &v24[v44];
              v45 = v43 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v46 = &v24[v42];
                v47 = *(_OWORD *)&v26[v42 * 8 + 16];
                *(_OWORD *)v46 = *(_OWORD *)&v26[v42 * 8];
                *((_OWORD *)v46 + 1) = v47;
                v42 += 4;
                v45 -= 4;
              }
              while (v45);
              if (v43 == (v43 & 0x3FFFFFFFFFFFFFFCLL))
                return result;
              v26 += v44 * 8;
            }
            else
            {
              v41 = v24;
            }
          }
          else
          {
            v41 = v24;
          }
          do
          {
            v48 = *(_QWORD *)v26;
            v26 += 8;
            *v41++ = v48;
          }
          while (v26 != v22);
          return result;
        }
        v28 = v25;
        result = (*(uint64_t (**)(void))(*a3 + 16))();
        if ((_DWORD)result)
          v29 = v28;
        else
          v29 = v26;
        v26 += 8 * (result ^ 1);
        v25 = &v28[8 * result];
        *v24++ = *(_QWORD *)v29;
      }
      while (v26 != v22);
      if (v25 == v27)
        return result;
      v30 = -8;
      if (!(_DWORD)result)
        v30 = 0;
      v31 = &a5[8 * a4] - v28 + v30 - 8;
      if (v31 <= 0x67)
        goto LABEL_36;
      v32 = 8;
      if (!(_DWORD)result)
        v32 = 0;
      if ((unint64_t)((char *)&v8[v23] - v28 - v32 + 8) < 0x20)
        goto LABEL_36;
      v33 = 0;
      v34 = (v31 >> 3) + 1;
      v35 = 8 * (v34 & 0x3FFFFFFFFFFFFFFCLL);
      v36 = v34 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v37 = &v24[v33];
        v38 = *(_OWORD *)&v25[v33 * 8 + 16];
        *(_OWORD *)v37 = *(_OWORD *)&v25[v33 * 8];
        *((_OWORD *)v37 + 1) = v38;
        v33 += 4;
        v36 -= 4;
      }
      while (v36);
      if (v34 != (v34 & 0x3FFFFFFFFFFFFFFCLL))
      {
        v25 += v35;
        v24 = (uint64_t *)((char *)v24 + v35);
        do
        {
LABEL_36:
          v39 = *(_QWORD *)v25;
          v25 += 8;
          *v24++ = v39;
        }
        while (v25 != v27);
      }
    }
    else if ((uint64_t *)result != a2)
    {
      v11 = (uint64_t *)(result + 8);
      if ((uint64_t *)(result + 8) != a2)
      {
        v12 = 0;
        do
        {
          v14 = v11;
          result = (*(uint64_t (**)(void))(*a3 + 16))();
          if ((_DWORD)result)
          {
            v15 = *v14;
            v16 = v12;
            do
            {
              *(uint64_t *)((char *)v8 + v16 + 8) = *(uint64_t *)((char *)v8 + v16);
              if (!v16)
              {
                v13 = v8;
                goto LABEL_10;
              }
              result = (*(uint64_t (**)(void))(*a3 + 16))();
              v16 -= 8;
            }
            while ((result & 1) != 0);
            v13 = (uint64_t *)((char *)v8 + v16 + 8);
LABEL_10:
            *v13 = v15;
          }
          v11 = v14 + 1;
          v12 += 8;
        }
        while (v14 + 1 != a2);
      }
    }
  }
  return result;
}

uint64_t std::__stable_sort_move<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(altitude::Tile *,altitude::Tile *),altitude::Tile **>(uint64_t result, char *a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  char *v7;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD *v35;
  __int128 v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD *v44;
  __int128 v45;
  uint64_t v46;

  if (a4)
  {
    v5 = a5;
    v7 = (char *)result;
    if (a4 == 1)
    {
LABEL_9:
      *v5 = *(_QWORD *)v7;
      return result;
    }
    if (a4 == 2)
    {
      v10 = a2 - 8;
      result = (*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))();
      if ((_DWORD)result)
        v11 = v10;
      else
        v11 = v7;
      *v5++ = *(_QWORD *)v11;
      if (!(_DWORD)result)
        v7 = v10;
      goto LABEL_9;
    }
    if ((uint64_t)a4 > 8)
    {
      v19 = a4 >> 1;
      v20 = 8 * (a4 >> 1);
      v21 = (char *)(result + v20);
      std::__stable_sort<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(altitude::Tile *,altitude::Tile *),altitude::Tile **>(result, result + v20, a3, a4 >> 1, a5, a4 >> 1);
      result = std::__stable_sort<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(altitude::Tile *,altitude::Tile *),altitude::Tile **>(&v7[v20], a2, a3, a4 - v19, &v5[(unint64_t)v20 / 8], a4 - v19);
      v22 = -1;
      v23 = v5;
      v24 = v7;
      v25 = v21;
      do
      {
        ++v22;
        if (v25 == a2)
        {
          if (v24 == v21)
            return result;
          v38 = &v7[8 * v19] - v24 - 8;
          if (v38 >= 0x38)
          {
            if ((unint64_t)((char *)&v5[v22] - v24) >= 0x20)
            {
              v40 = 0;
              v41 = (v38 >> 3) + 1;
              v42 = v41 & 0x3FFFFFFFFFFFFFFCLL;
              v39 = &v23[v42];
              v43 = v41 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v44 = &v23[v40];
                v45 = *(_OWORD *)&v24[v40 * 8 + 16];
                *v44 = *(_OWORD *)&v24[v40 * 8];
                v44[1] = v45;
                v40 += 4;
                v43 -= 4;
              }
              while (v43);
              if (v41 == (v41 & 0x3FFFFFFFFFFFFFFCLL))
                return result;
              v24 += v42 * 8;
            }
            else
            {
              v39 = v23;
            }
          }
          else
          {
            v39 = v23;
          }
          do
          {
            v46 = *(_QWORD *)v24;
            v24 += 8;
            *v39++ = v46;
          }
          while (v24 != v21);
          return result;
        }
        v26 = v25;
        result = (*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))();
        if ((_DWORD)result)
          v27 = v26;
        else
          v27 = v24;
        v25 = &v26[8 * result];
        v24 += 8 * (result ^ 1);
        *v23++ = *(_QWORD *)v27;
      }
      while (v24 != v21);
      if (v25 == a2)
        return result;
      v28 = -8;
      if (!(_DWORD)result)
        v28 = 0;
      v29 = a2 - v26 + v28 - 8;
      if (v29 < 0x68)
        goto LABEL_39;
      v30 = 8;
      if (!(_DWORD)result)
        v30 = 0;
      if ((unint64_t)((char *)&v5[v22] - v26 - v30 + 8) < 0x20)
        goto LABEL_39;
      v31 = 0;
      v32 = (v29 >> 3) + 1;
      v33 = 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
      v34 = v32 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v35 = &v23[v31];
        v36 = *(_OWORD *)&v25[v31 * 8 + 16];
        *v35 = *(_OWORD *)&v25[v31 * 8];
        v35[1] = v36;
        v31 += 4;
        v34 -= 4;
      }
      while (v34);
      if (v32 != (v32 & 0x3FFFFFFFFFFFFFFCLL))
      {
        v25 += v33;
        v23 = (_QWORD *)((char *)v23 + v33);
        do
        {
LABEL_39:
          v37 = *(_QWORD *)v25;
          v25 += 8;
          *v23++ = v37;
        }
        while (v25 != a2);
      }
    }
    else if ((char *)result != a2)
    {
      v12 = (char *)(result + 8);
      *a5 = *(_QWORD *)result;
      if ((char *)(result + 8) != a2)
      {
        v13 = 0;
        v14 = a5;
        do
        {
          v16 = v14++;
          result = (*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))();
          v17 = v14;
          if ((_DWORD)result)
          {
            v16[1] = *v16;
            v17 = v5;
            if (v16 != v5)
            {
              v18 = v13;
              while (1)
              {
                v17 = (_QWORD *)((char *)v5 + v18);
                result = (*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))();
                if (!(_DWORD)result)
                  break;
                *v17 = *(v17 - 1);
                v18 -= 8;
                if (!v18)
                {
                  v17 = v5;
                  break;
                }
              }
            }
          }
          v15 = *(_QWORD *)v12;
          v12 += 8;
          *v17 = v15;
          v13 += 8;
        }
        while (v12 != a2);
      }
    }
  }
  return result;
}

uint64_t std::__inplace_merge<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(altitude::Tile *,altitude::Tile *),altitude::Tile **>(uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  int v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  int64_t v40;
  uint64_t *v41;
  size_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  BOOL v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  char *v61;
  unint64_t v62;
  char *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  __int128 *v67;
  _OWORD *v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  unint64_t v74;
  char *v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  __int128 *v79;
  _OWORD *v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t *v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  __int128 v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;

  if (!a6)
    return result;
  v10 = a6;
  v15 = (uint64_t *)result;
  while (v10 > a8 && a5 > a8)
  {
    if (!a5)
      return result;
    while (1)
    {
      result = (*(uint64_t (**)(void))(*a4 + 16))();
      if ((result & 1) != 0)
        break;
      ++v15;
      if (!--a5)
        return result;
    }
    v101 = a3;
    if (a5 >= v10)
    {
      if (a5 == 1)
      {
        v85 = *v15;
        *v15 = *a2;
        *a2 = v85;
        return result;
      }
      if (a5 >= 0)
        v22 = a5;
      else
        v22 = a5 + 1;
      v23 = a3;
      v100 = v22 >> 1;
      v20 = &v15[v22 >> 1];
      if (v23 == a2)
      {
        v18 = v23;
        v30 = v23;
      }
      else
      {
        v97 = a7;
        v98 = v10;
        v24 = *a4;
        v25 = v23 - a2;
        v18 = a2;
        do
        {
          v26 = &v18[v25 >> 1];
          v28 = *v26;
          v27 = v26 + 1;
          v29 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v24, v28, *v20);
          if (v29)
            v25 += ~(v25 >> 1);
          else
            v25 >>= 1;
          if (v29)
            v18 = v27;
        }
        while (v25);
        v30 = a2;
        a7 = v97;
        v10 = v98;
      }
      v17 = v18 - v30;
    }
    else
    {
      if (v10 >= 0)
        v16 = v10;
      else
        v16 = v10 + 1;
      v17 = v16 >> 1;
      v18 = &a2[v16 >> 1];
      if (a2 == v15)
      {
        v20 = a2;
        v21 = a2;
      }
      else
      {
        v95 = v16 >> 1;
        v19 = a2 - v15;
        v20 = v15;
        do
        {
          if ((*(unsigned int (**)(void))(*a4 + 16))())
          {
            v19 >>= 1;
          }
          else
          {
            v20 += (v19 >> 1) + 1;
            v19 += ~(v19 >> 1);
          }
        }
        while (v19);
        v21 = v15;
        v17 = v95;
      }
      v100 = v20 - v21;
    }
    v31 = v18;
    if (v20 != a2)
    {
      v31 = v20;
      if (a2 != v18)
      {
        if (v20 + 1 == a2)
        {
          v99 = v10;
          v39 = *v20;
          v40 = (char *)v18 - (char *)a2;
          v41 = a2;
          v42 = (char *)v18 - (char *)a2;
          v43 = v17;
          memmove(v20, v41, v42);
          v17 = v43;
          v31 = (uint64_t *)((char *)v20 + v40);
          *v31 = v39;
          v10 = v99;
        }
        else if (a2 + 1 == v18)
        {
          v44 = *(v18 - 1);
          v31 = v20 + 1;
          if (v18 - 1 != v20)
          {
            v96 = v17;
            memmove(v20 + 1, v20, (char *)(v18 - 1) - (char *)v20);
            v17 = v96;
          }
          *v20 = v44;
        }
        else
        {
          v32 = a2 - v20;
          v33 = v18 - a2;
          if (v32 == v33)
          {
            v34 = 0;
            do
            {
              v35 = v20[v34];
              v20[v34] = a2[v34];
              v36 = (uint64_t)&v20[v34 + 1];
              a2[v34] = v35;
              v37 = (uint64_t)&a2[++v34];
            }
            while ((uint64_t *)v36 != a2 && v37 != (_QWORD)v18);
            v31 = a2;
          }
          else
          {
            v45 = v18 - a2;
            v46 = a2 - v20;
            do
            {
              v47 = v46;
              v46 = v45;
              v45 = v47 % v45;
            }
            while (v45);
            if (v46)
            {
              v48 = &v20[v46];
              do
              {
                v50 = *--v48;
                v49 = v50;
                v51 = &v48[v32];
                v52 = v48;
                do
                {
                  v53 = v52;
                  v52 = v51;
                  *v53 = *v51;
                  v54 = v18 - v51;
                  v55 = __OFSUB__(v32, v54);
                  v57 = v32 - v54;
                  v56 = (v57 < 0) ^ v55;
                  v51 = &v20[v57];
                  if (v56)
                    v51 = &v52[v32];
                }
                while (v51 != v48);
                *v52 = v49;
              }
              while (v48 != v20);
            }
            v31 = &v20[v33];
          }
        }
      }
    }
    a5 -= v100;
    v10 -= v17;
    if (v100 + v17 >= a5 + v10)
    {
      v58 = a5;
      v59 = v17;
      result = std::__inplace_merge<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(altitude::Tile *,altitude::Tile *),altitude::Tile **>(v31, v18, v101, a4, v58, v10, a7, a8);
      v60 = v20;
      v10 = v59;
      a5 = v100;
      a3 = v31;
      a2 = v60;
      if (!v10)
        return result;
    }
    else
    {
      result = std::__inplace_merge<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(altitude::Tile *,altitude::Tile *),altitude::Tile **>(v15, v20, v31, a4, v100, v17, a7, a8);
      v15 = v31;
      a3 = v101;
      a2 = v18;
      if (!v10)
        return result;
    }
  }
  if (a5 <= v10)
  {
    if (v15 == a2)
      return result;
    v74 = (char *)a2 - (char *)v15 - 8;
    v75 = a7;
    v76 = v15;
    if (v74 >= 0x18)
    {
      v75 = a7;
      v76 = v15;
      if ((unint64_t)(a7 - (char *)v15) > 0x1F)
      {
        v77 = (v74 >> 3) + 1;
        v78 = v77 & 0x3FFFFFFFFFFFFFFCLL;
        v75 = &a7[v78 * 8];
        v79 = (__int128 *)(v15 + 2);
        v80 = a7 + 16;
        v81 = v77 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v82 = *v79;
          *(v80 - 1) = *(v79 - 1);
          *v80 = v82;
          v79 += 2;
          v80 += 2;
          v81 -= 4;
        }
        while (v81);
        if (v77 == (v77 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_96:
          if (v75 != a7)
          {
            while (a2 != a3)
            {
              result = (*(uint64_t (**)(void))(*a4 + 16))();
              if ((_DWORD)result)
                v84 = (char *)a2;
              else
                v84 = a7;
              a7 += 8 * (result ^ 1);
              a2 += result;
              *v15++ = *(_QWORD *)v84;
              if (a7 == v75)
                return result;
            }
            return (uint64_t)memmove(v15, a7, v75 - a7);
          }
          return result;
        }
        v76 = &v15[v78];
      }
    }
    do
    {
      v83 = *v76++;
      *(_QWORD *)v75 = v83;
      v75 += 8;
    }
    while (v76 != a2);
    goto LABEL_96;
  }
  if (a2 == a3)
    return result;
  v61 = (char *)(a3 - 1);
  v62 = (char *)(a3 - 1) - (char *)a2;
  v63 = a7;
  v64 = a2;
  if (v62 >= 0x18)
  {
    v63 = a7;
    v64 = a2;
    if ((unint64_t)(a7 - (char *)a2) > 0x1F)
    {
      v65 = (v62 >> 3) + 1;
      v66 = v65 & 0x3FFFFFFFFFFFFFFCLL;
      v63 = &a7[v66 * 8];
      v67 = (__int128 *)(a2 + 2);
      v68 = a7 + 16;
      v69 = v65 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v70 = *v67;
        *(v68 - 1) = *(v67 - 1);
        *v68 = v70;
        v67 += 2;
        v68 += 2;
        v69 -= 4;
      }
      while (v69);
      if (v65 == (v65 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_77;
      v64 = &a2[v66];
    }
  }
  do
  {
    v71 = *v64++;
    *(_QWORD *)v63 = v71;
    v63 += 8;
  }
  while (v64 != a3);
LABEL_77:
  if (v63 == a7)
    return result;
  v72 = 0;
  while (a2 != v15)
  {
    result = (*(uint64_t (**)(void))(*a4 + 16))();
    if ((_DWORD)result)
      v73 = (char *)a2;
    else
      v73 = v63;
    if ((_DWORD)result)
      --a2;
    else
      v63 -= 8;
    *--a3 = *((_QWORD *)v73 - 1);
    ++v72;
    if (v63 == a7)
      return result;
  }
  v86 = v63 - a7 - 8;
  if (v86 < 0x58 || (unint64_t)(v63 - v61 + 8 * v72 - 8) < 0x20)
  {
    v87 = a3;
    goto LABEL_107;
  }
  v90 = 0;
  v91 = (v86 >> 3) + 1;
  v87 = &a3[-(v91 & 0x3FFFFFFFFFFFFFFCLL)];
  v92 = v91 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v93 = *(_OWORD *)&v63[v90 * 8 - 16];
    v94 = &a3[v90];
    *((_OWORD *)v94 - 2) = *(_OWORD *)&v63[v90 * 8 - 32];
    *((_OWORD *)v94 - 1) = v93;
    v90 -= 4;
    v92 -= 4;
  }
  while (v92);
  if (v91 != (v91 & 0x3FFFFFFFFFFFFFFCLL))
  {
    v63 -= 8 * (v91 & 0x3FFFFFFFFFFFFFFCLL);
LABEL_107:
    v88 = v87 - 1;
    do
    {
      v89 = *((_QWORD *)v63 - 1);
      v63 -= 8;
      *v88-- = v89;
    }
    while (v63 != a7);
  }
  return result;
}

BOOL ___ZN8altitude11Intersector19intersectAtPositionERKN3geo10GeocentricIdEERN2gm6MatrixIdLi3ELi1EEEPNS_4TileEb_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_DWORD *)(a2 + 392) > *(_DWORD *)(a3 + 392);
}

uint64_t altitude::Intersector::intersectRayWithVisibleSet(uint64_t a1, float64x2_t *a2, float64x2_t *a3, uint64_t a4)
{
  double v4;
  uint64_t v5;
  uint64_t v6;
  char **v10;
  _BYTE *v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned int v14;
  char *v15;
  unint64_t v16;
  char *v17;
  _DWORD *v18;
  double *v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int v36;
  double v37;
  char *v38;
  char *v39;
  uint64_t v40;
  __int128 *v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  uint64_t v47;
  int v48;
  _QWORD *v49;
  _BYTE *v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  float64x2_t v55;
  float64x2_t v56;
  double v57;
  double v58[2];

  v48 = 0;
  v49 = 0;
  v50 = 0;
  v51 = 0;
  if (!a1)
  {
    v11 = 0;
    goto LABEL_28;
  }
  v10 = (char **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  std::vector<gdc::Entity>::__assign_with_size[abi:nn180100]<gdc::Entity*,gdc::Entity*>(&v49, *v10, v10[1], (v10[1] - *v10) >> 3);
  v12 = v49;
  v11 = v50;
  if (v50 == (_BYTE *)v49)
  {
LABEL_28:
    v16 = 0;
    v15 = 0;
    goto LABEL_29;
  }
  v47 = a4;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  do
  {
    v18 = (_DWORD *)v12[v13];
    if (v18[98])
    {
      v19 = (double *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v18 + 48))(v18);
      v20 = *v19 + (v19[3] - *v19) * 0.5 - a2->f64[0];
      v21 = v19[1] + (v19[4] - v19[1]) * 0.5 - a2->f64[1];
      v22 = v19[2] + (v19[5] - v19[2]) * 0.5 - a2[1].f64[0];
      v4 = v20 * v20 + v21 * v21 + v22 * v22;
      v23 = v12[v13];
      if (v16 < (unint64_t)v17)
      {
        *(double *)v16 = v4;
        *(_QWORD *)(v16 + 8) = v23;
        v16 += 16;
        v11 = v50;
      }
      else
      {
        v24 = (uint64_t)(v16 - (_QWORD)v15) >> 4;
        v25 = v24 + 1;
        if ((unint64_t)(v24 + 1) >> 60)
          abort();
        if ((v17 - v15) >> 3 > v25)
          v25 = (v17 - v15) >> 3;
        if ((unint64_t)(v17 - v15) >= 0x7FFFFFFFFFFFFFF0)
          v26 = 0xFFFFFFFFFFFFFFFLL;
        else
          v26 = v25;
        if (v26)
        {
          if (v26 >> 60)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v27 = (char *)operator new(16 * v26);
        }
        else
        {
          v27 = 0;
        }
        v28 = &v27[16 * v24];
        *(double *)v28 = v4;
        *((_QWORD *)v28 + 1) = v23;
        if ((char *)v16 == v15)
        {
          v30 = &v27[16 * v24];
        }
        else
        {
          v29 = &v27[16 * v24];
          do
          {
            v30 = v29 - 16;
            *((_OWORD *)v29 - 1) = *(_OWORD *)(v16 - 16);
            v16 -= 16;
            v29 -= 16;
          }
          while ((char *)v16 != v15);
        }
        v17 = &v27[16 * v26];
        v16 = (unint64_t)(v28 + 16);
        if (v15)
          operator delete(v15);
        v15 = v30;
      }
    }
    v13 = ++v14;
  }
  while (v14 < (unint64_t)((v11 - (_BYTE *)v12) >> 3));
  v11 = v12;
  a4 = v47;
LABEL_29:
  v31 = (uint64_t)(v16 - (_QWORD)v15) >> 4;
  v32 = 126 - 2 * __clz(v31);
  if ((char *)v16 == v15)
    v33 = 0;
  else
    v33 = v32;
  v50 = v11;
  if ((char *)v16 == v15)
  {
    v35 = 0;
    if (!v16)
      goto LABEL_49;
  }
  else
  {
    v34 = 0;
    v35 = 0;
    v36 = 1;
    v37 = 1.79769313e308;
    do
    {
      v38 = &v15[16 * v34];
      v40 = *((_QWORD *)v38 + 1);
      v39 = v38 + 8;
      v41 = (__int128 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 48))(v40);
      v58[0] = 0.0;
      v57 = v37;
      v42 = v41[1];
      v52 = *v41;
      v53 = v42;
      v54 = v41[2];
      if (karo::AxisAlignedBounding<double,3>::ray((double *)&v52, a2, a3, &v56, &v55, v58, &v57))
      {
        v43 = *(_QWORD *)(*(_QWORD *)v39 + 328);
        if (v43)
        {
          v44 = *(_QWORD *)(v43 + 120);
          if (v44 || (v44 = *(_QWORD *)(v43 + 208)) != 0 || (v44 = *(_QWORD *)(v43 + 136)) != 0)
          {
            if (altitude::Intersector::intersectElement(*(_QWORD **)(v44 + 48), *(_QWORD **)(v44 + 56), a2->f64, a3->f64, (double *)&v52, &v48, *(_BYTE *)(v43 + 296)))
            {
              v45 = sqrt((a2->f64[0] - *(double *)&v52) * (a2->f64[0] - *(double *)&v52)+ (a2->f64[1] - *((double *)&v52 + 1)) * (a2->f64[1] - *((double *)&v52 + 1))+ (a2[1].f64[0] - *(double *)&v53) * (a2[1].f64[0] - *(double *)&v53));
              if (!v35 || v45 < v37)
              {
                v35 = *(_QWORD *)v39;
                v4 = *(double *)&v53;
                v5 = *((_QWORD *)&v52 + 1);
                v6 = v52;
                v37 = v45;
              }
            }
          }
        }
      }
      v34 = v36++;
    }
    while (v31 > v34);
    if (v35)
    {
      *(_QWORD *)a4 = v6;
      *(_QWORD *)(a4 + 8) = v5;
      *(double *)(a4 + 16) = v4;
    }
  }
  operator delete(v15);
LABEL_49:
  if (v11)
  {
    v50 = v11;
    operator delete(v11);
  }
  return v35;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,`anonymous namespace'::DepthCompare &,std::pair<double,altitude::Tile *> *,false>(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  double v13;
  unint64_t v14;
  double v15;
  unint64_t v16;
  double v17;
  unint64_t v18;
  BOOL v19;
  _BOOL4 v20;
  double v21;
  unint64_t v22;
  double v23;
  unint64_t v24;
  BOOL v25;
  _BOOL4 v26;
  unint64_t v27;
  double v28;
  unint64_t v29;
  _BOOL4 v30;
  unint64_t v31;
  double v32;
  unint64_t v33;
  _BOOL4 v34;
  double v35;
  unint64_t v36;
  _BOOL4 v37;
  unint64_t v38;
  unint64_t v39;
  double v40;
  double v41;
  unint64_t v42;
  double v43;
  unint64_t v44;
  BOOL v45;
  BOOL v46;
  double v47;
  unint64_t v48;
  _BOOL4 v49;
  unint64_t v50;
  double v51;
  unint64_t v52;
  _BOOL4 v53;
  double v54;
  unint64_t v55;
  _BOOL4 v56;
  double v57;
  unint64_t v58;
  _BOOL4 v59;
  unint64_t v60;
  unint64_t v61;
  double v62;
  double v63;
  unint64_t v64;
  double v65;
  unint64_t v66;
  BOOL v67;
  BOOL v68;
  double v69;
  unint64_t v70;
  _BOOL4 v71;
  unint64_t v72;
  double v73;
  unint64_t v74;
  _BOOL4 v75;
  double v76;
  unint64_t v77;
  _BOOL4 v78;
  double v79;
  unint64_t v80;
  double v81;
  unint64_t v82;
  BOOL v83;
  double v84;
  unint64_t v85;
  _BOOL4 v86;
  _BOOL4 v87;
  BOOL v88;
  double v89;
  unint64_t v90;
  uint64_t v91;
  double v92;
  unint64_t v93;
  double v94;
  BOOL v95;
  unint64_t v96;
  unint64_t v97;
  double v98;
  double v99;
  BOOL v100;
  BOOL v101;
  double *v102;
  double v103;
  _BOOL4 v104;
  _BOOL4 v105;
  double v106;
  BOOL v107;
  BOOL v108;
  double v109;
  double *v110;
  uint64_t v111;
  double v112;
  BOOL v113;
  BOOL v114;
  double v115;
  _BOOL4 v116;
  _BOOL4 v117;
  BOOL v118;
  double v119;
  BOOL v120;
  double v121;
  BOOL v122;
  BOOL v123;
  unint64_t v124;
  double v125;
  _BOOL4 v126;
  _BOOL4 v127;
  double *v128;
  double v129;
  BOOL v130;
  BOOL v131;
  double v132;
  double v133;
  uint64_t v134;
  double v135;
  _BOOL4 v136;
  _BOOL4 v137;
  double v138;
  BOOL v139;
  BOOL v140;
  double v141;
  unint64_t v142;
  double v143;
  unint64_t v144;
  _BOOL4 v145;
  double v146;
  unint64_t v147;
  double v148;
  unint64_t v149;
  BOOL v150;
  double v151;
  unint64_t v152;
  _BOOL4 v153;
  double v154;
  unint64_t v155;
  double v156;
  unint64_t v157;
  _BOOL4 v158;
  double v159;
  unint64_t v160;
  double v161;
  unint64_t v162;
  _BOOL4 v163;
  double v164;
  unint64_t v165;
  _BOOL4 v166;
  uint64_t v167;
  BOOL v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  double v173;
  unint64_t v174;
  double v175;
  unint64_t v176;
  _BOOL4 v177;
  uint64_t v178;
  uint64_t v179;
  BOOL v180;
  int64_t v181;
  int64_t v182;
  int64_t v183;
  uint64_t v184;
  unint64_t v185;
  double v186;
  _BOOL4 v187;
  unint64_t v188;
  double v189;
  unint64_t v190;
  BOOL v191;
  double v192;
  _BOOL4 v193;
  _BOOL4 v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v199;
  double v200;
  uint64_t v201;
  double *v202;
  double v203;
  double v204;
  _BOOL4 v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  double *v210;
  double v211;
  double v212;
  unint64_t v213;
  _BOOL4 v214;
  double *v215;
  BOOL v216;
  double v217;
  unint64_t v218;
  _BOOL4 v219;
  double *v220;
  double v221;
  unint64_t v222;
  double v223;
  unint64_t v224;
  _BOOL4 v225;
  double *v226;
  double *v227;
  uint64_t v228;
  BOOL v229;
  double v230;
  unint64_t v231;
  _BOOL4 v232;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = a2 - v8;
    v10 = (uint64_t)(a2 - v8) >> 4;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v141 = *(double *)(a2 - 16);
        v142 = *(_QWORD *)(a2 - 8);
        v143 = *(double *)v8;
        v144 = *(_QWORD *)(v8 + 8);
        v145 = v142 < v144;
        if (v141 != *(double *)v8)
          v145 = v141 < *(double *)v8;
        if (v145)
        {
          *(double *)v8 = v141;
          *(double *)(a2 - 16) = v143;
          *(_QWORD *)(v8 + 8) = v142;
          *(_QWORD *)(a2 - 8) = v144;
        }
        return result;
      case 3:
        v146 = *(double *)(v8 + 16);
        v147 = *(_QWORD *)(v8 + 24);
        v148 = *(double *)v8;
        v149 = *(_QWORD *)(v8 + 8);
        if (v146 == *(double *)v8)
          v150 = v147 < v149;
        else
          v150 = v146 < *(double *)v8;
        v151 = *(double *)(a2 - 16);
        v152 = *(_QWORD *)(a2 - 8);
        v153 = v152 < v147;
        if (v151 != v146)
          v153 = v151 < v146;
        if (v150)
        {
          if (v153)
          {
            *(double *)v8 = v151;
            *(double *)(a2 - 16) = v148;
            *(_QWORD *)(v8 + 8) = v152;
LABEL_283:
            *(_QWORD *)(a2 - 8) = v149;
            return result;
          }
          *(double *)v8 = v146;
          *(double *)(v8 + 16) = v148;
          *(_QWORD *)(v8 + 8) = v147;
          *(_QWORD *)(v8 + 24) = v149;
          v230 = *(double *)(a2 - 16);
          v231 = *(_QWORD *)(a2 - 8);
          v232 = v231 < v149;
          if (v230 != v148)
            v232 = v230 < v148;
          if (v232)
          {
            *(double *)(v8 + 16) = v230;
            *(double *)(a2 - 16) = v148;
            *(_QWORD *)(v8 + 24) = v231;
            goto LABEL_283;
          }
        }
        else if (v153)
        {
          *(double *)(v8 + 16) = v151;
          *(double *)(a2 - 16) = v146;
          *(_QWORD *)(v8 + 24) = v152;
          *(_QWORD *)(a2 - 8) = v147;
          v159 = *(double *)(v8 + 16);
          v160 = *(_QWORD *)(v8 + 24);
          goto LABEL_264;
        }
        return result;
      case 4:
      case 5:
        v154 = *(double *)(a2 - 16);
        v155 = *(_QWORD *)(a2 - 8);
        v156 = *(double *)(v8 + 48);
        v157 = *(_QWORD *)(v8 + 56);
        v158 = v155 < v157;
        if (v154 != v156)
          v158 = v154 < v156;
        if (v158)
        {
          *(double *)(v8 + 48) = v154;
          *(double *)(a2 - 16) = v156;
          *(_QWORD *)(v8 + 56) = v155;
          *(_QWORD *)(a2 - 8) = v157;
          v159 = *(double *)(v8 + 48);
          v160 = *(_QWORD *)(v8 + 56);
          v161 = *(double *)(v8 + 32);
          v162 = *(_QWORD *)(v8 + 40);
          v163 = v160 < v162;
          if (v159 != v161)
            v163 = v159 < v161;
          if (v163)
          {
            *(double *)(v8 + 32) = v159;
            *(double *)(v8 + 48) = v161;
            *(_QWORD *)(v8 + 40) = v160;
            *(_QWORD *)(v8 + 56) = v162;
            v164 = *(double *)(v8 + 16);
            v165 = *(_QWORD *)(v8 + 24);
            v166 = v160 < v165;
            if (v159 != v164)
              v166 = v159 < v164;
            if (v166)
            {
              *(double *)(v8 + 16) = v159;
              *(double *)(v8 + 32) = v164;
              *(_QWORD *)(v8 + 24) = v160;
              *(_QWORD *)(v8 + 40) = v165;
LABEL_264:
              v217 = *(double *)v8;
              v218 = *(_QWORD *)(v8 + 8);
              v219 = v160 < v218;
              if (v159 != *(double *)v8)
                v219 = v159 < *(double *)v8;
              if (v219)
              {
                *(double *)v8 = v159;
                *(double *)(v8 + 16) = v217;
                *(_QWORD *)(v8 + 8) = v160;
                *(_QWORD *)(v8 + 24) = v218;
              }
            }
          }
        }
        return result;
      default:
        if (v9 > 383)
        {
          if (!a3)
          {
            if (v8 != a2)
            {
              v181 = (unint64_t)(v10 - 2) >> 1;
              v182 = v181;
              do
              {
                v183 = v182;
                if (v181 >= v182)
                {
                  v184 = (2 * v182) | 1;
                  v185 = v8 + 16 * v184;
                  if (2 * v183 + 2 >= v10)
                  {
                    v186 = *(double *)v185;
                  }
                  else
                  {
                    v186 = *(double *)(v185 + 16);
                    v187 = *(_QWORD *)(v185 + 8) < *(_QWORD *)(v185 + 24);
                    if (*(double *)v185 != v186)
                      v187 = *(double *)v185 < v186;
                    if (v187)
                      v185 += 16;
                    else
                      v186 = *(double *)v185;
                    if (v187)
                      v184 = 2 * v183 + 2;
                  }
                  v188 = v8 + 16 * v183;
                  v189 = *(double *)v188;
                  v190 = *(_QWORD *)(v188 + 8);
                  v191 = *(_QWORD *)(v185 + 8) < v190;
                  if (v186 != *(double *)v188)
                    v191 = v186 < *(double *)v188;
                  if (!v191)
                  {
                    do
                    {
                      v195 = v188;
                      v188 = v185;
                      *(double *)v195 = v186;
                      *(_QWORD *)(v195 + 8) = *(_QWORD *)(v185 + 8);
                      if (v181 < v184)
                        break;
                      v196 = (2 * v184) | 1;
                      v185 = v8 + 16 * v196;
                      v184 = 2 * v184 + 2;
                      if (v184 < v10)
                      {
                        v186 = *(double *)v185;
                        result = v185 + 16;
                        v192 = *(double *)(v185 + 16);
                        v193 = *(_QWORD *)(v185 + 8) < *(_QWORD *)(v185 + 24);
                        if (*(double *)v185 != v192)
                          v193 = *(double *)v185 < v192;
                        if (v193)
                        {
                          v186 = *(double *)(v185 + 16);
                          v185 += 16;
                        }
                        else
                        {
                          v184 = v196;
                        }
                      }
                      else
                      {
                        v186 = *(double *)v185;
                        v184 = v196;
                      }
                      v194 = *(_QWORD *)(v185 + 8) < v190;
                      if (v186 != v189)
                        v194 = v186 < v189;
                    }
                    while (!v194);
                    *(double *)v188 = v189;
                    *(_QWORD *)(v188 + 8) = v190;
                  }
                }
                v182 = v183 - 1;
              }
              while (v183);
              v197 = (unint64_t)v9 >> 4;
              do
              {
                v199 = 0;
                v200 = *(double *)v8;
                v201 = *(_QWORD *)(v8 + 8);
                v202 = (double *)v8;
                do
                {
                  v206 = (uint64_t)&v202[2 * v199 + 2];
                  v207 = (2 * v199) | 1;
                  v199 = 2 * v199 + 2;
                  if (v199 < v197)
                  {
                    v203 = *(double *)v206;
                    v204 = *(double *)(v206 + 16);
                    v205 = *(_QWORD *)(v206 + 8) < *(_QWORD *)(v206 + 24);
                    if (*(double *)v206 != v204)
                      v205 = *(double *)v206 < v204;
                    if (v205)
                    {
                      v203 = *(double *)(v206 + 16);
                      v206 += 16;
                    }
                    else
                    {
                      v199 = v207;
                    }
                  }
                  else
                  {
                    v203 = *(double *)v206;
                    v199 = v207;
                  }
                  *v202 = v203;
                  v202[1] = *(double *)(v206 + 8);
                  v202 = (double *)v206;
                }
                while (v199 <= (uint64_t)((unint64_t)(v197 - 2) >> 1));
                if (v206 == a2 - 16)
                {
                  *(double *)v206 = v200;
                  *(_QWORD *)(v206 + 8) = v201;
                }
                else
                {
                  *(_QWORD *)v206 = *(_QWORD *)(a2 - 16);
                  *(_QWORD *)(v206 + 8) = *(_QWORD *)(a2 - 8);
                  *(double *)(a2 - 16) = v200;
                  *(_QWORD *)(a2 - 8) = v201;
                  v208 = v206 - v8 + 16;
                  if (v208 >= 17)
                  {
                    v209 = (((unint64_t)v208 >> 4) - 2) >> 1;
                    v210 = (double *)(v8 + 16 * v209);
                    v211 = *v210;
                    v212 = *(double *)v206;
                    v213 = *(_QWORD *)(v206 + 8);
                    v214 = *((_QWORD *)v210 + 1) < v213;
                    if (*v210 != *(double *)v206)
                      v214 = *v210 < *(double *)v206;
                    if (v214)
                    {
                      do
                      {
                        v215 = (double *)v206;
                        v206 = (uint64_t)v210;
                        *v215 = v211;
                        v215[1] = v210[1];
                        if (!v209)
                          break;
                        v209 = (v209 - 1) >> 1;
                        v210 = (double *)(v8 + 16 * v209);
                        v211 = *v210;
                        v216 = *((_QWORD *)v210 + 1) < v213;
                        if (*v210 != v212)
                          v216 = *v210 < v212;
                      }
                      while (v216);
                      *(double *)v206 = v212;
                      *(_QWORD *)(v206 + 8) = v213;
                    }
                  }
                }
                a2 -= 16;
              }
              while (v197-- > 2);
            }
            return result;
          }
          v11 = (unint64_t)v10 >> 1;
          v12 = v8 + 16 * ((unint64_t)v10 >> 1);
          v13 = *(double *)(a2 - 16);
          v14 = *(_QWORD *)(a2 - 8);
          if ((unint64_t)v9 >= 0x801)
          {
            v15 = *(double *)v12;
            v16 = *(_QWORD *)(v12 + 8);
            v17 = *(double *)v8;
            v18 = *(_QWORD *)(v8 + 8);
            v19 = *(double *)v12 < *(double *)v8;
            if (*(double *)v12 == *(double *)v8)
              v19 = v16 < v18;
            v20 = v14 < v16;
            if (v13 != v15)
              v20 = v13 < v15;
            if (v19)
            {
              if (v20)
              {
                *(double *)v8 = v13;
                *(double *)(a2 - 16) = v17;
                *(_QWORD *)(v8 + 8) = v14;
LABEL_35:
                *(_QWORD *)(a2 - 8) = v18;
                goto LABEL_36;
              }
              *(double *)v8 = v15;
              *(double *)v12 = v17;
              *(_QWORD *)(v8 + 8) = v16;
              *(_QWORD *)(v12 + 8) = v18;
              v35 = *(double *)(a2 - 16);
              v36 = *(_QWORD *)(a2 - 8);
              v37 = v36 < v18;
              if (v35 != v17)
                v37 = v35 < v17;
              if (v37)
              {
                *(double *)v12 = v35;
                *(double *)(a2 - 16) = v17;
                *(_QWORD *)(v12 + 8) = v36;
                goto LABEL_35;
              }
            }
            else if (v20)
            {
              *(double *)v12 = v13;
              *(double *)(a2 - 16) = v15;
              *(_QWORD *)(v12 + 8) = v14;
              *(_QWORD *)(a2 - 8) = v16;
              v27 = *(_QWORD *)(v12 + 8);
              v28 = *(double *)v8;
              v29 = *(_QWORD *)(v8 + 8);
              v30 = v27 < v29;
              if (*(double *)v12 != *(double *)v8)
                v30 = *(double *)v12 < *(double *)v8;
              if (v30)
              {
                *(_QWORD *)v8 = *(_QWORD *)v12;
                *(double *)v12 = v28;
                *(_QWORD *)(v8 + 8) = v27;
                *(_QWORD *)(v12 + 8) = v29;
              }
            }
LABEL_36:
            v38 = v8 + 16 * v11;
            v40 = *(double *)(v38 - 16);
            v39 = v38 - 16;
            v41 = v40;
            v42 = *(_QWORD *)(v39 + 8);
            v43 = *(double *)(v8 + 16);
            v44 = *(_QWORD *)(v8 + 24);
            v45 = v40 < v43;
            if (v40 == v43)
              v46 = v42 < v44;
            else
              v46 = v45;
            v47 = *(double *)(a2 - 32);
            v48 = *(_QWORD *)(a2 - 24);
            v49 = v48 < v42;
            if (v47 != v41)
              v49 = v47 < v41;
            if (v46)
            {
              if (v49)
              {
                *(double *)(v8 + 16) = v47;
                *(double *)(a2 - 32) = v43;
                *(_QWORD *)(v8 + 24) = v48;
LABEL_58:
                *(_QWORD *)(a2 - 24) = v44;
                goto LABEL_59;
              }
              *(double *)(v8 + 16) = v41;
              *(double *)v39 = v43;
              *(_QWORD *)(v8 + 24) = v42;
              *(_QWORD *)(v39 + 8) = v44;
              v57 = *(double *)(a2 - 32);
              v58 = *(_QWORD *)(a2 - 24);
              v59 = v58 < v44;
              if (v57 != v43)
                v59 = v57 < v43;
              if (v59)
              {
                *(double *)v39 = v57;
                *(double *)(a2 - 32) = v43;
                *(_QWORD *)(v39 + 8) = v58;
                goto LABEL_58;
              }
            }
            else if (v49)
            {
              *(double *)v39 = v47;
              *(double *)(a2 - 32) = v41;
              *(_QWORD *)(v39 + 8) = v48;
              *(_QWORD *)(a2 - 24) = v42;
              v50 = *(_QWORD *)(v39 + 8);
              v51 = *(double *)(v8 + 16);
              v52 = *(_QWORD *)(v8 + 24);
              v53 = v50 < v52;
              if (*(double *)v39 != v51)
                v53 = *(double *)v39 < v51;
              if (v53)
              {
                *(_QWORD *)(v8 + 16) = *(_QWORD *)v39;
                *(double *)v39 = v51;
                *(_QWORD *)(v8 + 24) = v50;
                *(_QWORD *)(v39 + 8) = v52;
              }
            }
LABEL_59:
            v60 = v8 + 16 * v11;
            v62 = *(double *)(v60 + 16);
            v61 = v60 + 16;
            v63 = v62;
            v64 = *(_QWORD *)(v61 + 8);
            v65 = *(double *)(v8 + 32);
            v66 = *(_QWORD *)(v8 + 40);
            v67 = v62 < v65;
            if (v62 == v65)
              v68 = v64 < v66;
            else
              v68 = v67;
            v69 = *(double *)(a2 - 48);
            v70 = *(_QWORD *)(a2 - 40);
            v71 = v70 < v64;
            if (v69 != v63)
              v71 = v69 < v63;
            if (v68)
            {
              if (v71)
              {
                *(double *)(v8 + 32) = v69;
                *(double *)(a2 - 48) = v65;
                *(_QWORD *)(v8 + 40) = v70;
LABEL_76:
                *(_QWORD *)(a2 - 40) = v66;
                goto LABEL_77;
              }
              *(double *)(v8 + 32) = v63;
              *(double *)v61 = v65;
              *(_QWORD *)(v8 + 40) = v64;
              *(_QWORD *)(v61 + 8) = v66;
              v76 = *(double *)(a2 - 48);
              v77 = *(_QWORD *)(a2 - 40);
              v78 = v77 < v66;
              if (v76 != v65)
                v78 = v76 < v65;
              if (v78)
              {
                *(double *)v61 = v76;
                *(double *)(a2 - 48) = v65;
                *(_QWORD *)(v61 + 8) = v77;
                goto LABEL_76;
              }
            }
            else if (v71)
            {
              *(double *)v61 = v69;
              *(double *)(a2 - 48) = v63;
              *(_QWORD *)(v61 + 8) = v70;
              *(_QWORD *)(a2 - 40) = v64;
              v72 = *(_QWORD *)(v61 + 8);
              v73 = *(double *)(v8 + 32);
              v74 = *(_QWORD *)(v8 + 40);
              v75 = v72 < v74;
              if (*(double *)v61 != v73)
                v75 = *(double *)v61 < v73;
              if (v75)
              {
                *(_QWORD *)(v8 + 32) = *(_QWORD *)v61;
                *(double *)v61 = v73;
                *(_QWORD *)(v8 + 40) = v72;
                *(_QWORD *)(v61 + 8) = v74;
              }
            }
LABEL_77:
            v79 = *(double *)v12;
            v80 = *(_QWORD *)(v12 + 8);
            v81 = *(double *)v39;
            v82 = *(_QWORD *)(v39 + 8);
            if (*(double *)v12 == *(double *)v39)
              v83 = v80 < v82;
            else
              v83 = *(double *)v12 < *(double *)v39;
            v84 = *(double *)v61;
            v85 = *(_QWORD *)(v61 + 8);
            v86 = v85 < v80;
            if (*(double *)v61 != v79)
              v86 = *(double *)v61 < v79;
            if (v83)
            {
              if (!v86)
              {
                *(double *)v39 = v79;
                *(double *)v12 = v81;
                v87 = v85 < v82;
                if (v84 != v81)
                  v87 = v84 < v81;
                *(_QWORD *)(v39 + 8) = v80;
                *(_QWORD *)(v12 + 8) = v82;
                v39 = v12;
                v80 = v85;
                v79 = v84;
                if (!v87)
                {
                  v80 = v82;
                  v79 = v81;
LABEL_94:
                  v89 = *(double *)v8;
                  *(double *)v8 = v79;
                  *(double *)v12 = v89;
                  v90 = v8 + 16 * v11;
                  v91 = *(_QWORD *)(v8 + 8);
                  *(_QWORD *)(v8 + 8) = v80;
                  *(_QWORD *)(v90 + 8) = v91;
                  goto LABEL_95;
                }
              }
            }
            else
            {
              if (!v86)
                goto LABEL_94;
              *(double *)v12 = v84;
              *(double *)v61 = v79;
              *(_QWORD *)(v12 + 8) = v85;
              *(_QWORD *)(v61 + 8) = v80;
              if (v84 == v81)
                v88 = v85 < v82;
              else
                v88 = v84 < v81;
              v61 = v12;
              v80 = v82;
              v79 = v81;
              if (!v88)
              {
                v80 = v85;
                v79 = v84;
                goto LABEL_94;
              }
            }
            *(double *)v39 = v84;
            *(double *)v61 = v81;
            *(_QWORD *)(v39 + 8) = v85;
            *(_QWORD *)(v61 + 8) = v82;
            goto LABEL_94;
          }
          v21 = *(double *)v8;
          v22 = *(_QWORD *)(v8 + 8);
          v23 = *(double *)v12;
          v24 = *(_QWORD *)(v12 + 8);
          v25 = *(double *)v8 < *(double *)v12;
          if (*(double *)v8 == *(double *)v12)
            v25 = v22 < v24;
          v26 = v14 < v22;
          if (v13 != v21)
            v26 = v13 < v21;
          if (v25)
          {
            if (v26)
            {
              *(double *)v12 = v13;
              *(double *)(a2 - 16) = v23;
              *(_QWORD *)(v12 + 8) = v14;
LABEL_53:
              *(_QWORD *)(a2 - 8) = v24;
              goto LABEL_95;
            }
            *(double *)v12 = v21;
            *(double *)v8 = v23;
            *(_QWORD *)(v12 + 8) = v22;
            *(_QWORD *)(v8 + 8) = v24;
            v54 = *(double *)(a2 - 16);
            v55 = *(_QWORD *)(a2 - 8);
            v56 = v55 < v24;
            if (v54 != v23)
              v56 = v54 < v23;
            if (v56)
            {
              *(double *)v8 = v54;
              *(double *)(a2 - 16) = v23;
              *(_QWORD *)(v8 + 8) = v55;
              goto LABEL_53;
            }
          }
          else if (v26)
          {
            *(double *)v8 = v13;
            *(double *)(a2 - 16) = v21;
            *(_QWORD *)(v8 + 8) = v14;
            *(_QWORD *)(a2 - 8) = v22;
            v31 = *(_QWORD *)(v8 + 8);
            v32 = *(double *)v12;
            v33 = *(_QWORD *)(v12 + 8);
            v34 = v31 < v33;
            if (*(double *)v8 != *(double *)v12)
              v34 = *(double *)v8 < *(double *)v12;
            if (v34)
            {
              *(_QWORD *)v12 = *(_QWORD *)v8;
              *(double *)v8 = v32;
              *(_QWORD *)(v12 + 8) = v31;
              *(_QWORD *)(v8 + 8) = v33;
            }
          }
LABEL_95:
          --a3;
          v92 = *(double *)v8;
          if ((a4 & 1) == 0)
          {
            v94 = *(double *)(v8 - 16);
            v93 = *(_QWORD *)(v8 + 8);
            v95 = *(_QWORD *)(v8 - 8) < v93;
            if (v94 != v92)
              v95 = v94 < v92;
            if (v95)
              goto LABEL_100;
            v119 = *(double *)(a2 - 16);
            v120 = v93 < *(_QWORD *)(a2 - 8);
            if (v92 != v119)
              v120 = v92 < v119;
            if (v120)
            {
              do
              {
                v121 = *(double *)(v8 + 16);
                v8 += 16;
                v122 = v93 < *(_QWORD *)(v8 + 8);
                v123 = v92 < v121;
                if (v92 != v121)
                  v122 = v123;
              }
              while (!v122);
            }
            else
            {
              v124 = v8 + 16;
              do
              {
                v8 = v124;
                if (v124 >= a2)
                  break;
                v125 = *(double *)v124;
                v126 = v93 < *(_QWORD *)(v124 + 8);
                v127 = v92 < v125;
                if (v92 == v125)
                  v127 = v126;
                v124 = v8 + 16;
              }
              while (!v127);
            }
            v128 = (double *)a2;
            if (v8 < a2)
            {
              v128 = (double *)a2;
              do
              {
                v129 = *(v128 - 2);
                v128 -= 2;
                v130 = v93 < *((_QWORD *)v128 + 1);
                v131 = v92 < v129;
                if (v92 != v129)
                  v130 = v131;
              }
              while (v130);
            }
            if (v8 < (unint64_t)v128)
            {
              v132 = *(double *)v8;
              v133 = *v128;
              do
              {
                *(double *)v8 = v133;
                *v128 = v132;
                v134 = *(_QWORD *)(v8 + 8);
                *(double *)(v8 + 8) = v128[1];
                *((_QWORD *)v128 + 1) = v134;
                do
                {
                  v135 = *(double *)(v8 + 16);
                  v8 += 16;
                  v132 = v135;
                  v136 = v93 < *(_QWORD *)(v8 + 8);
                  v137 = v92 < v135;
                  if (v92 != v135)
                    v136 = v137;
                }
                while (!v136);
                do
                {
                  v138 = *(v128 - 2);
                  v128 -= 2;
                  v133 = v138;
                  v139 = v93 < *((_QWORD *)v128 + 1);
                  v140 = v92 < v138;
                  if (v92 != v138)
                    v139 = v140;
                }
                while (v139);
              }
              while (v8 < (unint64_t)v128);
            }
            if (v8 - 16 != v7)
            {
              *(_QWORD *)v7 = *(_QWORD *)(v8 - 16);
              *(_QWORD *)(v7 + 8) = *(_QWORD *)(v8 - 8);
            }
            a4 = 0;
            *(double *)(v8 - 16) = v92;
            *(_QWORD *)(v8 - 8) = v93;
            continue;
          }
          v93 = *(_QWORD *)(v8 + 8);
LABEL_100:
          v96 = v8;
          do
          {
            v97 = v96;
            v98 = *(double *)(v96 + 16);
            v96 += 16;
            v99 = v98;
            v100 = *(_QWORD *)(v97 + 24) < v93;
            v101 = v98 < v92;
            if (v98 != v92)
              v100 = v101;
          }
          while (v100);
          v102 = (double *)a2;
          if (v97 == v8)
          {
            v102 = (double *)a2;
            do
            {
              if (v96 >= (unint64_t)v102)
                break;
              v106 = *(v102 - 2);
              v102 -= 2;
              v107 = *((_QWORD *)v102 + 1) < v93;
              v108 = v106 < v92;
              if (v106 != v92)
                v107 = v108;
            }
            while (!v107);
          }
          else
          {
            do
            {
              v103 = *(v102 - 2);
              v102 -= 2;
              v104 = *((_QWORD *)v102 + 1) < v93;
              v105 = v103 < v92;
              if (v103 != v92)
                v104 = v105;
            }
            while (!v104);
          }
          if (v96 >= (unint64_t)v102)
          {
            v8 = v96;
          }
          else
          {
            v109 = *v102;
            v8 = v96;
            v110 = v102;
            do
            {
              *(double *)v8 = v109;
              *v110 = v99;
              v111 = *(_QWORD *)(v8 + 8);
              *(double *)(v8 + 8) = v110[1];
              *((_QWORD *)v110 + 1) = v111;
              do
              {
                v112 = *(double *)(v8 + 16);
                v8 += 16;
                v99 = v112;
                v113 = *(_QWORD *)(v8 + 8) < v93;
                v114 = v112 < v92;
                if (v112 != v92)
                  v113 = v114;
              }
              while (v113);
              do
              {
                v115 = *(v110 - 2);
                v110 -= 2;
                v109 = v115;
                v116 = *((_QWORD *)v110 + 1) < v93;
                v117 = v115 < v92;
                if (v115 != v92)
                  v116 = v117;
              }
              while (!v116);
            }
            while (v8 < (unint64_t)v110);
          }
          if (v8 - 16 != v7)
          {
            *(_QWORD *)v7 = *(_QWORD *)(v8 - 16);
            *(_QWORD *)(v7 + 8) = *(_QWORD *)(v8 - 8);
          }
          *(double *)(v8 - 16) = v92;
          *(_QWORD *)(v8 - 8) = v93;
          if (v96 < (unint64_t)v102)
            goto LABEL_131;
          if (!(_DWORD)result)
          {
            if (v118)
              continue;
LABEL_131:
            a4 = 0;
            continue;
          }
          a2 = v8 - 16;
          if (v118)
            return result;
          goto LABEL_2;
        }
        v167 = v8 + 16;
        v169 = v8 == a2 || v167 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v169)
          {
            v170 = 0;
            v171 = v8;
            do
            {
              v173 = *(double *)(v171 + 16);
              v174 = *(_QWORD *)(v171 + 24);
              v175 = *(double *)v171;
              v176 = *(_QWORD *)(v171 + 8);
              v171 = v167;
              v177 = v174 < v176;
              if (v173 != v175)
                v177 = v173 < v175;
              if (v177)
              {
                v178 = v170;
                do
                {
                  v179 = v8 + v178;
                  *(double *)(v179 + 16) = v175;
                  *(_QWORD *)(v179 + 24) = *(_QWORD *)(v8 + v178 + 8);
                  if (!v178)
                  {
                    v172 = v8;
                    goto LABEL_199;
                  }
                  v175 = *(double *)(v179 - 16);
                  v180 = v174 < *(_QWORD *)(v179 - 8);
                  if (v173 != v175)
                    v180 = v173 < v175;
                  v178 -= 16;
                }
                while (v180);
                v172 = v8 + v178 + 16;
LABEL_199:
                *(double *)v172 = v173;
                *(_QWORD *)(v172 + 8) = v174;
              }
              v167 = v171 + 16;
              v170 += 16;
            }
            while (v171 + 16 != a2);
          }
        }
        else if (!v169)
        {
          v220 = (double *)(v8 + 24);
          do
          {
            v221 = *(double *)(v7 + 16);
            v222 = *(_QWORD *)(v7 + 24);
            v223 = *(double *)v7;
            v224 = *(_QWORD *)(v7 + 8);
            v7 = v167;
            v225 = v222 < v224;
            if (v221 != v223)
              v225 = v221 < v223;
            if (v225)
            {
              v226 = v220;
              do
              {
                v227 = v226;
                *(v226 - 1) = v223;
                v228 = *((_QWORD *)v226 - 2);
                v226 -= 2;
                *(_QWORD *)v227 = v228;
                v223 = *(v227 - 5);
                v229 = v222 < *((_QWORD *)v227 - 4);
                if (v221 != v223)
                  v229 = v221 < v223;
              }
              while (v229);
              *(v226 - 1) = v221;
              *(_QWORD *)v226 = v222;
            }
            v167 = v7 + 16;
            v220 += 2;
          }
          while (v7 + 16 != a2);
        }
        return result;
    }
  }
}

uint64_t std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,`anonymous namespace'::DepthCompare &,std::pair<double,altitude::Tile *> *>(uint64_t result, uint64_t a2, double *a3, uint64_t a4)
{
  double v4;
  unint64_t v5;
  double v6;
  unint64_t v7;
  BOOL v8;
  double v9;
  unint64_t v10;
  _BOOL4 v11;
  unint64_t v12;
  double v13;
  unint64_t v14;
  _BOOL4 v15;
  _BOOL4 v16;
  unint64_t v17;
  _BOOL4 v18;
  unint64_t v19;
  double v20;
  unint64_t v21;
  _BOOL4 v22;
  unint64_t v23;
  double v24;
  unint64_t v25;
  _BOOL4 v26;

  v4 = *(double *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(double *)result;
  v7 = *(_QWORD *)(result + 8);
  if (*(double *)a2 == *(double *)result)
    v8 = v5 < v7;
  else
    v8 = *(double *)a2 < *(double *)result;
  v9 = *a3;
  v10 = *((_QWORD *)a3 + 1);
  v11 = v10 < v5;
  if (*a3 != v4)
    v11 = *a3 < v4;
  if (v8)
  {
    if (v11)
    {
      *(double *)result = v9;
      *a3 = v6;
      *(_QWORD *)(result + 8) = v10;
LABEL_18:
      v5 = v7;
      v4 = v6;
      *((_QWORD *)a3 + 1) = v7;
      goto LABEL_20;
    }
    *(double *)result = v4;
    *(double *)a2 = v6;
    *(_QWORD *)(result + 8) = v5;
    *(_QWORD *)(a2 + 8) = v7;
    v4 = *a3;
    v5 = *((_QWORD *)a3 + 1);
    v16 = v5 < v7;
    if (*a3 != v6)
      v16 = *a3 < v6;
    if (v16)
    {
      *(double *)a2 = v4;
      *a3 = v6;
      *(_QWORD *)(a2 + 8) = v5;
      goto LABEL_18;
    }
  }
  else if (v11)
  {
    *(double *)a2 = v9;
    *a3 = v4;
    *(_QWORD *)(a2 + 8) = v10;
    *((_QWORD *)a3 + 1) = v5;
    v12 = *(_QWORD *)(a2 + 8);
    v13 = *(double *)result;
    v14 = *(_QWORD *)(result + 8);
    v15 = v12 < v14;
    if (*(double *)a2 != *(double *)result)
      v15 = *(double *)a2 < *(double *)result;
    if (v15)
    {
      *(_QWORD *)result = *(_QWORD *)a2;
      *(double *)a2 = v13;
      *(_QWORD *)(result + 8) = v12;
      *(_QWORD *)(a2 + 8) = v14;
      v4 = *a3;
      v5 = *((_QWORD *)a3 + 1);
    }
  }
  else
  {
    v5 = *((_QWORD *)a3 + 1);
    v4 = *a3;
  }
LABEL_20:
  v17 = *(_QWORD *)(a4 + 8);
  v18 = v17 < v5;
  if (*(double *)a4 != v4)
    v18 = *(double *)a4 < v4;
  if (v18)
  {
    *a3 = *(double *)a4;
    *(double *)a4 = v4;
    *((_QWORD *)a3 + 1) = v17;
    *(_QWORD *)(a4 + 8) = v5;
    v19 = *((_QWORD *)a3 + 1);
    v20 = *(double *)a2;
    v21 = *(_QWORD *)(a2 + 8);
    v22 = v19 < v21;
    if (*a3 != *(double *)a2)
      v22 = *a3 < *(double *)a2;
    if (v22)
    {
      *(double *)a2 = *a3;
      *a3 = v20;
      *(_QWORD *)(a2 + 8) = v19;
      *((_QWORD *)a3 + 1) = v21;
      v23 = *(_QWORD *)(a2 + 8);
      v24 = *(double *)result;
      v25 = *(_QWORD *)(result + 8);
      v26 = v23 < v25;
      if (*(double *)a2 != *(double *)result)
        v26 = *(double *)a2 < *(double *)result;
      if (v26)
      {
        *(_QWORD *)result = *(_QWORD *)a2;
        *(double *)a2 = v24;
        *(_QWORD *)(result + 8) = v23;
        *(_QWORD *)(a2 + 8) = v25;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,`anonymous namespace'::DepthCompare &,std::pair<double,altitude::Tile *> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  double v6;
  unint64_t v7;
  double v8;
  unint64_t v9;
  _BOOL4 v10;
  double v11;
  unint64_t v12;
  double v13;
  unint64_t v14;
  BOOL v15;
  double v16;
  unint64_t v17;
  _BOOL4 v18;
  uint64_t v19;
  double v20;
  double *v21;
  double v22;
  unint64_t *v23;
  unint64_t v24;
  double v25;
  unint64_t v26;
  unint64_t *v27;
  BOOL v28;
  unint64_t v29;
  _BOOL4 v30;
  double *v31;
  double v32;
  unint64_t v33;
  double v34;
  unint64_t v35;
  _BOOL4 v36;
  double v37;
  unint64_t v38;
  double v39;
  unint64_t v40;
  _BOOL4 v41;
  double v42;
  unint64_t v43;
  _BOOL4 v44;
  double v45;
  unint64_t v46;
  _BOOL4 v47;
  double v48;
  unint64_t v49;
  double v50;
  unint64_t v51;
  _BOOL4 v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  double v58;
  unint64_t v59;
  double v60;
  _BOOL4 v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  double v65;
  unint64_t v66;
  _BOOL4 v67;
  _BOOL4 v68;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(double *)(a2 - 16);
      v7 = *(_QWORD *)(a2 - 8);
      v8 = *(double *)a1;
      v9 = *(_QWORD *)(a1 + 8);
      v10 = v7 < v9;
      if (v6 != *(double *)a1)
        v10 = v6 < *(double *)a1;
      if (v10)
      {
        *(double *)a1 = v6;
        *(double *)(a2 - 16) = v8;
        *(_QWORD *)(a1 + 8) = v7;
        *(_QWORD *)(a2 - 8) = v9;
      }
      return result;
    case 3:
      v11 = *(double *)(a1 + 16);
      v12 = *(_QWORD *)(a1 + 24);
      v13 = *(double *)a1;
      v14 = *(_QWORD *)(a1 + 8);
      if (v11 == *(double *)a1)
        v15 = v12 < v14;
      else
        v15 = v11 < *(double *)a1;
      v16 = *(double *)(a2 - 16);
      v17 = *(_QWORD *)(a2 - 8);
      v18 = v17 < v12;
      if (v16 != v11)
        v18 = v16 < v11;
      if (v15)
      {
        if (v18)
        {
          *(double *)a1 = v16;
          *(double *)(a2 - 16) = v13;
          *(_QWORD *)(a1 + 8) = v17;
          *(_QWORD *)(a2 - 8) = v14;
        }
        else
        {
          *(double *)a1 = v11;
          *(double *)(a1 + 16) = v13;
          *(_QWORD *)(a1 + 8) = v12;
          *(_QWORD *)(a1 + 24) = v14;
          v65 = *(double *)(a2 - 16);
          v66 = *(_QWORD *)(a2 - 8);
          v67 = v66 < v14;
          if (v65 != v13)
            v67 = v65 < v13;
          if (v67)
          {
            *(double *)(a1 + 16) = v65;
            *(double *)(a2 - 16) = v13;
            *(_QWORD *)(a1 + 24) = v66;
            *(_QWORD *)(a2 - 8) = v14;
          }
        }
      }
      else if (v18)
      {
        *(double *)(a1 + 16) = v16;
        *(double *)(a2 - 16) = v11;
        *(_QWORD *)(a1 + 24) = v17;
        *(_QWORD *)(a2 - 8) = v12;
        v48 = *(double *)(a1 + 16);
        v49 = *(_QWORD *)(a1 + 24);
        v50 = *(double *)a1;
        v51 = *(_QWORD *)(a1 + 8);
        v52 = v49 < v51;
        if (v48 != *(double *)a1)
          v52 = v48 < *(double *)a1;
        if (v52)
        {
          *(double *)a1 = v48;
          *(double *)(a1 + 16) = v50;
          *(_QWORD *)(a1 + 8) = v49;
          *(_QWORD *)(a1 + 24) = v51;
        }
      }
      return result;
    case 4:
      return 1;
    case 5:
      v32 = *(double *)(a2 - 16);
      v33 = *(_QWORD *)(a2 - 8);
      v34 = *(double *)(a1 + 48);
      v35 = *(_QWORD *)(a1 + 56);
      v36 = v33 < v35;
      if (v32 != v34)
        v36 = v32 < v34;
      if (!v36)
        return 1;
      *(double *)(a1 + 48) = v32;
      *(double *)(a2 - 16) = v34;
      *(_QWORD *)(a1 + 56) = v33;
      *(_QWORD *)(a2 - 8) = v35;
      v37 = *(double *)(a1 + 48);
      v38 = *(_QWORD *)(a1 + 56);
      v39 = *(double *)(a1 + 32);
      v40 = *(_QWORD *)(a1 + 40);
      v41 = v38 < v40;
      if (v37 != v39)
        v41 = v37 < v39;
      if (!v41)
        return 1;
      *(double *)(a1 + 32) = v37;
      *(double *)(a1 + 48) = v39;
      *(_QWORD *)(a1 + 40) = v38;
      *(_QWORD *)(a1 + 56) = v40;
      v42 = *(double *)(a1 + 16);
      v43 = *(_QWORD *)(a1 + 24);
      v44 = v38 < v43;
      if (v37 != v42)
        v44 = v37 < v42;
      if (!v44)
        return 1;
      *(double *)(a1 + 16) = v37;
      *(double *)(a1 + 32) = v42;
      *(_QWORD *)(a1 + 24) = v38;
      *(_QWORD *)(a1 + 40) = v43;
      v45 = *(double *)a1;
      v46 = *(_QWORD *)(a1 + 8);
      v47 = v38 < v46;
      if (v37 != *(double *)a1)
        v47 = v37 < *(double *)a1;
      if (!v47)
        return 1;
      *(double *)a1 = v37;
      *(double *)(a1 + 16) = v45;
      *(_QWORD *)(a1 + 8) = v38;
      result = 1;
      *(_QWORD *)(a1 + 24) = v46;
      return result;
    default:
      v19 = a1 + 32;
      v20 = *(double *)(a1 + 32);
      v21 = (double *)(a1 + 16);
      v22 = *(double *)(a1 + 16);
      v23 = (unint64_t *)(a1 + 24);
      v24 = *(_QWORD *)(a1 + 24);
      v25 = *(double *)a1;
      v27 = (unint64_t *)(a1 + 8);
      v26 = *(_QWORD *)(a1 + 8);
      v28 = v22 < *(double *)a1;
      v29 = *(_QWORD *)(a1 + 40);
      if (v22 == *(double *)a1)
        v28 = v24 < v26;
      v30 = v29 < v24;
      if (v20 != v22)
        v30 = v20 < v22;
      if (v28)
      {
        if (v30)
        {
          v31 = (double *)a1;
          v21 = (double *)(a1 + 32);
          v23 = (unint64_t *)(a1 + 40);
LABEL_44:
          *v31 = v20;
          *v21 = v25;
          *v27 = v29;
          *v23 = v26;
          goto LABEL_45;
        }
        *(double *)a1 = v22;
        *(double *)(a1 + 16) = v25;
        if (v20 == v25)
          v68 = v29 < v26;
        else
          v68 = v20 < v25;
        v31 = (double *)(a1 + 16);
        *(_QWORD *)(a1 + 8) = v24;
        *(_QWORD *)(a1 + 24) = v26;
        v21 = (double *)(a1 + 32);
        v27 = (unint64_t *)(a1 + 24);
        v23 = (unint64_t *)(a1 + 40);
        if (v68)
          goto LABEL_44;
      }
      else if (v30)
      {
        *v21 = v20;
        *(double *)v19 = v22;
        *v23 = v29;
        *(_QWORD *)(a1 + 40) = v24;
        v53 = v29 < v26;
        if (v20 != v25)
          v53 = v20 < v25;
        v31 = (double *)a1;
        if (v53)
          goto LABEL_44;
      }
LABEL_45:
      v54 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v55 = 0;
      v56 = 0;
      while (1)
      {
        v58 = *(double *)v54;
        v59 = *(_QWORD *)(v54 + 8);
        v60 = *(double *)v19;
        v61 = v59 < *(_QWORD *)(v19 + 8);
        if (*(double *)v54 != v60)
          v61 = *(double *)v54 < v60;
        if (v61)
        {
          v62 = v55;
          do
          {
            v63 = a1 + v62;
            *(double *)(v63 + 48) = v60;
            *(_QWORD *)(v63 + 56) = *(_QWORD *)(a1 + v62 + 40);
            if (v62 == -32)
            {
              v57 = a1;
              goto LABEL_48;
            }
            v60 = *(double *)(v63 + 16);
            v64 = v59 < *(_QWORD *)(v63 + 24);
            if (v58 != v60)
              v64 = v58 < v60;
            v62 -= 16;
          }
          while (v64);
          v57 = a1 + v62 + 48;
LABEL_48:
          *(double *)v57 = v58;
          *(_QWORD *)(v57 + 8) = v59;
          if (++v56 == 8)
            return v54 + 16 == a2;
        }
        v19 = v54;
        v55 += 16;
        v54 += 16;
        if (v54 == a2)
          return 1;
      }
  }
}

uint64_t altitude::IntersectorHeight::heightAtLatLon(uint64_t a1, double *a2, double *a3, unsigned __int8 a4)
{
  double v8;
  long double v9;
  long double v10;
  double v11;
  uint64_t v12;
  std::mutex *v13;
  char *v14;
  char *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  char *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  BOOL v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  char *v47;
  __int128 v48;
  char *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  unint64_t *v59;
  unint64_t v60;
  int v61;
  unint64_t v62;
  char *v63;
  char *v64;
  __int128 v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  unsigned int *v72;
  unsigned int v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v83[2];
  _BYTE v84[4];
  int v85;
  int v86;
  __int128 v87;
  void (**v88)(karo::AsyncRequestManager::RequestHandle *__hidden);
  uint64_t v89;
  std::__shared_weak_count *v90;
  _QWORD v91[4];

  v8 = a2[1];
  v9 = tan(*a2 * 0.5 + 0.785398163);
  v10 = log(v9);
  v11 = (double)(1 << a4);
  LODWORD(v12) = vcvtmd_s64_f64((v8 * 0.159154943 + 0.5) * v11);
  v91[0] = 0;
  v91[1] = 0;
  v91[2] = a4 | ((unint64_t)(vcvtmd_s64_f64((v10 * 0.159154943 + 0.5) * v11) + ~(-1 << a4) - (1 << a4) + 1) << 32);
  v91[3] = v12;
  (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD *, _QWORD, uint64_t))(**(_QWORD **)(a1 + 96) + 104))(&v87, *(_QWORD *)(a1 + 96), v91, 0, 1);
  if (!(_QWORD)v87)
  {
    v25 = 0;
    if (karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)&v88))
      v26 = 2;
    else
      v26 = 1;
    goto LABEL_98;
  }
  v13 = (std::mutex *)(a1 + 32);
  std::mutex::lock((std::mutex *)(a1 + 32));
  v14 = *(char **)(a1 + 8);
  v15 = *(char **)(a1 + 16);
  v16 = v14;
  if (v14 != v15)
  {
    if (*((_QWORD *)v15 - 2) == (_QWORD)v87)
      goto LABEL_63;
    v16 = *(char **)(a1 + 8);
    while (*(_QWORD *)v16 != (_QWORD)v87)
    {
      v16 += 16;
      if (v16 == v15)
      {
        v16 = *(char **)(a1 + 16);
        break;
      }
    }
  }
  if (v16 != v15)
  {
    v17 = v16 + 16;
    if (v16 + 16 != v15)
    {
      v18 = v16;
      do
      {
        v19 = v17;
        v20 = *((_QWORD *)v16 + 2);
        if (v20 != (_QWORD)v87)
        {
          v21 = *((_QWORD *)v16 + 3);
          *v19 = 0;
          v19[1] = 0;
          v22 = (std::__shared_weak_count *)*((_QWORD *)v18 + 1);
          *(_QWORD *)v18 = v20;
          *((_QWORD *)v18 + 1) = v21;
          if (v22)
          {
            p_shared_owners = (unint64_t *)&v22->__shared_owners_;
            do
              v24 = __ldaxr(p_shared_owners);
            while (__stlxr(v24 - 1, p_shared_owners));
            if (!v24)
            {
              ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
              std::__shared_weak_count::__release_weak(v22);
            }
          }
          v18 += 16;
        }
        v17 = v19 + 2;
        v16 = (char *)v19;
      }
      while (v19 + 2 != (_QWORD *)v15);
      v15 = *(char **)(a1 + 16);
      if (v18 == v15)
        goto LABEL_25;
LABEL_23:
      v27 = v18;
      while (v15 != v18)
      {
        v28 = (std::__shared_weak_count *)*((_QWORD *)v15 - 1);
        if (v28)
        {
          v29 = (unint64_t *)&v28->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
        v15 -= 16;
      }
      *(_QWORD *)(a1 + 16) = v18;
      goto LABEL_34;
    }
  }
  v18 = v16;
  if (v16 != v15)
    goto LABEL_23;
LABEL_25:
  v27 = v15;
LABEL_34:
  v31 = *(_QWORD *)(a1 + 24);
  if ((unint64_t)v27 >= v31)
  {
    v35 = *(char **)(a1 + 8);
    v36 = (v27 - v35) >> 4;
    v37 = v36 + 1;
    if ((unint64_t)(v36 + 1) >> 60)
      abort();
    v38 = v31 - (_QWORD)v35;
    if (v38 >> 3 > v37)
      v37 = v38 >> 3;
    v39 = (unint64_t)v38 >= 0x7FFFFFFFFFFFFFF0;
    v40 = 0xFFFFFFFFFFFFFFFLL;
    if (!v39)
      v40 = v37;
    if (v40 >> 60)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v41 = 16 * v40;
    v42 = (char *)operator new(16 * v40);
    v43 = &v42[16 * v36];
    v44 = *((_QWORD *)&v87 + 1);
    *(_OWORD *)v43 = v87;
    if (v44)
    {
      v45 = (unint64_t *)(v44 + 8);
      do
        v46 = __ldxr(v45);
      while (__stxr(v46 + 1, v45));
      v35 = *(char **)(a1 + 8);
      v27 = *(char **)(a1 + 16);
    }
    v47 = &v42[v41];
    v15 = v43 + 16;
    if (v27 == v35)
    {
      *(_QWORD *)(a1 + 8) = v43;
      *(_QWORD *)(a1 + 16) = v15;
      *(_QWORD *)(a1 + 24) = v47;
    }
    else
    {
      do
      {
        v48 = *((_OWORD *)v27 - 1);
        v27 -= 16;
        *((_OWORD *)v43 - 1) = v48;
        v43 -= 16;
        *(_QWORD *)v27 = 0;
        *((_QWORD *)v27 + 1) = 0;
      }
      while (v27 != v35);
      v35 = *(char **)(a1 + 8);
      v49 = *(char **)(a1 + 16);
      *(_QWORD *)(a1 + 8) = v43;
      *(_QWORD *)(a1 + 16) = v15;
      *(_QWORD *)(a1 + 24) = v47;
      while (v49 != v35)
      {
        v50 = (std::__shared_weak_count *)*((_QWORD *)v49 - 1);
        if (v50)
        {
          v51 = (unint64_t *)&v50->__shared_owners_;
          do
            v52 = __ldaxr(v51);
          while (__stlxr(v52 - 1, v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
            std::__shared_weak_count::__release_weak(v50);
          }
        }
        v49 -= 16;
      }
    }
    if (v35)
      operator delete(v35);
  }
  else
  {
    *(_QWORD *)v27 = v87;
    v32 = *((_QWORD *)&v87 + 1);
    *((_QWORD *)v27 + 1) = *((_QWORD *)&v87 + 1);
    if (v32)
    {
      v33 = (unint64_t *)(v32 + 8);
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
    }
    v15 = v27 + 16;
  }
  *(_QWORD *)(a1 + 16) = v15;
  v14 = *(char **)(a1 + 8);
LABEL_63:
  if ((unint64_t)(v15 - v14) >= 0xA1)
  {
    do
    {
      v63 = v14 + 16;
      v64 = v14;
      if (v14 + 16 != v15)
      {
        do
        {
          v65 = *(_OWORD *)v63;
          *(_QWORD *)v63 = 0;
          *((_QWORD *)v63 + 1) = 0;
          v66 = (std::__shared_weak_count *)*((_QWORD *)v64 + 1);
          *(_OWORD *)v64 = v65;
          if (v66)
          {
            v67 = (unint64_t *)&v66->__shared_owners_;
            do
              v68 = __ldaxr(v67);
            while (__stlxr(v68 - 1, v67));
            if (!v68)
            {
              ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
              std::__shared_weak_count::__release_weak(v66);
            }
          }
          v63 += 16;
          v64 += 16;
        }
        while (v63 != v15);
        v15 = *(char **)(a1 + 16);
      }
      while (v15 != v64)
      {
        v69 = (std::__shared_weak_count *)*((_QWORD *)v15 - 1);
        if (v69)
        {
          v70 = (unint64_t *)&v69->__shared_owners_;
          do
            v71 = __ldaxr(v70);
          while (__stlxr(v71 - 1, v70));
          if (!v71)
          {
            ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
            std::__shared_weak_count::__release_weak(v69);
          }
        }
        v15 -= 16;
      }
      *(_QWORD *)(a1 + 16) = v64;
      v14 = *(char **)(a1 + 8);
      v15 = v64;
    }
    while ((unint64_t)(v64 - v14) > 0xA0);
  }
  v25 = (std::__shared_weak_count *)*((_QWORD *)&v87 + 1);
  v53 = v87;
  if (*((_QWORD *)&v87 + 1))
  {
    v54 = (unint64_t *)(*((_QWORD *)&v87 + 1) + 8);
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 1, v54));
  }
  std::mutex::unlock(v13);
  if (!v53)
  {
    v26 = 0;
LABEL_98:
    *a3 = 0.0;
    goto LABEL_99;
  }
  v56 = *(_QWORD *)(v53 + 136);
  v57 = *(_QWORD *)(v53 + 144);
  if (v56 >= 0x1F)
    v58 = 31;
  else
    v58 = *(_QWORD *)(v53 + 136);
  v84[0] = -1;
  v84[1] = v56;
  v85 = ~(-1 << v58) - HIDWORD(v56);
  v86 = v57;
  v83[0] = v53;
  v83[1] = (uint64_t)v25;
  if (v25)
  {
    v59 = (unint64_t *)&v25->__shared_owners_;
    do
      v60 = __ldxr(v59);
    while (__stxr(v60 + 1, v59));
    v61 = altitude::IntersectorHeight::sampleHeightMap(v83, (uint64_t)v84, a2, a3);
    do
      v62 = __ldaxr(v59);
    while (__stlxr(v62 - 1, v59));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
    v26 = v61 ^ 1u;
  }
  else
  {
    v26 = altitude::IntersectorHeight::sampleHeightMap(v83, (uint64_t)v84, a2, a3) ^ 1;
  }
LABEL_99:
  v88 = &off_1E42C2D08;
  if (v89)
  {
    v72 = (unsigned int *)(v89 + 128);
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
  }
  v74 = v90;
  if (v90)
  {
    v75 = (unint64_t *)&v90->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  v77 = (std::__shared_weak_count *)*((_QWORD *)&v87 + 1);
  if (*((_QWORD *)&v87 + 1))
  {
    v78 = (unint64_t *)(*((_QWORD *)&v87 + 1) + 8);
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  if (v25)
  {
    v80 = (unint64_t *)&v25->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  return v26;
}

uint64_t altitude::IntersectorHeight::sampleHeightMap(uint64_t *a1, uint64_t a2, double *a3, double *a4)
{
  uint64_t v4;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  float v17;
  float v18;
  int v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  long double v25;
  long double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  float v33;
  double v34;
  double v35;
  int v36;
  NSObject *v38;
  uint8_t v39[16];

  v4 = *(_QWORD *)(*a1 + 16);
  if (!v4)
    return 0;
  v9 = *(uint64_t **)(v4 + 16);
  v11 = *v9;
  v10 = (std::__shared_weak_count *)v9[1];
  if (!v10)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldxr(p_shared_owners);
  while (__stxr(v13 + 1, p_shared_owners));
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    if (!v11)
      return 0;
  }
  else
  {
LABEL_7:
    if (!v11)
      return 0;
  }
  v15 = *a1;
  v16 = *(_DWORD **)(v15 + 16);
  if (v16)
  {
    v17 = (float)(*v16 - 1);
    v18 = (float)(v16[1] - 1);
  }
  else
  {
    v17 = -1.0;
    v18 = -1.0;
  }
  v19 = 1 << *(_BYTE *)(a2 + 1);
  v20 = (double)v19;
  v21 = -1.0 / (double)v19;
  v22 = (double)*(int *)(a2 + 8);
  v23 = (double)(v19 + ~*(_DWORD *)(a2 + 4));
  v24 = a3[1];
  v25 = tan(*a3 * 0.5 + 0.785398163);
  v26 = log(v25);
  v31 = (v24 * 0.159154943 + 0.5 + v21 * v22) * v20;
  *(float *)&v31 = v31;
  v32 = v21 * v23 + 0.5;
  v33 = (v32 + v26 * 0.159154943) * v20;
  v34 = (float)(v17 * *(float *)&v31);
  v35 = (float)(v18 * v33);
  v36 = *(_DWORD *)(v15 + 132);
  if (v36 == 16)
    return karo::media::DigitalTerrainModel::sampleT<double,unsigned short>(v15, a4, v34, v35, v31, v32, v27, v28, v29, v30);
  if (v36 == 8)
    return karo::media::DigitalTerrainModel::sampleT<double,unsigned char>(v15, a4, v34, v35, v31, v32, v27, v28, v29, v30);
  if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
  v38 = GEOGetVectorKitVKDefaultLog_log;
  if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v39 = 0;
    _os_log_impl(&dword_19F029000, v38, OS_LOG_TYPE_ERROR, "Unknown DTM format", v39, 2u);
  }
  return 0;
}

uint64_t karo::media::DigitalTerrainModel::sampleT<double,unsigned char>(uint64_t a1, double *a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  double v10;
  double v12;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  uint64_t v18;
  double v19;
  double v20;
  int v21;
  uint64_t *v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int *v35;
  int v36;
  unsigned int v37;
  double v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  uint64_t result;
  double v48;
  float v49;
  float v50;
  float v51;
  NSObject *v52;
  uint8_t v53[16];

  v12 = a4;
  v14 = a1;
  v15 = *(_QWORD *)(a1 + 16);
  do
  {
    if (!v15)
      return 0;
    v22 = *(uint64_t **)(v15 + 16);
    v24 = *v22;
    v23 = (std::__shared_weak_count *)v22[1];
    if (!v23)
      goto LABEL_11;
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v26 = __ldxr(p_shared_owners);
    while (__stxr(v26 + 1, p_shared_owners));
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
      if (!v24)
        return 0;
    }
    else
    {
LABEL_11:
      if (!v24)
        return 0;
    }
    v28 = *(uint64_t **)(*(_QWORD *)(v14 + 16) + 16);
    v29 = *v28;
    v30 = (std::__shared_weak_count *)v28[1];
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
      v33 = *(_QWORD *)(v29 + 8);
      do
        v34 = __ldaxr(v31);
      while (__stlxr(v34 - 1, v31));
      if (v34)
      {
        v35 = *(int **)(v14 + 16);
        if (v35)
          goto LABEL_21;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
        v35 = *(int **)(v14 + 16);
        if (v35)
        {
LABEL_21:
          v36 = *v35;
          v37 = v35[1] - 2;
          goto LABEL_24;
        }
      }
    }
    else
    {
      v33 = *(_QWORD *)(v29 + 8);
      v35 = *(int **)(v14 + 16);
      if (v35)
        goto LABEL_21;
    }
    v36 = 0;
    v37 = -2;
LABEL_24:
    v38 = (double)(v36 - 1) - v12;
    v39 = v36 - 2;
    if (a3 < v36 - 2)
      v39 = a3;
    if (v38 >= v37)
      v40 = v37;
    else
      v40 = v38;
    v41 = v39 + v40 * v36;
    v42 = *(unsigned __int8 *)(v33 + v41);
    v43 = *(unsigned __int8 *)(v33 + v41 + 1);
    v44 = v41 + v36;
    v45 = *(unsigned __int8 *)(v33 + v44);
    v46 = *(unsigned __int8 *)(v33 + v44 + 1);
    if (!*(_BYTE *)(v14 + 156) || v42 != 255 && v43 != 255 && v45 != 255 && v46 != 255)
    {
      v49 = a3 - (double)v39;
      v50 = v38 - (double)v40;
      v51 = (float)v42 + (float)((float)(int)(v43 - v42) * v49);
      *a2 = (float)(*(float *)(v14 + 120)
                  + (float)(*(float *)(v14 + 124)
                          * truncf(truncf(v51)+ (float)((float)((int)(float)((float)v45 + (float)((float)(int)(v46 - v45) * v49))- (int)v51)* v50))));
      return 1;
    }
    result = *(_QWORD *)(v14 + 160);
    if (!result)
      return result;
    v48 = 1.0 / (double)(1 << *(_DWORD *)(v14 + 136));
    if (v35)
    {
      LODWORD(a4) = *v35;
      LODWORD(a5) = v35[1];
      a6 = v48 * a3;
      v16 = v48 * a3 / ((double)*(unint64_t *)&a4 + -1.0);
      v17 = (double)*(unint64_t *)&a5 + -1.0;
      v15 = *(_QWORD *)(result + 16);
      if (v15)
      {
LABEL_3:
        LODWORD(a6) = *(_DWORD *)v15;
        a6 = (double)*(unint64_t *)&a6 + -1.0;
        goto LABEL_4;
      }
    }
    else
    {
      v16 = -(a3 * v48);
      v17 = -1.0;
      v15 = *(_QWORD *)(result + 16);
      if (v15)
        goto LABEL_3;
    }
    a6 = -1.0;
LABEL_4:
    v18 = *(_QWORD *)(result + 136);
    v19 = (double)(1 << v18);
    LODWORD(a10) = *(_DWORD *)(v14 + 140);
    LODWORD(a9) = *(_DWORD *)(v14 + 144);
    a9 = v48 * (double)*(unint64_t *)&a9;
    a10 = v48 * (double)*(unint64_t *)&a10;
    LODWORD(v10) = *(_DWORD *)(result + 144);
    v10 = (double)*(unint64_t *)&v10;
    v20 = v48 * v12 / v17;
    a5 = a9 - 1.0 / v19 * v10;
    a3 = (a5 + v16) * v19 * a6;
    a4 = v19 * a6;
    v12 = (a10 - 1.0 / v19 * (double)HIDWORD(v18) + v20) * (v19 * a6);
    v21 = *(_DWORD *)(result + 132);
    v14 = *(_QWORD *)(v14 + 160);
  }
  while (v21 == 8);
  if (v21 == 16)
    return karo::media::DigitalTerrainModel::sampleT<double,unsigned short>(result, a2, a3, v12, a5, a6, v19, 1.0 / v19, a9, a10);
  if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
  v52 = GEOGetVectorKitVKDefaultLog_log;
  result = os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR);
  if ((_DWORD)result)
  {
    *(_WORD *)v53 = 0;
    _os_log_impl(&dword_19F029000, v52, OS_LOG_TYPE_ERROR, "Unknown DTM format", v53, 2u);
    return 0;
  }
  return result;
}

uint64_t karo::media::DigitalTerrainModel::sampleT<double,unsigned short>(uint64_t a1, double *a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  double v10;
  double v12;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  uint64_t v18;
  double v19;
  double v20;
  int v21;
  uint64_t *v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int *v35;
  int v36;
  unsigned int v37;
  double v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  BOOL v47;
  BOOL v48;
  BOOL v49;
  uint64_t result;
  double v51;
  float v52;
  float v53;
  float v54;
  NSObject *v55;
  uint8_t v56[16];

  v12 = a4;
  v14 = a1;
  v15 = *(_QWORD *)(a1 + 16);
  do
  {
    if (!v15)
      return 0;
    v22 = *(uint64_t **)(v15 + 16);
    v24 = *v22;
    v23 = (std::__shared_weak_count *)v22[1];
    if (!v23)
      goto LABEL_11;
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v26 = __ldxr(p_shared_owners);
    while (__stxr(v26 + 1, p_shared_owners));
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
      if (!v24)
        return 0;
    }
    else
    {
LABEL_11:
      if (!v24)
        return 0;
    }
    v28 = *(uint64_t **)(*(_QWORD *)(v14 + 16) + 16);
    v29 = *v28;
    v30 = (std::__shared_weak_count *)v28[1];
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
      v33 = *(_QWORD *)(v29 + 8);
      do
        v34 = __ldaxr(v31);
      while (__stlxr(v34 - 1, v31));
      if (v34)
      {
        v35 = *(int **)(v14 + 16);
        if (v35)
          goto LABEL_21;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
        v35 = *(int **)(v14 + 16);
        if (v35)
        {
LABEL_21:
          v36 = *v35;
          v37 = v35[1] - 2;
          goto LABEL_24;
        }
      }
    }
    else
    {
      v33 = *(_QWORD *)(v29 + 8);
      v35 = *(int **)(v14 + 16);
      if (v35)
        goto LABEL_21;
    }
    v36 = 0;
    v37 = -2;
LABEL_24:
    v38 = (double)(v36 - 1) - v12;
    v39 = v36 - 2;
    if (a3 < v36 - 2)
      v39 = a3;
    if (v38 >= v37)
      v40 = v37;
    else
      v40 = v38;
    v41 = v39 + v40 * v36;
    v42 = *(unsigned __int16 *)(v33 + 2 * v41);
    v43 = *(unsigned __int16 *)(v33 + 2 * (v41 + 1));
    v44 = v41 + v36;
    v45 = *(unsigned __int16 *)(v33 + 2 * v44);
    v46 = *(unsigned __int16 *)(v33 + 2 * (v44 + 1));
    if (!*(_BYTE *)(v14 + 156)
      || (v42 != 0xFFFF ? (v47 = v43 == 0xFFFF) : (v47 = 1),
          !v47 ? (v48 = v45 == 0xFFFF) : (v48 = 1),
          !v48 ? (v49 = v46 == 0xFFFF) : (v49 = 1),
          !v49))
    {
      v52 = a3 - (double)v39;
      v53 = v38 - (double)v40;
      v54 = (float)v42 + (float)((float)(int)(v43 - v42) * v52);
      *a2 = (float)(*(float *)(v14 + 120)
                  + (float)(*(float *)(v14 + 124)
                          * truncf(truncf(v54)+ (float)((float)((int)(float)((float)v45 + (float)((float)(int)(v46 - v45) * v52))- (int)v54)* v53))));
      return 1;
    }
    result = *(_QWORD *)(v14 + 160);
    if (!result)
      return result;
    v51 = 1.0 / (double)(1 << *(_DWORD *)(v14 + 136));
    if (v35)
    {
      LODWORD(a4) = *v35;
      LODWORD(a5) = v35[1];
      a6 = v51 * a3;
      v16 = v51 * a3 / ((double)*(unint64_t *)&a4 + -1.0);
      v17 = (double)*(unint64_t *)&a5 + -1.0;
      v15 = *(_QWORD *)(result + 16);
      if (v15)
      {
LABEL_3:
        LODWORD(a6) = *(_DWORD *)v15;
        a6 = (double)*(unint64_t *)&a6 + -1.0;
        goto LABEL_4;
      }
    }
    else
    {
      v16 = -(a3 * v51);
      v17 = -1.0;
      v15 = *(_QWORD *)(result + 16);
      if (v15)
        goto LABEL_3;
    }
    a6 = -1.0;
LABEL_4:
    v18 = *(_QWORD *)(result + 136);
    v19 = (double)(1 << v18);
    LODWORD(a10) = *(_DWORD *)(v14 + 140);
    LODWORD(a9) = *(_DWORD *)(v14 + 144);
    a9 = v51 * (double)*(unint64_t *)&a9;
    a10 = v51 * (double)*(unint64_t *)&a10;
    LODWORD(v10) = *(_DWORD *)(result + 144);
    v10 = (double)*(unint64_t *)&v10;
    v20 = v51 * v12 / v17;
    a5 = a9 - 1.0 / v19 * v10;
    a3 = (a5 + v16) * v19 * a6;
    a4 = v19 * a6;
    v12 = (a10 - 1.0 / v19 * (double)HIDWORD(v18) + v20) * (v19 * a6);
    v21 = *(_DWORD *)(result + 132);
    v14 = *(_QWORD *)(v14 + 160);
  }
  while (v21 == 16);
  if (v21 == 8)
    return karo::media::DigitalTerrainModel::sampleT<double,unsigned char>(a3, v12);
  if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
  v55 = GEOGetVectorKitVKDefaultLog_log;
  result = os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR);
  if ((_DWORD)result)
  {
    *(_WORD *)v56 = 0;
    _os_log_impl(&dword_19F029000, v55, OS_LOG_TYPE_ERROR, "Unknown DTM format", v56, 2u);
    return 0;
  }
  return result;
}

uint64_t md::ARCollectMapDataLogic<(md::MapDataType)60,md::CollectARMapDataLogic>::didBecomeInactive(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(_WORD *)(result + 120) || *(_WORD *)(result + 122) || *(_DWORD *)(result + 124) != -1)
  {
    result = gdc::Registry::destroy(*(_QWORD *)(result + 128), *(_QWORD *)(result + 120));
    *(_QWORD *)(v1 + 120) = 0xFFFFFFFF00000000;
  }
  return result;
}

uint64_t md::Logic<md::CollectARMapDataLogic,md::ARCollectMapDataContext<(md::MapDataType)60>,md::LogicDependencies<gdc::TypeList<md::ARSceneContext,md::GeometryContext>,gdc::TypeList<>>>::_allocateContext@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t result;

  v4 = (_QWORD *)operator new();
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  result = operator new();
  v4[2] = "md::ARCollectMapDataContext<md::MapDataType::ARBuildings>]";
  v4[3] = 57;
  v4[4] = result;
  *v4 = &off_1E42B1248;
  v4[1] = 0x127F9F77D6DAB2F5;
  *a2 = v4;
  return result;
}

void sub_19FA3A6D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::CollectARMapDataLogic,md::ARCollectMapDataContext<(md::MapDataType)60>,md::LogicDependencies<gdc::TypeList<md::ARSceneContext,md::GeometryContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];

  if (*(_QWORD *)(a3 + 8) == 0x127F9F77D6DAB2F5)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::ARSceneContext,md::GeometryContext>,gdc::TypeList<>>::buildRequiredTuple<md::ARSceneContext,md::GeometryContext>(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 128))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::CollectARMapDataLogic,md::ARCollectMapDataContext<(md::MapDataType)60>,md::LogicDependencies<gdc::TypeList<md::ARSceneContext,md::GeometryContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];

  if (*(_QWORD *)(a3 + 8) == 0x127F9F77D6DAB2F5)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::ARSceneContext,md::GeometryContext>,gdc::TypeList<>>::buildRequiredTuple<md::ARSceneContext,md::GeometryContext>(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 136))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::CollectARMapDataLogic,md::ARCollectMapDataContext<(md::MapDataType)60>,md::LogicDependencies<gdc::TypeList<md::ARSceneContext,md::GeometryContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];

  if (*(_QWORD *)(a3 + 8) == 0x127F9F77D6DAB2F5)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::ARSceneContext,md::GeometryContext>,gdc::TypeList<>>::buildRequiredTuple<md::ARSceneContext,md::GeometryContext>(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 144))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::CollectARMapDataLogic,md::ARCollectMapDataContext<(md::MapDataType)60>,md::LogicDependencies<gdc::TypeList<md::ARSceneContext,md::GeometryContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];

  if (*(_QWORD *)(a3 + 8) == 0x127F9F77D6DAB2F5)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::ARSceneContext,md::GeometryContext>,gdc::TypeList<>>::buildRequiredTuple<md::ARSceneContext,md::GeometryContext>(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 152))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::CollectARMapDataLogic,md::ARCollectMapDataContext<(md::MapDataType)60>,md::LogicDependencies<gdc::TypeList<md::ARSceneContext,md::GeometryContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[3];

  if (*(_QWORD *)(a3 + 8) == 0x127F9F77D6DAB2F5 && (v4 = *(_QWORD *)(a3 + 32)) != 0)
  {
    v6 = result;
    v8[0] = md::LogicDependencies<gdc::TypeList<md::ARSceneContext,md::GeometryContext>,gdc::TypeList<>>::buildRequiredTuple<md::ARSceneContext,md::GeometryContext>(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
    v8[1] = v7;
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v6 + 160))(v6, a2, v8, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

uint64_t md::Logic<md::CollectARMapDataLogic,md::ARCollectMapDataContext<(md::MapDataType)60>,md::LogicDependencies<gdc::TypeList<md::ARSceneContext,md::GeometryContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

void md::ARCollectMapDataLogic<(md::MapDataType)60,md::CollectARMapDataLogic>::runBeforeLayout(uint64_t a1, uint64_t a2, unint64_t **a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int8x8_t v22;
  uint8x8_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  char v34;
  _WORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  _WORD *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  _WORD *v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  _OWORD *v53;
  char *v54;
  unint64_t v55;
  __int128 v56;
  __int16 v57;
  _QWORD *i;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  _QWORD *v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t *v77;
  uint64_t v78;
  _QWORD *j;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  _QWORD *v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t *v106;
  uint64_t *v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t *v113;
  uint64_t v114;
  _QWORD *k;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  char *v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t *v134;
  _QWORD *v135;
  char v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t *v142;
  uint64_t *v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t *v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t *v153;
  uint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  char *v165;
  _QWORD *m;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t *v170;
  _QWORD *v171;
  char v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t *v178;
  uint64_t *v179;
  uint64_t v180;
  unint64_t v181;
  unint64_t v182;
  uint64_t v183;
  unint64_t v184;
  unint64_t *v185;
  uint64_t v186;
  _QWORD *v187;
  uint64_t v188;
  uint64_t *v189;
  uint64_t v190;
  char *v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  char *v201;
  _QWORD *n;
  uint64_t v203;
  _QWORD *v204;
  _QWORD *v205;
  _QWORD *v206;
  uint64_t v207;
  _QWORD *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  _QWORD *v212;
  _QWORD *v213;
  unint64_t *v214;
  uint64_t *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  unint64_t v227;
  uint64_t v228;
  unint64_t v229;
  uint64_t v230;
  uint64_t v231;
  unint64_t v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  uint64_t v238;
  unint64_t v239;
  uint64_t v240;
  unint64_t v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v247;
  unint64_t v248;
  uint64_t v249;
  unint64_t v250;
  uint64_t v251;
  uint64_t v252;
  unint64_t v253;
  uint64_t v254;
  unint64_t v256;
  uint64_t v257;
  unint64_t v258;
  uint64_t v259;
  unint64_t v260;
  uint64_t v261;
  uint64_t *v262;
  uint64_t v263;
  unint64_t v264;
  uint64_t v265;
  uint64_t *v266;
  uint64_t v267;
  unint64_t v268;
  uint64_t v269;
  uint64_t v270;
  unint64_t v271;
  unint64_t v272;
  uint64_t v273;
  unint64_t v274;
  uint64_t v275;
  uint64_t v276;
  unint64_t v277;
  uint64_t v278;
  uint64_t v279;
  unint64_t v280;
  uint64_t v281;
  uint64_t v283;
  unint64_t v284;
  uint64_t v285;
  unint64_t v286;
  uint64_t v287;
  uint64_t v288;
  unint64_t v289;
  uint64_t v290;
  uint64_t v292;
  unint64_t v293;
  uint64_t v294;
  unint64_t v295;
  uint64_t v296;
  uint64_t v297;
  unint64_t v298;
  uint64_t v299;
  unint64_t v301;
  uint64_t v302;
  unint64_t v303;
  uint64_t v304;
  unint64_t v305;
  uint64_t v306;
  uint64_t *v307;
  uint64_t v308;
  unint64_t v309;
  uint64_t v310;
  uint64_t *v311;
  uint64_t v312;
  unint64_t v313;
  uint64_t v314;
  uint64_t v315;
  unint64_t v316;
  unint64_t v317;
  uint64_t v318;
  unint64_t v319;
  uint64_t v320;
  uint64_t v321;
  unint64_t v322;
  uint64_t v323;
  uint64_t v324;
  unint64_t v325;
  uint64_t v326;
  uint64_t v328;
  unint64_t v329;
  uint64_t v330;
  unint64_t v331;
  uint64_t v332;
  uint64_t v333;
  unint64_t v334;
  uint64_t v335;
  uint64_t v337;
  unint64_t v338;
  uint64_t v339;
  unint64_t v340;
  uint64_t v341;
  uint64_t v342;
  unint64_t v343;
  uint64_t v344;
  unint64_t v346;
  uint64_t v347;
  unint64_t v348;
  uint64_t v349;
  unint64_t v350;
  uint64_t v351;
  uint64_t *v352;
  uint64_t v353;
  unint64_t v354;
  uint64_t v355;
  uint64_t *v356;
  uint64_t v357;
  unint64_t v358;
  uint64_t v359;
  uint64_t *v360;
  unint64_t v361;
  unint64_t v362;
  uint64_t v363;
  unint64_t v364;
  uint64_t v365;
  uint64_t v366;
  unint64_t v367;
  uint64_t v368;
  uint64_t v369;
  unint64_t v370;
  uint64_t v371;
  uint64_t v373;
  unint64_t v374;
  uint64_t v375;
  unint64_t v376;
  uint64_t v377;
  uint64_t v378;
  unint64_t v379;
  uint64_t v380;
  uint64_t v382;
  unint64_t v383;
  uint64_t v384;
  unint64_t v385;
  uint64_t v386;
  uint64_t v387;
  unint64_t v388;
  uint64_t v389;
  unint64_t v391;
  uint64_t v392;
  unint64_t v393;
  uint64_t v394;
  unint64_t v395;
  uint64_t v396;
  uint64_t *v397;
  uint64_t v398;
  unint64_t v399;
  uint64_t v400;
  uint64_t *v401;
  uint64_t v402;
  unint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  unint64_t *v408;
  uint64_t v409;
  _QWORD *v410;
  _QWORD *v411;
  uint64_t v412;
  uint64_t v413;
  unint64_t v414;
  unint64_t *v415;
  uint64_t v416;
  uint64_t v417;
  char *v418;
  uint64_t *v419;

  v5 = (_QWORD *)gdc::Registry::storage<SceneComponents::LayerDataDidEnterView<(md::MapDataType)60>>(*(_QWORD *)(a1 + 128));
  v6 = v5;
  if (v5[29])
  {
    v7 = (_QWORD *)v5[28];
    if (v7)
    {
      v8 = (_QWORD *)v5[31];
      v9 = (unint64_t *)v5[7];
      v10 = (uint64_t)(v5[8] - (_QWORD)v9) >> 3;
      do
      {
        v415 = v9;
        v416 = v10;
        v410 = v8;
        v11 = v7[6];
        if (!v11)
          goto LABEL_428;
        (*(void (**)(uint64_t, _QWORD **, unint64_t **))(*(_QWORD *)v11 + 48))(v11, &v410, &v415);
        v7 = (_QWORD *)*v7;
      }
      while (v7);
    }
  }
  v6[8] = v6[7];
  v6[11] = v6[10];
  v12 = (_QWORD *)gdc::Registry::storage<SceneComponents::LayerDataDidExitView<(md::MapDataType)60>>(*(_QWORD *)(a1 + 128));
  v13 = v12;
  if (v12[29])
  {
    v14 = (_QWORD *)v12[28];
    if (v14)
    {
      v15 = (_QWORD *)v12[31];
      v16 = (unint64_t *)v12[7];
      v17 = (uint64_t)(v12[8] - (_QWORD)v16) >> 3;
      do
      {
        v415 = v16;
        v416 = v17;
        v410 = v15;
        v18 = v14[6];
        if (!v18)
          goto LABEL_428;
        (*(void (**)(uint64_t, _QWORD **, unint64_t **))(*(_QWORD *)v18 + 48))(v18, &v410, &v415);
        v14 = (_QWORD *)*v14;
      }
      while (v14);
    }
  }
  v13[8] = v13[7];
  v13[11] = v13[10];
  v408 = *a3;
  v19 = *(_QWORD *)(a1 + 128);
  if (!*(_WORD *)(a1 + 120) && !*(_WORD *)(a1 + 122) && *(_DWORD *)(a1 + 124) == -1)
  {
    v20 = gdc::Registry::create(*(gdc::Registry **)(a1 + 128));
    *(_QWORD *)(a1 + 120) = v20;
    v21 = *(_QWORD *)(a1 + 128);
    v410 = (_QWORD *)0xD5BFDDAD975065C3;
    v22 = *(int8x8_t *)(v21 + 128);
    if (v22)
    {
      v23 = (uint8x8_t)vcnt_s8(v22);
      v23.i16[0] = vaddlv_u8(v23);
      if (v23.u32[0] > 1uLL)
      {
        v24 = 0xD5BFDDAD975065C3;
        if (*(_QWORD *)&v22 <= 0xD5BFDDAD975065C3)
          v24 = 0xD5BFDDAD975065C3 % *(_QWORD *)&v22;
      }
      else
      {
        v24 = (*(_QWORD *)&v22 - 1) & 0xD5BFDDAD975065C3;
      }
      v25 = *(_QWORD **)(*(_QWORD *)(v21 + 120) + 8 * v24);
      if (v25)
      {
        v26 = (_QWORD *)*v25;
        if (v26)
        {
          if (v23.u32[0] < 2uLL)
          {
            v27 = *(_QWORD *)&v22 - 1;
            while (1)
            {
              v29 = v26[1];
              if (v29 == 0xD5BFDDAD975065C3)
              {
                if (v26[2] == 0xD5BFDDAD975065C3)
                  goto LABEL_427;
              }
              else if ((v29 & v27) != v24)
              {
                goto LABEL_34;
              }
              v26 = (_QWORD *)*v26;
              if (!v26)
                goto LABEL_34;
            }
          }
          do
          {
            v28 = v26[1];
            if (v28 == 0xD5BFDDAD975065C3)
            {
              if (v26[2] == 0xD5BFDDAD975065C3)
              {
LABEL_427:
                v30 = v26[3];
                goto LABEL_37;
              }
            }
            else
            {
              if (v28 >= *(_QWORD *)&v22)
                v28 %= *(_QWORD *)&v22;
              if (v28 != v24)
                break;
            }
            v26 = (_QWORD *)*v26;
          }
          while (v26);
        }
      }
    }
LABEL_34:
    v30 = operator new();
    *(_QWORD *)(v30 + 16) = "SceneComponents::LayerDataInfo<md::MapDataType::ARBuildings>]";
    *(_QWORD *)(v30 + 24) = 60;
    *(_OWORD *)(v30 + 32) = 0u;
    *(_OWORD *)(v30 + 48) = 0u;
    *(_OWORD *)(v30 + 64) = 0u;
    *(_OWORD *)(v30 + 80) = 0u;
    *(_OWORD *)(v30 + 96) = 0u;
    *(_OWORD *)(v30 + 112) = 0u;
    *(_OWORD *)(v30 + 128) = 0u;
    *(_DWORD *)(v30 + 144) = 1065353216;
    *(_OWORD *)(v30 + 152) = 0u;
    *(_OWORD *)(v30 + 168) = 0u;
    *(_QWORD *)(v30 + 184) = 0;
    *(_DWORD *)(v30 + 192) = 1065353216;
    *(_OWORD *)(v30 + 200) = 0u;
    *(_OWORD *)(v30 + 216) = 0u;
    *(_QWORD *)(v30 + 232) = 0;
    *(_DWORD *)(v30 + 240) = 1065353216;
    *(_QWORD *)v30 = &off_1E42B29B8;
    *(_QWORD *)(v30 + 8) = 0xD5BFDDAD975065C3;
    *(_QWORD *)(v30 + 248) = v21;
    v31 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t *)(v21 + 120), 0xD5BFDDAD975065C3, &v410);
    v32 = v31[3];
    v31[3] = v30;
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    v415 = (unint64_t *)0xD5BFDDAD975065C3;
    v416 = (uint64_t)"SceneComponents::LayerDataInfo<md::MapDataType::ARBuildings>]";
    v417 = 60;
    gdc::Registry::_registerStorageDataSignals(v21, 0xD5BFDDAD975065C3, (uint64_t)&v415, (uint64_t *)(v30 + 104));
LABEL_37:
    v414 = v20;
    v33 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v30 + 32), (uint64_t)&v414);
    if ((v34 & 1) != 0)
    {
      v40 = *(char **)(v30 + 88);
      v39 = *(_QWORD *)(v30 + 96);
      if ((unint64_t)v40 >= v39)
      {
        v42 = *(char **)(v30 + 80);
        v43 = v40 - v42;
        if (v40 - v42 <= -3)
          abort();
        v44 = v43 >> 1;
        v45 = v39 - (_QWORD)v42;
        if (v45 <= (v43 >> 1) + 1)
          v46 = v44 + 1;
        else
          v46 = v45;
        if (v45 >= 0x7FFFFFFFFFFFFFFELL)
          v47 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v47 = v46;
        if (v47)
        {
          if (v47 < 0)
            goto LABEL_433;
          v48 = operator new(2 * v47);
        }
        else
        {
          v48 = 0;
        }
        v49 = &v48[2 * v44];
        v50 = &v48[2 * v47];
        *v49 = 60;
        v41 = v49 + 1;
        if (v40 != v42)
        {
          v51 = v40 - v42 - 2;
          if (v51 < 0x1E)
            goto LABEL_441;
          if (v40 - v48 - (v43 & 0xFFFFFFFFFFFFFFFELL) < 0x20)
            goto LABEL_441;
          v52 = (v51 >> 1) + 1;
          v53 = &v48[2 * v44 - 16];
          v54 = v40 - 16;
          v55 = v52 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v56 = *(_OWORD *)v54;
            *(v53 - 1) = *((_OWORD *)v54 - 1);
            *v53 = v56;
            v53 -= 2;
            v54 -= 32;
            v55 -= 16;
          }
          while (v55);
          v49 -= v52 & 0xFFFFFFFFFFFFFFF0;
          v40 -= 2 * (v52 & 0xFFFFFFFFFFFFFFF0);
          if (v52 != (v52 & 0xFFFFFFFFFFFFFFF0))
          {
LABEL_441:
            do
            {
              v57 = *((_WORD *)v40 - 1);
              v40 -= 2;
              *--v49 = v57;
            }
            while (v40 != v42);
          }
        }
        *(_QWORD *)(v30 + 80) = v49;
        *(_QWORD *)(v30 + 88) = v41;
        *(_QWORD *)(v30 + 96) = v50;
        if (v42)
          operator delete(v42);
      }
      else
      {
        *(_WORD *)v40 = 60;
        v41 = v40 + 2;
      }
      *(_QWORD *)(v30 + 88) = v41;
      v36 = *(_QWORD **)(v30 + 248);
    }
    else
    {
      v35 = (_WORD *)(*(_QWORD *)(v30 + 80) + (((uint64_t)v33 - *(_QWORD *)(v30 + 56)) >> 2));
      *v35 = 60;
      v36 = *(_QWORD **)(v30 + 248);
      if (v35 != *(_WORD **)(v30 + 88))
      {
        v37 = *(_QWORD **)(v30 + 128);
        if (v37)
        {
          while (1)
          {
            v415 = &v414;
            v416 = 1;
            v410 = v36;
            v38 = v37[6];
            if (!v38)
              break;
            (*(void (**)(uint64_t, _QWORD **, unint64_t **))(*(_QWORD *)v38 + 48))(v38, &v410, &v415);
            v37 = (_QWORD *)*v37;
            if (!v37)
              goto LABEL_69;
          }
LABEL_428:
          std::__throw_bad_function_call[abi:nn180100]();
LABEL_429:
          std::__throw_bad_function_call[abi:nn180100]();
          __break(1u);
          return;
        }
        goto LABEL_69;
      }
    }
    for (i = *(_QWORD **)(v30 + 176); i; i = (_QWORD *)*i)
    {
      v415 = &v414;
      v416 = 1;
      v410 = v36;
      v59 = i[6];
      if (!v59)
        goto LABEL_428;
      (*(void (**)(uint64_t, _QWORD **, unint64_t **))(*(_QWORD *)v59 + 48))(v59, &v410, &v415);
    }
LABEL_69:
    v61 = *(_QWORD *)(a1 + 120);
    v60 = *(_QWORD *)(a1 + 128);
    v411 = 0;
    v412 = 0;
    v410 = &v411;
    v62 = (uint64_t *)gdc::Registry::storage<SceneComponents::LayerDataInView<(md::MapDataType)60>>(v60);
    v413 = v61;
    v63 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v62 + 4, (uint64_t)&v413);
    if ((v64 & 1) != 0)
    {
      v69 = v62[12];
      v70 = (uint64_t *)v62[11];
      if ((unint64_t)v70 >= v69)
      {
        v72 = v62[10];
        v73 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v70 - v72) >> 3);
        if (v73 + 1 > 0xAAAAAAAAAAAAAAALL)
          abort();
        v74 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v69 - v72) >> 3);
        v75 = 2 * v74;
        if (2 * v74 <= v73 + 1)
          v75 = v73 + 1;
        if (v74 >= 0x555555555555555)
          v76 = 0xAAAAAAAAAAAAAAALL;
        else
          v76 = v75;
        v419 = v62 + 12;
        if (v76)
        {
          if (v76 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_433;
          v77 = (unint64_t *)operator new(24 * v76);
        }
        else
        {
          v77 = 0;
        }
        v81 = (uint64_t *)&v77[3 * v73];
        v415 = v77;
        v416 = (uint64_t)v81;
        v417 = (uint64_t)v81;
        v418 = (char *)&v77[3 * v76];
        v81[1] = 0;
        v81[2] = 0;
        *v81 = (uint64_t)(v81 + 1);
        std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v81, v410, &v411);
        v82 = v416;
        v71 = (uint64_t *)(v417 + 24);
        v83 = (char *)v62[10];
        v84 = (char *)v62[11];
        if (v84 == v83)
        {
          v62[10] = v416;
          v62[11] = (uint64_t)v71;
          v62[12] = (uint64_t)v418;
        }
        else
        {
          v85 = 0;
          do
          {
            v86 = v82 + v85;
            *(_QWORD *)(v86 - 24) = *(_QWORD *)&v84[v85 - 24];
            v87 = &v84[v85 - 16];
            v88 = *(_QWORD *)v87;
            *(_QWORD *)(v82 + v85 - 16) = *(_QWORD *)v87;
            v89 = v82 + v85 - 16;
            v90 = *(_QWORD *)&v84[v85 - 8];
            *(_QWORD *)(v86 - 8) = v90;
            if (v90)
            {
              *(_QWORD *)(v88 + 16) = v89;
              *(_QWORD *)&v84[v85 - 24] = v87;
              *(_QWORD *)v87 = 0;
              *(_QWORD *)&v84[v85 - 8] = 0;
            }
            else
            {
              *(_QWORD *)(v86 - 24) = v89;
            }
            v85 -= 24;
          }
          while (&v84[v85] != v83);
          v91 = v82 + v85;
          v84 = (char *)v62[10];
          v92 = (char *)v62[11];
          v62[10] = v91;
          v62[11] = (uint64_t)v71;
          v62[12] = (uint64_t)v418;
          if (v92 != v84)
          {
            do
            {
              v93 = v92 - 24;
              std::__tree<gdc::LayerDataWithWorld>::destroy(*((_QWORD **)v92 - 2));
              v92 = v93;
            }
            while (v93 != v84);
          }
        }
        if (v84)
          operator delete(v84);
      }
      else
      {
        v70[2] = 0;
        v70[1] = 0;
        *v70 = (uint64_t)(v70 + 1);
        std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v70, v410, &v411);
        v71 = v70 + 3;
        v62[11] = (uint64_t)(v70 + 3);
      }
      v62[11] = (uint64_t)v71;
      v78 = v62[31];
    }
    else
    {
      v65 = v62[10] + 24 * (((uint64_t)v63 - v62[7]) >> 3);
      v66 = v65 + 8;
      std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(v65 + 8));
      *(_QWORD *)v65 = v410;
      v67 = v411;
      *(_QWORD *)(v65 + 8) = v411;
      v68 = v412;
      *(_QWORD *)(v65 + 16) = v412;
      if (v68)
      {
        v67[2] = v66;
        v410 = &v411;
        v411 = 0;
        v412 = 0;
      }
      else
      {
        *(_QWORD *)v65 = v66;
      }
      v78 = v62[31];
      if (v65 != v62[11])
      {
        for (j = (_QWORD *)v62[16]; j; j = (_QWORD *)*j)
        {
          v415 = (unint64_t *)&v413;
          v416 = 1;
          v414 = v78;
          v80 = j[6];
          if (!v80)
            goto LABEL_429;
          (*(void (**)(uint64_t, unint64_t *, unint64_t **))(*(_QWORD *)v80 + 48))(v80, &v414, &v415);
        }
LABEL_106:
        std::__tree<gdc::LayerDataWithWorld>::destroy(v411);
        v97 = *(_QWORD *)(a1 + 120);
        v96 = *(_QWORD *)(a1 + 128);
        v411 = 0;
        v412 = 0;
        v410 = &v411;
        v98 = (uint64_t *)gdc::Registry::storage<SceneComponents::LayerDataEnteringView<(md::MapDataType)60>>(v96);
        v413 = v97;
        v99 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v98 + 4, (uint64_t)&v413);
        if ((v100 & 1) != 0)
        {
          v105 = v98[12];
          v106 = (uint64_t *)v98[11];
          if ((unint64_t)v106 >= v105)
          {
            v108 = v98[10];
            v109 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v106 - v108) >> 3);
            if (v109 + 1 > 0xAAAAAAAAAAAAAAALL)
              abort();
            v110 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v105 - v108) >> 3);
            v111 = 2 * v110;
            if (2 * v110 <= v109 + 1)
              v111 = v109 + 1;
            if (v110 >= 0x555555555555555)
              v112 = 0xAAAAAAAAAAAAAAALL;
            else
              v112 = v111;
            v419 = v98 + 12;
            if (v112)
            {
              if (v112 > 0xAAAAAAAAAAAAAAALL)
                goto LABEL_433;
              v113 = (unint64_t *)operator new(24 * v112);
            }
            else
            {
              v113 = 0;
            }
            v117 = (uint64_t *)&v113[3 * v109];
            v415 = v113;
            v416 = (uint64_t)v117;
            v417 = (uint64_t)v117;
            v418 = (char *)&v113[3 * v112];
            v117[1] = 0;
            v117[2] = 0;
            *v117 = (uint64_t)(v117 + 1);
            std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v117, v410, &v411);
            v118 = v416;
            v107 = (uint64_t *)(v417 + 24);
            v119 = (char *)v98[10];
            v120 = (char *)v98[11];
            if (v120 == v119)
            {
              v98[10] = v416;
              v98[11] = (uint64_t)v107;
              v98[12] = (uint64_t)v418;
            }
            else
            {
              v121 = 0;
              do
              {
                v122 = v118 + v121;
                *(_QWORD *)(v122 - 24) = *(_QWORD *)&v120[v121 - 24];
                v123 = &v120[v121 - 16];
                v124 = *(_QWORD *)v123;
                *(_QWORD *)(v118 + v121 - 16) = *(_QWORD *)v123;
                v125 = v118 + v121 - 16;
                v126 = *(_QWORD *)&v120[v121 - 8];
                *(_QWORD *)(v122 - 8) = v126;
                if (v126)
                {
                  *(_QWORD *)(v124 + 16) = v125;
                  *(_QWORD *)&v120[v121 - 24] = v123;
                  *(_QWORD *)v123 = 0;
                  *(_QWORD *)&v120[v121 - 8] = 0;
                }
                else
                {
                  *(_QWORD *)(v122 - 24) = v125;
                }
                v121 -= 24;
              }
              while (&v120[v121] != v119);
              v127 = v118 + v121;
              v120 = (char *)v98[10];
              v128 = (char *)v98[11];
              v98[10] = v127;
              v98[11] = (uint64_t)v107;
              v98[12] = (uint64_t)v418;
              if (v128 != v120)
              {
                do
                {
                  v129 = v128 - 24;
                  std::__tree<gdc::LayerDataWithWorld>::destroy(*((_QWORD **)v128 - 2));
                  v128 = v129;
                }
                while (v129 != v120);
              }
            }
            if (v120)
              operator delete(v120);
          }
          else
          {
            v106[2] = 0;
            v106[1] = 0;
            *v106 = (uint64_t)(v106 + 1);
            std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v106, v410, &v411);
            v107 = v106 + 3;
            v98[11] = (uint64_t)(v106 + 3);
          }
          v98[11] = (uint64_t)v107;
          v114 = v98[31];
        }
        else
        {
          v101 = v98[10] + 24 * (((uint64_t)v99 - v98[7]) >> 3);
          v102 = v101 + 8;
          std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(v101 + 8));
          *(_QWORD *)v101 = v410;
          v103 = v411;
          *(_QWORD *)(v101 + 8) = v411;
          v104 = v412;
          *(_QWORD *)(v101 + 16) = v412;
          if (v104)
          {
            v103[2] = v102;
            v410 = &v411;
            v411 = 0;
            v412 = 0;
          }
          else
          {
            *(_QWORD *)v101 = v102;
          }
          v114 = v98[31];
          if (v101 != v98[11])
          {
            for (k = (_QWORD *)v98[16]; k; k = (_QWORD *)*k)
            {
              v415 = (unint64_t *)&v413;
              v416 = 1;
              v414 = v114;
              v116 = k[6];
              if (!v116)
                goto LABEL_429;
              (*(void (**)(uint64_t, unint64_t *, unint64_t **))(*(_QWORD *)v116 + 48))(v116, &v414, &v415);
            }
LABEL_143:
            std::__tree<gdc::LayerDataWithWorld>::destroy(v411);
            v133 = *(_QWORD *)(a1 + 120);
            v132 = *(_QWORD *)(a1 + 128);
            v411 = 0;
            v412 = 0;
            v410 = &v411;
            v134 = (uint64_t *)gdc::Registry::storage<SceneComponents::LayerDataExitingView<(md::MapDataType)60>>(v132);
            v413 = v133;
            v135 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v134 + 4, (uint64_t)&v413);
            if ((v136 & 1) != 0)
            {
              v141 = v134[12];
              v142 = (uint64_t *)v134[11];
              if ((unint64_t)v142 >= v141)
              {
                v144 = v134[10];
                v145 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v142 - v144) >> 3);
                if (v145 + 1 > 0xAAAAAAAAAAAAAAALL)
                  abort();
                v146 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v141 - v144) >> 3);
                v147 = 2 * v146;
                if (2 * v146 <= v145 + 1)
                  v147 = v145 + 1;
                if (v146 >= 0x555555555555555)
                  v148 = 0xAAAAAAAAAAAAAAALL;
                else
                  v148 = v147;
                v419 = v134 + 12;
                if (v148)
                {
                  if (v148 > 0xAAAAAAAAAAAAAAALL)
                    goto LABEL_433;
                  v149 = (unint64_t *)operator new(24 * v148);
                }
                else
                {
                  v149 = 0;
                }
                v153 = (uint64_t *)&v149[3 * v145];
                v415 = v149;
                v416 = (uint64_t)v153;
                v417 = (uint64_t)v153;
                v418 = (char *)&v149[3 * v148];
                v153[1] = 0;
                v153[2] = 0;
                *v153 = (uint64_t)(v153 + 1);
                std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v153, v410, &v411);
                v154 = v416;
                v143 = (uint64_t *)(v417 + 24);
                v155 = (char *)v134[10];
                v156 = (char *)v134[11];
                if (v156 == v155)
                {
                  v134[10] = v416;
                  v134[11] = (uint64_t)v143;
                  v134[12] = (uint64_t)v418;
                }
                else
                {
                  v157 = 0;
                  do
                  {
                    v158 = v154 + v157;
                    *(_QWORD *)(v158 - 24) = *(_QWORD *)&v156[v157 - 24];
                    v159 = &v156[v157 - 16];
                    v160 = *(_QWORD *)v159;
                    *(_QWORD *)(v154 + v157 - 16) = *(_QWORD *)v159;
                    v161 = v154 + v157 - 16;
                    v162 = *(_QWORD *)&v156[v157 - 8];
                    *(_QWORD *)(v158 - 8) = v162;
                    if (v162)
                    {
                      *(_QWORD *)(v160 + 16) = v161;
                      *(_QWORD *)&v156[v157 - 24] = v159;
                      *(_QWORD *)v159 = 0;
                      *(_QWORD *)&v156[v157 - 8] = 0;
                    }
                    else
                    {
                      *(_QWORD *)(v158 - 24) = v161;
                    }
                    v157 -= 24;
                  }
                  while (&v156[v157] != v155);
                  v163 = v154 + v157;
                  v156 = (char *)v134[10];
                  v164 = (char *)v134[11];
                  v134[10] = v163;
                  v134[11] = (uint64_t)v143;
                  v134[12] = (uint64_t)v418;
                  if (v164 != v156)
                  {
                    do
                    {
                      v165 = v164 - 24;
                      std::__tree<gdc::LayerDataWithWorld>::destroy(*((_QWORD **)v164 - 2));
                      v164 = v165;
                    }
                    while (v165 != v156);
                  }
                }
                if (v156)
                  operator delete(v156);
              }
              else
              {
                v142[2] = 0;
                v142[1] = 0;
                *v142 = (uint64_t)(v142 + 1);
                std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v142, v410, &v411);
                v143 = v142 + 3;
                v134[11] = (uint64_t)(v142 + 3);
              }
              v134[11] = (uint64_t)v143;
              v150 = v134[31];
            }
            else
            {
              v137 = v134[10] + 24 * (((uint64_t)v135 - v134[7]) >> 3);
              v138 = v137 + 8;
              std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(v137 + 8));
              *(_QWORD *)v137 = v410;
              v139 = v411;
              *(_QWORD *)(v137 + 8) = v411;
              v140 = v412;
              *(_QWORD *)(v137 + 16) = v412;
              if (v140)
              {
                v139[2] = v138;
                v410 = &v411;
                v411 = 0;
                v412 = 0;
              }
              else
              {
                *(_QWORD *)v137 = v138;
              }
              v150 = v134[31];
              if (v137 != v134[11])
              {
                v151 = (_QWORD *)v134[16];
                if (v151)
                {
                  while (1)
                  {
                    v415 = (unint64_t *)&v413;
                    v416 = 1;
                    v414 = v150;
                    v152 = v151[6];
                    if (!v152)
                      goto LABEL_429;
                    (*(void (**)(uint64_t, unint64_t *, unint64_t **))(*(_QWORD *)v152 + 48))(v152, &v414, &v415);
                    v151 = (_QWORD *)*v151;
                    if (!v151)
                      goto LABEL_180;
                  }
                }
                goto LABEL_180;
              }
            }
            for (m = (_QWORD *)v134[22]; m; m = (_QWORD *)*m)
            {
              v415 = (unint64_t *)&v413;
              v416 = 1;
              v414 = v150;
              v167 = m[6];
              if (!v167)
                goto LABEL_429;
              (*(void (**)(uint64_t, unint64_t *, unint64_t **))(*(_QWORD *)v167 + 48))(v167, &v414, &v415);
            }
LABEL_180:
            std::__tree<gdc::LayerDataWithWorld>::destroy(v411);
            v169 = *(_QWORD *)(a1 + 120);
            v168 = *(_QWORD *)(a1 + 128);
            v411 = 0;
            v412 = 0;
            v410 = &v411;
            v170 = (uint64_t *)gdc::Registry::storage<SceneComponents::LayerDataPreviousInView<(md::MapDataType)60>>(v168);
            v413 = v169;
            v171 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v170 + 4, (uint64_t)&v413);
            if ((v172 & 1) == 0)
            {
              v173 = v170[10] + 24 * (((uint64_t)v171 - v170[7]) >> 3);
              v174 = v173 + 8;
              std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(v173 + 8));
              *(_QWORD *)v173 = v410;
              v175 = v411;
              *(_QWORD *)(v173 + 8) = v411;
              v176 = v412;
              *(_QWORD *)(v173 + 16) = v412;
              if (v176)
              {
                v175[2] = v174;
                v410 = &v411;
                v411 = 0;
                v412 = 0;
              }
              else
              {
                *(_QWORD *)v173 = v174;
              }
              v186 = v170[31];
              if (v173 != v170[11])
              {
                v187 = (_QWORD *)v170[16];
                if (v187)
                {
                  while (1)
                  {
                    v415 = (unint64_t *)&v413;
                    v416 = 1;
                    v414 = v186;
                    v188 = v187[6];
                    if (!v188)
                      goto LABEL_429;
                    (*(void (**)(uint64_t, unint64_t *, unint64_t **))(*(_QWORD *)v188 + 48))(v188, &v414, &v415);
                    v187 = (_QWORD *)*v187;
                    if (!v187)
                      goto LABEL_217;
                  }
                }
                goto LABEL_217;
              }
LABEL_214:
              for (n = (_QWORD *)v170[22]; n; n = (_QWORD *)*n)
              {
                v415 = (unint64_t *)&v413;
                v416 = 1;
                v414 = v186;
                v203 = n[6];
                if (!v203)
                  goto LABEL_429;
                (*(void (**)(uint64_t, unint64_t *, unint64_t **))(*(_QWORD *)v203 + 48))(v203, &v414, &v415);
              }
LABEL_217:
              std::__tree<gdc::LayerDataWithWorld>::destroy(v411);
              goto LABEL_218;
            }
            v177 = v170[12];
            v178 = (uint64_t *)v170[11];
            if ((unint64_t)v178 < v177)
            {
              v178[2] = 0;
              v178[1] = 0;
              *v178 = (uint64_t)(v178 + 1);
              std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v178, v410, &v411);
              v179 = v178 + 3;
              v170[11] = (uint64_t)(v178 + 3);
LABEL_213:
              v170[11] = (uint64_t)v179;
              v186 = v170[31];
              goto LABEL_214;
            }
            v180 = v170[10];
            v181 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v178 - v180) >> 3);
            if (v181 + 1 > 0xAAAAAAAAAAAAAAALL)
              abort();
            v182 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v177 - v180) >> 3);
            v183 = 2 * v182;
            if (2 * v182 <= v181 + 1)
              v183 = v181 + 1;
            if (v182 >= 0x555555555555555)
              v184 = 0xAAAAAAAAAAAAAAALL;
            else
              v184 = v183;
            v419 = v170 + 12;
            if (!v184)
            {
              v185 = 0;
              goto LABEL_201;
            }
            if (v184 <= 0xAAAAAAAAAAAAAAALL)
            {
              v185 = (unint64_t *)operator new(24 * v184);
LABEL_201:
              v189 = (uint64_t *)&v185[3 * v181];
              v415 = v185;
              v416 = (uint64_t)v189;
              v417 = (uint64_t)v189;
              v418 = (char *)&v185[3 * v184];
              v189[1] = 0;
              v189[2] = 0;
              *v189 = (uint64_t)(v189 + 1);
              std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v189, v410, &v411);
              v190 = v416;
              v179 = (uint64_t *)(v417 + 24);
              v191 = (char *)v170[10];
              v192 = (char *)v170[11];
              if (v192 == v191)
              {
                v170[10] = v416;
                v170[11] = (uint64_t)v179;
                v170[12] = (uint64_t)v418;
              }
              else
              {
                v193 = 0;
                do
                {
                  v194 = v190 + v193;
                  *(_QWORD *)(v194 - 24) = *(_QWORD *)&v192[v193 - 24];
                  v195 = &v192[v193 - 16];
                  v196 = *(_QWORD *)v195;
                  *(_QWORD *)(v190 + v193 - 16) = *(_QWORD *)v195;
                  v197 = v190 + v193 - 16;
                  v198 = *(_QWORD *)&v192[v193 - 8];
                  *(_QWORD *)(v194 - 8) = v198;
                  if (v198)
                  {
                    *(_QWORD *)(v196 + 16) = v197;
                    *(_QWORD *)&v192[v193 - 24] = v195;
                    *(_QWORD *)v195 = 0;
                    *(_QWORD *)&v192[v193 - 8] = 0;
                  }
                  else
                  {
                    *(_QWORD *)(v194 - 24) = v197;
                  }
                  v193 -= 24;
                }
                while (&v192[v193] != v191);
                v199 = v190 + v193;
                v192 = (char *)v170[10];
                v200 = (char *)v170[11];
                v170[10] = v199;
                v170[11] = (uint64_t)v179;
                v170[12] = (uint64_t)v418;
                if (v200 != v192)
                {
                  do
                  {
                    v201 = v200 - 24;
                    std::__tree<gdc::LayerDataWithWorld>::destroy(*((_QWORD **)v200 - 2));
                    v200 = v201;
                  }
                  while (v201 != v192);
                }
              }
              if (v192)
                operator delete(v192);
              goto LABEL_213;
            }
LABEL_433:
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
        }
        v130 = (_QWORD *)v98[22];
        if (v130)
        {
          while (1)
          {
            v415 = (unint64_t *)&v413;
            v416 = 1;
            v414 = v114;
            v131 = v130[6];
            if (!v131)
              goto LABEL_429;
            (*(void (**)(uint64_t, unint64_t *, unint64_t **))(*(_QWORD *)v131 + 48))(v131, &v414, &v415);
            v130 = (_QWORD *)*v130;
            if (!v130)
              goto LABEL_143;
          }
        }
        goto LABEL_143;
      }
    }
    v94 = (_QWORD *)v62[22];
    if (v94)
    {
      while (1)
      {
        v415 = (unint64_t *)&v413;
        v416 = 1;
        v414 = v78;
        v95 = v94[6];
        if (!v95)
          goto LABEL_429;
        (*(void (**)(uint64_t, unint64_t *, unint64_t **))(*(_QWORD *)v95 + 48))(v95, &v414, &v415);
        v94 = (_QWORD *)*v94;
        if (!v94)
          goto LABEL_106;
      }
    }
    goto LABEL_106;
  }
LABEL_218:
  v409 = a1;
  v204 = (_QWORD *)gdc::Registry::storage<SceneComponents::LayerDataInView<(md::MapDataType)60>>(v19);
  v205 = (_QWORD *)gdc::Registry::storage<SceneComponents::LayerDataPreviousInView<(md::MapDataType)60>>(v19);
  v206 = (_QWORD *)gdc::Registry::storage<SceneComponents::LayerDataEnteringView<(md::MapDataType)60>>(v19);
  v207 = gdc::Registry::storage<SceneComponents::LayerDataExitingView<(md::MapDataType)60>>(v19);
  v208 = (_QWORD *)v207;
  v209 = v207 + 32;
  v211 = v204[7];
  v210 = v204[8];
  if (v205[8] - v205[7] >= (unint64_t)(v210 - v211))
    v212 = v204 + 4;
  else
    v212 = v205 + 4;
  if (v206[8] - v206[7] < v212[4] - v212[3])
    v212 = v206 + 4;
  if (*(_QWORD *)(v207 + 64) - *(_QWORD *)(v207 + 56) >= v212[4] - v212[3])
    v213 = v212;
  else
    v213 = (_QWORD *)(v207 + 32);
  v214 = v408;
  if (v204 + 4 == v213)
  {
    v415 = v408;
    v416 = v409;
    if (v211 != v210)
    {
      v215 = (uint64_t *)v204[10];
      do
      {
        v226 = *(unsigned int *)(v211 + 4);
        v227 = v226 >> 7;
        v228 = v205[4];
        v229 = (v205[5] - v228) >> 3;
        if (v226 >> 7 < v229)
        {
          v230 = *(_QWORD *)(v228 + 8 * v227);
          if (v230)
          {
            v231 = v226 & 0x7F;
            v232 = *(unsigned __int16 *)(v230 + 2 * v231);
            v234 = v205[7];
            v233 = v205[8];
            v235 = (v233 - v234) >> 3;
            if (v235 > v232)
            {
              v236 = v234 + 8 * v232;
              if (v236 != v233 && *(_DWORD *)(v236 + 4) == (_DWORD)v226)
              {
                v238 = v206[4];
                v239 = (v206[5] - v238) >> 3;
                if (v227 < v239)
                {
                  v240 = *(_QWORD *)(v238 + 8 * v227);
                  if (v240)
                  {
                    v241 = *(unsigned __int16 *)(v240 + 2 * v231);
                    v243 = v206[7];
                    v242 = v206[8];
                    v244 = (v242 - v243) >> 3;
                    if (v244 > v241)
                    {
                      v245 = v243 + 8 * v241;
                      if (v245 != v242 && *(_DWORD *)(v245 + 4) == (_DWORD)v226)
                      {
                        v247 = v208[4];
                        v248 = (v208[5] - v247) >> 3;
                        if (v227 < v248)
                        {
                          v249 = *(_QWORD *)(v247 + 8 * v227);
                          if (v249)
                          {
                            v250 = *(unsigned __int16 *)(v249 + 2 * v231);
                            v252 = v208[7];
                            v251 = v208[8];
                            v253 = (v251 - v252) >> 3;
                            if (v253 > v250)
                            {
                              v254 = v252 + 8 * v250;
                              v405 = v209;
                              if (v254 != v251 && *(_DWORD *)(v254 + 4) == (_DWORD)v226)
                              {
                                v256 = *(_QWORD *)v211;
                                v257 = HIDWORD(*(_QWORD *)v211);
                                v258 = *(_QWORD *)v211 >> 39;
                                if (v258 < v229
                                  && (v259 = *(_QWORD *)(v228 + 8 * v258)) != 0
                                  && (v260 = *(unsigned __int16 *)(v259 + 2 * (HIDWORD(v256) & 0x7F)), v235 > v260)
                                  && (v261 = v234 + 8 * v260, v261 != v233)
                                  && *(_DWORD *)(v261 + 4) == (_DWORD)v257)
                                {
                                  v262 = (uint64_t *)(v205[10] + 24 * v260);
                                }
                                else
                                {
                                  v262 = (uint64_t *)v205[11];
                                }
                                if (v258 < v239
                                  && (v263 = *(_QWORD *)(v238 + 8 * v258)) != 0
                                  && (v264 = *(unsigned __int16 *)(v263 + 2 * (HIDWORD(v256) & 0x7F)), v244 > v264)
                                  && (v265 = v243 + 8 * v264, v265 != v242)
                                  && *(_DWORD *)(v265 + 4) == (_DWORD)v257)
                                {
                                  v266 = (uint64_t *)(v206[10] + 24 * v264);
                                }
                                else
                                {
                                  v266 = (uint64_t *)v206[11];
                                }
                                if (v258 < v248
                                  && (v267 = *(_QWORD *)(v247 + 8 * v258)) != 0
                                  && (v268 = *(unsigned __int16 *)(v267 + 2 * (HIDWORD(v256) & 0x7F)), v253 > v268)
                                  && (v269 = v252 + 8 * v268, v269 != v251)
                                  && *(_DWORD *)(v269 + 4) == (_DWORD)v257)
                                {
                                  v225 = v208[10] + 24 * v268;
                                }
                                else
                                {
                                  v225 = v208[11];
                                }
                                md::ARCollectMapDataLogic<(md::MapDataType)60,md::CollectARMapDataLogic>::updateVisibleMapData(md::SceneContext const&,gdc::Registry *)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)60> &,SceneComponents::LayerDataPreviousInView<(md::MapDataType)60> &,SceneComponents::LayerDataEnteringView<(md::MapDataType)60> &,SceneComponents::LayerDataExitingView<(md::MapDataType)60> &)#1}::operator()((uint64_t)&v415, v256, v215, v262, v266, v225);
                                v209 = v405;
                                v214 = v408;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v215 += 3;
        v211 += 8;
      }
      while (v211 != v210);
    }
  }
  if (v205 + 4 == v213)
  {
    v415 = v214;
    v416 = v409;
    v216 = v205[7];
    v217 = v205[8];
    if (v216 != v217)
    {
      v218 = (uint64_t *)v205[10];
      do
      {
        v271 = *(unsigned int *)(v216 + 4);
        v272 = v271 >> 7;
        v273 = v204[4];
        v274 = (v204[5] - v273) >> 3;
        if (v271 >> 7 < v274)
        {
          v275 = *(_QWORD *)(v273 + 8 * v272);
          if (v275)
          {
            v276 = v271 & 0x7F;
            v277 = *(unsigned __int16 *)(v275 + 2 * v276);
            v279 = v204[7];
            v278 = v204[8];
            v280 = (v278 - v279) >> 3;
            if (v280 > v277)
            {
              v281 = v279 + 8 * v277;
              if (v281 != v278 && *(_DWORD *)(v281 + 4) == (_DWORD)v271)
              {
                v283 = v206[4];
                v284 = (v206[5] - v283) >> 3;
                if (v272 < v284)
                {
                  v285 = *(_QWORD *)(v283 + 8 * v272);
                  if (v285)
                  {
                    v286 = *(unsigned __int16 *)(v285 + 2 * v276);
                    v288 = v206[7];
                    v287 = v206[8];
                    v289 = (v287 - v288) >> 3;
                    if (v289 > v286)
                    {
                      v290 = v288 + 8 * v286;
                      if (v290 != v287 && *(_DWORD *)(v290 + 4) == (_DWORD)v271)
                      {
                        v292 = v208[4];
                        v293 = (v208[5] - v292) >> 3;
                        if (v272 < v293)
                        {
                          v294 = *(_QWORD *)(v292 + 8 * v272);
                          if (v294)
                          {
                            v295 = *(unsigned __int16 *)(v294 + 2 * v276);
                            v297 = v208[7];
                            v296 = v208[8];
                            v298 = (v296 - v297) >> 3;
                            if (v298 > v295)
                            {
                              v299 = v297 + 8 * v295;
                              v406 = v209;
                              if (v299 != v296 && *(_DWORD *)(v299 + 4) == (_DWORD)v271)
                              {
                                v301 = *(_QWORD *)v216;
                                v302 = HIDWORD(*(_QWORD *)v216);
                                v303 = *(_QWORD *)v216 >> 39;
                                if (v303 < v274
                                  && (v304 = *(_QWORD *)(v273 + 8 * v303)) != 0
                                  && (v305 = *(unsigned __int16 *)(v304 + 2 * (HIDWORD(v301) & 0x7F)), v280 > v305)
                                  && (v306 = v279 + 8 * v305, v306 != v278)
                                  && *(_DWORD *)(v306 + 4) == (_DWORD)v302)
                                {
                                  v307 = (uint64_t *)(v204[10] + 24 * v305);
                                }
                                else
                                {
                                  v307 = (uint64_t *)v204[11];
                                }
                                if (v303 < v284
                                  && (v308 = *(_QWORD *)(v283 + 8 * v303)) != 0
                                  && (v309 = *(unsigned __int16 *)(v308 + 2 * (HIDWORD(v301) & 0x7F)), v289 > v309)
                                  && (v310 = v288 + 8 * v309, v310 != v287)
                                  && *(_DWORD *)(v310 + 4) == (_DWORD)v302)
                                {
                                  v311 = (uint64_t *)(v206[10] + 24 * v309);
                                }
                                else
                                {
                                  v311 = (uint64_t *)v206[11];
                                }
                                if (v303 < v293
                                  && (v312 = *(_QWORD *)(v292 + 8 * v303)) != 0
                                  && (v313 = *(unsigned __int16 *)(v312 + 2 * (HIDWORD(v301) & 0x7F)), v298 > v313)
                                  && (v314 = v297 + 8 * v313, v314 != v296)
                                  && *(_DWORD *)(v314 + 4) == (_DWORD)v302)
                                {
                                  v270 = v208[10] + 24 * v313;
                                }
                                else
                                {
                                  v270 = v208[11];
                                }
                                md::ARCollectMapDataLogic<(md::MapDataType)60,md::CollectARMapDataLogic>::updateVisibleMapData(md::SceneContext const&,gdc::Registry *)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)60> &,SceneComponents::LayerDataPreviousInView<(md::MapDataType)60> &,SceneComponents::LayerDataEnteringView<(md::MapDataType)60> &,SceneComponents::LayerDataExitingView<(md::MapDataType)60> &)#1}::operator()((uint64_t)&v415, v301, v307, v218, v311, v270);
                                v209 = v406;
                                v214 = v408;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v218 += 3;
        v216 += 8;
      }
      while (v216 != v217);
    }
  }
  if (v206 + 4 == v213)
  {
    v415 = v214;
    v416 = v409;
    v219 = v206[7];
    v220 = v206[8];
    if (v219 != v220)
    {
      v221 = (uint64_t *)v206[10];
      do
      {
        v316 = *(unsigned int *)(v219 + 4);
        v317 = v316 >> 7;
        v318 = v204[4];
        v319 = (v204[5] - v318) >> 3;
        if (v316 >> 7 < v319)
        {
          v320 = *(_QWORD *)(v318 + 8 * v317);
          if (v320)
          {
            v321 = v316 & 0x7F;
            v322 = *(unsigned __int16 *)(v320 + 2 * v321);
            v324 = v204[7];
            v323 = v204[8];
            v325 = (v323 - v324) >> 3;
            if (v325 > v322)
            {
              v326 = v324 + 8 * v322;
              if (v326 != v323 && *(_DWORD *)(v326 + 4) == (_DWORD)v316)
              {
                v328 = v205[4];
                v329 = (v205[5] - v328) >> 3;
                if (v317 < v329)
                {
                  v330 = *(_QWORD *)(v328 + 8 * v317);
                  if (v330)
                  {
                    v331 = *(unsigned __int16 *)(v330 + 2 * v321);
                    v333 = v205[7];
                    v332 = v205[8];
                    v334 = (v332 - v333) >> 3;
                    if (v334 > v331)
                    {
                      v335 = v333 + 8 * v331;
                      if (v335 != v332 && *(_DWORD *)(v335 + 4) == (_DWORD)v316)
                      {
                        v337 = v208[4];
                        v338 = (v208[5] - v337) >> 3;
                        if (v317 < v338)
                        {
                          v339 = *(_QWORD *)(v337 + 8 * v317);
                          if (v339)
                          {
                            v340 = *(unsigned __int16 *)(v339 + 2 * v321);
                            v342 = v208[7];
                            v341 = v208[8];
                            v343 = (v341 - v342) >> 3;
                            if (v343 > v340)
                            {
                              v344 = v342 + 8 * v340;
                              v407 = v209;
                              if (v344 != v341 && *(_DWORD *)(v344 + 4) == (_DWORD)v316)
                              {
                                v346 = *(_QWORD *)v219;
                                v347 = HIDWORD(*(_QWORD *)v219);
                                v348 = *(_QWORD *)v219 >> 39;
                                if (v348 < v319
                                  && (v349 = *(_QWORD *)(v318 + 8 * v348)) != 0
                                  && (v350 = *(unsigned __int16 *)(v349 + 2 * (HIDWORD(v346) & 0x7F)), v325 > v350)
                                  && (v351 = v324 + 8 * v350, v351 != v323)
                                  && *(_DWORD *)(v351 + 4) == (_DWORD)v347)
                                {
                                  v352 = (uint64_t *)(v204[10] + 24 * v350);
                                }
                                else
                                {
                                  v352 = (uint64_t *)v204[11];
                                }
                                if (v348 < v329
                                  && (v353 = *(_QWORD *)(v328 + 8 * v348)) != 0
                                  && (v354 = *(unsigned __int16 *)(v353 + 2 * (HIDWORD(v346) & 0x7F)), v334 > v354)
                                  && (v355 = v333 + 8 * v354, v355 != v332)
                                  && *(_DWORD *)(v355 + 4) == (_DWORD)v347)
                                {
                                  v356 = (uint64_t *)(v205[10] + 24 * v354);
                                }
                                else
                                {
                                  v356 = (uint64_t *)v205[11];
                                }
                                if (v348 < v338
                                  && (v357 = *(_QWORD *)(v337 + 8 * v348)) != 0
                                  && (v358 = *(unsigned __int16 *)(v357 + 2 * (HIDWORD(v346) & 0x7F)), v343 > v358)
                                  && (v359 = v342 + 8 * v358, v359 != v341)
                                  && *(_DWORD *)(v359 + 4) == (_DWORD)v347)
                                {
                                  v315 = v208[10] + 24 * v358;
                                }
                                else
                                {
                                  v315 = v208[11];
                                }
                                md::ARCollectMapDataLogic<(md::MapDataType)60,md::CollectARMapDataLogic>::updateVisibleMapData(md::SceneContext const&,gdc::Registry *)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)60> &,SceneComponents::LayerDataPreviousInView<(md::MapDataType)60> &,SceneComponents::LayerDataEnteringView<(md::MapDataType)60> &,SceneComponents::LayerDataExitingView<(md::MapDataType)60> &)#1}::operator()((uint64_t)&v415, v346, v352, v356, v221, v315);
                                v209 = v407;
                                v214 = v408;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v221 += 3;
        v219 += 8;
      }
      while (v219 != v220);
    }
  }
  if ((_QWORD *)v209 == v213)
  {
    v415 = v214;
    v416 = v409;
    v222 = v208[7];
    v223 = v208[8];
    if (v222 != v223)
    {
      v224 = v208[10];
      do
      {
        v361 = *(unsigned int *)(v222 + 4);
        v362 = v361 >> 7;
        v363 = v204[4];
        v364 = (v204[5] - v363) >> 3;
        if (v361 >> 7 < v364)
        {
          v365 = *(_QWORD *)(v363 + 8 * v362);
          if (v365)
          {
            v366 = v361 & 0x7F;
            v367 = *(unsigned __int16 *)(v365 + 2 * v366);
            v369 = v204[7];
            v368 = v204[8];
            v370 = (v368 - v369) >> 3;
            if (v370 > v367)
            {
              v371 = v369 + 8 * v367;
              if (v371 != v368 && *(_DWORD *)(v371 + 4) == (_DWORD)v361)
              {
                v373 = v205[4];
                v374 = (v205[5] - v373) >> 3;
                if (v362 < v374)
                {
                  v375 = *(_QWORD *)(v373 + 8 * v362);
                  if (v375)
                  {
                    v376 = *(unsigned __int16 *)(v375 + 2 * v366);
                    v378 = v205[7];
                    v377 = v205[8];
                    v379 = (v377 - v378) >> 3;
                    if (v379 > v376)
                    {
                      v380 = v378 + 8 * v376;
                      if (v380 != v377 && *(_DWORD *)(v380 + 4) == (_DWORD)v361)
                      {
                        v382 = v206[4];
                        v383 = (v206[5] - v382) >> 3;
                        if (v362 < v383)
                        {
                          v384 = *(_QWORD *)(v382 + 8 * v362);
                          if (v384)
                          {
                            v385 = *(unsigned __int16 *)(v384 + 2 * v366);
                            v387 = v206[7];
                            v386 = v206[8];
                            v388 = (v386 - v387) >> 3;
                            if (v388 > v385)
                            {
                              v389 = v387 + 8 * v385;
                              if (v389 != v386 && *(_DWORD *)(v389 + 4) == (_DWORD)v361)
                              {
                                v391 = *(_QWORD *)v222;
                                v392 = HIDWORD(*(_QWORD *)v222);
                                v393 = *(_QWORD *)v222 >> 39;
                                if (v393 < v364
                                  && (v394 = *(_QWORD *)(v363 + 8 * v393)) != 0
                                  && (v395 = *(unsigned __int16 *)(v394 + 2 * (HIDWORD(v391) & 0x7F)), v370 > v395)
                                  && (v396 = v369 + 8 * v395, v396 != v368)
                                  && *(_DWORD *)(v396 + 4) == (_DWORD)v392)
                                {
                                  v397 = (uint64_t *)(v204[10] + 24 * v395);
                                }
                                else
                                {
                                  v397 = (uint64_t *)v204[11];
                                }
                                if (v393 < v374
                                  && (v398 = *(_QWORD *)(v373 + 8 * v393)) != 0
                                  && (v399 = *(unsigned __int16 *)(v398 + 2 * (HIDWORD(v391) & 0x7F)), v379 > v399)
                                  && (v400 = v378 + 8 * v399, v400 != v377)
                                  && *(_DWORD *)(v400 + 4) == (_DWORD)v392)
                                {
                                  v401 = (uint64_t *)(v205[10] + 24 * v399);
                                }
                                else
                                {
                                  v401 = (uint64_t *)v205[11];
                                }
                                if (v393 < v383
                                  && (v402 = *(_QWORD *)(v382 + 8 * v393)) != 0
                                  && (v403 = *(unsigned __int16 *)(v402 + 2 * (HIDWORD(v391) & 0x7F)), v388 > v403)
                                  && (v404 = v387 + 8 * v403, v404 != v386)
                                  && *(_DWORD *)(v404 + 4) == (_DWORD)v392)
                                {
                                  v360 = (uint64_t *)(v206[10] + 24 * v403);
                                }
                                else
                                {
                                  v360 = (uint64_t *)v206[11];
                                }
                                md::ARCollectMapDataLogic<(md::MapDataType)60,md::CollectARMapDataLogic>::updateVisibleMapData(md::SceneContext const&,gdc::Registry *)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)60> &,SceneComponents::LayerDataPreviousInView<(md::MapDataType)60> &,SceneComponents::LayerDataEnteringView<(md::MapDataType)60> &,SceneComponents::LayerDataExitingView<(md::MapDataType)60> &)#1}::operator()((uint64_t)&v415, v391, v397, v401, v360, v224);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v224 += 24;
        v222 += 8;
      }
      while (v222 != v223);
    }
  }
}

void sub_19FA3C2F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  _QWORD **v10;
  va_list va;

  va_start(va, a10);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*v10);
  std::__split_buffer<SceneComponents::LayerDataPreviousInView<(md::MapDataType)33>>::~__split_buffer((uint64_t)va);
  std::__tree<gdc::LayerDataWithWorld>::destroy(a7);
  _Unwind_Resume(a1);
}

void md::Logic<md::CollectARMapDataLogic,md::ARCollectMapDataContext<(md::MapDataType)60>,md::LogicDependencies<gdc::TypeList<md::ARSceneContext,md::GeometryContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataDidEnterView<(md::MapDataType)60>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xD9D6033E08E71563;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xD9D6033E08E71563;
      if (*(_QWORD *)&v3 <= 0xD9D6033E08E71563)
        v5 = 0xD9D6033E08E71563 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xD9D6033E08E71563;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xD9D6033E08E71563)
            {
              if (v7[2] == 0xD9D6033E08E71563)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xD9D6033E08E71563)
          {
            if (v7[2] == 0xD9D6033E08E71563)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "SceneComponents::LayerDataDidEnterView<md::MapDataType::ARBuildings>]";
  *(_QWORD *)(v11 + 24) = 68;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B2C58;
  *(_QWORD *)(v11 + 8) = 0xD9D6033E08E71563;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xD9D6033E08E71563, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xD9D6033E08E71563;
  v15[1] = "SceneComponents::LayerDataDidEnterView<md::MapDataType::ARBuildings>]";
  v15[2] = 68;
  gdc::Registry::_registerStorageDataSignals(a1, 0xD9D6033E08E71563, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19FA3C6A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataDidExitView<(md::MapDataType)60>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x7731F7E182AC74C3;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x7731F7E182AC74C3;
      if (*(_QWORD *)&v3 <= 0x7731F7E182AC74C3uLL)
        v5 = 0x7731F7E182AC74C3uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x7731F7E182AC74C3;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x7731F7E182AC74C3)
            {
              if (v7[2] == 0x7731F7E182AC74C3)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x7731F7E182AC74C3)
          {
            if (v7[2] == 0x7731F7E182AC74C3)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "SceneComponents::LayerDataDidExitView<md::MapDataType::ARBuildings>]";
  *(_QWORD *)(v11 + 24) = 67;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B2B38;
  *(_QWORD *)(v11 + 8) = 0x7731F7E182AC74C3;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x7731F7E182AC74C3uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x7731F7E182AC74C3;
  v15[1] = "SceneComponents::LayerDataDidExitView<md::MapDataType::ARBuildings>]";
  v15[2] = 67;
  gdc::Registry::_registerStorageDataSignals(a1, 0x7731F7E182AC74C3, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19FA3C8C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataEnteringView<(md::MapDataType)60>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xAE0549933BB69820;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xAE0549933BB69820;
      if (*(_QWORD *)&v3 <= 0xAE0549933BB69820)
        v5 = 0xAE0549933BB69820 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xAE0549933BB69820;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xAE0549933BB69820)
            {
              if (v7[2] == 0xAE0549933BB69820)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xAE0549933BB69820)
          {
            if (v7[2] == 0xAE0549933BB69820)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "SceneComponents::LayerDataEnteringView<md::MapDataType::ARBuildings>]";
  *(_QWORD *)(v11 + 24) = 68;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B2CE8;
  *(_QWORD *)(v11 + 8) = 0xAE0549933BB69820;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xAE0549933BB69820, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xAE0549933BB69820;
  v15[1] = "SceneComponents::LayerDataEnteringView<md::MapDataType::ARBuildings>]";
  v15[2] = 68;
  gdc::Registry::_registerStorageDataSignals(a1, 0xAE0549933BB69820, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19FA3CAF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataExitingView<(md::MapDataType)60>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x416BB4B17C0143F6;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x416BB4B17C0143F6;
      if (*(_QWORD *)&v3 <= 0x416BB4B17C0143F6uLL)
        v5 = 0x416BB4B17C0143F6uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x416BB4B17C0143F6;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x416BB4B17C0143F6)
            {
              if (v7[2] == 0x416BB4B17C0143F6)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x416BB4B17C0143F6)
          {
            if (v7[2] == 0x416BB4B17C0143F6)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "SceneComponents::LayerDataExitingView<md::MapDataType::ARBuildings>]";
  *(_QWORD *)(v11 + 24) = 67;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B2BC8;
  *(_QWORD *)(v11 + 8) = 0x416BB4B17C0143F6;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x416BB4B17C0143F6uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x416BB4B17C0143F6;
  v15[1] = "SceneComponents::LayerDataExitingView<md::MapDataType::ARBuildings>]";
  v15[2] = 67;
  gdc::Registry::_registerStorageDataSignals(a1, 0x416BB4B17C0143F6, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19FA3CD18(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataPreviousInView<(md::MapDataType)60>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xEFE60C4B692DE7FCLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xEFE60C4B692DE7FCLL;
      if (*(_QWORD *)&v3 <= 0xEFE60C4B692DE7FCLL)
        v5 = 0xEFE60C4B692DE7FCLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xEFE60C4B692DE7FCLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xEFE60C4B692DE7FCLL)
            {
              if (v7[2] == 0xEFE60C4B692DE7FCLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xEFE60C4B692DE7FCLL)
          {
            if (v7[2] == 0xEFE60C4B692DE7FCLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "SceneComponents::LayerDataPreviousInView<md::MapDataType::ARBuildings>]";
  *(_QWORD *)(v11 + 24) = 70;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B2D78;
  *(_QWORD *)(v11 + 8) = 0xEFE60C4B692DE7FCLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xEFE60C4B692DE7FCLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xEFE60C4B692DE7FCLL;
  v15[1] = "SceneComponents::LayerDataPreviousInView<md::MapDataType::ARBuildings>]";
  v15[2] = 70;
  gdc::Registry::_registerStorageDataSignals(a1, 0xEFE60C4B692DE7FCLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19FA3CF40(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void md::ARCollectMapDataLogic<(md::MapDataType)60,md::CollectARMapDataLogic>::updateVisibleMapData(md::SceneContext const&,gdc::Registry *)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)60> &,SceneComponents::LayerDataPreviousInView<(md::MapDataType)60> &,SceneComponents::LayerDataEnteringView<(md::MapDataType)60> &,SceneComponents::LayerDataExitingView<(md::MapDataType)60> &)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD **v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t **v19;
  unint64_t v20;
  unsigned __int8 v21;
  _WORD *v22;
  _WORD *v23;
  uint64_t *v24;
  _WORD *v25;
  uint64_t *v26;
  uint64_t *v27;
  unint64_t v28;
  int v29;
  int v30;
  int v31;
  unint64_t v32;
  _BOOL4 v33;
  _QWORD *v34;
  unint64_t v35;
  _BOOL4 v36;
  uint64_t *v37;
  uint64_t *v38;
  _QWORD *v39;
  _QWORD *v40;
  BOOL v41;
  uint64_t *v42;
  uint64_t *v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  int v49;
  int v50;
  int v51;
  unint64_t v52;
  _BOOL4 v53;
  uint64_t *v54;
  uint64_t *v55;
  _BOOL4 v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t *v65;
  _QWORD *v66;
  char v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  size_t v74;
  char *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t *v79;
  _QWORD *v80;
  char v81;
  uint64_t v82;
  unint64_t v83;
  _BYTE *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  size_t v89;
  char *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  __int128 v96;

  v8 = a4;
  v9 = (uint64_t)a3;
  v12 = *(_QWORD *)(a1 + 8);
  v13 = *a3;
  *a3 = *a4;
  *a4 = v13;
  v15 = (_QWORD **)(a3 + 1);
  v14 = a3[1];
  v16 = a4 + 1;
  v17 = a3[2];
  *(_OWORD *)(a3 + 1) = *(_OWORD *)(a4 + 1);
  a4[1] = v14;
  a4[2] = v17;
  if (a3[2])
    v18 = (uint64_t *)(a3[1] + 16);
  else
    v18 = a3;
  *v18 = (uint64_t)v15;
  v19 = (uint64_t **)(*v16 + 16);
  if (!v17)
    v19 = (uint64_t **)a4;
  *v19 = v16;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*v15);
  *(_QWORD *)v9 = v15;
  *(_QWORD *)(v9 + 16) = 0;
  *v15 = 0;
  std::__tree<gdc::LayerDataWithWorld>::destroy((_QWORD *)a5[1]);
  *a5 = (uint64_t)(a5 + 1);
  a5[2] = 0;
  a5[1] = 0;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a6 + 8));
  *(_QWORD *)a6 = a6 + 8;
  *(_QWORD *)(a6 + 16) = 0;
  *(_QWORD *)(a6 + 8) = 0;
  v20 = **(_QWORD **)a1;
  if ((v21 & 1) == 0)
  {
LABEL_152:
    {
      qword_1ECE2F300 = 0;
      qword_1ECE2F2F8 = 0;
      md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1ECE2F2F8;
      __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_19F029000);
    }
  }
  v22 = *(_WORD **)(v20 + 48);
  v23 = *(_WORD **)(v20 + 56);
  v24 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
  if (v22 != v23)
  {
    v25 = *(_WORD **)(v20 + 48);
    while (*v25 != 60)
    {
      v25 += 16;
      if (v25 == v23)
        goto LABEL_18;
    }
    if (v25 == v23)
    {
      v24 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v22 != 60)
      {
        v22 += 16;
        if (v22 == v23)
        {
          v22 = *(_WORD **)(v20 + 56);
          break;
        }
      }
      v24 = (uint64_t *)(v22 + 4);
    }
  }
LABEL_18:
  std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>((uint64_t *)v9, (_QWORD *)*v24, v24 + 1);
  v20 = *(_QWORD *)v9;
  v26 = (uint64_t *)*v8;
  v27 = (uint64_t *)*a5;
  *(_QWORD *)&v94 = a5;
  *((_QWORD *)&v94 + 1) = v27;
  while ((_QWORD **)v20 != v15)
  {
    if (v26 == v16)
    {
      v96 = v94;
      do
      {
        std::insert_iterator<SceneComponents::LayerDataExitingView<(md::MapDataType)33>>::operator=[abi:nn180100]((_QWORD **)&v96, v20 + 32);
        v44 = *(_QWORD **)(v20 + 8);
        if (v44)
        {
          do
          {
            v45 = v44;
            v44 = (_QWORD *)*v44;
          }
          while (v44);
        }
        else
        {
          do
          {
            v45 = *(_QWORD **)(v20 + 16);
            v41 = *v45 == v20;
            v20 = (unint64_t)v45;
          }
          while (!v41);
        }
        v20 = (unint64_t)v45;
      }
      while (v45 != v15);
      break;
    }
    v28 = *(_QWORD *)(v20 + 32);
    v29 = *(unsigned __int8 *)(v20 + 48);
    v30 = (char)v29;
    v31 = *((unsigned __int8 *)v26 + 48);
    v32 = v26[4];
    if (v29 == v31)
      v33 = v28 < v32;
    else
      v33 = (char)v29 < (char)v31;
    if (v33)
    {
      std::insert_iterator<SceneComponents::LayerDataExitingView<(md::MapDataType)33>>::operator=[abi:nn180100]((_QWORD **)&v94, v20 + 32);
      v34 = *(_QWORD **)(v20 + 8);
      if (v34)
      {
        do
        {
          v20 = (unint64_t)v34;
          v34 = (_QWORD *)*v34;
        }
        while (v34);
      }
      else
      {
        do
        {
          v35 = v20;
          v20 = *(_QWORD *)(v20 + 16);
        }
        while (*(_QWORD *)v20 != v35);
      }
    }
    else
    {
      v36 = v32 < v28;
      if (v30 != (char)v31)
        v36 = (char)v31 < v30;
      if (v36)
      {
        v37 = (uint64_t *)v26[1];
        if (v37)
        {
          do
          {
            v26 = v37;
            v37 = (uint64_t *)*v37;
          }
          while (v37);
        }
        else
        {
          do
          {
            v38 = v26;
            v26 = (uint64_t *)v26[2];
          }
          while ((uint64_t *)*v26 != v38);
        }
      }
      else
      {
        v39 = *(_QWORD **)(v20 + 8);
        if (v39)
        {
          do
          {
            v40 = v39;
            v39 = (_QWORD *)*v39;
          }
          while (v39);
        }
        else
        {
          do
          {
            v40 = *(_QWORD **)(v20 + 16);
            v41 = *v40 == v20;
            v20 = (unint64_t)v40;
          }
          while (!v41);
        }
        v42 = (uint64_t *)v26[1];
        if (v42)
        {
          do
          {
            v26 = v42;
            v42 = (uint64_t *)*v42;
          }
          while (v42);
        }
        else
        {
          do
          {
            v43 = v26;
            v26 = (uint64_t *)v26[2];
          }
          while ((uint64_t *)*v26 != v43);
        }
        v20 = (unint64_t)v40;
      }
    }
  }
  v8 = (uint64_t *)*v8;
  v46 = *(_QWORD *)v9;
  v47 = *(_QWORD *)a6;
  *(_QWORD *)&v94 = a6;
  *((_QWORD *)&v94 + 1) = v47;
  while (v8 != v16)
  {
    if ((_QWORD **)v46 == v15)
    {
      v96 = v94;
      do
      {
        std::insert_iterator<SceneComponents::LayerDataExitingView<(md::MapDataType)33>>::operator=[abi:nn180100]((_QWORD **)&v96, (uint64_t)(v8 + 4));
        v63 = (uint64_t *)v8[1];
        if (v63)
        {
          do
          {
            v64 = v63;
            v63 = (uint64_t *)*v63;
          }
          while (v63);
        }
        else
        {
          do
          {
            v64 = (uint64_t *)v8[2];
            v41 = *v64 == (_QWORD)v8;
            v8 = v64;
          }
          while (!v41);
        }
        v8 = v64;
      }
      while (v64 != v16);
      break;
    }
    v48 = v8[4];
    v49 = *((unsigned __int8 *)v8 + 48);
    v50 = (char)v49;
    v51 = *(unsigned __int8 *)(v46 + 48);
    v52 = *(_QWORD *)(v46 + 32);
    if (v49 == v51)
      v53 = v48 < v52;
    else
      v53 = (char)v49 < (char)v51;
    if (v53)
    {
      std::insert_iterator<SceneComponents::LayerDataExitingView<(md::MapDataType)33>>::operator=[abi:nn180100]((_QWORD **)&v94, (uint64_t)(v8 + 4));
      v54 = (uint64_t *)v8[1];
      if (v54)
      {
        do
        {
          v8 = v54;
          v54 = (uint64_t *)*v54;
        }
        while (v54);
      }
      else
      {
        do
        {
          v55 = v8;
          v8 = (uint64_t *)v8[2];
        }
        while ((uint64_t *)*v8 != v55);
      }
    }
    else
    {
      v56 = v52 < v48;
      if (v50 != (char)v51)
        v56 = (char)v51 < v50;
      if (v56)
      {
        v57 = *(_QWORD **)(v46 + 8);
        if (v57)
        {
          do
          {
            v46 = (uint64_t)v57;
            v57 = (_QWORD *)*v57;
          }
          while (v57);
        }
        else
        {
          do
          {
            v58 = v46;
            v46 = *(_QWORD *)(v46 + 16);
          }
          while (*(_QWORD *)v46 != v58);
        }
      }
      else
      {
        v59 = (uint64_t *)v8[1];
        if (v59)
        {
          do
          {
            v60 = v59;
            v59 = (uint64_t *)*v59;
          }
          while (v59);
        }
        else
        {
          do
          {
            v60 = (uint64_t *)v8[2];
            v41 = *v60 == (_QWORD)v8;
            v8 = v60;
          }
          while (!v41);
        }
        v61 = *(_QWORD **)(v46 + 8);
        if (v61)
        {
          do
          {
            v46 = (uint64_t)v61;
            v61 = (_QWORD *)*v61;
          }
          while (v61);
        }
        else
        {
          do
          {
            v62 = v46;
            v46 = *(_QWORD *)(v46 + 16);
          }
          while (*(_QWORD *)v46 != v62);
        }
        v8 = v60;
      }
    }
  }
  if (!a5[2])
    goto LABEL_122;
  v65 = (uint64_t *)gdc::Registry::storage<SceneComponents::LayerDataDidEnterView<(md::MapDataType)60>>(*(_QWORD *)(v12 + 128));
  v95 = a2;
  v66 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v65 + 4, (uint64_t)&v95);
  if ((v67 & 1) != 0)
  {
    v20 = v65[11];
    v69 = v65[12];
    if (v20 >= v69)
    {
      v71 = (char *)v65[10];
      v16 = (uint64_t *)(v20 - (_QWORD)v71);
      v72 = v20 - (_QWORD)v71 + 1;
      if (v72 < 0)
        goto LABEL_154;
      v73 = v69 - (_QWORD)v71;
      if (2 * v73 > v72)
        v72 = 2 * v73;
      if (v73 >= 0x3FFFFFFFFFFFFFFFLL)
        v74 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v74 = v72;
      if (v74)
        v75 = (char *)operator new(v74);
      else
        v75 = 0;
      v76 = &v75[v74];
      v70 = (uint64_t)v16 + (_QWORD)v75 + 1;
      v77 = &v71[-v20];
      if (v71 == (char *)v20)
        v77 = 0;
      v65[10] = (uint64_t)v16 + (_QWORD)v75 + (unint64_t)v77;
      v65[11] = v70;
      v65[12] = (uint64_t)v76;
      if (v71)
        operator delete(v71);
    }
    else
    {
      v70 = v20 + 1;
    }
    v65[11] = v70;
    v9 = v65[31];
    goto LABEL_118;
  }
  v9 = v65[31];
  if (v65[10] + (((uint64_t)v66 - v65[7]) >> 3) == v65[11])
  {
LABEL_118:
    v8 = &v95;
    a5 = (uint64_t *)v65[22];
    if (a5)
    {
      v20 = 1;
      while (1)
      {
        *(_QWORD *)&v96 = &v95;
        *((_QWORD *)&v96 + 1) = 1;
        *(_QWORD *)&v94 = v9;
        v78 = a5[6];
        if (!v78)
          goto LABEL_151;
        (*(void (**)(uint64_t, __int128 *, __int128 *))(*(_QWORD *)v78 + 48))(v78, &v94, &v96);
        a5 = (uint64_t *)*a5;
        if (!a5)
          goto LABEL_122;
      }
    }
    goto LABEL_122;
  }
  a5 = (uint64_t *)v65[16];
  if (a5)
  {
    v8 = &v95;
    v20 = 1;
    do
    {
      *(_QWORD *)&v96 = &v95;
      *((_QWORD *)&v96 + 1) = 1;
      *(_QWORD *)&v94 = v9;
      v68 = a5[6];
      if (!v68)
        goto LABEL_151;
      (*(void (**)(uint64_t, __int128 *, __int128 *))(*(_QWORD *)v68 + 48))(v68, &v94, &v96);
      a5 = (uint64_t *)*a5;
    }
    while (a5);
  }
LABEL_122:
  if (!*(_QWORD *)(a6 + 16))
    return;
  v79 = (uint64_t *)gdc::Registry::storage<SceneComponents::LayerDataDidExitView<(md::MapDataType)60>>(*(_QWORD *)(v12 + 128));
  v95 = a2;
  v80 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v79 + 4, (uint64_t)&v95);
  if ((v81 & 1) != 0)
  {
    v84 = (_BYTE *)v79[11];
    v83 = v79[12];
    if ((unint64_t)v84 < v83)
    {
      v85 = (uint64_t)(v84 + 1);
LABEL_145:
      v79[11] = v85;
      a2 = v79[31];
      goto LABEL_146;
    }
    v86 = (char *)v79[10];
    v8 = (uint64_t *)(v84 - v86);
    v87 = v84 - v86 + 1;
    if (v87 >= 0)
    {
      v88 = v83 - (_QWORD)v86;
      if (2 * v88 > v87)
        v87 = 2 * v88;
      if (v88 >= 0x3FFFFFFFFFFFFFFFLL)
        v89 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v89 = v87;
      if (v89)
        v90 = (char *)operator new(v89);
      else
        v90 = 0;
      v91 = &v90[v89];
      v85 = (uint64_t)v8 + (_QWORD)v90 + 1;
      v92 = (char *)(v86 - v84);
      if (v86 == v84)
        v92 = 0;
      v79[10] = (uint64_t)v8 + (_QWORD)v90 + (unint64_t)v92;
      v79[11] = v85;
      v79[12] = (uint64_t)v91;
      if (v86)
        operator delete(v86);
      goto LABEL_145;
    }
LABEL_154:
    abort();
  }
  a2 = v79[31];
  if (v79[10] + (((uint64_t)v80 - v79[7]) >> 3) != v79[11])
  {
    a6 = v79[16];
    if (a6)
    {
      a5 = &v95;
      v9 = 1;
      while (1)
      {
        *(_QWORD *)&v96 = &v95;
        *((_QWORD *)&v96 + 1) = 1;
        *(_QWORD *)&v94 = a2;
        v82 = *(_QWORD *)(a6 + 48);
        if (!v82)
          break;
        (*(void (**)(uint64_t, __int128 *, __int128 *))(*(_QWORD *)v82 + 48))(v82, &v94, &v96);
        a6 = *(_QWORD *)a6;
        if (!a6)
          return;
      }
LABEL_151:
      std::__throw_bad_function_call[abi:nn180100]();
      goto LABEL_152;
    }
    return;
  }
LABEL_146:
  a5 = &v95;
  a6 = v79[22];
  if (a6)
  {
    v9 = 1;
    while (1)
    {
      *(_QWORD *)&v96 = &v95;
      *((_QWORD *)&v96 + 1) = 1;
      *(_QWORD *)&v94 = a2;
      v93 = *(_QWORD *)(a6 + 48);
      if (!v93)
        break;
      (*(void (**)(uint64_t, __int128 *, __int128 *))(*(_QWORD *)v93 + 48))(v93, &v94, &v96);
      a6 = *(_QWORD *)a6;
      if (!a6)
        return;
    }
    goto LABEL_151;
  }
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataPreviousInView<(md::MapDataType)60>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)33>>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataPreviousInView<(md::MapDataType)60>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t **v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != (_DWORD)v10 || v11 == v8)
    return 0;
  v14 = (uint64_t **)(a1[10] + 24 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  if (v14 != (uint64_t **)(v15 - 24))
  {
    std::__tree<gdc::LayerDataWithWorld>::__assign_multi<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v14, *(_QWORD **)(v15 - 24), (_QWORD *)(v15 - 16));
    v15 = a1[11];
  }
  v16 = v15 - 24;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(v15 - 16));
  a1[11] = v16;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataPreviousInView<(md::MapDataType)60>>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataPreviousInView<(md::MapDataType)60>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataExitingView<(md::MapDataType)60>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)33>>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataExitingView<(md::MapDataType)60>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t **v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != (_DWORD)v10 || v11 == v8)
    return 0;
  v14 = (uint64_t **)(a1[10] + 24 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  if (v14 != (uint64_t **)(v15 - 24))
  {
    std::__tree<gdc::LayerDataWithWorld>::__assign_multi<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v14, *(_QWORD **)(v15 - 24), (_QWORD *)(v15 - 16));
    v15 = a1[11];
  }
  v16 = v15 - 24;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(v15 - 16));
  a1[11] = v16;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataExitingView<(md::MapDataType)60>>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataExitingView<(md::MapDataType)60>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataEnteringView<(md::MapDataType)60>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)33>>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataEnteringView<(md::MapDataType)60>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t **v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != (_DWORD)v10 || v11 == v8)
    return 0;
  v14 = (uint64_t **)(a1[10] + 24 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  if (v14 != (uint64_t **)(v15 - 24))
  {
    std::__tree<gdc::LayerDataWithWorld>::__assign_multi<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v14, *(_QWORD **)(v15 - 24), (_QWORD *)(v15 - 16));
    v15 = a1[11];
  }
  v16 = v15 - 24;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(v15 - 16));
  a1[11] = v16;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataEnteringView<(md::MapDataType)60>>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataEnteringView<(md::MapDataType)60>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataInfo<(md::MapDataType)60>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataInfo<(md::MapDataType)60>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_WORD *)(v14 + 2 * v7) = *(_WORD *)(v15 - 2);
  a1[11] = v15 - 2;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataInfo<(md::MapDataType)60>>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataInfo<(md::MapDataType)60>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidExitView<(md::MapDataType)60>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidExitView<(md::MapDataType)60>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidExitView<(md::MapDataType)60>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidExitView<(md::MapDataType)60>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidEnterView<(md::MapDataType)60>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidEnterView<(md::MapDataType)60>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidEnterView<(md::MapDataType)60>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidEnterView<(md::MapDataType)60>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

uint64_t md::LogicDependencies<gdc::TypeList<md::ARSceneContext,md::GeometryContext>,gdc::TypeList<>>::buildRequiredTuple<md::ARSceneContext,md::GeometryContext>(uint64_t a1, unint64_t a2)
{
  uint8x8_t v2;
  uint64_t v3;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;

  if (!a2)
    return 0;
  v2 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    v3 = 0x29BDA47DB65B52C8;
    if (a2 <= 0x29BDA47DB65B52C8)
      v3 = 0x29BDA47DB65B52C8 % a2;
  }
  else
  {
    v3 = (a2 - 1) & 0x29BDA47DB65B52C8;
  }
  v5 = *(_QWORD **)(a1 + 8 * v3);
  if (!v5)
    goto LABEL_25;
  v6 = (_QWORD *)*v5;
  if (!v6)
    goto LABEL_25;
  if (v2.u32[0] < 2uLL)
  {
    while (1)
    {
      v8 = v6[1];
      if (v8 == 0x29BDA47DB65B52C8)
      {
        if (v6[2] == 0x29BDA47DB65B52C8)
          goto LABEL_23;
      }
      else if ((v8 & (a2 - 1)) != v3)
      {
        goto LABEL_25;
      }
      v6 = (_QWORD *)*v6;
      if (!v6)
        goto LABEL_25;
    }
  }
  while (1)
  {
    v7 = v6[1];
    if (v7 == 0x29BDA47DB65B52C8)
      break;
    if (v7 >= a2)
      v7 %= a2;
    if (v7 != v3)
      goto LABEL_25;
LABEL_12:
    v6 = (_QWORD *)*v6;
    if (!v6)
      goto LABEL_25;
  }
  if (v6[2] != 0x29BDA47DB65B52C8)
    goto LABEL_12;
LABEL_23:
  v9 = v6[5];
  if (*(_QWORD *)(v9 + 8) == 0x29BDA47DB65B52C8)
  {
    v10 = *(_QWORD *)(v9 + 32);
    goto LABEL_26;
  }
LABEL_25:
  v10 = 0;
LABEL_26:
  if (v2.u32[0] > 1uLL)
  {
    v11 = 0x3070CB6B3C7F21D3;
    if (a2 <= 0x3070CB6B3C7F21D3)
      v11 = 0x3070CB6B3C7F21D3 % a2;
  }
  else
  {
    v11 = (a2 - 1) & 0x3070CB6B3C7F21D3;
  }
  v12 = *(_QWORD **)(a1 + 8 * v11);
  if (!v12)
    return v10;
  v13 = (_QWORD *)*v12;
  if (!v13)
    return v10;
  if (v2.u32[0] < 2uLL)
  {
    while (1)
    {
      v15 = v13[1];
      if (v15 == 0x3070CB6B3C7F21D3)
      {
        if (v13[2] == 0x3070CB6B3C7F21D3)
          goto LABEL_46;
      }
      else if ((v15 & (a2 - 1)) != v11)
      {
        return v10;
      }
      v13 = (_QWORD *)*v13;
      if (!v13)
        return v10;
    }
  }
  while (2)
  {
    v14 = v13[1];
    if (v14 != 0x3070CB6B3C7F21D3)
    {
      if (v14 >= a2)
        v14 %= a2;
      if (v14 != v11)
        return v10;
      goto LABEL_35;
    }
    if (v13[2] != 0x3070CB6B3C7F21D3)
    {
LABEL_35:
      v13 = (_QWORD *)*v13;
      if (!v13)
        return v10;
      continue;
    }
    break;
  }
LABEL_46:
  if (*(_QWORD *)(v13[5] + 8) == 0x3070CB6B3C7F21D3)
    return v10;
  return v10;
}

_QWORD *gdc::ManagedObjectHolder<md::ARCollectMapDataContext<(md::MapDataType)60>>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E42B1248;
  v2 = a1[4];
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0xC400A2AC0F1);
  return a1;
}

void gdc::ManagedObjectHolder<md::ARCollectMapDataContext<(md::MapDataType)60>>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E42B1248;
  v1 = a1[4];
  if (v1)
    MEMORY[0x1A1AF4E00](v1, 0xC400A2AC0F1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::ARCollectMapDataContext<(md::MapDataType)60>>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void altitude::RouteRegion::~RouteRegion(altitude::RouteRegion *this)
{
  JUMPOUT(0x1A1AF4E00);
}

BOOL md::LabelAnnotationStyleMonitor::needsCrossfade(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v11;

  if (!*(_BYTE *)(a1 + 9))
    return 0;
  v4 = *(_QWORD *)(a2 + 312);
  if (!v4)
  {
    v5 = md::LabelStyle::prepareStyleGroup<md::LabelAnnotationStyleGroup>(a2);
    v4 = *v5;
    *(_QWORD *)(a2 + 312) = *v5;
  }
  v11 = *(_QWORD *)(v4 + 46);
  v6 = *(_QWORD *)(a2 + 296);
  if (!v6)
  {
    v7 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(a2, 0);
    v6 = *v7;
    *(_QWORD *)(a2 + 296) = *v7;
  }
  v8 = *(unsigned __int8 *)(v6 + 93);
  return *(_QWORD *)a1 != v11 || *(unsigned __int8 *)(a1 + 8) != v8;
}

void ecs2::BucketDescriptor::~BucketDescriptor(ecs2::BucketDescriptor *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;

  if (!*((_BYTE *)this + 56))
    goto LABEL_15;
  v2 = *((_QWORD *)this + 4);
  if (!v2)
    goto LABEL_15;
  v3 = *((_QWORD *)this + 5);
  v4 = (void *)*((_QWORD *)this + 4);
  if (v3 != v2)
  {
    while (1)
    {
      if (*(char *)(v3 - 1) < 0)
        operator delete(*(void **)(v3 - 24));
      v5 = *(_QWORD **)(v3 - 32);
      if ((_QWORD *)(v3 - 56) == v5)
      {
        v5 = (_QWORD *)(v3 - 56);
        v6 = 4;
      }
      else
      {
        if (!v5)
          goto LABEL_7;
        v6 = 5;
      }
      (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_7:
      v3 -= 72;
      if (v3 == v2)
      {
        v4 = (void *)*((_QWORD *)this + 4);
        break;
      }
    }
  }
  *((_QWORD *)this + 5) = v2;
  operator delete(v4);
LABEL_15:
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

uint64_t *std::vector<ecs2::BucketDescriptor>::~vector[abi:nn180100](uint64_t *a1)
{
  if (*a1)
  {
    std::vector<ecs2::BucketDescriptor>::__clear[abi:nn180100](a1);
    operator delete((void *)*a1);
  }
  return a1;
}

void std::vector<ecs2::BucketDescriptor>::__clear[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 64)
  {
    if (!*(_BYTE *)(i - 8))
      goto LABEL_18;
    v4 = *(_QWORD *)(i - 32);
    if (!v4)
      goto LABEL_18;
    v5 = *(_QWORD *)(i - 24);
    v6 = *(void **)(i - 32);
    if (v5 != v4)
    {
      while (1)
      {
        if (*(char *)(v5 - 1) < 0)
          operator delete(*(void **)(v5 - 24));
        v7 = *(_QWORD **)(v5 - 32);
        if ((_QWORD *)(v5 - 56) == v7)
        {
          v7 = (_QWORD *)(v5 - 56);
          v8 = 4;
        }
        else
        {
          if (!v7)
            goto LABEL_10;
          v8 = 5;
        }
        (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_10:
        v5 -= 72;
        if (v5 == v4)
        {
          v6 = *(void **)(i - 32);
          break;
        }
      }
    }
    *(_QWORD *)(i - 24) = v4;
    operator delete(v6);
LABEL_18:
    if (*(char *)(i - 33) < 0)
      operator delete(*(void **)(i - 56));
  }
  a1[1] = v2;
}

void ecs2::LayoutNode::~LayoutNode(void **this)
{
  ecs2::LayoutNode *v2;
  uint64_t v3;

  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  v2 = (ecs2::LayoutNode *)this[5];
  if (v2 == (ecs2::LayoutNode *)(this + 2))
  {
    v3 = 4;
    v2 = (ecs2::LayoutNode *)(this + 2);
  }
  else
  {
    if (!v2)
      return;
    v3 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
}

void std::__function::__func<ecs2::ForwardToExecute<CleanupServices>,std::allocator<ecs2::ForwardToExecute<CleanupServices>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<CleanupServices>,std::allocator<ecs2::ForwardToExecute<CleanupServices>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4275CE8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<CleanupServices>,std::allocator<ecs2::ForwardToExecute<CleanupServices>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4275CE8;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<CleanupServices>,std::allocator<ecs2::ForwardToExecute<CleanupServices>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t ***a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  uint64_t ***v11;
  uint64_t *v12;
  uint64_t *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t result;

  *(_QWORD *)(a1 + 8) = a2;
  v3 = **a2;
  if (v3 != (*a2)[1] && *v3 != 0xCFC5133F599B8248)
  {
    v4 = v3 + 5;
    do
    {
      v5 = *v4;
      v4 += 5;
    }
    while (v5 != 0xCFC5133F599B8248);
    v3 = v4 - 5;
  }
  v6 = v3[3];
  v7 = (std::__shared_weak_count *)v3[4];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 64))(v6);
  v11 = *(uint64_t ****)(a1 + 8);
  v12 = **v11;
  v13 = (*v11)[1];
  if (v12 != v13)
  {
    while (*v12 != 0xC5B557B9C9754C35)
    {
      v12 += 5;
      if (v12 == v13)
        goto LABEL_36;
    }
  }
  if (v12 != v13)
  {
    v15 = v12[3];
    v14 = (std::__shared_weak_count *)v12[4];
    if (v14)
    {
      v16 = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      do
        v18 = __ldaxr(v16);
      while (__stlxr(v18 - 1, v16));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v11 = *(uint64_t ****)(a1 + 8);
    if (v15)
    {
      v19 = (*v11)[1];
      v20 = **v11;
      if (v20 != v19 && *v20 != 0xC5B557B9C9754C35)
      {
        v21 = v20 + 5;
        do
        {
          v22 = *v21;
          v21 += 5;
        }
        while (v22 != 0xC5B557B9C9754C35);
        v20 = v21 - 5;
      }
      v23 = v20[3];
      v24 = (std::__shared_weak_count *)v20[4];
      if (v24)
      {
        v25 = (unint64_t *)&v24->__shared_owners_;
        do
          v26 = __ldxr(v25);
        while (__stxr(v26 + 1, v25));
        do
          v27 = __ldaxr(v25);
        while (__stlxr(v27 - 1, v25));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
      v11 = *(uint64_t ****)(a1 + 8);
    }
  }
LABEL_36:
  v28 = (*v11)[1];
  v29 = **v11;
  if (v29 != v28 && *v29 != 0x8C3843AC816FCBCLL)
  {
    v30 = v29 + 5;
    do
    {
      v31 = *v30;
      v30 += 5;
    }
    while (v31 != 0x8C3843AC816FCBCLL);
    v29 = v30 - 5;
  }
  v32 = v29[3];
  v33 = (std::__shared_weak_count *)v29[4];
  if (v33)
  {
    v34 = (unint64_t *)&v33->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
    do
      v36 = __ldaxr(v34);
    while (__stlxr(v36 - 1, v34));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 80))(v32);
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<CleanupEntities>(CleanupEntities &&)::{lambda(void)#2},std::allocator<CleanupEntities &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<CleanupEntities>(CleanupEntities &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<CleanupEntities>(CleanupEntities &&)::{lambda(void)#2},std::allocator<CleanupEntities &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<CleanupEntities>(CleanupEntities &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42829A8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<CleanupEntities>(CleanupEntities &&)::{lambda(void)#2},std::allocator<CleanupEntities &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<CleanupEntities>(CleanupEntities &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42829A8;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<CleanupEntities>(CleanupEntities &&)::{lambda(void)#2},std::allocator<CleanupEntities &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<CleanupEntities>(CleanupEntities &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<CleanupEntities>(CleanupEntities &&)::{lambda(void)#1},std::allocator<CleanupEntities &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<CleanupEntities>(CleanupEntities &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<CleanupEntities>(CleanupEntities &&)::{lambda(void)#1},std::allocator<CleanupEntities &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<CleanupEntities>(CleanupEntities &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42829F0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<CleanupEntities>(CleanupEntities &&)::{lambda(void)#1},std::allocator<CleanupEntities &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<CleanupEntities>(CleanupEntities &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42829F0;
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<CleanupEntities>(CleanupEntities &&)::{lambda(void)#1},std::allocator<CleanupEntities &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<CleanupEntities>(CleanupEntities &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = operator new(0x18uLL);
  a1[1] = result + 3;
  a1[2] = result + 3;
  *result = 0xC3545FB0365E4B12;
  result[1] = "md::ls::MarkForEntityDeletion]";
  result[2] = 29;
  *a1 = result;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<CleanupEntities>,std::allocator<ecs2::ForwardToExecute<CleanupEntities>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<CleanupEntities>,std::allocator<ecs2::ForwardToExecute<CleanupEntities>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4275CA0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<CleanupEntities>,std::allocator<ecs2::ForwardToExecute<CleanupEntities>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4275CA0;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<CleanupEntities>,std::allocator<ecs2::ForwardToExecute<CleanupEntities>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  BOOL v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *result;
  char v33;
  _QWORD v34[4];
  int v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::MarkForEntityDeletion>(*(_QWORD *)(a2 + 8));
  v4 = v3;
  v6 = (uint64_t *)v3[7];
  v5 = (uint64_t *)v3[8];
  v7 = (char *)v5 - (char *)v6;
  if (v5 == v6
    || (v8 = *((unsigned int *)v6 + 1), v9 = v3[4], v10 = (v3[5] - v9) >> 3, v8 >> 7 < v10)
    && (v11 = *(_QWORD *)(v9 + 8 * (v8 >> 7))) != 0
    && (v12 = *(unsigned __int16 *)(v11 + 2 * (v8 & 0x7F)), v12 < v7 >> 3)
    && ((v13 = &v6[v12], v13 != v5) ? (v14 = *((_DWORD *)v13 + 1) == (_DWORD)v8) : (v14 = 0), v14))
  {
LABEL_19:
    if (v5 != v6)
    {
      v21 = (uint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
      do
      {
        v23 = *v6;
        *v21 = *v6;
        v24 = *(_QWORD **)(a1 + 8);
        v34[0] = v23;
        v35 = 2;
        ecs2::Runtime::queueCommand(v24, (uint64_t)v34);
        if (v35 != -1)
          ((void (*)(char *, _QWORD *))off_1E42FB340[v35])(&v33, v34);
        v25 = v4[4];
        v26 = v4[7];
        v22 = (uint64_t *)v4[8];
        v27 = v6 + 1;
        while (v27 != v22)
        {
          v28 = *((unsigned int *)v27 + 1);
          v29 = v4[8];
          if (v28 >> 7 < (v4[5] - v25) >> 3)
          {
            v30 = *(_QWORD *)(v25 + 8 * (v28 >> 7));
            v29 = v4[8];
            if (v30)
            {
              v31 = *(unsigned __int16 *)(v30 + 2 * (v28 & 0x7F));
              v29 = v4[8];
              if (((uint64_t)v22 - v26) >> 3 > v31)
              {
                v29 = v26 + 8 * v31;
                if (*(_DWORD *)(v29 + 4) != (_DWORD)v28)
                  v29 = v4[8];
              }
            }
          }
          ++v27;
          if ((uint64_t *)v29 != v22)
          {
            v22 = v27 - 1;
            break;
          }
        }
        v6 = v22;
      }
      while (v5 != v22);
    }
  }
  else
  {
    v15 = v7 >> 3;
    v16 = v6 + 1;
    while (v16 != v5)
    {
      v17 = *((unsigned int *)v16 + 1);
      v18 = (uint64_t *)v3[8];
      if (v17 >> 7 < v10)
      {
        v19 = *(_QWORD *)(v9 + 8 * (v17 >> 7));
        v18 = (uint64_t *)v3[8];
        if (v19)
        {
          v20 = *(unsigned __int16 *)(v19 + 2 * (v17 & 0x7F));
          v18 = (uint64_t *)v3[8];
          if (v15 > v20)
          {
            v18 = &v6[v20];
            if (*((_DWORD *)v18 + 1) != (_DWORD)v17)
              v18 = (uint64_t *)v3[8];
          }
        }
      }
      ++v16;
      if (v18 != v5)
      {
        v6 = v16 - 1;
        goto LABEL_19;
      }
    }
  }
  result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  *result = 0xFFFFFFFF00000000;
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<PrepareFrameForEncode>(PrepareFrameForEncode &&)::{lambda(void)#2},std::allocator<PrepareFrameForEncode &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<PrepareFrameForEncode>(PrepareFrameForEncode &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<PrepareFrameForEncode>(PrepareFrameForEncode &&)::{lambda(void)#2},std::allocator<PrepareFrameForEncode &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<PrepareFrameForEncode>(PrepareFrameForEncode &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4282A38;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<PrepareFrameForEncode>(PrepareFrameForEncode &&)::{lambda(void)#2},std::allocator<PrepareFrameForEncode &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<PrepareFrameForEncode>(PrepareFrameForEncode &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4282A38;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<PrepareFrameForEncode>(PrepareFrameForEncode &&)::{lambda(void)#2},std::allocator<PrepareFrameForEncode &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<PrepareFrameForEncode>(PrepareFrameForEncode &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<PrepareFrameForEncode>(PrepareFrameForEncode &&)::{lambda(void)#1},std::allocator<PrepareFrameForEncode &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<PrepareFrameForEncode>(PrepareFrameForEncode &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<PrepareFrameForEncode>(PrepareFrameForEncode &&)::{lambda(void)#1},std::allocator<PrepareFrameForEncode &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<PrepareFrameForEncode>(PrepareFrameForEncode &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4282A80;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<PrepareFrameForEncode>(PrepareFrameForEncode &&)::{lambda(void)#1},std::allocator<PrepareFrameForEncode &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<PrepareFrameForEncode>(PrepareFrameForEncode &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4282A80;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<PrepareFrameForEncode>(PrepareFrameForEncode &&)::{lambda(void)#1},std::allocator<PrepareFrameForEncode &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<PrepareFrameForEncode>(PrepareFrameForEncode &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x30uLL);
  a1[1] = v2 + 6;
  a1[2] = v2 + 6;
  *v2 = 0x8004EB719AAADA5BLL;
  v2[1] = "md::ita::FrameHandle]";
  *(_QWORD *)&result = 20;
  *((_OWORD *)v2 + 1) = xmmword_19FFB5060;
  v2[4] = "md::ls::RenderTargetToPrepare]";
  v2[5] = 29;
  *a1 = v2;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<PrepareFrameForEncode>,std::allocator<ecs2::ForwardToExecute<PrepareFrameForEncode>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<PrepareFrameForEncode>,std::allocator<ecs2::ForwardToExecute<PrepareFrameForEncode>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4275D30;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<PrepareFrameForEncode>,std::allocator<ecs2::ForwardToExecute<PrepareFrameForEncode>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4275D30;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<PrepareFrameForEncode>,std::allocator<ecs2::ForwardToExecute<PrepareFrameForEncode>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (***v10)();
  uint64_t (***v11)();
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  unint64_t v31;
  uint64_t result;
  _QWORD *v33;
  uint64_t (**v34)();
  uint64_t (***v35)();
  uint64_t v36;
  _QWORD *v37;
  uint64_t (**v38)();
  uint64_t (***v39)();
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t (**v45)();
  uint64_t (***v46)();
  uint64_t v47;
  uint64_t (***v48)();
  uint64_t v49;
  unint64_t v50;
  uint64_t (***v51)();
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v66[4];
  uint64_t (***v67)();
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t (***v71)();
  _QWORD v72[2];
  char v73;
  char v74;
  uint64_t (**v75)();
  __int128 v76;
  uint64_t (***v77)();
  uint64_t (**v78)();
  __int128 v79;
  uint64_t (***v80)();
  int v81;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ita::FrameHandle>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::RenderTargetToPrepare>(v3);
  v6 = v5;
  v7 = v5 + 4;
  if (v5[8] - v5[7] >= v4[8] - v4[7])
    v8 = (uint64_t)(v4 + 4);
  else
    v8 = (uint64_t)(v5 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v68, v8, v4, v5, *(_QWORD *)(v8 + 24));
  if (v6[8] - v6[7] >= v4[8] - v4[7])
    v9 = (uint64_t)(v4 + 4);
  else
    v9 = (uint64_t)v7;
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v66, v9, v4, v6, *(_QWORD *)(v9 + 32));
  if (v67 != v71)
  {
    v11 = (uint64_t (***)())ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    while (1)
    {
      *v11 = *v10;
      v12 = (unint64_t)*v10;
      v13 = v4[4];
      if (v12 >> 39 < (v4[5] - v13) >> 3
        && (v14 = *(_QWORD *)(v13 + 8 * (v12 >> 39))) != 0
        && (v15 = *(unsigned __int16 *)(v14 + 2 * (HIDWORD(v12) & 0x7F)),
            v17 = v4[7],
            v16 = v4[8],
            v15 < (v16 - v17) >> 3)
        && ((v18 = HIDWORD(v12), v19 = v17 + 8 * v15, v19 != v16)
          ? (v20 = *(_DWORD *)(v19 + 4) == (_DWORD)v18)
          : (v20 = 0),
            v20))
      {
        v21 = v4[11];
        v22 = v4[10] + 8 * v15;
      }
      else
      {
        v21 = v4[11];
        v22 = v21;
      }
      if (v22 == v21)
        v23 = 0;
      else
        v23 = (_QWORD *)v22;
      v24 = ***(uint64_t ****)(a1 + 8);
      if (v24 != *(uint64_t **)(**(_QWORD **)(a1 + 8) + 8) && *v24 != 0x8C3843AC816FCBCLL)
      {
        v25 = v24 + 5;
        do
        {
          v26 = *v25;
          v25 += 5;
        }
        while (v26 != 0x8C3843AC816FCBCLL);
        v24 = v25 - 5;
      }
      v27 = v24[3];
      v28 = (std::__shared_weak_count *)v24[4];
      if (v28)
      {
        p_shared_owners = (unint64_t *)&v28->__shared_owners_;
        do
          v30 = __ldxr(p_shared_owners);
        while (__stxr(v30 + 1, p_shared_owners));
        do
          v31 = __ldaxr(p_shared_owners);
        while (__stlxr(v31 - 1, p_shared_owners));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      result = (uint64_t)(*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v27 + 56))(v72, v27, *v23);
      if (!v73)
        goto LABEL_55;
      v33 = *(_QWORD **)(a1 + 8);
      v34 = *v11;
      v75 = &off_1E4281FD0;
      *(_QWORD *)&v76 = v72[1];
      *((_QWORD *)&v76 + 1) = v34;
      v77 = &v75;
      v80 = &v78;
      v78 = &off_1E4281FD0;
      v79 = v76;
      v81 = 0;
      ecs2::Runtime::queueCommand(v33, (uint64_t)&v78);
      if (v81 != -1)
        ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v81])(&v74, &v78);
      v81 = -1;
      v35 = v77;
      if (v77 == &v75)
      {
        v35 = &v75;
        v36 = 4;
      }
      else
      {
        if (!v77)
          goto LABEL_40;
        v36 = 5;
      }
      (*v35)[v36]();
LABEL_40:
      if (!v73)
      {
        std::__throw_bad_optional_access[abi:nn180100]();
        __break(1u);
      }
      v37 = *(_QWORD **)(a1 + 8);
      v38 = *v11;
      v75 = &off_1E4282018;
      *(_QWORD *)&v76 = v72[0];
      *((_QWORD *)&v76 + 1) = v38;
      v77 = &v75;
      v80 = &v78;
      v78 = &off_1E4282018;
      v79 = v76;
      v81 = 0;
      ecs2::Runtime::queueCommand(v37, (uint64_t)&v78);
      if (v81 != -1)
        ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v81])(&v74, &v78);
      v81 = -1;
      v39 = v77;
      if (v77 == &v75)
      {
        v39 = &v75;
        v40 = 4;
      }
      else
      {
        if (!v77)
          goto LABEL_48;
        v40 = 5;
      }
      (*v39)[v40]();
LABEL_48:
      v41 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v27 + 72))(v27, *v23, 3);
      v42 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v27 + 72))(v27, *v23, 0);
      v43 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v27 + 72))(v27, *v23, 1);
      v44 = *(_QWORD **)(a1 + 8);
      v45 = *v11;
      v46 = (uint64_t (***)())operator new(0x28uLL);
      *v46 = &off_1E4281F88;
      v46[1] = (uint64_t (**)())v41;
      v46[2] = (uint64_t (**)())v42;
      v46[3] = (uint64_t (**)())v43;
      v46[4] = v45;
      v80 = v46;
      v77 = 0;
      v81 = 0;
      ecs2::Runtime::queueCommand(v44, (uint64_t)&v78);
      if (v81 != -1)
        ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v81])(&v74, &v78);
      v81 = -1;
      result = (uint64_t)v77;
      if (v77 == &v75)
      {
        result = (uint64_t)&v75;
        v47 = 4;
        goto LABEL_54;
      }
      if (v77)
      {
        v47 = 5;
LABEL_54:
        result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v47))();
      }
LABEL_55:
      v48 = v71;
      v10 = *(uint64_t (****)())(v68 + 32);
      if (++v71 != v10)
      {
        v49 = v69[4];
        v50 = (v69[5] - v49) >> 3;
        v51 = v48 + 2;
        while (1)
        {
          v52 = *((unsigned int *)v51 - 1);
          v53 = v52 >> 7;
          if (v52 >> 7 < v50)
          {
            v54 = *(_QWORD *)(v49 + 8 * v53);
            if (v54)
            {
              v55 = *(unsigned __int16 *)(v54 + 2 * (v52 & 0x7F));
              v56 = v69[7];
              result = v69[8];
              if (v55 < (result - v56) >> 3)
              {
                v57 = v56 + 8 * v55;
                if (v57 != result && *(_DWORD *)(v57 + 4) == (_DWORD)v52)
                {
                  v59 = v70[4];
                  result = v70[5] - v59;
                  if (v53 < result >> 3)
                  {
                    v60 = *(_QWORD *)(v59 + 8 * v53);
                    if (v60)
                    {
                      v61 = *(unsigned __int16 *)(v60 + 2 * (v52 & 0x7F));
                      v63 = v70[7];
                      v62 = v70[8];
                      result = v62 - v63;
                      if (v61 < (v62 - v63) >> 3)
                      {
                        v64 = v63 + 8 * v61;
                        if (v64 != v62 && *(_DWORD *)(v64 + 4) == (_DWORD)v52)
                          break;
                      }
                    }
                  }
                }
              }
            }
          }
          v71 = v51;
          v20 = v51++ == v10;
          if (v20)
            goto LABEL_9;
        }
        v10 = v51 - 1;
      }
LABEL_9:
      if (v67 == v10)
        goto LABEL_77;
    }
  }
  result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  v11 = (uint64_t (***)())result;
LABEL_77:
  *v11 = (uint64_t (**)())0xFFFFFFFF00000000;
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

uint64_t gdc::Registry::storage<md::ita::FrameHandle>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0x8004EB719AAADA5BLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x8004EB719AAADA5BLL;
      if (*(_QWORD *)&v3 <= 0x8004EB719AAADA5BLL)
        v5 = 0x8004EB719AAADA5BLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x8004EB719AAADA5BLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x8004EB719AAADA5BLL)
            {
              if (v7[2] == 0x8004EB719AAADA5BLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x8004EB719AAADA5BLL)
          {
            if (v7[2] == 0x8004EB719AAADA5BLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ita::FrameHandle]";
  *(_QWORD *)(v11 + 24) = 20;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42744D8;
  *(_QWORD *)(v11 + 8) = 0x8004EB719AAADA5BLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x8004EB719AAADA5BLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x8004EB719AAADA5BLL;
  v15[1] = "md::ita::FrameHandle]";
  v15[2] = 20;
  gdc::Registry::_registerStorageDataSignals(a1, 0x8004EB719AAADA5BLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19FA3F57C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::erq::GPUWorkCallbacks>(gdc::Entity,md::erq::GPUWorkCallbacks &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::erq::GPUWorkCallbacks>(gdc::Entity,md::erq::GPUWorkCallbacks &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E4281F88;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::erq::GPUWorkCallbacks>(gdc::Entity,md::erq::GPUWorkCallbacks &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E4281F88;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::erq::GPUWorkCallbacks>(gdc::Entity,md::erq::GPUWorkCallbacks &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  _QWORD *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = (uint64_t *)gdc::Registry::storage<md::erq::GPUWorkCallbacks>(a2);
  v23 = *(_OWORD *)(a1 + 8);
  v24 = *(_QWORD *)(a1 + 24);
  v25 = v3;
  v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v25);
  if ((v6 & 1) != 0)
  {
    v12 = (_QWORD *)v4[11];
    v11 = v4[12];
    if ((unint64_t)v12 >= v11)
    {
      v14 = (_QWORD *)v4[10];
      v15 = 0xAAAAAAAAAAAAAAABLL * (v12 - v14) + 1;
      if (v15 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_30;
      v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (_QWORD)v14) >> 3);
      if (2 * v16 > v15)
        v15 = 2 * v16;
      if (v16 >= 0x555555555555555)
        v17 = 0xAAAAAAAAAAAAAAALL;
      else
        v17 = v15;
      if (v17)
      {
        if (v17 > 0xAAAAAAAAAAAAAAALL)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v18 = (char *)operator new(24 * v17);
      }
      else
      {
        v18 = 0;
      }
      v19 = &v18[8 * (v12 - v14)];
      *(_OWORD *)v19 = v23;
      *((_QWORD *)v19 + 2) = v24;
      v13 = v19 + 24;
      if (v12 != v14)
      {
        do
        {
          v20 = *(_OWORD *)(v12 - 3);
          *((_QWORD *)v19 - 1) = *(v12 - 1);
          *(_OWORD *)(v19 - 24) = v20;
          v19 -= 24;
          v12 -= 3;
        }
        while (v12 != v14);
        v12 = (_QWORD *)v4[10];
      }
      v4[10] = (uint64_t)v19;
      v4[11] = (uint64_t)v13;
      v4[12] = (uint64_t)&v18[24 * v17];
      if (v12)
        operator delete(v12);
    }
    else
    {
      *(_OWORD *)v12 = v23;
      v12[2] = v24;
      v13 = v12 + 3;
    }
    v4[11] = (uint64_t)v13;
    v8 = v4[31];
  }
  else
  {
    v7 = v4[10] + 24 * (((uint64_t)v5 - v4[7]) >> 3);
    *(_OWORD *)v7 = v23;
    *(_QWORD *)(v7 + 16) = v24;
    v8 = v4[31];
    if (v7 != v4[11])
    {
      v9 = (_QWORD *)v4[16];
      if (v9)
      {
        while (1)
        {
          v27 = &v25;
          v28 = 1;
          v26 = v8;
          v10 = v9[6];
          if (!v10)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v10 + 48))(v10, &v26, &v27);
          v9 = (_QWORD *)*v9;
          if (!v9)
            return;
        }
LABEL_29:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_30:
        abort();
      }
      return;
    }
  }
  v21 = (_QWORD *)v4[22];
  if (v21)
  {
    while (1)
    {
      v27 = &v25;
      v28 = 1;
      v26 = v8;
      v22 = v21[6];
      if (!v22)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v22 + 48))(v22, &v26, &v27);
      v21 = (_QWORD *)*v21;
      if (!v21)
        return;
    }
    goto LABEL_29;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::erq::RenderTargetToSubmit>(gdc::Entity,md::erq::RenderTargetToSubmit &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::erq::RenderTargetToSubmit>(gdc::Entity,md::erq::RenderTargetToSubmit &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E4282018;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::erq::RenderTargetToSubmit>(gdc::Entity,md::erq::RenderTargetToSubmit &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E4282018;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::erq::RenderTargetToSubmit>(gdc::Entity,md::erq::RenderTargetToSubmit &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::erq::RenderTargetToSubmit>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_36;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 == v15)
      {
        v15 = v13;
      }
      else
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_40;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_40;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
          v15 = (char *)v4[10];
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + v4[10] - v4[7]);
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_QWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_35;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::erq::RenderQueueToSubmit>(gdc::Entity,md::erq::RenderQueueToSubmit &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::erq::RenderQueueToSubmit>(gdc::Entity,md::erq::RenderQueueToSubmit &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E4281FD0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::erq::RenderQueueToSubmit>(gdc::Entity,md::erq::RenderQueueToSubmit &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E4281FD0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::erq::RenderQueueToSubmit>(gdc::Entity,md::erq::RenderQueueToSubmit &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::erq::RenderQueueToSubmit>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_36;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 == v15)
      {
        v15 = v13;
      }
      else
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_40;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_40;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
          v15 = (char *)v4[10];
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + v4[10] - v4[7]);
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_QWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_35;
  }
}

BOOL gdc::ComponentStorageWrapper<md::ls::RenderTargetToPrepare>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RenderTargetToPrepare>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RenderTargetToPrepare>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ita::FrameHandle>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ita::FrameHandle>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ita::FrameHandle>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ita::FrameHandle>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<PrepareFrameForRender>(PrepareFrameForRender &&)::{lambda(void)#2},std::allocator<PrepareFrameForRender &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<PrepareFrameForRender>(PrepareFrameForRender &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<PrepareFrameForRender>(PrepareFrameForRender &&)::{lambda(void)#2},std::allocator<PrepareFrameForRender &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<PrepareFrameForRender>(PrepareFrameForRender &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4282AC8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<PrepareFrameForRender>(PrepareFrameForRender &&)::{lambda(void)#2},std::allocator<PrepareFrameForRender &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<PrepareFrameForRender>(PrepareFrameForRender &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4282AC8;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<PrepareFrameForRender>(PrepareFrameForRender &&)::{lambda(void)#2},std::allocator<PrepareFrameForRender &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<PrepareFrameForRender>(PrepareFrameForRender &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md3ita11FrameHandleEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19FA400EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md3ita11FrameHandleEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;

  v3 = a1[1];
  v2 = (unint64_t)a1[2];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
    v7 = v6 + 1;
    if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2 - (_QWORD)v5) >> 3);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0x555555555555555)
      v9 = 0xAAAAAAAAAAAAAAALL;
    else
      v9 = v7;
    if (v9)
    {
      if (v9 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v10 = (char *)operator new(24 * v9);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[24 * v6];
    *(_QWORD *)v11 = 0x8004EB719AAADA5BLL;
    *((_QWORD *)v11 + 1) = "md::ita::FrameHandle]";
    *((_QWORD *)v11 + 2) = 20;
    v4 = v11 + 24;
    if (v3 != v5)
    {
      do
      {
        v12 = *(_OWORD *)(v3 - 24);
        *((_QWORD *)v11 - 1) = *((_QWORD *)v3 - 1);
        *(_OWORD *)(v11 - 24) = v12;
        v11 -= 24;
        v3 -= 24;
      }
      while (v3 != v5);
      v3 = *a1;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = &v10[24 * v9];
    if (v3)
      operator delete(v3);
  }
  else
  {
    *(_QWORD *)v3 = 0x8004EB719AAADA5BLL;
    *((_QWORD *)v3 + 1) = "md::ita::FrameHandle]";
    *((_QWORD *)v3 + 2) = 20;
    v4 = v3 + 24;
  }
  a1[1] = v4;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<PrepareFrameForRender>(PrepareFrameForRender &&)::{lambda(void)#1},std::allocator<PrepareFrameForRender &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<PrepareFrameForRender>(PrepareFrameForRender &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<PrepareFrameForRender>(PrepareFrameForRender &&)::{lambda(void)#1},std::allocator<PrepareFrameForRender &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<PrepareFrameForRender>(PrepareFrameForRender &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4282B10;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<PrepareFrameForRender>(PrepareFrameForRender &&)::{lambda(void)#1},std::allocator<PrepareFrameForRender &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<PrepareFrameForRender>(PrepareFrameForRender &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4282B10;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<PrepareFrameForRender>(PrepareFrameForRender &&)::{lambda(void)#1},std::allocator<PrepareFrameForRender &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<PrepareFrameForRender>(PrepareFrameForRender &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ForwardToExecute<PrepareFrameForRender>,std::allocator<ecs2::ForwardToExecute<PrepareFrameForRender>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<PrepareFrameForRender>,std::allocator<ecs2::ForwardToExecute<PrepareFrameForRender>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4275D78;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<PrepareFrameForRender>,std::allocator<ecs2::ForwardToExecute<PrepareFrameForRender>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4275D78;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<PrepareFrameForRender>,std::allocator<ecs2::ForwardToExecute<PrepareFrameForRender>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t *v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  BOOL v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  BOOL v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  unint64_t v41;
  char v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t (***v45)();
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  _QWORD *result;
  char v55;
  uint64_t (**v56)();
  __int128 v57;
  uint64_t (***v58)();
  uint64_t (**v59)();
  __int128 v60;
  uint64_t (***v61)();
  int v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v3 = (_QWORD *)gdc::Registry::storage<md::ita::FrameHandle>(*(_QWORD *)(a2 + 8));
  v4 = v3;
  v6 = (unint64_t *)v3[7];
  v5 = (uint64_t *)v3[8];
  v7 = (char *)v5 - (char *)v6;
  if (v5 != (uint64_t *)v6)
  {
    if ((v8 = *((unsigned int *)v6 + 1), v9 = v3[4], v10 = (v3[5] - v9) >> 3, v8 >> 7 >= v10)
      || (v11 = *(_QWORD *)(v9 + 8 * (v8 >> 7))) == 0
      || (v12 = *(unsigned __int16 *)(v11 + 2 * (v8 & 0x7F)), v12 >= v7 >> 3)
      || ((v13 = (uint64_t *)&v6[v12], v13 != v5) ? (v14 = *((_DWORD *)v13 + 1) == (_DWORD)v8) : (v14 = 0), !v14))
    {
      v15 = v7 >> 3;
      v16 = (uint64_t *)(v6 + 1);
      do
      {
        if (v16 == v5)
          goto LABEL_60;
        v17 = *((unsigned int *)v16 + 1);
        v18 = (uint64_t *)v3[8];
        if (v17 >> 7 < v10)
        {
          v19 = *(_QWORD *)(v9 + 8 * (v17 >> 7));
          v18 = (uint64_t *)v3[8];
          if (v19)
          {
            v20 = *(unsigned __int16 *)(v19 + 2 * (v17 & 0x7F));
            v18 = (uint64_t *)v3[8];
            if (v15 > v20)
            {
              v18 = (uint64_t *)&v6[v20];
              if (*((_DWORD *)v18 + 1) != (_DWORD)v17)
                v18 = (uint64_t *)v3[8];
            }
          }
        }
        ++v16;
      }
      while (v18 == v5);
      v6 = (unint64_t *)(v16 - 1);
    }
  }
  if (v5 != (uint64_t *)v6)
  {
    v21 = (uint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    do
    {
      *v21 = *v6;
      v23 = *v6;
      v24 = *v6 >> 39;
      v25 = v4[4];
      if (v24 < (v4[5] - v25) >> 3
        && (v26 = *(_QWORD *)(v25 + 8 * v24)) != 0
        && (v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v23) & 0x7F)),
            v29 = v4[7],
            v28 = v4[8],
            v27 < (v28 - v29) >> 3)
        && ((v30 = HIDWORD(v23), v31 = v29 + 8 * v27, v31 != v28)
          ? (v32 = *(_DWORD *)(v31 + 4) == (_DWORD)v30)
          : (v32 = 0),
            v32))
      {
        v33 = (_QWORD *)(v4[10] + 8 * v27);
      }
      else
      {
        v33 = (_QWORD *)v4[11];
      }
      v34 = ***(uint64_t ****)(a1 + 8);
      if (v34 != *(uint64_t **)(**(_QWORD **)(a1 + 8) + 8) && *v34 != 0x8C3843AC816FCBCLL)
      {
        v35 = v34 + 5;
        do
        {
          v36 = *v35;
          v35 += 5;
        }
        while (v36 != 0x8C3843AC816FCBCLL);
        v34 = v35 - 5;
      }
      v37 = v34[3];
      v38 = (std::__shared_weak_count *)v34[4];
      if (v38)
      {
        p_shared_owners = (unint64_t *)&v38->__shared_owners_;
        do
          v40 = __ldxr(p_shared_owners);
        while (__stxr(v40 + 1, p_shared_owners));
        do
          v41 = __ldaxr(p_shared_owners);
        while (__stlxr(v41 - 1, p_shared_owners));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v37 + 48))(v37, *v33);
      if (v42)
      {
        v43 = *(_QWORD **)(a1 + 8);
        v44 = *v21;
        v56 = &off_1E427F630;
        *(_QWORD *)&v57 = 0;
        *((_QWORD *)&v57 + 1) = v44;
        v58 = &v56;
        v61 = &v59;
        v59 = &off_1E427F630;
        v60 = v57;
        v62 = 0;
        ecs2::Runtime::queueCommand(v43, (uint64_t)&v59);
        if (v62 != -1)
          ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v62])(&v55, &v59);
        v62 = -1;
        v45 = v58;
        if (v58 == &v56)
        {
          v45 = &v56;
          v46 = 4;
        }
        else
        {
          if (!v58)
            goto LABEL_50;
          v46 = 5;
        }
        (*v45)[v46]();
      }
LABEL_50:
      v47 = v4[4];
      v48 = v4[7];
      v22 = (uint64_t *)v4[8];
      v49 = (uint64_t *)(v6 + 1);
      while (v49 != v22)
      {
        v50 = *((unsigned int *)v49 + 1);
        v51 = v4[8];
        if (v50 >> 7 < (v4[5] - v47) >> 3)
        {
          v52 = *(_QWORD *)(v47 + 8 * (v50 >> 7));
          v51 = v4[8];
          if (v52)
          {
            v53 = *(unsigned __int16 *)(v52 + 2 * (v50 & 0x7F));
            v51 = v4[8];
            if (((uint64_t)v22 - v48) >> 3 > v53)
            {
              v51 = v48 + 8 * v53;
              if (*(_DWORD *)(v51 + 4) != (_DWORD)v50)
                v51 = v4[8];
            }
          }
        }
        ++v49;
        if ((uint64_t *)v51 != v22)
        {
          v22 = v49 - 1;
          break;
        }
      }
      v6 = (unint64_t *)v22;
    }
    while (v5 != v22);
  }
LABEL_60:
  result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  *result = 0xFFFFFFFF00000000;
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderTargetToPrepare>(gdc::Entity,md::ls::RenderTargetToPrepare &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderTargetToPrepare>(gdc::Entity,md::ls::RenderTargetToPrepare &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427F630;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderTargetToPrepare>(gdc::Entity,md::ls::RenderTargetToPrepare &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427F630;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderTargetToPrepare>(gdc::Entity,md::ls::RenderTargetToPrepare &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::RenderTargetToPrepare>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_36;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 == v15)
      {
        v15 = v13;
      }
      else
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_40;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_40;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
          v15 = (char *)v4[10];
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + v4[10] - v4[7]);
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_QWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_35;
  }
}

void sub_19FA41074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{

  _Unwind_Resume(a1);
}

void sub_19FA412CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19FA41370(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19FA41714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_19FA41934(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19FA41A14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FA41A9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19FA41BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_19FA41DC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19FA41F54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19FA422E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_19FA42558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19FA42660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19FA42834(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ggl::GlobeAtmosphere::BasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF680;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::GlobeAtmosphere::BasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF680;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::GlobeStars::StarsPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE688;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::GlobeStars::StarsPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE688;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void md::GlobeSkyRenderResources::~GlobeSkyRenderResources(md::GlobeSkyRenderResources *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;

  v2 = *((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 27);
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v6 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
    if (!v6)
      goto LABEL_13;
  }
  else
  {
LABEL_7:
    v6 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
    if (!v6)
      goto LABEL_13;
  }
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_13:
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
  if (!v9)
    goto LABEL_17;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    v12 = (std::__shared_weak_count *)*((_QWORD *)this + 21);
    if (!v12)
      goto LABEL_23;
  }
  else
  {
LABEL_17:
    v12 = (std::__shared_weak_count *)*((_QWORD *)this + 21);
    if (!v12)
      goto LABEL_23;
  }
  v13 = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
LABEL_23:
  v15 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
  if (!v15)
    goto LABEL_27;
  v16 = (unint64_t *)&v15->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    v18 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
    if (!v18)
      goto LABEL_33;
  }
  else
  {
LABEL_27:
    v18 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
    if (!v18)
      goto LABEL_33;
  }
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
LABEL_33:
  v21 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  v25 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
  if (!v25)
    goto LABEL_44;
  v26 = (unint64_t *)&v25->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
    v28 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
    if (!v28)
      goto LABEL_50;
  }
  else
  {
LABEL_44:
    v28 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
    if (!v28)
      goto LABEL_50;
  }
  v29 = (unint64_t *)&v28->__shared_owners_;
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
LABEL_50:
  v31 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
  if (!v31)
    goto LABEL_54;
  v32 = (unint64_t *)&v31->__shared_owners_;
  do
    v33 = __ldaxr(v32);
  while (__stlxr(v33 - 1, v32));
  if (!v33)
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
    v34 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
    if (!v34)
      goto LABEL_60;
  }
  else
  {
LABEL_54:
    v34 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
    if (!v34)
      goto LABEL_60;
  }
  v35 = (unint64_t *)&v34->__shared_owners_;
  do
    v36 = __ldaxr(v35);
  while (__stlxr(v36 - 1, v35));
  if (!v36)
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
  }
LABEL_60:
  v37 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  if (!v37)
    goto LABEL_64;
  v38 = (unint64_t *)&v37->__shared_owners_;
  do
    v39 = __ldaxr(v38);
  while (__stlxr(v39 - 1, v38));
  if (v39)
  {
LABEL_64:
    if ((*((char *)this + 23) & 0x80000000) == 0)
      return;
    goto LABEL_65;
  }
  ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
  std::__shared_weak_count::__release_weak(v37);
  if (*((char *)this + 23) < 0)
LABEL_65:
    operator delete(*(void **)this);
}

uint64_t md::GlobeSkyRenderResources::loadStarsModel(std::__shared_weak_count **this)
{
  char *v2;
  int v3;
  md::GlobeSkyRenderResources *v4;
  size_t v5;
  char **v6;
  int v7;
  char *v8;
  size_t v9;
  size_t v10;
  int v11;
  int v12;
  char *v13;
  size_t v14;
  size_t v15;
  uint64_t v16;
  _QWORD *v17;
  unsigned __int8 v18;
  char *v19;
  unsigned __int8 v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  float *v27;
  uint64_t v28;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36;
  int32x2_t v37;
  uint64_t v38;
  __int128 v39;
  unsigned __int8 v40;
  uint64_t *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  float *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  float v59;
  unint64_t v60;
  uint64_t v61;
  BOOL v62;
  BOOL v63;
  BOOL v64;
  BOOL v65;
  BOOL v66;
  BOOL v67;
  unint64_t v68;
  float32x2_t v69;
  float32x2_t v70;
  const float *v71;
  float *v72;
  unint64_t v73;
  __float2 v74;
  __float2 v75;
  __float2 v76;
  __float2 v77;
  float32x2_t v78;
  int v79;
  unsigned int v80;
  float *v81;
  __float2 v82;
  __float2 v83;
  float v84;
  float *v85;
  unint64_t v86;
  unsigned __int8 v87;
  uint64_t v88;
  geo::read_write_lock *v89;
  const char *v90;
  malloc_zone_t *zone;
  uint64_t v92;
  geo::read_write_lock *v93;
  const char *v94;
  malloc_zone_t *v95;
  uint64_t v96;
  geo::read_write_lock *v97;
  const char *v98;
  malloc_zone_t *v99;
  uint64_t v100;
  int v101;
  int v102;
  uint64_t v103;
  geo::read_write_lock *v104;
  const char *v105;
  malloc_zone_t *v106;
  float v107;
  float32x2_t v108;
  float32x2_t v109;
  float v110;
  uint64_t v111;
  char **v112;
  char *v113[3];
  char *v114[2];
  float *v115;
  float *v116;
  uint64_t v117;
  float32x2x3_t v118;
  float32x2x4_t v119;

  v115 = 0;
  v116 = 0;
  v117 = 0;
  v112 = v113;
  v113[0] = 0;
  v114[0] = 0;
  v114[1] = 0;
  v113[1] = 0;
  v113[2] = (char *)v114;
  if (!karo::media::ZipLoader::loadFromChunk((uint64_t)this, (uint64_t)&bundleDataBuffer, 0x60AE6uLL, (uint64_t)&v112))goto LABEL_43;
  v2 = v113[0];
  if (!v113[0])
    goto LABEL_43;
  v3 = *((char *)this + 23);
  if (v3 >= 0)
    v4 = (md::GlobeSkyRenderResources *)this;
  else
    v4 = (md::GlobeSkyRenderResources *)*this;
  if (v3 >= 0)
    v5 = *((unsigned __int8 *)this + 23);
  else
    v5 = (size_t)this[1];
  v6 = v113;
  do
  {
    while (1)
    {
      v7 = v2[55];
      v8 = v7 >= 0 ? v2 + 32 : (char *)*((_QWORD *)v2 + 4);
      v9 = v7 >= 0 ? v2[55] : *((_QWORD *)v2 + 5);
      v10 = v5 >= v9 ? v9 : v5;
      v11 = memcmp(v8, v4, v10);
      if (v11)
        break;
      if (v9 >= v5)
        goto LABEL_24;
LABEL_10:
      v2 = (char *)*((_QWORD *)v2 + 1);
      if (!v2)
        goto LABEL_25;
    }
    if (v11 < 0)
      goto LABEL_10;
LABEL_24:
    v6 = (char **)v2;
    v2 = *(char **)v2;
  }
  while (v2);
LABEL_25:
  if (v6 == v113)
    goto LABEL_43;
  v12 = *((char *)v6 + 55);
  if (v12 >= 0)
    v13 = (char *)(v6 + 4);
  else
    v13 = v6[4];
  if (v12 >= 0)
    v14 = *((unsigned __int8 *)v6 + 55);
  else
    v14 = (size_t)v6[5];
  if (v14 >= v5)
    v15 = v5;
  else
    v15 = v14;
  v16 = memcmp(v4, v13, v15);
  if (!(_DWORD)v16)
  {
    if (v5 >= v14)
      goto LABEL_37;
    goto LABEL_43;
  }
  if ((v16 & 0x80000000) != 0)
  {
LABEL_43:
    v27 = 0;
    v28 = 0;
    goto LABEL_44;
  }
LABEL_37:
  karo::media::SkyLoader::loadFromChunk(v16, (uint64_t)v6[7], *((_DWORD *)v6 + 16) - v6[7], (char **)&v115);
  v17 = operator new(0xA8uLL);
  v17[1] = 0;
  v17[2] = 0;
  *v17 = &off_1E42DE6C0;
  if ((v18 & 1) == 0
  {
    if ((v87 & 1) == 0
    {
      ggl::MeshTyped<ggl::GlobeStars::StarVertex>::attributesReflection(void)::r = (uint64_t)&ggl::GlobeStars::starVertexReflection;
    }
    ggl::MeshTyped<ggl::GlobeStars::StarVertex>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::GlobeStars::StarVertex>::attributesReflection(void)::r;
    unk_1ECE44D60 = 1;
  }
  v17[11] = 0;
  v19 = (char *)(v17 + 11);
  v17[7] = 0;
  v17[8] = 0;
  *((_DWORD *)v17 + 18) = 0;
  v17[3] = &off_1E42BBC08;
  v17[4] = "/Stars/Mesh";
  v17[5] = &unk_1E42BBC28;
  v17[6] = 0;
  v17[10] = &ggl::MeshTyped<ggl::GlobeStars::StarVertex>::typedReflection(void)::r;
  v17[12] = 0;
  v17[13] = 0;
  {
    v88 = operator new();
    *(_QWORD *)(v88 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v88 + 24) = "GeoGL";
    *(_OWORD *)(v88 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v88 = &off_1E42B5668;
    *(_QWORD *)(v88 + 8) = "GeoGL";
    *(_OWORD *)(v88 + 72) = 0u;
    *(_OWORD *)(v88 + 88) = 0u;
    *(_OWORD *)(v88 + 104) = 0u;
    *(_OWORD *)(v88 + 120) = 0u;
    *(_OWORD *)(v88 + 136) = 0u;
    *(_OWORD *)(v88 + 152) = 0u;
    *(_OWORD *)(v88 + 168) = 0u;
    *(_OWORD *)(v88 + 184) = 0u;
    *(_OWORD *)(v88 + 200) = 0u;
    *(_OWORD *)(v88 + 216) = 0u;
    *(_OWORD *)(v88 + 232) = 0u;
    *(_QWORD *)(v88 + 248) = 0;
    *(_OWORD *)(v88 + 56) = 0u;
    v89 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v88 + 56), 0);
    if ((_DWORD)v89)
      geo::read_write_lock::logFailure(v89, (uint64_t)"initialization", v90);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v88 + 48) = zone;
    malloc_set_zone_name(zone, "GeoGL");
    *(_QWORD *)(v88 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v88;
  }
  v21 = ggl::Allocator::instance(void)::alloc;
  v17[18] = 0;
  v17[15] = 0;
  v17[16] = 0;
  v17[14] = v21;
  {
    v92 = operator new();
    *(_QWORD *)(v92 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v92 + 24) = "GeoGL";
    *(_OWORD *)(v92 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v92 = &off_1E42B5668;
    *(_QWORD *)(v92 + 8) = "GeoGL";
    *(_OWORD *)(v92 + 72) = 0u;
    *(_OWORD *)(v92 + 88) = 0u;
    *(_OWORD *)(v92 + 104) = 0u;
    *(_OWORD *)(v92 + 120) = 0u;
    *(_OWORD *)(v92 + 136) = 0u;
    *(_OWORD *)(v92 + 152) = 0u;
    *(_OWORD *)(v92 + 168) = 0u;
    *(_OWORD *)(v92 + 184) = 0u;
    *(_OWORD *)(v92 + 200) = 0u;
    *(_OWORD *)(v92 + 216) = 0u;
    *(_OWORD *)(v92 + 232) = 0u;
    *(_QWORD *)(v92 + 248) = 0;
    *(_OWORD *)(v92 + 56) = 0u;
    v93 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v92 + 56), 0);
    if ((_DWORD)v93)
      geo::read_write_lock::logFailure(v93, (uint64_t)"initialization", v94);
    v95 = malloc_create_zone(0, 0);
    *(_QWORD *)(v92 + 48) = v95;
    malloc_set_zone_name(v95, "GeoGL");
    *(_QWORD *)(v92 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v92;
  }
  v17[19] = ggl::Allocator::instance(void)::alloc;
  v17[20] = 0;
  v17[17] = v17 + 18;
  v17[3] = &off_1E42BD278;
  v17[5] = &unk_1E42BD298;
  v22 = v17[11];
  v23 = *(_QWORD *)(v17[10] + 8);
  v24 = v17[12];
  v25 = (v24 - v22) >> 4;
  v26 = v23 - v25;
  if (v23 <= v25)
  {
    if (v23 < v25)
    {
      v30 = v22 + 16 * v23;
      while (v24 != v30)
      {
        v31 = *(std::__shared_weak_count **)(v24 - 8);
        if (v31)
        {
          p_shared_owners = (unint64_t *)&v31->__shared_owners_;
          do
            v33 = __ldaxr(p_shared_owners);
          while (__stlxr(v33 - 1, p_shared_owners));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *, unint64_t))v31->__on_zero_shared)(v31, v26);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
        v24 -= 16;
      }
      v17[12] = v30;
    }
  }
  else
  {
    std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__append((uint64_t)(v17 + 11), v26);
  }
  v17[3] = &off_1E42B58F8;
  v17[5] = &unk_1E42B5918;
  {
    v96 = operator new();
    *(_QWORD *)(v96 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v96 + 24) = "GeoGL";
    *(_OWORD *)(v96 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v96 = &off_1E42B5668;
    *(_QWORD *)(v96 + 8) = "GeoGL";
    *(_OWORD *)(v96 + 72) = 0u;
    *(_OWORD *)(v96 + 88) = 0u;
    *(_OWORD *)(v96 + 104) = 0u;
    *(_OWORD *)(v96 + 120) = 0u;
    *(_OWORD *)(v96 + 136) = 0u;
    *(_OWORD *)(v96 + 152) = 0u;
    *(_OWORD *)(v96 + 168) = 0u;
    *(_OWORD *)(v96 + 184) = 0u;
    *(_OWORD *)(v96 + 200) = 0u;
    *(_OWORD *)(v96 + 216) = 0u;
    *(_OWORD *)(v96 + 232) = 0u;
    *(_QWORD *)(v96 + 248) = 0;
    *(_OWORD *)(v96 + 56) = 0u;
    v97 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v96 + 56), 0);
    if ((_DWORD)v97)
      geo::read_write_lock::logFailure(v97, (uint64_t)"initialization", v98);
    v99 = malloc_create_zone(0, 0);
    *(_QWORD *)(v96 + 48) = v99;
    malloc_set_zone_name(v99, "GeoGL");
    *(_QWORD *)(v96 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v96;
  }
  v35 = ggl::Allocator::instance(void)::alloc;
  v36 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)ggl::Allocator::instance(void)::alloc + 16))(ggl::Allocator::instance(void)::alloc, 256, 8);
  *(_QWORD *)v36 = &off_1E42DF9C8;
  *(_QWORD *)(v36 + 8) = 0;
  *(_QWORD *)(v36 + 32) = &off_1E42B5748;
  v38 = v36 + 32;
  *(_QWORD *)(v36 + 16) = 0;
  *(_QWORD *)(v36 + 24) = v35;
  *(_QWORD *)(v36 + 40) = 16;
  *(_DWORD *)(v36 + 48) = 6;
  v39 = 0uLL;
  *(_OWORD *)(v36 + 56) = 0u;
  *(_OWORD *)(v36 + 72) = 0u;
  *(_OWORD *)(v36 + 88) = 0u;
  *(_OWORD *)(v36 + 104) = 0u;
  *(_QWORD *)(v36 + 120) = 0;
  if ((v40 & 1) == 0)
  {
    v111 = v36;
    v100 = v36 + 32;
    v39 = 0uLL;
    v38 = v100;
    v102 = v101;
    v36 = v111;
    if (v102)
    {
      v103 = operator new();
      *(_QWORD *)(v103 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v103 + 24) = "GeoGL";
      *(_OWORD *)(v103 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v103 = &off_1E42B5668;
      *(_QWORD *)(v103 + 8) = "GeoGL";
      *(_OWORD *)(v103 + 72) = 0u;
      *(_OWORD *)(v103 + 88) = 0u;
      *(_OWORD *)(v103 + 104) = 0u;
      *(_OWORD *)(v103 + 120) = 0u;
      *(_OWORD *)(v103 + 136) = 0u;
      *(_OWORD *)(v103 + 152) = 0u;
      *(_OWORD *)(v103 + 168) = 0u;
      *(_OWORD *)(v103 + 184) = 0u;
      *(_OWORD *)(v103 + 200) = 0u;
      *(_OWORD *)(v103 + 216) = 0u;
      *(_OWORD *)(v103 + 232) = 0u;
      *(_QWORD *)(v103 + 248) = 0;
      *(_OWORD *)(v103 + 56) = 0u;
      v104 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v103 + 56), 0);
      if ((_DWORD)v104)
        geo::read_write_lock::logFailure(v104, (uint64_t)"initialization", v105);
      v106 = malloc_create_zone(0, 0);
      *(_QWORD *)(v103 + 48) = v106;
      malloc_set_zone_name(v106, "GeoGL");
      *(_QWORD *)(v103 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v103;
      v36 = v111;
      v38 = v100;
      v39 = 0uLL;
    }
  }
  *(_QWORD *)(v36 + 128) = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(v36 + 136) = 0;
  *(_OWORD *)(v36 + 200) = v39;
  *(_OWORD *)(v36 + 184) = v39;
  *(_OWORD *)(v36 + 168) = v39;
  *(_QWORD *)(v36 + 216) = 0;
  *(_QWORD *)(v36 + 224) = -1;
  *(_OWORD *)(v36 + 152) = xmmword_19FFB2DD0;
  *(_DWORD *)(v36 + 144) = 0;
  *(_QWORD *)(v36 + 240) = "/Stars/Mesh";
  *(_QWORD *)(v36 + 248) = &ggl::GlobeStars::starVertexReflection;
  *(_QWORD *)(v36 + 32) = &off_1E42B75E0;
  *(_QWORD *)(v36 + 232) = &unk_1E42B7600;
  v41 = *(uint64_t **)v19;
  v42 = *(std::__shared_weak_count **)(*(_QWORD *)v19 + 8);
  *v41 = v38;
  v41[1] = v36;
  if (v42)
  {
    v43 = (unint64_t *)&v42->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v45 = this[6];
  this[5] = (std::__shared_weak_count *)(v17 + 3);
  this[6] = (std::__shared_weak_count *)v17;
  if (v45)
  {
    v46 = (unint64_t *)&v45->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  v48 = *(_QWORD *)this[5][2].__shared_weak_owners_;
  v27 = v115;
  v49 = v116;
  v50 = 0xAAAAAAAAAAAAAAABLL * (v116 - v115);
  v51 = *(_QWORD *)(v48 + 8) * v50;
  v52 = *(_QWORD *)(v48 + 72);
  v53 = *(_QWORD *)(v48 + 80) - v52;
  if (v51 != v53)
  {
    if (v51 <= v53)
    {
      if (v51 < v53)
        *(_QWORD *)(v48 + 80) = v52 + v51;
    }
    else
    {
      std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v48 + 72, v51 - v53);
    }
    v54 = *(std::__shared_weak_count **)(v48 + 32);
    *(_QWORD *)(v48 + 24) = 0;
    *(_QWORD *)(v48 + 32) = 0;
    if (v54)
    {
      v55 = (unint64_t *)&v54->__shared_owners_;
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
    *(_QWORD *)(v48 + 120) = 0;
    *(_DWORD *)(v48 + 112) = 0;
    v57 = *(_QWORD *)(v48 + 80) - *(_QWORD *)(v48 + 72);
    *(_QWORD *)(v48 + 40) = 0;
    *(_QWORD *)(v48 + 48) = v57;
    *(_QWORD *)(v48 + 56) = 0;
    *(_QWORD *)(v48 + 64) = v57;
    v48 = *(_QWORD *)this[5][2].__shared_weak_owners_;
    v27 = v115;
    v49 = v116;
    v50 = 0xAAAAAAAAAAAAAAABLL * (v116 - v115);
    v51 = *(_QWORD *)(v48 + 8) * v50;
  }
  if (v51)
  {
    v58 = *(_QWORD *)(v48 + 72);
    if (v49 == v27)
      goto LABEL_117;
  }
  else
  {
    v58 = 0;
    if (v49 == v27)
      goto LABEL_117;
  }
  *(float *)v37.i32 = v27[3 * v50 - 1];
  v59 = *(float *)v37.i32 - v27[2];
  if (v50 <= 1)
    v60 = 1;
  else
    v60 = v50;
  v110 = v27[3 * v50 - 1];
  if (v60 > 7
    && ((v61 = 16 * (v60 - 1), v58 + v61 >= v58) ? (v62 = v58 + 4 + v61 >= v58 + 4) : (v62 = 0),
        v62 ? (v63 = v58 + 12 + v61 >= v58 + 12) : (v63 = 0),
        v63 ? (v64 = v58 + 8 + v61 >= v58 + 8) : (v64 = 0),
        v64 ? (v65 = (_DWORD)v60 == 0x100000000) : (v65 = 1),
        !v65 ? (v66 = (v60 - 1) >> 32 == 0) : (v66 = 0),
        v66
     && (v58 < (unint64_t)&v27[3 * v60] ? (v67 = (unint64_t)v27 >= v58 + 16 * v60) : (v67 = 1), v67)))
  {
    v68 = v60 & 0xFFFFFFFFFFFFFFFELL;
    v69 = (float32x2_t)vdup_lane_s32(v37, 0);
    v70 = (float32x2_t)vdup_n_s32(0x4B189680u);
    v71 = v27;
    v72 = (float *)v58;
    v73 = v60 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      v118 = vld3_f32(v71);
      v71 += 6;
      v107 = v118.val[0].f32[0];
      v108 = v118.val[1];
      v109 = v118.val[2];
      v74 = __sincosf_stret(v118.val[0].f32[1]);
      v75 = __sincosf_stret(v107);
      v76 = __sincosf_stret(v108.f32[1]);
      v77 = __sincosf_stret(v108.f32[0]);
      v78 = vmul_f32((float32x2_t)__PAIR64__(LODWORD(v76.__cosval), LODWORD(v77.__cosval)), v70);
      v119.val[0] = vmul_f32(v78, (float32x2_t)__PAIR64__(LODWORD(v74.__cosval), LODWORD(v75.__cosval)));
      v119.val[1] = vmul_f32(v78, (float32x2_t)__PAIR64__(LODWORD(v74.__sinval), LODWORD(v75.__sinval)));
      v119.val[2] = vmul_f32((float32x2_t)__PAIR64__(LODWORD(v76.__sinval), LODWORD(v77.__sinval)), v70);
      v119.val[3] = vmul_n_f32(vsub_f32(v69, v109), 2.0 / v59);
      vst4_f32(v72, v119);
      v72 += 8;
      v73 -= 2;
    }
    while (v73);
    v79 = v60 & 0xFFFFFFFE;
    if (v60 == v68)
      goto LABEL_117;
  }
  else
  {
    v68 = 0;
    v79 = 0;
  }
  v80 = v79 + 1;
  do
  {
    v81 = &v27[3 * v68];
    v82 = __sincosf_stret(*v81);
    v83 = __sincosf_stret(v81[1]);
    v84 = (float)(v110 - v81[2]) * (float)((float)(1.0 / v59) + (float)(1.0 / v59));
    v85 = (float *)(v58 + 16 * v68);
    *v85 = (float)(v83.__cosval * 10000000.0) * v82.__cosval;
    v85[1] = (float)(v83.__cosval * 10000000.0) * v82.__sinval;
    v85[2] = v83.__sinval * 10000000.0;
    v85[3] = v84;
    v68 = v80++;
  }
  while (v50 > v68);
LABEL_117:
  v28 = 1;
  if (v58 && v51)
  {
    v86 = *(_QWORD *)(v48 + 64);
    if (v86 <= v51)
      v86 = v51;
    *(_QWORD *)(v48 + 56) = 0;
    *(_QWORD *)(v48 + 64) = v86;
  }
LABEL_44:
  std::__tree<std::string>::destroy(v114[0]);
  std::__tree<std::__value_type<std::string,std::vector<unsigned char>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned char>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned char>>>>::destroy(v113[0]);
  if (v27)
  {
    v116 = v27;
    operator delete(v27);
  }
  return v28;
}

void sub_19FA437F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char *a34,uint64_t a35,uint64_t a36,char *a37)
{
  uint64_t v37;
  void *v39;

  std::__tree<std::string>::destroy(a37);
  std::__tree<std::__value_type<std::string,std::vector<unsigned char>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned char>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned char>>>>::destroy(a34);
  v39 = *(void **)(v37 - 144);
  if (v39)
    operator delete(v39);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ggl::GlobeStars::StarsMesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE6C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::GlobeStars::StarsMesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE6C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::GlobeStars::StarsMesh>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void md::GlobeSkyRenderResources::buildAtmosphereModel(md::GlobeSkyRenderResources *this)
{
  _QWORD *v2;
  unsigned __int8 v3;
  char *v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  unsigned __int8 v21;
  uint64_t *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  float *v41;
  __double2 v42;
  float cosval;
  float sinval;
  _QWORD *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __n128 v54;
  __n128 v55;
  __n128 v56;
  __n128 v57;
  __n128 v58;
  uint64x2_t v59;
  int64x2_t v60;
  int16x8_t v61;
  int16x8_t v62;
  __int128 v63;
  int16x8_t v64;
  int8x16_t v65;
  __int16 *v66;
  __n128 v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unsigned __int8 v81;
  uint64_t v82;
  geo::read_write_lock *v83;
  const char *v84;
  malloc_zone_t *zone;
  uint64_t v86;
  geo::read_write_lock *v87;
  const char *v88;
  malloc_zone_t *v89;
  uint64_t v90;
  geo::read_write_lock *v91;
  const char *v92;
  malloc_zone_t *v93;
  uint64_t v94;
  int v95;
  int v96;
  uint64_t v97;
  geo::read_write_lock *v98;
  const char *v99;
  malloc_zone_t *v100;
  uint64_t v101;
  __int128 v102;
  unint64_t v103;
  uint64_t v104;

  v2 = operator new(0xA8uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_1E42DF610;
  if ((v3 & 1) == 0
  {
    if ((v81 & 1) == 0
    {
      ggl::MeshTyped<ggl::GlobeAtmosphere::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::GlobeAtmosphere::defaultVboReflection;
    }
    ggl::MeshTyped<ggl::GlobeAtmosphere::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::GlobeAtmosphere::DefaultVbo>::attributesReflection(void)::r;
    unk_1ECE44D88 = 1;
  }
  v2[11] = 0;
  v4 = (char *)(v2 + 11);
  v2[7] = 0;
  v2[8] = 0;
  *((_DWORD *)v2 + 18) = 0;
  v2[3] = &off_1E42BBC08;
  v2[4] = "/Atmosphere/Mesh";
  v2[5] = &unk_1E42BBC28;
  v2[6] = 0;
  v2[10] = &ggl::MeshTyped<ggl::GlobeAtmosphere::DefaultVbo>::typedReflection(void)::r;
  v2[12] = 0;
  v2[13] = 0;
  {
    v82 = operator new();
    *(_QWORD *)(v82 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v82 + 24) = "GeoGL";
    *(_OWORD *)(v82 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v82 = &off_1E42B5668;
    *(_QWORD *)(v82 + 8) = "GeoGL";
    *(_OWORD *)(v82 + 72) = 0u;
    *(_OWORD *)(v82 + 88) = 0u;
    *(_OWORD *)(v82 + 104) = 0u;
    *(_OWORD *)(v82 + 120) = 0u;
    *(_OWORD *)(v82 + 136) = 0u;
    *(_OWORD *)(v82 + 152) = 0u;
    *(_OWORD *)(v82 + 168) = 0u;
    *(_OWORD *)(v82 + 184) = 0u;
    *(_OWORD *)(v82 + 200) = 0u;
    *(_OWORD *)(v82 + 216) = 0u;
    *(_OWORD *)(v82 + 232) = 0u;
    *(_QWORD *)(v82 + 248) = 0;
    *(_OWORD *)(v82 + 56) = 0u;
    v83 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v82 + 56), 0);
    if ((_DWORD)v83)
      geo::read_write_lock::logFailure(v83, (uint64_t)"initialization", v84);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v82 + 48) = zone;
    malloc_set_zone_name(zone, "GeoGL");
    *(_QWORD *)(v82 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v82;
  }
  v6 = ggl::Allocator::instance(void)::alloc;
  v2[18] = 0;
  v2[15] = 0;
  v2[16] = 0;
  v2[14] = v6;
  {
    v86 = operator new();
    *(_QWORD *)(v86 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v86 + 24) = "GeoGL";
    *(_OWORD *)(v86 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v86 = &off_1E42B5668;
    *(_QWORD *)(v86 + 8) = "GeoGL";
    *(_OWORD *)(v86 + 72) = 0u;
    *(_OWORD *)(v86 + 88) = 0u;
    *(_OWORD *)(v86 + 104) = 0u;
    *(_OWORD *)(v86 + 120) = 0u;
    *(_OWORD *)(v86 + 136) = 0u;
    *(_OWORD *)(v86 + 152) = 0u;
    *(_OWORD *)(v86 + 168) = 0u;
    *(_OWORD *)(v86 + 184) = 0u;
    *(_OWORD *)(v86 + 200) = 0u;
    *(_OWORD *)(v86 + 216) = 0u;
    *(_OWORD *)(v86 + 232) = 0u;
    *(_QWORD *)(v86 + 248) = 0;
    *(_OWORD *)(v86 + 56) = 0u;
    v87 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v86 + 56), 0);
    if ((_DWORD)v87)
      geo::read_write_lock::logFailure(v87, (uint64_t)"initialization", v88);
    v89 = malloc_create_zone(0, 0);
    *(_QWORD *)(v86 + 48) = v89;
    malloc_set_zone_name(v89, "GeoGL");
    *(_QWORD *)(v86 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v86;
  }
  v2[19] = ggl::Allocator::instance(void)::alloc;
  v2[20] = 0;
  v2[17] = v2 + 18;
  v2[3] = &off_1E42BD838;
  v2[5] = &unk_1E42BD858;
  v7 = v2[11];
  v8 = *(_QWORD *)(v2[10] + 8);
  v9 = v2[12];
  v10 = (v9 - v7) >> 4;
  v11 = v8 - v10;
  if (v8 <= v10)
  {
    if (v8 < v10)
    {
      v12 = v7 + 16 * v8;
      while (v9 != v12)
      {
        v13 = *(std::__shared_weak_count **)(v9 - 8);
        if (v13)
        {
          p_shared_owners = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldaxr(p_shared_owners);
          while (__stlxr(v15 - 1, p_shared_owners));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *, unint64_t))v13->__on_zero_shared)(v13, v11);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        v9 -= 16;
      }
      v2[12] = v12;
    }
  }
  else
  {
    std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__append((uint64_t)(v2 + 11), v11);
  }
  v2[3] = &off_1E42B7178;
  v2[5] = &unk_1E42B7198;
  {
    v90 = operator new();
    *(_QWORD *)(v90 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v90 + 24) = "GeoGL";
    *(_OWORD *)(v90 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v90 = &off_1E42B5668;
    *(_QWORD *)(v90 + 8) = "GeoGL";
    *(_OWORD *)(v90 + 72) = 0u;
    *(_OWORD *)(v90 + 88) = 0u;
    *(_OWORD *)(v90 + 104) = 0u;
    *(_OWORD *)(v90 + 120) = 0u;
    *(_OWORD *)(v90 + 136) = 0u;
    *(_OWORD *)(v90 + 152) = 0u;
    *(_OWORD *)(v90 + 168) = 0u;
    *(_OWORD *)(v90 + 184) = 0u;
    *(_OWORD *)(v90 + 200) = 0u;
    *(_OWORD *)(v90 + 216) = 0u;
    *(_OWORD *)(v90 + 232) = 0u;
    *(_QWORD *)(v90 + 248) = 0;
    *(_OWORD *)(v90 + 56) = 0u;
    v91 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v90 + 56), 0);
    if ((_DWORD)v91)
      geo::read_write_lock::logFailure(v91, (uint64_t)"initialization", v92);
    v93 = malloc_create_zone(0, 0);
    *(_QWORD *)(v90 + 48) = v93;
    malloc_set_zone_name(v93, "GeoGL");
    *(_QWORD *)(v90 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v90;
  }
  v17 = ggl::Allocator::instance(void)::alloc;
  v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)ggl::Allocator::instance(void)::alloc + 16))(ggl::Allocator::instance(void)::alloc, 256, 8);
  *(_QWORD *)v18 = &off_1E42DFF08;
  *(_QWORD *)(v18 + 8) = 0;
  *(_QWORD *)(v18 + 32) = &off_1E42B5748;
  v19 = v18 + 32;
  *(_QWORD *)(v18 + 16) = 0;
  *(_QWORD *)(v18 + 24) = v17;
  *(_QWORD *)(v18 + 40) = 16;
  *(_DWORD *)(v18 + 48) = 6;
  v20 = 0uLL;
  *(_OWORD *)(v18 + 56) = 0u;
  *(_OWORD *)(v18 + 72) = 0u;
  *(_OWORD *)(v18 + 88) = 0u;
  *(_OWORD *)(v18 + 104) = 0u;
  *(_QWORD *)(v18 + 120) = 0;
  if ((v21 & 1) == 0)
  {
    v101 = v18;
    v94 = v18 + 32;
    v20 = 0uLL;
    v19 = v94;
    v96 = v95;
    v18 = v101;
    if (v96)
    {
      v97 = operator new();
      *(_QWORD *)(v97 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v97 + 24) = "GeoGL";
      *(_OWORD *)(v97 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v97 = &off_1E42B5668;
      *(_QWORD *)(v97 + 8) = "GeoGL";
      *(_OWORD *)(v97 + 72) = 0u;
      *(_OWORD *)(v97 + 88) = 0u;
      *(_OWORD *)(v97 + 104) = 0u;
      *(_OWORD *)(v97 + 120) = 0u;
      *(_OWORD *)(v97 + 136) = 0u;
      *(_OWORD *)(v97 + 152) = 0u;
      *(_OWORD *)(v97 + 168) = 0u;
      *(_OWORD *)(v97 + 184) = 0u;
      *(_OWORD *)(v97 + 200) = 0u;
      *(_OWORD *)(v97 + 216) = 0u;
      *(_OWORD *)(v97 + 232) = 0u;
      *(_QWORD *)(v97 + 248) = 0;
      *(_OWORD *)(v97 + 56) = 0u;
      v98 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v97 + 56), 0);
      if ((_DWORD)v98)
        geo::read_write_lock::logFailure(v98, (uint64_t)"initialization", v99);
      v100 = malloc_create_zone(0, 0);
      *(_QWORD *)(v97 + 48) = v100;
      malloc_set_zone_name(v100, "GeoGL");
      *(_QWORD *)(v97 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v97;
      v18 = v101;
      v19 = v94;
      v20 = 0uLL;
    }
  }
  *(_QWORD *)(v18 + 128) = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(v18 + 136) = 0;
  *(_OWORD *)(v18 + 200) = v20;
  *(_OWORD *)(v18 + 184) = v20;
  *(_OWORD *)(v18 + 168) = v20;
  *(_QWORD *)(v18 + 216) = 0;
  *(_QWORD *)(v18 + 224) = -1;
  *(_OWORD *)(v18 + 152) = xmmword_19FFB2DD0;
  *(_DWORD *)(v18 + 144) = 0;
  *(_QWORD *)(v18 + 240) = "/Atmosphere/Mesh";
  *(_QWORD *)(v18 + 248) = &ggl::GlobeAtmosphere::defaultVboReflection;
  *(_QWORD *)(v18 + 32) = &off_1E42B7BA0;
  *(_QWORD *)(v18 + 232) = &unk_1E42B7BC0;
  v22 = *(uint64_t **)v4;
  v23 = *(std::__shared_weak_count **)(*(_QWORD *)v4 + 8);
  *v22 = v19;
  v22[1] = v18;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 14) = v2 + 3;
  *((_QWORD *)this + 15) = v2;
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = **(_QWORD **)(*((_QWORD *)this + 14) + 64);
  v30 = *(_QWORD *)(v29 + 8);
  v31 = 201 * v30;
  v32 = *(_QWORD *)(v29 + 72);
  v33 = *(_QWORD *)(v29 + 80) - v32;
  if (201 * v30 != v33)
  {
    if (201 * v30 <= v33)
    {
      if (v31 < v33)
        *(_QWORD *)(v29 + 80) = v32 + v31;
    }
    else
    {
      std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v29 + 72, 201 * v30 - v33);
    }
    v34 = *(std::__shared_weak_count **)(v29 + 32);
    *(_QWORD *)(v29 + 24) = 0;
    *(_QWORD *)(v29 + 32) = 0;
    if (v34)
    {
      v35 = (unint64_t *)&v34->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    *(_QWORD *)(v29 + 120) = 0;
    *(_DWORD *)(v29 + 112) = 0;
    v37 = *(_QWORD *)(v29 + 80) - *(_QWORD *)(v29 + 72);
    *(_QWORD *)(v29 + 40) = 0;
    *(_QWORD *)(v29 + 48) = v37;
    *(_QWORD *)(v29 + 56) = 0;
    *(_QWORD *)(v29 + 64) = v37;
    v29 = **(_QWORD **)(*((_QWORD *)this + 14) + 64);
    v30 = *(_QWORD *)(v29 + 8);
    v31 = 201 * v30;
  }
  *(_QWORD *)&v38 = 0;
  *((_QWORD *)&v38 + 1) = v29;
  if (v30)
    v39 = *(_QWORD *)(v29 + 72);
  else
    v39 = 0;
  v40 = 0;
  v102 = v38;
  v103 = v31;
  v104 = v39;
  v41 = (float *)(v39 + 8);
  do
  {
    v42 = __sincos_stret((double)v40 * 0.0314159265);
    cosval = v42.__cosval;
    sinval = v42.__sinval;
    *(v41 - 2) = cosval;
    *(v41 - 1) = sinval;
    *v41 = 0.0;
    v41 += 4;
    ++v40;
  }
  while (v40 != 200);
  *(_DWORD *)(v39 + 3208) = 0;
  *(_QWORD *)(v39 + 3200) = 0;
  v45 = operator new(0xF8uLL);
  v45[1] = 0;
  v45[2] = 0;
  *v45 = &off_1E42DF1E8;
  v46 = ggl::BufferData::BufferData((uint64_t)(v45 + 3), 2, 1, 0, 6, 600);
  *((_DWORD *)v45 + 60) = 0;
  v45[3] = &off_1E42B6B88;
  v45[4] = 2;
  v45[28] = &unk_1E42B6BA8;
  v45[29] = "/Atmosphere/IndexData";
  v47 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 16) = v46;
  *((_QWORD *)this + 17) = v45;
  if (v47)
  {
    v48 = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v50 = (_QWORD *)*((_QWORD *)this + 16);
  v51 = 600 * v50[1];
  if (v51)
    v52 = v50[9];
  else
    v52 = 0;
  v53 = 0;
  v54 = (__n128)xmmword_19FFB2FE0;
  v55 = (__n128)xmmword_19FFB2FF0;
  v56 = (__n128)xmmword_19FFB3000;
  v57 = (__n128)xmmword_19FFB2E40;
  v58 = (__n128)xmmword_19FFB3C40;
  v59 = (uint64x2_t)vdupq_n_s64(0xC7uLL);
  v60 = vdupq_n_s64(8uLL);
  v61.i64[0] = 0x1000100010001;
  v61.i64[1] = 0x1000100010001;
  v62.i64[0] = 0xC600C600C600C6;
  v62.i64[1] = 0xC600C600C600C6;
  *(_QWORD *)&v63 = 0xC800C800C800C8;
  *((_QWORD *)&v63 + 1) = 0xC800C800C800C8;
  v64.i64[0] = 0x8000800080008;
  v64.i64[1] = 0x8000800080008;
  do
  {
    v65 = vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v59, (uint64x2_t)v57), (int32x4_t)vcgtq_u64(v59, (uint64x2_t)v56)), (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v59, (uint64x2_t)v55), (int32x4_t)vcgtq_u64(v59, (uint64x2_t)v54))), (int8x16_t)vaddq_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)v57, (int32x4_t)v56), (int16x8_t)vuzp1q_s32((int32x4_t)v55, (int32x4_t)v54)), v61), (int8x16_t)vaddq_s16((int16x8_t)v58, v62));
    v66 = (__int16 *)(v52 + v53);
    v67 = v58;
    vst3q_s16(v66, *(int16x8x3_t *)&v63);
    v55 = (__n128)vaddq_s64((int64x2_t)v55, v60);
    v56 = (__n128)vaddq_s64((int64x2_t)v56, v60);
    v57 = (__n128)vaddq_s64((int64x2_t)v57, v60);
    v54 = (__n128)vaddq_s64((int64x2_t)v54, v60);
    v58 = (__n128)vaddq_s16((int16x8_t)v58, v64);
    v53 += 48;
  }
  while (v53 != 1200);
  v68 = *((_QWORD *)this + 14);
  v69 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
  if (v69)
  {
    v70 = (unint64_t *)&v69->__shared_owners_;
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
    do
      v72 = __ldxr(v70);
    while (__stxr(v72 + 1, v70));
  }
  v73 = *(std::__shared_weak_count **)(v68 + 104);
  *(_QWORD *)(v68 + 96) = v50;
  *(_QWORD *)(v68 + 104) = v69;
  if (v73)
  {
    v74 = (unint64_t *)&v73->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *, __n128, __n128, __n128, __n128, __n128))v73->__on_zero_shared)(v73, v54, v55, v56, v57, v58);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  if (v69)
  {
    v76 = (unint64_t *)&v69->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *, __n128, __n128, __n128, __n128, __n128))v69->__on_zero_shared)(v69, v54, v55, v56, v57, v58);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  if (v52 && v51)
  {
    v78 = v50[8];
    if (v78 <= v51)
      v78 = v51;
    v50[7] = 0;
    v50[8] = v78;
  }
  if (v104 && v103)
  {
    if ((_QWORD)v102 && *(_BYTE *)(*((_QWORD *)&v102 + 1) + 17) != 2)
      (*(void (**)(__n128, __n128, __n128, __n128, __n128))(*(_QWORD *)v102 + 64))(v54, v55, v56, v57, v58);
    v80 = *(_QWORD *)(*((_QWORD *)&v102 + 1) + 56);
    v79 = *(_QWORD *)(*((_QWORD *)&v102 + 1) + 64);
    if (v79 == v80)
      v80 = *(_QWORD *)(*((_QWORD *)&v102 + 1) + 80) - *(_QWORD *)(*((_QWORD *)&v102 + 1) + 72);
    if (v80)
      v80 = 0;
    if (v79 <= v103)
      v79 = v103;
    if (v79 == v80)
      v79 = v80 + *(_QWORD *)(*((_QWORD *)&v102 + 1) + 80) - *(_QWORD *)(*((_QWORD *)&v102 + 1) + 72);
    *(_QWORD *)(*((_QWORD *)&v102 + 1) + 56) = v80;
    *(_QWORD *)(*((_QWORD *)&v102 + 1) + 64) = v79;
  }
}

void sub_19FA4437C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ggl::GlobeAtmosphere::AtmosphereMesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF610;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::GlobeAtmosphere::AtmosphereMesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF610;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::GlobeAtmosphere::AtmosphereMesh>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_19FA4447C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19FA445CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19FA44648(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19FA4479C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FA44810(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19FA44884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19FA449D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FA44AA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19FA44C04(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19FA44D28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FA44E6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19FA45100(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)VKInternedString;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_19FA452F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

const void *_weakSetRetain(const __CFAllocator *a1, const void *a2)
{
  return a2;
}

uint64_t _weakSetEqual(void *a1, const void *a2)
{
  return objc_msgSend(a1, "isEqualToString:", a2);
}

void sub_19FA45454(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void md::ARDebugRouteScene::~ARDebugRouteScene(md::ARDebugRouteScene *this)
{
  *(_QWORD *)this = &off_1E4292378;
  *((_QWORD *)this + 4) = &off_1E42B4C30;

  *(_QWORD *)this = off_1E428C9D0;
  *((_QWORD *)this + 1) = &off_1E42B5370;

}

{
  *(_QWORD *)this = &off_1E4292378;
  *((_QWORD *)this + 4) = &off_1E42B4C30;

  *(_QWORD *)this = off_1E428C9D0;
  *((_QWORD *)this + 1) = &off_1E42B5370;

  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::ARDebugRouteScene::update(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  int v8;
  id v9;
  unint64_t i;
  void *v11;
  void *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  void *v16;
  void *v17;
  id v18;
  unint64_t j;
  void *v20;
  void *v21;
  __CFString *v22;
  __CFString *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  VKARWalkingManeuverFeature *v34;
  id v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  _OWORD *v42;
  id v43;
  VKARWalkingArrivalFeature *v44;
  id v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  VKARWalkingContinueFeature *v49;
  unsigned int v50;
  float v51;
  unsigned int v53;
  float v54;
  id v55;
  void *v56;
  id v57;
  void *v58;

  v5 = *(id *)(a3 + 40);
  objc_msgSend(v5, "routeInfo");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "route");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v58 = v7;

  if (v7)
  {
    v8 = geo::_retain_ptr<GEOComposedRoute * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::operator==(*(void **)(a1 + 40), &v58);
    if ((v8 & 1) == 0)
    {
      v9 = v7;
      objc_storeStrong((id *)(a1 + 40), v7);

      *(_QWORD *)(a1 + 56) = 0;
    }
    for (i = 1; ; ++i)
    {
      if (i >= objc_msgSend(v7, "stepsCount"))
      {
        v15 = 0;
        goto LABEL_37;
      }
      objc_msgSend(v7, "steps");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "objectAtIndex:", i);
      v12 = (void *)objc_claimAutoreleasedReturnValue();

      v13 = objc_msgSend(v12, "endRouteCoordinate");
      v14 = *(_DWORD *)(a3 + 4);
      if (v14 < v13 || v14 == (_DWORD)v13 && *(float *)(a3 + 8) < *((float *)&v13 + 1))
        break;

    }
    if (v8 && *(_QWORD *)(a1 + 56) == i)
    {
      v15 = 0;
    }
    else
    {
      objc_msgSend(v7, "steps");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "objectAtIndex:", i - 1);
      v56 = (void *)objc_claimAutoreleasedReturnValue();

      v55 = v12;
      v18 = v7;
      v57 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      for (j = 0; j < objc_msgSend(v18, "stepsCount"); ++j)
      {
        objc_msgSend(v18, "steps");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "objectAtIndex:", j);
        v21 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v21, "maneuverRoadName");
        v22 = (__CFString *)objc_claimAutoreleasedReturnValue();
        v23 = v22;
        if (!v22 || !-[__CFString length](v22, "length"))
        {

          v23 = &stru_1E4315B30;
        }
        v24 = objc_msgSend(v21, "endRouteCoordinate");
        v25 = v24;
        v26 = *(_DWORD *)(a3 + 4);
        if (v26 < v24 || v26 == (_DWORD)v24 && *(float *)(a3 + 8) < *((float *)&v24 + 1))
        {
          objc_msgSend(v18, "pointAtRouteCoordinate:", v24);
          v28 = v27;
          v30 = v29;
          v32 = v31;
          objc_msgSend(v18, "courseAtRouteCoordinateIndex:", v25);
          v34 = -[VKARWalkingManeuverFeature initWithDisplayLocation:routeCoordinate:maneuverHeading:displayText:]([VKARWalkingManeuverFeature alloc], "initWithDisplayLocation:routeCoordinate:maneuverHeading:displayText:", v25, v23, v28, v30, v32, v33);
          objc_msgSend(v57, "addObject:", v34);

        }
      }

      v35 = v18;
      objc_msgSend(v35, "distance");
      objc_msgSend(v35, "pointWithAltitudeCorrectionAtRouteCoordinate:", objc_msgSend(v35, "coordinateAtOffset:"));
      v37 = v36;
      v39 = v38;
      v41 = v40;
      v42 = operator new(0x20uLL);
      *v42 = xmmword_1A007B664;
      v42[1] = unk_1A007B674;
      v43 = objc_alloc_init(MEMORY[0x1E0D270A8]);
      objc_msgSend(v43, "replaceAttributes:count:", v42, 4);
      v44 = -[VKARWalkingArrivalFeature initWithPosition:iconStyleAttributes:]([VKARWalkingArrivalFeature alloc], "initWithPosition:iconStyleAttributes:", v43, v37, v39, v41);

      operator delete(v42);
      objc_msgSend(v57, "addObject:", v44);

      v45 = v35;
      v46 = v55;
      v47 = objc_msgSend(v56, "endRouteCoordinate");
      v48 = objc_msgSend(v46, "endRouteCoordinate");
      if (GEOPolylineCoordinateIsValid() && GEOPolylineCoordinateIsValid())
      {
        if (v48 > v47
          || (v49 = 0, (_DWORD)v48 == (_DWORD)v47) && *((float *)&v48 + 1) > *((float *)&v47 + 1))
        {
          if (GEOPolylineCoordinateIsInvalid())
          {
            v50 = *MEMORY[0x1E0D26A38];
            v51 = *(float *)(MEMORY[0x1E0D26A38] + 4);
          }
          else
          {
            v51 = *((float *)&v47 + 1) - floorf(*((float *)&v47 + 1));
            v50 = vcvtms_u32_f32(*((float *)&v47 + 1)) + v47;
          }
          if (GEOPolylineCoordinateIsInvalid())
          {
            v53 = *MEMORY[0x1E0D26A38];
            v54 = *(float *)(MEMORY[0x1E0D26A38] + 4);
          }
          else
          {
            v54 = *((float *)&v48 + 1) - floorf(*((float *)&v48 + 1));
            v53 = vcvtms_u32_f32(*((float *)&v48 + 1)) + v48;
          }
          v49 = -[VKARWalkingContinueFeature initWithRoute:range:displayText:]([VKARWalkingContinueFeature alloc], "initWithRoute:range:displayText:", v45, v50 | ((unint64_t)LODWORD(v51) << 32), v53 | ((unint64_t)LODWORD(v54) << 32), CFSTR("CONTINUE"));
        }
      }
      else
      {
        v49 = 0;
      }

      objc_msgSend(v57, "addObject:", v49);
      md::ARDebugScene::setFeatures(a1, v57);
      *(_QWORD *)(a1 + 56) = i;

      v15 = 1;
    }

  }
  else
  {
    v16 = *(void **)(a1 + 16);
    if (v16)
    {
      *(_QWORD *)(a1 + 16) = 0;

    }
    *(_QWORD *)(a1 + 56) = 0;
    v15 = 1;
  }
LABEL_37:

  return v15;
}

void sub_19FA45A34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void md::StandardGridMapEngineMode::~StandardGridMapEngineMode(md::StandardGridMapEngineMode *this)
{
  md::MapEngineMode::~MapEngineMode(this);
  JUMPOUT(0x1A1AF4E00);
}

md::StandardGridMapEngineMode *md::StandardGridMapEngineMode::StandardGridMapEngineMode(md::StandardGridMapEngineMode *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char *v23;
  _QWORD v24[2];

  v2 = md::MapEngineMode::MapEngineMode((uint64_t)this, 2);
  *(_QWORD *)v2 = &off_1E42A2560;
  *(_BYTE *)(v2 + 49) = 1;
  *(_DWORD *)(v2 + 52) = 25;
  v3 = v2 + 144;
  LOBYTE(v7) = 0;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(v2 + 144, 0, &v7)+ 17) = 0;
  LOBYTE(v7) = 2;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(v3, 2u, &v7)+ 17) = 0;
  LOBYTE(v7) = 51;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(v3, 0x33u, &v7)+ 17) = 0;
  v22 = 0x4AC7AB7561675F6;
  v23 = "md::GridLogic]";
  v24[0] = 13;
  *(_QWORD *)&v19 = 0x336A901A15BB7353;
  *((_QWORD *)&v19 + 1) = "md::GridContext]";
  v20 = 15;
  v21 = 1;
  *(_QWORD *)&v7 = &v8;
  *((_QWORD *)&v7 + 1) = 1;
  v8 = xmmword_1E42F8C28;
  *(_QWORD *)&v9 = 21;
  *(_QWORD *)&v16 = &v17;
  *((_QWORD *)&v16 + 1) = 1;
  v17 = xmmword_1E42F8B38;
  v18 = 24;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v22, &v19, 0, (uint64_t)&v7, (uint64_t)&v16);
  v22 = 0x79FE0BD9535D5C4DLL;
  v23 = "md::AnchorLogic]";
  v24[0] = 15;
  *(_QWORD *)&v19 = 0x63B6FE00C0848868;
  *((_QWORD *)&v19 + 1) = "md::AnchorContext]";
  v20 = 17;
  v21 = 1;
  *(_QWORD *)&v7 = &v8;
  *((_QWORD *)&v7 + 1) = 2;
  v8 = xmmword_1E42F87F0;
  v9 = unk_1E42F8800;
  v10 = xmmword_1E42F8810;
  *(_QWORD *)&v16 = &v17;
  *((_QWORD *)&v16 + 1) = 1;
  v17 = xmmword_1E42F8E88;
  v18 = 21;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v22, &v19, 0, (uint64_t)&v7, (uint64_t)&v16);
  *(_QWORD *)&v19 = 0x8E629317B3523E63;
  *((_QWORD *)&v19 + 1) = "md::CameraLogic]";
  v20 = 15;
  *(_QWORD *)&v16 = 0x1AF456233693CD46;
  *((_QWORD *)&v16 + 1) = "md::CameraContext]";
  *(_QWORD *)&v17 = 17;
  BYTE8(v17) = 1;
  *(_QWORD *)&v7 = &v8;
  *((_QWORD *)&v7 + 1) = 1;
  v8 = xmmword_1E42F8820;
  *(_QWORD *)&v9 = 20;
  v22 = (uint64_t)v24;
  v23 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v19, &v16, 0, (uint64_t)&v7, (uint64_t)&v22);
  *(_QWORD *)&v16 = 0xD2443A61CED86C69;
  *((_QWORD *)&v16 + 1) = "md::SettingsLogic]";
  *(_QWORD *)&v17 = 17;
  *(_QWORD *)&v7 = 0xC97B9E962ADF4AD4;
  *((_QWORD *)&v7 + 1) = "md::SettingsContext]";
  *(_QWORD *)&v8 = 19;
  BYTE8(v8) = 1;
  *(_QWORD *)&v19 = &v20;
  *((_QWORD *)&v19 + 1) = 0;
  v22 = (uint64_t)v24;
  v23 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v16, &v7, 0, (uint64_t)&v19, (uint64_t)&v22);
  *(_QWORD *)&v16 = 0x2FED70A4459DFCA1;
  *((_QWORD *)&v16 + 1) = "md::StyleLogic]";
  *(_QWORD *)&v17 = 14;
  *(_QWORD *)&v7 = 0xE42D19AFCA302E68;
  *((_QWORD *)&v7 + 1) = "md::StyleLogicContext]";
  *(_QWORD *)&v8 = 21;
  BYTE8(v8) = 1;
  *(_QWORD *)&v19 = &v20;
  *((_QWORD *)&v19 + 1) = 0;
  v22 = (uint64_t)v24;
  v23 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v16, &v7, 0, (uint64_t)&v19, (uint64_t)&v22);
  *(_QWORD *)&v19 = 0x652FEFC5C602CC21;
  *((_QWORD *)&v19 + 1) = "md::StandardLogic]";
  v20 = 17;
  *(_QWORD *)&v16 = 0xFFA06A69D924B0E8;
  *((_QWORD *)&v16 + 1) = "md::StandardLogicContext]";
  *(_QWORD *)&v17 = 24;
  BYTE8(v17) = 1;
  *(_QWORD *)&v7 = &v8;
  *((_QWORD *)&v7 + 1) = 2;
  v8 = xmmword_1E42F7EA0;
  v9 = unk_1E42F7EB0;
  v10 = xmmword_1E42F7EC0;
  v22 = (uint64_t)v24;
  v23 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v19, &v16, 0, (uint64_t)&v7, (uint64_t)&v22);
  v22 = 0x17767EADC5B287BLL;
  v23 = "md::ElevationLogic]";
  v24[0] = 18;
  *(_QWORD *)&v19 = 0x8BD499FBD96FBB9ELL;
  *((_QWORD *)&v19 + 1) = "md::ElevationContext]";
  v20 = 20;
  v21 = 1;
  *(_QWORD *)&v7 = &v8;
  *((_QWORD *)&v7 + 1) = 2;
  v8 = xmmword_1E42F88C8;
  v9 = unk_1E42F88D8;
  v10 = xmmword_1E42F88E8;
  *(_QWORD *)&v16 = &v17;
  *((_QWORD *)&v16 + 1) = 1;
  v17 = xmmword_1E42F88F8;
  v18 = 25;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v22, &v19, 0, (uint64_t)&v7, (uint64_t)&v16);
  *(_QWORD *)&v16 = 0x90C2E4CBBB63E301;
  *((_QWORD *)&v16 + 1) = "md::LayerDataLogic]";
  *(_QWORD *)&v17 = 18;
  *(_QWORD *)&v7 = 0x7851AF310F49C988;
  *((_QWORD *)&v7 + 1) = "md::LayerDataLogicContext]";
  *(_QWORD *)&v8 = 25;
  BYTE8(v8) = 1;
  *(_QWORD *)&v19 = &v20;
  *((_QWORD *)&v19 + 1) = 0;
  v22 = (uint64_t)v24;
  v23 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v16, &v7, 0, (uint64_t)&v19, (uint64_t)&v22);
  *(_QWORD *)&v19 = 0xAF46DE79C836B0D8;
  *((_QWORD *)&v19 + 1) = "md::TileSelectionLogic]";
  v20 = 22;
  *(_QWORD *)&v16 = 0x64780CBD71DF7CF5;
  *((_QWORD *)&v16 + 1) = "md::TileSelectionContext]";
  *(_QWORD *)&v17 = 24;
  BYTE8(v17) = 1;
  *(_QWORD *)&v7 = &v8;
  *((_QWORD *)&v7 + 1) = 3;
  v10 = xmmword_1E42F8B10;
  v11 = unk_1E42F8B20;
  *(_QWORD *)&v12 = 21;
  v8 = xmmword_1E42F8AF0;
  v9 = unk_1E42F8B00;
  v22 = (uint64_t)v24;
  v23 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v19, &v16, 0, (uint64_t)&v7, (uint64_t)&v22);
  v4 = 0xCBF29CE484222325;
  v5 = 0x26u;
  do
    v4 = 0x100000001B3 * (v4 ^ aStdStringViewG_927[v5++]);
  while (v5 != 368);
  v22 = v4;
  v23 = "md::TileDependencyLogicImpl<md::TileDependencies<>, md::TileDependencies<md::TileDependency<md::MapDataType::Flyover, md::FlyoverTileDataResolverContext>, md::TileDependency<md::MapDataType::FlyoverMetadata, md::FlyoverTileDataResolverContext>, md::TileDependency<md::MapDataType::FlyoverDsm, md::FlyoverTileDataResolverContext>>>]";
  v24[0] = 330;
  *(_QWORD *)&v19 = 0x8677AD8BA9352C1DLL;
  *((_QWORD *)&v19 + 1) = "md::ResolvedTileSelectionContext]";
  v20 = 32;
  v21 = 1;
  *(_QWORD *)&v7 = &v8;
  *((_QWORD *)&v7 + 1) = 1;
  v8 = xmmword_1E42F8B38;
  *(_QWORD *)&v9 = 24;
  *(_QWORD *)&v16 = &v17;
  *((_QWORD *)&v16 + 1) = 1;
  v17 = xmmword_1E42F8B50;
  v18 = 34;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v22, &v19, 0, (uint64_t)&v7, (uint64_t)&v16);
  *(_QWORD *)&v19 = 0x87BA2765F9E38E05;
  *((_QWORD *)&v19 + 1) = "md::PendingSceneLogic]";
  v20 = 21;
  *(_QWORD *)&v16 = 0x9F2276D081C2CB20;
  *((_QWORD *)&v16 + 1) = "md::PendingSceneContext]";
  *(_QWORD *)&v17 = 23;
  BYTE8(v17) = 1;
  *(_QWORD *)&v7 = &v8;
  *((_QWORD *)&v7 + 1) = 5;
  v12 = xmmword_1E42F8BA8;
  v13 = *(_OWORD *)&off_1E42F8BB8;
  v14 = xmmword_1E42F8BC8;
  v15 = 25;
  v8 = xmmword_1E42F8B68;
  v9 = unk_1E42F8B78;
  v10 = xmmword_1E42F8B88;
  v11 = unk_1E42F8B98;
  v22 = (uint64_t)v24;
  v23 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v19, &v16, 0, (uint64_t)&v7, (uint64_t)&v22);
  v22 = 0x2B7C4502BD3C99C6;
  v23 = "md::ResolvedSceneLogic]";
  v24[0] = 22;
  *(_QWORD *)&v19 = 0x99BED48DEFBBD82BLL;
  *((_QWORD *)&v19 + 1) = "md::SceneContext]";
  v20 = 16;
  v21 = 1;
  *(_QWORD *)&v16 = &v17;
  *((_QWORD *)&v16 + 1) = 1;
  v17 = xmmword_1E42F8C10;
  v18 = 23;
  *(_QWORD *)&v7 = &v8;
  *((_QWORD *)&v7 + 1) = 2;
  v8 = xmmword_1E42F8BE0;
  v9 = unk_1E42F8BF0;
  v10 = xmmword_1E42F8C00;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v22, &v19, 0, (uint64_t)&v16, (uint64_t)&v7);
  v22 = 0x20A1ED17D78F322BLL;
  v23 = "md::LabelsLogic]";
  v24[0] = 15;
  *(_QWORD *)&v19 = 0xA588623CD4116DAELL;
  *((_QWORD *)&v19 + 1) = "md::LabelsContext]";
  v20 = 17;
  v21 = 1;
  *(_QWORD *)&v7 = &v8;
  *((_QWORD *)&v7 + 1) = 1;
  v8 = xmmword_1E42F8C28;
  *(_QWORD *)&v9 = 21;
  *(_QWORD *)&v16 = &v17;
  *((_QWORD *)&v16 + 1) = 1;
  v17 = xmmword_1E42F8C40;
  v18 = 25;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v22, &v19, 0, (uint64_t)&v7, (uint64_t)&v16);
  v22 = 0x653D1F33EF15EF04;
  v23 = "md::LoadingStatusLogic]";
  v24[0] = 22;
  *(_QWORD *)&v19 = 0x90B6813830DCB581;
  *((_QWORD *)&v19 + 1) = "md::LoadingStatusContext]";
  v20 = 24;
  v21 = 1;
  *(_QWORD *)&v7 = &v8;
  *((_QWORD *)&v7 + 1) = 1;
  v8 = xmmword_1E42F8C58;
  *(_QWORD *)&v9 = 16;
  *(_QWORD *)&v16 = &v17;
  *((_QWORD *)&v16 + 1) = 1;
  v17 = xmmword_1E42F8C70;
  v18 = 29;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v22, &v19, 0, (uint64_t)&v7, (uint64_t)&v16);
  *(_QWORD *)&v16 = 0x701C95861FC50076;
  *((_QWORD *)&v16 + 1) = "md::GeometryLogic]";
  *(_QWORD *)&v17 = 17;
  *(_QWORD *)&v7 = 0x3070CB6B3C7F21D3;
  *((_QWORD *)&v7 + 1) = "md::GeometryContext]";
  *(_QWORD *)&v8 = 19;
  BYTE8(v8) = 1;
  *(_QWORD *)&v19 = &v20;
  *((_QWORD *)&v19 + 1) = 0;
  v22 = (uint64_t)v24;
  v23 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v16, &v7, 0, (uint64_t)&v19, (uint64_t)&v22);
  *(_QWORD *)&v19 = 0xBDB8C71631E0AA6CLL;
  *((_QWORD *)&v19 + 1) = "md::MapZoomLevelStyleLogic]";
  v20 = 26;
  *(_QWORD *)&v16 = 0xF0AA2DB42EB710AFLL;
  *((_QWORD *)&v16 + 1) = "md::MapZoomLevelStyleLogicContext]";
  *(_QWORD *)&v17 = 33;
  BYTE8(v17) = 1;
  *(_QWORD *)&v7 = &v8;
  *((_QWORD *)&v7 + 1) = 2;
  v8 = xmmword_1E42F8898;
  v9 = unk_1E42F88A8;
  v10 = xmmword_1E42F88B8;
  v22 = (uint64_t)v24;
  v23 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v19, &v16, 0, (uint64_t)&v7, (uint64_t)&v22);
  LODWORD(v7) = 28;
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)this + 80, 0x1Cu, &v7)+ 18) = 1;
  return this;
}

void sub_19FA465FC(_Unwind_Exception *a1)
{
  md::MapEngineMode *v1;

  md::MapEngineMode::~MapEngineMode(v1);
  _Unwind_Resume(a1);
}

void md::DebugConsoleManager::~DebugConsoleManager(md::DebugConsoleManager *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;

  v2 = *(uint64_t **)this;
  v3 = (uint64_t *)*((_QWORD *)this + 1);
  if (*(uint64_t **)this != v3)
  {
    do
    {
      while (1)
      {
        v4 = *v2;
        v5 = (std::__shared_weak_count *)v2[1];
        if (v5)
          break;
        ggl::Renderer::removeDebugRenderer(*((_QWORD *)this + 3), v4);
        v2 += 2;
        if (v2 == v3)
          goto LABEL_17;
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v8 = *((_QWORD *)this + 3);
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
      ggl::Renderer::removeDebugRenderer(v8, v4);
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      v2 += 2;
    }
    while (v2 != v3);
  }
LABEL_17:
  v12 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (!v12)
    goto LABEL_21;
  v13 = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    v15 = *(uint64_t **)this;
    if (!*(_QWORD *)this)
      return;
  }
  else
  {
LABEL_21:
    v15 = *(uint64_t **)this;
    if (!*(_QWORD *)this)
      return;
  }
  v16 = (uint64_t *)*((_QWORD *)this + 1);
  v17 = v15;
  if (v16 != v15)
  {
    do
    {
      v18 = (std::__shared_weak_count *)*(v16 - 1);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v16 -= 2;
    }
    while (v16 != v15);
    v17 = *(uint64_t **)this;
  }
  *((_QWORD *)this + 1) = v15;
  operator delete(v17);
}

uint64_t md::DebugConsoleManager::console(uint64_t a1, int a2)
{
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  uint64_t result;
  const ggl::CommonLibrary *v26;
  _QWORD *v27;
  ggl::DebugConsole *v28;
  ggl::DebugConsole **v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  __int128 v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  __int128 v40;

  v4 = *(_QWORD **)a1;
  v3 = *(_QWORD **)(a1 + 8);
  v5 = ((uint64_t)v3 - *(_QWORD *)a1) >> 4;
  v6 = a2;
  if (v5 <= a2)
  {
    v7 = a2 + 1;
    v8 = v7 - v5;
    if (v7 <= v5)
    {
      if (a2 + 1 < v5)
      {
        v21 = &v4[2 * v7];
        while (v3 != v21)
        {
          v22 = (std::__shared_weak_count *)*(v3 - 1);
          if (v22)
          {
            p_shared_owners = (unint64_t *)&v22->__shared_owners_;
            do
              v24 = __ldaxr(p_shared_owners);
            while (__stlxr(v24 - 1, p_shared_owners));
            if (!v24)
            {
              ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
              std::__shared_weak_count::__release_weak(v22);
            }
          }
          v3 -= 2;
        }
        *(_QWORD *)(a1 + 8) = v21;
      }
    }
    else
    {
      v9 = *(_QWORD *)(a1 + 16);
      if (v8 <= (v9 - (uint64_t)v3) >> 4)
      {
        bzero(*(void **)(a1 + 8), 16 * v8);
        *(_QWORD *)(a1 + 8) = &v3[2 * v8];
      }
      else
      {
        if (a2 <= -2)
          abort();
        v10 = v9 - (_QWORD)v4;
        if (v10 >> 3 > v7)
          v7 = v10 >> 3;
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
          v7 = 0xFFFFFFFFFFFFFFFLL;
        if (v7 >> 60)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v11 = 16 * v7;
        v12 = (char *)operator new(16 * v7);
        v13 = &v12[16 * v5];
        v14 = &v12[v11];
        bzero(v13, 16 * v8);
        v15 = &v13[16 * v8];
        if (v3 == v4)
        {
          *(_QWORD *)a1 = v13;
          *(_QWORD *)(a1 + 8) = v15;
          *(_QWORD *)(a1 + 16) = v14;
        }
        else
        {
          do
          {
            v16 = *((_OWORD *)v3 - 1);
            v3 -= 2;
            *((_OWORD *)v13 - 1) = v16;
            v13 -= 16;
            *v3 = 0;
            v3[1] = 0;
          }
          while (v3 != v4);
          v3 = *(_QWORD **)a1;
          v17 = *(_QWORD **)(a1 + 8);
          *(_QWORD *)a1 = v13;
          *(_QWORD *)(a1 + 8) = v15;
          *(_QWORD *)(a1 + 16) = v14;
          while (v17 != v3)
          {
            v18 = (std::__shared_weak_count *)*(v17 - 1);
            if (v18)
            {
              v19 = (unint64_t *)&v18->__shared_owners_;
              do
                v20 = __ldaxr(v19);
              while (__stlxr(v20 - 1, v19));
              if (!v20)
              {
                ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
                std::__shared_weak_count::__release_weak(v18);
              }
            }
            v17 -= 2;
          }
        }
        if (v3)
          operator delete(v3);
      }
    }
  }
  result = *(_QWORD *)(*(_QWORD *)a1 + 16 * v6);
  if (!result)
  {
    v26 = *(const ggl::CommonLibrary **)(a1 + 32);
    v27 = operator new(0xB0uLL);
    v27[1] = 0;
    v27[2] = 0;
    *v27 = &off_1E42DADA8;
    v28 = ggl::DebugConsole::DebugConsole((ggl::DebugConsole *)(v27 + 3), v26);
    v27[3] = &off_1E428CB20;
    v29 = (ggl::DebugConsole **)(*(_QWORD *)a1 + 16 * v6);
    v30 = (std::__shared_weak_count *)v29[1];
    *v29 = v28;
    v29[1] = (ggl::DebugConsole *)v27;
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    v33 = *(_QWORD *)(a1 + 24);
    v34 = *(_OWORD *)(*(_QWORD *)a1 + 16 * v6);
    v40 = v34;
    if (*((_QWORD *)&v34 + 1))
    {
      v35 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
      v37 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
      ggl::Renderer::addDebugRenderer(v33, &v40);
      if (v37)
      {
        v38 = (unint64_t *)&v37->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
    }
    else
    {
      ggl::Renderer::addDebugRenderer(v33, &v40);
    }
    return *(_QWORD *)(*(_QWORD *)a1 + 16 * v6);
  }
  return result;
}

void md::DebugConsole::~DebugConsole(md::DebugConsole *this)
{
  ggl::DebugConsole::~DebugConsole(this);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::DebugConsole>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DADA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::DebugConsole>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DADA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::DebugConsole>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<md::FontOptions>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DAD00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::FontOptions>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DAD00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::FontOptions>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
}

void applyRaisedInitial(__CFAttributedString *a1, const __CTFont *a2, CFIndex value, CFRange range, const __CFLocale *a5)
{
  CFIndex length;
  CFIndex location;
  CFStringRef String;
  const __CFString *v10;
  CFIndex v11;
  CFRange RangeOfComposedCharactersAtIndex;
  const __CFString *v13;
  const __CFString *v14;
  __CFString *MutableCopy;
  const __CFString *v16;
  __CFString *v17;
  const __CFString *v18;
  CFComparisonResult v19;
  const __CFString *v20;
  __CFAttributedString *v21;
  const __CFLocale *v23;
  const __CFCharacterSet *theSet;
  CFRange result;
  CFRange v26;
  CFRange v27;

  length = range.length;
  location = range.location;
  range.length = value;
  v26.location = range.location;
  v26.length = length;
  v20 = (const __CFString *)*MEMORY[0x1E0CA8188];
  CFAttributedStringSetAttribute(a1, v26, (CFStringRef)*MEMORY[0x1E0CA8188], (CFTypeRef)range.length);
  theSet = CFCharacterSetGetPredefined(kCFCharacterSetWhitespaceAndNewline);
  v21 = a1;
  String = CFAttributedStringGetString(a1);
  if (String)
  {
    v10 = String;
    v11 = location + length;
    v23 = a5;
    while (1)
    {
      RangeOfComposedCharactersAtIndex = CFStringGetRangeOfComposedCharactersAtIndex(v10, location);
      if (v11 < RangeOfComposedCharactersAtIndex.location + RangeOfComposedCharactersAtIndex.length)
        break;
      v13 = CFStringCreateWithSubstring(0, v10, RangeOfComposedCharactersAtIndex);
      if (v13)
      {
        v14 = v13;
        MutableCopy = CFStringCreateMutableCopy(0, 0, v13);
        if (MutableCopy)
        {
          v16 = MutableCopy;
          CFStringUppercase(MutableCopy, a5);
          v17 = CFStringCreateMutableCopy(0, 0, v14);
          if (v17)
          {
            v18 = v17;
            CFStringLowercase(v17, a5);
            v19 = CFStringCompare(v16, v18, 0);
            CFRelease(v16);
            CFRelease(v18);
            if (v19)
            {
              CFAttributedStringSetAttribute(v21, RangeOfComposedCharactersAtIndex, v20, a2);
              v10 = CFAttributedStringGetString(v21);
              if (!v10)
              {
                CFRelease(v14);
                return;
              }
            }
          }
          else
          {
            CFRelease(v16);
          }
        }
        CFRelease(v14);
        a5 = v23;
      }
      v27.location = RangeOfComposedCharactersAtIndex.location + RangeOfComposedCharactersAtIndex.length;
      v27.length = v11 - (RangeOfComposedCharactersAtIndex.location + RangeOfComposedCharactersAtIndex.length);
      if (CFStringFindCharacterFromSet(v10, theSet, v27, 0, &result))
      {
        location = result.length + result.location;
        if (result.length + result.location < v11)
          continue;
      }
      return;
    }
  }
}

void md::TextDataString::detectTextClusters(md::TextDataString *this, CTLineRef line, float a3, unint64_t a4)
{
  CTLineRef JustifiedLine;
  CFIndex GlyphCount;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  CGPoint *v11;
  CFArrayRef GlyphRuns;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  uint64_t i;
  const __CTRun *v18;
  CFIndex v19;
  char v20;
  uint64_t v21;
  double *v22;
  double *p_x;
  double v24;
  double v25;
  float v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const __CTLine *v31;
  const __CFArray *v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[128];
  uint64_t v39;
  CFRange v40;
  CFRange v41;

  v39 = *MEMORY[0x1E0C80C00];
  JustifiedLine = CTLineCreateJustifiedLine(line, 1.0, (float)(a3 + (float)((float)a4 * 20.0)));
  if (JustifiedLine)
  {
    v31 = JustifiedLine;
    GlyphCount = CTLineGetGlyphCount(JustifiedLine);
    if (GlyphCount == a4)
    {
      v8 = 2 * a4;
      if (2 * a4 > 0x2000)
      {
        v9 = (char *)malloc_type_malloc(2 * a4, 0x1000040BDFB0063uLL);
        v33 = v9;
      }
      else
      {
        MEMORY[0x1E0C80A78](GlyphCount);
        v33 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
        bzero(v33, 2 * a4);
      }
      v10 = 16 * a4;
      if (16 * a4 > 0x2000)
      {
        v11 = (CGPoint *)malloc_type_malloc(16 * a4, 0x1000040451B5BE8uLL);
      }
      else
      {
        MEMORY[0x1E0C80A78](v9);
        v11 = (CGPoint *)((char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
        bzero(v11, 16 * a4);
      }
      if (v33 && v11)
      {
        GlyphRuns = CTLineGetGlyphRuns(v31);
        v29 = 16 * a4;
        v30 = 2 * a4;
        v37 = 0u;
        v36 = 0u;
        v35 = 0u;
        v34 = 0u;
        v32 = GlyphRuns;
        v13 = -[__CFArray countByEnumeratingWithState:objects:count:](v32, "countByEnumeratingWithState:objects:count:", &v34, v38, 16);
        if (v13)
        {
          v14 = 0;
          v15 = *(_QWORD *)v35;
          v16 = 0.0;
          do
          {
            for (i = 0; i != v13; ++i)
            {
              if (*(_QWORD *)v35 != v15)
                objc_enumerationMutation(v32);
              v18 = *(const __CTRun **)(*((_QWORD *)&v34 + 1) + 8 * i);
              v19 = CTRunGetGlyphCount(v18);
              v40.location = 0;
              v40.length = v19;
              CTRunGetGlyphs(v18, v40, (CGGlyph *)v33);
              v41.location = 0;
              v41.length = v19;
              CTRunGetPositions(v18, v41, v11);
              if (v19)
              {
                v20 = *((_BYTE *)this + 123);
                v21 = 24 * v14 + 19;
                v22 = (double *)(*((_QWORD *)this + 11) + 16 * v14);
                p_x = &v11->x;
                do
                {
                  v24 = *p_x;
                  v25 = *v22;
                  v26 = *p_x - (*v22 + v16);
                  if (fabsf(v26) > 5.0 || v20 == 0)
                  {
                    *(_BYTE *)(*((_QWORD *)this + 7) + v21) = 1;
                    *((_BYTE *)this + 123) = ++v20;
                  }
                  ++v14;
                  v16 = v24 - v25;
                  p_x += 2;
                  v21 += 24;
                  v22 += 2;
                  --v19;
                }
                while (v19);
              }
            }
            v13 = -[__CFArray countByEnumeratingWithState:objects:count:](v32, "countByEnumeratingWithState:objects:count:", &v34, v38, 16);
          }
          while (v13);
        }

        v8 = v30;
        v10 = v29;
      }
      if (v8 > 0x2000)
        free(v33);
      if (v10 > 0x2000)
        free(v11);
    }
    CFRelease(v31);
  }
}

void sub_19FA47080(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 - 328));
  _Unwind_Resume(a1);
}

void grl::FontKey::~FontKey(grl::FontKey *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E42B0650;
  v2 = (void *)*((_QWORD *)this + 12);
  if (v2)
  {
    *((_QWORD *)this + 13) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 95) < 0)
  {
    operator delete(*((void **)this + 9));
    if ((*((char *)this + 71) & 0x80000000) == 0)
    {
LABEL_5:
      if (!*((_BYTE *)this + 32))
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  else if ((*((char *)this + 71) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*((void **)this + 6));
  if (*((_BYTE *)this + 32))
LABEL_6:
    *((_BYTE *)this + 32) = 0;
LABEL_7:
  if (*((_BYTE *)this + 24))
    *((_BYTE *)this + 24) = 0;
}

{
  esl::FontKey::~FontKey(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__split_buffer<md::FontGlyphInfo,geo::StdAllocator<md::FontGlyphInfo,mdm::Allocator> &>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 24;
    CGFontRelease(*(CGFontRef *)(i - 16));
  }
  if (*(_QWORD *)a1)
    (*(void (**)(_QWORD, _QWORD, _QWORD))(***(_QWORD ***)(a1 + 32) + 40))(**(_QWORD **)(a1 + 32), *(_QWORD *)a1, *(_QWORD *)(a1 + 24) - *(_QWORD *)a1);
  return a1;
}

_QWORD *md::LabelRouteCollisionInfo::LabelRouteCollisionInfo(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  BOOL v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v41;
  _OWORD *v42;
  _OWORD *v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v53;
  int v54;
  uint64_t v55;
  geo::read_write_lock *v56;
  const char *v57;
  malloc_zone_t *zone;
  uint64_t v59;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if ((v6 & 1) == 0)
  {
    v53 = a3;
    v59 = a2;
    a2 = v59;
    a3 = v53;
    if (v54)
    {
      v55 = operator new();
      *(_QWORD *)(v55 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v55 + 24) = "VectorKitLabels";
      *(_OWORD *)(v55 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v55 = &off_1E42B5668;
      *(_QWORD *)(v55 + 8) = "VectorKitLabels";
      *(_OWORD *)(v55 + 72) = 0u;
      *(_OWORD *)(v55 + 88) = 0u;
      *(_OWORD *)(v55 + 104) = 0u;
      *(_OWORD *)(v55 + 120) = 0u;
      *(_OWORD *)(v55 + 136) = 0u;
      *(_OWORD *)(v55 + 152) = 0u;
      *(_OWORD *)(v55 + 168) = 0u;
      *(_OWORD *)(v55 + 184) = 0u;
      *(_OWORD *)(v55 + 200) = 0u;
      *(_OWORD *)(v55 + 216) = 0u;
      *(_OWORD *)(v55 + 232) = 0u;
      *(_QWORD *)(v55 + 248) = 0;
      *(_OWORD *)(v55 + 56) = 0u;
      v56 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v55 + 56), 0);
      if ((_DWORD)v56)
        geo::read_write_lock::logFailure(v56, (uint64_t)"initialization", v57);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v55 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v55 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v55;
      a3 = v53;
      a2 = v59;
    }
  }
  v7 = mdm::Allocator::instance(void)::alloc;
  a1[6] = 0;
  a1[3] = v7;
  a1[4] = a2;
  a1[5] = a3;
  a1[7] = 0;
  v8 = *(_QWORD *)(a4 + 24);
  a1[8] = 0;
  a1[9] = v8;
  v9 = *(_QWORD **)a4;
  v10 = *(_QWORD **)(a4 + 8);
  v11 = (uint64_t)v10 - *(_QWORD *)a4;
  if (v11)
  {
    if (v11 < 0)
      abort();
    v12 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, v11, 4);
    a1[6] = v12;
    a1[7] = v12;
    a1[8] = &v12[v11 >> 3];
    do
    {
      if (v12)
        *v12 = *v9;
      ++v9;
      ++v12;
    }
    while (v9 != v10);
    a1[7] = v12;
  }
  v13 = (_QWORD *)*a1;
  v14 = (_QWORD *)a1[1];
  v15 = (uint64_t)v14 - *a1;
  if ((unint64_t)v15 > 0x47)
  {
    if (v15 != 72)
    {
      v25 = v13 + 9;
      if (v14 != v13 + 9)
      {
        v26 = (_QWORD *)a1[1];
        do
        {
          v28 = (_QWORD *)*--v26;
          v27 = v28;
          if (v28)
          {
            v29 = (*v27)-- == 1;
            if (v29)
            {
              md::LabelRouteZoomCollisionInfo::~LabelRouteZoomCollisionInfo((md::LabelRouteZoomCollisionInfo *)(v27 + 1));
              operator delete((void *)*(v14 - 1));
              *(v14 - 1) = 0;
            }
          }
          v14 = v26;
        }
        while (v26 != v25);
      }
      a1[1] = v25;
    }
  }
  else
  {
    v16 = (unint64_t)v15 >> 3;
    v17 = 9 - ((unint64_t)v15 >> 3);
    v18 = a1[2];
    if (v17 <= (v18 - (uint64_t)v14) >> 3)
    {
      v30 = &v14[v17];
      v31 = 72 - 8 * v16;
      do
      {
        if (v14)
          *v14 = 0;
        ++v14;
        v31 -= 8;
      }
      while (v31);
      a1[1] = v30;
    }
    else
    {
      v19 = v15 >> 3;
      v20 = (v15 >> 3) + v17;
      if (v20 >> 61)
        abort();
      v21 = v18 - (_QWORD)v13;
      v22 = v21 >> 2;
      if (v21 >> 2 <= v20)
        v22 = (v15 >> 3) + v17;
      if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
        v23 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v23 = v22;
      if (v23)
        v24 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 16))(a1[3], 8 * v23, 8);
      else
        v24 = 0;
      v32 = (_QWORD *)(v24 + 8 * v19);
      v33 = &v32[v17];
      v34 = 72 - 8 * v16;
      v35 = v32;
      do
      {
        if (v35)
          *v35 = 0;
        ++v35;
        v34 -= 8;
      }
      while (v34);
      v36 = v24 + 8 * v23;
      v37 = (_QWORD *)*a1;
      v38 = (_QWORD *)a1[1];
      if (v38 == (_QWORD *)*a1)
      {
        *a1 = v32;
        a1[1] = v33;
        v48 = a1[2];
        a1[2] = v36;
      }
      else
      {
        v39 = (unint64_t)v38 - *a1 - 8;
        if (v39 <= 0x67)
          goto LABEL_68;
        if (v15 - (v39 & 0xFFFFFFFFFFFFFFF8) + v24 - 8 < (unint64_t)v38
          && (_QWORD *)((char *)v38 - (v39 & 0xFFFFFFFFFFFFFFF8) - 8) < v32)
        {
          goto LABEL_68;
        }
        v41 = (v39 >> 3) + 1;
        v42 = (_OWORD *)(v24 + 8 * v19 - 32);
        v43 = v38 - 4;
        v44 = v41 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          *v42 = 0uLL;
          v42[1] = 0uLL;
          v45 = v43[1];
          *v42 = *v43;
          v42[1] = v45;
          v42 -= 2;
          *v43 = 0uLL;
          v43[1] = 0uLL;
          v43 -= 2;
          v44 -= 4;
        }
        while (v44);
        v32 -= v41 & 0x3FFFFFFFFFFFFFFCLL;
        v38 -= v41 & 0x3FFFFFFFFFFFFFFCLL;
        if (v41 != (v41 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_68:
          do
          {
            *--v32 = 0;
            v46 = *--v38;
            *v32 = v46;
            *v38 = 0;
          }
          while (v38 != v37);
        }
        v38 = (_QWORD *)*a1;
        v47 = (_QWORD *)a1[1];
        *a1 = v32;
        a1[1] = v33;
        v48 = a1[2];
        a1[2] = v36;
        if (v47 != v38)
        {
          v49 = v47;
          do
          {
            v51 = (_QWORD *)*--v49;
            v50 = v51;
            if (v51)
            {
              v29 = (*v50)-- == 1;
              if (v29)
              {
                md::LabelRouteZoomCollisionInfo::~LabelRouteZoomCollisionInfo((md::LabelRouteZoomCollisionInfo *)(v50 + 1));
                operator delete((void *)*(v47 - 1));
                *(v47 - 1) = 0;
              }
            }
            v47 = v49;
          }
          while (v49 != v38);
        }
      }
      if (v38)
        (*(void (**)(_QWORD, _QWORD *, uint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v38, v48 - (_QWORD)v38);
    }
  }
  return a1;
}

void sub_19FA47620(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v4 = *v2;
  if (*v2)
  {
    v1[7] = v4;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1[9] + 40))(v1[9], v4, v1[8] - v4);
    v5 = *v1;
    if (!*v1)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v5 = *v1;
    if (!*v1)
      goto LABEL_3;
  }
  v6 = v1[1];
  v7 = v5;
  if (v6 != v5)
  {
    v8 = v1[1];
    do
    {
      v10 = *(_QWORD **)(v8 - 8);
      v8 -= 8;
      v9 = v10;
      if (v10)
      {
        if ((*v9)-- == 1)
        {
          md::LabelRouteZoomCollisionInfo::~LabelRouteZoomCollisionInfo((md::LabelRouteZoomCollisionInfo *)(v9 + 1));
          operator delete(*(void **)(v6 - 8));
          *(_QWORD *)(v6 - 8) = 0;
        }
      }
      v6 = v8;
    }
    while (v8 != v5);
    v7 = *v1;
  }
  v1[1] = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1[3] + 40))(v1[3], v7, v1[2] - v7);
  _Unwind_Resume(exception_object);
}

uint64_t md::LabelRouteCollisionInfo::collisionInfoForZoom(md::LabelRouteCollisionInfo *this, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  char v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  double v14;
  double v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _OWORD *v51;
  __int128 *v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int *v57;
  uint64_t v58;
  unint64_t v59;
  unsigned int v60;
  double v61;
  _DWORD *v62;
  unsigned int v63;
  uint64_t v64;
  _DWORD *v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  _DWORD *v69;
  unint64_t v70;
  _DWORD *v71;
  uint64_t v72;
  int32x4_t v73;
  int32x4_t *v74;
  uint64_t v75;
  int32x4_t v76;
  _DWORD *v77;
  uint64_t v78;
  unint64_t v79;
  double *v80;
  uint64_t v81;
  unint64_t v82;
  double *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _OWORD *v91;
  __int128 *v92;
  uint64_t v93;
  __int128 v94;
  int v95;
  uint64_t v96;
  int *v97;
  int v98;
  int v99;
  _QWORD *v100;
  int v101;
  uint64_t v102;
  double *v103;
  double v104;
  double v105;
  int v106;
  double *v107;
  double v108;
  double v109;
  double v110;
  int v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  BOOL v117;
  double v118;
  double v119;
  double v120;
  int v121;
  double v122;
  BOOL v123;
  double v124;
  int v125;
  int v126;
  int v127;
  BOOL v128;
  _QWORD *i;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v136;
  double *v137;
  unsigned int *v138;
  unsigned int *v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  unsigned int v143;
  uint64_t v144;
  uint64_t v145;
  double v146;
  double v147;
  double v148;
  double v149;
  double *v150;
  int v151;
  uint64_t v152;
  int v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  md::LabelRouteCollisionInfo *v159;
  uint64_t v160;
  int *v161;
  uint64_t *v162;
  uint64_t *v163;
  int *v164;
  _QWORD *v165;
  int v166;
  _QWORD *v167;
  uint64_t v168;
  unsigned int v169[3];

  if (a2 >> 1 >= 8)
    v2 = 8;
  else
    v2 = a2 >> 1;
  v3 = *(_QWORD *)(*(_QWORD *)this + 8 * v2);
  if (v3)
    goto LABEL_141;
  v160 = v2;
  v5 = 2 * v2;
  v6 = operator new(0x98uLL);
  *v6 = 1;
  v6[1] = this;
  v168 = (uint64_t)(v6 + 1);
  *((_BYTE *)v6 + 16) = v5;
  __powidf2();
  v7 = v6;
  v6[4] = 0;
  v6[3] = v8;
  v6[5] = 0;
  v167 = v6;
  if ((v9 & 1) == 0)
  {
    v7 = v6;
    if (v151)
    {
      v152 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v152, "VectorKitLabels", 0x5ED09DD50000000FLL);
      v7 = v6;
    }
  }
  v7[6] = mdm::Allocator::instance(void)::alloc;
  v7[7] = 0;
  if ((v10 & 1) == 0)
  {
    v7 = v6;
    if (v153)
    {
      v154 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v154, "VectorKitLabels", 0x5ED09DD50000000FLL);
      v7 = v6;
    }
  }
  v11 = mdm::Allocator::instance(void)::alloc;
  v7[11] = 0;
  v7[8] = v11;
  v7[9] = 0;
  *((_DWORD *)v7 + 20) = 1065353216;
  v7[12] = 0;
  v7[13] = 0;
  v163 = v7 + 11;
  if ((v11 & 1) == 0)
  {
    v7 = v6;
    if (v155)
    {
      v156 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v156, "VectorKitLabels", 0x5ED09DD50000000FLL);
      v7 = v6;
    }
  }
  v12 = mdm::Allocator::instance(void)::alloc;
  v7[15] = 0;
  v7[14] = v12;
  v7[16] = 0;
  v7[17] = 0;
  v162 = v7 + 15;
  if ((v12 & 1) == 0)
  {
    v7 = v6;
    if (v157)
    {
      v158 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v158, "VectorKitLabels", 0x5ED09DD50000000FLL);
      v7 = v6;
    }
  }
  v7[18] = mdm::Allocator::instance(void)::alloc;
  v13 = v7;
  __powidf2();
  v15 = v14;
  v16 = (_QWORD *)v13[1];
  v17 = (_QWORD *)v16[4];
  v18 = (uint64_t)(v17[1] - *v17) >> 4;
  v19 = v13[11];
  v20 = (v13[12] - v19) >> 2;
  if (v18 <= v20)
  {
    if (v18 >= v20)
    {
      v21 = v6;
    }
    else
    {
      v22 = v19 + 4 * v18;
      v21 = v6;
      v6[12] = v22;
    }
  }
  else
  {
    std::vector<unsigned int,geo::StdAllocator<unsigned int,mdm::Allocator>>::__append((uint64_t)v163, v18 - v20);
    v21 = v6;
    v16 = *(_QWORD **)v168;
  }
  v23 = (unsigned int *)v16[6];
  v24 = v16[7] - (_QWORD)v23;
  v25 = v24 >> 3;
  v26 = v21;
  v29 = v21 + 15;
  v28 = v21[15];
  v27 = (_QWORD *)v29[1];
  v30 = (char *)v27 - v28;
  v31 = ((uint64_t)v27 - v28) >> 3;
  v32 = (v24 >> 3) - v31;
  if (v24 >> 3 <= v31)
  {
    if (v24 >> 3 >= v31)
    {
      v43 = v167;
    }
    else
    {
      v42 = v28 + 8 * v25;
      v43 = v167;
      v167[16] = v42;
    }
  }
  else
  {
    v33 = v26[17];
    if (v32 <= (v33 - (uint64_t)v27) >> 3)
    {
      v44 = &v27[v32];
      v45 = 8 * v25 - 8 * v31;
      do
      {
        if (v27)
          *v27 = 0;
        ++v27;
        v45 -= 8;
      }
      while (v45);
      v43 = v167;
      v167[16] = v44;
    }
    else
    {
      if (v24 < 0)
        abort();
      v34 = v33 - v28;
      v35 = v34 >> 2;
      if (v34 >> 2 <= v25)
        v35 = v24 >> 3;
      if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
        v36 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v36 = v35;
      v37 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v167[18] + 16))(v167[18], 8 * v36, 4);
      v38 = (_QWORD *)(v37 + 8 * v31);
      v39 = v37 + 8 * v25;
      v40 = 8 * v25 - 8 * v31;
      v41 = v38;
      do
      {
        if (v41)
          *v41 = 0;
        ++v41;
        v40 -= 8;
      }
      while (v40);
      v46 = v37 + 8 * v36;
      v48 = v167[15];
      v47 = v167[16];
      if (v47 != v48)
      {
        v49 = v47 - v48 - 8;
        if (v49 < 0x58)
          goto LABEL_166;
        if ((unint64_t)(v47 - (_QWORD)&v30[v37]) < 0x20)
          goto LABEL_166;
        v50 = (v49 >> 3) + 1;
        v51 = (_OWORD *)(v37 + 8 * v31 - 16);
        v52 = (__int128 *)(v47 - 16);
        v53 = v50 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v54 = *v52;
          *(v51 - 1) = *(v52 - 1);
          *v51 = v54;
          v51 -= 2;
          v52 -= 2;
          v53 -= 4;
        }
        while (v53);
        v38 -= v50 & 0x3FFFFFFFFFFFFFFCLL;
        v47 -= 8 * (v50 & 0x3FFFFFFFFFFFFFFCLL);
        if (v50 != (v50 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_166:
          do
          {
            v55 = *(_QWORD *)(v47 - 8);
            v47 -= 8;
            *--v38 = v55;
          }
          while (v47 != v48);
        }
        v47 = *v162;
      }
      v167[15] = v38;
      v167[16] = v39;
      v56 = v167[17];
      v167[17] = v46;
      v43 = v167;
      if (v47)
      {
        (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v167[18] + 40))(v167[18], v47, v56 - v47);
        v43 = v167;
      }
    }
    v16 = *(_QWORD **)v168;
    v23 = *(unsigned int **)(*(_QWORD *)v168 + 48);
  }
  v57 = (unsigned int *)v16[7];
  v58 = *v163;
  if (v23 == v57)
  {
    v59 = 0;
    v78 = v43[12];
    v79 = (v78 - v58) >> 2;
    goto LABEL_67;
  }
  LODWORD(v59) = 0;
  v60 = 0;
  v61 = v15 * 0.01;
  do
  {
    v64 = *v23;
    v63 = v23[1];
    v65 = (_DWORD *)(v58 + 4 * v59);
    if (v63 > 2)
    {
      v66 = *v17 + 16 * v64;
      v169[0] = 1;
      *v65 = 0;
      v67 = v63 - 1;
      geo::dpSimplifyViaIndexes<gm::Matrix<double,2,1>,unsigned int>(v66, 0, v63 - 1, (uint64_t)v65, v169, v61);
      v68 = v169[0]++;
      v65[v68] = v67;
      v58 = *v163;
      v63 = v169[0];
      if (!v169[0])
        goto LABEL_47;
    }
    else if (v63 && (*v65 = 0, v63 != 1))
    {
      v65[1] = 1;
      v169[0] = v63;
    }
    else
    {
      v169[0] = v63;
      if (!v63)
        goto LABEL_47;
    }
    v69 = (_DWORD *)(v58 + 4 * v59);
    v70 = (v63 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    v71 = v69;
    if (v70 < 7)
      goto LABEL_61;
    v72 = (v70 + 1) & 0x7FFFFFFFFFFFFFF8;
    v73 = vdupq_n_s32(v64);
    v74 = (int32x4_t *)(v58 + 4 * v59 + 16);
    v75 = v72;
    do
    {
      v76 = vaddq_s32(*v74, v73);
      v74[-1] = vaddq_s32(v74[-1], v73);
      *v74 = v76;
      v74 += 2;
      v75 -= 8;
    }
    while (v75);
    if (v70 + 1 != v72)
    {
      v71 = &v69[v72];
LABEL_61:
      v77 = &v69[v63];
      do
        *v71++ += v64;
      while (v71 != v77);
      v63 = v169[0];
    }
LABEL_47:
    v62 = (_DWORD *)(*v162 + 8 * v60);
    *v62 = v59;
    v62[1] = v63;
    v59 = v63 + v59;
    ++v60;
    v23 += 2;
  }
  while (v23 != v57);
  v78 = v167[12];
  v79 = (v78 - v58) >> 2;
  if (v59 > v79)
  {
    std::vector<unsigned int,geo::StdAllocator<unsigned int,mdm::Allocator>>::__append((uint64_t)v163, v59 - v79);
    v80 = (double *)v167;
    v58 = v167[11];
    v78 = v167[12];
    goto LABEL_70;
  }
LABEL_67:
  if (v79 <= v59)
  {
    v80 = (double *)v167;
  }
  else
  {
    v78 = v58 + 4 * v59;
    v80 = (double *)v167;
    v167[12] = v78;
  }
LABEL_70:
  v81 = v78 - v58;
  v82 = (v78 - v58) >> 2;
  if (v82 >= (*((_QWORD *)v80 + 13) - v58) >> 2)
    goto LABEL_85;
  if (v78 == v58)
  {
    v86 = 4 * v82;
    goto LABEL_76;
  }
  v83 = v80;
  v84 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v80 + 14) + 16))(*((_QWORD *)v80 + 14), v78 - v58, 4);
  v85 = *((_QWORD *)v83 + 11);
  v78 = *((_QWORD *)v83 + 12);
  v86 = v84 + 4 * v82;
  v87 = v78 - v85;
  if (v78 == v85)
  {
LABEL_76:
    v89 = v86;
    goto LABEL_83;
  }
  v88 = v87 - 4;
  if ((unint64_t)(v87 - 4) < 0x2C)
  {
    v89 = v84 + 4 * v82;
    goto LABEL_81;
  }
  v89 = v84 + 4 * v82;
  if ((unint64_t)(v78 - (v81 + v84)) < 0x20)
    goto LABEL_167;
  v90 = (v88 >> 2) + 1;
  v91 = (_OWORD *)(v84 + 4 * v82 - 16);
  v92 = (__int128 *)(v78 - 16);
  v93 = v90 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v94 = *v92;
    *(v91 - 1) = *(v92 - 1);
    *v91 = v94;
    v91 -= 2;
    v92 -= 2;
    v93 -= 8;
  }
  while (v93);
  v89 = v86 - 4 * (v90 & 0x7FFFFFFFFFFFFFF8);
  v78 -= 4 * (v90 & 0x7FFFFFFFFFFFFFF8);
  if (v90 != (v90 & 0x7FFFFFFFFFFFFFF8))
  {
LABEL_167:
    do
    {
LABEL_81:
      v95 = *(_DWORD *)(v78 - 4);
      v78 -= 4;
      *(_DWORD *)(v89 - 4) = v95;
      v89 -= 4;
    }
    while (v78 != v85);
  }
  v78 = v85;
LABEL_83:
  v167[11] = v89;
  v167[12] = v86;
  v80 = (double *)v167;
  v96 = v167[13];
  v167[13] = v86;
  if (v78)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v167[14] + 40))(v167[14], v78, v96 - v78);
    v80 = (double *)v167;
  }
LABEL_85:
  v159 = this;
  v97 = (int *)*((_QWORD *)v80 + 15);
  v161 = (int *)*((_QWORD *)v80 + 16);
  if (v97 != v161)
  {
    v98 = 0;
    v99 = 0;
    v100 = *(_QWORD **)(*((_QWORD *)v80 + 1) + 32);
    v165 = v100;
    do
    {
      v166 = v97[1] - 1;
      v164 = v97;
      if (v166 >= 1)
      {
        v101 = 0;
        v102 = *v97;
        v103 = (double *)(*v100 + 16 * *(unsigned int *)(*v163 + 4 * v102));
        v105 = *v103;
        v104 = v103[1];
        v106 = *v97;
        do
        {
          v107 = (double *)(*v100 + 16 * *(unsigned int *)(*((_QWORD *)v80 + 11) + 4 * (v102 + 1)));
          v108 = *v107;
          v109 = vabdd_f64(*v107, v105);
          v110 = v80[3];
          v111 = (int)(v105 / v110);
          v112 = 0.0;
          v113 = 1.0;
          v114 = 1.0;
          v115 = 0.0;
          if (v109 > 2.22044605e-16)
          {
            v116 = v108 - v105;
            v117 = v108 - v105 <= 0.0;
            v118 = v110 * (double)v111;
            if (v108 - v105 <= 0.0)
            {
              v116 = v109;
            }
            else
            {
              v118 = v105;
              v105 = v110 * (double)(v111 + 1);
            }
            if (v117)
              v99 = -1;
            else
              v99 = 1;
            v114 = (v105 - v118) / v116;
            v115 = v110 / v109;
          }
          v119 = v107[1];
          v120 = vabdd_f64(v119, v104);
          v121 = (int)(v104 / v110);
          if (v120 > 2.22044605e-16)
          {
            v122 = v119 - v104;
            v123 = v119 - v104 <= 0.0;
            v124 = v110 * (double)v121;
            if (v119 - v104 <= 0.0)
            {
              v122 = v120;
            }
            else
            {
              v124 = v104;
              v104 = v110 * (double)(v121 + 1);
            }
            if (v123)
              v98 = -1;
            else
              v98 = 1;
            v113 = (v104 - v124) / v122;
            v112 = v110 / v120;
          }
          v125 = v102 + 2;
          if (v114 < 1.0 || v113 < 1.0)
          {
            md::LabelRouteZoomCollisionInfo::addPathToTile(v168, v111, v121, v106, v125 - v106);
            if (v114 < v113)
              v111 += v99;
            else
              v121 += v98;
            if (v114 >= v113)
              v113 = v113 + v112;
            else
              v114 = v114 + v115;
            if (v114 < 1.0 || v113 < 1.0)
            {
              v126 = v121;
              v127 = v111;
              do
              {
                md::LabelRouteZoomCollisionInfo::addPathToTile(v168, v111, v121, v102, 2);
                v128 = v114 < v113;
                if (v114 < v113)
                  v111 = v127 + v99;
                else
                  v121 = v126 + v98;
                if (v114 >= v113)
                  v126 += v98;
                else
                  v127 += v99;
                if (v114 < v113)
                  v114 = v114 + v115;
                if (!v128)
                  v113 = v113 + v112;
              }
              while (v114 < 1.0 || v113 < 1.0);
              v106 = v102;
              v100 = v165;
            }
            else
            {
              v106 = v102;
            }
          }
          md::LabelRouteZoomCollisionInfo::addPathToTile(v168, v111, v121, v106, v125 - v106);
          ++v101;
          LODWORD(v102) = v102 + 1;
          v105 = v108;
          v104 = v119;
          v80 = (double *)v167;
        }
        while (v101 != v166);
      }
      v97 = v164 + 2;
    }
    while (v164 + 2 != v161);
  }
  for (i = (_QWORD *)*((_QWORD *)v80 + 7); i; i = (_QWORD *)*i)
  {
    v136 = i[3];
    if (v136)
      v137 = (double *)(v136 + 8);
    else
      v137 = 0;
    v138 = (unsigned int *)*((_QWORD *)v137 + 5);
    v139 = (unsigned int *)*((_QWORD *)v137 + 6);
    if (v138 != v139)
    {
      v140 = *(_QWORD *)v137;
      v141 = *(uint64_t **)(**(_QWORD **)v137 + 32);
      do
      {
        v142 = v138[1];
        if ((_DWORD)v142)
        {
          v143 = *v138;
          v144 = *(_QWORD *)(v140 + 80);
          v145 = *v141;
          v146 = v137[1];
          v147 = v137[2];
          v148 = v137[3];
          v149 = v137[4];
          do
          {
            v150 = (double *)(v145 + 16 * *(unsigned int *)(v144 + 4 * v143));
            v146 = fmin(*v150, v146);
            v137[1] = v146;
            v148 = fmax(v148, *v150);
            v137[3] = v148;
            v147 = fmin(v150[1], v147);
            v137[2] = v147;
            v149 = fmax(v149, v150[1]);
            v137[4] = v149;
            ++v143;
            --v142;
          }
          while (v142);
        }
        v138 += 2;
      }
      while (v138 != v139);
    }
  }
  v131 = *(_QWORD *)v159;
  v132 = *(_QWORD **)(*(_QWORD *)v159 + 8 * v160);
  v133 = *(_QWORD *)v159;
  if (v132)
  {
    v133 = *(_QWORD *)v159;
    if ((*v132)-- == 1)
    {
      md::LabelRouteZoomCollisionInfo::~LabelRouteZoomCollisionInfo((md::LabelRouteZoomCollisionInfo *)(v132 + 1));
      operator delete(*(void **)(v131 + 8 * v160));
      *(_QWORD *)(v131 + 8 * v160) = 0;
      v133 = *(_QWORD *)v159;
    }
  }
  *(_QWORD *)(v131 + 8 * v160) = v167;
  v3 = *(_QWORD *)(v133 + 8 * v160);
LABEL_141:
  if (v3)
    return v3 + 8;
  else
    return 0;
}

void sub_19FA4822C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t *a14, uint64_t *a15, uint64_t a16, uint64_t a17, uint64_t a18, _QWORD *a19, md::LabelRouteZoomCollisionInfo *a20)
{
  uint64_t v21;
  uint64_t v22;

  v21 = *a14;
  if (*a14)
  {
    a19[16] = v21;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)a19[18] + 40))(a19[18], v21, a19[17] - v21);
  }
  v22 = *a15;
  if (*a15)
  {
    a19[12] = v22;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)a19[14] + 40))(a19[14], v22, a19[13] - v22);
  }
  std::unordered_map<unsigned int,geo::fast_shared_ptr<md::LabelRouteTileCollisionInfo,std::allocator>,std::hash<unsigned int>,std::equal_to<unsigned int>,geo::StdAllocator<std::pair<unsigned int const,geo::fast_shared_ptr<md::LabelRouteTileCollisionInfo,std::allocator>>,mdm::Allocator>>::~unordered_map[abi:nn180100](a10);
  if ((*a19)-- == 1)
  {
    md::LabelRouteZoomCollisionInfo::~LabelRouteZoomCollisionInfo(a20);
    operator delete(a19);
  }
  _Unwind_Resume(a1);
}

uint64_t *std::unordered_map<unsigned int,geo::fast_shared_ptr<md::LabelRouteTileCollisionInfo,std::allocator>,std::hash<unsigned int>,std::equal_to<unsigned int>,geo::StdAllocator<std::pair<unsigned int const,geo::fast_shared_ptr<md::LabelRouteTileCollisionInfo,std::allocator>>,mdm::Allocator>>::~unordered_map[abi:nn180100](uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v8;

  v2 = (_QWORD *)a1[3];
  while (v2)
  {
    v5 = v2;
    v2 = (_QWORD *)*v2;
    v6 = (_QWORD *)v5[3];
    if (v6)
    {
      if ((*v6)-- == 1)
      {
        v8 = v6[6];
        if (v8)
        {
          v6[7] = v8;
          (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v6[9] + 40))(v6[9], v8, v6[8] - v8);
          v6 = (_QWORD *)v5[3];
        }
        operator delete(v6);
        v5[3] = 0;
      }
    }
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1[4] + 40))(a1[4], v5, 32);
  }
  v3 = *a1;
  *a1 = 0;
  if (v3)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[2] + 40))(a1[2], v3, 8 * a1[1]);
  return a1;
}

void md::LabelRouteZoomCollisionInfo::addPathToTile(uint64_t a1, int a2, int a3, int a4, int a5)
{
  unint64_t v5;
  unint64_t v7;
  int8x8_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t *v18;
  int64x2_t *v19;
  int64x2_t *v20;
  unsigned __int8 v21;
  unint64_t v22;
  uint8x8_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  float v28;
  float v29;
  _BOOL8 v30;
  unint64_t v31;
  unint64_t v32;
  size_t prime;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  size_t v39;
  size_t v40;
  size_t v41;
  _QWORD *i;
  size_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint8x8_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  size_t v51;
  uint64_t v52;
  uint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  _DWORD *v59;
  unint64_t v60;
  _DWORD *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _DWORD *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _OWORD *v74;
  __int128 *v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;

  v7 = (a3 + (a2 << 16));
  v8 = *(int8x8_t *)(a1 + 32);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8(v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v10 = (a3 + (a2 << 16));
      if (*(_QWORD *)&v8 <= v7)
        v10 = v7 % *(_QWORD *)&v8;
    }
    else
    {
      v10 = (v8.i32[0] - 1) & v7;
    }
    v11 = *(uint64_t ***)(*(_QWORD *)(a1 + 24) + 8 * v10);
    if (v11)
    {
      v12 = *v11;
      if (v12)
      {
        if (v9.u32[0] < 2uLL)
        {
          v13 = *(_QWORD *)&v8 - 1;
          while (1)
          {
            v15 = v12[1];
            if (v15 == v7)
            {
              if (*((_DWORD *)v12 + 4) == (_DWORD)v7)
                goto LABEL_21;
            }
            else if ((v15 & v13) != v10)
            {
              goto LABEL_24;
            }
            v12 = (uint64_t *)*v12;
            if (!v12)
              goto LABEL_24;
          }
        }
        do
        {
          v14 = v12[1];
          if (v14 == v7)
          {
            if (*((_DWORD *)v12 + 4) == (_DWORD)v7)
            {
LABEL_21:
              v16 = a4;
              v17 = v12[3];
              if (v17)
                v18 = (uint64_t *)(v17 + 8);
              else
                v18 = 0;
              goto LABEL_116;
            }
          }
          else
          {
            if (v14 >= *(_QWORD *)&v8)
              v14 %= *(_QWORD *)&v8;
            if (v14 != v10)
              break;
          }
          v12 = (uint64_t *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_24:
  v16 = a4;
  v19 = (int64x2_t *)operator new(0x50uLL);
  v19->i64[1] = a1;
  v18 = &v19->i64[1];
  v19->i64[0] = 1;
  v19[1] = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  v19[2] = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  v19[3].i64[0] = 0;
  v20 = v19 + 3;
  v19[3].i64[1] = 0;
  v19[4].i64[0] = 0;
  {
    v81 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v81, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v19[4].i64[1] = mdm::Allocator::instance(void)::alloc;
  v22 = *(_QWORD *)(a1 + 32);
  if (v22)
  {
    v23 = (uint8x8_t)vcnt_s8((int8x8_t)v22);
    v23.i16[0] = vaddlv_u8(v23);
    if (v23.u32[0] > 1uLL)
    {
      v5 = v7;
      if (v22 <= v7)
        v5 = v7 % v22;
    }
    else
    {
      v5 = ((_DWORD)v22 - 1) & v7;
    }
    v24 = *(uint64_t **)(*(_QWORD *)(a1 + 24) + 8 * v5);
    if (v24)
    {
      v25 = *v24;
      if (*v24)
      {
        if (v23.u32[0] < 2uLL)
        {
          while (1)
          {
            v27 = *(_QWORD *)(v25 + 8);
            if (v27 == v7)
            {
              if (*(_DWORD *)(v25 + 16) == (_DWORD)v7)
                goto LABEL_105;
            }
            else if ((v27 & (v22 - 1)) != v5)
            {
              goto LABEL_46;
            }
            v25 = *(_QWORD *)v25;
            if (!v25)
              goto LABEL_46;
          }
        }
        do
        {
          v26 = *(_QWORD *)(v25 + 8);
          if (v26 == v7)
          {
            if (*(_DWORD *)(v25 + 16) == (_DWORD)v7)
              goto LABEL_105;
          }
          else
          {
            if (v26 >= v22)
              v26 %= v22;
            if (v26 != v5)
              break;
          }
          v25 = *(_QWORD *)v25;
        }
        while (v25);
      }
    }
  }
LABEL_46:
  v25 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 56) + 16))(*(_QWORD *)(a1 + 56), 32, 8);
  *(_QWORD *)v25 = 0;
  *(_QWORD *)(v25 + 8) = v7;
  *(_DWORD *)(v25 + 16) = v7;
  *(_QWORD *)(v25 + 24) = 0;
  v28 = (float)(unint64_t)(*(_QWORD *)(a1 + 64) + 1);
  v29 = *(float *)(a1 + 72);
  if (!v22 || (float)(v29 * (float)v22) < v28)
  {
    v30 = 1;
    if (v22 >= 3)
      v30 = (v22 & (v22 - 1)) != 0;
    v31 = v30 | (2 * v22);
    v32 = vcvtps_u32_f32(v28 / v29);
    if (v31 <= v32)
      prime = v32;
    else
      prime = v31;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v22 = *(_QWORD *)(a1 + 32);
    if (prime <= v22)
    {
      if (prime >= v22)
        goto LABEL_82;
      v46 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 64) / *(float *)(a1 + 72));
      if (v22 < 3 || (v47 = (uint8x8_t)vcnt_s8((int8x8_t)v22), v47.i16[0] = vaddlv_u8(v47), v47.u32[0] > 1uLL))
      {
        v46 = std::__next_prime(v46);
      }
      else
      {
        v48 = 1 << -(char)__clz(v46 - 1);
        if (v46 >= 2)
          v46 = v48;
      }
      if (prime <= v46)
        prime = v46;
      if (prime >= v22)
      {
        v22 = *(_QWORD *)(a1 + 32);
LABEL_82:
        if ((v22 & (v22 - 1)) != 0)
        {
          if (v22 <= v7)
            v5 = v7 % v22;
          else
            v5 = v7;
        }
        else
        {
          v5 = ((_DWORD)v22 - 1) & v7;
        }
        goto LABEL_95;
      }
      if (!prime)
      {
        v80 = *(_QWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 24) = 0;
        if (v80)
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 40) + 40))(*(_QWORD *)(a1 + 40), v80, 8 * *(_QWORD *)(a1 + 32));
        v22 = 0;
        *(_QWORD *)(a1 + 32) = 0;
        goto LABEL_82;
      }
    }
    v34 = (*(uint64_t (**)(_QWORD, size_t, uint64_t))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 8 * prime, 8);
    v35 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v34;
    if (v35)
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 40) + 40))(*(_QWORD *)(a1 + 40), v35, 8 * *(_QWORD *)(a1 + 32));
    v36 = 0;
    *(_QWORD *)(a1 + 32) = prime;
    do
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v36++) = 0;
    while (prime != v36);
    v38 = a1 + 48;
    v37 = *(_QWORD **)(a1 + 48);
    if (!v37)
    {
LABEL_81:
      v22 = prime;
      goto LABEL_82;
    }
    v39 = v37[1];
    v40 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v41 = v39 & v40;
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v41) = v38;
      for (i = (_QWORD *)*v37; *v37; i = (_QWORD *)*v37)
      {
        v43 = i[1] & v40;
        if (v43 == v41)
        {
          v37 = i;
        }
        else
        {
          v44 = *(_QWORD *)(a1 + 24);
          if (*(_QWORD *)(v44 + 8 * v43))
          {
            *v37 = *i;
            v45 = 8 * v43;
            *i = **(_QWORD **)(*(_QWORD *)(a1 + 24) + v45);
            **(_QWORD **)(*(_QWORD *)(a1 + 24) + v45) = i;
          }
          else
          {
            *(_QWORD *)(v44 + 8 * v43) = v37;
            v37 = i;
            v41 = v43;
          }
        }
      }
      goto LABEL_81;
    }
    if (v39 >= prime)
      v39 %= prime;
    *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v39) = v38;
    v49 = (_QWORD *)*v37;
    if (!*v37)
      goto LABEL_81;
    while (1)
    {
      v51 = v49[1];
      if (v51 >= prime)
        v51 %= prime;
      if (v51 != v39)
      {
        v52 = *(_QWORD *)(a1 + 24);
        if (!*(_QWORD *)(v52 + 8 * v51))
        {
          *(_QWORD *)(v52 + 8 * v51) = v37;
          goto LABEL_86;
        }
        *v37 = *v49;
        v50 = 8 * v51;
        *v49 = **(_QWORD **)(*(_QWORD *)(a1 + 24) + v50);
        **(_QWORD **)(*(_QWORD *)(a1 + 24) + v50) = v49;
        v49 = v37;
      }
      v51 = v39;
LABEL_86:
      v37 = v49;
      v49 = (_QWORD *)*v49;
      v39 = v51;
      if (!v49)
        goto LABEL_81;
    }
  }
LABEL_95:
  v53 = *(uint64_t **)(*(_QWORD *)(a1 + 24) + 8 * v5);
  if (v53)
  {
    *(_QWORD *)v25 = *v53;
  }
  else
  {
    *(_QWORD *)v25 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v25;
    *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v5) = a1 + 48;
    if (!*(_QWORD *)v25)
      goto LABEL_104;
    v54 = *(_QWORD *)(*(_QWORD *)v25 + 8);
    if ((v22 & (v22 - 1)) != 0)
    {
      if (v54 >= v22)
        v54 %= v22;
    }
    else
    {
      v54 &= v22 - 1;
    }
    v53 = (uint64_t *)(*(_QWORD *)(a1 + 24) + 8 * v54);
  }
  *v53 = v25;
LABEL_104:
  ++*(_QWORD *)(a1 + 64);
LABEL_105:
  ++v19->i64[0];
  v55 = *(_QWORD **)(v25 + 24);
  if (v55)
  {
    v56 = (*v55)-- == 1;
    if (v56)
    {
      v57 = v55[6];
      if (v57)
      {
        v55[7] = v57;
        (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v55[9] + 40))(v55[9], v57, v55[8] - v57);
        v55 = *(_QWORD **)(v25 + 24);
      }
      operator delete(v55);
      *(_QWORD *)(v25 + 24) = 0;
    }
  }
  *(_QWORD *)(v25 + 24) = v19;
  v56 = v19->i64[0]-- == 1;
  if (v56)
  {
    v58 = v20->i64[0];
    if (v20->i64[0])
    {
      v19[3].i64[1] = v58;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v19[4].i64[1] + 40))(v19[4].i64[1], v58, v19[4].i64[0] - v58);
    }
    operator delete(v19);
  }
LABEL_116:
  v59 = (_DWORD *)v18[6];
  v60 = v18[7];
  if ((unint64_t)v59 < v60)
  {
    if (v59)
    {
      *v59 = v16;
      v59[1] = a5;
    }
    v61 = v59 + 2;
    goto LABEL_142;
  }
  v62 = v18[5];
  v63 = ((uint64_t)v59 - v62) >> 3;
  v64 = v63 + 1;
  if ((unint64_t)(v63 + 1) >> 61)
    abort();
  v65 = v60 - v62;
  if (v65 >> 2 > v64)
    v64 = v65 >> 2;
  if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF8)
    v64 = 0x1FFFFFFFFFFFFFFFLL;
  if (v64)
  {
    v66 = 8 * v64;
    v67 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v18[8] + 16))(v18[8], 8 * v64, 4);
    v68 = (_DWORD *)(v67 + 8 * v63);
    v64 = v67 + v66;
    if (v67)
    {
      *v68 = v16;
      v68[1] = a5;
    }
  }
  else
  {
    v68 = (_DWORD *)(8 * v63);
  }
  v61 = v68 + 2;
  v70 = v18[5];
  v69 = v18[6];
  if (v69 != v70)
  {
    v71 = v69 - v70 - 8;
    if (v71 < 0x38)
    {
      v73 = v18[6];
    }
    else if ((unint64_t)(v69 - (_QWORD)v68) < 0x20)
    {
      v73 = v18[6];
    }
    else
    {
      v72 = (v71 >> 3) + 1;
      v73 = v69 - 8 * (v72 & 0x3FFFFFFFFFFFFFFCLL);
      v74 = v68 - 4;
      v75 = (__int128 *)(v69 - 16);
      v76 = v72 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v77 = *v75;
        *(v74 - 1) = *(v75 - 1);
        *v74 = v77;
        v74 -= 2;
        v75 -= 2;
        v76 -= 4;
      }
      while (v76);
      v68 -= 2 * (v72 & 0x3FFFFFFFFFFFFFFCLL);
      if (v72 == (v72 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_139;
    }
    do
    {
      v78 = *(_QWORD *)(v73 - 8);
      v73 -= 8;
      *((_QWORD *)v68 - 1) = v78;
      v68 -= 2;
    }
    while (v73 != v70);
LABEL_139:
    v69 = v18[5];
  }
  v18[5] = (uint64_t)v68;
  v18[6] = (uint64_t)v61;
  v79 = v18[7];
  v18[7] = v64;
  if (v69)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v18[8] + 40))(v18[8], v69, v79 - v69);
LABEL_142:
  v18[6] = (uint64_t)v61;
}

void sub_19FA48B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  _QWORD *v4;
  va_list va;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD *);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,geo::fast_shared_ptr<md::LabelRouteTileCollisionInfo,std::allocator>>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::__hash_value_type<unsigned int,geo::fast_shared_ptr<md::LabelRouteTileCollisionInfo,std::allocator>>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100]((uint64_t *)va1);
  geo::fast_shared_ptr<md::LabelRouteTileCollisionInfo,std::allocator>::~fast_shared_ptr((_QWORD **)va);
  _Unwind_Resume(a1);
}

_QWORD **geo::fast_shared_ptr<md::LabelRouteTileCollisionInfo,std::allocator>::~fast_shared_ptr(_QWORD **a1)
{
  _QWORD *v2;
  uint64_t v4;

  v2 = *a1;
  if (v2)
  {
    if ((*v2)-- == 1)
    {
      v4 = v2[6];
      if (v4)
      {
        v2[7] = v4;
        (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v2[9] + 40))(v2[9], v4, v2[8] - v4);
        v2 = *a1;
      }
      operator delete(v2);
      *a1 = 0;
    }
  }
  return a1;
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,geo::fast_shared_ptr<md::LabelRouteTileCollisionInfo,std::allocator>>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::__hash_value_type<unsigned int,geo::fast_shared_ptr<md::LabelRouteTileCollisionInfo,std::allocator>>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(_QWORD **)(v2 + 24);
      if (v3)
      {
        if ((*v3)-- == 1)
        {
          v5 = v3[6];
          if (v5)
          {
            v3[7] = v5;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v3[9] + 40))(v3[9], v5, v3[8] - v5);
            v3 = *(_QWORD **)(v2 + 24);
          }
          operator delete(v3);
          *(_QWORD *)(v2 + 24) = 0;
        }
      }
    }
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)a1[1] + 40))(*(_QWORD *)a1[1], v2, 32);
  }
  return a1;
}

uint64_t geo::dpSimplifyViaIndexes<gm::Matrix<double,2,1>,unsigned int>(uint64_t result, unsigned int a2, unsigned int a3, uint64_t a4, _DWORD *a5, double a6)
{
  unsigned int v6;
  uint64_t v11;
  double v12;
  uint64_t v13;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  unsigned int v22;
  float64x2_t v23;
  float64x2_t *v24;
  double v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  double v29;
  float64x2_t *v30;
  double v31;
  float64x2_t v32;
  float64x2_t v33;
  uint64_t v34;
  float64x2_t v35;

  v6 = a2 + 1;
  if (a2 + 1 < a3)
  {
    v11 = result;
    v12 = a6 * a6;
    v13 = a3;
    __asm { FMOV            V0.2D, #1.0 }
    v35 = _Q0;
    do
    {
      v19 = *(float64x2_t *)(v11 + 16 * a2);
      v20 = vsubq_f64(*(float64x2_t *)(v11 + 16 * v13), v19);
      v21 = vmulq_f64(v20, v20);
      v22 = 0;
      if (vaddvq_f64(v21) <= 1.0e-15)
      {
        v30 = (float64x2_t *)(v11 + 16 * v6);
        v31 = 0.0;
        do
        {
          v32 = *v30++;
          v33 = vsubq_f64(v32, v19);
          v33.f64[0] = vaddvq_f64(vmulq_f64(v33, v33));
          v29 = fmax(v33.f64[0], v31);
          if (v33.f64[0] > v31)
            v22 = v6;
          ++v6;
          v31 = v29;
        }
        while (a3 != v6);
      }
      else
      {
        v23 = vdivq_f64(v35, vaddq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v21, 1), v21));
        v24 = (float64x2_t *)(v11 + 16 * v6);
        v25 = 0.0;
        do
        {
          v26 = *v24++;
          v27 = vmulq_f64(vsubq_f64(v26, v19), v20);
          v28 = vsubq_f64(v26, vmlaq_n_f64(v19, v20, fmin(fmax(vmulq_f64(vaddq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v27, 1), v27), v23).f64[0], 0.0), 1.0)));
          v27.f64[0] = vaddvq_f64(vmulq_f64(v28, v28));
          v29 = fmax(v27.f64[0], v25);
          if (v27.f64[0] > v25)
            v22 = v6;
          ++v6;
          v25 = v29;
        }
        while (a3 != v6);
      }
      if (v29 <= v12)
        break;
      result = geo::dpSimplifyViaIndexes<gm::Matrix<double,2,1>,unsigned int>(v11, a6);
      v34 = *a5;
      *a5 = v34 + 1;
      *(_DWORD *)(a4 + 4 * v34) = v22;
      v6 = v22 + 1;
      a2 = v22;
    }
    while (v22 + 1 < a3);
  }
  return result;
}

uint64_t md::LabelRouteCollisionInfo::tileCollisionInfo(md::LabelRouteCollisionInfo *a1, unsigned int a2, double *a3)
{
  uint64_t v4;
  int8x8_t v5;
  double v6;
  double v7;
  double v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint64_t **v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  double *v19;

  v4 = md::LabelRouteCollisionInfo::collisionInfoForZoom(a1, a2);
  v5 = *(int8x8_t *)(v4 + 32);
  if (!*(_QWORD *)&v5)
    return 0;
  v7 = a3[2];
  v6 = a3[3];
  v8 = a3[1];
  v9 = ((int)((v8 + (v6 - v8) * 0.5) / *(double *)(v4 + 16))
                    + ((int)((*a3 + (v7 - *a3) * 0.5) / *(double *)(v4 + 16)) << 16));
  v10 = (uint8x8_t)vcnt_s8(v5);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    v11 = ((int)((v8 + (v6 - v8) * 0.5) / *(double *)(v4 + 16))
                       + ((int)((*a3 + (v7 - *a3) * 0.5) / *(double *)(v4 + 16)) << 16));
    if (*(_QWORD *)&v5 <= v9)
      v11 = v9 % *(_QWORD *)&v5;
  }
  else
  {
    v11 = (v5.i32[0] - 1) & v9;
  }
  v12 = *(uint64_t ***)(*(_QWORD *)(v4 + 24) + 8 * v11);
  if (!v12)
    return 0;
  v13 = *v12;
  if (!v13)
    return 0;
  if (v10.u32[0] < 2uLL)
  {
    v14 = *(_QWORD *)&v5 - 1;
    while (1)
    {
      v16 = v13[1];
      if (v16 == v9)
      {
        if (*((_DWORD *)v13 + 4) == (_DWORD)v9)
          goto LABEL_22;
      }
      else if ((v16 & v14) != v11)
      {
        return 0;
      }
      v13 = (uint64_t *)*v13;
      if (!v13)
        return 0;
    }
  }
  while (1)
  {
    v15 = v13[1];
    if (v15 == v9)
      break;
    if (v15 >= *(_QWORD *)&v5)
      v15 %= *(_QWORD *)&v5;
    if (v15 != v11)
      return 0;
LABEL_11:
    v13 = (uint64_t *)*v13;
    if (!v13)
      return 0;
  }
  if (*((_DWORD *)v13 + 4) != (_DWORD)v9)
    goto LABEL_11;
LABEL_22:
  v17 = v13[3];
  result = v17 + 8;
  if (v17)
    v19 = (double *)(v17 + 8);
  else
    v19 = 0;
  if (v19[3] <= *a3 || v19[1] >= v7 || v19[4] <= v8 || v19[2] >= v6)
    return 0;
  return result;
}

uint64_t std::__function::__func<geo::TaskQueue::apply_b(unsigned long,void({block_pointer})(unsigned long))::{lambda(unsigned long)#1},std::allocator<geo::TaskQueue::apply_b(unsigned long,void({block_pointer})(unsigned long))::{lambda(unsigned long)#1}>,void ()(unsigned long)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42D5ED0;
  *(_QWORD *)(a1 + 8) = &off_1E42B55F0;

  return a1;
}

void std::__function::__func<geo::TaskQueue::apply_b(unsigned long,void({block_pointer})(unsigned long))::{lambda(unsigned long)#1},std::allocator<geo::TaskQueue::apply_b(unsigned long,void({block_pointer})(unsigned long))::{lambda(unsigned long)#1}>,void ()(unsigned long)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42D5ED0;
  *(_QWORD *)(a1 + 8) = &off_1E42B55F0;

  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<geo::TaskQueue::apply_b(unsigned long,void({block_pointer})(unsigned long))::{lambda(unsigned long)#1},std::allocator<geo::TaskQueue::apply_b(unsigned long,void({block_pointer})(unsigned long))::{lambda(unsigned long)#1}>,void ()(unsigned long)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D5ED0;
  return geo::_retain_ptr<void({block_pointer} {__strong})(unsigned long),geo::_copy_block_arc<void({block_pointer} {__strong})(unsigned long)>,geo::_release_block_arc<void({block_pointer} {__strong})(unsigned long)>,geo::_hash_ptr,geo::_equal_ptr>::_retain_ptr(a2 + 1, a1 + 8);
}

void std::__function::__func<geo::TaskQueue::apply_b(unsigned long,void({block_pointer})(unsigned long))::{lambda(unsigned long)#1},std::allocator<geo::TaskQueue::apply_b(unsigned long,void({block_pointer})(unsigned long))::{lambda(unsigned long)#1}>,void ()(unsigned long)>::destroy(uint64_t a1)
{
  *(_QWORD *)(a1 + 8) = &off_1E42B55F0;

}

uint64_t geo::_retain_ptr<void({block_pointer} {__strong})(unsigned long),geo::_copy_block_arc<void({block_pointer} {__strong})(unsigned long)>,geo::_release_block_arc<void({block_pointer} {__strong})(unsigned long)>,geo::_hash_ptr,geo::_equal_ptr>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B55F0;

  return a1;
}

void geo::_retain_ptr<void({block_pointer} {__strong})(unsigned long),geo::_copy_block_arc<void({block_pointer} {__strong})(unsigned long)>,geo::_release_block_arc<void({block_pointer} {__strong})(unsigned long)>,geo::_hash_ptr,geo::_equal_ptr>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B55F0;

  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::vector<md::LabelFeature *,geo::StdAllocator<md::LabelFeature *,mdm::Allocator>>::assign(uint64_t result, unint64_t a2, const double *a3)
{
  uint64_t v5;
  uint64_t v6;
  float64x2_t *v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  float64x2_t *v16;
  float64x2_t v17;
  float64x2_t *v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;

  v5 = result;
  v6 = *(_QWORD *)(result + 16);
  v7 = *(float64x2_t **)result;
  if (a2 > (v6 - *(_QWORD *)result) >> 3)
  {
    if (v7)
    {
      *(_QWORD *)(result + 8) = v7;
      (*(void (**)(_QWORD))(**(_QWORD **)(result + 24) + 40))(*(_QWORD *)(result + 24));
      v6 = 0;
      *(_QWORD *)v5 = 0;
      *(_QWORD *)(v5 + 8) = 0;
      *(_QWORD *)(v5 + 16) = 0;
    }
    if (a2 >> 61)
      goto LABEL_34;
    v8 = v6 >> 2;
    if (v6 >> 2 <= a2)
      v8 = a2;
    v9 = (unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8;
    v10 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v9)
      v10 = v8;
    if (v10 >> 61)
LABEL_34:
      abort();
    v11 = 8 * v10;
    result = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v5 + 24) + 16))(*(_QWORD *)(v5 + 24), 8 * v10, 8);
    *(_QWORD *)v5 = result;
    *(_QWORD *)(v5 + 8) = result;
    *(_QWORD *)(v5 + 16) = result + v11;
    v12 = 8 * a2;
    v13 = result + 8 * a2;
    do
    {
      if (result)
        *(double *)result = *a3;
      result += 8;
      v12 -= 8;
    }
    while (v12);
    goto LABEL_32;
  }
  v14 = (uint64_t)(*(_QWORD *)(result + 8) - (_QWORD)v7) >> 3;
  if (v14 >= a2)
    v15 = a2;
  else
    v15 = (uint64_t)(*(_QWORD *)(result + 8) - (_QWORD)v7) >> 3;
  if (v15)
  {
    if (v15 < 8 || v7 < (float64x2_t *)(a3 + 1) && &v7->f64[v15] > a3)
      goto LABEL_25;
    v16 = (float64x2_t *)((char *)v7 + 8 * (v15 & 0xFFFFFFFFFFFFFFFCLL));
    v17 = vld1q_dup_f64(a3);
    v18 = v7 + 1;
    v19 = v15 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v18[-1] = v17;
      *v18 = v17;
      v18 += 2;
      v19 -= 4;
    }
    while (v19);
    if (v15 != (v15 & 0xFFFFFFFFFFFFFFFCLL))
    {
      v15 &= 3u;
      v7 = v16;
      do
      {
LABEL_25:
        v7->f64[0] = *a3;
        v7 = (float64x2_t *)((char *)v7 + 8);
        --v15;
      }
      while (v15);
    }
  }
  if (a2 <= v14)
  {
    v13 = *(_QWORD *)result + 8 * a2;
LABEL_32:
    *(_QWORD *)(v5 + 8) = v13;
    return result;
  }
  v20 = *(_QWORD **)(result + 8);
  v21 = &v20[a2 - v14];
  v22 = 8 * a2 - 8 * v14;
  do
  {
    if (v20)
      *v20 = *(_QWORD *)a3;
    ++v20;
    v22 -= 8;
  }
  while (v22);
  *(_QWORD *)(result + 8) = v21;
  return result;
}

md::PolylineOverlayStyle *_ZNSt3__115allocate_sharedB8nn180100IN2md24PolygonOverlayRenderable5StyleENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  md::PolylineOverlayStyle *result;

  v2 = operator new(0x50uLL);
  v2[3] = 0;
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_1E42DD0A8;
  v2[4] = 0;
  v2[5] = 0;
  *((_DWORD *)v2 + 12) = 0;
  v3 = operator new(0xE0uLL);
  v3[1] = 0;
  v3[2] = 0;
  *v3 = &off_1E42DC4D8;
  result = md::PolylineOverlayStyle::PolylineOverlayStyle((md::PolylineOverlayStyle *)(v3 + 3));
  v2[7] = result;
  v2[8] = v3;
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_19FA492FC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  std::__shared_weak_count *v2;
  void *v4;
  void *v5;

  std::__shared_weak_count::~__shared_weak_count(v2);
  operator delete(v4);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void **std::vector<md::PolygonOverlayMeshBuilder::MeshInfo>::~vector[abi:nn180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 8);
        if (v5)
        {
          *((_QWORD *)v3 - 7) = v5;
          operator delete(v5);
        }
        v6 = (void *)*((_QWORD *)v3 - 11);
        if (v6)
        {
          *((_QWORD *)v3 - 10) = v6;
          operator delete(v6);
        }
        v3 -= 88;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void std::__shared_ptr_emplace<md::PolylineOverlayStyle>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC4D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::PolylineOverlayStyle>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC4D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::PolylineOverlayStyle>::__on_zero_shared(_QWORD *a1)
{
  void *v2;

  v2 = (void *)a1[24];
  if (v2)
  {
    a1[25] = v2;
    operator delete(v2);
  }
  md::PolylineOverlayStyleConstants::~PolylineOverlayStyleConstants((md::PolylineOverlayStyleConstants *)(a1 + 4));
}

void std::__shared_ptr_emplace<md::PolygonOverlayRenderable::Style>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD0A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::PolygonOverlayRenderable::Style>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD0A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::PolygonOverlayRenderable::Style>::__on_zero_shared(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 64);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t md::ElevatedStrokeGroup::ElevatedStrokeGroup(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  gss::Allocator *v11;
  uint64_t v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v21;
  _BYTE v22[15];
  char v23;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = gss::Allocator::instance((gss::Allocator *)a1);
  if (a1 != a2)
    std::vector<std::pair<gss::StyleAttribute,unsigned short>,geo::StdAllocator<std::pair<gss::StyleAttribute,unsigned short>,gss::Allocator>>::__assign_with_size[abi:nn180100]<std::pair<gss::StyleAttribute,unsigned short>*,std::pair<gss::StyleAttribute,unsigned short>*>((uint64_t *)a1, *(_QWORD *)a2, *(_QWORD **)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  _ZNSt3__115allocate_sharedB8nn180100IN2md24PolygonOverlayRenderable5StyleENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_((_QWORD *)(a1 + 32));
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 88) = *a3;
  v6 = a3[1];
  *(_QWORD *)(a1 + 96) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *(_OWORD *)(a1 + 136) = 0uLL;
  *(_OWORD *)(a1 + 120) = 0uLL;
  *(_OWORD *)(a1 + 104) = 0uLL;
  *(_DWORD *)(a1 + 152) = 1065353216;
  v9 = *(_QWORD *)(a1 + 32);
  os_unfair_lock_lock((os_unfair_lock_t)(v9 + 24));
  *(_OWORD *)v9 = xmmword_19FFB39B0;
  *(_BYTE *)(v9 + 48) = 1;
  os_unfair_lock_unlock((os_unfair_lock_t)(v9 + 24));
  v10 = *(_QWORD *)(a1 + 88);
  memset(v22, 0, sizeof(v22));
  v23 = 1;
  gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((unint64_t *)&v21, v10, (gss::FeatureAttributeSet *)a2, (gss::QueryOverrides *)v22);
  if (!v22[14] && *(_QWORD *)v22)
  {
    v12 = gss::Allocator::instance(v11);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v12 + 40))(v12, *(_QWORD *)v22, *(unsigned __int16 *)&v22[12]);
  }
  v13 = v21;
  v21 = 0uLL;
  v14 = *(std::__shared_weak_count **)(a1 + 112);
  *(_OWORD *)(a1 + 104) = v13;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
  if (*((_QWORD *)&v21 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return a1;
}

void sub_19FA4966C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14)
{
  uint64_t *v14;
  uint64_t v16;

  v16 = *v14;
  if (*v14)
  {
    v14[1] = v16;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14[3] + 40))(v14[3], v16, v14[2] - v16);
  }
  _Unwind_Resume(exception_object);
}

void md::ElevatedStrokeGroup::selectedStyleQuery(md::ElevatedStrokeGroup *this, uint64_t *a2)
{
  gss::Allocator *v4;
  BOOL v5;
  uint64_t v6;
  _BYTE v7[15];
  char v8;

  memset(v7, 0, sizeof(v7));
  v8 = 1;
  *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](v7, 0x10002u) = 1;
  gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((unint64_t *)this, a2[11], (gss::FeatureAttributeSet *)a2, (gss::QueryOverrides *)v7);
  if (v7[14])
    v5 = 1;
  else
    v5 = *(_QWORD *)v7 == 0;
  if (!v5)
  {
    v6 = gss::Allocator::instance(v4);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v6 + 40))(v6, *(_QWORD *)v7, *(unsigned __int16 *)&v7[12]);
  }
}

void sub_19FA49934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  gss::QueryOverrides::~QueryOverrides((gss::QueryOverrides *)&a9);
  _Unwind_Resume(a1);
}

void sub_19FA49948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, unsigned __int16 a11, char a12)
{
  BOOL v13;
  uint64_t v14;

  if (a12)
    v13 = 1;
  else
    v13 = a9 == 0;
  if (!v13)
  {
    v14 = gss::Allocator::instance((gss::Allocator *)exception_object);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v14 + 40))(v14, a9, a11);
  }
  _Unwind_Resume(exception_object);
}

void md::TransitNodeExternalIcon::~TransitNodeExternalIcon(md::TransitNodeExternalIcon *this)
{
  md::TransitNodeExternalIcon::~TransitNodeExternalIcon(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E429FCE0;
  if (!*((_QWORD *)this + 11))
    (*(void (**)(_QWORD))(**((_QWORD **)this + 9) + 32))(*((_QWORD *)this + 9));
  v2 = (void *)*((_QWORD *)this + 13);
  if (v2)
  {
    *((_QWORD *)this + 14) = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

uint64_t md::TransitNodeExternalIcon::debugString@<X0>(md::TransitNodeExternalIcon *this@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  std::ios_base *v10;
  uint64_t v11;
  void *p_p;
  uint64_t v13;
  std::ios_base *v14;
  uint64_t v15;
  size_t v16;
  void **p_dst;
  unint64_t v18;
  const void **v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void **v25;
  uint64_t v26;
  char v27;
  size_t v28;
  unint64_t v29;
  const void **v30;
  const void *v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  void **__dst;
  size_t v37;
  int64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD v41[3];
  uint64_t v42;
  unint64_t v43;
  void *v44[2];
  __int128 v45;
  int v46;
  uint64_t v47[19];
  void *__p;
  uint64_t v49;
  unsigned __int8 v50;
  _QWORD v51[3];
  uint64_t v52;
  unint64_t v53;
  __int128 v54;
  __int128 v55;
  int v56;
  uint64_t v57[20];

  v6 = MEMORY[0x1E0DE4FE0];
  v7 = MEMORY[0x1E0DE4FE0] + 64;
  v8 = *(_QWORD **)(MEMORY[0x1E0DE4F60] + 8);
  v9 = *(_QWORD **)(MEMORY[0x1E0DE4F60] + 16);
  v47[0] = MEMORY[0x1E0DE4FE0] + 64;
  v39 = v8;
  *(_QWORD **)((char *)&v39 + *(v8 - 3)) = v9;
  v10 = (std::ios_base *)((char *)&v39 + *(v39 - 3));
  std::ios_base::init(v10, &v40);
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  v39 = (_QWORD *)(v6 + 24);
  v47[0] = v7;
  std::streambuf::basic_streambuf();
  v40 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v44 = 0u;
  v45 = 0u;
  v46 = 16;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v39, (uint64_t)"\nTransitNodeExternalIcon", 24);
  v11 = *((_QWORD *)this + 11);
  if (v11)
  {
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(&__p, v11, a2);
    if ((v50 & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = __p;
    if ((v50 & 0x80u) == 0)
      v13 = v50;
    else
      v13 = v49;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v39, (uint64_t)p_p, v13);
    if ((char)v50 < 0)
      operator delete(__p);
  }
  else
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v39, (uint64_t)"\n <node> Missing-Feature Node", 29);
  }
  v57[0] = v6 + 64;
  __p = v8;
  *(void **)((char *)&__p + *(v8 - 3)) = v9;
  v14 = (std::ios_base *)((char *)&__p + *((_QWORD *)__p - 3));
  std::ios_base::init(v14, &v49);
  v14[1].__vftable = 0;
  v14[1].__fmtflags_ = -1;
  __p = (void *)(v6 + 24);
  v57[0] = v6 + 64;
  std::streambuf::basic_streambuf();
  v49 = MEMORY[0x1E0DE4FB8] + 16;
  v54 = 0u;
  v55 = 0u;
  v56 = 16;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__p, (uint64_t)"\n <nodeFeature>", 15);
  v15 = MEMORY[0x1E0DE4F60];
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__p, (uint64_t)" countNodes:", 12);
  std::ostream::operator<<();
  if ((v56 & 0x10) != 0)
  {
    v18 = *((_QWORD *)&v55 + 1);
    if (*((_QWORD *)&v55 + 1) < v53)
    {
      *((_QWORD *)&v55 + 1) = v53;
      v18 = v53;
    }
    v19 = (const void **)&v52;
  }
  else
  {
    if ((v56 & 8) == 0)
    {
      v16 = 0;
      HIBYTE(v38) = 0;
      p_dst = (void **)&__dst;
      goto LABEL_26;
    }
    v19 = (const void **)v51;
    v18 = v51[2];
  }
  v20 = *v19;
  v16 = v18 - (_QWORD)*v19;
  if (v16 > 0x7FFFFFFFFFFFFFF7)
    abort();
  if (v16 >= 0x17)
  {
    v21 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v21 = v16 | 7;
    v22 = v21 + 1;
    p_dst = (void **)operator new(v21 + 1);
    v37 = v16;
    v38 = v22 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_25;
  }
  HIBYTE(v38) = v18 - *(_BYTE *)v19;
  p_dst = (void **)&__dst;
  if (v16)
LABEL_25:
    memmove(p_dst, v20, v16);
LABEL_26:
  *((_BYTE *)p_dst + v16) = 0;
  v23 = *(void **)v15;
  __p = v23;
  v24 = *(void **)(v15 + 24);
  *(void **)((char *)&__p + *((_QWORD *)v23 - 3)) = v24;
  v49 = MEMORY[0x1E0DE4FB8] + 16;
  if (SBYTE7(v55) < 0)
    operator delete((void *)v54);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1A1AF4D64](v57);
  if (v38 >= 0)
    v25 = (void **)&__dst;
  else
    v25 = __dst;
  if (v38 >= 0)
    v26 = HIBYTE(v38);
  else
    v26 = v37;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v39, (uint64_t)v25, v26);
  if (SHIBYTE(v38) < 0)
  {
    operator delete(__dst);
    v27 = v46;
    if ((v46 & 0x10) == 0)
      goto LABEL_36;
LABEL_39:
    v29 = *((_QWORD *)&v45 + 1);
    if (*((_QWORD *)&v45 + 1) < v43)
    {
      *((_QWORD *)&v45 + 1) = v43;
      v29 = v43;
    }
    v30 = (const void **)&v42;
    goto LABEL_43;
  }
  v27 = v46;
  if ((v46 & 0x10) != 0)
    goto LABEL_39;
LABEL_36:
  if ((v27 & 8) == 0)
  {
    v28 = 0;
    a3[23] = 0;
    goto LABEL_51;
  }
  v30 = (const void **)v41;
  v29 = v41[2];
LABEL_43:
  v31 = *v30;
  v28 = v29 - (_QWORD)*v30;
  if (v28 > 0x7FFFFFFFFFFFFFF7)
    abort();
  if (v28 >= 0x17)
  {
    v32 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28 | 7) != 0x17)
      v32 = v28 | 7;
    v33 = v32 + 1;
    v34 = operator new(v32 + 1);
    *((_QWORD *)a3 + 1) = v28;
    *((_QWORD *)a3 + 2) = v33 | 0x8000000000000000;
    *(_QWORD *)a3 = v34;
    a3 = v34;
    goto LABEL_50;
  }
  a3[23] = v28;
  if (v28)
LABEL_50:
    memmove(a3, v31, v28);
LABEL_51:
  a3[v28] = 0;
  v39 = v23;
  *(_QWORD **)((char *)&v39 + *((_QWORD *)v23 - 3)) = v24;
  v40 = MEMORY[0x1E0DE4FB8] + 16;
  if (SBYTE7(v45) < 0)
    operator delete(v44[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AF4D64](v47);
}

void sub_19FA49E24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  if (a55 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t md::TransitNodeExternalIcon::updateLayoutState(uint64_t this)
{
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = (_BYTE *)(this + 69);
  if (!*(_BYTE *)(this + 69))
  {
    v2 = this;
    this = *(_QWORD *)(this + 88);
    v3 = *(_QWORD *)(v2 + 72);
    v5 = *(_QWORD *)(v3 + 32);
    v4 = *(_QWORD *)(v3 + 40);
    if (this)
    {
      if (v5 == v4 || this == *(_QWORD *)(v4 - 16))
      {
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 40))(this);
        if ((this & 1) == 0)
          return this;
      }
      else
      {
        v1 = (_BYTE *)(v2 + 263);
      }
    }
    else if (v5 == v4)
    {
      return this;
    }
    *v1 = 1;
  }
  return this;
}

void sub_19FA4A01C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v5;

  v5 = *(void **)(v1 + 104);
  if (v5)
  {
    *(_QWORD *)(v1 + 112) = v5;
    operator delete(v5);
  }
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v2);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v3);
  _Unwind_Resume(a1);
}

uint64_t md::TransitNodeExternalIcon::TransitNodeExternalIcon(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  *(_OWORD *)(a1 + 8) = xmmword_19FFB3B40;
  *(_DWORD *)(a1 + 24) = 1065353216;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 44) = 0;
  *(_BYTE *)(a1 + 64) = 1;
  *(_WORD *)(a1 + 69) = 256;
  *(_DWORD *)(a1 + 65) = 0;
  *(_QWORD *)a1 = &off_1E429FCE0;
  v4 = a2[1];
  *(_QWORD *)(a1 + 72) = *a2;
  *(_QWORD *)(a1 + 80) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *a3;
  v8 = a3[1];
  *(_QWORD *)(a1 + 88) = *a3;
  *(_QWORD *)(a1 + 96) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v7 = *(_QWORD *)(a1 + 88);
  }
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 220) = 1065353216;
  *(_QWORD *)(a1 + 212) = 1065353216;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0x3F80000000000000;
  *(_QWORD *)(a1 + 248) = 0;
  *(_DWORD *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 260) = 255;
  atomic_store(1u, (unsigned __int8 *)(a1 + 65));
  if (!v7)
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 24))(*(_QWORD *)(a1 + 72));
  return a1;
}

void sub_19FA4A148(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v4 = *v2;
  if (*v2)
  {
    v1[14] = v4;
    operator delete(v4);
  }
  v5 = (std::__shared_weak_count *)v1[12];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = (std::__shared_weak_count *)v1[10];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  _Unwind_Resume(exception_object);
}

float32x4_t md::TransitNodeExternalIcon::setDotTextureRect(float32x4_t *a1, __int8 *a2, uint64_t a3, float *a4)
{
  int v4;
  __int8 v5;
  __int8 v6;
  __int8 v7;
  __int8 v8;
  float v9;
  float v10;
  float v11;
  float32x4_t result;
  float v13;
  float v14;
  float v15;
  float32_t v16;
  float32_t v17;
  float32_t v18;
  float32x4_t v19;

  v4 = *(_DWORD *)a3;
  a1[16].i32[0] = *(_DWORD *)a3;
  v5 = *a2;
  v6 = a2[4];
  a1[12].i8[0] = *a2;
  a1[12].i8[1] = v6;
  a1[12].i8[2] = *(_BYTE *)a3 + v5;
  a1[12].i8[3] = v6;
  v7 = *(_BYTE *)(a3 + 4) + v6;
  a1[12].i8[4] = *(_BYTE *)a3 + v5;
  a1[12].i8[5] = v7;
  v8 = *(_BYTE *)(a3 + 4) + v6;
  a1[12].i8[6] = v5;
  a1[12].i8[7] = v8;
  v9 = *a4;
  v10 = a4[1];
  v11 = -*a4;
  result.f32[0] = -v10;
  a1[8].f32[0] = v11;
  a1[8].f32[1] = -v10;
  v13 = (float)*(int *)a3 - v9;
  a1[8].f32[2] = v13;
  a1[8].f32[3] = -v10;
  v14 = (float)*(int *)(a3 + 4) - v10;
  a1[9].f32[0] = v13;
  a1[9].f32[1] = v14;
  a1[9].f32[2] = v11;
  a1[9].f32[3] = v14;
  v15 = a1[15].f32[1];
  if (v15 != 1.0)
  {
    a1[16].i32[0] = (int)(float)(v15 * (float)v4);
    v16 = v15 * v11;
    v17 = v15 * result.f32[0];
    a1[8].f32[0] = v16;
    a1[8].f32[1] = v17;
    v18 = v13 * v15;
    a1[8].f32[2] = v18;
    a1[8].f32[3] = v17;
    a1[9].f32[0] = v18;
    a1[9].f32[1] = v14 * v15;
    a1[9].f32[2] = v16;
    a1[9].f32[3] = v14 * v15;
    result = vmulq_n_f32(a1[10], v15);
    v19 = vmulq_n_f32(a1[11], v15);
    a1[10] = result;
    a1[11] = v19;
  }
  return result;
}

uint64_t md::TransitNodeExternalIcon::updateRadius(uint64_t this)
{
  float v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  float v5;
  float v6;
  float v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  float32x4_t v12;
  __int32 *v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  __int32 *v17;
  __int32 *v18;
  float32x4_t v19;
  __int32 *v20;
  __int32 v21;
  float32x4_t v22;
  float v23;

  if (*(_BYTE *)(this + 260) == 2)
  {
    v1 = (float)(*(_DWORD *)(this + 248) + *(_DWORD *)(this + 252) / 2);
  }
  else
  {
    v2 = *(_QWORD *)(this + 104);
    v3 = *(_QWORD *)(this + 112);
    if (v2 == v3)
    {
      v1 = (float)(*(_DWORD *)(this + 256) / 2);
      v7 = 0.0;
    }
    else
    {
      v4 = v3 - v2 - 20;
      if (v4 > 0x9F)
      {
        v8 = v4 / 0x14 + 1;
        v9 = v8 & 7;
        if ((v8 & 7) == 0)
          v9 = 8;
        v10 = v8 - v9;
        v11 = 20 * v10;
        v12 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
        v13 = (__int32 *)(v2 + 92);
        v14.i64[0] = 0x80000000800000;
        v14.i64[1] = 0x80000000800000;
        v15 = v12;
        v16.i64[0] = 0x80000000800000;
        v16.i64[1] = 0x80000000800000;
        do
        {
          v17 = v13 + 5;
          v18 = v13 + 10;
          v19.i32[0] = *(v13 - 20);
          v19.i32[1] = *(v13 - 15);
          v20 = v13 + 15;
          v19.i32[2] = *(v13 - 10);
          v19.i32[3] = *(v13 - 5);
          v21 = *v13;
          v13 += 40;
          v22.i32[0] = v21;
          v22.i32[1] = *v17;
          v22.i32[2] = *v18;
          v22.i32[3] = *v20;
          v14 = vmaxnmq_f32(v14, v19);
          v16 = vmaxnmq_f32(v16, v22);
          v12 = vminnmq_f32(v19, v12);
          v15 = vminnmq_f32(v22, v15);
          v10 -= 8;
        }
        while (v10);
        v2 += v11;
        v5 = vmaxnmvq_f32(vmaxnmq_f32(v14, v16));
        v6 = vminnmvq_f32(vminnmq_f32(v12, v15));
      }
      else
      {
        v5 = -3.4028e38;
        v6 = 3.4028e38;
      }
      do
      {
        v23 = *(float *)(v2 + 12);
        v5 = fmaxf(v5, v23);
        v6 = fminf(v23, v6);
        v2 += 20;
      }
      while (v2 != v3);
      v7 = (float)(v6 + v5) * 0.5;
      v1 = (float)(v5 - v7) + (float)(*(_DWORD *)(this + 256) / 2);
    }
    *(float32x2_t *)(this + 48) = vmul_n_f32(*(float32x2_t *)(this + 220), v7);
  }
  *(_BYTE *)(this + 64) = 1;
  *(float *)(this + 44) = v1;
  return this;
}

void md::VenueTileData::~VenueTileData(md::VenueTileData *this)
{
  md::VenueTileData::~VenueTileData(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void **v8;
  void (***v9)(_QWORD);
  void (***v10)(_QWORD);
  void *v11;
  void (***v12)(_QWORD);
  void (***v13)(_QWORD);
  void (**v14)(_QWORD);
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;

  *(_QWORD *)this = &off_1E428EC70;
  *((_QWORD *)this + 79) = &unk_1E428ECB8;
  v2 = *((_QWORD *)this + 100);
  if (v2)
  {
    v3 = *((_QWORD *)this + 101);
    v4 = (void *)*((_QWORD *)this + 100);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 100);
    }
    *((_QWORD *)this + 101) = v2;
    operator delete(v4);
  }
  v8 = (void **)*((_QWORD *)this + 97);
  if (v8)
  {
    std::vector<md::VenueFloorGroup>::__base_destruct_at_end[abi:nn180100]((uint64_t)this + 776, v8);
    operator delete(*((void **)this + 97));
  }
  v9 = (void (***)(_QWORD))*((_QWORD *)this + 94);
  if (v9)
  {
    v10 = (void (***)(_QWORD))*((_QWORD *)this + 95);
    v11 = (void *)*((_QWORD *)this + 94);
    if (v10 != v9)
    {
      v12 = v10 - 3;
      v13 = v10 - 3;
      do
      {
        v14 = *v13;
        v13 -= 3;
        (*v14)(v12);
        v15 = v12 == v9;
        v12 = v13;
      }
      while (!v15);
      v11 = (void *)*((_QWORD *)this + 94);
    }
    *((_QWORD *)this + 95) = v9;
    operator delete(v11);
  }
  *(_QWORD *)this = off_1E42968B0;
  *((_QWORD *)this + 79) = &unk_1E42968F8;
  v16 = *((_QWORD *)this + 90);
  if (v16)
  {
    v17 = *((_QWORD *)this + 91);
    v18 = (void *)*((_QWORD *)this + 90);
    if (v17 != v16)
    {
      do
      {
        v19 = *(std::__shared_weak_count **)(v17 - 8);
        if (v19)
        {
          v20 = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 - 1, v20));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
        v17 -= 16;
      }
      while (v17 != v16);
      v18 = (void *)*((_QWORD *)this + 90);
    }
    *((_QWORD *)this + 91) = v16;
    operator delete(v18);
  }
  md::MapTileData::~MapTileData(this);
}

void std::vector<md::VenueFloorGroup>::__base_destruct_at_end[abi:nn180100](uint64_t a1, void **a2)
{
  void **v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  void **v11;
  void (***v12)(_QWORD);
  void (***v13)(_QWORD);
  void *v14;
  void (***v15)(_QWORD);
  void (***v16)(_QWORD);
  void (**v17)(_QWORD);
  BOOL v18;

  v4 = *(void ***)(a1 + 8);
  if (v4 != a2)
  {
    do
    {
      v5 = (std::__shared_weak_count *)*(v4 - 3);
      if (!v5)
        goto LABEL_9;
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
        v8 = (std::__shared_weak_count *)*(v4 - 5);
        if (v8)
        {
LABEL_10:
          v9 = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 - 1, v9));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
      }
      else
      {
LABEL_9:
        v8 = (std::__shared_weak_count *)*(v4 - 5);
        if (v8)
          goto LABEL_10;
      }
      v11 = v4 - 9;
      v12 = (void (***)(_QWORD))*(v4 - 9);
      if (v12)
      {
        v13 = (void (***)(_QWORD))*(v4 - 8);
        v14 = *(v4 - 9);
        if (v13 != v12)
        {
          v15 = v13 - 18;
          v16 = v13 - 18;
          do
          {
            v17 = *v16;
            v16 -= 18;
            (*v17)(v15);
            v18 = v15 == v12;
            v15 = v16;
          }
          while (!v18);
          v14 = *v11;
        }
        *(v4 - 8) = v12;
        operator delete(v14);
      }
      v4 -= 9;
    }
    while (v11 != a2);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

void std::vector<geo::_retain_ptr<VKVenueGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::__init_with_size[abi:nn180100]<geo::_retain_ptr<VKVenueGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>*,geo::_retain_ptr<VKVenueGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>*>(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7;
  _QWORD *v8;
  id v9;
  void *v10;

  if (a4)
  {
    if (a4 >= 0xAAAAAAAAAAAAAABLL)
      abort();
    v7 = 3 * a4;
    v8 = operator new(24 * a4);
    *a1 = v8;
    a1[1] = v8;
    for (a1[2] = &v8[v7]; a2 != a3; v8 += 3)
    {
      *v8 = &off_1E42B4AF0;
      v8[1] = 0;
      v9 = *(id *)(a2 + 8);
      v10 = (void *)v8[1];
      v8[1] = v9;

      a2 += 24;
    }
    a1[1] = v8;
  }
}

void ***std::vector<md::VenueFloorGroup>::~vector[abi:nn180100](void ***a1)
{
  if (*a1)
  {
    std::vector<md::VenueFloorGroup>::__base_destruct_at_end[abi:nn180100]((uint64_t)a1, *a1);
    operator delete(*a1);
  }
  return a1;
}

void ggl::PolygonBase::CompressedMeshMesh::~CompressedMeshMesh(ggl::PolygonBase::CompressedMeshMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::PolygonBase::CompressedMeshMesh::~CompressedMeshMesh(ggl::PolygonBase::CompressedMeshMesh *this)
{
  ggl::Mesh::~Mesh((ggl::PolygonBase::CompressedMeshMesh *)((char *)this - 16));
}

{
  ggl::Mesh::~Mesh((ggl::PolygonBase::CompressedMeshMesh *)((char *)this - 16));
  JUMPOUT(0x1A1AF4E00);
}

uint64_t geo::_retain_ptr<VKVenueGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4AF0;

  return a1;
}

void geo::_retain_ptr<VKVenueGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4AF0;

  JUMPOUT(0x1A1AF4E00);
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UniqueStyleEmissiveDataKeyHandle>(gdc::Entity,md::ls::UniqueStyleEmissiveDataKeyHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UniqueStyleEmissiveDataKeyHandle>(gdc::Entity,md::ls::UniqueStyleEmissiveDataKeyHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E4281A78;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UniqueStyleEmissiveDataKeyHandle>(gdc::Entity,md::ls::UniqueStyleEmissiveDataKeyHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E4281A78;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UniqueStyleEmissiveDataKeyHandle>(gdc::Entity,md::ls::UniqueStyleEmissiveDataKeyHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::UniqueStyleEmissiveDataKeyHandle>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_36;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 == v15)
      {
        v15 = v13;
      }
      else
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_40;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_40;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
          v15 = (char *)v4[10];
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + v4[10] - v4[7]);
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_QWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_35;
  }
}

void std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::UniqueStyleEmissiveDataKeyHandle>(gdc::Entity,std::type_identity<md::ls::UniqueStyleEmissiveDataKeyHandle>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::UniqueStyleEmissiveDataKeyHandle>(gdc::Entity,std::type_identity<md::ls::UniqueStyleEmissiveDataKeyHandle>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::UniqueStyleEmissiveDataKeyHandle>(gdc::Entity,std::type_identity<md::ls::UniqueStyleEmissiveDataKeyHandle>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::UniqueStyleEmissiveDataKeyHandle>(gdc::Entity,std::type_identity<md::ls::UniqueStyleEmissiveDataKeyHandle>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4282918;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::UniqueStyleEmissiveDataKeyHandle>(gdc::Entity,std::type_identity<md::ls::UniqueStyleEmissiveDataKeyHandle>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::UniqueStyleEmissiveDataKeyHandle>(gdc::Entity,std::type_identity<md::ls::UniqueStyleEmissiveDataKeyHandle>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4282918;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

BOOL std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::UniqueStyleEmissiveDataKeyHandle>(gdc::Entity,std::type_identity<md::ls::UniqueStyleEmissiveDataKeyHandle>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::UniqueStyleEmissiveDataKeyHandle>(gdc::Entity,std::type_identity<md::ls::UniqueStyleEmissiveDataKeyHandle>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)gdc::Registry::storage<md::ls::UniqueStyleEmissiveDataKeyHandle>(a2);
  return gdc::ComponentStorageWrapper<md::ls::UniqueStyleEmissiveDataKeyHandle>::remove(v3, *(_QWORD *)(a1 + 8));
}

void ggl::PolylineOverlayRibbon::FillPipelineState::~FillPipelineState(ggl::PolylineOverlayRibbon::FillPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::PolylineOverlayRibbon::FillPipelineSetup::~FillPipelineSetup(ggl::PolylineOverlayRibbon::FillPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::PolylineOverlayRibbon::FillPipelineSetup::constantDataIsEnabled(ggl::PolylineOverlayRibbon::FillPipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

BOOL ggl::PolylineOverlayRibbon::FillPipelineSetup::textureIsEnabled(ggl::PolylineOverlayRibbon::FillPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

void ggl::PolylineOverlayRibbon::AlphaPipelineState::~AlphaPipelineState(ggl::PolylineOverlayRibbon::AlphaPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::PolylineOverlayRibbon::AlphaPipelineSetup::~AlphaPipelineSetup(ggl::PolylineOverlayRibbon::AlphaPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::PolylineOverlayRibbon::AlphaPipelineSetup::constantDataIsEnabled(ggl::PolylineOverlayRibbon::AlphaPipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

BOOL ggl::PolylineOverlayRibbon::AlphaPipelineSetup::textureIsEnabled(ggl::PolylineOverlayRibbon::AlphaPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

void ggl::PolylineOverlayRibbon::AlphaFillPipelineState::~AlphaFillPipelineState(ggl::PolylineOverlayRibbon::AlphaFillPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::PolylineOverlayRibbon::AlphaFillPipelineSetup::~AlphaFillPipelineSetup(ggl::PolylineOverlayRibbon::AlphaFillPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::PolylineOverlayRibbon::AlphaFillPipelineSetup::constantDataIsEnabled(ggl::PolylineOverlayRibbon::AlphaFillPipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

BOOL ggl::PolylineOverlayRibbon::AlphaFillPipelineSetup::textureIsEnabled(ggl::PolylineOverlayRibbon::AlphaFillPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

uint64_t md::TransitJunction::TransitJunction(uint64_t a1, geo::codec::VectorTile *this, _DWORD *a3)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _DWORD *v14;
  unint64_t v16;

  *(_QWORD *)a1 = this;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = a1 + 32;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = a1 + 56;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 79) = 0;
  *(_DWORD *)(a1 + 120) = 1065353216;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_DWORD *)(a1 + 160) = 1065353216;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_DWORD *)(a1 + 200) = 1065353216;
  *(_BYTE *)(a1 + 208) = 0;
  if (*a3)
  {
    v4 = a3[1];
    if (geo::codec::VectorTile::transitPointsOnRoadCount(this) > v4)
    {
      v5 = geo::codec::VectorTile::transitPointsOnRoad(*(geo::codec::VectorTile **)a1);
      v6 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4);
      v7 = v5 + 16 * v6;
      v9 = *(_DWORD *)(v7 + 4);
      v8 = (unsigned int *)(v7 + 4);
      if (geo::codec::VectorTile::transitLinkCount(*(geo::codec::VectorTile **)a1) > v9)
      {
        v10 = geo::codec::VectorTile::transitLinks(*(geo::codec::VectorTile **)a1) + 184 * *v8;
        v16 = 0;
        v11 = v5 + 16 * v6;
        v12 = geo::codec::transitLinkPoints(v10, *(unsigned int *)(v11 + 8), &v16);
        v13 = *(unsigned int *)(v11 + 12);
        if (v16 > v13)
        {
          v14 = (_DWORD *)(v12 + 8 * v13);
          *(_DWORD *)(a1 + 16) = *v14;
          *(_DWORD *)(a1 + 20) = v14[1];
          *(_BYTE *)(a1 + 82) = 1;
        }
      }
    }
  }
  return a1;
}

void sub_19FA4B2E8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD **v4;
  _QWORD **v5;

  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100](v3);
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100](v2);
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100](v1);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*v5);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*v4);
  _Unwind_Resume(a1);
}

uint64_t *md::TransitJunction::addLink(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t **v15;
  unint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t *v19;
  _QWORD *v20;

  v2 = result[1];
  v3 = *(_QWORD *)(*a2 + 48);
  if ((v3 == v2) != (*(_QWORD *)(*a2 + 40) == v2))
  {
    v5 = result;
    if (v3 == v2)
    {
      *(_QWORD *)(a2[8] - 32) = result;
      v14 = (uint64_t **)(result + 4);
      v13 = (uint64_t *)result[4];
      if (!v13)
      {
        v15 = (uint64_t **)(result + 4);
LABEL_19:
        v17 = (uint64_t *)operator new(0x28uLL);
        v17[4] = (uint64_t)a2;
        *v17 = 0;
        v17[1] = 0;
        v17[2] = (uint64_t)v15;
        *v14 = v17;
        v18 = *(_QWORD **)v5[3];
        if (v18)
        {
          v5[3] = (uint64_t)v18;
          v19 = *v14;
        }
        else
        {
          v19 = v17;
        }
        result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v5[4], v19);
        v20 = v5 + 5;
        goto LABEL_25;
      }
      while (1)
      {
        while (1)
        {
          v15 = (uint64_t **)v13;
          v16 = v13[4];
          if (v16 <= (unint64_t)a2)
            break;
          v13 = *v15;
          v14 = v15;
          if (!*v15)
            goto LABEL_19;
        }
        if (v16 >= (unint64_t)a2)
          break;
        v13 = v15[1];
        if (!v13)
        {
          v14 = v15 + 1;
          goto LABEL_19;
        }
      }
    }
    else
    {
      *(_QWORD *)(a2[7] + 24) = result;
      v7 = (uint64_t **)(result + 7);
      v6 = (uint64_t *)result[7];
      if (!v6)
      {
        v8 = (uint64_t **)(result + 7);
LABEL_10:
        v10 = (uint64_t *)operator new(0x28uLL);
        v10[4] = (uint64_t)a2;
        *v10 = 0;
        v10[1] = 0;
        v10[2] = (uint64_t)v8;
        *v7 = v10;
        v11 = *(_QWORD **)v5[6];
        if (v11)
        {
          v5[6] = (uint64_t)v11;
          v12 = *v7;
        }
        else
        {
          v12 = v10;
        }
        result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v5[7], v12);
        v20 = v5 + 8;
LABEL_25:
        ++*v20;
        return result;
      }
      while (1)
      {
        while (1)
        {
          v8 = (uint64_t **)v6;
          v9 = v6[4];
          if (v9 <= (unint64_t)a2)
            break;
          v6 = *v8;
          v7 = v8;
          if (!*v8)
            goto LABEL_10;
        }
        if (v9 >= (unint64_t)a2)
          break;
        v6 = v8[1];
        if (!v6)
        {
          v7 = v8 + 1;
          goto LABEL_10;
        }
      }
    }
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<std::pair<md::TransitLink const*,md::TransitLink const*>,gm::Matrix<float,2,1>>,std::__unordered_map_hasher<std::pair<md::TransitLink const*,md::TransitLink const*>,std::__hash_value_type<std::pair<md::TransitLink const*,md::TransitLink const*>,gm::Matrix<float,2,1>>,md::TransitJunction::LinkPairHash,std::equal_to<std::pair<md::TransitLink const*,md::TransitLink const*>>,true>,std::__unordered_map_equal<std::pair<md::TransitLink const*,md::TransitLink const*>,std::__hash_value_type<std::pair<md::TransitLink const*,md::TransitLink const*>,gm::Matrix<float,2,1>>,std::equal_to<std::pair<md::TransitLink const*,md::TransitLink const*>>,md::TransitJunction::LinkPairHash,true>,std::allocator<std::__hash_value_type<std::pair<md::TransitLink const*,md::TransitLink const*>,gm::Matrix<float,2,1>>>>::__emplace_unique_key_args<std::pair<md::TransitLink const*,md::TransitLink const*>,std::piecewise_construct_t const&,std::tuple<std::pair<md::TransitLink const*,md::TransitLink const*>&&>,std::tuple<>>(float *a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *v11;
  unint64_t v13;
  uint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  void *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  size_t v27;
  size_t v28;
  size_t v29;
  _QWORD *i;
  size_t v31;
  uint64_t v32;
  unint64_t v33;
  uint8x8_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  size_t v38;
  _QWORD *v39;
  _QWORD *v40;
  unint64_t v41;
  _QWORD *v43;

  v7 = a3 ^ a2;
  v8 = *((_QWORD *)a1 + 1);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = a3 ^ a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = v11[1];
            if (v15 == v7)
            {
              if (v11[2] == a2 && v11[3] == a3)
                return v11;
            }
            else if ((v15 & (v8 - 1)) != v4)
            {
              goto LABEL_28;
            }
            v11 = (_QWORD *)*v11;
            if (!v11)
              goto LABEL_28;
          }
        }
        do
        {
          v13 = v11[1];
          if (v13 == v7)
          {
            if (v11[2] == a2 && v11[3] == a3)
              return v11;
          }
          else
          {
            if (v13 >= v8)
              v13 %= v8;
            if (v13 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_28:
  v11 = operator new(0x28uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_OWORD *)v11 + 1) = *a4;
  v16 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v17 = a1[8];
  if (!v8 || (float)(v17 * (float)v8) < v16)
  {
    v18 = 1;
    if (v8 >= 3)
      v18 = (v8 & (v8 - 1)) != 0;
    v19 = v18 | (2 * v8);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      prime = v20;
    else
      prime = v19;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *((_QWORD *)a1 + 1);
    }
    if (prime <= v8)
    {
      if (prime >= v8)
        goto LABEL_65;
      v33 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v8 < 3 || (v34 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
      {
        v33 = std::__next_prime(v33);
      }
      else
      {
        v35 = 1 << -(char)__clz(v33 - 1);
        if (v33 >= 2)
          v33 = v35;
      }
      if (prime <= v33)
        prime = v33;
      if (prime >= v8)
      {
        v8 = *((_QWORD *)a1 + 1);
LABEL_65:
        if ((v8 & (v8 - 1)) != 0)
        {
          if (v7 >= v8)
            v4 = v7 % v8;
          else
            v4 = v7;
        }
        else
        {
          v4 = (v8 - 1) & v7;
        }
        goto LABEL_78;
      }
      if (!prime)
      {
        v43 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v43)
          operator delete(v43);
        v8 = 0;
        *((_QWORD *)a1 + 1) = 0;
        goto LABEL_65;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v22 = operator new(8 * prime);
    v23 = *(_QWORD **)a1;
    *(_QWORD *)a1 = v22;
    if (v23)
      operator delete(v23);
    v24 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24++) = 0;
    while (prime != v24);
    v26 = (uint64_t *)(a1 + 4);
    v25 = (_QWORD *)*((_QWORD *)a1 + 2);
    if (!v25)
    {
LABEL_64:
      v8 = prime;
      goto LABEL_65;
    }
    v27 = v25[1];
    v28 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v29 = v27 & v28;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v29) = v26;
      for (i = (_QWORD *)*v25; *v25; i = (_QWORD *)*v25)
      {
        v31 = i[1] & v28;
        if (v31 == v29)
        {
          v25 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v31))
        {
          *v25 = *i;
          v32 = 8 * v31;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v32);
          **(_QWORD **)(*(_QWORD *)a1 + v32) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v31) = v25;
          v25 = i;
          v29 = v31;
        }
      }
      goto LABEL_64;
    }
    if (v27 >= prime)
      v27 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v27) = v26;
    v36 = (_QWORD *)*v25;
    if (!*v25)
      goto LABEL_64;
    while (1)
    {
      v38 = v36[1];
      if (v38 >= prime)
        v38 %= prime;
      if (v38 != v27)
      {
        if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v38))
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v38) = v25;
          goto LABEL_69;
        }
        *v25 = *v36;
        v37 = 8 * v38;
        *v36 = **(_QWORD **)(*(_QWORD *)a1 + v37);
        **(_QWORD **)(*(_QWORD *)a1 + v37) = v36;
        v36 = v25;
      }
      v38 = v27;
LABEL_69:
      v25 = v36;
      v36 = (_QWORD *)*v36;
      v27 = v38;
      if (!v36)
        goto LABEL_64;
    }
  }
LABEL_78:
  v39 = *(_QWORD **)a1;
  v40 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v40)
  {
    *v11 = *v40;
LABEL_86:
    *v40 = v11;
    goto LABEL_87;
  }
  *v11 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v11;
  v39[v4] = a1 + 4;
  if (*v11)
  {
    v41 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v41 >= v8)
        v41 %= v8;
    }
    else
    {
      v41 &= v8 - 1;
    }
    v40 = (_QWORD *)(*(_QWORD *)a1 + 8 * v41);
    goto LABEL_86;
  }
LABEL_87:
  ++*((_QWORD *)a1 + 3);
  return v11;
}

void sub_19FA4B8E0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__stable_sort<std::_ClassicAlgPolicy,md::TransitJunction::generateLinkNormals(void)::$_0 &,std::__wrap_iter<md::TransitJunction::generateLinkNormals(void)::LinkInfo **>>(__n128 *a1, __n128 *a2, unint64_t a3, char *a4, uint64_t a5)
{
  _BYTE *v7;
  _BYTE *v8;
  unint64_t *v10;
  uint64_t v11;
  __n128 *v12;
  __n128 *v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  __n128 *v17;
  uint64_t v18;
  _BYTE *v19;
  unint64_t v22;
  char *v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  __n128 *v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  unint64_t v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __n128 *v42;
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __n128 *v48;
  __n128 v49;
  unint64_t v50;

  if (a3 < 2)
    return;
  if (a3 == 2)
  {
    v7 = (_BYTE *)a2[-1].n128_u64[1];
    v8 = (_BYTE *)a1->n128_u64[0];
    if (v7[32]
      || !v8[32]
      && *(_QWORD *)(*(_QWORD *)v7 + 88) - *(_QWORD *)(*(_QWORD *)v7 + 80) > *(_QWORD *)(*(_QWORD *)v8 + 88)
                                                                               - *(_QWORD *)(*(_QWORD *)v8 + 80))
    {
      a1->n128_u64[0] = (unint64_t)v7;
      a2[-1].n128_u64[1] = (unint64_t)v8;
    }
    return;
  }
  if ((uint64_t)a3 <= 128)
  {
    if (a1 == a2)
      return;
    v10 = &a1->n128_u64[1];
    if (&a1->n128_i8[8] == (__int8 *)a2)
      return;
    v11 = 0;
    v12 = a1;
    while (1)
    {
      v13 = v12;
      v12 = (__n128 *)v10;
      v14 = (_BYTE *)*v10;
      v15 = (_BYTE *)v13->n128_u64[0];
      if (v14[32])
      {
        v12->n128_u64[0] = (unint64_t)v15;
        v16 = v11;
        if (v13 != a1)
        {
          do
          {
            *(unint64_t *)((char *)a1->n128_u64 + v16) = *(unint64_t *)((char *)&a1->n128_u64[-1] + v16);
            v16 -= 8;
          }
          while (v16);
        }
      }
      else
      {
        if (v15[32]
          || *(_QWORD *)(*(_QWORD *)v14 + 88) - *(_QWORD *)(*(_QWORD *)v14 + 80) <= *(_QWORD *)(*(_QWORD *)v15 + 88)
                                                                                      - *(_QWORD *)(*(_QWORD *)v15 + 80))
        {
          goto LABEL_10;
        }
        v12->n128_u64[0] = (unint64_t)v15;
        v18 = v11;
        if (v13 != a1)
        {
          while (1)
          {
            v17 = (__n128 *)((char *)a1 + v18);
            v19 = *(_BYTE **)((char *)&a1->n128_u64[-1] + v18);
            if (v19[32])
              goto LABEL_15;
            if (*(_QWORD *)(*(_QWORD *)v14 + 88) - *(_QWORD *)(*(_QWORD *)v14 + 80) <= *(_QWORD *)(*(_QWORD *)v19 + 88)
                                                                                          - *(_QWORD *)(*(_QWORD *)v19 + 80))
            {
              v17 = v13;
              goto LABEL_15;
            }
            v13 = (__n128 *)((char *)v13 - 8);
            *(unint64_t *)((char *)a1->n128_u64 + v18) = (unint64_t)v19;
            v17 = a1;
            v18 -= 8;
            if (!v18)
              goto LABEL_15;
          }
        }
      }
      v17 = a1;
LABEL_15:
      v17->n128_u64[0] = (unint64_t)v14;
LABEL_10:
      v10 = &v12->n128_u64[1];
      v11 += 8;
      if (&v12->n128_i8[8] == (__int8 *)a2)
        return;
    }
  }
  v22 = a3 >> 1;
  v23 = &a1->n128_i8[8 * (a3 >> 1)];
  v24 = a3 >> 1;
  if ((uint64_t)a3 > a5)
  {
    std::__stable_sort<std::_ClassicAlgPolicy,md::TransitJunction::generateLinkNormals(void)::$_0 &,std::__wrap_iter<md::TransitJunction::generateLinkNormals(void)::LinkInfo **>>(a1, v23, v24, a4, a5);
    std::__stable_sort<std::_ClassicAlgPolicy,md::TransitJunction::generateLinkNormals(void)::$_0 &,std::__wrap_iter<md::TransitJunction::generateLinkNormals(void)::LinkInfo **>>(&a1->n128_u64[a3 >> 1], a2, a3 - (a3 >> 1), a4, a5);
    std::__inplace_merge<std::_ClassicAlgPolicy,md::TransitJunction::generateLinkNormals(void)::$_0 &,std::__wrap_iter<md::TransitJunction::generateLinkNormals(void)::LinkInfo **>>(a1, (__n128 *)((char *)a1 + 8 * (a3 >> 1)), a2, a3 >> 1, a3 - (a3 >> 1), a4, a5);
    return;
  }
  std::__stable_sort_move<std::_ClassicAlgPolicy,md::TransitJunction::generateLinkNormals(void)::$_0 &,std::__wrap_iter<md::TransitJunction::generateLinkNormals(void)::LinkInfo **>>((uint64_t)a1, v23, v24, a4);
  v25 = &a4[8 * v22];
  std::__stable_sort_move<std::_ClassicAlgPolicy,md::TransitJunction::generateLinkNormals(void)::$_0 &,std::__wrap_iter<md::TransitJunction::generateLinkNormals(void)::LinkInfo **>>((uint64_t)&a1->n128_i64[a3 >> 1], (char *)a2, a3 - (a3 >> 1), v25);
  v26 = -1;
  v27 = v25;
  v28 = a4;
  v29 = a1;
  v30 = &a4[8 * a3];
  do
  {
    if (v27 == v30)
    {
      if (v28 == v25)
        return;
      v33 = &a4[8 * v22] - v28 - 8;
      if (v33 >= 0x38)
      {
        if ((unint64_t)(&a1->n128_i8[8 * v26 + 8] - v28) >= 0x20)
        {
          v44 = 0;
          v45 = (v33 >> 3) + 1;
          v46 = 8 * (v45 & 0x3FFFFFFFFFFFFFFCLL);
          v34 = &v28[v46];
          v47 = v45 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v48 = &v29[v44];
            v49 = *(__n128 *)&v28[v44 * 16 + 16];
            *v48 = *(__n128 *)&v28[v44 * 16];
            v48[1] = v49;
            v44 += 2;
            v47 -= 4;
          }
          while (v47);
          if (v45 == (v45 & 0x3FFFFFFFFFFFFFFCLL))
            return;
          v29 = (__n128 *)((char *)v29 + v46);
        }
        else
        {
          v34 = v28;
        }
      }
      else
      {
        v34 = v28;
      }
      do
      {
        v50 = *(_QWORD *)v34;
        v34 += 8;
        v29->n128_u64[0] = v50;
        v29 = (__n128 *)((char *)v29 + 8);
      }
      while (v34 != v25);
      return;
    }
    v31 = *(_QWORD *)v27;
    if (*(_BYTE *)(*(_QWORD *)v27 + 32)
      || (v32 = *(_QWORD *)v28, !*(_BYTE *)(*(_QWORD *)v28 + 32))
      && *(_QWORD *)(*(_QWORD *)v31 + 88) - *(_QWORD *)(*(_QWORD *)v31 + 80) > *(_QWORD *)(*(_QWORD *)v32 + 88)
                                                                                 - *(_QWORD *)(*(_QWORD *)v32 + 80))
    {
      v29->n128_u64[0] = v31;
      v27 += 8;
    }
    else
    {
      v29->n128_u64[0] = v32;
      v28 += 8;
    }
    v29 = (__n128 *)((char *)v29 + 8);
    ++v26;
  }
  while (v28 != v25);
  if (v27 == v30)
    return;
  v35 = &a4[8 * a3] - v27 - 8;
  if (v35 <= 0x47 || (unint64_t)((char *)&a1->n128_u64[v26] - v27 + 8) < 0x20)
  {
    v36 = v27;
    goto LABEL_43;
  }
  v38 = 0;
  v39 = (v35 >> 3) + 1;
  v40 = 8 * (v39 & 0x3FFFFFFFFFFFFFFCLL);
  v36 = &v27[v40];
  v41 = v39 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v42 = &v29[v38];
    v43 = *(__n128 *)&v27[v38 * 16 + 16];
    *v42 = *(__n128 *)&v27[v38 * 16];
    v42[1] = v43;
    v38 += 2;
    v41 -= 4;
  }
  while (v41);
  if (v39 != (v39 & 0x3FFFFFFFFFFFFFFCLL))
  {
    v29 = (__n128 *)((char *)v29 + v40);
    do
    {
LABEL_43:
      v37 = *(_QWORD *)v36;
      v36 += 8;
      v29->n128_u64[0] = v37;
      v29 = (__n128 *)((char *)v29 + 8);
    }
    while (v36 != v30);
  }
}

void std::__stable_sort<std::_ClassicAlgPolicy,md::TransitJunction::generateLinkNormals(void)::$_1 &,std::__wrap_iter<md::TransitJunction::generateLinkNormals(void)::LinkPath *>>(float *a1, float *a2, unint64_t a3, float *a4, uint64_t a5, __n128 a6)
{
  float *v7;
  float *v8;
  _BOOL4 v9;
  int v10;
  float *v12;
  uint64_t v13;
  float *v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  _BOOL4 v20;
  uint64_t v21;
  char *v22;
  float v23;
  int v24;
  _BOOL4 v25;
  float *v27;
  unint64_t v28;
  float *v29;
  unint64_t v30;
  __n128 v31;
  float *v32;
  float *v33;
  float *v34;
  uint64_t v35;
  _BOOL4 v36;
  uint64_t v37;
  uint64_t v38;
  float *v39;
  uint64_t v40;
  uint64_t v41;
  float *v42;
  uint64_t v43;
  __int128 v44;

  if (a3 >= 2)
  {
    v7 = a1;
    if (a3 == 2)
    {
      v8 = a2 - 4;
      v9 = *(_BYTE *)(*((_QWORD *)a2 - 2) + 32) != 0;
      if (v9 == (*(_BYTE *)(*(_QWORD *)a1 + 32) != 0))
        v9 = *(a2 - 2) > a1[2];
      if (v9)
      {
        v44 = *(_OWORD *)a1;
        v10 = *((_DWORD *)a2 - 2);
        *(_QWORD *)a1 = *(_QWORD *)v8;
        *((_DWORD *)a1 + 2) = v10;
        *(_QWORD *)v8 = v44;
        *(a2 - 2) = *((float *)&v44 + 2);
      }
    }
    else if ((uint64_t)a3 > 128)
    {
      v27 = a4;
      v28 = a3 >> 1;
      v29 = &a1[4 * (a3 >> 1)];
      v30 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        v31 = std::__stable_sort_move<std::_ClassicAlgPolicy,md::TransitJunction::generateLinkNormals(void)::$_1 &,std::__wrap_iter<md::TransitJunction::generateLinkNormals(void)::LinkPath *>>(a1, v29, v30, a4, a6);
        v32 = &v27[4 * v28];
        std::__stable_sort_move<std::_ClassicAlgPolicy,md::TransitJunction::generateLinkNormals(void)::$_1 &,std::__wrap_iter<md::TransitJunction::generateLinkNormals(void)::LinkPath *>>(&v7[4 * (a3 >> 1)], a2, a3 - (a3 >> 1), v32, v31);
        v33 = &v27[4 * a3];
        v34 = v32;
        while (v34 != v33)
        {
          v36 = *(_BYTE *)(*(_QWORD *)v34 + 32) != 0;
          if (v36 == (*(_BYTE *)(*(_QWORD *)v27 + 32) != 0))
            v36 = v34[2] > v27[2];
          if (v36)
          {
            v37 = *(_QWORD *)v34;
            v7[2] = v34[2];
            *(_QWORD *)v7 = v37;
            v34 += 4;
          }
          else
          {
            v35 = *(_QWORD *)v27;
            v7[2] = v27[2];
            *(_QWORD *)v7 = v35;
            v27 += 4;
          }
          v7 += 4;
          if (v27 == v32)
          {
            if (v34 != v33)
            {
              v41 = 0;
              do
              {
                v42 = &v7[v41];
                v43 = *(_QWORD *)&v34[v41];
                v42[2] = v34[v41 + 2];
                *(_QWORD *)v42 = v43;
                v41 += 4;
              }
              while (&v34[v41] != v33);
            }
            return;
          }
        }
        if (v27 != v32)
        {
          v38 = 0;
          do
          {
            v39 = &v7[v38];
            v40 = *(_QWORD *)&v27[v38];
            v39[2] = v27[v38 + 2];
            *(_QWORD *)v39 = v40;
            v38 += 4;
          }
          while (&v27[v38] != v32);
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,md::TransitJunction::generateLinkNormals(void)::$_1 &,std::__wrap_iter<md::TransitJunction::generateLinkNormals(void)::LinkPath *>>(a1, v29, v30, a4, a5);
        std::__stable_sort<std::_ClassicAlgPolicy,md::TransitJunction::generateLinkNormals(void)::$_1 &,std::__wrap_iter<md::TransitJunction::generateLinkNormals(void)::LinkPath *>>(&v7[4 * (a3 >> 1)], a2, a3 - (a3 >> 1), v27, a5);
        std::__inplace_merge<std::_ClassicAlgPolicy,md::TransitJunction::generateLinkNormals(void)::$_1 &,std::__wrap_iter<md::TransitJunction::generateLinkNormals(void)::LinkPath *>>(v7, &v7[4 * (a3 >> 1)], a2, a3 >> 1, a3 - (a3 >> 1), v27, a5);
      }
    }
    else if (a1 != a2)
    {
      v12 = a1 + 4;
      if (a1 + 4 != a2)
      {
        v13 = 0;
        v14 = a1;
        do
        {
          v16 = v14[6];
          v17 = *(_QWORD *)v14;
          v18 = v14[2];
          v14 = v12;
          v19 = *(_QWORD *)v12;
          if ((*(_BYTE *)(v19 + 32) != 0) != (*(_BYTE *)(v17 + 32) != 0))
            v20 = *(_BYTE *)(v19 + 32) != 0;
          else
            v20 = v16 > v18;
          if (v20)
          {
            v21 = v13;
            do
            {
              v22 = (char *)a1 + v21;
              *((_QWORD *)v22 + 2) = *(_QWORD *)((char *)a1 + v21);
              *((float *)v22 + 6) = *(float *)((char *)a1 + v21 + 8);
              if (!v21)
              {
                v15 = (uint64_t)a1;
                goto LABEL_12;
              }
              v23 = *((float *)v22 - 2);
              v24 = *(unsigned __int8 *)(*((_QWORD *)v22 - 2) + 32);
              v25 = *(_BYTE *)(v19 + 32) != 0;
              if (v25 == (v24 != 0))
                LOBYTE(v25) = v16 > v23;
              v21 -= 16;
            }
            while (v25);
            v15 = (uint64_t)a1 + v21 + 16;
LABEL_12:
            *(_QWORD *)v15 = v19;
            *(float *)(v15 + 8) = v16;
          }
          v12 = v14 + 4;
          v13 += 16;
        }
        while (v14 + 4 != a2);
      }
    }
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<md::TransitLineSegment const*,gm::Matrix<float,2,1>>,std::__unordered_map_hasher<md::TransitLineSegment const*,std::__hash_value_type<md::TransitLineSegment const*,gm::Matrix<float,2,1>>,std::hash<md::TransitLineSegment const*>,std::equal_to<md::TransitLineSegment const*>,true>,std::__unordered_map_equal<md::TransitLineSegment const*,std::__hash_value_type<md::TransitLineSegment const*,gm::Matrix<float,2,1>>,std::equal_to<md::TransitLineSegment const*>,std::hash<md::TransitLineSegment const*>,true>,std::allocator<std::__hash_value_type<md::TransitLineSegment const*,gm::Matrix<float,2,1>>>>::__emplace_unique_key_args<md::TransitLineSegment const*,std::piecewise_construct_t const&,std::tuple<md::TransitLineSegment const*&&>,std::tuple<>>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t prime;
  unint64_t v21;
  uint8x8_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v14 = v12[1];
            if (v14 == v8)
            {
              if (v12[2] == a2)
                return v12;
            }
            else if ((v14 & (v9 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v12 = (_QWORD *)*v12;
            if (!v12)
              goto LABEL_22;
          }
        }
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == a2)
              return v12;
          }
          else
          {
            if (v13 >= v9)
              v13 %= v9;
            if (v13 != v3)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_22:
  v12 = operator new(0x20uLL);
  *v12 = 0;
  v12[1] = v8;
  v12[2] = *a3;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = v19;
    else
      prime = v18;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v9 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v9)
      goto LABEL_34;
    if (prime < v9)
    {
      v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (v22 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        v21 = std::__next_prime(v21);
      }
      else
      {
        v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2)
          v21 = v23;
      }
      if (prime <= v21)
        prime = v21;
      if (prime < v9)
LABEL_34:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v25)
  {
    *v12 = *v25;
LABEL_58:
    *v25 = v12;
    goto LABEL_59;
  }
  *v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v24 + 8 * v3) = a1 + 16;
  if (*v12)
  {
    v26 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v26 >= v9)
        v26 %= v9;
    }
    else
    {
      v26 &= v9 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_19FA4C304(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 std::__stable_sort_move<std::_ClassicAlgPolicy,md::TransitJunction::generateLinkNormals(void)::$_1 &,std::__wrap_iter<md::TransitJunction::generateLinkNormals(void)::LinkPath *>>(float *a1, float *a2, unint64_t a3, float *a4, __n128 result)
{
  __n128 *v5;
  float *v8;
  float *v9;
  _BOOL4 v10;
  _OWORD *v11;
  float *v12;
  uint64_t v13;
  float *v14;
  float *v15;
  float *v16;
  _BOOL4 v17;
  float *v18;
  uint64_t v19;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  float *v24;
  float *v25;
  __n128 v26;
  _BOOL4 v27;
  __n128 v28;
  unint64_t v29;
  unint64_t v30;

  if (a3)
  {
    v5 = (__n128 *)a4;
    v8 = a1;
    if (a3 == 2)
    {
      v9 = a2 - 4;
      if ((*(_BYTE *)(*((_QWORD *)a2 - 2) + 32) != 0) != (*(_BYTE *)(*(_QWORD *)a1 + 32) != 0))
        v10 = *(_BYTE *)(*((_QWORD *)a2 - 2) + 32) != 0;
      else
        v10 = *(a2 - 2) > a1[2];
      v11 = a4 + 4;
      if (v10)
      {
        *(_OWORD *)a4 = *(_OWORD *)v9;
        result = *(__n128 *)a1;
        *v11 = *(_OWORD *)a1;
      }
      else
      {
        *(_OWORD *)a4 = *(_OWORD *)a1;
        result = *(__n128 *)v9;
        *v11 = *(_OWORD *)v9;
      }
    }
    else if (a3 == 1)
    {
      result = *(__n128 *)a1;
      *(_OWORD *)a4 = *(_OWORD *)a1;
    }
    else if ((uint64_t)a3 > 8)
    {
      v22 = a3 >> 1;
      v23 = 16 * (a3 >> 1);
      v24 = &a1[(unint64_t)v23 / 4];
      std::__stable_sort<std::_ClassicAlgPolicy,md::TransitJunction::generateLinkNormals(void)::$_1 &,std::__wrap_iter<md::TransitJunction::generateLinkNormals(void)::LinkPath *>>(a1, &a1[(unint64_t)v23 / 4], a3 >> 1, a4, a3 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,md::TransitJunction::generateLinkNormals(void)::$_1 &,std::__wrap_iter<md::TransitJunction::generateLinkNormals(void)::LinkPath *>>(&v8[(unint64_t)v23 / 4], a2, a3 - v22, &v5[(unint64_t)v23 / 0x10], a3 - v22);
      v25 = &v8[(unint64_t)v23 / 4];
      while (v25 != a2)
      {
        v27 = *(_BYTE *)(*(_QWORD *)v25 + 32) != 0;
        if (v27 == (*(_BYTE *)(*(_QWORD *)v8 + 32) != 0))
          v27 = v25[2] > v8[2];
        if (v27)
        {
          v28 = *(__n128 *)v25;
          v25 += 4;
          result = v28;
        }
        else
        {
          v26 = *(__n128 *)v8;
          v8 += 4;
          result = v26;
        }
        *v5++ = result;
        if (v8 == v24)
        {
          if (v25 != a2)
          {
            v30 = 0;
            do
            {
              result = *(__n128 *)&v25[v30 / 4];
              v5[v30 / 0x10] = result;
              v30 += 16;
            }
            while (&v25[v30 / 4] != a2);
          }
          return result;
        }
      }
      if (v8 != v24)
      {
        v29 = 0;
        do
        {
          result = *(__n128 *)&v8[v29 / 4];
          v5[v29 / 0x10] = result;
          v29 += 16;
        }
        while (&v8[v29 / 4] != v24);
      }
    }
    else if (a1 != a2)
    {
      result = *(__n128 *)a1;
      *(_OWORD *)a4 = *(_OWORD *)a1;
      v12 = a1 + 4;
      if (a1 + 4 != a2)
      {
        v13 = 0;
        v14 = a4;
        do
        {
          v15 = v12;
          v16 = v14 + 4;
          v17 = *(unsigned __int8 *)(*(_QWORD *)v12 + 32) != 0;
          if (v17 == (*(_BYTE *)(*(_QWORD *)v14 + 32) != 0))
            v17 = v8[6] > v14[2];
          if (v17)
          {
            result = *(__n128 *)v14;
            *(_OWORD *)v16 = *(_OWORD *)v14;
            v18 = a4;
            if (v14 != a4)
            {
              v19 = v13;
              while (1)
              {
                v18 = (float *)((char *)a4 + v19);
                result.n128_f32[0] = v8[6];
                if (!((*(_BYTE *)(*(_QWORD *)v15 + 32) != 0) != (*(_BYTE *)(*(_QWORD *)((char *)a4 + v19 - 16) + 32) != 0)
                     ? *(_BYTE *)(*(_QWORD *)v15 + 32) != 0
                     : result.n128_f32[0] > *(float *)((char *)a4 + v19 - 8)))
                  break;
                *(_QWORD *)v18 = *(_QWORD *)((char *)a4 + v19 - 16);
                v18[2] = *(float *)((char *)a4 + v19 - 8);
                v19 -= 16;
                if (!v19)
                {
                  v18 = a4;
                  break;
                }
              }
            }
            v21 = *(_QWORD *)v15;
            v18[2] = v15[2];
            *(_QWORD *)v18 = v21;
          }
          else
          {
            result = *(__n128 *)v15;
            *(_OWORD *)v16 = *(_OWORD *)v15;
          }
          v12 = v15 + 4;
          v13 += 16;
          v14 = v16;
          v8 = v15;
        }
        while (v15 + 4 != a2);
      }
    }
  }
  return result;
}

float *std::__inplace_merge<std::_ClassicAlgPolicy,md::TransitJunction::generateLinkNormals(void)::$_1 &,std::__wrap_iter<md::TransitJunction::generateLinkNormals(void)::LinkPath *>>(float *result, float *a2, float *a3, uint64_t a4, uint64_t a5, float *a6, uint64_t a7)
{
  uint64_t v8;
  float *v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  float *v15;
  float *v16;
  unint64_t v17;
  _BOOL4 v18;
  unint64_t v19;
  float *v20;
  float *v21;
  uint64_t v22;
  uint64_t v23;
  float *v24;
  float *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  float *v31;
  _BOOL4 v32;
  float *v33;
  float *v34;
  float *v35;
  uint64_t v36;
  float *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  float *v42;
  __int128 v43;
  float *v44;
  float *v45;
  float *v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  char v50;
  uint64_t v51;
  float *v52;
  float *v53;
  float *v54;
  float *v55;
  float *v56;
  uint64_t v57;
  float *v58;
  uint64_t v59;
  float *v60;
  float *v61;
  _BOOL4 v62;
  BOOL v63;
  float *v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  float *v68;
  uint64_t v69;
  _BOOL4 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  float *v74;
  uint64_t v75;
  float *v76;
  float *v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;

  if (!a5)
    return result;
  v8 = a5;
  v11 = result;
  while (v8 > a7 && a4 > a7)
  {
    if (!a4)
      return result;
    while (1)
    {
      v12 = *(unsigned __int8 *)(*(_QWORD *)a2 + 32) != 0;
      if (v12 == (*(_BYTE *)(*(_QWORD *)v11 + 32) != 0))
        LOBYTE(v12) = a2[2] > v11[2];
      if (v12)
        break;
      v11 += 4;
      if (!--a4)
        return result;
    }
    if (a4 >= v8)
    {
      if (a4 == 1)
      {
        v81 = *(_OWORD *)v11;
        v72 = *(_QWORD *)a2;
        v11[2] = a2[2];
        *(_QWORD *)v11 = v72;
        *(_QWORD *)a2 = v81;
        a2[2] = *((float *)&v81 + 2);
        return result;
      }
      if (a4 >= 0)
        v28 = a4;
      else
        v28 = a4 + 1;
      v22 = v28 >> 1;
      v16 = &v11[4 * (v28 >> 1)];
      v15 = a2;
      if (a2 != a3)
      {
        v29 = ((char *)a3 - (char *)a2) >> 4;
        v15 = a2;
        do
        {
          v30 = v29 >> 1;
          v31 = &v15[4 * (v29 >> 1)];
          if ((*(_BYTE *)(*(_QWORD *)v16 + 32) != 0) != (*(_BYTE *)(*(_QWORD *)v31 + 32) != 0))
            v32 = *(_BYTE *)(*(_QWORD *)v31 + 32) != 0;
          else
            v32 = v31[2] > v16[2];
          v33 = v31 + 4;
          v29 += ~v30;
          if (v32)
            v15 = v33;
          else
            v29 = v30;
        }
        while (v29);
      }
      v14 = ((char *)v15 - (char *)a2) >> 4;
      if (v16 != a2)
      {
LABEL_24:
        v23 = (char *)v15 - (char *)a2;
        if (v15 == a2)
        {
          a2 = v16;
        }
        else
        {
          v24 = v16 + 4;
          if (v16 + 4 == a2)
          {
            v79 = *(_OWORD *)v16;
            v76 = a3;
            v34 = a2;
            v35 = a6;
            v36 = v22;
            memmove(v16, v34, v23 - 4);
            v22 = v36;
            a3 = v76;
            a6 = v35;
            a2 = (float *)((char *)v16 + v23);
            *(_QWORD *)a2 = v79;
            a2[2] = *((float *)&v79 + 2);
          }
          else
          {
            v25 = a2 + 4;
            if (a2 + 4 == v15)
            {
              a2 = v16 + 4;
              v80 = *((_OWORD *)v15 - 1);
              if (v15 - 4 != v16)
              {
                v77 = a3;
                v37 = a6;
                v38 = v22;
                memmove(v16 + 4, v16, (char *)(v15 - 4) - (char *)v16 - 4);
                v22 = v38;
                a3 = v77;
                a6 = v37;
              }
              v16[2] = *((float *)&v80 + 2);
              *(_QWORD *)v16 = v80;
            }
            else
            {
              v26 = ((char *)a2 - (char *)v16) >> 4;
              if (v26 == v23 >> 4)
              {
                do
                {
                  v78 = *((_OWORD *)v24 - 1);
                  v27 = *((_QWORD *)v25 - 2);
                  *(v24 - 2) = *(v25 - 2);
                  *((_QWORD *)v24 - 2) = v27;
                  *((_QWORD *)v25 - 2) = v78;
                  *(v25 - 2) = *((float *)&v78 + 2);
                  if (v24 == a2)
                    break;
                  v24 += 4;
                  v63 = v25 == v15;
                  v25 += 4;
                }
                while (!v63);
              }
              else
              {
                v39 = v23 >> 4;
                v40 = ((char *)a2 - (char *)v16) >> 4;
                do
                {
                  v41 = v40;
                  v40 = v39;
                  v39 = v41 % v39;
                }
                while (v39);
                if (v40)
                {
                  v42 = &v16[4 * v40];
                  do
                  {
                    v43 = *((_OWORD *)v42 - 1);
                    v42 -= 4;
                    v44 = &v42[4 * v26];
                    v45 = v42;
                    do
                    {
                      v46 = v44;
                      v47 = *(_QWORD *)v44;
                      v45[2] = v46[2];
                      *(_QWORD *)v45 = v47;
                      v48 = ((char *)v15 - (char *)v46) >> 4;
                      v44 = &v46[4 * v26];
                      v49 = __OFSUB__(v26, v48);
                      v51 = v26 - v48;
                      v50 = (v51 < 0) ^ v49;
                      v52 = &v16[4 * v51];
                      if (!v50)
                        v44 = v52;
                      v45 = v46;
                    }
                    while (v44 != v42);
                    v46[2] = *((float *)&v43 + 2);
                    *(_QWORD *)v46 = v43;
                  }
                  while (v42 != v16);
                }
                a2 = &v16[4 * (v23 >> 4)];
              }
            }
          }
        }
        goto LABEL_62;
      }
    }
    else
    {
      if (v8 >= 0)
        v13 = v8;
      else
        v13 = v8 + 1;
      v14 = v13 >> 1;
      v15 = &a2[4 * (v13 >> 1)];
      v16 = a2;
      if (a2 != v11)
      {
        v17 = ((char *)a2 - (char *)v11) >> 4;
        v16 = v11;
        do
        {
          v18 = *(unsigned __int8 *)(*(_QWORD *)v15 + 32) != 0;
          v19 = v17 >> 1;
          v20 = &v16[4 * (v17 >> 1)];
          if (v18 == (*(_BYTE *)(*(_QWORD *)v20 + 32) != 0))
            v18 = v20[2] < v15[2];
          v21 = v20 + 4;
          v17 += ~v19;
          if (v18)
            v17 = v19;
          else
            v16 = v21;
        }
        while (v17);
      }
      v22 = ((char *)v16 - (char *)v11) >> 4;
      if (v16 != a2)
        goto LABEL_24;
    }
    a2 = v15;
LABEL_62:
    a4 -= v22;
    v8 -= v14;
    if (v22 + v14 >= a4 + v8)
    {
      v55 = a2;
      v56 = v15;
      v57 = v22;
      v58 = a6;
      result = (float *)std::__inplace_merge<std::_ClassicAlgPolicy,md::TransitJunction::generateLinkNormals(void)::$_1 &,std::__wrap_iter<md::TransitJunction::generateLinkNormals(void)::LinkPath *>>(a2, v56, a3, a4, v8, a6, a7);
      a2 = v16;
      v8 = v14;
      a4 = v57;
      a3 = v55;
      a6 = v58;
      if (!v14)
        return result;
    }
    else
    {
      v53 = a3;
      v54 = a6;
      result = (float *)std::__inplace_merge<std::_ClassicAlgPolicy,md::TransitJunction::generateLinkNormals(void)::$_1 &,std::__wrap_iter<md::TransitJunction::generateLinkNormals(void)::LinkPath *>>(v11, v16, a2, v22, v14, a6, a7);
      a3 = v53;
      v11 = a2;
      a2 = v15;
      a6 = v54;
      if (!v8)
        return result;
    }
  }
  if (a4 <= v8)
  {
    if (v11 != a2)
    {
      v67 = 0;
      do
      {
        *(_OWORD *)&a6[v67] = *(_OWORD *)&v11[v67];
        v67 += 4;
      }
      while (&v11[v67] != a2);
      v68 = &a6[v67];
      if (v68 != a6)
      {
        while (a2 != a3)
        {
          v70 = *(_BYTE *)(*(_QWORD *)a2 + 32) != 0;
          if (v70 == (*(_BYTE *)(*(_QWORD *)a6 + 32) != 0))
            v70 = a2[2] > a6[2];
          if (v70)
          {
            v71 = *(_QWORD *)a2;
            v11[2] = a2[2];
            *(_QWORD *)v11 = v71;
            a2 += 4;
          }
          else
          {
            v69 = *(_QWORD *)a6;
            v11[2] = a6[2];
            *(_QWORD *)v11 = v69;
            a6 += 4;
          }
          v11 += 4;
          if (a6 == v68)
            return result;
        }
        return (float *)memmove(v11, a6, (char *)v68 - (char *)a6 - 4);
      }
    }
  }
  else if (a3 != a2)
  {
    v59 = 0;
    do
    {
      *(_OWORD *)&a6[v59] = *(_OWORD *)&a2[v59];
      v59 += 4;
    }
    while (&a2[v59] != a3);
    v60 = &a6[v59];
    if (v60 != a6)
    {
      v61 = a3 - 4;
      while (a2 != v11)
      {
        if ((*(_BYTE *)(*((_QWORD *)a2 - 2) + 32) != 0) != (*(_BYTE *)(*((_QWORD *)v60 - 2) + 32) != 0))
          v62 = *(_BYTE *)(*((_QWORD *)v60 - 2) + 32) != 0;
        else
          v62 = *(v60 - 2) > *(a2 - 2);
        v63 = !v62;
        if (v62)
          v64 = a2 - 4;
        else
          v64 = v60 - 4;
        if (!v63)
          a2 -= 4;
        v65 = *(_QWORD *)v64;
        v66 = *((_DWORD *)v64 + 2);
        if (v63)
          v60 -= 4;
        *((_DWORD *)v61 + 2) = v66;
        *(_QWORD *)v61 = v65;
        v61 -= 4;
        if (v60 == a6)
          return result;
      }
      v73 = 0;
      do
      {
        v74 = &v61[v73];
        v75 = *(_QWORD *)&v60[v73 - 4];
        v74[2] = v60[v73 - 2];
        *(_QWORD *)v74 = v75;
        v73 -= 4;
      }
      while (&v60[v73] != a6);
    }
  }
  return result;
}

uint64_t std::__stable_sort_move<std::_ClassicAlgPolicy,md::TransitJunction::generateLinkNormals(void)::$_0 &,std::__wrap_iter<md::TransitJunction::generateLinkNormals(void)::LinkInfo **>>(uint64_t result, char *a2, unint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  char *v6;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD *v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _OWORD *v43;
  __int128 v44;
  uint64_t v45;

  if (a3)
  {
    v4 = a4;
    v6 = (char *)result;
    if (a3 == 1)
    {
LABEL_9:
      *v4 = *(_QWORD *)v6;
      return result;
    }
    if (a3 == 2)
    {
      v8 = (_BYTE *)*((_QWORD *)a2 - 1);
      if (!v8[32]
        && (*(_BYTE *)(*(_QWORD *)result + 32)
         || *(_QWORD *)(*(_QWORD *)v8 + 88) - *(_QWORD *)(*(_QWORD *)v8 + 80) <= *(_QWORD *)(**(_QWORD **)result
                                                                                               + 88)
                                                                                   - *(_QWORD *)(**(_QWORD **)result
                                                                                               + 80)))
      {
        v8 = *(_BYTE **)result;
        v6 = a2 - 8;
      }
      *a4 = v8;
      v4 = a4 + 1;
      goto LABEL_9;
    }
    if ((uint64_t)a3 <= 8)
    {
      if ((char *)result == a2)
        return result;
      v9 = result + 8;
      *a4 = *(_QWORD *)result;
      if ((char *)(result + 8) == a2)
        return result;
      v10 = 0;
      v11 = a4;
      v12 = a4;
LABEL_18:
      v15 = (_BYTE *)*v12++;
      v14 = v15;
      v16 = *(_QWORD *)v9;
      if (!*(_BYTE *)(*(_QWORD *)v9 + 32)
        && (v14[32]
         || *(_QWORD *)(*(_QWORD *)v16 + 88) - *(_QWORD *)(*(_QWORD *)v16 + 80) <= *(_QWORD *)(*(_QWORD *)v14 + 88)
                                                                                     - *(_QWORD *)(*(_QWORD *)v14 + 80)))
      {
        *v12 = v16;
        goto LABEL_17;
      }
      v11[1] = v14;
      v13 = a4;
      if (v11 == a4)
        goto LABEL_16;
      v17 = v10;
      while (1)
      {
        v18 = *(_BYTE **)((char *)a4 + v17 - 8);
        if (!*(_BYTE *)(*(_QWORD *)v9 + 32))
        {
          if (v18[32])
          {
            v13 = (_QWORD *)((char *)a4 + v17);
LABEL_16:
            *v13 = *(_QWORD *)v9;
LABEL_17:
            v9 += 8;
            v10 += 8;
            v11 = v12;
            if ((char *)v9 == a2)
              return result;
            goto LABEL_18;
          }
          if (*(_QWORD *)(**(_QWORD **)v9 + 88) - *(_QWORD *)(**(_QWORD **)v9 + 80) <= *(_QWORD *)(*(_QWORD *)v18 + 88)
                                                                                          - *(_QWORD *)(*(_QWORD *)v18 + 80))
          {
            v13 = v11;
            goto LABEL_16;
          }
        }
        --v11;
        *(_QWORD *)((char *)a4 + v17) = v18;
        v17 -= 8;
        if (!v17)
        {
          v13 = a4;
          goto LABEL_16;
        }
      }
    }
    v19 = a3 >> 1;
    v20 = 8 * (a3 >> 1);
    v21 = result + v20;
    std::__stable_sort<std::_ClassicAlgPolicy,md::TransitJunction::generateLinkNormals(void)::$_0 &,std::__wrap_iter<md::TransitJunction::generateLinkNormals(void)::LinkInfo **>>(result, result + v20, a3 >> 1, a4, a3 >> 1);
    result = std::__stable_sort<std::_ClassicAlgPolicy,md::TransitJunction::generateLinkNormals(void)::$_0 &,std::__wrap_iter<md::TransitJunction::generateLinkNormals(void)::LinkInfo **>>(&v6[v20], a2, a3 - v19, &v4[(unint64_t)v20 / 8], a3 - v19);
    v22 = -1;
    v23 = v4;
    v24 = v6;
    v25 = &v6[v20];
    do
    {
      if (v25 == a2)
      {
        if (v24 == (char *)v21)
          return result;
        v28 = &v6[8 * v19] - v24 - 8;
        if (v28 >= 0x38)
        {
          if ((unint64_t)((char *)&v4[v22 + 1] - v24) >= 0x20)
          {
            v32 = 0;
            v33 = (v28 >> 3) + 1;
            v34 = v33 & 0x3FFFFFFFFFFFFFFCLL;
            v29 = &v23[v34];
            v35 = v33 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v36 = &v23[v32];
              v37 = *(_OWORD *)&v24[v32 * 8 + 16];
              *v36 = *(_OWORD *)&v24[v32 * 8];
              v36[1] = v37;
              v32 += 4;
              v35 -= 4;
            }
            while (v35);
            if (v33 == (v33 & 0x3FFFFFFFFFFFFFFCLL))
              return result;
            v24 += v34 * 8;
          }
          else
          {
            v29 = v23;
          }
        }
        else
        {
          v29 = v23;
        }
        do
        {
          v38 = *(_QWORD *)v24;
          v24 += 8;
          *v29++ = v38;
        }
        while (v24 != (char *)v21);
        return result;
      }
      v26 = *(_QWORD *)v25;
      if (*(_BYTE *)(*(_QWORD *)v25 + 32)
        || (v27 = *(_QWORD *)v24, !*(_BYTE *)(*(_QWORD *)v24 + 32))
        && *(_QWORD *)(*(_QWORD *)v26 + 88) - *(_QWORD *)(*(_QWORD *)v26 + 80) > *(_QWORD *)(*(_QWORD *)v27 + 88)
                                                                                   - *(_QWORD *)(*(_QWORD *)v27 + 80))
      {
        *v23 = v26;
        v25 += 8;
      }
      else
      {
        *v23 = v27;
        v24 += 8;
      }
      ++v23;
      ++v22;
    }
    while (v24 != (char *)v21);
    if (v25 == a2)
      return result;
    v30 = a2 - v25 - 8;
    if (v30 < 0x48)
    {
      v31 = v23;
      goto LABEL_58;
    }
    if ((unint64_t)((char *)&v4[v22] - v25 + 8) < 0x20)
    {
      v31 = v23;
      goto LABEL_58;
    }
    v39 = 0;
    v40 = (v30 >> 3) + 1;
    v41 = v40 & 0x3FFFFFFFFFFFFFFCLL;
    v31 = &v23[v41];
    v42 = v40 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v43 = &v23[v39];
      v44 = *(_OWORD *)&v25[v39 * 8 + 16];
      *v43 = *(_OWORD *)&v25[v39 * 8];
      v43[1] = v44;
      v39 += 4;
      v42 -= 4;
    }
    while (v42);
    if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
    {
      v25 += v41 * 8;
      do
      {
LABEL_58:
        v45 = *(_QWORD *)v25;
        v25 += 8;
        *v31++ = v45;
      }
      while (v25 != a2);
    }
  }
  return result;
}

__n128 std::__inplace_merge<std::_ClassicAlgPolicy,md::TransitJunction::generateLinkNormals(void)::$_0 &,std::__wrap_iter<md::TransitJunction::generateLinkNormals(void)::LinkInfo **>>(__n128 *a1, __n128 *a2, __n128 *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  char *v8;
  uint64_t v9;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 *v17;
  __n128 *v18;
  __n128 *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _BYTE *v30;
  __n128 *v31;
  __n128 *v32;
  _BYTE *v33;
  _BYTE *v34;
  int64_t v35;
  __n128 *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __n128 *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __n128 *v46;
  unint64_t v47;
  unint64_t v48;
  __n128 *v49;
  __n128 *v50;
  __n128 *v51;
  uint64_t v52;
  BOOL v53;
  char v54;
  uint64_t v55;
  __n128 *v56;
  __n128 *v57;
  __n128 result;
  char *v59;
  unint64_t v60;
  char *v61;
  __n128 *v62;
  uint64_t v63;
  uint64_t v64;
  __n128 *v65;
  __n128 *v66;
  uint64_t v67;
  __n128 v68;
  unint64_t v69;
  char *v70;
  __n128 *v71;
  uint64_t v72;
  uint64_t v73;
  __n128 *v74;
  __n128 *v75;
  uint64_t v76;
  __n128 v77;
  unint64_t v78;
  _BYTE *v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  _BYTE *v83;
  __n128 *v84;
  _BYTE *v85;
  unint64_t v86;
  __n128 *v87;
  unint64_t *v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  __n128 *v93;
  __n128 *v94;
  _BYTE *v95;
  uint64_t v96;
  uint64_t v97;

  if (!a5)
    return result;
  v8 = a6;
  v9 = a5;
  while (v9 > a7 && a4 > a7)
  {
    if (!a4)
      return result;
    v13 = a2->n128_u64[0];
    if (*(_BYTE *)(a2->n128_u64[0] + 32))
    {
      v14 = a1->n128_u64[0];
    }
    else
    {
      while (1)
      {
        v14 = a1->n128_u64[0];
        if (!*(_BYTE *)(a1->n128_u64[0] + 32)
          && *(_QWORD *)(*(_QWORD *)v13 + 88) - *(_QWORD *)(*(_QWORD *)v13 + 80) > *(_QWORD *)(*(_QWORD *)v14 + 88)
                                                                                     - *(_QWORD *)(*(_QWORD *)v14 + 80))
        {
          break;
        }
        a1 = (__n128 *)((char *)a1 + 8);
        if (!--a4)
          return result;
      }
    }
    if (a4 >= v9)
    {
      if (a4 == 1)
      {
        a1->n128_u64[0] = v13;
        a2->n128_u64[0] = v14;
        return result;
      }
      if (a4 >= 0)
        v23 = a4;
      else
        v23 = a4 + 1;
      v24 = v23 >> 1;
      v18 = (__n128 *)((char *)a1 + 8 * (v23 >> 1));
      if (a2 == a3)
      {
        v16 = 0;
      }
      else
      {
        v16 = 0;
        v26 = (_BYTE *)v18->n128_u64[0];
        v27 = ((char *)a3 - (char *)a2) >> 3;
        do
        {
          v28 = v27 >> 1;
          v29 = (v27 >> 1) + v16;
          v30 = (_BYTE *)a2->n128_u64[v29];
          if (v30[32]
            || !v26[32]
            && *(_QWORD *)(*(_QWORD *)v30 + 88) - *(_QWORD *)(*(_QWORD *)v30 + 80) > *(_QWORD *)(*(_QWORD *)v26 + 88)
                                                                                       - *(_QWORD *)(*(_QWORD *)v26 + 80))
          {
            v16 = v29 + 1;
            v28 = v27 + ~v28;
          }
          v27 = v28;
        }
        while (v28);
      }
      v17 = (__n128 *)((char *)a2 + 8 * v16);
      v25 = (8 * v16) >> 3;
      v19 = v18;
    }
    else
    {
      if (v9 >= 0)
        v15 = v9;
      else
        v15 = v9 + 1;
      v16 = v15 >> 1;
      v17 = (__n128 *)((char *)a2 + 8 * v16);
      v18 = a2;
      v19 = a1;
      if (a2 != a1)
      {
        v18 = a1;
        v19 = a1;
        if (!*(_BYTE *)(v17->n128_u64[0] + 32))
        {
          v20 = ((char *)a2 - (char *)a1) >> 3;
          v19 = a1;
          do
          {
            v21 = v20 >> 1;
            v22 = &v19->n128_u64[v20 >> 1];
            if (*(_BYTE *)(*v22 + 32)
              || *(_QWORD *)(*(_QWORD *)v17->n128_u64[0] + 88) - *(_QWORD *)(*(_QWORD *)v17->n128_u64[0] + 80) <= *(_QWORD *)(*(_QWORD *)*v22 + 88) - *(_QWORD *)(*(_QWORD *)*v22 + 80))
            {
              v19 = (__n128 *)(v22 + 1);
              v21 = v20 + ~v21;
            }
            v20 = v21;
          }
          while (v21);
          v18 = v19;
        }
      }
      v24 = ((char *)v18 - (char *)a1) >> 3;
      v25 = v16;
    }
    v31 = v17;
    if (v19 != a2)
    {
      v31 = v18;
      if (v16)
      {
        v32 = (__n128 *)&v19->n128_i8[8];
        if (&v19->n128_i8[8] == (__int8 *)a2)
        {
          v95 = (_BYTE *)v19->n128_u64[0];
          v97 = a7;
          v35 = (char *)v17 - (char *)a2;
          v36 = a3;
          memmove(v19, a2, (char *)v17 - (char *)a2);
          a3 = v36;
          a7 = v97;
          v31 = (__n128 *)((char *)v19 + v35);
          v31->n128_u64[0] = (unint64_t)v95;
        }
        else if (v16 == 1)
        {
          v33 = (_BYTE *)a2->n128_u64[0];
          v31 = (__n128 *)&v18->n128_i8[8];
          if (a2 != v19)
          {
            v94 = a3;
            v96 = a7;
            v34 = (_BYTE *)a2->n128_u64[0];
            memmove(&v18->n128_i8[8], v19, (char *)a2 - (char *)v18);
            v33 = v34;
            a3 = v94;
            a7 = v96;
          }
          v19->n128_u64[0] = (unint64_t)v33;
        }
        else
        {
          v37 = ((char *)a2 - (char *)v18) >> 3;
          v38 = ((char *)v17 - (char *)a2) >> 3;
          if (v37 == v38)
          {
            v39 = 8 * v16 - 8;
            v40 = a2;
            do
            {
              v41 = v32[-1].n128_i64[1];
              v32[-1].n128_u64[1] = v40->n128_u64[0];
              v40->n128_u64[0] = v41;
              v40 = (__n128 *)((char *)v40 + 8);
              if (v32 == a2)
                break;
              v32 = (__n128 *)((char *)v32 + 8);
              v42 = v39;
              v39 -= 8;
            }
            while (v42);
            v31 = a2;
          }
          else
          {
            v43 = ((char *)v17 - (char *)a2) >> 3;
            v44 = ((char *)a2 - (char *)v18) >> 3;
            do
            {
              v45 = v44;
              v44 = v43;
              v43 = v45 % v43;
            }
            while (v43);
            if (v44)
            {
              v46 = (__n128 *)((char *)v19 + 8 * v44);
              do
              {
                v48 = v46[-1].n128_u64[1];
                v46 = (__n128 *)((char *)v46 - 8);
                v47 = v48;
                v49 = (__n128 *)((char *)v46 + 8 * v37);
                v50 = v46;
                do
                {
                  v51 = v49;
                  v50->n128_u64[0] = v49->n128_u64[0];
                  v52 = ((char *)v17 - (char *)v49) >> 3;
                  v53 = __OFSUB__(v37, v52);
                  v55 = v37 - v52;
                  v54 = (v55 < 0) ^ v53;
                  v49 = (__n128 *)((char *)v19 + 8 * v55);
                  if (v54)
                    v49 = (__n128 *)((char *)v51 + 8 * v37);
                  v50 = v51;
                }
                while (v49 != v46);
                v51->n128_u64[0] = v47;
              }
              while (v46 != v19);
            }
            v31 = (__n128 *)((char *)v19 + 8 * v38);
          }
        }
      }
    }
    a4 -= v24;
    v9 -= v25;
    if (v24 + v25 >= a4 + v9)
    {
      v8 = a6;
      std::__inplace_merge<std::_ClassicAlgPolicy,md::TransitJunction::generateLinkNormals(void)::$_0 &,std::__wrap_iter<md::TransitJunction::generateLinkNormals(void)::LinkInfo **>>(v31, v17, a3, a4, v9, a6, a7);
      v9 = v25;
      a4 = v24;
      a3 = v31;
      a2 = v18;
      if (!v25)
        return result;
    }
    else
    {
      v56 = v18;
      v57 = a3;
      v8 = a6;
      std::__inplace_merge<std::_ClassicAlgPolicy,md::TransitJunction::generateLinkNormals(void)::$_0 &,std::__wrap_iter<md::TransitJunction::generateLinkNormals(void)::LinkInfo **>>(a1, v56, v31, v24, v25, a6, a7);
      a3 = v57;
      a1 = v31;
      a2 = v17;
      if (!v9)
        return result;
    }
  }
  if (a4 <= v9)
  {
    if (a1 == a2)
      return result;
    v69 = (char *)a2 - (char *)a1 - 8;
    v70 = v8;
    v71 = a1;
    if (v69 >= 0x18)
    {
      v70 = v8;
      v71 = a1;
      if ((unint64_t)(v8 - (char *)a1) > 0x1F)
      {
        v72 = (v69 >> 3) + 1;
        v73 = 8 * (v72 & 0x3FFFFFFFFFFFFFFCLL);
        v70 = &v8[v73];
        v74 = a1 + 1;
        v75 = (__n128 *)(v8 + 16);
        v76 = v72 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          result = v74[-1];
          v77 = *v74;
          v75[-1] = result;
          *v75 = v77;
          v74 += 2;
          v75 += 2;
          v76 -= 4;
        }
        while (v76);
        if (v72 == (v72 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_84:
          if (v70 != v8)
          {
            while (a2 != a3)
            {
              v79 = (_BYTE *)a2->n128_u64[0];
              if (*(_BYTE *)(a2->n128_u64[0] + 32)
                || (v80 = *(_QWORD *)v8, !*(_BYTE *)(*(_QWORD *)v8 + 32))
                && *(_QWORD *)(*(_QWORD *)v79 + 88) - *(_QWORD *)(*(_QWORD *)v79 + 80) > *(_QWORD *)(*(_QWORD *)v80 + 88)
                                                                                           - *(_QWORD *)(*(_QWORD *)v80 + 80))
              {
                a1->n128_u64[0] = (unint64_t)v79;
                a2 = (__n128 *)((char *)a2 + 8);
              }
              else
              {
                a1->n128_u64[0] = v80;
                v8 += 8;
              }
              a1 = (__n128 *)((char *)a1 + 8);
              if (v8 == v70)
                return result;
            }
            memmove(a1, v8, v70 - v8);
          }
          return result;
        }
        v71 = (__n128 *)((char *)a1 + v73);
      }
    }
    do
    {
      v78 = v71->n128_u64[0];
      v71 = (__n128 *)((char *)v71 + 8);
      *(_QWORD *)v70 = v78;
      v70 += 8;
    }
    while (v71 != a2);
    goto LABEL_84;
  }
  if (a3 == a2)
    return result;
  v59 = &a3[-1].n128_i8[8];
  v60 = &a3[-1].n128_i8[8] - (__int8 *)a2;
  if (v60 < 0x18)
  {
    v61 = v8;
    v62 = a2;
  }
  else
  {
    v61 = v8;
    v62 = a2;
    if ((unint64_t)(v8 - (char *)a2) > 0x1F)
    {
      v63 = (v60 >> 3) + 1;
      v64 = 8 * (v63 & 0x3FFFFFFFFFFFFFFCLL);
      v61 = &v8[v64];
      v65 = a2 + 1;
      v66 = (__n128 *)(v8 + 16);
      v67 = v63 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        result = v65[-1];
        v68 = *v65;
        v66[-1] = result;
        *v66 = v68;
        v65 += 2;
        v66 += 2;
        v67 -= 4;
      }
      while (v67);
      if (v63 == (v63 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_97;
      v62 = (__n128 *)((char *)a2 + v64);
    }
  }
  do
  {
    v81 = v62->n128_u64[0];
    v62 = (__n128 *)((char *)v62 + 8);
    *(_QWORD *)v61 = v81;
    v61 += 8;
  }
  while (v62 != a3);
LABEL_97:
  if (v61 == v8)
    return result;
  v82 = 0;
  while (a2 != a1)
  {
    v84 = (__n128 *)((char *)a2 - 8);
    v83 = (_BYTE *)a2[-1].n128_u64[1];
    v85 = (_BYTE *)*((_QWORD *)v61 - 1);
    if (!v85[32]
      && (v83[32]
       || *(_QWORD *)(*(_QWORD *)v85 + 88) - *(_QWORD *)(*(_QWORD *)v85 + 80) <= *(_QWORD *)(*(_QWORD *)v83 + 88)
                                                                                   - *(_QWORD *)(*(_QWORD *)v83 + 80)))
    {
      v83 = (_BYTE *)*((_QWORD *)v61 - 1);
      v84 = a2;
      v61 -= 8;
    }
    a3[-1].n128_u64[1] = (unint64_t)v83;
    a3 = (__n128 *)((char *)a3 - 8);
    ++v82;
    a2 = v84;
    if (v61 == v8)
      return result;
  }
  v86 = v61 - v8 - 8;
  if (v86 < 0x58 || (unint64_t)(v61 - v59 + 8 * v82 - 8) < 0x20)
  {
    v87 = a3;
    goto LABEL_109;
  }
  v90 = 0;
  v91 = (v86 >> 3) + 1;
  v87 = (__n128 *)((char *)a3 - 8 * (v91 & 0x3FFFFFFFFFFFFFFCLL));
  v92 = v91 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    result = *(__n128 *)&v61[v90 * 16 - 16];
    v93 = &a3[v90];
    v93[-2] = *(__n128 *)&v61[v90 * 16 - 32];
    v93[-1] = result;
    v90 -= 2;
    v92 -= 4;
  }
  while (v92);
  if (v91 != (v91 & 0x3FFFFFFFFFFFFFFCLL))
  {
    v61 -= 8 * (v91 & 0x3FFFFFFFFFFFFFFCLL);
LABEL_109:
    v88 = &v87[-1].n128_u64[1];
    do
    {
      v89 = *((_QWORD *)v61 - 1);
      v61 -= 8;
      *v88-- = v89;
    }
    while (v61 != v8);
  }
  return result;
}

void std::vector<md::TransitLink *>::__insert_with_size[abi:nn180100]<std::__tree_const_iterator<md::TransitLink *,std::__tree_node<md::TransitLink *,void *> *,long>,std::__tree_const_iterator<md::TransitLink *,std::__tree_node<md::TransitLink *,void *> *,long>>(unint64_t *a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t a5)
{
  _QWORD *v6;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  _QWORD *v31;
  _QWORD *v32;
  char *v33;
  char *v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  __int128 *v39;
  char *v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  char *v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  char *v53;
  size_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  unint64_t v58;
  char *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  _OWORD *v66;
  __int128 *v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;

  if (a5 < 1)
    return;
  v6 = a3;
  v9 = *a1;
  v8 = (char *)a1[1];
  v10 = a2 - *a1;
  v11 = v10 >> 3;
  v12 = (char *)(*a1 + (v10 & 0xFFFFFFFFFFFFFFF8));
  v13 = a1[2];
  if (a5 > (uint64_t)(v13 - (_QWORD)v8) >> 3)
  {
    v14 = a5 + ((uint64_t)&v8[-v9] >> 3);
    if (v14 >> 61)
      abort();
    v15 = v13 - v9;
    if (v15 >> 2 > v14)
      v14 = v15 >> 2;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
      v16 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    if (v16)
    {
      if (v16 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v17 = (char *)operator new(8 * v16);
    }
    else
    {
      v17 = 0;
    }
    v28 = &v17[8 * v11];
    v29 = &v28[8 * a5];
    v30 = v28;
    do
    {
      *(_QWORD *)v30 = v6[4];
      v30 += 8;
      v31 = (_QWORD *)v6[1];
      if (v31)
      {
        do
        {
          v32 = v31;
          v31 = (_QWORD *)*v31;
        }
        while (v31);
      }
      else
      {
        do
        {
          v32 = (_QWORD *)v6[2];
          v22 = *v32 == (_QWORD)v6;
          v6 = v32;
        }
        while (!v22);
      }
      v6 = v32;
    }
    while (v30 != v29);
    v33 = (char *)*a1;
    if ((char *)*a1 == v12)
      goto LABEL_50;
    v34 = (char *)((v10 & 0xFFFFFFFFFFFFFFF8) + v9);
    v35 = v34 - v33 - 8;
    if (v35 >= 0x68)
    {
      v36 = v12;
      if ((unint64_t)(v34 - &v17[v10 & 0xFFFFFFFFFFFFFFF8]) >= 0x20)
      {
        v37 = (v35 >> 3) + 1;
        v36 = &v12[-8 * (v37 & 0x3FFFFFFFFFFFFFFCLL)];
        v38 = 8 * v11 - 16;
        v39 = (__int128 *)(v9 + v38);
        v40 = &v17[v38];
        v41 = v37 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v42 = *v39;
          *((_OWORD *)v40 - 1) = *(v39 - 1);
          *(_OWORD *)v40 = v42;
          v39 -= 2;
          v40 -= 32;
          v41 -= 4;
        }
        while (v41);
        v28 -= 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
        if (v37 == (v37 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_50;
      }
    }
    else
    {
      v36 = v12;
    }
    do
    {
      v43 = *((_QWORD *)v36 - 1);
      v36 -= 8;
      *((_QWORD *)v28 - 1) = v43;
      v28 -= 8;
    }
    while (v36 != v33);
    v8 = (char *)a1[1];
LABEL_50:
    v44 = &v17[8 * v16];
    if (v8 != v12)
      memmove(v29, v12, v8 - v12);
    v45 = (_QWORD *)*a1;
    *a1 = (unint64_t)v28;
    a1[1] = (unint64_t)&v29[v8 - v12];
    a1[2] = (unint64_t)v44;
    if (v45)
      operator delete(v45);
    return;
  }
  v18 = a5;
  v19 = a3;
  do
  {
    v20 = (_QWORD *)v19[1];
    v21 = v19;
    if (v20)
    {
      do
      {
        v19 = v20;
        v20 = (_QWORD *)*v20;
      }
      while (v20);
    }
    else
    {
      do
      {
        v19 = (_QWORD *)v21[2];
        v22 = *v19 == (_QWORD)v21;
        v21 = v19;
      }
      while (!v22);
    }
    v63 = v18-- <= 1;
  }
  while (!v63);
  v23 = (v8 - v12) >> 3;
  if (v23 >= a5)
  {
    v27 = (char *)a1[1];
  }
  else
  {
    if (v8 - v12 <= -8)
    {
      v46 = (v8 - v12) >> 3;
      v47 = a3;
      do
      {
        v49 = (_QWORD *)*v47;
        if (*v47)
        {
          do
          {
            v19 = v49;
            v49 = (_QWORD *)v49[1];
          }
          while (v49);
        }
        else
        {
          do
          {
            v19 = (_QWORD *)v47[2];
            v22 = *v19 == (_QWORD)v47;
            v47 = v19;
          }
          while (v22);
        }
        v47 = v19;
      }
      while (!__CFADD__(v46++, 1));
    }
    else if (v8 == v12)
    {
      v19 = a3;
    }
    else
    {
      v24 = (v8 - v12) >> 3;
      v25 = a3;
      do
      {
        v26 = (_QWORD *)v25[1];
        if (v26)
        {
          do
          {
            v19 = v26;
            v26 = (_QWORD *)*v26;
          }
          while (v26);
        }
        else
        {
          do
          {
            v19 = (_QWORD *)v25[2];
            v22 = *v19 == (_QWORD)v25;
            v25 = v19;
          }
          while (!v22);
        }
        v25 = v19;
        v63 = v24-- <= 1;
      }
      while (!v63);
    }
    if (v19 == a4)
    {
      v27 = (char *)a1[1];
    }
    else
    {
      v50 = v19;
      v27 = (char *)a1[1];
      do
      {
        *(_QWORD *)v27 = v50[4];
        v51 = (_QWORD *)v50[1];
        if (v51)
        {
          do
          {
            v52 = v51;
            v51 = (_QWORD *)*v51;
          }
          while (v51);
        }
        else
        {
          do
          {
            v52 = (_QWORD *)v50[2];
            v22 = *v52 == (_QWORD)v50;
            v50 = v52;
          }
          while (!v22);
        }
        v27 += 8;
        v50 = v52;
      }
      while (v52 != a4);
    }
    a1[1] = (unint64_t)v27;
    if (v23 < 1)
      return;
  }
  v53 = &v12[8 * a5];
  v54 = v27 - v53;
  v55 = (v27 - v53) >> 3;
  v56 = &v27[-8 * a5];
  v57 = v27;
  if (v56 < v8)
  {
    v58 = (v10 & 0xFFFFFFFFFFFFFFF8) + v54;
    v59 = (char *)(v58 + v9);
    v60 = v58 + v9 + 8;
    if ((unint64_t)v8 > v60)
      v60 = (unint64_t)v8;
    v61 = v60 + ~v9 - v58;
    v62 = v27 - v59;
    v63 = v61 >= 0x58 && v62 > 0x1F;
    v57 = v27;
    if (!v63)
      goto LABEL_100;
    v64 = (v61 >> 3) + 1;
    v65 = 8 * (v64 & 0x3FFFFFFFFFFFFFFCLL);
    v56 += v65;
    v66 = v27 + 16;
    v67 = (__int128 *)(8 * v55 + 8 * v11 + v9 + 16);
    v68 = v64 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v69 = *v67;
      *(v66 - 1) = *(v67 - 1);
      *v66 = v69;
      v66 += 2;
      v67 += 2;
      v68 -= 4;
    }
    while (v68);
    v57 = &v27[v65];
    if (v64 != (v64 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_100:
      do
      {
        v70 = *(_QWORD *)v56;
        v56 += 8;
        *(_QWORD *)v57 = v70;
        v57 += 8;
      }
      while (v56 < v8);
    }
  }
  a1[1] = (unint64_t)v57;
  if (v27 != v53)
    memmove(&v27[-8 * v55], v12, v54);
  if (v19 != v6)
  {
    do
    {
      *(_QWORD *)v12 = v6[4];
      v71 = (_QWORD *)v6[1];
      if (v71)
      {
        do
        {
          v72 = v71;
          v71 = (_QWORD *)*v71;
        }
        while (v71);
      }
      else
      {
        do
        {
          v72 = (_QWORD *)v6[2];
          v22 = *v72 == (_QWORD)v6;
          v6 = v72;
        }
        while (!v22);
      }
      v12 += 8;
      v6 = v72;
    }
    while (v72 != v19);
  }
}

void std::__stable_sort<std::_ClassicAlgPolicy,md::TransitJunction::updateLineJunctionSlots(void)::$_0 &,std::__wrap_iter<md::TransitLink **>>(__n128 *a1, char *a2, unint64_t a3, char *a4, uint64_t a5)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t *v10;
  uint64_t v11;
  __n128 *v12;
  __n128 *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  __n128 *v26;
  char *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __n128 *v39;
  __n128 v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __n128 *v48;
  __n128 v49;
  unint64_t v50;

  if (a3 >= 2)
  {
    if (a3 == 2)
    {
      v7 = *((_QWORD *)a2 - 1);
      v8 = a1->n128_u64[0];
      if (*(_QWORD *)(v7 + 112) - *(_QWORD *)(v7 + 104) > *(_QWORD *)(a1->n128_u64[0] + 112)
                                                         - *(_QWORD *)(a1->n128_u64[0] + 104))
      {
        a1->n128_u64[0] = v7;
        *((_QWORD *)a2 - 1) = v8;
      }
      return;
    }
    if ((uint64_t)a3 > 128)
    {
      v19 = a3 >> 1;
      v20 = &a1->n128_i8[8 * (a3 >> 1)];
      v21 = a3 >> 1;
      if ((uint64_t)a3 > a5)
      {
        std::__stable_sort<std::_ClassicAlgPolicy,md::TransitJunction::updateLineJunctionSlots(void)::$_0 &,std::__wrap_iter<md::TransitLink **>>(a1, v20, v21, a4, a5);
        std::__stable_sort<std::_ClassicAlgPolicy,md::TransitJunction::updateLineJunctionSlots(void)::$_0 &,std::__wrap_iter<md::TransitLink **>>(&a1->n128_u64[a3 >> 1], a2, a3 - (a3 >> 1), a4, a5);
        std::__inplace_merge<std::_ClassicAlgPolicy,md::TransitJunction::updateLineJunctionSlots(void)::$_0 &,std::__wrap_iter<md::TransitLink **>>(a1, &a1->n128_i8[8 * (a3 >> 1)], a2, a3 >> 1, a3 - (a3 >> 1), a4, a5);
        return;
      }
      std::__stable_sort_move<std::_ClassicAlgPolicy,md::TransitJunction::updateLineJunctionSlots(void)::$_0 &,std::__wrap_iter<md::TransitLink **>>((uint64_t)a1, v20, v21, (uint64_t *)a4);
      v22 = (uint64_t *)&a4[8 * v19];
      std::__stable_sort_move<std::_ClassicAlgPolicy,md::TransitJunction::updateLineJunctionSlots(void)::$_0 &,std::__wrap_iter<md::TransitLink **>>((uint64_t)&a1->n128_i64[a3 >> 1], a2, a3 - (a3 >> 1), v22);
      v23 = -1;
      v24 = v22;
      v25 = (uint64_t *)a4;
      v26 = a1;
      v27 = &a4[8 * a3];
      do
      {
        ++v23;
        if (v24 == (uint64_t *)v27)
        {
          if (v25 == v22)
            return;
          v42 = &a4[8 * v19] - (char *)v25 - 8;
          if (v42 >= 0x38)
          {
            if ((unint64_t)((char *)&a1->n128_u64[v23] - (char *)v25) >= 0x20)
            {
              v44 = 0;
              v45 = (v42 >> 3) + 1;
              v46 = v45 & 0x3FFFFFFFFFFFFFFCLL;
              v43 = &v25[v46];
              v47 = v45 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v48 = &v26[v44 / 2];
                v49 = *(__n128 *)&v25[v44 + 2];
                *v48 = *(__n128 *)&v25[v44];
                v48[1] = v49;
                v44 += 4;
                v47 -= 4;
              }
              while (v47);
              if (v45 == (v45 & 0x3FFFFFFFFFFFFFFCLL))
                return;
              v26 = (__n128 *)((char *)v26 + v46 * 8);
            }
            else
            {
              v43 = v25;
            }
          }
          else
          {
            v43 = v25;
          }
          do
          {
            v50 = *v43++;
            v26->n128_u64[0] = v50;
            v26 = (__n128 *)((char *)v26 + 8);
          }
          while (v43 != v22);
          return;
        }
        v28 = v24;
        v29 = *v24;
        v30 = *v25;
        v31 = *(_QWORD *)(v29 + 112) - *(_QWORD *)(v29 + 104);
        v32 = *(_QWORD *)(*v25 + 112) - *(_QWORD *)(*v25 + 104);
        if (v31 > v32)
          v30 = v29;
        v25 += v31 <= v32;
        v24 = &v28[v31 > v32];
        v26->n128_u64[0] = v30;
        v26 = (__n128 *)((char *)v26 + 8);
      }
      while (v25 != v22);
      if (v24 == (uint64_t *)v27)
        return;
      v33 = -8;
      if (v31 <= v32)
        v33 = 0;
      v34 = &a4[8 * a3] - (char *)v28 + v33 - 8;
      if (v34 <= 0x77 || (unint64_t)((char *)&a1->n128_u64[v23] - (char *)&v28[v31 > v32] + 8) < 0x20)
        goto LABEL_33;
      v35 = 0;
      v36 = (v34 >> 3) + 1;
      v37 = 8 * (v36 & 0x3FFFFFFFFFFFFFFCLL);
      v38 = v36 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v39 = &v26[v35 / 2];
        v40 = *(__n128 *)&v24[v35 + 2];
        *v39 = *(__n128 *)&v24[v35];
        v39[1] = v40;
        v35 += 4;
        v38 -= 4;
      }
      while (v38);
      if (v36 != (v36 & 0x3FFFFFFFFFFFFFFCLL))
      {
        v26 = (__n128 *)((char *)v26 + v37);
        v24 = (uint64_t *)((char *)v24 + v37);
        do
        {
LABEL_33:
          v41 = *v24++;
          v26->n128_u64[0] = v41;
          v26 = (__n128 *)((char *)v26 + 8);
        }
        while (v24 != (uint64_t *)v27);
      }
    }
    else if (a1 != (__n128 *)a2)
    {
      v10 = &a1->n128_u64[1];
      if (&a1->n128_i8[8] != a2)
      {
        v11 = 0;
        v12 = a1;
        do
        {
          v14 = v12->n128_u64[0];
          v12 = (__n128 *)v10;
          v15 = *v10;
          if (*(_QWORD *)(v15 + 112) - *(_QWORD *)(v15 + 104) > *(_QWORD *)(v14 + 112) - *(_QWORD *)(v14 + 104))
          {
            v16 = v11;
            do
            {
              *(unint64_t *)((char *)&a1->n128_u64[1] + v16) = v14;
              if (!v16)
              {
                v13 = a1;
                goto LABEL_10;
              }
              v14 = *(unint64_t *)((char *)&a1->n128_u64[-1] + v16);
              v16 -= 8;
            }
            while (*(_QWORD *)(v15 + 112) - *(_QWORD *)(v15 + 104) > *(_QWORD *)(v14 + 112) - *(_QWORD *)(v14 + 104));
            v13 = (__n128 *)&a1->n128_i8[v16 + 8];
LABEL_10:
            v13->n128_u64[0] = v15;
          }
          v10 = &v12->n128_u64[1];
          v11 += 8;
        }
        while (&v12->n128_i8[8] != a2);
      }
    }
  }
}

uint64_t std::__stable_sort_move<std::_ClassicAlgPolicy,md::TransitJunction::updateLineJunctionSlots(void)::$_0 &,std::__wrap_iter<md::TransitLink **>>(uint64_t result, char *a2, unint64_t a3, uint64_t *a4)
{
  uint64_t *v4;
  char *v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  __int128 v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  __int128 v48;
  uint64_t v49;

  if (a3)
  {
    v4 = a4;
    v6 = (char *)result;
    if (a3 == 1)
    {
LABEL_8:
      *v4 = *(_QWORD *)v6;
      return result;
    }
    if (a3 == 2)
    {
      v8 = *((_QWORD *)a2 - 1);
      v9 = *(_QWORD *)(v8 + 112) - *(_QWORD *)(v8 + 104);
      v10 = *(_QWORD *)(*(_QWORD *)result + 112) - *(_QWORD *)(*(_QWORD *)result + 104);
      if (v9 <= v10)
        v8 = *(_QWORD *)result;
      *a4 = v8;
      v4 = a4 + 1;
      if (v9 <= v10)
        v6 = a2 - 8;
      goto LABEL_8;
    }
    if ((uint64_t)a3 > 8)
    {
      v20 = a3 >> 1;
      v21 = 8 * (a3 >> 1);
      v22 = result + v21;
      std::__stable_sort<std::_ClassicAlgPolicy,md::TransitJunction::updateLineJunctionSlots(void)::$_0 &,std::__wrap_iter<md::TransitLink **>>(result, result + v21, a3 >> 1, a4, a3 >> 1);
      result = std::__stable_sort<std::_ClassicAlgPolicy,md::TransitJunction::updateLineJunctionSlots(void)::$_0 &,std::__wrap_iter<md::TransitLink **>>(&v6[v21], a2, a3 - v20, &v4[(unint64_t)v21 / 8], a3 - v20);
      v23 = -1;
      v24 = v4;
      v25 = v6;
      v26 = &v6[v21];
      do
      {
        ++v23;
        if (v26 == a2)
        {
          if (v25 == (char *)v22)
            return result;
          v41 = &v6[8 * v20] - v25 - 8;
          if (v41 >= 0x38)
          {
            if ((unint64_t)((char *)&v4[v23] - v25) >= 0x20)
            {
              v43 = 0;
              v44 = (v41 >> 3) + 1;
              v45 = v44 & 0x3FFFFFFFFFFFFFFCLL;
              v42 = &v24[v45];
              v46 = v44 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v47 = &v24[v43];
                v48 = *(_OWORD *)&v25[v43 * 8 + 16];
                *v47 = *(_OWORD *)&v25[v43 * 8];
                v47[1] = v48;
                v43 += 4;
                v46 -= 4;
              }
              while (v46);
              if (v44 == (v44 & 0x3FFFFFFFFFFFFFFCLL))
                return result;
              v25 += v45 * 8;
            }
            else
            {
              v42 = v24;
            }
          }
          else
          {
            v42 = v24;
          }
          do
          {
            v49 = *(_QWORD *)v25;
            v25 += 8;
            *v42++ = v49;
          }
          while (v25 != (char *)v22);
          return result;
        }
        v27 = v26;
        v28 = *(_QWORD *)v26;
        v29 = *(_QWORD *)v25;
        v30 = *(_QWORD *)(v28 + 112) - *(_QWORD *)(v28 + 104);
        v31 = *(_QWORD *)(*(_QWORD *)v25 + 112) - *(_QWORD *)(*(_QWORD *)v25 + 104);
        if (v30 > v31)
          v29 = v28;
        v26 = &v27[8 * (v30 > v31)];
        v25 += 8 * (v30 <= v31);
        *v24++ = v29;
      }
      while (v25 != (char *)v22);
      if (v26 == a2)
        return result;
      v32 = -8;
      if (v30 <= v31)
        v32 = 0;
      v33 = a2 - v27 + v32 - 8;
      if (v33 < 0x68 || (unint64_t)((char *)&v4[v23] - &v27[8 * (v30 > v31)] + 8) < 0x20)
        goto LABEL_37;
      v34 = 0;
      v35 = (v33 >> 3) + 1;
      v36 = 8 * (v35 & 0x3FFFFFFFFFFFFFFCLL);
      v37 = v35 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v38 = &v24[v34];
        v39 = *(_OWORD *)&v26[v34 * 8 + 16];
        *v38 = *(_OWORD *)&v26[v34 * 8];
        v38[1] = v39;
        v34 += 4;
        v37 -= 4;
      }
      while (v37);
      if (v35 != (v35 & 0x3FFFFFFFFFFFFFFCLL))
      {
        v26 += v36;
        v24 = (uint64_t *)((char *)v24 + v36);
        do
        {
LABEL_37:
          v40 = *(_QWORD *)v26;
          v26 += 8;
          *v24++ = v40;
        }
        while (v26 != a2);
      }
    }
    else if ((char *)result != a2)
    {
      v11 = result + 8;
      *a4 = *(_QWORD *)result;
      if ((char *)(result + 8) != a2)
      {
        v12 = 0;
        v13 = a4;
        v14 = a4;
        do
        {
          v16 = *v14++;
          v15 = v16;
          if (*(_QWORD *)(*(_QWORD *)v11 + 112) - *(_QWORD *)(*(_QWORD *)v11 + 104) <= *(_QWORD *)(v16 + 112)
                                                                                          - *(_QWORD *)(v16 + 104))
          {
            *v14 = *(_QWORD *)v11;
          }
          else
          {
            v13[1] = v15;
            v17 = a4;
            if (v13 != a4)
            {
              v18 = v12;
              while (1)
              {
                v17 = (uint64_t *)((char *)a4 + v18);
                v19 = *(uint64_t *)((char *)a4 + v18 - 8);
                if (*(_QWORD *)(*(_QWORD *)v11 + 112) - *(_QWORD *)(*(_QWORD *)v11 + 104) <= *(_QWORD *)(v19 + 112)
                                                                                                - *(_QWORD *)(v19 + 104))
                  break;
                *v17 = v19;
                v18 -= 8;
                if (!v18)
                {
                  v17 = a4;
                  break;
                }
              }
            }
            *v17 = *(_QWORD *)v11;
          }
          v11 += 8;
          v12 += 8;
          v13 = v14;
        }
        while ((char *)v11 != a2);
      }
    }
  }
  return result;
}

__n128 std::__inplace_merge<std::_ClassicAlgPolicy,md::TransitJunction::updateLineJunctionSlots(void)::$_0 &,std::__wrap_iter<md::TransitLink **>>(__n128 *a1, char *a2, char *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  uint64_t v8;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  size_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  char *v54;
  char *v55;
  __n128 result;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  unint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  __n128 *v67;
  __n128 *v68;
  uint64_t v69;
  __n128 v70;
  unint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  __n128 *v76;
  __n128 *v77;
  uint64_t v78;
  __n128 v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  char v84;
  _BOOL4 v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;

  if (!a5)
    return result;
  v8 = a5;
  while (v8 > a7 && a4 > a7)
  {
    if (!a4)
      return result;
    while (1)
    {
      v13 = a1->n128_u64[0];
      if (*(_QWORD *)(*(_QWORD *)a2 + 112) - *(_QWORD *)(*(_QWORD *)a2 + 104) > *(_QWORD *)(a1->n128_u64[0] + 112)
                                                                                   - *(_QWORD *)(a1->n128_u64[0] + 104))
        break;
      a1 = (__n128 *)((char *)a1 + 8);
      if (!--a4)
        return result;
    }
    if (a4 >= v8)
    {
      if (a4 == 1)
      {
        a1->n128_u64[0] = *(_QWORD *)a2;
        *(_QWORD *)a2 = v13;
        return result;
      }
      if (a4 >= 0)
        v30 = a4;
      else
        v30 = a4 + 1;
      v23 = v30 >> 1;
      v17 = &a1->n128_i8[8 * (v30 >> 1)];
      v16 = a2;
      if (a2 != a3)
      {
        v31 = (a3 - a2) >> 3;
        v16 = a2;
        do
        {
          v32 = v31 >> 1;
          v33 = &v16[8 * (v31 >> 1)];
          v35 = *(_QWORD *)v33;
          v34 = v33 + 8;
          v31 += ~(v31 >> 1);
          if (*(_QWORD *)(v35 + 112) - *(_QWORD *)(v35 + 104) > *(_QWORD *)(*(_QWORD *)v17 + 112)
                                                               - *(_QWORD *)(*(_QWORD *)v17 + 104))
            v16 = v34;
          else
            v31 = v32;
        }
        while (v31);
      }
      v15 = (v16 - a2) >> 3;
      if (v17 != a2)
      {
LABEL_20:
        v24 = v16 - a2;
        if (v16 == a2)
        {
          a2 = v17;
        }
        else
        {
          v25 = v17 + 8;
          if (v17 + 8 == a2)
          {
            v98 = *(_QWORD *)v17;
            v100 = v23;
            v36 = a2;
            v37 = v16 - a2;
            v38 = a6;
            v39 = a3;
            memmove(v17, v36, v37);
            v23 = v100;
            a3 = v39;
            a6 = v38;
            a2 = &v17[v24];
            *(_QWORD *)&v17[v24] = v98;
          }
          else
          {
            v26 = a2 + 8;
            if (a2 + 8 == v16)
            {
              v40 = *((_QWORD *)v16 - 1);
              a2 = v17 + 8;
              if (v16 - 8 != v17)
              {
                v99 = a6;
                v101 = v23;
                v41 = a3;
                memmove(v17 + 8, v17, v16 - 8 - v17);
                a6 = v99;
                v23 = v101;
                a3 = v41;
              }
              *(_QWORD *)v17 = v40;
            }
            else
            {
              v27 = (a2 - v17) >> 3;
              if (v27 == v24 >> 3)
              {
                do
                {
                  v28 = *((_QWORD *)v25 - 1);
                  *((_QWORD *)v25 - 1) = *((_QWORD *)v26 - 1);
                  *((_QWORD *)v26 - 1) = v28;
                  if (v25 == a2)
                    break;
                  v25 += 8;
                  v29 = v26 == v16;
                  v26 += 8;
                }
                while (!v29);
              }
              else
              {
                v42 = v24 >> 3;
                v43 = (a2 - v17) >> 3;
                do
                {
                  v44 = v43;
                  v43 = v42;
                  v42 = v44 % v42;
                }
                while (v42);
                if (v43)
                {
                  v45 = &v17[8 * v43];
                  do
                  {
                    v47 = *((_QWORD *)v45 - 1);
                    v45 -= 8;
                    v46 = v47;
                    v48 = &v45[8 * v27];
                    v49 = v45;
                    do
                    {
                      v50 = v48;
                      *(_QWORD *)v49 = *(_QWORD *)v48;
                      v51 = (v16 - v48) >> 3;
                      v52 = __OFSUB__(v27, v51);
                      v53 = v27 - v51;
                      v84 = (v53 < 0) ^ v52;
                      v48 = &v17[8 * v53];
                      if (v84)
                        v48 = &v50[8 * v27];
                      v49 = v50;
                    }
                    while (v48 != v45);
                    *(_QWORD *)v50 = v46;
                  }
                  while (v45 != v17);
                }
                a2 = &v17[8 * (v24 >> 3)];
              }
            }
          }
        }
        goto LABEL_55;
      }
    }
    else
    {
      if (v8 >= 0)
        v14 = v8;
      else
        v14 = v8 + 1;
      v15 = v14 >> 1;
      v16 = &a2[8 * (v14 >> 1)];
      v17 = a2;
      if (a2 != (char *)a1)
      {
        v18 = (a2 - (char *)a1) >> 3;
        v17 = (char *)a1;
        do
        {
          v19 = v18 >> 1;
          v20 = &v17[8 * (v18 >> 1)];
          v22 = *(_QWORD *)v20;
          v21 = v20 + 8;
          v18 += ~(v18 >> 1);
          if (*(_QWORD *)(*(_QWORD *)v16 + 112) - *(_QWORD *)(*(_QWORD *)v16 + 104) > *(_QWORD *)(v22 + 112)
                                                                                         - *(_QWORD *)(v22 + 104))
            v18 = v19;
          else
            v17 = v21;
        }
        while (v18);
      }
      v23 = (v17 - (char *)a1) >> 3;
      if (v17 != a2)
        goto LABEL_20;
    }
    a2 = v16;
LABEL_55:
    a4 -= v23;
    v8 -= v15;
    if (v23 + v15 >= a4 + v8)
    {
      v57 = a2;
      v58 = a3;
      v59 = a4;
      v60 = a6;
      a4 = v23;
      std::__inplace_merge<std::_ClassicAlgPolicy,md::TransitJunction::updateLineJunctionSlots(void)::$_0 &,std::__wrap_iter<md::TransitLink **>>(a2, v16, v58, v59, v8, a6, a7);
      a2 = v17;
      v8 = v15;
      a3 = v57;
      a6 = v60;
      if (!v15)
        return result;
    }
    else
    {
      v54 = a3;
      v55 = a6;
      std::__inplace_merge<std::_ClassicAlgPolicy,md::TransitJunction::updateLineJunctionSlots(void)::$_0 &,std::__wrap_iter<md::TransitLink **>>(a1, v17, a2, v23, v15, a6, a7);
      a3 = v54;
      a1 = (__n128 *)a2;
      a2 = v16;
      a6 = v55;
      if (!v8)
        return result;
    }
  }
  if (a4 <= v8)
  {
    if (a1 == (__n128 *)a2)
      return result;
    v71 = a2 - (char *)a1 - 8;
    v72 = a6;
    v73 = (char *)a1;
    if (v71 >= 0x18)
    {
      v72 = a6;
      v73 = (char *)a1;
      if ((unint64_t)(a6 - (char *)a1) > 0x1F)
      {
        v74 = (v71 >> 3) + 1;
        v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
        v72 = &a6[v75];
        v76 = a1 + 1;
        v77 = (__n128 *)(a6 + 16);
        v78 = v74 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          result = v76[-1];
          v79 = *v76;
          v77[-1] = result;
          *v77 = v79;
          v76 += 2;
          v77 += 2;
          v78 -= 4;
        }
        while (v78);
        if (v74 == (v74 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_76:
          if (v72 != a6)
          {
            while (a2 != a3)
            {
              v81 = *(_QWORD *)a2;
              v82 = *(_QWORD *)(*(_QWORD *)a2 + 112) - *(_QWORD *)(*(_QWORD *)a2 + 104);
              v83 = *(_QWORD *)(*(_QWORD *)a6 + 112) - *(_QWORD *)(*(_QWORD *)a6 + 104);
              v84 = v82 > v83;
              v85 = v82 <= v83;
              if (v84)
                v86 = 1;
              else
                v86 = 0;
              if (!v84)
                v81 = *(_QWORD *)a6;
              a2 += 8 * v86;
              a6 += 8 * v85;
              a1->n128_u64[0] = v81;
              a1 = (__n128 *)((char *)a1 + 8);
              if (a6 == v72)
                return result;
            }
            memmove(a1, a6, v72 - a6);
          }
          return result;
        }
        v73 = (char *)a1 + v75;
      }
    }
    do
    {
      v80 = *(_QWORD *)v73;
      v73 += 8;
      *(_QWORD *)v72 = v80;
      v72 += 8;
    }
    while (v73 != a2);
    goto LABEL_76;
  }
  if (a3 == a2)
    return result;
  v61 = a3 - 8;
  v62 = a3 - 8 - a2;
  if (v62 < 0x18)
  {
    v63 = a6;
    v64 = a2;
    goto LABEL_88;
  }
  v63 = a6;
  v64 = a2;
  if ((unint64_t)(a6 - a2) <= 0x1F)
  {
    do
    {
LABEL_88:
      v87 = *(_QWORD *)v64;
      v64 += 8;
      *(_QWORD *)v63 = v87;
      v63 += 8;
    }
    while (v64 != a3);
  }
  else
  {
    v65 = (v62 >> 3) + 1;
    v66 = 8 * (v65 & 0x3FFFFFFFFFFFFFFCLL);
    v63 = &a6[v66];
    v67 = (__n128 *)(a2 + 16);
    v68 = (__n128 *)(a6 + 16);
    v69 = v65 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      result = v67[-1];
      v70 = *v67;
      v68[-1] = result;
      *v68 = v70;
      v67 += 2;
      v68 += 2;
      v69 -= 4;
    }
    while (v69);
    if (v65 != (v65 & 0x3FFFFFFFFFFFFFFCLL))
    {
      v64 = &a2[v66];
      goto LABEL_88;
    }
  }
  if (v63 != a6)
  {
    v88 = 0;
    while (a2 != (char *)a1)
    {
      v89 = *((_QWORD *)a2 - 1);
      if (*(_QWORD *)(*((_QWORD *)v63 - 1) + 112) - *(_QWORD *)(*((_QWORD *)v63 - 1) + 104) > *(_QWORD *)(v89 + 112)
                                                                                                 - *(_QWORD *)(v89 + 104))
      {
        a2 -= 8;
      }
      else
      {
        v89 = *((_QWORD *)v63 - 1);
        v63 -= 8;
      }
      *((_QWORD *)a3 - 1) = v89;
      a3 -= 8;
      ++v88;
      if (v63 == a6)
        return result;
    }
    v90 = v63 - a6 - 8;
    if (v90 >= 0x58 && (unint64_t)(v63 - v61 + 8 * v88 - 8) >= 0x20)
    {
      v94 = 0;
      v95 = (v90 >> 3) + 1;
      v91 = &a3[-8 * (v95 & 0x3FFFFFFFFFFFFFFCLL)];
      v96 = v95 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        result = *(__n128 *)&v63[v94 - 16];
        v97 = &a3[v94];
        *((_OWORD *)v97 - 2) = *(_OWORD *)&v63[v94 - 32];
        *((__n128 *)v97 - 1) = result;
        v94 -= 32;
        v96 -= 4;
      }
      while (v96);
      if (v95 != (v95 & 0x3FFFFFFFFFFFFFFCLL))
      {
        v63 -= 8 * (v95 & 0x3FFFFFFFFFFFFFFCLL);
        goto LABEL_100;
      }
    }
    else
    {
      v91 = a3;
LABEL_100:
      v92 = v91 - 8;
      do
      {
        v93 = *((_QWORD *)v63 - 1);
        v63 -= 8;
        *(_QWORD *)v92 = v93;
        v92 -= 8;
      }
      while (v63 != a6);
    }
  }
  return result;
}

float md::TransitJunction::calculateOffsetForLineSegment(md::TransitJunction *this, unint64_t a2)
{
  unint64_t v2;
  _QWORD *v5;
  _QWORD *v6;
  float v7;
  unint64_t v8;
  float *v9;
  unint64_t v10;
  BOOL v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float32x2_t *v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t *v24;
  float32x2_t *v25;
  uint64_t v26;
  _BOOL4 v27;
  void *v28;
  char v29;
  char *v30;
  char *v31;
  _QWORD *v32;
  unint64_t v33;
  size_t v34;
  unsigned int *v35;
  unsigned int *v36;
  unsigned int *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  float *v46;
  _QWORD *v47;
  _QWORD *v48;
  float v49;
  unint64_t v50;
  float *v51;
  unint64_t v52;
  BOOL v53;
  _QWORD *v54;
  uint64_t v55;
  float *v56;
  _QWORD *v57;
  _QWORD *v58;
  unint64_t v59;
  float *v60;
  unint64_t v61;
  BOOL v62;
  _QWORD *v63;
  float v64;
  float v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint8x8_t v70;
  void **v71;
  _QWORD *v72;
  unint64_t v73;
  uint64_t v74;
  float v75;
  float v76;
  _BOOL8 v77;
  unint64_t v78;
  unint64_t v79;
  size_t prime;
  void *v81;
  void *v82;
  uint64_t v83;
  _QWORD *v84;
  char *v85;
  size_t v86;
  size_t v87;
  size_t v88;
  _QWORD *i;
  size_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint8x8_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  size_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  unint64_t v102;
  void *v104;
  int v105;

  v5 = *(_QWORD **)(a2 + 8);
  v6 = (_QWORD *)v5[17];
  v7 = 0.0;
  if (v6)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 16) + 40);
    v9 = (float *)(v5 + 17);
    do
    {
      v10 = v6[4];
      v11 = v10 >= v8;
      if (v10 >= v8)
        v12 = v6;
      else
        v12 = v6 + 1;
      if (v11)
        v9 = (float *)v6;
      v6 = (_QWORD *)*v12;
    }
    while (*v12);
    if (v9 != (float *)(v5 + 17) && *((_QWORD *)v9 + 4) <= v8)
      v7 = v9[10];
  }
  v13 = (_QWORD *)*((_QWORD *)this + 9);
  if (v13)
    v14 = v13 == v5;
  else
    v14 = 1;
  if (v14)
  {
    LODWORD(v15) = *(_DWORD *)(a2 + 40);
    if (!v13)
      goto LABEL_94;
  }
  else
  {
    LODWORD(v15) = 0;
  }
  if (v13 == v5 || v13[14] == v13[13])
    goto LABEL_94;
  v17 = *((_QWORD *)this + 1);
  v18 = *v5;
  if (*(_QWORD *)(*v5 + 40) == v17)
  {
    v24 = (float32x2_t *)v5[7];
    if (v24[11].i8[5])
    {
      v25 = (float32x2_t *)v13[7];
      if (v25[11].i8[5] && *(_QWORD *)&v24[2] == *(_QWORD *)&v25[2])
      {
        v22 = vneg_f32(*v25);
      }
      else
      {
        v26 = v13[8];
        if (!*(_BYTE *)(v26 - 3) || *(_QWORD *)&v24[2] != *(_QWORD *)(v26 - 40))
          goto LABEL_35;
        v22 = *(float32x2_t *)(v26 - 56);
      }
      v23 = *v24;
      goto LABEL_93;
    }
LABEL_35:
    v2 = *(_QWORD *)(v18 + 48) == v17;
    v27 = *((unsigned __int8 *)this + 80) == (_DWORD)v2;
    goto LABEL_36;
  }
  v19 = v5[8];
  if (!*(_BYTE *)(v19 - 3))
    goto LABEL_35;
  v20 = v13[8];
  if (*(_BYTE *)(v20 - 3) && *(_QWORD *)(v19 - 40) == *(_QWORD *)(v20 - 40))
  {
    v22 = *(float32x2_t *)(v19 - 56);
    v23 = vneg_f32(*(float32x2_t *)(v20 - 56));
    goto LABEL_93;
  }
  v21 = (float32x2_t *)v13[7];
  if (!v21[11].i8[5] || *(_QWORD *)(v19 - 40) != *(_QWORD *)&v21[2])
    goto LABEL_35;
  v22 = *(float32x2_t *)(v19 - 56);
  v23 = *v21;
LABEL_93:
  v65 = vaddv_f32(vmul_f32(v23, v22));
  if (fabsf(v65) < 0.087156)
    goto LABEL_94;
  v2 = *(_QWORD *)(v18 + 48) == v17;
  v105 = *((unsigned __int8 *)this + 80);
  v27 = v105 == v2;
  if (v65 < 0.0)
    v27 = v105 != v2;
LABEL_36:
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  v29 = objc_msgSend(v28, "disableIntraLinkTransitLineCrossings");

  if ((v29 & 1) != 0)
  {
    v32 = v5 + 13;
    v30 = (char *)v5[13];
    v31 = (char *)v32[1];
    v33 = v31 - v30;
    if (v31 == v30)
    {
      v36 = 0;
      v35 = 0;
      if (v27)
      {
LABEL_44:
        v40 = 126 - 2 * __clz(v36 - v35);
        if (v36 == v35)
          v41 = 0;
        else
          v41 = v40;
        std::__introsort<std::_ClassicAlgPolicy,std::greater<unsigned int> &,unsigned int *,false>((uint64_t)v35, v36, v41, 1);
LABEL_68:
        v15 = v35[*(unsigned int *)(a2 + 40)];
        v55 = *((_QWORD *)this + 9);
        v58 = *(_QWORD **)(v55 + 136);
        v56 = (float *)(v55 + 136);
        v57 = v58;
        if (v58)
        {
          v59 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(*((_QWORD *)v56 - 4) + 8 * v15) + 16) + 40);
          v60 = v56;
          do
          {
            v61 = v57[4];
            v62 = v61 >= v59;
            if (v61 >= v59)
              v63 = v57;
            else
              v63 = v57 + 1;
            if (v62)
              v60 = (float *)v57;
            v57 = (_QWORD *)*v63;
          }
          while (*v63);
          v64 = 0.0;
          if (v60 != v56 && *((_QWORD *)v60 + 4) <= v59)
            v64 = v60[10];
          if (v27)
            v7 = -v64;
          else
            v7 = v64;
          if (!v35)
            goto LABEL_94;
        }
        else if (v27)
        {
          v7 = -0.0;
        }
        else
        {
          v7 = 0.0;
        }
        operator delete(v35);
        goto LABEL_94;
      }
    }
    else
    {
      if ((v33 & 0x8000000000000000) != 0)
        abort();
      v34 = v33 >> 1;
      v35 = (unsigned int *)operator new(v33 >> 1);
      bzero(v35, v34);
      v36 = (unsigned int *)((char *)v35 + v34);
      v37 = v35;
      if ((v2 & 1) != 0)
      {
        do
        {
          v38 = *(_QWORD *)v30;
          v30 += 8;
          *v37++ = *(_DWORD *)(v38 + 48);
        }
        while (v30 != v31);
      }
      else
      {
        do
        {
          v39 = *(_QWORD *)v30;
          v30 += 8;
          *v37++ = *(_DWORD *)(v39 + 44);
        }
        while (v30 != v31);
      }
      if (v27)
        goto LABEL_44;
    }
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    goto LABEL_68;
  }
  v42 = 44;
  if ((_DWORD)v2)
    v42 = 48;
  v43 = *(unsigned int *)(a2 + v42);
  LODWORD(v15) = *(_DWORD *)(a2 + v42);
  v44 = (_QWORD *)*((_QWORD *)this + 9);
  v45 = v44[13];
  if (v43 < (v44[14] - v45) >> 3)
  {
    v48 = (_QWORD *)v44[17];
    v46 = (float *)(v44 + 17);
    v47 = v48;
    v49 = 0.0;
    if (v48)
    {
      v50 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v45 + 8 * v43) + 16) + 40);
      v51 = v46;
      do
      {
        v52 = v47[4];
        v53 = v52 >= v50;
        if (v52 >= v50)
          v54 = v47;
        else
          v54 = v47 + 1;
        if (v53)
          v51 = (float *)v47;
        v47 = (_QWORD *)*v54;
      }
      while (*v54);
      if (v51 != v46 && *((_QWORD *)v51 + 4) <= v50)
        v49 = v51[10];
    }
    if (v27)
      v7 = -v49;
    else
      v7 = v49;
  }
LABEL_94:
  v66 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v67 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v66 >> 47) ^ v66);
  v68 = 0x9DDFEA08EB382D69 * (v67 ^ (v67 >> 47));
  v69 = *((_QWORD *)this + 22);
  if (v69)
  {
    v70 = (uint8x8_t)vcnt_s8((int8x8_t)v69);
    v70.i16[0] = vaddlv_u8(v70);
    if (v70.u32[0] > 1uLL)
    {
      v2 = 0x9DDFEA08EB382D69 * (v67 ^ (v67 >> 47));
      if (v68 >= v69)
        v2 = v68 % v69;
    }
    else
    {
      v2 = v68 & (v69 - 1);
    }
    v71 = *(void ***)(*((_QWORD *)this + 21) + 8 * v2);
    if (v71)
    {
      v72 = *v71;
      if (*v71)
      {
        if (v70.u32[0] < 2uLL)
        {
          while (1)
          {
            v74 = v72[1];
            if (v74 == v68)
            {
              if (v72[2] == a2)
                goto LABEL_175;
            }
            else if ((v74 & (v69 - 1)) != v2)
            {
              goto LABEL_115;
            }
            v72 = (_QWORD *)*v72;
            if (!v72)
              goto LABEL_115;
          }
        }
        do
        {
          v73 = v72[1];
          if (v73 == v68)
          {
            if (v72[2] == a2)
              goto LABEL_175;
          }
          else
          {
            if (v73 >= v69)
              v73 %= v69;
            if (v73 != v2)
              break;
          }
          v72 = (_QWORD *)*v72;
        }
        while (v72);
      }
    }
  }
LABEL_115:
  v72 = operator new(0x20uLL);
  *v72 = 0;
  v72[1] = v68;
  v72[2] = a2;
  v72[3] = 0;
  v75 = (float)(unint64_t)(*((_QWORD *)this + 24) + 1);
  v76 = *((float *)this + 50);
  if (!v69 || (float)(v76 * (float)v69) < v75)
  {
    v77 = 1;
    if (v69 >= 3)
      v77 = (v69 & (v69 - 1)) != 0;
    v78 = v77 | (2 * v69);
    v79 = vcvtps_u32_f32(v75 / v76);
    if (v78 <= v79)
      prime = v79;
    else
      prime = v78;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v69 = *((_QWORD *)this + 22);
    }
    if (prime <= v69)
    {
      if (prime >= v69)
        goto LABEL_152;
      v93 = vcvtps_u32_f32((float)*((unint64_t *)this + 24) / *((float *)this + 50));
      if (v69 < 3 || (v94 = (uint8x8_t)vcnt_s8((int8x8_t)v69), v94.i16[0] = vaddlv_u8(v94), v94.u32[0] > 1uLL))
      {
        v93 = std::__next_prime(v93);
      }
      else
      {
        v95 = 1 << -(char)__clz(v93 - 1);
        if (v93 >= 2)
          v93 = v95;
      }
      if (prime <= v93)
        prime = v93;
      if (prime >= v69)
      {
        v69 = *((_QWORD *)this + 22);
LABEL_152:
        if ((v69 & (v69 - 1)) != 0)
        {
          if (v68 >= v69)
            v2 = v68 % v69;
          else
            v2 = v68;
        }
        else
        {
          v2 = (v69 - 1) & v68;
        }
        goto LABEL_165;
      }
      if (!prime)
      {
        v104 = (void *)*((_QWORD *)this + 21);
        *((_QWORD *)this + 21) = 0;
        if (v104)
          operator delete(v104);
        v69 = 0;
        *((_QWORD *)this + 22) = 0;
        goto LABEL_152;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v81 = operator new(8 * prime);
    v82 = (void *)*((_QWORD *)this + 21);
    *((_QWORD *)this + 21) = v81;
    if (v82)
      operator delete(v82);
    v83 = 0;
    *((_QWORD *)this + 22) = prime;
    do
      *(_QWORD *)(*((_QWORD *)this + 21) + 8 * v83++) = 0;
    while (prime != v83);
    v85 = (char *)this + 184;
    v84 = (_QWORD *)*((_QWORD *)this + 23);
    if (!v84)
    {
LABEL_151:
      v69 = prime;
      goto LABEL_152;
    }
    v86 = v84[1];
    v87 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v88 = v86 & v87;
      *(_QWORD *)(*((_QWORD *)this + 21) + 8 * v88) = v85;
      for (i = (_QWORD *)*v84; *v84; i = (_QWORD *)*v84)
      {
        v90 = i[1] & v87;
        if (v90 == v88)
        {
          v84 = i;
        }
        else
        {
          v91 = *((_QWORD *)this + 21);
          if (*(_QWORD *)(v91 + 8 * v90))
          {
            *v84 = *i;
            v92 = 8 * v90;
            *i = **(_QWORD **)(*((_QWORD *)this + 21) + v92);
            **(_QWORD **)(*((_QWORD *)this + 21) + v92) = i;
          }
          else
          {
            *(_QWORD *)(v91 + 8 * v90) = v84;
            v84 = i;
            v88 = v90;
          }
        }
      }
      goto LABEL_151;
    }
    if (v86 >= prime)
      v86 %= prime;
    *(_QWORD *)(*((_QWORD *)this + 21) + 8 * v86) = v85;
    v96 = (_QWORD *)*v84;
    if (!*v84)
      goto LABEL_151;
    while (1)
    {
      v98 = v96[1];
      if (v98 >= prime)
        v98 %= prime;
      if (v98 != v86)
      {
        v99 = *((_QWORD *)this + 21);
        if (!*(_QWORD *)(v99 + 8 * v98))
        {
          *(_QWORD *)(v99 + 8 * v98) = v84;
          goto LABEL_156;
        }
        *v84 = *v96;
        v97 = 8 * v98;
        *v96 = **(_QWORD **)(*((_QWORD *)this + 21) + v97);
        **(_QWORD **)(*((_QWORD *)this + 21) + v97) = v96;
        v96 = v84;
      }
      v98 = v86;
LABEL_156:
      v84 = v96;
      v96 = (_QWORD *)*v96;
      v86 = v98;
      if (!v96)
        goto LABEL_151;
    }
  }
LABEL_165:
  v100 = *((_QWORD *)this + 21);
  v101 = *(_QWORD **)(v100 + 8 * v2);
  if (v101)
  {
    *v72 = *v101;
LABEL_173:
    *v101 = v72;
    goto LABEL_174;
  }
  *v72 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = v72;
  *(_QWORD *)(v100 + 8 * v2) = (char *)this + 184;
  if (*v72)
  {
    v102 = *(_QWORD *)(*v72 + 8);
    if ((v69 & (v69 - 1)) != 0)
    {
      if (v102 >= v69)
        v102 %= v69;
    }
    else
    {
      v102 &= v69 - 1;
    }
    v101 = (_QWORD *)(*((_QWORD *)this + 21) + 8 * v102);
    goto LABEL_173;
  }
LABEL_174:
  ++*((_QWORD *)this + 24);
LABEL_175:
  *((_DWORD *)v72 + 6) = v15;
  *((float *)v72 + 7) = v7;
  return v7;
}

void sub_19FA4EFBC(_Unwind_Exception *exception_object)
{
  void *v1;

  if (!v1)
    _Unwind_Resume(exception_object);
  operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::greater<unsigned int> &,unsigned int *,false>(uint64_t result, unsigned int *a2, uint64_t a3, char a4)
{
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  BOOL v55;
  unsigned int v56;
  unsigned int *v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int *v106;
  BOOL v108;
  uint64_t v109;
  unsigned int *v110;
  unsigned int *v111;
  unsigned int v112;
  unsigned int v113;
  uint64_t v114;
  uint64_t v115;
  int64_t v116;
  int64_t v117;
  uint64_t v118;
  unsigned int *v119;
  unsigned int v120;
  BOOL v121;
  unsigned int *v122;
  unsigned int v123;
  unsigned int v124;
  uint64_t v125;
  unsigned int v126;
  unsigned int v127;
  uint64_t v128;
  uint64_t v129;
  unsigned int v130;
  unsigned int *v131;
  unsigned int v132;
  unsigned int v133;
  unsigned int *v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  unsigned int *v138;
  unsigned int v139;
  unsigned int v140;

  v7 = (unsigned int *)result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v65 = *(a2 - 1);
        v66 = *v8;
        if (v65 > *v8)
        {
          *v8 = v65;
          *(a2 - 1) = v66;
        }
        return result;
      case 3:
        v67 = v8[1];
        v68 = *(a2 - 1);
        if (v67 <= v68)
          v69 = *(a2 - 1);
        else
          v69 = v8[1];
        if (v67 >= v68)
          v67 = *(a2 - 1);
        *(a2 - 1) = v67;
        v8[1] = v69;
        v70 = *(a2 - 1);
        if (v70 <= *v8)
          v71 = *v8;
        else
          v71 = *(a2 - 1);
        if (v70 >= *v8)
          v70 = *v8;
        *(a2 - 1) = v70;
        v73 = *v8;
        v72 = v8[1];
        if (v71 <= v72)
          v73 = v8[1];
        if (v71 < v72)
          v72 = v71;
        *v8 = v73;
        v8[1] = v72;
        return result;
      case 4:
        v75 = v8[1];
        v74 = v8[2];
        if (*v8 <= v74)
          v76 = v8[2];
        else
          v76 = *v8;
        if (*v8 < v74)
          v74 = *v8;
        v8[2] = v74;
        *v8 = v76;
        v77 = *(a2 - 1);
        if (v75 <= v77)
          v78 = *(a2 - 1);
        else
          v78 = v75;
        if (v75 < v77)
          v77 = v75;
        *(a2 - 1) = v77;
        v79 = *v8;
        if (*v8 <= v78)
          v80 = v78;
        else
          v80 = *v8;
        if (v79 >= v78)
          v79 = v78;
        *v8 = v80;
        v8[1] = v79;
        v81 = v8[2];
        v82 = *(a2 - 1);
        if (v81 <= v82)
          v83 = *(a2 - 1);
        else
          v83 = v8[2];
        if (v81 >= v82)
          v81 = *(a2 - 1);
        *(a2 - 1) = v81;
        v84 = v8[1];
        if (v84 <= v83)
          v85 = v83;
        else
          v85 = v8[1];
        if (v84 >= v83)
          v84 = v83;
        v8[1] = v85;
        v8[2] = v84;
        return result;
      case 5:
        v86 = *v8;
        v87 = v8[1];
        if (*v8 <= v87)
          v88 = v8[1];
        else
          v88 = *v8;
        if (v86 >= v87)
          v86 = v8[1];
        *v8 = v88;
        v8[1] = v86;
        v89 = v8[3];
        v90 = *(a2 - 1);
        if (v89 <= v90)
          v91 = *(a2 - 1);
        else
          v91 = v8[3];
        if (v89 >= v90)
          v89 = *(a2 - 1);
        *(a2 - 1) = v89;
        v8[3] = v91;
        v92 = *(a2 - 1);
        v93 = v8[2];
        if (v92 <= v93)
          v94 = v8[2];
        else
          v94 = *(a2 - 1);
        if (v92 >= v93)
          v92 = v8[2];
        *(a2 - 1) = v92;
        v96 = v8[2];
        v95 = v8[3];
        v97 = v8[1];
        if (v94 <= v95)
          v96 = v8[3];
        if (v94 < v95)
          v95 = v94;
        v8[2] = v96;
        v8[3] = v95;
        v98 = *(a2 - 1);
        if (v97 <= v98)
          v99 = *(a2 - 1);
        else
          v99 = v97;
        if (v97 < v98)
          v98 = v97;
        *(a2 - 1) = v98;
        v100 = *v8;
        v102 = v8[2];
        v101 = v8[3];
        if (v101 <= *v8)
          v103 = *v8;
        else
          v103 = v8[3];
        if (v101 >= v100)
          v101 = *v8;
        if (v103 <= v102)
          v100 = v8[2];
        if (v103 < v102)
          v102 = v103;
        if (v101 <= v99)
          v104 = v99;
        else
          v104 = v101;
        if (v101 >= v99)
          v101 = v99;
        if (v104 <= v102)
          v99 = v102;
        *v8 = v100;
        v8[1] = v99;
        if (v104 >= v102)
          v105 = v102;
        else
          v105 = v104;
        v8[2] = v105;
        v8[3] = v101;
        return result;
      default:
        if (v9 <= 95)
        {
          v106 = v8 + 1;
          v108 = v8 == a2 || v106 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v108)
            {
              v109 = 4;
              v110 = v8;
              do
              {
                v113 = *v110;
                v112 = v110[1];
                v110 = v106;
                if (v112 > v113)
                {
                  v114 = v109;
                  do
                  {
                    *(unsigned int *)((char *)v8 + v114) = v113;
                    v115 = v114 - 4;
                    if (v114 == 4)
                    {
                      v111 = v8;
                      goto LABEL_192;
                    }
                    v113 = *(unsigned int *)((char *)v8 + v114 - 8);
                    v114 -= 4;
                  }
                  while (v112 > v113);
                  v111 = (unsigned int *)((char *)v8 + v115);
LABEL_192:
                  *v111 = v112;
                }
                v106 = v110 + 1;
                v109 += 4;
              }
              while (v110 + 1 != a2);
            }
          }
          else if (!v108)
          {
            do
            {
              v127 = *v7;
              v126 = v7[1];
              v7 = v106;
              if (v126 > v127)
              {
                do
                {
                  *v106 = v127;
                  v127 = *(v106 - 2);
                  --v106;
                }
                while (v126 > v127);
                *v106 = v126;
              }
              v106 = v7 + 1;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v116 = (unint64_t)(v10 - 2) >> 1;
            v117 = v116;
            do
            {
              if (v116 >= v117)
              {
                v118 = (2 * v117) | 1;
                v119 = &v8[v118];
                if (2 * v117 + 2 >= v10)
                {
                  v120 = *v119;
                }
                else
                {
                  v120 = v119[1];
                  v121 = *v119 > v120;
                  if (*v119 < v120)
                    v120 = *v119;
                  if (v121)
                  {
                    ++v119;
                    v118 = 2 * v117 + 2;
                  }
                }
                v122 = &v8[v117];
                v123 = *v122;
                if (v120 <= *v122)
                {
                  while (1)
                  {
                    *v122 = v120;
                    v122 = v119;
                    if (v116 < v118)
                      break;
                    v125 = (2 * v118) | 1;
                    v119 = &v8[v125];
                    v118 = 2 * v118 + 2;
                    if (v118 < v10)
                    {
                      v120 = *v119;
                      result = (uint64_t)(v119 + 1);
                      v124 = v119[1];
                      if (*v119 >= v124)
                        v120 = v119[1];
                      if (*v119 <= v124)
                        v118 = v125;
                      else
                        ++v119;
                      if (v120 > v123)
                        break;
                    }
                    else
                    {
                      v120 = *v119;
                      v118 = v125;
                      if (*v119 > v123)
                        break;
                    }
                  }
                  *v122 = v123;
                }
              }
              v121 = v117-- <= 0;
            }
            while (!v121);
            v128 = (unint64_t)v9 >> 2;
            do
            {
              v129 = 0;
              v130 = *v8;
              v131 = v8;
              do
              {
                v134 = &v131[v129 + 1];
                v135 = (2 * v129) | 1;
                v129 = 2 * v129 + 2;
                if (v129 < v128)
                {
                  v132 = *v134;
                  v133 = v134[1];
                  if (*v134 >= v133)
                    v132 = v134[1];
                  if (*v134 <= v133)
                    v129 = v135;
                  else
                    ++v134;
                }
                else
                {
                  v132 = *v134;
                  v129 = v135;
                }
                *v131 = v132;
                v131 = v134;
              }
              while (v129 <= (uint64_t)((unint64_t)(v128 - 2) >> 1));
              if (v134 == --a2)
              {
                *v134 = v130;
              }
              else
              {
                *v134 = *a2;
                *a2 = v130;
                v136 = (char *)v134 - (char *)v8 + 4;
                if (v136 >= 5)
                {
                  v137 = (((unint64_t)v136 >> 2) - 2) >> 1;
                  v138 = &v8[v137];
                  v139 = *v138;
                  v140 = *v134;
                  if (*v138 > *v134)
                  {
                    do
                    {
                      *v134 = v139;
                      v134 = v138;
                      if (!v137)
                        break;
                      v137 = (v137 - 1) >> 1;
                      v138 = &v8[v137];
                      v139 = *v138;
                    }
                    while (*v138 > v140);
                    *v134 = v140;
                  }
                }
              }
              v121 = v128-- <= 2;
            }
            while (!v121);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &v8[(unint64_t)v10 >> 1];
        v13 = *(a2 - 1);
        if ((unint64_t)v9 >= 0x201)
        {
          v14 = *v12;
          v15 = *v8;
          if (*v12 <= *v8)
          {
            if (v13 > v14)
            {
              *v12 = v13;
              *(a2 - 1) = v14;
              v18 = *v8;
              if (*v12 > *v8)
              {
                *v8 = *v12;
                *v12 = v18;
              }
            }
          }
          else
          {
            if (v13 > v14)
            {
              *v8 = v13;
              goto LABEL_21;
            }
            *v8 = v14;
            *v12 = v15;
            v20 = *(a2 - 1);
            if (v20 > v15)
            {
              *v12 = v20;
LABEL_21:
              *(a2 - 1) = v15;
            }
          }
          v21 = &v8[v11];
          v24 = *(v21 - 1);
          v22 = v21 - 1;
          v23 = v24;
          v25 = v8[1];
          v26 = *(a2 - 2);
          if (v24 <= v25)
          {
            if (v26 > v23)
            {
              *v22 = v26;
              *(a2 - 2) = v23;
              v27 = v8[1];
              if (*v22 > v27)
              {
                v8[1] = *v22;
                *v22 = v27;
              }
            }
          }
          else
          {
            if (v26 > v23)
            {
              v8[1] = v26;
              goto LABEL_33;
            }
            v8[1] = v23;
            *v22 = v25;
            v29 = *(a2 - 2);
            if (v29 > v25)
            {
              *v22 = v29;
LABEL_33:
              *(a2 - 2) = v25;
            }
          }
          v30 = &v8[v11];
          v33 = v30[1];
          v31 = v30 + 1;
          v32 = v33;
          v34 = v8[2];
          v35 = *(a2 - 3);
          if (v33 <= v34)
          {
            if (v35 > v32)
            {
              *v31 = v35;
              *(a2 - 3) = v32;
              v36 = v8[2];
              if (*v31 > v36)
              {
                v8[2] = *v31;
                *v31 = v36;
              }
            }
          }
          else
          {
            if (v35 > v32)
            {
              v8[2] = v35;
              goto LABEL_42;
            }
            v8[2] = v32;
            *v31 = v34;
            v37 = *(a2 - 3);
            if (v37 > v34)
            {
              *v31 = v37;
LABEL_42:
              *(a2 - 3) = v34;
            }
          }
          v38 = *v12;
          v39 = *v22;
          v40 = *v31;
          if (*v12 <= *v22)
          {
            if (v40 <= v38)
              goto LABEL_50;
            *v12 = v40;
            *v31 = v38;
            v31 = v12;
            v38 = v39;
            if (v40 <= v39)
            {
              v38 = v40;
              goto LABEL_50;
            }
          }
          else if (v40 <= v38)
          {
            *v22 = v38;
            *v12 = v39;
            v22 = v12;
            v38 = v40;
            if (v40 <= v39)
            {
              v38 = v39;
LABEL_50:
              v41 = *v8;
              *v8 = v38;
              *v12 = v41;
              goto LABEL_51;
            }
          }
          *v22 = v40;
          *v31 = v39;
          goto LABEL_50;
        }
        v16 = *v8;
        v17 = *v12;
        if (*v8 <= *v12)
        {
          if (v13 > v16)
          {
            *v8 = v13;
            *(a2 - 1) = v16;
            v19 = *v12;
            if (*v8 > *v12)
            {
              *v12 = *v8;
              *v8 = v19;
            }
          }
        }
        else
        {
          if (v13 <= v16)
          {
            *v12 = v16;
            *v8 = v17;
            v28 = *(a2 - 1);
            if (v28 <= v17)
              goto LABEL_51;
            *v8 = v28;
          }
          else
          {
            *v12 = v13;
          }
          *(a2 - 1) = v17;
        }
LABEL_51:
        --a3;
        v42 = *v8;
        v43 = v8;
        if ((a4 & 1) == 0)
        {
          v43 = v8;
          if (*(v8 - 1) <= v42)
          {
            if (v42 <= *(a2 - 1))
            {
              v57 = v8 + 1;
              do
              {
                v8 = v57;
                if (v57 >= a2)
                  break;
                ++v57;
              }
              while (v42 <= *v8);
            }
            else
            {
              do
              {
                v56 = v8[1];
                ++v8;
              }
              while (v42 <= v56);
            }
            v58 = a2;
            if (v8 < a2)
            {
              v58 = a2;
              do
                v59 = *--v58;
              while (v42 > v59);
            }
            if (v8 < v58)
            {
              v60 = *v8;
              v61 = *v58;
              do
              {
                *v8 = v61;
                *v58 = v60;
                do
                {
                  v62 = v8[1];
                  ++v8;
                  v60 = v62;
                }
                while (v42 <= v62);
                do
                {
                  v63 = *--v58;
                  v61 = v63;
                }
                while (v42 > v63);
              }
              while (v8 < v58);
            }
            v64 = v8 - 1;
            if (v8 - 1 != v7)
              *v7 = *v64;
            a4 = 0;
            *v64 = v42;
            continue;
          }
        }
        do
        {
          v44 = v43;
          v46 = v43[1];
          ++v43;
          v45 = v46;
        }
        while (v46 > v42);
        v47 = a2;
        if (v44 == v8)
        {
          v47 = a2;
          do
          {
            if (v43 >= v47)
              break;
            v49 = *--v47;
          }
          while (v49 <= v42);
        }
        else
        {
          do
            v48 = *--v47;
          while (v48 <= v42);
        }
        if (v43 < v47)
        {
          v50 = *v47;
          v51 = v43;
          v52 = v47;
          do
          {
            *v51 = v50;
            *v52 = v45;
            do
            {
              v44 = v51;
              v53 = v51[1];
              ++v51;
              v45 = v53;
            }
            while (v53 > v42);
            do
            {
              v54 = *--v52;
              v50 = v54;
            }
            while (v54 <= v42);
          }
          while (v51 < v52);
        }
        if (v44 != v8)
          *v8 = *v44;
        *v44 = v42;
        if (v43 < v47)
        {
LABEL_71:
          result = std::__introsort<std::_ClassicAlgPolicy,std::greater<unsigned int> &,unsigned int *,false>(v7, v44, a3, a4 & 1);
          a4 = 0;
          v8 = v44 + 1;
          continue;
        }
        v55 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::greater<unsigned int> &,unsigned int *>(v8, v44);
        v8 = v44 + 1;
        result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::greater<unsigned int> &,unsigned int *>(v44 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v55)
            continue;
          goto LABEL_71;
        }
        a2 = v44;
        if (!v55)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::greater<unsigned int> &,unsigned int *>(unsigned int *a1, unsigned int *a2)
{
  unsigned int v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;

  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      v18 = *(a2 - 1);
      v19 = *a1;
      if (v18 > *a1)
      {
        *a1 = v18;
        *(a2 - 1) = v19;
      }
      return 1;
    case 3:
      v20 = a1[1];
      v21 = *(a2 - 1);
      if (v20 <= v21)
        v22 = *(a2 - 1);
      else
        v22 = a1[1];
      if (v20 >= v21)
        v20 = *(a2 - 1);
      *(a2 - 1) = v20;
      a1[1] = v22;
      v23 = *(a2 - 1);
      if (v23 <= *a1)
        v24 = *a1;
      else
        v24 = *(a2 - 1);
      if (v23 >= *a1)
        v23 = *a1;
      *(a2 - 1) = v23;
      v26 = *a1;
      v25 = a1[1];
      if (v24 <= v25)
        v26 = a1[1];
      if (v24 < v25)
        v25 = v24;
      *a1 = v26;
      a1[1] = v25;
      return 1;
    case 4:
      v48 = a1[1];
      v47 = a1[2];
      if (*a1 <= v47)
        v49 = a1[2];
      else
        v49 = *a1;
      if (*a1 < v47)
        v47 = *a1;
      a1[2] = v47;
      *a1 = v49;
      v50 = *(a2 - 1);
      if (v48 <= v50)
        v51 = *(a2 - 1);
      else
        v51 = v48;
      if (v48 < v50)
        v50 = v48;
      *(a2 - 1) = v50;
      v52 = *a1;
      if (*a1 <= v51)
        v53 = v51;
      else
        v53 = *a1;
      if (v52 >= v51)
        v52 = v51;
      *a1 = v53;
      a1[1] = v52;
      v54 = a1[2];
      v55 = *(a2 - 1);
      if (v54 <= v55)
        v56 = *(a2 - 1);
      else
        v56 = a1[2];
      if (v54 >= v55)
        v54 = *(a2 - 1);
      *(a2 - 1) = v54;
      v57 = a1[1];
      if (v57 <= v56)
        v58 = v56;
      else
        v58 = a1[1];
      if (v57 >= v56)
        v57 = v56;
      a1[1] = v58;
      a1[2] = v57;
      return 1;
    case 5:
      v27 = *a1;
      v28 = a1[1];
      if (*a1 <= v28)
        v29 = a1[1];
      else
        v29 = *a1;
      if (v27 >= v28)
        v27 = a1[1];
      *a1 = v29;
      a1[1] = v27;
      v30 = a1[3];
      v31 = *(a2 - 1);
      if (v30 <= v31)
        v32 = *(a2 - 1);
      else
        v32 = a1[3];
      if (v30 >= v31)
        v30 = *(a2 - 1);
      *(a2 - 1) = v30;
      a1[3] = v32;
      v33 = *(a2 - 1);
      v34 = a1[2];
      if (v33 <= v34)
        v35 = a1[2];
      else
        v35 = *(a2 - 1);
      if (v33 >= v34)
        v33 = a1[2];
      *(a2 - 1) = v33;
      v37 = a1[2];
      v36 = a1[3];
      v38 = a1[1];
      if (v35 <= v36)
        v37 = a1[3];
      if (v35 < v36)
        v36 = v35;
      a1[2] = v37;
      a1[3] = v36;
      v39 = *(a2 - 1);
      if (v38 <= v39)
        v40 = *(a2 - 1);
      else
        v40 = v38;
      if (v38 < v39)
        v39 = v38;
      *(a2 - 1) = v39;
      v41 = *a1;
      v43 = a1[2];
      v42 = a1[3];
      if (v42 <= *a1)
        v44 = *a1;
      else
        v44 = a1[3];
      if (v42 >= v41)
        v42 = *a1;
      if (v44 <= v43)
        v41 = a1[2];
      if (v44 < v43)
        v43 = v44;
      if (v42 <= v40)
        v45 = v40;
      else
        v45 = v42;
      if (v42 >= v40)
        v42 = v40;
      if (v45 <= v43)
        v40 = v43;
      *a1 = v41;
      a1[1] = v40;
      if (v45 >= v43)
        v46 = v43;
      else
        v46 = v45;
      a1[2] = v46;
      a1[3] = v42;
      return 1;
    default:
      v4 = a1 + 2;
      v3 = a1[2];
      v6 = *a1;
      v5 = a1[1];
      if (v5 <= v3)
        v7 = a1[2];
      else
        v7 = a1[1];
      if (v5 < v3)
        v3 = a1[1];
      if (v3 <= v6)
        v8 = *a1;
      else
        v8 = v3;
      if (v3 >= v6)
        v3 = *a1;
      *v4 = v3;
      if (v8 <= v7)
        v9 = v7;
      else
        v9 = v6;
      if (v8 >= v7)
        v8 = v7;
      *a1 = v9;
      a1[1] = v8;
      v10 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v11 = 0;
      v12 = 12;
      break;
  }
  while (1)
  {
    v14 = *v10;
    v15 = *v4;
    if (*v10 > v15)
    {
      v16 = v12;
      do
      {
        *(unsigned int *)((char *)a1 + v16) = v15;
        v17 = v16 - 4;
        if (v16 == 4)
        {
          v13 = a1;
          goto LABEL_21;
        }
        v15 = *(unsigned int *)((char *)a1 + v16 - 8);
        v16 -= 4;
      }
      while (v14 > v15);
      v13 = (unsigned int *)((char *)a1 + v17);
LABEL_21:
      *v13 = v14;
      if (++v11 == 8)
        return v10 + 1 == a2;
    }
    v4 = v10;
    v12 += 4;
    if (++v10 == a2)
      return 1;
  }
}

_QWORD *md::TransitJunction::normalForLineSegment(int8x8_t *a1, unint64_t a2)
{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v2 = a1[17];
  if (v2)
  {
    v3 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
    v4 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v3 >> 47) ^ v3);
    v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
    v6 = (uint8x8_t)vcnt_s8(v2);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      v7 = v5;
      if (v5 >= *(_QWORD *)&v2)
        v7 = v5 % *(_QWORD *)&v2;
    }
    else
    {
      v7 = v5 & (*(_QWORD *)&v2 - 1);
    }
    v8 = *(_QWORD **)(*(_QWORD *)&a1[16] + 8 * v7);
    if (v8)
    {
      v8 = (_QWORD *)*v8;
      if (v8)
      {
        if (v6.u32[0] < 2uLL)
        {
          v9 = *(_QWORD *)&v2 - 1;
          while (1)
          {
            v11 = v8[1];
            if (v5 == v11)
            {
              if (v8[2] == a2)
                goto LABEL_22;
            }
            else if ((v11 & v9) != v7)
            {
              goto LABEL_21;
            }
            v8 = (_QWORD *)*v8;
            if (!v8)
              goto LABEL_22;
          }
        }
        do
        {
          v10 = v8[1];
          if (v5 == v10)
          {
            if (v8[2] == a2)
              break;
          }
          else
          {
            if (v10 >= *(_QWORD *)&v2)
              v10 %= *(_QWORD *)&v2;
            if (v10 != v7)
              goto LABEL_21;
          }
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
    }
  }
  else
  {
LABEL_21:
    v8 = 0;
  }
LABEL_22:
  if (v8)
    return v8 + 3;
  else
    return 0;
}

uint64_t md::TransitJunction::normalForLinkPair(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v3 = (int8x8_t)a1[12];
  if (v3)
  {
    v4 = a3 ^ a2;
    v5 = (uint8x8_t)vcnt_s8(v3);
    v5.i16[0] = vaddlv_u8(v5);
    if (v5.u32[0] > 1uLL)
    {
      v6 = a3 ^ a2;
      if (v4 >= *(_QWORD *)&v3)
        v6 = v4 % *(_QWORD *)&v3;
    }
    else
    {
      v6 = (*(_QWORD *)&v3 - 1) & v4;
    }
    v7 = *(_QWORD **)(a1[11] + 8 * v6);
    if (v7)
    {
      v8 = (_QWORD *)*v7;
      if (v8)
      {
        if (v5.u32[0] < 2uLL)
        {
          v9 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v13 = v8[1];
            if (v4 == v13)
            {
              if (v8[2] == a2 && v8[3] == a3)
                return (uint64_t)(v8 + 4);
            }
            else if ((v13 & v9) != v6)
            {
              goto LABEL_27;
            }
            v8 = (_QWORD *)*v8;
            if (!v8)
              goto LABEL_27;
          }
        }
        do
        {
          v11 = v8[1];
          if (v4 == v11)
          {
            if (v8[2] == a2 && v8[3] == a3)
              return (uint64_t)(v8 + 4);
          }
          else
          {
            if (v11 >= *(_QWORD *)&v3)
              v11 %= *(_QWORD *)&v3;
            if (v11 != v6)
              break;
          }
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
    }
  }
LABEL_27:
  v14 = a1[1];
  if (*(_QWORD *)(*(_QWORD *)a2 + 48) == v14)
    return *(_QWORD *)(a2 + 64) - 48;
  if (*(_QWORD *)(*(_QWORD *)a2 + 40) == v14)
    return *(_QWORD *)(a2 + 56) + 8;
  return 0;
}

void std::__hash_table<std::__hash_value_type<GeoCodecsConnectivityJunction const*,md::TransitJunction>,std::__unordered_map_hasher<GeoCodecsConnectivityJunction const*,std::__hash_value_type<GeoCodecsConnectivityJunction const*,md::TransitJunction>,std::hash<GeoCodecsConnectivityJunction const*>,std::equal_to<GeoCodecsConnectivityJunction const*>,true>,std::__unordered_map_equal<GeoCodecsConnectivityJunction const*,std::__hash_value_type<GeoCodecsConnectivityJunction const*,md::TransitJunction>,std::equal_to<GeoCodecsConnectivityJunction const*>,std::hash<GeoCodecsConnectivityJunction const*>,true>,std::allocator<std::__hash_value_type<GeoCodecsConnectivityJunction const*,md::TransitJunction>>>::__emplace_unique_key_args<GeoCodecsConnectivityJunction const*,GeoCodecsConnectivityJunction const*&,md::TransitJunction>(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  float v47;
  float v48;
  _BOOL8 v49;
  unint64_t v50;
  unint64_t v51;
  size_t prime;
  void *v53;
  void *v54;
  uint64_t v55;
  _QWORD *v56;
  size_t v57;
  size_t v58;
  size_t v59;
  _QWORD *i;
  size_t v61;
  uint64_t v62;
  unint64_t v63;
  uint8x8_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  size_t v68;
  uint64_t v69;
  _QWORD *v70;
  unint64_t v71;
  void *v72;

  v8 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v9 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v8 >> 47) ^ v8);
  v10 = v9 ^ (v9 >> 47);
  v11 = 0x9DDFEA08EB382D69 * v10;
  v12 = a1[1];
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69 * v10;
      if (v11 >= v12)
        v4 = v11 % v12;
    }
    else
    {
      v4 = v11 & (v12 - 1);
    }
    v14 = *(_QWORD **)(*a1 + 8 * v4);
    if (v14)
    {
      v15 = (_QWORD *)*v14;
      if (v15)
      {
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v17 = v15[1];
            if (v17 == v11)
            {
              if (v15[2] == a2)
                return;
            }
            else if ((v17 & (v12 - 1)) != v4)
            {
              goto LABEL_22;
            }
            v15 = (_QWORD *)*v15;
            if (!v15)
              goto LABEL_22;
          }
        }
        do
        {
          v16 = v15[1];
          if (v16 == v11)
          {
            if (v15[2] == a2)
              return;
          }
          else
          {
            if (v16 >= v12)
              v16 %= v12;
            if (v16 != v4)
              break;
          }
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_22:
  v18 = a1 + 2;
  v19 = (char *)operator new(0xF0uLL);
  v20 = v19;
  *(_QWORD *)v19 = 0;
  *((_QWORD *)v19 + 1) = v11;
  *((_QWORD *)v19 + 2) = a3;
  *(_OWORD *)(v19 + 24) = *(_OWORD *)a4;
  v21 = *(_QWORD *)(a4 + 24);
  v22 = (_QWORD *)(a4 + 32);
  v23 = *(_QWORD *)(a4 + 32);
  *((_QWORD *)v19 + 5) = *(_QWORD *)(a4 + 16);
  *((_QWORD *)v19 + 6) = v21;
  *((_QWORD *)v19 + 7) = v23;
  v24 = v19 + 56;
  v25 = *(_QWORD *)(a4 + 40);
  *((_QWORD *)v19 + 8) = v25;
  if (v25)
  {
    *(_QWORD *)(v23 + 16) = v24;
    *(_QWORD *)(a4 + 24) = v22;
    *v22 = 0;
    *(_QWORD *)(a4 + 40) = 0;
  }
  else
  {
    *((_QWORD *)v19 + 6) = v24;
  }
  v26 = (_QWORD *)(a4 + 56);
  v27 = *(_QWORD *)(a4 + 56);
  v28 = *(_QWORD *)(a4 + 48);
  *((_QWORD *)v19 + 10) = v27;
  v29 = v19 + 80;
  *((_QWORD *)v19 + 9) = v28;
  v30 = *(_QWORD *)(a4 + 64);
  *((_QWORD *)v19 + 11) = v30;
  if (v30)
  {
    *(_QWORD *)(v27 + 16) = v29;
    *(_QWORD *)(a4 + 48) = v26;
    *v26 = 0;
    *(_QWORD *)(a4 + 64) = 0;
  }
  else
  {
    *((_QWORD *)v19 + 9) = v29;
  }
  v31 = *(_QWORD *)(a4 + 104);
  v32 = *(_QWORD *)(a4 + 72);
  *((_QWORD *)v19 + 16) = v31;
  *((_QWORD *)v19 + 12) = v32;
  *(_DWORD *)(v19 + 103) = *(_DWORD *)(a4 + 79);
  v33 = *(_QWORD *)(a4 + 88);
  v34 = *(_QWORD *)(a4 + 96);
  *(_QWORD *)(a4 + 88) = 0;
  *(_QWORD *)(a4 + 96) = 0;
  *((_QWORD *)v19 + 14) = v33;
  *((_QWORD *)v19 + 15) = v34;
  v35 = *(_QWORD *)(a4 + 112);
  *((_QWORD *)v19 + 17) = v35;
  *((_DWORD *)v19 + 36) = *(_DWORD *)(a4 + 120);
  if (v35)
  {
    v36 = *(_QWORD *)(v31 + 8);
    if ((v34 & (v34 - 1)) != 0)
    {
      if (v36 >= v34)
        v36 %= v34;
    }
    else
    {
      v36 &= v34 - 1;
    }
    *(_QWORD *)(v33 + 8 * v36) = v19 + 128;
    *(_QWORD *)(a4 + 104) = 0;
    *(_QWORD *)(a4 + 112) = 0;
  }
  v37 = *(_QWORD *)(a4 + 144);
  v38 = *(_QWORD *)(a4 + 128);
  v39 = *(_QWORD *)(a4 + 136);
  *(_QWORD *)(a4 + 128) = 0;
  *(_QWORD *)(a4 + 136) = 0;
  *((_QWORD *)v19 + 21) = v37;
  *((_QWORD *)v19 + 19) = v38;
  *((_QWORD *)v19 + 20) = v39;
  v40 = *(_QWORD *)(a4 + 152);
  *((_QWORD *)v19 + 22) = v40;
  *((_DWORD *)v19 + 46) = *(_DWORD *)(a4 + 160);
  if (v40)
  {
    v41 = *(_QWORD *)(v37 + 8);
    if ((v39 & (v39 - 1)) != 0)
    {
      if (v41 >= v39)
        v41 %= v39;
    }
    else
    {
      v41 &= v39 - 1;
    }
    *(_QWORD *)(v38 + 8 * v41) = v19 + 168;
    *(_QWORD *)(a4 + 144) = 0;
    *(_QWORD *)(a4 + 152) = 0;
  }
  v42 = *(_QWORD *)(a4 + 184);
  v43 = *(_QWORD *)(a4 + 168);
  v44 = *(_QWORD *)(a4 + 176);
  *(_QWORD *)(a4 + 168) = 0;
  *(_QWORD *)(a4 + 176) = 0;
  *((_QWORD *)v19 + 26) = v42;
  *((_QWORD *)v19 + 24) = v43;
  *((_QWORD *)v19 + 25) = v44;
  v45 = *(_QWORD *)(a4 + 192);
  *((_QWORD *)v19 + 27) = v45;
  *((_DWORD *)v19 + 56) = *(_DWORD *)(a4 + 200);
  if (v45)
  {
    v46 = *(_QWORD *)(v42 + 8);
    if ((v44 & (v44 - 1)) != 0)
    {
      if (v46 >= v44)
        v46 %= v44;
    }
    else
    {
      v46 &= v44 - 1;
    }
    *(_QWORD *)(v43 + 8 * v46) = v19 + 208;
    *(_QWORD *)(a4 + 184) = 0;
    *(_QWORD *)(a4 + 192) = 0;
  }
  v19[232] = *(_BYTE *)(a4 + 208);
  v47 = (float)(unint64_t)(a1[3] + 1);
  v48 = *((float *)a1 + 8);
  if (!v12 || (float)(v48 * (float)v12) < v47)
  {
    v49 = v12 < 3 || (v12 & (v12 - 1)) != 0;
    v50 = v49 | (2 * v12);
    v51 = vcvtps_u32_f32(v47 / v48);
    if (v50 <= v51)
      prime = v51;
    else
      prime = v50;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v12 = a1[1];
    if (prime <= v12)
    {
      if (prime >= v12)
        goto LABEL_84;
      v63 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v12 < 3 || (v64 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v64.i16[0] = vaddlv_u8(v64), v64.u32[0] > 1uLL))
      {
        v63 = std::__next_prime(v63);
      }
      else
      {
        v65 = 1 << -(char)__clz(v63 - 1);
        if (v63 >= 2)
          v63 = v65;
      }
      if (prime <= v63)
        prime = v63;
      if (prime >= v12)
      {
        v12 = a1[1];
LABEL_84:
        if ((v12 & (v12 - 1)) != 0)
        {
          if (v11 >= v12)
            v4 = v11 % v12;
          else
            v4 = v11;
        }
        else
        {
          v4 = (v12 - 1) & v11;
        }
        goto LABEL_97;
      }
      if (!prime)
      {
        v72 = (void *)*a1;
        *a1 = 0;
        if (v72)
          operator delete(v72);
        v12 = 0;
        a1[1] = 0;
        goto LABEL_84;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v53 = operator new(8 * prime);
    v54 = (void *)*a1;
    *a1 = (uint64_t)v53;
    if (v54)
      operator delete(v54);
    v55 = 0;
    a1[1] = prime;
    do
      *(_QWORD *)(*a1 + 8 * v55++) = 0;
    while (prime != v55);
    v56 = (_QWORD *)*v18;
    if (!*v18)
    {
LABEL_83:
      v12 = prime;
      goto LABEL_84;
    }
    v57 = v56[1];
    v58 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v59 = v57 & v58;
      *(_QWORD *)(*a1 + 8 * v59) = v18;
      for (i = (_QWORD *)*v56; *v56; i = (_QWORD *)*v56)
      {
        v61 = i[1] & v58;
        if (v61 == v59)
        {
          v56 = i;
        }
        else if (*(_QWORD *)(*a1 + 8 * v61))
        {
          *v56 = *i;
          v62 = 8 * v61;
          *i = **(_QWORD **)(*a1 + v62);
          **(_QWORD **)(*a1 + v62) = i;
        }
        else
        {
          *(_QWORD *)(*a1 + 8 * v61) = v56;
          v56 = i;
          v59 = v61;
        }
      }
      goto LABEL_83;
    }
    if (v57 >= prime)
      v57 %= prime;
    *(_QWORD *)(*a1 + 8 * v57) = v18;
    v66 = (_QWORD *)*v56;
    if (!*v56)
      goto LABEL_83;
    while (1)
    {
      v68 = v66[1];
      if (v68 >= prime)
        v68 %= prime;
      if (v68 != v57)
      {
        if (!*(_QWORD *)(*a1 + 8 * v68))
        {
          *(_QWORD *)(*a1 + 8 * v68) = v56;
          goto LABEL_88;
        }
        *v56 = *v66;
        v67 = 8 * v68;
        *v66 = **(_QWORD **)(*a1 + v67);
        **(_QWORD **)(*a1 + v67) = v66;
        v66 = v56;
      }
      v68 = v57;
LABEL_88:
      v56 = v66;
      v66 = (_QWORD *)*v66;
      v57 = v68;
      if (!v66)
        goto LABEL_83;
    }
  }
LABEL_97:
  v69 = *a1;
  v70 = *(_QWORD **)(*a1 + 8 * v4);
  if (v70)
  {
    *(_QWORD *)v20 = *v70;
LABEL_105:
    *v70 = v20;
    goto LABEL_106;
  }
  *(_QWORD *)v20 = *v18;
  *v18 = v20;
  *(_QWORD *)(v69 + 8 * v4) = v18;
  if (*(_QWORD *)v20)
  {
    v71 = *(_QWORD *)(*(_QWORD *)v20 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v71 >= v12)
        v71 %= v12;
    }
    else
    {
      v71 &= v12 - 1;
    }
    v70 = (_QWORD *)(*a1 + 8 * v71);
    goto LABEL_105;
  }
LABEL_106:
  ++a1[3];
}

void sub_19FA503C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<GeoCodecsConnectivityJunction const*,md::TransitJunction>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<GeoCodecsConnectivityJunction const*,md::TransitJunction>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<GeoCodecsConnectivityJunction const*,md::TransitJunction>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<GeoCodecsConnectivityJunction const*,md::TransitJunction>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
      md::TransitJunction::~TransitJunction((md::TransitJunction *)(v2 + 24));
    operator delete((void *)v2);
  }
  return a1;
}

void md::PolygonOverlayMeshBuilder::buildMesh(char **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int v10;
  char *v11;
  char *v12;
  unint64_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  float64x2_t v19;
  float64x2_t v20;
  const double *v21;
  uint64_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  const double *v29;
  double v30;
  double v31;
  char v32;
  int v33;
  int v34;
  double *v35;
  double v36;
  double v37;
  float64x2_t v38;
  double v39;
  double v40;
  _BYTE *v41;
  _BYTE *v42;
  int64_t v43;
  float64x2_t *v44;
  double *v45;
  size_t v46;
  double *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  void *v52;
  double *v53;
  char *v54;
  double *v55;
  float64x2_t v56;
  float64x2_t v57;
  double v58;
  double v59;
  double *v60;
  uint64_t v61;
  double *v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double *v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  char *v77;
  double *v78;
  char *v79;
  double *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  char *v89;
  uint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  char *v93;
  __int128 *v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  char *v102;
  char *v103;
  char *v104;
  char *v105;
  void **v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  char *v114;
  uint64_t *v115;
  unint64_t v116;
  uint64_t v117;
  char *v118;
  __int128 *v119;
  uint64_t v120;
  __int128 v121;
  uint64_t v122;
  __int128 v123;
  double *v124;
  float64x2_t v125;
  unint64_t v126;
  unint64_t v127;
  _BYTE *v128;
  _BYTE *v129;
  _BYTE *v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  unint64_t v135;
  _OWORD *v136;
  __int128 *v137;
  uint64_t v138;
  __int128 v139;
  uint64_t v140;
  float64_t v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  float32x2_t v146;
  uint64_t *v147;
  float64_t v148;
  int v149;
  uint64_t v150;
  float64x2_t v151;
  float32x2_t v152;
  int64_t v153;
  uint64_t *v154;
  float32x2_t *v155;
  float32x2_t *v156;
  char *v157;
  int64_t v158;
  int64_t v159;
  unint64_t v160;
  int64_t v161;
  unint64_t v162;
  _BYTE *v163;
  float32x2_t *v164;
  unint64_t v165;
  uint64_t v166;
  float64x2_t *v167;
  float64x2_t *v168;
  uint64_t v169;
  float32x2_t v170;
  uint64_t v171;
  int64_t v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  _BYTE *v176;
  int64_t v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  _BYTE *v181;
  int64_t *v182;
  uint64_t *v183;
  uint64_t *v184;
  unint64_t v185;
  uint64_t *v186;
  int64_t v187;
  uint64_t v188;
  float64x2_t *v189;
  float64x2_t *v190;
  uint64_t v191;
  uint64_t *v192;
  unint64_t v193;
  uint64_t *v194;
  int64_t v195;
  uint64_t v196;
  float64x2_t *v197;
  float64x2_t *v198;
  uint64_t v199;
  char *v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  _BYTE *v205;
  char *v206;
  _BYTE *v207;
  char *v208;
  char *v209;
  char *v210;
  char *v211;
  unint64_t v212;
  unint64_t v213;
  void *v214;
  unint64_t v215;
  unint64_t v216;
  uint64_t *v217;
  uint64_t *v218;
  float *v219;
  float *v220;
  float v221;
  float v222;
  char *v223;
  uint64_t v224;
  unint64_t v225;
  unint64_t v226;
  char *v227;
  char *v228;
  char *v229;
  char *v230;
  uint64_t v231;
  char **v232;
  void *v233;
  unint64_t v234;
  unint64_t v235;
  __int128 v236;
  __int128 v237;
  char *v238;
  char *v239;
  uint64_t v240;
  unint64_t v241;
  unint64_t v242;
  unint64_t v243;
  char *v244;
  unint64_t v245;
  uint64_t *v246;
  unint64_t v247;
  uint64_t *v248;
  BOOL v249;
  char *v250;
  char *v251;
  __int128 v252;
  __int128 v253;
  char *v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  char *v258;
  void *v259;
  void *v260;
  uint64_t v261;
  unsigned int v263;
  int32x2_t v264;
  uint64_t v265;
  char v267;
  const void ***v268;
  uint64_t v270;
  float64x2_t *v271;
  char *v272;
  char *v273;
  char *v274;
  float64_t v275;
  void *v276;
  _QWORD *v277;
  double v278;
  uint64_t v279;
  char *v280;
  void *v281[2];
  void *v282[2];
  uint64_t *v283;
  double *__p;
  float64x2_t *__pa;
  void *v286[2];
  void *v287[4];
  __int128 v288;
  __int128 v289;
  double v290;
  _BYTE v291[24];
  char *v292;
  uint64_t v293;
  char v294;
  float64x2x2_t v295;
  float64x2x2_t v296;

  v4 = *(_QWORD *)(a3 + 8);
  if (v4 != a3)
  {
    v263 = 0;
    v261 = a4 << 32;
    v264 = vdup_n_s32(0x7F7FFFFFu);
    __asm { FMOV            V12.2S, #1.0 }
    while (1)
    {
      v10 = *(char *)(v4 + 32);
      if (v10 < *(char *)(v4 + 33))
        break;
LABEL_3:
      ++v263;
      v4 = *(_QWORD *)(v4 + 8);
      if (v4 == a3)
        return;
    }
    v268 = (const void ***)(v4 + 16);
    v265 = v4;
    while (1)
    {
      memset(v287, 0, sizeof(v287));
      *(_OWORD *)v286 = 0u;
      *(_QWORD *)&v288 = v261 | v263;
      v11 = (char *)**v268;
      v12 = (char *)(*v268)[1];
      if (v11 == v12)
      {
        v16 = 1.79769313e308;
        v17 = -1.79769313e308;
        v14 = 1.79769313e308;
        v15 = -1.79769313e308;
      }
      else
      {
        v13 = v12 - v11 - 16;
        if (v13 >= 0x30)
        {
          v18 = (v13 >> 4) + 1;
          v19 = (float64x2_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
          v20 = (float64x2_t)vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
          v21 = (const double *)(v11 + 32);
          v22 = v18 & 0x1FFFFFFFFFFFFFFCLL;
          v23 = v20;
          v24 = v19;
          v25 = v19;
          v26 = v19;
          v27 = v20;
          v28 = v20;
          do
          {
            v29 = v21 - 4;
            v295 = vld2q_f64(v29);
            v296 = vld2q_f64(v21);
            v19 = vminnmq_f64(v295.val[0], v19);
            v24 = vminnmq_f64(v296.val[0], v24);
            v27 = vmaxnmq_f64(v27, v295.val[0]);
            v28 = vmaxnmq_f64(v28, v296.val[0]);
            v25 = vminnmq_f64(v295.val[1], v25);
            v26 = vminnmq_f64(v296.val[1], v26);
            v20 = vmaxnmq_f64(v20, v295.val[1]);
            v23 = vmaxnmq_f64(v23, v296.val[1]);
            v21 += 8;
            v22 -= 4;
          }
          while (v22);
          v17 = vmaxnmvq_f64(vmaxnmq_f64(v27, v28));
          v16 = vminnmvq_f64(vminnmq_f64(v25, v26));
          v14 = vminnmvq_f64(vminnmq_f64(v19, v24));
          v15 = vmaxnmvq_f64(vmaxnmq_f64(v20, v23));
          if (v18 == (v18 & 0x1FFFFFFFFFFFFFFCLL))
            goto LABEL_16;
          v11 += 16 * (v18 & 0x1FFFFFFFFFFFFFFCLL);
        }
        else
        {
          v14 = 1.79769313e308;
          v15 = -1.79769313e308;
          v16 = 1.79769313e308;
          v17 = -1.79769313e308;
        }
        do
        {
          v30 = *(double *)v11;
          v31 = *((double *)v11 + 1);
          v11 += 16;
          v14 = fmin(v30, v14);
          v17 = fmax(v17, v30);
          v16 = fmin(v31, v16);
          v15 = fmax(v15, v31);
        }
        while (v11 != v12);
      }
LABEL_16:
      *((double *)&v288 + 1) = v14;
      *(double *)&v289 = v16;
      *((double *)&v289 + 1) = v17;
      v290 = v15;
      v294 = v10;
      v32 = *(_BYTE *)(a2 + 1);
      v33 = *(_DWORD *)(a2 + 4);
      v34 = *(_DWORD *)(a2 + 8);
      v35 = (double *)operator new(0x40uLL);
      v36 = 1.0 / (double)(1 << v32);
      v267 = v10;
      v37 = (double)(char)v10 + v36 * (double)v34;
      v38.f64[0] = v37 + v36;
      v39 = v36 * (double)((1 << v32) + ~v33);
      v40 = v39 + v36;
      *v35 = v37;
      v35[1] = v39;
      v35[2] = v37;
      v35[3] = v40;
      v35[4] = v38.f64[0];
      v35[5] = v40;
      v35[6] = v38.f64[0];
      v35[7] = v39;
      v42 = **v268;
      v41 = (*v268)[1];
      v43 = v41 - v42;
      v44 = (float64x2_t *)v35;
      if (v41 == v42)
      {
        v45 = 0;
        v47 = 0;
      }
      else
      {
        if (v43 < 0)
          abort();
        v45 = (double *)operator new(v41 - v42);
        v46 = v43 & 0xFFFFFFFFFFFFFFF0;
        memcpy(v45, v42, v46);
        v47 = (double *)((char *)v45 + v46);
      }
      v48 = 0;
      memset(v291, 0, sizeof(v291));
      v271 = v44;
      while (1)
      {
        v270 = v48 + 1;
        if (v48 == 3)
          v49 = 0;
        else
          v49 = v48 + 1;
        v50 = 0;
        v51 = (char *)v47 - (char *)v45;
        if (v47 != v45)
        {
          v52 = 0;
          __p = 0;
          v53 = 0;
          v54 = 0;
          v55 = v47 - 2;
          v56 = v44[v48];
          v57 = vsubq_f64(v44[v49], v56);
          v58 = v44[v48].f64[1];
          v59 = v57.f64[1];
          v60 = v47 - 1;
          v61 = v51 >> 4;
          if ((unint64_t)(v51 >> 4) <= 1)
            v61 = 1;
          v276 = (void *)v61;
          v278 = v56.f64[0];
          *(_OWORD *)v281 = 0u;
          v272 = (char *)v45;
          v275 = v57.f64[0];
          while (1)
          {
            v63 = *v60;
            v64 = *v55;
            v55 = &v45[2 * (_QWORD)v52];
            v60 = v55 + 1;
            v65 = v55[1];
            v38.f64[0] = (v63 - v58) * v57.f64[0];
            v66 = (v64 - v278) * v59;
            v67 = (v278 - *v55) * v59 + (v65 - v58) * v57.f64[0];
            if (v38.f64[0] - v66 >= 0.0 == v67 < 0.0)
            {
              v68 = *v55 - v64;
              v69 = v65 - v63;
              v70 = -(v68 * v59 - v69 * v57.f64[0]);
              if (v70 != 0.0)
                break;
            }
LABEL_76:
            if (v67 >= 0.0)
            {
              v62 = v53;
            }
            else
            {
              if (v53 >= (double *)v54)
              {
                v99 = ((char *)v53 - (char *)__p) >> 4;
                v100 = v99 + 1;
                if ((unint64_t)(v99 + 1) >> 60)
                  abort();
                if ((v54 - (char *)__p) >> 3 > v100)
                  v100 = (v54 - (char *)__p) >> 3;
                if ((unint64_t)(v54 - (char *)__p) >= 0x7FFFFFFFFFFFFFF0)
                  v101 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v101 = v100;
                if (v101)
                {
                  if (v101 >> 60)
                    goto LABEL_368;
                  v102 = (char *)operator new(16 * v101);
                  v57.f64[0] = v275;
                }
                else
                {
                  v102 = 0;
                }
                v103 = &v102[16 * v99];
                *(_OWORD *)v103 = *(_OWORD *)v55;
                if (v53 == __p)
                {
                  __p = (double *)&v102[16 * v99];
                }
                else
                {
                  v104 = &v102[16 * v99];
                  do
                  {
                    *((_OWORD *)v104 - 1) = *((_OWORD *)v53 - 1);
                    v104 -= 16;
                    v53 -= 2;
                  }
                  while (v53 != __p);
                  v53 = __p;
                  __p = (double *)v104;
                }
                v54 = &v102[16 * v101];
                v62 = (double *)(v103 + 16);
                if (v53)
                {
                  v105 = &v102[16 * v101];
                  operator delete(v53);
                  v54 = v105;
                  v57.f64[0] = v275;
                }
              }
              else
              {
                *(_OWORD *)v53 = *(_OWORD *)v55;
                v62 = v53 + 2;
              }
              v106 = *(void ***)v291;
              if (*(_QWORD *)v291 != *(_QWORD *)&v291[8])
              {
                while (*v106 != v52)
                {
                  if (++v106 == *(void ***)&v291[8])
                  {
                    v106 = *(void ***)&v291[8];
                    break;
                  }
                }
              }
              if (v106 != *(void ***)&v291[8])
              {
                v107 = (((char *)v62 - (char *)__p) >> 4) - 1;
                v108 = (uint64_t)v281[1];
                if (v281[1] < v50)
                {
                  *(_QWORD *)v281[1] = v107;
                  v109 = (uint64_t)v281[1] + 8;
LABEL_125:
                  *(void **)&v123 = v281[0];
                  *((_QWORD *)&v123 + 1) = v109;
                  *(_OWORD *)v281 = v123;
                  v45 = (double *)v272;
                  goto LABEL_29;
                }
                v110 = v281[0];
                v111 = ((char *)v281[1] - (char *)v281[0]) >> 3;
                v112 = v111 + 1;
                if ((unint64_t)(v111 + 1) >> 61)
                  abort();
                if ((v50 - (char *)v281[0]) >> 2 > v112)
                  v112 = (v50 - (char *)v281[0]) >> 2;
                if ((unint64_t)(v50 - (char *)v281[0]) >= 0x7FFFFFFFFFFFFFF8)
                  v113 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v113 = v112;
                v274 = v54;
                if (v113)
                {
                  if (v113 >> 61)
                    goto LABEL_368;
                  v114 = (char *)operator new(8 * v113);
                  v57.f64[0] = v275;
                }
                else
                {
                  v114 = 0;
                }
                v115 = (uint64_t *)&v114[8 * v111];
                *v115 = v107;
                v109 = (uint64_t)(v115 + 1);
                if (v281[1] == v281[0])
                {
                  v44 = v271;
                }
                else
                {
                  v116 = (char *)v281[1] - 8 - (char *)v281[0];
                  if (v116 < 0x58)
                  {
                    v44 = v271;
                    goto LABEL_121;
                  }
                  v44 = v271;
                  if ((void *)((char *)v281[0] - (char *)v114) < (void *)0x20)
                    goto LABEL_384;
                  v117 = (v116 >> 3) + 1;
                  v118 = &v114[(char *)v281[1] - (char *)v281[0] - 16];
                  v119 = (__int128 *)((char *)v281[1] - 16);
                  v120 = v117 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v121 = *v119;
                    *((_OWORD *)v118 - 1) = *(v119 - 1);
                    *(_OWORD *)v118 = v121;
                    v118 -= 32;
                    v119 -= 2;
                    v120 -= 4;
                  }
                  while (v120);
                  v115 -= v117 & 0x3FFFFFFFFFFFFFFCLL;
                  v108 = (uint64_t)v281[1] - 8 * (v117 & 0x3FFFFFFFFFFFFFFCLL);
                  if (v117 != (v117 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_384:
                    do
                    {
LABEL_121:
                      v122 = *(_QWORD *)(v108 - 8);
                      v108 -= 8;
                      *--v115 = v122;
                    }
                    while ((void *)v108 != v281[0]);
                  }
                }
                v50 = &v114[8 * v113];
                v281[0] = v115;
                if (v110)
                {
                  operator delete(v110);
                  v57.f64[0] = v275;
                }
                v54 = v274;
                goto LABEL_125;
              }
            }
LABEL_29:
            v52 = (char *)v52 + 1;
            v53 = v62;
            if (v52 == v276)
              goto LABEL_127;
          }
          v38.f64[0] = (v66 - v38.f64[0]) / v70;
          v71 = v64 + v38.f64[0] * v68;
          v72 = v63 + v38.f64[0] * v69;
          if (v53 >= (double *)v54)
          {
            v74 = ((char *)v53 - (char *)__p) >> 4;
            v75 = v74 + 1;
            if ((unint64_t)(v74 + 1) >> 60)
              abort();
            if ((v54 - (char *)__p) >> 3 > v75)
              v75 = (v54 - (char *)__p) >> 3;
            if ((unint64_t)(v54 - (char *)__p) >= 0x7FFFFFFFFFFFFFF0)
              v76 = 0xFFFFFFFFFFFFFFFLL;
            else
              v76 = v75;
            if (v76)
            {
              if (v76 >> 60)
                goto LABEL_368;
              v77 = (char *)operator new(16 * v76);
              v57.f64[0] = v275;
            }
            else
            {
              v77 = 0;
            }
            v78 = (double *)&v77[16 * v74];
            *v78 = v71;
            v78[1] = v72;
            if (v53 == __p)
            {
              v73 = (double *)&v77[16 * v74];
              v80 = __p;
            }
            else
            {
              v79 = &v77[16 * v74];
              v80 = __p;
              do
              {
                v73 = (double *)(v79 - 16);
                *((_OWORD *)v79 - 1) = *((_OWORD *)v53 - 1);
                v53 -= 2;
                v79 -= 16;
              }
              while (v53 != __p);
            }
            v54 = &v77[16 * v76];
            v53 = v78 + 2;
            if (v80)
            {
              v81 = &v77[16 * v76];
              operator delete(v80);
              v54 = v81;
              v57.f64[0] = v275;
            }
          }
          else
          {
            *v53 = v71;
            v53[1] = v72;
            v53 += 2;
            v73 = __p;
          }
          __p = v73;
          v82 = (((char *)v53 - (char *)v73) >> 4) - 1;
          v83 = (uint64_t)v281[1];
          if (v281[1] < v50)
          {
            *(_QWORD *)v281[1] = v82;
            v84 = (uint64_t)v281[1] + 8;
LABEL_75:
            *(void **)&v98 = v281[0];
            *((_QWORD *)&v98 + 1) = v84;
            *(_OWORD *)v281 = v98;
            goto LABEL_76;
          }
          v85 = v281[0];
          v86 = ((char *)v281[1] - (char *)v281[0]) >> 3;
          v87 = v86 + 1;
          if ((unint64_t)(v86 + 1) >> 61)
            abort();
          if ((v50 - (char *)v281[0]) >> 2 > v87)
            v87 = (v50 - (char *)v281[0]) >> 2;
          if ((unint64_t)(v50 - (char *)v281[0]) >= 0x7FFFFFFFFFFFFFF8)
            v88 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v88 = v87;
          v273 = v54;
          if (v88)
          {
            if (v88 >> 61)
              goto LABEL_368;
            v89 = (char *)operator new(8 * v88);
            v57.f64[0] = v275;
          }
          else
          {
            v89 = 0;
          }
          v90 = (uint64_t *)&v89[8 * v86];
          *v90 = v82;
          v84 = (uint64_t)(v90 + 1);
          if (v281[1] == v281[0])
          {
            v44 = v271;
          }
          else
          {
            v91 = (char *)v281[1] - 8 - (char *)v281[0];
            if (v91 >= 0x58)
            {
              v44 = v271;
              if ((void *)((char *)v281[0] - (char *)v89) >= (void *)0x20)
              {
                v92 = (v91 >> 3) + 1;
                v93 = &v89[(char *)v281[1] - (char *)v281[0] - 16];
                v94 = (__int128 *)((char *)v281[1] - 16);
                v95 = v92 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v96 = *v94;
                  *((_OWORD *)v93 - 1) = *(v94 - 1);
                  *(_OWORD *)v93 = v96;
                  v93 -= 32;
                  v94 -= 2;
                  v95 -= 4;
                }
                while (v95);
                v90 -= v92 & 0x3FFFFFFFFFFFFFFCLL;
                v83 = (uint64_t)v281[1] - 8 * (v92 & 0x3FFFFFFFFFFFFFFCLL);
                if (v92 == (v92 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_72;
              }
            }
            else
            {
              v44 = v271;
            }
            do
            {
              v97 = *(_QWORD *)(v83 - 8);
              v83 -= 8;
              *--v90 = v97;
            }
            while ((void *)v83 != v281[0]);
          }
LABEL_72:
          v50 = &v89[8 * v88];
          v281[0] = v90;
          if (v85)
          {
            operator delete(v85);
            v57.f64[0] = v275;
          }
          v45 = (double *)v272;
          v54 = v273;
          goto LABEL_75;
        }
        v62 = 0;
        __p = 0;
        *(_OWORD *)v281 = 0u;
LABEL_127:
        if (v45)
          operator delete(v45);
        if (*(_QWORD *)v291)
          operator delete(*(void **)v291);
        *(_OWORD *)v291 = *(_OWORD *)v281;
        *(_QWORD *)&v291[16] = v50;
        v124 = __p;
        if (v62 == __p)
          break;
        v47 = v62;
        v45 = __p;
        v48 = v270;
        if (v270 == 4)
        {
          v277 = v281[0];
          v125 = *(float64x2_t *)&v291[8];
          goto LABEL_137;
        }
      }
      if (v281[0])
      {
        *(void **)&v291[8] = v281[0];
        operator delete(v281[0]);
      }
      v277 = 0;
      v125 = 0uLL;
      v124 = v62;
LABEL_137:
      __pa = (float64x2_t *)v124;
      v126 = (char *)v62 - (char *)v124;
      v127 = ((char *)v62 - (char *)v124) >> 4;
      v128 = v286[0];
      if (v127 <= ((char *)v287[0] - (char *)v286[0]) >> 3)
      {
        v133 = (char *)v286[0];
      }
      else
      {
        *(float64x2_t *)v282 = v125;
        if ((v126 & 0x8000000000000000) != 0)
          abort();
        v129 = v286[1];
        v130 = operator new(v126 >> 1);
        v131 = v129 - v128;
        v132 = &v130[(v129 - v128) & 0xFFFFFFFFFFFFFFF8];
        v133 = v132;
        if (v129 != v128)
        {
          if ((unint64_t)(v131 - 8) < 0x58)
          {
            v133 = &v130[(v129 - v128) & 0xFFFFFFFFFFFFFFF8];
            goto LABEL_147;
          }
          v133 = &v130[(v129 - v128) & 0xFFFFFFFFFFFFFFF8];
          if (v129 - v130 - (v131 & 0xFFFFFFFFFFFFFFF8) < 0x20)
            goto LABEL_385;
          v134 = v131 >> 3;
          v135 = ((unint64_t)(v131 - 8) >> 3) + 1;
          v136 = &v130[8 * v134 - 16];
          v137 = (__int128 *)(v129 - 16);
          v138 = v135 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v139 = *v137;
            *(v136 - 1) = *(v137 - 1);
            *v136 = v139;
            v136 -= 2;
            v137 -= 2;
            v138 -= 4;
          }
          while (v138);
          v133 = &v132[-8 * (v135 & 0x3FFFFFFFFFFFFFFCLL)];
          v129 -= 8 * (v135 & 0x3FFFFFFFFFFFFFFCLL);
          if (v135 != (v135 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_385:
            do
            {
LABEL_147:
              v140 = *((_QWORD *)v129 - 1);
              v129 -= 8;
              *((_QWORD *)v133 - 1) = v140;
              v133 -= 8;
            }
            while (v129 != v128);
          }
        }
        v286[0] = v133;
        v286[1] = v132;
        v287[0] = &v130[8 * v127];
        if (v128)
          operator delete(v128);
        v125 = *(float64x2_t *)v282;
      }
      v141 = v125.f64[0];
      v142 = *(_QWORD *)&v125.f64[0] - (_QWORD)v277;
      if (*(_QWORD **)&v125.f64[0] == v277)
      {
        v143 = 0;
        v283 = 0;
      }
      else
      {
        if (v142 < 0)
          abort();
        v283 = (uint64_t *)operator new(*(_QWORD *)&v125.f64[0] - (_QWORD)v277);
        v143 = &v283[v142 >> 3];
      }
      if (v62 != (double *)__pa)
      {
        v144 = 0;
        if (v127 <= 1)
          v145 = 1;
        else
          v145 = v127;
        v146 = (float32x2_t)v264;
        v147 = v283;
        v279 = v145;
        while (1)
        {
          v148 = *(double *)&v277;
          if (*(_QWORD **)&v141 != v277)
          {
            while (**(_QWORD **)&v148 != v144)
            {
              *(_QWORD *)&v148 += 8;
              if (*(_QWORD *)&v148 == *(_QWORD *)&v141)
              {
                v148 = v141;
                break;
              }
            }
          }
          v125.f64[0] = (double)v294;
          v149 = 1 << *(_BYTE *)(a2 + 1);
          v150 = SHIDWORD(v38.f64[0]);
          v38.f64[0] = 1.0 / (double)v149 * (double)*(int *)(a2 + 8);
          *(_QWORD *)&v151.f64[0] = *(_OWORD *)&vaddq_f64(v38, v125);
          v125.f64[1] = (double)(v149 + ~*(_DWORD *)(a2 + 4));
          v38.f64[1] = 1.0 / (double)v149;
          v151.f64[1] = vmulq_f64(v38, v125).f64[1];
          v125 = vmulq_n_f64(vsubq_f64(__pa[v144], v151), (double)v149);
          v152 = vminnm_f32(vmaxnm_f32(vcvt_f32_f64(v125), 0), _D12);
          if (*(_QWORD *)&v146 == *(_QWORD *)&v152)
          {
            if (*(_QWORD *)&v148 == *(_QWORD *)&v141)
              goto LABEL_173;
            v153 = (((char *)v286[1] - (char *)v286[0]) >> 3) - 1;
            v154 = v283;
            if (v283 != v147)
            {
              while (*v154 != v153)
              {
                if (++v154 == v147)
                {
                  v154 = v147;
                  break;
                }
              }
            }
            if (v154 == *(uint64_t **)&v141)
            {
              if (v147 >= v143)
              {
                v177 = (char *)v147 - (char *)v283;
                v178 = v147 - v283;
                v179 = v178 + 1;
                if ((unint64_t)(v178 + 1) >> 61)
                  abort();
                if (((char *)v143 - (char *)v283) >> 2 > v179)
                  v179 = ((char *)v143 - (char *)v283) >> 2;
                if ((unint64_t)((char *)v143 - (char *)v283) >= 0x7FFFFFFFFFFFFFF8)
                  v180 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v180 = v179;
                if (v180)
                {
                  if (v180 >> 61)
                    goto LABEL_368;
                  v181 = operator new(8 * v180);
                }
                else
                {
                  v181 = 0;
                }
                v182 = (int64_t *)&v181[8 * v178];
                *v182 = v153;
                v183 = v182 + 1;
                v192 = v283;
                if (v283 != v147)
                {
                  v193 = (char *)(v147 - 1) - (char *)v283;
                  if (v193 < 0x168
                    || &v181[v177 - 8 - (v193 & 0xFFFFFFFFFFFFFFF8)] > &v181[v177 - 8]
                    || (uint64_t *)((char *)v147 - (v193 & 0xFFFFFFFFFFFFFFF8) - 8) > v147 - 1
                    || (unint64_t)((char *)v283 - v181) < 0x20)
                  {
                    v194 = v147;
                    v192 = v283;
                    v145 = v279;
                  }
                  else
                  {
                    v196 = (v193 >> 3) + 1;
                    v194 = &v147[-(v196 & 0x3FFFFFFFFFFFFFFCLL)];
                    v197 = (float64x2_t *)&v181[v177 - 16];
                    v198 = (float64x2_t *)(v147 - 2);
                    v199 = v196 & 0x3FFFFFFFFFFFFFFCLL;
                    v145 = v279;
                    do
                    {
                      v125 = *v198;
                      v197[-1] = v198[-1];
                      *v197 = v125;
                      v197 -= 2;
                      v198 -= 2;
                      v199 -= 4;
                    }
                    while (v199);
                    v182 -= v196 & 0x3FFFFFFFFFFFFFFCLL;
                    v192 = v283;
                    if (v196 == (v196 & 0x3FFFFFFFFFFFFFFCLL))
                    {
LABEL_241:
                      v143 = (uint64_t *)&v181[8 * v180];
                      if (v192)
                        goto LABEL_242;
                      goto LABEL_243;
                    }
                  }
                  do
                  {
                    v195 = *--v194;
                    *--v182 = v195;
                  }
                  while (v194 != v192);
                  goto LABEL_241;
                }
                v145 = v279;
                v143 = (uint64_t *)&v181[8 * v180];
                if (v283)
LABEL_242:
                  operator delete(v192);
LABEL_243:
                v152 = v146;
                goto LABEL_244;
              }
              *v147++ = v153;
              v152 = v146;
            }
            else
            {
LABEL_173:
              v152 = v146;
            }
          }
          else
          {
            v155 = (float32x2_t *)v286[1];
            if (v286[1] >= v287[0])
            {
              v157 = (char *)v286[0];
              v158 = (char *)v286[1] - (char *)v286[0];
              v159 = ((char *)v286[1] - (char *)v286[0]) >> 3;
              v160 = v159 + 1;
              if ((unint64_t)(v159 + 1) >> 61)
                abort();
              v161 = (char *)v287[0] - (char *)v286[0];
              if (((char *)v287[0] - (char *)v286[0]) >> 2 > v160)
                v160 = v161 >> 2;
              if ((unint64_t)v161 >= 0x7FFFFFFFFFFFFFF8)
                v162 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v162 = v160;
              if (v162)
              {
                if (v162 >> 61)
                  goto LABEL_368;
                v163 = operator new(8 * v162);
              }
              else
              {
                v163 = 0;
              }
              v164 = (float32x2_t *)&v163[8 * v159];
              *v164 = v152;
              v156 = v164 + 1;
              if (v155 == (float32x2_t *)v157)
              {
                v157 = (char *)v155;
              }
              else
              {
                v165 = (char *)&v155[-1] - v157;
                if (v165 < 0x58)
                  goto LABEL_386;
                if ((unint64_t)((char *)v155 - &v163[v158]) < 0x20)
                  goto LABEL_386;
                v166 = (v165 >> 3) + 1;
                v167 = (float64x2_t *)&v163[v158 - 16];
                v168 = (float64x2_t *)&v155[-2];
                v169 = v166 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v125 = *v168;
                  v167[-1] = v168[-1];
                  *v167 = v125;
                  v167 -= 2;
                  v168 -= 2;
                  v169 -= 4;
                }
                while (v169);
                v164 -= v166 & 0x3FFFFFFFFFFFFFFCLL;
                v155 -= v166 & 0x3FFFFFFFFFFFFFFCLL;
                if (v166 != (v166 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_386:
                  do
                  {
                    v170 = v155[-1];
                    --v155;
                    v164[-1] = v170;
                    --v164;
                  }
                  while (v155 != (float32x2_t *)v157);
                  v157 = (char *)v286[0];
                }
              }
              v286[0] = v164;
              v286[1] = v156;
              v287[0] = &v163[8 * v162];
              if (v157)
                operator delete(v157);
              v145 = v279;
            }
            else
            {
              *(float32x2_t *)v286[1] = v152;
              v156 = v155 + 1;
            }
            v286[1] = v156;
            if (*(_QWORD *)&v148 == *(_QWORD *)&v141)
              goto LABEL_161;
            v171 = (((char *)v156 - (char *)v286[0]) >> 3) - 1;
            if (v147 >= v143)
            {
              v172 = (char *)v147 - (char *)v283;
              v173 = v147 - v283;
              v174 = v173 + 1;
              if ((unint64_t)(v173 + 1) >> 61)
                abort();
              if (((char *)v143 - (char *)v283) >> 2 > v174)
                v174 = ((char *)v143 - (char *)v283) >> 2;
              if ((unint64_t)((char *)v143 - (char *)v283) >= 0x7FFFFFFFFFFFFFF8)
                v175 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v175 = v174;
              if (v175)
              {
                if (v175 >> 61)
                  goto LABEL_368;
                v176 = operator new(8 * v175);
              }
              else
              {
                v176 = 0;
              }
              v182 = (int64_t *)&v176[8 * v173];
              *v182 = v171;
              v183 = v182 + 1;
              v184 = v283;
              if (v147 != v283)
              {
                v185 = (char *)(v147 - 1) - (char *)v283;
                if (v185 < 0x168
                  || &v176[v172 - 8 - (v185 & 0xFFFFFFFFFFFFFFF8)] > &v176[v172 - 8]
                  || (uint64_t *)((char *)v147 - (v185 & 0xFFFFFFFFFFFFFFF8) - 8) > v147 - 1
                  || (unint64_t)((char *)v283 - v176) < 0x20)
                {
                  v186 = v147;
                  v184 = v283;
                }
                else
                {
                  v188 = (v185 >> 3) + 1;
                  v186 = &v147[-(v188 & 0x3FFFFFFFFFFFFFFCLL)];
                  v189 = (float64x2_t *)&v176[v172 - 16];
                  v190 = (float64x2_t *)(v147 - 2);
                  v191 = v188 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v125 = *v190;
                    v189[-1] = v190[-1];
                    *v189 = v125;
                    v189 -= 2;
                    v190 -= 2;
                    v191 -= 4;
                  }
                  while (v191);
                  v182 -= v188 & 0x3FFFFFFFFFFFFFFCLL;
                  v184 = v283;
                  if (v188 == (v188 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_225:
                    v143 = (uint64_t *)&v176[8 * v175];
                    if (!v184)
                      goto LABEL_244;
LABEL_228:
                    operator delete(v184);
LABEL_244:
                    v147 = v183;
                    v283 = v182;
                    goto LABEL_161;
                  }
                }
                do
                {
                  v187 = *--v186;
                  *--v182 = v187;
                }
                while (v186 != v184);
                goto LABEL_225;
              }
              v143 = (uint64_t *)&v176[8 * v175];
              if (v283)
                goto LABEL_228;
              goto LABEL_244;
            }
            *v147++ = v171;
          }
LABEL_161:
          ++v144;
          v146 = v152;
          if (v144 == v145)
          {
            v133 = (char *)v286[0];
            goto LABEL_256;
          }
        }
      }
      v147 = v283;
LABEL_256:
      v200 = (char *)v286[1];
      if (v286[1] == v133)
      {
        v201 = (char *)v286[1];
        v200 = v133;
        goto LABEL_260;
      }
      if (*(_QWORD *)v133 == *((_QWORD *)v286[1] - 1))
      {
        v245 = ((char *)v286[1] - (char *)v133) >> 3;
        v246 = v283;
        if (v283 == v147)
        {
          v247 = v245 - 1;
          v249 = v245 >= v245 - 1;
          if (v245 >= v245 - 1)
            goto LABEL_364;
        }
        else
        {
          while (*v246)
          {
            if (++v246 == v147)
            {
              v246 = v147;
              break;
            }
          }
          v247 = v245 - 1;
          v248 = v283;
          while (*v248 != v247)
          {
            if (++v248 == v147)
            {
              v248 = v147;
              break;
            }
          }
          if ((v246 == v147) != (v248 == v147))
            goto LABEL_258;
          v249 = v245 > v247;
          if (v245 >= v247)
          {
LABEL_364:
            if (v249)
            {
              v200 = &v133[8 * v247];
              v286[1] = v200;
            }
            goto LABEL_258;
          }
        }
        std::vector<gm::Matrix<float,2,1>>::__append((uint64_t)v286, 0xFFFFFFFFFFFFFFFFLL);
        v133 = (char *)v286[0];
        v200 = (char *)v286[1];
      }
LABEL_258:
      v201 = v133;
LABEL_260:
      v293 = 0;
      *(_QWORD *)v291 = &v293;
      *(_QWORD *)&v291[8] = v268;
      *(_QWORD *)&v291[16] = a2;
      v292 = &v294;
      v202 = v200 - v201;
      v203 = v202 >> 3;
      v204 = (char *)v287[3];
      v205 = v287[1];
      if (v202 >> 3 <= (unint64_t)(((char *)v287[3] - (char *)v287[1]) >> 4))
      {
        v210 = (char *)v287[1];
      }
      else
      {
        if ((unint64_t)v202 >= 0x7FFFFFFFFFFFFFF9)
          abort();
        v206 = v200;
        v207 = v287[2];
        v208 = (char *)operator new(2 * v202);
        v209 = &v208[(v207 - v205) & 0xFFFFFFFFFFFFFFF0];
        v210 = v209;
        if (v207 != v205)
        {
          v211 = &v208[(v207 - v205) & 0xFFFFFFFFFFFFFFF0];
          do
          {
            v210 = v211 - 16;
            *((_OWORD *)v211 - 1) = *((_OWORD *)v207 - 1);
            v207 -= 16;
            v211 -= 16;
          }
          while (v207 != v205);
        }
        v204 = &v208[16 * v203];
        v287[1] = v210;
        v287[2] = v209;
        v287[3] = v204;
        if (v205)
          operator delete(v205);
        v200 = v206;
      }
      v280 = v200;
      if (v200 != v133)
      {
        v212 = 0;
        v213 = (v200 - v133) >> 3;
        do
        {
          v215 = v212 + 1;
          if (v212 + 1 == v213)
            v216 = 0;
          else
            v216 = v212 + 1;
          if (v283 == v147)
            goto LABEL_296;
          v217 = v283;
          while (*v217 != v212)
          {
            if (++v217 == v147)
            {
              v217 = v147;
              break;
            }
          }
          v218 = v283;
          while (*v218 != v216)
          {
            if (++v218 == v147)
            {
              v218 = v147;
              break;
            }
          }
          if (v217 == v147
            || v218 == v147
            || ((v219 = (float *)&v133[8 * v212],
                 v220 = (float *)&v133[8 * v216],
                 v221 = v219[1],
                 vabds_f32(v221, v220[1]) >= 0.00000011921)
             || fabsf(v221) >= 0.00000011921
             && (vabdd_f64(1.0, v221) >= 0.00000011920929
              || (md::PolygonOverlayMeshBuilder::tileCut(geo::QuadTile const&,std::shared_ptr<geo::Polygon2<double>> const&,md::PolygonOverlayMeshBuilder::MeshInfo &,signed char)::$_0::operator()((float ****)v291, (float *)&v133[8 * v212], (float *)&v133[8 * v216]) & 1) != 0))&& ((v222 = *v219, vabds_f32(*v219, *v220) >= 0.00000011921)|| fabsf(v222) >= 0.00000011921&& (vabdd_f64(1.0, v222) >= 0.00000011920929|| (md::PolygonOverlayMeshBuilder::tileCut(geo::QuadTile const&,std::shared_ptr<geo::Polygon2<double>> const&,md::PolygonOverlayMeshBuilder::MeshInfo &,signed char)::$_0::operator()((float ****)v291, (float *)&v133[8 * v212], (float *)&v133[8 * v216]) & 1) != 0)))
          {
LABEL_296:
            v223 = (char *)v287[2];
            if (v287[2] < v204)
            {
              *(_QWORD *)v287[2] = v212;
              *((_QWORD *)v223 + 1) = v216;
              v214 = v223 + 16;
            }
            else
            {
              v224 = ((char *)v287[2] - (char *)v210) >> 4;
              v225 = v224 + 1;
              if ((unint64_t)(v224 + 1) >> 60)
                abort();
              if ((v204 - v210) >> 3 > v225)
                v225 = (v204 - v210) >> 3;
              if ((unint64_t)(v204 - v210) >= 0x7FFFFFFFFFFFFFF0)
                v226 = 0xFFFFFFFFFFFFFFFLL;
              else
                v226 = v225;
              if (v226 >> 60)
                goto LABEL_368;
              v227 = (char *)operator new(16 * v226);
              v228 = &v227[16 * v224];
              *(_QWORD *)v228 = v212;
              *((_QWORD *)v228 + 1) = v216;
              if (v223 == v210)
              {
                v230 = &v227[16 * v224];
              }
              else
              {
                v229 = &v227[16 * v224];
                do
                {
                  v230 = v229 - 16;
                  *((_OWORD *)v229 - 1) = *((_OWORD *)v223 - 1);
                  v223 -= 16;
                  v229 -= 16;
                }
                while (v223 != v210);
              }
              v204 = &v227[16 * v226];
              v214 = v228 + 16;
              v287[1] = v230;
              v287[2] = v228 + 16;
              v287[3] = v204;
              if (v210)
              {
                operator delete(v210);
                v280 = (char *)v286[1];
              }
              v210 = v230;
            }
            v287[2] = v214;
            v133 = (char *)v286[0];
          }
          v213 = (v280 - v133) >> 3;
          v212 = v215;
        }
        while (v215 < v213);
      }
      v231 = v293;
      v293 = 0;
      v232 = a1;
      v4 = v265;
      if (v231)
      {
        v233 = *(void **)v231;
        if (*(_QWORD *)v231)
        {
          *(_QWORD *)(v231 + 8) = v233;
          operator delete(v233);
        }
        MEMORY[0x1A1AF4E00](v231, 0x20C40960023A9);
      }
      if (v283)
        operator delete(v283);
      if (__pa)
        operator delete(__pa);
      if (v277)
        operator delete(v277);
      operator delete(v271);
      if (v286[1] != v286[0])
      {
        v235 = (unint64_t)a1[1];
        v234 = (unint64_t)a1[2];
        if (v235 >= v234)
        {
          v239 = *a1;
          v240 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v235 - (_QWORD)*a1) >> 3);
          v241 = v240 + 1;
          if ((unint64_t)(v240 + 1) > 0x2E8BA2E8BA2E8BALL)
            abort();
          v242 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v234 - (_QWORD)v239) >> 3);
          if (2 * v242 > v241)
            v241 = 2 * v242;
          if (v242 >= 0x1745D1745D1745DLL)
            v243 = 0x2E8BA2E8BA2E8BALL;
          else
            v243 = v241;
          if (v243)
          {
            if (v243 > 0x2E8BA2E8BA2E8BALL)
LABEL_368:
              std::__throw_bad_array_new_length[abi:nn180100]();
            v244 = (char *)operator new(88 * v243);
            v232 = a1;
          }
          else
          {
            v244 = 0;
          }
          v250 = &v244[88 * v240];
          *((void **)v250 + 2) = v287[0];
          *(_OWORD *)v250 = *(_OWORD *)v286;
          v251 = &v244[88 * v243];
          v286[1] = 0;
          v287[0] = 0;
          v286[0] = 0;
          *(_OWORD *)(v250 + 24) = *(_OWORD *)&v287[1];
          *((void **)v250 + 5) = v287[3];
          memset(&v287[1], 0, 24);
          v252 = v288;
          v253 = v289;
          *((double *)v250 + 10) = v290;
          v238 = v250 + 88;
          *((_OWORD *)v250 + 3) = v252;
          *((_OWORD *)v250 + 4) = v253;
          if ((char *)v235 == v239)
          {
            *v232 = v250;
            v232[1] = v238;
            v232[2] = v251;
          }
          else
          {
            do
            {
              v254 = v250;
              *((_QWORD *)v250 - 10) = 0;
              *((_QWORD *)v250 - 9) = 0;
              v255 = *(_OWORD *)(v235 - 88);
              v235 -= 88;
              *(_OWORD *)(v250 - 88) = v255;
              v250 -= 88;
              *((_QWORD *)v254 - 9) = *(_QWORD *)(v235 + 16);
              *(_QWORD *)v235 = 0;
              *(_QWORD *)(v235 + 8) = 0;
              *(_QWORD *)(v235 + 16) = 0;
              *((_QWORD *)v250 + 4) = 0;
              *((_QWORD *)v250 + 5) = 0;
              *(_OWORD *)(v250 + 24) = *(_OWORD *)(v235 + 24);
              *((_QWORD *)v250 + 5) = *(_QWORD *)(v235 + 40);
              *(_QWORD *)(v235 + 24) = 0;
              *(_QWORD *)(v235 + 32) = 0;
              *(_QWORD *)(v235 + 40) = 0;
              v256 = *(_OWORD *)(v235 + 48);
              v257 = *(_OWORD *)(v235 + 64);
              *((_QWORD *)v250 + 10) = *(_QWORD *)(v235 + 80);
              *((_OWORD *)v250 + 3) = v256;
              *((_OWORD *)v250 + 4) = v257;
            }
            while ((char *)v235 != v239);
            v235 = (unint64_t)*v232;
            v258 = v232[1];
            *v232 = v250;
            v232[1] = v238;
            v232[2] = v251;
            while (v258 != (char *)v235)
            {
              v259 = (void *)*((_QWORD *)v258 - 8);
              if (v259)
              {
                *((_QWORD *)v258 - 7) = v259;
                operator delete(v259);
              }
              v260 = (void *)*((_QWORD *)v258 - 11);
              if (v260)
              {
                *((_QWORD *)v258 - 10) = v260;
                operator delete(v260);
              }
              v258 -= 88;
            }
          }
          if (v235)
            operator delete((void *)v235);
        }
        else
        {
          *(_OWORD *)v235 = *(_OWORD *)v286;
          *(void **)(v235 + 16) = v287[0];
          v286[0] = 0;
          v286[1] = 0;
          v287[0] = 0;
          *(_OWORD *)(v235 + 24) = *(_OWORD *)&v287[1];
          *(void **)(v235 + 40) = v287[3];
          memset(&v287[1], 0, 24);
          v237 = v288;
          v236 = v289;
          *(double *)(v235 + 80) = v290;
          *(_OWORD *)(v235 + 48) = v237;
          *(_OWORD *)(v235 + 64) = v236;
          v238 = (char *)(v235 + 88);
        }
        v232[1] = v238;
      }
      if (v287[1])
        operator delete(v287[1]);
      if (v286[0])
        operator delete(v286[0]);
      v10 = (char)(v267 + 1);
      if (v10 >= *(char *)(v265 + 33))
        goto LABEL_3;
    }
  }
}

void sub_19FA51A70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,__int128 __p,uint64_t a32,void *a33,char a34)
{
  void *v34;
  void *v36;
  void *v37;

  if ((_QWORD)__p)
  {
    operator delete((void *)__p);
    v36 = a33;
    if (!a33)
    {
LABEL_3:
      v37 = a28;
      if (!a28)
      {
LABEL_8:
        operator delete(v34);
        md::TileAdjustmentHelpers::~TileAdjustmentHelpers((md::TileAdjustmentHelpers *)&a34);
        _Unwind_Resume(a1);
      }
LABEL_7:
      operator delete(v37);
      goto LABEL_8;
    }
  }
  else
  {
    v36 = a33;
    if (!a33)
      goto LABEL_3;
  }
  operator delete(v36);
  v37 = a28;
  if (!a28)
    goto LABEL_8;
  goto LABEL_7;
}

uint64_t md::PolygonOverlayMeshBuilder::tileCut(geo::QuadTile const&,std::shared_ptr<geo::Polygon2<double>> const&,md::PolygonOverlayMeshBuilder::MeshInfo &,signed char)::$_0::operator()(float ****a1, float *a2, float *a3)
{
  float ****v5;
  float ***v6;
  float **v7;
  float *v8;
  float *v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float **v28;
  float **v29;
  float *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  double *v40;
  double *v41;
  double v42;
  double v43;
  float ***v44;
  double v45;
  double v46;
  double v47;
  double v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  uint64_t v54;
  uint64_t v55;
  void **v56;
  unint64_t v57;
  float *v58;
  float *v59;
  uint64_t v60;
  unint64_t v61;
  float *v62;
  float *v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  float ****v69;

  v5 = a1;
  v6 = *a1;
  if (!**a1)
  {
    v28 = (float **)operator new();
    v28[1] = 0;
    v28[2] = 0;
    *v28 = 0;
    v29 = *v6;
    *v6 = v28;
    if (v29)
    {
      v30 = *v29;
      if (*v29)
      {
        v29[1] = v30;
        operator delete(v30);
      }
      MEMORY[0x1A1AF4E00](v29, 0x20C40960023A9);
    }
    v31 = (uint64_t *)*v5[1];
    v32 = *v31;
    v33 = v31[1];
    v34 = v33 - *v31;
    if (v33 != *v31)
    {
      v35 = 0;
      v36 = v34 >> 4;
      v69 = v5;
      do
      {
        v38 = v35 + 1;
        if (v35 + 1 == v36)
          v39 = 0;
        else
          v39 = v35 + 1;
        if (vabds_f32(*a2, *a3) < 0.00000011921 || vabds_f32(a2[1], a3[1]) < 0.00000011921)
        {
          v40 = (double *)(v32 + 16 * v35);
          v41 = (double *)(v32 + 16 * v39);
          v42 = *v40;
          v43 = v40[1];
          v44 = v5[2];
          v45 = (double)*(char *)v5[3];
          LODWORD(v40) = 1 << *((_BYTE *)v44 + 1);
          v46 = 1.0 / (double)(int)v40;
          v47 = -((double)*((int *)v44 + 2) * v46);
          v48 = v46 * (double)((int)v40 + ~*((_DWORD *)v44 + 1));
          v49 = (v42 - v45 + v47) * (double)(int)v40;
          v50 = (v43 - v48) * (double)(int)v40;
          *(float *)&v45 = (*v41 - v45 + v47) * (double)(int)v40;
          v51 = (v41[1] - v48) * (double)(int)v40;
          v52 = *(float *)&v45 - v49;
          v53 = v51 - v50;
          v54 = LODWORD(v49);
          v55 = LODWORD(v50);
          v56 = (void **)**v5;
          v58 = (float *)v56[1];
          v57 = (unint64_t)v56[2];
          if ((unint64_t)v58 < v57)
          {
            *(_QWORD *)v58 = LODWORD(v49) | ((unint64_t)LODWORD(v50) << 32);
            v58[2] = v52;
            v58[3] = v53;
            v37 = (char *)(v58 + 4);
          }
          else
          {
            v59 = (float *)*v56;
            v60 = ((char *)v58 - (_BYTE *)*v56) >> 4;
            v61 = v60 + 1;
            if ((unint64_t)(v60 + 1) >> 60)
              abort();
            v62 = a2;
            v63 = a3;
            v64 = v57 - (_QWORD)v59;
            if (v64 >> 3 > v61)
              v61 = v64 >> 3;
            if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF0)
              v65 = 0xFFFFFFFFFFFFFFFLL;
            else
              v65 = v61;
            if (v65)
            {
              if (v65 >> 60)
                std::__throw_bad_array_new_length[abi:nn180100]();
              v66 = (char *)operator new(16 * v65);
            }
            else
            {
              v66 = 0;
            }
            v67 = &v66[16 * v60];
            *(_QWORD *)v67 = v54 | (v55 << 32);
            *((float *)v67 + 2) = v52;
            *((float *)v67 + 3) = v53;
            v68 = v67;
            if (v58 != v59)
            {
              do
              {
                *((_OWORD *)v68 - 1) = *((_OWORD *)v58 - 1);
                v68 -= 16;
                v58 -= 4;
              }
              while (v58 != v59);
              v58 = (float *)*v56;
            }
            v37 = v67 + 16;
            *v56 = v68;
            v56[1] = v67 + 16;
            v56[2] = &v66[16 * v65];
            if (v58)
              operator delete(v58);
            a3 = v63;
            a2 = v62;
            v5 = v69;
          }
          v56[1] = v37;
          v31 = (uint64_t *)*v5[1];
          v32 = *v31;
        }
        v36 = (v31[1] - v32) >> 4;
        v35 = v38;
      }
      while (v38 < v36);
    }
  }
  v7 = **v5;
  v8 = *v7;
  v9 = v7[1];
  if (v8 == v9)
    return 0;
  v10 = *a2;
  v11 = a2[1];
  v12 = *a3;
  v13 = a3[1];
  while (1)
  {
    v16 = *v8;
    v15 = v8[1];
    v18 = v8[2];
    v17 = v8[3];
    v19 = (float)(v18 * v18) + (float)(v17 * v17);
    v20 = (float)((float)(v18 * (float)(v10 - *v8)) + (float)(v17 * (float)(v11 - v15))) / v19;
    if (v20 < 0.0)
    {
      v21 = v16 - v10;
      v22 = v15 - v11;
      goto LABEL_11;
    }
    v23 = v16 - v10;
    v24 = v15 - v11;
    if (v20 <= 1.0)
      break;
    v21 = v18 + v23;
    v22 = v17 + v24;
LABEL_11:
    if ((float)((float)(v21 * v21) + (float)(v22 * v22)) < 0.00000011921)
      goto LABEL_14;
LABEL_6:
    v8 += 4;
    if (v8 == v9)
      return 0;
  }
  if ((float)((float)((float)(v23 + (float)(v20 * v18)) * (float)(v23 + (float)(v20 * v18)))
             + (float)((float)(v24 + (float)(v20 * v17)) * (float)(v24 + (float)(v20 * v17)))) >= 0.00000011921)
    goto LABEL_6;
LABEL_14:
  v25 = (float)((float)((float)(v12 - v16) * v18) + (float)((float)(v13 - v15) * v17)) / v19;
  v26 = v16 - v12;
  if (v25 < 0.0)
  {
    v14 = v15 - v13;
  }
  else if (v25 <= 1.0)
  {
    v26 = v26 + (float)(v25 * v18);
    v14 = (float)(v15 - v13) + (float)(v25 * v17);
  }
  else
  {
    v26 = v26 + v18;
    v14 = (float)(v15 - v13) + v17;
  }
  if ((float)((float)(v26 * v26) + (float)(v14 * v14)) >= 0.00000011921)
    goto LABEL_6;
  return 1;
}

uint64_t *std::unique_ptr<std::vector<gm::LineSegment<float,2>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(void **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)(v2 + 8) = v3;
      operator delete(v3);
    }
    MEMORY[0x1A1AF4E00](v2, 0x20C40960023A9);
  }
  return a1;
}

uint64_t md::PolygonOverlayMeshBuilder::buildOverlayRenderableFromMeshInfos(uint64_t *a1, uint64_t a2, uint64_t **a3, _QWORD *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t a8, float a9, int *a10, uint64_t *a11, __int128 *a12, __int128 *a13)
{
  uint64_t v13;
  uint64_t *v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  _QWORD *v29;
  __int128 v30;
  unsigned __int8 v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  std::__shared_count v34;
  unsigned __int8 v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  __int128 *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  __int128 *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  char v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  __int8 *v69;
  uint64_t v70;
  uint64_t v71;
  _WORD *v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  _WORD *v76;
  int64x2_t v77;
  float *v78;
  int v79;
  int v80;
  void *v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  char *v85;
  char *v86;
  unint64_t v87;
  _WORD *v88;
  int v89;
  uint64_t v90;
  char *v91;
  __int128 *v92;
  uint64_t v93;
  __int128 v94;
  char *v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  char *v99;
  int64x2_t *v100;
  unint64_t v101;
  int64x2_t *v102;
  int64x2_t v103;
  char *v104;
  char *v105;
  void *v106;
  void *v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  uint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  double v115;
  __int128 v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  double v124;
  unint64_t *v125;
  unint64_t v126;
  unint64_t *v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t *v130;
  unint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t *v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t *v145;
  unint64_t v146;
  unint64_t *v147;
  unint64_t v148;
  char *v149;
  char *v150;
  char *v151;
  void *v152;
  void *v153;
  uint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  uint64_t result;
  uint64_t *v162;
  uint64_t *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t *v166;
  uint64_t *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  __int128 v175;
  unsigned __int8 v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  std::__shared_count v179;
  unsigned __int8 v180;
  unsigned __int8 v181;
  uint64_t v182;
  _QWORD *v183;
  unsigned __int8 v184;
  uint64_t v185;
  _QWORD *v186;
  unint64_t *v187;
  unint64_t v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  unint64_t v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  unint64_t v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  __int128 *v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  __int128 *v204;
  uint64_t v205;
  int v206;
  uint64_t v207;
  int v208;
  uint64_t v209;
  int v210;
  uint64_t v211;
  int v212;
  uint64_t v213;
  unsigned __int8 v214;
  uint64_t v215;
  int v216;
  uint64_t v217;
  geo::read_write_lock *v218;
  const char *v219;
  malloc_zone_t *zone;
  uint64_t v221;
  int v222;
  uint64_t v223;
  geo::read_write_lock *v224;
  const char *v225;
  malloc_zone_t *v226;
  _QWORD *v229;
  _QWORD *v230;
  uint64_t *v234;
  __int128 v235;
  int64x2_t v237;
  __int128 v238;
  std::__shared_weak_count *v239;
  int v240;
  uint64_t v241;
  std::__shared_weak_count *v242;
  uint64_t v243;
  std::__shared_weak_count *v244;
  char v245;
  uint64_t v246[2];
  uint64_t v247;
  _QWORD *v248;
  std::__shared_weak_count *v249;
  _QWORD *v250;
  uint64_t v251;
  __int128 v252;
  __int128 *v253;
  __int128 v254;
  unint64_t v255;
  __int128 *v256;
  uint64_t v257;

  v13 = a8;
  v257 = *MEMORY[0x1E0C80C00];
  v250 = 0;
  v251 = 0;
  v17 = *a3;
  v18 = a3[1];
  if (*a3 == v18)
    goto LABEL_36;
  v19 = 0;
  v20 = 0;
  v21 = *a3;
  do
  {
    *(_QWORD *)&v254 = &off_1E42D5BF0;
    *((_QWORD *)&v254 + 1) = v17;
    v256 = &v254;
    v22 = (uint64_t *)*v21;
    v23 = v21[1] - *v21;
    v253 = &v252;
    *(_QWORD *)&v252 = &off_1E42D5BF0;
    *((_QWORD *)&v252 + 1) = v17;
    if ((unint64_t)v23 > 0x17)
    {
      v24 = v23 >> 3;
      v25 = *v22;
      v26 = v22[v24 - 1];
      if (v24 != 1 || v25 != v26)
      {
        v20 += v24;
        v251 = v20;
        v19 = (_QWORD *)((char *)v19 + geo::triangulatedIndexCount<float>(v21));
        v250 = v19;
      }
    }
    v21 += 11;
    v17 += 11;
  }
  while (v21 != v18);
  v13 = a8;
  if (!v20 || !v19)
    goto LABEL_36;
  v247 = 0;
  v28 = operator new();
  v29 = operator new(0xF8uLL);
  v29[1] = 0;
  v29[2] = 0;
  v29[3] = &off_1E42B5748;
  *v29 = &off_1E42DFAE0;
  v29[4] = 8;
  *((_DWORD *)v29 + 10) = 1;
  v29[6] = 0;
  v29[7] = 0;
  v29[8] = 0;
  v29[9] = 8 * v20;
  v30 = 0uLL;
  *((_OWORD *)v29 + 5) = 0u;
  *((_OWORD *)v29 + 6) = 0u;
  v29[14] = 0;
  if ((v31 & 1) == 0)
  {
    v30 = 0uLL;
    if (v206)
    {
      v207 = operator new();
      ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v207, "GeoGL", 0xA3D02C1100000005);
      v30 = 0uLL;
    }
  }
  v29[15] = ggl::Allocator::instance(void)::alloc;
  v29[16] = 0;
  *((_OWORD *)v29 + 11) = v30;
  *((_OWORD *)v29 + 12) = v30;
  v29[26] = 0;
  v29[27] = -1;
  *((_OWORD *)v29 + 9) = xmmword_19FFB2DD0;
  *((_OWORD *)v29 + 10) = v30;
  *((_DWORD *)v29 + 34) = 0;
  v29[29] = "Polygon overlay vertex data";
  v29[30] = &ggl::PolygonBase::compressedVboReflection;
  v29[3] = &off_1E42B7720;
  v29[28] = &unk_1E42B7740;
  v248 = v29 + 3;
  v249 = (std::__shared_weak_count *)v29;
  v32 = (std::__shared_weak_count *)operator new(0xF8uLL);
  v32->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v32->__shared_owners_;
  v32->__shared_weak_owners_ = 0;
  v32->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF1E8;
  v32[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B5748;
  v32[1].__shared_owners_ = 2;
  LODWORD(v32[1].__shared_weak_owners_) = 257;
  v32[2].__vftable = 0;
  v32[2].__shared_owners_ = 0;
  v32[2].__shared_weak_owners_ = 0;
  v32[3].__vftable = (std::__shared_weak_count_vtbl *)(2 * (_QWORD)v19);
  v34 = (std::__shared_count)0;
  *(_OWORD *)&v32[3].__shared_owners_ = 0uLL;
  v32[4].std::__shared_count = 0uLL;
  v32[4].__shared_weak_owners_ = 0;
  if ((v35 & 1) == 0)
  {
    v34 = (std::__shared_count)0;
    if (v208)
    {
      v209 = operator new();
      ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v209, "GeoGL", 0xA3D02C1100000005);
      v34 = (std::__shared_count)0;
    }
  }
  v32[5].__vftable = (std::__shared_weak_count_vtbl *)ggl::Allocator::instance(void)::alloc;
  v32[5].__shared_owners_ = 0;
  *((std::__shared_count *)v32 + 11) = v34;
  v32[8].std::__shared_count = v34;
  v32[8].__shared_weak_owners_ = 0;
  v32[9].__vftable = (std::__shared_weak_count_vtbl *)-1;
  *((std::__shared_count *)v32 + 10) = v34;
  v32[6].std::__shared_count = (std::__shared_count)xmmword_19FFB2DD0;
  LODWORD(v32[5].__shared_weak_owners_) = 0;
  LODWORD(v32[10].__vftable) = 0;
  v32[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6B88;
  v32[1].__shared_owners_ = 2;
  v32[9].__shared_owners_ = (uint64_t)&unk_1E42B6BA8;
  v32[9].__shared_weak_owners_ = (uint64_t)"Polygon overlay index data";
  v246[0] = (uint64_t)&v32[1];
  v246[1] = (uint64_t)v32;
  ggl::PolygonBase::CompressedMeshMesh::CompressedMeshMesh(v28, (uint64_t)"PolygonOverlay", (uint64_t *)&v248, v246);
  do
    v36 = __ldaxr(p_shared_owners);
  while (__stlxr(v36 - 1, p_shared_owners));
  if (!v36)
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
  v37 = v249;
  if (v249)
  {
    v38 = (unint64_t *)&v249->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v247 = v28;
  v245 = 0;
  v40 = (__int128 *)operator new(0x30uLL);
  *(_QWORD *)v40 = &off_1E42D2CB0;
  *((_QWORD *)v40 + 1) = a3;
  *((_QWORD *)v40 + 2) = &v247;
  *((_QWORD *)v40 + 3) = &v251;
  *((_QWORD *)v40 + 4) = &v250;
  *((_QWORD *)v40 + 5) = &v245;
  v256 = v40;
  v252 = 0uLL;
  (*(void (**)(_QWORD, __int128 *, __int128 *))(*(_QWORD *)*a4 + 16))(*a4, &v254, &v252);
  v41 = (std::__shared_weak_count *)*((_QWORD *)&v252 + 1);
  v13 = a8;
  if (*((_QWORD *)&v252 + 1))
  {
    v42 = (unint64_t *)(*((_QWORD *)&v252 + 1) + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = v256;
  if (v256 == &v254)
  {
    v45 = 4;
    v44 = &v254;
  }
  else
  {
    if (!v256)
      goto LABEL_33;
    v45 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v44 + 8 * v45))();
LABEL_33:
  v46 = v247;
  if (v245)
  {
    if (v247)
      (*(void (**)(uint64_t))(*(_QWORD *)v247 + 8))(v247);
LABEL_36:
    v47 = 0;
    v46 = 0;
    goto LABEL_37;
  }
  if (!v247 || (v246[0] = 0, v251 = 0, v162 = *a3, v163 = a3[1], *a3 == v163))
  {
    v47 = 0;
    goto LABEL_37;
  }
  v164 = 0;
  v165 = 0;
  v166 = *a3;
  do
  {
    *(_QWORD *)&v254 = &off_1E42D5BF0;
    *((_QWORD *)&v254 + 1) = v162;
    v256 = &v254;
    v167 = (uint64_t *)*v166;
    v168 = v166[1] - *v166;
    v253 = &v252;
    *(_QWORD *)&v252 = &off_1E42D5BF0;
    *((_QWORD *)&v252 + 1) = v162;
    if ((unint64_t)v168 > 0x17)
    {
      v169 = *v167;
      v170 = v167[(v168 >> 3) - 1];
      if (v168 >> 3 != 1 || v169 != v170)
      {
        v172 = v166[4] - v166[3];
        if (v172)
        {
          v164 += v168 >> 2;
          v246[0] = v164;
          v165 += 6 * (v172 >> 4);
          v251 = v165;
        }
      }
    }
    v166 += 11;
    v162 += 11;
  }
  while (v166 != v163);
  v47 = 0;
  if (v164 && v165)
  {
    v250 = 0;
    v173 = operator new();
    v174 = operator new(0xF8uLL);
    v174[1] = 0;
    v174[2] = 0;
    *v174 = &off_1E42DFDF0;
    v174[3] = &off_1E42B5748;
    v174[4] = 16;
    *((_DWORD *)v174 + 10) = 1;
    v174[6] = 0;
    v174[7] = 0;
    v174[8] = 0;
    v174[9] = 16 * v164;
    v175 = 0uLL;
    *((_OWORD *)v174 + 5) = 0u;
    *((_OWORD *)v174 + 6) = 0u;
    v174[14] = 0;
    if ((v176 & 1) == 0)
    {
      v175 = 0uLL;
      if (v210)
      {
        v211 = operator new();
        ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v211, "GeoGL", 0xA3D02C1100000005);
        v175 = 0uLL;
      }
    }
    v174[15] = ggl::Allocator::instance(void)::alloc;
    v174[16] = 0;
    *((_OWORD *)v174 + 11) = v175;
    *((_OWORD *)v174 + 12) = v175;
    v174[26] = 0;
    v174[27] = -1;
    *((_OWORD *)v174 + 10) = v175;
    *((_OWORD *)v174 + 9) = xmmword_19FFB2DD0;
    *((_DWORD *)v174 + 34) = 0;
    v174[29] = "Polygon overlay antialias vertex data";
    v174[30] = &ggl::PolygonOverlay::antialiasVboReflection;
    v174[3] = &off_1E42B7A60;
    v174[28] = &unk_1E42B7A80;
    *(_QWORD *)&v252 = v174 + 3;
    *((_QWORD *)&v252 + 1) = v174;
    v177 = (std::__shared_weak_count *)operator new(0xF8uLL);
    v177->__shared_owners_ = 0;
    v178 = (unint64_t *)&v177->__shared_owners_;
    v177->__shared_weak_owners_ = 0;
    v177->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF1E8;
    v177[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B5748;
    v177[1].__shared_owners_ = 2;
    LODWORD(v177[1].__shared_weak_owners_) = 257;
    v177[2].__vftable = 0;
    v177[2].__shared_owners_ = 0;
    v177[2].__shared_weak_owners_ = 0;
    v177[3].__vftable = (std::__shared_weak_count_vtbl *)(2 * v165);
    v179 = (std::__shared_count)0;
    *(_OWORD *)&v177[3].__shared_owners_ = 0u;
    v177[4].std::__shared_count = 0u;
    v177[4].__shared_weak_owners_ = 0;
    if ((v180 & 1) == 0)
    {
      v179 = (std::__shared_count)0;
      if (v212)
      {
        v213 = operator new();
        ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v213, "GeoGL", 0xA3D02C1100000005);
        v179 = (std::__shared_count)0;
      }
    }
    v177[5].__vftable = (std::__shared_weak_count_vtbl *)ggl::Allocator::instance(void)::alloc;
    v177[5].__shared_owners_ = 0;
    *((std::__shared_count *)v177 + 11) = v179;
    v177[8].std::__shared_count = v179;
    v177[8].__shared_weak_owners_ = 0;
    v177[9].__vftable = (std::__shared_weak_count_vtbl *)-1;
    *((std::__shared_count *)v177 + 10) = v179;
    v177[6].std::__shared_count = (std::__shared_count)xmmword_19FFB2DD0;
    LODWORD(v177[5].__shared_weak_owners_) = 0;
    LODWORD(v177[10].__vftable) = 0;
    v177[1].__shared_owners_ = 2;
    v177[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6B88;
    v177[9].__shared_owners_ = (uint64_t)&unk_1E42B6BA8;
    v177[9].__shared_weak_owners_ = (uint64_t)"Polygon overlay antialias index data";
    if ((v181 & 1) == 0
    {
      if ((v214 & 1) == 0
      {
        ggl::MeshTyped<ggl::PolygonOverlay::AntialiasVbo>::attributesReflection(void)::r = (uint64_t)&ggl::PolygonOverlay::antialiasVboReflection;
      }
      ggl::MeshTyped<ggl::PolygonOverlay::AntialiasVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::PolygonOverlay::AntialiasVbo>::attributesReflection(void)::r;
      unk_1ECE43C18 = 1;
      v13 = a8;
    }
    *(_QWORD *)(v173 + 32) = 0;
    *(_QWORD *)(v173 + 40) = 0;
    *(_DWORD *)(v173 + 48) = 0;
    *(_QWORD *)v173 = &off_1E42BBC08;
    *(_QWORD *)(v173 + 8) = "PolygonOverlayAntialias";
    *(_QWORD *)(v173 + 16) = &unk_1E42BBC28;
    *(_QWORD *)(v173 + 24) = 0;
    *(_QWORD *)(v173 + 56) = &ggl::MeshTyped<ggl::PolygonOverlay::AntialiasVbo>::typedReflection(void)::r;
    *(_QWORD *)(v173 + 64) = 0;
    v182 = v173 + 64;
    *(_QWORD *)(v173 + 72) = 0;
    *(_QWORD *)(v173 + 80) = 0;
    v183 = (_QWORD *)v173;
    if ((v184 & 1) == 0)
    {
      v215 = v173 + 64;
      v182 = v173 + 64;
      if (v216)
      {
        v217 = operator new();
        *(_QWORD *)(v217 + 16) = 0xA3D02C1100000005;
        *(_QWORD *)(v217 + 24) = "GeoGL";
        *(_OWORD *)(v217 + 32) = xmmword_19FFB2DE0;
        *(_QWORD *)v217 = &off_1E42B5668;
        *(_QWORD *)(v217 + 8) = "GeoGL";
        *(_OWORD *)(v217 + 72) = 0u;
        *(_OWORD *)(v217 + 88) = 0u;
        *(_OWORD *)(v217 + 104) = 0u;
        *(_OWORD *)(v217 + 120) = 0u;
        *(_OWORD *)(v217 + 136) = 0u;
        *(_OWORD *)(v217 + 152) = 0u;
        *(_OWORD *)(v217 + 168) = 0u;
        *(_OWORD *)(v217 + 184) = 0u;
        *(_OWORD *)(v217 + 200) = 0u;
        *(_OWORD *)(v217 + 216) = 0u;
        *(_OWORD *)(v217 + 232) = 0u;
        *(_QWORD *)(v217 + 248) = 0;
        *(_OWORD *)(v217 + 56) = 0u;
        v218 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v217 + 56), 0);
        if ((_DWORD)v218)
          geo::read_write_lock::logFailure(v218, (uint64_t)"initialization", v219);
        zone = malloc_create_zone(0, 0);
        *(_QWORD *)(v217 + 48) = zone;
        malloc_set_zone_name(zone, "GeoGL");
        *(_QWORD *)(v217 + 256) = os_log_create("com.apple.VectorKit", "Memory");
        ggl::Allocator::instance(void)::alloc = v217;
        v13 = a8;
        v182 = v215;
      }
    }
    v185 = ggl::Allocator::instance(void)::alloc;
    v183[15] = 0;
    v183[12] = 0;
    v183[13] = 0;
    v183[11] = v185;
    if ((v185 & 1) == 0)
    {
      v221 = v182;
      v182 = v221;
      if (v222)
      {
        v223 = operator new();
        *(_QWORD *)(v223 + 16) = 0xA3D02C1100000005;
        *(_QWORD *)(v223 + 24) = "GeoGL";
        *(_OWORD *)(v223 + 32) = xmmword_19FFB2DE0;
        *(_QWORD *)v223 = &off_1E42B5668;
        *(_QWORD *)(v223 + 8) = "GeoGL";
        *(_OWORD *)(v223 + 72) = 0u;
        *(_OWORD *)(v223 + 88) = 0u;
        *(_OWORD *)(v223 + 104) = 0u;
        *(_OWORD *)(v223 + 120) = 0u;
        *(_OWORD *)(v223 + 136) = 0u;
        *(_OWORD *)(v223 + 152) = 0u;
        *(_OWORD *)(v223 + 168) = 0u;
        *(_OWORD *)(v223 + 184) = 0u;
        *(_OWORD *)(v223 + 200) = 0u;
        *(_OWORD *)(v223 + 216) = 0u;
        *(_OWORD *)(v223 + 232) = 0u;
        *(_QWORD *)(v223 + 248) = 0;
        *(_OWORD *)(v223 + 56) = 0u;
        v224 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v223 + 56), 0);
        if ((_DWORD)v224)
          geo::read_write_lock::logFailure(v224, (uint64_t)"initialization", v225);
        v226 = malloc_create_zone(0, 0);
        *(_QWORD *)(v223 + 48) = v226;
        malloc_set_zone_name(v226, "GeoGL");
        *(_QWORD *)(v223 + 256) = os_log_create("com.apple.VectorKit", "Memory");
        ggl::Allocator::instance(void)::alloc = v223;
        v13 = a8;
        v182 = v221;
      }
    }
    v183[16] = ggl::Allocator::instance(void)::alloc;
    v183[17] = 0;
    v183[14] = v183 + 15;
    *v183 = &off_1E42BD6F8;
    v183[2] = &unk_1E42BD718;
    v254 = v252;
    v186 = v183;
    if (*((_QWORD *)&v252 + 1))
    {
      v187 = (unint64_t *)(*((_QWORD *)&v252 + 1) + 8);
      do
        v188 = __ldxr(v187);
      while (__stxr(v188 + 1, v187));
    }
    std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__assign_with_size[abi:nn180100]<std::shared_ptr<ggl::VertexData> const*,std::shared_ptr<ggl::VertexData> const*>(v182, (uint64_t *)&v254, (uint64_t *)&v255, 1uLL);
    v189 = (std::__shared_weak_count *)*((_QWORD *)&v254 + 1);
    if (*((_QWORD *)&v254 + 1))
    {
      v190 = (unint64_t *)(*((_QWORD *)&v254 + 1) + 8);
      do
        v191 = __ldaxr(v190);
      while (__stlxr(v191 - 1, v190));
      if (!v191)
      {
        ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
        std::__shared_weak_count::__release_weak(v189);
      }
    }
    do
      v192 = __ldxr(v178);
    while (__stxr(v192 + 1, v178));
    v193 = (std::__shared_weak_count *)v186[13];
    v186[12] = v177 + 1;
    v186[13] = v177;
    if (v193)
    {
      v194 = (unint64_t *)&v193->__shared_owners_;
      do
        v195 = __ldaxr(v194);
      while (__stlxr(v195 - 1, v194));
      if (!v195)
      {
        ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
        std::__shared_weak_count::__release_weak(v193);
      }
    }
    *v186 = &off_1E42B6CA8;
    v186[2] = &unk_1E42B6CC8;
    do
      v196 = __ldaxr(v178);
    while (__stlxr(v196 - 1, v178));
    if (!v196)
    {
      ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
      std::__shared_weak_count::__release_weak(v177);
    }
    v197 = (std::__shared_weak_count *)*((_QWORD *)&v252 + 1);
    if (*((_QWORD *)&v252 + 1))
    {
      v198 = (unint64_t *)(*((_QWORD *)&v252 + 1) + 8);
      do
        v199 = __ldaxr(v198);
      while (__stlxr(v199 - 1, v198));
      if (!v199)
      {
        ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
        std::__shared_weak_count::__release_weak(v197);
      }
    }
    v250 = v186;
    LOBYTE(v247) = 0;
    v200 = (__int128 *)operator new(0x30uLL);
    *(_QWORD *)v200 = &off_1E42D2D40;
    *((_QWORD *)v200 + 1) = a3;
    *((_QWORD *)v200 + 2) = &v250;
    *((_QWORD *)v200 + 3) = &v247;
    *((_QWORD *)v200 + 4) = v246;
    *((_QWORD *)v200 + 5) = &v251;
    v256 = v200;
    v248 = 0;
    v249 = 0;
    (*(void (**)(_QWORD, __int128 *, _QWORD **))(*(_QWORD *)*a4 + 16))(*a4, &v254, &v248);
    v201 = v249;
    if (v249)
    {
      v202 = (unint64_t *)&v249->__shared_owners_;
      do
        v203 = __ldaxr(v202);
      while (__stlxr(v203 - 1, v202));
      if (!v203)
      {
        ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
        std::__shared_weak_count::__release_weak(v201);
      }
    }
    v204 = v256;
    if (v256 == &v254)
    {
      v205 = 4;
      v204 = &v254;
    }
    else
    {
      if (!v256)
      {
LABEL_233:
        v47 = v250;
        if ((_BYTE)v247 && v250)
        {
          (*(void (**)(_QWORD *))(*v250 + 8))(v250);
          v47 = 0;
        }
        goto LABEL_37;
      }
      v205 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v204 + 8 * v205))();
    goto LABEL_233;
  }
LABEL_37:
  v48 = (std::__shared_weak_count *)a5[1];
  v243 = *a5;
  v244 = v48;
  if (v48)
  {
    v49 = (unint64_t *)&v48->__shared_owners_;
    do
      v50 = __ldxr(v49);
    while (__stxr(v50 + 1, v49));
  }
  v51 = (std::__shared_weak_count *)a6[1];
  v241 = *a6;
  v242 = v51;
  if (v51)
  {
    v52 = (unint64_t *)&v51->__shared_owners_;
    do
      v53 = __ldxr(v52);
    while (__stxr(v53 + 1, v52));
  }
  v54 = v13 == 1;
  if (v13 == 2)
    v54 = 2;
  LOBYTE(v254) = v54;
  v240 = *a10;
  md::PolygonOverlayMeshBuilder::buildStrokeRibbon(&v252, *a3, a3[1], a4, (uint64_t)&v243, (uint64_t)&v241, a7, &v254, a9, &v240);
  v55 = v242;
  if (v242)
  {
    v56 = (unint64_t *)&v242->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  v58 = v244;
  if (v244)
  {
    v59 = (unint64_t *)&v244->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  v61 = *(uint64_t **)(v252 + 32);
  if (*(uint64_t **)(v252 + 40) == v61)
  {
    v229 = 0;
  }
  else
  {
    v62 = *v61;
    v63 = (_QWORD *)operator new();
    ggl::Mesh::Mesh((uint64_t)v63, v62);
    *v63 = &off_1E42BAF50;
    v229 = v63;
    v63[2] = &unk_1E42BAF70;
  }
  v230 = v47;
  md::PolygonOverlayMeshBuilder::buildVectorOverlayMesh((uint64_t *)&v248, a3, a4);
  v254 = 0uLL;
  v255 = 0;
  v64 = *a3;
  v65 = a3[1];
  if (v65 != *a3)
  {
    v66 = (char *)v65 - (char *)*a3;
    v67 = 0x2E8BA2E8BA2E8BA3 * (v66 >> 3);
    if (v67 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v68 = (char *)operator new(0x5D1745D1745D1748 * (v66 >> 3));
    *(_QWORD *)&v254 = v68;
    *((_QWORD *)&v254 + 1) = v68;
    v255 = (unint64_t)&v68[24 * v67];
    v234 = v65;
    while (1)
    {
      v70 = v64[1];
      v71 = v70 - *v64;
      if (v70 == *v64)
      {
        v73 = 0;
        v237 = 0u;
        goto LABEL_101;
      }
      if (v71 < 0)
        abort();
      v72 = operator new((unint64_t)v71 >> 1);
      v73 = (char *)&v72[2 * (v71 >> 3)];
      v237 = vdupq_n_s64((unint64_t)v72);
      v74 = *v64;
      if (v64[1] != *v64)
        break;
LABEL_101:
      if ((unint64_t)v68 < v255)
      {
        *(int64x2_t *)v68 = v237;
        *((_QWORD *)v68 + 2) = v73;
        v69 = v68 + 24;
      }
      else
      {
        v95 = (char *)v254;
        v96 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v68[-v254] >> 3);
        v97 = v96 + 1;
        if (v96 + 1 > 0xAAAAAAAAAAAAAAALL)
          abort();
        if (0x5555555555555556 * ((uint64_t)(v255 - v254) >> 3) > v97)
          v97 = 0x5555555555555556 * ((uint64_t)(v255 - v254) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v255 - v254) >> 3) >= 0x555555555555555)
          v98 = 0xAAAAAAAAAAAAAAALL;
        else
          v98 = v97;
        if (v98)
        {
          if (v98 > 0xAAAAAAAAAAAAAAALL)
LABEL_237:
            std::__throw_bad_array_new_length[abi:nn180100]();
          v99 = (char *)operator new(24 * v98);
        }
        else
        {
          v99 = 0;
        }
        v100 = (int64x2_t *)&v99[24 * v96];
        v101 = (unint64_t)&v99[24 * v98];
        *v100 = v237;
        v100[1].i64[0] = (uint64_t)v73;
        v69 = &v100[1].i8[8];
        if (v68 == v95)
        {
          *(_QWORD *)&v254 = &v99[24 * v96];
          *((_QWORD *)&v254 + 1) = (char *)v100 + 24;
          v255 = v101;
        }
        else
        {
          do
          {
            v102 = v100;
            v100[-1].i64[0] = 0;
            v100[-1].i64[1] = 0;
            v103 = *(int64x2_t *)(v68 - 24);
            v68 -= 24;
            *(int64x2_t *)((char *)v100 - 24) = v103;
            v100 = (int64x2_t *)((char *)v100 - 24);
            v102[-1].i64[1] = *((_QWORD *)v68 + 2);
            *(_QWORD *)v68 = 0;
            *((_QWORD *)v68 + 1) = 0;
            *((_QWORD *)v68 + 2) = 0;
          }
          while (v68 != v95);
          v104 = (char *)*((_QWORD *)&v254 + 1);
          v68 = (char *)v254;
          *(_QWORD *)&v254 = v100;
          *((_QWORD *)&v254 + 1) = v69;
          v255 = v101;
          if (v104 != v68)
          {
            v105 = v104;
            do
            {
              v107 = (void *)*((_QWORD *)v105 - 3);
              v105 -= 24;
              v106 = v107;
              if (v107)
              {
                *((_QWORD *)v104 - 2) = v106;
                operator delete(v106);
              }
              v104 = v105;
            }
            while (v105 != v68);
          }
        }
        if (v68)
          operator delete(v68);
      }
      *((_QWORD *)&v254 + 1) = v69;
      v64 += 11;
      v68 = v69;
      if (v64 == v65)
        goto LABEL_122;
    }
    v75 = 0;
    while (1)
    {
      v78 = (float *)(v74 + 8 * v75);
      v79 = (int)(float)(*v78 * 65535.0);
      v80 = (int)(float)(v78[1] * 65535.0);
      if (v72 >= (_WORD *)v73)
        break;
      *v72 = v79;
      v72[1] = v80;
      v76 = v72 + 2;
LABEL_68:
      v77.i64[0] = v237.i64[0];
      v77.i64[1] = (uint64_t)v76;
      v237 = v77;
      ++v75;
      v74 = *v64;
      v72 = v76;
      if (v75 >= (v64[1] - *v64) >> 3)
      {
        v68 = (char *)*((_QWORD *)&v254 + 1);
        v65 = v234;
        goto LABEL_101;
      }
    }
    v81 = (void *)v237.i64[0];
    v82 = ((uint64_t)v72 - v237.i64[0]) >> 2;
    v83 = v82 + 1;
    if ((unint64_t)(v82 + 1) >> 62)
      abort();
    if ((uint64_t)&v73[-v237.i64[0]] >> 1 > v83)
      v83 = (uint64_t)&v73[-v237.i64[0]] >> 1;
    if ((unint64_t)&v73[-v237.i64[0]] >= 0x7FFFFFFFFFFFFFFCLL)
      v84 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v84 = v83;
    if (v84)
    {
      if (v84 >> 62)
        goto LABEL_237;
      v85 = (char *)operator new(4 * v84);
    }
    else
    {
      v85 = 0;
    }
    v86 = &v85[4 * v82];
    v73 = &v85[4 * v84];
    *(_WORD *)v86 = v79;
    *((_WORD *)v86 + 1) = v80;
    v76 = v86 + 4;
    if (v72 == (_WORD *)v237.i64[0])
    {
      v237.i64[0] = (uint64_t)&v85[4 * v82];
      v81 = v72;
LABEL_87:
      operator delete(v81);
      goto LABEL_68;
    }
    v87 = (unint64_t)v72 - v237.i64[0] - 4;
    if (v87 >= 0xBC)
    {
      if ((char *)v72 + (_QWORD)v85 - v237.i64[0] - (v87 & 0xFFFFFFFFFFFFFFFCLL) - 4 > (char *)v72
                                                                                      + (_QWORD)v85
                                                                                      - v237.i64[0]
                                                                                      - 4)
      {
        v88 = v72;
      }
      else if ((_WORD *)((char *)v72 - (v87 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v72 - 2)
      {
        v88 = v72;
      }
      else if (v237.i64[0] - (uint64_t)v85 >= 0x20uLL)
      {
        v90 = (v87 >> 2) + 1;
        v88 = &v72[-2 * (v90 & 0x7FFFFFFFFFFFFFF8)];
        v91 = &v85[4 * v82 - 16];
        v92 = (__int128 *)(v72 - 8);
        v93 = v90 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v94 = *v92;
          *((_OWORD *)v91 - 1) = *(v92 - 1);
          *(_OWORD *)v91 = v94;
          v91 -= 32;
          v92 -= 2;
          v93 -= 8;
        }
        while (v93);
        v86 -= 4 * (v90 & 0x7FFFFFFFFFFFFFF8);
        if (v90 == (v90 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_84:
          v237.i64[0] = (uint64_t)v86;
          if (!v81)
            goto LABEL_68;
          goto LABEL_87;
        }
      }
      else
      {
        v88 = v72;
      }
    }
    else
    {
      v88 = v72;
    }
    do
    {
      v89 = *((_DWORD *)v88 - 1);
      v88 -= 2;
      *((_DWORD *)v86 - 1) = v89;
      v86 -= 4;
    }
    while (v88 != (_WORD *)v237.i64[0]);
    goto LABEL_84;
  }
LABEL_122:
  v108 = *(_BYTE *)(a2 + 1);
  v109 = operator new();
  v110 = v109;
  v112 = *a5;
  v111 = (std::__shared_weak_count *)a5[1];
  v239 = v111;
  if (v111)
  {
    v113 = (unint64_t *)&v111->__shared_owners_;
    do
      v114 = __ldxr(v113);
    while (__stxr(v114 + 1, v113));
  }
  v115 = (double)(1 << v108);
  v116 = *a12;
  *(_QWORD *)a12 = 0;
  *((_QWORD *)a12 + 1) = 0;
  v238 = *a13;
  v235 = a13[1];
  v117 = *((unsigned __int8 *)a13 + 32);
  *(_WORD *)v109 = *(_WORD *)a2;
  *(_QWORD *)(v109 + 4) = *(_QWORD *)(a2 + 4);
  *(_QWORD *)(v109 + 24) = v46;
  *(_QWORD *)(v109 + 32) = v230;
  v118 = v252;
  *(_QWORD *)&v252 = 0;
  v120 = *a7;
  v119 = a7[1];
  *(_QWORD *)(v109 + 40) = v118;
  *(_QWORD *)(v109 + 48) = v120;
  v121 = (std::__shared_weak_count *)*((_QWORD *)&v116 + 1);
  *(_QWORD *)(v109 + 56) = v119;
  if (v119)
  {
    v122 = (unint64_t *)(v119 + 8);
    do
      v123 = __ldxr(v122);
    while (__stxr(v123 + 1, v122));
  }
  *(_OWORD *)(v109 + 64) = v116;
  v124 = 1.0 / v115;
  if (*((_QWORD *)&v116 + 1))
  {
    v125 = (unint64_t *)(*((_QWORD *)&v116 + 1) + 8);
    do
      v126 = __ldxr(v125);
    while (__stxr(v126 + 1, v125));
  }
  *(_QWORD *)(v109 + 88) = 0;
  *(double *)(v109 + 96) = v124;
  *(_QWORD *)(v109 + 104) = v112;
  *(_QWORD *)(v109 + 112) = v111;
  if (v111)
  {
    v127 = (unint64_t *)&v111->__shared_owners_;
    do
      v128 = __ldxr(v127);
    while (__stxr(v128 + 1, v127));
  }
  v129 = a6[1];
  *(_QWORD *)(v109 + 120) = *a6;
  *(_QWORD *)(v109 + 128) = v129;
  if (v129)
  {
    v130 = (unint64_t *)(v129 + 8);
    do
      v131 = __ldxr(v130);
    while (__stxr(v131 + 1, v130));
  }
  *(_OWORD *)(v109 + 136) = 0u;
  v132 = (uint64_t *)(v109 + 136);
  *(_OWORD *)(v109 + 216) = 0u;
  *(_OWORD *)(v109 + 232) = 0u;
  *(_OWORD *)(v109 + 184) = 0u;
  *(_OWORD *)(v109 + 200) = 0u;
  *(_OWORD *)(v109 + 152) = 0u;
  *(_OWORD *)(v109 + 168) = 0u;
  v133 = (uint64_t)v248;
  v248 = 0;
  *(_QWORD *)(v109 + 264) = v133;
  *(_QWORD *)(v109 + 272) = v229;
  *(_OWORD *)(v109 + 280) = v254;
  v134 = v255;
  v254 = 0uLL;
  v255 = 0;
  v136 = *a11;
  v135 = a11[1];
  *(_QWORD *)(v109 + 296) = v134;
  *(_QWORD *)(v109 + 304) = v136;
  *(_QWORD *)(v109 + 312) = v135;
  if (v135)
  {
    v137 = (unint64_t *)(v135 + 8);
    do
      v138 = __ldxr(v137);
    while (__stxr(v138 + 1, v137));
  }
  v139 = operator new();
  *(_QWORD *)v139 = &off_1E42B59B0;
  *(_QWORD *)(v139 + 48) = 0;
  *(_QWORD *)(v139 + 24) = 0;
  *(_QWORD *)(v139 + 32) = 0;
  *(_QWORD *)(v139 + 16) = "PolygonOverlayFill";
  *(_DWORD *)(v139 + 40) = 0;
  *(_DWORD *)(v139 + 56) = 1065353216;
  *(_OWORD *)(v139 + 64) = 0u;
  *(_OWORD *)(v139 + 80) = 0u;
  *(int64x2_t *)(v139 + 96) = vdupq_n_s64(1uLL);
  *(_QWORD *)(v139 + 112) = 0;
  v140 = *v132;
  *v132 = v139;
  if (v140)
    (*(void (**)(uint64_t))(*(_QWORD *)v140 + 8))(v140);
  v141 = operator new();
  *(_QWORD *)v141 = &off_1E42B59B0;
  *(_QWORD *)(v141 + 48) = 0;
  *(_QWORD *)(v141 + 24) = 0;
  *(_QWORD *)(v141 + 32) = 0;
  *(_QWORD *)(v141 + 16) = "PolygonOverlayFillAntialias";
  *(_DWORD *)(v141 + 40) = 0;
  *(_DWORD *)(v141 + 56) = 1065353216;
  *(_OWORD *)(v141 + 64) = 0u;
  *(_OWORD *)(v141 + 80) = 0u;
  *(int64x2_t *)(v141 + 96) = vdupq_n_s64(1uLL);
  *(_QWORD *)(v141 + 112) = 0;
  v142 = *(_QWORD *)(v110 + 144);
  *(_QWORD *)(v110 + 144) = v141;
  if (v142)
    (*(void (**)(uint64_t))(*(_QWORD *)v142 + 8))(v142);
  v143 = operator new();
  *(_QWORD *)v143 = &off_1E42B59B0;
  *(_QWORD *)(v143 + 48) = 0;
  *(_QWORD *)(v143 + 24) = 0;
  *(_QWORD *)(v143 + 32) = 0;
  *(_QWORD *)(v143 + 16) = "PolygonOverlayFillOcclusionBlending";
  *(_DWORD *)(v143 + 40) = 0;
  *(_DWORD *)(v143 + 56) = 1065353216;
  *(_OWORD *)(v143 + 64) = 0u;
  *(_OWORD *)(v143 + 80) = 0u;
  *(int64x2_t *)(v143 + 96) = vdupq_n_s64(1uLL);
  *(_QWORD *)(v143 + 112) = 0;
  v144 = *(_QWORD *)(v110 + 232);
  *(_QWORD *)(v110 + 232) = v143;
  if (v144)
    (*(void (**)(uint64_t))(*(_QWORD *)v144 + 8))(v144);
  if (v117)
  {
    *(_OWORD *)(v110 + 320) = v238;
    *(_OWORD *)(v110 + 336) = v235;
  }
  *a1 = v110;
  if (v121)
  {
    v145 = (unint64_t *)&v121->__shared_owners_;
    do
      v146 = __ldaxr(v145);
    while (__stlxr(v146 - 1, v145));
    if (!v146)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
  if (v239)
  {
    v147 = (unint64_t *)&v239->__shared_owners_;
    do
      v148 = __ldaxr(v147);
    while (__stlxr(v148 - 1, v147));
    if (!v148)
    {
      ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
      std::__shared_weak_count::__release_weak(v239);
    }
  }
  v149 = (char *)v254;
  if ((_QWORD)v254)
  {
    v150 = (char *)*((_QWORD *)&v254 + 1);
    if (*((_QWORD *)&v254 + 1) != (_QWORD)v254)
    {
      v151 = (char *)*((_QWORD *)&v254 + 1);
      do
      {
        v153 = (void *)*((_QWORD *)v151 - 3);
        v151 -= 24;
        v152 = v153;
        if (v153)
        {
          *((_QWORD *)v150 - 2) = v152;
          operator delete(v152);
        }
        v150 = v151;
      }
      while (v151 != v149);
      v149 = (char *)v254;
    }
    operator delete(v149);
  }
  v154 = (uint64_t)v248;
  v248 = 0;
  if (v154)
  {
    v155 = *(std::__shared_weak_count **)(v154 + 72);
    if (v155)
    {
      v156 = (unint64_t *)&v155->__shared_owners_;
      do
        v157 = __ldaxr(v156);
      while (__stlxr(v157 - 1, v156));
      if (!v157)
      {
        ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
        std::__shared_weak_count::__release_weak(v155);
      }
    }
    v158 = *(std::__shared_weak_count **)(v154 + 8);
    if (v158)
    {
      v159 = (unint64_t *)&v158->__shared_owners_;
      do
        v160 = __ldaxr(v159);
      while (__stlxr(v160 - 1, v159));
      if (!v160)
      {
        ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
        std::__shared_weak_count::__release_weak(v158);
      }
    }
    MEMORY[0x1A1AF4E00](v154, 0x1020C408635837CLL);
  }
  result = v252;
  *(_QWORD *)&v252 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_19FA53710(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v3 - 176);
  MEMORY[0x1A1AF4E00](v1, 0x10F1C406E726BBALL);
  if (!v2)
    _Unwind_Resume(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  _Unwind_Resume(a1);
}

void md::PolygonOverlayMeshBuilder::buildStrokeRibbon(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t *a7, _BYTE *a8, float a9, int *a10)
{
  uint64_t *v11;
  _QWORD *v12;
  _QWORD *v13;
  int *v14;
  char *v15;
  char *v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  unint64_t *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 v34;
  uint64_t v35;
  char v36;
  unsigned __int8 v37;
  _DWORD *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  _DWORD *v43;
  _DWORD *v44;
  unint64_t v45;
  _DWORD *v46;
  _DWORD *v47;
  std::__shared_weak_count *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t *v54;
  _QWORD *v55;
  unint64_t *v56;
  unint64_t v57;
  void (***v58)(_QWORD);
  unsigned __int8 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  _QWORD *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  void *v72;
  void *__p[2];
  void *v81[2];
  int v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count *v85;
  char v86;
  void (***v87)(_QWORD);
  std::__shared_weak_count *v88;
  std::__shared_weak_count *v89;
  unint64_t v90;
  unint64_t v91;
  _QWORD v92[3];
  _QWORD *v93;
  std::__shared_weak_count **v94;
  _BYTE *v95;
  float v96;
  int v97;
  uint64_t v98;

  v98 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v81 = 0u;
  v82 = 1065353216;
  if (a2 != a3)
  {
    v11 = a7;
    v12 = a3;
    v13 = a2;
    v14 = a10;
    do
    {
      v15 = (char *)v13[3];
      v16 = (char *)v13[4];
      if (v16 != v15)
      {
        v17 = *v14;
        v19 = *(_QWORD *)v15;
        v18 = *((_QWORD *)v15 + 1);
        v90 = v18;
        v91 = v19;
        v20 = *v11;
        if (*v11)
        {
          v22 = *(std::__shared_weak_count **)(v20 + 32);
          v21 = *(std::__shared_weak_count **)(v20 + 40);
          v88 = v22;
          v89 = v21;
          if (v21)
          {
            p_shared_owners = (unint64_t *)&v21->__shared_owners_;
            do
              v24 = __ldxr(p_shared_owners);
            while (__stxr(v24 + 1, p_shared_owners));
            v15 = (char *)v13[3];
            v16 = (char *)v13[4];
          }
        }
        else
        {
          v88 = 0;
          v89 = 0;
        }
        v92[0] = __p;
        v92[1] = &v91;
        v92[2] = &v90;
        v93 = v13;
        v94 = &v88;
        v95 = a8;
        v96 = a9;
        v97 = v17;
        if ((unint64_t)(v16 - v15) >= 0x11)
        {
          v25 = 1;
          do
          {
            v26 = &v15[16 * v25];
            v27 = (unint64_t *)(v26 + 8);
            if (*((_QWORD *)v26 + 1) >= *(_QWORD *)v26)
            {
              if (*(_QWORD *)v26 != v18)
              {
                md::PolygonOverlayMeshBuilder::addStrokeRibbonBatches(md::PolygonOverlayMeshBuilder::MeshInfo const&,std::unordered_map<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>> &,std::shared_ptr<md::PolygonOverlayRenderable::Style> const&,md::Ribbons::StandardModeRibbon::JoinStyle const&,float,geo::Unit<geo::RadianUnitDescription,float>)::$_0::operator()((uint64_t)v92);
                v91 = *(_QWORD *)v26;
              }
            }
            else
            {
              md::PolygonOverlayMeshBuilder::addStrokeRibbonBatches(md::PolygonOverlayMeshBuilder::MeshInfo const&,std::unordered_map<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>> &,std::shared_ptr<md::PolygonOverlayRenderable::Style> const&,md::Ribbons::StandardModeRibbon::JoinStyle const&,float,geo::Unit<geo::RadianUnitDescription,float>)::$_0::operator()((uint64_t)v92);
              v28 = (_QWORD *)v13[3];
              v29 = &v28[2 * v25];
              v31 = *(v29 - 1);
              v30 = v29 - 1;
              v32 = 2;
              if (v31 == *(_QWORD *)v26)
                v32 = 3;
              if (*v27 == *v28)
                v33 = v32 + 1;
              else
                v33 = v32;
              {
                v61 = operator new();
                mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v61, "VectorKitLabels", 0x5ED09DD50000000FLL);
              }
              v35 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                         + 16))(mdm::Allocator::instance(void)::alloc, 136, 8);
              v36 = *a8;
              *(_OWORD *)(v35 + 49) = 0u;
              *(_OWORD *)(v35 + 40) = 0u;
              *(_OWORD *)(v35 + 24) = 0u;
              *(_OWORD *)(v35 + 8) = 0u;
              *(_QWORD *)(v35 + 56) = v33;
              *(_QWORD *)v35 = off_1E42AF568;
              *(_QWORD *)(v35 + 72) = 0;
              *(_QWORD *)(v35 + 80) = 0;
              *(_QWORD *)(v35 + 88) = v33;
              {
                v62 = operator new();
                mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v62, "VectorKitLabels", 0x5ED09DD50000000FLL);
              }
              v38 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                   + 16))(mdm::Allocator::instance(void)::alloc, 8 * v33, 8);
              v39 = 0;
              *(_QWORD *)(v35 + 72) = v38;
              *(_BYTE *)(v35 + 64) = 1;
              *(_QWORD *)v35 = off_1E429B958;
              *(_QWORD *)(v35 + 104) = 0;
              *(_QWORD *)(v35 + 112) = 0;
              *(_BYTE *)(v35 + 120) = 0;
              *(_BYTE *)(v35 + 121) = v36;
              *(float *)(v35 + 124) = a9;
              *(_DWORD *)(v35 + 128) = v17;
              v87 = (void (***)(_QWORD))v35;
              *(_WORD *)(v35 + 96) = 0;
              v40 = *(_QWORD *)v26;
              v41 = *v13;
              if (*v30 == *(_QWORD *)v26)
              {
                v42 = (_DWORD *)(v41 + 8 * *(v30 - 1));
                *v38 = *v42;
                v38[1] = v42[1];
                v39 = 1;
              }
              v43 = (_DWORD *)(v41 + 8 * v40);
              v44 = &v38[2 * v39];
              *v44 = *v43;
              v44[1] = v43[1];
              v45 = *v27;
              v46 = (_DWORD *)(v41 + 8 * *v27);
              v44[2] = *v46;
              v44[3] = v46[1];
              if (v45 == *v28)
              {
                v47 = (_DWORD *)(v41 + 8 * v28[1]);
                v44[4] = *v47;
                v44[5] = v47[1];
              }
              v84 = 0;
              v85 = 0;
              v86 = 0;
              LODWORD(v83) = 0;
              v48 = v88;
              v49 = v89;
              if (v89)
              {
                v50 = (unint64_t *)&v89->__shared_owners_;
                do
                  v51 = __ldxr(v50);
                while (__stxr(v51 + 1, v50));
                v84 = v48;
                v85 = v49;
              }
              else
              {
                v84 = v88;
              }
              v52 = std::__hash_table<std::__hash_value_type<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::PolylineOverlayBatchKey,std::__hash_value_type<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,std::hash<md::PolylineOverlayBatchKey>,std::equal_to<md::PolylineOverlayBatchKey>,true>,std::__unordered_map_equal<md::PolylineOverlayBatchKey,std::__hash_value_type<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,std::equal_to<md::PolylineOverlayBatchKey>,std::hash<md::PolylineOverlayBatchKey>,true>,std::allocator<std::__hash_value_type<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>>>::__emplace_unique_key_args<md::PolylineOverlayBatchKey,std::piecewise_construct_t const&,std::tuple<md::PolylineOverlayBatchKey const&>,std::tuple<>>((uint64_t *)__p, 0, 0, (uint64_t)&v83);
              v53 = v52;
              v54 = (uint64_t *)v52[7];
              if ((unint64_t)v54 >= v52[8])
              {
                v55 = std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>::__push_back_slow_path<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>>((uint64_t)(v52 + 6), (uint64_t *)&v87);
              }
              else
              {
                if (v54)
                {
                  v87 = 0;
                  *v54 = v35;
                }
                v55 = v54 + 1;
              }
              v53[7] = v55;
              v90 = *v27;
              v91 = v90;
              if (v49)
              {
                v56 = (unint64_t *)&v49->__shared_owners_;
                do
                  v57 = __ldaxr(v56);
                while (__stlxr(v57 - 1, v56));
                if (!v57)
                {
                  ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                  std::__shared_weak_count::__release_weak(v49);
                }
              }
              v58 = v87;
              v87 = 0;
              if (v58)
              {
                (**v58)(v58);
                {
                  v60 = operator new();
                  mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v60, "VectorKitLabels", 0x5ED09DD50000000FLL);
                }
                (*(void (**)(uint64_t, void (***)(_QWORD), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                        + 40))(mdm::Allocator::instance(void)::alloc, v58, 136);
              }
            }
            v18 = *v27;
            v90 = *v27;
            ++v25;
            v15 = (char *)v13[3];
          }
          while (v25 < (uint64_t)(v13[4] - (_QWORD)v15) >> 4);
          v19 = v91;
          v12 = a3;
          v11 = a7;
          v14 = a10;
        }
        if (v18 > v19)
          md::PolygonOverlayMeshBuilder::addStrokeRibbonBatches(md::PolygonOverlayMeshBuilder::MeshInfo const&,std::unordered_map<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>> &,std::shared_ptr<md::PolygonOverlayRenderable::Style> const&,md::Ribbons::StandardModeRibbon::JoinStyle const&,float,geo::Unit<geo::RadianUnitDescription,float>)::$_0::operator()((uint64_t)v92);
        v63 = v89;
        if (v89)
        {
          v64 = (unint64_t *)&v89->__shared_owners_;
          do
            v65 = __ldaxr(v64);
          while (__stlxr(v65 - 1, v64));
          if (!v65)
          {
            ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
            std::__shared_weak_count::__release_weak(v63);
          }
        }
      }
      v13 += 11;
    }
    while (v13 != v12);
  }
  *a1 = 0;
  v66 = operator new(0x28uLL);
  *v66 = &off_1E42D2CF8;
  v66[1] = __p;
  v66[2] = a1;
  v66[3] = a5;
  v66[4] = a6;
  v93 = v66;
  v83 = 0;
  v84 = 0;
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a4 + 16))(*a4, v92, &v83);
  v67 = v84;
  if (v84)
  {
    v68 = (unint64_t *)&v84->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = v93;
  if (v93 == v92)
  {
    v71 = 4;
    v70 = v92;
  }
  else
  {
    if (!v93)
      goto LABEL_70;
    v71 = 5;
  }
  (*(void (**)(void))(*v70 + 8 * v71))();
LABEL_70:
  std::__hash_table<std::__hash_value_type<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::PolylineOverlayBatchKey,std::__hash_value_type<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,std::hash<md::PolylineOverlayBatchKey>,std::equal_to<md::PolylineOverlayBatchKey>,true>,std::__unordered_map_equal<md::PolylineOverlayBatchKey,std::__hash_value_type<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,std::equal_to<md::PolylineOverlayBatchKey>,std::hash<md::PolylineOverlayBatchKey>,true>,std::allocator<std::__hash_value_type<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>>>::__deallocate_node((_QWORD *)v81[0]);
  v72 = __p[0];
  __p[0] = 0;
  if (v72)
    operator delete(v72);
}

void sub_19FA542D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  _QWORD *v9;
  va_list va;

  va_start(va, a9);
  *v9 = 0;
  std::unordered_map<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>::~unordered_map[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void md::PolygonOverlayMeshBuilder::buildVectorOverlayMesh(uint64_t *a1, uint64_t **a2, _QWORD *a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t (***v33)();
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  char v54;
  _QWORD *v55;
  std::__shared_weak_count *v56;
  std::__shared_weak_count *v57;
  std::__shared_weak_count *v58;
  _QWORD *v59;
  std::__shared_weak_count *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t (**v63)();
  std::__shared_weak_count *v64;
  uint64_t (***v65)();
  uint64_t (**v66)();
  std::__shared_weak_count *v67;
  uint64_t *v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v61 = 0;
  v62 = 0;
  v4 = *a2;
  v5 = a2[1];
  if (*a2 == v5)
    goto LABEL_33;
  v7 = 0;
  v8 = 0;
  v9 = *a2;
  do
  {
    v66 = &off_1E42D5BF0;
    v67 = (std::__shared_weak_count *)v4;
    v68 = (uint64_t *)&v66;
    v10 = (uint64_t *)*v9;
    v11 = v9[1] - *v9;
    v65 = &v63;
    v63 = &off_1E42D5BF0;
    v64 = (std::__shared_weak_count *)v4;
    if ((unint64_t)v11 > 0x17)
    {
      v12 = v11 >> 3;
      v13 = *v10;
      v14 = v10[v12 - 1];
      if (v12 != 1 || v13 != v14)
      {
        v7 += v12;
        v62 = v7;
        v8 += geo::triangulatedIndexCount<float>(v9);
        v61 = v8;
      }
    }
    v9 += 11;
    v4 += 11;
  }
  while (v9 != v5);
  if (!v7 || !v8)
  {
LABEL_33:
    *a1 = 0;
    return;
  }
  v16 = (std::__shared_weak_count *)operator new(0xF8uLL);
  v16->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v16->__shared_owners_;
  v16->__shared_weak_owners_ = 0;
  v16->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0608;
  ggl::BufferData::BufferData((uint64_t)&v16[1], 8, 0, 0, 6, v7);
  v16[9].__shared_weak_owners_ = (uint64_t)"OverlayVertexData";
  v16[10].__vftable = (std::__shared_weak_count_vtbl *)&ggl::DaVinci::texturedCompressedVboReflection;
  v16[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8320;
  v16[9].__shared_owners_ = (uint64_t)&unk_1E42B8340;
  v59 = &v16[1].__vftable;
  v60 = v16;
  v18 = (std::__shared_weak_count *)operator new(0xF8uLL);
  v18->__shared_owners_ = 0;
  v19 = (unint64_t *)&v18->__shared_owners_;
  v18->__shared_weak_owners_ = 0;
  v18->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF1E8;
  ggl::BufferData::BufferData((uint64_t)&v18[1], 2, 1, 0, 6, v8);
  LODWORD(v18[10].__vftable) = 0;
  v18[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6B88;
  v18[1].__shared_owners_ = 2;
  v18[9].__shared_owners_ = (uint64_t)&unk_1E42B6BA8;
  v18[9].__shared_weak_owners_ = (uint64_t)"OverlayIndexData";
  v57 = v18 + 1;
  v58 = v18;
  v20 = (std::__shared_weak_count *)operator new(0xA8uLL);
  v21 = v20;
  v20->__shared_owners_ = 0;
  v20->__shared_weak_owners_ = 0;
  v20->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4A80;
  v22 = &v20[1].__vftable;
  v66 = (uint64_t (**)())&v16[1];
  v67 = v16;
  do
    v23 = __ldxr(p_shared_owners);
  while (__stxr(v23 + 1, p_shared_owners));
  v63 = (uint64_t (**)())&v18[1];
  v64 = v18;
  do
    v24 = __ldxr(v19);
  while (__stxr(v24 + 1, v19));
  ggl::DaVinci::TexturedCompressedMesh::TexturedCompressedMesh((uint64_t)&v20[1], (uint64_t)"OverlayMesh", (uint64_t *)&v66, (uint64_t *)&v63);
  do
    v25 = __ldaxr(v19);
  while (__stlxr(v25 - 1, v19));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  v26 = v67;
  if (v67)
  {
    v27 = (unint64_t *)&v67->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v55 = v22;
  v56 = v21;
  v54 = 0;
  v29 = (uint64_t *)operator new(0x30uLL);
  *v29 = (uint64_t)&off_1E42D2D88;
  v29[1] = (uint64_t)a2;
  v29[2] = (uint64_t)&v55;
  v29[3] = (uint64_t)&v62;
  v29[4] = (uint64_t)&v61;
  v29[5] = (uint64_t)&v54;
  v68 = v29;
  v63 = 0;
  v64 = 0;
  (*(void (**)(_QWORD, uint64_t (***)(), uint64_t (***)()))(*(_QWORD *)*a3 + 16))(*a3, &v66, &v63);
  v30 = v64;
  if (v64)
  {
    v31 = (unint64_t *)&v64->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = (uint64_t (***)())v68;
  if (v68 == (uint64_t *)&v66)
  {
    v34 = 4;
    v33 = &v66;
    goto LABEL_36;
  }
  if (v68)
  {
    v34 = 5;
LABEL_36:
    (*v33)[v34]();
  }
  if (v54)
  {
    *a1 = 0;
  }
  else
  {
    v44 = v61;
    v45 = operator new();
    v46 = v55;
    v47 = v56;
    if (v56)
    {
      v48 = (unint64_t *)&v56->__shared_owners_;
      do
        v49 = __ldxr(v48);
      while (__stxr(v49 + 1, v48));
      *(_QWORD *)v45 = v46;
      *(_QWORD *)(v45 + 8) = v47;
      do
        v50 = __ldxr(v48);
      while (__stxr(v50 + 1, v48));
    }
    else
    {
      *(_QWORD *)v45 = v55;
      *(_QWORD *)(v45 + 8) = 0;
    }
    *(_QWORD *)(v45 + 16) = 0;
    *(_QWORD *)(v45 + 24) = v44;
    *(_BYTE *)(v45 + 32) = 3;
    *(_OWORD *)(v45 + 36) = xmmword_19FFB34C0;
    *(_QWORD *)(v45 + 52) = 1065353216;
    *(_WORD *)(v45 + 60) = 0;
    *(_QWORD *)(v45 + 64) = 0;
    *(_QWORD *)(v45 + 72) = 0;
    *a1 = v45;
    if (v47)
    {
      v51 = (unint64_t *)&v47->__shared_owners_;
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
  }
  v35 = v56;
  if (v56)
  {
    v36 = (unint64_t *)&v56->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = v58;
  if (v58)
  {
    v39 = (unint64_t *)&v58->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v41 = v60;
  if (v60)
  {
    v42 = (unint64_t *)&v60->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
}

void sub_19FA54810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<md::Mesh>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 72);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v6 = *(std::__shared_weak_count **)(v2 + 8);
    if (v6)
    {
      v7 = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    MEMORY[0x1A1AF4E00](v2, 0x1020C408635837CLL);
  }
  return a1;
}

uint64_t geo::triangulatedIndexCount<float>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;
  _QWORD v19[3];
  _QWORD *v20;
  _QWORD v21[3];
  _QWORD *v22;
  _QWORD v23[3];
  _QWORD *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v21[0] = &off_1E42D5DE8;
  v21[1] = a1;
  v22 = v21;
  v2 = *a1;
  v1 = a1[1];
  v20 = v19;
  v19[0] = &off_1E42D5DE8;
  v19[1] = a1;
  v3 = v1 - v2;
  if ((unint64_t)(v1 - v2) < 0x18)
  {
    v4 = 0;
    goto LABEL_13;
  }
  v24 = v23;
  std::__function::__func<unsigned long geo::triangulatedIndexCount<float>(std::vector<gm::Matrix<float,2,1>> const&)::{lambda(unsigned long)#1},std::allocator<unsigned long geo::triangulatedIndexCount<float>(std::vector<gm::Matrix<float,2,1>> const&)::{lambda(unsigned long)#1}>,gm::Matrix<float,2,1> ()(unsigned long)>::__clone((uint64_t)v19, v23);
  v18 = 0;
  if (!v24
    || (v5 = v3 >> 3,
        LODWORD(v17) = (*(float (**)(_QWORD *, unint64_t *))(*v24 + 48))(v24, &v18),
        HIDWORD(v17) = v6,
        v18 = v5 - 1,
        !v24))
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  *(float *)&v7 = (*(float (**)(_QWORD *, unint64_t *))(*v24 + 48))(v24, &v18);
  v18 = __PAIR64__(v8, v7);
  if (v17 == __PAIR64__(v8, v7))
    v9 = v5 - 1;
  else
    v9 = v5;
  v4 = 3 * v9 - 6;
  v10 = v24;
  if (v24 == v23)
  {
    v11 = 4;
    v10 = v23;
  }
  else
  {
    if (!v24)
      goto LABEL_13;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_13:
  v12 = v20;
  if (v20 == v19)
  {
    v13 = 4;
    v12 = v19;
  }
  else
  {
    if (!v20)
      goto LABEL_18;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_18:
  v14 = v22;
  if (v22 == v21)
  {
    v15 = 4;
    v14 = v21;
    goto LABEL_22;
  }
  if (v22)
  {
    v15 = 5;
LABEL_22:
    (*(void (**)(void))(*v14 + 8 * v15))();
  }
  return v4;
}

void sub_19FA54A9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;

  v21 = *(_QWORD **)(v19 - 48);
  if (v21 == (_QWORD *)(v19 - 72))
  {
    v22 = 4;
    v21 = (_QWORD *)(v19 - 72);
  }
  else
  {
    if (!v21)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_6:
  v23 = a15;
  if (a15 == &a12)
  {
    v24 = 4;
    v23 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_11;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_11:
  v25 = a19;
  if (a19 == &a16)
  {
    v26 = 4;
    v25 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_16;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_16:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<md::PolygonOverlayMeshBuilder::buildVectorOverlayMesh(std::vector<md::PolygonOverlayMeshBuilder::MeshInfo> const&,ggl::Loader &)::$_0,std::allocator<md::PolygonOverlayMeshBuilder::buildVectorOverlayMesh(std::vector<md::PolygonOverlayMeshBuilder::MeshInfo> const&,ggl::Loader &)::$_0>,void ()(ggl::ResourceAccessor *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::PolygonOverlayMeshBuilder::buildVectorOverlayMesh(std::vector<md::PolygonOverlayMeshBuilder::MeshInfo> const&,ggl::Loader &)::$_0,std::allocator<md::PolygonOverlayMeshBuilder::buildVectorOverlayMesh(std::vector<md::PolygonOverlayMeshBuilder::MeshInfo> const&,ggl::Loader &)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E42D2D88;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<md::PolygonOverlayMeshBuilder::buildVectorOverlayMesh(std::vector<md::PolygonOverlayMeshBuilder::MeshInfo> const&,ggl::Loader &)::$_0,std::allocator<md::PolygonOverlayMeshBuilder::buildVectorOverlayMesh(std::vector<md::PolygonOverlayMeshBuilder::MeshInfo> const&,ggl::Loader &)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E42D2D88;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::PolygonOverlayMeshBuilder::buildVectorOverlayMesh(std::vector<md::PolygonOverlayMeshBuilder::MeshInfo> const&,ggl::Loader &)::$_0,std::allocator<md::PolygonOverlayMeshBuilder::buildVectorOverlayMesh(std::vector<md::PolygonOverlayMeshBuilder::MeshInfo> const&,ggl::Loader &)::$_0>,void ()(ggl::ResourceAccessor *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  unint64_t v23;
  double v24;
  float32x4_t v25;
  double v26;
  double v27;
  float32x4_t v28;
  uint64_t v29;
  unint64_t v30;
  _DWORD *v31;
  float *v32;
  int v33;
  float v34;
  _WORD *v35;
  unint64_t v36;
  unint64_t v37;
  NSObject *v38;
  uint64_t v39;
  int16x8_t v40;
  unint64_t v41;
  int16x8_t *v42;
  int16x8_t v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE buf[22];
  _BYTE *v54;
  uint64_t (**v55)();
  _QWORD *v56[2];
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  int v63;
  _WORD *v64;
  _BYTE *v65;
  uint64_t v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v4 = **(_QWORD **)(**(_QWORD **)(a1 + 16) + 64);
  v5 = *(_QWORD *)(v4 + 8) * **(_QWORD **)(a1 + 24);
  *(_QWORD *)&v6 = v3;
  *(_QWORD *)&v7 = v3;
  *((_QWORD *)&v7 + 1) = v4;
  if (v5)
  {
    if (v3 && *(_BYTE *)(v4 + 17) != 2)
    {
      v44 = v7;
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 56))(v3);
      v7 = v44;
      *(_QWORD *)&v6 = v3;
    }
    else
    {
      v8 = *(_QWORD *)(v4 + 72);
    }
  }
  else
  {
    v8 = 0;
  }
  v50 = v7;
  v51 = v5;
  v52 = v8;
  v9 = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 96);
  v10 = *(_QWORD *)(v9 + 8) * **(_QWORD **)(a1 + 32);
  *((_QWORD *)&v6 + 1) = v9;
  if (v10)
  {
    if (v3 && *(_BYTE *)(v9 + 17) != 2)
    {
      v46 = v6;
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 56))(v3);
      v6 = v46;
    }
    else
    {
      v11 = *(_QWORD *)(v9 + 72);
    }
  }
  else
  {
    v11 = 0;
  }
  v48 = v6;
  v49 = v11;
  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(_QWORD **)v12;
  v14 = *(_QWORD **)(v12 + 8);
  if (*(_QWORD **)v12 != v14)
  {
    v15 = 0;
    v47 = 0;
    do
    {
      v55 = &off_1E42D5BF0;
      v56[0] = v13;
      *(_QWORD *)&v57 = &v55;
      v16 = (uint64_t *)*v13;
      v17 = v13[1] - *v13;
      v54 = buf;
      *(_QWORD *)buf = &off_1E42D5BF0;
      *(_QWORD *)&buf[8] = v13;
      if ((unint64_t)v17 <= 0x17)
        goto LABEL_15;
      v18 = *v16;
      v19 = (v17 >> 3) - 1;
      v20 = v16[v19];
      if (!v19 && v18 == v20)
        goto LABEL_15;
      v55 = &off_1E42D5BF0;
      v56[0] = v13;
      *(_QWORD *)&v57 = &v55;
      v22 = v13[1] - *v13;
      if ((unint64_t)v22 <= 0x17)
        goto LABEL_15;
      if (v22 >> 3 == 1)
        goto LABEL_15;
      v23 = geo::triangulatedIndexCount<float>(v13);
      if (!v23)
        goto LABEL_15;
      v29 = v13[1] - *v13;
      if (v29)
      {
        v30 = v29 >> 3;
        if (v30 <= 1)
          v30 = 1;
        v31 = (_DWORD *)(v52 + 8 * v15 + 4);
        v32 = (float *)(*v13 + 4);
        do
        {
          LODWORD(v24) = 1183008256;
          v33 = (int)(float)(*(v32 - 1) * 16803.0);
          v34 = *v32;
          v32 += 2;
          *((_WORD *)v31 - 2) = v33;
          *((_WORD *)v31 - 1) = (int)(float)(v34 * 16803.0);
          *v31 = 0;
          v31 += 2;
          --v30;
        }
        while (v30);
      }
      v56[0] = 0;
      v56[1] = 0;
      v55 = (uint64_t (**)())v56;
      v57 = xmmword_19FFB5070;
      v62 = 0;
      v59 = 0;
      v60 = 0;
      v58 = 0;
      v61 = 0;
      v63 = 4;
      v65 = 0;
      v66 = 0;
      v64 = 0;
      md::Triangulator<float>::triangulate((uint64_t)&v55, v13, (float32x4_t)xmmword_19FFB5070, v24, v25, v26, v27, v28);
      v35 = v64;
      v45 = (v65 - (_BYTE *)v64) >> 1;
      if (v23 != v45)
      {
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
        v38 = (id)GEOGetVectorKitVKDefaultLog_log;
        if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          *(_QWORD *)&buf[4] = v23;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = (v65 - (_BYTE *)v64) >> 1;
          _os_log_impl(&dword_19F029000, v38, OS_LOG_TYPE_ERROR, "Mismatching number of indices, indexCount: %zu, triangulatedIndexCount: %zu", buf, 0x16u);
        }

        bzero((void *)(v49 + 2 * v47), 2 * v23);
        v35 = v64;
        if (!v64)
          goto LABEL_51;
        goto LABEL_50;
      }
      if (v65 == (_BYTE *)v64)
      {
        v35 = v65;
        if (!v65)
          goto LABEL_51;
        goto LABEL_50;
      }
      if (v23 <= 1)
        v36 = 1;
      else
        v36 = v23;
      if (v36 > 0xF && (unint64_t)(2 * v47 + v49 - (_QWORD)v64) >= 0x20)
      {
        v39 = 0;
        v37 = v36 & 0xFFFFFFFFFFFFFFF0;
        v40 = vdupq_n_s16(v15);
        v41 = v36 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v42 = (int16x8_t *)(v49 + 2 * v47 + v39 * 2);
          v43 = vaddq_s16(*(int16x8_t *)&v35[v39 + 8], v40);
          *v42 = vaddq_s16(*(int16x8_t *)&v35[v39], v40);
          v42[1] = v43;
          v39 += 16;
          v41 -= 16;
        }
        while (v41);
        if (v36 == v37)
          goto LABEL_50;
      }
      else
      {
        v37 = 0;
      }
      do
      {
        *(_WORD *)(v49 + 2 * v47 + 2 * v37) = v35[v37] + v15;
        ++v37;
      }
      while (v36 != v37);
LABEL_50:
      v65 = v35;
      operator delete(v35);
LABEL_51:
      geo::Pool<geo::Triangulator<float,unsigned short>::Node>::disposeElements((uint64_t)&v55);
      std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v56[0]);
      if (v23 != v45)
      {
        **(_BYTE **)(a1 + 40) = 1;
        break;
      }
      v47 += v23;
      v15 += (uint64_t)(v13[1] - *v13) >> 3;
LABEL_15:
      v13 += 11;
    }
    while (v13 != v14);
  }
  if (v49 && v10 && (_QWORD)v48 && *(_BYTE *)(*((_QWORD *)&v48 + 1) + 17) != 2)
    (*(void (**)(void))(*(_QWORD *)v48 + 64))();
  if (v52 && v51 && (_QWORD)v50 && *(_BYTE *)(*((_QWORD *)&v50 + 1) + 17) != 2)
    (*(void (**)(void))(*(_QWORD *)v50 + 64))();
}

void sub_19FA551C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v27 - 200));
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a21);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a27);
  _Unwind_Resume(a1);
}

void md::Triangulator<float>::triangulate(uint64_t a1, uint64_t *a2, float32x4_t a3, double a4, float32x4_t a5, double a6, double a7, float32x4_t a8)
{
  uint64_t v9;
  unint64_t v10;
  NSObject *v11;
  void **v12;
  void *__p[2];
  char v14;
  uint8_t buf[4];
  void **v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v9 = *a2;
  v10 = (a2[1] - v9) >> 3;
  *(_QWORD *)(a1 + 72) = 0;
  if ((geo::Triangulator<float,unsigned short>::_triangulatePolygon(a1, v9, v10, a1 + 88, a3, a4, a5, a6, a7, a8) & 1) == 0)
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v11 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      md::Triangulator<float>::_describePoints(__p, *a2, (a2[1] - *a2) >> 3);
      if (v14 >= 0)
        v12 = __p;
      else
        v12 = (void **)__p[0];
      *(_DWORD *)buf = 136315138;
      v16 = v12;
      _os_log_impl(&dword_19F029000, v11, OS_LOG_TYPE_ERROR, "Triangulator failed to fully triangulate polygon: %s", buf, 0xCu);
      if (v14 < 0)
        operator delete(__p[0]);
    }

  }
}

void sub_19FA55334(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void geo::Pool<geo::Triangulator<float,unsigned short>::Node>::disposeElements(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t **v4;
  uint64_t **v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t **v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  _BYTE *v30;
  unint64_t v31;
  unint64_t v32;
  _BYTE *v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t **v36;
  uint64_t *v37;
  uint64_t v38;

  v37 = 0;
  v38 = 0;
  v36 = &v37;
  v2 = *(_QWORD **)(a1 + 40);
  if (v2)
  {
    v3 = 0;
    do
    {
      v4 = &v37;
      v5 = &v37;
      if (v37)
      {
        v6 = v37;
        while (1)
        {
          while (1)
          {
            v5 = (uint64_t **)v6;
            v7 = v6[4];
            if ((unint64_t)v2 >= v7)
              break;
            v6 = *v5;
            v4 = v5;
            if (!*v5)
              goto LABEL_12;
          }
          if (v7 >= (unint64_t)v2)
            break;
          v6 = v5[1];
          if (!v6)
          {
            v4 = v5 + 1;
            goto LABEL_12;
          }
        }
      }
      else
      {
LABEL_12:
        v8 = (uint64_t *)operator new(0x28uLL);
        v8[4] = (uint64_t)v2;
        *v8 = 0;
        v8[1] = 0;
        v8[2] = (uint64_t)v5;
        *v4 = v8;
        if (*v36)
        {
          v36 = (uint64_t **)*v36;
          v8 = *v4;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v37, v8);
        v3 = ++v38;
        v2 = *(_QWORD **)(a1 + 40);
      }
      v2 = (_QWORD *)*v2;
      *(_QWORD *)(a1 + 40) = v2;
    }
    while (v2);
  }
  else
  {
    v3 = 0;
  }
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD **)a1;
  v11 = (_QWORD *)(a1 + 8);
  v12 = v3 == *(_QWORD *)(a1 + 16) * v9 || v10 == v11;
  if (!v12 && v9)
  {
    v15 = v37;
    if (v37)
    {
      v16 = *(_QWORD **)a1;
      do
      {
        v17 = 0;
        v18 = v16[4];
        do
        {
          v19 = v18 + 56 * v17;
          v20 = &v37;
          v21 = v15;
          do
          {
            v22 = v21;
            v23 = v20;
            v24 = v21[4];
            if (v24 >= v19)
              v20 = (uint64_t **)v21;
            else
              ++v21;
            v21 = (uint64_t *)*v21;
          }
          while (v21);
          if (v20 == &v37)
            goto LABEL_34;
          if (v24 < v19)
            v22 = (uint64_t *)v23;
          if (v19 < v22[4])
LABEL_34:
            *(_BYTE *)(v19 + 52) = -1;
          ++v17;
        }
        while (v17 != v9);
        v25 = (_QWORD *)v16[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v16[2];
            v12 = *v26 == (_QWORD)v16;
            v16 = v26;
          }
          while (!v12);
        }
        v16 = v26;
      }
      while (v26 != v11);
      goto LABEL_20;
    }
    v27 = *(_QWORD **)a1;
    while (1)
    {
      v28 = v27[4];
      if (v9 < 2)
        break;
      v30 = (_BYTE *)(v28 + 108);
      v31 = v9 & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        *(v30 - 56) = -1;
        *v30 = -1;
        v30 += 112;
        v31 -= 2;
      }
      while (v31);
      v29 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if (v9 != (v9 & 0xFFFFFFFFFFFFFFFELL))
        goto LABEL_59;
LABEL_61:
      v34 = (_QWORD *)v27[1];
      if (v34)
      {
        do
        {
          v35 = v34;
          v34 = (_QWORD *)*v34;
        }
        while (v34);
      }
      else
      {
        do
        {
          v35 = (_QWORD *)v27[2];
          v12 = *v35 == (_QWORD)v27;
          v27 = v35;
        }
        while (!v12);
      }
      v27 = v35;
      if (v35 == v11)
        goto LABEL_20;
    }
    v29 = 0;
LABEL_59:
    v32 = v9 - v29;
    v33 = (_BYTE *)(v28 + 56 * v29 + 52);
    do
    {
      *v33 = -1;
      v33 += 56;
      --v32;
    }
    while (v32);
    goto LABEL_61;
  }
LABEL_20:
  if (v10 != v11)
  {
    do
    {
      free((void *)v10[4]);
      v13 = (_QWORD *)v10[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)v10[2];
          v12 = *v14 == (_QWORD)v10;
          v10 = v14;
        }
        while (!v12);
      }
      v10 = v14;
    }
    while (v14 != v11);
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 8));
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 40) = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v37);
}

void sub_19FA55628(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v1);
  _Unwind_Resume(a1);
}

uint64_t geo::Triangulator<float,unsigned short>::_triangulatePolygon(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, float32x4_t a5, double a6, float32x4_t a7, double a8, double a9, float32x4_t a10)
{
  int v14;
  unint64_t v15;
  float v16;
  float v17;
  float32x4_t v18;
  const float *v19;
  float32x4_t v20;
  unint64_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  const float *v27;
  unint64_t v28;
  float *v29;
  float v30;
  float v31;
  uint64_t LinkedList;
  _QWORD *v34;
  float32x4x2_t v36;
  float32x4x2_t v37;

  *(_QWORD *)(a4 + 8) = *(_QWORD *)a4;
  if (a3 < 3)
    return 0;
  v14 = *(_DWORD *)(a1 + 80);
  if ((v14 & 4) != 0)
  {
    if (a3 <= 7)
    {
      v15 = 0;
      a5.i32[0] = 2139095039;
      v16 = -3.4028e38;
      v17 = -3.4028e38;
      a7.i32[0] = 2139095039;
LABEL_11:
      v28 = a3 - v15;
      v29 = (float *)(a2 + 8 * v15 + 4);
      do
      {
        v30 = *(v29 - 1);
        a10.f32[0] = *v29;
        a7.f32[0] = fminf(v30, a7.f32[0]);
        a5.f32[0] = fminf(*v29, a5.f32[0]);
        v17 = fmaxf(v30, v17);
        v16 = fmaxf(*v29, v16);
        v29 += 2;
        --v28;
      }
      while (v28);
      goto LABEL_13;
    }
  }
  else if (a3 < 0x33 || (v14 & 2) == 0)
  {
    goto LABEL_20;
  }
  v15 = a3 & 0xFFFFFFFFFFFFFFF8;
  v18 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
  v19 = (const float *)(a2 + 32);
  v20.i64[0] = 0x80000000800000;
  v20.i64[1] = 0x80000000800000;
  v21 = a3 & 0xFFFFFFFFFFFFFFF8;
  v22.i64[0] = 0x80000000800000;
  v22.i64[1] = 0x80000000800000;
  v23.i64[0] = 0x80000000800000;
  v23.i64[1] = 0x80000000800000;
  a10.i64[0] = 0x80000000800000;
  a10.i32[2] = 0x800000;
  a10.i32[3] = 0x800000;
  v24 = v18;
  v25 = v18;
  v26 = v18;
  do
  {
    v27 = v19 - 8;
    v36 = vld2q_f32(v27);
    v37 = vld2q_f32(v19);
    v25 = vminnmq_f32(v36.val[0], v25);
    v26 = vminnmq_f32(v37.val[0], v26);
    v18 = vminnmq_f32(v36.val[1], v18);
    v24 = vminnmq_f32(v37.val[1], v24);
    v23 = vmaxnmq_f32(v36.val[0], v23);
    a10 = vmaxnmq_f32(v37.val[0], a10);
    v20 = vmaxnmq_f32(v36.val[1], v20);
    v22 = vmaxnmq_f32(v37.val[1], v22);
    v19 += 16;
    v21 -= 8;
  }
  while (v21);
  a7 = vminnmq_f32(v25, v26);
  a7.f32[0] = vminnmvq_f32(a7);
  a5 = vminnmq_f32(v18, v24);
  a5.f32[0] = vminnmvq_f32(a5);
  v17 = vmaxnmvq_f32(vmaxnmq_f32(v23, a10));
  v16 = vmaxnmvq_f32(vmaxnmq_f32(v20, v22));
  if (v15 != a3)
    goto LABEL_11;
LABEL_13:
  *(_DWORD *)(a1 + 48) = a7.i32[0];
  *(_DWORD *)(a1 + 52) = a5.i32[0];
  *(float *)(a1 + 56) = v17;
  *(float *)(a1 + 60) = v16;
  a7.f32[0] = v17 - a7.f32[0];
  v31 = v16 - a5.f32[0];
  a6 = v31;
  a9 = 4294967300.0;
  a8 = 4294967300.0;
  if (a7.f32[0] < 4294967300.0 && a6 < 4294967300.0)
  {
    a5.f32[0] = fmaxf(a7.f32[0], v31);
  }
  else
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"Cannot properly hash this geometry. Its space is too large.\n", 60);
    a5.i32[0] = 0;
  }
  *(_DWORD *)(a1 + 64) = a5.i32[0];
LABEL_20:
  LinkedList = geo::Triangulator<float,unsigned short>::createLinkedList(a1, a2, a3, 0, 1, *(double *)a5.i64, a6, *(double *)a7.i64, a8, a9, (int8x16_t)a10);
  if (LinkedList)
  {
    v34 = *(_QWORD **)(LinkedList + 24);
    geo::Triangulator<float,unsigned short>::linkListInHashSpace((uint64_t)v34, *(float *)(a1 + 64));
    return geo::Triangulator<float,unsigned short>::earclipPolygon(a1, v34, (char **)a4);
  }
  return 0;
}

_BYTE *md::Triangulator<float>::_describePoints(_BYTE *result, uint64_t a2, unint64_t a3)
{
  _BYTE *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  size_t v19;
  unint64_t v20;
  const void **v21;
  const void *v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[3];
  uint64_t v29;
  unint64_t v30;
  void *__p[2];
  __int128 v32;
  int v33;
  uint64_t v34[20];

  v3 = result;
  if (!a3)
  {
    result[23] = 0;
    *result = 0;
    return result;
  }
  v6 = MEMORY[0x1E0DE4FE0];
  v7 = MEMORY[0x1E0DE4FE0] + 64;
  v8 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v10 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v34[0] = MEMORY[0x1E0DE4FE0] + 64;
  v26 = v9;
  *(uint64_t *)((char *)&v26 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = (std::ios_base *)((char *)&v26 + *(_QWORD *)(v26 - 24));
  std::ios_base::init(v11, &v27);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v26 = v6 + 24;
  v34[0] = v7;
  std::streambuf::basic_streambuf();
  v12 = MEMORY[0x1E0DE4FB8];
  v27 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v32 = 0u;
  v33 = 16;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v26, (uint64_t)"(", 1);
  v13 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)", ", 2);
  v14 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)")", 1);
  if (a3 >= 2)
  {
    v15 = a3 - 1;
    v16 = a2 + 12;
    do
    {
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v26, (uint64_t)", (", 3);
      v17 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v17, (uint64_t)", ", 2);
      v18 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)")", 1);
      v16 += 8;
      --v15;
    }
    while (v15);
  }
  if ((v33 & 0x10) != 0)
  {
    v20 = *((_QWORD *)&v32 + 1);
    if (*((_QWORD *)&v32 + 1) < v30)
    {
      *((_QWORD *)&v32 + 1) = v30;
      v20 = v30;
    }
    v21 = (const void **)&v29;
  }
  else
  {
    if ((v33 & 8) == 0)
    {
      v19 = 0;
      v3[23] = 0;
      goto LABEL_21;
    }
    v21 = (const void **)v28;
    v20 = v28[2];
  }
  v22 = *v21;
  v19 = v20 - (_QWORD)*v21;
  if (v19 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v19 >= 0x17)
  {
    v23 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17)
      v23 = v19 | 7;
    v24 = v23 + 1;
    v25 = operator new(v23 + 1);
    *((_QWORD *)v3 + 1) = v19;
    *((_QWORD *)v3 + 2) = v24 | 0x8000000000000000;
    *(_QWORD *)v3 = v25;
    v3 = v25;
  }
  else
  {
    v3[23] = v19;
    if (!v19)
      goto LABEL_21;
  }
  memmove(v3, v22, v19);
LABEL_21:
  v3[v19] = 0;
  v26 = *v8;
  *(uint64_t *)((char *)&v26 + *(_QWORD *)(v26 - 24)) = v8[3];
  v27 = v12 + 16;
  if (SBYTE7(v32) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (_BYTE *)MEMORY[0x1A1AF4D64](v34);
}

void sub_19FA55ACC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1A1AF4D64](v1);
  _Unwind_Resume(a1);
}

void sub_19FA55AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char *geo::Pool<geo::Triangulator<float,unsigned short>::Node>::allocateSlab(uint64_t **a1)
{
  char *result;
  char *v3;
  uint64_t *v4;
  uint64_t **v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  char *v13;
  char *v14;

  result = (char *)malloc_type_malloc((size_t)a1[4], 0x160B39uLL);
  v3 = result;
  v5 = a1 + 1;
  v4 = a1[1];
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        v6 = (uint64_t **)v4;
        v7 = v4[4];
        if ((unint64_t)result >= v7)
          break;
        v4 = *v6;
        v5 = v6;
        if (!*v6)
          goto LABEL_8;
      }
      if (v7 >= (unint64_t)result)
        break;
      v4 = v6[1];
      if (!v4)
      {
        v5 = v6 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    v6 = a1 + 1;
LABEL_8:
    v8 = (uint64_t *)operator new(0x28uLL);
    v8[4] = (uint64_t)v3;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = (uint64_t)v6;
    *v5 = v8;
    v9 = (uint64_t *)**a1;
    if (v9)
    {
      *a1 = v9;
      v10 = *v5;
    }
    else
    {
      v10 = v8;
    }
    result = (char *)std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v10);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  v11 = a1[5];
  v12 = 56 * (_QWORD)a1[3] - 56;
  if ((v12 & 0x8000000000000000) == 0)
  {
    v13 = &v3[v12];
    v14 = &v3[v12];
    do
    {
      *(_QWORD *)v14 = v11;
      v14 -= 56;
      v11 = (uint64_t *)v13;
      v13 = v14;
    }
    while (v14 >= v3);
    v11 = (uint64_t *)(v14 + 56);
  }
  a1[5] = v11;
  return result;
}

void std::__shared_ptr_emplace<ggl::DaVinci::TexturedCompressedMesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4A80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::DaVinci::TexturedCompressedMesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4A80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::DaVinci::TexturedCompressedMesh>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::DaVinci::TexturedCompressedVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0608;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::DaVinci::TexturedCompressedVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0608;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::DaVinci::TexturedCompressedVbo>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<unsigned long geo::triangulatedIndexCount<float>(std::vector<gm::Matrix<float,2,1>> const&)::{lambda(unsigned long)#1},std::allocator<unsigned long geo::triangulatedIndexCount<float>(std::vector<gm::Matrix<float,2,1>> const&)::{lambda(unsigned long)#1}>,gm::Matrix<float,2,1> ()(unsigned long)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<unsigned long geo::triangulatedIndexCount<float>(std::vector<gm::Matrix<float,2,1>> const&)::{lambda(unsigned long)#1},std::allocator<unsigned long geo::triangulatedIndexCount<float>(std::vector<gm::Matrix<float,2,1>> const&)::{lambda(unsigned long)#1}>,gm::Matrix<float,2,1> ()(unsigned long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D5DE8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<unsigned long geo::triangulatedIndexCount<float>(std::vector<gm::Matrix<float,2,1>> const&)::{lambda(unsigned long)#1},std::allocator<unsigned long geo::triangulatedIndexCount<float>(std::vector<gm::Matrix<float,2,1>> const&)::{lambda(unsigned long)#1}>,gm::Matrix<float,2,1> ()(unsigned long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D5DE8;
  a2[1] = v2;
  return result;
}

float std::__function::__func<unsigned long geo::triangulatedIndexCount<float>(std::vector<gm::Matrix<float,2,1>> const&)::{lambda(unsigned long)#1},std::allocator<unsigned long geo::triangulatedIndexCount<float>(std::vector<gm::Matrix<float,2,1>> const&)::{lambda(unsigned long)#1}>,gm::Matrix<float,2,1> ()(unsigned long)>::operator()(uint64_t a1, _QWORD *a2)
{
  return *(float *)(**(_QWORD **)(a1 + 8) + 8 * *a2);
}

void std::__function::__func<unsigned long geo::effectiveVertexCount<float>(std::vector<gm::Matrix<float,2,1>> const&)::{lambda(unsigned long)#1},std::allocator<unsigned long geo::effectiveVertexCount<float>(std::vector<gm::Matrix<float,2,1>> const&)::{lambda(unsigned long)#1}>,gm::Matrix<float,2,1> ()(unsigned long)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<unsigned long geo::effectiveVertexCount<float>(std::vector<gm::Matrix<float,2,1>> const&)::{lambda(unsigned long)#1},std::allocator<unsigned long geo::effectiveVertexCount<float>(std::vector<gm::Matrix<float,2,1>> const&)::{lambda(unsigned long)#1}>,gm::Matrix<float,2,1> ()(unsigned long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D5BF0;
  result[1] = v3;
  return result;
}

void std::__hash_table<std::__hash_value_type<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::PolylineOverlayBatchKey,std::__hash_value_type<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,std::hash<md::PolylineOverlayBatchKey>,std::equal_to<md::PolylineOverlayBatchKey>,true>,std::__unordered_map_equal<md::PolylineOverlayBatchKey,std::__hash_value_type<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,std::equal_to<md::PolylineOverlayBatchKey>,std::hash<md::PolylineOverlayBatchKey>,true>,std::allocator<std::__hash_value_type<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>>>::__deallocate_node(_QWORD *__p)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  malloc_zone_t *zone;
  void (***v7)(_QWORD, uint64_t);
  void (***v8)(_QWORD, uint64_t);
  unsigned __int8 v9;
  uint64_t v10;
  geo::read_write_lock *v11;
  const char *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;

  if (__p)
  {
    v1 = __p;
    do
    {
      v2 = v1;
      v1 = (_QWORD *)*v1;
      v3 = (_QWORD *)v2[6];
      if (v3)
      {
        v4 = (_QWORD *)v2[7];
        v5 = v2[6];
        if (v4 != v3)
        {
          do
          {
            v8 = (void (***)(_QWORD, uint64_t))*--v4;
            v7 = v8;
            *v4 = 0;
            if (v8)
            {
              (**v7)(v7, v5);
              {
                v10 = operator new();
                *(_QWORD *)(v10 + 16) = 0x5ED09DD50000000FLL;
                *(_QWORD *)(v10 + 24) = "VectorKitLabels";
                *(_OWORD *)(v10 + 32) = xmmword_19FFB2E80;
                *(_QWORD *)v10 = &off_1E42B5668;
                *(_QWORD *)(v10 + 8) = "VectorKitLabels";
                *(_OWORD *)(v10 + 72) = 0u;
                *(_OWORD *)(v10 + 88) = 0u;
                *(_OWORD *)(v10 + 104) = 0u;
                *(_OWORD *)(v10 + 120) = 0u;
                *(_OWORD *)(v10 + 136) = 0u;
                *(_OWORD *)(v10 + 152) = 0u;
                *(_OWORD *)(v10 + 168) = 0u;
                *(_OWORD *)(v10 + 184) = 0u;
                *(_OWORD *)(v10 + 200) = 0u;
                *(_OWORD *)(v10 + 216) = 0u;
                *(_OWORD *)(v10 + 232) = 0u;
                *(_QWORD *)(v10 + 248) = 0;
                v16 = v10;
                *(_OWORD *)(v10 + 56) = 0u;
                v11 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v10 + 56), 0);
                if ((_DWORD)v11)
                  geo::read_write_lock::logFailure(v11, (uint64_t)"initialization", v12);
                zone = malloc_create_zone(0, 0);
                *(_QWORD *)(v16 + 48) = zone;
                malloc_set_zone_name(zone, "VectorKitLabels");
                *(_QWORD *)(v16 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                mdm::Allocator::instance(void)::alloc = v16;
              }
              (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                               + 40))(mdm::Allocator::instance(void)::alloc, v7, 136);
            }
          }
          while (v4 != v3);
          v5 = v2[6];
        }
        v2[7] = v3;
        (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v2[9] + 40))(v2[9], v5, v2[8] - v5);
      }
      v13 = (std::__shared_weak_count *)v2[4];
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      operator delete(v2);
    }
    while (v1);
  }
}

uint64_t std::unordered_map<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>::~unordered_map[abi:nn180100](uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::PolylineOverlayBatchKey,std::__hash_value_type<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,std::hash<md::PolylineOverlayBatchKey>,std::equal_to<md::PolylineOverlayBatchKey>,true>,std::__unordered_map_equal<md::PolylineOverlayBatchKey,std::__hash_value_type<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,std::equal_to<md::PolylineOverlayBatchKey>,std::hash<md::PolylineOverlayBatchKey>,true>,std::allocator<std::__hash_value_type<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>>>::__deallocate_node(*(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__function::__func<md::PolygonOverlayMeshBuilder::buildStrokeRibbon(std::vector<md::PolygonOverlayMeshBuilder::MeshInfo> const&,ggl::Loader &,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::View>>,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,std::shared_ptr<md::PolygonOverlayRenderable::Style> const&,md::Ribbons::StandardModeRibbon::JoinStyle const&,float,geo::Unit<geo::RadianUnitDescription,float>)::$_0,std::allocator<md::PolygonOverlayMeshBuilder::buildStrokeRibbon(std::vector<md::PolygonOverlayMeshBuilder::MeshInfo> const&,ggl::Loader &,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::View>>,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,std::shared_ptr<md::PolygonOverlayRenderable::Style> const&,md::Ribbons::StandardModeRibbon::JoinStyle const&,float,geo::Unit<geo::RadianUnitDescription,float>)::$_0>,void ()(ggl::ResourceAccessor *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::PolygonOverlayMeshBuilder::buildStrokeRibbon(std::vector<md::PolygonOverlayMeshBuilder::MeshInfo> const&,ggl::Loader &,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::View>>,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,std::shared_ptr<md::PolygonOverlayRenderable::Style> const&,md::Ribbons::StandardModeRibbon::JoinStyle const&,float,geo::Unit<geo::RadianUnitDescription,float>)::$_0,std::allocator<md::PolygonOverlayMeshBuilder::buildStrokeRibbon(std::vector<md::PolygonOverlayMeshBuilder::MeshInfo> const&,ggl::Loader &,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::View>>,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,std::shared_ptr<md::PolygonOverlayRenderable::Style> const&,md::Ribbons::StandardModeRibbon::JoinStyle const&,float,geo::Unit<geo::RadianUnitDescription,float>)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E42D2CF8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<md::PolygonOverlayMeshBuilder::buildStrokeRibbon(std::vector<md::PolygonOverlayMeshBuilder::MeshInfo> const&,ggl::Loader &,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::View>>,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,std::shared_ptr<md::PolygonOverlayRenderable::Style> const&,md::Ribbons::StandardModeRibbon::JoinStyle const&,float,geo::Unit<geo::RadianUnitDescription,float>)::$_0,std::allocator<md::PolygonOverlayMeshBuilder::buildStrokeRibbon(std::vector<md::PolygonOverlayMeshBuilder::MeshInfo> const&,ggl::Loader &,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::View>>,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,std::shared_ptr<md::PolygonOverlayRenderable::Style> const&,md::Ribbons::StandardModeRibbon::JoinStyle const&,float,geo::Unit<geo::RadianUnitDescription,float>)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42D2CF8;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::PolygonOverlayMeshBuilder::buildStrokeRibbon(std::vector<md::PolygonOverlayMeshBuilder::MeshInfo> const&,ggl::Loader &,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::View>>,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,std::shared_ptr<md::PolygonOverlayRenderable::Style> const&,md::Ribbons::StandardModeRibbon::JoinStyle const&,float,geo::Unit<geo::RadianUnitDescription,float>)::$_0,std::allocator<md::PolygonOverlayMeshBuilder::buildStrokeRibbon(std::vector<md::PolygonOverlayMeshBuilder::MeshInfo> const&,ggl::Loader &,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::View>>,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,std::shared_ptr<md::PolygonOverlayRenderable::Style> const&,md::Ribbons::StandardModeRibbon::JoinStyle const&,float,geo::Unit<geo::RadianUnitDescription,float>)::$_0>,void ()(ggl::ResourceAccessor *)>::operator()(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD v16[2];
  char v17[32];

  v3 = *a2;
  v4 = (uint64_t *)a1[2];
  v5 = (_QWORD *)operator new();
  v6 = v5;
  v7 = a1[1];
  v8 = (_QWORD *)a1[3];
  v9 = (std::__shared_weak_count *)v8[1];
  v16[0] = *v8;
  v16[1] = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v12 = (_QWORD *)a1[4];
  v17[0] = 0;
  v17[24] = 0;
  md::RibbonLayer<md::Ribbons::PolylineOverlayRibbonDescriptor>::RibbonLayer(v5, v3, *(uint64_t **)(v7 + 16), (uint64_t)v16, v12, v17);
  *v6 = &off_1E429A3E8;
  v6[28] = 0;
  v13 = *v4;
  *v4 = (uint64_t)v6;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (v9)
  {
    v14 = (unint64_t *)&v9->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_19FA56178(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  unint64_t *p_shared_owners;
  unint64_t v5;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  MEMORY[0x1A1AF4E00](v2, 0x10A1C4043A4375DLL);
  _Unwind_Resume(a1);
}

void md::PolygonOverlayMeshBuilder::addStrokeRibbonBatches(md::PolygonOverlayMeshBuilder::MeshInfo const&,std::unordered_map<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>> &,std::shared_ptr<md::PolygonOverlayRenderable::Style> const&,md::Ribbons::StandardModeRibbon::JoinStyle const&,float,geo::Unit<geo::RadianUnitDescription,float>)::$_0::operator()(uint64_t a1)
{
  char *v2;
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t *v18;
  _QWORD *v19;
  unint64_t *v20;
  unint64_t v21;
  void (***v22)(_QWORD);
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  char v29;
  void (***v30)(_QWORD);

  v2 = *(char **)(a1 + 40);
  {
    v24 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v24, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc, 136, 8);
  v5 = v4;
  v6 = *v2;
  v7 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(v4 + 49) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 8) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 0;
  *(_QWORD *)(v4 + 72) = 0;
  *(_QWORD *)v4 = off_1E429B958;
  *(_QWORD *)(v4 + 104) = 0;
  *(_QWORD *)(v4 + 112) = 0;
  *(_BYTE *)(v4 + 120) = 0;
  *(_BYTE *)(v4 + 121) = v6;
  *(_QWORD *)(v4 + 124) = v7;
  v30 = (void (***)(_QWORD))v4;
  *(_WORD *)(v4 + 96) = 0;
  v8 = **(_QWORD **)(a1 + 8);
  v9 = **(_QWORD **)(a1 + 16);
  if (v8 >= v9)
    v10 = **(_QWORD **)(a1 + 16);
  else
    v10 = **(_QWORD **)(a1 + 8);
  if (v8 <= v9)
    v8 = **(_QWORD **)(a1 + 16);
  *(_QWORD *)(v4 + 88) = v8 - v10 + 1;
  *(_QWORD *)(v4 + 72) = **(_QWORD **)(a1 + 24) + 8 * v10;
  v29 = 0;
  v26 = 0;
  v11 = *(uint64_t **)(a1 + 32);
  v12 = *v11;
  v13 = (std::__shared_weak_count *)v11[1];
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  v27 = v12;
  v28 = v13;
  v16 = std::__hash_table<std::__hash_value_type<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::PolylineOverlayBatchKey,std::__hash_value_type<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,std::hash<md::PolylineOverlayBatchKey>,std::equal_to<md::PolylineOverlayBatchKey>,true>,std::__unordered_map_equal<md::PolylineOverlayBatchKey,std::__hash_value_type<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,std::equal_to<md::PolylineOverlayBatchKey>,std::hash<md::PolylineOverlayBatchKey>,true>,std::allocator<std::__hash_value_type<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>>>::__emplace_unique_key_args<md::PolylineOverlayBatchKey,std::piecewise_construct_t const&,std::tuple<md::PolylineOverlayBatchKey const&>,std::tuple<>>(*(uint64_t **)a1, 0, 0, (uint64_t)&v26);
  v17 = v16;
  v18 = (uint64_t *)v16[7];
  if ((unint64_t)v18 >= v16[8])
  {
    v19 = std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>::__push_back_slow_path<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>>((uint64_t)(v16 + 6), (uint64_t *)&v30);
  }
  else
  {
    if (v18)
    {
      v30 = 0;
      *v18 = v5;
    }
    v19 = v18 + 1;
  }
  v17[7] = v19;
  if (v13)
  {
    v20 = (unint64_t *)&v13->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v22 = v30;
  v30 = 0;
  if (v22)
  {
    (**v22)(v22);
    if ((v23 & 1) == 0)
    {
      {
        v25 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v25, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
    }
    (*(void (**)(uint64_t, void (***)(_QWORD), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                            + 40))(mdm::Allocator::instance(void)::alloc, v22, 136);
  }
}

void sub_19FA56440(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  md::components::Material::~Material((md::components::Material *)va);
  std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>::~unique_ptr[abi:nn180100]((void (****)(_QWORD))va1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::PolylineOverlayBatchKey,std::__hash_value_type<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,std::hash<md::PolylineOverlayBatchKey>,std::equal_to<md::PolylineOverlayBatchKey>,true>,std::__unordered_map_equal<md::PolylineOverlayBatchKey,std::__hash_value_type<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,std::equal_to<md::PolylineOverlayBatchKey>,std::hash<md::PolylineOverlayBatchKey>,true>,std::allocator<std::__hash_value_type<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>>>::__emplace_unique_key_args<md::PolylineOverlayBatchKey,std::piecewise_construct_t const&,std::tuple<md::PolylineOverlayBatchKey const&>,std::tuple<>>(uint64_t *a1, unsigned int a2, unsigned __int8 a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  unsigned __int8 v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t prime;
  void *v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  size_t v30;
  size_t v31;
  size_t v32;
  _QWORD *i;
  size_t v34;
  uint64_t v35;
  unint64_t v36;
  uint8x8_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  size_t v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  void *v46;
  uint64_t v47;

  v7 = a2;
  v8 = a1[1];
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = a2;
      if (v8 <= a2)
        v4 = a2 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & a2;
    }
    v10 = *(_QWORD **)(*a1 + 8 * v4);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = v11[1];
            if (v13 == a2)
            {
              if (*((_DWORD *)v11 + 4) == a2 && *((unsigned __int8 *)v11 + 40) == a3)
                return v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_25;
            }
            v11 = (_QWORD *)*v11;
            if (!v11)
              goto LABEL_25;
          }
        }
        do
        {
          v12 = v11[1];
          if (v12 == a2)
          {
            if (*((_DWORD *)v11 + 4) == a2 && *((unsigned __int8 *)v11 + 40) == a3)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_25:
  v14 = operator new(0x50uLL);
  v11 = v14;
  *v14 = 0;
  v14[1] = v7;
  *((_DWORD *)v14 + 4) = *(_DWORD *)a4;
  v15 = *(_QWORD *)(a4 + 16);
  v14[3] = *(_QWORD *)(a4 + 8);
  v14[4] = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v18 = a1 + 2;
  *((_BYTE *)v14 + 40) = *(_BYTE *)(a4 + 24);
  v14[7] = 0;
  v14[8] = 0;
  v14[6] = 0;
  {
    v47 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v47, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v11[9] = mdm::Allocator::instance(void)::alloc;
  v20 = (float)(unint64_t)(a1[3] + 1);
  v21 = *((float *)a1 + 8);
  if (!v8 || (float)(v21 * (float)v8) < v20)
  {
    v22 = 1;
    if (v8 >= 3)
      v22 = (v8 & (v8 - 1)) != 0;
    v23 = v22 | (2 * v8);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      prime = v24;
    else
      prime = v23;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v8 = a1[1];
    if (prime <= v8)
    {
      if (prime >= v8)
        goto LABEL_66;
      v36 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v8 < 3 || (v37 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        v36 = std::__next_prime(v36);
      }
      else
      {
        v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2)
          v36 = v38;
      }
      if (prime <= v36)
        prime = v36;
      if (prime >= v8)
      {
        v8 = a1[1];
LABEL_66:
        if ((v8 & (v8 - 1)) != 0)
        {
          if (v8 <= v7)
            v4 = v7 % v8;
          else
            v4 = v7;
        }
        else
        {
          v4 = ((_DWORD)v8 - 1) & v7;
        }
        goto LABEL_79;
      }
      if (!prime)
      {
        v46 = (void *)*a1;
        *a1 = 0;
        if (v46)
          operator delete(v46);
        v8 = 0;
        a1[1] = 0;
        goto LABEL_66;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v26 = operator new(8 * prime);
    v27 = (void *)*a1;
    *a1 = (uint64_t)v26;
    if (v27)
      operator delete(v27);
    v28 = 0;
    a1[1] = prime;
    do
      *(_QWORD *)(*a1 + 8 * v28++) = 0;
    while (prime != v28);
    v29 = (_QWORD *)*v18;
    if (!*v18)
    {
LABEL_65:
      v8 = prime;
      goto LABEL_66;
    }
    v30 = v29[1];
    v31 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v32 = v30 & v31;
      *(_QWORD *)(*a1 + 8 * v32) = v18;
      for (i = (_QWORD *)*v29; *v29; i = (_QWORD *)*v29)
      {
        v34 = i[1] & v31;
        if (v34 == v32)
        {
          v29 = i;
        }
        else if (*(_QWORD *)(*a1 + 8 * v34))
        {
          *v29 = *i;
          v35 = 8 * v34;
          *i = **(_QWORD **)(*a1 + v35);
          **(_QWORD **)(*a1 + v35) = i;
        }
        else
        {
          *(_QWORD *)(*a1 + 8 * v34) = v29;
          v29 = i;
          v32 = v34;
        }
      }
      goto LABEL_65;
    }
    if (v30 >= prime)
      v30 %= prime;
    *(_QWORD *)(*a1 + 8 * v30) = v18;
    v39 = (_QWORD *)*v29;
    if (!*v29)
      goto LABEL_65;
    while (1)
    {
      v41 = v39[1];
      if (v41 >= prime)
        v41 %= prime;
      if (v41 != v30)
      {
        if (!*(_QWORD *)(*a1 + 8 * v41))
        {
          *(_QWORD *)(*a1 + 8 * v41) = v29;
          goto LABEL_70;
        }
        *v29 = *v39;
        v40 = 8 * v41;
        *v39 = **(_QWORD **)(*a1 + v40);
        **(_QWORD **)(*a1 + v40) = v39;
        v39 = v29;
      }
      v41 = v30;
LABEL_70:
      v29 = v39;
      v39 = (_QWORD *)*v39;
      v30 = v41;
      if (!v39)
        goto LABEL_65;
    }
  }
LABEL_79:
  v42 = *a1;
  v43 = *(_QWORD **)(*a1 + 8 * v4);
  if (v43)
  {
    *v11 = *v43;
LABEL_87:
    *v43 = v11;
    goto LABEL_88;
  }
  *v11 = *v18;
  *v18 = v11;
  *(_QWORD *)(v42 + 8 * v4) = v18;
  if (*v11)
  {
    v44 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v44 >= v8)
        v44 %= v8;
    }
    else
    {
      v44 &= v8 - 1;
    }
    v43 = (_QWORD *)(*a1 + 8 * v44);
    goto LABEL_87;
  }
LABEL_88:
  ++a1[3];
  return v11;
}

void sub_19FA56970(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,void *>>>::operator()[abi:nn180100](1, v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>::__push_back_slow_path<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  BOOL v19;
  uint64_t v20;
  char *v21;
  _OWORD *v22;
  char *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  void (***v30)(_QWORD);
  void (***v31)(_QWORD);
  unsigned __int8 v32;
  uint64_t v33;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 61)
    abort();
  v5 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
  if (v5 >> 2 > v3)
    v3 = v5 >> 2;
  v19 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFF8;
  v6 = 0x1FFFFFFFFFFFFFFFLL;
  if (!v19)
    v6 = v3;
  if (v6)
  {
    v8 = 8 * v6;
    v9 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), 8 * v6, 8);
    v10 = (_QWORD *)(v9 + 8 * v2);
    v6 = v9 + v8;
    if (v9)
    {
      v11 = *a2;
      *a2 = 0;
      *v10 = v11;
    }
  }
  else
  {
    v10 = (_QWORD *)(8 * v2);
  }
  v12 = v10 + 1;
  v13 = *(char **)a1;
  v14 = *(char **)(a1 + 8);
  if (v14 == *(char **)a1)
  {
    *(_QWORD *)a1 = v10;
    *(_QWORD *)(a1 + 8) = v12;
    v29 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v6;
    goto LABEL_32;
  }
  v15 = (unint64_t)&v14[-*(_QWORD *)a1 - 8];
  if (v15 <= 0x57
    || ((v16 = (v13 - v14 + 7) & 0xFFFFFFFFFFFFFFF8,
         v17 = (unint64_t)&v14[v16],
         v18 = (char *)v10 + v16,
         v17 < (unint64_t)v10)
      ? (v19 = v18 >= v14)
      : (v19 = 1),
        !v19))
  {
    v21 = *(char **)(a1 + 8);
    do
    {
LABEL_22:
      v27 = *((_QWORD *)v21 - 1);
      v21 -= 8;
      *(_QWORD *)v21 = 0;
      *--v10 = v27;
    }
    while (v21 != v13);
    goto LABEL_23;
  }
  v20 = (v15 >> 3) + 1;
  v21 = &v14[-8 * (v20 & 0x3FFFFFFFFFFFFFFCLL)];
  v22 = v10 - 2;
  v23 = v14 - 32;
  v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v26 = *(_OWORD *)v23;
    v25 = *((_OWORD *)v23 + 1);
    *(_OWORD *)v23 = 0uLL;
    *((_OWORD *)v23 + 1) = 0uLL;
    v23 -= 32;
    *(v22 - 1) = v26;
    *v22 = v25;
    v22 -= 2;
    v24 -= 4;
  }
  while (v24);
  v10 -= v20 & 0x3FFFFFFFFFFFFFFCLL;
  if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_22;
LABEL_23:
  v14 = *(char **)a1;
  v28 = *(char **)(a1 + 8);
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + 8) = v12;
  v29 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  while (v28 != v14)
  {
    v31 = (void (***)(_QWORD))*((_QWORD *)v28 - 1);
    v28 -= 8;
    v30 = v31;
    *(_QWORD *)v28 = 0;
    if (v31)
    {
      (**v30)(v30);
      {
        v33 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v33, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      (*(void (**)(uint64_t, void (***)(_QWORD), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                              + 40))(mdm::Allocator::instance(void)::alloc, v30, 136);
    }
  }
LABEL_32:
  if (v14)
    (*(void (**)(_QWORD, char *, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v14, v29 - (_QWORD)v14);
  return v12;
}

void (****std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>::~unique_ptr[abi:nn180100](void (****a1)(_QWORD)))(_QWORD)
{
  void (***v2)(_QWORD);
  unsigned __int8 v3;
  uint64_t v5;
  geo::read_write_lock *v6;
  const char *v7;
  malloc_zone_t *zone;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    (**v2)(v2);
    {
      v5 = operator new();
      *(_QWORD *)(v5 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v5 + 24) = "VectorKitLabels";
      *(_OWORD *)(v5 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v5 = &off_1E42B5668;
      *(_QWORD *)(v5 + 8) = "VectorKitLabels";
      *(_OWORD *)(v5 + 72) = 0u;
      *(_OWORD *)(v5 + 88) = 0u;
      *(_OWORD *)(v5 + 104) = 0u;
      *(_OWORD *)(v5 + 120) = 0u;
      *(_OWORD *)(v5 + 136) = 0u;
      *(_OWORD *)(v5 + 152) = 0u;
      *(_OWORD *)(v5 + 168) = 0u;
      *(_OWORD *)(v5 + 184) = 0u;
      *(_OWORD *)(v5 + 200) = 0u;
      *(_OWORD *)(v5 + 216) = 0u;
      *(_OWORD *)(v5 + 232) = 0u;
      *(_QWORD *)(v5 + 248) = 0;
      *(_OWORD *)(v5 + 56) = 0u;
      v6 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v5 + 56), 0);
      if ((_DWORD)v6)
        geo::read_write_lock::logFailure(v6, (uint64_t)"initialization", v7);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v5 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v5 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v5;
    }
    (*(void (**)(uint64_t, void (***)(_QWORD), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                            + 40))(mdm::Allocator::instance(void)::alloc, v2, 136);
  }
  return a1;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,void *>>>::operator()[abi:nn180100](char a1, _QWORD *__p)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  void (***v6)(_QWORD, uint64_t);
  void (***v7)(_QWORD, uint64_t);
  unsigned __int8 v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a1)
  {
    v3 = (_QWORD *)__p[6];
    if (v3)
    {
      v4 = (_QWORD *)__p[7];
      v5 = __p[6];
      if (v4 != v3)
      {
        do
        {
          v7 = (void (***)(_QWORD, uint64_t))*--v4;
          v6 = v7;
          *v4 = 0;
          if (v7)
          {
            (**v6)(v6, v5);
            {
              v9 = operator new();
              mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v9, "VectorKitLabels", 0x5ED09DD50000000FLL);
            }
            (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                             + 40))(mdm::Allocator::instance(void)::alloc, v6, 136);
          }
        }
        while (v4 != v3);
        v5 = __p[6];
      }
      __p[7] = v3;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)__p[9] + 40))(__p[9], v5, __p[8] - v5);
    }
    v10 = (std::__shared_weak_count *)__p[4];
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    goto LABEL_20;
  }
  if (__p)
LABEL_20:
    operator delete(__p);
}

void md::PolylineOverlayRibbon::~PolylineOverlayRibbon(md::PolylineOverlayRibbon *this)
{
  unsigned __int8 v2;
  uint64_t v3;
  geo::read_write_lock *v4;
  const char *v5;
  malloc_zone_t *zone;

  *(_QWORD *)this = off_1E42AF568;
  if (*((_BYTE *)this + 64))
  {
    {
      v3 = operator new();
      *(_QWORD *)(v3 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v3 + 24) = "VectorKitLabels";
      *(_OWORD *)(v3 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v3 = &off_1E42B5668;
      *(_QWORD *)(v3 + 8) = "VectorKitLabels";
      *(_OWORD *)(v3 + 72) = 0u;
      *(_OWORD *)(v3 + 88) = 0u;
      *(_OWORD *)(v3 + 104) = 0u;
      *(_OWORD *)(v3 + 120) = 0u;
      *(_OWORD *)(v3 + 136) = 0u;
      *(_OWORD *)(v3 + 152) = 0u;
      *(_OWORD *)(v3 + 168) = 0u;
      *(_OWORD *)(v3 + 184) = 0u;
      *(_OWORD *)(v3 + 200) = 0u;
      *(_OWORD *)(v3 + 216) = 0u;
      *(_OWORD *)(v3 + 232) = 0u;
      *(_QWORD *)(v3 + 248) = 0;
      *(_OWORD *)(v3 + 56) = 0u;
      v4 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v3 + 56), 0);
      if ((_DWORD)v4)
        geo::read_write_lock::logFailure(v4, (uint64_t)"initialization", v5);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v3 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v3 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v3;
    }
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, *((_QWORD *)this + 9), 0);
  }
}

{
  unsigned __int8 v2;
  uint64_t v3;
  geo::read_write_lock *v4;
  const char *v5;
  malloc_zone_t *zone;

  *(_QWORD *)this = off_1E42AF568;
  if (*((_BYTE *)this + 64))
  {
    {
      v3 = operator new();
      *(_QWORD *)(v3 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v3 + 24) = "VectorKitLabels";
      *(_OWORD *)(v3 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v3 = &off_1E42B5668;
      *(_QWORD *)(v3 + 8) = "VectorKitLabels";
      *(_OWORD *)(v3 + 72) = 0u;
      *(_OWORD *)(v3 + 88) = 0u;
      *(_OWORD *)(v3 + 104) = 0u;
      *(_OWORD *)(v3 + 120) = 0u;
      *(_OWORD *)(v3 + 136) = 0u;
      *(_OWORD *)(v3 + 152) = 0u;
      *(_OWORD *)(v3 + 168) = 0u;
      *(_OWORD *)(v3 + 184) = 0u;
      *(_OWORD *)(v3 + 200) = 0u;
      *(_OWORD *)(v3 + 216) = 0u;
      *(_OWORD *)(v3 + 232) = 0u;
      *(_QWORD *)(v3 + 248) = 0;
      *(_OWORD *)(v3 + 56) = 0u;
      v4 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v3 + 56), 0);
      if ((_DWORD)v4)
        geo::read_write_lock::logFailure(v4, (uint64_t)"initialization", v5);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v3 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v3 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v3;
    }
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, *((_QWORD *)this + 9), 0);
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__function::__func<md::PolygonOverlayMeshBuilder::buildFillAntialiasMesh(std::vector<md::PolygonOverlayMeshBuilder::MeshInfo> const&,ggl::Loader &)::$_0,std::allocator<md::PolygonOverlayMeshBuilder::buildFillAntialiasMesh(std::vector<md::PolygonOverlayMeshBuilder::MeshInfo> const&,ggl::Loader &)::$_0>,void ()(ggl::ResourceAccessor *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::PolygonOverlayMeshBuilder::buildFillAntialiasMesh(std::vector<md::PolygonOverlayMeshBuilder::MeshInfo> const&,ggl::Loader &)::$_0,std::allocator<md::PolygonOverlayMeshBuilder::buildFillAntialiasMesh(std::vector<md::PolygonOverlayMeshBuilder::MeshInfo> const&,ggl::Loader &)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E42D2D40;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<md::PolygonOverlayMeshBuilder::buildFillAntialiasMesh(std::vector<md::PolygonOverlayMeshBuilder::MeshInfo> const&,ggl::Loader &)::$_0,std::allocator<md::PolygonOverlayMeshBuilder::buildFillAntialiasMesh(std::vector<md::PolygonOverlayMeshBuilder::MeshInfo> const&,ggl::Loader &)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E42D2D40;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<md::PolygonOverlayMeshBuilder::buildFillAntialiasMesh(std::vector<md::PolygonOverlayMeshBuilder::MeshInfo> const&,ggl::Loader &)::$_0,std::allocator<md::PolygonOverlayMeshBuilder::buildFillAntialiasMesh(std::vector<md::PolygonOverlayMeshBuilder::MeshInfo> const&,ggl::Loader &)::$_0>,void ()(ggl::ResourceAccessor *)>::operator()(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  float *v21;
  uint64_t v22;
  float *v23;
  float v24;
  float v25;
  float v26;
  float *v27;
  float v28;
  float v29;
  int v30;
  uint64_t v31;
  float v32;
  int v33;
  float v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  float *v40;
  _DWORD *v41;
  uint64_t v42;
  float *v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  int v50;
  int v51;
  float v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  _WORD *v57;
  __int16 v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD v63[4];
  _QWORD v64[5];

  v2 = result;
  v64[4] = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v4 = **(_QWORD **)(**(_QWORD **)(result + 16) + 64);
  v61 = *(_QWORD *)(v4 + 8) * **(_QWORD **)(result + 32);
  v62 = v4;
  if (v61)
  {
    if (v3 && *(_BYTE *)(v4 + 17) != 2)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 56))(v3);
      v5 = result;
    }
    else
    {
      v5 = *(_QWORD *)(v4 + 72);
    }
  }
  else
  {
    v5 = 0;
  }
  v6 = *(_QWORD *)(**(_QWORD **)(v2 + 16) + 96);
  v60 = *(_QWORD *)(v6 + 8) * **(_QWORD **)(v2 + 40);
  if (v60)
  {
    if (v3 && *(_BYTE *)(v6 + 17) != 2)
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v3 + 56))(v3, v6, 0);
      v7 = result;
    }
    else
    {
      v7 = *(_QWORD *)(v6 + 72);
    }
  }
  else
  {
    v7 = 0;
  }
  v8 = *(uint64_t **)(v2 + 8);
  v9 = *v8;
  v10 = v8[1];
  if (v9 != v10)
  {
    v11 = 0;
    v12 = 0;
    result = 1065353216;
    do
    {
      v64[0] = &off_1E42D5BF0;
      v64[1] = v9;
      v64[3] = v64;
      v13 = *(float **)v9;
      v14 = *(_QWORD *)(v9 + 8) - *(_QWORD *)v9;
      v63[3] = v63;
      v63[0] = &off_1E42D5BF0;
      v63[1] = v9;
      if ((unint64_t)v14 > 0x17)
      {
        v15 = *(_QWORD *)v13;
        v16 = (v14 >> 3) - 1;
        v17 = *(_QWORD *)&v13[2 * v16];
        if (v16 || v15 != v17)
        {
          v20 = *(_QWORD *)(v9 + 24);
          v19 = *(_QWORD *)(v9 + 32);
          if (v19 != v20)
          {
            v21 = *(float **)v9;
            v22 = *(_QWORD *)(v9 + 8) - *(_QWORD *)v9;
            if (v22)
            {
              v23 = &v21[2 * (v22 >> 3 != 1)];
              v24 = v21[1];
              v25 = *v23 - *v21;
              v26 = v23[1] - v24;
              v27 = &v21[2 * (v22 >> 3)];
              v28 = *v21 - *(v27 - 2);
              v29 = v24 - *(v27 - 1);
              LODWORD(v27) = (int)(float)(*v21 * 65535.0);
              v30 = (int)(float)(v24 * 65535.0);
              v31 = v5 + 16 * v11;
              *(_WORD *)(v31 + 8) = (_WORD)v27;
              *(_WORD *)(v31 + 10) = v30;
              *(_WORD *)(v31 + 24) = (_WORD)v27;
              *(_WORD *)(v31 + 26) = v30;
              v32 = 32768.0 / sqrtf((float)(v28 * v28) + (float)(v29 * v29));
              LODWORD(v27) = (int)(float)(v32 * v28);
              v33 = (int)(float)(v32 * v29);
              v34 = 32768.0 / sqrtf((float)(v25 * v25) + (float)(v26 * v26));
              v35 = (int)(float)(v34 * v25);
              v36 = (int)(float)(v34 * v26);
              *(_WORD *)v31 = (_WORD)v27;
              *(_WORD *)(v31 + 2) = v33;
              *(_WORD *)(v31 + 4) = v35;
              *(_WORD *)(v31 + 6) = v36;
              *(_WORD *)(v31 + 16) = (_WORD)v27;
              *(_WORD *)(v31 + 18) = v33;
              *(_WORD *)(v31 + 20) = v35;
              *(_WORD *)(v31 + 22) = v36;
              v37 = (unint64_t)(v22 >> 3) <= 1 ? 1 : v22 >> 3;
              *(_DWORD *)(v31 + 12) = 1065353216;
              *(_DWORD *)(v31 + 28) = 0;
              if ((unint64_t)v22 >= 0x10)
              {
                v38 = 0;
                v39 = v37 - 1;
                v40 = v21 + 2;
                v41 = (_DWORD *)(v5 + 60 + 16 * v11);
                do
                {
                  v42 = v38 + 2;
                  if ((v22 >> 3) - 2 == v38)
                    v42 = 0;
                  v43 = &v21[2 * v42];
                  v44 = v40[1];
                  v45 = *v43 - *v40;
                  v46 = v43[1] - v44;
                  v47 = *v40 - *(v40 - 2);
                  v48 = v44 - *(v40 - 1);
                  v49 = sqrtf((float)(v47 * v47) + (float)(v48 * v48));
                  LODWORD(v43) = (int)(float)(*v40 * 65535.0);
                  v50 = (int)(float)(v44 * 65535.0);
                  *((_WORD *)v41 - 10) = (_WORD)v43;
                  *((_WORD *)v41 - 9) = v50;
                  *((_WORD *)v41 - 2) = (_WORD)v43;
                  LODWORD(v43) = (int)(float)((float)(32768.0 / v49) * v47);
                  v51 = (int)(float)((float)(32768.0 / v49) * v48);
                  v52 = 32768.0 / sqrtf((float)(v45 * v45) + (float)(v46 * v46));
                  v53 = (int)(float)(v52 * v45);
                  *((_WORD *)v41 - 1) = v50;
                  v54 = (int)(float)(v52 * v46);
                  *((_WORD *)v41 - 14) = (_WORD)v43;
                  *((_WORD *)v41 - 13) = v51;
                  *((_WORD *)v41 - 12) = v53;
                  *((_WORD *)v41 - 11) = v54;
                  *((_WORD *)v41 - 6) = (_WORD)v43;
                  *((_WORD *)v41 - 5) = v51;
                  *((_WORD *)v41 - 4) = v53;
                  *((_WORD *)v41 - 3) = v54;
                  *(v41 - 4) = 1065353216;
                  *v41 = 0;
                  v41 += 8;
                  ++v38;
                  v40 += 2;
                }
                while (v39 != v38);
              }
            }
            v55 = v22 >> 2;
            v56 = 2 * (((v19 - v20) >> 3) + ((v19 - v20) >> 4));
            v57 = (_WORD *)(v7 + 6 + 2 * v12);
            do
            {
              v58 = v11 + 2 * *(_WORD *)v20;
              *(v57 - 3) = v58;
              v59 = v11 + 2 * *(_DWORD *)(v20 + 8);
              *(v57 - 2) = v11 + 2 * *(_WORD *)(v20 + 8);
              *(v57 - 1) = ++v58;
              *v57 = v58;
              v57[1] = v59;
              v57[2] = v59 + 1;
              v57 += 6;
              v20 += 16;
            }
            while (v20 != v19);
            v11 += v55;
            v12 += v56;
          }
        }
      }
      v9 += 88;
    }
    while (v9 != v10);
  }
  if (v7 && v60 && v3 && *(_BYTE *)(v6 + 17) != 2)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 64))(v3);
  if (v5 && v61 && v3 && *(_BYTE *)(v62 + 17) != 2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(v3, v5, v62, 0, v61, 1, 1);
  return result;
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::PolygonOverlay::AntialiasVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DFDF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::PolygonOverlay::AntialiasVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DFDF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::PolygonOverlay::AntialiasVbo>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<md::PolygonOverlayMeshBuilder::buildFillMesh(std::vector<md::PolygonOverlayMeshBuilder::MeshInfo> const&,ggl::Loader &)::$_0,std::allocator<md::PolygonOverlayMeshBuilder::buildFillMesh(std::vector<md::PolygonOverlayMeshBuilder::MeshInfo> const&,ggl::Loader &)::$_0>,void ()(ggl::ResourceAccessor *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::PolygonOverlayMeshBuilder::buildFillMesh(std::vector<md::PolygonOverlayMeshBuilder::MeshInfo> const&,ggl::Loader &)::$_0,std::allocator<md::PolygonOverlayMeshBuilder::buildFillMesh(std::vector<md::PolygonOverlayMeshBuilder::MeshInfo> const&,ggl::Loader &)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E42D2CB0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<md::PolygonOverlayMeshBuilder::buildFillMesh(std::vector<md::PolygonOverlayMeshBuilder::MeshInfo> const&,ggl::Loader &)::$_0,std::allocator<md::PolygonOverlayMeshBuilder::buildFillMesh(std::vector<md::PolygonOverlayMeshBuilder::MeshInfo> const&,ggl::Loader &)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E42D2CB0;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::PolygonOverlayMeshBuilder::buildFillMesh(std::vector<md::PolygonOverlayMeshBuilder::MeshInfo> const&,ggl::Loader &)::$_0,std::allocator<md::PolygonOverlayMeshBuilder::buildFillMesh(std::vector<md::PolygonOverlayMeshBuilder::MeshInfo> const&,ggl::Loader &)::$_0>,void ()(ggl::ResourceAccessor *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  unint64_t v24;
  int16x8_t v25;
  float32x4_t v26;
  float32x4_t v27;
  int16x8_t v28;
  float32x4_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  __int16 *v34;
  uint64_t v35;
  const float *v36;
  unint64_t v37;
  __int128 v38;
  __int128 v39;
  const float *v40;
  float32x4_t v41;
  int16x8_t v42;
  int16x8_t v43;
  unint64_t v44;
  float *v45;
  _DWORD *v46;
  int v47;
  float v48;
  _WORD *v49;
  unint64_t v50;
  unint64_t v51;
  NSObject *v52;
  uint64_t v53;
  int16x8_t v54;
  unint64_t v55;
  int16x8_t *v56;
  int16x8_t v57;
  float32x4_t v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE buf[22];
  _BYTE *v70;
  uint64_t (**v71)();
  _QWORD *v72[2];
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  int v79;
  _WORD *v80;
  _BYTE *v81;
  uint64_t v82;
  uint64_t v83;
  float32x4x2_t v84;

  v83 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v4 = **(_QWORD **)(**(_QWORD **)(a1 + 16) + 64);
  v5 = *(_QWORD *)(v4 + 8) * **(_QWORD **)(a1 + 24);
  *(_QWORD *)&v6 = v3;
  *(_QWORD *)&v7 = v3;
  *((_QWORD *)&v7 + 1) = v4;
  if (v5)
  {
    if (v3 && *(_BYTE *)(v4 + 17) != 2)
    {
      v60 = v7;
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 56))(v3);
      v7 = v60;
      *(_QWORD *)&v6 = v3;
    }
    else
    {
      v8 = *(_QWORD *)(v4 + 72);
    }
  }
  else
  {
    v8 = 0;
  }
  v66 = v7;
  v67 = v5;
  v68 = v8;
  v9 = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 96);
  v10 = *(_QWORD *)(v9 + 8) * **(_QWORD **)(a1 + 32);
  *((_QWORD *)&v6 + 1) = v9;
  if (v10)
  {
    if (v3 && *(_BYTE *)(v9 + 17) != 2)
    {
      v62 = v6;
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 56))(v3);
      v6 = v62;
    }
    else
    {
      v11 = *(_QWORD *)(v9 + 72);
    }
  }
  else
  {
    v11 = 0;
  }
  v64 = v6;
  v65 = v11;
  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(_QWORD **)v12;
  v14 = *(_QWORD **)(v12 + 8);
  if (*(_QWORD **)v12 != v14)
  {
    v15 = 0;
    v63 = 0;
    v58 = (float32x4_t)vdupq_n_s32(0x477FFF00u);
    *(_QWORD *)&v16 = 0x8000800080008000;
    *((_QWORD *)&v16 + 1) = 0x8000800080008000;
    v59 = v16;
    do
    {
      v71 = &off_1E42D5BF0;
      v72[0] = v13;
      *(_QWORD *)&v73 = &v71;
      v17 = (uint64_t *)*v13;
      v18 = v13[1] - *v13;
      v70 = buf;
      *(_QWORD *)buf = &off_1E42D5BF0;
      *(_QWORD *)&buf[8] = v13;
      if ((unint64_t)v18 <= 0x17)
        goto LABEL_15;
      v19 = *v17;
      v20 = (v18 >> 3) - 1;
      v21 = v17[v20];
      if (!v20 && v19 == v21)
        goto LABEL_15;
      v71 = &off_1E42D5BF0;
      v72[0] = v13;
      *(_QWORD *)&v73 = &v71;
      v23 = v13[1] - *v13;
      if ((unint64_t)v23 <= 0x17)
        goto LABEL_15;
      if (v23 >> 3 == 1)
        goto LABEL_15;
      v24 = geo::triangulatedIndexCount<float>(v13);
      if (!v24)
        goto LABEL_15;
      v30 = *v13;
      v31 = v13[1] - *v13;
      if (v31)
      {
        v32 = v31 >> 3;
        if ((unint64_t)(v31 >> 3) <= 1)
          v32 = 1;
        if (v32 <= 0xF)
        {
          v33 = 0;
LABEL_37:
          v44 = v32 - v33;
          v45 = (float *)(v30 + 8 * v33 + 4);
          v46 = (_DWORD *)(v68 + 8 * (v33 + v15) + 4);
          do
          {
            v25.i32[0] = 1199570688;
            v47 = (int)(float)(*(v45 - 1) * 65535.0);
            v48 = *v45;
            v45 += 2;
            *((_WORD *)v46 - 2) = v47;
            *((_WORD *)v46 - 1) = (int)(float)(v48 * 65535.0);
            *v46 = 0x7FFF;
            v46 += 2;
            --v44;
          }
          while (v44);
          goto LABEL_39;
        }
        v33 = 0;
        v34 = (__int16 *)(v68 + 8 * v15);
        v35 = 4 * (v32 - 1);
        if (&v34[v35] < v34)
          goto LABEL_37;
        if (&v34[v35 + 1] < v34 + 1)
          goto LABEL_37;
        if (&v34[v35 + 2] < v34 + 2)
          goto LABEL_37;
        if (&v34[v35 + 3] < v34 + 3)
          goto LABEL_37;
        if ((v32 - 1) >> 61)
          goto LABEL_37;
        v33 = v32 & 0xFFFFFFFFFFFFFFF8;
        v36 = (const float *)*v13;
        v37 = v32 & 0xFFFFFFFFFFFFFFF8;
        v38 = v59;
        v39 = 0u;
        do
        {
          v40 = v36;
          v84 = vld2q_f32(v40);
          v40 += 8;
          *(float32x4x2_t *)(&v27 - 1) = vld2q_f32(v40);
          v29 = (float32x4_t)vcvtq_u32_f32(vmulq_f32(v84.val[0], v58));
          v28 = (int16x8_t)vcvtq_u32_f32(vmulq_f32(v41, v58));
          v42 = vuzp1q_s16((int16x8_t)v29, v28);
          v26 = vmulq_f32(v27, v58);
          v84.val[0] = (float32x4_t)vcvtq_u32_f32(vmulq_f32(v84.val[1], v58));
          v25 = (int16x8_t)vcvtq_u32_f32(v26);
          v43 = vuzp1q_s16((int16x8_t)v84.val[0], v25);
          vst4q_s16(v34, *(int16x8x4_t *)(&v38 - 2));
          v34 += 32;
          v36 += 16;
          v37 -= 8;
        }
        while (v37);
        if (v32 != v33)
          goto LABEL_37;
      }
LABEL_39:
      v72[0] = 0;
      v72[1] = 0;
      v71 = (uint64_t (**)())v72;
      v73 = xmmword_19FFB5070;
      v78 = 0;
      v75 = 0;
      v76 = 0;
      v74 = 0;
      v77 = 0;
      v79 = 4;
      v81 = 0;
      v82 = 0;
      v80 = 0;
      md::Triangulator<float>::triangulate((uint64_t)&v71, v13, (float32x4_t)xmmword_19FFB5070, *(double *)v25.i64, v26, *(double *)v27.i64, *(double *)v28.i64, v29);
      v49 = v80;
      v61 = (v81 - (_BYTE *)v80) >> 1;
      if (v24 != v61)
      {
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
        v52 = (id)GEOGetVectorKitVKDefaultLog_log;
        if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          *(_QWORD *)&buf[4] = v24;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = (v81 - (_BYTE *)v80) >> 1;
          _os_log_impl(&dword_19F029000, v52, OS_LOG_TYPE_ERROR, "Mismatching number of indices, indexCount: %zu, triangulatedIndexCount: %zu", buf, 0x16u);
        }

        bzero((void *)(v65 + 2 * v63), 2 * v24);
        v49 = v80;
        if (!v80)
          goto LABEL_61;
        goto LABEL_60;
      }
      if (v81 == (_BYTE *)v80)
      {
        v49 = v81;
        if (!v81)
          goto LABEL_61;
        goto LABEL_60;
      }
      if (v24 <= 1)
        v50 = 1;
      else
        v50 = v24;
      if (v50 > 0xF && (unint64_t)(2 * v63 + v65 - (_QWORD)v80) >= 0x20)
      {
        v53 = 0;
        v51 = v50 & 0xFFFFFFFFFFFFFFF0;
        v54 = vdupq_n_s16(v15);
        v55 = v50 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v56 = (int16x8_t *)(v65 + 2 * v63 + v53 * 2);
          v57 = vaddq_s16(*(int16x8_t *)&v49[v53 + 8], v54);
          *v56 = vaddq_s16(*(int16x8_t *)&v49[v53], v54);
          v56[1] = v57;
          v53 += 16;
          v55 -= 16;
        }
        while (v55);
        if (v50 == v51)
          goto LABEL_60;
      }
      else
      {
        v51 = 0;
      }
      do
      {
        *(_WORD *)(v65 + 2 * v63 + 2 * v51) = v49[v51] + v15;
        ++v51;
      }
      while (v50 != v51);
LABEL_60:
      v81 = v49;
      operator delete(v49);
LABEL_61:
      geo::Pool<geo::Triangulator<float,unsigned short>::Node>::disposeElements((uint64_t)&v71);
      std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v72[0]);
      if (v24 != v61)
      {
        **(_BYTE **)(a1 + 40) = 1;
        break;
      }
      v63 += v24;
      v15 += (uint64_t)(v13[1] - *v13) >> 3;
LABEL_15:
      v13 += 11;
    }
    while (v13 != v14);
  }
  if (v65 && v10 && (_QWORD)v64 && *(_BYTE *)(*((_QWORD *)&v64 + 1) + 17) != 2)
    (*(void (**)(void))(*(_QWORD *)v64 + 64))();
  if (v68 && v67 && (_QWORD)v66 && *(_BYTE *)(*((_QWORD *)&v66 + 1) + 17) != 2)
    (*(void (**)(void))(*(_QWORD *)v66 + 64))();
}

void sub_19FA57E58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v39 - 200));
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a33);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a39);
  _Unwind_Resume(a1);
}

uint64_t md::PolygonOverlayMeshBuilder::buildPolygonMeshesFromMeshInfos(_QWORD *a1, uint64_t **a2, _QWORD *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, int *a7)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t result;
  int v31;
  char v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t v37;

  *a1 = 0;
  a1[1] = 0;
  md::PolygonOverlayMeshBuilder::buildVectorOverlayMesh(&v37, a2, a3);
  *a1 = v37;
  v14 = (std::__shared_weak_count *)a4[1];
  v35 = *a4;
  v36 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  v17 = (std::__shared_weak_count *)a5[1];
  v33 = *a5;
  v34 = v17;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v32 = 0;
  v31 = *a7;
  md::PolygonOverlayMeshBuilder::buildStrokeRibbon(&v37, *a2, a2[1], a3, (uint64_t)&v35, (uint64_t)&v33, a6, &v32, 0.0, &v31);
  v20 = v34;
  if (v34)
  {
    v21 = (unint64_t *)&v34->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = v36;
  if (v36)
  {
    v24 = (unint64_t *)&v36->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = *(uint64_t **)(v37 + 32);
  if (*(uint64_t **)(v37 + 40) == v26)
  {
    v28 = 0;
  }
  else
  {
    v27 = *v26;
    v28 = (_QWORD *)operator new();
    ggl::Mesh::Mesh((uint64_t)v28, v27);
    *v28 = &off_1E42BAF50;
    v28[2] = &unk_1E42BAF70;
  }
  v29 = a1[1];
  a1[1] = v28;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  result = v37;
  v37 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_19FA5807C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  md::PolygonOverlayMeshBuilder::PolygonMeshes *v16;
  uint64_t v17;

  MEMORY[0x1A1AF4E00](v17, 0x10F1C406E726BBALL);
  if (a16)
    (*(void (**)(uint64_t))(*(_QWORD *)a16 + 8))(a16);
  md::PolygonOverlayMeshBuilder::PolygonMeshes::~PolygonMeshes(v16);
  _Unwind_Resume(a1);
}

uint64_t ggl::VertexDataTyped<ggl::BuildingFacade::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::VertexDataTyped<ggl::BuildingFacade::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::VertexDataTyped<ggl::BuildingFacade::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v2 = *(_QWORD *)(a1 - 128);
  if (v2)
  {
    *(_QWORD *)(a1 - 120) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v2, *(_QWORD *)(a1 - 112) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  v2 = a1 - 200;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 - 120) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v3, *(_QWORD *)(a1 - 112) - v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 - 168);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::BuildingFacade::DefaultVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::BuildingFacade::DefaultVbo>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DFD48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::BuildingFacade::DefaultVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::BuildingFacade::DefaultVbo>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DFD48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::BuildingFacade::DefaultVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::BuildingFacade::DefaultVbo>,ggl::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 32))(a1 + 32);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::BuildingFacade::DefaultVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::BuildingFacade::DefaultVbo>,ggl::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a1, 256);
}

void ggl::BuildingFacade::BuildingMesh::~BuildingMesh(ggl::BuildingFacade::BuildingMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::BuildingFacade::BuildingMesh::~BuildingMesh(ggl::BuildingFacade::BuildingMesh *this)
{
  ggl::Mesh::~Mesh((ggl::BuildingFacade::BuildingMesh *)((char *)this - 16));
}

{
  ggl::Mesh::~Mesh((ggl::BuildingFacade::BuildingMesh *)((char *)this - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::MeshTyped<ggl::BuildingFacade::DefaultVbo>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::MeshTyped<ggl::BuildingFacade::DefaultVbo>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A1AF4E00);
}

void md::CartographicRenderLayer::featureMarkerAt(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void std::__function::__func<md::CartographicRenderLayer::frame(md::LayoutContext const&)::$_0,std::allocator<md::CartographicRenderLayer::frame(md::LayoutContext const&)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::CartographicRenderLayer::frame(md::LayoutContext const&)::$_0,std::allocator<md::CartographicRenderLayer::frame(md::LayoutContext const&)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42D19D8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void md::MapDataAccess::groundCoordinateForScreenPoint(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4, float64x2_t a5)
{
  uint64_t v7;
  float64x2_t v10;
  float64x2_t v11;
  int v12;
  double v13;
  double v15;
  double v16;
  long double v18;
  long double v24;
  long double v25;
  long double v26;
  long double v27;
  float64x2_t v28;
  double v29;
  float64x2_t v30;
  double v31;

  v7 = *(_QWORD *)(a2 + 16);
  if (*(double *)(v7 + 376) * *(double *)(v7 + 368) == 0.0)
  {
    *(int64x2_t *)a1 = vdupq_n_s64(0xC00921FB54442D18);
    *(_QWORD *)(a1 + 16) = 0;
  }
  else
  {
    v10 = vsubq_f64(a5, vcvtq_f64_f32(vcvt_f32_f64(vmulq_f64(*(float64x2_t *)(v7 + 368), vcvtq_f64_f32(*(float32x2_t *)(v7 + 488))))));
    v11 = vdivq_f64(vaddq_f64(v10, v10), *(float64x2_t *)(v7 + 368));
    gdc::ViewDataAccess::worldRayFromScreenNormalizedPoint((uint64_t)&v28, v7, (double *)a3, v11.f64[0] + -1.0, 1.0 - v11.f64[1]);
    v12 = *(unsigned __int8 *)(a2 + 9);
    if ((v12 - 1) < 2)
    {
      md::MapDataAccess::_globeGroundCoordinateForScreenPoint(a1, (unsigned __int8 *)a2, (double *)a3, v28.f64, a4);
    }
    else if (v12 == 3)
    {
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a3 + 16);
    }
    else if (!*(_BYTE *)(a2 + 9))
    {
      if (fabs(v31) <= 2.22044605e-16)
      {
        _Q1 = v28;
        v15 = v29;
      }
      else
      {
        v13 = -(v29 + *(double *)(a3 + 16) * -0.0000000249532021) / v31;
        _Q1 = vmlaq_n_f64(v28, v30, v13);
        v15 = v29 + v13 * v31;
      }
      v16 = v15 * 40075017.0;
      _D8 = 0x401921FB54442D18;
      v18 = 6.28318531 * _Q1.f64[0];
      __asm { FMLA            D0, D8, V1.D[1]; __x }
      v24 = exp(_D0);
      v25 = atan(v24) * 2.0 + -1.57079633;
      v26 = fmod(v18, 6.28318531);
      v27 = fmod(v26 + 6.28318531, 6.28318531);
      *(long double *)a1 = v25;
      *(long double *)(a1 + 8) = v27 + -3.14159265;
      *(double *)(a1 + 16) = v16;
    }
  }
}

void md::MapDataAccess::_globeGroundCoordinateForScreenPoint(uint64_t a1, unsigned __int8 *a2, double *a3, double *a4, _BYTE *a5)
{
  double v10;
  double v11;
  __double2 v12;
  double v13;
  __double2 v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  int v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double *v31;
  double v32;
  long double v33;
  long double v34;
  long double v35;
  double v36;
  double v37;
  long double v38;
  __double2 v39;
  long double v40;
  long double v41;
  double v42;
  long double v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  char v47;
  double v48;

  v10 = a3[1];
  v11 = a3[2];
  v12 = __sincos_stret(*a3);
  v13 = 6378137.0 / sqrt(v12.__sinval * v12.__sinval * -0.00669437999 + 1.0);
  v14 = __sincos_stret(v10);
  v15 = (v13 + v11) * v12.__cosval * v14.__cosval * ((v13 + v11) * v12.__cosval * v14.__cosval)
      + (v13 + v11) * v12.__cosval * v14.__sinval * ((v13 + v11) * v12.__cosval * v14.__sinval)
      + (v11 + v13 * 0.99330562) * v12.__sinval * ((v11 + v13 * 0.99330562) * v12.__sinval);
  v48 = 0.0;
  v16 = *a4;
  v17 = a4[1];
  v18 = a4[2];
  v19 = a4[3];
  v20 = a4[4];
  v21 = a4[5];
  v22 = v19 * v19 + v20 * v20 + v21 * v21;
  v23 = v19 * *a4 + v20 * v17 + v21 * v18;
  v24 = v23 + v23;
  v25 = (v15 - (v16 * v16 + v17 * v17 + v18 * v18)) * (4.0 * v22) + v24 * v24;
  if (v25 < 0.0)
  {
LABEL_2:
    v26 = 0;
    if (!a5)
      goto LABEL_4;
    goto LABEL_3;
  }
  v28 = sqrt(v25);
  v29 = (v28 + v24) * -0.5 / v22;
  v30 = (v28 - v24) * 0.5 / v22;
  if (v29 >= 0.0)
  {
    v48 = v29;
    v31 = (double *)&v47;
  }
  else
  {
    if (v30 < 0.0)
      goto LABEL_2;
    v31 = &v48;
  }
  *v31 = v30;
  v26 = 1;
  if (a5)
LABEL_3:
    *a5 = v26;
LABEL_4:
  if (v26)
  {
    v27 = v48;
  }
  else
  {
    v32 = sqrt((a3[3] + cos(3.14159265 - a3[4]) * -12756274.0) * a3[3] + 4.06806316e13);
    v27 = sqrt((v32 + 6378137.0) * (v32 + -6378137.0));
  }
  v33 = v16 + v19 * v27;
  v34 = v17 + v20 * v27;
  v35 = v18 + v21 * v27;
  v36 = sqrt(v33 * v33 + v34 * v34);
  v37 = atan2(v35, v36 * 0.996647189);
  v38 = atan2(v34, v33);
  v39 = __sincos_stret(v37);
  v40 = atan2(v35 + v39.__sinval * v39.__sinval * 42841.3115 * v39.__sinval, v36 + v39.__cosval * v39.__cosval * -42697.6727 * v39.__cosval);
  v41 = sin(v40);
  v42 = -6378137.0 / sqrt(v41 * v41 * -0.00669437999 + 1.0);
  v43 = cos(v40);
  *(long double *)a1 = v40;
  *(long double *)(a1 + 8) = v38;
  *(long double *)(a1 + 16) = v36 / v43 + v42;
  md::MapDataAccess::heightAtCoordinate(a2, (_OWORD *)a1);
  if (v45)
    v46 = v44;
  else
    v46 = 0;
  *(_QWORD *)(a1 + 16) = v46;
}

void md::MapDataAccess::groundCoordinateForScreenCursor(uint64_t a1, uint64_t a2, uint64_t a3, int32x2_t a4)
{
  uint64_t v6;
  float64x2_t v7;
  double v9;
  float64x2_t v10;
  float64_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  int v15;
  double v16;
  double v18;
  double v19;
  long double v21;
  long double v27;
  long double v28;
  long double v29;
  long double v30;
  float64x2_t v31;
  double v32;
  float64x2_t v33;
  double v34;

  v6 = *(_QWORD *)(a2 + 16);
  v7.f64[0] = *(float64_t *)(v6 + 368);
  if (*(double *)(v6 + 376) * v7.f64[0] == 0.0)
  {
    *(int64x2_t *)a1 = vdupq_n_s64(0xC00921FB54442D18);
    *(_QWORD *)(a1 + 16) = 0;
  }
  else
  {
    v9 = *(float *)(v6 + 448);
    v10.f64[0] = *(float *)(v6 + 488);
    v10.f64[1] = *(float64_t *)(v6 + 376);
    v11 = v7.f64[0] * v9;
    v12 = vmulq_n_f64(v10, v9);
    v7.f64[1] = *(float *)(v6 + 492);
    v13 = vcvtq_f64_f32(vsub_f32(vcvt_f32_s32(a4), vcvt_f32_f64(vmulq_f64(v12, v7))));
    v12.f64[0] = v11;
    v14 = vdivq_f64(vaddq_f64(v13, v13), v12);
    gdc::ViewDataAccess::worldRayFromScreenNormalizedPoint((uint64_t)&v31, v6, (double *)a3, v14.f64[0] + -1.0, 1.0 - v14.f64[1]);
    v15 = *(unsigned __int8 *)(a2 + 9);
    if ((v15 - 1) < 2)
    {
      md::MapDataAccess::_globeGroundCoordinateForScreenPoint(a1, (unsigned __int8 *)a2, (double *)a3, v31.f64, 0);
    }
    else if (v15 == 3)
    {
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a3 + 16);
    }
    else if (!*(_BYTE *)(a2 + 9))
    {
      if (fabs(v34) <= 2.22044605e-16)
      {
        _Q1 = v31;
        v18 = v32;
      }
      else
      {
        v16 = -(v32 + *(double *)(a3 + 16) * -0.0000000249532021) / v34;
        _Q1 = vmlaq_n_f64(v31, v33, v16);
        v18 = v32 + v16 * v34;
      }
      v19 = v18 * 40075017.0;
      _D8 = 0x401921FB54442D18;
      v21 = 6.28318531 * _Q1.f64[0];
      __asm { FMLA            D0, D8, V1.D[1]; __x }
      v27 = exp(_D0);
      v28 = atan(v27) * 2.0 + -1.57079633;
      v29 = fmod(v21, 6.28318531);
      v30 = fmod(v29 + 6.28318531, 6.28318531);
      *(long double *)a1 = v28;
      *(long double *)(a1 + 8) = v30 + -3.14159265;
      *(double *)(a1 + 16) = v19;
    }
  }
}

uint64_t md::Anchor::isMercator(md::Anchor *this)
{
  return 0;
}

uint64_t md::Anchor::followsTerrain(md::Anchor *this)
{
  return 0;
}

double md::Anchor::worldPointWithRouteElevationOffset(md::Anchor *this)
{
  return 0.0;
}

void md::Anchor::setMercatorPoint(uint64_t a1, double a2, double a3, double a4)
{
  long double v8;
  long double v9;
  long double v10;
  long double v11;
  float64x2_t v12;
  long double v13;
  id WeakRetained;

  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)&a2
    || *(_QWORD *)(a1 + 24) != *(_QWORD *)&a3
    || *(_QWORD *)(a1 + 32) != *(_QWORD *)&a4)
  {
    *(double *)(a1 + 16) = a2;
    *(double *)(a1 + 24) = a3;
    *(double *)(a1 + 32) = a4;
    v8 = a2 * 6.28318531;
    v9 = exp(a3 * 6.28318531 + -3.14159265);
    v13 = atan(v9);
    v10 = fmod(v8, 6.28318531);
    v11 = fmod(v10 + 6.28318531, 6.28318531);
    v12.f64[0] = v13;
    v12.f64[1] = v11;
    *(float64x2_t *)(a1 + 40) = vmlaq_f64((float64x2_t)xmmword_19FFB32F0, (float64x2_t)xmmword_19FFB32E0, v12);
    *(double *)(a1 + 56) = a4;
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
    objc_msgSend(WeakRetained, "anchorWorldPointDidChange:", a1);

  }
}

void sub_19FA58C04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{

  _Unwind_Resume(a1);
}

uint64_t md::Anchor::resetAnchorManager(uint64_t this)
{
  *(_QWORD *)(this + 8) = 0;
  return this;
}

void md::MercatorAnchor::~MercatorAnchor(md::MercatorAnchor *this)
{
  int8x8_t *v2;

  *(_QWORD *)this = off_1E42AEF50;
  v2 = (int8x8_t *)*((_QWORD *)this + 1);
  if (v2)
    md::AnchorManager::removeAnchor(v2, (unint64_t)this);
  objc_destroyWeak((id *)this + 8);
}

{
  int8x8_t *v2;

  *(_QWORD *)this = off_1E42AEF50;
  v2 = (int8x8_t *)*((_QWORD *)this + 1);
  if (v2)
    md::AnchorManager::removeAnchor(v2, (unint64_t)this);
  objc_destroyWeak((id *)this + 8);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::MercatorAnchor::isMercator(md::MercatorAnchor *this)
{
  return 1;
}

double md::MercatorAnchor::worldPoint(md::MercatorAnchor *this)
{
  double result;

  if (!*((_QWORD *)this + 1))
    return 0.0;
  (*(void (**)(md::MercatorAnchor *))(*(_QWORD *)this + 56))(this);
  return result;
}

double md::MercatorAnchor::worldPointWithRouteElevationOffset(md::MercatorAnchor *this)
{
  double result;

  if (!*((_QWORD *)this + 1))
    return 0.0;
  (*(void (**)(md::MercatorAnchor *))(*(_QWORD *)this + 56))(this);
  return result;
}

void md::GlobeMercatorAnchor::~GlobeMercatorAnchor(md::GlobeMercatorAnchor *this)
{
  int8x8_t *v2;

  *(_QWORD *)this = off_1E42AEF50;
  v2 = (int8x8_t *)*((_QWORD *)this + 1);
  if (v2)
    md::AnchorManager::removeAnchor(v2, (unint64_t)this);
  objc_destroyWeak((id *)this + 8);
}

{
  int8x8_t *v2;

  *(_QWORD *)this = off_1E42AEF50;
  v2 = (int8x8_t *)*((_QWORD *)this + 1);
  if (v2)
    md::AnchorManager::removeAnchor(v2, (unint64_t)this);
  objc_destroyWeak((id *)this + 8);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::GlobeMercatorAnchor::isMercator(md::GlobeMercatorAnchor *this)
{
  return 0;
}

uint64_t md::GlobeMercatorAnchor::isGeocentric(md::GlobeMercatorAnchor *this)
{
  return 1;
}

uint64_t md::GlobeMercatorAnchor::followsTerrain(md::GlobeMercatorAnchor *this)
{
  return 0;
}

void md::GlobeMercatorAnchor::worldPoint(md::GlobeMercatorAnchor *this)
{
  long double v1;
  double v2;
  long double v3;
  double v4;
  long double v5;
  double v6;

  if (*((_QWORD *)this + 1))
  {
    v1 = (*(double (**)(md::GlobeMercatorAnchor *))(*(_QWORD *)this + 56))(this) * 6.28318531;
    v3 = exp(v2 * 6.28318531 + -3.14159265);
    v4 = atan(v3) * 2.0 + -1.57079633;
    v5 = fmod(v1, 6.28318531);
    v6 = fmod(v5 + 6.28318531, 6.28318531) + -3.14159265;
    __sincos_stret(v4);
    __sincos_stret(v6);
  }
}

void md::GlobeMercatorAnchor::worldPointWithRouteElevationOffset(md::GlobeMercatorAnchor *this)
{
  long double v1;
  double v2;
  long double v3;
  double v4;
  long double v5;
  double v6;

  if (*((_QWORD *)this + 1))
  {
    v1 = (*(double (**)(md::GlobeMercatorAnchor *))(*(_QWORD *)this + 56))(this) * 6.28318531;
    v3 = exp(v2 * 6.28318531 + -3.14159265);
    v4 = atan(v3) * 2.0 + -1.57079633;
    v5 = fmod(v1, 6.28318531);
    v6 = fmod(v5 + 6.28318531, 6.28318531) + -3.14159265;
    __sincos_stret(v4);
    __sincos_stret(v6);
  }
}

uint64_t md::GlobeMercatorAnchor::worldIndexWithContext()
{
  return 0;
}

void md::MercatorTerrainAnchor::setMercatorPoint(_QWORD *a1, double a2, double a3, double a4)
{
  void *v8;
  void *v9;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  void *__p[3];

  __p[0] = COERCE_VOID_((*(double (**)(_QWORD *))(*a1 + 56))(a1));
  __p[1] = v8;
  __p[2] = v9;
  if (__p[0] != *(void **)&a2 || v8 != *(void **)&a3 || v9 != *(void **)&a4)
  {
    v12 = a1[1];
    if (v12)
    {
      v13 = *(_QWORD **)(v12 + 24);
      if (v13)
      {
        v14 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(*(_QWORD **)(v12 + 24), (unint64_t)a1);
        if (v14)
        {
          std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, v13, v14);
          if (__p[0])
            operator delete(__p[0]);
        }
      }
      md::Anchor::setMercatorPoint((uint64_t)a1, a2, a3, a4);
    }
  }
}

void md::MercatorTerrainAnchor::resetAnchorManager(md::MercatorTerrainAnchor *this)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v4;
  void *__p;

  v1 = *((_QWORD *)this + 1);
  if (v1)
  {
    v3 = *(_QWORD **)(v1 + 24);
    if (v3)
    {
      v4 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(*(_QWORD **)(v1 + 24), (unint64_t)this);
      if (v4)
      {
        std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, v3, v4);
        if (__p)
          operator delete(__p);
      }
    }
    *((_QWORD *)this + 1) = 0;
  }
}

void md::GlobeMercatorTerrainAnchor::~GlobeMercatorTerrainAnchor(md::GlobeMercatorTerrainAnchor *this)
{
  int8x8_t *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *__p;

  *(_QWORD *)this = &off_1E429B250;
  v2 = (int8x8_t *)*((_QWORD *)this + 1);
  if (!v2)
  {
    *(_QWORD *)this = off_1E42AEF50;
    goto LABEL_11;
  }
  v3 = (_QWORD *)v2[3];
  if (!v3
    || (v4 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(*(_QWORD **)&v2[3], (unint64_t)this)) == 0)
  {
    *(_QWORD *)this = off_1E42AEF50;
LABEL_10:
    md::AnchorManager::removeAnchor(v2, (unint64_t)this);
    goto LABEL_11;
  }
  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, v3, v4);
  if (__p)
    operator delete(__p);
  v2 = (int8x8_t *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E42AEF50;
  if (v2)
    goto LABEL_10;
LABEL_11:
  objc_destroyWeak((id *)this + 8);
}

{
  int8x8_t *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *__p;

  *(_QWORD *)this = &off_1E429B250;
  v2 = (int8x8_t *)*((_QWORD *)this + 1);
  if (v2)
  {
    v3 = (_QWORD *)v2[3];
    if (v3
      && (v4 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(*(_QWORD **)&v2[3], (unint64_t)this)) != 0)
    {
      std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, v3, v4);
      if (__p)
        operator delete(__p);
      v2 = (int8x8_t *)*((_QWORD *)this + 1);
      *(_QWORD *)this = off_1E42AEF50;
      if (!v2)
      {
LABEL_11:
        objc_destroyWeak((id *)this + 8);
        JUMPOUT(0x1A1AF4E00);
      }
    }
    else
    {
      *(_QWORD *)this = off_1E42AEF50;
    }
    md::AnchorManager::removeAnchor(v2, (unint64_t)this);
    goto LABEL_11;
  }
  *(_QWORD *)this = off_1E42AEF50;
  goto LABEL_11;
}

uint64_t md::GlobeMercatorTerrainAnchor::isMercator(md::GlobeMercatorTerrainAnchor *this)
{
  return 0;
}

uint64_t md::GlobeMercatorTerrainAnchor::isGeocentric(md::GlobeMercatorTerrainAnchor *this)
{
  return 1;
}

uint64_t md::GlobeMercatorTerrainAnchor::followsTerrain(md::GlobeMercatorTerrainAnchor *this)
{
  return 1;
}

double md::GlobeMercatorTerrainAnchor::worldPoint(md::GlobeMercatorTerrainAnchor *this)
{
  uint64_t v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  md::MercatorTerrainHeightCache *v8;
  double v9;
  long double v10;
  long double v11;
  __double2 v12;
  long double v13;
  long double v14;

  v2 = *((_QWORD *)this + 1);
  v3 = (*(double (**)(md::GlobeMercatorTerrainAnchor *))(*(_QWORD *)this + 56))(this);
  v5 = v4;
  v7 = v6;
  if (v2)
  {
    v8 = *(md::MercatorTerrainHeightCache **)(v2 + 24);
    if (v8)
      v9 = md::MercatorTerrainHeightCache::heightForAnchor(v8, (unint64_t)this);
    else
      v9 = 0.0;
    v7 = v7 + v9 * *(float *)(v2 + 72);
  }
  v10 = exp(v5 * 6.28318531 + -3.14159265);
  v11 = atan(v10);
  v12 = __sincos_stret(v11 * 2.0 + -1.57079633);
  v13 = fmod(v3 * 6.28318531, 6.28318531);
  v14 = fmod(v13 + 6.28318531, 6.28318531);
  return (6378137.0 / sqrt(v12.__sinval * v12.__sinval * -0.00669437999 + 1.0) + v7)
       * v12.__cosval
       * __sincos_stret(v14 + -3.14159265).__cosval;
}

double md::GlobeMercatorTerrainAnchor::worldPointWithRouteElevationOffset(md::GlobeMercatorTerrainAnchor *this)
{
  uint64_t v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  md::MercatorTerrainHeightCache *v8;
  double v9;
  long double v10;
  long double v11;
  __double2 v12;
  long double v13;
  long double v14;

  v2 = *((_QWORD *)this + 1);
  v3 = (*(double (**)(md::GlobeMercatorTerrainAnchor *))(*(_QWORD *)this + 56))(this);
  v5 = v4;
  v7 = v6;
  if (v2)
  {
    v8 = *(md::MercatorTerrainHeightCache **)(v2 + 24);
    if (v8)
      v9 = md::MercatorTerrainHeightCache::heightForAnchor(v8, (unint64_t)this);
    else
      v9 = 0.0;
    v7 = v7 + v9 * *(float *)(v2 + 72) + *(float *)(v2 + 76);
  }
  v10 = exp(v5 * 6.28318531 + -3.14159265);
  v11 = atan(v10);
  v12 = __sincos_stret(v11 * 2.0 + -1.57079633);
  v13 = fmod(v3 * 6.28318531, 6.28318531);
  v14 = fmod(v13 + 6.28318531, 6.28318531);
  return (6378137.0 / sqrt(v12.__sinval * v12.__sinval * -0.00669437999 + 1.0) + v7)
       * v12.__cosval
       * __sincos_stret(v14 + -3.14159265).__cosval;
}

uint64_t md::GlobeMercatorTerrainAnchor::worldIndexWithContext()
{
  return 0;
}

void md::GeocentricAnchor::~GeocentricAnchor(md::GeocentricAnchor *this)
{
  int8x8_t *v2;

  *(_QWORD *)this = &off_1E4291AA8;
  v2 = (int8x8_t *)*((_QWORD *)this + 1);
  if (v2)
  {
    if (*((_QWORD *)this + 9))
    {
      altitude::Anchor::destroy(*((altitude::Anchor **)this + 9));
      v2 = (int8x8_t *)*((_QWORD *)this + 1);
      *(_QWORD *)this = off_1E42AEF50;
      if (!v2)
        goto LABEL_8;
    }
    else
    {
      *(_QWORD *)this = off_1E42AEF50;
    }
    md::AnchorManager::removeAnchor(v2, (unint64_t)this);
  }
  else
  {
    *(_QWORD *)this = off_1E42AEF50;
  }
LABEL_8:
  objc_destroyWeak((id *)this + 8);
}

{
  int8x8_t *v2;

  *(_QWORD *)this = &off_1E4291AA8;
  v2 = (int8x8_t *)*((_QWORD *)this + 1);
  if (v2)
  {
    if (*((_QWORD *)this + 9))
    {
      altitude::Anchor::destroy(*((altitude::Anchor **)this + 9));
      v2 = (int8x8_t *)*((_QWORD *)this + 1);
      *(_QWORD *)this = off_1E42AEF50;
      if (!v2)
        goto LABEL_8;
    }
    else
    {
      *(_QWORD *)this = off_1E42AEF50;
    }
    md::AnchorManager::removeAnchor(v2, (unint64_t)this);
  }
  else
  {
    *(_QWORD *)this = off_1E42AEF50;
  }
LABEL_8:
  objc_destroyWeak((id *)this + 8);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::GeocentricAnchor::isGeocentric(md::GeocentricAnchor *this)
{
  return 1;
}

uint64_t md::GeocentricAnchor::followsTerrain(md::GeocentricAnchor *this)
{
  return 1;
}

double md::GeocentricAnchor::worldPoint(md::GeocentricAnchor *this)
{
  md::AnchorManager *v2;
  double result;

  v2 = (md::AnchorManager *)*((_QWORD *)this + 1);
  if (!v2)
    return 0.0;
  md::AnchorManager::geocentricPointForAnchor(v2, this);
  return result;
}

void md::GeocentricAnchor::worldPointWithRouteElevationOffset(md::GeocentricAnchor *this)
{
  md::AnchorManager *v2;
  double v3;
  long double v4;
  double v5;
  long double v6;
  long double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  __double2 v12;
  double v13;

  v2 = (md::AnchorManager *)*((_QWORD *)this + 1);
  if (v2)
  {
    md::AnchorManager::geocentricPointForAnchor(v2, this);
    v4 = v3;
    v6 = v5;
    v8 = v7;
    v9 = sqrt(v3 * v3 + v5 * v5);
    v10 = atan2(v7, v9 * 0.996647189);
    v11 = atan2(v6, v4);
    v12 = __sincos_stret(v10);
    v13 = atan2(v8 + v12.__sinval * v12.__sinval * 42841.3115 * v12.__sinval, v9 + v12.__cosval * v12.__cosval * -42697.6727 * v12.__cosval);
    __sincos_stret(v13);
    __sincos_stret(v11);
  }
}

uint64_t md::GeocentricAnchor::worldIndexWithContext()
{
  return 0;
}

uint64_t md::GeocentricAnchor::globeWillDealloc(uint64_t this)
{
  *(_QWORD *)(this + 72) = 0;
  return this;
}

void altitude::LabelDataRequestManager::~LabelDataRequestManager(altitude::LabelDataRequestManager *this)
{
  char *v2;
  char *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E42C6230;
  v2 = (char *)this + 144;
  v3 = (char *)*((_QWORD *)this + 21);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  *(_QWORD *)this = off_1E42C3240;
  while (*((_QWORD *)this + 10))
    (*(void (**)(altitude::LabelDataRequestManager *, uint64_t))(*(_QWORD *)this + 48))(this, *((_QWORD *)this + 8) + 32);
  std::__tree<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TileKey,std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TileKey>,true>,std::allocator<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*((_QWORD **)this + 9));
  karo::AsyncRequestManager::~AsyncRequestManager(this);
}

{
  char *v2;
  char *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E42C6230;
  v2 = (char *)this + 144;
  v3 = (char *)*((_QWORD *)this + 21);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
    {
LABEL_6:
      *(_QWORD *)this = off_1E42C3240;
      while (*((_QWORD *)this + 10))
        (*(void (**)(altitude::LabelDataRequestManager *, uint64_t))(*(_QWORD *)this + 48))(this, *((_QWORD *)this + 8) + 32);
      std::__tree<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TileKey,std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TileKey>,true>,std::allocator<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*((_QWORD **)this + 9));
      karo::AsyncRequestManager::~AsyncRequestManager(this);
      JUMPOUT(0x1A1AF4E00);
    }
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  goto LABEL_6;
}

void sub_19FA59964(_Unwind_Exception *a1)
{
  karo::AsyncRequestManager *v1;

  std::__tree<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TileKey,std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TileKey>,true>,std::allocator<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*((_QWORD **)v1 + 9));
  karo::AsyncRequestManager::~AsyncRequestManager(v1);
  _Unwind_Resume(a1);
}

void sub_19FA59A28(_Unwind_Exception *a1)
{
  karo::AsyncRequestManager *v1;

  std::__tree<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TileKey,std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TileKey>,true>,std::allocator<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*((_QWORD **)v1 + 9));
  karo::AsyncRequestManager::~AsyncRequestManager(v1);
  _Unwind_Resume(a1);
}

_QWORD *altitude::LabelDataRequestManager::createRequest@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  _QWORD *result;
  __int128 v12;
  __int128 v13;

  v6 = operator new();
  v7 = *(_QWORD *)(a1 + 32);
  v12 = *(_OWORD *)(a1 + 112);
  v13 = *(_OWORD *)(a1 + 96);
  v8 = *(_QWORD *)(a1 + 128);
  v9 = karo::Job::Job(v6, v7);
  *(_BYTE *)(v9 + 176) = 0;
  *(_QWORD *)(v9 + 180) = 0xFFFFFFFF00000000;
  *(_QWORD *)v9 = &off_1E42C4A48;
  *(_BYTE *)(v9 + 188) = 0;
  v10 = a2[1];
  *(_OWORD *)(v9 + 192) = *a2;
  *(_OWORD *)(v9 + 208) = v10;
  *(_OWORD *)(v9 + 224) = v13;
  *(_OWORD *)(v9 + 240) = v12;
  *(_QWORD *)(v9 + 256) = v8;
  *(_QWORD *)(v9 + 304) = 0;
  *(_QWORD *)(v9 + 312) = 0;
  *(_OWORD *)(v9 + 264) = 0u;
  *(_OWORD *)(v9 + 280) = 0u;
  *(_QWORD *)(v9 + 296) = v9 + 304;
  *a3 = v9;
  result = (_QWORD *)operator new();
  *result = &off_1E42E88A0;
  result[1] = 0;
  result[2] = 0;
  result[3] = v6;
  a3[1] = (uint64_t)result;
  return result;
}

void sub_19FA59B28(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<altitude::LabelDataLoadJob *,std::shared_ptr<karo::AsyncRequestManager::Request>::__shared_ptr_default_delete<karo::AsyncRequestManager::Request,altitude::LabelDataLoadJob>,std::allocator<altitude::LabelDataLoadJob>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<altitude::LabelDataLoadJob *,std::shared_ptr<karo::AsyncRequestManager::Request>::__shared_ptr_default_delete<karo::AsyncRequestManager::Request,altitude::LabelDataLoadJob>,std::allocator<altitude::LabelDataLoadJob>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void altitude::LabelDataLoadJob::~LabelDataLoadJob(altitude::LabelDataLoadJob *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E42C4A48;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 38));
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 34);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 34);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  karo::Job::~Job(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E42C4A48;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 38));
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 34);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 34);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  karo::Job::~Job(this);
  JUMPOUT(0x1A1AF4E00);
}

void altitude::LabelDataLoadJob::jobStep(altitude::LabelDataLoadJob *this)
{
  uint64_t v1;
  uint64_t v3;
  char *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  unsigned __int8 v9;
  char v10;
  int v11;
  std::__shared_weak_count *v12;
  __int128 v13;
  unsigned __int8 v14;
  std::__shared_weak_count *v15;
  std::__shared_count v16;
  unsigned __int8 v17;
  int v18;
  std::__shared_count v19;
  unsigned __int8 v20;
  int v21;
  std::__shared_count v22;
  int32x2_t *v23;
  _QWORD *v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  __int32 v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  int v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t v79;
  void *v80;
  int v81;
  _QWORD **v82;
  uint64_t *v83;
  char *v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  unsigned int v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  uint64_t v105;
  void *v106;
  int v107;
  _QWORD **v108;
  uint64_t *v109;
  uint64_t *v110;
  char *v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  unint64_t *v126;
  unint64_t v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int v130;
  unsigned int v131;
  unsigned int v132;
  int VersionForGEOType;
  _QWORD **v134;
  uint64_t *v135;
  uint64_t *v136;
  char *v137;
  uint64_t v138;
  _QWORD *v139;
  std::__shared_weak_count *v140;
  unint64_t v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t v147;
  unint64_t v148;
  unsigned int *v149;
  unsigned int v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  unint64_t *v154;
  unint64_t v155;
  unsigned int *v156;
  unsigned int v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t *v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t *v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t *v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t *v179;
  unint64_t v180;
  uint64_t v181;
  BOOL v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  _QWORD **v195;
  uint64_t *v196;
  char *v197;
  __int128 v198;
  uint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  unint64_t v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  unint64_t *v213;
  unint64_t v214;
  unint64_t *v215;
  unint64_t v216;
  unint64_t *v217;
  unint64_t v218;
  unint64_t *v219;
  unint64_t v220;
  unint64_t *v221;
  unint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  int v226;
  unint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  unint64_t *v231;
  unint64_t v232;
  double v233;
  int64x2_t v234;
  std::__shared_weak_count *v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  unint64_t v242;
  BOOL v243;
  std::__shared_weak_count *v244;
  unint64_t v245;
  unint64_t v246;
  std::__shared_weak_count *v247;
  unint64_t v248;
  unint64_t v249;
  unsigned int *v250;
  unsigned int v251;
  std::__shared_weak_count *v252;
  unint64_t *v253;
  unint64_t v254;
  unint64_t *v255;
  unint64_t v256;
  unsigned int *v257;
  unsigned int v258;
  std::__shared_weak_count *v259;
  unint64_t *v260;
  unint64_t v261;
  unint64_t *v262;
  unint64_t v263;
  unsigned int *v264;
  unsigned int v265;
  std::__shared_weak_count *v266;
  unint64_t *v267;
  unint64_t v268;
  unint64_t *v269;
  unint64_t v270;
  uint64_t v271;
  unsigned int v272;
  _QWORD v273[2];
  _QWORD v274[2];
  _QWORD v275[2];
  _QWORD v276[2];
  _QWORD v277[2];
  __int128 v278;
  __int128 v279;
  uint64_t v280;
  std::__shared_weak_count *v281;
  void (**v282)(karo::AsyncRequestManager::RequestHandle *__hidden);
  uint64_t v283;
  std::__shared_weak_count *v284;
  _OWORD v285[2];
  _OWORD v286[2];
  _OWORD v287[2];
  _QWORD v288[2];
  __int128 v289;
  _BYTE v290[12];
  int v291;
  __int128 v292;
  _OWORD v293[2];
  unint64_t GEOTileKey;
  uint64_t v295;
  uint64_t v296;

  v296 = *MEMORY[0x1E0C80C00];
  v4 = (char *)this + 240;
  v3 = *((_QWORD *)this + 30);
  v5 = *((_DWORD *)v4 - 9);
  *(_QWORD *)&v290[4] = *(_QWORD *)(v4 - 44);
  v291 = v5;
  v292 = *((_OWORD *)v4 - 2);
  *(_QWORD *)v290 = 68;
  v6 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v3 + 112))(v3, v290);
  v7 = v6;
  v8 = atomic_load((unsigned __int8 *)(*(_QWORD *)v4 + 224));
  v9 = atomic_load((unsigned __int8 *)(*(_QWORD *)v4 + 224));
  if ((v9 & 1) != 0)
    v10 = v6;
  else
    v10 = 1;
  if ((v10 & 1) != 0)
  {
    v11 = v8 & v6;
  }
  else
  {
    *(_QWORD *)v290 = 13;
    v11 = (*(uint64_t (**)(_QWORD, _BYTE *))(**((_QWORD **)this + 30) + 112))(*((_QWORD *)this + 30), v290);
  }
  v13 = *((_OWORD *)v4 - 2);
  v12 = (std::__shared_weak_count *)(v4 - 32);
  v288[1] = *((_QWORD *)this + 25);
  v289 = v13;
  v288[0] = 1;
  v14 = atomic_load((unsigned __int8 *)(*((_QWORD *)this + 31) + 224));
  if ((v14 & 1) != 0)
    v15 = (std::__shared_weak_count *)(*(uint64_t (**)(_QWORD, _QWORD *))(**((_QWORD **)this + 31) + 112))(*((_QWORD *)this + 31), v288);
  else
    v15 = 0;
  v16 = v12->std::__shared_count;
  v287[0] = *((_OWORD *)this + 12);
  v287[1] = v16;
  *(_QWORD *)&v287[0] = 20;
  v17 = atomic_load((unsigned __int8 *)(*((_QWORD *)this + 29) + 224));
  if ((v17 & 1) != 0)
    v18 = (*(uint64_t (**)(_QWORD, _OWORD *))(**((_QWORD **)this + 29) + 112))(*((_QWORD *)this + 29), v287);
  else
    v18 = 0;
  v19 = v12->std::__shared_count;
  v286[0] = *((_OWORD *)this + 12);
  v286[1] = v19;
  *(_QWORD *)&v286[0] = 63;
  v20 = atomic_load((unsigned __int8 *)(*((_QWORD *)this + 32) + 224));
  if ((v20 & 1) != 0)
    v21 = (*(uint64_t (**)(_QWORD, _OWORD *))(**((_QWORD **)this + 32) + 112))(*((_QWORD *)this + 32), v286);
  else
    v21 = 0;
  v22 = v12->std::__shared_count;
  v285[0] = *((_OWORD *)this + 12);
  v285[1] = v22;
  *(_QWORD *)&v285[0] = 16;
  v272 = (*(uint64_t (**)(_QWORD, _OWORD *))(**((_QWORD **)this + 28) + 112))(*((_QWORD *)this + 28), v285);
  v23 = (int32x2_t *)*((_QWORD *)this + 33);
  if (!v23)
  {
    v12 = (std::__shared_weak_count *)operator new();
    v12->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42C4A88;
    *(_OWORD *)&v12->__shared_owners_ = 0u;
    v12[1].std::__shared_count = 0u;
    *(_OWORD *)&v12[1].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v12[2].__shared_owners_ = 0u;
    v12[3].std::__shared_count = 0u;
    *(_OWORD *)&v12[3].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v12[4].__shared_owners_ = 0u;
    v12[5].std::__shared_count = 0u;
    *(_OWORD *)&v12[5].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v12[6].__shared_owners_ = 0u;
    v12[7].std::__shared_count = 0u;
    *(_OWORD *)&v12[7].__shared_weak_owners_ = 0u;
    LODWORD(v12[8].__shared_owners_) = 0;
    v24 = (_QWORD *)operator new();
    *v24 = &off_1E42E88D8;
    v24[1] = 0;
    v24[2] = 0;
    v24[3] = v12;
    v25 = (std::__shared_weak_count *)*((_QWORD *)this + 34);
    *((_QWORD *)this + 33) = v12;
    *((_QWORD *)this + 34) = v24;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldaxr(p_shared_owners);
      while (__stlxr(v27 - 1, p_shared_owners));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v23 = (int32x2_t *)*((_QWORD *)this + 33);
    v28 = *((_DWORD *)this + 52);
    v23[24] = vrev64_s32(*(int32x2_t *)((char *)this + 212));
    v23[25].i32[0] = v28;
  }
  v271 = *((_QWORD *)this + 1);
  if (!v18)
  {
    v32 = 0;
    goto LABEL_32;
  }
  v1 = (uint64_t)v23[1];
  v12 = (std::__shared_weak_count *)v23[2];
  if (!v12)
    goto LABEL_29;
  v29 = (unint64_t *)&v12->__shared_owners_;
  do
    v30 = __ldxr(v29);
  while (__stxr(v30 + 1, v29));
  do
    v31 = __ldaxr(v29);
  while (__stlxr(v31 - 1, v29));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    if (v1)
      goto LABEL_30;
  }
  else
  {
LABEL_29:
    if (v1)
    {
LABEL_30:
      v32 = 1;
      goto LABEL_32;
    }
  }
  v87 = *((_QWORD *)this + 29);
  v88 = *(unsigned int *)(*((_QWORD *)this + 1) + 88);
  v89 = atomic_load((unsigned int *)this + 4);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _OWORD *, uint64_t, uint64_t))(*(_QWORD *)v87 + 104))(&v280, v87, v287, v88, v89);
  v90 = v280;
  if (v280)
  {
    v91 = *((_QWORD *)this + 33);
    v92 = v281;
    if (v281)
    {
      v93 = (unint64_t *)&v281->__shared_owners_;
      do
        v94 = __ldxr(v93);
      while (__stxr(v94 + 1, v93));
      do
        v95 = __ldxr(v93);
      while (__stxr(v95 + 1, v93));
    }
    v96 = *(std::__shared_weak_count **)(v91 + 16);
    *(_QWORD *)(v91 + 8) = v90;
    *(_QWORD *)(v91 + 16) = v92;
    if (v96)
    {
      v97 = (unint64_t *)&v96->__shared_owners_;
      do
        v98 = __ldaxr(v97);
      while (__stlxr(v98 - 1, v97));
      if (!v98)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
    if (v92)
    {
      v99 = (unint64_t *)&v92->__shared_owners_;
      do
        v100 = __ldaxr(v99);
      while (__stlxr(v100 - 1, v99));
      if (!v100)
      {
        ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
        std::__shared_weak_count::__release_weak(v92);
      }
    }
    karo::Job::removeSubJob((pthread_mutex_t **)this, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v280 + 16))(v280);
    v102 = v101;
    v103 = (unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v280 + 16))(v280) >> 32;
    v104 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v280 + 16))(v280);
    memset((char *)v293 + 4, 0, 28);
    LODWORD(v293[0]) = 20;
    GEOTileKey = altitude::TileKey::getGEOTileKey((unsigned int *)v293, v271);
    v295 = v105;
    objc_msgSend(MEMORY[0x1E0D27420], "modernManager");
    v106 = (void *)objc_claimAutoreleasedReturnValue();
    v107 = objc_msgSend(v106, "versionForTileKey:", &GEOTileKey);

    v108 = (_QWORD **)((char *)this + 296);
    *(_QWORD *)&v278 = 20;
    DWORD2(v278) = 0;
    HIDWORD(v278) = v107;
    v1 = (uint64_t)&v278;
    *(_QWORD *)&v279 = __PAIR64__(v103, v102);
    *((_QWORD *)&v279 + 1) = v104;
    v109 = std::__tree<altitude::TileKey>::__find_equal<altitude::TileKey>((uint64_t)this + 296, v293, (unsigned int *)&v278);
    if (!*v109)
    {
      v110 = v109;
      v111 = (char *)operator new(0x40uLL);
      *(_OWORD *)(v111 + 28) = v278;
      *(_OWORD *)(v111 + 44) = v279;
      v112 = *(_QWORD *)&v293[0];
      *(_QWORD *)v111 = 0;
      *((_QWORD *)v111 + 1) = 0;
      *((_QWORD *)v111 + 2) = v112;
      *v110 = (uint64_t)v111;
      v113 = (_QWORD *)**v108;
      if (v113)
      {
        *v108 = v113;
        v111 = (char *)*v110;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 38), (uint64_t *)v111);
      ++*((_QWORD *)this + 39);
    }
LABEL_334:
    v32 = 1;
    goto LABEL_335;
  }
  if (karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)&v282))
  {
    v143 = v284;
    v277[0] = v283;
    v277[1] = v284;
    if (v284)
    {
      v1 = (uint64_t)&v284->__shared_owners_;
      do
        v144 = __ldxr((unint64_t *)v1);
      while (__stxr(v144 + 1, (unint64_t *)v1));
      karo::Job::addBlockingSubJob((uint64_t *)this, v277, 0, 0);
      do
        v145 = __ldaxr((unint64_t *)v1);
      while (__stlxr(v145 - 1, (unint64_t *)v1));
      if (!v145)
      {
        ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
        std::__shared_weak_count::__release_weak(v143);
      }
    }
    else
    {
      karo::Job::addBlockingSubJob((uint64_t *)this, v277, 0, 0);
    }
    goto LABEL_334;
  }
  karo::Job::removeSubJob((pthread_mutex_t **)this, 0);
  v32 = 0;
LABEL_335:
  v282 = &off_1E42C2D08;
  if (v283)
  {
    v250 = (unsigned int *)(v283 + 128);
    do
      v251 = __ldaxr(v250);
    while (__stlxr(v251 - 1, v250));
  }
  v252 = v284;
  if (v284)
  {
    v253 = (unint64_t *)&v284->__shared_owners_;
    do
      v254 = __ldaxr(v253);
    while (__stlxr(v254 - 1, v253));
    if (!v254)
    {
      ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
      std::__shared_weak_count::__release_weak(v252);
    }
  }
  v12 = v281;
  if (v281)
  {
    v255 = (unint64_t *)&v281->__shared_owners_;
    do
      v256 = __ldaxr(v255);
    while (__stlxr(v256 - 1, v255));
    if (!v256)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
LABEL_32:
  if (!v11)
  {
    v37 = 0;
    goto LABEL_41;
  }
  v33 = *((_QWORD *)this + 33);
  v1 = *(_QWORD *)(v33 + 24);
  v12 = *(std::__shared_weak_count **)(v33 + 32);
  if (!v12)
    goto LABEL_38;
  v34 = (unint64_t *)&v12->__shared_owners_;
  do
    v35 = __ldxr(v34);
  while (__stxr(v35 + 1, v34));
  do
    v36 = __ldaxr(v34);
  while (__stlxr(v36 - 1, v34));
  if (!v36)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    if (v1)
      goto LABEL_39;
  }
  else
  {
LABEL_38:
    if (v1)
    {
LABEL_39:
      v37 = 1;
      goto LABEL_41;
    }
  }
  v114 = *((_QWORD *)this + 30);
  v115 = *(unsigned int *)(*((_QWORD *)this + 1) + 88);
  v116 = atomic_load((unsigned int *)this + 4);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)v114 + 104))(&v280, v114, v290, v115, v116);
  v117 = v280;
  if (v280)
  {
    v118 = *((_QWORD *)this + 33);
    v119 = v281;
    if (v281)
    {
      v120 = (unint64_t *)&v281->__shared_owners_;
      do
        v121 = __ldxr(v120);
      while (__stxr(v121 + 1, v120));
      do
        v122 = __ldxr(v120);
      while (__stxr(v122 + 1, v120));
    }
    v123 = *(std::__shared_weak_count **)(v118 + 32);
    *(_QWORD *)(v118 + 24) = v117;
    *(_QWORD *)(v118 + 32) = v119;
    if (v123)
    {
      v124 = (unint64_t *)&v123->__shared_owners_;
      do
        v125 = __ldaxr(v124);
      while (__stlxr(v125 - 1, v124));
      if (!v125)
      {
        ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
        std::__shared_weak_count::__release_weak(v123);
      }
    }
    if (v119)
    {
      v126 = (unint64_t *)&v119->__shared_owners_;
      do
        v127 = __ldaxr(v126);
      while (__stlxr(v127 - 1, v126));
      if (!v127)
      {
        ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
        std::__shared_weak_count::__release_weak(v119);
      }
    }
    karo::Job::removeSubJob((pthread_mutex_t **)this, 1);
    if (v7)
      v128 = 68;
    else
      v128 = 13;
    (*(void (**)(uint64_t))(*(_QWORD *)v280 + 16))(v280);
    v130 = v129;
    v131 = (unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v280 + 16))(v280) >> 32;
    v132 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v280 + 16))(v280);
    VersionForGEOType = altitude::GeoResourceManager::getVersionForGEOType(v271, v128, 0xFFFFFFFFLL);
    v134 = (_QWORD **)((char *)this + 296);
    LODWORD(v293[0]) = v128;
    *(_QWORD *)((char *)v293 + 4) = 0;
    HIDWORD(v293[0]) = VersionForGEOType;
    *(_QWORD *)&v293[1] = __PAIR64__(v131, v130);
    v1 = (uint64_t)v293;
    *((_QWORD *)&v293[1] + 1) = v132;
    v135 = std::__tree<altitude::TileKey>::__find_equal<altitude::TileKey>((uint64_t)this + 296, &v278, (unsigned int *)v293);
    if (!*v135)
    {
      v136 = v135;
      v137 = (char *)operator new(0x40uLL);
      *(_OWORD *)(v137 + 28) = v293[0];
      *(_OWORD *)(v137 + 44) = v293[1];
      v138 = v278;
      *(_QWORD *)v137 = 0;
      *((_QWORD *)v137 + 1) = 0;
      *((_QWORD *)v137 + 2) = v138;
      *v136 = (uint64_t)v137;
      v139 = (_QWORD *)**v134;
      if (v139)
      {
        *v134 = v139;
        v137 = (char *)*v136;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 38), (uint64_t *)v137);
      ++*((_QWORD *)this + 39);
    }
  }
  else
  {
    if (!karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)&v282))
    {
      karo::Job::removeSubJob((pthread_mutex_t **)this, 1);
      v37 = 0;
      goto LABEL_168;
    }
    v146 = v284;
    v276[0] = v283;
    v276[1] = v284;
    if (!v284)
    {
      v37 = 1;
      karo::Job::addBlockingSubJob((uint64_t *)this, v276, 1, 0);
      goto LABEL_168;
    }
    v1 = (uint64_t)&v284->__shared_owners_;
    do
      v147 = __ldxr((unint64_t *)v1);
    while (__stxr(v147 + 1, (unint64_t *)v1));
    karo::Job::addBlockingSubJob((uint64_t *)this, v276, 1, 0);
    do
      v148 = __ldaxr((unint64_t *)v1);
    while (__stlxr(v148 - 1, (unint64_t *)v1));
    if (!v148)
    {
      ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
      std::__shared_weak_count::__release_weak(v146);
    }
  }
  v37 = 1;
LABEL_168:
  v282 = &off_1E42C2D08;
  if (v283)
  {
    v149 = (unsigned int *)(v283 + 128);
    do
      v150 = __ldaxr(v149);
    while (__stlxr(v150 - 1, v149));
  }
  v151 = v284;
  if (v284)
  {
    v152 = (unint64_t *)&v284->__shared_owners_;
    do
      v153 = __ldaxr(v152);
    while (__stlxr(v153 - 1, v152));
    if (!v153)
    {
      ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
      std::__shared_weak_count::__release_weak(v151);
    }
  }
  v12 = v281;
  if (v281)
  {
    v154 = (unint64_t *)&v281->__shared_owners_;
    do
      v155 = __ldaxr(v154);
    while (__stlxr(v155 - 1, v154));
    if (!v155)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
LABEL_41:
  if (!(_DWORD)v15)
  {
    v47 = 0;
    if (v21)
      goto LABEL_198;
    goto LABEL_55;
  }
  v38 = *((_QWORD *)this + 33);
  v39 = *(_QWORD *)(v38 + 40);
  v15 = *(std::__shared_weak_count **)(v38 + 48);
  if (v15)
  {
    v40 = (unint64_t *)&v15->__shared_owners_;
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
  }
  if (!v39)
  {
    v1 = 1;
    goto LABEL_57;
  }
  v42 = *((_QWORD *)this + 33);
  v43 = *(_QWORD *)(v42 + 56);
  v12 = *(std::__shared_weak_count **)(v42 + 64);
  if (v12)
  {
    v44 = (unint64_t *)&v12->__shared_owners_;
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
    v1 = v43 == 0;
    do
      v46 = __ldaxr(v44);
    while (__stlxr(v46 - 1, v44));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
      if (!v15)
        goto LABEL_61;
      goto LABEL_58;
    }
LABEL_57:
    if (!v15)
      goto LABEL_61;
    goto LABEL_58;
  }
  v1 = v43 == 0;
  if (!v15)
    goto LABEL_61;
LABEL_58:
  v49 = (unint64_t *)&v15->__shared_owners_;
  do
    v50 = __ldaxr(v49);
  while (__stlxr(v50 - 1, v49));
  if (v50)
  {
LABEL_61:
    if ((_DWORD)v1)
      goto LABEL_62;
LABEL_141:
    v47 = 1;
    if (v21)
      goto LABEL_198;
    goto LABEL_55;
  }
  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
  std::__shared_weak_count::__release_weak(v15);
  if ((v1 & 1) == 0)
    goto LABEL_141;
LABEL_62:
  v51 = *((_QWORD *)this + 31);
  v52 = *(unsigned int *)(*((_QWORD *)this + 1) + 88);
  v53 = atomic_load((unsigned int *)this + 4);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)v51 + 104))(&v280, v51, v288, v52, v53);
  v54 = v280;
  if (v280)
  {
    v55 = *((_QWORD *)this + 33);
    v56 = v281;
    if (v281)
    {
      v57 = (unint64_t *)&v281->__shared_owners_;
      do
        v58 = __ldxr(v57);
      while (__stxr(v58 + 1, v57));
      do
        v59 = __ldxr(v57);
      while (__stxr(v59 + 1, v57));
    }
    v60 = *(std::__shared_weak_count **)(v55 + 48);
    *(_QWORD *)(v55 + 40) = v54;
    *(_QWORD *)(v55 + 48) = v56;
    if (v60)
    {
      v61 = (unint64_t *)&v60->__shared_owners_;
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
      }
    }
    if (v56)
    {
      v63 = (unint64_t *)&v56->__shared_owners_;
      do
        v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
    v65 = *((_QWORD *)this + 33);
    v66 = v280;
    v67 = v281;
    if (v281)
    {
      v68 = (unint64_t *)&v281->__shared_owners_;
      do
        v69 = __ldxr(v68);
      while (__stxr(v69 + 1, v68));
      do
        v70 = __ldxr(v68);
      while (__stxr(v70 + 1, v68));
    }
    v71 = *(std::__shared_weak_count **)(v65 + 64);
    *(_QWORD *)(v65 + 56) = v66;
    *(_QWORD *)(v65 + 64) = v67;
    if (v71)
    {
      v72 = (unint64_t *)&v71->__shared_owners_;
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
    if (v67)
    {
      v74 = (unint64_t *)&v67->__shared_owners_;
      do
        v75 = __ldaxr(v74);
      while (__stlxr(v75 - 1, v74));
      if (!v75)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
    }
    karo::Job::removeSubJob((pthread_mutex_t **)this, 2);
    (*(void (**)(uint64_t))(*(_QWORD *)v280 + 16))(v280);
    v15 = v76;
    v77 = (unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v280 + 16))(v280) >> 32;
    v78 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v280 + 16))(v280);
    memset((char *)v293 + 4, 0, 28);
    LODWORD(v293[0]) = 1;
    GEOTileKey = altitude::TileKey::getGEOTileKey((unsigned int *)v293, v271);
    v295 = v79;
    objc_msgSend(MEMORY[0x1E0D27420], "modernManager");
    v80 = (void *)objc_claimAutoreleasedReturnValue();
    v81 = objc_msgSend(v80, "versionForTileKey:", &GEOTileKey);

    v82 = (_QWORD **)((char *)this + 296);
    *(_QWORD *)&v278 = 1;
    DWORD2(v278) = 0;
    HIDWORD(v278) = v81;
    v1 = (uint64_t)&v278;
    *(_QWORD *)&v279 = __PAIR64__(v77, v15);
    *((_QWORD *)&v279 + 1) = v78;
    v83 = std::__tree<altitude::TileKey>::__find_equal<altitude::TileKey>((uint64_t)this + 296, v293, (unsigned int *)&v278);
    if (!*v83)
    {
      v15 = (std::__shared_weak_count *)v83;
      v84 = (char *)operator new(0x40uLL);
      *(_OWORD *)(v84 + 28) = v278;
      *(_OWORD *)(v84 + 44) = v279;
      v85 = *(_QWORD *)&v293[0];
      *(_QWORD *)v84 = 0;
      *((_QWORD *)v84 + 1) = 0;
      *((_QWORD *)v84 + 2) = v85;
      v15->__vftable = (std::__shared_weak_count_vtbl *)v84;
      v86 = (_QWORD *)**v82;
      if (v86)
      {
        *v82 = v86;
        v84 = (char *)v15->__vftable;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 38), (uint64_t *)v84);
      ++*((_QWORD *)this + 39);
    }
  }
  else
  {
    if (!karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)&v282))
    {
      karo::Job::removeSubJob((pthread_mutex_t **)this, 2);
      v47 = 0;
      goto LABEL_186;
    }
    v140 = v284;
    v275[0] = v283;
    v275[1] = v284;
    if (v284)
    {
      v1 = (uint64_t)&v284->__shared_owners_;
      do
        v141 = __ldxr((unint64_t *)v1);
      while (__stxr(v141 + 1, (unint64_t *)v1));
      karo::Job::addBlockingSubJob((uint64_t *)this, v275, 2, 0);
      do
        v142 = __ldaxr((unint64_t *)v1);
      while (__stlxr(v142 - 1, (unint64_t *)v1));
      if (!v142)
      {
        ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
        std::__shared_weak_count::__release_weak(v140);
      }
    }
    else
    {
      karo::Job::addBlockingSubJob((uint64_t *)this, v275, 2, 0);
    }
  }
  v47 = 1;
LABEL_186:
  v282 = &off_1E42C2D08;
  if (v283)
  {
    v156 = (unsigned int *)(v283 + 128);
    do
      v157 = __ldaxr(v156);
    while (__stlxr(v157 - 1, v156));
  }
  v158 = v284;
  if (!v284)
    goto LABEL_193;
  v159 = (unint64_t *)&v284->__shared_owners_;
  do
    v160 = __ldaxr(v159);
  while (__stlxr(v160 - 1, v159));
  if (!v160)
  {
    ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
    std::__shared_weak_count::__release_weak(v158);
    v12 = v281;
    if (!v281)
      goto LABEL_197;
  }
  else
  {
LABEL_193:
    v12 = v281;
    if (!v281)
      goto LABEL_197;
  }
  v161 = (unint64_t *)&v12->__shared_owners_;
  do
    v162 = __ldaxr(v161);
  while (__stlxr(v162 - 1, v161));
  if (v162)
  {
LABEL_197:
    if (v21)
      goto LABEL_198;
LABEL_55:
    v48 = 0;
LABEL_200:
    v163 = (std::__shared_weak_count *)v272;
    goto LABEL_201;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (!v21)
    goto LABEL_55;
LABEL_198:
  if ((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 33) + 40))(*((_QWORD *)this + 33)))
  {
    v48 = 1;
    goto LABEL_200;
  }
  v201 = *((_QWORD *)this + 32);
  v202 = *(unsigned int *)(*((_QWORD *)this + 1) + 88);
  v203 = atomic_load((unsigned int *)this + 4);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _OWORD *, uint64_t, uint64_t))(*(_QWORD *)v201 + 104))(&v280, v201, v286, v202, v203);
  v204 = v280;
  if (v280)
  {
    v205 = *((_QWORD *)this + 33);
    v206 = v281;
    if (v281)
    {
      v207 = (unint64_t *)&v281->__shared_owners_;
      do
        v208 = __ldxr(v207);
      while (__stxr(v208 + 1, v207));
      do
        v209 = __ldxr(v207);
      while (__stxr(v209 + 1, v207));
    }
    v210 = *(std::__shared_weak_count **)(v205 + 80);
    *(_QWORD *)(v205 + 72) = v204;
    *(_QWORD *)(v205 + 80) = v206;
    if (v210)
    {
      v211 = (unint64_t *)&v210->__shared_owners_;
      do
        v212 = __ldaxr(v211);
      while (__stlxr(v212 - 1, v211));
      if (!v212)
      {
        ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
        std::__shared_weak_count::__release_weak(v210);
      }
    }
    if (v206)
    {
      v213 = (unint64_t *)&v206->__shared_owners_;
      do
        v214 = __ldaxr(v213);
      while (__stlxr(v214 - 1, v213));
      if (!v214)
      {
        ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
        std::__shared_weak_count::__release_weak(v206);
      }
    }
    karo::Job::removeSubJob((pthread_mutex_t **)this, 3);
    v48 = 1;
    v163 = (std::__shared_weak_count *)v272;
  }
  else if (karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)&v282))
  {
    v247 = v284;
    v274[0] = v283;
    v274[1] = v284;
    v163 = (std::__shared_weak_count *)v272;
    if (v284)
    {
      v1 = (uint64_t)&v284->__shared_owners_;
      do
        v248 = __ldxr((unint64_t *)v1);
      while (__stxr(v248 + 1, (unint64_t *)v1));
      karo::Job::addBlockingSubJob((uint64_t *)this, v274, 3, 0);
      do
        v249 = __ldaxr((unint64_t *)v1);
      while (__stlxr(v249 - 1, (unint64_t *)v1));
      if (!v249)
      {
        ((void (*)(std::__shared_weak_count *))v247->__on_zero_shared)(v247);
        std::__shared_weak_count::__release_weak(v247);
      }
    }
    else
    {
      karo::Job::addBlockingSubJob((uint64_t *)this, v274, 3, 0);
    }
    v48 = 1;
  }
  else
  {
    karo::Job::removeSubJob((pthread_mutex_t **)this, 3);
    v48 = 0;
    v163 = (std::__shared_weak_count *)v272;
  }
  v282 = &off_1E42C2D08;
  if (v283)
  {
    v264 = (unsigned int *)(v283 + 128);
    do
      v265 = __ldaxr(v264);
    while (__stlxr(v265 - 1, v264));
  }
  v266 = v284;
  if (v284)
  {
    v267 = (unint64_t *)&v284->__shared_owners_;
    do
      v268 = __ldaxr(v267);
    while (__stlxr(v268 - 1, v267));
    if (!v268)
    {
      ((void (*)(std::__shared_weak_count *))v266->__on_zero_shared)(v266);
      std::__shared_weak_count::__release_weak(v266);
    }
  }
  v12 = v281;
  if (v281)
  {
    v269 = (unint64_t *)&v281->__shared_owners_;
    do
      v270 = __ldaxr(v269);
    while (__stlxr(v270 - 1, v269));
    if (!v270)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
LABEL_201:
  if (!(_DWORD)v163)
  {
    v164 = 0;
    goto LABEL_205;
  }
  if (*((_QWORD *)this + 35))
  {
    v164 = 1;
    goto LABEL_205;
  }
  v183 = *((_QWORD *)this + 28);
  v184 = *(unsigned int *)(*((_QWORD *)this + 1) + 88);
  v185 = atomic_load((unsigned int *)this + 4);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _OWORD *, uint64_t, uint64_t))(*(_QWORD *)v183 + 104))(&v280, v183, v285, v184, v185);
  v186 = v280;
  if (v280)
  {
    v187 = v281;
    if (v281)
    {
      v188 = (unint64_t *)&v281->__shared_owners_;
      do
        v189 = __ldxr(v188);
      while (__stxr(v189 + 1, v188));
    }
    v190 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
    *((_QWORD *)this + 35) = v186;
    *((_QWORD *)this + 36) = v187;
    if (v190)
    {
      v191 = (unint64_t *)&v190->__shared_owners_;
      do
        v192 = __ldaxr(v191);
      while (__stlxr(v192 - 1, v191));
      if (!v192)
      {
        ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
        std::__shared_weak_count::__release_weak(v190);
      }
    }
    karo::Job::removeSubJob((pthread_mutex_t **)this, 4);
    v193 = *((_QWORD *)this + 28);
    v194 = *((_QWORD *)this + 35);
    v278 = 0uLL;
    v279 = *(_OWORD *)(v194 + 136);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, __int128 *))(*(_QWORD *)v193 + 144))(v293, v193, &v278);
    DWORD1(v293[0]) = *(_DWORD *)(*((_QWORD *)this + 35) + 152);
    HIDWORD(v293[0]) = altitude::GeoResourceManager::getVersionForGEOType(v271, v293[0], DWORD1(v293[0]));
    v195 = (_QWORD **)((char *)this + 296);
    v196 = std::__tree<altitude::TileKey>::__find_equal<altitude::TileKey>((uint64_t)this + 296, &v278, (unsigned int *)v293);
    if (!*v196)
    {
      v1 = (uint64_t)v196;
      v197 = (char *)operator new(0x40uLL);
      v198 = v293[1];
      *(_OWORD *)(v197 + 28) = v293[0];
      *(_OWORD *)(v197 + 44) = v198;
      v199 = v278;
      *(_QWORD *)v197 = 0;
      *((_QWORD *)v197 + 1) = 0;
      *((_QWORD *)v197 + 2) = v199;
      *(_QWORD *)v1 = v197;
      v200 = (_QWORD *)**v195;
      if (v200)
      {
        *v195 = v200;
        v197 = *(char **)v1;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 38), (uint64_t *)v197);
      ++*((_QWORD *)this + 39);
    }
LABEL_350:
    v164 = 1;
    goto LABEL_351;
  }
  if (karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)&v282))
  {
    v244 = v284;
    v273[0] = v283;
    v273[1] = v284;
    if (v284)
    {
      v1 = (uint64_t)&v284->__shared_owners_;
      do
        v245 = __ldxr((unint64_t *)v1);
      while (__stxr(v245 + 1, (unint64_t *)v1));
      karo::Job::addBlockingSubJob((uint64_t *)this, v273, 4, 0);
      do
        v246 = __ldaxr((unint64_t *)v1);
      while (__stlxr(v246 - 1, (unint64_t *)v1));
      if (!v246)
      {
        ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
        std::__shared_weak_count::__release_weak(v244);
      }
    }
    else
    {
      karo::Job::addBlockingSubJob((uint64_t *)this, v273, 4, 0);
    }
    goto LABEL_350;
  }
  karo::Job::removeSubJob((pthread_mutex_t **)this, 4);
  v164 = 0;
LABEL_351:
  v282 = &off_1E42C2D08;
  if (v283)
  {
    v257 = (unsigned int *)(v283 + 128);
    do
      v258 = __ldaxr(v257);
    while (__stlxr(v258 - 1, v257));
  }
  v259 = v284;
  if (v284)
  {
    v260 = (unint64_t *)&v284->__shared_owners_;
    do
      v261 = __ldaxr(v260);
    while (__stlxr(v261 - 1, v260));
    if (!v261)
    {
      ((void (*)(std::__shared_weak_count *))v259->__on_zero_shared)(v259);
      std::__shared_weak_count::__release_weak(v259);
    }
  }
  v12 = v281;
  if (v281)
  {
    v262 = (unint64_t *)&v281->__shared_owners_;
    do
      v263 = __ldaxr(v262);
    while (__stlxr(v263 - 1, v262));
    if (!v263)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
LABEL_205:
  if (!v32)
    goto LABEL_214;
  v165 = *((_QWORD *)this + 33);
  v166 = *(_QWORD *)(v165 + 8);
  v12 = *(std::__shared_weak_count **)(v165 + 16);
  if (v12)
  {
    v167 = (unint64_t *)&v12->__shared_owners_;
    do
      v168 = __ldxr(v167);
    while (__stxr(v168 + 1, v167));
  }
  if (v166)
  {
LABEL_214:
    if (v37)
    {
      v169 = *((_QWORD *)this + 33);
      v170 = *(_QWORD *)(v169 + 24);
      v1 = *(_QWORD *)(v169 + 32);
      if (v1)
      {
        v171 = (unint64_t *)(v1 + 8);
        do
          v172 = __ldxr(v171);
        while (__stxr(v172 + 1, v171));
      }
      if (!v170)
      {
        v182 = 1;
        goto LABEL_280;
      }
    }
    if (!v47)
      goto LABEL_224;
    v173 = *((_QWORD *)this + 33);
    v174 = *(_QWORD *)(v173 + 40);
    v163 = *(std::__shared_weak_count **)(v173 + 48);
    if (v163)
    {
      v175 = (unint64_t *)&v163->__shared_owners_;
      do
        v176 = __ldxr(v175);
      while (__stxr(v176 + 1, v175));
    }
    if (!v174)
    {
      v182 = 1;
LABEL_274:
      if (v163)
      {
        v217 = (unint64_t *)&v163->__shared_owners_;
        do
          v218 = __ldaxr(v217);
        while (__stlxr(v218 - 1, v217));
        if (!v218)
        {
          ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
          std::__shared_weak_count::__release_weak(v163);
        }
      }
LABEL_279:
      if ((v37 & 1) != 0)
        goto LABEL_280;
LABEL_266:
      if (!v32)
        goto LABEL_289;
      goto LABEL_285;
    }
    v177 = *((_QWORD *)this + 33);
    v178 = *(_QWORD *)(v177 + 56);
    v15 = *(std::__shared_weak_count **)(v177 + 64);
    if (v15)
    {
      v179 = (unint64_t *)&v15->__shared_owners_;
      do
        v180 = __ldxr(v179);
      while (__stxr(v180 + 1, v179));
    }
    if (!v178)
    {
      v182 = 1;
    }
    else
    {
LABEL_224:
      if (v48)
      {
        v181 = *(_QWORD *)karo::Job::getSubJob((pthread_mutex_t **)this, 3);
        v182 = v181 != 0;
        if (v181 || ((v164 ^ 1) & 1) != 0)
        {
          if (v47)
            goto LABEL_269;
          goto LABEL_265;
        }
LABEL_230:
        v182 = *(_QWORD *)karo::Job::getSubJob((pthread_mutex_t **)this, 4) != 0;
        if ((v47 & 1) == 0)
          goto LABEL_279;
        goto LABEL_269;
      }
      if (v164)
        goto LABEL_230;
      v182 = 0;
      if (!v47)
      {
LABEL_265:
        if (!v37)
          goto LABEL_266;
        if (!v1)
          goto LABEL_284;
LABEL_280:
        v219 = (unint64_t *)(v1 + 8);
        do
          v220 = __ldaxr(v219);
        while (__stlxr(v220 - 1, v219));
        if (!v220)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v1);
          if ((v32 & 1) == 0)
            goto LABEL_289;
        }
        else
        {
LABEL_284:
          if ((v32 & 1) == 0)
            goto LABEL_289;
        }
        goto LABEL_285;
      }
    }
LABEL_269:
    if (v15)
    {
      v215 = (unint64_t *)&v15->__shared_owners_;
      do
        v216 = __ldaxr(v215);
      while (__stlxr(v216 - 1, v215));
      if (!v216)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    goto LABEL_274;
  }
  v182 = 1;
LABEL_285:
  if (v12)
  {
    v221 = (unint64_t *)&v12->__shared_owners_;
    do
      v222 = __ldaxr(v221);
    while (__stlxr(v222 - 1, v221));
    if (!v222)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
      if (v182)
        return;
      goto LABEL_290;
    }
  }
LABEL_289:
  if (v182)
    return;
LABEL_290:
  v223 = *((_QWORD *)this + 33);
  v224 = operator new();
  v225 = v224;
  v226 = *((_DWORD *)this + 52);
  v227 = *((unsigned int *)this + 54) | ((unint64_t)*((unsigned int *)this + 53) << 32);
  *(_QWORD *)v224 = off_1E42C4D10;
  *(_QWORD *)(v224 + 8) = v227;
  *(_DWORD *)(v224 + 16) = v226;
  *(_OWORD *)(v224 + 24) = 0u;
  *(_OWORD *)(v224 + 40) = 0u;
  *(_QWORD *)(v224 + 88) = 0;
  *(_WORD *)(v224 + 96) = 257;
  v228 = *((_QWORD *)this + 35);
  v229 = *((_QWORD *)this + 36);
  v230 = v227;
  if (v229)
  {
    v231 = (unint64_t *)(v229 + 8);
    do
      v232 = __ldxr(v231);
    while (__stxr(v232 + 1, v231));
    *(_QWORD *)(v224 + 40) = v228;
    *(_QWORD *)(v224 + 48) = v229;
  }
  else
  {
    *(_QWORD *)(v224 + 40) = v228;
    *(_QWORD *)(v224 + 48) = 0;
  }
  v233 = 1.0 / (double)(1 << v226);
  v234.i64[0] = (int)v230;
  v234.i64[1] = SHIDWORD(v230);
  *(float64x2_t *)(v224 + 104) = vmulq_n_f64(vcvtq_f64_s64(v234), v233);
  *(double *)(v224 + 120) = v233;
  *(double *)(v224 + 128) = v233;
  v235 = (std::__shared_weak_count *)operator new();
  v236 = v235;
  v235->__shared_owners_ = 0;
  v237 = (unint64_t *)&v235->__shared_owners_;
  v235->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E8980;
  v235->__shared_weak_owners_ = 0;
  v235[1].__vftable = (std::__shared_weak_count_vtbl *)v225;
  do
    v238 = __ldxr(v237);
  while (__stxr(v238 + 1, v237));
  v239 = *(std::__shared_weak_count **)(v223 + 128);
  *(_QWORD *)(v223 + 120) = v225;
  *(_QWORD *)(v223 + 128) = v235;
  if (v239)
  {
    v240 = (unint64_t *)&v239->__shared_owners_;
    do
      v241 = __ldaxr(v240);
    while (__stlxr(v241 - 1, v240));
    if (!v241)
    {
      ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
      std::__shared_weak_count::__release_weak(v239);
    }
  }
  do
    v242 = __ldaxr(v237);
  while (__stlxr(v242 - 1, v237));
  if (!v242)
  {
    ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
    std::__shared_weak_count::__release_weak(v236);
  }
  pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
  v243 = (*((_DWORD *)this + 40) & 2) == 0;
  pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
  *((_BYTE *)this + 188) = v243;
  pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
  *((_DWORD *)this + 40) |= 1u;
  pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
}

void sub_19FA5B468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  std::pair<std::shared_ptr<altitude::GEOTileDataPrivate>,karo::AsyncRequestManager::RequestHandle>::~pair(&a26);
  _Unwind_Resume(a1);
}

void sub_19FA5B49C()
{
  void *v0;

  JUMPOUT(0x19FA5B4E8);
}

void sub_19FA5B4B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 88))(v1);
  _Unwind_Resume(a1);
}

void sub_19FA5B4E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  std::pair<std::shared_ptr<altitude::GEOTileDataPrivate>,karo::AsyncRequestManager::RequestHandle>::~pair(&a26);
  _Unwind_Resume(a1);
}

uint64_t altitude::LabelDataLoadJob::succeeded(altitude::LabelDataLoadJob *this)
{
  return *((unsigned __int8 *)this + 188);
}

_QWORD *std::pair<std::shared_ptr<altitude::GEOTileDataPrivate>,karo::AsyncRequestManager::RequestHandle>::~pair(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  a1[2] = &off_1E42C2D08;
  v2 = a1[3];
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 128);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
  }
  v5 = (std::__shared_weak_count *)a1[4];
  if (!v5)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v8 = (std::__shared_weak_count *)a1[1];
    if (!v8)
      return a1;
  }
  else
  {
LABEL_8:
    v8 = (std::__shared_weak_count *)a1[1];
    if (!v8)
      return a1;
  }
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  return a1;
}

void std::__shared_ptr_pointer<altitude::AnchorTilePrivate *,std::shared_ptr<altitude::AnchorTilePrivate>::__shared_ptr_default_delete<altitude::AnchorTilePrivate,altitude::AnchorTilePrivate>,std::allocator<altitude::AnchorTilePrivate>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<altitude::AnchorTilePrivate *,std::shared_ptr<altitude::AnchorTilePrivate>::__shared_ptr_default_delete<altitude::AnchorTilePrivate,altitude::AnchorTilePrivate>,std::allocator<altitude::AnchorTilePrivate>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

void sub_19FA5B814(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19FA5B948(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ___ZL13LoadCoreMediav_block_invoke_15553()
{
  LoadCoreMedia(void)::frameworkLibrary = (uint64_t)dlopen("/System/Library/Frameworks/CoreMedia.framework/CoreMedia", 2);
  if (!LoadCoreMedia(void)::frameworkLibrary)
    NSLog((NSString *)CFSTR("### Failed to Soft Linked: /System/Library/Frameworks/CoreMedia.framework/CoreMedia"));
}

void ___ZL16LoadVideoToolboxv_block_invoke()
{
  LoadVideoToolbox(void)::frameworkLibrary = (uint64_t)dlopen("/System/Library/Frameworks/VideoToolbox.framework/VideoToolbox", 2);
  if (!LoadVideoToolbox(void)::frameworkLibrary)
    NSLog((NSString *)CFSTR("### Failed to Soft Linked: /System/Library/Frameworks/VideoToolbox.framework/VideoToolbox"));
}

uint64_t initVTDecompressionSessionInvalidate(OpaqueVTDecompressionSession *a1)
{
  if (LoadVideoToolbox(void)::loadPredicate != -1)
    dispatch_once(&LoadVideoToolbox(void)::loadPredicate, &__block_literal_global_15551);
  softLinkVTDecompressionSessionInvalidate = (uint64_t (*)(OpaqueVTDecompressionSession *))dlsym((void *)LoadVideoToolbox(void)::frameworkLibrary, "VTDecompressionSessionInvalidate");
  return softLinkVTDecompressionSessionInvalidate(a1);
}

uint64_t initVTDecompressionSessionWaitForAsynchronousFrames(OpaqueVTDecompressionSession *a1)
{
  if (LoadVideoToolbox(void)::loadPredicate != -1)
    dispatch_once(&LoadVideoToolbox(void)::loadPredicate, &__block_literal_global_15551);
  softLinkVTDecompressionSessionWaitForAsynchronousFrames = (uint64_t (*)(OpaqueVTDecompressionSession *))dlsym((void *)LoadVideoToolbox(void)::frameworkLibrary, "VTDecompressionSessionWaitForAsynchronousFrames");
  return softLinkVTDecompressionSessionWaitForAsynchronousFrames(a1);
}

void md::HardwareVideoDecodingSession::~HardwareVideoDecodingSession(std::mutex *this)
{
  char *i;
  OpaqueVTDecompressionSession *v3;
  _QWORD *v4;
  _QWORD *v5;
  void *sig;

  std::mutex::lock(this);
  for (i = &this[1].__m_.__opaque[8]; ; CFRelease(*((CFTypeRef *)i + 5)))
  {
    i = *(char **)i;
    if (!i)
      break;
    v3 = (OpaqueVTDecompressionSession *)*((_QWORD *)i + 4);
    softLinkVTDecompressionSessionWaitForAsynchronousFrames(v3);
    softLinkVTDecompressionSessionInvalidate(v3);
    CFRelease(v3);
  }
  std::mutex::unlock(this);
  v4 = *(_QWORD **)&this[1].__m_.__opaque[8];
  if (v4)
  {
    do
    {
      v5 = (_QWORD *)*v4;
      operator delete(v4);
      v4 = v5;
    }
    while (v5);
  }
  sig = (void *)this[1].__m_.__sig;
  this[1].__m_.__sig = 0;
  if (sig)
    operator delete(sig);
  std::mutex::~mutex(this);
}

void sub_19FA5BD4C(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;

  v3 = *(_QWORD **)(v1 + 80);
  if (v3)
  {
    do
    {
      v4 = (_QWORD *)*v3;
      operator delete(v3);
      v3 = v4;
    }
    while (v4);
  }
  v5 = *(void **)(v1 + 64);
  *(_QWORD *)(v1 + 64) = 0;
  if (v5)
    operator delete(v5);
  std::mutex::~mutex((std::mutex *)v1);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__15563(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__15564(uint64_t a1)
{

}

intptr_t ___ZN2md28HardwareVideoDecodingSession10decodeSyncENS_19HardwareVideoOutputEPKhmS3_miPhm_block_invoke(uint64_t a1, uint64_t a2, int a3)
{
  if (!a3)
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = a2;
    CVPixelBufferRetain(*(CVPixelBufferRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
  }
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
}

void md::HardwareVideoDecodingSession::decode(uint64_t a1, unsigned int a2, const void *a3, opaqueCMSampleBuffer *a4, uint64_t a5, uint64_t a6, void *a7, opaqueCMFormatDescription *a8, unsigned __int8 a9, void *a10)
{
  int v18;
  opaqueCMFormatDescription *v19;
  BOOL v20;
  uint64_t Dimensions;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int8x8_t v27;
  uint8x8_t v28;
  unint64_t v29;
  uint64_t **v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  const opaqueCMFormatDescription *v35;
  CFTypeRef v36;
  opaqueCMFormatDescription *v37;
  void *v38;
  const __CFDictionary *Mutable;
  __CFDictionary *v40;
  int v41;
  CFNumberRef v42;
  CFNumberRef v43;
  uint64_t v44;
  const void *v45;
  unint64_t v46;
  uint8x8_t v47;
  void **v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  float v52;
  float v53;
  _BOOL8 v54;
  unint64_t v55;
  unint64_t v56;
  size_t prime;
  void *v58;
  void *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  size_t v63;
  size_t v64;
  size_t v65;
  _QWORD *i;
  size_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint8x8_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  size_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  unint64_t v79;
  int v80;
  opaqueCMSampleBuffer *v81;
  void *v82;
  void (*v83)(uint64_t, uint64_t, uint64_t, uint64_t, void *);
  id v84;
  void *v85;
  opaqueCMFormatDescription *v86;
  void *v87;
  void (**v88)(id, _QWORD, uint64_t);
  _QWORD v89[4];
  id v90;
  int valuePtr;
  opaqueCMSampleBuffer *v92;
  uint64_t v93;
  CFTypeRef cf;
  uint64_t v95;
  opaqueCMFormatDescription *v96[2];

  v96[1] = *(opaqueCMFormatDescription **)MEMORY[0x1E0C80C00];
  v88 = a10;
  v96[0] = 0;
  cf = a3;
  v95 = a5;
  v92 = a4;
  v93 = a6;
  v18 = softLinkCMVideoFormatDescriptionCreateFromH264ParameterSets(0, 2uLL, (const unsigned __int8 *const *)&cf, (const unint64_t *)&v92, 4, v96);
  v19 = v96[0];
  if (v18)
    v20 = 1;
  else
    v20 = v96[0] == 0;
  if (v20)
  {
    v88[2](v88, 0, 2);
    goto LABEL_138;
  }
  v87 = a7;
  Dimensions = softLinkCMVideoFormatDescriptionGetDimensions((uint64_t)v96[0]);
  CFRelease(v19);
  v86 = a8;
  std::mutex::lock((std::mutex *)a1);
  v22 = 0x9E3779B97F4A7C15;
  v23 = ((Dimensions >> 32)
       + ((((int)Dimensions - 0x61C8864680B57FA7) ^ 0x11) << 6)
       + ((((int)Dimensions - 0x61C8864680B57FA7) ^ 0x11uLL) >> 2)
       - 0x61C8864680B583EBLL) ^ ((int)Dimensions - 0x61C8864680B57FA7) ^ 0x11;
  v24 = (a2 + (v23 << 6) + (v23 >> 2) - 0x61C8864680B583EBLL) ^ v23;
  if (a9)
    v22 = 0x9E3779B97F4A7C16;
  v25 = v22 + (v24 << 6) + (v24 >> 2);
  v26 = v25 ^ v24;
  v27 = *(int8x8_t *)(a1 + 72);
  if (v27)
  {
    v28 = (uint8x8_t)vcnt_s8(v27);
    v28.i16[0] = vaddlv_u8(v28);
    if (v28.u32[0] > 1uLL)
    {
      v29 = v25 ^ v24;
      if (v26 >= *(_QWORD *)&v27)
        v29 = v26 % *(_QWORD *)&v27;
    }
    else
    {
      v29 = v26 & (*(_QWORD *)&v27 - 1);
    }
    v30 = *(uint64_t ***)(*(_QWORD *)(a1 + 64) + 8 * v29);
    if (v30)
    {
      v31 = *v30;
      if (v31)
      {
        if (v28.u32[0] < 2uLL)
        {
          v32 = *(_QWORD *)&v27 - 1;
          while (1)
          {
            v34 = v31[1];
            if (v34 == v26)
            {
              if (*((_DWORD *)v31 + 4) == (_DWORD)Dimensions
                && *(uint64_t *)((char *)v31 + 20) == __PAIR64__(a2, HIDWORD(Dimensions))
                && *((unsigned __int8 *)v31 + 28) == a9)
              {
                goto LABEL_33;
              }
            }
            else if ((v34 & v32) != v29)
            {
              goto LABEL_34;
            }
            v31 = (uint64_t *)*v31;
            if (!v31)
              goto LABEL_34;
          }
        }
        do
        {
          v33 = v31[1];
          if (v33 == v26)
          {
            if (*((_DWORD *)v31 + 4) == (_DWORD)Dimensions
              && *(uint64_t *)((char *)v31 + 20) == __PAIR64__(a2, HIDWORD(Dimensions))
              && *((unsigned __int8 *)v31 + 28) == a9)
            {
LABEL_33:
              v36 = (CFTypeRef)v31[4];
              v35 = (const opaqueCMFormatDescription *)v31[5];
              v37 = v86;
              v38 = v87;
              goto LABEL_135;
            }
          }
          else
          {
            if (v33 >= *(_QWORD *)&v27)
              v33 %= *(_QWORD *)&v27;
            if (v33 != v29)
              break;
          }
          v31 = (uint64_t *)*v31;
        }
        while (v31);
      }
    }
  }
LABEL_34:
  v96[0] = 0;
  cf = a3;
  v95 = a5;
  v92 = a4;
  v93 = a6;
  if (softLinkCMVideoFormatDescriptionCreateFromH264ParameterSets(0, 2uLL, (const unsigned __int8 *const *)&cf, (const unint64_t *)&v92, 4, v96))v35 = 0;
  else
    v35 = v96[0];
  LODWORD(v96[0]) = HIDWORD(Dimensions);
  LODWORD(v92) = Dimensions;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v40 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  valuePtr = 0;
  switch(a2)
  {
    case 2u:
      v41 = 1111970369;
      goto LABEL_43;
    case 1u:
      v41 = 875704422;
      goto LABEL_43;
    case 0u:
      v41 = 1278555701;
LABEL_43:
      valuePtr = v41;
      break;
  }
  v42 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v43 = CFNumberCreate(0, kCFNumberSInt32Type, &v92);
  v44 = (uint64_t)CFNumberCreate(0, kCFNumberSInt32Type, v96);
  CFDictionarySetValue(v40, (const void *)*MEMORY[0x1E0CA9040], v42);
  CFDictionarySetValue(v40, (const void *)*MEMORY[0x1E0CA90E0], v43);
  CFDictionarySetValue(v40, (const void *)*MEMORY[0x1E0CA8FD8], (const void *)v44);
  CFRelease(v42);
  CFRelease(v43);
  CFRelease((CFTypeRef)v44);
  CFDictionarySetValue(v40, (const void *)*MEMORY[0x1E0CA9028], (const void *)*MEMORY[0x1E0C9AE50]);
  v45 = (const void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionary");
  CFDictionarySetValue(v40, (const void *)*MEMORY[0x1E0CA8FF0], v45);
  cf = 0;
  LODWORD(v43) = softLinkVTDecompressionSessionCreate(0, v35, Mutable, v40, 0, (OpaqueVTDecompressionSession **)&cf);
  CFRelease(Mutable);
  CFRelease(v40);
  if ((_DWORD)v43 || (v36 = cf) == 0)
  {
    v88[2](v88, 0, 3);
    std::mutex::unlock((std::mutex *)a1);
    goto LABEL_138;
  }
  v46 = *(_QWORD *)(a1 + 72);
  if (v46)
  {
    v47 = (uint8x8_t)vcnt_s8((int8x8_t)v46);
    v47.i16[0] = vaddlv_u8(v47);
    if (v47.u32[0] > 1uLL)
    {
      v44 = v26;
      if (v26 >= v46)
        v44 = v26 % v46;
    }
    else
    {
      v44 = v26 & (v46 - 1);
    }
    v48 = *(void ***)(*(_QWORD *)(a1 + 64) + 8 * v44);
    if (v48)
    {
      v49 = *v48;
      if (*v48)
      {
        if (v47.u32[0] < 2uLL)
        {
          while (1)
          {
            v51 = v49[1];
            if (v51 == v26)
            {
              if (*((_DWORD *)v49 + 4) == (_DWORD)Dimensions
                && *(_QWORD *)((char *)v49 + 20) == __PAIR64__(a2, HIDWORD(Dimensions))
                && *((unsigned __int8 *)v49 + 28) == a9)
              {
                goto LABEL_72;
              }
            }
            else if ((v51 & (v46 - 1)) != v44)
            {
              goto LABEL_73;
            }
            v49 = (_QWORD *)*v49;
            if (!v49)
              goto LABEL_73;
          }
        }
        do
        {
          v50 = v49[1];
          if (v50 == v26)
          {
            if (*((_DWORD *)v49 + 4) == (_DWORD)Dimensions
              && *(_QWORD *)((char *)v49 + 20) == __PAIR64__(a2, HIDWORD(Dimensions))
              && *((unsigned __int8 *)v49 + 28) == a9)
            {
LABEL_72:
              v37 = v86;
              v38 = v87;
              goto LABEL_134;
            }
          }
          else
          {
            if (v50 >= v46)
              v50 %= v46;
            if (v50 != v44)
              break;
          }
          v49 = (_QWORD *)*v49;
        }
        while (v49);
      }
    }
  }
LABEL_73:
  v49 = operator new(0x30uLL);
  *v49 = 0;
  v49[1] = v26;
  v49[2] = Dimensions;
  *((_DWORD *)v49 + 6) = a2;
  *((_DWORD *)v49 + 7) = a9;
  v49[4] = 0;
  v49[5] = 0;
  v52 = (float)(unint64_t)(*(_QWORD *)(a1 + 88) + 1);
  v53 = *(float *)(a1 + 96);
  if (v46 && (float)(v53 * (float)v46) >= v52)
  {
    v38 = v87;
    goto LABEL_124;
  }
  v54 = 1;
  if (v46 >= 3)
    v54 = (v46 & (v46 - 1)) != 0;
  v55 = v54 | (2 * v46);
  v56 = vcvtps_u32_f32(v52 / v53);
  if (v55 <= v56)
    prime = v56;
  else
    prime = v55;
  v38 = v87;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v46 = *(_QWORD *)(a1 + 72);
  }
  if (prime > v46)
  {
LABEL_86:
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v58 = operator new(8 * prime);
    v59 = *(void **)(a1 + 64);
    *(_QWORD *)(a1 + 64) = v58;
    if (v59)
      operator delete(v59);
    v60 = 0;
    *(_QWORD *)(a1 + 72) = prime;
    do
      *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v60++) = 0;
    while (prime != v60);
    v62 = a1 + 80;
    v61 = *(_QWORD **)(a1 + 80);
    if (!v61)
      goto LABEL_110;
    v63 = v61[1];
    v64 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v65 = v63 & v64;
      *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v65) = v62;
      for (i = (_QWORD *)*v61; *v61; i = (_QWORD *)*v61)
      {
        v67 = i[1] & v64;
        if (v67 == v65)
        {
          v61 = i;
        }
        else
        {
          v68 = *(_QWORD *)(a1 + 64);
          if (*(_QWORD *)(v68 + 8 * v67))
          {
            *v61 = *i;
            v69 = 8 * v67;
            *i = **(_QWORD **)(*(_QWORD *)(a1 + 64) + v69);
            **(_QWORD **)(*(_QWORD *)(a1 + 64) + v69) = i;
          }
          else
          {
            *(_QWORD *)(v68 + 8 * v67) = v61;
            v61 = i;
            v65 = v67;
          }
        }
      }
LABEL_110:
      v46 = prime;
      goto LABEL_111;
    }
    if (v63 >= prime)
      v63 %= prime;
    *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v63) = v62;
    v73 = (_QWORD *)*v61;
    if (!*v61)
      goto LABEL_110;
    while (1)
    {
      v75 = v73[1];
      if (v75 >= prime)
        v75 %= prime;
      if (v75 != v63)
      {
        v76 = *(_QWORD *)(a1 + 64);
        if (!*(_QWORD *)(v76 + 8 * v75))
        {
          *(_QWORD *)(v76 + 8 * v75) = v61;
          goto LABEL_115;
        }
        *v61 = *v73;
        v74 = 8 * v75;
        *v73 = **(_QWORD **)(*(_QWORD *)(a1 + 64) + v74);
        **(_QWORD **)(*(_QWORD *)(a1 + 64) + v74) = v73;
        v73 = v61;
      }
      v75 = v63;
LABEL_115:
      v61 = v73;
      v73 = (_QWORD *)*v73;
      v63 = v75;
      if (!v73)
        goto LABEL_110;
    }
  }
  if (prime >= v46)
    goto LABEL_111;
  v70 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 88) / *(float *)(a1 + 96));
  if (v46 < 3 || (v71 = (uint8x8_t)vcnt_s8((int8x8_t)v46), v71.i16[0] = vaddlv_u8(v71), v71.u32[0] > 1uLL))
  {
    v70 = std::__next_prime(v70);
  }
  else
  {
    v72 = 1 << -(char)__clz(v70 - 1);
    if (v70 >= 2)
      v70 = v72;
  }
  if (prime <= v70)
    prime = v70;
  if (prime < v46)
  {
    if (!prime)
    {
      v85 = *(void **)(a1 + 64);
      *(_QWORD *)(a1 + 64) = 0;
      if (v85)
        operator delete(v85);
      v46 = 0;
      *(_QWORD *)(a1 + 72) = 0;
      goto LABEL_111;
    }
    goto LABEL_86;
  }
  v46 = *(_QWORD *)(a1 + 72);
LABEL_111:
  if ((v46 & (v46 - 1)) != 0)
  {
    if (v26 >= v46)
      v44 = v26 % v46;
    else
      v44 = v26;
  }
  else
  {
    v44 = (v46 - 1) & v26;
  }
LABEL_124:
  v77 = *(_QWORD *)(a1 + 64);
  v78 = *(_QWORD **)(v77 + 8 * v44);
  v37 = v86;
  if (v78)
  {
    *v49 = *v78;
LABEL_132:
    *v78 = v49;
    goto LABEL_133;
  }
  *v49 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v49;
  *(_QWORD *)(v77 + 8 * v44) = a1 + 80;
  if (*v49)
  {
    v79 = *(_QWORD *)(*v49 + 8);
    if ((v46 & (v46 - 1)) != 0)
    {
      if (v79 >= v46)
        v79 %= v46;
    }
    else
    {
      v79 &= v46 - 1;
    }
    v78 = (_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v79);
    goto LABEL_132;
  }
LABEL_133:
  ++*(_QWORD *)(a1 + 88);
LABEL_134:
  v49[4] = v36;
  v49[5] = v35;
LABEL_135:
  std::mutex::unlock((std::mutex *)a1);
  cf = 0;
  if (softLinkCMBlockBufferCreateWithMemoryBlock(0, v38, (unint64_t)v37, (const __CFAllocator *)*MEMORY[0x1E0C9AE20], 0, 0, (unint64_t)v37, 0, (OpaqueCMBlockBuffer **)&cf)|| (v92 = 0, v96[0] = v37, v80 = softLinkCMSampleBufferCreateReady((const __CFAllocator *)*MEMORY[0x1E0C9AE00], (OpaqueCMBlockBuffer *)cf, v35, 1, 0, 0, 1,
                (const unint64_t *)v96,
                &v92),
        CFRelease(cf),
        v80)
    || (v81 = v92) == 0)
  {
    v88[2](v88, 0, 4);
  }
  else
  {
    v82 = (void *)MEMORY[0x1A1AF5730](v88);
    LODWORD(cf) = 0;
    v83 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, void *))softLinkVTDecompressionSessionDecodeFrameWithOutputHandler;
    v89[0] = MEMORY[0x1E0C809B0];
    v89[1] = 3221225472;
    v89[2] = ___ZN2md28HardwareVideoDecodingSession6decodeENS_19HardwareVideoOutputEPKhmS3_miPhmbU13block_pointerFvP10__CVBufferNS_26HardwareVideoSessionResultEE_block_invoke;
    v89[3] = &unk_1E42F2D28;
    v84 = v82;
    v90 = v84;
    v83((uint64_t)v36, (uint64_t)v81, a9, (uint64_t)&cf, v89);
    CFRelease(v81);

  }
LABEL_138:

}

void sub_19FA5C898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  void *v19;

  _Unwind_Resume(a1);
}

uint64_t ___ZN2md28HardwareVideoDecodingSession6decodeENS_19HardwareVideoOutputEPKhmS3_miPhmbU13block_pointerFvP10__CVBufferNS_26HardwareVideoSessionResultEE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t initVTDecompressionSessionDecodeFrameWithOutputHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v9;
  uint64_t v10;

  v9 = a5;
  if (LoadVideoToolbox(void)::loadPredicate != -1)
    dispatch_once(&LoadVideoToolbox(void)::loadPredicate, &__block_literal_global_15551);
  softLinkVTDecompressionSessionDecodeFrameWithOutputHandler = (uint64_t (*)())dlsym((void *)LoadVideoToolbox(void)::frameworkLibrary, "VTDecompressionSessionDecodeFrameWithOutputHandler");
  v10 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, id))softLinkVTDecompressionSessionDecodeFrameWithOutputHandler)(a1, a2, a3, a4, v9);

  return v10;
}

void sub_19FA5C9CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t initCMSampleBufferCreateReady(const __CFAllocator *a1, OpaqueCMBlockBuffer *a2, const opaqueCMFormatDescription *a3, uint64_t a4, uint64_t a5, const CMSampleTimingInfo *a6, uint64_t a7, const unint64_t *a8, opaqueCMSampleBuffer **a9)
{
  if (LoadCoreMedia(void)::loadPredicate != -1)
    dispatch_once(&LoadCoreMedia(void)::loadPredicate, &__block_literal_global_5);
  softLinkCMSampleBufferCreateReady = (uint64_t (*)(const __CFAllocator *, OpaqueCMBlockBuffer *, const opaqueCMFormatDescription *, uint64_t, uint64_t, const CMSampleTimingInfo *, uint64_t, const unint64_t *, opaqueCMSampleBuffer **))dlsym((void *)LoadCoreMedia(void)::frameworkLibrary, "CMSampleBufferCreateReady");
  return softLinkCMSampleBufferCreateReady(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t initCMBlockBufferCreateWithMemoryBlock(const __CFAllocator *a1, void *a2, unint64_t a3, const __CFAllocator *a4, const CMBlockBufferCustomBlockSource *a5, unint64_t a6, unint64_t a7, uint64_t a8, OpaqueCMBlockBuffer **a9)
{
  if (LoadCoreMedia(void)::loadPredicate != -1)
    dispatch_once(&LoadCoreMedia(void)::loadPredicate, &__block_literal_global_5);
  softLinkCMBlockBufferCreateWithMemoryBlock = (uint64_t (*)(const __CFAllocator *, void *, unint64_t, const __CFAllocator *, const CMBlockBufferCustomBlockSource *, unint64_t, unint64_t, unsigned int, OpaqueCMBlockBuffer **))dlsym((void *)LoadCoreMedia(void)::frameworkLibrary, "CMBlockBufferCreateWithMemoryBlock");
  return softLinkCMBlockBufferCreateWithMemoryBlock(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t initVTDecompressionSessionCreate(const __CFAllocator *a1, const opaqueCMFormatDescription *a2, const __CFDictionary *a3, const __CFDictionary *a4, const VTDecompressionOutputCallbackRecord *a5, OpaqueVTDecompressionSession **a6)
{
  if (LoadVideoToolbox(void)::loadPredicate != -1)
    dispatch_once(&LoadVideoToolbox(void)::loadPredicate, &__block_literal_global_15551);
  softLinkVTDecompressionSessionCreate = (uint64_t (*)(const __CFAllocator *, const opaqueCMFormatDescription *, const __CFDictionary *, const __CFDictionary *, const VTDecompressionOutputCallbackRecord *, OpaqueVTDecompressionSession **))dlsym((void *)LoadVideoToolbox(void)::frameworkLibrary, "VTDecompressionSessionCreate");
  return softLinkVTDecompressionSessionCreate(a1, a2, a3, a4, a5, a6);
}

uint64_t initCMVideoFormatDescriptionGetDimensions(uint64_t a1)
{
  if (LoadCoreMedia(void)::loadPredicate != -1)
    dispatch_once(&LoadCoreMedia(void)::loadPredicate, &__block_literal_global_5);
  softLinkCMVideoFormatDescriptionGetDimensions = (uint64_t (*)())dlsym((void *)LoadCoreMedia(void)::frameworkLibrary, "CMVideoFormatDescriptionGetDimensions");
  return ((uint64_t (*)(uint64_t))softLinkCMVideoFormatDescriptionGetDimensions)(a1);
}

uint64_t initCMVideoFormatDescriptionCreateFromH264ParameterSets(const __CFAllocator *a1, unint64_t a2, const unsigned __int8 *const *a3, const unint64_t *a4, uint64_t a5, const opaqueCMFormatDescription **a6)
{
  if (LoadCoreMedia(void)::loadPredicate != -1)
    dispatch_once(&LoadCoreMedia(void)::loadPredicate, &__block_literal_global_5);
  softLinkCMVideoFormatDescriptionCreateFromH264ParameterSets = (uint64_t (*)(const __CFAllocator *, unint64_t, const unsigned __int8 *const *, const unint64_t *, int, const opaqueCMFormatDescription **))dlsym((void *)LoadCoreMedia(void)::frameworkLibrary, "CMVideoFormatDescriptionCreateFromH264ParameterSets");
  return softLinkCMVideoFormatDescriptionCreateFromH264ParameterSets(a1, a2, a3, a4, a5, a6);
}

void md::TrafficSkeletonTileDecoder::~TrafficSkeletonTileDecoder(md::TrafficSkeletonTileDecoder *this)
{
  JUMPOUT(0x1A1AF4E00);
}

void md::TrafficSkeletonTileDecoder::decode(const gdc::ResourceKey *a1@<X1>, const gdc::RawResourceSourceData *a2@<X2>, _OWORD *a3@<X8>)
{
  std::__shared_weak_count *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  zilch::TrafficSkeletonTile *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  const unsigned __int8 *v15;
  int v16;
  unint64_t v17;
  int *v18;
  int v19;
  int v20;
  int v21;
  NSObject *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  __int128 v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  _BYTE v36[40];
  uint64_t v37;
  std::__shared_weak_count *v38;
  uint8_t buf[4];
  int v40;
  __int16 v41;
  int v42;
  __int16 v43;
  int v44;
  __int16 v45;
  int v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v37 = 0;
  v38 = 0;
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 16))(*(_QWORD *)a2) & 1) != 0)
    goto LABEL_2;
  v12 = (zilch::TrafficSkeletonTile *)operator new();
  zilch::TrafficSkeletonTile::TrafficSkeletonTile(v12);
  v13 = (std::__shared_weak_count *)operator new();
  v13->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v13->__shared_owners_;
  v13->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E8408;
  v13->__shared_weak_owners_ = 0;
  v13[1].__vftable = (std::__shared_weak_count_vtbl *)v12;
  v37 = (uint64_t)v12;
  v38 = v13;
  v15 = (const unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 32))(*(_QWORD *)a2);
  (*(void (**)(_QWORD))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2);
  zilch::ReadBitstream::ReadBitstream((zilch::ReadBitstream *)v36, v15);
  v16 = zilch::TrafficSkeletonTile::decode(v12, (zilch::ReadBitstream *)v36);
  if (v16)
  {
    v37 = 0;
    v38 = 0;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    v18 = (int *)*((_QWORD *)a1 + 1);
    v19 = *((unsigned __int8 *)v18 + 8);
    v20 = *v18;
    v21 = v18[1];
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v22 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109888;
      v40 = v21;
      v41 = 1024;
      v42 = v20;
      v43 = 1024;
      v44 = v19;
      v45 = 1024;
      v46 = v16;
      _os_log_impl(&dword_19F029000, v22, OS_LOG_TYPE_ERROR, "Failed to decode traffic skeleton resource for tile(%d.%d.%d) with error code: %d", buf, 0x1Au);
    }

    if (!v37)
    {
LABEL_2:
      v7 = (std::__shared_weak_count *)operator new(0x30uLL);
      v7->__shared_owners_ = 0;
      v7->__shared_weak_owners_ = 0;
      v7->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5ED8;
      v8 = zilch::TrafficSkeletonTile::TrafficSkeletonTile((zilch::TrafficSkeletonTile *)&v7[1]);
      v9 = v38;
      v37 = v8;
      v38 = v7;
      if (v9)
      {
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
  }
  v23 = operator new(0xB8uLL);
  v24 = v23;
  v23[1] = 0;
  v23[2] = 0;
  *v23 = &off_1E42DD738;
  v25 = v23 + 3;
  v27 = v37;
  v26 = v38;
  if (v38)
  {
    v28 = (unint64_t *)&v38->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
    gdc::Resource::Resource((uint64_t)(v23 + 3), (uint64_t)a1);
    v24[21] = v27;
    v24[22] = v26;
    do
      v30 = __ldxr(v28);
    while (__stxr(v30 + 1, v28));
    do
      v31 = __ldaxr(v28);
    while (__stlxr(v31 - 1, v28));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  else
  {
    gdc::Resource::Resource((uint64_t)(v23 + 3), (uint64_t)a1);
    v24[21] = v27;
    v24[22] = 0;
  }
  *(_QWORD *)&v32 = v25;
  *((_QWORD *)&v32 + 1) = v24;
  *a3 = v32;
  v33 = v38;
  if (v38)
  {
    v34 = (unint64_t *)&v38->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
}

void sub_19FA5D070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<md::TrafficSkeletonTileResource>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD738;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::TrafficSkeletonTileResource>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD738;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::TrafficSkeletonTileResource>::__on_zero_shared(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;

  v2 = (std::__shared_weak_count *)a1[22];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = (void *)a1[4];
  if (v5 != (void *)a1[6])
    free(v5);
}

void std::__shared_ptr_emplace<zilch::TrafficSkeletonTile>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5ED8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<zilch::TrafficSkeletonTile>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5ED8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<zilch::TrafficSkeletonTile>::__on_zero_shared(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void std::__shared_ptr_pointer<zilch::TrafficSkeletonTile *,std::shared_ptr<zilch::TrafficSkeletonTile>::__shared_ptr_default_delete<zilch::TrafficSkeletonTile,zilch::TrafficSkeletonTile>,std::allocator<zilch::TrafficSkeletonTile>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<zilch::TrafficSkeletonTile *,std::shared_ptr<zilch::TrafficSkeletonTile>::__shared_ptr_default_delete<zilch::TrafficSkeletonTile,zilch::TrafficSkeletonTile>,std::allocator<zilch::TrafficSkeletonTile>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v2;
      operator delete(v2);
    }
    JUMPOUT(0x1A1AF4E00);
  }
  return result;
}

void md::OcclusionTest::generateAntennaeTest(uint64_t a1, _BYTE *a2, uint64_t a3, double *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  int v12;
  BOOL v13;
  float v14;
  float v15;
  double *v16;
  float v17;
  double v18;
  double v19;
  double v20;
  double v21;
  float v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  float v28;
  float v29;
  double v30;
  float v31;
  float v32;
  double v33;
  double v34;
  double v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  float v45;
  float v46;
  float v47;
  double v48;
  double v49;
  double v50;
  std::__shared_weak_count *v51;
  unint64_t *p_shared_owners;
  unint64_t v53;
  uint64_t v54;
  float v55;
  float v56;
  float v57;
  float v58;
  uint64_t v59;
  float v60;
  float v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;

  v8 = **(unsigned int **)(a1 + 8);
  md::OcclusionQueryResource::initialize((md::OcclusionQueryResource *)(*(_QWORD *)(a3 + 96) + 24 * v8));
  v9 = *(_QWORD *)(a3 + 96);
  v10 = *(_QWORD *)(v9 + 24 * v8);
  *(_QWORD *)(v10 + 24) = *(_QWORD *)(a3 + 48);
  *(_QWORD *)(v10 + 32) = *(_QWORD *)(a3 + 56);
  v11 = 1.0;
  if (a2[284] != 4)
  {
    v12 = a2[283];
    if ((v12 - 7) >= 3)
    {
      if (v12 == 1)
      {
        v11 = 2.0;
        if (*(_BYTE *)(a1 + 236))
          goto LABEL_10;
        v13 = *(_BYTE *)(a3 + 29) == 0;
        v14 = 10.0;
        v15 = 20.0;
      }
      else
      {
        v13 = v12 == 14;
        v14 = 5.0;
        v15 = 2.0;
      }
      if (v13)
        v11 = v15;
      else
        v11 = v14;
    }
  }
LABEL_10:
  v16 = *(double **)(a1 + 80);
  v17 = 0.0;
  if (a2[281] == 2)
    v17 = *(float *)(a1 + 232);
  v18 = *v16;
  v19 = v16[1];
  v20 = v16[2];
  v21 = a4[19];
  v22 = v17 + v11;
  if (*(_BYTE *)(a3 + 28))
  {
    v23 = 1.0 / sqrt(v18 * v18 + v19 * v19 + v20 * v20);
    v24 = v23 * v18;
    v25 = v23 * v19;
    v26 = v23 * v20;
    v27 = v26 * v11;
    v28 = v24 * v11;
    v29 = v25 * v11;
    v30 = v26 * v22;
    v31 = v24 * v22;
    v32 = v25 * v22;
  }
  else
  {
    v33 = *(double *)(a3 + 8);
    v27 = v33 * v11;
    v30 = v33 * v22;
    v31 = 0.0;
    v32 = 0.0;
    v28 = 0.0;
    v29 = 0.0;
  }
  v34 = v18 - a4[17];
  v35 = v19 - a4[18];
  v36 = v20 - v21;
  if (v11 == v22)
    v37 = 2;
  else
    v37 = 3;
  v38 = v9 + 24 * v8;
  v40 = *(_QWORD *)(v38 + 16);
  v39 = v38 + 16;
  v41 = **(_QWORD **)(v40 + 64);
  v42 = *(_QWORD *)(v41 + 8) * v37;
  v43 = *(_QWORD *)(v41 + 72);
  v44 = *(_QWORD *)(v41 + 80) - v43;
  if (v42 != v44)
  {
    if (v42 <= v44)
    {
      if (v42 < v44)
        *(_QWORD *)(v41 + 80) = v43 + v42;
    }
    else
    {
      v63 = v27;
      v65 = v34;
      v61 = v29;
      v45 = v28;
      v46 = v32;
      v47 = v31;
      v48 = v30;
      v49 = v35;
      v50 = v20 - v21;
      std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v41 + 72, v42 - v44);
      v36 = v50;
      v35 = v49;
      v30 = v48;
      v31 = v47;
      v32 = v46;
      v28 = v45;
      v29 = v61;
      v27 = v63;
      v34 = v65;
    }
    v51 = *(std::__shared_weak_count **)(v41 + 32);
    *(_QWORD *)(v41 + 24) = 0;
    *(_QWORD *)(v41 + 32) = 0;
    if (v51)
    {
      p_shared_owners = (unint64_t *)&v51->__shared_owners_;
      do
        v53 = __ldaxr(p_shared_owners);
      while (__stlxr(v53 - 1, p_shared_owners));
      if (!v53)
      {
        v64 = v35;
        v66 = v30;
        v62 = v36;
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
        v36 = v62;
        v35 = v64;
        v30 = v66;
      }
    }
    *(_QWORD *)(v41 + 120) = 0;
    *(_DWORD *)(v41 + 112) = 0;
    v54 = *(_QWORD *)(v41 + 80) - *(_QWORD *)(v41 + 72);
    *(_QWORD *)(v41 + 40) = 0;
    *(_QWORD *)(v41 + 48) = v54;
    *(_QWORD *)(v41 + 56) = 0;
    *(_QWORD *)(v41 + 64) = v54;
    v41 = **(_QWORD **)(*(_QWORD *)v39 + 64);
    v42 = *(_QWORD *)(v41 + 8) * v37;
  }
  v55 = v34;
  v56 = v35;
  v57 = v36;
  if (v42)
    v59 = *(_QWORD *)(v41 + 72);
  else
    v59 = 0;
  *(float *)v59 = v55;
  *(float *)(v59 + 4) = v56;
  *(float *)(v59 + 8) = v57;
  *(_DWORD *)(v59 + 12) = 1065353216;
  *(float *)(v59 + 16) = v28 + v55;
  *(float *)(v59 + 20) = v29 + v56;
  v58 = v27;
  *(float *)(v59 + 24) = v58 + v57;
  *(_DWORD *)(v59 + 28) = 1065353216;
  if (v11 != v22)
  {
    v60 = v30;
    *(float *)(v59 + 32) = v31 + v55;
    *(float *)(v59 + 36) = v32 + v56;
    *(float *)(v59 + 40) = v60 + v57;
    *(_DWORD *)(v59 + 44) = 1065353216;
  }
  if (v42)
  {
    if (*(_QWORD *)(v41 + 64) > v42)
      v42 = *(_QWORD *)(v41 + 64);
    *(_QWORD *)(v41 + 56) = 0;
    *(_QWORD *)(v41 + 64) = v42;
  }
}

void md::OcclusionTest::generatePointTest(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  const double *v7;
  const double *v8;
  uint64_t v9;
  uint64_t v10;

  v8 = *(const double **)(a1 + 80);
  v7 = *(const double **)(a1 + 88);
  v9 = ((char *)v7 - (char *)v8) / 24;
  if (*(unsigned __int8 *)(a1 + 237) - 1 >= 2)
  {
    if (!*(_BYTE *)(a1 + 237))
      md::OcclusionTest::populatePointProbe(*(_QWORD *)(a1 + 8), a3, a4, 0, *(const double **)(a1 + 80), ((char *)v7 - (char *)v8) / 24);
  }
  else if (v7 != v8)
  {
    v10 = 0;
    do
    {
      md::OcclusionTest::populatePointProbe(*(_QWORD *)(a1 + 8), a3, a4, v10++, v8, 1uLL);
      v8 += 3;
    }
    while (v9 != v10);
  }
}

void md::OcclusionTest::generateLineSegmentTest(float32x2_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float64x2_t *v11;
  float v12;
  float32x4_t v13;
  float64x2_t v14;
  double v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  uint64_t v28;
  float v29;
  float32x2_t *v30;
  double v31;
  float v32;
  float32x4_t v33;
  float32x4_t v34;
  float v35;
  float v36;
  float64x2_t v37;
  float64x2_t v38;

  v8 = **(unsigned int **)&a1[1];
  md::OcclusionQueryResource::initialize((md::OcclusionQueryResource *)(*(_QWORD *)(a3 + 96) + 24 * v8));
  v9 = *(_QWORD *)(a3 + 96);
  v10 = *(_QWORD *)(v9 + 24 * v8);
  *(_QWORD *)(v10 + 24) = *(_QWORD *)(a3 + 48);
  *(_QWORD *)(v10 + 32) = *(_QWORD *)(a3 + 56);
  v11 = (float64x2_t *)a1[10];
  v12 = a1[24].f32[1];
  v13.i32[0] = 0;
  if (*(_BYTE *)(a2 + 281) == 2)
    v13.i32[0] = a1[29].i32[0];
  v14 = vsubq_f64(*v11, *(float64x2_t *)(a4 + 136));
  v15 = v11[1].f64[0] - *(double *)(a4 + 152);
  v16 = v13.f32[0] + v12;
  if (v12 == (float)(v13.f32[0] + v12))
    v17 = 2;
  else
    v17 = 3;
  v18 = v9 + 24 * v8;
  v20 = *(_QWORD *)(v18 + 16);
  v19 = v18 + 16;
  v21 = **(_QWORD **)(v20 + 64);
  v22 = *(_QWORD *)(v21 + 8) * v17;
  v23 = *(_QWORD *)(v21 + 72);
  v24 = *(_QWORD *)(v21 + 80) - v23;
  if (v22 != v24)
  {
    if (v22 <= v24)
    {
      if (v22 < v24)
        *(_QWORD *)(v21 + 80) = v23 + v22;
    }
    else
    {
      v37 = v14;
      std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v21 + 72, v22 - v24);
      v14 = v37;
    }
    v25 = *(std::__shared_weak_count **)(v21 + 32);
    *(_QWORD *)(v21 + 24) = 0;
    *(_QWORD *)(v21 + 32) = 0;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldaxr(p_shared_owners);
      while (__stlxr(v27 - 1, p_shared_owners));
      if (!v27)
      {
        v38 = v14;
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
        v14 = v38;
      }
    }
    *(_QWORD *)(v21 + 120) = 0;
    *(_DWORD *)(v21 + 112) = 0;
    v28 = *(_QWORD *)(v21 + 80) - *(_QWORD *)(v21 + 72);
    *(_QWORD *)(v21 + 40) = 0;
    *(_QWORD *)(v21 + 48) = v28;
    *(_QWORD *)(v21 + 56) = 0;
    *(_QWORD *)(v21 + 64) = v28;
    v21 = **(_QWORD **)(*(_QWORD *)v19 + 64);
    v22 = *(_QWORD *)(v21 + 8) * v17;
  }
  *(float32x2_t *)&v14.f64[0] = vcvt_f32_f64(v14);
  v29 = v15;
  if (v22)
    v30 = *(float32x2_t **)(v21 + 72);
  else
    v30 = 0;
  *v30 = *(float32x2_t *)&v14.f64[0];
  v30[1].f32[0] = v29;
  v30[1].i32[1] = 1065353216;
  v31 = *(double *)(a3 + 8);
  v32 = v31 * v12;
  *(float32x2_t *)v13.f32 = a1[23];
  v13.i32[2] = a1[24].i32[0];
  v33 = (float32x4_t)v14;
  v33.f32[2] = v15;
  v34 = vmlaq_n_f32(v33, v13, v32);
  v30[3].i32[0] = v34.i32[2];
  v30[2] = *(float32x2_t *)v34.f32;
  v30[3].i32[1] = 1065353216;
  if (v12 != v16)
  {
    v35 = v31 * v16;
    v36 = a1[24].f32[0];
    v30[4] = vmla_n_f32(*(float32x2_t *)&v14.f64[0], a1[23], v35);
    v30[5].f32[0] = v29 + (float)(v36 * v35);
    v30[5].i32[1] = 1065353216;
  }
  if (v22)
  {
    if (*(_QWORD *)(v21 + 64) > v22)
      v22 = *(_QWORD *)(v21 + 64);
    *(_QWORD *)(v21 + 56) = 0;
    *(_QWORD *)(v21 + 64) = v22;
  }
}

void md::OcclusionTest::generateLabeledCylinderTest(uint64_t a1, uint64_t a2, uint64_t a3, double *a4)
{
  double *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  double v18;
  double v19;
  float v20;
  float v23;
  double v24;
  double v25;
  double v26;
  float v27;
  float v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  const double *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  double v41;
  double v42;
  double v43;
  double v44[3];
  double v45;
  double v46;
  _QWORD v47[4];

  v47[3] = *MEMORY[0x1E0C80C00];
  v5 = *(double **)(a1 + 80);
  v6 = a4[17];
  v7 = a4[18];
  v8 = v5[1];
  v9 = a4[19];
  v10 = v5[2];
  v11 = v6 - *v5;
  v12 = v7 - v8;
  v13 = v9 - v10;
  v14 = *(float *)(a1 + 184);
  v15 = *(float *)(a1 + 188);
  v17 = *(float *)(a1 + 192);
  v16 = *(float *)(a1 + 196);
  v18 = (float)((float)((float)(v14 * v11) + (float)(v15 * v12)) + (float)(v17 * v13));
  v19 = v6 - (*v5 + v18 * v14);
  v20 = sqrt(v19 * v19+ (v7 - (v8 + v18 * v15)) * (v7 - (v8 + v18 * v15))+ (v9 - (v10 + v18 * v17)) * (v9 - (v10 + v18 * v17)));
  if (v16 >= v20)
  {
    *(_BYTE *)(a1 + 238) = 1;
    return;
  }
  if (*(float *)(a3 + 16) < v20)
  {
    *(_BYTE *)(a1 + 238) = 2;
    return;
  }
  v23 = v16 / v20;
  v24 = *v5 + (float)(v23 * v11);
  v25 = v8 + (float)(v23 * v12);
  v26 = v10 + (float)(v23 * v13);
  v41 = v24;
  v42 = v25;
  v43 = v26;
  v27 = *(float *)(a3 + 24);
  if (v27 != 3.4028e38)
  {
    v28 = fabs(v18) / sqrtf((float)((float)(v11 * v11) + (float)(v12 * v12)) + (float)(v13 * v13));
    v29 = (float)(*(float *)(a3 + 20) + (float)((float)(fminf(v27, v20) - *(float *)(a3 + 20)) * v28));
    v30 = v24 - v6;
    v31 = v25 - v7;
    v32 = v26 - v9;
    v33 = sqrt(v30 * v30 + v31 * v31 + v32 * v32);
    if (v33 > v29)
    {
      v34 = 1.0 / v33;
      v41 = v6 + v30 * v29 * v34;
      v42 = v7 + v31 * v29 * v34;
      v43 = v9 + v32 * v29 * v34;
    }
  }
  md::OcclusionTest::generatePixelRectPoints(a1, &v41, (uint64_t)a4, v44, 4uLL);
  if (*(unsigned __int8 *)(a1 + 237) - 1 >= 2)
  {
    if (*(_BYTE *)(a1 + 237))
      return;
    v36 = *(_QWORD *)(a1 + 8);
    v35 = &v41;
    v37 = (_QWORD *)a3;
    v38 = (uint64_t)a4;
    v39 = 0;
    v40 = 5;
  }
  else
  {
    md::OcclusionTest::populatePointProbe(*(_QWORD *)(a1 + 8), (_QWORD *)a3, (uint64_t)a4, 0, &v41, 1uLL);
    md::OcclusionTest::populatePointProbe(*(_QWORD *)(a1 + 8), (_QWORD *)a3, (uint64_t)a4, 1, v44, 1uLL);
    md::OcclusionTest::populatePointProbe(*(_QWORD *)(a1 + 8), (_QWORD *)a3, (uint64_t)a4, 2, &v45, 1uLL);
    md::OcclusionTest::populatePointProbe(*(_QWORD *)(a1 + 8), (_QWORD *)a3, (uint64_t)a4, 3, &v46, 1uLL);
    v35 = (const double *)v47;
    v36 = *(_QWORD *)(a1 + 8);
    v37 = (_QWORD *)a3;
    v38 = (uint64_t)a4;
    v39 = 4;
    v40 = 1;
  }
  md::OcclusionTest::populatePointProbe(v36, v37, v38, v39, v35, v40);
}

void md::OcclusionTest::generatePixelRectangleTest(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  double *v10;
  double *v11;
  double *v12;
  unint64_t v13;
  uint64_t v14;
  const double *v15;
  uint64_t v16;

  {
    v16 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v16, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v8 = mdm::Allocator::instance(void)::alloc;
  if (*(_BYTE *)(a1 + 239))
  {
    v9 = 24 * *(unsigned __int8 *)(a1 + 239);
    v10 = (double *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                         + 16))(mdm::Allocator::instance(void)::alloc, v9, 8);
    v11 = &v10[(unint64_t)v9 / 8];
    v12 = (double *)((char *)v10 + v9 - ((unsigned __int16)(v9 - 24 * ((2731 * v9) >> 16)) & 0xFFF8));
  }
  else
  {
    v12 = 0;
    v10 = 0;
    v11 = 0;
  }
  v13 = 0xAAAAAAAAAAAAAAABLL * (v12 - v10);
  md::OcclusionTest::generatePixelRectPoints(a1, *(double **)(a1 + 80), a4, v10, v13);
  if (*(unsigned __int8 *)(a1 + 237) - 1 >= 2)
  {
    if (!*(_BYTE *)(a1 + 237))
      md::OcclusionTest::populatePointProbe(*(_QWORD *)(a1 + 8), a3, a4, 0, v10, v13);
  }
  else if (v12 != v10)
  {
    v14 = 0;
    v15 = v10;
    do
    {
      md::OcclusionTest::populatePointProbe(*(_QWORD *)(a1 + 8), a3, a4, v14++, v15, 1uLL);
      v15 += 3;
    }
    while (v13 != v14);
  }
  if (v10)
    (*(void (**)(uint64_t, double *, int64_t))(*(_QWORD *)v8 + 40))(v8, v10, (char *)v11 - (char *)v10);
}

void sub_19FA5DD44(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (v2)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1 + 40))(v1, v2, v3 - v2);
  _Unwind_Resume(exception_object);
}

uint64_t md::OcclusionTest::generatePixelRectPoints(uint64_t result, double *a2, uint64_t a3, double *a4, unint64_t a5)
{
  int32x2_t v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  unint64_t v34;
  float v35;
  double v36;
  float v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  float32x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  int64x2_t v49;
  double *v50;
  unint64_t v51;
  float64x2_t v52;
  float32x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  double *v62;
  float v63;
  double v64;
  double v65;
  float32x2_t v66;
  float32x2_t v67;
  float64x2_t v68;
  float32x2_t v69;
  float64x2x3_t v70;

  if (*(_BYTE *)(a3 + 8))
  {
    v6 = 1.0;
    v7 = 0.0;
    v8 = 0.0;
    if (*(_BYTE *)(result + 228))
      goto LABEL_3;
LABEL_6:
    v17 = *(double *)(a3 + 136);
    v18 = *(double *)(a3 + 144);
    v15 = *(uint64_t *)a2;
    v16 = *((uint64_t *)a2 + 1);
    v24 = v17 - *a2;
    v20 = *(double *)(a3 + 152);
    v19 = *((uint64_t *)a2 + 2);
    v25 = -((v18 - *(double *)&v16) * v6 - (v20 - *(double *)&v19) * v8);
    v26 = -((v20 - *(double *)&v19) * v7 - v24 * v6);
    v27 = -(v24 * v8 - (v18 - *(double *)&v16) * v7);
    v28 = 1.0 / sqrt(v27 * v27 + v25 * v25 + v26 * v26);
    v12 = v28 * v25;
    v13 = v28 * v26;
    v14 = v28 * v27;
    if (!a5)
      return result;
    goto LABEL_7;
  }
  v21 = a2[1];
  v22 = a2[2];
  v23 = 1.0 / sqrt(*a2 * *a2 + v21 * v21 + v22 * v22);
  v7 = v23 * *a2;
  v8 = v23 * v21;
  v6 = v23 * v22;
  if (!*(_BYTE *)(result + 228))
    goto LABEL_6;
LABEL_3:
  v9 = *(float *)(result + 216);
  v10 = *(float *)(result + 220);
  v11 = *(float *)(result + 224);
  v12 = -(v6 * v10 - v8 * v11);
  v13 = -(v7 * v11 - v6 * v9);
  v14 = -(v8 * v9 - v7 * v10);
  v15 = *(uint64_t *)a2;
  v16 = *((uint64_t *)a2 + 1);
  v17 = *(double *)(a3 + 136);
  v18 = *(double *)(a3 + 144);
  v19 = *((uint64_t *)a2 + 2);
  v20 = *(double *)(a3 + 152);
  if (!a5)
    return result;
LABEL_7:
  v32 = *(double *)&v19 - v20;
  v29 = *(double *)(a3 + 160) * (*(double *)&v15 - v17)
      + *(double *)(a3 + 168) * (*(double *)&v16 - v18)
      + *(double *)(a3 + 176) * v32;
  v31 = *(double *)(a3 + 320);
  v30 = v29 * v31;
  LODWORD(v31) = *(_DWORD *)(result + 204);
  *(float *)&v32 = *(float *)(result + 212) - *(float *)&v31;
  *(double *)&v33 = *(float *)(result + 200);
  v34 = a5 - 1;
  v35 = 1.0 / (float)(a5 - 1);
  v36 = *(float *)(result + 208) - *(double *)&v33;
  v37 = 0.0;
  if (a5 > 5)
  {
    v38 = 0;
    v39 = !is_mul_ok(v34, 0x18uLL);
    v40 = 3 * v34;
    if (&a4[v40 + 2] >= a4 + 2 && &a4[v40 + 1] >= a4 + 1 && &a4[v40] >= a4 && !v39)
    {
      v38 = a5 & 0xFFFFFFFFFFFFFFFELL;
      v41 = vmul_n_f32((float32x2_t)0x3F80000000000000, v35);
      *(float *)v5.i32 = v35 + v35;
      v69 = (float32x2_t)vdup_lane_s32(v5, 0);
      v68 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v36, 0);
      v66 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v31, 0);
      v67 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v32, 0);
      v42 = (float64x2_t)vdupq_lane_s64(v33, 0);
      v43 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v7, 0);
      v44 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v30, 0);
      v45 = (float64x2_t)vdupq_lane_s64(v15, 0);
      v46 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v8, 0);
      v47 = (float64x2_t)vdupq_lane_s64(v16, 0);
      v48 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v6, 0);
      v49 = (int64x2_t)xmmword_19FFB2E40;
      v50 = a4;
      v51 = a5 & 0xFFFFFFFFFFFFFFFELL;
      v52 = (float64x2_t)vdupq_lane_s64(v19, 0);
      do
      {
        __asm
        {
          FMOV            V23.2S, #0.25
          FMOV            V25.2S, #0.75
        }
        v59 = vmla_f32(v66, (float32x2_t)vbsl_s8((int8x8_t)vmovn_s64(vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)v49, (int8x16_t)vdupq_n_s64(1uLL)))), _D25, _D23), v67);
        v60 = vmlaq_f64(v42, vcvtq_f64_f32(v41), v68);
        v61 = vcvtq_f64_f32(v59);
        v70.val[0] = vmlaq_f64(v45, v44, vmlaq_f64(vmulq_n_f64(v60, v12), v61, v43));
        v70.val[1] = vmlaq_f64(v47, v44, vmlaq_f64(vmulq_n_f64(v60, v13), v61, v46));
        v70.val[2] = vmlaq_f64(v52, v44, vmlaq_f64(vmulq_n_f64(v60, v14), v61, v48));
        vst3q_f64(v50, v70);
        v50 += 6;
        v49 = vaddq_s64(v49, vdupq_n_s64(2uLL));
        v41 = vadd_f32(v41, v69);
        v51 -= 2;
      }
      while (v51);
      if (v38 == a5)
        return result;
      v37 = v35 * (float)(uint64_t)(a5 & 0xFFFFFFFFFFFFFFFELL);
    }
  }
  else
  {
    v38 = 0;
  }
  v62 = &a4[3 * v38 + 2];
  do
  {
    if ((v38 & 1) != 0)
      v63 = 0.25;
    else
      v63 = 0.75;
    v64 = (float)(*(float *)&v31 + (float)(*(float *)&v32 * v63));
    v65 = *(double *)&v33 + v36 * v37;
    *(v62 - 2) = *(double *)&v15 + (v65 * v12 + v7 * v64) * v30;
    *(v62 - 1) = *(double *)&v16 + (v65 * v13 + v8 * v64) * v30;
    *v62 = *(double *)&v19 + (v65 * v14 + v6 * v64) * v30;
    v62 += 3;
    v37 = v37 + v35;
    ++v38;
  }
  while (a5 != v38);
  return result;
}

void md::OcclusionTest::populatePointProbe(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, const double *a5, unint64_t a6)
{
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  uint64_t v22;
  float *v23;
  float64x2_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  double *v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  const double *v40;
  float *v41;
  unint64_t v42;
  const double *v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float64x2x3_t v47;
  float64x2x3_t v48;

  v10 = 24 * *(unsigned int *)(a1 + 8 * a4);
  md::OcclusionQueryResource::initialize((md::OcclusionQueryResource *)(a2[12] + v10));
  v11 = (uint64_t *)(a2[12] + v10);
  v12 = *v11;
  *(_QWORD *)(v12 + 24) = a2[10];
  *(_QWORD *)(v12 + 32) = a2[11];
  v14 = v11[2];
  v13 = v11 + 2;
  v15 = **(_QWORD **)(v14 + 64);
  v16 = *(_QWORD *)(v15 + 8) * a6;
  v17 = *(_QWORD *)(v15 + 72);
  v18 = *(_QWORD *)(v15 + 80) - v17;
  if (v16 != v18)
  {
    if (v16 <= v18)
    {
      if (v16 < v18)
        *(_QWORD *)(v15 + 80) = v17 + v16;
    }
    else
    {
      std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v15 + 72, v16 - v18);
    }
    v19 = *(std::__shared_weak_count **)(v15 + 32);
    *(_QWORD *)(v15 + 24) = 0;
    *(_QWORD *)(v15 + 32) = 0;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldaxr(p_shared_owners);
      while (__stlxr(v21 - 1, p_shared_owners));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    *(_QWORD *)(v15 + 120) = 0;
    *(_DWORD *)(v15 + 112) = 0;
    v22 = *(_QWORD *)(v15 + 80) - *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v15 + 40) = 0;
    *(_QWORD *)(v15 + 48) = v22;
    *(_QWORD *)(v15 + 56) = 0;
    *(_QWORD *)(v15 + 64) = v22;
    v15 = **(_QWORD **)(*v13 + 64);
    v16 = *(_QWORD *)(v15 + 8) * a6;
  }
  if (v16)
  {
    v23 = *(float **)(v15 + 72);
    if (!a6)
      goto LABEL_20;
  }
  else
  {
    v23 = 0;
    if (!a6)
      goto LABEL_20;
  }
  v24 = *(float64x2_t *)(a3 + 136);
  v25 = *(uint64_t *)(a3 + 152);
  if (a6 <= 0xF)
  {
    v26 = 0;
LABEL_18:
    v27 = a6 - v26;
    v28 = (double *)&a5[3 * v26 + 2];
    v29 = (uint64_t)&v23[4 * v26 + 2];
    do
    {
      v30 = *v28 - *(double *)&v25;
      *(float32x2_t *)(v29 - 8) = vcvt_f32_f64(vsubq_f64(*(float64x2_t *)(v28 - 2), v24));
      *(float *)v29 = v30;
      *(_DWORD *)(v29 + 4) = 1065353216;
      v28 += 3;
      v29 += 16;
      --v27;
    }
    while (v27);
    goto LABEL_20;
  }
  v26 = 0;
  v31 = 4 * (a6 - 1);
  if (&v23[v31] < v23)
    goto LABEL_18;
  if (&v23[v31 + 1] < v23 + 1)
    goto LABEL_18;
  if (&v23[v31 + 2] < v23 + 2)
    goto LABEL_18;
  if (&v23[v31 + 3] < v23 + 3)
    goto LABEL_18;
  if ((a6 - 1) >> 60)
    goto LABEL_18;
  v26 = a6 & 0xFFFFFFFFFFFFFFFCLL;
  v32 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v24.f64[0], 0);
  v33 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v24, 1);
  v34 = (float64x2_t)vdupq_lane_s64(v25, 0);
  __asm { FMOV            V19.4S, #1.0 }
  v40 = a5;
  v41 = v23;
  v42 = a6 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v43 = v40;
    v47 = vld3q_f64(v43);
    v43 += 6;
    v48 = vld3q_f64(v43);
    v44 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vsubq_f64(v47.val[0], v32)), vsubq_f64(v48.val[0], v32));
    v45 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vsubq_f64(v47.val[1], v33)), vsubq_f64(v48.val[1], v33));
    v46 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vsubq_f64(v47.val[2], v34)), vsubq_f64(v48.val[2], v34));
    vst4q_f32(v41, *(float32x4x4_t *)(&_Q19 - 3));
    v41 += 16;
    v40 += 12;
    v42 -= 4;
  }
  while (v42);
  if (v26 != a6)
    goto LABEL_18;
LABEL_20:
  if (v23 && v16)
  {
    if (*(_QWORD *)(v15 + 64) > v16)
      v16 = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v15 + 56) = 0;
    *(_QWORD *)(v15 + 64) = v16;
  }
}

void md::OcclusionTest::checkinResources(md::OcclusionTest *this, md::OcclusionContext *a2, uint64_t a3)
{
  md::OcclusionTest *v5;
  _DWORD *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unsigned int *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  __int128 *v30;
  uint64_t v31;
  __int128 v32;
  unsigned int v33;
  uint64_t v34;

  if (this != a2)
  {
    v5 = this;
    while (1)
    {
      v7 = *(_DWORD *)v5;
      if (*(_DWORD *)v5 == -1)
        goto LABEL_5;
      *(_DWORD *)v5 = -1;
      v8 = *(_QWORD *)(a3 + 96);
      if (*(_QWORD *)(v8 + 24 * v7 + 16))
      {
        v9 = *(_QWORD *)(v8 + 24 * v7);
        *(_BYTE *)(v9 + 136) = 1;
        v10 = *(_QWORD *)(v9 + 120);
        if (v10)
        {
          v11 = *(std::__shared_weak_count **)(v10 + 24);
          *(_QWORD *)(v10 + 16) = 0;
          *(_QWORD *)(v10 + 24) = 0;
          if (v11)
          {
            p_shared_owners = (unint64_t *)&v11->__shared_owners_;
            do
              v13 = __ldaxr(p_shared_owners);
            while (__stlxr(v13 - 1, p_shared_owners));
            if (!v13)
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v11);
            }
          }
          *(_QWORD *)(v9 + 120) = 0;
        }
      }
      v14 = *(unsigned int **)(a3 + 136);
      v15 = *(_QWORD *)(a3 + 144);
      if ((unint64_t)v14 >= v15)
        break;
      if (v14)
        *v14 = v7;
      v6 = v14 + 1;
LABEL_4:
      *(_QWORD *)(a3 + 136) = v6;
LABEL_5:
      v5 = (md::OcclusionTest *)((char *)v5 + 8);
      if (v5 == a2)
        return;
    }
    v16 = *(_QWORD *)(a3 + 128);
    v17 = ((uint64_t)v14 - v16) >> 2;
    v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 62)
      abort();
    v19 = v15 - v16;
    if (v19 >> 1 > v18)
      v18 = v19 >> 1;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
      v18 = 0x3FFFFFFFFFFFFFFFLL;
    if (v18)
    {
      v20 = 4 * v18;
      v21 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(a3 + 152) + 16))(*(_QWORD *)(a3 + 152), 4 * v18, 4);
      v22 = (unsigned int *)(v21 + 4 * v17);
      v18 = v21 + v20;
      if (v21)
        *v22 = v7;
    }
    else
    {
      v22 = (unsigned int *)(4 * v17);
    }
    v23 = *(_QWORD *)(a3 + 128);
    v24 = *(_QWORD *)(a3 + 136);
    v25 = v22;
    if (v24 != v23)
    {
      v26 = v24 - v23 - 4;
      if (v26 < 0x1C)
      {
        v25 = v22;
      }
      else
      {
        v25 = v22;
        if ((unint64_t)(v24 - (_QWORD)v22) >= 0x20)
        {
          v27 = (v26 >> 2) + 1;
          v28 = v24 - 4 * (v27 & 0x7FFFFFFFFFFFFFF8);
          v29 = v22 - 4;
          v30 = (__int128 *)(v24 - 16);
          v31 = v27 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v32 = *v30;
            *((_OWORD *)v29 - 1) = *(v30 - 1);
            *(_OWORD *)v29 = v32;
            v29 -= 8;
            v30 -= 2;
            v31 -= 8;
          }
          while (v31);
          v25 = &v22[-(v27 & 0x7FFFFFFFFFFFFFF8)];
          v24 = v28;
          if (v27 == (v27 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_36;
        }
      }
      do
      {
        v33 = *(_DWORD *)(v24 - 4);
        v24 -= 4;
        *--v25 = v33;
      }
      while (v24 != v23);
    }
LABEL_36:
    v6 = v22 + 1;
    *(_QWORD *)(a3 + 128) = v25;
    *(_QWORD *)(a3 + 136) = v22 + 1;
    v34 = *(_QWORD *)(a3 + 144);
    *(_QWORD *)(a3 + 144) = v18;
    if (v23)
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a3 + 152) + 40))(*(_QWORD *)(a3 + 152), v23, v34 - v23);
    goto LABEL_4;
  }
}

void md::OcclusionTest::setupAntennaeTest(uint64_t a1, _QWORD *a2, char a3)
{
  _QWORD *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  __int128 *v13;
  __int128 *v14;
  _QWORD *v15;
  __int128 v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t *v20;
  char *v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 *v26;
  _OWORD *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  *(_BYTE *)a1 = 1;
  v6 = *(_QWORD **)(a1 + 80);
  v7 = *(_QWORD **)(a1 + 88);
  if (0xAAAAAAAAAAAAAAABLL * (v7 - v6) > 1)
  {
LABEL_2:
    *(_QWORD *)(a1 + 88) = v6 + 3;
    goto LABEL_4;
  }
  if (v7 == v6)
  {
    v6 = *(_QWORD **)(a1 + 88);
    if (!*(_QWORD *)(a1 + 104))
    {
      v11 = *(_QWORD **)(a1 + 96);
      v12 = malloc_type_malloc(0x30uLL, 0x1000040504FFAC1uLL);
      v6 = v12;
      v13 = *(__int128 **)(a1 + 80);
      v14 = *(__int128 **)(a1 + 88);
      if (v13 != v14)
      {
        v15 = v12;
        do
        {
          v16 = *v13;
          v15[2] = *((_QWORD *)v13 + 2);
          *(_OWORD *)v15 = v16;
          v15 += 3;
          v13 = (__int128 *)((char *)v13 + 24);
        }
        while (v13 != v14);
      }
      if (v7 != v11)
        free(*(void **)(a1 + 80));
      *(_QWORD *)(a1 + 80) = v6;
      *(_QWORD *)(a1 + 104) = 2;
    }
    goto LABEL_2;
  }
LABEL_4:
  *v6 = *a2;
  v6[1] = a2[1];
  v6[2] = a2[2];
  v8 = *(char **)(a1 + 8);
  v9 = *(char **)(a1 + 16);
  v10 = v9 - v8;
  if ((unint64_t)(v9 - v8) < 9)
  {
    if (v9 != v8)
      goto LABEL_8;
    v17 = *(char **)(a1 + 16);
    if (*(_QWORD *)(a1 + 32))
      goto LABEL_29;
    v18 = *(char **)(a1 + 24);
    v19 = (char *)malloc_type_malloc(0x10uLL, 0x100004090D0E795uLL);
    v17 = v19;
    v20 = *(uint64_t **)(a1 + 8);
    v21 = *(char **)(a1 + 16);
    if (v20 != (uint64_t *)v21)
    {
      v22 = v21 - (char *)v20 - 8;
      if (v22 < 0x18)
      {
        v23 = v19;
      }
      else
      {
        v23 = v19;
        if ((unint64_t)(v19 - (char *)v20) >= 0x20)
        {
          v24 = (v22 >> 3) + 1;
          v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
          v23 = &v19[v25];
          v26 = (__int128 *)(v20 + 2);
          v27 = v19 + 16;
          v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v29 = *v26;
            v26 += 2;
            *v27 = v29;
            v27 += 2;
            v28 -= 4;
          }
          while (v28);
          if (v24 == (v24 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_26;
          v20 = (uint64_t *)((char *)v20 + v25);
        }
      }
      do
      {
        v30 = *v20++;
        *(_QWORD *)v23 = v30;
        v23 += 8;
      }
      while (v20 != (uint64_t *)v21);
    }
LABEL_26:
    v31 = v10 >> 3;
    if (v9 != v18)
      free(*(void **)(a1 + 8));
    *(_QWORD *)(a1 + 8) = v17;
    v9 = &v17[8 * v31];
    *(_QWORD *)(a1 + 32) = 2;
LABEL_29:
    if (v9 != v17 + 8)
    {
      memset_pattern16(v9, &unk_19FFB6350, ((v17 - v9) & 0xFFFFFFFFFFFFFFF8) + 8);
      v9 = v17 + 8;
    }
    goto LABEL_6;
  }
  v9 = v8 + 8;
LABEL_6:
  *(_QWORD *)(a1 + 16) = v9;
LABEL_8:
  *(_DWORD *)(a1 + 232) = 1065353216;
  *(_BYTE *)(a1 + 236) = a3;
}

void md::DaVinciTrafficTileData::~DaVinciTrafficTileData(md::DaVinciTrafficTileData *this)
{
  md::DaVinciTrafficTileData::~DaVinciTrafficTileData(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;

  *(_QWORD *)this = &off_1E429CBB8;
  *((_QWORD *)this + 79) = &unk_1E429CBF8;
  v2 = *((_QWORD *)this + 100);
  if (v2)
  {
    v3 = *((_QWORD *)this + 101);
    v4 = (void *)*((_QWORD *)this + 100);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 100);
    }
    *((_QWORD *)this + 101) = v2;
    operator delete(v4);
  }
  v8 = *((_QWORD *)this + 96);
  if (v8)
  {
    *((_QWORD *)this + 97) = v8;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 99) + 40))(*((_QWORD *)this + 99), v8, *((_QWORD *)this + 98) - v8);
  }
  v9 = *((_QWORD *)this + 95);
  *((_QWORD *)this + 95) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *((_QWORD *)this + 94);
  *((_QWORD *)this + 94) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 93);
  if (!v11)
    goto LABEL_22;
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    v14 = (std::__shared_weak_count *)*((_QWORD *)this + 91);
    if (!v14)
      goto LABEL_28;
  }
  else
  {
LABEL_22:
    v14 = (std::__shared_weak_count *)*((_QWORD *)this + 91);
    if (!v14)
      goto LABEL_28;
  }
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_28:
  md::MapTileData::~MapTileData(this);
}

void md::StandardLabeler::~StandardLabeler(md::StandardLabeler *this)
{
  md::StandardLabeler::~StandardLabeler(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  md::LabelPool **v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  md::LabelPool *v45;
  md::ScreenLabelFeatureSupport *v46;
  md::LabelCustomFeatureSupport *v47;

  *(_QWORD *)this = &off_1E4290CC0;
  *((_QWORD *)this + 1) = &unk_1E4290EA0;
  v2 = (char *)this + 8;
  *((_QWORD *)this + 2) = &unk_1E4290EE8;
  v3 = *((_QWORD *)this + 3);
  *(_QWORD *)(*(_QWORD *)(v3 + 168) + 64) = *(_QWORD *)(*(_QWORD *)(v3 + 168) + 104);
  v4 = *(_QWORD *)(v3 + 168);
  v5 = *(_QWORD **)(v4 + 8);
  v6 = *(_QWORD **)v4;
  if (*(_QWORD **)v4 != v5)
  {
    while ((char *)*v6 != v2)
    {
      if (++v6 == v5)
      {
        v6 = *(_QWORD **)(v4 + 8);
        break;
      }
    }
  }
  v7 = v6 + 1;
  if (v6 == v5 || v7 == v5)
  {
    if (v6 == v5)
      goto LABEL_17;
    goto LABEL_16;
  }
  do
  {
    if ((char *)*v7 != v2)
      *v6++ = *v7;
    ++v7;
  }
  while (v7 != v5);
  if (v6 != *(_QWORD **)(v4 + 8))
LABEL_16:
    *(_QWORD *)(v4 + 8) = v6;
LABEL_17:
  v9 = (md::LabelPool **)((char *)this + 48);
  md::LabelPool::clear(*((int64x2_t **)this + 6));
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 40);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)this + 38);
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  *((_QWORD *)this + 34) = &off_1E42B5570;

  v16 = (std::__shared_weak_count *)*((_QWORD *)this + 33);
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = (std::__shared_weak_count *)*((_QWORD *)this + 31);
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = (std::__shared_weak_count *)*((_QWORD *)this + 26);
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = (std::__shared_weak_count *)*((_QWORD *)this + 24);
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  *((_QWORD *)this + 20) = &off_1E42B5390;

  v28 = (_QWORD *)*((_QWORD *)this + 17);
  if (v28)
  {
    v29 = (_QWORD *)*((_QWORD *)this + 18);
    v30 = (void *)*((_QWORD *)this + 17);
    if (v29 != v28)
    {
      do
      {
        v32 = *--v29;
        v31 = v32;
        *v29 = 0;
        if (v32)
          (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
      }
      while (v29 != v28);
      v30 = (void *)*((_QWORD *)this + 17);
    }
    *((_QWORD *)this + 18) = v28;
    operator delete(v30);
  }
  v33 = *((_QWORD *)this + 13);
  if (v33)
  {
    v34 = *((_QWORD *)this + 14);
    v35 = *((_QWORD *)this + 13);
    if (v34 != v33)
    {
      do
      {
        v36 = *(std::__shared_weak_count **)(v34 - 8);
        if (v36)
        {
          v37 = (unint64_t *)&v36->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v36->__on_zero_shared)(v36, v35);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
        v34 -= 16;
      }
      while (v34 != v33);
      v35 = *((_QWORD *)this + 13);
    }
    *((_QWORD *)this + 14) = v33;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 16) + 40))(*((_QWORD *)this + 16), v35, *((_QWORD *)this + 15) - v35);
  }
  v39 = *((_QWORD *)this + 9);
  if (v39)
  {
    v40 = *((_QWORD *)this + 10);
    v41 = *((_QWORD *)this + 9);
    if (v40 != v39)
    {
      do
      {
        v42 = *(std::__shared_weak_count **)(v40 - 8);
        if (v42)
        {
          v43 = (unint64_t *)&v42->__shared_owners_;
          do
            v44 = __ldaxr(v43);
          while (__stlxr(v44 - 1, v43));
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v42->__on_zero_shared)(v42, v41);
            std::__shared_weak_count::__release_weak(v42);
          }
        }
        v40 -= 16;
      }
      while (v40 != v39);
      v41 = *((_QWORD *)this + 9);
    }
    *((_QWORD *)this + 10) = v39;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 12) + 40))(*((_QWORD *)this + 12), v41, *((_QWORD *)this + 11) - v41);
  }
  v45 = *v9;
  *v9 = 0;
  if (v45)
  {
    md::LabelPool::~LabelPool(v45);
    MEMORY[0x1A1AF4E00]();
  }
  v46 = (md::ScreenLabelFeatureSupport *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v46)
  {
    md::ScreenLabelFeatureSupport::~ScreenLabelFeatureSupport(v46);
    MEMORY[0x1A1AF4E00]();
  }
  v47 = (md::LabelCustomFeatureSupport *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v47)
  {
    md::LabelCustomFeatureSupport::~LabelCustomFeatureSupport(v47);
    MEMORY[0x1A1AF4E00]();
  }
}

uint64_t md::StandardLabeler::render(uint64_t this, const md::LayoutContext *a2, md::LabelRenderModel *a3, __n128 a4)
{
  uint64_t v5;
  BOOL v6;
  uint64_t *v7;
  uint64_t *v8;
  float *v9;
  float v10;
  float v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;

  v5 = this;
  if (*(_BYTE *)(this + 370))
    v6 = 0;
  else
    v6 = *(_BYTE *)(this + 371) == 0;
  v7 = *(uint64_t **)(this + 104);
  v8 = *(uint64_t **)(this + 112);
  if (v7 != v8)
  {
    while (1)
    {
      if (*(_BYTE *)(*v7 + 1072))
      {
        v9 = *(float **)(v5 + 24);
        this = *(_QWORD *)(*v7 + 272);
        if (this)
        {
          this = (*(uint64_t (**)(uint64_t, const md::LayoutContext *))(*(_QWORD *)this + 256))(this, a2);
        }
        else
        {
          v11 = -3.4028e38;
          a4.n128_u32[0] = 2139095039;
          v10 = 3.4028e38;
          v12 = -3.4028e38;
        }
        if (v9[384] > a4.n128_f32[0] && v9[382] < v11 && v9[385] > v10 && v9[383] < v12)
        {
          v13 = *v7;
          v14 = *(_QWORD *)(*v7 + 296);
          if ((v14 || (v14 = *(_QWORD *)(v13 + 272)) != 0) && *(float *)(v13 + 440) >= 0.0)
          {
            v15 = *(_QWORD *)(v13 + 304);
            if (v15)
              (*(void (**)(uint64_t, md::LabelRenderModel *, float))(*(_QWORD *)v15 + 128))(v15, a3, 1.0);
            v16 = *(float *)(v13 + 1068) * *(float *)(v13 + 1124);
            if (v16 >= 0.0039062
              || *(_QWORD *)(v13 + 1184)
              || (this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 704))(v14), (_DWORD)this))
            {
              this = (*(uint64_t (**)(uint64_t, md::LabelRenderModel *, float))(*(_QWORD *)v14 + 128))(v14, a3, v16);
            }
          }
          if (v6)
          {
            v17 = *v7;
            if (!*(_BYTE *)(*v7 + 1251))
              goto LABEL_59;
            v18 = *(_QWORD *)(v17 + 272);
            if (v18 && (this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 608))(v18), (this & 1) != 0)
              || (this = *(_QWORD *)(v17 + 296)) != 0
              && (this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 688))(this), (this & 1) != 0)
              || *(_QWORD *)(v17 + 304))
            {
LABEL_60:
              v6 = 0;
              *(_BYTE *)(v5 + 371) = 1;
              goto LABEL_62;
            }
            v19 = *(unsigned __int8 *)(v17 + 1072);
            if (v19 == 1)
            {
              if (*(float *)(v17 + 1120) < 1.0)
                goto LABEL_60;
            }
            else if (v19 != 3)
            {
              if (v19 == 2 && *(float *)(v17 + 1120) > 0.0)
                goto LABEL_60;
LABEL_57:
              if (*(_QWORD *)(v17 + 1184))
                goto LABEL_60;
              v17 = *v7;
LABEL_59:
              this = md::Label::isAnimating((md::Label *)v17);
              if ((_DWORD)this)
                goto LABEL_60;
              v6 = 1;
LABEL_62:
              ++*(_DWORD *)(v5 + 364);
              goto LABEL_9;
            }
            if (*(float *)(v17 + 1152) < 1.0)
              goto LABEL_60;
            goto LABEL_57;
          }
          v6 = 0;
          goto LABEL_62;
        }
      }
      v20 = *v7;
      if (*(_BYTE *)(*v7 + 1251))
        break;
LABEL_9:
      v7 += 2;
      if (v7 == v8)
        return this;
    }
    v21 = *(_QWORD *)(v20 + 272);
    if (v21
      && ((*(uint64_t (**)(uint64_t, const md::LayoutContext *))(*(_QWORD *)v21 + 608))(v21, a2) & 1) != 0
      || (this = *(_QWORD *)(v20 + 296)) != 0
      && (this = (*(uint64_t (**)(uint64_t, const md::LayoutContext *))(*(_QWORD *)this + 688))(this, a2),
          (this & 1) != 0)
      || *(_QWORD *)(v20 + 304))
    {
LABEL_7:
      this = *v7;
      if (!*(_BYTE *)(*v7 + 1084))
      {
        a4.n128_u32[0] = 1148846080;
        this = md::Label::animate((md::Label *)this, a4);
      }
      goto LABEL_9;
    }
    v22 = *(unsigned __int8 *)(v20 + 1072);
    if (v22 == 1)
    {
      if (*(float *)(v20 + 1120) < 1.0)
        goto LABEL_7;
    }
    else if (v22 != 3)
    {
      if (v22 == 2 && *(float *)(v20 + 1120) > 0.0)
        goto LABEL_7;
      goto LABEL_52;
    }
    if (*(float *)(v20 + 1152) < 1.0)
      goto LABEL_7;
LABEL_52:
    if (*(_QWORD *)(v20 + 1184))
      goto LABEL_7;
    goto LABEL_9;
  }
  return this;
}

BOOL md::StandardLabeler::needsForceLayoutAllLabels(md::StandardLabeler *this)
{
  int v1;

  v1 = *((unsigned __int8 *)this + 372);
  if (*((_BYTE *)this + 372))
    *((_BYTE *)this + 372) = 0;
  return v1 != 0;
}

uint64_t md::StandardLabeler::resetOcclusionQueries(uint64_t this)
{
  _QWORD *v1;
  _QWORD *i;
  _BYTE *v3;

  v1 = *(_QWORD **)(this + 72);
  for (i = *(_QWORD **)(this + 80); v1 != i; v1 += 2)
  {
    v3 = (_BYTE *)*v1;
    v3[480] = 1;
    if (v3[820] != 2)
      v3[485] = 0;
  }
  return this;
}

_QWORD *md::StandardLabeler::stylesheetAnimationDidFinish(_QWORD *this)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = (uint64_t *)this[9];
  v2 = (uint64_t *)this[10];
  while (v1 != v2)
  {
    v3 = *v1;
    v4 = *(_QWORD *)(*v1 + 296);
    if (v4 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 680))(v4))
    {
      if (*(_BYTE *)(v3 + 1082))
      {
        *(_BYTE *)(v3 + 1082) = 0;
        atomic_store(0, (unsigned __int8 *)(v3 + 1243));
      }
      if (*(_BYTE *)(v3 + 1081))
      {
        *(_BYTE *)(v3 + 1081) = 0;
        atomic_store(0, (unsigned __int8 *)(v3 + 1244));
        *(_DWORD *)(v3 + 1120) = 0;
        *(float *)(v3 + 1124) = (*(float (**)(float))(v3 + 1144))(0.0);
        md::Label::updateStateMachineForDisplay(v3, 8, *(_BYTE *)(v3 + 1073), 0);
      }
      v5 = *(_QWORD *)(v3 + 296);
      *(_QWORD *)(v3 + 296) = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      v6 = *(_QWORD *)(v3 + 280);
      *(_QWORD *)(v3 + 280) = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    }
    this = *(_QWORD **)(v3 + 272);
    if (this)
      this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 552))(this);
    v1 += 2;
  }
  return this;
}

void md::StandardLabeler::resourcesAtMercatorPoint(uint64_t a1@<X0>, double *a2@<X1>, _QWORD *a3@<X8>)
{
  md::LabelPool::resourcesAtMercatorPoint(a3, *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16), *(_QWORD *)(*(_QWORD *)(a1 + 48) + 24), a2);
}

uint64_t md::StandardLabeler::isPointInActiveRegion(uint64_t a1, double *a2)
{
  uint64_t v2;
  double v3;
  double v4;
  double **v5;
  double **v6;
  double *v7;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *a2;
  if (*a2 >= *(double *)(v2 + 48) && v3 < *(double *)(v2 + 64))
  {
    v4 = a2[1];
    if (v4 >= *(double *)(v2 + 56) && v4 < *(double *)(v2 + 72))
    {
      v5 = *(double ***)(v2 + 16);
      v6 = *(double ***)(v2 + 24);
      while (v5 != v6)
      {
        v7 = *v5;
        if (v3 >= (*v5)[5] && v3 < v7[7] && v4 >= v7[6] && v4 < v7[8])
          return 1;
        v5 += 2;
      }
    }
  }
  return 0;
}

uint64_t md::StandardLabeler::isRectInActiveRegion(uint64_t a1, double *a2)
{
  uint64_t v2;
  double v3;
  double v4;
  double v5;
  double **v6;
  double **v7;
  double *v8;

  v2 = *(_QWORD *)(a1 + 48);
  if (*(double *)(v2 + 64) > *a2)
  {
    v3 = a2[2];
    if (*(double *)(v2 + 48) < v3)
    {
      v4 = a2[1];
      if (*(double *)(v2 + 72) > v4)
      {
        v5 = a2[3];
        if (*(double *)(v2 + 56) < v5)
        {
          v6 = *(double ***)(v2 + 16);
          v7 = *(double ***)(v2 + 24);
          while (v6 != v7)
          {
            v8 = *v6;
            if ((*v6)[7] > *a2 && v8[5] < v3 && v8[8] > v4 && v8[6] < v5)
              return 1;
            v6 += 2;
          }
        }
      }
    }
  }
  return 0;
}

void md::StandardLabeler::setLabelExclusionRegions(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  void *v6;
  id v7;

  v3 = a2;
  *(_BYTE *)(a1 + 368) = 1;
  v4 = v3;
  v7 = v4;
  if (v4)
  {
    v5 = v4;
    v4 = v7;
  }
  v6 = *(void **)(a1 + 168);
  *(_QWORD *)(a1 + 168) = v4;

}

void md::StandardLabeler::setScreenLabelFeatures(uint64_t a1, void *a2)
{
  md::ScreenLabelFeatureSupport::setScreenLabelFeatures(*(_QWORD *)(a1 + 40), a2);
}

uint64_t md::StandardLabeler::screenSizeDidChange(uint64_t this)
{
  *(_BYTE *)(this + 368) = 1;
  return this;
}

uint64_t `non-virtual thunk to'md::StandardLabeler::isPointInActiveRegion(uint64_t a1, double *a2)
{
  uint64_t v2;
  double v3;
  double v4;
  double **v5;
  double **v6;
  double *v7;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *a2;
  if (*a2 >= *(double *)(v2 + 48) && v3 < *(double *)(v2 + 64))
  {
    v4 = a2[1];
    if (v4 >= *(double *)(v2 + 56) && v4 < *(double *)(v2 + 72))
    {
      v5 = *(double ***)(v2 + 16);
      v6 = *(double ***)(v2 + 24);
      while (v5 != v6)
      {
        v7 = *v5;
        if (v3 >= (*v5)[5] && v3 < v7[7] && v4 >= v7[6] && v4 < v7[8])
          return 1;
        v5 += 2;
      }
    }
  }
  return 0;
}

uint64_t `non-virtual thunk to'md::StandardLabeler::isRectInActiveRegion(uint64_t a1, double *a2)
{
  uint64_t v2;
  double v3;
  double v4;
  double v5;
  double **v6;
  double **v7;
  double *v8;

  v2 = *(_QWORD *)(a1 + 32);
  if (*(double *)(v2 + 64) > *a2)
  {
    v3 = a2[2];
    if (*(double *)(v2 + 48) < v3)
    {
      v4 = a2[1];
      if (*(double *)(v2 + 72) > v4)
      {
        v5 = a2[3];
        if (*(double *)(v2 + 56) < v5)
        {
          v6 = *(double ***)(v2 + 16);
          v7 = *(double ***)(v2 + 24);
          while (v6 != v7)
          {
            v8 = *v6;
            if ((*v6)[7] > *a2 && v8[5] < v3 && v8[8] > v4 && v8[6] < v5)
              return 1;
            v6 += 2;
          }
        }
      }
    }
  }
  return 0;
}

void std::__function::__func<md::StandardLabeler::collideLabels(void)::$_1,std::allocator<md::StandardLabeler::collideLabels(void)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::StandardLabeler::collideLabels(void)::$_1,std::allocator<md::StandardLabeler::collideLabels(void)::$_1>,void ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42CCC38;
  return result;
}

void std::__function::__func<md::StandardLabeler::collideLabels(void)::$_0,std::allocator<md::StandardLabeler::collideLabels(void)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::StandardLabeler::collideLabels(void)::$_0,std::allocator<md::StandardLabeler::collideLabels(void)::$_0>,void ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42CCBF0;
  return result;
}

void std::__function::__func<md::StandardLabeler::collideLabels(void)::$_0,std::allocator<md::StandardLabeler::collideLabels(void)::$_0>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42CCBF0;
}

void md::GenericLabelCollidableItem::~GenericLabelCollidableItem(void **this)
{
  *this = &off_1E42A3250;
  free(this[27]);
  free(this[28]);
  free(this[30]);
}

{
  *this = &off_1E42A3250;
  free(this[27]);
  free(this[28]);
  free(this[30]);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::GenericLabelCollidableItem::collidesWithObject(md::GenericLabelCollidableItem *this, const md::CollisionObject *a2)
{
  const md::CollisionObject *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  BOOL v7;
  float32x2_t *v8;
  float v9;
  uint64_t v10;
  float32x2_t *v11;
  float v12;
  float32x2_t v13;
  md::CollisionObject *v14;

  if (!*((_QWORD *)this + 27) && !*((_QWORD *)this + 28) || (*((_BYTE *)a2 + 200) & *((_BYTE *)this + 256)) != 0)
    return 0;
  v3 = (md::GenericLabelCollidableItem *)((char *)this + 56);
  v4 = *((_QWORD *)a2 + 21);
  if (!*((_QWORD *)this + 28))
  {
    if (!v4)
    {
      if (*((_BYTE *)this + 252) || *((_BYTE *)a2 + 196))
        return md::CollisionObject::rectsCollideWithRectsOBB((md::GenericLabelCollidableItem *)((char *)this + 56), a2);
      else
        return md::CollisionObject::rectsCollideWithRects((md::GenericLabelCollidableItem *)((char *)this + 56), a2);
    }
    v14 = a2;
    a2 = v3;
    return md::CollisionObject::circlesCollideWithRects(v14, a2);
  }
  if (!v4)
  {
    v14 = (md::GenericLabelCollidableItem *)((char *)this + 56);
    return md::CollisionObject::circlesCollideWithRects(v14, a2);
  }
  v5 = *((unsigned int *)a2 + 44);
  if (!(_DWORD)v5)
    return 0;
  v6 = 0;
  v7 = 1;
  while (1)
  {
    v8 = (float32x2_t *)(*((_QWORD *)a2 + 23) + 24 * v6);
    v9 = v8[*((unsigned __int8 *)this + 255) + 1].f32[0];
    if (v9 > 0.0)
    {
      v10 = *((unsigned int *)this + 58);
      if ((_DWORD)v10)
        break;
    }
LABEL_9:
    v7 = ++v6 < v5;
    if (v6 == v5)
      return 0;
  }
  v11 = (float32x2_t *)*((_QWORD *)this + 30);
  while (1)
  {
    v12 = v11[*((unsigned __int8 *)a2 + 199) + 1].f32[0];
    if (v12 > 0.0)
    {
      v13 = vsub_f32(*v11, *v8);
      if (vaddv_f32(vmul_f32(v13, v13)) < (float)((float)(v12 + v9) * (float)(v12 + v9)))
        return v7;
    }
    v11 += 3;
    if (!--v10)
      goto LABEL_9;
  }
}

void sub_19FA5F708(_Unwind_Exception *a1)
{
  uint64_t v1;
  md::LabelPool **v2;

  md::StandardLabeler::{unnamed type#1}::~StandardLabeler(v1 + 272);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 256);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 240);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 200);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 184);
  *(_QWORD *)(v1 + 160) = &off_1E42B5390;

  std::vector<std::unique_ptr<md::RenderLayer>>::~vector[abi:nn180100]((_QWORD *)(v1 + 136));
  std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::~vector[abi:nn180100]((uint64_t *)(v1 + 104));
  std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::~vector[abi:nn180100]((uint64_t *)(v1 + 72));
  std::unique_ptr<md::LabelPool>::~unique_ptr[abi:nn180100](v2);
  std::unique_ptr<md::ScreenLabelFeatureSupport>::~unique_ptr[abi:nn180100]((md::ScreenLabelFeatureSupport **)(v1 + 40));
  std::unique_ptr<md::LabelCustomFeatureSupport>::~unique_ptr[abi:nn180100]((md::LabelCustomFeatureSupport **)(v1 + 32));
  _Unwind_Resume(a1);
}

void md::LabelPool::~LabelPool(md::LabelPool *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  md::LabelPool *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  _QWORD *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  _QWORD *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 91);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 89);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 89);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  std::__tree<std::shared_ptr<md::MuninRoadLabel>,std::less<std::shared_ptr<md::MuninRoadLabel>>,geo::StdAllocator<std::shared_ptr<md::MuninRoadLabel>,mdm::Allocator>>::destroy((uint64_t)this + 672, *((_QWORD **)this + 85));
  v8 = (md::LabelPool *)*((_QWORD *)this + 83);
  if (v8 == (md::LabelPool *)((char *)this + 640))
  {
    v9 = 4;
    v8 = (md::LabelPool *)((char *)this + 640);
  }
  else
  {
    if (!v8)
      goto LABEL_16;
    v9 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v8 + 8 * v9))();
LABEL_16:
  v10 = *((_QWORD *)this + 72);
  if (v10)
  {
    v11 = *((_QWORD *)this + 73);
    v12 = *((_QWORD *)this + 72);
    if (v11 != v10)
    {
      do
      {
        v13 = *(std::__shared_weak_count **)(v11 - 8);
        if (v13)
        {
          v14 = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 - 1, v14));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v13->__on_zero_shared)(v13, v12);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        v11 -= 16;
      }
      while (v11 != v10);
      v12 = *((_QWORD *)this + 72);
    }
    *((_QWORD *)this + 73) = v10;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 75) + 40))(*((_QWORD *)this + 75), v12, *((_QWORD *)this + 74) - v12);
  }
  std::__tree<std::__value_type<std::pair<unsigned long long,md::LabelIdentifier>,std::shared_ptr<md::Label>>,std::__map_value_compare<std::pair<unsigned long long,md::LabelIdentifier>,std::__value_type<std::pair<unsigned long long,md::LabelIdentifier>,std::shared_ptr<md::Label>>,std::less<std::pair<unsigned long long,md::LabelIdentifier>>,true>,geo::StdAllocator<std::__value_type<std::pair<unsigned long long,md::LabelIdentifier>,std::shared_ptr<md::Label>>,mdm::Allocator>>::destroy((uint64_t)this + 544, *((_QWORD **)this + 69));
  std::mutex::~mutex((std::mutex *)((char *)this + 480));
  v16 = (_QWORD *)*((_QWORD *)this + 56);
  while (v16)
  {
    v31 = v16;
    v16 = (_QWORD *)*v16;
    v32 = (std::__shared_weak_count *)v31[4];
    if (v32)
    {
      v33 = (unint64_t *)&v32->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    (*(void (**)(_QWORD, _QWORD *, uint64_t))(**((_QWORD **)this + 57) + 40))(*((_QWORD *)this + 57), v31, 40);
  }
  v17 = *((_QWORD *)this + 53);
  *((_QWORD *)this + 53) = 0;
  if (v17)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 55) + 40))(*((_QWORD *)this + 55), v17, 8 * *((_QWORD *)this + 54));
  v18 = (_QWORD *)*((_QWORD *)this + 49);
  while (v18)
  {
    v35 = v18;
    v18 = (_QWORD *)*v18;
    v36 = (std::__shared_weak_count *)v35[4];
    if (v36)
    {
      v37 = (unint64_t *)&v36->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    (*(void (**)(_QWORD, _QWORD *, uint64_t))(**((_QWORD **)this + 50) + 40))(*((_QWORD *)this + 50), v35, 40);
  }
  v19 = *((_QWORD *)this + 46);
  *((_QWORD *)this + 46) = 0;
  if (v19)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 48) + 40))(*((_QWORD *)this + 48), v19, 8 * *((_QWORD *)this + 47));
  v20 = (_QWORD *)*((_QWORD *)this + 42);
  while (v20)
  {
    v39 = v20;
    v20 = (_QWORD *)*v20;
    v40 = (std::__shared_weak_count *)v39[3];
    if (v40)
    {
      v41 = (unint64_t *)&v40->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    (*(void (**)(_QWORD, _QWORD *, uint64_t))(**((_QWORD **)this + 43) + 40))(*((_QWORD *)this + 43), v39, 32);
  }
  v21 = *((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = 0;
  if (v21)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 41) + 40))(*((_QWORD *)this + 41), v21, 8 * *((_QWORD *)this + 40));
  v22 = (uint64_t *)*((_QWORD *)this + 35);
  if (v22)
  {
    do
    {
      v43 = (uint64_t *)*v22;
      v44 = (std::__shared_weak_count *)v22[7];
      if (v44)
      {
        v45 = (unint64_t *)&v44->__shared_owners_;
        do
          v46 = __ldaxr(v45);
        while (__stlxr(v46 - 1, v45));
        if (!v46)
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
        }
      }
      if (*((char *)v22 + 39) < 0)
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v22[5] + 40))(v22[5], v22[2], v22[4] & 0x7FFFFFFFFFFFFFFFLL);
      (*(void (**)(_QWORD, uint64_t *, uint64_t))(**((_QWORD **)this + 36) + 40))(*((_QWORD *)this + 36), v22, 64);
      v22 = v43;
    }
    while (v43);
  }
  v23 = *((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v23)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 34) + 40))(*((_QWORD *)this + 34), v23, 8 * *((_QWORD *)this + 33));
  std::__tree<std::__value_type<std::pair<unsigned long long,md::LabelIdentifier>,std::shared_ptr<md::Label>>,std::__map_value_compare<std::pair<unsigned long long,md::LabelIdentifier>,std::__value_type<std::pair<unsigned long long,md::LabelIdentifier>,std::shared_ptr<md::Label>>,std::less<std::pair<unsigned long long,md::LabelIdentifier>>,true>,geo::StdAllocator<std::__value_type<std::pair<unsigned long long,md::LabelIdentifier>,std::shared_ptr<md::Label>>,mdm::Allocator>>::destroy((uint64_t)this + 224, *((_QWORD **)this + 29));
  std::__tree<std::__value_type<std::pair<unsigned long long,md::LabelIdentifier>,std::weak_ptr<md::Label>>,std::__map_value_compare<std::pair<unsigned long long,md::LabelIdentifier>,std::__value_type<std::pair<unsigned long long,md::LabelIdentifier>,std::weak_ptr<md::Label>>,std::less<std::pair<unsigned long long,md::LabelIdentifier>>,true>,geo::StdAllocator<std::__value_type<std::pair<unsigned long long,md::LabelIdentifier>,std::weak_ptr<md::Label>>,mdm::Allocator>>::destroy((uint64_t)this + 192, *((_QWORD **)this + 25));
  v24 = (_QWORD *)*((_QWORD *)this + 20);
  while (v24)
  {
    v47 = v24;
    v24 = (_QWORD *)*v24;
    v48 = (std::__shared_weak_count *)v47[3];
    if (v48)
    {
      v49 = (unint64_t *)&v48->__shared_owners_;
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    (*(void (**)(_QWORD, _QWORD *, uint64_t))(**((_QWORD **)this + 21) + 40))(*((_QWORD *)this + 21), v47, 32);
  }
  v25 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v25)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 19) + 40))(*((_QWORD *)this + 19), v25, 8 * *((_QWORD *)this + 18));
  v26 = (_QWORD *)*((_QWORD *)this + 13);
  while (v26)
  {
    v51 = v26;
    v26 = (_QWORD *)*v26;
    v52 = (std::__shared_weak_count *)v51[3];
    if (v52)
    {
      v53 = (unint64_t *)&v52->__shared_owners_;
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    (*(void (**)(_QWORD, _QWORD *, uint64_t))(**((_QWORD **)this + 14) + 40))(*((_QWORD *)this + 14), v51, 32);
  }
  v27 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v27)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 12) + 40))(*((_QWORD *)this + 12), v27, 8 * *((_QWORD *)this + 11));
  v28 = *((_QWORD *)this + 2);
  if (v28)
  {
    v29 = *((_QWORD *)this + 3);
    v30 = *((_QWORD *)this + 2);
    if (v29 != v28)
    {
      do
      {
        v55 = *(std::__shared_weak_count **)(v29 - 8);
        if (v55)
        {
          v56 = (unint64_t *)&v55->__shared_owners_;
          do
            v57 = __ldaxr(v56);
          while (__stlxr(v57 - 1, v56));
          if (!v57)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v55->__on_zero_shared)(v55, v30);
            std::__shared_weak_count::__release_weak(v55);
          }
        }
        v29 -= 16;
      }
      while (v29 != v28);
      v30 = *((_QWORD *)this + 2);
    }
    *((_QWORD *)this + 3) = v28;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 5) + 40))(*((_QWORD *)this + 5), v30, *((_QWORD *)this + 4) - v30);
  }
}

uint64_t md::StandardLabeler::{unnamed type#1}::~StandardLabeler(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 32);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 32);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  *(_QWORD *)a1 = &off_1E42B5570;

  return a1;
}

md::LabelPool **std::unique_ptr<md::LabelPool>::~unique_ptr[abi:nn180100](md::LabelPool **a1)
{
  md::LabelPool *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    md::LabelPool::~LabelPool(v2);
    MEMORY[0x1A1AF4E00]();
  }
  return a1;
}

md::ScreenLabelFeatureSupport **std::unique_ptr<md::ScreenLabelFeatureSupport>::~unique_ptr[abi:nn180100](md::ScreenLabelFeatureSupport **a1)
{
  md::ScreenLabelFeatureSupport *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    md::ScreenLabelFeatureSupport::~ScreenLabelFeatureSupport(v2);
    MEMORY[0x1A1AF4E00]();
  }
  return a1;
}

md::LabelCustomFeatureSupport **std::unique_ptr<md::LabelCustomFeatureSupport>::~unique_ptr[abi:nn180100](md::LabelCustomFeatureSupport **a1)
{
  md::LabelCustomFeatureSupport *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    md::LabelCustomFeatureSupport::~LabelCustomFeatureSupport(v2);
    MEMORY[0x1A1AF4E00]();
  }
  return a1;
}

uint64_t std::__tree<std::__value_type<std::pair<unsigned long long,md::LabelIdentifier>,std::shared_ptr<md::Label>>,std::__map_value_compare<std::pair<unsigned long long,md::LabelIdentifier>,std::__value_type<std::pair<unsigned long long,md::LabelIdentifier>,std::shared_ptr<md::Label>>,std::less<std::pair<unsigned long long,md::LabelIdentifier>>,true>,geo::StdAllocator<std::__value_type<std::pair<unsigned long long,md::LabelIdentifier>,std::shared_ptr<md::Label>>,mdm::Allocator>>::destroy(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  if (a2)
  {
    v3 = result;
    std::__tree<std::__value_type<std::pair<unsigned long long,md::LabelIdentifier>,std::shared_ptr<md::Label>>,std::__map_value_compare<std::pair<unsigned long long,md::LabelIdentifier>,std::__value_type<std::pair<unsigned long long,md::LabelIdentifier>,std::shared_ptr<md::Label>>,std::less<std::pair<unsigned long long,md::LabelIdentifier>>,true>,geo::StdAllocator<std::__value_type<std::pair<unsigned long long,md::LabelIdentifier>,std::shared_ptr<md::Label>>,mdm::Allocator>>::destroy(result, *a2);
    std::__tree<std::__value_type<std::pair<unsigned long long,md::LabelIdentifier>,std::shared_ptr<md::Label>>,std::__map_value_compare<std::pair<unsigned long long,md::LabelIdentifier>,std::__value_type<std::pair<unsigned long long,md::LabelIdentifier>,std::shared_ptr<md::Label>>,std::less<std::pair<unsigned long long,md::LabelIdentifier>>,true>,geo::StdAllocator<std::__value_type<std::pair<unsigned long long,md::LabelIdentifier>,std::shared_ptr<md::Label>>,mdm::Allocator>>::destroy(v3, a2[1]);
    v4 = (std::__shared_weak_count *)a2[7];
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    return (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(v3 + 16) + 40))(*(_QWORD *)(v3 + 16), a2, 64);
  }
  return result;
}

void ggl::DaVinci::ElevatedStrokeColorPipelineState::~ElevatedStrokeColorPipelineState(ggl::DaVinci::ElevatedStrokeColorPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::DaVinci::ElevatedStrokeColorPipelineSetup::~ElevatedStrokeColorPipelineSetup(ggl::DaVinci::ElevatedStrokeColorPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::DaVinci::ElevatedStrokeColorPipelineSetup::constantDataIsEnabled(ggl::DaVinci::ElevatedStrokeColorPipelineSetup *this, uint64_t a2)
{
  _BOOL8 result;
  int v4;

  result = 1;
  switch(a2)
  {
    case 0:
    case 1:
    case 3:
      return result;
    case 2:
      v4 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 336);
      goto LABEL_5;
    case 4:
      v4 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 339);
LABEL_5:
      result = v4 != 0;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

BOOL ggl::DaVinci::ElevatedStrokeColorPipelineSetup::textureIsEnabled(ggl::DaVinci::ElevatedStrokeColorPipelineSetup *this, uint64_t a2)
{
  return !a2 && *(_BYTE *)(*((_QWORD *)this + 2) + 339) != 0;
}

void ggl::DaVinci::ElevatedStrokeColorWithDistancePipelineState::~ElevatedStrokeColorWithDistancePipelineState(ggl::DaVinci::ElevatedStrokeColorWithDistancePipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::DaVinci::ElevatedStrokeColorWithDistancePipelineSetup::~ElevatedStrokeColorWithDistancePipelineSetup(ggl::DaVinci::ElevatedStrokeColorWithDistancePipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::DaVinci::ElevatedStrokeColorWithDistancePipelineSetup::constantDataIsEnabled(ggl::DaVinci::ElevatedStrokeColorWithDistancePipelineSetup *this, uint64_t a2)
{
  _BOOL8 result;
  int v4;

  result = 1;
  switch(a2)
  {
    case 0:
    case 1:
    case 3:
      return result;
    case 2:
      v4 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 336);
      goto LABEL_5;
    case 4:
      v4 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 339);
LABEL_5:
      result = v4 != 0;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

BOOL ggl::DaVinci::ElevatedStrokeColorWithDistancePipelineSetup::textureIsEnabled(ggl::DaVinci::ElevatedStrokeColorWithDistancePipelineSetup *this, uint64_t a2)
{
  return !a2 && *(_BYTE *)(*((_QWORD *)this + 2) + 339) != 0;
}

void md::ARWalkingArrivalLabelFeature::~ARWalkingArrivalLabelFeature(md::ARWalkingArrivalLabelFeature *this)
{
  md::ARWalkingArrivalLabelFeature::~ARWalkingArrivalLabelFeature(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  *(_QWORD *)this = &off_1E42A49B0;
  v2 = (void *)*((_QWORD *)this + 33);
  if (v2)
  {
    *((_QWORD *)this + 34) = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  *((_QWORD *)this + 28) = &off_1E42B5170;

  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 27);
  if (!v6)
    goto LABEL_12;
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    v9 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
    if (!v9)
      goto LABEL_18;
  }
  else
  {
LABEL_12:
    v9 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
    if (!v9)
      goto LABEL_18;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
LABEL_18:
  md::LabelFeature::~LabelFeature(this);
}

uint64_t md::ARWalkingArrivalLabelFeature::labelTypeAtPosition()
{
  return 1;
}

uint64_t md::ARWalkingArrivalLabelFeature::newRootPart(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  long double v13;
  double v14;
  uint64_t v15;
  md::LabelStyle *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  float v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unsigned int v40;
  unsigned int v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  double v54;
  int v55;
  std::__shared_weak_count *v56;
  double v57;
  double v58;
  long double v59;
  double v60;
  long double v61;
  double v62;
  long double v63;
  long double v64;
  long double v65;
  unint64_t *v66;
  double v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unsigned __int8 v76;
  uint64_t v77;
  uint64_t v78;
  _OWORD *v79;
  __int128 v80;
  unint64_t *v81;
  unint64_t v82;
  _OWORD *v83;
  __int128 v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t v98;
  float v99;
  float v100;
  double v101;
  float v102;
  _BYTE v103[5];
  uint64_t v104[2];
  __int128 v105;
  __int128 v106;
  md::LabelStyle *v107;
  std::__shared_weak_count *v108;
  char *v109;
  std::__shared_weak_count *v110;
  double v111[3];
  void *__p[2];
  uint64_t v113;
  _BYTE v114[24];
  _BYTE *v115;
  __int128 v116;
  uint64_t v117;
  char v118;
  uint64_t v119;

  v119 = *MEMORY[0x1E0C80C00];
  v8 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a3 + 8) + 112))(*(_QWORD *)(a3 + 8), a3 + 48);
  md::LabelPoint::coordinate((md::LabelPoint *)v111, v8);
  v9 = v111[0];
  v10 = v111[1];
  v11 = v111[2];
  v12 = v111[0] * 0.00872664626;
  v13 = tan(v111[0] * 0.00872664626 + 0.785398163);
  v14 = log(v13);
  v109 = 0;
  v110 = 0;
  v15 = a1[12];
  v101 = v11;
  if ((unint64_t)(a1[13] - v15) < 0x11)
  {
    v107 = 0;
    v108 = 0;
LABEL_13:
    v102 = 1.0;
    v99 = 1.0;
    v100 = 1.0;
    v26 = 1.0;
    goto LABEL_59;
  }
  v16 = *(md::LabelStyle **)(v15 + 16);
  v17 = *(std::__shared_weak_count **)(v15 + 24);
  v107 = v16;
  v108 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  if (!v16)
    goto LABEL_13;
  v20 = a1[26];
  v21 = (std::__shared_weak_count *)a1[27];
  v104[0] = v20;
  v104[1] = (uint64_t)v21;
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v103[0] = 0;
  v103[4] = 0;
  LOBYTE(v116) = 0;
  v118 = 0;
  v113 = 0;
  __p[0] = 0;
  __p[1] = 0;
  v115 = 0;
  md::LabelStyle::pointIconImageKey(&v105, v16, (uint64_t)a2, a3, v104, 0, (uint64_t)v103, 0, (uint64_t)&v116, 0, 255, 0, (uint64_t)__p);
  v106 = v105;
  v105 = 0uLL;
  v24 = v115;
  if (v115 == v114)
  {
    v25 = 4;
    v24 = v114;
  }
  else
  {
    if (!v115)
      goto LABEL_16;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_16:
  if (SHIBYTE(v113) < 0)
    operator delete(__p[0]);
  if (v21)
  {
    v27 = (unint64_t *)&v21->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  md::LabelImageLoader::loadIconImage((grl::Allocator *)&v116, a2[33], &v106);
  v29 = v116;
  if (!(_QWORD)v116)
  {
    v102 = 1.0;
    v42 = 1.0;
    v43 = 1.0;
    v26 = 1.0;
    goto LABEL_39;
  }
  v30 = (char *)operator new(0xC8uLL);
  *((_QWORD *)v30 + 1) = 0;
  *((_QWORD *)v30 + 2) = 0;
  *(_QWORD *)v30 = &off_1E42DCB68;
  *((_QWORD *)v30 + 3) = &off_1E42AF880;
  *((_QWORD *)v30 + 4) = &off_1E42B5430;
  *((_QWORD *)v30 + 5) = 0;
  v31 = *((_QWORD *)&v106 + 1);
  *((_QWORD *)v30 + 7) = v106;
  *((_QWORD *)v30 + 8) = v31;
  if (v31)
  {
    v32 = (unint64_t *)(v31 + 8);
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  *(_OWORD *)(v30 + 72) = xmmword_19FFB2E30;
  *(_OWORD *)(v30 + 88) = xmmword_19FFB2E30;
  *((_QWORD *)v30 + 13) = 0;
  *((_QWORD *)v30 + 14) = 0;
  *((_QWORD *)v30 + 15) = v29 + 136;
  *((_QWORD *)v30 + 16) = v29 + 24;
  *((_QWORD *)v30 + 17) = 0;
  *((_QWORD *)v30 + 18) = 0;
  *((_QWORD *)v30 + 19) = 0;
  *((_QWORD *)v30 + 20) = 1065353216;
  v30[168] = 0;
  *((_QWORD *)v30 + 3) = &off_1E428FBF0;
  v34 = *((_QWORD *)&v116 + 1);
  *((_QWORD *)v30 + 22) = v29;
  *((_QWORD *)v30 + 23) = v34;
  if (v34)
  {
    v35 = (unint64_t *)(v34 + 8);
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
  }
  v30[192] = 0;
  *((_QWORD *)v30 + 3) = &off_1E429DE78;
  atomic_store(1u, (unsigned __int8 *)v30 + 168);
  v37 = v110;
  v109 = v30 + 24;
  v110 = (std::__shared_weak_count *)v30;
  if (v37)
  {
    v38 = (unint64_t *)&v37->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v102 = 1.0;
  md::LabelImageLoader::enqueueIconForRendering((_QWORD *)a2[33], &v109);
  v42 = 1.0;
  v43 = 1.0;
  v26 = 1.0;
  if (!*(_BYTE *)(v116 + 138))
  {
LABEL_39:
    v48 = (std::__shared_weak_count *)*((_QWORD *)&v116 + 1);
    if (*((_QWORD *)&v116 + 1))
      goto LABEL_49;
    goto LABEL_53;
  }
  LOBYTE(v40) = *(_BYTE *)(v116 + 139);
  v44 = (float)v40;
  LOBYTE(v41) = *(_BYTE *)(v116 + 140);
  v45 = (float)v41;
  LOBYTE(v41) = *(_BYTE *)(v116 + 141);
  v46 = (float)v41;
  LOBYTE(v9) = *(_BYTE *)(v116 + 142);
  if ((float)(v44 * 0.0039216) >= 0.04045)
    v47 = powf((float)(v44 * 0.0037171) + 0.052133, 2.4);
  else
    v47 = v44 * 0.00030353;
  v102 = v47;
  if ((float)(v45 * 0.0039216) >= 0.04045)
    v42 = powf((float)(v45 * 0.0037171) + 0.052133, 2.4);
  else
    v42 = v45 * 0.00030353;
  v26 = (float)LODWORD(v9) * 0.0039216;
  if ((float)(v46 * 0.0039216) >= 0.04045)
    v43 = powf((float)(v46 * 0.0037171) + 0.052133, 2.4);
  else
    v43 = v46 * 0.00030353;
  v48 = (std::__shared_weak_count *)*((_QWORD *)&v116 + 1);
  if (*((_QWORD *)&v116 + 1))
  {
LABEL_49:
    v49 = (unint64_t *)&v48->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
LABEL_53:
  v51 = (std::__shared_weak_count *)*((_QWORD *)&v106 + 1);
  if (*((_QWORD *)&v106 + 1))
  {
    v52 = (unint64_t *)(*((_QWORD *)&v106 + 1) + 8);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  v99 = v43;
  v100 = v42;
  v9 = v111[0];
  v12 = v111[0] * 0.00872664626;
LABEL_59:
  v54 = *(double *)(a2[29] + 56);
  v116 = 0uLL;
  v117 = 0;
  v55 = *(_DWORD *)(a4 + 168);
  v56 = (std::__shared_weak_count *)operator new(0xF0uLL);
  v57 = v14 * 0.159154943 + 0.5;
  v58 = v54 * v101;
  v59 = tan(v12 + 0.789761487);
  v60 = log(v59);
  v61 = tan(v12 + 0.78103484);
  v62 = fabs((v60 - log(v61)) * 0.159154943);
  v63 = cos(v9 * 0.034906585) * -559.82 + 111132.92;
  v64 = v63 + cos(v9 * 0.0698131701) * 1.175;
  v65 = cos(v9 * 0.104719755);
  v56->__shared_owners_ = 0;
  v66 = (unint64_t *)&v56->__shared_owners_;
  v67 = v62 / (v64 + v65 * -0.0023);
  v56->__shared_weak_owners_ = 0;
  v56->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD770;
  v56[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42A0A00;
  do
  {
    v68 = __ldaxr(&md::LabelExternalMeshRequest::nextId(void)::next);
    v69 = v68 + 1;
  }
  while (__stlxr(v69, &md::LabelExternalMeshRequest::nextId(void)::next));
  LODWORD(v56[1].__shared_owners_) = v69;
  BYTE4(v56[1].__shared_owners_) = 0;
  *(double *)&v56[1].__shared_weak_owners_ = v10 * 0.00277777778 + 0.5;
  *(double *)&v56[2].__vftable = v57;
  *(double *)&v56[2].__shared_owners_ = v58;
  *(_OWORD *)&v56[2].__shared_weak_owners_ = v116;
  v56[3].__shared_owners_ = v117;
  v56[3].__shared_weak_owners_ = 0x3FF0000000000000;
  *(double *)&v56[4].__vftable = v67;
  *(double *)&v56[4].__shared_owners_ = v67;
  *(double *)&v56[4].__shared_weak_owners_ = v67;
  v56[5].__vftable = (std::__shared_weak_count_vtbl *)850045863;
  *(_OWORD *)&v56[5].__shared_owners_ = 0u;
  v56[6].std::__shared_count = 0u;
  *(_OWORD *)&v56[6].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v56[7].__shared_owners_ = 0u;
  v56[8].__vftable = 0;
  LOBYTE(v56[8].__shared_owners_) = 1;
  v56[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42A48A0;
  *((float *)&v56[8].__shared_owners_ + 1) = v102;
  *(float *)&v56[8].__shared_weak_owners_ = v100;
  *((float *)&v56[8].__shared_weak_owners_ + 1) = v99;
  *(float *)&v56[9].__vftable = v26;
  HIDWORD(v56[9].__vftable) = v55;
  v70 = (uint64_t)v110;
  v56[9].__shared_owners_ = (uint64_t)v109;
  v56[9].__shared_weak_owners_ = v70;
  if (v70)
  {
    v71 = (unint64_t *)(v70 + 8);
    do
      v72 = __ldxr(v71);
    while (__stxr(v72 + 1, v71));
  }
  *(_QWORD *)&v106 = v56 + 1;
  *((_QWORD *)&v106 + 1) = v56;
  v73 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2[21] + 64) + 24))(*(_QWORD *)(a2[21] + 64));
  *(_QWORD *)&v105 = v56 + 1;
  *((_QWORD *)&v105 + 1) = v56;
  do
    v74 = __ldxr(v66);
  while (__stxr(v74 + 1, v66));
  md::LabelExternalMeshModerator::requestExternalMesh(v73, &v105);
  do
    v75 = __ldaxr(v66);
  while (__stlxr(v75 - 1, v66));
  if (!v75)
  {
    ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
    std::__shared_weak_count::__release_weak(v56);
  }
  {
    v98 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v98, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v77 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc, 968, 8);
  v78 = v77;
  v79 = (_OWORD *)(v77 + 280);
  v80 = v106;
  if (*((_QWORD *)&v106 + 1))
  {
    v81 = (unint64_t *)(*((_QWORD *)&v106 + 1) + 8);
    do
      v82 = __ldxr(v81);
    while (__stxr(v82 + 1, v81));
  }
  *(_DWORD *)(v77 + 8) = 1065353216;
  v83 = (_OWORD *)(v77 + 664);
  *(_QWORD *)(v77 + 16) = 0;
  *(_QWORD *)(v77 + 24) = v77;
  *(_OWORD *)(v77 + 32) = 0u;
  *(_OWORD *)(v77 + 48) = 0u;
  v84 = xmmword_19FFB2E30;
  *(_OWORD *)(v77 + 72) = xmmword_19FFB2E30;
  *(_QWORD *)(v77 + 64) = 0;
  *(_QWORD *)(v77 + 88) = 1065353216;
  *(_DWORD *)(v77 + 96) = 1065353216;
  *(_OWORD *)(v77 + 100) = 0u;
  *(_DWORD *)(v77 + 116) = 0;
  *(_OWORD *)(v77 + 120) = xmmword_19FFB2E30;
  *(_OWORD *)(v77 + 136) = xmmword_19FFB2E30;
  *(_OWORD *)(v77 + 152) = xmmword_19FFB2E30;
  *(_OWORD *)(v77 + 168) = xmmword_19FFB3480;
  *(_BYTE *)(v77 + 224) = 0;
  *(_BYTE *)(v77 + 200) = 0;
  *(_OWORD *)(v77 + 184) = 0u;
  *(_OWORD *)(v77 + 257) = 0u;
  *(_OWORD *)(v77 + 248) = 0u;
  *(_OWORD *)(v77 + 232) = 0u;
  *v79 = xmmword_19FFB3580;
  *(_OWORD *)(v77 + 296) = xmmword_19FFB3590;
  *(_OWORD *)(v77 + 312) = xmmword_19FFB2E30;
  *(_QWORD *)(v77 + 328) = 1065353216;
  *(_DWORD *)(v77 + 336) = 1065353216;
  *(_DWORD *)(v77 + 356) = 0;
  *(_OWORD *)(v77 + 340) = 0u;
  *(_OWORD *)(v77 + 360) = xmmword_19FFB2E30;
  *(_OWORD *)(v77 + 376) = xmmword_19FFB2E30;
  *(_OWORD *)(v77 + 392) = xmmword_19FFB2E30;
  *(_OWORD *)(v77 + 408) = xmmword_19FFB3480;
  *(_BYTE *)(v77 + 464) = 0;
  *(_BYTE *)(v77 + 440) = 0;
  *(_OWORD *)(v77 + 424) = 0u;
  *(_OWORD *)(v77 + 472) = 0u;
  *(_OWORD *)(v77 + 488) = 0u;
  *(_OWORD *)(v77 + 497) = 0u;
  *(_OWORD *)(v77 + 520) = xmmword_19FFB3580;
  *(_DWORD *)(v77 + 536) = 1065353216;
  *(_OWORD *)(v77 + 540) = 0u;
  *(_WORD *)(v77 + 556) = 512;
  *(_BYTE *)(v77 + 562) = 0;
  *(_DWORD *)(v77 + 558) = 0;
  *(_WORD *)(v77 + 563) = -1;
  *(_DWORD *)(v77 + 565) = 0;
  *(_QWORD *)v77 = off_1E429AD10;
  *(_OWORD *)(v77 + 576) = 0u;
  *(_OWORD *)(v77 + 592) = v80;
  if (*((_QWORD *)&v80 + 1))
  {
    v85 = (unint64_t *)(*((_QWORD *)&v80 + 1) + 8);
    do
      v86 = __ldxr(v85);
    while (__stxr(v86 + 1, v85));
    do
      v87 = __ldaxr(v85);
    while (__stlxr(v87 - 1, v85));
    if (!v87)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v80 + 1) + 16))(*((_QWORD *)&v80 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v80 + 1));
      v84 = xmmword_19FFB2E30;
    }
  }
  *(_QWORD *)v78 = off_1E42A6DE8;
  *(_QWORD *)(v78 + 608) = 0;
  *(_QWORD *)(v78 + 624) = 0;
  *(_QWORD *)(v78 + 616) = 0;
  v79[22] = v84;
  v79[23] = v84;
  *v83 = xmmword_19FFB3470;
  *(_OWORD *)(v78 + 680) = xmmword_19FFB5030;
  *(_OWORD *)(v78 + 696) = xmmword_19FFB5080;
  *(_WORD *)(v78 + 565) = 257;
  v88 = (std::__shared_weak_count *)*((_QWORD *)&v106 + 1);
  if (*((_QWORD *)&v106 + 1))
  {
    v89 = (unint64_t *)(*((_QWORD *)&v106 + 1) + 8);
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  v91 = v108;
  if (v108)
  {
    v92 = (unint64_t *)&v108->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  v94 = v110;
  if (v110)
  {
    v95 = (unint64_t *)&v110->__shared_owners_;
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  return v78;
}

void sub_19FA60E04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,char a28)
{
  uint64_t v28;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v28 - 168);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  _Unwind_Resume(a1);
}

__int128 *md::ARWalkingArrivalLabelFeature::labelPoint(uint64_t a1, _DWORD *a2)
{
  _DWORD *v2;
  _DWORD *v3;
  unsigned __int8 v5;

  v2 = *(_DWORD **)(a1 + 264);
  v3 = *(_DWORD **)(a1 + 272);
  if (v2 != v3)
  {
    while (*a2 != *v2)
    {
      v2 += 40;
      if (v2 == v3)
        goto LABEL_7;
    }
  }
  if (v2 != v3)
    return (__int128 *)(v2 + 2);
LABEL_7:
  if ((v5 & 1) != 0)
    return &md::LabelPoint::NullPoint(void)::kNullLabelPoint;
  {
    qword_1ECE2FD68 = 0;
    md::LabelPoint::NullPoint(void)::kNullLabelPoint = 0u;
    *(_OWORD *)&qword_1ECE2FD58 = 0u;
    dword_1ECE2FD70 = 2139095039;
    word_1ECE2FD74 = 256;
    byte_1ECE2FD76 = 1;
  }
  return &md::LabelPoint::NullPoint(void)::kNullLabelPoint;
}

uint64_t md::ARWalkingArrivalLabelFeature::facingVector(uint64_t result, _DWORD *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(result + 264);
  v3 = *(_QWORD *)(result + 272);
  if (v2 != v3)
  {
    while (*a2 != *(_DWORD *)v2)
    {
      v2 += 160;
      if (v2 == v3)
        return result;
    }
  }
  if (v2 != v3)
    return *(_QWORD *)(v2 + 56);
  return result;
}

id md::ARWalkingArrivalLabelFeature::arWalkingFeature(id *this)
{
  return this[29];
}

uint64_t md::ARWalkingArrivalLabelFeature::labelFeatureType(md::ARWalkingArrivalLabelFeature *this)
{
  return 25;
}

uint64_t md::ARWalkingArrivalLabelFeature::dedupingGroup@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 256);
  *a2 = *(_QWORD *)(this + 248);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

void md::ARWalkingArrivalLabelFeature::populateDebugNode(id *this, gdc::DebugTreeNode *a2, const md::LabelManager *a3)
{
  char *v5;
  void *v6;
  void *v7;
  const std::string::value_type *v8;
  uint64_t v9;
  std::string __p;
  int v11;
  __int128 v12[2];

  md::LabelFeature::populateDebugNode((md::LabelFeature *)this, a2, (unint64_t)a3);
  v5 = (char *)operator new(0x19uLL);
  *(_QWORD *)&v12[0] = v5;
  *(__int128 *)((char *)v12 + 8) = xmmword_19FFB3490;
  strcpy(v5, "ARWalkingArrivalFeature");
  gdc::DebugTreeNode::createChildNode((uint64_t)a2, v12);
  operator delete(v5);
  objc_msgSend(this[29], "description");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v6)
  {
    BYTE7(v12[1]) = 18;
    strcpy((char *)v12, "VKARWalkingFeature");
    v8 = (const std::string::value_type *)objc_msgSend(objc_retainAutorelease(v6), "UTF8String");
    memset(&__p, 0, sizeof(__p));
    v11 = 4;
    if (v8)
    {
      std::string::__assign_external(&__p, v8);
    }
    else
    {
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 6;
      strcpy((char *)&__p, "<null>");
    }
    gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)v12, (uint64_t)&v9);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }

}

void sub_19FA610F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void md::ARWalkingArrivalLabelFeature::populateStyleQueries(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  unsigned __int8 v9;
  char *v10;
  char *v11;
  unint64_t *v12;
  void **v13;
  _OWORD *v14;
  __int128 v15;
  char *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  unsigned __int8 v20;
  size_t v21;
  _QWORD *v22;
  uint64_t v23;
  int *v24;
  int v25;
  uint64_t v26;
  int *v27;
  int v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  _OWORD *v38;
  char *v39;
  _OWORD *v40;
  __int128 v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  id v46;
  void *v47;
  uint64_t v48;
  id v49;
  void *v50;
  unsigned int v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  unsigned __int8 v55;
  size_t v56;
  _QWORD *v57;
  uint64_t v58;
  int *v59;
  int v60;
  uint64_t v61;
  int *v62;
  int v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  _QWORD *v68;
  unint64_t *v69;
  unint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  _OWORD *v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87[2];
  __int128 v88;
  __int128 v89;
  char *v90;
  std::__shared_weak_count *v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;

  v96 = 0;
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 488))(a1)
    && (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 480))(a1, 0))
  {
    v6 = operator new();
    v7 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 480))(a1, 0);
    *(_QWORD *)(v6 + 24) = *(_QWORD *)(v7 + 24);
    if (*(char *)(v7 + 23) < 0)
    {
      std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((_QWORD **)v6, *(void **)v7, *(_QWORD *)(v7 + 8));
    }
    else
    {
      v8 = *(_OWORD *)v7;
      *(_QWORD *)(v6 + 16) = *(_QWORD *)(v7 + 16);
      *(_OWORD *)v6 = v8;
    }
    v96 = (_QWORD *)v6;
  }
  v92 = 0;
  v93 = 0;
  v94 = 0;
  {
    v86 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v86, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v95 = mdm::Allocator::instance(void)::alloc;
  v10 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                     + 16))(mdm::Allocator::instance(void)::alloc, 8, 4);
  if (v10)
    *(_QWORD *)v10 = 0x100010060;
  v93 = v10 + 8;
  v94 = v10 + 8;
  v92 = v10;
  (*(void (**)(uint64_t, char **))(*(_QWORD *)a1 + 544))(a1, &v92);
  v11 = (char *)operator new(0x40uLL);
  *((_QWORD *)v11 + 1) = 0;
  v12 = (unint64_t *)(v11 + 8);
  *((_QWORD *)v11 + 2) = 0;
  *(_QWORD *)v11 = &off_1E42DAB40;
  *(_OWORD *)(v11 + 24) = 0u;
  v13 = (void **)(v11 + 24);
  *(_OWORD *)(v11 + 40) = 0u;
  *(_DWORD *)(v11 + 55) = 0;
  v14 = malloc_type_malloc(0x100uLL, 0x100004000313F17uLL);
  *((_QWORD *)v11 + 3) = v14;
  if (v14)
  {
    *(_QWORD *)&v15 = -1;
    *((_QWORD *)&v15 + 1) = -1;
    v14[14] = v15;
    v14[15] = v15;
    v14[12] = v15;
    v14[13] = v15;
    v14[10] = v15;
    v14[11] = v15;
    v14[8] = v15;
    v14[9] = v15;
    v14[6] = v15;
    v14[7] = v15;
    v14[4] = v15;
    v14[5] = v15;
    v14[2] = v15;
    v14[3] = v15;
    *v14 = v15;
    v14[1] = v15;
  }
  v90 = v11 + 24;
  v91 = (std::__shared_weak_count *)v11;
  v16 = v92;
  if (((v93 - v92) & 0x7FFFFFFF8) != 0)
  {
    v17 = 0;
    v18 = 0;
    v19 = ((unint64_t)(v93 - v92) >> 3);
    v20 = v11[57];
    while (1)
    {
      v21 = v20;
      v22 = *v13;
      if (v20)
        break;
LABEL_14:
      v22[v21] = *(_QWORD *)&v16[8 * v17];
      v20 = v11[57] + 1;
      v11[57] = v20;
      ++v17;
      v18 = 1;
      if (v17 == v19)
      {
        v22 = *v13;
        v21 = v20;
LABEL_31:
        qsort(v22, v21, 8uLL, (int (__cdecl *)(const void *, const void *))FeatureStyleAttributes::compareStylePairs);
        goto LABEL_32;
      }
    }
    if (v20 > 0x1Fu)
    {
      do
      {
        v26 = 0;
        v27 = (int *)v22;
        while (1)
        {
          v28 = *v27;
          v27 += 2;
          if (v28 == *(_DWORD *)&v16[8 * v17])
            break;
          if (v21 == ++v26)
            goto LABEL_25;
        }
        HIDWORD(v22[v26]) = *(_DWORD *)&v16[8 * v17 + 4];
LABEL_25:
        ++v17;
      }
      while (v17 != v19);
    }
    else
    {
      do
      {
        v23 = 0;
        v24 = (int *)v22;
        while (1)
        {
          v25 = *v24;
          v24 += 2;
          if (v25 == *(_DWORD *)&v16[8 * v17])
            break;
          if (v21 == ++v23)
            goto LABEL_14;
        }
        HIDWORD(v22[v23]) = *(_DWORD *)&v16[8 * v17++ + 4];
      }
      while (v17 != v19);
    }
    if ((v18 & 1) != 0)
      goto LABEL_31;
  }
  do
LABEL_32:
    v29 = __ldxr(v12);
  while (__stxr(v29 + 1, v12));
  v30 = *(std::__shared_weak_count **)(a1 + 200);
  *(_QWORD *)(a1 + 192) = v13;
  *(_QWORD *)(a1 + 200) = v11;
  if (v30)
  {
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldaxr(p_shared_owners);
    while (__stlxr(v32 - 1, p_shared_owners));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = v96;
  md::createFeatureAttributeSet((gss::Allocator *)&v97, (uint64_t *)(a1 + 192));
  md::LabelStyleCache::styleQueryForFeatureAttributes((unint64_t *)&v89, a3, &v97, v33);
  if (v97)
  {
    v98 = v97;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v100 + 40))(v100, v97, v99 - v97);
  }
  v34 = *(_QWORD **)(a2 + 8);
  if ((unint64_t)v34 >= *(_QWORD *)(a2 + 16))
  {
    v38 = std::vector<std::shared_ptr<md::LabelMarker>,geo::StdAllocator<std::shared_ptr<md::LabelMarker>,mdm::Allocator>>::__push_back_slow_path<std::shared_ptr<md::LabelMarker> const&>(a2, &v89);
  }
  else
  {
    if (v34)
    {
      *v34 = v89;
      v35 = *((_QWORD *)&v89 + 1);
      v34[1] = *((_QWORD *)&v89 + 1);
      if (v35)
      {
        v36 = (unint64_t *)(v35 + 8);
        do
          v37 = __ldxr(v36);
        while (__stxr(v37 + 1, v36));
      }
    }
    v38 = v34 + 2;
  }
  *(_QWORD *)(a2 + 8) = v38;
  v39 = (char *)operator new(0x40uLL);
  *((_QWORD *)v39 + 1) = 0;
  *((_QWORD *)v39 + 2) = 0;
  *(_QWORD *)v39 = &off_1E42DAB40;
  *(_OWORD *)(v39 + 24) = 0u;
  *(_OWORD *)(v39 + 40) = 0u;
  *(_DWORD *)(v39 + 55) = 0;
  v40 = malloc_type_malloc(0x100uLL, 0x100004000313F17uLL);
  *((_QWORD *)v39 + 3) = v40;
  if (v40)
  {
    *(_QWORD *)&v41 = -1;
    *((_QWORD *)&v41 + 1) = -1;
    v40[14] = v41;
    v40[15] = v41;
    v40[12] = v41;
    v40[13] = v41;
    v40[10] = v41;
    v40[11] = v41;
    v40[8] = v41;
    v40[9] = v41;
    v40[6] = v41;
    v40[7] = v41;
    v40[4] = v41;
    v40[5] = v41;
    v40[2] = v41;
    v40[3] = v41;
    *v40 = v41;
    v40[1] = v41;
  }
  v42 = *(std::__shared_weak_count **)(a1 + 216);
  *(_QWORD *)(a1 + 208) = v39 + 24;
  *(_QWORD *)(a1 + 216) = v39;
  if (v42)
  {
    v43 = (unint64_t *)&v42->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v45 = *(_QWORD *)(a1 + 208);
  v46 = *(id *)(a1 + 232);
  objc_msgSend(v46, "styleAttributes");
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  v48 = objc_msgSend(v47, "v");
  v49 = *(id *)(a1 + 232);
  objc_msgSend(v49, "styleAttributes");
  v50 = (void *)objc_claimAutoreleasedReturnValue();
  v51 = objc_msgSend(v50, "countAttrs");
  if (v51)
  {
    v52 = 0;
    v53 = 0;
    v54 = v51;
    v55 = *(_BYTE *)(v45 + 33);
    while (1)
    {
      v56 = v55;
      v57 = *(_QWORD **)v45;
      if (v55)
        break;
LABEL_56:
      v57[v56] = *(_QWORD *)(v48 + 8 * v52);
      v55 = *(_BYTE *)(v45 + 33) + 1;
      *(_BYTE *)(v45 + 33) = v55;
      ++v52;
      v53 = 1;
      if (v52 == v54)
      {
        v57 = *(_QWORD **)v45;
        v56 = v55;
LABEL_73:
        qsort(v57, v56, 8uLL, (int (__cdecl *)(const void *, const void *))FeatureStyleAttributes::compareStylePairs);
        goto LABEL_74;
      }
    }
    if (v55 > 0x1Fu)
    {
      do
      {
        v61 = 0;
        v62 = (int *)v57;
        while (1)
        {
          v63 = *v62;
          v62 += 2;
          if (v63 == *(_DWORD *)(v48 + 8 * v52))
            break;
          if (v56 == ++v61)
            goto LABEL_67;
        }
        HIDWORD(v57[v61]) = *(_DWORD *)(v48 + 8 * v52 + 4);
LABEL_67:
        ++v52;
      }
      while (v52 != v54);
    }
    else
    {
      do
      {
        v58 = 0;
        v59 = (int *)v57;
        while (1)
        {
          v60 = *v59;
          v59 += 2;
          if (v60 == *(_DWORD *)(v48 + 8 * v52))
            break;
          if (v56 == ++v58)
            goto LABEL_56;
        }
        HIDWORD(v57[v58]) = *(_DWORD *)(v48 + 8 * v52++ + 4);
      }
      while (v52 != v54);
    }
    if ((v53 & 1) != 0)
      goto LABEL_73;
  }
LABEL_74:

  v64 = *(_QWORD *)(a1 + 208);
  v65 = *(std::__shared_weak_count **)(a1 + 216);
  v87[0] = v64;
  v87[1] = (uint64_t)v65;
  if (v65)
  {
    v66 = (unint64_t *)&v65->__shared_owners_;
    do
      v67 = __ldxr(v66);
    while (__stxr(v67 + 1, v66));
  }
  v68 = v96;
  md::createFeatureAttributeSet((gss::Allocator *)&v97, v87);
  md::LabelStyleCache::styleQueryForFeatureAttributes((unint64_t *)&v88, a3, &v97, v68);
  if (v97)
  {
    v98 = v97;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v100 + 40))(v100, v97, v99 - v97);
  }
  if (v65)
  {
    v69 = (unint64_t *)&v65->__shared_owners_;
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  v71 = *(_QWORD **)(a2 + 8);
  if ((unint64_t)v71 >= *(_QWORD *)(a2 + 16))
  {
    v75 = std::vector<std::shared_ptr<md::LabelMarker>,geo::StdAllocator<std::shared_ptr<md::LabelMarker>,mdm::Allocator>>::__push_back_slow_path<std::shared_ptr<md::LabelMarker> const&>(a2, &v88);
  }
  else
  {
    if (v71)
    {
      *v71 = v88;
      v72 = *((_QWORD *)&v88 + 1);
      v71[1] = *((_QWORD *)&v88 + 1);
      if (v72)
      {
        v73 = (unint64_t *)(v72 + 8);
        do
          v74 = __ldxr(v73);
        while (__stxr(v74 + 1, v73));
      }
    }
    v75 = v71 + 2;
  }
  *(_QWORD *)(a2 + 8) = v75;
  v76 = (std::__shared_weak_count *)*((_QWORD *)&v88 + 1);
  if (*((_QWORD *)&v88 + 1))
  {
    v77 = (unint64_t *)(*((_QWORD *)&v88 + 1) + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  v79 = (std::__shared_weak_count *)*((_QWORD *)&v89 + 1);
  if (*((_QWORD *)&v89 + 1))
  {
    v80 = (unint64_t *)(*((_QWORD *)&v89 + 1) + 8);
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = v91;
  if (v91)
  {
    v83 = (unint64_t *)&v91->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  if (v92)
  {
    v93 = v92;
    (*(void (**)(uint64_t, char *, int64_t))(*(_QWORD *)v95 + 40))(v95, v92, v94 - v92);
  }
  v85 = v96;
  if (v96)
  {
    if (*((char *)v96 + 23) < 0)
      (*(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)v96[3] + 40))(v96[3], *v96, v96[2] & 0x7FFFFFFFFFFFFFFFLL);
    MEMORY[0x1A1AF4E00](v85, 0x1032C402ED93987);
  }
}

void sub_19FA61904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  if (v12)
  {
    v13 = v12;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15 + 40))(v15, v12, v14 - v12);
  }
  std::unique_ptr<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::~unique_ptr[abi:nn180100]((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t md::ARWalkingArrivalLabelFeature::styleAttributes@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(result + 200);
  *a2 = *(_QWORD *)(result + 192);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void md::ARArrivalExternalMeshRequest::~ARArrivalExternalMeshRequest(md::ARArrivalExternalMeshRequest *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E42A48A0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 26);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::LabelExternalMeshRequest::~LabelExternalMeshRequest(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E42A48A0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 26);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::LabelExternalMeshRequest::~LabelExternalMeshRequest(this);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::ARArrivalExternalMeshRequest>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD770;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::ARArrivalExternalMeshRequest>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD770;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::ARArrivalExternalMeshRequest>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<md::TextureBackedLabelIcon>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DCB68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::TextureBackedLabelIcon>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DCB68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::TextureBackedLabelIcon>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t geo::_retain_ptr<VKARWalkingArrivalFeature * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B5170;

  return a1;
}

void geo::_retain_ptr<VKARWalkingArrivalFeature * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B5170;

  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_pointer<ARArrivalFeatureDedupingGroup *,std::shared_ptr<md::LabelDedupingGroup>::__shared_ptr_default_delete<md::LabelDedupingGroup,ARArrivalFeatureDedupingGroup>,std::allocator<ARArrivalFeatureDedupingGroup>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<ARArrivalFeatureDedupingGroup *,std::shared_ptr<md::LabelDedupingGroup>::__shared_ptr_default_delete<md::LabelDedupingGroup,ARArrivalFeatureDedupingGroup>,std::allocator<ARArrivalFeatureDedupingGroup>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void ARArrivalFeatureDedupingGroup::~ARArrivalFeatureDedupingGroup(ARArrivalFeatureDedupingGroup *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E428B818;
  v2 = (_QWORD *)*((_QWORD *)this + 12);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v4)
    operator delete(v4);
  *(_QWORD *)this = &off_1E4294980;
  v5 = *((_QWORD *)this + 5);
  if (v5)
  {
    *((_QWORD *)this + 6) = v5;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 8) + 40))(*((_QWORD *)this + 8), v5, *((_QWORD *)this + 7) - v5);
  }
  v6 = *((_QWORD *)this + 1);
  if (v6)
  {
    *((_QWORD *)this + 2) = v6;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 4) + 40))(*((_QWORD *)this + 4), v6, *((_QWORD *)this + 3) - v6);
  }
}

{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E428B818;
  v2 = (_QWORD *)*((_QWORD *)this + 12);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v4)
    operator delete(v4);
  *(_QWORD *)this = &off_1E4294980;
  v5 = *((_QWORD *)this + 5);
  if (v5)
  {
    *((_QWORD *)this + 6) = v5;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 8) + 40))(*((_QWORD *)this + 8), v5, *((_QWORD *)this + 7) - v5);
  }
  v6 = *((_QWORD *)this + 1);
  if (v6)
  {
    *((_QWORD *)this + 2) = v6;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 4) + 40))(*((_QWORD *)this + 4), v6, *((_QWORD *)this + 3) - v6);
  }
  JUMPOUT(0x1A1AF4E00);
}

double *ARArrivalFeatureDedupingGroup::prepareForCollision(int8x8_t *this, md::LabelManager *a2)
{
  int8x16_t *v4;
  int8x16_t *v5;
  int8x16_t *v6;
  uint64_t v7;
  uint64_t v8;
  double *v9;
  unint64_t v10;
  int8x8_t *v11;
  uint64_t v12;
  double *result;
  int8x8_t *v14;
  int8x8_t *v15;
  unint64_t v16;
  uint64_t v17;
  int8x8_t *v18;
  uint64_t v19;
  uint64_t v20;
  int8x8_t *v21;
  int8x8_t v22;
  int8x8_t v23;
  uint64_t v24;
  double *v25;
  int8x8_t v26;
  uint64_t v27;
  int8x8_t *v28[2];

  this[6] = this[5];
  this[9] = 0;
  v5 = (int8x16_t *)this[1];
  v4 = (int8x16_t *)this[2];
  if (v5 != v4)
  {
    while (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5->i64[0] + 16))(v5->i64[0]) & 1) != 0)
    {
      v5 = (int8x16_t *)((char *)v5 + 8);
LABEL_4:
      if (v5 == v4)
        goto LABEL_11;
    }
    v6 = (int8x16_t *)((char *)v4 - 8);
    while (v6 != v5)
    {
      v4 = v6;
      v7 = v6->i64[0];
      v6 = (int8x16_t *)((char *)v6 - 8);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7))
      {
        v8 = v5->i64[0];
        v5->i64[0] = v4->i64[0];
        v5 = (int8x16_t *)((char *)v5 + 8);
        v4->i64[0] = v8;
        goto LABEL_4;
      }
    }
  }
  v4 = v5;
LABEL_11:
  v9 = (double *)this[1];
  v10 = 126 - 2 * __clz(((char *)v4 - (char *)v9) >> 3);
  v11 = (int8x8_t *)(*((_QWORD *)a2 + 54) + 136);
  v28[0] = this;
  v28[1] = v11;
  if (v4 == (int8x16_t *)v9)
    v12 = 0;
  else
    v12 = v10;
  result = std::__introsort<std::_ClassicAlgPolicy,ARArrivalFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::{lambda(md::LabelBase const*,md::LabelBase const*)#1} &,md::LabelBase**,false>(v9, v4, v28, v12, 1);
  v14 = (int8x8_t *)this[1];
  v15 = (int8x8_t *)this[2];
  if (v14 != v15)
  {
    v16 = (char *)v15 - (char *)v14 - 8;
    if (v16 > 7)
    {
      v19 = 0;
      v20 = (v16 >> 3) + 1;
      v17 = v20 & 0x3FFFFFFFFFFFFFFELL;
      do
      {
        v21 = &v14[v19];
        v23 = *v21;
        v22 = v21[1];
        *(_DWORD *)(*(_QWORD *)&v23 + 32) = v19;
        *(_DWORD *)(*(_QWORD *)&v22 + 32) = v19 + 1;
        v19 += 2;
      }
      while (v17 != v19);
      if (v20 == v17)
        goto LABEL_22;
      v18 = &v14[v20 & 0x3FFFFFFFFFFFFFFELL];
    }
    else
    {
      LODWORD(v17) = 0;
      v18 = (int8x8_t *)this[1];
    }
    do
    {
      v24 = (uint64_t)*v18++;
      *(_DWORD *)(v24 + 32) = v17;
      LODWORD(v17) = v17 + 1;
    }
    while (v18 != v15);
LABEL_22:
    this[9] = *v14;
  }
  if (this[13])
  {
    result = (double *)this[12];
    if (result)
    {
      do
      {
        v25 = *(double **)result;
        operator delete(result);
        result = v25;
      }
      while (v25);
    }
    this[12] = 0;
    v26 = this[11];
    if (v26)
    {
      v27 = 0;
      do
        *(_QWORD *)(*(_QWORD *)&this[10] + 8 * v27++) = 0;
      while (*(_QWORD *)&v26 != v27);
    }
    this[13] = 0;
  }
  return result;
}

BOOL ARArrivalFeatureDedupingGroup::isResolved(ARArrivalFeatureDedupingGroup *this)
{
  return *((_QWORD *)this + 5) != *((_QWORD *)this + 6);
}

double *std::__introsort<std::_ClassicAlgPolicy,ARArrivalFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::{lambda(md::LabelBase const*,md::LabelBase const*)#1} &,md::LabelBase**,false>(double *result, int8x16_t *a2, int8x8_t **a3, uint64_t a4, char a5)
{
  int8x16_t *v7;
  int8x16_t *v8;
  int8x16_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  float *v18;
  double *v19;
  double v20;
  int8x8_t *v21;
  float64x2_t v22;
  float64x2_t v23;
  double *v24;
  double v25;
  int8x8_t *v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t *v29;
  int8x16_t *v30;
  int8x8_t *v31;
  float64x2_t v32;
  float64x2_t v33;
  double v34;
  unint64_t v35;
  unint64_t v36;
  float *v37;
  double *v38;
  double v39;
  int8x8_t *v40;
  float64x2_t v41;
  float64x2_t v42;
  double *v43;
  int8x16_t *v44;
  int8x16_t *v45;
  unint64_t v46;
  unint64_t v47;
  float *v48;
  double *v49;
  double v50;
  int8x8_t *v51;
  float64x2_t v52;
  float64x2_t v53;
  double *v54;
  int8x8_t *v55;
  float64x2_t v56;
  float64x2_t v57;
  double v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  int8x8_t *v67;
  float *v68;
  int8x8_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint8x8_t v73;
  unint64_t v74;
  double **v75;
  double *v76;
  unint64_t v77;
  uint64_t v78;
  int8x8_t *v79;
  float64x2_t v80;
  float64x2_t v81;
  double v82;
  uint8x8_t v83;
  unint64_t v84;
  double **v85;
  double *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  int8x8_t *v90;
  float64x2_t v91;
  float64x2_t v92;
  double v93;
  unint64_t v94;
  unint64_t v95;
  int8x8_t *v96;
  float *v97;
  int8x8_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint8x8_t v102;
  unint64_t v103;
  double **v104;
  double *v105;
  unint64_t v106;
  uint64_t v107;
  int8x8_t *v108;
  float64x2_t v109;
  float64x2_t v110;
  double v111;
  uint8x8_t v112;
  unint64_t v113;
  double **v114;
  double *v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  int8x8_t *v119;
  float64x2_t v120;
  float64x2_t v121;
  double v122;
  int8x8_t *v123;
  float64x2_t v124;
  float64x2_t v125;
  double v126;
  unint64_t v127;
  unint64_t v128;
  float *v129;
  double *v130;
  double v131;
  int8x8_t *v132;
  float64x2_t v133;
  float64x2_t v134;
  double *v135;
  BOOL v136;
  unint64_t v137;
  float *v138;
  double *v139;
  double v140;
  int8x8_t *v141;
  float64x2_t v142;
  float64x2_t v143;
  double v144;
  int8x8_t *v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t *v148;
  int8x8_t *v149;
  float64x2_t v150;
  float64x2_t v151;
  double v152;
  unint64_t v153;
  unint64_t v154;
  float *v155;
  double *v156;
  double v157;
  int8x8_t *v158;
  float64x2_t v159;
  float64x2_t v160;
  unint64_t *v161;
  int8x8_t *v162;
  float64x2_t v163;
  float64x2_t v164;
  double v165;
  unint64_t v166;
  float *v167;
  double *v168;
  double v169;
  int8x8_t *v170;
  float64x2_t v171;
  float64x2_t v172;
  int8x16_t *v173;
  int8x8_t *v174;
  float64x2_t v175;
  float64x2_t v176;
  double v177;
  unint64_t v178;
  unint64_t v179;
  float *v180;
  double *v181;
  double v182;
  int8x8_t *v183;
  float64x2_t v184;
  float64x2_t v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  int8x8_t *v192;
  float *v193;
  int8x8_t v194;
  uint8x8_t v195;
  unint64_t v196;
  double **v197;
  double *v198;
  unint64_t v199;
  uint64_t v200;
  int8x8_t *v201;
  float64x2_t v202;
  float64x2_t v203;
  double v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t v207;
  uint8x8_t v208;
  unint64_t v209;
  double **v210;
  double *v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t v214;
  int8x8_t *v215;
  float64x2_t v216;
  float64x2_t v217;
  double v218;
  unint64_t v219;
  unint64_t v220;
  int8x8_t *v221;
  float *v222;
  int8x8_t v223;
  uint8x8_t v224;
  unint64_t v225;
  double **v226;
  double *v227;
  unint64_t v228;
  uint64_t v229;
  int8x8_t *v230;
  float64x2_t v231;
  float64x2_t v232;
  double v233;
  unint64_t v234;
  unint64_t v235;
  unint64_t v236;
  uint8x8_t v237;
  unint64_t v238;
  double **v239;
  double *v240;
  uint64_t v241;
  unint64_t v242;
  uint64_t v243;
  int8x8_t *v244;
  float64x2_t v245;
  float64x2_t v246;
  double v247;
  uint64_t *v248;
  unint64_t v249;
  unint64_t v250;
  float *v251;
  double *v252;
  double v253;
  int8x16_t *v254;
  unint64_t v255;
  unint64_t v256;
  float *v257;
  double *v258;
  double v259;
  int8x16_t *v260;
  BOOL v262;
  unint64_t *v263;
  unint64_t *v264;
  unint64_t v265;
  unint64_t v266;
  float *v267;
  double *v268;
  double v269;
  int8x8_t *v270;
  float64x2_t v271;
  float64x2_t v272;
  int8x16_t *v273;
  double v274;
  int8x8_t *v275;
  float64x2_t v276;
  float64x2_t v277;
  int8x16_t *v278;
  unint64_t v279;
  unint64_t v280;
  unint64_t v281;
  unint64_t v282;
  float64x2_t *v283;
  unint64_t v284;
  unint64_t v285;
  int8x8_t *v286;
  float *v287;
  int8x8_t v288;
  uint8x8_t v289;
  unint64_t v290;
  double **v291;
  double *v292;
  unint64_t v293;
  uint64_t v294;
  int8x8_t *v295;
  float64x2_t v296;
  float64x2_t v297;
  double v298;
  unint64_t v299;
  unint64_t v300;
  unint64_t v301;
  uint8x8_t v302;
  unint64_t v303;
  double **v304;
  double *v305;
  uint64_t v306;
  unint64_t v307;
  uint64_t v308;
  int8x8_t *v309;
  float64x2_t v310;
  float64x2_t v311;
  double v312;
  int64_t v313;
  int64_t v314;
  uint64_t v315;
  unint64_t *v316;
  int8x8_t *v317;
  unint64_t v318;
  unint64_t *v319;
  unint64_t *v320;
  unint64_t v321;
  float *v322;
  double *v323;
  double v324;
  int8x8_t *v325;
  float64x2_t v326;
  float64x2_t v327;
  double *v328;
  double v329;
  int8x8_t *v330;
  float64x2_t v331;
  float64x2_t v332;
  unint64_t *v333;
  unint64_t *v334;
  unint64_t v335;
  unint64_t v336;
  float *v337;
  double *v338;
  double v339;
  unint64_t v340;
  int8x8_t *v341;
  float64x2_t v342;
  float64x2_t v343;
  double v344;
  int8x8_t *v345;
  float64x2_t v346;
  float64x2_t v347;
  unint64_t v348;
  int8x8_t *v349;
  float64x2_t v350;
  float64x2_t v351;
  double v352;
  unint64_t *v353;
  uint64_t v354;
  unint64_t *v355;
  int8x8_t *v356;
  unint64_t v357;
  unint64_t *v358;
  unint64_t v359;
  float *v360;
  double *v361;
  double v362;
  int8x8_t *v363;
  float64x2_t v364;
  float64x2_t v365;
  double *v366;
  double v367;
  int8x8_t *v368;
  float64x2_t v369;
  float64x2_t v370;
  unint64_t v371;
  float *v372;
  double *v373;
  double v374;
  unint64_t v375;
  int8x8_t *v376;
  float64x2_t v377;
  float64x2_t v378;
  uint64_t *v379;
  uint64_t v380;
  uint64_t v382;
  int64_t v383;
  unint64_t *v384;
  int8x8_t *v385;
  float64x2_t v386;
  float64x2_t v387;
  double v388;
  unint64_t *v389;
  uint64_t v390;
  uint64_t v391;
  unint64_t v392;
  unint64_t v393;
  int8x8_t *v394;
  float *v395;
  int8x8_t v396;
  unint64_t v397;
  unint64_t v398;
  unint64_t v399;
  uint8x8_t v400;
  unint64_t v401;
  double **v402;
  double *v403;
  unint64_t v404;
  uint64_t v405;
  int8x8_t *v406;
  float64x2_t v407;
  float64x2_t v408;
  double v409;
  unint64_t v410;
  unint64_t v411;
  unint64_t v412;
  uint8x8_t v413;
  unint64_t v414;
  double **v415;
  double *v416;
  uint64_t v417;
  unint64_t v418;
  uint64_t v419;
  uint64_t v420;
  unint64_t v421;
  unint64_t *v422;
  unint64_t v423;
  unint64_t v424;
  float *v425;
  double *v426;
  double v427;
  int8x8_t *v428;
  float64x2_t v429;
  float64x2_t v430;
  double v431;
  int8x8_t *v432;
  float64x2_t v433;
  float64x2_t v434;
  unint64_t v435;
  float64x2_t *v436;
  int8x8_t *v437;
  float64x2_t v438;
  float64x2_t v439;
  double v440;
  unint64_t *v441;
  unint64_t v442;
  float *v443;
  double *v444;
  double v445;
  int8x8_t *v446;
  float64x2_t v447;
  float64x2_t v448;
  int8x16_t *v449;
  unint64_t *v450;
  unint64_t v451;
  unint64_t v452;
  unint64_t *v453;
  float *v454;
  double *v455;
  double v456;
  int8x8_t *v457;
  float64x2_t v458;
  float64x2_t v459;
  int8x8_t *v460;
  float64x2_t v461;
  float64x2_t v462;
  double v463;
  unint64_t v464;
  unint64_t v465;
  unint64_t v466;
  unint64_t v467;
  float64x2_t *v468;
  unint64_t *v469;
  unint64_t v470;
  unint64_t v471;
  int8x8_t *v472;
  float *v473;
  int8x8_t v474;
  uint8x8_t v475;
  unint64_t v476;
  double **v477;
  double *v478;
  unint64_t v479;
  uint64_t v480;
  int8x8_t *v481;
  float64x2_t v482;
  float64x2_t v483;
  double v484;
  unint64_t v485;
  unint64_t v486;
  unint64_t v487;
  uint8x8_t v488;
  unint64_t v489;
  double **v490;
  double *v491;
  uint64_t v492;
  unint64_t v493;
  uint64_t v494;
  int8x8_t *v495;
  float64x2_t v496;
  float64x2_t v497;
  double v498;
  int8x8_t *v499;
  float64x2_t v500;
  float64x2_t v501;
  int8x8_t *v502;
  float64x2_t v503;
  float64x2_t v504;
  double v505;
  unint64_t v506;
  int8x8_t *v507;
  float64x2_t v508;
  float64x2_t v509;
  int8x8_t *v510;
  float64x2_t v511;
  float64x2_t v512;
  double v513;
  unint64_t v514;
  unint64_t v515;
  unint64_t v516;
  float *v517;
  double *v518;
  double v519;
  int8x8_t *v520;
  float64x2_t v521;
  float64x2_t v522;
  double v523;
  int8x8_t *v524;
  float64x2_t v525;
  float64x2_t v526;
  uint64_t v527;
  unint64_t v528;
  unint64_t v529;
  float *v530;
  double *v531;
  double v532;
  int8x8_t *v533;
  float64x2_t v534;
  float64x2_t v535;
  double v536;
  int8x8_t *v537;
  float64x2_t v538;
  float64x2_t v539;
  unint64_t *v540;
  unint64_t *v541;
  uint64_t v542;
  int64_t v544;
  unint64_t *v545;
  float64x2_t *v546;
  uint64_t v547;
  uint64_t v548;
  unint64_t v549;
  int8x16_t *v550;
  unint64_t *v551;
  int64_t v552;
  int8x16_t *v553;
  unint64_t *v554;
  int64_t v555;
  uint64_t v556;
  int8x16_t *v557;
  uint64_t *v558;
  uint64_t *v559;
  int8x16_t *v560;
  unint64_t *v561;
  unint64_t v562;
  unint64_t v563;

  v7 = (int8x16_t *)result;
LABEL_2:
  v545 = &a2[-1].u64[1];
  v557 = a2;
  v540 = &a2[-2].u64[1];
  v541 = (unint64_t *)&a2[-1];
  v8 = v7;
  while (2)
  {
    v9 = v8;
    v10 = (char *)v557 - (char *)v8;
    v11 = ((char *)v557 - (char *)v8) >> 3;
    v560 = v8;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v249 = *v545;
        v250 = v8->i64[0];
        v562 = v8->i64[0];
        v563 = v249;
        v251 = (float *)&(*a3)[10];
        v252 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v251, v249);
        if (v252)
        {
          v253 = v252[3];
        }
        else
        {
          v499 = a3[1];
          v500 = vsubq_f64(*(float64x2_t *)v499[1].i8, *(float64x2_t *)(v249 + 600));
          v501 = vmulq_f64(v500, v500);
          v253 = v501.f64[0]
               + (*(double *)v499 - *(double *)(v249 + 592)) * (*(double *)v499 - *(double *)(v249 + 592))
               + v501.f64[1];
          *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v251, v249, &v563)+ 3) = v253;
        }
        result = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v251, v250);
        if (result)
        {
          if (v253 >= result[3])
            return result;
        }
        else
        {
          v502 = a3[1];
          v503 = vsubq_f64(*(float64x2_t *)v502[1].i8, *(float64x2_t *)(v250 + 600));
          v504 = vmulq_f64(v503, v503);
          v505 = v504.f64[0]
               + (*(double *)v502 - *(double *)(v250 + 592)) * (*(double *)v502 - *(double *)(v250 + 592))
               + v504.f64[1];
          result = (double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v251, v250, &v562);
          result[3] = v505;
          if (v253 >= v505)
            return result;
        }
        v506 = v8->i64[0];
        v8->i64[0] = *v545;
        *v545 = v506;
        return result;
      case 3:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,ARArrivalFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::{lambda(md::LabelBase const*,md::LabelBase const*)#1} &,md::LabelBase**>((unint64_t *)v8, &v8->u64[1], v545, a3);
      case 4:
        v254 = v8 + 1;
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,ARArrivalFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::{lambda(md::LabelBase const*,md::LabelBase const*)#1} &,md::LabelBase**>((unint64_t *)v8, &v8->u64[1], (unint64_t *)&v8[1], a3);
        v255 = *v545;
        v256 = v8[1].u64[0];
        v562 = v256;
        v563 = v255;
        v257 = (float *)&(*a3)[10];
        v258 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v257, v255);
        if (v258)
        {
          v259 = v258[3];
        }
        else
        {
          v507 = a3[1];
          v508 = vsubq_f64(*(float64x2_t *)v507[1].i8, *(float64x2_t *)(v255 + 600));
          v509 = vmulq_f64(v508, v508);
          v259 = v509.f64[0]
               + (*(double *)v507 - *(double *)(v255 + 592)) * (*(double *)v507 - *(double *)(v255 + 592))
               + v509.f64[1];
          *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v257, v255, &v563)+ 3) = v259;
        }
        result = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v257, v256);
        if (result)
        {
          if (v259 >= result[3])
            return result;
        }
        else
        {
          v510 = a3[1];
          v511 = vsubq_f64(*(float64x2_t *)v510[1].i8, *(float64x2_t *)(v256 + 600));
          v512 = vmulq_f64(v511, v511);
          v513 = v512.f64[0]
               + (*(double *)v510 - *(double *)(v256 + 592)) * (*(double *)v510 - *(double *)(v256 + 592))
               + v512.f64[1];
          result = (double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v257, v256, &v562);
          result[3] = v513;
          if (v259 >= v513)
            return result;
        }
        v514 = v254->i64[0];
        v254->i64[0] = *v545;
        *v545 = v514;
        v515 = v254->i64[0];
        v516 = v8->u64[1];
        v562 = v516;
        v563 = v515;
        v517 = (float *)&(*a3)[10];
        v518 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v517, v515);
        if (v518)
        {
          v519 = v518[3];
        }
        else
        {
          v520 = a3[1];
          v521 = vsubq_f64(*(float64x2_t *)v520[1].i8, *(float64x2_t *)(v515 + 600));
          v522 = vmulq_f64(v521, v521);
          v519 = v522.f64[0]
               + (*(double *)v520 - *(double *)(v515 + 592)) * (*(double *)v520 - *(double *)(v515 + 592))
               + v522.f64[1];
          *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v517, v515, &v563)+ 3) = v519;
        }
        result = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v517, v516);
        if (result)
        {
          v523 = result[3];
        }
        else
        {
          v524 = a3[1];
          v525 = vsubq_f64(*(float64x2_t *)v524[1].i8, *(float64x2_t *)(v516 + 600));
          v526 = vmulq_f64(v525, v525);
          v523 = v526.f64[0]
               + (*(double *)v524 - *(double *)(v516 + 592)) * (*(double *)v524 - *(double *)(v516 + 592))
               + v526.f64[1];
          result = (double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v517, v516, &v562);
          result[3] = v523;
        }
        if (v519 < v523)
        {
          v527 = v8->i64[1];
          v528 = v8[1].u64[0];
          v529 = v8->i64[0];
          v8->i64[1] = v528;
          v8[1].i64[0] = v527;
          v562 = v529;
          v563 = v528;
          v530 = (float *)&(*a3)[10];
          v531 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v530, v528);
          if (v531)
          {
            v532 = v531[3];
          }
          else
          {
            v533 = a3[1];
            v534 = vsubq_f64(*(float64x2_t *)v533[1].i8, *(float64x2_t *)(v528 + 600));
            v535 = vmulq_f64(v534, v534);
            v532 = v535.f64[0]
                 + (*(double *)v533 - *(double *)(v528 + 592)) * (*(double *)v533 - *(double *)(v528 + 592))
                 + v535.f64[1];
            *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v530, v528, &v563)+ 3) = v532;
          }
          result = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v530, v529);
          if (result)
          {
            v536 = result[3];
          }
          else
          {
            v537 = a3[1];
            v538 = vsubq_f64(*(float64x2_t *)v537[1].i8, *(float64x2_t *)(v529 + 600));
            v539 = vmulq_f64(v538, v538);
            v536 = v539.f64[0]
                 + (*(double *)v537 - *(double *)(v529 + 592)) * (*(double *)v537 - *(double *)(v529 + 592))
                 + v539.f64[1];
            result = (double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v530, v529, &v562);
            result[3] = v536;
          }
          if (v532 < v536)
            *v8 = vextq_s8(*v8, *v8, 8uLL);
        }
        return result;
      case 5:
        return std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,ARArrivalFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::{lambda(md::LabelBase const*,md::LabelBase const*)#1} &,md::LabelBase**>((unint64_t *)v8, &v8->u64[1], (unint64_t *)&v8[1], &v8[1].u64[1], v545, a3);
      default:
        if (v10 > 191)
        {
          if (!a4)
          {
            if (v8 != v557)
            {
              v542 = (char *)v557 - (char *)v8;
              v313 = (unint64_t)(v11 - 2) >> 1;
              v555 = v313;
              v548 = ((char *)v557 - (char *)v8) >> 3;
              do
              {
                v314 = v313;
                if (v555 >= v313)
                {
                  v315 = (2 * v313) | 1;
                  v316 = (unint64_t *)v9 + v315;
                  v317 = *a3;
                  if (2 * v314 + 2 < v11)
                  {
                    v318 = *v316;
                    v319 = (unint64_t *)v9 + v315;
                    v320 = v316 + 1;
                    v321 = v316[1];
                    v562 = v321;
                    v563 = v318;
                    v322 = (float *)&v317[10];
                    v323 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(&v317[10], v318);
                    if (v323)
                    {
                      v324 = v323[3];
                    }
                    else
                    {
                      v325 = a3[1];
                      v326 = vsubq_f64(*(float64x2_t *)v325[1].i8, *(float64x2_t *)(v318 + 600));
                      v327 = vmulq_f64(v326, v326);
                      v324 = v327.f64[0]
                           + (*(double *)v325 - *(double *)(v318 + 592)) * (*(double *)v325 - *(double *)(v318 + 592))
                           + v327.f64[1];
                      *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v322, v318, &v563)+ 3) = v324;
                    }
                    v328 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v322, v321);
                    if (v328)
                    {
                      v329 = v328[3];
                    }
                    else
                    {
                      v330 = a3[1];
                      v331 = vsubq_f64(*(float64x2_t *)v330[1].i8, *(float64x2_t *)(v321 + 600));
                      v332 = vmulq_f64(v331, v331);
                      v329 = v332.f64[0]
                           + (*(double *)v330 - *(double *)(v321 + 592)) * (*(double *)v330 - *(double *)(v321 + 592))
                           + v332.f64[1];
                      *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v322, v321, &v562)+ 3) = v329;
                    }
                    v9 = v560;
                    if (v324 >= v329)
                      v316 = v319;
                    else
                      v316 = v320;
                    if (v324 < v329)
                      v315 = 2 * v314 + 2;
                    v317 = *a3;
                  }
                  v333 = (unint64_t *)v9 + v314;
                  v334 = v316;
                  v335 = *v316;
                  v336 = *v333;
                  v562 = *v333;
                  v563 = v335;
                  v337 = (float *)&v317[10];
                  v338 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(&v317[10], v335);
                  if (v338)
                  {
                    v339 = v338[3];
                    v340 = v336;
                  }
                  else
                  {
                    v341 = a3[1];
                    v342 = vsubq_f64(*(float64x2_t *)v341[1].i8, *(float64x2_t *)(v335 + 600));
                    v343 = vmulq_f64(v342, v342);
                    v339 = v343.f64[0]
                         + (*(double *)v341 - *(double *)(v335 + 592)) * (*(double *)v341 - *(double *)(v335 + 592))
                         + v343.f64[1];
                    *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v337, v335, &v563)+ 3) = v339;
                    v340 = v562;
                  }
                  result = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v337, v340);
                  if (result)
                  {
                    v344 = result[3];
                  }
                  else
                  {
                    v345 = a3[1];
                    v346 = vsubq_f64(*(float64x2_t *)v345[1].i8, *(float64x2_t *)(v336 + 600));
                    v347 = vmulq_f64(v346, v346);
                    v344 = v347.f64[0]
                         + (*(double *)v345 - *(double *)(v336 + 592)) * (*(double *)v345 - *(double *)(v336 + 592))
                         + v347.f64[1];
                    result = (double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v337, v340, &v562);
                    result[3] = v344;
                  }
                  v9 = v560;
                  v11 = v548;
                  if (v339 >= v344)
                  {
                    v348 = *v333;
                    v544 = v314;
                    v546 = (float64x2_t *)(*v333 + 600);
                    do
                    {
                      v353 = v334;
                      *v333 = *v334;
                      if (v555 < v315)
                        break;
                      v354 = (2 * v315) | 1;
                      v355 = (unint64_t *)v9 + v354;
                      v315 = 2 * v315 + 2;
                      v356 = *a3;
                      if (v315 >= v11)
                      {
                        v315 = v354;
                      }
                      else
                      {
                        v357 = *v355;
                        v551 = (unint64_t *)v9 + v354;
                        v358 = v355 + 1;
                        v359 = v355[1];
                        v562 = v359;
                        v563 = v357;
                        v360 = (float *)&v356[10];
                        v361 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(&v356[10], v357);
                        if (v361)
                        {
                          v362 = v361[3];
                        }
                        else
                        {
                          v363 = a3[1];
                          v364 = vsubq_f64(*(float64x2_t *)v363[1].i8, *(float64x2_t *)(v357 + 600));
                          v365 = vmulq_f64(v364, v364);
                          v362 = v365.f64[0]
                               + (*(double *)v363 - *(double *)(v357 + 592))
                               * (*(double *)v363 - *(double *)(v357 + 592))
                               + v365.f64[1];
                          *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v360, v357, &v563)+ 3) = v362;
                        }
                        v366 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v360, v359);
                        if (v366)
                        {
                          v367 = v366[3];
                        }
                        else
                        {
                          v368 = a3[1];
                          v369 = vsubq_f64(*(float64x2_t *)v368[1].i8, *(float64x2_t *)(v359 + 600));
                          v370 = vmulq_f64(v369, v369);
                          v367 = v370.f64[0]
                               + (*(double *)v368 - *(double *)(v359 + 592))
                               * (*(double *)v368 - *(double *)(v359 + 592))
                               + v370.f64[1];
                          *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v360, v359, &v562)+ 3) = v367;
                        }
                        v355 = v551;
                        if (v362 >= v367)
                          v315 = v354;
                        else
                          v355 = v358;
                        v356 = *a3;
                        v11 = v548;
                      }
                      v334 = v355;
                      v371 = *v355;
                      v562 = v348;
                      v563 = v371;
                      v372 = (float *)&v356[10];
                      v373 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(&v356[10], v371);
                      if (v373)
                      {
                        v374 = v373[3];
                        v375 = v348;
                      }
                      else
                      {
                        v376 = a3[1];
                        v377 = vsubq_f64(*(float64x2_t *)v376[1].i8, *(float64x2_t *)(v371 + 600));
                        v378 = vmulq_f64(v377, v377);
                        v374 = v378.f64[0]
                             + (*(double *)v376 - *(double *)(v371 + 592)) * (*(double *)v376 - *(double *)(v371 + 592))
                             + v378.f64[1];
                        *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v372, v371, &v563)+ 3) = v374;
                        v375 = v562;
                      }
                      result = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v372, v375);
                      if (result)
                      {
                        v352 = result[3];
                      }
                      else
                      {
                        v349 = a3[1];
                        v350 = vsubq_f64(*(float64x2_t *)v349[1].i8, *v546);
                        v351 = vmulq_f64(v350, v350);
                        v352 = v351.f64[0]
                             + (*(double *)v349 - *(double *)(v348 + 592)) * (*(double *)v349 - *(double *)(v348 + 592))
                             + v351.f64[1];
                        result = (double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v372, v375, &v562);
                        result[3] = v352;
                      }
                      v9 = v560;
                      v333 = v353;
                    }
                    while (v374 >= v352);
                    *v353 = v348;
                    v314 = v544;
                  }
                }
                v313 = v314 - 1;
              }
              while (v314);
              v379 = (uint64_t *)v557;
              if (v542 >= 9)
              {
                v380 = (unint64_t)v542 >> 3;
                do
                {
                  v556 = v380;
                  v558 = v379;
                  v382 = 0;
                  v383 = (unint64_t)(v380 - 2) >> 1;
                  v384 = (unint64_t *)v9;
                  v549 = v9->i64[0];
                  v552 = v383;
                  do
                  {
                    v389 = &v384[v382 + 1];
                    v390 = (2 * v382) | 1;
                    v391 = 2 * v382 + 2;
                    if (v391 < v380)
                    {
                      v392 = v384[v382 + 2];
                      v393 = *v389;
                      v562 = v392;
                      v563 = v393;
                      v394 = *a3;
                      v395 = (float *)&(*a3)[10];
                      v396 = (*a3)[11];
                      if (v396)
                      {
                        v397 = 0x9DDFEA08EB382D69 * (((8 * v393) + 8) ^ HIDWORD(v393));
                        v398 = 0x9DDFEA08EB382D69 * (HIDWORD(v393) ^ (v397 >> 47) ^ v397);
                        v399 = 0x9DDFEA08EB382D69 * (v398 ^ (v398 >> 47));
                        v400 = (uint8x8_t)vcnt_s8(v396);
                        v400.i16[0] = vaddlv_u8(v400);
                        if (v400.u32[0] > 1uLL)
                        {
                          v401 = v399;
                          if (v399 >= *(_QWORD *)&v396)
                            v401 = v399 % *(_QWORD *)&v396;
                        }
                        else
                        {
                          v401 = v399 & (*(_QWORD *)&v396 - 1);
                        }
                        v402 = *(double ***)(*(_QWORD *)v395 + 8 * v401);
                        if (v402)
                        {
                          v403 = *v402;
                          if (v403)
                          {
                            if (v400.u32[0] < 2uLL)
                            {
                              while (1)
                              {
                                v405 = *((_QWORD *)v403 + 1);
                                if (v405 == v399)
                                {
                                  if (*((_QWORD *)v403 + 2) == v393)
                                    goto LABEL_445;
                                }
                                else if ((v405 & (*(_QWORD *)&v396 - 1)) != v401)
                                {
                                  goto LABEL_424;
                                }
                                v403 = *(double **)v403;
                                if (!v403)
                                  goto LABEL_424;
                              }
                            }
                            do
                            {
                              v404 = *((_QWORD *)v403 + 1);
                              if (v404 == v399)
                              {
                                if (*((_QWORD *)v403 + 2) == v393)
                                {
LABEL_445:
                                  v409 = v403[3];
                                  goto LABEL_425;
                                }
                              }
                              else
                              {
                                if (v404 >= *(_QWORD *)&v396)
                                  v404 %= *(_QWORD *)&v396;
                                if (v404 != v401)
                                  break;
                              }
                              v403 = *(double **)v403;
                            }
                            while (v403);
                          }
                        }
                      }
LABEL_424:
                      v406 = a3[1];
                      v407 = vsubq_f64(*(float64x2_t *)v406[1].i8, *(float64x2_t *)(v393 + 600));
                      v408 = vmulq_f64(v407, v407);
                      v409 = v408.f64[0]
                           + (*(double *)v406 - *(double *)(v393 + 592)) * (*(double *)v406 - *(double *)(v393 + 592))
                           + v408.f64[1];
                      result = (double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>((float *)&(*a3)[10], v393, &v563);
                      result[3] = v409;
                      v396 = v394[11];
                      if (v396)
                      {
LABEL_425:
                        v410 = 0x9DDFEA08EB382D69 * (((8 * v392) + 8) ^ HIDWORD(v392));
                        v411 = 0x9DDFEA08EB382D69 * (HIDWORD(v392) ^ (v410 >> 47) ^ v410);
                        v412 = 0x9DDFEA08EB382D69 * (v411 ^ (v411 >> 47));
                        v413 = (uint8x8_t)vcnt_s8(v396);
                        v413.i16[0] = vaddlv_u8(v413);
                        if (v413.u32[0] > 1uLL)
                        {
                          v414 = v412;
                          if (v412 >= *(_QWORD *)&v396)
                            v414 = v412 % *(_QWORD *)&v396;
                        }
                        else
                        {
                          v414 = v412 & (*(_QWORD *)&v396 - 1);
                        }
                        v415 = *(double ***)(*(_QWORD *)v395 + 8 * v414);
                        if (v415)
                        {
                          v416 = *v415;
                          if (v416)
                          {
                            if (v413.u32[0] < 2uLL)
                            {
                              v417 = *(_QWORD *)&v396 - 1;
                              while (1)
                              {
                                v419 = *((_QWORD *)v416 + 1);
                                if (v419 == v412)
                                {
                                  if (*((_QWORD *)v416 + 2) == v392)
                                    goto LABEL_446;
                                }
                                else if ((v419 & v417) != v414)
                                {
                                  goto LABEL_399;
                                }
                                v416 = *(double **)v416;
                                if (!v416)
                                  goto LABEL_399;
                              }
                            }
                            do
                            {
                              v418 = *((_QWORD *)v416 + 1);
                              if (v418 == v412)
                              {
                                if (*((_QWORD *)v416 + 2) == v392)
                                {
LABEL_446:
                                  v388 = v416[3];
                                  goto LABEL_400;
                                }
                              }
                              else
                              {
                                if (v418 >= *(_QWORD *)&v396)
                                  v418 %= *(_QWORD *)&v396;
                                if (v418 != v414)
                                  break;
                              }
                              v416 = *(double **)v416;
                            }
                            while (v416);
                          }
                        }
                      }
LABEL_399:
                      v385 = a3[1];
                      v386 = vsubq_f64(*(float64x2_t *)v385[1].i8, *(float64x2_t *)(v392 + 600));
                      v387 = vmulq_f64(v386, v386);
                      v388 = v387.f64[0]
                           + (*(double *)v385 - *(double *)(v392 + 592)) * (*(double *)v385 - *(double *)(v392 + 592))
                           + v387.f64[1];
                      result = (double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v395, v392, &v562);
                      result[3] = v388;
LABEL_400:
                      v9 = v560;
                      v383 = v552;
                      v380 = v556;
                      if (v409 < v388)
                      {
                        ++v389;
                        v390 = v391;
                      }
                    }
                    *v384 = *v389;
                    v384 = v389;
                    v382 = v390;
                  }
                  while (v390 <= v383);
                  v379 = v558 - 1;
                  if (v389 == (unint64_t *)(v558 - 1))
                  {
                    *v389 = v549;
                  }
                  else
                  {
                    *v389 = *v379;
                    *v379 = v549;
                    v420 = (char *)v389 - (char *)v9 + 8;
                    if (v420 >= 9)
                    {
                      v559 = v558 - 1;
                      v421 = (((unint64_t)v420 >> 3) - 2) >> 1;
                      v422 = (unint64_t *)v9 + v421;
                      v423 = *v422;
                      v424 = *v389;
                      v562 = *v389;
                      v563 = v423;
                      v425 = (float *)&(*a3)[10];
                      v426 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v425, v423);
                      if (v426)
                      {
                        v427 = v426[3];
                      }
                      else
                      {
                        v428 = a3[1];
                        v429 = vsubq_f64(*(float64x2_t *)v428[1].i8, *(float64x2_t *)(v423 + 600));
                        v430 = vmulq_f64(v429, v429);
                        v427 = v430.f64[0]
                             + (*(double *)v428 - *(double *)(v423 + 592)) * (*(double *)v428 - *(double *)(v423 + 592))
                             + v430.f64[1];
                        *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v425, v423, &v563)+ 3) = v427;
                      }
                      v379 = v559;
                      result = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v425, v424);
                      if (result)
                      {
                        v431 = result[3];
                      }
                      else
                      {
                        v432 = a3[1];
                        v433 = vsubq_f64(*(float64x2_t *)v432[1].i8, *(float64x2_t *)(v424 + 600));
                        v434 = vmulq_f64(v433, v433);
                        v431 = v434.f64[0]
                             + (*(double *)v432 - *(double *)(v424 + 592)) * (*(double *)v432 - *(double *)(v424 + 592))
                             + v434.f64[1];
                        result = (double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v425, v424, &v562);
                        result[3] = v431;
                      }
                      v9 = v560;
                      v380 = v556;
                      if (v427 < v431)
                      {
                        v435 = *v389;
                        v436 = (float64x2_t *)(*v389 + 600);
                        do
                        {
                          v441 = v422;
                          *v389 = *v422;
                          if (!v421)
                            break;
                          v421 = (v421 - 1) >> 1;
                          v422 = (unint64_t *)v9 + v421;
                          v442 = *v422;
                          v562 = v435;
                          v563 = v442;
                          v443 = (float *)&(*a3)[10];
                          v444 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v443, v442);
                          if (v444)
                          {
                            v445 = v444[3];
                          }
                          else
                          {
                            v446 = a3[1];
                            v447 = vsubq_f64(*(float64x2_t *)v446[1].i8, *(float64x2_t *)(v442 + 600));
                            v448 = vmulq_f64(v447, v447);
                            v445 = v448.f64[0]
                                 + (*(double *)v446 - *(double *)(v442 + 592))
                                 * (*(double *)v446 - *(double *)(v442 + 592))
                                 + v448.f64[1];
                            *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v443, v442, &v563)+ 3) = v445;
                          }
                          result = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v443, v435);
                          if (result)
                          {
                            v440 = result[3];
                          }
                          else
                          {
                            v437 = a3[1];
                            v438 = vsubq_f64(*(float64x2_t *)v437[1].i8, *v436);
                            v439 = vmulq_f64(v438, v438);
                            v440 = v439.f64[0]
                                 + (*(double *)v437 - *(double *)(v435 + 592))
                                 * (*(double *)v437 - *(double *)(v435 + 592))
                                 + v439.f64[1];
                            result = (double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v443, v435, &v562);
                            result[3] = v440;
                          }
                          v9 = v560;
                          v389 = v441;
                        }
                        while (v445 < v440);
                        *v441 = v435;
                        v380 = v556;
                        v379 = v559;
                      }
                    }
                  }
                }
                while (v380-- > 2);
              }
            }
            return result;
          }
          v12 = (unint64_t)v11 >> 1;
          v13 = (unint64_t *)v8 + v12;
          if ((unint64_t)v10 < 0x401)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,ARArrivalFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::{lambda(md::LabelBase const*,md::LabelBase const*)#1} &,md::LabelBase**>((unint64_t *)v8 + v12, (unint64_t *)v8, v545, a3);
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,ARArrivalFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::{lambda(md::LabelBase const*,md::LabelBase const*)#1} &,md::LabelBase**>((unint64_t *)v8, (unint64_t *)v8 + v12, v545, a3);
            v14 = v12;
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,ARArrivalFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::{lambda(md::LabelBase const*,md::LabelBase const*)#1} &,md::LabelBase**>(&v8->u64[1], &v8->u64[v14 - 1], v541, a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,ARArrivalFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::{lambda(md::LabelBase const*,md::LabelBase const*)#1} &,md::LabelBase**>((unint64_t *)&v8[1], &v8->u64[v14 + 1], v540, a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,ARArrivalFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::{lambda(md::LabelBase const*,md::LabelBase const*)#1} &,md::LabelBase**>(&v8->u64[v14 - 1], v13, &v8->u64[v14 + 1], a3);
            v15 = v8->i64[0];
            v8->i64[0] = v8->i64[v14];
            v8->i64[v14] = v15;
            v9 = v8;
          }
          v547 = a4 - 1;
          v16 = v9->i64[0];
          if ((a5 & 1) == 0)
          {
            v17 = v9[-1].u64[1];
            v562 = v9->i64[0];
            v563 = v17;
            v18 = (float *)&(*a3)[10];
            v19 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v18, v17);
            if (v19)
            {
              v20 = v19[3];
            }
            else
            {
              v21 = a3[1];
              v22 = vsubq_f64(*(float64x2_t *)v21[1].i8, *(float64x2_t *)(v17 + 600));
              v23 = vmulq_f64(v22, v22);
              v20 = v23.f64[0]
                  + (*(double *)v21 - *(double *)(v17 + 592)) * (*(double *)v21 - *(double *)(v17 + 592))
                  + v23.f64[1];
              *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v18, v17, &v563)+ 3) = v20;
            }
            v24 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v18, v16);
            if (v24)
            {
              v25 = v24[3];
            }
            else
            {
              v26 = a3[1];
              v27 = vsubq_f64(*(float64x2_t *)v26[1].i8, *(float64x2_t *)(v16 + 600));
              v28 = vmulq_f64(v27, v27);
              v25 = v28.f64[0]
                  + (*(double *)v26 - *(double *)(v16 + 592)) * (*(double *)v26 - *(double *)(v16 + 592))
                  + v28.f64[1];
              *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v18, v16, &v562)+ 3) = v25;
            }
            v16 = v9->i64[0];
            if (v20 >= v25)
            {
              v137 = *v545;
              v562 = *v545;
              v563 = v16;
              v138 = (float *)&(*a3)[10];
              v139 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v138, v16);
              if (v139)
              {
                v140 = v139[3];
              }
              else
              {
                v141 = a3[1];
                v142 = vsubq_f64(*(float64x2_t *)v141[1].i8, *(float64x2_t *)(v16 + 600));
                v143 = vmulq_f64(v142, v142);
                v140 = v143.f64[0]
                     + (*(double *)v141 - *(double *)(v16 + 592)) * (*(double *)v141 - *(double *)(v16 + 592))
                     + v143.f64[1];
                *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v138, v16, &v563)+ 3) = v140;
              }
              result = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v138, v137);
              if (result)
              {
                v144 = result[3];
              }
              else
              {
                v145 = a3[1];
                v146 = vsubq_f64(*(float64x2_t *)v145[1].i8, *(float64x2_t *)(v137 + 600));
                v147 = vmulq_f64(v146, v146);
                v144 = v147.f64[0]
                     + (*(double *)v145 - *(double *)(v137 + 592)) * (*(double *)v145 - *(double *)(v137 + 592))
                     + v147.f64[1];
                result = (double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v138, v137, &v562);
                result[3] = v144;
              }
              v148 = (float64x2_t *)(v16 + 600);
              if (v140 >= v144)
              {
                v161 = &v9->u64[1];
                do
                {
                  v8 = (int8x16_t *)v161;
                  if (v161 >= (unint64_t *)v557)
                    break;
                  v166 = *v161;
                  v562 = *v161;
                  v563 = v16;
                  v167 = (float *)&(*a3)[10];
                  v168 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v167, v16);
                  if (v168)
                  {
                    v169 = v168[3];
                  }
                  else
                  {
                    v170 = a3[1];
                    v171 = vsubq_f64(*(float64x2_t *)v170[1].i8, *v148);
                    v172 = vmulq_f64(v171, v171);
                    v169 = v172.f64[0]
                         + (*(double *)v170 - *(double *)(v16 + 592)) * (*(double *)v170 - *(double *)(v16 + 592))
                         + v172.f64[1];
                    *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v167, v16, &v563)+ 3) = v169;
                  }
                  result = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v167, v166);
                  if (result)
                  {
                    v165 = result[3];
                  }
                  else
                  {
                    v162 = a3[1];
                    v163 = vsubq_f64(*(float64x2_t *)v162[1].i8, *(float64x2_t *)(v166 + 600));
                    v164 = vmulq_f64(v163, v163);
                    v165 = v164.f64[0]
                         + (*(double *)v162 - *(double *)(v166 + 592)) * (*(double *)v162 - *(double *)(v166 + 592))
                         + v164.f64[1];
                    result = (double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v167, v166, &v562);
                    result[3] = v165;
                  }
                  v161 = &v8->u64[1];
                }
                while (v169 >= v165);
              }
              else
              {
                v8 = v9;
                do
                {
                  v154 = v8->u64[1];
                  v8 = (int8x16_t *)((char *)v8 + 8);
                  v153 = v154;
                  v562 = v154;
                  v563 = v16;
                  v155 = (float *)&(*a3)[10];
                  v156 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v155, v16);
                  if (v156)
                  {
                    v157 = v156[3];
                  }
                  else
                  {
                    v158 = a3[1];
                    v159 = vsubq_f64(*(float64x2_t *)v158[1].i8, *v148);
                    v160 = vmulq_f64(v159, v159);
                    v157 = v160.f64[0]
                         + (*(double *)v158 - *(double *)(v16 + 592)) * (*(double *)v158 - *(double *)(v16 + 592))
                         + v160.f64[1];
                    *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v155, v16, &v563)+ 3) = v157;
                  }
                  result = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v155, v153);
                  if (result)
                  {
                    v152 = result[3];
                  }
                  else
                  {
                    v149 = a3[1];
                    v150 = vsubq_f64(*(float64x2_t *)v149[1].i8, *(float64x2_t *)(v153 + 600));
                    v151 = vmulq_f64(v150, v150);
                    v152 = v151.f64[0]
                         + (*(double *)v149 - *(double *)(v153 + 592)) * (*(double *)v149 - *(double *)(v153 + 592))
                         + v151.f64[1];
                    result = (double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v155, v153, &v562);
                    result[3] = v152;
                  }
                }
                while (v157 >= v152);
              }
              v173 = v557;
              if (v8 < v557)
              {
                v173 = v557;
                do
                {
                  while (1)
                  {
                    v179 = v173[-1].u64[1];
                    v173 = (int8x16_t *)((char *)v173 - 8);
                    v178 = v179;
                    v562 = v179;
                    v563 = v16;
                    v180 = (float *)&(*a3)[10];
                    v181 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v180, v16);
                    if (v181)
                    {
                      v182 = v181[3];
                    }
                    else
                    {
                      v183 = a3[1];
                      v184 = vsubq_f64(*(float64x2_t *)v183[1].i8, *v148);
                      v185 = vmulq_f64(v184, v184);
                      v182 = v185.f64[0]
                           + (*(double *)v183 - *(double *)(v16 + 592)) * (*(double *)v183 - *(double *)(v16 + 592))
                           + v185.f64[1];
                      *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v180, v16, &v563)+ 3) = v182;
                    }
                    result = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v180, v178);
                    if (result)
                      break;
                    v174 = a3[1];
                    v175 = vsubq_f64(*(float64x2_t *)v174[1].i8, *(float64x2_t *)(v178 + 600));
                    v176 = vmulq_f64(v175, v175);
                    v177 = v176.f64[0]
                         + (*(double *)v174 - *(double *)(v178 + 592)) * (*(double *)v174 - *(double *)(v178 + 592))
                         + v176.f64[1];
                    result = (double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v180, v178, &v562);
                    result[3] = v177;
                    if (v182 >= v177)
                      goto LABEL_173;
                  }
                }
                while (v182 < result[3]);
              }
LABEL_173:
              if (v8 < v173)
              {
                v186 = 0x9DDFEA08EB382D69 * (((8 * v16) + 8) ^ HIDWORD(v16));
                v187 = 0x9DDFEA08EB382D69 * (HIDWORD(v16) ^ (v186 >> 47) ^ v186);
                v188 = 0x9DDFEA08EB382D69 * (v187 ^ (v187 >> 47));
                do
                {
                  v189 = v8->i64[0];
                  v8->i64[0] = v173->i64[0];
                  v173->i64[0] = v189;
                  do
                  {
                    while (1)
                    {
                      v191 = v8->u64[1];
                      v8 = (int8x16_t *)((char *)v8 + 8);
                      v190 = v191;
                      v562 = v191;
                      v563 = v16;
                      v192 = *a3;
                      v193 = (float *)&(*a3)[10];
                      v194 = (*a3)[11];
                      if (!*(_QWORD *)&v194)
                        goto LABEL_197;
                      v195 = (uint8x8_t)vcnt_s8(v194);
                      v195.i16[0] = vaddlv_u8(v195);
                      if (v195.u32[0] > 1uLL)
                      {
                        v196 = v188;
                        if (v188 >= *(_QWORD *)&v194)
                          v196 = v188 % *(_QWORD *)&v194;
                      }
                      else
                      {
                        v196 = (*(_QWORD *)&v194 - 1) & v188;
                      }
                      v197 = *(double ***)(*(_QWORD *)v193 + 8 * v196);
                      if (!v197 || (v198 = *v197) == 0)
                      {
LABEL_197:
                        v201 = a3[1];
                        v202 = vsubq_f64(*(float64x2_t *)v201[1].i8, *v148);
                        v203 = vmulq_f64(v202, v202);
                        v204 = v203.f64[0]
                             + (*(double *)v201 - *(double *)(v16 + 592)) * (*(double *)v201 - *(double *)(v16 + 592))
                             + v203.f64[1];
                        result = (double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>((float *)&(*a3)[10], v16, &v563);
                        result[3] = v204;
                        v194 = v192[11];
                        if (v194)
                          goto LABEL_198;
                        goto LABEL_219;
                      }
                      if (v195.u32[0] < 2uLL)
                      {
                        while (1)
                        {
                          v200 = *((_QWORD *)v198 + 1);
                          if (v200 == v188)
                          {
                            if (*((_QWORD *)v198 + 2) == v16)
                              goto LABEL_218;
                          }
                          else if ((v200 & (*(_QWORD *)&v194 - 1)) != v196)
                          {
                            goto LABEL_197;
                          }
                          v198 = *(double **)v198;
                          if (!v198)
                            goto LABEL_197;
                        }
                      }
                      while (1)
                      {
                        v199 = *((_QWORD *)v198 + 1);
                        if (v199 == v188)
                          break;
                        if (v199 >= *(_QWORD *)&v194)
                          v199 %= *(_QWORD *)&v194;
                        if (v199 != v196)
                          goto LABEL_197;
LABEL_187:
                        v198 = *(double **)v198;
                        if (!v198)
                          goto LABEL_197;
                      }
                      if (*((_QWORD *)v198 + 2) != v16)
                        goto LABEL_187;
LABEL_218:
                      v204 = v198[3];
LABEL_198:
                      v205 = 0x9DDFEA08EB382D69 * (((8 * v190) + 8) ^ HIDWORD(v190));
                      v206 = 0x9DDFEA08EB382D69 * (HIDWORD(v190) ^ (v205 >> 47) ^ v205);
                      v207 = 0x9DDFEA08EB382D69 * (v206 ^ (v206 >> 47));
                      v208 = (uint8x8_t)vcnt_s8(v194);
                      v208.i16[0] = vaddlv_u8(v208);
                      if (v208.u32[0] > 1uLL)
                      {
                        v209 = v207;
                        if (v207 >= *(_QWORD *)&v194)
                          v209 = v207 % *(_QWORD *)&v194;
                      }
                      else
                      {
                        v209 = v207 & (*(_QWORD *)&v194 - 1);
                      }
                      v210 = *(double ***)(*(_QWORD *)v193 + 8 * v209);
                      if (v210)
                      {
                        v211 = *v210;
                        if (v211)
                          break;
                      }
LABEL_219:
                      v215 = a3[1];
                      v216 = vsubq_f64(*(float64x2_t *)v215[1].i8, *(float64x2_t *)(v190 + 600));
                      v217 = vmulq_f64(v216, v216);
                      v218 = v217.f64[0]
                           + (*(double *)v215 - *(double *)(v190 + 592)) * (*(double *)v215 - *(double *)(v190 + 592))
                           + v217.f64[1];
                      result = (double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v193, v190, &v562);
                      result[3] = v218;
                      if (v204 < v218)
                        goto LABEL_222;
                    }
                    if (v208.u32[0] < 2uLL)
                    {
                      v212 = *(_QWORD *)&v194 - 1;
                      while (1)
                      {
                        v214 = *((_QWORD *)v211 + 1);
                        if (v214 == v207)
                        {
                          if (*((_QWORD *)v211 + 2) == v190)
                            goto LABEL_221;
                        }
                        else if ((v214 & v212) != v209)
                        {
                          goto LABEL_219;
                        }
                        v211 = *(double **)v211;
                        if (!v211)
                          goto LABEL_219;
                      }
                    }
                    while (1)
                    {
                      v213 = *((_QWORD *)v211 + 1);
                      if (v213 == v207)
                        break;
                      if (v213 >= *(_QWORD *)&v194)
                        v213 %= *(_QWORD *)&v194;
                      if (v213 != v209)
                        goto LABEL_219;
LABEL_207:
                      v211 = *(double **)v211;
                      if (!v211)
                        goto LABEL_219;
                    }
                    if (*((_QWORD *)v211 + 2) != v190)
                      goto LABEL_207;
LABEL_221:
                    ;
                  }
                  while (v204 >= v211[3]);
LABEL_222:
                  while (2)
                  {
                    while (1)
                    {
                      v220 = v173[-1].u64[1];
                      v173 = (int8x16_t *)((char *)v173 - 8);
                      v219 = v220;
                      v562 = v220;
                      v563 = v16;
                      v221 = *a3;
                      v222 = (float *)&(*a3)[10];
                      v223 = (*a3)[11];
                      if (v223)
                      {
                        v224 = (uint8x8_t)vcnt_s8(v223);
                        v224.i16[0] = vaddlv_u8(v224);
                        if (v224.u32[0] > 1uLL)
                        {
                          v225 = v188;
                          if (v188 >= *(_QWORD *)&v223)
                            v225 = v188 % *(_QWORD *)&v223;
                        }
                        else
                        {
                          v225 = (*(_QWORD *)&v223 - 1) & v188;
                        }
                        v226 = *(double ***)(*(_QWORD *)v222 + 8 * v225);
                        if (v226)
                        {
                          v227 = *v226;
                          if (v227)
                            break;
                        }
                      }
LABEL_242:
                      v230 = a3[1];
                      v231 = vsubq_f64(*(float64x2_t *)v230[1].i8, *v148);
                      v232 = vmulq_f64(v231, v231);
                      v233 = v232.f64[0]
                           + (*(double *)v230 - *(double *)(v16 + 592)) * (*(double *)v230 - *(double *)(v16 + 592))
                           + v232.f64[1];
                      result = (double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>((float *)&(*a3)[10], v16, &v563);
                      result[3] = v233;
                      v223 = v221[11];
                      if (v223)
                        goto LABEL_243;
LABEL_264:
                      v244 = a3[1];
                      v245 = vsubq_f64(*(float64x2_t *)v244[1].i8, *(float64x2_t *)(v219 + 600));
                      v246 = vmulq_f64(v245, v245);
                      v247 = v246.f64[0]
                           + (*(double *)v244 - *(double *)(v219 + 592)) * (*(double *)v244 - *(double *)(v219 + 592))
                           + v246.f64[1];
                      result = (double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v222, v219, &v562);
                      result[3] = v247;
                      if (v233 >= v247)
                        goto LABEL_175;
                    }
                    if (v224.u32[0] < 2uLL)
                    {
                      while (1)
                      {
                        v229 = *((_QWORD *)v227 + 1);
                        if (v229 == v188)
                        {
                          if (*((_QWORD *)v227 + 2) == v16)
                            goto LABEL_263;
                        }
                        else if ((v229 & (*(_QWORD *)&v223 - 1)) != v225)
                        {
                          goto LABEL_242;
                        }
                        v227 = *(double **)v227;
                        if (!v227)
                          goto LABEL_242;
                      }
                    }
                    while (2)
                    {
                      v228 = *((_QWORD *)v227 + 1);
                      if (v228 != v188)
                      {
                        if (v228 >= *(_QWORD *)&v223)
                          v228 %= *(_QWORD *)&v223;
                        if (v228 != v225)
                          goto LABEL_242;
                        goto LABEL_232;
                      }
                      if (*((_QWORD *)v227 + 2) != v16)
                      {
LABEL_232:
                        v227 = *(double **)v227;
                        if (!v227)
                          goto LABEL_242;
                        continue;
                      }
                      break;
                    }
LABEL_263:
                    v233 = v227[3];
LABEL_243:
                    v234 = 0x9DDFEA08EB382D69 * (((8 * v219) + 8) ^ HIDWORD(v219));
                    v235 = 0x9DDFEA08EB382D69 * (HIDWORD(v219) ^ (v234 >> 47) ^ v234);
                    v236 = 0x9DDFEA08EB382D69 * (v235 ^ (v235 >> 47));
                    v237 = (uint8x8_t)vcnt_s8(v223);
                    v237.i16[0] = vaddlv_u8(v237);
                    if (v237.u32[0] > 1uLL)
                    {
                      v238 = v236;
                      if (v236 >= *(_QWORD *)&v223)
                        v238 = v236 % *(_QWORD *)&v223;
                    }
                    else
                    {
                      v238 = v236 & (*(_QWORD *)&v223 - 1);
                    }
                    v239 = *(double ***)(*(_QWORD *)v222 + 8 * v238);
                    if (!v239)
                      goto LABEL_264;
                    v240 = *v239;
                    if (!v240)
                      goto LABEL_264;
                    if (v237.u32[0] < 2uLL)
                    {
                      v241 = *(_QWORD *)&v223 - 1;
                      while (1)
                      {
                        v243 = *((_QWORD *)v240 + 1);
                        if (v243 == v236)
                        {
                          if (*((_QWORD *)v240 + 2) == v219)
                            goto LABEL_266;
                        }
                        else if ((v243 & v241) != v238)
                        {
                          goto LABEL_264;
                        }
                        v240 = *(double **)v240;
                        if (!v240)
                          goto LABEL_264;
                      }
                    }
                    while (2)
                    {
                      v242 = *((_QWORD *)v240 + 1);
                      if (v242 != v236)
                      {
                        if (v242 >= *(_QWORD *)&v223)
                          v242 %= *(_QWORD *)&v223;
                        if (v242 != v238)
                          goto LABEL_264;
                        goto LABEL_252;
                      }
                      if (*((_QWORD *)v240 + 2) != v219)
                      {
LABEL_252:
                        v240 = *(double **)v240;
                        if (!v240)
                          goto LABEL_264;
                        continue;
                      }
                      break;
                    }
LABEL_266:
                    if (v233 < v240[3])
                      continue;
                    break;
                  }
LABEL_175:
                  ;
                }
                while (v8 < v173);
              }
              v248 = &v8[-1].i64[1];
              if (&v8[-1].u64[1] != (unint64_t *)v560)
                v560->i64[0] = *v248;
              a5 = 0;
              *v248 = v16;
              a4 = v547;
              continue;
            }
          }
          v29 = (float64x2_t *)(v16 + 600);
          v30 = v560;
          do
          {
            while (1)
            {
              v36 = v30->u64[1];
              v30 = (int8x16_t *)((char *)v30 + 8);
              v35 = v36;
              v562 = v16;
              v563 = v36;
              v37 = (float *)&(*a3)[10];
              v38 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v37, v36);
              if (v38)
              {
                v39 = v38[3];
              }
              else
              {
                v40 = a3[1];
                v41 = vsubq_f64(*(float64x2_t *)v40[1].i8, *(float64x2_t *)(v35 + 600));
                v42 = vmulq_f64(v41, v41);
                v39 = v42.f64[0]
                    + (*(double *)v40 - *(double *)(v35 + 592)) * (*(double *)v40 - *(double *)(v35 + 592))
                    + v42.f64[1];
                *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v37, v35, &v563)+ 3) = v39;
              }
              v43 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v37, v16);
              if (v43)
                break;
              v31 = a3[1];
              v32 = vsubq_f64(*(float64x2_t *)v31[1].i8, *v29);
              v33 = vmulq_f64(v32, v32);
              v34 = v33.f64[0]
                  + (*(double *)v31 - *(double *)(v16 + 592)) * (*(double *)v31 - *(double *)(v16 + 592))
                  + v33.f64[1];
              *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v37, v16, &v562)+ 3) = v34;
              if (v39 >= v34)
                goto LABEL_24;
            }
          }
          while (v39 < v43[3]);
LABEL_24:
          v44 = (int8x16_t *)((char *)v30 - 8);
          v45 = v557;
          if (&v30[-1].u64[1] == (unint64_t *)v560)
          {
            v45 = v557;
            do
            {
              if (v30 >= v45)
                break;
              v128 = v45[-1].u64[1];
              v45 = (int8x16_t *)((char *)v45 - 8);
              v127 = v128;
              v562 = v16;
              v563 = v128;
              v129 = (float *)&(*a3)[10];
              v130 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v129, v128);
              if (v130)
              {
                v131 = v130[3];
              }
              else
              {
                v132 = a3[1];
                v133 = vsubq_f64(*(float64x2_t *)v132[1].i8, *(float64x2_t *)(v127 + 600));
                v134 = vmulq_f64(v133, v133);
                v131 = v134.f64[0]
                     + (*(double *)v132 - *(double *)(v127 + 592)) * (*(double *)v132 - *(double *)(v127 + 592))
                     + v134.f64[1];
                *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v129, v127, &v563)+ 3) = v131;
              }
              v135 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v129, v16);
              if (v135)
              {
                v126 = v135[3];
              }
              else
              {
                v123 = a3[1];
                v124 = vsubq_f64(*(float64x2_t *)v123[1].i8, *v29);
                v125 = vmulq_f64(v124, v124);
                v126 = v125.f64[0]
                     + (*(double *)v123 - *(double *)(v16 + 592)) * (*(double *)v123 - *(double *)(v16 + 592))
                     + v125.f64[1];
                *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v129, v16, &v562)+ 3) = v126;
              }
            }
            while (v131 >= v126);
          }
          else
          {
            do
            {
              while (1)
              {
                v47 = v45[-1].u64[1];
                v45 = (int8x16_t *)((char *)v45 - 8);
                v46 = v47;
                v562 = v16;
                v563 = v47;
                v48 = (float *)&(*a3)[10];
                v49 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v48, v47);
                if (v49)
                {
                  v50 = v49[3];
                }
                else
                {
                  v51 = a3[1];
                  v52 = vsubq_f64(*(float64x2_t *)v51[1].i8, *(float64x2_t *)(v46 + 600));
                  v53 = vmulq_f64(v52, v52);
                  v50 = v53.f64[0]
                      + (*(double *)v51 - *(double *)(v46 + 592)) * (*(double *)v51 - *(double *)(v46 + 592))
                      + v53.f64[1];
                  *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v48, v46, &v563)+ 3) = v50;
                }
                v54 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v48, v16);
                if (!v54)
                  break;
                if (v50 < v54[3])
                  goto LABEL_32;
              }
              v55 = a3[1];
              v56 = vsubq_f64(*(float64x2_t *)v55[1].i8, *v29);
              v57 = vmulq_f64(v56, v56);
              v58 = v57.f64[0]
                  + (*(double *)v55 - *(double *)(v16 + 592)) * (*(double *)v55 - *(double *)(v16 + 592))
                  + v57.f64[1];
              *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v48, v16, &v562)+ 3) = v58;
            }
            while (v50 >= v58);
          }
LABEL_32:
          v550 = v45;
          v553 = v30;
          if (v30 < v45)
          {
            v59 = 0x9DDFEA08EB382D69 * (((8 * v16) + 8) ^ HIDWORD(v16));
            v60 = 0x9DDFEA08EB382D69 * (HIDWORD(v16) ^ (v59 >> 47) ^ v59);
            v61 = 0x9DDFEA08EB382D69 * (v60 ^ (v60 >> 47));
            v63 = (uint64_t *)v45;
            v62 = (uint64_t *)v30;
            do
            {
              v64 = *v62;
              *v62 = *v63;
              *v63 = v64;
              do
              {
                while (1)
                {
                  v44 = (int8x16_t *)v62;
                  v66 = v62[1];
                  ++v62;
                  v65 = v66;
                  v562 = v16;
                  v563 = v66;
                  v67 = *a3;
                  v68 = (float *)&(*a3)[10];
                  v69 = (*a3)[11];
                  if (!*(_QWORD *)&v69)
                    goto LABEL_56;
                  v70 = 0x9DDFEA08EB382D69 * (((8 * v65) + 8) ^ HIDWORD(v65));
                  v71 = 0x9DDFEA08EB382D69 * (HIDWORD(v65) ^ (v70 >> 47) ^ v70);
                  v72 = 0x9DDFEA08EB382D69 * (v71 ^ (v71 >> 47));
                  v73 = (uint8x8_t)vcnt_s8(v69);
                  v73.i16[0] = vaddlv_u8(v73);
                  if (v73.u32[0] > 1uLL)
                  {
                    v74 = v72;
                    if (v72 >= *(_QWORD *)&v69)
                      v74 = v72 % *(_QWORD *)&v69;
                  }
                  else
                  {
                    v74 = v72 & (*(_QWORD *)&v69 - 1);
                  }
                  v75 = *(double ***)(*(_QWORD *)v68 + 8 * v74);
                  if (!v75 || (v76 = *v75) == 0)
                  {
LABEL_56:
                    v79 = a3[1];
                    v80 = vsubq_f64(*(float64x2_t *)v79[1].i8, *(float64x2_t *)(v65 + 600));
                    v81 = vmulq_f64(v80, v80);
                    v82 = v81.f64[0]
                        + (*(double *)v79 - *(double *)(v65 + 592)) * (*(double *)v79 - *(double *)(v65 + 592))
                        + v81.f64[1];
                    *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>((float *)&(*a3)[10], v65, &v563)+ 3) = v82;
                    v69 = v67[11];
                    if (v69)
                      goto LABEL_57;
                    goto LABEL_78;
                  }
                  if (v73.u32[0] < 2uLL)
                  {
                    while (1)
                    {
                      v78 = *((_QWORD *)v76 + 1);
                      if (v78 == v72)
                      {
                        if (*((_QWORD *)v76 + 2) == v65)
                          goto LABEL_77;
                      }
                      else if ((v78 & (*(_QWORD *)&v69 - 1)) != v74)
                      {
                        goto LABEL_56;
                      }
                      v76 = *(double **)v76;
                      if (!v76)
                        goto LABEL_56;
                    }
                  }
                  while (1)
                  {
                    v77 = *((_QWORD *)v76 + 1);
                    if (v77 == v72)
                      break;
                    if (v77 >= *(_QWORD *)&v69)
                      v77 %= *(_QWORD *)&v69;
                    if (v77 != v74)
                      goto LABEL_56;
LABEL_46:
                    v76 = *(double **)v76;
                    if (!v76)
                      goto LABEL_56;
                  }
                  if (*((_QWORD *)v76 + 2) != v65)
                    goto LABEL_46;
LABEL_77:
                  v82 = v76[3];
LABEL_57:
                  v83 = (uint8x8_t)vcnt_s8(v69);
                  v83.i16[0] = vaddlv_u8(v83);
                  if (v83.u32[0] > 1uLL)
                  {
                    v84 = v61;
                    if (v61 >= *(_QWORD *)&v69)
                      v84 = v61 % *(_QWORD *)&v69;
                  }
                  else
                  {
                    v84 = v61 & (*(_QWORD *)&v69 - 1);
                  }
                  v85 = *(double ***)(*(_QWORD *)v68 + 8 * v84);
                  if (v85)
                  {
                    v86 = *v85;
                    if (v86)
                      break;
                  }
LABEL_78:
                  v90 = a3[1];
                  v91 = vsubq_f64(*(float64x2_t *)v90[1].i8, *v29);
                  v92 = vmulq_f64(v91, v91);
                  v93 = v92.f64[0]
                      + (*(double *)v90 - *(double *)(v16 + 592)) * (*(double *)v90 - *(double *)(v16 + 592))
                      + v92.f64[1];
                  *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v68, v16, &v562)+ 3) = v93;
                  if (v82 >= v93)
                    goto LABEL_81;
                }
                if (v83.u32[0] < 2uLL)
                {
                  v87 = *(_QWORD *)&v69 - 1;
                  while (1)
                  {
                    v89 = *((_QWORD *)v86 + 1);
                    if (v89 == v61)
                    {
                      if (*((_QWORD *)v86 + 2) == v16)
                        goto LABEL_80;
                    }
                    else if ((v89 & v87) != v84)
                    {
                      goto LABEL_78;
                    }
                    v86 = *(double **)v86;
                    if (!v86)
                      goto LABEL_78;
                  }
                }
                while (1)
                {
                  v88 = *((_QWORD *)v86 + 1);
                  if (v88 == v61)
                    break;
                  if (v88 >= *(_QWORD *)&v69)
                    v88 %= *(_QWORD *)&v69;
                  if (v88 != v84)
                    goto LABEL_78;
LABEL_66:
                  v86 = *(double **)v86;
                  if (!v86)
                    goto LABEL_78;
                }
                if (*((_QWORD *)v86 + 2) != v16)
                  goto LABEL_66;
LABEL_80:
                ;
              }
              while (v82 < v86[3]);
LABEL_81:
              while (2)
              {
                while (1)
                {
                  v95 = *--v63;
                  v94 = v95;
                  v562 = v16;
                  v563 = v95;
                  v96 = *a3;
                  v97 = (float *)&(*a3)[10];
                  v98 = (*a3)[11];
                  if (v98)
                  {
                    v99 = 0x9DDFEA08EB382D69 * (((8 * v94) + 8) ^ HIDWORD(v94));
                    v100 = 0x9DDFEA08EB382D69 * (HIDWORD(v94) ^ (v99 >> 47) ^ v99);
                    v101 = 0x9DDFEA08EB382D69 * (v100 ^ (v100 >> 47));
                    v102 = (uint8x8_t)vcnt_s8(v98);
                    v102.i16[0] = vaddlv_u8(v102);
                    if (v102.u32[0] > 1uLL)
                    {
                      v103 = v101;
                      if (v101 >= *(_QWORD *)&v98)
                        v103 = v101 % *(_QWORD *)&v98;
                    }
                    else
                    {
                      v103 = v101 & (*(_QWORD *)&v98 - 1);
                    }
                    v104 = *(double ***)(*(_QWORD *)v97 + 8 * v103);
                    if (v104)
                    {
                      v105 = *v104;
                      if (v105)
                        break;
                    }
                  }
LABEL_101:
                  v108 = a3[1];
                  v109 = vsubq_f64(*(float64x2_t *)v108[1].i8, *(float64x2_t *)(v94 + 600));
                  v110 = vmulq_f64(v109, v109);
                  v111 = v110.f64[0]
                       + (*(double *)v108 - *(double *)(v94 + 592)) * (*(double *)v108 - *(double *)(v94 + 592))
                       + v110.f64[1];
                  *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>((float *)&(*a3)[10], v94, &v563)+ 3) = v111;
                  v98 = v96[11];
                  if (v98)
                    goto LABEL_102;
LABEL_123:
                  v119 = a3[1];
                  v120 = vsubq_f64(*(float64x2_t *)v119[1].i8, *v29);
                  v121 = vmulq_f64(v120, v120);
                  v122 = v121.f64[0]
                       + (*(double *)v119 - *(double *)(v16 + 592)) * (*(double *)v119 - *(double *)(v16 + 592))
                       + v121.f64[1];
                  *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v97, v16, &v562)+ 3) = v122;
                  if (v111 < v122)
                    goto LABEL_34;
                }
                if (v102.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v107 = *((_QWORD *)v105 + 1);
                    if (v107 == v101)
                    {
                      if (*((_QWORD *)v105 + 2) == v94)
                        goto LABEL_122;
                    }
                    else if ((v107 & (*(_QWORD *)&v98 - 1)) != v103)
                    {
                      goto LABEL_101;
                    }
                    v105 = *(double **)v105;
                    if (!v105)
                      goto LABEL_101;
                  }
                }
                while (2)
                {
                  v106 = *((_QWORD *)v105 + 1);
                  if (v106 != v101)
                  {
                    if (v106 >= *(_QWORD *)&v98)
                      v106 %= *(_QWORD *)&v98;
                    if (v106 != v103)
                      goto LABEL_101;
                    goto LABEL_91;
                  }
                  if (*((_QWORD *)v105 + 2) != v94)
                  {
LABEL_91:
                    v105 = *(double **)v105;
                    if (!v105)
                      goto LABEL_101;
                    continue;
                  }
                  break;
                }
LABEL_122:
                v111 = v105[3];
LABEL_102:
                v112 = (uint8x8_t)vcnt_s8(v98);
                v112.i16[0] = vaddlv_u8(v112);
                if (v112.u32[0] > 1uLL)
                {
                  v113 = v61;
                  if (v61 >= *(_QWORD *)&v98)
                    v113 = v61 % *(_QWORD *)&v98;
                }
                else
                {
                  v113 = v61 & (*(_QWORD *)&v98 - 1);
                }
                v114 = *(double ***)(*(_QWORD *)v97 + 8 * v113);
                if (!v114)
                  goto LABEL_123;
                v115 = *v114;
                if (!v115)
                  goto LABEL_123;
                if (v112.u32[0] < 2uLL)
                {
                  v116 = *(_QWORD *)&v98 - 1;
                  while (1)
                  {
                    v118 = *((_QWORD *)v115 + 1);
                    if (v118 == v61)
                    {
                      if (*((_QWORD *)v115 + 2) == v16)
                        goto LABEL_125;
                    }
                    else if ((v118 & v116) != v113)
                    {
                      goto LABEL_123;
                    }
                    v115 = *(double **)v115;
                    if (!v115)
                      goto LABEL_123;
                  }
                }
                while (2)
                {
                  v117 = *((_QWORD *)v115 + 1);
                  if (v117 != v61)
                  {
                    if (v117 >= *(_QWORD *)&v98)
                      v117 %= *(_QWORD *)&v98;
                    if (v117 != v113)
                      goto LABEL_123;
                    goto LABEL_111;
                  }
                  if (*((_QWORD *)v115 + 2) != v16)
                  {
LABEL_111:
                    v115 = *(double **)v115;
                    if (!v115)
                      goto LABEL_123;
                    continue;
                  }
                  break;
                }
LABEL_125:
                if (v111 >= v115[3])
                  continue;
                break;
              }
LABEL_34:
              ;
            }
            while (v62 < v63);
          }
          v7 = v560;
          if (v44 != v560)
            v560->i64[0] = v44->i64[0];
          v44->i64[0] = v16;
          a4 = v547;
          if (v553 < v550)
            goto LABEL_140;
          v136 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,ARArrivalFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::{lambda(md::LabelBase const*,md::LabelBase const*)#1} &,md::LabelBase**>(v560, v44, a3);
          v8 = (int8x16_t *)&v44->u64[1];
          result = (double *)std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,ARArrivalFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::{lambda(md::LabelBase const*,md::LabelBase const*)#1} &,md::LabelBase**>((int8x16_t *)&v44->u64[1], v557, a3);
          if (!(_DWORD)result)
          {
            if (v136)
              continue;
LABEL_140:
            result = (double *)std::__introsort<std::_ClassicAlgPolicy,ARArrivalFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::{lambda(md::LabelBase const*,md::LabelBase const*)#1} &,md::LabelBase**,false>(v560, v44, a3, v547, a5 & 1);
            a5 = 0;
            v8 = (int8x16_t *)&v44->u64[1];
            continue;
          }
          a2 = v44;
          if (v136)
            return result;
          goto LABEL_2;
        }
        v260 = (int8x16_t *)&v8->u64[1];
        v262 = v8 == v557 || v260 == v557;
        if ((a5 & 1) == 0)
        {
          if (v262)
            return result;
          while (1)
          {
            v450 = (unint64_t *)v260;
            v451 = v9->i64[0];
            v452 = v9->u64[1];
            v453 = (unint64_t *)v9;
            v562 = v9->i64[0];
            v563 = v452;
            v454 = (float *)&(*a3)[10];
            v455 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v454, v452);
            if (v455)
            {
              v456 = v455[3];
            }
            else
            {
              v457 = a3[1];
              v458 = vsubq_f64(*(float64x2_t *)v457[1].i8, *(float64x2_t *)(v452 + 600));
              v459 = vmulq_f64(v458, v458);
              v456 = v459.f64[0]
                   + (*(double *)v457 - *(double *)(v452 + 592)) * (*(double *)v457 - *(double *)(v452 + 592))
                   + v459.f64[1];
              *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v454, v452, &v563)+ 3) = v456;
            }
            v449 = v557;
            result = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v454, v451);
            if (!result)
              break;
            if (v456 < result[3])
              goto LABEL_477;
LABEL_469:
            v260 = (int8x16_t *)(v450 + 1);
            v9 = (int8x16_t *)v450;
            if (v450 + 1 == (unint64_t *)v449)
              return result;
          }
          v460 = a3[1];
          v461 = vsubq_f64(*(float64x2_t *)v460[1].i8, *(float64x2_t *)(v451 + 600));
          v462 = vmulq_f64(v461, v461);
          v463 = v462.f64[0]
               + (*(double *)v460 - *(double *)(v451 + 592)) * (*(double *)v460 - *(double *)(v451 + 592))
               + v462.f64[1];
          result = (double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v454, v451, &v562);
          result[3] = v463;
          if (v456 >= v463)
            goto LABEL_469;
LABEL_477:
          v464 = *v450;
          v465 = HIDWORD(*v450);
          v466 = 0x9DDFEA08EB382D69 * ((8 * *v450 + 8) ^ v465);
          v467 = 0x9DDFEA08EB382D69
               * ((0x9DDFEA08EB382D69 * (v465 ^ (v466 >> 47) ^ v466)) ^ ((0x9DDFEA08EB382D69
                                                                          * (v465 ^ (v466 >> 47) ^ v466)) >> 47));
          v468 = (float64x2_t *)(*v450 + 600);
          v561 = v450;
LABEL_478:
          v469 = v450;
          v450 = v453;
          *v469 = *v453;
          v471 = *--v453;
          v470 = v471;
          v562 = v471;
          v563 = v464;
          v472 = *a3;
          v473 = (float *)&(*a3)[10];
          v474 = (*a3)[11];
          if (v474)
          {
            v475 = (uint8x8_t)vcnt_s8(v474);
            v475.i16[0] = vaddlv_u8(v475);
            if (v475.u32[0] > 1uLL)
            {
              v476 = v467;
              if (v467 >= *(_QWORD *)&v474)
                v476 = v467 % *(_QWORD *)&v474;
            }
            else
            {
              v476 = (*(_QWORD *)&v474 - 1) & v467;
            }
            v477 = *(double ***)(*(_QWORD *)v473 + 8 * v476);
            if (v477)
            {
              v478 = *v477;
              if (v478)
              {
                if (v475.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v480 = *((_QWORD *)v478 + 1);
                    if (v480 == v467)
                    {
                      if (*((_QWORD *)v478 + 2) == v464)
                        goto LABEL_519;
                    }
                    else if ((v480 & (*(_QWORD *)&v474 - 1)) != v476)
                    {
                      goto LABEL_498;
                    }
                    v478 = *(double **)v478;
                    if (!v478)
                      goto LABEL_498;
                  }
                }
                do
                {
                  v479 = *((_QWORD *)v478 + 1);
                  if (v479 == v467)
                  {
                    if (*((_QWORD *)v478 + 2) == v464)
                    {
LABEL_519:
                      v484 = v478[3];
LABEL_499:
                      v485 = 0x9DDFEA08EB382D69 * (((8 * v470) + 8) ^ HIDWORD(v470));
                      v486 = 0x9DDFEA08EB382D69 * (HIDWORD(v470) ^ (v485 >> 47) ^ v485);
                      v487 = 0x9DDFEA08EB382D69 * (v486 ^ (v486 >> 47));
                      v488 = (uint8x8_t)vcnt_s8(v474);
                      v488.i16[0] = vaddlv_u8(v488);
                      if (v488.u32[0] > 1uLL)
                      {
                        v489 = v487;
                        if (v487 >= *(_QWORD *)&v474)
                          v489 = v487 % *(_QWORD *)&v474;
                      }
                      else
                      {
                        v489 = v487 & (*(_QWORD *)&v474 - 1);
                      }
                      v490 = *(double ***)(*(_QWORD *)v473 + 8 * v489);
                      if (v490)
                      {
                        v491 = *v490;
                        if (v491)
                        {
                          if (v488.u32[0] < 2uLL)
                          {
                            v492 = *(_QWORD *)&v474 - 1;
                            while (1)
                            {
                              v494 = *((_QWORD *)v491 + 1);
                              if (v494 == v487)
                              {
                                if (*((_QWORD *)v491 + 2) == v470)
                                  goto LABEL_522;
                              }
                              else if ((v494 & v492) != v489)
                              {
                                goto LABEL_520;
                              }
                              v491 = *(double **)v491;
                              if (!v491)
                                goto LABEL_520;
                            }
                          }
                          do
                          {
                            v493 = *((_QWORD *)v491 + 1);
                            if (v493 == v487)
                            {
                              if (*((_QWORD *)v491 + 2) == v470)
                              {
LABEL_522:
                                if (v484 >= v491[3])
                                {
LABEL_468:
                                  *v450 = v464;
                                  v449 = v557;
                                  v450 = v561;
                                  goto LABEL_469;
                                }
                                goto LABEL_478;
                              }
                            }
                            else
                            {
                              if (v493 >= *(_QWORD *)&v474)
                                v493 %= *(_QWORD *)&v474;
                              if (v493 != v489)
                                break;
                            }
                            v491 = *(double **)v491;
                          }
                          while (v491);
                        }
                      }
LABEL_520:
                      v495 = a3[1];
                      v496 = vsubq_f64(*(float64x2_t *)v495[1].i8, *(float64x2_t *)(v470 + 600));
                      v497 = vmulq_f64(v496, v496);
                      v498 = v497.f64[0]
                           + (*(double *)v495 - *(double *)(v470 + 592)) * (*(double *)v495 - *(double *)(v470 + 592))
                           + v497.f64[1];
                      result = (double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v473, v470, &v562);
                      result[3] = v498;
                      if (v484 >= v498)
                        goto LABEL_468;
                      goto LABEL_478;
                    }
                  }
                  else
                  {
                    if (v479 >= *(_QWORD *)&v474)
                      v479 %= *(_QWORD *)&v474;
                    if (v479 != v476)
                      break;
                  }
                  v478 = *(double **)v478;
                }
                while (v478);
              }
            }
          }
LABEL_498:
          v481 = a3[1];
          v482 = vsubq_f64(*(float64x2_t *)v481[1].i8, *v468);
          v483 = vmulq_f64(v482, v482);
          v484 = v483.f64[0]
               + (*(double *)v481 - *(double *)(v464 + 592)) * (*(double *)v481 - *(double *)(v464 + 592))
               + v483.f64[1];
          result = (double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>((float *)&(*a3)[10], v464, &v563);
          result[3] = v484;
          v474 = v472[11];
          if (v474)
            goto LABEL_499;
          goto LABEL_520;
        }
        if (!v262)
        {
          v263 = (unint64_t *)v8;
          while (1)
          {
            v264 = (unint64_t *)v260;
            v265 = *v263;
            v266 = v263[1];
            v562 = *v263;
            v563 = v266;
            v267 = (float *)&(*a3)[10];
            v268 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v267, v266);
            if (v268)
            {
              v269 = v268[3];
            }
            else
            {
              v270 = a3[1];
              v271 = vsubq_f64(*(float64x2_t *)v270[1].i8, *(float64x2_t *)(v266 + 600));
              v272 = vmulq_f64(v271, v271);
              v269 = v272.f64[0]
                   + (*(double *)v270 - *(double *)(v266 + 592)) * (*(double *)v270 - *(double *)(v266 + 592))
                   + v272.f64[1];
              *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v267, v266, &v563)+ 3) = v269;
            }
            v273 = v557;
            result = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v267, v265);
            if (result)
            {
              v274 = result[3];
            }
            else
            {
              v275 = a3[1];
              v276 = vsubq_f64(*(float64x2_t *)v275[1].i8, *(float64x2_t *)(v265 + 600));
              v277 = vmulq_f64(v276, v276);
              v274 = v277.f64[0]
                   + (*(double *)v275 - *(double *)(v265 + 592)) * (*(double *)v275 - *(double *)(v265 + 592))
                   + v277.f64[1];
              result = (double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v267, v265, &v562);
              result[3] = v274;
            }
            v278 = v560;
            if (v269 < v274)
              break;
LABEL_292:
            v260 = (int8x16_t *)(v264 + 1);
            v263 = v264;
            if (v264 + 1 == (unint64_t *)v273)
              return result;
          }
          v279 = *v264;
          v280 = HIDWORD(*v264);
          v281 = 0x9DDFEA08EB382D69 * ((8 * *v264 + 8) ^ v280);
          v282 = 0x9DDFEA08EB382D69
               * ((0x9DDFEA08EB382D69 * (v280 ^ (v281 >> 47) ^ v281)) ^ ((0x9DDFEA08EB382D69
                                                                          * (v280 ^ (v281 >> 47) ^ v281)) >> 47));
          v283 = (float64x2_t *)(*v264 + 600);
          v554 = v264;
LABEL_301:
          *v264 = *v263;
          if (v263 == (unint64_t *)v278)
          {
            v264 = (unint64_t *)v278;
            goto LABEL_291;
          }
          v264 = v263;
          v285 = *--v263;
          v284 = v285;
          v562 = v285;
          v563 = v279;
          v286 = *a3;
          v287 = (float *)&(*a3)[10];
          v288 = (*a3)[11];
          if (!*(_QWORD *)&v288)
            goto LABEL_322;
          v289 = (uint8x8_t)vcnt_s8(v288);
          v289.i16[0] = vaddlv_u8(v289);
          if (v289.u32[0] > 1uLL)
          {
            v290 = v282;
            if (v282 >= *(_QWORD *)&v288)
              v290 = v282 % *(_QWORD *)&v288;
          }
          else
          {
            v290 = (*(_QWORD *)&v288 - 1) & v282;
          }
          v291 = *(double ***)(*(_QWORD *)v287 + 8 * v290);
          if (!v291 || (v292 = *v291) == 0)
          {
LABEL_322:
            v295 = a3[1];
            v296 = vsubq_f64(*(float64x2_t *)v295[1].i8, *v283);
            v297 = vmulq_f64(v296, v296);
            v298 = v297.f64[0]
                 + (*(double *)v295 - *(double *)(v279 + 592)) * (*(double *)v295 - *(double *)(v279 + 592))
                 + v297.f64[1];
            result = (double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>((float *)&(*a3)[10], v279, &v563);
            result[3] = v298;
            v288 = v286[11];
            if (v288)
              goto LABEL_323;
LABEL_344:
            v309 = a3[1];
            v310 = vsubq_f64(*(float64x2_t *)v309[1].i8, *(float64x2_t *)(v284 + 600));
            v311 = vmulq_f64(v310, v310);
            v312 = v311.f64[0]
                 + (*(double *)v309 - *(double *)(v284 + 592)) * (*(double *)v309 - *(double *)(v284 + 592))
                 + v311.f64[1];
            result = (double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v287, v284, &v562);
            result[3] = v312;
            goto LABEL_345;
          }
          if (v289.u32[0] < 2uLL)
          {
            while (1)
            {
              v294 = *((_QWORD *)v292 + 1);
              if (v294 == v282)
              {
                if (*((_QWORD *)v292 + 2) == v279)
                  goto LABEL_343;
              }
              else if ((v294 & (*(_QWORD *)&v288 - 1)) != v290)
              {
                goto LABEL_322;
              }
              v292 = *(double **)v292;
              if (!v292)
                goto LABEL_322;
            }
          }
          while (1)
          {
            v293 = *((_QWORD *)v292 + 1);
            if (v293 == v282)
            {
              if (*((_QWORD *)v292 + 2) == v279)
              {
LABEL_343:
                v298 = v292[3];
LABEL_323:
                v299 = 0x9DDFEA08EB382D69 * (((8 * v284) + 8) ^ HIDWORD(v284));
                v300 = 0x9DDFEA08EB382D69 * (HIDWORD(v284) ^ (v299 >> 47) ^ v299);
                v301 = 0x9DDFEA08EB382D69 * (v300 ^ (v300 >> 47));
                v302 = (uint8x8_t)vcnt_s8(v288);
                v302.i16[0] = vaddlv_u8(v302);
                if (v302.u32[0] > 1uLL)
                {
                  v303 = v301;
                  if (v301 >= *(_QWORD *)&v288)
                    v303 = v301 % *(_QWORD *)&v288;
                }
                else
                {
                  v303 = v301 & (*(_QWORD *)&v288 - 1);
                }
                v304 = *(double ***)(*(_QWORD *)v287 + 8 * v303);
                if (!v304)
                  goto LABEL_344;
                v305 = *v304;
                if (!v305)
                  goto LABEL_344;
                if (v302.u32[0] < 2uLL)
                {
                  v306 = *(_QWORD *)&v288 - 1;
                  while (1)
                  {
                    v308 = *((_QWORD *)v305 + 1);
                    if (v308 == v301)
                    {
                      if (*((_QWORD *)v305 + 2) == v284)
                        goto LABEL_347;
                    }
                    else if ((v308 & v306) != v303)
                    {
                      goto LABEL_344;
                    }
                    v305 = *(double **)v305;
                    if (!v305)
                      goto LABEL_344;
                  }
                }
                while (2)
                {
                  v307 = *((_QWORD *)v305 + 1);
                  if (v307 != v301)
                  {
                    if (v307 >= *(_QWORD *)&v288)
                      v307 %= *(_QWORD *)&v288;
                    if (v307 != v303)
                      goto LABEL_344;
                    goto LABEL_332;
                  }
                  if (*((_QWORD *)v305 + 2) != v284)
                  {
LABEL_332:
                    v305 = *(double **)v305;
                    if (!v305)
                      goto LABEL_344;
                    continue;
                  }
                  break;
                }
LABEL_347:
                v312 = v305[3];
LABEL_345:
                v273 = v557;
                v278 = v560;
                if (v298 >= v312)
                {
LABEL_291:
                  *v264 = v279;
                  v264 = v554;
                  goto LABEL_292;
                }
                goto LABEL_301;
              }
            }
            else
            {
              if (v293 >= *(_QWORD *)&v288)
                v293 %= *(_QWORD *)&v288;
              if (v293 != v290)
                goto LABEL_322;
            }
            v292 = *(double **)v292;
            if (!v292)
              goto LABEL_322;
          }
        }
        return result;
    }
  }
}

double *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,ARArrivalFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::{lambda(md::LabelBase const*,md::LabelBase const*)#1} &,md::LabelBase**>(unint64_t *a1, unint64_t *a2, unint64_t *a3, _QWORD *a4)
{
  unint64_t v8;
  unint64_t v9;
  float *v10;
  double *v11;
  double v12;
  uint64_t v13;
  float64x2_t v14;
  float64x2_t v15;
  double *v16;
  double v17;
  uint64_t v18;
  float64x2_t v19;
  float64x2_t v20;
  unint64_t v21;
  unint64_t v22;
  float *v23;
  double *v24;
  double v25;
  uint64_t v26;
  float64x2_t v27;
  float64x2_t v28;
  double *result;
  double v30;
  unint64_t v31;
  uint64_t v32;
  float64x2_t v33;
  float64x2_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  float *v38;
  double *v39;
  double v40;
  unint64_t v41;
  float *v42;
  double *v43;
  double v44;
  uint64_t v45;
  float64x2_t v46;
  float64x2_t v47;
  uint64_t v48;
  float64x2_t v49;
  float64x2_t v50;
  uint64_t v51;
  float64x2_t v52;
  float64x2_t v53;
  double v54;
  unint64_t v55;
  uint64_t v56;
  float64x2_t v57;
  float64x2_t v58;
  double v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;

  v8 = *a2;
  v9 = *a1;
  v61 = *a1;
  v62 = v8;
  v10 = (float *)(*a4 + 80);
  v11 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v10, v8);
  if (v11)
  {
    v12 = v11[3];
  }
  else
  {
    v13 = a4[1];
    v14 = vsubq_f64(*(float64x2_t *)(v13 + 8), *(float64x2_t *)(v8 + 600));
    v15 = vmulq_f64(v14, v14);
    v12 = v15.f64[0] + (*(double *)v13 - *(double *)(v8 + 592)) * (*(double *)v13 - *(double *)(v8 + 592)) + v15.f64[1];
    *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v10, v8, &v62)+ 3) = v12;
  }
  v16 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v10, v9);
  if (v16)
  {
    v17 = v16[3];
  }
  else
  {
    v18 = a4[1];
    v19 = vsubq_f64(*(float64x2_t *)(v18 + 8), *(float64x2_t *)(v9 + 600));
    v20 = vmulq_f64(v19, v19);
    v17 = v20.f64[0] + (*(double *)v18 - *(double *)(v9 + 592)) * (*(double *)v18 - *(double *)(v9 + 592)) + v20.f64[1];
    *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v10, v9, &v61)+ 3) = v17;
  }
  v21 = *a3;
  v22 = *a2;
  v61 = *a2;
  v62 = v21;
  v23 = (float *)(*a4 + 80);
  v24 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v23, v21);
  if (v24)
  {
    v25 = v24[3];
  }
  else
  {
    v26 = a4[1];
    v27 = vsubq_f64(*(float64x2_t *)(v26 + 8), *(float64x2_t *)(v21 + 600));
    v28 = vmulq_f64(v27, v27);
    v25 = v28.f64[0]
        + (*(double *)v26 - *(double *)(v21 + 592)) * (*(double *)v26 - *(double *)(v21 + 592))
        + v28.f64[1];
    *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v23, v21, &v62)+ 3) = v25;
  }
  result = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v23, v22);
  if (result)
  {
    v30 = result[3];
    if (v12 < v17)
      goto LABEL_12;
LABEL_15:
    if (v25 >= v30)
      return result;
    v35 = *a2;
    *a2 = *a3;
    *a3 = v35;
    v36 = *a2;
    v37 = *a1;
    v61 = *a1;
    v62 = v36;
    v38 = (float *)(*a4 + 80);
    v39 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v38, v36);
    if (v39)
    {
      v40 = v39[3];
    }
    else
    {
      v45 = a4[1];
      v46 = vsubq_f64(*(float64x2_t *)(v45 + 8), *(float64x2_t *)(v36 + 600));
      v47 = vmulq_f64(v46, v46);
      v40 = v47.f64[0]
          + (*(double *)v45 - *(double *)(v36 + 592)) * (*(double *)v45 - *(double *)(v36 + 592))
          + v47.f64[1];
      *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v38, v36, &v62)+ 3) = v40;
    }
    result = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v38, v37);
    if (result)
    {
      if (v40 >= result[3])
        return result;
    }
    else
    {
      v51 = a4[1];
      v52 = vsubq_f64(*(float64x2_t *)(v51 + 8), *(float64x2_t *)(v37 + 600));
      v53 = vmulq_f64(v52, v52);
      v54 = v53.f64[0]
          + (*(double *)v51 - *(double *)(v37 + 592)) * (*(double *)v51 - *(double *)(v37 + 592))
          + v53.f64[1];
      result = (double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v38, v37, &v61);
      result[3] = v54;
      if (v40 >= v54)
        return result;
    }
    v55 = *a1;
    *a1 = *a2;
    *a2 = v55;
    return result;
  }
  v32 = a4[1];
  v33 = vsubq_f64(*(float64x2_t *)(v32 + 8), *(float64x2_t *)(v22 + 600));
  v34 = vmulq_f64(v33, v33);
  v30 = v34.f64[0] + (*(double *)v32 - *(double *)(v22 + 592)) * (*(double *)v32 - *(double *)(v22 + 592)) + v34.f64[1];
  result = (double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v23, v22, &v61);
  result[3] = v30;
  if (v12 >= v17)
    goto LABEL_15;
LABEL_12:
  v31 = *a1;
  if (v25 < v30)
  {
    *a1 = *a3;
    *a3 = v31;
    return result;
  }
  *a1 = *a2;
  *a2 = v31;
  v41 = *a3;
  v61 = v31;
  v62 = v41;
  v42 = (float *)(*a4 + 80);
  v43 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v42, v41);
  if (v43)
  {
    v44 = v43[3];
  }
  else
  {
    v48 = a4[1];
    v49 = vsubq_f64(*(float64x2_t *)(v48 + 8), *(float64x2_t *)(v41 + 600));
    v50 = vmulq_f64(v49, v49);
    v44 = v50.f64[0]
        + (*(double *)v48 - *(double *)(v41 + 592)) * (*(double *)v48 - *(double *)(v41 + 592))
        + v50.f64[1];
    *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v42, v41, &v62)+ 3) = v44;
  }
  result = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v42, v31);
  if (!result)
  {
    v56 = a4[1];
    v57 = vsubq_f64(*(float64x2_t *)(v56 + 8), *(float64x2_t *)(v31 + 600));
    v58 = vmulq_f64(v57, v57);
    v59 = v58.f64[0]
        + (*(double *)v56 - *(double *)(v31 + 592)) * (*(double *)v56 - *(double *)(v31 + 592))
        + v58.f64[1];
    result = (double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v42, v31, &v61);
    result[3] = v59;
    if (v44 >= v59)
      return result;
    goto LABEL_31;
  }
  if (v44 < result[3])
  {
LABEL_31:
    v60 = *a2;
    *a2 = *a3;
    *a3 = v60;
  }
  return result;
}

double *std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,ARArrivalFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::{lambda(md::LabelBase const*,md::LabelBase const*)#1} &,md::LabelBase**>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5, _QWORD *a6)
{
  unint64_t v12;
  unint64_t v13;
  float *v14;
  double *v15;
  double v16;
  uint64_t v17;
  float64x2_t v18;
  float64x2_t v19;
  double *v20;
  uint64_t v21;
  float64x2_t v22;
  float64x2_t v23;
  double v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  float *v28;
  double *v29;
  double v30;
  uint64_t v31;
  float64x2_t v32;
  float64x2_t v33;
  double *v34;
  uint64_t v35;
  float64x2_t v36;
  float64x2_t v37;
  double v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  float *v42;
  double *v43;
  double v44;
  uint64_t v45;
  float64x2_t v46;
  float64x2_t v47;
  double *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  float *v52;
  double *v53;
  double v54;
  uint64_t v55;
  float64x2_t v56;
  float64x2_t v57;
  double *result;
  uint64_t v59;
  float64x2_t v60;
  float64x2_t v61;
  double v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  float *v66;
  double *v67;
  double v68;
  uint64_t v69;
  float64x2_t v70;
  float64x2_t v71;
  uint64_t v72;
  float64x2_t v73;
  float64x2_t v74;
  double v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  float *v79;
  double *v80;
  double v81;
  uint64_t v82;
  float64x2_t v83;
  float64x2_t v84;
  double v85;
  uint64_t v86;
  float64x2_t v87;
  float64x2_t v88;
  uint64_t v89;
  float64x2_t v90;
  float64x2_t v91;
  double v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  float *v96;
  double *v97;
  double v98;
  uint64_t v99;
  float64x2_t v100;
  float64x2_t v101;
  unint64_t v102;
  uint64_t v103;
  float64x2_t v104;
  float64x2_t v105;
  double v106;
  unint64_t v107;
  unint64_t v108;

  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,ARArrivalFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::{lambda(md::LabelBase const*,md::LabelBase const*)#1} &,md::LabelBase**>(a1, a2, a3, a6);
  v12 = *a4;
  v13 = *a3;
  v107 = *a3;
  v108 = v12;
  v14 = (float *)(*a6 + 80);
  v15 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v14, v12);
  if (v15)
  {
    v16 = v15[3];
  }
  else
  {
    v17 = a6[1];
    v18 = vsubq_f64(*(float64x2_t *)(v17 + 8), *(float64x2_t *)(v12 + 600));
    v19 = vmulq_f64(v18, v18);
    v16 = v19.f64[0]
        + (*(double *)v17 - *(double *)(v12 + 592)) * (*(double *)v17 - *(double *)(v12 + 592))
        + v19.f64[1];
    *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v14, v12, &v108)+ 3) = v16;
  }
  v20 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v14, v13);
  if (v20)
  {
    if (v16 >= v20[3])
      goto LABEL_21;
  }
  else
  {
    v21 = a6[1];
    v22 = vsubq_f64(*(float64x2_t *)(v21 + 8), *(float64x2_t *)(v13 + 600));
    v23 = vmulq_f64(v22, v22);
    v24 = v23.f64[0]
        + (*(double *)v21 - *(double *)(v13 + 592)) * (*(double *)v21 - *(double *)(v13 + 592))
        + v23.f64[1];
    *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v14, v13, &v107)+ 3) = v24;
    if (v16 >= v24)
      goto LABEL_21;
  }
  v25 = *a3;
  *a3 = *a4;
  *a4 = v25;
  v26 = *a3;
  v27 = *a2;
  v107 = *a2;
  v108 = v26;
  v28 = (float *)(*a6 + 80);
  v29 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v28, v26);
  if (v29)
  {
    v30 = v29[3];
  }
  else
  {
    v31 = a6[1];
    v32 = vsubq_f64(*(float64x2_t *)(v31 + 8), *(float64x2_t *)(v26 + 600));
    v33 = vmulq_f64(v32, v32);
    v30 = v33.f64[0]
        + (*(double *)v31 - *(double *)(v26 + 592)) * (*(double *)v31 - *(double *)(v26 + 592))
        + v33.f64[1];
    *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v28, v26, &v108)+ 3) = v30;
  }
  v34 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v28, v27);
  if (v34)
  {
    if (v30 >= v34[3])
      goto LABEL_21;
  }
  else
  {
    v35 = a6[1];
    v36 = vsubq_f64(*(float64x2_t *)(v35 + 8), *(float64x2_t *)(v27 + 600));
    v37 = vmulq_f64(v36, v36);
    v38 = v37.f64[0]
        + (*(double *)v35 - *(double *)(v27 + 592)) * (*(double *)v35 - *(double *)(v27 + 592))
        + v37.f64[1];
    *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v28, v27, &v107)+ 3) = v38;
    if (v30 >= v38)
      goto LABEL_21;
  }
  v39 = *a2;
  *a2 = *a3;
  *a3 = v39;
  v40 = *a2;
  v41 = *a1;
  v107 = *a1;
  v108 = v40;
  v42 = (float *)(*a6 + 80);
  v43 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v42, v40);
  if (v43)
  {
    v44 = v43[3];
  }
  else
  {
    v45 = a6[1];
    v46 = vsubq_f64(*(float64x2_t *)(v45 + 8), *(float64x2_t *)(v40 + 600));
    v47 = vmulq_f64(v46, v46);
    v44 = v47.f64[0]
        + (*(double *)v45 - *(double *)(v40 + 592)) * (*(double *)v45 - *(double *)(v40 + 592))
        + v47.f64[1];
    *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v42, v40, &v108)+ 3) = v44;
  }
  v48 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v42, v41);
  if (v48)
  {
    if (v44 >= v48[3])
      goto LABEL_21;
    goto LABEL_20;
  }
  v82 = a6[1];
  v83 = vsubq_f64(*(float64x2_t *)(v82 + 8), *(float64x2_t *)(v41 + 600));
  v84 = vmulq_f64(v83, v83);
  v85 = v84.f64[0] + (*(double *)v82 - *(double *)(v41 + 592)) * (*(double *)v82 - *(double *)(v41 + 592)) + v84.f64[1];
  *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v42, v41, &v107)+ 3) = v85;
  if (v44 < v85)
  {
LABEL_20:
    v49 = *a1;
    *a1 = *a2;
    *a2 = v49;
  }
LABEL_21:
  v50 = *a5;
  v51 = *a4;
  v107 = *a4;
  v108 = v50;
  v52 = (float *)(*a6 + 80);
  v53 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v52, v50);
  if (v53)
  {
    v54 = v53[3];
  }
  else
  {
    v55 = a6[1];
    v56 = vsubq_f64(*(float64x2_t *)(v55 + 8), *(float64x2_t *)(v50 + 600));
    v57 = vmulq_f64(v56, v56);
    v54 = v57.f64[0]
        + (*(double *)v55 - *(double *)(v50 + 592)) * (*(double *)v55 - *(double *)(v50 + 592))
        + v57.f64[1];
    *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v52, v50, &v108)+ 3) = v54;
  }
  result = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v52, v51);
  if (result)
  {
    if (v54 >= result[3])
      return result;
  }
  else
  {
    v59 = a6[1];
    v60 = vsubq_f64(*(float64x2_t *)(v59 + 8), *(float64x2_t *)(v51 + 600));
    v61 = vmulq_f64(v60, v60);
    v62 = v61.f64[0]
        + (*(double *)v59 - *(double *)(v51 + 592)) * (*(double *)v59 - *(double *)(v51 + 592))
        + v61.f64[1];
    result = (double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v52, v51, &v107);
    result[3] = v62;
    if (v54 >= v62)
      return result;
  }
  v63 = *a4;
  *a4 = *a5;
  *a5 = v63;
  v64 = *a4;
  v65 = *a3;
  v107 = *a3;
  v108 = v64;
  v66 = (float *)(*a6 + 80);
  v67 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v66, v64);
  if (v67)
  {
    v68 = v67[3];
  }
  else
  {
    v69 = a6[1];
    v70 = vsubq_f64(*(float64x2_t *)(v69 + 8), *(float64x2_t *)(v64 + 600));
    v71 = vmulq_f64(v70, v70);
    v68 = v71.f64[0]
        + (*(double *)v69 - *(double *)(v64 + 592)) * (*(double *)v69 - *(double *)(v64 + 592))
        + v71.f64[1];
    *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v66, v64, &v108)+ 3) = v68;
  }
  result = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v66, v65);
  if (result)
  {
    if (v68 >= result[3])
      return result;
  }
  else
  {
    v72 = a6[1];
    v73 = vsubq_f64(*(float64x2_t *)(v72 + 8), *(float64x2_t *)(v65 + 600));
    v74 = vmulq_f64(v73, v73);
    v75 = v74.f64[0]
        + (*(double *)v72 - *(double *)(v65 + 592)) * (*(double *)v72 - *(double *)(v65 + 592))
        + v74.f64[1];
    result = (double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v66, v65, &v107);
    result[3] = v75;
    if (v68 >= v75)
      return result;
  }
  v76 = *a3;
  *a3 = *a4;
  *a4 = v76;
  v77 = *a3;
  v78 = *a2;
  v107 = *a2;
  v108 = v77;
  v79 = (float *)(*a6 + 80);
  v80 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v79, v77);
  if (v80)
  {
    v81 = v80[3];
  }
  else
  {
    v86 = a6[1];
    v87 = vsubq_f64(*(float64x2_t *)(v86 + 8), *(float64x2_t *)(v77 + 600));
    v88 = vmulq_f64(v87, v87);
    v81 = v88.f64[0]
        + (*(double *)v86 - *(double *)(v77 + 592)) * (*(double *)v86 - *(double *)(v77 + 592))
        + v88.f64[1];
    *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v79, v77, &v108)+ 3) = v81;
  }
  result = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v79, v78);
  if (result)
  {
    if (v81 >= result[3])
      return result;
  }
  else
  {
    v89 = a6[1];
    v90 = vsubq_f64(*(float64x2_t *)(v89 + 8), *(float64x2_t *)(v78 + 600));
    v91 = vmulq_f64(v90, v90);
    v92 = v91.f64[0]
        + (*(double *)v89 - *(double *)(v78 + 592)) * (*(double *)v89 - *(double *)(v78 + 592))
        + v91.f64[1];
    result = (double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v79, v78, &v107);
    result[3] = v92;
    if (v81 >= v92)
      return result;
  }
  v93 = *a2;
  *a2 = *a3;
  *a3 = v93;
  v94 = *a2;
  v95 = *a1;
  v107 = *a1;
  v108 = v94;
  v96 = (float *)(*a6 + 80);
  v97 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v96, v94);
  if (v97)
  {
    v98 = v97[3];
  }
  else
  {
    v99 = a6[1];
    v100 = vsubq_f64(*(float64x2_t *)(v99 + 8), *(float64x2_t *)(v94 + 600));
    v101 = vmulq_f64(v100, v100);
    v98 = v101.f64[0]
        + (*(double *)v99 - *(double *)(v94 + 592)) * (*(double *)v99 - *(double *)(v94 + 592))
        + v101.f64[1];
    *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v96, v94, &v108)+ 3) = v98;
  }
  result = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v96, v95);
  if (result)
  {
    if (v98 >= result[3])
      return result;
  }
  else
  {
    v103 = a6[1];
    v104 = vsubq_f64(*(float64x2_t *)(v103 + 8), *(float64x2_t *)(v95 + 600));
    v105 = vmulq_f64(v104, v104);
    v106 = v105.f64[0]
         + (*(double *)v103 - *(double *)(v95 + 592)) * (*(double *)v103 - *(double *)(v95 + 592))
         + v105.f64[1];
    result = (double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v96, v95, &v107);
    result[3] = v106;
    if (v98 >= v106)
      return result;
  }
  v102 = *a1;
  *a1 = *a2;
  *a2 = v102;
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,ARArrivalFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::{lambda(md::LabelBase const*,md::LabelBase const*)#1} &,md::LabelBase**>(int8x16_t *a1, int8x16_t *a2, _QWORD *a3)
{
  int8x16_t *v4;
  uint64_t v6;
  _BOOL8 result;
  unint64_t v8;
  unint64_t v9;
  float *v10;
  double *v11;
  double v12;
  unint64_t *v13;
  unint64_t *v14;
  uint64_t v15;
  int v16;
  _QWORD *i64;
  unint64_t v18;
  unint64_t v19;
  float *v20;
  double *v21;
  double v22;
  uint64_t v23;
  float64x2_t v24;
  float64x2_t v25;
  double *v26;
  uint64_t v27;
  float64x2_t v28;
  float64x2_t v29;
  double v30;
  unint64_t v31;
  float64x2_t *v32;
  uint64_t v33;
  uint64_t v34;
  float64x2_t v35;
  float64x2_t v36;
  double v37;
  unint64_t v38;
  float *v39;
  double *v40;
  double v41;
  uint64_t v42;
  float64x2_t v43;
  float64x2_t v44;
  double *v45;
  unint64_t *v46;
  int8x16_t *v47;
  unint64_t v48;
  unint64_t v49;
  float *v50;
  double *v51;
  double v52;
  uint64_t v53;
  float64x2_t v54;
  float64x2_t v55;
  double *v56;
  uint64_t v57;
  float64x2_t v58;
  float64x2_t v59;
  double v60;
  uint64_t v61;
  uint64_t v62;
  float64x2_t v63;
  float64x2_t v64;
  double *v65;
  uint64_t v66;
  float64x2_t v67;
  float64x2_t v68;
  double v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  float *v73;
  double *v74;
  double v75;
  uint64_t v76;
  float64x2_t v77;
  float64x2_t v78;
  double *v79;
  uint64_t v80;
  float64x2_t v81;
  float64x2_t v82;
  double v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  float *v87;
  double *v88;
  double v89;
  uint64_t v90;
  float64x2_t v91;
  float64x2_t v92;
  double *v93;
  double v94;
  uint64_t v95;
  float64x2_t v96;
  float64x2_t v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t v100;

  v4 = a2;
  v6 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = a2[-1].u64[1];
      v9 = a1->i64[0];
      v99 = a1->i64[0];
      v100 = v8;
      v10 = (float *)(*a3 + 80);
      v11 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v10, v8);
      if (v11)
      {
        v12 = v11[3];
      }
      else
      {
        v53 = a3[1];
        v54 = vsubq_f64(*(float64x2_t *)(v53 + 8), *(float64x2_t *)(v8 + 600));
        v55 = vmulq_f64(v54, v54);
        v12 = v55.f64[0]
            + (*(double *)v53 - *(double *)(v8 + 592)) * (*(double *)v53 - *(double *)(v8 + 592))
            + v55.f64[1];
        *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v10, v8, &v100)+ 3) = v12;
      }
      v56 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v10, v9);
      if (v56)
      {
        if (v12 >= v56[3])
          return 1;
      }
      else
      {
        v57 = a3[1];
        v58 = vsubq_f64(*(float64x2_t *)(v57 + 8), *(float64x2_t *)(v9 + 600));
        v59 = vmulq_f64(v58, v58);
        v60 = v59.f64[0]
            + (*(double *)v57 - *(double *)(v9 + 592)) * (*(double *)v57 - *(double *)(v9 + 592))
            + v59.f64[1];
        *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v10, v9, &v99)+ 3) = v60;
        if (v12 >= v60)
          return 1;
      }
      v61 = a1->i64[0];
      a1->i64[0] = v4[-1].i64[1];
      v4[-1].i64[1] = v61;
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,ARArrivalFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::{lambda(md::LabelBase const*,md::LabelBase const*)#1} &,md::LabelBase**>((unint64_t *)a1, &a1->u64[1], &a2[-1].u64[1], a3);
      return 1;
    case 4:
      v46 = &a1->u64[1];
      v47 = a1 + 1;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,ARArrivalFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::{lambda(md::LabelBase const*,md::LabelBase const*)#1} &,md::LabelBase**>((unint64_t *)a1, &a1->u64[1], (unint64_t *)&a1[1], a3);
      v48 = v4[-1].u64[1];
      v49 = a1[1].u64[0];
      v99 = v49;
      v100 = v48;
      v50 = (float *)(*a3 + 80);
      v51 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v50, v48);
      if (v51)
      {
        v52 = v51[3];
      }
      else
      {
        v62 = a3[1];
        v63 = vsubq_f64(*(float64x2_t *)(v62 + 8), *(float64x2_t *)(v48 + 600));
        v64 = vmulq_f64(v63, v63);
        v52 = v64.f64[0]
            + (*(double *)v62 - *(double *)(v48 + 592)) * (*(double *)v62 - *(double *)(v48 + 592))
            + v64.f64[1];
        *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v50, v48, &v100)+ 3) = v52;
      }
      v65 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v50, v49);
      if (v65)
      {
        if (v52 >= v65[3])
          return 1;
      }
      else
      {
        v66 = a3[1];
        v67 = vsubq_f64(*(float64x2_t *)(v66 + 8), *(float64x2_t *)(v49 + 600));
        v68 = vmulq_f64(v67, v67);
        v69 = v68.f64[0]
            + (*(double *)v66 - *(double *)(v49 + 592)) * (*(double *)v66 - *(double *)(v49 + 592))
            + v68.f64[1];
        *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v50, v49, &v99)+ 3) = v69;
        if (v52 >= v69)
          return 1;
      }
      v70 = v47->i64[0];
      v47->i64[0] = v4[-1].i64[1];
      v4[-1].i64[1] = v70;
      v71 = v47->i64[0];
      v72 = *v46;
      v99 = *v46;
      v100 = v71;
      v73 = (float *)(*a3 + 80);
      v74 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v73, v71);
      if (v74)
      {
        v75 = v74[3];
      }
      else
      {
        v76 = a3[1];
        v77 = vsubq_f64(*(float64x2_t *)(v76 + 8), *(float64x2_t *)(v71 + 600));
        v78 = vmulq_f64(v77, v77);
        v75 = v78.f64[0]
            + (*(double *)v76 - *(double *)(v71 + 592)) * (*(double *)v76 - *(double *)(v71 + 592))
            + v78.f64[1];
        *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v73, v71, &v100)+ 3) = v75;
      }
      v79 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v73, v72);
      if (v79)
      {
        if (v75 >= v79[3])
          return 1;
      }
      else
      {
        v80 = a3[1];
        v81 = vsubq_f64(*(float64x2_t *)(v80 + 8), *(float64x2_t *)(v72 + 600));
        v82 = vmulq_f64(v81, v81);
        v83 = v82.f64[0]
            + (*(double *)v80 - *(double *)(v72 + 592)) * (*(double *)v80 - *(double *)(v72 + 592))
            + v82.f64[1];
        *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v73, v72, &v99)+ 3) = v83;
        if (v75 >= v83)
          return 1;
      }
      v84 = a1->i64[1];
      v85 = a1[1].u64[0];
      v86 = a1->i64[0];
      a1->i64[1] = v85;
      a1[1].i64[0] = v84;
      v99 = v86;
      v100 = v85;
      v87 = (float *)(*a3 + 80);
      v88 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v87, v85);
      if (v88)
      {
        v89 = v88[3];
      }
      else
      {
        v90 = a3[1];
        v91 = vsubq_f64(*(float64x2_t *)(v90 + 8), *(float64x2_t *)(v85 + 600));
        v92 = vmulq_f64(v91, v91);
        v89 = v92.f64[0]
            + (*(double *)v90 - *(double *)(v85 + 592)) * (*(double *)v90 - *(double *)(v85 + 592))
            + v92.f64[1];
        *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v87, v85, &v100)+ 3) = v89;
      }
      v93 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v87, v86);
      if (v93)
      {
        v94 = v93[3];
      }
      else
      {
        v95 = a3[1];
        v96 = vsubq_f64(*(float64x2_t *)(v95 + 8), *(float64x2_t *)(v86 + 600));
        v97 = vmulq_f64(v96, v96);
        v94 = v97.f64[0]
            + (*(double *)v95 - *(double *)(v86 + 592)) * (*(double *)v95 - *(double *)(v86 + 592))
            + v97.f64[1];
        *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v87, v86, &v99)+ 3) = v94;
      }
      if (v89 < v94)
        *a1 = vextq_s8(*a1, *a1, 8uLL);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,ARArrivalFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::{lambda(md::LabelBase const*,md::LabelBase const*)#1} &,md::LabelBase**>((unint64_t *)a1, &a1->u64[1], (unint64_t *)&a1[1], &a1[1].u64[1], &a2[-1].u64[1], a3);
      return 1;
    default:
      v13 = (unint64_t *)&a1[1];
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,ARArrivalFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::{lambda(md::LabelBase const*,md::LabelBase const*)#1} &,md::LabelBase**>((unint64_t *)a1, &a1->u64[1], (unint64_t *)&a1[1], a3);
      v14 = &a1[1].u64[1];
      if (&a1[1].u64[1] == (unint64_t *)v4)
        return 1;
      v15 = 0;
      v16 = 0;
      v98 = (unint64_t *)v4;
      break;
  }
  do
  {
    v18 = *v14;
    v19 = *v13;
    v99 = v19;
    v100 = v18;
    v20 = (float *)(*a3 + 80);
    v21 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v20, v18);
    if (v21)
    {
      v22 = v21[3];
    }
    else
    {
      v23 = a3[1];
      v24 = vsubq_f64(*(float64x2_t *)(v23 + 8), *(float64x2_t *)(v18 + 600));
      v25 = vmulq_f64(v24, v24);
      v22 = v25.f64[0]
          + (*(double *)v23 - *(double *)(v18 + 592)) * (*(double *)v23 - *(double *)(v18 + 592))
          + v25.f64[1];
      *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v20, v18, &v100)+ 3) = v22;
    }
    v26 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v20, v19);
    if (v26)
    {
      if (v22 >= v26[3])
        goto LABEL_8;
    }
    else
    {
      v27 = a3[1];
      v28 = vsubq_f64(*(float64x2_t *)(v27 + 8), *(float64x2_t *)(v19 + 600));
      v29 = vmulq_f64(v28, v28);
      v30 = v29.f64[0]
          + (*(double *)v27 - *(double *)(v19 + 592)) * (*(double *)v27 - *(double *)(v19 + 592))
          + v29.f64[1];
      *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v20, v19, &v99)+ 3) = v30;
      if (v22 >= v30)
        goto LABEL_8;
    }
    v31 = *v14;
    v32 = (float64x2_t *)(*v14 + 600);
    v33 = v15;
    do
    {
      *(uint64_t *)((char *)&a1[1].i64[1] + v33) = *(uint64_t *)((char *)a1[1].i64 + v33);
      if (v33 == -16)
      {
        i64 = a1->i64;
        goto LABEL_7;
      }
      v38 = *(unint64_t *)((char *)&a1->u64[1] + v33);
      v99 = v38;
      v100 = v31;
      v39 = (float *)(*a3 + 80);
      v40 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v39, v31);
      if (v40)
      {
        v41 = v40[3];
      }
      else
      {
        v42 = a3[1];
        v43 = vsubq_f64(*(float64x2_t *)(v42 + 8), *v32);
        v44 = vmulq_f64(v43, v43);
        v41 = v44.f64[0]
            + (*(double *)v42 - *(double *)(v31 + 592)) * (*(double *)v42 - *(double *)(v31 + 592))
            + v44.f64[1];
        *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v39, v31, &v100)+ 3) = v41;
      }
      v45 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v39, v38);
      if (v45)
      {
        v37 = v45[3];
      }
      else
      {
        v34 = a3[1];
        v35 = vsubq_f64(*(float64x2_t *)(v34 + 8), *(float64x2_t *)(v38 + 600));
        v36 = vmulq_f64(v35, v35);
        v37 = v36.f64[0]
            + (*(double *)v34 - *(double *)(v38 + 592)) * (*(double *)v34 - *(double *)(v38 + 592))
            + v36.f64[1];
        *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v39, v38, &v99)+ 3) = v37;
      }
      v33 -= 8;
    }
    while (v41 < v37);
    i64 = (uint64_t *)((char *)&a1[1].i64[1] + v33);
LABEL_7:
    *i64 = v31;
    ++v16;
    v4 = (int8x16_t *)v98;
    if (v16 == 8)
      return v14 + 1 == v98;
LABEL_8:
    v13 = v14;
    v15 += 8;
    ++v14;
  }
  while (v14 != (unint64_t *)v4);
  return 1;
}

_QWORD *std::__hash_table<std::__hash_value_type<md::LabelBase const*,double>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,double>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,double>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(float *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t prime;
  void *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  size_t v26;
  size_t v27;
  size_t v28;
  _QWORD *i;
  size_t v30;
  uint64_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  size_t v37;
  _QWORD *v38;
  _QWORD *v39;
  unint64_t v40;
  _QWORD *v42;

  v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *((_QWORD *)a1 + 1);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v14 = v12[1];
            if (v14 == v8)
            {
              if (v12[2] == a2)
                return v12;
            }
            else if ((v14 & (v9 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v12 = (_QWORD *)*v12;
            if (!v12)
              goto LABEL_22;
          }
        }
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == a2)
              return v12;
          }
          else
          {
            if (v13 >= v9)
              v13 %= v9;
            if (v13 != v3)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_22:
  v12 = operator new(0x20uLL);
  *v12 = 0;
  v12[1] = v8;
  v12[2] = *a3;
  v12[3] = 0;
  v15 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v16 = a1[8];
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = v19;
    else
      prime = v18;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v9 = *((_QWORD *)a1 + 1);
    }
    if (prime <= v9)
    {
      if (prime >= v9)
        goto LABEL_59;
      v32 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v9 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        v32 = std::__next_prime(v32);
      }
      else
      {
        v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2)
          v32 = v34;
      }
      if (prime <= v32)
        prime = v32;
      if (prime >= v9)
      {
        v9 = *((_QWORD *)a1 + 1);
LABEL_59:
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v8 >= v9)
            v3 = v8 % v9;
          else
            v3 = v8;
        }
        else
        {
          v3 = (v9 - 1) & v8;
        }
        goto LABEL_72;
      }
      if (!prime)
      {
        v42 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v42)
          operator delete(v42);
        v9 = 0;
        *((_QWORD *)a1 + 1) = 0;
        goto LABEL_59;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v21 = operator new(8 * prime);
    v22 = *(_QWORD **)a1;
    *(_QWORD *)a1 = v21;
    if (v22)
      operator delete(v22);
    v23 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23++) = 0;
    while (prime != v23);
    v25 = (uint64_t *)(a1 + 4);
    v24 = (_QWORD *)*((_QWORD *)a1 + 2);
    if (!v24)
    {
LABEL_58:
      v9 = prime;
      goto LABEL_59;
    }
    v26 = v24[1];
    v27 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v28 = v26 & v27;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v25;
      for (i = (_QWORD *)*v24; *v24; i = (_QWORD *)*v24)
      {
        v30 = i[1] & v27;
        if (v30 == v28)
        {
          v24 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v30))
        {
          *v24 = *i;
          v31 = 8 * v30;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v31);
          **(_QWORD **)(*(_QWORD *)a1 + v31) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v24;
          v24 = i;
          v28 = v30;
        }
      }
      goto LABEL_58;
    }
    if (v26 >= prime)
      v26 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = v25;
    v35 = (_QWORD *)*v24;
    if (!*v24)
      goto LABEL_58;
    while (1)
    {
      v37 = v35[1];
      if (v37 >= prime)
        v37 %= prime;
      if (v37 != v26)
      {
        if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v37))
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v37) = v24;
          goto LABEL_63;
        }
        *v24 = *v35;
        v36 = 8 * v37;
        *v35 = **(_QWORD **)(*(_QWORD *)a1 + v36);
        **(_QWORD **)(*(_QWORD *)a1 + v36) = v35;
        v35 = v24;
      }
      v37 = v26;
LABEL_63:
      v24 = v35;
      v35 = (_QWORD *)*v35;
      v26 = v37;
      if (!v35)
        goto LABEL_58;
    }
  }
LABEL_72:
  v38 = *(_QWORD **)a1;
  v39 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v39)
  {
    *v12 = *v39;
LABEL_80:
    *v39 = v12;
    goto LABEL_81;
  }
  *v12 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v12;
  v38[v3] = a1 + 4;
  if (*v12)
  {
    v40 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v40 >= v9)
        v40 %= v9;
    }
    else
    {
      v40 &= v9 - 1;
    }
    v39 = (_QWORD *)(*(_QWORD *)a1 + 8 * v40);
    goto LABEL_80;
  }
LABEL_81:
  ++*((_QWORD *)a1 + 3);
  return v12;
}

void sub_19FA660B4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>(uint64_t **a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, const void **a5)
{
  uint64_t **v8;
  int v10;
  const void *v11;
  size_t v12;
  int v13;
  const void *v14;
  size_t v15;
  size_t v16;
  int v17;
  int v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  BOOL v23;
  int v24;
  const void *v25;
  size_t v26;
  int v27;
  const void *v28;
  size_t v29;
  size_t v30;
  int v31;
  uint64_t *v32;
  uint64_t **v33;
  _QWORD *v34;
  const void *v35;
  const void *v36;
  int v37;
  const void *v38;
  size_t v39;
  size_t v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  int v46;
  uint64_t *v47;
  size_t v48;
  size_t v49;
  int v50;
  uint64_t *v51;
  uint64_t **v52;
  uint64_t **v53;
  _QWORD *v54;
  const void *v55;
  const void *v56;
  int v57;
  const void *v58;
  size_t v59;
  size_t v60;
  int v61;
  int v62;

  v8 = a1 + 1;
  if (a1 + 1 == (uint64_t **)a2)
    goto LABEL_23;
  v10 = *((char *)a5 + 23);
  if (v10 >= 0)
    v11 = a5;
  else
    v11 = *a5;
  if (v10 >= 0)
    v12 = *((unsigned __int8 *)a5 + 23);
  else
    v12 = (size_t)a5[1];
  v13 = *((char *)a2 + 55);
  if (v13 >= 0)
    v14 = a2 + 4;
  else
    v14 = (const void *)a2[4];
  if (v13 >= 0)
    v15 = *((unsigned __int8 *)a2 + 55);
  else
    v15 = a2[5];
  if (v15 >= v12)
    v16 = v12;
  else
    v16 = v15;
  v17 = memcmp(v11, v14, v16);
  if (!v17)
  {
    if (v12 >= v15)
      goto LABEL_19;
LABEL_23:
    v19 = (uint64_t *)*a2;
    if (*a1 == a2)
    {
      v21 = a2;
    }
    else
    {
      if (v19)
      {
        v20 = (uint64_t *)*a2;
        do
        {
          v21 = v20;
          v20 = (uint64_t *)v20[1];
        }
        while (v20);
      }
      else
      {
        v22 = a2;
        do
        {
          v21 = (uint64_t *)v22[2];
          v23 = *v21 == (_QWORD)v22;
          v22 = v21;
        }
        while (v23);
      }
      v24 = *((char *)v21 + 55);
      if (v24 >= 0)
        v25 = v21 + 4;
      else
        v25 = (const void *)v21[4];
      if (v24 >= 0)
        v26 = *((unsigned __int8 *)v21 + 55);
      else
        v26 = v21[5];
      v27 = *((char *)a5 + 23);
      if (v27 >= 0)
        v28 = a5;
      else
        v28 = *a5;
      if (v27 >= 0)
        v29 = *((unsigned __int8 *)a5 + 23);
      else
        v29 = (size_t)a5[1];
      if (v29 >= v26)
        v30 = v26;
      else
        v30 = v29;
      v31 = memcmp(v25, v28, v30);
      if (v31)
      {
        if ((v31 & 0x80000000) == 0)
          goto LABEL_48;
      }
      else if (v26 >= v29)
      {
LABEL_48:
        v32 = *v8;
        if (!*v8)
        {
          v33 = v8;
LABEL_69:
          *a3 = (uint64_t *)v33;
          return (uint64_t *)v8;
        }
        while (1)
        {
          v33 = (uint64_t **)v32;
          v36 = (const void *)v32[4];
          v34 = v32 + 4;
          v35 = v36;
          v37 = *((char *)v34 + 23);
          if (v37 >= 0)
            v38 = v34;
          else
            v38 = v35;
          if (v37 >= 0)
            v39 = *((unsigned __int8 *)v34 + 23);
          else
            v39 = v34[1];
          if (v39 >= v29)
            v40 = v29;
          else
            v40 = v39;
          v41 = memcmp(v28, v38, v40);
          if (v41)
          {
            if (v41 < 0)
              goto LABEL_50;
LABEL_64:
            v42 = memcmp(v38, v28, v40);
            if (v42)
            {
              if ((v42 & 0x80000000) == 0)
                goto LABEL_69;
            }
            else if (v39 >= v29)
            {
              goto LABEL_69;
            }
            v8 = v33 + 1;
            v32 = v33[1];
            if (!v32)
              goto LABEL_69;
          }
          else
          {
            if (v29 >= v39)
              goto LABEL_64;
LABEL_50:
            v32 = *v33;
            v8 = v33;
            if (!*v33)
              goto LABEL_69;
          }
        }
      }
    }
    if (v19)
    {
      *a3 = v21;
      return v21 + 1;
    }
    else
    {
      *a3 = a2;
      return a2;
    }
  }
  if (v17 < 0)
    goto LABEL_23;
LABEL_19:
  v18 = memcmp(v14, v11, v16);
  if (v18)
  {
    if ((v18 & 0x80000000) == 0)
    {
LABEL_21:
      *a3 = a2;
      *a4 = a2;
      return (uint64_t *)a4;
    }
  }
  else if (v15 >= v12)
  {
    goto LABEL_21;
  }
  v43 = a2[1];
  if (v43)
  {
    v44 = (uint64_t *)a2[1];
    do
    {
      a4 = (uint64_t **)v44;
      v44 = (uint64_t *)*v44;
    }
    while (v44);
  }
  else
  {
    v45 = a2;
    do
    {
      a4 = (uint64_t **)v45[2];
      v23 = *a4 == v45;
      v45 = (uint64_t *)a4;
    }
    while (!v23);
  }
  if (a4 != v8)
  {
    v46 = *((char *)a4 + 55);
    if (v46 >= 0)
      v47 = (uint64_t *)(a4 + 4);
    else
      v47 = a4[4];
    if (v46 >= 0)
      v48 = *((unsigned __int8 *)a4 + 55);
    else
      v48 = (size_t)a4[5];
    if (v48 >= v12)
      v49 = v12;
    else
      v49 = v48;
    v50 = memcmp(v11, v47, v49);
    if (v50)
    {
      if ((v50 & 0x80000000) == 0)
      {
LABEL_95:
        v51 = *v8;
        if (*v8)
        {
          v52 = a3;
          while (1)
          {
            v53 = (uint64_t **)v51;
            v56 = (const void *)v51[4];
            v54 = v51 + 4;
            v55 = v56;
            v57 = *((char *)v54 + 23);
            if (v57 >= 0)
              v58 = v54;
            else
              v58 = v55;
            if (v57 >= 0)
              v59 = *((unsigned __int8 *)v54 + 23);
            else
              v59 = v54[1];
            if (v59 >= v12)
              v60 = v12;
            else
              v60 = v59;
            v61 = memcmp(v11, v58, v60);
            if (v61)
            {
              if (v61 < 0)
                goto LABEL_97;
LABEL_111:
              v62 = memcmp(v58, v11, v60);
              if (v62)
              {
                if ((v62 & 0x80000000) == 0)
                  goto LABEL_123;
              }
              else if (v59 >= v12)
              {
                goto LABEL_123;
              }
              v8 = v53 + 1;
              v51 = v53[1];
              if (!v51)
                goto LABEL_123;
            }
            else
            {
              if (v12 >= v59)
                goto LABEL_111;
LABEL_97:
              v51 = *v53;
              v8 = v53;
              if (!*v53)
                goto LABEL_123;
            }
          }
        }
        v53 = v8;
        v52 = a3;
LABEL_123:
        *v52 = (uint64_t *)v53;
        return (uint64_t *)v8;
      }
    }
    else if (v12 >= v48)
    {
      goto LABEL_95;
    }
  }
  if (v43)
  {
    *a3 = (uint64_t *)a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return (uint64_t *)a4;
}

uint64_t md::LabelIconStyleMonitor::LabelIconStyleMonitor(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v3;
  uint64_t v4;
  int v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if ((v3 & 1) == 0)
  {
    v8 = a2;
    a2 = v8;
    if (v6)
    {
      v7 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v7, "VectorKitLabels", 0x5ED09DD50000000FLL);
      a2 = v8;
    }
  }
  v4 = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = v4;
  *(_DWORD *)(a1 + 48) = 255;
  md::LabelIconStyleMonitor::initialize(a1, a2);
  return a1;
}

void sub_19FA66530(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v1 + 24) + 40))(*(_QWORD *)(v1 + 24), *(_QWORD *)v1, *(_QWORD *)(v1 + 16) & 0x7FFFFFFFFFFFFFFFLL);
  _Unwind_Resume(exception_object);
}

uint64_t md::LabelIconStyleMonitor::needsCrossfade(unsigned __int8 *a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t *v26;

  if (!a1[51])
    return 0;
  v6 = *(_QWORD *)(a2 + 296);
  if (!v6)
  {
    v7 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(a2, 0);
    v6 = *v7;
    *(_QWORD *)(a2 + 296) = *v7;
  }
  v8 = a1[50];
  v9 = *(_QWORD *)(a2 + 272);
  if (!v9)
  {
    v10 = md::LabelStyle::prepareStyleGroup<md::LabelPointStyleGroup>(a2);
    v9 = *v10;
    *(_QWORD *)(a2 + 272) = *v10;
  }
  if (v8 != *(unsigned __int8 *)(v9 + 69)
    || a1[49] != *(unsigned __int8 *)(v6 + 88)
    || *((_DWORD *)a1 + 8) != *(_DWORD *)(v6 + 64)
    || *((_DWORD *)a1 + 9) != *(_DWORD *)(v6 + 68)
    || a1[48] != *(unsigned __int8 *)(v6 + 92))
  {
    goto LABEL_33;
  }
  if (*(char *)(v9 + 263) < 0)
    v11 = *(_QWORD *)(v9 + 248);
  else
    v11 = *(unsigned __int8 *)(v9 + 263);
  v12 = (unsigned __int8 *)(v9 + 240);
  v13 = 80;
  if (v11)
    v13 = 240;
  else
    v12 = (unsigned __int8 *)(v9 + 80);
  v14 = a1[23];
  if ((v14 & 0x80u) == 0)
    v15 = a1[23];
  else
    v15 = *((_QWORD *)a1 + 1);
  v16 = v12[23];
  v17 = (char)v16;
  if ((v16 & 0x80u) != 0)
    v16 = *((_QWORD *)v12 + 1);
  if (v15 != v16)
    goto LABEL_33;
  v18 = *(unsigned __int8 **)(v9 + v13);
  if (v17 >= 0)
    v19 = v12;
  else
    v19 = v18;
  if ((v14 & 0x80) == 0)
  {
    if (a1[23])
    {
      v20 = a1;
      while (*v20 == *v19)
      {
        ++v20;
        ++v19;
        if (!--v14)
          goto LABEL_52;
      }
      goto LABEL_55;
    }
    goto LABEL_52;
  }
  if (memcmp(*(const void **)a1, v19, *((_QWORD *)a1 + 1)))
  {
LABEL_33:
    if ((a1[23] & 0x80u) == 0)
      v15 = a1[23];
    else
      v15 = *((_QWORD *)a1 + 1);
    goto LABEL_36;
  }
LABEL_52:
  if (*(_DWORD *)(v6 + 56) != *((_DWORD *)a1 + 10) || *(_DWORD *)(v6 + 60) != *((_DWORD *)a1 + 11))
  {
LABEL_55:
    if (!v9)
    {
      v26 = md::LabelStyle::prepareStyleGroup<md::LabelPointStyleGroup>(a2);
      v9 = *v26;
      *(_QWORD *)(a2 + 272) = *v26;
    }
LABEL_36:
    if (*(char *)(v9 + 263) < 0)
      v21 = *(_QWORD *)(v9 + 248);
    else
      v21 = *(unsigned __int8 *)(v9 + 263);
    if (v21)
      v22 = v9 + 240;
    else
      v22 = v9 + 80;
    v23 = *(unsigned __int8 *)(v22 + 23);
    v24 = *(_QWORD *)(v22 + 8);
    if ((v23 & 0x80u) == 0)
      v24 = v23;
    if (v24)
    {
      if (!v15)
        goto LABEL_51;
    }
    else if (v15)
    {
LABEL_51:
      result = 1;
      a3[8] = 1;
      *a3 = 1;
      return result;
    }
    if ((*((_DWORD *)a1 + 8) != 0) != (*(_DWORD *)(v6 + 64) == 0)
      && (*((_DWORD *)a1 + 9) != 0) != (*(_DWORD *)(v6 + 68) == 0))
    {
      return 1;
    }
    goto LABEL_51;
  }
  return 0;
}

void md::RouteOverlayContainer::addOverlay(uint64_t a1, void *a2, uint64_t a3)
{
  std::mutex *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t **v9;
  uint64_t **v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  id v15;
  char *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  BOOL v21;
  id v22;

  v22 = a2;
  v5 = (std::mutex *)(a1 + 96);
  std::mutex::lock((std::mutex *)(a1 + 96));
  if ((_DWORD)a3)
    v6 = 48;
  else
    v6 = 24;
  if ((_DWORD)a3)
    v7 = a1 + 48;
  else
    v7 = a1 + 24;
  v9 = (uint64_t **)(v7 + 8);
  v8 = *(uint64_t **)(v7 + 8);
  if (v8)
  {
    while (1)
    {
      while (1)
      {
        v10 = (uint64_t **)v8;
        v11 = v8[4];
        if (v11 <= (unint64_t)v22)
          break;
        v8 = *v10;
        v9 = v10;
        if (!*v10)
          goto LABEL_15;
      }
      if (v11 >= (unint64_t)v22)
        break;
      v8 = v10[1];
      if (!v8)
      {
        v9 = v10 + 1;
        goto LABEL_15;
      }
    }
  }
  else
  {
    v10 = (uint64_t **)(v7 + 8);
LABEL_15:
    v12 = (uint64_t *)operator new(0x28uLL);
    v12[4] = (uint64_t)v22;
    *v12 = 0;
    v12[1] = 0;
    v12[2] = (uint64_t)v10;
    *v9 = v12;
    v13 = **(_QWORD **)(a1 + v6);
    if (v13)
    {
      *(_QWORD *)(a1 + v6) = v13;
      v12 = *v9;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v7 + 8), v12);
    ++*(_QWORD *)(v7 + 16);
    v14 = *(_QWORD **)(a1 + 8);
    if ((unint64_t)v14 >= *(_QWORD *)(a1 + 16))
    {
      v16 = std::vector<geo::_retain_ptr<objc_object  {objcproto14VKRouteOverlay}* {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::__emplace_back_slow_path<objc_object  {objcproto14VKRouteOverlay}*&,geo::memory_management_mode const&>((void **)a1, v22);
    }
    else
    {
      v15 = v22;
      *v14 = &off_1E42B5510;
      v14[1] = v15;
      v16 = (char *)(v14 + 3);
    }
    *(_QWORD *)(a1 + 8) = v16;
    v17 = *(_QWORD **)(a1 + 72);
    v18 = (_QWORD *)(a1 + 80);
    if (v17 != v18)
    {
      do
      {
        (**(void (***)(_QWORD, id, uint64_t))v17[4])(v17[4], v22, a3);
        v19 = (_QWORD *)v17[1];
        if (v19)
        {
          do
          {
            v20 = v19;
            v19 = (_QWORD *)*v19;
          }
          while (v19);
        }
        else
        {
          do
          {
            v20 = (_QWORD *)v17[2];
            v21 = *v20 == (_QWORD)v17;
            v17 = v20;
          }
          while (!v21);
        }
        v17 = v20;
      }
      while (v20 != v18);
    }
  }
  std::mutex::unlock(v5);

}

void sub_19FA66960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  std::mutex *v10;

  std::mutex::unlock(v10);

  _Unwind_Resume(a1);
}

void md::RouteOverlayContainer::removeOverlay(uint64_t a1, void *a2, uint64_t a3)
{
  std::mutex *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  _QWORD *v10;
  unint64_t v11;
  BOOL v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  id v24;
  void *v25;

  v24 = a2;
  v25 = v24;
  v5 = (std::mutex *)(a1 + 96);
  std::mutex::lock((std::mutex *)(a1 + 96));
  v6 = a1 + 48;
  v7 = 24;
  if ((_DWORD)a3)
    v7 = 48;
  else
    v6 = a1 + 24;
  v8 = *(uint64_t **)(v6 + 8);
  if (v8)
  {
    v9 = (uint64_t *)(v6 + 8);
    v10 = *(_QWORD **)(v6 + 8);
    do
    {
      v11 = v10[4];
      v12 = v11 >= (unint64_t)v24;
      if (v11 >= (unint64_t)v24)
        v13 = v10;
      else
        v13 = v10 + 1;
      if (v12)
        v9 = v10;
      v10 = (_QWORD *)*v13;
    }
    while (*v13);
    if (v9 != (uint64_t *)(v6 + 8) && v9[4] <= (unint64_t)v24)
    {
      v14 = (uint64_t *)v9[1];
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
      else
      {
        v16 = v9;
        do
        {
          v15 = (uint64_t *)v16[2];
          v17 = *v15 == (_QWORD)v16;
          v16 = v15;
        }
        while (!v17);
      }
      if (*(uint64_t **)(a1 + v7) == v9)
        *(_QWORD *)(a1 + v7) = v15;
      --*(_QWORD *)(v6 + 16);
      std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v8, v9);
      operator delete(v9);
      v18 = std::remove[abi:nn180100]<std::__wrap_iter<geo::_retain_ptr<objc_object  {objcproto14VKRouteOverlay}* {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *>,objc_object  {objcproto14VKRouteOverlay}*>(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), &v25);
      v19 = *(_QWORD *)(a1 + 8);
      if (v19 != v18)
      {
        std::vector<geo::_retain_ptr<objc_object  {objcproto14VKRouteOverlay}* {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::erase(a1, v18, v19);
        v20 = *(_QWORD **)(a1 + 72);
        v21 = (_QWORD *)(a1 + 80);
        if (v20 != v21)
        {
          do
          {
            (*(void (**)(_QWORD, id, uint64_t))(*(_QWORD *)v20[4] + 8))(v20[4], v24, a3);
            v22 = (_QWORD *)v20[1];
            if (v22)
            {
              do
              {
                v23 = v22;
                v22 = (_QWORD *)*v22;
              }
              while (v22);
            }
            else
            {
              do
              {
                v23 = (_QWORD *)v20[2];
                v17 = *v23 == (_QWORD)v20;
                v20 = v23;
              }
              while (!v17);
            }
            v20 = v23;
          }
          while (v23 != v21);
        }
      }
    }
  }
  std::mutex::unlock(v5);

}

void sub_19FA66B28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  std::mutex *v9;

  std::mutex::unlock(v9);

  _Unwind_Resume(a1);
}

void md::ViewTransform::setFocus(uint64_t a1, uint64_t a2, double *a3)
{
  uint64_t v5;
  double v6;
  double v7;
  long double v8;
  long double v9;
  float64x2_t v10;
  float64x2_t v11;
  double v12;
  double v13;
  double v14;
  long double v15;
  long double v16;
  long double v17;
  double v18;
  long double v19;
  double v20;
  long double v21;
  long double v22;
  float v23;

  v5 = a1 + 1728;
  v6 = *(double *)a2;
  *(_QWORD *)(a1 + 1728) = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 1736) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 1744) = *(_QWORD *)(a2 + 16);
  v7 = a3[1];
  v8 = tan(*a3 * 0.00872664626 + 0.785398163);
  v9 = log(v8);
  *(double *)(a1 + 1752) = v7 * 0.00277777778 + 0.5;
  *(long double *)(a1 + 1760) = v9 * 0.159154943 + 0.5;
  *(_QWORD *)(a1 + 1768) = 0;
  v10 = vsubq_f64(*(float64x2_t *)(v5 + 8), *(float64x2_t *)(a1 + 512));
  v11 = vmulq_f64(v10, v10);
  v12 = sqrt(v11.f64[0] + (v6 - *(double *)(a1 + 504)) * (v6 - *(double *)(a1 + 504)) + v11.f64[1]);
  *(double *)(a1 + 1776) = v12;
  v13 = v12 * *(double *)(a1 + 1456);
  v14 = *a3;
  v15 = cos(*a3 * 0.034906585) * -559.82 + 111132.92;
  v16 = v15 + cos(v14 * 0.0698131701) * 1.175;
  v17 = v16 + cos(v14 * 0.104719755) * -0.0023;
  v18 = v14 * 0.00872664626;
  v19 = tan(v18 + 0.78103484);
  v20 = log(v19);
  v21 = tan(v18 + 0.789761487);
  v22 = fabs((log(v21) - v20) * 0.159154943) / v17;
  v23 = 1.0 / v22;
  *(double *)(a1 + 1792) = log2f(v23);
  *(long double *)(a1 + 1784) = v13 * v22 * (v13 * v22);
  *(_BYTE *)(a1 + 1720) = v13 * v22 < 0.1;
}

void sub_19FA66D5C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19FA673D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  void *v14;
  void *v15;
  int v16;
  void *v17;
  void *v18;
  uint64_t v19;

  if (v16 < 0)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a14 + 40))(a14, v19, a13 & 0x7FFFFFFFFFFFFFFFLL);

  _Unwind_Resume(a1);
}

void sub_19FA674BC()
{
  JUMPOUT(0x19FA6749CLL);
}

void sub_19FA674C4()
{
  JUMPOUT(0x19FA674A4);
}

void sub_19FA67618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

uint64_t md::LabelExternalTextElement::operator=(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  size_t v5;
  __int128 v6;
  void *v7;
  size_t v8;
  void **v9;
  char v10;
  __int128 v11;
  void *v12;
  size_t v13;
  void **v14;
  char v15;
  __int128 v16;
  void *v17;
  size_t v18;
  void **v19;
  char v20;
  __int128 v21;
  void *v22;
  size_t v23;

  *(_WORD *)a1 = *(_WORD *)a2;
  v3 = a1 + 8;
  if ((_QWORD *)a1 != a2)
  {
    v5 = *((unsigned __int8 *)a2 + 31);
    if (*(char *)(a1 + 31) < 0)
    {
      if ((v5 & 0x80u) == 0)
        v7 = a2 + 1;
      else
        v7 = (void *)a2[1];
      if ((v5 & 0x80u) == 0)
        v8 = v5;
      else
        v8 = a2[2];
      std::string::__assign_no_alias<false>((void **)v3, v7, v8);
    }
    else if ((v5 & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>((_QWORD *)v3, (void *)a2[1], a2[2]);
    }
    else
    {
      v6 = *(_OWORD *)(a2 + 1);
      *(_QWORD *)(v3 + 16) = a2[3];
      *(_OWORD *)v3 = v6;
    }
    v9 = (void **)(a1 + 32);
    v10 = *((_BYTE *)a2 + 55);
    if (*(char *)(a1 + 55) < 0)
    {
      if (v10 >= 0)
        v12 = a2 + 4;
      else
        v12 = (void *)a2[4];
      if (v10 >= 0)
        v13 = *((unsigned __int8 *)a2 + 55);
      else
        v13 = a2[5];
      std::string::__assign_no_alias<false>(v9, v12, v13);
    }
    else if ((*((_BYTE *)a2 + 55) & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(v9, (void *)a2[4], a2[5]);
    }
    else
    {
      v11 = *((_OWORD *)a2 + 2);
      *(_QWORD *)(a1 + 48) = a2[6];
      *(_OWORD *)v9 = v11;
    }
    v14 = (void **)(a1 + 56);
    v15 = *((_BYTE *)a2 + 79);
    if (*(char *)(a1 + 79) < 0)
    {
      if (v15 >= 0)
        v17 = a2 + 7;
      else
        v17 = (void *)a2[7];
      if (v15 >= 0)
        v18 = *((unsigned __int8 *)a2 + 79);
      else
        v18 = a2[8];
      std::string::__assign_no_alias<false>(v14, v17, v18);
    }
    else if ((*((_BYTE *)a2 + 79) & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(v14, (void *)a2[7], a2[8]);
    }
    else
    {
      v16 = *(_OWORD *)(a2 + 7);
      *(_QWORD *)(a1 + 72) = a2[9];
      *(_OWORD *)v14 = v16;
    }
    v19 = (void **)(a1 + 80);
    v20 = *((_BYTE *)a2 + 103);
    if (*(char *)(a1 + 103) < 0)
    {
      if (v20 >= 0)
        v22 = a2 + 10;
      else
        v22 = (void *)a2[10];
      if (v20 >= 0)
        v23 = *((unsigned __int8 *)a2 + 103);
      else
        v23 = a2[11];
      std::string::__assign_no_alias<false>(v19, v22, v23);
    }
    else if ((*((_BYTE *)a2 + 103) & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(v19, (void *)a2[10], a2[11]);
    }
    else
    {
      v21 = *((_OWORD *)a2 + 5);
      *(_QWORD *)(a1 + 96) = a2[12];
      *(_OWORD *)v19 = v21;
    }
  }
  return a1;
}

void sub_19FA679E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19FA67AA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FA67E00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FA680C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  void *v28;
  void *v29;

  if (a22 < 0)
    operator delete(__p);
  md::CustomImageData::~CustomImageData((md::CustomImageData *)&a28);

  _Unwind_Resume(a1);
}

void sub_19FA68290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_19FA68314(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FA68668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19FA68D10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  void *v9;
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19FA692CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t geo::_retain_ptr<GEOFeatureStyleAttributes * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B5150;

  return a1;
}

void geo::_retain_ptr<GEOFeatureStyleAttributes * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B5150;

  JUMPOUT(0x1A1AF4E00);
}

void md::LabelExternalPointFeature::setPlaceholderIcon(_QWORD *a1, _QWORD *a2, _QWORD *a3, char a4)
{
  char *v8;
  char *v9;
  char *v10;
  _BYTE *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  __int128 v21;

  v8 = (char *)a1[44];
  a1[45] = v8;
  v9 = (char *)a1[46];
  if (v9 == v8)
  {
    v10 = (char *)operator new(0x14uLL);
    a1[44] = v10;
    a1[45] = v10;
    a1[46] = v10 + 20;
    if (v8)
    {
      operator delete(v8);
      v8 = (char *)a1[45];
      v9 = (char *)a1[46];
      if (v8 >= v9)
        goto LABEL_6;
    }
    else
    {
      v8 = v10;
    }
LABEL_20:
    *(_QWORD *)v8 = *a2;
    *((_QWORD *)v8 + 1) = *a3;
    v8[16] = a4;
    v8[17] = 0;
    v19 = v8 + 20;
    goto LABEL_21;
  }
  if (v8 < v9)
    goto LABEL_20;
LABEL_6:
  v11 = (_BYTE *)a1[44];
  v12 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - v11) >> 2) + 1;
  if (v12 > 0xCCCCCCCCCCCCCCCLL)
    abort();
  v13 = 0xCCCCCCCCCCCCCCCDLL * ((v9 - v11) >> 2);
  if (2 * v13 > v12)
    v12 = 2 * v13;
  if (v13 >= 0x666666666666666)
    v14 = 0xCCCCCCCCCCCCCCCLL;
  else
    v14 = v12;
  if (v14 > 0xCCCCCCCCCCCCCCCLL)
    std::__throw_bad_array_new_length[abi:nn180100]();
  v15 = 20 * v14;
  v16 = (char *)operator new(20 * v14);
  v17 = *a3;
  v18 = &v16[4 * ((v8 - v11) >> 2)];
  *(_QWORD *)v18 = *a2;
  *((_QWORD *)v18 + 1) = v17;
  v18[16] = a4;
  v18[17] = 0;
  v19 = v18 + 20;
  if (v8 == v11)
  {
    v20 = &v16[4 * ((v8 - v11) >> 2)];
  }
  else
  {
    do
    {
      v20 = v18 - 20;
      v21 = *(_OWORD *)(v8 - 20);
      *((_DWORD *)v18 - 1) = *((_DWORD *)v8 - 1);
      *(_OWORD *)(v18 - 20) = v21;
      v8 -= 20;
      v18 -= 20;
    }
    while (v8 != v11);
  }
  a1[44] = v20;
  a1[45] = v19;
  a1[46] = &v16[v15];
  if (v11)
    operator delete(v11);
LABEL_21:
  a1[45] = v19;
}

void md::LabelExternalLineFeature::~LabelExternalLineFeature(md::LabelExternalLineFeature *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E42A09D8;
  v2 = (void *)*((_QWORD *)this + 23);
  if (v2)
  {
    *((_QWORD *)this + 24) = v2;
    operator delete(v2);
  }
  md::LabelExternalFeature::~LabelExternalFeature(this);
}

{
  void *v2;

  *(_QWORD *)this = &off_1E42A09D8;
  v2 = (void *)*((_QWORD *)this + 23);
  if (v2)
  {
    *((_QWORD *)this + 24) = v2;
    operator delete(v2);
  }
  md::LabelExternalFeature::~LabelExternalFeature(this);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::LabelExternalLineFeature>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DCF58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::LabelExternalLineFeature>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DCF58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::LabelExternalLineFeature>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void ggl::SolidTraffic::BasePipelineState::~BasePipelineState(ggl::SolidTraffic::BasePipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::SolidTraffic::BasePipelineSetup::~BasePipelineSetup(ggl::SolidTraffic::BasePipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::SolidTraffic::BasePipelineSetup::constantDataIsEnabled(ggl::SolidTraffic::BasePipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

BOOL ggl::SolidTraffic::BasePipelineSetup::textureIsEnabled(ggl::SolidTraffic::BasePipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

uint64_t ggl::SolidTraffic::BasePipelineSetup::BasePipelineSetup(ggl::SolidTraffic::BasePipelineSetup *this)
{
  unsigned __int8 v2;
  uint64_t result;
  unsigned __int8 v4;
  unsigned __int8 v5;
  unsigned __int8 v6;

  if ((v2 & 1) == 0
  {
    if ((v4 & 1) == 0
    {
      if ((v6 & 1) == 0
      {
        ggl::MeshTyped<ggl::TrafficBase::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::TrafficBase::defaultVboReflection;
      }
      ggl::MeshTyped<ggl::TrafficBase::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::TrafficBase::DefaultVbo>::attributesReflection(void)::r;
      unk_1ECE43B40 = 1;
    }
    ggl::SolidTraffic::BasePipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::TrafficBase::DefaultVbo>::typedReflection(void)::r;
    *(_QWORD *)algn_1ECE39058 = &ggl::SolidTraffic::pipelineDataBasePipelineDeviceStructs(void)::ref;
    qword_1ECE39060 = 0;
    if ((v5 & 1) == 0
    {
      ggl::SolidTraffic::pipelineDataBasePipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
      unk_1ECE390C0 = ggl::Tile::Transform::reflection(void)::reflection;
      qword_1ECE390C8 = (uint64_t)ggl::TrafficBase::Style::reflection(void)::reflection;
    }
    qword_1ECE39068 = (uint64_t)&ggl::SolidTraffic::pipelineDataBasePipelineConstantStructs(void)::ref;
    *(_OWORD *)algn_1ECE39070 = xmmword_19FFB35E0;
  }
  result = ggl::PipelineSetup::PipelineSetup((uint64_t)this, (uint64_t)&ggl::SolidTraffic::BasePipelineSetup::typedReflection(void)::ref);
  *(_QWORD *)this = &off_1E42B63D0;
  return result;
}

void ggl::SolidTraffic::BaseMaskedPipelineState::~BaseMaskedPipelineState(ggl::SolidTraffic::BaseMaskedPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::SolidTraffic::BaseMaskedPipelineSetup::~BaseMaskedPipelineSetup(ggl::SolidTraffic::BaseMaskedPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::SolidTraffic::BaseMaskedPipelineSetup::constantDataIsEnabled(ggl::SolidTraffic::BaseMaskedPipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

BOOL ggl::SolidTraffic::BaseMaskedPipelineSetup::textureIsEnabled(ggl::SolidTraffic::BaseMaskedPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

float EaseConstantZero(float a1)
{
  return 0.0;
}

float EaseQuadInOut(float a1)
{
  BOOL v1;
  float v2;
  float result;

  v1 = a1 < 0.5;
  v2 = (float)((float)(0.5 - a1) * (float)((float)(a1 * 2.0) + -3.0)) + 0.5;
  result = (float)(a1 * a1) + (float)(a1 * a1);
  if (!v1)
    return v2;
  return result;
}

float EaseCubicIn(float a1)
{
  return (float)(a1 * a1) * a1;
}

float EaseCubicOut(float a1)
{
  return (float)((float)((float)(a1 + -1.0) * (float)(a1 + -1.0)) * (float)(a1 + -1.0)) + 1.0;
}

float EaseCubicInOut(float a1)
{
  BOOL v1;
  float v2;
  float result;

  v1 = a1 < 0.5;
  v2 = (float)((float)((float)((float)((float)(a1 * 2.0) + -2.0) * (float)((float)(a1 * 2.0) + -2.0)) * 0.5)
             * (float)((float)(a1 * 2.0) + -2.0))
     + 1.0;
  result = (float)(a1 * a1) * (float)(a1 + a1);
  if (!v1)
    return v2;
  return result;
}

float EaseBounceOut(float a1)
{
  if (a1 < 0.36364)
    return (float)(a1 * a1) * 7.5625;
  if (a1 < 0.72727)
    return (float)((float)((float)(a1 + -0.54545) * (float)(a1 + -0.54545)) * 7.5625) + 0.75;
  if (a1 >= 0.90909)
    return (float)((float)((float)(a1 + -0.95455) * (float)(a1 + -0.95455)) * 7.5625) + 0.98438;
  return (float)((float)((float)(a1 + -0.81818) * (float)(a1 + -0.81818)) * 7.5625) + 0.9375;
}

float EaseBackIn(float a1)
{
  return (float)((float)(a1 * a1) * a1) + sin(a1 * -3.14159265) * a1;
}

float EaseBackOut(float a1)
{
  unsigned __int8 v1;
  int v3;
  double v4;
  double v5;
  double v6;
  float v7;
  uint64_t v8;
  int32x2_t v9;

  if ((v1 & 1) == 0)
  {
    v7 = a1;
    a1 = v7;
    if (v3)
    {
      v9 = vdup_n_s32(0x3EAE147Bu);
      v8 = 0x3FCF5C293F35C28FLL;
      md::BezierEase::BezierEase((uint64_t)&EaseBackOut(float)::ease, (float *)&v9, (float *)&v8, 0.245000034, v4, v5, v6);
      a1 = v7;
    }
  }
  return md::BezierEase::value((md::BezierEase *)&EaseBackOut(float)::ease, a1);
}

float EaseElasticIn(float a1)
{
  double v2;

  v2 = sin(a1 * 20.4203522);
  return exp2((float)((float)(a1 * 10.0) + -10.0)) * v2;
}

float EaseElasticOut(float a1)
{
  float v1;
  double v2;
  float v3;

  v1 = 1.0 - a1;
  v2 = sin((float)(1.0 - a1) * -20.4203522);
  v3 = exp2((float)((float)(v1 * 10.0) + -10.0)) * v2;
  return v3 + 1.0;
}

void EaseElasticInOut(float a1)
{
  float v2;

  if (a1 >= 0.5)
  {
    v2 = 2.0 - (float)(a1 * 2.0);
    sin(v2 * -20.4203522);
    exp2((float)((float)(v2 * 10.0) + -10.0));
  }
  else
  {
    sin(a1 * 20.4203522);
    exp2((float)((float)(a1 * 10.0) + -10.0));
  }
}

float EaseOvershootOut(float a1)
{
  unsigned __int8 v1;
  int v3;
  double v4;
  double v5;
  double v6;
  float v7;
  uint64_t v8;
  uint64_t v9;

  if ((v1 & 1) == 0)
  {
    v7 = a1;
    a1 = v7;
    if (v3)
    {
      v9 = 0x3F5C28F63EF0A3D7;
      v8 = 0x3FA3D70A3EC7AE14;
      md::BezierEase::BezierEase((uint64_t)&EaseOvershootOut(float)::ease, (float *)&v9, (float *)&v8, 0.0387500002, v4, v5, v6);
      a1 = v7;
    }
  }
  return md::BezierEase::value((md::BezierEase *)&EaseOvershootOut(float)::ease, a1);
}

float EaseOvershootSmallOut(float a1)
{
  unsigned __int8 v1;
  int v3;
  double v4;
  double v5;
  double v6;
  float v7;
  uint64_t v8;
  uint64_t v9;

  if ((v1 & 1) == 0)
  {
    v7 = a1;
    a1 = v7;
    if (v3)
    {
      v9 = 0x3F2147AE3F0A3D71;
      v8 = 0x3F95C28F3F1EB852;
      md::BezierEase::BezierEase((uint64_t)&EaseOvershootSmallOut(float)::ease, (float *)&v9, (float *)&v8, 0.0212499983, v4, v5, v6);
      a1 = v7;
    }
  }
  return md::BezierEase::value((md::BezierEase *)&EaseOvershootSmallOut(float)::ease, a1);
}

float EaseOscillation2Pd(float a1)
{
  float v2;

  v2 = exp2((float)(a1 * -6.0));
  return sin(a1 * 12.5663706) * v2;
}

float EaseSpringOut(float a1)
{
  float v2;

  v2 = exp2((float)(a1 * -6.0));
  return sin(a1 * 12.5663706 + -1.57079637) * v2 + 1.0;
}

void md::MuninLabelingUtils::computeWeightsForWeightedAverage(_QWORD *a1, uint64_t a2, float64x2_t **a3)
{
  unint64_t v6;
  float64x2_t *v7;
  float64x2_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  double v12;
  uint64_t v13;
  double v14;
  float64x2_t *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  float64x2_t *v19;
  unint64_t v20;
  double v21;
  float64x2_t v22;
  unint64_t v23;
  double *v24;

  v6 = (uint64_t)(a1[1] - *a1) >> 3;
  v7 = *a3;
  v8 = a3[1];
  v9 = ((char *)v8 - (char *)*a3) >> 3;
  if (v6 <= v9)
  {
    if (v6 < v9)
    {
      v8 = (float64x2_t *)((char *)v7 + 8 * v6);
      a3[1] = v8;
    }
  }
  else
  {
    std::vector<double>::__append((uint64_t)a3, v6 - v9);
    v7 = *a3;
    v8 = a3[1];
  }
  if (v8 == v7)
  {
    v12 = 0.0;
  }
  else
  {
    v10 = 0;
    v11 = 0;
    v12 = 0.0;
    do
    {
      v13 = *(_QWORD *)(a2 + 24);
      if (!v13)
      {
        std::__throw_bad_function_call[abi:nn180100]();
        JUMPOUT(0x19FA6A480);
      }
      v14 = (*(double (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 48))(v13, *a1 + v10);
      v7 = *a3;
      v15 = a3[1];
      (*a3)->f64[v11] = v14;
      v12 = v14 + v12;
      ++v11;
      v10 += 8;
    }
    while (v11 < ((char *)v15 - (char *)v7) >> 3);
  }
  v16 = a1[1] - *a1;
  if (v16)
  {
    v17 = v16 >> 3;
    if (v17 <= 1)
      v17 = 1;
    if (v17 <= 3)
    {
      v18 = 0;
LABEL_19:
      v23 = v17 - v18;
      v24 = &v7->f64[v18];
      do
      {
        *v24 = *v24 * (1.0 / v12);
        ++v24;
        --v23;
      }
      while (v23);
      return;
    }
    v18 = v17 & 0xFFFFFFFFFFFFFFFCLL;
    v19 = v7 + 1;
    v20 = v17 & 0xFFFFFFFFFFFFFFFCLL;
    v21 = 1.0 / v12;
    do
    {
      v22 = vmulq_n_f64(*v19, v21);
      v19[-1] = vmulq_n_f64(v19[-1], v21);
      *v19 = v22;
      v19 += 2;
      v20 -= 4;
    }
    while (v20);
    if (v17 != v18)
      goto LABEL_19;
  }
}

void std::__function::__func<md::MuninLabelingUtils::getApproximateCollectionPointZInformation(std::vector<std::shared_ptr<md::mun::MuninMetadata>> const&,geo::Mercator2<double> const&,double const*)::$_0,std::allocator<md::MuninLabelingUtils::getApproximateCollectionPointZInformation(std::vector<std::shared_ptr<md::mun::MuninMetadata>> const&,geo::Mercator2<double> const&,double const*)::$_0>,double ()(double const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MuninLabelingUtils::getApproximateCollectionPointZInformation(std::vector<std::shared_ptr<md::mun::MuninMetadata>> const&,geo::Mercator2<double> const&,double const*)::$_0,std::allocator<md::MuninLabelingUtils::getApproximateCollectionPointZInformation(std::vector<std::shared_ptr<md::mun::MuninMetadata>> const&,geo::Mercator2<double> const&,double const*)::$_0>,double ()(double const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_1E42CEFF0;
  return result;
}

void std::__function::__func<md::MuninLabelingUtils::getApproximateCollectionPointZInformation(std::vector<std::shared_ptr<md::mun::MuninMetadata>> const&,geo::Mercator2<double> const&,double const*)::$_0,std::allocator<md::MuninLabelingUtils::getApproximateCollectionPointZInformation(std::vector<std::shared_ptr<md::mun::MuninMetadata>> const&,geo::Mercator2<double> const&,double const*)::$_0>,double ()(double const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_1E42CEFF0;
}

double std::__function::__func<md::MuninLabelingUtils::getApproximateCollectionPointZInformation(std::vector<std::shared_ptr<md::mun::MuninMetadata>> const&,geo::Mercator2<double> const&,double const*)::$_0,std::allocator<md::MuninLabelingUtils::getApproximateCollectionPointZInformation(std::vector<std::shared_ptr<md::mun::MuninMetadata>> const&,geo::Mercator2<double> const&,double const*)::$_0>,double ()(double const&)>::operator()(uint64_t a1, double *a2)
{
  double result;

  result = 10.0;
  if (*a2 >= 0.1)
    return 1.0 / *a2;
  return result;
}

_QWORD *md::MuninLabelingUtils::clipRange(_QWORD *a1, _OWORD *a2, uint64_t *a3)
{
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  double v17;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  double *v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  uint64_t v26;
  _OWORD *v27;
  uint64_t v28;
  _OWORD v29[2];
  uint64_t v30;

  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  result = operator new(0x20uLL);
  *((_OWORD *)result + 1) = *a2;
  *result = a1;
  result[1] = a1;
  *a1 = result;
  a1[1] = result;
  a1[2] = 1;
  v8 = *a3;
  v7 = a3[1];
  if (v7 != *a3 && result != a1)
  {
    v9 = 0;
    while (1)
    {
      result = (_QWORD *)a1[1];
      if (result != a1)
        break;
LABEL_5:
      if (++v9 >= (unint64_t)((v7 - v8) >> 4))
        return result;
    }
    while (1)
    {
      v12 = *a3;
      v13 = *(double *)(*a3 + 16 * v9);
      v15 = *((double *)result + 2);
      v14 = *((double *)result + 3);
      if (v13 <= v15 && v14 <= *(double *)(v12 + 16 * v9 + 8))
      {
        v10 = *result;
        v11 = (_QWORD *)result[1];
        *(_QWORD *)(v10 + 8) = v11;
        *(_QWORD *)result[1] = v10;
        --a1[2];
        operator delete(result);
      }
      else
      {
        if (v15 < v13 && v14 > v13)
        {
          *(_QWORD *)&v29[0] = result[2];
          *((double *)v29 + 1) = v13;
          v17 = *(double *)(v12 + 16 * v9 + 8);
          v19 = v14 > v17 && v15 < v17;
          v20 = 1;
          v21 = 1;
          if (!v19)
            goto LABEL_29;
          goto LABEL_28;
        }
        v17 = *(double *)(v12 + 16 * v9 + 8);
        if (v14 > v17 && v15 < v17)
        {
          v20 = 0;
LABEL_28:
          v21 = v20 + 1;
          v30 = v20 + 1;
          v22 = (double *)&v29[v20];
          *v22 = v17;
          v22[1] = v14;
LABEL_29:
          v23 = *result;
          v11 = (_QWORD *)result[1];
          *(_QWORD *)(v23 + 8) = v11;
          *(_QWORD *)result[1] = v23;
          --a1[2];
          operator delete(result);
          v24 = a1[2];
          v25 = operator new(0x20uLL);
          v25[1] = v29[0];
          v26 = *v11;
          *(_QWORD *)(v26 + 8) = v25;
          *(_QWORD *)v25 = v26;
          *v11 = v25;
          *((_QWORD *)v25 + 1) = v11;
          a1[2] = v24 + 1;
          if (v21 != 1)
          {
            v27 = operator new(0x20uLL);
            v27[1] = v29[1];
            v28 = *v11;
            *(_QWORD *)(v28 + 8) = v27;
            *(_QWORD *)v27 = v28;
            *v11 = v27;
            *((_QWORD *)v27 + 1) = v11;
            a1[2] = v24 + 2;
          }
          goto LABEL_9;
        }
        v11 = (_QWORD *)result[1];
      }
LABEL_9:
      result = v11;
      if (v11 == a1)
      {
        v8 = *a3;
        v7 = a3[1];
        goto LABEL_5;
      }
    }
  }
  return result;
}

void sub_19FA6A6E8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::list<gm::Range<double>>::~list(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::list<gm::Range<double>>::~list(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v3 = *a1;
    v2 = (uint64_t *)a1[1];
    v4 = *v2;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v3 + 8) = v4;
    a1[2] = 0;
    if (v2 != a1)
    {
      do
      {
        v5 = (uint64_t *)v2[1];
        operator delete(v2);
        v2 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

void std::__function::__func<md::ita::UpdateTileRenderables::operator()(ecs2::Query<md::ls::TileRenderableDataHandle const&,md::ls::BoundsWidth const&,md::ls::NeedsUpdate<ggl::Tile::View> &,md::ls::TileViewConstantDataHandle &>)::$_0,std::allocator<md::ita::UpdateTileRenderables::operator()(ecs2::Query<md::ls::TileRenderableDataHandle const&,md::ls::BoundsWidth const&,md::ls::NeedsUpdate<ggl::Tile::View> &,md::ls::TileViewConstantDataHandle &>)::$_0>,void ()(md::ls::TileRenderableDataHandle const&,md::ls::BoundsWidth const&,md::ls::NeedsUpdate<ggl::Tile::View> &,md::ls::TileViewConstantDataHandle &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::ita::UpdateTileRenderables::operator()(ecs2::Query<md::ls::TileRenderableDataHandle const&,md::ls::BoundsWidth const&,md::ls::NeedsUpdate<ggl::Tile::View> &,md::ls::TileViewConstantDataHandle &>)::$_0,std::allocator<md::ita::UpdateTileRenderables::operator()(ecs2::Query<md::ls::TileRenderableDataHandle const&,md::ls::BoundsWidth const&,md::ls::NeedsUpdate<ggl::Tile::View> &,md::ls::TileViewConstantDataHandle &>)::$_0>,void ()(md::ls::TileRenderableDataHandle const&,md::ls::BoundsWidth const&,md::ls::NeedsUpdate<ggl::Tile::View> &,md::ls::TileViewConstantDataHandle &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E427B928;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<md::ita::UpdateTileRenderables::operator()(ecs2::Query<md::ls::TileRenderableDataHandle const&,md::ls::BoundsWidth const&,md::ls::NeedsUpdate<ggl::Tile::View> &,md::ls::TileViewConstantDataHandle &>)::$_0,std::allocator<md::ita::UpdateTileRenderables::operator()(ecs2::Query<md::ls::TileRenderableDataHandle const&,md::ls::BoundsWidth const&,md::ls::NeedsUpdate<ggl::Tile::View> &,md::ls::TileViewConstantDataHandle &>)::$_0>,void ()(md::ls::TileRenderableDataHandle const&,md::ls::BoundsWidth const&,md::ls::NeedsUpdate<ggl::Tile::View> &,md::ls::TileViewConstantDataHandle &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427B928;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *std::__function::__func<md::ita::UpdateTileRenderables::operator()(ecs2::Query<md::ls::TileRenderableDataHandle const&,md::ls::BoundsWidth const&,md::ls::NeedsUpdate<ggl::Tile::View> &,md::ls::TileViewConstantDataHandle &>)::$_0,std::allocator<md::ita::UpdateTileRenderables::operator()(ecs2::Query<md::ls::TileRenderableDataHandle const&,md::ls::BoundsWidth const&,md::ls::NeedsUpdate<ggl::Tile::View> &,md::ls::TileViewConstantDataHandle &>)::$_0>,void ()(md::ls::TileRenderableDataHandle const&,md::ls::BoundsWidth const&,md::ls::NeedsUpdate<ggl::Tile::View> &,md::ls::TileViewConstantDataHandle &)>::operator()(uint64_t a1, unint64_t *a2, float *a3, uint64_t a4, unint64_t *a5)
{
  _DWORD *RenderableData;
  double v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *result;
  uint64_t v17;
  unint64_t v18;
  char v19;
  _QWORD v20[3];
  _QWORD *v21;
  _QWORD v22[4];
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  RenderableData = (_DWORD *)md::VKMRenderResourcesStore::getRenderableData(**(_QWORD **)(a1 + 8), *a2);
  v9 = *(double *)(**(_QWORD **)(a1 + 16) + 3768)
     * *(double *)(**(_QWORD **)(a1 + 16) + 1384)
     / (*(double *)(**(_QWORD **)(a1 + 16) + 1368)
      * *a3);
  v10 = (_QWORD *)md::VKMRenderResourcesStore::getConstantData<ggl::Tile::View>(**(_QWORD **)(a1 + 8), *a5);
  v11 = v10[1];
  v12 = v10[9];
  *(_DWORD *)v12 = RenderableData[48];
  *(_DWORD *)(v12 + 4) = RenderableData[49];
  *(_DWORD *)(v12 + 8) = RenderableData[50];
  *(_DWORD *)(v12 + 12) = RenderableData[51];
  *(_DWORD *)(v12 + 16) = RenderableData[52];
  *(_DWORD *)(v12 + 20) = RenderableData[53];
  *(_DWORD *)(v12 + 24) = RenderableData[54];
  *(_DWORD *)(v12 + 28) = RenderableData[55];
  *(_DWORD *)(v12 + 32) = RenderableData[56];
  *(_DWORD *)(v12 + 36) = RenderableData[57];
  *(_DWORD *)(v12 + 40) = RenderableData[58];
  *(_DWORD *)(v12 + 44) = RenderableData[59];
  *(_DWORD *)(v12 + 48) = RenderableData[60];
  *(_DWORD *)(v12 + 52) = RenderableData[61];
  *(_DWORD *)(v12 + 56) = RenderableData[62];
  v13 = v9;
  *(_DWORD *)(v12 + 60) = RenderableData[63];
  *(float *)(v12 + 64) = v13;
  v14 = *(_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  v20[0] = &off_1E4282528;
  v20[1] = v14;
  v21 = v20;
  v22[0] = &off_1E4282528;
  v22[3] = v22;
  v22[1] = v14;
  v23 = 1;
  ecs2::Runtime::queueCommand(v15, (uint64_t)v22);
  if (v23 != -1)
    ((void (*)(char *, _QWORD *))off_1E42FB340[v23])(&v19, v22);
  v23 = -1;
  result = v21;
  if (v21 == v20)
  {
    v17 = 4;
    result = v20;
  }
  else
  {
    if (!v21)
      goto LABEL_8;
    v17 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v17))();
LABEL_8:
  v18 = v10[8];
  if (v18 <= v11)
    v18 = v11;
  v10[7] = 0;
  v10[8] = v18;
  return result;
}

void std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::NeedsUpdate<ggl::Tile::View>>(gdc::Entity,std::type_identity<md::ls::NeedsUpdate<ggl::Tile::View>>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::NeedsUpdate<ggl::Tile::View>>(gdc::Entity,std::type_identity<md::ls::NeedsUpdate<ggl::Tile::View>>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::NeedsUpdate<ggl::Tile::View>>(gdc::Entity,std::type_identity<md::ls::NeedsUpdate<ggl::Tile::View>>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::NeedsUpdate<ggl::Tile::View>>(gdc::Entity,std::type_identity<md::ls::NeedsUpdate<ggl::Tile::View>>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4282528;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::NeedsUpdate<ggl::Tile::View>>(gdc::Entity,std::type_identity<md::ls::NeedsUpdate<ggl::Tile::View>>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::NeedsUpdate<ggl::Tile::View>>(gdc::Entity,std::type_identity<md::ls::NeedsUpdate<ggl::Tile::View>>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4282528;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

BOOL std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::NeedsUpdate<ggl::Tile::View>>(gdc::Entity,std::type_identity<md::ls::NeedsUpdate<ggl::Tile::View>>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::NeedsUpdate<ggl::Tile::View>>(gdc::Entity,std::type_identity<md::ls::NeedsUpdate<ggl::Tile::View>>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)gdc::Registry::storage<md::ls::NeedsUpdate<ggl::Tile::View>>(a2);
  return gdc::ComponentStorageWrapper<md::ls::NeedsUpdate<ggl::Tile::View>>::remove(v3, *(_QWORD *)(a1 + 8));
}

void std::__function::__func<md::ita::UpdateTileTransforms::operator()(ecs2::Query<md::ls::TileBounds const&,md::ls::TileMatrix const&,md::ls::TileTransformConstantDataHandle &>)::$_0,std::allocator<md::ita::UpdateTileTransforms::operator()(ecs2::Query<md::ls::TileBounds const&,md::ls::TileMatrix const&,md::ls::TileTransformConstantDataHandle &>)::$_0>,void ()(md::ls::TileBounds const&,md::ls::TileMatrix const&,md::ls::TileTransformConstantDataHandle &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::ita::UpdateTileTransforms::operator()(ecs2::Query<md::ls::TileBounds const&,md::ls::TileMatrix const&,md::ls::TileTransformConstantDataHandle &>)::$_0,std::allocator<md::ita::UpdateTileTransforms::operator()(ecs2::Query<md::ls::TileBounds const&,md::ls::TileMatrix const&,md::ls::TileTransformConstantDataHandle &>)::$_0>,void ()(md::ls::TileBounds const&,md::ls::TileMatrix const&,md::ls::TileTransformConstantDataHandle &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E427B730;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<md::ita::UpdateTileTransforms::operator()(ecs2::Query<md::ls::TileBounds const&,md::ls::TileMatrix const&,md::ls::TileTransformConstantDataHandle &>)::$_0,std::allocator<md::ita::UpdateTileTransforms::operator()(ecs2::Query<md::ls::TileBounds const&,md::ls::TileMatrix const&,md::ls::TileTransformConstantDataHandle &>)::$_0>,void ()(md::ls::TileBounds const&,md::ls::TileMatrix const&,md::ls::TileTransformConstantDataHandle &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427B730;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *std::__function::__func<md::ita::UpdateTileTransforms::operator()(ecs2::Query<md::ls::TileBounds const&,md::ls::TileMatrix const&,md::ls::TileTransformConstantDataHandle &>)::$_0,std::allocator<md::ita::UpdateTileTransforms::operator()(ecs2::Query<md::ls::TileBounds const&,md::ls::TileMatrix const&,md::ls::TileTransformConstantDataHandle &>)::$_0>,void ()(md::ls::TileBounds const&,md::ls::TileMatrix const&,md::ls::TileTransformConstantDataHandle &)>::operator()(_QWORD *result, uint64_t a2, unint64_t *a3, unint64_t *a4)
{
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  BOOL v20;
  uint64_t v21;
  unint64_t v23;

  v5 = result;
  v6 = *a4;
  v7 = *(_QWORD **)result[1];
  v23 = v6;
  v8 = v7[417];
  if (v6 >= (unint64_t)((v7[418] - v8) >> 3)
    || ((v9 = *(_QWORD *)(v8 + 8 * v6)) != 0 ? (v10 = HIDWORD(v6) == HIDWORD(v9)) : (v10 = 0),
        !v10
     || ((v18 = v7[420], v19 = (_QWORD *)(v18 + 24 * v9), v19 != (_QWORD *)v7[421])
       ? (v20 = v18 == 0)
       : (v20 = 1),
         v20)))
  {
    v11 = 0;
  }
  else
  {
    result = std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::Tile::Transform>> const&>,std::tuple<>>((uint64_t)(v7 + 409), v6, &v23);
    ++result[3];
    v11 = (_QWORD *)*v19;
    v7 = *(_QWORD **)v5[1];
  }
  v12 = *a3;
  v23 = v12;
  v13 = v7[1166];
  if (v12 < (unint64_t)((v7[1167] - v13) >> 3))
  {
    v14 = *(_QWORD *)(v13 + 8 * v12);
    if (v14 && HIDWORD(v12) == HIDWORD(v14))
    {
      v21 = v7[1169];
      if (v21 + ((unint64_t)v14 << 8) != v7[1170] && v21 != 0)
      {
        result = std::__hash_table<std::__hash_value_type<geo::handle<md::TileMatrix>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::TileMatrix>,std::__hash_value_type<geo::handle<md::TileMatrix>,md::Counter>,std::hash<geo::handle<md::TileMatrix>>,std::equal_to<geo::handle<md::TileMatrix>>,true>,std::__unordered_map_equal<geo::handle<md::TileMatrix>,std::__hash_value_type<geo::handle<md::TileMatrix>,md::Counter>,std::equal_to<geo::handle<md::TileMatrix>>,std::hash<geo::handle<md::TileMatrix>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::TileMatrix>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::TileMatrix>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::TileMatrix> const&>,std::tuple<>>((uint64_t)(v7 + 1158), v12, &v23);
        ++result[3];
      }
    }
  }
  v16 = v11[1];
  if (v16)
    v17 = v11[9];
  else
    v17 = 0;
  *(_DWORD *)(v17 + 348) = *(_DWORD *)v5[3];
  *(_DWORD *)(v17 + 344) = *(_DWORD *)v5[4];
  if (v17 && v16)
  {
    if (v11[8] > v16)
      v16 = v11[8];
    v11[7] = 0;
    v11[8] = v16;
  }
  return result;
}

void std::__function::__func<md::ita::UpdateCameraStyleLight::operator()(ecs2::Query<md::ls::TileMatrix const&,md::ls::TileStyleCameraConstantDataHandle &>)::$_0,std::allocator<md::ita::UpdateCameraStyleLight::operator()(ecs2::Query<md::ls::TileMatrix const&,md::ls::TileStyleCameraConstantDataHandle &>)::$_0>,void ()(md::ls::TileMatrix const&,md::ls::TileStyleCameraConstantDataHandle &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::ita::UpdateCameraStyleLight::operator()(ecs2::Query<md::ls::TileMatrix const&,md::ls::TileStyleCameraConstantDataHandle &>)::$_0,std::allocator<md::ita::UpdateCameraStyleLight::operator()(ecs2::Query<md::ls::TileMatrix const&,md::ls::TileStyleCameraConstantDataHandle &>)::$_0>,void ()(md::ls::TileMatrix const&,md::ls::TileStyleCameraConstantDataHandle &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427BA48;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::ita::UpdateCameraStyleLight::operator()(ecs2::Query<md::ls::TileMatrix const&,md::ls::TileStyleCameraConstantDataHandle &>)::$_0,std::allocator<md::ita::UpdateCameraStyleLight::operator()(ecs2::Query<md::ls::TileMatrix const&,md::ls::TileStyleCameraConstantDataHandle &>)::$_0>,void ()(md::ls::TileMatrix const&,md::ls::TileStyleCameraConstantDataHandle &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427BA48;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *std::__function::__func<md::ita::UpdateCameraStyleLight::operator()(ecs2::Query<md::ls::TileMatrix const&,md::ls::TileStyleCameraConstantDataHandle &>)::$_0,std::allocator<md::ita::UpdateCameraStyleLight::operator()(ecs2::Query<md::ls::TileMatrix const&,md::ls::TileStyleCameraConstantDataHandle &>)::$_0>,void ()(md::ls::TileMatrix const&,md::ls::TileStyleCameraConstantDataHandle &)>::operator()(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  float64x2_t *v12;
  _QWORD *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  _QWORD *result;
  unint64_t v19;
  double *v20;
  double v21;
  double v22;
  double v23;
  float32x2_t v24;
  float32x2_t *v25;
  unint64_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  unint64_t v31;

  v5 = *a2;
  v6 = **(_QWORD ***)(a1 + 8);
  v31 = v5;
  v7 = v6[1166];
  if (v5 < (unint64_t)((v6[1167] - v7) >> 3)
    && ((v8 = *(_QWORD *)(v7 + 8 * v5)) != 0 ? (v9 = HIDWORD(v5) == HIDWORD(v8)) : (v9 = 0), v9))
  {
    v11 = v6[1169] + ((unint64_t)*(_QWORD *)(v7 + 8 * v5) << 8);
    v10 = v6[1170];
  }
  else
  {
    v10 = v6[1170];
    v11 = v10;
  }
  if (v11 == v10)
    v12 = 0;
  else
    v12 = (float64x2_t *)v11;
  if (v12)
  {
    v13 = std::__hash_table<std::__hash_value_type<geo::handle<md::TileMatrix>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::TileMatrix>,std::__hash_value_type<geo::handle<md::TileMatrix>,md::Counter>,std::hash<geo::handle<md::TileMatrix>>,std::equal_to<geo::handle<md::TileMatrix>>,true>,std::__unordered_map_equal<geo::handle<md::TileMatrix>,std::__hash_value_type<geo::handle<md::TileMatrix>,md::Counter>,std::equal_to<geo::handle<md::TileMatrix>>,std::hash<geo::handle<md::TileMatrix>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::TileMatrix>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::TileMatrix>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::TileMatrix> const&>,std::tuple<>>((uint64_t)(v6 + 1158), v5, &v31);
    ++v13[3];
    v6 = **(_QWORD ***)(a1 + 8);
  }
  v14 = v12[9].f64[0];
  v15 = v12[11].f64[0];
  v16 = v12[13].f64[0];
  v17 = v12[15].f64[0];
  v28 = v12[8];
  v29 = v12[10];
  v30 = v12[12];
  v27 = v12[14];
  result = (_QWORD *)md::VKMRenderResourcesStore::getConstantData<ggl::DaVinci::StyleCameraLighting>((uint64_t)v6, *a3);
  v19 = result[1];
  v20 = *(double **)(a1 + 16);
  v21 = v20[1];
  v22 = v20[2];
  v23 = v17 + *v20 * v14 + v21 * v15 + v22 * v16;
  v24 = vcvt_f32_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v27, v28, *v20), v29, v21), v30, v22));
  *(float *)&v23 = v23;
  v26 = result[8];
  v25 = (float32x2_t *)result[9];
  *v25 = v24;
  v25[1].i32[0] = LODWORD(v23);
  if (v26 > v19)
    v19 = v26;
  result[7] = 0;
  result[8] = v19;
  return result;
}

void md::FlyoverRenderLayer::~FlyoverRenderLayer(md::FlyoverRenderLayer *this)
{
  *(_QWORD *)this = &off_1E42947D8;
  md::FlyoverRenderResources::~FlyoverRenderResources((md::FlyoverRenderLayer *)((char *)this + 368));
  md::CartographicTiledVectorRenderLayer<md::FlyoverRenderable>::~CartographicTiledVectorRenderLayer(this);
}

{
  *(_QWORD *)this = &off_1E42947D8;
  md::FlyoverRenderResources::~FlyoverRenderResources((md::FlyoverRenderLayer *)((char *)this + 368));
  md::CartographicTiledVectorRenderLayer<md::FlyoverRenderable>::~CartographicTiledVectorRenderLayer(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t *md::FlyoverRenderLayer::layout(uint64_t **this, const md::LayoutContext *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v6;
  void (***v7)(void);
  void (**v8)(void);
  uint64_t *v9;
  int8x8_t v10;
  uint8x8_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  int v37;
  id v38;
  float v39;
  float v40;
  float v41;
  BOOL v42;
  float v43;
  long double v44;
  double v45;
  float v46;
  float v47;
  double v48;
  double v49;
  __double2 v50;
  double v51;
  __double2 v52;
  float v53;
  float v54;
  double v55;
  float v56;
  float v57;
  double v58;
  double v59;
  float v60;
  unint64_t v61;
  _QWORD *v62;
  int8x8_t v63;
  uint8x8_t v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unsigned __int8 *v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  int8x8_t v103;
  uint8x8_t v104;
  unint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *result;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  float32x2_t **v121;
  _QWORD *v122;
  float32x2_t *v123;
  float32x2_t *v124;
  uint64_t v125;
  _QWORD *v126;
  _QWORD *v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  unint64_t v137;
  float32x4_t *v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float32x4_t v143;
  float v144;
  float v145;
  float v146;
  unint64_t v147;
  _QWORD *v148;
  double v149;
  int8x16_t v150;
  double v151;
  double v152;
  int8x16_t v153;
  int8x16_t v154;
  uint64_t v155;
  uint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  unint64_t v160;
  float64x2_t *v161;
  float32x2_t v162;
  int8x16_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  unint64_t v171;
  _QWORD *v172;
  uint64_t v173;
  uint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  unint64_t v178;
  float32x2_t *v179;
  uint64_t v180;
  _QWORD *v181;
  _QWORD *v182;
  std::__shared_weak_count *v183;
  unint64_t *p_shared_owners;
  unint64_t v185;
  _QWORD *v186;
  uint64_t v187;
  uint64_t v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  unint64_t v192;
  float32x4_t *v193;
  float v194;
  float v195;
  float v196;
  float v197;
  float32x4_t v198;
  float v199;
  float v200;
  float v201;
  unint64_t v202;
  _QWORD *v203;
  double v204;
  int8x16_t v205;
  double v206;
  double v207;
  int8x16_t v208;
  int8x16_t v209;
  uint64_t v210;
  uint64_t v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  unint64_t v215;
  float64x2_t *v216;
  float32x2_t v217;
  int8x16_t v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  unint64_t v226;
  _QWORD *v227;
  uint64_t v228;
  uint64_t v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  unint64_t v233;
  void *v234;
  int v235;
  char *v236;
  int v237;
  int v238;
  _QWORD *v239;
  _OWORD *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  int v244;
  uint64_t *v245;
  uint64_t *v246;
  int v247;
  float64x2_t v248;
  uint64_t **v249;
  unint64_t v250;
  uint64_t v251;
  uint64_t v252;
  unint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t *v256;
  uint64_t *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  unint64_t v261;
  uint64_t *v262;
  uint64_t v263;
  uint64_t *v264;
  __int128 *v265;
  uint64_t v266;
  __int128 v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  _QWORD *v271;
  uint64_t v272;
  uint64_t v273;
  __int128 v274;
  uint64_t v275;
  double v276[16];
  _OWORD v277[8];
  double v278[16];
  __int128 v279;
  uint64_t v280;
  unint64_t v281;
  __int16 v282;
  uint64_t v283;
  double v284;
  double v285;
  double v286;
  double v287;
  double v288;
  double v289;
  double v290;
  double v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  uint64_t v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  uint64_t v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  uint64_t v313;
  char v314;
  uint64_t v315;
  char v316;
  uint64_t v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  int v323;
  uint64_t v324;
  __int128 v325;
  __int128 v326;
  _BYTE v327[48];
  double v328;
  uint64_t v329;
  float64x2_t v330;
  double v331;
  uint64_t v332;
  float64x2_t v333;
  double v334;
  uint64_t v335;
  float64x2_t v336;
  float64x2_t v337;
  float64x2_t v338;
  float64x2_t v339;
  float64x2_t v340;
  float64x2_t v341;
  float64x2_t v342;
  float64x2_t v343;
  uint64_t v344;

  v344 = *MEMORY[0x1E0C80C00];
  ggl::FragmentedPool<ggl::RenderItem>::pushAll(this[186]);
  ggl::FragmentedPool<ggl::RenderItem>::pushAll(this[189]);
  ggl::FragmentedPool<ggl::RenderItem>::pushAll(this[192]);
  ggl::FragmentedPool<ggl::RenderItem>::pushAll(this[195]);
  ggl::FragmentedPool<ggl::RenderItem>::pushAll(this[198]);
  ggl::FragmentedPool<ggl::RenderItem>::pushAll(this[199]);
  ggl::FragmentedPool<ggl::RenderItem>::pushAll(this[200]);
  ggl::FragmentedPool<ggl::RenderItem>::pushAll(this[201]);
  ggl::FragmentedPool<ggl::RenderItem>::pushAll(this[202]);
  v4 = this[46];
  if (v4)
  {
    do
    {
      if (v4[1])
      {
        v6 = 0;
        v7 = (void (***)(void))(v4 + 2);
        do
        {
          v8 = *v7;
          v7 += 15;
          (*v8)();
          ++v6;
        }
        while (v6 < v4[1]);
      }
      v4[1] = 0;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
    v5 = this[46];
  }
  else
  {
    v5 = 0;
  }
  this[47] = v5;
  v9 = (uint64_t *)*((_QWORD *)a2 + 1);
  v10 = (int8x8_t)v9[1];
  v11 = (uint8x8_t)vcnt_s8(v10);
  v11.i16[0] = vaddlv_u8(v11);
  v12 = v11.u32[0];
  if (v11.u32[0] >= 2uLL)
  {
    v15 = 0xE42D19AFCA302E68;
    if (*(_QWORD *)&v10 <= 0xE42D19AFCA302E68)
      v15 = 0xE42D19AFCA302E68 % *(_QWORD *)&v10;
    v13 = *v9;
    v14 = *(_QWORD **)(v13 + 8 * v15);
    do
    {
      do
        v14 = (_QWORD *)*v14;
      while (v14[1] != 0xE42D19AFCA302E68);
    }
    while (v14[2] != 0xE42D19AFCA302E68);
  }
  else
  {
    v13 = *v9;
    v14 = *(_QWORD **)(v13 + 8 * ((*(_QWORD *)&v10 - 1) & 0xE42D19AFCA302E68));
    do
    {
      do
        v14 = (_QWORD *)*v14;
      while (v14[1] != 0xE42D19AFCA302E68);
    }
    while (v14[2] != 0xE42D19AFCA302E68);
  }
  v16 = *(unsigned __int8 *)(*(_QWORD *)(v14[5] + 32) + 72);
  v17 = this[196];
  v279 = 0uLL;
  v18 = v17[1];
  *(_QWORD *)&v19 = 0;
  *((_QWORD *)&v19 + 1) = v17;
  if (v18)
    v20 = v17[9];
  else
    v20 = 0;
  v279 = v19;
  v280 = 0;
  v281 = v18;
  v283 = v20;
  v282 = 1;
  if (v12 > 1)
  {
    v21 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v10 <= 0x1AF456233693CD46uLL)
      v21 = 0x1AF456233693CD46uLL % *(_QWORD *)&v10;
  }
  else
  {
    v21 = (*(_QWORD *)&v10 - 1) & 0x1AF456233693CD46;
  }
  v22 = *(_QWORD **)(v13 + 8 * v21);
  v274 = v19;
  if (!v22)
    goto LABEL_44;
  v23 = (_QWORD *)*v22;
  if (!v23)
    goto LABEL_44;
  if (v12 < 2)
  {
    while (1)
    {
      v25 = v23[1];
      if (v25 == 0x1AF456233693CD46)
      {
        if (v23[2] == 0x1AF456233693CD46)
          goto LABEL_42;
      }
      else if ((v25 & (*(_QWORD *)&v10 - 1)) != v21)
      {
        goto LABEL_44;
      }
      v23 = (_QWORD *)*v23;
      if (!v23)
        goto LABEL_44;
    }
  }
  while (1)
  {
    v24 = v23[1];
    if (v24 == 0x1AF456233693CD46)
      break;
    if (v24 >= *(_QWORD *)&v10)
      v24 %= *(_QWORD *)&v10;
    if (v24 != v21)
      goto LABEL_44;
LABEL_31:
    v23 = (_QWORD *)*v23;
    if (!v23)
      goto LABEL_44;
  }
  if (v23[2] != 0x1AF456233693CD46)
    goto LABEL_31;
LABEL_42:
  v26 = v23[5];
  if (*(_QWORD *)(v26 + 8) == 0x1AF456233693CD46)
  {
    v27 = *(_QWORD *)(v26 + 32);
    goto LABEL_45;
  }
LABEL_44:
  v27 = 0;
LABEL_45:
  *(float32x4_t *)v20 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v27 + 552)), *(float64x2_t *)(v27 + 568));
  *(float32x4_t *)(v20 + 16) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v27 + 584)), *(float64x2_t *)(v27 + 600));
  *(float32x4_t *)(v20 + 32) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v27 + 616)), *(float64x2_t *)(v27 + 632));
  *(float32x4_t *)(v20 + 48) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v27 + 648)), *(float64x2_t *)(v27 + 664));
  if (v12 > 1)
  {
    v28 = 0x41E8D6E445F4145;
    if (*(_QWORD *)&v10 <= 0x41E8D6E445F4145uLL)
      v28 = 0x41E8D6E445F4145uLL % *(_QWORD *)&v10;
  }
  else
  {
    v28 = (*(_QWORD *)&v10 - 1) & 0x41E8D6E445F4145;
  }
  v29 = *(_QWORD **)(v13 + 8 * v28);
  if (!v29)
    goto LABEL_68;
  v30 = (_QWORD *)*v29;
  if (!v30)
    goto LABEL_68;
  if (v12 < 2)
  {
    v31 = *(_QWORD *)&v10 - 1;
    while (1)
    {
      v33 = v30[1];
      if (v33 == 0x41E8D6E445F4145)
      {
        if (v30[2] == 0x41E8D6E445F4145)
          goto LABEL_65;
      }
      else if ((v33 & v31) != v28)
      {
        goto LABEL_68;
      }
      v30 = (_QWORD *)*v30;
      if (!v30)
        goto LABEL_68;
    }
  }
  while (2)
  {
    v32 = v30[1];
    if (v32 != 0x41E8D6E445F4145)
    {
      if (v32 >= *(_QWORD *)&v10)
        v32 %= *(_QWORD *)&v10;
      if (v32 != v28)
        goto LABEL_68;
      goto LABEL_54;
    }
    if (v30[2] != 0x41E8D6E445F4145)
    {
LABEL_54:
      v30 = (_QWORD *)*v30;
      if (!v30)
        goto LABEL_68;
      continue;
    }
    break;
  }
LABEL_65:
  v34 = v30[5];
  if (*(_QWORD *)(v34 + 8) == 0x41E8D6E445F4145)
  {
    v35 = *(_QWORD *)(v34 + 32);
    if (v35)
    {
      v36 = *(double *)(v35 + 176);
      *(float32x2_t *)(v20 + 96) = vcvt_f32_f64(*(float64x2_t *)(v35 + 160));
      *(float *)(v20 + 104) = v36;
      v37 = *(_DWORD *)(v35 + 424);
      goto LABEL_69;
    }
  }
LABEL_68:
  v38 = objc_alloc_init(MEMORY[0x1E0D26ED0]);
  v291 = 0.0;
  v336.f64[0] = 0.0;
  *(_QWORD *)v327 = 0;
  objc_msgSend(v38, "calculateGeocentricDirectionForSunX:Y:Z:", &v291, &v336, v327);
  v39 = v291;
  v40 = v336.f64[0];
  v41 = *(double *)v327;
  *(float *)(v20 + 96) = v39;
  *(float *)(v20 + 100) = v40;
  *(float *)(v20 + 104) = v41;

  v37 = 0;
LABEL_69:
  v42 = *(double *)(v27 + 32) < 6378137.0 && v16 == 1;
  *(_DWORD *)(v20 + 112) = v37;
  v43 = -1.0;
  if (!v42)
    v43 = 1.0;
  if (**((_BYTE **)a2 + 9))
    v43 = 0.0;
  *(float32x2_t *)(v20 + 64) = vmul_n_f32((float32x2_t)0x3F4CCCCD3F333333, v43);
  *(float *)(v20 + 72) = v43;
  v44 = *(double *)(v27 + 512);
  v45 = *(double *)(v27 + 496) * *(double *)(v27 + 496) + *(double *)(v27 + 504) * *(double *)(v27 + 504);
  v46 = sqrt(v45 + v44 * v44) + -6371008.77;
  v47 = fmaxf(v46, 0.0);
  v48 = sqrt(v45);
  v49 = atan2(v44, v48 * 0.996647189);
  v50 = __sincos_stret(v49);
  v51 = atan2(v44 + v50.__sinval * v50.__sinval * 42841.3115 * v50.__sinval, v48 + v50.__cosval * v50.__cosval * -42697.6727 * v50.__cosval);
  v52 = __sincos_stret(v51);
  v53 = v48 / v52.__cosval - 6378137.0 / sqrt(v52.__sinval * v52.__sinval * -0.00669437999 + 1.0);
  v54 = fmaxf(v53, 1.0);
  v55 = v54;
  v56 = sqrt((float)(v54 * v54) + v54 * 12742017.5);
  v57 = v56 - v47;
  v58 = fmax(v55, 0.0);
  if (v58 <= 8000.0)
    v59 = v58 * 0.000125;
  else
    v59 = 1.0;
  v60 = v57 + (v59 * v59 * (v59 * 2.0 + -3.0) + 1.0) * (float)(v57 * -0.5);
  *(float *)(v20 + 80) = v47;
  *(float *)(v20 + 84) = v60;
  if (v18)
  {
    if ((_QWORD)v274 && *(_BYTE *)(*((_QWORD *)&v274 + 1) + 17) != 2)
      (*(void (**)(void))(*(_QWORD *)v274 + 64))();
    v61 = *(_QWORD *)(*((_QWORD *)&v274 + 1) + 64);
    if (v61 <= v18)
      v61 = v18;
    *(_QWORD *)(*((_QWORD *)&v274 + 1) + 56) = 0;
    *(_QWORD *)(*((_QWORD *)&v274 + 1) + 64) = v61;
  }
  v62 = (_QWORD *)*((_QWORD *)a2 + 1);
  v63 = (int8x8_t)v62[1];
  if (v63)
  {
    v64 = (uint8x8_t)vcnt_s8(v63);
    v64.i16[0] = vaddlv_u8(v64);
    if (v64.u32[0] > 1uLL)
    {
      v65 = 0x1AF456233693CD46;
      if (*(_QWORD *)&v63 <= 0x1AF456233693CD46uLL)
        v65 = 0x1AF456233693CD46uLL % *(_QWORD *)&v63;
    }
    else
    {
      v65 = (*(_QWORD *)&v63 - 1) & 0x1AF456233693CD46;
    }
    v66 = *(_QWORD **)(*v62 + 8 * v65);
    if (v66)
    {
      v67 = (_QWORD *)*v66;
      if (v67)
      {
        if (v64.u32[0] < 2uLL)
        {
          v68 = *(_QWORD *)&v63 - 1;
          while (1)
          {
            v70 = v67[1];
            if (v70 == 0x1AF456233693CD46)
            {
              if (v67[2] == 0x1AF456233693CD46)
                goto LABEL_106;
            }
            else if ((v70 & v68) != v65)
            {
              goto LABEL_106;
            }
            v67 = (_QWORD *)*v67;
            if (!v67)
              goto LABEL_106;
          }
        }
        do
        {
          v69 = v67[1];
          if (v69 == 0x1AF456233693CD46)
          {
            if (v67[2] == 0x1AF456233693CD46)
              break;
          }
          else
          {
            if (v69 >= *(_QWORD *)&v63)
              v69 %= *(_QWORD *)&v63;
            if (v69 != v65)
              break;
          }
          v67 = (_QWORD *)*v67;
        }
        while (v67);
      }
    }
  }
LABEL_106:
  md::LayoutContext::frameState(a2);
  LOBYTE(v291) = *(_BYTE *)(v71 + 128);
  v292 = *(_OWORD *)(v71 + 136);
  v293 = *(_OWORD *)(v71 + 152);
  v294 = *(_OWORD *)(v71 + 168);
  v295 = *(_OWORD *)(v71 + 184);
  v296 = *(_QWORD *)(v71 + 200);
  v72 = *(_OWORD *)(v71 + 224);
  v297 = *(_OWORD *)(v71 + 208);
  v298 = v72;
  v299 = *(_OWORD *)(v71 + 240);
  v73 = *(_OWORD *)(v71 + 440);
  v311 = *(_OWORD *)(v71 + 424);
  v312 = v73;
  v74 = *(_OWORD *)(v71 + 408);
  v75 = *(_QWORD *)(v71 + 256);
  v309 = *(_OWORD *)(v71 + 392);
  v310 = v74;
  v76 = *(_QWORD *)(v71 + 456);
  v300 = v75;
  v313 = v76;
  v306 = *(_OWORD *)(v71 + 344);
  v307 = *(_OWORD *)(v71 + 360);
  v308 = *(_OWORD *)(v71 + 376);
  v302 = *(_OWORD *)(v71 + 280);
  v303 = *(_OWORD *)(v71 + 296);
  v304 = *(_OWORD *)(v71 + 312);
  v305 = *(_OWORD *)(v71 + 328);
  v301 = *(_OWORD *)(v71 + 264);
  v314 = 0;
  if (*(_BYTE *)(v71 + 464))
  {
    v315 = *(_QWORD *)(v71 + 472);
    v314 = 1;
  }
  v316 = 0;
  if (*(_BYTE *)(v71 + 480))
  {
    v317 = *(_QWORD *)(v71 + 488);
    v316 = 1;
  }
  v77 = *(_OWORD *)(v71 + 512);
  v318 = *(_OWORD *)(v71 + 496);
  v319 = v77;
  v78 = *(_OWORD *)(v71 + 544);
  v320 = *(_OWORD *)(v71 + 528);
  v321 = v78;
  v322 = *(_OWORD *)(v71 + 560);
  v323 = *(_DWORD *)(v71 + 576);
  v324 = *(_QWORD *)(v71 + 584);
  v79 = *(_OWORD *)(v71 + 608);
  v325 = *(_OWORD *)(v71 + 592);
  v326 = v79;
  gdc::CameraView::geocentricCameraView((gdc::CameraView *)&v279, (const Camera *)&v291);
  v80 = -(v286 * v288 - v285 * v289) - (v286 * v288 - v285 * v289);
  v81 = -(v284 * v289 - v286 * v287) - (v284 * v289 - v286 * v287);
  v82 = -(v285 * v287 - v284 * v288) - (v285 * v287 - v284 * v288);
  v83 = -(v82 * v287 - (-(v285 - v80 * v289) - v81 * v290));
  v84 = -(v284 + v80 * v290 + v81 * v289 - v82 * v288);
  v85 = -(v286 + v80 * v288 + v82 * v290 - v81 * v287);
  v86 = -(v288 * (v288 * -2.0));
  v87 = v289 * -2.0 * v290;
  v88 = v290 * (v288 * -2.0);
  v89 = v287 * -2.0 * v287 + 1.0;
  v90 = v290 * (v287 * -2.0);
  v278[0] = 1.0 - (v86 - v289 * (v289 * -2.0));
  v278[1] = v87 - v288 * (v287 * -2.0);
  v278[4] = -(v288 * (v287 * -2.0)) - v87;
  v278[5] = v89 - -(v289 * (v289 * -2.0));
  v278[8] = v88 - v289 * (v287 * -2.0);
  v278[9] = -(v289 * (v288 * -2.0)) - v90;
  v278[2] = -(v289 * (v287 * -2.0)) - v88;
  v278[6] = v90 - v289 * (v288 * -2.0);
  v278[10] = v89 - v86;
  v278[3] = 0.0;
  v278[7] = 0.0;
  v278[11] = 0.0;
  v278[12] = v84;
  v278[13] = v83;
  v278[14] = v85;
  v278[15] = 1.0;
  v91 = *(_QWORD **)(this[5][3] + 8);
  v92 = v91[3];
  v93 = v91[4];
  v94 = v93 - v92;
  if (v93 == v92)
    goto LABEL_117;
  v95 = 0;
  v96 = v94 >> 3;
  while (1)
  {
    v97 = *(unsigned __int8 **)(v92 + 8 * v95);
    if (*v97 == *((unsigned __int8 *)this + 361))
    {
      v98 = *((_QWORD *)v97 + 1);
      v99 = v91[15];
      if (v98 < (v91[16] - v99) >> 3)
        break;
    }
    if (++v95 >= v96)
      goto LABEL_117;
  }
  v100 = *(_QWORD *)(v99 + 8 * v98);
  if (!v100)
LABEL_117:
    v101 = 0;
  else
    v101 = *(_QWORD *)(*(_QWORD *)(v100 + 24) + 8 * *((unsigned __int8 *)this + 362));
  *(_QWORD *)(v101 + 32) = this[204];
  v102 = (_QWORD *)*((_QWORD *)a2 + 1);
  v103 = (int8x8_t)v102[1];
  if (!*(_QWORD *)&v103)
    goto LABEL_141;
  v104 = (uint8x8_t)vcnt_s8(v103);
  v104.i16[0] = vaddlv_u8(v104);
  if (v104.u32[0] > 1uLL)
  {
    v105 = 0xF014CCE28176CA44;
    if (*(_QWORD *)&v103 <= 0xF014CCE28176CA44)
      v105 = 0xF014CCE28176CA44 % *(_QWORD *)&v103;
  }
  else
  {
    v105 = (*(_QWORD *)&v103 - 1) & 0xF014CCE28176CA44;
  }
  v106 = *(_QWORD **)(*v102 + 8 * v105);
  if (!v106)
    goto LABEL_141;
  v107 = (_QWORD *)*v106;
  if (!v107)
    goto LABEL_141;
  if (v104.u32[0] < 2uLL)
  {
    v108 = *(_QWORD *)&v103 - 1;
    while (1)
    {
      v110 = v107[1];
      if (v110 == 0xF014CCE28176CA44)
      {
        if (v107[2] == 0xF014CCE28176CA44)
          goto LABEL_139;
      }
      else if ((v110 & v108) != v105)
      {
        goto LABEL_141;
      }
      v107 = (_QWORD *)*v107;
      if (!v107)
        goto LABEL_141;
    }
  }
  while (2)
  {
    v109 = v107[1];
    if (v109 != 0xF014CCE28176CA44)
    {
      if (v109 >= *(_QWORD *)&v103)
        v109 %= *(_QWORD *)&v103;
      if (v109 != v105)
        goto LABEL_141;
      goto LABEL_128;
    }
    if (v107[2] != 0xF014CCE28176CA44)
    {
LABEL_128:
      v107 = (_QWORD *)*v107;
      if (!v107)
        goto LABEL_141;
      continue;
    }
    break;
  }
LABEL_139:
  v111 = v107[5];
  if (*(_QWORD *)(v111 + 8) == 0xF014CCE28176CA44)
  {
    v271 = *(_QWORD **)(v111 + 32);
    goto LABEL_142;
  }
LABEL_141:
  v271 = 0;
LABEL_142:
  result = (uint64_t *)((uint64_t (*)(uint64_t **, const md::LayoutContext *))(*this)[12])(this, a2);
  v113 = *result;
  v270 = result[1];
  if (*result == v270)
    return result;
  while (2)
  {
    v272 = v113;
    v114 = *(_QWORD *)(*(_QWORD *)v113 + 8);
    v115 = (**(uint64_t (***)(uint64_t))(v114 + 632))(v114 + 632);
    v275 = v114;
    v116 = *(_OWORD *)(v114 + 424);
    v277[4] = *(_OWORD *)(v114 + 408);
    v277[5] = v116;
    v117 = *(_OWORD *)(v114 + 456);
    v277[6] = *(_OWORD *)(v114 + 440);
    v277[7] = v117;
    v118 = *(_OWORD *)(v114 + 360);
    v277[0] = *(_OWORD *)(v114 + 344);
    v277[1] = v118;
    v119 = *(_OWORD *)(v114 + 392);
    v277[2] = *(_OWORD *)(v114 + 376);
    v277[3] = v119;
    gm::operator*<double,4,4,4>(v276, v278, (double *)v277);
    result = md::MeshRenderableContext::renderablesForRegistry(v271, v115);
    v121 = (float32x2_t **)*result;
    v120 = result[1];
    v273 = v120;
    while (2)
    {
      if (v121 != (float32x2_t **)v120)
      {
        v123 = *v121;
        v124 = (float32x2_t *)((char *)*v121 + 276);
        if (*(_QWORD *)&(*v121)[30] == *(_QWORD *)&(*v121)[31])
        {
          v125 = ggl::FragmentedPool<ggl::RenderItem>::pop((uint64_t)this[186]);
          v181 = *(_QWORD **)(v125 + 64);
          *v181 = this[196];
          v181[1] = 0;
          v182 = *(_QWORD **)(v125 + 160);
          v183 = (std::__shared_weak_count *)v182[1];
          *v182 = 0;
          v182[1] = 0;
          if (v183)
          {
            p_shared_owners = (unint64_t *)&v183->__shared_owners_;
            do
              v185 = __ldaxr(p_shared_owners);
            while (__stlxr(v185 - 1, p_shared_owners));
            if (!v185)
            {
              ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
              std::__shared_weak_count::__release_weak(v183);
            }
          }
          v186 = (_QWORD *)ggl::FragmentedPool<ggl::RenderItem>::pop((uint64_t)this[198]);
          v187 = *(_QWORD *)(v125 + 64);
          *(_QWORD *)(v187 + 16) = v186;
          *(_QWORD *)(v187 + 24) = 0;
          v188 = *(_QWORD *)(v125 + 160);
          v189 = *(std::__shared_weak_count **)(v188 + 24);
          *(_QWORD *)(v188 + 16) = 0;
          *(_QWORD *)(v188 + 24) = 0;
          if (v189)
          {
            v190 = (unint64_t *)&v189->__shared_owners_;
            do
              v191 = __ldaxr(v190);
            while (__stlxr(v191 - 1, v190));
            if (!v191)
            {
              ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
              std::__shared_weak_count::__release_weak(v189);
            }
          }
          v192 = v186[1];
          v193 = (float32x4_t *)v186[9];
          v194 = v123[34].f32[0];
          v195 = v123[35].f32[1];
          v196 = v123[37].f32[0];
          v197 = v123[38].f32[1];
          *(float64x2_t *)v327 = vcvtq_f64_f32(v123[33]);
          *(double *)&v327[16] = v194;
          *(_QWORD *)&v327[24] = 0;
          *(float64x2_t *)&v327[32] = vcvtq_f64_f32(*v124);
          v328 = v195;
          v329 = 0;
          v330 = vcvtq_f64_f32(v123[36]);
          v331 = v196;
          v332 = 0;
          v333 = vcvtq_f64_f32(v124[3]);
          v334 = v197;
          v335 = 0x3FF0000000000000;
          gm::operator*<double,4,4,4>(v336.f64, (double *)v277, (double *)v327);
          v198 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v338), v339);
          v193[4] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v336), v337);
          v193[5] = v198;
          v193[6] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v340), v341);
          v193[7] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v342), v343);
          v199 = v123[34].f32[0];
          v200 = v123[35].f32[1];
          v198.i32[0] = v123[37].i32[0];
          v201 = v123[38].f32[1];
          *(float64x2_t *)v327 = vcvtq_f64_f32(v123[33]);
          *(double *)&v327[16] = v199;
          *(_QWORD *)&v327[24] = 0;
          *(float64x2_t *)&v327[32] = vcvtq_f64_f32(*v124);
          v328 = v200;
          v329 = 0;
          v330 = vcvtq_f64_f32(v123[36]);
          v331 = v198.f32[0];
          v332 = 0;
          v333 = vcvtq_f64_f32(v124[3]);
          v334 = v201;
          v335 = 0x3FF0000000000000;
          gm::operator*<double,4,4,4>(v336.f64, v276, (double *)v327);
          *v193 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v336), v337);
          v193[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v338), v339);
          v193[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v340), v341);
          v193[3] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v342), v343);
          v202 = v186[8];
          if (v202 <= v192)
            v202 = v192;
          v186[7] = 0;
          v186[8] = v202;
          v203 = (_QWORD *)ggl::FragmentedPool<ggl::RenderItem>::pop((uint64_t)this[200]);
          v210 = *(_QWORD *)(v125 + 64);
          *(_QWORD *)(v210 + 32) = v203;
          *(_QWORD *)(v210 + 40) = 0;
          v211 = *(_QWORD *)(v125 + 160);
          v212 = *(std::__shared_weak_count **)(v211 + 40);
          *(_QWORD *)(v211 + 32) = 0;
          *(_QWORD *)(v211 + 40) = 0;
          if (v212)
          {
            v213 = (unint64_t *)&v212->__shared_owners_;
            do
              v214 = __ldaxr(v213);
            while (__stlxr(v214 - 1, v213));
            if (!v214)
            {
              ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
              std::__shared_weak_count::__release_weak(v212);
            }
          }
          v215 = v203[1];
          v216 = (float64x2_t *)v203[9];
          v217 = v123[27];
          v218 = (int8x16_t)vcvtq_f64_f32(*(float32x2_t *)(*(_QWORD *)&v217 + 44));
          *(float64x2_t *)v327 = vcvtq_f64_f32(*(float32x2_t *)(*(_QWORD *)&v217 + 36));
          *(int8x16_t *)&v327[16] = v218;
          *(float64x2_t *)&v327[32] = vcvtq_f64_f32(*(float32x2_t *)(*(_QWORD *)&v217 + 52));
          altitude::util::computeLocalClipPlanes((uint64_t)v327, (uint64_t)&v336, 1.04999995, v218, v204, v205, v206, v207, v208, v209);
          *v216 = v336;
          v216[1] = v337;
          v216[2] = v338;
          v216[3] = v339;
          v216[4] = v340;
          v216[5] = v341;
          v219 = v203[8];
          if (v219 <= v215)
            v219 = v215;
          v203[7] = 0;
          v203[8] = v219;
          v220 = ggl::FragmentedPool<ggl::RenderItem>::pop((uint64_t)this[201]);
          v221 = *(_QWORD *)(v125 + 64);
          *(_QWORD *)(v221 + 48) = v220;
          *(_QWORD *)(v221 + 56) = 0;
          v222 = *(_QWORD *)(v125 + 160);
          v223 = *(std::__shared_weak_count **)(v222 + 56);
          *(_QWORD *)(v222 + 48) = 0;
          *(_QWORD *)(v222 + 56) = 0;
          if (v223)
          {
            v224 = (unint64_t *)&v223->__shared_owners_;
            do
              v225 = __ldaxr(v224);
            while (__stlxr(v225 - 1, v224));
            if (!v225)
            {
              ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
              std::__shared_weak_count::__release_weak(v223);
            }
          }
          v226 = *(_QWORD *)(v220 + 8);
          **(_DWORD **)(v220 + 72) = 1065353216;
          if (*(_QWORD *)(v220 + 64) > v226)
            v226 = *(_QWORD *)(v220 + 64);
          *(_QWORD *)(v220 + 56) = 0;
          *(_QWORD *)(v220 + 64) = v226;
          v227 = (_QWORD *)ggl::FragmentedPool<ggl::RenderItem>::pop((uint64_t)this[202]);
          v228 = *(_QWORD *)(v125 + 64);
          *(_QWORD *)(v228 + 64) = v227;
          *(_QWORD *)(v228 + 72) = 0;
          v229 = *(_QWORD *)(v125 + 160);
          v230 = *(std::__shared_weak_count **)(v229 + 72);
          *(_QWORD *)(v229 + 64) = 0;
          *(_QWORD *)(v229 + 72) = 0;
          if (v230)
          {
            v231 = (unint64_t *)&v230->__shared_owners_;
            do
              v232 = __ldaxr(v231);
            while (__stlxr(v232 - 1, v231));
            if (!v232)
            {
              ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
              std::__shared_weak_count::__release_weak(v230);
            }
          }
          v233 = v227[1];
          *(_OWORD *)v227[9] = xmmword_19FFB3480;
          if (v227[8] > v233)
            v233 = v227[8];
          v227[7] = 0;
          v227[8] = v233;
          **(_QWORD **)(v125 + 96) = this[203];
          v179 = v123 + 28;
          v180 = 1;
        }
        else
        {
          v125 = ggl::FragmentedPool<ggl::RenderItem>::pop((uint64_t)this[192]);
          v126 = *(_QWORD **)(v125 + 64);
          *v126 = this[196];
          v126[1] = 0;
          v127 = *(_QWORD **)(v125 + 160);
          v128 = (std::__shared_weak_count *)v127[1];
          *v127 = 0;
          v127[1] = 0;
          if (v128)
          {
            v129 = (unint64_t *)&v128->__shared_owners_;
            do
              v130 = __ldaxr(v129);
            while (__stlxr(v130 - 1, v129));
            if (!v130)
            {
              ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
              std::__shared_weak_count::__release_weak(v128);
            }
          }
          v131 = (_QWORD *)ggl::FragmentedPool<ggl::RenderItem>::pop((uint64_t)this[198]);
          v132 = *(_QWORD *)(v125 + 64);
          *(_QWORD *)(v132 + 16) = v131;
          *(_QWORD *)(v132 + 24) = 0;
          v133 = *(_QWORD *)(v125 + 160);
          v134 = *(std::__shared_weak_count **)(v133 + 24);
          *(_QWORD *)(v133 + 16) = 0;
          *(_QWORD *)(v133 + 24) = 0;
          if (v134)
          {
            v135 = (unint64_t *)&v134->__shared_owners_;
            do
              v136 = __ldaxr(v135);
            while (__stlxr(v136 - 1, v135));
            if (!v136)
            {
              ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
              std::__shared_weak_count::__release_weak(v134);
            }
          }
          v137 = v131[1];
          v138 = (float32x4_t *)v131[9];
          v139 = v123[34].f32[0];
          v140 = v123[35].f32[1];
          v141 = v123[37].f32[0];
          v142 = v123[38].f32[1];
          *(float64x2_t *)v327 = vcvtq_f64_f32(v123[33]);
          *(double *)&v327[16] = v139;
          *(_QWORD *)&v327[24] = 0;
          *(float64x2_t *)&v327[32] = vcvtq_f64_f32(*v124);
          v328 = v140;
          v329 = 0;
          v330 = vcvtq_f64_f32(v123[36]);
          v331 = v141;
          v332 = 0;
          v333 = vcvtq_f64_f32(v124[3]);
          v334 = v142;
          v335 = 0x3FF0000000000000;
          gm::operator*<double,4,4,4>(v336.f64, (double *)v277, (double *)v327);
          v143 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v338), v339);
          v138[4] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v336), v337);
          v138[5] = v143;
          v138[6] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v340), v341);
          v138[7] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v342), v343);
          v144 = v123[34].f32[0];
          v145 = v123[35].f32[1];
          v143.i32[0] = v123[37].i32[0];
          v146 = v123[38].f32[1];
          *(float64x2_t *)v327 = vcvtq_f64_f32(v123[33]);
          *(double *)&v327[16] = v144;
          *(_QWORD *)&v327[24] = 0;
          *(float64x2_t *)&v327[32] = vcvtq_f64_f32(*v124);
          v328 = v145;
          v329 = 0;
          v330 = vcvtq_f64_f32(v123[36]);
          v331 = v143.f32[0];
          v332 = 0;
          v333 = vcvtq_f64_f32(v124[3]);
          v334 = v146;
          v335 = 0x3FF0000000000000;
          gm::operator*<double,4,4,4>(v336.f64, v276, (double *)v327);
          *v138 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v336), v337);
          v138[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v338), v339);
          v138[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v340), v341);
          v138[3] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v342), v343);
          v147 = v131[8];
          if (v147 <= v137)
            v147 = v137;
          v131[7] = 0;
          v131[8] = v147;
          v148 = (_QWORD *)ggl::FragmentedPool<ggl::RenderItem>::pop((uint64_t)this[200]);
          v155 = *(_QWORD *)(v125 + 64);
          *(_QWORD *)(v155 + 32) = v148;
          *(_QWORD *)(v155 + 40) = 0;
          v156 = *(_QWORD *)(v125 + 160);
          v157 = *(std::__shared_weak_count **)(v156 + 40);
          *(_QWORD *)(v156 + 32) = 0;
          *(_QWORD *)(v156 + 40) = 0;
          if (v157)
          {
            v158 = (unint64_t *)&v157->__shared_owners_;
            do
              v159 = __ldaxr(v158);
            while (__stlxr(v159 - 1, v158));
            if (!v159)
            {
              ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
              std::__shared_weak_count::__release_weak(v157);
            }
          }
          v160 = v148[1];
          v161 = (float64x2_t *)v148[9];
          v162 = v123[27];
          v163 = (int8x16_t)vcvtq_f64_f32(*(float32x2_t *)(*(_QWORD *)&v162 + 44));
          *(float64x2_t *)v327 = vcvtq_f64_f32(*(float32x2_t *)(*(_QWORD *)&v162 + 36));
          *(int8x16_t *)&v327[16] = v163;
          *(float64x2_t *)&v327[32] = vcvtq_f64_f32(*(float32x2_t *)(*(_QWORD *)&v162 + 52));
          altitude::util::computeLocalClipPlanes((uint64_t)v327, (uint64_t)&v336, 1.04999995, v163, v149, v150, v151, v152, v153, v154);
          *v161 = v336;
          v161[1] = v337;
          v161[2] = v338;
          v161[3] = v339;
          v161[4] = v340;
          v161[5] = v341;
          v164 = v148[8];
          if (v164 <= v160)
            v164 = v160;
          v148[7] = 0;
          v148[8] = v164;
          v165 = ggl::FragmentedPool<ggl::RenderItem>::pop((uint64_t)this[201]);
          v166 = *(_QWORD *)(v125 + 64);
          *(_QWORD *)(v166 + 48) = v165;
          *(_QWORD *)(v166 + 56) = 0;
          v167 = *(_QWORD *)(v125 + 160);
          v168 = *(std::__shared_weak_count **)(v167 + 56);
          *(_QWORD *)(v167 + 48) = 0;
          *(_QWORD *)(v167 + 56) = 0;
          if (v168)
          {
            v169 = (unint64_t *)&v168->__shared_owners_;
            do
              v170 = __ldaxr(v169);
            while (__stlxr(v170 - 1, v169));
            if (!v170)
            {
              ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
              std::__shared_weak_count::__release_weak(v168);
            }
          }
          v171 = *(_QWORD *)(v165 + 8);
          **(_DWORD **)(v165 + 72) = 1065353216;
          if (*(_QWORD *)(v165 + 64) > v171)
            v171 = *(_QWORD *)(v165 + 64);
          *(_QWORD *)(v165 + 56) = 0;
          *(_QWORD *)(v165 + 64) = v171;
          v172 = (_QWORD *)ggl::FragmentedPool<ggl::RenderItem>::pop((uint64_t)this[202]);
          v173 = *(_QWORD *)(v125 + 64);
          *(_QWORD *)(v173 + 64) = v172;
          *(_QWORD *)(v173 + 72) = 0;
          v174 = *(_QWORD *)(v125 + 160);
          v175 = *(std::__shared_weak_count **)(v174 + 72);
          *(_QWORD *)(v174 + 64) = 0;
          *(_QWORD *)(v174 + 72) = 0;
          if (v175)
          {
            v176 = (unint64_t *)&v175->__shared_owners_;
            do
              v177 = __ldaxr(v176);
            while (__stlxr(v177 - 1, v176));
            if (!v177)
            {
              ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
              std::__shared_weak_count::__release_weak(v175);
            }
          }
          v178 = v172[1];
          *(_OWORD *)v172[9] = xmmword_19FFB3480;
          if (v172[8] > v178)
            v178 = v172[8];
          v172[7] = 0;
          v172[8] = v178;
          **(_QWORD **)(v125 + 96) = this[203];
          *(float32x2_t *)(*(_QWORD *)(v125 + 96) + 8) = v123[28];
          v179 = (float32x2_t *)v123[30];
          v180 = 2;
        }
        *(float32x2_t *)(*(_QWORD *)(v125 + 96) + 8 * v180) = *v179;
        memset(&v327[4], 0, 32);
        +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings", v270);
        v234 = (void *)objc_claimAutoreleasedReturnValue();
        v235 = objc_msgSend(v234, "flyoverSkipTileRendering");

        if (v235)
          v236 = (char *)(this + 157);
        else
          v236 = (char *)(this + 49);
        if (*((unsigned __int8 *)this + 49) >= *(unsigned __int8 *)(v275 + 169))
          v237 = *(unsigned __int8 *)(v275 + 169);
        else
          v237 = *((unsigned __int8 *)this + 49);
        v238 = *((_DWORD *)this + 410);
        v239 = (_QWORD *)v123[27];
        v242 = *v239;
        v240 = v239 + 2;
        v241 = v242;
        v336 = *(float64x2_t *)v327;
        v337 = *(float64x2_t *)&v327[16];
        LODWORD(v338.f64[0]) = *(_DWORD *)&v327[32];
        result = this[47];
        v243 = result[1];
        if ((uint64_t *)v243 == this[48])
        {
          result = (uint64_t *)*result;
          if (!result)
          {
            result = (uint64_t *)malloc_type_malloc(120 * v243 + 16, 0xB644C221uLL);
            *result = 0;
            result[1] = 0;
            *this[47] = (uint64_t)result;
          }
          this[47] = result;
          v243 = result[1];
        }
        v244 = v238 + v237;
        v245 = &result[15 * v243];
        v245[2] = (uint64_t)&off_1E42B59B0;
        v246 = v245 + 2;
        result[1] = v243 + 1;
        v246[2] = (uint64_t)"";
        v246[3] = (uint64_t)v236;
        v246[4] = v125;
        *((_DWORD *)v246 + 10) = v244;
        v246[6] = 0;
        *((_DWORD *)v246 + 14) = 1065353216;
        v247 = LODWORD(v338.f64[0]);
        v248 = v337;
        *(float64x2_t *)((char *)v246 + 60) = v336;
        *((_DWORD *)v246 + 23) = v247;
        *(float64x2_t *)((char *)v246 + 76) = v248;
        *((int64x2_t *)v246 + 6) = vdupq_n_s64(1uLL);
        v246[14] = 0;
        v246[8] = v241;
        *(_OWORD *)(v246 + 9) = *v240;
        v246[11] = 0;
        v246[12] = 1;
        v249 = *(uint64_t ***)(v101 + 80);
        v250 = *(_QWORD *)(v101 + 88);
        if ((unint64_t)v249 < v250)
        {
          if (v249)
            *v249 = v246;
          v122 = v249 + 1;
LABEL_147:
          *(_QWORD *)(v101 + 80) = v122;
          ++v121;
          v120 = v273;
          continue;
        }
        v251 = *(_QWORD *)(v101 + 72);
        v252 = ((uint64_t)v249 - v251) >> 3;
        v253 = v252 + 1;
        if ((unint64_t)(v252 + 1) >> 61)
          abort();
        v254 = v250 - v251;
        if (v254 >> 2 > v253)
          v253 = v254 >> 2;
        if ((unint64_t)v254 >= 0x7FFFFFFFFFFFFFF8)
          v255 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v255 = v253;
        if (v255)
        {
          result = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v101 + 96) + 16))(*(_QWORD *)(v101 + 96), 8 * v255, 8);
          v256 = &result[v252];
          v257 = &result[v255];
          if (result)
            *v256 = (uint64_t)v246;
        }
        else
        {
          v257 = 0;
          v256 = (uint64_t *)(8 * v252);
        }
        v259 = *(_QWORD *)(v101 + 72);
        v258 = *(_QWORD *)(v101 + 80);
        v260 = v258 - v259;
        if (v258 != v259)
        {
          v261 = v260 - 8;
          if ((unint64_t)(v260 - 8) < 0x38)
          {
            v262 = v256;
          }
          else
          {
            v262 = v256;
            if ((unint64_t)(v258 - (_QWORD)v256) >= 0x20)
            {
              v263 = (v261 >> 3) + 1;
              v264 = v256 - 2;
              v265 = (__int128 *)(v258 - 16);
              v266 = v263 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v267 = *v265;
                *((_OWORD *)v264 - 1) = *(v265 - 1);
                *(_OWORD *)v264 = v267;
                v264 -= 4;
                v265 -= 2;
                v266 -= 4;
              }
              while (v266);
              v262 = &v256[-(v263 & 0x3FFFFFFFFFFFFFFCLL)];
              v258 -= 8 * (v263 & 0x3FFFFFFFFFFFFFFCLL);
              if (v263 == (v263 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_251:
                v258 = *(_QWORD *)(v101 + 72);
LABEL_252:
                v122 = v256 + 1;
                *(_QWORD *)(v101 + 72) = v262;
                *(_QWORD *)(v101 + 80) = v256 + 1;
                v269 = *(_QWORD *)(v101 + 88);
                *(_QWORD *)(v101 + 88) = v257;
                if (v258)
                  result = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v101 + 96)
                                                                                          + 40))(*(_QWORD *)(v101 + 96), v258, v269 - v258);
                goto LABEL_147;
              }
            }
          }
          do
          {
            v268 = *(_QWORD *)(v258 - 8);
            v258 -= 8;
            *--v262 = v268;
          }
          while (v258 != v259);
          goto LABEL_251;
        }
        v262 = v256;
        goto LABEL_252;
      }
      break;
    }
    v113 = v272 + 8;
    if (v272 + 8 != v270)
      continue;
    return result;
  }
}

void sub_19FA6C5B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a69;
  void *v69;

  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a69);
  _Unwind_Resume(a1);
}

void sub_19FA6C5D8(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t md::FlyoverRenderLayer::reserveStencilRange(uint64_t result, uint64_t a2)
{
  unsigned __int8 v2;
  unsigned __int8 *v3;
  int v4;
  uint64_t v5;

  v2 = *(_BYTE *)(result + 49) - *(_BYTE *)(result + 48) + 1;
  v3 = *(unsigned __int8 **)(a2 + 24);
  v4 = *v3;
  if (v4 + v2 > v3[1])
  {
    v5 = *(_QWORD *)(result + 1632);
    *(_BYTE *)(v5 + 28) = v3[32];
    *(_DWORD *)(v5 + 32) = *((_DWORD *)v3 + 9);
    v3[1] = v3[2];
    v4 = 1;
  }
  *v3 = v4 + v2;
  *(_DWORD *)(result + 1640) = v4 - *(unsigned __int8 *)(result + 48);
  return result;
}

_QWORD *md::FlyoverRenderLayer::prune(uint64_t a1)
{
  return md::FlyoverRenderResources::prunePools((_QWORD *)(a1 + 368));
}

uint64_t md::FlyoverRenderLayer::prepare(md::FlyoverRenderLayer *this, md::LayoutContext *a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(md::FlyoverRenderLayer *))(*(_QWORD *)this + 104))(this);
  **((_WORD **)a2 + 92) = 1;
  return result;
}

_QWORD *md::FlyoverRenderResources::prunePools(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD **v3;
  _QWORD **v4;
  uint64_t v5;
  _QWORD **v6;
  _QWORD **v7;
  uint64_t v8;
  _QWORD **v9;
  _QWORD **v10;
  uint64_t v11;
  _QWORD **v12;
  _QWORD **v13;
  uint64_t v14;
  _QWORD **v15;
  _QWORD **v16;
  uint64_t v17;
  _QWORD **v18;
  _QWORD **v19;
  uint64_t v20;
  _QWORD **v21;
  _QWORD **v22;
  uint64_t v23;
  _QWORD **v24;
  _QWORD **v25;
  uint64_t v26;
  _QWORD **v27;
  _QWORD **v28;

  v1 = this;
  v2 = this[140];
  v4 = *(_QWORD ***)v2;
  v3 = *(_QWORD ***)(v2 + 8);
  if (*(_QWORD ***)v2 != v3)
  {
    do
    {
      this = *v4;
      if (*v4)
      {
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
        v3 = *(_QWORD ***)(v2 + 8);
      }
      ++v4;
    }
    while (v4 != v3);
    v4 = *(_QWORD ***)v2;
  }
  *(_QWORD *)(v2 + 8) = v4;
  v5 = v1[143];
  v7 = *(_QWORD ***)v5;
  v6 = *(_QWORD ***)(v5 + 8);
  if (*(_QWORD ***)v5 != v6)
  {
    do
    {
      this = *v7;
      if (*v7)
      {
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
        v6 = *(_QWORD ***)(v5 + 8);
      }
      ++v7;
    }
    while (v7 != v6);
    v7 = *(_QWORD ***)v5;
  }
  *(_QWORD *)(v5 + 8) = v7;
  v8 = v1[146];
  v10 = *(_QWORD ***)v8;
  v9 = *(_QWORD ***)(v8 + 8);
  if (*(_QWORD ***)v8 != v9)
  {
    do
    {
      this = *v10;
      if (*v10)
      {
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
        v9 = *(_QWORD ***)(v8 + 8);
      }
      ++v10;
    }
    while (v10 != v9);
    v10 = *(_QWORD ***)v8;
  }
  *(_QWORD *)(v8 + 8) = v10;
  v11 = v1[149];
  v13 = *(_QWORD ***)v11;
  v12 = *(_QWORD ***)(v11 + 8);
  if (*(_QWORD ***)v11 != v12)
  {
    do
    {
      this = *v13;
      if (*v13)
      {
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
        v12 = *(_QWORD ***)(v11 + 8);
      }
      ++v13;
    }
    while (v13 != v12);
    v13 = *(_QWORD ***)v11;
  }
  *(_QWORD *)(v11 + 8) = v13;
  v14 = v1[152];
  v16 = *(_QWORD ***)v14;
  v15 = *(_QWORD ***)(v14 + 8);
  if (*(_QWORD ***)v14 != v15)
  {
    do
    {
      this = *v16;
      if (*v16)
      {
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
        v15 = *(_QWORD ***)(v14 + 8);
      }
      ++v16;
    }
    while (v16 != v15);
    v16 = *(_QWORD ***)v14;
  }
  *(_QWORD *)(v14 + 8) = v16;
  v17 = v1[153];
  v19 = *(_QWORD ***)v17;
  v18 = *(_QWORD ***)(v17 + 8);
  if (*(_QWORD ***)v17 != v18)
  {
    do
    {
      this = *v19;
      if (*v19)
      {
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
        v18 = *(_QWORD ***)(v17 + 8);
      }
      ++v19;
    }
    while (v19 != v18);
    v19 = *(_QWORD ***)v17;
  }
  *(_QWORD *)(v17 + 8) = v19;
  v20 = v1[154];
  v22 = *(_QWORD ***)v20;
  v21 = *(_QWORD ***)(v20 + 8);
  if (*(_QWORD ***)v20 != v21)
  {
    do
    {
      this = *v22;
      if (*v22)
      {
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
        v21 = *(_QWORD ***)(v20 + 8);
      }
      ++v22;
    }
    while (v22 != v21);
    v22 = *(_QWORD ***)v20;
  }
  *(_QWORD *)(v20 + 8) = v22;
  v23 = v1[155];
  v25 = *(_QWORD ***)v23;
  v24 = *(_QWORD ***)(v23 + 8);
  if (*(_QWORD ***)v23 != v24)
  {
    do
    {
      this = *v25;
      if (*v25)
      {
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
        v24 = *(_QWORD ***)(v23 + 8);
      }
      ++v25;
    }
    while (v25 != v24);
    v25 = *(_QWORD ***)v23;
  }
  *(_QWORD *)(v23 + 8) = v25;
  v26 = v1[156];
  v28 = *(_QWORD ***)v26;
  v27 = *(_QWORD ***)(v26 + 8);
  if (*(_QWORD ***)v26 != v27)
  {
    do
    {
      this = *v28;
      if (*v28)
      {
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
        v27 = *(_QWORD ***)(v26 + 8);
      }
      ++v28;
    }
    while (v28 != v27);
    v28 = *(_QWORD ***)v26;
  }
  *(_QWORD *)(v26 + 8) = v28;
  return this;
}

void md::FlyoverRenderResources::~FlyoverRenderResources(md::FlyoverRenderResources *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  _QWORD *v57;
  unint64_t v58;
  void (***v59)(void);
  void (**v60)(void);
  _QWORD **v61;
  _QWORD *v62;
  _QWORD *v63;

  v2 = *((_QWORD *)this + 158);
  *((_QWORD *)this + 158) = 0;
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0x1000C4049ECCB0CLL);
  v3 = *((_QWORD *)this + 157);
  *((_QWORD *)this + 157) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 156);
  *((_QWORD *)this + 156) = 0;
  if (v4)
  {
    v5 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v4);
    MEMORY[0x1A1AF4E00](v5, 0x10A0C40D234DDC7);
  }
  v6 = *((_QWORD *)this + 155);
  *((_QWORD *)this + 155) = 0;
  if (v6)
  {
    v7 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v6);
    MEMORY[0x1A1AF4E00](v7, 0x10A0C40D234DDC7);
  }
  v8 = *((_QWORD *)this + 154);
  *((_QWORD *)this + 154) = 0;
  if (v8)
  {
    v9 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v8);
    MEMORY[0x1A1AF4E00](v9, 0x10A0C40D234DDC7);
  }
  v10 = *((_QWORD *)this + 153);
  *((_QWORD *)this + 153) = 0;
  if (v10)
  {
    v11 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v10);
    MEMORY[0x1A1AF4E00](v11, 0x10A0C40D234DDC7);
  }
  v12 = *((_QWORD *)this + 152);
  *((_QWORD *)this + 152) = 0;
  if (v12)
  {
    v13 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v12);
    MEMORY[0x1A1AF4E00](v13, 0x10A0C40D234DDC7);
  }
  v14 = (std::__shared_weak_count *)*((_QWORD *)this + 151);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *((_QWORD *)this + 149);
  *((_QWORD *)this + 149) = 0;
  if (v17)
  {
    v18 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v17);
    MEMORY[0x1A1AF4E00](v18, 0x10A0C40D234DDC7);
  }
  v19 = (std::__shared_weak_count *)*((_QWORD *)this + 148);
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = *((_QWORD *)this + 146);
  *((_QWORD *)this + 146) = 0;
  if (v22)
  {
    v23 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v22);
    MEMORY[0x1A1AF4E00](v23, 0x10A0C40D234DDC7);
  }
  v24 = (std::__shared_weak_count *)*((_QWORD *)this + 145);
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = *((_QWORD *)this + 143);
  *((_QWORD *)this + 143) = 0;
  if (v27)
  {
    v28 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v27);
    MEMORY[0x1A1AF4E00](v28, 0x10A0C40D234DDC7);
  }
  v29 = (std::__shared_weak_count *)*((_QWORD *)this + 142);
  if (v29)
  {
    v30 = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = *((_QWORD *)this + 140);
  *((_QWORD *)this + 140) = 0;
  if (v32)
  {
    v33 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v32);
    MEMORY[0x1A1AF4E00](v33, 0x10A0C40D234DDC7);
  }
  v34 = (std::__shared_weak_count *)*((_QWORD *)this + 139);
  if (v34)
  {
    v35 = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  *((_QWORD *)this + 111) = &off_1E42B8A10;
  v37 = *((_QWORD *)this + 112);
  if (v37)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v37 + 16))(v37, *((_QWORD *)this + 114));
    *((_QWORD *)this + 114) = 3735927469;
  }
  v38 = (std::__shared_weak_count *)*((_QWORD *)this + 113);
  if (v38)
  {
    v39 = (unint64_t *)&v38->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  *((_QWORD *)this + 84) = &off_1E42B8A10;
  v41 = *((_QWORD *)this + 85);
  if (v41)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v41 + 16))(v41, *((_QWORD *)this + 87));
    *((_QWORD *)this + 87) = 3735927469;
  }
  v42 = (std::__shared_weak_count *)*((_QWORD *)this + 86);
  if (v42)
  {
    v43 = (unint64_t *)&v42->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  *((_QWORD *)this + 57) = &off_1E42B8A10;
  v45 = *((_QWORD *)this + 58);
  if (v45)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v45 + 16))(v45, *((_QWORD *)this + 60));
    *((_QWORD *)this + 60) = 3735927469;
  }
  v46 = (std::__shared_weak_count *)*((_QWORD *)this + 59);
  if (v46)
  {
    v47 = (unint64_t *)&v46->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  *((_QWORD *)this + 30) = &off_1E42B8A10;
  v49 = *((_QWORD *)this + 31);
  if (v49)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v49 + 16))(v49, *((_QWORD *)this + 33));
    *((_QWORD *)this + 33) = 3735927469;
  }
  v50 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
  if (v50)
  {
    v51 = (unint64_t *)&v50->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  *((_QWORD *)this + 3) = &off_1E42B8A10;
  v53 = *((_QWORD *)this + 4);
  if (v53)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v53 + 16))(v53, *((_QWORD *)this + 6));
    *((_QWORD *)this + 6) = 3735927469;
  }
  v54 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (v54)
  {
    v55 = (unint64_t *)&v54->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  v57 = *(_QWORD **)this;
  do
  {
    if (v57[1])
    {
      v58 = 0;
      v59 = (void (***)(void))(v57 + 2);
      do
      {
        v60 = *v59;
        v59 += 15;
        (*v60)();
        ++v58;
      }
      while (v58 < v57[1]);
    }
    v57[1] = 0;
    v57 = (_QWORD *)*v57;
  }
  while (v57);
  v61 = *(_QWORD ***)this;
  *((_QWORD *)this + 1) = *(_QWORD *)this;
  v62 = *v61;
  *v61 = 0;
  if (v62)
  {
    do
    {
      v63 = (_QWORD *)*v62;
      free(v62);
      v62 = v63;
    }
    while (v63);
    v61 = *(_QWORD ***)this;
  }
  free(v61);
}

md::FlyoverRenderResources *md::FlyoverRenderResources::FlyoverRenderResources(md::FlyoverRenderResources *this, const md::SharedDeviceResources *a2, VKSharedResources *a3, const RenderTargetFormat *a4)
{
  VKSharedResources *v6;
  _QWORD *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _QWORD *v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD *v41;
  __int128 *v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _OWORD *v59;
  __int128 *v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  char *v76;
  __int128 v77;
  unsigned __int8 v78;
  __int128 v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  __int128 v83;
  unint64_t *v84;
  unint64_t v85;
  int8x16_t v86;
  int16x8_t v87;
  int32x4_t v88;
  int8x16_t v89;
  int8x16_t v90;
  int16x8_t v91;
  int32x4_t v92;
  int8x16_t v93;
  int32x4_t v94;
  int8x16_t v95;
  int32x4_t v96;
  int8x16_t v97;
  int8x16_t v98;
  int8x16_t v99;
  int8x16_t v100;
  int8x16_t v101;
  int8x16_t v102;
  int8x16_t v103;
  int8x16_t v104;
  int8x16_t v105;
  int16x8_t v106;
  int32x4_t v107;
  int8x16_t v108;
  int16x8_t v109;
  int32x4_t v110;
  int8x16_t v111;
  int32x4_t v112;
  int8x16_t v113;
  int32x4_t v114;
  int8x16_t v115;
  int8x16_t v116;
  int8x16_t v117;
  int8x16_t v118;
  int8x16_t v119;
  int8x16_t v120;
  int8x16_t v121;
  int8x16_t v122;
  int8x16_t v123;
  int8x16_t v124;
  int8x16_t v125;
  int8x16_t v126;
  int8x16_t v127;
  int8x16_t v128;
  int16x8_t v129;
  int32x4_t v130;
  int8x16_t v131;
  int8x16_t v132;
  int16x8_t v133;
  int32x4_t v134;
  int8x16_t v135;
  int16x8_t v136;
  int32x4_t v137;
  int8x16_t v138;
  int16x8_t v139;
  int32x4_t v140;
  int8x16_t v141;
  int32x4_t v142;
  int8x16_t v143;
  int32x4_t v144;
  int8x16_t v145;
  int32x4_t v146;
  int8x16_t v147;
  int32x4_t v148;
  int8x16_t v149;
  int8x16_t v150;
  int8x16_t v151;
  int8x16_t v152;
  int8x16_t v153;
  int8x16_t v154;
  int8x16_t v155;
  int8x16_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  uint64_t *v163;
  unsigned __int8 v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  _OWORD *v180;
  __int128 *v181;
  uint64_t v182;
  __int128 v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  _OWORD *v198;
  __int128 *v199;
  uint64_t v200;
  __int128 v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  uint64_t v207;
  _QWORD *v208;
  uint64_t v209;
  uint64_t v210;
  std::__shared_weak_count *v211;
  uint64_t v212;
  unint64_t *v213;
  unint64_t v214;
  _QWORD *v215;
  __int128 v216;
  std::__shared_weak_count *v217;
  unint64_t *v218;
  unint64_t v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  uint64_t *v223;
  unsigned __int8 v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  unint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  _OWORD *v240;
  __int128 *v241;
  uint64_t v242;
  __int128 v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  unint64_t v255;
  uint64_t v256;
  uint64_t v257;
  _OWORD *v258;
  __int128 *v259;
  uint64_t v260;
  __int128 v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  _QWORD *v266;
  uint64_t v267;
  _QWORD *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  unint64_t *v273;
  unint64_t v274;
  char *v275;
  __int128 v276;
  unsigned __int8 v277;
  __int128 v278;
  unint64_t *v279;
  unint64_t v280;
  unint64_t v281;
  __int128 v282;
  unint64_t *v283;
  unint64_t v284;
  int8x16_t v285;
  int16x8_t v286;
  int32x4_t v287;
  int8x16_t v288;
  int8x16_t v289;
  int16x8_t v290;
  int32x4_t v291;
  int8x16_t v292;
  int32x4_t v293;
  int8x16_t v294;
  int32x4_t v295;
  int8x16_t v296;
  int8x16_t v297;
  int8x16_t v298;
  int8x16_t v299;
  int8x16_t v300;
  int8x16_t v301;
  int16x8_t v302;
  int32x4_t v303;
  int8x16_t v304;
  int16x8_t v305;
  int32x4_t v306;
  int8x16_t v307;
  int32x4_t v308;
  int8x16_t v309;
  int32x4_t v310;
  int8x16_t v311;
  int8x16_t v312;
  int8x16_t v313;
  int8x16_t v314;
  int8x16_t v315;
  int8x16_t v316;
  int8x16_t v317;
  int8x16_t v318;
  int8x16_t v319;
  int8x16_t v320;
  int8x16_t v321;
  int8x16_t v322;
  int8x16_t v323;
  int16x8_t v324;
  int32x4_t v325;
  int16x8_t v326;
  int32x4_t v327;
  int32x4_t v328;
  int32x4_t v329;
  int8x16_t v330;
  int8x16_t v331;
  int8x16_t v332;
  int8x16_t v333;
  int8x16_t v334;
  int8x16_t v335;
  int8x16_t v336;
  int8x16_t v337;
  int8x16_t v338;
  int16x8_t v339;
  int32x4_t v340;
  int16x8_t v341;
  int32x4_t v342;
  int32x4_t v343;
  int32x4_t v344;
  int8x16_t v345;
  int8x16_t v346;
  int8x16_t v347;
  int8x16_t v348;
  int8x16_t v349;
  int8x16_t v350;
  int8x16_t v351;
  std::__shared_weak_count *v352;
  unint64_t *v353;
  unint64_t v354;
  std::__shared_weak_count *v355;
  unint64_t *v356;
  unint64_t v357;
  uint64_t *v358;
  unsigned __int8 v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  unint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  unint64_t v371;
  unint64_t v372;
  uint64_t v373;
  uint64_t v374;
  _OWORD *v375;
  __int128 *v376;
  uint64_t v377;
  __int128 v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  unint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  unint64_t v389;
  unint64_t v390;
  uint64_t v391;
  uint64_t v392;
  _OWORD *v393;
  __int128 *v394;
  uint64_t v395;
  __int128 v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  _QWORD *v401;
  uint64_t v402;
  _QWORD *v403;
  uint64_t v404;
  _QWORD *v405;
  uint64_t v406;
  std::__shared_weak_count *v407;
  unint64_t *v408;
  unint64_t v409;
  uint64_t *v410;
  unsigned __int8 v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  unint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  unint64_t v423;
  unint64_t v424;
  uint64_t v425;
  uint64_t v426;
  _OWORD *v427;
  __int128 *v428;
  uint64_t v429;
  __int128 v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  unint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  unint64_t v441;
  unint64_t v442;
  uint64_t v443;
  uint64_t v444;
  _OWORD *v445;
  __int128 *v446;
  uint64_t v447;
  __int128 v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  _QWORD *v453;
  uint64_t v454;
  _QWORD *v455;
  uint64_t v456;
  uint64_t *v457;
  unsigned __int8 v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  unint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  unint64_t v470;
  unint64_t v471;
  uint64_t v472;
  uint64_t v473;
  _OWORD *v474;
  __int128 *v475;
  uint64_t v476;
  __int128 v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  unint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  unint64_t v488;
  unint64_t v489;
  uint64_t v490;
  uint64_t v491;
  _OWORD *v492;
  __int128 *v493;
  uint64_t v494;
  __int128 v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  _QWORD *v500;
  uint64_t v501;
  _QWORD *v502;
  uint64_t v503;
  uint64_t *v504;
  unsigned __int8 v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  unint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  unint64_t v517;
  unint64_t v518;
  uint64_t v519;
  uint64_t v520;
  _OWORD *v521;
  __int128 *v522;
  uint64_t v523;
  __int128 v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  unint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  unint64_t v535;
  unint64_t v536;
  uint64_t v537;
  uint64_t v538;
  _OWORD *v539;
  __int128 *v540;
  uint64_t v541;
  __int128 v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  _QWORD *v547;
  uint64_t v548;
  _QWORD *v549;
  uint64_t v550;
  uint64_t *v551;
  unsigned __int8 v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  unint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  unint64_t v564;
  unint64_t v565;
  uint64_t v566;
  uint64_t v567;
  _OWORD *v568;
  __int128 *v569;
  uint64_t v570;
  __int128 v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  unint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  unint64_t v582;
  unint64_t v583;
  uint64_t v584;
  uint64_t v585;
  _OWORD *v586;
  __int128 *v587;
  uint64_t v588;
  __int128 v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  _QWORD *v594;
  uint64_t v595;
  _QWORD *v596;
  uint64_t v597;
  uint64_t *v598;
  unsigned __int8 v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  unint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  unint64_t v611;
  unint64_t v612;
  uint64_t v613;
  uint64_t v614;
  _OWORD *v615;
  __int128 *v616;
  uint64_t v617;
  __int128 v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  unint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  unint64_t v629;
  unint64_t v630;
  uint64_t v631;
  uint64_t v632;
  _OWORD *v633;
  __int128 *v634;
  uint64_t v635;
  __int128 v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  _QWORD *v641;
  uint64_t v642;
  _QWORD *v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t AtmosphereLookupTexture;
  uint64_t v648;
  uint64_t v650;
  uint64_t v651;
  ggl::FlyoverPolarShader *v652;
  unsigned __int8 v653;
  unsigned __int8 v654;
  unsigned __int8 v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  ggl::FlyoverNightPolarShader *v660;
  unsigned __int8 v661;
  unsigned __int8 v662;
  unsigned __int8 v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  unsigned __int8 v676;
  unsigned __int8 v677;
  unsigned __int8 v678;
  unsigned __int8 v679;
  unsigned __int8 v680;
  unsigned __int8 v681;
  uint64_t *v682;
  VKSharedResources *v683;
  uint64_t *v684;
  uint64_t *v685;
  uint64_t *v686;
  uint64_t *v687;
  uint64_t *v688;
  uint64_t *v689;
  uint64_t *v690;
  uint64_t *v691;
  int v692;
  __int16 v694;
  char v695;
  _BYTE v696[36];
  uint64_t v697;
  char v698;
  uint64_t v699;
  std::__shared_weak_count *v700;
  __int128 v701;
  __int128 v702;
  _QWORD v703[3];
  _QWORD *v704;
  _QWORD v705[3];
  _QWORD *v706;
  _QWORD v707[3];
  _QWORD *v708;
  _QWORD v709[3];
  _QWORD *v710;
  _QWORD v711[3];
  _QWORD *v712;
  _QWORD v713[3];
  _QWORD *v714;
  _QWORD v715[3];
  _QWORD *v716;
  _QWORD v717[3];
  _QWORD *v718;
  _QWORD v719[3];
  _QWORD *v720;
  _QWORD v721[3];
  _QWORD *v722;
  _QWORD v723[3];
  _QWORD *v724;
  _QWORD v725[3];
  _QWORD *v726;
  _QWORD v727[3];
  _QWORD *v728;
  _QWORD v729[3];
  _QWORD *v730;
  _QWORD v731[3];
  _QWORD *v732;
  _QWORD v733[3];
  _QWORD *v734;
  _QWORD v735[3];
  _QWORD *v736;
  _QWORD v737[3];
  _QWORD *v738;
  uint64_t v739;

  v739 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 32;
  v683 = v6;
  v7 = malloc_type_malloc(0xF10uLL, 0xB644C221uLL);
  *v7 = 0;
  v7[1] = 0;
  *(_QWORD *)this = v7;
  *((_QWORD *)this + 1) = v7;
  *((_QWORD *)this + 3) = &off_1E42B5DE8;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_DWORD *)this + 14) = 0;
  *(_QWORD *)((char *)this + 60) = 768;
  *((_DWORD *)this + 17) = 0;
  *((_QWORD *)this + 9) = 1;
  *(_WORD *)((char *)this + 81) = 768;
  *(_QWORD *)((char *)this + 91) = 0;
  *(_QWORD *)((char *)this + 83) = 0;
  *((_BYTE *)this + 99) = 0;
  *(_QWORD *)((char *)this + 156) = 0;
  *(_QWORD *)((char *)this + 148) = 0;
  *((_WORD *)this + 106) = 257;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 30) = &off_1E42B5DE8;
  *((_BYTE *)this + 232) = 0;
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 32) = 0;
  *((_DWORD *)this + 68) = 0;
  *((_QWORD *)this + 33) = 0;
  *(_QWORD *)((char *)this + 276) = 0xBF80000000000300;
  *((_DWORD *)this + 71) = -1063256064;
  *((_QWORD *)this + 36) = 1;
  *((_WORD *)this + 148) = 0;
  *((_BYTE *)this + 298) = 3;
  *((_BYTE *)this + 315) = 0;
  *(_QWORD *)((char *)this + 299) = 0;
  *(_QWORD *)((char *)this + 307) = 0;
  *(_QWORD *)((char *)this + 364) = 0;
  *(_QWORD *)((char *)this + 372) = 0;
  *((_WORD *)this + 214) = 257;
  *((_BYTE *)this + 448) = 0;
  *((_QWORD *)this + 54) = 0;
  *((_QWORD *)this + 55) = 0;
  *((_DWORD *)this + 122) = 0;
  *((_QWORD *)this + 59) = 0;
  *((_QWORD *)this + 60) = 0;
  *((_QWORD *)this + 57) = &off_1E42B5DE8;
  *((_QWORD *)this + 58) = 0;
  *(_QWORD *)((char *)this + 492) = 768;
  *((_DWORD *)this + 125) = 0;
  *((_QWORD *)this + 63) = 0x20A0000202020100;
  *(_WORD *)((char *)this + 513) = 768;
  *(_QWORD *)((char *)this + 515) = 0;
  *(_QWORD *)((char *)this + 523) = 0;
  *((_BYTE *)this + 531) = 0;
  *(_QWORD *)((char *)this + 580) = 0;
  *(_QWORD *)((char *)this + 588) = 0;
  *((_WORD *)this + 322) = 257;
  *((_QWORD *)this + 81) = 0;
  *((_QWORD *)this + 82) = 0;
  *((_BYTE *)this + 664) = 0;
  *((_DWORD *)this + 176) = 0;
  *((_QWORD *)this + 86) = 0;
  *((_QWORD *)this + 87) = 0;
  *((_QWORD *)this + 84) = &off_1E42B5DE8;
  *((_QWORD *)this + 85) = 0;
  *(_QWORD *)((char *)this + 708) = 768;
  *((_DWORD *)this + 179) = 0;
  *((_QWORD *)this + 90) = 0x2000A00000000400;
  *(_WORD *)((char *)this + 729) = 768;
  *((_BYTE *)this + 747) = 0;
  *(_QWORD *)((char *)this + 739) = 0;
  *(_QWORD *)((char *)this + 731) = 0;
  *(_QWORD *)((char *)this + 804) = 0;
  *(_QWORD *)((char *)this + 796) = 0;
  *((_WORD *)this + 430) = 257;
  *((_BYTE *)this + 880) = 0;
  *((_QWORD *)this + 109) = 0;
  *((_QWORD *)this + 108) = 0;
  *((_QWORD *)this + 113) = 0;
  *((_QWORD *)this + 112) = 0;
  *((_DWORD *)this + 230) = 0;
  *((_QWORD *)this + 114) = 0;
  *((_QWORD *)this + 111) = &off_1E42B5DE8;
  *(_QWORD *)((char *)this + 924) = 256;
  *((_DWORD *)this + 233) = 0;
  *((_QWORD *)this + 117) = 0xFF0000000000;
  *(_WORD *)((char *)this + 945) = 768;
  *(_QWORD *)((char *)this + 955) = 0;
  *(_QWORD *)((char *)this + 947) = 0;
  *((_BYTE *)this + 963) = 0;
  *(_QWORD *)((char *)this + 1020) = 0;
  *(_QWORD *)((char *)this + 1012) = 0;
  *((_WORD *)this + 538) = 257;
  *((_QWORD *)this + 136) = 0;
  *((_QWORD *)this + 135) = 0;
  *((_BYTE *)this + 1096) = 0;
  v691 = (uint64_t *)((char *)this + 1120);
  v690 = (uint64_t *)((char *)this + 1144);
  v689 = (uint64_t *)((char *)this + 1168);
  v688 = (uint64_t *)((char *)this + 1192);
  v687 = (uint64_t *)((char *)this + 1216);
  v686 = (uint64_t *)((char *)this + 1224);
  v685 = (uint64_t *)((char *)this + 1232);
  v684 = (uint64_t *)((char *)this + 1240);
  v682 = (uint64_t *)((char *)this + 1248);
  *((_QWORD *)this + 158) = 0;
  *((_OWORD *)this + 77) = 0u;
  *((_OWORD *)this + 78) = 0u;
  *((_OWORD *)this + 75) = 0u;
  *((_OWORD *)this + 76) = 0u;
  *((_OWORD *)this + 73) = 0u;
  *((_OWORD *)this + 74) = 0u;
  *((_OWORD *)this + 71) = 0u;
  *((_OWORD *)this + 72) = 0u;
  *((_OWORD *)this + 69) = 0u;
  *((_OWORD *)this + 70) = 0u;
  *((_BYTE *)this + 80) = 1;
  *((_BYTE *)this + 944) = 1;
  *((_BYTE *)this + 728) = 1;
  *((_BYTE *)this + 512) = 1;
  if (v6)
  {
    -[VKSharedResources standardCommandBufferSelector](v6, "standardCommandBufferSelector", (char *)this + 888, (char *)this + 672, (char *)this + 456, (char *)this + 24);
    v692 = *(unsigned __int8 *)(*(_QWORD *)v696 + 56);
    if (*(_QWORD *)&v696[8])
    {
      v8 = (unint64_t *)(*(_QWORD *)&v696[8] + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        (*(void (**)(_QWORD))(**(_QWORD **)&v696[8] + 16))(*(_QWORD *)&v696[8]);
        std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v696[8]);
      }
    }
  }
  else
  {
    v692 = MEMORY[0x38];
  }
  v10 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 80);
  v12 = *(_QWORD *)(v10 + 56);
  v11 = *(std::__shared_weak_count **)(v10 + 64);
  v699 = v12;
  v700 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  *(_OWORD *)&v696[20] = 0uLL;
  v697 = 0;
  v696[0] = 0;
  *(_OWORD *)&v696[4] = xmmword_19FFB3060;
  v698 = 15;
  v15 = operator new(0x198uLL);
  v15[1] = 0;
  v15[2] = 0;
  *v15 = &off_1E42E4D90;
  v16 = *(_OWORD *)&a4->colorFormatsCount;
  v701 = *(_OWORD *)a4->colorFormats;
  v702 = v16;
  *((_QWORD *)this + 138) = ggl::Flyover::FlyoverPipelineState::FlyoverPipelineState((uint64_t)(v15 + 3), &v699, (uint64_t)v696, &v701, v692 != 0);
  v17 = (std::__shared_weak_count *)*((_QWORD *)this + 139);
  *((_QWORD *)this + 139) = v15;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = v700;
  if (v700)
  {
    v21 = (unint64_t *)&v700->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = (uint64_t *)operator new();
  v737[0] = &off_1E427A4A0;
  v737[1] = this;
  v738 = v737;
  v735[0] = &off_1E427A4E8;
  v736 = v735;
  v23[1] = 0;
  v23[2] = 0;
  *v23 = 0;
  v24 = &unk_1ECE44000;
  {
    v650 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v650, "GeoGL", 0xA3D02C1100000005);
  }
  v26 = ggl::Allocator::instance(void)::alloc;
  v23[4] = 0;
  v23[3] = v26;
  v23[5] = 0;
  v23[6] = 0;
  {
    v651 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v651, "GeoGL", 0xA3D02C1100000005);
  }
  v23[7] = ggl::Allocator::instance(void)::alloc;
  v27 = (uint64_t)v738;
  if (!v738)
    goto LABEL_26;
  if (v738 != v737)
  {
    v27 = (*(uint64_t (**)(_QWORD *))(*v738 + 16))(v738);
LABEL_26:
    v23[11] = v27;
    goto LABEL_28;
  }
  v23[11] = (uint64_t)(v23 + 8);
  (*(void (**)(_QWORD *, uint64_t *))(v737[0] + 24))(v737, v23 + 8);
LABEL_28:
  v28 = (uint64_t)v736;
  if (!v736)
  {
LABEL_31:
    v23[15] = v28;
    goto LABEL_33;
  }
  if (v736 != v735)
  {
    v28 = (*(uint64_t (**)(_QWORD *))(*v736 + 16))(v736);
    goto LABEL_31;
  }
  v23[15] = (uint64_t)(v23 + 12);
  (*(void (**)(_QWORD *, uint64_t *))(v735[0] + 24))(v735, v23 + 12);
LABEL_33:
  v23[16] = 8000;
  v29 = *v23;
  if ((unint64_t)(v23[2] - *v23) >> 6 > 0x7C)
    goto LABEL_46;
  v30 = v23[1];
  v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v23[3] + 16))(v23[3], 8000, 8);
  v32 = v30 - v29;
  v33 = v31 + ((v30 - v29) & 0xFFFFFFFFFFFFFFF8);
  v35 = *v23;
  v34 = v23[1];
  v36 = v34 - *v23;
  if (v34 == *v23)
  {
    v38 = v31 + ((v30 - v29) & 0xFFFFFFFFFFFFFFF8);
    v24 = (_QWORD *)&unk_1ECE44000;
    goto LABEL_44;
  }
  v37 = v36 - 8;
  v24 = (_QWORD *)&unk_1ECE44000;
  if ((unint64_t)(v36 - 8) >= 0x58)
  {
    v38 = v33;
    if (v34 - ((v32 & 0xFFFFFFFFFFFFFFF8) + v31) >= 0x20)
    {
      v39 = v32 >> 3;
      v40 = (v37 >> 3) + 1;
      v41 = (_OWORD *)(v31 + 8 * v39 - 16);
      v42 = (__int128 *)(v34 - 16);
      v43 = v40 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v44 = *v42;
        *(v41 - 1) = *(v42 - 1);
        *v41 = v44;
        v41 -= 2;
        v42 -= 2;
        v43 -= 4;
      }
      while (v43);
      v38 = v33 - 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
      v34 -= 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
      if (v40 == (v40 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_43;
    }
  }
  else
  {
    v38 = v33;
  }
  do
  {
    v45 = *(_QWORD *)(v34 - 8);
    v34 -= 8;
    *(_QWORD *)(v38 - 8) = v45;
    v38 -= 8;
  }
  while (v34 != v35);
LABEL_43:
  v34 = *v23;
LABEL_44:
  *v23 = v38;
  v23[1] = v33;
  v46 = v23[2];
  v23[2] = v31 + 8000;
  if (v34)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v23[3] + 40))(v23[3], v34, v46 - v34);
LABEL_46:
  v47 = v23[4];
  if ((unint64_t)(v23[6] - v47) >> 6 > 0x7C)
    goto LABEL_59;
  v48 = v23[5];
  v49 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v23[7] + 16))(v23[7], 8000, 8);
  v50 = v48 - v47;
  v51 = v49 + ((v48 - v47) & 0xFFFFFFFFFFFFFFF8);
  v53 = v23[4];
  v52 = v23[5];
  v54 = v52 - v53;
  if (v52 == v53)
  {
    v56 = v49 + ((v48 - v47) & 0xFFFFFFFFFFFFFFF8);
    v24 = (_QWORD *)&unk_1ECE44000;
    goto LABEL_57;
  }
  v55 = v54 - 8;
  v24 = &unk_1ECE44000;
  if ((unint64_t)(v54 - 8) >= 0x58)
  {
    v56 = v51;
    if (v52 - (v50 & 0xFFFFFFFFFFFFFFF8) - v49 >= 0x20)
    {
      v57 = v50 >> 3;
      v58 = (v55 >> 3) + 1;
      v59 = (_OWORD *)(v49 + 8 * v57 - 16);
      v60 = (__int128 *)(v52 - 16);
      v61 = v58 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v62 = *v60;
        *(v59 - 1) = *(v60 - 1);
        *v59 = v62;
        v59 -= 2;
        v60 -= 2;
        v61 -= 4;
      }
      while (v61);
      v56 = v51 - 8 * (v58 & 0x3FFFFFFFFFFFFFFCLL);
      v52 -= 8 * (v58 & 0x3FFFFFFFFFFFFFFCLL);
      if (v58 == (v58 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_56;
    }
  }
  else
  {
    v56 = v51;
  }
  do
  {
    v63 = *(_QWORD *)(v52 - 8);
    v52 -= 8;
    *(_QWORD *)(v56 - 8) = v63;
    v56 -= 8;
  }
  while (v52 != v53);
LABEL_56:
  v52 = v23[4];
LABEL_57:
  v23[4] = v56;
  v23[5] = v51;
  v64 = v23[6];
  v23[6] = v49 + 8000;
  if (v52)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v23[7] + 40))(v23[7], v52, v64 - v52);
LABEL_59:
  v65 = *v691;
  *v691 = (uint64_t)v23;
  if (v65)
  {
    v66 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v65);
    MEMORY[0x1A1AF4E00](v66, 0x10A0C40D234DDC7);
  }
  v67 = v736;
  if (v736 == v735)
  {
    v68 = 4;
    v67 = v735;
  }
  else
  {
    if (!v736)
      goto LABEL_66;
    v68 = 5;
  }
  (*(void (**)(void))(*v67 + 8 * v68))();
LABEL_66:
  v69 = v738;
  if (v738 == v737)
  {
    v70 = 4;
    v69 = v737;
  }
  else
  {
    if (!v738)
      goto LABEL_71;
    v70 = 5;
  }
  (*(void (**)(void))(*v69 + 8 * v70))();
LABEL_71:
  v71 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 80);
  v73 = *(_QWORD *)(v71 + 80);
  v72 = *(_QWORD *)(v71 + 88);
  *(_QWORD *)&v701 = v73;
  *((_QWORD *)&v701 + 1) = v72;
  if (v72)
  {
    v74 = (unint64_t *)(v72 + 8);
    do
      v75 = __ldxr(v74);
    while (__stxr(v75 + 1, v74));
  }
  v699 = 0;
  v76 = (char *)operator new(0x198uLL);
  *((_QWORD *)v76 + 1) = 0;
  *((_QWORD *)v76 + 2) = 0;
  *(_QWORD *)v76 = &off_1E428A290;
  v77 = *(_OWORD *)&a4->colorFormatsCount;
  *(_OWORD *)v696 = *(_OWORD *)a4->colorFormats;
  *(_OWORD *)&v696[16] = v77;
  if ((v78 & 1) == 0)
  {
    if ((_DWORD)v652)
    {
      if ((v653 & 1) == 0)
      {
        if ((_DWORD)v652)
        {
          if ((v676 & 1) == 0
          {
            if ((v680 & 1) == 0
            {
              ggl::MeshTyped<ggl::FlyoverCommon::PolarVertex>::attributesReflection(void)::r = (uint64_t)&ggl::FlyoverCommon::polarVertexReflection;
            }
            ggl::MeshTyped<ggl::FlyoverCommon::PolarVertex>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::FlyoverCommon::PolarVertex>::attributesReflection(void)::r;
            unk_1EE578638 = 1;
          }
          ggl::Flyover::FlyoverPolarPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::FlyoverCommon::PolarVertex>::typedReflection(void)::r;
          *(_QWORD *)algn_1EE583078 = &ggl::Flyover::pipelineDataFlyoverPolarPipelineDeviceStructs(void)::ref;
          qword_1EE583080 = 0;
          if ((v677 & 1) == 0
          {
            ggl::Flyover::pipelineDataFlyoverPolarPipelineConstantStructs(void)::ref = (uint64_t)ggl::FlyoverCommon::Shared::reflection(void)::reflection;
            unk_1EE583100 = ggl::FlyoverCommon::Transform::reflection(void)::reflection;
            qword_1EE583108 = (uint64_t)ggl::FlyoverCommon::Clip::reflection(void)::reflection;
            unk_1EE583110 = ggl::FlyoverCommon::Material::reflection(void)::reflection;
            qword_1EE583118 = (uint64_t)ggl::FlyoverCommon::Texcoords::reflection(void)::reflection;
            unk_1EE583120 = ggl::FlyoverCommon::S2Transform::reflection(void)::reflection;
          }
          qword_1EE583088 = (uint64_t)&ggl::Flyover::pipelineDataFlyoverPolarPipelineConstantStructs(void)::ref;
          unk_1EE583090 = xmmword_19FFB5090;
        }
      }
      ggl::Flyover::FlyoverPolarPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::Flyover::FlyoverPolarPipelineSetup::typedReflection(void)::ref;
      ggl::FlyoverPolarShader::typedReflection(v652);
      qword_1EE5830B0 = (uint64_t)&ggl::FlyoverPolarShader::typedReflection(void)::ref;
      if ((v654 & 1) == 0
      {
        ggl::Flyover::pipelineStateFlyoverPolarPipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE583370 = 0;
        qword_1EE583378 = (uint64_t)"";
        dword_1EE583380 = 0;
        qword_1EE583388 = (uint64_t)&ggl::Flyover::pipelineStateFlyoverPolarPipelineAttributeBinding_0(void)::attr;
        unk_1EE583390 = 1;
      }
      qword_1EE5830B8 = (uint64_t)&ggl::Flyover::pipelineStateFlyoverPolarPipelineAttributeStructBinding(void)::attr;
      unk_1EE5830C0 = 1;
      qword_1EE5830C8 = 0;
      unk_1EE5830D0 = 2;
      qword_1EE5830D8 = (uint64_t)&ggl::Flyover::pipelineStateFlyoverPolarPipelineDeviceStructBinding(void)::ref;
      unk_1EE5830E0 = 0;
      if ((v655 & 1) == 0
      {
        ggl::Flyover::pipelineStateFlyoverPolarPipelineConstantStructBinding(void)::ref = 0;
        unk_1EE583250 = 0;
        qword_1EE583258 = (uint64_t)"sharedConstants";
        dword_1EE583260 = 3;
        qword_1EE583268 = (uint64_t)&ggl::Flyover::pipelineStateFlyoverPolarPipelineConstantSharedConstantsBinding(void)::reflection;
        *(_OWORD *)algn_1EE583270 = xmmword_19FFB3030;
        qword_1EE583280 = 1;
        unk_1EE583288 = "transform";
        dword_1EE583290 = 3;
        qword_1EE583298 = (uint64_t)&ggl::Flyover::pipelineStateFlyoverPolarPipelineConstantTransformBinding(void)::reflection;
        unk_1EE5832A0 = vdupq_n_s64(2uLL);
        qword_1EE5832B0 = 2;
        unk_1EE5832B8 = "clip";
        dword_1EE5832C0 = 3;
        qword_1EE5832C8 = (uint64_t)&ggl::Flyover::pipelineStateFlyoverPolarPipelineConstantClipBinding(void)::reflection;
        *(_OWORD *)algn_1EE5832D0 = xmmword_19FFB3040;
        qword_1EE5832E0 = 3;
        unk_1EE5832E8 = "material";
        dword_1EE5832F0 = 3;
        qword_1EE5832F8 = (uint64_t)&ggl::Flyover::pipelineStateFlyoverPolarPipelineConstantMaterialBinding(void)::reflection;
        unk_1EE583300 = xmmword_19FFB3050;
        qword_1EE583310 = 4;
        unk_1EE583318 = "texcoords";
        dword_1EE583320 = 3;
        qword_1EE583328 = (uint64_t)&ggl::Flyover::pipelineStateFlyoverPolarPipelineConstantTexcoordsBinding(void)::reflection;
        *(_OWORD *)algn_1EE583330 = xmmword_19FFB4860;
        qword_1EE583340 = 5;
        unk_1EE583348 = "s2Transform";
        dword_1EE583350 = 3;
        qword_1EE583358 = (uint64_t)&ggl::Flyover::pipelineStateFlyoverPolarPipelineConstantS2TransformBinding(void)::reflection;
        unk_1EE583360 = 3;
      }
      qword_1EE5830E8 = (uint64_t)&ggl::Flyover::pipelineStateFlyoverPolarPipelineConstantStructBinding(void)::ref;
      unk_1EE5830F0 = 6;
      v24 = (_QWORD *)&unk_1ECE44000;
    }
  }
  v79 = v701;
  if (*((_QWORD *)&v701 + 1))
  {
    v80 = (unint64_t *)(*((_QWORD *)&v701 + 1) + 8);
    do
      v81 = __ldxr(v80);
    while (__stxr(v81 + 1, v80));
    *((_DWORD *)v76 + 14) = 0;
    *((_QWORD *)v76 + 5) = 0;
    *((_QWORD *)v76 + 6) = 0;
    *((_QWORD *)v76 + 3) = &off_1E42B6760;
    *((_QWORD *)v76 + 4) = 0;
    *((_QWORD *)v76 + 8) = &ggl::Flyover::FlyoverPolarPipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v76 + 72) = v79;
    do
      v82 = __ldxr(v80);
    while (__stxr(v82 + 1, v80));
  }
  else
  {
    *((_DWORD *)v76 + 14) = 0;
    *((_QWORD *)v76 + 5) = 0;
    *((_QWORD *)v76 + 6) = 0;
    *((_QWORD *)v76 + 3) = &off_1E42B6760;
    *((_QWORD *)v76 + 4) = 0;
    *((_QWORD *)v76 + 8) = &ggl::Flyover::FlyoverPolarPipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v76 + 72) = v79;
  }
  v76[136] = 0;
  *(_OWORD *)(v76 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v76 + 156) = 0;
  *(_QWORD *)(v76 + 172) = 0;
  *(_QWORD *)(v76 + 164) = 0;
  v76[184] = 0;
  *(_OWORD *)(v76 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v76 + 204) = 0;
  *(_QWORD *)(v76 + 220) = 0;
  *(_QWORD *)(v76 + 212) = 0;
  v76[232] = 0;
  *(_OWORD *)(v76 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v76 + 252) = 0;
  *(_QWORD *)(v76 + 268) = 0;
  *(_QWORD *)(v76 + 260) = 0;
  v83 = *(_OWORD *)&v696[16];
  *(_OWORD *)(v76 + 280) = *(_OWORD *)v696;
  *(_OWORD *)(v76 + 296) = v83;
  v76[312] = 0;
  *((_QWORD *)v76 + 48) = 0;
  *((_OWORD *)v76 + 22) = 0u;
  *((_OWORD *)v76 + 23) = 0u;
  *((_OWORD *)v76 + 20) = 0u;
  *((_OWORD *)v76 + 21) = 0u;
  *((_QWORD *)v76 + 49) = 0x100000001;
  v76[400] = 0;
  v76[88] = 0;
  *(_WORD *)(v76 + 89) = v694;
  v76[91] = v695;
  *(_OWORD *)(v76 + 92) = xmmword_19FFB3060;
  *(_QWORD *)(v76 + 108) = v699;
  *((_DWORD *)v76 + 29) = 0;
  *((_QWORD *)v76 + 15) = 0;
  *((_DWORD *)v76 + 32) = 0;
  v76[132] = 15;
  if (*((_QWORD *)&v79 + 1))
  {
    v84 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v79 + 1) + 16))(*((_QWORD *)&v79 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v79 + 1));
    }
  }
  v76[328] = v692;
  v86 = vceqzq_s8(*(int8x16_t *)(v76 + 328));
  v87 = vmovl_high_s8(v86);
  v88 = vmovl_s16(*(int16x4_t *)v87.i8);
  v89.i64[0] = v88.u32[0];
  v89.i64[1] = v88.u32[1];
  v90 = v89;
  v91 = vmovl_s8(*(int8x8_t *)v86.i8);
  v92 = vmovl_s16(*(int16x4_t *)v91.i8);
  v89.i64[0] = v92.u32[0];
  v89.i64[1] = v92.u32[1];
  v93 = v89;
  v94 = vmovl_high_s16(v87);
  v89.i64[0] = v94.u32[0];
  v89.i64[1] = v94.u32[1];
  v95 = v89;
  v96 = vmovl_high_s16(v91);
  v89.i64[0] = v96.u32[0];
  v89.i64[1] = v96.u32[1];
  v97 = v89;
  v89.i64[0] = v88.u32[2];
  v89.i64[1] = v88.u32[3];
  v98 = v89;
  v89.i64[0] = v92.u32[2];
  v89.i64[1] = v92.u32[3];
  v99 = v89;
  v89.i64[0] = v94.u32[2];
  v89.i64[1] = v94.u32[3];
  v100 = v89;
  v89.i64[0] = v96.u32[2];
  v89.i64[1] = v96.u32[3];
  v101 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v89);
  v102 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v100);
  v103 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v99);
  v104 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v95);
  v105 = vceqzq_s8(*(int8x16_t *)(v76 + 344));
  v106 = vmovl_high_s8(v105);
  v107 = vmovl_s16(*(int16x4_t *)v106.i8);
  v89.i64[0] = v107.u32[0];
  v89.i64[1] = v107.u32[1];
  v108 = v89;
  v109 = vmovl_s8(*(int8x8_t *)v105.i8);
  v110 = vmovl_s16(*(int16x4_t *)v109.i8);
  v89.i64[0] = v110.u32[0];
  v89.i64[1] = v110.u32[1];
  v111 = v89;
  v112 = vmovl_high_s16(v106);
  v89.i64[0] = v112.u32[0];
  v89.i64[1] = v112.u32[1];
  v113 = v89;
  v114 = vmovl_high_s16(v109);
  v89.i64[0] = v114.u32[0];
  v89.i64[1] = v114.u32[1];
  v115 = v89;
  v89.i64[0] = v107.u32[2];
  v89.i64[1] = v107.u32[3];
  v116 = v89;
  v89.i64[0] = v110.u32[2];
  v89.i64[1] = v110.u32[3];
  v117 = v89;
  v89.i64[0] = v112.u32[2];
  v89.i64[1] = v112.u32[3];
  v118 = v89;
  v89.i64[0] = v114.u32[2];
  v89.i64[1] = v114.u32[3];
  v119 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v118);
  v120 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v108), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v90));
  v121 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v111), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v93));
  v122 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v113), v104);
  v123 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v115), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v97));
  v124 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v116), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v98));
  v125 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v117), v103);
  v126 = vorrq_s8(v119, v102);
  v127 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v89), v101);
  v128 = vceqzq_s8(*(int8x16_t *)(v76 + 360));
  v129 = vmovl_high_s8(v128);
  v130 = vmovl_s16(*(int16x4_t *)v129.i8);
  v89.i64[0] = v130.i32[0];
  v89.i64[1] = v130.i32[1];
  v131 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v89);
  v132 = vceqzq_s8(*(int8x16_t *)(v76 + 376));
  v133 = vmovl_high_s8(v132);
  v134 = vmovl_s16(*(int16x4_t *)v133.i8);
  v89.i64[0] = v134.i32[0];
  v89.i64[1] = v134.i32[1];
  v135 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v89), v131), v120);
  v136 = vmovl_s8(*(int8x8_t *)v128.i8);
  v137 = vmovl_s16(*(int16x4_t *)v136.i8);
  v89.i64[0] = v137.i32[0];
  v89.i64[1] = v137.i32[1];
  v138 = vbicq_s8((int8x16_t)xmmword_19FFB3170, v89);
  v139 = vmovl_s8(*(int8x8_t *)v132.i8);
  v140 = vmovl_s16(*(int16x4_t *)v139.i8);
  v89.i64[0] = v140.i32[0];
  v89.i64[1] = v140.i32[1];
  v141 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v89), v138), v121);
  v142 = vmovl_high_s16(v129);
  v89.i64[0] = v142.i32[0];
  v89.i64[1] = v142.i32[1];
  v143 = vbicq_s8((int8x16_t)xmmword_19FFB3180, v89);
  v144 = vmovl_high_s16(v133);
  v89.i64[0] = v144.i32[0];
  v89.i64[1] = v144.i32[1];
  v145 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v89), v143), v122);
  v146 = vmovl_high_s16(v136);
  v89.i64[0] = v146.i32[0];
  v89.i64[1] = v146.i32[1];
  v147 = vbicq_s8((int8x16_t)xmmword_19FFB3190, v89);
  v148 = vmovl_high_s16(v139);
  v89.i64[0] = v148.i32[0];
  v89.i64[1] = v148.i32[1];
  v149 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v89), v147), v123);
  v89.i64[0] = v130.i32[2];
  v89.i64[1] = v130.i32[3];
  v150 = vbicq_s8((int8x16_t)xmmword_19FFB31A0, v89);
  v89.i64[0] = v134.i32[2];
  v89.i64[1] = v134.i32[3];
  v151 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v89), v150), v124);
  v89.i64[0] = v137.i32[2];
  v89.i64[1] = v137.i32[3];
  v152 = vbicq_s8((int8x16_t)xmmword_19FFB31B0, v89);
  v89.i64[0] = v140.i32[2];
  v89.i64[1] = v140.i32[3];
  v153 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v89), v152), v125);
  v89.i64[0] = v142.i32[2];
  v89.i64[1] = v142.i32[3];
  v154 = vbicq_s8((int8x16_t)xmmword_19FFB31C0, v89);
  v89.i64[0] = v144.i32[2];
  v89.i64[1] = v144.i32[3];
  v155 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31F0, v89), v154), v126);
  v89.i64[0] = v146.i32[2];
  v89.i64[1] = v146.i32[3];
  v156 = vbicq_s8((int8x16_t)xmmword_19FFB31D0, v89);
  v89.i64[0] = v148.i32[2];
  v89.i64[1] = v148.i32[3];
  *((_QWORD *)v76 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(v141, v135), vorrq_s8(v149, v145)), (int64x2_t)vorrq_s8(vorrq_s8(v153, v151), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v89), v156), v127), v155))));
  *((_QWORD *)v76 + 3) = &off_1E4274878;
  v76[312] = 1;
  *((_QWORD *)this + 141) = v76 + 24;
  v157 = (std::__shared_weak_count *)*((_QWORD *)this + 142);
  *((_QWORD *)this + 142) = v76;
  if (v157)
  {
    v158 = (unint64_t *)&v157->__shared_owners_;
    do
      v159 = __ldaxr(v158);
    while (__stlxr(v159 - 1, v158));
    if (!v159)
    {
      ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
      std::__shared_weak_count::__release_weak(v157);
    }
  }
  v160 = (std::__shared_weak_count *)*((_QWORD *)&v701 + 1);
  if (*((_QWORD *)&v701 + 1))
  {
    v161 = (unint64_t *)(*((_QWORD *)&v701 + 1) + 8);
    do
      v162 = __ldaxr(v161);
    while (__stlxr(v162 - 1, v161));
    if (!v162)
    {
      ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
      std::__shared_weak_count::__release_weak(v160);
    }
  }
  v163 = (uint64_t *)operator new();
  v733[0] = &off_1E427A530;
  v733[1] = this;
  v734 = v733;
  v731[0] = &off_1E427A578;
  v732 = v731;
  v163[1] = 0;
  v163[2] = 0;
  *v163 = 0;
  {
    v656 = operator new();
    v24[495] = geo::MallocZoneAllocator::MallocZoneAllocator(v656, "GeoGL", 0xA3D02C1100000005);
  }
  v165 = v24[495];
  v163[4] = 0;
  v163[3] = v165;
  v163[5] = 0;
  v163[6] = 0;
  {
    v657 = operator new();
    v24[495] = geo::MallocZoneAllocator::MallocZoneAllocator(v657, "GeoGL", 0xA3D02C1100000005);
  }
  v163[7] = v24[495];
  v166 = (uint64_t)v734;
  if (!v734)
    goto LABEL_102;
  if (v734 != v733)
  {
    v166 = (*(uint64_t (**)(void))(*v734 + 16))();
LABEL_102:
    v163[11] = v166;
    goto LABEL_104;
  }
  v163[11] = (uint64_t)(v163 + 8);
  (*(void (**)(_QWORD *, uint64_t *))(v733[0] + 24))(v733, v163 + 8);
LABEL_104:
  v167 = (uint64_t)v732;
  if (!v732)
  {
LABEL_107:
    v163[15] = v167;
    goto LABEL_109;
  }
  if (v732 != v731)
  {
    v167 = (*(uint64_t (**)(void))(*v732 + 16))();
    goto LABEL_107;
  }
  v163[15] = (uint64_t)(v163 + 12);
  (*(void (**)(_QWORD *, uint64_t *))(v731[0] + 24))(v731, v163 + 12);
LABEL_109:
  v163[16] = 8000;
  v168 = *v163;
  if ((unint64_t)(v163[2] - *v163) >> 6 > 0x7C)
    goto LABEL_122;
  v169 = v163[1];
  v170 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v163[3] + 16))(v163[3], 8000, 8);
  v171 = v169 - v168;
  v172 = v170 + ((v169 - v168) & 0xFFFFFFFFFFFFFFF8);
  v174 = *v163;
  v173 = v163[1];
  v175 = v173 - *v163;
  if (v173 == *v163)
  {
    v177 = v170 + ((v169 - v168) & 0xFFFFFFFFFFFFFFF8);
    v24 = (_QWORD *)&unk_1ECE44000;
    goto LABEL_120;
  }
  v176 = v175 - 8;
  v24 = (_QWORD *)&unk_1ECE44000;
  if ((unint64_t)(v175 - 8) >= 0x58)
  {
    v177 = v172;
    if (v173 - (v171 & 0xFFFFFFFFFFFFFFF8) - v170 >= 0x20)
    {
      v178 = v171 >> 3;
      v179 = (v176 >> 3) + 1;
      v180 = (_OWORD *)(v170 + 8 * v178 - 16);
      v181 = (__int128 *)(v173 - 16);
      v182 = v179 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v183 = *v181;
        *(v180 - 1) = *(v181 - 1);
        *v180 = v183;
        v180 -= 2;
        v181 -= 2;
        v182 -= 4;
      }
      while (v182);
      v177 = v172 - 8 * (v179 & 0x3FFFFFFFFFFFFFFCLL);
      v173 -= 8 * (v179 & 0x3FFFFFFFFFFFFFFCLL);
      if (v179 == (v179 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_119;
    }
  }
  else
  {
    v177 = v172;
  }
  do
  {
    v184 = *(_QWORD *)(v173 - 8);
    v173 -= 8;
    *(_QWORD *)(v177 - 8) = v184;
    v177 -= 8;
  }
  while (v173 != v174);
LABEL_119:
  v173 = *v163;
LABEL_120:
  *v163 = v177;
  v163[1] = v172;
  v185 = v163[2];
  v163[2] = v170 + 8000;
  if (v173)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v163[3] + 40))(v163[3], v173, v185 - v173);
LABEL_122:
  v186 = v163[4];
  if ((unint64_t)(v163[6] - v186) >> 6 > 0x7C)
    goto LABEL_135;
  v187 = v163[5];
  v188 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v163[7] + 16))(v163[7], 8000, 8);
  v189 = v187 - v186;
  v190 = v188 + ((v187 - v186) & 0xFFFFFFFFFFFFFFF8);
  v192 = v163[4];
  v191 = v163[5];
  v193 = v191 - v192;
  if (v191 == v192)
  {
    v195 = v188 + ((v187 - v186) & 0xFFFFFFFFFFFFFFF8);
    v24 = (_QWORD *)&unk_1ECE44000;
    goto LABEL_133;
  }
  v194 = v193 - 8;
  v24 = &unk_1ECE44000;
  if ((unint64_t)(v193 - 8) >= 0x58)
  {
    v195 = v190;
    if (v191 - (v189 & 0xFFFFFFFFFFFFFFF8) - v188 >= 0x20)
    {
      v196 = v189 >> 3;
      v197 = (v194 >> 3) + 1;
      v198 = (_OWORD *)(v188 + 8 * v196 - 16);
      v199 = (__int128 *)(v191 - 16);
      v200 = v197 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v201 = *v199;
        *(v198 - 1) = *(v199 - 1);
        *v198 = v201;
        v198 -= 2;
        v199 -= 2;
        v200 -= 4;
      }
      while (v200);
      v195 = v190 - 8 * (v197 & 0x3FFFFFFFFFFFFFFCLL);
      v191 -= 8 * (v197 & 0x3FFFFFFFFFFFFFFCLL);
      if (v197 == (v197 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_132;
    }
  }
  else
  {
    v195 = v190;
  }
  do
  {
    v202 = *(_QWORD *)(v191 - 8);
    v191 -= 8;
    *(_QWORD *)(v195 - 8) = v202;
    v195 -= 8;
  }
  while (v191 != v192);
LABEL_132:
  v191 = v163[4];
LABEL_133:
  v163[4] = v195;
  v163[5] = v190;
  v203 = v163[6];
  v163[6] = v188 + 8000;
  if (v191)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v163[7] + 40))(v163[7], v191, v203 - v191);
LABEL_135:
  v204 = *v690;
  *v690 = (uint64_t)v163;
  if (v204)
  {
    v205 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v204);
    MEMORY[0x1A1AF4E00](v205, 0x10A0C40D234DDC7);
  }
  v206 = v732;
  if (v732 == v731)
  {
    v207 = 4;
    v206 = v731;
  }
  else
  {
    if (!v732)
      goto LABEL_142;
    v207 = 5;
  }
  (*(void (**)(void))(*v206 + 8 * v207))();
LABEL_142:
  v208 = v734;
  if (v734 == v733)
  {
    v209 = 4;
    v208 = v733;
  }
  else
  {
    if (!v734)
      goto LABEL_147;
    v209 = 5;
  }
  (*(void (**)(void))(*v208 + 8 * v209))();
LABEL_147:
  v210 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 80);
  v212 = *(_QWORD *)(v210 + 272);
  v211 = *(std::__shared_weak_count **)(v210 + 280);
  v699 = v212;
  v700 = v211;
  if (v211)
  {
    v213 = (unint64_t *)&v211->__shared_owners_;
    do
      v214 = __ldxr(v213);
    while (__stxr(v214 + 1, v213));
  }
  *(_QWORD *)&v696[28] = 0;
  *(_QWORD *)&v696[20] = 0;
  v697 = 0;
  v696[0] = 0;
  *(_OWORD *)&v696[4] = xmmword_19FFB3060;
  v698 = 15;
  v215 = operator new(0x198uLL);
  v215[1] = 0;
  v215[2] = 0;
  *v215 = &off_1E42DEC38;
  v216 = *(_OWORD *)&a4->colorFormatsCount;
  v701 = *(_OWORD *)a4->colorFormats;
  v702 = v216;
  *((_QWORD *)this + 144) = ggl::FlyoverNight::FlyoverPipelineState::FlyoverPipelineState((uint64_t)(v215 + 3), &v699, (uint64_t)v696, &v701, v692 != 0);
  v217 = (std::__shared_weak_count *)*((_QWORD *)this + 145);
  *((_QWORD *)this + 145) = v215;
  if (v217)
  {
    v218 = (unint64_t *)&v217->__shared_owners_;
    do
      v219 = __ldaxr(v218);
    while (__stlxr(v219 - 1, v218));
    if (!v219)
    {
      ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
      std::__shared_weak_count::__release_weak(v217);
    }
  }
  v220 = v700;
  if (v700)
  {
    v221 = (unint64_t *)&v700->__shared_owners_;
    do
      v222 = __ldaxr(v221);
    while (__stlxr(v222 - 1, v221));
    if (!v222)
    {
      ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
      std::__shared_weak_count::__release_weak(v220);
    }
  }
  v223 = (uint64_t *)operator new();
  v729[0] = &off_1E427A5C0;
  v729[1] = this;
  v730 = v729;
  v727[0] = &off_1E427A608;
  v728 = v727;
  v223[1] = 0;
  v223[2] = 0;
  *v223 = 0;
  {
    v658 = operator new();
    v24[495] = geo::MallocZoneAllocator::MallocZoneAllocator(v658, "GeoGL", 0xA3D02C1100000005);
  }
  v225 = v24[495];
  v223[4] = 0;
  v223[3] = v225;
  v223[5] = 0;
  v223[6] = 0;
  {
    v659 = operator new();
    v24[495] = geo::MallocZoneAllocator::MallocZoneAllocator(v659, "GeoGL", 0xA3D02C1100000005);
  }
  v223[7] = v24[495];
  v226 = (uint64_t)v730;
  if (!v730)
    goto LABEL_165;
  if (v730 != v729)
  {
    v226 = (*(uint64_t (**)(void))(*v730 + 16))();
LABEL_165:
    v223[11] = v226;
    goto LABEL_167;
  }
  v223[11] = (uint64_t)(v223 + 8);
  (*(void (**)(_QWORD *, uint64_t *))(v729[0] + 24))(v729, v223 + 8);
LABEL_167:
  v227 = (uint64_t)v728;
  if (!v728)
  {
LABEL_170:
    v223[15] = v227;
    goto LABEL_172;
  }
  if (v728 != v727)
  {
    v227 = (*(uint64_t (**)(void))(*v728 + 16))();
    goto LABEL_170;
  }
  v223[15] = (uint64_t)(v223 + 12);
  (*(void (**)(_QWORD *, uint64_t *))(v727[0] + 24))(v727, v223 + 12);
LABEL_172:
  v223[16] = 8000;
  v228 = *v223;
  if ((unint64_t)(v223[2] - *v223) >> 6 > 0x7C)
    goto LABEL_185;
  v229 = v223[1];
  v230 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v223[3] + 16))(v223[3], 8000, 8);
  v231 = v229 - v228;
  v232 = v230 + ((v229 - v228) & 0xFFFFFFFFFFFFFFF8);
  v234 = *v223;
  v233 = v223[1];
  v235 = v233 - *v223;
  if (v233 == *v223)
  {
    v237 = v230 + ((v229 - v228) & 0xFFFFFFFFFFFFFFF8);
    v24 = (_QWORD *)&unk_1ECE44000;
    goto LABEL_183;
  }
  v236 = v235 - 8;
  v24 = (_QWORD *)&unk_1ECE44000;
  if ((unint64_t)(v235 - 8) >= 0x58)
  {
    v237 = v232;
    if (v233 - (v231 & 0xFFFFFFFFFFFFFFF8) - v230 >= 0x20)
    {
      v238 = v231 >> 3;
      v239 = (v236 >> 3) + 1;
      v240 = (_OWORD *)(v230 + 8 * v238 - 16);
      v241 = (__int128 *)(v233 - 16);
      v242 = v239 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v243 = *v241;
        *(v240 - 1) = *(v241 - 1);
        *v240 = v243;
        v240 -= 2;
        v241 -= 2;
        v242 -= 4;
      }
      while (v242);
      v237 = v232 - 8 * (v239 & 0x3FFFFFFFFFFFFFFCLL);
      v233 -= 8 * (v239 & 0x3FFFFFFFFFFFFFFCLL);
      if (v239 == (v239 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_182;
    }
  }
  else
  {
    v237 = v232;
  }
  do
  {
    v244 = *(_QWORD *)(v233 - 8);
    v233 -= 8;
    *(_QWORD *)(v237 - 8) = v244;
    v237 -= 8;
  }
  while (v233 != v234);
LABEL_182:
  v233 = *v223;
LABEL_183:
  *v223 = v237;
  v223[1] = v232;
  v245 = v223[2];
  v223[2] = v230 + 8000;
  if (v233)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v223[3] + 40))(v223[3], v233, v245 - v233);
LABEL_185:
  v246 = v223[4];
  if ((unint64_t)(v223[6] - v246) >> 6 > 0x7C)
    goto LABEL_198;
  v247 = v223[5];
  v248 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v223[7] + 16))(v223[7], 8000, 8);
  v249 = v247 - v246;
  v250 = v248 + ((v247 - v246) & 0xFFFFFFFFFFFFFFF8);
  v252 = v223[4];
  v251 = v223[5];
  v253 = v251 - v252;
  if (v251 == v252)
  {
    v255 = v248 + ((v247 - v246) & 0xFFFFFFFFFFFFFFF8);
    v24 = (_QWORD *)&unk_1ECE44000;
    goto LABEL_196;
  }
  v254 = v253 - 8;
  v24 = &unk_1ECE44000;
  if ((unint64_t)(v253 - 8) >= 0x58)
  {
    v255 = v250;
    if (v251 - (v249 & 0xFFFFFFFFFFFFFFF8) - v248 >= 0x20)
    {
      v256 = v249 >> 3;
      v257 = (v254 >> 3) + 1;
      v258 = (_OWORD *)(v248 + 8 * v256 - 16);
      v259 = (__int128 *)(v251 - 16);
      v260 = v257 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v261 = *v259;
        *(v258 - 1) = *(v259 - 1);
        *v258 = v261;
        v258 -= 2;
        v259 -= 2;
        v260 -= 4;
      }
      while (v260);
      v255 = v250 - 8 * (v257 & 0x3FFFFFFFFFFFFFFCLL);
      v251 -= 8 * (v257 & 0x3FFFFFFFFFFFFFFCLL);
      if (v257 == (v257 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_195;
    }
  }
  else
  {
    v255 = v250;
  }
  do
  {
    v262 = *(_QWORD *)(v251 - 8);
    v251 -= 8;
    *(_QWORD *)(v255 - 8) = v262;
    v255 -= 8;
  }
  while (v251 != v252);
LABEL_195:
  v251 = v223[4];
LABEL_196:
  v223[4] = v255;
  v223[5] = v250;
  v263 = v223[6];
  v223[6] = v248 + 8000;
  if (v251)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v223[7] + 40))(v223[7], v251, v263 - v251);
LABEL_198:
  v264 = *v689;
  *v689 = (uint64_t)v223;
  if (v264)
  {
    v265 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v264);
    MEMORY[0x1A1AF4E00](v265, 0x10A0C40D234DDC7);
  }
  v266 = v728;
  if (v728 == v727)
  {
    v267 = 4;
    v266 = v727;
  }
  else
  {
    if (!v728)
      goto LABEL_205;
    v267 = 5;
  }
  (*(void (**)(void))(*v266 + 8 * v267))();
LABEL_205:
  v268 = v730;
  if (v730 == v729)
  {
    v269 = 4;
    v268 = v729;
  }
  else
  {
    if (!v730)
      goto LABEL_210;
    v269 = 5;
  }
  (*(void (**)(void))(*v268 + 8 * v269))();
LABEL_210:
  v270 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 80);
  v272 = *(_QWORD *)(v270 + 296);
  v271 = *(_QWORD *)(v270 + 304);
  *(_QWORD *)&v701 = v272;
  *((_QWORD *)&v701 + 1) = v271;
  if (v271)
  {
    v273 = (unint64_t *)(v271 + 8);
    do
      v274 = __ldxr(v273);
    while (__stxr(v274 + 1, v273));
  }
  v699 = 0;
  v275 = (char *)operator new(0x198uLL);
  *((_QWORD *)v275 + 1) = 0;
  *((_QWORD *)v275 + 2) = 0;
  *(_QWORD *)v275 = &off_1E428A178;
  v276 = *(_OWORD *)&a4->colorFormatsCount;
  *(_OWORD *)v696 = *(_OWORD *)a4->colorFormats;
  *(_OWORD *)&v696[16] = v276;
  if ((v277 & 1) == 0)
  {
    if ((_DWORD)v660)
    {
      if ((v661 & 1) == 0)
      {
        if ((_DWORD)v660)
        {
          if ((v678 & 1) == 0
          {
            if ((v681 & 1) == 0
            {
              ggl::MeshTyped<ggl::FlyoverCommon::PolarVertex>::attributesReflection(void)::r = (uint64_t)&ggl::FlyoverCommon::polarVertexReflection;
            }
            ggl::MeshTyped<ggl::FlyoverCommon::PolarVertex>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::FlyoverCommon::PolarVertex>::attributesReflection(void)::r;
            unk_1EE578638 = 1;
          }
          ggl::FlyoverNight::FlyoverPolarPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::FlyoverCommon::PolarVertex>::typedReflection(void)::r;
          *(_QWORD *)algn_1EE57B058 = &ggl::FlyoverNight::pipelineDataFlyoverPolarPipelineDeviceStructs(void)::ref;
          qword_1EE57B060 = 0;
          if ((v679 & 1) == 0
          {
            ggl::FlyoverNight::pipelineDataFlyoverPolarPipelineConstantStructs(void)::ref = (uint64_t)ggl::FlyoverCommon::Shared::reflection(void)::reflection;
            unk_1EE57B0E0 = ggl::FlyoverCommon::Transform::reflection(void)::reflection;
            qword_1EE57B0E8 = (uint64_t)ggl::FlyoverCommon::Clip::reflection(void)::reflection;
            unk_1EE57B0F0 = ggl::FlyoverCommon::Material::reflection(void)::reflection;
            qword_1EE57B0F8 = (uint64_t)ggl::FlyoverCommon::Texcoords::reflection(void)::reflection;
            unk_1EE57B100 = ggl::FlyoverCommon::S2Transform::reflection(void)::reflection;
          }
          qword_1EE57B068 = (uint64_t)&ggl::FlyoverNight::pipelineDataFlyoverPolarPipelineConstantStructs(void)::ref;
          unk_1EE57B070 = xmmword_19FFB4850;
        }
      }
      ggl::FlyoverNight::FlyoverPolarPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::FlyoverNight::FlyoverPolarPipelineSetup::typedReflection(void)::ref;
      ggl::FlyoverNightPolarShader::typedReflection(v660);
      qword_1EE57B090 = (uint64_t)&ggl::FlyoverNightPolarShader::typedReflection(void)::ref;
      if ((v662 & 1) == 0
      {
        ggl::FlyoverNight::pipelineStateFlyoverPolarPipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE57B350 = 0;
        qword_1EE57B358 = (uint64_t)"";
        dword_1EE57B360 = 0;
        qword_1EE57B368 = (uint64_t)&ggl::FlyoverNight::pipelineStateFlyoverPolarPipelineAttributeBinding_0(void)::attr;
        unk_1EE57B370 = 1;
      }
      qword_1EE57B098 = (uint64_t)&ggl::FlyoverNight::pipelineStateFlyoverPolarPipelineAttributeStructBinding(void)::attr;
      unk_1EE57B0A0 = 1;
      qword_1EE57B0A8 = 0;
      unk_1EE57B0B0 = 3;
      qword_1EE57B0B8 = (uint64_t)&ggl::FlyoverNight::pipelineStateFlyoverPolarPipelineDeviceStructBinding(void)::ref;
      unk_1EE57B0C0 = 0;
      if ((v663 & 1) == 0
      {
        ggl::FlyoverNight::pipelineStateFlyoverPolarPipelineConstantStructBinding(void)::ref = 0;
        unk_1EE57B230 = 0;
        qword_1EE57B238 = (uint64_t)"sharedConstants";
        dword_1EE57B240 = 3;
        qword_1EE57B248 = (uint64_t)&ggl::FlyoverNight::pipelineStateFlyoverPolarPipelineConstantSharedConstantsBinding(void)::reflection;
        *(_OWORD *)algn_1EE57B250 = xmmword_19FFB3030;
        qword_1EE57B260 = 1;
        unk_1EE57B268 = "transform";
        dword_1EE57B270 = 3;
        qword_1EE57B278 = (uint64_t)&ggl::FlyoverNight::pipelineStateFlyoverPolarPipelineConstantTransformBinding(void)::reflection;
        unk_1EE57B280 = vdupq_n_s64(2uLL);
        qword_1EE57B290 = 2;
        unk_1EE57B298 = "clip";
        dword_1EE57B2A0 = 3;
        qword_1EE57B2A8 = (uint64_t)&ggl::FlyoverNight::pipelineStateFlyoverPolarPipelineConstantClipBinding(void)::reflection;
        *(_OWORD *)algn_1EE57B2B0 = xmmword_19FFB3040;
        qword_1EE57B2C0 = 3;
        unk_1EE57B2C8 = "material";
        dword_1EE57B2D0 = 3;
        qword_1EE57B2D8 = (uint64_t)&ggl::FlyoverNight::pipelineStateFlyoverPolarPipelineConstantMaterialBinding(void)::reflection;
        unk_1EE57B2E0 = xmmword_19FFB3050;
        qword_1EE57B2F0 = 4;
        unk_1EE57B2F8 = "texcoords";
        dword_1EE57B300 = 3;
        qword_1EE57B308 = (uint64_t)&ggl::FlyoverNight::pipelineStateFlyoverPolarPipelineConstantTexcoordsBinding(void)::reflection;
        *(_OWORD *)algn_1EE57B310 = xmmword_19FFB4860;
        qword_1EE57B320 = 5;
        unk_1EE57B328 = "s2Transform";
        dword_1EE57B330 = 3;
        qword_1EE57B338 = (uint64_t)&ggl::FlyoverNight::pipelineStateFlyoverPolarPipelineConstantS2TransformBinding(void)::reflection;
        unk_1EE57B340 = 3;
      }
      qword_1EE57B0C8 = (uint64_t)&ggl::FlyoverNight::pipelineStateFlyoverPolarPipelineConstantStructBinding(void)::ref;
      unk_1EE57B0D0 = 6;
      v24 = (_QWORD *)&unk_1ECE44000;
    }
  }
  v278 = v701;
  if (*((_QWORD *)&v701 + 1))
  {
    v279 = (unint64_t *)(*((_QWORD *)&v701 + 1) + 8);
    do
      v280 = __ldxr(v279);
    while (__stxr(v280 + 1, v279));
    *((_DWORD *)v275 + 14) = 0;
    *((_QWORD *)v275 + 5) = 0;
    *((_QWORD *)v275 + 6) = 0;
    *((_QWORD *)v275 + 3) = &off_1E42B6760;
    *((_QWORD *)v275 + 4) = 0;
    *((_QWORD *)v275 + 8) = &ggl::FlyoverNight::FlyoverPolarPipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v275 + 72) = v278;
    do
      v281 = __ldxr(v279);
    while (__stxr(v281 + 1, v279));
  }
  else
  {
    *((_DWORD *)v275 + 14) = 0;
    *((_QWORD *)v275 + 5) = 0;
    *((_QWORD *)v275 + 6) = 0;
    *((_QWORD *)v275 + 3) = &off_1E42B6760;
    *((_QWORD *)v275 + 4) = 0;
    *((_QWORD *)v275 + 8) = &ggl::FlyoverNight::FlyoverPolarPipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v275 + 72) = v278;
  }
  v275[136] = 0;
  *(_OWORD *)(v275 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v275 + 156) = 0;
  *(_QWORD *)(v275 + 172) = 0;
  *(_QWORD *)(v275 + 164) = 0;
  v275[184] = 0;
  *(_OWORD *)(v275 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v275 + 204) = 0;
  *(_QWORD *)(v275 + 220) = 0;
  *(_QWORD *)(v275 + 212) = 0;
  v275[232] = 0;
  *(_OWORD *)(v275 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v275 + 252) = 0;
  *(_QWORD *)(v275 + 268) = 0;
  *(_QWORD *)(v275 + 260) = 0;
  v282 = *(_OWORD *)&v696[16];
  *(_OWORD *)(v275 + 280) = *(_OWORD *)v696;
  *(_OWORD *)(v275 + 296) = v282;
  v275[312] = 0;
  *((_QWORD *)v275 + 48) = 0;
  *((_OWORD *)v275 + 22) = 0u;
  *((_OWORD *)v275 + 23) = 0u;
  *((_OWORD *)v275 + 20) = 0u;
  *((_OWORD *)v275 + 21) = 0u;
  *((_QWORD *)v275 + 49) = 0x100000001;
  v275[400] = 0;
  v275[88] = 0;
  *(_WORD *)(v275 + 89) = v694;
  v275[91] = v695;
  *(_OWORD *)(v275 + 92) = xmmword_19FFB3060;
  *(_QWORD *)(v275 + 108) = v699;
  *((_DWORD *)v275 + 29) = 0;
  *((_QWORD *)v275 + 15) = 0;
  *((_DWORD *)v275 + 32) = 0;
  v275[132] = 15;
  if (*((_QWORD *)&v278 + 1))
  {
    v283 = (unint64_t *)(*((_QWORD *)&v278 + 1) + 8);
    do
      v284 = __ldaxr(v283);
    while (__stlxr(v284 - 1, v283));
    if (!v284)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v278 + 1) + 16))(*((_QWORD *)&v278 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v278 + 1));
    }
  }
  v275[328] = v692;
  v285 = vceqzq_s8(*(int8x16_t *)(v275 + 328));
  v286 = vmovl_s8(*(int8x8_t *)v285.i8);
  v287 = vmovl_high_s16(v286);
  v288.i64[0] = v287.u32[2];
  v288.i64[1] = v287.u32[3];
  v289 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v288);
  v290 = vmovl_high_s8(v285);
  v291 = vmovl_high_s16(v290);
  v288.i64[0] = v291.u32[2];
  v288.i64[1] = v291.u32[3];
  v292 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v288);
  v293 = vmovl_s16(*(int16x4_t *)v286.i8);
  v288.i64[0] = v293.u32[2];
  v288.i64[1] = v293.u32[3];
  v294 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v288);
  v295 = vmovl_s16(*(int16x4_t *)v290.i8);
  v288.i64[0] = v295.u32[2];
  v288.i64[1] = v295.u32[3];
  v296 = vbicq_s8((int8x16_t)xmmword_19FFB30A0, v288);
  v288.i64[0] = v287.u32[0];
  v288.i64[1] = v287.u32[1];
  v297 = vbicq_s8((int8x16_t)xmmword_19FFB30B0, v288);
  v288.i64[0] = v291.u32[0];
  v288.i64[1] = v291.u32[1];
  v298 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v288);
  v288.i64[0] = v293.u32[0];
  v288.i64[1] = v293.u32[1];
  v299 = vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v288);
  v288.i64[0] = v295.u32[0];
  v288.i64[1] = v295.u32[1];
  v300 = vbicq_s8((int8x16_t)xmmword_19FFB30D0, v288);
  v301 = vceqzq_s8(*(int8x16_t *)(v275 + 344));
  v302 = vmovl_s8(*(int8x8_t *)v301.i8);
  v303 = vmovl_high_s16(v302);
  v288.i64[0] = v303.u32[2];
  v288.i64[1] = v303.u32[3];
  v304 = vbicq_s8((int8x16_t)xmmword_19FFB30E0, v288);
  v305 = vmovl_high_s8(v301);
  v306 = vmovl_high_s16(v305);
  v288.i64[0] = v306.u32[2];
  v288.i64[1] = v306.u32[3];
  v307 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v288);
  v308 = vmovl_s16(*(int16x4_t *)v302.i8);
  v288.i64[0] = v308.u32[2];
  v288.i64[1] = v308.u32[3];
  v309 = vbicq_s8((int8x16_t)xmmword_19FFB3100, v288);
  v310 = vmovl_s16(*(int16x4_t *)v305.i8);
  v288.i64[0] = v310.u32[2];
  v288.i64[1] = v310.u32[3];
  v311 = vbicq_s8((int8x16_t)xmmword_19FFB3110, v288);
  v288.i64[0] = v303.u32[0];
  v288.i64[1] = v303.u32[1];
  v312 = vbicq_s8((int8x16_t)xmmword_19FFB3120, v288);
  v288.i64[0] = v306.u32[0];
  v288.i64[1] = v306.u32[1];
  v313 = vbicq_s8((int8x16_t)xmmword_19FFB3130, v288);
  v288.i64[0] = v308.u32[0];
  v288.i64[1] = v308.u32[1];
  v314 = vbicq_s8((int8x16_t)xmmword_19FFB3140, v288);
  v288.i64[0] = v310.u32[0];
  v288.i64[1] = v310.u32[1];
  v315 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v288), v300);
  v316 = vorrq_s8(v314, v299);
  v317 = vorrq_s8(v313, v298);
  v318 = vorrq_s8(v312, v297);
  v319 = vorrq_s8(v311, v296);
  v320 = vorrq_s8(v309, v294);
  v321 = vorrq_s8(v307, v292);
  v322 = vorrq_s8(v304, v289);
  v323 = vceqzq_s8(*(int8x16_t *)(v275 + 360));
  v324 = vmovl_s8(*(int8x8_t *)v323.i8);
  v325 = vmovl_high_s16(v324);
  v326 = vmovl_high_s8(v323);
  v327 = vmovl_high_s16(v326);
  v328 = vmovl_s16(*(int16x4_t *)v324.i8);
  v329 = vmovl_s16(*(int16x4_t *)v326.i8);
  v288.i64[0] = v329.i32[0];
  v288.i64[1] = v329.i32[1];
  v330 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v288);
  v288.i64[0] = v328.i32[0];
  v288.i64[1] = v328.i32[1];
  v331 = vbicq_s8((int8x16_t)xmmword_19FFB3170, v288);
  v288.i64[0] = v327.i32[0];
  v288.i64[1] = v327.i32[1];
  v332 = vbicq_s8((int8x16_t)xmmword_19FFB3180, v288);
  v288.i64[0] = v325.i32[0];
  v288.i64[1] = v325.i32[1];
  v333 = vbicq_s8((int8x16_t)xmmword_19FFB3190, v288);
  v288.i64[0] = v325.i32[2];
  v288.i64[1] = v325.i32[3];
  v334 = v288;
  v288.i64[0] = v327.i32[2];
  v288.i64[1] = v327.i32[3];
  v335 = v288;
  v288.i64[0] = v328.i32[2];
  v288.i64[1] = v328.i32[3];
  v336 = v288;
  v288.i64[0] = v329.i32[2];
  v288.i64[1] = v329.i32[3];
  v337 = vbicq_s8((int8x16_t)xmmword_19FFB31A0, v288);
  v338 = vceqzq_s8(*(int8x16_t *)(v275 + 376));
  v339 = vmovl_high_s8(v338);
  v340 = vmovl_s16(*(int16x4_t *)v339.i8);
  v341 = vmovl_s8(*(int8x8_t *)v338.i8);
  v342 = vmovl_s16(*(int16x4_t *)v341.i8);
  v343 = vmovl_high_s16(v339);
  v344 = vmovl_high_s16(v341);
  v288.i64[0] = v344.i32[2];
  v288.i64[1] = v344.i32[3];
  v345 = vbicq_s8((int8x16_t)xmmword_19FFB31E0, v288);
  v288.i64[0] = v343.i32[2];
  v288.i64[1] = v343.i32[3];
  v346 = vbicq_s8((int8x16_t)xmmword_19FFB31F0, v288);
  v288.i64[0] = v342.i32[2];
  v288.i64[1] = v342.i32[3];
  v347 = vbicq_s8((int8x16_t)xmmword_19FFB3200, v288);
  v288.i64[0] = v340.i32[2];
  v288.i64[1] = v340.i32[3];
  v348 = vbicq_s8((int8x16_t)xmmword_19FFB3210, v288);
  v288.i64[0] = v344.i32[0];
  v288.i64[1] = v344.i32[1];
  v349 = vbicq_s8((int8x16_t)xmmword_19FFB3220, v288);
  v288.i64[0] = v343.i32[0];
  v288.i64[1] = v343.i32[1];
  v350 = vbicq_s8((int8x16_t)xmmword_19FFB3230, v288);
  v288.i64[0] = v342.i32[0];
  v288.i64[1] = v342.i32[1];
  v351 = vbicq_s8((int8x16_t)xmmword_19FFB3240, v288);
  v288.i64[0] = v340.i32[0];
  v288.i64[1] = v340.i32[1];
  *((_QWORD *)v275 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(v351, v331), v316), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v288), v330), v315)), vorrq_s8(vorrq_s8(vorrq_s8(v349, v333), v318), vorrq_s8(vorrq_s8(v350, v332), v317))), (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(v347, vbicq_s8((int8x16_t)xmmword_19FFB31B0, v336)), v320), vorrq_s8(vorrq_s8(v348, v337), v319)), vorrq_s8(vorrq_s8(vorrq_s8(v345, vbicq_s8((int8x16_t)xmmword_19FFB31D0, v334)),
                                                v322),
                                              vorrq_s8(vorrq_s8(v346, vbicq_s8((int8x16_t)xmmword_19FFB31C0, v335)), v321)))));
  *((_QWORD *)v275 + 3) = &off_1E42746A8;
  v275[312] = 1;
  *((_QWORD *)this + 147) = v275 + 24;
  v352 = (std::__shared_weak_count *)*((_QWORD *)this + 148);
  *((_QWORD *)this + 148) = v275;
  if (v352)
  {
    v353 = (unint64_t *)&v352->__shared_owners_;
    do
      v354 = __ldaxr(v353);
    while (__stlxr(v354 - 1, v353));
    if (!v354)
    {
      ((void (*)(std::__shared_weak_count *))v352->__on_zero_shared)(v352);
      std::__shared_weak_count::__release_weak(v352);
    }
  }
  v355 = (std::__shared_weak_count *)*((_QWORD *)&v701 + 1);
  if (*((_QWORD *)&v701 + 1))
  {
    v356 = (unint64_t *)(*((_QWORD *)&v701 + 1) + 8);
    do
      v357 = __ldaxr(v356);
    while (__stlxr(v357 - 1, v356));
    if (!v357)
    {
      ((void (*)(std::__shared_weak_count *))v355->__on_zero_shared)(v355);
      std::__shared_weak_count::__release_weak(v355);
    }
  }
  v358 = (uint64_t *)operator new();
  v725[0] = &off_1E427A650;
  v725[1] = this;
  v726 = v725;
  v723[0] = &off_1E427A698;
  v724 = v723;
  v358[1] = 0;
  v358[2] = 0;
  *v358 = 0;
  {
    v664 = operator new();
    v24[495] = geo::MallocZoneAllocator::MallocZoneAllocator(v664, "GeoGL", 0xA3D02C1100000005);
  }
  v360 = v24[495];
  v358[4] = 0;
  v358[3] = v360;
  v358[5] = 0;
  v358[6] = 0;
  {
    v665 = operator new();
    v24[495] = geo::MallocZoneAllocator::MallocZoneAllocator(v665, "GeoGL", 0xA3D02C1100000005);
  }
  v358[7] = v24[495];
  v361 = (uint64_t)v726;
  if (!v726)
    goto LABEL_241;
  if (v726 != v725)
  {
    v361 = (*(uint64_t (**)(void))(*v726 + 16))();
LABEL_241:
    v358[11] = v361;
    goto LABEL_243;
  }
  v358[11] = (uint64_t)(v358 + 8);
  (*(void (**)(_QWORD *, uint64_t *))(v725[0] + 24))(v725, v358 + 8);
LABEL_243:
  v362 = (uint64_t)v724;
  if (!v724)
  {
LABEL_246:
    v358[15] = v362;
    goto LABEL_248;
  }
  if (v724 != v723)
  {
    v362 = (*(uint64_t (**)(void))(*v724 + 16))();
    goto LABEL_246;
  }
  v358[15] = (uint64_t)(v358 + 12);
  (*(void (**)(_QWORD *, uint64_t *))(v723[0] + 24))(v723, v358 + 12);
LABEL_248:
  v358[16] = 8000;
  v363 = *v358;
  if ((unint64_t)(v358[2] - *v358) >> 6 > 0x7C)
    goto LABEL_261;
  v364 = v358[1];
  v365 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v358[3] + 16))(v358[3], 8000, 8);
  v366 = v364 - v363;
  v367 = v365 + ((v364 - v363) & 0xFFFFFFFFFFFFFFF8);
  v369 = *v358;
  v368 = v358[1];
  v370 = v368 - *v358;
  if (v368 == *v358)
  {
    v372 = v365 + ((v364 - v363) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_259;
  }
  v371 = v370 - 8;
  if ((unint64_t)(v370 - 8) >= 0x58)
  {
    v372 = v365 + ((v364 - v363) & 0xFFFFFFFFFFFFFFF8);
    if (v368 - (v366 & 0xFFFFFFFFFFFFFFF8) - v365 >= 0x20)
    {
      v373 = v366 >> 3;
      v374 = (v371 >> 3) + 1;
      v375 = (_OWORD *)(v365 + 8 * v373 - 16);
      v376 = (__int128 *)(v368 - 16);
      v377 = v374 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v378 = *v376;
        *(v375 - 1) = *(v376 - 1);
        *v375 = v378;
        v375 -= 2;
        v376 -= 2;
        v377 -= 4;
      }
      while (v377);
      v372 = v367 - 8 * (v374 & 0x3FFFFFFFFFFFFFFCLL);
      v368 -= 8 * (v374 & 0x3FFFFFFFFFFFFFFCLL);
      if (v374 == (v374 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_258;
    }
  }
  else
  {
    v372 = v365 + ((v364 - v363) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v379 = *(_QWORD *)(v368 - 8);
    v368 -= 8;
    *(_QWORD *)(v372 - 8) = v379;
    v372 -= 8;
  }
  while (v368 != v369);
LABEL_258:
  v368 = *v358;
LABEL_259:
  *v358 = v372;
  v358[1] = v367;
  v380 = v358[2];
  v358[2] = v365 + 8000;
  if (v368)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v358[3] + 40))(v358[3], v368, v380 - v368);
LABEL_261:
  v381 = v358[4];
  if ((unint64_t)(v358[6] - v381) >> 6 > 0x7C)
    goto LABEL_274;
  v382 = v358[5];
  v383 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v358[7] + 16))(v358[7], 8000, 8);
  v384 = v382 - v381;
  v385 = v383 + ((v382 - v381) & 0xFFFFFFFFFFFFFFF8);
  v387 = v358[4];
  v386 = v358[5];
  v388 = v386 - v387;
  if (v386 == v387)
  {
    v390 = v383 + ((v382 - v381) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_272;
  }
  v389 = v388 - 8;
  if ((unint64_t)(v388 - 8) >= 0x58)
  {
    v390 = v383 + ((v382 - v381) & 0xFFFFFFFFFFFFFFF8);
    if (v386 - (v384 & 0xFFFFFFFFFFFFFFF8) - v383 >= 0x20)
    {
      v391 = v384 >> 3;
      v392 = (v389 >> 3) + 1;
      v393 = (_OWORD *)(v383 + 8 * v391 - 16);
      v394 = (__int128 *)(v386 - 16);
      v395 = v392 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v396 = *v394;
        *(v393 - 1) = *(v394 - 1);
        *v393 = v396;
        v393 -= 2;
        v394 -= 2;
        v395 -= 4;
      }
      while (v395);
      v390 = v385 - 8 * (v392 & 0x3FFFFFFFFFFFFFFCLL);
      v386 -= 8 * (v392 & 0x3FFFFFFFFFFFFFFCLL);
      if (v392 == (v392 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_271;
    }
  }
  else
  {
    v390 = v383 + ((v382 - v381) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v397 = *(_QWORD *)(v386 - 8);
    v386 -= 8;
    *(_QWORD *)(v390 - 8) = v397;
    v390 -= 8;
  }
  while (v386 != v387);
LABEL_271:
  v386 = v358[4];
LABEL_272:
  v358[4] = v390;
  v358[5] = v385;
  v398 = v358[6];
  v358[6] = v383 + 8000;
  if (v386)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v358[7] + 40))(v358[7], v386, v398 - v386);
LABEL_274:
  v399 = *v688;
  *v688 = (uint64_t)v358;
  if (v399)
  {
    v400 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v399);
    MEMORY[0x1A1AF4E00](v400, 0x10A0C40D234DDC7);
  }
  v401 = v724;
  if (v724 == v723)
  {
    v402 = 4;
    v401 = v723;
  }
  else
  {
    if (!v724)
      goto LABEL_281;
    v402 = 5;
  }
  (*(void (**)(void))(*v401 + 8 * v402))();
LABEL_281:
  v403 = v726;
  if (v726 == v725)
  {
    v404 = 4;
    v403 = v725;
    goto LABEL_285;
  }
  if (v726)
  {
    v404 = 5;
LABEL_285:
    (*(void (**)(void))(*v403 + 8 * v404))();
  }
  v405 = operator new(0xE8uLL);
  v405[1] = 0;
  v405[2] = 0;
  *v405 = &off_1E42E12F0;
  v406 = ggl::BufferData::BufferData((uint64_t)(v405 + 3), qword_1EE550A58, 2, 1, 6, 1);
  v405[28] = ggl::FlyoverCommon::Shared::reflection(void)::reflection;
  v405[3] = &off_1E42B8E50;
  *((_QWORD *)this + 150) = v406;
  v407 = (std::__shared_weak_count *)*((_QWORD *)this + 151);
  *((_QWORD *)this + 151) = v405;
  if (v407)
  {
    v408 = (unint64_t *)&v407->__shared_owners_;
    do
      v409 = __ldaxr(v408);
    while (__stlxr(v409 - 1, v408));
    if (!v409)
    {
      ((void (*)(std::__shared_weak_count *))v407->__on_zero_shared)(v407);
      std::__shared_weak_count::__release_weak(v407);
    }
  }
  v410 = (uint64_t *)operator new();
  v722 = v721;
  v719[0] = &off_1E42D6788;
  v720 = v719;
  v721[0] = &off_1E427A6E0;
  v410[1] = 0;
  v410[2] = 0;
  *v410 = 0;
  {
    v666 = operator new();
    v24[495] = geo::MallocZoneAllocator::MallocZoneAllocator(v666, "GeoGL", 0xA3D02C1100000005);
  }
  v412 = v24[495];
  v410[4] = 0;
  v410[3] = v412;
  v410[5] = 0;
  v410[6] = 0;
  {
    v667 = operator new();
    v24[495] = geo::MallocZoneAllocator::MallocZoneAllocator(v667, "GeoGL", 0xA3D02C1100000005);
  }
  v410[7] = v24[495];
  v413 = (uint64_t)v722;
  if (!v722)
    goto LABEL_296;
  if (v722 != v721)
  {
    v413 = (*(uint64_t (**)(void))(*v722 + 16))();
LABEL_296:
    v410[11] = v413;
    goto LABEL_298;
  }
  v410[11] = (uint64_t)(v410 + 8);
  (*(void (**)(_QWORD *, uint64_t *))(v721[0] + 24))(v721, v410 + 8);
LABEL_298:
  v414 = (uint64_t)v720;
  if (!v720)
  {
LABEL_301:
    v410[15] = v414;
    goto LABEL_303;
  }
  if (v720 != v719)
  {
    v414 = (*(uint64_t (**)(void))(*v720 + 16))();
    goto LABEL_301;
  }
  v410[15] = (uint64_t)(v410 + 12);
  (*(void (**)(_QWORD *, uint64_t *))(v719[0] + 24))(v719, v410 + 12);
LABEL_303:
  v410[16] = 2000;
  v415 = *v410;
  if ((unint64_t)(v410[2] - *v410) > 0x31F)
    goto LABEL_316;
  v416 = v410[1];
  v417 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v410[3] + 16))(v410[3], 800, 8);
  v418 = v416 - v415;
  v419 = v417 + ((v416 - v415) & 0xFFFFFFFFFFFFFFF8);
  v421 = *v410;
  v420 = v410[1];
  v422 = v420 - *v410;
  if (v420 == *v410)
  {
    v424 = v417 + ((v416 - v415) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_314;
  }
  v423 = v422 - 8;
  if ((unint64_t)(v422 - 8) >= 0x58)
  {
    v424 = v417 + ((v416 - v415) & 0xFFFFFFFFFFFFFFF8);
    if (v420 - (v418 & 0xFFFFFFFFFFFFFFF8) - v417 >= 0x20)
    {
      v425 = v418 >> 3;
      v426 = (v423 >> 3) + 1;
      v427 = (_OWORD *)(v417 + 8 * v425 - 16);
      v428 = (__int128 *)(v420 - 16);
      v429 = v426 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v430 = *v428;
        *(v427 - 1) = *(v428 - 1);
        *v427 = v430;
        v427 -= 2;
        v428 -= 2;
        v429 -= 4;
      }
      while (v429);
      v424 = v419 - 8 * (v426 & 0x3FFFFFFFFFFFFFFCLL);
      v420 -= 8 * (v426 & 0x3FFFFFFFFFFFFFFCLL);
      if (v426 == (v426 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_313;
    }
  }
  else
  {
    v424 = v417 + ((v416 - v415) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v431 = *(_QWORD *)(v420 - 8);
    v420 -= 8;
    *(_QWORD *)(v424 - 8) = v431;
    v424 -= 8;
  }
  while (v420 != v421);
LABEL_313:
  v420 = *v410;
LABEL_314:
  *v410 = v424;
  v410[1] = v419;
  v432 = v410[2];
  v410[2] = v417 + 800;
  if (v420)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v410[3] + 40))(v410[3], v420, v432 - v420);
LABEL_316:
  v433 = v410[4];
  if ((unint64_t)(v410[6] - v433) > 0x31F)
    goto LABEL_329;
  v434 = v410[5];
  v435 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v410[7] + 16))(v410[7], 800, 8);
  v436 = v434 - v433;
  v437 = v435 + ((v434 - v433) & 0xFFFFFFFFFFFFFFF8);
  v439 = v410[4];
  v438 = v410[5];
  v440 = v438 - v439;
  if (v438 == v439)
  {
    v442 = v435 + ((v434 - v433) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_327;
  }
  v441 = v440 - 8;
  if ((unint64_t)(v440 - 8) >= 0x58)
  {
    v442 = v435 + ((v434 - v433) & 0xFFFFFFFFFFFFFFF8);
    if (v438 - (v436 & 0xFFFFFFFFFFFFFFF8) - v435 >= 0x20)
    {
      v443 = v436 >> 3;
      v444 = (v441 >> 3) + 1;
      v445 = (_OWORD *)(v435 + 8 * v443 - 16);
      v446 = (__int128 *)(v438 - 16);
      v447 = v444 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v448 = *v446;
        *(v445 - 1) = *(v446 - 1);
        *v445 = v448;
        v445 -= 2;
        v446 -= 2;
        v447 -= 4;
      }
      while (v447);
      v442 = v437 - 8 * (v444 & 0x3FFFFFFFFFFFFFFCLL);
      v438 -= 8 * (v444 & 0x3FFFFFFFFFFFFFFCLL);
      if (v444 == (v444 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_326;
    }
  }
  else
  {
    v442 = v435 + ((v434 - v433) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v449 = *(_QWORD *)(v438 - 8);
    v438 -= 8;
    *(_QWORD *)(v442 - 8) = v449;
    v442 -= 8;
  }
  while (v438 != v439);
LABEL_326:
  v438 = v410[4];
LABEL_327:
  v410[4] = v442;
  v410[5] = v437;
  v450 = v410[6];
  v410[6] = v435 + 800;
  if (v438)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v410[7] + 40))(v410[7], v438, v450 - v438);
LABEL_329:
  v451 = *v687;
  *v687 = (uint64_t)v410;
  if (v451)
  {
    v452 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v451);
    MEMORY[0x1A1AF4E00](v452, 0x10A0C40D234DDC7);
  }
  v453 = v720;
  if (v720 == v719)
  {
    v454 = 4;
    v453 = v719;
  }
  else
  {
    if (!v720)
      goto LABEL_336;
    v454 = 5;
  }
  (*(void (**)(void))(*v453 + 8 * v454))();
LABEL_336:
  v455 = v722;
  if (v722 == v721)
  {
    v456 = 4;
    v455 = v721;
    goto LABEL_340;
  }
  if (v722)
  {
    v456 = 5;
LABEL_340:
    (*(void (**)(void))(*v455 + 8 * v456))();
  }
  v457 = (uint64_t *)operator new();
  v718 = v717;
  v715[0] = &off_1E427D308;
  v716 = v715;
  v717[0] = &off_1E427A728;
  v457[1] = 0;
  v457[2] = 0;
  *v457 = 0;
  {
    v668 = operator new();
    v24[495] = geo::MallocZoneAllocator::MallocZoneAllocator(v668, "GeoGL", 0xA3D02C1100000005);
  }
  v459 = v24[495];
  v457[4] = 0;
  v457[3] = v459;
  v457[5] = 0;
  v457[6] = 0;
  {
    v669 = operator new();
    v24[495] = geo::MallocZoneAllocator::MallocZoneAllocator(v669, "GeoGL", 0xA3D02C1100000005);
  }
  v457[7] = v24[495];
  v460 = (uint64_t)v718;
  if (!v718)
    goto LABEL_346;
  if (v718 != v717)
  {
    v460 = (*(uint64_t (**)(void))(*v718 + 16))();
LABEL_346:
    v457[11] = v460;
    goto LABEL_348;
  }
  v457[11] = (uint64_t)(v457 + 8);
  (*(void (**)(_QWORD *, uint64_t *))(v717[0] + 24))(v717, v457 + 8);
LABEL_348:
  v461 = (uint64_t)v716;
  if (!v716)
  {
LABEL_351:
    v457[15] = v461;
    goto LABEL_353;
  }
  if (v716 != v715)
  {
    v461 = (*(uint64_t (**)(void))(*v716 + 16))();
    goto LABEL_351;
  }
  v457[15] = (uint64_t)(v457 + 12);
  (*(void (**)(_QWORD *, uint64_t *))(v715[0] + 24))(v715, v457 + 12);
LABEL_353:
  v457[16] = 2000;
  v462 = *v457;
  if ((unint64_t)(v457[2] - *v457) > 0x31F)
    goto LABEL_366;
  v463 = v457[1];
  v464 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v457[3] + 16))(v457[3], 800, 8);
  v465 = v463 - v462;
  v466 = v464 + ((v463 - v462) & 0xFFFFFFFFFFFFFFF8);
  v468 = *v457;
  v467 = v457[1];
  v469 = v467 - *v457;
  if (v467 == *v457)
  {
    v471 = v464 + ((v463 - v462) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_364;
  }
  v470 = v469 - 8;
  if ((unint64_t)(v469 - 8) >= 0x58)
  {
    v471 = v464 + ((v463 - v462) & 0xFFFFFFFFFFFFFFF8);
    if (v467 - (v465 & 0xFFFFFFFFFFFFFFF8) - v464 >= 0x20)
    {
      v472 = v465 >> 3;
      v473 = (v470 >> 3) + 1;
      v474 = (_OWORD *)(v464 + 8 * v472 - 16);
      v475 = (__int128 *)(v467 - 16);
      v476 = v473 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v477 = *v475;
        *(v474 - 1) = *(v475 - 1);
        *v474 = v477;
        v474 -= 2;
        v475 -= 2;
        v476 -= 4;
      }
      while (v476);
      v471 = v466 - 8 * (v473 & 0x3FFFFFFFFFFFFFFCLL);
      v467 -= 8 * (v473 & 0x3FFFFFFFFFFFFFFCLL);
      if (v473 == (v473 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_363;
    }
  }
  else
  {
    v471 = v464 + ((v463 - v462) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v478 = *(_QWORD *)(v467 - 8);
    v467 -= 8;
    *(_QWORD *)(v471 - 8) = v478;
    v471 -= 8;
  }
  while (v467 != v468);
LABEL_363:
  v467 = *v457;
LABEL_364:
  *v457 = v471;
  v457[1] = v466;
  v479 = v457[2];
  v457[2] = v464 + 800;
  if (v467)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v457[3] + 40))(v457[3], v467, v479 - v467);
LABEL_366:
  v480 = v457[4];
  if ((unint64_t)(v457[6] - v480) > 0x31F)
    goto LABEL_379;
  v481 = v457[5];
  v482 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v457[7] + 16))(v457[7], 800, 8);
  v483 = v481 - v480;
  v484 = v482 + ((v481 - v480) & 0xFFFFFFFFFFFFFFF8);
  v486 = v457[4];
  v485 = v457[5];
  v487 = v485 - v486;
  if (v485 == v486)
  {
    v489 = v482 + ((v481 - v480) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_377;
  }
  v488 = v487 - 8;
  if ((unint64_t)(v487 - 8) >= 0x58)
  {
    v489 = v482 + ((v481 - v480) & 0xFFFFFFFFFFFFFFF8);
    if (v485 - (v483 & 0xFFFFFFFFFFFFFFF8) - v482 >= 0x20)
    {
      v490 = v483 >> 3;
      v491 = (v488 >> 3) + 1;
      v492 = (_OWORD *)(v482 + 8 * v490 - 16);
      v493 = (__int128 *)(v485 - 16);
      v494 = v491 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v495 = *v493;
        *(v492 - 1) = *(v493 - 1);
        *v492 = v495;
        v492 -= 2;
        v493 -= 2;
        v494 -= 4;
      }
      while (v494);
      v489 = v484 - 8 * (v491 & 0x3FFFFFFFFFFFFFFCLL);
      v485 -= 8 * (v491 & 0x3FFFFFFFFFFFFFFCLL);
      if (v491 == (v491 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_376;
    }
  }
  else
  {
    v489 = v482 + ((v481 - v480) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v496 = *(_QWORD *)(v485 - 8);
    v485 -= 8;
    *(_QWORD *)(v489 - 8) = v496;
    v489 -= 8;
  }
  while (v485 != v486);
LABEL_376:
  v485 = v457[4];
LABEL_377:
  v457[4] = v489;
  v457[5] = v484;
  v497 = v457[6];
  v457[6] = v482 + 800;
  if (v485)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v457[7] + 40))(v457[7], v485, v497 - v485);
LABEL_379:
  v498 = *v686;
  *v686 = (uint64_t)v457;
  if (v498)
  {
    v499 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v498);
    MEMORY[0x1A1AF4E00](v499, 0x10A0C40D234DDC7);
  }
  v500 = v716;
  if (v716 == v715)
  {
    v501 = 4;
    v500 = v715;
  }
  else
  {
    if (!v716)
      goto LABEL_386;
    v501 = 5;
  }
  (*(void (**)(void))(*v500 + 8 * v501))();
LABEL_386:
  v502 = v718;
  if (v718 == v717)
  {
    v503 = 4;
    v502 = v717;
    goto LABEL_390;
  }
  if (v718)
  {
    v503 = 5;
LABEL_390:
    (*(void (**)(void))(*v502 + 8 * v503))();
  }
  v504 = (uint64_t *)operator new();
  v714 = v713;
  v711[0] = &off_1E42D66B0;
  v712 = v711;
  v713[0] = &off_1E427A770;
  v504[1] = 0;
  v504[2] = 0;
  *v504 = 0;
  {
    v670 = operator new();
    v24[495] = geo::MallocZoneAllocator::MallocZoneAllocator(v670, "GeoGL", 0xA3D02C1100000005);
  }
  v506 = v24[495];
  v504[4] = 0;
  v504[3] = v506;
  v504[5] = 0;
  v504[6] = 0;
  {
    v671 = operator new();
    v24[495] = geo::MallocZoneAllocator::MallocZoneAllocator(v671, "GeoGL", 0xA3D02C1100000005);
  }
  v504[7] = v24[495];
  v507 = (uint64_t)v714;
  if (!v714)
    goto LABEL_396;
  if (v714 != v713)
  {
    v507 = (*(uint64_t (**)(void))(*v714 + 16))();
LABEL_396:
    v504[11] = v507;
    goto LABEL_398;
  }
  v504[11] = (uint64_t)(v504 + 8);
  (*(void (**)(_QWORD *, uint64_t *))(v713[0] + 24))(v713, v504 + 8);
LABEL_398:
  v508 = (uint64_t)v712;
  if (!v712)
  {
LABEL_401:
    v504[15] = v508;
    goto LABEL_403;
  }
  if (v712 != v711)
  {
    v508 = (*(uint64_t (**)(void))(*v712 + 16))();
    goto LABEL_401;
  }
  v504[15] = (uint64_t)(v504 + 12);
  (*(void (**)(_QWORD *, uint64_t *))(v711[0] + 24))(v711, v504 + 12);
LABEL_403:
  v504[16] = 2000;
  v509 = *v504;
  if ((unint64_t)(v504[2] - *v504) > 0x31F)
    goto LABEL_416;
  v510 = v504[1];
  v511 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v504[3] + 16))(v504[3], 800, 8);
  v512 = v510 - v509;
  v513 = v511 + ((v510 - v509) & 0xFFFFFFFFFFFFFFF8);
  v515 = *v504;
  v514 = v504[1];
  v516 = v514 - *v504;
  if (v514 == *v504)
  {
    v518 = v511 + ((v510 - v509) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_414;
  }
  v517 = v516 - 8;
  if ((unint64_t)(v516 - 8) >= 0x58)
  {
    v518 = v511 + ((v510 - v509) & 0xFFFFFFFFFFFFFFF8);
    if (v514 - (v512 & 0xFFFFFFFFFFFFFFF8) - v511 >= 0x20)
    {
      v519 = v512 >> 3;
      v520 = (v517 >> 3) + 1;
      v521 = (_OWORD *)(v511 + 8 * v519 - 16);
      v522 = (__int128 *)(v514 - 16);
      v523 = v520 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v524 = *v522;
        *(v521 - 1) = *(v522 - 1);
        *v521 = v524;
        v521 -= 2;
        v522 -= 2;
        v523 -= 4;
      }
      while (v523);
      v518 = v513 - 8 * (v520 & 0x3FFFFFFFFFFFFFFCLL);
      v514 -= 8 * (v520 & 0x3FFFFFFFFFFFFFFCLL);
      if (v520 == (v520 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_413;
    }
  }
  else
  {
    v518 = v511 + ((v510 - v509) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v525 = *(_QWORD *)(v514 - 8);
    v514 -= 8;
    *(_QWORD *)(v518 - 8) = v525;
    v518 -= 8;
  }
  while (v514 != v515);
LABEL_413:
  v514 = *v504;
LABEL_414:
  *v504 = v518;
  v504[1] = v513;
  v526 = v504[2];
  v504[2] = v511 + 800;
  if (v514)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v504[3] + 40))(v504[3], v514, v526 - v514);
LABEL_416:
  v527 = v504[4];
  if ((unint64_t)(v504[6] - v527) > 0x31F)
    goto LABEL_429;
  v528 = v504[5];
  v529 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v504[7] + 16))(v504[7], 800, 8);
  v530 = v528 - v527;
  v531 = v529 + ((v528 - v527) & 0xFFFFFFFFFFFFFFF8);
  v533 = v504[4];
  v532 = v504[5];
  v534 = v532 - v533;
  if (v532 == v533)
  {
    v536 = v529 + ((v528 - v527) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_427;
  }
  v535 = v534 - 8;
  if ((unint64_t)(v534 - 8) >= 0x58)
  {
    v536 = v529 + ((v528 - v527) & 0xFFFFFFFFFFFFFFF8);
    if (v532 - (v530 & 0xFFFFFFFFFFFFFFF8) - v529 >= 0x20)
    {
      v537 = v530 >> 3;
      v538 = (v535 >> 3) + 1;
      v539 = (_OWORD *)(v529 + 8 * v537 - 16);
      v540 = (__int128 *)(v532 - 16);
      v541 = v538 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v542 = *v540;
        *(v539 - 1) = *(v540 - 1);
        *v539 = v542;
        v539 -= 2;
        v540 -= 2;
        v541 -= 4;
      }
      while (v541);
      v536 = v531 - 8 * (v538 & 0x3FFFFFFFFFFFFFFCLL);
      v532 -= 8 * (v538 & 0x3FFFFFFFFFFFFFFCLL);
      if (v538 == (v538 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_426;
    }
  }
  else
  {
    v536 = v529 + ((v528 - v527) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v543 = *(_QWORD *)(v532 - 8);
    v532 -= 8;
    *(_QWORD *)(v536 - 8) = v543;
    v536 -= 8;
  }
  while (v532 != v533);
LABEL_426:
  v532 = v504[4];
LABEL_427:
  v504[4] = v536;
  v504[5] = v531;
  v544 = v504[6];
  v504[6] = v529 + 800;
  if (v532)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v504[7] + 40))(v504[7], v532, v544 - v532);
LABEL_429:
  v545 = *v685;
  *v685 = (uint64_t)v504;
  if (v545)
  {
    v546 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v545);
    MEMORY[0x1A1AF4E00](v546, 0x10A0C40D234DDC7);
  }
  v547 = v712;
  if (v712 == v711)
  {
    v548 = 4;
    v547 = v711;
  }
  else
  {
    if (!v712)
      goto LABEL_436;
    v548 = 5;
  }
  (*(void (**)(void))(*v547 + 8 * v548))();
LABEL_436:
  v549 = v714;
  if (v714 == v713)
  {
    v550 = 4;
    v549 = v713;
    goto LABEL_440;
  }
  if (v714)
  {
    v550 = 5;
LABEL_440:
    (*(void (**)(void))(*v549 + 8 * v550))();
  }
  v551 = (uint64_t *)operator new();
  v710 = v709;
  v707[0] = &off_1E42D66F8;
  v708 = v707;
  v709[0] = &off_1E427A7B8;
  v551[1] = 0;
  v551[2] = 0;
  *v551 = 0;
  {
    v672 = operator new();
    v24[495] = geo::MallocZoneAllocator::MallocZoneAllocator(v672, "GeoGL", 0xA3D02C1100000005);
  }
  v553 = v24[495];
  v551[4] = 0;
  v551[3] = v553;
  v551[5] = 0;
  v551[6] = 0;
  {
    v673 = operator new();
    v24[495] = geo::MallocZoneAllocator::MallocZoneAllocator(v673, "GeoGL", 0xA3D02C1100000005);
  }
  v551[7] = v24[495];
  v554 = (uint64_t)v710;
  if (!v710)
    goto LABEL_446;
  if (v710 != v709)
  {
    v554 = (*(uint64_t (**)(void))(*v710 + 16))();
LABEL_446:
    v551[11] = v554;
    goto LABEL_448;
  }
  v551[11] = (uint64_t)(v551 + 8);
  (*(void (**)(_QWORD *, uint64_t *))(v709[0] + 24))(v709, v551 + 8);
LABEL_448:
  v555 = (uint64_t)v708;
  if (!v708)
  {
LABEL_451:
    v551[15] = v555;
    goto LABEL_453;
  }
  if (v708 != v707)
  {
    v555 = (*(uint64_t (**)(void))(*v708 + 16))();
    goto LABEL_451;
  }
  v551[15] = (uint64_t)(v551 + 12);
  (*(void (**)(_QWORD *, uint64_t *))(v707[0] + 24))(v707, v551 + 12);
LABEL_453:
  v551[16] = 2000;
  v556 = *v551;
  if ((unint64_t)(v551[2] - *v551) > 0x31F)
    goto LABEL_466;
  v557 = v551[1];
  v558 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v551[3] + 16))(v551[3], 800, 8);
  v559 = v557 - v556;
  v560 = v558 + ((v557 - v556) & 0xFFFFFFFFFFFFFFF8);
  v562 = *v551;
  v561 = v551[1];
  v563 = v561 - *v551;
  if (v561 == *v551)
  {
    v565 = v558 + ((v557 - v556) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_464;
  }
  v564 = v563 - 8;
  if ((unint64_t)(v563 - 8) >= 0x58)
  {
    v565 = v558 + ((v557 - v556) & 0xFFFFFFFFFFFFFFF8);
    if (v561 - (v559 & 0xFFFFFFFFFFFFFFF8) - v558 >= 0x20)
    {
      v566 = v559 >> 3;
      v567 = (v564 >> 3) + 1;
      v568 = (_OWORD *)(v558 + 8 * v566 - 16);
      v569 = (__int128 *)(v561 - 16);
      v570 = v567 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v571 = *v569;
        *(v568 - 1) = *(v569 - 1);
        *v568 = v571;
        v568 -= 2;
        v569 -= 2;
        v570 -= 4;
      }
      while (v570);
      v565 = v560 - 8 * (v567 & 0x3FFFFFFFFFFFFFFCLL);
      v561 -= 8 * (v567 & 0x3FFFFFFFFFFFFFFCLL);
      if (v567 == (v567 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_463;
    }
  }
  else
  {
    v565 = v558 + ((v557 - v556) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v572 = *(_QWORD *)(v561 - 8);
    v561 -= 8;
    *(_QWORD *)(v565 - 8) = v572;
    v565 -= 8;
  }
  while (v561 != v562);
LABEL_463:
  v561 = *v551;
LABEL_464:
  *v551 = v565;
  v551[1] = v560;
  v573 = v551[2];
  v551[2] = v558 + 800;
  if (v561)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v551[3] + 40))(v551[3], v561, v573 - v561);
LABEL_466:
  v574 = v551[4];
  if ((unint64_t)(v551[6] - v574) > 0x31F)
    goto LABEL_479;
  v575 = v551[5];
  v576 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v551[7] + 16))(v551[7], 800, 8);
  v577 = v575 - v574;
  v578 = v576 + ((v575 - v574) & 0xFFFFFFFFFFFFFFF8);
  v580 = v551[4];
  v579 = v551[5];
  v581 = v579 - v580;
  if (v579 == v580)
  {
    v583 = v576 + ((v575 - v574) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_477;
  }
  v582 = v581 - 8;
  if ((unint64_t)(v581 - 8) >= 0x58)
  {
    v583 = v576 + ((v575 - v574) & 0xFFFFFFFFFFFFFFF8);
    if (v579 - (v577 & 0xFFFFFFFFFFFFFFF8) - v576 >= 0x20)
    {
      v584 = v577 >> 3;
      v585 = (v582 >> 3) + 1;
      v586 = (_OWORD *)(v576 + 8 * v584 - 16);
      v587 = (__int128 *)(v579 - 16);
      v588 = v585 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v589 = *v587;
        *(v586 - 1) = *(v587 - 1);
        *v586 = v589;
        v586 -= 2;
        v587 -= 2;
        v588 -= 4;
      }
      while (v588);
      v583 = v578 - 8 * (v585 & 0x3FFFFFFFFFFFFFFCLL);
      v579 -= 8 * (v585 & 0x3FFFFFFFFFFFFFFCLL);
      if (v585 == (v585 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_476;
    }
  }
  else
  {
    v583 = v576 + ((v575 - v574) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v590 = *(_QWORD *)(v579 - 8);
    v579 -= 8;
    *(_QWORD *)(v583 - 8) = v590;
    v583 -= 8;
  }
  while (v579 != v580);
LABEL_476:
  v579 = v551[4];
LABEL_477:
  v551[4] = v583;
  v551[5] = v578;
  v591 = v551[6];
  v551[6] = v576 + 800;
  if (v579)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v551[7] + 40))(v551[7], v579, v591 - v579);
LABEL_479:
  v592 = *v684;
  *v684 = (uint64_t)v551;
  if (v592)
  {
    v593 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v592);
    MEMORY[0x1A1AF4E00](v593, 0x10A0C40D234DDC7);
  }
  v594 = v708;
  if (v708 == v707)
  {
    v595 = 4;
    v594 = v707;
  }
  else
  {
    if (!v708)
      goto LABEL_486;
    v595 = 5;
  }
  (*(void (**)(void))(*v594 + 8 * v595))();
LABEL_486:
  v596 = v710;
  if (v710 == v709)
  {
    v597 = 4;
    v596 = v709;
    goto LABEL_490;
  }
  if (v710)
  {
    v597 = 5;
LABEL_490:
    (*(void (**)(void))(*v596 + 8 * v597))();
  }
  v598 = (uint64_t *)operator new();
  v706 = v705;
  v703[0] = &off_1E42D6740;
  v704 = v703;
  v705[0] = &off_1E427A800;
  v598[1] = 0;
  v598[2] = 0;
  *v598 = 0;
  {
    v674 = operator new();
    v24[495] = geo::MallocZoneAllocator::MallocZoneAllocator(v674, "GeoGL", 0xA3D02C1100000005);
  }
  v600 = v24[495];
  v598[4] = 0;
  v598[3] = v600;
  v598[5] = 0;
  v598[6] = 0;
  {
    v675 = operator new();
    v24[495] = geo::MallocZoneAllocator::MallocZoneAllocator(v675, "GeoGL", 0xA3D02C1100000005);
  }
  v598[7] = v24[495];
  v601 = (uint64_t)v706;
  if (!v706)
    goto LABEL_496;
  if (v706 != v705)
  {
    v601 = (*(uint64_t (**)(void))(*v706 + 16))();
LABEL_496:
    v598[11] = v601;
    goto LABEL_498;
  }
  v598[11] = (uint64_t)(v598 + 8);
  (*(void (**)(_QWORD *, uint64_t *))(v705[0] + 24))(v705, v598 + 8);
LABEL_498:
  v602 = (uint64_t)v704;
  if (!v704)
  {
LABEL_501:
    v598[15] = v602;
    goto LABEL_503;
  }
  if (v704 != v703)
  {
    v602 = (*(uint64_t (**)(void))(*v704 + 16))();
    goto LABEL_501;
  }
  v598[15] = (uint64_t)(v598 + 12);
  (*(void (**)(uint64_t, _QWORD *))(v703[0] + 24))((uint64_t)v703, v598 + 12);
LABEL_503:
  v598[16] = 2000;
  v603 = *v598;
  if ((unint64_t)(v598[2] - *v598) > 0x31F)
    goto LABEL_516;
  v604 = v598[1];
  v605 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v598[3] + 16))(v598[3], 800, 8);
  v606 = v604 - v603;
  v607 = v605 + ((v604 - v603) & 0xFFFFFFFFFFFFFFF8);
  v609 = *v598;
  v608 = v598[1];
  v610 = v608 - *v598;
  if (v608 == *v598)
  {
    v612 = v605 + ((v604 - v603) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_514;
  }
  v611 = v610 - 8;
  if ((unint64_t)(v610 - 8) >= 0x58)
  {
    v612 = v605 + ((v604 - v603) & 0xFFFFFFFFFFFFFFF8);
    if (v608 - (v606 & 0xFFFFFFFFFFFFFFF8) - v605 >= 0x20)
    {
      v613 = v606 >> 3;
      v614 = (v611 >> 3) + 1;
      v615 = (_OWORD *)(v605 + 8 * v613 - 16);
      v616 = (__int128 *)(v608 - 16);
      v617 = v614 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v618 = *v616;
        *(v615 - 1) = *(v616 - 1);
        *v615 = v618;
        v615 -= 2;
        v616 -= 2;
        v617 -= 4;
      }
      while (v617);
      v612 = v607 - 8 * (v614 & 0x3FFFFFFFFFFFFFFCLL);
      v608 -= 8 * (v614 & 0x3FFFFFFFFFFFFFFCLL);
      if (v614 == (v614 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_513;
    }
  }
  else
  {
    v612 = v605 + ((v604 - v603) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v619 = *(_QWORD *)(v608 - 8);
    v608 -= 8;
    *(_QWORD *)(v612 - 8) = v619;
    v612 -= 8;
  }
  while (v608 != v609);
LABEL_513:
  v608 = *v598;
LABEL_514:
  *v598 = v612;
  v598[1] = v607;
  v620 = v598[2];
  v598[2] = v605 + 800;
  if (v608)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v598[3] + 40))(v598[3], v608, v620 - v608);
LABEL_516:
  v621 = v598[4];
  if ((unint64_t)(v598[6] - v621) > 0x31F)
    goto LABEL_529;
  v622 = v598[5];
  v623 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v598[7] + 16))(v598[7], 800, 8);
  v624 = v622 - v621;
  v625 = v623 + ((v622 - v621) & 0xFFFFFFFFFFFFFFF8);
  v627 = v598[4];
  v626 = v598[5];
  v628 = v626 - v627;
  if (v626 == v627)
  {
    v630 = v623 + ((v622 - v621) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_527;
  }
  v629 = v628 - 8;
  if ((unint64_t)(v628 - 8) >= 0x58)
  {
    v630 = v623 + ((v622 - v621) & 0xFFFFFFFFFFFFFFF8);
    if (v626 - (v624 & 0xFFFFFFFFFFFFFFF8) - v623 >= 0x20)
    {
      v631 = v624 >> 3;
      v632 = (v629 >> 3) + 1;
      v633 = (_OWORD *)(v623 + 8 * v631 - 16);
      v634 = (__int128 *)(v626 - 16);
      v635 = v632 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v636 = *v634;
        *(v633 - 1) = *(v634 - 1);
        *v633 = v636;
        v633 -= 2;
        v634 -= 2;
        v635 -= 4;
      }
      while (v635);
      v630 = v625 - 8 * (v632 & 0x3FFFFFFFFFFFFFFCLL);
      v626 -= 8 * (v632 & 0x3FFFFFFFFFFFFFFCLL);
      if (v632 == (v632 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_526;
    }
  }
  else
  {
    v630 = v623 + ((v622 - v621) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v637 = *(_QWORD *)(v626 - 8);
    v626 -= 8;
    *(_QWORD *)(v630 - 8) = v637;
    v630 -= 8;
  }
  while (v626 != v627);
LABEL_526:
  v626 = v598[4];
LABEL_527:
  v598[4] = v630;
  v598[5] = v625;
  v638 = v598[6];
  v598[6] = v623 + 800;
  if (v626)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v598[7] + 40))(v598[7], v626, v638 - v626);
LABEL_529:
  v639 = *v682;
  *v682 = (uint64_t)v598;
  if (v639)
  {
    v640 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v639);
    MEMORY[0x1A1AF4E00](v640, 0x10A0C40D234DDC7);
  }
  v641 = v704;
  if (v704 == v703)
  {
    v642 = 4;
    v641 = v703;
  }
  else
  {
    if (!v704)
      goto LABEL_536;
    v642 = 5;
  }
  (*(void (**)(void))(*v641 + 8 * v642))();
LABEL_536:
  v643 = v706;
  if (v706 == v705)
  {
    v644 = 4;
    v643 = v705;
  }
  else
  {
    if (!v706)
      goto LABEL_541;
    v644 = 5;
  }
  (*(void (**)(void))(*v643 + 8 * v644))();
LABEL_541:
  v645 = operator new();
  *(_BYTE *)v645 = 0;
  *(_QWORD *)(v645 + 12) = 0;
  *(_QWORD *)(v645 + 4) = 0;
  *(_BYTE *)(v645 + 20) = 0;
  *(_DWORD *)(v645 + 24) = 1065353216;
  *(_BYTE *)(v645 + 28) = 0;
  *(_DWORD *)(v645 + 32) = 0;
  v646 = *((_QWORD *)this + 158);
  *((_QWORD *)this + 158) = v645;
  if (v646)
  {
    MEMORY[0x1A1AF4E00](v646, 0x1000C4049ECCB0CLL);
    v645 = *((_QWORD *)this + 158);
  }
  *(_BYTE *)(v645 + 28) = 127;
  *(_DWORD *)(v645 + 32) = 0;
  AtmosphereLookupTexture = altitude::util::createAtmosphereLookupTexture();
  v648 = *((_QWORD *)this + 157);
  *((_QWORD *)this + 157) = AtmosphereLookupTexture;
  if (v648)
    (*(void (**)(uint64_t))(*(_QWORD *)v648 + 8))(v648);

  return this;
}

void sub_19FA70D74(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ggl::Texture *a9, ggl::Texture *a10, ggl::Texture *a11, ggl::Texture *a12)
{
  md::RenderItemPool *v12;
  uint64_t *v13;
  ggl::Texture *v14;
  uint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  uint64_t v23;
  unint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  STACK[0x290] = a1;
  v18 = (_QWORD *)v13[11];
  if (v18 == v17)
  {
    v19 = 4;
  }
  else
  {
    if (!v18)
    {
      v20 = *v16;
      if (*v16)
        goto LABEL_16;
      goto LABEL_5;
    }
    v19 = 5;
    v17 = (_QWORD *)v13[11];
  }
  (*(void (**)(_QWORD *))(*v17 + 8 * v19))(v17);
  v20 = *v16;
  if (*v16)
  {
LABEL_16:
    v13[5] = v20;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13[7] + 40))(v13[7], v20, v13[6] - v20);
    v21 = *v13;
    if (!*v13)
    {
LABEL_7:
      v22 = *(unint64_t **)(v15 + 24);
      if (v22 == &STACK[0x308])
      {
        v23 = 4;
        v22 = &STACK[0x308];
      }
      else
      {
        if (!v22)
          goto LABEL_12;
        v23 = 5;
      }
      (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_12:
      v24 = *(unint64_t **)(v15 + 56);
      if (v24 == &STACK[0x328])
      {
        v25 = 4;
        v24 = &STACK[0x328];
      }
      else
      {
        if (!v24)
          goto LABEL_21;
        v25 = 5;
      }
      (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_21:
      MEMORY[0x1A1AF4E00](v13, 0x10A0C40D234DDC7);
      v26 = *((_QWORD *)v12 + 158);
      *((_QWORD *)v12 + 158) = 0;
      if (v26)
        MEMORY[0x1A1AF4E00](v26, 0x1000C4049ECCB0CLL);
      v27 = *((_QWORD *)v12 + 157);
      *((_QWORD *)v12 + 157) = 0;
      if (v27)
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100]((uint64_t *)STACK[0x220]);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100]((uint64_t *)STACK[0x230]);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100]((uint64_t *)STACK[0x238]);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100]((uint64_t *)STACK[0x240]);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100]((uint64_t *)STACK[0x248]);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)v14 + 960);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100]((uint64_t *)STACK[0x250]);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)v14 + 936);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100]((uint64_t *)STACK[0x258]);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)v14 + 912);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100]((uint64_t *)STACK[0x260]);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)v14 + 888);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100]((uint64_t *)STACK[0x268]);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)v14 + 864);
      ggl::Texture::~Texture(a9);
      ggl::Texture::~Texture(a10);
      ggl::Texture::~Texture(a11);
      ggl::Texture::~Texture(v14);
      ggl::Texture::~Texture(a12);
      md::RenderItemPool::~RenderItemPool(v12);

      _Unwind_Resume((_Unwind_Exception *)STACK[0x290]);
    }
LABEL_6:
    v13[1] = v21;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13[3] + 40))(v13[3], v21, v13[2] - v21);
    goto LABEL_7;
  }
LABEL_5:
  v21 = *v13;
  if (!*v13)
    goto LABEL_7;
  goto LABEL_6;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_13FlyoverCommon9TexcoordsEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_13FlyoverCommon9TexcoordsEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D6740;
  return result;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_13FlyoverCommon9TexcoordsEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEPNS0_6__baseISD_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D6740;
}

void std::__function::__func<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_12,std::allocator<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_12>,ggl::ConstantDataTyped<ggl::FlyoverCommon::Texcoords> * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_12,std::allocator<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_12>,ggl::ConstantDataTyped<ggl::FlyoverCommon::Texcoords> * ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E427A800;
  return result;
}

void std::__function::__func<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_12,std::allocator<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_12>,ggl::ConstantDataTyped<ggl::FlyoverCommon::Texcoords> * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E427A800;
}

_QWORD *std::__function::__func<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_12,std::allocator<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_12>,ggl::ConstantDataTyped<ggl::FlyoverCommon::Texcoords> * ()(void)>::operator()()
{
  uint64_t v0;
  _QWORD *result;

  v0 = operator new();
  result = (_QWORD *)ggl::BufferData::BufferData(v0, qword_1EE550BD8, 2, 1, 6, 1);
  result[25] = ggl::FlyoverCommon::Texcoords::reflection(void)::reflection;
  *result = &off_1E42B8E90;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_13FlyoverCommon8MaterialEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_13FlyoverCommon8MaterialEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D66F8;
  return result;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_13FlyoverCommon8MaterialEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEPNS0_6__baseISD_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D66F8;
}

void std::__function::__func<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_11,std::allocator<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_11>,ggl::ConstantDataTyped<ggl::FlyoverCommon::Material> * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_11,std::allocator<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_11>,ggl::ConstantDataTyped<ggl::FlyoverCommon::Material> * ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E427A7B8;
  return result;
}

void std::__function::__func<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_11,std::allocator<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_11>,ggl::ConstantDataTyped<ggl::FlyoverCommon::Material> * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E427A7B8;
}

_QWORD *std::__function::__func<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_11,std::allocator<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_11>,ggl::ConstantDataTyped<ggl::FlyoverCommon::Material> * ()(void)>::operator()()
{
  uint64_t v0;
  _QWORD *result;

  v0 = operator new();
  result = (_QWORD *)ggl::BufferData::BufferData(v0, qword_1EE550B78, 2, 1, 6, 1);
  result[25] = ggl::FlyoverCommon::Material::reflection(void)::reflection;
  *result = &off_1E42B8E70;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_13FlyoverCommon4ClipEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_13FlyoverCommon4ClipEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D66B0;
  return result;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_13FlyoverCommon4ClipEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEPNS0_6__baseISD_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D66B0;
}

void std::__function::__func<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_10,std::allocator<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_10>,ggl::ConstantDataTyped<ggl::FlyoverCommon::Clip> * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_10,std::allocator<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_10>,ggl::ConstantDataTyped<ggl::FlyoverCommon::Clip> * ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E427A770;
  return result;
}

void std::__function::__func<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_10,std::allocator<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_10>,ggl::ConstantDataTyped<ggl::FlyoverCommon::Clip> * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E427A770;
}

_QWORD *std::__function::__func<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_10,std::allocator<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_10>,ggl::ConstantDataTyped<ggl::FlyoverCommon::Clip> * ()(void)>::operator()()
{
  uint64_t v0;
  _QWORD *result;

  v0 = operator new();
  result = (_QWORD *)ggl::BufferData::BufferData(v0, qword_1EE550C18, 2, 1, 6, 1);
  result[25] = ggl::FlyoverCommon::Clip::reflection(void)::reflection;
  *result = &off_1E42B8E30;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_13FlyoverCommon11S2TransformEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_13FlyoverCommon11S2TransformEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E427D308;
  return result;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_13FlyoverCommon11S2TransformEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEPNS0_6__baseISD_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E427D308;
}

void std::__function::__func<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_9,std::allocator<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_9>,ggl::ConstantDataTyped<ggl::FlyoverCommon::S2Transform> * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_9,std::allocator<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_9>,ggl::ConstantDataTyped<ggl::FlyoverCommon::S2Transform> * ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E427A728;
  return result;
}

void std::__function::__func<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_9,std::allocator<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_9>,ggl::ConstantDataTyped<ggl::FlyoverCommon::S2Transform> * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E427A728;
}

_QWORD *std::__function::__func<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_9,std::allocator<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_9>,ggl::ConstantDataTyped<ggl::FlyoverCommon::S2Transform> * ()(void)>::operator()()
{
  uint64_t v0;
  _QWORD *result;

  v0 = operator new();
  result = (_QWORD *)ggl::BufferData::BufferData(v0, qword_1EE550B38, 2, 1, 6, 1);
  result[25] = ggl::FlyoverCommon::S2Transform::reflection(void)::reflection;
  *result = &off_1E4274788;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_13FlyoverCommon9TransformEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_13FlyoverCommon9TransformEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D6788;
  return result;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_13FlyoverCommon9TransformEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEPNS0_6__baseISD_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D6788;
}

void std::__function::__func<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_8,std::allocator<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_8>,ggl::ConstantDataTyped<ggl::FlyoverCommon::Transform> * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_8,std::allocator<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_8>,ggl::ConstantDataTyped<ggl::FlyoverCommon::Transform> * ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E427A6E0;
  return result;
}

void std::__function::__func<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_8,std::allocator<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_8>,ggl::ConstantDataTyped<ggl::FlyoverCommon::Transform> * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E427A6E0;
}

_QWORD *std::__function::__func<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_8,std::allocator<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_8>,ggl::ConstantDataTyped<ggl::FlyoverCommon::Transform> * ()(void)>::operator()()
{
  uint64_t v0;
  _QWORD *result;

  v0 = operator new();
  result = (_QWORD *)ggl::BufferData::BufferData(v0, qword_1EE550AB8, 2, 1, 6, 1);
  result[25] = ggl::FlyoverCommon::Transform::reflection(void)::reflection;
  *result = &off_1E42B8EB0;
  return result;
}

void std::__function::__func<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_7,std::allocator<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_7>,void ()(ggl::FlyoverNight::FlyoverPolarPipelineSetup *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_7,std::allocator<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_7>,void ()(ggl::FlyoverNight::FlyoverPolarPipelineSetup *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E427A698;
  return result;
}

void std::__function::__func<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_7,std::allocator<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_7>,void ()(ggl::FlyoverNight::FlyoverPolarPipelineSetup *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E427A698;
}

void std::__function::__func<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_6,std::allocator<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_6>,ggl::FlyoverNight::FlyoverPolarPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_6,std::allocator<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_6>,ggl::FlyoverNight::FlyoverPolarPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427A650;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_6,std::allocator<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_6>,ggl::FlyoverNight::FlyoverPolarPipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E427A650;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_6,std::allocator<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_6>,ggl::FlyoverNight::FlyoverPolarPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (_QWORD *)operator new();
  v3 = v2;
  v4 = *(_QWORD *)(v1 + 1176);
  v5 = *(std::__shared_weak_count **)(v1 + 1184);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v2, v4, (uint64_t)v5);
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v2, v4, 0);
  }
  *v3 = &off_1E4274678;
  return v3;
}

void std::__shared_ptr_emplace<ggl::FlyoverNight::FlyoverPolarPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E428A178;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::FlyoverNight::FlyoverPolarPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E428A178;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::FlyoverNight::FlyoverPolarPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_5,std::allocator<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_5>,void ()(ggl::FlyoverNight::FlyoverPipelineSetup *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_5,std::allocator<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_5>,void ()(ggl::FlyoverNight::FlyoverPipelineSetup *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E427A608;
  return result;
}

void std::__function::__func<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_5,std::allocator<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_5>,void ()(ggl::FlyoverNight::FlyoverPipelineSetup *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E427A608;
}

void std::__function::__func<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_4,std::allocator<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_4>,ggl::FlyoverNight::FlyoverPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_4,std::allocator<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_4>,ggl::FlyoverNight::FlyoverPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427A5C0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_4,std::allocator<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_4>,ggl::FlyoverNight::FlyoverPipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E427A5C0;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_4,std::allocator<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_4>,ggl::FlyoverNight::FlyoverPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (_QWORD *)operator new();
  v3 = v2;
  v4 = *(_QWORD *)(v1 + 1152);
  v5 = *(std::__shared_weak_count **)(v1 + 1160);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v2, v4, (uint64_t)v5);
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v2, v4, 0);
  }
  *v3 = &off_1E42B6170;
  return v3;
}

void std::__function::__func<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_3,std::allocator<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_3>,void ()(ggl::Flyover::FlyoverPolarPipelineSetup *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_3,std::allocator<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_3>,void ()(ggl::Flyover::FlyoverPolarPipelineSetup *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E427A578;
  return result;
}

void std::__function::__func<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_3,std::allocator<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_3>,void ()(ggl::Flyover::FlyoverPolarPipelineSetup *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E427A578;
}

void std::__function::__func<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_2,std::allocator<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_2>,ggl::Flyover::FlyoverPolarPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_2,std::allocator<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_2>,ggl::Flyover::FlyoverPolarPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427A530;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_2,std::allocator<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_2>,ggl::Flyover::FlyoverPolarPipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E427A530;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_2,std::allocator<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_2>,ggl::Flyover::FlyoverPolarPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (_QWORD *)operator new();
  v3 = v2;
  v4 = *(_QWORD *)(v1 + 1128);
  v5 = *(std::__shared_weak_count **)(v1 + 1136);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v2, v4, (uint64_t)v5);
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v2, v4, 0);
  }
  *v3 = &off_1E4274848;
  return v3;
}

void std::__shared_ptr_emplace<ggl::Flyover::FlyoverPolarPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E428A290;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::Flyover::FlyoverPolarPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E428A290;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::Flyover::FlyoverPolarPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_1>,void ()(ggl::Flyover::FlyoverPipelineSetup *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_1>,void ()(ggl::Flyover::FlyoverPipelineSetup *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E427A4E8;
  return result;
}

void std::__function::__func<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_1>,void ()(ggl::Flyover::FlyoverPipelineSetup *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E427A4E8;
}

void std::__function::__func<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_0>,ggl::Flyover::FlyoverPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_0>,ggl::Flyover::FlyoverPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427A4A0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_0>,ggl::Flyover::FlyoverPipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E427A4A0;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::FlyoverRenderResources::FlyoverRenderResources(md::SharedDeviceResources const&,VKSharedResources *,ggl::RenderTargetFormat const&)::$_0>,ggl::Flyover::FlyoverPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (_QWORD *)operator new();
  v3 = v2;
  v4 = *(_QWORD *)(v1 + 1104);
  v5 = *(std::__shared_weak_count **)(v1 + 1112);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v2, v4, (uint64_t)v5);
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v2, v4, 0);
  }
  *v3 = &off_1E42BCA20;
  return v3;
}

uint64_t **std::__hash_table<std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,std::__unordered_map_hasher<md::MaterialKey,std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,md::MaterialKeyHasher,std::equal_to<md::MaterialKey>,true>,std::__unordered_map_equal<md::MaterialKey,std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,std::equal_to<md::MaterialKey>,md::MaterialKeyHasher,true>,std::allocator<std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>>>::find<md::MaterialKey>(_QWORD *a1, uint64_t *a2)
{
  int8x8_t v2;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  uint64_t ***v10;
  uint64_t **result;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *((unsigned __int8 *)a2 + 8);
  v4 = (uint64_t *)*a2;
  v5 = (*a2 + ((v3 - 0x61C8864680B583EBLL) << 6) - 0x3A3AA7D820E2E4E6) ^ (v3 - 0x61C8864680B583EBLL);
  v6 = *((unsigned __int8 *)a2 + 9);
  v7 = ((v6 | (v5 << 6)) + (v5 >> 2) - 0x61C8864680B583EBLL) ^ v5;
  v8 = (uint8x8_t)vcnt_s8(v2);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] > 1uLL)
  {
    v9 = ((v6 | (v5 << 6)) + (v5 >> 2) - 0x61C8864680B583EBLL) ^ v5;
    if (v7 >= *(_QWORD *)&v2)
      v9 = v7 % *(_QWORD *)&v2;
  }
  else
  {
    v9 = v7 & (*(_QWORD *)&v2 - 1);
  }
  v10 = *(uint64_t ****)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  result = *v10;
  if (*v10)
  {
    if (v8.u32[0] < 2uLL)
    {
      v12 = *(_QWORD *)&v2 - 1;
      while (1)
      {
        v14 = result[1];
        if (v14 == (uint64_t *)v7)
        {
          if (result[2] == v4
            && __PAIR64__(*((unsigned __int8 *)result + 25), *((unsigned __int8 *)result + 24)) == __PAIR64__(v6, v3))
          {
            return result;
          }
        }
        else if (((unint64_t)v14 & v12) != v9)
        {
          return 0;
        }
        result = (uint64_t **)*result;
        if (!result)
          return result;
      }
    }
    do
    {
      v13 = (unint64_t)result[1];
      if (v13 == v7)
      {
        if (result[2] == v4
          && __PAIR64__(*((unsigned __int8 *)result + 25), *((unsigned __int8 *)result + 24)) == __PAIR64__(v6, v3))
        {
          return result;
        }
      }
      else
      {
        if (v13 >= *(_QWORD *)&v2)
          v13 %= *(_QWORD *)&v2;
        if (v13 != v9)
          return 0;
      }
      result = (uint64_t **)*result;
    }
    while (result);
  }
  return result;
}

unint64_t md::MaterialResourceStore::createMaterialHandle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void **v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  uint64_t *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _BYTE *v41;
  uint64_t *v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  _OWORD *v46;
  char *v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  _BYTE *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  _BYTE *v59;
  _QWORD *v60;
  char *v61;
  unint64_t v62;
  uint64_t v63;
  _OWORD *v64;
  __int128 *v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  uint64_t *v69;
  unint64_t v70;
  uint8x8_t v71;
  _QWORD *v72;
  _QWORD *v73;
  unint64_t v74;
  uint64_t v75;
  float v76;
  float v77;
  _BOOL8 v78;
  unint64_t v79;
  unint64_t v80;
  size_t prime;
  unint64_t v82;
  uint8x8_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint8x8_t v91;
  uint64_t *v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  float v96;
  float v97;
  _BOOL8 v98;
  unint64_t v99;
  unint64_t v100;
  size_t v101;
  void *v102;
  void *v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  size_t v107;
  size_t v108;
  size_t v109;
  _QWORD *i;
  size_t v111;
  uint64_t v112;
  unint64_t v113;
  uint8x8_t v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  size_t v118;
  _QWORD *v119;
  uint64_t *v120;
  unint64_t v121;
  unint64_t v122;
  uint8x8_t v123;
  _QWORD *v124;
  _QWORD *v125;
  unint64_t v126;
  uint64_t v127;
  float v128;
  float v129;
  _BOOL8 v130;
  unint64_t v131;
  unint64_t v132;
  size_t v133;
  void *v134;
  void *v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  size_t v139;
  size_t v140;
  size_t v141;
  _QWORD *j;
  size_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint8x8_t v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  size_t v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  unint64_t v156;
  void *v158;
  void *v159;
  uint64_t v160[2];

  v160[0] = a2;
  v160[1] = a3;
  v6 = (void **)(a1 + 232);
  v7 = std::__hash_table<std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,std::__unordered_map_hasher<md::MaterialKey,std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,md::MaterialKeyHasher,std::equal_to<md::MaterialKey>,true>,std::__unordered_map_equal<md::MaterialKey,std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,std::equal_to<md::MaterialKey>,md::MaterialKeyHasher,true>,std::allocator<std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>>>::find<md::MaterialKey>((_QWORD *)(a1 + 232), v160);
  if (v7)
  {
    v8 = (unint64_t)v7[4];
    if (v8)
      return v8;
  }
  v9 = *(_QWORD *)(a1 + 104);
  if (*(_QWORD *)(a1 + 96) == v9)
  {
    v11 = ((*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 3) | 0x100000000;
    v13 = *(uint64_t **)(a1 + 128);
    v12 = *(_QWORD *)(a1 + 136);
    if ((unint64_t)v13 >= v12)
    {
      v15 = *(uint64_t **)(a1 + 120);
      v16 = v13 - v15;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_318;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          goto LABEL_319;
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = (uint64_t *)&v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v11;
      v14 = v21 + 1;
      if (v13 == v15)
      {
        v15 = v13;
      }
      else
      {
        v23 = (char *)v13 - (char *)v15 - 8;
        if (v23 < 0x58)
          goto LABEL_322;
        if ((unint64_t)((char *)v15 - v20) < 0x20)
          goto LABEL_322;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 2;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 4;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_322:
          do
          {
            v29 = *--v13;
            *--v21 = v29;
          }
          while (v13 != v15);
          v15 = *(uint64_t **)(a1 + 120);
        }
      }
      *(_QWORD *)(a1 + 120) = v21;
      *(_QWORD *)(a1 + 128) = v14;
      *(_QWORD *)(a1 + 136) = v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *v13 = v11;
      v14 = v13 + 1;
    }
    *(_QWORD *)(a1 + 128) = v14;
    v8 = *(v14 - 1);
  }
  else
  {
    v10 = *(_QWORD *)(v9 - 8);
    *(_QWORD *)(a1 + 104) = v9 - 8;
    *(_DWORD *)(*(_QWORD *)(a1 + 120) + 8 * v10) = (*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 3;
    *(_DWORD *)(*(_QWORD *)(a1 + 120) + 8 * v10 + 4) = (((unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 120)
                                                                                           + 8 * v10
                                                                                           + 4) << 32)
                                                      + 0x100000000) >> 32;
    v8 = v10 | ((unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 120) + 8 * v10 + 4) << 32);
  }
  v31 = *(char **)(a1 + 152);
  v30 = *(_QWORD *)(a1 + 160);
  if ((unint64_t)v31 >= v30)
  {
    v36 = *(char **)(a1 + 144);
    v37 = (v31 - v36) >> 3;
    v38 = v37 + 1;
    if ((unint64_t)(v37 + 1) >> 61)
      goto LABEL_318;
    v39 = v30 - (_QWORD)v36;
    if (v39 >> 2 > v38)
      v38 = v39 >> 2;
    if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8)
      v40 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v40 = v38;
    if (v40)
    {
      if (v40 >> 61)
        goto LABEL_319;
      v41 = operator new(8 * v40);
    }
    else
    {
      v41 = 0;
    }
    v42 = (uint64_t *)&v41[8 * v37];
    v43 = &v41[8 * v40];
    *v42 = a2;
    v35 = v42 + 1;
    if (v31 != v36)
    {
      v44 = v31 - v36 - 8;
      if (v44 < 0x58)
        goto LABEL_323;
      if ((unint64_t)(v36 - v41) < 0x20)
        goto LABEL_323;
      v45 = (v44 >> 3) + 1;
      v46 = &v41[8 * v37 - 16];
      v47 = v31 - 16;
      v48 = v45 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v49 = *(_OWORD *)v47;
        *(v46 - 1) = *((_OWORD *)v47 - 1);
        *v46 = v49;
        v46 -= 2;
        v47 -= 32;
        v48 -= 4;
      }
      while (v48);
      v42 -= v45 & 0x3FFFFFFFFFFFFFFCLL;
      v31 -= 8 * (v45 & 0x3FFFFFFFFFFFFFFCLL);
      if (v45 != (v45 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_323:
        do
        {
          v50 = *((_QWORD *)v31 - 1);
          v31 -= 8;
          *--v42 = v50;
        }
        while (v31 != v36);
      }
    }
    v34 = a2;
    v33 = a3;
    *(_QWORD *)(a1 + 144) = v42;
    *(_QWORD *)(a1 + 152) = v35;
    *(_QWORD *)(a1 + 160) = v43;
    if (v36)
      operator delete(v36);
  }
  else
  {
    v32 = a2;
    v33 = a3;
    v34 = v32;
    *(_QWORD *)v31 = v32;
    v35 = v31 + 8;
  }
  *(_QWORD *)(a1 + 152) = v35;
  v52 = *(_QWORD *)(a1 + 176);
  v51 = *(_QWORD *)(a1 + 184);
  if (v52 < v51)
  {
    *(_QWORD *)v52 = v8;
    v52 += 8;
    v53 = v52;
    goto LABEL_73;
  }
  v54 = *(_BYTE **)(a1 + 168);
  v55 = (uint64_t)(v52 - (_QWORD)v54) >> 3;
  v56 = v55 + 1;
  if ((unint64_t)(v55 + 1) >> 61)
LABEL_318:
    abort();
  v57 = v51 - (_QWORD)v54;
  if (v57 >> 2 > v56)
    v56 = v57 >> 2;
  if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8)
    v58 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v58 = v56;
  if (v58)
  {
    if (v58 >> 61)
      goto LABEL_319;
    v59 = operator new(8 * v58);
  }
  else
  {
    v59 = 0;
  }
  v60 = &v59[8 * v55];
  v61 = &v59[8 * v58];
  *v60 = v8;
  v53 = (unint64_t)(v60 + 1);
  if ((_BYTE *)v52 != v54)
  {
    v62 = v52 - (_QWORD)v54 - 8;
    if (v62 < 0x58)
      goto LABEL_324;
    if ((unint64_t)(v54 - v59) < 0x20)
      goto LABEL_324;
    v63 = (v62 >> 3) + 1;
    v64 = &v59[8 * v55 - 16];
    v65 = (__int128 *)(v52 - 16);
    v66 = v63 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v67 = *v65;
      *(v64 - 1) = *(v65 - 1);
      *v64 = v67;
      v64 -= 2;
      v65 -= 2;
      v66 -= 4;
    }
    while (v66);
    v60 -= v63 & 0x3FFFFFFFFFFFFFFCLL;
    v52 -= 8 * (v63 & 0x3FFFFFFFFFFFFFFCLL);
    if (v63 != (v63 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_324:
      do
      {
        v68 = *(_QWORD *)(v52 - 8);
        v52 -= 8;
        *--v60 = v68;
      }
      while ((_BYTE *)v52 != v54);
    }
  }
  *(_QWORD *)(a1 + 168) = v60;
  *(_QWORD *)(a1 + 176) = v53;
  *(_QWORD *)(a1 + 184) = v61;
  if (v54)
    operator delete(v54);
LABEL_73:
  *(_QWORD *)(a1 + 176) = v53;
  v69 = (uint64_t *)(a1 + 56);
  v70 = *(_QWORD *)(a1 + 64);
  if (v70)
  {
    v71 = (uint8x8_t)vcnt_s8((int8x8_t)v70);
    v71.i16[0] = vaddlv_u8(v71);
    if (v71.u32[0] > 1uLL)
    {
      v53 = v8;
      if (v8 >= v70)
        v53 = v8 % v70;
    }
    else
    {
      v53 = (v70 - 1) & v8;
    }
    v72 = *(_QWORD **)(*v69 + 8 * v53);
    if (v72)
    {
      v73 = (_QWORD *)*v72;
      if (v73)
      {
        if (v71.u32[0] < 2uLL)
        {
          while (1)
          {
            v75 = v73[1];
            if (v75 == v8)
            {
              if (v73[2] == v8)
                goto LABEL_133;
            }
            else if ((v75 & (v70 - 1)) != v53)
            {
              goto LABEL_94;
            }
            v73 = (_QWORD *)*v73;
            if (!v73)
              goto LABEL_94;
          }
        }
        do
        {
          v74 = v73[1];
          if (v74 == v8)
          {
            if (v73[2] == v8)
              goto LABEL_133;
          }
          else
          {
            if (v74 >= v70)
              v74 %= v70;
            if (v74 != v53)
              break;
          }
          v73 = (_QWORD *)*v73;
        }
        while (v73);
      }
    }
  }
LABEL_94:
  v52 = (unint64_t)operator new(0x30uLL);
  *(_QWORD *)v52 = 0;
  *(_QWORD *)(v52 + 8) = v8;
  *(_QWORD *)(v52 + 16) = v8;
  *(int64x2_t *)(v52 + 24) = vdupq_n_s64(1uLL);
  *(_BYTE *)(v52 + 40) = 0;
  v76 = (float)(unint64_t)(*(_QWORD *)(a1 + 80) + 1);
  v77 = *(float *)(a1 + 88);
  if (!v70 || (float)(v77 * (float)v70) < v76)
  {
    v78 = v70 < 3 || (v70 & (v70 - 1)) != 0;
    v79 = v78 | (2 * v70);
    v80 = vcvtps_u32_f32(v76 / v77);
    if (v79 <= v80)
      prime = v80;
    else
      prime = v79;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v70 = *(_QWORD *)(a1 + 64);
    }
    if (prime > v70)
      goto LABEL_107;
    if (prime < v70)
    {
      v82 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 80) / *(float *)(a1 + 88));
      if (v70 < 3 || (v83 = (uint8x8_t)vcnt_s8((int8x8_t)v70), v83.i16[0] = vaddlv_u8(v83), v83.u32[0] > 1uLL))
      {
        v82 = std::__next_prime(v82);
      }
      else
      {
        v84 = 1 << -(char)__clz(v82 - 1);
        if (v82 >= 2)
          v82 = v84;
      }
      if (prime <= v82)
        prime = v82;
      if (prime < v70)
LABEL_107:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1 + 56, prime);
    }
    v70 = *(_QWORD *)(a1 + 64);
    if ((v70 & (v70 - 1)) != 0)
    {
      if (v8 >= v70)
        v53 = v8 % v70;
      else
        v53 = v8;
    }
    else
    {
      v53 = (v70 - 1) & v8;
    }
  }
  v85 = *v69;
  v86 = *(unint64_t **)(*v69 + 8 * v53);
  if (v86)
  {
    *(_QWORD *)v52 = *v86;
LABEL_131:
    *v86 = v52;
    goto LABEL_132;
  }
  *(_QWORD *)v52 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v52;
  *(_QWORD *)(v85 + 8 * v53) = a1 + 72;
  if (*(_QWORD *)v52)
  {
    v87 = *(_QWORD *)(*(_QWORD *)v52 + 8);
    if ((v70 & (v70 - 1)) != 0)
    {
      if (v87 >= v70)
        v87 %= v70;
    }
    else
    {
      v87 &= v70 - 1;
    }
    v86 = (unint64_t *)(*v69 + 8 * v87);
    goto LABEL_131;
  }
LABEL_132:
  ++*(_QWORD *)(a1 + 80);
LABEL_133:
  v88 = (v34 + ((v33 - 0x61C8864680B583EBLL) << 6) - 0x3A3AA7D820E2E4E6) ^ (v33
                                                                                             - 0x61C8864680B583EBLL);
  v89 = ((v88 << 6) + BYTE1(v33) + (v88 >> 2) - 0x61C8864680B583EBLL) ^ v88;
  v90 = *(_QWORD *)(a1 + 240);
  if (v90)
  {
    v91 = (uint8x8_t)vcnt_s8((int8x8_t)v90);
    v91.i16[0] = vaddlv_u8(v91);
    if (v91.u32[0] > 1uLL)
    {
      v52 = ((v88 << 6) + BYTE1(v33) + (v88 >> 2) - 0x61C8864680B583EBLL) ^ v88;
      if (v89 >= v90)
        v52 = v89 % v90;
    }
    else
    {
      v52 = v89 & (v90 - 1);
    }
    v92 = (uint64_t *)*((_QWORD *)*v6 + v52);
    if (v92)
    {
      v93 = *v92;
      if (*v92)
      {
        if (v91.u32[0] < 2uLL)
        {
          while (1)
          {
            v95 = *(_QWORD *)(v93 + 8);
            if (v95 == v89)
            {
              if (*(_QWORD *)(v93 + 16) == v34
                && __PAIR64__(*(unsigned __int8 *)(v93 + 25), *(unsigned __int8 *)(v93 + 24)) == __PAIR64__(BYTE1(v33), v33))
              {
                goto LABEL_217;
              }
            }
            else if ((v95 & (v90 - 1)) != v52)
            {
              goto LABEL_157;
            }
            v93 = *(_QWORD *)v93;
            if (!v93)
              goto LABEL_157;
          }
        }
        do
        {
          v94 = *(_QWORD *)(v93 + 8);
          if (v94 == v89)
          {
            if (*(_QWORD *)(v93 + 16) == v34
              && __PAIR64__(*(unsigned __int8 *)(v93 + 25), *(unsigned __int8 *)(v93 + 24)) == __PAIR64__(BYTE1(v33), v33))
            {
              goto LABEL_217;
            }
          }
          else
          {
            if (v94 >= v90)
              v94 %= v90;
            if (v94 != v52)
              break;
          }
          v93 = *(_QWORD *)v93;
        }
        while (v93);
      }
    }
  }
LABEL_157:
  v93 = (uint64_t)operator new(0x28uLL);
  *(_QWORD *)v93 = 0;
  *(_QWORD *)(v93 + 8) = v89;
  *(_QWORD *)(v93 + 16) = v34;
  *(_QWORD *)(v93 + 24) = v33;
  *(_QWORD *)(v93 + 32) = 0;
  v96 = (float)(unint64_t)(*(_QWORD *)(a1 + 256) + 1);
  v97 = *(float *)(a1 + 264);
  if (!v90 || (float)(v97 * (float)v90) < v96)
  {
    v98 = 1;
    if (v90 >= 3)
      v98 = (v90 & (v90 - 1)) != 0;
    v99 = v98 | (2 * v90);
    v100 = vcvtps_u32_f32(v96 / v97);
    if (v99 <= v100)
      v101 = v100;
    else
      v101 = v99;
    if (v101 == 1)
    {
      v101 = 2;
    }
    else if ((v101 & (v101 - 1)) != 0)
    {
      v101 = std::__next_prime(v101);
      v90 = *(_QWORD *)(a1 + 240);
    }
    if (v101 <= v90)
    {
      if (v101 >= v90)
        goto LABEL_194;
      v113 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 256) / *(float *)(a1 + 264));
      if (v90 < 3 || (v114 = (uint8x8_t)vcnt_s8((int8x8_t)v90), v114.i16[0] = vaddlv_u8(v114), v114.u32[0] > 1uLL))
      {
        v113 = std::__next_prime(v113);
      }
      else
      {
        v115 = 1 << -(char)__clz(v113 - 1);
        if (v113 >= 2)
          v113 = v115;
      }
      if (v101 <= v113)
        v101 = v113;
      if (v101 >= v90)
      {
        v90 = *(_QWORD *)(a1 + 240);
LABEL_194:
        if ((v90 & (v90 - 1)) != 0)
        {
          if (v89 >= v90)
            v52 = v89 % v90;
          else
            v52 = v89;
        }
        else
        {
          v52 = (v90 - 1) & v89;
        }
        goto LABEL_207;
      }
      if (!v101)
      {
        v158 = *v6;
        *v6 = 0;
        if (v158)
          operator delete(v158);
        v90 = 0;
        *(_QWORD *)(a1 + 240) = 0;
        goto LABEL_194;
      }
    }
    if (v101 >> 61)
      goto LABEL_319;
    v102 = operator new(8 * v101);
    v103 = *v6;
    *v6 = v102;
    if (v103)
      operator delete(v103);
    v104 = 0;
    *(_QWORD *)(a1 + 240) = v101;
    do
      *((_QWORD *)*v6 + v104++) = 0;
    while (v101 != v104);
    v106 = a1 + 248;
    v105 = *(_QWORD **)(a1 + 248);
    if (!v105)
    {
LABEL_193:
      v90 = v101;
      goto LABEL_194;
    }
    v107 = v105[1];
    v108 = v101 - 1;
    if ((v101 & (v101 - 1)) == 0)
    {
      v109 = v107 & v108;
      *((_QWORD *)*v6 + v109) = v106;
      for (i = (_QWORD *)*v105; *v105; i = (_QWORD *)*v105)
      {
        v111 = i[1] & v108;
        if (v111 == v109)
        {
          v105 = i;
        }
        else if (*((_QWORD *)*v6 + v111))
        {
          *v105 = *i;
          v112 = 8 * v111;
          *i = **(_QWORD **)((char *)*v6 + v112);
          **(_QWORD **)((char *)*v6 + v112) = i;
        }
        else
        {
          *((_QWORD *)*v6 + v111) = v105;
          v105 = i;
          v109 = v111;
        }
      }
      goto LABEL_193;
    }
    if (v107 >= v101)
      v107 %= v101;
    *((_QWORD *)*v6 + v107) = v106;
    v116 = (_QWORD *)*v105;
    if (!*v105)
      goto LABEL_193;
    while (1)
    {
      v118 = v116[1];
      if (v118 >= v101)
        v118 %= v101;
      if (v118 != v107)
      {
        if (!*((_QWORD *)*v6 + v118))
        {
          *((_QWORD *)*v6 + v118) = v105;
          goto LABEL_198;
        }
        *v105 = *v116;
        v117 = 8 * v118;
        *v116 = **(_QWORD **)((char *)*v6 + v117);
        **(_QWORD **)((char *)*v6 + v117) = v116;
        v116 = v105;
      }
      v118 = v107;
LABEL_198:
      v105 = v116;
      v116 = (_QWORD *)*v116;
      v107 = v118;
      if (!v116)
        goto LABEL_193;
    }
  }
LABEL_207:
  v119 = *v6;
  v120 = (uint64_t *)*((_QWORD *)*v6 + v52);
  if (v120)
  {
    *(_QWORD *)v93 = *v120;
LABEL_215:
    *v120 = v93;
    goto LABEL_216;
  }
  *(_QWORD *)v93 = *(_QWORD *)(a1 + 248);
  *(_QWORD *)(a1 + 248) = v93;
  v119[v52] = a1 + 248;
  if (*(_QWORD *)v93)
  {
    v121 = *(_QWORD *)(*(_QWORD *)v93 + 8);
    if ((v90 & (v90 - 1)) != 0)
    {
      if (v121 >= v90)
        v121 %= v90;
    }
    else
    {
      v121 &= v90 - 1;
    }
    v120 = (uint64_t *)((char *)*v6 + 8 * v121);
    goto LABEL_215;
  }
LABEL_216:
  ++*(_QWORD *)(a1 + 256);
LABEL_217:
  *(_QWORD *)(v93 + 32) = v8;
  v122 = *(_QWORD *)(a1 + 280);
  if (v122)
  {
    v123 = (uint8x8_t)vcnt_s8((int8x8_t)v122);
    v123.i16[0] = vaddlv_u8(v123);
    if (v123.u32[0] > 1uLL)
    {
      v93 = v8;
      if (v8 >= v122)
        v93 = v8 % v122;
    }
    else
    {
      v93 = (v122 - 1) & v8;
    }
    v124 = *(_QWORD **)(*(_QWORD *)(a1 + 272) + 8 * v93);
    if (v124)
    {
      v125 = (_QWORD *)*v124;
      if (*v124)
      {
        if (v123.u32[0] < 2uLL)
        {
          while (1)
          {
            v127 = v125[1];
            if (v127 == v8)
            {
              if (v125[2] == v8)
                goto LABEL_298;
            }
            else if ((v127 & (v122 - 1)) != v93)
            {
              goto LABEL_238;
            }
            v125 = (_QWORD *)*v125;
            if (!v125)
              goto LABEL_238;
          }
        }
        do
        {
          v126 = v125[1];
          if (v126 == v8)
          {
            if (v125[2] == v8)
              goto LABEL_298;
          }
          else
          {
            if (v126 >= v122)
              v126 %= v122;
            if (v126 != v93)
              break;
          }
          v125 = (_QWORD *)*v125;
        }
        while (v125);
      }
    }
  }
LABEL_238:
  v125 = operator new(0x28uLL);
  *v125 = 0;
  v125[1] = v8;
  v125[3] = 0;
  v125[4] = 0;
  v125[2] = v8;
  v128 = (float)(unint64_t)(*(_QWORD *)(a1 + 296) + 1);
  v129 = *(float *)(a1 + 304);
  if (!v122 || (float)(v129 * (float)v122) < v128)
  {
    v130 = 1;
    if (v122 >= 3)
      v130 = (v122 & (v122 - 1)) != 0;
    v131 = v130 | (2 * v122);
    v132 = vcvtps_u32_f32(v128 / v129);
    if (v131 <= v132)
      v133 = v132;
    else
      v133 = v131;
    if (v133 == 1)
    {
      v133 = 2;
    }
    else if ((v133 & (v133 - 1)) != 0)
    {
      v133 = std::__next_prime(v133);
      v122 = *(_QWORD *)(a1 + 280);
    }
    if (v133 <= v122)
    {
      if (v133 >= v122)
        goto LABEL_275;
      v146 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 296) / *(float *)(a1 + 304));
      if (v122 < 3 || (v147 = (uint8x8_t)vcnt_s8((int8x8_t)v122), v147.i16[0] = vaddlv_u8(v147), v147.u32[0] > 1uLL))
      {
        v146 = std::__next_prime(v146);
      }
      else
      {
        v148 = 1 << -(char)__clz(v146 - 1);
        if (v146 >= 2)
          v146 = v148;
      }
      if (v133 <= v146)
        v133 = v146;
      if (v133 >= v122)
      {
        v122 = *(_QWORD *)(a1 + 280);
LABEL_275:
        if ((v122 & (v122 - 1)) != 0)
        {
          if (v8 >= v122)
            v93 = v8 % v122;
          else
            v93 = v8;
        }
        else
        {
          v93 = (v122 - 1) & v8;
        }
        goto LABEL_288;
      }
      if (!v133)
      {
        v159 = *(void **)(a1 + 272);
        *(_QWORD *)(a1 + 272) = 0;
        if (v159)
          operator delete(v159);
        v122 = 0;
        *(_QWORD *)(a1 + 280) = 0;
        goto LABEL_275;
      }
    }
    if (!(v133 >> 61))
    {
      v134 = operator new(8 * v133);
      v135 = *(void **)(a1 + 272);
      *(_QWORD *)(a1 + 272) = v134;
      if (v135)
        operator delete(v135);
      v136 = 0;
      *(_QWORD *)(a1 + 280) = v133;
      do
        *(_QWORD *)(*(_QWORD *)(a1 + 272) + 8 * v136++) = 0;
      while (v133 != v136);
      v137 = *(_QWORD **)(a1 + 288);
      if (!v137)
        goto LABEL_274;
      v138 = a1 + 288;
      v139 = v137[1];
      v140 = v133 - 1;
      if ((v133 & (v133 - 1)) == 0)
      {
        v141 = v139 & v140;
        *(_QWORD *)(*(_QWORD *)(a1 + 272) + 8 * v141) = v138;
        for (j = (_QWORD *)*v137; *v137; j = (_QWORD *)*v137)
        {
          v143 = j[1] & v140;
          if (v143 == v141)
          {
            v137 = j;
          }
          else
          {
            v144 = *(_QWORD *)(a1 + 272);
            if (*(_QWORD *)(v144 + 8 * v143))
            {
              *v137 = *j;
              v145 = 8 * v143;
              *j = **(_QWORD **)(*(_QWORD *)(a1 + 272) + v145);
              **(_QWORD **)(*(_QWORD *)(a1 + 272) + v145) = j;
            }
            else
            {
              *(_QWORD *)(v144 + 8 * v143) = v137;
              v137 = j;
              v141 = v143;
            }
          }
        }
LABEL_274:
        v122 = v133;
        goto LABEL_275;
      }
      if (v139 >= v133)
        v139 %= v133;
      *(_QWORD *)(*(_QWORD *)(a1 + 272) + 8 * v139) = v138;
      v149 = (_QWORD *)*v137;
      if (!*v137)
        goto LABEL_274;
      while (1)
      {
        v151 = v149[1];
        if (v151 >= v133)
          v151 %= v133;
        if (v151 != v139)
        {
          v152 = *(_QWORD *)(a1 + 272);
          if (!*(_QWORD *)(v152 + 8 * v151))
          {
            *(_QWORD *)(v152 + 8 * v151) = v137;
            goto LABEL_279;
          }
          *v137 = *v149;
          v150 = 8 * v151;
          *v149 = **(_QWORD **)(*(_QWORD *)(a1 + 272) + v150);
          **(_QWORD **)(*(_QWORD *)(a1 + 272) + v150) = v149;
          v149 = v137;
        }
        v151 = v139;
LABEL_279:
        v137 = v149;
        v149 = (_QWORD *)*v149;
        v139 = v151;
        if (!v149)
          goto LABEL_274;
      }
    }
LABEL_319:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
LABEL_288:
  v153 = *(_QWORD *)(a1 + 272);
  v154 = *(_QWORD **)(v153 + 8 * v93);
  if (v154)
  {
    *v125 = *v154;
  }
  else
  {
    v155 = *(_QWORD *)(a1 + 288);
    *v125 = v155;
    *(_QWORD *)(a1 + 288) = v125;
    *(_QWORD *)(v153 + 8 * v93) = a1 + 288;
    if (!v155)
      goto LABEL_297;
    v156 = *(_QWORD *)(v155 + 8);
    if ((v122 & (v122 - 1)) != 0)
    {
      if (v156 >= v122)
        v156 %= v122;
    }
    else
    {
      v156 &= v122 - 1;
    }
    v154 = (_QWORD *)(*(_QWORD *)(a1 + 272) + 8 * v156);
  }
  *v154 = v125;
LABEL_297:
  ++*(_QWORD *)(a1 + 296);
LABEL_298:
  v125[3] = v34;
  *((_WORD *)v125 + 16) = v33;
  return v8;
}

uint64_t **md::MaterialResourceStore::canDeleteMaterial(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t **result;
  unint64_t v6;
  uint64_t v7;
  int8x8_t v8;
  uint8x8_t v9;
  unint64_t v10;
  _QWORD **v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t **v16;
  unint64_t v17;
  uint64_t v18[2];
  void *__p[3];

  v18[0] = a2;
  v18[1] = a3;
  v4 = a1 + 29;
  result = std::__hash_table<std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,std::__unordered_map_hasher<md::MaterialKey,std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,md::MaterialKeyHasher,std::equal_to<md::MaterialKey>,true>,std::__unordered_map_equal<md::MaterialKey,std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,std::equal_to<md::MaterialKey>,md::MaterialKeyHasher,true>,std::allocator<std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>>>::find<md::MaterialKey>(a1 + 29, v18);
  if (result)
  {
    v6 = (unint64_t)result[4];
    v17 = v6;
    if (!v6)
      return 0;
    v7 = std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::MaterialIDStorage>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::MaterialIDStorage> const&>,std::tuple<>>((uint64_t)(a1 + 7), v6, &v17)[4];
    if (v7 | std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::MaterialIDStorage>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::MaterialIDStorage> const&>,std::tuple<>>((uint64_t)(a1 + 7), v6, &v17)[3])
    {
      return 0;
    }
    else
    {
      geo::packed_array<md::MaterialIDStorage,geo::handle<md::MaterialIDStorage>>::erase((uint64_t)(a1 + 12), &v17);
      v8 = (int8x8_t)a1[8];
      if (v8)
      {
        v9 = (uint8x8_t)vcnt_s8(v8);
        v9.i16[0] = vaddlv_u8(v9);
        if (v9.u32[0] > 1uLL)
        {
          v10 = v6;
          if (v6 >= *(_QWORD *)&v8)
            v10 = v6 % *(_QWORD *)&v8;
        }
        else
        {
          v10 = (*(_QWORD *)&v8 - 1) & v6;
        }
        v11 = *(_QWORD ***)(a1[7] + 8 * v10);
        if (v11)
        {
          v12 = *v11;
          if (*v11)
          {
            if (v9.u32[0] < 2uLL)
            {
              v13 = *(_QWORD *)&v8 - 1;
              while (1)
              {
                v15 = v12[1];
                if (v15 == v6)
                {
                  if (v12[2] == v6)
                    goto LABEL_26;
                }
                else if ((v15 & v13) != v10)
                {
                  goto LABEL_28;
                }
                v12 = (_QWORD *)*v12;
                if (!v12)
                  goto LABEL_28;
              }
            }
            do
            {
              v14 = v12[1];
              if (v14 == v6)
              {
                if (v12[2] == v6)
                {
LABEL_26:
                  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, a1 + 7, v12);
                  if (__p[0])
                    operator delete(__p[0]);
                  break;
                }
              }
              else
              {
                if (v14 >= *(_QWORD *)&v8)
                  v14 %= *(_QWORD *)&v8;
                if (v14 != v10)
                  break;
              }
              v12 = (_QWORD *)*v12;
            }
            while (v12);
          }
        }
      }
LABEL_28:
      std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>(a1 + 34, v6);
      v16 = std::__hash_table<std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,std::__unordered_map_hasher<md::MaterialKey,std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,md::MaterialKeyHasher,std::equal_to<md::MaterialKey>,true>,std::__unordered_map_equal<md::MaterialKey,std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,std::equal_to<md::MaterialKey>,md::MaterialKeyHasher,true>,std::allocator<std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>>>::find<md::MaterialKey>(v4, v18);
      if (v16)
      {
        std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, v4, v16);
        if (__p[0])
          operator delete(__p[0]);
      }
      return (uint64_t **)1;
    }
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::MaterialIDStorage>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::MaterialIDStorage> const&>,std::tuple<>>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = a2;
  v10[2] = *a3;
  v10[3] = 0;
  v10[4] = 0;
  v10[5] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = v17;
    else
      prime = v16;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_44;
    if (prime < v7)
    {
      v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v20 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
      {
        v19 = std::__next_prime(v19);
      }
      else
      {
        v21 = 1 << -(char)__clz(v19 - 1);
        if (v19 >= 2)
          v19 = v21;
      }
      if (prime <= v19)
        prime = v19;
      if (prime < v7)
LABEL_44:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= a2)
        v3 = a2 % v7;
      else
        v3 = a2;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v23)
  {
    *v10 = *v23;
LABEL_58:
    *v23 = v10;
    goto LABEL_59;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v22 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v24 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v24 >= v7)
        v24 %= v7;
    }
    else
    {
      v24 &= v7 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void geo::packed_array<md::MaterialIDStorage,geo::handle<md::MaterialIDStorage>>::erase(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v9;
  unint64_t *v10;
  _QWORD *v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  unint64_t *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  unint64_t *v24;
  uint64_t v25;
  __int128 v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 24);
  if (v2 < (*(_QWORD *)(a1 + 32) - v3) >> 3)
  {
    v4 = *(_QWORD *)(v3 + 8 * v2);
    v6 = v4 == 0;
    v5 = HIDWORD(v4);
    v6 = !v6 && HIDWORD(*a2) == (_DWORD)v5;
    if (v6)
    {
      v10 = *(unint64_t **)(a1 + 8);
      v9 = *(_QWORD *)(a1 + 16);
      if ((unint64_t)v10 >= v9)
      {
        v12 = *(unint64_t **)a1;
        v13 = (uint64_t)v10 - *(_QWORD *)a1;
        v14 = v13 >> 3;
        v15 = (v13 >> 3) + 1;
        if (v15 >> 61)
          abort();
        v16 = v9 - (_QWORD)v12;
        if (v16 >> 2 > v15)
          v15 = v16 >> 2;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
        {
          if (v17 >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v18 = operator new(8 * v17);
        }
        else
        {
          v18 = 0;
        }
        v19 = (unint64_t *)&v18[8 * v14];
        v20 = &v18[8 * v17];
        *v19 = v2;
        v11 = v19 + 1;
        if (v10 != v12)
        {
          v21 = (char *)v10 - (char *)v12 - 8;
          if (v21 < 0x58)
            goto LABEL_34;
          if ((unint64_t)((char *)v10 - v18 - v13) < 0x20)
            goto LABEL_34;
          v22 = (v21 >> 3) + 1;
          v23 = &v18[8 * v14 - 16];
          v24 = v10 - 2;
          v25 = v22 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v26 = *(_OWORD *)v24;
            *(v23 - 1) = *((_OWORD *)v24 - 1);
            *v23 = v26;
            v23 -= 2;
            v24 -= 4;
            v25 -= 4;
          }
          while (v25);
          v19 -= v22 & 0x3FFFFFFFFFFFFFFCLL;
          v10 -= v22 & 0x3FFFFFFFFFFFFFFCLL;
          if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_34:
            do
            {
              v27 = *--v10;
              *--v19 = v27;
            }
            while (v10 != v12);
          }
        }
        *(_QWORD *)a1 = v19;
        *(_QWORD *)(a1 + 8) = v11;
        *(_QWORD *)(a1 + 16) = v20;
        if (v12)
        {
          operator delete(v12);
          v3 = *(_QWORD *)(a1 + 24);
        }
      }
      else
      {
        *v10 = v2;
        v11 = v10 + 1;
      }
      *(_QWORD *)(a1 + 8) = v11;
      v28 = *(_QWORD *)(v3 + 8 * *(unsigned int *)a2);
      v30 = *(_QWORD *)(a1 + 48);
      v29 = *(_QWORD *)(a1 + 56);
      v31 = 8 * v28;
      v32 = *(_QWORD *)(v30 + v31);
      v33 = *(_QWORD *)(v29 - v30 + *(_QWORD *)(a1 + 72) - 8);
      *(_QWORD *)(v30 + v31) = *(_QWORD *)(v29 - 8);
      *(_QWORD *)(v29 - 8) = v32;
      *(_DWORD *)(v3 + 8 * v33) = v28;
      v34 = *(_QWORD *)(a1 + 72);
      v35 = *(_QWORD **)(a1 + 80);
      v36 = *(_QWORD *)(v34 + v31);
      v37 = *--v35;
      *(_QWORD *)(v34 + v31) = v37;
      *v35 = v36;
      *(_QWORD *)(a1 + 56) -= 8;
      *(_QWORD *)(a1 + 80) = v35;
      v38 = 8 * *(unsigned int *)a2;
      *(_DWORD *)(*(_QWORD *)(a1 + 24) + v38 + 4) = (((unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 24) + v38 + 4) << 32)
                                                   + 0x100000000) >> 32;
      *(_DWORD *)(*(_QWORD *)(a1 + 24) + v38) = (*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3;
    }
  }
}

void std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>(uint64_t *a1, unint64_t a2)
{
  int8x8_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v2 = (int8x8_t)a1[1];
  if (v2)
  {
    v3 = (uint8x8_t)vcnt_s8(v2);
    v3.i16[0] = vaddlv_u8(v3);
    if (v3.u32[0] > 1uLL)
    {
      v4 = a2;
      if (*(_QWORD *)&v2 <= a2)
        v4 = a2 % *(_QWORD *)&v2;
    }
    else
    {
      v4 = (*(_QWORD *)&v2 - 1) & a2;
    }
    v5 = *a1;
    v6 = *(uint64_t ***)(*a1 + 8 * v4);
    if (v6)
    {
      v7 = *v6;
      if (v7)
      {
        v8 = *(_QWORD *)&v2 - 1;
        if (v3.u32[0] < 2uLL)
        {
          while (1)
          {
            v9 = v7[1];
            if (v9 == a2)
            {
              if (v7[2] == a2)
                goto LABEL_22;
            }
            else if ((v9 & v8) != v4)
            {
              return;
            }
            v7 = (uint64_t *)*v7;
            if (!v7)
              return;
          }
        }
        do
        {
          v10 = v7[1];
          if (v10 == a2)
          {
            if (v7[2] == a2)
            {
LABEL_22:
              if (v3.u32[0] > 1uLL)
              {
                if (*(_QWORD *)&v2 <= a2)
                  a2 %= *(_QWORD *)&v2;
              }
              else
              {
                a2 &= v8;
              }
              v11 = *(uint64_t **)(v5 + 8 * a2);
              do
              {
                v12 = v11;
                v11 = (uint64_t *)*v11;
              }
              while (v11 != v7);
              if (v12 == a1 + 2)
                goto LABEL_39;
              v13 = v12[1];
              if (v3.u32[0] > 1uLL)
              {
                if (v13 >= *(_QWORD *)&v2)
                  v13 %= *(_QWORD *)&v2;
              }
              else
              {
                v13 &= v8;
              }
              if (v13 != a2)
              {
LABEL_39:
                if (!*v7)
                  goto LABEL_40;
                v14 = *(_QWORD *)(*v7 + 8);
                if (v3.u32[0] > 1uLL)
                {
                  if (v14 >= *(_QWORD *)&v2)
                    v14 %= *(_QWORD *)&v2;
                }
                else
                {
                  v14 &= v8;
                }
                if (v14 != a2)
LABEL_40:
                  *(_QWORD *)(v5 + 8 * a2) = 0;
              }
              v15 = *v7;
              if (*v7)
              {
                v16 = *(_QWORD *)(v15 + 8);
                if (v3.u32[0] > 1uLL)
                {
                  if (v16 >= *(_QWORD *)&v2)
                    v16 %= *(_QWORD *)&v2;
                }
                else
                {
                  v16 &= v8;
                }
                if (v16 != a2)
                {
                  *(_QWORD *)(*a1 + 8 * v16) = v12;
                  v15 = *v7;
                }
              }
              *v12 = v15;
              *v7 = 0;
              --a1[3];
              operator delete(v7);
              return;
            }
          }
          else
          {
            if (v10 >= *(_QWORD *)&v2)
              v10 %= *(_QWORD *)&v2;
            if (v10 != v4)
              return;
          }
          v7 = (uint64_t *)*v7;
        }
        while (v7);
      }
    }
  }
}

unint64_t md::MaterialResourceStore::createColorData(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t v6;
  void **v7;
  uint64_t **v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  uint64_t *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  char *v34;
  char *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  _BYTE *v52;
  _QWORD *v53;
  char *v54;
  unint64_t v55;
  uint64_t v56;
  _OWORD *v57;
  __int128 *v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  uint64_t *v62;
  unint64_t v63;
  uint8x8_t v64;
  _QWORD *v65;
  _QWORD *v66;
  unint64_t v67;
  uint64_t v68;
  float v69;
  float v70;
  _BOOL8 v71;
  unint64_t v72;
  unint64_t v73;
  size_t prime;
  unint64_t v75;
  uint8x8_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint8x8_t v88;
  uint64_t *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  float v93;
  float v94;
  _BOOL8 v95;
  unint64_t v96;
  unint64_t v97;
  size_t v98;
  void *v99;
  void *v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  size_t v104;
  size_t v105;
  size_t v106;
  _QWORD *i;
  size_t v108;
  uint64_t v109;
  unint64_t v110;
  uint8x8_t v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  size_t v115;
  _QWORD *v116;
  uint64_t *v117;
  unint64_t v118;
  unint64_t v119;
  uint8x8_t v120;
  _QWORD *v121;
  _QWORD *v122;
  unint64_t v123;
  uint64_t v124;
  float v125;
  float v126;
  _BOOL8 v127;
  unint64_t v128;
  unint64_t v129;
  size_t v130;
  void *v131;
  void *v132;
  uint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  size_t v136;
  size_t v137;
  size_t v138;
  _QWORD *j;
  size_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint8x8_t v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  size_t v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  void *v156;
  void *v157;
  __int128 v158;

  if (!*(_BYTE *)(a3 + 16))
  {
    v6 = gdc::FamilyInfo<UniqueKey,unsigned long long>::Counter::nextId(void)::counter++;
    *(_BYTE *)(a3 + 16) = 1;
    *(_QWORD *)a3 = v6 - 0x61C8864680B583EBLL;
    *(_QWORD *)(a3 + 8) = 0;
  }
  v7 = (void **)(a1 + 1120);
  v8 = std::__hash_table<std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,std::__unordered_map_hasher<md::MaterialKey,std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,md::MaterialKeyHasher,std::equal_to<md::MaterialKey>,true>,std::__unordered_map_equal<md::MaterialKey,std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,std::equal_to<md::MaterialKey>,md::MaterialKeyHasher,true>,std::allocator<std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>>>::find<md::MaterialKey>((_QWORD *)(a1 + 1120), (uint64_t *)a3);
  if (v8)
  {
    v9 = (unint64_t)v8[4];
    if (v9)
      return v9;
  }
  v10 = *((_DWORD *)a2 + 4);
  v158 = *a2;
  v11 = *(_QWORD *)(a1 + 992);
  if (*(_QWORD *)(a1 + 984) == v11)
  {
    v13 = (-858993459 * ((*(_QWORD *)(a1 + 1040) - *(_QWORD *)(a1 + 1032)) >> 2)) | 0x100000000;
    v14 = *(uint64_t **)(a1 + 1016);
    v15 = *(_QWORD *)(a1 + 1024);
    if ((unint64_t)v14 >= v15)
    {
      v17 = *(uint64_t **)(a1 + 1008);
      v18 = v14 - v17;
      v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) >> 61)
        goto LABEL_313;
      v20 = v15 - (_QWORD)v17;
      if (v20 >> 2 > v19)
        v19 = v20 >> 2;
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
        v21 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v21 = v19;
      if (v21)
      {
        if (v21 >> 61)
          goto LABEL_312;
        v22 = operator new(8 * v21);
      }
      else
      {
        v22 = 0;
      }
      v23 = (uint64_t *)&v22[8 * v18];
      v24 = &v22[8 * v21];
      *v23 = v13;
      v16 = v23 + 1;
      if (v14 == v17)
      {
        v17 = v14;
      }
      else
      {
        v25 = (char *)v14 - (char *)v17 - 8;
        if (v25 < 0x58)
          goto LABEL_316;
        if ((unint64_t)((char *)v17 - v22) < 0x20)
          goto LABEL_316;
        v26 = (v25 >> 3) + 1;
        v27 = &v22[8 * v18 - 16];
        v28 = v14 - 2;
        v29 = v26 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v30 = *(_OWORD *)v28;
          *(v27 - 1) = *((_OWORD *)v28 - 1);
          *v27 = v30;
          v27 -= 2;
          v28 -= 4;
          v29 -= 4;
        }
        while (v29);
        v23 -= v26 & 0x3FFFFFFFFFFFFFFCLL;
        v14 -= v26 & 0x3FFFFFFFFFFFFFFCLL;
        if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_316:
          do
          {
            v31 = *--v14;
            *--v23 = v31;
          }
          while (v14 != v17);
          v17 = *(uint64_t **)(a1 + 1008);
        }
      }
      *(_QWORD *)(a1 + 1008) = v23;
      *(_QWORD *)(a1 + 1016) = v16;
      *(_QWORD *)(a1 + 1024) = v24;
      if (v17)
        operator delete(v17);
    }
    else
    {
      *v14 = v13;
      v16 = v14 + 1;
    }
    *(_QWORD *)(a1 + 1016) = v16;
    v9 = *(v16 - 1);
  }
  else
  {
    v12 = *(_QWORD *)(v11 - 8);
    *(_QWORD *)(a1 + 992) = v11 - 8;
    *(_DWORD *)(*(_QWORD *)(a1 + 1008) + 8 * v12) = -858993459
                                                  * ((*(_QWORD *)(a1 + 1040) - *(_QWORD *)(a1 + 1032)) >> 2);
    *(_DWORD *)(*(_QWORD *)(a1 + 1008) + 8 * v12 + 4) = (((unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 1008)
                                                                                            + 8 * v12
                                                                                            + 4) << 32)
                                                       + 0x100000000) >> 32;
    v9 = v12 | ((unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 1008) + 8 * v12 + 4) << 32);
  }
  v32 = *(char **)(a1 + 1040);
  v33 = *(_QWORD *)(a1 + 1048);
  if ((unint64_t)v32 >= v33)
  {
    v35 = *(char **)(a1 + 1032);
    v36 = 0xCCCCCCCCCCCCCCCDLL * ((v32 - v35) >> 2) + 1;
    if (v36 > 0xCCCCCCCCCCCCCCCLL)
      goto LABEL_313;
    v37 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v33 - (_QWORD)v35) >> 2);
    if (2 * v37 > v36)
      v36 = 2 * v37;
    if (v37 >= 0x666666666666666)
      v38 = 0xCCCCCCCCCCCCCCCLL;
    else
      v38 = v36;
    if (v38 > 0xCCCCCCCCCCCCCCCLL)
      goto LABEL_312;
    v39 = 20 * v38;
    v40 = (char *)operator new(20 * v38);
    v41 = &v40[4 * ((v32 - v35) >> 2)];
    v42 = &v40[v39];
    *(_OWORD *)v41 = v158;
    *((_DWORD *)v41 + 4) = v10;
    v34 = v41 + 20;
    if (v32 == v35)
    {
      v43 = &v40[4 * ((v32 - v35) >> 2)];
    }
    else
    {
      do
      {
        v43 = v41 - 20;
        *(_OWORD *)(v41 - 20) = *(_OWORD *)(v32 - 20);
        *((_DWORD *)v41 - 1) = *((_DWORD *)v32 - 1);
        v32 -= 20;
        v41 -= 20;
      }
      while (v32 != v35);
    }
    *(_QWORD *)(a1 + 1032) = v43;
    *(_QWORD *)(a1 + 1040) = v34;
    *(_QWORD *)(a1 + 1048) = v42;
    if (v35)
      operator delete(v35);
  }
  else
  {
    *(_OWORD *)v32 = v158;
    *((_DWORD *)v32 + 4) = v10;
    v34 = v32 + 20;
  }
  *(_QWORD *)(a1 + 1040) = v34;
  v44 = *(_QWORD *)(a1 + 1064);
  v45 = *(_QWORD *)(a1 + 1072);
  if (v44 < v45)
  {
    *(_QWORD *)v44 = v9;
    v44 += 8;
    v46 = v44;
    goto LABEL_67;
  }
  v47 = *(_BYTE **)(a1 + 1056);
  v48 = (uint64_t)(v44 - (_QWORD)v47) >> 3;
  v49 = v48 + 1;
  if ((unint64_t)(v48 + 1) >> 61)
LABEL_313:
    abort();
  v50 = v45 - (_QWORD)v47;
  if (v50 >> 2 > v49)
    v49 = v50 >> 2;
  if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8)
    v51 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v51 = v49;
  if (v51)
  {
    if (v51 >> 61)
      goto LABEL_312;
    v52 = operator new(8 * v51);
  }
  else
  {
    v52 = 0;
  }
  v53 = &v52[8 * v48];
  v54 = &v52[8 * v51];
  *v53 = v9;
  v46 = (unint64_t)(v53 + 1);
  if ((_BYTE *)v44 != v47)
  {
    v55 = v44 - (_QWORD)v47 - 8;
    if (v55 < 0x58)
      goto LABEL_317;
    if ((unint64_t)(v47 - v52) < 0x20)
      goto LABEL_317;
    v56 = (v55 >> 3) + 1;
    v57 = &v52[8 * v48 - 16];
    v58 = (__int128 *)(v44 - 16);
    v59 = v56 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v60 = *v58;
      *(v57 - 1) = *(v58 - 1);
      *v57 = v60;
      v57 -= 2;
      v58 -= 2;
      v59 -= 4;
    }
    while (v59);
    v53 -= v56 & 0x3FFFFFFFFFFFFFFCLL;
    v44 -= 8 * (v56 & 0x3FFFFFFFFFFFFFFCLL);
    if (v56 != (v56 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_317:
      do
      {
        v61 = *(_QWORD *)(v44 - 8);
        v44 -= 8;
        *--v53 = v61;
      }
      while ((_BYTE *)v44 != v47);
    }
  }
  *(_QWORD *)(a1 + 1056) = v53;
  *(_QWORD *)(a1 + 1064) = v46;
  *(_QWORD *)(a1 + 1072) = v54;
  if (v47)
    operator delete(v47);
LABEL_67:
  *(_QWORD *)(a1 + 1064) = v46;
  v62 = (uint64_t *)(a1 + 944);
  v63 = *(_QWORD *)(a1 + 952);
  if (v63)
  {
    v64 = (uint8x8_t)vcnt_s8((int8x8_t)v63);
    v64.i16[0] = vaddlv_u8(v64);
    if (v64.u32[0] > 1uLL)
    {
      v46 = v9;
      if (v9 >= v63)
        v46 = v9 % v63;
    }
    else
    {
      v46 = (v63 - 1) & v9;
    }
    v65 = *(_QWORD **)(*v62 + 8 * v46);
    if (v65)
    {
      v66 = (_QWORD *)*v65;
      if (v66)
      {
        if (v64.u32[0] < 2uLL)
        {
          while (1)
          {
            v68 = v66[1];
            if (v68 == v9)
            {
              if (v66[2] == v9)
                goto LABEL_127;
            }
            else if ((v68 & (v63 - 1)) != v46)
            {
              goto LABEL_88;
            }
            v66 = (_QWORD *)*v66;
            if (!v66)
              goto LABEL_88;
          }
        }
        do
        {
          v67 = v66[1];
          if (v67 == v9)
          {
            if (v66[2] == v9)
              goto LABEL_127;
          }
          else
          {
            if (v67 >= v63)
              v67 %= v63;
            if (v67 != v46)
              break;
          }
          v66 = (_QWORD *)*v66;
        }
        while (v66);
      }
    }
  }
LABEL_88:
  v44 = (unint64_t)operator new(0x30uLL);
  *(_QWORD *)v44 = 0;
  *(_QWORD *)(v44 + 8) = v9;
  *(_QWORD *)(v44 + 16) = v9;
  *(int64x2_t *)(v44 + 24) = vdupq_n_s64(1uLL);
  *(_BYTE *)(v44 + 40) = 0;
  v69 = (float)(unint64_t)(*(_QWORD *)(a1 + 968) + 1);
  v70 = *(float *)(a1 + 976);
  if (!v63 || (float)(v70 * (float)v63) < v69)
  {
    v71 = v63 < 3 || (v63 & (v63 - 1)) != 0;
    v72 = v71 | (2 * v63);
    v73 = vcvtps_u32_f32(v69 / v70);
    if (v72 <= v73)
      prime = v73;
    else
      prime = v72;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v63 = *(_QWORD *)(a1 + 952);
    }
    if (prime > v63)
      goto LABEL_101;
    if (prime < v63)
    {
      v75 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 968) / *(float *)(a1 + 976));
      if (v63 < 3 || (v76 = (uint8x8_t)vcnt_s8((int8x8_t)v63), v76.i16[0] = vaddlv_u8(v76), v76.u32[0] > 1uLL))
      {
        v75 = std::__next_prime(v75);
      }
      else
      {
        v77 = 1 << -(char)__clz(v75 - 1);
        if (v75 >= 2)
          v75 = v77;
      }
      if (prime <= v75)
        prime = v75;
      if (prime < v63)
LABEL_101:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1 + 944, prime);
    }
    v63 = *(_QWORD *)(a1 + 952);
    if ((v63 & (v63 - 1)) != 0)
    {
      if (v9 >= v63)
        v46 = v9 % v63;
      else
        v46 = v9;
    }
    else
    {
      v46 = (v63 - 1) & v9;
    }
  }
  v78 = *v62;
  v79 = *(unint64_t **)(*v62 + 8 * v46);
  if (v79)
  {
    *(_QWORD *)v44 = *v79;
LABEL_125:
    *v79 = v44;
    goto LABEL_126;
  }
  *(_QWORD *)v44 = *(_QWORD *)(a1 + 960);
  *(_QWORD *)(a1 + 960) = v44;
  *(_QWORD *)(v78 + 8 * v46) = a1 + 960;
  if (*(_QWORD *)v44)
  {
    v80 = *(_QWORD *)(*(_QWORD *)v44 + 8);
    if ((v63 & (v63 - 1)) != 0)
    {
      if (v80 >= v63)
        v80 %= v63;
    }
    else
    {
      v80 &= v63 - 1;
    }
    v79 = (unint64_t *)(*v62 + 8 * v80);
    goto LABEL_125;
  }
LABEL_126:
  ++*(_QWORD *)(a1 + 968);
LABEL_127:
  v81 = *(unsigned __int8 *)(a3 + 8);
  v82 = *(_QWORD *)a3;
  v83 = (*(_QWORD *)a3 + ((v81 - 0x61C8864680B583EBLL) << 6) - 0x3A3AA7D820E2E4E6) ^ (v81 - 0x61C8864680B583EBLL);
  v84 = *(unsigned __int8 *)(a3 + 9);
  v85 = (v84 | (v83 << 6)) + (v83 >> 2);
  v86 = (v85 - 0x61C8864680B583EBLL) ^ v83;
  v87 = *(_QWORD *)(a1 + 1128);
  if (v87)
  {
    v88 = (uint8x8_t)vcnt_s8((int8x8_t)v87);
    v88.i16[0] = vaddlv_u8(v88);
    if (v88.u32[0] > 1uLL)
    {
      v44 = (v85 - 0x61C8864680B583EBLL) ^ v83;
      if (v86 >= v87)
        v44 = v86 % v87;
    }
    else
    {
      v44 = v86 & (v87 - 1);
    }
    v89 = (uint64_t *)*((_QWORD *)*v7 + v44);
    if (v89)
    {
      v90 = *v89;
      if (*v89)
      {
        if (v88.u32[0] < 2uLL)
        {
          while (1)
          {
            v92 = *(_QWORD *)(v90 + 8);
            if (v92 == v86)
            {
              if (*(_QWORD *)(v90 + 16) == v82
                && __PAIR64__(*(unsigned __int8 *)(v90 + 25), *(unsigned __int8 *)(v90 + 24)) == __PAIR64__(v84, v81))
              {
                goto LABEL_211;
              }
            }
            else if ((v92 & (v87 - 1)) != v44)
            {
              goto LABEL_151;
            }
            v90 = *(_QWORD *)v90;
            if (!v90)
              goto LABEL_151;
          }
        }
        do
        {
          v91 = *(_QWORD *)(v90 + 8);
          if (v91 == v86)
          {
            if (*(_QWORD *)(v90 + 16) == v82
              && __PAIR64__(*(unsigned __int8 *)(v90 + 25), *(unsigned __int8 *)(v90 + 24)) == __PAIR64__(v84, v81))
            {
              goto LABEL_211;
            }
          }
          else
          {
            if (v91 >= v87)
              v91 %= v87;
            if (v91 != v44)
              break;
          }
          v90 = *(_QWORD *)v90;
        }
        while (v90);
      }
    }
  }
LABEL_151:
  v90 = (uint64_t)operator new(0x28uLL);
  *(_QWORD *)v90 = 0;
  *(_QWORD *)(v90 + 8) = v86;
  *(_OWORD *)(v90 + 16) = *(_OWORD *)a3;
  *(_QWORD *)(v90 + 32) = 0;
  v93 = (float)(unint64_t)(*(_QWORD *)(a1 + 1144) + 1);
  v94 = *(float *)(a1 + 1152);
  if (!v87 || (float)(v94 * (float)v87) < v93)
  {
    v95 = 1;
    if (v87 >= 3)
      v95 = (v87 & (v87 - 1)) != 0;
    v96 = v95 | (2 * v87);
    v97 = vcvtps_u32_f32(v93 / v94);
    if (v96 <= v97)
      v98 = v97;
    else
      v98 = v96;
    if (v98 == 1)
    {
      v98 = 2;
    }
    else if ((v98 & (v98 - 1)) != 0)
    {
      v98 = std::__next_prime(v98);
      v87 = *(_QWORD *)(a1 + 1128);
    }
    if (v98 <= v87)
    {
      if (v98 >= v87)
        goto LABEL_188;
      v110 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 1144) / *(float *)(a1 + 1152));
      if (v87 < 3 || (v111 = (uint8x8_t)vcnt_s8((int8x8_t)v87), v111.i16[0] = vaddlv_u8(v111), v111.u32[0] > 1uLL))
      {
        v110 = std::__next_prime(v110);
      }
      else
      {
        v112 = 1 << -(char)__clz(v110 - 1);
        if (v110 >= 2)
          v110 = v112;
      }
      if (v98 <= v110)
        v98 = v110;
      if (v98 >= v87)
      {
        v87 = *(_QWORD *)(a1 + 1128);
LABEL_188:
        if ((v87 & (v87 - 1)) != 0)
        {
          if (v86 >= v87)
            v44 = v86 % v87;
          else
            v44 = v86;
        }
        else
        {
          v44 = (v87 - 1) & v86;
        }
        goto LABEL_201;
      }
      if (!v98)
      {
        v156 = *v7;
        *v7 = 0;
        if (v156)
          operator delete(v156);
        v87 = 0;
        *(_QWORD *)(a1 + 1128) = 0;
        goto LABEL_188;
      }
    }
    if (v98 >> 61)
      goto LABEL_312;
    v99 = operator new(8 * v98);
    v100 = *v7;
    *v7 = v99;
    if (v100)
      operator delete(v100);
    v101 = 0;
    *(_QWORD *)(a1 + 1128) = v98;
    do
      *((_QWORD *)*v7 + v101++) = 0;
    while (v98 != v101);
    v102 = *(_QWORD **)(a1 + 1136);
    if (!v102)
    {
LABEL_187:
      v87 = v98;
      goto LABEL_188;
    }
    v103 = a1 + 1136;
    v104 = v102[1];
    v105 = v98 - 1;
    if ((v98 & (v98 - 1)) == 0)
    {
      v106 = v104 & v105;
      *((_QWORD *)*v7 + v106) = v103;
      for (i = (_QWORD *)*v102; *v102; i = (_QWORD *)*v102)
      {
        v108 = i[1] & v105;
        if (v108 == v106)
        {
          v102 = i;
        }
        else if (*((_QWORD *)*v7 + v108))
        {
          *v102 = *i;
          v109 = 8 * v108;
          *i = **(_QWORD **)((char *)*v7 + v109);
          **(_QWORD **)((char *)*v7 + v109) = i;
        }
        else
        {
          *((_QWORD *)*v7 + v108) = v102;
          v102 = i;
          v106 = v108;
        }
      }
      goto LABEL_187;
    }
    if (v104 >= v98)
      v104 %= v98;
    *((_QWORD *)*v7 + v104) = v103;
    v113 = (_QWORD *)*v102;
    if (!*v102)
      goto LABEL_187;
    while (1)
    {
      v115 = v113[1];
      if (v115 >= v98)
        v115 %= v98;
      if (v115 != v104)
      {
        if (!*((_QWORD *)*v7 + v115))
        {
          *((_QWORD *)*v7 + v115) = v102;
          goto LABEL_192;
        }
        *v102 = *v113;
        v114 = 8 * v115;
        *v113 = **(_QWORD **)((char *)*v7 + v114);
        **(_QWORD **)((char *)*v7 + v114) = v113;
        v113 = v102;
      }
      v115 = v104;
LABEL_192:
      v102 = v113;
      v113 = (_QWORD *)*v113;
      v104 = v115;
      if (!v113)
        goto LABEL_187;
    }
  }
LABEL_201:
  v116 = *v7;
  v117 = (uint64_t *)*((_QWORD *)*v7 + v44);
  if (v117)
  {
    *(_QWORD *)v90 = *v117;
LABEL_209:
    *v117 = v90;
    goto LABEL_210;
  }
  *(_QWORD *)v90 = *(_QWORD *)(a1 + 1136);
  *(_QWORD *)(a1 + 1136) = v90;
  v116[v44] = a1 + 1136;
  if (*(_QWORD *)v90)
  {
    v118 = *(_QWORD *)(*(_QWORD *)v90 + 8);
    if ((v87 & (v87 - 1)) != 0)
    {
      if (v118 >= v87)
        v118 %= v87;
    }
    else
    {
      v118 &= v87 - 1;
    }
    v117 = (uint64_t *)((char *)*v7 + 8 * v118);
    goto LABEL_209;
  }
LABEL_210:
  ++*(_QWORD *)(a1 + 1144);
LABEL_211:
  *(_QWORD *)(v90 + 32) = v9;
  v119 = *(_QWORD *)(a1 + 1168);
  if (v119)
  {
    v120 = (uint8x8_t)vcnt_s8((int8x8_t)v119);
    v120.i16[0] = vaddlv_u8(v120);
    if (v120.u32[0] > 1uLL)
    {
      v90 = v9;
      if (v9 >= v119)
        v90 = v9 % v119;
    }
    else
    {
      v90 = (v119 - 1) & v9;
    }
    v121 = *(_QWORD **)(*(_QWORD *)(a1 + 1160) + 8 * v90);
    if (v121)
    {
      v122 = (_QWORD *)*v121;
      if (*v121)
      {
        if (v120.u32[0] < 2uLL)
        {
          while (1)
          {
            v124 = v122[1];
            if (v124 == v9)
            {
              if (v122[2] == v9)
                goto LABEL_292;
            }
            else if ((v124 & (v119 - 1)) != v90)
            {
              goto LABEL_232;
            }
            v122 = (_QWORD *)*v122;
            if (!v122)
              goto LABEL_232;
          }
        }
        do
        {
          v123 = v122[1];
          if (v123 == v9)
          {
            if (v122[2] == v9)
              goto LABEL_292;
          }
          else
          {
            if (v123 >= v119)
              v123 %= v119;
            if (v123 != v90)
              break;
          }
          v122 = (_QWORD *)*v122;
        }
        while (v122);
      }
    }
  }
LABEL_232:
  v122 = operator new(0x28uLL);
  *v122 = 0;
  v122[1] = v9;
  v122[3] = 0;
  v122[4] = 0;
  v122[2] = v9;
  v125 = (float)(unint64_t)(*(_QWORD *)(a1 + 1184) + 1);
  v126 = *(float *)(a1 + 1192);
  if (!v119 || (float)(v126 * (float)v119) < v125)
  {
    v127 = 1;
    if (v119 >= 3)
      v127 = (v119 & (v119 - 1)) != 0;
    v128 = v127 | (2 * v119);
    v129 = vcvtps_u32_f32(v125 / v126);
    if (v128 <= v129)
      v130 = v129;
    else
      v130 = v128;
    if (v130 == 1)
    {
      v130 = 2;
    }
    else if ((v130 & (v130 - 1)) != 0)
    {
      v130 = std::__next_prime(v130);
      v119 = *(_QWORD *)(a1 + 1168);
    }
    if (v130 <= v119)
    {
      if (v130 >= v119)
        goto LABEL_269;
      v143 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 1184) / *(float *)(a1 + 1192));
      if (v119 < 3 || (v144 = (uint8x8_t)vcnt_s8((int8x8_t)v119), v144.i16[0] = vaddlv_u8(v144), v144.u32[0] > 1uLL))
      {
        v143 = std::__next_prime(v143);
      }
      else
      {
        v145 = 1 << -(char)__clz(v143 - 1);
        if (v143 >= 2)
          v143 = v145;
      }
      if (v130 <= v143)
        v130 = v143;
      if (v130 >= v119)
      {
        v119 = *(_QWORD *)(a1 + 1168);
LABEL_269:
        if ((v119 & (v119 - 1)) != 0)
        {
          if (v9 >= v119)
            v90 = v9 % v119;
          else
            v90 = v9;
        }
        else
        {
          v90 = (v119 - 1) & v9;
        }
        goto LABEL_282;
      }
      if (!v130)
      {
        v157 = *(void **)(a1 + 1160);
        *(_QWORD *)(a1 + 1160) = 0;
        if (v157)
          operator delete(v157);
        v119 = 0;
        *(_QWORD *)(a1 + 1168) = 0;
        goto LABEL_269;
      }
    }
    if (!(v130 >> 61))
    {
      v131 = operator new(8 * v130);
      v132 = *(void **)(a1 + 1160);
      *(_QWORD *)(a1 + 1160) = v131;
      if (v132)
        operator delete(v132);
      v133 = 0;
      *(_QWORD *)(a1 + 1168) = v130;
      do
        *(_QWORD *)(*(_QWORD *)(a1 + 1160) + 8 * v133++) = 0;
      while (v130 != v133);
      v134 = *(_QWORD **)(a1 + 1176);
      if (!v134)
        goto LABEL_268;
      v135 = a1 + 1176;
      v136 = v134[1];
      v137 = v130 - 1;
      if ((v130 & (v130 - 1)) == 0)
      {
        v138 = v136 & v137;
        *(_QWORD *)(*(_QWORD *)(a1 + 1160) + 8 * v138) = v135;
        for (j = (_QWORD *)*v134; *v134; j = (_QWORD *)*v134)
        {
          v140 = j[1] & v137;
          if (v140 == v138)
          {
            v134 = j;
          }
          else
          {
            v141 = *(_QWORD *)(a1 + 1160);
            if (*(_QWORD *)(v141 + 8 * v140))
            {
              *v134 = *j;
              v142 = 8 * v140;
              *j = **(_QWORD **)(*(_QWORD *)(a1 + 1160) + v142);
              **(_QWORD **)(*(_QWORD *)(a1 + 1160) + v142) = j;
            }
            else
            {
              *(_QWORD *)(v141 + 8 * v140) = v134;
              v134 = j;
              v138 = v140;
            }
          }
        }
LABEL_268:
        v119 = v130;
        goto LABEL_269;
      }
      if (v136 >= v130)
        v136 %= v130;
      *(_QWORD *)(*(_QWORD *)(a1 + 1160) + 8 * v136) = v135;
      v146 = (_QWORD *)*v134;
      if (!*v134)
        goto LABEL_268;
      while (1)
      {
        v148 = v146[1];
        if (v148 >= v130)
          v148 %= v130;
        if (v148 != v136)
        {
          v149 = *(_QWORD *)(a1 + 1160);
          if (!*(_QWORD *)(v149 + 8 * v148))
          {
            *(_QWORD *)(v149 + 8 * v148) = v134;
            goto LABEL_273;
          }
          *v134 = *v146;
          v147 = 8 * v148;
          *v146 = **(_QWORD **)(*(_QWORD *)(a1 + 1160) + v147);
          **(_QWORD **)(*(_QWORD *)(a1 + 1160) + v147) = v146;
          v146 = v134;
        }
        v148 = v136;
LABEL_273:
        v134 = v146;
        v146 = (_QWORD *)*v146;
        v136 = v148;
        if (!v146)
          goto LABEL_268;
      }
    }
LABEL_312:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
LABEL_282:
  v150 = *(_QWORD *)(a1 + 1160);
  v151 = *(_QWORD **)(v150 + 8 * v90);
  if (v151)
  {
    *v122 = *v151;
  }
  else
  {
    v152 = *(_QWORD *)(a1 + 1176);
    *v122 = v152;
    *(_QWORD *)(a1 + 1176) = v122;
    *(_QWORD *)(v150 + 8 * v90) = a1 + 1176;
    if (!v152)
      goto LABEL_291;
    v153 = *(_QWORD *)(v152 + 8);
    if ((v119 & (v119 - 1)) != 0)
    {
      if (v153 >= v119)
        v153 %= v119;
    }
    else
    {
      v153 &= v119 - 1;
    }
    v151 = (_QWORD *)(*(_QWORD *)(a1 + 1160) + 8 * v153);
  }
  *v151 = v122;
LABEL_291:
  ++*(_QWORD *)(a1 + 1184);
LABEL_292:
  v154 = *(_QWORD *)a3;
  *((_WORD *)v122 + 16) = *(_WORD *)(a3 + 8);
  v122[3] = v154;
  return v9;
}

int8x8_t *md::MaterialResourceStore::disconnect<geo::handle<md::MaterialIDStorage>>(int8x8_t *result, unint64_t a2)
{
  int8x8_t v2;
  uint8x8_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = result[8];
  if (v2)
  {
    v3 = (uint8x8_t)vcnt_s8(v2);
    v3.i16[0] = vaddlv_u8(v3);
    if (v3.u32[0] > 1uLL)
    {
      v4 = a2;
      if (*(_QWORD *)&v2 <= a2)
        v4 = a2 % *(_QWORD *)&v2;
    }
    else
    {
      v4 = (*(_QWORD *)&v2 - 1) & a2;
    }
    v5 = *(_QWORD **)(*(_QWORD *)&result[7] + 8 * v4);
    if (v5)
    {
      v6 = (_QWORD *)*v5;
      if (v6)
      {
        if (v3.u32[0] < 2uLL)
        {
          v7 = *(_QWORD *)&v2 - 1;
          while (1)
          {
            v9 = v6[1];
            if (v9 == a2)
            {
              if (v6[2] == a2)
                goto LABEL_22;
            }
            else if ((v9 & v7) != v4)
            {
              return result;
            }
            v6 = (_QWORD *)*v6;
            if (!v6)
              return result;
          }
        }
        do
        {
          v8 = v6[1];
          if (v8 == a2)
          {
            if (v6[2] == a2)
            {
LABEL_22:
              v10 = v6[4];
              if (!v10 || (v11 = v10 - 1, (v6[4] = v11) == 0))
                v6[3] = 0;
              return result;
            }
          }
          else
          {
            if (v8 >= *(_QWORD *)&v2)
              v8 %= *(_QWORD *)&v2;
            if (v8 != v4)
              return result;
          }
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
    }
  }
  return result;
}

int8x8_t *md::MaterialResourceStore::disconnect<geo::handle<md::ls::ColorData>>(int8x8_t *result, unint64_t a2)
{
  int8x8_t v2;
  uint8x8_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = result[119];
  if (v2)
  {
    v3 = (uint8x8_t)vcnt_s8(v2);
    v3.i16[0] = vaddlv_u8(v3);
    if (v3.u32[0] > 1uLL)
    {
      v4 = a2;
      if (*(_QWORD *)&v2 <= a2)
        v4 = a2 % *(_QWORD *)&v2;
    }
    else
    {
      v4 = (*(_QWORD *)&v2 - 1) & a2;
    }
    v5 = *(_QWORD **)(*(_QWORD *)&result[118] + 8 * v4);
    if (v5)
    {
      v6 = (_QWORD *)*v5;
      if (v6)
      {
        if (v3.u32[0] < 2uLL)
        {
          v7 = *(_QWORD *)&v2 - 1;
          while (1)
          {
            v9 = v6[1];
            if (v9 == a2)
            {
              if (v6[2] == a2)
                goto LABEL_22;
            }
            else if ((v9 & v7) != v4)
            {
              return result;
            }
            v6 = (_QWORD *)*v6;
            if (!v6)
              return result;
          }
        }
        do
        {
          v8 = v6[1];
          if (v8 == a2)
          {
            if (v6[2] == a2)
            {
LABEL_22:
              v10 = v6[4];
              if (!v10 || (v11 = v10 - 1, (v6[4] = v11) == 0))
                v6[3] = 0;
              return result;
            }
          }
          else
          {
            if (v8 >= *(_QWORD *)&v2)
              v8 %= *(_QWORD *)&v2;
            if (v8 != v4)
              return result;
          }
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
    }
  }
  return result;
}

void md::MaterialResourceStore::reset(md::MaterialResourceStore *this)
{
  unint64_t *v2;
  unint64_t *v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  int8x8_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint8x8_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t **v28;
  int8x8_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint8x8_t v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t **v39;
  unint64_t *v40;
  unint64_t *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  unint64_t *v47;
  unint64_t *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  int8x8_t v54;
  unint64_t *v55;
  unint64_t v56;
  uint8x8_t v57;
  unint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t **v64;
  int8x8_t v65;
  unint64_t *v66;
  unint64_t v67;
  uint8x8_t v68;
  unint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t **v75;
  unint64_t *v76;
  unint64_t *v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  BOOL v82;
  uint64_t v83;
  unint64_t *v84;
  unint64_t *v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  BOOL v90;
  uint64_t v91;
  int8x8_t v92;
  unint64_t *v93;
  unint64_t v94;
  uint8x8_t v95;
  unint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t **v102;
  int8x8_t v103;
  unint64_t *v104;
  unint64_t v105;
  uint8x8_t v106;
  unint64_t v107;
  _QWORD *v108;
  _QWORD *v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t **v113;
  unint64_t *v114;
  unint64_t *v115;
  unint64_t *v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  BOOL v120;
  uint64_t v121;
  unint64_t *v122;
  unint64_t *v123;
  unint64_t *v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  BOOL v128;
  uint64_t v129;
  int8x8_t v130;
  unint64_t *v131;
  unint64_t v132;
  uint8x8_t v133;
  unint64_t v134;
  _QWORD *v135;
  _QWORD *v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t **v140;
  int8x8_t v141;
  unint64_t *v142;
  unint64_t v143;
  uint8x8_t v144;
  unint64_t v145;
  _QWORD *v146;
  _QWORD *v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t **v151;
  unint64_t *v152;
  unint64_t *v153;
  uint64_t v154;
  unint64_t *v155;
  unint64_t *v156;
  uint64_t v157;
  void *__p[3];

  v155 = 0;
  v156 = 0;
  v157 = 0;
  v152 = 0;
  v153 = 0;
  v154 = 0;
  md::accumulate<geo::handle<md::MaterialIDStorage>>((_QWORD *)this + 2, (uint64_t)&v155);
  md::accumulate<geo::handle<md::MaterialIDStorage>>((_QWORD *)this + 7, (uint64_t)&v152);
  v2 = v155;
  v3 = v156;
  if (v155 != v156)
  {
    v4 = v155;
    do
    {
      v5 = *v4;
      v6 = *((_QWORD *)this + 15);
      if (v5 < (*((_QWORD *)this + 16) - v6) >> 3)
      {
        v7 = *(_QWORD *)(v6 + 8 * v5);
        v8 = v7 && HIDWORD(*v4) == HIDWORD(v7);
        if (v8 && *((_QWORD *)this + 18) + 8 * v7 != *((_QWORD *)this + 19))
        {
          v9 = *(_QWORD *)(*((_QWORD *)this + 21) + 8 * v7);
          __p[0] = (void *)(v9 | ((unint64_t)*(unsigned int *)(v6 + 8 * v9 + 4) << 32));
          geo::packed_array<md::MaterialIDStorage,geo::handle<md::MaterialIDStorage>>::erase((uint64_t)this + 96, __p);
          std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,std::unique_ptr<std::shared_ptr<gms::Material<ggl::Texture2D>>>>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,std::unique_ptr<std::shared_ptr<gms::Material<ggl::Texture2D>>>>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,std::unique_ptr<std::shared_ptr<gms::Material<ggl::Texture2D>>>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,std::unique_ptr<std::shared_ptr<gms::Material<ggl::Texture2D>>>>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 24, *v4);
        }
      }
      ++v4;
    }
    while (v4 != v3);
  }
  v10 = v152;
  v11 = v153;
  if (v152 != v153)
  {
    v12 = v152;
    do
    {
      v13 = *v12;
      v14 = *((_QWORD *)this + 15);
      if (v13 < (*((_QWORD *)this + 16) - v14) >> 3)
      {
        v15 = *(_QWORD *)(v14 + 8 * v13);
        v16 = v15 && HIDWORD(*v12) == HIDWORD(v15);
        if (v16 && *((_QWORD *)this + 18) + 8 * v15 != *((_QWORD *)this + 19))
        {
          v17 = *(_QWORD *)(*((_QWORD *)this + 21) + 8 * v15);
          __p[0] = (void *)(v17 | ((unint64_t)*(unsigned int *)(v14 + 8 * v17 + 4) << 32));
          geo::packed_array<md::MaterialIDStorage,geo::handle<md::MaterialIDStorage>>::erase((uint64_t)this + 96, __p);
          std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,std::unique_ptr<std::shared_ptr<gms::Material<ggl::Texture2D>>>>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,std::unique_ptr<std::shared_ptr<gms::Material<ggl::Texture2D>>>>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,std::unique_ptr<std::shared_ptr<gms::Material<ggl::Texture2D>>>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,std::unique_ptr<std::shared_ptr<gms::Material<ggl::Texture2D>>>>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 24, *v12);
        }
      }
      ++v12;
    }
    while (v12 != v11);
  }
  if (v2 != v3)
  {
    v18 = *(int8x8_t *)((char *)this + 280);
    if (v18)
    {
      v19 = v2;
LABEL_26:
      v20 = *v19;
      v21 = (uint8x8_t)vcnt_s8(v18);
      v21.i16[0] = vaddlv_u8(v21);
      if (v21.u32[0] > 1uLL)
      {
        v22 = *v19;
        if (v20 >= *(_QWORD *)&v18)
          v22 = v20 % *(_QWORD *)&v18;
      }
      else
      {
        v22 = (*(_QWORD *)&v18 - 1) & v20;
      }
      v23 = *(_QWORD **)(*((_QWORD *)this + 34) + 8 * v22);
      if (v23)
      {
        v24 = (_QWORD *)*v23;
        if (*v23)
        {
          if (v21.u32[0] < 2uLL)
          {
            v25 = *(_QWORD *)&v18 - 1;
            while (1)
            {
              v27 = v24[1];
              if (v27 == v20)
              {
                if (v24[2] == v20)
                  goto LABEL_46;
              }
              else if ((v27 & v25) != v22)
              {
                goto LABEL_51;
              }
              v24 = (_QWORD *)*v24;
              if (!v24)
                goto LABEL_51;
            }
          }
          do
          {
            v26 = v24[1];
            if (v26 == v20)
            {
              if (v24[2] == v20)
              {
LABEL_46:
                v28 = std::__hash_table<std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,std::__unordered_map_hasher<md::MaterialKey,std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,md::MaterialKeyHasher,std::equal_to<md::MaterialKey>,true>,std::__unordered_map_equal<md::MaterialKey,std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,std::equal_to<md::MaterialKey>,md::MaterialKeyHasher,true>,std::allocator<std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>>>::find<md::MaterialKey>((_QWORD *)this + 29, v24 + 3);
                if (v28)
                {
                  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, (_QWORD *)this + 29, v28);
                  if (__p[0])
                    operator delete(__p[0]);
                  v20 = v24[2];
                }
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 34, v20);
                break;
              }
            }
            else
            {
              if (v26 >= *(_QWORD *)&v18)
                v26 %= *(_QWORD *)&v18;
              if (v26 != v22)
                break;
            }
            v24 = (_QWORD *)*v24;
          }
          while (v24);
        }
      }
LABEL_51:
      while (++v19 != v3)
      {
        v18 = *(int8x8_t *)((char *)this + 280);
        if (v18)
          goto LABEL_26;
      }
    }
  }
  if (v10 != v11)
  {
    v29 = *(int8x8_t *)((char *)this + 280);
    if (v29)
    {
      v30 = v10;
LABEL_57:
      v31 = *v30;
      v32 = (uint8x8_t)vcnt_s8(v29);
      v32.i16[0] = vaddlv_u8(v32);
      if (v32.u32[0] > 1uLL)
      {
        v33 = *v30;
        if (v31 >= *(_QWORD *)&v29)
          v33 = v31 % *(_QWORD *)&v29;
      }
      else
      {
        v33 = (*(_QWORD *)&v29 - 1) & v31;
      }
      v34 = *(_QWORD **)(*((_QWORD *)this + 34) + 8 * v33);
      if (v34)
      {
        v35 = (_QWORD *)*v34;
        if (*v34)
        {
          if (v32.u32[0] < 2uLL)
          {
            v36 = *(_QWORD *)&v29 - 1;
            while (1)
            {
              v38 = v35[1];
              if (v38 == v31)
              {
                if (v35[2] == v31)
                  goto LABEL_77;
              }
              else if ((v38 & v36) != v33)
              {
                goto LABEL_82;
              }
              v35 = (_QWORD *)*v35;
              if (!v35)
                goto LABEL_82;
            }
          }
          do
          {
            v37 = v35[1];
            if (v37 == v31)
            {
              if (v35[2] == v31)
              {
LABEL_77:
                v39 = std::__hash_table<std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,std::__unordered_map_hasher<md::MaterialKey,std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,md::MaterialKeyHasher,std::equal_to<md::MaterialKey>,true>,std::__unordered_map_equal<md::MaterialKey,std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,std::equal_to<md::MaterialKey>,md::MaterialKeyHasher,true>,std::allocator<std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>>>::find<md::MaterialKey>((_QWORD *)this + 29, v35 + 3);
                if (v39)
                {
                  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, (_QWORD *)this + 29, v39);
                  if (__p[0])
                    operator delete(__p[0]);
                  v31 = v35[2];
                }
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 34, v31);
                break;
              }
            }
            else
            {
              if (v37 >= *(_QWORD *)&v29)
                v37 %= *(_QWORD *)&v29;
              if (v37 != v33)
                break;
            }
            v35 = (_QWORD *)*v35;
          }
          while (v35);
        }
      }
LABEL_82:
      while (++v30 != v11)
      {
        v29 = *(int8x8_t *)((char *)this + 280);
        if (v29)
          goto LABEL_57;
      }
    }
  }
  if (v10)
    operator delete(v10);
  if (v2)
    operator delete(v2);
  v155 = 0;
  v156 = 0;
  v157 = 0;
  v152 = 0;
  v153 = 0;
  v154 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 39, (uint64_t)&v155);
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 44, (uint64_t)&v152);
  v40 = v155;
  v41 = v156;
  if (v155 != v156)
  {
    v42 = v155;
    do
    {
      v43 = *v42;
      v44 = *((_QWORD *)this + 52);
      if (v43 < (*((_QWORD *)this + 53) - v44) >> 3)
      {
        v45 = *(_QWORD *)(v44 + 8 * v43);
        v46 = v45 && HIDWORD(*v42) == HIDWORD(v45);
        if (v46 && *((_QWORD *)this + 55) + 3 * v45 != *((_QWORD *)this + 56))
        {
          __p[0] = (void *)(*(_QWORD *)(*((_QWORD *)this + 58) + 8 * v45) | ((unint64_t)*(unsigned int *)(v44 + 8 * *(_QWORD *)(*((_QWORD *)this + 58) + 8 * v45) + 4) << 32));
          geo::packed_array<md::ls::MaterialVisibilityOptions,geo::handle<md::ls::MaterialVisibilityOptions>>::erase((uint64_t)this + 392, __p);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ls::MaterialVisibilityOptions>,std::unique_ptr<md::ls::MaterialVisibilityOptions>>,std::__unordered_map_hasher<geo::handle<md::ls::MaterialVisibilityOptions>,std::__hash_value_type<geo::handle<md::ls::MaterialVisibilityOptions>,std::unique_ptr<md::ls::MaterialVisibilityOptions>>,std::hash<geo::handle<md::ls::MaterialVisibilityOptions>>,std::equal_to<geo::handle<md::ls::MaterialVisibilityOptions>>,true>,std::__unordered_map_equal<geo::handle<md::ls::MaterialVisibilityOptions>,std::__hash_value_type<geo::handle<md::ls::MaterialVisibilityOptions>,std::unique_ptr<md::ls::MaterialVisibilityOptions>>,std::equal_to<geo::handle<md::ls::MaterialVisibilityOptions>>,std::hash<geo::handle<md::ls::MaterialVisibilityOptions>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ls::MaterialVisibilityOptions>,std::unique_ptr<md::ls::MaterialVisibilityOptions>>>>::__erase_unique<geo::handle<md::ls::MaterialVisibilityOptions>>((uint64_t *)this + 61, *v42);
        }
      }
      ++v42;
    }
    while (v42 != v41);
  }
  v47 = v152;
  v48 = v153;
  if (v152 != v153)
  {
    v49 = v152;
    do
    {
      v50 = *v49;
      v51 = *((_QWORD *)this + 52);
      if (v50 < (*((_QWORD *)this + 53) - v51) >> 3)
      {
        v52 = *(_QWORD *)(v51 + 8 * v50);
        v53 = v52 && HIDWORD(*v49) == HIDWORD(v52);
        if (v53 && *((_QWORD *)this + 55) + 3 * v52 != *((_QWORD *)this + 56))
        {
          __p[0] = (void *)(*(_QWORD *)(*((_QWORD *)this + 58) + 8 * v52) | ((unint64_t)*(unsigned int *)(v51 + 8 * *(_QWORD *)(*((_QWORD *)this + 58) + 8 * v52) + 4) << 32));
          geo::packed_array<md::ls::MaterialVisibilityOptions,geo::handle<md::ls::MaterialVisibilityOptions>>::erase((uint64_t)this + 392, __p);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ls::MaterialVisibilityOptions>,std::unique_ptr<md::ls::MaterialVisibilityOptions>>,std::__unordered_map_hasher<geo::handle<md::ls::MaterialVisibilityOptions>,std::__hash_value_type<geo::handle<md::ls::MaterialVisibilityOptions>,std::unique_ptr<md::ls::MaterialVisibilityOptions>>,std::hash<geo::handle<md::ls::MaterialVisibilityOptions>>,std::equal_to<geo::handle<md::ls::MaterialVisibilityOptions>>,true>,std::__unordered_map_equal<geo::handle<md::ls::MaterialVisibilityOptions>,std::__hash_value_type<geo::handle<md::ls::MaterialVisibilityOptions>,std::unique_ptr<md::ls::MaterialVisibilityOptions>>,std::equal_to<geo::handle<md::ls::MaterialVisibilityOptions>>,std::hash<geo::handle<md::ls::MaterialVisibilityOptions>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ls::MaterialVisibilityOptions>,std::unique_ptr<md::ls::MaterialVisibilityOptions>>>>::__erase_unique<geo::handle<md::ls::MaterialVisibilityOptions>>((uint64_t *)this + 61, *v49);
        }
      }
      ++v49;
    }
    while (v49 != v48);
  }
  if (v40 != v41)
  {
    v54 = *(int8x8_t *)((char *)this + 576);
    if (v54)
    {
      v55 = v40;
LABEL_114:
      v56 = *v55;
      v57 = (uint8x8_t)vcnt_s8(v54);
      v57.i16[0] = vaddlv_u8(v57);
      if (v57.u32[0] > 1uLL)
      {
        v58 = *v55;
        if (v56 >= *(_QWORD *)&v54)
          v58 = v56 % *(_QWORD *)&v54;
      }
      else
      {
        v58 = (*(_QWORD *)&v54 - 1) & v56;
      }
      v59 = *(_QWORD **)(*((_QWORD *)this + 71) + 8 * v58);
      if (v59)
      {
        v60 = (_QWORD *)*v59;
        if (*v59)
        {
          if (v57.u32[0] < 2uLL)
          {
            v61 = *(_QWORD *)&v54 - 1;
            while (1)
            {
              v63 = v60[1];
              if (v63 == v56)
              {
                if (v60[2] == v56)
                  goto LABEL_134;
              }
              else if ((v63 & v61) != v58)
              {
                goto LABEL_139;
              }
              v60 = (_QWORD *)*v60;
              if (!v60)
                goto LABEL_139;
            }
          }
          do
          {
            v62 = v60[1];
            if (v62 == v56)
            {
              if (v60[2] == v56)
              {
LABEL_134:
                v64 = std::__hash_table<std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,std::__unordered_map_hasher<md::MaterialKey,std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,md::MaterialKeyHasher,std::equal_to<md::MaterialKey>,true>,std::__unordered_map_equal<md::MaterialKey,std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,std::equal_to<md::MaterialKey>,md::MaterialKeyHasher,true>,std::allocator<std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>>>::find<md::MaterialKey>((_QWORD *)this + 66, v60 + 3);
                if (v64)
                {
                  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, (_QWORD *)this + 66, v64);
                  if (__p[0])
                    operator delete(__p[0]);
                  v56 = v60[2];
                }
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 71, v56);
                break;
              }
            }
            else
            {
              if (v62 >= *(_QWORD *)&v54)
                v62 %= *(_QWORD *)&v54;
              if (v62 != v58)
                break;
            }
            v60 = (_QWORD *)*v60;
          }
          while (v60);
        }
      }
LABEL_139:
      while (++v55 != v41)
      {
        v54 = *(int8x8_t *)((char *)this + 576);
        if (v54)
          goto LABEL_114;
      }
    }
  }
  if (v47 != v48)
  {
    v65 = *(int8x8_t *)((char *)this + 576);
    if (v65)
    {
      v66 = v47;
LABEL_145:
      v67 = *v66;
      v68 = (uint8x8_t)vcnt_s8(v65);
      v68.i16[0] = vaddlv_u8(v68);
      if (v68.u32[0] > 1uLL)
      {
        v69 = *v66;
        if (v67 >= *(_QWORD *)&v65)
          v69 = v67 % *(_QWORD *)&v65;
      }
      else
      {
        v69 = (*(_QWORD *)&v65 - 1) & v67;
      }
      v70 = *(_QWORD **)(*((_QWORD *)this + 71) + 8 * v69);
      if (v70)
      {
        v71 = (_QWORD *)*v70;
        if (*v70)
        {
          if (v68.u32[0] < 2uLL)
          {
            v72 = *(_QWORD *)&v65 - 1;
            while (1)
            {
              v74 = v71[1];
              if (v74 == v67)
              {
                if (v71[2] == v67)
                  goto LABEL_165;
              }
              else if ((v74 & v72) != v69)
              {
                goto LABEL_170;
              }
              v71 = (_QWORD *)*v71;
              if (!v71)
                goto LABEL_170;
            }
          }
          do
          {
            v73 = v71[1];
            if (v73 == v67)
            {
              if (v71[2] == v67)
              {
LABEL_165:
                v75 = std::__hash_table<std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,std::__unordered_map_hasher<md::MaterialKey,std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,md::MaterialKeyHasher,std::equal_to<md::MaterialKey>,true>,std::__unordered_map_equal<md::MaterialKey,std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,std::equal_to<md::MaterialKey>,md::MaterialKeyHasher,true>,std::allocator<std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>>>::find<md::MaterialKey>((_QWORD *)this + 66, v71 + 3);
                if (v75)
                {
                  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, (_QWORD *)this + 66, v75);
                  if (__p[0])
                    operator delete(__p[0]);
                  v67 = v71[2];
                }
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 71, v67);
                break;
              }
            }
            else
            {
              if (v73 >= *(_QWORD *)&v65)
                v73 %= *(_QWORD *)&v65;
              if (v73 != v69)
                break;
            }
            v71 = (_QWORD *)*v71;
          }
          while (v71);
        }
      }
LABEL_170:
      while (++v66 != v48)
      {
        v65 = *(int8x8_t *)((char *)this + 576);
        if (v65)
          goto LABEL_145;
      }
    }
  }
  if (v47)
    operator delete(v47);
  if (v40)
    operator delete(v40);
  v155 = 0;
  v156 = 0;
  v157 = 0;
  v152 = 0;
  v153 = 0;
  v154 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 76, (uint64_t)&v155);
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 81, (uint64_t)&v152);
  v76 = v155;
  v77 = v156;
  if (v155 != v156)
  {
    v78 = v155;
    do
    {
      v79 = *v78;
      v80 = *((_QWORD *)this + 89);
      if (v79 < (*((_QWORD *)this + 90) - v80) >> 3)
      {
        v81 = *(_QWORD *)(v80 + 8 * v79);
        v82 = v81 && HIDWORD(*v78) == HIDWORD(v81);
        if (v82 && *((_QWORD *)this + 92) + 8 * v81 != *((_QWORD *)this + 93))
        {
          v83 = *(_QWORD *)(*((_QWORD *)this + 95) + 8 * v81);
          __p[0] = (void *)(v83 | ((unint64_t)*(unsigned int *)(v80 + 8 * v83 + 4) << 32));
          geo::packed_array<md::ls::ZIndex,geo::handle<md::ls::ZIndex>>::erase((uint64_t)this + 688, __p);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ls::ZIndex>,std::unique_ptr<md::ls::ZIndex>>,std::__unordered_map_hasher<geo::handle<md::ls::ZIndex>,std::__hash_value_type<geo::handle<md::ls::ZIndex>,std::unique_ptr<md::ls::ZIndex>>,std::hash<geo::handle<md::ls::ZIndex>>,std::equal_to<geo::handle<md::ls::ZIndex>>,true>,std::__unordered_map_equal<geo::handle<md::ls::ZIndex>,std::__hash_value_type<geo::handle<md::ls::ZIndex>,std::unique_ptr<md::ls::ZIndex>>,std::equal_to<geo::handle<md::ls::ZIndex>>,std::hash<geo::handle<md::ls::ZIndex>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ls::ZIndex>,std::unique_ptr<md::ls::ZIndex>>>>::__erase_unique<geo::handle<md::ls::ZIndex>>((uint64_t *)this + 98, *v78);
        }
      }
      ++v78;
    }
    while (v78 != v77);
  }
  v84 = v152;
  v85 = v153;
  if (v152 != v153)
  {
    v86 = v152;
    do
    {
      v87 = *v86;
      v88 = *((_QWORD *)this + 89);
      if (v87 < (*((_QWORD *)this + 90) - v88) >> 3)
      {
        v89 = *(_QWORD *)(v88 + 8 * v87);
        v90 = v89 && HIDWORD(*v86) == HIDWORD(v89);
        if (v90 && *((_QWORD *)this + 92) + 8 * v89 != *((_QWORD *)this + 93))
        {
          v91 = *(_QWORD *)(*((_QWORD *)this + 95) + 8 * v89);
          __p[0] = (void *)(v91 | ((unint64_t)*(unsigned int *)(v88 + 8 * v91 + 4) << 32));
          geo::packed_array<md::ls::ZIndex,geo::handle<md::ls::ZIndex>>::erase((uint64_t)this + 688, __p);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ls::ZIndex>,std::unique_ptr<md::ls::ZIndex>>,std::__unordered_map_hasher<geo::handle<md::ls::ZIndex>,std::__hash_value_type<geo::handle<md::ls::ZIndex>,std::unique_ptr<md::ls::ZIndex>>,std::hash<geo::handle<md::ls::ZIndex>>,std::equal_to<geo::handle<md::ls::ZIndex>>,true>,std::__unordered_map_equal<geo::handle<md::ls::ZIndex>,std::__hash_value_type<geo::handle<md::ls::ZIndex>,std::unique_ptr<md::ls::ZIndex>>,std::equal_to<geo::handle<md::ls::ZIndex>>,std::hash<geo::handle<md::ls::ZIndex>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ls::ZIndex>,std::unique_ptr<md::ls::ZIndex>>>>::__erase_unique<geo::handle<md::ls::ZIndex>>((uint64_t *)this + 98, *v86);
        }
      }
      ++v86;
    }
    while (v86 != v85);
  }
  if (v76 != v77)
  {
    v92 = *(int8x8_t *)((char *)this + 872);
    if (v92)
    {
      v93 = v76;
LABEL_202:
      v94 = *v93;
      v95 = (uint8x8_t)vcnt_s8(v92);
      v95.i16[0] = vaddlv_u8(v95);
      if (v95.u32[0] > 1uLL)
      {
        v96 = *v93;
        if (v94 >= *(_QWORD *)&v92)
          v96 = v94 % *(_QWORD *)&v92;
      }
      else
      {
        v96 = (*(_QWORD *)&v92 - 1) & v94;
      }
      v97 = *(_QWORD **)(*((_QWORD *)this + 108) + 8 * v96);
      if (v97)
      {
        v98 = (_QWORD *)*v97;
        if (*v97)
        {
          if (v95.u32[0] < 2uLL)
          {
            v99 = *(_QWORD *)&v92 - 1;
            while (1)
            {
              v101 = v98[1];
              if (v101 == v94)
              {
                if (v98[2] == v94)
                  goto LABEL_222;
              }
              else if ((v101 & v99) != v96)
              {
                goto LABEL_227;
              }
              v98 = (_QWORD *)*v98;
              if (!v98)
                goto LABEL_227;
            }
          }
          do
          {
            v100 = v98[1];
            if (v100 == v94)
            {
              if (v98[2] == v94)
              {
LABEL_222:
                v102 = std::__hash_table<std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,std::__unordered_map_hasher<md::MaterialKey,std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,md::MaterialKeyHasher,std::equal_to<md::MaterialKey>,true>,std::__unordered_map_equal<md::MaterialKey,std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,std::equal_to<md::MaterialKey>,md::MaterialKeyHasher,true>,std::allocator<std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>>>::find<md::MaterialKey>((_QWORD *)this + 103, v98 + 3);
                if (v102)
                {
                  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, (_QWORD *)this + 103, v102);
                  if (__p[0])
                    operator delete(__p[0]);
                  v94 = v98[2];
                }
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 108, v94);
                break;
              }
            }
            else
            {
              if (v100 >= *(_QWORD *)&v92)
                v100 %= *(_QWORD *)&v92;
              if (v100 != v96)
                break;
            }
            v98 = (_QWORD *)*v98;
          }
          while (v98);
        }
      }
LABEL_227:
      while (++v93 != v77)
      {
        v92 = *(int8x8_t *)((char *)this + 872);
        if (v92)
          goto LABEL_202;
      }
    }
  }
  if (v84 != v85)
  {
    v103 = *(int8x8_t *)((char *)this + 872);
    if (v103)
    {
      v104 = v84;
LABEL_233:
      v105 = *v104;
      v106 = (uint8x8_t)vcnt_s8(v103);
      v106.i16[0] = vaddlv_u8(v106);
      if (v106.u32[0] > 1uLL)
      {
        v107 = *v104;
        if (v105 >= *(_QWORD *)&v103)
          v107 = v105 % *(_QWORD *)&v103;
      }
      else
      {
        v107 = (*(_QWORD *)&v103 - 1) & v105;
      }
      v108 = *(_QWORD **)(*((_QWORD *)this + 108) + 8 * v107);
      if (v108)
      {
        v109 = (_QWORD *)*v108;
        if (*v108)
        {
          if (v106.u32[0] < 2uLL)
          {
            v110 = *(_QWORD *)&v103 - 1;
            while (1)
            {
              v112 = v109[1];
              if (v112 == v105)
              {
                if (v109[2] == v105)
                  goto LABEL_253;
              }
              else if ((v112 & v110) != v107)
              {
                goto LABEL_258;
              }
              v109 = (_QWORD *)*v109;
              if (!v109)
                goto LABEL_258;
            }
          }
          do
          {
            v111 = v109[1];
            if (v111 == v105)
            {
              if (v109[2] == v105)
              {
LABEL_253:
                v113 = std::__hash_table<std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,std::__unordered_map_hasher<md::MaterialKey,std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,md::MaterialKeyHasher,std::equal_to<md::MaterialKey>,true>,std::__unordered_map_equal<md::MaterialKey,std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,std::equal_to<md::MaterialKey>,md::MaterialKeyHasher,true>,std::allocator<std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>>>::find<md::MaterialKey>((_QWORD *)this + 103, v109 + 3);
                if (v113)
                {
                  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, (_QWORD *)this + 103, v113);
                  if (__p[0])
                    operator delete(__p[0]);
                  v105 = v109[2];
                }
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 108, v105);
                break;
              }
            }
            else
            {
              if (v111 >= *(_QWORD *)&v103)
                v111 %= *(_QWORD *)&v103;
              if (v111 != v107)
                break;
            }
            v109 = (_QWORD *)*v109;
          }
          while (v109);
        }
      }
LABEL_258:
      while (++v104 != v85)
      {
        v103 = *(int8x8_t *)((char *)this + 872);
        if (v103)
          goto LABEL_233;
      }
    }
  }
  if (v84)
    operator delete(v84);
  if (v76)
    operator delete(v76);
  v155 = 0;
  v156 = 0;
  v157 = 0;
  v152 = 0;
  v153 = 0;
  v154 = 0;
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 113, (uint64_t)&v155);
  md::accumulate<geo::handle<md::ls::ColorData>>((_QWORD *)this + 118, (uint64_t)&v152);
  v114 = v155;
  v115 = v156;
  if (v155 != v156)
  {
    v116 = v155;
    do
    {
      v117 = *v116;
      v118 = *((_QWORD *)this + 126);
      if (v117 < (*((_QWORD *)this + 127) - v118) >> 3)
      {
        v119 = *(_QWORD *)(v118 + 8 * v117);
        v120 = v119 && HIDWORD(*v116) == HIDWORD(v119);
        if (v120 && *((_QWORD *)this + 129) + 20 * v119 != *((_QWORD *)this + 130))
        {
          v121 = *(_QWORD *)(*((_QWORD *)this + 132) + 8 * v119);
          __p[0] = (void *)(v121 | ((unint64_t)*(unsigned int *)(v118 + 8 * v121 + 4) << 32));
          geo::packed_array<md::ls::ColorData,geo::handle<md::ls::ColorData>>::erase((uint64_t)this + 984, __p);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ls::ColorData>,std::unique_ptr<md::ls::ColorData>>,std::__unordered_map_hasher<geo::handle<md::ls::ColorData>,std::__hash_value_type<geo::handle<md::ls::ColorData>,std::unique_ptr<md::ls::ColorData>>,std::hash<geo::handle<md::ls::ColorData>>,std::equal_to<geo::handle<md::ls::ColorData>>,true>,std::__unordered_map_equal<geo::handle<md::ls::ColorData>,std::__hash_value_type<geo::handle<md::ls::ColorData>,std::unique_ptr<md::ls::ColorData>>,std::equal_to<geo::handle<md::ls::ColorData>>,std::hash<geo::handle<md::ls::ColorData>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ls::ColorData>,std::unique_ptr<md::ls::ColorData>>>>::__erase_unique<geo::handle<md::ls::ColorData>>((uint64_t *)this + 135, *v116);
        }
      }
      ++v116;
    }
    while (v116 != v115);
  }
  v122 = v152;
  v123 = v153;
  if (v152 != v153)
  {
    v124 = v152;
    do
    {
      v125 = *v124;
      v126 = *((_QWORD *)this + 126);
      if (v125 < (*((_QWORD *)this + 127) - v126) >> 3)
      {
        v127 = *(_QWORD *)(v126 + 8 * v125);
        v128 = v127 && HIDWORD(*v124) == HIDWORD(v127);
        if (v128 && *((_QWORD *)this + 129) + 20 * v127 != *((_QWORD *)this + 130))
        {
          v129 = *(_QWORD *)(*((_QWORD *)this + 132) + 8 * v127);
          __p[0] = (void *)(v129 | ((unint64_t)*(unsigned int *)(v126 + 8 * v129 + 4) << 32));
          geo::packed_array<md::ls::ColorData,geo::handle<md::ls::ColorData>>::erase((uint64_t)this + 984, __p);
          std::__hash_table<std::__hash_value_type<geo::handle<md::ls::ColorData>,std::unique_ptr<md::ls::ColorData>>,std::__unordered_map_hasher<geo::handle<md::ls::ColorData>,std::__hash_value_type<geo::handle<md::ls::ColorData>,std::unique_ptr<md::ls::ColorData>>,std::hash<geo::handle<md::ls::ColorData>>,std::equal_to<geo::handle<md::ls::ColorData>>,true>,std::__unordered_map_equal<geo::handle<md::ls::ColorData>,std::__hash_value_type<geo::handle<md::ls::ColorData>,std::unique_ptr<md::ls::ColorData>>,std::equal_to<geo::handle<md::ls::ColorData>>,std::hash<geo::handle<md::ls::ColorData>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ls::ColorData>,std::unique_ptr<md::ls::ColorData>>>>::__erase_unique<geo::handle<md::ls::ColorData>>((uint64_t *)this + 135, *v124);
        }
      }
      ++v124;
    }
    while (v124 != v123);
  }
  if (v114 != v115)
  {
    v130 = *(int8x8_t *)((char *)this + 1168);
    if (v130)
    {
      v131 = v114;
LABEL_290:
      v132 = *v131;
      v133 = (uint8x8_t)vcnt_s8(v130);
      v133.i16[0] = vaddlv_u8(v133);
      if (v133.u32[0] > 1uLL)
      {
        v134 = *v131;
        if (v132 >= *(_QWORD *)&v130)
          v134 = v132 % *(_QWORD *)&v130;
      }
      else
      {
        v134 = (*(_QWORD *)&v130 - 1) & v132;
      }
      v135 = *(_QWORD **)(*((_QWORD *)this + 145) + 8 * v134);
      if (v135)
      {
        v136 = (_QWORD *)*v135;
        if (*v135)
        {
          if (v133.u32[0] < 2uLL)
          {
            v137 = *(_QWORD *)&v130 - 1;
            while (1)
            {
              v139 = v136[1];
              if (v139 == v132)
              {
                if (v136[2] == v132)
                  goto LABEL_310;
              }
              else if ((v139 & v137) != v134)
              {
                goto LABEL_315;
              }
              v136 = (_QWORD *)*v136;
              if (!v136)
                goto LABEL_315;
            }
          }
          do
          {
            v138 = v136[1];
            if (v138 == v132)
            {
              if (v136[2] == v132)
              {
LABEL_310:
                v140 = std::__hash_table<std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,std::__unordered_map_hasher<md::MaterialKey,std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,md::MaterialKeyHasher,std::equal_to<md::MaterialKey>,true>,std::__unordered_map_equal<md::MaterialKey,std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,std::equal_to<md::MaterialKey>,md::MaterialKeyHasher,true>,std::allocator<std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>>>::find<md::MaterialKey>((_QWORD *)this + 140, v136 + 3);
                if (v140)
                {
                  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, (_QWORD *)this + 140, v140);
                  if (__p[0])
                    operator delete(__p[0]);
                  v132 = v136[2];
                }
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 145, v132);
                break;
              }
            }
            else
            {
              if (v138 >= *(_QWORD *)&v130)
                v138 %= *(_QWORD *)&v130;
              if (v138 != v134)
                break;
            }
            v136 = (_QWORD *)*v136;
          }
          while (v136);
        }
      }
LABEL_315:
      while (++v131 != v115)
      {
        v130 = *(int8x8_t *)((char *)this + 1168);
        if (v130)
          goto LABEL_290;
      }
    }
  }
  if (v122 != v123)
  {
    v141 = *(int8x8_t *)((char *)this + 1168);
    if (v141)
    {
      v142 = v122;
LABEL_321:
      v143 = *v142;
      v144 = (uint8x8_t)vcnt_s8(v141);
      v144.i16[0] = vaddlv_u8(v144);
      if (v144.u32[0] > 1uLL)
      {
        v145 = *v142;
        if (v143 >= *(_QWORD *)&v141)
          v145 = v143 % *(_QWORD *)&v141;
      }
      else
      {
        v145 = (*(_QWORD *)&v141 - 1) & v143;
      }
      v146 = *(_QWORD **)(*((_QWORD *)this + 145) + 8 * v145);
      if (v146)
      {
        v147 = (_QWORD *)*v146;
        if (*v146)
        {
          if (v144.u32[0] < 2uLL)
          {
            v148 = *(_QWORD *)&v141 - 1;
            while (1)
            {
              v150 = v147[1];
              if (v150 == v143)
              {
                if (v147[2] == v143)
                  goto LABEL_341;
              }
              else if ((v150 & v148) != v145)
              {
                goto LABEL_346;
              }
              v147 = (_QWORD *)*v147;
              if (!v147)
                goto LABEL_346;
            }
          }
          do
          {
            v149 = v147[1];
            if (v149 == v143)
            {
              if (v147[2] == v143)
              {
LABEL_341:
                v151 = std::__hash_table<std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,std::__unordered_map_hasher<md::MaterialKey,std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,md::MaterialKeyHasher,std::equal_to<md::MaterialKey>,true>,std::__unordered_map_equal<md::MaterialKey,std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,std::equal_to<md::MaterialKey>,md::MaterialKeyHasher,true>,std::allocator<std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>>>::find<md::MaterialKey>((_QWORD *)this + 140, v147 + 3);
                if (v151)
                {
                  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, (_QWORD *)this + 140, v151);
                  if (__p[0])
                    operator delete(__p[0]);
                  v143 = v147[2];
                }
                std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::MaterialKey>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>((uint64_t *)this + 145, v143);
                break;
              }
            }
            else
            {
              if (v149 >= *(_QWORD *)&v141)
                v149 %= *(_QWORD *)&v141;
              if (v149 != v145)
                break;
            }
            v147 = (_QWORD *)*v147;
          }
          while (v147);
        }
      }
LABEL_346:
      while (++v142 != v123)
      {
        v141 = *(int8x8_t *)((char *)this + 1168);
        if (v141)
          goto LABEL_321;
      }
    }
  }
  if (v122)
    operator delete(v122);
  if (v114)
    operator delete(v114);
}

void md::accumulate<geo::handle<md::ls::ColorData>>(_QWORD *a1, uint64_t a2)
{
  char *v2;
  char *v3;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  __int128 *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  int8x8_t v24;
  unint64_t v25;
  char *v26;
  uint8x8_t v27;
  char *v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;

  v3 = (char *)(a1 + 2);
  v2 = (char *)a1[2];
  if (v2)
  {
    do
    {
      while (v2[40] || *(_OWORD *)(v2 + 24) != 0)
      {
        *((_QWORD *)v2 + 3) = 0;
        v2 = *(char **)v2;
        if (!v2)
          return;
      }
      *((_QWORD *)v2 + 3) = 0;
      *((_QWORD *)v2 + 4) = 0;
      v7 = *(_QWORD **)(a2 + 8);
      v6 = *(_QWORD *)(a2 + 16);
      if ((unint64_t)v7 >= v6)
      {
        v9 = *(_BYTE **)a2;
        v10 = (uint64_t)v7 - *(_QWORD *)a2;
        v11 = v10 >> 3;
        v12 = (v10 >> 3) + 1;
        if (v12 >> 61)
          abort();
        v13 = v6 - (_QWORD)v9;
        if (v13 >> 2 > v12)
          v12 = v13 >> 2;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v12;
        if (v14)
        {
          if (v14 >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v15 = operator new(8 * v14);
        }
        else
        {
          v15 = 0;
        }
        v16 = &v15[8 * v11];
        *v16 = *((_QWORD *)v2 + 2);
        v8 = v16 + 1;
        if (v7 == (_QWORD *)v9)
        {
          v9 = v7;
        }
        else
        {
          v17 = (char *)(v7 - 1) - v9;
          if (v17 < 0x58)
            goto LABEL_61;
          if ((unint64_t)((char *)v7 - &v15[v10]) < 0x20)
            goto LABEL_61;
          v18 = (v17 >> 3) + 1;
          v19 = &v15[8 * v11 - 16];
          v20 = (__int128 *)(v7 - 2);
          v21 = v18 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v22 = *v20;
            *(v19 - 1) = *(v20 - 1);
            *v19 = v22;
            v19 -= 2;
            v20 -= 2;
            v21 -= 4;
          }
          while (v21);
          v16 -= v18 & 0x3FFFFFFFFFFFFFFCLL;
          v7 -= v18 & 0x3FFFFFFFFFFFFFFCLL;
          if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_61:
            do
            {
              v23 = *--v7;
              *--v16 = v23;
            }
            while (v7 != (_QWORD *)v9);
            v9 = *(_BYTE **)a2;
          }
        }
        *(_QWORD *)a2 = v16;
        *(_QWORD *)(a2 + 8) = v8;
        *(_QWORD *)(a2 + 16) = &v15[8 * v14];
        if (v9)
          operator delete(v9);
      }
      else
      {
        *v7 = *((_QWORD *)v2 + 2);
        v8 = v7 + 1;
      }
      *(_QWORD *)(a2 + 8) = v8;
      v24 = (int8x8_t)a1[1];
      v26 = *(char **)v2;
      v25 = *((_QWORD *)v2 + 1);
      v27 = (uint8x8_t)vcnt_s8(v24);
      v27.i16[0] = vaddlv_u8(v27);
      if (v27.u32[0] > 1uLL)
      {
        if (v25 >= *(_QWORD *)&v24)
          v25 %= *(_QWORD *)&v24;
      }
      else
      {
        v25 &= *(_QWORD *)&v24 - 1;
      }
      v28 = *(char **)(*a1 + 8 * v25);
      do
      {
        v29 = v28;
        v28 = *(char **)v28;
      }
      while (v28 != v2);
      if (v29 == v3)
        goto LABEL_62;
      v30 = *((_QWORD *)v29 + 1);
      if (v27.u32[0] > 1uLL)
      {
        if (v30 >= *(_QWORD *)&v24)
          v30 %= *(_QWORD *)&v24;
      }
      else
      {
        v30 &= *(_QWORD *)&v24 - 1;
      }
      v31 = *(_QWORD *)v2;
      if (v30 != v25)
      {
LABEL_62:
        if (v26)
        {
          v32 = *((_QWORD *)v26 + 1);
          if (v27.u32[0] > 1uLL)
          {
            if (v32 >= *(_QWORD *)&v24)
              v32 %= *(_QWORD *)&v24;
          }
          else
          {
            v32 &= *(_QWORD *)&v24 - 1;
          }
          v31 = *(_QWORD *)v2;
          if (v32 == v25)
          {
LABEL_49:
            v33 = *(_QWORD *)(v31 + 8);
            if (v27.u32[0] > 1uLL)
            {
              if (v33 >= *(_QWORD *)&v24)
                v33 %= *(_QWORD *)&v24;
            }
            else
            {
              v33 &= *(_QWORD *)&v24 - 1;
            }
            if (v33 != v25)
            {
              *(_QWORD *)(*a1 + 8 * v33) = v29;
              v31 = *(_QWORD *)v2;
            }
            goto LABEL_55;
          }
        }
        *(_QWORD *)(*a1 + 8 * v25) = 0;
        v31 = *(_QWORD *)v2;
      }
      if (v31)
        goto LABEL_49;
LABEL_55:
      *(_QWORD *)v29 = v31;
      --a1[3];
      operator delete(v2);
      v2 = v26;
    }
    while (v26);
  }
}

float geo::packed_array<md::ls::ColorData,geo::handle<md::ls::ColorData>>::erase(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v9;
  unint64_t *v10;
  _QWORD *v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  unint64_t *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  unint64_t *v24;
  uint64_t v25;
  __int128 v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float *v32;
  float result;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 24);
  if (v2 < (*(_QWORD *)(a1 + 32) - v3) >> 3)
  {
    v4 = *(_QWORD *)(v3 + 8 * v2);
    v6 = v4 == 0;
    v5 = HIDWORD(v4);
    v6 = !v6 && HIDWORD(*a2) == (_DWORD)v5;
    if (v6)
    {
      v10 = *(unint64_t **)(a1 + 8);
      v9 = *(_QWORD *)(a1 + 16);
      if ((unint64_t)v10 >= v9)
      {
        v12 = *(unint64_t **)a1;
        v13 = (uint64_t)v10 - *(_QWORD *)a1;
        v14 = v13 >> 3;
        v15 = (v13 >> 3) + 1;
        if (v15 >> 61)
          abort();
        v16 = v9 - (_QWORD)v12;
        if (v16 >> 2 > v15)
          v15 = v16 >> 2;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
        {
          if (v17 >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v18 = operator new(8 * v17);
        }
        else
        {
          v18 = 0;
        }
        v19 = (unint64_t *)&v18[8 * v14];
        v20 = &v18[8 * v17];
        *v19 = v2;
        v11 = v19 + 1;
        if (v10 != v12)
        {
          v21 = (char *)v10 - (char *)v12 - 8;
          if (v21 < 0x58)
            goto LABEL_34;
          if ((unint64_t)((char *)v10 - v18 - v13) < 0x20)
            goto LABEL_34;
          v22 = (v21 >> 3) + 1;
          v23 = &v18[8 * v14 - 16];
          v24 = v10 - 2;
          v25 = v22 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v26 = *(_OWORD *)v24;
            *(v23 - 1) = *((_OWORD *)v24 - 1);
            *v23 = v26;
            v23 -= 2;
            v24 -= 4;
            v25 -= 4;
          }
          while (v25);
          v19 -= v22 & 0x3FFFFFFFFFFFFFFCLL;
          v10 -= v22 & 0x3FFFFFFFFFFFFFFCLL;
          if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_34:
            do
            {
              v27 = *--v10;
              *--v19 = v27;
            }
            while (v10 != v12);
          }
        }
        *(_QWORD *)a1 = v19;
        *(_QWORD *)(a1 + 8) = v11;
        *(_QWORD *)(a1 + 16) = v20;
        if (v12)
        {
          operator delete(v12);
          v3 = *(_QWORD *)(a1 + 24);
        }
      }
      else
      {
        *v10 = v2;
        v11 = v10 + 1;
      }
      *(_QWORD *)(a1 + 8) = v11;
      v28 = *(_QWORD *)(v3 + 8 * *(unsigned int *)a2);
      v30 = *(_QWORD *)(a1 + 48);
      v29 = *(_QWORD *)(a1 + 56);
      v31 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 0x6666666666666668 * ((unint64_t)(v29 - v30) >> 2) - 8);
      v32 = (float *)(v30 + 20 * v28);
      result = v32[4];
      v34 = *(_OWORD *)v32;
      *v32 = *(float *)(v29 - 20);
      v32[1] = *(float *)(v29 - 16);
      v32[2] = *(float *)(v29 - 12);
      v32[3] = *(float *)(v29 - 8);
      v32[4] = *(float *)(v29 - 4);
      *(_OWORD *)(v29 - 20) = v34;
      *(float *)(v29 - 4) = result;
      *(_DWORD *)(v3 + 8 * v31) = v28;
      v35 = 8 * v28;
      v36 = *(_QWORD *)(a1 + 72);
      v37 = *(_QWORD **)(a1 + 80);
      v38 = *(_QWORD *)(v36 + v35);
      v39 = *--v37;
      *(_QWORD *)(v36 + v35) = v39;
      *v37 = v38;
      *(_QWORD *)(a1 + 56) -= 20;
      *(_QWORD *)(a1 + 80) = v37;
      v40 = 8 * *(unsigned int *)a2;
      *(_DWORD *)(*(_QWORD *)(a1 + 24) + v40 + 4) = (((unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 24) + v40 + 4) << 32)
                                                   + 0x100000000) >> 32;
      *(_DWORD *)(*(_QWORD *)(a1 + 24) + v40) = (*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3;
    }
  }
  return result;
}

void std::__hash_table<std::__hash_value_type<geo::handle<md::ls::ColorData>,std::unique_ptr<md::ls::ColorData>>,std::__unordered_map_hasher<geo::handle<md::ls::ColorData>,std::__hash_value_type<geo::handle<md::ls::ColorData>,std::unique_ptr<md::ls::ColorData>>,std::hash<geo::handle<md::ls::ColorData>>,std::equal_to<geo::handle<md::ls::ColorData>>,true>,std::__unordered_map_equal<geo::handle<md::ls::ColorData>,std::__hash_value_type<geo::handle<md::ls::ColorData>,std::unique_ptr<md::ls::ColorData>>,std::equal_to<geo::handle<md::ls::ColorData>>,std::hash<geo::handle<md::ls::ColorData>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ls::ColorData>,std::unique_ptr<md::ls::ColorData>>>>::__erase_unique<geo::handle<md::ls::ColorData>>(uint64_t *a1, unint64_t a2)
{
  int8x8_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v2 = (int8x8_t)a1[1];
  if (v2)
  {
    v3 = (uint8x8_t)vcnt_s8(v2);
    v3.i16[0] = vaddlv_u8(v3);
    if (v3.u32[0] > 1uLL)
    {
      v4 = a2;
      if (*(_QWORD *)&v2 <= a2)
        v4 = a2 % *(_QWORD *)&v2;
    }
    else
    {
      v4 = (*(_QWORD *)&v2 - 1) & a2;
    }
    v5 = *a1;
    v6 = *(uint64_t ***)(*a1 + 8 * v4);
    if (v6)
    {
      v7 = *v6;
      if (*v6)
      {
        v8 = *(_QWORD *)&v2 - 1;
        if (v3.u32[0] < 2uLL)
        {
          while (1)
          {
            v9 = v7[1];
            if (v9 == a2)
            {
              if (v7[2] == a2)
                goto LABEL_22;
            }
            else if ((v9 & v8) != v4)
            {
              return;
            }
            v7 = (uint64_t *)*v7;
            if (!v7)
              return;
          }
        }
        do
        {
          v10 = v7[1];
          if (v10 == a2)
          {
            if (v7[2] == a2)
            {
LABEL_22:
              if (v3.u32[0] > 1uLL)
              {
                if (*(_QWORD *)&v2 <= a2)
                  a2 %= *(_QWORD *)&v2;
              }
              else
              {
                a2 &= v8;
              }
              v11 = *(uint64_t **)(v5 + 8 * a2);
              do
              {
                v12 = v11;
                v11 = (uint64_t *)*v11;
              }
              while (v11 != v7);
              if (v12 == a1 + 2)
                goto LABEL_39;
              v13 = v12[1];
              if (v3.u32[0] > 1uLL)
              {
                if (v13 >= *(_QWORD *)&v2)
                  v13 %= *(_QWORD *)&v2;
              }
              else
              {
                v13 &= v8;
              }
              if (v13 != a2)
              {
LABEL_39:
                if (!*v7)
                  goto LABEL_40;
                v14 = *(_QWORD *)(*v7 + 8);
                if (v3.u32[0] > 1uLL)
                {
                  if (v14 >= *(_QWORD *)&v2)
                    v14 %= *(_QWORD *)&v2;
                }
                else
                {
                  v14 &= v8;
                }
                if (v14 != a2)
LABEL_40:
                  *(_QWORD *)(v5 + 8 * a2) = 0;
              }
              v15 = *v7;
              if (*v7)
              {
                v16 = *(_QWORD *)(v15 + 8);
                if (v3.u32[0] > 1uLL)
                {
                  if (v16 >= *(_QWORD *)&v2)
                    v16 %= *(_QWORD *)&v2;
                }
                else
                {
                  v16 &= v8;
                }
                if (v16 != a2)
                {
                  *(_QWORD *)(*a1 + 8 * v16) = v12;
                  v15 = *v7;
                }
              }
              *v12 = v15;
              *v7 = 0;
              --a1[3];
              v17 = v7[3];
              v7[3] = 0;
              if (v17)
                MEMORY[0x1A1AF4E00](v17, 0x1000C40A86A77D5);
              operator delete(v7);
              return;
            }
          }
          else
          {
            if (v10 >= *(_QWORD *)&v2)
              v10 %= *(_QWORD *)&v2;
            if (v10 != v4)
              return;
          }
          v7 = (uint64_t *)*v7;
        }
        while (v7);
      }
    }
  }
}

void geo::packed_array<md::ls::ZIndex,geo::handle<md::ls::ZIndex>>::erase(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v9;
  unint64_t *v10;
  _QWORD *v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  unint64_t *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  unint64_t *v24;
  uint64_t v25;
  __int128 v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 24);
  if (v2 < (*(_QWORD *)(a1 + 32) - v3) >> 3)
  {
    v4 = *(_QWORD *)(v3 + 8 * v2);
    v6 = v4 == 0;
    v5 = HIDWORD(v4);
    v6 = !v6 && HIDWORD(*a2) == (_DWORD)v5;
    if (v6)
    {
      v10 = *(unint64_t **)(a1 + 8);
      v9 = *(_QWORD *)(a1 + 16);
      if ((unint64_t)v10 >= v9)
      {
        v12 = *(unint64_t **)a1;
        v13 = (uint64_t)v10 - *(_QWORD *)a1;
        v14 = v13 >> 3;
        v15 = (v13 >> 3) + 1;
        if (v15 >> 61)
          abort();
        v16 = v9 - (_QWORD)v12;
        if (v16 >> 2 > v15)
          v15 = v16 >> 2;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
        {
          if (v17 >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v18 = operator new(8 * v17);
        }
        else
        {
          v18 = 0;
        }
        v19 = (unint64_t *)&v18[8 * v14];
        v20 = &v18[8 * v17];
        *v19 = v2;
        v11 = v19 + 1;
        if (v10 != v12)
        {
          v21 = (char *)v10 - (char *)v12 - 8;
          if (v21 < 0x58)
            goto LABEL_34;
          if ((unint64_t)((char *)v10 - v18 - v13) < 0x20)
            goto LABEL_34;
          v22 = (v21 >> 3) + 1;
          v23 = &v18[8 * v14 - 16];
          v24 = v10 - 2;
          v25 = v22 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v26 = *(_OWORD *)v24;
            *(v23 - 1) = *((_OWORD *)v24 - 1);
            *v23 = v26;
            v23 -= 2;
            v24 -= 4;
            v25 -= 4;
          }
          while (v25);
          v19 -= v22 & 0x3FFFFFFFFFFFFFFCLL;
          v10 -= v22 & 0x3FFFFFFFFFFFFFFCLL;
          if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_34:
            do
            {
              v27 = *--v10;
              *--v19 = v27;
            }
            while (v10 != v12);
          }
        }
        *(_QWORD *)a1 = v19;
        *(_QWORD *)(a1 + 8) = v11;
        *(_QWORD *)(a1 + 16) = v20;
        if (v12)
        {
          operator delete(v12);
          v3 = *(_QWORD *)(a1 + 24);
        }
      }
      else
      {
        *v10 = v2;
        v11 = v10 + 1;
      }
      *(_QWORD *)(a1 + 8) = v11;
      v28 = *(_QWORD *)(v3 + 8 * *(unsigned int *)a2);
      v30 = *(_QWORD *)(a1 + 48);
      v29 = *(_QWORD *)(a1 + 56);
      v31 = *(_QWORD *)(v29 - v30 + *(_QWORD *)(a1 + 72) - 8);
      v32 = 8 * v28;
      v33 = *(_QWORD *)(v30 + v32);
      *(_QWORD *)(v30 + v32) = *(_QWORD *)(v29 - 8);
      *(_QWORD *)(v29 - 8) = v33;
      *(_DWORD *)(*(_QWORD *)(a1 + 24) + 8 * v31) = v28;
      v34 = *(_QWORD *)(a1 + 72);
      v35 = *(_QWORD **)(a1 + 80);
      v36 = *(_QWORD *)(v34 + v32);
      v37 = *--v35;
      *(_QWORD *)(v34 + v32) = v37;
      *v35 = v36;
      *(_QWORD *)(a1 + 56) -= 8;
      *(_QWORD *)(a1 + 80) = v35;
      v38 = 8 * *(unsigned int *)a2;
      *(_DWORD *)(*(_QWORD *)(a1 + 24) + v38 + 4) = (((unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 24) + v38 + 4) << 32)
                                                   + 0x100000000) >> 32;
      *(_DWORD *)(*(_QWORD *)(a1 + 24) + v38) = (*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3;
    }
  }
}

void std::__hash_table<std::__hash_value_type<geo::handle<md::ls::ZIndex>,std::unique_ptr<md::ls::ZIndex>>,std::__unordered_map_hasher<geo::handle<md::ls::ZIndex>,std::__hash_value_type<geo::handle<md::ls::ZIndex>,std::unique_ptr<md::ls::ZIndex>>,std::hash<geo::handle<md::ls::ZIndex>>,std::equal_to<geo::handle<md::ls::ZIndex>>,true>,std::__unordered_map_equal<geo::handle<md::ls::ZIndex>,std::__hash_value_type<geo::handle<md::ls::ZIndex>,std::unique_ptr<md::ls::ZIndex>>,std::equal_to<geo::handle<md::ls::ZIndex>>,std::hash<geo::handle<md::ls::ZIndex>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ls::ZIndex>,std::unique_ptr<md::ls::ZIndex>>>>::__erase_unique<geo::handle<md::ls::ZIndex>>(uint64_t *a1, unint64_t a2)
{
  int8x8_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v2 = (int8x8_t)a1[1];
  if (v2)
  {
    v3 = (uint8x8_t)vcnt_s8(v2);
    v3.i16[0] = vaddlv_u8(v3);
    if (v3.u32[0] > 1uLL)
    {
      v4 = a2;
      if (*(_QWORD *)&v2 <= a2)
        v4 = a2 % *(_QWORD *)&v2;
    }
    else
    {
      v4 = (*(_QWORD *)&v2 - 1) & a2;
    }
    v5 = *a1;
    v6 = *(uint64_t ***)(*a1 + 8 * v4);
    if (v6)
    {
      v7 = *v6;
      if (*v6)
      {
        v8 = *(_QWORD *)&v2 - 1;
        if (v3.u32[0] < 2uLL)
        {
          while (1)
          {
            v9 = v7[1];
            if (v9 == a2)
            {
              if (v7[2] == a2)
                goto LABEL_22;
            }
            else if ((v9 & v8) != v4)
            {
              return;
            }
            v7 = (uint64_t *)*v7;
            if (!v7)
              return;
          }
        }
        do
        {
          v10 = v7[1];
          if (v10 == a2)
          {
            if (v7[2] == a2)
            {
LABEL_22:
              if (v3.u32[0] > 1uLL)
              {
                if (*(_QWORD *)&v2 <= a2)
                  a2 %= *(_QWORD *)&v2;
              }
              else
              {
                a2 &= v8;
              }
              v11 = *(uint64_t **)(v5 + 8 * a2);
              do
              {
                v12 = v11;
                v11 = (uint64_t *)*v11;
              }
              while (v11 != v7);
              if (v12 == a1 + 2)
                goto LABEL_39;
              v13 = v12[1];
              if (v3.u32[0] > 1uLL)
              {
                if (v13 >= *(_QWORD *)&v2)
                  v13 %= *(_QWORD *)&v2;
              }
              else
              {
                v13 &= v8;
              }
              if (v13 != a2)
              {
LABEL_39:
                if (!*v7)
                  goto LABEL_40;
                v14 = *(_QWORD *)(*v7 + 8);
                if (v3.u32[0] > 1uLL)
                {
                  if (v14 >= *(_QWORD *)&v2)
                    v14 %= *(_QWORD *)&v2;
                }
                else
                {
                  v14 &= v8;
                }
                if (v14 != a2)
LABEL_40:
                  *(_QWORD *)(v5 + 8 * a2) = 0;
              }
              v15 = *v7;
              if (*v7)
              {
                v16 = *(_QWORD *)(v15 + 8);
                if (v3.u32[0] > 1uLL)
                {
                  if (v16 >= *(_QWORD *)&v2)
                    v16 %= *(_QWORD *)&v2;
                }
                else
                {
                  v16 &= v8;
                }
                if (v16 != a2)
                {
                  *(_QWORD *)(*a1 + 8 * v16) = v12;
                  v15 = *v7;
                }
              }
              *v12 = v15;
              *v7 = 0;
              --a1[3];
              v17 = v7[3];
              v7[3] = 0;
              if (v17)
                MEMORY[0x1A1AF4E00](v17, 0x1000C4090D0E795);
              operator delete(v7);
              return;
            }
          }
          else
          {
            if (v10 >= *(_QWORD *)&v2)
              v10 %= *(_QWORD *)&v2;
            if (v10 != v4)
              return;
          }
          v7 = (uint64_t *)*v7;
        }
        while (v7);
      }
    }
  }
}

void geo::packed_array<md::ls::MaterialVisibilityOptions,geo::handle<md::ls::MaterialVisibilityOptions>>::erase(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v9;
  unint64_t *v10;
  _QWORD *v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  unint64_t *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  unint64_t *v24;
  uint64_t v25;
  __int128 v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int16 *v32;
  char v33;
  __int16 v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 24);
  if (v2 < (*(_QWORD *)(a1 + 32) - v3) >> 3)
  {
    v4 = *(_QWORD *)(v3 + 8 * v2);
    v6 = v4 == 0;
    v5 = HIDWORD(v4);
    v6 = !v6 && HIDWORD(*a2) == (_DWORD)v5;
    if (v6)
    {
      v10 = *(unint64_t **)(a1 + 8);
      v9 = *(_QWORD *)(a1 + 16);
      if ((unint64_t)v10 >= v9)
      {
        v12 = *(unint64_t **)a1;
        v13 = (uint64_t)v10 - *(_QWORD *)a1;
        v14 = v13 >> 3;
        v15 = (v13 >> 3) + 1;
        if (v15 >> 61)
          abort();
        v16 = v9 - (_QWORD)v12;
        if (v16 >> 2 > v15)
          v15 = v16 >> 2;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
        {
          if (v17 >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v18 = operator new(8 * v17);
        }
        else
        {
          v18 = 0;
        }
        v19 = (unint64_t *)&v18[8 * v14];
        v20 = &v18[8 * v17];
        *v19 = v2;
        v11 = v19 + 1;
        if (v10 != v12)
        {
          v21 = (char *)v10 - (char *)v12 - 8;
          if (v21 < 0x58)
            goto LABEL_34;
          if ((unint64_t)((char *)v10 - v18 - v13) < 0x20)
            goto LABEL_34;
          v22 = (v21 >> 3) + 1;
          v23 = &v18[8 * v14 - 16];
          v24 = v10 - 2;
          v25 = v22 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v26 = *(_OWORD *)v24;
            *(v23 - 1) = *((_OWORD *)v24 - 1);
            *v23 = v26;
            v23 -= 2;
            v24 -= 4;
            v25 -= 4;
          }
          while (v25);
          v19 -= v22 & 0x3FFFFFFFFFFFFFFCLL;
          v10 -= v22 & 0x3FFFFFFFFFFFFFFCLL;
          if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_34:
            do
            {
              v27 = *--v10;
              *--v19 = v27;
            }
            while (v10 != v12);
          }
        }
        *(_QWORD *)a1 = v19;
        *(_QWORD *)(a1 + 8) = v11;
        *(_QWORD *)(a1 + 16) = v20;
        if (v12)
        {
          operator delete(v12);
          v3 = *(_QWORD *)(a1 + 24);
        }
      }
      else
      {
        *v10 = v2;
        v11 = v10 + 1;
      }
      *(_QWORD *)(a1 + 8) = v11;
      v28 = *(_QWORD *)(v3 + 8 * *(unsigned int *)a2);
      v30 = *(_QWORD *)(a1 + 48);
      v29 = *(_QWORD *)(a1 + 56);
      v31 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 0x5555555555555558 * (v29 - v30) - 8);
      v32 = (__int16 *)(v30 + 3 * v28);
      v33 = *((_BYTE *)v32 + 2);
      v34 = *v32;
      v35 = *(_BYTE *)(v29 - 1);
      *v32 = *(_WORD *)(v29 - 3);
      *((_BYTE *)v32 + 2) = v35;
      *(_WORD *)(v29 - 3) = v34;
      *(_BYTE *)(v29 - 1) = v33;
      *(_DWORD *)(*(_QWORD *)(a1 + 24) + 8 * v31) = v28;
      v36 = 8 * v28;
      v37 = *(_QWORD *)(a1 + 72);
      v38 = *(_QWORD **)(a1 + 80);
      v39 = *(_QWORD *)(v37 + v36);
      v40 = *--v38;
      *(_QWORD *)(v37 + v36) = v40;
      *v38 = v39;
      *(_QWORD *)(a1 + 56) -= 3;
      *(_QWORD *)(a1 + 80) = v38;
      v41 = 8 * *(unsigned int *)a2;
      *(_DWORD *)(*(_QWORD *)(a1 + 24) + v41 + 4) = (((unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 24) + v41 + 4) << 32)
                                                   + 0x100000000) >> 32;
      *(_DWORD *)(*(_QWORD *)(a1 + 24) + v41) = (*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3;
    }
  }
}

void std::__hash_table<std::__hash_value_type<geo::handle<md::ls::MaterialVisibilityOptions>,std::unique_ptr<md::ls::MaterialVisibilityOptions>>,std::__unordered_map_hasher<geo::handle<md::ls::MaterialVisibilityOptions>,std::__hash_value_type<geo::handle<md::ls::MaterialVisibilityOptions>,std::unique_ptr<md::ls::MaterialVisibilityOptions>>,std::hash<geo::handle<md::ls::MaterialVisibilityOptions>>,std::equal_to<geo::handle<md::ls::MaterialVisibilityOptions>>,true>,std::__unordered_map_equal<geo::handle<md::ls::MaterialVisibilityOptions>,std::__hash_value_type<geo::handle<md::ls::MaterialVisibilityOptions>,std::unique_ptr<md::ls::MaterialVisibilityOptions>>,std::equal_to<geo::handle<md::ls::MaterialVisibilityOptions>>,std::hash<geo::handle<md::ls::MaterialVisibilityOptions>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ls::MaterialVisibilityOptions>,std::unique_ptr<md::ls::MaterialVisibilityOptions>>>>::__erase_unique<geo::handle<md::ls::MaterialVisibilityOptions>>(uint64_t *a1, unint64_t a2)
{
  int8x8_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v2 = (int8x8_t)a1[1];
  if (v2)
  {
    v3 = (uint8x8_t)vcnt_s8(v2);
    v3.i16[0] = vaddlv_u8(v3);
    if (v3.u32[0] > 1uLL)
    {
      v4 = a2;
      if (*(_QWORD *)&v2 <= a2)
        v4 = a2 % *(_QWORD *)&v2;
    }
    else
    {
      v4 = (*(_QWORD *)&v2 - 1) & a2;
    }
    v5 = *a1;
    v6 = *(uint64_t ***)(*a1 + 8 * v4);
    if (v6)
    {
      v7 = *v6;
      if (*v6)
      {
        v8 = *(_QWORD *)&v2 - 1;
        if (v3.u32[0] < 2uLL)
        {
          while (1)
          {
            v9 = v7[1];
            if (v9 == a2)
            {
              if (v7[2] == a2)
                goto LABEL_22;
            }
            else if ((v9 & v8) != v4)
            {
              return;
            }
            v7 = (uint64_t *)*v7;
            if (!v7)
              return;
          }
        }
        do
        {
          v10 = v7[1];
          if (v10 == a2)
          {
            if (v7[2] == a2)
            {
LABEL_22:
              if (v3.u32[0] > 1uLL)
              {
                if (*(_QWORD *)&v2 <= a2)
                  a2 %= *(_QWORD *)&v2;
              }
              else
              {
                a2 &= v8;
              }
              v11 = *(uint64_t **)(v5 + 8 * a2);
              do
              {
                v12 = v11;
                v11 = (uint64_t *)*v11;
              }
              while (v11 != v7);
              if (v12 == a1 + 2)
                goto LABEL_39;
              v13 = v12[1];
              if (v3.u32[0] > 1uLL)
              {
                if (v13 >= *(_QWORD *)&v2)
                  v13 %= *(_QWORD *)&v2;
              }
              else
              {
                v13 &= v8;
              }
              if (v13 != a2)
              {
LABEL_39:
                if (!*v7)
                  goto LABEL_40;
                v14 = *(_QWORD *)(*v7 + 8);
                if (v3.u32[0] > 1uLL)
                {
                  if (v14 >= *(_QWORD *)&v2)
                    v14 %= *(_QWORD *)&v2;
                }
                else
                {
                  v14 &= v8;
                }
                if (v14 != a2)
LABEL_40:
                  *(_QWORD *)(v5 + 8 * a2) = 0;
              }
              v15 = *v7;
              if (*v7)
              {
                v16 = *(_QWORD *)(v15 + 8);
                if (v3.u32[0] > 1uLL)
                {
                  if (v16 >= *(_QWORD *)&v2)
                    v16 %= *(_QWORD *)&v2;
                }
                else
                {
                  v16 &= v8;
                }
                if (v16 != a2)
                {
                  *(_QWORD *)(*a1 + 8 * v16) = v12;
                  v15 = *v7;
                }
              }
              *v12 = v15;
              *v7 = 0;
              --a1[3];
              v17 = v7[3];
              v7[3] = 0;
              if (v17)
                MEMORY[0x1A1AF4E00](v17, 0x1000C4033FC2DF1);
              operator delete(v7);
              return;
            }
          }
          else
          {
            if (v10 >= *(_QWORD *)&v2)
              v10 %= *(_QWORD *)&v2;
            if (v10 != v4)
              return;
          }
          v7 = (uint64_t *)*v7;
        }
        while (v7);
      }
    }
  }
}

void md::accumulate<geo::handle<md::MaterialIDStorage>>(_QWORD *a1, uint64_t a2)
{
  uint64_t *v2;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  __int128 *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t *v23;
  void *__p;

  v2 = (uint64_t *)a1[2];
  if (v2)
  {
    do
    {
      while (*((_BYTE *)v2 + 40) || *(_OWORD *)(v2 + 3) != 0)
      {
        v2[3] = 0;
        v2 = (uint64_t *)*v2;
        if (!v2)
          return;
      }
      v2[3] = 0;
      v2[4] = 0;
      v6 = *(_QWORD **)(a2 + 8);
      v5 = *(_QWORD *)(a2 + 16);
      if ((unint64_t)v6 >= v5)
      {
        v8 = *(_BYTE **)a2;
        v9 = (uint64_t)v6 - *(_QWORD *)a2;
        v10 = v9 >> 3;
        v11 = (v9 >> 3) + 1;
        if (v11 >> 61)
          abort();
        v12 = v5 - (_QWORD)v8;
        if (v12 >> 2 > v11)
          v11 = v12 >> 2;
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
          v13 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v13 = v11;
        if (v13)
        {
          if (v13 >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v14 = operator new(8 * v13);
        }
        else
        {
          v14 = 0;
        }
        v15 = &v14[8 * v10];
        *v15 = v2[2];
        v7 = v15 + 1;
        if (v6 == (_QWORD *)v8)
        {
          v8 = v6;
        }
        else
        {
          v16 = (char *)(v6 - 1) - v8;
          if (v16 < 0x58)
            goto LABEL_37;
          if ((unint64_t)((char *)v6 - &v14[v9]) < 0x20)
            goto LABEL_37;
          v17 = (v16 >> 3) + 1;
          v18 = &v14[8 * v10 - 16];
          v19 = (__int128 *)(v6 - 2);
          v20 = v17 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v21 = *v19;
            *(v18 - 1) = *(v19 - 1);
            *v18 = v21;
            v18 -= 2;
            v19 -= 2;
            v20 -= 4;
          }
          while (v20);
          v15 -= v17 & 0x3FFFFFFFFFFFFFFCLL;
          v6 -= v17 & 0x3FFFFFFFFFFFFFFCLL;
          if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_37:
            do
            {
              v22 = *--v6;
              *--v15 = v22;
            }
            while (v6 != (_QWORD *)v8);
            v8 = *(_BYTE **)a2;
          }
        }
        *(_QWORD *)a2 = v15;
        *(_QWORD *)(a2 + 8) = v7;
        *(_QWORD *)(a2 + 16) = &v14[8 * v13];
        if (v8)
          operator delete(v8);
      }
      else
      {
        *v6 = v2[2];
        v7 = v6 + 1;
      }
      *(_QWORD *)(a2 + 8) = v7;
      v23 = (uint64_t *)*v2;
      std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, a1, v2);
      if (__p)
        operator delete(__p);
      v2 = v23;
    }
    while (v23);
  }
}

void std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,std::unique_ptr<std::shared_ptr<gms::Material<ggl::Texture2D>>>>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,std::unique_ptr<std::shared_ptr<gms::Material<ggl::Texture2D>>>>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,std::unique_ptr<std::shared_ptr<gms::Material<ggl::Texture2D>>>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,std::unique_ptr<std::shared_ptr<gms::Material<ggl::Texture2D>>>>>>::__erase_unique<geo::handle<md::MaterialIDStorage>>(uint64_t *a1, unint64_t a2)
{
  int8x8_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;

  v2 = (int8x8_t)a1[1];
  if (v2)
  {
    v3 = (uint8x8_t)vcnt_s8(v2);
    v3.i16[0] = vaddlv_u8(v3);
    if (v3.u32[0] > 1uLL)
    {
      v4 = a2;
      if (*(_QWORD *)&v2 <= a2)
        v4 = a2 % *(_QWORD *)&v2;
    }
    else
    {
      v4 = (*(_QWORD *)&v2 - 1) & a2;
    }
    v5 = *a1;
    v6 = *(uint64_t ***)(*a1 + 8 * v4);
    if (v6)
    {
      v7 = *v6;
      if (*v6)
      {
        v8 = *(_QWORD *)&v2 - 1;
        if (v3.u32[0] < 2uLL)
        {
          while (1)
          {
            v9 = v7[1];
            if (v9 == a2)
            {
              if (v7[2] == a2)
                goto LABEL_22;
            }
            else if ((v9 & v8) != v4)
            {
              return;
            }
            v7 = (uint64_t *)*v7;
            if (!v7)
              return;
          }
        }
        do
        {
          v10 = v7[1];
          if (v10 == a2)
          {
            if (v7[2] == a2)
            {
LABEL_22:
              if (v3.u32[0] > 1uLL)
              {
                if (*(_QWORD *)&v2 <= a2)
                  a2 %= *(_QWORD *)&v2;
              }
              else
              {
                a2 &= v8;
              }
              v11 = *(uint64_t **)(v5 + 8 * a2);
              do
              {
                v12 = v11;
                v11 = (uint64_t *)*v11;
              }
              while (v11 != v7);
              if (v12 == a1 + 2)
                goto LABEL_39;
              v13 = v12[1];
              if (v3.u32[0] > 1uLL)
              {
                if (v13 >= *(_QWORD *)&v2)
                  v13 %= *(_QWORD *)&v2;
              }
              else
              {
                v13 &= v8;
              }
              if (v13 != a2)
              {
LABEL_39:
                if (!*v7)
                  goto LABEL_40;
                v14 = *(_QWORD *)(*v7 + 8);
                if (v3.u32[0] > 1uLL)
                {
                  if (v14 >= *(_QWORD *)&v2)
                    v14 %= *(_QWORD *)&v2;
                }
                else
                {
                  v14 &= v8;
                }
                if (v14 != a2)
LABEL_40:
                  *(_QWORD *)(v5 + 8 * a2) = 0;
              }
              v15 = *v7;
              if (*v7)
              {
                v16 = *(_QWORD *)(v15 + 8);
                if (v3.u32[0] > 1uLL)
                {
                  if (v16 >= *(_QWORD *)&v2)
                    v16 %= *(_QWORD *)&v2;
                }
                else
                {
                  v16 &= v8;
                }
                if (v16 != a2)
                {
                  *(_QWORD *)(*a1 + 8 * v16) = v12;
                  v15 = *v7;
                }
              }
              *v12 = v15;
              *v7 = 0;
              --a1[3];
              v17 = v7[3];
              v7[3] = 0;
              if (v17)
              {
                v18 = *(std::__shared_weak_count **)(v17 + 8);
                if (v18)
                {
                  p_shared_owners = (unint64_t *)&v18->__shared_owners_;
                  do
                    v20 = __ldaxr(p_shared_owners);
                  while (__stlxr(v20 - 1, p_shared_owners));
                  if (!v20)
                  {
                    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
                    std::__shared_weak_count::__release_weak(v18);
                  }
                }
                MEMORY[0x1A1AF4E00](v17, 0x20C40A4A59CD2);
              }
              operator delete(v7);
              return;
            }
          }
          else
          {
            if (v10 >= *(_QWORD *)&v2)
              v10 %= *(_QWORD *)&v2;
            if (v10 != v4)
              return;
          }
          v7 = (uint64_t *)*v7;
        }
        while (v7);
      }
    }
  }
}

void sub_19FA77A84(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_19FA77CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  MEMORY[0x1A1AF4E00](v11, 0x10F1C400DC7F665);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_19FA77E78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id location, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19FA77F98(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::default_delete<md::YFlipPass>::operator()[abi:nn180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  ggl::RenderQueue *v7;

  v2 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(ggl::RenderQueue **)a1;
  *(_QWORD *)a1 = 0;
  if (v7)
  {
    ggl::RenderQueue::~RenderQueue(v7);
    MEMORY[0x1A1AF4E00]();
  }
  JUMPOUT(0x1A1AF4E00);
}

void sub_19FA7852C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<ggl::RenderBuffer *,std::shared_ptr<ggl::RenderBuffer>::__shared_ptr_default_delete<ggl::RenderBuffer,ggl::RenderBuffer>,std::allocator<ggl::RenderBuffer>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<ggl::RenderBuffer *,std::shared_ptr<ggl::RenderBuffer>::__shared_ptr_default_delete<ggl::RenderBuffer,ggl::RenderBuffer>,std::allocator<ggl::RenderBuffer>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void std::__shared_ptr_pointer<ggl::Texture2D *,std::shared_ptr<ggl::Texture2DAbstract>::__shared_ptr_default_delete<ggl::Texture2DAbstract,ggl::Texture2D>,std::allocator<ggl::Texture2D>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<ggl::Texture2D *,std::shared_ptr<ggl::Texture2DAbstract>::__shared_ptr_default_delete<ggl::Texture2DAbstract,ggl::Texture2D>,std::allocator<ggl::Texture2D>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void std::__shared_ptr_pointer<ggl::Texture2D *,std::shared_ptr<ggl::Texture>::__shared_ptr_default_delete<ggl::Texture,ggl::Texture2D>,std::allocator<ggl::Texture2D>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<ggl::Texture2D *,std::shared_ptr<ggl::Texture>::__shared_ptr_default_delete<ggl::Texture,ggl::Texture2D>,std::allocator<ggl::Texture2D>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void std::__shared_ptr_pointer<ggl::RenderBuffer *,std::shared_ptr<ggl::Texture2DAbstract>::__shared_ptr_default_delete<ggl::Texture2DAbstract,ggl::RenderBuffer>,std::allocator<ggl::RenderBuffer>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<ggl::RenderBuffer *,std::shared_ptr<ggl::Texture2DAbstract>::__shared_ptr_default_delete<ggl::Texture2DAbstract,ggl::RenderBuffer>,std::allocator<ggl::RenderBuffer>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void `non-virtual thunk to'ggl::RenderBuffer::~RenderBuffer(ggl::RenderBuffer *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *((_QWORD *)this - 5) = &off_1E42BA510;
  *(_QWORD *)this = &unk_1E42BA530;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *((_QWORD *)this - 5) = &off_1E42B8A10;
  v5 = *((_QWORD *)this - 4);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this - 2));
    *((_QWORD *)this - 2) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this - 3);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *((_QWORD *)this - 5) = &off_1E42BA510;
  *(_QWORD *)this = &unk_1E42BA530;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *((_QWORD *)this - 5) = &off_1E42B8A10;
  v5 = *((_QWORD *)this - 4);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this - 2));
    *((_QWORD *)this - 2) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this - 3);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::IOSurfaceBitmapData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3740;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::IOSurfaceBitmapData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3740;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::IOSurfaceBitmapData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::vector<ggl::PixelFormat>::__insert_with_size[abi:nn180100]<std::__wrap_iter<ggl::PixelFormat const*>,std::__wrap_iter<ggl::PixelFormat const*>>(char **a1, _BYTE *a2, char *__src, char *a4, uint64_t a5)
{
  uint64_t v5;
  char *v7;
  char **v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int64_t v25;
  unint64_t v26;
  char *v27;
  size_t v28;
  uint64_t v29;
  int *v30;
  char *v31;
  unint64_t v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  _OWORD *v40;
  __int128 *v41;
  uint64_t v42;
  __int128 v43;
  int v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  __int128 *v51;
  _OWORD *v52;
  uint64_t v53;
  __int128 v54;
  int v55;
  char *v56;
  unint64_t v57;
  uint64_t v58;
  __int128 *v59;
  _OWORD *v60;
  uint64_t v61;
  __int128 v62;
  int v63;
  char *v64;
  size_t v65;
  unint64_t v67;

  v5 = a5 - 1;
  if (a5 < 1)
    return;
  v7 = __src;
  v9 = a1;
  v11 = (unint64_t)*a1;
  v10 = (unint64_t)a1[1];
  v12 = a2 - *a1;
  v13 = v12 >> 2;
  v14 = &(*a1)[v12 & 0xFFFFFFFFFFFFFFFCLL];
  v15 = a1[2];
  if (a5 > (uint64_t)&v15[-v10] >> 2)
  {
    v16 = a5 + ((uint64_t)(v10 - v11) >> 2);
    if (v16 >> 62)
      abort();
    v17 = (uint64_t)&v15[-v11];
    if (v17 >> 1 > v16)
      v16 = v17 >> 1;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
      v18 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
    {
      if (v18 >> 62)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v19 = (unint64_t)&(*a1)[v12 & 0xFFFFFFFFFFFFFFFCLL];
      v20 = v18;
      v21 = operator new(4 * v18);
      v18 = v20;
      v14 = (char *)v19;
      v13 = v12 >> 2;
      v9 = a1;
    }
    else
    {
      v21 = 0;
    }
    v46 = &v21[4 * v13];
    v47 = &v46[4 * a5];
    v48 = v46;
    if ((v5 & 0x3FFFFFFFFFFFFFFFuLL) >= 7)
    {
      v48 = &v21[4 * v13];
      if ((unint64_t)(&v21[v12 & 0xFFFFFFFFFFFFFFFCLL] - v7) >= 0x20)
      {
        v49 = (v5 & 0x3FFFFFFFFFFFFFFFLL) + 1;
        v50 = 4 * (v49 & 0x7FFFFFFFFFFFFFF8);
        v48 = &v46[v50];
        v51 = (__int128 *)(v7 + 16);
        v52 = &v21[4 * v13 + 16];
        v53 = v49 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v54 = *v51;
          *(v52 - 1) = *(v51 - 1);
          *v52 = v54;
          v51 += 2;
          v52 += 2;
          v53 -= 8;
        }
        while (v53);
        if (v49 == (v49 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_42:
          if ((_BYTE *)v11 != a2)
          {
            if ((unint64_t)(v12 - 4) >= 0x3C)
            {
              v56 = v14;
              if ((v12 & 0xFFFFFFFFFFFFFFFCLL) + v11 - (unint64_t)&v21[v12 & 0xFFFFFFFFFFFFFFFCLL] >= 0x20)
              {
                v57 = ((unint64_t)(v12 - 4) >> 2) + 1;
                v56 = &v14[-4 * (v57 & 0x7FFFFFFFFFFFFFF8)];
                v58 = 4 * v13 - 16;
                v59 = (__int128 *)(v11 + v58);
                v60 = &v21[v58];
                v61 = v57 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v62 = *v59;
                  *(v60 - 1) = *(v59 - 1);
                  *v60 = v62;
                  v59 -= 2;
                  v60 -= 2;
                  v61 -= 8;
                }
                while (v61);
                v46 -= 4 * (v57 & 0x7FFFFFFFFFFFFFF8);
                if (v57 == (v57 & 0x7FFFFFFFFFFFFFF8))
                  goto LABEL_50;
              }
            }
            else
            {
              v56 = v14;
            }
            do
            {
              v63 = *((_DWORD *)v56 - 1);
              v56 -= 4;
              *((_DWORD *)v46 - 1) = v63;
              v46 -= 4;
            }
            while (v56 != (char *)v11);
          }
LABEL_50:
          v64 = &v21[4 * v18];
          v65 = v10 - (_QWORD)v14;
          if (v65)
            memmove(v47, v14, v65);
          *v9 = v46;
          v9[1] = &v47[v65];
          v9[2] = v64;
          if (v11)
            operator delete((void *)v11);
          return;
        }
        v7 += v50;
      }
    }
    do
    {
      v55 = *(_DWORD *)v7;
      v7 += 4;
      *(_DWORD *)v48 = v55;
      v48 += 4;
    }
    while (v48 != v47);
    goto LABEL_42;
  }
  v22 = v10 - (_QWORD)v14;
  v23 = (uint64_t)(v10 - (_QWORD)v14) >> 2;
  if (v23 >= a5)
  {
    v24 = &__src[4 * a5];
    v26 = (unint64_t)a1[1];
LABEL_18:
    v27 = &v14[4 * a5];
    v28 = v26 - (_QWORD)v27;
    v29 = (uint64_t)(v26 - (_QWORD)v27) >> 2;
    v30 = (int *)(v26 - 4 * a5);
    v31 = (char *)v26;
    if ((unint64_t)v30 < v10)
    {
      v32 = (v12 & 0xFFFFFFFFFFFFFFFCLL) + v28;
      v33 = (char *)(v32 + v11);
      v34 = v32 + v11 + 4;
      if (v10 > v34)
        v34 = v10;
      v35 = v34 + ~v11 - v32;
      v36 = v26 - (_QWORD)v33;
      v37 = v35 >= 0x2C && v36 > 0x1F;
      v31 = (char *)v26;
      if (!v37)
        goto LABEL_59;
      v38 = (v35 >> 2) + 1;
      v39 = 4 * (v38 & 0x7FFFFFFFFFFFFFF8);
      v30 = (int *)((char *)v30 + v39);
      v40 = (_OWORD *)(v26 + 16);
      v41 = (__int128 *)(4 * v29 + 4 * v13 + v11 + 16);
      v42 = v38 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v43 = *v41;
        *(v40 - 1) = *(v41 - 1);
        *v40 = v43;
        v40 += 2;
        v41 += 2;
        v42 -= 8;
      }
      while (v42);
      v31 = (char *)(v26 + v39);
      if (v38 != (v38 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_59:
        do
        {
          v44 = *v30++;
          *(_DWORD *)v31 = v44;
          v31 += 4;
        }
        while ((unint64_t)v30 < v10);
      }
    }
    v9[1] = v31;
    if ((char *)v26 != v27)
    {
      v45 = v14;
      memmove((void *)(v26 - 4 * v29), v14, v28);
      v14 = v45;
    }
    if (v24 != v7)
      memmove(v14, v7, v24 - v7);
    return;
  }
  v24 = &__src[4 * v23];
  v25 = a4 - v24;
  if (a4 != v24)
  {
    v67 = (unint64_t)&(*a1)[v12 & 0xFFFFFFFFFFFFFFFCLL];
    memmove(a1[1], &__src[4 * v23], a4 - v24);
    v13 = v12 >> 2;
    v14 = (char *)v67;
  }
  v26 = v10 + v25;
  v9[1] = (char *)(v10 + v25);
  if (v22 >= 1)
    goto LABEL_18;
}

uint64_t *std::unique_ptr<GGLImageCanvasRendererProvider>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {

    MEMORY[0x1A1AF4E00](v2, 0x81C40803F642BLL);
  }
  return a1;
}

char *std::vector<std::pair<gdc::TypeInfo,std::shared_ptr<void>>>::__push_back_slow_path<std::pair<gdc::TypeInfo,std::shared_ptr<void>> const&>(char **a1, uint64_t a2)
{
  char *v2;
  char *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  char *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;

  v2 = *a1;
  v3 = a1[1];
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((v3 - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666)
    abort();
  if (0x999999999999999ALL * ((a1[2] - v2) >> 3) > v5)
    v5 = 0x999999999999999ALL * ((a1[2] - v2) >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v2) >> 3) >= 0x333333333333333)
    v5 = 0x666666666666666;
  if (v5 > 0x666666666666666)
    std::__throw_bad_array_new_length[abi:nn180100]();
  v8 = 40 * v5;
  v9 = (char *)operator new(40 * v5);
  v10 = &v9[40 * v4];
  *(_OWORD *)v10 = *(_OWORD *)a2;
  v11 = *(_QWORD *)(a2 + 24);
  *((_QWORD *)v10 + 2) = *(_QWORD *)(a2 + 16);
  *((_QWORD *)v10 + 3) = v11;
  v12 = *(_QWORD *)(a2 + 32);
  *((_QWORD *)v10 + 4) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    v2 = *a1;
    v3 = a1[1];
  }
  v15 = &v9[v8];
  v16 = v10 + 40;
  if (v3 == v2)
  {
    *a1 = v10;
    a1[1] = v16;
    a1[2] = v15;
  }
  else
  {
    do
    {
      v17 = *(_OWORD *)(v3 - 40);
      *((_QWORD *)v10 - 3) = *((_QWORD *)v3 - 3);
      *(_OWORD *)(v10 - 40) = v17;
      *((_OWORD *)v10 - 1) = *((_OWORD *)v3 - 1);
      v10 -= 40;
      *((_QWORD *)v3 - 2) = 0;
      *((_QWORD *)v3 - 1) = 0;
      v3 -= 40;
    }
    while (v3 != v2);
    v2 = *a1;
    v18 = a1[1];
    *a1 = v10;
    a1[1] = v16;
    a1[2] = v15;
    while (v18 != v2)
    {
      v19 = (std::__shared_weak_count *)*((_QWORD *)v18 - 1);
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(p_shared_owners);
        while (__stlxr(v21 - 1, p_shared_owners));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v18 -= 40;
    }
  }
  if (v2)
    operator delete(v2);
  return v16;
}

void std::__shared_ptr_pointer<GGLImageCanvasRendererProvider *,std::shared_ptr<GGLImageCanvasRendererProvider>::__shared_ptr_default_delete<GGLImageCanvasRendererProvider,GGLImageCanvasRendererProvider>,std::allocator<GGLImageCanvasRendererProvider>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<GGLImageCanvasRendererProvider *,std::shared_ptr<GGLImageCanvasRendererProvider>::__shared_ptr_default_delete<GGLImageCanvasRendererProvider,GGLImageCanvasRendererProvider>,std::allocator<GGLImageCanvasRendererProvider>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {

    JUMPOUT(0x1A1AF4E00);
  }
  return result;
}

uint64_t GGLImageCanvasRendererProvider::renderer(id *this)
{
  return objc_msgSend(this[1], "renderer");
}

uint64_t GGLImageCanvasRendererProvider::signpost(id *this)
{
  return objc_msgSend(this[1], "signpost");
}

void std::__shared_ptr_pointer<GGLImageCanvasRenderTargetPreparer *,std::shared_ptr<GGLImageCanvasRenderTargetPreparer>::__shared_ptr_default_delete<GGLImageCanvasRenderTargetPreparer,GGLImageCanvasRenderTargetPreparer>,std::allocator<GGLImageCanvasRenderTargetPreparer>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<GGLImageCanvasRenderTargetPreparer *,std::shared_ptr<GGLImageCanvasRenderTargetPreparer>::__shared_ptr_default_delete<GGLImageCanvasRenderTargetPreparer,GGLImageCanvasRenderTargetPreparer>,std::allocator<GGLImageCanvasRenderTargetPreparer>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void GGLImageCanvasRenderTargetPreparer::~GGLImageCanvasRenderTargetPreparer(id *this)
{

}

{

  JUMPOUT(0x1A1AF4E00);
}

uint64_t GGLImageCanvasRenderTargetPreparer::prepareInteractiveTargets()
{
  NSObject *v0;
  int v2;
  const char *v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
  v0 = (id)GEOGetVectorKitVKDefaultLog_log;
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT))
  {
    v2 = 136315650;
    v3 = "false";
    v4 = 2080;
    v5 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/GGLImageCanvas.mm";
    v6 = 1024;
    v7 = 57;
    _os_log_impl(&dword_19F029000, v0, OS_LOG_TYPE_FAULT, "GGLImageCanvas should not participate in interactive frames: Assertion with expression - %s : Failed in file - %s line - %i", (uint8_t *)&v2, 0x1Cu);
  }

  return 0;
}

uint64_t GGLImageCanvasRenderTargetPreparer::prepareSnapshotTargets(id *this)
{
  objc_msgSend(this[1], "willDrawView");
  return objc_msgSend(this[1], "flipTarget");
}

void std::__shared_ptr_pointer<GGLImageCanvasYFlipInjector *,std::shared_ptr<GGLImageCanvasYFlipInjector>::__shared_ptr_default_delete<GGLImageCanvasYFlipInjector,GGLImageCanvasYFlipInjector>,std::allocator<GGLImageCanvasYFlipInjector>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<GGLImageCanvasYFlipInjector *,std::shared_ptr<GGLImageCanvasYFlipInjector>::__shared_ptr_default_delete<GGLImageCanvasYFlipInjector,GGLImageCanvasYFlipInjector>,std::allocator<GGLImageCanvasYFlipInjector>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void GGLImageCanvasYFlipInjector::~GGLImageCanvasYFlipInjector(id *this)
{

}

{

  JUMPOUT(0x1A1AF4E00);
}

void GGLImageCanvasYFlipInjector::inject(id *this, ggl::RenderQueue *a2, ggl::RenderTarget *a3)
{
  uint64_t v6;
  uint64_t v7;
  ggl::RenderQueue **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = objc_msgSend(this[1], "renderTarget");
  v7 = objc_msgSend(this[1], "flipPass");
  v8 = (ggl::RenderQueue **)v7;
  v9 = *(_QWORD *)(v6 + 184);
  if (!v9)
    v9 = *(_QWORD *)(v6 + 88);
  **(_QWORD **)(*(_QWORD *)(v7 + 24) + 96) = v9;
  v10 = *(_QWORD *)(v7 + 8);
  v11 = *(_QWORD *)(v10 + 72);
  if (*(_QWORD *)(v10 + 80) != v11)
    *(_QWORD *)(v10 + 80) = v11;
  if (**(_QWORD **)(*(_QWORD *)(v7 + 24) + 96))
    ggl::CommandBuffer::pushRenderItem(*(_QWORD *)(v7 + 8), *(ggl::RenderItem **)(v7 + 32));
  ggl::RenderQueue::attachPass(a2, a3, *v8);
}

void md::realistic::PostchainRenderLayer::~PostchainRenderLayer(md::realistic::PostchainRenderLayer *this)
{
  md::realistic::PostchainRenderLayer::~PostchainRenderLayer(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  void *v72;

  *(_QWORD *)this = &off_1E42B0190;
  v2 = *((_QWORD *)this + 56);
  *((_QWORD *)this + 56) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 55);
  *((_QWORD *)this + 55) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 54);
  if (!v4)
    goto LABEL_9;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    v7 = (std::__shared_weak_count *)*((_QWORD *)this + 52);
    if (!v7)
      goto LABEL_15;
  }
  else
  {
LABEL_9:
    v7 = (std::__shared_weak_count *)*((_QWORD *)this + 52);
    if (!v7)
      goto LABEL_15;
  }
  v8 = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_15:
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 50);
  if (!v10)
    goto LABEL_19;
  v11 = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    v13 = (std::__shared_weak_count *)*((_QWORD *)this + 48);
    if (!v13)
      goto LABEL_25;
  }
  else
  {
LABEL_19:
    v13 = (std::__shared_weak_count *)*((_QWORD *)this + 48);
    if (!v13)
      goto LABEL_25;
  }
  v14 = (unint64_t *)&v13->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
LABEL_25:
  v16 = (std::__shared_weak_count *)*((_QWORD *)this + 46);
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = *((_QWORD *)this + 44);
  *((_QWORD *)this + 44) = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = *((_QWORD *)this + 43);
  *((_QWORD *)this + 43) = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  v21 = (std::__shared_weak_count *)*((_QWORD *)this + 42);
  if (!v21)
    goto LABEL_38;
  v22 = (unint64_t *)&v21->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
    v24 = (std::__shared_weak_count *)*((_QWORD *)this + 40);
    if (!v24)
      goto LABEL_44;
  }
  else
  {
LABEL_38:
    v24 = (std::__shared_weak_count *)*((_QWORD *)this + 40);
    if (!v24)
      goto LABEL_44;
  }
  v25 = (unint64_t *)&v24->__shared_owners_;
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
LABEL_44:
  v27 = (std::__shared_weak_count *)*((_QWORD *)this + 38);
  if (!v27)
    goto LABEL_48;
  v28 = (unint64_t *)&v27->__shared_owners_;
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
    v30 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
    if (!v30)
      goto LABEL_54;
  }
  else
  {
LABEL_48:
    v30 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
    if (!v30)
      goto LABEL_54;
  }
  v31 = (unint64_t *)&v30->__shared_owners_;
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v32 - 1, v31));
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
LABEL_54:
  v33 = (std::__shared_weak_count *)*((_QWORD *)this + 34);
  if (v33)
  {
    v34 = (unint64_t *)&v33->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = *((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  v37 = (std::__shared_weak_count *)*((_QWORD *)this + 31);
  if (!v37)
    goto LABEL_65;
  v38 = (unint64_t *)&v37->__shared_owners_;
  do
    v39 = __ldaxr(v38);
  while (__stlxr(v39 - 1, v38));
  if (!v39)
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
    v40 = (std::__shared_weak_count *)*((_QWORD *)this + 29);
    if (!v40)
      goto LABEL_71;
  }
  else
  {
LABEL_65:
    v40 = (std::__shared_weak_count *)*((_QWORD *)this + 29);
    if (!v40)
      goto LABEL_71;
  }
  v41 = (unint64_t *)&v40->__shared_owners_;
  do
    v42 = __ldaxr(v41);
  while (__stlxr(v42 - 1, v41));
  if (!v42)
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
  }
LABEL_71:
  v43 = (std::__shared_weak_count *)*((_QWORD *)this + 27);
  if (v43)
  {
    v44 = (unint64_t *)&v43->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v46 = *((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v46)
    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
  v47 = (std::__shared_weak_count *)*((_QWORD *)this + 24);
  if (!v47)
    goto LABEL_82;
  v48 = (unint64_t *)&v47->__shared_owners_;
  do
    v49 = __ldaxr(v48);
  while (__stlxr(v49 - 1, v48));
  if (!v49)
  {
    ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
    std::__shared_weak_count::__release_weak(v47);
    v50 = (std::__shared_weak_count *)*((_QWORD *)this + 22);
    if (!v50)
      goto LABEL_88;
  }
  else
  {
LABEL_82:
    v50 = (std::__shared_weak_count *)*((_QWORD *)this + 22);
    if (!v50)
      goto LABEL_88;
  }
  v51 = (unint64_t *)&v50->__shared_owners_;
  do
    v52 = __ldaxr(v51);
  while (__stlxr(v52 - 1, v51));
  if (!v52)
  {
    ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
    std::__shared_weak_count::__release_weak(v50);
  }
LABEL_88:
  v53 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
  if (v53)
  {
    v54 = (unint64_t *)&v53->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  v56 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  v57 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
  if (!v57)
    goto LABEL_99;
  v58 = (unint64_t *)&v57->__shared_owners_;
  do
    v59 = __ldaxr(v58);
  while (__stlxr(v59 - 1, v58));
  if (!v59)
  {
    ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
    std::__shared_weak_count::__release_weak(v57);
    v60 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
    if (!v60)
      goto LABEL_105;
  }
  else
  {
LABEL_99:
    v60 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
    if (!v60)
      goto LABEL_105;
  }
  v61 = (unint64_t *)&v60->__shared_owners_;
  do
    v62 = __ldaxr(v61);
  while (__stlxr(v62 - 1, v61));
  if (!v62)
  {
    ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
    std::__shared_weak_count::__release_weak(v60);
  }
LABEL_105:
  v63 = (std::__shared_weak_count *)*((_QWORD *)this + 13);
  if (!v63)
    goto LABEL_109;
  v64 = (unint64_t *)&v63->__shared_owners_;
  do
    v65 = __ldaxr(v64);
  while (__stlxr(v65 - 1, v64));
  if (!v65)
  {
    ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
    std::__shared_weak_count::__release_weak(v63);
    v66 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
    if (!v66)
      goto LABEL_115;
  }
  else
  {
LABEL_109:
    v66 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
    if (!v66)
      goto LABEL_115;
  }
  v67 = (unint64_t *)&v66->__shared_owners_;
  do
    v68 = __ldaxr(v67);
  while (__stlxr(v68 - 1, v67));
  if (!v68)
  {
    ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
    std::__shared_weak_count::__release_weak(v66);
  }
LABEL_115:
  v69 = (std::__shared_weak_count *)*((_QWORD *)this + 9);
  if (v69)
  {
    v70 = (unint64_t *)&v69->__shared_owners_;
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  *(_QWORD *)this = off_1E428C468;
  v72 = (void *)*((_QWORD *)this + 1);
  if (v72)
  {
    *((_QWORD *)this + 2) = v72;
    operator delete(v72);
  }
}

_QWORD *md::realistic::PostchainRenderLayer::layout(md::realistic::PostchainRenderLayer *this, const md::LayoutContext *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int8x8_t v9;
  uint8x8_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unsigned __int8 *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  ggl::CommandBuffer *v37;
  uint64_t v38;
  unsigned __int8 *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unsigned __int8 *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  _QWORD *v53;
  unint64_t v54;
  float32x2_t *v55;
  void *v56;
  float v57;
  void *v58;
  float v59;
  void *v60;
  float v61;
  float32_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  _QWORD *result;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unsigned __int8 *v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unsigned __int8 *v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  ggl::CommandBuffer *v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  unsigned __int8 *v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  ggl::CommandBuffer *v127;
  ggl::CommandBuffer *v128;
  ggl::CommandBuffer *v129;
  ggl::CommandBuffer *v130;
  ggl::CommandBuffer *v131;
  _QWORD v132[3];
  _QWORD *v133;
  _QWORD v134[3];
  _QWORD *v135;
  _QWORD v136[3];
  _QWORD *v137;
  uint64_t v138;

  v138 = *MEMORY[0x1E0C80C00];
  v134[0] = &off_1E42D56E0;
  v134[1] = a2;
  v135 = v134;
  v132[0] = &off_1E42D5728;
  v132[1] = a2;
  v133 = v132;
  v137 = v136;
  v136[0] = &off_1E42D5728;
  v136[1] = a2;
  std::__function::__func<md::realistic::PostchainRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::realistic::PostchainRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::operator()((uint64_t)v134);
  v4 = v133;
  if (v133 == v132)
  {
    v5 = 4;
    v4 = v132;
  }
  else
  {
    if (!v133)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v135;
  if (v135 == v134)
  {
    v7 = 4;
    v6 = v134;
  }
  else
  {
    if (!v135)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  v8 = (_QWORD *)*((_QWORD *)a2 + 1);
  v9 = (int8x8_t)v8[1];
  if (!*(_QWORD *)&v9)
    goto LABEL_34;
  v10 = (uint8x8_t)vcnt_s8(v9);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    v11 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v9 <= 0x1AF456233693CD46uLL)
      v11 = 0x1AF456233693CD46uLL % *(_QWORD *)&v9;
  }
  else
  {
    v11 = (*(_QWORD *)&v9 - 1) & 0x1AF456233693CD46;
  }
  v12 = *(_QWORD **)(*v8 + 8 * v11);
  if (!v12)
    goto LABEL_34;
  v13 = (_QWORD *)*v12;
  if (!v13)
    goto LABEL_34;
  if (v10.u32[0] < 2uLL)
  {
    v14 = *(_QWORD *)&v9 - 1;
    while (1)
    {
      v16 = v13[1];
      if (v16 == 0x1AF456233693CD46)
      {
        if (v13[2] == 0x1AF456233693CD46)
          goto LABEL_32;
      }
      else if ((v16 & v14) != v11)
      {
        goto LABEL_34;
      }
      v13 = (_QWORD *)*v13;
      if (!v13)
        goto LABEL_34;
    }
  }
  while (1)
  {
    v15 = v13[1];
    if (v15 == 0x1AF456233693CD46)
      break;
    if (v15 >= *(_QWORD *)&v9)
      v15 %= *(_QWORD *)&v9;
    if (v15 != v11)
      goto LABEL_34;
LABEL_21:
    v13 = (_QWORD *)*v13;
    if (!v13)
      goto LABEL_34;
  }
  if (v13[2] != 0x1AF456233693CD46)
    goto LABEL_21;
LABEL_32:
  v17 = v13[5];
  if (*(_QWORD *)(v17 + 8) == 0x1AF456233693CD46)
  {
    v18 = *(_QWORD *)(v17 + 32);
    goto LABEL_35;
  }
LABEL_34:
  v18 = 0;
LABEL_35:
  v19 = *(_QWORD **)(*((_QWORD *)this + 5) + 24);
  v20 = (_QWORD *)v19[1];
  v21 = v20[3];
  v22 = v20[4];
  if (v22 == v21)
  {
    v130 = 0;
    v30 = 0;
    v127 = 0;
    v28 = 0;
LABEL_69:
    v43 = 0;
LABEL_70:
    v131 = 0;
LABEL_71:
    v129 = 0;
    goto LABEL_72;
  }
  v23 = 0;
  while (1)
  {
    v24 = *(unsigned __int8 **)(v21 + 8 * v23);
    if (*v24 == *((unsigned __int8 *)this + 49))
    {
      v25 = *((_QWORD *)v24 + 1);
      v26 = v20[15];
      if (v25 < (v20[16] - v26) >> 3)
        break;
    }
    if (++v23 >= (unint64_t)((v22 - v21) >> 3))
      goto LABEL_43;
  }
  v27 = *(_QWORD *)(v26 + 8 * v25);
  if (!v27)
  {
LABEL_43:
    v28 = 0;
    v29 = v22 - v21;
    if (v22 != v21)
      goto LABEL_44;
LABEL_42:
    v130 = 0;
    v30 = 0;
    v127 = 0;
    goto LABEL_69;
  }
  v28 = *(_QWORD *)(*(_QWORD *)(v27 + 24) + 8 * *((unsigned __int8 *)this + 50));
  v29 = v22 - v21;
  if (v22 == v21)
    goto LABEL_42;
LABEL_44:
  v31 = 0;
  v32 = v29 >> 3;
  while (1)
  {
    v33 = *(unsigned __int8 **)(v21 + 8 * v31);
    if (*v33 == *((unsigned __int8 *)this + 61))
    {
      v34 = *((_QWORD *)v33 + 1);
      v35 = v20[15];
      if (v34 < (v20[16] - v35) >> 3)
        break;
    }
    if (++v31 >= v32)
      goto LABEL_51;
  }
  v36 = *(_QWORD *)(v35 + 8 * v34);
  if (v36)
  {
    v37 = *(ggl::CommandBuffer **)(*(_QWORD *)(v36 + 24) + 8 * *((unsigned __int8 *)this + 62));
    goto LABEL_52;
  }
LABEL_51:
  v37 = 0;
LABEL_52:
  v127 = v37;
  if (v22 == v21)
  {
    v130 = 0;
    v30 = 0;
    goto LABEL_69;
  }
  v38 = 0;
  while (1)
  {
    v39 = *(unsigned __int8 **)(v21 + 8 * v38);
    if (*v39 == *((unsigned __int8 *)this + 51))
    {
      v40 = *((_QWORD *)v39 + 1);
      v41 = v20[15];
      if (v40 < (v20[16] - v41) >> 3)
        break;
    }
    if (++v38 >= (unint64_t)((v22 - v21) >> 3))
      goto LABEL_60;
  }
  v42 = *(_QWORD *)(v41 + 8 * v40);
  if (!v42)
  {
LABEL_60:
    v43 = 0;
    v44 = v22 - v21;
    if (v22 != v21)
      goto LABEL_61;
LABEL_59:
    v130 = 0;
    v30 = 0;
    goto LABEL_70;
  }
  v43 = *(_QWORD *)(*(_QWORD *)(v42 + 24) + 8 * *((unsigned __int8 *)this + 52));
  v44 = v22 - v21;
  if (v22 == v21)
    goto LABEL_59;
LABEL_61:
  v45 = 0;
  v46 = v44 >> 3;
  while (1)
  {
    v47 = *(unsigned __int8 **)(v21 + 8 * v45);
    if (*v47 == *((unsigned __int8 *)this + 53))
    {
      v48 = *((_QWORD *)v47 + 1);
      v49 = v20[15];
      if (v48 < (v20[16] - v49) >> 3)
        break;
    }
    if (++v45 >= v46)
      goto LABEL_138;
  }
  v50 = *(_QWORD *)(v49 + 8 * v48);
  if (!v50)
  {
LABEL_138:
    v30 = 0;
    v51 = v22 - v21;
    if (v22 != v21)
      goto LABEL_139;
LABEL_67:
    v130 = 0;
    goto LABEL_70;
  }
  v30 = *(_QWORD *)(*(_QWORD *)(v50 + 24) + 8 * *((unsigned __int8 *)this + 54));
  v51 = v22 - v21;
  if (v22 == v21)
    goto LABEL_67;
LABEL_139:
  v106 = 0;
  v107 = v51 >> 3;
  while (1)
  {
    v108 = *(unsigned __int8 **)(v21 + 8 * v106);
    if (*v108 == *((unsigned __int8 *)this + 55))
    {
      v109 = *((_QWORD *)v108 + 1);
      v110 = v20[15];
      if (v109 < (v20[16] - v110) >> 3)
        break;
    }
    if (++v106 >= v107)
      goto LABEL_146;
  }
  v111 = *(_QWORD *)(v110 + 8 * v109);
  if (v111)
  {
    v131 = *(ggl::CommandBuffer **)(*(_QWORD *)(v111 + 24) + 8 * *((unsigned __int8 *)this + 56));
    v112 = v22 - v21;
    if (v22 == v21)
    {
LABEL_145:
      v129 = 0;
      v130 = 0;
      goto LABEL_72;
    }
  }
  else
  {
LABEL_146:
    v131 = 0;
    v112 = v22 - v21;
    if (v22 == v21)
      goto LABEL_145;
  }
  v113 = 0;
  v114 = v112 >> 3;
  while (1)
  {
    v115 = *(unsigned __int8 **)(v21 + 8 * v113);
    if (*v115 == *((unsigned __int8 *)this + 57))
    {
      v116 = *((_QWORD *)v115 + 1);
      v117 = v20[15];
      if (v116 < (v20[16] - v117) >> 3)
        break;
    }
    if (++v113 >= v114)
      goto LABEL_153;
  }
  v118 = *(_QWORD *)(v117 + 8 * v116);
  if (v118)
  {
    v119 = *(ggl::CommandBuffer **)(*(_QWORD *)(v118 + 24) + 8 * *((unsigned __int8 *)this + 58));
    goto LABEL_154;
  }
LABEL_153:
  v119 = 0;
LABEL_154:
  v120 = v22 - v21;
  v130 = v119;
  if (v22 == v21)
    goto LABEL_71;
  v121 = 0;
  v122 = v120 >> 3;
  while (1)
  {
    v123 = *(unsigned __int8 **)(v21 + 8 * v121);
    if (*v123 == *((unsigned __int8 *)this + 59))
    {
      v124 = *((_QWORD *)v123 + 1);
      v125 = v20[15];
      if (v124 < (v20[16] - v125) >> 3)
        break;
    }
    if (++v121 >= v122)
      goto LABEL_71;
  }
  v126 = *(_QWORD *)(v125 + 8 * v124);
  if (!v126)
    goto LABEL_71;
  v129 = *(ggl::CommandBuffer **)(*(_QWORD *)(v126 + 24) + 8 * *((unsigned __int8 *)this + 60));
LABEL_72:
  v52 = *(double *)(v18 + 32);
  v53 = (_QWORD *)*((_QWORD *)this + 8);
  v54 = v53[1];
  v55 = (float32x2_t *)v53[9];
  *v55 = vcvt_f32_f64(*(float64x2_t *)(v18 + 968));
  *(float *)&v52 = v52;
  v55[1].i32[0] = LODWORD(v52);
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings", v127);
  v56 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v56, "dofStrength");
  v55[1].f32[1] = v57 * 6.0;

  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v58 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v58, "dofStrength");
  if (v59 <= 0.1)
  {
    v55[2].i32[0] = 1065353216;
  }
  else
  {
    +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
    v60 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v60, "dofStrength");
    v62 = 0.1 / v61;
    v55[2].f32[0] = v62;

  }
  v63 = v19[4];
  if (v63)
  {
    v64 = *(_QWORD *)(v63 + 32);
    v65 = *(_QWORD *)(v19[1] + 96);
    v66 = v28;
    if (v64 >= (*(_QWORD *)(v19[1] + 104) - v65) >> 3)
      v63 = 0;
    else
      v63 = *(_QWORD *)(*(_QWORD *)(v65 + 8 * v64) + 16);
  }
  else
  {
    v66 = v28;
  }
  **(_QWORD **)(*((_QWORD *)this + 23) + 96) = v63;
  v67 = v19[5];
  if (v67)
  {
    v68 = *(_QWORD *)(v67 + 32);
    v69 = *(_QWORD *)(v19[1] + 96);
    if (v68 >= (*(_QWORD *)(v19[1] + 104) - v69) >> 3)
      v67 = 0;
    else
      v67 = *(_QWORD *)(*(_QWORD *)(v69 + 8 * v68) + 16);
  }
  *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 23) + 96) + 8) = v67;
  ggl::CommandBuffer::pushRenderItem(v66, *((ggl::RenderItem **)this + 25));
  v70 = v19[7];
  if (v70)
  {
    v71 = *(_QWORD *)(v70 + 32);
    v72 = *(_QWORD *)(v19[1] + 96);
    v73 = v43;
    if (v71 >= (*(_QWORD *)(v19[1] + 104) - v72) >> 3)
      v70 = 0;
    else
      v70 = *(_QWORD *)(*(_QWORD *)(v72 + 8 * v71) + 16);
  }
  else
  {
    v73 = v43;
  }
  **(_QWORD **)(*((_QWORD *)this + 30) + 96) = v70;
  ggl::CommandBuffer::pushRenderItem(v73, *((ggl::RenderItem **)this + 32));
  v74 = v19[7];
  if (v74)
  {
    v75 = *(_QWORD *)(v74 + 32);
    v76 = *(_QWORD *)(v19[1] + 96);
    if (v75 >= (*(_QWORD *)(v19[1] + 104) - v76) >> 3)
      v74 = 0;
    else
      v74 = *(_QWORD *)(*(_QWORD *)(v76 + 8 * v75) + 16);
  }
  **(_QWORD **)(*((_QWORD *)this + 39) + 96) = v74;
  v77 = v19[6];
  if (v77)
  {
    v78 = *(_QWORD *)(v77 + 32);
    v79 = *(_QWORD *)(v19[1] + 96);
    if (v78 >= (*(_QWORD *)(v19[1] + 104) - v79) >> 3)
      v77 = 0;
    else
      v77 = *(_QWORD *)(*(_QWORD *)(v79 + 8 * v78) + 16);
  }
  *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 39) + 96) + 8) = v77;
  ggl::CommandBuffer::pushRenderItem(v30, *((ggl::RenderItem **)this + 43));
  v80 = v19[8];
  if (v80)
  {
    v81 = *(_QWORD *)(v80 + 32);
    v82 = *(_QWORD *)(v19[1] + 96);
    if (v81 >= (*(_QWORD *)(v19[1] + 104) - v82) >> 3)
      v80 = 0;
    else
      v80 = *(_QWORD *)(*(_QWORD *)(v82 + 8 * v81) + 16);
  }
  **(_QWORD **)(*((_QWORD *)this + 41) + 96) = v80;
  ggl::CommandBuffer::pushRenderItem((uint64_t)v131, *((ggl::RenderItem **)this + 44));
  v83 = v19[9];
  if (v83)
  {
    v84 = *(_QWORD *)(v83 + 32);
    v85 = *(_QWORD *)(v19[1] + 96);
    v86 = (uint64_t)v130;
    if (v84 >= (*(_QWORD *)(v19[1] + 104) - v85) >> 3)
      v83 = 0;
    else
      v83 = *(_QWORD *)(*(_QWORD *)(v85 + 8 * v84) + 16);
  }
  else
  {
    v86 = (uint64_t)v130;
  }
  **(_QWORD **)(*((_QWORD *)this + 51) + 96) = v83;
  ggl::CommandBuffer::pushRenderItem(v86, *((ggl::RenderItem **)this + 55));
  v87 = v19[10];
  if (v87)
  {
    v88 = *(_QWORD *)(v87 + 32);
    v89 = *(_QWORD *)(v19[1] + 96);
    if (v88 >= (*(_QWORD *)(v19[1] + 104) - v89) >> 3)
      v87 = 0;
    else
      v87 = *(_QWORD *)(*(_QWORD *)(v89 + 8 * v88) + 16);
  }
  **(_QWORD **)(*((_QWORD *)this + 53) + 96) = v87;
  ggl::CommandBuffer::pushRenderItem((uint64_t)v129, *((ggl::RenderItem **)this + 56));
  v90 = v19[4];
  if (v90)
  {
    v91 = *(_QWORD *)(v90 + 32);
    v92 = *(_QWORD *)(v19[1] + 96);
    v93 = (uint64_t)v128;
    if (v91 >= (*(_QWORD *)(v19[1] + 104) - v92) >> 3)
      v90 = 0;
    else
      v90 = *(_QWORD *)(*(_QWORD *)(v92 + 8 * v91) + 16);
  }
  else
  {
    v93 = (uint64_t)v128;
  }
  **(_QWORD **)(*((_QWORD *)this + 14) + 96) = v90;
  v94 = v19[5];
  if (v94)
  {
    v95 = *(_QWORD *)(v94 + 32);
    v96 = *(_QWORD *)(v19[1] + 96);
    if (v95 >= (*(_QWORD *)(v19[1] + 104) - v96) >> 3)
      v94 = 0;
    else
      v94 = *(_QWORD *)(*(_QWORD *)(v96 + 8 * v95) + 16);
  }
  *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 14) + 96) + 8) = v94;
  v97 = v19[11];
  if (v97)
  {
    v98 = *(_QWORD *)(v97 + 32);
    v99 = *(_QWORD *)(v19[1] + 96);
    if (v98 >= (*(_QWORD *)(v19[1] + 104) - v99) >> 3)
      v97 = 0;
    else
      v97 = *(_QWORD *)(*(_QWORD *)(v99 + 8 * v98) + 16);
  }
  *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 14) + 96) + 16) = v97;
  v100 = v19[12];
  if (v100)
  {
    v101 = *(_QWORD *)(v100 + 32);
    v102 = *(_QWORD *)(v19[1] + 96);
    if (v101 >= (*(_QWORD *)(v19[1] + 104) - v102) >> 3)
      v100 = 0;
    else
      v100 = *(_QWORD *)(*(_QWORD *)(v102 + 8 * v101) + 16);
  }
  *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 14) + 96) + 24) = v100;
  ggl::CommandBuffer::pushRenderItem(v93, *((ggl::RenderItem **)this + 18));
  if (v54)
  {
    v103 = v53[8];
    if (v103 <= v54)
      v103 = v54;
    v53[7] = 0;
    v53[8] = v103;
  }
  if (!v137)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(_QWORD *))(*v137 + 48))(v137);
  result = v137;
  if (v137 == v136)
  {
    v105 = 4;
    result = v136;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v105))();
  }
  else if (v137)
  {
    v105 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v105))();
  }
  return result;
}

void sub_19FA79C8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  void *v27;
  void *v28;

  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a13);
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)&a27);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::realistic::PostchainRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::realistic::PostchainRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "PostchainLayout", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void std::__function::__func<md::realistic::PostchainRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::realistic::PostchainRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::realistic::PostchainRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::realistic::PostchainRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D5728;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::realistic::PostchainRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::realistic::PostchainRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D5728;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::realistic::PostchainRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::realistic::PostchainRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "PostchainLayout", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void std::__function::__func<md::realistic::PostchainRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::realistic::PostchainRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::realistic::PostchainRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::realistic::PostchainRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D56E0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::realistic::PostchainRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::realistic::PostchainRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D56E0;
  a2[1] = v2;
  return result;
}

md::realistic::PostchainRenderLayer *md::realistic::PostchainRenderLayer::PostchainRenderLayer(md::realistic::PostchainRenderLayer *this, md::realistic::RealisticRenderer *a2)
{
  char *v3;
  __int16 v4;
  __int16 v5;
  char *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  char *v21;
  unsigned __int8 v22;
  __int128 v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  _QWORD *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  char *v66;
  unsigned __int8 v67;
  __int128 v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  _QWORD *v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t *v109;
  unint64_t v110;
  char *v111;
  unsigned __int8 v112;
  __int128 v113;
  unint64_t *v114;
  unint64_t v115;
  unint64_t v116;
  __int128 v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  unint64_t *v123;
  unint64_t v124;
  _QWORD *v125;
  _QWORD *v126;
  _QWORD *v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  _QWORD *v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t *v144;
  unint64_t v145;
  char *v146;
  unsigned __int8 v147;
  __int128 v148;
  unint64_t *v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t *v152;
  unint64_t v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  unint64_t *v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t *v162;
  unint64_t v163;
  char *v164;
  unsigned __int8 v165;
  __int128 v166;
  unint64_t *v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t *v170;
  unint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  unint64_t *v175;
  unint64_t v176;
  _QWORD *v177;
  _QWORD *v178;
  _QWORD *v179;
  uint64_t v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  unint64_t *v184;
  unint64_t v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  uint64_t v189;
  _QWORD *v190;
  uint64_t v191;
  _QWORD *v192;
  uint64_t v193;
  unint64_t *v194;
  unint64_t v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  _QWORD *v199;
  _QWORD *v200;
  _QWORD *v201;
  uint64_t v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  unint64_t *v206;
  unint64_t v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  uint64_t v211;
  _QWORD *v212;
  uint64_t v213;
  _QWORD *v214;
  uint64_t v215;
  unint64_t *v216;
  unint64_t v217;
  std::__shared_weak_count *v218;
  unint64_t *v219;
  unint64_t v220;
  uint64_t v221;
  std::__shared_weak_count *v222;
  uint64_t v223;
  unint64_t *v224;
  unint64_t v225;
  _QWORD *v226;
  uint64_t v227;
  std::__shared_weak_count *v228;
  unint64_t *v229;
  unint64_t v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  uint64_t v234;
  std::__shared_weak_count *v235;
  uint64_t v236;
  unint64_t *v237;
  unint64_t v238;
  _QWORD *v239;
  uint64_t v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  std::__shared_weak_count *v244;
  unint64_t *v245;
  unint64_t v246;
  _QWORD *v247;
  _QWORD *v248;
  _QWORD *v249;
  uint64_t v250;
  std::__shared_weak_count *v251;
  unint64_t *v252;
  unint64_t v253;
  unint64_t *v254;
  unint64_t v255;
  std::__shared_weak_count *v256;
  unint64_t *v257;
  unint64_t v258;
  _QWORD *v259;
  _QWORD *v260;
  _QWORD *v261;
  uint64_t v262;
  std::__shared_weak_count *v263;
  unint64_t *v264;
  unint64_t v265;
  unint64_t *v266;
  unint64_t v267;
  std::__shared_weak_count *v268;
  unint64_t *v269;
  unint64_t v270;
  _QWORD *v271;
  std::__shared_weak_count *v272;
  unint64_t *v273;
  unint64_t v274;
  _QWORD *v275;
  ggl::CommonMesh::Pos2UVMesh *v276;
  std::__shared_weak_count *v277;
  unint64_t *v278;
  unint64_t v279;
  uint64_t v280;
  unint64_t v281;
  uint64_t v282;
  unint64_t v283;
  std::__shared_weak_count *v284;
  unint64_t *v285;
  unint64_t v286;
  uint64_t v287;
  __int128 v288;
  uint64_t v289;
  std::__shared_weak_count *v295;
  unint64_t *v296;
  uint64_t v297;
  __int128 v298;
  std::__shared_weak_count_vtbl *v299;
  uint64_t v300;
  unint64_t v301;
  unint64_t v302;
  std::__shared_weak_count *v303;
  unint64_t *v304;
  unint64_t v305;
  unint64_t v306;
  int64x2_t *v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  int64x2_t *v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  int64x2_t *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  int64x2_t *v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  int64x2_t *v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  int64x2_t *v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  int64x2_t *v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  unint64_t v342;
  unint64_t v343;
  _QWORD *v344;
  int v345;
  int v346;
  unint64_t v347;
  unint64_t v348;
  std::__shared_weak_count *v349;
  unint64_t *v350;
  unint64_t v351;
  __int128 v352;
  _QWORD *v353;
  int v354;
  int v355;
  unint64_t v356;
  unint64_t v357;
  unsigned __int8 v359;
  unsigned __int8 v360;
  unsigned __int8 v361;
  unsigned __int8 v362;
  unsigned __int8 v363;
  unsigned __int8 v364;
  unsigned __int8 v365;
  unsigned __int8 v366;
  unsigned __int8 v367;
  unsigned __int8 v368;
  unsigned __int8 v369;
  ggl::FlyoverPostchainFGBlurShader *v370;
  unsigned __int8 v371;
  unsigned __int8 v372;
  unsigned __int8 v373;
  ggl::FlyoverPostchainBGBlurShader *v374;
  unsigned __int8 v375;
  unsigned __int8 v376;
  unsigned __int8 v377;
  unsigned __int8 v378;
  unsigned __int8 v379;
  unsigned __int8 v380;
  unsigned __int8 v381;
  unsigned __int8 v382;
  unsigned __int8 v383;
  unsigned __int8 v384;
  unsigned __int8 v385;
  unsigned __int8 v386;
  unsigned __int8 v387;
  unsigned __int8 v388;
  unsigned __int8 v389;
  unsigned __int8 v390;
  unsigned __int8 v391;
  unsigned __int8 v392;
  unsigned __int8 v393;
  int v394;
  unsigned __int8 v395;
  unsigned __int8 v396;
  unsigned __int8 v397;
  unsigned __int8 v398;
  _BYTE v399[32];
  __int16 v400;
  std::__shared_weak_count_vtbl *v401;
  uint64_t v402;
  std::__shared_weak_count *v403;
  __int16 v404;
  char v405;
  uint64_t v406;
  __int16 v407;
  char v408;
  uint64_t v409;
  __int16 v410;
  char v411;
  _BYTE v412[36];
  _BYTE v413[12];
  __int128 v414;
  uint64_t v415;
  _OWORD v416[2];
  uint64_t v417;

  v417 = *MEMORY[0x1E0C80C00];
  v3 = (char *)a2 + 120;
  v4 = *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)a2 + 15) + 32) + 19);
  *(_WORD *)v412 = (v4 << 8) | 5;
  *(_WORD *)&v412[2] = (v4 << 8) | 6;
  *(_WORD *)&v412[4] = (v4 << 8) | 7;
  *(_WORD *)&v412[6] = (v4 << 8) | 8;
  *(_WORD *)&v412[8] = (v4 << 8) | 9;
  *(_WORD *)&v412[10] = (v4 << 8) | 0xA;
  *(_WORD *)&v412[12] = (v4 << 8) | 0xB;
  md::realistic::RealisticRenderLayer::RealisticRenderLayer((uint64_t)this, 7, (uint64_t)a2, v412, 7);
  *(_QWORD *)this = &off_1E42B0190;
  *(_WORD *)((char *)this + 49) = (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v3 + 32) + 19) << 8) | 5;
  *(_WORD *)((char *)this + 51) = (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v3 + 32) + 19) << 8) | 6;
  *(_WORD *)((char *)this + 53) = (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v3 + 32) + 19) << 8) | 7;
  *(_WORD *)((char *)this + 55) = (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v3 + 32) + 19) << 8) | 8;
  *(_WORD *)((char *)this + 57) = (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v3 + 32) + 19) << 8) | 9;
  *(_WORD *)((char *)this + 59) = (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v3 + 32) + 19) << 8) | 0xA;
  v5 = (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v3 + 32) + 19) << 8) | 0xB;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  v6 = (char *)this + 128;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *(_WORD *)((char *)this + 61) = v5;
  *((_OWORD *)this + 15) = 0u;
  *((_QWORD *)this + 56) = 0;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  v7 = objc_msgSend(*(id *)(*((_QWORD *)this + 5) + 104), "format");
  v8 = *(_DWORD *)v7;
  v9 = *(_QWORD *)(v7 + 8);
  v10 = *(_DWORD *)(v7 + 24);
  v416[0] = *(_OWORD *)v7;
  *(_OWORD *)((char *)v416 + 12) = *(_OWORD *)(v7 + 12);
  v414 = *(_OWORD *)(v7 + 4);
  v415 = *(_QWORD *)(v7 + 20);
  v11 = operator new(0xE8uLL);
  v11[1] = 0;
  v11[2] = 0;
  *v11 = &off_1E42E18A0;
  v12 = ggl::BufferData::BufferData((uint64_t)(v11 + 3), qword_1EE561038, 2, 1, 6, 1);
  v11[28] = ggl::PostchainCommon::CameraProperties::reflection(void)::reflection;
  v11[3] = &off_1E42B91D0;
  v13 = (std::__shared_weak_count *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 8) = v12;
  *((_QWORD *)this + 9) = v11;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 200) + 80);
  v18 = *(_QWORD *)(v16 + 368);
  v17 = *(_QWORD *)(v16 + 376);
  *(_QWORD *)v399 = v18;
  *(_QWORD *)&v399[8] = v17;
  if (v17)
  {
    v19 = (unint64_t *)(v17 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v402 = 0;
  v21 = (char *)operator new(0x198uLL);
  *((_QWORD *)v21 + 1) = 0;
  *((_QWORD *)v21 + 2) = 0;
  *(_QWORD *)v21 = &off_1E42E0AA0;
  *(_OWORD *)v412 = *(_OWORD *)v7;
  *(_OWORD *)&v412[16] = *(_OWORD *)(v7 + 16);
  if ((v22 & 1) == 0
  {
    if ((v359 & 1) == 0
    {
      if ((v378 & 1) == 0
      {
        if ((v393 & 1) == 0
        {
          ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos2UVReflection;
        }
        ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r;
        unk_1ECE43AC8 = 1;
      }
      ggl::FlyoverPostchain::CompositePipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r;
      unk_1EE58A660 = &ggl::FlyoverPostchain::pipelineDataCompositePipelineDeviceStructs(void)::ref;
      qword_1EE58A668 = 0;
      if ((v379 & 1) == 0
      {
        ggl::FlyoverPostchain::pipelineDataCompositePipelineConstantStructs(void)::ref = (uint64_t)ggl::PostchainCommon::CameraProperties::reflection(void)::reflection;
      }
      qword_1EE58A670 = (uint64_t)&ggl::FlyoverPostchain::pipelineDataCompositePipelineConstantStructs(void)::ref;
      unk_1EE58A678 = xmmword_19FFB3050;
    }
    ggl::FlyoverPostchain::CompositePipelineState::typedReflection(void)::ref = (uint64_t)&ggl::FlyoverPostchain::CompositePipelineSetup::typedReflection(void)::ref;
    if ((v360 & 1) == 0
    {
      ggl::FlyoverPostchainCompositeShader::typedReflection(void)::ref = (uint64_t)"FlyoverPostchainCompositeShader";
      if ((v380 & 1) == 0
      {
        v394 = ggl::crc32::compute<38ul>("FlyoverPostchainCompositeShaderVertex");
        qword_1ECE353B8 = (uint64_t)"FlyoverPostchainCompositeShader";
        unk_1ECE353C0 = ggl::flyoverPostchainCompositeShaderVertShaderFunctionAttributes(void)::ref;
        qword_1ECE353C8 = 1;
        unk_1ECE353D0 = &ggl::flyoverPostchainCompositeShaderVertShaderFunctionConstantMapping(void)::ref;
        qword_1ECE353D8 = 0;
        unk_1ECE353E0 = &ggl::flyoverPostchainCompositeShaderVertShaderFunctionBufferMapping(void)::ref;
        qword_1ECE353E8 = 0;
        unk_1ECE353F0 = &ggl::flyoverPostchainCompositeShaderVertShaderFunctionTextureMapping(void)::ref;
        ggl::flyoverPostchainCompositeShaderVertexFunctionDescriptor(void)::ref = v394;
        *(_DWORD *)algn_1ECE353B4 = 0;
        qword_1ECE353F8 = 0;
        unk_1ECE35400 = &ggl::flyoverPostchainCompositeShaderVertShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE35410 = 0;
        unk_1ECE35418 = 0;
        qword_1ECE35408 = 0;
      }
      qword_1ECE347A8 = (uint64_t)&ggl::flyoverPostchainCompositeShaderVertexFunctionDescriptor(void)::ref;
      dword_1ECE347B0 = ggl::crc32::compute<38ul>("FlyoverPostchainCompositeShaderVertex");
      if ((v381 & 1) == 0
      {
        ggl::flyoverPostchainCompositeShaderFragmentFunctionDescriptor(void)::ref = 0x11EFF1393;
        qword_1ECE35760 = (uint64_t)"FlyoverPostchainCompositeShader";
        unk_1ECE35768 = 0;
        qword_1ECE35770 = 0;
        unk_1ECE35778 = &ggl::flyoverPostchainCompositeShaderFragShaderFunctionConstantMapping(void)::ref;
        qword_1ECE35780 = 1;
        unk_1ECE35788 = &ggl::flyoverPostchainCompositeShaderFragShaderFunctionBufferMapping(void)::ref;
        qword_1ECE35790 = 0;
        unk_1ECE35798 = &ggl::flyoverPostchainCompositeShaderFragShaderFunctionTextureMapping(void)::ref;
        qword_1ECE357A0 = 4;
        unk_1ECE357A8 = &ggl::flyoverPostchainCompositeShaderFragShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE357B8 = 0;
        unk_1ECE357C0 = 0;
        qword_1ECE357B0 = 4;
      }
      qword_1ECE347B8 = (uint64_t)&ggl::flyoverPostchainCompositeShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE347C0 = 520033171;
      qword_1ECE347C8 = (uint64_t)ggl::flyoverPostchainCompositeShaderShaderConstants(void)::ref;
      unk_1ECE347D0 = 1;
      qword_1ECE347D8 = (uint64_t)ggl::flyoverPostchainCompositeShaderShaderTextures(void)::ref;
      unk_1ECE347E0 = 4;
      qword_1ECE347E8 = (uint64_t)ggl::flyoverPostchainCompositeShaderShaderSamplers(void)::ref;
      unk_1ECE347F0 = 4;
    }
    qword_1EE58A608 = (uint64_t)&ggl::FlyoverPostchainCompositeShader::typedReflection(void)::ref;
    if ((v361 & 1) == 0
    {
      ggl::FlyoverPostchain::pipelineStateCompositePipelineAttributeStructBinding(void)::attr = 0;
      *(_QWORD *)algn_1EE58A968 = 0;
      qword_1EE58A970 = (uint64_t)"";
      dword_1EE58A978 = 0;
      qword_1EE58A980 = (uint64_t)&ggl::FlyoverPostchain::pipelineStateCompositePipelineAttributeBinding_0(void)::attr;
      unk_1EE58A988 = 2;
    }
    qword_1EE58A610 = (uint64_t)&ggl::FlyoverPostchain::pipelineStateCompositePipelineAttributeStructBinding(void)::attr;
    *(_QWORD *)algn_1EE58A618 = 1;
    qword_1EE58A620 = 0;
    unk_1EE58A628 = 4;
    qword_1EE58A630 = (uint64_t)&ggl::FlyoverPostchain::pipelineStateCompositePipelineDeviceStructBinding(void)::ref;
    unk_1EE58A638 = 0;
    if ((v362 & 1) == 0
    {
      ggl::FlyoverPostchain::pipelineStateCompositePipelineConstantStructBinding(void)::ref = 0;
      *(_QWORD *)algn_1EE58A9A8 = 0;
      qword_1EE58A9B0 = (uint64_t)"cameraProperties";
      dword_1EE58A9B8 = 3;
      qword_1EE58A9C0 = (uint64_t)&ggl::FlyoverPostchain::pipelineStateCompositePipelineConstantCameraPropertiesBinding(void)::reflection;
      unk_1EE58A9C8 = 5;
    }
    qword_1EE58A640 = (uint64_t)&ggl::FlyoverPostchain::pipelineStateCompositePipelineConstantStructBinding(void)::ref;
    *(_QWORD *)algn_1EE58A648 = 1;
  }
  v23 = *(_OWORD *)v399;
  if (*(_QWORD *)&v399[8])
  {
    v24 = (unint64_t *)(*(_QWORD *)&v399[8] + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
    *((_DWORD *)v21 + 14) = 0;
    *((_QWORD *)v21 + 5) = 0;
    *((_QWORD *)v21 + 6) = 0;
    *((_QWORD *)v21 + 3) = &off_1E42B6760;
    *((_QWORD *)v21 + 4) = 0;
    *((_QWORD *)v21 + 8) = &ggl::FlyoverPostchain::CompositePipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v21 + 72) = v23;
    do
      v26 = __ldxr(v24);
    while (__stxr(v26 + 1, v24));
  }
  else
  {
    *((_DWORD *)v21 + 14) = 0;
    *((_QWORD *)v21 + 5) = 0;
    *((_QWORD *)v21 + 6) = 0;
    *((_QWORD *)v21 + 3) = &off_1E42B6760;
    *((_QWORD *)v21 + 4) = 0;
    *((_QWORD *)v21 + 8) = &ggl::FlyoverPostchain::CompositePipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v21 + 72) = v23;
  }
  v21[136] = 0;
  *(_OWORD *)(v21 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v21 + 156) = 0;
  *(_QWORD *)(v21 + 172) = 0;
  *(_QWORD *)(v21 + 164) = 0;
  v21[184] = 0;
  *(_OWORD *)(v21 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v21 + 204) = 0;
  *(_QWORD *)(v21 + 220) = 0;
  *(_QWORD *)(v21 + 212) = 0;
  v21[232] = 0;
  *(_OWORD *)(v21 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v21 + 252) = 0;
  *(_QWORD *)(v21 + 268) = 0;
  *(_QWORD *)(v21 + 260) = 0;
  v27 = *(_OWORD *)&v412[16];
  *(_OWORD *)(v21 + 280) = *(_OWORD *)v412;
  *(_OWORD *)(v21 + 296) = v27;
  v21[312] = 0;
  *((_QWORD *)v21 + 48) = 0;
  *((_OWORD *)v21 + 22) = 0u;
  *((_OWORD *)v21 + 23) = 0u;
  *((_OWORD *)v21 + 20) = 0u;
  *((_OWORD *)v21 + 21) = 0u;
  *((_QWORD *)v21 + 49) = 0x100000001;
  v21[400] = 0;
  v21[88] = 0;
  *(_WORD *)(v21 + 89) = v409;
  v21[91] = BYTE2(v409);
  *(_OWORD *)(v21 + 92) = xmmword_19FFB3060;
  *(_QWORD *)(v21 + 108) = v402;
  *((_DWORD *)v21 + 29) = 0;
  *((_QWORD *)v21 + 15) = 0;
  *((_DWORD *)v21 + 32) = 0;
  v21[132] = 15;
  if (*((_QWORD *)&v23 + 1))
  {
    v28 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v23 + 1) + 16))(*((_QWORD *)&v23 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v23 + 1));
    }
  }
  *((_QWORD *)v21 + 3) = &off_1E42B8790;
  v30 = (std::__shared_weak_count *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 12) = v21 + 24;
  *((_QWORD *)this + 13) = v21;
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  if (*(_QWORD *)&v399[8])
  {
    v33 = (unint64_t *)(*(_QWORD *)&v399[8] + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)&v399[8] + 16))(*(_QWORD *)&v399[8]);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v399[8]);
    }
  }
  v35 = operator new(0x100uLL);
  v36 = v35;
  v35[1] = 0;
  v35[2] = 0;
  *v35 = &off_1E42E0A68;
  v37 = v35 + 3;
  v38 = *((_QWORD *)this + 12);
  v39 = (std::__shared_weak_count *)*((_QWORD *)this + 13);
  if (v39)
  {
    v40 = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
    ggl::PipelineSetup::PipelineSetup(v35 + 3, v38, (uint64_t)v39);
    v42 = (unint64_t *)&v39->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v35 + 3, v38, 0);
  }
  v36[3] = &off_1E42B8760;
  v44 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 14) = v37;
  *((_QWORD *)this + 15) = v36;
  if (v44)
  {
    v45 = (unint64_t *)&v44->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v47 = *((_QWORD *)this + 14);
  v48 = *(_QWORD **)(v47 + 64);
  v48[1] = 0;
  v49 = *((_QWORD *)this + 8);
  *v48 = v49;
  v50 = *(_QWORD **)(v47 + 160);
  v51 = *((_QWORD *)this + 9);
  if (v51)
  {
    v52 = (unint64_t *)(v51 + 8);
    do
      v53 = __ldxr(v52);
    while (__stxr(v53 + 1, v52));
  }
  v54 = (std::__shared_weak_count *)v50[1];
  *v50 = v49;
  v50[1] = v51;
  if (v54)
  {
    v55 = (unint64_t *)&v54->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  v57 = operator new(0xF0uLL);
  v57[1] = 0;
  v57[2] = 0;
  *v57 = &off_1E42DEA08;
  v57[5] = 0;
  v57[6] = 0;
  v57[4] = 0;
  *((_DWORD *)v57 + 14) = 0;
  v57[3] = &off_1E42B5DE8;
  *(_QWORD *)((char *)v57 + 60) = 65537;
  *((_DWORD *)v57 + 17) = 0;
  v57[9] = 1;
  *((_WORD *)v57 + 40) = 0;
  *((_BYTE *)v57 + 82) = 3;
  *(_QWORD *)((char *)v57 + 91) = 0;
  *(_QWORD *)((char *)v57 + 83) = 0;
  *((_BYTE *)v57 + 99) = 0;
  *(_QWORD *)((char *)v57 + 156) = 0;
  *(_QWORD *)((char *)v57 + 148) = 0;
  *((_WORD *)v57 + 106) = 257;
  v57[27] = 0;
  v57[28] = 0;
  *((_BYTE *)v57 + 232) = 0;
  v58 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 10) = v57 + 3;
  *((_QWORD *)this + 11) = v57;
  if (v58)
  {
    v59 = (unint64_t *)&v58->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  *(_BYTE *)(*((_QWORD *)this + 10) + 58) = 3;
  v409 = 0;
  v406 = 0;
  v61 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 200) + 80);
  v63 = *(_QWORD *)(v61 + 392);
  v62 = *(_QWORD *)(v61 + 400);
  *(_QWORD *)v412 = v63;
  *(_QWORD *)&v412[8] = v62;
  if (v62)
  {
    v64 = (unint64_t *)(v62 + 8);
    do
      v65 = __ldxr(v64);
    while (__stxr(v65 + 1, v64));
  }
  v66 = (char *)operator new(0x198uLL);
  *((_QWORD *)v66 + 1) = 0;
  *((_QWORD *)v66 + 2) = 0;
  *(_QWORD *)v66 = &off_1E42E0B10;
  if ((v67 & 1) == 0
  {
    if ((v363 & 1) == 0
    {
      if ((v382 & 1) == 0
      {
        if ((v395 & 1) == 0
        {
          ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos2UVReflection;
        }
        ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r;
        unk_1ECE43AC8 = 1;
      }
      ggl::FlyoverPostchain::DepthSplitPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r;
      unk_1EE58A6F0 = &ggl::FlyoverPostchain::pipelineDataDepthSplitPipelineDeviceStructs(void)::ref;
      qword_1EE58A6F8 = 0;
      if ((v383 & 1) == 0
      {
        ggl::FlyoverPostchain::pipelineDataDepthSplitPipelineConstantStructs(void)::ref = (uint64_t)ggl::PostchainCommon::CameraProperties::reflection(void)::reflection;
      }
      qword_1EE58A700 = (uint64_t)&ggl::FlyoverPostchain::pipelineDataDepthSplitPipelineConstantStructs(void)::ref;
      unk_1EE58A708 = xmmword_19FFB2DB0;
    }
    ggl::FlyoverPostchain::DepthSplitPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::FlyoverPostchain::DepthSplitPipelineSetup::typedReflection(void)::ref;
    if ((v364 & 1) == 0
    {
      ggl::FlyoverPostchainSplitFrameShader::typedReflection(void)::ref = (uint64_t)"FlyoverPostchainSplitFrameShader";
      if ((v384 & 1) == 0
      {
        qword_1ECE355F8 = (uint64_t)"FlyoverPostchainSplitFrameShader";
        unk_1ECE35600 = ggl::flyoverPostchainSplitFrameShaderVertShaderFunctionAttributes(void)::ref;
        qword_1ECE35608 = 1;
        unk_1ECE35610 = &ggl::flyoverPostchainSplitFrameShaderVertShaderFunctionConstantMapping(void)::ref;
        qword_1ECE35618 = 0;
        unk_1ECE35620 = &ggl::flyoverPostchainSplitFrameShaderVertShaderFunctionBufferMapping(void)::ref;
        qword_1ECE35628 = 0;
        unk_1ECE35630 = &ggl::flyoverPostchainSplitFrameShaderVertShaderFunctionTextureMapping(void)::ref;
        ggl::flyoverPostchainSplitFrameShaderVertexFunctionDescriptor(void)::ref = 2595229844;
        qword_1ECE35638 = 0;
        unk_1ECE35640 = &ggl::flyoverPostchainSplitFrameShaderVertShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE35650 = 0;
        unk_1ECE35658 = 0;
        qword_1ECE35648 = 0;
      }
      qword_1ECE348C8 = (uint64_t)&ggl::flyoverPostchainSplitFrameShaderVertexFunctionDescriptor(void)::ref;
      dword_1ECE348D0 = -1699737452;
      if ((v385 & 1) == 0
      {
        ggl::flyoverPostchainSplitFrameShaderFragmentFunctionDescriptor(void)::ref = 0x148DF32F9;
        qword_1ECE359B0 = (uint64_t)"FlyoverPostchainSplitFrameShader";
        unk_1ECE359B8 = 0;
        qword_1ECE359C0 = 0;
        unk_1ECE359C8 = &ggl::flyoverPostchainSplitFrameShaderFragShaderFunctionConstantMapping(void)::ref;
        qword_1ECE359D0 = 1;
        unk_1ECE359D8 = &ggl::flyoverPostchainSplitFrameShaderFragShaderFunctionBufferMapping(void)::ref;
        qword_1ECE359E0 = 0;
        unk_1ECE359E8 = &ggl::flyoverPostchainSplitFrameShaderFragShaderFunctionTextureMapping(void)::ref;
        qword_1ECE359F0 = 2;
        unk_1ECE359F8 = &ggl::flyoverPostchainSplitFrameShaderFragShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE35A08 = 0;
        unk_1ECE35A10 = 0;
        qword_1ECE35A00 = 2;
      }
      qword_1ECE348D8 = (uint64_t)&ggl::flyoverPostchainSplitFrameShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE348E0 = 1222587129;
      qword_1ECE348E8 = (uint64_t)ggl::flyoverPostchainSplitFrameShaderShaderConstants(void)::ref;
      unk_1ECE348F0 = 1;
      qword_1ECE348F8 = (uint64_t)ggl::flyoverPostchainSplitFrameShaderShaderTextures(void)::ref;
      unk_1ECE34900 = 2;
      qword_1ECE34908 = (uint64_t)ggl::flyoverPostchainSplitFrameShaderShaderSamplers(void)::ref;
      unk_1ECE34910 = 2;
    }
    qword_1EE58A698 = (uint64_t)&ggl::FlyoverPostchainSplitFrameShader::typedReflection(void)::ref;
    if ((v365 & 1) == 0
    {
      ggl::FlyoverPostchain::pipelineStateDepthSplitPipelineAttributeStructBinding(void)::attr = 0;
      *(_QWORD *)algn_1EE58A9F8 = 0;
      qword_1EE58AA00 = (uint64_t)"";
      dword_1EE58AA08 = 0;
      qword_1EE58AA10 = (uint64_t)&ggl::FlyoverPostchain::pipelineStateDepthSplitPipelineAttributeBinding_0(void)::attr;
      unk_1EE58AA18 = 2;
    }
    qword_1EE58A6A0 = (uint64_t)&ggl::FlyoverPostchain::pipelineStateDepthSplitPipelineAttributeStructBinding(void)::attr;
    *(_QWORD *)algn_1EE58A6A8 = 1;
    qword_1EE58A6B0 = 0;
    unk_1EE58A6B8 = 2;
    qword_1EE58A6C0 = (uint64_t)&ggl::FlyoverPostchain::pipelineStateDepthSplitPipelineDeviceStructBinding(void)::ref;
    unk_1EE58A6C8 = 0;
    if ((v366 & 1) == 0
    {
      ggl::FlyoverPostchain::pipelineStateDepthSplitPipelineConstantStructBinding(void)::ref = 0;
      *(_QWORD *)algn_1EE58AA38 = 0;
      qword_1EE58AA40 = (uint64_t)"cameraProperties";
      dword_1EE58AA48 = 3;
      qword_1EE58AA50 = (uint64_t)&ggl::FlyoverPostchain::pipelineStateDepthSplitPipelineConstantCameraPropertiesBinding(void)::reflection;
      unk_1EE58AA58 = 5;
    }
    qword_1EE58A6D0 = (uint64_t)&ggl::FlyoverPostchain::pipelineStateDepthSplitPipelineConstantStructBinding(void)::ref;
    *(_QWORD *)algn_1EE58A6D8 = 1;
  }
  v68 = *(_OWORD *)v412;
  if (*(_QWORD *)&v412[8])
  {
    v69 = (unint64_t *)(*(_QWORD *)&v412[8] + 8);
    do
      v70 = __ldxr(v69);
    while (__stxr(v70 + 1, v69));
    *((_DWORD *)v66 + 14) = 0;
    *((_QWORD *)v66 + 5) = 0;
    *((_QWORD *)v66 + 6) = 0;
    *((_QWORD *)v66 + 3) = &off_1E42B6760;
    *((_QWORD *)v66 + 4) = 0;
    *((_QWORD *)v66 + 8) = &ggl::FlyoverPostchain::DepthSplitPipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v66 + 72) = v68;
    do
      v71 = __ldxr(v69);
    while (__stxr(v71 + 1, v69));
  }
  else
  {
    *((_DWORD *)v66 + 14) = 0;
    *((_QWORD *)v66 + 5) = 0;
    *((_QWORD *)v66 + 6) = 0;
    *((_QWORD *)v66 + 3) = &off_1E42B6760;
    *((_QWORD *)v66 + 4) = 0;
    *((_QWORD *)v66 + 8) = &ggl::FlyoverPostchain::DepthSplitPipelineState::typedReflection(void)::ref;
    *((_QWORD *)v66 + 9) = v68;
    *((_QWORD *)v66 + 10) = 0;
  }
  v66[184] = 0;
  *(_OWORD *)(v66 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v66 + 204) = 0;
  *(_QWORD *)(v66 + 220) = 0;
  *(_QWORD *)(v66 + 212) = 0;
  v66[232] = 0;
  *(_OWORD *)(v66 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v66 + 252) = 0;
  *(_QWORD *)(v66 + 268) = 0;
  *(_QWORD *)(v66 + 260) = 0;
  *((_DWORD *)v66 + 70) = v8;
  *((_DWORD *)v66 + 71) = v8;
  *((_QWORD *)v66 + 36) = v9;
  *((_QWORD *)v66 + 37) = 2;
  *((_DWORD *)v66 + 76) = v10;
  *((_DWORD *)v66 + 77) = 0;
  v66[312] = 0;
  *((_OWORD *)v66 + 20) = 0u;
  *((_OWORD *)v66 + 21) = 0u;
  *((_OWORD *)v66 + 22) = 0u;
  *((_OWORD *)v66 + 23) = 0u;
  *((_QWORD *)v66 + 48) = 0;
  *((_QWORD *)v66 + 49) = 0x100000001;
  v66[400] = 0;
  v66[88] = 0;
  v66[91] = v411;
  *(_WORD *)(v66 + 89) = v410;
  *(_OWORD *)(v66 + 92) = xmmword_19FFB3060;
  *(_QWORD *)(v66 + 108) = v409;
  *(_QWORD *)(v66 + 124) = 0;
  *(_QWORD *)(v66 + 116) = 0;
  v66[132] = 15;
  v66[136] = 0;
  *(_WORD *)(v66 + 137) = v407;
  v66[139] = v408;
  *(_OWORD *)(v66 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v66 + 156) = v406;
  *(_QWORD *)(v66 + 164) = 0;
  *(_QWORD *)(v66 + 172) = 0;
  v66[180] = 15;
  if (*((_QWORD *)&v68 + 1))
  {
    v72 = (unint64_t *)(*((_QWORD *)&v68 + 1) + 8);
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v68 + 1) + 16))(*((_QWORD *)&v68 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v68 + 1));
    }
  }
  *((_QWORD *)v66 + 3) = &off_1E42B87E0;
  v74 = (std::__shared_weak_count *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 21) = v66 + 24;
  *((_QWORD *)this + 22) = v66;
  if (v74)
  {
    v75 = (unint64_t *)&v74->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  v77 = *(std::__shared_weak_count **)&v412[8];
  if (*(_QWORD *)&v412[8])
  {
    v78 = (unint64_t *)(*(_QWORD *)&v412[8] + 8);
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  v80 = operator new(0x100uLL);
  v81 = v80;
  v80[1] = 0;
  v80[2] = 0;
  *v80 = &off_1E42E0AD8;
  v82 = v80 + 3;
  v83 = *((_QWORD *)this + 21);
  v84 = (std::__shared_weak_count *)*((_QWORD *)this + 22);
  if (v84)
  {
    v85 = (unint64_t *)&v84->__shared_owners_;
    do
      v86 = __ldxr(v85);
    while (__stxr(v86 + 1, v85));
    ggl::PipelineSetup::PipelineSetup(v80 + 3, v83, (uint64_t)v84);
    v87 = (unint64_t *)&v84->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v80 + 3, v83, 0);
  }
  v81[3] = &off_1E42B87B0;
  v89 = (std::__shared_weak_count *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 23) = v82;
  *((_QWORD *)this + 24) = v81;
  if (v89)
  {
    v90 = (unint64_t *)&v89->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  v92 = *((_QWORD *)this + 23);
  v93 = *(_QWORD **)(v92 + 64);
  v93[1] = 0;
  v94 = *((_QWORD *)this + 8);
  *v93 = v94;
  v95 = *(_QWORD **)(v92 + 160);
  v96 = *((_QWORD *)this + 9);
  if (v96)
  {
    v97 = (unint64_t *)(v96 + 8);
    do
      v98 = __ldxr(v97);
    while (__stxr(v98 + 1, v97));
  }
  v99 = (std::__shared_weak_count *)v95[1];
  *v95 = v94;
  v95[1] = v96;
  if (v99)
  {
    v100 = (unint64_t *)&v99->__shared_owners_;
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  v102 = operator new(0xF0uLL);
  v102[1] = 0;
  v102[2] = 0;
  *v102 = &off_1E42DEA08;
  v102[5] = 0;
  v102[6] = 0;
  v102[4] = 0;
  *((_DWORD *)v102 + 14) = 0;
  v102[3] = &off_1E42B5DE8;
  *(_QWORD *)((char *)v102 + 60) = 65537;
  *((_DWORD *)v102 + 17) = 0;
  v102[9] = 1;
  *((_WORD *)v102 + 40) = 0;
  *((_BYTE *)v102 + 82) = 3;
  *(_QWORD *)((char *)v102 + 91) = 0;
  *(_QWORD *)((char *)v102 + 83) = 0;
  *((_BYTE *)v102 + 99) = 0;
  *(_QWORD *)((char *)v102 + 156) = 0;
  *(_QWORD *)((char *)v102 + 148) = 0;
  *((_WORD *)v102 + 106) = 257;
  v102[27] = 0;
  v102[28] = 0;
  *((_BYTE *)v102 + 232) = 0;
  v103 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 19) = v102 + 3;
  *((_QWORD *)this + 20) = v102;
  if (v103)
  {
    v104 = (unint64_t *)&v103->__shared_owners_;
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  *(_BYTE *)(*((_QWORD *)this + 19) + 58) = 3;
  v106 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 200) + 80);
  v108 = *(_QWORD *)(v106 + 416);
  v107 = *(_QWORD *)(v106 + 424);
  *(_QWORD *)v399 = v108;
  *(_QWORD *)&v399[8] = v107;
  if (v107)
  {
    v109 = (unint64_t *)(v107 + 8);
    do
      v110 = __ldxr(v109);
    while (__stxr(v110 + 1, v109));
  }
  v402 = 0;
  v111 = (char *)operator new(0x198uLL);
  *((_QWORD *)v111 + 1) = 0;
  *((_QWORD *)v111 + 2) = 0;
  *(_QWORD *)v111 = &off_1E42E0B80;
  *(_OWORD *)v412 = v414;
  *(_QWORD *)&v412[16] = v415;
  if ((v112 & 1) == 0
  {
    if ((v367 & 1) == 0
    {
      if ((v386 & 1) == 0
      {
        if ((v396 & 1) == 0
        {
          ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos2UVReflection;
        }
        ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r;
        unk_1ECE43AC8 = 1;
      }
      ggl::FlyoverPostchain::DownsampleCoCPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r;
      unk_1EE58A780 = &ggl::FlyoverPostchain::pipelineDataDownsampleCoCPipelineDeviceStructs(void)::ref;
      qword_1EE58A788 = 0;
      unk_1EE58A790 = &ggl::FlyoverPostchain::pipelineDataDownsampleCoCPipelineConstantStructs(void)::ref;
      xmmword_1EE58A798 = xmmword_19FFB2E40;
    }
    ggl::FlyoverPostchain::DownsampleCoCPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::FlyoverPostchain::DownsampleCoCPipelineSetup::typedReflection(void)::ref;
    if ((v368 & 1) == 0
    {
      ggl::FlyoverPostchainDownsampleCoCShader::typedReflection(void)::ref = (uint64_t)"FlyoverPostchainDownsampleCoCShader";
      if ((v387 & 1) == 0
      {
        qword_1ECE35A98 = (uint64_t)"FlyoverPostchainDownsampleCoCShader";
        unk_1ECE35AA0 = ggl::flyoverPostchainDownsampleCoCShaderVertShaderFunctionAttributes(void)::ref;
        qword_1ECE35AA8 = 1;
        unk_1ECE35AB0 = &ggl::flyoverPostchainDownsampleCoCShaderVertShaderFunctionConstantMapping(void)::ref;
        qword_1ECE35AB8 = 0;
        unk_1ECE35AC0 = &ggl::flyoverPostchainDownsampleCoCShaderVertShaderFunctionBufferMapping(void)::ref;
        qword_1ECE35AC8 = 0;
        unk_1ECE35AD0 = &ggl::flyoverPostchainDownsampleCoCShaderVertShaderFunctionTextureMapping(void)::ref;
        ggl::flyoverPostchainDownsampleCoCShaderVertexFunctionDescriptor(void)::ref = 3177222361;
        qword_1ECE35AD8 = 0;
        unk_1ECE35AE0 = &ggl::flyoverPostchainDownsampleCoCShaderVertShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE35AF0 = 0;
        unk_1ECE35AF8 = 0;
        qword_1ECE35AE8 = 0;
      }
      qword_1ECE34A48 = (uint64_t)&ggl::flyoverPostchainDownsampleCoCShaderVertexFunctionDescriptor(void)::ref;
      dword_1ECE34A50 = -1117744935;
      if ((v388 & 1) == 0
      {
        ggl::flyoverPostchainDownsampleCoCShaderFragmentFunctionDescriptor(void)::ref = 0x1E0B0A741;
        qword_1ECE35D50 = (uint64_t)"FlyoverPostchainDownsampleCoCShader";
        unk_1ECE35D58 = 0;
        qword_1ECE35D60 = 0;
        unk_1ECE35D68 = &ggl::flyoverPostchainDownsampleCoCShaderFragShaderFunctionConstantMapping(void)::ref;
        qword_1ECE35D70 = 0;
        unk_1ECE35D78 = &ggl::flyoverPostchainDownsampleCoCShaderFragShaderFunctionBufferMapping(void)::ref;
        qword_1ECE35D80 = 0;
        unk_1ECE35D88 = &ggl::flyoverPostchainDownsampleCoCShaderFragShaderFunctionTextureMapping(void)::ref;
        qword_1ECE35D90 = 1;
        unk_1ECE35D98 = &ggl::flyoverPostchainDownsampleCoCShaderFragShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE35DA8 = 0;
        unk_1ECE35DB0 = 0;
        qword_1ECE35DA0 = 1;
      }
      qword_1ECE34A58 = (uint64_t)&ggl::flyoverPostchainDownsampleCoCShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE34A60 = -525293759;
      qword_1ECE34A68 = (uint64_t)&ggl::flyoverPostchainDownsampleCoCShaderShaderConstants(void)::ref;
      unk_1ECE34A70 = 0;
      qword_1ECE34A78 = (uint64_t)ggl::flyoverPostchainDownsampleCoCShaderShaderTextures(void)::ref;
      unk_1ECE34A80 = 1;
      qword_1ECE34A88 = (uint64_t)ggl::flyoverPostchainDownsampleCoCShaderShaderSamplers(void)::ref;
      unk_1ECE34A90 = 1;
    }
    qword_1EE58A728 = (uint64_t)&ggl::FlyoverPostchainDownsampleCoCShader::typedReflection(void)::ref;
    if ((v369 & 1) == 0
    {
      ggl::FlyoverPostchain::pipelineStateDownsampleCoCPipelineAttributeStructBinding(void)::attr = 0;
      *(_QWORD *)algn_1EE58AA88 = 0;
      qword_1EE58AA90 = (uint64_t)"";
      dword_1EE58AA98 = 0;
      qword_1EE58AAA0 = (uint64_t)&ggl::FlyoverPostchain::pipelineStateDownsampleCoCPipelineAttributeBinding_0(void)::attr;
      unk_1EE58AAA8 = 2;
    }
    qword_1EE58A730 = (uint64_t)&ggl::FlyoverPostchain::pipelineStateDownsampleCoCPipelineAttributeStructBinding(void)::attr;
    *(_QWORD *)algn_1EE58A738 = 1;
    qword_1EE58A740 = 0;
    unk_1EE58A748 = 1;
    qword_1EE58A750 = (uint64_t)&ggl::FlyoverPostchain::pipelineStateDownsampleCoCPipelineDeviceStructBinding(void)::ref;
    unk_1EE58A758 = 0;
    qword_1EE58A760 = (uint64_t)&ggl::FlyoverPostchain::pipelineStateDownsampleCoCPipelineConstantStructBinding(void)::ref;
    unk_1EE58A768 = 0;
  }
  v113 = *(_OWORD *)v399;
  if (*(_QWORD *)&v399[8])
  {
    v114 = (unint64_t *)(*(_QWORD *)&v399[8] + 8);
    do
      v115 = __ldxr(v114);
    while (__stxr(v115 + 1, v114));
    *((_DWORD *)v111 + 14) = 0;
    *((_QWORD *)v111 + 5) = 0;
    *((_QWORD *)v111 + 6) = 0;
    *((_QWORD *)v111 + 3) = &off_1E42B6760;
    *((_QWORD *)v111 + 4) = 0;
    *((_QWORD *)v111 + 8) = &ggl::FlyoverPostchain::DownsampleCoCPipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v111 + 72) = v113;
    do
      v116 = __ldxr(v114);
    while (__stxr(v116 + 1, v114));
  }
  else
  {
    *((_DWORD *)v111 + 14) = 0;
    *((_QWORD *)v111 + 5) = 0;
    *((_QWORD *)v111 + 6) = 0;
    *((_QWORD *)v111 + 3) = &off_1E42B6760;
    *((_QWORD *)v111 + 4) = 0;
    *((_QWORD *)v111 + 8) = &ggl::FlyoverPostchain::DownsampleCoCPipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v111 + 72) = v113;
  }
  v111[136] = 0;
  *(_OWORD *)(v111 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v111 + 156) = 0;
  *(_QWORD *)(v111 + 172) = 0;
  *(_QWORD *)(v111 + 164) = 0;
  v111[184] = 0;
  *(_OWORD *)(v111 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v111 + 204) = 0;
  *(_QWORD *)(v111 + 220) = 0;
  *(_QWORD *)(v111 + 212) = 0;
  v111[232] = 0;
  *(_OWORD *)(v111 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v111 + 252) = 0;
  *(_QWORD *)(v111 + 268) = 0;
  *(_QWORD *)(v111 + 260) = 0;
  *((_DWORD *)v111 + 70) = 2;
  v117 = *(_OWORD *)v412;
  *(_QWORD *)(v111 + 300) = *(_QWORD *)&v412[16];
  *(_OWORD *)(v111 + 284) = v117;
  *((_DWORD *)v111 + 77) = 0;
  v111[312] = 0;
  *((_QWORD *)v111 + 48) = 0;
  *((_OWORD *)v111 + 22) = 0u;
  *((_OWORD *)v111 + 23) = 0u;
  *((_OWORD *)v111 + 20) = 0u;
  *((_OWORD *)v111 + 21) = 0u;
  *((_QWORD *)v111 + 49) = 0x100000001;
  v111[400] = 0;
  v111[88] = 0;
  *(_WORD *)(v111 + 89) = v404;
  v111[91] = v405;
  *(_OWORD *)(v111 + 92) = xmmword_19FFB3060;
  *(_QWORD *)(v111 + 108) = v402;
  *((_DWORD *)v111 + 32) = 0;
  *((_QWORD *)v111 + 15) = 0;
  *((_DWORD *)v111 + 29) = 0;
  v111[132] = 15;
  if (*((_QWORD *)&v113 + 1))
  {
    v118 = (unint64_t *)(*((_QWORD *)&v113 + 1) + 8);
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v113 + 1) + 16))(*((_QWORD *)&v113 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v113 + 1));
    }
  }
  *((_QWORD *)v111 + 3) = &off_1E42B8830;
  v120 = (std::__shared_weak_count *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 28) = v111 + 24;
  *((_QWORD *)this + 29) = v111;
  if (v120)
  {
    v121 = (unint64_t *)&v120->__shared_owners_;
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  if (*(_QWORD *)&v399[8])
  {
    v123 = (unint64_t *)(*(_QWORD *)&v399[8] + 8);
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)&v399[8] + 16))(*(_QWORD *)&v399[8]);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v399[8]);
    }
  }
  v125 = operator new(0x100uLL);
  v126 = v125;
  v125[1] = 0;
  v125[2] = 0;
  *v125 = &off_1E42E0B48;
  v127 = v125 + 3;
  v128 = *((_QWORD *)this + 28);
  v129 = (std::__shared_weak_count *)*((_QWORD *)this + 29);
  if (v129)
  {
    v130 = (unint64_t *)&v129->__shared_owners_;
    do
      v131 = __ldxr(v130);
    while (__stxr(v131 + 1, v130));
    ggl::PipelineSetup::PipelineSetup(v125 + 3, v128, (uint64_t)v129);
    v132 = (unint64_t *)&v129->__shared_owners_;
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v125 + 3, v128, 0);
  }
  v126[3] = &off_1E42B8800;
  v134 = (std::__shared_weak_count *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 30) = v127;
  *((_QWORD *)this + 31) = v126;
  if (v134)
  {
    v135 = (unint64_t *)&v134->__shared_owners_;
    do
      v136 = __ldaxr(v135);
    while (__stlxr(v136 - 1, v135));
    if (!v136)
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
    }
  }
  v137 = operator new(0xF0uLL);
  v137[1] = 0;
  v137[2] = 0;
  *v137 = &off_1E42DEA08;
  v137[5] = 0;
  v137[6] = 0;
  v137[4] = 0;
  *((_DWORD *)v137 + 14) = 0;
  v137[3] = &off_1E42B5DE8;
  *(_QWORD *)((char *)v137 + 60) = 65537;
  *((_DWORD *)v137 + 17) = 0;
  v137[9] = 1;
  *((_WORD *)v137 + 40) = 0;
  *((_BYTE *)v137 + 82) = 3;
  *(_QWORD *)((char *)v137 + 91) = 0;
  *(_QWORD *)((char *)v137 + 83) = 0;
  *((_BYTE *)v137 + 99) = 0;
  *(_QWORD *)((char *)v137 + 156) = 0;
  *(_QWORD *)((char *)v137 + 148) = 0;
  *((_WORD *)v137 + 106) = 257;
  v137[27] = 0;
  v137[28] = 0;
  *((_BYTE *)v137 + 232) = 0;
  v138 = (std::__shared_weak_count *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 26) = v137 + 3;
  *((_QWORD *)this + 27) = v137;
  if (v138)
  {
    v139 = (unint64_t *)&v138->__shared_owners_;
    do
      v140 = __ldaxr(v139);
    while (__stlxr(v140 - 1, v139));
    if (!v140)
    {
      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
      std::__shared_weak_count::__release_weak(v138);
    }
  }
  *(_BYTE *)(*((_QWORD *)this + 26) + 58) = 3;
  v141 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 200) + 80);
  v143 = *(_QWORD *)(v141 + 464);
  v142 = *(_QWORD *)(v141 + 472);
  *(_QWORD *)v399 = v143;
  *(_QWORD *)&v399[8] = v142;
  if (v142)
  {
    v144 = (unint64_t *)(v142 + 8);
    do
      v145 = __ldxr(v144);
    while (__stxr(v145 + 1, v144));
  }
  v402 = 0;
  v146 = (char *)operator new(0x198uLL);
  *((_QWORD *)v146 + 1) = 0;
  *((_QWORD *)v146 + 2) = 0;
  *(_QWORD *)v146 = &off_1E42E09C0;
  *(_OWORD *)v412 = v416[0];
  *(_OWORD *)&v412[12] = *(_OWORD *)((char *)v416 + 12);
  if ((v147 & 1) == 0)
  {
    if ((_DWORD)v370)
    {
      if ((v371 & 1) == 0)
      {
        if ((_DWORD)v370)
        {
          if ((v389 & 1) == 0
          {
            if ((v397 & 1) == 0
            {
              ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos2UVReflection;
            }
            ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r;
            unk_1ECE43AC8 = 1;
          }
          ggl::FlyoverPostchain::FGBlurPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r;
          unk_1EE58A810 = &ggl::FlyoverPostchain::pipelineDataFGBlurPipelineDeviceStructs(void)::ref;
          qword_1EE58A818 = 0;
          if ((v390 & 1) == 0
          {
            ggl::FlyoverPostchain::pipelineDataFGBlurPipelineConstantStructs(void)::ref = (uint64_t)ggl::PostchainCommon::CameraProperties::reflection(void)::reflection;
          }
          qword_1EE58A820 = (uint64_t)&ggl::FlyoverPostchain::pipelineDataFGBlurPipelineConstantStructs(void)::ref;
          unk_1EE58A828 = xmmword_19FFB2DB0;
        }
      }
      ggl::FlyoverPostchain::FGBlurPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::FlyoverPostchain::FGBlurPipelineSetup::typedReflection(void)::ref;
      ggl::FlyoverPostchainFGBlurShader::typedReflection(v370);
      qword_1EE58A7B8 = (uint64_t)&ggl::FlyoverPostchainFGBlurShader::typedReflection(void)::ref;
      if ((v372 & 1) == 0
      {
        ggl::FlyoverPostchain::pipelineStateFGBlurPipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE58AAE0 = 0;
        qword_1EE58AAE8 = (uint64_t)"";
        dword_1EE58AAF0 = 0;
        qword_1EE58AAF8 = (uint64_t)&ggl::FlyoverPostchain::pipelineStateFGBlurPipelineAttributeBinding_0(void)::attr;
        unk_1EE58AB00 = 2;
      }
      qword_1EE58A7C0 = (uint64_t)&ggl::FlyoverPostchain::pipelineStateFGBlurPipelineAttributeStructBinding(void)::attr;
      *(_QWORD *)algn_1EE58A7C8 = 1;
      qword_1EE58A7D0 = 0;
      unk_1EE58A7D8 = 2;
      qword_1EE58A7E0 = (uint64_t)&ggl::FlyoverPostchain::pipelineStateFGBlurPipelineDeviceStructBinding(void)::ref;
      unk_1EE58A7E8 = 0;
      if ((v373 & 1) == 0
      {
        ggl::FlyoverPostchain::pipelineStateFGBlurPipelineConstantStructBinding(void)::ref = 0;
        unk_1EE58AB20 = 0;
        qword_1EE58AB28 = (uint64_t)"cameraProperties";
        dword_1EE58AB30 = 3;
        qword_1EE58AB38 = (uint64_t)&ggl::FlyoverPostchain::pipelineStateFGBlurPipelineConstantCameraPropertiesBinding(void)::reflection;
        unk_1EE58AB40 = 5;
      }
      qword_1EE58A7F0 = (uint64_t)&ggl::FlyoverPostchain::pipelineStateFGBlurPipelineConstantStructBinding(void)::ref;
      *(_QWORD *)algn_1EE58A7F8 = 1;
    }
  }
  v148 = *(_OWORD *)v399;
  if (*(_QWORD *)&v399[8])
  {
    v149 = (unint64_t *)(*(_QWORD *)&v399[8] + 8);
    do
      v150 = __ldxr(v149);
    while (__stxr(v150 + 1, v149));
    *((_DWORD *)v146 + 14) = 0;
    *((_QWORD *)v146 + 5) = 0;
    *((_QWORD *)v146 + 6) = 0;
    *((_QWORD *)v146 + 3) = &off_1E42B6760;
    *((_QWORD *)v146 + 4) = 0;
    *((_QWORD *)v146 + 8) = &ggl::FlyoverPostchain::FGBlurPipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v146 + 72) = v148;
    do
      v151 = __ldxr(v149);
    while (__stxr(v151 + 1, v149));
  }
  else
  {
    *((_DWORD *)v146 + 14) = 0;
    *((_QWORD *)v146 + 5) = 0;
    *((_QWORD *)v146 + 6) = 0;
    *((_QWORD *)v146 + 3) = &off_1E42B6760;
    *((_QWORD *)v146 + 4) = 0;
    *((_QWORD *)v146 + 8) = &ggl::FlyoverPostchain::FGBlurPipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v146 + 72) = v148;
  }
  v146[136] = 0;
  *(_OWORD *)(v146 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v146 + 156) = 0;
  *(_QWORD *)(v146 + 172) = 0;
  *(_QWORD *)(v146 + 164) = 0;
  v146[184] = 0;
  *(_OWORD *)(v146 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v146 + 204) = 0;
  *(_QWORD *)(v146 + 220) = 0;
  *(_QWORD *)(v146 + 212) = 0;
  v146[232] = 0;
  *(_OWORD *)(v146 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v146 + 252) = 0;
  *(_QWORD *)(v146 + 268) = 0;
  *(_QWORD *)(v146 + 260) = 0;
  *(_OWORD *)(v146 + 280) = *(_OWORD *)v412;
  *(_OWORD *)(v146 + 292) = *(_OWORD *)&v412[12];
  *((_DWORD *)v146 + 77) = 0;
  v146[312] = 0;
  *((_QWORD *)v146 + 48) = 0;
  *((_OWORD *)v146 + 22) = 0u;
  *((_OWORD *)v146 + 23) = 0u;
  *((_OWORD *)v146 + 20) = 0u;
  *((_OWORD *)v146 + 21) = 0u;
  *((_QWORD *)v146 + 49) = 0x100000001;
  v146[400] = 0;
  v146[88] = 0;
  *(_WORD *)(v146 + 89) = v404;
  v146[91] = v405;
  *(_OWORD *)(v146 + 92) = xmmword_19FFB3060;
  *(_QWORD *)(v146 + 108) = v402;
  *((_DWORD *)v146 + 32) = 0;
  *((_QWORD *)v146 + 15) = 0;
  *((_DWORD *)v146 + 29) = 0;
  v146[132] = 15;
  if (*((_QWORD *)&v148 + 1))
  {
    v152 = (unint64_t *)(*((_QWORD *)&v148 + 1) + 8);
    do
      v153 = __ldaxr(v152);
    while (__stlxr(v153 - 1, v152));
    if (!v153)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v148 + 1) + 16))(*((_QWORD *)&v148 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v148 + 1));
    }
  }
  *((_QWORD *)v146 + 3) = &off_1E42B86F0;
  v154 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
  *((_QWORD *)this + 35) = v146 + 24;
  *((_QWORD *)this + 36) = v146;
  if (v154)
  {
    v155 = (unint64_t *)&v154->__shared_owners_;
    do
      v156 = __ldaxr(v155);
    while (__stlxr(v156 - 1, v155));
    if (!v156)
    {
      ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
      std::__shared_weak_count::__release_weak(v154);
    }
  }
  if (*(_QWORD *)&v399[8])
  {
    v157 = (unint64_t *)(*(_QWORD *)&v399[8] + 8);
    do
      v158 = __ldaxr(v157);
    while (__stlxr(v158 - 1, v157));
    if (!v158)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)&v399[8] + 16))(*(_QWORD *)&v399[8]);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v399[8]);
    }
  }
  v159 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 200) + 80);
  v161 = *(_QWORD *)(v159 + 440);
  v160 = *(_QWORD *)(v159 + 448);
  *(_QWORD *)v399 = v161;
  *(_QWORD *)&v399[8] = v160;
  if (v160)
  {
    v162 = (unint64_t *)(v160 + 8);
    do
      v163 = __ldxr(v162);
    while (__stxr(v163 + 1, v162));
  }
  v402 = 0;
  v164 = (char *)operator new(0x198uLL);
  *((_QWORD *)v164 + 1) = 0;
  *((_QWORD *)v164 + 2) = 0;
  *(_QWORD *)v164 = &off_1E42E0950;
  *(_OWORD *)v412 = v416[0];
  *(_OWORD *)&v412[12] = *(_OWORD *)((char *)v416 + 12);
  if ((v165 & 1) == 0)
  {
    if ((_DWORD)v374)
    {
      if ((v375 & 1) == 0)
      {
        if ((_DWORD)v374)
        {
          if ((v391 & 1) == 0
          {
            if ((v398 & 1) == 0
            {
              ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos2UVReflection;
            }
            ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r;
            unk_1ECE43AC8 = 1;
          }
          ggl::FlyoverPostchain::BGBlurPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r;
          unk_1EE58A8A0 = &ggl::FlyoverPostchain::pipelineDataBGBlurPipelineDeviceStructs(void)::ref;
          qword_1EE58A8A8 = 0;
          if ((v392 & 1) == 0
          {
            ggl::FlyoverPostchain::pipelineDataBGBlurPipelineConstantStructs(void)::ref = (uint64_t)ggl::PostchainCommon::CameraProperties::reflection(void)::reflection;
          }
          qword_1EE58A8B0 = (uint64_t)&ggl::FlyoverPostchain::pipelineDataBGBlurPipelineConstantStructs(void)::ref;
          unk_1EE58A8B8 = vdupq_n_s64(1uLL);
        }
      }
      ggl::FlyoverPostchain::BGBlurPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::FlyoverPostchain::BGBlurPipelineSetup::typedReflection(void)::ref;
      ggl::FlyoverPostchainBGBlurShader::typedReflection(v374);
      qword_1EE58A848 = (uint64_t)&ggl::FlyoverPostchainBGBlurShader::typedReflection(void)::ref;
      if ((v376 & 1) == 0
      {
        ggl::FlyoverPostchain::pipelineStateBGBlurPipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE58AB70 = 0;
        qword_1EE58AB78 = (uint64_t)"";
        dword_1EE58AB80 = 0;
        qword_1EE58AB88 = (uint64_t)&ggl::FlyoverPostchain::pipelineStateBGBlurPipelineAttributeBinding_0(void)::attr;
        unk_1EE58AB90 = 2;
      }
      qword_1EE58A850 = (uint64_t)&ggl::FlyoverPostchain::pipelineStateBGBlurPipelineAttributeStructBinding(void)::attr;
      *(_QWORD *)algn_1EE58A858 = 1;
      qword_1EE58A860 = 0;
      unk_1EE58A868 = 1;
      qword_1EE58A870 = (uint64_t)&ggl::FlyoverPostchain::pipelineStateBGBlurPipelineDeviceStructBinding(void)::ref;
      unk_1EE58A878 = 0;
      if ((v377 & 1) == 0
      {
        ggl::FlyoverPostchain::pipelineStateBGBlurPipelineConstantStructBinding(void)::ref = 0;
        unk_1EE58ABB0 = 0;
        qword_1EE58ABB8 = (uint64_t)"cameraProperties";
        dword_1EE58ABC0 = 3;
        qword_1EE58ABC8 = (uint64_t)&ggl::FlyoverPostchain::pipelineStateBGBlurPipelineConstantCameraPropertiesBinding(void)::reflection;
        unk_1EE58ABD0 = 5;
      }
      qword_1EE58A880 = (uint64_t)&ggl::FlyoverPostchain::pipelineStateBGBlurPipelineConstantStructBinding(void)::ref;
      *(_QWORD *)algn_1EE58A888 = 1;
    }
  }
  v166 = *(_OWORD *)v399;
  if (*(_QWORD *)&v399[8])
  {
    v167 = (unint64_t *)(*(_QWORD *)&v399[8] + 8);
    do
      v168 = __ldxr(v167);
    while (__stxr(v168 + 1, v167));
    *((_DWORD *)v164 + 14) = 0;
    *((_QWORD *)v164 + 5) = 0;
    *((_QWORD *)v164 + 6) = 0;
    *((_QWORD *)v164 + 3) = &off_1E42B6760;
    *((_QWORD *)v164 + 4) = 0;
    *((_QWORD *)v164 + 8) = &ggl::FlyoverPostchain::BGBlurPipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v164 + 72) = v166;
    do
      v169 = __ldxr(v167);
    while (__stxr(v169 + 1, v167));
  }
  else
  {
    *((_DWORD *)v164 + 14) = 0;
    *((_QWORD *)v164 + 5) = 0;
    *((_QWORD *)v164 + 6) = 0;
    *((_QWORD *)v164 + 3) = &off_1E42B6760;
    *((_QWORD *)v164 + 4) = 0;
    *((_QWORD *)v164 + 8) = &ggl::FlyoverPostchain::BGBlurPipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v164 + 72) = v166;
  }
  v164[136] = 0;
  *(_OWORD *)(v164 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v164 + 156) = 0;
  *(_QWORD *)(v164 + 172) = 0;
  *(_QWORD *)(v164 + 164) = 0;
  v164[184] = 0;
  *(_OWORD *)(v164 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v164 + 204) = 0;
  *(_QWORD *)(v164 + 220) = 0;
  *(_QWORD *)(v164 + 212) = 0;
  v164[232] = 0;
  *(_OWORD *)(v164 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v164 + 252) = 0;
  *(_QWORD *)(v164 + 268) = 0;
  *(_QWORD *)(v164 + 260) = 0;
  *(_OWORD *)(v164 + 280) = *(_OWORD *)v412;
  *(_OWORD *)(v164 + 292) = *(_OWORD *)&v412[12];
  *((_DWORD *)v164 + 77) = 0;
  v164[312] = 0;
  *((_QWORD *)v164 + 48) = 0;
  *((_OWORD *)v164 + 22) = 0u;
  *((_OWORD *)v164 + 23) = 0u;
  *((_OWORD *)v164 + 20) = 0u;
  *((_OWORD *)v164 + 21) = 0u;
  *((_QWORD *)v164 + 49) = 0x100000001;
  v164[400] = 0;
  v164[88] = 0;
  *(_WORD *)(v164 + 89) = v404;
  v164[91] = v405;
  *(_OWORD *)(v164 + 92) = xmmword_19FFB3060;
  *(_QWORD *)(v164 + 108) = v402;
  *((_DWORD *)v164 + 32) = 0;
  *((_QWORD *)v164 + 15) = 0;
  *((_DWORD *)v164 + 29) = 0;
  v164[132] = 15;
  if (*((_QWORD *)&v166 + 1))
  {
    v170 = (unint64_t *)(*((_QWORD *)&v166 + 1) + 8);
    do
      v171 = __ldaxr(v170);
    while (__stlxr(v171 - 1, v170));
    if (!v171)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v166 + 1) + 16))(*((_QWORD *)&v166 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v166 + 1));
    }
  }
  *((_QWORD *)v164 + 3) = &off_1E42B86A0;
  v172 = (std::__shared_weak_count *)*((_QWORD *)this + 38);
  *((_QWORD *)this + 37) = v164 + 24;
  *((_QWORD *)this + 38) = v164;
  if (v172)
  {
    v173 = (unint64_t *)&v172->__shared_owners_;
    do
      v174 = __ldaxr(v173);
    while (__stlxr(v174 - 1, v173));
    if (!v174)
    {
      ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
      std::__shared_weak_count::__release_weak(v172);
    }
  }
  if (*(_QWORD *)&v399[8])
  {
    v175 = (unint64_t *)(*(_QWORD *)&v399[8] + 8);
    do
      v176 = __ldaxr(v175);
    while (__stlxr(v176 - 1, v175));
    if (!v176)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)&v399[8] + 16))(*(_QWORD *)&v399[8]);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v399[8]);
    }
  }
  v177 = operator new(0x100uLL);
  v178 = v177;
  v177[1] = 0;
  v177[2] = 0;
  *v177 = &off_1E42E0988;
  v179 = v177 + 3;
  v180 = *((_QWORD *)this + 35);
  v181 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
  if (v181)
  {
    v182 = (unint64_t *)&v181->__shared_owners_;
    do
      v183 = __ldxr(v182);
    while (__stxr(v183 + 1, v182));
    ggl::PipelineSetup::PipelineSetup(v177 + 3, v180, (uint64_t)v181);
    v184 = (unint64_t *)&v181->__shared_owners_;
    do
      v185 = __ldaxr(v184);
    while (__stlxr(v185 - 1, v184));
    if (!v185)
    {
      ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
      std::__shared_weak_count::__release_weak(v181);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v177 + 3, v180, 0);
  }
  v178[3] = &off_1E42B86C0;
  v186 = (std::__shared_weak_count *)*((_QWORD *)this + 40);
  *((_QWORD *)this + 39) = v179;
  *((_QWORD *)this + 40) = v178;
  if (v186)
  {
    v187 = (unint64_t *)&v186->__shared_owners_;
    do
      v188 = __ldaxr(v187);
    while (__stlxr(v188 - 1, v187));
    if (!v188)
    {
      ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
      std::__shared_weak_count::__release_weak(v186);
    }
  }
  v189 = *((_QWORD *)this + 39);
  v190 = *(_QWORD **)(v189 + 64);
  v190[1] = 0;
  v191 = *((_QWORD *)this + 8);
  *v190 = v191;
  v192 = *(_QWORD **)(v189 + 160);
  v193 = *((_QWORD *)this + 9);
  if (v193)
  {
    v194 = (unint64_t *)(v193 + 8);
    do
      v195 = __ldxr(v194);
    while (__stxr(v195 + 1, v194));
  }
  v196 = (std::__shared_weak_count *)v192[1];
  *v192 = v191;
  v192[1] = v193;
  if (v196)
  {
    v197 = (unint64_t *)&v196->__shared_owners_;
    do
      v198 = __ldaxr(v197);
    while (__stlxr(v198 - 1, v197));
    if (!v198)
    {
      ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
      std::__shared_weak_count::__release_weak(v196);
    }
  }
  v199 = operator new(0x100uLL);
  v200 = v199;
  v199[1] = 0;
  v199[2] = 0;
  *v199 = &off_1E42E0918;
  v201 = v199 + 3;
  v202 = *((_QWORD *)this + 37);
  v203 = (std::__shared_weak_count *)*((_QWORD *)this + 38);
  if (v203)
  {
    v204 = (unint64_t *)&v203->__shared_owners_;
    do
      v205 = __ldxr(v204);
    while (__stxr(v205 + 1, v204));
    ggl::PipelineSetup::PipelineSetup(v199 + 3, v202, (uint64_t)v203);
    v206 = (unint64_t *)&v203->__shared_owners_;
    do
      v207 = __ldaxr(v206);
    while (__stlxr(v207 - 1, v206));
    if (!v207)
    {
      ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
      std::__shared_weak_count::__release_weak(v203);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v199 + 3, v202, 0);
  }
  v200[3] = &off_1E42B8670;
  v208 = (std::__shared_weak_count *)*((_QWORD *)this + 42);
  *((_QWORD *)this + 41) = v201;
  *((_QWORD *)this + 42) = v200;
  if (v208)
  {
    v209 = (unint64_t *)&v208->__shared_owners_;
    do
      v210 = __ldaxr(v209);
    while (__stlxr(v210 - 1, v209));
    if (!v210)
    {
      ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
      std::__shared_weak_count::__release_weak(v208);
    }
  }
  v211 = *((_QWORD *)this + 41);
  v212 = *(_QWORD **)(v211 + 64);
  v212[1] = 0;
  v213 = *((_QWORD *)this + 8);
  *v212 = v213;
  v214 = *(_QWORD **)(v211 + 160);
  v215 = *((_QWORD *)this + 9);
  if (v215)
  {
    v216 = (unint64_t *)(v215 + 8);
    do
      v217 = __ldxr(v216);
    while (__stxr(v217 + 1, v216));
  }
  v218 = (std::__shared_weak_count *)v214[1];
  *v214 = v213;
  v214[1] = v215;
  if (v218)
  {
    v219 = (unint64_t *)&v218->__shared_owners_;
    do
      v220 = __ldaxr(v219);
    while (__stlxr(v220 - 1, v219));
    if (!v220)
    {
      ((void (*)(std::__shared_weak_count *))v218->__on_zero_shared)(v218);
      std::__shared_weak_count::__release_weak(v218);
    }
  }
  v221 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 200) + 80);
  v223 = *(_QWORD *)(v221 + 488);
  v222 = *(std::__shared_weak_count **)(v221 + 496);
  v402 = v223;
  v403 = v222;
  if (v222)
  {
    v224 = (unint64_t *)&v222->__shared_owners_;
    do
      v225 = __ldxr(v224);
    while (__stxr(v225 + 1, v224));
  }
  *(_OWORD *)&v412[20] = 0uLL;
  *(_QWORD *)v413 = 0;
  v412[0] = 0;
  *(_OWORD *)&v412[4] = xmmword_19FFB3060;
  v413[8] = 15;
  v226 = operator new(0x198uLL);
  v226[1] = 0;
  v226[2] = 0;
  *v226 = &off_1E42E0A30;
  *(_OWORD *)v399 = v416[0];
  *(_OWORD *)&v399[12] = *(_OWORD *)((char *)v416 + 12);
  *(_DWORD *)&v399[28] = 0;
  v227 = ggl::FlyoverPostchain::TentBlurPipelineState::TentBlurPipelineState((uint64_t)(v226 + 3), &v402, (uint64_t)v412, v399);
  v228 = (std::__shared_weak_count *)*((_QWORD *)this + 48);
  *((_QWORD *)this + 47) = v227;
  *((_QWORD *)this + 48) = v226;
  if (v228)
  {
    v229 = (unint64_t *)&v228->__shared_owners_;
    do
      v230 = __ldaxr(v229);
    while (__stlxr(v230 - 1, v229));
    if (!v230)
    {
      ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
      std::__shared_weak_count::__release_weak(v228);
    }
  }
  v231 = v403;
  if (v403)
  {
    v232 = (unint64_t *)&v403->__shared_owners_;
    do
      v233 = __ldaxr(v232);
    while (__stlxr(v233 - 1, v232));
    if (!v233)
    {
      ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
      std::__shared_weak_count::__release_weak(v231);
    }
  }
  v234 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 200) + 80);
  v236 = *(_QWORD *)(v234 + 488);
  v235 = *(std::__shared_weak_count **)(v234 + 496);
  v402 = v236;
  v403 = v235;
  if (v235)
  {
    v237 = (unint64_t *)&v235->__shared_owners_;
    do
      v238 = __ldxr(v237);
    while (__stxr(v238 + 1, v237));
  }
  *(_QWORD *)&v412[28] = 0;
  *(_QWORD *)&v412[20] = 0;
  *(_QWORD *)v413 = 0;
  v412[0] = 0;
  *(_OWORD *)&v412[4] = xmmword_19FFB3060;
  v413[8] = 15;
  v239 = operator new(0x198uLL);
  v239[1] = 0;
  v239[2] = 0;
  *v239 = &off_1E42E0A30;
  *(_OWORD *)v399 = v416[0];
  *(_OWORD *)&v399[12] = *(_OWORD *)((char *)v416 + 12);
  *(_DWORD *)&v399[28] = 0;
  v240 = ggl::FlyoverPostchain::TentBlurPipelineState::TentBlurPipelineState((uint64_t)(v239 + 3), &v402, (uint64_t)v412, v399);
  v241 = (std::__shared_weak_count *)*((_QWORD *)this + 50);
  *((_QWORD *)this + 49) = v240;
  *((_QWORD *)this + 50) = v239;
  if (v241)
  {
    v242 = (unint64_t *)&v241->__shared_owners_;
    do
      v243 = __ldaxr(v242);
    while (__stlxr(v243 - 1, v242));
    if (!v243)
    {
      ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
      std::__shared_weak_count::__release_weak(v241);
    }
  }
  v244 = v403;
  if (v403)
  {
    v245 = (unint64_t *)&v403->__shared_owners_;
    do
      v246 = __ldaxr(v245);
    while (__stlxr(v246 - 1, v245));
    if (!v246)
    {
      ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
      std::__shared_weak_count::__release_weak(v244);
    }
  }
  v247 = operator new(0x100uLL);
  v248 = v247;
  v247[1] = 0;
  v247[2] = 0;
  *v247 = &off_1E42E09F8;
  v249 = v247 + 3;
  v250 = *((_QWORD *)this + 47);
  v251 = (std::__shared_weak_count *)*((_QWORD *)this + 48);
  if (v251)
  {
    v252 = (unint64_t *)&v251->__shared_owners_;
    do
      v253 = __ldxr(v252);
    while (__stxr(v253 + 1, v252));
    ggl::PipelineSetup::PipelineSetup(v247 + 3, v250, (uint64_t)v251);
    v254 = (unint64_t *)&v251->__shared_owners_;
    do
      v255 = __ldaxr(v254);
    while (__stlxr(v255 - 1, v254));
    if (!v255)
    {
      ((void (*)(std::__shared_weak_count *))v251->__on_zero_shared)(v251);
      std::__shared_weak_count::__release_weak(v251);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v247 + 3, v250, 0);
  }
  v248[3] = &off_1E42B8710;
  v256 = (std::__shared_weak_count *)*((_QWORD *)this + 52);
  *((_QWORD *)this + 51) = v249;
  *((_QWORD *)this + 52) = v248;
  if (v256)
  {
    v257 = (unint64_t *)&v256->__shared_owners_;
    do
      v258 = __ldaxr(v257);
    while (__stlxr(v258 - 1, v257));
    if (!v258)
    {
      ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
      std::__shared_weak_count::__release_weak(v256);
    }
  }
  v259 = operator new(0x100uLL);
  v260 = v259;
  v259[1] = 0;
  v259[2] = 0;
  *v259 = &off_1E42E09F8;
  v261 = v259 + 3;
  v262 = *((_QWORD *)this + 49);
  v263 = (std::__shared_weak_count *)*((_QWORD *)this + 50);
  if (v263)
  {
    v264 = (unint64_t *)&v263->__shared_owners_;
    do
      v265 = __ldxr(v264);
    while (__stxr(v265 + 1, v264));
    ggl::PipelineSetup::PipelineSetup(v259 + 3, v262, (uint64_t)v263);
    v266 = (unint64_t *)&v263->__shared_owners_;
    do
      v267 = __ldaxr(v266);
    while (__stlxr(v267 - 1, v266));
    if (!v267)
    {
      ((void (*)(std::__shared_weak_count *))v263->__on_zero_shared)(v263);
      std::__shared_weak_count::__release_weak(v263);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v259 + 3, v262, 0);
  }
  v260[3] = &off_1E42B8710;
  v268 = (std::__shared_weak_count *)*((_QWORD *)this + 54);
  *((_QWORD *)this + 53) = v261;
  *((_QWORD *)this + 54) = v260;
  if (v268)
  {
    v269 = (unint64_t *)&v268->__shared_owners_;
    do
      v270 = __ldaxr(v269);
    while (__stlxr(v270 - 1, v269));
    if (!v270)
    {
      ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
      std::__shared_weak_count::__release_weak(v268);
    }
  }
  v271 = operator new(0xF0uLL);
  v271[1] = 0;
  v271[2] = 0;
  *v271 = &off_1E42DEA08;
  v271[5] = 0;
  v271[6] = 0;
  v271[4] = 0;
  *((_DWORD *)v271 + 14) = 0;
  v271[3] = &off_1E42B5DE8;
  *(_QWORD *)((char *)v271 + 60) = 65537;
  *((_DWORD *)v271 + 17) = 0;
  v271[9] = 1;
  *((_WORD *)v271 + 40) = 0;
  *((_BYTE *)v271 + 82) = 3;
  *(_QWORD *)((char *)v271 + 91) = 0;
  *(_QWORD *)((char *)v271 + 83) = 0;
  *((_BYTE *)v271 + 99) = 0;
  *(_QWORD *)((char *)v271 + 156) = 0;
  *(_QWORD *)((char *)v271 + 148) = 0;
  *((_WORD *)v271 + 106) = 257;
  v271[27] = 0;
  v271[28] = 0;
  *((_BYTE *)v271 + 232) = 0;
  v272 = (std::__shared_weak_count *)*((_QWORD *)this + 34);
  *((_QWORD *)this + 33) = v271 + 3;
  *((_QWORD *)this + 34) = v271;
  if (v272)
  {
    v273 = (unint64_t *)&v272->__shared_owners_;
    do
      v274 = __ldaxr(v273);
    while (__stlxr(v274 - 1, v273));
    if (!v274)
    {
      ((void (*)(std::__shared_weak_count *))v272->__on_zero_shared)(v272);
      std::__shared_weak_count::__release_weak(v272);
    }
  }
  *(_BYTE *)(*((_QWORD *)this + 33) + 58) = 3;
  v275 = operator new(0xA8uLL);
  v275[1] = 0;
  v275[2] = 0;
  *v275 = &off_1E42DE538;
  v276 = ggl::CommonMesh::Pos2UVMesh::Pos2UVMesh((ggl::CommonMesh::Pos2UVMesh *)(v275 + 3), "/Postchain/ScreenMesh");
  v277 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 16) = v276;
  *((_QWORD *)this + 17) = v275;
  if (v277)
  {
    v278 = (unint64_t *)&v277->__shared_owners_;
    do
      v279 = __ldaxr(v278);
    while (__stlxr(v279 - 1, v278));
    if (!v279)
    {
      ((void (*)(std::__shared_weak_count *))v277->__on_zero_shared)(v277);
      std::__shared_weak_count::__release_weak(v277);
    }
  }
  v280 = **(_QWORD **)(*(_QWORD *)v6 + 64);
  v281 = 4 * *(_QWORD *)(v280 + 8);
  v282 = *(_QWORD *)(v280 + 72);
  v283 = *(_QWORD *)(v280 + 80) - v282;
  if (v281 != v283)
  {
    if (v281 <= v283)
    {
      if (v281 < v283)
        *(_QWORD *)(v280 + 80) = v282 + v281;
    }
    else
    {
      std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v280 + 72, v281 - v283);
    }
    v284 = *(std::__shared_weak_count **)(v280 + 32);
    *(_QWORD *)(v280 + 24) = 0;
    *(_QWORD *)(v280 + 32) = 0;
    if (v284)
    {
      v285 = (unint64_t *)&v284->__shared_owners_;
      do
        v286 = __ldaxr(v285);
      while (__stlxr(v286 - 1, v285));
      if (!v286)
      {
        ((void (*)(std::__shared_weak_count *))v284->__on_zero_shared)(v284);
        std::__shared_weak_count::__release_weak(v284);
      }
    }
    *(_QWORD *)(v280 + 120) = 0;
    *(_DWORD *)(v280 + 112) = 0;
    v287 = *(_QWORD *)(v280 + 80) - *(_QWORD *)(v280 + 72);
    *(_QWORD *)(v280 + 40) = 0;
    *(_QWORD *)(v280 + 48) = v287;
    *(_QWORD *)(v280 + 56) = 0;
    *(_QWORD *)(v280 + 64) = v287;
    v280 = **(_QWORD **)(*(_QWORD *)v6 + 64);
    v281 = 4 * *(_QWORD *)(v280 + 8);
  }
  memset(v412, 0, 24);
  *(_QWORD *)&v288 = 0;
  *((_QWORD *)&v288 + 1) = v280;
  v289 = *(_QWORD *)(v280 + 72);
  *(_OWORD *)v412 = v288;
  *(_QWORD *)&v412[24] = v281;
  *(_QWORD *)&v413[4] = v289;
  *(_WORD *)&v412[32] = 1;
  *(_QWORD *)v289 = 0;
  *(_QWORD *)(v289 + 8) = 0;
  __asm { FMOV            V1.4S, #1.0 }
  *(_OWORD *)(v289 + 16) = xmmword_19FFB3960;
  *(_OWORD *)(v289 + 32) = _Q1;
  *(_OWORD *)(v289 + 48) = xmmword_19FFB3970;
  v295 = (std::__shared_weak_count *)operator new(0xF8uLL);
  v295->__shared_owners_ = 0;
  v296 = (unint64_t *)&v295->__shared_owners_;
  v295->__shared_weak_owners_ = 0;
  v295->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF1E8;
  v297 = ggl::BufferData::BufferData((uint64_t)&v295[1], 2, 1, 0, 6, 6);
  LODWORD(v295[10].__vftable) = 0;
  v295[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6B88;
  v295[1].__shared_owners_ = 2;
  v295[9].__shared_owners_ = (uint64_t)&unk_1E42B6BA8;
  v295[9].__shared_weak_owners_ = (uint64_t)"index data";
  v402 = v297;
  v403 = v295;
  *(_OWORD *)v399 = 0uLL;
  *(_QWORD *)&v298 = 0;
  *((_QWORD *)&v298 + 1) = v297;
  v299 = v295[4].__vftable;
  *(_OWORD *)v399 = v298;
  *(_OWORD *)&v399[16] = xmmword_19FFB3400;
  v401 = v299;
  v400 = 1;
  v299->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))0x200010000;
  LODWORD(v299->~__shared_weak_count_0) = 196610;
  v300 = *(_QWORD *)v6;
  do
    v301 = __ldxr(v296);
  while (__stxr(v301 + 1, v296));
  do
    v302 = __ldxr(v296);
  while (__stxr(v302 + 1, v296));
  v303 = *(std::__shared_weak_count **)(v300 + 104);
  *(_QWORD *)(v300 + 96) = v297;
  *(_QWORD *)(v300 + 104) = v295;
  if (v303)
  {
    v304 = (unint64_t *)&v303->__shared_owners_;
    do
      v305 = __ldaxr(v304);
    while (__stlxr(v305 - 1, v304));
    if (!v305)
    {
      ((void (*)(std::__shared_weak_count *))v303->__on_zero_shared)(v303);
      std::__shared_weak_count::__release_weak(v303);
    }
  }
  do
    v306 = __ldaxr(v296);
  while (__stlxr(v306 - 1, v296));
  if (!v306)
  {
    ((void (*)(std::__shared_weak_count *))v295->__on_zero_shared)(v295);
    std::__shared_weak_count::__release_weak(v295);
  }
  v307 = (int64x2_t *)operator new();
  v308 = *((_QWORD *)this + 19);
  v309 = *((_QWORD *)this + 23);
  v310 = *((_QWORD *)this + 16);
  v307->i64[0] = (uint64_t)&off_1E42B59B0;
  v307[1].i64[0] = (uint64_t)"";
  v307[1].i64[1] = v308;
  v307[2].i64[0] = v309;
  v307[2].i32[2] = 0;
  v307[3].i64[0] = 0;
  v307[3].i32[2] = 1065353216;
  v307[4].i64[0] = v310;
  v307[4].i64[1] = 0;
  v307[5].i64[0] = 0;
  v307[5].i64[1] = 0;
  v307[6] = vdupq_n_s64(1uLL);
  v307[7].i64[0] = 0;
  v311 = *((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = v307;
  if (v311)
    (*(void (**)(uint64_t))(*(_QWORD *)v311 + 8))(v311);
  v312 = (int64x2_t *)operator new();
  v313 = *((_QWORD *)this + 26);
  v314 = *((_QWORD *)this + 30);
  v315 = *((_QWORD *)this + 16);
  v312->i64[0] = (uint64_t)&off_1E42B59B0;
  v312[1].i64[0] = (uint64_t)"";
  v312[1].i64[1] = v313;
  v312[2].i64[0] = v314;
  v312[2].i32[2] = 0;
  v312[3].i64[0] = 0;
  v312[3].i32[2] = 1065353216;
  v312[4].i64[0] = v315;
  v312[4].i64[1] = 0;
  v312[5].i64[0] = 0;
  v312[5].i64[1] = 0;
  v312[6] = vdupq_n_s64(1uLL);
  v312[7].i64[0] = 0;
  v316 = *((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = v312;
  if (v316)
    (*(void (**)(uint64_t))(*(_QWORD *)v316 + 8))(v316);
  v317 = (int64x2_t *)operator new();
  v318 = *((_QWORD *)this + 33);
  v319 = *((_QWORD *)this + 39);
  v320 = *((_QWORD *)this + 16);
  v317->i64[0] = (uint64_t)&off_1E42B59B0;
  v317[1].i64[0] = (uint64_t)"";
  v317[1].i64[1] = v318;
  v317[2].i64[0] = v319;
  v317[2].i32[2] = 0;
  v317[3].i64[0] = 0;
  v317[3].i32[2] = 1065353216;
  v317[4].i64[0] = v320;
  v317[4].i64[1] = 0;
  v317[5].i64[0] = 0;
  v317[5].i64[1] = 0;
  v317[6] = vdupq_n_s64(1uLL);
  v317[7].i64[0] = 0;
  v321 = *((_QWORD *)this + 43);
  *((_QWORD *)this + 43) = v317;
  if (v321)
    (*(void (**)(uint64_t))(*(_QWORD *)v321 + 8))(v321);
  v322 = (int64x2_t *)operator new();
  v323 = *((_QWORD *)this + 33);
  v324 = *((_QWORD *)this + 41);
  v325 = *((_QWORD *)this + 16);
  v322->i64[0] = (uint64_t)&off_1E42B59B0;
  v322[1].i64[0] = (uint64_t)"";
  v322[1].i64[1] = v323;
  v322[2].i64[0] = v324;
  v322[2].i32[2] = 0;
  v322[3].i64[0] = 0;
  v322[3].i32[2] = 1065353216;
  v322[4].i64[0] = v325;
  v322[4].i64[1] = 0;
  v322[5].i64[0] = 0;
  v322[5].i64[1] = 0;
  v322[6] = vdupq_n_s64(1uLL);
  v322[7].i64[0] = 0;
  v326 = *((_QWORD *)this + 44);
  *((_QWORD *)this + 44) = v322;
  if (v326)
    (*(void (**)(uint64_t))(*(_QWORD *)v326 + 8))(v326);
  v327 = (int64x2_t *)operator new();
  v328 = *((_QWORD *)this + 33);
  v329 = *((_QWORD *)this + 51);
  v330 = *((_QWORD *)this + 16);
  v327->i64[0] = (uint64_t)&off_1E42B59B0;
  v327[1].i64[0] = (uint64_t)"";
  v327[1].i64[1] = v328;
  v327[2].i64[0] = v329;
  v327[2].i32[2] = 0;
  v327[3].i64[0] = 0;
  v327[3].i32[2] = 1065353216;
  v327[4].i64[0] = v330;
  v327[4].i64[1] = 0;
  v327[5].i64[0] = 0;
  v327[5].i64[1] = 0;
  v327[6] = vdupq_n_s64(1uLL);
  v327[7].i64[0] = 0;
  v331 = *((_QWORD *)this + 55);
  *((_QWORD *)this + 55) = v327;
  if (v331)
    (*(void (**)(uint64_t))(*(_QWORD *)v331 + 8))(v331);
  v332 = (int64x2_t *)operator new();
  v333 = *((_QWORD *)this + 33);
  v334 = *((_QWORD *)this + 53);
  v335 = *((_QWORD *)this + 16);
  v332->i64[0] = (uint64_t)&off_1E42B59B0;
  v332[1].i64[0] = (uint64_t)"";
  v332[1].i64[1] = v333;
  v332[2].i64[0] = v334;
  v332[2].i32[2] = 0;
  v332[3].i64[0] = 0;
  v332[3].i32[2] = 1065353216;
  v332[4].i64[0] = v335;
  v332[4].i64[1] = 0;
  v332[5].i64[0] = 0;
  v332[5].i64[1] = 0;
  v332[6] = vdupq_n_s64(1uLL);
  v332[7].i64[0] = 0;
  v336 = *((_QWORD *)this + 56);
  *((_QWORD *)this + 56) = v332;
  if (v336)
    (*(void (**)(uint64_t))(*(_QWORD *)v336 + 8))(v336);
  v337 = (int64x2_t *)operator new();
  v338 = *((_QWORD *)this + 10);
  v339 = *((_QWORD *)this + 14);
  v340 = *((_QWORD *)this + 16);
  v337->i64[0] = (uint64_t)&off_1E42B59B0;
  v337[1].i64[0] = (uint64_t)"";
  v337[1].i64[1] = v338;
  v337[2].i64[0] = v339;
  v337[2].i32[2] = 0;
  v337[3].i64[0] = 0;
  v337[3].i32[2] = 1065353216;
  v337[4].i64[0] = v340;
  v337[4].i64[1] = 0;
  v337[5].i64[0] = 0;
  v337[5].i64[1] = 0;
  v337[6] = vdupq_n_s64(1uLL);
  v337[7].i64[0] = 0;
  v341 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = v337;
  if (v341)
    (*(void (**)(uint64_t))(*(_QWORD *)v341 + 8))(v341);
  if (v401)
  {
    v343 = *(_QWORD *)&v399[16];
    v342 = *(_QWORD *)&v399[24];
    if (*(_QWORD *)&v399[24] != *(_QWORD *)&v399[16])
    {
      v344 = *(_QWORD **)&v399[8];
      v345 = v400;
      v346 = HIBYTE(v400);
      if (*(_QWORD *)v399 && *(_BYTE *)(*(_QWORD *)&v399[8] + 17) != 2)
        (*(void (**)(void))(**(_QWORD **)v399 + 64))();
      if (v345 && !v346)
      {
        v348 = v344[7];
        v347 = v344[8];
        if (v347 == v348)
          v348 = v344[10] - v344[9];
        if (v343 < v348)
          v348 = v343;
        if (v347 <= v342)
          v347 = v342;
        if (v347 == v348)
          v347 = v348 + v344[10] - v344[9];
        v344[7] = v348;
        v344[8] = v347;
      }
    }
  }
  v349 = v403;
  if (v403)
  {
    v350 = (unint64_t *)&v403->__shared_owners_;
    do
      v351 = __ldaxr(v350);
    while (__stlxr(v351 - 1, v350));
    if (!v351)
    {
      ((void (*)(std::__shared_weak_count *))v349->__on_zero_shared)(v349);
      std::__shared_weak_count::__release_weak(v349);
    }
  }
  if (*(_QWORD *)&v413[4])
  {
    v352 = *(_OWORD *)&v412[16];
    if (*(_QWORD *)&v412[24] != *(_QWORD *)&v412[16])
    {
      v353 = *(_QWORD **)&v412[8];
      v354 = v412[32];
      v355 = v412[33];
      if (*(_QWORD *)v412 && *(_BYTE *)(*(_QWORD *)&v412[8] + 17) != 2)
        (*(void (**)(void))(**(_QWORD **)v412 + 64))();
      if (v354 && !v355)
      {
        v357 = v353[7];
        v356 = v353[8];
        if (v356 == v357)
          v357 = v353[10] - v353[9];
        if ((unint64_t)v352 < v357)
          v357 = v352;
        if (v356 <= *((_QWORD *)&v352 + 1))
          v356 = *((_QWORD *)&v352 + 1);
        if (v356 == v357)
          v356 = v357 + v353[10] - v353[9];
        v353[7] = v357;
        v353[8] = v356;
      }
    }
  }
  return this;
}

void sub_19FA7D740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _QWORD *v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;

  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a35);
  v38 = v35[56];
  v35[56] = 0;
  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  v39 = v35[55];
  v35[55] = 0;
  if (v39)
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)(v35 + 53));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)(v35 + 51));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)(v35 + 49));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)(v35 + 47));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)(v35 + 45));
  v40 = v35[44];
  v35[44] = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  v41 = v35[43];
  v35[43] = 0;
  if (v41)
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)(v35 + 41));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)(v35 + 39));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)(v35 + 37));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)(v35 + 35));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a18);
  v42 = v35[32];
  v35[32] = 0;
  if (v42)
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a11);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a12);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a13);
  v43 = v35[25];
  v35[25] = 0;
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)(v35 + 23));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)(v35 + 21));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)(v35 + 19));
  v44 = v35[18];
  v35[18] = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v36);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a14);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a15);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a16);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a17);
  *v35 = off_1E428C468;
  v45 = (void *)v35[1];
  if (!v45)
    _Unwind_Resume(a1);
  v35[2] = v45;
  operator delete(v45);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ggl::FlyoverPostchain::TentBlurPipelineSetup>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E09F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::FlyoverPostchain::TentBlurPipelineSetup>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E09F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::FlyoverPostchain::TentBlurPipelineSetup>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::FlyoverPostchain::TentBlurPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0A30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::FlyoverPostchain::TentBlurPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0A30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::FlyoverPostchain::TentBlurPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::FlyoverPostchain::BGBlurPipelineSetup>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0918;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::FlyoverPostchain::BGBlurPipelineSetup>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0918;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::FlyoverPostchain::BGBlurPipelineSetup>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::FlyoverPostchain::FGBlurPipelineSetup>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0988;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::FlyoverPostchain::FGBlurPipelineSetup>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0988;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::FlyoverPostchain::FGBlurPipelineSetup>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::FlyoverPostchain::BGBlurPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0950;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::FlyoverPostchain::BGBlurPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0950;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::FlyoverPostchain::BGBlurPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::FlyoverPostchain::FGBlurPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E09C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::FlyoverPostchain::FGBlurPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E09C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::FlyoverPostchain::FGBlurPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::FlyoverPostchain::DownsampleCoCPipelineSetup>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0B48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::FlyoverPostchain::DownsampleCoCPipelineSetup>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0B48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::FlyoverPostchain::DownsampleCoCPipelineSetup>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::FlyoverPostchain::DownsampleCoCPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0B80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::FlyoverPostchain::DownsampleCoCPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0B80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::FlyoverPostchain::DownsampleCoCPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::FlyoverPostchain::DepthSplitPipelineSetup>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0AD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::FlyoverPostchain::DepthSplitPipelineSetup>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0AD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::FlyoverPostchain::DepthSplitPipelineSetup>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::FlyoverPostchain::DepthSplitPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0B10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::FlyoverPostchain::DepthSplitPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0B10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::FlyoverPostchain::DepthSplitPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::FlyoverPostchain::CompositePipelineSetup>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0A68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::FlyoverPostchain::CompositePipelineSetup>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0A68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::FlyoverPostchain::CompositePipelineSetup>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::FlyoverPostchain::CompositePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0AA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::FlyoverPostchain::CompositePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0AA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::FlyoverPostchain::CompositePipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_19FA7DFBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)VKMapSnapshotCreator;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_19FA7E198(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19FA7E380(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FA7E52C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FA7E684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_19FA7E848(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  uint64_t *v12;
  uint64_t *v14;
  uint64_t v15;

  v14 = a12;
  if (a12 == v12)
  {
    v15 = 4;
    v14 = &a9;
  }
  else
  {
    if (!a12)
      _Unwind_Resume(exception_object);
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
  _Unwind_Resume(exception_object);
}

void sub_19FA7EA6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  uint64_t *v12;
  uint64_t *v14;
  uint64_t v15;

  v14 = a12;
  if (a12 == v12)
  {
    v15 = 4;
    v14 = &a9;
  }
  else
  {
    if (!a12)
      _Unwind_Resume(exception_object);
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
  _Unwind_Resume(exception_object);
}

void sub_19FA7EC30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  uint64_t *v12;
  uint64_t *v14;
  uint64_t v15;

  v14 = a12;
  if (a12 == v12)
  {
    v15 = 4;
    v14 = &a9;
  }
  else
  {
    if (!a12)
      _Unwind_Resume(exception_object);
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
  _Unwind_Resume(exception_object);
}

void sub_19FA7EDF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  uint64_t *v12;
  uint64_t *v14;
  uint64_t v15;

  v14 = a12;
  if (a12 == v12)
  {
    v15 = 4;
    v14 = &a9;
  }
  else
  {
    if (!a12)
      _Unwind_Resume(exception_object);
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
  _Unwind_Resume(exception_object);
}

void sub_19FA7EE78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FA7F3D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19FA7F544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FA7F5BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19FA7F8DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FA7FA8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FA8010C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char *a18)
{
  void *v18;
  char *v19;
  char *v21;
  uint64_t v22;

  v21 = a18;
  if (a18 == v19)
  {
    v22 = 4;
    v21 = &a15;
  }
  else
  {
    if (!a18)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_6:

  _Unwind_Resume(a1);
}

void sub_19FA80308(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZL31GEOGetVectorKitVKMapSnapshotLogv_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.VectorKit", "VKMapSnapshot");
  v1 = (void *)GEOGetVectorKitVKMapSnapshotLog(void)::log;
  GEOGetVectorKitVKMapSnapshotLog(void)::log = (uint64_t)v0;

}

void sub_19FA80EA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

uint64_t gdc::Context::get<md::SceneContext>(_QWORD *a1)
{
  int8x8_t v1;
  uint8x8_t v2;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v1)
    return 0;
  v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    v3 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v1 <= 0x99BED48DEFBBD82BLL)
      v3 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v1;
  }
  else
  {
    v3 = (*(_QWORD *)&v1 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v4 = *(_QWORD **)(*a1 + 8 * v3);
  if (!v4)
    return 0;
  v5 = (_QWORD *)*v4;
  if (!v5)
    return 0;
  if (v2.u32[0] < 2uLL)
  {
    v6 = *(_QWORD *)&v1 - 1;
    while (1)
    {
      v8 = v5[1];
      if (v8 == 0x99BED48DEFBBD82BLL)
      {
        if (v5[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_22;
      }
      else if ((v8 & v6) != v3)
      {
        return 0;
      }
      v5 = (_QWORD *)*v5;
      if (!v5)
        return 0;
    }
  }
  while (1)
  {
    v7 = v5[1];
    if (v7 == 0x99BED48DEFBBD82BLL)
      break;
    if (v7 >= *(_QWORD *)&v1)
      v7 %= *(_QWORD *)&v1;
    if (v7 != v3)
      return 0;
LABEL_11:
    v5 = (_QWORD *)*v5;
    if (!v5)
      return 0;
  }
  if (v5[2] != 0x99BED48DEFBBD82BLL)
    goto LABEL_11;
LABEL_22:
  v9 = v5[5];
  if (*(_QWORD *)(v9 + 8) == 0x99BED48DEFBBD82BLL)
    return *(_QWORD *)(v9 + 32);
  return 0;
}

uint64_t md::LogicManager::logic<md::StyleLogic>(int8x8_t *a1)
{
  int8x8_t v1;
  uint8x8_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v1 = a1[2];
  if (!*(_QWORD *)&v1)
    return 0;
  v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    v3 = 0x2FED70A4459DFCA1;
    if (*(_QWORD *)&v1 <= 0x2FED70A4459DFCA1uLL)
      v3 = 0x2FED70A4459DFCA1uLL % *(_QWORD *)&v1;
  }
  else
  {
    v3 = (*(_QWORD *)&v1 - 1) & 0x2FED70A4459DFCA1;
  }
  v4 = *(_QWORD **)(*(_QWORD *)&a1[1] + 8 * v3);
  if (!v4)
    return 0;
  v5 = (_QWORD *)*v4;
  if (!v5)
    return 0;
  if (v2.u32[0] < 2uLL)
  {
    v6 = *(_QWORD *)&v1 - 1;
    while (1)
    {
      v8 = v5[1];
      if (v8 == 0x2FED70A4459DFCA1)
      {
        if (v5[2] == 0x2FED70A4459DFCA1)
          return v5[5];
      }
      else if ((v8 & v6) != v3)
      {
        return 0;
      }
      v5 = (_QWORD *)*v5;
      if (!v5)
        return 0;
    }
  }
  while (1)
  {
    v7 = v5[1];
    if (v7 == 0x2FED70A4459DFCA1)
      break;
    if (v7 >= *(_QWORD *)&v1)
      v7 %= *(_QWORD *)&v1;
    if (v7 != v3)
      return 0;
LABEL_11:
    v5 = (_QWORD *)*v5;
    if (!v5)
      return 0;
  }
  if (v5[2] != 0x2FED70A4459DFCA1)
    goto LABEL_11;
  return v5[5];
}

void sub_19FA8139C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FA814B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FA815CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FA8161C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FA816F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19FA81790(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19FA81900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_19FA8197C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  std::mutex *v10;

  std::mutex::unlock(v10);

  _Unwind_Resume(a1);
}

void sub_19FA819F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  std::mutex *v10;

  std::mutex::unlock(v10);

  _Unwind_Resume(a1);
}

void sub_19FA81B3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19FA81C48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t geo::_retain_ptr<NSMutableSet<objc_object  {objcproto29VKARWalkingFeatureSetObserver}*> * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4AD0;

  return a1;
}

void geo::_retain_ptr<NSMutableSet<objc_object  {objcproto29VKARWalkingFeatureSetObserver}*> * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4AD0;

  JUMPOUT(0x1A1AF4E00);
}

void sub_19FA81E74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19FA81F98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FA821CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19FA822FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19FA82540(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19FA826E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FA82BBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19FA82DE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19FA82E8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FA830E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_19FA832C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_19FA833A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_19FA83478(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19FA835CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19FA83774(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19FA8383C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19FA839D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19FA83C80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19FA83DDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_19FA83FDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19FA840C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FA841C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t geo::_retain_ptr<VKARWalkingFeature * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4D90;

  return a1;
}

void geo::_retain_ptr<VKARWalkingFeature * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4D90;

  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::LabelMarker::isRouteEta(md::LabelMarker *this)
{
  return 0;
}

uint64_t md::LabelMarker::routeInfo(md::LabelMarker *this)
{
  return 0;
}

uint64_t md::LabelMarker::isSelectable(md::LabelMarker *this)
{
  return 0;
}

uint64_t md::LabelMarker::isSelected(md::LabelMarker *this)
{
  return 0;
}

uint64_t md::LabelMarker::isVisible(md::LabelMarker *this)
{
  return 0;
}

uint64_t md::LabelMarker::isLabelHitAtScreenPoint(md::LabelMarker *this, const CGPoint *a2, uint64_t a3)
{
  double v6;
  float v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v13;
  std::__shared_weak_count *v14;
  std::recursive_mutex *v15;
  char v16;
  _DWORD v17[2];

  md::LabelMarker::acquireDisplayLock((md::LabelMarker *)&v13, (uint64_t)this);
  if (!v13)
  {
    v8 = 0;
    if (!v16)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = *(float *)(v13 + 480);
  v7 = a2->x * v6;
  *(float *)&v6 = *(float *)(v13 + 1508) - a2->y * v6;
  *(float *)v17 = v7;
  v17[1] = LODWORD(v6);
  v8 = (*(uint64_t (**)(_QWORD, md::LabelMarker *, _DWORD *, uint64_t))(**(_QWORD **)(v13 + 240) + 224))(*(_QWORD *)(v13 + 240), this, v17, a3);
  if (v16)
LABEL_3:
    std::recursive_mutex::unlock(v15);
LABEL_4:
  v9 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return v8;
}

void sub_19FA84464(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::pair<std::shared_ptr<md::LabelManager>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void md::LabelMarker::acquireDisplayLock(md::LabelMarker *this, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;

  v3 = *(std::__shared_weak_count **)(a2 + 240);
  if (v3 && (v5 = std::__shared_weak_count::lock(v3)) != 0)
  {
    v6 = v5;
    v7 = *(_QWORD *)(a2 + 232);
    if (v7)
    {
      v8 = v7 + 24;
      std::recursive_mutex::lock((std::recursive_mutex *)(v7 + 24));
      v9 = 1;
    }
    else
    {
      v8 = 0;
      v9 = 0;
    }
    *(_QWORD *)this = v7;
    *((_QWORD *)this + 1) = v6;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    *((_QWORD *)this + 2) = v8;
    *((_BYTE *)this + 24) = v9;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
    *((_QWORD *)this + 2) = 0;
    *((_BYTE *)this + 24) = 0;
  }
}

void sub_19FA84554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19FA8462C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t geo::_retain_ptr<VKCameraController * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4DB0;

  return a1;
}

void geo::_retain_ptr<VKCameraController * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4DB0;

  JUMPOUT(0x1A1AF4E00);
}

_QWORD *md::RenderItemPool::construct(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v13 = *(_OWORD *)(a2 + 56);
  v14 = *(_OWORD *)(a2 + 72);
  v15 = *(_OWORD *)(a2 + 88);
  v16 = *(_OWORD *)(a2 + 104);
  v11 = *(_OWORD *)(a2 + 24);
  v12 = *(_OWORD *)(a2 + 40);
  v7 = *(_QWORD **)(a1 + 8);
  v8 = v7[1];
  if (v8 == *(_QWORD *)(a1 + 16))
  {
    v7 = (_QWORD *)*v7;
    if (!v7)
    {
      v7 = malloc_type_malloc(120 * v8 + 16, 0xB644C221uLL);
      *v7 = 0;
      v7[1] = 0;
      **(_QWORD **)(a1 + 8) = v7;
    }
    *(_QWORD *)(a1 + 8) = v7;
    v8 = v7[1];
  }
  v9 = &v7[15 * v8];
  v7[1] = v8 + 1;
  v9[2] = &off_1E42B59B0;
  v9[3] = v5;
  v9 += 2;
  v9[2] = v6;
  *(_OWORD *)(v9 + 7) = v13;
  *(_OWORD *)(v9 + 5) = v12;
  *(_OWORD *)(v9 + 3) = v11;
  *(_OWORD *)(v9 + 13) = v16;
  *(_OWORD *)(v9 + 11) = v15;
  *(_OWORD *)(v9 + 9) = v14;
  v9[8] = a3;
  return v9;
}

void (***md::RenderItemPool::reset(void (***this)(void)))(void)
{
  void (***v1)(void);
  void (**v2)(void);
  void (**v3)(void);
  unint64_t v4;
  void (***v5)(void);
  void (**v6)(void);

  v1 = this;
  v2 = *this;
  if (*this)
  {
    do
    {
      if (v2[1])
      {
        v4 = 0;
        v5 = (void (***)(void))(v2 + 2);
        do
        {
          v6 = *v5;
          v5 += 15;
          (*v6)();
          ++v4;
          this = v5;
        }
        while (v4 < (unint64_t)v2[1]);
      }
      v2[1] = 0;
      v2 = (void (**)(void))*v2;
    }
    while (v2);
    v3 = *v1;
  }
  else
  {
    v3 = 0;
  }
  v1[1] = v3;
  return this;
}

void altitude::TrafficCacheNode::~TrafficCacheNode(altitude::TrafficCacheNode *this)
{
  altitude::GenericCacheNode<altitude::StampedTileKey,altitude::TrafficDynamicData>::~GenericCacheNode(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::KeyPair<altitude::StampedTileKey>,karo::AsyncRequestManagerNoArgs>::pruneRequests(uint64_t a1, int a2)
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  BOOL v9;
  uint64_t v10;
  int v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  v4 = *(uint64_t **)(a1 + 64);
  if (v4 != (uint64_t *)(a1 + 72))
  {
    do
    {
      v6 = (uint64_t *)v4[1];
      v7 = v4;
      if (v6)
      {
        do
        {
          v8 = v6;
          v6 = (uint64_t *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v8 = (uint64_t *)v7[2];
          v9 = *v8 == (_QWORD)v7;
          v7 = v8;
        }
        while (!v9);
      }
      v10 = v4[13];
      if (atomic_load((unsigned int *)(v10 + 128)))
        *(_DWORD *)(v10 + 180) = a2;
      pthread_mutex_lock(*(pthread_mutex_t **)(v10 + 152));
      v12 = *(_DWORD *)(v10 + 160);
      pthread_mutex_unlock(*(pthread_mutex_t **)(v10 + 152));
      if ((v12 & 1) != 0 && *(_BYTE *)(v10 + 176) && *(_DWORD *)(v10 + 180) != a2
        || (a2 - *(_DWORD *)(v10 + 180)) > *(_DWORD *)(v10 + 184))
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
        v13 = (uint64_t *)v4[1];
        v14 = v4;
        if (v13)
        {
          do
          {
            v15 = v13;
            v13 = (uint64_t *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            v15 = (uint64_t *)v14[2];
            v9 = *v15 == (_QWORD)v14;
            v14 = v15;
          }
          while (!v9);
        }
        if (*(uint64_t **)(a1 + 64) == v4)
          *(_QWORD *)(a1 + 64) = v15;
        v16 = *(uint64_t **)(a1 + 72);
        --*(_QWORD *)(a1 + 80);
        std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v16, v4);
        v17 = (std::__shared_weak_count *)v4[14];
        if (v17)
        {
          p_shared_owners = (unint64_t *)&v17->__shared_owners_;
          do
            v19 = __ldaxr(p_shared_owners);
          while (__stlxr(v19 - 1, p_shared_owners));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        operator delete(v4);
      }
      v4 = v8;
    }
    while (v8 != (uint64_t *)(a1 + 72));
  }
  *(_DWORD *)(a1 + 88) = a2;
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::KeyPair<altitude::StampedTileKey>,karo::AsyncRequestManagerNoArgs>::removeFromRequests(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  v4 = *(uint64_t **)(a1 + 64);
  if (v4 != (uint64_t *)(a1 + 72))
  {
    v5 = *(uint64_t **)(a1 + 64);
    while (1)
    {
      v6 = (uint64_t *)v5[1];
      if (v5[13] == a2)
        break;
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (uint64_t *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (uint64_t *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      v5 = v7;
      if (v7 == (uint64_t *)(a1 + 72))
        return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
    }
    if (v6)
    {
      do
      {
        v9 = v6;
        v6 = (uint64_t *)*v6;
      }
      while (v6);
    }
    else
    {
      v10 = v5;
      do
      {
        v9 = (uint64_t *)v10[2];
        v8 = *v9 == (_QWORD)v10;
        v10 = v9;
      }
      while (!v8);
    }
    if (v4 == v5)
      *(_QWORD *)(a1 + 64) = v9;
    v11 = *(uint64_t **)(a1 + 72);
    --*(_QWORD *)(a1 + 80);
    std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v11, v5);
    v12 = (std::__shared_weak_count *)v5[14];
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    operator delete(v5);
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::KeyPair<altitude::StampedTileKey>,karo::AsyncRequestManagerNoArgs>::clearRequest(uint64_t a1, _DWORD *a2)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  BOOL v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  v4 = (uint64_t **)(a1 + 64);
  v5 = (uint64_t *)std::__tree<std::__value_type<altitude::KeyPair<altitude::StampedTileKey>,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::KeyPair<altitude::StampedTileKey>,std::__value_type<altitude::KeyPair<altitude::StampedTileKey>,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::KeyPair<altitude::StampedTileKey>>,true>,std::allocator<std::__value_type<altitude::KeyPair<altitude::StampedTileKey>,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::find<altitude::KeyPair<altitude::StampedTileKey>>(a1 + 64, a2);
  if ((uint64_t *)(a1 + 72) != v5)
  {
    v6 = v5;
    (*(void (**)(uint64_t))(*(_QWORD *)v5[13] + 16))(v5[13]);
    v7 = (uint64_t *)v6[1];
    if (v7)
    {
      do
      {
        v8 = v7;
        v7 = (uint64_t *)*v7;
      }
      while (v7);
    }
    else
    {
      v9 = v6;
      do
      {
        v8 = (uint64_t *)v9[2];
        v10 = *v8 == (_QWORD)v9;
        v9 = v8;
      }
      while (!v10);
    }
    if (*v4 == v6)
      *v4 = v8;
    v11 = *(uint64_t **)(a1 + 72);
    --*(_QWORD *)(a1 + 80);
    std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v11, v6);
    v12 = (std::__shared_weak_count *)v6[14];
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    operator delete(v6);
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

void karo::AsyncRequestManagerTemplate<altitude::KeyPair<altitude::StampedTileKey>,karo::AsyncRequestManagerNoArgs>::createAndQueueRequest(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  _QWORD v10[2];

  (*(void (**)(uint64_t *__return_ptr))(*a1 + 64))(a2);
  v4 = a1[6];
  if (v4)
  {
    v5 = *a2;
    v6 = (std::__shared_weak_count *)a2[1];
    v10[0] = v5;
    v10[1] = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      karo::JobManager::queueJob(v4, v10);
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    else
    {
      karo::JobManager::queueJob(v4, v10);
    }
  }
}

_QWORD *altitude::TrafficCacheNode::createRequest@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  pthread_mutex_t *v9;
  std::string *v10;
  __int128 v11;
  _QWORD *result;
  void *v13;
  void *__p;
  char v15;
  void *v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  pthread_mutexattr_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 152);
  v16 = operator new(0x20uLL);
  v17 = xmmword_19FFB3DA0;
  strcpy((char *)v16, "/traffic/dynamic/cache/job/");
  v15 = 0;
  LOBYTE(__p) = 0;
  altitude::Tile::createTileName(&v18, (unsigned int *)(a2 + 52), (uint64_t *)&v16, (uint64_t *)&__p);
  karo::Job::Job(v6, v7);
  *(_BYTE *)(v6 + 176) = 0;
  *(_QWORD *)(v6 + 180) = 0xFFFFFFFF00000000;
  *(_QWORD *)v6 = off_1E42C5768;
  *(_QWORD *)(v6 + 192) = 0;
  pthread_mutexattr_init(&v20);
  pthread_mutexattr_settype(&v20, 2);
  v9 = (pthread_mutex_t *)operator new();
  pthread_mutex_init(v9, &v20);
  pthread_mutexattr_destroy(&v20);
  *(_QWORD *)(v6 + 192) = v9;
  v10 = (std::string *)(v6 + 200);
  if ((SHIBYTE(v19) & 0x80000000) == 0)
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v18;
    *(_QWORD *)(v6 + 216) = v19;
    *(_BYTE *)(v6 + 224) = 0;
    if ((v15 & 0x80000000) == 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v13 = (void *)v18;
  std::string::__init_copy_ctor_external(v10, (const std::string::value_type *)v18, *((std::string::size_type *)&v18 + 1));
  *(_BYTE *)(v6 + 224) = 0;
  operator delete(v13);
  if (v15 < 0)
LABEL_3:
    operator delete(__p);
LABEL_4:
  if (SHIBYTE(v17) < 0)
    operator delete(v16);
  *(_QWORD *)v6 = off_1E42C57F8;
  *(_BYTE *)(v6 + 225) = 0;
  *(_QWORD *)(v6 + 232) = v8;
  v11 = *(_OWORD *)(a2 + 52);
  *(_OWORD *)(v6 + 240) = *(_OWORD *)(a2 + 36);
  *(_OWORD *)(v6 + 256) = v11;
  *(_DWORD *)(v6 + 272) = *(_DWORD *)(a2 + 68);
  *(_QWORD *)(v6 + 280) = 0;
  *(_QWORD *)(v6 + 288) = 0;
  *a3 = v6;
  result = (_QWORD *)operator new();
  *result = &off_1E42E8B78;
  result[1] = 0;
  result[2] = 0;
  result[3] = v6;
  a3[1] = (uint64_t)result;
  return result;
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::KeyPair<altitude::StampedTileKey>,karo::AsyncRequestManagerNoArgs>::requestT(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  int v11;
  unsigned int v12;
  char v13;
  unsigned int v14;
  _QWORD *v15;
  unsigned int *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  unsigned int *v27;
  std::__shared_weak_count *v28;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  if (!a4)
    a4 = *(_DWORD *)(a1 + 88) + 1;
  v8 = *a2;
  v9 = a2[1];
  if (*a2 != v9)
  {
    do
    {
      (*(void (**)(unsigned int **__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 96))(&v27, a1, v8, v8 + 72);
      v10 = v27;
      v11 = *(_DWORD *)(v8 + 76);
      v12 = *(_DWORD *)(v8 + 80);
      v13 = *(_BYTE *)(v8 + 84);
      v14 = atomic_load(v27 + 4);
      if (v14 != v11)
        (*(void (**)(unsigned int *))(*(_QWORD *)v27 + 24))(v27);
      v10[45] = a4;
      v10[46] = v12;
      *((_BYTE *)v10 + 176) = v13;
      v15 = *(_QWORD **)(a3 + 8);
      if ((unint64_t)v15 >= *(_QWORD *)(a3 + 16))
      {
        v22 = std::vector<karo::AsyncRequestManager::RequestHandle>::__emplace_back_slow_path<std::shared_ptr<karo::AsyncRequestManager::Request> &>((void **)a3, (uint64_t)v27, (uint64_t)v28);
      }
      else
      {
        *v15 = &off_1E42C2D08;
        v16 = v27;
        v15[1] = v27;
        v17 = (uint64_t)v28;
        v15[2] = v28;
        if (v17)
        {
          v18 = (unint64_t *)(v17 + 8);
          do
            v19 = __ldxr(v18);
          while (__stxr(v19 + 1, v18));
          v16 = (unsigned int *)v15[1];
        }
        if (v16)
        {
          v20 = v16 + 32;
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 + 1, v20));
        }
        v22 = v15 + 3;
      }
      *(_QWORD *)(a3 + 8) = v22;
      v23 = v28;
      if (v28)
      {
        p_shared_owners = (unint64_t *)&v28->__shared_owners_;
        do
          v25 = __ldaxr(p_shared_owners);
        while (__stlxr(v25 - 1, p_shared_owners));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v8 += 88;
    }
    while (v8 != v9);
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

